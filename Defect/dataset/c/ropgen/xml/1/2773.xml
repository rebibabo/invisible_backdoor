<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2773.c" pos:tabs="8"><function pos:start="1:1" pos:end="291:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">get_cluster_offset</name><parameter_list pos:start="1:30" pos:end="7:71">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:45"><decl pos:start="3:31" pos:end="3:45"><type pos:start="3:31" pos:end="3:45"><name pos:start="3:31" pos:end="3:38">uint64_t</name></type> <name pos:start="3:40" pos:end="3:45">offset</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:59"><decl pos:start="3:48" pos:end="3:59"><type pos:start="3:48" pos:end="3:59"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:59">allocate</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:49"><decl pos:start="5:31" pos:end="5:49"><type pos:start="5:31" pos:end="5:49"><name pos:start="5:31" pos:end="5:33">int</name></type> <name pos:start="5:35" pos:end="5:49">compressed_size</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:41"><decl pos:start="7:31" pos:end="7:41"><type pos:start="7:31" pos:end="7:41"><name pos:start="7:31" pos:end="7:33">int</name></type> <name pos:start="7:35" pos:end="7:41">n_start</name></decl></parameter>, <parameter pos:start="7:44" pos:end="7:52"><decl pos:start="7:44" pos:end="7:52"><type pos:start="7:44" pos:end="7:52"><name pos:start="7:44" pos:end="7:46">int</name></type> <name pos:start="7:48" pos:end="7:52">n_end</name></decl></parameter>, <parameter pos:start="7:55" pos:end="7:70"><decl pos:start="7:55" pos:end="7:70"><type pos:start="7:55" pos:end="7:70"><name pos:start="7:55" pos:end="7:62">uint64_t</name> <modifier pos:start="7:64" pos:end="7:64">*</modifier></type><name pos:start="7:65" pos:end="7:70">result</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="291:1">{<block_content pos:start="11:5" pos:end="289:13">

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVQcowState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:49"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">min_index</name></decl>, <decl pos:start="13:20" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:20">i</name></decl>, <decl pos:start="13:23" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:23">j</name></decl>, <decl pos:start="13:26" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:26" pos:end="13:33">l1_index</name></decl>, <decl pos:start="13:36" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:36" pos:end="13:43">l2_index</name></decl>, <decl pos:start="13:46" pos:end="13:48"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:46" pos:end="13:48">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:55"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">l2_offset</name></decl>, <decl pos:start="15:25" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:12"><modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:33">l2_table</name></decl>, <decl pos:start="15:36" pos:end="15:49"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:36" pos:end="15:49">cluster_offset</name></decl>, <decl pos:start="15:52" pos:end="15:54"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:52" pos:end="15:54">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:22">min_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:20">new_l2_table</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:16"><expr pos:start="23:5" pos:end="23:15"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:11">result</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:12">l1_index</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:21">offset</name> <operator pos:start="25:23" pos:end="25:24">&gt;&gt;</operator> <operator pos:start="25:26" pos:end="25:26">(</operator><name pos:start="25:27" pos:end="25:36"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:36">l2_bits</name></name> <operator pos:start="25:38" pos:end="25:38">+</operator> <name pos:start="25:40" pos:end="25:54"><name pos:start="25:40" pos:end="25:40">s</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:54">cluster_bits</name></name><operator pos:start="25:55" pos:end="25:55">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:13">l2_offset</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:37"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:27">l1_table</name><index pos:start="27:28" pos:end="27:37">[<expr pos:start="27:29" pos:end="27:36"><name pos:start="27:29" pos:end="27:36">l1_index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:16">new_l2_table</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="65:5"><if pos:start="31:5" pos:end="65:5">if <condition pos:start="31:8" pos:end="31:19">(<expr pos:start="31:9" pos:end="31:18"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:18">l2_offset</name></expr>)</condition> <block pos:start="31:21" pos:end="65:5">{<block_content pos:start="33:9" pos:end="63:25">

        <if_stmt pos:start="33:9" pos:end="35:21"><if pos:start="33:9" pos:end="35:21">if <condition pos:start="33:12" pos:end="33:22">(<expr pos:start="33:13" pos:end="33:21"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:21">allocate</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:21"><block_content pos:start="35:13" pos:end="35:21">

            <return pos:start="35:13" pos:end="35:21">return <expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="37:9" pos:end="37:37">/* allocate a new l2 entry */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:49"><expr pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:17">l2_offset</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <call pos:start="39:21" pos:end="39:48"><name pos:start="39:21" pos:end="39:34">bdrv_getlength</name><argument_list pos:start="39:35" pos:end="39:48">(<argument pos:start="39:36" pos:end="39:47"><expr pos:start="39:36" pos:end="39:47"><name pos:start="39:36" pos:end="39:47"><name pos:start="39:36" pos:end="39:37">bs</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:43">file</name><operator pos:start="39:44" pos:end="39:45">-&gt;</operator><name pos:start="39:46" pos:end="39:47">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="41:9" pos:end="41:35">/* round to cluster size */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:79"><expr pos:start="43:9" pos:end="43:78"><name pos:start="43:9" pos:end="43:17">l2_offset</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <operator pos:start="43:21" pos:end="43:21">(</operator><name pos:start="43:22" pos:end="43:30">l2_offset</name> <operator pos:start="43:32" pos:end="43:32">+</operator> <name pos:start="43:34" pos:end="43:48"><name pos:start="43:34" pos:end="43:34">s</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:48">cluster_size</name></name> <operator pos:start="43:50" pos:end="43:50">-</operator> <literal type="number" pos:start="43:52" pos:end="43:52">1</literal><operator pos:start="43:53" pos:end="43:53">)</operator> <operator pos:start="43:55" pos:end="43:55">&amp;</operator> <operator pos:start="43:57" pos:end="43:57">~</operator><operator pos:start="43:58" pos:end="43:58">(</operator><name pos:start="43:59" pos:end="43:73"><name pos:start="43:59" pos:end="43:59">s</name><operator pos:start="43:60" pos:end="43:61">-&gt;</operator><name pos:start="43:62" pos:end="43:73">cluster_size</name></name> <operator pos:start="43:75" pos:end="43:75">-</operator> <literal type="number" pos:start="43:77" pos:end="43:77">1</literal><operator pos:start="43:78" pos:end="43:78">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="45:9" pos:end="45:33">/* update the L1 entry */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:19">l1_table</name><index pos:start="47:20" pos:end="47:29">[<expr pos:start="47:21" pos:end="47:28"><name pos:start="47:21" pos:end="47:28">l1_index</name></expr>]</index></name> <operator pos:start="47:31" pos:end="47:31">=</operator> <name pos:start="47:33" pos:end="47:41">l2_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:37"><expr pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:11">tmp</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:36"><name pos:start="49:15" pos:end="49:25">cpu_to_be64</name><argument_list pos:start="49:26" pos:end="49:36">(<argument pos:start="49:27" pos:end="49:35"><expr pos:start="49:27" pos:end="49:35"><name pos:start="49:27" pos:end="49:35">l2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="55:50"><expr pos:start="51:9" pos:end="55:49"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="55:49"><name pos:start="51:15" pos:end="51:30">bdrv_pwrite_sync</name><argument_list pos:start="51:31" pos:end="55:49">(<argument pos:start="51:32" pos:end="51:39"><expr pos:start="51:32" pos:end="51:39"><name pos:start="51:32" pos:end="51:39"><name pos:start="51:32" pos:end="51:33">bs</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:39">file</name></name></expr></argument>,

                               <argument pos:start="53:32" pos:end="53:74"><expr pos:start="53:32" pos:end="53:74"><name pos:start="53:32" pos:end="53:49"><name pos:start="53:32" pos:end="53:32">s</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:49">l1_table_offset</name></name> <operator pos:start="53:51" pos:end="53:51">+</operator> <name pos:start="53:53" pos:end="53:60">l1_index</name> <operator pos:start="53:62" pos:end="53:62">*</operator> <sizeof pos:start="53:64" pos:end="53:74">sizeof<argument_list pos:start="53:70" pos:end="53:74">(<argument pos:start="53:71" pos:end="53:73"><expr pos:start="53:71" pos:end="53:73"><name pos:start="53:71" pos:end="53:73">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                               <argument pos:start="55:32" pos:end="55:35"><expr pos:start="55:32" pos:end="55:35"><operator pos:start="55:32" pos:end="55:32">&amp;</operator><name pos:start="55:33" pos:end="55:35">tmp</name></expr></argument>, <argument pos:start="55:38" pos:end="55:48"><expr pos:start="55:38" pos:end="55:48"><sizeof pos:start="55:38" pos:end="55:48">sizeof<argument_list pos:start="55:44" pos:end="55:48">(<argument pos:start="55:45" pos:end="55:47"><expr pos:start="55:45" pos:end="55:47"><name pos:start="55:45" pos:end="55:47">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:20">(<expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">&lt;</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>)</condition> <block pos:start="57:22" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:23">

            <return pos:start="59:13" pos:end="59:23">return <expr pos:start="59:20" pos:end="59:22"><name pos:start="59:20" pos:end="59:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:20">new_l2_table</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <literal type="number" pos:start="63:24" pos:end="63:24">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="67:5" pos:end="89:5">for<control pos:start="67:8" pos:end="67:38">(<init pos:start="67:9" pos:end="67:14"><expr pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:9">i</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <literal type="number" pos:start="67:13" pos:end="67:13">0</literal></expr>;</init> <condition pos:start="67:16" pos:end="67:33"><expr pos:start="67:16" pos:end="67:32"><name pos:start="67:16" pos:end="67:16">i</name> <operator pos:start="67:18" pos:end="67:18">&lt;</operator> <name pos:start="67:20" pos:end="67:32">L2_CACHE_SIZE</name></expr>;</condition> <incr pos:start="67:35" pos:end="67:37"><expr pos:start="67:35" pos:end="67:37"><name pos:start="67:35" pos:end="67:35">i</name><operator pos:start="67:36" pos:end="67:37">++</operator></expr></incr>)</control> <block pos:start="67:40" pos:end="89:5">{<block_content pos:start="69:9" pos:end="87:9">

        <if_stmt pos:start="69:9" pos:end="87:9"><if pos:start="69:9" pos:end="87:9">if <condition pos:start="69:12" pos:end="69:48">(<expr pos:start="69:13" pos:end="69:47"><name pos:start="69:13" pos:end="69:21">l2_offset</name> <operator pos:start="69:23" pos:end="69:24">==</operator> <name pos:start="69:26" pos:end="69:47"><name pos:start="69:26" pos:end="69:26">s</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:44">l2_cache_offsets</name><index pos:start="69:45" pos:end="69:47">[<expr pos:start="69:46" pos:end="69:46"><name pos:start="69:46" pos:end="69:46">i</name></expr>]</index></name></expr>)</condition> <block pos:start="69:50" pos:end="87:9">{<block_content pos:start="73:13" pos:end="85:23">

            <comment type="block" pos:start="71:13" pos:end="71:41">/* increment the hit count */</comment>

            <if_stmt pos:start="73:13" pos:end="81:13"><if pos:start="73:13" pos:end="81:13">if <condition pos:start="73:16" pos:end="73:54">(<expr pos:start="73:17" pos:end="73:53"><operator pos:start="73:17" pos:end="73:18">++</operator><name pos:start="73:19" pos:end="73:39"><name pos:start="73:19" pos:end="73:19">s</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:36">l2_cache_counts</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><name pos:start="73:38" pos:end="73:38">i</name></expr>]</index></name> <operator pos:start="73:41" pos:end="73:42">==</operator> <literal type="number" pos:start="73:44" pos:end="73:53">0xffffffff</literal></expr>)</condition> <block pos:start="73:56" pos:end="81:13">{<block_content pos:start="75:17" pos:end="79:17">

                <for pos:start="75:17" pos:end="79:17">for<control pos:start="75:20" pos:end="75:50">(<init pos:start="75:21" pos:end="75:26"><expr pos:start="75:21" pos:end="75:25"><name pos:start="75:21" pos:end="75:21">j</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">0</literal></expr>;</init> <condition pos:start="75:28" pos:end="75:45"><expr pos:start="75:28" pos:end="75:44"><name pos:start="75:28" pos:end="75:28">j</name> <operator pos:start="75:30" pos:end="75:30">&lt;</operator> <name pos:start="75:32" pos:end="75:44">L2_CACHE_SIZE</name></expr>;</condition> <incr pos:start="75:47" pos:end="75:49"><expr pos:start="75:47" pos:end="75:49"><name pos:start="75:47" pos:end="75:47">j</name><operator pos:start="75:48" pos:end="75:49">++</operator></expr></incr>)</control> <block pos:start="75:52" pos:end="79:17">{<block_content pos:start="77:21" pos:end="77:48">

                    <expr_stmt pos:start="77:21" pos:end="77:48"><expr pos:start="77:21" pos:end="77:47"><name pos:start="77:21" pos:end="77:41"><name pos:start="77:21" pos:end="77:21">s</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:38">l2_cache_counts</name><index pos:start="77:39" pos:end="77:41">[<expr pos:start="77:40" pos:end="77:40"><name pos:start="77:40" pos:end="77:40">j</name></expr>]</index></name> <operator pos:start="77:43" pos:end="77:45">&gt;&gt;=</operator> <literal type="number" pos:start="77:47" pos:end="77:47">1</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:55"><expr pos:start="83:13" pos:end="83:54"><name pos:start="83:13" pos:end="83:20">l2_table</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:34"><name pos:start="83:24" pos:end="83:24">s</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:34">l2_cache</name></name> <operator pos:start="83:36" pos:end="83:36">+</operator> <operator pos:start="83:38" pos:end="83:38">(</operator><name pos:start="83:39" pos:end="83:39">i</name> <operator pos:start="83:41" pos:end="83:42">&lt;&lt;</operator> <name pos:start="83:44" pos:end="83:53"><name pos:start="83:44" pos:end="83:44">s</name><operator pos:start="83:45" pos:end="83:46">-&gt;</operator><name pos:start="83:47" pos:end="83:53">l2_bits</name></name><operator pos:start="83:54" pos:end="83:54">)</operator></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:23">goto <name pos:start="85:18" pos:end="85:22">found</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="91:5" pos:end="91:59">/* not found: load a new entry in the least used one */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:18"><expr pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:13">min_index</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <literal type="number" pos:start="93:17" pos:end="93:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:13">min_count</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <literal type="number" pos:start="95:17" pos:end="95:26">0xffffffff</literal></expr>;</expr_stmt>

    <for pos:start="97:5" pos:end="107:5">for<control pos:start="97:8" pos:end="97:38">(<init pos:start="97:9" pos:end="97:14"><expr pos:start="97:9" pos:end="97:13"><name pos:start="97:9" pos:end="97:9">i</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <literal type="number" pos:start="97:13" pos:end="97:13">0</literal></expr>;</init> <condition pos:start="97:16" pos:end="97:33"><expr pos:start="97:16" pos:end="97:32"><name pos:start="97:16" pos:end="97:16">i</name> <operator pos:start="97:18" pos:end="97:18">&lt;</operator> <name pos:start="97:20" pos:end="97:32">L2_CACHE_SIZE</name></expr>;</condition> <incr pos:start="97:35" pos:end="97:37"><expr pos:start="97:35" pos:end="97:37"><name pos:start="97:35" pos:end="97:35">i</name><operator pos:start="97:36" pos:end="97:37">++</operator></expr></incr>)</control> <block pos:start="97:40" pos:end="107:5">{<block_content pos:start="99:9" pos:end="105:9">

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:46">(<expr pos:start="99:13" pos:end="99:45"><name pos:start="99:13" pos:end="99:33"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:30">l2_cache_counts</name><index pos:start="99:31" pos:end="99:33">[<expr pos:start="99:32" pos:end="99:32"><name pos:start="99:32" pos:end="99:32">i</name></expr>]</index></name> <operator pos:start="99:35" pos:end="99:35">&lt;</operator> <name pos:start="99:37" pos:end="99:45">min_count</name></expr>)</condition> <block pos:start="99:48" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:26">

            <expr_stmt pos:start="101:13" pos:end="101:46"><expr pos:start="101:13" pos:end="101:45"><name pos:start="101:13" pos:end="101:21">min_count</name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:45"><name pos:start="101:25" pos:end="101:25">s</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:42">l2_cache_counts</name><index pos:start="101:43" pos:end="101:45">[<expr pos:start="101:44" pos:end="101:44"><name pos:start="101:44" pos:end="101:44">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:26"><expr pos:start="103:13" pos:end="103:25"><name pos:start="103:13" pos:end="103:21">min_index</name> <operator pos:start="103:23" pos:end="103:23">=</operator> <name pos:start="103:25" pos:end="103:25">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="109:5" pos:end="109:55"><expr pos:start="109:5" pos:end="109:54"><name pos:start="109:5" pos:end="109:12">l2_table</name> <operator pos:start="109:14" pos:end="109:14">=</operator> <name pos:start="109:16" pos:end="109:26"><name pos:start="109:16" pos:end="109:16">s</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:26">l2_cache</name></name> <operator pos:start="109:28" pos:end="109:28">+</operator> <operator pos:start="109:30" pos:end="109:30">(</operator><name pos:start="109:31" pos:end="109:39">min_index</name> <operator pos:start="109:41" pos:end="109:42">&lt;&lt;</operator> <name pos:start="109:44" pos:end="109:53"><name pos:start="109:44" pos:end="109:44">s</name><operator pos:start="109:45" pos:end="109:46">-&gt;</operator><name pos:start="109:47" pos:end="109:53">l2_bits</name></name><operator pos:start="109:54" pos:end="109:54">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="137:5"><if pos:start="111:5" pos:end="125:5">if <condition pos:start="111:8" pos:end="111:21">(<expr pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:20">new_l2_table</name></expr>)</condition> <block pos:start="111:23" pos:end="125:5">{<block_content pos:start="113:9" pos:end="123:9">

        <expr_stmt pos:start="113:9" pos:end="113:59"><expr pos:start="113:9" pos:end="113:58"><call pos:start="113:9" pos:end="113:58"><name pos:start="113:9" pos:end="113:14">memset</name><argument_list pos:start="113:15" pos:end="113:58">(<argument pos:start="113:16" pos:end="113:23"><expr pos:start="113:16" pos:end="113:23"><name pos:start="113:16" pos:end="113:23">l2_table</name></expr></argument>, <argument pos:start="113:26" pos:end="113:26"><expr pos:start="113:26" pos:end="113:26"><literal type="number" pos:start="113:26" pos:end="113:26">0</literal></expr></argument>, <argument pos:start="113:29" pos:end="113:57"><expr pos:start="113:29" pos:end="113:57"><name pos:start="113:29" pos:end="113:38"><name pos:start="113:29" pos:end="113:29">s</name><operator pos:start="113:30" pos:end="113:31">-&gt;</operator><name pos:start="113:32" pos:end="113:38">l2_size</name></name> <operator pos:start="113:40" pos:end="113:40">*</operator> <sizeof pos:start="113:42" pos:end="113:57">sizeof<argument_list pos:start="113:48" pos:end="113:57">(<argument pos:start="113:49" pos:end="113:56"><expr pos:start="113:49" pos:end="113:56"><name pos:start="113:49" pos:end="113:56">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="117:62"><expr pos:start="115:9" pos:end="117:61"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="117:61"><name pos:start="115:15" pos:end="115:30">bdrv_pwrite_sync</name><argument_list pos:start="115:31" pos:end="117:61">(<argument pos:start="115:32" pos:end="115:39"><expr pos:start="115:32" pos:end="115:39"><name pos:start="115:32" pos:end="115:39"><name pos:start="115:32" pos:end="115:33">bs</name><operator pos:start="115:34" pos:end="115:35">-&gt;</operator><name pos:start="115:36" pos:end="115:39">file</name></name></expr></argument>, <argument pos:start="115:42" pos:end="115:50"><expr pos:start="115:42" pos:end="115:50"><name pos:start="115:42" pos:end="115:50">l2_offset</name></expr></argument>, <argument pos:start="115:53" pos:end="115:60"><expr pos:start="115:53" pos:end="115:60"><name pos:start="115:53" pos:end="115:60">l2_table</name></expr></argument>,

                               <argument pos:start="117:32" pos:end="117:60"><expr pos:start="117:32" pos:end="117:60"><name pos:start="117:32" pos:end="117:41"><name pos:start="117:32" pos:end="117:32">s</name><operator pos:start="117:33" pos:end="117:34">-&gt;</operator><name pos:start="117:35" pos:end="117:41">l2_size</name></name> <operator pos:start="117:43" pos:end="117:43">*</operator> <sizeof pos:start="117:45" pos:end="117:60">sizeof<argument_list pos:start="117:51" pos:end="117:60">(<argument pos:start="117:52" pos:end="117:59"><expr pos:start="117:52" pos:end="117:59"><name pos:start="117:52" pos:end="117:59">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:20">(<expr pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:15">ret</name> <operator pos:start="119:17" pos:end="119:17">&lt;</operator> <literal type="number" pos:start="119:19" pos:end="119:19">0</literal></expr>)</condition> <block pos:start="119:22" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:23">

            <return pos:start="121:13" pos:end="121:23">return <expr pos:start="121:20" pos:end="121:22"><name pos:start="121:20" pos:end="121:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="125:7" pos:end="137:5">else <block pos:start="125:12" pos:end="137:5">{<block_content pos:start="127:9" pos:end="135:9">

        <expr_stmt pos:start="127:9" pos:end="129:56"><expr pos:start="127:9" pos:end="129:55"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="129:55"><name pos:start="127:15" pos:end="127:24">bdrv_pread</name><argument_list pos:start="127:25" pos:end="129:55">(<argument pos:start="127:26" pos:end="127:33"><expr pos:start="127:26" pos:end="127:33"><name pos:start="127:26" pos:end="127:33"><name pos:start="127:26" pos:end="127:27">bs</name><operator pos:start="127:28" pos:end="127:29">-&gt;</operator><name pos:start="127:30" pos:end="127:33">file</name></name></expr></argument>, <argument pos:start="127:36" pos:end="127:44"><expr pos:start="127:36" pos:end="127:44"><name pos:start="127:36" pos:end="127:44">l2_offset</name></expr></argument>, <argument pos:start="127:47" pos:end="127:54"><expr pos:start="127:47" pos:end="127:54"><name pos:start="127:47" pos:end="127:54">l2_table</name></expr></argument>,

                         <argument pos:start="129:26" pos:end="129:54"><expr pos:start="129:26" pos:end="129:54"><name pos:start="129:26" pos:end="129:35"><name pos:start="129:26" pos:end="129:26">s</name><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:35">l2_size</name></name> <operator pos:start="129:37" pos:end="129:37">*</operator> <sizeof pos:start="129:39" pos:end="129:54">sizeof<argument_list pos:start="129:45" pos:end="129:54">(<argument pos:start="129:46" pos:end="129:53"><expr pos:start="129:46" pos:end="129:53"><name pos:start="129:46" pos:end="129:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="135:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:20">(<expr pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">&lt;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>)</condition> <block pos:start="131:22" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:23">

            <return pos:start="133:13" pos:end="133:23">return <expr pos:start="133:20" pos:end="133:22"><name pos:start="133:20" pos:end="133:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:47"><expr pos:start="139:5" pos:end="139:46"><name pos:start="139:5" pos:end="139:34"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:23">l2_cache_offsets</name><index pos:start="139:24" pos:end="139:34">[<expr pos:start="139:25" pos:end="139:33"><name pos:start="139:25" pos:end="139:33">min_index</name></expr>]</index></name> <operator pos:start="139:36" pos:end="139:36">=</operator> <name pos:start="139:38" pos:end="139:46">l2_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:38"><expr pos:start="141:5" pos:end="141:37"><name pos:start="141:5" pos:end="141:33"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:22">l2_cache_counts</name><index pos:start="141:23" pos:end="141:33">[<expr pos:start="141:24" pos:end="141:32"><name pos:start="141:24" pos:end="141:32">min_index</name></expr>]</index></name> <operator pos:start="141:35" pos:end="141:35">=</operator> <literal type="number" pos:start="141:37" pos:end="141:37">1</literal></expr>;</expr_stmt>

 <label pos:start="143:2" pos:end="143:7"><name pos:start="143:2" pos:end="143:6">found</name>:</label>

    <expr_stmt pos:start="145:5" pos:end="145:62"><expr pos:start="145:5" pos:end="145:61"><name pos:start="145:5" pos:end="145:12">l2_index</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <operator pos:start="145:16" pos:end="145:16">(</operator><name pos:start="145:17" pos:end="145:22">offset</name> <operator pos:start="145:24" pos:end="145:25">&gt;&gt;</operator> <name pos:start="145:27" pos:end="145:41"><name pos:start="145:27" pos:end="145:27">s</name><operator pos:start="145:28" pos:end="145:29">-&gt;</operator><name pos:start="145:30" pos:end="145:41">cluster_bits</name></name><operator pos:start="145:42" pos:end="145:42">)</operator> <operator pos:start="145:44" pos:end="145:44">&amp;</operator> <operator pos:start="145:46" pos:end="145:46">(</operator><name pos:start="145:47" pos:end="145:56"><name pos:start="145:47" pos:end="145:47">s</name><operator pos:start="145:48" pos:end="145:49">-&gt;</operator><name pos:start="145:50" pos:end="145:56">l2_size</name></name> <operator pos:start="145:58" pos:end="145:58">-</operator> <literal type="number" pos:start="145:60" pos:end="145:60">1</literal><operator pos:start="145:61" pos:end="145:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:53"><expr pos:start="147:5" pos:end="147:52"><name pos:start="147:5" pos:end="147:18">cluster_offset</name> <operator pos:start="147:20" pos:end="147:20">=</operator> <call pos:start="147:22" pos:end="147:52"><name pos:start="147:22" pos:end="147:32">be64_to_cpu</name><argument_list pos:start="147:33" pos:end="147:52">(<argument pos:start="147:34" pos:end="147:51"><expr pos:start="147:34" pos:end="147:51"><name pos:start="147:34" pos:end="147:51"><name pos:start="147:34" pos:end="147:41">l2_table</name><index pos:start="147:42" pos:end="147:51">[<expr pos:start="147:43" pos:end="147:50"><name pos:start="147:43" pos:end="147:50">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="285:5"><if pos:start="149:5" pos:end="285:5">if <condition pos:start="149:8" pos:end="151:68">(<expr pos:start="149:9" pos:end="151:67"><operator pos:start="149:9" pos:end="149:9">!</operator><name pos:start="149:10" pos:end="149:23">cluster_offset</name> <operator pos:start="149:25" pos:end="149:26">||</operator>

        <operator pos:start="151:9" pos:end="151:9">(</operator><operator pos:start="151:10" pos:end="151:10">(</operator><name pos:start="151:11" pos:end="151:24">cluster_offset</name> <operator pos:start="151:26" pos:end="151:26">&amp;</operator> <name pos:start="151:28" pos:end="151:48">QCOW_OFLAG_COMPRESSED</name><operator pos:start="151:49" pos:end="151:49">)</operator> <operator pos:start="151:51" pos:end="151:52">&amp;&amp;</operator> <name pos:start="151:54" pos:end="151:61">allocate</name> <operator pos:start="151:63" pos:end="151:64">==</operator> <literal type="number" pos:start="151:66" pos:end="151:66">1</literal><operator pos:start="151:67" pos:end="151:67">)</operator></expr>)</condition> <block pos:start="151:70" pos:end="285:5">{<block_content pos:start="153:9" pos:end="283:9">

        <if_stmt pos:start="153:9" pos:end="155:21"><if pos:start="153:9" pos:end="155:21">if <condition pos:start="153:12" pos:end="153:22">(<expr pos:start="153:13" pos:end="153:21"><operator pos:start="153:13" pos:end="153:13">!</operator><name pos:start="153:14" pos:end="153:21">allocate</name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:21"><block_content pos:start="155:13" pos:end="155:21">

            <return pos:start="155:13" pos:end="155:21">return <expr pos:start="155:20" pos:end="155:20"><literal type="number" pos:start="155:20" pos:end="155:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="157:9" pos:end="157:36">/* allocate a new cluster */</comment>

        <if_stmt pos:start="159:9" pos:end="267:9"><if pos:start="159:9" pos:end="193:9">if <condition pos:start="159:12" pos:end="161:51">(<expr pos:start="159:13" pos:end="161:50"><operator pos:start="159:13" pos:end="159:13">(</operator><name pos:start="159:14" pos:end="159:27">cluster_offset</name> <operator pos:start="159:29" pos:end="159:29">&amp;</operator> <name pos:start="159:31" pos:end="159:51">QCOW_OFLAG_COMPRESSED</name><operator pos:start="159:52" pos:end="159:52">)</operator> <operator pos:start="159:54" pos:end="159:55">&amp;&amp;</operator>

            <operator pos:start="161:13" pos:end="161:13">(</operator><name pos:start="161:14" pos:end="161:18">n_end</name> <operator pos:start="161:20" pos:end="161:20">-</operator> <name pos:start="161:22" pos:end="161:28">n_start</name><operator pos:start="161:29" pos:end="161:29">)</operator> <operator pos:start="161:31" pos:end="161:31">&lt;</operator> <name pos:start="161:33" pos:end="161:50"><name pos:start="161:33" pos:end="161:33">s</name><operator pos:start="161:34" pos:end="161:35">-&gt;</operator><name pos:start="161:36" pos:end="161:50">cluster_sectors</name></name></expr>)</condition> <block pos:start="161:53" pos:end="193:9">{<block_content pos:start="169:13" pos:end="191:13">

            <comment type="block" pos:start="163:13" pos:end="167:29">/* if the cluster is already compressed, we must

               decompress it in the case it is not completely

               overwritten */</comment>

            <if_stmt pos:start="169:13" pos:end="173:13"><if pos:start="169:13" pos:end="173:13">if <condition pos:start="169:16" pos:end="169:59">(<expr pos:start="169:17" pos:end="169:58"><call pos:start="169:17" pos:end="169:54"><name pos:start="169:17" pos:end="169:34">decompress_cluster</name><argument_list pos:start="169:35" pos:end="169:54">(<argument pos:start="169:36" pos:end="169:37"><expr pos:start="169:36" pos:end="169:37"><name pos:start="169:36" pos:end="169:37">bs</name></expr></argument>, <argument pos:start="169:40" pos:end="169:53"><expr pos:start="169:40" pos:end="169:53"><name pos:start="169:40" pos:end="169:53">cluster_offset</name></expr></argument>)</argument_list></call> <operator pos:start="169:56" pos:end="169:56">&lt;</operator> <literal type="number" pos:start="169:58" pos:end="169:58">0</literal></expr>)</condition> <block pos:start="169:61" pos:end="173:13">{<block_content pos:start="171:17" pos:end="171:28">

                <return pos:start="171:17" pos:end="171:28">return <expr pos:start="171:24" pos:end="171:27"><operator pos:start="171:24" pos:end="171:24">-</operator><name pos:start="171:25" pos:end="171:27">EIO</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:58"><expr pos:start="175:13" pos:end="175:57"><name pos:start="175:13" pos:end="175:26">cluster_offset</name> <operator pos:start="175:28" pos:end="175:28">=</operator> <call pos:start="175:30" pos:end="175:57"><name pos:start="175:30" pos:end="175:43">bdrv_getlength</name><argument_list pos:start="175:44" pos:end="175:57">(<argument pos:start="175:45" pos:end="175:56"><expr pos:start="175:45" pos:end="175:56"><name pos:start="175:45" pos:end="175:56"><name pos:start="175:45" pos:end="175:46">bs</name><operator pos:start="175:47" pos:end="175:48">-&gt;</operator><name pos:start="175:49" pos:end="175:52">file</name><operator pos:start="175:53" pos:end="175:54">-&gt;</operator><name pos:start="175:55" pos:end="175:56">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="179:39"><expr pos:start="177:13" pos:end="179:38"><name pos:start="177:13" pos:end="177:26">cluster_offset</name> <operator pos:start="177:28" pos:end="177:28">=</operator> <operator pos:start="177:30" pos:end="177:30">(</operator><name pos:start="177:31" pos:end="177:44">cluster_offset</name> <operator pos:start="177:46" pos:end="177:46">+</operator> <name pos:start="177:48" pos:end="177:62"><name pos:start="177:48" pos:end="177:48">s</name><operator pos:start="177:49" pos:end="177:50">-&gt;</operator><name pos:start="177:51" pos:end="177:62">cluster_size</name></name> <operator pos:start="177:64" pos:end="177:64">-</operator> <literal type="number" pos:start="177:66" pos:end="177:66">1</literal><operator pos:start="177:67" pos:end="177:67">)</operator> <operator pos:start="177:69" pos:end="177:69">&amp;</operator>

                <operator pos:start="179:17" pos:end="179:17">~</operator><operator pos:start="179:18" pos:end="179:18">(</operator><name pos:start="179:19" pos:end="179:33"><name pos:start="179:19" pos:end="179:19">s</name><operator pos:start="179:20" pos:end="179:21">-&gt;</operator><name pos:start="179:22" pos:end="179:33">cluster_size</name></name> <operator pos:start="179:35" pos:end="179:35">-</operator> <literal type="number" pos:start="179:37" pos:end="179:37">1</literal><operator pos:start="179:38" pos:end="179:38">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="181:13" pos:end="181:43">/* write the cluster content */</comment>

            <expr_stmt pos:start="183:13" pos:end="185:47"><expr pos:start="183:13" pos:end="185:46"><name pos:start="183:13" pos:end="183:15">ret</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <call pos:start="183:19" pos:end="185:46"><name pos:start="183:19" pos:end="183:29">bdrv_pwrite</name><argument_list pos:start="183:30" pos:end="185:46">(<argument pos:start="183:31" pos:end="183:38"><expr pos:start="183:31" pos:end="183:38"><name pos:start="183:31" pos:end="183:38"><name pos:start="183:31" pos:end="183:32">bs</name><operator pos:start="183:33" pos:end="183:34">-&gt;</operator><name pos:start="183:35" pos:end="183:38">file</name></name></expr></argument>, <argument pos:start="183:41" pos:end="183:54"><expr pos:start="183:41" pos:end="183:54"><name pos:start="183:41" pos:end="183:54">cluster_offset</name></expr></argument>, <argument pos:start="183:57" pos:end="183:72"><expr pos:start="183:57" pos:end="183:72"><name pos:start="183:57" pos:end="183:72"><name pos:start="183:57" pos:end="183:57">s</name><operator pos:start="183:58" pos:end="183:59">-&gt;</operator><name pos:start="183:60" pos:end="183:72">cluster_cache</name></name></expr></argument>,

                              <argument pos:start="185:31" pos:end="185:45"><expr pos:start="185:31" pos:end="185:45"><name pos:start="185:31" pos:end="185:45"><name pos:start="185:31" pos:end="185:31">s</name><operator pos:start="185:32" pos:end="185:33">-&gt;</operator><name pos:start="185:34" pos:end="185:45">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="187:13" pos:end="191:13"><if pos:start="187:13" pos:end="191:13">if <condition pos:start="187:16" pos:end="187:24">(<expr pos:start="187:17" pos:end="187:23"><name pos:start="187:17" pos:end="187:19">ret</name> <operator pos:start="187:21" pos:end="187:21">&lt;</operator> <literal type="number" pos:start="187:23" pos:end="187:23">0</literal></expr>)</condition> <block pos:start="187:26" pos:end="191:13">{<block_content pos:start="189:17" pos:end="189:27">

                <return pos:start="189:17" pos:end="189:27">return <expr pos:start="189:24" pos:end="189:26"><name pos:start="189:24" pos:end="189:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="193:11" pos:end="267:9">else <block pos:start="193:16" pos:end="267:9">{<block_content pos:start="195:13" pos:end="265:13">

            <expr_stmt pos:start="195:13" pos:end="195:58"><expr pos:start="195:13" pos:end="195:57"><name pos:start="195:13" pos:end="195:26">cluster_offset</name> <operator pos:start="195:28" pos:end="195:28">=</operator> <call pos:start="195:30" pos:end="195:57"><name pos:start="195:30" pos:end="195:43">bdrv_getlength</name><argument_list pos:start="195:44" pos:end="195:57">(<argument pos:start="195:45" pos:end="195:56"><expr pos:start="195:45" pos:end="195:56"><name pos:start="195:45" pos:end="195:56"><name pos:start="195:45" pos:end="195:46">bs</name><operator pos:start="195:47" pos:end="195:48">-&gt;</operator><name pos:start="195:49" pos:end="195:52">file</name><operator pos:start="195:53" pos:end="195:54">-&gt;</operator><name pos:start="195:55" pos:end="195:56">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="197:13" pos:end="265:13"><if pos:start="197:13" pos:end="259:13">if <condition pos:start="197:16" pos:end="197:30">(<expr pos:start="197:17" pos:end="197:29"><name pos:start="197:17" pos:end="197:24">allocate</name> <operator pos:start="197:26" pos:end="197:27">==</operator> <literal type="number" pos:start="197:29" pos:end="197:29">1</literal></expr>)</condition> <block pos:start="197:32" pos:end="259:13">{<block_content pos:start="201:17" pos:end="257:17">

                <comment type="block" pos:start="199:17" pos:end="199:43">/* round to cluster size */</comment>

                <expr_stmt pos:start="201:17" pos:end="203:43"><expr pos:start="201:17" pos:end="203:42"><name pos:start="201:17" pos:end="201:30">cluster_offset</name> <operator pos:start="201:32" pos:end="201:32">=</operator> <operator pos:start="201:34" pos:end="201:34">(</operator><name pos:start="201:35" pos:end="201:48">cluster_offset</name> <operator pos:start="201:50" pos:end="201:50">+</operator> <name pos:start="201:52" pos:end="201:66"><name pos:start="201:52" pos:end="201:52">s</name><operator pos:start="201:53" pos:end="201:54">-&gt;</operator><name pos:start="201:55" pos:end="201:66">cluster_size</name></name> <operator pos:start="201:68" pos:end="201:68">-</operator> <literal type="number" pos:start="201:70" pos:end="201:70">1</literal><operator pos:start="201:71" pos:end="201:71">)</operator> <operator pos:start="201:73" pos:end="201:73">&amp;</operator>

                    <operator pos:start="203:21" pos:end="203:21">~</operator><operator pos:start="203:22" pos:end="203:22">(</operator><name pos:start="203:23" pos:end="203:37"><name pos:start="203:23" pos:end="203:23">s</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:37">cluster_size</name></name> <operator pos:start="203:39" pos:end="203:39">-</operator> <literal type="number" pos:start="203:41" pos:end="203:41">1</literal><operator pos:start="203:42" pos:end="203:42">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="207:55"><expr pos:start="205:17" pos:end="207:54"><call pos:start="205:17" pos:end="207:54"><name pos:start="205:17" pos:end="205:29">bdrv_truncate</name><argument_list pos:start="205:30" pos:end="207:54">(<argument pos:start="205:31" pos:end="205:38"><expr pos:start="205:31" pos:end="205:38"><name pos:start="205:31" pos:end="205:38"><name pos:start="205:31" pos:end="205:32">bs</name><operator pos:start="205:33" pos:end="205:34">-&gt;</operator><name pos:start="205:35" pos:end="205:38">file</name></name></expr></argument>, <argument pos:start="205:41" pos:end="205:72"><expr pos:start="205:41" pos:end="205:72"><name pos:start="205:41" pos:end="205:54">cluster_offset</name> <operator pos:start="205:56" pos:end="205:56">+</operator> <name pos:start="205:58" pos:end="205:72"><name pos:start="205:58" pos:end="205:58">s</name><operator pos:start="205:59" pos:end="205:60">-&gt;</operator><name pos:start="205:61" pos:end="205:72">cluster_size</name></name></expr></argument>,

                              <argument pos:start="207:31" pos:end="207:47"><expr pos:start="207:31" pos:end="207:47"><name pos:start="207:31" pos:end="207:47">PREALLOC_MODE_OFF</name></expr></argument>, <argument pos:start="207:50" pos:end="207:53"><expr pos:start="207:50" pos:end="207:53"><name pos:start="207:50" pos:end="207:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="209:17" pos:end="211:52">/* if encrypted, we must initialize the cluster

                   content which won't be written */</comment>

                <if_stmt pos:start="213:17" pos:end="257:17"><if pos:start="213:17" pos:end="257:17">if <condition pos:start="213:20" pos:end="215:59">(<expr pos:start="213:21" pos:end="215:58"><name pos:start="213:21" pos:end="213:33"><name pos:start="213:21" pos:end="213:22">bs</name><operator pos:start="213:23" pos:end="213:24">-&gt;</operator><name pos:start="213:25" pos:end="213:33">encrypted</name></name> <operator pos:start="213:35" pos:end="213:36">&amp;&amp;</operator>

                    <operator pos:start="215:21" pos:end="215:21">(</operator><name pos:start="215:22" pos:end="215:26">n_end</name> <operator pos:start="215:28" pos:end="215:28">-</operator> <name pos:start="215:30" pos:end="215:36">n_start</name><operator pos:start="215:37" pos:end="215:37">)</operator> <operator pos:start="215:39" pos:end="215:39">&lt;</operator> <name pos:start="215:41" pos:end="215:58"><name pos:start="215:41" pos:end="215:41">s</name><operator pos:start="215:42" pos:end="215:43">-&gt;</operator><name pos:start="215:44" pos:end="215:58">cluster_sectors</name></name></expr>)</condition> <block pos:start="215:61" pos:end="257:17">{<block_content pos:start="217:21" pos:end="255:21">

                    <decl_stmt pos:start="217:21" pos:end="217:40"><decl pos:start="217:21" pos:end="217:39"><type pos:start="217:21" pos:end="217:28"><name pos:start="217:21" pos:end="217:28">uint64_t</name></type> <name pos:start="217:30" pos:end="217:39">start_sect</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="219:21" pos:end="219:38"><expr pos:start="219:21" pos:end="219:37"><call pos:start="219:21" pos:end="219:37"><name pos:start="219:21" pos:end="219:26">assert</name><argument_list pos:start="219:27" pos:end="219:37">(<argument pos:start="219:28" pos:end="219:36"><expr pos:start="219:28" pos:end="219:36"><name pos:start="219:28" pos:end="219:36"><name pos:start="219:28" pos:end="219:28">s</name><operator pos:start="219:29" pos:end="219:30">-&gt;</operator><name pos:start="219:31" pos:end="219:36">crypto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="221:21" pos:end="221:72"><expr pos:start="221:21" pos:end="221:71"><name pos:start="221:21" pos:end="221:30">start_sect</name> <operator pos:start="221:32" pos:end="221:32">=</operator> <operator pos:start="221:34" pos:end="221:34">(</operator><name pos:start="221:35" pos:end="221:40">offset</name> <operator pos:start="221:42" pos:end="221:42">&amp;</operator> <operator pos:start="221:44" pos:end="221:44">~</operator><operator pos:start="221:45" pos:end="221:45">(</operator><name pos:start="221:46" pos:end="221:60"><name pos:start="221:46" pos:end="221:46">s</name><operator pos:start="221:47" pos:end="221:48">-&gt;</operator><name pos:start="221:49" pos:end="221:60">cluster_size</name></name> <operator pos:start="221:62" pos:end="221:62">-</operator> <literal type="number" pos:start="221:64" pos:end="221:64">1</literal><operator pos:start="221:65" pos:end="221:65">)</operator><operator pos:start="221:66" pos:end="221:66">)</operator> <operator pos:start="221:68" pos:end="221:69">&gt;&gt;</operator> <literal type="number" pos:start="221:71" pos:end="221:71">9</literal></expr>;</expr_stmt>

                    <for pos:start="223:21" pos:end="255:21">for<control pos:start="223:24" pos:end="223:59">(<init pos:start="223:25" pos:end="223:30"><expr pos:start="223:25" pos:end="223:29"><name pos:start="223:25" pos:end="223:25">i</name> <operator pos:start="223:27" pos:end="223:27">=</operator> <literal type="number" pos:start="223:29" pos:end="223:29">0</literal></expr>;</init> <condition pos:start="223:32" pos:end="223:54"><expr pos:start="223:32" pos:end="223:53"><name pos:start="223:32" pos:end="223:32">i</name> <operator pos:start="223:34" pos:end="223:34">&lt;</operator> <name pos:start="223:36" pos:end="223:53"><name pos:start="223:36" pos:end="223:36">s</name><operator pos:start="223:37" pos:end="223:38">-&gt;</operator><name pos:start="223:39" pos:end="223:53">cluster_sectors</name></name></expr>;</condition> <incr pos:start="223:56" pos:end="223:58"><expr pos:start="223:56" pos:end="223:58"><name pos:start="223:56" pos:end="223:56">i</name><operator pos:start="223:57" pos:end="223:58">++</operator></expr></incr>)</control> <block pos:start="223:61" pos:end="255:21">{<block_content pos:start="225:25" pos:end="253:25">

                        <if_stmt pos:start="225:25" pos:end="253:25"><if pos:start="225:25" pos:end="253:25">if <condition pos:start="225:28" pos:end="225:54">(<expr pos:start="225:29" pos:end="225:53"><name pos:start="225:29" pos:end="225:29">i</name> <operator pos:start="225:31" pos:end="225:31">&lt;</operator> <name pos:start="225:33" pos:end="225:39">n_start</name> <operator pos:start="225:41" pos:end="225:42">||</operator> <name pos:start="225:44" pos:end="225:44">i</name> <operator pos:start="225:46" pos:end="225:47">&gt;=</operator> <name pos:start="225:49" pos:end="225:53">n_end</name></expr>)</condition> <block pos:start="225:56" pos:end="253:25">{<block_content pos:start="227:29" pos:end="251:29">

                            <expr_stmt pos:start="227:29" pos:end="227:63"><expr pos:start="227:29" pos:end="227:62"><call pos:start="227:29" pos:end="227:62"><name pos:start="227:29" pos:end="227:34">memset</name><argument_list pos:start="227:35" pos:end="227:62">(<argument pos:start="227:36" pos:end="227:50"><expr pos:start="227:36" pos:end="227:50"><name pos:start="227:36" pos:end="227:50"><name pos:start="227:36" pos:end="227:36">s</name><operator pos:start="227:37" pos:end="227:38">-&gt;</operator><name pos:start="227:39" pos:end="227:50">cluster_data</name></name></expr></argument>, <argument pos:start="227:53" pos:end="227:56"><expr pos:start="227:53" pos:end="227:56"><literal type="number" pos:start="227:53" pos:end="227:56">0x00</literal></expr></argument>, <argument pos:start="227:59" pos:end="227:61"><expr pos:start="227:59" pos:end="227:61"><literal type="number" pos:start="227:59" pos:end="227:61">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="229:29" pos:end="239:29"><if pos:start="229:29" pos:end="239:29">if <condition pos:start="229:32" pos:end="235:64">(<expr pos:start="229:33" pos:end="235:63"><call pos:start="229:33" pos:end="235:59"><name pos:start="229:33" pos:end="229:53">qcrypto_block_encrypt</name><argument_list pos:start="229:54" pos:end="235:59">(<argument pos:start="229:55" pos:end="229:63"><expr pos:start="229:55" pos:end="229:63"><name pos:start="229:55" pos:end="229:63"><name pos:start="229:55" pos:end="229:55">s</name><operator pos:start="229:56" pos:end="229:57">-&gt;</operator><name pos:start="229:58" pos:end="229:63">crypto</name></name></expr></argument>, <argument pos:start="229:66" pos:end="229:79"><expr pos:start="229:66" pos:end="229:79"><name pos:start="229:66" pos:end="229:75">start_sect</name> <operator pos:start="229:77" pos:end="229:77">+</operator> <name pos:start="229:79" pos:end="229:79">i</name></expr></argument>,

                                                      <argument pos:start="231:55" pos:end="231:69"><expr pos:start="231:55" pos:end="231:69"><name pos:start="231:55" pos:end="231:69"><name pos:start="231:55" pos:end="231:55">s</name><operator pos:start="231:56" pos:end="231:57">-&gt;</operator><name pos:start="231:58" pos:end="231:69">cluster_data</name></name></expr></argument>,

                                                      <argument pos:start="233:55" pos:end="233:70"><expr pos:start="233:55" pos:end="233:70"><name pos:start="233:55" pos:end="233:70">BDRV_SECTOR_SIZE</name></expr></argument>,

                                                      <argument pos:start="235:55" pos:end="235:58"><expr pos:start="235:55" pos:end="235:58"><name pos:start="235:55" pos:end="235:58">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="235:61" pos:end="235:61">&lt;</operator> <literal type="number" pos:start="235:63" pos:end="235:63">0</literal></expr>)</condition> <block pos:start="235:66" pos:end="239:29">{<block_content pos:start="237:33" pos:end="237:44">

                                <return pos:start="237:33" pos:end="237:44">return <expr pos:start="237:40" pos:end="237:43"><operator pos:start="237:40" pos:end="237:40">-</operator><name pos:start="237:41" pos:end="237:43">EIO</name></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="241:29" pos:end="245:68"><expr pos:start="241:29" pos:end="245:67"><name pos:start="241:29" pos:end="241:31">ret</name> <operator pos:start="241:33" pos:end="241:33">=</operator> <call pos:start="241:35" pos:end="245:67"><name pos:start="241:35" pos:end="241:45">bdrv_pwrite</name><argument_list pos:start="241:46" pos:end="245:67">(<argument pos:start="241:47" pos:end="241:54"><expr pos:start="241:47" pos:end="241:54"><name pos:start="241:47" pos:end="241:54"><name pos:start="241:47" pos:end="241:48">bs</name><operator pos:start="241:49" pos:end="241:50">-&gt;</operator><name pos:start="241:51" pos:end="241:54">file</name></name></expr></argument>,

                                              <argument pos:start="243:47" pos:end="243:70"><expr pos:start="243:47" pos:end="243:70"><name pos:start="243:47" pos:end="243:60">cluster_offset</name> <operator pos:start="243:62" pos:end="243:62">+</operator> <name pos:start="243:64" pos:end="243:64">i</name> <operator pos:start="243:66" pos:end="243:66">*</operator> <literal type="number" pos:start="243:68" pos:end="243:70">512</literal></expr></argument>,

                                              <argument pos:start="245:47" pos:end="245:61"><expr pos:start="245:47" pos:end="245:61"><name pos:start="245:47" pos:end="245:61"><name pos:start="245:47" pos:end="245:47">s</name><operator pos:start="245:48" pos:end="245:49">-&gt;</operator><name pos:start="245:50" pos:end="245:61">cluster_data</name></name></expr></argument>, <argument pos:start="245:64" pos:end="245:66"><expr pos:start="245:64" pos:end="245:66"><literal type="number" pos:start="245:64" pos:end="245:66">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="247:29" pos:end="251:29"><if pos:start="247:29" pos:end="251:29">if <condition pos:start="247:32" pos:end="247:40">(<expr pos:start="247:33" pos:end="247:39"><name pos:start="247:33" pos:end="247:35">ret</name> <operator pos:start="247:37" pos:end="247:37">&lt;</operator> <literal type="number" pos:start="247:39" pos:end="247:39">0</literal></expr>)</condition> <block pos:start="247:42" pos:end="251:29">{<block_content pos:start="249:33" pos:end="249:43">

                                <return pos:start="249:33" pos:end="249:43">return <expr pos:start="249:40" pos:end="249:42"><name pos:start="249:40" pos:end="249:42">ret</name></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="259:15" pos:end="265:13">else if <condition pos:start="259:23" pos:end="259:37">(<expr pos:start="259:24" pos:end="259:36"><name pos:start="259:24" pos:end="259:31">allocate</name> <operator pos:start="259:33" pos:end="259:34">==</operator> <literal type="number" pos:start="259:36" pos:end="259:36">2</literal></expr>)</condition> <block pos:start="259:39" pos:end="265:13">{<block_content pos:start="261:17" pos:end="263:72">

                <expr_stmt pos:start="261:17" pos:end="263:72"><expr pos:start="261:17" pos:end="263:71"><name pos:start="261:17" pos:end="261:30">cluster_offset</name> <operator pos:start="261:32" pos:end="261:33">|=</operator> <name pos:start="261:35" pos:end="261:55">QCOW_OFLAG_COMPRESSED</name> <operator pos:start="261:57" pos:end="261:57">|</operator>

                    <operator pos:start="263:21" pos:end="263:21">(</operator><name pos:start="263:22" pos:end="263:29">uint64_t</name><operator pos:start="263:30" pos:end="263:30">)</operator><name pos:start="263:31" pos:end="263:45">compressed_size</name> <operator pos:start="263:47" pos:end="263:48">&lt;&lt;</operator> <operator pos:start="263:50" pos:end="263:50">(</operator><literal type="number" pos:start="263:51" pos:end="263:54">63</literal> <operator pos:start="263:54" pos:end="263:54">-</operator> <name pos:start="263:56" pos:end="263:70"><name pos:start="263:56" pos:end="263:56">s</name><operator pos:start="263:57" pos:end="263:58">-&gt;</operator><name pos:start="263:59" pos:end="263:70">cluster_bits</name></name><operator pos:start="263:71" pos:end="263:71">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="269:9" pos:end="269:29">/* update L2 table */</comment>

        <expr_stmt pos:start="271:9" pos:end="271:42"><expr pos:start="271:9" pos:end="271:41"><name pos:start="271:9" pos:end="271:11">tmp</name> <operator pos:start="271:13" pos:end="271:13">=</operator> <call pos:start="271:15" pos:end="271:41"><name pos:start="271:15" pos:end="271:25">cpu_to_be64</name><argument_list pos:start="271:26" pos:end="271:41">(<argument pos:start="271:27" pos:end="271:40"><expr pos:start="271:27" pos:end="271:40"><name pos:start="271:27" pos:end="271:40">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:33"><expr pos:start="273:9" pos:end="273:32"><name pos:start="273:9" pos:end="273:26"><name pos:start="273:9" pos:end="273:16">l2_table</name><index pos:start="273:17" pos:end="273:26">[<expr pos:start="273:18" pos:end="273:25"><name pos:start="273:18" pos:end="273:25">l2_index</name></expr>]</index></name> <operator pos:start="273:28" pos:end="273:28">=</operator> <name pos:start="273:30" pos:end="273:32">tmp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="277:50"><expr pos:start="275:9" pos:end="277:49"><name pos:start="275:9" pos:end="275:11">ret</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <call pos:start="275:15" pos:end="277:49"><name pos:start="275:15" pos:end="275:30">bdrv_pwrite_sync</name><argument_list pos:start="275:31" pos:end="277:49">(<argument pos:start="275:32" pos:end="275:39"><expr pos:start="275:32" pos:end="275:39"><name pos:start="275:32" pos:end="275:39"><name pos:start="275:32" pos:end="275:33">bs</name><operator pos:start="275:34" pos:end="275:35">-&gt;</operator><name pos:start="275:36" pos:end="275:39">file</name></name></expr></argument>, <argument pos:start="275:42" pos:end="275:75"><expr pos:start="275:42" pos:end="275:75"><name pos:start="275:42" pos:end="275:50">l2_offset</name> <operator pos:start="275:52" pos:end="275:52">+</operator> <name pos:start="275:54" pos:end="275:61">l2_index</name> <operator pos:start="275:63" pos:end="275:63">*</operator> <sizeof pos:start="275:65" pos:end="275:75">sizeof<argument_list pos:start="275:71" pos:end="275:75">(<argument pos:start="275:72" pos:end="275:74"><expr pos:start="275:72" pos:end="275:74"><name pos:start="275:72" pos:end="275:74">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                               <argument pos:start="277:32" pos:end="277:35"><expr pos:start="277:32" pos:end="277:35"><operator pos:start="277:32" pos:end="277:32">&amp;</operator><name pos:start="277:33" pos:end="277:35">tmp</name></expr></argument>, <argument pos:start="277:38" pos:end="277:48"><expr pos:start="277:38" pos:end="277:48"><sizeof pos:start="277:38" pos:end="277:48">sizeof<argument_list pos:start="277:44" pos:end="277:48">(<argument pos:start="277:45" pos:end="277:47"><expr pos:start="277:45" pos:end="277:47"><name pos:start="277:45" pos:end="277:47">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="279:9" pos:end="283:9"><if pos:start="279:9" pos:end="283:9">if <condition pos:start="279:12" pos:end="279:20">(<expr pos:start="279:13" pos:end="279:19"><name pos:start="279:13" pos:end="279:15">ret</name> <operator pos:start="279:17" pos:end="279:17">&lt;</operator> <literal type="number" pos:start="279:19" pos:end="279:19">0</literal></expr>)</condition> <block pos:start="279:22" pos:end="283:9">{<block_content pos:start="281:13" pos:end="281:23">

            <return pos:start="281:13" pos:end="281:23">return <expr pos:start="281:20" pos:end="281:22"><name pos:start="281:20" pos:end="281:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:29"><expr pos:start="287:5" pos:end="287:28"><operator pos:start="287:5" pos:end="287:5">*</operator><name pos:start="287:6" pos:end="287:11">result</name> <operator pos:start="287:13" pos:end="287:13">=</operator> <name pos:start="287:15" pos:end="287:28">cluster_offset</name></expr>;</expr_stmt>

    <return pos:start="289:5" pos:end="289:13">return <expr pos:start="289:12" pos:end="289:12"><literal type="number" pos:start="289:12" pos:end="289:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
