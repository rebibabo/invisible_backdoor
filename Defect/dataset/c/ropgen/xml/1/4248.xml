<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4248.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">filter_samples</name><parameter_list pos:start="1:26" pos:end="1:71">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:38">AVFilterLink</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">inlink</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:70"><decl pos:start="1:49" pos:end="1:70"><type pos:start="1:49" pos:end="1:70"><name pos:start="1:49" pos:end="1:65">AVFilterBufferRef</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:15">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:19">AVFilterContext</name>  <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:25">ctx</name> <init pos:start="5:27" pos:end="5:39">= <expr pos:start="5:29" pos:end="5:39"><name pos:start="5:29" pos:end="5:39"><name pos:start="5:29" pos:end="5:34">inlink</name><operator pos:start="5:35" pos:end="5:36">-&gt;</operator><name pos:start="5:37" pos:end="5:39">dst</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:16">ASyncContext</name>       <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">s</name> <init pos:start="7:27" pos:end="7:37">= <expr pos:start="7:29" pos:end="7:37"><name pos:start="7:29" pos:end="7:37"><name pos:start="7:29" pos:end="7:31">ctx</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:37">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">AVFilterLink</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:25">outlink</name> <init pos:start="9:27" pos:end="9:43">= <expr pos:start="9:29" pos:end="9:43"><name pos:start="9:29" pos:end="9:43"><name pos:start="9:29" pos:end="9:31">ctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:40">outputs</name><index pos:start="9:41" pos:end="9:43">[<expr pos:start="9:42" pos:end="9:42"><literal type="number" pos:start="9:42" pos:end="9:42">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:84"><decl pos:start="11:5" pos:end="11:83"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">nb_channels</name> <init pos:start="11:21" pos:end="11:83">= <expr pos:start="11:23" pos:end="11:83"><call pos:start="11:23" pos:end="11:83"><name pos:start="11:23" pos:end="11:55">av_get_channel_layout_nb_channels</name><argument_list pos:start="11:56" pos:end="11:83">(<argument pos:start="11:57" pos:end="11:82"><expr pos:start="11:57" pos:end="11:82"><name pos:start="11:57" pos:end="11:82"><name pos:start="11:57" pos:end="11:59">buf</name><operator pos:start="11:60" pos:end="11:61">-&gt;</operator><name pos:start="11:62" pos:end="11:66">audio</name><operator pos:start="11:67" pos:end="11:68">-&gt;</operator><name pos:start="11:69" pos:end="11:82">channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="15:80"><decl pos:start="13:5" pos:end="15:79"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:15">pts</name> <init pos:start="13:17" pos:end="15:79">= <expr pos:start="13:19" pos:end="15:79"><ternary pos:start="13:19" pos:end="15:79"><condition pos:start="13:19" pos:end="13:48"><expr pos:start="13:19" pos:end="13:46"><operator pos:start="13:19" pos:end="13:19">(</operator><name pos:start="13:20" pos:end="13:27"><name pos:start="13:20" pos:end="13:22">buf</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:27">pts</name></name> <operator pos:start="13:29" pos:end="13:30">==</operator> <name pos:start="13:32" pos:end="13:45">AV_NOPTS_VALUE</name><operator pos:start="13:46" pos:end="13:46">)</operator></expr> ?</condition><then pos:start="13:50" pos:end="13:57"> <expr pos:start="13:50" pos:end="13:57"><name pos:start="13:50" pos:end="13:57"><name pos:start="13:50" pos:end="13:52">buf</name><operator pos:start="13:53" pos:end="13:54">-&gt;</operator><name pos:start="13:55" pos:end="13:57">pts</name></name></expr> </then><else pos:start="13:59" pos:end="15:79">:

                  <expr pos:start="15:19" pos:end="15:79"><call pos:start="15:19" pos:end="15:79"><name pos:start="15:19" pos:end="15:30">av_rescale_q</name><argument_list pos:start="15:31" pos:end="15:79">(<argument pos:start="15:32" pos:end="15:39"><expr pos:start="15:32" pos:end="15:39"><name pos:start="15:32" pos:end="15:39"><name pos:start="15:32" pos:end="15:34">buf</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:39">pts</name></name></expr></argument>, <argument pos:start="15:42" pos:end="15:58"><expr pos:start="15:42" pos:end="15:58"><name pos:start="15:42" pos:end="15:58"><name pos:start="15:42" pos:end="15:47">inlink</name><operator pos:start="15:48" pos:end="15:49">-&gt;</operator><name pos:start="15:50" pos:end="15:58">time_base</name></name></expr></argument>, <argument pos:start="15:61" pos:end="15:78"><expr pos:start="15:61" pos:end="15:78"><name pos:start="15:61" pos:end="15:78"><name pos:start="15:61" pos:end="15:67">outlink</name><operator pos:start="15:68" pos:end="15:69">-&gt;</operator><name pos:start="15:70" pos:end="15:78">time_base</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">out_size</name></decl>, <decl pos:start="17:19" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:19" pos:end="17:21">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:17">delta</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:54">/* buffer data until we get the first timestamp */</comment>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:33">(<expr pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:14">pts</name></name> <operator pos:start="25:16" pos:end="25:17">==</operator> <name pos:start="25:19" pos:end="25:32">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="25:35" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:37">

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:34">(<expr pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:15">pts</name> <operator pos:start="27:17" pos:end="27:18">!=</operator> <name pos:start="27:20" pos:end="27:33">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="27:36" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:40">

            <expr_stmt pos:start="29:13" pos:end="29:40"><expr pos:start="29:13" pos:end="29:39"><name pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">pts</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:24">pts</name> <operator pos:start="29:26" pos:end="29:26">-</operator> <call pos:start="29:28" pos:end="29:39"><name pos:start="29:28" pos:end="29:36">get_delay</name><argument_list pos:start="29:37" pos:end="29:39">(<argument pos:start="29:38" pos:end="29:38"><expr pos:start="29:38" pos:end="29:38"><name pos:start="29:38" pos:end="29:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="33:9" pos:end="33:37">return <expr pos:start="33:16" pos:end="33:36"><call pos:start="33:16" pos:end="33:36"><name pos:start="33:16" pos:end="33:28">write_to_fifo</name><argument_list pos:start="33:29" pos:end="33:36">(<argument pos:start="33:30" pos:end="33:30"><expr pos:start="33:30" pos:end="33:30"><name pos:start="33:30" pos:end="33:30">s</name></expr></argument>, <argument pos:start="33:33" pos:end="33:35"><expr pos:start="33:33" pos:end="33:35"><name pos:start="33:33" pos:end="33:35">buf</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:41">/* now wait for the next timestamp */</comment>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:30">(<expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:11">pts</name> <operator pos:start="41:13" pos:end="41:14">==</operator> <name pos:start="41:16" pos:end="41:29">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="41:32" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:37">

        <return pos:start="43:9" pos:end="43:37">return <expr pos:start="43:16" pos:end="43:36"><call pos:start="43:16" pos:end="43:36"><name pos:start="43:16" pos:end="43:28">write_to_fifo</name><argument_list pos:start="43:29" pos:end="43:36">(<argument pos:start="43:30" pos:end="43:30"><expr pos:start="43:30" pos:end="43:30"><name pos:start="43:30" pos:end="43:30">s</name></expr></argument>, <argument pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:35">buf</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="51:70">/* when we have two timestamps, compute how many samples would we have

     * to add/remove to get proper sync between data and timestamps */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:43"><expr pos:start="53:5" pos:end="53:42"><name pos:start="53:5" pos:end="53:9">delta</name>    <operator pos:start="53:14" pos:end="53:14">=</operator> <name pos:start="53:16" pos:end="53:18">pts</name> <operator pos:start="53:20" pos:end="53:20">-</operator> <name pos:start="53:22" pos:end="53:27"><name pos:start="53:22" pos:end="53:22">s</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:27">pts</name></name> <operator pos:start="53:29" pos:end="53:29">-</operator> <call pos:start="53:31" pos:end="53:42"><name pos:start="53:31" pos:end="53:39">get_delay</name><argument_list pos:start="53:40" pos:end="53:42">(<argument pos:start="53:41" pos:end="53:41"><expr pos:start="53:41" pos:end="53:41"><name pos:start="53:41" pos:end="53:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:12">out_size</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <call pos:start="55:16" pos:end="55:43"><name pos:start="55:16" pos:end="55:35">avresample_available</name><argument_list pos:start="55:36" pos:end="55:43">(<argument pos:start="55:37" pos:end="55:42"><expr pos:start="55:37" pos:end="55:42"><name pos:start="55:37" pos:end="55:42"><name pos:start="55:37" pos:end="55:37">s</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:42">avr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="79:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:35">(<expr pos:start="59:9" pos:end="59:34"><call pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:12">labs</name><argument_list pos:start="59:13" pos:end="59:19">(<argument pos:start="59:14" pos:end="59:18"><expr pos:start="59:14" pos:end="59:18"><name pos:start="59:14" pos:end="59:18">delta</name></expr></argument>)</argument_list></call> <operator pos:start="59:21" pos:end="59:21">&gt;</operator> <name pos:start="59:23" pos:end="59:34"><name pos:start="59:23" pos:end="59:23">s</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:34">min_delta</name></name></expr>)</condition> <block pos:start="59:37" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:26">

        <expr_stmt pos:start="61:9" pos:end="61:83"><expr pos:start="61:9" pos:end="61:82"><call pos:start="61:9" pos:end="61:82"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:82">(<argument pos:start="61:16" pos:end="61:18"><expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">ctx</name></expr></argument>, <argument pos:start="61:21" pos:end="61:34"><expr pos:start="61:21" pos:end="61:34"><name pos:start="61:21" pos:end="61:34">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="61:37" pos:end="61:74"><expr pos:start="61:37" pos:end="61:74"><literal type="string" pos:start="61:37" pos:end="61:55">"Discontinuity - %"</literal><name pos:start="61:56" pos:end="61:61">PRId64</name><literal type="string" pos:start="61:62" pos:end="61:74">" samples.\n"</literal></expr></argument>, <argument pos:start="61:77" pos:end="61:81"><expr pos:start="61:77" pos:end="61:81"><name pos:start="61:77" pos:end="61:81">delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:26"><expr pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:16">out_size</name> <operator pos:start="63:18" pos:end="63:19">+=</operator> <name pos:start="63:21" pos:end="63:25">delta</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="79:5">else <block pos:start="65:12" pos:end="79:5">{<block_content pos:start="67:9" pos:end="77:18">

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:24">(<expr pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:23">resample</name></name></expr>)</condition> <block pos:start="67:26" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:76">

            <decl_stmt pos:start="69:13" pos:end="69:65"><decl pos:start="69:13" pos:end="69:64"><type pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">int</name></type> <name pos:start="69:17" pos:end="69:20">comp</name> <init pos:start="69:22" pos:end="69:64">= <expr pos:start="69:24" pos:end="69:64"><call pos:start="69:24" pos:end="69:64"><name pos:start="69:24" pos:end="69:30">av_clip</name><argument_list pos:start="69:31" pos:end="69:64">(<argument pos:start="69:32" pos:end="69:36"><expr pos:start="69:32" pos:end="69:36"><name pos:start="69:32" pos:end="69:36">delta</name></expr></argument>, <argument pos:start="69:39" pos:end="69:50"><expr pos:start="69:39" pos:end="69:50"><operator pos:start="69:39" pos:end="69:39">-</operator><name pos:start="69:40" pos:end="69:50"><name pos:start="69:40" pos:end="69:40">s</name><operator pos:start="69:41" pos:end="69:42">-&gt;</operator><name pos:start="69:43" pos:end="69:50">max_comp</name></name></expr></argument>, <argument pos:start="69:53" pos:end="69:63"><expr pos:start="69:53" pos:end="69:63"><name pos:start="69:53" pos:end="69:63"><name pos:start="69:53" pos:end="69:53">s</name><operator pos:start="69:54" pos:end="69:55">-&gt;</operator><name pos:start="69:56" pos:end="69:63">max_comp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:87"><expr pos:start="71:13" pos:end="71:86"><call pos:start="71:13" pos:end="71:86"><name pos:start="71:13" pos:end="71:18">av_log</name><argument_list pos:start="71:19" pos:end="71:86">(<argument pos:start="71:20" pos:end="71:22"><expr pos:start="71:20" pos:end="71:22"><name pos:start="71:20" pos:end="71:22">ctx</name></expr></argument>, <argument pos:start="71:25" pos:end="71:38"><expr pos:start="71:25" pos:end="71:38"><name pos:start="71:25" pos:end="71:38">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="71:41" pos:end="71:79"><expr pos:start="71:41" pos:end="71:79"><literal type="string" pos:start="71:41" pos:end="71:79">"Compensating %d samples per second.\n"</literal></expr></argument>, <argument pos:start="71:82" pos:end="71:85"><expr pos:start="71:82" pos:end="71:85"><name pos:start="71:82" pos:end="71:85">comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:76"><expr pos:start="73:13" pos:end="73:75"><call pos:start="73:13" pos:end="73:75"><name pos:start="73:13" pos:end="73:39">avresample_set_compensation</name><argument_list pos:start="73:40" pos:end="73:75">(<argument pos:start="73:41" pos:end="73:46"><expr pos:start="73:41" pos:end="73:46"><name pos:start="73:41" pos:end="73:46"><name pos:start="73:41" pos:end="73:41">s</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:46">avr</name></name></expr></argument>, <argument pos:start="73:49" pos:end="73:53"><expr pos:start="73:49" pos:end="73:53"><name pos:start="73:49" pos:end="73:53">delta</name></expr></argument>, <argument pos:start="73:56" pos:end="73:74"><expr pos:start="73:56" pos:end="73:74"><name pos:start="73:56" pos:end="73:74"><name pos:start="73:56" pos:end="73:61">inlink</name><operator pos:start="73:62" pos:end="73:63">-&gt;</operator><name pos:start="73:64" pos:end="73:74">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:18"><expr pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:13">delta</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <literal type="number" pos:start="77:17" pos:end="77:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="83:5" pos:end="127:5"><if pos:start="83:5" pos:end="121:5">if <condition pos:start="83:8" pos:end="83:21">(<expr pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:16">out_size</name> <operator pos:start="83:18" pos:end="83:18">&gt;</operator> <literal type="number" pos:start="83:20" pos:end="83:20">0</literal></expr>)</condition> <block pos:start="83:23" pos:end="121:5">{<block_content pos:start="85:9" pos:end="119:26">

        <decl_stmt pos:start="85:9" pos:end="87:67"><decl pos:start="85:9" pos:end="87:66"><type pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:25">AVFilterBufferRef</name> <modifier pos:start="85:27" pos:end="85:27">*</modifier></type><name pos:start="85:28" pos:end="85:34">buf_out</name> <init pos:start="85:36" pos:end="87:66">= <expr pos:start="85:38" pos:end="87:66"><call pos:start="85:38" pos:end="87:66"><name pos:start="85:38" pos:end="85:56">ff_get_audio_buffer</name><argument_list pos:start="85:57" pos:end="87:66">(<argument pos:start="85:58" pos:end="85:64"><expr pos:start="85:58" pos:end="85:64"><name pos:start="85:58" pos:end="85:64">outlink</name></expr></argument>, <argument pos:start="85:67" pos:end="85:79"><expr pos:start="85:67" pos:end="85:79"><name pos:start="85:67" pos:end="85:79">AV_PERM_WRITE</name></expr></argument>,

                                                         <argument pos:start="87:58" pos:end="87:65"><expr pos:start="87:58" pos:end="87:65"><name pos:start="87:58" pos:end="87:65">out_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:21">(<expr pos:start="89:13" pos:end="89:20"><operator pos:start="89:13" pos:end="89:13">!</operator><name pos:start="89:14" pos:end="89:20">buf_out</name></expr>)</condition> <block pos:start="89:23" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:22">

            <expr_stmt pos:start="91:13" pos:end="91:34"><expr pos:start="91:13" pos:end="91:33"><name pos:start="91:13" pos:end="91:15">ret</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:33"><name pos:start="91:19" pos:end="91:25">AVERROR</name><argument_list pos:start="91:26" pos:end="91:33">(<argument pos:start="91:27" pos:end="91:32"><expr pos:start="91:27" pos:end="91:32"><name pos:start="91:27" pos:end="91:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="93:13" pos:end="93:22">goto <name pos:start="93:18" pos:end="93:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:74"><expr pos:start="99:9" pos:end="99:73"><call pos:start="99:9" pos:end="99:73"><name pos:start="99:9" pos:end="99:23">avresample_read</name><argument_list pos:start="99:24" pos:end="99:73">(<argument pos:start="99:25" pos:end="99:30"><expr pos:start="99:25" pos:end="99:30"><name pos:start="99:25" pos:end="99:30"><name pos:start="99:25" pos:end="99:25">s</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:30">avr</name></name></expr></argument>, <argument pos:start="99:33" pos:end="99:62"><expr pos:start="99:33" pos:end="99:62"><operator pos:start="99:33" pos:end="99:33">(</operator><name pos:start="99:34" pos:end="99:37">void</name><operator pos:start="99:38" pos:end="99:38">*</operator><operator pos:start="99:39" pos:end="99:39">*</operator><operator pos:start="99:40" pos:end="99:40">)</operator><name pos:start="99:41" pos:end="99:62"><name pos:start="99:41" pos:end="99:47">buf_out</name><operator pos:start="99:48" pos:end="99:49">-&gt;</operator><name pos:start="99:50" pos:end="99:62">extended_data</name></name></expr></argument>, <argument pos:start="99:65" pos:end="99:72"><expr pos:start="99:65" pos:end="99:72"><name pos:start="99:65" pos:end="99:72">out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:30"><expr pos:start="101:9" pos:end="101:29"><name pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:15">buf_out</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:20">pts</name></name> <operator pos:start="101:22" pos:end="101:22">=</operator> <name pos:start="101:24" pos:end="101:29"><name pos:start="101:24" pos:end="101:24">s</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:29">pts</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:22">(<expr pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:17">delta</name> <operator pos:start="105:19" pos:end="105:19">&gt;</operator> <literal type="number" pos:start="105:21" pos:end="105:21">0</literal></expr>)</condition> <block pos:start="105:24" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:68">

            <expr_stmt pos:start="107:13" pos:end="109:68"><expr pos:start="107:13" pos:end="109:67"><call pos:start="107:13" pos:end="109:67"><name pos:start="107:13" pos:end="107:34">av_samples_set_silence</name><argument_list pos:start="107:35" pos:end="109:67">(<argument pos:start="107:36" pos:end="107:57"><expr pos:start="107:36" pos:end="107:57"><name pos:start="107:36" pos:end="107:57"><name pos:start="107:36" pos:end="107:42">buf_out</name><operator pos:start="107:43" pos:end="107:44">-&gt;</operator><name pos:start="107:45" pos:end="107:57">extended_data</name></name></expr></argument>, <argument pos:start="107:60" pos:end="107:75"><expr pos:start="107:60" pos:end="107:75"><name pos:start="107:60" pos:end="107:67">out_size</name> <operator pos:start="107:69" pos:end="107:69">-</operator> <name pos:start="107:71" pos:end="107:75">delta</name></expr></argument>,

                                   <argument pos:start="109:36" pos:end="109:40"><expr pos:start="109:36" pos:end="109:40"><name pos:start="109:36" pos:end="109:40">delta</name></expr></argument>, <argument pos:start="109:43" pos:end="109:53"><expr pos:start="109:43" pos:end="109:53"><name pos:start="109:43" pos:end="109:53">nb_channels</name></expr></argument>, <argument pos:start="109:56" pos:end="109:66"><expr pos:start="109:56" pos:end="109:66"><name pos:start="109:56" pos:end="109:66"><name pos:start="109:56" pos:end="109:58">buf</name><operator pos:start="109:59" pos:end="109:60">-&gt;</operator><name pos:start="109:61" pos:end="109:66">format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:50"><expr pos:start="113:9" pos:end="113:49"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:49"><name pos:start="113:15" pos:end="113:31">ff_filter_samples</name><argument_list pos:start="113:32" pos:end="113:49">(<argument pos:start="113:33" pos:end="113:39"><expr pos:start="113:33" pos:end="113:39"><name pos:start="113:33" pos:end="113:39">outlink</name></expr></argument>, <argument pos:start="113:42" pos:end="113:48"><expr pos:start="113:42" pos:end="113:48"><name pos:start="113:42" pos:end="113:48">buf_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="117:22"><if pos:start="115:9" pos:end="117:22">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">&lt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:22"><block_content pos:start="117:13" pos:end="117:22">

            <goto pos:start="117:13" pos:end="117:22">goto <name pos:start="117:18" pos:end="117:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:26"><expr pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:21">got_output</name></name> <operator pos:start="119:23" pos:end="119:23">=</operator> <literal type="number" pos:start="119:25" pos:end="119:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="121:7" pos:end="127:5">else <block pos:start="121:12" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:34">

        <expr_stmt pos:start="123:9" pos:end="125:34"><expr pos:start="123:9" pos:end="125:33"><call pos:start="123:9" pos:end="125:33"><name pos:start="123:9" pos:end="123:14">av_log</name><argument_list pos:start="123:15" pos:end="125:33">(<argument pos:start="123:16" pos:end="123:18"><expr pos:start="123:16" pos:end="123:18"><name pos:start="123:16" pos:end="123:18">ctx</name></expr></argument>, <argument pos:start="123:21" pos:end="123:34"><expr pos:start="123:21" pos:end="123:34"><name pos:start="123:21" pos:end="123:34">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="123:37" pos:end="125:32"><expr pos:start="123:37" pos:end="125:32"><literal type="string" pos:start="123:37" pos:end="123:74">"Non-monotonous timestamps, dropping "</literal>

               <literal type="string" pos:start="125:16" pos:end="125:32">"whole buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:43">/* drain any remaining buffered data */</comment>

    <expr_stmt pos:start="133:5" pos:end="133:64"><expr pos:start="133:5" pos:end="133:63"><call pos:start="133:5" pos:end="133:63"><name pos:start="133:5" pos:end="133:19">avresample_read</name><argument_list pos:start="133:20" pos:end="133:63">(<argument pos:start="133:21" pos:end="133:26"><expr pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:21">s</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:26">avr</name></name></expr></argument>, <argument pos:start="133:29" pos:end="133:32"><expr pos:start="133:29" pos:end="133:32"><name pos:start="133:29" pos:end="133:32">NULL</name></expr></argument>, <argument pos:start="133:35" pos:end="133:62"><expr pos:start="133:35" pos:end="133:62"><call pos:start="133:35" pos:end="133:62"><name pos:start="133:35" pos:end="133:54">avresample_available</name><argument_list pos:start="133:55" pos:end="133:62">(<argument pos:start="133:56" pos:end="133:61"><expr pos:start="133:56" pos:end="133:61"><name pos:start="133:56" pos:end="133:61"><name pos:start="133:56" pos:end="133:56">s</name><operator pos:start="133:57" pos:end="133:58">-&gt;</operator><name pos:start="133:59" pos:end="133:61">avr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:48"><expr pos:start="137:5" pos:end="137:47"><name pos:start="137:5" pos:end="137:10"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:10">pts</name></name> <operator pos:start="137:12" pos:end="137:12">=</operator> <name pos:start="137:14" pos:end="137:16">pts</name> <operator pos:start="137:18" pos:end="137:18">-</operator> <call pos:start="137:20" pos:end="137:47"><name pos:start="137:20" pos:end="137:39">avresample_get_delay</name><argument_list pos:start="137:40" pos:end="137:47">(<argument pos:start="137:41" pos:end="137:46"><expr pos:start="137:41" pos:end="137:46"><name pos:start="137:41" pos:end="137:46"><name pos:start="137:41" pos:end="137:41">s</name><operator pos:start="137:42" pos:end="137:43">-&gt;</operator><name pos:start="137:44" pos:end="137:46">avr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="141:71"><expr pos:start="139:5" pos:end="141:70"><name pos:start="139:5" pos:end="139:7">ret</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <call pos:start="139:11" pos:end="141:70"><name pos:start="139:11" pos:end="139:28">avresample_convert</name><argument_list pos:start="139:29" pos:end="141:70">(<argument pos:start="139:30" pos:end="139:35"><expr pos:start="139:30" pos:end="139:35"><name pos:start="139:30" pos:end="139:35"><name pos:start="139:30" pos:end="139:30">s</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:35">avr</name></name></expr></argument>, <argument pos:start="139:38" pos:end="139:41"><expr pos:start="139:38" pos:end="139:41"><name pos:start="139:38" pos:end="139:41">NULL</name></expr></argument>, <argument pos:start="139:44" pos:end="139:44"><expr pos:start="139:44" pos:end="139:44"><literal type="number" pos:start="139:44" pos:end="139:44">0</literal></expr></argument>, <argument pos:start="139:47" pos:end="139:47"><expr pos:start="139:47" pos:end="139:47"><literal type="number" pos:start="139:47" pos:end="139:47">0</literal></expr></argument>, <argument pos:start="139:50" pos:end="139:75"><expr pos:start="139:50" pos:end="139:75"><operator pos:start="139:50" pos:end="139:50">(</operator><name pos:start="139:51" pos:end="139:54">void</name><operator pos:start="139:55" pos:end="139:55">*</operator><operator pos:start="139:56" pos:end="139:56">*</operator><operator pos:start="139:57" pos:end="139:57">)</operator><name pos:start="139:58" pos:end="139:75"><name pos:start="139:58" pos:end="139:60">buf</name><operator pos:start="139:61" pos:end="139:62">-&gt;</operator><name pos:start="139:63" pos:end="139:75">extended_data</name></name></expr></argument>,

                             <argument pos:start="141:30" pos:end="141:45"><expr pos:start="141:30" pos:end="141:45"><name pos:start="141:30" pos:end="141:45"><name pos:start="141:30" pos:end="141:32">buf</name><operator pos:start="141:33" pos:end="141:34">-&gt;</operator><name pos:start="141:35" pos:end="141:42">linesize</name><index pos:start="141:43" pos:end="141:45">[<expr pos:start="141:44" pos:end="141:44"><literal type="number" pos:start="141:44" pos:end="141:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="141:48" pos:end="141:69"><expr pos:start="141:48" pos:end="141:69"><name pos:start="141:48" pos:end="141:69"><name pos:start="141:48" pos:end="141:50">buf</name><operator pos:start="141:51" pos:end="141:52">-&gt;</operator><name pos:start="141:53" pos:end="141:57">audio</name><operator pos:start="141:58" pos:end="141:59">-&gt;</operator><name pos:start="141:60" pos:end="141:69">nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="145:1" pos:end="145:5"><name pos:start="145:1" pos:end="145:4">fail</name>:</label>

    <expr_stmt pos:start="147:5" pos:end="147:31"><expr pos:start="147:5" pos:end="147:30"><call pos:start="147:5" pos:end="147:30"><name pos:start="147:5" pos:end="147:25">avfilter_unref_buffer</name><argument_list pos:start="147:26" pos:end="147:30">(<argument pos:start="147:27" pos:end="147:29"><expr pos:start="147:27" pos:end="147:29"><name pos:start="147:27" pos:end="147:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="151:5" pos:end="151:15">return <expr pos:start="151:12" pos:end="151:14"><name pos:start="151:12" pos:end="151:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
