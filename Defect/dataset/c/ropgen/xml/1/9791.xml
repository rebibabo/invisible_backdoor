<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9791.c" pos:tabs="8"><function pos:start="1:1" pos:end="96:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:11">int</name></type> <name pos:start="1:13" pos:end="1:25">avcodec_close</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:40">AVCodecContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="96:1">{<block_content pos:start="7:5" pos:end="94:13">

    <comment type="block" pos:start="5:5" pos:end="5:69">/* If there is a user-supplied mutex locking routine, call it. */</comment>

    <if_stmt pos:start="7:5" pos:end="13:5"><if pos:start="7:5" pos:end="13:5">if <condition pos:start="7:8" pos:end="7:22">(<expr pos:start="7:9" pos:end="7:21"><name pos:start="7:9" pos:end="7:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="7:24" pos:end="13:5">{<block_content pos:start="9:9" pos:end="11:22">

        <if_stmt pos:start="9:9" pos:end="11:22"><if pos:start="9:9" pos:end="11:22">if <condition pos:start="9:12" pos:end="9:59">(<expr pos:start="9:13" pos:end="9:58"><call pos:start="9:13" pos:end="9:58">(<modifier pos:start="9:14" pos:end="9:14">*</modifier><name pos:start="9:15" pos:end="9:27">ff_lockmgr_cb</name>)<argument_list pos:start="9:29" pos:end="9:58">(<argument pos:start="9:30" pos:end="9:41"><expr pos:start="9:30" pos:end="9:41"><operator pos:start="9:30" pos:end="9:30">&amp;</operator><name pos:start="9:31" pos:end="9:41">codec_mutex</name></expr></argument>, <argument pos:start="9:44" pos:end="9:57"><expr pos:start="9:44" pos:end="9:57"><name pos:start="9:44" pos:end="9:57">AV_LOCK_OBTAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="11:13" pos:end="11:22"><block_content pos:start="11:13" pos:end="11:22">

            <return pos:start="11:13" pos:end="11:22">return <expr pos:start="11:20" pos:end="11:21"><operator pos:start="11:20" pos:end="11:20">-</operator><literal type="number" pos:start="11:21" pos:end="11:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:28">entangled_thread_counter</name><operator pos:start="17:29" pos:end="17:30">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:38">(<expr pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:32">entangled_thread_counter</name> <operator pos:start="19:34" pos:end="19:35">!=</operator> <literal type="number" pos:start="19:37" pos:end="19:37">1</literal></expr>)</condition> <block pos:start="19:40" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:18">

        <expr_stmt pos:start="21:9" pos:end="21:97"><expr pos:start="21:9" pos:end="21:96"><call pos:start="21:9" pos:end="21:96"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:96">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:37" pos:end="21:95"><expr pos:start="21:37" pos:end="21:95"><literal type="string" pos:start="21:37" pos:end="21:95">"insufficient thread locking around avcodec_open/close()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:35"><expr pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:32">entangled_thread_counter</name><operator pos:start="23:33" pos:end="23:34">--</operator></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="62:5"><if pos:start="31:5" pos:end="62:5">if <condition pos:start="31:8" pos:end="31:31">(<expr pos:start="31:9" pos:end="31:30"><call pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:23">avcodec_is_open</name><argument_list pos:start="31:24" pos:end="31:30">(<argument pos:start="31:25" pos:end="31:29"><expr pos:start="31:25" pos:end="31:29"><name pos:start="31:25" pos:end="31:29">avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:33" pos:end="62:5">{<block_content pos:start="33:9" pos:end="59:35">

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:93">(<expr pos:start="33:13" pos:end="33:92"><name pos:start="33:13" pos:end="33:24">HAVE_THREADS</name> <operator pos:start="33:26" pos:end="33:27">&amp;&amp;</operator> <name pos:start="33:29" pos:end="33:65"><name pos:start="33:29" pos:end="33:33">avctx</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:43">internal</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:65">frame_thread_encoder</name></name> <operator pos:start="33:67" pos:end="33:68">&amp;&amp;</operator> <name pos:start="33:70" pos:end="33:88"><name pos:start="33:70" pos:end="33:74">avctx</name><operator pos:start="33:75" pos:end="33:76">-&gt;</operator><name pos:start="33:77" pos:end="33:88">thread_count</name></name> <operator pos:start="33:90" pos:end="33:90">&gt;</operator> <literal type="number" pos:start="33:92" pos:end="33:92">1</literal></expr>)</condition> <block pos:start="33:95" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:40">

            <expr_stmt pos:start="35:13" pos:end="35:40"><expr pos:start="35:13" pos:end="35:39"><name pos:start="35:13" pos:end="35:36">entangled_thread_counter</name> <operator pos:start="35:38" pos:end="35:39">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:48"><expr pos:start="37:13" pos:end="37:47"><call pos:start="37:13" pos:end="37:47"><name pos:start="37:13" pos:end="37:40">ff_frame_thread_encoder_free</name><argument_list pos:start="37:41" pos:end="37:47">(<argument pos:start="37:42" pos:end="37:46"><expr pos:start="37:42" pos:end="37:46"><name pos:start="37:42" pos:end="37:46">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:40"><expr pos:start="39:13" pos:end="39:39"><name pos:start="39:13" pos:end="39:36">entangled_thread_counter</name> <operator pos:start="39:38" pos:end="39:39">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="45:34"><if pos:start="43:9" pos:end="45:34">if <condition pos:start="43:12" pos:end="43:49">(<expr pos:start="43:13" pos:end="43:48"><name pos:start="43:13" pos:end="43:24">HAVE_THREADS</name> <operator pos:start="43:26" pos:end="43:27">&amp;&amp;</operator> <name pos:start="43:29" pos:end="43:48"><name pos:start="43:29" pos:end="43:33">avctx</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:48">thread_opaque</name></name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:34"><block_content pos:start="45:13" pos:end="45:34">

            <expr_stmt pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:33"><call pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:26">ff_thread_free</name><argument_list pos:start="45:27" pos:end="45:33">(<argument pos:start="45:28" pos:end="45:32"><expr pos:start="45:28" pos:end="45:32"><name pos:start="45:28" pos:end="45:32">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="49:39"><if pos:start="47:9" pos:end="49:39">if <condition pos:start="47:12" pos:end="47:48">(<expr pos:start="47:13" pos:end="47:47"><name pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:17">avctx</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:24">codec</name></name> <operator pos:start="47:26" pos:end="47:27">&amp;&amp;</operator> <name pos:start="47:29" pos:end="47:47"><name pos:start="47:29" pos:end="47:33">avctx</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:40">codec</name><operator pos:start="47:41" pos:end="47:42">-&gt;</operator><name pos:start="47:43" pos:end="47:47">close</name></name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:39"><block_content pos:start="49:13" pos:end="49:39">

            <expr_stmt pos:start="49:13" pos:end="49:39"><expr pos:start="49:13" pos:end="49:38"><call pos:start="49:13" pos:end="49:38"><name pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:17">avctx</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:24">codec</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:31">close</name></name><argument_list pos:start="49:32" pos:end="49:38">(<argument pos:start="49:33" pos:end="49:37"><expr pos:start="49:33" pos:end="49:37"><name pos:start="49:33" pos:end="49:37">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:44"><expr pos:start="51:9" pos:end="51:43"><call pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:36">avcodec_default_free_buffers</name><argument_list pos:start="51:37" pos:end="51:43">(<argument pos:start="51:38" pos:end="51:42"><expr pos:start="51:38" pos:end="51:42"><name pos:start="51:38" pos:end="51:42">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:13">avctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:26">coded_frame</name></name> <operator pos:start="53:28" pos:end="53:28">=</operator> <name pos:start="53:30" pos:end="53:33">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:46"><expr pos:start="55:9" pos:end="55:45"><name pos:start="55:9" pos:end="55:41"><name pos:start="55:9" pos:end="55:13">avctx</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:23">internal</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:41">byte_buffer_size</name></name> <operator pos:start="55:43" pos:end="55:43">=</operator> <literal type="number" pos:start="55:45" pos:end="55:45">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:48"><expr pos:start="57:9" pos:end="57:47"><call pos:start="57:9" pos:end="57:47"><name pos:start="57:9" pos:end="57:16">av_freep</name><argument_list pos:start="57:17" pos:end="57:47">(<argument pos:start="57:18" pos:end="57:46"><expr pos:start="57:18" pos:end="57:46"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:46"><name pos:start="57:19" pos:end="57:23">avctx</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:33">internal</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:46">byte_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:35"><expr pos:start="59:9" pos:end="59:34"><call pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:16">av_freep</name><argument_list pos:start="59:17" pos:end="59:34">(<argument pos:start="59:18" pos:end="59:33"><expr pos:start="59:18" pos:end="59:33"><operator pos:start="59:18" pos:end="59:18">&amp;</operator><name pos:start="59:19" pos:end="59:33"><name pos:start="59:19" pos:end="59:23">avctx</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:33">internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="66:5" pos:end="68:38"><if pos:start="66:5" pos:end="68:38">if <condition pos:start="66:8" pos:end="66:69">(<expr pos:start="66:9" pos:end="66:68"><name pos:start="66:9" pos:end="66:24"><name pos:start="66:9" pos:end="66:13">avctx</name><operator pos:start="66:14" pos:end="66:15">-&gt;</operator><name pos:start="66:16" pos:end="66:24">priv_data</name></name> <operator pos:start="66:26" pos:end="66:27">&amp;&amp;</operator> <name pos:start="66:29" pos:end="66:40"><name pos:start="66:29" pos:end="66:33">avctx</name><operator pos:start="66:34" pos:end="66:35">-&gt;</operator><name pos:start="66:36" pos:end="66:40">codec</name></name> <operator pos:start="66:42" pos:end="66:43">&amp;&amp;</operator> <name pos:start="66:45" pos:end="66:68"><name pos:start="66:45" pos:end="66:49">avctx</name><operator pos:start="66:50" pos:end="66:51">-&gt;</operator><name pos:start="66:52" pos:end="66:56">codec</name><operator pos:start="66:57" pos:end="66:58">-&gt;</operator><name pos:start="66:59" pos:end="66:68">priv_class</name></name></expr>)</condition><block type="pseudo" pos:start="68:9" pos:end="68:38"><block_content pos:start="68:9" pos:end="68:38">

        <expr_stmt pos:start="68:9" pos:end="68:38"><expr pos:start="68:9" pos:end="68:37"><call pos:start="68:9" pos:end="68:37"><name pos:start="68:9" pos:end="68:19">av_opt_free</name><argument_list pos:start="68:20" pos:end="68:37">(<argument pos:start="68:21" pos:end="68:36"><expr pos:start="68:21" pos:end="68:36"><name pos:start="68:21" pos:end="68:36"><name pos:start="68:21" pos:end="68:25">avctx</name><operator pos:start="68:26" pos:end="68:27">-&gt;</operator><name pos:start="68:28" pos:end="68:36">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="70:5" pos:end="70:23"><expr pos:start="70:5" pos:end="70:22"><call pos:start="70:5" pos:end="70:22"><name pos:start="70:5" pos:end="70:15">av_opt_free</name><argument_list pos:start="70:16" pos:end="70:22">(<argument pos:start="70:17" pos:end="70:21"><expr pos:start="70:17" pos:end="70:21"><name pos:start="70:17" pos:end="70:21">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="72:5" pos:end="72:32"><expr pos:start="72:5" pos:end="72:31"><call pos:start="72:5" pos:end="72:31"><name pos:start="72:5" pos:end="72:12">av_freep</name><argument_list pos:start="72:13" pos:end="72:31">(<argument pos:start="72:14" pos:end="72:30"><expr pos:start="72:14" pos:end="72:30"><operator pos:start="72:14" pos:end="72:14">&amp;</operator><name pos:start="72:15" pos:end="72:30"><name pos:start="72:15" pos:end="72:19">avctx</name><operator pos:start="72:20" pos:end="72:21">-&gt;</operator><name pos:start="72:22" pos:end="72:30">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="74:5" pos:end="76:36"><if pos:start="74:5" pos:end="76:36">if <condition pos:start="74:8" pos:end="74:42">(<expr pos:start="74:9" pos:end="74:41"><call pos:start="74:9" pos:end="74:41"><name pos:start="74:9" pos:end="74:27">av_codec_is_encoder</name><argument_list pos:start="74:28" pos:end="74:41">(<argument pos:start="74:29" pos:end="74:40"><expr pos:start="74:29" pos:end="74:40"><name pos:start="74:29" pos:end="74:40"><name pos:start="74:29" pos:end="74:33">avctx</name><operator pos:start="74:34" pos:end="74:35">-&gt;</operator><name pos:start="74:36" pos:end="74:40">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="76:9" pos:end="76:36"><block_content pos:start="76:9" pos:end="76:36">

        <expr_stmt pos:start="76:9" pos:end="76:36"><expr pos:start="76:9" pos:end="76:35"><call pos:start="76:9" pos:end="76:35"><name pos:start="76:9" pos:end="76:16">av_freep</name><argument_list pos:start="76:17" pos:end="76:35">(<argument pos:start="76:18" pos:end="76:34"><expr pos:start="76:18" pos:end="76:34"><operator pos:start="76:18" pos:end="76:18">&amp;</operator><name pos:start="76:19" pos:end="76:34"><name pos:start="76:19" pos:end="76:23">avctx</name><operator pos:start="76:24" pos:end="76:25">-&gt;</operator><name pos:start="76:26" pos:end="76:34">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="78:5" pos:end="78:24"><expr pos:start="78:5" pos:end="78:23"><name pos:start="78:5" pos:end="78:16"><name pos:start="78:5" pos:end="78:9">avctx</name><operator pos:start="78:10" pos:end="78:11">-&gt;</operator><name pos:start="78:12" pos:end="78:16">codec</name></name> <operator pos:start="78:18" pos:end="78:18">=</operator> <name pos:start="78:20" pos:end="78:23">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="80:5" pos:end="80:34"><expr pos:start="80:5" pos:end="80:33"><name pos:start="80:5" pos:end="80:29"><name pos:start="80:5" pos:end="80:9">avctx</name><operator pos:start="80:10" pos:end="80:11">-&gt;</operator><name pos:start="80:12" pos:end="80:29">active_thread_type</name></name> <operator pos:start="80:31" pos:end="80:31">=</operator> <literal type="number" pos:start="80:33" pos:end="80:33">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="82:5" pos:end="82:31"><expr pos:start="82:5" pos:end="82:30"><name pos:start="82:5" pos:end="82:28">entangled_thread_counter</name><operator pos:start="82:29" pos:end="82:30">--</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="86:5" pos:end="86:42">/* Release any user-supplied mutex. */</comment>

    <if_stmt pos:start="88:5" pos:end="92:5"><if pos:start="88:5" pos:end="92:5">if <condition pos:start="88:8" pos:end="88:22">(<expr pos:start="88:9" pos:end="88:21"><name pos:start="88:9" pos:end="88:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="88:24" pos:end="92:5">{<block_content pos:start="90:9" pos:end="90:56">

        <expr_stmt pos:start="90:9" pos:end="90:56"><expr pos:start="90:9" pos:end="90:55"><call pos:start="90:9" pos:end="90:55">(<modifier pos:start="90:10" pos:end="90:10">*</modifier><name pos:start="90:11" pos:end="90:23">ff_lockmgr_cb</name>)<argument_list pos:start="90:25" pos:end="90:55">(<argument pos:start="90:26" pos:end="90:37"><expr pos:start="90:26" pos:end="90:37"><operator pos:start="90:26" pos:end="90:26">&amp;</operator><name pos:start="90:27" pos:end="90:37">codec_mutex</name></expr></argument>, <argument pos:start="90:40" pos:end="90:54"><expr pos:start="90:40" pos:end="90:54"><name pos:start="90:40" pos:end="90:54">AV_LOCK_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="94:5" pos:end="94:13">return <expr pos:start="94:12" pos:end="94:12"><literal type="number" pos:start="94:12" pos:end="94:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
