<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21565.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">xen_set_memory</name><parameter_list pos:start="1:27" pos:end="5:36">(<parameter pos:start="1:28" pos:end="1:58"><decl pos:start="1:28" pos:end="1:58"><type pos:start="1:28" pos:end="1:58"><name pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:33">struct</name> <name pos:start="1:35" pos:end="1:48">MemoryListener</name></name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:58">listener</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:55"><decl pos:start="3:28" pos:end="3:55"><type pos:start="3:28" pos:end="3:55"><name pos:start="3:28" pos:end="3:46">MemoryRegionSection</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:55">section</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:35"><decl pos:start="5:28" pos:end="5:35"><type pos:start="5:28" pos:end="5:35"><name pos:start="5:28" pos:end="5:31">bool</name></type> <name pos:start="5:33" pos:end="5:35">add</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="85:1">{<block_content pos:start="9:5" pos:end="83:5">

    <decl_stmt pos:start="9:5" pos:end="9:76"><decl pos:start="9:5" pos:end="9:75"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">XenIOState</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:21">state</name> <init pos:start="9:23" pos:end="9:75">= <expr pos:start="9:25" pos:end="9:75"><call pos:start="9:25" pos:end="9:75"><name pos:start="9:25" pos:end="9:36">container_of</name><argument_list pos:start="9:37" pos:end="9:75">(<argument pos:start="9:38" pos:end="9:45"><expr pos:start="9:38" pos:end="9:45"><name pos:start="9:38" pos:end="9:45">listener</name></expr></argument>, <argument pos:start="9:48" pos:end="9:57"><expr pos:start="9:48" pos:end="9:57"><name pos:start="9:48" pos:end="9:57">XenIOState</name></expr></argument>, <argument pos:start="9:60" pos:end="9:74"><expr pos:start="9:60" pos:end="9:74"><name pos:start="9:60" pos:end="9:74">memory_listener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:61"><decl pos:start="11:5" pos:end="11:60"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:21">start_addr</name> <init pos:start="11:23" pos:end="11:60">= <expr pos:start="11:25" pos:end="11:60"><name pos:start="11:25" pos:end="11:60"><name pos:start="11:25" pos:end="11:31">section</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:60">offset_within_address_space</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ram_addr_t</name></type> <name pos:start="13:16" pos:end="13:19">size</name> <init pos:start="13:21" pos:end="13:49">= <expr pos:start="13:23" pos:end="13:49"><call pos:start="13:23" pos:end="13:49"><name pos:start="13:23" pos:end="13:34">int128_get64</name><argument_list pos:start="13:35" pos:end="13:49">(<argument pos:start="13:36" pos:end="13:48"><expr pos:start="13:36" pos:end="13:48"><name pos:start="13:36" pos:end="13:48"><name pos:start="13:36" pos:end="13:42">section</name><operator pos:start="13:43" pos:end="13:44">-&gt;</operator><name pos:start="13:45" pos:end="13:48">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:59"><decl pos:start="15:5" pos:end="15:58"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:18">log_dirty</name> <init pos:start="15:20" pos:end="15:58">= <expr pos:start="15:22" pos:end="15:58"><call pos:start="15:22" pos:end="15:58"><name pos:start="15:22" pos:end="15:45">memory_region_is_logging</name><argument_list pos:start="15:46" pos:end="15:58">(<argument pos:start="15:47" pos:end="15:57"><expr pos:start="15:47" pos:end="15:57"><name pos:start="15:47" pos:end="15:57"><name pos:start="15:47" pos:end="15:53">section</name><operator pos:start="15:54" pos:end="15:55">-&gt;</operator><name pos:start="15:56" pos:end="15:57">mr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17">hvmmem_type_t</name></type> <name pos:start="17:19" pos:end="17:26">mem_type</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:43">(<expr pos:start="21:9" pos:end="21:42"><operator pos:start="21:9" pos:end="21:9">!</operator><call pos:start="21:10" pos:end="21:42"><name pos:start="21:10" pos:end="21:29">memory_region_is_ram</name><argument_list pos:start="21:30" pos:end="21:42">(<argument pos:start="21:31" pos:end="21:41"><expr pos:start="21:31" pos:end="21:41"><name pos:start="21:31" pos:end="21:41"><name pos:start="21:31" pos:end="21:37">section</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:41">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:45" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="31:60">(<expr pos:start="29:9" pos:end="31:59"><operator pos:start="29:9" pos:end="29:9">!</operator><operator pos:start="29:10" pos:end="29:10">(</operator><name pos:start="29:11" pos:end="29:21"><name pos:start="29:11" pos:end="29:17">section</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:21">mr</name></name> <operator pos:start="29:23" pos:end="29:24">!=</operator> <operator pos:start="29:26" pos:end="29:26">&amp;</operator><name pos:start="29:27" pos:end="29:36">ram_memory</name>

          <operator pos:start="31:11" pos:end="31:12">&amp;&amp;</operator> <operator pos:start="31:14" pos:end="31:14">(</operator> <operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:25">log_dirty</name> <operator pos:start="31:27" pos:end="31:28">&amp;&amp;</operator> <name pos:start="31:30" pos:end="31:32">add</name><operator pos:start="31:33" pos:end="31:33">)</operator> <operator pos:start="31:35" pos:end="31:36">||</operator> <operator pos:start="31:38" pos:end="31:38">(</operator><operator pos:start="31:39" pos:end="31:39">!</operator><name pos:start="31:40" pos:end="31:48">log_dirty</name> <operator pos:start="31:50" pos:end="31:51">&amp;&amp;</operator> <operator pos:start="31:53" pos:end="31:53">!</operator><name pos:start="31:54" pos:end="31:56">add</name><operator pos:start="31:57" pos:end="31:57">)</operator><operator pos:start="31:58" pos:end="31:58">)</operator><operator pos:start="31:59" pos:end="31:59">)</operator></expr>)</condition> <block pos:start="31:62" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:15">

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:61"><expr pos:start="39:5" pos:end="39:60"><call pos:start="39:5" pos:end="39:60"><name pos:start="39:5" pos:end="39:31">trace_xen_client_set_memory</name><argument_list pos:start="39:32" pos:end="39:60">(<argument pos:start="39:33" pos:end="39:42"><expr pos:start="39:33" pos:end="39:42"><name pos:start="39:33" pos:end="39:42">start_addr</name></expr></argument>, <argument pos:start="39:45" pos:end="39:48"><expr pos:start="39:45" pos:end="39:48"><name pos:start="39:45" pos:end="39:48">size</name></expr></argument>, <argument pos:start="39:51" pos:end="39:59"><expr pos:start="39:51" pos:end="39:59"><name pos:start="39:51" pos:end="39:59">log_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:35"><expr pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:14">start_addr</name> <operator pos:start="43:16" pos:end="43:17">&amp;=</operator> <name pos:start="43:19" pos:end="43:34">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:35"><expr pos:start="45:5" pos:end="45:34"><name pos:start="45:5" pos:end="45:8">size</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:34"><name pos:start="45:12" pos:end="45:28">TARGET_PAGE_ALIGN</name><argument_list pos:start="45:29" pos:end="45:34">(<argument pos:start="45:30" pos:end="45:33"><expr pos:start="45:30" pos:end="45:33"><name pos:start="45:30" pos:end="45:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="83:5"><if pos:start="49:5" pos:end="75:5">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">add</name></expr>)</condition> <block pos:start="49:14" pos:end="75:5">{<block_content pos:start="51:9" pos:end="73:9">

        <if_stmt pos:start="51:9" pos:end="73:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:47">(<expr pos:start="51:13" pos:end="51:46"><operator pos:start="51:13" pos:end="51:13">!</operator><call pos:start="51:14" pos:end="51:46"><name pos:start="51:14" pos:end="51:33">memory_region_is_rom</name><argument_list pos:start="51:34" pos:end="51:46">(<argument pos:start="51:35" pos:end="51:45"><expr pos:start="51:35" pos:end="51:45"><name pos:start="51:35" pos:end="51:45"><name pos:start="51:35" pos:end="51:41">section</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:45">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:49" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:75">

            <expr_stmt pos:start="53:13" pos:end="55:75"><expr pos:start="53:13" pos:end="55:74"><call pos:start="53:13" pos:end="55:74"><name pos:start="53:13" pos:end="53:30">xen_add_to_physmap</name><argument_list pos:start="53:31" pos:end="55:74">(<argument pos:start="53:32" pos:end="53:36"><expr pos:start="53:32" pos:end="53:36"><name pos:start="53:32" pos:end="53:36">state</name></expr></argument>, <argument pos:start="53:39" pos:end="53:48"><expr pos:start="53:39" pos:end="53:48"><name pos:start="53:39" pos:end="53:48">start_addr</name></expr></argument>, <argument pos:start="53:51" pos:end="53:54"><expr pos:start="53:51" pos:end="53:54"><name pos:start="53:51" pos:end="53:54">size</name></expr></argument>,

                               <argument pos:start="55:32" pos:end="55:42"><expr pos:start="55:32" pos:end="55:42"><name pos:start="55:32" pos:end="55:42"><name pos:start="55:32" pos:end="55:38">section</name><operator pos:start="55:39" pos:end="55:40">-&gt;</operator><name pos:start="55:41" pos:end="55:42">mr</name></name></expr></argument>, <argument pos:start="55:45" pos:end="55:73"><expr pos:start="55:45" pos:end="55:73"><name pos:start="55:45" pos:end="55:73"><name pos:start="55:45" pos:end="55:51">section</name><operator pos:start="55:52" pos:end="55:53">-&gt;</operator><name pos:start="55:54" pos:end="55:73">offset_within_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="73:9">else <block pos:start="57:16" pos:end="73:9">{<block_content pos:start="59:13" pos:end="71:13">

            <expr_stmt pos:start="59:13" pos:end="59:37"><expr pos:start="59:13" pos:end="59:36"><name pos:start="59:13" pos:end="59:20">mem_type</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <name pos:start="59:24" pos:end="59:36">HVMMEM_ram_ro</name></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="71:13"><if pos:start="61:13" pos:end="71:13">if <condition pos:start="61:16" pos:end="65:62">(<expr pos:start="61:17" pos:end="65:61"><call pos:start="61:17" pos:end="65:61"><name pos:start="61:17" pos:end="61:35">xc_hvm_set_mem_type</name><argument_list pos:start="61:36" pos:end="65:61">(<argument pos:start="61:37" pos:end="61:42"><expr pos:start="61:37" pos:end="61:42"><name pos:start="61:37" pos:end="61:42">xen_xc</name></expr></argument>, <argument pos:start="61:45" pos:end="61:53"><expr pos:start="61:45" pos:end="61:53"><name pos:start="61:45" pos:end="61:53">xen_domid</name></expr></argument>, <argument pos:start="61:56" pos:end="61:63"><expr pos:start="61:56" pos:end="61:63"><name pos:start="61:56" pos:end="61:63">mem_type</name></expr></argument>,

                                    <argument pos:start="63:37" pos:end="63:66"><expr pos:start="63:37" pos:end="63:66"><name pos:start="63:37" pos:end="63:46">start_addr</name> <operator pos:start="63:48" pos:end="63:49">&gt;&gt;</operator> <name pos:start="63:51" pos:end="63:66">TARGET_PAGE_BITS</name></expr></argument>,

                                    <argument pos:start="65:37" pos:end="65:60"><expr pos:start="65:37" pos:end="65:60"><name pos:start="65:37" pos:end="65:40">size</name> <operator pos:start="65:42" pos:end="65:43">&gt;&gt;</operator> <name pos:start="65:45" pos:end="65:60">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:64" pos:end="71:13">{<block_content pos:start="67:17" pos:end="69:36">

                <expr_stmt pos:start="67:17" pos:end="69:36"><expr pos:start="67:17" pos:end="69:35"><call pos:start="67:17" pos:end="69:35"><name pos:start="67:17" pos:end="67:23">DPRINTF</name><argument_list pos:start="67:24" pos:end="69:35">(<argument pos:start="67:25" pos:end="67:77"><expr pos:start="67:25" pos:end="67:77"><literal type="string" pos:start="67:25" pos:end="67:59">"xc_hvm_set_mem_type error, addr: "</literal><name pos:start="67:60" pos:end="67:73">TARGET_FMT_plx</name><literal type="string" pos:start="67:74" pos:end="67:77">"\n"</literal></expr></argument>,

                        <argument pos:start="69:25" pos:end="69:34"><expr pos:start="69:25" pos:end="69:34"><name pos:start="69:25" pos:end="69:34">start_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="83:5">else <block pos:start="75:12" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:9">

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:65">(<expr pos:start="77:13" pos:end="77:64"><call pos:start="77:13" pos:end="77:60"><name pos:start="77:13" pos:end="77:35">xen_remove_from_physmap</name><argument_list pos:start="77:36" pos:end="77:60">(<argument pos:start="77:37" pos:end="77:41"><expr pos:start="77:37" pos:end="77:41"><name pos:start="77:37" pos:end="77:41">state</name></expr></argument>, <argument pos:start="77:44" pos:end="77:53"><expr pos:start="77:44" pos:end="77:53"><name pos:start="77:44" pos:end="77:53">start_addr</name></expr></argument>, <argument pos:start="77:56" pos:end="77:59"><expr pos:start="77:56" pos:end="77:59"><name pos:start="77:56" pos:end="77:59">size</name></expr></argument>)</argument_list></call> <operator pos:start="77:62" pos:end="77:62">&lt;</operator> <literal type="number" pos:start="77:64" pos:end="77:64">0</literal></expr>)</condition> <block pos:start="77:67" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:84">

            <expr_stmt pos:start="79:13" pos:end="79:84"><expr pos:start="79:13" pos:end="79:83"><call pos:start="79:13" pos:end="79:83"><name pos:start="79:13" pos:end="79:19">DPRINTF</name><argument_list pos:start="79:20" pos:end="79:83">(<argument pos:start="79:21" pos:end="79:70"><expr pos:start="79:21" pos:end="79:70"><literal type="string" pos:start="79:21" pos:end="79:52">"physmapping does not exist at "</literal><name pos:start="79:53" pos:end="79:66">TARGET_FMT_plx</name><literal type="string" pos:start="79:67" pos:end="79:70">"\n"</literal></expr></argument>, <argument pos:start="79:73" pos:end="79:82"><expr pos:start="79:73" pos:end="79:82"><name pos:start="79:73" pos:end="79:82">start_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
