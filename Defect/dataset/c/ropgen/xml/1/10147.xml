<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10147.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">w64_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="213:1">{<block_content pos:start="5:5" pos:end="211:13">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:16">size</name></decl>, <decl pos:start="5:19" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:19" pos:end="5:26">data_ofs</name> <init pos:start="5:28" pos:end="5:30">= <expr pos:start="5:30" pos:end="5:30"><literal type="number" pos:start="5:30" pos:end="5:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name>      <init pos:start="7:26" pos:end="7:32">= <expr pos:start="7:28" pos:end="7:32"><name pos:start="7:28" pos:end="7:32"><name pos:start="7:28" pos:end="7:28">s</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:32">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">WAVDemuxContext</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">wav</name> <init pos:start="9:26" pos:end="9:39">= <expr pos:start="9:28" pos:end="9:39"><name pos:start="9:28" pos:end="9:39"><name pos:start="9:28" pos:end="9:28">s</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:20"><name pos:start="13:13" pos:end="13:16">guid</name><index pos:start="13:17" pos:end="13:20">[<expr pos:start="13:18" pos:end="13:19"><literal type="number" pos:start="13:18" pos:end="13:19">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:28"><expr pos:start="19:5" pos:end="19:27"><call pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:13">avio_read</name><argument_list pos:start="19:14" pos:end="19:27">(<argument pos:start="19:15" pos:end="19:16"><expr pos:start="19:15" pos:end="19:16"><name pos:start="19:15" pos:end="19:16">pb</name></expr></argument>, <argument pos:start="19:19" pos:end="19:22"><expr pos:start="19:19" pos:end="19:22"><name pos:start="19:19" pos:end="19:22">guid</name></expr></argument>, <argument pos:start="19:25" pos:end="19:26"><expr pos:start="19:25" pos:end="19:26"><literal type="number" pos:start="19:25" pos:end="19:26">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="33:28"><if pos:start="21:5" pos:end="33:28">if <condition pos:start="21:8" pos:end="21:43">(<expr pos:start="21:9" pos:end="21:42"><call pos:start="21:9" pos:end="21:42"><name pos:start="21:9" pos:end="21:14">memcmp</name><argument_list pos:start="21:15" pos:end="21:42">(<argument pos:start="21:16" pos:end="21:19"><expr pos:start="21:16" pos:end="21:19"><name pos:start="21:16" pos:end="21:19">guid</name></expr></argument>, <argument pos:start="21:22" pos:end="21:37"><expr pos:start="21:22" pos:end="21:37"><name pos:start="21:22" pos:end="21:37">ff_w64_guid_riff</name></expr></argument>, <argument pos:start="21:40" pos:end="21:41"><expr pos:start="21:40" pos:end="21:41"><literal type="number" pos:start="21:40" pos:end="21:41">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="28:5" pos:end="33:28"><block_content pos:start="28:5" pos:end="33:28">




    <comment type="block" pos:start="26:5" pos:end="26:35">/* riff + wave + fmt + sizes */</comment>

    <if_stmt pos:start="28:5" pos:end="33:28"><if pos:start="28:5" pos:end="33:28">if <condition pos:start="28:8" pos:end="28:49">(<expr pos:start="28:9" pos:end="28:48"><call pos:start="28:9" pos:end="28:21"><name pos:start="28:9" pos:end="28:17">avio_rl64</name><argument_list pos:start="28:18" pos:end="28:21">(<argument pos:start="28:19" pos:end="28:20"><expr pos:start="28:19" pos:end="28:20"><name pos:start="28:19" pos:end="28:20">pb</name></expr></argument>)</argument_list></call> <operator pos:start="28:23" pos:end="28:23">&lt;</operator> <literal type="number" pos:start="28:25" pos:end="28:28">16</literal> <operator pos:start="28:28" pos:end="28:28">+</operator> <literal type="number" pos:start="28:30" pos:end="28:32">8</literal> <operator pos:start="28:32" pos:end="28:32">+</operator> <literal type="number" pos:start="28:34" pos:end="28:37">16</literal> <operator pos:start="28:37" pos:end="28:37">+</operator> <literal type="number" pos:start="28:39" pos:end="28:41">8</literal> <operator pos:start="28:41" pos:end="28:41">+</operator> <literal type="number" pos:start="28:43" pos:end="28:46">16</literal> <operator pos:start="28:46" pos:end="28:46">+</operator> <literal type="number" pos:start="28:48" pos:end="28:48">8</literal></expr>)</condition><block type="pseudo" pos:start="33:5" pos:end="33:28"><block_content pos:start="33:5" pos:end="33:28">




    <expr_stmt pos:start="33:5" pos:end="33:28"><expr pos:start="33:5" pos:end="33:27"><call pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:13">avio_read</name><argument_list pos:start="33:14" pos:end="33:27">(<argument pos:start="33:15" pos:end="33:16"><expr pos:start="33:15" pos:end="33:16"><name pos:start="33:15" pos:end="33:16">pb</name></expr></argument>, <argument pos:start="33:19" pos:end="33:22"><expr pos:start="33:19" pos:end="33:22"><name pos:start="33:19" pos:end="33:22">guid</name></expr></argument>, <argument pos:start="33:25" pos:end="33:26"><expr pos:start="33:25" pos:end="33:26"><literal type="number" pos:start="33:25" pos:end="33:26">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="40:5"><if pos:start="35:5" pos:end="40:5">if <condition pos:start="35:8" pos:end="35:43">(<expr pos:start="35:9" pos:end="35:42"><call pos:start="35:9" pos:end="35:42"><name pos:start="35:9" pos:end="35:14">memcmp</name><argument_list pos:start="35:15" pos:end="35:42">(<argument pos:start="35:16" pos:end="35:19"><expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">guid</name></expr></argument>, <argument pos:start="35:22" pos:end="35:37"><expr pos:start="35:22" pos:end="35:37"><name pos:start="35:22" pos:end="35:37">ff_w64_guid_wave</name></expr></argument>, <argument pos:start="35:40" pos:end="35:41"><expr pos:start="35:40" pos:end="35:41"><literal type="number" pos:start="35:40" pos:end="35:41">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:45" pos:end="40:5">{<block_content pos:start="37:9" pos:end="37:62">

        <expr_stmt pos:start="37:9" pos:end="37:62"><expr pos:start="37:9" pos:end="37:61"><call pos:start="37:9" pos:end="37:61"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:61">(<argument pos:start="37:16" pos:end="37:16"><expr pos:start="37:16" pos:end="37:16"><name pos:start="37:16" pos:end="37:16">s</name></expr></argument>, <argument pos:start="37:19" pos:end="37:30"><expr pos:start="37:19" pos:end="37:30"><name pos:start="37:19" pos:end="37:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:33" pos:end="37:60"><expr pos:start="37:33" pos:end="37:60"><literal type="string" pos:start="37:33" pos:end="37:60">"could not find wave guid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="44:5" pos:end="44:17"><expr pos:start="44:5" pos:end="44:16"><name pos:start="44:5" pos:end="44:12"><name pos:start="44:5" pos:end="44:7">wav</name><operator pos:start="44:8" pos:end="44:9">-&gt;</operator><name pos:start="44:10" pos:end="44:12">w64</name></name> <operator pos:start="44:14" pos:end="44:14">=</operator> <literal type="number" pos:start="44:16" pos:end="44:16">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="48:5" pos:end="48:38"><expr pos:start="48:5" pos:end="48:37"><name pos:start="48:5" pos:end="48:6">st</name> <operator pos:start="48:8" pos:end="48:8">=</operator> <call pos:start="48:10" pos:end="48:37"><name pos:start="48:10" pos:end="48:28">avformat_new_stream</name><argument_list pos:start="48:29" pos:end="48:37">(<argument pos:start="48:30" pos:end="48:30"><expr pos:start="48:30" pos:end="48:30"><name pos:start="48:30" pos:end="48:30">s</name></expr></argument>, <argument pos:start="48:33" pos:end="48:36"><expr pos:start="48:33" pos:end="48:36"><name pos:start="48:33" pos:end="48:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="50:5" pos:end="52:31"><if pos:start="50:5" pos:end="52:31">if <condition pos:start="50:8" pos:end="50:12">(<expr pos:start="50:9" pos:end="50:11"><operator pos:start="50:9" pos:end="50:9">!</operator><name pos:start="50:10" pos:end="50:11">st</name></expr>)</condition><block type="pseudo" pos:start="52:9" pos:end="52:31"><block_content pos:start="52:9" pos:end="52:31">

        <return pos:start="52:9" pos:end="52:31">return <expr pos:start="52:16" pos:end="52:30"><call pos:start="52:16" pos:end="52:30"><name pos:start="52:16" pos:end="52:22">AVERROR</name><argument_list pos:start="52:23" pos:end="52:30">(<argument pos:start="52:24" pos:end="52:29"><expr pos:start="52:24" pos:end="52:29"><name pos:start="52:24" pos:end="52:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="56:5" pos:end="181:5">while <condition pos:start="56:11" pos:end="56:26">(<expr pos:start="56:12" pos:end="56:25"><operator pos:start="56:12" pos:end="56:12">!</operator><call pos:start="56:13" pos:end="56:25"><name pos:start="56:13" pos:end="56:21">avio_feof</name><argument_list pos:start="56:22" pos:end="56:25">(<argument pos:start="56:23" pos:end="56:24"><expr pos:start="56:23" pos:end="56:24"><name pos:start="56:23" pos:end="56:24">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="56:28" pos:end="181:5">{<block_content pos:start="58:9" pos:end="179:9">

        <if_stmt pos:start="58:9" pos:end="60:18"><if pos:start="58:9" pos:end="60:18">if <condition pos:start="58:12" pos:end="58:42">(<expr pos:start="58:13" pos:end="58:41"><call pos:start="58:13" pos:end="58:35"><name pos:start="58:13" pos:end="58:21">avio_read</name><argument_list pos:start="58:22" pos:end="58:35">(<argument pos:start="58:23" pos:end="58:24"><expr pos:start="58:23" pos:end="58:24"><name pos:start="58:23" pos:end="58:24">pb</name></expr></argument>, <argument pos:start="58:27" pos:end="58:30"><expr pos:start="58:27" pos:end="58:30"><name pos:start="58:27" pos:end="58:30">guid</name></expr></argument>, <argument pos:start="58:33" pos:end="58:34"><expr pos:start="58:33" pos:end="58:34"><literal type="number" pos:start="58:33" pos:end="58:34">16</literal></expr></argument>)</argument_list></call> <operator pos:start="58:37" pos:end="58:38">!=</operator> <literal type="number" pos:start="58:40" pos:end="58:41">16</literal></expr>)</condition><block type="pseudo" pos:start="60:13" pos:end="60:18"><block_content pos:start="60:13" pos:end="60:18">

            <break pos:start="60:13" pos:end="60:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="62:9" pos:end="62:29"><expr pos:start="62:9" pos:end="62:28"><name pos:start="62:9" pos:end="62:12">size</name> <operator pos:start="62:14" pos:end="62:14">=</operator> <call pos:start="62:16" pos:end="62:28"><name pos:start="62:16" pos:end="62:24">avio_rl64</name><argument_list pos:start="62:25" pos:end="62:28">(<argument pos:start="62:26" pos:end="62:27"><expr pos:start="62:26" pos:end="62:27"><name pos:start="62:26" pos:end="62:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="64:9" pos:end="179:9"><if pos:start="64:9" pos:end="179:9">if <condition pos:start="64:12" pos:end="64:59">(<expr pos:start="64:13" pos:end="64:58"><name pos:start="64:13" pos:end="64:16">size</name> <operator pos:start="64:18" pos:end="64:19">&lt;=</operator> <literal type="number" pos:start="64:21" pos:end="64:22">24</literal> <operator pos:start="64:24" pos:end="64:25">||</operator> <name pos:start="64:27" pos:end="64:35">INT64_MAX</name> <operator pos:start="64:37" pos:end="64:37">-</operator> <name pos:start="64:39" pos:end="64:42">size</name> <operator pos:start="64:44" pos:end="64:44">&lt;</operator> <call pos:start="64:46" pos:end="64:58"><name pos:start="64:46" pos:end="64:54">avio_tell</name><argument_list pos:start="64:55" pos:end="64:58">(<argument pos:start="64:56" pos:end="64:57"><expr pos:start="64:56" pos:end="64:57"><name pos:start="64:56" pos:end="64:57">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="179:9"><block_content pos:start="69:9" pos:end="179:9">




        <if_stmt pos:start="69:9" pos:end="179:9"><if pos:start="69:9" pos:end="85:9">if <condition pos:start="69:12" pos:end="69:47">(<expr pos:start="69:13" pos:end="69:46"><operator pos:start="69:13" pos:end="69:13">!</operator><call pos:start="69:14" pos:end="69:46"><name pos:start="69:14" pos:end="69:19">memcmp</name><argument_list pos:start="69:20" pos:end="69:46">(<argument pos:start="69:21" pos:end="69:24"><expr pos:start="69:21" pos:end="69:24"><name pos:start="69:21" pos:end="69:24">guid</name></expr></argument>, <argument pos:start="69:27" pos:end="69:41"><expr pos:start="69:27" pos:end="69:41"><name pos:start="69:27" pos:end="69:41">ff_w64_guid_fmt</name></expr></argument>, <argument pos:start="69:44" pos:end="69:45"><expr pos:start="69:44" pos:end="69:45"><literal type="number" pos:start="69:44" pos:end="69:45">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:49" pos:end="85:9">{<block_content pos:start="73:13" pos:end="83:70">

            <comment type="block" pos:start="71:13" pos:end="71:79">/* subtract chunk header size - normal wav file doesn't count it */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:71"><expr pos:start="73:13" pos:end="73:70"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:70"><name pos:start="73:19" pos:end="73:35">ff_get_wav_header</name><argument_list pos:start="73:36" pos:end="73:70">(<argument pos:start="73:37" pos:end="73:37"><expr pos:start="73:37" pos:end="73:37"><name pos:start="73:37" pos:end="73:37">s</name></expr></argument>, <argument pos:start="73:40" pos:end="73:41"><expr pos:start="73:40" pos:end="73:41"><name pos:start="73:40" pos:end="73:41">pb</name></expr></argument>, <argument pos:start="73:44" pos:end="73:55"><expr pos:start="73:44" pos:end="73:55"><name pos:start="73:44" pos:end="73:55"><name pos:start="73:44" pos:end="73:45">st</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:55">codecpar</name></name></expr></argument>, <argument pos:start="73:58" pos:end="73:66"><expr pos:start="73:58" pos:end="73:66"><name pos:start="73:58" pos:end="73:61">size</name> <operator pos:start="73:63" pos:end="73:63">-</operator> <literal type="number" pos:start="73:65" pos:end="73:66">24</literal></expr></argument>, <argument pos:start="73:69" pos:end="73:69"><expr pos:start="73:69" pos:end="73:69"><literal type="number" pos:start="73:69" pos:end="73:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="77:27"><if pos:start="75:13" pos:end="77:27">if <condition pos:start="75:16" pos:end="75:24">(<expr pos:start="75:17" pos:end="75:23"><name pos:start="75:17" pos:end="75:19">ret</name> <operator pos:start="75:21" pos:end="75:21">&lt;</operator> <literal type="number" pos:start="75:23" pos:end="75:23">0</literal></expr>)</condition><block type="pseudo" pos:start="77:17" pos:end="77:27"><block_content pos:start="77:17" pos:end="77:27">

                <return pos:start="77:17" pos:end="77:27">return <expr pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:60"><expr pos:start="79:13" pos:end="79:59"><call pos:start="79:13" pos:end="79:59"><name pos:start="79:13" pos:end="79:21">avio_skip</name><argument_list pos:start="79:22" pos:end="79:59">(<argument pos:start="79:23" pos:end="79:24"><expr pos:start="79:23" pos:end="79:24"><name pos:start="79:23" pos:end="79:24">pb</name></expr></argument>, <argument pos:start="79:27" pos:end="79:58"><expr pos:start="79:27" pos:end="79:58"><call pos:start="79:27" pos:end="79:51"><name pos:start="79:27" pos:end="79:33">FFALIGN</name><argument_list pos:start="79:34" pos:end="79:51">(<argument pos:start="79:35" pos:end="79:38"><expr pos:start="79:35" pos:end="79:38"><name pos:start="79:35" pos:end="79:38">size</name></expr></argument>, <argument pos:start="79:41" pos:end="79:50"><expr pos:start="79:41" pos:end="79:50"><call pos:start="79:41" pos:end="79:50"><name pos:start="79:41" pos:end="79:47">INT64_C</name><argument_list pos:start="79:48" pos:end="79:50">(<argument pos:start="79:49" pos:end="79:49"><expr pos:start="79:49" pos:end="79:49"><literal type="number" pos:start="79:49" pos:end="79:49">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="79:53" pos:end="79:53">-</operator> <name pos:start="79:55" pos:end="79:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:70"><expr pos:start="83:13" pos:end="83:69"><call pos:start="83:13" pos:end="83:69"><name pos:start="83:13" pos:end="83:31">avpriv_set_pts_info</name><argument_list pos:start="83:32" pos:end="83:69">(<argument pos:start="83:33" pos:end="83:34"><expr pos:start="83:33" pos:end="83:34"><name pos:start="83:33" pos:end="83:34">st</name></expr></argument>, <argument pos:start="83:37" pos:end="83:38"><expr pos:start="83:37" pos:end="83:38"><literal type="number" pos:start="83:37" pos:end="83:38">64</literal></expr></argument>, <argument pos:start="83:41" pos:end="83:41"><expr pos:start="83:41" pos:end="83:41"><literal type="number" pos:start="83:41" pos:end="83:41">1</literal></expr></argument>, <argument pos:start="83:44" pos:end="83:68"><expr pos:start="83:44" pos:end="83:68"><name pos:start="83:44" pos:end="83:68"><name pos:start="83:44" pos:end="83:45">st</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:55">codecpar</name><operator pos:start="83:56" pos:end="83:57">-&gt;</operator><name pos:start="83:58" pos:end="83:68">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="85:11" pos:end="97:9">else if <condition pos:start="85:19" pos:end="85:55">(<expr pos:start="85:20" pos:end="85:54"><operator pos:start="85:20" pos:end="85:20">!</operator><call pos:start="85:21" pos:end="85:54"><name pos:start="85:21" pos:end="85:26">memcmp</name><argument_list pos:start="85:27" pos:end="85:54">(<argument pos:start="85:28" pos:end="85:31"><expr pos:start="85:28" pos:end="85:31"><name pos:start="85:28" pos:end="85:31">guid</name></expr></argument>, <argument pos:start="85:34" pos:end="85:49"><expr pos:start="85:34" pos:end="85:49"><name pos:start="85:34" pos:end="85:49">ff_w64_guid_fact</name></expr></argument>, <argument pos:start="85:52" pos:end="85:53"><expr pos:start="85:52" pos:end="85:53"><literal type="number" pos:start="85:52" pos:end="85:53">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:57" pos:end="97:9">{<block_content pos:start="87:13" pos:end="95:39">

            <decl_stmt pos:start="87:13" pos:end="87:28"><decl pos:start="87:13" pos:end="87:27"><type pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:19">int64_t</name></type> <name pos:start="87:21" pos:end="87:27">samples</name></decl>;</decl_stmt>



            <expr_stmt pos:start="91:13" pos:end="91:36"><expr pos:start="91:13" pos:end="91:35"><name pos:start="91:13" pos:end="91:19">samples</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="91:35"><name pos:start="91:23" pos:end="91:31">avio_rl64</name><argument_list pos:start="91:32" pos:end="91:35">(<argument pos:start="91:33" pos:end="91:34"><expr pos:start="91:33" pos:end="91:34"><name pos:start="91:33" pos:end="91:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="95:39"><if pos:start="93:13" pos:end="95:39">if <condition pos:start="93:16" pos:end="93:28">(<expr pos:start="93:17" pos:end="93:27"><name pos:start="93:17" pos:end="93:23">samples</name> <operator pos:start="93:25" pos:end="93:25">&gt;</operator> <literal type="number" pos:start="93:27" pos:end="93:27">0</literal></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:39"><block_content pos:start="95:17" pos:end="95:39">

                <expr_stmt pos:start="95:17" pos:end="95:39"><expr pos:start="95:17" pos:end="95:38"><name pos:start="95:17" pos:end="95:28"><name pos:start="95:17" pos:end="95:18">st</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:28">duration</name></name> <operator pos:start="95:30" pos:end="95:30">=</operator> <name pos:start="95:32" pos:end="95:38">samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="97:11" pos:end="113:9">else if <condition pos:start="97:19" pos:end="97:55">(<expr pos:start="97:20" pos:end="97:54"><operator pos:start="97:20" pos:end="97:20">!</operator><call pos:start="97:21" pos:end="97:54"><name pos:start="97:21" pos:end="97:26">memcmp</name><argument_list pos:start="97:27" pos:end="97:54">(<argument pos:start="97:28" pos:end="97:31"><expr pos:start="97:28" pos:end="97:31"><name pos:start="97:28" pos:end="97:31">guid</name></expr></argument>, <argument pos:start="97:34" pos:end="97:49"><expr pos:start="97:34" pos:end="97:49"><name pos:start="97:34" pos:end="97:49">ff_w64_guid_data</name></expr></argument>, <argument pos:start="97:52" pos:end="97:53"><expr pos:start="97:52" pos:end="97:53"><literal type="number" pos:start="97:52" pos:end="97:53">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:57" pos:end="113:9">{<block_content pos:start="99:13" pos:end="111:37">

            <expr_stmt pos:start="99:13" pos:end="99:54"><expr pos:start="99:13" pos:end="99:53"><name pos:start="99:13" pos:end="99:25"><name pos:start="99:13" pos:end="99:15">wav</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:25">data_end</name></name> <operator pos:start="99:27" pos:end="99:27">=</operator> <call pos:start="99:29" pos:end="99:41"><name pos:start="99:29" pos:end="99:37">avio_tell</name><argument_list pos:start="99:38" pos:end="99:41">(<argument pos:start="99:39" pos:end="99:40"><expr pos:start="99:39" pos:end="99:40"><name pos:start="99:39" pos:end="99:40">pb</name></expr></argument>)</argument_list></call> <operator pos:start="99:43" pos:end="99:43">+</operator> <name pos:start="99:45" pos:end="99:48">size</name> <operator pos:start="99:50" pos:end="99:50">-</operator> <literal type="number" pos:start="99:52" pos:end="99:53">24</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="103:13" pos:end="103:37"><expr pos:start="103:13" pos:end="103:36"><name pos:start="103:13" pos:end="103:20">data_ofs</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <call pos:start="103:24" pos:end="103:36"><name pos:start="103:24" pos:end="103:32">avio_tell</name><argument_list pos:start="103:33" pos:end="103:36">(<argument pos:start="103:34" pos:end="103:35"><expr pos:start="103:34" pos:end="103:35"><name pos:start="103:34" pos:end="103:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="107:22"><if pos:start="105:13" pos:end="107:22">if <condition pos:start="105:16" pos:end="105:55">(<expr pos:start="105:17" pos:end="105:54"><operator pos:start="105:17" pos:end="105:17">!</operator><operator pos:start="105:18" pos:end="105:18">(</operator><name pos:start="105:19" pos:end="105:30"><name pos:start="105:19" pos:end="105:20">pb</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:30">seekable</name></name> <operator pos:start="105:32" pos:end="105:32">&amp;</operator> <name pos:start="105:34" pos:end="105:53">AVIO_SEEKABLE_NORMAL</name><operator pos:start="105:54" pos:end="105:54">)</operator></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:22"><block_content pos:start="107:17" pos:end="107:22">

                <break pos:start="107:17" pos:end="107:22">break;</break></block_content></block></if></if_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:37"><expr pos:start="111:13" pos:end="111:36"><call pos:start="111:13" pos:end="111:36"><name pos:start="111:13" pos:end="111:21">avio_skip</name><argument_list pos:start="111:22" pos:end="111:36">(<argument pos:start="111:23" pos:end="111:24"><expr pos:start="111:23" pos:end="111:24"><name pos:start="111:23" pos:end="111:24">pb</name></expr></argument>, <argument pos:start="111:27" pos:end="111:35"><expr pos:start="111:27" pos:end="111:35"><name pos:start="111:27" pos:end="111:30">size</name> <operator pos:start="111:32" pos:end="111:32">-</operator> <literal type="number" pos:start="111:34" pos:end="111:35">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="113:11" pos:end="173:9">else if <condition pos:start="113:19" pos:end="113:62">(<expr pos:start="113:20" pos:end="113:61"><operator pos:start="113:20" pos:end="113:20">!</operator><call pos:start="113:21" pos:end="113:61"><name pos:start="113:21" pos:end="113:26">memcmp</name><argument_list pos:start="113:27" pos:end="113:61">(<argument pos:start="113:28" pos:end="113:31"><expr pos:start="113:28" pos:end="113:31"><name pos:start="113:28" pos:end="113:31">guid</name></expr></argument>, <argument pos:start="113:34" pos:end="113:56"><expr pos:start="113:34" pos:end="113:56"><name pos:start="113:34" pos:end="113:56">ff_w64_guid_summarylist</name></expr></argument>, <argument pos:start="113:59" pos:end="113:60"><expr pos:start="113:59" pos:end="113:60"><literal type="number" pos:start="113:59" pos:end="113:60">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:64" pos:end="173:9">{<block_content pos:start="115:13" pos:end="171:47">

            <decl_stmt pos:start="115:13" pos:end="115:36"><decl pos:start="115:13" pos:end="115:25"><type pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:19">int64_t</name></type> <name pos:start="115:21" pos:end="115:25">start</name></decl>, <decl pos:start="115:28" pos:end="115:30"><type ref="prev" pos:start="115:13" pos:end="115:19"/><name pos:start="115:28" pos:end="115:30">end</name></decl>, <decl pos:start="115:33" pos:end="115:35"><type ref="prev" pos:start="115:13" pos:end="115:19"/><name pos:start="115:33" pos:end="115:35">cur</name></decl>;</decl_stmt>

            <decl_stmt pos:start="117:13" pos:end="117:42"><decl pos:start="117:13" pos:end="117:26"><type pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:20">uint32_t</name></type> <name pos:start="117:22" pos:end="117:26">count</name></decl>, <decl pos:start="117:29" pos:end="117:38"><type ref="prev" pos:start="117:13" pos:end="117:20"/><name pos:start="117:29" pos:end="117:38">chunk_size</name></decl>, <decl pos:start="117:41" pos:end="117:41"><type ref="prev" pos:start="117:13" pos:end="117:20"/><name pos:start="117:41" pos:end="117:41">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="121:13" pos:end="121:34"><expr pos:start="121:13" pos:end="121:33"><name pos:start="121:13" pos:end="121:17">start</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <call pos:start="121:21" pos:end="121:33"><name pos:start="121:21" pos:end="121:29">avio_tell</name><argument_list pos:start="121:30" pos:end="121:33">(<argument pos:start="121:31" pos:end="121:32"><expr pos:start="121:31" pos:end="121:32"><name pos:start="121:31" pos:end="121:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:57"><expr pos:start="123:13" pos:end="123:56"><name pos:start="123:13" pos:end="123:15">end</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <name pos:start="123:19" pos:end="123:23">start</name> <operator pos:start="123:25" pos:end="123:25">+</operator> <call pos:start="123:27" pos:end="123:51"><name pos:start="123:27" pos:end="123:33">FFALIGN</name><argument_list pos:start="123:34" pos:end="123:51">(<argument pos:start="123:35" pos:end="123:38"><expr pos:start="123:35" pos:end="123:38"><name pos:start="123:35" pos:end="123:38">size</name></expr></argument>, <argument pos:start="123:41" pos:end="123:50"><expr pos:start="123:41" pos:end="123:50"><call pos:start="123:41" pos:end="123:50"><name pos:start="123:41" pos:end="123:47">INT64_C</name><argument_list pos:start="123:48" pos:end="123:50">(<argument pos:start="123:49" pos:end="123:49"><expr pos:start="123:49" pos:end="123:49"><literal type="number" pos:start="123:49" pos:end="123:49">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="123:53" pos:end="123:53">-</operator> <literal type="number" pos:start="123:55" pos:end="123:56">24</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:34"><expr pos:start="125:13" pos:end="125:33"><name pos:start="125:13" pos:end="125:17">count</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <call pos:start="125:21" pos:end="125:33"><name pos:start="125:21" pos:end="125:29">avio_rl32</name><argument_list pos:start="125:30" pos:end="125:33">(<argument pos:start="125:31" pos:end="125:32"><expr pos:start="125:31" pos:end="125:32"><name pos:start="125:31" pos:end="125:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="129:13" pos:end="167:13">for <control pos:start="129:17" pos:end="129:39">(<init pos:start="129:18" pos:end="129:23"><expr pos:start="129:18" pos:end="129:22"><name pos:start="129:18" pos:end="129:18">i</name> <operator pos:start="129:20" pos:end="129:20">=</operator> <literal type="number" pos:start="129:22" pos:end="129:22">0</literal></expr>;</init> <condition pos:start="129:25" pos:end="129:34"><expr pos:start="129:25" pos:end="129:33"><name pos:start="129:25" pos:end="129:25">i</name> <operator pos:start="129:27" pos:end="129:27">&lt;</operator> <name pos:start="129:29" pos:end="129:33">count</name></expr>;</condition> <incr pos:start="129:36" pos:end="129:38"><expr pos:start="129:36" pos:end="129:38"><name pos:start="129:36" pos:end="129:36">i</name><operator pos:start="129:37" pos:end="129:38">++</operator></expr></incr>)</control> <block pos:start="129:41" pos:end="167:13">{<block_content pos:start="131:17" pos:end="165:85">

                <decl_stmt pos:start="131:17" pos:end="131:42"><decl pos:start="131:17" pos:end="131:33"><type pos:start="131:17" pos:end="131:20"><name pos:start="131:17" pos:end="131:20">char</name></type> <name pos:start="131:22" pos:end="131:33"><name pos:start="131:22" pos:end="131:30">chunk_key</name><index pos:start="131:31" pos:end="131:33">[<expr pos:start="131:32" pos:end="131:32"><literal type="number" pos:start="131:32" pos:end="131:32">5</literal></expr>]</index></name></decl>, <decl pos:start="131:36" pos:end="131:41"><type ref="prev" pos:start="131:17" pos:end="131:20"><modifier pos:start="131:36" pos:end="131:36">*</modifier></type><name pos:start="131:37" pos:end="131:41">value</name></decl>;</decl_stmt>



                <if_stmt pos:start="135:17" pos:end="137:26"><if pos:start="135:17" pos:end="137:26">if <condition pos:start="135:20" pos:end="135:99">(<expr pos:start="135:21" pos:end="135:79"><call pos:start="135:21" pos:end="135:33"><name pos:start="135:21" pos:end="135:29">avio_feof</name><argument_list pos:start="135:30" pos:end="135:33">(<argument pos:start="135:31" pos:end="135:32"><expr pos:start="135:31" pos:end="135:32"><name pos:start="135:31" pos:end="135:32">pb</name></expr></argument>)</argument_list></call> <operator pos:start="135:35" pos:end="135:36">||</operator> <operator pos:start="135:38" pos:end="135:38">(</operator><name pos:start="135:39" pos:end="135:41">cur</name> <operator pos:start="135:43" pos:end="135:43">=</operator> <call pos:start="135:45" pos:end="135:57"><name pos:start="135:45" pos:end="135:53">avio_tell</name><argument_list pos:start="135:54" pos:end="135:57">(<argument pos:start="135:55" pos:end="135:56"><expr pos:start="135:55" pos:end="135:56"><name pos:start="135:55" pos:end="135:56">pb</name></expr></argument>)</argument_list></call><operator pos:start="135:58" pos:end="135:58">)</operator> <operator pos:start="135:60" pos:end="135:60">&lt;</operator> <literal type="number" pos:start="135:62" pos:end="135:62">0</literal> <operator pos:start="135:64" pos:end="135:65">||</operator> <name pos:start="135:67" pos:end="135:69">cur</name> <operator pos:start="135:71" pos:end="135:71">&gt;</operator> <name pos:start="135:73" pos:end="135:75">end</name> <operator pos:start="135:77" pos:end="135:77">-</operator> <literal type="number" pos:start="135:79" pos:end="135:79">8</literal></expr> <comment type="block" pos:start="135:81" pos:end="135:98">/* = tag + size */</comment>)</condition><block type="pseudo" pos:start="137:21" pos:end="137:26"><block_content pos:start="137:21" pos:end="137:26">

                    <break pos:start="137:21" pos:end="137:26">break;</break></block_content></block></if></if_stmt>



                <expr_stmt pos:start="141:17" pos:end="141:33"><expr pos:start="141:17" pos:end="141:32"><name pos:start="141:17" pos:end="141:28"><name pos:start="141:17" pos:end="141:25">chunk_key</name><index pos:start="141:26" pos:end="141:28">[<expr pos:start="141:27" pos:end="141:27"><literal type="number" pos:start="141:27" pos:end="141:27">4</literal></expr>]</index></name> <operator pos:start="141:30" pos:end="141:30">=</operator> <literal type="number" pos:start="141:32" pos:end="141:32">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:44"><expr pos:start="143:17" pos:end="143:43"><call pos:start="143:17" pos:end="143:43"><name pos:start="143:17" pos:end="143:25">avio_read</name><argument_list pos:start="143:26" pos:end="143:43">(<argument pos:start="143:27" pos:end="143:28"><expr pos:start="143:27" pos:end="143:28"><name pos:start="143:27" pos:end="143:28">pb</name></expr></argument>, <argument pos:start="143:31" pos:end="143:39"><expr pos:start="143:31" pos:end="143:39"><name pos:start="143:31" pos:end="143:39">chunk_key</name></expr></argument>, <argument pos:start="143:42" pos:end="143:42"><expr pos:start="143:42" pos:end="143:42"><literal type="number" pos:start="143:42" pos:end="143:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:43"><expr pos:start="145:17" pos:end="145:42"><name pos:start="145:17" pos:end="145:26">chunk_size</name> <operator pos:start="145:28" pos:end="145:28">=</operator> <call pos:start="145:30" pos:end="145:42"><name pos:start="145:30" pos:end="145:38">avio_rl32</name><argument_list pos:start="145:39" pos:end="145:42">(<argument pos:start="145:40" pos:end="145:41"><expr pos:start="145:40" pos:end="145:41"><name pos:start="145:40" pos:end="145:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





                <expr_stmt pos:start="151:17" pos:end="151:51"><expr pos:start="151:17" pos:end="151:50"><name pos:start="151:17" pos:end="151:21">value</name> <operator pos:start="151:23" pos:end="151:23">=</operator> <call pos:start="151:25" pos:end="151:50"><name pos:start="151:25" pos:end="151:34">av_mallocz</name><argument_list pos:start="151:35" pos:end="151:50">(<argument pos:start="151:36" pos:end="151:49"><expr pos:start="151:36" pos:end="151:49"><name pos:start="151:36" pos:end="151:45">chunk_size</name> <operator pos:start="151:47" pos:end="151:47">+</operator> <literal type="number" pos:start="151:49" pos:end="151:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="153:17" pos:end="155:43"><if pos:start="153:17" pos:end="155:43">if <condition pos:start="153:20" pos:end="153:27">(<expr pos:start="153:21" pos:end="153:26"><operator pos:start="153:21" pos:end="153:21">!</operator><name pos:start="153:22" pos:end="153:26">value</name></expr>)</condition><block type="pseudo" pos:start="155:21" pos:end="155:43"><block_content pos:start="155:21" pos:end="155:43">

                    <return pos:start="155:21" pos:end="155:43">return <expr pos:start="155:28" pos:end="155:42"><call pos:start="155:28" pos:end="155:42"><name pos:start="155:28" pos:end="155:34">AVERROR</name><argument_list pos:start="155:35" pos:end="155:42">(<argument pos:start="155:36" pos:end="155:41"><expr pos:start="155:36" pos:end="155:41"><name pos:start="155:36" pos:end="155:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="159:17" pos:end="159:74"><expr pos:start="159:17" pos:end="159:73"><name pos:start="159:17" pos:end="159:19">ret</name> <operator pos:start="159:21" pos:end="159:21">=</operator> <call pos:start="159:23" pos:end="159:73"><name pos:start="159:23" pos:end="159:38">avio_get_str16le</name><argument_list pos:start="159:39" pos:end="159:73">(<argument pos:start="159:40" pos:end="159:41"><expr pos:start="159:40" pos:end="159:41"><name pos:start="159:40" pos:end="159:41">pb</name></expr></argument>, <argument pos:start="159:44" pos:end="159:53"><expr pos:start="159:44" pos:end="159:53"><name pos:start="159:44" pos:end="159:53">chunk_size</name></expr></argument>, <argument pos:start="159:56" pos:end="159:60"><expr pos:start="159:56" pos:end="159:60"><name pos:start="159:56" pos:end="159:60">value</name></expr></argument>, <argument pos:start="159:63" pos:end="159:72"><expr pos:start="159:63" pos:end="159:72"><name pos:start="159:63" pos:end="159:72">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:48"><expr pos:start="161:17" pos:end="161:47"><call pos:start="161:17" pos:end="161:47"><name pos:start="161:17" pos:end="161:25">avio_skip</name><argument_list pos:start="161:26" pos:end="161:47">(<argument pos:start="161:27" pos:end="161:28"><expr pos:start="161:27" pos:end="161:28"><name pos:start="161:27" pos:end="161:28">pb</name></expr></argument>, <argument pos:start="161:31" pos:end="161:46"><expr pos:start="161:31" pos:end="161:46"><name pos:start="161:31" pos:end="161:40">chunk_size</name> <operator pos:start="161:42" pos:end="161:42">-</operator> <name pos:start="161:44" pos:end="161:46">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="165:17" pos:end="165:85"><expr pos:start="165:17" pos:end="165:84"><call pos:start="165:17" pos:end="165:84"><name pos:start="165:17" pos:end="165:27">av_dict_set</name><argument_list pos:start="165:28" pos:end="165:84">(<argument pos:start="165:29" pos:end="165:40"><expr pos:start="165:29" pos:end="165:40"><operator pos:start="165:29" pos:end="165:29">&amp;</operator><name pos:start="165:30" pos:end="165:40"><name pos:start="165:30" pos:end="165:30">s</name><operator pos:start="165:31" pos:end="165:32">-&gt;</operator><name pos:start="165:33" pos:end="165:40">metadata</name></name></expr></argument>, <argument pos:start="165:43" pos:end="165:51"><expr pos:start="165:43" pos:end="165:51"><name pos:start="165:43" pos:end="165:51">chunk_key</name></expr></argument>, <argument pos:start="165:54" pos:end="165:58"><expr pos:start="165:54" pos:end="165:58"><name pos:start="165:54" pos:end="165:58">value</name></expr></argument>, <argument pos:start="165:61" pos:end="165:83"><expr pos:start="165:61" pos:end="165:83"><name pos:start="165:61" pos:end="165:83">AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="171:13" pos:end="171:47"><expr pos:start="171:13" pos:end="171:46"><call pos:start="171:13" pos:end="171:46"><name pos:start="171:13" pos:end="171:21">avio_skip</name><argument_list pos:start="171:22" pos:end="171:46">(<argument pos:start="171:23" pos:end="171:24"><expr pos:start="171:23" pos:end="171:24"><name pos:start="171:23" pos:end="171:24">pb</name></expr></argument>, <argument pos:start="171:27" pos:end="171:45"><expr pos:start="171:27" pos:end="171:45"><name pos:start="171:27" pos:end="171:29">end</name> <operator pos:start="171:31" pos:end="171:31">-</operator> <call pos:start="171:33" pos:end="171:45"><name pos:start="171:33" pos:end="171:41">avio_tell</name><argument_list pos:start="171:42" pos:end="171:45">(<argument pos:start="171:43" pos:end="171:44"><expr pos:start="171:43" pos:end="171:44"><name pos:start="171:43" pos:end="171:44">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="173:11" pos:end="179:9">else <block pos:start="173:16" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:58">

            <expr_stmt pos:start="175:13" pos:end="175:88"><expr pos:start="175:13" pos:end="175:87"><call pos:start="175:13" pos:end="175:87"><name pos:start="175:13" pos:end="175:18">av_log</name><argument_list pos:start="175:19" pos:end="175:87">(<argument pos:start="175:20" pos:end="175:20"><expr pos:start="175:20" pos:end="175:20"><name pos:start="175:20" pos:end="175:20">s</name></expr></argument>, <argument pos:start="175:23" pos:end="175:34"><expr pos:start="175:23" pos:end="175:34"><name pos:start="175:23" pos:end="175:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="175:37" pos:end="175:67"><expr pos:start="175:37" pos:end="175:67"><literal type="string" pos:start="175:37" pos:end="175:52">"unknown guid: "</literal><name pos:start="175:53" pos:end="175:63">FF_PRI_GUID</name><literal type="string" pos:start="175:64" pos:end="175:67">"\n"</literal></expr></argument>, <argument pos:start="175:70" pos:end="175:86"><expr pos:start="175:70" pos:end="175:86"><call pos:start="175:70" pos:end="175:86"><name pos:start="175:70" pos:end="175:80">FF_ARG_GUID</name><argument_list pos:start="175:81" pos:end="175:86">(<argument pos:start="175:82" pos:end="175:85"><expr pos:start="175:82" pos:end="175:85"><name pos:start="175:82" pos:end="175:85">guid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:58"><expr pos:start="177:13" pos:end="177:57"><call pos:start="177:13" pos:end="177:57"><name pos:start="177:13" pos:end="177:21">avio_skip</name><argument_list pos:start="177:22" pos:end="177:57">(<argument pos:start="177:23" pos:end="177:24"><expr pos:start="177:23" pos:end="177:24"><name pos:start="177:23" pos:end="177:24">pb</name></expr></argument>, <argument pos:start="177:27" pos:end="177:56"><expr pos:start="177:27" pos:end="177:56"><call pos:start="177:27" pos:end="177:51"><name pos:start="177:27" pos:end="177:33">FFALIGN</name><argument_list pos:start="177:34" pos:end="177:51">(<argument pos:start="177:35" pos:end="177:38"><expr pos:start="177:35" pos:end="177:38"><name pos:start="177:35" pos:end="177:38">size</name></expr></argument>, <argument pos:start="177:41" pos:end="177:50"><expr pos:start="177:41" pos:end="177:50"><call pos:start="177:41" pos:end="177:50"><name pos:start="177:41" pos:end="177:47">INT64_C</name><argument_list pos:start="177:48" pos:end="177:50">(<argument pos:start="177:49" pos:end="177:49"><expr pos:start="177:49" pos:end="177:49"><literal type="number" pos:start="177:49" pos:end="177:49">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="177:53" pos:end="177:53">-</operator> <literal type="number" pos:start="177:55" pos:end="177:56">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="185:5" pos:end="187:27"><if pos:start="185:5" pos:end="187:27">if <condition pos:start="185:8" pos:end="185:18">(<expr pos:start="185:9" pos:end="185:17"><operator pos:start="185:9" pos:end="185:9">!</operator><name pos:start="185:10" pos:end="185:17">data_ofs</name></expr>)</condition><block type="pseudo" pos:start="187:9" pos:end="187:27"><block_content pos:start="187:9" pos:end="187:27">

        <return pos:start="187:9" pos:end="187:27">return <expr pos:start="187:16" pos:end="187:26"><name pos:start="187:16" pos:end="187:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:53"><expr pos:start="191:5" pos:end="191:52"><call pos:start="191:5" pos:end="191:52"><name pos:start="191:5" pos:end="191:24">ff_metadata_conv_ctx</name><argument_list pos:start="191:25" pos:end="191:52">(<argument pos:start="191:26" pos:end="191:26"><expr pos:start="191:26" pos:end="191:26"><name pos:start="191:26" pos:end="191:26">s</name></expr></argument>, <argument pos:start="191:29" pos:end="191:32"><expr pos:start="191:29" pos:end="191:32"><name pos:start="191:29" pos:end="191:32">NULL</name></expr></argument>, <argument pos:start="191:35" pos:end="191:51"><expr pos:start="191:35" pos:end="191:51"><name pos:start="191:35" pos:end="191:51">wav_metadata_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:53"><expr pos:start="193:5" pos:end="193:52"><call pos:start="193:5" pos:end="193:52"><name pos:start="193:5" pos:end="193:24">ff_metadata_conv_ctx</name><argument_list pos:start="193:25" pos:end="193:52">(<argument pos:start="193:26" pos:end="193:26"><expr pos:start="193:26" pos:end="193:26"><name pos:start="193:26" pos:end="193:26">s</name></expr></argument>, <argument pos:start="193:29" pos:end="193:32"><expr pos:start="193:29" pos:end="193:32"><name pos:start="193:29" pos:end="193:32">NULL</name></expr></argument>, <argument pos:start="193:35" pos:end="193:51"><expr pos:start="193:35" pos:end="193:51"><name pos:start="193:35" pos:end="193:51">ff_riff_info_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:30"><expr pos:start="197:5" pos:end="197:29"><call pos:start="197:5" pos:end="197:29"><name pos:start="197:5" pos:end="197:25">handle_stream_probing</name><argument_list pos:start="197:26" pos:end="197:29">(<argument pos:start="197:27" pos:end="197:28"><expr pos:start="197:27" pos:end="197:28"><name pos:start="197:27" pos:end="197:28">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:47"><expr pos:start="199:5" pos:end="199:46"><name pos:start="199:5" pos:end="199:20"><name pos:start="199:5" pos:end="199:6">st</name><operator pos:start="199:7" pos:end="199:8">-&gt;</operator><name pos:start="199:9" pos:end="199:20">need_parsing</name></name> <operator pos:start="199:22" pos:end="199:22">=</operator> <name pos:start="199:24" pos:end="199:46">AVSTREAM_PARSE_FULL_RAW</name></expr>;</expr_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:38"><expr pos:start="203:5" pos:end="203:37"><call pos:start="203:5" pos:end="203:37"><name pos:start="203:5" pos:end="203:13">avio_seek</name><argument_list pos:start="203:14" pos:end="203:37">(<argument pos:start="203:15" pos:end="203:16"><expr pos:start="203:15" pos:end="203:16"><name pos:start="203:15" pos:end="203:16">pb</name></expr></argument>, <argument pos:start="203:19" pos:end="203:26"><expr pos:start="203:19" pos:end="203:26"><name pos:start="203:19" pos:end="203:26">data_ofs</name></expr></argument>, <argument pos:start="203:29" pos:end="203:36"><expr pos:start="203:29" pos:end="203:36"><name pos:start="203:29" pos:end="203:36">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:22"><expr pos:start="207:5" pos:end="207:21"><call pos:start="207:5" pos:end="207:21"><name pos:start="207:5" pos:end="207:13">set_spdif</name><argument_list pos:start="207:14" pos:end="207:21">(<argument pos:start="207:15" pos:end="207:15"><expr pos:start="207:15" pos:end="207:15"><name pos:start="207:15" pos:end="207:15">s</name></expr></argument>, <argument pos:start="207:18" pos:end="207:20"><expr pos:start="207:18" pos:end="207:20"><name pos:start="207:18" pos:end="207:20">wav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="211:5" pos:end="211:13">return <expr pos:start="211:12" pos:end="211:12"><literal type="number" pos:start="211:12" pos:end="211:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
