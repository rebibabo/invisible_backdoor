<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22230.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:49">qio_channel_websock_decode_payload</name><parameter_list pos:start="1:50" pos:end="3:63">(<parameter pos:start="1:51" pos:end="1:72"><decl pos:start="1:51" pos:end="1:72"><type pos:start="1:51" pos:end="1:72"><name pos:start="1:51" pos:end="1:67">QIOChannelWebsock</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">ioc</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:62"><decl pos:start="3:51" pos:end="3:62"><type pos:start="3:51" pos:end="3:62"><name pos:start="3:51" pos:end="3:55">Error</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier><modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="87:1">{<block_content pos:start="7:5" pos:end="85:23">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:22">payload_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint32_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:23">payload32</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:29">(<expr pos:start="15:9" pos:end="15:28"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:28"><name pos:start="15:10" pos:end="15:12">ioc</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:28">payload_remain</name></name></expr>)</condition> <block pos:start="15:31" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:18">

        <expr_stmt pos:start="17:9" pos:end="19:70"><expr pos:start="17:9" pos:end="19:69"><call pos:start="17:9" pos:end="19:69"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="19:69">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>,

                   <argument pos:start="19:20" pos:end="19:68"><expr pos:start="19:20" pos:end="19:68"><literal type="string" pos:start="19:20" pos:end="19:68">"Decoding payload but no bytes of payload remain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="33:7">/* If we aren't at the end of the payload, then drop

     * off the last bytes, so we're always multiple of 4

     * for purpose of unmasking, except at end of payload

     */</comment>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:51">(<expr pos:start="35:9" pos:end="35:50"><name pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:11">ioc</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:21">encinput</name><operator pos:start="35:22" pos:end="35:22">.</operator><name pos:start="35:23" pos:end="35:28">offset</name></name> <operator pos:start="35:30" pos:end="35:30">&lt;</operator> <name pos:start="35:32" pos:end="35:50"><name pos:start="35:32" pos:end="35:34">ioc</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:50">payload_remain</name></name></expr>)</condition> <block pos:start="35:53" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:72">

        <expr_stmt pos:start="37:9" pos:end="37:72"><expr pos:start="37:9" pos:end="37:71"><name pos:start="37:9" pos:end="37:19">payload_len</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <name pos:start="37:23" pos:end="37:42"><name pos:start="37:23" pos:end="37:25">ioc</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:35">encinput</name><operator pos:start="37:36" pos:end="37:36">.</operator><name pos:start="37:37" pos:end="37:42">offset</name></name> <operator pos:start="37:44" pos:end="37:44">-</operator> <operator pos:start="37:46" pos:end="37:46">(</operator><name pos:start="37:47" pos:end="37:66"><name pos:start="37:47" pos:end="37:49">ioc</name><operator pos:start="37:50" pos:end="37:51">-&gt;</operator><name pos:start="37:52" pos:end="37:59">encinput</name><operator pos:start="37:60" pos:end="37:60">.</operator><name pos:start="37:61" pos:end="37:66">offset</name></name> <operator pos:start="37:68" pos:end="37:68">%</operator> <literal type="number" pos:start="37:70" pos:end="37:70">4</literal><operator pos:start="37:71" pos:end="37:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="43:5">else <block pos:start="39:12" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:42">

        <expr_stmt pos:start="41:9" pos:end="41:42"><expr pos:start="41:9" pos:end="41:41"><name pos:start="41:9" pos:end="41:19">payload_len</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <name pos:start="41:23" pos:end="41:41"><name pos:start="41:23" pos:end="41:25">ioc</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:41">payload_remain</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:25">(<expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:19">payload_len</name> <operator pos:start="45:21" pos:end="45:22">==</operator> <literal type="number" pos:start="45:24" pos:end="45:24">0</literal></expr>)</condition> <block pos:start="45:27" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:37">

        <return pos:start="47:9" pos:end="47:37">return <expr pos:start="47:16" pos:end="47:36"><name pos:start="47:16" pos:end="47:36">QIO_CHANNEL_ERR_BLOCK</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:39"><expr pos:start="53:5" pos:end="53:38"><name pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:7">ioc</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:23">payload_remain</name></name> <operator pos:start="53:25" pos:end="53:26">-=</operator> <name pos:start="53:28" pos:end="53:38">payload_len</name></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:22">/* unmask frame */</comment>

    <comment type="block" pos:start="59:5" pos:end="59:37">/* process 1 frame (32 bit op) */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:49"><expr pos:start="61:5" pos:end="61:48"><name pos:start="61:5" pos:end="61:13">payload32</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <operator pos:start="61:17" pos:end="61:17">(</operator><name pos:start="61:18" pos:end="61:25">uint32_t</name> <operator pos:start="61:27" pos:end="61:27">*</operator><operator pos:start="61:28" pos:end="61:28">)</operator><name pos:start="61:29" pos:end="61:48"><name pos:start="61:29" pos:end="61:31">ioc</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:41">encinput</name><operator pos:start="61:42" pos:end="61:42">.</operator><name pos:start="61:43" pos:end="61:48">buffer</name></name></expr>;</expr_stmt>

    <for pos:start="63:5" pos:end="67:5">for <control pos:start="63:9" pos:end="63:41">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:36"><expr pos:start="63:17" pos:end="63:35"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:31">payload_len</name> <operator pos:start="63:33" pos:end="63:33">/</operator> <literal type="number" pos:start="63:35" pos:end="63:35">4</literal></expr>;</condition> <incr pos:start="63:38" pos:end="63:40"><expr pos:start="63:38" pos:end="63:40"><name pos:start="63:38" pos:end="63:38">i</name><operator pos:start="63:39" pos:end="63:40">++</operator></expr></incr>)</control> <block pos:start="63:43" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:36">

        <expr_stmt pos:start="65:9" pos:end="65:36"><expr pos:start="65:9" pos:end="65:35"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:17">payload32</name><index pos:start="65:18" pos:end="65:20">[<expr pos:start="65:19" pos:end="65:19"><name pos:start="65:19" pos:end="65:19">i</name></expr>]</index></name> <operator pos:start="65:22" pos:end="65:23">^=</operator> <name pos:start="65:25" pos:end="65:35"><name pos:start="65:25" pos:end="65:27">ioc</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:33">mask</name><operator pos:start="65:34" pos:end="65:34">.</operator><name pos:start="65:35" pos:end="65:35">u</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="69:5" pos:end="69:46">/* process the remaining bytes (if any) */</comment>

    <for pos:start="71:5" pos:end="75:5">for <control pos:start="71:9" pos:end="71:38">(<init pos:start="71:10" pos:end="71:16"><expr pos:start="71:10" pos:end="71:15"><name pos:start="71:10" pos:end="71:10">i</name> <operator pos:start="71:12" pos:end="71:13">*=</operator> <literal type="number" pos:start="71:15" pos:end="71:15">4</literal></expr>;</init> <condition pos:start="71:18" pos:end="71:33"><expr pos:start="71:18" pos:end="71:32"><name pos:start="71:18" pos:end="71:18">i</name> <operator pos:start="71:20" pos:end="71:20">&lt;</operator> <name pos:start="71:22" pos:end="71:32">payload_len</name></expr>;</condition> <incr pos:start="71:35" pos:end="71:37"><expr pos:start="71:35" pos:end="71:37"><name pos:start="71:35" pos:end="71:35">i</name><operator pos:start="71:36" pos:end="71:37">++</operator></expr></incr>)</control> <block pos:start="71:40" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:54">

        <expr_stmt pos:start="73:9" pos:end="73:54"><expr pos:start="73:9" pos:end="73:53"><name pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:11">ioc</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:21">encinput</name><operator pos:start="73:22" pos:end="73:22">.</operator><name pos:start="73:23" pos:end="73:28">buffer</name><index pos:start="73:29" pos:end="73:31">[<expr pos:start="73:30" pos:end="73:30"><name pos:start="73:30" pos:end="73:30">i</name></expr>]</index></name> <operator pos:start="73:33" pos:end="73:34">^=</operator> <name pos:start="73:36" pos:end="73:53"><name pos:start="73:36" pos:end="73:38">ioc</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:44">mask</name><operator pos:start="73:45" pos:end="73:45">.</operator><name pos:start="73:46" pos:end="73:46">c</name><index pos:start="73:47" pos:end="73:53">[<expr pos:start="73:48" pos:end="73:52"><name pos:start="73:48" pos:end="73:48">i</name> <operator pos:start="73:50" pos:end="73:50">%</operator> <literal type="number" pos:start="73:52" pos:end="73:52">4</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="79:5" pos:end="79:48"><expr pos:start="79:5" pos:end="79:47"><call pos:start="79:5" pos:end="79:47"><name pos:start="79:5" pos:end="79:18">buffer_reserve</name><argument_list pos:start="79:19" pos:end="79:47">(<argument pos:start="79:20" pos:end="79:33"><expr pos:start="79:20" pos:end="79:33"><operator pos:start="79:20" pos:end="79:20">&amp;</operator><name pos:start="79:21" pos:end="79:33"><name pos:start="79:21" pos:end="79:23">ioc</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:33">rawinput</name></name></expr></argument>, <argument pos:start="79:36" pos:end="79:46"><expr pos:start="79:36" pos:end="79:46"><name pos:start="79:36" pos:end="79:46">payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:69"><expr pos:start="81:5" pos:end="81:68"><call pos:start="81:5" pos:end="81:68"><name pos:start="81:5" pos:end="81:17">buffer_append</name><argument_list pos:start="81:18" pos:end="81:68">(<argument pos:start="81:19" pos:end="81:32"><expr pos:start="81:19" pos:end="81:32"><operator pos:start="81:19" pos:end="81:19">&amp;</operator><name pos:start="81:20" pos:end="81:32"><name pos:start="81:20" pos:end="81:22">ioc</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:32">rawinput</name></name></expr></argument>, <argument pos:start="81:35" pos:end="81:54"><expr pos:start="81:35" pos:end="81:54"><name pos:start="81:35" pos:end="81:54"><name pos:start="81:35" pos:end="81:37">ioc</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:47">encinput</name><operator pos:start="81:48" pos:end="81:48">.</operator><name pos:start="81:49" pos:end="81:54">buffer</name></name></expr></argument>, <argument pos:start="81:57" pos:end="81:67"><expr pos:start="81:57" pos:end="81:67"><name pos:start="81:57" pos:end="81:67">payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:48"><expr pos:start="83:5" pos:end="83:47"><call pos:start="83:5" pos:end="83:47"><name pos:start="83:5" pos:end="83:18">buffer_advance</name><argument_list pos:start="83:19" pos:end="83:47">(<argument pos:start="83:20" pos:end="83:33"><expr pos:start="83:20" pos:end="83:33"><operator pos:start="83:20" pos:end="83:20">&amp;</operator><name pos:start="83:21" pos:end="83:33"><name pos:start="83:21" pos:end="83:23">ioc</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:33">encinput</name></name></expr></argument>, <argument pos:start="83:36" pos:end="83:46"><expr pos:start="83:36" pos:end="83:46"><name pos:start="83:36" pos:end="83:46">payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="85:5" pos:end="85:23">return <expr pos:start="85:12" pos:end="85:22"><name pos:start="85:12" pos:end="85:22">payload_len</name></expr>;</return>

</block_content>}</block></function>
</unit>
