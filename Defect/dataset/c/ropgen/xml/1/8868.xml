<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8868.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">slirp_guestfwd</name><parameter_list pos:start="1:27" pos:end="3:45">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:37">SlirpState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:49">Monitor</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">mon</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:78"><decl pos:start="1:57" pos:end="1:78"><type pos:start="1:57" pos:end="1:78"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:66">char</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:78">config_str</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:44"><decl pos:start="3:28" pos:end="3:44"><type pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:44">legacy_format</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:74">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:18">in_addr</name></name></type> <name pos:start="7:20" pos:end="7:25">server</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><block pos:start="7:29" pos:end="7:43">{ <expr pos:start="7:31" pos:end="7:41"><operator pos:start="7:31" pos:end="7:31">.</operator><name pos:start="7:32" pos:end="7:37">s_addr</name> <operator pos:start="7:39" pos:end="7:39">=</operator> <literal type="number" pos:start="7:41" pos:end="7:41">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:19">GuestFwd</name></name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">fwd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:17"><name pos:start="13:10" pos:end="13:12">buf</name><index pos:start="13:13" pos:end="13:17">[<expr pos:start="13:14" pos:end="13:16"><literal type="number" pos:start="13:14" pos:end="13:16">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">port</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:19"><expr pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:5">p</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <name pos:start="21:9" pos:end="21:18">config_str</name></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="63:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:21">legacy_format</name></expr>)</condition> <block pos:start="23:24" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:9">

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:55">(<expr pos:start="25:13" pos:end="25:54"><call pos:start="25:13" pos:end="25:50"><name pos:start="25:13" pos:end="25:23">get_str_sep</name><argument_list pos:start="25:24" pos:end="25:50">(<argument pos:start="25:25" pos:end="25:27"><expr pos:start="25:25" pos:end="25:27"><name pos:start="25:25" pos:end="25:27">buf</name></expr></argument>, <argument pos:start="25:30" pos:end="25:40"><expr pos:start="25:30" pos:end="25:40"><sizeof pos:start="25:30" pos:end="25:40">sizeof<argument_list pos:start="25:36" pos:end="25:40">(<argument pos:start="25:37" pos:end="25:39"><expr pos:start="25:37" pos:end="25:39"><name pos:start="25:37" pos:end="25:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="25:43" pos:end="25:44"><expr pos:start="25:43" pos:end="25:44"><operator pos:start="25:43" pos:end="25:43">&amp;</operator><name pos:start="25:44" pos:end="25:44">p</name></expr></argument>, <argument pos:start="25:47" pos:end="25:49"><expr pos:start="25:47" pos:end="25:49"><literal type="char" pos:start="25:47" pos:end="25:49">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="25:52" pos:end="25:52">&lt;</operator> <literal type="number" pos:start="25:54" pos:end="25:54">0</literal></expr>)</condition> <block pos:start="25:57" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:29">

            <goto pos:start="27:13" pos:end="27:29">goto <name pos:start="27:18" pos:end="27:28">fail_syntax</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="63:5">else <block pos:start="31:12" pos:end="63:5">{<block_content pos:start="33:9" pos:end="61:9">

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:55">(<expr pos:start="33:13" pos:end="33:54"><call pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:23">get_str_sep</name><argument_list pos:start="33:24" pos:end="33:50">(<argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:27">buf</name></expr></argument>, <argument pos:start="33:30" pos:end="33:40"><expr pos:start="33:30" pos:end="33:40"><sizeof pos:start="33:30" pos:end="33:40">sizeof<argument_list pos:start="33:36" pos:end="33:40">(<argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:43" pos:end="33:44"><expr pos:start="33:43" pos:end="33:44"><operator pos:start="33:43" pos:end="33:43">&amp;</operator><name pos:start="33:44" pos:end="33:44">p</name></expr></argument>, <argument pos:start="33:47" pos:end="33:49"><expr pos:start="33:47" pos:end="33:49"><literal type="char" pos:start="33:47" pos:end="33:49">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="33:52" pos:end="33:52">&lt;</operator> <literal type="number" pos:start="33:54" pos:end="33:54">0</literal></expr>)</condition> <block pos:start="33:57" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:29">

            <goto pos:start="35:13" pos:end="35:29">goto <name pos:start="35:18" pos:end="35:28">fail_syntax</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:49">(<expr pos:start="39:13" pos:end="39:48"><call pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:18">strcmp</name><argument_list pos:start="39:19" pos:end="39:30">(<argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">buf</name></expr></argument>, <argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><literal type="string" pos:start="39:25" pos:end="39:29">"tcp"</literal></expr></argument>)</argument_list></call> <operator pos:start="39:32" pos:end="39:33">&amp;&amp;</operator> <name pos:start="39:35" pos:end="39:40"><name pos:start="39:35" pos:end="39:37">buf</name><index pos:start="39:38" pos:end="39:40">[<expr pos:start="39:39" pos:end="39:39"><literal type="number" pos:start="39:39" pos:end="39:39">0</literal></expr>]</index></name> <operator pos:start="39:42" pos:end="39:43">!=</operator> <literal type="char" pos:start="39:45" pos:end="39:48">'\0'</literal></expr>)</condition> <block pos:start="39:51" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:29">

            <goto pos:start="41:13" pos:end="41:29">goto <name pos:start="41:18" pos:end="41:28">fail_syntax</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:55">(<expr pos:start="45:13" pos:end="45:54"><call pos:start="45:13" pos:end="45:50"><name pos:start="45:13" pos:end="45:23">get_str_sep</name><argument_list pos:start="45:24" pos:end="45:50">(<argument pos:start="45:25" pos:end="45:27"><expr pos:start="45:25" pos:end="45:27"><name pos:start="45:25" pos:end="45:27">buf</name></expr></argument>, <argument pos:start="45:30" pos:end="45:40"><expr pos:start="45:30" pos:end="45:40"><sizeof pos:start="45:30" pos:end="45:40">sizeof<argument_list pos:start="45:36" pos:end="45:40">(<argument pos:start="45:37" pos:end="45:39"><expr pos:start="45:37" pos:end="45:39"><name pos:start="45:37" pos:end="45:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="45:43" pos:end="45:44"><expr pos:start="45:43" pos:end="45:44"><operator pos:start="45:43" pos:end="45:43">&amp;</operator><name pos:start="45:44" pos:end="45:44">p</name></expr></argument>, <argument pos:start="45:47" pos:end="45:49"><expr pos:start="45:47" pos:end="45:49"><literal type="char" pos:start="45:47" pos:end="45:49">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="45:52" pos:end="45:52">&lt;</operator> <literal type="number" pos:start="45:54" pos:end="45:54">0</literal></expr>)</condition> <block pos:start="45:57" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:29">

            <goto pos:start="47:13" pos:end="47:29">goto <name pos:start="47:18" pos:end="47:28">fail_syntax</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:55">(<expr pos:start="51:13" pos:end="51:54"><name pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:15">buf</name><index pos:start="51:16" pos:end="51:18">[<expr pos:start="51:17" pos:end="51:17"><literal type="number" pos:start="51:17" pos:end="51:17">0</literal></expr>]</index></name> <operator pos:start="51:20" pos:end="51:21">!=</operator> <literal type="char" pos:start="51:23" pos:end="51:26">'\0'</literal> <operator pos:start="51:28" pos:end="51:29">&amp;&amp;</operator> <operator pos:start="51:31" pos:end="51:31">!</operator><call pos:start="51:32" pos:end="51:54"><name pos:start="51:32" pos:end="51:40">inet_aton</name><argument_list pos:start="51:41" pos:end="51:54">(<argument pos:start="51:42" pos:end="51:44"><expr pos:start="51:42" pos:end="51:44"><name pos:start="51:42" pos:end="51:44">buf</name></expr></argument>, <argument pos:start="51:47" pos:end="51:53"><expr pos:start="51:47" pos:end="51:53"><operator pos:start="51:47" pos:end="51:47">&amp;</operator><name pos:start="51:48" pos:end="51:53">server</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:57" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:29">

            <goto pos:start="53:13" pos:end="53:29">goto <name pos:start="53:18" pos:end="53:28">fail_syntax</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:55">(<expr pos:start="57:13" pos:end="57:54"><call pos:start="57:13" pos:end="57:50"><name pos:start="57:13" pos:end="57:23">get_str_sep</name><argument_list pos:start="57:24" pos:end="57:50">(<argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">buf</name></expr></argument>, <argument pos:start="57:30" pos:end="57:40"><expr pos:start="57:30" pos:end="57:40"><sizeof pos:start="57:30" pos:end="57:40">sizeof<argument_list pos:start="57:36" pos:end="57:40">(<argument pos:start="57:37" pos:end="57:39"><expr pos:start="57:37" pos:end="57:39"><name pos:start="57:37" pos:end="57:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="57:43" pos:end="57:44"><expr pos:start="57:43" pos:end="57:44"><operator pos:start="57:43" pos:end="57:43">&amp;</operator><name pos:start="57:44" pos:end="57:44">p</name></expr></argument>, <argument pos:start="57:47" pos:end="57:49"><expr pos:start="57:47" pos:end="57:49"><literal type="char" pos:start="57:47" pos:end="57:49">'-'</literal></expr></argument>)</argument_list></call> <operator pos:start="57:52" pos:end="57:52">&lt;</operator> <literal type="number" pos:start="57:54" pos:end="57:54">0</literal></expr>)</condition> <block pos:start="57:57" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:29">

            <goto pos:start="59:13" pos:end="59:29">goto <name pos:start="59:18" pos:end="59:28">fail_syntax</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:33"><expr pos:start="65:5" pos:end="65:32"><name pos:start="65:5" pos:end="65:8">port</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <call pos:start="65:12" pos:end="65:32"><name pos:start="65:12" pos:end="65:17">strtol</name><argument_list pos:start="65:18" pos:end="65:32">(<argument pos:start="65:19" pos:end="65:21"><expr pos:start="65:19" pos:end="65:21"><name pos:start="65:19" pos:end="65:21">buf</name></expr></argument>, <argument pos:start="65:24" pos:end="65:27"><expr pos:start="65:24" pos:end="65:27"><operator pos:start="65:24" pos:end="65:24">&amp;</operator><name pos:start="65:25" pos:end="65:27">end</name></expr></argument>, <argument pos:start="65:30" pos:end="65:31"><expr pos:start="65:30" pos:end="65:31"><literal type="number" pos:start="65:30" pos:end="65:31">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:49">(<expr pos:start="67:9" pos:end="67:48"><operator pos:start="67:9" pos:end="67:9">*</operator><name pos:start="67:10" pos:end="67:12">end</name> <operator pos:start="67:14" pos:end="67:15">!=</operator> <literal type="char" pos:start="67:17" pos:end="67:20">'\0'</literal> <operator pos:start="67:22" pos:end="67:23">||</operator> <name pos:start="67:25" pos:end="67:42"><name pos:start="67:25" pos:end="67:28">port</name> <argument_list type="generic" pos:start="67:30" pos:end="67:42">&lt; <argument pos:start="67:32" pos:end="67:40"><expr pos:start="67:32" pos:end="67:40"><literal type="number" pos:start="67:32" pos:end="67:32">1</literal> <operator pos:start="67:34" pos:end="67:35">||</operator> <name pos:start="67:37" pos:end="67:40">port</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="67:44" pos:end="67:48">65535</literal></expr>)</condition> <block pos:start="67:51" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:25">

        <goto pos:start="69:9" pos:end="69:25">goto <name pos:start="69:14" pos:end="69:24">fail_syntax</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:47"><expr pos:start="75:5" pos:end="75:46"><name pos:start="75:5" pos:end="75:7">fwd</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:46"><name pos:start="75:11" pos:end="75:21">qemu_malloc</name><argument_list pos:start="75:22" pos:end="75:46">(<argument pos:start="75:23" pos:end="75:45"><expr pos:start="75:23" pos:end="75:45"><sizeof pos:start="75:23" pos:end="75:45">sizeof<argument_list pos:start="75:29" pos:end="75:45">(<argument pos:start="75:30" pos:end="75:44"><expr pos:start="75:30" pos:end="75:44">struct <name pos:start="75:37" pos:end="75:44">GuestFwd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:56"><expr pos:start="77:5" pos:end="77:55"><call pos:start="77:5" pos:end="77:55"><name pos:start="77:5" pos:end="77:12">snprintf</name><argument_list pos:start="77:13" pos:end="77:55">(<argument pos:start="77:14" pos:end="77:16"><expr pos:start="77:14" pos:end="77:16"><name pos:start="77:14" pos:end="77:16">buf</name></expr></argument>, <argument pos:start="77:19" pos:end="77:29"><expr pos:start="77:19" pos:end="77:29"><sizeof pos:start="77:19" pos:end="77:29">sizeof<argument_list pos:start="77:25" pos:end="77:29">(<argument pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><name pos:start="77:26" pos:end="77:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="77:32" pos:end="77:48"><expr pos:start="77:32" pos:end="77:48"><literal type="string" pos:start="77:32" pos:end="77:48">"guestfwd.tcp:%d"</literal></expr></argument>, <argument pos:start="77:51" pos:end="77:54"><expr pos:start="77:51" pos:end="77:54"><name pos:start="77:51" pos:end="77:54">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:42"><expr pos:start="79:5" pos:end="79:41"><name pos:start="79:5" pos:end="79:11"><name pos:start="79:5" pos:end="79:7">fwd</name><operator pos:start="79:8" pos:end="79:9">-&gt;</operator><name pos:start="79:10" pos:end="79:11">hd</name></name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:41"><name pos:start="79:15" pos:end="79:27">qemu_chr_open</name><argument_list pos:start="79:28" pos:end="79:41">(<argument pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:31">buf</name></expr></argument>, <argument pos:start="79:34" pos:end="79:34"><expr pos:start="79:34" pos:end="79:34"><name pos:start="79:34" pos:end="79:34">p</name></expr></argument>, <argument pos:start="79:37" pos:end="79:40"><expr pos:start="79:37" pos:end="79:40"><name pos:start="79:37" pos:end="79:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="91:5"><if pos:start="81:5" pos:end="91:5">if <condition pos:start="81:8" pos:end="81:17">(<expr pos:start="81:9" pos:end="81:16"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:16"><name pos:start="81:10" pos:end="81:12">fwd</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:16">hd</name></name></expr>)</condition> <block pos:start="81:19" pos:end="91:5">{<block_content pos:start="83:9" pos:end="89:15">

        <expr_stmt pos:start="83:9" pos:end="85:26"><expr pos:start="83:9" pos:end="85:25"><call pos:start="83:9" pos:end="85:25"><name pos:start="83:9" pos:end="83:20">config_error</name><argument_list pos:start="83:21" pos:end="85:25">(<argument pos:start="83:22" pos:end="83:24"><expr pos:start="83:22" pos:end="83:24"><name pos:start="83:22" pos:end="83:24">mon</name></expr></argument>, <argument pos:start="83:27" pos:end="83:73"><expr pos:start="83:27" pos:end="83:73"><literal type="string" pos:start="83:27" pos:end="83:73">"could not open guest forwarding device '%s'\n"</literal></expr></argument>,

                     <argument pos:start="85:22" pos:end="85:24"><expr pos:start="85:22" pos:end="85:24"><name pos:start="85:22" pos:end="85:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:23"><expr pos:start="87:9" pos:end="87:22"><call pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:17">qemu_free</name><argument_list pos:start="87:18" pos:end="87:22">(<argument pos:start="87:19" pos:end="87:21"><expr pos:start="87:19" pos:end="87:21"><name pos:start="87:19" pos:end="87:21">fwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="105:5"><if pos:start="95:5" pos:end="105:5">if <condition pos:start="95:8" pos:end="95:64">(<expr pos:start="95:9" pos:end="95:63"><call pos:start="95:9" pos:end="95:59"><name pos:start="95:9" pos:end="95:22">slirp_add_exec</name><argument_list pos:start="95:23" pos:end="95:59">(<argument pos:start="95:24" pos:end="95:31"><expr pos:start="95:24" pos:end="95:31"><name pos:start="95:24" pos:end="95:31"><name pos:start="95:24" pos:end="95:24">s</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:31">slirp</name></name></expr></argument>, <argument pos:start="95:34" pos:end="95:34"><expr pos:start="95:34" pos:end="95:34"><literal type="number" pos:start="95:34" pos:end="95:34">3</literal></expr></argument>, <argument pos:start="95:37" pos:end="95:43"><expr pos:start="95:37" pos:end="95:43"><name pos:start="95:37" pos:end="95:43"><name pos:start="95:37" pos:end="95:39">fwd</name><operator pos:start="95:40" pos:end="95:41">-&gt;</operator><name pos:start="95:42" pos:end="95:43">hd</name></name></expr></argument>, <argument pos:start="95:46" pos:end="95:52"><expr pos:start="95:46" pos:end="95:52"><operator pos:start="95:46" pos:end="95:46">&amp;</operator><name pos:start="95:47" pos:end="95:52">server</name></expr></argument>, <argument pos:start="95:55" pos:end="95:58"><expr pos:start="95:55" pos:end="95:58"><name pos:start="95:55" pos:end="95:58">port</name></expr></argument>)</argument_list></call> <operator pos:start="95:61" pos:end="95:61">&lt;</operator> <literal type="number" pos:start="95:63" pos:end="95:63">0</literal></expr>)</condition> <block pos:start="95:66" pos:end="105:5">{<block_content pos:start="97:9" pos:end="103:15">

        <expr_stmt pos:start="97:9" pos:end="99:48"><expr pos:start="97:9" pos:end="99:47"><call pos:start="97:9" pos:end="99:47"><name pos:start="97:9" pos:end="97:20">config_error</name><argument_list pos:start="97:21" pos:end="99:47">(<argument pos:start="97:22" pos:end="97:24"><expr pos:start="97:22" pos:end="97:24"><name pos:start="97:22" pos:end="97:24">mon</name></expr></argument>, <argument pos:start="97:27" pos:end="99:34"><expr pos:start="97:27" pos:end="99:34"><literal type="string" pos:start="97:27" pos:end="97:78">"conflicting/invalid host:port in guest forwarding "</literal>

                     <literal type="string" pos:start="99:22" pos:end="99:34">"rule '%s'\n"</literal></expr></argument>, <argument pos:start="99:37" pos:end="99:46"><expr pos:start="99:37" pos:end="99:46"><name pos:start="99:37" pos:end="99:46">config_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:23"><expr pos:start="101:9" pos:end="101:22"><call pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:17">qemu_free</name><argument_list pos:start="101:18" pos:end="101:22">(<argument pos:start="101:19" pos:end="101:21"><expr pos:start="101:19" pos:end="101:21"><name pos:start="101:19" pos:end="101:21">fwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:25"><expr pos:start="107:5" pos:end="107:24"><name pos:start="107:5" pos:end="107:15"><name pos:start="107:5" pos:end="107:7">fwd</name><operator pos:start="107:8" pos:end="107:9">-&gt;</operator><name pos:start="107:10" pos:end="107:15">server</name></name> <operator pos:start="107:17" pos:end="107:17">=</operator> <name pos:start="107:19" pos:end="107:24">server</name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:13"><name pos:start="109:5" pos:end="109:7">fwd</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:13">port</name></name> <operator pos:start="109:15" pos:end="109:15">=</operator> <name pos:start="109:17" pos:end="109:20">port</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:26"><expr pos:start="111:5" pos:end="111:25"><name pos:start="111:5" pos:end="111:14"><name pos:start="111:5" pos:end="111:7">fwd</name><operator pos:start="111:8" pos:end="111:9">-&gt;</operator><name pos:start="111:10" pos:end="111:14">slirp</name></name> <operator pos:start="111:16" pos:end="111:16">=</operator> <name pos:start="111:18" pos:end="111:25"><name pos:start="111:18" pos:end="111:18">s</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:25">slirp</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="117:37"><expr pos:start="115:5" pos:end="117:36"><call pos:start="115:5" pos:end="117:36"><name pos:start="115:5" pos:end="115:25">qemu_chr_add_handlers</name><argument_list pos:start="115:26" pos:end="117:36">(<argument pos:start="115:27" pos:end="115:33"><expr pos:start="115:27" pos:end="115:33"><name pos:start="115:27" pos:end="115:33"><name pos:start="115:27" pos:end="115:29">fwd</name><operator pos:start="115:30" pos:end="115:31">-&gt;</operator><name pos:start="115:32" pos:end="115:33">hd</name></name></expr></argument>, <argument pos:start="115:36" pos:end="115:52"><expr pos:start="115:36" pos:end="115:52"><name pos:start="115:36" pos:end="115:52">guestfwd_can_read</name></expr></argument>, <argument pos:start="115:55" pos:end="115:67"><expr pos:start="115:55" pos:end="115:67"><name pos:start="115:55" pos:end="115:67">guestfwd_read</name></expr></argument>,

                          <argument pos:start="117:27" pos:end="117:30"><expr pos:start="117:27" pos:end="117:30"><name pos:start="117:27" pos:end="117:30">NULL</name></expr></argument>, <argument pos:start="117:33" pos:end="117:35"><expr pos:start="117:33" pos:end="117:35"><name pos:start="117:33" pos:end="117:35">fwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="119:5" pos:end="119:11">return;</return>



 <label pos:start="123:2" pos:end="123:13"><name pos:start="123:2" pos:end="123:12">fail_syntax</name>:</label>

    <expr_stmt pos:start="125:5" pos:end="125:74"><expr pos:start="125:5" pos:end="125:73"><call pos:start="125:5" pos:end="125:73"><name pos:start="125:5" pos:end="125:16">config_error</name><argument_list pos:start="125:17" pos:end="125:73">(<argument pos:start="125:18" pos:end="125:20"><expr pos:start="125:18" pos:end="125:20"><name pos:start="125:18" pos:end="125:20">mon</name></expr></argument>, <argument pos:start="125:23" pos:end="125:60"><expr pos:start="125:23" pos:end="125:60"><literal type="string" pos:start="125:23" pos:end="125:60">"invalid guest forwarding rule '%s'\n"</literal></expr></argument>, <argument pos:start="125:63" pos:end="125:72"><expr pos:start="125:63" pos:end="125:72"><name pos:start="125:63" pos:end="125:72">config_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
