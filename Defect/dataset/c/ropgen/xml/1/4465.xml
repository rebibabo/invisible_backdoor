<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4465.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:31">run_opencl_bench</name><parameter_list pos:start="1:32" pos:end="1:68">(<parameter pos:start="1:33" pos:end="1:67"><decl pos:start="1:33" pos:end="1:67"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:51">AVOpenCLExternalEnv</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:67">ext_opencl_env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:15">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">arg</name> <init pos:start="5:16" pos:end="5:18">= <expr pos:start="5:18" pos:end="5:18"><literal type="number" pos:start="5:18" pos:end="5:18">0</literal></expr></init></decl>, <decl pos:start="5:21" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:21" pos:end="5:25">width</name> <init pos:start="5:27" pos:end="5:32">= <expr pos:start="5:29" pos:end="5:32"><literal type="number" pos:start="5:29" pos:end="5:32">1920</literal></expr></init></decl>, <decl pos:start="5:35" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:35" pos:end="5:40">height</name> <init pos:start="5:42" pos:end="5:47">= <expr pos:start="5:44" pos:end="5:47"><literal type="number" pos:start="5:44" pos:end="5:47">1088</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:17">start</name></decl>, <decl pos:start="7:20" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:20" pos:end="7:22">ret</name> <init pos:start="7:24" pos:end="7:26">= <expr pos:start="7:26" pos:end="7:26"><literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">cl_int</name></type> <name pos:start="9:12" pos:end="9:17">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:21">kernel_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:15">inbuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:7">int</name> <modifier pos:start="15:9" pos:end="15:9">*</modifier></type><name pos:start="15:10" pos:end="15:13">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:49"><decl pos:start="17:5" pos:end="17:48"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">buf_size</name> <init pos:start="17:18" pos:end="17:48">= <expr pos:start="17:20" pos:end="17:48"><name pos:start="17:20" pos:end="17:24">width</name> <operator pos:start="17:26" pos:end="17:26">*</operator> <name pos:start="17:28" pos:end="17:33">height</name> <operator pos:start="17:35" pos:end="17:35">*</operator> <sizeof pos:start="17:37" pos:end="17:48">sizeof<argument_list pos:start="17:43" pos:end="17:48">(<argument pos:start="17:44" pos:end="17:47"><expr pos:start="17:44" pos:end="17:47"><name pos:start="17:44" pos:end="17:47">char</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:43"><decl pos:start="19:5" pos:end="19:42"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">mask_size</name> <init pos:start="19:19" pos:end="19:42">= <expr pos:start="19:21" pos:end="19:42"><sizeof pos:start="19:21" pos:end="19:36">sizeof<argument_list pos:start="19:27" pos:end="19:36">(<argument pos:start="19:28" pos:end="19:35"><expr pos:start="19:28" pos:end="19:35"><name pos:start="19:28" pos:end="19:35">uint32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="19:38" pos:end="19:38">*</operator> <literal type="number" pos:start="19:40" pos:end="19:42">128</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:40"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">cl_mem</name></type> <name pos:start="23:12" pos:end="23:18">cl_mask</name></decl>, <decl pos:start="23:21" pos:end="23:28"><type ref="prev" pos:start="23:5" pos:end="23:10"/><name pos:start="23:21" pos:end="23:28">cl_inbuf</name></decl>, <decl pos:start="23:31" pos:end="23:39"><type ref="prev" pos:start="23:5" pos:end="23:10"/><name pos:start="23:31" pos:end="23:39">cl_outbuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:13">cl_kernel</name></type> <name pos:start="25:15" pos:end="25:20">kernel</name> <init pos:start="25:22" pos:end="25:27">= <expr pos:start="25:24" pos:end="25:27"><name pos:start="25:24" pos:end="25:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:14">cl_program</name></type> <name pos:start="27:16" pos:end="27:22">program</name> <init pos:start="27:24" pos:end="27:29">= <expr pos:start="27:26" pos:end="27:29"><name pos:start="27:26" pos:end="27:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:44"><decl pos:start="29:5" pos:end="29:43"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:10">size_t</name></type> <name pos:start="29:12" pos:end="29:32"><name pos:start="29:12" pos:end="29:29">local_work_size_2d</name><index pos:start="29:30" pos:end="29:32">[<expr pos:start="29:31" pos:end="29:31"><literal type="number" pos:start="29:31" pos:end="29:31">2</literal></expr>]</index></name> <init pos:start="29:34" pos:end="29:43">= <expr pos:start="29:36" pos:end="29:43"><block pos:start="29:36" pos:end="29:43">{<expr pos:start="29:37" pos:end="29:38"><literal type="number" pos:start="29:37" pos:end="29:38">16</literal></expr>, <expr pos:start="29:41" pos:end="29:42"><literal type="number" pos:start="29:41" pos:end="29:42">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:68"><decl pos:start="31:5" pos:end="31:67"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:10">size_t</name></type> <name pos:start="31:12" pos:end="31:33"><name pos:start="31:12" pos:end="31:30">global_work_size_2d</name><index pos:start="31:31" pos:end="31:33">[<expr pos:start="31:32" pos:end="31:32"><literal type="number" pos:start="31:32" pos:end="31:32">2</literal></expr>]</index></name> <init pos:start="31:35" pos:end="31:67">= <expr pos:start="31:37" pos:end="31:67"><block pos:start="31:37" pos:end="31:67">{<expr pos:start="31:38" pos:end="31:50"><operator pos:start="31:38" pos:end="31:38">(</operator><name pos:start="31:39" pos:end="31:44">size_t</name><operator pos:start="31:45" pos:end="31:45">)</operator><name pos:start="31:46" pos:end="31:50">width</name></expr>, <expr pos:start="31:53" pos:end="31:66"><operator pos:start="31:53" pos:end="31:53">(</operator><name pos:start="31:54" pos:end="31:59">size_t</name><operator pos:start="31:60" pos:end="31:60">)</operator><name pos:start="31:61" pos:end="31:66">height</name></expr>}</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:73">(<expr pos:start="35:9" pos:end="35:72"><operator pos:start="35:9" pos:end="35:9">!</operator><operator pos:start="35:10" pos:end="35:10">(</operator><name pos:start="35:11" pos:end="35:15">inbuf</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:37"><name pos:start="35:19" pos:end="35:27">av_malloc</name><argument_list pos:start="35:28" pos:end="35:37">(<argument pos:start="35:29" pos:end="35:36"><expr pos:start="35:29" pos:end="35:36"><name pos:start="35:29" pos:end="35:36">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="35:38" pos:end="35:38">)</operator> <operator pos:start="35:40" pos:end="35:41">||</operator> <operator pos:start="35:43" pos:end="35:43">!</operator><operator pos:start="35:44" pos:end="35:44">(</operator><name pos:start="35:45" pos:end="35:48">mask</name> <operator pos:start="35:50" pos:end="35:50">=</operator> <call pos:start="35:52" pos:end="35:71"><name pos:start="35:52" pos:end="35:60">av_malloc</name><argument_list pos:start="35:61" pos:end="35:71">(<argument pos:start="35:62" pos:end="35:70"><expr pos:start="35:62" pos:end="35:70"><name pos:start="35:62" pos:end="35:70">mask_size</name></expr></argument>)</argument_list></call><operator pos:start="35:72" pos:end="35:72">)</operator></expr>)</condition> <block pos:start="35:75" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:17">

        <expr_stmt pos:start="37:9" pos:end="37:54"><expr pos:start="37:9" pos:end="37:53"><call pos:start="37:9" pos:end="37:53"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:53">(<argument pos:start="37:16" pos:end="37:19"><expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">NULL</name></expr></argument>, <argument pos:start="37:22" pos:end="37:33"><expr pos:start="37:22" pos:end="37:33"><name pos:start="37:22" pos:end="37:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:36" pos:end="37:52"><expr pos:start="37:36" pos:end="37:52"><literal type="string" pos:start="37:36" pos:end="37:52">"Out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:29"><name pos:start="39:15" pos:end="39:21">AVERROR</name><argument_list pos:start="39:22" pos:end="39:29">(<argument pos:start="39:23" pos:end="39:28"><expr pos:start="39:23" pos:end="39:28"><name pos:start="39:23" pos:end="39:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><call pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:17">fill_rand_int</name><argument_list pos:start="45:18" pos:end="45:42">(<argument pos:start="45:19" pos:end="45:29"><expr pos:start="45:19" pos:end="45:29"><operator pos:start="45:19" pos:end="45:19">(</operator><name pos:start="45:20" pos:end="45:22">int</name><operator pos:start="45:23" pos:end="45:23">*</operator><operator pos:start="45:24" pos:end="45:24">)</operator><name pos:start="45:25" pos:end="45:29">inbuf</name></expr></argument>, <argument pos:start="45:32" pos:end="45:41"><expr pos:start="45:32" pos:end="45:41"><name pos:start="45:32" pos:end="45:39">buf_size</name><operator pos:start="45:40" pos:end="45:40">/</operator><literal type="number" pos:start="45:41" pos:end="45:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><call pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:17">fill_rand_int</name><argument_list pos:start="47:18" pos:end="47:36">(<argument pos:start="47:19" pos:end="47:22"><expr pos:start="47:19" pos:end="47:22"><name pos:start="47:19" pos:end="47:22">mask</name></expr></argument>, <argument pos:start="47:25" pos:end="47:35"><expr pos:start="47:25" pos:end="47:35"><name pos:start="47:25" pos:end="47:33">mask_size</name><operator pos:start="47:34" pos:end="47:34">/</operator><literal type="number" pos:start="47:35" pos:end="47:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><call pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:13">CREATEBUF</name><argument_list pos:start="51:14" pos:end="51:51">(<argument pos:start="51:15" pos:end="51:21"><expr pos:start="51:15" pos:end="51:21"><name pos:start="51:15" pos:end="51:21">cl_mask</name></expr></argument>, <argument pos:start="51:24" pos:end="51:39"><expr pos:start="51:24" pos:end="51:39"><name pos:start="51:24" pos:end="51:39">CL_MEM_READ_ONLY</name></expr></argument>, <argument pos:start="51:42" pos:end="51:50"><expr pos:start="51:42" pos:end="51:50"><name pos:start="51:42" pos:end="51:50">mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:52"><expr pos:start="53:5" pos:end="53:51"><call pos:start="53:5" pos:end="53:51"><name pos:start="53:5" pos:end="53:13">CREATEBUF</name><argument_list pos:start="53:14" pos:end="53:51">(<argument pos:start="53:15" pos:end="53:22"><expr pos:start="53:15" pos:end="53:22"><name pos:start="53:15" pos:end="53:22">cl_inbuf</name></expr></argument>, <argument pos:start="53:25" pos:end="53:40"><expr pos:start="53:25" pos:end="53:40"><name pos:start="53:25" pos:end="53:40">CL_MEM_READ_ONLY</name></expr></argument>, <argument pos:start="53:43" pos:end="53:50"><expr pos:start="53:43" pos:end="53:50"><name pos:start="53:43" pos:end="53:50">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:54"><expr pos:start="55:5" pos:end="55:53"><call pos:start="55:5" pos:end="55:53"><name pos:start="55:5" pos:end="55:13">CREATEBUF</name><argument_list pos:start="55:14" pos:end="55:53">(<argument pos:start="55:15" pos:end="55:23"><expr pos:start="55:15" pos:end="55:23"><name pos:start="55:15" pos:end="55:23">cl_outbuf</name></expr></argument>, <argument pos:start="55:26" pos:end="55:42"><expr pos:start="55:26" pos:end="55:42"><name pos:start="55:26" pos:end="55:42">CL_MEM_READ_WRITE</name></expr></argument>, <argument pos:start="55:45" pos:end="55:52"><expr pos:start="55:45" pos:end="55:52"><name pos:start="55:45" pos:end="55:52">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:42"><expr pos:start="59:5" pos:end="59:41"><name pos:start="59:5" pos:end="59:14">kernel_len</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <call pos:start="59:18" pos:end="59:41"><name pos:start="59:18" pos:end="59:23">strlen</name><argument_list pos:start="59:24" pos:end="59:41">(<argument pos:start="59:25" pos:end="59:40"><expr pos:start="59:25" pos:end="59:40"><name pos:start="59:25" pos:end="59:40">ocl_bench_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:62"><expr pos:start="61:5" pos:end="63:61"><name pos:start="61:5" pos:end="61:11">program</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="63:61"><name pos:start="61:15" pos:end="61:39">clCreateProgramWithSource</name><argument_list pos:start="61:40" pos:end="63:61">(<argument pos:start="61:41" pos:end="61:63"><expr pos:start="61:41" pos:end="61:63"><name pos:start="61:41" pos:end="61:63"><name pos:start="61:41" pos:end="61:54">ext_opencl_env</name><operator pos:start="61:55" pos:end="61:56">-&gt;</operator><name pos:start="61:57" pos:end="61:63">context</name></name></expr></argument>, <argument pos:start="61:66" pos:end="61:66"><expr pos:start="61:66" pos:end="61:66"><literal type="number" pos:start="61:66" pos:end="61:66">1</literal></expr></argument>, <argument pos:start="61:69" pos:end="61:85"><expr pos:start="61:69" pos:end="61:85"><operator pos:start="61:69" pos:end="61:69">&amp;</operator><name pos:start="61:70" pos:end="61:85">ocl_bench_source</name></expr></argument>,

                                        <argument pos:start="63:41" pos:end="63:51"><expr pos:start="63:41" pos:end="63:51"><operator pos:start="63:41" pos:end="63:41">&amp;</operator><name pos:start="63:42" pos:end="63:51">kernel_len</name></expr></argument>, <argument pos:start="63:54" pos:end="63:60"><expr pos:start="63:54" pos:end="63:60"><operator pos:start="63:54" pos:end="63:54">&amp;</operator><name pos:start="63:55" pos:end="63:60">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:41">(<expr pos:start="65:9" pos:end="65:40"><name pos:start="65:9" pos:end="65:14">status</name> <operator pos:start="65:16" pos:end="65:17">!=</operator> <name pos:start="65:19" pos:end="65:28">CL_SUCCESS</name> <operator pos:start="65:30" pos:end="65:31">||</operator> <operator pos:start="65:33" pos:end="65:33">!</operator><name pos:start="65:34" pos:end="65:40">program</name></expr>)</condition> <block pos:start="65:43" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:17">

        <expr_stmt pos:start="67:9" pos:end="67:82"><expr pos:start="67:9" pos:end="67:81"><call pos:start="67:9" pos:end="67:81"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="67:81">(<argument pos:start="67:16" pos:end="67:19"><expr pos:start="67:16" pos:end="67:19"><name pos:start="67:16" pos:end="67:19">NULL</name></expr></argument>, <argument pos:start="67:22" pos:end="67:33"><expr pos:start="67:22" pos:end="67:33"><name pos:start="67:22" pos:end="67:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:36" pos:end="67:80"><expr pos:start="67:36" pos:end="67:80"><literal type="string" pos:start="67:36" pos:end="67:80">"OpenCL unable to create benchmark program\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:31"><expr pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:30">AVERROR_EXTERNAL</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:17">goto <name pos:start="71:14" pos:end="71:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:88"><expr pos:start="75:5" pos:end="75:87"><name pos:start="75:5" pos:end="75:10">status</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <call pos:start="75:14" pos:end="75:87"><name pos:start="75:14" pos:end="75:27">clBuildProgram</name><argument_list pos:start="75:28" pos:end="75:87">(<argument pos:start="75:29" pos:end="75:35"><expr pos:start="75:29" pos:end="75:35"><name pos:start="75:29" pos:end="75:35">program</name></expr></argument>, <argument pos:start="75:38" pos:end="75:38"><expr pos:start="75:38" pos:end="75:38"><literal type="number" pos:start="75:38" pos:end="75:38">1</literal></expr></argument>, <argument pos:start="75:41" pos:end="75:68"><expr pos:start="75:41" pos:end="75:68"><operator pos:start="75:41" pos:end="75:41">&amp;</operator><operator pos:start="75:42" pos:end="75:42">(</operator><name pos:start="75:43" pos:end="75:67"><name pos:start="75:43" pos:end="75:56">ext_opencl_env</name><operator pos:start="75:57" pos:end="75:58">-&gt;</operator><name pos:start="75:59" pos:end="75:67">device_id</name></name><operator pos:start="75:68" pos:end="75:68">)</operator></expr></argument>, <argument pos:start="75:71" pos:end="75:74"><expr pos:start="75:71" pos:end="75:74"><name pos:start="75:71" pos:end="75:74">NULL</name></expr></argument>, <argument pos:start="75:77" pos:end="75:80"><expr pos:start="75:77" pos:end="75:80"><name pos:start="75:77" pos:end="75:80">NULL</name></expr></argument>, <argument pos:start="75:83" pos:end="75:86"><expr pos:start="75:83" pos:end="75:86"><name pos:start="75:83" pos:end="75:86">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="85:5"><if pos:start="77:5" pos:end="85:5">if <condition pos:start="77:8" pos:end="77:29">(<expr pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:14">status</name> <operator pos:start="77:16" pos:end="77:17">!=</operator> <name pos:start="77:19" pos:end="77:28">CL_SUCCESS</name></expr>)</condition> <block pos:start="77:31" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:17">

        <expr_stmt pos:start="79:9" pos:end="79:81"><expr pos:start="79:9" pos:end="79:80"><call pos:start="79:9" pos:end="79:80"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:80">(<argument pos:start="79:16" pos:end="79:19"><expr pos:start="79:16" pos:end="79:19"><name pos:start="79:16" pos:end="79:19">NULL</name></expr></argument>, <argument pos:start="79:22" pos:end="79:33"><expr pos:start="79:22" pos:end="79:33"><name pos:start="79:22" pos:end="79:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:36" pos:end="79:79"><expr pos:start="79:36" pos:end="79:79"><literal type="string" pos:start="79:36" pos:end="79:79">"OpenCL unable to build benchmark program\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:31"><expr pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:30">AVERROR_EXTERNAL</name></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:63"><expr pos:start="87:5" pos:end="87:62"><name pos:start="87:5" pos:end="87:10">kernel</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <call pos:start="87:14" pos:end="87:62"><name pos:start="87:14" pos:end="87:27">clCreateKernel</name><argument_list pos:start="87:28" pos:end="87:62">(<argument pos:start="87:29" pos:end="87:35"><expr pos:start="87:29" pos:end="87:35"><name pos:start="87:29" pos:end="87:35">program</name></expr></argument>, <argument pos:start="87:38" pos:end="87:52"><expr pos:start="87:38" pos:end="87:52"><literal type="string" pos:start="87:38" pos:end="87:52">"unsharp_bench"</literal></expr></argument>, <argument pos:start="87:55" pos:end="87:61"><expr pos:start="87:55" pos:end="87:61"><operator pos:start="87:55" pos:end="87:55">&amp;</operator><name pos:start="87:56" pos:end="87:61">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:29">(<expr pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:14">status</name> <operator pos:start="89:16" pos:end="89:17">!=</operator> <name pos:start="89:19" pos:end="89:28">CL_SUCCESS</name></expr>)</condition> <block pos:start="89:31" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:17">

        <expr_stmt pos:start="91:9" pos:end="91:81"><expr pos:start="91:9" pos:end="91:80"><call pos:start="91:9" pos:end="91:80"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="91:80">(<argument pos:start="91:16" pos:end="91:19"><expr pos:start="91:16" pos:end="91:19"><name pos:start="91:16" pos:end="91:19">NULL</name></expr></argument>, <argument pos:start="91:22" pos:end="91:33"><expr pos:start="91:22" pos:end="91:33"><name pos:start="91:22" pos:end="91:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:36" pos:end="91:79"><expr pos:start="91:36" pos:end="91:79"><literal type="string" pos:start="91:36" pos:end="91:79">"OpenCL unable to create benchmark kernel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:31"><expr pos:start="93:9" pos:end="93:30"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <name pos:start="93:15" pos:end="93:30">AVERROR_EXTERNAL</name></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:17">goto <name pos:start="95:14" pos:end="95:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="103:45"><expr pos:start="101:5" pos:end="103:44"><call pos:start="101:5" pos:end="103:44"><name pos:start="101:5" pos:end="101:12">OCLCHECK</name><argument_list pos:start="101:13" pos:end="103:44">(<argument pos:start="101:14" pos:end="101:33"><expr pos:start="101:14" pos:end="101:33"><name pos:start="101:14" pos:end="101:33">clEnqueueWriteBuffer</name></expr></argument>, <argument pos:start="101:36" pos:end="101:64"><expr pos:start="101:36" pos:end="101:64"><name pos:start="101:36" pos:end="101:64"><name pos:start="101:36" pos:end="101:49">ext_opencl_env</name><operator pos:start="101:50" pos:end="101:51">-&gt;</operator><name pos:start="101:52" pos:end="101:64">command_queue</name></name></expr></argument>, <argument pos:start="101:67" pos:end="101:74"><expr pos:start="101:67" pos:end="101:74"><name pos:start="101:67" pos:end="101:74">cl_inbuf</name></expr></argument>, <argument pos:start="101:77" pos:end="101:83"><expr pos:start="101:77" pos:end="101:83"><name pos:start="101:77" pos:end="101:83">CL_TRUE</name></expr></argument>, <argument pos:start="101:86" pos:end="101:86"><expr pos:start="101:86" pos:end="101:86"><literal type="number" pos:start="101:86" pos:end="101:86">0</literal></expr></argument>,

             <argument pos:start="103:14" pos:end="103:21"><expr pos:start="103:14" pos:end="103:21"><name pos:start="103:14" pos:end="103:21">buf_size</name></expr></argument>, <argument pos:start="103:24" pos:end="103:28"><expr pos:start="103:24" pos:end="103:28"><name pos:start="103:24" pos:end="103:28">inbuf</name></expr></argument>, <argument pos:start="103:31" pos:end="103:31"><expr pos:start="103:31" pos:end="103:31"><literal type="number" pos:start="103:31" pos:end="103:31">0</literal></expr></argument>, <argument pos:start="103:34" pos:end="103:37"><expr pos:start="103:34" pos:end="103:37"><name pos:start="103:34" pos:end="103:37">NULL</name></expr></argument>, <argument pos:start="103:40" pos:end="103:43"><expr pos:start="103:40" pos:end="103:43"><name pos:start="103:40" pos:end="103:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="107:45"><expr pos:start="105:5" pos:end="107:44"><call pos:start="105:5" pos:end="107:44"><name pos:start="105:5" pos:end="105:12">OCLCHECK</name><argument_list pos:start="105:13" pos:end="107:44">(<argument pos:start="105:14" pos:end="105:33"><expr pos:start="105:14" pos:end="105:33"><name pos:start="105:14" pos:end="105:33">clEnqueueWriteBuffer</name></expr></argument>, <argument pos:start="105:36" pos:end="105:64"><expr pos:start="105:36" pos:end="105:64"><name pos:start="105:36" pos:end="105:64"><name pos:start="105:36" pos:end="105:49">ext_opencl_env</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:64">command_queue</name></name></expr></argument>, <argument pos:start="105:67" pos:end="105:73"><expr pos:start="105:67" pos:end="105:73"><name pos:start="105:67" pos:end="105:73">cl_mask</name></expr></argument>, <argument pos:start="105:76" pos:end="105:82"><expr pos:start="105:76" pos:end="105:82"><name pos:start="105:76" pos:end="105:82">CL_TRUE</name></expr></argument>, <argument pos:start="105:85" pos:end="105:85"><expr pos:start="105:85" pos:end="105:85"><literal type="number" pos:start="105:85" pos:end="105:85">0</literal></expr></argument>,

             <argument pos:start="107:14" pos:end="107:22"><expr pos:start="107:14" pos:end="107:22"><name pos:start="107:14" pos:end="107:22">mask_size</name></expr></argument>, <argument pos:start="107:25" pos:end="107:28"><expr pos:start="107:25" pos:end="107:28"><name pos:start="107:25" pos:end="107:28">mask</name></expr></argument>, <argument pos:start="107:31" pos:end="107:31"><expr pos:start="107:31" pos:end="107:31"><literal type="number" pos:start="107:31" pos:end="107:31">0</literal></expr></argument>, <argument pos:start="107:34" pos:end="107:37"><expr pos:start="107:34" pos:end="107:37"><name pos:start="107:34" pos:end="107:37">NULL</name></expr></argument>, <argument pos:start="107:40" pos:end="107:43"><expr pos:start="107:40" pos:end="107:43"><name pos:start="107:40" pos:end="107:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:71"><expr pos:start="109:5" pos:end="109:70"><call pos:start="109:5" pos:end="109:70"><name pos:start="109:5" pos:end="109:12">OCLCHECK</name><argument_list pos:start="109:13" pos:end="109:70">(<argument pos:start="109:14" pos:end="109:27"><expr pos:start="109:14" pos:end="109:27"><name pos:start="109:14" pos:end="109:27">clSetKernelArg</name></expr></argument>, <argument pos:start="109:30" pos:end="109:35"><expr pos:start="109:30" pos:end="109:35"><name pos:start="109:30" pos:end="109:35">kernel</name></expr></argument>, <argument pos:start="109:38" pos:end="109:42"><expr pos:start="109:38" pos:end="109:42"><name pos:start="109:38" pos:end="109:40">arg</name><operator pos:start="109:41" pos:end="109:42">++</operator></expr></argument>, <argument pos:start="109:45" pos:end="109:58"><expr pos:start="109:45" pos:end="109:58"><sizeof pos:start="109:45" pos:end="109:58">sizeof<argument_list pos:start="109:51" pos:end="109:58">(<argument pos:start="109:52" pos:end="109:57"><expr pos:start="109:52" pos:end="109:57"><name pos:start="109:52" pos:end="109:57">cl_mem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="109:61" pos:end="109:69"><expr pos:start="109:61" pos:end="109:69"><operator pos:start="109:61" pos:end="109:61">&amp;</operator><name pos:start="109:62" pos:end="109:69">cl_inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:72"><expr pos:start="111:5" pos:end="111:71"><call pos:start="111:5" pos:end="111:71"><name pos:start="111:5" pos:end="111:12">OCLCHECK</name><argument_list pos:start="111:13" pos:end="111:71">(<argument pos:start="111:14" pos:end="111:27"><expr pos:start="111:14" pos:end="111:27"><name pos:start="111:14" pos:end="111:27">clSetKernelArg</name></expr></argument>, <argument pos:start="111:30" pos:end="111:35"><expr pos:start="111:30" pos:end="111:35"><name pos:start="111:30" pos:end="111:35">kernel</name></expr></argument>, <argument pos:start="111:38" pos:end="111:42"><expr pos:start="111:38" pos:end="111:42"><name pos:start="111:38" pos:end="111:40">arg</name><operator pos:start="111:41" pos:end="111:42">++</operator></expr></argument>, <argument pos:start="111:45" pos:end="111:58"><expr pos:start="111:45" pos:end="111:58"><sizeof pos:start="111:45" pos:end="111:58">sizeof<argument_list pos:start="111:51" pos:end="111:58">(<argument pos:start="111:52" pos:end="111:57"><expr pos:start="111:52" pos:end="111:57"><name pos:start="111:52" pos:end="111:57">cl_mem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="111:61" pos:end="111:70"><expr pos:start="111:61" pos:end="111:70"><operator pos:start="111:61" pos:end="111:61">&amp;</operator><name pos:start="111:62" pos:end="111:70">cl_outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:70"><expr pos:start="113:5" pos:end="113:69"><call pos:start="113:5" pos:end="113:69"><name pos:start="113:5" pos:end="113:12">OCLCHECK</name><argument_list pos:start="113:13" pos:end="113:69">(<argument pos:start="113:14" pos:end="113:27"><expr pos:start="113:14" pos:end="113:27"><name pos:start="113:14" pos:end="113:27">clSetKernelArg</name></expr></argument>, <argument pos:start="113:30" pos:end="113:35"><expr pos:start="113:30" pos:end="113:35"><name pos:start="113:30" pos:end="113:35">kernel</name></expr></argument>, <argument pos:start="113:38" pos:end="113:42"><expr pos:start="113:38" pos:end="113:42"><name pos:start="113:38" pos:end="113:40">arg</name><operator pos:start="113:41" pos:end="113:42">++</operator></expr></argument>, <argument pos:start="113:45" pos:end="113:58"><expr pos:start="113:45" pos:end="113:58"><sizeof pos:start="113:45" pos:end="113:58">sizeof<argument_list pos:start="113:51" pos:end="113:58">(<argument pos:start="113:52" pos:end="113:57"><expr pos:start="113:52" pos:end="113:57"><name pos:start="113:52" pos:end="113:57">cl_mem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="113:61" pos:end="113:68"><expr pos:start="113:61" pos:end="113:68"><operator pos:start="113:61" pos:end="113:61">&amp;</operator><name pos:start="113:62" pos:end="113:68">cl_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:68"><expr pos:start="115:5" pos:end="115:67"><call pos:start="115:5" pos:end="115:67"><name pos:start="115:5" pos:end="115:12">OCLCHECK</name><argument_list pos:start="115:13" pos:end="115:67">(<argument pos:start="115:14" pos:end="115:27"><expr pos:start="115:14" pos:end="115:27"><name pos:start="115:14" pos:end="115:27">clSetKernelArg</name></expr></argument>, <argument pos:start="115:30" pos:end="115:35"><expr pos:start="115:30" pos:end="115:35"><name pos:start="115:30" pos:end="115:35">kernel</name></expr></argument>, <argument pos:start="115:38" pos:end="115:42"><expr pos:start="115:38" pos:end="115:42"><name pos:start="115:38" pos:end="115:40">arg</name><operator pos:start="115:41" pos:end="115:42">++</operator></expr></argument>, <argument pos:start="115:45" pos:end="115:58"><expr pos:start="115:45" pos:end="115:58"><sizeof pos:start="115:45" pos:end="115:58">sizeof<argument_list pos:start="115:51" pos:end="115:58">(<argument pos:start="115:52" pos:end="115:57"><expr pos:start="115:52" pos:end="115:57"><name pos:start="115:52" pos:end="115:57">cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="115:61" pos:end="115:66"><expr pos:start="115:61" pos:end="115:66"><operator pos:start="115:61" pos:end="115:61">&amp;</operator><name pos:start="115:62" pos:end="115:66">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:69"><expr pos:start="117:5" pos:end="117:68"><call pos:start="117:5" pos:end="117:68"><name pos:start="117:5" pos:end="117:12">OCLCHECK</name><argument_list pos:start="117:13" pos:end="117:68">(<argument pos:start="117:14" pos:end="117:27"><expr pos:start="117:14" pos:end="117:27"><name pos:start="117:14" pos:end="117:27">clSetKernelArg</name></expr></argument>, <argument pos:start="117:30" pos:end="117:35"><expr pos:start="117:30" pos:end="117:35"><name pos:start="117:30" pos:end="117:35">kernel</name></expr></argument>, <argument pos:start="117:38" pos:end="117:42"><expr pos:start="117:38" pos:end="117:42"><name pos:start="117:38" pos:end="117:40">arg</name><operator pos:start="117:41" pos:end="117:42">++</operator></expr></argument>, <argument pos:start="117:45" pos:end="117:58"><expr pos:start="117:45" pos:end="117:58"><sizeof pos:start="117:45" pos:end="117:58">sizeof<argument_list pos:start="117:51" pos:end="117:58">(<argument pos:start="117:52" pos:end="117:57"><expr pos:start="117:52" pos:end="117:57"><name pos:start="117:52" pos:end="117:57">cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="117:61" pos:end="117:67"><expr pos:start="117:61" pos:end="117:67"><operator pos:start="117:61" pos:end="117:61">&amp;</operator><name pos:start="117:62" pos:end="117:67">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:34"><expr pos:start="121:5" pos:end="121:33"><name pos:start="121:5" pos:end="121:9">start</name> <operator pos:start="121:11" pos:end="121:11">=</operator> <call pos:start="121:13" pos:end="121:33"><name pos:start="121:13" pos:end="121:31">av_gettime_relative</name><argument_list pos:start="121:32" pos:end="121:33">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="123:5" pos:end="127:73">for <control pos:start="123:9" pos:end="123:40">(<init pos:start="123:10" pos:end="123:15"><expr pos:start="123:10" pos:end="123:14"><name pos:start="123:10" pos:end="123:10">i</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <literal type="number" pos:start="123:14" pos:end="123:14">0</literal></expr>;</init> <condition pos:start="123:17" pos:end="123:35"><expr pos:start="123:17" pos:end="123:34"><name pos:start="123:17" pos:end="123:17">i</name> <operator pos:start="123:19" pos:end="123:19">&lt;</operator> <name pos:start="123:21" pos:end="123:34">OPENCL_NB_ITER</name></expr>;</condition> <incr pos:start="123:37" pos:end="123:39"><expr pos:start="123:37" pos:end="123:39"><name pos:start="123:37" pos:end="123:37">i</name><operator pos:start="123:38" pos:end="123:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="125:9" pos:end="127:73"><block_content pos:start="125:9" pos:end="127:73">

        <expr_stmt pos:start="125:9" pos:end="127:73"><expr pos:start="125:9" pos:end="127:72"><call pos:start="125:9" pos:end="127:72"><name pos:start="125:9" pos:end="125:16">OCLCHECK</name><argument_list pos:start="125:17" pos:end="127:72">(<argument pos:start="125:18" pos:end="125:39"><expr pos:start="125:18" pos:end="125:39"><name pos:start="125:18" pos:end="125:39">clEnqueueNDRangeKernel</name></expr></argument>, <argument pos:start="125:42" pos:end="125:70"><expr pos:start="125:42" pos:end="125:70"><name pos:start="125:42" pos:end="125:70"><name pos:start="125:42" pos:end="125:55">ext_opencl_env</name><operator pos:start="125:56" pos:end="125:57">-&gt;</operator><name pos:start="125:58" pos:end="125:70">command_queue</name></name></expr></argument>, <argument pos:start="125:73" pos:end="125:78"><expr pos:start="125:73" pos:end="125:78"><name pos:start="125:73" pos:end="125:78">kernel</name></expr></argument>, <argument pos:start="125:81" pos:end="125:81"><expr pos:start="125:81" pos:end="125:81"><literal type="number" pos:start="125:81" pos:end="125:81">2</literal></expr></argument>, <argument pos:start="125:84" pos:end="125:87"><expr pos:start="125:84" pos:end="125:87"><name pos:start="125:84" pos:end="125:87">NULL</name></expr></argument>,

                 <argument pos:start="127:18" pos:end="127:36"><expr pos:start="127:18" pos:end="127:36"><name pos:start="127:18" pos:end="127:36">global_work_size_2d</name></expr></argument>, <argument pos:start="127:39" pos:end="127:56"><expr pos:start="127:39" pos:end="127:56"><name pos:start="127:39" pos:end="127:56">local_work_size_2d</name></expr></argument>, <argument pos:start="127:59" pos:end="127:59"><expr pos:start="127:59" pos:end="127:59"><literal type="number" pos:start="127:59" pos:end="127:59">0</literal></expr></argument>, <argument pos:start="127:62" pos:end="127:65"><expr pos:start="127:62" pos:end="127:65"><name pos:start="127:62" pos:end="127:65">NULL</name></expr></argument>, <argument pos:start="127:68" pos:end="127:71"><expr pos:start="127:68" pos:end="127:71"><name pos:start="127:68" pos:end="127:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="129:5" pos:end="129:44"><expr pos:start="129:5" pos:end="129:43"><call pos:start="129:5" pos:end="129:43"><name pos:start="129:5" pos:end="129:12">clFinish</name><argument_list pos:start="129:13" pos:end="129:43">(<argument pos:start="129:14" pos:end="129:42"><expr pos:start="129:14" pos:end="129:42"><name pos:start="129:14" pos:end="129:42"><name pos:start="129:14" pos:end="129:27">ext_opencl_env</name><operator pos:start="129:28" pos:end="129:29">-&gt;</operator><name pos:start="129:30" pos:end="129:42">command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:57"><expr pos:start="131:5" pos:end="131:56"><name pos:start="131:5" pos:end="131:7">ret</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <operator pos:start="131:11" pos:end="131:11">(</operator><call pos:start="131:12" pos:end="131:32"><name pos:start="131:12" pos:end="131:30">av_gettime_relative</name><argument_list pos:start="131:31" pos:end="131:32">()</argument_list></call> <operator pos:start="131:34" pos:end="131:34">-</operator> <name pos:start="131:36" pos:end="131:40">start</name><operator pos:start="131:41" pos:end="131:41">)</operator><operator pos:start="131:42" pos:end="131:42">/</operator><name pos:start="131:43" pos:end="131:56">OPENCL_NB_ITER</name></expr>;</expr_stmt>

<label pos:start="133:1" pos:end="133:4"><name pos:start="133:1" pos:end="133:3">end</name>:</label>

    <if_stmt pos:start="135:5" pos:end="137:32"><if pos:start="135:5" pos:end="137:32">if <condition pos:start="135:8" pos:end="135:15">(<expr pos:start="135:9" pos:end="135:14"><name pos:start="135:9" pos:end="135:14">kernel</name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:32"><block_content pos:start="137:9" pos:end="137:32">

        <expr_stmt pos:start="137:9" pos:end="137:32"><expr pos:start="137:9" pos:end="137:31"><call pos:start="137:9" pos:end="137:31"><name pos:start="137:9" pos:end="137:23">clReleaseKernel</name><argument_list pos:start="137:24" pos:end="137:31">(<argument pos:start="137:25" pos:end="137:30"><expr pos:start="137:25" pos:end="137:30"><name pos:start="137:25" pos:end="137:30">kernel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="139:5" pos:end="141:34"><if pos:start="139:5" pos:end="141:34">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:15">program</name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:34"><block_content pos:start="141:9" pos:end="141:34">

        <expr_stmt pos:start="141:9" pos:end="141:34"><expr pos:start="141:9" pos:end="141:33"><call pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:24">clReleaseProgram</name><argument_list pos:start="141:25" pos:end="141:33">(<argument pos:start="141:26" pos:end="141:32"><expr pos:start="141:26" pos:end="141:32"><name pos:start="141:26" pos:end="141:32">program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="143:5" pos:end="145:37"><if pos:start="143:5" pos:end="145:37">if <condition pos:start="143:8" pos:end="143:17">(<expr pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:16">cl_inbuf</name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:37"><block_content pos:start="145:9" pos:end="145:37">

        <expr_stmt pos:start="145:9" pos:end="145:37"><expr pos:start="145:9" pos:end="145:36"><call pos:start="145:9" pos:end="145:36"><name pos:start="145:9" pos:end="145:26">clReleaseMemObject</name><argument_list pos:start="145:27" pos:end="145:36">(<argument pos:start="145:28" pos:end="145:35"><expr pos:start="145:28" pos:end="145:35"><name pos:start="145:28" pos:end="145:35">cl_inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="147:5" pos:end="149:38"><if pos:start="147:5" pos:end="149:38">if <condition pos:start="147:8" pos:end="147:18">(<expr pos:start="147:9" pos:end="147:17"><name pos:start="147:9" pos:end="147:17">cl_outbuf</name></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:38"><block_content pos:start="149:9" pos:end="149:38">

        <expr_stmt pos:start="149:9" pos:end="149:38"><expr pos:start="149:9" pos:end="149:37"><call pos:start="149:9" pos:end="149:37"><name pos:start="149:9" pos:end="149:26">clReleaseMemObject</name><argument_list pos:start="149:27" pos:end="149:37">(<argument pos:start="149:28" pos:end="149:36"><expr pos:start="149:28" pos:end="149:36"><name pos:start="149:28" pos:end="149:36">cl_outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="151:5" pos:end="153:36"><if pos:start="151:5" pos:end="153:36">if <condition pos:start="151:8" pos:end="151:16">(<expr pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:15">cl_mask</name></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:36"><block_content pos:start="153:9" pos:end="153:36">

        <expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><call pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:26">clReleaseMemObject</name><argument_list pos:start="153:27" pos:end="153:35">(<argument pos:start="153:28" pos:end="153:34"><expr pos:start="153:28" pos:end="153:34"><name pos:start="153:28" pos:end="153:34">cl_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:19"><expr pos:start="155:5" pos:end="155:18"><call pos:start="155:5" pos:end="155:18"><name pos:start="155:5" pos:end="155:11">av_free</name><argument_list pos:start="155:12" pos:end="155:18">(<argument pos:start="155:13" pos:end="155:17"><expr pos:start="155:13" pos:end="155:17"><name pos:start="155:13" pos:end="155:17">inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:18"><expr pos:start="157:5" pos:end="157:17"><call pos:start="157:5" pos:end="157:17"><name pos:start="157:5" pos:end="157:11">av_free</name><argument_list pos:start="157:12" pos:end="157:17">(<argument pos:start="157:13" pos:end="157:16"><expr pos:start="157:13" pos:end="157:16"><name pos:start="157:13" pos:end="157:16">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="159:5" pos:end="159:15">return <expr pos:start="159:12" pos:end="159:14"><name pos:start="159:12" pos:end="159:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
