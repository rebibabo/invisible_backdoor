<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19711.c" pos:tabs="8"><function pos:start="1:1" pos:end="44:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">dnxhd_encode_picture</name><parameter_list pos:start="1:32" pos:end="1:100">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:73"><decl pos:start="1:56" pos:end="1:73"><type pos:start="1:56" pos:end="1:73"><name pos:start="1:56" pos:end="1:63">unsigned</name> <name pos:start="1:65" pos:end="1:68">char</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">buf</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:87"><decl pos:start="1:76" pos:end="1:87"><type pos:start="1:76" pos:end="1:87"><name pos:start="1:76" pos:end="1:78">int</name></type> <name pos:start="1:80" pos:end="1:87">buf_size</name></decl></parameter>, <parameter pos:start="1:90" pos:end="1:99"><decl pos:start="1:90" pos:end="1:99"><type pos:start="1:90" pos:end="1:99"><name pos:start="1:90" pos:end="1:93">void</name> <modifier pos:start="1:95" pos:end="1:95">*</modifier></type><name pos:start="1:96" pos:end="1:99">data</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="44:1">{<block_content pos:start="3:5" pos:end="43:38">
    <decl_stmt pos:start="3:5" pos:end="3:44"><decl pos:start="3:5" pos:end="3:43"><type pos:start="3:5" pos:end="3:21"><name pos:start="3:5" pos:end="3:19">DNXHDEncContext</name> <modifier pos:start="3:21" pos:end="3:21">*</modifier></type><name pos:start="3:22" pos:end="3:24">ctx</name> <init pos:start="3:26" pos:end="3:43">= <expr pos:start="3:28" pos:end="3:43"><name pos:start="3:28" pos:end="3:43"><name pos:start="3:28" pos:end="3:32">avctx</name><operator pos:start="3:33" pos:end="3:34">-&gt;</operator><name pos:start="3:35" pos:end="3:43">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:24"><decl pos:start="4:5" pos:end="4:23"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:19">first_field</name> <init pos:start="4:21" pos:end="4:23">= <expr pos:start="4:23" pos:end="4:23"><literal type="number" pos:start="4:23" pos:end="4:23">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">offset</name></decl>, <decl pos:start="5:17" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:17">i</name></decl>, <decl pos:start="5:20" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:22">ret</name></decl>;</decl_stmt>
    <if_stmt pos:start="6:5" pos:end="9:5"><if pos:start="6:5" pos:end="9:5">if <condition pos:start="6:8" pos:end="6:46">(<expr pos:start="6:9" pos:end="6:45"><name pos:start="6:9" pos:end="6:16">buf_size</name> <operator pos:start="6:18" pos:end="6:18">&lt;</operator> <name pos:start="6:20" pos:end="6:45"><name pos:start="6:20" pos:end="6:22">ctx</name><operator pos:start="6:23" pos:end="6:24">-&gt;</operator><name pos:start="6:25" pos:end="6:33">cid_table</name><operator pos:start="6:34" pos:end="6:35">-&gt;</operator><name pos:start="6:36" pos:end="6:45">frame_size</name></name></expr>)</condition> <block pos:start="6:48" pos:end="9:5">{<block_content pos:start="7:9" pos:end="8:18">
        <expr_stmt pos:start="7:9" pos:end="7:88"><expr pos:start="7:9" pos:end="7:87"><call pos:start="7:9" pos:end="7:87"><name pos:start="7:9" pos:end="7:14">av_log</name><argument_list pos:start="7:15" pos:end="7:87">(<argument pos:start="7:16" pos:end="7:20"><expr pos:start="7:16" pos:end="7:20"><name pos:start="7:16" pos:end="7:20">avctx</name></expr></argument>, <argument pos:start="7:23" pos:end="7:34"><expr pos:start="7:23" pos:end="7:34"><name pos:start="7:23" pos:end="7:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="7:37" pos:end="7:86"><expr pos:start="7:37" pos:end="7:86"><literal type="string" pos:start="7:37" pos:end="7:86">"output buffer is too small to compress picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="8:9" pos:end="8:18">return <expr pos:start="8:16" pos:end="8:17"><operator pos:start="8:16" pos:end="8:16">-</operator><literal type="number" pos:start="8:17" pos:end="8:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:34"><expr pos:start="10:5" pos:end="10:33"><call pos:start="10:5" pos:end="10:33"><name pos:start="10:5" pos:end="10:22">dnxhd_load_picture</name><argument_list pos:start="10:23" pos:end="10:33">(<argument pos:start="10:24" pos:end="10:26"><expr pos:start="10:24" pos:end="10:26"><name pos:start="10:24" pos:end="10:26">ctx</name></expr></argument>, <argument pos:start="10:29" pos:end="10:32"><expr pos:start="10:29" pos:end="10:32"><name pos:start="10:29" pos:end="10:32">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <label pos:start="11:2" pos:end="11:20"><name pos:start="11:2" pos:end="11:19">encode_coding_unit</name>:</label>
    <for pos:start="12:5" pos:end="16:5">for <control pos:start="12:9" pos:end="12:27">(<init pos:start="12:10" pos:end="12:15"><expr pos:start="12:10" pos:end="12:14"><name pos:start="12:10" pos:end="12:10">i</name> <operator pos:start="12:12" pos:end="12:12">=</operator> <literal type="number" pos:start="12:14" pos:end="12:14">0</literal></expr>;</init> <condition pos:start="12:17" pos:end="12:22"><expr pos:start="12:17" pos:end="12:21"><name pos:start="12:17" pos:end="12:17">i</name> <operator pos:start="12:19" pos:end="12:19">&lt;</operator> <literal type="number" pos:start="12:21" pos:end="12:21">3</literal></expr>;</condition> <incr pos:start="12:24" pos:end="12:26"><expr pos:start="12:24" pos:end="12:26"><name pos:start="12:24" pos:end="12:24">i</name><operator pos:start="12:25" pos:end="12:26">++</operator></expr></incr>)</control> <block pos:start="12:29" pos:end="16:5">{<block_content pos:start="13:9" pos:end="15:50">
        <expr_stmt pos:start="13:9" pos:end="13:41"><expr pos:start="13:9" pos:end="13:40"><name pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:11">ctx</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:16">src</name><index pos:start="13:17" pos:end="13:19">[<expr pos:start="13:18" pos:end="13:18"><name pos:start="13:18" pos:end="13:18">i</name></expr>]</index></name> <operator pos:start="13:21" pos:end="13:21">=</operator> <name pos:start="13:23" pos:end="13:40"><name pos:start="13:23" pos:end="13:25">ctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:32">frame</name><operator pos:start="13:33" pos:end="13:33">.</operator><name pos:start="13:34" pos:end="13:37">data</name><index pos:start="13:38" pos:end="13:40">[<expr pos:start="13:39" pos:end="13:39"><name pos:start="13:39" pos:end="13:39">i</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="14:9" pos:end="15:50"><if pos:start="14:9" pos:end="15:50">if <condition pos:start="14:12" pos:end="14:46">(<expr pos:start="14:13" pos:end="14:45"><name pos:start="14:13" pos:end="14:27"><name pos:start="14:13" pos:end="14:15">ctx</name><operator pos:start="14:16" pos:end="14:17">-&gt;</operator><name pos:start="14:18" pos:end="14:27">interlaced</name></name> <operator pos:start="14:29" pos:end="14:30">&amp;&amp;</operator> <name pos:start="14:32" pos:end="14:45"><name pos:start="14:32" pos:end="14:34">ctx</name><operator pos:start="14:35" pos:end="14:36">-&gt;</operator><name pos:start="14:37" pos:end="14:45">cur_field</name></name></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:50"><block_content pos:start="15:13" pos:end="15:50">
            <expr_stmt pos:start="15:13" pos:end="15:50"><expr pos:start="15:13" pos:end="15:49"><name pos:start="15:13" pos:end="15:23"><name pos:start="15:13" pos:end="15:15">ctx</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:20">src</name><index pos:start="15:21" pos:end="15:23">[<expr pos:start="15:22" pos:end="15:22"><name pos:start="15:22" pos:end="15:22">i</name></expr>]</index></name> <operator pos:start="15:25" pos:end="15:26">+=</operator> <name pos:start="15:28" pos:end="15:49"><name pos:start="15:28" pos:end="15:30">ctx</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:37">frame</name><operator pos:start="15:38" pos:end="15:38">.</operator><name pos:start="15:39" pos:end="15:46">linesize</name><index pos:start="15:47" pos:end="15:49">[<expr pos:start="15:48" pos:end="15:48"><name pos:start="15:48" pos:end="15:48">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="17:5" pos:end="17:35"><expr pos:start="17:5" pos:end="17:34"><call pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:22">dnxhd_write_header</name><argument_list pos:start="17:23" pos:end="17:34">(<argument pos:start="17:24" pos:end="17:28"><expr pos:start="17:24" pos:end="17:28"><name pos:start="17:24" pos:end="17:28">avctx</name></expr></argument>, <argument pos:start="17:31" pos:end="17:33"><expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="21:44"><if pos:start="18:5" pos:end="19:43">if <condition pos:start="18:8" pos:end="18:48">(<expr pos:start="18:9" pos:end="18:47"><name pos:start="18:9" pos:end="18:26"><name pos:start="18:9" pos:end="18:13">avctx</name><operator pos:start="18:14" pos:end="18:15">-&gt;</operator><name pos:start="18:16" pos:end="18:26">mb_decision</name></name> <operator pos:start="18:28" pos:end="18:29">==</operator> <name pos:start="18:31" pos:end="18:47">FF_MB_DECISION_RD</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:43"><block_content pos:start="19:9" pos:end="19:43">
        <expr_stmt pos:start="19:9" pos:end="19:43"><expr pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:42"><name pos:start="19:15" pos:end="19:30">dnxhd_encode_rdo</name><argument_list pos:start="19:31" pos:end="19:42">(<argument pos:start="19:32" pos:end="19:36"><expr pos:start="19:32" pos:end="19:36"><name pos:start="19:32" pos:end="19:36">avctx</name></expr></argument>, <argument pos:start="19:39" pos:end="19:41"><expr pos:start="19:39" pos:end="19:41"><name pos:start="19:39" pos:end="19:41">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="20:5" pos:end="21:44">else<block type="pseudo" pos:start="21:9" pos:end="21:44"><block_content pos:start="21:9" pos:end="21:44">
        <expr_stmt pos:start="21:9" pos:end="21:44"><expr pos:start="21:9" pos:end="21:43"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:43"><name pos:start="21:15" pos:end="21:31">dnxhd_encode_fast</name><argument_list pos:start="21:32" pos:end="21:43">(<argument pos:start="21:33" pos:end="21:37"><expr pos:start="21:33" pos:end="21:37"><name pos:start="21:33" pos:end="21:37">avctx</name></expr></argument>, <argument pos:start="21:40" pos:end="21:42"><expr pos:start="21:40" pos:end="21:42"><name pos:start="21:40" pos:end="21:42">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt pos:start="22:5" pos:end="25:5"><if pos:start="22:5" pos:end="25:5">if <condition pos:start="22:8" pos:end="22:16">(<expr pos:start="22:9" pos:end="22:15"><name pos:start="22:9" pos:end="22:11">ret</name> <operator pos:start="22:13" pos:end="22:13">&lt;</operator> <literal type="number" pos:start="22:15" pos:end="22:15">0</literal></expr>)</condition> <block pos:start="22:18" pos:end="25:5">{<block_content pos:start="23:9" pos:end="24:18">
        <expr_stmt pos:start="23:9" pos:end="23:87"><expr pos:start="23:9" pos:end="23:86"><call pos:start="23:9" pos:end="23:86"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:86">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:37" pos:end="23:85"><expr pos:start="23:37" pos:end="23:85"><literal type="string" pos:start="23:37" pos:end="23:85">"picture could not fit ratecontrol constraints\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="24:9" pos:end="24:18">return <expr pos:start="24:16" pos:end="24:17"><operator pos:start="24:16" pos:end="24:16">-</operator><literal type="number" pos:start="24:17" pos:end="24:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:41"><expr pos:start="26:5" pos:end="26:40"><call pos:start="26:5" pos:end="26:40"><name pos:start="26:5" pos:end="26:30">dnxhd_setup_threads_slices</name><argument_list pos:start="26:31" pos:end="26:40">(<argument pos:start="26:32" pos:end="26:34"><expr pos:start="26:32" pos:end="26:34"><name pos:start="26:32" pos:end="26:34">ctx</name></expr></argument>, <argument pos:start="26:37" pos:end="26:39"><expr pos:start="26:37" pos:end="26:39"><name pos:start="26:37" pos:end="26:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:15"><expr pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:10">offset</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</expr_stmt>
    <for pos:start="28:5" pos:end="32:5">for <control pos:start="28:9" pos:end="28:42">(<init pos:start="28:10" pos:end="28:15"><expr pos:start="28:10" pos:end="28:14"><name pos:start="28:10" pos:end="28:10">i</name> <operator pos:start="28:12" pos:end="28:12">=</operator> <literal type="number" pos:start="28:14" pos:end="28:14">0</literal></expr>;</init> <condition pos:start="28:17" pos:end="28:37"><expr pos:start="28:17" pos:end="28:36"><name pos:start="28:17" pos:end="28:17">i</name> <operator pos:start="28:19" pos:end="28:19">&lt;</operator> <name pos:start="28:21" pos:end="28:36"><name pos:start="28:21" pos:end="28:23">ctx</name><operator pos:start="28:24" pos:end="28:25">-&gt;</operator><name pos:start="28:26" pos:end="28:26">m</name><operator pos:start="28:27" pos:end="28:27">.</operator><name pos:start="28:28" pos:end="28:36">mb_height</name></name></expr>;</condition> <incr pos:start="28:39" pos:end="28:41"><expr pos:start="28:39" pos:end="28:41"><name pos:start="28:39" pos:end="28:39">i</name><operator pos:start="28:40" pos:end="28:41">++</operator></expr></incr>)</control> <block pos:start="28:44" pos:end="32:5">{<block_content pos:start="29:9" pos:end="31:42">
        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><call pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:15">AV_WB32</name><argument_list pos:start="29:16" pos:end="29:42">(<argument pos:start="29:17" pos:end="29:33"><expr pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:25"><name pos:start="29:17" pos:end="29:19">ctx</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:25">msip</name></name> <operator pos:start="29:27" pos:end="29:27">+</operator> <name pos:start="29:29" pos:end="29:29">i</name> <operator pos:start="29:31" pos:end="29:31">*</operator> <literal type="number" pos:start="29:33" pos:end="29:33">4</literal></expr></argument>, <argument pos:start="29:36" pos:end="29:41"><expr pos:start="29:36" pos:end="29:41"><name pos:start="29:36" pos:end="29:41">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:37"><expr pos:start="30:9" pos:end="30:36"><name pos:start="30:9" pos:end="30:14">offset</name> <operator pos:start="30:16" pos:end="30:17">+=</operator> <name pos:start="30:19" pos:end="30:36"><name pos:start="30:19" pos:end="30:21">ctx</name><operator pos:start="30:22" pos:end="30:23">-&gt;</operator><name pos:start="30:24" pos:end="30:33">slice_size</name><index pos:start="30:34" pos:end="30:36">[<expr pos:start="30:35" pos:end="30:35"><name pos:start="30:35" pos:end="30:35">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:42"><expr pos:start="31:9" pos:end="31:41"><call pos:start="31:9" pos:end="31:41"><name pos:start="31:9" pos:end="31:14">assert</name><argument_list pos:start="31:15" pos:end="31:41">(<argument pos:start="31:16" pos:end="31:40"><expr pos:start="31:16" pos:end="31:40"><operator pos:start="31:16" pos:end="31:16">!</operator><operator pos:start="31:17" pos:end="31:17">(</operator><name pos:start="31:18" pos:end="31:35"><name pos:start="31:18" pos:end="31:20">ctx</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:32">slice_size</name><index pos:start="31:33" pos:end="31:35">[<expr pos:start="31:34" pos:end="31:34"><name pos:start="31:34" pos:end="31:34">i</name></expr>]</index></name> <operator pos:start="31:37" pos:end="31:37">&amp;</operator> <literal type="number" pos:start="31:39" pos:end="31:39">3</literal><operator pos:start="31:40" pos:end="31:40">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="33:5" pos:end="33:114"><expr pos:start="33:5" pos:end="33:113"><call pos:start="33:5" pos:end="33:113"><name pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:9">avctx</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:18">execute</name></name><argument_list pos:start="33:19" pos:end="33:113">(<argument pos:start="33:20" pos:end="33:24"><expr pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:24">avctx</name></expr></argument>, <argument pos:start="33:27" pos:end="33:45"><expr pos:start="33:27" pos:end="33:45"><name pos:start="33:27" pos:end="33:45">dnxhd_encode_thread</name></expr></argument>, <argument pos:start="33:48" pos:end="33:70"><expr pos:start="33:48" pos:end="33:70"><operator pos:start="33:48" pos:end="33:48">(</operator><name pos:start="33:49" pos:end="33:52">void</name><operator pos:start="33:53" pos:end="33:53">*</operator><operator pos:start="33:54" pos:end="33:54">*</operator><operator pos:start="33:55" pos:end="33:55">)</operator><operator pos:start="33:56" pos:end="33:56">&amp;</operator><name pos:start="33:57" pos:end="33:70"><name pos:start="33:57" pos:end="33:59">ctx</name><operator pos:start="33:60" pos:end="33:61">-&gt;</operator><name pos:start="33:62" pos:end="33:67">thread</name><index pos:start="33:68" pos:end="33:70">[<expr pos:start="33:69" pos:end="33:69"><literal type="number" pos:start="33:69" pos:end="33:69">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="33:73" pos:end="33:76"><expr pos:start="33:73" pos:end="33:76"><name pos:start="33:73" pos:end="33:76">NULL</name></expr></argument>, <argument pos:start="33:79" pos:end="33:97"><expr pos:start="33:79" pos:end="33:97"><name pos:start="33:79" pos:end="33:97"><name pos:start="33:79" pos:end="33:83">avctx</name><operator pos:start="33:84" pos:end="33:85">-&gt;</operator><name pos:start="33:86" pos:end="33:97">thread_count</name></name></expr></argument>, <argument pos:start="33:100" pos:end="33:112"><expr pos:start="33:100" pos:end="33:112"><sizeof pos:start="33:100" pos:end="33:112">sizeof<argument_list pos:start="33:106" pos:end="33:112">(<argument pos:start="33:107" pos:end="33:111"><expr pos:start="33:107" pos:end="33:111"><name pos:start="33:107" pos:end="33:110">void</name><operator pos:start="33:111" pos:end="33:111">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:68"><expr pos:start="34:5" pos:end="34:67"><call pos:start="34:5" pos:end="34:67"><name pos:start="34:5" pos:end="34:11">AV_WB32</name><argument_list pos:start="34:12" pos:end="34:67">(<argument pos:start="34:13" pos:end="34:54"><expr pos:start="34:13" pos:end="34:54"><name pos:start="34:13" pos:end="34:15">buf</name> <operator pos:start="34:17" pos:end="34:17">+</operator> <name pos:start="34:19" pos:end="34:50"><name pos:start="34:19" pos:end="34:21">ctx</name><operator pos:start="34:22" pos:end="34:23">-&gt;</operator><name pos:start="34:24" pos:end="34:32">cid_table</name><operator pos:start="34:33" pos:end="34:34">-&gt;</operator><name pos:start="34:35" pos:end="34:50">coding_unit_size</name></name> <operator pos:start="34:52" pos:end="34:52">-</operator> <literal type="number" pos:start="34:54" pos:end="34:54">4</literal></expr></argument>, <argument pos:start="34:57" pos:end="34:66"><expr pos:start="34:57" pos:end="34:66"><literal type="number" pos:start="34:57" pos:end="34:66">0x600DC0DE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="34:70" pos:end="34:75">// EOF</comment>
    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:39">(<expr pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:11">ctx</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:23">interlaced</name></name> <operator pos:start="35:25" pos:end="35:26">&amp;&amp;</operator> <name pos:start="35:28" pos:end="35:38">first_field</name></expr>)</condition> <block pos:start="35:41" pos:end="41:5">{<block_content pos:start="36:9" pos:end="40:32">
        <expr_stmt pos:start="36:9" pos:end="36:28"><expr pos:start="36:9" pos:end="36:27"><name pos:start="36:9" pos:end="36:19">first_field</name>     <operator pos:start="36:25" pos:end="36:25">=</operator> <literal type="number" pos:start="36:27" pos:end="36:27">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:28"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:11">ctx</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:22">cur_field</name></name> <operator pos:start="37:24" pos:end="37:25">^=</operator> <literal type="number" pos:start="37:27" pos:end="37:27">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="38:9" pos:end="38:53"><expr pos:start="38:9" pos:end="38:52"><name pos:start="38:9" pos:end="38:11">buf</name>      <operator pos:start="38:18" pos:end="38:19">+=</operator> <name pos:start="38:21" pos:end="38:52"><name pos:start="38:21" pos:end="38:23">ctx</name><operator pos:start="38:24" pos:end="38:25">-&gt;</operator><name pos:start="38:26" pos:end="38:34">cid_table</name><operator pos:start="38:35" pos:end="38:36">-&gt;</operator><name pos:start="38:37" pos:end="38:52">coding_unit_size</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:53"><expr pos:start="39:9" pos:end="39:52"><name pos:start="39:9" pos:end="39:16">buf_size</name> <operator pos:start="39:18" pos:end="39:19">-=</operator> <name pos:start="39:21" pos:end="39:52"><name pos:start="39:21" pos:end="39:23">ctx</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:34">cid_table</name><operator pos:start="39:35" pos:end="39:36">-&gt;</operator><name pos:start="39:37" pos:end="39:52">coding_unit_size</name></name></expr>;</expr_stmt>
        <goto pos:start="40:9" pos:end="40:32">goto <name pos:start="40:14" pos:end="40:31">encode_coding_unit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="42:5" pos:end="42:50"><expr pos:start="42:5" pos:end="42:49"><name pos:start="42:5" pos:end="42:22"><name pos:start="42:5" pos:end="42:7">ctx</name><operator pos:start="42:8" pos:end="42:9">-&gt;</operator><name pos:start="42:10" pos:end="42:14">frame</name><operator pos:start="42:15" pos:end="42:15">.</operator><name pos:start="42:16" pos:end="42:22">quality</name></name> <operator pos:start="42:24" pos:end="42:24">=</operator> <name pos:start="42:26" pos:end="42:36"><name pos:start="42:26" pos:end="42:28">ctx</name><operator pos:start="42:29" pos:end="42:30">-&gt;</operator><name pos:start="42:31" pos:end="42:36">qscale</name></name><operator pos:start="42:37" pos:end="42:37">*</operator><name pos:start="42:38" pos:end="42:49">FF_QP2LAMBDA</name></expr>;</expr_stmt>
    <return pos:start="43:5" pos:end="43:38">return <expr pos:start="43:12" pos:end="43:37"><name pos:start="43:12" pos:end="43:37"><name pos:start="43:12" pos:end="43:14">ctx</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:25">cid_table</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:37">frame_size</name></name></expr>;</return>
</block_content>}</block></function></unit>
