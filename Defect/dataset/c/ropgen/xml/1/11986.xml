<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11986.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">qmp_memchar_write</name><parameter_list pos:start="1:23" pos:end="7:36">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">device</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:50">int64_t</name></type> <name pos:start="1:52" pos:end="1:55">size</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:39"><decl pos:start="3:24" pos:end="3:39"><type pos:start="3:24" pos:end="3:39"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:33">char</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:56"><decl pos:start="3:42" pos:end="3:56"><type pos:start="3:42" pos:end="3:56"><name pos:start="3:42" pos:end="3:45">bool</name></type> <name pos:start="3:47" pos:end="3:56">has_format</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:45"><decl pos:start="5:24" pos:end="5:45"><type pos:start="5:24" pos:end="5:45"><name pos:start="5:24" pos:end="5:38"><name pos:start="5:24" pos:end="5:27">enum</name> <name pos:start="5:29" pos:end="5:38">DataFormat</name></name></type> <name pos:start="5:40" pos:end="5:45">format</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:35"><decl pos:start="7:24" pos:end="7:35"><type pos:start="7:24" pos:end="7:35"><name pos:start="7:24" pos:end="7:28">Error</name> <modifier pos:start="7:30" pos:end="7:30">*</modifier><modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:35">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="71:1">{<block_content pos:start="11:5" pos:end="69:5">

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">CharDriverState</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">guchar</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:22">write_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:9">gsize</name></type> <name pos:start="17:11" pos:end="17:21">write_count</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:32"><expr pos:start="21:5" pos:end="21:31"><name pos:start="21:5" pos:end="21:7">chr</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:31"><name pos:start="21:11" pos:end="21:23">qemu_chr_find</name><argument_list pos:start="21:24" pos:end="21:31">(<argument pos:start="21:25" pos:end="21:30"><expr pos:start="21:25" pos:end="21:30"><name pos:start="21:25" pos:end="21:30">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:13">(<expr pos:start="23:9" pos:end="23:12"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:12">chr</name></expr>)</condition> <block pos:start="23:15" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:15">

        <expr_stmt pos:start="25:9" pos:end="25:55"><expr pos:start="25:9" pos:end="25:54"><call pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:17">error_set</name><argument_list pos:start="25:18" pos:end="25:54">(<argument pos:start="25:19" pos:end="25:22"><expr pos:start="25:19" pos:end="25:22"><name pos:start="25:19" pos:end="25:22">errp</name></expr></argument>, <argument pos:start="25:25" pos:end="25:45"><expr pos:start="25:25" pos:end="25:45"><name pos:start="25:25" pos:end="25:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="25:48" pos:end="25:53"><expr pos:start="25:48" pos:end="25:53"><name pos:start="25:48" pos:end="25:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:35">(<expr pos:start="33:9" pos:end="33:34"><call pos:start="33:9" pos:end="33:34"><name pos:start="33:9" pos:end="33:19">qemu_is_chr</name><argument_list pos:start="33:20" pos:end="33:34">(<argument pos:start="33:21" pos:end="33:23"><expr pos:start="33:21" pos:end="33:23"><name pos:start="33:21" pos:end="33:23">chr</name></expr></argument>, <argument pos:start="33:26" pos:end="33:33"><expr pos:start="33:26" pos:end="33:33"><literal type="string" pos:start="33:26" pos:end="33:33">"memory"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:37" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:64"><expr pos:start="35:9" pos:end="35:63"><call pos:start="35:9" pos:end="35:63"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="35:63">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>,<argument pos:start="35:25" pos:end="35:54"><expr pos:start="35:25" pos:end="35:54"><literal type="string" pos:start="35:25" pos:end="35:54">"%s is not memory char device"</literal></expr></argument>, <argument pos:start="35:57" pos:end="35:62"><expr pos:start="35:57" pos:end="35:62"><name pos:start="35:57" pos:end="35:62">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:30"><expr pos:start="43:5" pos:end="43:29"><name pos:start="43:5" pos:end="43:15">write_count</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <operator pos:start="43:19" pos:end="43:19">(</operator><name pos:start="43:20" pos:end="43:24">gsize</name><operator pos:start="43:25" pos:end="43:25">)</operator><name pos:start="43:26" pos:end="43:29">size</name></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:53">(<expr pos:start="47:9" pos:end="47:52"><name pos:start="47:9" pos:end="47:18">has_format</name> <operator pos:start="47:20" pos:end="47:21">&amp;&amp;</operator> <operator pos:start="47:23" pos:end="47:23">(</operator><name pos:start="47:24" pos:end="47:29">format</name> <operator pos:start="47:31" pos:end="47:32">==</operator> <name pos:start="47:34" pos:end="47:51">DATA_FORMAT_BASE64</name><operator pos:start="47:52" pos:end="47:52">)</operator></expr>)</condition> <block pos:start="47:55" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:57">

        <expr_stmt pos:start="49:9" pos:end="49:57"><expr pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:18">write_data</name> <operator pos:start="49:20" pos:end="49:20">=</operator> <call pos:start="49:22" pos:end="49:56"><name pos:start="49:22" pos:end="49:36">g_base64_decode</name><argument_list pos:start="49:37" pos:end="49:56">(<argument pos:start="49:38" pos:end="49:41"><expr pos:start="49:38" pos:end="49:41"><name pos:start="49:38" pos:end="49:41">data</name></expr></argument>, <argument pos:start="49:44" pos:end="49:55"><expr pos:start="49:44" pos:end="49:55"><operator pos:start="49:44" pos:end="49:44">&amp;</operator><name pos:start="49:45" pos:end="49:55">write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:37">

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:18">write_data</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <operator pos:start="53:22" pos:end="53:22">(</operator><name pos:start="53:23" pos:end="53:29">uint8_t</name> <operator pos:start="53:31" pos:end="53:31">*</operator><operator pos:start="53:32" pos:end="53:32">)</operator><name pos:start="53:33" pos:end="53:36">data</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:57"><expr pos:start="59:5" pos:end="59:56"><name pos:start="59:5" pos:end="59:7">ret</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:56"><name pos:start="59:11" pos:end="59:26">cirmem_chr_write</name><argument_list pos:start="59:27" pos:end="59:56">(<argument pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:30">chr</name></expr></argument>, <argument pos:start="59:33" pos:end="59:42"><expr pos:start="59:33" pos:end="59:42"><name pos:start="59:33" pos:end="59:42">write_data</name></expr></argument>, <argument pos:start="59:45" pos:end="59:55"><expr pos:start="59:45" pos:end="59:55"><name pos:start="59:45" pos:end="59:55">write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:15">

        <expr_stmt pos:start="65:9" pos:end="65:65"><expr pos:start="65:9" pos:end="65:64"><call pos:start="65:9" pos:end="65:64"><name pos:start="65:9" pos:end="65:18">error_setg</name><argument_list pos:start="65:19" pos:end="65:64">(<argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">errp</name></expr></argument>, <argument pos:start="65:26" pos:end="65:55"><expr pos:start="65:26" pos:end="65:55"><literal type="string" pos:start="65:26" pos:end="65:55">"Failed to write to device %s"</literal></expr></argument>, <argument pos:start="65:58" pos:end="65:63"><expr pos:start="65:58" pos:end="65:63"><name pos:start="65:58" pos:end="65:63">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
