<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10507.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">oss_ctl_out</name> <parameter_list pos:start="1:24" pos:end="1:53">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:34">HWVoiceOut</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">hw</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:47"><decl pos:start="1:41" pos:end="1:47"><type pos:start="1:41" pos:end="1:47"><name pos:start="1:41" pos:end="1:43">int</name></type> <name pos:start="1:45" pos:end="1:47">cmd</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:52"><decl pos:start="1:50" pos:end="1:52"><type pos:start="1:50" pos:end="1:52"><modifier pos:start="1:50" pos:end="1:52">...</modifier></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:13">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">trig</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">OSSVoiceOut</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">oss</name> <init pos:start="7:22" pos:end="7:41">= <expr pos:start="7:24" pos:end="7:41"><operator pos:start="7:24" pos:end="7:24">(</operator><name pos:start="7:25" pos:end="7:35">OSSVoiceOut</name> <operator pos:start="7:37" pos:end="7:37">*</operator><operator pos:start="7:38" pos:end="7:38">)</operator> <name pos:start="7:40" pos:end="7:41">hw</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="109:5">switch <condition pos:start="11:12" pos:end="11:16">(<expr pos:start="11:13" pos:end="11:15"><name pos:start="11:13" pos:end="11:15">cmd</name></expr>)</condition> <block pos:start="11:18" pos:end="109:5">{<block_content pos:start="13:5" pos:end="107:14">

    <case pos:start="13:5" pos:end="13:22">case <expr pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:21">VOICE_ENABLE</name></expr>:</case>

        <block pos:start="15:9" pos:end="69:9">{<block_content pos:start="17:13" pos:end="67:13">

            <decl_stmt pos:start="17:13" pos:end="17:23"><decl pos:start="17:13" pos:end="17:22"><type pos:start="17:13" pos:end="17:19"><name pos:start="17:13" pos:end="17:19">va_list</name></type> <name pos:start="17:21" pos:end="17:22">ap</name></decl>;</decl_stmt>

            <decl_stmt pos:start="19:13" pos:end="19:26"><decl pos:start="19:13" pos:end="19:25"><type pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:15">int</name></type> <name pos:start="19:17" pos:end="19:25">poll_mode</name></decl>;</decl_stmt>



            <expr_stmt pos:start="23:13" pos:end="23:31"><expr pos:start="23:13" pos:end="23:30"><call pos:start="23:13" pos:end="23:30"><name pos:start="23:13" pos:end="23:20">va_start</name> <argument_list pos:start="23:22" pos:end="23:30">(<argument pos:start="23:23" pos:end="23:24"><expr pos:start="23:23" pos:end="23:24"><name pos:start="23:23" pos:end="23:24">ap</name></expr></argument>, <argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:41"><expr pos:start="25:13" pos:end="25:40"><name pos:start="25:13" pos:end="25:21">poll_mode</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <call pos:start="25:25" pos:end="25:40"><name pos:start="25:25" pos:end="25:30">va_arg</name> <argument_list pos:start="25:32" pos:end="25:40">(<argument pos:start="25:33" pos:end="25:34"><expr pos:start="25:33" pos:end="25:34"><name pos:start="25:33" pos:end="25:34">ap</name></expr></argument>, <argument pos:start="25:37" pos:end="25:39"><expr pos:start="25:37" pos:end="25:39"><name pos:start="25:37" pos:end="25:39">int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:24"><expr pos:start="27:13" pos:end="27:23"><call pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:18">va_end</name> <argument_list pos:start="27:20" pos:end="27:23">(<argument pos:start="27:21" pos:end="27:22"><expr pos:start="27:21" pos:end="27:22"><name pos:start="27:21" pos:end="27:22">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="31:13" pos:end="31:40"><expr pos:start="31:13" pos:end="31:39"><call pos:start="31:13" pos:end="31:39"><name pos:start="31:13" pos:end="31:18">ldebug</name> <argument_list pos:start="31:20" pos:end="31:39">(<argument pos:start="31:21" pos:end="31:38"><expr pos:start="31:21" pos:end="31:38"><literal type="string" pos:start="31:21" pos:end="31:38">"enabling voice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="37:13"><if pos:start="33:13" pos:end="37:13">if <condition pos:start="33:16" pos:end="33:47">(<expr pos:start="33:17" pos:end="33:46"><name pos:start="33:17" pos:end="33:25">poll_mode</name> <operator pos:start="33:27" pos:end="33:28">&amp;&amp;</operator> <call pos:start="33:30" pos:end="33:46"><name pos:start="33:30" pos:end="33:41">oss_poll_out</name> <argument_list pos:start="33:43" pos:end="33:46">(<argument pos:start="33:44" pos:end="33:45"><expr pos:start="33:44" pos:end="33:45"><name pos:start="33:44" pos:end="33:45">hw</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:49" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:30">

                <expr_stmt pos:start="35:17" pos:end="35:30"><expr pos:start="35:17" pos:end="35:29"><name pos:start="35:17" pos:end="35:25">poll_mode</name> <operator pos:start="35:27" pos:end="35:27">=</operator> <literal type="number" pos:start="35:29" pos:end="35:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:38"><expr pos:start="39:13" pos:end="39:37"><name pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:14">hw</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:25">poll_mode</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:37">poll_mode</name></expr>;</expr_stmt>



            <if_stmt pos:start="43:13" pos:end="47:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:30">(<expr pos:start="43:17" pos:end="43:29"><operator pos:start="43:17" pos:end="43:17">!</operator><name pos:start="43:18" pos:end="43:29"><name pos:start="43:18" pos:end="43:20">oss</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:29">mmapped</name></name></expr>)</condition> <block pos:start="43:32" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:25">

                <return pos:start="45:17" pos:end="45:25">return <expr pos:start="45:24" pos:end="45:24"><literal type="number" pos:start="45:24" pos:end="45:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="51:13" pos:end="51:76"><expr pos:start="51:13" pos:end="51:75"><call pos:start="51:13" pos:end="51:75"><name pos:start="51:13" pos:end="51:36">audio_pcm_info_clear_buf</name> <argument_list pos:start="51:38" pos:end="51:75">(<argument pos:start="51:39" pos:end="51:47"><expr pos:start="51:39" pos:end="51:47"><operator pos:start="51:39" pos:end="51:39">&amp;</operator><name pos:start="51:40" pos:end="51:47"><name pos:start="51:40" pos:end="51:41">hw</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:47">info</name></name></expr></argument>, <argument pos:start="51:50" pos:end="51:61"><expr pos:start="51:50" pos:end="51:61"><name pos:start="51:50" pos:end="51:61"><name pos:start="51:50" pos:end="51:52">oss</name><operator pos:start="51:53" pos:end="51:54">-&gt;</operator><name pos:start="51:55" pos:end="51:61">pcm_buf</name></name></expr></argument>, <argument pos:start="51:64" pos:end="51:74"><expr pos:start="51:64" pos:end="51:74"><name pos:start="51:64" pos:end="51:74"><name pos:start="51:64" pos:end="51:65">hw</name><operator pos:start="51:66" pos:end="51:67">-&gt;</operator><name pos:start="51:68" pos:end="51:74">samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:37"><expr pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:16">trig</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:36">PCM_ENABLE_OUTPUT</name></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="67:13"><if pos:start="55:13" pos:end="67:13">if <condition pos:start="55:16" pos:end="55:66">(<expr pos:start="55:17" pos:end="55:65"><call pos:start="55:17" pos:end="55:61"><name pos:start="55:17" pos:end="55:21">ioctl</name> <argument_list pos:start="55:23" pos:end="55:61">(<argument pos:start="55:24" pos:end="55:30"><expr pos:start="55:24" pos:end="55:30"><name pos:start="55:24" pos:end="55:30"><name pos:start="55:24" pos:end="55:26">oss</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:30">fd</name></name></expr></argument>, <argument pos:start="55:33" pos:end="55:53"><expr pos:start="55:33" pos:end="55:53"><name pos:start="55:33" pos:end="55:53">SNDCTL_DSP_SETTRIGGER</name></expr></argument>, <argument pos:start="55:56" pos:end="55:60"><expr pos:start="55:56" pos:end="55:60"><operator pos:start="55:56" pos:end="55:56">&amp;</operator><name pos:start="55:57" pos:end="55:60">trig</name></expr></argument>)</argument_list></call> <operator pos:start="55:63" pos:end="55:63">&lt;</operator> <literal type="number" pos:start="55:65" pos:end="55:65">0</literal></expr>)</condition> <block pos:start="55:68" pos:end="67:13">{<block_content pos:start="57:17" pos:end="65:26">

                <expr_stmt pos:start="57:17" pos:end="63:22"><expr pos:start="57:17" pos:end="63:21"><call pos:start="57:17" pos:end="63:21"><name pos:start="57:17" pos:end="57:26">oss_logerr</name> <argument_list pos:start="57:28" pos:end="63:21">(

                    <argument pos:start="59:21" pos:end="59:25"><expr pos:start="59:21" pos:end="59:25"><name pos:start="59:21" pos:end="59:25">errno</name></expr></argument>,

                    <argument pos:start="61:21" pos:end="61:70"><expr pos:start="61:21" pos:end="61:70"><literal type="string" pos:start="61:21" pos:end="61:70">"SNDCTL_DSP_SETTRIGGER PCM_ENABLE_OUTPUT failed\n"</literal></expr></argument>

                    )</argument_list></call></expr>;</expr_stmt>

                <return pos:start="65:17" pos:end="65:26">return <expr pos:start="65:24" pos:end="65:25"><operator pos:start="65:24" pos:end="65:24">-</operator><literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="71:9" pos:end="71:14">break;</break>



    <case pos:start="75:5" pos:end="75:23">case <expr pos:start="75:10" pos:end="75:22"><name pos:start="75:10" pos:end="75:22">VOICE_DISABLE</name></expr>:</case>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:26">(<expr pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:14">hw</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:25">poll_mode</name></name></expr>)</condition> <block pos:start="77:28" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:30">

            <expr_stmt pos:start="79:13" pos:end="79:60"><expr pos:start="79:13" pos:end="79:59"><call pos:start="79:13" pos:end="79:59"><name pos:start="79:13" pos:end="79:31">qemu_set_fd_handler</name> <argument_list pos:start="79:33" pos:end="79:59">(<argument pos:start="79:34" pos:end="79:40"><expr pos:start="79:34" pos:end="79:40"><name pos:start="79:34" pos:end="79:40"><name pos:start="79:34" pos:end="79:36">oss</name><operator pos:start="79:37" pos:end="79:38">-&gt;</operator><name pos:start="79:39" pos:end="79:40">fd</name></name></expr></argument>, <argument pos:start="79:43" pos:end="79:46"><expr pos:start="79:43" pos:end="79:46"><name pos:start="79:43" pos:end="79:46">NULL</name></expr></argument>, <argument pos:start="79:49" pos:end="79:52"><expr pos:start="79:49" pos:end="79:52"><name pos:start="79:49" pos:end="79:52">NULL</name></expr></argument>, <argument pos:start="79:55" pos:end="79:58"><expr pos:start="79:55" pos:end="79:58"><name pos:start="79:55" pos:end="79:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:30"><expr pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:14">hw</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:25">poll_mode</name></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <literal type="number" pos:start="81:29" pos:end="81:29">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:26">(<expr pos:start="87:13" pos:end="87:25"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:25"><name pos:start="87:14" pos:end="87:16">oss</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:25">mmapped</name></name></expr>)</condition> <block pos:start="87:28" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:21">

            <return pos:start="89:13" pos:end="89:21">return <expr pos:start="89:20" pos:end="89:20"><literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:37"><expr pos:start="95:9" pos:end="95:36"><call pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:14">ldebug</name> <argument_list pos:start="95:16" pos:end="95:36">(<argument pos:start="95:17" pos:end="95:35"><expr pos:start="95:17" pos:end="95:35"><literal type="string" pos:start="95:17" pos:end="95:35">"disabling voice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:17"><expr pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:12">trig</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <literal type="number" pos:start="97:16" pos:end="97:16">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:62">(<expr pos:start="99:13" pos:end="99:61"><call pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:17">ioctl</name> <argument_list pos:start="99:19" pos:end="99:57">(<argument pos:start="99:20" pos:end="99:26"><expr pos:start="99:20" pos:end="99:26"><name pos:start="99:20" pos:end="99:26"><name pos:start="99:20" pos:end="99:22">oss</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:26">fd</name></name></expr></argument>, <argument pos:start="99:29" pos:end="99:49"><expr pos:start="99:29" pos:end="99:49"><name pos:start="99:29" pos:end="99:49">SNDCTL_DSP_SETTRIGGER</name></expr></argument>, <argument pos:start="99:52" pos:end="99:56"><expr pos:start="99:52" pos:end="99:56"><operator pos:start="99:52" pos:end="99:52">&amp;</operator><name pos:start="99:53" pos:end="99:56">trig</name></expr></argument>)</argument_list></call> <operator pos:start="99:59" pos:end="99:59">&lt;</operator> <literal type="number" pos:start="99:61" pos:end="99:61">0</literal></expr>)</condition> <block pos:start="99:64" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:22">

            <expr_stmt pos:start="101:13" pos:end="101:67"><expr pos:start="101:13" pos:end="101:66"><call pos:start="101:13" pos:end="101:66"><name pos:start="101:13" pos:end="101:22">oss_logerr</name> <argument_list pos:start="101:24" pos:end="101:66">(<argument pos:start="101:25" pos:end="101:29"><expr pos:start="101:25" pos:end="101:29"><name pos:start="101:25" pos:end="101:29">errno</name></expr></argument>, <argument pos:start="101:32" pos:end="101:65"><expr pos:start="101:32" pos:end="101:65"><literal type="string" pos:start="101:32" pos:end="101:65">"SNDCTL_DSP_SETTRIGGER 0 failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:22">return <expr pos:start="103:20" pos:end="103:21"><operator pos:start="103:20" pos:end="103:20">-</operator><literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="111:5" pos:end="111:13">return <expr pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
