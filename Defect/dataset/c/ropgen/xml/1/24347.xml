<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24347.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">vnc_update_client</name><parameter_list pos:start="1:29" pos:end="1:68">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:37">VncState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">vs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:56">has_dirty</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:62">bool</name></type> <name pos:start="1:64" pos:end="1:67">sync</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:13">

    <expr_stmt pos:start="5:5" pos:end="5:31"><expr pos:start="5:5" pos:end="5:30"><name pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:6">vs</name><operator pos:start="5:7" pos:end="5:8">-&gt;</operator><name pos:start="5:9" pos:end="5:17">has_dirty</name></name> <operator pos:start="5:19" pos:end="5:20">+=</operator> <name pos:start="5:22" pos:end="5:30">has_dirty</name></expr>;</expr_stmt>

    <if_stmt pos:start="7:5" pos:end="131:5"><if pos:start="7:5" pos:end="131:5">if <condition pos:start="7:8" pos:end="7:43">(<expr pos:start="7:9" pos:end="7:42"><name pos:start="7:9" pos:end="7:23"><name pos:start="7:9" pos:end="7:10">vs</name><operator pos:start="7:11" pos:end="7:12">-&gt;</operator><name pos:start="7:13" pos:end="7:23">need_update</name></name> <operator pos:start="7:25" pos:end="7:26">&amp;&amp;</operator> <name pos:start="7:28" pos:end="7:34"><name pos:start="7:28" pos:end="7:29">vs</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:34">ioc</name></name> <operator pos:start="7:36" pos:end="7:37">!=</operator> <name pos:start="7:39" pos:end="7:42">NULL</name></expr>)</condition> <block pos:start="7:45" pos:end="131:5">{<block_content pos:start="9:9" pos:end="129:17">

        <decl_stmt pos:start="9:9" pos:end="9:32"><decl pos:start="9:9" pos:end="9:31"><type pos:start="9:9" pos:end="9:20"><name pos:start="9:9" pos:end="9:18">VncDisplay</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:22">vd</name> <init pos:start="9:24" pos:end="9:31">= <expr pos:start="9:26" pos:end="9:31"><name pos:start="9:26" pos:end="9:31"><name pos:start="9:26" pos:end="9:27">vs</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:31">vd</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:20"><decl pos:start="11:9" pos:end="11:19"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:14">VncJob</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:19">job</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:14"><decl pos:start="13:9" pos:end="13:13"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:13">y</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:26"><decl pos:start="15:9" pos:end="15:18"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:18">height</name></decl>, <decl pos:start="15:21" pos:end="15:25"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:21" pos:end="15:25">width</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:18"><decl pos:start="17:9" pos:end="17:17"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:13">n</name> <init pos:start="17:15" pos:end="17:17">= <expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="21:9" pos:end="25:21"><if pos:start="21:9" pos:end="25:21">if <condition pos:start="21:12" pos:end="21:69">(<expr pos:start="21:13" pos:end="21:68"><name pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:14">vs</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:22">output</name><operator pos:start="21:23" pos:end="21:23">.</operator><name pos:start="21:24" pos:end="21:29">offset</name></name> <operator pos:start="21:31" pos:end="21:32">&amp;&amp;</operator> <operator pos:start="21:34" pos:end="21:34">!</operator><name pos:start="21:35" pos:end="21:47"><name pos:start="21:35" pos:end="21:36">vs</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:47">audio_cap</name></name> <operator pos:start="21:49" pos:end="21:50">&amp;&amp;</operator> <operator pos:start="21:52" pos:end="21:52">!</operator><name pos:start="21:53" pos:end="21:68"><name pos:start="21:53" pos:end="21:54">vs</name><operator pos:start="21:55" pos:end="21:56">-&gt;</operator><name pos:start="21:57" pos:end="21:68">force_update</name></name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:21"><block_content pos:start="25:13" pos:end="25:21">

            <comment type="block" pos:start="23:13" pos:end="23:73">/* kernel send buffers are full -&gt; drop frames to throttle */</comment>

            <return pos:start="25:13" pos:end="25:21">return <expr pos:start="25:20" pos:end="25:20"><literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if <condition pos:start="29:12" pos:end="29:66">(<expr pos:start="29:13" pos:end="29:65"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:26"><name pos:start="29:14" pos:end="29:15">vs</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:26">has_dirty</name></name> <operator pos:start="29:28" pos:end="29:29">&amp;&amp;</operator> <operator pos:start="29:31" pos:end="29:31">!</operator><name pos:start="29:32" pos:end="29:44"><name pos:start="29:32" pos:end="29:33">vs</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:44">audio_cap</name></name> <operator pos:start="29:46" pos:end="29:47">&amp;&amp;</operator> <operator pos:start="29:49" pos:end="29:49">!</operator><name pos:start="29:50" pos:end="29:65"><name pos:start="29:50" pos:end="29:51">vs</name><operator pos:start="29:52" pos:end="29:53">-&gt;</operator><name pos:start="29:54" pos:end="29:65">force_update</name></name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <return pos:start="31:13" pos:end="31:21">return <expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="35:9" pos:end="45:11">/*

         * Send screen updates to the vnc client using the server

         * surface and server dirty map.  guest surface updates

         * happening in parallel don't disturb us, the next pass will

         * send them to the client.

         */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:11">job</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:29"><name pos:start="47:15" pos:end="47:25">vnc_job_new</name><argument_list pos:start="47:26" pos:end="47:29">(<argument pos:start="47:27" pos:end="47:28"><expr pos:start="47:27" pos:end="47:28"><name pos:start="47:27" pos:end="47:28">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:53"><expr pos:start="51:9" pos:end="51:52"><name pos:start="51:9" pos:end="51:14">height</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:52"><name pos:start="51:18" pos:end="51:40">pixman_image_get_height</name><argument_list pos:start="51:41" pos:end="51:52">(<argument pos:start="51:42" pos:end="51:51"><expr pos:start="51:42" pos:end="51:51"><name pos:start="51:42" pos:end="51:51"><name pos:start="51:42" pos:end="51:43">vd</name><operator pos:start="51:44" pos:end="51:45">-&gt;</operator><name pos:start="51:46" pos:end="51:51">server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:13">width</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="53:50"><name pos:start="53:17" pos:end="53:38">pixman_image_get_width</name><argument_list pos:start="53:39" pos:end="53:50">(<argument pos:start="53:40" pos:end="53:49"><expr pos:start="53:40" pos:end="53:49"><name pos:start="53:40" pos:end="53:49"><name pos:start="53:40" pos:end="53:41">vd</name><operator pos:start="53:42" pos:end="53:43">-&gt;</operator><name pos:start="53:44" pos:end="53:49">server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:14"><expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:9">y</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <literal type="number" pos:start="57:13" pos:end="57:13">0</literal></expr>;</expr_stmt>

        <for pos:start="59:9" pos:end="113:9">for <control pos:start="59:13" pos:end="59:16">(<init pos:start="59:14" pos:end="59:14">;</init><condition pos:start="59:15" pos:end="59:15">;</condition><incr/>)</control> <block pos:start="59:18" pos:end="113:9">{<block_content pos:start="61:13" pos:end="111:13">

            <decl_stmt pos:start="61:13" pos:end="61:21"><decl pos:start="61:13" pos:end="61:17"><type pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">int</name></type> <name pos:start="61:17" pos:end="61:17">x</name></decl>, <decl pos:start="61:20" pos:end="61:20"><type ref="prev" pos:start="61:13" pos:end="61:15"/><name pos:start="61:20" pos:end="61:20">h</name></decl>;</decl_stmt>

            <decl_stmt pos:start="63:13" pos:end="63:29"><decl pos:start="63:13" pos:end="63:28"><type pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:20">unsigned</name> <name pos:start="63:22" pos:end="63:25">long</name></type> <name pos:start="63:27" pos:end="63:28">x2</name></decl>;</decl_stmt>

            <decl_stmt pos:start="65:13" pos:end="69:72"><decl pos:start="65:13" pos:end="69:71"><type pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:20">unsigned</name> <name pos:start="65:22" pos:end="65:25">long</name></type> <name pos:start="65:27" pos:end="65:32">offset</name> <init pos:start="65:34" pos:end="69:71">= <expr pos:start="65:36" pos:end="69:71"><call pos:start="65:36" pos:end="69:71"><name pos:start="65:36" pos:end="65:48">find_next_bit</name><argument_list pos:start="65:49" pos:end="69:71">(<argument pos:start="65:50" pos:end="65:77"><expr pos:start="65:50" pos:end="65:77"><operator pos:start="65:50" pos:end="65:50">(</operator><name pos:start="65:51" pos:end="65:58">unsigned</name> <name pos:start="65:60" pos:end="65:63">long</name> <operator pos:start="65:65" pos:end="65:65">*</operator><operator pos:start="65:66" pos:end="65:66">)</operator> <operator pos:start="65:68" pos:end="65:68">&amp;</operator><name pos:start="65:69" pos:end="65:77"><name pos:start="65:69" pos:end="65:70">vs</name><operator pos:start="65:71" pos:end="65:72">-&gt;</operator><name pos:start="65:73" pos:end="65:77">dirty</name></name></expr></argument>,

                                                 <argument pos:start="67:50" pos:end="67:75"><expr pos:start="67:50" pos:end="67:75"><name pos:start="67:50" pos:end="67:55">height</name> <operator pos:start="67:57" pos:end="67:57">*</operator> <call pos:start="67:59" pos:end="67:75"><name pos:start="67:59" pos:end="67:71">VNC_DIRTY_BPL</name><argument_list pos:start="67:72" pos:end="67:75">(<argument pos:start="67:73" pos:end="67:74"><expr pos:start="67:73" pos:end="67:74"><name pos:start="67:73" pos:end="67:74">vs</name></expr></argument>)</argument_list></call></expr></argument>,

                                                 <argument pos:start="69:50" pos:end="69:70"><expr pos:start="69:50" pos:end="69:70"><name pos:start="69:50" pos:end="69:50">y</name> <operator pos:start="69:52" pos:end="69:52">*</operator> <call pos:start="69:54" pos:end="69:70"><name pos:start="69:54" pos:end="69:66">VNC_DIRTY_BPL</name><argument_list pos:start="69:67" pos:end="69:70">(<argument pos:start="69:68" pos:end="69:69"><expr pos:start="69:68" pos:end="69:69"><name pos:start="69:68" pos:end="69:69">vs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="71:13" pos:end="77:13"><if pos:start="71:13" pos:end="77:13">if <condition pos:start="71:16" pos:end="71:53">(<expr pos:start="71:17" pos:end="71:52"><name pos:start="71:17" pos:end="71:22">offset</name> <operator pos:start="71:24" pos:end="71:25">==</operator> <name pos:start="71:27" pos:end="71:32">height</name> <operator pos:start="71:34" pos:end="71:34">*</operator> <call pos:start="71:36" pos:end="71:52"><name pos:start="71:36" pos:end="71:48">VNC_DIRTY_BPL</name><argument_list pos:start="71:49" pos:end="71:52">(<argument pos:start="71:50" pos:end="71:51"><expr pos:start="71:50" pos:end="71:51"><name pos:start="71:50" pos:end="71:51">vs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:55" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:22">

                <comment type="block" pos:start="73:17" pos:end="73:40">/* no more dirty bits */</comment>

                <break pos:start="75:17" pos:end="75:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:43"><expr pos:start="79:13" pos:end="79:42"><name pos:start="79:13" pos:end="79:13">y</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <name pos:start="79:17" pos:end="79:22">offset</name> <operator pos:start="79:24" pos:end="79:24">/</operator> <call pos:start="79:26" pos:end="79:42"><name pos:start="79:26" pos:end="79:38">VNC_DIRTY_BPL</name><argument_list pos:start="79:39" pos:end="79:42">(<argument pos:start="79:40" pos:end="79:41"><expr pos:start="79:40" pos:end="79:41"><name pos:start="79:40" pos:end="79:41">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:43"><expr pos:start="81:13" pos:end="81:42"><name pos:start="81:13" pos:end="81:13">x</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:22">offset</name> <operator pos:start="81:24" pos:end="81:24">%</operator> <call pos:start="81:26" pos:end="81:42"><name pos:start="81:26" pos:end="81:38">VNC_DIRTY_BPL</name><argument_list pos:start="81:39" pos:end="81:42">(<argument pos:start="81:40" pos:end="81:41"><expr pos:start="81:40" pos:end="81:41"><name pos:start="81:40" pos:end="81:41">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="85:58"><expr pos:start="83:13" pos:end="85:57"><name pos:start="83:13" pos:end="83:14">x2</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <call pos:start="83:18" pos:end="85:57"><name pos:start="83:18" pos:end="83:35">find_next_zero_bit</name><argument_list pos:start="83:36" pos:end="85:57">(<argument pos:start="83:37" pos:end="83:67"><expr pos:start="83:37" pos:end="83:67"><operator pos:start="83:37" pos:end="83:37">(</operator><name pos:start="83:38" pos:end="83:45">unsigned</name> <name pos:start="83:47" pos:end="83:50">long</name> <operator pos:start="83:52" pos:end="83:52">*</operator><operator pos:start="83:53" pos:end="83:53">)</operator> <operator pos:start="83:55" pos:end="83:55">&amp;</operator><name pos:start="83:56" pos:end="83:67"><name pos:start="83:56" pos:end="83:57">vs</name><operator pos:start="83:58" pos:end="83:59">-&gt;</operator><name pos:start="83:60" pos:end="83:64">dirty</name><index pos:start="83:65" pos:end="83:67">[<expr pos:start="83:66" pos:end="83:66"><name pos:start="83:66" pos:end="83:66">y</name></expr>]</index></name></expr></argument>,

                                    <argument pos:start="85:37" pos:end="85:53"><expr pos:start="85:37" pos:end="85:53"><call pos:start="85:37" pos:end="85:53"><name pos:start="85:37" pos:end="85:49">VNC_DIRTY_BPL</name><argument_list pos:start="85:50" pos:end="85:53">(<argument pos:start="85:51" pos:end="85:52"><expr pos:start="85:51" pos:end="85:52"><name pos:start="85:51" pos:end="85:52">vs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="85:56" pos:end="85:56"><expr pos:start="85:56" pos:end="85:56"><name pos:start="85:56" pos:end="85:56">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:50"><expr pos:start="87:13" pos:end="87:49"><call pos:start="87:13" pos:end="87:49"><name pos:start="87:13" pos:end="87:24">bitmap_clear</name><argument_list pos:start="87:25" pos:end="87:49">(<argument pos:start="87:26" pos:end="87:37"><expr pos:start="87:26" pos:end="87:37"><name pos:start="87:26" pos:end="87:37"><name pos:start="87:26" pos:end="87:27">vs</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:34">dirty</name><index pos:start="87:35" pos:end="87:37">[<expr pos:start="87:36" pos:end="87:36"><name pos:start="87:36" pos:end="87:36">y</name></expr>]</index></name></expr></argument>, <argument pos:start="87:40" pos:end="87:40"><expr pos:start="87:40" pos:end="87:40"><name pos:start="87:40" pos:end="87:40">x</name></expr></argument>, <argument pos:start="87:43" pos:end="87:48"><expr pos:start="87:43" pos:end="87:48"><name pos:start="87:43" pos:end="87:44">x2</name> <operator pos:start="87:46" pos:end="87:46">-</operator> <name pos:start="87:48" pos:end="87:48">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:66"><expr pos:start="89:13" pos:end="89:65"><name pos:start="89:13" pos:end="89:13">h</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <call pos:start="89:17" pos:end="89:65"><name pos:start="89:17" pos:end="89:43">find_and_clear_dirty_height</name><argument_list pos:start="89:44" pos:end="89:65">(<argument pos:start="89:45" pos:end="89:46"><expr pos:start="89:45" pos:end="89:46"><name pos:start="89:45" pos:end="89:46">vs</name></expr></argument>, <argument pos:start="89:49" pos:end="89:49"><expr pos:start="89:49" pos:end="89:49"><name pos:start="89:49" pos:end="89:49">y</name></expr></argument>, <argument pos:start="89:52" pos:end="89:52"><expr pos:start="89:52" pos:end="89:52"><name pos:start="89:52" pos:end="89:52">x</name></expr></argument>, <argument pos:start="89:55" pos:end="89:56"><expr pos:start="89:55" pos:end="89:56"><name pos:start="89:55" pos:end="89:56">x2</name></expr></argument>, <argument pos:start="89:59" pos:end="89:64"><expr pos:start="89:59" pos:end="89:64"><name pos:start="89:59" pos:end="89:64">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:59"><expr pos:start="91:13" pos:end="91:58"><name pos:start="91:13" pos:end="91:14">x2</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <call pos:start="91:18" pos:end="91:58"><name pos:start="91:18" pos:end="91:20">MIN</name><argument_list pos:start="91:21" pos:end="91:58">(<argument pos:start="91:22" pos:end="91:23"><expr pos:start="91:22" pos:end="91:23"><name pos:start="91:22" pos:end="91:23">x2</name></expr></argument>, <argument pos:start="91:26" pos:end="91:57"><expr pos:start="91:26" pos:end="91:57"><name pos:start="91:26" pos:end="91:30">width</name> <operator pos:start="91:32" pos:end="91:32">/</operator> <name pos:start="91:34" pos:end="91:57">VNC_DIRTY_PIXELS_PER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:23">(<expr pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:18">x2</name> <operator pos:start="93:20" pos:end="93:20">&gt;</operator> <name pos:start="93:22" pos:end="93:22">x</name></expr>)</condition> <block pos:start="93:25" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:78">

                <expr_stmt pos:start="95:17" pos:end="97:78"><expr pos:start="95:17" pos:end="97:77"><name pos:start="95:17" pos:end="95:17">n</name> <operator pos:start="95:19" pos:end="95:20">+=</operator> <call pos:start="95:22" pos:end="97:77"><name pos:start="95:22" pos:end="95:37">vnc_job_add_rect</name><argument_list pos:start="95:38" pos:end="97:77">(<argument pos:start="95:39" pos:end="95:41"><expr pos:start="95:39" pos:end="95:41"><name pos:start="95:39" pos:end="95:41">job</name></expr></argument>, <argument pos:start="95:44" pos:end="95:71"><expr pos:start="95:44" pos:end="95:71"><name pos:start="95:44" pos:end="95:44">x</name> <operator pos:start="95:46" pos:end="95:46">*</operator> <name pos:start="95:48" pos:end="95:71">VNC_DIRTY_PIXELS_PER_BIT</name></expr></argument>, <argument pos:start="95:74" pos:end="95:74"><expr pos:start="95:74" pos:end="95:74"><name pos:start="95:74" pos:end="95:74">y</name></expr></argument>,

                                      <argument pos:start="97:39" pos:end="97:73"><expr pos:start="97:39" pos:end="97:73"><operator pos:start="97:39" pos:end="97:39">(</operator><name pos:start="97:40" pos:end="97:41">x2</name> <operator pos:start="97:43" pos:end="97:43">-</operator> <name pos:start="97:45" pos:end="97:45">x</name><operator pos:start="97:46" pos:end="97:46">)</operator> <operator pos:start="97:48" pos:end="97:48">*</operator> <name pos:start="97:50" pos:end="97:73">VNC_DIRTY_PIXELS_PER_BIT</name></expr></argument>, <argument pos:start="97:76" pos:end="97:76"><expr pos:start="97:76" pos:end="97:76"><name pos:start="97:76" pos:end="97:76">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="101:13" pos:end="111:13"><if pos:start="101:13" pos:end="111:13">if <condition pos:start="101:16" pos:end="101:61">(<expr pos:start="101:17" pos:end="101:60"><operator pos:start="101:17" pos:end="101:17">!</operator><name pos:start="101:18" pos:end="101:18">x</name> <operator pos:start="101:20" pos:end="101:21">&amp;&amp;</operator> <name pos:start="101:23" pos:end="101:24">x2</name> <operator pos:start="101:26" pos:end="101:27">==</operator> <name pos:start="101:29" pos:end="101:33">width</name> <operator pos:start="101:35" pos:end="101:35">/</operator> <name pos:start="101:37" pos:end="101:60">VNC_DIRTY_PIXELS_PER_BIT</name></expr>)</condition> <block pos:start="101:63" pos:end="111:13">{<block_content pos:start="103:17" pos:end="109:17">

                <expr_stmt pos:start="103:17" pos:end="103:23"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:17">y</name> <operator pos:start="103:19" pos:end="103:20">+=</operator> <name pos:start="103:22" pos:end="103:22">h</name></expr>;</expr_stmt>

                <if_stmt pos:start="105:17" pos:end="109:17"><if pos:start="105:17" pos:end="109:17">if <condition pos:start="105:20" pos:end="105:32">(<expr pos:start="105:21" pos:end="105:31"><name pos:start="105:21" pos:end="105:21">y</name> <operator pos:start="105:23" pos:end="105:24">==</operator> <name pos:start="105:26" pos:end="105:31">height</name></expr>)</condition> <block pos:start="105:34" pos:end="109:17">{<block_content pos:start="107:21" pos:end="107:26">

                    <break pos:start="107:21" pos:end="107:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="117:9" pos:end="117:26"><expr pos:start="117:9" pos:end="117:25"><call pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:20">vnc_job_push</name><argument_list pos:start="117:21" pos:end="117:25">(<argument pos:start="117:22" pos:end="117:24"><expr pos:start="117:22" pos:end="117:24"><name pos:start="117:22" pos:end="117:24">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:17">(<expr pos:start="119:13" pos:end="119:16"><name pos:start="119:13" pos:end="119:16">sync</name></expr>)</condition> <block pos:start="119:19" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:30">

            <expr_stmt pos:start="121:13" pos:end="121:30"><expr pos:start="121:13" pos:end="121:29"><call pos:start="121:13" pos:end="121:29"><name pos:start="121:13" pos:end="121:25">vnc_jobs_join</name><argument_list pos:start="121:26" pos:end="121:29">(<argument pos:start="121:27" pos:end="121:28"><expr pos:start="121:27" pos:end="121:28"><name pos:start="121:27" pos:end="121:28">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:29"><expr pos:start="125:9" pos:end="125:28"><name pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:10">vs</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:24">force_update</name></name> <operator pos:start="125:26" pos:end="125:26">=</operator> <literal type="number" pos:start="125:28" pos:end="125:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:26"><expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:10">vs</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:21">has_dirty</name></name> <operator pos:start="127:23" pos:end="127:23">=</operator> <literal type="number" pos:start="127:25" pos:end="127:25">0</literal></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:17">return <expr pos:start="129:16" pos:end="129:16"><name pos:start="129:16" pos:end="129:16">n</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="135:5" pos:end="143:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:26">(<expr pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:10">vs</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:25">disconnecting</name></name></expr>)</condition> <block pos:start="135:28" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:34">

        <expr_stmt pos:start="137:9" pos:end="137:34"><expr pos:start="137:9" pos:end="137:33"><call pos:start="137:9" pos:end="137:33"><name pos:start="137:9" pos:end="137:29">vnc_disconnect_finish</name><argument_list pos:start="137:30" pos:end="137:33">(<argument pos:start="137:31" pos:end="137:32"><expr pos:start="137:31" pos:end="137:32"><name pos:start="137:31" pos:end="137:32">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="143:5">else if <condition pos:start="139:15" pos:end="139:20">(<expr pos:start="139:16" pos:end="139:19"><name pos:start="139:16" pos:end="139:19">sync</name></expr>)</condition> <block pos:start="139:22" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:26">

        <expr_stmt pos:start="141:9" pos:end="141:26"><expr pos:start="141:9" pos:end="141:25"><call pos:start="141:9" pos:end="141:25"><name pos:start="141:9" pos:end="141:21">vnc_jobs_join</name><argument_list pos:start="141:22" pos:end="141:25">(<argument pos:start="141:23" pos:end="141:24"><expr pos:start="141:23" pos:end="141:24"><name pos:start="141:23" pos:end="141:24">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
