<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25076.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">uart_write</name><parameter_list pos:start="1:23" pos:end="3:53">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:27">void</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:35">opaque</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:48"><decl pos:start="1:38" pos:end="1:48"><type pos:start="1:38" pos:end="1:48"><name pos:start="1:38" pos:end="1:43">hwaddr</name></type> <name pos:start="1:45" pos:end="1:48">addr</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:37"><decl pos:start="3:24" pos:end="3:37"><type pos:start="3:24" pos:end="3:37"><name pos:start="3:24" pos:end="3:31">uint64_t</name></type> <name pos:start="3:33" pos:end="3:37">value</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:52"><decl pos:start="3:40" pos:end="3:52"><type pos:start="3:40" pos:end="3:52"><name pos:start="3:40" pos:end="3:47">unsigned</name></type> <name pos:start="3:49" pos:end="3:52">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:23">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">LM32UartState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:29">= <expr pos:start="7:24" pos:end="7:29"><name pos:start="7:24" pos:end="7:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:20">ch</name> <init pos:start="9:22" pos:end="9:28">= <expr pos:start="9:24" pos:end="9:28"><name pos:start="9:24" pos:end="9:28">value</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:46"><expr pos:start="13:5" pos:end="13:45"><call pos:start="13:5" pos:end="13:45"><name pos:start="13:5" pos:end="13:32">trace_lm32_uart_memory_write</name><argument_list pos:start="13:33" pos:end="13:45">(<argument pos:start="13:34" pos:end="13:37"><expr pos:start="13:34" pos:end="13:37"><name pos:start="13:34" pos:end="13:37">addr</name></expr></argument>, <argument pos:start="13:40" pos:end="13:44"><expr pos:start="13:40" pos:end="13:44"><name pos:start="13:40" pos:end="13:44">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:8">addr</name> <operator pos:start="17:10" pos:end="17:12">&gt;&gt;=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">2</literal></expr>;</expr_stmt>

    <switch pos:start="19:5" pos:end="65:5">switch <condition pos:start="19:12" pos:end="19:17">(<expr pos:start="19:13" pos:end="19:16"><name pos:start="19:13" pos:end="19:16">addr</name></expr>)</condition> <block pos:start="19:19" pos:end="65:5">{<block_content pos:start="21:5" pos:end="63:14">

    <case pos:start="21:5" pos:end="21:16">case <expr pos:start="21:10" pos:end="21:15"><name pos:start="21:10" pos:end="21:15">R_RXTX</name></expr>:</case>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:19">(<expr pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:18">chr</name></name></expr>)</condition> <block pos:start="23:21" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:50">



            <expr_stmt pos:start="27:13" pos:end="27:50"><expr pos:start="27:13" pos:end="27:49"><call pos:start="27:13" pos:end="27:49"><name pos:start="27:13" pos:end="27:33">qemu_chr_fe_write_all</name><argument_list pos:start="27:34" pos:end="27:49">(<argument pos:start="27:35" pos:end="27:40"><expr pos:start="27:35" pos:end="27:40"><name pos:start="27:35" pos:end="27:40"><name pos:start="27:35" pos:end="27:35">s</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:40">chr</name></name></expr></argument>, <argument pos:start="27:43" pos:end="27:45"><expr pos:start="27:43" pos:end="27:45"><operator pos:start="27:43" pos:end="27:43">&amp;</operator><name pos:start="27:44" pos:end="27:45">ch</name></expr></argument>, <argument pos:start="27:48" pos:end="27:48"><expr pos:start="27:48" pos:end="27:48"><literal type="number" pos:start="27:48" pos:end="27:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:15">case <expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:14">R_IER</name></expr>:</case>

    <case pos:start="35:5" pos:end="35:15">case <expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:14">R_LCR</name></expr>:</case>

    <case pos:start="37:5" pos:end="37:15">case <expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:14">R_MCR</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:15">case <expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:14">R_DIV</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:15">regs</name><index pos:start="41:16" pos:end="41:21">[<expr pos:start="41:17" pos:end="41:20"><name pos:start="41:17" pos:end="41:20">addr</name></expr>]</index></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:29">value</name></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:15">case <expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:14">R_IIR</name></expr>:</case>

    <case pos:start="47:5" pos:end="47:15">case <expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:14">R_LSR</name></expr>:</case>

    <case pos:start="49:5" pos:end="49:15">case <expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:14">R_MSR</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="53:43"><expr pos:start="51:9" pos:end="53:42"><call pos:start="51:9" pos:end="53:42"><name pos:start="51:9" pos:end="51:20">error_report</name><argument_list pos:start="51:21" pos:end="53:42">(<argument pos:start="51:22" pos:end="53:30"><expr pos:start="51:22" pos:end="53:30"><literal type="string" pos:start="51:22" pos:end="51:71">"lm32_uart: write access to read only register 0x"</literal>

                <name pos:start="53:17" pos:end="53:30">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="53:33" pos:end="53:41"><expr pos:start="53:33" pos:end="53:41"><name pos:start="53:33" pos:end="53:36">addr</name> <operator pos:start="53:38" pos:end="53:39">&lt;&lt;</operator> <literal type="number" pos:start="53:41" pos:end="53:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <default pos:start="57:5" pos:end="57:12">default:</default>

        <expr_stmt pos:start="59:9" pos:end="61:43"><expr pos:start="59:9" pos:end="61:42"><call pos:start="59:9" pos:end="61:42"><name pos:start="59:9" pos:end="59:20">error_report</name><argument_list pos:start="59:21" pos:end="61:42">(<argument pos:start="59:22" pos:end="61:30"><expr pos:start="59:22" pos:end="61:30"><literal type="string" pos:start="59:22" pos:end="59:69">"lm32_uart: write access to unknown register 0x"</literal>

                <name pos:start="61:17" pos:end="61:30">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="61:33" pos:end="61:41"><expr pos:start="61:33" pos:end="61:41"><name pos:start="61:33" pos:end="61:36">addr</name> <operator pos:start="61:38" pos:end="61:39">&lt;&lt;</operator> <literal type="number" pos:start="61:41" pos:end="61:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="67:5" pos:end="67:23"><expr pos:start="67:5" pos:end="67:22"><call pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:19">uart_update_irq</name><argument_list pos:start="67:20" pos:end="67:22">(<argument pos:start="67:21" pos:end="67:21"><expr pos:start="67:21" pos:end="67:21"><name pos:start="67:21" pos:end="67:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
