<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8153.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:25"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">rtas_ibm_configure_connector</name><parameter_list pos:start="1:41" pos:end="9:59">(<parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:56"><name pos:start="1:42" pos:end="1:51">PowerPCCPU</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">cpu</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:65"><decl pos:start="3:42" pos:end="3:65"><type pos:start="3:42" pos:end="3:65"><name pos:start="3:42" pos:end="3:58">sPAPRMachineState</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:65">spapr</name></decl></parameter>,

                                         <parameter pos:start="5:42" pos:end="5:55"><decl pos:start="5:42" pos:end="5:55"><type pos:start="5:42" pos:end="5:55"><name pos:start="5:42" pos:end="5:49">uint32_t</name></type> <name pos:start="5:51" pos:end="5:55">token</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:71"><decl pos:start="5:58" pos:end="5:71"><type pos:start="5:58" pos:end="5:71"><name pos:start="5:58" pos:end="5:65">uint32_t</name></type> <name pos:start="5:67" pos:end="5:71">nargs</name></decl></parameter>,

                                         <parameter pos:start="7:42" pos:end="7:58"><decl pos:start="7:42" pos:end="7:58"><type pos:start="7:42" pos:end="7:58"><name pos:start="7:42" pos:end="7:53">target_ulong</name></type> <name pos:start="7:55" pos:end="7:58">args</name></decl></parameter>, <parameter pos:start="7:61" pos:end="7:73"><decl pos:start="7:61" pos:end="7:73"><type pos:start="7:61" pos:end="7:73"><name pos:start="7:61" pos:end="7:68">uint32_t</name></type> <name pos:start="7:70" pos:end="7:73">nret</name></decl></parameter>,

                                         <parameter pos:start="9:42" pos:end="9:58"><decl pos:start="9:42" pos:end="9:58"><type pos:start="9:42" pos:end="9:58"><name pos:start="9:42" pos:end="9:53">target_ulong</name></type> <name pos:start="9:55" pos:end="9:58">rets</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="225:25">{<block_content pos:start="13:5" pos:end="225:25">

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:20">wa_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">wa_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:22">drc_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">sPAPRDRConnector</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:25">drc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:25">sPAPRDRConnectorClass</name> <modifier pos:start="21:27" pos:end="21:27">*</modifier></type><name pos:start="21:28" pos:end="21:31">drck</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:38"><decl pos:start="23:5" pos:end="23:37"><type pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:32">sPAPRConfigureConnectorState</name> <modifier pos:start="23:34" pos:end="23:34">*</modifier></type><name pos:start="23:35" pos:end="23:37">ccs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:59"><decl pos:start="25:5" pos:end="25:58"><type pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:21">sPAPRDRCCResponse</name></type> <name pos:start="25:23" pos:end="25:26">resp</name> <init pos:start="25:28" pos:end="25:58">= <expr pos:start="25:30" pos:end="25:58"><name pos:start="25:30" pos:end="25:58">SPAPR_DR_CC_RESPONSE_CONTINUE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:11"><decl pos:start="27:5" pos:end="27:10"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">void</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:19">fdt</name></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="225:25"><if pos:start="33:5" pos:end="225:25">if <condition pos:start="33:8" pos:end="33:32">(<expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:13">nargs</name> <operator pos:start="33:15" pos:end="33:16">!=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">2</literal> <operator pos:start="33:20" pos:end="33:21">||</operator> <name pos:start="33:23" pos:end="33:26">nret</name> <operator pos:start="33:28" pos:end="33:29">!=</operator> <literal type="number" pos:start="33:31" pos:end="33:31">1</literal></expr>)</condition> <block pos:start="33:34" pos:end="225:25">{<block_content pos:start="35:9" pos:end="225:25">

        <expr_stmt pos:start="35:9" pos:end="35:47"><expr pos:start="35:9" pos:end="35:46"><call pos:start="35:9" pos:end="35:46"><name pos:start="35:9" pos:end="35:15">rtas_st</name><argument_list pos:start="35:16" pos:end="35:46">(<argument pos:start="35:17" pos:end="35:20"><expr pos:start="35:17" pos:end="35:20"><name pos:start="35:17" pos:end="35:20">rets</name></expr></argument>, <argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr></argument>, <argument pos:start="35:26" pos:end="35:45"><expr pos:start="35:26" pos:end="35:45"><name pos:start="35:26" pos:end="35:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>




    <expr_stmt pos:start="42:5" pos:end="42:68"><expr pos:start="42:5" pos:end="42:67"><name pos:start="42:5" pos:end="42:11">wa_addr</name> <operator pos:start="42:13" pos:end="42:13">=</operator> <operator pos:start="42:15" pos:end="42:15">(</operator><operator pos:start="42:16" pos:end="42:16">(</operator><name pos:start="42:17" pos:end="42:24">uint64_t</name><operator pos:start="42:25" pos:end="42:25">)</operator><call pos:start="42:26" pos:end="42:41"><name pos:start="42:26" pos:end="42:32">rtas_ld</name><argument_list pos:start="42:33" pos:end="42:41">(<argument pos:start="42:34" pos:end="42:37"><expr pos:start="42:34" pos:end="42:37"><name pos:start="42:34" pos:end="42:37">args</name></expr></argument>, <argument pos:start="42:40" pos:end="42:40"><expr pos:start="42:40" pos:end="42:40"><literal type="number" pos:start="42:40" pos:end="42:40">1</literal></expr></argument>)</argument_list></call> <operator pos:start="42:43" pos:end="42:44">&lt;&lt;</operator> <literal type="number" pos:start="42:46" pos:end="42:47">32</literal><operator pos:start="42:48" pos:end="42:48">)</operator> <operator pos:start="42:50" pos:end="42:50">|</operator> <call pos:start="42:52" pos:end="42:67"><name pos:start="42:52" pos:end="42:58">rtas_ld</name><argument_list pos:start="42:59" pos:end="42:67">(<argument pos:start="42:60" pos:end="42:63"><expr pos:start="42:60" pos:end="42:63"><name pos:start="42:60" pos:end="42:63">args</name></expr></argument>, <argument pos:start="42:66" pos:end="42:66"><expr pos:start="42:66" pos:end="42:66"><literal type="number" pos:start="42:66" pos:end="42:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="46:5" pos:end="46:36"><expr pos:start="46:5" pos:end="46:35"><name pos:start="46:5" pos:end="46:13">drc_index</name> <operator pos:start="46:15" pos:end="46:15">=</operator> <call pos:start="46:17" pos:end="46:35"><name pos:start="46:17" pos:end="46:23">rtas_ld</name><argument_list pos:start="46:24" pos:end="46:35">(<argument pos:start="46:25" pos:end="46:31"><expr pos:start="46:25" pos:end="46:31"><name pos:start="46:25" pos:end="46:31">wa_addr</name></expr></argument>, <argument pos:start="46:34" pos:end="46:34"><expr pos:start="46:34" pos:end="46:34"><literal type="number" pos:start="46:34" pos:end="46:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="48:5" pos:end="48:49"><expr pos:start="48:5" pos:end="48:48"><name pos:start="48:5" pos:end="48:7">drc</name> <operator pos:start="48:9" pos:end="48:9">=</operator> <call pos:start="48:11" pos:end="48:48"><name pos:start="48:11" pos:end="48:37">spapr_dr_connector_by_index</name><argument_list pos:start="48:38" pos:end="48:48">(<argument pos:start="48:39" pos:end="48:47"><expr pos:start="48:39" pos:end="48:47"><name pos:start="48:39" pos:end="48:47">drc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="50:5" pos:end="225:25"><if pos:start="50:5" pos:end="225:25">if <condition pos:start="50:8" pos:end="50:13">(<expr pos:start="50:9" pos:end="50:12"><operator pos:start="50:9" pos:end="50:9">!</operator><name pos:start="50:10" pos:end="50:12">drc</name></expr>)</condition> <block pos:start="50:15" pos:end="225:25">{<block_content pos:start="52:9" pos:end="225:25">

        <macro pos:start="52:9" pos:end="225:25"><name pos:start="52:9" pos:end="52:15">DPRINTF</name><argument_list pos:start="52:16" pos:end="225:25">(<argument pos:start="52:17" pos:end="52:72"><literal type="string" pos:start="52:17" pos:end="52:72">"rtas_ibm_configure_connector: invalid DRC index: %xh\n"</literal></argument>,


        <argument pos:start="55:9" pos:end="96:27">rc = RTAS_OUT_PARAM_ERROR;





    drck = SPAPR_DR_CONNECTOR_GET_CLASS(drc);

    fdt = drck-&gt;get_fdt(drc, NULL);









    ccs = spapr_ccs_find(spapr, drc_index);

    if (!ccs) {

        ccs = g_new0(sPAPRConfigureConnectorState, <literal type="number" pos:start="77:52" pos:end="77:52">1</literal>);

        (void)drck-&gt;get_fdt(drc, &amp;ccs-&gt;fdt_offset);

        ccs-&gt;drc_index = drc_index;

        spapr_ccs_add(spapr, ccs);




    do {

        uint32_t tag;

        const char *name;

        const struct fdt_property *prop;

        int fdt_offset_next</argument>, <argument pos:start="96:30" pos:end="185:41">prop_len;



        tag = fdt_next_tag(fdt, ccs-&gt;fdt_offset, &amp;fdt_offset_next);



        switch (tag) {

        case FDT_BEGIN_NODE:

            ccs-&gt;fdt_depth++;

            name = fdt_get_name(fdt, ccs-&gt;fdt_offset, NULL);



            <comment type="block" pos:start="114:13" pos:end="114:54">/* provide the name of the next OF node */</comment>

            wa_offset = CC_VAL_DATA_OFFSET;

            rtas_st(wa_addr, CC_IDX_NODE_NAME_OFFSET, wa_offset);

            rtas_st_buffer_direct(wa_addr + wa_offset, CC_WA_LEN - wa_offset,

                                  (uint8_t *)name, strlen(name) + <literal type="number" pos:start="122:67" pos:end="122:67">1</literal>);

            resp = SPAPR_DR_CC_RESPONSE_NEXT_CHILD;

            break;

        case FDT_END_NODE:

            ccs-&gt;fdt_depth--;

            if (ccs-&gt;fdt_depth == <literal type="number" pos:start="132:35" pos:end="132:35">0</literal>) {

                <comment type="block" pos:start="134:17" pos:end="138:19">/* done sending the device tree, don't need to track

                 * the state anymore

                 */</comment>

                drck-&gt;set_configured(drc);

                spapr_ccs_remove(spapr, ccs);

                ccs = NULL;

                resp = SPAPR_DR_CC_RESPONSE_SUCCESS;

            } else {

                resp = SPAPR_DR_CC_RESPONSE_PREV_PARENT;


            break;

        case FDT_PROP:

            prop = fdt_get_property_by_offset(fdt, ccs-&gt;fdt_offset,

                                              &amp;prop_len);

            name = fdt_string(fdt, fdt32_to_cpu(prop-&gt;nameoff));



            <comment type="block" pos:start="165:13" pos:end="165:58">/* provide the name of the next OF property */</comment>

            wa_offset = CC_VAL_DATA_OFFSET;

            rtas_st(wa_addr, CC_IDX_PROP_NAME_OFFSET, wa_offset);

            rtas_st_buffer_direct(wa_addr + wa_offset, CC_WA_LEN - wa_offset,

                                  (uint8_t *)name, strlen(name) + <literal type="number" pos:start="173:67" pos:end="173:67">1</literal>);



            <comment type="block" pos:start="177:13" pos:end="183:15">/* provide the length and value of the OF property. data gets

             * placed immediately after NULL terminator of the OF property's

             * name string

             */</comment>

            wa_offset += strlen(name) + <literal type="number" pos:start="185:41" pos:end="185:41">1</literal></argument>,

            <argument pos:start="187:13" pos:end="225:25">rtas_st(wa_addr, CC_IDX_PROP_LEN, prop_len);

            rtas_st(wa_addr, CC_IDX_PROP_DATA_OFFSET, wa_offset);

            rtas_st_buffer_direct(wa_addr + wa_offset, CC_WA_LEN - wa_offset,

                                  (uint8_t *)((struct fdt_property *)prop)-&gt;data,

                                  prop_len);

            resp = SPAPR_DR_CC_RESPONSE_NEXT_PROPERTY;

            break;

        case FDT_END:

            resp = SPAPR_DR_CC_RESPONSE_ERROR;

        default:

            <comment type="block" pos:start="207:13" pos:end="207:52">/* keep seeking for an actionable tag */</comment>

            break;


        if (ccs) {

            ccs-&gt;fdt_offset = fdt_offset_next;


    } while (resp == SPAPR_DR_CC_RESPONSE_CONTINUE);



    rc = resp;

out:

    rtas_st(rets, <literal type="number" pos:start="225:19" pos:end="225:19">0</literal>, rc);</argument></argument_list></macro></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
