<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23320.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:24"><name pos:start="1:1" pos:end="1:8">ip_input</name><argument_list pos:start="1:9" pos:end="1:24">(<argument pos:start="1:10" pos:end="1:23">struct mbuf *m</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="281:1">{<block_content pos:start="5:9" pos:end="279:18">

	<decl_stmt pos:start="5:9" pos:end="5:32"><decl pos:start="5:9" pos:end="5:31"><type pos:start="5:9" pos:end="5:15"><name pos:start="5:9" pos:end="5:13">Slirp</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">slirp</name> <init pos:start="5:22" pos:end="5:31">= <expr pos:start="5:24" pos:end="5:31"><name pos:start="5:24" pos:end="5:31"><name pos:start="5:24" pos:end="5:24">m</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:31">slirp</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:31"><decl pos:start="7:9" pos:end="7:30"><type pos:start="7:9" pos:end="7:28"><specifier pos:start="7:9" pos:end="7:16">register</specifier> <name pos:start="7:18" pos:end="7:26"><name pos:start="7:18" pos:end="7:23">struct</name> <name pos:start="7:25" pos:end="7:26">ip</name></name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:30">ip</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:17"><decl pos:start="9:9" pos:end="9:16"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:16">hlen</name></decl>;</decl_stmt>



	<expr_stmt pos:start="13:9" pos:end="13:31"><expr pos:start="13:9" pos:end="13:30"><call pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:18">DEBUG_CALL</name><argument_list pos:start="13:19" pos:end="13:30">(<argument pos:start="13:20" pos:end="13:29"><expr pos:start="13:20" pos:end="13:29"><literal type="string" pos:start="13:20" pos:end="13:29">"ip_input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="15:9" pos:end="15:31"><expr pos:start="15:9" pos:end="15:30"><call pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:17">DEBUG_ARG</name><argument_list pos:start="15:18" pos:end="15:30">(<argument pos:start="15:19" pos:end="15:26"><expr pos:start="15:19" pos:end="15:26"><literal type="string" pos:start="15:19" pos:end="15:26">"m = %p"</literal></expr></argument>, <argument pos:start="15:29" pos:end="15:29"><expr pos:start="15:29" pos:end="15:29"><name pos:start="15:29" pos:end="15:29">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="17:9" pos:end="17:42"><expr pos:start="17:9" pos:end="17:41"><call pos:start="17:9" pos:end="17:41"><name pos:start="17:9" pos:end="17:17">DEBUG_ARG</name><argument_list pos:start="17:18" pos:end="17:41">(<argument pos:start="17:19" pos:end="17:30"><expr pos:start="17:19" pos:end="17:30"><literal type="string" pos:start="17:19" pos:end="17:30">"m_len = %d"</literal></expr></argument>, <argument pos:start="17:33" pos:end="17:40"><expr pos:start="17:33" pos:end="17:40"><name pos:start="17:33" pos:end="17:40"><name pos:start="17:33" pos:end="17:33">m</name><operator pos:start="17:34" pos:end="17:35">-&gt;</operator><name pos:start="17:36" pos:end="17:40">m_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:42">(<expr pos:start="21:13" pos:end="21:41"><name pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:13">m</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:20">m_len</name></name> <operator pos:start="21:22" pos:end="21:22">&lt;</operator> <sizeof pos:start="21:24" pos:end="21:41">sizeof <argument_list pos:start="21:31" pos:end="21:41">(<argument pos:start="21:32" pos:end="21:40"><expr pos:start="21:32" pos:end="21:40">struct <name pos:start="21:39" pos:end="21:40">ip</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="21:44" pos:end="25:9">{<block_content pos:start="23:17" pos:end="23:23">

		<return pos:start="23:17" pos:end="23:23">return;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="29:9" pos:end="29:34"><expr pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:10">ip</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="29:33"><name pos:start="29:14" pos:end="29:17">mtod</name><argument_list pos:start="29:18" pos:end="29:33">(<argument pos:start="29:19" pos:end="29:19"><expr pos:start="29:19" pos:end="29:19"><name pos:start="29:19" pos:end="29:19">m</name></expr></argument>, <argument pos:start="29:22" pos:end="29:32"><expr pos:start="29:22" pos:end="29:32">struct <name pos:start="29:29" pos:end="29:30">ip</name> <operator pos:start="29:32" pos:end="29:32">*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:34">(<expr pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:14">ip</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:20">ip_v</name></name> <operator pos:start="33:22" pos:end="33:23">!=</operator> <name pos:start="33:25" pos:end="33:33">IPVERSION</name></expr>)</condition> <block pos:start="33:36" pos:end="37:9">{<block_content pos:start="35:17" pos:end="35:25">

		<goto pos:start="35:17" pos:end="35:25">goto <name pos:start="35:22" pos:end="35:24">bad</name>;</goto>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:12">hlen</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:24"><name pos:start="41:16" pos:end="41:17">ip</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:24">ip_hl</name></name> <operator pos:start="41:26" pos:end="41:27">&lt;&lt;</operator> <literal type="number" pos:start="41:29" pos:end="41:29">2</literal></expr>;</expr_stmt>

	<if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:53">(<expr pos:start="43:13" pos:end="43:52"><name pos:start="43:13" pos:end="43:16">hlen</name><operator pos:start="43:17" pos:end="43:17">&lt;</operator><sizeof pos:start="43:18" pos:end="43:35">sizeof<argument_list pos:start="43:24" pos:end="43:35">(<argument pos:start="43:25" pos:end="43:33"><expr pos:start="43:25" pos:end="43:33">struct <name pos:start="43:32" pos:end="43:33">ip</name></expr></argument> )</argument_list></sizeof> <operator pos:start="43:37" pos:end="43:38">||</operator> <name pos:start="43:40" pos:end="43:43">hlen</name><operator pos:start="43:44" pos:end="43:44">&gt;</operator><name pos:start="43:45" pos:end="43:52"><name pos:start="43:45" pos:end="43:45">m</name><operator pos:start="43:46" pos:end="43:47">-&gt;</operator><name pos:start="43:48" pos:end="43:52">m_len</name></name></expr>)</condition> <block pos:start="43:55" pos:end="47:9">{<block_content pos:start="45:11" pos:end="45:19"><comment type="block" pos:start="43:56" pos:end="43:78">/* min header length */</comment>

	  <goto pos:start="45:11" pos:end="45:19">goto <name pos:start="45:16" pos:end="45:18">bad</name>;</goto>                                  <comment type="block" pos:start="45:54" pos:end="45:78">/* or packet too short */</comment>

	</block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="51:9" pos:end="57:11">/* keep ip header intact for ICMP reply

	 * ip-&gt;ip_sum = cksum(m, hlen);

	 * if (ip-&gt;ip_sum) {

	 */</comment>

	<if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if<condition pos:start="59:11" pos:end="59:25">(<expr pos:start="59:12" pos:end="59:24"><call pos:start="59:12" pos:end="59:24"><name pos:start="59:12" pos:end="59:16">cksum</name><argument_list pos:start="59:17" pos:end="59:24">(<argument pos:start="59:18" pos:end="59:18"><expr pos:start="59:18" pos:end="59:18"><name pos:start="59:18" pos:end="59:18">m</name></expr></argument>,<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">hlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:27" pos:end="63:9">{<block_content pos:start="61:11" pos:end="61:19">

	  <goto pos:start="61:11" pos:end="61:19">goto <name pos:start="61:16" pos:end="61:18">bad</name>;</goto>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="67:9" pos:end="71:11">/*

	 * Convert fields to host representation.

	 */</comment>

	<expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><call pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:13">NTOHS</name><argument_list pos:start="73:14" pos:end="73:25">(<argument pos:start="73:15" pos:end="73:24"><expr pos:start="73:15" pos:end="73:24"><name pos:start="73:15" pos:end="73:24"><name pos:start="73:15" pos:end="73:16">ip</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:24">ip_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:30">(<expr pos:start="75:13" pos:end="75:29"><name pos:start="75:13" pos:end="75:22"><name pos:start="75:13" pos:end="75:14">ip</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:22">ip_len</name></name> <operator pos:start="75:24" pos:end="75:24">&lt;</operator> <name pos:start="75:26" pos:end="75:29">hlen</name></expr>)</condition> <block pos:start="75:32" pos:end="79:9">{<block_content pos:start="77:17" pos:end="77:25">

		<goto pos:start="77:17" pos:end="77:25">goto <name pos:start="77:22" pos:end="77:24">bad</name>;</goto>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="81:9" pos:end="81:25"><expr pos:start="81:9" pos:end="81:24"><call pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:13">NTOHS</name><argument_list pos:start="81:14" pos:end="81:24">(<argument pos:start="81:15" pos:end="81:23"><expr pos:start="81:15" pos:end="81:23"><name pos:start="81:15" pos:end="81:23"><name pos:start="81:15" pos:end="81:16">ip</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:23">ip_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><call pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:13">NTOHS</name><argument_list pos:start="83:14" pos:end="83:25">(<argument pos:start="83:15" pos:end="83:24"><expr pos:start="83:15" pos:end="83:24"><name pos:start="83:15" pos:end="83:24"><name pos:start="83:15" pos:end="83:16">ip</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:24">ip_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="87:9" pos:end="97:11">/*

	 * Check that the amount of data in the buffers

	 * is as at least much as the IP header would have us expect.

	 * Trim mbufs if longer than we expect.

	 * Drop packet if shorter than we expect.

	 */</comment>

	<if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:34">(<expr pos:start="99:13" pos:end="99:33"><name pos:start="99:13" pos:end="99:20"><name pos:start="99:13" pos:end="99:13">m</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:20">m_len</name></name> <operator pos:start="99:22" pos:end="99:22">&lt;</operator> <name pos:start="99:24" pos:end="99:33"><name pos:start="99:24" pos:end="99:25">ip</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:33">ip_len</name></name></expr>)</condition> <block pos:start="99:36" pos:end="103:9">{<block_content pos:start="101:17" pos:end="101:25">

		<goto pos:start="101:17" pos:end="101:25">goto <name pos:start="101:22" pos:end="101:24">bad</name>;</goto>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="107:9" pos:end="107:58">/* Should drop packet if mbuf too long? hmmm... */</comment>

	<if_stmt pos:start="109:9" pos:end="111:43"><if pos:start="109:9" pos:end="111:43">if <condition pos:start="109:12" pos:end="109:34">(<expr pos:start="109:13" pos:end="109:33"><name pos:start="109:13" pos:end="109:20"><name pos:start="109:13" pos:end="109:13">m</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:20">m_len</name></name> <operator pos:start="109:22" pos:end="109:22">&gt;</operator> <name pos:start="109:24" pos:end="109:33"><name pos:start="109:24" pos:end="109:25">ip</name><operator pos:start="109:26" pos:end="109:27">-&gt;</operator><name pos:start="109:28" pos:end="109:33">ip_len</name></name></expr>)</condition><block type="pseudo" pos:start="111:12" pos:end="111:43"><block_content pos:start="111:12" pos:end="111:43">

	   <expr_stmt pos:start="111:12" pos:end="111:43"><expr pos:start="111:12" pos:end="111:42"><call pos:start="111:12" pos:end="111:42"><name pos:start="111:12" pos:end="111:16">m_adj</name><argument_list pos:start="111:17" pos:end="111:42">(<argument pos:start="111:18" pos:end="111:18"><expr pos:start="111:18" pos:end="111:18"><name pos:start="111:18" pos:end="111:18">m</name></expr></argument>, <argument pos:start="111:21" pos:end="111:41"><expr pos:start="111:21" pos:end="111:41"><name pos:start="111:21" pos:end="111:30"><name pos:start="111:21" pos:end="111:22">ip</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:30">ip_len</name></name> <operator pos:start="111:32" pos:end="111:32">-</operator> <name pos:start="111:34" pos:end="111:41"><name pos:start="111:34" pos:end="111:34">m</name><operator pos:start="111:35" pos:end="111:36">-&gt;</operator><name pos:start="111:37" pos:end="111:41">m_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<comment type="block" pos:start="115:9" pos:end="115:51">/* check ip_ttl for a correct ICMP reply */</comment>

	<if_stmt pos:start="117:9" pos:end="123:9"><if pos:start="117:9" pos:end="123:9">if <condition pos:start="117:12" pos:end="117:28">(<expr pos:start="117:13" pos:end="117:27"><name pos:start="117:13" pos:end="117:22"><name pos:start="117:13" pos:end="117:14">ip</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:22">ip_ttl</name></name> <operator pos:start="117:24" pos:end="117:25">==</operator> <literal type="number" pos:start="117:27" pos:end="117:27">0</literal></expr>)</condition> <block pos:start="117:30" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:21">

	    <expr_stmt pos:start="119:13" pos:end="119:79"><expr pos:start="119:13" pos:end="119:78"><call pos:start="119:13" pos:end="119:78"><name pos:start="119:13" pos:end="119:27">icmp_send_error</name><argument_list pos:start="119:28" pos:end="119:78">(<argument pos:start="119:29" pos:end="119:29"><expr pos:start="119:29" pos:end="119:29"><name pos:start="119:29" pos:end="119:29">m</name></expr></argument>, <argument pos:start="119:32" pos:end="119:44"><expr pos:start="119:32" pos:end="119:44"><name pos:start="119:32" pos:end="119:44">ICMP_TIMXCEED</name></expr></argument>, <argument pos:start="119:47" pos:end="119:67"><expr pos:start="119:47" pos:end="119:67"><name pos:start="119:47" pos:end="119:67">ICMP_TIMXCEED_INTRANS</name></expr></argument>, <argument pos:start="119:70" pos:end="119:70"><expr pos:start="119:70" pos:end="119:70"><literal type="number" pos:start="119:70" pos:end="119:70">0</literal></expr></argument>, <argument pos:start="119:73" pos:end="119:77"><expr pos:start="119:73" pos:end="119:77"><literal type="string" pos:start="119:73" pos:end="119:77">"ttl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <goto pos:start="121:13" pos:end="121:21">goto <name pos:start="121:18" pos:end="121:20">bad</name>;</goto>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="127:9" pos:end="143:11">/*

	 * If offset or IP_MF are set, must reassemble.

	 * Otherwise, nothing need be done.

	 * (We could look in the reassembly queue to see

	 * if the packet was previously fragmented,

	 * but it's not worth the time; just let them time out.)

	 *

	 * XXX This should fail, don't fragment yet

	 */</comment>

	<if_stmt pos:start="145:9" pos:end="239:35"><if pos:start="145:9" pos:end="237:9">if <condition pos:start="145:12" pos:end="145:32">(<expr pos:start="145:13" pos:end="145:31"><name pos:start="145:13" pos:end="145:22"><name pos:start="145:13" pos:end="145:14">ip</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:22">ip_off</name></name> <operator pos:start="145:24" pos:end="145:24">&amp;</operator><operator pos:start="145:25" pos:end="145:25">~</operator> <name pos:start="145:27" pos:end="145:31">IP_DF</name></expr>)</condition> <block pos:start="145:34" pos:end="237:9">{<block_content pos:start="147:11" pos:end="233:47">

	  <decl_stmt pos:start="147:11" pos:end="147:34"><decl pos:start="147:11" pos:end="147:33"><type pos:start="147:11" pos:end="147:31"><specifier pos:start="147:11" pos:end="147:18">register</specifier> <name pos:start="147:20" pos:end="147:29"><name pos:start="147:20" pos:end="147:25">struct</name> <name pos:start="147:27" pos:end="147:29">ipq</name></name> <modifier pos:start="147:31" pos:end="147:31">*</modifier></type><name pos:start="147:32" pos:end="147:33">fp</name></decl>;</decl_stmt>

      <decl_stmt pos:start="149:7" pos:end="149:22"><decl pos:start="149:7" pos:end="149:21"><type pos:start="149:7" pos:end="149:20"><name pos:start="149:7" pos:end="149:18"><name pos:start="149:7" pos:end="149:12">struct</name> <name pos:start="149:14" pos:end="149:18">qlink</name></name> <modifier pos:start="149:20" pos:end="149:20">*</modifier></type><name pos:start="149:21" pos:end="149:21">l</name></decl>;</decl_stmt>

		<comment type="block" pos:start="151:17" pos:end="157:19">/*

		 * Look for queue of fragments

		 * of this datagram.

		 */</comment>

		<for pos:start="159:17" pos:end="175:9">for <control pos:start="159:21" pos:end="161:33">(<init pos:start="159:22" pos:end="159:49"><expr pos:start="159:22" pos:end="159:48"><name pos:start="159:22" pos:end="159:22">l</name> <operator pos:start="159:24" pos:end="159:24">=</operator> <name pos:start="159:26" pos:end="159:48"><name pos:start="159:26" pos:end="159:30">slirp</name><operator pos:start="159:31" pos:end="159:32">-&gt;</operator><name pos:start="159:33" pos:end="159:35">ipq</name><operator pos:start="159:36" pos:end="159:36">.</operator><name pos:start="159:37" pos:end="159:43">ip_link</name><operator pos:start="159:44" pos:end="159:44">.</operator><name pos:start="159:45" pos:end="159:48">next</name></name></expr>;</init> <condition pos:start="159:51" pos:end="159:75"><expr pos:start="159:51" pos:end="159:74"><name pos:start="159:51" pos:end="159:51">l</name> <operator pos:start="159:53" pos:end="159:54">!=</operator> <operator pos:start="159:56" pos:end="159:56">&amp;</operator><name pos:start="159:57" pos:end="159:74"><name pos:start="159:57" pos:end="159:61">slirp</name><operator pos:start="159:62" pos:end="159:63">-&gt;</operator><name pos:start="159:64" pos:end="159:66">ipq</name><operator pos:start="159:67" pos:end="159:67">.</operator><name pos:start="159:68" pos:end="159:74">ip_link</name></name></expr>;</condition>

		     <incr pos:start="161:22" pos:end="161:32"><expr pos:start="161:22" pos:end="161:32"><name pos:start="161:22" pos:end="161:22">l</name> <operator pos:start="161:24" pos:end="161:24">=</operator> <name pos:start="161:26" pos:end="161:32"><name pos:start="161:26" pos:end="161:26">l</name><operator pos:start="161:27" pos:end="161:28">-&gt;</operator><name pos:start="161:29" pos:end="161:32">next</name></name></expr></incr>)</control> <block pos:start="161:35" pos:end="175:9">{<block_content pos:start="163:13" pos:end="173:31">

            <expr_stmt pos:start="163:13" pos:end="163:54"><expr pos:start="163:13" pos:end="163:53"><name pos:start="163:13" pos:end="163:14">fp</name> <operator pos:start="163:16" pos:end="163:16">=</operator> <call pos:start="163:18" pos:end="163:53"><name pos:start="163:18" pos:end="163:29">container_of</name><argument_list pos:start="163:30" pos:end="163:53">(<argument pos:start="163:31" pos:end="163:31"><expr pos:start="163:31" pos:end="163:31"><name pos:start="163:31" pos:end="163:31">l</name></expr></argument>, <argument pos:start="163:34" pos:end="163:43"><expr pos:start="163:34" pos:end="163:43">struct <name pos:start="163:41" pos:end="163:43">ipq</name></expr></argument>, <argument pos:start="163:46" pos:end="163:52"><expr pos:start="163:46" pos:end="163:52"><name pos:start="163:46" pos:end="163:52">ip_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="165:13" pos:end="173:31"><if pos:start="165:13" pos:end="173:31">if <condition pos:start="165:16" pos:end="171:42">(<expr pos:start="165:17" pos:end="171:41"><name pos:start="165:17" pos:end="165:25"><name pos:start="165:17" pos:end="165:18">ip</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:25">ip_id</name></name> <operator pos:start="165:27" pos:end="165:28">==</operator> <name pos:start="165:30" pos:end="165:39"><name pos:start="165:30" pos:end="165:31">fp</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:39">ipq_id</name></name> <operator pos:start="165:41" pos:end="165:42">&amp;&amp;</operator>

                    <name pos:start="167:21" pos:end="167:37"><name pos:start="167:21" pos:end="167:22">ip</name><operator pos:start="167:23" pos:end="167:24">-&gt;</operator><name pos:start="167:25" pos:end="167:30">ip_src</name><operator pos:start="167:31" pos:end="167:31">.</operator><name pos:start="167:32" pos:end="167:37">s_addr</name></name> <operator pos:start="167:39" pos:end="167:40">==</operator> <name pos:start="167:42" pos:end="167:59"><name pos:start="167:42" pos:end="167:43">fp</name><operator pos:start="167:44" pos:end="167:45">-&gt;</operator><name pos:start="167:46" pos:end="167:52">ipq_src</name><operator pos:start="167:53" pos:end="167:53">.</operator><name pos:start="167:54" pos:end="167:59">s_addr</name></name> <operator pos:start="167:61" pos:end="167:62">&amp;&amp;</operator>

                    <name pos:start="169:21" pos:end="169:37"><name pos:start="169:21" pos:end="169:22">ip</name><operator pos:start="169:23" pos:end="169:24">-&gt;</operator><name pos:start="169:25" pos:end="169:30">ip_dst</name><operator pos:start="169:31" pos:end="169:31">.</operator><name pos:start="169:32" pos:end="169:37">s_addr</name></name> <operator pos:start="169:39" pos:end="169:40">==</operator> <name pos:start="169:42" pos:end="169:59"><name pos:start="169:42" pos:end="169:43">fp</name><operator pos:start="169:44" pos:end="169:45">-&gt;</operator><name pos:start="169:46" pos:end="169:52">ipq_dst</name><operator pos:start="169:53" pos:end="169:53">.</operator><name pos:start="169:54" pos:end="169:59">s_addr</name></name> <operator pos:start="169:61" pos:end="169:62">&amp;&amp;</operator>

                    <name pos:start="171:21" pos:end="171:28"><name pos:start="171:21" pos:end="171:22">ip</name><operator pos:start="171:23" pos:end="171:24">-&gt;</operator><name pos:start="171:25" pos:end="171:28">ip_p</name></name> <operator pos:start="171:30" pos:end="171:31">==</operator> <name pos:start="171:33" pos:end="171:41"><name pos:start="171:33" pos:end="171:34">fp</name><operator pos:start="171:35" pos:end="171:36">-&gt;</operator><name pos:start="171:37" pos:end="171:41">ipq_p</name></name></expr>)</condition><block type="pseudo" pos:start="173:21" pos:end="173:31"><block_content pos:start="173:21" pos:end="173:31">

		    <goto pos:start="173:21" pos:end="173:31">goto <name pos:start="173:26" pos:end="173:30">found</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="177:9" pos:end="177:18"><expr pos:start="177:9" pos:end="177:17"><name pos:start="177:9" pos:end="177:10">fp</name> <operator pos:start="177:12" pos:end="177:12">=</operator> <name pos:start="177:14" pos:end="177:17">NULL</name></expr>;</expr_stmt>

	<label pos:start="179:9" pos:end="179:14"><name pos:start="179:9" pos:end="179:13">found</name>:</label>



		<comment type="block" pos:start="183:17" pos:end="191:19">/*

		 * Adjust ip_len to not reflect header,

		 * set ip_mff if more fragments are expected,

		 * convert offset of this to bytes.

		 */</comment>

		<expr_stmt pos:start="193:17" pos:end="193:35"><expr pos:start="193:17" pos:end="193:34"><name pos:start="193:17" pos:end="193:26"><name pos:start="193:17" pos:end="193:18">ip</name><operator pos:start="193:19" pos:end="193:20">-&gt;</operator><name pos:start="193:21" pos:end="193:26">ip_len</name></name> <operator pos:start="193:28" pos:end="193:29">-=</operator> <name pos:start="193:31" pos:end="193:34">hlen</name></expr>;</expr_stmt>

		<if_stmt pos:start="195:17" pos:end="201:35"><if pos:start="195:17" pos:end="197:34">if <condition pos:start="195:20" pos:end="195:39">(<expr pos:start="195:21" pos:end="195:38"><name pos:start="195:21" pos:end="195:30"><name pos:start="195:21" pos:end="195:22">ip</name><operator pos:start="195:23" pos:end="195:24">-&gt;</operator><name pos:start="195:25" pos:end="195:30">ip_off</name></name> <operator pos:start="195:32" pos:end="195:32">&amp;</operator> <name pos:start="195:34" pos:end="195:38">IP_MF</name></expr>)</condition><block type="pseudo" pos:start="197:19" pos:end="197:34"><block_content pos:start="197:19" pos:end="197:34">

		  <expr_stmt pos:start="197:19" pos:end="197:34"><expr pos:start="197:19" pos:end="197:33"><name pos:start="197:19" pos:end="197:28"><name pos:start="197:19" pos:end="197:20">ip</name><operator pos:start="197:21" pos:end="197:22">-&gt;</operator><name pos:start="197:23" pos:end="197:28">ip_tos</name></name> <operator pos:start="197:30" pos:end="197:31">|=</operator> <literal type="number" pos:start="197:33" pos:end="197:33">1</literal></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="199:17" pos:end="201:35">else<block type="pseudo" pos:start="201:19" pos:end="201:35"><block_content pos:start="201:19" pos:end="201:35">

		  <expr_stmt pos:start="201:19" pos:end="201:35"><expr pos:start="201:19" pos:end="201:34"><name pos:start="201:19" pos:end="201:28"><name pos:start="201:19" pos:end="201:20">ip</name><operator pos:start="201:21" pos:end="201:22">-&gt;</operator><name pos:start="201:23" pos:end="201:28">ip_tos</name></name> <operator pos:start="201:30" pos:end="201:31">&amp;=</operator> <operator pos:start="201:33" pos:end="201:33">~</operator><literal type="number" pos:start="201:34" pos:end="201:34">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



		<expr_stmt pos:start="205:17" pos:end="205:33"><expr pos:start="205:17" pos:end="205:32"><name pos:start="205:17" pos:end="205:26"><name pos:start="205:17" pos:end="205:18">ip</name><operator pos:start="205:19" pos:end="205:20">-&gt;</operator><name pos:start="205:21" pos:end="205:26">ip_off</name></name> <operator pos:start="205:28" pos:end="205:30">&lt;&lt;=</operator> <literal type="number" pos:start="205:32" pos:end="205:32">3</literal></expr>;</expr_stmt>



		<comment type="block" pos:start="209:17" pos:end="217:19">/*

		 * If datagram marked as having more fragments

		 * or if this is not the first fragment,

		 * attempt reassembly; if it succeeds, proceed.

		 */</comment>

		<if_stmt pos:start="219:17" pos:end="233:47"><if pos:start="219:17" pos:end="229:17">if <condition pos:start="219:20" pos:end="219:49">(<expr pos:start="219:21" pos:end="219:48"><name pos:start="219:21" pos:end="219:30"><name pos:start="219:21" pos:end="219:22">ip</name><operator pos:start="219:23" pos:end="219:24">-&gt;</operator><name pos:start="219:25" pos:end="219:30">ip_tos</name></name> <operator pos:start="219:32" pos:end="219:32">&amp;</operator> <literal type="number" pos:start="219:34" pos:end="219:34">1</literal> <operator pos:start="219:36" pos:end="219:37">||</operator> <name pos:start="219:39" pos:end="219:48"><name pos:start="219:39" pos:end="219:40">ip</name><operator pos:start="219:41" pos:end="219:42">-&gt;</operator><name pos:start="219:43" pos:end="219:48">ip_off</name></name></expr>)</condition> <block pos:start="219:51" pos:end="229:17">{<block_content pos:start="221:25" pos:end="227:44">

			<expr_stmt pos:start="221:25" pos:end="221:53"><expr pos:start="221:25" pos:end="221:52"><name pos:start="221:25" pos:end="221:26">ip</name> <operator pos:start="221:28" pos:end="221:28">=</operator> <call pos:start="221:30" pos:end="221:52"><name pos:start="221:30" pos:end="221:37">ip_reass</name><argument_list pos:start="221:38" pos:end="221:52">(<argument pos:start="221:39" pos:end="221:43"><expr pos:start="221:39" pos:end="221:43"><name pos:start="221:39" pos:end="221:43">slirp</name></expr></argument>, <argument pos:start="221:46" pos:end="221:47"><expr pos:start="221:46" pos:end="221:47"><name pos:start="221:46" pos:end="221:47">ip</name></expr></argument>, <argument pos:start="221:50" pos:end="221:51"><expr pos:start="221:50" pos:end="221:51"><name pos:start="221:50" pos:end="221:51">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="223:25" pos:end="225:39"><if pos:start="223:25" pos:end="225:39">if <condition pos:start="223:28" pos:end="223:39">(<expr pos:start="223:29" pos:end="223:38"><name pos:start="223:29" pos:end="223:30">ip</name> <operator pos:start="223:32" pos:end="223:33">==</operator> <name pos:start="223:35" pos:end="223:38">NULL</name></expr>)</condition><block type="pseudo" pos:start="225:33" pos:end="225:39"><block_content pos:start="225:33" pos:end="225:39">

				<return pos:start="225:33" pos:end="225:39">return;</return></block_content></block></if></if_stmt>

			<expr_stmt pos:start="227:25" pos:end="227:44"><expr pos:start="227:25" pos:end="227:43"><name pos:start="227:25" pos:end="227:25">m</name> <operator pos:start="227:27" pos:end="227:27">=</operator> <call pos:start="227:29" pos:end="227:43"><name pos:start="227:29" pos:end="227:32">dtom</name><argument_list pos:start="227:33" pos:end="227:43">(<argument pos:start="227:34" pos:end="227:38"><expr pos:start="227:34" pos:end="227:38"><name pos:start="227:34" pos:end="227:38">slirp</name></expr></argument>, <argument pos:start="227:41" pos:end="227:42"><expr pos:start="227:41" pos:end="227:42"><name pos:start="227:41" pos:end="227:42">ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <if type="elseif" pos:start="229:19" pos:end="233:47">else

			if <condition pos:start="231:28" pos:end="231:31">(<expr pos:start="231:29" pos:end="231:30"><name pos:start="231:29" pos:end="231:30">fp</name></expr>)</condition><block type="pseudo" pos:start="233:28" pos:end="233:47"><block_content pos:start="233:28" pos:end="233:47">

		   	   <expr_stmt pos:start="233:28" pos:end="233:47"><expr pos:start="233:28" pos:end="233:46"><call pos:start="233:28" pos:end="233:46"><name pos:start="233:28" pos:end="233:35">ip_freef</name><argument_list pos:start="233:36" pos:end="233:46">(<argument pos:start="233:37" pos:end="233:41"><expr pos:start="233:37" pos:end="233:41"><name pos:start="233:37" pos:end="233:41">slirp</name></expr></argument>, <argument pos:start="233:44" pos:end="233:45"><expr pos:start="233:44" pos:end="233:45"><name pos:start="233:44" pos:end="233:45">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	</block_content>}</block></if> <else pos:start="237:11" pos:end="239:35">else<block type="pseudo" pos:start="239:17" pos:end="239:35"><block_content pos:start="239:17" pos:end="239:35">

		<expr_stmt pos:start="239:17" pos:end="239:35"><expr pos:start="239:17" pos:end="239:34"><name pos:start="239:17" pos:end="239:26"><name pos:start="239:17" pos:end="239:18">ip</name><operator pos:start="239:19" pos:end="239:20">-&gt;</operator><name pos:start="239:21" pos:end="239:26">ip_len</name></name> <operator pos:start="239:28" pos:end="239:29">-=</operator> <name pos:start="239:31" pos:end="239:34">hlen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<comment type="block" pos:start="243:9" pos:end="247:11">/*

	 * Switch out to protocol's input routine.

	 */</comment>

	<switch pos:start="249:9" pos:end="273:9">switch <condition pos:start="249:16" pos:end="249:25">(<expr pos:start="249:17" pos:end="249:24"><name pos:start="249:17" pos:end="249:24"><name pos:start="249:17" pos:end="249:18">ip</name><operator pos:start="249:19" pos:end="249:20">-&gt;</operator><name pos:start="249:21" pos:end="249:24">ip_p</name></name></expr>)</condition> <block pos:start="249:27" pos:end="273:9">{<block_content pos:start="251:10" pos:end="271:26">

	 <case pos:start="251:10" pos:end="251:26">case <expr pos:start="251:15" pos:end="251:25"><name pos:start="251:15" pos:end="251:25">IPPROTO_TCP</name></expr>:</case>

		<expr_stmt pos:start="253:17" pos:end="253:67"><expr pos:start="253:17" pos:end="253:66"><call pos:start="253:17" pos:end="253:66"><name pos:start="253:17" pos:end="253:25">tcp_input</name><argument_list pos:start="253:26" pos:end="253:66">(<argument pos:start="253:27" pos:end="253:27"><expr pos:start="253:27" pos:end="253:27"><name pos:start="253:27" pos:end="253:27">m</name></expr></argument>, <argument pos:start="253:30" pos:end="253:33"><expr pos:start="253:30" pos:end="253:33"><name pos:start="253:30" pos:end="253:33">hlen</name></expr></argument>, <argument pos:start="253:36" pos:end="253:56"><expr pos:start="253:36" pos:end="253:56"><operator pos:start="253:36" pos:end="253:36">(</operator>struct <name pos:start="253:44" pos:end="253:49">socket</name> <operator pos:start="253:51" pos:end="253:51">*</operator><operator pos:start="253:52" pos:end="253:52">)</operator><name pos:start="253:53" pos:end="253:56">NULL</name></expr></argument>, <argument pos:start="253:59" pos:end="253:65"><expr pos:start="253:59" pos:end="253:65"><name pos:start="253:59" pos:end="253:65">AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="255:17" pos:end="255:22">break;</break>

	 <case pos:start="257:10" pos:end="257:26">case <expr pos:start="257:15" pos:end="257:25"><name pos:start="257:15" pos:end="257:25">IPPROTO_UDP</name></expr>:</case>

		<expr_stmt pos:start="259:17" pos:end="259:35"><expr pos:start="259:17" pos:end="259:34"><call pos:start="259:17" pos:end="259:34"><name pos:start="259:17" pos:end="259:25">udp_input</name><argument_list pos:start="259:26" pos:end="259:34">(<argument pos:start="259:27" pos:end="259:27"><expr pos:start="259:27" pos:end="259:27"><name pos:start="259:27" pos:end="259:27">m</name></expr></argument>, <argument pos:start="259:30" pos:end="259:33"><expr pos:start="259:30" pos:end="259:33"><name pos:start="259:30" pos:end="259:33">hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="261:17" pos:end="261:22">break;</break>

	 <case pos:start="263:10" pos:end="263:27">case <expr pos:start="263:15" pos:end="263:26"><name pos:start="263:15" pos:end="263:26">IPPROTO_ICMP</name></expr>:</case>

		<expr_stmt pos:start="265:17" pos:end="265:36"><expr pos:start="265:17" pos:end="265:35"><call pos:start="265:17" pos:end="265:35"><name pos:start="265:17" pos:end="265:26">icmp_input</name><argument_list pos:start="265:27" pos:end="265:35">(<argument pos:start="265:28" pos:end="265:28"><expr pos:start="265:28" pos:end="265:28"><name pos:start="265:28" pos:end="265:28">m</name></expr></argument>, <argument pos:start="265:31" pos:end="265:34"><expr pos:start="265:31" pos:end="265:34"><name pos:start="265:31" pos:end="265:34">hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="267:17" pos:end="267:22">break;</break>

	 <default pos:start="269:10" pos:end="269:17">default:</default>

		<expr_stmt pos:start="271:17" pos:end="271:26"><expr pos:start="271:17" pos:end="271:25"><call pos:start="271:17" pos:end="271:25"><name pos:start="271:17" pos:end="271:22">m_free</name><argument_list pos:start="271:23" pos:end="271:25">(<argument pos:start="271:24" pos:end="271:24"><expr pos:start="271:24" pos:end="271:24"><name pos:start="271:24" pos:end="271:24">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></switch>

	<return pos:start="275:9" pos:end="275:15">return;</return>

<label pos:start="277:1" pos:end="277:4"><name pos:start="277:1" pos:end="277:3">bad</name>:</label>

	<expr_stmt pos:start="279:9" pos:end="279:18"><expr pos:start="279:9" pos:end="279:17"><call pos:start="279:9" pos:end="279:17"><name pos:start="279:9" pos:end="279:14">m_free</name><argument_list pos:start="279:15" pos:end="279:17">(<argument pos:start="279:16" pos:end="279:16"><expr pos:start="279:16" pos:end="279:16"><name pos:start="279:16" pos:end="279:16">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
