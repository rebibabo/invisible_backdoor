<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1884.c" pos:tabs="8"><function pos:start="1:1" pos:end="313:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">mpegts_write_packet_internal</name><parameter_list pos:start="1:40" pos:end="1:74">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><name pos:start="1:41" pos:end="1:55">AVFormatContext</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:58">s</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:73"><decl pos:start="1:61" pos:end="1:73"><type pos:start="1:61" pos:end="1:73"><name pos:start="1:61" pos:end="1:68">AVPacket</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="313:1">{<block_content pos:start="5:5" pos:end="311:13">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name> <init pos:start="5:18" pos:end="5:48">= <expr pos:start="5:20" pos:end="5:48"><name pos:start="5:20" pos:end="5:48"><name pos:start="5:20" pos:end="5:20">s</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:29">streams</name><index pos:start="5:30" pos:end="5:48">[<expr pos:start="5:31" pos:end="5:47"><name pos:start="5:31" pos:end="5:47"><name pos:start="5:31" pos:end="5:33">pkt</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:47">stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">size</name> <init pos:start="7:14" pos:end="7:24">= <expr pos:start="7:16" pos:end="7:24"><name pos:start="7:16" pos:end="7:24"><name pos:start="7:16" pos:end="7:18">pkt</name><operator pos:start="7:19" pos:end="7:20">-&gt;</operator><name pos:start="7:21" pos:end="7:24">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">buf</name> <init pos:start="9:18" pos:end="9:28">= <expr pos:start="9:20" pos:end="9:28"><name pos:start="9:20" pos:end="9:28"><name pos:start="9:20" pos:end="9:22">pkt</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:28">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:17">data</name> <init pos:start="11:19" pos:end="11:24">= <expr pos:start="11:21" pos:end="11:24"><name pos:start="11:21" pos:end="11:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">MpegTSWrite</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:19">ts</name> <init pos:start="13:21" pos:end="13:34">= <expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:23">s</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:44"><type pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:21">MpegTSWriteStream</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:28">ts_st</name> <init pos:start="15:30" pos:end="15:44">= <expr pos:start="15:32" pos:end="15:44"><name pos:start="15:32" pos:end="15:44"><name pos:start="15:32" pos:end="15:33">st</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:76"><decl pos:start="17:5" pos:end="17:75"><type pos:start="17:5" pos:end="17:17"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">int64_t</name></type> <name pos:start="17:19" pos:end="17:23">delay</name> <init pos:start="17:25" pos:end="17:75">= <expr pos:start="17:27" pos:end="17:75"><call pos:start="17:27" pos:end="17:71"><name pos:start="17:27" pos:end="17:36">av_rescale</name><argument_list pos:start="17:37" pos:end="17:71">(<argument pos:start="17:38" pos:end="17:49"><expr pos:start="17:38" pos:end="17:49"><name pos:start="17:38" pos:end="17:49"><name pos:start="17:38" pos:end="17:38">s</name><operator pos:start="17:39" pos:end="17:40">-&gt;</operator><name pos:start="17:41" pos:end="17:49">max_delay</name></name></expr></argument>, <argument pos:start="17:52" pos:end="17:56"><expr pos:start="17:52" pos:end="17:56"><literal type="number" pos:start="17:52" pos:end="17:56">90000</literal></expr></argument>, <argument pos:start="17:59" pos:end="17:70"><expr pos:start="17:59" pos:end="17:70"><name pos:start="17:59" pos:end="17:70">AV_TIME_BASE</name></expr></argument>)</argument_list></call> <operator pos:start="17:73" pos:end="17:73">*</operator> <literal type="number" pos:start="17:75" pos:end="17:75">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:43"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:15">dts</name> <init pos:start="19:17" pos:end="19:26">= <expr pos:start="19:19" pos:end="19:26"><name pos:start="19:19" pos:end="19:26"><name pos:start="19:19" pos:end="19:21">pkt</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:26">dts</name></name></expr></init></decl>, <decl pos:start="19:29" pos:end="19:42"><type ref="prev" pos:start="19:5" pos:end="19:11"/><name pos:start="19:29" pos:end="19:31">pts</name> <init pos:start="19:33" pos:end="19:42">= <expr pos:start="19:35" pos:end="19:42"><name pos:start="19:35" pos:end="19:42"><name pos:start="19:35" pos:end="19:37">pkt</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:42">pts</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="33:5"><if pos:start="23:5" pos:end="33:5">if <condition pos:start="23:8" pos:end="23:27">(<expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:10">ts</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:26">reemit_pat_pmt</name></name></expr>)</condition> <block pos:start="23:29" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:56">

        <expr_stmt pos:start="25:9" pos:end="27:90"><expr pos:start="25:9" pos:end="27:89"><call pos:start="25:9" pos:end="27:89"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="27:89">(<argument pos:start="25:16" pos:end="25:16"><expr pos:start="25:16" pos:end="25:16"><name pos:start="25:16" pos:end="25:16">s</name></expr></argument>, <argument pos:start="25:19" pos:end="25:32"><expr pos:start="25:19" pos:end="25:32"><name pos:start="25:19" pos:end="25:32">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="27:16" pos:end="27:88"><expr pos:start="27:16" pos:end="27:88"><literal type="string" pos:start="27:16" pos:end="27:88">"resend_headers option is deprecated, use -mpegts_flags resend_headers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:10">ts</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:26">reemit_pat_pmt</name></name> <operator pos:start="29:28" pos:end="29:28">=</operator> <literal type="number" pos:start="29:30" pos:end="29:30">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:56"><expr pos:start="31:9" pos:end="31:55"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:10">ts</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:17">flags</name></name>         <operator pos:start="31:27" pos:end="31:28">|=</operator> <name pos:start="31:30" pos:end="31:55">MPEGTS_FLAG_REEMIT_PAT_PMT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:47">(<expr pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:10">ts</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:17">flags</name></name> <operator pos:start="37:19" pos:end="37:19">&amp;</operator> <name pos:start="37:21" pos:end="37:46">MPEGTS_FLAG_REEMIT_PAT_PMT</name></expr>)</condition> <block pos:start="37:49" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:59">

        <expr_stmt pos:start="39:9" pos:end="39:57"><expr pos:start="39:9" pos:end="39:56"><name pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:10">ts</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:28">pat_packet_count</name></name> <operator pos:start="39:30" pos:end="39:30">=</operator> <name pos:start="39:32" pos:end="39:52"><name pos:start="39:32" pos:end="39:33">ts</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:52">pat_packet_period</name></name> <operator pos:start="39:54" pos:end="39:54">-</operator> <literal type="number" pos:start="39:56" pos:end="39:56">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:57"><expr pos:start="41:9" pos:end="41:56"><name pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:10">ts</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:28">sdt_packet_count</name></name> <operator pos:start="41:30" pos:end="41:30">=</operator> <name pos:start="41:32" pos:end="41:52"><name pos:start="41:32" pos:end="41:33">ts</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:52">sdt_packet_period</name></name> <operator pos:start="41:54" pos:end="41:54">-</operator> <literal type="number" pos:start="41:56" pos:end="41:56">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:10">ts</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:17">flags</name></name>           <operator pos:start="43:29" pos:end="43:30">&amp;=</operator> <operator pos:start="43:32" pos:end="43:32">~</operator><name pos:start="43:33" pos:end="43:58">MPEGTS_FLAG_REEMIT_PAT_PMT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="59:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:23">(<expr pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:10">ts</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:18">copyts</name></name> <operator pos:start="49:20" pos:end="49:20">&lt;</operator> <literal type="number" pos:start="49:22" pos:end="49:22">1</literal></expr>)</condition> <block pos:start="49:25" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:25">

        <if_stmt pos:start="51:9" pos:end="53:25"><if pos:start="51:9" pos:end="53:25">if <condition pos:start="51:12" pos:end="51:34">(<expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:15">pts</name> <operator pos:start="51:17" pos:end="51:18">!=</operator> <name pos:start="51:20" pos:end="51:33">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:25"><block_content pos:start="53:13" pos:end="53:25">

            <expr_stmt pos:start="53:13" pos:end="53:25"><expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:15">pts</name> <operator pos:start="53:17" pos:end="53:18">+=</operator> <name pos:start="53:20" pos:end="53:24">delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="57:25"><if pos:start="55:9" pos:end="57:25">if <condition pos:start="55:12" pos:end="55:34">(<expr pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:15">dts</name> <operator pos:start="55:17" pos:end="55:18">!=</operator> <name pos:start="55:20" pos:end="55:33">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:25"><block_content pos:start="57:13" pos:end="57:25">

            <expr_stmt pos:start="57:13" pos:end="57:25"><expr pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:15">dts</name> <operator pos:start="57:17" pos:end="57:18">+=</operator> <name pos:start="57:20" pos:end="57:24">delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:56">(<expr pos:start="63:9" pos:end="63:55"><name pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:13">ts_st</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:30">first_pts_check</name></name> <operator pos:start="63:32" pos:end="63:33">&amp;&amp;</operator> <name pos:start="63:35" pos:end="63:37">pts</name> <operator pos:start="63:39" pos:end="63:40">==</operator> <name pos:start="63:42" pos:end="63:55">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="63:58" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:35">

        <expr_stmt pos:start="65:9" pos:end="65:65"><expr pos:start="65:9" pos:end="65:64"><call pos:start="65:9" pos:end="65:64"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:64">(<argument pos:start="65:16" pos:end="65:16"><expr pos:start="65:16" pos:end="65:16"><name pos:start="65:16" pos:end="65:16">s</name></expr></argument>, <argument pos:start="65:19" pos:end="65:30"><expr pos:start="65:19" pos:end="65:30"><name pos:start="65:19" pos:end="65:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:33" pos:end="65:63"><expr pos:start="65:33" pos:end="65:63"><literal type="string" pos:start="65:33" pos:end="65:63">"first pts value must be set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:35">return <expr pos:start="67:16" pos:end="67:34"><name pos:start="67:16" pos:end="67:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:31"><expr pos:start="71:5" pos:end="71:30"><name pos:start="71:5" pos:end="71:26"><name pos:start="71:5" pos:end="71:9">ts_st</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:26">first_pts_check</name></name> <operator pos:start="71:28" pos:end="71:28">=</operator> <literal type="number" pos:start="71:30" pos:end="71:30">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="217:5"><if pos:start="75:5" pos:end="141:5">if <condition pos:start="75:8" pos:end="75:48">(<expr pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:27"><name pos:start="75:9" pos:end="75:10">st</name><operator pos:start="75:11" pos:end="75:12">-&gt;</operator><name pos:start="75:13" pos:end="75:17">codec</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:27">codec_id</name></name> <operator pos:start="75:29" pos:end="75:30">==</operator> <name pos:start="75:32" pos:end="75:47">AV_CODEC_ID_H264</name></expr>)</condition> <block pos:start="75:50" pos:end="141:5">{<block_content pos:start="77:9" pos:end="139:9">

        <decl_stmt pos:start="77:9" pos:end="77:52"><decl pos:start="77:9" pos:end="77:30"><type pos:start="77:9" pos:end="77:23"><specifier pos:start="77:9" pos:end="77:13">const</specifier> <name pos:start="77:15" pos:end="77:21">uint8_t</name> <modifier pos:start="77:23" pos:end="77:23">*</modifier></type><name pos:start="77:24" pos:end="77:24">p</name> <init pos:start="77:26" pos:end="77:30">= <expr pos:start="77:28" pos:end="77:30"><name pos:start="77:28" pos:end="77:30">buf</name></expr></init></decl>, <decl pos:start="77:33" pos:end="77:51"><type ref="prev" pos:start="77:9" pos:end="77:23"><modifier pos:start="77:33" pos:end="77:33">*</modifier></type><name pos:start="77:34" pos:end="77:40">buf_end</name> <init pos:start="77:42" pos:end="77:51">= <expr pos:start="77:44" pos:end="77:51"><name pos:start="77:44" pos:end="77:44">p</name> <operator pos:start="77:46" pos:end="77:46">+</operator> <name pos:start="77:48" pos:end="77:51">size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:28"><decl pos:start="79:9" pos:end="79:27"><type pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:16">uint32_t</name></type> <name pos:start="79:18" pos:end="79:22">state</name> <init pos:start="79:24" pos:end="79:27">= <expr pos:start="79:26" pos:end="79:27"><operator pos:start="79:26" pos:end="79:26">-</operator><literal type="number" pos:start="79:27" pos:end="79:27">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:85"><decl pos:start="81:9" pos:end="81:84"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:19">extradd</name> <init pos:start="81:21" pos:end="81:84">= <expr pos:start="81:23" pos:end="81:84"><ternary pos:start="81:23" pos:end="81:84"><condition pos:start="81:23" pos:end="81:54"><expr pos:start="81:23" pos:end="81:52"><operator pos:start="81:23" pos:end="81:23">(</operator><name pos:start="81:24" pos:end="81:33"><name pos:start="81:24" pos:end="81:26">pkt</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:33">flags</name></name> <operator pos:start="81:35" pos:end="81:35">&amp;</operator> <name pos:start="81:37" pos:end="81:51">AV_PKT_FLAG_KEY</name><operator pos:start="81:52" pos:end="81:52">)</operator></expr> ?</condition><then pos:start="81:56" pos:end="81:80"> <expr pos:start="81:56" pos:end="81:80"><name pos:start="81:56" pos:end="81:80"><name pos:start="81:56" pos:end="81:57">st</name><operator pos:start="81:58" pos:end="81:59">-&gt;</operator><name pos:start="81:60" pos:end="81:64">codec</name><operator pos:start="81:65" pos:end="81:66">-&gt;</operator><name pos:start="81:67" pos:end="81:80">extradata_size</name></name></expr> </then><else pos:start="81:82" pos:end="81:84">: <expr pos:start="81:84" pos:end="81:84"><literal type="number" pos:start="81:84" pos:end="81:84">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:54"><decl pos:start="83:9" pos:end="83:53"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:15">ret</name> <init pos:start="83:17" pos:end="83:53">= <expr pos:start="83:19" pos:end="83:53"><call pos:start="83:19" pos:end="83:53"><name pos:start="83:19" pos:end="83:41">ff_check_h264_startcode</name><argument_list pos:start="83:42" pos:end="83:53">(<argument pos:start="83:43" pos:end="83:43"><expr pos:start="83:43" pos:end="83:43"><name pos:start="83:43" pos:end="83:43">s</name></expr></argument>, <argument pos:start="83:46" pos:end="83:47"><expr pos:start="83:46" pos:end="83:47"><name pos:start="83:46" pos:end="83:47">st</name></expr></argument>, <argument pos:start="83:50" pos:end="83:52"><expr pos:start="83:50" pos:end="83:52"><name pos:start="83:50" pos:end="83:52">pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="85:9" pos:end="87:23"><if pos:start="85:9" pos:end="87:23">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">&lt;</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:23"><block_content pos:start="87:13" pos:end="87:23">

            <return pos:start="87:13" pos:end="87:23">return <expr pos:start="87:20" pos:end="87:22"><name pos:start="87:20" pos:end="87:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="91:9" pos:end="93:24"><if pos:start="91:9" pos:end="93:24">if <condition pos:start="91:12" pos:end="91:57">(<expr pos:start="91:13" pos:end="91:56"><name pos:start="91:13" pos:end="91:19">extradd</name> <operator pos:start="91:21" pos:end="91:22">&amp;&amp;</operator> <call pos:start="91:24" pos:end="91:52"><name pos:start="91:24" pos:end="91:30">AV_RB24</name><argument_list pos:start="91:31" pos:end="91:52">(<argument pos:start="91:32" pos:end="91:51"><expr pos:start="91:32" pos:end="91:51"><name pos:start="91:32" pos:end="91:51"><name pos:start="91:32" pos:end="91:33">st</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:40">codec</name><operator pos:start="91:41" pos:end="91:42">-&gt;</operator><name pos:start="91:43" pos:end="91:51">extradata</name></name></expr></argument>)</argument_list></call> <operator pos:start="91:54" pos:end="91:54">&gt;</operator> <literal type="number" pos:start="91:56" pos:end="91:56">1</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:24"><block_content pos:start="93:13" pos:end="93:24">

            <expr_stmt pos:start="93:13" pos:end="93:24"><expr pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:19">extradd</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <literal type="number" pos:start="93:23" pos:end="93:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <do pos:start="97:9" pos:end="109:61">do <block pos:start="97:12" pos:end="107:9">{<block_content pos:start="99:13" pos:end="105:28">

            <expr_stmt pos:start="99:13" pos:end="99:59"><expr pos:start="99:13" pos:end="99:58"><name pos:start="99:13" pos:end="99:13">p</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <call pos:start="99:17" pos:end="99:58"><name pos:start="99:17" pos:end="99:38">avpriv_find_start_code</name><argument_list pos:start="99:39" pos:end="99:58">(<argument pos:start="99:40" pos:end="99:40"><expr pos:start="99:40" pos:end="99:40"><name pos:start="99:40" pos:end="99:40">p</name></expr></argument>, <argument pos:start="99:43" pos:end="99:49"><expr pos:start="99:43" pos:end="99:49"><name pos:start="99:43" pos:end="99:49">buf_end</name></expr></argument>, <argument pos:start="99:52" pos:end="99:57"><expr pos:start="99:52" pos:end="99:57"><operator pos:start="99:52" pos:end="99:52">&amp;</operator><name pos:start="99:53" pos:end="99:57">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:62"><expr pos:start="101:13" pos:end="101:61"><call pos:start="101:13" pos:end="101:61"><name pos:start="101:13" pos:end="101:18">av_log</name><argument_list pos:start="101:19" pos:end="101:61">(<argument pos:start="101:20" pos:end="101:20"><expr pos:start="101:20" pos:end="101:20"><name pos:start="101:20" pos:end="101:20">s</name></expr></argument>, <argument pos:start="101:23" pos:end="101:34"><expr pos:start="101:23" pos:end="101:34"><name pos:start="101:23" pos:end="101:34">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="101:37" pos:end="101:46"><expr pos:start="101:37" pos:end="101:46"><literal type="string" pos:start="101:37" pos:end="101:46">"nal %d\n"</literal></expr></argument>, <argument pos:start="101:49" pos:end="101:60"><expr pos:start="101:49" pos:end="101:60"><name pos:start="101:49" pos:end="101:53">state</name> <operator pos:start="101:55" pos:end="101:55">&amp;</operator> <literal type="number" pos:start="101:57" pos:end="101:60">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="105:28"><if pos:start="103:13" pos:end="105:28">if <condition pos:start="103:16" pos:end="103:36">(<expr pos:start="103:17" pos:end="103:35"><operator pos:start="103:17" pos:end="103:17">(</operator><name pos:start="103:18" pos:end="103:22">state</name> <operator pos:start="103:24" pos:end="103:24">&amp;</operator> <literal type="number" pos:start="103:26" pos:end="103:29">0x1f</literal><operator pos:start="103:30" pos:end="103:30">)</operator> <operator pos:start="103:32" pos:end="103:33">==</operator> <literal type="number" pos:start="103:35" pos:end="103:35">7</literal></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:28"><block_content pos:start="105:17" pos:end="105:28">

                <expr_stmt pos:start="105:17" pos:end="105:28"><expr pos:start="105:17" pos:end="105:27"><name pos:start="105:17" pos:end="105:23">extradd</name> <operator pos:start="105:25" pos:end="105:25">=</operator> <literal type="number" pos:start="105:27" pos:end="105:27">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="107:17" pos:end="109:60">(<expr pos:start="107:18" pos:end="109:59"><name pos:start="107:18" pos:end="107:18">p</name> <operator pos:start="107:20" pos:end="107:20">&lt;</operator> <name pos:start="107:22" pos:end="107:28">buf_end</name> <operator pos:start="107:30" pos:end="107:31">&amp;&amp;</operator> <operator pos:start="107:33" pos:end="107:33">(</operator><name pos:start="107:34" pos:end="107:38">state</name> <operator pos:start="107:40" pos:end="107:40">&amp;</operator> <literal type="number" pos:start="107:42" pos:end="107:45">0x1f</literal><operator pos:start="107:46" pos:end="107:46">)</operator> <operator pos:start="107:48" pos:end="107:49">!=</operator> <literal type="number" pos:start="107:51" pos:end="107:51">9</literal> <operator pos:start="107:53" pos:end="107:54">&amp;&amp;</operator>

                 <operator pos:start="109:18" pos:end="109:18">(</operator><name pos:start="109:19" pos:end="109:23">state</name> <operator pos:start="109:25" pos:end="109:25">&amp;</operator> <literal type="number" pos:start="109:27" pos:end="109:30">0x1f</literal><operator pos:start="109:31" pos:end="109:31">)</operator> <operator pos:start="109:33" pos:end="109:34">!=</operator> <literal type="number" pos:start="109:36" pos:end="109:36">5</literal> <operator pos:start="109:38" pos:end="109:39">&amp;&amp;</operator> <operator pos:start="109:41" pos:end="109:41">(</operator><name pos:start="109:42" pos:end="109:46">state</name> <operator pos:start="109:48" pos:end="109:48">&amp;</operator> <literal type="number" pos:start="109:50" pos:end="109:53">0x1f</literal><operator pos:start="109:54" pos:end="109:54">)</operator> <operator pos:start="109:56" pos:end="109:57">!=</operator> <literal type="number" pos:start="109:59" pos:end="109:59">1</literal></expr>)</condition>;</do>



        <if_stmt pos:start="113:9" pos:end="115:24"><if pos:start="113:9" pos:end="115:24">if <condition pos:start="113:12" pos:end="113:32">(<expr pos:start="113:13" pos:end="113:31"><operator pos:start="113:13" pos:end="113:13">(</operator><name pos:start="113:14" pos:end="113:18">state</name> <operator pos:start="113:20" pos:end="113:20">&amp;</operator> <literal type="number" pos:start="113:22" pos:end="113:25">0x1f</literal><operator pos:start="113:26" pos:end="113:26">)</operator> <operator pos:start="113:28" pos:end="113:29">!=</operator> <literal type="number" pos:start="113:31" pos:end="113:31">5</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:24"><block_content pos:start="115:13" pos:end="115:24">

            <expr_stmt pos:start="115:13" pos:end="115:24"><expr pos:start="115:13" pos:end="115:23"><name pos:start="115:13" pos:end="115:19">extradd</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <literal type="number" pos:start="115:23" pos:end="115:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="117:9" pos:end="139:9"><if pos:start="117:9" pos:end="139:9">if <condition pos:start="117:12" pos:end="117:32">(<expr pos:start="117:13" pos:end="117:31"><operator pos:start="117:13" pos:end="117:13">(</operator><name pos:start="117:14" pos:end="117:18">state</name> <operator pos:start="117:20" pos:end="117:20">&amp;</operator> <literal type="number" pos:start="117:22" pos:end="117:25">0x1f</literal><operator pos:start="117:26" pos:end="117:26">)</operator> <operator pos:start="117:28" pos:end="117:29">!=</operator> <literal type="number" pos:start="117:31" pos:end="117:31">9</literal></expr>)</condition> <block pos:start="117:34" pos:end="139:9">{<block_content pos:start="119:13" pos:end="137:46"> <comment type="line" pos:start="117:36" pos:end="117:45">// AUD NAL</comment>

            <expr_stmt pos:start="119:13" pos:end="119:54"><expr pos:start="119:13" pos:end="119:53"><name pos:start="119:13" pos:end="119:16">data</name> <operator pos:start="119:18" pos:end="119:18">=</operator> <call pos:start="119:20" pos:end="119:53"><name pos:start="119:20" pos:end="119:28">av_malloc</name><argument_list pos:start="119:29" pos:end="119:53">(<argument pos:start="119:30" pos:end="119:52"><expr pos:start="119:30" pos:end="119:52"><name pos:start="119:30" pos:end="119:38"><name pos:start="119:30" pos:end="119:32">pkt</name><operator pos:start="119:33" pos:end="119:34">-&gt;</operator><name pos:start="119:35" pos:end="119:38">size</name></name> <operator pos:start="119:40" pos:end="119:40">+</operator> <literal type="number" pos:start="119:42" pos:end="119:44">6</literal> <operator pos:start="119:44" pos:end="119:44">+</operator> <name pos:start="119:46" pos:end="119:52">extradd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="123:39"><if pos:start="121:13" pos:end="123:39">if <condition pos:start="121:16" pos:end="121:22">(<expr pos:start="121:17" pos:end="121:21"><operator pos:start="121:17" pos:end="121:17">!</operator><name pos:start="121:18" pos:end="121:21">data</name></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:39"><block_content pos:start="123:17" pos:end="123:39">

                <return pos:start="123:17" pos:end="123:39">return <expr pos:start="123:24" pos:end="123:38"><call pos:start="123:24" pos:end="123:38"><name pos:start="123:24" pos:end="123:30">AVERROR</name><argument_list pos:start="123:31" pos:end="123:38">(<argument pos:start="123:32" pos:end="123:37"><expr pos:start="123:32" pos:end="123:37"><name pos:start="123:32" pos:end="123:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:60"><expr pos:start="125:13" pos:end="125:59"><call pos:start="125:13" pos:end="125:59"><name pos:start="125:13" pos:end="125:18">memcpy</name><argument_list pos:start="125:19" pos:end="125:59">(<argument pos:start="125:20" pos:end="125:27"><expr pos:start="125:20" pos:end="125:27"><name pos:start="125:20" pos:end="125:23">data</name> <operator pos:start="125:25" pos:end="125:25">+</operator> <literal type="number" pos:start="125:27" pos:end="125:27">6</literal></expr></argument>, <argument pos:start="125:30" pos:end="125:49"><expr pos:start="125:30" pos:end="125:49"><name pos:start="125:30" pos:end="125:49"><name pos:start="125:30" pos:end="125:31">st</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:38">codec</name><operator pos:start="125:39" pos:end="125:40">-&gt;</operator><name pos:start="125:41" pos:end="125:49">extradata</name></name></expr></argument>, <argument pos:start="125:52" pos:end="125:58"><expr pos:start="125:52" pos:end="125:58"><name pos:start="125:52" pos:end="125:58">extradd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:61"><expr pos:start="127:13" pos:end="127:60"><call pos:start="127:13" pos:end="127:60"><name pos:start="127:13" pos:end="127:18">memcpy</name><argument_list pos:start="127:19" pos:end="127:60">(<argument pos:start="127:20" pos:end="127:37"><expr pos:start="127:20" pos:end="127:37"><name pos:start="127:20" pos:end="127:23">data</name> <operator pos:start="127:25" pos:end="127:25">+</operator> <literal type="number" pos:start="127:27" pos:end="127:29">6</literal> <operator pos:start="127:29" pos:end="127:29">+</operator> <name pos:start="127:31" pos:end="127:37">extradd</name></expr></argument>, <argument pos:start="127:40" pos:end="127:48"><expr pos:start="127:40" pos:end="127:48"><name pos:start="127:40" pos:end="127:48"><name pos:start="127:40" pos:end="127:42">pkt</name><operator pos:start="127:43" pos:end="127:44">-&gt;</operator><name pos:start="127:45" pos:end="127:48">data</name></name></expr></argument>, <argument pos:start="127:51" pos:end="127:59"><expr pos:start="127:51" pos:end="127:59"><name pos:start="127:51" pos:end="127:59"><name pos:start="127:51" pos:end="127:53">pkt</name><operator pos:start="127:54" pos:end="127:55">-&gt;</operator><name pos:start="127:56" pos:end="127:59">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:38"><expr pos:start="129:13" pos:end="129:37"><call pos:start="129:13" pos:end="129:37"><name pos:start="129:13" pos:end="129:19">AV_WB32</name><argument_list pos:start="129:20" pos:end="129:37">(<argument pos:start="129:21" pos:end="129:24"><expr pos:start="129:21" pos:end="129:24"><name pos:start="129:21" pos:end="129:24">data</name></expr></argument>, <argument pos:start="129:27" pos:end="129:36"><expr pos:start="129:27" pos:end="129:36"><literal type="number" pos:start="129:27" pos:end="129:36">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:27"><expr pos:start="131:13" pos:end="131:26"><name pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:16">data</name><index pos:start="131:17" pos:end="131:19">[<expr pos:start="131:18" pos:end="131:18"><literal type="number" pos:start="131:18" pos:end="131:18">4</literal></expr>]</index></name> <operator pos:start="131:21" pos:end="131:21">=</operator> <literal type="number" pos:start="131:23" pos:end="131:26">0x09</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:27"><expr pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:19"><name pos:start="133:13" pos:end="133:16">data</name><index pos:start="133:17" pos:end="133:19">[<expr pos:start="133:18" pos:end="133:18"><literal type="number" pos:start="133:18" pos:end="133:18">5</literal></expr>]</index></name> <operator pos:start="133:21" pos:end="133:21">=</operator> <literal type="number" pos:start="133:23" pos:end="133:26">0xf0</literal></expr>;</expr_stmt> <comment type="line" pos:start="133:29" pos:end="133:71">// any slice type (0xe) + rbsp stop one bit</comment>

            <expr_stmt pos:start="135:13" pos:end="135:27"><expr pos:start="135:13" pos:end="135:26"><name pos:start="135:13" pos:end="135:15">buf</name>     <operator pos:start="135:21" pos:end="135:21">=</operator> <name pos:start="135:23" pos:end="135:26">data</name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:46"><expr pos:start="137:13" pos:end="137:45"><name pos:start="137:13" pos:end="137:16">size</name>    <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:31"><name pos:start="137:23" pos:end="137:25">pkt</name><operator pos:start="137:26" pos:end="137:27">-&gt;</operator><name pos:start="137:28" pos:end="137:31">size</name></name> <operator pos:start="137:33" pos:end="137:33">+</operator> <literal type="number" pos:start="137:35" pos:end="137:37">6</literal> <operator pos:start="137:37" pos:end="137:37">+</operator> <name pos:start="137:39" pos:end="137:45">extradd</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="141:7" pos:end="209:5">else if <condition pos:start="141:15" pos:end="141:54">(<expr pos:start="141:16" pos:end="141:53"><name pos:start="141:16" pos:end="141:34"><name pos:start="141:16" pos:end="141:17">st</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:24">codec</name><operator pos:start="141:25" pos:end="141:26">-&gt;</operator><name pos:start="141:27" pos:end="141:34">codec_id</name></name> <operator pos:start="141:36" pos:end="141:37">==</operator> <name pos:start="141:39" pos:end="141:53">AV_CODEC_ID_AAC</name></expr>)</condition> <block pos:start="141:56" pos:end="209:5">{<block_content pos:start="143:9" pos:end="207:9">

        <if_stmt pos:start="143:9" pos:end="149:9"><if pos:start="143:9" pos:end="149:9">if <condition pos:start="143:12" pos:end="143:26">(<expr pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:21"><name pos:start="143:13" pos:end="143:15">pkt</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:21">size</name></name> <operator pos:start="143:23" pos:end="143:23">&lt;</operator> <literal type="number" pos:start="143:25" pos:end="143:25">2</literal></expr>)</condition> <block pos:start="143:28" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:39">

            <expr_stmt pos:start="145:13" pos:end="145:62"><expr pos:start="145:13" pos:end="145:61"><call pos:start="145:13" pos:end="145:61"><name pos:start="145:13" pos:end="145:18">av_log</name><argument_list pos:start="145:19" pos:end="145:61">(<argument pos:start="145:20" pos:end="145:20"><expr pos:start="145:20" pos:end="145:20"><name pos:start="145:20" pos:end="145:20">s</name></expr></argument>, <argument pos:start="145:23" pos:end="145:34"><expr pos:start="145:23" pos:end="145:34"><name pos:start="145:23" pos:end="145:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:37" pos:end="145:60"><expr pos:start="145:37" pos:end="145:60"><literal type="string" pos:start="145:37" pos:end="145:60">"AAC packet too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="147:13" pos:end="147:39">return <expr pos:start="147:20" pos:end="147:38"><name pos:start="147:20" pos:end="147:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="151:9" pos:end="207:9"><if pos:start="151:9" pos:end="207:9">if <condition pos:start="151:12" pos:end="151:52">(<expr pos:start="151:13" pos:end="151:51"><operator pos:start="151:13" pos:end="151:13">(</operator><call pos:start="151:14" pos:end="151:31"><name pos:start="151:14" pos:end="151:20">AV_RB16</name><argument_list pos:start="151:21" pos:end="151:31">(<argument pos:start="151:22" pos:end="151:30"><expr pos:start="151:22" pos:end="151:30"><name pos:start="151:22" pos:end="151:30"><name pos:start="151:22" pos:end="151:24">pkt</name><operator pos:start="151:25" pos:end="151:26">-&gt;</operator><name pos:start="151:27" pos:end="151:30">data</name></name></expr></argument>)</argument_list></call> <operator pos:start="151:33" pos:end="151:33">&amp;</operator> <literal type="number" pos:start="151:35" pos:end="151:40">0xfff0</literal><operator pos:start="151:41" pos:end="151:41">)</operator> <operator pos:start="151:43" pos:end="151:44">!=</operator> <literal type="number" pos:start="151:46" pos:end="151:51">0xfff0</literal></expr>)</condition> <block pos:start="151:54" pos:end="207:9">{<block_content pos:start="153:13" pos:end="205:35">

            <decl_stmt pos:start="153:13" pos:end="153:20"><decl pos:start="153:13" pos:end="153:19"><type pos:start="153:13" pos:end="153:15"><name pos:start="153:13" pos:end="153:15">int</name></type> <name pos:start="153:17" pos:end="153:19">ret</name></decl>;</decl_stmt>

            <decl_stmt pos:start="155:13" pos:end="155:26"><decl pos:start="155:13" pos:end="155:25"><type pos:start="155:13" pos:end="155:20"><name pos:start="155:13" pos:end="155:20">AVPacket</name></type> <name pos:start="155:22" pos:end="155:25">pkt2</name></decl>;</decl_stmt>



            <if_stmt pos:start="159:13" pos:end="167:13"><if pos:start="159:13" pos:end="167:13">if <condition pos:start="159:16" pos:end="159:29">(<expr pos:start="159:17" pos:end="159:28"><operator pos:start="159:17" pos:end="159:17">!</operator><name pos:start="159:18" pos:end="159:28"><name pos:start="159:18" pos:end="159:22">ts_st</name><operator pos:start="159:23" pos:end="159:24">-&gt;</operator><name pos:start="159:25" pos:end="159:28">amux</name></name></expr>)</condition> <block pos:start="159:31" pos:end="167:13">{<block_content pos:start="161:17" pos:end="165:43">

                <expr_stmt pos:start="161:17" pos:end="163:67"><expr pos:start="161:17" pos:end="163:66"><call pos:start="161:17" pos:end="163:66"><name pos:start="161:17" pos:end="161:22">av_log</name><argument_list pos:start="161:23" pos:end="163:66">(<argument pos:start="161:24" pos:end="161:24"><expr pos:start="161:24" pos:end="161:24"><name pos:start="161:24" pos:end="161:24">s</name></expr></argument>, <argument pos:start="161:27" pos:end="161:38"><expr pos:start="161:27" pos:end="161:38"><name pos:start="161:27" pos:end="161:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:41" pos:end="163:65"><expr pos:start="161:41" pos:end="163:65"><literal type="string" pos:start="161:41" pos:end="161:75">"AAC bitstream not in ADTS format "</literal>

                                        <literal type="string" pos:start="163:41" pos:end="163:65">"and extradata missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="165:17" pos:end="165:43">return <expr pos:start="165:24" pos:end="165:42"><name pos:start="165:24" pos:end="165:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="171:13" pos:end="171:34"><expr pos:start="171:13" pos:end="171:33"><call pos:start="171:13" pos:end="171:33"><name pos:start="171:13" pos:end="171:26">av_init_packet</name><argument_list pos:start="171:27" pos:end="171:33">(<argument pos:start="171:28" pos:end="171:32"><expr pos:start="171:28" pos:end="171:32"><operator pos:start="171:28" pos:end="171:28">&amp;</operator><name pos:start="171:29" pos:end="171:32">pkt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:34"><expr pos:start="173:13" pos:end="173:33"><name pos:start="173:13" pos:end="173:21"><name pos:start="173:13" pos:end="173:16">pkt2</name><operator pos:start="173:17" pos:end="173:17">.</operator><name pos:start="173:18" pos:end="173:21">data</name></name> <operator pos:start="173:23" pos:end="173:23">=</operator> <name pos:start="173:25" pos:end="173:33"><name pos:start="173:25" pos:end="173:27">pkt</name><operator pos:start="173:28" pos:end="173:29">-&gt;</operator><name pos:start="173:30" pos:end="173:33">data</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:34"><expr pos:start="175:13" pos:end="175:33"><name pos:start="175:13" pos:end="175:21"><name pos:start="175:13" pos:end="175:16">pkt2</name><operator pos:start="175:17" pos:end="175:17">.</operator><name pos:start="175:18" pos:end="175:21">size</name></name> <operator pos:start="175:23" pos:end="175:23">=</operator> <name pos:start="175:25" pos:end="175:33"><name pos:start="175:25" pos:end="175:27">pkt</name><operator pos:start="175:28" pos:end="175:29">-&gt;</operator><name pos:start="175:30" pos:end="175:33">size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:51"><expr pos:start="177:13" pos:end="177:50"><call pos:start="177:13" pos:end="177:50"><name pos:start="177:13" pos:end="177:22">av_assert0</name><argument_list pos:start="177:23" pos:end="177:50">(<argument pos:start="177:24" pos:end="177:49"><expr pos:start="177:24" pos:end="177:49"><name pos:start="177:24" pos:end="177:31"><name pos:start="177:24" pos:end="177:26">pkt</name><operator pos:start="177:27" pos:end="177:28">-&gt;</operator><name pos:start="177:29" pos:end="177:31">dts</name></name> <operator pos:start="177:33" pos:end="177:34">!=</operator> <name pos:start="177:36" pos:end="177:49">AV_NOPTS_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:97"><expr pos:start="179:13" pos:end="179:96"><name pos:start="179:13" pos:end="179:20"><name pos:start="179:13" pos:end="179:16">pkt2</name><operator pos:start="179:17" pos:end="179:17">.</operator><name pos:start="179:18" pos:end="179:20">dts</name></name> <operator pos:start="179:22" pos:end="179:22">=</operator> <call pos:start="179:24" pos:end="179:96"><name pos:start="179:24" pos:end="179:35">av_rescale_q</name><argument_list pos:start="179:36" pos:end="179:96">(<argument pos:start="179:37" pos:end="179:44"><expr pos:start="179:37" pos:end="179:44"><name pos:start="179:37" pos:end="179:44"><name pos:start="179:37" pos:end="179:39">pkt</name><operator pos:start="179:40" pos:end="179:41">-&gt;</operator><name pos:start="179:42" pos:end="179:44">dts</name></name></expr></argument>, <argument pos:start="179:47" pos:end="179:59"><expr pos:start="179:47" pos:end="179:59"><name pos:start="179:47" pos:end="179:59"><name pos:start="179:47" pos:end="179:48">st</name><operator pos:start="179:49" pos:end="179:50">-&gt;</operator><name pos:start="179:51" pos:end="179:59">time_base</name></name></expr></argument>, <argument pos:start="179:62" pos:end="179:95"><expr pos:start="179:62" pos:end="179:95"><name pos:start="179:62" pos:end="179:84"><name pos:start="179:62" pos:end="179:66">ts_st</name><operator pos:start="179:67" pos:end="179:68">-&gt;</operator><name pos:start="179:69" pos:end="179:72">amux</name><operator pos:start="179:73" pos:end="179:74">-&gt;</operator><name pos:start="179:75" pos:end="179:81">streams</name><index pos:start="179:82" pos:end="179:84">[<expr pos:start="179:83" pos:end="179:83"><literal type="number" pos:start="179:83" pos:end="179:83">0</literal></expr>]</index></name><operator pos:start="179:85" pos:end="179:86">-&gt;</operator><name pos:start="179:87" pos:end="179:95">time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="183:13" pos:end="183:54"><expr pos:start="183:13" pos:end="183:53"><name pos:start="183:13" pos:end="183:15">ret</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <call pos:start="183:19" pos:end="183:53"><name pos:start="183:19" pos:end="183:35">avio_open_dyn_buf</name><argument_list pos:start="183:36" pos:end="183:53">(<argument pos:start="183:37" pos:end="183:52"><expr pos:start="183:37" pos:end="183:52"><operator pos:start="183:37" pos:end="183:37">&amp;</operator><name pos:start="183:38" pos:end="183:52"><name pos:start="183:38" pos:end="183:42">ts_st</name><operator pos:start="183:43" pos:end="183:44">-&gt;</operator><name pos:start="183:45" pos:end="183:48">amux</name><operator pos:start="183:49" pos:end="183:50">-&gt;</operator><name pos:start="183:51" pos:end="183:52">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="185:13" pos:end="187:39"><if pos:start="185:13" pos:end="187:39">if <condition pos:start="185:16" pos:end="185:24">(<expr pos:start="185:17" pos:end="185:23"><name pos:start="185:17" pos:end="185:19">ret</name> <operator pos:start="185:21" pos:end="185:21">&lt;</operator> <literal type="number" pos:start="185:23" pos:end="185:23">0</literal></expr>)</condition><block type="pseudo" pos:start="187:17" pos:end="187:39"><block_content pos:start="187:17" pos:end="187:39">

                <return pos:start="187:17" pos:end="187:39">return <expr pos:start="187:24" pos:end="187:38"><call pos:start="187:24" pos:end="187:38"><name pos:start="187:24" pos:end="187:30">AVERROR</name><argument_list pos:start="187:31" pos:end="187:38">(<argument pos:start="187:32" pos:end="187:37"><expr pos:start="187:32" pos:end="187:37"><name pos:start="187:32" pos:end="187:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="191:13" pos:end="191:53"><expr pos:start="191:13" pos:end="191:52"><name pos:start="191:13" pos:end="191:15">ret</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <call pos:start="191:19" pos:end="191:52"><name pos:start="191:19" pos:end="191:32">av_write_frame</name><argument_list pos:start="191:33" pos:end="191:52">(<argument pos:start="191:34" pos:end="191:44"><expr pos:start="191:34" pos:end="191:44"><name pos:start="191:34" pos:end="191:44"><name pos:start="191:34" pos:end="191:38">ts_st</name><operator pos:start="191:39" pos:end="191:40">-&gt;</operator><name pos:start="191:41" pos:end="191:44">amux</name></name></expr></argument>, <argument pos:start="191:47" pos:end="191:51"><expr pos:start="191:47" pos:end="191:51"><operator pos:start="191:47" pos:end="191:47">&amp;</operator><name pos:start="191:48" pos:end="191:51">pkt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="193:13" pos:end="199:13"><if pos:start="193:13" pos:end="199:13">if <condition pos:start="193:16" pos:end="193:24">(<expr pos:start="193:17" pos:end="193:23"><name pos:start="193:17" pos:end="193:19">ret</name> <operator pos:start="193:21" pos:end="193:21">&lt;</operator> <literal type="number" pos:start="193:23" pos:end="193:23">0</literal></expr>)</condition> <block pos:start="193:26" pos:end="199:13">{<block_content pos:start="195:17" pos:end="197:27">

                <expr_stmt pos:start="195:17" pos:end="195:52"><expr pos:start="195:17" pos:end="195:51"><call pos:start="195:17" pos:end="195:51"><name pos:start="195:17" pos:end="195:33">ffio_free_dyn_buf</name><argument_list pos:start="195:34" pos:end="195:51">(<argument pos:start="195:35" pos:end="195:50"><expr pos:start="195:35" pos:end="195:50"><operator pos:start="195:35" pos:end="195:35">&amp;</operator><name pos:start="195:36" pos:end="195:50"><name pos:start="195:36" pos:end="195:40">ts_st</name><operator pos:start="195:41" pos:end="195:42">-&gt;</operator><name pos:start="195:43" pos:end="195:46">amux</name><operator pos:start="195:47" pos:end="195:48">-&gt;</operator><name pos:start="195:49" pos:end="195:50">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="197:17" pos:end="197:27">return <expr pos:start="197:24" pos:end="197:26"><name pos:start="197:24" pos:end="197:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:73"><expr pos:start="201:13" pos:end="201:72"><name pos:start="201:13" pos:end="201:16">size</name>            <operator pos:start="201:29" pos:end="201:29">=</operator> <call pos:start="201:31" pos:end="201:72"><name pos:start="201:31" pos:end="201:48">avio_close_dyn_buf</name><argument_list pos:start="201:49" pos:end="201:72">(<argument pos:start="201:50" pos:end="201:64"><expr pos:start="201:50" pos:end="201:64"><name pos:start="201:50" pos:end="201:64"><name pos:start="201:50" pos:end="201:54">ts_st</name><operator pos:start="201:55" pos:end="201:56">-&gt;</operator><name pos:start="201:57" pos:end="201:60">amux</name><operator pos:start="201:61" pos:end="201:62">-&gt;</operator><name pos:start="201:63" pos:end="201:64">pb</name></name></expr></argument>, <argument pos:start="201:67" pos:end="201:71"><expr pos:start="201:67" pos:end="201:71"><operator pos:start="201:67" pos:end="201:67">&amp;</operator><name pos:start="201:68" pos:end="201:71">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:35"><expr pos:start="203:13" pos:end="203:34"><name pos:start="203:13" pos:end="203:27"><name pos:start="203:13" pos:end="203:17">ts_st</name><operator pos:start="203:18" pos:end="203:19">-&gt;</operator><name pos:start="203:20" pos:end="203:23">amux</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:27">pb</name></name> <operator pos:start="203:29" pos:end="203:29">=</operator> <name pos:start="203:31" pos:end="203:34">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:35"><expr pos:start="205:13" pos:end="205:34"><name pos:start="205:13" pos:end="205:15">buf</name>             <operator pos:start="205:29" pos:end="205:29">=</operator> <name pos:start="205:31" pos:end="205:34">data</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="209:7" pos:end="217:5">else if <condition pos:start="209:15" pos:end="209:55">(<expr pos:start="209:16" pos:end="209:54"><name pos:start="209:16" pos:end="209:34"><name pos:start="209:16" pos:end="209:17">st</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:24">codec</name><operator pos:start="209:25" pos:end="209:26">-&gt;</operator><name pos:start="209:27" pos:end="209:34">codec_id</name></name> <operator pos:start="209:36" pos:end="209:37">==</operator> <name pos:start="209:39" pos:end="209:54">AV_CODEC_ID_HEVC</name></expr>)</condition> <block pos:start="209:57" pos:end="217:5">{<block_content pos:start="211:9" pos:end="215:23">

        <decl_stmt pos:start="211:9" pos:end="211:51"><decl pos:start="211:9" pos:end="211:50"><type pos:start="211:9" pos:end="211:11"><name pos:start="211:9" pos:end="211:11">int</name></type> <name pos:start="211:13" pos:end="211:15">ret</name> <init pos:start="211:17" pos:end="211:50">= <expr pos:start="211:19" pos:end="211:50"><call pos:start="211:19" pos:end="211:50"><name pos:start="211:19" pos:end="211:38">check_hevc_startcode</name><argument_list pos:start="211:39" pos:end="211:50">(<argument pos:start="211:40" pos:end="211:40"><expr pos:start="211:40" pos:end="211:40"><name pos:start="211:40" pos:end="211:40">s</name></expr></argument>, <argument pos:start="211:43" pos:end="211:44"><expr pos:start="211:43" pos:end="211:44"><name pos:start="211:43" pos:end="211:44">st</name></expr></argument>, <argument pos:start="211:47" pos:end="211:49"><expr pos:start="211:47" pos:end="211:49"><name pos:start="211:47" pos:end="211:49">pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="213:9" pos:end="215:23"><if pos:start="213:9" pos:end="215:23">if <condition pos:start="213:12" pos:end="213:20">(<expr pos:start="213:13" pos:end="213:19"><name pos:start="213:13" pos:end="213:15">ret</name> <operator pos:start="213:17" pos:end="213:17">&lt;</operator> <literal type="number" pos:start="213:19" pos:end="213:19">0</literal></expr>)</condition><block type="pseudo" pos:start="215:13" pos:end="215:23"><block_content pos:start="215:13" pos:end="215:23">

            <return pos:start="215:13" pos:end="215:23">return <expr pos:start="215:20" pos:end="215:22"><name pos:start="215:20" pos:end="215:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="221:5" pos:end="247:5"><if pos:start="221:5" pos:end="247:5">if <condition pos:start="221:8" pos:end="221:35">(<expr pos:start="221:9" pos:end="221:34"><name pos:start="221:9" pos:end="221:16"><name pos:start="221:9" pos:end="221:11">pkt</name><operator pos:start="221:12" pos:end="221:13">-&gt;</operator><name pos:start="221:14" pos:end="221:16">dts</name></name> <operator pos:start="221:18" pos:end="221:19">!=</operator> <name pos:start="221:21" pos:end="221:34">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="221:37" pos:end="247:5">{<block_content pos:start="223:9" pos:end="245:9">

        <decl_stmt pos:start="223:9" pos:end="223:14"><decl pos:start="223:9" pos:end="223:13"><type pos:start="223:9" pos:end="223:11"><name pos:start="223:9" pos:end="223:11">int</name></type> <name pos:start="223:13" pos:end="223:13">i</name></decl>;</decl_stmt>

        <for pos:start="225:9" pos:end="245:9">for<control pos:start="225:12" pos:end="225:38">(<init pos:start="225:13" pos:end="225:16"><expr pos:start="225:13" pos:end="225:15"><name pos:start="225:13" pos:end="225:13">i</name><operator pos:start="225:14" pos:end="225:14">=</operator><literal type="number" pos:start="225:15" pos:end="225:15">0</literal></expr>;</init> <condition pos:start="225:18" pos:end="225:33"><expr pos:start="225:18" pos:end="225:32"><name pos:start="225:18" pos:end="225:18">i</name><operator pos:start="225:19" pos:end="225:19">&lt;</operator><name pos:start="225:20" pos:end="225:32"><name pos:start="225:20" pos:end="225:20">s</name><operator pos:start="225:21" pos:end="225:22">-&gt;</operator><name pos:start="225:23" pos:end="225:32">nb_streams</name></name></expr>;</condition> <incr pos:start="225:35" pos:end="225:37"><expr pos:start="225:35" pos:end="225:37"><name pos:start="225:35" pos:end="225:35">i</name><operator pos:start="225:36" pos:end="225:37">++</operator></expr></incr>)</control> <block pos:start="225:40" pos:end="245:9">{<block_content pos:start="227:13" pos:end="243:13">

            <decl_stmt pos:start="227:13" pos:end="227:42"><decl pos:start="227:13" pos:end="227:41"><type pos:start="227:13" pos:end="227:22"><name pos:start="227:13" pos:end="227:20">AVStream</name> <modifier pos:start="227:22" pos:end="227:22">*</modifier></type><name pos:start="227:23" pos:end="227:25">st2</name> <init pos:start="227:27" pos:end="227:41">= <expr pos:start="227:29" pos:end="227:41"><name pos:start="227:29" pos:end="227:41"><name pos:start="227:29" pos:end="227:29">s</name><operator pos:start="227:30" pos:end="227:31">-&gt;</operator><name pos:start="227:32" pos:end="227:38">streams</name><index pos:start="227:39" pos:end="227:41">[<expr pos:start="227:40" pos:end="227:40"><name pos:start="227:40" pos:end="227:40">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="229:13" pos:end="229:55"><decl pos:start="229:13" pos:end="229:54"><type pos:start="229:13" pos:end="229:31"><name pos:start="229:13" pos:end="229:29">MpegTSWriteStream</name> <modifier pos:start="229:31" pos:end="229:31">*</modifier></type><name pos:start="229:32" pos:end="229:37">ts_st2</name> <init pos:start="229:39" pos:end="229:54">= <expr pos:start="229:41" pos:end="229:54"><name pos:start="229:41" pos:end="229:54"><name pos:start="229:41" pos:end="229:43">st2</name><operator pos:start="229:44" pos:end="229:45">-&gt;</operator><name pos:start="229:46" pos:end="229:54">priv_data</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="231:13" pos:end="243:13"><if pos:start="231:13" pos:end="243:13">if <condition pos:start="231:16" pos:end="233:97">(   <expr pos:start="231:20" pos:end="233:96"><name pos:start="231:20" pos:end="231:39"><name pos:start="231:20" pos:end="231:25">ts_st2</name><operator pos:start="231:26" pos:end="231:27">-&gt;</operator><name pos:start="231:28" pos:end="231:39">payload_size</name></name>

               <operator pos:start="233:16" pos:end="233:17">&amp;&amp;</operator> <operator pos:start="233:19" pos:end="233:19">(</operator><name pos:start="233:20" pos:end="233:38"><name pos:start="233:20" pos:end="233:25">ts_st2</name><operator pos:start="233:26" pos:end="233:27">-&gt;</operator><name pos:start="233:28" pos:end="233:38">payload_dts</name></name> <operator pos:start="233:40" pos:end="233:41">==</operator> <name pos:start="233:43" pos:end="233:56">AV_NOPTS_VALUE</name> <operator pos:start="233:58" pos:end="233:59">||</operator> <name pos:start="233:61" pos:end="233:63">dts</name> <operator pos:start="233:65" pos:end="233:65">-</operator> <name pos:start="233:67" pos:end="233:85"><name pos:start="233:67" pos:end="233:72">ts_st2</name><operator pos:start="233:73" pos:end="233:74">-&gt;</operator><name pos:start="233:75" pos:end="233:85">payload_dts</name></name> <operator pos:start="233:87" pos:end="233:87">&gt;</operator> <name pos:start="233:89" pos:end="233:93">delay</name><operator pos:start="233:94" pos:end="233:94">/</operator><literal type="number" pos:start="233:95" pos:end="233:95">2</literal><operator pos:start="233:96" pos:end="233:96">)</operator></expr>)</condition> <block pos:start="233:99" pos:end="243:13">{<block_content pos:start="235:17" pos:end="241:41">

                <expr_stmt pos:start="235:17" pos:end="239:73"><expr pos:start="235:17" pos:end="239:72"><call pos:start="235:17" pos:end="239:72"><name pos:start="235:17" pos:end="235:32">mpegts_write_pes</name><argument_list pos:start="235:33" pos:end="239:72">(<argument pos:start="235:34" pos:end="235:34"><expr pos:start="235:34" pos:end="235:34"><name pos:start="235:34" pos:end="235:34">s</name></expr></argument>, <argument pos:start="235:37" pos:end="235:39"><expr pos:start="235:37" pos:end="235:39"><name pos:start="235:37" pos:end="235:39">st2</name></expr></argument>, <argument pos:start="235:42" pos:end="235:56"><expr pos:start="235:42" pos:end="235:56"><name pos:start="235:42" pos:end="235:56"><name pos:start="235:42" pos:end="235:47">ts_st2</name><operator pos:start="235:48" pos:end="235:49">-&gt;</operator><name pos:start="235:50" pos:end="235:56">payload</name></name></expr></argument>, <argument pos:start="235:59" pos:end="235:78"><expr pos:start="235:59" pos:end="235:78"><name pos:start="235:59" pos:end="235:78"><name pos:start="235:59" pos:end="235:64">ts_st2</name><operator pos:start="235:65" pos:end="235:66">-&gt;</operator><name pos:start="235:67" pos:end="235:78">payload_size</name></name></expr></argument>,

                                <argument pos:start="237:33" pos:end="237:51"><expr pos:start="237:33" pos:end="237:51"><name pos:start="237:33" pos:end="237:51"><name pos:start="237:33" pos:end="237:38">ts_st2</name><operator pos:start="237:39" pos:end="237:40">-&gt;</operator><name pos:start="237:41" pos:end="237:51">payload_pts</name></name></expr></argument>, <argument pos:start="237:54" pos:end="237:72"><expr pos:start="237:54" pos:end="237:72"><name pos:start="237:54" pos:end="237:72"><name pos:start="237:54" pos:end="237:59">ts_st2</name><operator pos:start="237:60" pos:end="237:61">-&gt;</operator><name pos:start="237:62" pos:end="237:72">payload_dts</name></name></expr></argument>,

                                <argument pos:start="239:33" pos:end="239:71"><expr pos:start="239:33" pos:end="239:71"><name pos:start="239:33" pos:end="239:53"><name pos:start="239:33" pos:end="239:38">ts_st2</name><operator pos:start="239:39" pos:end="239:40">-&gt;</operator><name pos:start="239:41" pos:end="239:53">payload_flags</name></name> <operator pos:start="239:55" pos:end="239:55">&amp;</operator> <name pos:start="239:57" pos:end="239:71">AV_PKT_FLAG_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:41"><expr pos:start="241:17" pos:end="241:40"><name pos:start="241:17" pos:end="241:36"><name pos:start="241:17" pos:end="241:22">ts_st2</name><operator pos:start="241:23" pos:end="241:24">-&gt;</operator><name pos:start="241:25" pos:end="241:36">payload_size</name></name> <operator pos:start="241:38" pos:end="241:38">=</operator> <literal type="number" pos:start="241:40" pos:end="241:40">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="251:5" pos:end="267:5"><if pos:start="251:5" pos:end="267:5">if <condition pos:start="251:8" pos:end="257:60">(<expr pos:start="251:9" pos:end="257:59"><name pos:start="251:9" pos:end="251:27"><name pos:start="251:9" pos:end="251:13">ts_st</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:27">payload_size</name></name> <operator pos:start="251:29" pos:end="251:30">&amp;&amp;</operator> <operator pos:start="251:32" pos:end="251:32">(</operator><name pos:start="251:33" pos:end="251:51"><name pos:start="251:33" pos:end="251:37">ts_st</name><operator pos:start="251:38" pos:end="251:39">-&gt;</operator><name pos:start="251:40" pos:end="251:51">payload_size</name></name> <operator pos:start="251:53" pos:end="251:53">+</operator> <name pos:start="251:55" pos:end="251:58">size</name> <operator pos:start="251:60" pos:end="251:60">&gt;</operator> <name pos:start="251:62" pos:end="251:81"><name pos:start="251:62" pos:end="251:63">ts</name><operator pos:start="251:64" pos:end="251:65">-&gt;</operator><name pos:start="251:66" pos:end="251:81">pes_payload_size</name></name> <operator pos:start="251:83" pos:end="251:84">||</operator>

        <operator pos:start="253:9" pos:end="253:9">(</operator><name pos:start="253:10" pos:end="253:12">dts</name> <operator pos:start="253:14" pos:end="253:15">!=</operator> <name pos:start="253:17" pos:end="253:30">AV_NOPTS_VALUE</name> <operator pos:start="253:32" pos:end="253:33">&amp;&amp;</operator> <name pos:start="253:35" pos:end="253:52"><name pos:start="253:35" pos:end="253:39">ts_st</name><operator pos:start="253:40" pos:end="253:41">-&gt;</operator><name pos:start="253:42" pos:end="253:52">payload_dts</name></name> <operator pos:start="253:54" pos:end="253:55">!=</operator> <name pos:start="253:57" pos:end="253:70">AV_NOPTS_VALUE</name> <operator pos:start="253:72" pos:end="253:73">&amp;&amp;</operator>

         <call pos:start="255:10" pos:end="257:52"><name pos:start="255:10" pos:end="255:22">av_compare_ts</name><argument_list pos:start="255:23" pos:end="257:52">(<argument pos:start="255:24" pos:end="255:47"><expr pos:start="255:24" pos:end="255:47"><name pos:start="255:24" pos:end="255:26">dts</name> <operator pos:start="255:28" pos:end="255:28">-</operator> <name pos:start="255:30" pos:end="255:47"><name pos:start="255:30" pos:end="255:34">ts_st</name><operator pos:start="255:35" pos:end="255:36">-&gt;</operator><name pos:start="255:37" pos:end="255:47">payload_dts</name></name></expr></argument>, <argument pos:start="255:50" pos:end="255:62"><expr pos:start="255:50" pos:end="255:62"><name pos:start="255:50" pos:end="255:62"><name pos:start="255:50" pos:end="255:51">st</name><operator pos:start="255:52" pos:end="255:53">-&gt;</operator><name pos:start="255:54" pos:end="255:62">time_base</name></name></expr></argument>,

                       <argument pos:start="257:24" pos:end="257:35"><expr pos:start="257:24" pos:end="257:35"><name pos:start="257:24" pos:end="257:35"><name pos:start="257:24" pos:end="257:24">s</name><operator pos:start="257:25" pos:end="257:26">-&gt;</operator><name pos:start="257:27" pos:end="257:35">max_delay</name></name></expr></argument>, <argument pos:start="257:38" pos:end="257:51"><expr pos:start="257:38" pos:end="257:51"><name pos:start="257:38" pos:end="257:51">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call> <operator pos:start="257:54" pos:end="257:55">&gt;=</operator> <literal type="number" pos:start="257:57" pos:end="257:57">0</literal><operator pos:start="257:58" pos:end="257:58">)</operator><operator pos:start="257:59" pos:end="257:59">)</operator></expr>)</condition> <block pos:start="257:62" pos:end="267:5">{<block_content pos:start="259:9" pos:end="265:32">

        <expr_stmt pos:start="259:9" pos:end="263:65"><expr pos:start="259:9" pos:end="263:64"><call pos:start="259:9" pos:end="263:64"><name pos:start="259:9" pos:end="259:24">mpegts_write_pes</name><argument_list pos:start="259:25" pos:end="263:64">(<argument pos:start="259:26" pos:end="259:26"><expr pos:start="259:26" pos:end="259:26"><name pos:start="259:26" pos:end="259:26">s</name></expr></argument>, <argument pos:start="259:29" pos:end="259:30"><expr pos:start="259:29" pos:end="259:30"><name pos:start="259:29" pos:end="259:30">st</name></expr></argument>, <argument pos:start="259:33" pos:end="259:46"><expr pos:start="259:33" pos:end="259:46"><name pos:start="259:33" pos:end="259:46"><name pos:start="259:33" pos:end="259:37">ts_st</name><operator pos:start="259:38" pos:end="259:39">-&gt;</operator><name pos:start="259:40" pos:end="259:46">payload</name></name></expr></argument>, <argument pos:start="259:49" pos:end="259:67"><expr pos:start="259:49" pos:end="259:67"><name pos:start="259:49" pos:end="259:67"><name pos:start="259:49" pos:end="259:53">ts_st</name><operator pos:start="259:54" pos:end="259:55">-&gt;</operator><name pos:start="259:56" pos:end="259:67">payload_size</name></name></expr></argument>,

                         <argument pos:start="261:26" pos:end="261:43"><expr pos:start="261:26" pos:end="261:43"><name pos:start="261:26" pos:end="261:43"><name pos:start="261:26" pos:end="261:30">ts_st</name><operator pos:start="261:31" pos:end="261:32">-&gt;</operator><name pos:start="261:33" pos:end="261:43">payload_pts</name></name></expr></argument>, <argument pos:start="261:46" pos:end="261:63"><expr pos:start="261:46" pos:end="261:63"><name pos:start="261:46" pos:end="261:63"><name pos:start="261:46" pos:end="261:50">ts_st</name><operator pos:start="261:51" pos:end="261:52">-&gt;</operator><name pos:start="261:53" pos:end="261:63">payload_dts</name></name></expr></argument>,

                         <argument pos:start="263:26" pos:end="263:63"><expr pos:start="263:26" pos:end="263:63"><name pos:start="263:26" pos:end="263:45"><name pos:start="263:26" pos:end="263:30">ts_st</name><operator pos:start="263:31" pos:end="263:32">-&gt;</operator><name pos:start="263:33" pos:end="263:45">payload_flags</name></name> <operator pos:start="263:47" pos:end="263:47">&amp;</operator> <name pos:start="263:49" pos:end="263:63">AV_PKT_FLAG_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:32"><expr pos:start="265:9" pos:end="265:31"><name pos:start="265:9" pos:end="265:27"><name pos:start="265:9" pos:end="265:13">ts_st</name><operator pos:start="265:14" pos:end="265:15">-&gt;</operator><name pos:start="265:16" pos:end="265:27">payload_size</name></name> <operator pos:start="265:29" pos:end="265:29">=</operator> <literal type="number" pos:start="265:31" pos:end="265:31">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="271:5" pos:end="285:5"><if pos:start="271:5" pos:end="285:5">if <condition pos:start="271:8" pos:end="271:83">(<expr pos:start="271:9" pos:end="271:82"><name pos:start="271:9" pos:end="271:29"><name pos:start="271:9" pos:end="271:10">st</name><operator pos:start="271:11" pos:end="271:12">-&gt;</operator><name pos:start="271:13" pos:end="271:17">codec</name><operator pos:start="271:18" pos:end="271:19">-&gt;</operator><name pos:start="271:20" pos:end="271:29">codec_type</name></name> <operator pos:start="271:31" pos:end="271:32">!=</operator> <name pos:start="271:34" pos:end="271:51">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="271:53" pos:end="271:54">||</operator> <name pos:start="271:56" pos:end="271:59">size</name> <operator pos:start="271:61" pos:end="271:61">&gt;</operator> <name pos:start="271:63" pos:end="271:82"><name pos:start="271:63" pos:end="271:64">ts</name><operator pos:start="271:65" pos:end="271:66">-&gt;</operator><name pos:start="271:67" pos:end="271:82">pes_payload_size</name></name></expr>)</condition> <block pos:start="271:85" pos:end="285:5">{<block_content pos:start="273:9" pos:end="283:17">

        <expr_stmt pos:start="273:9" pos:end="273:41"><expr pos:start="273:9" pos:end="273:40"><call pos:start="273:9" pos:end="273:40"><name pos:start="273:9" pos:end="273:18">av_assert0</name><argument_list pos:start="273:19" pos:end="273:40">(<argument pos:start="273:20" pos:end="273:39"><expr pos:start="273:20" pos:end="273:39"><operator pos:start="273:20" pos:end="273:20">!</operator><name pos:start="273:21" pos:end="273:39"><name pos:start="273:21" pos:end="273:25">ts_st</name><operator pos:start="273:26" pos:end="273:27">-&gt;</operator><name pos:start="273:28" pos:end="273:39">payload_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="275:9" pos:end="275:60">// for video and subtitle, write a single pes packet</comment>

        <expr_stmt pos:start="277:9" pos:end="279:55"><expr pos:start="277:9" pos:end="279:54"><call pos:start="277:9" pos:end="279:54"><name pos:start="277:9" pos:end="277:24">mpegts_write_pes</name><argument_list pos:start="277:25" pos:end="279:54">(<argument pos:start="277:26" pos:end="277:26"><expr pos:start="277:26" pos:end="277:26"><name pos:start="277:26" pos:end="277:26">s</name></expr></argument>, <argument pos:start="277:29" pos:end="277:30"><expr pos:start="277:29" pos:end="277:30"><name pos:start="277:29" pos:end="277:30">st</name></expr></argument>, <argument pos:start="277:33" pos:end="277:35"><expr pos:start="277:33" pos:end="277:35"><name pos:start="277:33" pos:end="277:35">buf</name></expr></argument>, <argument pos:start="277:38" pos:end="277:41"><expr pos:start="277:38" pos:end="277:41"><name pos:start="277:38" pos:end="277:41">size</name></expr></argument>, <argument pos:start="277:44" pos:end="277:46"><expr pos:start="277:44" pos:end="277:46"><name pos:start="277:44" pos:end="277:46">pts</name></expr></argument>, <argument pos:start="277:49" pos:end="277:51"><expr pos:start="277:49" pos:end="277:51"><name pos:start="277:49" pos:end="277:51">dts</name></expr></argument>,

                         <argument pos:start="279:26" pos:end="279:53"><expr pos:start="279:26" pos:end="279:53"><name pos:start="279:26" pos:end="279:35"><name pos:start="279:26" pos:end="279:28">pkt</name><operator pos:start="279:29" pos:end="279:30">-&gt;</operator><name pos:start="279:31" pos:end="279:35">flags</name></name> <operator pos:start="279:37" pos:end="279:37">&amp;</operator> <name pos:start="279:39" pos:end="279:53">AV_PKT_FLAG_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:22"><expr pos:start="281:9" pos:end="281:21"><call pos:start="281:9" pos:end="281:21"><name pos:start="281:9" pos:end="281:15">av_free</name><argument_list pos:start="281:16" pos:end="281:21">(<argument pos:start="281:17" pos:end="281:20"><expr pos:start="281:17" pos:end="281:20"><name pos:start="281:17" pos:end="281:20">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="283:9" pos:end="283:17">return <expr pos:start="283:16" pos:end="283:16"><literal type="number" pos:start="283:16" pos:end="283:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="289:5" pos:end="297:5"><if pos:start="289:5" pos:end="297:5">if <condition pos:start="289:8" pos:end="289:29">(<expr pos:start="289:9" pos:end="289:28"><operator pos:start="289:9" pos:end="289:9">!</operator><name pos:start="289:10" pos:end="289:28"><name pos:start="289:10" pos:end="289:14">ts_st</name><operator pos:start="289:15" pos:end="289:16">-&gt;</operator><name pos:start="289:17" pos:end="289:28">payload_size</name></name></expr>)</condition> <block pos:start="289:31" pos:end="297:5">{<block_content pos:start="291:9" pos:end="295:42">

        <expr_stmt pos:start="291:9" pos:end="291:35"><expr pos:start="291:9" pos:end="291:34"><name pos:start="291:9" pos:end="291:26"><name pos:start="291:9" pos:end="291:13">ts_st</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:26">payload_pts</name></name>   <operator pos:start="291:30" pos:end="291:30">=</operator> <name pos:start="291:32" pos:end="291:34">pts</name></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:35"><expr pos:start="293:9" pos:end="293:34"><name pos:start="293:9" pos:end="293:26"><name pos:start="293:9" pos:end="293:13">ts_st</name><operator pos:start="293:14" pos:end="293:15">-&gt;</operator><name pos:start="293:16" pos:end="293:26">payload_dts</name></name>   <operator pos:start="293:30" pos:end="293:30">=</operator> <name pos:start="293:32" pos:end="293:34">dts</name></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:42"><expr pos:start="295:9" pos:end="295:41"><name pos:start="295:9" pos:end="295:28"><name pos:start="295:9" pos:end="295:13">ts_st</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:28">payload_flags</name></name> <operator pos:start="295:30" pos:end="295:30">=</operator> <name pos:start="295:32" pos:end="295:41"><name pos:start="295:32" pos:end="295:34">pkt</name><operator pos:start="295:35" pos:end="295:36">-&gt;</operator><name pos:start="295:37" pos:end="295:41">flags</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="301:5" pos:end="301:60"><expr pos:start="301:5" pos:end="301:59"><call pos:start="301:5" pos:end="301:59"><name pos:start="301:5" pos:end="301:10">memcpy</name><argument_list pos:start="301:11" pos:end="301:59">(<argument pos:start="301:12" pos:end="301:47"><expr pos:start="301:12" pos:end="301:47"><name pos:start="301:12" pos:end="301:25"><name pos:start="301:12" pos:end="301:16">ts_st</name><operator pos:start="301:17" pos:end="301:18">-&gt;</operator><name pos:start="301:19" pos:end="301:25">payload</name></name> <operator pos:start="301:27" pos:end="301:27">+</operator> <name pos:start="301:29" pos:end="301:47"><name pos:start="301:29" pos:end="301:33">ts_st</name><operator pos:start="301:34" pos:end="301:35">-&gt;</operator><name pos:start="301:36" pos:end="301:47">payload_size</name></name></expr></argument>, <argument pos:start="301:50" pos:end="301:52"><expr pos:start="301:50" pos:end="301:52"><name pos:start="301:50" pos:end="301:52">buf</name></expr></argument>, <argument pos:start="301:55" pos:end="301:58"><expr pos:start="301:55" pos:end="301:58"><name pos:start="301:55" pos:end="301:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:32"><expr pos:start="303:5" pos:end="303:31"><name pos:start="303:5" pos:end="303:23"><name pos:start="303:5" pos:end="303:9">ts_st</name><operator pos:start="303:10" pos:end="303:11">-&gt;</operator><name pos:start="303:12" pos:end="303:23">payload_size</name></name> <operator pos:start="303:25" pos:end="303:26">+=</operator> <name pos:start="303:28" pos:end="303:31">size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="307:5" pos:end="307:18"><expr pos:start="307:5" pos:end="307:17"><call pos:start="307:5" pos:end="307:17"><name pos:start="307:5" pos:end="307:11">av_free</name><argument_list pos:start="307:12" pos:end="307:17">(<argument pos:start="307:13" pos:end="307:16"><expr pos:start="307:13" pos:end="307:16"><name pos:start="307:13" pos:end="307:16">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="311:5" pos:end="311:13">return <expr pos:start="311:12" pos:end="311:12"><literal type="number" pos:start="311:12" pos:end="311:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
