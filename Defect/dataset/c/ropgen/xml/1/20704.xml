<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20704.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:26">remove_objects</name><parameter_list pos:start="1:27" pos:end="1:48">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:44">BDRVSheepdogState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:18">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name></decl>, <decl pos:start="5:13" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:13">i</name> <init pos:start="5:15" pos:end="5:17">= <expr pos:start="5:17" pos:end="5:17"><literal type="number" pos:start="5:17" pos:end="5:17">0</literal></expr></init></decl>, <decl pos:start="5:20" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:26">nr_objs</name> <init pos:start="5:28" pos:end="5:30">= <expr pos:start="5:30" pos:end="5:30"><literal type="number" pos:start="5:30" pos:end="5:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:15">result</name> <init pos:start="11:17" pos:end="11:22">= <expr pos:start="11:19" pos:end="11:22"><name pos:start="11:19" pos:end="11:22">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">SheepdogInode</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:24">inode</name> <init pos:start="13:26" pos:end="13:36">= <expr pos:start="13:28" pos:end="13:36"><operator pos:start="13:28" pos:end="13:28">&amp;</operator><name pos:start="13:29" pos:end="13:36"><name pos:start="13:29" pos:end="13:29">s</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:36">inode</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:6">fd</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <call pos:start="17:10" pos:end="17:39"><name pos:start="17:10" pos:end="17:24">connect_to_sdog</name><argument_list pos:start="17:25" pos:end="17:39">(<argument pos:start="17:26" pos:end="17:26"><expr pos:start="17:26" pos:end="17:26"><name pos:start="17:26" pos:end="17:26">s</name></expr></argument>, <argument pos:start="17:29" pos:end="17:38"><expr pos:start="17:29" pos:end="17:38"><operator pos:start="17:29" pos:end="17:29">&amp;</operator><name pos:start="17:30" pos:end="17:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:10">fd</name> <operator pos:start="19:12" pos:end="19:12">&lt;</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>)</condition> <block pos:start="19:17" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:21">

        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><call pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:24">error_report_err</name><argument_list pos:start="21:25" pos:end="21:35">(<argument pos:start="21:26" pos:end="21:34"><expr pos:start="21:26" pos:end="21:34"><name pos:start="21:26" pos:end="21:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:21">return <expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:11">nr_objs</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:36"><name pos:start="29:15" pos:end="29:29">count_data_objs</name><argument_list pos:start="29:30" pos:end="29:36">(<argument pos:start="29:31" pos:end="29:35"><expr pos:start="29:31" pos:end="29:35"><name pos:start="29:31" pos:end="29:35">inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="31:5" pos:end="91:5">while <condition pos:start="31:11" pos:end="31:23">(<expr pos:start="31:12" pos:end="31:22"><name pos:start="31:12" pos:end="31:12">i</name> <operator pos:start="31:14" pos:end="31:14">&lt;</operator> <name pos:start="31:16" pos:end="31:22">nr_objs</name></expr>)</condition> <block pos:start="31:25" pos:end="91:5">{<block_content pos:start="33:9" pos:end="89:9">

        <decl_stmt pos:start="33:9" pos:end="33:37"><decl pos:start="33:9" pos:end="33:21"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:21">start_idx</name></decl>, <decl pos:start="33:24" pos:end="33:36"><type ref="prev" pos:start="33:9" pos:end="33:11"/><name pos:start="33:24" pos:end="33:36">nr_filled_idx</name></decl>;</decl_stmt>



        <while pos:start="37:9" pos:end="41:9">while <condition pos:start="37:15" pos:end="37:53">(<expr pos:start="37:16" pos:end="37:52"><name pos:start="37:16" pos:end="37:16">i</name> <operator pos:start="37:18" pos:end="37:18">&lt;</operator> <name pos:start="37:20" pos:end="37:26">nr_objs</name> <operator pos:start="37:28" pos:end="37:29">&amp;&amp;</operator> <operator pos:start="37:31" pos:end="37:31">!</operator><name pos:start="37:32" pos:end="37:52"><name pos:start="37:32" pos:end="37:36">inode</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:49">data_vdi_id</name><index pos:start="37:50" pos:end="37:52">[<expr pos:start="37:51" pos:end="37:51"><name pos:start="37:51" pos:end="37:51">i</name></expr>]</index></name></expr>)</condition> <block pos:start="37:55" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:16">

            <expr_stmt pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:13">i</name><operator pos:start="39:14" pos:end="39:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:17">start_idx</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:21">i</name></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:26"><expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:21">nr_filled_idx</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <literal type="number" pos:start="47:25" pos:end="47:25">0</literal></expr>;</expr_stmt>

        <while pos:start="49:9" pos:end="63:9">while <condition pos:start="49:15" pos:end="49:65">(<expr pos:start="49:16" pos:end="49:64"><name pos:start="49:16" pos:end="49:16">i</name> <operator pos:start="49:18" pos:end="49:18">&lt;</operator> <name pos:start="49:20" pos:end="49:26">nr_objs</name> <operator pos:start="49:28" pos:end="49:29">&amp;&amp;</operator> <name pos:start="49:31" pos:end="49:43">nr_filled_idx</name> <operator pos:start="49:45" pos:end="49:45">&lt;</operator> <name pos:start="49:47" pos:end="49:64">NR_BATCHED_DISCARD</name></expr>)</condition> <block pos:start="49:67" pos:end="63:9">{<block_content pos:start="51:13" pos:end="61:16">

            <if_stmt pos:start="51:13" pos:end="57:13"><if pos:start="51:13" pos:end="57:13">if <condition pos:start="51:16" pos:end="51:38">(<expr pos:start="51:17" pos:end="51:37"><name pos:start="51:17" pos:end="51:37"><name pos:start="51:17" pos:end="51:21">inode</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:34">data_vdi_id</name><index pos:start="51:35" pos:end="51:37">[<expr pos:start="51:36" pos:end="51:36"><name pos:start="51:36" pos:end="51:36">i</name></expr>]</index></name></expr>)</condition> <block pos:start="51:40" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:32">

                <expr_stmt pos:start="53:17" pos:end="53:42"><expr pos:start="53:17" pos:end="53:41"><name pos:start="53:17" pos:end="53:37"><name pos:start="53:17" pos:end="53:21">inode</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:34">data_vdi_id</name><index pos:start="53:35" pos:end="53:37">[<expr pos:start="53:36" pos:end="53:36"><name pos:start="53:36" pos:end="53:36">i</name></expr>]</index></name> <operator pos:start="53:39" pos:end="53:39">=</operator> <literal type="number" pos:start="53:41" pos:end="53:41">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:32"><expr pos:start="55:17" pos:end="55:31"><name pos:start="55:17" pos:end="55:29">nr_filled_idx</name><operator pos:start="55:30" pos:end="55:31">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="61:13" pos:end="61:16"><expr pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:13">i</name><operator pos:start="61:14" pos:end="61:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>



        <expr_stmt pos:start="67:9" pos:end="79:50"><expr pos:start="67:9" pos:end="79:49"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="79:49"><name pos:start="67:15" pos:end="67:26">write_object</name><argument_list pos:start="67:27" pos:end="79:49">(<argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><name pos:start="67:28" pos:end="67:29">fd</name></expr></argument>, <argument pos:start="67:32" pos:end="67:36"><expr pos:start="67:32" pos:end="67:36"><name pos:start="67:32" pos:end="67:36"><name pos:start="67:32" pos:end="67:32">s</name><operator pos:start="67:33" pos:end="67:34">-&gt;</operator><name pos:start="67:35" pos:end="67:36">bs</name></name></expr></argument>,

                           <argument pos:start="69:28" pos:end="69:65"><expr pos:start="69:28" pos:end="69:65"><operator pos:start="69:28" pos:end="69:28">(</operator><name pos:start="69:29" pos:end="69:32">char</name> <operator pos:start="69:34" pos:end="69:34">*</operator><operator pos:start="69:35" pos:end="69:35">)</operator><operator pos:start="69:36" pos:end="69:36">&amp;</operator><name pos:start="69:37" pos:end="69:65"><name pos:start="69:37" pos:end="69:41">inode</name><operator pos:start="69:42" pos:end="69:43">-&gt;</operator><name pos:start="69:44" pos:end="69:54">data_vdi_id</name><index pos:start="69:55" pos:end="69:65">[<expr pos:start="69:56" pos:end="69:64"><name pos:start="69:56" pos:end="69:64">start_idx</name></expr>]</index></name></expr></argument>,

                           <argument pos:start="71:28" pos:end="71:58"><expr pos:start="71:28" pos:end="71:58"><call pos:start="71:28" pos:end="71:58"><name pos:start="71:28" pos:end="71:41">vid_to_vdi_oid</name><argument_list pos:start="71:42" pos:end="71:58">(<argument pos:start="71:43" pos:end="71:57"><expr pos:start="71:43" pos:end="71:57"><name pos:start="71:43" pos:end="71:57"><name pos:start="71:43" pos:end="71:43">s</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:50">inode</name><operator pos:start="71:51" pos:end="71:51">.</operator><name pos:start="71:52" pos:end="71:57">vdi_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:61" pos:end="71:76"><expr pos:start="71:61" pos:end="71:76"><name pos:start="71:61" pos:end="71:76"><name pos:start="71:61" pos:end="71:65">inode</name><operator pos:start="71:66" pos:end="71:67">-&gt;</operator><name pos:start="71:68" pos:end="71:76">nr_copies</name></name></expr></argument>,

                           <argument pos:start="73:28" pos:end="73:61"><expr pos:start="73:28" pos:end="73:61"><operator pos:start="73:28" pos:end="73:28">(</operator><name pos:start="73:29" pos:end="73:29">i</name> <operator pos:start="73:31" pos:end="73:31">-</operator> <name pos:start="73:33" pos:end="73:41">start_idx</name><operator pos:start="73:42" pos:end="73:42">)</operator> <operator pos:start="73:44" pos:end="73:44">*</operator> <sizeof pos:start="73:46" pos:end="73:61">sizeof<argument_list pos:start="73:52" pos:end="73:61">(<argument pos:start="73:53" pos:end="73:60"><expr pos:start="73:53" pos:end="73:60"><name pos:start="73:53" pos:end="73:60">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                           <argument pos:start="75:28" pos:end="77:59"><expr pos:start="75:28" pos:end="77:59"><call pos:start="75:28" pos:end="77:59"><name pos:start="75:28" pos:end="75:35">offsetof</name><argument_list pos:start="75:36" pos:end="77:59">(<argument pos:start="75:37" pos:end="75:56"><expr pos:start="75:37" pos:end="75:56">struct <name pos:start="75:44" pos:end="75:56">SheepdogInode</name></expr></argument>,

                                    <argument pos:start="77:37" pos:end="77:58"><expr pos:start="77:37" pos:end="77:58"><name pos:start="77:37" pos:end="77:58"><name pos:start="77:37" pos:end="77:47">data_vdi_id</name><index pos:start="77:48" pos:end="77:58">[<expr pos:start="77:49" pos:end="77:57"><name pos:start="77:49" pos:end="77:57">start_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="79:28" pos:end="79:32"><expr pos:start="79:28" pos:end="79:32"><name pos:start="79:28" pos:end="79:32">false</name></expr></argument>, <argument pos:start="79:35" pos:end="79:48"><expr pos:start="79:35" pos:end="79:48"><name pos:start="79:35" pos:end="79:48"><name pos:start="79:35" pos:end="79:35">s</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:48">cache_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="81:20">(<expr pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:15">ret</name> <operator pos:start="81:17" pos:end="81:17">&lt;</operator> <literal type="number" pos:start="81:19" pos:end="81:19">0</literal></expr>)</condition> <block pos:start="81:22" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:21">

            <expr_stmt pos:start="83:13" pos:end="83:62"><expr pos:start="83:13" pos:end="83:61"><call pos:start="83:13" pos:end="83:61"><name pos:start="83:13" pos:end="83:24">error_report</name><argument_list pos:start="83:25" pos:end="83:61">(<argument pos:start="83:26" pos:end="83:60"><expr pos:start="83:26" pos:end="83:60"><literal type="string" pos:start="83:26" pos:end="83:60">"failed to discard snapshot inode."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:18">result</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <name pos:start="85:22" pos:end="85:26">false</name></expr>;</expr_stmt>

            <goto pos:start="87:13" pos:end="87:21">goto <name pos:start="87:18" pos:end="87:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



<label pos:start="95:1" pos:end="95:4"><name pos:start="95:1" pos:end="95:3">out</name>:</label>

    <expr_stmt pos:start="97:5" pos:end="97:20"><expr pos:start="97:5" pos:end="97:19"><call pos:start="97:5" pos:end="97:19"><name pos:start="97:5" pos:end="97:15">closesocket</name><argument_list pos:start="97:16" pos:end="97:19">(<argument pos:start="97:17" pos:end="97:18"><expr pos:start="97:17" pos:end="97:18"><name pos:start="97:17" pos:end="97:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:18">return <expr pos:start="99:12" pos:end="99:17"><name pos:start="99:12" pos:end="99:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
