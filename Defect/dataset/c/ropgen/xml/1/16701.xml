<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16701.c" pos:tabs="8"><function pos:start="1:1" pos:end="277:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:37">tcg_gen_code_common</name><parameter_list pos:start="1:38" pos:end="5:65">(<parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:48">TCGContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:74"><decl pos:start="1:54" pos:end="1:74"><type pos:start="1:54" pos:end="1:74"><name pos:start="1:54" pos:end="1:60">uint8_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:74">gen_code_buf</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:54"><decl pos:start="3:39" pos:end="3:54"><type pos:start="3:39" pos:end="3:54"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:54">do_search_pc</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:64"><decl pos:start="5:39" pos:end="5:64"><type pos:start="5:39" pos:end="5:64"><specifier pos:start="5:39" pos:end="5:43">const</specifier> <name pos:start="5:45" pos:end="5:51">uint8_t</name> <modifier pos:start="5:53" pos:end="5:53">*</modifier></type><name pos:start="5:54" pos:end="5:64">searched_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="277:1">{<block_content pos:start="9:5" pos:end="275:14">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">opc</name></decl>, <decl pos:start="9:14" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:21">op_index</name></decl>, <decl pos:start="9:24" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:37">macro_op_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:20"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:18">TCGOpDef</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:23">def</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:27">dead_iargs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="20:0"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:18"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:16">TCGArg</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:22">args</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="19:1" pos:end="19:18">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="21:5" pos:end="32:0"><if pos:start="21:5" pos:end="32:0">if <condition pos:start="21:8" pos:end="21:43">(<expr pos:start="21:9" pos:end="21:42"><call pos:start="21:9" pos:end="21:42"><name pos:start="21:9" pos:end="21:16">unlikely</name><argument_list pos:start="21:17" pos:end="21:42">(<argument pos:start="21:18" pos:end="21:41"><expr pos:start="21:18" pos:end="21:41"><name pos:start="21:18" pos:end="21:25">loglevel</name> <operator pos:start="21:27" pos:end="21:27">&amp;</operator> <name pos:start="21:29" pos:end="21:41">CPU_LOG_TB_OP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:45" pos:end="32:0">{<block_content pos:start="23:9" pos:end="27:31">

        <expr_stmt pos:start="23:9" pos:end="23:34"><expr pos:start="23:9" pos:end="23:33"><call pos:start="23:9" pos:end="23:33"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="23:33">(<argument pos:start="23:17" pos:end="23:23"><expr pos:start="23:17" pos:end="23:23"><name pos:start="23:17" pos:end="23:23">logfile</name></expr></argument>, <argument pos:start="23:26" pos:end="23:32"><expr pos:start="23:26" pos:end="23:32"><literal type="string" pos:start="23:26" pos:end="23:32">"OP:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><call pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:20">tcg_dump_ops</name><argument_list pos:start="25:21" pos:end="25:32">(<argument pos:start="25:22" pos:end="25:22"><expr pos:start="25:22" pos:end="25:22"><name pos:start="25:22" pos:end="25:22">s</name></expr></argument>, <argument pos:start="25:25" pos:end="25:31"><expr pos:start="25:25" pos:end="25:31"><name pos:start="25:25" pos:end="25:31">logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><call pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:15">fprintf</name><argument_list pos:start="27:16" pos:end="27:30">(<argument pos:start="27:17" pos:end="27:23"><expr pos:start="27:17" pos:end="27:23"><name pos:start="27:17" pos:end="27:23">logfile</name></expr></argument>, <argument pos:start="27:26" pos:end="27:29"><expr pos:start="27:26" pos:end="27:29"><literal type="string" pos:start="27:26" pos:end="27:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="35:5" pos:end="40:0"><expr pos:start="35:5" pos:end="35:28"><call pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:25">tcg_liveness_analysis</name><argument_list pos:start="35:26" pos:end="35:28">(<argument pos:start="35:27" pos:end="35:27"><expr pos:start="35:27" pos:end="35:27"><name pos:start="35:27" pos:end="35:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="39:1" pos:end="39:18">#<cpp:directive pos:start="39:2" pos:end="39:6">ifdef</cpp:directive> <name pos:start="39:8" pos:end="39:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="41:5" pos:end="52:0"><if pos:start="41:5" pos:end="52:0">if <condition pos:start="41:8" pos:end="41:47">(<expr pos:start="41:9" pos:end="41:46"><call pos:start="41:9" pos:end="41:46"><name pos:start="41:9" pos:end="41:16">unlikely</name><argument_list pos:start="41:17" pos:end="41:46">(<argument pos:start="41:18" pos:end="41:45"><expr pos:start="41:18" pos:end="41:45"><name pos:start="41:18" pos:end="41:25">loglevel</name> <operator pos:start="41:27" pos:end="41:27">&amp;</operator> <name pos:start="41:29" pos:end="41:45">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:49" pos:end="52:0">{<block_content pos:start="43:9" pos:end="47:31">

        <expr_stmt pos:start="43:9" pos:end="43:43"><expr pos:start="43:9" pos:end="43:42"><call pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="43:42">(<argument pos:start="43:17" pos:end="43:23"><expr pos:start="43:17" pos:end="43:23"><name pos:start="43:17" pos:end="43:23">logfile</name></expr></argument>, <argument pos:start="43:26" pos:end="43:41"><expr pos:start="43:26" pos:end="43:41"><literal type="string" pos:start="43:26" pos:end="43:41">"OP after la:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:33"><expr pos:start="45:9" pos:end="45:32"><call pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:20">tcg_dump_ops</name><argument_list pos:start="45:21" pos:end="45:32">(<argument pos:start="45:22" pos:end="45:22"><expr pos:start="45:22" pos:end="45:22"><name pos:start="45:22" pos:end="45:22">s</name></expr></argument>, <argument pos:start="45:25" pos:end="45:31"><expr pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:31">logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><call pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="47:30">(<argument pos:start="47:17" pos:end="47:23"><expr pos:start="47:17" pos:end="47:23"><name pos:start="47:17" pos:end="47:23">logfile</name></expr></argument>, <argument pos:start="47:26" pos:end="47:29"><expr pos:start="47:26" pos:end="47:29"><literal type="string" pos:start="47:26" pos:end="47:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="55:5" pos:end="55:27"><expr pos:start="55:5" pos:end="55:26"><call pos:start="55:5" pos:end="55:26"><name pos:start="55:5" pos:end="55:23">tcg_reg_alloc_start</name><argument_list pos:start="55:24" pos:end="55:26">(<argument pos:start="55:25" pos:end="55:25"><expr pos:start="55:25" pos:end="55:25"><name pos:start="55:25" pos:end="55:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:31"><expr pos:start="59:5" pos:end="59:30"><name pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:15">code_buf</name></name> <operator pos:start="59:17" pos:end="59:17">=</operator> <name pos:start="59:19" pos:end="59:30">gen_code_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:31"><expr pos:start="61:5" pos:end="61:30"><name pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:15">code_ptr</name></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:30">gen_code_buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:24"><expr pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:18">macro_op_index</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <operator pos:start="65:22" pos:end="65:22">-</operator><literal type="number" pos:start="65:23" pos:end="65:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:27"><expr pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:8">args</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <name pos:start="67:12" pos:end="67:26">gen_opparam_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:17"><expr pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:12">op_index</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</expr_stmt>

    <for pos:start="71:5" pos:end="271:5">for<control pos:start="71:8" pos:end="71:11">(<init pos:start="71:9" pos:end="71:9">;</init><condition pos:start="71:10" pos:end="71:10">;</condition><incr/>)</control> <block pos:start="71:13" pos:end="271:5">{<block_content pos:start="73:9" pos:end="270:0">

        <expr_stmt pos:start="73:9" pos:end="76:0"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:11">opc</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:35"><name pos:start="73:15" pos:end="73:25">gen_opc_buf</name><index pos:start="73:26" pos:end="73:35">[<expr pos:start="73:27" pos:end="73:34"><name pos:start="73:27" pos:end="73:34">op_index</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="75:1" pos:end="75:22">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:22">CONFIG_PROFILER</name></cpp:ifdef>

        <expr_stmt pos:start="77:9" pos:end="80:0"><expr pos:start="77:9" pos:end="77:36"><name pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:29">dyngen_table_op_count</name><index pos:start="77:30" pos:end="77:34">[<expr pos:start="77:31" pos:end="77:33"><name pos:start="77:31" pos:end="77:33">opc</name></expr>]</index></name><operator pos:start="77:35" pos:end="77:36">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="81:9" pos:end="92:0"><expr pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:11">def</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <operator pos:start="81:15" pos:end="81:15">&amp;</operator><name pos:start="81:16" pos:end="81:31"><name pos:start="81:16" pos:end="81:26">tcg_op_defs</name><index pos:start="81:27" pos:end="81:31">[<expr pos:start="81:28" pos:end="81:30"><name pos:start="81:28" pos:end="81:30">opc</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if pos:start="83:1" pos:end="83:5">#<cpp:directive pos:start="83:2" pos:end="83:3">if</cpp:directive> <expr pos:start="83:5" pos:end="83:5"><literal type="number" pos:start="83:5" pos:end="83:5">0</literal></expr></cpp:if>

        printf("%s: %d %d %d\n", def-&gt;name,

               def-&gt;nb_oargs, def-&gt;nb_iargs, def-&gt;nb_cargs);

        <comment type="line" pos:start="89:9" pos:end="89:31">//        dump_regs(s);</comment>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

        <switch pos:start="93:9" pos:end="241:9">switch<condition pos:start="93:15" pos:end="93:19">(<expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">opc</name></expr>)</condition> <block pos:start="93:21" pos:end="241:9">{<block_content pos:start="95:9" pos:end="239:18">

        <case pos:start="95:9" pos:end="98:0">case <expr pos:start="95:14" pos:end="95:29"><name pos:start="95:14" pos:end="95:29">INDEX_op_mov_i32</name></expr>:</case>

<cpp:if pos:start="97:1" pos:end="97:29">#<cpp:directive pos:start="97:2" pos:end="97:3">if</cpp:directive> <expr pos:start="97:5" pos:end="97:29"><name pos:start="97:5" pos:end="97:23">TCG_TARGET_REG_BITS</name> <operator pos:start="97:25" pos:end="97:26">==</operator> <literal type="number" pos:start="97:28" pos:end="97:29">64</literal></expr></cpp:if>

        <case pos:start="99:9" pos:end="102:0">case <expr pos:start="99:14" pos:end="99:29"><name pos:start="99:14" pos:end="99:29">INDEX_op_mov_i64</name></expr>:</case>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="103:13" pos:end="103:52"><expr pos:start="103:13" pos:end="103:51"><name pos:start="103:13" pos:end="103:22">dead_iargs</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <name pos:start="103:26" pos:end="103:51"><name pos:start="103:26" pos:end="103:26">s</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:41">op_dead_iargs</name><index pos:start="103:42" pos:end="103:51">[<expr pos:start="103:43" pos:end="103:50"><name pos:start="103:43" pos:end="103:50">op_index</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:56"><expr pos:start="105:13" pos:end="105:55"><call pos:start="105:13" pos:end="105:55"><name pos:start="105:13" pos:end="105:29">tcg_reg_alloc_mov</name><argument_list pos:start="105:30" pos:end="105:55">(<argument pos:start="105:31" pos:end="105:31"><expr pos:start="105:31" pos:end="105:31"><name pos:start="105:31" pos:end="105:31">s</name></expr></argument>, <argument pos:start="105:34" pos:end="105:36"><expr pos:start="105:34" pos:end="105:36"><name pos:start="105:34" pos:end="105:36">def</name></expr></argument>, <argument pos:start="105:39" pos:end="105:42"><expr pos:start="105:39" pos:end="105:42"><name pos:start="105:39" pos:end="105:42">args</name></expr></argument>, <argument pos:start="105:45" pos:end="105:54"><expr pos:start="105:45" pos:end="105:54"><name pos:start="105:45" pos:end="105:54">dead_iargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:26">case <expr pos:start="109:14" pos:end="109:25"><name pos:start="109:14" pos:end="109:25">INDEX_op_nop</name></expr>:</case>

        <case pos:start="111:9" pos:end="111:27">case <expr pos:start="111:14" pos:end="111:26"><name pos:start="111:14" pos:end="111:26">INDEX_op_nop1</name></expr>:</case>

        <case pos:start="113:9" pos:end="113:27">case <expr pos:start="113:14" pos:end="113:26"><name pos:start="113:14" pos:end="113:26">INDEX_op_nop2</name></expr>:</case>

        <case pos:start="115:9" pos:end="115:27">case <expr pos:start="115:14" pos:end="115:26"><name pos:start="115:14" pos:end="115:26">INDEX_op_nop3</name></expr>:</case>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <case pos:start="119:9" pos:end="119:27">case <expr pos:start="119:14" pos:end="119:26"><name pos:start="119:14" pos:end="119:26">INDEX_op_nopn</name></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:28"><expr pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:16">args</name> <operator pos:start="121:18" pos:end="121:19">+=</operator> <name pos:start="121:21" pos:end="121:27"><name pos:start="121:21" pos:end="121:24">args</name><index pos:start="121:25" pos:end="121:27">[<expr pos:start="121:26" pos:end="121:26"><literal type="number" pos:start="121:26" pos:end="121:26">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <goto pos:start="123:13" pos:end="123:22">goto <name pos:start="123:18" pos:end="123:21">next</name>;</goto>

        <case pos:start="125:9" pos:end="125:30">case <expr pos:start="125:14" pos:end="125:29"><name pos:start="125:14" pos:end="125:29">INDEX_op_discard</name></expr>:</case>

            <block pos:start="127:13" pos:end="145:13">{<block_content pos:start="129:17" pos:end="143:17">

                <decl_stmt pos:start="129:17" pos:end="129:28"><decl pos:start="129:17" pos:end="129:27"><type pos:start="129:17" pos:end="129:25"><name pos:start="129:17" pos:end="129:23">TCGTemp</name> <modifier pos:start="129:25" pos:end="129:25">*</modifier></type><name pos:start="129:26" pos:end="129:27">ts</name></decl>;</decl_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:40"><expr pos:start="131:17" pos:end="131:39"><name pos:start="131:17" pos:end="131:18">ts</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <operator pos:start="131:22" pos:end="131:22">&amp;</operator><name pos:start="131:23" pos:end="131:39"><name pos:start="131:23" pos:end="131:23">s</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:30">temps</name><index pos:start="131:31" pos:end="131:39">[<expr pos:start="131:32" pos:end="131:38"><name pos:start="131:32" pos:end="131:38"><name pos:start="131:32" pos:end="131:35">args</name><index pos:start="131:36" pos:end="131:38">[<expr pos:start="131:37" pos:end="131:37"><literal type="number" pos:start="131:37" pos:end="131:37">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                <comment type="block" pos:start="133:17" pos:end="133:48">/* mark the temporary as dead */</comment>

                <if_stmt pos:start="135:17" pos:end="143:17"><if pos:start="135:17" pos:end="143:17">if <condition pos:start="135:20" pos:end="135:69">(<expr pos:start="135:21" pos:end="135:68"><name pos:start="135:21" pos:end="135:32"><name pos:start="135:21" pos:end="135:22">ts</name><operator pos:start="135:23" pos:end="135:24">-&gt;</operator><name pos:start="135:25" pos:end="135:32">val_type</name></name> <operator pos:start="135:34" pos:end="135:35">!=</operator> <name pos:start="135:37" pos:end="135:50">TEMP_VAL_CONST</name> <operator pos:start="135:52" pos:end="135:53">&amp;&amp;</operator> <operator pos:start="135:55" pos:end="135:55">!</operator><name pos:start="135:56" pos:end="135:68"><name pos:start="135:56" pos:end="135:57">ts</name><operator pos:start="135:58" pos:end="135:59">-&gt;</operator><name pos:start="135:60" pos:end="135:68">fixed_reg</name></name></expr>)</condition> <block pos:start="135:71" pos:end="143:17">{<block_content pos:start="137:21" pos:end="141:49">

                    <if_stmt pos:start="137:21" pos:end="139:53"><if pos:start="137:21" pos:end="139:53">if <condition pos:start="137:24" pos:end="137:53">(<expr pos:start="137:25" pos:end="137:52"><name pos:start="137:25" pos:end="137:36"><name pos:start="137:25" pos:end="137:26">ts</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:36">val_type</name></name> <operator pos:start="137:38" pos:end="137:39">==</operator> <name pos:start="137:41" pos:end="137:52">TEMP_VAL_REG</name></expr>)</condition><block type="pseudo" pos:start="139:25" pos:end="139:53"><block_content pos:start="139:25" pos:end="139:53">

                        <expr_stmt pos:start="139:25" pos:end="139:53"><expr pos:start="139:25" pos:end="139:52"><name pos:start="139:25" pos:end="139:47"><name pos:start="139:25" pos:end="139:25">s</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:38">reg_to_temp</name><index pos:start="139:39" pos:end="139:47">[<expr pos:start="139:40" pos:end="139:46"><name pos:start="139:40" pos:end="139:46"><name pos:start="139:40" pos:end="139:41">ts</name><operator pos:start="139:42" pos:end="139:43">-&gt;</operator><name pos:start="139:44" pos:end="139:46">reg</name></name></expr>]</index></name> <operator pos:start="139:49" pos:end="139:49">=</operator> <operator pos:start="139:51" pos:end="139:51">-</operator><literal type="number" pos:start="139:52" pos:end="139:52">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="141:21" pos:end="141:49"><expr pos:start="141:21" pos:end="141:48"><name pos:start="141:21" pos:end="141:32"><name pos:start="141:21" pos:end="141:22">ts</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:32">val_type</name></name> <operator pos:start="141:34" pos:end="141:34">=</operator> <name pos:start="141:36" pos:end="141:48">TEMP_VAL_DEAD</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <case pos:start="149:9" pos:end="149:33">case <expr pos:start="149:14" pos:end="149:32"><name pos:start="149:14" pos:end="149:32">INDEX_op_macro_goto</name></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:38"><expr pos:start="151:13" pos:end="151:37"><name pos:start="151:13" pos:end="151:26">macro_op_index</name> <operator pos:start="151:28" pos:end="151:28">=</operator> <name pos:start="151:30" pos:end="151:37">op_index</name></expr>;</expr_stmt> <comment type="block" pos:start="151:40" pos:end="151:69">/* only used for exceptions */</comment>

            <expr_stmt pos:start="153:13" pos:end="153:35"><expr pos:start="153:13" pos:end="153:34"><name pos:start="153:13" pos:end="153:20">op_index</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <name pos:start="153:24" pos:end="153:30"><name pos:start="153:24" pos:end="153:27">args</name><index pos:start="153:28" pos:end="153:30">[<expr pos:start="153:29" pos:end="153:29"><literal type="number" pos:start="153:29" pos:end="153:29">0</literal></expr>]</index></name> <operator pos:start="153:32" pos:end="153:32">-</operator> <literal type="number" pos:start="153:34" pos:end="153:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:45"><expr pos:start="155:13" pos:end="155:44"><name pos:start="155:13" pos:end="155:16">args</name> <operator pos:start="155:18" pos:end="155:18">=</operator> <name pos:start="155:20" pos:end="155:34">gen_opparam_buf</name> <operator pos:start="155:36" pos:end="155:36">+</operator> <name pos:start="155:38" pos:end="155:44"><name pos:start="155:38" pos:end="155:41">args</name><index pos:start="155:42" pos:end="155:44">[<expr pos:start="155:43" pos:end="155:43"><literal type="number" pos:start="155:43" pos:end="155:43">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <goto pos:start="157:13" pos:end="157:22">goto <name pos:start="157:18" pos:end="157:21">next</name>;</goto>

        <case pos:start="159:9" pos:end="159:32">case <expr pos:start="159:14" pos:end="159:31"><name pos:start="159:14" pos:end="159:31">INDEX_op_macro_end</name></expr>:</case>

            <expr_stmt pos:start="161:13" pos:end="161:32"><expr pos:start="161:13" pos:end="161:31"><name pos:start="161:13" pos:end="161:26">macro_op_index</name> <operator pos:start="161:28" pos:end="161:28">=</operator> <operator pos:start="161:30" pos:end="161:30">-</operator><literal type="number" pos:start="161:31" pos:end="161:31">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="161:34" pos:end="161:63">/* only used for exceptions */</comment>

            <expr_stmt pos:start="163:13" pos:end="163:35"><expr pos:start="163:13" pos:end="163:34"><name pos:start="163:13" pos:end="163:20">op_index</name> <operator pos:start="163:22" pos:end="163:22">=</operator> <name pos:start="163:24" pos:end="163:30"><name pos:start="163:24" pos:end="163:27">args</name><index pos:start="163:28" pos:end="163:30">[<expr pos:start="163:29" pos:end="163:29"><literal type="number" pos:start="163:29" pos:end="163:29">0</literal></expr>]</index></name> <operator pos:start="163:32" pos:end="163:32">-</operator> <literal type="number" pos:start="163:34" pos:end="163:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:45"><expr pos:start="165:13" pos:end="165:44"><name pos:start="165:13" pos:end="165:16">args</name> <operator pos:start="165:18" pos:end="165:18">=</operator> <name pos:start="165:20" pos:end="165:34">gen_opparam_buf</name> <operator pos:start="165:36" pos:end="165:36">+</operator> <name pos:start="165:38" pos:end="165:44"><name pos:start="165:38" pos:end="165:41">args</name><index pos:start="165:42" pos:end="165:44">[<expr pos:start="165:43" pos:end="165:43"><literal type="number" pos:start="165:43" pos:end="165:43">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <goto pos:start="167:13" pos:end="167:22">goto <name pos:start="167:18" pos:end="167:21">next</name>;</goto>

        <case pos:start="169:9" pos:end="169:34">case <expr pos:start="169:14" pos:end="169:33"><name pos:start="169:14" pos:end="169:33">INDEX_op_macro_start</name></expr>:</case>

            <comment type="block" pos:start="171:13" pos:end="171:40">/* must never happen here */</comment>

            <expr_stmt pos:start="173:13" pos:end="173:24"><expr pos:start="173:13" pos:end="173:23"><call pos:start="173:13" pos:end="173:23"><name pos:start="173:13" pos:end="173:21">tcg_abort</name><argument_list pos:start="173:22" pos:end="173:23">()</argument_list></call></expr>;</expr_stmt>

        <case pos:start="175:9" pos:end="175:32">case <expr pos:start="175:14" pos:end="175:31"><name pos:start="175:14" pos:end="175:31">INDEX_op_set_label</name></expr>:</case>

            <expr_stmt pos:start="177:13" pos:end="177:36"><expr pos:start="177:13" pos:end="177:35"><call pos:start="177:13" pos:end="177:35"><name pos:start="177:13" pos:end="177:32">tcg_reg_alloc_bb_end</name><argument_list pos:start="177:33" pos:end="177:35">(<argument pos:start="177:34" pos:end="177:34"><expr pos:start="177:34" pos:end="177:34"><name pos:start="177:34" pos:end="177:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:57"><expr pos:start="179:13" pos:end="179:56"><call pos:start="179:13" pos:end="179:56"><name pos:start="179:13" pos:end="179:25">tcg_out_label</name><argument_list pos:start="179:26" pos:end="179:56">(<argument pos:start="179:27" pos:end="179:27"><expr pos:start="179:27" pos:end="179:27"><name pos:start="179:27" pos:end="179:27">s</name></expr></argument>, <argument pos:start="179:30" pos:end="179:36"><expr pos:start="179:30" pos:end="179:36"><name pos:start="179:30" pos:end="179:36"><name pos:start="179:30" pos:end="179:33">args</name><index pos:start="179:34" pos:end="179:36">[<expr pos:start="179:35" pos:end="179:35"><literal type="number" pos:start="179:35" pos:end="179:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="179:39" pos:end="179:55"><expr pos:start="179:39" pos:end="179:55"><operator pos:start="179:39" pos:end="179:39">(</operator><name pos:start="179:40" pos:end="179:43">long</name><operator pos:start="179:44" pos:end="179:44">)</operator><name pos:start="179:45" pos:end="179:55"><name pos:start="179:45" pos:end="179:45">s</name><operator pos:start="179:46" pos:end="179:47">-&gt;</operator><name pos:start="179:48" pos:end="179:55">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <case pos:start="183:9" pos:end="183:27">case <expr pos:start="183:14" pos:end="183:26"><name pos:start="183:14" pos:end="183:26">INDEX_op_call</name></expr>:</case>

            <expr_stmt pos:start="185:13" pos:end="185:52"><expr pos:start="185:13" pos:end="185:51"><name pos:start="185:13" pos:end="185:22">dead_iargs</name> <operator pos:start="185:24" pos:end="185:24">=</operator> <name pos:start="185:26" pos:end="185:51"><name pos:start="185:26" pos:end="185:26">s</name><operator pos:start="185:27" pos:end="185:28">-&gt;</operator><name pos:start="185:29" pos:end="185:41">op_dead_iargs</name><index pos:start="185:42" pos:end="185:51">[<expr pos:start="185:43" pos:end="185:50"><name pos:start="185:43" pos:end="185:50">op_index</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:70"><expr pos:start="187:13" pos:end="187:69"><name pos:start="187:13" pos:end="187:16">args</name> <operator pos:start="187:18" pos:end="187:19">+=</operator> <call pos:start="187:21" pos:end="187:69"><name pos:start="187:21" pos:end="187:38">tcg_reg_alloc_call</name><argument_list pos:start="187:39" pos:end="187:69">(<argument pos:start="187:40" pos:end="187:40"><expr pos:start="187:40" pos:end="187:40"><name pos:start="187:40" pos:end="187:40">s</name></expr></argument>, <argument pos:start="187:43" pos:end="187:45"><expr pos:start="187:43" pos:end="187:45"><name pos:start="187:43" pos:end="187:45">def</name></expr></argument>, <argument pos:start="187:48" pos:end="187:50"><expr pos:start="187:48" pos:end="187:50"><name pos:start="187:48" pos:end="187:50">opc</name></expr></argument>, <argument pos:start="187:53" pos:end="187:56"><expr pos:start="187:53" pos:end="187:56"><name pos:start="187:53" pos:end="187:56">args</name></expr></argument>, <argument pos:start="187:59" pos:end="187:68"><expr pos:start="187:59" pos:end="187:68"><name pos:start="187:59" pos:end="187:68">dead_iargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="189:13" pos:end="189:22">goto <name pos:start="189:18" pos:end="189:21">next</name>;</goto>

        <case pos:start="191:9" pos:end="191:26">case <expr pos:start="191:14" pos:end="191:25"><name pos:start="191:14" pos:end="191:25">INDEX_op_end</name></expr>:</case>

            <goto pos:start="193:13" pos:end="193:25">goto <name pos:start="193:18" pos:end="193:24">the_end</name>;</goto>

        <case pos:start="195:9" pos:end="200:0">case <expr pos:start="195:14" pos:end="195:35"><literal type="number" pos:start="195:14" pos:end="195:14">0</literal> <operator pos:start="195:16" pos:end="195:18">...</operator> <name pos:start="195:20" pos:end="195:31">INDEX_op_end</name> <operator pos:start="195:33" pos:end="195:33">-</operator> <literal type="number" pos:start="195:35" pos:end="195:35">1</literal></expr>:</case>

            <comment type="block" pos:start="197:13" pos:end="197:35">/* legacy dyngen ops */</comment>

<cpp:ifdef pos:start="199:1" pos:end="199:22">#<cpp:directive pos:start="199:2" pos:end="199:6">ifdef</cpp:directive> <name pos:start="199:8" pos:end="199:22">CONFIG_PROFILER</name></cpp:ifdef>

            <block pos:start="201:13" pos:end="210:0">{<block_content pos:start="203:17" pos:end="205:38">

                <decl_stmt pos:start="203:17" pos:end="203:51"><decl pos:start="203:17" pos:end="203:50"><type pos:start="203:17" pos:end="203:30"><specifier pos:start="203:17" pos:end="203:22">extern</specifier> <name pos:start="203:24" pos:end="203:30">int64_t</name></type> <name pos:start="203:32" pos:end="203:50">dyngen_old_op_count</name></decl>;</decl_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:38"><expr pos:start="205:17" pos:end="205:37"><name pos:start="205:17" pos:end="205:35">dyngen_old_op_count</name><operator pos:start="205:36" pos:end="205:37">++</operator></expr>;</expr_stmt>

            </block_content>}</block>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="211:13" pos:end="211:36"><expr pos:start="211:13" pos:end="211:35"><call pos:start="211:13" pos:end="211:35"><name pos:start="211:13" pos:end="211:32">tcg_reg_alloc_bb_end</name><argument_list pos:start="211:33" pos:end="211:35">(<argument pos:start="211:34" pos:end="211:34"><expr pos:start="211:34" pos:end="211:34"><name pos:start="211:34" pos:end="211:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="213:13" pos:end="223:13"><if pos:start="213:13" pos:end="219:13">if <condition pos:start="213:16" pos:end="213:29">(<expr pos:start="213:17" pos:end="213:28"><name pos:start="213:17" pos:end="213:28">do_search_pc</name></expr>)</condition> <block pos:start="213:31" pos:end="219:13">{<block_content pos:start="215:17" pos:end="217:37">

                <expr_stmt pos:start="215:17" pos:end="215:46"><expr pos:start="215:17" pos:end="215:45"><name pos:start="215:17" pos:end="215:27"><name pos:start="215:17" pos:end="215:17">s</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:27">code_ptr</name></name> <operator pos:start="215:29" pos:end="215:30">+=</operator> <name pos:start="215:32" pos:end="215:45"><name pos:start="215:32" pos:end="215:34">def</name><operator pos:start="215:35" pos:end="215:36">-&gt;</operator><name pos:start="215:37" pos:end="215:45">copy_size</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:37"><expr pos:start="217:17" pos:end="217:36"><name pos:start="217:17" pos:end="217:20">args</name> <operator pos:start="217:22" pos:end="217:23">+=</operator> <name pos:start="217:25" pos:end="217:36"><name pos:start="217:25" pos:end="217:27">def</name><operator pos:start="217:28" pos:end="217:29">-&gt;</operator><name pos:start="217:30" pos:end="217:36">nb_args</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="219:15" pos:end="223:13">else <block pos:start="219:20" pos:end="223:13">{<block_content pos:start="221:17" pos:end="221:47">

                <expr_stmt pos:start="221:17" pos:end="221:47"><expr pos:start="221:17" pos:end="221:46"><name pos:start="221:17" pos:end="221:20">args</name> <operator pos:start="221:22" pos:end="221:22">=</operator> <call pos:start="221:24" pos:end="221:46"><name pos:start="221:24" pos:end="221:32">dyngen_op</name><argument_list pos:start="221:33" pos:end="221:46">(<argument pos:start="221:34" pos:end="221:34"><expr pos:start="221:34" pos:end="221:34"><name pos:start="221:34" pos:end="221:34">s</name></expr></argument>, <argument pos:start="221:37" pos:end="221:39"><expr pos:start="221:37" pos:end="221:39"><name pos:start="221:37" pos:end="221:39">opc</name></expr></argument>, <argument pos:start="221:42" pos:end="221:45"><expr pos:start="221:42" pos:end="221:45"><name pos:start="221:42" pos:end="221:45">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <goto pos:start="225:13" pos:end="225:22">goto <name pos:start="225:18" pos:end="225:21">next</name>;</goto>

        <default pos:start="227:9" pos:end="227:16">default:</default>

            <comment type="block" pos:start="229:13" pos:end="233:47">/* Note: in order to speed up the code, it would be much

               faster to have specialized register allocator functions for

               some common argument patterns */</comment>

            <expr_stmt pos:start="235:13" pos:end="235:52"><expr pos:start="235:13" pos:end="235:51"><name pos:start="235:13" pos:end="235:22">dead_iargs</name> <operator pos:start="235:24" pos:end="235:24">=</operator> <name pos:start="235:26" pos:end="235:51"><name pos:start="235:26" pos:end="235:26">s</name><operator pos:start="235:27" pos:end="235:28">-&gt;</operator><name pos:start="235:29" pos:end="235:41">op_dead_iargs</name><index pos:start="235:42" pos:end="235:51">[<expr pos:start="235:43" pos:end="235:50"><name pos:start="235:43" pos:end="235:50">op_index</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:60"><expr pos:start="237:13" pos:end="237:59"><call pos:start="237:13" pos:end="237:59"><name pos:start="237:13" pos:end="237:28">tcg_reg_alloc_op</name><argument_list pos:start="237:29" pos:end="237:59">(<argument pos:start="237:30" pos:end="237:30"><expr pos:start="237:30" pos:end="237:30"><name pos:start="237:30" pos:end="237:30">s</name></expr></argument>, <argument pos:start="237:33" pos:end="237:35"><expr pos:start="237:33" pos:end="237:35"><name pos:start="237:33" pos:end="237:35">def</name></expr></argument>, <argument pos:start="237:38" pos:end="237:40"><expr pos:start="237:38" pos:end="237:40"><name pos:start="237:38" pos:end="237:40">opc</name></expr></argument>, <argument pos:start="237:43" pos:end="237:46"><expr pos:start="237:43" pos:end="237:46"><name pos:start="237:43" pos:end="237:46">args</name></expr></argument>, <argument pos:start="237:49" pos:end="237:58"><expr pos:start="237:49" pos:end="237:58"><name pos:start="237:49" pos:end="237:58">dead_iargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="239:13" pos:end="239:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="243:9" pos:end="243:29"><expr pos:start="243:9" pos:end="243:28"><name pos:start="243:9" pos:end="243:12">args</name> <operator pos:start="243:14" pos:end="243:15">+=</operator> <name pos:start="243:17" pos:end="243:28"><name pos:start="243:17" pos:end="243:19">def</name><operator pos:start="243:20" pos:end="243:21">-&gt;</operator><name pos:start="243:22" pos:end="243:28">nb_args</name></name></expr>;</expr_stmt>

    <label pos:start="245:5" pos:end="245:9"><name pos:start="245:5" pos:end="245:8">next</name>:</label> <empty_stmt pos:start="245:11" pos:end="245:11">;</empty_stmt>

        <if_stmt pos:start="247:9" pos:end="261:9"><if pos:start="247:9" pos:end="261:9">if <condition pos:start="247:12" pos:end="247:25">(<expr pos:start="247:13" pos:end="247:24"><name pos:start="247:13" pos:end="247:24">do_search_pc</name></expr>)</condition> <block pos:start="247:27" pos:end="261:9">{<block_content pos:start="249:13" pos:end="259:13">

            <if_stmt pos:start="249:13" pos:end="259:13"><if pos:start="249:13" pos:end="259:13">if <condition pos:start="249:16" pos:end="249:42">(<expr pos:start="249:17" pos:end="249:41"><name pos:start="249:17" pos:end="249:27">searched_pc</name> <operator pos:start="249:29" pos:end="249:29">&lt;</operator> <name pos:start="249:31" pos:end="249:41"><name pos:start="249:31" pos:end="249:31">s</name><operator pos:start="249:32" pos:end="249:33">-&gt;</operator><name pos:start="249:34" pos:end="249:41">code_ptr</name></name></expr>)</condition> <block pos:start="249:44" pos:end="259:13">{<block_content pos:start="251:17" pos:end="257:36">

                <if_stmt pos:start="251:17" pos:end="257:36"><if pos:start="251:17" pos:end="253:42">if <condition pos:start="251:20" pos:end="251:40">(<expr pos:start="251:21" pos:end="251:39"><name pos:start="251:21" pos:end="251:34">macro_op_index</name> <operator pos:start="251:36" pos:end="251:37">&gt;=</operator> <literal type="number" pos:start="251:39" pos:end="251:39">0</literal></expr>)</condition><block type="pseudo" pos:start="253:21" pos:end="253:42"><block_content pos:start="253:21" pos:end="253:42">

                    <return pos:start="253:21" pos:end="253:42">return <expr pos:start="253:28" pos:end="253:41"><name pos:start="253:28" pos:end="253:41">macro_op_index</name></expr>;</return></block_content></block></if>

                <else pos:start="255:17" pos:end="257:36">else<block type="pseudo" pos:start="257:21" pos:end="257:36"><block_content pos:start="257:21" pos:end="257:36">

                    <return pos:start="257:21" pos:end="257:36">return <expr pos:start="257:28" pos:end="257:35"><name pos:start="257:28" pos:end="257:35">op_index</name></expr>;</return></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="263:9" pos:end="266:0"><expr pos:start="263:9" pos:end="263:18"><name pos:start="263:9" pos:end="263:16">op_index</name><operator pos:start="263:17" pos:end="263:18">++</operator></expr>;</expr_stmt>

<cpp:ifndef pos:start="265:1" pos:end="265:14">#<cpp:directive pos:start="265:2" pos:end="265:7">ifndef</cpp:directive> <name pos:start="265:9" pos:end="265:14">NDEBUG</name></cpp:ifndef>

        <expr_stmt pos:start="267:9" pos:end="270:0"><expr pos:start="267:9" pos:end="267:21"><call pos:start="267:9" pos:end="267:21"><name pos:start="267:9" pos:end="267:18">check_regs</name><argument_list pos:start="267:19" pos:end="267:21">(<argument pos:start="267:20" pos:end="267:20"><expr pos:start="267:20" pos:end="267:20"><name pos:start="267:20" pos:end="267:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></for>

 <label pos:start="273:2" pos:end="273:9"><name pos:start="273:2" pos:end="273:8">the_end</name>:</label>

    <return pos:start="275:5" pos:end="275:14">return <expr pos:start="275:12" pos:end="275:13"><operator pos:start="275:12" pos:end="275:12">-</operator><literal type="number" pos:start="275:13" pos:end="275:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
