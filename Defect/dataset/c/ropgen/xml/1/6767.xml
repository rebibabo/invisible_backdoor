<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6767.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">net_bridge_run_helper</name><parameter_list pos:start="1:33" pos:end="1:72">(<parameter pos:start="1:34" pos:end="1:51"><decl pos:start="1:34" pos:end="1:51"><type pos:start="1:34" pos:end="1:51"><specifier pos:start="1:34" pos:end="1:38">const</specifier> <name pos:start="1:40" pos:end="1:43">char</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">helper</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:71"><decl pos:start="1:54" pos:end="1:71"><type pos:start="1:54" pos:end="1:71"><specifier pos:start="1:54" pos:end="1:58">const</specifier> <name pos:start="1:60" pos:end="1:63">char</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:71">bridge</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="183:1">{<block_content pos:start="5:5" pos:end="181:14">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">sigset_t</name></type> <name pos:start="5:14" pos:end="5:20">oldmask</name></decl>, <decl pos:start="5:23" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:23" pos:end="5:26">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">pid</name></decl>, <decl pos:start="7:14" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:19">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:17"><name pos:start="9:11" pos:end="9:14">args</name><index pos:start="9:15" pos:end="9:17">[<expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier><modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:15">parg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13"><name pos:start="13:9" pos:end="13:10">sv</name><index pos:start="13:11" pos:end="13:13">[<expr pos:start="13:12" pos:end="13:12"><literal type="number" pos:start="13:12" pos:end="13:12">2</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><call pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:15">sigemptyset</name><argument_list pos:start="17:16" pos:end="17:22">(<argument pos:start="17:17" pos:end="17:21"><expr pos:start="17:17" pos:end="17:21"><operator pos:start="17:17" pos:end="17:17">&amp;</operator><name pos:start="17:18" pos:end="17:21">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><call pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:13">sigaddset</name><argument_list pos:start="19:14" pos:end="19:29">(<argument pos:start="19:15" pos:end="19:19"><expr pos:start="19:15" pos:end="19:19"><operator pos:start="19:15" pos:end="19:15">&amp;</operator><name pos:start="19:16" pos:end="19:19">mask</name></expr></argument>, <argument pos:start="19:22" pos:end="19:28"><expr pos:start="19:22" pos:end="19:28"><name pos:start="19:22" pos:end="19:28">SIGCHLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><call pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:15">sigprocmask</name><argument_list pos:start="21:16" pos:end="21:43">(<argument pos:start="21:17" pos:end="21:25"><expr pos:start="21:17" pos:end="21:25"><name pos:start="21:17" pos:end="21:25">SIG_BLOCK</name></expr></argument>, <argument pos:start="21:28" pos:end="21:32"><expr pos:start="21:28" pos:end="21:32"><operator pos:start="21:28" pos:end="21:28">&amp;</operator><name pos:start="21:29" pos:end="21:32">mask</name></expr></argument>, <argument pos:start="21:35" pos:end="21:42"><expr pos:start="21:35" pos:end="21:42"><operator pos:start="21:35" pos:end="21:35">&amp;</operator><name pos:start="21:36" pos:end="21:42">oldmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:54">(<expr pos:start="25:9" pos:end="25:53"><call pos:start="25:9" pos:end="25:47"><name pos:start="25:9" pos:end="25:18">socketpair</name><argument_list pos:start="25:19" pos:end="25:47">(<argument pos:start="25:20" pos:end="25:26"><expr pos:start="25:20" pos:end="25:26"><name pos:start="25:20" pos:end="25:26">PF_UNIX</name></expr></argument>, <argument pos:start="25:29" pos:end="25:39"><expr pos:start="25:29" pos:end="25:39"><name pos:start="25:29" pos:end="25:39">SOCK_STREAM</name></expr></argument>, <argument pos:start="25:42" pos:end="25:42"><expr pos:start="25:42" pos:end="25:42"><literal type="number" pos:start="25:42" pos:end="25:42">0</literal></expr></argument>, <argument pos:start="25:45" pos:end="25:46"><expr pos:start="25:45" pos:end="25:46"><name pos:start="25:45" pos:end="25:46">sv</name></expr></argument>)</argument_list></call> <operator pos:start="25:49" pos:end="25:50">==</operator> <operator pos:start="25:52" pos:end="25:52">-</operator><literal type="number" pos:start="25:53" pos:end="25:53">1</literal></expr>)</condition> <block pos:start="25:56" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:18">

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:37">/* try to launch bridge helper */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:17"><expr pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:7">pid</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:16"><name pos:start="35:11" pos:end="35:14">fork</name><argument_list pos:start="35:15" pos:end="35:16">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="177:5"><if pos:start="37:5" pos:end="131:5">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:11">pid</name> <operator pos:start="37:13" pos:end="37:14">==</operator> <literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>)</condition> <block pos:start="37:19" pos:end="131:5">{<block_content pos:start="39:9" pos:end="127:17">

        <decl_stmt pos:start="39:9" pos:end="39:48"><decl pos:start="39:9" pos:end="39:44"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:20">open_max</name> <init pos:start="39:22" pos:end="39:44">= <expr pos:start="39:24" pos:end="39:44"><call pos:start="39:24" pos:end="39:44"><name pos:start="39:24" pos:end="39:30">sysconf</name><argument_list pos:start="39:31" pos:end="39:44">(<argument pos:start="39:32" pos:end="39:43"><expr pos:start="39:32" pos:end="39:43"><name pos:start="39:32" pos:end="39:43">_SC_OPEN_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl pos:start="39:47" pos:end="39:47"><type ref="prev" pos:start="39:9" pos:end="39:11"/><name pos:start="39:47" pos:end="39:47">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:26"><decl pos:start="41:9" pos:end="41:25"><type pos:start="41:9" pos:end="41:12"><name pos:start="41:9" pos:end="41:12">char</name></type> <name pos:start="41:14" pos:end="41:25"><name pos:start="41:14" pos:end="41:19">fd_buf</name><index pos:start="41:20" pos:end="41:25">[<expr pos:start="41:21" pos:end="41:24"><literal type="number" pos:start="41:21" pos:end="41:21">6</literal><operator pos:start="41:22" pos:end="41:22">+</operator><literal type="number" pos:start="41:23" pos:end="41:24">10</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:38"><decl pos:start="43:9" pos:end="43:37"><type pos:start="43:9" pos:end="43:12"><name pos:start="43:9" pos:end="43:12">char</name></type> <name pos:start="43:14" pos:end="43:31"><name pos:start="43:14" pos:end="43:19">br_buf</name><index pos:start="43:20" pos:end="43:31">[<expr pos:start="43:21" pos:end="43:30"><literal type="number" pos:start="43:21" pos:end="43:21">6</literal><operator pos:start="43:22" pos:end="43:22">+</operator><name pos:start="43:23" pos:end="43:30">IFNAMSIZ</name></expr>]</index></name> <init pos:start="43:33" pos:end="43:37">= <expr pos:start="43:35" pos:end="43:37"><block pos:start="43:35" pos:end="43:37">{<expr pos:start="43:36" pos:end="43:36"><literal type="number" pos:start="43:36" pos:end="43:36">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:73"><decl pos:start="45:9" pos:end="45:72"><type pos:start="45:9" pos:end="45:12"><name pos:start="45:9" pos:end="45:12">char</name></type> <name pos:start="45:14" pos:end="45:72"><name pos:start="45:14" pos:end="45:23">helper_cmd</name><index pos:start="45:24" pos:end="45:72">[<expr pos:start="45:25" pos:end="45:71"><name pos:start="45:25" pos:end="45:32">PATH_MAX</name> <operator pos:start="45:34" pos:end="45:34">+</operator> <sizeof pos:start="45:36" pos:end="45:49">sizeof<argument_list pos:start="45:42" pos:end="45:49">(<argument pos:start="45:43" pos:end="45:48"><expr pos:start="45:43" pos:end="45:48"><name pos:start="45:43" pos:end="45:48">fd_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:51" pos:end="45:51">+</operator> <sizeof pos:start="45:53" pos:end="45:66">sizeof<argument_list pos:start="45:59" pos:end="45:66">(<argument pos:start="45:60" pos:end="45:65"><expr pos:start="45:60" pos:end="45:65"><name pos:start="45:60" pos:end="45:65">br_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:68" pos:end="45:68">+</operator> <literal type="number" pos:start="45:70" pos:end="45:71">15</literal></expr>]</index></name></decl>;</decl_stmt>



        <for pos:start="49:9" pos:end="57:9">for <control pos:start="49:13" pos:end="49:38">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">3</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:33"><expr pos:start="49:21" pos:end="49:32"><name pos:start="49:21" pos:end="49:21">i</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <name pos:start="49:25" pos:end="49:32">open_max</name></expr>;</condition> <incr pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:35">i</name><operator pos:start="49:36" pos:end="49:37">++</operator></expr></incr>)</control> <block pos:start="49:40" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:13">

            <if_stmt pos:start="51:13" pos:end="55:13"><if pos:start="51:13" pos:end="55:13">if <condition pos:start="51:16" pos:end="51:27">(<expr pos:start="51:17" pos:end="51:26"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:20">!=</operator> <name pos:start="51:22" pos:end="51:26"><name pos:start="51:22" pos:end="51:23">sv</name><index pos:start="51:24" pos:end="51:26">[<expr pos:start="51:25" pos:end="51:25"><literal type="number" pos:start="51:25" pos:end="51:25">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="51:29" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:25">

                <expr_stmt pos:start="53:17" pos:end="53:25"><expr pos:start="53:17" pos:end="53:24"><call pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:21">close</name><argument_list pos:start="53:22" pos:end="53:24">(<argument pos:start="53:23" pos:end="53:23"><expr pos:start="53:23" pos:end="53:23"><name pos:start="53:23" pos:end="53:23">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="61:9" pos:end="61:65"><expr pos:start="61:9" pos:end="61:64"><call pos:start="61:9" pos:end="61:64"><name pos:start="61:9" pos:end="61:16">snprintf</name><argument_list pos:start="61:17" pos:end="61:64">(<argument pos:start="61:18" pos:end="61:23"><expr pos:start="61:18" pos:end="61:23"><name pos:start="61:18" pos:end="61:23">fd_buf</name></expr></argument>, <argument pos:start="61:26" pos:end="61:39"><expr pos:start="61:26" pos:end="61:39"><sizeof pos:start="61:26" pos:end="61:39">sizeof<argument_list pos:start="61:32" pos:end="61:39">(<argument pos:start="61:33" pos:end="61:38"><expr pos:start="61:33" pos:end="61:38"><name pos:start="61:33" pos:end="61:38">fd_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="61:42" pos:end="61:47"><expr pos:start="61:42" pos:end="61:47"><literal type="string" pos:start="61:42" pos:end="61:47">"%s%d"</literal></expr></argument>, <argument pos:start="61:50" pos:end="61:56"><expr pos:start="61:50" pos:end="61:56"><literal type="string" pos:start="61:50" pos:end="61:56">"--fd="</literal></expr></argument>, <argument pos:start="61:59" pos:end="61:63"><expr pos:start="61:59" pos:end="61:63"><name pos:start="61:59" pos:end="61:63"><name pos:start="61:59" pos:end="61:60">sv</name><index pos:start="61:61" pos:end="61:63">[<expr pos:start="61:62" pos:end="61:62"><literal type="number" pos:start="61:62" pos:end="61:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="125:9"><if pos:start="65:9" pos:end="99:9">if <condition pos:start="65:12" pos:end="65:58">(<expr pos:start="65:13" pos:end="65:57"><call pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:19">strrchr</name><argument_list pos:start="65:20" pos:end="65:32">(<argument pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:26">helper</name></expr></argument>, <argument pos:start="65:29" pos:end="65:31"><expr pos:start="65:29" pos:end="65:31"><literal type="char" pos:start="65:29" pos:end="65:31">' '</literal></expr></argument>)</argument_list></call> <operator pos:start="65:34" pos:end="65:35">||</operator> <call pos:start="65:37" pos:end="65:57"><name pos:start="65:37" pos:end="65:43">strrchr</name><argument_list pos:start="65:44" pos:end="65:57">(<argument pos:start="65:45" pos:end="65:50"><expr pos:start="65:45" pos:end="65:50"><name pos:start="65:45" pos:end="65:50">helper</name></expr></argument>, <argument pos:start="65:53" pos:end="65:56"><expr pos:start="65:53" pos:end="65:56"><literal type="char" pos:start="65:53" pos:end="65:56">'\t'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:60" pos:end="99:9">{<block_content pos:start="71:13" pos:end="97:35">

            <comment type="block" pos:start="67:13" pos:end="67:44">/* assume helper is a command */</comment>



            <if_stmt pos:start="71:13" pos:end="75:13"><if pos:start="71:13" pos:end="75:13">if <condition pos:start="71:16" pos:end="71:48">(<expr pos:start="71:17" pos:end="71:47"><call pos:start="71:17" pos:end="71:39"><name pos:start="71:17" pos:end="71:22">strstr</name><argument_list pos:start="71:23" pos:end="71:39">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29">helper</name></expr></argument>, <argument pos:start="71:32" pos:end="71:38"><expr pos:start="71:32" pos:end="71:38"><literal type="string" pos:start="71:32" pos:end="71:38">"--br="</literal></expr></argument>)</argument_list></call> <operator pos:start="71:41" pos:end="71:42">==</operator> <name pos:start="71:44" pos:end="71:47">NULL</name></expr>)</condition> <block pos:start="71:50" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:74">

                <expr_stmt pos:start="73:17" pos:end="73:74"><expr pos:start="73:17" pos:end="73:73"><call pos:start="73:17" pos:end="73:73"><name pos:start="73:17" pos:end="73:24">snprintf</name><argument_list pos:start="73:25" pos:end="73:73">(<argument pos:start="73:26" pos:end="73:31"><expr pos:start="73:26" pos:end="73:31"><name pos:start="73:26" pos:end="73:31">br_buf</name></expr></argument>, <argument pos:start="73:34" pos:end="73:47"><expr pos:start="73:34" pos:end="73:47"><sizeof pos:start="73:34" pos:end="73:47">sizeof<argument_list pos:start="73:40" pos:end="73:47">(<argument pos:start="73:41" pos:end="73:46"><expr pos:start="73:41" pos:end="73:46"><name pos:start="73:41" pos:end="73:46">br_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="73:50" pos:end="73:55"><expr pos:start="73:50" pos:end="73:55"><literal type="string" pos:start="73:50" pos:end="73:55">"%s%s"</literal></expr></argument>, <argument pos:start="73:58" pos:end="73:64"><expr pos:start="73:58" pos:end="73:64"><literal type="string" pos:start="73:58" pos:end="73:64">"--br="</literal></expr></argument>, <argument pos:start="73:67" pos:end="73:72"><expr pos:start="73:67" pos:end="73:72"><name pos:start="73:67" pos:end="73:72">bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="79:13" pos:end="81:59"><expr pos:start="79:13" pos:end="81:58"><call pos:start="79:13" pos:end="81:58"><name pos:start="79:13" pos:end="79:20">snprintf</name><argument_list pos:start="79:21" pos:end="81:58">(<argument pos:start="79:22" pos:end="79:31"><expr pos:start="79:22" pos:end="79:31"><name pos:start="79:22" pos:end="79:31">helper_cmd</name></expr></argument>, <argument pos:start="79:34" pos:end="79:51"><expr pos:start="79:34" pos:end="79:51"><sizeof pos:start="79:34" pos:end="79:51">sizeof<argument_list pos:start="79:40" pos:end="79:51">(<argument pos:start="79:41" pos:end="79:50"><expr pos:start="79:41" pos:end="79:50"><name pos:start="79:41" pos:end="79:50">helper_cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="79:54" pos:end="79:66"><expr pos:start="79:54" pos:end="79:66"><literal type="string" pos:start="79:54" pos:end="79:66">"%s %s %s %s"</literal></expr></argument>,

                     <argument pos:start="81:22" pos:end="81:27"><expr pos:start="81:22" pos:end="81:27"><name pos:start="81:22" pos:end="81:27">helper</name></expr></argument>, <argument pos:start="81:30" pos:end="81:41"><expr pos:start="81:30" pos:end="81:41"><literal type="string" pos:start="81:30" pos:end="81:41">"--use-vnet"</literal></expr></argument>, <argument pos:start="81:44" pos:end="81:49"><expr pos:start="81:44" pos:end="81:49"><name pos:start="81:44" pos:end="81:49">fd_buf</name></expr></argument>, <argument pos:start="81:52" pos:end="81:57"><expr pos:start="81:52" pos:end="81:57"><name pos:start="81:52" pos:end="81:57">br_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:24"><expr pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:16">parg</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:23">args</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><operator pos:start="87:13" pos:end="87:13">*</operator><name pos:start="87:14" pos:end="87:17">parg</name><operator pos:start="87:18" pos:end="87:19">++</operator> <operator pos:start="87:21" pos:end="87:21">=</operator> <operator pos:start="87:23" pos:end="87:23">(</operator><name pos:start="87:24" pos:end="87:27">char</name> <operator pos:start="87:29" pos:end="87:29">*</operator><operator pos:start="87:30" pos:end="87:30">)</operator><literal type="string" pos:start="87:31" pos:end="87:34">"sh"</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><operator pos:start="89:13" pos:end="89:13">*</operator><name pos:start="89:14" pos:end="89:17">parg</name><operator pos:start="89:18" pos:end="89:19">++</operator> <operator pos:start="89:21" pos:end="89:21">=</operator> <operator pos:start="89:23" pos:end="89:23">(</operator><name pos:start="89:24" pos:end="89:27">char</name> <operator pos:start="89:29" pos:end="89:29">*</operator><operator pos:start="89:30" pos:end="89:30">)</operator><literal type="string" pos:start="89:31" pos:end="89:34">"-c"</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:33"><expr pos:start="91:13" pos:end="91:32"><operator pos:start="91:13" pos:end="91:13">*</operator><name pos:start="91:14" pos:end="91:17">parg</name><operator pos:start="91:18" pos:end="91:19">++</operator> <operator pos:start="91:21" pos:end="91:21">=</operator> <name pos:start="91:23" pos:end="91:32">helper_cmd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:27"><expr pos:start="93:13" pos:end="93:26"><operator pos:start="93:13" pos:end="93:13">*</operator><name pos:start="93:14" pos:end="93:17">parg</name><operator pos:start="93:18" pos:end="93:19">++</operator> <operator pos:start="93:21" pos:end="93:21">=</operator> <name pos:start="93:23" pos:end="93:26">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="97:13" pos:end="97:35"><expr pos:start="97:13" pos:end="97:34"><call pos:start="97:13" pos:end="97:34"><name pos:start="97:13" pos:end="97:17">execv</name><argument_list pos:start="97:18" pos:end="97:34">(<argument pos:start="97:19" pos:end="97:27"><expr pos:start="97:19" pos:end="97:27"><literal type="string" pos:start="97:19" pos:end="97:27">"/bin/sh"</literal></expr></argument>, <argument pos:start="97:30" pos:end="97:33"><expr pos:start="97:30" pos:end="97:33"><name pos:start="97:30" pos:end="97:33">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="125:9">else <block pos:start="99:16" pos:end="125:9">{<block_content pos:start="105:13" pos:end="123:32">

            <comment type="block" pos:start="101:13" pos:end="101:64">/* assume helper is just the executable path name */</comment>



            <expr_stmt pos:start="105:13" pos:end="105:70"><expr pos:start="105:13" pos:end="105:69"><call pos:start="105:13" pos:end="105:69"><name pos:start="105:13" pos:end="105:20">snprintf</name><argument_list pos:start="105:21" pos:end="105:69">(<argument pos:start="105:22" pos:end="105:27"><expr pos:start="105:22" pos:end="105:27"><name pos:start="105:22" pos:end="105:27">br_buf</name></expr></argument>, <argument pos:start="105:30" pos:end="105:43"><expr pos:start="105:30" pos:end="105:43"><sizeof pos:start="105:30" pos:end="105:43">sizeof<argument_list pos:start="105:36" pos:end="105:43">(<argument pos:start="105:37" pos:end="105:42"><expr pos:start="105:37" pos:end="105:42"><name pos:start="105:37" pos:end="105:42">br_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="105:46" pos:end="105:51"><expr pos:start="105:46" pos:end="105:51"><literal type="string" pos:start="105:46" pos:end="105:51">"%s%s"</literal></expr></argument>, <argument pos:start="105:54" pos:end="105:60"><expr pos:start="105:54" pos:end="105:60"><literal type="string" pos:start="105:54" pos:end="105:60">"--br="</literal></expr></argument>, <argument pos:start="105:63" pos:end="105:68"><expr pos:start="105:63" pos:end="105:68"><name pos:start="105:63" pos:end="105:68">bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:24"><expr pos:start="109:13" pos:end="109:23"><name pos:start="109:13" pos:end="109:16">parg</name> <operator pos:start="109:18" pos:end="109:18">=</operator> <name pos:start="109:20" pos:end="109:23">args</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:37"><expr pos:start="111:13" pos:end="111:36"><operator pos:start="111:13" pos:end="111:13">*</operator><name pos:start="111:14" pos:end="111:17">parg</name><operator pos:start="111:18" pos:end="111:19">++</operator> <operator pos:start="111:21" pos:end="111:21">=</operator> <operator pos:start="111:23" pos:end="111:23">(</operator><name pos:start="111:24" pos:end="111:27">char</name> <operator pos:start="111:29" pos:end="111:29">*</operator><operator pos:start="111:30" pos:end="111:30">)</operator><name pos:start="111:31" pos:end="111:36">helper</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:43"><expr pos:start="113:13" pos:end="113:42"><operator pos:start="113:13" pos:end="113:13">*</operator><name pos:start="113:14" pos:end="113:17">parg</name><operator pos:start="113:18" pos:end="113:19">++</operator> <operator pos:start="113:21" pos:end="113:21">=</operator> <operator pos:start="113:23" pos:end="113:23">(</operator><name pos:start="113:24" pos:end="113:27">char</name> <operator pos:start="113:29" pos:end="113:29">*</operator><operator pos:start="113:30" pos:end="113:30">)</operator><literal type="string" pos:start="113:31" pos:end="113:42">"--use-vnet"</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:29"><expr pos:start="115:13" pos:end="115:28"><operator pos:start="115:13" pos:end="115:13">*</operator><name pos:start="115:14" pos:end="115:17">parg</name><operator pos:start="115:18" pos:end="115:19">++</operator> <operator pos:start="115:21" pos:end="115:21">=</operator> <name pos:start="115:23" pos:end="115:28">fd_buf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:29"><expr pos:start="117:13" pos:end="117:28"><operator pos:start="117:13" pos:end="117:13">*</operator><name pos:start="117:14" pos:end="117:17">parg</name><operator pos:start="117:18" pos:end="117:19">++</operator> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:28">br_buf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:27"><expr pos:start="119:13" pos:end="119:26"><operator pos:start="119:13" pos:end="119:13">*</operator><name pos:start="119:14" pos:end="119:17">parg</name><operator pos:start="119:18" pos:end="119:19">++</operator> <operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:26">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="123:13" pos:end="123:32"><expr pos:start="123:13" pos:end="123:31"><call pos:start="123:13" pos:end="123:31"><name pos:start="123:13" pos:end="123:17">execv</name><argument_list pos:start="123:18" pos:end="123:31">(<argument pos:start="123:19" pos:end="123:24"><expr pos:start="123:19" pos:end="123:24"><name pos:start="123:19" pos:end="123:24">helper</name></expr></argument>, <argument pos:start="123:27" pos:end="123:30"><expr pos:start="123:27" pos:end="123:30"><name pos:start="123:27" pos:end="123:30">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:17"><expr pos:start="127:9" pos:end="127:16"><call pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:13">_exit</name><argument_list pos:start="127:14" pos:end="127:16">(<argument pos:start="127:15" pos:end="127:15"><expr pos:start="127:15" pos:end="127:15"><literal type="number" pos:start="127:15" pos:end="127:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="131:7" pos:end="177:5">else if <condition pos:start="131:15" pos:end="131:23">(<expr pos:start="131:16" pos:end="131:22"><name pos:start="131:16" pos:end="131:18">pid</name> <operator pos:start="131:20" pos:end="131:20">&gt;</operator> <literal type="number" pos:start="131:22" pos:end="131:22">0</literal></expr>)</condition> <block pos:start="131:25" pos:end="177:5">{<block_content pos:start="133:9" pos:end="175:9">

        <decl_stmt pos:start="133:9" pos:end="133:15"><decl pos:start="133:9" pos:end="133:14"><type pos:start="133:9" pos:end="133:11"><name pos:start="133:9" pos:end="133:11">int</name></type> <name pos:start="133:13" pos:end="133:14">fd</name></decl>;</decl_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:21"><expr pos:start="137:9" pos:end="137:20"><call pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:13">close</name><argument_list pos:start="137:14" pos:end="137:20">(<argument pos:start="137:15" pos:end="137:19"><expr pos:start="137:15" pos:end="137:19"><name pos:start="137:15" pos:end="137:19"><name pos:start="137:15" pos:end="137:16">sv</name><index pos:start="137:17" pos:end="137:19">[<expr pos:start="137:18" pos:end="137:18"><literal type="number" pos:start="137:18" pos:end="137:18">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <do pos:start="141:9" pos:end="145:45">do <block pos:start="141:12" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:32">

            <expr_stmt pos:start="143:13" pos:end="143:32"><expr pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:14">fd</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <call pos:start="143:18" pos:end="143:31"><name pos:start="143:18" pos:end="143:24">recv_fd</name><argument_list pos:start="143:25" pos:end="143:31">(<argument pos:start="143:26" pos:end="143:30"><expr pos:start="143:26" pos:end="143:30"><name pos:start="143:26" pos:end="143:30"><name pos:start="143:26" pos:end="143:27">sv</name><index pos:start="143:28" pos:end="143:30">[<expr pos:start="143:29" pos:end="143:29"><literal type="number" pos:start="143:29" pos:end="143:29">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="145:17" pos:end="145:44">(<expr pos:start="145:18" pos:end="145:43"><name pos:start="145:18" pos:end="145:19">fd</name> <operator pos:start="145:21" pos:end="145:22">==</operator> <operator pos:start="145:24" pos:end="145:24">-</operator><literal type="number" pos:start="145:25" pos:end="145:25">1</literal> <operator pos:start="145:27" pos:end="145:28">&amp;&amp;</operator> <name pos:start="145:30" pos:end="145:34">errno</name> <operator pos:start="145:36" pos:end="145:37">==</operator> <name pos:start="145:39" pos:end="145:43">EINTR</name></expr>)</condition>;</do>



        <expr_stmt pos:start="149:9" pos:end="149:21"><expr pos:start="149:9" pos:end="149:20"><call pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:13">close</name><argument_list pos:start="149:14" pos:end="149:20">(<argument pos:start="149:15" pos:end="149:19"><expr pos:start="149:15" pos:end="149:19"><name pos:start="149:15" pos:end="149:19"><name pos:start="149:15" pos:end="149:16">sv</name><index pos:start="149:17" pos:end="149:19">[<expr pos:start="149:18" pos:end="149:18"><literal type="number" pos:start="149:18" pos:end="149:18">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="153:9" pos:end="157:9">while <condition pos:start="153:15" pos:end="153:47">(<expr pos:start="153:16" pos:end="153:46"><call pos:start="153:16" pos:end="153:39"><name pos:start="153:16" pos:end="153:22">waitpid</name><argument_list pos:start="153:23" pos:end="153:39">(<argument pos:start="153:24" pos:end="153:26"><expr pos:start="153:24" pos:end="153:26"><name pos:start="153:24" pos:end="153:26">pid</name></expr></argument>, <argument pos:start="153:29" pos:end="153:35"><expr pos:start="153:29" pos:end="153:35"><operator pos:start="153:29" pos:end="153:29">&amp;</operator><name pos:start="153:30" pos:end="153:35">status</name></expr></argument>, <argument pos:start="153:38" pos:end="153:38"><expr pos:start="153:38" pos:end="153:38"><literal type="number" pos:start="153:38" pos:end="153:38">0</literal></expr></argument>)</argument_list></call> <operator pos:start="153:41" pos:end="153:42">!=</operator> <name pos:start="153:44" pos:end="153:46">pid</name></expr>)</condition> <block pos:start="153:49" pos:end="157:9">{<block_content>

            <comment type="block" pos:start="155:13" pos:end="155:22">/* loop */</comment>

        </block_content>}</block></while>

        <expr_stmt pos:start="159:9" pos:end="159:49"><expr pos:start="159:9" pos:end="159:48"><call pos:start="159:9" pos:end="159:48"><name pos:start="159:9" pos:end="159:19">sigprocmask</name><argument_list pos:start="159:20" pos:end="159:48">(<argument pos:start="159:21" pos:end="159:31"><expr pos:start="159:21" pos:end="159:31"><name pos:start="159:21" pos:end="159:31">SIG_SETMASK</name></expr></argument>, <argument pos:start="159:34" pos:end="159:41"><expr pos:start="159:34" pos:end="159:41"><operator pos:start="159:34" pos:end="159:34">&amp;</operator><name pos:start="159:35" pos:end="159:41">oldmask</name></expr></argument>, <argument pos:start="159:44" pos:end="159:47"><expr pos:start="159:44" pos:end="159:47"><name pos:start="159:44" pos:end="159:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="167:9"><if pos:start="161:9" pos:end="167:9">if <condition pos:start="161:12" pos:end="161:19">(<expr pos:start="161:13" pos:end="161:18"><name pos:start="161:13" pos:end="161:14">fd</name> <operator pos:start="161:16" pos:end="161:16">&lt;</operator> <literal type="number" pos:start="161:18" pos:end="161:18">0</literal></expr>)</condition> <block pos:start="161:21" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:22">

            <expr_stmt pos:start="163:13" pos:end="163:64"><expr pos:start="163:13" pos:end="163:63"><call pos:start="163:13" pos:end="163:63"><name pos:start="163:13" pos:end="163:19">fprintf</name><argument_list pos:start="163:20" pos:end="163:63">(<argument pos:start="163:21" pos:end="163:26"><expr pos:start="163:21" pos:end="163:26"><name pos:start="163:21" pos:end="163:26">stderr</name></expr></argument>, <argument pos:start="163:29" pos:end="163:62"><expr pos:start="163:29" pos:end="163:62"><literal type="string" pos:start="163:29" pos:end="163:62">"failed to recv file descriptor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="165:13" pos:end="165:22">return <expr pos:start="165:20" pos:end="165:21"><operator pos:start="165:20" pos:end="165:20">-</operator><literal type="number" pos:start="165:21" pos:end="165:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="171:9" pos:end="175:9"><if pos:start="171:9" pos:end="175:9">if <condition pos:start="171:12" pos:end="171:58">(<expr pos:start="171:13" pos:end="171:57"><call pos:start="171:13" pos:end="171:29"><name pos:start="171:13" pos:end="171:21">WIFEXITED</name><argument_list pos:start="171:22" pos:end="171:29">(<argument pos:start="171:23" pos:end="171:28"><expr pos:start="171:23" pos:end="171:28"><name pos:start="171:23" pos:end="171:28">status</name></expr></argument>)</argument_list></call> <operator pos:start="171:31" pos:end="171:32">&amp;&amp;</operator> <call pos:start="171:34" pos:end="171:52"><name pos:start="171:34" pos:end="171:44">WEXITSTATUS</name><argument_list pos:start="171:45" pos:end="171:52">(<argument pos:start="171:46" pos:end="171:51"><expr pos:start="171:46" pos:end="171:51"><name pos:start="171:46" pos:end="171:51">status</name></expr></argument>)</argument_list></call> <operator pos:start="171:54" pos:end="171:55">==</operator> <literal type="number" pos:start="171:57" pos:end="171:57">0</literal></expr>)</condition> <block pos:start="171:60" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:22">

            <return pos:start="173:13" pos:end="173:22">return <expr pos:start="173:20" pos:end="173:21"><name pos:start="173:20" pos:end="173:21">fd</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:56"><expr pos:start="179:5" pos:end="179:55"><call pos:start="179:5" pos:end="179:55"><name pos:start="179:5" pos:end="179:11">fprintf</name><argument_list pos:start="179:12" pos:end="179:55">(<argument pos:start="179:13" pos:end="179:18"><expr pos:start="179:13" pos:end="179:18"><name pos:start="179:13" pos:end="179:18">stderr</name></expr></argument>, <argument pos:start="179:21" pos:end="179:54"><expr pos:start="179:21" pos:end="179:54"><literal type="string" pos:start="179:21" pos:end="179:54">"failed to launch bridge helper\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="181:5" pos:end="181:14">return <expr pos:start="181:12" pos:end="181:13"><operator pos:start="181:12" pos:end="181:12">-</operator><literal type="number" pos:start="181:13" pos:end="181:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
