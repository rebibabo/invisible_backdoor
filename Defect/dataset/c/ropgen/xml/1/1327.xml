<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1327.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">parse_times</name><parameter_list pos:start="1:23" pos:end="3:45">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:27">void</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:36">log_ctx</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:45">int64_t</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier><modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">times</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:68"><decl pos:start="1:56" pos:end="1:68"><type pos:start="1:56" pos:end="1:68"><name pos:start="1:56" pos:end="1:58">int</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:68">nb_times</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:44"><decl pos:start="3:24" pos:end="3:44"><type pos:start="3:24" pos:end="3:44"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:33">char</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">times_str</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="103:1">{<block_content pos:start="7:5" pos:end="101:15">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:20">times_str1</name> <init pos:start="11:22" pos:end="11:43">= <expr pos:start="11:24" pos:end="11:43"><call pos:start="11:24" pos:end="11:43"><name pos:start="11:24" pos:end="11:32">av_strdup</name><argument_list pos:start="11:33" pos:end="11:43">(<argument pos:start="11:34" pos:end="11:42"><expr pos:start="11:34" pos:end="11:42"><name pos:start="11:34" pos:end="11:42">times_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:17">saveptr</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="24:0"><if pos:start="17:5" pos:end="24:0">if <condition pos:start="17:8" pos:end="17:20">(<expr pos:start="17:9" pos:end="17:19"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:19">times_str1</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="24:0"><block_content pos:start="19:9" pos:end="24:0">

        <return pos:start="19:9" pos:end="24:0">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<cpp:define pos:start="23:1" pos:end="23:37">#<cpp:directive pos:start="23:2" pos:end="23:7">define</cpp:directive> <cpp:macro pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:12">FAIL</name><parameter_list pos:start="23:13" pos:end="23:17">(<parameter pos:start="23:14" pos:end="23:16"><type pos:start="23:14" pos:end="23:16"><name pos:start="23:14" pos:end="23:16">err</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="23:19" pos:end="23:37">ret = err; goto end</cpp:value></cpp:define>



    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><operator pos:start="27:5" pos:end="27:5">*</operator><name pos:start="27:6" pos:end="27:13">nb_times</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</expr_stmt>

    <for pos:start="29:5" pos:end="33:26">for <control pos:start="29:9" pos:end="29:33">(<init pos:start="29:10" pos:end="29:24"><expr pos:start="29:10" pos:end="29:23"><name pos:start="29:10" pos:end="29:10">p</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:23">times_str1</name></expr>;</init> <condition pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:27"><operator pos:start="29:26" pos:end="29:26">*</operator><name pos:start="29:27" pos:end="29:27">p</name></expr>;</condition> <incr pos:start="29:30" pos:end="29:32"><expr pos:start="29:30" pos:end="29:32"><name pos:start="29:30" pos:end="29:30">p</name><operator pos:start="29:31" pos:end="29:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="31:9" pos:end="33:26"><block_content pos:start="31:9" pos:end="33:26">

        <if_stmt pos:start="31:9" pos:end="33:26"><if pos:start="31:9" pos:end="33:26">if <condition pos:start="31:12" pos:end="31:22">(<expr pos:start="31:13" pos:end="31:21"><operator pos:start="31:13" pos:end="31:13">*</operator><name pos:start="31:14" pos:end="31:14">p</name> <operator pos:start="31:16" pos:end="31:17">==</operator> <literal type="char" pos:start="31:19" pos:end="31:21">','</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:26"><block_content pos:start="33:13" pos:end="33:26">

            <expr_stmt pos:start="33:13" pos:end="33:26"><expr pos:start="33:13" pos:end="33:25"><operator pos:start="33:13" pos:end="33:13">(</operator><operator pos:start="33:14" pos:end="33:14">*</operator><name pos:start="33:15" pos:end="33:22">nb_times</name><operator pos:start="33:23" pos:end="33:23">)</operator><operator pos:start="33:24" pos:end="33:25">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



    <expr_stmt pos:start="37:5" pos:end="37:52"><expr pos:start="37:5" pos:end="37:51"><operator pos:start="37:5" pos:end="37:5">*</operator><name pos:start="37:6" pos:end="37:10">times</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:51"><name pos:start="37:14" pos:end="37:22">av_malloc</name><argument_list pos:start="37:23" pos:end="37:51">(<argument pos:start="37:24" pos:end="37:50"><expr pos:start="37:24" pos:end="37:50"><sizeof pos:start="37:24" pos:end="37:38">sizeof<argument_list pos:start="37:30" pos:end="37:38">(<argument pos:start="37:31" pos:end="37:37"><expr pos:start="37:31" pos:end="37:37"><operator pos:start="37:31" pos:end="37:31">*</operator><operator pos:start="37:32" pos:end="37:32">*</operator><name pos:start="37:33" pos:end="37:37">times</name></expr></argument>)</argument_list></sizeof> <operator pos:start="37:40" pos:end="37:40">*</operator> <operator pos:start="37:42" pos:end="37:42">*</operator><name pos:start="37:43" pos:end="37:50">nb_times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><operator pos:start="39:9" pos:end="39:9">!</operator><operator pos:start="39:10" pos:end="39:10">*</operator><name pos:start="39:11" pos:end="39:15">times</name></expr>)</condition> <block pos:start="39:18" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:30">

        <expr_stmt pos:start="41:9" pos:end="41:81"><expr pos:start="41:9" pos:end="41:80"><call pos:start="41:9" pos:end="41:80"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:80">(<argument pos:start="41:16" pos:end="41:22"><expr pos:start="41:16" pos:end="41:22"><name pos:start="41:16" pos:end="41:22">log_ctx</name></expr></argument>, <argument pos:start="41:25" pos:end="41:36"><expr pos:start="41:25" pos:end="41:36"><name pos:start="41:25" pos:end="41:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:39" pos:end="41:79"><expr pos:start="41:39" pos:end="41:79"><literal type="string" pos:start="41:39" pos:end="41:79">"Could not allocate forced times array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:12">FAIL</name><argument_list pos:start="43:13" pos:end="43:29">(<argument pos:start="43:14" pos:end="43:28"><expr pos:start="43:14" pos:end="43:28"><call pos:start="43:14" pos:end="43:28"><name pos:start="43:14" pos:end="43:20">AVERROR</name><argument_list pos:start="43:21" pos:end="43:28">(<argument pos:start="43:22" pos:end="43:27"><expr pos:start="43:22" pos:end="43:27"><name pos:start="43:22" pos:end="43:27">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:19"><expr pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:5">p</name> <operator pos:start="49:7" pos:end="49:7">=</operator> <name pos:start="49:9" pos:end="49:18">times_str1</name></expr>;</expr_stmt>

    <for pos:start="51:5" pos:end="93:5">for <control pos:start="51:9" pos:end="51:35">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:30"><expr pos:start="51:17" pos:end="51:29"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <operator pos:start="51:21" pos:end="51:21">*</operator><name pos:start="51:22" pos:end="51:29">nb_times</name></expr>;</condition> <incr pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:32">i</name><operator pos:start="51:33" pos:end="51:34">++</operator></expr></incr>)</control> <block pos:start="51:37" pos:end="93:5">{<block_content pos:start="53:9" pos:end="91:9">

        <decl_stmt pos:start="53:9" pos:end="53:18"><decl pos:start="53:9" pos:end="53:17"><type pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:15">int64_t</name></type> <name pos:start="53:17" pos:end="53:17">t</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:49"><decl pos:start="55:9" pos:end="55:48"><type pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:12">char</name> <modifier pos:start="55:14" pos:end="55:14">*</modifier></type><name pos:start="55:15" pos:end="55:18">tstr</name> <init pos:start="55:20" pos:end="55:48">= <expr pos:start="55:22" pos:end="55:48"><call pos:start="55:22" pos:end="55:48"><name pos:start="55:22" pos:end="55:30">av_strtok</name><argument_list pos:start="55:31" pos:end="55:48">(<argument pos:start="55:32" pos:end="55:32"><expr pos:start="55:32" pos:end="55:32"><name pos:start="55:32" pos:end="55:32">p</name></expr></argument>, <argument pos:start="55:35" pos:end="55:37"><expr pos:start="55:35" pos:end="55:37"><literal type="string" pos:start="55:35" pos:end="55:37">","</literal></expr></argument>, <argument pos:start="55:40" pos:end="55:47"><expr pos:start="55:40" pos:end="55:47"><operator pos:start="55:40" pos:end="55:40">&amp;</operator><name pos:start="55:41" pos:end="55:47">saveptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:25"><expr pos:start="57:9" pos:end="57:24"><call pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:18">av_assert0</name><argument_list pos:start="57:19" pos:end="57:24">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:17"><expr pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:9">p</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <name pos:start="59:13" pos:end="59:16">NULL</name></expr>;</expr_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:41"><expr pos:start="63:9" pos:end="63:40"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:40"><name pos:start="63:15" pos:end="63:27">av_parse_time</name><argument_list pos:start="63:28" pos:end="63:40">(<argument pos:start="63:29" pos:end="63:30"><expr pos:start="63:29" pos:end="63:30"><operator pos:start="63:29" pos:end="63:29">&amp;</operator><name pos:start="63:30" pos:end="63:30">t</name></expr></argument>, <argument pos:start="63:33" pos:end="63:36"><expr pos:start="63:33" pos:end="63:36"><name pos:start="63:33" pos:end="63:36">tstr</name></expr></argument>, <argument pos:start="63:39" pos:end="63:39"><expr pos:start="63:39" pos:end="63:39"><literal type="number" pos:start="63:39" pos:end="63:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="65:20">(<expr pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:17">&lt;</operator> <literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr>)</condition> <block pos:start="65:22" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:34">

            <expr_stmt pos:start="67:13" pos:end="69:69"><expr pos:start="67:13" pos:end="69:68"><call pos:start="67:13" pos:end="69:68"><name pos:start="67:13" pos:end="67:18">av_log</name><argument_list pos:start="67:19" pos:end="69:68">(<argument pos:start="67:20" pos:end="67:26"><expr pos:start="67:20" pos:end="67:26"><name pos:start="67:20" pos:end="67:26">log_ctx</name></expr></argument>, <argument pos:start="67:29" pos:end="67:40"><expr pos:start="67:29" pos:end="67:40"><name pos:start="67:29" pos:end="67:40">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="69:20" pos:end="69:64"><expr pos:start="69:20" pos:end="69:64"><literal type="string" pos:start="69:20" pos:end="69:64">"Invalid time duration specification in %s\n"</literal></expr></argument>, <argument pos:start="69:67" pos:end="69:67"><expr pos:start="69:67" pos:end="69:67"><name pos:start="69:67" pos:end="69:67">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:34"><expr pos:start="71:13" pos:end="71:33"><call pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:16">FAIL</name><argument_list pos:start="71:17" pos:end="71:33">(<argument pos:start="71:18" pos:end="71:32"><expr pos:start="71:18" pos:end="71:32"><call pos:start="71:18" pos:end="71:32"><name pos:start="71:18" pos:end="71:24">AVERROR</name><argument_list pos:start="71:25" pos:end="71:32">(<argument pos:start="71:26" pos:end="71:31"><expr pos:start="71:26" pos:end="71:31"><name pos:start="71:26" pos:end="71:31">EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:24"><expr pos:start="75:9" pos:end="75:23"><operator pos:start="75:9" pos:end="75:9">(</operator><operator pos:start="75:10" pos:end="75:10">*</operator><name pos:start="75:11" pos:end="75:15">times</name><operator pos:start="75:16" pos:end="75:16">)</operator><index pos:start="75:17" pos:end="75:19">[<expr pos:start="75:18" pos:end="75:18"><name pos:start="75:18" pos:end="75:18">i</name></expr>]</index> <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:23">t</name></expr>;</expr_stmt>



        <comment type="block" pos:start="79:9" pos:end="79:35">/* check on monotonicity */</comment>

        <if_stmt pos:start="81:9" pos:end="91:9"><if pos:start="81:9" pos:end="91:9">if <condition pos:start="81:12" pos:end="81:45">(<expr pos:start="81:13" pos:end="81:44"><name pos:start="81:13" pos:end="81:13">i</name> <operator pos:start="81:15" pos:end="81:16">&amp;&amp;</operator> <operator pos:start="81:18" pos:end="81:18">(</operator><operator pos:start="81:19" pos:end="81:19">*</operator><name pos:start="81:20" pos:end="81:24">times</name><operator pos:start="81:25" pos:end="81:25">)</operator><index pos:start="81:26" pos:end="81:30">[<expr pos:start="81:27" pos:end="81:29"><name pos:start="81:27" pos:end="81:27">i</name><operator pos:start="81:28" pos:end="81:28">-</operator><literal type="number" pos:start="81:29" pos:end="81:29">1</literal></expr>]</index> <operator pos:start="81:32" pos:end="81:32">&gt;</operator> <operator pos:start="81:34" pos:end="81:34">(</operator><operator pos:start="81:35" pos:end="81:35">*</operator><name pos:start="81:36" pos:end="81:40">times</name><operator pos:start="81:41" pos:end="81:41">)</operator><index pos:start="81:42" pos:end="81:44">[<expr pos:start="81:43" pos:end="81:43"><name pos:start="81:43" pos:end="81:43">i</name></expr>]</index></expr>)</condition> <block pos:start="81:47" pos:end="91:9">{<block_content pos:start="83:13" pos:end="89:34">

            <expr_stmt pos:start="83:13" pos:end="87:81"><expr pos:start="83:13" pos:end="87:80"><call pos:start="83:13" pos:end="87:80"><name pos:start="83:13" pos:end="83:18">av_log</name><argument_list pos:start="83:19" pos:end="87:80">(<argument pos:start="83:20" pos:end="83:26"><expr pos:start="83:20" pos:end="83:26"><name pos:start="83:20" pos:end="83:26">log_ctx</name></expr></argument>, <argument pos:start="83:29" pos:end="83:40"><expr pos:start="83:29" pos:end="83:40"><name pos:start="83:29" pos:end="83:40">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="85:20" pos:end="85:78"><expr pos:start="85:20" pos:end="85:78"><literal type="string" pos:start="85:20" pos:end="85:78">"Specified time %f is greater than the following time %f\n"</literal></expr></argument>,

                   <argument pos:start="87:20" pos:end="87:47"><expr pos:start="87:20" pos:end="87:47"><operator pos:start="87:20" pos:end="87:20">(</operator><name pos:start="87:21" pos:end="87:25">float</name><operator pos:start="87:26" pos:end="87:26">)</operator><operator pos:start="87:27" pos:end="87:27">(</operator><operator pos:start="87:28" pos:end="87:28">(</operator><operator pos:start="87:29" pos:end="87:29">*</operator><name pos:start="87:30" pos:end="87:34">times</name><operator pos:start="87:35" pos:end="87:35">)</operator><index pos:start="87:36" pos:end="87:38">[<expr pos:start="87:37" pos:end="87:37"><name pos:start="87:37" pos:end="87:37">i</name></expr>]</index><operator pos:start="87:39" pos:end="87:39">)</operator><operator pos:start="87:40" pos:end="87:40">/</operator><literal type="number" pos:start="87:41" pos:end="87:47">1000000</literal></expr></argument>, <argument pos:start="87:50" pos:end="87:79"><expr pos:start="87:50" pos:end="87:79"><operator pos:start="87:50" pos:end="87:50">(</operator><name pos:start="87:51" pos:end="87:55">float</name><operator pos:start="87:56" pos:end="87:56">)</operator><operator pos:start="87:57" pos:end="87:57">(</operator><operator pos:start="87:58" pos:end="87:58">(</operator><operator pos:start="87:59" pos:end="87:59">*</operator><name pos:start="87:60" pos:end="87:64">times</name><operator pos:start="87:65" pos:end="87:65">)</operator><index pos:start="87:66" pos:end="87:70">[<expr pos:start="87:67" pos:end="87:69"><name pos:start="87:67" pos:end="87:67">i</name><operator pos:start="87:68" pos:end="87:68">-</operator><literal type="number" pos:start="87:69" pos:end="87:69">1</literal></expr>]</index><operator pos:start="87:71" pos:end="87:71">)</operator><operator pos:start="87:72" pos:end="87:72">/</operator><literal type="number" pos:start="87:73" pos:end="87:79">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:34"><expr pos:start="89:13" pos:end="89:33"><call pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:16">FAIL</name><argument_list pos:start="89:17" pos:end="89:33">(<argument pos:start="89:18" pos:end="89:32"><expr pos:start="89:18" pos:end="89:32"><call pos:start="89:18" pos:end="89:32"><name pos:start="89:18" pos:end="89:24">AVERROR</name><argument_list pos:start="89:25" pos:end="89:32">(<argument pos:start="89:26" pos:end="89:31"><expr pos:start="89:26" pos:end="89:31"><name pos:start="89:26" pos:end="89:31">EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



<label pos:start="97:1" pos:end="97:4"><name pos:start="97:1" pos:end="97:3">end</name>:</label>

    <expr_stmt pos:start="99:5" pos:end="99:24"><expr pos:start="99:5" pos:end="99:23"><call pos:start="99:5" pos:end="99:23"><name pos:start="99:5" pos:end="99:11">av_free</name><argument_list pos:start="99:12" pos:end="99:23">(<argument pos:start="99:13" pos:end="99:22"><expr pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:22">times_str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="101:15">return <expr pos:start="101:12" pos:end="101:14"><name pos:start="101:12" pos:end="101:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
