<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13265.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:27">microblaze_load_kernel</name><parameter_list pos:start="1:28" pos:end="9:71">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:41">MicroBlazeCPU</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">cpu</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><name pos:start="1:49" pos:end="1:54">hwaddr</name></type> <name pos:start="1:56" pos:end="1:63">ddr_base</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:44"><decl pos:start="3:29" pos:end="3:44"><type pos:start="3:29" pos:end="3:44"><name pos:start="3:29" pos:end="3:36">uint32_t</name></type> <name pos:start="3:38" pos:end="3:44">ramsize</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:55"><decl pos:start="5:29" pos:end="5:55"><type pos:start="5:29" pos:end="5:55"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:38">char</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:55">initrd_filename</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:52"><decl pos:start="7:29" pos:end="7:52"><type pos:start="7:29" pos:end="7:52"><specifier pos:start="7:29" pos:end="7:33">const</specifier> <name pos:start="7:35" pos:end="7:38">char</name> <modifier pos:start="7:40" pos:end="7:40">*</modifier></type><name pos:start="7:41" pos:end="7:52">dtb_filename</name></decl></parameter>,

                            <parameter pos:start="9:29" pos:end="9:70"><function_decl pos:start="9:29" pos:end="9:70"><type pos:start="9:29" pos:end="9:32"><name pos:start="9:29" pos:end="9:32">void</name></type> (<modifier pos:start="9:35" pos:end="9:35">*</modifier><name pos:start="9:36" pos:end="9:52">machine_cpu_reset</name>)<parameter_list pos:start="9:54" pos:end="9:70">(<parameter pos:start="9:55" pos:end="9:69"><decl pos:start="9:55" pos:end="9:69"><type pos:start="9:55" pos:end="9:69"><name pos:start="9:55" pos:end="9:67">MicroBlazeCPU</name> <modifier pos:start="9:69" pos:end="9:69">*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="205:1">{<block_content pos:start="13:5" pos:end="201:5">

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:26">machine_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:31">kernel_filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:30">kernel_cmdline</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:23">dtb_arg</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:43"><expr pos:start="23:5" pos:end="23:42"><name pos:start="23:5" pos:end="23:16">machine_opts</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <call pos:start="23:20" pos:end="23:42"><name pos:start="23:20" pos:end="23:40">qemu_get_machine_opts</name><argument_list pos:start="23:41" pos:end="23:42">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:59"><expr pos:start="25:5" pos:end="25:58"><name pos:start="25:5" pos:end="25:19">kernel_filename</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <call pos:start="25:23" pos:end="25:58"><name pos:start="25:23" pos:end="25:34">qemu_opt_get</name><argument_list pos:start="25:35" pos:end="25:58">(<argument pos:start="25:36" pos:end="25:47"><expr pos:start="25:36" pos:end="25:47"><name pos:start="25:36" pos:end="25:47">machine_opts</name></expr></argument>, <argument pos:start="25:50" pos:end="25:57"><expr pos:start="25:50" pos:end="25:57"><literal type="string" pos:start="25:50" pos:end="25:57">"kernel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:58"><expr pos:start="27:5" pos:end="27:57"><name pos:start="27:5" pos:end="27:18">kernel_cmdline</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <call pos:start="27:22" pos:end="27:57"><name pos:start="27:22" pos:end="27:33">qemu_opt_get</name><argument_list pos:start="27:34" pos:end="27:57">(<argument pos:start="27:35" pos:end="27:46"><expr pos:start="27:35" pos:end="27:46"><name pos:start="27:35" pos:end="27:46">machine_opts</name></expr></argument>, <argument pos:start="27:49" pos:end="27:56"><expr pos:start="27:49" pos:end="27:56"><literal type="string" pos:start="27:49" pos:end="27:56">"append"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:48"><expr pos:start="29:5" pos:end="29:47"><name pos:start="29:5" pos:end="29:11">dtb_arg</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:47"><name pos:start="29:15" pos:end="29:26">qemu_opt_get</name><argument_list pos:start="29:27" pos:end="29:47">(<argument pos:start="29:28" pos:end="29:39"><expr pos:start="29:28" pos:end="29:39"><name pos:start="29:28" pos:end="29:39">machine_opts</name></expr></argument>, <argument pos:start="29:42" pos:end="29:46"><expr pos:start="29:42" pos:end="29:46"><literal type="string" pos:start="29:42" pos:end="29:46">"dtb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:15">dtb_arg</name></expr>)</condition> <block pos:start="31:18" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:31"> <comment type="block" pos:start="31:20" pos:end="31:51">/* Preference a -dtb argument */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:31"><expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:20">dtb_filename</name> <operator pos:start="33:22" pos:end="33:22">=</operator> <name pos:start="33:24" pos:end="33:30">dtb_arg</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:73"> <comment type="block" pos:start="35:14" pos:end="35:66">/* default to pcbios dtb as passed by machine_init */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:73"><expr pos:start="37:9" pos:end="37:72"><name pos:start="37:9" pos:end="37:20">dtb_filename</name> <operator pos:start="37:22" pos:end="37:22">=</operator> <call pos:start="37:24" pos:end="37:72"><name pos:start="37:24" pos:end="37:37">qemu_find_file</name><argument_list pos:start="37:38" pos:end="37:72">(<argument pos:start="37:39" pos:end="37:57"><expr pos:start="37:39" pos:end="37:57"><name pos:start="37:39" pos:end="37:57">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="37:60" pos:end="37:71"><expr pos:start="37:60" pos:end="37:71"><name pos:start="37:60" pos:end="37:71">dtb_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:52"><expr pos:start="43:5" pos:end="43:51"><name pos:start="43:5" pos:end="43:31"><name pos:start="43:5" pos:end="43:13">boot_info</name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:31">machine_cpu_reset</name></name> <operator pos:start="43:33" pos:end="43:33">=</operator> <name pos:start="43:35" pos:end="43:51">machine_cpu_reset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:45"><expr pos:start="45:5" pos:end="45:44"><call pos:start="45:5" pos:end="45:44"><name pos:start="45:5" pos:end="45:23">qemu_register_reset</name><argument_list pos:start="45:24" pos:end="45:44">(<argument pos:start="45:25" pos:end="45:38"><expr pos:start="45:25" pos:end="45:38"><name pos:start="45:25" pos:end="45:38">main_cpu_reset</name></expr></argument>, <argument pos:start="45:41" pos:end="45:43"><expr pos:start="45:41" pos:end="45:43"><name pos:start="45:41" pos:end="45:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="201:5"><if pos:start="49:5" pos:end="201:5">if <condition pos:start="49:8" pos:end="49:24">(<expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:23">kernel_filename</name></expr>)</condition> <block pos:start="49:26" pos:end="201:5">{<block_content pos:start="51:9" pos:end="199:42">

        <decl_stmt pos:start="51:9" pos:end="51:24"><decl pos:start="51:9" pos:end="51:23"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:23">kernel_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:34"><decl pos:start="53:9" pos:end="53:22"><type pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:16">uint64_t</name></type> <name pos:start="53:18" pos:end="53:22">entry</name></decl>, <decl pos:start="53:25" pos:end="53:27"><type ref="prev" pos:start="53:9" pos:end="53:16"/><name pos:start="53:25" pos:end="53:27">low</name></decl>, <decl pos:start="53:30" pos:end="53:33"><type ref="prev" pos:start="53:9" pos:end="53:16"/><name pos:start="53:30" pos:end="53:33">high</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:24"><decl pos:start="55:9" pos:end="55:23"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">uint32_t</name></type> <name pos:start="55:18" pos:end="55:23">base32</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="62:0"><decl pos:start="57:9" pos:end="57:26"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:22">big_endian</name> <init pos:start="57:24" pos:end="57:26">= <expr pos:start="57:26" pos:end="57:26"><literal type="number" pos:start="57:26" pos:end="57:26">0</literal></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="61:1" pos:end="61:29">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="63:9" pos:end="66:0"><expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:18">big_endian</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="69:9" pos:end="69:41">/* Boots a kernel elf binary.  */</comment>

        <expr_stmt pos:start="71:9" pos:end="75:59"><expr pos:start="71:9" pos:end="75:58"><name pos:start="71:9" pos:end="71:19">kernel_size</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="75:58"><name pos:start="71:23" pos:end="71:30">load_elf</name><argument_list pos:start="71:31" pos:end="75:58">(<argument pos:start="71:32" pos:end="71:46"><expr pos:start="71:32" pos:end="71:46"><name pos:start="71:32" pos:end="71:46">kernel_filename</name></expr></argument>, <argument pos:start="71:49" pos:end="71:52"><expr pos:start="71:49" pos:end="71:52"><name pos:start="71:49" pos:end="71:52">NULL</name></expr></argument>, <argument pos:start="71:55" pos:end="71:58"><expr pos:start="71:55" pos:end="71:58"><name pos:start="71:55" pos:end="71:58">NULL</name></expr></argument>,

                               <argument pos:start="73:32" pos:end="73:37"><expr pos:start="73:32" pos:end="73:37"><operator pos:start="73:32" pos:end="73:32">&amp;</operator><name pos:start="73:33" pos:end="73:37">entry</name></expr></argument>, <argument pos:start="73:40" pos:end="73:43"><expr pos:start="73:40" pos:end="73:43"><operator pos:start="73:40" pos:end="73:40">&amp;</operator><name pos:start="73:41" pos:end="73:43">low</name></expr></argument>, <argument pos:start="73:46" pos:end="73:50"><expr pos:start="73:46" pos:end="73:50"><operator pos:start="73:46" pos:end="73:46">&amp;</operator><name pos:start="73:47" pos:end="73:50">high</name></expr></argument>,

                               <argument pos:start="75:32" pos:end="75:41"><expr pos:start="75:32" pos:end="75:41"><name pos:start="75:32" pos:end="75:41">big_endian</name></expr></argument>, <argument pos:start="75:44" pos:end="75:54"><expr pos:start="75:44" pos:end="75:54"><name pos:start="75:44" pos:end="75:54">ELF_MACHINE</name></expr></argument>, <argument pos:start="75:57" pos:end="75:57"><expr pos:start="75:57" pos:end="75:57"><literal type="number" pos:start="75:57" pos:end="75:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:23"><expr pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:14">base32</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:22">entry</name></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="87:9"><if pos:start="79:9" pos:end="87:9">if <condition pos:start="79:12" pos:end="79:33">(<expr pos:start="79:13" pos:end="79:32"><name pos:start="79:13" pos:end="79:18">base32</name> <operator pos:start="79:20" pos:end="79:21">==</operator> <literal type="number" pos:start="79:23" pos:end="79:32">0xc0000000</literal></expr>)</condition> <block pos:start="79:35" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:63">

            <expr_stmt pos:start="81:13" pos:end="85:63"><expr pos:start="81:13" pos:end="85:62"><name pos:start="81:13" pos:end="81:23">kernel_size</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <call pos:start="81:27" pos:end="85:62"><name pos:start="81:27" pos:end="81:34">load_elf</name><argument_list pos:start="81:35" pos:end="85:62">(<argument pos:start="81:36" pos:end="81:50"><expr pos:start="81:36" pos:end="81:50"><name pos:start="81:36" pos:end="81:50">kernel_filename</name></expr></argument>, <argument pos:start="81:53" pos:end="81:76"><expr pos:start="81:53" pos:end="81:76"><name pos:start="81:53" pos:end="81:76">translate_kernel_address</name></expr></argument>,

                                   <argument pos:start="83:36" pos:end="83:39"><expr pos:start="83:36" pos:end="83:39"><name pos:start="83:36" pos:end="83:39">NULL</name></expr></argument>, <argument pos:start="83:42" pos:end="83:47"><expr pos:start="83:42" pos:end="83:47"><operator pos:start="83:42" pos:end="83:42">&amp;</operator><name pos:start="83:43" pos:end="83:47">entry</name></expr></argument>, <argument pos:start="83:50" pos:end="83:53"><expr pos:start="83:50" pos:end="83:53"><name pos:start="83:50" pos:end="83:53">NULL</name></expr></argument>, <argument pos:start="83:56" pos:end="83:59"><expr pos:start="83:56" pos:end="83:59"><name pos:start="83:56" pos:end="83:59">NULL</name></expr></argument>,

                                   <argument pos:start="85:36" pos:end="85:45"><expr pos:start="85:36" pos:end="85:45"><name pos:start="85:36" pos:end="85:45">big_endian</name></expr></argument>, <argument pos:start="85:48" pos:end="85:58"><expr pos:start="85:48" pos:end="85:58"><name pos:start="85:48" pos:end="85:58">ELF_MACHINE</name></expr></argument>, <argument pos:start="85:61" pos:end="85:61"><expr pos:start="85:61" pos:end="85:61"><literal type="number" pos:start="85:61" pos:end="85:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="89:9" pos:end="89:45">/* Always boot into physical ram.  */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:65"><expr pos:start="91:9" pos:end="91:64"><name pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:17">boot_info</name><operator pos:start="91:18" pos:end="91:18">.</operator><name pos:start="91:19" pos:end="91:30">bootstrap_pc</name></name> <operator pos:start="91:32" pos:end="91:32">=</operator> <name pos:start="91:34" pos:end="91:41">ddr_base</name> <operator pos:start="91:43" pos:end="91:43">+</operator> <operator pos:start="91:45" pos:end="91:45">(</operator><name pos:start="91:46" pos:end="91:50">entry</name> <operator pos:start="91:52" pos:end="91:52">&amp;</operator> <literal type="number" pos:start="91:54" pos:end="91:63">0x0fffffff</literal><operator pos:start="91:64" pos:end="91:64">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="95:9" pos:end="95:62">/* If it wasn't an ELF image, try an u-boot image.  */</comment>

        <if_stmt pos:start="97:9" pos:end="109:9"><if pos:start="97:9" pos:end="109:9">if <condition pos:start="97:12" pos:end="97:28">(<expr pos:start="97:13" pos:end="97:27"><name pos:start="97:13" pos:end="97:23">kernel_size</name> <operator pos:start="97:25" pos:end="97:25">&lt;</operator> <literal type="number" pos:start="97:27" pos:end="97:27">0</literal></expr>)</condition> <block pos:start="97:30" pos:end="109:9">{<block_content pos:start="99:13" pos:end="107:53">

            <decl_stmt pos:start="99:13" pos:end="99:36"><decl pos:start="99:13" pos:end="99:25"><type pos:start="99:13" pos:end="99:18"><name pos:start="99:13" pos:end="99:18">hwaddr</name></type> <name pos:start="99:20" pos:end="99:25">uentry</name></decl>, <decl pos:start="99:28" pos:end="99:35"><type ref="prev" pos:start="99:13" pos:end="99:18"/><name pos:start="99:28" pos:end="99:35">loadaddr</name></decl>;</decl_stmt>



            <expr_stmt pos:start="103:13" pos:end="103:78"><expr pos:start="103:13" pos:end="103:77"><name pos:start="103:13" pos:end="103:23">kernel_size</name> <operator pos:start="103:25" pos:end="103:25">=</operator> <call pos:start="103:27" pos:end="103:77"><name pos:start="103:27" pos:end="103:37">load_uimage</name><argument_list pos:start="103:38" pos:end="103:77">(<argument pos:start="103:39" pos:end="103:53"><expr pos:start="103:39" pos:end="103:53"><name pos:start="103:39" pos:end="103:53">kernel_filename</name></expr></argument>, <argument pos:start="103:56" pos:end="103:62"><expr pos:start="103:56" pos:end="103:62"><operator pos:start="103:56" pos:end="103:56">&amp;</operator><name pos:start="103:57" pos:end="103:62">uentry</name></expr></argument>, <argument pos:start="103:65" pos:end="103:73"><expr pos:start="103:65" pos:end="103:73"><operator pos:start="103:65" pos:end="103:65">&amp;</operator><name pos:start="103:66" pos:end="103:73">loadaddr</name></expr></argument>, <argument pos:start="103:76" pos:end="103:76"><expr pos:start="103:76" pos:end="103:76"><literal type="number" pos:start="103:76" pos:end="103:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:44"><expr pos:start="105:13" pos:end="105:43"><name pos:start="105:13" pos:end="105:34"><name pos:start="105:13" pos:end="105:21">boot_info</name><operator pos:start="105:22" pos:end="105:22">.</operator><name pos:start="105:23" pos:end="105:34">bootstrap_pc</name></name> <operator pos:start="105:36" pos:end="105:36">=</operator> <name pos:start="105:38" pos:end="105:43">uentry</name></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:53"><expr pos:start="107:13" pos:end="107:52"><name pos:start="107:13" pos:end="107:16">high</name> <operator pos:start="107:18" pos:end="107:18">=</operator> <operator pos:start="107:20" pos:end="107:20">(</operator><name pos:start="107:21" pos:end="107:28">loadaddr</name> <operator pos:start="107:30" pos:end="107:30">+</operator> <name pos:start="107:32" pos:end="107:42">kernel_size</name> <operator pos:start="107:44" pos:end="107:44">+</operator> <literal type="number" pos:start="107:46" pos:end="107:46">3</literal><operator pos:start="107:47" pos:end="107:47">)</operator> <operator pos:start="107:49" pos:end="107:49">&amp;</operator> <operator pos:start="107:51" pos:end="107:51">~</operator><literal type="number" pos:start="107:52" pos:end="107:52">3</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="113:9" pos:end="113:69">/* Not an ELF image nor an u-boot image, try a RAW image.  */</comment>

        <if_stmt pos:start="115:9" pos:end="125:9"><if pos:start="115:9" pos:end="125:9">if <condition pos:start="115:12" pos:end="115:28">(<expr pos:start="115:13" pos:end="115:27"><name pos:start="115:13" pos:end="115:23">kernel_size</name> <operator pos:start="115:25" pos:end="115:25">&lt;</operator> <literal type="number" pos:start="115:27" pos:end="115:27">0</literal></expr>)</condition> <block pos:start="115:30" pos:end="125:9">{<block_content pos:start="117:13" pos:end="123:53">

            <expr_stmt pos:start="117:13" pos:end="119:56"><expr pos:start="117:13" pos:end="119:55"><name pos:start="117:13" pos:end="117:23">kernel_size</name> <operator pos:start="117:25" pos:end="117:25">=</operator> <call pos:start="117:27" pos:end="119:55"><name pos:start="117:27" pos:end="117:45">load_image_targphys</name><argument_list pos:start="117:46" pos:end="119:55">(<argument pos:start="117:47" pos:end="117:61"><expr pos:start="117:47" pos:end="117:61"><name pos:start="117:47" pos:end="117:61">kernel_filename</name></expr></argument>, <argument pos:start="117:64" pos:end="117:71"><expr pos:start="117:64" pos:end="117:71"><name pos:start="117:64" pos:end="117:71">ddr_base</name></expr></argument>,

                                              <argument pos:start="119:47" pos:end="119:54"><expr pos:start="119:47" pos:end="119:54"><name pos:start="119:47" pos:end="119:54">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:46"><expr pos:start="121:13" pos:end="121:45"><name pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:21">boot_info</name><operator pos:start="121:22" pos:end="121:22">.</operator><name pos:start="121:23" pos:end="121:34">bootstrap_pc</name></name> <operator pos:start="121:36" pos:end="121:36">=</operator> <name pos:start="121:38" pos:end="121:45">ddr_base</name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:53"><expr pos:start="123:13" pos:end="123:52"><name pos:start="123:13" pos:end="123:16">high</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <operator pos:start="123:20" pos:end="123:20">(</operator><name pos:start="123:21" pos:end="123:28">ddr_base</name> <operator pos:start="123:30" pos:end="123:30">+</operator> <name pos:start="123:32" pos:end="123:42">kernel_size</name> <operator pos:start="123:44" pos:end="123:44">+</operator> <literal type="number" pos:start="123:46" pos:end="123:46">3</literal><operator pos:start="123:47" pos:end="123:47">)</operator> <operator pos:start="123:49" pos:end="123:49">&amp;</operator> <operator pos:start="123:51" pos:end="123:51">~</operator><literal type="number" pos:start="123:52" pos:end="123:52">3</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="129:9" pos:end="175:9"><if pos:start="129:9" pos:end="175:9">if <condition pos:start="129:12" pos:end="129:28">(<expr pos:start="129:13" pos:end="129:27"><name pos:start="129:13" pos:end="129:27">initrd_filename</name></expr>)</condition> <block pos:start="129:30" pos:end="175:9">{<block_content pos:start="131:13" pos:end="173:51">

            <decl_stmt pos:start="131:13" pos:end="131:28"><decl pos:start="131:13" pos:end="131:27"><type pos:start="131:13" pos:end="131:15"><name pos:start="131:13" pos:end="131:15">int</name></type> <name pos:start="131:17" pos:end="131:27">initrd_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="133:13" pos:end="133:35"><decl pos:start="133:13" pos:end="133:34"><type pos:start="133:13" pos:end="133:20"><name pos:start="133:13" pos:end="133:20">uint32_t</name></type> <name pos:start="133:22" pos:end="133:34">initrd_offset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="137:13" pos:end="137:51"><expr pos:start="137:13" pos:end="137:50"><name pos:start="137:13" pos:end="137:16">high</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <call pos:start="137:20" pos:end="137:50"><name pos:start="137:20" pos:end="137:27">ROUND_UP</name><argument_list pos:start="137:28" pos:end="137:50">(<argument pos:start="137:29" pos:end="137:46"><expr pos:start="137:29" pos:end="137:46"><name pos:start="137:29" pos:end="137:32">high</name> <operator pos:start="137:34" pos:end="137:34">+</operator> <name pos:start="137:36" pos:end="137:46">kernel_size</name></expr></argument>, <argument pos:start="137:49" pos:end="137:49"><expr pos:start="137:49" pos:end="137:49"><literal type="number" pos:start="137:49" pos:end="137:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:42"><expr pos:start="139:13" pos:end="139:41"><name pos:start="139:13" pos:end="139:34"><name pos:start="139:13" pos:end="139:21">boot_info</name><operator pos:start="139:22" pos:end="139:22">.</operator><name pos:start="139:23" pos:end="139:34">initrd_start</name></name> <operator pos:start="139:36" pos:end="139:36">=</operator> <name pos:start="139:38" pos:end="139:41">high</name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:62"><expr pos:start="141:13" pos:end="141:61"><name pos:start="141:13" pos:end="141:25">initrd_offset</name> <operator pos:start="141:27" pos:end="141:27">=</operator> <name pos:start="141:29" pos:end="141:50"><name pos:start="141:29" pos:end="141:37">boot_info</name><operator pos:start="141:38" pos:end="141:38">.</operator><name pos:start="141:39" pos:end="141:50">initrd_start</name></name> <operator pos:start="141:52" pos:end="141:52">-</operator> <name pos:start="141:54" pos:end="141:61">ddr_base</name></expr>;</expr_stmt>



            <expr_stmt pos:start="145:13" pos:end="149:65"><expr pos:start="145:13" pos:end="149:64"><name pos:start="145:13" pos:end="145:23">initrd_size</name> <operator pos:start="145:25" pos:end="145:25">=</operator> <call pos:start="145:27" pos:end="149:64"><name pos:start="145:27" pos:end="145:38">load_ramdisk</name><argument_list pos:start="145:39" pos:end="149:64">(<argument pos:start="145:40" pos:end="145:54"><expr pos:start="145:40" pos:end="145:54"><name pos:start="145:40" pos:end="145:54">initrd_filename</name></expr></argument>,

                                       <argument pos:start="147:40" pos:end="147:61"><expr pos:start="147:40" pos:end="147:61"><name pos:start="147:40" pos:end="147:61"><name pos:start="147:40" pos:end="147:48">boot_info</name><operator pos:start="147:49" pos:end="147:49">.</operator><name pos:start="147:50" pos:end="147:61">initrd_start</name></name></expr></argument>,

                                       <argument pos:start="149:40" pos:end="149:63"><expr pos:start="149:40" pos:end="149:63"><name pos:start="149:40" pos:end="149:47">ram_size</name> <operator pos:start="149:49" pos:end="149:49">-</operator> <name pos:start="149:51" pos:end="149:63">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="151:13" pos:end="159:13"><if pos:start="151:13" pos:end="159:13">if <condition pos:start="151:16" pos:end="151:32">(<expr pos:start="151:17" pos:end="151:31"><name pos:start="151:17" pos:end="151:27">initrd_size</name> <operator pos:start="151:29" pos:end="151:29">&lt;</operator> <literal type="number" pos:start="151:31" pos:end="151:31">0</literal></expr>)</condition> <block pos:start="151:34" pos:end="159:13">{<block_content pos:start="153:17" pos:end="157:76">

                <expr_stmt pos:start="153:17" pos:end="157:76"><expr pos:start="153:17" pos:end="157:75"><name pos:start="153:17" pos:end="153:27">initrd_size</name> <operator pos:start="153:29" pos:end="153:29">=</operator> <call pos:start="153:31" pos:end="157:75"><name pos:start="153:31" pos:end="153:49">load_image_targphys</name><argument_list pos:start="153:50" pos:end="157:75">(<argument pos:start="153:51" pos:end="153:65"><expr pos:start="153:51" pos:end="153:65"><name pos:start="153:51" pos:end="153:65">initrd_filename</name></expr></argument>,

                                                  <argument pos:start="155:51" pos:end="155:72"><expr pos:start="155:51" pos:end="155:72"><name pos:start="155:51" pos:end="155:72"><name pos:start="155:51" pos:end="155:59">boot_info</name><operator pos:start="155:60" pos:end="155:60">.</operator><name pos:start="155:61" pos:end="155:72">initrd_start</name></name></expr></argument>,

                                                  <argument pos:start="157:51" pos:end="157:74"><expr pos:start="157:51" pos:end="157:74"><name pos:start="157:51" pos:end="157:58">ram_size</name> <operator pos:start="157:60" pos:end="157:60">-</operator> <name pos:start="157:62" pos:end="157:74">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="161:13" pos:end="169:13"><if pos:start="161:13" pos:end="169:13">if <condition pos:start="161:16" pos:end="161:32">(<expr pos:start="161:17" pos:end="161:31"><name pos:start="161:17" pos:end="161:27">initrd_size</name> <operator pos:start="161:29" pos:end="161:29">&lt;</operator> <literal type="number" pos:start="161:31" pos:end="161:31">0</literal></expr>)</condition> <block pos:start="161:34" pos:end="169:13">{<block_content pos:start="163:17" pos:end="167:35">

                <expr_stmt pos:start="163:17" pos:end="165:46"><expr pos:start="163:17" pos:end="165:45"><call pos:start="163:17" pos:end="165:45"><name pos:start="163:17" pos:end="163:28">error_report</name><argument_list pos:start="163:29" pos:end="165:45">(<argument pos:start="163:30" pos:end="163:65"><expr pos:start="163:30" pos:end="163:65"><literal type="string" pos:start="163:30" pos:end="163:65">"qemu: could not load initrd '%s'\n"</literal></expr></argument>,

                             <argument pos:start="165:30" pos:end="165:44"><expr pos:start="165:30" pos:end="165:44"><name pos:start="165:30" pos:end="165:44">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:35"><expr pos:start="167:17" pos:end="167:34"><call pos:start="167:17" pos:end="167:34"><name pos:start="167:17" pos:end="167:20">exit</name><argument_list pos:start="167:21" pos:end="167:34">(<argument pos:start="167:22" pos:end="167:33"><expr pos:start="167:22" pos:end="167:33"><name pos:start="167:22" pos:end="167:33">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:72"><expr pos:start="171:13" pos:end="171:71"><name pos:start="171:13" pos:end="171:32"><name pos:start="171:13" pos:end="171:21">boot_info</name><operator pos:start="171:22" pos:end="171:22">.</operator><name pos:start="171:23" pos:end="171:32">initrd_end</name></name> <operator pos:start="171:34" pos:end="171:34">=</operator> <name pos:start="171:36" pos:end="171:57"><name pos:start="171:36" pos:end="171:44">boot_info</name><operator pos:start="171:45" pos:end="171:45">.</operator><name pos:start="171:46" pos:end="171:57">initrd_start</name></name> <operator pos:start="171:59" pos:end="171:59">+</operator> <name pos:start="171:61" pos:end="171:71">initrd_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:51"><expr pos:start="173:13" pos:end="173:50"><name pos:start="173:13" pos:end="173:16">high</name> <operator pos:start="173:18" pos:end="173:18">=</operator> <call pos:start="173:20" pos:end="173:50"><name pos:start="173:20" pos:end="173:27">ROUND_UP</name><argument_list pos:start="173:28" pos:end="173:50">(<argument pos:start="173:29" pos:end="173:46"><expr pos:start="173:29" pos:end="173:46"><name pos:start="173:29" pos:end="173:32">high</name> <operator pos:start="173:34" pos:end="173:34">+</operator> <name pos:start="173:36" pos:end="173:46">initrd_size</name></expr></argument>, <argument pos:start="173:49" pos:end="173:49"><expr pos:start="173:49" pos:end="173:49"><literal type="number" pos:start="173:49" pos:end="173:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:40"><expr pos:start="179:9" pos:end="179:39"><name pos:start="179:9" pos:end="179:25"><name pos:start="179:9" pos:end="179:17">boot_info</name><operator pos:start="179:18" pos:end="179:18">.</operator><name pos:start="179:19" pos:end="179:25">cmdline</name></name> <operator pos:start="179:27" pos:end="179:27">=</operator> <name pos:start="179:29" pos:end="179:32">high</name> <operator pos:start="179:34" pos:end="179:34">+</operator> <literal type="number" pos:start="179:36" pos:end="179:39">4096</literal></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="185:9"><if pos:start="181:9" pos:end="185:9">if <condition pos:start="181:12" pos:end="181:53">(<expr pos:start="181:13" pos:end="181:52"><name pos:start="181:13" pos:end="181:26">kernel_cmdline</name> <operator pos:start="181:28" pos:end="181:29">&amp;&amp;</operator> <call pos:start="181:31" pos:end="181:52"><name pos:start="181:31" pos:end="181:36">strlen</name><argument_list pos:start="181:37" pos:end="181:52">(<argument pos:start="181:38" pos:end="181:51"><expr pos:start="181:38" pos:end="181:51"><name pos:start="181:38" pos:end="181:51">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:55" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:80">

            <expr_stmt pos:start="183:13" pos:end="183:80"><expr pos:start="183:13" pos:end="183:79"><call pos:start="183:13" pos:end="183:79"><name pos:start="183:13" pos:end="183:28">pstrcpy_targphys</name><argument_list pos:start="183:29" pos:end="183:79">(<argument pos:start="183:30" pos:end="183:38"><expr pos:start="183:30" pos:end="183:38"><literal type="string" pos:start="183:30" pos:end="183:38">"cmdline"</literal></expr></argument>, <argument pos:start="183:41" pos:end="183:57"><expr pos:start="183:41" pos:end="183:57"><name pos:start="183:41" pos:end="183:57"><name pos:start="183:41" pos:end="183:49">boot_info</name><operator pos:start="183:50" pos:end="183:50">.</operator><name pos:start="183:51" pos:end="183:57">cmdline</name></name></expr></argument>, <argument pos:start="183:60" pos:end="183:62"><expr pos:start="183:60" pos:end="183:62"><literal type="number" pos:start="183:60" pos:end="183:62">256</literal></expr></argument>, <argument pos:start="183:65" pos:end="183:78"><expr pos:start="183:65" pos:end="183:78"><name pos:start="183:65" pos:end="183:78">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="187:9" pos:end="187:37">/* Provide a device-tree.  */</comment>

        <expr_stmt pos:start="189:9" pos:end="189:49"><expr pos:start="189:9" pos:end="189:48"><name pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:17">boot_info</name><operator pos:start="189:18" pos:end="189:18">.</operator><name pos:start="189:19" pos:end="189:21">fdt</name></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:41"><name pos:start="189:25" pos:end="189:33">boot_info</name><operator pos:start="189:34" pos:end="189:34">.</operator><name pos:start="189:35" pos:end="189:41">cmdline</name></name> <operator pos:start="189:43" pos:end="189:43">+</operator> <literal type="number" pos:start="189:45" pos:end="189:48">4096</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="199:42"><expr pos:start="191:9" pos:end="199:41"><call pos:start="191:9" pos:end="199:41"><name pos:start="191:9" pos:end="191:27">microblaze_load_dtb</name><argument_list pos:start="191:28" pos:end="199:41">(<argument pos:start="191:29" pos:end="191:41"><expr pos:start="191:29" pos:end="191:41"><name pos:start="191:29" pos:end="191:41"><name pos:start="191:29" pos:end="191:37">boot_info</name><operator pos:start="191:38" pos:end="191:38">.</operator><name pos:start="191:39" pos:end="191:41">fdt</name></name></expr></argument>, <argument pos:start="191:44" pos:end="191:51"><expr pos:start="191:44" pos:end="191:51"><name pos:start="191:44" pos:end="191:51">ram_size</name></expr></argument>,

                            <argument pos:start="193:29" pos:end="193:50"><expr pos:start="193:29" pos:end="193:50"><name pos:start="193:29" pos:end="193:50"><name pos:start="193:29" pos:end="193:37">boot_info</name><operator pos:start="193:38" pos:end="193:38">.</operator><name pos:start="193:39" pos:end="193:50">initrd_start</name></name></expr></argument>,

                            <argument pos:start="195:29" pos:end="195:48"><expr pos:start="195:29" pos:end="195:48"><name pos:start="195:29" pos:end="195:48"><name pos:start="195:29" pos:end="195:37">boot_info</name><operator pos:start="195:38" pos:end="195:38">.</operator><name pos:start="195:39" pos:end="195:48">initrd_end</name></name></expr></argument>,

                            <argument pos:start="197:29" pos:end="197:42"><expr pos:start="197:29" pos:end="197:42"><name pos:start="197:29" pos:end="197:42">kernel_cmdline</name></expr></argument>,

                            <argument pos:start="199:29" pos:end="199:40"><expr pos:start="199:29" pos:end="199:40"><name pos:start="199:29" pos:end="199:40">dtb_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



</block_content>}</block></function>
</unit>
