<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26913.c" pos:tabs="8"><function pos:start="1:1" pos:end="375:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_stsd</name><parameter_list pos:start="1:25" pos:end="1:75">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">ByteIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:74"><decl pos:start="1:60" pos:end="1:74"><type pos:start="1:60" pos:end="1:74"><name pos:start="1:60" pos:end="1:69">MOV_atom_t</name></type> <name pos:start="1:71" pos:end="1:74">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="375:1">{<block_content pos:start="5:5" pos:end="373:13">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name> <init pos:start="5:18" pos:end="5:54">= <expr pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:20">c</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:24">fc</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:33">streams</name><index pos:start="5:34" pos:end="5:54">[<expr pos:start="5:35" pos:end="5:53"><name pos:start="5:35" pos:end="5:51"><name pos:start="5:35" pos:end="5:35">c</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:39">fc</name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:51">nb_streams</name></name><operator pos:start="5:52" pos:end="5:52">-</operator><literal type="number" pos:start="5:53" pos:end="5:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:61"><decl pos:start="7:5" pos:end="7:60"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name> <init pos:start="7:26" pos:end="7:60">= <expr pos:start="7:28" pos:end="7:60"><operator pos:start="7:28" pos:end="7:28">(</operator><name pos:start="7:29" pos:end="7:44">MOVStreamContext</name> <operator pos:start="7:46" pos:end="7:46">*</operator><operator pos:start="7:47" pos:end="7:47">)</operator><name pos:start="7:48" pos:end="7:60"><name pos:start="7:48" pos:end="7:49">st</name><operator pos:start="7:50" pos:end="7:51">-&gt;</operator><name pos:start="7:52" pos:end="7:60">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">entries</name></decl>, <decl pos:start="9:18" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:34">frames_per_sample</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:19">format</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:29"><expr pos:start="15:5" pos:end="15:28"><call pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:14">print_atom</name><argument_list pos:start="15:15" pos:end="15:28">(<argument pos:start="15:16" pos:end="15:21"><expr pos:start="15:16" pos:end="15:21"><literal type="string" pos:start="15:16" pos:end="15:21">"stsd"</literal></expr></argument>, <argument pos:start="15:24" pos:end="15:27"><expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:17"><expr pos:start="19:5" pos:end="19:16"><call pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">get_byte</name><argument_list pos:start="19:13" pos:end="19:16">(<argument pos:start="19:14" pos:end="19:15"><expr pos:start="19:14" pos:end="19:15"><name pos:start="19:14" pos:end="19:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="19:19" pos:end="19:31">/* version */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><call pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">get_byte</name><argument_list pos:start="21:13" pos:end="21:16">(<argument pos:start="21:14" pos:end="21:15"><expr pos:start="21:14" pos:end="21:15"><name pos:start="21:14" pos:end="21:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="21:19" pos:end="21:31"><expr pos:start="21:19" pos:end="21:30"><call pos:start="21:19" pos:end="21:30"><name pos:start="21:19" pos:end="21:26">get_byte</name><argument_list pos:start="21:27" pos:end="21:30">(<argument pos:start="21:28" pos:end="21:29"><expr pos:start="21:28" pos:end="21:29"><name pos:start="21:28" pos:end="21:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="21:33" pos:end="21:45"><expr pos:start="21:33" pos:end="21:44"><call pos:start="21:33" pos:end="21:44"><name pos:start="21:33" pos:end="21:40">get_byte</name><argument_list pos:start="21:41" pos:end="21:44">(<argument pos:start="21:42" pos:end="21:43"><expr pos:start="21:42" pos:end="21:43"><name pos:start="21:42" pos:end="21:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="21:47" pos:end="21:57">/* flags */</comment>



    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:11">entries</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:26"><name pos:start="25:15" pos:end="25:22">get_be32</name><argument_list pos:start="25:23" pos:end="25:26">(<argument pos:start="25:24" pos:end="25:25"><expr pos:start="25:24" pos:end="25:25"><name pos:start="25:24" pos:end="25:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="29:5" pos:end="369:5">while<condition pos:start="29:10" pos:end="29:20">(<expr pos:start="29:11" pos:end="29:19"><name pos:start="29:11" pos:end="29:17">entries</name><operator pos:start="29:18" pos:end="29:19">--</operator></expr>)</condition> <block pos:start="29:22" pos:end="369:5">{<block_content pos:start="31:9" pos:end="367:9">

        <decl_stmt pos:start="31:9" pos:end="31:24"><decl pos:start="31:9" pos:end="31:23"><type pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:12">enum</name> <name pos:start="31:14" pos:end="31:20">CodecID</name></name></type> <name pos:start="31:22" pos:end="31:23">id</name></decl>;</decl_stmt>

	<decl_stmt pos:start="33:9" pos:end="33:32"><decl pos:start="33:9" pos:end="33:31"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:16">size</name> <init pos:start="33:18" pos:end="33:31">= <expr pos:start="33:20" pos:end="33:31"><call pos:start="33:20" pos:end="33:31"><name pos:start="33:20" pos:end="33:27">get_be32</name><argument_list pos:start="33:28" pos:end="33:31">(<argument pos:start="33:29" pos:end="33:30"><expr pos:start="33:29" pos:end="33:30"><name pos:start="33:29" pos:end="33:30">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="33:34" pos:end="33:43">/* size */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:14">format</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:29"><name pos:start="35:18" pos:end="35:25">get_le32</name><argument_list pos:start="35:26" pos:end="35:29">(<argument pos:start="35:27" pos:end="35:28"><expr pos:start="35:27" pos:end="35:28"><name pos:start="35:27" pos:end="35:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="35:32" pos:end="35:48">/* data format */</comment>



        <expr_stmt pos:start="39:9" pos:end="39:21"><expr pos:start="39:9" pos:end="39:20"><call pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:16">get_be32</name><argument_list pos:start="39:17" pos:end="39:20">(<argument pos:start="39:18" pos:end="39:19"><expr pos:start="39:18" pos:end="39:19"><name pos:start="39:18" pos:end="39:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="39:23" pos:end="39:36">/* reserved */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:21"><expr pos:start="41:9" pos:end="41:20"><call pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:16">get_be16</name><argument_list pos:start="41:17" pos:end="41:20">(<argument pos:start="41:18" pos:end="41:19"><expr pos:start="41:18" pos:end="41:19"><name pos:start="41:18" pos:end="41:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="41:23" pos:end="41:36">/* reserved */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:21"><expr pos:start="43:9" pos:end="43:20"><call pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:16">get_be16</name><argument_list pos:start="43:17" pos:end="43:20">(<argument pos:start="43:18" pos:end="43:19"><expr pos:start="43:18" pos:end="43:19"><name pos:start="43:18" pos:end="43:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="43:23" pos:end="43:33">/* index */</comment>



        <comment type="block" pos:start="47:9" pos:end="47:57">/* for MPEG4: set codec type by looking for it */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:50"><expr pos:start="49:9" pos:end="49:49"><name pos:start="49:9" pos:end="49:10">id</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <call pos:start="49:14" pos:end="49:49"><name pos:start="49:14" pos:end="49:25">codec_get_id</name><argument_list pos:start="49:26" pos:end="49:49">(<argument pos:start="49:27" pos:end="49:40"><expr pos:start="49:27" pos:end="49:40"><name pos:start="49:27" pos:end="49:40">mov_video_tags</name></expr></argument>, <argument pos:start="49:43" pos:end="49:48"><expr pos:start="49:43" pos:end="49:48"><name pos:start="49:43" pos:end="49:48">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="64:0"><if pos:start="51:9" pos:end="64:0">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:14">id</name> <operator pos:start="51:16" pos:end="51:17">&gt;=</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>)</condition> <block pos:start="51:22" pos:end="64:0">{<block_content pos:start="53:13" pos:end="59:51">

            <decl_stmt pos:start="53:13" pos:end="53:27"><decl pos:start="53:13" pos:end="53:26"><type pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:19">AVCodec</name> <modifier pos:start="53:21" pos:end="53:21">*</modifier></type><name pos:start="53:22" pos:end="53:26">codec</name></decl>;</decl_stmt>

	    <expr_stmt pos:start="55:13" pos:end="55:45"><expr pos:start="55:13" pos:end="55:44"><name pos:start="55:13" pos:end="55:17">codec</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <call pos:start="55:21" pos:end="55:44"><name pos:start="55:21" pos:end="55:40">avcodec_find_decoder</name><argument_list pos:start="55:41" pos:end="55:44">(<argument pos:start="55:42" pos:end="55:43"><expr pos:start="55:42" pos:end="55:43"><name pos:start="55:42" pos:end="55:43">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="59:51"><if pos:start="57:13" pos:end="59:51">if <condition pos:start="57:16" pos:end="57:22">(<expr pos:start="57:17" pos:end="57:21"><name pos:start="57:17" pos:end="57:21">codec</name></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:51"><block_content pos:start="59:17" pos:end="59:51">

		<expr_stmt pos:start="59:17" pos:end="59:51"><expr pos:start="59:17" pos:end="59:50"><name pos:start="59:17" pos:end="59:36"><name pos:start="59:17" pos:end="59:18">st</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:25">codec</name><operator pos:start="59:26" pos:end="59:26">.</operator><name pos:start="59:27" pos:end="59:36">codec_type</name></name> <operator pos:start="59:38" pos:end="59:38">=</operator> <name pos:start="59:40" pos:end="59:50"><name pos:start="59:40" pos:end="59:44">codec</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:50">type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="63:1" pos:end="63:12">#<cpp:directive pos:start="63:2" pos:end="63:6">ifdef</cpp:directive> <name pos:start="63:8" pos:end="63:12">DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="65:9" pos:end="80:0"><expr pos:start="65:9" pos:end="77:36"><call pos:start="65:9" pos:end="77:36"><name pos:start="65:9" pos:end="65:14">printf</name><argument_list pos:start="65:15" pos:end="77:36">(<argument pos:start="65:16" pos:end="65:54"><expr pos:start="65:16" pos:end="65:54"><literal type="string" pos:start="65:16" pos:end="65:54">"size=%d 4CC= %c%c%c%c codec_type=%d\n"</literal></expr></argument>,

               <argument pos:start="67:16" pos:end="67:19"><expr pos:start="67:16" pos:end="67:19"><name pos:start="67:16" pos:end="67:19">size</name></expr></argument>,

               <argument pos:start="69:16" pos:end="69:35"><expr pos:start="69:16" pos:end="69:35"><operator pos:start="69:16" pos:end="69:16">(</operator><name pos:start="69:17" pos:end="69:22">format</name> <operator pos:start="69:24" pos:end="69:25">&gt;&gt;</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal><operator pos:start="69:28" pos:end="69:28">)</operator> <operator pos:start="69:30" pos:end="69:30">&amp;</operator> <literal type="number" pos:start="69:32" pos:end="69:35">0xff</literal></expr></argument>,

               <argument pos:start="71:16" pos:end="71:35"><expr pos:start="71:16" pos:end="71:35"><operator pos:start="71:16" pos:end="71:16">(</operator><name pos:start="71:17" pos:end="71:22">format</name> <operator pos:start="71:24" pos:end="71:25">&gt;&gt;</operator> <literal type="number" pos:start="71:27" pos:end="71:27">8</literal><operator pos:start="71:28" pos:end="71:28">)</operator> <operator pos:start="71:30" pos:end="71:30">&amp;</operator> <literal type="number" pos:start="71:32" pos:end="71:35">0xff</literal></expr></argument>,

               <argument pos:start="73:16" pos:end="73:36"><expr pos:start="73:16" pos:end="73:36"><operator pos:start="73:16" pos:end="73:16">(</operator><name pos:start="73:17" pos:end="73:22">format</name> <operator pos:start="73:24" pos:end="73:25">&gt;&gt;</operator> <literal type="number" pos:start="73:27" pos:end="73:28">16</literal><operator pos:start="73:29" pos:end="73:29">)</operator> <operator pos:start="73:31" pos:end="73:31">&amp;</operator> <literal type="number" pos:start="73:33" pos:end="73:36">0xff</literal></expr></argument>,

               <argument pos:start="75:16" pos:end="75:36"><expr pos:start="75:16" pos:end="75:36"><operator pos:start="75:16" pos:end="75:16">(</operator><name pos:start="75:17" pos:end="75:22">format</name> <operator pos:start="75:24" pos:end="75:25">&gt;&gt;</operator> <literal type="number" pos:start="75:27" pos:end="75:28">24</literal><operator pos:start="75:29" pos:end="75:29">)</operator> <operator pos:start="75:31" pos:end="75:31">&amp;</operator> <literal type="number" pos:start="75:33" pos:end="75:36">0xff</literal></expr></argument>,

               <argument pos:start="77:16" pos:end="77:35"><expr pos:start="77:16" pos:end="77:35"><name pos:start="77:16" pos:end="77:35"><name pos:start="77:16" pos:end="77:17">st</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:24">codec</name><operator pos:start="77:25" pos:end="77:25">.</operator><name pos:start="77:26" pos:end="77:35">codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

	<expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:10">st</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:17">codec</name><operator pos:start="81:18" pos:end="81:18">.</operator><name pos:start="81:19" pos:end="81:27">codec_tag</name></name> <operator pos:start="81:29" pos:end="81:29">=</operator> <name pos:start="81:31" pos:end="81:36">format</name></expr>;</expr_stmt>

	<if_stmt pos:start="83:9" pos:end="367:9"><if pos:start="83:9" pos:end="295:9">if<condition pos:start="83:11" pos:end="83:50">(<expr pos:start="83:12" pos:end="83:49"><name pos:start="83:12" pos:end="83:31"><name pos:start="83:12" pos:end="83:13">st</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:20">codec</name><operator pos:start="83:21" pos:end="83:21">.</operator><name pos:start="83:22" pos:end="83:31">codec_type</name></name><operator pos:start="83:32" pos:end="83:33">==</operator><name pos:start="83:34" pos:end="83:49">CODEC_TYPE_VIDEO</name></expr>)</condition> <block pos:start="83:52" pos:end="295:9">{<block_content pos:start="85:13" pos:end="294:0">

	    <decl_stmt pos:start="85:13" pos:end="85:39"><decl pos:start="85:13" pos:end="85:38"><type pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:22">MOV_atom_t</name></type> <name pos:start="85:24" pos:end="85:24">a</name> <init pos:start="85:26" pos:end="85:38">= <expr pos:start="85:28" pos:end="85:38"><block pos:start="85:28" pos:end="85:38">{ <expr pos:start="85:30" pos:end="85:30"><literal type="number" pos:start="85:30" pos:end="85:30">0</literal></expr>, <expr pos:start="85:33" pos:end="85:33"><literal type="number" pos:start="85:33" pos:end="85:33">0</literal></expr>, <expr pos:start="85:36" pos:end="85:36"><literal type="number" pos:start="85:36" pos:end="85:36">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:36"><expr pos:start="87:13" pos:end="87:35"><name pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:14">st</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:21">codec</name><operator pos:start="87:22" pos:end="87:22">.</operator><name pos:start="87:23" pos:end="87:30">codec_id</name></name> <operator pos:start="87:32" pos:end="87:32">=</operator> <name pos:start="87:34" pos:end="87:35">id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:25"><expr pos:start="89:13" pos:end="89:24"><call pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:20">get_be16</name><argument_list pos:start="89:21" pos:end="89:24">(<argument pos:start="89:22" pos:end="89:23"><expr pos:start="89:22" pos:end="89:23"><name pos:start="89:22" pos:end="89:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="89:27" pos:end="89:39">/* version */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:25"><expr pos:start="91:13" pos:end="91:24"><call pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:20">get_be16</name><argument_list pos:start="91:21" pos:end="91:24">(<argument pos:start="91:22" pos:end="91:23"><expr pos:start="91:22" pos:end="91:23"><name pos:start="91:22" pos:end="91:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="91:27" pos:end="91:46">/* revision level */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:25"><expr pos:start="93:13" pos:end="93:24"><call pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:20">get_be32</name><argument_list pos:start="93:21" pos:end="93:24">(<argument pos:start="93:22" pos:end="93:23"><expr pos:start="93:22" pos:end="93:23"><name pos:start="93:22" pos:end="93:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="93:27" pos:end="93:38">/* vendor */</comment>

            <expr_stmt pos:start="95:13" pos:end="95:25"><expr pos:start="95:13" pos:end="95:24"><call pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:20">get_be32</name><argument_list pos:start="95:21" pos:end="95:24">(<argument pos:start="95:22" pos:end="95:23"><expr pos:start="95:22" pos:end="95:23"><name pos:start="95:22" pos:end="95:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="95:27" pos:end="95:48">/* temporal quality */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:25"><expr pos:start="97:13" pos:end="97:24"><call pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:20">get_be32</name><argument_list pos:start="97:21" pos:end="97:24">(<argument pos:start="97:22" pos:end="97:23"><expr pos:start="97:22" pos:end="97:23"><name pos:start="97:22" pos:end="97:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="97:27" pos:end="97:47">/* spacial quality */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:43"><expr pos:start="99:13" pos:end="99:42"><name pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:14">st</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:21">codec</name><operator pos:start="99:22" pos:end="99:22">.</operator><name pos:start="99:23" pos:end="99:27">width</name></name> <operator pos:start="99:29" pos:end="99:29">=</operator> <call pos:start="99:31" pos:end="99:42"><name pos:start="99:31" pos:end="99:38">get_be16</name><argument_list pos:start="99:39" pos:end="99:42">(<argument pos:start="99:40" pos:end="99:41"><expr pos:start="99:40" pos:end="99:41"><name pos:start="99:40" pos:end="99:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="99:45" pos:end="99:55">/* width */</comment>

            <expr_stmt pos:start="101:13" pos:end="104:0"><expr pos:start="101:13" pos:end="101:43"><name pos:start="101:13" pos:end="101:28"><name pos:start="101:13" pos:end="101:14">st</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:21">codec</name><operator pos:start="101:22" pos:end="101:22">.</operator><name pos:start="101:23" pos:end="101:28">height</name></name> <operator pos:start="101:30" pos:end="101:30">=</operator> <call pos:start="101:32" pos:end="101:43"><name pos:start="101:32" pos:end="101:39">get_be16</name><argument_list pos:start="101:40" pos:end="101:43">(<argument pos:start="101:41" pos:end="101:42"><expr pos:start="101:41" pos:end="101:42"><name pos:start="101:41" pos:end="101:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="101:46" pos:end="101:57">/* height */</comment>

<cpp:if pos:start="103:1" pos:end="103:5">#<cpp:directive pos:start="103:2" pos:end="103:3">if</cpp:directive> <expr pos:start="103:5" pos:end="103:5"><literal type="number" pos:start="103:5" pos:end="103:5">1</literal></expr></cpp:if>

            <if_stmt pos:start="105:13" pos:end="118:0"><if pos:start="105:13" pos:end="118:0">if <condition pos:start="105:16" pos:end="105:53">(<expr pos:start="105:17" pos:end="105:52"><name pos:start="105:17" pos:end="105:34"><name pos:start="105:17" pos:end="105:18">st</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:25">codec</name><operator pos:start="105:26" pos:end="105:26">.</operator><name pos:start="105:27" pos:end="105:34">codec_id</name></name> <operator pos:start="105:36" pos:end="105:37">==</operator> <name pos:start="105:39" pos:end="105:52">CODEC_ID_MPEG4</name></expr>)</condition> <block pos:start="105:55" pos:end="118:0">{<block_content pos:start="111:17" pos:end="113:37">

                <comment type="block" pos:start="107:17" pos:end="109:41">/* in some MPEG4 the width/height are not correct, so

                   we ignore this info */</comment>

                <expr_stmt pos:start="111:17" pos:end="111:36"><expr pos:start="111:17" pos:end="111:35"><name pos:start="111:17" pos:end="111:31"><name pos:start="111:17" pos:end="111:18">st</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:25">codec</name><operator pos:start="111:26" pos:end="111:26">.</operator><name pos:start="111:27" pos:end="111:31">width</name></name> <operator pos:start="111:33" pos:end="111:33">=</operator> <literal type="number" pos:start="111:35" pos:end="111:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:37"><expr pos:start="113:17" pos:end="113:36"><name pos:start="113:17" pos:end="113:32"><name pos:start="113:17" pos:end="113:18">st</name><operator pos:start="113:19" pos:end="113:20">-&gt;</operator><name pos:start="113:21" pos:end="113:25">codec</name><operator pos:start="113:26" pos:end="113:26">.</operator><name pos:start="113:27" pos:end="113:32">height</name></name> <operator pos:start="113:34" pos:end="113:34">=</operator> <literal type="number" pos:start="113:36" pos:end="113:36">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="119:13" pos:end="119:25"><expr pos:start="119:13" pos:end="119:24"><call pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:20">get_be32</name><argument_list pos:start="119:21" pos:end="119:24">(<argument pos:start="119:22" pos:end="119:23"><expr pos:start="119:22" pos:end="119:23"><name pos:start="119:22" pos:end="119:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="119:27" pos:end="119:48">/* horiz resolution */</comment>

            <expr_stmt pos:start="121:13" pos:end="121:25"><expr pos:start="121:13" pos:end="121:24"><call pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:20">get_be32</name><argument_list pos:start="121:21" pos:end="121:24">(<argument pos:start="121:22" pos:end="121:23"><expr pos:start="121:22" pos:end="121:23"><name pos:start="121:22" pos:end="121:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="121:27" pos:end="121:47">/* vert resolution */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:25"><expr pos:start="123:13" pos:end="123:24"><call pos:start="123:13" pos:end="123:24"><name pos:start="123:13" pos:end="123:20">get_be32</name><argument_list pos:start="123:21" pos:end="123:24">(<argument pos:start="123:22" pos:end="123:23"><expr pos:start="123:22" pos:end="123:23"><name pos:start="123:22" pos:end="123:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="123:27" pos:end="123:51">/* data size, always 0 */</comment>

            <expr_stmt pos:start="125:13" pos:end="128:0"><expr pos:start="125:13" pos:end="125:44"><name pos:start="125:13" pos:end="125:29">frames_per_sample</name> <operator pos:start="125:31" pos:end="125:31">=</operator> <call pos:start="125:33" pos:end="125:44"><name pos:start="125:33" pos:end="125:40">get_be16</name><argument_list pos:start="125:41" pos:end="125:44">(<argument pos:start="125:42" pos:end="125:43"><expr pos:start="125:42" pos:end="125:43"><name pos:start="125:42" pos:end="125:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="125:47" pos:end="125:70">/* frames per samples */</comment>

<cpp:ifdef pos:start="127:1" pos:end="127:12">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:12">DEBUG</name></cpp:ifdef>

	    <expr_stmt pos:start="129:13" pos:end="132:0"><expr pos:start="129:13" pos:end="129:62"><call pos:start="129:13" pos:end="129:62"><name pos:start="129:13" pos:end="129:18">printf</name><argument_list pos:start="129:19" pos:end="129:62">(<argument pos:start="129:20" pos:end="129:42"><expr pos:start="129:20" pos:end="129:42"><literal type="string" pos:start="129:20" pos:end="129:42">"frames/samples = %d\n"</literal></expr></argument>, <argument pos:start="129:45" pos:end="129:61"><expr pos:start="129:45" pos:end="129:61"><name pos:start="129:45" pos:end="129:61">frames_per_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

	    <expr_stmt pos:start="133:13" pos:end="133:64"><expr pos:start="133:13" pos:end="133:63"><call pos:start="133:13" pos:end="133:63"><name pos:start="133:13" pos:end="133:22">get_buffer</name><argument_list pos:start="133:23" pos:end="133:63">(<argument pos:start="133:24" pos:end="133:25"><expr pos:start="133:24" pos:end="133:25"><name pos:start="133:24" pos:end="133:25">pb</name></expr></argument>, <argument pos:start="133:28" pos:end="133:58"><expr pos:start="133:28" pos:end="133:58"><operator pos:start="133:28" pos:end="133:28">(</operator><name pos:start="133:29" pos:end="133:35">uint8_t</name> <operator pos:start="133:37" pos:end="133:37">*</operator><operator pos:start="133:38" pos:end="133:38">)</operator><name pos:start="133:39" pos:end="133:58"><name pos:start="133:39" pos:end="133:40">st</name><operator pos:start="133:41" pos:end="133:42">-&gt;</operator><name pos:start="133:43" pos:end="133:47">codec</name><operator pos:start="133:48" pos:end="133:48">.</operator><name pos:start="133:49" pos:end="133:58">codec_name</name></name></expr></argument>, <argument pos:start="133:61" pos:end="133:62"><expr pos:start="133:61" pos:end="133:62"><literal type="number" pos:start="133:61" pos:end="133:62">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="133:66" pos:end="133:81">/* codec name */</comment>



	    <expr_stmt pos:start="137:13" pos:end="137:53"><expr pos:start="137:13" pos:end="137:52"><name pos:start="137:13" pos:end="137:37"><name pos:start="137:13" pos:end="137:14">st</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:21">codec</name><operator pos:start="137:22" pos:end="137:22">.</operator><name pos:start="137:23" pos:end="137:37">bits_per_sample</name></name> <operator pos:start="137:39" pos:end="137:39">=</operator> <call pos:start="137:41" pos:end="137:52"><name pos:start="137:41" pos:end="137:48">get_be16</name><argument_list pos:start="137:49" pos:end="137:52">(<argument pos:start="137:50" pos:end="137:51"><expr pos:start="137:50" pos:end="137:51"><name pos:start="137:50" pos:end="137:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="137:55" pos:end="137:65">/* depth */</comment>

            <expr_stmt pos:start="139:13" pos:end="139:52"><expr pos:start="139:13" pos:end="139:51"><name pos:start="139:13" pos:end="139:36"><name pos:start="139:13" pos:end="139:14">st</name><operator pos:start="139:15" pos:end="139:16">-&gt;</operator><name pos:start="139:17" pos:end="139:21">codec</name><operator pos:start="139:22" pos:end="139:22">.</operator><name pos:start="139:23" pos:end="139:36">color_table_id</name></name> <operator pos:start="139:38" pos:end="139:38">=</operator> <call pos:start="139:40" pos:end="139:51"><name pos:start="139:40" pos:end="139:47">get_be16</name><argument_list pos:start="139:48" pos:end="139:51">(<argument pos:start="139:49" pos:end="139:50"><expr pos:start="139:49" pos:end="139:50"><name pos:start="139:49" pos:end="139:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="139:54" pos:end="139:72">/* colortable id */</comment>



            <expr_stmt pos:start="143:13" pos:end="143:43"><expr pos:start="143:13" pos:end="143:42"><name pos:start="143:13" pos:end="143:32"><name pos:start="143:13" pos:end="143:14">st</name><operator pos:start="143:15" pos:end="143:16">-&gt;</operator><name pos:start="143:17" pos:end="143:21">codec</name><operator pos:start="143:22" pos:end="143:22">.</operator><name pos:start="143:23" pos:end="143:32">frame_rate</name></name>      <operator pos:start="143:39" pos:end="143:39">=</operator> <literal type="number" pos:start="143:41" pos:end="143:42">25</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:42"><expr pos:start="145:13" pos:end="145:41"><name pos:start="145:13" pos:end="145:37"><name pos:start="145:13" pos:end="145:14">st</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:21">codec</name><operator pos:start="145:22" pos:end="145:22">.</operator><name pos:start="145:23" pos:end="145:37">frame_rate_base</name></name> <operator pos:start="145:39" pos:end="145:39">=</operator> <literal type="number" pos:start="145:41" pos:end="145:41">1</literal></expr>;</expr_stmt>



	    <expr_stmt pos:start="149:13" pos:end="288:0"><expr pos:start="149:13" pos:end="149:37"><name pos:start="149:13" pos:end="149:16">size</name> <operator pos:start="149:18" pos:end="149:19">-=</operator> <operator pos:start="149:21" pos:end="149:21">(</operator><literal type="number" pos:start="149:22" pos:end="149:24">16</literal><operator pos:start="149:24" pos:end="149:24">+</operator><literal type="number" pos:start="149:25" pos:end="149:25">8</literal><operator pos:start="149:26" pos:end="149:26">*</operator><literal type="number" pos:start="149:27" pos:end="149:28">4</literal><operator pos:start="149:28" pos:end="149:28">+</operator><literal type="number" pos:start="149:29" pos:end="149:30">2</literal><operator pos:start="149:30" pos:end="149:30">+</operator><literal type="number" pos:start="149:31" pos:end="149:33">32</literal><operator pos:start="149:33" pos:end="149:33">+</operator><literal type="number" pos:start="149:34" pos:end="149:34">2</literal><operator pos:start="149:35" pos:end="149:35">*</operator><literal type="number" pos:start="149:36" pos:end="149:36">2</literal><operator pos:start="149:37" pos:end="149:37">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="151:1" pos:end="151:5">#<cpp:directive pos:start="151:2" pos:end="151:3">if</cpp:directive> <expr pos:start="151:5" pos:end="151:5"><literal type="number" pos:start="151:5" pos:end="151:5">0</literal></expr></cpp:if>

	    while (size &gt;= 8) {

		MOV_atom_t a;

                int64_t start_pos;



		a.size = get_be32(pb);

		a.type = get_le32(pb);

		size -= 8;

<cpp:ifdef pos:start="167:1" pos:end="167:12">#<cpp:directive pos:start="167:2" pos:end="167:6">ifdef</cpp:directive> <name pos:start="167:8" pos:end="167:12">DEBUG</name></cpp:ifdef>

                printf("VIDEO: atom_type=%c%c%c%c atom.size=%Ld size_left=%d\n",

                       (a.type &gt;&gt; 0) &amp; 0xff,

                       (a.type &gt;&gt; 8) &amp; 0xff,

                       (a.type &gt;&gt; 16) &amp; 0xff,

                       (a.type &gt;&gt; 24) &amp; 0xff,

		       a.size, size);

<cpp:endif pos:start="181:1" pos:end="181:6">#<cpp:directive pos:start="181:2" pos:end="181:6">endif</cpp:directive></cpp:endif>

                start_pos = url_ftell(pb);



		switch(a.type) {

                case MKTAG('e', 's', 'd', 's'):

                    {

                        int tag, len;

                        <comment type="block" pos:start="195:25" pos:end="195:77">/* Well, broken but suffisant for some MP4 streams */</comment>

                        get_be32(pb); <comment type="block" pos:start="197:39" pos:end="197:59">/* version + flags */</comment>

			len = mov_mp4_read_descr(pb, &amp;tag);

                        if (tag == 0x03) {

                            <comment type="block" pos:start="203:29" pos:end="203:47">/* MP4ESDescrTag */</comment>

                            get_be16(pb); <comment type="block" pos:start="205:43" pos:end="205:50">/* ID */</comment>

                            get_byte(pb); <comment type="block" pos:start="207:43" pos:end="207:56">/* priority */</comment>

			    len = mov_mp4_read_descr(pb, &amp;tag);

                            if (tag != 0x04)

                                goto fail;

                            <comment type="block" pos:start="215:29" pos:end="215:54">/* MP4DecConfigDescrTag */</comment>

                            get_byte(pb); <comment type="block" pos:start="217:43" pos:end="217:60">/* objectTypeId */</comment>

                            get_be32(pb); <comment type="block" pos:start="219:43" pos:end="219:72">/* streamType + buffer size */</comment>

			    get_be32(pb); <comment type="block" pos:start="221:43" pos:end="221:60">/* max bit rate */</comment>

                            get_be32(pb); <comment type="block" pos:start="223:43" pos:end="223:60">/* avg bit rate */</comment>

                            len = mp4_read_descr(pb, &amp;tag);

                            if (tag != 0x05)

                                goto fail;

                            <comment type="block" pos:start="231:29" pos:end="231:56">/* MP4DecSpecificDescrTag */</comment>

<cpp:ifdef pos:start="233:1" pos:end="233:12">#<cpp:directive pos:start="233:2" pos:end="233:6">ifdef</cpp:directive> <name pos:start="233:8" pos:end="233:12">DEBUG</name></cpp:ifdef>

                            printf("Specific MPEG4 header len=%d\n", len);

<cpp:endif pos:start="237:1" pos:end="237:6">#<cpp:directive pos:start="237:2" pos:end="237:6">endif</cpp:directive></cpp:endif>

                            sc-&gt;header_data = av_mallocz(len);

                            if (sc-&gt;header_data) {

                                get_buffer(pb, sc-&gt;header_data, len);

				sc-&gt;header_len = len;

                            }

                        }

                        <comment type="block" pos:start="251:25" pos:end="251:55">/* in any case, skip garbage */</comment>

                    }

                    break;

                default:

                    break;

                }

	    fail:

		printf("ATOMENEWSIZE %Ld   %d\n", atom.size, url_ftell(pb) - start_pos);

		if (atom.size &gt; 8) {

		    url_fskip(pb, (atom.size - 8) -

			      ((url_ftell(pb) - start_pos)));

		    size -= atom.size - 8;

		}

	    }

            if (size &gt; 0) {

                <comment type="block" pos:start="281:17" pos:end="281:39">/* unknown extension */</comment>

                url_fskip(pb, size);

            }

<cpp:else pos:start="287:1" pos:end="287:5">#<cpp:directive pos:start="287:2" pos:end="287:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="289:13" pos:end="289:26"><expr pos:start="289:13" pos:end="289:25"><name pos:start="289:13" pos:end="289:18"><name pos:start="289:13" pos:end="289:13">a</name><operator pos:start="289:14" pos:end="289:14">.</operator><name pos:start="289:15" pos:end="289:18">size</name></name> <operator pos:start="289:20" pos:end="289:20">=</operator> <name pos:start="289:22" pos:end="289:25">size</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="291:13" pos:end="294:0"><expr pos:start="291:13" pos:end="291:38"><call pos:start="291:13" pos:end="291:38"><name pos:start="291:13" pos:end="291:28">mov_read_default</name><argument_list pos:start="291:29" pos:end="291:38">(<argument pos:start="291:30" pos:end="291:30"><expr pos:start="291:30" pos:end="291:30"><name pos:start="291:30" pos:end="291:30">c</name></expr></argument>, <argument pos:start="291:33" pos:end="291:34"><expr pos:start="291:33" pos:end="291:34"><name pos:start="291:33" pos:end="291:34">pb</name></expr></argument>, <argument pos:start="291:37" pos:end="291:37"><expr pos:start="291:37" pos:end="291:37"><name pos:start="291:37" pos:end="291:37">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="293:1" pos:end="293:6">#<cpp:directive pos:start="293:2" pos:end="293:6">endif</cpp:directive></cpp:endif>

	</block_content>}</block></if> <else pos:start="295:11" pos:end="367:9">else <block pos:start="295:16" pos:end="367:9">{<block_content pos:start="297:13" pos:end="365:13">

            <expr_stmt pos:start="297:13" pos:end="297:25"><expr pos:start="297:13" pos:end="297:24"><call pos:start="297:13" pos:end="297:24"><name pos:start="297:13" pos:end="297:20">get_be16</name><argument_list pos:start="297:21" pos:end="297:24">(<argument pos:start="297:22" pos:end="297:23"><expr pos:start="297:22" pos:end="297:23"><name pos:start="297:22" pos:end="297:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="297:27" pos:end="297:39">/* version */</comment>

            <expr_stmt pos:start="299:13" pos:end="299:25"><expr pos:start="299:13" pos:end="299:24"><call pos:start="299:13" pos:end="299:24"><name pos:start="299:13" pos:end="299:20">get_be16</name><argument_list pos:start="299:21" pos:end="299:24">(<argument pos:start="299:22" pos:end="299:23"><expr pos:start="299:22" pos:end="299:23"><name pos:start="299:22" pos:end="299:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="299:27" pos:end="299:46">/* revision level */</comment>

            <expr_stmt pos:start="301:13" pos:end="301:25"><expr pos:start="301:13" pos:end="301:24"><call pos:start="301:13" pos:end="301:24"><name pos:start="301:13" pos:end="301:20">get_be32</name><argument_list pos:start="301:21" pos:end="301:24">(<argument pos:start="301:22" pos:end="301:23"><expr pos:start="301:22" pos:end="301:23"><name pos:start="301:22" pos:end="301:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="301:27" pos:end="301:38">/* vendor */</comment>



            <expr_stmt pos:start="305:13" pos:end="305:46"><expr pos:start="305:13" pos:end="305:45"><name pos:start="305:13" pos:end="305:30"><name pos:start="305:13" pos:end="305:14">st</name><operator pos:start="305:15" pos:end="305:16">-&gt;</operator><name pos:start="305:17" pos:end="305:21">codec</name><operator pos:start="305:22" pos:end="305:22">.</operator><name pos:start="305:23" pos:end="305:30">channels</name></name> <operator pos:start="305:32" pos:end="305:32">=</operator> <call pos:start="305:34" pos:end="305:45"><name pos:start="305:34" pos:end="305:41">get_be16</name><argument_list pos:start="305:42" pos:end="305:45">(<argument pos:start="305:43" pos:end="305:44"><expr pos:start="305:43" pos:end="305:44"><name pos:start="305:43" pos:end="305:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="305:57" pos:end="305:75">/* channel count */</comment>

	    <expr_stmt pos:start="307:13" pos:end="307:53"><expr pos:start="307:13" pos:end="307:52"><name pos:start="307:13" pos:end="307:37"><name pos:start="307:13" pos:end="307:14">st</name><operator pos:start="307:15" pos:end="307:16">-&gt;</operator><name pos:start="307:17" pos:end="307:21">codec</name><operator pos:start="307:22" pos:end="307:22">.</operator><name pos:start="307:23" pos:end="307:37">bits_per_sample</name></name> <operator pos:start="307:39" pos:end="307:39">=</operator> <call pos:start="307:41" pos:end="307:52"><name pos:start="307:41" pos:end="307:48">get_be16</name><argument_list pos:start="307:49" pos:end="307:52">(<argument pos:start="307:50" pos:end="307:51"><expr pos:start="307:50" pos:end="307:51"><name pos:start="307:50" pos:end="307:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="307:57" pos:end="307:73">/* sample size */</comment>



	    <expr_stmt pos:start="311:13" pos:end="311:70"><expr pos:start="311:13" pos:end="311:69"><name pos:start="311:13" pos:end="311:30"><name pos:start="311:13" pos:end="311:14">st</name><operator pos:start="311:15" pos:end="311:16">-&gt;</operator><name pos:start="311:17" pos:end="311:21">codec</name><operator pos:start="311:22" pos:end="311:22">.</operator><name pos:start="311:23" pos:end="311:30">codec_id</name></name> <operator pos:start="311:32" pos:end="311:32">=</operator> <call pos:start="311:34" pos:end="311:69"><name pos:start="311:34" pos:end="311:45">codec_get_id</name><argument_list pos:start="311:46" pos:end="311:69">(<argument pos:start="311:47" pos:end="311:60"><expr pos:start="311:47" pos:end="311:60"><name pos:start="311:47" pos:end="311:60">mov_audio_tags</name></expr></argument>, <argument pos:start="311:63" pos:end="311:68"><expr pos:start="311:63" pos:end="311:68"><name pos:start="311:63" pos:end="311:68">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="313:13" pos:end="313:42">/* handle specific s8 codec */</comment>

            <expr_stmt pos:start="315:13" pos:end="315:25"><expr pos:start="315:13" pos:end="315:24"><call pos:start="315:13" pos:end="315:24"><name pos:start="315:13" pos:end="315:20">get_be16</name><argument_list pos:start="315:21" pos:end="315:24">(<argument pos:start="315:22" pos:end="315:23"><expr pos:start="315:22" pos:end="315:23"><name pos:start="315:22" pos:end="315:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="315:27" pos:end="315:49">/* compression id = 0*/</comment>

            <expr_stmt pos:start="317:13" pos:end="317:25"><expr pos:start="317:13" pos:end="317:24"><call pos:start="317:13" pos:end="317:24"><name pos:start="317:13" pos:end="317:20">get_be16</name><argument_list pos:start="317:21" pos:end="317:24">(<argument pos:start="317:22" pos:end="317:23"><expr pos:start="317:22" pos:end="317:23"><name pos:start="317:22" pos:end="317:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="317:27" pos:end="317:47">/* packet size = 0 */</comment>



            <expr_stmt pos:start="321:13" pos:end="321:59"><expr pos:start="321:13" pos:end="321:58"><name pos:start="321:13" pos:end="321:33"><name pos:start="321:13" pos:end="321:14">st</name><operator pos:start="321:15" pos:end="321:16">-&gt;</operator><name pos:start="321:17" pos:end="321:21">codec</name><operator pos:start="321:22" pos:end="321:22">.</operator><name pos:start="321:23" pos:end="321:33">sample_rate</name></name> <operator pos:start="321:35" pos:end="321:35">=</operator> <operator pos:start="321:37" pos:end="321:37">(</operator><operator pos:start="321:38" pos:end="321:38">(</operator><call pos:start="321:39" pos:end="321:50"><name pos:start="321:39" pos:end="321:46">get_be32</name><argument_list pos:start="321:47" pos:end="321:50">(<argument pos:start="321:48" pos:end="321:49"><expr pos:start="321:48" pos:end="321:49"><name pos:start="321:48" pos:end="321:49">pb</name></expr></argument>)</argument_list></call> <operator pos:start="321:52" pos:end="321:53">&gt;&gt;</operator> <literal type="number" pos:start="321:55" pos:end="321:56">16</literal><operator pos:start="321:57" pos:end="321:57">)</operator><operator pos:start="321:58" pos:end="321:58">)</operator></expr>;</expr_stmt>

	    <comment type="line" pos:start="323:13" pos:end="323:103">//printf("CODECID %d  %d  %.4s\n", st-&gt;codec.codec_id, CODEC_ID_PCM_S16BE, (char*)&amp;format);</comment>



	    <switch pos:start="327:13" pos:end="347:13">switch <condition pos:start="327:20" pos:end="327:39">(<expr pos:start="327:21" pos:end="327:38"><name pos:start="327:21" pos:end="327:38"><name pos:start="327:21" pos:end="327:22">st</name><operator pos:start="327:23" pos:end="327:24">-&gt;</operator><name pos:start="327:25" pos:end="327:29">codec</name><operator pos:start="327:30" pos:end="327:30">.</operator><name pos:start="327:31" pos:end="327:38">codec_id</name></name></expr>)</condition> <block pos:start="327:41" pos:end="347:13">{<block_content pos:start="329:13" pos:end="345:17">

	    <case pos:start="329:13" pos:end="329:36">case <expr pos:start="329:18" pos:end="329:35"><name pos:start="329:18" pos:end="329:35">CODEC_ID_PCM_S16BE</name></expr>:</case>

		<if_stmt pos:start="331:17" pos:end="333:57"><if pos:start="331:17" pos:end="333:57">if <condition pos:start="331:20" pos:end="331:51">(<expr pos:start="331:21" pos:end="331:50"><name pos:start="331:21" pos:end="331:45"><name pos:start="331:21" pos:end="331:22">st</name><operator pos:start="331:23" pos:end="331:24">-&gt;</operator><name pos:start="331:25" pos:end="331:29">codec</name><operator pos:start="331:30" pos:end="331:30">.</operator><name pos:start="331:31" pos:end="331:45">bits_per_sample</name></name> <operator pos:start="331:47" pos:end="331:48">==</operator> <literal type="number" pos:start="331:50" pos:end="331:50">8</literal></expr>)</condition><block type="pseudo" pos:start="333:21" pos:end="333:57"><block_content pos:start="333:21" pos:end="333:57">

		    <expr_stmt pos:start="333:21" pos:end="333:57"><expr pos:start="333:21" pos:end="333:56"><name pos:start="333:21" pos:end="333:38"><name pos:start="333:21" pos:end="333:22">st</name><operator pos:start="333:23" pos:end="333:24">-&gt;</operator><name pos:start="333:25" pos:end="333:29">codec</name><operator pos:start="333:30" pos:end="333:30">.</operator><name pos:start="333:31" pos:end="333:38">codec_id</name></name> <operator pos:start="333:40" pos:end="333:40">=</operator> <name pos:start="333:42" pos:end="333:56">CODEC_ID_PCM_S8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="block" pos:start="335:17" pos:end="335:26">/* fall */</comment>

	    <case pos:start="337:13" pos:end="337:33">case <expr pos:start="337:18" pos:end="337:32"><name pos:start="337:18" pos:end="337:32">CODEC_ID_PCM_U8</name></expr>:</case>

		<expr_stmt pos:start="339:17" pos:end="339:63"><expr pos:start="339:17" pos:end="339:62"><name pos:start="339:17" pos:end="339:34"><name pos:start="339:17" pos:end="339:18">st</name><operator pos:start="339:19" pos:end="339:20">-&gt;</operator><name pos:start="339:21" pos:end="339:25">codec</name><operator pos:start="339:26" pos:end="339:26">.</operator><name pos:start="339:27" pos:end="339:34">bit_rate</name></name> <operator pos:start="339:36" pos:end="339:36">=</operator> <name pos:start="339:38" pos:end="339:58"><name pos:start="339:38" pos:end="339:39">st</name><operator pos:start="339:40" pos:end="339:41">-&gt;</operator><name pos:start="339:42" pos:end="339:46">codec</name><operator pos:start="339:47" pos:end="339:47">.</operator><name pos:start="339:48" pos:end="339:58">sample_rate</name></name> <operator pos:start="339:60" pos:end="339:60">*</operator> <literal type="number" pos:start="339:62" pos:end="339:62">8</literal></expr>;</expr_stmt>

		<break pos:start="341:17" pos:end="341:22">break;</break>

	    <default pos:start="343:13" pos:end="343:20">default:</default>

                <empty_stmt pos:start="345:17" pos:end="345:17">;</empty_stmt>

	    </block_content>}</block></switch>

	    <expr_stmt pos:start="349:13" pos:end="349:25"><expr pos:start="349:13" pos:end="349:24"><call pos:start="349:13" pos:end="349:24"><name pos:start="349:13" pos:end="349:20">get_be32</name><argument_list pos:start="349:21" pos:end="349:24">(<argument pos:start="349:22" pos:end="349:23"><expr pos:start="349:22" pos:end="349:23"><name pos:start="349:22" pos:end="349:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="349:27" pos:end="349:50">/* samples per packet */</comment>

	    <expr_stmt pos:start="351:13" pos:end="351:25"><expr pos:start="351:13" pos:end="351:24"><call pos:start="351:13" pos:end="351:24"><name pos:start="351:13" pos:end="351:20">get_be32</name><argument_list pos:start="351:21" pos:end="351:24">(<argument pos:start="351:22" pos:end="351:23"><expr pos:start="351:22" pos:end="351:23"><name pos:start="351:22" pos:end="351:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="351:27" pos:end="351:48">/* bytes per packet */</comment>

            <expr_stmt pos:start="353:13" pos:end="353:25"><expr pos:start="353:13" pos:end="353:24"><call pos:start="353:13" pos:end="353:24"><name pos:start="353:13" pos:end="353:20">get_be32</name><argument_list pos:start="353:21" pos:end="353:24">(<argument pos:start="353:22" pos:end="353:23"><expr pos:start="353:22" pos:end="353:23"><name pos:start="353:22" pos:end="353:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="353:27" pos:end="353:47">/* bytes per frame */</comment>

            <expr_stmt pos:start="355:13" pos:end="355:25"><expr pos:start="355:13" pos:end="355:24"><call pos:start="355:13" pos:end="355:24"><name pos:start="355:13" pos:end="355:20">get_be32</name><argument_list pos:start="355:21" pos:end="355:24">(<argument pos:start="355:22" pos:end="355:23"><expr pos:start="355:22" pos:end="355:23"><name pos:start="355:22" pos:end="355:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="355:27" pos:end="355:48">/* bytes per sample */</comment>



	    <block pos:start="359:13" pos:end="365:13">{<block_content pos:start="361:17" pos:end="363:43">

		<decl_stmt pos:start="361:17" pos:end="361:84"><decl pos:start="361:17" pos:end="361:83"><type pos:start="361:17" pos:end="361:26"><name pos:start="361:17" pos:end="361:26">MOV_atom_t</name></type> <name pos:start="361:28" pos:end="361:28">a</name> <init pos:start="361:30" pos:end="361:83">= <expr pos:start="361:32" pos:end="361:83"><block pos:start="361:32" pos:end="361:83">{ <expr pos:start="361:34" pos:end="361:39"><name pos:start="361:34" pos:end="361:39">format</name></expr>, <expr pos:start="361:42" pos:end="361:54"><call pos:start="361:42" pos:end="361:54"><name pos:start="361:42" pos:end="361:50">url_ftell</name><argument_list pos:start="361:51" pos:end="361:54">(<argument pos:start="361:52" pos:end="361:53"><expr pos:start="361:52" pos:end="361:53"><name pos:start="361:52" pos:end="361:53">pb</name></expr></argument>)</argument_list></call></expr>, <expr pos:start="361:57" pos:end="361:81"><name pos:start="361:57" pos:end="361:60">size</name> <operator pos:start="361:62" pos:end="361:62">-</operator> <operator pos:start="361:64" pos:end="361:64">(</operator><literal type="number" pos:start="361:65" pos:end="361:68">16</literal> <operator pos:start="361:68" pos:end="361:68">+</operator> <literal type="number" pos:start="361:70" pos:end="361:73">20</literal> <operator pos:start="361:73" pos:end="361:73">+</operator> <literal type="number" pos:start="361:75" pos:end="361:78">16</literal> <operator pos:start="361:78" pos:end="361:78">+</operator> <literal type="number" pos:start="361:80" pos:end="361:80">8</literal><operator pos:start="361:81" pos:end="361:81">)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="363:17" pos:end="363:43"><expr pos:start="363:17" pos:end="363:42"><call pos:start="363:17" pos:end="363:42"><name pos:start="363:17" pos:end="363:32">mov_read_default</name><argument_list pos:start="363:33" pos:end="363:42">(<argument pos:start="363:34" pos:end="363:34"><expr pos:start="363:34" pos:end="363:34"><name pos:start="363:34" pos:end="363:34">c</name></expr></argument>, <argument pos:start="363:37" pos:end="363:38"><expr pos:start="363:37" pos:end="363:38"><name pos:start="363:37" pos:end="363:38">pb</name></expr></argument>, <argument pos:start="363:41" pos:end="363:41"><expr pos:start="363:41" pos:end="363:41"><name pos:start="363:41" pos:end="363:41">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <return pos:start="373:5" pos:end="373:13">return <expr pos:start="373:12" pos:end="373:12"><literal type="number" pos:start="373:12" pos:end="373:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
