<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21690.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:47">qmp_chardev_open_socket</name><parameter_list pos:start="1:48" pos:end="3:61">(<parameter pos:start="1:49" pos:end="1:67"><decl pos:start="1:49" pos:end="1:67"><type pos:start="1:49" pos:end="1:67"><name pos:start="1:49" pos:end="1:61">ChardevSocket</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">sock</name></decl></parameter>,

                                                <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:53">Error</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier><modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="41:1">{<block_content pos:start="7:5" pos:end="39:68">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SocketAddress</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">addr</name> <init pos:start="7:25" pos:end="7:36">= <expr pos:start="7:27" pos:end="7:36"><name pos:start="7:27" pos:end="7:36"><name pos:start="7:27" pos:end="7:30">sock</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">addr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:68"><decl pos:start="9:5" pos:end="9:67"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:19">do_nodelay</name>     <init pos:start="9:25" pos:end="9:67">= <expr pos:start="9:27" pos:end="9:67"><ternary pos:start="9:27" pos:end="9:67"><condition pos:start="9:27" pos:end="9:45"><expr pos:start="9:27" pos:end="9:43"><name pos:start="9:27" pos:end="9:43"><name pos:start="9:27" pos:end="9:30">sock</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:43">has_nodelay</name></name></expr> ?</condition><then pos:start="9:47" pos:end="9:59"> <expr pos:start="9:47" pos:end="9:59"><name pos:start="9:47" pos:end="9:59"><name pos:start="9:47" pos:end="9:50">sock</name><operator pos:start="9:51" pos:end="9:52">-&gt;</operator><name pos:start="9:53" pos:end="9:59">nodelay</name></name></expr> </then><else pos:start="9:61" pos:end="9:67">: <expr pos:start="9:63" pos:end="9:67"><name pos:start="9:63" pos:end="9:67">false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:67"><decl pos:start="11:5" pos:end="11:66"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:18">is_listen</name>      <init pos:start="11:25" pos:end="11:66">= <expr pos:start="11:27" pos:end="11:66"><ternary pos:start="11:27" pos:end="11:66"><condition pos:start="11:27" pos:end="11:45"><expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:30">sock</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:42">has_server</name></name></expr>  ?</condition><then pos:start="11:47" pos:end="11:58"> <expr pos:start="11:47" pos:end="11:58"><name pos:start="11:47" pos:end="11:58"><name pos:start="11:47" pos:end="11:50">sock</name><operator pos:start="11:51" pos:end="11:52">-&gt;</operator><name pos:start="11:53" pos:end="11:58">server</name></name></expr>  </then><else pos:start="11:61" pos:end="11:66">: <expr pos:start="11:63" pos:end="11:66"><name pos:start="11:63" pos:end="11:66">true</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:68"><decl pos:start="13:5" pos:end="13:67"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:18">is_telnet</name>      <init pos:start="13:25" pos:end="13:67">= <expr pos:start="13:27" pos:end="13:67"><ternary pos:start="13:27" pos:end="13:67"><condition pos:start="13:27" pos:end="13:45"><expr pos:start="13:27" pos:end="13:42"><name pos:start="13:27" pos:end="13:42"><name pos:start="13:27" pos:end="13:30">sock</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:42">has_telnet</name></name></expr>  ?</condition><then pos:start="13:47" pos:end="13:58"> <expr pos:start="13:47" pos:end="13:58"><name pos:start="13:47" pos:end="13:58"><name pos:start="13:47" pos:end="13:50">sock</name><operator pos:start="13:51" pos:end="13:52">-&gt;</operator><name pos:start="13:53" pos:end="13:58">telnet</name></name></expr>  </then><else pos:start="13:61" pos:end="13:67">: <expr pos:start="13:63" pos:end="13:67"><name pos:start="13:63" pos:end="13:67">false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:68"><decl pos:start="15:5" pos:end="15:67"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:23">is_waitconnect</name> <init pos:start="15:25" pos:end="15:67">= <expr pos:start="15:27" pos:end="15:67"><ternary pos:start="15:27" pos:end="15:67"><condition pos:start="15:27" pos:end="15:45"><expr pos:start="15:27" pos:end="15:40"><name pos:start="15:27" pos:end="15:40"><name pos:start="15:27" pos:end="15:30">sock</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:40">has_wait</name></name></expr>    ?</condition><then pos:start="15:47" pos:end="15:56"> <expr pos:start="15:47" pos:end="15:56"><name pos:start="15:47" pos:end="15:56"><name pos:start="15:47" pos:end="15:50">sock</name><operator pos:start="15:51" pos:end="15:52">-&gt;</operator><name pos:start="15:53" pos:end="15:56">wait</name></name></expr>    </then><else pos:start="15:61" pos:end="15:67">: <expr pos:start="15:63" pos:end="15:67"><name pos:start="15:63" pos:end="15:67">false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:11"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">fd</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:18">(<expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:17">is_listen</name></expr>)</condition> <block pos:start="21:20" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:39">

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:10">fd</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <call pos:start="23:14" pos:end="23:38"><name pos:start="23:14" pos:end="23:26">socket_listen</name><argument_list pos:start="23:27" pos:end="23:38">(<argument pos:start="23:28" pos:end="23:31"><expr pos:start="23:28" pos:end="23:31"><name pos:start="23:28" pos:end="23:31">addr</name></expr></argument>, <argument pos:start="23:34" pos:end="23:37"><expr pos:start="23:34" pos:end="23:37"><name pos:start="23:34" pos:end="23:37">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="29:5">else <block pos:start="25:12" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:52">

        <expr_stmt pos:start="27:9" pos:end="27:52"><expr pos:start="27:9" pos:end="27:51"><name pos:start="27:9" pos:end="27:10">fd</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:51"><name pos:start="27:14" pos:end="27:27">socket_connect</name><argument_list pos:start="27:28" pos:end="27:51">(<argument pos:start="27:29" pos:end="27:32"><expr pos:start="27:29" pos:end="27:32"><name pos:start="27:29" pos:end="27:32">addr</name></expr></argument>, <argument pos:start="27:35" pos:end="27:38"><expr pos:start="27:35" pos:end="27:38"><name pos:start="27:35" pos:end="27:38">errp</name></expr></argument>, <argument pos:start="27:41" pos:end="27:44"><expr pos:start="27:41" pos:end="27:44"><name pos:start="27:41" pos:end="27:44">NULL</name></expr></argument>, <argument pos:start="27:47" pos:end="27:50"><expr pos:start="27:47" pos:end="27:50"><name pos:start="27:47" pos:end="27:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:27">(<expr pos:start="31:9" pos:end="31:26"><call pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:20">error_is_set</name><argument_list pos:start="31:21" pos:end="31:26">(<argument pos:start="31:22" pos:end="31:25"><expr pos:start="31:22" pos:end="31:25"><name pos:start="31:22" pos:end="31:25">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:29" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:20">

        <return pos:start="33:9" pos:end="33:20">return <expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="37:5" pos:end="39:68">return <expr pos:start="37:12" pos:end="39:67"><call pos:start="37:12" pos:end="39:67"><name pos:start="37:12" pos:end="37:34">qemu_chr_open_socket_fd</name><argument_list pos:start="37:35" pos:end="39:67">(<argument pos:start="37:36" pos:end="37:37"><expr pos:start="37:36" pos:end="37:37"><name pos:start="37:36" pos:end="37:37">fd</name></expr></argument>, <argument pos:start="37:40" pos:end="37:49"><expr pos:start="37:40" pos:end="37:49"><name pos:start="37:40" pos:end="37:49">do_nodelay</name></expr></argument>, <argument pos:start="37:52" pos:end="37:60"><expr pos:start="37:52" pos:end="37:60"><name pos:start="37:52" pos:end="37:60">is_listen</name></expr></argument>,

                                   <argument pos:start="39:36" pos:end="39:44"><expr pos:start="39:36" pos:end="39:44"><name pos:start="39:36" pos:end="39:44">is_telnet</name></expr></argument>, <argument pos:start="39:47" pos:end="39:60"><expr pos:start="39:47" pos:end="39:60"><name pos:start="39:47" pos:end="39:60">is_waitconnect</name></expr></argument>, <argument pos:start="39:63" pos:end="39:66"><expr pos:start="39:63" pos:end="39:66"><name pos:start="39:63" pos:end="39:66">errp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
