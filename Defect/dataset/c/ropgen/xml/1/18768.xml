<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18768.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">matroska_probe</name><parameter_list pos:start="1:26" pos:end="1:41">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:37">AVProbeData</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:31">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:18">total</name> <init pos:start="5:20" pos:end="5:22">= <expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">len_mask</name> <init pos:start="7:18" pos:end="7:23">= <expr pos:start="7:20" pos:end="7:23"><literal type="number" pos:start="7:20" pos:end="7:23">0x80</literal></expr></init></decl>, <decl pos:start="7:26" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:29">size</name> <init pos:start="7:31" pos:end="7:33">= <expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">1</literal></expr></init></decl>, <decl pos:start="7:36" pos:end="7:40"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:36" pos:end="7:36">n</name> <init pos:start="7:38" pos:end="7:40">= <expr pos:start="7:40" pos:end="7:40"><literal type="number" pos:start="7:40" pos:end="7:40">1</literal></expr></init></decl>, <decl pos:start="7:43" pos:end="7:43"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:43" pos:end="7:43">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:22">/* EBML header? */</comment>

    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:42">(<expr pos:start="13:9" pos:end="13:41"><call pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:15">AV_RB32</name><argument_list pos:start="13:16" pos:end="13:23">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:17">p</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:22">buf</name></name></expr></argument>)</argument_list></call> <operator pos:start="13:25" pos:end="13:26">!=</operator> <name pos:start="13:28" pos:end="13:41">EBML_ID_HEADER</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:26">/* length of header */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:9">total</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <name pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:13">p</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:18">buf</name><index pos:start="21:19" pos:end="21:21">[<expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">4</literal></expr>]</index></name></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="29:5">while <condition pos:start="23:11" pos:end="23:44">(<expr pos:start="23:12" pos:end="23:43"><name pos:start="23:12" pos:end="23:15">size</name> <operator pos:start="23:17" pos:end="23:18">&lt;=</operator> <literal type="number" pos:start="23:20" pos:end="23:20">8</literal> <operator pos:start="23:22" pos:end="23:23">&amp;&amp;</operator> <operator pos:start="23:25" pos:end="23:25">!</operator><operator pos:start="23:26" pos:end="23:26">(</operator><name pos:start="23:27" pos:end="23:31">total</name> <operator pos:start="23:33" pos:end="23:33">&amp;</operator> <name pos:start="23:35" pos:end="23:42">len_mask</name><operator pos:start="23:43" pos:end="23:43">)</operator></expr>)</condition> <block pos:start="23:46" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:23">

        <expr_stmt pos:start="25:9" pos:end="25:15"><expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:12">size</name><operator pos:start="25:13" pos:end="25:14">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:16">len_mask</name> <operator pos:start="27:18" pos:end="27:20">&gt;&gt;=</operator> <literal type="number" pos:start="27:22" pos:end="27:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="31:5" pos:end="33:15"><if pos:start="31:5" pos:end="33:15">if <condition pos:start="31:8" pos:end="31:17">(<expr pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:12">size</name> <operator pos:start="31:14" pos:end="31:14">&gt;</operator> <literal type="number" pos:start="31:16" pos:end="31:16">8</literal></expr>)</condition><block type="pseudo" pos:start="33:7" pos:end="33:15"><block_content pos:start="33:7" pos:end="33:15">

      <return pos:start="33:7" pos:end="33:15">return <expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:28"><expr pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:9">total</name> <operator pos:start="35:11" pos:end="35:12">&amp;=</operator> <operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:22">len_mask</name> <operator pos:start="35:24" pos:end="35:24">-</operator> <literal type="number" pos:start="35:26" pos:end="35:26">1</literal><operator pos:start="35:27" pos:end="35:27">)</operator></expr>;</expr_stmt>

    <while pos:start="37:5" pos:end="39:47">while <condition pos:start="37:11" pos:end="37:20">(<expr pos:start="37:12" pos:end="37:19"><name pos:start="37:12" pos:end="37:12">n</name> <operator pos:start="37:14" pos:end="37:14">&lt;</operator> <name pos:start="37:16" pos:end="37:19">size</name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:47"><block_content pos:start="39:9" pos:end="39:47">

        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:13">total</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <operator pos:start="39:17" pos:end="39:17">(</operator><name pos:start="39:18" pos:end="39:22">total</name> <operator pos:start="39:24" pos:end="39:25">&lt;&lt;</operator> <literal type="number" pos:start="39:27" pos:end="39:27">8</literal><operator pos:start="39:28" pos:end="39:28">)</operator> <operator pos:start="39:30" pos:end="39:30">|</operator> <name pos:start="39:32" pos:end="39:46"><name pos:start="39:32" pos:end="39:32">p</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:37">buf</name><index pos:start="39:38" pos:end="39:46">[<expr pos:start="39:39" pos:end="39:45"><literal type="number" pos:start="39:39" pos:end="39:41">4</literal> <operator pos:start="39:41" pos:end="39:41">+</operator> <name pos:start="39:43" pos:end="39:43">n</name><operator pos:start="39:44" pos:end="39:45">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>



    <comment type="block" pos:start="43:5" pos:end="43:55">/* Does the probe data contain the whole header? */</comment>

    <if_stmt pos:start="45:5" pos:end="47:15"><if pos:start="45:5" pos:end="47:15">if <condition pos:start="45:8" pos:end="45:39">(<expr pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:9">p</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:19">buf_size</name></name> <operator pos:start="45:21" pos:end="45:21">&lt;</operator> <literal type="number" pos:start="45:23" pos:end="45:25">4</literal> <operator pos:start="45:25" pos:end="45:25">+</operator> <name pos:start="45:27" pos:end="45:30">size</name> <operator pos:start="45:32" pos:end="45:32">+</operator> <name pos:start="45:34" pos:end="45:38">total</name></expr>)</condition><block type="pseudo" pos:start="47:7" pos:end="47:15"><block_content pos:start="47:7" pos:end="47:15">

      <return pos:start="47:7" pos:end="47:15">return <expr pos:start="47:14" pos:end="47:14"><literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="57:48">/* The header should contain a known document type. For now,

     * we don't parse the whole header but simply check for the

     * availability of that array of characters inside the header.

     * Not fully fool-proof, but good enough. */</comment>

    <for pos:start="59:5" pos:end="71:5">for <control pos:start="59:9" pos:end="59:59">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:54"><expr pos:start="59:17" pos:end="59:53"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <call pos:start="59:21" pos:end="59:53"><name pos:start="59:21" pos:end="59:34">FF_ARRAY_ELEMS</name><argument_list pos:start="59:35" pos:end="59:53">(<argument pos:start="59:36" pos:end="59:52"><expr pos:start="59:36" pos:end="59:52"><name pos:start="59:36" pos:end="59:52">matroska_doctypes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="59:56" pos:end="59:58"><expr pos:start="59:56" pos:end="59:58"><name pos:start="59:56" pos:end="59:56">i</name><operator pos:start="59:57" pos:end="59:58">++</operator></expr></incr>)</control> <block pos:start="59:61" pos:end="71:5">{<block_content pos:start="61:9" pos:end="69:41">

        <decl_stmt pos:start="61:9" pos:end="61:52"><decl pos:start="61:9" pos:end="61:51"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:20">probelen</name> <init pos:start="61:22" pos:end="61:51">= <expr pos:start="61:24" pos:end="61:51"><call pos:start="61:24" pos:end="61:51"><name pos:start="61:24" pos:end="61:29">strlen</name><argument_list pos:start="61:30" pos:end="61:51">(<argument pos:start="61:31" pos:end="61:50"><expr pos:start="61:31" pos:end="61:50"><name pos:start="61:31" pos:end="61:50"><name pos:start="61:31" pos:end="61:47">matroska_doctypes</name><index pos:start="61:48" pos:end="61:50">[<expr pos:start="61:49" pos:end="61:49"><name pos:start="61:49" pos:end="61:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <for pos:start="65:9" pos:end="69:41">for <control pos:start="65:13" pos:end="65:57">(<init pos:start="65:14" pos:end="65:24"><expr pos:start="65:14" pos:end="65:23"><name pos:start="65:14" pos:end="65:14">n</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:19">4</literal><operator pos:start="65:19" pos:end="65:19">+</operator><name pos:start="65:20" pos:end="65:23">size</name></expr>;</init> <condition pos:start="65:26" pos:end="65:52"><expr pos:start="65:26" pos:end="65:51"><name pos:start="65:26" pos:end="65:26">n</name> <operator pos:start="65:28" pos:end="65:29">&lt;=</operator> <literal type="number" pos:start="65:31" pos:end="65:32">4</literal><operator pos:start="65:32" pos:end="65:32">+</operator><name pos:start="65:33" pos:end="65:36">size</name><operator pos:start="65:37" pos:end="65:37">+</operator><name pos:start="65:38" pos:end="65:42">total</name><operator pos:start="65:43" pos:end="65:43">-</operator><name pos:start="65:44" pos:end="65:51">probelen</name></expr>;</condition> <incr pos:start="65:54" pos:end="65:56"><expr pos:start="65:54" pos:end="65:56"><name pos:start="65:54" pos:end="65:54">n</name><operator pos:start="65:55" pos:end="65:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="67:13" pos:end="69:41"><block_content pos:start="67:13" pos:end="69:41">

            <if_stmt pos:start="67:13" pos:end="69:41"><if pos:start="67:13" pos:end="69:41">if <condition pos:start="67:16" pos:end="67:66">(<expr pos:start="67:17" pos:end="67:65"><operator pos:start="67:17" pos:end="67:17">!</operator><call pos:start="67:18" pos:end="67:65"><name pos:start="67:18" pos:end="67:23">memcmp</name><argument_list pos:start="67:24" pos:end="67:65">(<argument pos:start="67:25" pos:end="67:32"><expr pos:start="67:25" pos:end="67:32"><name pos:start="67:25" pos:end="67:30"><name pos:start="67:25" pos:end="67:25">p</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:30">buf</name></name><operator pos:start="67:31" pos:end="67:31">+</operator><name pos:start="67:32" pos:end="67:32">n</name></expr></argument>, <argument pos:start="67:35" pos:end="67:54"><expr pos:start="67:35" pos:end="67:54"><name pos:start="67:35" pos:end="67:54"><name pos:start="67:35" pos:end="67:51">matroska_doctypes</name><index pos:start="67:52" pos:end="67:54">[<expr pos:start="67:53" pos:end="67:53"><name pos:start="67:53" pos:end="67:53">i</name></expr>]</index></name></expr></argument>, <argument pos:start="67:57" pos:end="67:64"><expr pos:start="67:57" pos:end="67:64"><name pos:start="67:57" pos:end="67:64">probelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:41"><block_content pos:start="69:17" pos:end="69:41">

                <return pos:start="69:17" pos:end="69:41">return <expr pos:start="69:24" pos:end="69:40"><name pos:start="69:24" pos:end="69:40">AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    </block_content>}</block></for>



    <comment type="line" pos:start="75:5" pos:end="75:59">// probably valid EBML header but no recognized doctype</comment>

    <return pos:start="77:5" pos:end="77:31">return <expr pos:start="77:12" pos:end="77:30"><name pos:start="77:12" pos:end="77:28">AVPROBE_SCORE_MAX</name><operator pos:start="77:29" pos:end="77:29">/</operator><literal type="number" pos:start="77:30" pos:end="77:30">2</literal></expr>;</return>

</block_content>}</block></function></unit>
