<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8429.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">xbzrle_decode_buffer</name><parameter_list pos:start="1:25" pos:end="1:72">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:32">uint8_t</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">src</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:47"><decl pos:start="1:40" pos:end="1:47"><type pos:start="1:40" pos:end="1:47"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:47">slen</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:56">uint8_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">dst</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:71"><decl pos:start="1:64" pos:end="1:71"><type pos:start="1:64" pos:end="1:71"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:71">dlen</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name> <init pos:start="5:11" pos:end="5:13">= <expr pos:start="5:13" pos:end="5:13"><literal type="number" pos:start="5:13" pos:end="5:13">0</literal></expr></init></decl>, <decl pos:start="5:16" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:16">d</name> <init pos:start="5:18" pos:end="5:20">= <expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">count</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="89:5">while <condition pos:start="13:11" pos:end="13:20">(<expr pos:start="13:12" pos:end="13:19"><name pos:start="13:12" pos:end="13:12">i</name> <operator pos:start="13:14" pos:end="13:14">&lt;</operator> <name pos:start="13:16" pos:end="13:19">slen</name></expr>)</condition> <block pos:start="13:22" pos:end="89:5">{<block_content pos:start="19:9" pos:end="87:19">



        <comment type="block" pos:start="17:9" pos:end="17:18">/* zrun */</comment>

        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:27">(<expr pos:start="19:13" pos:end="19:26"><operator pos:start="19:13" pos:end="19:13">(</operator><name pos:start="19:14" pos:end="19:17">slen</name> <operator pos:start="19:19" pos:end="19:19">-</operator> <name pos:start="19:21" pos:end="19:21">i</name><operator pos:start="19:22" pos:end="19:22">)</operator> <operator pos:start="19:24" pos:end="19:24">&lt;</operator> <literal type="number" pos:start="19:26" pos:end="19:26">2</literal></expr>)</condition> <block pos:start="19:29" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:22">

            <return pos:start="21:13" pos:end="21:22">return <expr pos:start="21:20" pos:end="21:21"><operator pos:start="21:20" pos:end="21:20">-</operator><literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:52"><expr pos:start="27:9" pos:end="27:51"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:51"><name pos:start="27:15" pos:end="27:34">uleb128_decode_small</name><argument_list pos:start="27:35" pos:end="27:51">(<argument pos:start="27:36" pos:end="27:42"><expr pos:start="27:36" pos:end="27:42"><name pos:start="27:36" pos:end="27:38">src</name> <operator pos:start="27:40" pos:end="27:40">+</operator> <name pos:start="27:42" pos:end="27:42">i</name></expr></argument>, <argument pos:start="27:45" pos:end="27:50"><expr pos:start="27:45" pos:end="27:50"><operator pos:start="27:45" pos:end="27:45">&amp;</operator><name pos:start="27:46" pos:end="27:50">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:37">(<expr pos:start="29:13" pos:end="29:36"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">&lt;</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal> <operator pos:start="29:21" pos:end="29:22">||</operator> <operator pos:start="29:24" pos:end="29:24">(</operator><name pos:start="29:25" pos:end="29:25">i</name> <operator pos:start="29:27" pos:end="29:28">&amp;&amp;</operator> <operator pos:start="29:30" pos:end="29:30">!</operator><name pos:start="29:31" pos:end="29:35">count</name><operator pos:start="29:36" pos:end="29:36">)</operator></expr>)</condition> <block pos:start="29:39" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:22">

            <return pos:start="31:13" pos:end="31:22">return <expr pos:start="31:20" pos:end="31:21"><operator pos:start="31:20" pos:end="31:20">-</operator><literal type="number" pos:start="31:21" pos:end="31:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:17"><expr pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:9">i</name> <operator pos:start="35:11" pos:end="35:12">+=</operator> <name pos:start="35:14" pos:end="35:16">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:19"><expr pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:9">d</name> <operator pos:start="37:11" pos:end="37:12">+=</operator> <name pos:start="37:14" pos:end="37:18">count</name></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:22">/* overflow */</comment>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:21">(<expr pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:13">d</name> <operator pos:start="43:15" pos:end="43:15">&gt;</operator> <name pos:start="43:17" pos:end="43:20">dlen</name></expr>)</condition> <block pos:start="43:23" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:22">

            <return pos:start="45:13" pos:end="45:22">return <expr pos:start="45:20" pos:end="45:21"><operator pos:start="45:20" pos:end="45:20">-</operator><literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="51:9" pos:end="51:19">/* nzrun */</comment>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:27">(<expr pos:start="53:13" pos:end="53:26"><operator pos:start="53:13" pos:end="53:13">(</operator><name pos:start="53:14" pos:end="53:17">slen</name> <operator pos:start="53:19" pos:end="53:19">-</operator> <name pos:start="53:21" pos:end="53:21">i</name><operator pos:start="53:22" pos:end="53:22">)</operator> <operator pos:start="53:24" pos:end="53:24">&lt;</operator> <literal type="number" pos:start="53:26" pos:end="53:26">2</literal></expr>)</condition> <block pos:start="53:29" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:22">

            <return pos:start="55:13" pos:end="55:22">return <expr pos:start="55:20" pos:end="55:21"><operator pos:start="55:20" pos:end="55:20">-</operator><literal type="number" pos:start="55:21" pos:end="55:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:52"><expr pos:start="61:9" pos:end="61:51"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:51"><name pos:start="61:15" pos:end="61:34">uleb128_decode_small</name><argument_list pos:start="61:35" pos:end="61:51">(<argument pos:start="61:36" pos:end="61:42"><expr pos:start="61:36" pos:end="61:42"><name pos:start="61:36" pos:end="61:38">src</name> <operator pos:start="61:40" pos:end="61:40">+</operator> <name pos:start="61:42" pos:end="61:42">i</name></expr></argument>, <argument pos:start="61:45" pos:end="61:50"><expr pos:start="61:45" pos:end="61:50"><operator pos:start="61:45" pos:end="61:45">&amp;</operator><name pos:start="61:46" pos:end="61:50">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:30">(<expr pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal> <operator pos:start="63:21" pos:end="63:22">||</operator> <operator pos:start="63:24" pos:end="63:24">!</operator><name pos:start="63:25" pos:end="63:29">count</name></expr>)</condition> <block pos:start="63:32" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:22">

            <return pos:start="65:13" pos:end="65:22">return <expr pos:start="65:20" pos:end="65:21"><operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:17"><expr pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:9">i</name> <operator pos:start="69:11" pos:end="69:12">+=</operator> <name pos:start="69:14" pos:end="69:16">ret</name></expr>;</expr_stmt>



        <comment type="block" pos:start="73:9" pos:end="73:22">/* overflow */</comment>

        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:49">(<expr pos:start="75:13" pos:end="75:48"><name pos:start="75:13" pos:end="75:13">d</name> <operator pos:start="75:15" pos:end="75:15">+</operator> <name pos:start="75:17" pos:end="75:21">count</name> <operator pos:start="75:23" pos:end="75:23">&gt;</operator> <name pos:start="75:25" pos:end="75:28">dlen</name> <operator pos:start="75:30" pos:end="75:31">||</operator> <name pos:start="75:33" pos:end="75:33">i</name> <operator pos:start="75:35" pos:end="75:35">+</operator> <name pos:start="75:37" pos:end="75:41">count</name> <operator pos:start="75:43" pos:end="75:43">&gt;</operator> <name pos:start="75:45" pos:end="75:48">slen</name></expr>)</condition> <block pos:start="75:51" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:22">

            <return pos:start="77:13" pos:end="77:22">return <expr pos:start="77:20" pos:end="77:21"><operator pos:start="77:20" pos:end="77:20">-</operator><literal type="number" pos:start="77:21" pos:end="77:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:40"><expr pos:start="83:9" pos:end="83:39"><call pos:start="83:9" pos:end="83:39"><name pos:start="83:9" pos:end="83:14">memcpy</name><argument_list pos:start="83:15" pos:end="83:39">(<argument pos:start="83:16" pos:end="83:22"><expr pos:start="83:16" pos:end="83:22"><name pos:start="83:16" pos:end="83:18">dst</name> <operator pos:start="83:20" pos:end="83:20">+</operator> <name pos:start="83:22" pos:end="83:22">d</name></expr></argument>, <argument pos:start="83:25" pos:end="83:31"><expr pos:start="83:25" pos:end="83:31"><name pos:start="83:25" pos:end="83:27">src</name> <operator pos:start="83:29" pos:end="83:29">+</operator> <name pos:start="83:31" pos:end="83:31">i</name></expr></argument>, <argument pos:start="83:34" pos:end="83:38"><expr pos:start="83:34" pos:end="83:38"><name pos:start="83:34" pos:end="83:38">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:19"><expr pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:9">d</name> <operator pos:start="85:11" pos:end="85:12">+=</operator> <name pos:start="85:14" pos:end="85:18">count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:19"><expr pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:9">i</name> <operator pos:start="87:11" pos:end="87:12">+=</operator> <name pos:start="87:14" pos:end="87:18">count</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><name pos:start="93:12" pos:end="93:12">d</name></expr>;</return>

</block_content>}</block></function>
</unit>
