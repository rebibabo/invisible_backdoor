<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14003.c" pos:tabs="8"><function pos:start="1:1" pos:end="291:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">old_codec37</name><parameter_list pos:start="1:23" pos:end="3:55">(<parameter pos:start="1:24" pos:end="1:44"><decl pos:start="1:24" pos:end="1:44"><type pos:start="1:24" pos:end="1:44"><name pos:start="1:24" pos:end="1:39">SANMVideoContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:53"><decl pos:start="1:47" pos:end="1:53"><type pos:start="1:47" pos:end="1:53"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:53">top</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:31"><decl pos:start="3:24" pos:end="3:31"><type pos:start="3:24" pos:end="3:31"><name pos:start="3:24" pos:end="3:26">int</name></type> <name pos:start="3:28" pos:end="3:31">left</name></decl></parameter>, <parameter pos:start="3:34" pos:end="3:42"><decl pos:start="3:34" pos:end="3:42"><type pos:start="3:34" pos:end="3:42"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:42">width</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:54"><decl pos:start="3:45" pos:end="3:54"><type pos:start="3:45" pos:end="3:54"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:54">height</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="291:1">{<block_content pos:start="7:5" pos:end="289:13">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">stride</name> <init pos:start="7:16" pos:end="7:27">= <expr pos:start="7:18" pos:end="7:27"><name pos:start="7:18" pos:end="7:27"><name pos:start="7:18" pos:end="7:20">ctx</name><operator pos:start="7:21" pos:end="7:22">-&gt;</operator><name pos:start="7:23" pos:end="7:27">pitch</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:15">k</name></decl>, <decl pos:start="9:18" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:18">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">skip_run</name> <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">compr</name></decl>, <decl pos:start="13:16" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:16" pos:end="13:20">mvoff</name></decl>, <decl pos:start="13:23" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:25">seq</name></decl>, <decl pos:start="13:28" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:28" pos:end="13:32">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:25">decoded_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:16">dst</name></decl>, <decl pos:start="17:19" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:13"><modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:23">prev</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:50"><expr pos:start="21:5" pos:end="21:49"><name pos:start="21:5" pos:end="21:9">compr</name>        <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="21:49"><name pos:start="21:20" pos:end="21:39">bytestream2_get_byte</name><argument_list pos:start="21:40" pos:end="21:49">(<argument pos:start="21:41" pos:end="21:48"><expr pos:start="21:41" pos:end="21:48"><operator pos:start="21:41" pos:end="21:41">&amp;</operator><name pos:start="21:42" pos:end="21:48"><name pos:start="21:42" pos:end="21:44">ctx</name><operator pos:start="21:45" pos:end="21:46">-&gt;</operator><name pos:start="21:47" pos:end="21:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:9">mvoff</name>        <operator pos:start="23:18" pos:end="23:18">=</operator> <call pos:start="23:20" pos:end="23:49"><name pos:start="23:20" pos:end="23:39">bytestream2_get_byte</name><argument_list pos:start="23:40" pos:end="23:49">(<argument pos:start="23:41" pos:end="23:48"><expr pos:start="23:41" pos:end="23:48"><operator pos:start="23:41" pos:end="23:41">&amp;</operator><name pos:start="23:42" pos:end="23:48"><name pos:start="23:42" pos:end="23:44">ctx</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:50"><expr pos:start="25:5" pos:end="25:49"><name pos:start="25:5" pos:end="25:7">seq</name>          <operator pos:start="25:18" pos:end="25:18">=</operator> <call pos:start="25:20" pos:end="25:49"><name pos:start="25:20" pos:end="25:39">bytestream2_get_le16</name><argument_list pos:start="25:40" pos:end="25:49">(<argument pos:start="25:41" pos:end="25:48"><expr pos:start="25:41" pos:end="25:48"><operator pos:start="25:41" pos:end="25:41">&amp;</operator><name pos:start="25:42" pos:end="25:48"><name pos:start="25:42" pos:end="25:44">ctx</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:50"><expr pos:start="27:5" pos:end="27:49"><name pos:start="27:5" pos:end="27:16">decoded_size</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:49"><name pos:start="27:20" pos:end="27:39">bytestream2_get_le32</name><argument_list pos:start="27:40" pos:end="27:49">(<argument pos:start="27:41" pos:end="27:48"><expr pos:start="27:41" pos:end="27:48"><operator pos:start="27:41" pos:end="27:41">&amp;</operator><name pos:start="27:42" pos:end="27:48"><name pos:start="27:42" pos:end="27:44">ctx</name><operator pos:start="27:45" pos:end="27:46">-&gt;</operator><name pos:start="27:47" pos:end="27:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><call pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:20">bytestream2_skip</name><argument_list pos:start="29:21" pos:end="29:33">(<argument pos:start="29:22" pos:end="29:29"><expr pos:start="29:22" pos:end="29:29"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:29"><name pos:start="29:23" pos:end="29:25">ctx</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:29">gb</name></name></expr></argument>, <argument pos:start="29:32" pos:end="29:32"><expr pos:start="29:32" pos:end="29:32"><literal type="number" pos:start="29:32" pos:end="29:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:50"><expr pos:start="31:5" pos:end="31:49"><name pos:start="31:5" pos:end="31:9">flags</name>        <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:49"><name pos:start="31:20" pos:end="31:39">bytestream2_get_byte</name><argument_list pos:start="31:40" pos:end="31:49">(<argument pos:start="31:41" pos:end="31:48"><expr pos:start="31:41" pos:end="31:48"><operator pos:start="31:41" pos:end="31:41">&amp;</operator><name pos:start="31:42" pos:end="31:48"><name pos:start="31:42" pos:end="31:44">ctx</name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><call pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:20">bytestream2_skip</name><argument_list pos:start="33:21" pos:end="33:33">(<argument pos:start="33:22" pos:end="33:29"><expr pos:start="33:22" pos:end="33:29"><operator pos:start="33:22" pos:end="33:22">&amp;</operator><name pos:start="33:23" pos:end="33:29"><name pos:start="33:23" pos:end="33:25">ctx</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:29">gb</name></name></expr></argument>, <argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><literal type="number" pos:start="33:32" pos:end="33:32">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:61">(<expr pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:20">decoded_size</name> <operator pos:start="37:22" pos:end="37:22">&gt;</operator> <name pos:start="37:24" pos:end="37:29">height</name> <operator pos:start="37:31" pos:end="37:31">*</operator> <name pos:start="37:33" pos:end="37:38">stride</name> <operator pos:start="37:40" pos:end="37:40">-</operator> <name pos:start="37:42" pos:end="37:45">left</name> <operator pos:start="37:47" pos:end="37:47">-</operator> <name pos:start="37:49" pos:end="37:51">top</name> <operator pos:start="37:53" pos:end="37:53">*</operator> <name pos:start="37:55" pos:end="37:60">stride</name></expr>)</condition> <block pos:start="37:63" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:74">

        <expr_stmt pos:start="39:9" pos:end="39:61"><expr pos:start="39:9" pos:end="39:60"><name pos:start="39:9" pos:end="39:20">decoded_size</name> <operator pos:start="39:22" pos:end="39:22">=</operator> <name pos:start="39:24" pos:end="39:29">height</name> <operator pos:start="39:31" pos:end="39:31">*</operator> <name pos:start="39:33" pos:end="39:38">stride</name> <operator pos:start="39:40" pos:end="39:40">-</operator> <name pos:start="39:42" pos:end="39:45">left</name> <operator pos:start="39:47" pos:end="39:47">-</operator> <name pos:start="39:49" pos:end="39:51">top</name> <operator pos:start="39:53" pos:end="39:53">*</operator> <name pos:start="39:55" pos:end="39:60">stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:74"><expr pos:start="41:9" pos:end="41:73"><call pos:start="41:9" pos:end="41:73"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:73">(<argument pos:start="41:16" pos:end="41:25"><expr pos:start="41:16" pos:end="41:25"><name pos:start="41:16" pos:end="41:25"><name pos:start="41:16" pos:end="41:18">ctx</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:25">avctx</name></name></expr></argument>, <argument pos:start="41:28" pos:end="41:41"><expr pos:start="41:28" pos:end="41:41"><name pos:start="41:28" pos:end="41:41">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="41:44" pos:end="41:72"><expr pos:start="41:44" pos:end="41:72"><literal type="string" pos:start="41:44" pos:end="41:72">"decoded size is too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:25"><expr pos:start="47:5" pos:end="47:24"><name pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:7">ctx</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:20">rotate_code</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="53:28"><if pos:start="51:5" pos:end="53:28">if <condition pos:start="51:8" pos:end="51:61">(<expr pos:start="51:9" pos:end="51:60"><operator pos:start="51:9" pos:end="51:9">(</operator><operator pos:start="51:10" pos:end="51:10">(</operator><name pos:start="51:11" pos:end="51:13">seq</name> <operator pos:start="51:15" pos:end="51:15">&amp;</operator> <literal type="number" pos:start="51:17" pos:end="51:17">1</literal><operator pos:start="51:18" pos:end="51:18">)</operator> <operator pos:start="51:20" pos:end="51:21">||</operator> <operator pos:start="51:23" pos:end="51:23">!</operator><operator pos:start="51:24" pos:end="51:24">(</operator><name pos:start="51:25" pos:end="51:29">flags</name> <operator pos:start="51:31" pos:end="51:31">&amp;</operator> <literal type="number" pos:start="51:33" pos:end="51:33">1</literal><operator pos:start="51:34" pos:end="51:34">)</operator><operator pos:start="51:35" pos:end="51:35">)</operator> <operator pos:start="51:37" pos:end="51:38">&amp;&amp;</operator> <operator pos:start="51:40" pos:end="51:40">(</operator><name pos:start="51:41" pos:end="51:45">compr</name> <operator pos:start="51:47" pos:end="51:48">&amp;&amp;</operator> <name pos:start="51:50" pos:end="51:54">compr</name> <operator pos:start="51:56" pos:end="51:57">!=</operator> <literal type="number" pos:start="51:59" pos:end="51:59">2</literal><operator pos:start="51:60" pos:end="51:60">)</operator></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:28"><block_content pos:start="53:9" pos:end="53:28">

        <expr_stmt pos:start="53:9" pos:end="53:28"><expr pos:start="53:9" pos:end="53:27"><call pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:19">rotate_bufs</name><argument_list pos:start="53:20" pos:end="53:27">(<argument pos:start="53:21" pos:end="53:23"><expr pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:23">ctx</name></expr></argument>, <argument pos:start="53:26" pos:end="53:26"><expr pos:start="53:26" pos:end="53:26"><literal type="number" pos:start="53:26" pos:end="53:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:55"><expr pos:start="57:5" pos:end="57:54"><name pos:start="57:5" pos:end="57:7">dst</name>  <operator pos:start="57:10" pos:end="57:10">=</operator> <operator pos:start="57:12" pos:end="57:12">(</operator><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:20">uint8_t</name><operator pos:start="57:21" pos:end="57:21">*</operator><operator pos:start="57:22" pos:end="57:22">)</operator><name pos:start="57:23" pos:end="57:31"><name pos:start="57:23" pos:end="57:25">ctx</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:31">frm0</name></name><operator pos:start="57:32" pos:end="57:32">)</operator> <operator pos:start="57:34" pos:end="57:34">+</operator> <name pos:start="57:36" pos:end="57:39">left</name> <operator pos:start="57:41" pos:end="57:41">+</operator> <name pos:start="57:43" pos:end="57:45">top</name> <operator pos:start="57:47" pos:end="57:47">*</operator> <name pos:start="57:49" pos:end="57:54">stride</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:55"><expr pos:start="59:5" pos:end="59:54"><name pos:start="59:5" pos:end="59:8">prev</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <operator pos:start="59:12" pos:end="59:12">(</operator><operator pos:start="59:13" pos:end="59:13">(</operator><name pos:start="59:14" pos:end="59:20">uint8_t</name><operator pos:start="59:21" pos:end="59:21">*</operator><operator pos:start="59:22" pos:end="59:22">)</operator><name pos:start="59:23" pos:end="59:31"><name pos:start="59:23" pos:end="59:25">ctx</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:31">frm2</name></name><operator pos:start="59:32" pos:end="59:32">)</operator> <operator pos:start="59:34" pos:end="59:34">+</operator> <name pos:start="59:36" pos:end="59:39">left</name> <operator pos:start="59:41" pos:end="59:41">+</operator> <name pos:start="59:43" pos:end="59:45">top</name> <operator pos:start="59:47" pos:end="59:47">*</operator> <name pos:start="59:49" pos:end="59:54">stride</name></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:18">(<expr pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:13">mvoff</name> <operator pos:start="63:15" pos:end="63:15">&gt;</operator> <literal type="number" pos:start="63:17" pos:end="63:17">2</literal></expr>)</condition> <block pos:start="63:20" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:35">

        <expr_stmt pos:start="65:9" pos:end="65:82"><expr pos:start="65:9" pos:end="65:81"><call pos:start="65:9" pos:end="65:81"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:81">(<argument pos:start="65:16" pos:end="65:25"><expr pos:start="65:16" pos:end="65:25"><name pos:start="65:16" pos:end="65:25"><name pos:start="65:16" pos:end="65:18">ctx</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:25">avctx</name></name></expr></argument>, <argument pos:start="65:28" pos:end="65:39"><expr pos:start="65:28" pos:end="65:39"><name pos:start="65:28" pos:end="65:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:42" pos:end="65:73"><expr pos:start="65:42" pos:end="65:73"><literal type="string" pos:start="65:42" pos:end="65:73">"invalid motion base value %d\n"</literal></expr></argument>, <argument pos:start="65:76" pos:end="65:80"><expr pos:start="65:76" pos:end="65:80"><name pos:start="65:76" pos:end="65:80">mvoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:35">return <expr pos:start="67:16" pos:end="67:34"><name pos:start="67:16" pos:end="67:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:51"><expr pos:start="71:5" pos:end="71:50"><call pos:start="71:5" pos:end="71:50"><name pos:start="71:5" pos:end="71:11">av_dlog</name><argument_list pos:start="71:12" pos:end="71:50">(<argument pos:start="71:13" pos:end="71:22"><expr pos:start="71:13" pos:end="71:22"><name pos:start="71:13" pos:end="71:22"><name pos:start="71:13" pos:end="71:15">ctx</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:22">avctx</name></name></expr></argument>, <argument pos:start="71:25" pos:end="71:42"><expr pos:start="71:25" pos:end="71:42"><literal type="string" pos:start="71:25" pos:end="71:42">"compression %d\n"</literal></expr></argument>, <argument pos:start="71:45" pos:end="71:49"><expr pos:start="71:45" pos:end="71:49"><name pos:start="71:45" pos:end="71:49">compr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="73:5" pos:end="285:5">switch <condition pos:start="73:12" pos:end="73:18">(<expr pos:start="73:13" pos:end="73:17"><name pos:start="73:13" pos:end="73:17">compr</name></expr>)</condition> <block pos:start="73:20" pos:end="285:5">{<block_content pos:start="75:5" pos:end="283:36">

    <case pos:start="75:5" pos:end="75:11">case <expr pos:start="75:10" pos:end="75:10"><literal type="number" pos:start="75:10" pos:end="75:10">0</literal></expr>:</case>

        <for pos:start="77:9" pos:end="83:9">for <control pos:start="77:13" pos:end="77:36">(<init pos:start="77:14" pos:end="77:19"><expr pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:14">i</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</init> <condition pos:start="77:21" pos:end="77:31"><expr pos:start="77:21" pos:end="77:30"><name pos:start="77:21" pos:end="77:21">i</name> <operator pos:start="77:23" pos:end="77:23">&lt;</operator> <name pos:start="77:25" pos:end="77:30">height</name></expr>;</condition> <incr pos:start="77:33" pos:end="77:35"><expr pos:start="77:33" pos:end="77:35"><name pos:start="77:33" pos:end="77:33">i</name><operator pos:start="77:34" pos:end="77:35">++</operator></expr></incr>)</control> <block pos:start="77:38" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:26">

            <expr_stmt pos:start="79:13" pos:end="79:57"><expr pos:start="79:13" pos:end="79:56"><call pos:start="79:13" pos:end="79:56"><name pos:start="79:13" pos:end="79:34">bytestream2_get_buffer</name><argument_list pos:start="79:35" pos:end="79:56">(<argument pos:start="79:36" pos:end="79:43"><expr pos:start="79:36" pos:end="79:43"><operator pos:start="79:36" pos:end="79:36">&amp;</operator><name pos:start="79:37" pos:end="79:43"><name pos:start="79:37" pos:end="79:39">ctx</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:43">gb</name></name></expr></argument>, <argument pos:start="79:46" pos:end="79:48"><expr pos:start="79:46" pos:end="79:48"><name pos:start="79:46" pos:end="79:48">dst</name></expr></argument>, <argument pos:start="79:51" pos:end="79:55"><expr pos:start="79:51" pos:end="79:55"><name pos:start="79:51" pos:end="79:55">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:26"><expr pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:15">dst</name> <operator pos:start="81:17" pos:end="81:18">+=</operator> <name pos:start="81:20" pos:end="81:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="85:9" pos:end="85:51"><expr pos:start="85:9" pos:end="85:50"><call pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:14">memset</name><argument_list pos:start="85:15" pos:end="85:50">(<argument pos:start="85:16" pos:end="85:24"><expr pos:start="85:16" pos:end="85:24"><name pos:start="85:16" pos:end="85:24"><name pos:start="85:16" pos:end="85:18">ctx</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:24">frm1</name></name></expr></argument>, <argument pos:start="85:27" pos:end="85:27"><expr pos:start="85:27" pos:end="85:27"><literal type="number" pos:start="85:27" pos:end="85:27">0</literal></expr></argument>, <argument pos:start="85:30" pos:end="85:49"><expr pos:start="85:30" pos:end="85:49"><name pos:start="85:30" pos:end="85:40"><name pos:start="85:30" pos:end="85:32">ctx</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:40">height</name></name> <operator pos:start="85:42" pos:end="85:42">*</operator> <name pos:start="85:44" pos:end="85:49">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:51"><expr pos:start="87:9" pos:end="87:50"><call pos:start="87:9" pos:end="87:50"><name pos:start="87:9" pos:end="87:14">memset</name><argument_list pos:start="87:15" pos:end="87:50">(<argument pos:start="87:16" pos:end="87:24"><expr pos:start="87:16" pos:end="87:24"><name pos:start="87:16" pos:end="87:24"><name pos:start="87:16" pos:end="87:18">ctx</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:24">frm2</name></name></expr></argument>, <argument pos:start="87:27" pos:end="87:27"><expr pos:start="87:27" pos:end="87:27"><literal type="number" pos:start="87:27" pos:end="87:27">0</literal></expr></argument>, <argument pos:start="87:30" pos:end="87:49"><expr pos:start="87:30" pos:end="87:49"><name pos:start="87:30" pos:end="87:40"><name pos:start="87:30" pos:end="87:32">ctx</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:40">height</name></name> <operator pos:start="87:42" pos:end="87:42">*</operator> <name pos:start="87:44" pos:end="87:49">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:11">case <expr pos:start="91:10" pos:end="91:10"><literal type="number" pos:start="91:10" pos:end="91:10">2</literal></expr>:</case>

        <if_stmt pos:start="93:9" pos:end="95:39"><if pos:start="93:9" pos:end="95:39">if <condition pos:start="93:12" pos:end="93:47">(<expr pos:start="93:13" pos:end="93:46"><call pos:start="93:13" pos:end="93:46"><name pos:start="93:13" pos:end="93:22">rle_decode</name><argument_list pos:start="93:23" pos:end="93:46">(<argument pos:start="93:24" pos:end="93:26"><expr pos:start="93:24" pos:end="93:26"><name pos:start="93:24" pos:end="93:26">ctx</name></expr></argument>, <argument pos:start="93:29" pos:end="93:31"><expr pos:start="93:29" pos:end="93:31"><name pos:start="93:29" pos:end="93:31">dst</name></expr></argument>, <argument pos:start="93:34" pos:end="93:45"><expr pos:start="93:34" pos:end="93:45"><name pos:start="93:34" pos:end="93:45">decoded_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:39"><block_content pos:start="95:13" pos:end="95:39">

            <return pos:start="95:13" pos:end="95:39">return <expr pos:start="95:20" pos:end="95:38"><name pos:start="95:20" pos:end="95:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:45"><expr pos:start="97:9" pos:end="97:44"><call pos:start="97:9" pos:end="97:44"><name pos:start="97:9" pos:end="97:14">memset</name><argument_list pos:start="97:15" pos:end="97:44">(<argument pos:start="97:16" pos:end="97:24"><expr pos:start="97:16" pos:end="97:24"><name pos:start="97:16" pos:end="97:24"><name pos:start="97:16" pos:end="97:18">ctx</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:24">frm1</name></name></expr></argument>, <argument pos:start="97:27" pos:end="97:27"><expr pos:start="97:27" pos:end="97:27"><literal type="number" pos:start="97:27" pos:end="97:27">0</literal></expr></argument>, <argument pos:start="97:30" pos:end="97:43"><expr pos:start="97:30" pos:end="97:43"><name pos:start="97:30" pos:end="97:43"><name pos:start="97:30" pos:end="97:32">ctx</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:43">frm1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:45"><expr pos:start="99:9" pos:end="99:44"><call pos:start="99:9" pos:end="99:44"><name pos:start="99:9" pos:end="99:14">memset</name><argument_list pos:start="99:15" pos:end="99:44">(<argument pos:start="99:16" pos:end="99:24"><expr pos:start="99:16" pos:end="99:24"><name pos:start="99:16" pos:end="99:24"><name pos:start="99:16" pos:end="99:18">ctx</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:24">frm2</name></name></expr></argument>, <argument pos:start="99:27" pos:end="99:27"><expr pos:start="99:27" pos:end="99:27"><literal type="number" pos:start="99:27" pos:end="99:27">0</literal></expr></argument>, <argument pos:start="99:30" pos:end="99:43"><expr pos:start="99:30" pos:end="99:43"><name pos:start="99:30" pos:end="99:43"><name pos:start="99:30" pos:end="99:32">ctx</name><operator pos:start="99:33" pos:end="99:34">-&gt;</operator><name pos:start="99:35" pos:end="99:43">frm2_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:11">case <expr pos:start="103:10" pos:end="103:10"><literal type="number" pos:start="103:10" pos:end="103:10">3</literal></expr>:</case>

    <case pos:start="105:5" pos:end="105:11">case <expr pos:start="105:10" pos:end="105:10"><literal type="number" pos:start="105:10" pos:end="105:10">4</literal></expr>:</case>

        <if_stmt pos:start="107:9" pos:end="273:9"><if pos:start="107:9" pos:end="209:9">if <condition pos:start="107:12" pos:end="107:22">(<expr pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:17">flags</name> <operator pos:start="107:19" pos:end="107:19">&amp;</operator> <literal type="number" pos:start="107:21" pos:end="107:21">4</literal></expr>)</condition> <block pos:start="107:24" pos:end="209:9">{<block_content pos:start="109:13" pos:end="207:13">

            <for pos:start="109:13" pos:end="207:13">for <control pos:start="109:17" pos:end="109:43">(<init pos:start="109:18" pos:end="109:23"><expr pos:start="109:18" pos:end="109:22"><name pos:start="109:18" pos:end="109:18">j</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</init> <condition pos:start="109:25" pos:end="109:35"><expr pos:start="109:25" pos:end="109:34"><name pos:start="109:25" pos:end="109:25">j</name> <operator pos:start="109:27" pos:end="109:27">&lt;</operator> <name pos:start="109:29" pos:end="109:34">height</name></expr>;</condition> <incr pos:start="109:37" pos:end="109:42"><expr pos:start="109:37" pos:end="109:42"><name pos:start="109:37" pos:end="109:37">j</name> <operator pos:start="109:39" pos:end="109:40">+=</operator> <literal type="number" pos:start="109:42" pos:end="109:42">4</literal></expr></incr>)</control> <block pos:start="109:45" pos:end="207:13">{<block_content pos:start="111:17" pos:end="205:35">

                <for pos:start="111:17" pos:end="201:17">for <control pos:start="111:21" pos:end="111:46">(<init pos:start="111:22" pos:end="111:27"><expr pos:start="111:22" pos:end="111:26"><name pos:start="111:22" pos:end="111:22">i</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">0</literal></expr>;</init> <condition pos:start="111:29" pos:end="111:38"><expr pos:start="111:29" pos:end="111:37"><name pos:start="111:29" pos:end="111:29">i</name> <operator pos:start="111:31" pos:end="111:31">&lt;</operator> <name pos:start="111:33" pos:end="111:37">width</name></expr>;</condition> <incr pos:start="111:40" pos:end="111:45"><expr pos:start="111:40" pos:end="111:45"><name pos:start="111:40" pos:end="111:40">i</name> <operator pos:start="111:42" pos:end="111:43">+=</operator> <literal type="number" pos:start="111:45" pos:end="111:45">4</literal></expr></incr>)</control> <block pos:start="111:48" pos:end="201:17">{<block_content pos:start="113:21" pos:end="199:21">

                    <decl_stmt pos:start="113:21" pos:end="113:29"><decl pos:start="113:21" pos:end="113:28"><type pos:start="113:21" pos:end="113:23"><name pos:start="113:21" pos:end="113:23">int</name></type> <name pos:start="113:25" pos:end="113:28">code</name></decl>;</decl_stmt>

                    <if_stmt pos:start="115:21" pos:end="123:21"><if pos:start="115:21" pos:end="123:21">if <condition pos:start="115:24" pos:end="115:33">(<expr pos:start="115:25" pos:end="115:32"><name pos:start="115:25" pos:end="115:32">skip_run</name></expr>)</condition> <block pos:start="115:35" pos:end="123:21">{<block_content pos:start="117:25" pos:end="121:33">

                        <expr_stmt pos:start="117:25" pos:end="117:35"><expr pos:start="117:25" pos:end="117:34"><name pos:start="117:25" pos:end="117:32">skip_run</name><operator pos:start="117:33" pos:end="117:34">--</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="119:25" pos:end="119:74"><expr pos:start="119:25" pos:end="119:73"><call pos:start="119:25" pos:end="119:73"><name pos:start="119:25" pos:end="119:35">copy_block4</name><argument_list pos:start="119:36" pos:end="119:73">(<argument pos:start="119:37" pos:end="119:43"><expr pos:start="119:37" pos:end="119:43"><name pos:start="119:37" pos:end="119:39">dst</name> <operator pos:start="119:41" pos:end="119:41">+</operator> <name pos:start="119:43" pos:end="119:43">i</name></expr></argument>, <argument pos:start="119:46" pos:end="119:53"><expr pos:start="119:46" pos:end="119:53"><name pos:start="119:46" pos:end="119:49">prev</name> <operator pos:start="119:51" pos:end="119:51">+</operator> <name pos:start="119:53" pos:end="119:53">i</name></expr></argument>, <argument pos:start="119:56" pos:end="119:61"><expr pos:start="119:56" pos:end="119:61"><name pos:start="119:56" pos:end="119:61">stride</name></expr></argument>, <argument pos:start="119:64" pos:end="119:69"><expr pos:start="119:64" pos:end="119:69"><name pos:start="119:64" pos:end="119:69">stride</name></expr></argument>, <argument pos:start="119:72" pos:end="119:72"><expr pos:start="119:72" pos:end="119:72"><literal type="number" pos:start="119:72" pos:end="119:72">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <continue pos:start="121:25" pos:end="121:33">continue;</continue>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="125:21" pos:end="127:51"><if pos:start="125:21" pos:end="127:51">if <condition pos:start="125:24" pos:end="125:65">(<expr pos:start="125:25" pos:end="125:64"><call pos:start="125:25" pos:end="125:60"><name pos:start="125:25" pos:end="125:50">bytestream2_get_bytes_left</name><argument_list pos:start="125:51" pos:end="125:60">(<argument pos:start="125:52" pos:end="125:59"><expr pos:start="125:52" pos:end="125:59"><operator pos:start="125:52" pos:end="125:52">&amp;</operator><name pos:start="125:53" pos:end="125:59"><name pos:start="125:53" pos:end="125:55">ctx</name><operator pos:start="125:56" pos:end="125:57">-&gt;</operator><name pos:start="125:58" pos:end="125:59">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:62" pos:end="125:62">&lt;</operator> <literal type="number" pos:start="125:64" pos:end="125:64">1</literal></expr>)</condition><block type="pseudo" pos:start="127:25" pos:end="127:51"><block_content pos:start="127:25" pos:end="127:51">

                        <return pos:start="127:25" pos:end="127:51">return <expr pos:start="127:32" pos:end="127:50"><name pos:start="127:32" pos:end="127:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:59"><expr pos:start="129:21" pos:end="129:58"><name pos:start="129:21" pos:end="129:24">code</name> <operator pos:start="129:26" pos:end="129:26">=</operator> <call pos:start="129:28" pos:end="129:58"><name pos:start="129:28" pos:end="129:48">bytestream2_get_byteu</name><argument_list pos:start="129:49" pos:end="129:58">(<argument pos:start="129:50" pos:end="129:57"><expr pos:start="129:50" pos:end="129:57"><operator pos:start="129:50" pos:end="129:50">&amp;</operator><name pos:start="129:51" pos:end="129:57"><name pos:start="129:51" pos:end="129:53">ctx</name><operator pos:start="129:54" pos:end="129:55">-&gt;</operator><name pos:start="129:56" pos:end="129:57">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="131:21" pos:end="199:21">switch <condition pos:start="131:28" pos:end="131:33">(<expr pos:start="131:29" pos:end="131:32"><name pos:start="131:29" pos:end="131:32">code</name></expr>)</condition> <block pos:start="131:35" pos:end="199:21">{<block_content pos:start="133:21" pos:end="197:25">

                    <case pos:start="133:21" pos:end="133:30">case <expr pos:start="133:26" pos:end="133:29"><literal type="number" pos:start="133:26" pos:end="133:29">0xFF</literal></expr>:</case>

                        <if_stmt pos:start="135:25" pos:end="137:55"><if pos:start="135:25" pos:end="137:55">if <condition pos:start="135:28" pos:end="135:70">(<expr pos:start="135:29" pos:end="135:69"><call pos:start="135:29" pos:end="135:64"><name pos:start="135:29" pos:end="135:54">bytestream2_get_bytes_left</name><argument_list pos:start="135:55" pos:end="135:64">(<argument pos:start="135:56" pos:end="135:63"><expr pos:start="135:56" pos:end="135:63"><operator pos:start="135:56" pos:end="135:56">&amp;</operator><name pos:start="135:57" pos:end="135:63"><name pos:start="135:57" pos:end="135:59">ctx</name><operator pos:start="135:60" pos:end="135:61">-&gt;</operator><name pos:start="135:62" pos:end="135:63">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="135:66" pos:end="135:66">&lt;</operator> <literal type="number" pos:start="135:68" pos:end="135:69">16</literal></expr>)</condition><block type="pseudo" pos:start="137:29" pos:end="137:55"><block_content pos:start="137:29" pos:end="137:55">

                            <return pos:start="137:29" pos:end="137:55">return <expr pos:start="137:36" pos:end="137:54"><name pos:start="137:36" pos:end="137:54">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                        <for pos:start="139:25" pos:end="141:87">for <control pos:start="139:29" pos:end="139:47">(<init pos:start="139:30" pos:end="139:35"><expr pos:start="139:30" pos:end="139:34"><name pos:start="139:30" pos:end="139:30">k</name> <operator pos:start="139:32" pos:end="139:32">=</operator> <literal type="number" pos:start="139:34" pos:end="139:34">0</literal></expr>;</init> <condition pos:start="139:37" pos:end="139:42"><expr pos:start="139:37" pos:end="139:41"><name pos:start="139:37" pos:end="139:37">k</name> <operator pos:start="139:39" pos:end="139:39">&lt;</operator> <literal type="number" pos:start="139:41" pos:end="139:41">4</literal></expr>;</condition> <incr pos:start="139:44" pos:end="139:46"><expr pos:start="139:44" pos:end="139:46"><name pos:start="139:44" pos:end="139:44">k</name><operator pos:start="139:45" pos:end="139:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="141:29" pos:end="141:87"><block_content pos:start="141:29" pos:end="141:87">

                            <expr_stmt pos:start="141:29" pos:end="141:87"><expr pos:start="141:29" pos:end="141:86"><call pos:start="141:29" pos:end="141:86"><name pos:start="141:29" pos:end="141:51">bytestream2_get_bufferu</name><argument_list pos:start="141:52" pos:end="141:86">(<argument pos:start="141:53" pos:end="141:60"><expr pos:start="141:53" pos:end="141:60"><operator pos:start="141:53" pos:end="141:53">&amp;</operator><name pos:start="141:54" pos:end="141:60"><name pos:start="141:54" pos:end="141:56">ctx</name><operator pos:start="141:57" pos:end="141:58">-&gt;</operator><name pos:start="141:59" pos:end="141:60">gb</name></name></expr></argument>, <argument pos:start="141:63" pos:end="141:82"><expr pos:start="141:63" pos:end="141:82"><name pos:start="141:63" pos:end="141:65">dst</name> <operator pos:start="141:67" pos:end="141:67">+</operator> <name pos:start="141:69" pos:end="141:69">i</name> <operator pos:start="141:71" pos:end="141:71">+</operator> <name pos:start="141:73" pos:end="141:73">k</name> <operator pos:start="141:75" pos:end="141:75">*</operator> <name pos:start="141:77" pos:end="141:82">stride</name></expr></argument>, <argument pos:start="141:85" pos:end="141:85"><expr pos:start="141:85" pos:end="141:85"><literal type="number" pos:start="141:85" pos:end="141:85">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        <break pos:start="143:25" pos:end="143:30">break;</break>

                    <case pos:start="145:21" pos:end="145:30">case <expr pos:start="145:26" pos:end="145:29"><literal type="number" pos:start="145:26" pos:end="145:29">0xFE</literal></expr>:</case>

                        <if_stmt pos:start="147:25" pos:end="149:55"><if pos:start="147:25" pos:end="149:55">if <condition pos:start="147:28" pos:end="147:69">(<expr pos:start="147:29" pos:end="147:68"><call pos:start="147:29" pos:end="147:64"><name pos:start="147:29" pos:end="147:54">bytestream2_get_bytes_left</name><argument_list pos:start="147:55" pos:end="147:64">(<argument pos:start="147:56" pos:end="147:63"><expr pos:start="147:56" pos:end="147:63"><operator pos:start="147:56" pos:end="147:56">&amp;</operator><name pos:start="147:57" pos:end="147:63"><name pos:start="147:57" pos:end="147:59">ctx</name><operator pos:start="147:60" pos:end="147:61">-&gt;</operator><name pos:start="147:62" pos:end="147:63">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="147:66" pos:end="147:66">&lt;</operator> <literal type="number" pos:start="147:68" pos:end="147:68">4</literal></expr>)</condition><block type="pseudo" pos:start="149:29" pos:end="149:55"><block_content pos:start="149:29" pos:end="149:55">

                            <return pos:start="149:29" pos:end="149:55">return <expr pos:start="149:36" pos:end="149:54"><name pos:start="149:36" pos:end="149:54">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                        <for pos:start="151:25" pos:end="153:93">for <control pos:start="151:29" pos:end="151:47">(<init pos:start="151:30" pos:end="151:35"><expr pos:start="151:30" pos:end="151:34"><name pos:start="151:30" pos:end="151:30">k</name> <operator pos:start="151:32" pos:end="151:32">=</operator> <literal type="number" pos:start="151:34" pos:end="151:34">0</literal></expr>;</init> <condition pos:start="151:37" pos:end="151:42"><expr pos:start="151:37" pos:end="151:41"><name pos:start="151:37" pos:end="151:37">k</name> <operator pos:start="151:39" pos:end="151:39">&lt;</operator> <literal type="number" pos:start="151:41" pos:end="151:41">4</literal></expr>;</condition> <incr pos:start="151:44" pos:end="151:46"><expr pos:start="151:44" pos:end="151:46"><name pos:start="151:44" pos:end="151:44">k</name><operator pos:start="151:45" pos:end="151:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="153:29" pos:end="153:93"><block_content pos:start="153:29" pos:end="153:93">

                            <expr_stmt pos:start="153:29" pos:end="153:93"><expr pos:start="153:29" pos:end="153:92"><call pos:start="153:29" pos:end="153:92"><name pos:start="153:29" pos:end="153:34">memset</name><argument_list pos:start="153:35" pos:end="153:92">(<argument pos:start="153:36" pos:end="153:55"><expr pos:start="153:36" pos:end="153:55"><name pos:start="153:36" pos:end="153:38">dst</name> <operator pos:start="153:40" pos:end="153:40">+</operator> <name pos:start="153:42" pos:end="153:42">i</name> <operator pos:start="153:44" pos:end="153:44">+</operator> <name pos:start="153:46" pos:end="153:46">k</name> <operator pos:start="153:48" pos:end="153:48">*</operator> <name pos:start="153:50" pos:end="153:55">stride</name></expr></argument>, <argument pos:start="153:58" pos:end="153:88"><expr pos:start="153:58" pos:end="153:88"><call pos:start="153:58" pos:end="153:88"><name pos:start="153:58" pos:end="153:78">bytestream2_get_byteu</name><argument_list pos:start="153:79" pos:end="153:88">(<argument pos:start="153:80" pos:end="153:87"><expr pos:start="153:80" pos:end="153:87"><operator pos:start="153:80" pos:end="153:80">&amp;</operator><name pos:start="153:81" pos:end="153:87"><name pos:start="153:81" pos:end="153:83">ctx</name><operator pos:start="153:84" pos:end="153:85">-&gt;</operator><name pos:start="153:86" pos:end="153:87">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:91" pos:end="153:91"><expr pos:start="153:91" pos:end="153:91"><literal type="number" pos:start="153:91" pos:end="153:91">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        <break pos:start="155:25" pos:end="155:30">break;</break>

                    <case pos:start="157:21" pos:end="157:30">case <expr pos:start="157:26" pos:end="157:29"><literal type="number" pos:start="157:26" pos:end="157:29">0xFD</literal></expr>:</case>

                        <if_stmt pos:start="159:25" pos:end="161:55"><if pos:start="159:25" pos:end="161:55">if <condition pos:start="159:28" pos:end="159:69">(<expr pos:start="159:29" pos:end="159:68"><call pos:start="159:29" pos:end="159:64"><name pos:start="159:29" pos:end="159:54">bytestream2_get_bytes_left</name><argument_list pos:start="159:55" pos:end="159:64">(<argument pos:start="159:56" pos:end="159:63"><expr pos:start="159:56" pos:end="159:63"><operator pos:start="159:56" pos:end="159:56">&amp;</operator><name pos:start="159:57" pos:end="159:63"><name pos:start="159:57" pos:end="159:59">ctx</name><operator pos:start="159:60" pos:end="159:61">-&gt;</operator><name pos:start="159:62" pos:end="159:63">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="159:66" pos:end="159:66">&lt;</operator> <literal type="number" pos:start="159:68" pos:end="159:68">1</literal></expr>)</condition><block type="pseudo" pos:start="161:29" pos:end="161:55"><block_content pos:start="161:29" pos:end="161:55">

                            <return pos:start="161:29" pos:end="161:55">return <expr pos:start="161:36" pos:end="161:54"><name pos:start="161:36" pos:end="161:54">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="163:25" pos:end="163:60"><expr pos:start="163:25" pos:end="163:59"><name pos:start="163:25" pos:end="163:25">t</name> <operator pos:start="163:27" pos:end="163:27">=</operator> <call pos:start="163:29" pos:end="163:59"><name pos:start="163:29" pos:end="163:49">bytestream2_get_byteu</name><argument_list pos:start="163:50" pos:end="163:59">(<argument pos:start="163:51" pos:end="163:58"><expr pos:start="163:51" pos:end="163:58"><operator pos:start="163:51" pos:end="163:51">&amp;</operator><name pos:start="163:52" pos:end="163:58"><name pos:start="163:52" pos:end="163:54">ctx</name><operator pos:start="163:55" pos:end="163:56">-&gt;</operator><name pos:start="163:57" pos:end="163:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="165:25" pos:end="167:63">for <control pos:start="165:29" pos:end="165:47">(<init pos:start="165:30" pos:end="165:35"><expr pos:start="165:30" pos:end="165:34"><name pos:start="165:30" pos:end="165:30">k</name> <operator pos:start="165:32" pos:end="165:32">=</operator> <literal type="number" pos:start="165:34" pos:end="165:34">0</literal></expr>;</init> <condition pos:start="165:37" pos:end="165:42"><expr pos:start="165:37" pos:end="165:41"><name pos:start="165:37" pos:end="165:37">k</name> <operator pos:start="165:39" pos:end="165:39">&lt;</operator> <literal type="number" pos:start="165:41" pos:end="165:41">4</literal></expr>;</condition> <incr pos:start="165:44" pos:end="165:46"><expr pos:start="165:44" pos:end="165:46"><name pos:start="165:44" pos:end="165:44">k</name><operator pos:start="165:45" pos:end="165:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="167:29" pos:end="167:63"><block_content pos:start="167:29" pos:end="167:63">

                            <expr_stmt pos:start="167:29" pos:end="167:63"><expr pos:start="167:29" pos:end="167:62"><call pos:start="167:29" pos:end="167:62"><name pos:start="167:29" pos:end="167:34">memset</name><argument_list pos:start="167:35" pos:end="167:62">(<argument pos:start="167:36" pos:end="167:55"><expr pos:start="167:36" pos:end="167:55"><name pos:start="167:36" pos:end="167:38">dst</name> <operator pos:start="167:40" pos:end="167:40">+</operator> <name pos:start="167:42" pos:end="167:42">i</name> <operator pos:start="167:44" pos:end="167:44">+</operator> <name pos:start="167:46" pos:end="167:46">k</name> <operator pos:start="167:48" pos:end="167:48">*</operator> <name pos:start="167:50" pos:end="167:55">stride</name></expr></argument>, <argument pos:start="167:58" pos:end="167:58"><expr pos:start="167:58" pos:end="167:58"><name pos:start="167:58" pos:end="167:58">t</name></expr></argument>, <argument pos:start="167:61" pos:end="167:61"><expr pos:start="167:61" pos:end="167:61"><literal type="number" pos:start="167:61" pos:end="167:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        <break pos:start="169:25" pos:end="169:30">break;</break>

                    <default pos:start="171:21" pos:end="171:28">default:</default>

                        <if_stmt pos:start="173:25" pos:end="197:25"><if pos:start="173:25" pos:end="183:25">if <condition pos:start="173:28" pos:end="173:48">(<expr pos:start="173:29" pos:end="173:47"><name pos:start="173:29" pos:end="173:33">compr</name> <operator pos:start="173:35" pos:end="173:36">==</operator> <literal type="number" pos:start="173:38" pos:end="173:38">4</literal> <operator pos:start="173:40" pos:end="173:41">&amp;&amp;</operator> <operator pos:start="173:43" pos:end="173:43">!</operator><name pos:start="173:44" pos:end="173:47">code</name></expr>)</condition> <block pos:start="173:50" pos:end="183:25">{<block_content pos:start="175:29" pos:end="181:35">

                            <if_stmt pos:start="175:29" pos:end="177:59"><if pos:start="175:29" pos:end="177:59">if <condition pos:start="175:32" pos:end="175:73">(<expr pos:start="175:33" pos:end="175:72"><call pos:start="175:33" pos:end="175:68"><name pos:start="175:33" pos:end="175:58">bytestream2_get_bytes_left</name><argument_list pos:start="175:59" pos:end="175:68">(<argument pos:start="175:60" pos:end="175:67"><expr pos:start="175:60" pos:end="175:67"><operator pos:start="175:60" pos:end="175:60">&amp;</operator><name pos:start="175:61" pos:end="175:67"><name pos:start="175:61" pos:end="175:63">ctx</name><operator pos:start="175:64" pos:end="175:65">-&gt;</operator><name pos:start="175:66" pos:end="175:67">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="175:70" pos:end="175:70">&lt;</operator> <literal type="number" pos:start="175:72" pos:end="175:72">1</literal></expr>)</condition><block type="pseudo" pos:start="177:33" pos:end="177:59"><block_content pos:start="177:33" pos:end="177:59">

                                <return pos:start="177:33" pos:end="177:59">return <expr pos:start="177:40" pos:end="177:58"><name pos:start="177:40" pos:end="177:58">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="179:29" pos:end="179:75"><expr pos:start="179:29" pos:end="179:74"><name pos:start="179:29" pos:end="179:36">skip_run</name> <operator pos:start="179:38" pos:end="179:38">=</operator> <call pos:start="179:40" pos:end="179:70"><name pos:start="179:40" pos:end="179:60">bytestream2_get_byteu</name><argument_list pos:start="179:61" pos:end="179:70">(<argument pos:start="179:62" pos:end="179:69"><expr pos:start="179:62" pos:end="179:69"><operator pos:start="179:62" pos:end="179:62">&amp;</operator><name pos:start="179:63" pos:end="179:69"><name pos:start="179:63" pos:end="179:65">ctx</name><operator pos:start="179:66" pos:end="179:67">-&gt;</operator><name pos:start="179:68" pos:end="179:69">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="179:72" pos:end="179:72">+</operator> <literal type="number" pos:start="179:74" pos:end="179:74">1</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="181:29" pos:end="181:35"><expr pos:start="181:29" pos:end="181:34"><name pos:start="181:29" pos:end="181:29">i</name> <operator pos:start="181:31" pos:end="181:32">-=</operator> <literal type="number" pos:start="181:34" pos:end="181:34">4</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="183:27" pos:end="197:25">else <block pos:start="183:32" pos:end="197:25">{<block_content pos:start="185:29" pos:end="195:76">

                            <decl_stmt pos:start="185:29" pos:end="185:39"><decl pos:start="185:29" pos:end="185:34"><type pos:start="185:29" pos:end="185:31"><name pos:start="185:29" pos:end="185:31">int</name></type> <name pos:start="185:33" pos:end="185:34">mx</name></decl>, <decl pos:start="185:37" pos:end="185:38"><type ref="prev" pos:start="185:29" pos:end="185:31"/><name pos:start="185:37" pos:end="185:38">my</name></decl>;</decl_stmt>



                            <expr_stmt pos:start="189:29" pos:end="189:70"><expr pos:start="189:29" pos:end="189:69"><name pos:start="189:29" pos:end="189:30">mx</name> <operator pos:start="189:32" pos:end="189:32">=</operator> <name pos:start="189:34" pos:end="189:69"><name pos:start="189:34" pos:end="189:39">c37_mv</name><index pos:start="189:40" pos:end="189:69">[<expr pos:start="189:41" pos:end="189:64"><operator pos:start="189:41" pos:end="189:41">(</operator><name pos:start="189:42" pos:end="189:46">mvoff</name> <operator pos:start="189:48" pos:end="189:48">*</operator> <literal type="number" pos:start="189:50" pos:end="189:54">255</literal> <operator pos:start="189:54" pos:end="189:54">+</operator> <name pos:start="189:56" pos:end="189:59">code</name><operator pos:start="189:60" pos:end="189:60">)</operator> <operator pos:start="189:62" pos:end="189:62">*</operator> <literal type="number" pos:start="189:64" pos:end="189:64">2</literal></expr>    ]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="191:29" pos:end="191:70"><expr pos:start="191:29" pos:end="191:69"><name pos:start="191:29" pos:end="191:30">my</name> <operator pos:start="191:32" pos:end="191:32">=</operator> <name pos:start="191:34" pos:end="191:69"><name pos:start="191:34" pos:end="191:39">c37_mv</name><index pos:start="191:40" pos:end="191:69">[<expr pos:start="191:41" pos:end="191:68"><operator pos:start="191:41" pos:end="191:41">(</operator><name pos:start="191:42" pos:end="191:46">mvoff</name> <operator pos:start="191:48" pos:end="191:48">*</operator> <literal type="number" pos:start="191:50" pos:end="191:54">255</literal> <operator pos:start="191:54" pos:end="191:54">+</operator> <name pos:start="191:56" pos:end="191:59">code</name><operator pos:start="191:60" pos:end="191:60">)</operator> <operator pos:start="191:62" pos:end="191:62">*</operator> <literal type="number" pos:start="191:64" pos:end="191:66">2</literal> <operator pos:start="191:66" pos:end="191:66">+</operator> <literal type="number" pos:start="191:68" pos:end="191:68">1</literal></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="193:29" pos:end="195:76"><expr pos:start="193:29" pos:end="195:75"><call pos:start="193:29" pos:end="195:75"><name pos:start="193:29" pos:end="193:38">codec37_mv</name><argument_list pos:start="193:39" pos:end="195:75">(<argument pos:start="193:40" pos:end="193:46"><expr pos:start="193:40" pos:end="193:46"><name pos:start="193:40" pos:end="193:42">dst</name> <operator pos:start="193:44" pos:end="193:44">+</operator> <name pos:start="193:46" pos:end="193:46">i</name></expr></argument>, <argument pos:start="193:49" pos:end="193:75"><expr pos:start="193:49" pos:end="193:75"><name pos:start="193:49" pos:end="193:52">prev</name> <operator pos:start="193:54" pos:end="193:54">+</operator> <name pos:start="193:56" pos:end="193:56">i</name> <operator pos:start="193:58" pos:end="193:58">+</operator> <name pos:start="193:60" pos:end="193:61">mx</name> <operator pos:start="193:63" pos:end="193:63">+</operator> <name pos:start="193:65" pos:end="193:66">my</name> <operator pos:start="193:68" pos:end="193:68">*</operator> <name pos:start="193:70" pos:end="193:75">stride</name></expr></argument>,

                                       <argument pos:start="195:40" pos:end="195:50"><expr pos:start="195:40" pos:end="195:50"><name pos:start="195:40" pos:end="195:50"><name pos:start="195:40" pos:end="195:42">ctx</name><operator pos:start="195:43" pos:end="195:44">-&gt;</operator><name pos:start="195:45" pos:end="195:50">height</name></name></expr></argument>, <argument pos:start="195:53" pos:end="195:58"><expr pos:start="195:53" pos:end="195:58"><name pos:start="195:53" pos:end="195:58">stride</name></expr></argument>, <argument pos:start="195:61" pos:end="195:66"><expr pos:start="195:61" pos:end="195:66"><name pos:start="195:61" pos:end="195:61">i</name> <operator pos:start="195:63" pos:end="195:63">+</operator> <name pos:start="195:65" pos:end="195:66">mx</name></expr></argument>, <argument pos:start="195:69" pos:end="195:74"><expr pos:start="195:69" pos:end="195:74"><name pos:start="195:69" pos:end="195:69">j</name> <operator pos:start="195:71" pos:end="195:71">+</operator> <name pos:start="195:73" pos:end="195:74">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></switch>

                </block_content>}</block></for>

                <expr_stmt pos:start="203:17" pos:end="203:35"><expr pos:start="203:17" pos:end="203:34"><name pos:start="203:17" pos:end="203:19">dst</name>  <operator pos:start="203:22" pos:end="203:23">+=</operator> <name pos:start="203:25" pos:end="203:30">stride</name> <operator pos:start="203:32" pos:end="203:32">*</operator> <literal type="number" pos:start="203:34" pos:end="203:34">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:35"><expr pos:start="205:17" pos:end="205:34"><name pos:start="205:17" pos:end="205:20">prev</name> <operator pos:start="205:22" pos:end="205:23">+=</operator> <name pos:start="205:25" pos:end="205:30">stride</name> <operator pos:start="205:32" pos:end="205:32">*</operator> <literal type="number" pos:start="205:34" pos:end="205:34">4</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="209:11" pos:end="273:9">else <block pos:start="209:16" pos:end="273:9">{<block_content pos:start="211:13" pos:end="271:13">

            <for pos:start="211:13" pos:end="271:13">for <control pos:start="211:17" pos:end="211:43">(<init pos:start="211:18" pos:end="211:23"><expr pos:start="211:18" pos:end="211:22"><name pos:start="211:18" pos:end="211:18">j</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <literal type="number" pos:start="211:22" pos:end="211:22">0</literal></expr>;</init> <condition pos:start="211:25" pos:end="211:35"><expr pos:start="211:25" pos:end="211:34"><name pos:start="211:25" pos:end="211:25">j</name> <operator pos:start="211:27" pos:end="211:27">&lt;</operator> <name pos:start="211:29" pos:end="211:34">height</name></expr>;</condition> <incr pos:start="211:37" pos:end="211:42"><expr pos:start="211:37" pos:end="211:42"><name pos:start="211:37" pos:end="211:37">j</name> <operator pos:start="211:39" pos:end="211:40">+=</operator> <literal type="number" pos:start="211:42" pos:end="211:42">4</literal></expr></incr>)</control> <block pos:start="211:45" pos:end="271:13">{<block_content pos:start="213:17" pos:end="269:35">

                <for pos:start="213:17" pos:end="265:17">for <control pos:start="213:21" pos:end="213:46">(<init pos:start="213:22" pos:end="213:27"><expr pos:start="213:22" pos:end="213:26"><name pos:start="213:22" pos:end="213:22">i</name> <operator pos:start="213:24" pos:end="213:24">=</operator> <literal type="number" pos:start="213:26" pos:end="213:26">0</literal></expr>;</init> <condition pos:start="213:29" pos:end="213:38"><expr pos:start="213:29" pos:end="213:37"><name pos:start="213:29" pos:end="213:29">i</name> <operator pos:start="213:31" pos:end="213:31">&lt;</operator> <name pos:start="213:33" pos:end="213:37">width</name></expr>;</condition> <incr pos:start="213:40" pos:end="213:45"><expr pos:start="213:40" pos:end="213:45"><name pos:start="213:40" pos:end="213:40">i</name> <operator pos:start="213:42" pos:end="213:43">+=</operator> <literal type="number" pos:start="213:45" pos:end="213:45">4</literal></expr></incr>)</control> <block pos:start="213:48" pos:end="265:17">{<block_content pos:start="215:21" pos:end="263:21">

                    <decl_stmt pos:start="215:21" pos:end="215:29"><decl pos:start="215:21" pos:end="215:28"><type pos:start="215:21" pos:end="215:23"><name pos:start="215:21" pos:end="215:23">int</name></type> <name pos:start="215:25" pos:end="215:28">code</name></decl>;</decl_stmt>

                    <if_stmt pos:start="217:21" pos:end="225:21"><if pos:start="217:21" pos:end="225:21">if <condition pos:start="217:24" pos:end="217:33">(<expr pos:start="217:25" pos:end="217:32"><name pos:start="217:25" pos:end="217:32">skip_run</name></expr>)</condition> <block pos:start="217:35" pos:end="225:21">{<block_content pos:start="219:25" pos:end="223:33">

                        <expr_stmt pos:start="219:25" pos:end="219:35"><expr pos:start="219:25" pos:end="219:34"><name pos:start="219:25" pos:end="219:32">skip_run</name><operator pos:start="219:33" pos:end="219:34">--</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="221:25" pos:end="221:74"><expr pos:start="221:25" pos:end="221:73"><call pos:start="221:25" pos:end="221:73"><name pos:start="221:25" pos:end="221:35">copy_block4</name><argument_list pos:start="221:36" pos:end="221:73">(<argument pos:start="221:37" pos:end="221:43"><expr pos:start="221:37" pos:end="221:43"><name pos:start="221:37" pos:end="221:39">dst</name> <operator pos:start="221:41" pos:end="221:41">+</operator> <name pos:start="221:43" pos:end="221:43">i</name></expr></argument>, <argument pos:start="221:46" pos:end="221:53"><expr pos:start="221:46" pos:end="221:53"><name pos:start="221:46" pos:end="221:49">prev</name> <operator pos:start="221:51" pos:end="221:51">+</operator> <name pos:start="221:53" pos:end="221:53">i</name></expr></argument>, <argument pos:start="221:56" pos:end="221:61"><expr pos:start="221:56" pos:end="221:61"><name pos:start="221:56" pos:end="221:61">stride</name></expr></argument>, <argument pos:start="221:64" pos:end="221:69"><expr pos:start="221:64" pos:end="221:69"><name pos:start="221:64" pos:end="221:69">stride</name></expr></argument>, <argument pos:start="221:72" pos:end="221:72"><expr pos:start="221:72" pos:end="221:72"><literal type="number" pos:start="221:72" pos:end="221:72">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <continue pos:start="223:25" pos:end="223:33">continue;</continue>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="227:21" pos:end="227:58"><expr pos:start="227:21" pos:end="227:57"><name pos:start="227:21" pos:end="227:24">code</name> <operator pos:start="227:26" pos:end="227:26">=</operator> <call pos:start="227:28" pos:end="227:57"><name pos:start="227:28" pos:end="227:47">bytestream2_get_byte</name><argument_list pos:start="227:48" pos:end="227:57">(<argument pos:start="227:49" pos:end="227:56"><expr pos:start="227:49" pos:end="227:56"><operator pos:start="227:49" pos:end="227:49">&amp;</operator><name pos:start="227:50" pos:end="227:56"><name pos:start="227:50" pos:end="227:52">ctx</name><operator pos:start="227:53" pos:end="227:54">-&gt;</operator><name pos:start="227:55" pos:end="227:56">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="229:21" pos:end="263:21"><if pos:start="229:21" pos:end="239:21">if <condition pos:start="229:24" pos:end="229:37">(<expr pos:start="229:25" pos:end="229:36"><name pos:start="229:25" pos:end="229:28">code</name> <operator pos:start="229:30" pos:end="229:31">==</operator> <literal type="number" pos:start="229:33" pos:end="229:36">0xFF</literal></expr>)</condition> <block pos:start="229:39" pos:end="239:21">{<block_content pos:start="231:25" pos:end="237:87">

                        <if_stmt pos:start="231:25" pos:end="233:55"><if pos:start="231:25" pos:end="233:55">if <condition pos:start="231:28" pos:end="231:70">(<expr pos:start="231:29" pos:end="231:69"><call pos:start="231:29" pos:end="231:64"><name pos:start="231:29" pos:end="231:54">bytestream2_get_bytes_left</name><argument_list pos:start="231:55" pos:end="231:64">(<argument pos:start="231:56" pos:end="231:63"><expr pos:start="231:56" pos:end="231:63"><operator pos:start="231:56" pos:end="231:56">&amp;</operator><name pos:start="231:57" pos:end="231:63"><name pos:start="231:57" pos:end="231:59">ctx</name><operator pos:start="231:60" pos:end="231:61">-&gt;</operator><name pos:start="231:62" pos:end="231:63">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="231:66" pos:end="231:66">&lt;</operator> <literal type="number" pos:start="231:68" pos:end="231:69">16</literal></expr>)</condition><block type="pseudo" pos:start="233:29" pos:end="233:55"><block_content pos:start="233:29" pos:end="233:55">

                            <return pos:start="233:29" pos:end="233:55">return <expr pos:start="233:36" pos:end="233:54"><name pos:start="233:36" pos:end="233:54">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                        <for pos:start="235:25" pos:end="237:87">for <control pos:start="235:29" pos:end="235:47">(<init pos:start="235:30" pos:end="235:35"><expr pos:start="235:30" pos:end="235:34"><name pos:start="235:30" pos:end="235:30">k</name> <operator pos:start="235:32" pos:end="235:32">=</operator> <literal type="number" pos:start="235:34" pos:end="235:34">0</literal></expr>;</init> <condition pos:start="235:37" pos:end="235:42"><expr pos:start="235:37" pos:end="235:41"><name pos:start="235:37" pos:end="235:37">k</name> <operator pos:start="235:39" pos:end="235:39">&lt;</operator> <literal type="number" pos:start="235:41" pos:end="235:41">4</literal></expr>;</condition> <incr pos:start="235:44" pos:end="235:46"><expr pos:start="235:44" pos:end="235:46"><name pos:start="235:44" pos:end="235:44">k</name><operator pos:start="235:45" pos:end="235:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="237:29" pos:end="237:87"><block_content pos:start="237:29" pos:end="237:87">

                            <expr_stmt pos:start="237:29" pos:end="237:87"><expr pos:start="237:29" pos:end="237:86"><call pos:start="237:29" pos:end="237:86"><name pos:start="237:29" pos:end="237:51">bytestream2_get_bufferu</name><argument_list pos:start="237:52" pos:end="237:86">(<argument pos:start="237:53" pos:end="237:60"><expr pos:start="237:53" pos:end="237:60"><operator pos:start="237:53" pos:end="237:53">&amp;</operator><name pos:start="237:54" pos:end="237:60"><name pos:start="237:54" pos:end="237:56">ctx</name><operator pos:start="237:57" pos:end="237:58">-&gt;</operator><name pos:start="237:59" pos:end="237:60">gb</name></name></expr></argument>, <argument pos:start="237:63" pos:end="237:82"><expr pos:start="237:63" pos:end="237:82"><name pos:start="237:63" pos:end="237:65">dst</name> <operator pos:start="237:67" pos:end="237:67">+</operator> <name pos:start="237:69" pos:end="237:69">i</name> <operator pos:start="237:71" pos:end="237:71">+</operator> <name pos:start="237:73" pos:end="237:73">k</name> <operator pos:start="237:75" pos:end="237:75">*</operator> <name pos:start="237:77" pos:end="237:82">stride</name></expr></argument>, <argument pos:start="237:85" pos:end="237:85"><expr pos:start="237:85" pos:end="237:85"><literal type="number" pos:start="237:85" pos:end="237:85">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if> <if type="elseif" pos:start="239:23" pos:end="249:21">else if <condition pos:start="239:31" pos:end="239:51">(<expr pos:start="239:32" pos:end="239:50"><name pos:start="239:32" pos:end="239:36">compr</name> <operator pos:start="239:38" pos:end="239:39">==</operator> <literal type="number" pos:start="239:41" pos:end="239:41">4</literal> <operator pos:start="239:43" pos:end="239:44">&amp;&amp;</operator> <operator pos:start="239:46" pos:end="239:46">!</operator><name pos:start="239:47" pos:end="239:50">code</name></expr>)</condition> <block pos:start="239:53" pos:end="249:21">{<block_content pos:start="241:25" pos:end="247:31">

                        <if_stmt pos:start="241:25" pos:end="243:55"><if pos:start="241:25" pos:end="243:55">if <condition pos:start="241:28" pos:end="241:69">(<expr pos:start="241:29" pos:end="241:68"><call pos:start="241:29" pos:end="241:64"><name pos:start="241:29" pos:end="241:54">bytestream2_get_bytes_left</name><argument_list pos:start="241:55" pos:end="241:64">(<argument pos:start="241:56" pos:end="241:63"><expr pos:start="241:56" pos:end="241:63"><operator pos:start="241:56" pos:end="241:56">&amp;</operator><name pos:start="241:57" pos:end="241:63"><name pos:start="241:57" pos:end="241:59">ctx</name><operator pos:start="241:60" pos:end="241:61">-&gt;</operator><name pos:start="241:62" pos:end="241:63">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="241:66" pos:end="241:66">&lt;</operator> <literal type="number" pos:start="241:68" pos:end="241:68">1</literal></expr>)</condition><block type="pseudo" pos:start="243:29" pos:end="243:55"><block_content pos:start="243:29" pos:end="243:55">

                            <return pos:start="243:29" pos:end="243:55">return <expr pos:start="243:36" pos:end="243:54"><name pos:start="243:36" pos:end="243:54">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="245:25" pos:end="245:71"><expr pos:start="245:25" pos:end="245:70"><name pos:start="245:25" pos:end="245:32">skip_run</name> <operator pos:start="245:34" pos:end="245:34">=</operator> <call pos:start="245:36" pos:end="245:66"><name pos:start="245:36" pos:end="245:56">bytestream2_get_byteu</name><argument_list pos:start="245:57" pos:end="245:66">(<argument pos:start="245:58" pos:end="245:65"><expr pos:start="245:58" pos:end="245:65"><operator pos:start="245:58" pos:end="245:58">&amp;</operator><name pos:start="245:59" pos:end="245:65"><name pos:start="245:59" pos:end="245:61">ctx</name><operator pos:start="245:62" pos:end="245:63">-&gt;</operator><name pos:start="245:64" pos:end="245:65">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="245:68" pos:end="245:68">+</operator> <literal type="number" pos:start="245:70" pos:end="245:70">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="247:25" pos:end="247:31"><expr pos:start="247:25" pos:end="247:30"><name pos:start="247:25" pos:end="247:25">i</name> <operator pos:start="247:27" pos:end="247:28">-=</operator> <literal type="number" pos:start="247:30" pos:end="247:30">4</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="249:23" pos:end="263:21">else <block pos:start="249:28" pos:end="263:21">{<block_content pos:start="251:25" pos:end="261:72">

                        <decl_stmt pos:start="251:25" pos:end="251:35"><decl pos:start="251:25" pos:end="251:30"><type pos:start="251:25" pos:end="251:27"><name pos:start="251:25" pos:end="251:27">int</name></type> <name pos:start="251:29" pos:end="251:30">mx</name></decl>, <decl pos:start="251:33" pos:end="251:34"><type ref="prev" pos:start="251:25" pos:end="251:27"/><name pos:start="251:33" pos:end="251:34">my</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="255:25" pos:end="255:62"><expr pos:start="255:25" pos:end="255:61"><name pos:start="255:25" pos:end="255:26">mx</name> <operator pos:start="255:28" pos:end="255:28">=</operator> <name pos:start="255:30" pos:end="255:61"><name pos:start="255:30" pos:end="255:35">c37_mv</name><index pos:start="255:36" pos:end="255:61">[<expr pos:start="255:37" pos:end="255:60"><operator pos:start="255:37" pos:end="255:37">(</operator><name pos:start="255:38" pos:end="255:42">mvoff</name> <operator pos:start="255:44" pos:end="255:44">*</operator> <literal type="number" pos:start="255:46" pos:end="255:50">255</literal> <operator pos:start="255:50" pos:end="255:50">+</operator> <name pos:start="255:52" pos:end="255:55">code</name><operator pos:start="255:56" pos:end="255:56">)</operator> <operator pos:start="255:58" pos:end="255:58">*</operator> <literal type="number" pos:start="255:60" pos:end="255:60">2</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="257:25" pos:end="257:66"><expr pos:start="257:25" pos:end="257:65"><name pos:start="257:25" pos:end="257:26">my</name> <operator pos:start="257:28" pos:end="257:28">=</operator> <name pos:start="257:30" pos:end="257:65"><name pos:start="257:30" pos:end="257:35">c37_mv</name><index pos:start="257:36" pos:end="257:65">[<expr pos:start="257:37" pos:end="257:64"><operator pos:start="257:37" pos:end="257:37">(</operator><name pos:start="257:38" pos:end="257:42">mvoff</name> <operator pos:start="257:44" pos:end="257:44">*</operator> <literal type="number" pos:start="257:46" pos:end="257:50">255</literal> <operator pos:start="257:50" pos:end="257:50">+</operator> <name pos:start="257:52" pos:end="257:55">code</name><operator pos:start="257:56" pos:end="257:56">)</operator> <operator pos:start="257:58" pos:end="257:58">*</operator> <literal type="number" pos:start="257:60" pos:end="257:62">2</literal> <operator pos:start="257:62" pos:end="257:62">+</operator> <literal type="number" pos:start="257:64" pos:end="257:64">1</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="259:25" pos:end="261:72"><expr pos:start="259:25" pos:end="261:71"><call pos:start="259:25" pos:end="261:71"><name pos:start="259:25" pos:end="259:34">codec37_mv</name><argument_list pos:start="259:35" pos:end="261:71">(<argument pos:start="259:36" pos:end="259:42"><expr pos:start="259:36" pos:end="259:42"><name pos:start="259:36" pos:end="259:38">dst</name> <operator pos:start="259:40" pos:end="259:40">+</operator> <name pos:start="259:42" pos:end="259:42">i</name></expr></argument>, <argument pos:start="259:45" pos:end="259:71"><expr pos:start="259:45" pos:end="259:71"><name pos:start="259:45" pos:end="259:48">prev</name> <operator pos:start="259:50" pos:end="259:50">+</operator> <name pos:start="259:52" pos:end="259:52">i</name> <operator pos:start="259:54" pos:end="259:54">+</operator> <name pos:start="259:56" pos:end="259:57">mx</name> <operator pos:start="259:59" pos:end="259:59">+</operator> <name pos:start="259:61" pos:end="259:62">my</name> <operator pos:start="259:64" pos:end="259:64">*</operator> <name pos:start="259:66" pos:end="259:71">stride</name></expr></argument>,

                                   <argument pos:start="261:36" pos:end="261:46"><expr pos:start="261:36" pos:end="261:46"><name pos:start="261:36" pos:end="261:46"><name pos:start="261:36" pos:end="261:38">ctx</name><operator pos:start="261:39" pos:end="261:40">-&gt;</operator><name pos:start="261:41" pos:end="261:46">height</name></name></expr></argument>, <argument pos:start="261:49" pos:end="261:54"><expr pos:start="261:49" pos:end="261:54"><name pos:start="261:49" pos:end="261:54">stride</name></expr></argument>, <argument pos:start="261:57" pos:end="261:62"><expr pos:start="261:57" pos:end="261:62"><name pos:start="261:57" pos:end="261:57">i</name> <operator pos:start="261:59" pos:end="261:59">+</operator> <name pos:start="261:61" pos:end="261:62">mx</name></expr></argument>, <argument pos:start="261:65" pos:end="261:70"><expr pos:start="261:65" pos:end="261:70"><name pos:start="261:65" pos:end="261:65">j</name> <operator pos:start="261:67" pos:end="261:67">+</operator> <name pos:start="261:69" pos:end="261:70">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="267:17" pos:end="267:35"><expr pos:start="267:17" pos:end="267:34"><name pos:start="267:17" pos:end="267:19">dst</name>  <operator pos:start="267:22" pos:end="267:23">+=</operator> <name pos:start="267:25" pos:end="267:30">stride</name> <operator pos:start="267:32" pos:end="267:32">*</operator> <literal type="number" pos:start="267:34" pos:end="267:34">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:35"><expr pos:start="269:17" pos:end="269:34"><name pos:start="269:17" pos:end="269:20">prev</name> <operator pos:start="269:22" pos:end="269:23">+=</operator> <name pos:start="269:25" pos:end="269:30">stride</name> <operator pos:start="269:32" pos:end="269:32">*</operator> <literal type="number" pos:start="269:34" pos:end="269:34">4</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="275:9" pos:end="275:14">break;</break>

    <default pos:start="277:5" pos:end="277:12">default:</default>

        <expr_stmt pos:start="279:9" pos:end="281:70"><expr pos:start="279:9" pos:end="281:69"><call pos:start="279:9" pos:end="281:69"><name pos:start="279:9" pos:end="279:14">av_log</name><argument_list pos:start="279:15" pos:end="281:69">(<argument pos:start="279:16" pos:end="279:25"><expr pos:start="279:16" pos:end="279:25"><name pos:start="279:16" pos:end="279:25"><name pos:start="279:16" pos:end="279:18">ctx</name><operator pos:start="279:19" pos:end="279:20">-&gt;</operator><name pos:start="279:21" pos:end="279:25">avctx</name></name></expr></argument>, <argument pos:start="279:28" pos:end="279:39"><expr pos:start="279:28" pos:end="279:39"><name pos:start="279:28" pos:end="279:39">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="281:16" pos:end="281:61"><expr pos:start="281:16" pos:end="281:61"><literal type="string" pos:start="281:16" pos:end="281:61">"subcodec 37 compression %d not implemented\n"</literal></expr></argument>, <argument pos:start="281:64" pos:end="281:68"><expr pos:start="281:64" pos:end="281:68"><name pos:start="281:64" pos:end="281:68">compr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="283:9" pos:end="283:36">return <expr pos:start="283:16" pos:end="283:35"><name pos:start="283:16" pos:end="283:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="289:5" pos:end="289:13">return <expr pos:start="289:12" pos:end="289:12"><literal type="number" pos:start="289:12" pos:end="289:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
