<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11224.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">smush_read_packet</name><parameter_list pos:start="1:29" pos:end="1:65">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:59">AVPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">SMUSHContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:23">smush</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:29">ctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:29">= <expr pos:start="7:23" pos:end="7:29"><name pos:start="7:23" pos:end="7:29"><name pos:start="7:23" pos:end="7:25">ctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:29">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">done</name> <init pos:start="9:14" pos:end="9:16">= <expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="101:5">while <condition pos:start="13:11" pos:end="13:17">(<expr pos:start="13:12" pos:end="13:16"><operator pos:start="13:12" pos:end="13:12">!</operator><name pos:start="13:13" pos:end="13:16">done</name></expr>)</condition> <block pos:start="13:19" pos:end="101:5">{<block_content pos:start="15:9" pos:end="99:9">

        <decl_stmt pos:start="15:9" pos:end="15:27"><decl pos:start="15:9" pos:end="15:20"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint32_t</name></type> <name pos:start="15:18" pos:end="15:20">sig</name></decl>, <decl pos:start="15:23" pos:end="15:26"><type ref="prev" pos:start="15:9" pos:end="15:16"/><name pos:start="15:23" pos:end="15:26">size</name></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="21:31"><if pos:start="19:9" pos:end="21:31">if <condition pos:start="19:12" pos:end="19:25">(<expr pos:start="19:13" pos:end="19:24"><call pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:20">url_feof</name><argument_list pos:start="19:21" pos:end="19:24">(<argument pos:start="19:22" pos:end="19:23"><expr pos:start="19:22" pos:end="19:23"><name pos:start="19:22" pos:end="19:23">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:31"><block_content pos:start="21:13" pos:end="21:31">

            <return pos:start="21:13" pos:end="21:31">return <expr pos:start="21:20" pos:end="21:30"><name pos:start="21:20" pos:end="21:30">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:11">sig</name>    <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="25:30"><name pos:start="25:18" pos:end="25:26">avio_rb32</name><argument_list pos:start="25:27" pos:end="25:30">(<argument pos:start="25:28" pos:end="25:29"><expr pos:start="25:28" pos:end="25:29"><name pos:start="25:28" pos:end="25:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:12">size</name>   <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="27:30"><name pos:start="27:18" pos:end="27:26">avio_rb32</name><argument_list pos:start="27:27" pos:end="27:30">(<argument pos:start="27:28" pos:end="27:29"><expr pos:start="27:28" pos:end="27:29"><name pos:start="27:28" pos:end="27:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="31:9" pos:end="99:9">switch <condition pos:start="31:16" pos:end="31:20">(<expr pos:start="31:17" pos:end="31:19"><name pos:start="31:17" pos:end="31:19">sig</name></expr>)</condition> <block pos:start="31:22" pos:end="99:9">{<block_content pos:start="33:9" pos:end="97:18">

        <case pos:start="33:9" pos:end="33:41">case <expr pos:start="33:14" pos:end="33:40"><call pos:start="33:14" pos:end="33:40"><name pos:start="33:14" pos:end="33:20">MKBETAG</name><argument_list pos:start="33:21" pos:end="33:40">(<argument pos:start="33:22" pos:end="33:24"><expr pos:start="33:22" pos:end="33:24"><literal type="char" pos:start="33:22" pos:end="33:24">'F'</literal></expr></argument>, <argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><literal type="char" pos:start="33:27" pos:end="33:29">'R'</literal></expr></argument>, <argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><literal type="char" pos:start="33:32" pos:end="33:34">'M'</literal></expr></argument>, <argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><literal type="char" pos:start="33:37" pos:end="33:39">'E'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="35:13" pos:end="37:22"><if pos:start="35:13" pos:end="37:22">if <condition pos:start="35:16" pos:end="35:31">(<expr pos:start="35:17" pos:end="35:30"><name pos:start="35:17" pos:end="35:30"><name pos:start="35:17" pos:end="35:21">smush</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:30">version</name></name></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:22"><block_content pos:start="37:17" pos:end="37:22">

                <break pos:start="37:17" pos:end="37:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="39:13" pos:end="41:36"><if pos:start="39:13" pos:end="41:36">if <condition pos:start="39:16" pos:end="39:49">(<expr pos:start="39:17" pos:end="39:48"><call pos:start="39:17" pos:end="39:44"><name pos:start="39:17" pos:end="39:29">av_get_packet</name><argument_list pos:start="39:30" pos:end="39:44">(<argument pos:start="39:31" pos:end="39:32"><expr pos:start="39:31" pos:end="39:32"><name pos:start="39:31" pos:end="39:32">pb</name></expr></argument>, <argument pos:start="39:35" pos:end="39:37"><expr pos:start="39:35" pos:end="39:37"><name pos:start="39:35" pos:end="39:37">pkt</name></expr></argument>, <argument pos:start="39:40" pos:end="39:43"><expr pos:start="39:40" pos:end="39:43"><name pos:start="39:40" pos:end="39:43">size</name></expr></argument>)</argument_list></call> <operator pos:start="39:46" pos:end="39:46">&lt;</operator> <literal type="number" pos:start="39:48" pos:end="39:48">0</literal></expr>)</condition><block type="pseudo" pos:start="41:17" pos:end="41:36"><block_content pos:start="41:17" pos:end="41:36">

                <return pos:start="41:17" pos:end="41:36">return <expr pos:start="41:24" pos:end="41:35"><call pos:start="41:24" pos:end="41:35"><name pos:start="41:24" pos:end="41:30">AVERROR</name><argument_list pos:start="41:31" pos:end="41:35">(<argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="45:13" pos:end="45:58"><expr pos:start="45:13" pos:end="45:57"><name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:15">pkt</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:29">stream_index</name></name> <operator pos:start="45:31" pos:end="45:31">=</operator> <name pos:start="45:33" pos:end="45:57"><name pos:start="45:33" pos:end="45:37">smush</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:57">video_stream_index</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:21"><expr pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:16">done</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <literal type="number" pos:start="47:20" pos:end="47:20">1</literal></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="51:41">case <expr pos:start="51:14" pos:end="51:40"><call pos:start="51:14" pos:end="51:40"><name pos:start="51:14" pos:end="51:20">MKBETAG</name><argument_list pos:start="51:21" pos:end="51:40">(<argument pos:start="51:22" pos:end="51:24"><expr pos:start="51:22" pos:end="51:24"><literal type="char" pos:start="51:22" pos:end="51:24">'B'</literal></expr></argument>, <argument pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><literal type="char" pos:start="51:27" pos:end="51:29">'l'</literal></expr></argument>, <argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><literal type="char" pos:start="51:32" pos:end="51:34">'1'</literal></expr></argument>, <argument pos:start="51:37" pos:end="51:39"><expr pos:start="51:37" pos:end="51:39"><literal type="char" pos:start="51:37" pos:end="51:39">'6'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="53:13" pos:end="55:36"><if pos:start="53:13" pos:end="55:36">if <condition pos:start="53:16" pos:end="53:49">(<expr pos:start="53:17" pos:end="53:48"><call pos:start="53:17" pos:end="53:44"><name pos:start="53:17" pos:end="53:29">av_get_packet</name><argument_list pos:start="53:30" pos:end="53:44">(<argument pos:start="53:31" pos:end="53:32"><expr pos:start="53:31" pos:end="53:32"><name pos:start="53:31" pos:end="53:32">pb</name></expr></argument>, <argument pos:start="53:35" pos:end="53:37"><expr pos:start="53:35" pos:end="53:37"><name pos:start="53:35" pos:end="53:37">pkt</name></expr></argument>, <argument pos:start="53:40" pos:end="53:43"><expr pos:start="53:40" pos:end="53:43"><name pos:start="53:40" pos:end="53:43">size</name></expr></argument>)</argument_list></call> <operator pos:start="53:46" pos:end="53:46">&lt;</operator> <literal type="number" pos:start="53:48" pos:end="53:48">0</literal></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:36"><block_content pos:start="55:17" pos:end="55:36">

                <return pos:start="55:17" pos:end="55:36">return <expr pos:start="55:24" pos:end="55:35"><call pos:start="55:24" pos:end="55:35"><name pos:start="55:24" pos:end="55:30">AVERROR</name><argument_list pos:start="55:31" pos:end="55:35">(<argument pos:start="55:32" pos:end="55:34"><expr pos:start="55:32" pos:end="55:34"><name pos:start="55:32" pos:end="55:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="59:13" pos:end="59:58"><expr pos:start="59:13" pos:end="59:57"><name pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:15">pkt</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:29">stream_index</name></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <name pos:start="59:33" pos:end="59:57"><name pos:start="59:33" pos:end="59:37">smush</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:57">video_stream_index</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:30"><expr pos:start="61:13" pos:end="61:29"><name pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:15">pkt</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:25">duration</name></name> <operator pos:start="61:27" pos:end="61:27">=</operator> <literal type="number" pos:start="61:29" pos:end="61:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:21"><expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:16">done</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <literal type="number" pos:start="63:20" pos:end="63:20">1</literal></expr>;</expr_stmt>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <case pos:start="67:9" pos:end="67:41">case <expr pos:start="67:14" pos:end="67:40"><call pos:start="67:14" pos:end="67:40"><name pos:start="67:14" pos:end="67:20">MKBETAG</name><argument_list pos:start="67:21" pos:end="67:40">(<argument pos:start="67:22" pos:end="67:24"><expr pos:start="67:22" pos:end="67:24"><literal type="char" pos:start="67:22" pos:end="67:24">'W'</literal></expr></argument>, <argument pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><literal type="char" pos:start="67:27" pos:end="67:29">'a'</literal></expr></argument>, <argument pos:start="67:32" pos:end="67:34"><expr pos:start="67:32" pos:end="67:34"><literal type="char" pos:start="67:32" pos:end="67:34">'v'</literal></expr></argument>, <argument pos:start="67:37" pos:end="67:39"><expr pos:start="67:37" pos:end="67:39"><literal type="char" pos:start="67:37" pos:end="67:39">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="69:13" pos:end="71:43"><if pos:start="69:13" pos:end="71:43">if <condition pos:start="69:16" pos:end="69:26">(<expr pos:start="69:17" pos:end="69:25"><name pos:start="69:17" pos:end="69:20">size</name> <operator pos:start="69:22" pos:end="69:22">&lt;</operator> <literal type="number" pos:start="69:24" pos:end="69:25">13</literal></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:43"><block_content pos:start="71:17" pos:end="71:43">

                <return pos:start="71:17" pos:end="71:43">return <expr pos:start="71:24" pos:end="71:42"><name pos:start="71:24" pos:end="71:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="73:13" pos:end="75:36"><if pos:start="73:13" pos:end="75:36">if <condition pos:start="73:16" pos:end="73:49">(<expr pos:start="73:17" pos:end="73:48"><call pos:start="73:17" pos:end="73:44"><name pos:start="73:17" pos:end="73:29">av_get_packet</name><argument_list pos:start="73:30" pos:end="73:44">(<argument pos:start="73:31" pos:end="73:32"><expr pos:start="73:31" pos:end="73:32"><name pos:start="73:31" pos:end="73:32">pb</name></expr></argument>, <argument pos:start="73:35" pos:end="73:37"><expr pos:start="73:35" pos:end="73:37"><name pos:start="73:35" pos:end="73:37">pkt</name></expr></argument>, <argument pos:start="73:40" pos:end="73:43"><expr pos:start="73:40" pos:end="73:43"><name pos:start="73:40" pos:end="73:43">size</name></expr></argument>)</argument_list></call> <operator pos:start="73:46" pos:end="73:46">&lt;</operator> <literal type="number" pos:start="73:48" pos:end="73:48">0</literal></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:36"><block_content pos:start="75:17" pos:end="75:36">

                <return pos:start="75:17" pos:end="75:36">return <expr pos:start="75:24" pos:end="75:35"><call pos:start="75:24" pos:end="75:35"><name pos:start="75:24" pos:end="75:30">AVERROR</name><argument_list pos:start="75:31" pos:end="75:35">(<argument pos:start="75:32" pos:end="75:34"><expr pos:start="75:32" pos:end="75:34"><name pos:start="75:32" pos:end="75:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="79:13" pos:end="79:58"><expr pos:start="79:13" pos:end="79:57"><name pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:15">pkt</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:29">stream_index</name></name> <operator pos:start="79:31" pos:end="79:31">=</operator> <name pos:start="79:33" pos:end="79:57"><name pos:start="79:33" pos:end="79:37">smush</name><operator pos:start="79:38" pos:end="79:39">-&gt;</operator><name pos:start="79:40" pos:end="79:57">audio_stream_index</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:48"><expr pos:start="81:13" pos:end="81:47"><name pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:15">pkt</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:22">flags</name></name>       <operator pos:start="81:30" pos:end="81:31">|=</operator> <name pos:start="81:33" pos:end="81:47">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:47"><expr pos:start="83:13" pos:end="83:46"><name pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:15">pkt</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:25">duration</name></name> <operator pos:start="83:27" pos:end="83:27">=</operator> <call pos:start="83:29" pos:end="83:46"><name pos:start="83:29" pos:end="83:35">AV_RB32</name><argument_list pos:start="83:36" pos:end="83:46">(<argument pos:start="83:37" pos:end="83:45"><expr pos:start="83:37" pos:end="83:45"><name pos:start="83:37" pos:end="83:45"><name pos:start="83:37" pos:end="83:39">pkt</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:45">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="85:13" pos:end="87:55"><if pos:start="85:13" pos:end="87:55">if <condition pos:start="85:16" pos:end="85:45">(<expr pos:start="85:17" pos:end="85:44"><name pos:start="85:17" pos:end="85:29"><name pos:start="85:17" pos:end="85:19">pkt</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:29">duration</name></name> <operator pos:start="85:31" pos:end="85:32">==</operator> <literal type="number" pos:start="85:34" pos:end="85:44">0xFFFFFFFFu</literal></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:55"><block_content pos:start="87:17" pos:end="87:55">

                <expr_stmt pos:start="87:17" pos:end="87:55"><expr pos:start="87:17" pos:end="87:54"><name pos:start="87:17" pos:end="87:29"><name pos:start="87:17" pos:end="87:19">pkt</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:29">duration</name></name> <operator pos:start="87:31" pos:end="87:31">=</operator> <call pos:start="87:33" pos:end="87:54"><name pos:start="87:33" pos:end="87:39">AV_RB32</name><argument_list pos:start="87:40" pos:end="87:54">(<argument pos:start="87:41" pos:end="87:53"><expr pos:start="87:41" pos:end="87:53"><name pos:start="87:41" pos:end="87:49"><name pos:start="87:41" pos:end="87:43">pkt</name><operator pos:start="87:44" pos:end="87:45">-&gt;</operator><name pos:start="87:46" pos:end="87:49">data</name></name> <operator pos:start="87:51" pos:end="87:51">+</operator> <literal type="number" pos:start="87:53" pos:end="87:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:21"><expr pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:16">done</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <literal type="number" pos:start="89:20" pos:end="89:20">1</literal></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <default pos:start="93:9" pos:end="93:16">default:</default>

            <expr_stmt pos:start="95:13" pos:end="95:32"><expr pos:start="95:13" pos:end="95:31"><call pos:start="95:13" pos:end="95:31"><name pos:start="95:13" pos:end="95:21">avio_skip</name><argument_list pos:start="95:22" pos:end="95:31">(<argument pos:start="95:23" pos:end="95:24"><expr pos:start="95:23" pos:end="95:24"><name pos:start="95:23" pos:end="95:24">pb</name></expr></argument>, <argument pos:start="95:27" pos:end="95:30"><expr pos:start="95:27" pos:end="95:30"><name pos:start="95:27" pos:end="95:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
