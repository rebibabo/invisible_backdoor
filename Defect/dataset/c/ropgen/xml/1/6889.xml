<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6889.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">protocol_client_auth</name><parameter_list pos:start="1:32" pos:end="1:72">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:40">VncState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">vs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">data</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:71"><decl pos:start="1:62" pos:end="1:71"><type pos:start="1:62" pos:end="1:71"><name pos:start="1:62" pos:end="1:67">size_t</name></type> <name pos:start="1:69" pos:end="1:71">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="9:5" pos:end="107:13">

    <comment type="block" pos:start="5:5" pos:end="7:48">/* We only advertise 1 auth scheme at a time, so client

     * must pick the one we sent. Verify this */</comment>

    <if_stmt pos:start="9:5" pos:end="105:5"><if pos:start="9:5" pos:end="27:5">if <condition pos:start="9:8" pos:end="9:28">(<expr pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:15"><name pos:start="9:9" pos:end="9:12">data</name><index pos:start="9:13" pos:end="9:15">[<expr pos:start="9:14" pos:end="9:14"><literal type="number" pos:start="9:14" pos:end="9:14">0</literal></expr>]</index></name> <operator pos:start="9:17" pos:end="9:18">!=</operator> <name pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:21">vs</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:27">auth</name></name></expr>)</condition> <block pos:start="9:30" pos:end="27:5">{<block_content pos:start="11:8" pos:end="25:28"> <comment type="block" pos:start="9:32" pos:end="9:48">/* Reject auth */</comment>

       <expr_stmt pos:start="11:8" pos:end="11:86"><expr pos:start="11:8" pos:end="11:85"><call pos:start="11:8" pos:end="11:85"><name pos:start="11:8" pos:end="11:16">VNC_DEBUG</name><argument_list pos:start="11:17" pos:end="11:85">(<argument pos:start="11:18" pos:end="11:70"><expr pos:start="11:18" pos:end="11:70"><literal type="string" pos:start="11:18" pos:end="11:70">"Reject auth %d because it didn't match advertized\n"</literal></expr></argument>, <argument pos:start="11:73" pos:end="11:84"><expr pos:start="11:73" pos:end="11:84"><operator pos:start="11:73" pos:end="11:73">(</operator><name pos:start="11:74" pos:end="11:76">int</name><operator pos:start="11:77" pos:end="11:77">)</operator><name pos:start="11:78" pos:end="11:84"><name pos:start="11:78" pos:end="11:81">data</name><index pos:start="11:82" pos:end="11:84">[<expr pos:start="11:83" pos:end="11:83"><literal type="number" pos:start="11:83" pos:end="11:83">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="13:8" pos:end="13:28"><expr pos:start="13:8" pos:end="13:27"><call pos:start="13:8" pos:end="13:27"><name pos:start="13:8" pos:end="13:20">vnc_write_u32</name><argument_list pos:start="13:21" pos:end="13:27">(<argument pos:start="13:22" pos:end="13:23"><expr pos:start="13:22" pos:end="13:23"><name pos:start="13:22" pos:end="13:23">vs</name></expr></argument>, <argument pos:start="13:26" pos:end="13:26"><expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <if_stmt pos:start="15:8" pos:end="23:8"><if pos:start="15:8" pos:end="23:8">if <condition pos:start="15:11" pos:end="15:26">(<expr pos:start="15:12" pos:end="15:25"><name pos:start="15:12" pos:end="15:20"><name pos:start="15:12" pos:end="15:13">vs</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:20">minor</name></name> <operator pos:start="15:22" pos:end="15:23">&gt;=</operator> <literal type="number" pos:start="15:25" pos:end="15:25">8</literal></expr>)</condition> <block pos:start="15:28" pos:end="23:8">{<block_content pos:start="17:12" pos:end="21:43">

           <decl_stmt pos:start="17:12" pos:end="17:61"><decl pos:start="17:12" pos:end="17:60"><type pos:start="17:12" pos:end="17:28"><specifier pos:start="17:12" pos:end="17:17">static</specifier> <specifier pos:start="17:19" pos:end="17:23">const</specifier> <name pos:start="17:25" pos:end="17:28">char</name></type> <name pos:start="17:30" pos:end="17:34"><name pos:start="17:30" pos:end="17:32">err</name><index pos:start="17:33" pos:end="17:34">[]</index></name> <init pos:start="17:36" pos:end="17:60">= <expr pos:start="17:38" pos:end="17:60"><literal type="string" pos:start="17:38" pos:end="17:60">"Authentication failed"</literal></expr></init></decl>;</decl_stmt>

           <expr_stmt pos:start="19:12" pos:end="19:42"><expr pos:start="19:12" pos:end="19:41"><call pos:start="19:12" pos:end="19:41"><name pos:start="19:12" pos:end="19:24">vnc_write_u32</name><argument_list pos:start="19:25" pos:end="19:41">(<argument pos:start="19:26" pos:end="19:27"><expr pos:start="19:26" pos:end="19:27"><name pos:start="19:26" pos:end="19:27">vs</name></expr></argument>, <argument pos:start="19:30" pos:end="19:40"><expr pos:start="19:30" pos:end="19:40"><sizeof pos:start="19:30" pos:end="19:40">sizeof<argument_list pos:start="19:36" pos:end="19:40">(<argument pos:start="19:37" pos:end="19:39"><expr pos:start="19:37" pos:end="19:39"><name pos:start="19:37" pos:end="19:39">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="21:12" pos:end="21:43"><expr pos:start="21:12" pos:end="21:42"><call pos:start="21:12" pos:end="21:42"><name pos:start="21:12" pos:end="21:20">vnc_write</name><argument_list pos:start="21:21" pos:end="21:42">(<argument pos:start="21:22" pos:end="21:23"><expr pos:start="21:22" pos:end="21:23"><name pos:start="21:22" pos:end="21:23">vs</name></expr></argument>, <argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><name pos:start="21:26" pos:end="21:28">err</name></expr></argument>, <argument pos:start="21:31" pos:end="21:41"><expr pos:start="21:31" pos:end="21:41"><sizeof pos:start="21:31" pos:end="21:41">sizeof<argument_list pos:start="21:37" pos:end="21:41">(<argument pos:start="21:38" pos:end="21:40"><expr pos:start="21:38" pos:end="21:40"><name pos:start="21:38" pos:end="21:40">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></if></if_stmt>

       <expr_stmt pos:start="25:8" pos:end="25:28"><expr pos:start="25:8" pos:end="25:27"><call pos:start="25:8" pos:end="25:27"><name pos:start="25:8" pos:end="25:23">vnc_client_error</name><argument_list pos:start="25:24" pos:end="25:27">(<argument pos:start="25:25" pos:end="25:26"><expr pos:start="25:25" pos:end="25:26"><name pos:start="25:25" pos:end="25:26">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="105:5">else <block pos:start="27:12" pos:end="105:5">{<block_content pos:start="29:8" pos:end="103:8"> <comment type="block" pos:start="27:14" pos:end="27:40">/* Accept requested auth */</comment>

       <expr_stmt pos:start="29:8" pos:end="29:61"><expr pos:start="29:8" pos:end="29:60"><call pos:start="29:8" pos:end="29:60"><name pos:start="29:8" pos:end="29:16">VNC_DEBUG</name><argument_list pos:start="29:17" pos:end="29:60">(<argument pos:start="29:18" pos:end="29:45"><expr pos:start="29:18" pos:end="29:45"><literal type="string" pos:start="29:18" pos:end="29:45">"Client requested auth %d\n"</literal></expr></argument>, <argument pos:start="29:48" pos:end="29:59"><expr pos:start="29:48" pos:end="29:59"><operator pos:start="29:48" pos:end="29:48">(</operator><name pos:start="29:49" pos:end="29:51">int</name><operator pos:start="29:52" pos:end="29:52">)</operator><name pos:start="29:53" pos:end="29:59"><name pos:start="29:53" pos:end="29:56">data</name><index pos:start="29:57" pos:end="29:59">[<expr pos:start="29:58" pos:end="29:58"><literal type="number" pos:start="29:58" pos:end="29:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <switch pos:start="31:8" pos:end="103:8">switch <condition pos:start="31:15" pos:end="31:24">(<expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:17">vs</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">auth</name></name></expr>)</condition> <block pos:start="31:26" pos:end="103:8">{<block_content pos:start="33:8" pos:end="101:32">

       <case pos:start="33:8" pos:end="33:26">case <expr pos:start="33:13" pos:end="33:25"><name pos:start="33:13" pos:end="33:25">VNC_AUTH_NONE</name></expr>:</case>

           <expr_stmt pos:start="35:12" pos:end="35:43"><expr pos:start="35:12" pos:end="35:42"><call pos:start="35:12" pos:end="35:42"><name pos:start="35:12" pos:end="35:20">VNC_DEBUG</name><argument_list pos:start="35:21" pos:end="35:42">(<argument pos:start="35:22" pos:end="35:41"><expr pos:start="35:22" pos:end="35:41"><literal type="string" pos:start="35:22" pos:end="35:41">"Accept auth none\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <if_stmt pos:start="37:12" pos:end="43:12"><if pos:start="37:12" pos:end="43:12">if <condition pos:start="37:15" pos:end="37:30">(<expr pos:start="37:16" pos:end="37:29"><name pos:start="37:16" pos:end="37:24"><name pos:start="37:16" pos:end="37:17">vs</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:24">minor</name></name> <operator pos:start="37:26" pos:end="37:27">&gt;=</operator> <literal type="number" pos:start="37:29" pos:end="37:29">8</literal></expr>)</condition> <block pos:start="37:32" pos:end="43:12">{<block_content pos:start="39:16" pos:end="41:29">

               <expr_stmt pos:start="39:16" pos:end="39:36"><expr pos:start="39:16" pos:end="39:35"><call pos:start="39:16" pos:end="39:35"><name pos:start="39:16" pos:end="39:28">vnc_write_u32</name><argument_list pos:start="39:29" pos:end="39:35">(<argument pos:start="39:30" pos:end="39:31"><expr pos:start="39:30" pos:end="39:31"><name pos:start="39:30" pos:end="39:31">vs</name></expr></argument>, <argument pos:start="39:34" pos:end="39:34"><expr pos:start="39:34" pos:end="39:34"><literal type="number" pos:start="39:34" pos:end="39:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="39:38" pos:end="39:65">/* Accept auth completion */</comment>

               <expr_stmt pos:start="41:16" pos:end="41:29"><expr pos:start="41:16" pos:end="41:28"><call pos:start="41:16" pos:end="41:28"><name pos:start="41:16" pos:end="41:24">vnc_flush</name><argument_list pos:start="41:25" pos:end="41:28">(<argument pos:start="41:26" pos:end="41:27"><expr pos:start="41:26" pos:end="41:27"><name pos:start="41:26" pos:end="41:27">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

           <expr_stmt pos:start="45:12" pos:end="45:33"><expr pos:start="45:12" pos:end="45:32"><call pos:start="45:12" pos:end="45:32"><name pos:start="45:12" pos:end="45:28">start_client_init</name><argument_list pos:start="45:29" pos:end="45:32">(<argument pos:start="45:30" pos:end="45:31"><expr pos:start="45:30" pos:end="45:31"><name pos:start="45:30" pos:end="45:31">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <break pos:start="47:12" pos:end="47:17">break;</break>



       <case pos:start="51:8" pos:end="51:25">case <expr pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:24">VNC_AUTH_VNC</name></expr>:</case>

           <expr_stmt pos:start="53:12" pos:end="53:41"><expr pos:start="53:12" pos:end="53:40"><call pos:start="53:12" pos:end="53:40"><name pos:start="53:12" pos:end="53:20">VNC_DEBUG</name><argument_list pos:start="53:21" pos:end="53:40">(<argument pos:start="53:22" pos:end="53:39"><expr pos:start="53:22" pos:end="53:39"><literal type="string" pos:start="53:22" pos:end="53:39">"Start VNC auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="55:12" pos:end="55:30"><expr pos:start="55:12" pos:end="55:29"><call pos:start="55:12" pos:end="55:29"><name pos:start="55:12" pos:end="55:25">start_auth_vnc</name><argument_list pos:start="55:26" pos:end="55:29">(<argument pos:start="55:27" pos:end="55:28"><expr pos:start="55:27" pos:end="55:28"><name pos:start="55:27" pos:end="55:28">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <break pos:start="57:12" pos:end="57:17">break;</break>



       <case pos:start="61:8" pos:end="61:30">case <expr pos:start="61:13" pos:end="61:29"><name pos:start="61:13" pos:end="61:29">VNC_AUTH_VENCRYPT</name></expr>:</case>

           <expr_stmt pos:start="63:12" pos:end="63:47"><expr pos:start="63:12" pos:end="63:46"><call pos:start="63:12" pos:end="63:46"><name pos:start="63:12" pos:end="63:20">VNC_DEBUG</name><argument_list pos:start="63:21" pos:end="63:46">(<argument pos:start="63:22" pos:end="63:45"><expr pos:start="63:22" pos:end="63:45"><literal type="string" pos:start="63:22" pos:end="63:45">"Accept VeNCrypt auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="65:12" pos:end="65:35"><expr pos:start="65:12" pos:end="65:34"><call pos:start="65:12" pos:end="65:34"><name pos:start="65:12" pos:end="65:30">start_auth_vencrypt</name><argument_list pos:start="65:31" pos:end="65:34">(<argument pos:start="65:32" pos:end="65:33"><expr pos:start="65:32" pos:end="65:33"><name pos:start="65:32" pos:end="65:33">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <break pos:start="67:12" pos:end="72:0">break;</break>



<cpp:ifdef pos:start="71:1" pos:end="71:22">#<cpp:directive pos:start="71:2" pos:end="71:6">ifdef</cpp:directive> <name pos:start="71:8" pos:end="71:22">CONFIG_VNC_SASL</name></cpp:ifdef>

       <case pos:start="73:8" pos:end="73:26">case <expr pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:25">VNC_AUTH_SASL</name></expr>:</case>

           <expr_stmt pos:start="75:12" pos:end="75:43"><expr pos:start="75:12" pos:end="75:42"><call pos:start="75:12" pos:end="75:42"><name pos:start="75:12" pos:end="75:20">VNC_DEBUG</name><argument_list pos:start="75:21" pos:end="75:42">(<argument pos:start="75:22" pos:end="75:41"><expr pos:start="75:22" pos:end="75:41"><literal type="string" pos:start="75:22" pos:end="75:41">"Accept SASL auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="77:12" pos:end="77:31"><expr pos:start="77:12" pos:end="77:30"><call pos:start="77:12" pos:end="77:30"><name pos:start="77:12" pos:end="77:26">start_auth_sasl</name><argument_list pos:start="77:27" pos:end="77:30">(<argument pos:start="77:28" pos:end="77:29"><expr pos:start="77:28" pos:end="77:29"><name pos:start="77:28" pos:end="77:29">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <break pos:start="79:12" pos:end="82:0">break;</break>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="81:8" pos:end="81:28">/* CONFIG_VNC_SASL */</comment>



       <default pos:start="85:8" pos:end="85:15">default:</default> <comment type="block" pos:start="85:17" pos:end="85:62">/* Should not be possible, but just in case */</comment>

           <expr_stmt pos:start="87:12" pos:end="87:67"><expr pos:start="87:12" pos:end="87:66"><call pos:start="87:12" pos:end="87:66"><name pos:start="87:12" pos:end="87:20">VNC_DEBUG</name><argument_list pos:start="87:21" pos:end="87:66">(<argument pos:start="87:22" pos:end="87:55"><expr pos:start="87:22" pos:end="87:55"><literal type="string" pos:start="87:22" pos:end="87:55">"Reject auth %d server code bug\n"</literal></expr></argument>, <argument pos:start="87:58" pos:end="87:65"><expr pos:start="87:58" pos:end="87:65"><name pos:start="87:58" pos:end="87:65"><name pos:start="87:58" pos:end="87:59">vs</name><operator pos:start="87:60" pos:end="87:61">-&gt;</operator><name pos:start="87:62" pos:end="87:65">auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="89:12" pos:end="89:31"><expr pos:start="89:12" pos:end="89:30"><call pos:start="89:12" pos:end="89:30"><name pos:start="89:12" pos:end="89:23">vnc_write_u8</name><argument_list pos:start="89:24" pos:end="89:30">(<argument pos:start="89:25" pos:end="89:26"><expr pos:start="89:25" pos:end="89:26"><name pos:start="89:25" pos:end="89:26">vs</name></expr></argument>, <argument pos:start="89:29" pos:end="89:29"><expr pos:start="89:29" pos:end="89:29"><literal type="number" pos:start="89:29" pos:end="89:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <if_stmt pos:start="91:12" pos:end="99:12"><if pos:start="91:12" pos:end="99:12">if <condition pos:start="91:15" pos:end="91:30">(<expr pos:start="91:16" pos:end="91:29"><name pos:start="91:16" pos:end="91:24"><name pos:start="91:16" pos:end="91:17">vs</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:24">minor</name></name> <operator pos:start="91:26" pos:end="91:27">&gt;=</operator> <literal type="number" pos:start="91:29" pos:end="91:29">8</literal></expr>)</condition> <block pos:start="91:32" pos:end="99:12">{<block_content pos:start="93:16" pos:end="97:47">

               <decl_stmt pos:start="93:16" pos:end="93:65"><decl pos:start="93:16" pos:end="93:64"><type pos:start="93:16" pos:end="93:32"><specifier pos:start="93:16" pos:end="93:21">static</specifier> <specifier pos:start="93:23" pos:end="93:27">const</specifier> <name pos:start="93:29" pos:end="93:32">char</name></type> <name pos:start="93:34" pos:end="93:38"><name pos:start="93:34" pos:end="93:36">err</name><index pos:start="93:37" pos:end="93:38">[]</index></name> <init pos:start="93:40" pos:end="93:64">= <expr pos:start="93:42" pos:end="93:64"><literal type="string" pos:start="93:42" pos:end="93:64">"Authentication failed"</literal></expr></init></decl>;</decl_stmt>

               <expr_stmt pos:start="95:16" pos:end="95:46"><expr pos:start="95:16" pos:end="95:45"><call pos:start="95:16" pos:end="95:45"><name pos:start="95:16" pos:end="95:28">vnc_write_u32</name><argument_list pos:start="95:29" pos:end="95:45">(<argument pos:start="95:30" pos:end="95:31"><expr pos:start="95:30" pos:end="95:31"><name pos:start="95:30" pos:end="95:31">vs</name></expr></argument>, <argument pos:start="95:34" pos:end="95:44"><expr pos:start="95:34" pos:end="95:44"><sizeof pos:start="95:34" pos:end="95:44">sizeof<argument_list pos:start="95:40" pos:end="95:44">(<argument pos:start="95:41" pos:end="95:43"><expr pos:start="95:41" pos:end="95:43"><name pos:start="95:41" pos:end="95:43">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <expr_stmt pos:start="97:16" pos:end="97:47"><expr pos:start="97:16" pos:end="97:46"><call pos:start="97:16" pos:end="97:46"><name pos:start="97:16" pos:end="97:24">vnc_write</name><argument_list pos:start="97:25" pos:end="97:46">(<argument pos:start="97:26" pos:end="97:27"><expr pos:start="97:26" pos:end="97:27"><name pos:start="97:26" pos:end="97:27">vs</name></expr></argument>, <argument pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><name pos:start="97:30" pos:end="97:32">err</name></expr></argument>, <argument pos:start="97:35" pos:end="97:45"><expr pos:start="97:35" pos:end="97:45"><sizeof pos:start="97:35" pos:end="97:45">sizeof<argument_list pos:start="97:41" pos:end="97:45">(<argument pos:start="97:42" pos:end="97:44"><expr pos:start="97:42" pos:end="97:44"><name pos:start="97:42" pos:end="97:44">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

           <expr_stmt pos:start="101:12" pos:end="101:32"><expr pos:start="101:12" pos:end="101:31"><call pos:start="101:12" pos:end="101:31"><name pos:start="101:12" pos:end="101:27">vnc_client_error</name><argument_list pos:start="101:28" pos:end="101:31">(<argument pos:start="101:29" pos:end="101:30"><expr pos:start="101:29" pos:end="101:30"><name pos:start="101:29" pos:end="101:30">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><literal type="number" pos:start="107:12" pos:end="107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
