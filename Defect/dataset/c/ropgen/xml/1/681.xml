<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/681.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">parse_header_digest</name><parameter_list pos:start="1:32" pos:end="1:80">(<parameter pos:start="1:33" pos:end="1:59"><decl pos:start="1:33" pos:end="1:59"><type pos:start="1:33" pos:end="1:59"><name pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:52">iscsi_context</name></name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">iscsi</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:79"><decl pos:start="1:62" pos:end="1:79"><type pos:start="1:62" pos:end="1:79"><specifier pos:start="1:62" pos:end="1:66">const</specifier> <name pos:start="1:68" pos:end="1:71">char</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:79">target</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:5">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">QemuOptsList</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:22">list</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">QemuOpts</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">digest</name> <init pos:start="9:24" pos:end="9:29">= <expr pos:start="9:26" pos:end="9:29"><name pos:start="9:26" pos:end="9:29">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:35"><expr pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:8">list</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <call pos:start="13:12" pos:end="13:34"><name pos:start="13:12" pos:end="13:25">qemu_find_opts</name><argument_list pos:start="13:26" pos:end="13:34">(<argument pos:start="13:27" pos:end="13:33"><expr pos:start="13:27" pos:end="13:33"><literal type="string" pos:start="13:27" pos:end="13:33">"iscsi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:14">(<expr pos:start="15:9" pos:end="15:13"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:13">list</name></expr>)</condition> <block pos:start="15:16" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:40"><expr pos:start="23:5" pos:end="23:39"><name pos:start="23:5" pos:end="23:8">opts</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:39"><name pos:start="23:12" pos:end="23:25">qemu_opts_find</name><argument_list pos:start="23:26" pos:end="23:39">(<argument pos:start="23:27" pos:end="23:30"><expr pos:start="23:27" pos:end="23:30"><name pos:start="23:27" pos:end="23:30">list</name></expr></argument>, <argument pos:start="23:33" pos:end="23:38"><expr pos:start="23:33" pos:end="23:38"><name pos:start="23:33" pos:end="23:38">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:21">(<expr pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:12">opts</name> <operator pos:start="25:14" pos:end="25:15">==</operator> <name pos:start="25:17" pos:end="25:20">NULL</name></expr>)</condition> <block pos:start="25:23" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:9">

        <expr_stmt pos:start="27:9" pos:end="27:41"><expr pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:12">opts</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:40"><name pos:start="27:16" pos:end="27:27">QTAILQ_FIRST</name><argument_list pos:start="27:28" pos:end="27:40">(<argument pos:start="27:29" pos:end="27:39"><expr pos:start="27:29" pos:end="27:39"><operator pos:start="27:29" pos:end="27:29">&amp;</operator><name pos:start="27:30" pos:end="27:39"><name pos:start="27:30" pos:end="27:33">list</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:39">head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:18">(<expr pos:start="29:13" pos:end="29:17"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:17">opts</name></expr>)</condition> <block pos:start="29:20" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:19">

            <return pos:start="31:13" pos:end="31:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:49"><expr pos:start="39:5" pos:end="39:48"><name pos:start="39:5" pos:end="39:10">digest</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:48"><name pos:start="39:14" pos:end="39:25">qemu_opt_get</name><argument_list pos:start="39:26" pos:end="39:48">(<argument pos:start="39:27" pos:end="39:30"><expr pos:start="39:27" pos:end="39:30"><name pos:start="39:27" pos:end="39:30">opts</name></expr></argument>, <argument pos:start="39:33" pos:end="39:47"><expr pos:start="39:33" pos:end="39:47"><literal type="string" pos:start="39:33" pos:end="39:47">"header-digest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:15">digest</name></expr>)</condition> <block pos:start="41:18" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:15">

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="69:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:34">(<expr pos:start="49:9" pos:end="49:33"><operator pos:start="49:9" pos:end="49:9">!</operator><call pos:start="49:10" pos:end="49:33"><name pos:start="49:10" pos:end="49:15">strcmp</name><argument_list pos:start="49:16" pos:end="49:33">(<argument pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">digest</name></expr></argument>, <argument pos:start="49:25" pos:end="49:32"><expr pos:start="49:25" pos:end="49:32"><literal type="string" pos:start="49:25" pos:end="49:32">"CRC32C"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:36" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:67">

        <expr_stmt pos:start="51:9" pos:end="51:67"><expr pos:start="51:9" pos:end="51:66"><call pos:start="51:9" pos:end="51:66"><name pos:start="51:9" pos:end="51:31">iscsi_set_header_digest</name><argument_list pos:start="51:32" pos:end="51:66">(<argument pos:start="51:33" pos:end="51:37"><expr pos:start="51:33" pos:end="51:37"><name pos:start="51:33" pos:end="51:37">iscsi</name></expr></argument>, <argument pos:start="51:40" pos:end="51:65"><expr pos:start="51:40" pos:end="51:65"><name pos:start="51:40" pos:end="51:65">ISCSI_HEADER_DIGEST_CRC32C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="53:7" pos:end="57:5">else if <condition pos:start="53:15" pos:end="53:39">(<expr pos:start="53:16" pos:end="53:38"><operator pos:start="53:16" pos:end="53:16">!</operator><call pos:start="53:17" pos:end="53:38"><name pos:start="53:17" pos:end="53:22">strcmp</name><argument_list pos:start="53:23" pos:end="53:38">(<argument pos:start="53:24" pos:end="53:29"><expr pos:start="53:24" pos:end="53:29"><name pos:start="53:24" pos:end="53:29">digest</name></expr></argument>, <argument pos:start="53:32" pos:end="53:37"><expr pos:start="53:32" pos:end="53:37"><literal type="string" pos:start="53:32" pos:end="53:37">"NONE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:41" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:65">

        <expr_stmt pos:start="55:9" pos:end="55:65"><expr pos:start="55:9" pos:end="55:64"><call pos:start="55:9" pos:end="55:64"><name pos:start="55:9" pos:end="55:31">iscsi_set_header_digest</name><argument_list pos:start="55:32" pos:end="55:64">(<argument pos:start="55:33" pos:end="55:37"><expr pos:start="55:33" pos:end="55:37"><name pos:start="55:33" pos:end="55:37">iscsi</name></expr></argument>, <argument pos:start="55:40" pos:end="55:63"><expr pos:start="55:40" pos:end="55:63"><name pos:start="55:40" pos:end="55:63">ISCSI_HEADER_DIGEST_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="61:5">else if <condition pos:start="57:15" pos:end="57:46">(<expr pos:start="57:16" pos:end="57:45"><operator pos:start="57:16" pos:end="57:16">!</operator><call pos:start="57:17" pos:end="57:45"><name pos:start="57:17" pos:end="57:22">strcmp</name><argument_list pos:start="57:23" pos:end="57:45">(<argument pos:start="57:24" pos:end="57:29"><expr pos:start="57:24" pos:end="57:29"><name pos:start="57:24" pos:end="57:29">digest</name></expr></argument>, <argument pos:start="57:32" pos:end="57:44"><expr pos:start="57:32" pos:end="57:44"><literal type="string" pos:start="57:32" pos:end="57:44">"CRC32C-NONE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:48" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:72">

        <expr_stmt pos:start="59:9" pos:end="59:72"><expr pos:start="59:9" pos:end="59:71"><call pos:start="59:9" pos:end="59:71"><name pos:start="59:9" pos:end="59:31">iscsi_set_header_digest</name><argument_list pos:start="59:32" pos:end="59:71">(<argument pos:start="59:33" pos:end="59:37"><expr pos:start="59:33" pos:end="59:37"><name pos:start="59:33" pos:end="59:37">iscsi</name></expr></argument>, <argument pos:start="59:40" pos:end="59:70"><expr pos:start="59:40" pos:end="59:70"><name pos:start="59:40" pos:end="59:70">ISCSI_HEADER_DIGEST_CRC32C_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="65:5">else if <condition pos:start="61:15" pos:end="61:46">(<expr pos:start="61:16" pos:end="61:45"><operator pos:start="61:16" pos:end="61:16">!</operator><call pos:start="61:17" pos:end="61:45"><name pos:start="61:17" pos:end="61:22">strcmp</name><argument_list pos:start="61:23" pos:end="61:45">(<argument pos:start="61:24" pos:end="61:29"><expr pos:start="61:24" pos:end="61:29"><name pos:start="61:24" pos:end="61:29">digest</name></expr></argument>, <argument pos:start="61:32" pos:end="61:44"><expr pos:start="61:32" pos:end="61:44"><literal type="string" pos:start="61:32" pos:end="61:44">"NONE-CRC32C"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:48" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:72">

        <expr_stmt pos:start="63:9" pos:end="63:72"><expr pos:start="63:9" pos:end="63:71"><call pos:start="63:9" pos:end="63:71"><name pos:start="63:9" pos:end="63:31">iscsi_set_header_digest</name><argument_list pos:start="63:32" pos:end="63:71">(<argument pos:start="63:33" pos:end="63:37"><expr pos:start="63:33" pos:end="63:37"><name pos:start="63:33" pos:end="63:37">iscsi</name></expr></argument>, <argument pos:start="63:40" pos:end="63:70"><expr pos:start="63:40" pos:end="63:70"><name pos:start="63:40" pos:end="63:70">ISCSI_HEADER_DIGEST_NONE_CRC32C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="69:5">else <block pos:start="65:12" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:67">

        <expr_stmt pos:start="67:9" pos:end="67:67"><expr pos:start="67:9" pos:end="67:66"><call pos:start="67:9" pos:end="67:66"><name pos:start="67:9" pos:end="67:20">error_report</name><argument_list pos:start="67:21" pos:end="67:66">(<argument pos:start="67:22" pos:end="67:57"><expr pos:start="67:22" pos:end="67:57"><literal type="string" pos:start="67:22" pos:end="67:57">"Invalid header-digest setting : %s"</literal></expr></argument>, <argument pos:start="67:60" pos:end="67:65"><expr pos:start="67:60" pos:end="67:65"><name pos:start="67:60" pos:end="67:65">digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
