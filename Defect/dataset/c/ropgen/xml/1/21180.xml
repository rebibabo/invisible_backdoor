<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21180.c" pos:tabs="8"><function pos:start="1:1" pos:end="327:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_nal_units</name><parameter_list pos:start="1:28" pos:end="1:71">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">H264Context</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">h</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:51">uint8_t</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">buf</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:70">buf_size</name></decl></parameter>)</parameter_list><block pos:start="1:72" pos:end="327:1">{<block_content pos:start="3:5" pos:end="325:21">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier> <specifier pos:start="5:22" pos:end="5:26">const</specifier></type> <name pos:start="5:28" pos:end="5:32">avctx</name><init pos:start="5:33" pos:end="5:42">= <expr pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:35">s</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:42">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="20:0"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">buf_index</name><init pos:start="7:18" pos:end="7:19">=<expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:5"><literal type="number" pos:start="9:5" pos:end="9:5">0</literal></expr></cpp:if>

    int i;

    for(i=0; i&lt;50; i++){

        av_log(NULL, AV_LOG_ERROR,"%02X ", buf[i]);

    }

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="21:5" pos:end="21:21"><expr pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:5">h</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:16">slice_num</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:26">current_picture_ptr</name></name><operator pos:start="23:27" pos:end="23:27">=</operator> <name pos:start="23:29" pos:end="23:32">NULL</name></expr>;</expr_stmt>

    <for pos:start="25:5" pos:end="285:5">for<control pos:start="25:8" pos:end="25:11">(<init pos:start="25:9" pos:end="25:9">;</init><condition pos:start="25:10" pos:end="25:10">;</condition><incr/>)</control><block pos:start="25:12" pos:end="285:5">{<block_content pos:start="27:9" pos:end="283:9">

        <decl_stmt pos:start="27:9" pos:end="27:21"><decl pos:start="27:9" pos:end="27:20"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:20">consumed</name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:23"><decl pos:start="29:9" pos:end="29:22"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:22">dst_length</name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:23"><decl pos:start="31:9" pos:end="31:22"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:22">bit_length</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:21"><decl pos:start="33:9" pos:end="33:20"><type pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:15">uint8_t</name> <modifier pos:start="33:17" pos:end="33:17">*</modifier></type><name pos:start="33:18" pos:end="33:20">ptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:27"><decl pos:start="35:9" pos:end="35:13"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:13">i</name></decl>, <decl pos:start="35:16" pos:end="35:26"><type ref="prev" pos:start="35:9" pos:end="35:11"/><name pos:start="35:16" pos:end="35:22">nalsize</name> <init pos:start="35:24" pos:end="35:26">= <expr pos:start="35:26" pos:end="35:26"><literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr></init></decl>;</decl_stmt>



      <if_stmt pos:start="39:7" pos:end="89:7"><if pos:start="39:7" pos:end="67:7">if<condition pos:start="39:9" pos:end="39:19">(<expr pos:start="39:10" pos:end="39:18"><name pos:start="39:10" pos:end="39:18"><name pos:start="39:10" pos:end="39:10">h</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:18">is_avc</name></name></expr>)</condition> <block pos:start="39:21" pos:end="67:7">{<block_content pos:start="41:9" pos:end="65:9">

        <if_stmt pos:start="41:9" pos:end="41:40"><if pos:start="41:9" pos:end="41:40">if<condition pos:start="41:11" pos:end="41:33">(<expr pos:start="41:12" pos:end="41:32"><name pos:start="41:12" pos:end="41:20">buf_index</name> <operator pos:start="41:22" pos:end="41:23">&gt;=</operator> <name pos:start="41:25" pos:end="41:32">buf_size</name></expr>)</condition><block type="pseudo" pos:start="41:35" pos:end="41:40"><block_content pos:start="41:35" pos:end="41:40"> <break pos:start="41:35" pos:end="41:40">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:20"><expr pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:15">nalsize</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>;</expr_stmt>

        <for pos:start="45:9" pos:end="47:56">for<control pos:start="45:12" pos:end="45:47">(<init pos:start="45:13" pos:end="45:18"><expr pos:start="45:13" pos:end="45:17"><name pos:start="45:13" pos:end="45:13">i</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <literal type="number" pos:start="45:17" pos:end="45:17">0</literal></expr>;</init> <condition pos:start="45:20" pos:end="45:42"><expr pos:start="45:20" pos:end="45:41"><name pos:start="45:20" pos:end="45:20">i</name> <operator pos:start="45:22" pos:end="45:22">&lt;</operator> <name pos:start="45:24" pos:end="45:41"><name pos:start="45:24" pos:end="45:24">h</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:41">nal_length_size</name></name></expr>;</condition> <incr pos:start="45:44" pos:end="45:46"><expr pos:start="45:44" pos:end="45:46"><name pos:start="45:44" pos:end="45:44">i</name><operator pos:start="45:45" pos:end="45:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:13" pos:end="47:56"><block_content pos:start="47:13" pos:end="47:56">

            <expr_stmt pos:start="47:13" pos:end="47:56"><expr pos:start="47:13" pos:end="47:55"><name pos:start="47:13" pos:end="47:19">nalsize</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <operator pos:start="47:23" pos:end="47:23">(</operator><name pos:start="47:24" pos:end="47:30">nalsize</name> <operator pos:start="47:32" pos:end="47:33">&lt;&lt;</operator> <literal type="number" pos:start="47:35" pos:end="47:35">8</literal><operator pos:start="47:36" pos:end="47:36">)</operator> <operator pos:start="47:38" pos:end="47:38">|</operator> <name pos:start="47:40" pos:end="47:55"><name pos:start="47:40" pos:end="47:42">buf</name><index pos:start="47:43" pos:end="47:55">[<expr pos:start="47:44" pos:end="47:54"><name pos:start="47:44" pos:end="47:52">buf_index</name><operator pos:start="47:53" pos:end="47:54">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="49:9" pos:end="65:9"><if pos:start="49:9" pos:end="65:9">if<condition pos:start="49:11" pos:end="49:24">(<expr pos:start="49:12" pos:end="49:23"><name pos:start="49:12" pos:end="49:18">nalsize</name> <operator pos:start="49:20" pos:end="49:21">&lt;=</operator> <literal type="number" pos:start="49:23" pos:end="49:23">1</literal></expr>)</condition><block pos:start="49:25" pos:end="65:9">{<block_content pos:start="51:13" pos:end="63:13">

            <if_stmt pos:start="51:13" pos:end="63:13"><if pos:start="51:13" pos:end="57:13">if<condition pos:start="51:15" pos:end="51:28">(<expr pos:start="51:16" pos:end="51:27"><name pos:start="51:16" pos:end="51:22">nalsize</name> <operator pos:start="51:24" pos:end="51:25">==</operator> <literal type="number" pos:start="51:27" pos:end="51:27">1</literal></expr>)</condition><block pos:start="51:29" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:25">

                <expr_stmt pos:start="53:17" pos:end="53:28"><expr pos:start="53:17" pos:end="53:27"><name pos:start="53:17" pos:end="53:25">buf_index</name><operator pos:start="53:26" pos:end="53:27">++</operator></expr>;</expr_stmt>

                <continue pos:start="55:17" pos:end="55:25">continue;</continue>

            </block_content>}</block></if><else pos:start="57:14" pos:end="63:13">else<block pos:start="57:18" pos:end="63:13">{<block_content pos:start="59:17" pos:end="61:22">

                <expr_stmt pos:start="59:17" pos:end="59:80"><expr pos:start="59:17" pos:end="59:79"><call pos:start="59:17" pos:end="59:79"><name pos:start="59:17" pos:end="59:22">av_log</name><argument_list pos:start="59:23" pos:end="59:79">(<argument pos:start="59:24" pos:end="59:33"><expr pos:start="59:24" pos:end="59:33"><name pos:start="59:24" pos:end="59:33"><name pos:start="59:24" pos:end="59:24">h</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:27">s</name><operator pos:start="59:28" pos:end="59:28">.</operator><name pos:start="59:29" pos:end="59:33">avctx</name></name></expr></argument>, <argument pos:start="59:36" pos:end="59:47"><expr pos:start="59:36" pos:end="59:47"><name pos:start="59:36" pos:end="59:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:50" pos:end="59:69"><expr pos:start="59:50" pos:end="59:69"><literal type="string" pos:start="59:50" pos:end="59:69">"AVC: nal size %d\n"</literal></expr></argument>, <argument pos:start="59:72" pos:end="59:78"><expr pos:start="59:72" pos:end="59:78"><name pos:start="59:72" pos:end="59:78">nalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="61:17" pos:end="61:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if> <else pos:start="67:9" pos:end="89:7">else <block pos:start="67:14" pos:end="89:7">{<block_content pos:start="71:9" pos:end="87:21">

        <comment type="line" pos:start="69:9" pos:end="69:35">// start code prefix search</comment>

        <for pos:start="71:9" pos:end="79:9">for<control pos:start="71:12" pos:end="71:52">(<init pos:start="71:13" pos:end="71:13">;</init> <condition pos:start="71:15" pos:end="71:39"><expr pos:start="71:15" pos:end="71:38"><name pos:start="71:15" pos:end="71:23">buf_index</name> <operator pos:start="71:25" pos:end="71:25">+</operator> <literal type="number" pos:start="71:27" pos:end="71:27">3</literal> <operator pos:start="71:29" pos:end="71:29">&lt;</operator> <name pos:start="71:31" pos:end="71:38">buf_size</name></expr>;</condition> <incr pos:start="71:41" pos:end="71:51"><expr pos:start="71:41" pos:end="71:51"><name pos:start="71:41" pos:end="71:49">buf_index</name><operator pos:start="71:50" pos:end="71:51">++</operator></expr></incr>)</control><block pos:start="71:53" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:22">

            <comment type="line" pos:start="73:13" pos:end="73:65">// this should allways succeed in the first iteration</comment>

            <if_stmt pos:start="75:13" pos:end="77:22"><if pos:start="75:13" pos:end="77:22">if<condition pos:start="75:15" pos:end="75:85">(<expr pos:start="75:16" pos:end="75:84"><name pos:start="75:16" pos:end="75:29"><name pos:start="75:16" pos:end="75:18">buf</name><index pos:start="75:19" pos:end="75:29">[<expr pos:start="75:20" pos:end="75:28"><name pos:start="75:20" pos:end="75:28">buf_index</name></expr>]</index></name> <operator pos:start="75:31" pos:end="75:32">==</operator> <literal type="number" pos:start="75:34" pos:end="75:34">0</literal> <operator pos:start="75:36" pos:end="75:37">&amp;&amp;</operator> <name pos:start="75:39" pos:end="75:54"><name pos:start="75:39" pos:end="75:41">buf</name><index pos:start="75:42" pos:end="75:54">[<expr pos:start="75:43" pos:end="75:53"><name pos:start="75:43" pos:end="75:51">buf_index</name><operator pos:start="75:52" pos:end="75:52">+</operator><literal type="number" pos:start="75:53" pos:end="75:53">1</literal></expr>]</index></name> <operator pos:start="75:56" pos:end="75:57">==</operator> <literal type="number" pos:start="75:59" pos:end="75:59">0</literal> <operator pos:start="75:61" pos:end="75:62">&amp;&amp;</operator> <name pos:start="75:64" pos:end="75:79"><name pos:start="75:64" pos:end="75:66">buf</name><index pos:start="75:67" pos:end="75:79">[<expr pos:start="75:68" pos:end="75:78"><name pos:start="75:68" pos:end="75:76">buf_index</name><operator pos:start="75:77" pos:end="75:77">+</operator><literal type="number" pos:start="75:78" pos:end="75:78">2</literal></expr>]</index></name> <operator pos:start="75:81" pos:end="75:82">==</operator> <literal type="number" pos:start="75:84" pos:end="75:84">1</literal></expr>)</condition><block type="pseudo" pos:start="77:17" pos:end="77:22"><block_content pos:start="77:17" pos:end="77:22">

                <break pos:start="77:17" pos:end="77:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="83:9" pos:end="83:42"><if pos:start="83:9" pos:end="83:42">if<condition pos:start="83:11" pos:end="83:35">(<expr pos:start="83:12" pos:end="83:34"><name pos:start="83:12" pos:end="83:20">buf_index</name><operator pos:start="83:21" pos:end="83:21">+</operator><literal type="number" pos:start="83:22" pos:end="83:22">3</literal> <operator pos:start="83:24" pos:end="83:25">&gt;=</operator> <name pos:start="83:27" pos:end="83:34">buf_size</name></expr>)</condition><block type="pseudo" pos:start="83:37" pos:end="83:42"><block_content pos:start="83:37" pos:end="83:42"> <break pos:start="83:37" pos:end="83:42">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:21"><expr pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:17">buf_index</name><operator pos:start="87:18" pos:end="87:19">+=</operator><literal type="number" pos:start="87:20" pos:end="87:20">3</literal></expr>;</expr_stmt>

      </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:112"><expr pos:start="93:9" pos:end="93:111"><name pos:start="93:9" pos:end="93:11">ptr</name><operator pos:start="93:12" pos:end="93:12">=</operator> <call pos:start="93:14" pos:end="93:111"><name pos:start="93:14" pos:end="93:23">decode_nal</name><argument_list pos:start="93:24" pos:end="93:111">(<argument pos:start="93:25" pos:end="93:25"><expr pos:start="93:25" pos:end="93:25"><name pos:start="93:25" pos:end="93:25">h</name></expr></argument>, <argument pos:start="93:28" pos:end="93:42"><expr pos:start="93:28" pos:end="93:42"><name pos:start="93:28" pos:end="93:30">buf</name> <operator pos:start="93:32" pos:end="93:32">+</operator> <name pos:start="93:34" pos:end="93:42">buf_index</name></expr></argument>, <argument pos:start="93:45" pos:end="93:55"><expr pos:start="93:45" pos:end="93:55"><operator pos:start="93:45" pos:end="93:45">&amp;</operator><name pos:start="93:46" pos:end="93:55">dst_length</name></expr></argument>, <argument pos:start="93:58" pos:end="93:66"><expr pos:start="93:58" pos:end="93:66"><operator pos:start="93:58" pos:end="93:58">&amp;</operator><name pos:start="93:59" pos:end="93:66">consumed</name></expr></argument>, <argument pos:start="93:69" pos:end="93:110"><expr pos:start="93:69" pos:end="93:110"><ternary pos:start="93:69" pos:end="93:110"><condition pos:start="93:69" pos:end="93:79"><expr pos:start="93:69" pos:end="93:77"><name pos:start="93:69" pos:end="93:77"><name pos:start="93:69" pos:end="93:69">h</name><operator pos:start="93:70" pos:end="93:71">-&gt;</operator><name pos:start="93:72" pos:end="93:77">is_avc</name></name></expr> ?</condition><then pos:start="93:81" pos:end="93:87"> <expr pos:start="93:81" pos:end="93:87"><name pos:start="93:81" pos:end="93:87">nalsize</name></expr> </then><else pos:start="93:89" pos:end="93:110">: <expr pos:start="93:91" pos:end="93:110"><name pos:start="93:91" pos:end="93:98">buf_size</name> <operator pos:start="93:100" pos:end="93:100">-</operator> <name pos:start="93:102" pos:end="93:110">buf_index</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="95:9" pos:end="97:25">while<condition pos:start="95:14" pos:end="95:57">(<expr pos:start="95:15" pos:end="95:56"><name pos:start="95:15" pos:end="95:33"><name pos:start="95:15" pos:end="95:17">ptr</name><index pos:start="95:18" pos:end="95:33">[<expr pos:start="95:19" pos:end="95:32"><name pos:start="95:19" pos:end="95:28">dst_length</name> <operator pos:start="95:30" pos:end="95:30">-</operator> <literal type="number" pos:start="95:32" pos:end="95:32">1</literal></expr>]</index></name> <operator pos:start="95:35" pos:end="95:36">==</operator> <literal type="number" pos:start="95:38" pos:end="95:38">0</literal> <operator pos:start="95:40" pos:end="95:41">&amp;&amp;</operator> <name pos:start="95:43" pos:end="95:52">dst_length</name> <operator pos:start="95:54" pos:end="95:54">&gt;</operator> <literal type="number" pos:start="95:56" pos:end="95:56">1</literal></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:25"><block_content pos:start="97:13" pos:end="97:25">

            <expr_stmt pos:start="97:13" pos:end="97:25"><expr pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:22">dst_length</name><operator pos:start="97:23" pos:end="97:24">--</operator></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt pos:start="99:9" pos:end="99:78"><expr pos:start="99:9" pos:end="99:77"><name pos:start="99:9" pos:end="99:18">bit_length</name><operator pos:start="99:19" pos:end="99:19">=</operator> <literal type="number" pos:start="99:21" pos:end="99:21">8</literal><operator pos:start="99:22" pos:end="99:22">*</operator><name pos:start="99:23" pos:end="99:32">dst_length</name> <operator pos:start="99:34" pos:end="99:34">-</operator> <call pos:start="99:36" pos:end="99:77"><name pos:start="99:36" pos:end="99:55">decode_rbsp_trailing</name><argument_list pos:start="99:56" pos:end="99:77">(<argument pos:start="99:57" pos:end="99:76"><expr pos:start="99:57" pos:end="99:76"><name pos:start="99:57" pos:end="99:59">ptr</name> <operator pos:start="99:61" pos:end="99:61">+</operator> <name pos:start="99:63" pos:end="99:72">dst_length</name> <operator pos:start="99:74" pos:end="99:74">-</operator> <literal type="number" pos:start="99:76" pos:end="99:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if<condition pos:start="103:11" pos:end="103:46">(<expr pos:start="103:12" pos:end="103:45"><name pos:start="103:12" pos:end="103:26"><name pos:start="103:12" pos:end="103:12">s</name><operator pos:start="103:13" pos:end="103:14">-&gt;</operator><name pos:start="103:15" pos:end="103:19">avctx</name><operator pos:start="103:20" pos:end="103:21">-&gt;</operator><name pos:start="103:22" pos:end="103:26">debug</name></name><operator pos:start="103:27" pos:end="103:27">&amp;</operator><name pos:start="103:28" pos:end="103:45">FF_DEBUG_STARTCODE</name></expr>)</condition><block pos:start="103:47" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:127">

            <expr_stmt pos:start="105:13" pos:end="105:127"><expr pos:start="105:13" pos:end="105:126"><call pos:start="105:13" pos:end="105:126"><name pos:start="105:13" pos:end="105:18">av_log</name><argument_list pos:start="105:19" pos:end="105:126">(<argument pos:start="105:20" pos:end="105:29"><expr pos:start="105:20" pos:end="105:29"><name pos:start="105:20" pos:end="105:29"><name pos:start="105:20" pos:end="105:20">h</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:23">s</name><operator pos:start="105:24" pos:end="105:24">.</operator><name pos:start="105:25" pos:end="105:29">avctx</name></name></expr></argument>, <argument pos:start="105:32" pos:end="105:43"><expr pos:start="105:32" pos:end="105:43"><name pos:start="105:32" pos:end="105:43">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="105:46" pos:end="105:74"><expr pos:start="105:46" pos:end="105:74"><literal type="string" pos:start="105:46" pos:end="105:74">"NAL %d at %d/%d length %d\n"</literal></expr></argument>, <argument pos:start="105:77" pos:end="105:92"><expr pos:start="105:77" pos:end="105:92"><name pos:start="105:77" pos:end="105:92"><name pos:start="105:77" pos:end="105:77">h</name><operator pos:start="105:78" pos:end="105:79">-&gt;</operator><name pos:start="105:80" pos:end="105:92">nal_unit_type</name></name></expr></argument>, <argument pos:start="105:95" pos:end="105:103"><expr pos:start="105:95" pos:end="105:103"><name pos:start="105:95" pos:end="105:103">buf_index</name></expr></argument>, <argument pos:start="105:106" pos:end="105:113"><expr pos:start="105:106" pos:end="105:113"><name pos:start="105:106" pos:end="105:113">buf_size</name></expr></argument>, <argument pos:start="105:116" pos:end="105:125"><expr pos:start="105:116" pos:end="105:125"><name pos:start="105:116" pos:end="105:125">dst_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="111:9" pos:end="113:111"><if pos:start="111:9" pos:end="113:111">if <condition pos:start="111:12" pos:end="111:47">(<expr pos:start="111:13" pos:end="111:46"><name pos:start="111:13" pos:end="111:21"><name pos:start="111:13" pos:end="111:13">h</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:21">is_avc</name></name> <operator pos:start="111:23" pos:end="111:24">&amp;&amp;</operator> <operator pos:start="111:26" pos:end="111:26">(</operator><name pos:start="111:27" pos:end="111:33">nalsize</name> <operator pos:start="111:35" pos:end="111:36">!=</operator> <name pos:start="111:38" pos:end="111:45">consumed</name><operator pos:start="111:46" pos:end="111:46">)</operator></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:111"><block_content pos:start="113:13" pos:end="113:111">

            <expr_stmt pos:start="113:13" pos:end="113:111"><expr pos:start="113:13" pos:end="113:110"><call pos:start="113:13" pos:end="113:110"><name pos:start="113:13" pos:end="113:18">av_log</name><argument_list pos:start="113:19" pos:end="113:110">(<argument pos:start="113:20" pos:end="113:29"><expr pos:start="113:20" pos:end="113:29"><name pos:start="113:20" pos:end="113:29"><name pos:start="113:20" pos:end="113:20">h</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:23">s</name><operator pos:start="113:24" pos:end="113:24">.</operator><name pos:start="113:25" pos:end="113:29">avctx</name></name></expr></argument>, <argument pos:start="113:32" pos:end="113:43"><expr pos:start="113:32" pos:end="113:43"><name pos:start="113:32" pos:end="113:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:46" pos:end="113:90"><expr pos:start="113:46" pos:end="113:90"><literal type="string" pos:start="113:46" pos:end="113:90">"AVC: Consumed only %d bytes instead of %d\n"</literal></expr></argument>, <argument pos:start="113:93" pos:end="113:100"><expr pos:start="113:93" pos:end="113:100"><name pos:start="113:93" pos:end="113:100">consumed</name></expr></argument>, <argument pos:start="113:103" pos:end="113:109"><expr pos:start="113:103" pos:end="113:109"><name pos:start="113:103" pos:end="113:109">nalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:30"><expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:17">buf_index</name> <operator pos:start="117:19" pos:end="117:20">+=</operator> <name pos:start="117:22" pos:end="117:29">consumed</name></expr>;</expr_stmt>



        <if_stmt pos:start="121:9" pos:end="125:21"><if pos:start="121:9" pos:end="125:21">if<condition pos:start="121:11" pos:end="123:77">(  <expr pos:start="121:14" pos:end="123:76"><operator pos:start="121:14" pos:end="121:14">(</operator><name pos:start="121:15" pos:end="121:25"><name pos:start="121:15" pos:end="121:15">s</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:25">hurry_up</name></name> <operator pos:start="121:27" pos:end="121:28">==</operator> <literal type="number" pos:start="121:30" pos:end="121:30">1</literal> <operator pos:start="121:32" pos:end="121:33">&amp;&amp;</operator> <name pos:start="121:35" pos:end="121:48"><name pos:start="121:35" pos:end="121:35">h</name><operator pos:start="121:36" pos:end="121:37">-&gt;</operator><name pos:start="121:38" pos:end="121:48">nal_ref_idc</name></name>  <operator pos:start="121:51" pos:end="121:52">==</operator> <literal type="number" pos:start="121:54" pos:end="121:54">0</literal><operator pos:start="121:55" pos:end="121:55">)</operator> <comment type="line" pos:start="121:57" pos:end="121:83">//FIXME dont discard SEI id</comment>

           <operator pos:start="123:12" pos:end="123:13">||</operator><operator pos:start="123:14" pos:end="123:14">(</operator><name pos:start="123:15" pos:end="123:31"><name pos:start="123:15" pos:end="123:19">avctx</name><operator pos:start="123:20" pos:end="123:21">-&gt;</operator><name pos:start="123:22" pos:end="123:31">skip_frame</name></name> <operator pos:start="123:33" pos:end="123:34">&gt;=</operator> <name pos:start="123:36" pos:end="123:51">AVDISCARD_NONREF</name> <operator pos:start="123:53" pos:end="123:54">&amp;&amp;</operator> <name pos:start="123:56" pos:end="123:69"><name pos:start="123:56" pos:end="123:56">h</name><operator pos:start="123:57" pos:end="123:58">-&gt;</operator><name pos:start="123:59" pos:end="123:69">nal_ref_idc</name></name>  <operator pos:start="123:72" pos:end="123:73">==</operator> <literal type="number" pos:start="123:75" pos:end="123:75">0</literal><operator pos:start="123:76" pos:end="123:76">)</operator></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:21"><block_content pos:start="125:13" pos:end="125:21">

            <continue pos:start="125:13" pos:end="125:21">continue;</continue></block_content></block></if></if_stmt>



        <switch pos:start="129:9" pos:end="283:9">switch<condition pos:start="129:15" pos:end="129:32">(<expr pos:start="129:16" pos:end="129:31"><name pos:start="129:16" pos:end="129:31"><name pos:start="129:16" pos:end="129:16">h</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:31">nal_unit_type</name></name></expr>)</condition><block pos:start="129:33" pos:end="283:9">{<block_content pos:start="131:9" pos:end="281:84">

        <case pos:start="131:9" pos:end="131:27">case <expr pos:start="131:14" pos:end="131:26"><name pos:start="131:14" pos:end="131:26">NAL_IDR_SLICE</name></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:19"><expr pos:start="133:13" pos:end="133:18"><call pos:start="133:13" pos:end="133:18"><name pos:start="133:13" pos:end="133:15">idr</name><argument_list pos:start="133:16" pos:end="133:18">(<argument pos:start="133:17" pos:end="133:17"><expr pos:start="133:17" pos:end="133:17"><name pos:start="133:17" pos:end="133:17">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="133:21" pos:end="133:84">//FIXME ensure we don't loose some frames if there is reordering</comment>

        <case pos:start="135:9" pos:end="135:23">case <expr pos:start="135:14" pos:end="135:22"><name pos:start="135:14" pos:end="135:22">NAL_SLICE</name></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:51"><expr pos:start="137:13" pos:end="137:50"><call pos:start="137:13" pos:end="137:50"><name pos:start="137:13" pos:end="137:25">init_get_bits</name><argument_list pos:start="137:26" pos:end="137:50">(<argument pos:start="137:27" pos:end="137:32"><expr pos:start="137:27" pos:end="137:32"><operator pos:start="137:27" pos:end="137:27">&amp;</operator><name pos:start="137:28" pos:end="137:32"><name pos:start="137:28" pos:end="137:28">s</name><operator pos:start="137:29" pos:end="137:30">-&gt;</operator><name pos:start="137:31" pos:end="137:32">gb</name></name></expr></argument>, <argument pos:start="137:35" pos:end="137:37"><expr pos:start="137:35" pos:end="137:37"><name pos:start="137:35" pos:end="137:37">ptr</name></expr></argument>, <argument pos:start="137:40" pos:end="137:49"><expr pos:start="137:40" pos:end="137:49"><name pos:start="137:40" pos:end="137:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="141:36"><expr pos:start="139:13" pos:end="141:35"><name pos:start="139:13" pos:end="139:27"><name pos:start="139:13" pos:end="139:13">h</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:27">intra_gb_ptr</name></name><operator pos:start="139:28" pos:end="139:28">=</operator>

            <name pos:start="141:13" pos:end="141:27"><name pos:start="141:13" pos:end="141:13">h</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:27">inter_gb_ptr</name></name><operator pos:start="141:28" pos:end="141:28">=</operator> <operator pos:start="141:30" pos:end="141:30">&amp;</operator><name pos:start="141:31" pos:end="141:35"><name pos:start="141:31" pos:end="141:31">s</name><operator pos:start="141:32" pos:end="141:33">-&gt;</operator><name pos:start="141:34" pos:end="141:35">gb</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:37"><expr pos:start="143:13" pos:end="143:36"><name pos:start="143:13" pos:end="143:32"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:32">data_partitioning</name></name> <operator pos:start="143:34" pos:end="143:34">=</operator> <literal type="number" pos:start="143:36" pos:end="143:36">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="147:13" pos:end="153:13"><if pos:start="147:13" pos:end="153:13">if<condition pos:start="147:15" pos:end="147:42">(<expr pos:start="147:16" pos:end="147:41"><call pos:start="147:16" pos:end="147:37"><name pos:start="147:16" pos:end="147:34">decode_slice_header</name><argument_list pos:start="147:35" pos:end="147:37">(<argument pos:start="147:36" pos:end="147:36"><expr pos:start="147:36" pos:end="147:36"><name pos:start="147:36" pos:end="147:36">h</name></expr></argument>)</argument_list></call> <operator pos:start="147:39" pos:end="147:39">&lt;</operator> <literal type="number" pos:start="147:41" pos:end="147:41">0</literal></expr>)</condition><block pos:start="147:43" pos:end="153:13">{<block_content pos:start="149:17" pos:end="151:22">

                <expr_stmt pos:start="149:17" pos:end="149:80"><expr pos:start="149:17" pos:end="149:79"><call pos:start="149:17" pos:end="149:79"><name pos:start="149:17" pos:end="149:22">av_log</name><argument_list pos:start="149:23" pos:end="149:79">(<argument pos:start="149:24" pos:end="149:33"><expr pos:start="149:24" pos:end="149:33"><name pos:start="149:24" pos:end="149:33"><name pos:start="149:24" pos:end="149:24">h</name><operator pos:start="149:25" pos:end="149:26">-&gt;</operator><name pos:start="149:27" pos:end="149:27">s</name><operator pos:start="149:28" pos:end="149:28">.</operator><name pos:start="149:29" pos:end="149:33">avctx</name></name></expr></argument>, <argument pos:start="149:36" pos:end="149:47"><expr pos:start="149:36" pos:end="149:47"><name pos:start="149:36" pos:end="149:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="149:50" pos:end="149:78"><expr pos:start="149:50" pos:end="149:78"><literal type="string" pos:start="149:50" pos:end="149:78">"decode_slice_header error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="151:17" pos:end="151:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:83"><expr pos:start="155:13" pos:end="155:82"><name pos:start="155:13" pos:end="155:45"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:34">current_picture_ptr</name><operator pos:start="155:35" pos:end="155:36">-&gt;</operator><name pos:start="155:37" pos:end="155:45">key_frame</name></name><operator pos:start="155:46" pos:end="155:46">=</operator> <operator pos:start="155:48" pos:end="155:48">(</operator><name pos:start="155:49" pos:end="155:64"><name pos:start="155:49" pos:end="155:49">h</name><operator pos:start="155:50" pos:end="155:51">-&gt;</operator><name pos:start="155:52" pos:end="155:64">nal_unit_type</name></name> <operator pos:start="155:66" pos:end="155:67">==</operator> <name pos:start="155:69" pos:end="155:81">NAL_IDR_SLICE</name><operator pos:start="155:82" pos:end="155:82">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="157:13" pos:end="167:32"><if pos:start="157:13" pos:end="167:32">if<condition pos:start="157:15" pos:end="165:52">(<expr pos:start="157:16" pos:end="165:51"><name pos:start="157:16" pos:end="157:37"><name pos:start="157:16" pos:end="157:16">h</name><operator pos:start="157:17" pos:end="157:18">-&gt;</operator><name pos:start="157:19" pos:end="157:37">redundant_pic_count</name></name><operator pos:start="157:38" pos:end="157:39">==</operator><literal type="number" pos:start="157:40" pos:end="157:40">0</literal> <operator pos:start="157:42" pos:end="157:43">&amp;&amp;</operator> <name pos:start="157:45" pos:end="157:55"><name pos:start="157:45" pos:end="157:45">s</name><operator pos:start="157:46" pos:end="157:47">-&gt;</operator><name pos:start="157:48" pos:end="157:55">hurry_up</name></name> <operator pos:start="157:57" pos:end="157:57">&lt;</operator> <literal type="number" pos:start="157:59" pos:end="157:59">5</literal>

               <operator pos:start="159:16" pos:end="159:17">&amp;&amp;</operator> <operator pos:start="159:19" pos:end="159:19">(</operator><name pos:start="159:20" pos:end="159:36"><name pos:start="159:20" pos:end="159:24">avctx</name><operator pos:start="159:25" pos:end="159:26">-&gt;</operator><name pos:start="159:27" pos:end="159:36">skip_frame</name></name> <operator pos:start="159:38" pos:end="159:38">&lt;</operator> <name pos:start="159:40" pos:end="159:55">AVDISCARD_NONREF</name> <operator pos:start="159:57" pos:end="159:58">||</operator> <name pos:start="159:60" pos:end="159:73"><name pos:start="159:60" pos:end="159:60">h</name><operator pos:start="159:61" pos:end="159:62">-&gt;</operator><name pos:start="159:63" pos:end="159:73">nal_ref_idc</name></name><operator pos:start="159:74" pos:end="159:74">)</operator>

               <operator pos:start="161:16" pos:end="161:17">&amp;&amp;</operator> <operator pos:start="161:19" pos:end="161:19">(</operator><name pos:start="161:20" pos:end="161:36"><name pos:start="161:20" pos:end="161:24">avctx</name><operator pos:start="161:25" pos:end="161:26">-&gt;</operator><name pos:start="161:27" pos:end="161:36">skip_frame</name></name> <operator pos:start="161:38" pos:end="161:38">&lt;</operator> <name pos:start="161:40" pos:end="161:54">AVDISCARD_BIDIR</name>  <operator pos:start="161:57" pos:end="161:58">||</operator> <name pos:start="161:60" pos:end="161:72"><name pos:start="161:60" pos:end="161:60">h</name><operator pos:start="161:61" pos:end="161:62">-&gt;</operator><name pos:start="161:63" pos:end="161:72">slice_type</name></name><operator pos:start="161:73" pos:end="161:74">!=</operator><name pos:start="161:75" pos:end="161:80">B_TYPE</name><operator pos:start="161:81" pos:end="161:81">)</operator>

               <operator pos:start="163:16" pos:end="163:17">&amp;&amp;</operator> <operator pos:start="163:19" pos:end="163:19">(</operator><name pos:start="163:20" pos:end="163:36"><name pos:start="163:20" pos:end="163:24">avctx</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:36">skip_frame</name></name> <operator pos:start="163:38" pos:end="163:38">&lt;</operator> <name pos:start="163:40" pos:end="163:55">AVDISCARD_NONKEY</name> <operator pos:start="163:57" pos:end="163:58">||</operator> <name pos:start="163:60" pos:end="163:72"><name pos:start="163:60" pos:end="163:60">h</name><operator pos:start="163:61" pos:end="163:62">-&gt;</operator><name pos:start="163:63" pos:end="163:72">slice_type</name></name><operator pos:start="163:73" pos:end="163:74">==</operator><name pos:start="163:75" pos:end="163:80">I_TYPE</name><operator pos:start="163:81" pos:end="163:81">)</operator>

               <operator pos:start="165:16" pos:end="165:17">&amp;&amp;</operator> <name pos:start="165:19" pos:end="165:35"><name pos:start="165:19" pos:end="165:23">avctx</name><operator pos:start="165:24" pos:end="165:25">-&gt;</operator><name pos:start="165:26" pos:end="165:35">skip_frame</name></name> <operator pos:start="165:37" pos:end="165:37">&lt;</operator> <name pos:start="165:39" pos:end="165:51">AVDISCARD_ALL</name></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:32"><block_content pos:start="167:17" pos:end="167:32">

                <expr_stmt pos:start="167:17" pos:end="167:32"><expr pos:start="167:17" pos:end="167:31"><call pos:start="167:17" pos:end="167:31"><name pos:start="167:17" pos:end="167:28">decode_slice</name><argument_list pos:start="167:29" pos:end="167:31">(<argument pos:start="167:30" pos:end="167:30"><expr pos:start="167:30" pos:end="167:30"><name pos:start="167:30" pos:end="167:30">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="169:13" pos:end="169:18">break;</break>

        <case pos:start="171:9" pos:end="171:21">case <expr pos:start="171:14" pos:end="171:20"><name pos:start="171:14" pos:end="171:20">NAL_DPA</name></expr>:</case>

            <expr_stmt pos:start="173:13" pos:end="173:51"><expr pos:start="173:13" pos:end="173:50"><call pos:start="173:13" pos:end="173:50"><name pos:start="173:13" pos:end="173:25">init_get_bits</name><argument_list pos:start="173:26" pos:end="173:50">(<argument pos:start="173:27" pos:end="173:32"><expr pos:start="173:27" pos:end="173:32"><operator pos:start="173:27" pos:end="173:27">&amp;</operator><name pos:start="173:28" pos:end="173:32"><name pos:start="173:28" pos:end="173:28">s</name><operator pos:start="173:29" pos:end="173:30">-&gt;</operator><name pos:start="173:31" pos:end="173:32">gb</name></name></expr></argument>, <argument pos:start="173:35" pos:end="173:37"><expr pos:start="173:35" pos:end="173:37"><name pos:start="173:35" pos:end="173:37">ptr</name></expr></argument>, <argument pos:start="173:40" pos:end="173:49"><expr pos:start="173:40" pos:end="173:49"><name pos:start="173:40" pos:end="173:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="177:34"><expr pos:start="175:13" pos:end="177:33"><name pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:13">h</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:27">intra_gb_ptr</name></name><operator pos:start="175:28" pos:end="175:28">=</operator>

            <name pos:start="177:13" pos:end="177:27"><name pos:start="177:13" pos:end="177:13">h</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:27">inter_gb_ptr</name></name><operator pos:start="177:28" pos:end="177:28">=</operator> <name pos:start="177:30" pos:end="177:33">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:37"><expr pos:start="179:13" pos:end="179:36"><name pos:start="179:13" pos:end="179:32"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:32">data_partitioning</name></name> <operator pos:start="179:34" pos:end="179:34">=</operator> <literal type="number" pos:start="179:36" pos:end="179:36">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="183:13" pos:end="187:13"><if pos:start="183:13" pos:end="187:13">if<condition pos:start="183:15" pos:end="183:42">(<expr pos:start="183:16" pos:end="183:41"><call pos:start="183:16" pos:end="183:37"><name pos:start="183:16" pos:end="183:34">decode_slice_header</name><argument_list pos:start="183:35" pos:end="183:37">(<argument pos:start="183:36" pos:end="183:36"><expr pos:start="183:36" pos:end="183:36"><name pos:start="183:36" pos:end="183:36">h</name></expr></argument>)</argument_list></call> <operator pos:start="183:39" pos:end="183:39">&lt;</operator> <literal type="number" pos:start="183:41" pos:end="183:41">0</literal></expr>)</condition><block pos:start="183:43" pos:end="187:13">{<block_content pos:start="185:17" pos:end="185:80">

                <expr_stmt pos:start="185:17" pos:end="185:80"><expr pos:start="185:17" pos:end="185:79"><call pos:start="185:17" pos:end="185:79"><name pos:start="185:17" pos:end="185:22">av_log</name><argument_list pos:start="185:23" pos:end="185:79">(<argument pos:start="185:24" pos:end="185:33"><expr pos:start="185:24" pos:end="185:33"><name pos:start="185:24" pos:end="185:33"><name pos:start="185:24" pos:end="185:24">h</name><operator pos:start="185:25" pos:end="185:26">-&gt;</operator><name pos:start="185:27" pos:end="185:27">s</name><operator pos:start="185:28" pos:end="185:28">.</operator><name pos:start="185:29" pos:end="185:33">avctx</name></name></expr></argument>, <argument pos:start="185:36" pos:end="185:47"><expr pos:start="185:36" pos:end="185:47"><name pos:start="185:36" pos:end="185:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:50" pos:end="185:78"><expr pos:start="185:50" pos:end="185:78"><literal type="string" pos:start="185:50" pos:end="185:78">"decode_slice_header error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="189:13" pos:end="189:18">break;</break>

        <case pos:start="191:9" pos:end="191:21">case <expr pos:start="191:14" pos:end="191:20"><name pos:start="191:14" pos:end="191:20">NAL_DPB</name></expr>:</case>

            <expr_stmt pos:start="193:13" pos:end="193:57"><expr pos:start="193:13" pos:end="193:56"><call pos:start="193:13" pos:end="193:56"><name pos:start="193:13" pos:end="193:25">init_get_bits</name><argument_list pos:start="193:26" pos:end="193:56">(<argument pos:start="193:27" pos:end="193:38"><expr pos:start="193:27" pos:end="193:38"><operator pos:start="193:27" pos:end="193:27">&amp;</operator><name pos:start="193:28" pos:end="193:38"><name pos:start="193:28" pos:end="193:28">h</name><operator pos:start="193:29" pos:end="193:30">-&gt;</operator><name pos:start="193:31" pos:end="193:38">intra_gb</name></name></expr></argument>, <argument pos:start="193:41" pos:end="193:43"><expr pos:start="193:41" pos:end="193:43"><name pos:start="193:41" pos:end="193:43">ptr</name></expr></argument>, <argument pos:start="193:46" pos:end="193:55"><expr pos:start="193:46" pos:end="193:55"><name pos:start="193:46" pos:end="193:55">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:42"><expr pos:start="195:13" pos:end="195:41"><name pos:start="195:13" pos:end="195:27"><name pos:start="195:13" pos:end="195:13">h</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:27">intra_gb_ptr</name></name><operator pos:start="195:28" pos:end="195:28">=</operator> <operator pos:start="195:30" pos:end="195:30">&amp;</operator><name pos:start="195:31" pos:end="195:41"><name pos:start="195:31" pos:end="195:31">h</name><operator pos:start="195:32" pos:end="195:33">-&gt;</operator><name pos:start="195:34" pos:end="195:41">intra_gb</name></name></expr>;</expr_stmt>

            <break pos:start="197:13" pos:end="197:18">break;</break>

        <case pos:start="199:9" pos:end="199:21">case <expr pos:start="199:14" pos:end="199:20"><name pos:start="199:14" pos:end="199:20">NAL_DPC</name></expr>:</case>

            <expr_stmt pos:start="201:13" pos:end="201:57"><expr pos:start="201:13" pos:end="201:56"><call pos:start="201:13" pos:end="201:56"><name pos:start="201:13" pos:end="201:25">init_get_bits</name><argument_list pos:start="201:26" pos:end="201:56">(<argument pos:start="201:27" pos:end="201:38"><expr pos:start="201:27" pos:end="201:38"><operator pos:start="201:27" pos:end="201:27">&amp;</operator><name pos:start="201:28" pos:end="201:38"><name pos:start="201:28" pos:end="201:28">h</name><operator pos:start="201:29" pos:end="201:30">-&gt;</operator><name pos:start="201:31" pos:end="201:38">inter_gb</name></name></expr></argument>, <argument pos:start="201:41" pos:end="201:43"><expr pos:start="201:41" pos:end="201:43"><name pos:start="201:41" pos:end="201:43">ptr</name></expr></argument>, <argument pos:start="201:46" pos:end="201:55"><expr pos:start="201:46" pos:end="201:55"><name pos:start="201:46" pos:end="201:55">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:42"><expr pos:start="203:13" pos:end="203:41"><name pos:start="203:13" pos:end="203:27"><name pos:start="203:13" pos:end="203:13">h</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:27">inter_gb_ptr</name></name><operator pos:start="203:28" pos:end="203:28">=</operator> <operator pos:start="203:30" pos:end="203:30">&amp;</operator><name pos:start="203:31" pos:end="203:41"><name pos:start="203:31" pos:end="203:31">h</name><operator pos:start="203:32" pos:end="203:33">-&gt;</operator><name pos:start="203:34" pos:end="203:41">inter_gb</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="207:13" pos:end="221:32"><if pos:start="207:13" pos:end="221:32">if<condition pos:start="207:15" pos:end="219:52">(<expr pos:start="207:16" pos:end="219:51"><name pos:start="207:16" pos:end="207:37"><name pos:start="207:16" pos:end="207:16">h</name><operator pos:start="207:17" pos:end="207:18">-&gt;</operator><name pos:start="207:19" pos:end="207:37">redundant_pic_count</name></name><operator pos:start="207:38" pos:end="207:39">==</operator><literal type="number" pos:start="207:40" pos:end="207:40">0</literal> <operator pos:start="207:42" pos:end="207:43">&amp;&amp;</operator> <name pos:start="207:45" pos:end="207:59"><name pos:start="207:45" pos:end="207:45">h</name><operator pos:start="207:46" pos:end="207:47">-&gt;</operator><name pos:start="207:48" pos:end="207:59">intra_gb_ptr</name></name> <operator pos:start="207:61" pos:end="207:62">&amp;&amp;</operator> <name pos:start="207:64" pos:end="207:83"><name pos:start="207:64" pos:end="207:64">s</name><operator pos:start="207:65" pos:end="207:66">-&gt;</operator><name pos:start="207:67" pos:end="207:83">data_partitioning</name></name>

               <operator pos:start="209:16" pos:end="209:17">&amp;&amp;</operator> <name pos:start="209:19" pos:end="209:40"><name pos:start="209:19" pos:end="209:19">s</name><operator pos:start="209:20" pos:end="209:21">-&gt;</operator><name pos:start="209:22" pos:end="209:40">context_initialized</name></name>

               <operator pos:start="211:16" pos:end="211:17">&amp;&amp;</operator> <name pos:start="211:19" pos:end="211:29"><name pos:start="211:19" pos:end="211:19">s</name><operator pos:start="211:20" pos:end="211:21">-&gt;</operator><name pos:start="211:22" pos:end="211:29">hurry_up</name></name> <operator pos:start="211:31" pos:end="211:31">&lt;</operator> <literal type="number" pos:start="211:33" pos:end="211:33">5</literal>

               <operator pos:start="213:16" pos:end="213:17">&amp;&amp;</operator> <operator pos:start="213:19" pos:end="213:19">(</operator><name pos:start="213:20" pos:end="213:36"><name pos:start="213:20" pos:end="213:24">avctx</name><operator pos:start="213:25" pos:end="213:26">-&gt;</operator><name pos:start="213:27" pos:end="213:36">skip_frame</name></name> <operator pos:start="213:38" pos:end="213:38">&lt;</operator> <name pos:start="213:40" pos:end="213:55">AVDISCARD_NONREF</name> <operator pos:start="213:57" pos:end="213:58">||</operator> <name pos:start="213:60" pos:end="213:73"><name pos:start="213:60" pos:end="213:60">h</name><operator pos:start="213:61" pos:end="213:62">-&gt;</operator><name pos:start="213:63" pos:end="213:73">nal_ref_idc</name></name><operator pos:start="213:74" pos:end="213:74">)</operator>

               <operator pos:start="215:16" pos:end="215:17">&amp;&amp;</operator> <operator pos:start="215:19" pos:end="215:19">(</operator><name pos:start="215:20" pos:end="215:36"><name pos:start="215:20" pos:end="215:24">avctx</name><operator pos:start="215:25" pos:end="215:26">-&gt;</operator><name pos:start="215:27" pos:end="215:36">skip_frame</name></name> <operator pos:start="215:38" pos:end="215:38">&lt;</operator> <name pos:start="215:40" pos:end="215:54">AVDISCARD_BIDIR</name>  <operator pos:start="215:57" pos:end="215:58">||</operator> <name pos:start="215:60" pos:end="215:72"><name pos:start="215:60" pos:end="215:60">h</name><operator pos:start="215:61" pos:end="215:62">-&gt;</operator><name pos:start="215:63" pos:end="215:72">slice_type</name></name><operator pos:start="215:73" pos:end="215:74">!=</operator><name pos:start="215:75" pos:end="215:80">B_TYPE</name><operator pos:start="215:81" pos:end="215:81">)</operator>

               <operator pos:start="217:16" pos:end="217:17">&amp;&amp;</operator> <operator pos:start="217:19" pos:end="217:19">(</operator><name pos:start="217:20" pos:end="217:36"><name pos:start="217:20" pos:end="217:24">avctx</name><operator pos:start="217:25" pos:end="217:26">-&gt;</operator><name pos:start="217:27" pos:end="217:36">skip_frame</name></name> <operator pos:start="217:38" pos:end="217:38">&lt;</operator> <name pos:start="217:40" pos:end="217:55">AVDISCARD_NONKEY</name> <operator pos:start="217:57" pos:end="217:58">||</operator> <name pos:start="217:60" pos:end="217:72"><name pos:start="217:60" pos:end="217:60">h</name><operator pos:start="217:61" pos:end="217:62">-&gt;</operator><name pos:start="217:63" pos:end="217:72">slice_type</name></name><operator pos:start="217:73" pos:end="217:74">==</operator><name pos:start="217:75" pos:end="217:80">I_TYPE</name><operator pos:start="217:81" pos:end="217:81">)</operator>

               <operator pos:start="219:16" pos:end="219:17">&amp;&amp;</operator> <name pos:start="219:19" pos:end="219:35"><name pos:start="219:19" pos:end="219:23">avctx</name><operator pos:start="219:24" pos:end="219:25">-&gt;</operator><name pos:start="219:26" pos:end="219:35">skip_frame</name></name> <operator pos:start="219:37" pos:end="219:37">&lt;</operator> <name pos:start="219:39" pos:end="219:51">AVDISCARD_ALL</name></expr>)</condition><block type="pseudo" pos:start="221:17" pos:end="221:32"><block_content pos:start="221:17" pos:end="221:32">

                <expr_stmt pos:start="221:17" pos:end="221:32"><expr pos:start="221:17" pos:end="221:31"><call pos:start="221:17" pos:end="221:31"><name pos:start="221:17" pos:end="221:28">decode_slice</name><argument_list pos:start="221:29" pos:end="221:31">(<argument pos:start="221:30" pos:end="221:30"><expr pos:start="221:30" pos:end="221:30"><name pos:start="221:30" pos:end="221:30">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        <case pos:start="225:9" pos:end="225:21">case <expr pos:start="225:14" pos:end="225:20"><name pos:start="225:14" pos:end="225:20">NAL_SEI</name></expr>:</case>

            <expr_stmt pos:start="227:13" pos:end="227:51"><expr pos:start="227:13" pos:end="227:50"><call pos:start="227:13" pos:end="227:50"><name pos:start="227:13" pos:end="227:25">init_get_bits</name><argument_list pos:start="227:26" pos:end="227:50">(<argument pos:start="227:27" pos:end="227:32"><expr pos:start="227:27" pos:end="227:32"><operator pos:start="227:27" pos:end="227:27">&amp;</operator><name pos:start="227:28" pos:end="227:32"><name pos:start="227:28" pos:end="227:28">s</name><operator pos:start="227:29" pos:end="227:30">-&gt;</operator><name pos:start="227:31" pos:end="227:32">gb</name></name></expr></argument>, <argument pos:start="227:35" pos:end="227:37"><expr pos:start="227:35" pos:end="227:37"><name pos:start="227:35" pos:end="227:37">ptr</name></expr></argument>, <argument pos:start="227:40" pos:end="227:49"><expr pos:start="227:40" pos:end="227:49"><name pos:start="227:40" pos:end="227:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:26"><expr pos:start="229:13" pos:end="229:25"><call pos:start="229:13" pos:end="229:25"><name pos:start="229:13" pos:end="229:22">decode_sei</name><argument_list pos:start="229:23" pos:end="229:25">(<argument pos:start="229:24" pos:end="229:24"><expr pos:start="229:24" pos:end="229:24"><name pos:start="229:24" pos:end="229:24">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="231:13" pos:end="231:18">break;</break>

        <case pos:start="233:9" pos:end="233:21">case <expr pos:start="233:14" pos:end="233:20"><name pos:start="233:14" pos:end="233:20">NAL_SPS</name></expr>:</case>

            <expr_stmt pos:start="235:13" pos:end="235:51"><expr pos:start="235:13" pos:end="235:50"><call pos:start="235:13" pos:end="235:50"><name pos:start="235:13" pos:end="235:25">init_get_bits</name><argument_list pos:start="235:26" pos:end="235:50">(<argument pos:start="235:27" pos:end="235:32"><expr pos:start="235:27" pos:end="235:32"><operator pos:start="235:27" pos:end="235:27">&amp;</operator><name pos:start="235:28" pos:end="235:32"><name pos:start="235:28" pos:end="235:28">s</name><operator pos:start="235:29" pos:end="235:30">-&gt;</operator><name pos:start="235:31" pos:end="235:32">gb</name></name></expr></argument>, <argument pos:start="235:35" pos:end="235:37"><expr pos:start="235:35" pos:end="235:37"><name pos:start="235:35" pos:end="235:37">ptr</name></expr></argument>, <argument pos:start="235:40" pos:end="235:49"><expr pos:start="235:40" pos:end="235:49"><name pos:start="235:40" pos:end="235:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:40"><expr pos:start="237:13" pos:end="237:39"><call pos:start="237:13" pos:end="237:39"><name pos:start="237:13" pos:end="237:36">decode_seq_parameter_set</name><argument_list pos:start="237:37" pos:end="237:39">(<argument pos:start="237:38" pos:end="237:38"><expr pos:start="237:38" pos:end="237:38"><name pos:start="237:38" pos:end="237:38">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="241:13" pos:end="243:31"><if pos:start="241:13" pos:end="243:31">if<condition pos:start="241:15" pos:end="241:46">(<expr pos:start="241:16" pos:end="241:45"><name pos:start="241:16" pos:end="241:23"><name pos:start="241:16" pos:end="241:16">s</name><operator pos:start="241:17" pos:end="241:18">-&gt;</operator><name pos:start="241:19" pos:end="241:23">flags</name></name><operator pos:start="241:24" pos:end="241:24">&amp;</operator> <name pos:start="241:26" pos:end="241:45">CODEC_FLAG_LOW_DELAY</name></expr>)</condition><block type="pseudo" pos:start="243:17" pos:end="243:31"><block_content pos:start="243:17" pos:end="243:31">

                <expr_stmt pos:start="243:17" pos:end="243:31"><expr pos:start="243:17" pos:end="243:30"><name pos:start="243:17" pos:end="243:28"><name pos:start="243:17" pos:end="243:17">s</name><operator pos:start="243:18" pos:end="243:19">-&gt;</operator><name pos:start="243:20" pos:end="243:28">low_delay</name></name><operator pos:start="243:29" pos:end="243:29">=</operator><literal type="number" pos:start="243:30" pos:end="243:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="247:13" pos:end="249:51"><if pos:start="247:13" pos:end="249:51">if<condition pos:start="247:15" pos:end="247:39">(<expr pos:start="247:16" pos:end="247:38"><name pos:start="247:16" pos:end="247:34"><name pos:start="247:16" pos:end="247:20">avctx</name><operator pos:start="247:21" pos:end="247:22">-&gt;</operator><name pos:start="247:23" pos:end="247:34">has_b_frames</name></name> <operator pos:start="247:36" pos:end="247:36">&lt;</operator> <literal type="number" pos:start="247:38" pos:end="247:38">2</literal></expr>)</condition><block type="pseudo" pos:start="249:17" pos:end="249:51"><block_content pos:start="249:17" pos:end="249:51">

                <expr_stmt pos:start="249:17" pos:end="249:51"><expr pos:start="249:17" pos:end="249:50"><name pos:start="249:17" pos:end="249:35"><name pos:start="249:17" pos:end="249:21">avctx</name><operator pos:start="249:22" pos:end="249:23">-&gt;</operator><name pos:start="249:24" pos:end="249:35">has_b_frames</name></name><operator pos:start="249:36" pos:end="249:36">=</operator> <operator pos:start="249:38" pos:end="249:38">!</operator><name pos:start="249:39" pos:end="249:50"><name pos:start="249:39" pos:end="249:39">s</name><operator pos:start="249:40" pos:end="249:41">-&gt;</operator><name pos:start="249:42" pos:end="249:50">low_delay</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="251:13" pos:end="251:18">break;</break>

        <case pos:start="253:9" pos:end="253:21">case <expr pos:start="253:14" pos:end="253:20"><name pos:start="253:14" pos:end="253:20">NAL_PPS</name></expr>:</case>

            <expr_stmt pos:start="255:13" pos:end="255:51"><expr pos:start="255:13" pos:end="255:50"><call pos:start="255:13" pos:end="255:50"><name pos:start="255:13" pos:end="255:25">init_get_bits</name><argument_list pos:start="255:26" pos:end="255:50">(<argument pos:start="255:27" pos:end="255:32"><expr pos:start="255:27" pos:end="255:32"><operator pos:start="255:27" pos:end="255:27">&amp;</operator><name pos:start="255:28" pos:end="255:32"><name pos:start="255:28" pos:end="255:28">s</name><operator pos:start="255:29" pos:end="255:30">-&gt;</operator><name pos:start="255:31" pos:end="255:32">gb</name></name></expr></argument>, <argument pos:start="255:35" pos:end="255:37"><expr pos:start="255:35" pos:end="255:37"><name pos:start="255:35" pos:end="255:37">ptr</name></expr></argument>, <argument pos:start="255:40" pos:end="255:49"><expr pos:start="255:40" pos:end="255:49"><name pos:start="255:40" pos:end="255:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="259:13" pos:end="259:56"><expr pos:start="259:13" pos:end="259:55"><call pos:start="259:13" pos:end="259:55"><name pos:start="259:13" pos:end="259:40">decode_picture_parameter_set</name><argument_list pos:start="259:41" pos:end="259:55">(<argument pos:start="259:42" pos:end="259:42"><expr pos:start="259:42" pos:end="259:42"><name pos:start="259:42" pos:end="259:42">h</name></expr></argument>, <argument pos:start="259:45" pos:end="259:54"><expr pos:start="259:45" pos:end="259:54"><name pos:start="259:45" pos:end="259:54">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <break pos:start="263:13" pos:end="263:18">break;</break>

        <case pos:start="265:9" pos:end="265:21">case <expr pos:start="265:14" pos:end="265:20"><name pos:start="265:14" pos:end="265:20">NAL_AUD</name></expr>:</case>

        <case pos:start="267:9" pos:end="267:30">case <expr pos:start="267:14" pos:end="267:29"><name pos:start="267:14" pos:end="267:29">NAL_END_SEQUENCE</name></expr>:</case>

        <case pos:start="269:9" pos:end="269:28">case <expr pos:start="269:14" pos:end="269:27"><name pos:start="269:14" pos:end="269:27">NAL_END_STREAM</name></expr>:</case>

        <case pos:start="271:9" pos:end="271:29">case <expr pos:start="271:14" pos:end="271:28"><name pos:start="271:14" pos:end="271:28">NAL_FILLER_DATA</name></expr>:</case>

        <case pos:start="273:9" pos:end="273:25">case <expr pos:start="273:14" pos:end="273:24"><name pos:start="273:14" pos:end="273:24">NAL_SPS_EXT</name></expr>:</case>

        <case pos:start="275:9" pos:end="275:33">case <expr pos:start="275:14" pos:end="275:32"><name pos:start="275:14" pos:end="275:32">NAL_AUXILIARY_SLICE</name></expr>:</case>

            <break pos:start="277:13" pos:end="277:18">break;</break>

        <default pos:start="279:9" pos:end="279:16">default:</default>

            <expr_stmt pos:start="281:13" pos:end="281:84"><expr pos:start="281:13" pos:end="281:83"><call pos:start="281:13" pos:end="281:83"><name pos:start="281:13" pos:end="281:18">av_log</name><argument_list pos:start="281:19" pos:end="281:83">(<argument pos:start="281:20" pos:end="281:24"><expr pos:start="281:20" pos:end="281:24"><name pos:start="281:20" pos:end="281:24">avctx</name></expr></argument>, <argument pos:start="281:27" pos:end="281:38"><expr pos:start="281:27" pos:end="281:38"><name pos:start="281:27" pos:end="281:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="281:41" pos:end="281:64"><expr pos:start="281:41" pos:end="281:64"><literal type="string" pos:start="281:41" pos:end="281:64">"Unknown NAL code: %d\n"</literal></expr></argument>, <argument pos:start="281:67" pos:end="281:82"><expr pos:start="281:67" pos:end="281:82"><name pos:start="281:67" pos:end="281:82"><name pos:start="281:67" pos:end="281:67">h</name><operator pos:start="281:68" pos:end="281:69">-&gt;</operator><name pos:start="281:70" pos:end="281:82">nal_unit_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <if_stmt pos:start="289:5" pos:end="289:49"><if pos:start="289:5" pos:end="289:49">if<condition pos:start="289:7" pos:end="289:31">(<expr pos:start="289:8" pos:end="289:30"><operator pos:start="289:8" pos:end="289:8">!</operator><name pos:start="289:9" pos:end="289:30"><name pos:start="289:9" pos:end="289:9">s</name><operator pos:start="289:10" pos:end="289:11">-&gt;</operator><name pos:start="289:12" pos:end="289:30">current_picture_ptr</name></name></expr>)</condition><block type="pseudo" pos:start="289:33" pos:end="289:49"><block_content pos:start="289:33" pos:end="289:49"> <return pos:start="289:33" pos:end="289:49">return <expr pos:start="289:40" pos:end="289:48"><name pos:start="289:40" pos:end="289:48">buf_index</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="289:51" pos:end="289:60">//no frame</comment>



    <expr_stmt pos:start="293:5" pos:end="293:61"><expr pos:start="293:5" pos:end="293:60"><name pos:start="293:5" pos:end="293:39"><name pos:start="293:5" pos:end="293:5">s</name><operator pos:start="293:6" pos:end="293:7">-&gt;</operator><name pos:start="293:8" pos:end="293:26">current_picture_ptr</name><operator pos:start="293:27" pos:end="293:28">-&gt;</operator><name pos:start="293:29" pos:end="293:39">qscale_type</name></name><operator pos:start="293:40" pos:end="293:40">=</operator> <name pos:start="293:42" pos:end="293:60">FF_QSCALE_TYPE_H264</name></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:52"><expr pos:start="295:5" pos:end="295:51"><name pos:start="295:5" pos:end="295:37"><name pos:start="295:5" pos:end="295:5">s</name><operator pos:start="295:6" pos:end="295:7">-&gt;</operator><name pos:start="295:8" pos:end="295:26">current_picture_ptr</name><operator pos:start="295:27" pos:end="295:28">-&gt;</operator><name pos:start="295:29" pos:end="295:37">pict_type</name></name><operator pos:start="295:38" pos:end="295:38">=</operator> <name pos:start="295:40" pos:end="295:51"><name pos:start="295:40" pos:end="295:40">s</name><operator pos:start="295:41" pos:end="295:42">-&gt;</operator><name pos:start="295:43" pos:end="295:51">pict_type</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="299:5" pos:end="299:50"><expr pos:start="299:5" pos:end="299:49"><name pos:start="299:5" pos:end="299:28"><name pos:start="299:5" pos:end="299:5">h</name><operator pos:start="299:6" pos:end="299:7">-&gt;</operator><name pos:start="299:8" pos:end="299:28">prev_frame_num_offset</name></name><operator pos:start="299:29" pos:end="299:29">=</operator> <name pos:start="299:31" pos:end="299:49"><name pos:start="299:31" pos:end="299:31">h</name><operator pos:start="299:32" pos:end="299:33">-&gt;</operator><name pos:start="299:34" pos:end="299:49">frame_num_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:36"><expr pos:start="301:5" pos:end="301:35"><name pos:start="301:5" pos:end="301:21"><name pos:start="301:5" pos:end="301:5">h</name><operator pos:start="301:6" pos:end="301:7">-&gt;</operator><name pos:start="301:8" pos:end="301:21">prev_frame_num</name></name><operator pos:start="301:22" pos:end="301:22">=</operator> <name pos:start="301:24" pos:end="301:35"><name pos:start="301:24" pos:end="301:24">h</name><operator pos:start="301:25" pos:end="301:26">-&gt;</operator><name pos:start="301:27" pos:end="301:35">frame_num</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="303:5" pos:end="309:5"><if pos:start="303:5" pos:end="309:5">if<condition pos:start="303:7" pos:end="303:41">(<expr pos:start="303:8" pos:end="303:40"><name pos:start="303:8" pos:end="303:40"><name pos:start="303:8" pos:end="303:8">s</name><operator pos:start="303:9" pos:end="303:10">-&gt;</operator><name pos:start="303:11" pos:end="303:29">current_picture_ptr</name><operator pos:start="303:30" pos:end="303:31">-&gt;</operator><name pos:start="303:32" pos:end="303:40">reference</name></name></expr>)</condition><block pos:start="303:42" pos:end="309:5">{<block_content pos:start="305:9" pos:end="307:36">

        <expr_stmt pos:start="305:9" pos:end="305:36"><expr pos:start="305:9" pos:end="305:35"><name pos:start="305:9" pos:end="305:23"><name pos:start="305:9" pos:end="305:9">h</name><operator pos:start="305:10" pos:end="305:11">-&gt;</operator><name pos:start="305:12" pos:end="305:23">prev_poc_msb</name></name><operator pos:start="305:24" pos:end="305:24">=</operator> <name pos:start="305:26" pos:end="305:35"><name pos:start="305:26" pos:end="305:26">h</name><operator pos:start="305:27" pos:end="305:28">-&gt;</operator><name pos:start="305:29" pos:end="305:35">poc_msb</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:36"><expr pos:start="307:9" pos:end="307:35"><name pos:start="307:9" pos:end="307:23"><name pos:start="307:9" pos:end="307:9">h</name><operator pos:start="307:10" pos:end="307:11">-&gt;</operator><name pos:start="307:12" pos:end="307:23">prev_poc_lsb</name></name><operator pos:start="307:24" pos:end="307:24">=</operator> <name pos:start="307:26" pos:end="307:35"><name pos:start="307:26" pos:end="307:26">h</name><operator pos:start="307:27" pos:end="307:28">-&gt;</operator><name pos:start="307:29" pos:end="307:35">poc_lsb</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="311:5" pos:end="313:59"><if pos:start="311:5" pos:end="313:59">if<condition pos:start="311:7" pos:end="311:41">(<expr pos:start="311:8" pos:end="311:40"><name pos:start="311:8" pos:end="311:40"><name pos:start="311:8" pos:end="311:8">s</name><operator pos:start="311:9" pos:end="311:10">-&gt;</operator><name pos:start="311:11" pos:end="311:29">current_picture_ptr</name><operator pos:start="311:30" pos:end="311:31">-&gt;</operator><name pos:start="311:32" pos:end="311:40">reference</name></name></expr>)</condition><block type="pseudo" pos:start="313:9" pos:end="313:59"><block_content pos:start="313:9" pos:end="313:59">

        <expr_stmt pos:start="313:9" pos:end="313:59"><expr pos:start="313:9" pos:end="313:58"><call pos:start="313:9" pos:end="313:58"><name pos:start="313:9" pos:end="313:31">execute_ref_pic_marking</name><argument_list pos:start="313:32" pos:end="313:58">(<argument pos:start="313:33" pos:end="313:33"><expr pos:start="313:33" pos:end="313:33"><name pos:start="313:33" pos:end="313:33">h</name></expr></argument>, <argument pos:start="313:36" pos:end="313:42"><expr pos:start="313:36" pos:end="313:42"><name pos:start="313:36" pos:end="313:42"><name pos:start="313:36" pos:end="313:36">h</name><operator pos:start="313:37" pos:end="313:38">-&gt;</operator><name pos:start="313:39" pos:end="313:42">mmco</name></name></expr></argument>, <argument pos:start="313:45" pos:end="313:57"><expr pos:start="313:45" pos:end="313:57"><name pos:start="313:45" pos:end="313:57"><name pos:start="313:45" pos:end="313:45">h</name><operator pos:start="313:46" pos:end="313:47">-&gt;</operator><name pos:start="313:48" pos:end="313:57">mmco_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="317:5" pos:end="317:23"><expr pos:start="317:5" pos:end="317:22"><call pos:start="317:5" pos:end="317:22"><name pos:start="317:5" pos:end="317:19">ff_er_frame_end</name><argument_list pos:start="317:20" pos:end="317:22">(<argument pos:start="317:21" pos:end="317:21"><expr pos:start="317:21" pos:end="317:21"><name pos:start="317:21" pos:end="317:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="321:5" pos:end="321:21"><expr pos:start="321:5" pos:end="321:20"><call pos:start="321:5" pos:end="321:20"><name pos:start="321:5" pos:end="321:17">MPV_frame_end</name><argument_list pos:start="321:18" pos:end="321:20">(<argument pos:start="321:19" pos:end="321:19"><expr pos:start="321:19" pos:end="321:19"><name pos:start="321:19" pos:end="321:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="325:5" pos:end="325:21">return <expr pos:start="325:12" pos:end="325:20"><name pos:start="325:12" pos:end="325:20">buf_index</name></expr>;</return>

</block_content>}</block></function>
</unit>
