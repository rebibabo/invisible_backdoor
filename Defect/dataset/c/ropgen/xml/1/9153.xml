<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9153.c" pos:tabs="8"><function pos:start="1:1" pos:end="231:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:14">av_opt_set</name><parameter_list pos:start="1:15" pos:end="1:78">(<parameter pos:start="1:16" pos:end="1:24"><decl pos:start="1:16" pos:end="1:24"><type pos:start="1:16" pos:end="1:24"><name pos:start="1:16" pos:end="1:19">void</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:24">obj</name></decl></parameter>, <parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">name</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:59"><decl pos:start="1:45" pos:end="1:59"><type pos:start="1:45" pos:end="1:59"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:54">char</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">val</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:77"><decl pos:start="1:62" pos:end="1:77"><type pos:start="1:62" pos:end="1:77"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:77">search_flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="231:1">{<block_content pos:start="5:5" pos:end="229:27">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">dst</name></decl>, <decl pos:start="7:16" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:26">target_obj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:84"><decl pos:start="9:5" pos:end="9:83"><type pos:start="9:5" pos:end="9:20"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:18">AVOption</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">o</name> <init pos:start="9:23" pos:end="9:83">= <expr pos:start="9:25" pos:end="9:83"><call pos:start="9:25" pos:end="9:83"><name pos:start="9:25" pos:end="9:36">av_opt_find2</name><argument_list pos:start="9:37" pos:end="9:83">(<argument pos:start="9:38" pos:end="9:40"><expr pos:start="9:38" pos:end="9:40"><name pos:start="9:38" pos:end="9:40">obj</name></expr></argument>, <argument pos:start="9:43" pos:end="9:46"><expr pos:start="9:43" pos:end="9:46"><name pos:start="9:43" pos:end="9:46">name</name></expr></argument>, <argument pos:start="9:49" pos:end="9:52"><expr pos:start="9:49" pos:end="9:52"><name pos:start="9:49" pos:end="9:52">NULL</name></expr></argument>, <argument pos:start="9:55" pos:end="9:55"><expr pos:start="9:55" pos:end="9:55"><literal type="number" pos:start="9:55" pos:end="9:55">0</literal></expr></argument>, <argument pos:start="9:58" pos:end="9:69"><expr pos:start="9:58" pos:end="9:69"><name pos:start="9:58" pos:end="9:69">search_flags</name></expr></argument>, <argument pos:start="9:72" pos:end="9:82"><expr pos:start="9:72" pos:end="9:82"><operator pos:start="9:72" pos:end="9:72">&amp;</operator><name pos:start="9:73" pos:end="9:82">target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="11:5" pos:end="13:40"><if pos:start="11:5" pos:end="13:40">if <condition pos:start="11:8" pos:end="11:26">(<expr pos:start="11:9" pos:end="11:25"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:10">o</name> <operator pos:start="11:12" pos:end="11:13">||</operator> <operator pos:start="11:15" pos:end="11:15">!</operator><name pos:start="11:16" pos:end="11:25">target_obj</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:40"><block_content pos:start="13:9" pos:end="13:40">

        <return pos:start="13:9" pos:end="13:40">return <expr pos:start="13:16" pos:end="13:39"><name pos:start="13:16" pos:end="13:39">AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="15:5" pos:end="25:31"><if pos:start="15:5" pos:end="25:31">if <condition pos:start="15:8" pos:end="23:56">(<expr pos:start="15:9" pos:end="23:55"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">val</name> <operator pos:start="15:14" pos:end="15:15">&amp;&amp;</operator> <operator pos:start="15:17" pos:end="15:17">(</operator><name pos:start="15:18" pos:end="15:24"><name pos:start="15:18" pos:end="15:18">o</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:24">type</name></name> <operator pos:start="15:26" pos:end="15:27">!=</operator> <name pos:start="15:29" pos:end="15:46">AV_OPT_TYPE_STRING</name> <operator pos:start="15:48" pos:end="15:49">&amp;&amp;</operator>

                 <name pos:start="17:18" pos:end="17:24"><name pos:start="17:18" pos:end="17:18">o</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:24">type</name></name> <operator pos:start="17:26" pos:end="17:27">!=</operator> <name pos:start="17:29" pos:end="17:49">AV_OPT_TYPE_PIXEL_FMT</name> <operator pos:start="17:51" pos:end="17:52">&amp;&amp;</operator> <name pos:start="17:54" pos:end="17:60"><name pos:start="17:54" pos:end="17:54">o</name><operator pos:start="17:55" pos:end="17:56">-&gt;</operator><name pos:start="17:57" pos:end="17:60">type</name></name> <operator pos:start="17:62" pos:end="17:63">!=</operator> <name pos:start="17:65" pos:end="17:86">AV_OPT_TYPE_SAMPLE_FMT</name> <operator pos:start="17:88" pos:end="17:89">&amp;&amp;</operator>

                 <name pos:start="19:18" pos:end="19:24"><name pos:start="19:18" pos:end="19:18">o</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:24">type</name></name> <operator pos:start="19:26" pos:end="19:27">!=</operator> <name pos:start="19:29" pos:end="19:50">AV_OPT_TYPE_IMAGE_SIZE</name> <operator pos:start="19:52" pos:end="19:53">&amp;&amp;</operator> <name pos:start="19:55" pos:end="19:61"><name pos:start="19:55" pos:end="19:55">o</name><operator pos:start="19:56" pos:end="19:57">-&gt;</operator><name pos:start="19:58" pos:end="19:61">type</name></name> <operator pos:start="19:63" pos:end="19:64">!=</operator> <name pos:start="19:66" pos:end="19:87">AV_OPT_TYPE_VIDEO_RATE</name> <operator pos:start="19:89" pos:end="19:90">&amp;&amp;</operator>

                 <name pos:start="21:18" pos:end="21:24"><name pos:start="21:18" pos:end="21:18">o</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:24">type</name></name> <operator pos:start="21:26" pos:end="21:27">!=</operator> <name pos:start="21:29" pos:end="21:48">AV_OPT_TYPE_DURATION</name> <operator pos:start="21:50" pos:end="21:51">&amp;&amp;</operator> <name pos:start="21:53" pos:end="21:59"><name pos:start="21:53" pos:end="21:53">o</name><operator pos:start="21:54" pos:end="21:55">-&gt;</operator><name pos:start="21:56" pos:end="21:59">type</name></name> <operator pos:start="21:61" pos:end="21:62">!=</operator> <name pos:start="21:64" pos:end="21:80">AV_OPT_TYPE_COLOR</name> <operator pos:start="21:82" pos:end="21:83">&amp;&amp;</operator>

                 <name pos:start="23:18" pos:end="23:24"><name pos:start="23:18" pos:end="23:18">o</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:24">type</name></name> <operator pos:start="23:26" pos:end="23:27">!=</operator> <name pos:start="23:29" pos:end="23:54">AV_OPT_TYPE_CHANNEL_LAYOUT</name><operator pos:start="23:55" pos:end="23:55">)</operator></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:31"><block_content pos:start="25:9" pos:end="25:31">

        <return pos:start="25:9" pos:end="25:31">return <expr pos:start="25:16" pos:end="25:30"><call pos:start="25:16" pos:end="25:30"><name pos:start="25:16" pos:end="25:22">AVERROR</name><argument_list pos:start="25:23" pos:end="25:30">(<argument pos:start="25:24" pos:end="25:29"><expr pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:45"><expr pos:start="29:5" pos:end="29:44"><name pos:start="29:5" pos:end="29:7">dst</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <operator pos:start="29:11" pos:end="29:11">(</operator><operator pos:start="29:12" pos:end="29:12">(</operator><name pos:start="29:13" pos:end="29:19">uint8_t</name><operator pos:start="29:20" pos:end="29:20">*</operator><operator pos:start="29:21" pos:end="29:21">)</operator><name pos:start="29:22" pos:end="29:31">target_obj</name><operator pos:start="29:32" pos:end="29:32">)</operator> <operator pos:start="29:34" pos:end="29:34">+</operator> <name pos:start="29:36" pos:end="29:44"><name pos:start="29:36" pos:end="29:36">o</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:44">offset</name></name></expr>;</expr_stmt>

    <switch pos:start="31:5" pos:end="223:5">switch <condition pos:start="31:12" pos:end="31:20">(<expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:13">o</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:19">type</name></name></expr>)</condition> <block pos:start="31:22" pos:end="223:5">{<block_content pos:start="33:5" pos:end="221:14">

    <case pos:start="33:5" pos:end="33:28">case <expr pos:start="33:10" pos:end="33:27"><name pos:start="33:10" pos:end="33:27">AV_OPT_TYPE_STRING</name></expr>:</case>   <return pos:start="33:32" pos:end="33:67">return <expr pos:start="33:39" pos:end="33:66"><call pos:start="33:39" pos:end="33:66"><name pos:start="33:39" pos:end="33:48">set_string</name><argument_list pos:start="33:49" pos:end="33:66">(<argument pos:start="33:50" pos:end="33:52"><expr pos:start="33:50" pos:end="33:52"><name pos:start="33:50" pos:end="33:52">obj</name></expr></argument>, <argument pos:start="33:55" pos:end="33:55"><expr pos:start="33:55" pos:end="33:55"><name pos:start="33:55" pos:end="33:55">o</name></expr></argument>, <argument pos:start="33:58" pos:end="33:60"><expr pos:start="33:58" pos:end="33:60"><name pos:start="33:58" pos:end="33:60">val</name></expr></argument>, <argument pos:start="33:63" pos:end="33:65"><expr pos:start="33:63" pos:end="33:65"><name pos:start="33:63" pos:end="33:65">dst</name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="35:5" pos:end="35:28">case <expr pos:start="35:10" pos:end="35:27"><name pos:start="35:10" pos:end="35:27">AV_OPT_TYPE_BINARY</name></expr>:</case>   <return pos:start="35:32" pos:end="35:74">return <expr pos:start="35:39" pos:end="35:73"><call pos:start="35:39" pos:end="35:73"><name pos:start="35:39" pos:end="35:55">set_string_binary</name><argument_list pos:start="35:56" pos:end="35:73">(<argument pos:start="35:57" pos:end="35:59"><expr pos:start="35:57" pos:end="35:59"><name pos:start="35:57" pos:end="35:59">obj</name></expr></argument>, <argument pos:start="35:62" pos:end="35:62"><expr pos:start="35:62" pos:end="35:62"><name pos:start="35:62" pos:end="35:62">o</name></expr></argument>, <argument pos:start="35:65" pos:end="35:67"><expr pos:start="35:65" pos:end="35:67"><name pos:start="35:65" pos:end="35:67">val</name></expr></argument>, <argument pos:start="35:70" pos:end="35:72"><expr pos:start="35:70" pos:end="35:72"><name pos:start="35:70" pos:end="35:72">dst</name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="37:5" pos:end="37:27">case <expr pos:start="37:10" pos:end="37:26"><name pos:start="37:10" pos:end="37:26">AV_OPT_TYPE_FLAGS</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:25">case <expr pos:start="39:10" pos:end="39:24"><name pos:start="39:10" pos:end="39:24">AV_OPT_TYPE_INT</name></expr>:</case>

    <case pos:start="41:5" pos:end="41:27">case <expr pos:start="41:10" pos:end="41:26"><name pos:start="41:10" pos:end="41:26">AV_OPT_TYPE_INT64</name></expr>:</case>

    <case pos:start="43:5" pos:end="43:27">case <expr pos:start="43:10" pos:end="43:26"><name pos:start="43:10" pos:end="43:26">AV_OPT_TYPE_FLOAT</name></expr>:</case>

    <case pos:start="45:5" pos:end="45:28">case <expr pos:start="45:10" pos:end="45:27"><name pos:start="45:10" pos:end="45:27">AV_OPT_TYPE_DOUBLE</name></expr>:</case>

    <case pos:start="47:5" pos:end="47:30">case <expr pos:start="47:10" pos:end="47:29"><name pos:start="47:10" pos:end="47:29">AV_OPT_TYPE_RATIONAL</name></expr>:</case> <return pos:start="47:32" pos:end="47:86">return <expr pos:start="47:39" pos:end="47:85"><call pos:start="47:39" pos:end="47:85"><name pos:start="47:39" pos:end="47:55">set_string_number</name><argument_list pos:start="47:56" pos:end="47:85">(<argument pos:start="47:57" pos:end="47:59"><expr pos:start="47:57" pos:end="47:59"><name pos:start="47:57" pos:end="47:59">obj</name></expr></argument>, <argument pos:start="47:62" pos:end="47:71"><expr pos:start="47:62" pos:end="47:71"><name pos:start="47:62" pos:end="47:71">target_obj</name></expr></argument>, <argument pos:start="47:74" pos:end="47:74"><expr pos:start="47:74" pos:end="47:74"><name pos:start="47:74" pos:end="47:74">o</name></expr></argument>, <argument pos:start="47:77" pos:end="47:79"><expr pos:start="47:77" pos:end="47:79"><name pos:start="47:77" pos:end="47:79">val</name></expr></argument>, <argument pos:start="47:82" pos:end="47:84"><expr pos:start="47:82" pos:end="47:84"><name pos:start="47:82" pos:end="47:84">dst</name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="49:5" pos:end="49:32">case <expr pos:start="49:10" pos:end="49:31"><name pos:start="49:10" pos:end="49:31">AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:41">(<expr pos:start="51:13" pos:end="51:40"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:16">val</name> <operator pos:start="51:18" pos:end="51:19">||</operator> <operator pos:start="51:21" pos:end="51:21">!</operator><call pos:start="51:22" pos:end="51:40"><name pos:start="51:22" pos:end="51:27">strcmp</name><argument_list pos:start="51:28" pos:end="51:40">(<argument pos:start="51:29" pos:end="51:31"><expr pos:start="51:29" pos:end="51:31"><name pos:start="51:29" pos:end="51:31">val</name></expr></argument>, <argument pos:start="51:34" pos:end="51:39"><expr pos:start="51:34" pos:end="51:39"><literal type="string" pos:start="51:34" pos:end="51:39">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:43" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:21">

            <expr_stmt pos:start="53:13" pos:end="53:48"><expr pos:start="53:13" pos:end="53:47"><operator pos:start="53:13" pos:end="53:13">*</operator><operator pos:start="53:14" pos:end="53:14">(</operator><name pos:start="53:15" pos:end="53:17">int</name> <operator pos:start="53:19" pos:end="53:19">*</operator><operator pos:start="53:20" pos:end="53:20">)</operator><name pos:start="53:21" pos:end="53:23">dst</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <operator pos:start="53:27" pos:end="53:27">*</operator><operator pos:start="53:28" pos:end="53:28">(</operator><operator pos:start="53:29" pos:end="53:29">(</operator><name pos:start="53:30" pos:end="53:32">int</name> <operator pos:start="53:34" pos:end="53:34">*</operator><operator pos:start="53:35" pos:end="53:35">)</operator><name pos:start="53:36" pos:end="53:38">dst</name> <operator pos:start="53:40" pos:end="53:40">+</operator> <literal type="number" pos:start="53:42" pos:end="53:42">1</literal><operator pos:start="53:43" pos:end="53:43">)</operator> <operator pos:start="53:45" pos:end="53:45">=</operator> <literal type="number" pos:start="53:47" pos:end="53:47">0</literal></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:21">return <expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:62"><expr pos:start="59:9" pos:end="59:61"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:61"><name pos:start="59:15" pos:end="59:33">av_parse_video_size</name><argument_list pos:start="59:34" pos:end="59:61">(<argument pos:start="59:35" pos:end="59:37"><expr pos:start="59:35" pos:end="59:37"><name pos:start="59:35" pos:end="59:37">dst</name></expr></argument>, <argument pos:start="59:40" pos:end="59:55"><expr pos:start="59:40" pos:end="59:55"><operator pos:start="59:40" pos:end="59:40">(</operator><operator pos:start="59:41" pos:end="59:41">(</operator><name pos:start="59:42" pos:end="59:44">int</name> <operator pos:start="59:46" pos:end="59:46">*</operator><operator pos:start="59:47" pos:end="59:47">)</operator><name pos:start="59:48" pos:end="59:50">dst</name><operator pos:start="59:51" pos:end="59:51">)</operator> <operator pos:start="59:53" pos:end="59:53">+</operator> <literal type="number" pos:start="59:55" pos:end="59:55">1</literal></expr></argument>, <argument pos:start="59:58" pos:end="59:60"><expr pos:start="59:58" pos:end="59:60"><name pos:start="59:58" pos:end="59:60">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="63:98"><if pos:start="61:9" pos:end="63:98">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">&lt;</operator> <literal type="number" pos:start="61:19" pos:end="61:19">0</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:98"><block_content pos:start="63:13" pos:end="63:98">

            <expr_stmt pos:start="63:13" pos:end="63:98"><expr pos:start="63:13" pos:end="63:97"><call pos:start="63:13" pos:end="63:97"><name pos:start="63:13" pos:end="63:18">av_log</name><argument_list pos:start="63:19" pos:end="63:97">(<argument pos:start="63:20" pos:end="63:22"><expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">obj</name></expr></argument>, <argument pos:start="63:25" pos:end="63:36"><expr pos:start="63:25" pos:end="63:36"><name pos:start="63:25" pos:end="63:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:39" pos:end="63:91"><expr pos:start="63:39" pos:end="63:91"><literal type="string" pos:start="63:39" pos:end="63:91">"Unable to parse option value \"%s\" as image size\n"</literal></expr></argument>, <argument pos:start="63:94" pos:end="63:96"><expr pos:start="63:94" pos:end="63:96"><name pos:start="63:94" pos:end="63:96">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="65:9" pos:end="65:19">return <expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ret</name></expr>;</return>

    <case pos:start="67:5" pos:end="67:32">case <expr pos:start="67:10" pos:end="67:31"><name pos:start="67:10" pos:end="67:31">AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

        <if_stmt pos:start="69:9" pos:end="77:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:17">(<expr pos:start="69:13" pos:end="69:16"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:16">val</name></expr>)</condition> <block pos:start="69:19" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:34">

            <expr_stmt pos:start="71:13" pos:end="71:34"><expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:33"><name pos:start="71:19" pos:end="71:25">AVERROR</name><argument_list pos:start="71:26" pos:end="71:33">(<argument pos:start="71:27" pos:end="71:32"><expr pos:start="71:27" pos:end="71:32"><name pos:start="71:27" pos:end="71:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="77:9">else <block pos:start="73:16" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:48">

            <expr_stmt pos:start="75:13" pos:end="75:48"><expr pos:start="75:13" pos:end="75:47"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:47"><name pos:start="75:19" pos:end="75:37">av_parse_video_rate</name><argument_list pos:start="75:38" pos:end="75:47">(<argument pos:start="75:39" pos:end="75:41"><expr pos:start="75:39" pos:end="75:41"><name pos:start="75:39" pos:end="75:41">dst</name></expr></argument>, <argument pos:start="75:44" pos:end="75:46"><expr pos:start="75:44" pos:end="75:46"><name pos:start="75:44" pos:end="75:46">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="79:9" pos:end="81:98"><if pos:start="79:9" pos:end="81:98">if <condition pos:start="79:12" pos:end="79:20">(<expr pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">&lt;</operator> <literal type="number" pos:start="79:19" pos:end="79:19">0</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:98"><block_content pos:start="81:13" pos:end="81:98">

            <expr_stmt pos:start="81:13" pos:end="81:98"><expr pos:start="81:13" pos:end="81:97"><call pos:start="81:13" pos:end="81:97"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="81:97">(<argument pos:start="81:20" pos:end="81:22"><expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">obj</name></expr></argument>, <argument pos:start="81:25" pos:end="81:36"><expr pos:start="81:25" pos:end="81:36"><name pos:start="81:25" pos:end="81:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:39" pos:end="81:91"><expr pos:start="81:39" pos:end="81:91"><literal type="string" pos:start="81:39" pos:end="81:91">"Unable to parse option value \"%s\" as video rate\n"</literal></expr></argument>, <argument pos:start="81:94" pos:end="81:96"><expr pos:start="81:94" pos:end="81:96"><name pos:start="81:94" pos:end="81:96">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="83:9" pos:end="83:19">return <expr pos:start="83:16" pos:end="83:18"><name pos:start="83:16" pos:end="83:18">ret</name></expr>;</return>

    <case pos:start="85:5" pos:end="85:31">case <expr pos:start="85:10" pos:end="85:30"><name pos:start="85:10" pos:end="85:30">AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

        <if_stmt pos:start="87:9" pos:end="111:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:41">(<expr pos:start="87:13" pos:end="87:40"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:16">val</name> <operator pos:start="87:18" pos:end="87:19">||</operator> <operator pos:start="87:21" pos:end="87:21">!</operator><call pos:start="87:22" pos:end="87:40"><name pos:start="87:22" pos:end="87:27">strcmp</name><argument_list pos:start="87:28" pos:end="87:40">(<argument pos:start="87:29" pos:end="87:31"><expr pos:start="87:29" pos:end="87:31"><name pos:start="87:29" pos:end="87:31">val</name></expr></argument>, <argument pos:start="87:34" pos:end="87:39"><expr pos:start="87:34" pos:end="87:39"><literal type="string" pos:start="87:34" pos:end="87:39">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:43" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:34">

            <expr_stmt pos:start="89:13" pos:end="89:34"><expr pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <name pos:start="89:19" pos:end="89:33">AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="111:9">else <block pos:start="91:16" pos:end="111:9">{<block_content pos:start="93:13" pos:end="109:13">

            <expr_stmt pos:start="93:13" pos:end="93:38"><expr pos:start="93:13" pos:end="93:37"><name pos:start="93:13" pos:end="93:15">ret</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:37"><name pos:start="93:19" pos:end="93:32">av_get_pix_fmt</name><argument_list pos:start="93:33" pos:end="93:37">(<argument pos:start="93:34" pos:end="93:36"><expr pos:start="93:34" pos:end="93:36"><name pos:start="93:34" pos:end="93:36">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="95:13" pos:end="109:13"><if pos:start="95:13" pos:end="109:13">if <condition pos:start="95:16" pos:end="95:39">(<expr pos:start="95:17" pos:end="95:38"><name pos:start="95:17" pos:end="95:19">ret</name> <operator pos:start="95:21" pos:end="95:22">==</operator> <name pos:start="95:24" pos:end="95:38">AV_PIX_FMT_NONE</name></expr>)</condition> <block pos:start="95:41" pos:end="109:13">{<block_content pos:start="97:17" pos:end="107:17">

                <decl_stmt pos:start="97:17" pos:end="97:27"><decl pos:start="97:17" pos:end="97:26"><type pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:20">char</name> <modifier pos:start="97:22" pos:end="97:22">*</modifier></type><name pos:start="97:23" pos:end="97:26">tail</name></decl>;</decl_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:44"><expr pos:start="99:17" pos:end="99:43"><name pos:start="99:17" pos:end="99:19">ret</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <call pos:start="99:23" pos:end="99:43"><name pos:start="99:23" pos:end="99:28">strtol</name><argument_list pos:start="99:29" pos:end="99:43">(<argument pos:start="99:30" pos:end="99:32"><expr pos:start="99:30" pos:end="99:32"><name pos:start="99:30" pos:end="99:32">val</name></expr></argument>, <argument pos:start="99:35" pos:end="99:39"><expr pos:start="99:35" pos:end="99:39"><operator pos:start="99:35" pos:end="99:35">&amp;</operator><name pos:start="99:36" pos:end="99:39">tail</name></expr></argument>, <argument pos:start="99:42" pos:end="99:42"><expr pos:start="99:42" pos:end="99:42"><literal type="number" pos:start="99:42" pos:end="99:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="101:17" pos:end="107:17"><if pos:start="101:17" pos:end="107:17">if <condition pos:start="101:20" pos:end="101:60">(<expr pos:start="101:21" pos:end="101:59"><operator pos:start="101:21" pos:end="101:21">*</operator><name pos:start="101:22" pos:end="101:25">tail</name> <operator pos:start="101:27" pos:end="101:28">||</operator> <operator pos:start="101:30" pos:end="101:30">(</operator><name pos:start="101:31" pos:end="101:38">unsigned</name><operator pos:start="101:39" pos:end="101:39">)</operator><name pos:start="101:40" pos:end="101:42">ret</name> <operator pos:start="101:44" pos:end="101:45">&gt;=</operator> <name pos:start="101:47" pos:end="101:59">AV_PIX_FMT_NB</name></expr>)</condition> <block pos:start="101:62" pos:end="107:17">{<block_content pos:start="103:21" pos:end="105:43">

                    <expr_stmt pos:start="103:21" pos:end="103:108"><expr pos:start="103:21" pos:end="103:107"><call pos:start="103:21" pos:end="103:107"><name pos:start="103:21" pos:end="103:26">av_log</name><argument_list pos:start="103:27" pos:end="103:107">(<argument pos:start="103:28" pos:end="103:30"><expr pos:start="103:28" pos:end="103:30"><name pos:start="103:28" pos:end="103:30">obj</name></expr></argument>, <argument pos:start="103:33" pos:end="103:44"><expr pos:start="103:33" pos:end="103:44"><name pos:start="103:33" pos:end="103:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:47" pos:end="103:101"><expr pos:start="103:47" pos:end="103:101"><literal type="string" pos:start="103:47" pos:end="103:101">"Unable to parse option value \"%s\" as pixel format\n"</literal></expr></argument>, <argument pos:start="103:104" pos:end="103:106"><expr pos:start="103:104" pos:end="103:106"><name pos:start="103:104" pos:end="103:106">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="105:21" pos:end="105:43">return <expr pos:start="105:28" pos:end="105:42"><call pos:start="105:28" pos:end="105:42"><name pos:start="105:28" pos:end="105:34">AVERROR</name><argument_list pos:start="105:35" pos:end="105:42">(<argument pos:start="105:36" pos:end="105:41"><expr pos:start="105:36" pos:end="105:41"><name pos:start="105:36" pos:end="105:41">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:41"><expr pos:start="113:9" pos:end="113:40"><operator pos:start="113:9" pos:end="113:9">*</operator><operator pos:start="113:10" pos:end="113:10">(</operator>enum <name pos:start="113:16" pos:end="113:28">AVPixelFormat</name> <operator pos:start="113:30" pos:end="113:30">*</operator><operator pos:start="113:31" pos:end="113:31">)</operator><name pos:start="113:32" pos:end="113:34">dst</name> <operator pos:start="113:36" pos:end="113:36">=</operator> <name pos:start="113:38" pos:end="113:40">ret</name></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:17">return <expr pos:start="115:16" pos:end="115:16"><literal type="number" pos:start="115:16" pos:end="115:16">0</literal></expr>;</return>

    <case pos:start="117:5" pos:end="117:32">case <expr pos:start="117:10" pos:end="117:31"><name pos:start="117:10" pos:end="117:31">AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

        <if_stmt pos:start="119:9" pos:end="143:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:41">(<expr pos:start="119:13" pos:end="119:40"><operator pos:start="119:13" pos:end="119:13">!</operator><name pos:start="119:14" pos:end="119:16">val</name> <operator pos:start="119:18" pos:end="119:19">||</operator> <operator pos:start="119:21" pos:end="119:21">!</operator><call pos:start="119:22" pos:end="119:40"><name pos:start="119:22" pos:end="119:27">strcmp</name><argument_list pos:start="119:28" pos:end="119:40">(<argument pos:start="119:29" pos:end="119:31"><expr pos:start="119:29" pos:end="119:31"><name pos:start="119:29" pos:end="119:31">val</name></expr></argument>, <argument pos:start="119:34" pos:end="119:39"><expr pos:start="119:34" pos:end="119:39"><literal type="string" pos:start="119:34" pos:end="119:39">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:43" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:37">

            <expr_stmt pos:start="121:13" pos:end="121:37"><expr pos:start="121:13" pos:end="121:36"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:36">AV_SAMPLE_FMT_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="143:9">else <block pos:start="123:16" pos:end="143:9">{<block_content pos:start="125:13" pos:end="141:13">

            <expr_stmt pos:start="125:13" pos:end="125:41"><expr pos:start="125:13" pos:end="125:40"><name pos:start="125:13" pos:end="125:15">ret</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:40"><name pos:start="125:19" pos:end="125:35">av_get_sample_fmt</name><argument_list pos:start="125:36" pos:end="125:40">(<argument pos:start="125:37" pos:end="125:39"><expr pos:start="125:37" pos:end="125:39"><name pos:start="125:37" pos:end="125:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="141:13"><if pos:start="127:13" pos:end="141:13">if <condition pos:start="127:16" pos:end="127:42">(<expr pos:start="127:17" pos:end="127:41"><name pos:start="127:17" pos:end="127:19">ret</name> <operator pos:start="127:21" pos:end="127:22">==</operator> <name pos:start="127:24" pos:end="127:41">AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block pos:start="127:44" pos:end="141:13">{<block_content pos:start="129:17" pos:end="139:17">

                <decl_stmt pos:start="129:17" pos:end="129:27"><decl pos:start="129:17" pos:end="129:26"><type pos:start="129:17" pos:end="129:22"><name pos:start="129:17" pos:end="129:20">char</name> <modifier pos:start="129:22" pos:end="129:22">*</modifier></type><name pos:start="129:23" pos:end="129:26">tail</name></decl>;</decl_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:44"><expr pos:start="131:17" pos:end="131:43"><name pos:start="131:17" pos:end="131:19">ret</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <call pos:start="131:23" pos:end="131:43"><name pos:start="131:23" pos:end="131:28">strtol</name><argument_list pos:start="131:29" pos:end="131:43">(<argument pos:start="131:30" pos:end="131:32"><expr pos:start="131:30" pos:end="131:32"><name pos:start="131:30" pos:end="131:32">val</name></expr></argument>, <argument pos:start="131:35" pos:end="131:39"><expr pos:start="131:35" pos:end="131:39"><operator pos:start="131:35" pos:end="131:35">&amp;</operator><name pos:start="131:36" pos:end="131:39">tail</name></expr></argument>, <argument pos:start="131:42" pos:end="131:42"><expr pos:start="131:42" pos:end="131:42"><literal type="number" pos:start="131:42" pos:end="131:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="133:17" pos:end="139:17"><if pos:start="133:17" pos:end="139:17">if <condition pos:start="133:20" pos:end="133:63">(<expr pos:start="133:21" pos:end="133:62"><operator pos:start="133:21" pos:end="133:21">*</operator><name pos:start="133:22" pos:end="133:25">tail</name> <operator pos:start="133:27" pos:end="133:28">||</operator> <operator pos:start="133:30" pos:end="133:30">(</operator><name pos:start="133:31" pos:end="133:38">unsigned</name><operator pos:start="133:39" pos:end="133:39">)</operator><name pos:start="133:40" pos:end="133:42">ret</name> <operator pos:start="133:44" pos:end="133:45">&gt;=</operator> <name pos:start="133:47" pos:end="133:62">AV_SAMPLE_FMT_NB</name></expr>)</condition> <block pos:start="133:65" pos:end="139:17">{<block_content pos:start="135:21" pos:end="137:43">

                    <expr_stmt pos:start="135:21" pos:end="135:109"><expr pos:start="135:21" pos:end="135:108"><call pos:start="135:21" pos:end="135:108"><name pos:start="135:21" pos:end="135:26">av_log</name><argument_list pos:start="135:27" pos:end="135:108">(<argument pos:start="135:28" pos:end="135:30"><expr pos:start="135:28" pos:end="135:30"><name pos:start="135:28" pos:end="135:30">obj</name></expr></argument>, <argument pos:start="135:33" pos:end="135:44"><expr pos:start="135:33" pos:end="135:44"><name pos:start="135:33" pos:end="135:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:47" pos:end="135:102"><expr pos:start="135:47" pos:end="135:102"><literal type="string" pos:start="135:47" pos:end="135:102">"Unable to parse option value \"%s\" as sample format\n"</literal></expr></argument>, <argument pos:start="135:105" pos:end="135:107"><expr pos:start="135:105" pos:end="135:107"><name pos:start="135:105" pos:end="135:107">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="137:21" pos:end="137:43">return <expr pos:start="137:28" pos:end="137:42"><call pos:start="137:28" pos:end="137:42"><name pos:start="137:28" pos:end="137:34">AVERROR</name><argument_list pos:start="137:35" pos:end="137:42">(<argument pos:start="137:36" pos:end="137:41"><expr pos:start="137:36" pos:end="137:41"><name pos:start="137:36" pos:end="137:41">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:42"><expr pos:start="145:9" pos:end="145:41"><operator pos:start="145:9" pos:end="145:9">*</operator><operator pos:start="145:10" pos:end="145:10">(</operator>enum <name pos:start="145:16" pos:end="145:29">AVSampleFormat</name> <operator pos:start="145:31" pos:end="145:31">*</operator><operator pos:start="145:32" pos:end="145:32">)</operator><name pos:start="145:33" pos:end="145:35">dst</name> <operator pos:start="145:37" pos:end="145:37">=</operator> <name pos:start="145:39" pos:end="145:41">ret</name></expr>;</expr_stmt>

        <return pos:start="147:9" pos:end="147:17">return <expr pos:start="147:16" pos:end="147:16"><literal type="number" pos:start="147:16" pos:end="147:16">0</literal></expr>;</return>

    <case pos:start="149:5" pos:end="149:30">case <expr pos:start="149:10" pos:end="149:29"><name pos:start="149:10" pos:end="149:29">AV_OPT_TYPE_DURATION</name></expr>:</case>

        <if_stmt pos:start="151:9" pos:end="165:9"><if pos:start="151:9" pos:end="157:9">if <condition pos:start="151:12" pos:end="151:17">(<expr pos:start="151:13" pos:end="151:16"><operator pos:start="151:13" pos:end="151:13">!</operator><name pos:start="151:14" pos:end="151:16">val</name></expr>)</condition> <block pos:start="151:19" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:21">

            <expr_stmt pos:start="153:13" pos:end="153:32"><expr pos:start="153:13" pos:end="153:31"><operator pos:start="153:13" pos:end="153:13">*</operator><operator pos:start="153:14" pos:end="153:14">(</operator><name pos:start="153:15" pos:end="153:21">int64_t</name> <operator pos:start="153:23" pos:end="153:23">*</operator><operator pos:start="153:24" pos:end="153:24">)</operator><name pos:start="153:25" pos:end="153:27">dst</name> <operator pos:start="153:29" pos:end="153:29">=</operator> <literal type="number" pos:start="153:31" pos:end="153:31">0</literal></expr>;</expr_stmt>

            <return pos:start="155:13" pos:end="155:21">return <expr pos:start="155:20" pos:end="155:20"><literal type="number" pos:start="155:20" pos:end="155:20">0</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="165:9">else <block pos:start="157:16" pos:end="165:9">{<block_content pos:start="159:13" pos:end="163:23">

            <if_stmt pos:start="159:13" pos:end="161:100"><if pos:start="159:13" pos:end="161:100">if <condition pos:start="159:16" pos:end="159:55">(<expr pos:start="159:17" pos:end="159:54"><operator pos:start="159:17" pos:end="159:17">(</operator><name pos:start="159:18" pos:end="159:20">ret</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <call pos:start="159:24" pos:end="159:49"><name pos:start="159:24" pos:end="159:36">av_parse_time</name><argument_list pos:start="159:37" pos:end="159:49">(<argument pos:start="159:38" pos:end="159:40"><expr pos:start="159:38" pos:end="159:40"><name pos:start="159:38" pos:end="159:40">dst</name></expr></argument>, <argument pos:start="159:43" pos:end="159:45"><expr pos:start="159:43" pos:end="159:45"><name pos:start="159:43" pos:end="159:45">val</name></expr></argument>, <argument pos:start="159:48" pos:end="159:48"><expr pos:start="159:48" pos:end="159:48"><literal type="number" pos:start="159:48" pos:end="159:48">1</literal></expr></argument>)</argument_list></call><operator pos:start="159:50" pos:end="159:50">)</operator> <operator pos:start="159:52" pos:end="159:52">&lt;</operator> <literal type="number" pos:start="159:54" pos:end="159:54">0</literal></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:100"><block_content pos:start="161:17" pos:end="161:100">

                <expr_stmt pos:start="161:17" pos:end="161:100"><expr pos:start="161:17" pos:end="161:99"><call pos:start="161:17" pos:end="161:99"><name pos:start="161:17" pos:end="161:22">av_log</name><argument_list pos:start="161:23" pos:end="161:99">(<argument pos:start="161:24" pos:end="161:26"><expr pos:start="161:24" pos:end="161:26"><name pos:start="161:24" pos:end="161:26">obj</name></expr></argument>, <argument pos:start="161:29" pos:end="161:40"><expr pos:start="161:29" pos:end="161:40"><name pos:start="161:29" pos:end="161:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:43" pos:end="161:93"><expr pos:start="161:43" pos:end="161:93"><literal type="string" pos:start="161:43" pos:end="161:93">"Unable to parse option value \"%s\" as duration\n"</literal></expr></argument>, <argument pos:start="161:96" pos:end="161:98"><expr pos:start="161:96" pos:end="161:98"><name pos:start="161:96" pos:end="161:98">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return pos:start="163:13" pos:end="163:23">return <expr pos:start="163:20" pos:end="163:22"><name pos:start="163:20" pos:end="163:22">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    <case pos:start="169:5" pos:end="169:27">case <expr pos:start="169:10" pos:end="169:26"><name pos:start="169:10" pos:end="169:26">AV_OPT_TYPE_COLOR</name></expr>:</case>

        <if_stmt pos:start="171:9" pos:end="185:9"><if pos:start="171:9" pos:end="175:9">if <condition pos:start="171:12" pos:end="171:17">(<expr pos:start="171:13" pos:end="171:16"><operator pos:start="171:13" pos:end="171:13">!</operator><name pos:start="171:14" pos:end="171:16">val</name></expr>)</condition> <block pos:start="171:19" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:21">

            <return pos:start="173:13" pos:end="173:21">return <expr pos:start="173:20" pos:end="173:20"><literal type="number" pos:start="173:20" pos:end="173:20">0</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="175:11" pos:end="185:9">else <block pos:start="175:16" pos:end="185:9">{<block_content pos:start="177:13" pos:end="183:23">

            <expr_stmt pos:start="177:13" pos:end="177:52"><expr pos:start="177:13" pos:end="177:51"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <call pos:start="177:19" pos:end="177:51"><name pos:start="177:19" pos:end="177:32">av_parse_color</name><argument_list pos:start="177:33" pos:end="177:51">(<argument pos:start="177:34" pos:end="177:36"><expr pos:start="177:34" pos:end="177:36"><name pos:start="177:34" pos:end="177:36">dst</name></expr></argument>, <argument pos:start="177:39" pos:end="177:41"><expr pos:start="177:39" pos:end="177:41"><name pos:start="177:39" pos:end="177:41">val</name></expr></argument>, <argument pos:start="177:44" pos:end="177:45"><expr pos:start="177:44" pos:end="177:45"><operator pos:start="177:44" pos:end="177:44">-</operator><literal type="number" pos:start="177:45" pos:end="177:45">1</literal></expr></argument>, <argument pos:start="177:48" pos:end="177:50"><expr pos:start="177:48" pos:end="177:50"><name pos:start="177:48" pos:end="177:50">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="181:97"><if pos:start="179:13" pos:end="181:97">if <condition pos:start="179:16" pos:end="179:24">(<expr pos:start="179:17" pos:end="179:23"><name pos:start="179:17" pos:end="179:19">ret</name> <operator pos:start="179:21" pos:end="179:21">&lt;</operator> <literal type="number" pos:start="179:23" pos:end="179:23">0</literal></expr>)</condition><block type="pseudo" pos:start="181:17" pos:end="181:97"><block_content pos:start="181:17" pos:end="181:97">

                <expr_stmt pos:start="181:17" pos:end="181:97"><expr pos:start="181:17" pos:end="181:96"><call pos:start="181:17" pos:end="181:96"><name pos:start="181:17" pos:end="181:22">av_log</name><argument_list pos:start="181:23" pos:end="181:96">(<argument pos:start="181:24" pos:end="181:26"><expr pos:start="181:24" pos:end="181:26"><name pos:start="181:24" pos:end="181:26">obj</name></expr></argument>, <argument pos:start="181:29" pos:end="181:40"><expr pos:start="181:29" pos:end="181:40"><name pos:start="181:29" pos:end="181:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="181:43" pos:end="181:90"><expr pos:start="181:43" pos:end="181:90"><literal type="string" pos:start="181:43" pos:end="181:90">"Unable to parse option value \"%s\" as color\n"</literal></expr></argument>, <argument pos:start="181:93" pos:end="181:95"><expr pos:start="181:93" pos:end="181:95"><name pos:start="181:93" pos:end="181:95">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return pos:start="183:13" pos:end="183:23">return <expr pos:start="183:20" pos:end="183:22"><name pos:start="183:20" pos:end="183:22">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <break pos:start="187:9" pos:end="187:14">break;</break>

    <case pos:start="189:5" pos:end="189:36">case <expr pos:start="189:10" pos:end="189:35"><name pos:start="189:10" pos:end="189:35">AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

        <if_stmt pos:start="191:9" pos:end="219:9"><if pos:start="191:9" pos:end="195:9">if <condition pos:start="191:12" pos:end="191:41">(<expr pos:start="191:13" pos:end="191:40"><operator pos:start="191:13" pos:end="191:13">!</operator><name pos:start="191:14" pos:end="191:16">val</name> <operator pos:start="191:18" pos:end="191:19">||</operator> <operator pos:start="191:21" pos:end="191:21">!</operator><call pos:start="191:22" pos:end="191:40"><name pos:start="191:22" pos:end="191:27">strcmp</name><argument_list pos:start="191:28" pos:end="191:40">(<argument pos:start="191:29" pos:end="191:31"><expr pos:start="191:29" pos:end="191:31"><name pos:start="191:29" pos:end="191:31">val</name></expr></argument>, <argument pos:start="191:34" pos:end="191:39"><expr pos:start="191:34" pos:end="191:39"><literal type="string" pos:start="191:34" pos:end="191:39">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:43" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:32">

            <expr_stmt pos:start="193:13" pos:end="193:32"><expr pos:start="193:13" pos:end="193:31"><operator pos:start="193:13" pos:end="193:13">*</operator><operator pos:start="193:14" pos:end="193:14">(</operator><name pos:start="193:15" pos:end="193:21">int64_t</name> <operator pos:start="193:23" pos:end="193:23">*</operator><operator pos:start="193:24" pos:end="193:24">)</operator><name pos:start="193:25" pos:end="193:27">dst</name> <operator pos:start="193:29" pos:end="193:29">=</operator> <literal type="number" pos:start="193:31" pos:end="193:31">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="195:11" pos:end="219:9">else <block pos:start="195:16" pos:end="219:9">{<block_content pos:start="199:13" pos:end="217:23">

<cpp:if pos:start="197:1" pos:end="197:36">#<cpp:directive pos:start="197:2" pos:end="197:3">if</cpp:directive> <expr pos:start="197:5" pos:end="197:36"><name pos:start="197:5" pos:end="197:36">FF_API_GET_CHANNEL_LAYOUT_COMPAT</name></expr></cpp:if>

            <decl_stmt pos:start="199:13" pos:end="202:0"><decl pos:start="199:13" pos:end="199:54"><type pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:19">int64_t</name></type> <name pos:start="199:21" pos:end="199:22">cl</name> <init pos:start="199:24" pos:end="199:54">= <expr pos:start="199:26" pos:end="199:54"><call pos:start="199:26" pos:end="199:54"><name pos:start="199:26" pos:end="199:46">ff_get_channel_layout</name><argument_list pos:start="199:47" pos:end="199:54">(<argument pos:start="199:48" pos:end="199:50"><expr pos:start="199:48" pos:end="199:50"><name pos:start="199:48" pos:end="199:50">val</name></expr></argument>, <argument pos:start="199:53" pos:end="199:53"><expr pos:start="199:53" pos:end="199:53"><literal type="number" pos:start="199:53" pos:end="199:53">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="201:1" pos:end="201:5">#<cpp:directive pos:start="201:2" pos:end="201:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="203:13" pos:end="206:0"><decl pos:start="203:13" pos:end="203:51"><type pos:start="203:13" pos:end="203:19"><name pos:start="203:13" pos:end="203:19">int64_t</name></type> <name pos:start="203:21" pos:end="203:22">cl</name> <init pos:start="203:24" pos:end="203:51">= <expr pos:start="203:26" pos:end="203:51"><call pos:start="203:26" pos:end="203:51"><name pos:start="203:26" pos:end="203:46">av_get_channel_layout</name><argument_list pos:start="203:47" pos:end="203:51">(<argument pos:start="203:48" pos:end="203:50"><expr pos:start="203:48" pos:end="203:50"><name pos:start="203:48" pos:end="203:50">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="205:1" pos:end="205:6">#<cpp:directive pos:start="205:2" pos:end="205:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="207:13" pos:end="213:13"><if pos:start="207:13" pos:end="213:13">if <condition pos:start="207:16" pos:end="207:20">(<expr pos:start="207:17" pos:end="207:19"><operator pos:start="207:17" pos:end="207:17">!</operator><name pos:start="207:18" pos:end="207:19">cl</name></expr>)</condition> <block pos:start="207:22" pos:end="213:13">{<block_content pos:start="209:17" pos:end="211:38">

                <expr_stmt pos:start="209:17" pos:end="209:106"><expr pos:start="209:17" pos:end="209:105"><call pos:start="209:17" pos:end="209:105"><name pos:start="209:17" pos:end="209:22">av_log</name><argument_list pos:start="209:23" pos:end="209:105">(<argument pos:start="209:24" pos:end="209:26"><expr pos:start="209:24" pos:end="209:26"><name pos:start="209:24" pos:end="209:26">obj</name></expr></argument>, <argument pos:start="209:29" pos:end="209:40"><expr pos:start="209:29" pos:end="209:40"><name pos:start="209:29" pos:end="209:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="209:43" pos:end="209:99"><expr pos:start="209:43" pos:end="209:99"><literal type="string" pos:start="209:43" pos:end="209:99">"Unable to parse option value \"%s\" as channel layout\n"</literal></expr></argument>, <argument pos:start="209:102" pos:end="209:104"><expr pos:start="209:102" pos:end="209:104"><name pos:start="209:102" pos:end="209:104">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:38"><expr pos:start="211:17" pos:end="211:37"><name pos:start="211:17" pos:end="211:19">ret</name> <operator pos:start="211:21" pos:end="211:21">=</operator> <call pos:start="211:23" pos:end="211:37"><name pos:start="211:23" pos:end="211:29">AVERROR</name><argument_list pos:start="211:30" pos:end="211:37">(<argument pos:start="211:31" pos:end="211:36"><expr pos:start="211:31" pos:end="211:36"><name pos:start="211:31" pos:end="211:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:33"><expr pos:start="215:13" pos:end="215:32"><operator pos:start="215:13" pos:end="215:13">*</operator><operator pos:start="215:14" pos:end="215:14">(</operator><name pos:start="215:15" pos:end="215:21">int64_t</name> <operator pos:start="215:23" pos:end="215:23">*</operator><operator pos:start="215:24" pos:end="215:24">)</operator><name pos:start="215:25" pos:end="215:27">dst</name> <operator pos:start="215:29" pos:end="215:29">=</operator> <name pos:start="215:31" pos:end="215:32">cl</name></expr>;</expr_stmt>

            <return pos:start="217:13" pos:end="217:23">return <expr pos:start="217:20" pos:end="217:22"><name pos:start="217:20" pos:end="217:22">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <break pos:start="221:9" pos:end="221:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="227:5" pos:end="227:56"><expr pos:start="227:5" pos:end="227:55"><call pos:start="227:5" pos:end="227:55"><name pos:start="227:5" pos:end="227:10">av_log</name><argument_list pos:start="227:11" pos:end="227:55">(<argument pos:start="227:12" pos:end="227:14"><expr pos:start="227:12" pos:end="227:14"><name pos:start="227:12" pos:end="227:14">obj</name></expr></argument>, <argument pos:start="227:17" pos:end="227:28"><expr pos:start="227:17" pos:end="227:28"><name pos:start="227:17" pos:end="227:28">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="227:31" pos:end="227:54"><expr pos:start="227:31" pos:end="227:54"><literal type="string" pos:start="227:31" pos:end="227:54">"Invalid option type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="229:5" pos:end="229:27">return <expr pos:start="229:12" pos:end="229:26"><call pos:start="229:12" pos:end="229:26"><name pos:start="229:12" pos:end="229:18">AVERROR</name><argument_list pos:start="229:19" pos:end="229:26">(<argument pos:start="229:20" pos:end="229:25"><expr pos:start="229:20" pos:end="229:25"><name pos:start="229:20" pos:end="229:25">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
