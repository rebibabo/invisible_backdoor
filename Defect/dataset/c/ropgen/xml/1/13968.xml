<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13968.c" pos:tabs="8"><function pos:start="1:1" pos:end="196:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">GuestExec</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:25">qmp_guest_exec</name><parameter_list pos:start="1:26" pos:end="11:35">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">path</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:27">bool</name></type> <name pos:start="3:29" pos:end="3:35">has_arg</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:44">strList</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:49">arg</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:35"><decl pos:start="5:24" pos:end="5:35"><type pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:27">bool</name></type> <name pos:start="5:29" pos:end="5:35">has_env</name></decl></parameter>, <parameter pos:start="5:38" pos:end="5:49"><decl pos:start="5:38" pos:end="5:49"><type pos:start="5:38" pos:end="5:49"><name pos:start="5:38" pos:end="5:44">strList</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:49">env</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:42"><decl pos:start="7:24" pos:end="7:42"><type pos:start="7:24" pos:end="7:42"><name pos:start="7:24" pos:end="7:27">bool</name></type> <name pos:start="7:29" pos:end="7:42">has_input_data</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:66"><decl pos:start="7:45" pos:end="7:66"><type pos:start="7:45" pos:end="7:66"><specifier pos:start="7:45" pos:end="7:49">const</specifier> <name pos:start="7:51" pos:end="7:54">char</name> <modifier pos:start="7:56" pos:end="7:56">*</modifier></type><name pos:start="7:57" pos:end="7:66">input_data</name></decl></parameter>,

                       <parameter pos:start="9:24" pos:end="9:46"><decl pos:start="9:24" pos:end="9:46"><type pos:start="9:24" pos:end="9:46"><name pos:start="9:24" pos:end="9:27">bool</name></type> <name pos:start="9:29" pos:end="9:46">has_capture_output</name></decl></parameter>, <parameter pos:start="9:49" pos:end="9:67"><decl pos:start="9:49" pos:end="9:67"><type pos:start="9:49" pos:end="9:67"><name pos:start="9:49" pos:end="9:52">bool</name></type> <name pos:start="9:54" pos:end="9:67">capture_output</name></decl></parameter>,

                       <parameter pos:start="11:24" pos:end="11:34"><decl pos:start="11:24" pos:end="11:34"><type pos:start="11:24" pos:end="11:34"><name pos:start="11:24" pos:end="11:28">Error</name> <modifier pos:start="11:30" pos:end="11:30">*</modifier><modifier pos:start="11:31" pos:end="11:31">*</modifier></type><name pos:start="11:32" pos:end="11:34">err</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="196:1">{<block_content pos:start="15:5" pos:end="194:14">

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">GPid</name></type> <name pos:start="15:10" pos:end="15:12">pid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">GuestExec</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:17">ge</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">GuestExecInfo</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:22">gei</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier><modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:15">argv</name></decl>, <decl pos:start="21:18" pos:end="21:23"><type ref="prev" pos:start="21:5" pos:end="21:11"><modifier pos:start="21:18" pos:end="21:18">*</modifier><modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:23">envp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">strList</name></type> <name pos:start="23:13" pos:end="23:19">arglist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">gboolean</name></type> <name pos:start="25:14" pos:end="25:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">GError</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:16">gerr</name> <init pos:start="27:18" pos:end="27:23">= <expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:31"><decl pos:start="29:5" pos:end="29:14"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">gint</name></type> <name pos:start="29:10" pos:end="29:14">in_fd</name></decl>, <decl pos:start="29:17" pos:end="29:22"><type ref="prev" pos:start="29:5" pos:end="29:8"/><name pos:start="29:17" pos:end="29:22">out_fd</name></decl>, <decl pos:start="29:25" pos:end="29:30"><type ref="prev" pos:start="29:5" pos:end="29:8"/><name pos:start="29:25" pos:end="29:30">err_fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:40"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:14">GIOChannel</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:21">in_ch</name></decl>, <decl pos:start="31:24" pos:end="31:30"><type ref="prev" pos:start="31:5" pos:end="31:16"><modifier pos:start="31:24" pos:end="31:24">*</modifier></type><name pos:start="31:25" pos:end="31:30">out_ch</name></decl>, <decl pos:start="31:33" pos:end="31:39"><type ref="prev" pos:start="31:5" pos:end="31:16"><modifier pos:start="31:33" pos:end="31:33">*</modifier></type><name pos:start="31:34" pos:end="31:39">err_ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:15">GSpawnFlags</name></type> <name pos:start="33:17" pos:end="33:21">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:61"><decl pos:start="35:5" pos:end="35:60"><type pos:start="35:5" pos:end="35:8"><name pos:start="35:5" pos:end="35:8">bool</name></type> <name pos:start="35:10" pos:end="35:19">has_output</name> <init pos:start="35:21" pos:end="35:60">= <expr pos:start="35:23" pos:end="35:60"><operator pos:start="35:23" pos:end="35:23">(</operator><name pos:start="35:24" pos:end="35:41">has_capture_output</name> <operator pos:start="35:43" pos:end="35:44">&amp;&amp;</operator> <name pos:start="35:46" pos:end="35:59">capture_output</name><operator pos:start="35:60" pos:end="35:60">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:26"><decl pos:start="37:5" pos:end="37:25"><type pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:11">uint8_t</name> <modifier pos:start="37:13" pos:end="37:13">*</modifier></type><name pos:start="37:14" pos:end="37:18">input</name> <init pos:start="37:20" pos:end="37:25">= <expr pos:start="37:22" pos:end="37:25"><name pos:start="37:22" pos:end="37:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:22"><decl pos:start="39:5" pos:end="39:21"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:10">size_t</name></type> <name pos:start="39:12" pos:end="39:17">ninput</name> <init pos:start="39:19" pos:end="39:21">= <expr pos:start="39:21" pos:end="39:21"><literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:11">arglist</name><operator pos:start="43:12" pos:end="43:12">.</operator><name pos:start="43:13" pos:end="43:17">value</name></name> <operator pos:start="43:19" pos:end="43:19">=</operator> <operator pos:start="43:21" pos:end="43:21">(</operator><name pos:start="43:22" pos:end="43:25">char</name> <operator pos:start="43:27" pos:end="43:27">*</operator><operator pos:start="43:28" pos:end="43:28">)</operator><name pos:start="43:29" pos:end="43:32">path</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:40"><expr pos:start="45:5" pos:end="45:39"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:11">arglist</name><operator pos:start="45:12" pos:end="45:12">.</operator><name pos:start="45:13" pos:end="45:16">next</name></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <ternary pos:start="45:20" pos:end="45:39"><condition pos:start="45:20" pos:end="45:28"><expr pos:start="45:20" pos:end="45:26"><name pos:start="45:20" pos:end="45:26">has_arg</name></expr> ?</condition><then pos:start="45:30" pos:end="45:32"> <expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:32">arg</name></expr> </then><else pos:start="45:34" pos:end="45:39">: <expr pos:start="45:36" pos:end="45:39"><name pos:start="45:36" pos:end="45:39">NULL</name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="59:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:23">(<expr pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:22">has_input_data</name></expr>)</condition> <block pos:start="49:25" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:9">

        <expr_stmt pos:start="51:9" pos:end="51:61"><expr pos:start="51:9" pos:end="51:60"><name pos:start="51:9" pos:end="51:13">input</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:60"><name pos:start="51:17" pos:end="51:30">qbase64_decode</name><argument_list pos:start="51:31" pos:end="51:60">(<argument pos:start="51:32" pos:end="51:41"><expr pos:start="51:32" pos:end="51:41"><name pos:start="51:32" pos:end="51:41">input_data</name></expr></argument>, <argument pos:start="51:44" pos:end="51:45"><expr pos:start="51:44" pos:end="51:45"><operator pos:start="51:44" pos:end="51:44">-</operator><literal type="number" pos:start="51:45" pos:end="51:45">1</literal></expr></argument>, <argument pos:start="51:48" pos:end="51:54"><expr pos:start="51:48" pos:end="51:54"><operator pos:start="51:48" pos:end="51:48">&amp;</operator><name pos:start="51:49" pos:end="51:54">ninput</name></expr></argument>, <argument pos:start="51:57" pos:end="51:59"><expr pos:start="51:57" pos:end="51:59"><name pos:start="51:57" pos:end="51:59">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:19">(<expr pos:start="53:13" pos:end="53:18"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:18">input</name></expr>)</condition> <block pos:start="53:21" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:24">

            <return pos:start="55:13" pos:end="55:24">return <expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:47"><expr pos:start="63:5" pos:end="63:46"><name pos:start="63:5" pos:end="63:8">argv</name> <operator pos:start="63:10" pos:end="63:10">=</operator> <call pos:start="63:12" pos:end="63:46"><name pos:start="63:12" pos:end="63:30">guest_exec_get_args</name><argument_list pos:start="63:31" pos:end="63:46">(<argument pos:start="63:32" pos:end="63:39"><expr pos:start="63:32" pos:end="63:39"><operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:39">arglist</name></expr></argument>, <argument pos:start="63:42" pos:end="63:45"><expr pos:start="63:42" pos:end="63:45"><name pos:start="63:42" pos:end="63:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:60"><expr pos:start="65:5" pos:end="65:59"><name pos:start="65:5" pos:end="65:8">envp</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <ternary pos:start="65:12" pos:end="65:59"><condition pos:start="65:12" pos:end="65:20"><expr pos:start="65:12" pos:end="65:18"><name pos:start="65:12" pos:end="65:18">has_env</name></expr> ?</condition><then pos:start="65:22" pos:end="65:52"> <expr pos:start="65:22" pos:end="65:52"><call pos:start="65:22" pos:end="65:52"><name pos:start="65:22" pos:end="65:40">guest_exec_get_args</name><argument_list pos:start="65:41" pos:end="65:52">(<argument pos:start="65:42" pos:end="65:44"><expr pos:start="65:42" pos:end="65:44"><name pos:start="65:42" pos:end="65:44">env</name></expr></argument>, <argument pos:start="65:47" pos:end="65:51"><expr pos:start="65:47" pos:end="65:51"><name pos:start="65:47" pos:end="65:51">false</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="65:54" pos:end="65:59">: <expr pos:start="65:56" pos:end="65:59"><name pos:start="65:56" pos:end="65:59">NULL</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="72:0"><expr pos:start="69:5" pos:end="69:59"><name pos:start="69:5" pos:end="69:9">flags</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <name pos:start="69:13" pos:end="69:31">G_SPAWN_SEARCH_PATH</name> <operator pos:start="69:33" pos:end="69:33">|</operator> <name pos:start="69:35" pos:end="69:59">G_SPAWN_DO_NOT_REAP_CHILD</name></expr>;</expr_stmt>

<cpp:if pos:start="71:1" pos:end="71:32">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:32"><call pos:start="71:5" pos:end="71:32"><name pos:start="71:5" pos:end="71:22">GLIB_CHECK_VERSION</name><argument_list pos:start="71:23" pos:end="71:32">(<argument pos:start="71:24" pos:end="71:31"><expr pos:start="71:24" pos:end="71:31"><literal type="number" pos:start="71:24" pos:end="71:24">2</literal><operator pos:start="71:25" pos:end="71:25">,</operator> <literal type="number" pos:start="71:27" pos:end="71:28">33</literal><operator pos:start="71:29" pos:end="71:29">,</operator> <literal type="number" pos:start="71:31" pos:end="71:31">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="73:5" pos:end="76:0"><expr pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:9">flags</name> <operator pos:start="73:11" pos:end="73:12">|=</operator> <name pos:start="73:14" pos:end="73:42">G_SPAWN_SEARCH_PATH_FROM_ENVP</name></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:20">(<expr pos:start="77:9" pos:end="77:19"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:19">has_output</name></expr>)</condition> <block pos:start="77:22" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:73">

        <expr_stmt pos:start="79:9" pos:end="79:73"><expr pos:start="79:9" pos:end="79:72"><name pos:start="79:9" pos:end="79:13">flags</name> <operator pos:start="79:15" pos:end="79:16">|=</operator> <name pos:start="79:18" pos:end="79:43">G_SPAWN_STDOUT_TO_DEV_NULL</name> <operator pos:start="79:45" pos:end="79:45">|</operator> <name pos:start="79:47" pos:end="79:72">G_SPAWN_STDERR_TO_DEV_NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="89:77"><expr pos:start="85:5" pos:end="89:76"><name pos:start="85:5" pos:end="85:7">ret</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="89:76"><name pos:start="85:11" pos:end="85:34">g_spawn_async_with_pipes</name><argument_list pos:start="85:35" pos:end="89:76">(<argument pos:start="85:36" pos:end="85:39"><expr pos:start="85:36" pos:end="85:39"><name pos:start="85:36" pos:end="85:39">NULL</name></expr></argument>, <argument pos:start="85:42" pos:end="85:45"><expr pos:start="85:42" pos:end="85:45"><name pos:start="85:42" pos:end="85:45">argv</name></expr></argument>, <argument pos:start="85:48" pos:end="85:51"><expr pos:start="85:48" pos:end="85:51"><name pos:start="85:48" pos:end="85:51">envp</name></expr></argument>, <argument pos:start="85:54" pos:end="85:58"><expr pos:start="85:54" pos:end="85:58"><name pos:start="85:54" pos:end="85:58">flags</name></expr></argument>,

            <argument pos:start="87:13" pos:end="87:33"><expr pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:33">guest_exec_task_setup</name></expr></argument>, <argument pos:start="87:36" pos:end="87:39"><expr pos:start="87:36" pos:end="87:39"><name pos:start="87:36" pos:end="87:39">NULL</name></expr></argument>, <argument pos:start="87:42" pos:end="87:45"><expr pos:start="87:42" pos:end="87:45"><operator pos:start="87:42" pos:end="87:42">&amp;</operator><name pos:start="87:43" pos:end="87:45">pid</name></expr></argument>, <argument pos:start="87:48" pos:end="87:77"><expr pos:start="87:48" pos:end="87:77"><ternary pos:start="87:48" pos:end="87:77"><condition pos:start="87:48" pos:end="87:63"><expr pos:start="87:48" pos:end="87:61"><name pos:start="87:48" pos:end="87:61">has_input_data</name></expr> ?</condition><then pos:start="87:65" pos:end="87:70"> <expr pos:start="87:65" pos:end="87:70"><operator pos:start="87:65" pos:end="87:65">&amp;</operator><name pos:start="87:66" pos:end="87:70">in_fd</name></expr> </then><else pos:start="87:72" pos:end="87:77">: <expr pos:start="87:74" pos:end="87:77"><name pos:start="87:74" pos:end="87:77">NULL</name></expr></else></ternary></expr></argument>,

            <argument pos:start="89:13" pos:end="89:39"><expr pos:start="89:13" pos:end="89:39"><ternary pos:start="89:13" pos:end="89:39"><condition pos:start="89:13" pos:end="89:24"><expr pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:22">has_output</name></expr> ?</condition><then pos:start="89:26" pos:end="89:32"> <expr pos:start="89:26" pos:end="89:32"><operator pos:start="89:26" pos:end="89:26">&amp;</operator><name pos:start="89:27" pos:end="89:32">out_fd</name></expr> </then><else pos:start="89:34" pos:end="89:39">: <expr pos:start="89:36" pos:end="89:39"><name pos:start="89:36" pos:end="89:39">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="89:42" pos:end="89:68"><expr pos:start="89:42" pos:end="89:68"><ternary pos:start="89:42" pos:end="89:68"><condition pos:start="89:42" pos:end="89:53"><expr pos:start="89:42" pos:end="89:51"><name pos:start="89:42" pos:end="89:51">has_output</name></expr> ?</condition><then pos:start="89:55" pos:end="89:61"> <expr pos:start="89:55" pos:end="89:61"><operator pos:start="89:55" pos:end="89:55">&amp;</operator><name pos:start="89:56" pos:end="89:61">err_fd</name></expr> </then><else pos:start="89:63" pos:end="89:68">: <expr pos:start="89:65" pos:end="89:68"><name pos:start="89:65" pos:end="89:68">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="89:71" pos:end="89:75"><expr pos:start="89:71" pos:end="89:75"><operator pos:start="89:71" pos:end="89:71">&amp;</operator><name pos:start="89:72" pos:end="89:75">gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="99:5"><if pos:start="91:5" pos:end="99:5">if <condition pos:start="91:8" pos:end="91:13">(<expr pos:start="91:9" pos:end="91:12"><operator pos:start="91:9" pos:end="91:9">!</operator><name pos:start="91:10" pos:end="91:12">ret</name></expr>)</condition> <block pos:start="91:15" pos:end="99:5">{<block_content pos:start="93:9" pos:end="97:18">

        <expr_stmt pos:start="93:9" pos:end="93:64"><expr pos:start="93:9" pos:end="93:63"><call pos:start="93:9" pos:end="93:63"><name pos:start="93:9" pos:end="93:18">error_setg</name><argument_list pos:start="93:19" pos:end="93:63">(<argument pos:start="93:20" pos:end="93:22"><expr pos:start="93:20" pos:end="93:22"><name pos:start="93:20" pos:end="93:22">err</name></expr></argument>, <argument pos:start="93:25" pos:end="93:47"><expr pos:start="93:25" pos:end="93:47"><name pos:start="93:25" pos:end="93:47">QERR_QGA_COMMAND_FAILED</name></expr></argument>, <argument pos:start="93:50" pos:end="93:62"><expr pos:start="93:50" pos:end="93:62"><name pos:start="93:50" pos:end="93:62"><name pos:start="93:50" pos:end="93:53">gerr</name><operator pos:start="93:54" pos:end="93:55">-&gt;</operator><name pos:start="93:56" pos:end="93:62">message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:27"><expr pos:start="95:9" pos:end="95:26"><call pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:20">g_error_free</name><argument_list pos:start="95:21" pos:end="95:26">(<argument pos:start="95:22" pos:end="95:25"><expr pos:start="95:22" pos:end="95:25"><name pos:start="95:22" pos:end="95:25">gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:18">goto <name pos:start="97:14" pos:end="97:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:30"><expr pos:start="103:5" pos:end="103:29"><name pos:start="103:5" pos:end="103:6">ge</name> <operator pos:start="103:8" pos:end="103:8">=</operator> <call pos:start="103:10" pos:end="103:29"><name pos:start="103:10" pos:end="103:15">g_new0</name><argument_list pos:start="103:16" pos:end="103:29">(<argument pos:start="103:17" pos:end="103:25"><expr pos:start="103:17" pos:end="103:25"><name pos:start="103:17" pos:end="103:25">GuestExec</name></expr></argument>, <argument pos:start="103:28" pos:end="103:28"><expr pos:start="103:28" pos:end="103:28"><literal type="number" pos:start="103:28" pos:end="103:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:33"><expr pos:start="105:5" pos:end="105:32"><name pos:start="105:5" pos:end="105:11"><name pos:start="105:5" pos:end="105:6">ge</name><operator pos:start="105:7" pos:end="105:8">-&gt;</operator><name pos:start="105:9" pos:end="105:11">pid</name></name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:32"><name pos:start="105:15" pos:end="105:27">gpid_to_int64</name><argument_list pos:start="105:28" pos:end="105:32">(<argument pos:start="105:29" pos:end="105:31"><expr pos:start="105:29" pos:end="105:31"><name pos:start="105:29" pos:end="105:31">pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:35"><expr pos:start="109:5" pos:end="109:34"><name pos:start="109:5" pos:end="109:7">gei</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:34"><name pos:start="109:11" pos:end="109:29">guest_exec_info_add</name><argument_list pos:start="109:30" pos:end="109:34">(<argument pos:start="109:31" pos:end="109:33"><expr pos:start="109:31" pos:end="109:33"><name pos:start="109:31" pos:end="109:33">pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:33"><expr pos:start="111:5" pos:end="111:32"><name pos:start="111:5" pos:end="111:19"><name pos:start="111:5" pos:end="111:7">gei</name><operator pos:start="111:8" pos:end="111:9">-&gt;</operator><name pos:start="111:10" pos:end="111:19">has_output</name></name> <operator pos:start="111:21" pos:end="111:21">=</operator> <name pos:start="111:23" pos:end="111:32">has_output</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:56"><expr pos:start="113:5" pos:end="113:55"><call pos:start="113:5" pos:end="113:55"><name pos:start="113:5" pos:end="113:21">g_child_watch_add</name><argument_list pos:start="113:22" pos:end="113:55">(<argument pos:start="113:23" pos:end="113:25"><expr pos:start="113:23" pos:end="113:25"><name pos:start="113:23" pos:end="113:25">pid</name></expr></argument>, <argument pos:start="113:28" pos:end="113:49"><expr pos:start="113:28" pos:end="113:49"><name pos:start="113:28" pos:end="113:49">guest_exec_child_watch</name></expr></argument>, <argument pos:start="113:52" pos:end="113:54"><expr pos:start="113:52" pos:end="113:54"><name pos:start="113:52" pos:end="113:54">gei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="142:5"><if pos:start="117:5" pos:end="142:5">if <condition pos:start="117:8" pos:end="117:23">(<expr pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:22">has_input_data</name></expr>)</condition> <block pos:start="117:25" pos:end="142:5">{<block_content pos:start="119:9" pos:end="140:74">

        <expr_stmt pos:start="119:9" pos:end="119:29"><expr pos:start="119:9" pos:end="119:28"><name pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:11">gei</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:15">in</name><operator pos:start="119:16" pos:end="119:16">.</operator><name pos:start="119:17" pos:end="119:20">data</name></name> <operator pos:start="119:22" pos:end="119:22">=</operator> <name pos:start="119:24" pos:end="119:28">input</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="124:0"><expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:20"><name pos:start="121:9" pos:end="121:11">gei</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:15">in</name><operator pos:start="121:16" pos:end="121:16">.</operator><name pos:start="121:17" pos:end="121:20">size</name></name> <operator pos:start="121:22" pos:end="121:22">=</operator> <name pos:start="121:24" pos:end="121:29">ninput</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="123:1" pos:end="123:17">#<cpp:directive pos:start="123:2" pos:end="123:6">ifdef</cpp:directive> <name pos:start="123:8" pos:end="123:17">G_OS_WIN32</name></cpp:ifdef>

        <expr_stmt pos:start="125:9" pos:end="128:0"><expr pos:start="125:9" pos:end="125:48"><name pos:start="125:9" pos:end="125:13">in_ch</name> <operator pos:start="125:15" pos:end="125:15">=</operator> <call pos:start="125:17" pos:end="125:48"><name pos:start="125:17" pos:end="125:41">g_io_channel_win32_new_fd</name><argument_list pos:start="125:42" pos:end="125:48">(<argument pos:start="125:43" pos:end="125:47"><expr pos:start="125:43" pos:end="125:47"><name pos:start="125:43" pos:end="125:47">in_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="127:1" pos:end="127:5">#<cpp:directive pos:start="127:2" pos:end="127:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="129:9" pos:end="132:0"><expr pos:start="129:9" pos:end="129:44"><name pos:start="129:9" pos:end="129:13">in_ch</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <call pos:start="129:17" pos:end="129:44"><name pos:start="129:17" pos:end="129:37">g_io_channel_unix_new</name><argument_list pos:start="129:38" pos:end="129:44">(<argument pos:start="129:39" pos:end="129:43"><expr pos:start="129:39" pos:end="129:43"><name pos:start="129:39" pos:end="129:43">in_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="133:9" pos:end="133:53"><expr pos:start="133:9" pos:end="133:52"><call pos:start="133:9" pos:end="133:52"><name pos:start="133:9" pos:end="133:33">g_io_channel_set_encoding</name><argument_list pos:start="133:34" pos:end="133:52">(<argument pos:start="133:35" pos:end="133:39"><expr pos:start="133:35" pos:end="133:39"><name pos:start="133:35" pos:end="133:39">in_ch</name></expr></argument>, <argument pos:start="133:42" pos:end="133:45"><expr pos:start="133:42" pos:end="133:45"><name pos:start="133:42" pos:end="133:45">NULL</name></expr></argument>, <argument pos:start="133:48" pos:end="133:51"><expr pos:start="133:48" pos:end="133:51"><name pos:start="133:48" pos:end="133:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:48"><expr pos:start="135:9" pos:end="135:47"><call pos:start="135:9" pos:end="135:47"><name pos:start="135:9" pos:end="135:33">g_io_channel_set_buffered</name><argument_list pos:start="135:34" pos:end="135:47">(<argument pos:start="135:35" pos:end="135:39"><expr pos:start="135:35" pos:end="135:39"><name pos:start="135:35" pos:end="135:39">in_ch</name></expr></argument>, <argument pos:start="135:42" pos:end="135:46"><expr pos:start="135:42" pos:end="135:46"><name pos:start="135:42" pos:end="135:46">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:64"><expr pos:start="137:9" pos:end="137:63"><call pos:start="137:9" pos:end="137:63"><name pos:start="137:9" pos:end="137:30">g_io_channel_set_flags</name><argument_list pos:start="137:31" pos:end="137:63">(<argument pos:start="137:32" pos:end="137:36"><expr pos:start="137:32" pos:end="137:36"><name pos:start="137:32" pos:end="137:36">in_ch</name></expr></argument>, <argument pos:start="137:39" pos:end="137:56"><expr pos:start="137:39" pos:end="137:56"><name pos:start="137:39" pos:end="137:56">G_IO_FLAG_NONBLOCK</name></expr></argument>, <argument pos:start="137:59" pos:end="137:62"><expr pos:start="137:59" pos:end="137:62"><name pos:start="137:59" pos:end="137:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="140:9" pos:end="140:74"><expr pos:start="140:9" pos:end="140:73"><call pos:start="140:9" pos:end="140:73"><name pos:start="140:9" pos:end="140:22">g_io_add_watch</name><argument_list pos:start="140:23" pos:end="140:73">(<argument pos:start="140:24" pos:end="140:28"><expr pos:start="140:24" pos:end="140:28"><name pos:start="140:24" pos:end="140:28">in_ch</name></expr></argument>, <argument pos:start="140:31" pos:end="140:38"><expr pos:start="140:31" pos:end="140:38"><name pos:start="140:31" pos:end="140:38">G_IO_OUT</name></expr></argument>, <argument pos:start="140:41" pos:end="140:62"><expr pos:start="140:41" pos:end="140:62"><name pos:start="140:41" pos:end="140:62">guest_exec_input_watch</name></expr></argument>, <argument pos:start="140:65" pos:end="140:72"><expr pos:start="140:65" pos:end="140:72"><operator pos:start="140:65" pos:end="140:65">&amp;</operator><name pos:start="140:66" pos:end="140:72"><name pos:start="140:66" pos:end="140:68">gei</name><operator pos:start="140:69" pos:end="140:70">-&gt;</operator><name pos:start="140:71" pos:end="140:72">in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="146:5" pos:end="182:5"><if pos:start="146:5" pos:end="182:5">if <condition pos:start="146:8" pos:end="146:19">(<expr pos:start="146:9" pos:end="146:18"><name pos:start="146:9" pos:end="146:18">has_output</name></expr>)</condition> <block pos:start="146:21" pos:end="182:5">{<block_content pos:start="150:9" pos:end="180:52">

<cpp:ifdef pos:start="148:1" pos:end="148:17">#<cpp:directive pos:start="148:2" pos:end="148:6">ifdef</cpp:directive> <name pos:start="148:8" pos:end="148:17">G_OS_WIN32</name></cpp:ifdef>

        <expr_stmt pos:start="150:9" pos:end="150:51"><expr pos:start="150:9" pos:end="150:50"><name pos:start="150:9" pos:end="150:14">out_ch</name> <operator pos:start="150:16" pos:end="150:16">=</operator> <call pos:start="150:18" pos:end="150:50"><name pos:start="150:18" pos:end="150:42">g_io_channel_win32_new_fd</name><argument_list pos:start="150:43" pos:end="150:50">(<argument pos:start="150:44" pos:end="150:49"><expr pos:start="150:44" pos:end="150:49"><name pos:start="150:44" pos:end="150:49">out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="152:9" pos:end="155:0"><expr pos:start="152:9" pos:end="152:50"><name pos:start="152:9" pos:end="152:14">err_ch</name> <operator pos:start="152:16" pos:end="152:16">=</operator> <call pos:start="152:18" pos:end="152:50"><name pos:start="152:18" pos:end="152:42">g_io_channel_win32_new_fd</name><argument_list pos:start="152:43" pos:end="152:50">(<argument pos:start="152:44" pos:end="152:49"><expr pos:start="152:44" pos:end="152:49"><name pos:start="152:44" pos:end="152:49">err_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="154:1" pos:end="154:5">#<cpp:directive pos:start="154:2" pos:end="154:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="156:9" pos:end="156:47"><expr pos:start="156:9" pos:end="156:46"><name pos:start="156:9" pos:end="156:14">out_ch</name> <operator pos:start="156:16" pos:end="156:16">=</operator> <call pos:start="156:18" pos:end="156:46"><name pos:start="156:18" pos:end="156:38">g_io_channel_unix_new</name><argument_list pos:start="156:39" pos:end="156:46">(<argument pos:start="156:40" pos:end="156:45"><expr pos:start="156:40" pos:end="156:45"><name pos:start="156:40" pos:end="156:45">out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="158:9" pos:end="161:0"><expr pos:start="158:9" pos:end="158:46"><name pos:start="158:9" pos:end="158:14">err_ch</name> <operator pos:start="158:16" pos:end="158:16">=</operator> <call pos:start="158:18" pos:end="158:46"><name pos:start="158:18" pos:end="158:38">g_io_channel_unix_new</name><argument_list pos:start="158:39" pos:end="158:46">(<argument pos:start="158:40" pos:end="158:45"><expr pos:start="158:40" pos:end="158:45"><name pos:start="158:40" pos:end="158:45">err_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="160:1" pos:end="160:6">#<cpp:directive pos:start="160:2" pos:end="160:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="162:9" pos:end="162:54"><expr pos:start="162:9" pos:end="162:53"><call pos:start="162:9" pos:end="162:53"><name pos:start="162:9" pos:end="162:33">g_io_channel_set_encoding</name><argument_list pos:start="162:34" pos:end="162:53">(<argument pos:start="162:35" pos:end="162:40"><expr pos:start="162:35" pos:end="162:40"><name pos:start="162:35" pos:end="162:40">out_ch</name></expr></argument>, <argument pos:start="162:43" pos:end="162:46"><expr pos:start="162:43" pos:end="162:46"><name pos:start="162:43" pos:end="162:46">NULL</name></expr></argument>, <argument pos:start="162:49" pos:end="162:52"><expr pos:start="162:49" pos:end="162:52"><name pos:start="162:49" pos:end="162:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="164:9" pos:end="164:54"><expr pos:start="164:9" pos:end="164:53"><call pos:start="164:9" pos:end="164:53"><name pos:start="164:9" pos:end="164:33">g_io_channel_set_encoding</name><argument_list pos:start="164:34" pos:end="164:53">(<argument pos:start="164:35" pos:end="164:40"><expr pos:start="164:35" pos:end="164:40"><name pos:start="164:35" pos:end="164:40">err_ch</name></expr></argument>, <argument pos:start="164:43" pos:end="164:46"><expr pos:start="164:43" pos:end="164:46"><name pos:start="164:43" pos:end="164:46">NULL</name></expr></argument>, <argument pos:start="164:49" pos:end="164:52"><expr pos:start="164:49" pos:end="164:52"><name pos:start="164:49" pos:end="164:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="166:9" pos:end="166:49"><expr pos:start="166:9" pos:end="166:48"><call pos:start="166:9" pos:end="166:48"><name pos:start="166:9" pos:end="166:33">g_io_channel_set_buffered</name><argument_list pos:start="166:34" pos:end="166:48">(<argument pos:start="166:35" pos:end="166:40"><expr pos:start="166:35" pos:end="166:40"><name pos:start="166:35" pos:end="166:40">out_ch</name></expr></argument>, <argument pos:start="166:43" pos:end="166:47"><expr pos:start="166:43" pos:end="166:47"><name pos:start="166:43" pos:end="166:47">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="168:9" pos:end="168:49"><expr pos:start="168:9" pos:end="168:48"><call pos:start="168:9" pos:end="168:48"><name pos:start="168:9" pos:end="168:33">g_io_channel_set_buffered</name><argument_list pos:start="168:34" pos:end="168:48">(<argument pos:start="168:35" pos:end="168:40"><expr pos:start="168:35" pos:end="168:40"><name pos:start="168:35" pos:end="168:40">err_ch</name></expr></argument>, <argument pos:start="168:43" pos:end="168:47"><expr pos:start="168:43" pos:end="168:47"><name pos:start="168:43" pos:end="168:47">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="170:9" pos:end="170:54"><expr pos:start="170:9" pos:end="170:53"><call pos:start="170:9" pos:end="170:53"><name pos:start="170:9" pos:end="170:39">g_io_channel_set_close_on_unref</name><argument_list pos:start="170:40" pos:end="170:53">(<argument pos:start="170:41" pos:end="170:46"><expr pos:start="170:41" pos:end="170:46"><name pos:start="170:41" pos:end="170:46">out_ch</name></expr></argument>, <argument pos:start="170:49" pos:end="170:52"><expr pos:start="170:49" pos:end="170:52"><name pos:start="170:49" pos:end="170:52">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="172:9" pos:end="172:54"><expr pos:start="172:9" pos:end="172:53"><call pos:start="172:9" pos:end="172:53"><name pos:start="172:9" pos:end="172:39">g_io_channel_set_close_on_unref</name><argument_list pos:start="172:40" pos:end="172:53">(<argument pos:start="172:41" pos:end="172:46"><expr pos:start="172:41" pos:end="172:46"><name pos:start="172:41" pos:end="172:46">err_ch</name></expr></argument>, <argument pos:start="172:49" pos:end="172:52"><expr pos:start="172:49" pos:end="172:52"><name pos:start="172:49" pos:end="172:52">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="174:9" pos:end="176:52"><expr pos:start="174:9" pos:end="176:51"><call pos:start="174:9" pos:end="176:51"><name pos:start="174:9" pos:end="174:22">g_io_add_watch</name><argument_list pos:start="174:23" pos:end="176:51">(<argument pos:start="174:24" pos:end="174:29"><expr pos:start="174:24" pos:end="174:29"><name pos:start="174:24" pos:end="174:29">out_ch</name></expr></argument>, <argument pos:start="174:32" pos:end="174:49"><expr pos:start="174:32" pos:end="174:49"><name pos:start="174:32" pos:end="174:38">G_IO_IN</name> <operator pos:start="174:40" pos:end="174:40">|</operator> <name pos:start="174:42" pos:end="174:49">G_IO_HUP</name></expr></argument>,

                <argument pos:start="176:17" pos:end="176:39"><expr pos:start="176:17" pos:end="176:39"><name pos:start="176:17" pos:end="176:39">guest_exec_output_watch</name></expr></argument>, <argument pos:start="176:42" pos:end="176:50"><expr pos:start="176:42" pos:end="176:50"><operator pos:start="176:42" pos:end="176:42">&amp;</operator><name pos:start="176:43" pos:end="176:50"><name pos:start="176:43" pos:end="176:45">gei</name><operator pos:start="176:46" pos:end="176:47">-&gt;</operator><name pos:start="176:48" pos:end="176:50">out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="178:9" pos:end="180:52"><expr pos:start="178:9" pos:end="180:51"><call pos:start="178:9" pos:end="180:51"><name pos:start="178:9" pos:end="178:22">g_io_add_watch</name><argument_list pos:start="178:23" pos:end="180:51">(<argument pos:start="178:24" pos:end="178:29"><expr pos:start="178:24" pos:end="178:29"><name pos:start="178:24" pos:end="178:29">err_ch</name></expr></argument>, <argument pos:start="178:32" pos:end="178:49"><expr pos:start="178:32" pos:end="178:49"><name pos:start="178:32" pos:end="178:38">G_IO_IN</name> <operator pos:start="178:40" pos:end="178:40">|</operator> <name pos:start="178:42" pos:end="178:49">G_IO_HUP</name></expr></argument>,

                <argument pos:start="180:17" pos:end="180:39"><expr pos:start="180:17" pos:end="180:39"><name pos:start="180:17" pos:end="180:39">guest_exec_output_watch</name></expr></argument>, <argument pos:start="180:42" pos:end="180:50"><expr pos:start="180:42" pos:end="180:50"><operator pos:start="180:42" pos:end="180:42">&amp;</operator><name pos:start="180:43" pos:end="180:50"><name pos:start="180:43" pos:end="180:45">gei</name><operator pos:start="180:46" pos:end="180:47">-&gt;</operator><name pos:start="180:48" pos:end="180:50">err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="186:1" pos:end="186:5"><name pos:start="186:1" pos:end="186:4">done</name>:</label>

    <expr_stmt pos:start="188:5" pos:end="188:17"><expr pos:start="188:5" pos:end="188:16"><call pos:start="188:5" pos:end="188:16"><name pos:start="188:5" pos:end="188:10">g_free</name><argument_list pos:start="188:11" pos:end="188:16">(<argument pos:start="188:12" pos:end="188:15"><expr pos:start="188:12" pos:end="188:15"><name pos:start="188:12" pos:end="188:15">argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="190:5" pos:end="190:17"><expr pos:start="190:5" pos:end="190:16"><call pos:start="190:5" pos:end="190:16"><name pos:start="190:5" pos:end="190:10">g_free</name><argument_list pos:start="190:11" pos:end="190:16">(<argument pos:start="190:12" pos:end="190:15"><expr pos:start="190:12" pos:end="190:15"><name pos:start="190:12" pos:end="190:15">envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="194:5" pos:end="194:14">return <expr pos:start="194:12" pos:end="194:13"><name pos:start="194:12" pos:end="194:13">ge</name></expr>;</return>

</block_content>}</block></function></unit>
