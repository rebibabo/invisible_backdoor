<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18720.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">ff_imdct_calc_sse</name><parameter_list pos:start="1:23" pos:end="3:62">(<parameter pos:start="1:24" pos:end="1:37"><decl pos:start="1:24" pos:end="1:37"><type pos:start="1:24" pos:end="1:37"><name pos:start="1:24" pos:end="1:34">MDCTContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:48">FFTSample</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">output</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:45"><decl pos:start="3:24" pos:end="3:45"><type pos:start="3:24" pos:end="3:45"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:38">FFTSample</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:45">input</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:61"><decl pos:start="3:48" pos:end="3:61"><type pos:start="3:48" pos:end="3:61"><name pos:start="3:48" pos:end="3:56">FFTSample</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:61">tmp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="315:1">{<block_content pos:start="7:5" pos:end="313:6">

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">x86_reg</name></type> <name pos:start="7:13" pos:end="7:13">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">long</name></type> <name pos:start="9:10" pos:end="9:11">n8</name></decl>, <decl pos:start="9:14" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:14" pos:end="9:15">n4</name></decl>, <decl pos:start="9:18" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:18" pos:end="9:19">n2</name></decl>, <decl pos:start="9:22" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:22" pos:end="9:22">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:20"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:18">uint16_t</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:26">revtab</name> <init pos:start="11:28" pos:end="11:42">= <expr pos:start="11:30" pos:end="11:42"><name pos:start="11:30" pos:end="11:42"><name pos:start="11:30" pos:end="11:30">s</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:35">fft</name><operator pos:start="11:36" pos:end="11:36">.</operator><name pos:start="11:37" pos:end="11:42">revtab</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:21"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:19">FFTSample</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:25">tcos</name> <init pos:start="13:27" pos:end="13:35">= <expr pos:start="13:29" pos:end="13:35"><name pos:start="13:29" pos:end="13:35"><name pos:start="13:29" pos:end="13:29">s</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:35">tcos</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:21"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:19">FFTSample</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:25">tsin</name> <init pos:start="15:27" pos:end="15:35">= <expr pos:start="15:29" pos:end="15:35"><name pos:start="15:29" pos:end="15:35"><name pos:start="15:29" pos:end="15:29">s</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:35">tsin</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:21"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:19">FFTSample</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:24">in1</name></decl>, <decl pos:start="17:27" pos:end="17:30"><type ref="prev" pos:start="17:5" pos:end="17:21"><modifier pos:start="17:27" pos:end="17:27">*</modifier></type><name pos:start="17:28" pos:end="17:30">in2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:38"><decl pos:start="19:5" pos:end="19:37"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">FFTComplex</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:17">z</name> <init pos:start="19:19" pos:end="19:37">= <expr pos:start="19:21" pos:end="19:37"><operator pos:start="19:21" pos:end="19:21">(</operator><name pos:start="19:22" pos:end="19:31">FFTComplex</name> <operator pos:start="19:33" pos:end="19:33">*</operator><operator pos:start="19:34" pos:end="19:34">)</operator><name pos:start="19:35" pos:end="19:37">tmp</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:22"><expr pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:5">n</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <literal type="number" pos:start="23:9" pos:end="23:9">1</literal> <operator pos:start="23:11" pos:end="23:12">&lt;&lt;</operator> <name pos:start="23:14" pos:end="23:21"><name pos:start="23:14" pos:end="23:14">s</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:21">nbits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:16"><expr pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:6">n2</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <name pos:start="25:10" pos:end="25:10">n</name> <operator pos:start="25:12" pos:end="25:13">&gt;&gt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:6">n4</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <name pos:start="27:10" pos:end="27:10">n</name> <operator pos:start="27:12" pos:end="27:13">&gt;&gt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="34:0"><expr pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:6">n8</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <name pos:start="29:10" pos:end="29:10">n</name> <operator pos:start="29:12" pos:end="29:13">&gt;&gt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">3</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="33:1" pos:end="33:18">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:18">ARCH_X86_64</name></cpp:ifdef>

    <asm pos:start="35:5" pos:end="44:0">asm <specifier pos:start="35:9" pos:end="35:16">volatile</specifier> ("movaps %0, %%xmm8\n\t"::"m"(*p1m1p1m1));</asm>

<cpp:define pos:start="37:1" pos:end="37:25">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:16">P1M1P1M1</name></cpp:macro> <cpp:value pos:start="37:18" pos:end="37:25">"%%xmm8"</cpp:value></cpp:define>

<cpp:else pos:start="39:1" pos:end="39:5">#<cpp:directive pos:start="39:2" pos:end="39:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="41:1" pos:end="41:21">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:16">P1M1P1M1</name></cpp:macro> <cpp:value pos:start="41:18" pos:end="41:21">"%4"</cpp:value></cpp:define>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="47:5" pos:end="47:22">/* pre rotation */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:16"><expr pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:7">in1</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <name pos:start="49:11" pos:end="49:15">input</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:25"><expr pos:start="51:5" pos:end="51:24"><name pos:start="51:5" pos:end="51:7">in2</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <name pos:start="51:11" pos:end="51:15">input</name> <operator pos:start="51:17" pos:end="51:17">+</operator> <name pos:start="51:19" pos:end="51:20">n2</name> <operator pos:start="51:22" pos:end="51:22">-</operator> <literal type="number" pos:start="51:24" pos:end="51:24">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:32">/* Complex multiplication */</comment>

    <for pos:start="57:5" pos:end="143:5">for <control pos:start="57:9" pos:end="57:31">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">k</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:23"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:17">k</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:22">n4</name></expr>;</condition> <incr pos:start="57:25" pos:end="57:30"><expr pos:start="57:25" pos:end="57:30"><name pos:start="57:25" pos:end="57:25">k</name> <operator pos:start="57:27" pos:end="57:28">+=</operator> <literal type="number" pos:start="57:30" pos:end="57:30">4</literal></expr></incr>)</control> <block pos:start="57:33" pos:end="143:5">{<block_content pos:start="59:9" pos:end="141:10">

        <asm pos:start="59:9" pos:end="123:10">asm <specifier pos:start="59:13" pos:end="59:20">volatile</specifier> (

            "movaps          %0, %%xmm0 \n\t"   <comment type="line" pos:start="61:49" pos:end="61:74">// xmm0 = r0 X  r1 X : in2</comment>

            "movaps          %1, %%xmm3 \n\t"   <comment type="line" pos:start="63:49" pos:end="63:74">// xmm3 = X  i1 X  i0: in1</comment>

            "movaps    -16+1*%0, %%xmm4 \n\t"   <comment type="line" pos:start="65:49" pos:end="65:74">// xmm4 = r0 X  r1 X : in2</comment>

            "movaps     16+1*%1, %%xmm7 \n\t"   <comment type="line" pos:start="67:49" pos:end="67:74">// xmm7 = X  i1 X  i0: in1</comment>

            "movlps          %2, %%xmm1 \n\t"   <comment type="line" pos:start="69:49" pos:end="69:75">// xmm1 = X  X  R1 R0: tcos</comment>

            "movlps          %3, %%xmm2 \n\t"   <comment type="line" pos:start="71:49" pos:end="71:75">// xmm2 = X  X  I1 I0: tsin</comment>

            "movlps      8+1*%2, %%xmm5 \n\t"   <comment type="line" pos:start="73:49" pos:end="73:75">// xmm5 = X  X  R1 R0: tcos</comment>

            "movlps      8+1*%3, %%xmm6 \n\t"   <comment type="line" pos:start="75:49" pos:end="75:75">// xmm6 = X  X  I1 I0: tsin</comment>

            "shufps $95, %%xmm0, %%xmm0 \n\t"   <comment type="line" pos:start="77:49" pos:end="77:69">// xmm0 = r1 r1 r0 r0</comment>

            "shufps $160,%%xmm3, %%xmm3 \n\t"   <comment type="line" pos:start="79:49" pos:end="79:69">// xmm3 = i1 i1 i0 i0</comment>

            "shufps $95, %%xmm4, %%xmm4 \n\t"   <comment type="line" pos:start="81:49" pos:end="81:69">// xmm4 = r1 r1 r0 r0</comment>

            "shufps $160,%%xmm7, %%xmm7 \n\t"   <comment type="line" pos:start="83:49" pos:end="83:69">// xmm7 = i1 i1 i0 i0</comment>

            "unpcklps    %%xmm2, %%xmm1 \n\t"   <comment type="line" pos:start="85:49" pos:end="85:69">// xmm1 = I1 R1 I0 R0</comment>

            "unpcklps    %%xmm6, %%xmm5 \n\t"   <comment type="line" pos:start="87:49" pos:end="87:69">// xmm5 = I1 R1 I0 R0</comment>

            "movaps      %%xmm1, %%xmm2 \n\t"   <comment type="line" pos:start="89:49" pos:end="89:69">// xmm2 = I1 R1 I0 R0</comment>

            "movaps      %%xmm5, %%xmm6 \n\t"   <comment type="line" pos:start="91:49" pos:end="91:69">// xmm6 = I1 R1 I0 R0</comment>

            "xorps   "P1M1P1M1", %%xmm2 \n\t"   <comment type="line" pos:start="93:49" pos:end="93:71">// xmm2 = -I1 R1 -I0 R0</comment>

            "xorps   "P1M1P1M1", %%xmm6 \n\t"   <comment type="line" pos:start="95:49" pos:end="95:71">// xmm6 = -I1 R1 -I0 R0</comment>

            "mulps       %%xmm1, %%xmm0 \n\t"   <comment type="line" pos:start="97:49" pos:end="97:69">// xmm0 = rI rR rI rR</comment>

            "mulps       %%xmm5, %%xmm4 \n\t"   <comment type="line" pos:start="99:49" pos:end="99:69">// xmm4 = rI rR rI rR</comment>

            "shufps $177,%%xmm2, %%xmm2 \n\t"   <comment type="line" pos:start="101:49" pos:end="101:71">// xmm2 = R1 -I1 R0 -I0</comment>

            "shufps $177,%%xmm6, %%xmm6 \n\t"   <comment type="line" pos:start="103:49" pos:end="103:71">// xmm6 = R1 -I1 R0 -I0</comment>

            "mulps       %%xmm2, %%xmm3 \n\t"   <comment type="line" pos:start="105:49" pos:end="105:71">// xmm3 = Ri -Ii Ri -Ii</comment>

            "mulps       %%xmm6, %%xmm7 \n\t"   <comment type="line" pos:start="107:49" pos:end="107:71">// xmm7 = Ri -Ii Ri -Ii</comment>

            "addps       %%xmm3, %%xmm0 \n\t"   <comment type="line" pos:start="109:49" pos:end="109:64">// xmm0 = result</comment>

            "addps       %%xmm7, %%xmm4 \n\t"   <comment type="line" pos:start="111:49" pos:end="111:64">// xmm4 = result</comment>

            ::"m"(in2[-2*k]), "m"(in1[2*k]),

              "m"(tcos[k]), "m"(tsin[k])

<cpp:ifndef pos:start="117:1" pos:end="117:19">#<cpp:directive pos:start="117:2" pos:end="117:7">ifndef</cpp:directive> <name pos:start="117:9" pos:end="117:19">ARCH_X86_64</name></cpp:ifndef>

              ,"m"(*p1m1p1m1)

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

        );</asm>

        <comment type="block" pos:start="125:9" pos:end="125:66">/* Should be in the same block, hack for gcc2.95 &amp; gcc3 */</comment>

        <asm pos:start="127:9" pos:end="141:10">asm (

            "movlps      %%xmm0, %0     \n\t"

            "movhps      %%xmm0, %1     \n\t"

            "movlps      %%xmm4, %2     \n\t"

            "movhps      %%xmm4, %3     \n\t"

            :"=m"(z[revtab[k]]), "=m"(z[revtab[k + 1]]),

             "=m"(z[revtab[k + 2]]), "=m"(z[revtab[k + 3]])

        );</asm>

    </block_content>}</block></for>



    <expr_stmt pos:start="147:5" pos:end="158:0"><expr pos:start="147:5" pos:end="147:31"><call pos:start="147:5" pos:end="147:31"><name pos:start="147:5" pos:end="147:19">ff_fft_calc_sse</name><argument_list pos:start="147:20" pos:end="147:31">(<argument pos:start="147:21" pos:end="147:27"><expr pos:start="147:21" pos:end="147:27"><operator pos:start="147:21" pos:end="147:21">&amp;</operator><name pos:start="147:22" pos:end="147:27"><name pos:start="147:22" pos:end="147:22">s</name><operator pos:start="147:23" pos:end="147:24">-&gt;</operator><name pos:start="147:25" pos:end="147:27">fft</name></name></expr></argument>, <argument pos:start="147:30" pos:end="147:30"><expr pos:start="147:30" pos:end="147:30"><name pos:start="147:30" pos:end="147:30">z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifndef pos:start="151:1" pos:end="151:19">#<cpp:directive pos:start="151:2" pos:end="151:7">ifndef</cpp:directive> <name pos:start="151:9" pos:end="151:19">ARCH_X86_64</name></cpp:ifndef>

<cpp:undef pos:start="153:1" pos:end="153:15">#<cpp:directive pos:start="153:2" pos:end="153:6">undef</cpp:directive> <name pos:start="153:8" pos:end="153:15">P1M1P1M1</name></cpp:undef>

<cpp:define pos:start="155:1" pos:end="155:21">#<cpp:directive pos:start="155:2" pos:end="155:7">define</cpp:directive> <cpp:macro pos:start="155:9" pos:end="155:16"><name pos:start="155:9" pos:end="155:16">P1M1P1M1</name></cpp:macro> <cpp:value pos:start="155:18" pos:end="155:21">"%3"</cpp:value></cpp:define>

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="161:5" pos:end="161:36">/* post rotation + reordering */</comment>

    <for pos:start="163:5" pos:end="235:5">for <control pos:start="163:9" pos:end="163:31">(<init pos:start="163:10" pos:end="163:15"><expr pos:start="163:10" pos:end="163:14"><name pos:start="163:10" pos:end="163:10">k</name> <operator pos:start="163:12" pos:end="163:12">=</operator> <literal type="number" pos:start="163:14" pos:end="163:14">0</literal></expr>;</init> <condition pos:start="163:17" pos:end="163:23"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:17">k</name> <operator pos:start="163:19" pos:end="163:19">&lt;</operator> <name pos:start="163:21" pos:end="163:22">n4</name></expr>;</condition> <incr pos:start="163:25" pos:end="163:30"><expr pos:start="163:25" pos:end="163:30"><name pos:start="163:25" pos:end="163:25">k</name> <operator pos:start="163:27" pos:end="163:28">+=</operator> <literal type="number" pos:start="163:30" pos:end="163:30">4</literal></expr></incr>)</control> <block pos:start="163:33" pos:end="235:5">{<block_content pos:start="165:9" pos:end="233:10">

        <asm pos:start="165:9" pos:end="233:10">asm (

            "movaps          %0, %%xmm0 \n\t"   <comment type="line" pos:start="167:49" pos:end="167:72">// xmm0 = i1 r1 i0 r0: z</comment>

            "movaps     16+1*%0, %%xmm4 \n\t"   <comment type="line" pos:start="169:49" pos:end="169:72">// xmm4 = i1 r1 i0 r0: z</comment>

            "movlps          %1, %%xmm1 \n\t"   <comment type="line" pos:start="171:49" pos:end="171:75">// xmm1 = X  X  R1 R0: tcos</comment>

            "movlps      8+1*%1, %%xmm5 \n\t"   <comment type="line" pos:start="173:49" pos:end="173:75">// xmm5 = X  X  R1 R0: tcos</comment>

            "movaps      %%xmm0, %%xmm3 \n\t"   <comment type="line" pos:start="175:49" pos:end="175:69">// xmm3 = i1 r1 i0 r0</comment>

            "movaps      %%xmm4, %%xmm7 \n\t"   <comment type="line" pos:start="177:49" pos:end="177:69">// xmm7 = i1 r1 i0 r0</comment>

            "movlps          %2, %%xmm2 \n\t"   <comment type="line" pos:start="179:49" pos:end="179:75">// xmm2 = X  X  I1 I0: tsin</comment>

            "movlps      8+1*%2, %%xmm6 \n\t"   <comment type="line" pos:start="181:49" pos:end="181:75">// xmm6 = X  X  I1 I0: tsin</comment>

            "shufps $160,%%xmm0, %%xmm0 \n\t"   <comment type="line" pos:start="183:49" pos:end="183:69">// xmm0 = r1 r1 r0 r0</comment>

            "shufps $245,%%xmm3, %%xmm3 \n\t"   <comment type="line" pos:start="185:49" pos:end="185:69">// xmm3 = i1 i1 i0 i0</comment>

            "shufps $160,%%xmm4, %%xmm4 \n\t"   <comment type="line" pos:start="187:49" pos:end="187:69">// xmm4 = r1 r1 r0 r0</comment>

            "shufps $245,%%xmm7, %%xmm7 \n\t"   <comment type="line" pos:start="189:49" pos:end="189:69">// xmm7 = i1 i1 i0 i0</comment>

            "unpcklps    %%xmm2, %%xmm1 \n\t"   <comment type="line" pos:start="191:49" pos:end="191:69">// xmm1 = I1 R1 I0 R0</comment>

            "unpcklps    %%xmm6, %%xmm5 \n\t"   <comment type="line" pos:start="193:49" pos:end="193:69">// xmm5 = I1 R1 I0 R0</comment>

            "movaps      %%xmm1, %%xmm2 \n\t"   <comment type="line" pos:start="195:49" pos:end="195:69">// xmm2 = I1 R1 I0 R0</comment>

            "movaps      %%xmm5, %%xmm6 \n\t"   <comment type="line" pos:start="197:49" pos:end="197:69">// xmm6 = I1 R1 I0 R0</comment>

            "xorps   "P1M1P1M1", %%xmm2 \n\t"   <comment type="line" pos:start="199:49" pos:end="199:71">// xmm2 = -I1 R1 -I0 R0</comment>

            "mulps       %%xmm1, %%xmm0 \n\t"   <comment type="line" pos:start="201:49" pos:end="201:69">// xmm0 = rI rR rI rR</comment>

            "xorps   "P1M1P1M1", %%xmm6 \n\t"   <comment type="line" pos:start="203:49" pos:end="203:71">// xmm6 = -I1 R1 -I0 R0</comment>

            "mulps       %%xmm5, %%xmm4 \n\t"   <comment type="line" pos:start="205:49" pos:end="205:69">// xmm4 = rI rR rI rR</comment>

            "shufps $177,%%xmm2, %%xmm2 \n\t"   <comment type="line" pos:start="207:49" pos:end="207:71">// xmm2 = R1 -I1 R0 -I0</comment>

            "shufps $177,%%xmm6, %%xmm6 \n\t"   <comment type="line" pos:start="209:49" pos:end="209:71">// xmm6 = R1 -I1 R0 -I0</comment>

            "mulps       %%xmm2, %%xmm3 \n\t"   <comment type="line" pos:start="211:49" pos:end="211:71">// xmm3 = Ri -Ii Ri -Ii</comment>

            "mulps       %%xmm6, %%xmm7 \n\t"   <comment type="line" pos:start="213:49" pos:end="213:71">// xmm7 = Ri -Ii Ri -Ii</comment>

            "addps       %%xmm3, %%xmm0 \n\t"   <comment type="line" pos:start="215:49" pos:end="215:64">// xmm0 = result</comment>

            "addps       %%xmm7, %%xmm4 \n\t"   <comment type="line" pos:start="217:49" pos:end="217:64">// xmm4 = result</comment>

            "movaps      %%xmm0, %0     \n\t"

            "movaps      %%xmm4, 16+1*%0\n\t"

            :"+m"(z[k])

            :"m"(tcos[k]), "m"(tsin[k])

<cpp:ifndef pos:start="227:1" pos:end="227:19">#<cpp:directive pos:start="227:2" pos:end="227:7">ifndef</cpp:directive> <name pos:start="227:9" pos:end="227:19">ARCH_X86_64</name></cpp:ifndef>

             ,"m"(*p1m1p1m1)

<cpp:endif pos:start="231:1" pos:end="231:6">#<cpp:directive pos:start="231:2" pos:end="231:6">endif</cpp:directive></cpp:endif>

        );</asm>

    </block_content>}</block></for>



    <comment type="block" pos:start="239:5" pos:end="259:6">/*

       Mnemonics:

       0 = z[k].re

       1 = z[k].im

       2 = z[k + 1].re

       3 = z[k + 1].im

       4 = z[-k - 2].re

       5 = z[-k - 2].im

       6 = z[-k - 1].re

       7 = z[-k - 1].im

    */</comment>

    <expr_stmt pos:start="261:5" pos:end="261:13"><expr pos:start="261:5" pos:end="261:12"><name pos:start="261:5" pos:end="261:5">k</name> <operator pos:start="261:7" pos:end="261:7">=</operator> <literal type="number" pos:start="261:9" pos:end="261:11">16</literal><operator pos:start="261:11" pos:end="261:11">-</operator><name pos:start="261:12" pos:end="261:12">n</name></expr>;</expr_stmt>

    <asm pos:start="263:5" pos:end="263:59">asm <specifier pos:start="263:9" pos:end="263:16">volatile</specifier>("movaps %0, %%xmm7 \n\t"::"m"(*m1m1m1m1));</asm>

    <asm pos:start="265:5" pos:end="313:6">asm <specifier pos:start="265:9" pos:end="265:16">volatile</specifier>(

        "1: \n\t"

        "movaps  -16(%4,%0), %%xmm1 \n\t"   <comment type="line" pos:start="269:45" pos:end="269:71">// xmm1 = 4 5 6 7 = z[-2-k]</comment>

        "neg %0 \n\t"

        "movaps     (%4,%0), %%xmm0 \n\t"   <comment type="line" pos:start="273:45" pos:end="273:68">// xmm0 = 0 1 2 3 = z[k]</comment>

        "xorps       %%xmm7, %%xmm0 \n\t"   <comment type="line" pos:start="275:45" pos:end="275:65">// xmm0 = -0 -1 -2 -3</comment>

        "movaps      %%xmm0, %%xmm2 \n\t"   <comment type="line" pos:start="277:45" pos:end="277:65">// xmm2 = -0 -1 -2 -3</comment>

        "shufps $141,%%xmm1, %%xmm0 \n\t"   <comment type="line" pos:start="279:45" pos:end="279:63">// xmm0 = -1 -3 4 6</comment>

        "shufps $216,%%xmm1, %%xmm2 \n\t"   <comment type="line" pos:start="281:45" pos:end="281:63">// xmm2 = -0 -2 5 7</comment>

        "shufps $156,%%xmm0, %%xmm0 \n\t"   <comment type="line" pos:start="283:45" pos:end="283:65">// xmm0 = -1 6 -3 4 !</comment>

        "shufps $156,%%xmm2, %%xmm2 \n\t"   <comment type="line" pos:start="285:45" pos:end="285:65">// xmm2 = -0 7 -2 5 !</comment>

        "movaps      %%xmm0, (%1,%0) \n\t"  <comment type="line" pos:start="287:45" pos:end="287:58">// output[2*k]</comment>

        "movaps      %%xmm2, (%2,%0) \n\t"  <comment type="line" pos:start="289:45" pos:end="289:61">// output[n2+2*k]</comment>

        "neg %0 \n\t"

        "shufps $27, %%xmm0, %%xmm0 \n\t"   <comment type="line" pos:start="293:45" pos:end="293:63">// xmm0 = 4 -3 6 -1</comment>

        "xorps       %%xmm7, %%xmm0 \n\t"   <comment type="line" pos:start="295:45" pos:end="295:65">// xmm0 = -4 3 -6 1 !</comment>

        "shufps $27, %%xmm2, %%xmm2 \n\t"   <comment type="line" pos:start="297:45" pos:end="297:65">// xmm2 = 5 -2 7 -0 !</comment>

        "movaps      %%xmm0, -16(%2,%0) \n\t" <comment type="line" pos:start="299:47" pos:end="299:65">// output[n2-4-2*k]</comment>

        "movaps      %%xmm2, -16(%3,%0) \n\t" <comment type="line" pos:start="301:47" pos:end="301:64">// output[n-4-2*k]</comment>

        "add $16, %0 \n\t"

        "jle 1b \n\t"

        :"+r"(k)

        :"r"(output), "r"(output+n2), "r"(output+n), "r"(z+n8)

        :"memory"

    );</asm>

</block_content>}</block></function>
</unit>
