<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8891.c" pos:tabs="8"><function pos:start="1:1" pos:end="349:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:16">target_mmap</name><parameter_list pos:start="1:17" pos:end="3:56">(<parameter pos:start="1:18" pos:end="1:35"><decl pos:start="1:18" pos:end="1:35"><type pos:start="1:18" pos:end="1:35"><name pos:start="1:18" pos:end="1:29">target_ulong</name></type> <name pos:start="1:31" pos:end="1:35">start</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:53"><decl pos:start="1:38" pos:end="1:53"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:49">target_ulong</name></type> <name pos:start="1:51" pos:end="1:53">len</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:63"><decl pos:start="1:56" pos:end="1:63"><type pos:start="1:56" pos:end="1:63"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:63">prot</name></decl></parameter>,

                 <parameter pos:start="3:18" pos:end="3:26"><decl pos:start="3:18" pos:end="3:26"><type pos:start="3:18" pos:end="3:26"><name pos:start="3:18" pos:end="3:20">int</name></type> <name pos:start="3:22" pos:end="3:26">flags</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:34"><decl pos:start="3:29" pos:end="3:34"><type pos:start="3:29" pos:end="3:34"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:34">fd</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:55"><decl pos:start="3:37" pos:end="3:55"><type pos:start="3:37" pos:end="3:55"><name pos:start="3:37" pos:end="3:48">target_ulong</name></type> <name pos:start="3:50" pos:end="3:55">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="349:1">{<block_content pos:start="7:5" pos:end="347:17">

    <decl_stmt pos:start="7:5" pos:end="7:80"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:20">ret</name></decl>, <decl pos:start="7:23" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:23" pos:end="7:25">end</name></decl>, <decl pos:start="7:28" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:28" pos:end="7:37">real_start</name></decl>, <decl pos:start="7:40" pos:end="7:47"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:40" pos:end="7:47">real_end</name></decl>, <decl pos:start="7:50" pos:end="7:56"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:50" pos:end="7:56">retaddr</name></decl>, <decl pos:start="7:59" pos:end="7:69"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:59" pos:end="7:69">host_offset</name></decl>, <decl pos:start="7:72" pos:end="7:79"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:72" pos:end="7:79">host_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">long</name></type> <name pos:start="9:10" pos:end="9:19">host_start</name></decl>;</decl_stmt>

<cpp:if pos:start="11:1" pos:end="13:44">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="13:44"><call pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:22">(<argument pos:start="11:13" pos:end="11:21"><expr pos:start="11:13" pos:end="11:21"><name pos:start="11:13" pos:end="11:21">__alpha__</name></expr></argument>)</argument_list></call> <operator pos:start="11:24" pos:end="11:25">||</operator> <call pos:start="11:27" pos:end="11:44"><name pos:start="11:27" pos:end="11:33">defined</name><argument_list pos:start="11:34" pos:end="11:44">(<argument pos:start="11:35" pos:end="11:43"><expr pos:start="11:35" pos:end="11:43"><name pos:start="11:35" pos:end="11:43">__sparc__</name></expr></argument>)</argument_list></call> <operator pos:start="11:46" pos:end="11:47">||</operator> <call pos:start="11:49" pos:end="11:67"><name pos:start="11:49" pos:end="11:55">defined</name><argument_list pos:start="11:56" pos:end="11:67">(<argument pos:start="11:57" pos:end="11:66"><expr pos:start="11:57" pos:end="11:66"><name pos:start="11:57" pos:end="11:66">__x86_64__</name></expr></argument>)</argument_list></call> <operator pos:start="11:69" pos:end="11:70">||</operator> \

        <call pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:15">defined</name><argument_list pos:start="13:16" pos:end="13:23">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22">__ia64</name></expr></argument>)</argument_list></call> <operator pos:start="13:25" pos:end="13:26">||</operator> <call pos:start="13:28" pos:end="13:44"><name pos:start="13:28" pos:end="13:34">defined</name><argument_list pos:start="13:35" pos:end="13:44">(<argument pos:start="13:36" pos:end="13:43"><expr pos:start="13:36" pos:end="13:43"><name pos:start="13:36" pos:end="13:43">__mips__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="15:5" pos:end="18:0"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:23"><specifier pos:start="15:5" pos:end="15:10">static</specifier> <name pos:start="15:12" pos:end="15:23">target_ulong</name></type> <name pos:start="15:25" pos:end="15:34">last_start</name> <init pos:start="15:36" pos:end="15:47">= <expr pos:start="15:38" pos:end="15:47"><literal type="number" pos:start="15:38" pos:end="15:47">0x40000000</literal></expr></init></decl>;</decl_stmt>

<cpp:elif pos:start="17:1" pos:end="17:25">#<cpp:directive pos:start="17:2" pos:end="17:5">elif</cpp:directive> <expr pos:start="17:7" pos:end="17:25"><call pos:start="17:7" pos:end="17:25"><name pos:start="17:7" pos:end="17:13">defined</name><argument_list pos:start="17:14" pos:end="17:25">(<argument pos:start="17:15" pos:end="17:24"><expr pos:start="17:15" pos:end="17:24"><name pos:start="17:15" pos:end="17:24">__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <comment type="block" pos:start="19:5" pos:end="19:60">/* Cygwin doesn't have a whole lot of address space.  */</comment>

    <decl_stmt pos:start="21:5" pos:end="28:0"><decl pos:start="21:5" pos:end="21:47"><type pos:start="21:5" pos:end="21:23"><specifier pos:start="21:5" pos:end="21:10">static</specifier> <name pos:start="21:12" pos:end="21:23">target_ulong</name></type> <name pos:start="21:25" pos:end="21:34">last_start</name> <init pos:start="21:36" pos:end="21:47">= <expr pos:start="21:38" pos:end="21:47"><literal type="number" pos:start="21:38" pos:end="21:47">0x18000000</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="27:1" pos:end="27:17">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:17">DEBUG_MMAP</name></cpp:ifdef>

    <block pos:start="29:5" pos:end="76:0">{<block_content pos:start="31:9" pos:end="71:49">

        <expr_stmt pos:start="31:9" pos:end="39:45"><expr pos:start="31:9" pos:end="39:44"><call pos:start="31:9" pos:end="39:44"><name pos:start="31:9" pos:end="31:14">printf</name><argument_list pos:start="31:15" pos:end="39:44">(<argument pos:start="31:16" pos:end="31:63"><expr pos:start="31:16" pos:end="31:63"><literal type="string" pos:start="31:16" pos:end="31:63">"mmap: start=0x%lx len=0x%lx prot=%c%c%c flags="</literal></expr></argument>,

               <argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">start</name></expr></argument>, <argument pos:start="33:23" pos:end="33:25"><expr pos:start="33:23" pos:end="33:25"><name pos:start="33:23" pos:end="33:25">len</name></expr></argument>,

               <argument pos:start="35:16" pos:end="35:43"><expr pos:start="35:16" pos:end="35:43"><ternary pos:start="35:16" pos:end="35:43"><condition pos:start="35:16" pos:end="35:33"><expr pos:start="35:16" pos:end="35:31"><name pos:start="35:16" pos:end="35:19">prot</name> <operator pos:start="35:21" pos:end="35:21">&amp;</operator> <name pos:start="35:23" pos:end="35:31">PROT_READ</name></expr> ?</condition><then pos:start="35:35" pos:end="35:37"> <expr pos:start="35:35" pos:end="35:37"><literal type="char" pos:start="35:35" pos:end="35:37">'r'</literal></expr> </then><else pos:start="35:39" pos:end="35:43">: <expr pos:start="35:41" pos:end="35:43"><literal type="char" pos:start="35:41" pos:end="35:43">'-'</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="37:16" pos:end="37:44"><expr pos:start="37:16" pos:end="37:44"><ternary pos:start="37:16" pos:end="37:44"><condition pos:start="37:16" pos:end="37:34"><expr pos:start="37:16" pos:end="37:32"><name pos:start="37:16" pos:end="37:19">prot</name> <operator pos:start="37:21" pos:end="37:21">&amp;</operator> <name pos:start="37:23" pos:end="37:32">PROT_WRITE</name></expr> ?</condition><then pos:start="37:36" pos:end="37:38"> <expr pos:start="37:36" pos:end="37:38"><literal type="char" pos:start="37:36" pos:end="37:38">'w'</literal></expr> </then><else pos:start="37:40" pos:end="37:44">: <expr pos:start="37:42" pos:end="37:44"><literal type="char" pos:start="37:42" pos:end="37:44">'-'</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="39:16" pos:end="39:43"><expr pos:start="39:16" pos:end="39:43"><ternary pos:start="39:16" pos:end="39:43"><condition pos:start="39:16" pos:end="39:33"><expr pos:start="39:16" pos:end="39:31"><name pos:start="39:16" pos:end="39:19">prot</name> <operator pos:start="39:21" pos:end="39:21">&amp;</operator> <name pos:start="39:23" pos:end="39:31">PROT_EXEC</name></expr> ?</condition><then pos:start="39:35" pos:end="39:37"> <expr pos:start="39:35" pos:end="39:37"><literal type="char" pos:start="39:35" pos:end="39:37">'x'</literal></expr> </then><else pos:start="39:39" pos:end="39:43">: <expr pos:start="39:41" pos:end="39:43"><literal type="char" pos:start="39:41" pos:end="39:43">'-'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:33"><if pos:start="41:9" pos:end="43:33">if <condition pos:start="41:12" pos:end="41:30">(<expr pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:17">flags</name> <operator pos:start="41:19" pos:end="41:19">&amp;</operator> <name pos:start="41:21" pos:end="41:29">MAP_FIXED</name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:33"><block_content pos:start="43:13" pos:end="43:33">

            <expr_stmt pos:start="43:13" pos:end="43:33"><expr pos:start="43:13" pos:end="43:32"><call pos:start="43:13" pos:end="43:32"><name pos:start="43:13" pos:end="43:18">printf</name><argument_list pos:start="43:19" pos:end="43:32">(<argument pos:start="43:20" pos:end="43:31"><expr pos:start="43:20" pos:end="43:31"><literal type="string" pos:start="43:20" pos:end="43:31">"MAP_FIXED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="47:32"><if pos:start="45:9" pos:end="47:32">if <condition pos:start="45:12" pos:end="45:34">(<expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:17">flags</name> <operator pos:start="45:19" pos:end="45:19">&amp;</operator> <name pos:start="45:21" pos:end="45:33">MAP_ANONYMOUS</name></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:32"><block_content pos:start="47:13" pos:end="47:32">

            <expr_stmt pos:start="47:13" pos:end="47:32"><expr pos:start="47:13" pos:end="47:31"><call pos:start="47:13" pos:end="47:31"><name pos:start="47:13" pos:end="47:18">printf</name><argument_list pos:start="47:19" pos:end="47:31">(<argument pos:start="47:20" pos:end="47:30"><expr pos:start="47:20" pos:end="47:30"><literal type="string" pos:start="47:20" pos:end="47:30">"MAP_ANON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <switch pos:start="49:9" pos:end="69:9">switch<condition pos:start="49:15" pos:end="49:32">(<expr pos:start="49:16" pos:end="49:31"><name pos:start="49:16" pos:end="49:20">flags</name> <operator pos:start="49:22" pos:end="49:22">&amp;</operator> <name pos:start="49:24" pos:end="49:31">MAP_TYPE</name></expr>)</condition> <block pos:start="49:34" pos:end="69:9">{<block_content pos:start="51:9" pos:end="67:18">

        <case pos:start="51:9" pos:end="51:25">case <expr pos:start="51:14" pos:end="51:24"><name pos:start="51:14" pos:end="51:24">MAP_PRIVATE</name></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:35"><expr pos:start="53:13" pos:end="53:34"><call pos:start="53:13" pos:end="53:34"><name pos:start="53:13" pos:end="53:18">printf</name><argument_list pos:start="53:19" pos:end="53:34">(<argument pos:start="53:20" pos:end="53:33"><expr pos:start="53:20" pos:end="53:33"><literal type="string" pos:start="53:20" pos:end="53:33">"MAP_PRIVATE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:24">case <expr pos:start="57:14" pos:end="57:23"><name pos:start="57:14" pos:end="57:23">MAP_SHARED</name></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:34"><expr pos:start="59:13" pos:end="59:33"><call pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:18">printf</name><argument_list pos:start="59:19" pos:end="59:33">(<argument pos:start="59:20" pos:end="59:32"><expr pos:start="59:20" pos:end="59:32"><literal type="string" pos:start="59:20" pos:end="59:32">"MAP_SHARED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <default pos:start="63:9" pos:end="63:16">default:</default>

            <expr_stmt pos:start="65:13" pos:end="65:57"><expr pos:start="65:13" pos:end="65:56"><call pos:start="65:13" pos:end="65:56"><name pos:start="65:13" pos:end="65:18">printf</name><argument_list pos:start="65:19" pos:end="65:56">(<argument pos:start="65:20" pos:end="65:37"><expr pos:start="65:20" pos:end="65:37"><literal type="string" pos:start="65:20" pos:end="65:37">"[MAP_TYPE=0x%x] "</literal></expr></argument>, <argument pos:start="65:40" pos:end="65:55"><expr pos:start="65:40" pos:end="65:55"><name pos:start="65:40" pos:end="65:44">flags</name> <operator pos:start="65:46" pos:end="65:46">&amp;</operator> <name pos:start="65:48" pos:end="65:55">MAP_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="71:9" pos:end="71:49"><expr pos:start="71:9" pos:end="71:48"><call pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:14">printf</name><argument_list pos:start="71:15" pos:end="71:48">(<argument pos:start="71:16" pos:end="71:35"><expr pos:start="71:16" pos:end="71:35"><literal type="string" pos:start="71:16" pos:end="71:35">"fd=%d offset=%lx\n"</literal></expr></argument>, <argument pos:start="71:38" pos:end="71:39"><expr pos:start="71:38" pos:end="71:39"><name pos:start="71:38" pos:end="71:39">fd</name></expr></argument>, <argument pos:start="71:42" pos:end="71:47"><expr pos:start="71:42" pos:end="71:47"><name pos:start="71:42" pos:end="71:47">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:35">(<expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:14">offset</name> <operator pos:start="79:16" pos:end="79:16">&amp;</operator> <operator pos:start="79:18" pos:end="79:18">~</operator><name pos:start="79:19" pos:end="79:34">TARGET_PAGE_MASK</name></expr>)</condition> <block pos:start="79:37" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:18">

        <expr_stmt pos:start="81:9" pos:end="81:23"><expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:13">errno</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:18">return <expr pos:start="83:16" pos:end="83:17"><operator pos:start="83:16" pos:end="83:16">-</operator><literal type="number" pos:start="83:17" pos:end="83:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:33"><expr pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:7">len</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:32"><name pos:start="89:11" pos:end="89:27">TARGET_PAGE_ALIGN</name><argument_list pos:start="89:28" pos:end="89:32">(<argument pos:start="89:29" pos:end="89:31"><expr pos:start="89:29" pos:end="89:31"><name pos:start="89:29" pos:end="89:31">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="93:21"><if pos:start="91:5" pos:end="93:21">if <condition pos:start="91:8" pos:end="91:17">(<expr pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:11">len</name> <operator pos:start="91:13" pos:end="91:14">==</operator> <literal type="number" pos:start="91:16" pos:end="91:16">0</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:21"><block_content pos:start="93:9" pos:end="93:21">

        <return pos:start="93:9" pos:end="93:21">return <expr pos:start="93:16" pos:end="93:20"><name pos:start="93:16" pos:end="93:20">start</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:45"><expr pos:start="95:5" pos:end="95:44"><name pos:start="95:5" pos:end="95:14">real_start</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <name pos:start="95:18" pos:end="95:22">start</name> <operator pos:start="95:24" pos:end="95:24">&amp;</operator> <name pos:start="95:26" pos:end="95:44">qemu_host_page_mask</name></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="185:5"><if pos:start="99:5" pos:end="185:5">if <condition pos:start="99:8" pos:end="99:29">(<expr pos:start="99:9" pos:end="99:28"><operator pos:start="99:9" pos:end="99:9">!</operator><operator pos:start="99:10" pos:end="99:10">(</operator><name pos:start="99:11" pos:end="99:15">flags</name> <operator pos:start="99:17" pos:end="99:17">&amp;</operator> <name pos:start="99:19" pos:end="99:27">MAP_FIXED</name><operator pos:start="99:28" pos:end="99:28">)</operator></expr>)</condition> <block pos:start="99:31" pos:end="185:5">{<block_content pos:start="107:9" pos:end="183:9">

<cpp:if pos:start="101:1" pos:end="103:63">#<cpp:directive pos:start="101:2" pos:end="101:3">if</cpp:directive> <expr pos:start="101:5" pos:end="103:63"><call pos:start="101:5" pos:end="101:22"><name pos:start="101:5" pos:end="101:11">defined</name><argument_list pos:start="101:12" pos:end="101:22">(<argument pos:start="101:13" pos:end="101:21"><expr pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:21">__alpha__</name></expr></argument>)</argument_list></call> <operator pos:start="101:24" pos:end="101:25">||</operator> <call pos:start="101:27" pos:end="101:44"><name pos:start="101:27" pos:end="101:33">defined</name><argument_list pos:start="101:34" pos:end="101:44">(<argument pos:start="101:35" pos:end="101:43"><expr pos:start="101:35" pos:end="101:43"><name pos:start="101:35" pos:end="101:43">__sparc__</name></expr></argument>)</argument_list></call> <operator pos:start="101:46" pos:end="101:47">||</operator> <call pos:start="101:49" pos:end="101:67"><name pos:start="101:49" pos:end="101:55">defined</name><argument_list pos:start="101:56" pos:end="101:67">(<argument pos:start="101:57" pos:end="101:66"><expr pos:start="101:57" pos:end="101:66"><name pos:start="101:57" pos:end="101:66">__x86_64__</name></expr></argument>)</argument_list></call> <operator pos:start="101:69" pos:end="101:70">||</operator> \

    <call pos:start="103:5" pos:end="103:19"><name pos:start="103:5" pos:end="103:11">defined</name><argument_list pos:start="103:12" pos:end="103:19">(<argument pos:start="103:13" pos:end="103:18"><expr pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:18">__ia64</name></expr></argument>)</argument_list></call> <operator pos:start="103:21" pos:end="103:22">||</operator> <call pos:start="103:24" pos:end="103:40"><name pos:start="103:24" pos:end="103:30">defined</name><argument_list pos:start="103:31" pos:end="103:40">(<argument pos:start="103:32" pos:end="103:39"><expr pos:start="103:32" pos:end="103:39"><name pos:start="103:32" pos:end="103:39">__mips__</name></expr></argument>)</argument_list></call> <operator pos:start="103:42" pos:end="103:43">||</operator> <call pos:start="103:45" pos:end="103:63"><name pos:start="103:45" pos:end="103:51">defined</name><argument_list pos:start="103:52" pos:end="103:63">(<argument pos:start="103:53" pos:end="103:62"><expr pos:start="103:53" pos:end="103:62"><name pos:start="103:53" pos:end="103:62">__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="105:9" pos:end="105:65">/* tell the kernel to search at the same place as i386 */</comment>

        <if_stmt pos:start="107:9" pos:end="116:0"><if pos:start="107:9" pos:end="116:0">if <condition pos:start="107:12" pos:end="107:28">(<expr pos:start="107:13" pos:end="107:27"><name pos:start="107:13" pos:end="107:22">real_start</name> <operator pos:start="107:24" pos:end="107:25">==</operator> <literal type="number" pos:start="107:27" pos:end="107:27">0</literal></expr>)</condition> <block pos:start="107:30" pos:end="116:0">{<block_content pos:start="109:13" pos:end="111:47">

            <expr_stmt pos:start="109:13" pos:end="109:36"><expr pos:start="109:13" pos:end="109:35"><name pos:start="109:13" pos:end="109:22">real_start</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <name pos:start="109:26" pos:end="109:35">last_start</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:47"><expr pos:start="111:13" pos:end="111:46"><name pos:start="111:13" pos:end="111:22">last_start</name> <operator pos:start="111:24" pos:end="111:25">+=</operator> <call pos:start="111:27" pos:end="111:46"><name pos:start="111:27" pos:end="111:41">HOST_PAGE_ALIGN</name><argument_list pos:start="111:42" pos:end="111:46">(<argument pos:start="111:43" pos:end="111:45"><expr pos:start="111:43" pos:end="111:45"><name pos:start="111:43" pos:end="111:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="117:9" pos:end="183:9"><if pos:start="117:9" pos:end="157:9">if <condition pos:start="117:12" pos:end="117:65">(<expr pos:start="117:13" pos:end="117:64"><literal type="number" pos:start="117:13" pos:end="117:13">0</literal> <operator pos:start="117:15" pos:end="117:16">&amp;&amp;</operator> <name pos:start="117:18" pos:end="117:36">qemu_host_page_size</name> <operator pos:start="117:38" pos:end="117:39">!=</operator> <name pos:start="117:41" pos:end="117:64">qemu_real_host_page_size</name></expr>)</condition> <block pos:start="117:67" pos:end="157:9">{<block_content pos:start="127:1" pos:end="155:31">

            <comment type="block" pos:start="119:13" pos:end="119:72">/* NOTE: this code is only for debugging with '-p' option */</comment>

            <comment type="block" pos:start="121:13" pos:end="121:77">/* ??? Can also occur when TARGET_PAGE_SIZE &gt; host page size.  */</comment>

            <comment type="block" pos:start="123:13" pos:end="123:39">/* reserve a memory area */</comment>

            <comment type="block" pos:start="125:13" pos:end="125:55">/* ??? This needs fixing for remapping.  */</comment>

<expr_stmt pos:start="127:1" pos:end="127:8"><expr pos:start="127:1" pos:end="127:7"><call pos:start="127:1" pos:end="127:7"><name pos:start="127:1" pos:end="127:5">abort</name><argument_list pos:start="127:6" pos:end="127:7">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:85"><expr pos:start="129:13" pos:end="129:84"><name pos:start="129:13" pos:end="129:20">host_len</name> <operator pos:start="129:22" pos:end="129:22">=</operator> <call pos:start="129:24" pos:end="129:43"><name pos:start="129:24" pos:end="129:38">HOST_PAGE_ALIGN</name><argument_list pos:start="129:39" pos:end="129:43">(<argument pos:start="129:40" pos:end="129:42"><expr pos:start="129:40" pos:end="129:42"><name pos:start="129:40" pos:end="129:42">len</name></expr></argument>)</argument_list></call> <operator pos:start="129:45" pos:end="129:45">+</operator> <name pos:start="129:47" pos:end="129:65">qemu_host_page_size</name> <operator pos:start="129:67" pos:end="129:67">-</operator> <name pos:start="129:69" pos:end="129:84">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="133:72"><expr pos:start="131:13" pos:end="133:71"><name pos:start="131:13" pos:end="131:22">real_start</name> <operator pos:start="131:24" pos:end="131:24">=</operator> <operator pos:start="131:26" pos:end="131:26">(</operator><name pos:start="131:27" pos:end="131:30">long</name><operator pos:start="131:31" pos:end="131:31">)</operator><call pos:start="131:32" pos:end="133:71"><name pos:start="131:32" pos:end="131:35">mmap</name><argument_list pos:start="131:36" pos:end="133:71">(<argument pos:start="131:37" pos:end="131:51"><expr pos:start="131:37" pos:end="131:51"><call pos:start="131:37" pos:end="131:51"><name pos:start="131:37" pos:end="131:39">g2h</name><argument_list pos:start="131:40" pos:end="131:51">(<argument pos:start="131:41" pos:end="131:50"><expr pos:start="131:41" pos:end="131:50"><name pos:start="131:41" pos:end="131:50">real_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="131:54" pos:end="131:61"><expr pos:start="131:54" pos:end="131:61"><name pos:start="131:54" pos:end="131:61">host_len</name></expr></argument>, <argument pos:start="131:64" pos:end="131:72"><expr pos:start="131:64" pos:end="131:72"><name pos:start="131:64" pos:end="131:72">PROT_NONE</name></expr></argument>,

                                    <argument pos:start="133:37" pos:end="133:63"><expr pos:start="133:37" pos:end="133:63"><name pos:start="133:37" pos:end="133:47">MAP_PRIVATE</name> <operator pos:start="133:49" pos:end="133:49">|</operator> <name pos:start="133:51" pos:end="133:63">MAP_ANONYMOUS</name></expr></argument>, <argument pos:start="133:66" pos:end="133:67"><expr pos:start="133:66" pos:end="133:67"><operator pos:start="133:66" pos:end="133:66">-</operator><literal type="number" pos:start="133:67" pos:end="133:67">1</literal></expr></argument>, <argument pos:start="133:70" pos:end="133:70"><expr pos:start="133:70" pos:end="133:70"><literal type="number" pos:start="133:70" pos:end="133:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="137:34"><if pos:start="135:13" pos:end="137:34">if <condition pos:start="135:16" pos:end="135:33">(<expr pos:start="135:17" pos:end="135:32"><name pos:start="135:17" pos:end="135:26">real_start</name> <operator pos:start="135:28" pos:end="135:29">==</operator> <operator pos:start="135:31" pos:end="135:31">-</operator><literal type="number" pos:start="135:32" pos:end="135:32">1</literal></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:34"><block_content pos:start="137:17" pos:end="137:34">

                <return pos:start="137:17" pos:end="137:34">return <expr pos:start="137:24" pos:end="137:33"><name pos:start="137:24" pos:end="137:33">real_start</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:45"><expr pos:start="139:13" pos:end="139:44"><name pos:start="139:13" pos:end="139:20">real_end</name> <operator pos:start="139:22" pos:end="139:22">=</operator> <name pos:start="139:24" pos:end="139:33">real_start</name> <operator pos:start="139:35" pos:end="139:35">+</operator> <name pos:start="139:37" pos:end="139:44">host_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:48"><expr pos:start="141:13" pos:end="141:47"><name pos:start="141:13" pos:end="141:17">start</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <call pos:start="141:21" pos:end="141:47"><name pos:start="141:21" pos:end="141:35">HOST_PAGE_ALIGN</name><argument_list pos:start="141:36" pos:end="141:47">(<argument pos:start="141:37" pos:end="141:46"><expr pos:start="141:37" pos:end="141:46"><name pos:start="141:37" pos:end="141:46">real_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:47"><expr pos:start="143:13" pos:end="143:46"><name pos:start="143:13" pos:end="143:15">end</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <name pos:start="143:19" pos:end="143:23">start</name> <operator pos:start="143:25" pos:end="143:25">+</operator> <call pos:start="143:27" pos:end="143:46"><name pos:start="143:27" pos:end="143:41">HOST_PAGE_ALIGN</name><argument_list pos:start="143:42" pos:end="143:46">(<argument pos:start="143:43" pos:end="143:45"><expr pos:start="143:43" pos:end="143:45"><name pos:start="143:43" pos:end="143:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="147:63"><if pos:start="145:13" pos:end="147:63">if <condition pos:start="145:16" pos:end="145:35">(<expr pos:start="145:17" pos:end="145:34"><name pos:start="145:17" pos:end="145:21">start</name> <operator pos:start="145:23" pos:end="145:23">&gt;</operator> <name pos:start="145:25" pos:end="145:34">real_start</name></expr>)</condition><block type="pseudo" pos:start="147:17" pos:end="147:63"><block_content pos:start="147:17" pos:end="147:63">

                <expr_stmt pos:start="147:17" pos:end="147:63"><expr pos:start="147:17" pos:end="147:62"><call pos:start="147:17" pos:end="147:62"><name pos:start="147:17" pos:end="147:22">munmap</name><argument_list pos:start="147:23" pos:end="147:62">(<argument pos:start="147:24" pos:end="147:41"><expr pos:start="147:24" pos:end="147:41"><operator pos:start="147:24" pos:end="147:24">(</operator><name pos:start="147:25" pos:end="147:28">void</name> <operator pos:start="147:30" pos:end="147:30">*</operator><operator pos:start="147:31" pos:end="147:31">)</operator><name pos:start="147:32" pos:end="147:41">real_start</name></expr></argument>, <argument pos:start="147:44" pos:end="147:61"><expr pos:start="147:44" pos:end="147:61"><name pos:start="147:44" pos:end="147:48">start</name> <operator pos:start="147:50" pos:end="147:50">-</operator> <name pos:start="147:52" pos:end="147:61">real_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="149:13" pos:end="151:52"><if pos:start="149:13" pos:end="151:52">if <condition pos:start="149:16" pos:end="149:31">(<expr pos:start="149:17" pos:end="149:30"><name pos:start="149:17" pos:end="149:19">end</name> <operator pos:start="149:21" pos:end="149:21">&lt;</operator> <name pos:start="149:23" pos:end="149:30">real_end</name></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:52"><block_content pos:start="151:17" pos:end="151:52">

                <expr_stmt pos:start="151:17" pos:end="151:52"><expr pos:start="151:17" pos:end="151:51"><call pos:start="151:17" pos:end="151:51"><name pos:start="151:17" pos:end="151:22">munmap</name><argument_list pos:start="151:23" pos:end="151:51">(<argument pos:start="151:24" pos:end="151:34"><expr pos:start="151:24" pos:end="151:34"><operator pos:start="151:24" pos:end="151:24">(</operator><name pos:start="151:25" pos:end="151:28">void</name> <operator pos:start="151:30" pos:end="151:30">*</operator><operator pos:start="151:31" pos:end="151:31">)</operator><name pos:start="151:32" pos:end="151:34">end</name></expr></argument>, <argument pos:start="151:37" pos:end="151:50"><expr pos:start="151:37" pos:end="151:50"><name pos:start="151:37" pos:end="151:44">real_end</name> <operator pos:start="151:46" pos:end="151:46">-</operator> <name pos:start="151:48" pos:end="151:50">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="153:13" pos:end="153:43">/* use it as a fixed mapping */</comment>

            <expr_stmt pos:start="155:13" pos:end="155:31"><expr pos:start="155:13" pos:end="155:30"><name pos:start="155:13" pos:end="155:17">flags</name> <operator pos:start="155:19" pos:end="155:20">|=</operator> <name pos:start="155:22" pos:end="155:30">MAP_FIXED</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="183:9">else <block pos:start="157:16" pos:end="183:9">{<block_content pos:start="161:13" pos:end="181:26">

            <comment type="block" pos:start="159:13" pos:end="159:54">/* if not fixed, no need to do anything */</comment>

            <expr_stmt pos:start="161:13" pos:end="161:55"><expr pos:start="161:13" pos:end="161:54"><name pos:start="161:13" pos:end="161:23">host_offset</name> <operator pos:start="161:25" pos:end="161:25">=</operator> <name pos:start="161:27" pos:end="161:32">offset</name> <operator pos:start="161:34" pos:end="161:34">&amp;</operator> <name pos:start="161:36" pos:end="161:54">qemu_host_page_mask</name></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:50"><expr pos:start="163:13" pos:end="163:49"><name pos:start="163:13" pos:end="163:20">host_len</name> <operator pos:start="163:22" pos:end="163:22">=</operator> <name pos:start="163:24" pos:end="163:26">len</name> <operator pos:start="163:28" pos:end="163:28">+</operator> <name pos:start="163:30" pos:end="163:35">offset</name> <operator pos:start="163:37" pos:end="163:37">-</operator> <name pos:start="163:39" pos:end="163:49">host_offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="167:76"><expr pos:start="165:13" pos:end="167:75"><name pos:start="165:13" pos:end="165:22">host_start</name> <operator pos:start="165:24" pos:end="165:24">=</operator> <operator pos:start="165:26" pos:end="165:26">(</operator><name pos:start="165:27" pos:end="165:30">long</name><operator pos:start="165:31" pos:end="165:31">)</operator><call pos:start="165:32" pos:end="167:75"><name pos:start="165:32" pos:end="165:35">mmap</name><argument_list pos:start="165:36" pos:end="167:75">(<argument pos:start="165:37" pos:end="165:71"><expr pos:start="165:37" pos:end="165:71"><ternary pos:start="165:37" pos:end="165:71"><condition pos:start="165:37" pos:end="165:48"><expr pos:start="165:37" pos:end="165:46"><name pos:start="165:37" pos:end="165:46">real_start</name></expr> ?</condition><then pos:start="165:50" pos:end="165:64"> <expr pos:start="165:50" pos:end="165:64"><call pos:start="165:50" pos:end="165:64"><name pos:start="165:50" pos:end="165:52">g2h</name><argument_list pos:start="165:53" pos:end="165:64">(<argument pos:start="165:54" pos:end="165:63"><expr pos:start="165:54" pos:end="165:63"><name pos:start="165:54" pos:end="165:63">real_start</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="165:66" pos:end="165:71">: <expr pos:start="165:68" pos:end="165:71"><name pos:start="165:68" pos:end="165:71">NULL</name></expr></else></ternary></expr></argument>,

                                    <argument pos:start="167:37" pos:end="167:44"><expr pos:start="167:37" pos:end="167:44"><name pos:start="167:37" pos:end="167:44">host_len</name></expr></argument>, <argument pos:start="167:47" pos:end="167:50"><expr pos:start="167:47" pos:end="167:50"><name pos:start="167:47" pos:end="167:50">prot</name></expr></argument>, <argument pos:start="167:53" pos:end="167:57"><expr pos:start="167:53" pos:end="167:57"><name pos:start="167:53" pos:end="167:57">flags</name></expr></argument>, <argument pos:start="167:60" pos:end="167:61"><expr pos:start="167:60" pos:end="167:61"><name pos:start="167:60" pos:end="167:61">fd</name></expr></argument>, <argument pos:start="167:64" pos:end="167:74"><expr pos:start="167:64" pos:end="167:74"><name pos:start="167:64" pos:end="167:74">host_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="169:13" pos:end="171:34"><if pos:start="169:13" pos:end="171:34">if <condition pos:start="169:16" pos:end="169:33">(<expr pos:start="169:17" pos:end="169:32"><name pos:start="169:17" pos:end="169:26">host_start</name> <operator pos:start="169:28" pos:end="169:29">==</operator> <operator pos:start="169:31" pos:end="169:31">-</operator><literal type="number" pos:start="169:32" pos:end="169:32">1</literal></expr>)</condition><block type="pseudo" pos:start="171:17" pos:end="171:34"><block_content pos:start="171:17" pos:end="171:34">

                <return pos:start="171:17" pos:end="171:34">return <expr pos:start="171:24" pos:end="171:33"><name pos:start="171:24" pos:end="171:33">host_start</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="173:13" pos:end="173:81">/* update start so that it points to the file position at 'offset' */</comment>

            <if_stmt pos:start="175:13" pos:end="177:51"><if pos:start="175:13" pos:end="177:51">if <condition pos:start="175:16" pos:end="175:41">(<expr pos:start="175:17" pos:end="175:40"><operator pos:start="175:17" pos:end="175:17">!</operator><operator pos:start="175:18" pos:end="175:18">(</operator><name pos:start="175:19" pos:end="175:23">flags</name> <operator pos:start="175:25" pos:end="175:25">&amp;</operator> <name pos:start="175:27" pos:end="175:39">MAP_ANONYMOUS</name><operator pos:start="175:40" pos:end="175:40">)</operator></expr>)</condition><block type="pseudo" pos:start="177:17" pos:end="177:51"><block_content pos:start="177:17" pos:end="177:51">

                <expr_stmt pos:start="177:17" pos:end="177:51"><expr pos:start="177:17" pos:end="177:50"><name pos:start="177:17" pos:end="177:26">host_start</name> <operator pos:start="177:28" pos:end="177:29">+=</operator> <name pos:start="177:31" pos:end="177:36">offset</name> <operator pos:start="177:38" pos:end="177:38">-</operator> <name pos:start="177:40" pos:end="177:50">host_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:36"><expr pos:start="179:13" pos:end="179:35"><name pos:start="179:13" pos:end="179:17">start</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <call pos:start="179:21" pos:end="179:35"><name pos:start="179:21" pos:end="179:23">h2g</name><argument_list pos:start="179:24" pos:end="179:35">(<argument pos:start="179:25" pos:end="179:34"><expr pos:start="179:25" pos:end="179:34"><name pos:start="179:25" pos:end="179:34">host_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="181:13" pos:end="181:26">goto <name pos:start="181:18" pos:end="181:25">the_end1</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:34">(<expr pos:start="189:9" pos:end="189:33"><name pos:start="189:9" pos:end="189:13">start</name> <operator pos:start="189:15" pos:end="189:15">&amp;</operator> <operator pos:start="189:17" pos:end="189:17">~</operator><name pos:start="189:18" pos:end="189:33">TARGET_PAGE_MASK</name></expr>)</condition> <block pos:start="189:36" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:18">

        <expr_stmt pos:start="191:9" pos:end="191:23"><expr pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:13">errno</name> <operator pos:start="191:15" pos:end="191:15">=</operator> <name pos:start="191:17" pos:end="191:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="193:9" pos:end="193:18">return <expr pos:start="193:16" pos:end="193:17"><operator pos:start="193:16" pos:end="193:16">-</operator><literal type="number" pos:start="193:17" pos:end="193:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:22"><expr pos:start="197:5" pos:end="197:21"><name pos:start="197:5" pos:end="197:7">end</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <name pos:start="197:11" pos:end="197:15">start</name> <operator pos:start="197:17" pos:end="197:17">+</operator> <name pos:start="197:19" pos:end="197:21">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:36"><expr pos:start="199:5" pos:end="199:35"><name pos:start="199:5" pos:end="199:12">real_end</name> <operator pos:start="199:14" pos:end="199:14">=</operator> <call pos:start="199:16" pos:end="199:35"><name pos:start="199:16" pos:end="199:30">HOST_PAGE_ALIGN</name><argument_list pos:start="199:31" pos:end="199:35">(<argument pos:start="199:32" pos:end="199:34"><expr pos:start="199:32" pos:end="199:34"><name pos:start="199:32" pos:end="199:34">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="203:5" pos:end="205:32">/* worst case: we cannot map the file because the offset is not

       aligned, so we read it */</comment>

    <if_stmt pos:start="207:5" pos:end="249:5"><if pos:start="207:5" pos:end="249:5">if <condition pos:start="207:8" pos:end="209:74">(<expr pos:start="207:9" pos:end="209:73"><operator pos:start="207:9" pos:end="207:9">!</operator><operator pos:start="207:10" pos:end="207:10">(</operator><name pos:start="207:11" pos:end="207:15">flags</name> <operator pos:start="207:17" pos:end="207:17">&amp;</operator> <name pos:start="207:19" pos:end="207:31">MAP_ANONYMOUS</name><operator pos:start="207:32" pos:end="207:32">)</operator> <operator pos:start="207:34" pos:end="207:35">&amp;&amp;</operator>

        <operator pos:start="209:9" pos:end="209:9">(</operator><name pos:start="209:10" pos:end="209:15">offset</name> <operator pos:start="209:17" pos:end="209:17">&amp;</operator> <operator pos:start="209:19" pos:end="209:19">~</operator><name pos:start="209:20" pos:end="209:38">qemu_host_page_mask</name><operator pos:start="209:39" pos:end="209:39">)</operator> <operator pos:start="209:41" pos:end="209:42">!=</operator> <operator pos:start="209:44" pos:end="209:44">(</operator><name pos:start="209:45" pos:end="209:49">start</name> <operator pos:start="209:51" pos:end="209:51">&amp;</operator> <operator pos:start="209:53" pos:end="209:53">~</operator><name pos:start="209:54" pos:end="209:72">qemu_host_page_mask</name><operator pos:start="209:73" pos:end="209:73">)</operator></expr>)</condition> <block pos:start="209:76" pos:end="249:5">{<block_content pos:start="215:9" pos:end="247:21">

        <comment type="block" pos:start="211:9" pos:end="213:51">/* msync() won't work here, so we return an error if write is

           possible while it is a shared mapping */</comment>

        <if_stmt pos:start="215:9" pos:end="223:9"><if pos:start="215:9" pos:end="223:9">if <condition pos:start="215:12" pos:end="217:32">(<expr pos:start="215:13" pos:end="217:31"><operator pos:start="215:13" pos:end="215:13">(</operator><name pos:start="215:14" pos:end="215:18">flags</name> <operator pos:start="215:20" pos:end="215:20">&amp;</operator> <name pos:start="215:22" pos:end="215:29">MAP_TYPE</name><operator pos:start="215:30" pos:end="215:30">)</operator> <operator pos:start="215:32" pos:end="215:33">==</operator> <name pos:start="215:35" pos:end="215:44">MAP_SHARED</name> <operator pos:start="215:46" pos:end="215:47">&amp;&amp;</operator>

            <operator pos:start="217:13" pos:end="217:13">(</operator><name pos:start="217:14" pos:end="217:17">prot</name> <operator pos:start="217:19" pos:end="217:19">&amp;</operator> <name pos:start="217:21" pos:end="217:30">PROT_WRITE</name><operator pos:start="217:31" pos:end="217:31">)</operator></expr>)</condition> <block pos:start="217:34" pos:end="223:9">{<block_content pos:start="219:13" pos:end="221:22">

            <expr_stmt pos:start="219:13" pos:end="219:27"><expr pos:start="219:13" pos:end="219:26"><name pos:start="219:13" pos:end="219:17">errno</name> <operator pos:start="219:19" pos:end="219:19">=</operator> <name pos:start="219:21" pos:end="219:26">EINVAL</name></expr>;</expr_stmt>

            <return pos:start="221:13" pos:end="221:22">return <expr pos:start="221:20" pos:end="221:21"><operator pos:start="221:20" pos:end="221:20">-</operator><literal type="number" pos:start="221:21" pos:end="221:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="225:9" pos:end="229:37"><expr pos:start="225:9" pos:end="229:36"><name pos:start="225:9" pos:end="225:15">retaddr</name> <operator pos:start="225:17" pos:end="225:17">=</operator> <call pos:start="225:19" pos:end="229:36"><name pos:start="225:19" pos:end="225:29">target_mmap</name><argument_list pos:start="225:30" pos:end="229:36">(<argument pos:start="225:31" pos:end="225:35"><expr pos:start="225:31" pos:end="225:35"><name pos:start="225:31" pos:end="225:35">start</name></expr></argument>, <argument pos:start="225:38" pos:end="225:40"><expr pos:start="225:38" pos:end="225:40"><name pos:start="225:38" pos:end="225:40">len</name></expr></argument>, <argument pos:start="225:43" pos:end="225:59"><expr pos:start="225:43" pos:end="225:59"><name pos:start="225:43" pos:end="225:46">prot</name> <operator pos:start="225:48" pos:end="225:48">|</operator> <name pos:start="225:50" pos:end="225:59">PROT_WRITE</name></expr></argument>,

                              <argument pos:start="227:31" pos:end="227:69"><expr pos:start="227:31" pos:end="227:69"><name pos:start="227:31" pos:end="227:39">MAP_FIXED</name> <operator pos:start="227:41" pos:end="227:41">|</operator> <name pos:start="227:43" pos:end="227:53">MAP_PRIVATE</name> <operator pos:start="227:55" pos:end="227:55">|</operator> <name pos:start="227:57" pos:end="227:69">MAP_ANONYMOUS</name></expr></argument>,

                              <argument pos:start="229:31" pos:end="229:32"><expr pos:start="229:31" pos:end="229:32"><operator pos:start="229:31" pos:end="229:31">-</operator><literal type="number" pos:start="229:32" pos:end="229:32">1</literal></expr></argument>, <argument pos:start="229:35" pos:end="229:35"><expr pos:start="229:35" pos:end="229:35"><literal type="number" pos:start="229:35" pos:end="229:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="231:9" pos:end="233:27"><if pos:start="231:9" pos:end="233:27">if <condition pos:start="231:12" pos:end="231:26">(<expr pos:start="231:13" pos:end="231:25"><name pos:start="231:13" pos:end="231:19">retaddr</name> <operator pos:start="231:21" pos:end="231:22">==</operator> <operator pos:start="231:24" pos:end="231:24">-</operator><literal type="number" pos:start="231:25" pos:end="231:25">1</literal></expr>)</condition><block type="pseudo" pos:start="233:13" pos:end="233:27"><block_content pos:start="233:13" pos:end="233:27">

            <return pos:start="233:13" pos:end="233:27">return <expr pos:start="233:20" pos:end="233:26"><name pos:start="233:20" pos:end="233:26">retaddr</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:43"><expr pos:start="235:9" pos:end="235:42"><call pos:start="235:9" pos:end="235:42"><name pos:start="235:9" pos:end="235:13">pread</name><argument_list pos:start="235:14" pos:end="235:42">(<argument pos:start="235:15" pos:end="235:16"><expr pos:start="235:15" pos:end="235:16"><name pos:start="235:15" pos:end="235:16">fd</name></expr></argument>, <argument pos:start="235:19" pos:end="235:28"><expr pos:start="235:19" pos:end="235:28"><call pos:start="235:19" pos:end="235:28"><name pos:start="235:19" pos:end="235:21">g2h</name><argument_list pos:start="235:22" pos:end="235:28">(<argument pos:start="235:23" pos:end="235:27"><expr pos:start="235:23" pos:end="235:27"><name pos:start="235:23" pos:end="235:27">start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="235:31" pos:end="235:33"><expr pos:start="235:31" pos:end="235:33"><name pos:start="235:31" pos:end="235:33">len</name></expr></argument>, <argument pos:start="235:36" pos:end="235:41"><expr pos:start="235:36" pos:end="235:41"><name pos:start="235:36" pos:end="235:41">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="237:9" pos:end="245:9"><if pos:start="237:9" pos:end="245:9">if <condition pos:start="237:12" pos:end="237:33">(<expr pos:start="237:13" pos:end="237:32"><operator pos:start="237:13" pos:end="237:13">!</operator><operator pos:start="237:14" pos:end="237:14">(</operator><name pos:start="237:15" pos:end="237:18">prot</name> <operator pos:start="237:20" pos:end="237:20">&amp;</operator> <name pos:start="237:22" pos:end="237:31">PROT_WRITE</name><operator pos:start="237:32" pos:end="237:32">)</operator></expr>)</condition> <block pos:start="237:35" pos:end="245:9">{<block_content pos:start="239:13" pos:end="243:27">

            <expr_stmt pos:start="239:13" pos:end="239:52"><expr pos:start="239:13" pos:end="239:51"><name pos:start="239:13" pos:end="239:15">ret</name> <operator pos:start="239:17" pos:end="239:17">=</operator> <call pos:start="239:19" pos:end="239:51"><name pos:start="239:19" pos:end="239:33">target_mprotect</name><argument_list pos:start="239:34" pos:end="239:51">(<argument pos:start="239:35" pos:end="239:39"><expr pos:start="239:35" pos:end="239:39"><name pos:start="239:35" pos:end="239:39">start</name></expr></argument>, <argument pos:start="239:42" pos:end="239:44"><expr pos:start="239:42" pos:end="239:44"><name pos:start="239:42" pos:end="239:44">len</name></expr></argument>, <argument pos:start="239:47" pos:end="239:50"><expr pos:start="239:47" pos:end="239:50"><name pos:start="239:47" pos:end="239:50">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="241:13" pos:end="243:27"><if pos:start="241:13" pos:end="243:27">if <condition pos:start="241:16" pos:end="241:25">(<expr pos:start="241:17" pos:end="241:24"><name pos:start="241:17" pos:end="241:19">ret</name> <operator pos:start="241:21" pos:end="241:22">!=</operator> <literal type="number" pos:start="241:24" pos:end="241:24">0</literal></expr>)</condition><block type="pseudo" pos:start="243:17" pos:end="243:27"><block_content pos:start="243:17" pos:end="243:27">

                <return pos:start="243:17" pos:end="243:27">return <expr pos:start="243:24" pos:end="243:26"><name pos:start="243:24" pos:end="243:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="247:9" pos:end="247:21">goto <name pos:start="247:14" pos:end="247:20">the_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="253:5" pos:end="253:41">/* handle the start of the mapping */</comment>

    <if_stmt pos:start="255:5" pos:end="283:5"><if pos:start="255:5" pos:end="283:5">if <condition pos:start="255:8" pos:end="255:27">(<expr pos:start="255:9" pos:end="255:26"><name pos:start="255:9" pos:end="255:13">start</name> <operator pos:start="255:15" pos:end="255:15">&gt;</operator> <name pos:start="255:17" pos:end="255:26">real_start</name></expr>)</condition> <block pos:start="255:29" pos:end="283:5">{<block_content pos:start="257:9" pos:end="281:42">

        <if_stmt pos:start="257:9" pos:end="271:9"><if pos:start="257:9" pos:end="271:9">if <condition pos:start="257:12" pos:end="257:57">(<expr pos:start="257:13" pos:end="257:56"><name pos:start="257:13" pos:end="257:20">real_end</name> <operator pos:start="257:22" pos:end="257:23">==</operator> <name pos:start="257:25" pos:end="257:34">real_start</name> <operator pos:start="257:36" pos:end="257:36">+</operator> <name pos:start="257:38" pos:end="257:56">qemu_host_page_size</name></expr>)</condition> <block pos:start="257:59" pos:end="271:9">{<block_content pos:start="261:13" pos:end="269:26">

            <comment type="block" pos:start="259:13" pos:end="259:38">/* one single host page */</comment>

            <expr_stmt pos:start="261:13" pos:end="263:53"><expr pos:start="261:13" pos:end="263:52"><name pos:start="261:13" pos:end="261:15">ret</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <call pos:start="261:19" pos:end="263:52"><name pos:start="261:19" pos:end="261:27">mmap_frag</name><argument_list pos:start="261:28" pos:end="263:52">(<argument pos:start="261:29" pos:end="261:38"><expr pos:start="261:29" pos:end="261:38"><name pos:start="261:29" pos:end="261:38">real_start</name></expr></argument>, <argument pos:start="261:41" pos:end="261:45"><expr pos:start="261:41" pos:end="261:45"><name pos:start="261:41" pos:end="261:45">start</name></expr></argument>, <argument pos:start="261:48" pos:end="261:50"><expr pos:start="261:48" pos:end="261:50"><name pos:start="261:48" pos:end="261:50">end</name></expr></argument>,

                            <argument pos:start="263:29" pos:end="263:32"><expr pos:start="263:29" pos:end="263:32"><name pos:start="263:29" pos:end="263:32">prot</name></expr></argument>, <argument pos:start="263:35" pos:end="263:39"><expr pos:start="263:35" pos:end="263:39"><name pos:start="263:35" pos:end="263:39">flags</name></expr></argument>, <argument pos:start="263:42" pos:end="263:43"><expr pos:start="263:42" pos:end="263:43"><name pos:start="263:42" pos:end="263:43">fd</name></expr></argument>, <argument pos:start="263:46" pos:end="263:51"><expr pos:start="263:46" pos:end="263:51"><name pos:start="263:46" pos:end="263:51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="265:13" pos:end="267:27"><if pos:start="265:13" pos:end="267:27">if <condition pos:start="265:16" pos:end="265:26">(<expr pos:start="265:17" pos:end="265:25"><name pos:start="265:17" pos:end="265:19">ret</name> <operator pos:start="265:21" pos:end="265:22">==</operator> <operator pos:start="265:24" pos:end="265:24">-</operator><literal type="number" pos:start="265:25" pos:end="265:25">1</literal></expr>)</condition><block type="pseudo" pos:start="267:17" pos:end="267:27"><block_content pos:start="267:17" pos:end="267:27">

                <return pos:start="267:17" pos:end="267:27">return <expr pos:start="267:24" pos:end="267:26"><name pos:start="267:24" pos:end="267:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <goto pos:start="269:13" pos:end="269:26">goto <name pos:start="269:18" pos:end="269:25">the_end1</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="273:9" pos:end="275:49"><expr pos:start="273:9" pos:end="275:48"><name pos:start="273:9" pos:end="273:11">ret</name> <operator pos:start="273:13" pos:end="273:13">=</operator> <call pos:start="273:15" pos:end="275:48"><name pos:start="273:15" pos:end="273:23">mmap_frag</name><argument_list pos:start="273:24" pos:end="275:48">(<argument pos:start="273:25" pos:end="273:34"><expr pos:start="273:25" pos:end="273:34"><name pos:start="273:25" pos:end="273:34">real_start</name></expr></argument>, <argument pos:start="273:37" pos:end="273:41"><expr pos:start="273:37" pos:end="273:41"><name pos:start="273:37" pos:end="273:41">start</name></expr></argument>, <argument pos:start="273:44" pos:end="273:75"><expr pos:start="273:44" pos:end="273:75"><name pos:start="273:44" pos:end="273:53">real_start</name> <operator pos:start="273:55" pos:end="273:55">+</operator> <name pos:start="273:57" pos:end="273:75">qemu_host_page_size</name></expr></argument>,

                        <argument pos:start="275:25" pos:end="275:28"><expr pos:start="275:25" pos:end="275:28"><name pos:start="275:25" pos:end="275:28">prot</name></expr></argument>, <argument pos:start="275:31" pos:end="275:35"><expr pos:start="275:31" pos:end="275:35"><name pos:start="275:31" pos:end="275:35">flags</name></expr></argument>, <argument pos:start="275:38" pos:end="275:39"><expr pos:start="275:38" pos:end="275:39"><name pos:start="275:38" pos:end="275:39">fd</name></expr></argument>, <argument pos:start="275:42" pos:end="275:47"><expr pos:start="275:42" pos:end="275:47"><name pos:start="275:42" pos:end="275:47">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="277:9" pos:end="279:23"><if pos:start="277:9" pos:end="279:23">if <condition pos:start="277:12" pos:end="277:22">(<expr pos:start="277:13" pos:end="277:21"><name pos:start="277:13" pos:end="277:15">ret</name> <operator pos:start="277:17" pos:end="277:18">==</operator> <operator pos:start="277:20" pos:end="277:20">-</operator><literal type="number" pos:start="277:21" pos:end="277:21">1</literal></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:23"><block_content pos:start="279:13" pos:end="279:23">

            <return pos:start="279:13" pos:end="279:23">return <expr pos:start="279:20" pos:end="279:22"><name pos:start="279:20" pos:end="279:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:42"><expr pos:start="281:9" pos:end="281:41"><name pos:start="281:9" pos:end="281:18">real_start</name> <operator pos:start="281:20" pos:end="281:21">+=</operator> <name pos:start="281:23" pos:end="281:41">qemu_host_page_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="285:5" pos:end="285:39">/* handle the end of the mapping */</comment>

    <if_stmt pos:start="287:5" pos:end="303:5"><if pos:start="287:5" pos:end="303:5">if <condition pos:start="287:8" pos:end="287:23">(<expr pos:start="287:9" pos:end="287:22"><name pos:start="287:9" pos:end="287:11">end</name> <operator pos:start="287:13" pos:end="287:13">&lt;</operator> <name pos:start="287:15" pos:end="287:22">real_end</name></expr>)</condition> <block pos:start="287:25" pos:end="303:5">{<block_content pos:start="289:9" pos:end="301:40">

        <expr_stmt pos:start="289:9" pos:end="295:73"><expr pos:start="289:9" pos:end="295:72"><name pos:start="289:9" pos:end="289:11">ret</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <call pos:start="289:15" pos:end="295:72"><name pos:start="289:15" pos:end="289:23">mmap_frag</name><argument_list pos:start="289:24" pos:end="295:72">(<argument pos:start="289:25" pos:end="289:54"><expr pos:start="289:25" pos:end="289:54"><name pos:start="289:25" pos:end="289:32">real_end</name> <operator pos:start="289:34" pos:end="289:34">-</operator> <name pos:start="289:36" pos:end="289:54">qemu_host_page_size</name></expr></argument>,

                        <argument pos:start="291:25" pos:end="291:54"><expr pos:start="291:25" pos:end="291:54"><name pos:start="291:25" pos:end="291:32">real_end</name> <operator pos:start="291:34" pos:end="291:34">-</operator> <name pos:start="291:36" pos:end="291:54">qemu_host_page_size</name></expr></argument>, <argument pos:start="291:57" pos:end="291:64"><expr pos:start="291:57" pos:end="291:64"><name pos:start="291:57" pos:end="291:64">real_end</name></expr></argument>,

                        <argument pos:start="293:25" pos:end="293:28"><expr pos:start="293:25" pos:end="293:28"><name pos:start="293:25" pos:end="293:28">prot</name></expr></argument>, <argument pos:start="293:31" pos:end="293:35"><expr pos:start="293:31" pos:end="293:35"><name pos:start="293:31" pos:end="293:35">flags</name></expr></argument>, <argument pos:start="293:38" pos:end="293:39"><expr pos:start="293:38" pos:end="293:39"><name pos:start="293:38" pos:end="293:39">fd</name></expr></argument>,

                        <argument pos:start="295:25" pos:end="295:71"><expr pos:start="295:25" pos:end="295:71"><name pos:start="295:25" pos:end="295:30">offset</name> <operator pos:start="295:32" pos:end="295:32">+</operator> <name pos:start="295:34" pos:end="295:41">real_end</name> <operator pos:start="295:43" pos:end="295:43">-</operator> <name pos:start="295:45" pos:end="295:63">qemu_host_page_size</name> <operator pos:start="295:65" pos:end="295:65">-</operator> <name pos:start="295:67" pos:end="295:71">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="297:9" pos:end="299:23"><if pos:start="297:9" pos:end="299:23">if <condition pos:start="297:12" pos:end="297:22">(<expr pos:start="297:13" pos:end="297:21"><name pos:start="297:13" pos:end="297:15">ret</name> <operator pos:start="297:17" pos:end="297:18">==</operator> <operator pos:start="297:20" pos:end="297:20">-</operator><literal type="number" pos:start="297:21" pos:end="297:21">1</literal></expr>)</condition><block type="pseudo" pos:start="299:13" pos:end="299:23"><block_content pos:start="299:13" pos:end="299:23">

            <return pos:start="299:13" pos:end="299:23">return <expr pos:start="299:20" pos:end="299:22"><name pos:start="299:20" pos:end="299:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:40"><expr pos:start="301:9" pos:end="301:39"><name pos:start="301:9" pos:end="301:16">real_end</name> <operator pos:start="301:18" pos:end="301:19">-=</operator> <name pos:start="301:21" pos:end="301:39">qemu_host_page_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="307:5" pos:end="307:33">/* map the middle (easier) */</comment>

    <if_stmt pos:start="309:5" pos:end="329:5"><if pos:start="309:5" pos:end="329:5">if <condition pos:start="309:8" pos:end="309:30">(<expr pos:start="309:9" pos:end="309:29"><name pos:start="309:9" pos:end="309:18">real_start</name> <operator pos:start="309:20" pos:end="309:20">&lt;</operator> <name pos:start="309:22" pos:end="309:29">real_end</name></expr>)</condition> <block pos:start="309:32" pos:end="329:5">{<block_content pos:start="311:9" pos:end="327:23">

        <decl_stmt pos:start="311:9" pos:end="311:30"><decl pos:start="311:9" pos:end="311:29"><type pos:start="311:9" pos:end="311:21"><name pos:start="311:9" pos:end="311:16">unsigned</name> <name pos:start="311:18" pos:end="311:21">long</name></type> <name pos:start="311:23" pos:end="311:29">offset1</name></decl>;</decl_stmt>

	<if_stmt pos:start="313:9" pos:end="319:48"><if pos:start="313:9" pos:end="315:22">if <condition pos:start="313:12" pos:end="313:34">(<expr pos:start="313:13" pos:end="313:33"><name pos:start="313:13" pos:end="313:17">flags</name> <operator pos:start="313:19" pos:end="313:19">&amp;</operator> <name pos:start="313:21" pos:end="313:33">MAP_ANONYMOUS</name></expr>)</condition><block type="pseudo" pos:start="315:11" pos:end="315:22"><block_content pos:start="315:11" pos:end="315:22">

	  <expr_stmt pos:start="315:11" pos:end="315:22"><expr pos:start="315:11" pos:end="315:21"><name pos:start="315:11" pos:end="315:17">offset1</name> <operator pos:start="315:19" pos:end="315:19">=</operator> <literal type="number" pos:start="315:21" pos:end="315:21">0</literal></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="317:9" pos:end="319:48">else<block type="pseudo" pos:start="319:11" pos:end="319:48"><block_content pos:start="319:11" pos:end="319:48">

	  <expr_stmt pos:start="319:11" pos:end="319:48"><expr pos:start="319:11" pos:end="319:47"><name pos:start="319:11" pos:end="319:17">offset1</name> <operator pos:start="319:19" pos:end="319:19">=</operator> <name pos:start="319:21" pos:end="319:26">offset</name> <operator pos:start="319:28" pos:end="319:28">+</operator> <name pos:start="319:30" pos:end="319:39">real_start</name> <operator pos:start="319:41" pos:end="319:41">-</operator> <name pos:start="319:43" pos:end="319:47">start</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="321:9" pos:end="323:51"><expr pos:start="321:9" pos:end="323:50"><name pos:start="321:9" pos:end="321:11">ret</name> <operator pos:start="321:13" pos:end="321:13">=</operator> <operator pos:start="321:15" pos:end="321:15">(</operator><name pos:start="321:16" pos:end="321:19">long</name><operator pos:start="321:20" pos:end="321:20">)</operator><call pos:start="321:21" pos:end="323:50"><name pos:start="321:21" pos:end="321:24">mmap</name><argument_list pos:start="321:25" pos:end="323:50">(<argument pos:start="321:26" pos:end="321:40"><expr pos:start="321:26" pos:end="321:40"><call pos:start="321:26" pos:end="321:40"><name pos:start="321:26" pos:end="321:28">g2h</name><argument_list pos:start="321:29" pos:end="321:40">(<argument pos:start="321:30" pos:end="321:39"><expr pos:start="321:30" pos:end="321:39"><name pos:start="321:30" pos:end="321:39">real_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="321:43" pos:end="321:63"><expr pos:start="321:43" pos:end="321:63"><name pos:start="321:43" pos:end="321:50">real_end</name> <operator pos:start="321:52" pos:end="321:52">-</operator> <name pos:start="321:54" pos:end="321:63">real_start</name></expr></argument>,

                         <argument pos:start="323:26" pos:end="323:29"><expr pos:start="323:26" pos:end="323:29"><name pos:start="323:26" pos:end="323:29">prot</name></expr></argument>, <argument pos:start="323:32" pos:end="323:36"><expr pos:start="323:32" pos:end="323:36"><name pos:start="323:32" pos:end="323:36">flags</name></expr></argument>, <argument pos:start="323:39" pos:end="323:40"><expr pos:start="323:39" pos:end="323:40"><name pos:start="323:39" pos:end="323:40">fd</name></expr></argument>, <argument pos:start="323:43" pos:end="323:49"><expr pos:start="323:43" pos:end="323:49"><name pos:start="323:43" pos:end="323:49">offset1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="325:9" pos:end="327:23"><if pos:start="325:9" pos:end="327:23">if <condition pos:start="325:12" pos:end="325:22">(<expr pos:start="325:13" pos:end="325:21"><name pos:start="325:13" pos:end="325:15">ret</name> <operator pos:start="325:17" pos:end="325:18">==</operator> <operator pos:start="325:20" pos:end="325:20">-</operator><literal type="number" pos:start="325:21" pos:end="325:21">1</literal></expr>)</condition><block type="pseudo" pos:start="327:13" pos:end="327:23"><block_content pos:start="327:13" pos:end="327:23">

            <return pos:start="327:13" pos:end="327:23">return <expr pos:start="327:20" pos:end="327:22"><name pos:start="327:20" pos:end="327:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

 <label pos:start="331:2" pos:end="331:10"><name pos:start="331:2" pos:end="331:9">the_end1</name>:</label>

    <expr_stmt pos:start="333:5" pos:end="333:58"><expr pos:start="333:5" pos:end="333:57"><call pos:start="333:5" pos:end="333:57"><name pos:start="333:5" pos:end="333:18">page_set_flags</name><argument_list pos:start="333:19" pos:end="333:57">(<argument pos:start="333:20" pos:end="333:24"><expr pos:start="333:20" pos:end="333:24"><name pos:start="333:20" pos:end="333:24">start</name></expr></argument>, <argument pos:start="333:27" pos:end="333:37"><expr pos:start="333:27" pos:end="333:37"><name pos:start="333:27" pos:end="333:31">start</name> <operator pos:start="333:33" pos:end="333:33">+</operator> <name pos:start="333:35" pos:end="333:37">len</name></expr></argument>, <argument pos:start="333:40" pos:end="333:56"><expr pos:start="333:40" pos:end="333:56"><name pos:start="333:40" pos:end="333:43">prot</name> <operator pos:start="333:45" pos:end="333:45">|</operator> <name pos:start="333:47" pos:end="333:56">PAGE_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label pos:start="335:2" pos:end="338:0"><name pos:start="335:2" pos:end="335:8">the_end</name>:</label>

<cpp:ifdef pos:start="337:1" pos:end="337:17">#<cpp:directive pos:start="337:2" pos:end="337:6">ifdef</cpp:directive> <name pos:start="337:8" pos:end="337:17">DEBUG_MMAP</name></cpp:ifdef>

    <expr_stmt pos:start="339:5" pos:end="339:39"><expr pos:start="339:5" pos:end="339:38"><call pos:start="339:5" pos:end="339:38"><name pos:start="339:5" pos:end="339:10">printf</name><argument_list pos:start="339:11" pos:end="339:38">(<argument pos:start="339:12" pos:end="339:24"><expr pos:start="339:12" pos:end="339:24"><literal type="string" pos:start="339:12" pos:end="339:24">"ret=0x%lx\n"</literal></expr></argument>, <argument pos:start="339:27" pos:end="339:37"><expr pos:start="339:27" pos:end="339:37"><operator pos:start="339:27" pos:end="339:27">(</operator><name pos:start="339:28" pos:end="339:31">long</name><operator pos:start="339:32" pos:end="339:32">)</operator><name pos:start="339:33" pos:end="339:37">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:22"><expr pos:start="341:5" pos:end="341:21"><call pos:start="341:5" pos:end="341:21"><name pos:start="341:5" pos:end="341:13">page_dump</name><argument_list pos:start="341:14" pos:end="341:21">(<argument pos:start="341:15" pos:end="341:20"><expr pos:start="341:15" pos:end="341:20"><name pos:start="341:15" pos:end="341:20">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="343:5" pos:end="346:0"><expr pos:start="343:5" pos:end="343:16"><call pos:start="343:5" pos:end="343:16"><name pos:start="343:5" pos:end="343:10">printf</name><argument_list pos:start="343:11" pos:end="343:16">(<argument pos:start="343:12" pos:end="343:15"><expr pos:start="343:12" pos:end="343:15"><literal type="string" pos:start="343:12" pos:end="343:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif>

    <return pos:start="347:5" pos:end="347:17">return <expr pos:start="347:12" pos:end="347:16"><name pos:start="347:12" pos:end="347:16">start</name></expr>;</return>

</block_content>}</block></function>
</unit>
