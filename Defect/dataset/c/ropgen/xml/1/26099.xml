<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26099.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:42">mpeg1_decode_block_inter</name><parameter_list pos:start="1:43" pos:end="1:84">(<parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:57">MpegEncContext</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">s</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:76"><decl pos:start="1:63" pos:end="1:76"><type pos:start="1:63" pos:end="1:76"><name pos:start="1:63" pos:end="1:69">int16_t</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:76">block</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:83"><decl pos:start="1:79" pos:end="1:83"><type pos:start="1:79" pos:end="1:83"><name pos:start="1:79" pos:end="1:81">int</name></type> <name pos:start="1:83" pos:end="1:83">n</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="5:5" pos:end="145:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">level</name></decl>, <decl pos:start="5:16" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:16">i</name></decl>, <decl pos:start="5:19" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:19">j</name></decl>, <decl pos:start="5:22" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:24">run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">RLTable</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:15">rl</name> <init pos:start="7:17" pos:end="7:30">= <expr pos:start="7:19" pos:end="7:30"><operator pos:start="7:19" pos:end="7:19">&amp;</operator><name pos:start="7:20" pos:end="7:30">ff_rl_mpeg1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:65"><decl pos:start="9:5" pos:end="9:64"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier> <specifier pos:start="9:15" pos:end="9:19">const</specifier></type> <name pos:start="9:21" pos:end="9:29">scantable</name>    <init pos:start="9:34" pos:end="9:64">= <expr pos:start="9:36" pos:end="9:64"><name pos:start="9:36" pos:end="9:64"><name pos:start="9:36" pos:end="9:36">s</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:53">intra_scantable</name><operator pos:start="9:54" pos:end="9:54">.</operator><name pos:start="9:55" pos:end="9:64">permutated</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:51"><decl pos:start="11:5" pos:end="11:50"><type pos:start="11:5" pos:end="11:20"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:18">uint16_t</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:32">quant_matrix</name> <init pos:start="11:34" pos:end="11:50">= <expr pos:start="11:36" pos:end="11:50"><name pos:start="11:36" pos:end="11:50"><name pos:start="11:36" pos:end="11:36">s</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:50">inter_matrix</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:13"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:13">int</name></type> <name pos:start="13:15" pos:end="13:20">qscale</name>             <init pos:start="13:34" pos:end="13:44">= <expr pos:start="13:36" pos:end="13:44"><name pos:start="13:36" pos:end="13:44"><name pos:start="13:36" pos:end="13:36">s</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:44">qscale</name></name></expr></init></decl>;</decl_stmt>



    <block pos:start="17:5" pos:end="141:5">{<block_content pos:start="19:9" pos:end="139:33">

        <expr_stmt pos:start="19:9" pos:end="19:32"><expr pos:start="19:9" pos:end="19:31"><call pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:19">OPEN_READER</name><argument_list pos:start="19:20" pos:end="19:31">(<argument pos:start="19:21" pos:end="19:22"><expr pos:start="19:21" pos:end="19:22"><name pos:start="19:21" pos:end="19:22">re</name></expr></argument>, <argument pos:start="19:25" pos:end="19:30"><expr pos:start="19:25" pos:end="19:30"><operator pos:start="19:25" pos:end="19:25">&amp;</operator><name pos:start="19:26" pos:end="19:30"><name pos:start="19:26" pos:end="19:26">s</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:30">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:15"><expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:9">i</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <operator pos:start="21:13" pos:end="21:13">-</operator><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="23:9" pos:end="23:78">// special case for first coefficient, no need to add second VLC table</comment>

        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><call pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:20">UPDATE_CACHE</name><argument_list pos:start="25:21" pos:end="25:32">(<argument pos:start="25:22" pos:end="25:23"><expr pos:start="25:22" pos:end="25:23"><name pos:start="25:22" pos:end="25:23">re</name></expr></argument>, <argument pos:start="25:26" pos:end="25:31"><expr pos:start="25:26" pos:end="25:31"><operator pos:start="25:26" pos:end="25:26">&amp;</operator><name pos:start="25:27" pos:end="25:31"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="47:9"><if pos:start="27:9" pos:end="47:9">if <condition pos:start="27:12" pos:end="27:49">(<expr pos:start="27:13" pos:end="27:48"><operator pos:start="27:13" pos:end="27:13">(</operator><operator pos:start="27:14" pos:end="27:14">(</operator><name pos:start="27:15" pos:end="27:21">int32_t</name><operator pos:start="27:22" pos:end="27:22">)</operator><call pos:start="27:23" pos:end="27:43"><name pos:start="27:23" pos:end="27:31">GET_CACHE</name><argument_list pos:start="27:32" pos:end="27:43">(<argument pos:start="27:33" pos:end="27:34"><expr pos:start="27:33" pos:end="27:34"><name pos:start="27:33" pos:end="27:34">re</name></expr></argument>, <argument pos:start="27:37" pos:end="27:42"><expr pos:start="27:37" pos:end="27:42"><operator pos:start="27:37" pos:end="27:37">&amp;</operator><name pos:start="27:38" pos:end="27:42"><name pos:start="27:38" pos:end="27:38">s</name><operator pos:start="27:39" pos:end="27:40">-&gt;</operator><name pos:start="27:41" pos:end="27:42">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="27:44" pos:end="27:44">)</operator> <operator pos:start="27:46" pos:end="27:46">&lt;</operator> <literal type="number" pos:start="27:48" pos:end="27:48">0</literal></expr>)</condition> <block pos:start="27:51" pos:end="47:9">{<block_content pos:start="29:13" pos:end="45:25">

            <expr_stmt pos:start="29:13" pos:end="29:56"><expr pos:start="29:13" pos:end="29:55"><name pos:start="29:13" pos:end="29:17">level</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <operator pos:start="29:21" pos:end="29:21">(</operator><literal type="number" pos:start="29:22" pos:end="29:22">3</literal> <operator pos:start="29:24" pos:end="29:24">*</operator> <name pos:start="29:26" pos:end="29:31">qscale</name> <operator pos:start="29:33" pos:end="29:33">*</operator> <name pos:start="29:35" pos:end="29:49"><name pos:start="29:35" pos:end="29:46">quant_matrix</name><index pos:start="29:47" pos:end="29:49">[<expr pos:start="29:48" pos:end="29:48"><literal type="number" pos:start="29:48" pos:end="29:48">0</literal></expr>]</index></name><operator pos:start="29:50" pos:end="29:50">)</operator> <operator pos:start="29:52" pos:end="29:53">&gt;&gt;</operator> <literal type="number" pos:start="29:55" pos:end="29:55">5</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:36"><expr pos:start="31:13" pos:end="31:35"><name pos:start="31:13" pos:end="31:17">level</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <operator pos:start="31:21" pos:end="31:21">(</operator><name pos:start="31:22" pos:end="31:26">level</name> <operator pos:start="31:28" pos:end="31:28">-</operator> <literal type="number" pos:start="31:30" pos:end="31:30">1</literal><operator pos:start="31:31" pos:end="31:31">)</operator> <operator pos:start="31:33" pos:end="31:33">|</operator> <literal type="number" pos:start="31:35" pos:end="31:35">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="35:31"><if pos:start="33:13" pos:end="35:31">if <condition pos:start="33:16" pos:end="33:51">(<expr pos:start="33:17" pos:end="33:50"><call pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:25">GET_CACHE</name><argument_list pos:start="33:26" pos:end="33:37">(<argument pos:start="33:27" pos:end="33:28"><expr pos:start="33:27" pos:end="33:28"><name pos:start="33:27" pos:end="33:28">re</name></expr></argument>, <argument pos:start="33:31" pos:end="33:36"><expr pos:start="33:31" pos:end="33:36"><operator pos:start="33:31" pos:end="33:31">&amp;</operator><name pos:start="33:32" pos:end="33:36"><name pos:start="33:32" pos:end="33:32">s</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="33:39" pos:end="33:39">&amp;</operator> <literal type="number" pos:start="33:41" pos:end="33:50">0x40000000</literal></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:31"><block_content pos:start="35:17" pos:end="35:31">

                <expr_stmt pos:start="35:17" pos:end="35:31"><expr pos:start="35:17" pos:end="35:30"><name pos:start="35:17" pos:end="35:21">level</name> <operator pos:start="35:23" pos:end="35:23">=</operator> <operator pos:start="35:25" pos:end="35:25">-</operator><name pos:start="35:26" pos:end="35:30">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:29"><expr pos:start="37:13" pos:end="37:28"><name pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:17">block</name><index pos:start="37:18" pos:end="37:20">[<expr pos:start="37:19" pos:end="37:19"><literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>]</index></name> <operator pos:start="37:22" pos:end="37:22">=</operator> <name pos:start="37:24" pos:end="37:28">level</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:13">i</name><operator pos:start="39:14" pos:end="39:15">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:37"><expr pos:start="41:13" pos:end="41:36"><call pos:start="41:13" pos:end="41:36"><name pos:start="41:13" pos:end="41:21">SKIP_BITS</name><argument_list pos:start="41:22" pos:end="41:36">(<argument pos:start="41:23" pos:end="41:24"><expr pos:start="41:23" pos:end="41:24"><name pos:start="41:23" pos:end="41:24">re</name></expr></argument>, <argument pos:start="41:27" pos:end="41:32"><expr pos:start="41:27" pos:end="41:32"><operator pos:start="41:27" pos:end="41:27">&amp;</operator><name pos:start="41:28" pos:end="41:32"><name pos:start="41:28" pos:end="41:28">s</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:32">gb</name></name></expr></argument>, <argument pos:start="41:35" pos:end="41:35"><expr pos:start="41:35" pos:end="41:35"><literal type="number" pos:start="41:35" pos:end="41:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="45:25"><if pos:start="43:13" pos:end="45:25">if <condition pos:start="43:16" pos:end="43:72">(<expr pos:start="43:17" pos:end="43:71"><operator pos:start="43:17" pos:end="43:17">(</operator><operator pos:start="43:18" pos:end="43:18">(</operator><name pos:start="43:19" pos:end="43:25">int32_t</name><operator pos:start="43:26" pos:end="43:26">)</operator><call pos:start="43:27" pos:end="43:47"><name pos:start="43:27" pos:end="43:35">GET_CACHE</name><argument_list pos:start="43:36" pos:end="43:47">(<argument pos:start="43:37" pos:end="43:38"><expr pos:start="43:37" pos:end="43:38"><name pos:start="43:37" pos:end="43:38">re</name></expr></argument>, <argument pos:start="43:41" pos:end="43:46"><expr pos:start="43:41" pos:end="43:46"><operator pos:start="43:41" pos:end="43:41">&amp;</operator><name pos:start="43:42" pos:end="43:46"><name pos:start="43:42" pos:end="43:42">s</name><operator pos:start="43:43" pos:end="43:44">-&gt;</operator><name pos:start="43:45" pos:end="43:46">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="43:48" pos:end="43:48">)</operator> <operator pos:start="43:50" pos:end="43:51">&lt;=</operator> <operator pos:start="43:53" pos:end="43:53">(</operator><name pos:start="43:54" pos:end="43:60">int32_t</name><operator pos:start="43:61" pos:end="43:61">)</operator><literal type="number" pos:start="43:62" pos:end="43:71">0xBFFFFFFF</literal></expr>)</condition><block type="pseudo" pos:start="45:17" pos:end="45:25"><block_content pos:start="45:17" pos:end="45:25">

                <goto pos:start="45:17" pos:end="45:25">goto <name pos:start="45:22" pos:end="45:24">end</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="49:9" pos:end="49:51">/* now quantify &amp; encode AC coefficients */</comment>

        <for pos:start="51:9" pos:end="133:9">for <control pos:start="51:13" pos:end="51:16">(<init pos:start="51:14" pos:end="51:14">;</init><condition pos:start="51:15" pos:end="51:15">;</condition><incr/>)</control> <block pos:start="51:18" pos:end="133:9">{<block_content pos:start="53:13" pos:end="131:37">

            <expr_stmt pos:start="53:13" pos:end="53:82"><expr pos:start="53:13" pos:end="53:81"><call pos:start="53:13" pos:end="53:81"><name pos:start="53:13" pos:end="53:22">GET_RL_VLC</name><argument_list pos:start="53:23" pos:end="53:81">(<argument pos:start="53:24" pos:end="53:28"><expr pos:start="53:24" pos:end="53:28"><name pos:start="53:24" pos:end="53:28">level</name></expr></argument>, <argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">run</name></expr></argument>, <argument pos:start="53:36" pos:end="53:37"><expr pos:start="53:36" pos:end="53:37"><name pos:start="53:36" pos:end="53:37">re</name></expr></argument>, <argument pos:start="53:40" pos:end="53:45"><expr pos:start="53:40" pos:end="53:45"><operator pos:start="53:40" pos:end="53:40">&amp;</operator><name pos:start="53:41" pos:end="53:45"><name pos:start="53:41" pos:end="53:41">s</name><operator pos:start="53:42" pos:end="53:43">-&gt;</operator><name pos:start="53:44" pos:end="53:45">gb</name></name></expr></argument>, <argument pos:start="53:48" pos:end="53:60"><expr pos:start="53:48" pos:end="53:60"><name pos:start="53:48" pos:end="53:60"><name pos:start="53:48" pos:end="53:49">rl</name><operator pos:start="53:50" pos:end="53:51">-&gt;</operator><name pos:start="53:52" pos:end="53:57">rl_vlc</name><index pos:start="53:58" pos:end="53:60">[<expr pos:start="53:59" pos:end="53:59"><literal type="number" pos:start="53:59" pos:end="53:59">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="53:63" pos:end="53:74"><expr pos:start="53:63" pos:end="53:74"><name pos:start="53:63" pos:end="53:74">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="53:77" pos:end="53:77"><expr pos:start="53:77" pos:end="53:77"><literal type="number" pos:start="53:77" pos:end="53:77">2</literal></expr></argument>, <argument pos:start="53:80" pos:end="53:80"><expr pos:start="53:80" pos:end="53:80"><literal type="number" pos:start="53:80" pos:end="53:80">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="57:13" pos:end="113:13"><if pos:start="57:13" pos:end="71:13">if <condition pos:start="57:16" pos:end="57:27">(<expr pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:21">level</name> <operator pos:start="57:23" pos:end="57:24">!=</operator> <literal type="number" pos:start="57:26" pos:end="57:26">0</literal></expr>)</condition> <block pos:start="57:29" pos:end="71:13">{<block_content pos:start="59:17" pos:end="69:41">

                <expr_stmt pos:start="59:17" pos:end="59:25"><expr pos:start="59:17" pos:end="59:24"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:20">+=</operator> <name pos:start="59:22" pos:end="59:24">run</name></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:33"><expr pos:start="61:17" pos:end="61:32"><name pos:start="61:17" pos:end="61:17">j</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:29">scantable</name><index pos:start="61:30" pos:end="61:32">[<expr pos:start="61:31" pos:end="61:31"><name pos:start="61:31" pos:end="61:31">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:74"><expr pos:start="63:17" pos:end="63:73"><name pos:start="63:17" pos:end="63:21">level</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <operator pos:start="63:25" pos:end="63:25">(</operator><operator pos:start="63:26" pos:end="63:26">(</operator><name pos:start="63:27" pos:end="63:31">level</name> <operator pos:start="63:33" pos:end="63:33">*</operator> <literal type="number" pos:start="63:35" pos:end="63:37">2</literal> <operator pos:start="63:37" pos:end="63:37">+</operator> <literal type="number" pos:start="63:39" pos:end="63:39">1</literal><operator pos:start="63:40" pos:end="63:40">)</operator> <operator pos:start="63:42" pos:end="63:42">*</operator> <name pos:start="63:44" pos:end="63:49">qscale</name> <operator pos:start="63:51" pos:end="63:51">*</operator> <name pos:start="63:53" pos:end="63:67"><name pos:start="63:53" pos:end="63:64">quant_matrix</name><index pos:start="63:65" pos:end="63:67">[<expr pos:start="63:66" pos:end="63:66"><name pos:start="63:66" pos:end="63:66">j</name></expr>]</index></name><operator pos:start="63:68" pos:end="63:68">)</operator> <operator pos:start="63:70" pos:end="63:71">&gt;&gt;</operator> <literal type="number" pos:start="63:73" pos:end="63:73">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:40"><expr pos:start="65:17" pos:end="65:39"><name pos:start="65:17" pos:end="65:21">level</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <operator pos:start="65:25" pos:end="65:25">(</operator><name pos:start="65:26" pos:end="65:30">level</name> <operator pos:start="65:32" pos:end="65:32">-</operator> <literal type="number" pos:start="65:34" pos:end="65:34">1</literal><operator pos:start="65:35" pos:end="65:35">)</operator> <operator pos:start="65:37" pos:end="65:37">|</operator> <literal type="number" pos:start="65:39" pos:end="65:39">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:88"><expr pos:start="67:17" pos:end="67:87"><name pos:start="67:17" pos:end="67:21">level</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <operator pos:start="67:25" pos:end="67:25">(</operator><name pos:start="67:26" pos:end="67:30">level</name> <operator pos:start="67:32" pos:end="67:32">^</operator> <call pos:start="67:34" pos:end="67:58"><name pos:start="67:34" pos:end="67:43">SHOW_SBITS</name><argument_list pos:start="67:44" pos:end="67:58">(<argument pos:start="67:45" pos:end="67:46"><expr pos:start="67:45" pos:end="67:46"><name pos:start="67:45" pos:end="67:46">re</name></expr></argument>, <argument pos:start="67:49" pos:end="67:54"><expr pos:start="67:49" pos:end="67:54"><operator pos:start="67:49" pos:end="67:49">&amp;</operator><name pos:start="67:50" pos:end="67:54"><name pos:start="67:50" pos:end="67:50">s</name><operator pos:start="67:51" pos:end="67:52">-&gt;</operator><name pos:start="67:53" pos:end="67:54">gb</name></name></expr></argument>, <argument pos:start="67:57" pos:end="67:57"><expr pos:start="67:57" pos:end="67:57"><literal type="number" pos:start="67:57" pos:end="67:57">1</literal></expr></argument>)</argument_list></call><operator pos:start="67:59" pos:end="67:59">)</operator> <operator pos:start="67:61" pos:end="67:61">-</operator> <call pos:start="67:63" pos:end="67:87"><name pos:start="67:63" pos:end="67:72">SHOW_SBITS</name><argument_list pos:start="67:73" pos:end="67:87">(<argument pos:start="67:74" pos:end="67:75"><expr pos:start="67:74" pos:end="67:75"><name pos:start="67:74" pos:end="67:75">re</name></expr></argument>, <argument pos:start="67:78" pos:end="67:83"><expr pos:start="67:78" pos:end="67:83"><operator pos:start="67:78" pos:end="67:78">&amp;</operator><name pos:start="67:79" pos:end="67:83"><name pos:start="67:79" pos:end="67:79">s</name><operator pos:start="67:80" pos:end="67:81">-&gt;</operator><name pos:start="67:82" pos:end="67:83">gb</name></name></expr></argument>, <argument pos:start="67:86" pos:end="67:86"><expr pos:start="67:86" pos:end="67:86"><literal type="number" pos:start="67:86" pos:end="67:86">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:41"><expr pos:start="69:17" pos:end="69:40"><call pos:start="69:17" pos:end="69:40"><name pos:start="69:17" pos:end="69:25">SKIP_BITS</name><argument_list pos:start="69:26" pos:end="69:40">(<argument pos:start="69:27" pos:end="69:28"><expr pos:start="69:27" pos:end="69:28"><name pos:start="69:27" pos:end="69:28">re</name></expr></argument>, <argument pos:start="69:31" pos:end="69:36"><expr pos:start="69:31" pos:end="69:36"><operator pos:start="69:31" pos:end="69:31">&amp;</operator><name pos:start="69:32" pos:end="69:36"><name pos:start="69:32" pos:end="69:32">s</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:36">gb</name></name></expr></argument>, <argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><literal type="number" pos:start="69:39" pos:end="69:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="113:13">else <block pos:start="71:20" pos:end="113:13">{<block_content pos:start="75:17" pos:end="111:17">

                <comment type="block" pos:start="73:17" pos:end="73:28">/* escape */</comment>

                <expr_stmt pos:start="75:17" pos:end="75:52"><expr pos:start="75:17" pos:end="75:51"><name pos:start="75:17" pos:end="75:19">run</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:47"><name pos:start="75:23" pos:end="75:32">SHOW_UBITS</name><argument_list pos:start="75:33" pos:end="75:47">(<argument pos:start="75:34" pos:end="75:35"><expr pos:start="75:34" pos:end="75:35"><name pos:start="75:34" pos:end="75:35">re</name></expr></argument>, <argument pos:start="75:38" pos:end="75:43"><expr pos:start="75:38" pos:end="75:43"><operator pos:start="75:38" pos:end="75:38">&amp;</operator><name pos:start="75:39" pos:end="75:43"><name pos:start="75:39" pos:end="75:39">s</name><operator pos:start="75:40" pos:end="75:41">-&gt;</operator><name pos:start="75:42" pos:end="75:43">gb</name></name></expr></argument>, <argument pos:start="75:46" pos:end="75:46"><expr pos:start="75:46" pos:end="75:46"><literal type="number" pos:start="75:46" pos:end="75:46">6</literal></expr></argument>)</argument_list></call> <operator pos:start="75:49" pos:end="75:49">+</operator> <literal type="number" pos:start="75:51" pos:end="75:51">1</literal></expr>;</expr_stmt> <expr_stmt pos:start="75:54" pos:end="75:83"><expr pos:start="75:54" pos:end="75:82"><call pos:start="75:54" pos:end="75:82"><name pos:start="75:54" pos:end="75:67">LAST_SKIP_BITS</name><argument_list pos:start="75:68" pos:end="75:82">(<argument pos:start="75:69" pos:end="75:70"><expr pos:start="75:69" pos:end="75:70"><name pos:start="75:69" pos:end="75:70">re</name></expr></argument>, <argument pos:start="75:73" pos:end="75:78"><expr pos:start="75:73" pos:end="75:78"><operator pos:start="75:73" pos:end="75:73">&amp;</operator><name pos:start="75:74" pos:end="75:78"><name pos:start="75:74" pos:end="75:74">s</name><operator pos:start="75:75" pos:end="75:76">-&gt;</operator><name pos:start="75:77" pos:end="75:78">gb</name></name></expr></argument>, <argument pos:start="75:81" pos:end="75:81"><expr pos:start="75:81" pos:end="75:81"><literal type="number" pos:start="75:81" pos:end="75:81">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:41"><expr pos:start="77:17" pos:end="77:40"><call pos:start="77:17" pos:end="77:40"><name pos:start="77:17" pos:end="77:28">UPDATE_CACHE</name><argument_list pos:start="77:29" pos:end="77:40">(<argument pos:start="77:30" pos:end="77:31"><expr pos:start="77:30" pos:end="77:31"><name pos:start="77:30" pos:end="77:31">re</name></expr></argument>, <argument pos:start="77:34" pos:end="77:39"><expr pos:start="77:34" pos:end="77:39"><operator pos:start="77:34" pos:end="77:34">&amp;</operator><name pos:start="77:35" pos:end="77:39"><name pos:start="77:35" pos:end="77:35">s</name><operator pos:start="77:36" pos:end="77:37">-&gt;</operator><name pos:start="77:38" pos:end="77:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:50"><expr pos:start="79:17" pos:end="79:49"><name pos:start="79:17" pos:end="79:21">level</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <call pos:start="79:25" pos:end="79:49"><name pos:start="79:25" pos:end="79:34">SHOW_SBITS</name><argument_list pos:start="79:35" pos:end="79:49">(<argument pos:start="79:36" pos:end="79:37"><expr pos:start="79:36" pos:end="79:37"><name pos:start="79:36" pos:end="79:37">re</name></expr></argument>, <argument pos:start="79:40" pos:end="79:45"><expr pos:start="79:40" pos:end="79:45"><operator pos:start="79:40" pos:end="79:40">&amp;</operator><name pos:start="79:41" pos:end="79:45"><name pos:start="79:41" pos:end="79:41">s</name><operator pos:start="79:42" pos:end="79:43">-&gt;</operator><name pos:start="79:44" pos:end="79:45">gb</name></name></expr></argument>, <argument pos:start="79:48" pos:end="79:48"><expr pos:start="79:48" pos:end="79:48"><literal type="number" pos:start="79:48" pos:end="79:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="79:52" pos:end="79:76"><expr pos:start="79:52" pos:end="79:75"><call pos:start="79:52" pos:end="79:75"><name pos:start="79:52" pos:end="79:60">SKIP_BITS</name><argument_list pos:start="79:61" pos:end="79:75">(<argument pos:start="79:62" pos:end="79:63"><expr pos:start="79:62" pos:end="79:63"><name pos:start="79:62" pos:end="79:63">re</name></expr></argument>, <argument pos:start="79:66" pos:end="79:71"><expr pos:start="79:66" pos:end="79:71"><operator pos:start="79:66" pos:end="79:66">&amp;</operator><name pos:start="79:67" pos:end="79:71"><name pos:start="79:67" pos:end="79:67">s</name><operator pos:start="79:68" pos:end="79:69">-&gt;</operator><name pos:start="79:70" pos:end="79:71">gb</name></name></expr></argument>, <argument pos:start="79:74" pos:end="79:74"><expr pos:start="79:74" pos:end="79:74"><literal type="number" pos:start="79:74" pos:end="79:74">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="81:17" pos:end="89:17"><if pos:start="81:17" pos:end="85:17">if <condition pos:start="81:20" pos:end="81:34">(<expr pos:start="81:21" pos:end="81:33"><name pos:start="81:21" pos:end="81:25">level</name> <operator pos:start="81:27" pos:end="81:28">==</operator> <operator pos:start="81:30" pos:end="81:30">-</operator><literal type="number" pos:start="81:31" pos:end="81:33">128</literal></expr>)</condition> <block pos:start="81:36" pos:end="85:17">{<block_content pos:start="83:21" pos:end="83:86">

                    <expr_stmt pos:start="83:21" pos:end="83:60"><expr pos:start="83:21" pos:end="83:59"><name pos:start="83:21" pos:end="83:25">level</name> <operator pos:start="83:27" pos:end="83:27">=</operator> <call pos:start="83:29" pos:end="83:53"><name pos:start="83:29" pos:end="83:38">SHOW_UBITS</name><argument_list pos:start="83:39" pos:end="83:53">(<argument pos:start="83:40" pos:end="83:41"><expr pos:start="83:40" pos:end="83:41"><name pos:start="83:40" pos:end="83:41">re</name></expr></argument>, <argument pos:start="83:44" pos:end="83:49"><expr pos:start="83:44" pos:end="83:49"><operator pos:start="83:44" pos:end="83:44">&amp;</operator><name pos:start="83:45" pos:end="83:49"><name pos:start="83:45" pos:end="83:45">s</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:49">gb</name></name></expr></argument>, <argument pos:start="83:52" pos:end="83:52"><expr pos:start="83:52" pos:end="83:52"><literal type="number" pos:start="83:52" pos:end="83:52">8</literal></expr></argument>)</argument_list></call> <operator pos:start="83:55" pos:end="83:55">-</operator> <literal type="number" pos:start="83:57" pos:end="83:59">256</literal></expr>;</expr_stmt> <expr_stmt pos:start="83:62" pos:end="83:86"><expr pos:start="83:62" pos:end="83:85"><call pos:start="83:62" pos:end="83:85"><name pos:start="83:62" pos:end="83:70">SKIP_BITS</name><argument_list pos:start="83:71" pos:end="83:85">(<argument pos:start="83:72" pos:end="83:73"><expr pos:start="83:72" pos:end="83:73"><name pos:start="83:72" pos:end="83:73">re</name></expr></argument>, <argument pos:start="83:76" pos:end="83:81"><expr pos:start="83:76" pos:end="83:81"><operator pos:start="83:76" pos:end="83:76">&amp;</operator><name pos:start="83:77" pos:end="83:81"><name pos:start="83:77" pos:end="83:77">s</name><operator pos:start="83:78" pos:end="83:79">-&gt;</operator><name pos:start="83:80" pos:end="83:81">gb</name></name></expr></argument>, <argument pos:start="83:84" pos:end="83:84"><expr pos:start="83:84" pos:end="83:84"><literal type="number" pos:start="83:84" pos:end="83:84">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="85:19" pos:end="89:17">else if <condition pos:start="85:27" pos:end="85:38">(<expr pos:start="85:28" pos:end="85:37"><name pos:start="85:28" pos:end="85:32">level</name> <operator pos:start="85:34" pos:end="85:35">==</operator> <literal type="number" pos:start="85:37" pos:end="85:37">0</literal></expr>)</condition> <block pos:start="85:40" pos:end="89:17">{<block_content pos:start="87:21" pos:end="87:86">

                    <expr_stmt pos:start="87:21" pos:end="87:60"><expr pos:start="87:21" pos:end="87:53"><name pos:start="87:21" pos:end="87:25">level</name> <operator pos:start="87:27" pos:end="87:27">=</operator> <call pos:start="87:29" pos:end="87:53"><name pos:start="87:29" pos:end="87:38">SHOW_UBITS</name><argument_list pos:start="87:39" pos:end="87:53">(<argument pos:start="87:40" pos:end="87:41"><expr pos:start="87:40" pos:end="87:41"><name pos:start="87:40" pos:end="87:41">re</name></expr></argument>, <argument pos:start="87:44" pos:end="87:49"><expr pos:start="87:44" pos:end="87:49"><operator pos:start="87:44" pos:end="87:44">&amp;</operator><name pos:start="87:45" pos:end="87:49"><name pos:start="87:45" pos:end="87:45">s</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:49">gb</name></name></expr></argument>, <argument pos:start="87:52" pos:end="87:52"><expr pos:start="87:52" pos:end="87:52"><literal type="number" pos:start="87:52" pos:end="87:52">8</literal></expr></argument>)</argument_list></call></expr>      ;</expr_stmt> <expr_stmt pos:start="87:62" pos:end="87:86"><expr pos:start="87:62" pos:end="87:85"><call pos:start="87:62" pos:end="87:85"><name pos:start="87:62" pos:end="87:70">SKIP_BITS</name><argument_list pos:start="87:71" pos:end="87:85">(<argument pos:start="87:72" pos:end="87:73"><expr pos:start="87:72" pos:end="87:73"><name pos:start="87:72" pos:end="87:73">re</name></expr></argument>, <argument pos:start="87:76" pos:end="87:81"><expr pos:start="87:76" pos:end="87:81"><operator pos:start="87:76" pos:end="87:76">&amp;</operator><name pos:start="87:77" pos:end="87:81"><name pos:start="87:77" pos:end="87:77">s</name><operator pos:start="87:78" pos:end="87:79">-&gt;</operator><name pos:start="87:80" pos:end="87:81">gb</name></name></expr></argument>, <argument pos:start="87:84" pos:end="87:84"><expr pos:start="87:84" pos:end="87:84"><literal type="number" pos:start="87:84" pos:end="87:84">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:25"><expr pos:start="91:17" pos:end="91:24"><name pos:start="91:17" pos:end="91:17">i</name> <operator pos:start="91:19" pos:end="91:20">+=</operator> <name pos:start="91:22" pos:end="91:24">run</name></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:33"><expr pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:17">j</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:32"><name pos:start="93:21" pos:end="93:29">scantable</name><index pos:start="93:30" pos:end="93:32">[<expr pos:start="93:31" pos:end="93:31"><name pos:start="93:31" pos:end="93:31">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="95:17" pos:end="111:17"><if pos:start="95:17" pos:end="105:17">if <condition pos:start="95:20" pos:end="95:30">(<expr pos:start="95:21" pos:end="95:29"><name pos:start="95:21" pos:end="95:25">level</name> <operator pos:start="95:27" pos:end="95:27">&lt;</operator> <literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr>)</condition> <block pos:start="95:32" pos:end="105:17">{<block_content pos:start="97:21" pos:end="103:35">

                    <expr_stmt pos:start="97:21" pos:end="97:35"><expr pos:start="97:21" pos:end="97:34"><name pos:start="97:21" pos:end="97:25">level</name> <operator pos:start="97:27" pos:end="97:27">=</operator> <operator pos:start="97:29" pos:end="97:29">-</operator><name pos:start="97:30" pos:end="97:34">level</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:78"><expr pos:start="99:21" pos:end="99:77"><name pos:start="99:21" pos:end="99:25">level</name> <operator pos:start="99:27" pos:end="99:27">=</operator> <operator pos:start="99:29" pos:end="99:29">(</operator><operator pos:start="99:30" pos:end="99:30">(</operator><name pos:start="99:31" pos:end="99:35">level</name> <operator pos:start="99:37" pos:end="99:37">*</operator> <literal type="number" pos:start="99:39" pos:end="99:41">2</literal> <operator pos:start="99:41" pos:end="99:41">+</operator> <literal type="number" pos:start="99:43" pos:end="99:43">1</literal><operator pos:start="99:44" pos:end="99:44">)</operator> <operator pos:start="99:46" pos:end="99:46">*</operator> <name pos:start="99:48" pos:end="99:53">qscale</name> <operator pos:start="99:55" pos:end="99:55">*</operator> <name pos:start="99:57" pos:end="99:71"><name pos:start="99:57" pos:end="99:68">quant_matrix</name><index pos:start="99:69" pos:end="99:71">[<expr pos:start="99:70" pos:end="99:70"><name pos:start="99:70" pos:end="99:70">j</name></expr>]</index></name><operator pos:start="99:72" pos:end="99:72">)</operator> <operator pos:start="99:74" pos:end="99:75">&gt;&gt;</operator> <literal type="number" pos:start="99:77" pos:end="99:77">5</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:44"><expr pos:start="101:21" pos:end="101:43"><name pos:start="101:21" pos:end="101:25">level</name> <operator pos:start="101:27" pos:end="101:27">=</operator> <operator pos:start="101:29" pos:end="101:29">(</operator><name pos:start="101:30" pos:end="101:34">level</name> <operator pos:start="101:36" pos:end="101:36">-</operator> <literal type="number" pos:start="101:38" pos:end="101:38">1</literal><operator pos:start="101:39" pos:end="101:39">)</operator> <operator pos:start="101:41" pos:end="101:41">|</operator> <literal type="number" pos:start="101:43" pos:end="101:43">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:35"><expr pos:start="103:21" pos:end="103:34"><name pos:start="103:21" pos:end="103:25">level</name> <operator pos:start="103:27" pos:end="103:27">=</operator> <operator pos:start="103:29" pos:end="103:29">-</operator><name pos:start="103:30" pos:end="103:34">level</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="105:19" pos:end="111:17">else <block pos:start="105:24" pos:end="111:17">{<block_content pos:start="107:21" pos:end="109:44">

                    <expr_stmt pos:start="107:21" pos:end="107:78"><expr pos:start="107:21" pos:end="107:77"><name pos:start="107:21" pos:end="107:25">level</name> <operator pos:start="107:27" pos:end="107:27">=</operator> <operator pos:start="107:29" pos:end="107:29">(</operator><operator pos:start="107:30" pos:end="107:30">(</operator><name pos:start="107:31" pos:end="107:35">level</name> <operator pos:start="107:37" pos:end="107:37">*</operator> <literal type="number" pos:start="107:39" pos:end="107:41">2</literal> <operator pos:start="107:41" pos:end="107:41">+</operator> <literal type="number" pos:start="107:43" pos:end="107:43">1</literal><operator pos:start="107:44" pos:end="107:44">)</operator> <operator pos:start="107:46" pos:end="107:46">*</operator> <name pos:start="107:48" pos:end="107:53">qscale</name> <operator pos:start="107:55" pos:end="107:55">*</operator> <name pos:start="107:57" pos:end="107:71"><name pos:start="107:57" pos:end="107:68">quant_matrix</name><index pos:start="107:69" pos:end="107:71">[<expr pos:start="107:70" pos:end="107:70"><name pos:start="107:70" pos:end="107:70">j</name></expr>]</index></name><operator pos:start="107:72" pos:end="107:72">)</operator> <operator pos:start="107:74" pos:end="107:75">&gt;&gt;</operator> <literal type="number" pos:start="107:77" pos:end="107:77">5</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:44"><expr pos:start="109:21" pos:end="109:43"><name pos:start="109:21" pos:end="109:25">level</name> <operator pos:start="109:27" pos:end="109:27">=</operator> <operator pos:start="109:29" pos:end="109:29">(</operator><name pos:start="109:30" pos:end="109:34">level</name> <operator pos:start="109:36" pos:end="109:36">-</operator> <literal type="number" pos:start="109:38" pos:end="109:38">1</literal><operator pos:start="109:39" pos:end="109:39">)</operator> <operator pos:start="109:41" pos:end="109:41">|</operator> <literal type="number" pos:start="109:43" pos:end="109:43">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="115:13" pos:end="121:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:23">(<expr pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">&gt;</operator> <literal type="number" pos:start="115:21" pos:end="115:22">63</literal></expr>)</condition> <block pos:start="115:25" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:26">

                <expr_stmt pos:start="117:17" pos:end="117:94"><expr pos:start="117:17" pos:end="117:93"><call pos:start="117:17" pos:end="117:93"><name pos:start="117:17" pos:end="117:22">av_log</name><argument_list pos:start="117:23" pos:end="117:93">(<argument pos:start="117:24" pos:end="117:31"><expr pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:24">s</name><operator pos:start="117:25" pos:end="117:26">-&gt;</operator><name pos:start="117:27" pos:end="117:31">avctx</name></name></expr></argument>, <argument pos:start="117:34" pos:end="117:45"><expr pos:start="117:34" pos:end="117:45"><name pos:start="117:34" pos:end="117:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:48" pos:end="117:74"><expr pos:start="117:48" pos:end="117:74"><literal type="string" pos:start="117:48" pos:end="117:74">"ac-tex damaged at %d %d\n"</literal></expr></argument>, <argument pos:start="117:77" pos:end="117:83"><expr pos:start="117:77" pos:end="117:83"><name pos:start="117:77" pos:end="117:83"><name pos:start="117:77" pos:end="117:77">s</name><operator pos:start="117:78" pos:end="117:79">-&gt;</operator><name pos:start="117:80" pos:end="117:83">mb_x</name></name></expr></argument>, <argument pos:start="117:86" pos:end="117:92"><expr pos:start="117:86" pos:end="117:92"><name pos:start="117:86" pos:end="117:92"><name pos:start="117:86" pos:end="117:86">s</name><operator pos:start="117:87" pos:end="117:88">-&gt;</operator><name pos:start="117:89" pos:end="117:92">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="119:17" pos:end="119:26">return <expr pos:start="119:24" pos:end="119:25"><operator pos:start="119:24" pos:end="119:24">-</operator><literal type="number" pos:start="119:25" pos:end="119:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="125:13" pos:end="125:29"><expr pos:start="125:13" pos:end="125:28"><name pos:start="125:13" pos:end="125:20"><name pos:start="125:13" pos:end="125:17">block</name><index pos:start="125:18" pos:end="125:20">[<expr pos:start="125:19" pos:end="125:19"><name pos:start="125:19" pos:end="125:19">j</name></expr>]</index></name> <operator pos:start="125:22" pos:end="125:22">=</operator> <name pos:start="125:24" pos:end="125:28">level</name></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="129:22"><if pos:start="127:13" pos:end="129:22">if <condition pos:start="127:16" pos:end="127:72">(<expr pos:start="127:17" pos:end="127:71"><operator pos:start="127:17" pos:end="127:17">(</operator><operator pos:start="127:18" pos:end="127:18">(</operator><name pos:start="127:19" pos:end="127:25">int32_t</name><operator pos:start="127:26" pos:end="127:26">)</operator><call pos:start="127:27" pos:end="127:47"><name pos:start="127:27" pos:end="127:35">GET_CACHE</name><argument_list pos:start="127:36" pos:end="127:47">(<argument pos:start="127:37" pos:end="127:38"><expr pos:start="127:37" pos:end="127:38"><name pos:start="127:37" pos:end="127:38">re</name></expr></argument>, <argument pos:start="127:41" pos:end="127:46"><expr pos:start="127:41" pos:end="127:46"><operator pos:start="127:41" pos:end="127:41">&amp;</operator><name pos:start="127:42" pos:end="127:46"><name pos:start="127:42" pos:end="127:42">s</name><operator pos:start="127:43" pos:end="127:44">-&gt;</operator><name pos:start="127:45" pos:end="127:46">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="127:48" pos:end="127:48">)</operator> <operator pos:start="127:50" pos:end="127:51">&lt;=</operator> <operator pos:start="127:53" pos:end="127:53">(</operator><name pos:start="127:54" pos:end="127:60">int32_t</name><operator pos:start="127:61" pos:end="127:61">)</operator><literal type="number" pos:start="127:62" pos:end="127:71">0xBFFFFFFF</literal></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:22"><block_content pos:start="129:17" pos:end="129:22">

                <break pos:start="129:17" pos:end="129:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:37"><expr pos:start="131:13" pos:end="131:36"><call pos:start="131:13" pos:end="131:36"><name pos:start="131:13" pos:end="131:24">UPDATE_CACHE</name><argument_list pos:start="131:25" pos:end="131:36">(<argument pos:start="131:26" pos:end="131:27"><expr pos:start="131:26" pos:end="131:27"><name pos:start="131:26" pos:end="131:27">re</name></expr></argument>, <argument pos:start="131:30" pos:end="131:35"><expr pos:start="131:30" pos:end="131:35"><operator pos:start="131:30" pos:end="131:30">&amp;</operator><name pos:start="131:31" pos:end="131:35"><name pos:start="131:31" pos:end="131:31">s</name><operator pos:start="131:32" pos:end="131:33">-&gt;</operator><name pos:start="131:34" pos:end="131:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

<label pos:start="135:1" pos:end="135:4"><name pos:start="135:1" pos:end="135:3">end</name>:</label>

        <expr_stmt pos:start="137:9" pos:end="137:38"><expr pos:start="137:9" pos:end="137:37"><call pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:22">LAST_SKIP_BITS</name><argument_list pos:start="137:23" pos:end="137:37">(<argument pos:start="137:24" pos:end="137:25"><expr pos:start="137:24" pos:end="137:25"><name pos:start="137:24" pos:end="137:25">re</name></expr></argument>, <argument pos:start="137:28" pos:end="137:33"><expr pos:start="137:28" pos:end="137:33"><operator pos:start="137:28" pos:end="137:28">&amp;</operator><name pos:start="137:29" pos:end="137:33"><name pos:start="137:29" pos:end="137:29">s</name><operator pos:start="137:30" pos:end="137:31">-&gt;</operator><name pos:start="137:32" pos:end="137:33">gb</name></name></expr></argument>, <argument pos:start="137:36" pos:end="137:36"><expr pos:start="137:36" pos:end="137:36"><literal type="number" pos:start="137:36" pos:end="137:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:33"><expr pos:start="139:9" pos:end="139:32"><call pos:start="139:9" pos:end="139:32"><name pos:start="139:9" pos:end="139:20">CLOSE_READER</name><argument_list pos:start="139:21" pos:end="139:32">(<argument pos:start="139:22" pos:end="139:23"><expr pos:start="139:22" pos:end="139:23"><name pos:start="139:22" pos:end="139:23">re</name></expr></argument>, <argument pos:start="139:26" pos:end="139:31"><expr pos:start="139:26" pos:end="139:31"><operator pos:start="139:26" pos:end="139:26">&amp;</operator><name pos:start="139:27" pos:end="139:31"><name pos:start="139:27" pos:end="139:27">s</name><operator pos:start="139:28" pos:end="139:29">-&gt;</operator><name pos:start="139:30" pos:end="139:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="143:5" pos:end="143:31"><expr pos:start="143:5" pos:end="143:30"><name pos:start="143:5" pos:end="143:26"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:23">block_last_index</name><index pos:start="143:24" pos:end="143:26">[<expr pos:start="143:25" pos:end="143:25"><name pos:start="143:25" pos:end="143:25">n</name></expr>]</index></name> <operator pos:start="143:28" pos:end="143:28">=</operator> <name pos:start="143:30" pos:end="143:30">i</name></expr>;</expr_stmt>

    <return pos:start="145:5" pos:end="145:13">return <expr pos:start="145:12" pos:end="145:12"><literal type="number" pos:start="145:12" pos:end="145:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
