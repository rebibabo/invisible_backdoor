<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17395.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">adx_encode_header</name><parameter_list pos:start="1:29" pos:end="1:85">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,<parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><name pos:start="1:52" pos:end="1:59">unsigned</name> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">buf</name></decl></parameter>,<parameter pos:start="1:71" pos:end="1:84"><decl pos:start="1:71" pos:end="1:84"><type pos:start="1:71" pos:end="1:84"><name pos:start="1:71" pos:end="1:76">size_t</name></type> <name pos:start="1:78" pos:end="1:84">bufsize</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="51:9" pos:end="67:22">

<cpp:if pos:start="5:1" pos:end="5:5">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:5"><literal type="number" pos:start="5:5" pos:end="5:5">0</literal></expr></cpp:if>

	struct {

		uint32_t offset; <comment type="block" pos:start="9:34" pos:end="9:68">/* 0x80000000 + sample start - 4 */</comment>

		unsigned char unknown1[3]; <comment type="block" pos:start="11:44" pos:end="11:57">/* 03 12 04 */</comment>

		unsigned char channel; <comment type="block" pos:start="13:40" pos:end="13:51">/* 1 or 2 */</comment>

		uint32_t freq;

		uint32_t size;

		uint32_t unknown2; <comment type="block" pos:start="19:36" pos:end="19:52">/* 01 f4 03 00 */</comment>

		uint32_t unknown3; <comment type="block" pos:start="21:36" pos:end="21:52">/* 00 00 00 00 */</comment>

		uint32_t unknown4; <comment type="block" pos:start="23:36" pos:end="23:52">/* 00 00 00 00 */</comment>



	<comment type="block" pos:start="27:9" pos:end="43:10">/* if loop

		unknown3 00 15 00 01

		unknown4 00 00 00 01

		long loop_start_sample;

		long loop_start_byte;

		long loop_end_sample;

		long loop_end_byte;

		long 

	*/</comment>

	} adxhdr; <comment type="block" pos:start="45:19" pos:end="45:34">/* big endian */</comment>

	<comment type="block" pos:start="47:9" pos:end="47:31">/* offset-6 "(c)CRI" */</comment>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

	<expr_stmt pos:start="51:9" pos:end="51:45"><expr pos:start="51:9" pos:end="51:44"><call pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:18">write_long</name><argument_list pos:start="51:19" pos:end="51:44">(<argument pos:start="51:20" pos:end="51:27"><expr pos:start="51:20" pos:end="51:27"><name pos:start="51:20" pos:end="51:22">buf</name><operator pos:start="51:23" pos:end="51:23">+</operator><literal type="number" pos:start="51:24" pos:end="51:27">0x00</literal></expr></argument>,<argument pos:start="51:29" pos:end="51:43"><expr pos:start="51:29" pos:end="51:43"><literal type="number" pos:start="51:29" pos:end="51:38">0x80000000</literal><operator pos:start="51:39" pos:end="51:39">|</operator><literal type="number" pos:start="51:40" pos:end="51:43">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="53:9" pos:end="53:56"><expr pos:start="53:9" pos:end="53:55"><call pos:start="53:9" pos:end="53:55"><name pos:start="53:9" pos:end="53:18">write_long</name><argument_list pos:start="53:19" pos:end="53:55">(<argument pos:start="53:20" pos:end="53:27"><expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:22">buf</name><operator pos:start="53:23" pos:end="53:23">+</operator><literal type="number" pos:start="53:24" pos:end="53:27">0x04</literal></expr></argument>,<argument pos:start="53:29" pos:end="53:54"><expr pos:start="53:29" pos:end="53:54"><literal type="number" pos:start="53:29" pos:end="53:38">0x03120400</literal><operator pos:start="53:39" pos:end="53:39">|</operator><name pos:start="53:40" pos:end="53:54"><name pos:start="53:40" pos:end="53:44">avctx</name><operator pos:start="53:45" pos:end="53:46">-&gt;</operator><name pos:start="53:47" pos:end="53:54">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="55:9" pos:end="55:48"><expr pos:start="55:9" pos:end="55:47"><call pos:start="55:9" pos:end="55:47"><name pos:start="55:9" pos:end="55:18">write_long</name><argument_list pos:start="55:19" pos:end="55:47">(<argument pos:start="55:20" pos:end="55:27"><expr pos:start="55:20" pos:end="55:27"><name pos:start="55:20" pos:end="55:22">buf</name><operator pos:start="55:23" pos:end="55:23">+</operator><literal type="number" pos:start="55:24" pos:end="55:27">0x08</literal></expr></argument>,<argument pos:start="55:29" pos:end="55:46"><expr pos:start="55:29" pos:end="55:46"><name pos:start="55:29" pos:end="55:46"><name pos:start="55:29" pos:end="55:33">avctx</name><operator pos:start="55:34" pos:end="55:35">-&gt;</operator><name pos:start="55:36" pos:end="55:46">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="57:9" pos:end="57:31"><expr pos:start="57:9" pos:end="57:30"><call pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:18">write_long</name><argument_list pos:start="57:19" pos:end="57:30">(<argument pos:start="57:20" pos:end="57:27"><expr pos:start="57:20" pos:end="57:27"><name pos:start="57:20" pos:end="57:22">buf</name><operator pos:start="57:23" pos:end="57:23">+</operator><literal type="number" pos:start="57:24" pos:end="57:27">0x0c</literal></expr></argument>,<argument pos:start="57:29" pos:end="57:29"><expr pos:start="57:29" pos:end="57:29"><literal type="number" pos:start="57:29" pos:end="57:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="57:33" pos:end="57:54">/* FIXME: set after */</comment>

	<expr_stmt pos:start="59:9" pos:end="59:40"><expr pos:start="59:9" pos:end="59:39"><call pos:start="59:9" pos:end="59:39"><name pos:start="59:9" pos:end="59:18">write_long</name><argument_list pos:start="59:19" pos:end="59:39">(<argument pos:start="59:20" pos:end="59:27"><expr pos:start="59:20" pos:end="59:27"><name pos:start="59:20" pos:end="59:22">buf</name><operator pos:start="59:23" pos:end="59:23">+</operator><literal type="number" pos:start="59:24" pos:end="59:27">0x10</literal></expr></argument>,<argument pos:start="59:29" pos:end="59:38"><expr pos:start="59:29" pos:end="59:38"><literal type="number" pos:start="59:29" pos:end="59:38">0x01040300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="61:9" pos:end="61:40"><expr pos:start="61:9" pos:end="61:39"><call pos:start="61:9" pos:end="61:39"><name pos:start="61:9" pos:end="61:18">write_long</name><argument_list pos:start="61:19" pos:end="61:39">(<argument pos:start="61:20" pos:end="61:27"><expr pos:start="61:20" pos:end="61:27"><name pos:start="61:20" pos:end="61:22">buf</name><operator pos:start="61:23" pos:end="61:23">+</operator><literal type="number" pos:start="61:24" pos:end="61:27">0x14</literal></expr></argument>,<argument pos:start="61:29" pos:end="61:38"><expr pos:start="61:29" pos:end="61:38"><literal type="number" pos:start="61:29" pos:end="61:38">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><call pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:18">write_long</name><argument_list pos:start="63:19" pos:end="63:39">(<argument pos:start="63:20" pos:end="63:27"><expr pos:start="63:20" pos:end="63:27"><name pos:start="63:20" pos:end="63:22">buf</name><operator pos:start="63:23" pos:end="63:23">+</operator><literal type="number" pos:start="63:24" pos:end="63:27">0x18</literal></expr></argument>,<argument pos:start="63:29" pos:end="63:38"><expr pos:start="63:29" pos:end="63:38"><literal type="number" pos:start="63:29" pos:end="63:38">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><call pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:14">memcpy</name><argument_list pos:start="65:15" pos:end="65:39">(<argument pos:start="65:16" pos:end="65:23"><expr pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:18">buf</name><operator pos:start="65:19" pos:end="65:19">+</operator><literal type="number" pos:start="65:20" pos:end="65:23">0x1c</literal></expr></argument>,<argument pos:start="65:25" pos:end="65:36"><expr pos:start="65:25" pos:end="65:36"><literal type="string" pos:start="65:25" pos:end="65:36">"\0\0(c)CRI"</literal></expr></argument>,<argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="67:9" pos:end="67:22">return <expr pos:start="67:16" pos:end="67:21"><literal type="number" pos:start="67:16" pos:end="67:20">0x20</literal><operator pos:start="67:20" pos:end="67:20">+</operator><literal type="number" pos:start="67:21" pos:end="67:21">4</literal></expr>;</return>

</block_content>}</block></function>
</unit>
