<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6787.c" pos:tabs="8"><function pos:start="1:1" pos:end="23:13"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">kvm_arch_pre_run</name><parameter_list pos:start="1:21" pos:end="1:56">(<parameter pos:start="1:22" pos:end="1:34"><decl pos:start="1:22" pos:end="1:34"><type pos:start="1:22" pos:end="1:34"><name pos:start="1:22" pos:end="1:29">CPUState</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">env</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:55"><decl pos:start="1:37" pos:end="1:55"><type pos:start="1:37" pos:end="1:55"><name pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:42">struct</name> <name pos:start="1:44" pos:end="1:50">kvm_run</name></name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">run</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="23:13">{<block_content pos:start="3:5" pos:end="23:13">
    <decl_stmt pos:start="3:5" pos:end="3:10"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">r</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:17"><decl pos:start="4:5" pos:end="4:16"><type pos:start="4:5" pos:end="4:12"><name pos:start="4:5" pos:end="4:12">unsigned</name></type> <name pos:start="4:14" pos:end="4:16">irq</name></decl>;</decl_stmt>
    <comment type="block" pos:start="5:5" pos:end="6:70">/* PowerPC Qemu tracks the various core input pins (interrupt, critical
     * interrupt, reset, etc) in PPC-specific env-&gt;irq_input_state. */</comment>
    <if_stmt pos:start="7:5" pos:end="23:13"><if pos:start="7:5" pos:end="23:13">if <condition pos:start="7:8" pos:end="9:52">(<expr pos:start="7:9" pos:end="9:51"><name pos:start="7:9" pos:end="7:42"><name pos:start="7:9" pos:end="7:11">run</name><operator pos:start="7:12" pos:end="7:13">-&gt;</operator><name pos:start="7:14" pos:end="7:42">ready_for_interrupt_injection</name></name> <operator pos:start="7:44" pos:end="7:45">&amp;&amp;</operator>
        <operator pos:start="8:9" pos:end="8:9">(</operator><name pos:start="8:10" pos:end="8:31"><name pos:start="8:10" pos:end="8:12">env</name><operator pos:start="8:13" pos:end="8:14">-&gt;</operator><name pos:start="8:15" pos:end="8:31">interrupt_request</name></name> <operator pos:start="8:33" pos:end="8:33">&amp;</operator> <name pos:start="8:35" pos:end="8:52">CPU_INTERRUPT_HARD</name><operator pos:start="8:53" pos:end="8:53">)</operator> <operator pos:start="8:55" pos:end="8:56">&amp;&amp;</operator>
        <operator pos:start="9:9" pos:end="9:9">(</operator><name pos:start="9:10" pos:end="9:29"><name pos:start="9:10" pos:end="9:12">env</name><operator pos:start="9:13" pos:end="9:14">-&gt;</operator><name pos:start="9:15" pos:end="9:29">irq_input_state</name></name> <operator pos:start="9:31" pos:end="9:31">&amp;</operator> <operator pos:start="9:33" pos:end="9:33">(</operator><literal type="number" pos:start="9:34" pos:end="9:34">1</literal><operator pos:start="9:35" pos:end="9:36">&lt;&lt;</operator><name pos:start="9:37" pos:end="9:49">PPC_INPUT_INT</name><operator pos:start="9:50" pos:end="9:50">)</operator><operator pos:start="9:51" pos:end="9:51">)</operator></expr>)</condition>
    <block pos:start="10:5" pos:end="23:13">{<block_content pos:start="15:9" pos:end="23:13">
        <comment type="block" pos:start="11:9" pos:end="14:11">/* For now KVM disregards the 'irq' argument. However, in the
         * future KVM could cache it in-kernel to avoid a heavyweight exit
         * when reading the UIC.
         */</comment>
        <expr_stmt pos:start="15:9" pos:end="15:18"><expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:11">irq</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <operator pos:start="15:15" pos:end="15:15">-</operator><literal type="number" pos:start="15:16" pos:end="15:17">1U</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:48"><expr pos:start="16:9" pos:end="16:47"><call pos:start="16:9" pos:end="16:47"><name pos:start="16:9" pos:end="16:15">dprintf</name><argument_list pos:start="16:16" pos:end="16:47">(<argument pos:start="16:17" pos:end="16:41"><expr pos:start="16:17" pos:end="16:41"><literal type="string" pos:start="16:17" pos:end="16:41">"injected interrupt %d\n"</literal></expr></argument>, <argument pos:start="16:44" pos:end="16:46"><expr pos:start="16:44" pos:end="16:46"><name pos:start="16:44" pos:end="16:46">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:53"><expr pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:9">r</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:52"><name pos:start="17:13" pos:end="17:26">kvm_vcpu_ioctl</name><argument_list pos:start="17:27" pos:end="17:52">(<argument pos:start="17:28" pos:end="17:30"><expr pos:start="17:28" pos:end="17:30"><name pos:start="17:28" pos:end="17:30">env</name></expr></argument>, <argument pos:start="17:33" pos:end="17:45"><expr pos:start="17:33" pos:end="17:45"><name pos:start="17:33" pos:end="17:45">KVM_INTERRUPT</name></expr></argument>, <argument pos:start="17:48" pos:end="17:51"><expr pos:start="17:48" pos:end="17:51"><operator pos:start="17:48" pos:end="17:48">&amp;</operator><name pos:start="17:49" pos:end="17:51">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="18:9" pos:end="19:67"><if pos:start="18:9" pos:end="19:67">if <condition pos:start="18:12" pos:end="18:18">(<expr pos:start="18:13" pos:end="18:17"><name pos:start="18:13" pos:end="18:13">r</name> <operator pos:start="18:15" pos:end="18:15">&lt;</operator> <literal type="number" pos:start="18:17" pos:end="18:17">0</literal></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:67"><block_content pos:start="19:13" pos:end="19:67">
            <expr_stmt pos:start="19:13" pos:end="19:67"><expr pos:start="19:13" pos:end="19:66"><call pos:start="19:13" pos:end="19:66"><name pos:start="19:13" pos:end="19:18">printf</name><argument_list pos:start="19:19" pos:end="19:66">(<argument pos:start="19:20" pos:end="19:44"><expr pos:start="19:20" pos:end="19:44"><literal type="string" pos:start="19:20" pos:end="19:44">"cpu %d fail inject %x\n"</literal></expr></argument>, <argument pos:start="19:47" pos:end="19:60"><expr pos:start="19:47" pos:end="19:60"><name pos:start="19:47" pos:end="19:60"><name pos:start="19:47" pos:end="19:49">env</name><operator pos:start="19:50" pos:end="19:51">-&gt;</operator><name pos:start="19:52" pos:end="19:60">cpu_index</name></name></expr></argument>, <argument pos:start="19:63" pos:end="19:65"><expr pos:start="19:63" pos:end="19:65"><name pos:start="19:63" pos:end="19:65">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="20:5" pos:end="22:63">/* We don't know if there are more interrupts pending after this. However,
     * the guest will return to userspace in the course of handling this one
     * anyways, so we will get a chance to deliver the rest. */</comment>
    <return pos:start="23:5" pos:end="23:13">return <expr pos:start="23:12" pos:end="23:12"><literal type="number" pos:start="23:12" pos:end="23:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></function></unit>
