<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13900.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:23">abi_ulong</name></type> <name pos:start="1:25" pos:end="1:32">do_shmat</name><parameter_list pos:start="1:33" pos:end="1:74">(<parameter pos:start="1:34" pos:end="1:42"><decl pos:start="1:34" pos:end="1:42"><type pos:start="1:34" pos:end="1:42"><name pos:start="1:34" pos:end="1:36">int</name></type> <name pos:start="1:38" pos:end="1:42">shmid</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:53">abi_ulong</name></type> <name pos:start="1:55" pos:end="1:61">shmaddr</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:73"><decl pos:start="1:64" pos:end="1:73"><type pos:start="1:64" pos:end="1:73"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:73">shmflg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="101:17">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">abi_long</name></type> <name pos:start="5:14" pos:end="5:18">raddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:20">host_raddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:19">shmid_ds</name></name></type> <name pos:start="9:21" pos:end="9:28">shm_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>,<decl pos:start="11:11" pos:end="11:13"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:11" pos:end="11:13">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:58">/* find out the length of the shared memory segment */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:56"><expr pos:start="17:5" pos:end="17:55"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:55"><name pos:start="17:11" pos:end="17:19">get_errno</name><argument_list pos:start="17:20" pos:end="17:55">(<argument pos:start="17:21" pos:end="17:54"><expr pos:start="17:21" pos:end="17:54"><call pos:start="17:21" pos:end="17:54"><name pos:start="17:21" pos:end="17:26">shmctl</name><argument_list pos:start="17:27" pos:end="17:54">(<argument pos:start="17:28" pos:end="17:32"><expr pos:start="17:28" pos:end="17:32"><name pos:start="17:28" pos:end="17:32">shmid</name></expr></argument>, <argument pos:start="17:35" pos:end="17:42"><expr pos:start="17:35" pos:end="17:42"><name pos:start="17:35" pos:end="17:42">IPC_STAT</name></expr></argument>, <argument pos:start="17:45" pos:end="17:53"><expr pos:start="17:45" pos:end="17:53"><operator pos:start="17:45" pos:end="17:45">&amp;</operator><name pos:start="17:46" pos:end="17:53">shm_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:22">(<expr pos:start="19:9" pos:end="19:21"><call pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:16">is_error</name><argument_list pos:start="19:17" pos:end="19:21">(<argument pos:start="19:18" pos:end="19:20"><expr pos:start="19:18" pos:end="19:20"><name pos:start="19:18" pos:end="19:20">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:24" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:19">

        <comment type="block" pos:start="21:9" pos:end="21:40">/* can't get length, bail out */</comment>

        <return pos:start="23:9" pos:end="23:19">return <expr pos:start="23:16" pos:end="23:18"><name pos:start="23:16" pos:end="23:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:16"><expr pos:start="29:5" pos:end="29:15"><call pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:13">mmap_lock</name><argument_list pos:start="29:14" pos:end="29:15">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="57:5"><if pos:start="33:5" pos:end="35:64">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">shmaddr</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:64"><block_content pos:start="35:9" pos:end="35:64">

        <expr_stmt pos:start="35:9" pos:end="35:64"><expr pos:start="35:9" pos:end="35:63"><name pos:start="35:9" pos:end="35:18">host_raddr</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:63"><name pos:start="35:22" pos:end="35:26">shmat</name><argument_list pos:start="35:27" pos:end="35:63">(<argument pos:start="35:28" pos:end="35:32"><expr pos:start="35:28" pos:end="35:32"><name pos:start="35:28" pos:end="35:32">shmid</name></expr></argument>, <argument pos:start="35:35" pos:end="35:54"><expr pos:start="35:35" pos:end="35:54"><operator pos:start="35:35" pos:end="35:35">(</operator><name pos:start="35:36" pos:end="35:39">void</name> <operator pos:start="35:41" pos:end="35:41">*</operator><operator pos:start="35:42" pos:end="35:42">)</operator><call pos:start="35:43" pos:end="35:54"><name pos:start="35:43" pos:end="35:45">g2h</name><argument_list pos:start="35:46" pos:end="35:54">(<argument pos:start="35:47" pos:end="35:53"><expr pos:start="35:47" pos:end="35:53"><name pos:start="35:47" pos:end="35:53">shmaddr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:57" pos:end="35:62"><expr pos:start="35:57" pos:end="35:62"><name pos:start="35:57" pos:end="35:62">shmflg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="37:5" pos:end="57:5">else <block pos:start="37:10" pos:end="57:5">{<block_content pos:start="39:9" pos:end="55:75">

        <decl_stmt pos:start="39:9" pos:end="39:29"><decl pos:start="39:9" pos:end="39:28"><type pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:17">abi_ulong</name></type> <name pos:start="39:19" pos:end="39:28">mmap_start</name></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:58"><expr pos:start="43:9" pos:end="43:57"><name pos:start="43:9" pos:end="43:18">mmap_start</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:57"><name pos:start="43:22" pos:end="43:34">mmap_find_vma</name><argument_list pos:start="43:35" pos:end="43:57">(<argument pos:start="43:36" pos:end="43:36"><expr pos:start="43:36" pos:end="43:36"><literal type="number" pos:start="43:36" pos:end="43:36">0</literal></expr></argument>, <argument pos:start="43:39" pos:end="43:56"><expr pos:start="43:39" pos:end="43:56"><name pos:start="43:39" pos:end="43:56"><name pos:start="43:39" pos:end="43:46">shm_info</name><operator pos:start="43:47" pos:end="43:47">.</operator><name pos:start="43:48" pos:end="43:56">shm_segsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="47:9" pos:end="55:75"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:29">(<expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:22">mmap_start</name> <operator pos:start="47:24" pos:end="47:25">==</operator> <operator pos:start="47:27" pos:end="47:27">-</operator><literal type="number" pos:start="47:28" pos:end="47:28">1</literal></expr>)</condition> <block pos:start="47:31" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:36">

            <expr_stmt pos:start="49:13" pos:end="49:27"><expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:17">errno</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:26">ENOMEM</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:22">host_raddr</name> <operator pos:start="51:24" pos:end="51:24">=</operator> <operator pos:start="51:26" pos:end="51:26">(</operator><name pos:start="51:27" pos:end="51:30">void</name> <operator pos:start="51:32" pos:end="51:32">*</operator><operator pos:start="51:33" pos:end="51:33">)</operator><operator pos:start="51:34" pos:end="51:34">-</operator><literal type="number" pos:start="51:35" pos:end="51:35">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="55:75">else<block type="pseudo" pos:start="55:13" pos:end="55:75"><block_content pos:start="55:13" pos:end="55:75">

            <expr_stmt pos:start="55:13" pos:end="55:75"><expr pos:start="55:13" pos:end="55:74"><name pos:start="55:13" pos:end="55:22">host_raddr</name> <operator pos:start="55:24" pos:end="55:24">=</operator> <call pos:start="55:26" pos:end="55:74"><name pos:start="55:26" pos:end="55:30">shmat</name><argument_list pos:start="55:31" pos:end="55:74">(<argument pos:start="55:32" pos:end="55:36"><expr pos:start="55:32" pos:end="55:36"><name pos:start="55:32" pos:end="55:36">shmid</name></expr></argument>, <argument pos:start="55:39" pos:end="55:53"><expr pos:start="55:39" pos:end="55:53"><call pos:start="55:39" pos:end="55:53"><name pos:start="55:39" pos:end="55:41">g2h</name><argument_list pos:start="55:42" pos:end="55:53">(<argument pos:start="55:43" pos:end="55:52"><expr pos:start="55:43" pos:end="55:52"><name pos:start="55:43" pos:end="55:52">mmap_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:56" pos:end="55:73"><expr pos:start="55:56" pos:end="55:73"><name pos:start="55:56" pos:end="55:61">shmflg</name> <operator pos:start="55:63" pos:end="55:63">|</operator> <name pos:start="55:65" pos:end="55:73">SHM_REMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:33">(<expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:18">host_raddr</name> <operator pos:start="61:20" pos:end="61:21">==</operator> <operator pos:start="61:23" pos:end="61:23">(</operator><name pos:start="61:24" pos:end="61:27">void</name> <operator pos:start="61:29" pos:end="61:29">*</operator><operator pos:start="61:30" pos:end="61:30">)</operator><operator pos:start="61:31" pos:end="61:31">-</operator><literal type="number" pos:start="61:32" pos:end="61:32">1</literal></expr>)</condition> <block pos:start="61:35" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:43">

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><call pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:19">mmap_unlock</name><argument_list pos:start="63:20" pos:end="63:21">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:43">return <expr pos:start="65:16" pos:end="65:42"><call pos:start="65:16" pos:end="65:42"><name pos:start="65:16" pos:end="65:24">get_errno</name><argument_list pos:start="65:25" pos:end="65:42">(<argument pos:start="65:26" pos:end="65:41"><expr pos:start="65:26" pos:end="65:41"><operator pos:start="65:26" pos:end="65:26">(</operator><name pos:start="65:27" pos:end="65:30">long</name><operator pos:start="65:31" pos:end="65:31">)</operator><name pos:start="65:32" pos:end="65:41">host_raddr</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:41"><expr pos:start="69:5" pos:end="69:40"><name pos:start="69:5" pos:end="69:9">raddr</name><operator pos:start="69:10" pos:end="69:10">=</operator><call pos:start="69:11" pos:end="69:40"><name pos:start="69:11" pos:end="69:13">h2g</name><argument_list pos:start="69:14" pos:end="69:40">(<argument pos:start="69:15" pos:end="69:39"><expr pos:start="69:15" pos:end="69:39"><operator pos:start="69:15" pos:end="69:15">(</operator><name pos:start="69:16" pos:end="69:23">unsigned</name> <name pos:start="69:25" pos:end="69:28">long</name><operator pos:start="69:29" pos:end="69:29">)</operator><name pos:start="69:30" pos:end="69:39">host_raddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="77:60"><expr pos:start="73:5" pos:end="77:59"><call pos:start="73:5" pos:end="77:59"><name pos:start="73:5" pos:end="73:18">page_set_flags</name><argument_list pos:start="73:19" pos:end="77:59">(<argument pos:start="73:20" pos:end="73:24"><expr pos:start="73:20" pos:end="73:24"><name pos:start="73:20" pos:end="73:24">raddr</name></expr></argument>, <argument pos:start="73:27" pos:end="73:52"><expr pos:start="73:27" pos:end="73:52"><name pos:start="73:27" pos:end="73:31">raddr</name> <operator pos:start="73:33" pos:end="73:33">+</operator> <name pos:start="73:35" pos:end="73:52"><name pos:start="73:35" pos:end="73:42">shm_info</name><operator pos:start="73:43" pos:end="73:43">.</operator><name pos:start="73:44" pos:end="73:52">shm_segsz</name></name></expr></argument>,

                   <argument pos:start="75:20" pos:end="77:58"><expr pos:start="75:20" pos:end="77:58"><name pos:start="75:20" pos:end="75:29">PAGE_VALID</name> <operator pos:start="75:31" pos:end="75:31">|</operator> <name pos:start="75:33" pos:end="75:41">PAGE_READ</name> <operator pos:start="75:43" pos:end="75:43">|</operator>

                   <operator pos:start="77:20" pos:end="77:20">(</operator><ternary pos:start="77:21" pos:end="77:57"><condition pos:start="77:21" pos:end="77:42"><expr pos:start="77:21" pos:end="77:41"><operator pos:start="77:21" pos:end="77:21">(</operator><name pos:start="77:22" pos:end="77:27">shmflg</name> <operator pos:start="77:29" pos:end="77:29">&amp;</operator> <name pos:start="77:31" pos:end="77:40">SHM_RDONLY</name><operator pos:start="77:41" pos:end="77:41">)</operator></expr>?</condition><then pos:start="77:44" pos:end="77:44"> <expr pos:start="77:44" pos:end="77:44"><literal type="number" pos:start="77:44" pos:end="77:44">0</literal></expr> </then><else pos:start="77:46" pos:end="77:57">: <expr pos:start="77:48" pos:end="77:57"><name pos:start="77:48" pos:end="77:57">PAGE_WRITE</name></expr></else></ternary><operator pos:start="77:58" pos:end="77:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="81:5" pos:end="95:5">for <control pos:start="81:9" pos:end="81:39">(<init pos:start="81:10" pos:end="81:15"><expr pos:start="81:10" pos:end="81:14"><name pos:start="81:10" pos:end="81:10">i</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <literal type="number" pos:start="81:14" pos:end="81:14">0</literal></expr>;</init> <condition pos:start="81:17" pos:end="81:34"><expr pos:start="81:17" pos:end="81:33"><name pos:start="81:17" pos:end="81:17">i</name> <operator pos:start="81:19" pos:end="81:19">&lt;</operator> <name pos:start="81:21" pos:end="81:33">N_SHM_REGIONS</name></expr>;</condition> <incr pos:start="81:36" pos:end="81:38"><expr pos:start="81:36" pos:end="81:38"><name pos:start="81:36" pos:end="81:36">i</name><operator pos:start="81:37" pos:end="81:38">++</operator></expr></incr>)</control> <block pos:start="81:41" pos:end="95:5">{<block_content pos:start="83:9" pos:end="93:9">

        <if_stmt pos:start="83:9" pos:end="93:9"><if pos:start="83:9" pos:end="93:9">if <condition pos:start="83:12" pos:end="83:35">(<expr pos:start="83:13" pos:end="83:34"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:27"><name pos:start="83:14" pos:end="83:24">shm_regions</name><index pos:start="83:25" pos:end="83:27">[<expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">i</name></expr>]</index></name><operator pos:start="83:28" pos:end="83:28">.</operator><name pos:start="83:29" pos:end="83:34">in_use</name></expr>)</condition> <block pos:start="83:37" pos:end="93:9">{<block_content pos:start="85:13" pos:end="91:18">

            <expr_stmt pos:start="85:13" pos:end="85:41"><expr pos:start="85:13" pos:end="85:40"><name pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:23">shm_regions</name><index pos:start="85:24" pos:end="85:26">[<expr pos:start="85:25" pos:end="85:25"><name pos:start="85:25" pos:end="85:25">i</name></expr>]</index></name><operator pos:start="85:27" pos:end="85:27">.</operator><name pos:start="85:28" pos:end="85:33">in_use</name> <operator pos:start="85:35" pos:end="85:35">=</operator> <name pos:start="85:37" pos:end="85:40">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:41"><expr pos:start="87:13" pos:end="87:40"><name pos:start="87:13" pos:end="87:26"><name pos:start="87:13" pos:end="87:23">shm_regions</name><index pos:start="87:24" pos:end="87:26">[<expr pos:start="87:25" pos:end="87:25"><name pos:start="87:25" pos:end="87:25">i</name></expr>]</index></name><operator pos:start="87:27" pos:end="87:27">.</operator><name pos:start="87:28" pos:end="87:32">start</name> <operator pos:start="87:34" pos:end="87:34">=</operator> <name pos:start="87:36" pos:end="87:40">raddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:53"><expr pos:start="89:13" pos:end="89:52"><name pos:start="89:13" pos:end="89:26"><name pos:start="89:13" pos:end="89:23">shm_regions</name><index pos:start="89:24" pos:end="89:26">[<expr pos:start="89:25" pos:end="89:25"><name pos:start="89:25" pos:end="89:25">i</name></expr>]</index></name><operator pos:start="89:27" pos:end="89:27">.</operator><name pos:start="89:28" pos:end="89:31">size</name> <operator pos:start="89:33" pos:end="89:33">=</operator> <name pos:start="89:35" pos:end="89:52"><name pos:start="89:35" pos:end="89:42">shm_info</name><operator pos:start="89:43" pos:end="89:43">.</operator><name pos:start="89:44" pos:end="89:52">shm_segsz</name></name></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="99:5" pos:end="99:18"><expr pos:start="99:5" pos:end="99:17"><call pos:start="99:5" pos:end="99:17"><name pos:start="99:5" pos:end="99:15">mmap_unlock</name><argument_list pos:start="99:16" pos:end="99:17">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="101:17">return <expr pos:start="101:12" pos:end="101:16"><name pos:start="101:12" pos:end="101:16">raddr</name></expr>;</return>



</block_content>}</block></function>
</unit>
