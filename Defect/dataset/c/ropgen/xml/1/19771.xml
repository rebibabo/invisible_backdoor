<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19771.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:48">bdrv_co_do_pwrite_zeroes</name><parameter_list pos:start="1:49" pos:end="3:54">(<parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">BlockDriverState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:18">offset</name></decl></parameter>, <parameter pos:start="3:21" pos:end="3:29"><decl pos:start="3:21" pos:end="3:29"><type pos:start="3:21" pos:end="3:29"><name pos:start="3:21" pos:end="3:23">int</name></type> <name pos:start="3:25" pos:end="3:29">count</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:53"><decl pos:start="3:32" pos:end="3:53"><type pos:start="3:32" pos:end="3:53"><name pos:start="3:32" pos:end="3:47">BdrvRequestFlags</name></type> <name pos:start="3:49" pos:end="3:53">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="203:1">{<block_content pos:start="7:5" pos:end="201:15">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">drv</name> <init pos:start="7:22" pos:end="7:30">= <expr pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">QEMUIOVector</name></type> <name pos:start="9:18" pos:end="9:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:16">iovec</name></name></type> <name pos:start="11:18" pos:end="11:20">iov</name> <init pos:start="11:22" pos:end="11:26">= <expr pos:start="11:24" pos:end="11:26"><block pos:start="11:24" pos:end="11:26">{<expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:19">need_flush</name> <init pos:start="15:21" pos:end="15:27">= <expr pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">head</name> <init pos:start="17:14" pos:end="17:16">= <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">tail</name> <init pos:start="19:14" pos:end="19:16">= <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:75"><decl pos:start="23:5" pos:end="23:74"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:24">max_write_zeroes</name> <init pos:start="23:26" pos:end="23:74">= <expr pos:start="23:28" pos:end="23:74"><call pos:start="23:28" pos:end="23:74"><name pos:start="23:28" pos:end="23:39">MIN_NON_ZERO</name><argument_list pos:start="23:40" pos:end="23:74">(<argument pos:start="23:41" pos:end="23:64"><expr pos:start="23:41" pos:end="23:64"><name pos:start="23:41" pos:end="23:64"><name pos:start="23:41" pos:end="23:42">bs</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:46">bl</name><operator pos:start="23:47" pos:end="23:47">.</operator><name pos:start="23:48" pos:end="23:64">max_pwrite_zeroes</name></name></expr></argument>, <argument pos:start="23:67" pos:end="23:73"><expr pos:start="23:67" pos:end="23:73"><name pos:start="23:67" pos:end="23:73">INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="27:50"><decl pos:start="25:5" pos:end="27:49"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">alignment</name> <init pos:start="25:19" pos:end="27:49">= <expr pos:start="25:21" pos:end="27:49"><call pos:start="25:21" pos:end="27:49"><name pos:start="25:21" pos:end="25:23">MAX</name><argument_list pos:start="25:24" pos:end="27:49">(<argument pos:start="25:25" pos:end="25:54"><expr pos:start="25:25" pos:end="25:54"><name pos:start="25:25" pos:end="25:54"><name pos:start="25:25" pos:end="25:26">bs</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:30">bl</name><operator pos:start="25:31" pos:end="25:31">.</operator><name pos:start="25:32" pos:end="25:54">pwrite_zeroes_alignment</name></name></expr></argument>,

                        <argument pos:start="27:25" pos:end="27:48"><expr pos:start="27:25" pos:end="27:48"><name pos:start="27:25" pos:end="27:48"><name pos:start="27:25" pos:end="27:26">bs</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:30">bl</name><operator pos:start="27:31" pos:end="27:31">.</operator><name pos:start="27:32" pos:end="27:48">request_alignment</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:54"><expr pos:start="31:5" pos:end="31:53"><call pos:start="31:5" pos:end="31:53"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:53">(<argument pos:start="31:12" pos:end="31:52"><expr pos:start="31:12" pos:end="31:52"><name pos:start="31:12" pos:end="31:20">alignment</name> <operator pos:start="31:22" pos:end="31:22">%</operator> <name pos:start="31:24" pos:end="31:47"><name pos:start="31:24" pos:end="31:25">bs</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:29">bl</name><operator pos:start="31:30" pos:end="31:30">.</operator><name pos:start="31:31" pos:end="31:47">request_alignment</name></name> <operator pos:start="31:49" pos:end="31:50">==</operator> <literal type="number" pos:start="31:52" pos:end="31:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:30"><expr pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:8">head</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <name pos:start="33:12" pos:end="33:17">offset</name> <operator pos:start="33:19" pos:end="33:19">%</operator> <name pos:start="33:21" pos:end="33:29">alignment</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:8">tail</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <operator pos:start="35:12" pos:end="35:12">(</operator><name pos:start="35:13" pos:end="35:18">offset</name> <operator pos:start="35:20" pos:end="35:20">+</operator> <name pos:start="35:22" pos:end="35:26">count</name><operator pos:start="35:27" pos:end="35:27">)</operator> <operator pos:start="35:29" pos:end="35:29">%</operator> <name pos:start="35:31" pos:end="35:39">alignment</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:68"><expr pos:start="37:5" pos:end="37:67"><name pos:start="37:5" pos:end="37:20">max_write_zeroes</name> <operator pos:start="37:22" pos:end="37:22">=</operator> <call pos:start="37:24" pos:end="37:67"><name pos:start="37:24" pos:end="37:38">QEMU_ALIGN_DOWN</name><argument_list pos:start="37:39" pos:end="37:67">(<argument pos:start="37:40" pos:end="37:55"><expr pos:start="37:40" pos:end="37:55"><name pos:start="37:40" pos:end="37:55">max_write_zeroes</name></expr></argument>, <argument pos:start="37:58" pos:end="37:66"><expr pos:start="37:58" pos:end="37:66"><name pos:start="37:58" pos:end="37:66">alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:57"><expr pos:start="39:5" pos:end="39:56"><call pos:start="39:5" pos:end="39:56"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:56">(<argument pos:start="39:12" pos:end="39:55"><expr pos:start="39:12" pos:end="39:55"><name pos:start="39:12" pos:end="39:27">max_write_zeroes</name> <operator pos:start="39:29" pos:end="39:30">&gt;=</operator> <name pos:start="39:32" pos:end="39:55"><name pos:start="39:32" pos:end="39:33">bs</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:37">bl</name><operator pos:start="39:38" pos:end="39:38">.</operator><name pos:start="39:39" pos:end="39:55">request_alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="43:5" pos:end="187:5">while <condition pos:start="43:11" pos:end="43:29">(<expr pos:start="43:12" pos:end="43:28"><name pos:start="43:12" pos:end="43:16">count</name> <operator pos:start="43:18" pos:end="43:18">&gt;</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal> <operator pos:start="43:22" pos:end="43:23">&amp;&amp;</operator> <operator pos:start="43:25" pos:end="43:25">!</operator><name pos:start="43:26" pos:end="43:28">ret</name></expr>)</condition> <block pos:start="43:31" pos:end="187:5">{<block_content pos:start="45:9" pos:end="185:21">

        <decl_stmt pos:start="45:9" pos:end="45:24"><decl pos:start="45:9" pos:end="45:23"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:15">num</name> <init pos:start="45:17" pos:end="45:23">= <expr pos:start="45:19" pos:end="45:23"><name pos:start="45:19" pos:end="45:23">count</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="49:9" pos:end="55:11">/* Align request.  Block drivers can expect the "bulk" of the request

         * to be aligned, and that unaligned requests do not cross cluster

         * boundaries.

         */</comment>

        <if_stmt pos:start="57:9" pos:end="71:9"><if pos:start="57:9" pos:end="65:9">if <condition pos:start="57:12" pos:end="57:17">(<expr pos:start="57:13" pos:end="57:16"><name pos:start="57:13" pos:end="57:16">head</name></expr>)</condition> <block pos:start="57:19" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:21">

            <comment type="block" pos:start="59:13" pos:end="59:71">/* Make a small request up to the first aligned sector.  */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:47"><expr pos:start="61:13" pos:end="61:46"><name pos:start="61:13" pos:end="61:15">num</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:46"><name pos:start="61:19" pos:end="61:21">MIN</name><argument_list pos:start="61:22" pos:end="61:46">(<argument pos:start="61:23" pos:end="61:27"><expr pos:start="61:23" pos:end="61:27"><name pos:start="61:23" pos:end="61:27">count</name></expr></argument>, <argument pos:start="61:30" pos:end="61:45"><expr pos:start="61:30" pos:end="61:45"><name pos:start="61:30" pos:end="61:38">alignment</name> <operator pos:start="61:40" pos:end="61:40">-</operator> <name pos:start="61:42" pos:end="61:45">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:21"><expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:16">head</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="71:9">else if <condition pos:start="65:19" pos:end="65:43">(<expr pos:start="65:20" pos:end="65:42"><name pos:start="65:20" pos:end="65:23">tail</name> <operator pos:start="65:25" pos:end="65:26">&amp;&amp;</operator> <name pos:start="65:28" pos:end="65:30">num</name> <operator pos:start="65:32" pos:end="65:32">&gt;</operator> <name pos:start="65:34" pos:end="65:42">alignment</name></expr>)</condition> <block pos:start="65:45" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:24">

            <comment type="block" pos:start="67:13" pos:end="67:66">/* Shorten the request to the last aligned sector.  */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:24"><expr pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:15">num</name> <operator pos:start="69:17" pos:end="69:18">-=</operator> <name pos:start="69:20" pos:end="69:23">tail</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="75:9" pos:end="75:32">/* limit request size */</comment>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:35">(<expr pos:start="77:13" pos:end="77:34"><name pos:start="77:13" pos:end="77:15">num</name> <operator pos:start="77:17" pos:end="77:17">&gt;</operator> <name pos:start="77:19" pos:end="77:34">max_write_zeroes</name></expr>)</condition> <block pos:start="77:37" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:35">

            <expr_stmt pos:start="79:13" pos:end="79:35"><expr pos:start="79:13" pos:end="79:34"><name pos:start="79:13" pos:end="79:15">num</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:34">max_write_zeroes</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:23"><expr pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><name pos:start="85:16" pos:end="85:22">ENOTSUP</name></expr>;</expr_stmt>

        <comment type="block" pos:start="87:9" pos:end="87:60">/* First try the efficient write zeroes operation */</comment>

        <if_stmt pos:start="89:9" pos:end="107:9"><if pos:start="89:9" pos:end="103:9">if <condition pos:start="89:12" pos:end="89:39">(<expr pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:15">drv</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:38">bdrv_co_pwrite_zeroes</name></name></expr>)</condition> <block pos:start="89:41" pos:end="103:9">{<block_content pos:start="91:13" pos:end="101:13">

            <expr_stmt pos:start="91:13" pos:end="93:79"><expr pos:start="91:13" pos:end="93:78"><name pos:start="91:13" pos:end="91:15">ret</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="93:78"><name pos:start="91:19" pos:end="91:44"><name pos:start="91:19" pos:end="91:21">drv</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:44">bdrv_co_pwrite_zeroes</name></name><argument_list pos:start="91:45" pos:end="93:78">(<argument pos:start="91:46" pos:end="91:47"><expr pos:start="91:46" pos:end="91:47"><name pos:start="91:46" pos:end="91:47">bs</name></expr></argument>, <argument pos:start="91:50" pos:end="91:55"><expr pos:start="91:50" pos:end="91:55"><name pos:start="91:50" pos:end="91:55">offset</name></expr></argument>, <argument pos:start="91:58" pos:end="91:60"><expr pos:start="91:58" pos:end="91:60"><name pos:start="91:58" pos:end="91:60">num</name></expr></argument>,

                                             <argument pos:start="93:46" pos:end="93:77"><expr pos:start="93:46" pos:end="93:77"><name pos:start="93:46" pos:end="93:50">flags</name> <operator pos:start="93:52" pos:end="93:52">&amp;</operator> <name pos:start="93:54" pos:end="93:77"><name pos:start="93:54" pos:end="93:55">bs</name><operator pos:start="93:56" pos:end="93:57">-&gt;</operator><name pos:start="93:58" pos:end="93:77">supported_zero_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="95:13" pos:end="101:13"><if pos:start="95:13" pos:end="101:13">if <condition pos:start="95:16" pos:end="97:59">(<expr pos:start="95:17" pos:end="97:58"><name pos:start="95:17" pos:end="95:19">ret</name> <operator pos:start="95:21" pos:end="95:22">!=</operator> <operator pos:start="95:24" pos:end="95:24">-</operator><name pos:start="95:25" pos:end="95:31">ENOTSUP</name> <operator pos:start="95:33" pos:end="95:34">&amp;&amp;</operator> <operator pos:start="95:36" pos:end="95:36">(</operator><name pos:start="95:37" pos:end="95:41">flags</name> <operator pos:start="95:43" pos:end="95:43">&amp;</operator> <name pos:start="95:45" pos:end="95:56">BDRV_REQ_FUA</name><operator pos:start="95:57" pos:end="95:57">)</operator> <operator pos:start="95:59" pos:end="95:60">&amp;&amp;</operator>

                <operator pos:start="97:17" pos:end="97:17">!</operator><operator pos:start="97:18" pos:end="97:18">(</operator><name pos:start="97:19" pos:end="97:42"><name pos:start="97:19" pos:end="97:20">bs</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:42">supported_zero_flags</name></name> <operator pos:start="97:44" pos:end="97:44">&amp;</operator> <name pos:start="97:46" pos:end="97:57">BDRV_REQ_FUA</name><operator pos:start="97:58" pos:end="97:58">)</operator></expr>)</condition> <block pos:start="97:61" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:34">

                <expr_stmt pos:start="99:17" pos:end="99:34"><expr pos:start="99:17" pos:end="99:33"><name pos:start="99:17" pos:end="99:26">need_flush</name> <operator pos:start="99:28" pos:end="99:28">=</operator> <name pos:start="99:30" pos:end="99:33">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="107:9">else <block pos:start="103:16" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:46">

            <expr_stmt pos:start="105:13" pos:end="105:46"><expr pos:start="105:13" pos:end="105:45"><call pos:start="105:13" pos:end="105:45"><name pos:start="105:13" pos:end="105:18">assert</name><argument_list pos:start="105:19" pos:end="105:45">(<argument pos:start="105:20" pos:end="105:44"><expr pos:start="105:20" pos:end="105:44"><operator pos:start="105:20" pos:end="105:20">!</operator><name pos:start="105:21" pos:end="105:44"><name pos:start="105:21" pos:end="105:22">bs</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:44">supported_zero_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="111:9" pos:end="179:9"><if pos:start="111:9" pos:end="179:9">if <condition pos:start="111:12" pos:end="111:28">(<expr pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:18">==</operator> <operator pos:start="111:20" pos:end="111:20">-</operator><name pos:start="111:21" pos:end="111:27">ENOTSUP</name></expr>)</condition> <block pos:start="111:30" pos:end="179:9">{<block_content pos:start="115:13" pos:end="177:13">

            <comment type="block" pos:start="113:13" pos:end="113:75">/* Fall back to bounce buffer if write zeroes is unsupported */</comment>

            <decl_stmt pos:start="115:13" pos:end="117:76"><decl pos:start="115:13" pos:end="117:75"><type pos:start="115:13" pos:end="115:15"><name pos:start="115:13" pos:end="115:15">int</name></type> <name pos:start="115:17" pos:end="115:28">max_transfer</name> <init pos:start="115:30" pos:end="117:75">= <expr pos:start="115:32" pos:end="117:75"><call pos:start="115:32" pos:end="117:75"><name pos:start="115:32" pos:end="115:43">MIN_NON_ZERO</name><argument_list pos:start="115:44" pos:end="117:75">(<argument pos:start="115:45" pos:end="115:63"><expr pos:start="115:45" pos:end="115:63"><name pos:start="115:45" pos:end="115:63"><name pos:start="115:45" pos:end="115:46">bs</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:50">bl</name><operator pos:start="115:51" pos:end="115:51">.</operator><name pos:start="115:52" pos:end="115:63">max_transfer</name></name></expr></argument>,

                                            <argument pos:start="117:45" pos:end="117:74"><expr pos:start="117:45" pos:end="117:74"><name pos:start="117:45" pos:end="117:74">MAX_WRITE_ZEROES_BOUNCE_BUFFER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="119:13" pos:end="119:72"><decl pos:start="119:13" pos:end="119:71"><type pos:start="119:13" pos:end="119:28"><name pos:start="119:13" pos:end="119:28">BdrvRequestFlags</name></type> <name pos:start="119:30" pos:end="119:40">write_flags</name> <init pos:start="119:42" pos:end="119:71">= <expr pos:start="119:44" pos:end="119:71"><name pos:start="119:44" pos:end="119:48">flags</name> <operator pos:start="119:50" pos:end="119:50">&amp;</operator> <operator pos:start="119:52" pos:end="119:52">~</operator><name pos:start="119:53" pos:end="119:71">BDRV_REQ_ZERO_WRITE</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="123:13" pos:end="135:13"><if pos:start="123:13" pos:end="135:13">if <condition pos:start="123:16" pos:end="125:60">(<expr pos:start="123:17" pos:end="125:59"><operator pos:start="123:17" pos:end="123:17">(</operator><name pos:start="123:18" pos:end="123:22">flags</name> <operator pos:start="123:24" pos:end="123:24">&amp;</operator> <name pos:start="123:26" pos:end="123:37">BDRV_REQ_FUA</name><operator pos:start="123:38" pos:end="123:38">)</operator> <operator pos:start="123:40" pos:end="123:41">&amp;&amp;</operator>

                <operator pos:start="125:17" pos:end="125:17">!</operator><operator pos:start="125:18" pos:end="125:18">(</operator><name pos:start="125:19" pos:end="125:43"><name pos:start="125:19" pos:end="125:20">bs</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:43">supported_write_flags</name></name> <operator pos:start="125:45" pos:end="125:45">&amp;</operator> <name pos:start="125:47" pos:end="125:58">BDRV_REQ_FUA</name><operator pos:start="125:59" pos:end="125:59">)</operator></expr>)</condition> <block pos:start="125:62" pos:end="135:13">{<block_content pos:start="131:17" pos:end="133:34">

                <comment type="block" pos:start="127:17" pos:end="129:66">/* No need for bdrv_driver_pwrite() to do a fallback

                 * flush on each chunk; use just one at the end */</comment>

                <expr_stmt pos:start="131:17" pos:end="131:45"><expr pos:start="131:17" pos:end="131:44"><name pos:start="131:17" pos:end="131:27">write_flags</name> <operator pos:start="131:29" pos:end="131:30">&amp;=</operator> <operator pos:start="131:32" pos:end="131:32">~</operator><name pos:start="131:33" pos:end="131:44">BDRV_REQ_FUA</name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:34"><expr pos:start="133:17" pos:end="133:33"><name pos:start="133:17" pos:end="133:26">need_flush</name> <operator pos:start="133:28" pos:end="133:28">=</operator> <name pos:start="133:30" pos:end="133:33">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:41"><expr pos:start="137:13" pos:end="137:40"><name pos:start="137:13" pos:end="137:15">num</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="137:40"><name pos:start="137:19" pos:end="137:21">MIN</name><argument_list pos:start="137:22" pos:end="137:40">(<argument pos:start="137:23" pos:end="137:25"><expr pos:start="137:23" pos:end="137:25"><name pos:start="137:23" pos:end="137:25">num</name></expr></argument>, <argument pos:start="137:28" pos:end="137:39"><expr pos:start="137:28" pos:end="137:39"><name pos:start="137:28" pos:end="137:39">max_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:30"><expr pos:start="139:13" pos:end="139:29"><name pos:start="139:13" pos:end="139:23"><name pos:start="139:13" pos:end="139:15">iov</name><operator pos:start="139:16" pos:end="139:16">.</operator><name pos:start="139:17" pos:end="139:23">iov_len</name></name> <operator pos:start="139:25" pos:end="139:25">=</operator> <name pos:start="139:27" pos:end="139:29">num</name></expr>;</expr_stmt>

            <if_stmt pos:start="141:13" pos:end="155:13"><if pos:start="141:13" pos:end="155:13">if <condition pos:start="141:16" pos:end="141:37">(<expr pos:start="141:17" pos:end="141:36"><name pos:start="141:17" pos:end="141:28"><name pos:start="141:17" pos:end="141:19">iov</name><operator pos:start="141:20" pos:end="141:20">.</operator><name pos:start="141:21" pos:end="141:28">iov_base</name></name> <operator pos:start="141:30" pos:end="141:31">==</operator> <name pos:start="141:33" pos:end="141:36">NULL</name></expr>)</condition> <block pos:start="141:39" pos:end="155:13">{<block_content pos:start="143:17" pos:end="153:45">

                <expr_stmt pos:start="143:17" pos:end="143:60"><expr pos:start="143:17" pos:end="143:59"><name pos:start="143:17" pos:end="143:28"><name pos:start="143:17" pos:end="143:19">iov</name><operator pos:start="143:20" pos:end="143:20">.</operator><name pos:start="143:21" pos:end="143:28">iov_base</name></name> <operator pos:start="143:30" pos:end="143:30">=</operator> <call pos:start="143:32" pos:end="143:59"><name pos:start="143:32" pos:end="143:50">qemu_try_blockalign</name><argument_list pos:start="143:51" pos:end="143:59">(<argument pos:start="143:52" pos:end="143:53"><expr pos:start="143:52" pos:end="143:53"><name pos:start="143:52" pos:end="143:53">bs</name></expr></argument>, <argument pos:start="143:56" pos:end="143:58"><expr pos:start="143:56" pos:end="143:58"><name pos:start="143:56" pos:end="143:58">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="145:17" pos:end="151:17"><if pos:start="145:17" pos:end="151:17">if <condition pos:start="145:20" pos:end="145:41">(<expr pos:start="145:21" pos:end="145:40"><name pos:start="145:21" pos:end="145:32"><name pos:start="145:21" pos:end="145:23">iov</name><operator pos:start="145:24" pos:end="145:24">.</operator><name pos:start="145:25" pos:end="145:32">iov_base</name></name> <operator pos:start="145:34" pos:end="145:35">==</operator> <name pos:start="145:37" pos:end="145:40">NULL</name></expr>)</condition> <block pos:start="145:43" pos:end="151:17">{<block_content pos:start="147:21" pos:end="149:30">

                    <expr_stmt pos:start="147:21" pos:end="147:34"><expr pos:start="147:21" pos:end="147:33"><name pos:start="147:21" pos:end="147:23">ret</name> <operator pos:start="147:25" pos:end="147:25">=</operator> <operator pos:start="147:27" pos:end="147:27">-</operator><name pos:start="147:28" pos:end="147:33">ENOMEM</name></expr>;</expr_stmt>

                    <goto pos:start="149:21" pos:end="149:30">goto <name pos:start="149:26" pos:end="149:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:45"><expr pos:start="153:17" pos:end="153:44"><call pos:start="153:17" pos:end="153:44"><name pos:start="153:17" pos:end="153:22">memset</name><argument_list pos:start="153:23" pos:end="153:44">(<argument pos:start="153:24" pos:end="153:35"><expr pos:start="153:24" pos:end="153:35"><name pos:start="153:24" pos:end="153:35"><name pos:start="153:24" pos:end="153:26">iov</name><operator pos:start="153:27" pos:end="153:27">.</operator><name pos:start="153:28" pos:end="153:35">iov_base</name></name></expr></argument>, <argument pos:start="153:38" pos:end="153:38"><expr pos:start="153:38" pos:end="153:38"><literal type="number" pos:start="153:38" pos:end="153:38">0</literal></expr></argument>, <argument pos:start="153:41" pos:end="153:43"><expr pos:start="153:41" pos:end="153:43"><name pos:start="153:41" pos:end="153:43">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:53"><expr pos:start="157:13" pos:end="157:52"><call pos:start="157:13" pos:end="157:52"><name pos:start="157:13" pos:end="157:36">qemu_iovec_init_external</name><argument_list pos:start="157:37" pos:end="157:52">(<argument pos:start="157:38" pos:end="157:42"><expr pos:start="157:38" pos:end="157:42"><operator pos:start="157:38" pos:end="157:38">&amp;</operator><name pos:start="157:39" pos:end="157:42">qiov</name></expr></argument>, <argument pos:start="157:45" pos:end="157:48"><expr pos:start="157:45" pos:end="157:48"><operator pos:start="157:45" pos:end="157:45">&amp;</operator><name pos:start="157:46" pos:end="157:48">iov</name></expr></argument>, <argument pos:start="157:51" pos:end="157:51"><expr pos:start="157:51" pos:end="157:51"><literal type="number" pos:start="157:51" pos:end="157:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="161:13" pos:end="161:75"><expr pos:start="161:13" pos:end="161:74"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:74"><name pos:start="161:19" pos:end="161:37">bdrv_driver_pwritev</name><argument_list pos:start="161:38" pos:end="161:74">(<argument pos:start="161:39" pos:end="161:40"><expr pos:start="161:39" pos:end="161:40"><name pos:start="161:39" pos:end="161:40">bs</name></expr></argument>, <argument pos:start="161:43" pos:end="161:48"><expr pos:start="161:43" pos:end="161:48"><name pos:start="161:43" pos:end="161:48">offset</name></expr></argument>, <argument pos:start="161:51" pos:end="161:53"><expr pos:start="161:51" pos:end="161:53"><name pos:start="161:51" pos:end="161:53">num</name></expr></argument>, <argument pos:start="161:56" pos:end="161:60"><expr pos:start="161:56" pos:end="161:60"><operator pos:start="161:56" pos:end="161:56">&amp;</operator><name pos:start="161:57" pos:end="161:60">qiov</name></expr></argument>, <argument pos:start="161:63" pos:end="161:73"><expr pos:start="161:63" pos:end="161:73"><name pos:start="161:63" pos:end="161:73">write_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="165:13" pos:end="169:15">/* Keep bounce buffer around if it is big enough for all

             * all future requests.

             */</comment>

            <if_stmt pos:start="171:13" pos:end="177:13"><if pos:start="171:13" pos:end="177:13">if <condition pos:start="171:16" pos:end="171:35">(<expr pos:start="171:17" pos:end="171:34"><name pos:start="171:17" pos:end="171:19">num</name> <operator pos:start="171:21" pos:end="171:21">&lt;</operator> <name pos:start="171:23" pos:end="171:34">max_transfer</name></expr>)</condition> <block pos:start="171:37" pos:end="177:13">{<block_content pos:start="173:17" pos:end="175:36">

                <expr_stmt pos:start="173:17" pos:end="173:41"><expr pos:start="173:17" pos:end="173:40"><call pos:start="173:17" pos:end="173:40"><name pos:start="173:17" pos:end="173:26">qemu_vfree</name><argument_list pos:start="173:27" pos:end="173:40">(<argument pos:start="173:28" pos:end="173:39"><expr pos:start="173:28" pos:end="173:39"><name pos:start="173:28" pos:end="173:39"><name pos:start="173:28" pos:end="173:30">iov</name><operator pos:start="173:31" pos:end="173:31">.</operator><name pos:start="173:32" pos:end="173:39">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:36"><expr pos:start="175:17" pos:end="175:35"><name pos:start="175:17" pos:end="175:28"><name pos:start="175:17" pos:end="175:19">iov</name><operator pos:start="175:20" pos:end="175:20">.</operator><name pos:start="175:21" pos:end="175:28">iov_base</name></name> <operator pos:start="175:30" pos:end="175:30">=</operator> <name pos:start="175:32" pos:end="175:35">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:22"><expr pos:start="183:9" pos:end="183:21"><name pos:start="183:9" pos:end="183:14">offset</name> <operator pos:start="183:16" pos:end="183:17">+=</operator> <name pos:start="183:19" pos:end="183:21">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:21"><expr pos:start="185:9" pos:end="185:20"><name pos:start="185:9" pos:end="185:13">count</name> <operator pos:start="185:15" pos:end="185:16">-=</operator> <name pos:start="185:18" pos:end="185:20">num</name></expr>;</expr_stmt>

    </block_content>}</block></while>



<label pos:start="191:1" pos:end="191:5"><name pos:start="191:1" pos:end="191:4">fail</name>:</label>

    <if_stmt pos:start="193:5" pos:end="197:5"><if pos:start="193:5" pos:end="197:5">if <condition pos:start="193:8" pos:end="193:31">(<expr pos:start="193:9" pos:end="193:30"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:14">==</operator> <literal type="number" pos:start="193:16" pos:end="193:16">0</literal> <operator pos:start="193:18" pos:end="193:19">&amp;&amp;</operator> <name pos:start="193:21" pos:end="193:30">need_flush</name></expr>)</condition> <block pos:start="193:33" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:32">

        <expr_stmt pos:start="195:9" pos:end="195:32"><expr pos:start="195:9" pos:end="195:31"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <call pos:start="195:15" pos:end="195:31"><name pos:start="195:15" pos:end="195:27">bdrv_co_flush</name><argument_list pos:start="195:28" pos:end="195:31">(<argument pos:start="195:29" pos:end="195:30"><expr pos:start="195:29" pos:end="195:30"><name pos:start="195:29" pos:end="195:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:29"><expr pos:start="199:5" pos:end="199:28"><call pos:start="199:5" pos:end="199:28"><name pos:start="199:5" pos:end="199:14">qemu_vfree</name><argument_list pos:start="199:15" pos:end="199:28">(<argument pos:start="199:16" pos:end="199:27"><expr pos:start="199:16" pos:end="199:27"><name pos:start="199:16" pos:end="199:27"><name pos:start="199:16" pos:end="199:18">iov</name><operator pos:start="199:19" pos:end="199:19">.</operator><name pos:start="199:20" pos:end="199:27">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="201:5" pos:end="201:15">return <expr pos:start="201:12" pos:end="201:14"><name pos:start="201:12" pos:end="201:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
