<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2445.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">scsi_write_request</name><parameter_list pos:start="1:31" pos:end="1:46">(<parameter pos:start="1:32" pos:end="1:45"><decl pos:start="1:32" pos:end="1:45"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:42">SCSIDiskReq</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">r</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:5">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SCSIDiskState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:65">= <expr pos:start="5:24" pos:end="5:65"><call pos:start="5:24" pos:end="5:65"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:65">(<argument pos:start="5:34" pos:end="5:46"><expr pos:start="5:34" pos:end="5:46"><name pos:start="5:34" pos:end="5:46">SCSIDiskState</name></expr></argument>, <argument pos:start="5:49" pos:end="5:52"><expr pos:start="5:49" pos:end="5:52"><name pos:start="5:49" pos:end="5:52">qdev</name></expr></argument>, <argument pos:start="5:55" pos:end="5:64"><expr pos:start="5:55" pos:end="5:64"><name pos:start="5:55" pos:end="5:64"><name pos:start="5:55" pos:end="5:55">r</name><operator pos:start="5:56" pos:end="5:57">-&gt;</operator><name pos:start="5:58" pos:end="5:60">req</name><operator pos:start="5:61" pos:end="5:61">.</operator><name pos:start="5:62" pos:end="5:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:14">n</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:53">/* No data transfer may already be in progress */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><call pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:32">(<argument pos:start="13:12" pos:end="13:31"><expr pos:start="13:12" pos:end="13:31"><name pos:start="13:12" pos:end="13:23"><name pos:start="13:12" pos:end="13:12">r</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:17">req</name><operator pos:start="13:18" pos:end="13:18">.</operator><name pos:start="13:19" pos:end="13:23">aiocb</name></name> <operator pos:start="13:25" pos:end="13:26">==</operator> <name pos:start="13:28" pos:end="13:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:29"><expr pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:5">n</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <name pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:9">r</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:14">iov</name><operator pos:start="17:15" pos:end="17:15">.</operator><name pos:start="17:16" pos:end="17:22">iov_len</name></name> <operator pos:start="17:24" pos:end="17:24">/</operator> <literal type="number" pos:start="17:26" pos:end="17:28">512</literal></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="39:5"><if pos:start="19:5" pos:end="33:5">if <condition pos:start="19:8" pos:end="19:10">(<expr pos:start="19:9" pos:end="19:9"><name pos:start="19:9" pos:end="19:9">n</name></expr>)</condition> <block pos:start="19:12" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:9">

        <expr_stmt pos:start="21:9" pos:end="21:55"><expr pos:start="21:9" pos:end="21:54"><call pos:start="21:9" pos:end="21:54"><name pos:start="21:9" pos:end="21:32">qemu_iovec_init_external</name><argument_list pos:start="21:33" pos:end="21:54">(<argument pos:start="21:34" pos:end="21:41"><expr pos:start="21:34" pos:end="21:41"><operator pos:start="21:34" pos:end="21:34">&amp;</operator><name pos:start="21:35" pos:end="21:41"><name pos:start="21:35" pos:end="21:35">r</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:41">qiov</name></name></expr></argument>, <argument pos:start="21:44" pos:end="21:50"><expr pos:start="21:44" pos:end="21:50"><operator pos:start="21:44" pos:end="21:44">&amp;</operator><name pos:start="21:45" pos:end="21:50"><name pos:start="21:45" pos:end="21:45">r</name><operator pos:start="21:46" pos:end="21:47">-&gt;</operator><name pos:start="21:48" pos:end="21:50">iov</name></name></expr></argument>, <argument pos:start="21:53" pos:end="21:53"><expr pos:start="21:53" pos:end="21:53"><literal type="number" pos:start="21:53" pos:end="21:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="25:59"><expr pos:start="23:9" pos:end="25:58"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:9">r</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:14">req</name><operator pos:start="23:15" pos:end="23:15">.</operator><name pos:start="23:16" pos:end="23:20">aiocb</name></name> <operator pos:start="23:22" pos:end="23:22">=</operator> <call pos:start="23:24" pos:end="25:58"><name pos:start="23:24" pos:end="23:38">bdrv_aio_writev</name><argument_list pos:start="23:39" pos:end="25:58">(<argument pos:start="23:40" pos:end="23:44"><expr pos:start="23:40" pos:end="23:44"><name pos:start="23:40" pos:end="23:44"><name pos:start="23:40" pos:end="23:40">s</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:44">bs</name></name></expr></argument>, <argument pos:start="23:47" pos:end="23:55"><expr pos:start="23:47" pos:end="23:55"><name pos:start="23:47" pos:end="23:55"><name pos:start="23:47" pos:end="23:47">r</name><operator pos:start="23:48" pos:end="23:49">-&gt;</operator><name pos:start="23:50" pos:end="23:55">sector</name></name></expr></argument>, <argument pos:start="23:58" pos:end="23:65"><expr pos:start="23:58" pos:end="23:65"><operator pos:start="23:58" pos:end="23:58">&amp;</operator><name pos:start="23:59" pos:end="23:65"><name pos:start="23:59" pos:end="23:59">r</name><operator pos:start="23:60" pos:end="23:61">-&gt;</operator><name pos:start="23:62" pos:end="23:65">qiov</name></name></expr></argument>, <argument pos:start="23:68" pos:end="23:68"><expr pos:start="23:68" pos:end="23:68"><name pos:start="23:68" pos:end="23:68">n</name></expr></argument>,

                                   <argument pos:start="25:36" pos:end="25:54"><expr pos:start="25:36" pos:end="25:54"><name pos:start="25:36" pos:end="25:54">scsi_write_complete</name></expr></argument>, <argument pos:start="25:57" pos:end="25:57"><expr pos:start="25:57" pos:end="25:57"><name pos:start="25:57" pos:end="25:57">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:33">(<expr pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:24"><name pos:start="27:13" pos:end="27:13">r</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:18">req</name><operator pos:start="27:19" pos:end="27:19">.</operator><name pos:start="27:20" pos:end="27:24">aiocb</name></name> <operator pos:start="27:26" pos:end="27:27">==</operator> <name pos:start="27:29" pos:end="27:32">NULL</name></expr>)</condition> <block pos:start="27:35" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:41">

            <expr_stmt pos:start="29:13" pos:end="29:41"><expr pos:start="29:13" pos:end="29:40"><call pos:start="29:13" pos:end="29:40"><name pos:start="29:13" pos:end="29:31">scsi_write_complete</name><argument_list pos:start="29:32" pos:end="29:40">(<argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">r</name></expr></argument>, <argument pos:start="29:36" pos:end="29:39"><expr pos:start="29:36" pos:end="29:39"><operator pos:start="29:36" pos:end="29:36">-</operator><name pos:start="29:37" pos:end="29:39">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="39:5">else <block pos:start="33:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:34">

        <comment type="block" pos:start="35:9" pos:end="35:65">/* Invoke completion routine to fetch data from host.  */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><call pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:27">scsi_write_complete</name><argument_list pos:start="37:28" pos:end="37:33">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">r</name></expr></argument>, <argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><literal type="number" pos:start="37:32" pos:end="37:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
