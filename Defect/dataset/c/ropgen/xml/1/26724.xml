<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26724.c" pos:tabs="8"><function pos:start="1:1" pos:end="539:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ppc_spapr_init</name><parameter_list pos:start="1:27" pos:end="1:49">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:41"><name pos:start="1:28" pos:end="1:39">MachineState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:48">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="539:1">{<block_content pos:start="5:5" pos:end="537:36">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:49"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:49">= <expr pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:37">machine</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:49">boot_order</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">PowerPCCPU</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:19">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">CPUPPCState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">PCIHostState</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">phb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:47"><decl pos:start="25:5" pos:end="25:46"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:24">sysmem</name> <init pos:start="25:26" pos:end="25:46">= <expr pos:start="25:28" pos:end="25:46"><call pos:start="25:28" pos:end="25:46"><name pos:start="25:28" pos:end="25:44">get_system_memory</name><argument_list pos:start="25:45" pos:end="25:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:47"><decl pos:start="27:5" pos:end="27:46"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:21">ram</name> <init pos:start="27:23" pos:end="27:46">= <expr pos:start="27:25" pos:end="27:46"><call pos:start="27:25" pos:end="27:46"><name pos:start="27:25" pos:end="27:29">g_new</name><argument_list pos:start="27:30" pos:end="27:46">(<argument pos:start="27:31" pos:end="27:42"><expr pos:start="27:31" pos:end="27:42"><name pos:start="27:31" pos:end="27:42">MemoryRegion</name></expr></argument>, <argument pos:start="27:45" pos:end="27:45"><expr pos:start="27:45" pos:end="27:45"><literal type="number" pos:start="27:45" pos:end="27:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:29"><decl pos:start="29:5" pos:end="29:28"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:28">rma_region</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:21"><decl pos:start="31:5" pos:end="31:20"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:8">void</name> <modifier pos:start="31:10" pos:end="31:10">*</modifier></type><name pos:start="31:11" pos:end="31:13">rma</name> <init pos:start="31:15" pos:end="31:20">= <expr pos:start="31:17" pos:end="31:20"><name pos:start="31:17" pos:end="31:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:26"><decl pos:start="33:5" pos:end="33:25"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:10">hwaddr</name></type> <name pos:start="33:12" pos:end="33:25">rma_alloc_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:43"><decl pos:start="35:5" pos:end="35:42"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:10">hwaddr</name></type> <name pos:start="35:12" pos:end="35:21">node0_size</name> <init pos:start="35:23" pos:end="35:42">= <expr pos:start="35:25" pos:end="35:42"><call pos:start="35:25" pos:end="35:42"><name pos:start="35:25" pos:end="35:40">spapr_node0_size</name><argument_list pos:start="35:41" pos:end="35:42">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:29"><decl pos:start="37:5" pos:end="37:28"><type pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:12">uint32_t</name></type> <name pos:start="37:14" pos:end="37:24">initrd_base</name> <init pos:start="37:26" pos:end="37:28">= <expr pos:start="37:28" pos:end="37:28"><literal type="number" pos:start="37:28" pos:end="37:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:42"><decl pos:start="39:5" pos:end="39:24"><type pos:start="39:5" pos:end="39:8"><name pos:start="39:5" pos:end="39:8">long</name></type> <name pos:start="39:10" pos:end="39:20">kernel_size</name> <init pos:start="39:22" pos:end="39:24">= <expr pos:start="39:24" pos:end="39:24"><literal type="number" pos:start="39:24" pos:end="39:24">0</literal></expr></init></decl>, <decl pos:start="39:27" pos:end="39:41"><type ref="prev" pos:start="39:5" pos:end="39:8"/><name pos:start="39:27" pos:end="39:37">initrd_size</name> <init pos:start="39:39" pos:end="39:41">= <expr pos:start="39:41" pos:end="39:41"><literal type="number" pos:start="39:41" pos:end="39:41">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:41"><decl pos:start="41:5" pos:end="41:19"><type pos:start="41:5" pos:end="41:8"><name pos:start="41:5" pos:end="41:8">long</name></type> <name pos:start="41:10" pos:end="41:19">load_limit</name></decl>, <decl pos:start="41:22" pos:end="41:31"><type ref="prev" pos:start="41:5" pos:end="41:8"/><name pos:start="41:22" pos:end="41:31">rtas_limit</name></decl>, <decl pos:start="41:34" pos:end="41:40"><type ref="prev" pos:start="41:5" pos:end="41:8"/><name pos:start="41:34" pos:end="41:40">fw_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:27"><decl pos:start="43:5" pos:end="43:26"><type pos:start="43:5" pos:end="43:8"><name pos:start="43:5" pos:end="43:8">bool</name></type> <name pos:start="43:10" pos:end="43:18">kernel_le</name> <init pos:start="43:20" pos:end="43:26">= <expr pos:start="43:22" pos:end="43:26"><name pos:start="43:22" pos:end="43:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:19"><decl pos:start="45:5" pos:end="45:18"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:8">char</name> <modifier pos:start="45:10" pos:end="45:10">*</modifier></type><name pos:start="45:11" pos:end="45:18">filename</name></decl>;</decl_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:17">msi_supported</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:24">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:38"><expr pos:start="53:5" pos:end="53:37"><name pos:start="53:5" pos:end="53:9">spapr</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <call pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:21">g_malloc0</name><argument_list pos:start="53:22" pos:end="53:37">(<argument pos:start="53:23" pos:end="53:36"><expr pos:start="53:23" pos:end="53:36"><sizeof pos:start="53:23" pos:end="53:36">sizeof<argument_list pos:start="53:29" pos:end="53:36">(<argument pos:start="53:30" pos:end="53:35"><expr pos:start="53:30" pos:end="53:35"><operator pos:start="53:30" pos:end="53:30">*</operator><name pos:start="53:31" pos:end="53:35">spapr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:29"><expr pos:start="55:5" pos:end="55:28"><call pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:14">QLIST_INIT</name><argument_list pos:start="55:15" pos:end="55:28">(<argument pos:start="55:16" pos:end="55:27"><expr pos:start="55:16" pos:end="55:27"><operator pos:start="55:16" pos:end="55:16">&amp;</operator><name pos:start="55:17" pos:end="55:27"><name pos:start="55:17" pos:end="55:21">spapr</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:27">phbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:48"><expr pos:start="59:5" pos:end="59:47"><name pos:start="59:5" pos:end="59:21">cpu_ppc_hypercall</name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:47">emulate_spapr_hypercall</name></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:35">/* Allocate RMA if necessary */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:44"><expr pos:start="65:5" pos:end="65:43"><name pos:start="65:5" pos:end="65:18">rma_alloc_size</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:43"><name pos:start="65:22" pos:end="65:37">kvmppc_alloc_rma</name><argument_list pos:start="65:38" pos:end="65:43">(<argument pos:start="65:39" pos:end="65:42"><expr pos:start="65:39" pos:end="65:42"><operator pos:start="65:39" pos:end="65:39">&amp;</operator><name pos:start="65:40" pos:end="65:42">rma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:29">(<expr pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:22">rma_alloc_size</name> <operator pos:start="69:24" pos:end="69:25">==</operator> <operator pos:start="69:27" pos:end="69:27">-</operator><literal type="number" pos:start="69:28" pos:end="69:28">1</literal></expr>)</condition> <block pos:start="69:31" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:16">

        <expr_stmt pos:start="71:9" pos:end="71:49"><expr pos:start="71:9" pos:end="71:48"><call pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:16">hw_error</name><argument_list pos:start="71:17" pos:end="71:48">(<argument pos:start="71:18" pos:end="71:47"><expr pos:start="71:18" pos:end="71:47"><literal type="string" pos:start="71:18" pos:end="71:47">"qemu: Unable to create RMA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:16"><expr pos:start="73:9" pos:end="73:15"><call pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:12">exit</name><argument_list pos:start="73:13" pos:end="73:15">(<argument pos:start="73:14" pos:end="73:14"><expr pos:start="73:14" pos:end="73:14"><literal type="number" pos:start="73:14" pos:end="73:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="115:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:56">(<expr pos:start="79:9" pos:end="79:55"><name pos:start="79:9" pos:end="79:22">rma_alloc_size</name> <operator pos:start="79:24" pos:end="79:25">&amp;&amp;</operator> <operator pos:start="79:27" pos:end="79:27">(</operator><name pos:start="79:28" pos:end="79:41">rma_alloc_size</name> <operator pos:start="79:43" pos:end="79:43">&lt;</operator> <name pos:start="79:45" pos:end="79:54">node0_size</name><operator pos:start="79:55" pos:end="79:55">)</operator></expr>)</condition> <block pos:start="79:58" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:41">

        <expr_stmt pos:start="81:9" pos:end="81:41"><expr pos:start="81:9" pos:end="81:40"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:13">spapr</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:23">rma_size</name></name> <operator pos:start="81:25" pos:end="81:25">=</operator> <name pos:start="81:27" pos:end="81:40">rma_alloc_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="115:5">else <block pos:start="83:12" pos:end="115:5">{<block_content pos:start="85:9" pos:end="113:9">

        <expr_stmt pos:start="85:9" pos:end="85:37"><expr pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:13">spapr</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:23">rma_size</name></name> <operator pos:start="85:25" pos:end="85:25">=</operator> <name pos:start="85:27" pos:end="85:36">node0_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="105:11">/* With KVM, we don't actually know whether KVM supports an

         * unbounded RMA (PR KVM) or is limited by the hash table size

         * (HV KVM using VRMA), so we always assume the latter

         *

         * In that case, we also limit the initial allocations for RTAS

         * etc... to 256M since we have no way to know what the VRMA size

         * is going to be as it depends on the size of the hash table

         * isn't determined yet.

         */</comment>

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:26">(<expr pos:start="107:13" pos:end="107:25"><call pos:start="107:13" pos:end="107:25"><name pos:start="107:13" pos:end="107:23">kvm_enabled</name><argument_list pos:start="107:24" pos:end="107:25">()</argument_list></call></expr>)</condition> <block pos:start="107:28" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:63">

            <expr_stmt pos:start="109:13" pos:end="109:35"><expr pos:start="109:13" pos:end="109:34"><name pos:start="109:13" pos:end="109:30"><name pos:start="109:13" pos:end="109:17">spapr</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:30">vrma_adjust</name></name> <operator pos:start="109:32" pos:end="109:32">=</operator> <literal type="number" pos:start="109:34" pos:end="109:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:63"><expr pos:start="111:13" pos:end="111:62"><name pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:17">spapr</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:27">rma_size</name></name> <operator pos:start="111:29" pos:end="111:29">=</operator> <call pos:start="111:31" pos:end="111:62"><name pos:start="111:31" pos:end="111:33">MIN</name><argument_list pos:start="111:34" pos:end="111:62">(<argument pos:start="111:35" pos:end="111:49"><expr pos:start="111:35" pos:end="111:49"><name pos:start="111:35" pos:end="111:49"><name pos:start="111:35" pos:end="111:39">spapr</name><operator pos:start="111:40" pos:end="111:41">-&gt;</operator><name pos:start="111:42" pos:end="111:49">rma_size</name></name></expr></argument>, <argument pos:start="111:52" pos:end="111:61"><expr pos:start="111:52" pos:end="111:61"><literal type="number" pos:start="111:52" pos:end="111:61">0x10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="119:5" pos:end="127:5"><if pos:start="119:5" pos:end="127:5">if <condition pos:start="119:8" pos:end="119:37">(<expr pos:start="119:9" pos:end="119:36"><name pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:13">spapr</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:23">rma_size</name></name> <operator pos:start="119:25" pos:end="119:25">&gt;</operator> <name pos:start="119:27" pos:end="119:36">node0_size</name></expr>)</condition> <block pos:start="119:39" pos:end="127:5">{<block_content pos:start="121:9" pos:end="125:16">

        <expr_stmt pos:start="121:9" pos:end="123:33"><expr pos:start="121:9" pos:end="123:32"><call pos:start="121:9" pos:end="123:32"><name pos:start="121:9" pos:end="121:15">fprintf</name><argument_list pos:start="121:16" pos:end="123:32">(<argument pos:start="121:17" pos:end="121:22"><expr pos:start="121:17" pos:end="121:22"><name pos:start="121:17" pos:end="121:22">stderr</name></expr></argument>, <argument pos:start="121:25" pos:end="121:86"><expr pos:start="121:25" pos:end="121:86"><literal type="string" pos:start="121:25" pos:end="121:70">"Error: Numa node 0 has to span the RMA (%#08"</literal><name pos:start="121:71" pos:end="121:81">HWADDR_PRIx</name><literal type="string" pos:start="121:82" pos:end="121:86">")\n"</literal></expr></argument>,

                <argument pos:start="123:17" pos:end="123:31"><expr pos:start="123:17" pos:end="123:31"><name pos:start="123:17" pos:end="123:31"><name pos:start="123:17" pos:end="123:21">spapr</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:31">rma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:16"><expr pos:start="125:9" pos:end="125:15"><call pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:12">exit</name><argument_list pos:start="125:13" pos:end="125:15">(<argument pos:start="125:14" pos:end="125:14"><expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="135:59">/* We place the device tree and RTAS just below either the top of the RMA,

     * or just below 2GB, whichever is lowere, so that it can be

     * processed with 32-bit real mode code if necessary */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:50"><expr pos:start="137:5" pos:end="137:49"><name pos:start="137:5" pos:end="137:14">rtas_limit</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <call pos:start="137:18" pos:end="137:49"><name pos:start="137:18" pos:end="137:20">MIN</name><argument_list pos:start="137:21" pos:end="137:49">(<argument pos:start="137:22" pos:end="137:36"><expr pos:start="137:22" pos:end="137:36"><name pos:start="137:22" pos:end="137:36"><name pos:start="137:22" pos:end="137:26">spapr</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:36">rma_size</name></name></expr></argument>, <argument pos:start="137:39" pos:end="137:48"><expr pos:start="137:39" pos:end="137:48"><literal type="number" pos:start="137:39" pos:end="137:48">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:50"><expr pos:start="139:5" pos:end="139:49"><name pos:start="139:5" pos:end="139:20"><name pos:start="139:5" pos:end="139:9">spapr</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:20">rtas_addr</name></name> <operator pos:start="139:22" pos:end="139:22">=</operator> <name pos:start="139:24" pos:end="139:33">rtas_limit</name> <operator pos:start="139:35" pos:end="139:35">-</operator> <name pos:start="139:37" pos:end="139:49">RTAS_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:54"><expr pos:start="141:5" pos:end="141:53"><name pos:start="141:5" pos:end="141:19"><name pos:start="141:5" pos:end="141:9">spapr</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:19">fdt_addr</name></name> <operator pos:start="141:21" pos:end="141:21">=</operator> <name pos:start="141:23" pos:end="141:38"><name pos:start="141:23" pos:end="141:27">spapr</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:38">rtas_addr</name></name> <operator pos:start="141:40" pos:end="141:40">-</operator> <name pos:start="141:42" pos:end="141:53">FDT_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:47"><expr pos:start="143:5" pos:end="143:46"><name pos:start="143:5" pos:end="143:14">load_limit</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <name pos:start="143:18" pos:end="143:32"><name pos:start="143:18" pos:end="143:22">spapr</name><operator pos:start="143:23" pos:end="143:24">-&gt;</operator><name pos:start="143:25" pos:end="143:32">fdt_addr</name></name> <operator pos:start="143:34" pos:end="143:34">-</operator> <name pos:start="143:36" pos:end="143:46">FW_OVERHEAD</name></expr>;</expr_stmt>



    <comment type="block" pos:start="147:5" pos:end="151:59">/* We aim for a hash table of size 1/128 the size of RAM.  The

     * normal rule of thumb is 1/64 the size of RAM, but that's much

     * more than needed for the Linux guests we support. */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:27"><expr pos:start="153:5" pos:end="153:26"><name pos:start="153:5" pos:end="153:21"><name pos:start="153:5" pos:end="153:9">spapr</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:21">htab_shift</name></name> <operator pos:start="153:23" pos:end="153:23">=</operator> <literal type="number" pos:start="153:25" pos:end="153:26">18</literal></expr>;</expr_stmt> <comment type="block" pos:start="153:29" pos:end="153:58">/* Minimum architected size */</comment>

    <while pos:start="155:5" pos:end="165:5">while <condition pos:start="155:11" pos:end="155:35">(<expr pos:start="155:12" pos:end="155:34"><name pos:start="155:12" pos:end="155:28"><name pos:start="155:12" pos:end="155:16">spapr</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:28">htab_shift</name></name> <operator pos:start="155:30" pos:end="155:31">&lt;=</operator> <literal type="number" pos:start="155:33" pos:end="155:34">46</literal></expr>)</condition> <block pos:start="155:37" pos:end="165:5">{<block_content pos:start="157:9" pos:end="163:28">

        <if_stmt pos:start="157:9" pos:end="161:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:58">(<expr pos:start="157:13" pos:end="157:57"><operator pos:start="157:13" pos:end="157:13">(</operator><literal type="number" pos:start="157:14" pos:end="157:17">1ULL</literal> <operator pos:start="157:19" pos:end="157:20">&lt;&lt;</operator> <operator pos:start="157:22" pos:end="157:22">(</operator><name pos:start="157:23" pos:end="157:39"><name pos:start="157:23" pos:end="157:27">spapr</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:39">htab_shift</name></name> <operator pos:start="157:41" pos:end="157:41">+</operator> <literal type="number" pos:start="157:43" pos:end="157:43">7</literal><operator pos:start="157:44" pos:end="157:44">)</operator><operator pos:start="157:45" pos:end="157:45">)</operator> <operator pos:start="157:47" pos:end="157:48">&gt;=</operator> <name pos:start="157:50" pos:end="157:57">ram_size</name></expr>)</condition> <block pos:start="157:60" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:18">

            <break pos:start="159:13" pos:end="159:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:28"><expr pos:start="163:9" pos:end="163:27"><name pos:start="163:9" pos:end="163:25"><name pos:start="163:9" pos:end="163:13">spapr</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:25">htab_shift</name></name><operator pos:start="163:26" pos:end="163:27">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="169:5" pos:end="169:64">/* Set up Interrupt Controller before we create the VCPUs */</comment>

    <expr_stmt pos:start="171:5" pos:end="173:45"><expr pos:start="171:5" pos:end="173:44"><name pos:start="171:5" pos:end="171:14"><name pos:start="171:5" pos:end="171:9">spapr</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:14">icp</name></name> <operator pos:start="171:16" pos:end="171:16">=</operator> <call pos:start="171:18" pos:end="173:44"><name pos:start="171:18" pos:end="171:33">xics_system_init</name><argument_list pos:start="171:34" pos:end="173:44">(<argument pos:start="171:35" pos:end="171:79"><expr pos:start="171:35" pos:end="171:79"><name pos:start="171:35" pos:end="171:42">smp_cpus</name> <operator pos:start="171:44" pos:end="171:44">*</operator> <call pos:start="171:46" pos:end="171:65"><name pos:start="171:46" pos:end="171:63">kvmppc_smt_threads</name><argument_list pos:start="171:64" pos:end="171:65">()</argument_list></call> <operator pos:start="171:67" pos:end="171:67">/</operator> <name pos:start="171:69" pos:end="171:79">smp_threads</name></expr></argument>,

                                  <argument pos:start="173:35" pos:end="173:43"><expr pos:start="173:35" pos:end="173:43"><name pos:start="173:35" pos:end="173:43">XICS_IRQS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:19">/* init CPUs */</comment>

    <if_stmt pos:start="179:5" pos:end="183:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:26">(<expr pos:start="179:9" pos:end="179:25"><name pos:start="179:9" pos:end="179:17">cpu_model</name> <operator pos:start="179:19" pos:end="179:20">==</operator> <name pos:start="179:22" pos:end="179:25">NULL</name></expr>)</condition> <block pos:start="179:28" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:54">

        <expr_stmt pos:start="181:9" pos:end="181:54"><expr pos:start="181:9" pos:end="181:53"><name pos:start="181:9" pos:end="181:17">cpu_model</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <ternary pos:start="181:21" pos:end="181:53"><condition pos:start="181:21" pos:end="181:35"><expr pos:start="181:21" pos:end="181:33"><call pos:start="181:21" pos:end="181:33"><name pos:start="181:21" pos:end="181:31">kvm_enabled</name><argument_list pos:start="181:32" pos:end="181:33">()</argument_list></call></expr> ?</condition><then pos:start="181:37" pos:end="181:42"> <expr pos:start="181:37" pos:end="181:42"><literal type="string" pos:start="181:37" pos:end="181:42">"host"</literal></expr> </then><else pos:start="181:44" pos:end="181:53">: <expr pos:start="181:46" pos:end="181:53"><literal type="string" pos:start="181:46" pos:end="181:53">"POWER7"</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="185:5" pos:end="245:5">for <control pos:start="185:9" pos:end="185:34">(<init pos:start="185:10" pos:end="185:15"><expr pos:start="185:10" pos:end="185:14"><name pos:start="185:10" pos:end="185:10">i</name> <operator pos:start="185:12" pos:end="185:12">=</operator> <literal type="number" pos:start="185:14" pos:end="185:14">0</literal></expr>;</init> <condition pos:start="185:17" pos:end="185:29"><expr pos:start="185:17" pos:end="185:28"><name pos:start="185:17" pos:end="185:17">i</name> <operator pos:start="185:19" pos:end="185:19">&lt;</operator> <name pos:start="185:21" pos:end="185:28">smp_cpus</name></expr>;</condition> <incr pos:start="185:31" pos:end="185:33"><expr pos:start="185:31" pos:end="185:33"><name pos:start="185:31" pos:end="185:31">i</name><operator pos:start="185:32" pos:end="185:33">++</operator></expr></incr>)</control> <block pos:start="185:36" pos:end="245:5">{<block_content pos:start="187:9" pos:end="243:50">

        <expr_stmt pos:start="187:9" pos:end="187:38"><expr pos:start="187:9" pos:end="187:37"><name pos:start="187:9" pos:end="187:11">cpu</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:37"><name pos:start="187:15" pos:end="187:26">cpu_ppc_init</name><argument_list pos:start="187:27" pos:end="187:37">(<argument pos:start="187:28" pos:end="187:36"><expr pos:start="187:28" pos:end="187:36"><name pos:start="187:28" pos:end="187:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="195:9"><if pos:start="189:9" pos:end="195:9">if <condition pos:start="189:12" pos:end="189:24">(<expr pos:start="189:13" pos:end="189:23"><name pos:start="189:13" pos:end="189:15">cpu</name> <operator pos:start="189:17" pos:end="189:18">==</operator> <name pos:start="189:20" pos:end="189:23">NULL</name></expr>)</condition> <block pos:start="189:26" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:20">

            <expr_stmt pos:start="191:13" pos:end="191:71"><expr pos:start="191:13" pos:end="191:70"><call pos:start="191:13" pos:end="191:70"><name pos:start="191:13" pos:end="191:19">fprintf</name><argument_list pos:start="191:20" pos:end="191:70">(<argument pos:start="191:21" pos:end="191:26"><expr pos:start="191:21" pos:end="191:26"><name pos:start="191:21" pos:end="191:26">stderr</name></expr></argument>, <argument pos:start="191:29" pos:end="191:69"><expr pos:start="191:29" pos:end="191:69"><literal type="string" pos:start="191:29" pos:end="191:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:20"><expr pos:start="193:13" pos:end="193:19"><call pos:start="193:13" pos:end="193:19"><name pos:start="193:13" pos:end="193:16">exit</name><argument_list pos:start="193:17" pos:end="193:19">(<argument pos:start="193:18" pos:end="193:18"><expr pos:start="193:18" pos:end="193:18"><literal type="number" pos:start="193:18" pos:end="193:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:24"><expr pos:start="197:9" pos:end="197:23"><name pos:start="197:9" pos:end="197:11">env</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <operator pos:start="197:15" pos:end="197:15">&amp;</operator><name pos:start="197:16" pos:end="197:23"><name pos:start="197:16" pos:end="197:18">cpu</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="201:9" pos:end="201:48">/* Set time-base frequency to 512 MHz */</comment>

        <expr_stmt pos:start="203:9" pos:end="203:44"><expr pos:start="203:9" pos:end="203:43"><call pos:start="203:9" pos:end="203:43"><name pos:start="203:9" pos:end="203:23">cpu_ppc_tb_init</name><argument_list pos:start="203:24" pos:end="203:43">(<argument pos:start="203:25" pos:end="203:27"><expr pos:start="203:25" pos:end="203:27"><name pos:start="203:25" pos:end="203:27">env</name></expr></argument>, <argument pos:start="203:30" pos:end="203:42"><expr pos:start="203:30" pos:end="203:42"><name pos:start="203:30" pos:end="203:42">TIMEBASE_FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="207:9" pos:end="211:11">/* PAPR always has exception vectors in RAM not ROM. To ensure this,

         * MSR[IP] should never be set.

         */</comment>

        <expr_stmt pos:start="213:9" pos:end="213:35"><expr pos:start="213:9" pos:end="213:34"><name pos:start="213:9" pos:end="213:21"><name pos:start="213:9" pos:end="213:11">env</name><operator pos:start="213:12" pos:end="213:13">-&gt;</operator><name pos:start="213:14" pos:end="213:21">msr_mask</name></name> <operator pos:start="213:23" pos:end="213:24">&amp;=</operator> <operator pos:start="213:26" pos:end="213:26">~</operator><operator pos:start="213:27" pos:end="213:27">(</operator><literal type="number" pos:start="213:28" pos:end="213:28">1</literal> <operator pos:start="213:30" pos:end="213:31">&lt;&lt;</operator> <literal type="number" pos:start="213:33" pos:end="213:33">6</literal><operator pos:start="213:34" pos:end="213:34">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="217:9" pos:end="217:46">/* Tell KVM that we're in PAPR mode */</comment>

        <if_stmt pos:start="219:9" pos:end="223:9"><if pos:start="219:9" pos:end="223:9">if <condition pos:start="219:12" pos:end="219:26">(<expr pos:start="219:13" pos:end="219:25"><call pos:start="219:13" pos:end="219:25"><name pos:start="219:13" pos:end="219:23">kvm_enabled</name><argument_list pos:start="219:24" pos:end="219:25">()</argument_list></call></expr>)</condition> <block pos:start="219:28" pos:end="223:9">{<block_content pos:start="221:13" pos:end="221:33">

            <expr_stmt pos:start="221:13" pos:end="221:33"><expr pos:start="221:13" pos:end="221:32"><call pos:start="221:13" pos:end="221:32"><name pos:start="221:13" pos:end="221:27">kvmppc_set_papr</name><argument_list pos:start="221:28" pos:end="221:32">(<argument pos:start="221:29" pos:end="221:31"><expr pos:start="221:29" pos:end="221:31"><name pos:start="221:29" pos:end="221:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="227:9" pos:end="235:9"><if pos:start="227:9" pos:end="235:9">if <condition pos:start="227:12" pos:end="227:28">(<expr pos:start="227:13" pos:end="227:27"><name pos:start="227:13" pos:end="227:27"><name pos:start="227:13" pos:end="227:15">cpu</name><operator pos:start="227:16" pos:end="227:17">-&gt;</operator><name pos:start="227:18" pos:end="227:27">max_compat</name></name></expr>)</condition> <block pos:start="227:30" pos:end="235:9">{<block_content pos:start="229:13" pos:end="233:13">

            <if_stmt pos:start="229:13" pos:end="233:13"><if pos:start="229:13" pos:end="233:13">if <condition pos:start="229:16" pos:end="229:57">(<expr pos:start="229:17" pos:end="229:56"><call pos:start="229:17" pos:end="229:52"><name pos:start="229:17" pos:end="229:30">ppc_set_compat</name><argument_list pos:start="229:31" pos:end="229:52">(<argument pos:start="229:32" pos:end="229:34"><expr pos:start="229:32" pos:end="229:34"><name pos:start="229:32" pos:end="229:34">cpu</name></expr></argument>, <argument pos:start="229:37" pos:end="229:51"><expr pos:start="229:37" pos:end="229:51"><name pos:start="229:37" pos:end="229:51"><name pos:start="229:37" pos:end="229:39">cpu</name><operator pos:start="229:40" pos:end="229:41">-&gt;</operator><name pos:start="229:42" pos:end="229:51">max_compat</name></name></expr></argument>)</argument_list></call> <operator pos:start="229:54" pos:end="229:54">&lt;</operator> <literal type="number" pos:start="229:56" pos:end="229:56">0</literal></expr>)</condition> <block pos:start="229:59" pos:end="233:13">{<block_content pos:start="231:17" pos:end="231:24">

                <expr_stmt pos:start="231:17" pos:end="231:24"><expr pos:start="231:17" pos:end="231:23"><call pos:start="231:17" pos:end="231:23"><name pos:start="231:17" pos:end="231:20">exit</name><argument_list pos:start="231:21" pos:end="231:23">(<argument pos:start="231:22" pos:end="231:22"><expr pos:start="231:22" pos:end="231:22"><literal type="number" pos:start="231:22" pos:end="231:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="239:9" pos:end="239:40"><expr pos:start="239:9" pos:end="239:39"><call pos:start="239:9" pos:end="239:39"><name pos:start="239:9" pos:end="239:22">xics_cpu_setup</name><argument_list pos:start="239:23" pos:end="239:39">(<argument pos:start="239:24" pos:end="239:33"><expr pos:start="239:24" pos:end="239:33"><name pos:start="239:24" pos:end="239:33"><name pos:start="239:24" pos:end="239:28">spapr</name><operator pos:start="239:29" pos:end="239:30">-&gt;</operator><name pos:start="239:31" pos:end="239:33">icp</name></name></expr></argument>, <argument pos:start="239:36" pos:end="239:38"><expr pos:start="239:36" pos:end="239:38"><name pos:start="239:36" pos:end="239:38">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="243:9" pos:end="243:50"><expr pos:start="243:9" pos:end="243:49"><call pos:start="243:9" pos:end="243:49"><name pos:start="243:9" pos:end="243:27">qemu_register_reset</name><argument_list pos:start="243:28" pos:end="243:49">(<argument pos:start="243:29" pos:end="243:43"><expr pos:start="243:29" pos:end="243:43"><name pos:start="243:29" pos:end="243:43">spapr_cpu_reset</name></expr></argument>, <argument pos:start="243:46" pos:end="243:48"><expr pos:start="243:46" pos:end="243:48"><name pos:start="243:46" pos:end="243:48">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="249:5" pos:end="249:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:32"><expr pos:start="251:5" pos:end="251:31"><name pos:start="251:5" pos:end="251:20"><name pos:start="251:5" pos:end="251:9">spapr</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:20">ram_limit</name></name> <operator pos:start="251:22" pos:end="251:22">=</operator> <name pos:start="251:24" pos:end="251:31">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="255:59"><expr pos:start="253:5" pos:end="255:58"><call pos:start="253:5" pos:end="255:58"><name pos:start="253:5" pos:end="253:40">memory_region_allocate_system_memory</name><argument_list pos:start="253:41" pos:end="255:58">(<argument pos:start="253:42" pos:end="253:44"><expr pos:start="253:42" pos:end="253:44"><name pos:start="253:42" pos:end="253:44">ram</name></expr></argument>, <argument pos:start="253:47" pos:end="253:50"><expr pos:start="253:47" pos:end="253:50"><name pos:start="253:47" pos:end="253:50">NULL</name></expr></argument>, <argument pos:start="253:53" pos:end="253:67"><expr pos:start="253:53" pos:end="253:67"><literal type="string" pos:start="253:53" pos:end="253:67">"ppc_spapr.ram"</literal></expr></argument>,

                                         <argument pos:start="255:42" pos:end="255:57"><expr pos:start="255:42" pos:end="255:57"><name pos:start="255:42" pos:end="255:57"><name pos:start="255:42" pos:end="255:46">spapr</name><operator pos:start="255:47" pos:end="255:48">-&gt;</operator><name pos:start="255:49" pos:end="255:57">ram_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:48"><expr pos:start="257:5" pos:end="257:47"><call pos:start="257:5" pos:end="257:47"><name pos:start="257:5" pos:end="257:31">memory_region_add_subregion</name><argument_list pos:start="257:32" pos:end="257:47">(<argument pos:start="257:33" pos:end="257:38"><expr pos:start="257:33" pos:end="257:38"><name pos:start="257:33" pos:end="257:38">sysmem</name></expr></argument>, <argument pos:start="257:41" pos:end="257:41"><expr pos:start="257:41" pos:end="257:41"><literal type="number" pos:start="257:41" pos:end="257:41">0</literal></expr></argument>, <argument pos:start="257:44" pos:end="257:46"><expr pos:start="257:44" pos:end="257:46"><name pos:start="257:44" pos:end="257:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="261:5" pos:end="273:5"><if pos:start="261:5" pos:end="273:5">if <condition pos:start="261:8" pos:end="261:30">(<expr pos:start="261:9" pos:end="261:29"><name pos:start="261:9" pos:end="261:22">rma_alloc_size</name> <operator pos:start="261:24" pos:end="261:25">&amp;&amp;</operator> <name pos:start="261:27" pos:end="261:29">rma</name></expr>)</condition> <block pos:start="261:32" pos:end="273:5">{<block_content pos:start="263:9" pos:end="271:59">

        <expr_stmt pos:start="263:9" pos:end="263:44"><expr pos:start="263:9" pos:end="263:43"><name pos:start="263:9" pos:end="263:18">rma_region</name> <operator pos:start="263:20" pos:end="263:20">=</operator> <call pos:start="263:22" pos:end="263:43"><name pos:start="263:22" pos:end="263:26">g_new</name><argument_list pos:start="263:27" pos:end="263:43">(<argument pos:start="263:28" pos:end="263:39"><expr pos:start="263:28" pos:end="263:39"><name pos:start="263:28" pos:end="263:39">MemoryRegion</name></expr></argument>, <argument pos:start="263:42" pos:end="263:42"><expr pos:start="263:42" pos:end="263:42"><literal type="number" pos:start="263:42" pos:end="263:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="267:56"><expr pos:start="265:9" pos:end="267:55"><call pos:start="265:9" pos:end="267:55"><name pos:start="265:9" pos:end="265:34">memory_region_init_ram_ptr</name><argument_list pos:start="265:35" pos:end="267:55">(<argument pos:start="265:36" pos:end="265:45"><expr pos:start="265:36" pos:end="265:45"><name pos:start="265:36" pos:end="265:45">rma_region</name></expr></argument>, <argument pos:start="265:48" pos:end="265:51"><expr pos:start="265:48" pos:end="265:51"><name pos:start="265:48" pos:end="265:51">NULL</name></expr></argument>, <argument pos:start="265:54" pos:end="265:68"><expr pos:start="265:54" pos:end="265:68"><literal type="string" pos:start="265:54" pos:end="265:68">"ppc_spapr.rma"</literal></expr></argument>,

                                   <argument pos:start="267:36" pos:end="267:49"><expr pos:start="267:36" pos:end="267:49"><name pos:start="267:36" pos:end="267:49">rma_alloc_size</name></expr></argument>, <argument pos:start="267:52" pos:end="267:54"><expr pos:start="267:52" pos:end="267:54"><name pos:start="267:52" pos:end="267:54">rma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:48"><expr pos:start="269:9" pos:end="269:47"><call pos:start="269:9" pos:end="269:47"><name pos:start="269:9" pos:end="269:35">vmstate_register_ram_global</name><argument_list pos:start="269:36" pos:end="269:47">(<argument pos:start="269:37" pos:end="269:46"><expr pos:start="269:37" pos:end="269:46"><name pos:start="269:37" pos:end="269:46">rma_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:59"><expr pos:start="271:9" pos:end="271:58"><call pos:start="271:9" pos:end="271:58"><name pos:start="271:9" pos:end="271:35">memory_region_add_subregion</name><argument_list pos:start="271:36" pos:end="271:58">(<argument pos:start="271:37" pos:end="271:42"><expr pos:start="271:37" pos:end="271:42"><name pos:start="271:37" pos:end="271:42">sysmem</name></expr></argument>, <argument pos:start="271:45" pos:end="271:45"><expr pos:start="271:45" pos:end="271:45"><literal type="number" pos:start="271:45" pos:end="271:45">0</literal></expr></argument>, <argument pos:start="271:48" pos:end="271:57"><expr pos:start="271:48" pos:end="271:57"><name pos:start="271:48" pos:end="271:57">rma_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="277:5" pos:end="277:69"><expr pos:start="277:5" pos:end="277:68"><name pos:start="277:5" pos:end="277:12">filename</name> <operator pos:start="277:14" pos:end="277:14">=</operator> <call pos:start="277:16" pos:end="277:68"><name pos:start="277:16" pos:end="277:29">qemu_find_file</name><argument_list pos:start="277:30" pos:end="277:68">(<argument pos:start="277:31" pos:end="277:49"><expr pos:start="277:31" pos:end="277:49"><name pos:start="277:31" pos:end="277:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="277:52" pos:end="277:67"><expr pos:start="277:52" pos:end="277:67"><literal type="string" pos:start="277:52" pos:end="277:67">"spapr-rtas.bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="281:74"><expr pos:start="279:5" pos:end="281:73"><name pos:start="279:5" pos:end="279:20"><name pos:start="279:5" pos:end="279:9">spapr</name><operator pos:start="279:10" pos:end="279:11">-&gt;</operator><name pos:start="279:12" pos:end="279:20">rtas_size</name></name> <operator pos:start="279:22" pos:end="279:22">=</operator> <call pos:start="279:24" pos:end="281:73"><name pos:start="279:24" pos:end="279:42">load_image_targphys</name><argument_list pos:start="279:43" pos:end="281:73">(<argument pos:start="279:44" pos:end="279:51"><expr pos:start="279:44" pos:end="279:51"><name pos:start="279:44" pos:end="279:51">filename</name></expr></argument>, <argument pos:start="279:54" pos:end="279:69"><expr pos:start="279:54" pos:end="279:69"><name pos:start="279:54" pos:end="279:69"><name pos:start="279:54" pos:end="279:58">spapr</name><operator pos:start="279:59" pos:end="279:60">-&gt;</operator><name pos:start="279:61" pos:end="279:69">rtas_addr</name></name></expr></argument>,

                                           <argument pos:start="281:44" pos:end="281:72"><expr pos:start="281:44" pos:end="281:72"><name pos:start="281:44" pos:end="281:53">rtas_limit</name> <operator pos:start="281:55" pos:end="281:55">-</operator> <name pos:start="281:57" pos:end="281:72"><name pos:start="281:57" pos:end="281:61">spapr</name><operator pos:start="281:62" pos:end="281:63">-&gt;</operator><name pos:start="281:64" pos:end="281:72">rtas_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="283:5" pos:end="289:5"><if pos:start="283:5" pos:end="289:5">if <condition pos:start="283:8" pos:end="283:29">(<expr pos:start="283:9" pos:end="283:28"><name pos:start="283:9" pos:end="283:24"><name pos:start="283:9" pos:end="283:13">spapr</name><operator pos:start="283:14" pos:end="283:15">-&gt;</operator><name pos:start="283:16" pos:end="283:24">rtas_size</name></name> <operator pos:start="283:26" pos:end="283:26">&lt;</operator> <literal type="number" pos:start="283:28" pos:end="283:28">0</literal></expr>)</condition> <block pos:start="283:31" pos:end="289:5">{<block_content pos:start="285:9" pos:end="287:16">

        <expr_stmt pos:start="285:9" pos:end="285:68"><expr pos:start="285:9" pos:end="285:67"><call pos:start="285:9" pos:end="285:67"><name pos:start="285:9" pos:end="285:16">hw_error</name><argument_list pos:start="285:17" pos:end="285:67">(<argument pos:start="285:18" pos:end="285:56"><expr pos:start="285:18" pos:end="285:56"><literal type="string" pos:start="285:18" pos:end="285:56">"qemu: could not load LPAR rtas '%s'\n"</literal></expr></argument>, <argument pos:start="285:59" pos:end="285:66"><expr pos:start="285:59" pos:end="285:66"><name pos:start="285:59" pos:end="285:66">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:16"><expr pos:start="287:9" pos:end="287:15"><call pos:start="287:9" pos:end="287:15"><name pos:start="287:9" pos:end="287:12">exit</name><argument_list pos:start="287:13" pos:end="287:15">(<argument pos:start="287:14" pos:end="287:14"><expr pos:start="287:14" pos:end="287:14"><literal type="number" pos:start="287:14" pos:end="287:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="291:5" pos:end="299:5"><if pos:start="291:5" pos:end="299:5">if <condition pos:start="291:8" pos:end="291:41">(<expr pos:start="291:9" pos:end="291:40"><name pos:start="291:9" pos:end="291:24"><name pos:start="291:9" pos:end="291:13">spapr</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:24">rtas_size</name></name> <operator pos:start="291:26" pos:end="291:26">&gt;</operator> <name pos:start="291:28" pos:end="291:40">RTAS_MAX_SIZE</name></expr>)</condition> <block pos:start="291:43" pos:end="299:5">{<block_content pos:start="293:9" pos:end="297:16">

        <expr_stmt pos:start="293:9" pos:end="295:50"><expr pos:start="293:9" pos:end="295:49"><call pos:start="293:9" pos:end="295:49"><name pos:start="293:9" pos:end="293:16">hw_error</name><argument_list pos:start="293:17" pos:end="295:49">(<argument pos:start="293:18" pos:end="293:61"><expr pos:start="293:18" pos:end="293:61"><literal type="string" pos:start="293:18" pos:end="293:61">"RTAS too big ! 0x%lx bytes (max is 0x%x)\n"</literal></expr></argument>,

                 <argument pos:start="295:18" pos:end="295:33"><expr pos:start="295:18" pos:end="295:33"><name pos:start="295:18" pos:end="295:33"><name pos:start="295:18" pos:end="295:22">spapr</name><operator pos:start="295:23" pos:end="295:24">-&gt;</operator><name pos:start="295:25" pos:end="295:33">rtas_size</name></name></expr></argument>, <argument pos:start="295:36" pos:end="295:48"><expr pos:start="295:36" pos:end="295:48"><name pos:start="295:36" pos:end="295:48">RTAS_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:16"><expr pos:start="297:9" pos:end="297:15"><call pos:start="297:9" pos:end="297:15"><name pos:start="297:9" pos:end="297:12">exit</name><argument_list pos:start="297:13" pos:end="297:15">(<argument pos:start="297:14" pos:end="297:14"><expr pos:start="297:14" pos:end="297:14"><literal type="number" pos:start="297:14" pos:end="297:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:21"><expr pos:start="301:5" pos:end="301:20"><call pos:start="301:5" pos:end="301:20"><name pos:start="301:5" pos:end="301:10">g_free</name><argument_list pos:start="301:11" pos:end="301:20">(<argument pos:start="301:12" pos:end="301:19"><expr pos:start="301:12" pos:end="301:19"><name pos:start="301:12" pos:end="301:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="305:5" pos:end="305:43">/* Set up EPOW events infrastructure */</comment>

    <expr_stmt pos:start="307:5" pos:end="307:29"><expr pos:start="307:5" pos:end="307:28"><call pos:start="307:5" pos:end="307:28"><name pos:start="307:5" pos:end="307:21">spapr_events_init</name><argument_list pos:start="307:22" pos:end="307:28">(<argument pos:start="307:23" pos:end="307:27"><expr pos:start="307:23" pos:end="307:27"><name pos:start="307:23" pos:end="307:27">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="311:5" pos:end="311:24">/* Set up VIO bus */</comment>

    <expr_stmt pos:start="313:5" pos:end="313:42"><expr pos:start="313:5" pos:end="313:41"><name pos:start="313:5" pos:end="313:18"><name pos:start="313:5" pos:end="313:9">spapr</name><operator pos:start="313:10" pos:end="313:11">-&gt;</operator><name pos:start="313:12" pos:end="313:18">vio_bus</name></name> <operator pos:start="313:20" pos:end="313:20">=</operator> <call pos:start="313:22" pos:end="313:41"><name pos:start="313:22" pos:end="313:39">spapr_vio_bus_init</name><argument_list pos:start="313:40" pos:end="313:41">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="317:5" pos:end="325:5">for <control pos:start="317:9" pos:end="317:42">(<init pos:start="317:10" pos:end="317:15"><expr pos:start="317:10" pos:end="317:14"><name pos:start="317:10" pos:end="317:10">i</name> <operator pos:start="317:12" pos:end="317:12">=</operator> <literal type="number" pos:start="317:14" pos:end="317:14">0</literal></expr>;</init> <condition pos:start="317:17" pos:end="317:37"><expr pos:start="317:17" pos:end="317:36"><name pos:start="317:17" pos:end="317:17">i</name> <operator pos:start="317:19" pos:end="317:19">&lt;</operator> <name pos:start="317:21" pos:end="317:36">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="317:39" pos:end="317:41"><expr pos:start="317:39" pos:end="317:41"><name pos:start="317:39" pos:end="317:39">i</name><operator pos:start="317:40" pos:end="317:41">++</operator></expr></incr>)</control> <block pos:start="317:44" pos:end="325:5">{<block_content pos:start="319:9" pos:end="323:9">

        <if_stmt pos:start="319:9" pos:end="323:9"><if pos:start="319:9" pos:end="323:9">if <condition pos:start="319:12" pos:end="319:26">(<expr pos:start="319:13" pos:end="319:25"><name pos:start="319:13" pos:end="319:25"><name pos:start="319:13" pos:end="319:22">serial_hds</name><index pos:start="319:23" pos:end="319:25">[<expr pos:start="319:24" pos:end="319:24"><name pos:start="319:24" pos:end="319:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="319:28" pos:end="323:9">{<block_content pos:start="321:13" pos:end="321:60">

            <expr_stmt pos:start="321:13" pos:end="321:60"><expr pos:start="321:13" pos:end="321:59"><call pos:start="321:13" pos:end="321:59"><name pos:start="321:13" pos:end="321:28">spapr_vty_create</name><argument_list pos:start="321:29" pos:end="321:59">(<argument pos:start="321:30" pos:end="321:43"><expr pos:start="321:30" pos:end="321:43"><name pos:start="321:30" pos:end="321:43"><name pos:start="321:30" pos:end="321:34">spapr</name><operator pos:start="321:35" pos:end="321:36">-&gt;</operator><name pos:start="321:37" pos:end="321:43">vio_bus</name></name></expr></argument>, <argument pos:start="321:46" pos:end="321:58"><expr pos:start="321:46" pos:end="321:58"><name pos:start="321:46" pos:end="321:58"><name pos:start="321:46" pos:end="321:55">serial_hds</name><index pos:start="321:56" pos:end="321:58">[<expr pos:start="321:57" pos:end="321:57"><name pos:start="321:57" pos:end="321:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="329:5" pos:end="329:57">/* We always have at least the nvram device on VIO */</comment>

    <expr_stmt pos:start="331:5" pos:end="331:30"><expr pos:start="331:5" pos:end="331:29"><call pos:start="331:5" pos:end="331:29"><name pos:start="331:5" pos:end="331:22">spapr_create_nvram</name><argument_list pos:start="331:23" pos:end="331:29">(<argument pos:start="331:24" pos:end="331:28"><expr pos:start="331:24" pos:end="331:28"><name pos:start="331:24" pos:end="331:28">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="335:5" pos:end="335:20">/* Set up PCI */</comment>

    <expr_stmt pos:start="337:5" pos:end="337:52"><expr pos:start="337:5" pos:end="337:51"><call pos:start="337:5" pos:end="337:51"><name pos:start="337:5" pos:end="337:22">spapr_pci_msi_init</name><argument_list pos:start="337:23" pos:end="337:51">(<argument pos:start="337:24" pos:end="337:28"><expr pos:start="337:24" pos:end="337:28"><name pos:start="337:24" pos:end="337:28">spapr</name></expr></argument>, <argument pos:start="337:31" pos:end="337:50"><expr pos:start="337:31" pos:end="337:50"><name pos:start="337:31" pos:end="337:50">SPAPR_PCI_MSI_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:26"><expr pos:start="339:5" pos:end="339:25"><call pos:start="339:5" pos:end="339:25"><name pos:start="339:5" pos:end="339:23">spapr_pci_rtas_init</name><argument_list pos:start="339:24" pos:end="339:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:37"><expr pos:start="343:5" pos:end="343:36"><name pos:start="343:5" pos:end="343:7">phb</name> <operator pos:start="343:9" pos:end="343:9">=</operator> <call pos:start="343:11" pos:end="343:36"><name pos:start="343:11" pos:end="343:26">spapr_create_phb</name><argument_list pos:start="343:27" pos:end="343:36">(<argument pos:start="343:28" pos:end="343:32"><expr pos:start="343:28" pos:end="343:32"><name pos:start="343:28" pos:end="343:32">spapr</name></expr></argument>, <argument pos:start="343:35" pos:end="343:35"><expr pos:start="343:35" pos:end="343:35"><literal type="number" pos:start="343:35" pos:end="343:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="347:5" pos:end="371:5">for <control pos:start="347:9" pos:end="347:33">(<init pos:start="347:10" pos:end="347:15"><expr pos:start="347:10" pos:end="347:14"><name pos:start="347:10" pos:end="347:10">i</name> <operator pos:start="347:12" pos:end="347:12">=</operator> <literal type="number" pos:start="347:14" pos:end="347:14">0</literal></expr>;</init> <condition pos:start="347:17" pos:end="347:28"><expr pos:start="347:17" pos:end="347:27"><name pos:start="347:17" pos:end="347:17">i</name> <operator pos:start="347:19" pos:end="347:19">&lt;</operator> <name pos:start="347:21" pos:end="347:27">nb_nics</name></expr>;</condition> <incr pos:start="347:30" pos:end="347:32"><expr pos:start="347:30" pos:end="347:32"><name pos:start="347:30" pos:end="347:30">i</name><operator pos:start="347:31" pos:end="347:32">++</operator></expr></incr>)</control> <block pos:start="347:35" pos:end="371:5">{<block_content pos:start="349:9" pos:end="369:9">

        <decl_stmt pos:start="349:9" pos:end="349:35"><decl pos:start="349:9" pos:end="349:34"><type pos:start="349:9" pos:end="349:17"><name pos:start="349:9" pos:end="349:15">NICInfo</name> <modifier pos:start="349:17" pos:end="349:17">*</modifier></type><name pos:start="349:18" pos:end="349:19">nd</name> <init pos:start="349:21" pos:end="349:34">= <expr pos:start="349:23" pos:end="349:34"><operator pos:start="349:23" pos:end="349:23">&amp;</operator><name pos:start="349:24" pos:end="349:34"><name pos:start="349:24" pos:end="349:31">nd_table</name><index pos:start="349:32" pos:end="349:34">[<expr pos:start="349:33" pos:end="349:33"><name pos:start="349:33" pos:end="349:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="353:9" pos:end="357:9"><if pos:start="353:9" pos:end="357:9">if <condition pos:start="353:12" pos:end="353:23">(<expr pos:start="353:13" pos:end="353:22"><operator pos:start="353:13" pos:end="353:13">!</operator><name pos:start="353:14" pos:end="353:22"><name pos:start="353:14" pos:end="353:15">nd</name><operator pos:start="353:16" pos:end="353:17">-&gt;</operator><name pos:start="353:18" pos:end="353:22">model</name></name></expr>)</condition> <block pos:start="353:25" pos:end="357:9">{<block_content pos:start="355:13" pos:end="355:44">

            <expr_stmt pos:start="355:13" pos:end="355:44"><expr pos:start="355:13" pos:end="355:43"><name pos:start="355:13" pos:end="355:21"><name pos:start="355:13" pos:end="355:14">nd</name><operator pos:start="355:15" pos:end="355:16">-&gt;</operator><name pos:start="355:17" pos:end="355:21">model</name></name> <operator pos:start="355:23" pos:end="355:23">=</operator> <call pos:start="355:25" pos:end="355:43"><name pos:start="355:25" pos:end="355:32">g_strdup</name><argument_list pos:start="355:33" pos:end="355:43">(<argument pos:start="355:34" pos:end="355:42"><expr pos:start="355:34" pos:end="355:42"><literal type="string" pos:start="355:34" pos:end="355:42">"ibmveth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="361:9" pos:end="369:9"><if pos:start="361:9" pos:end="365:9">if <condition pos:start="361:12" pos:end="361:46">(<expr pos:start="361:13" pos:end="361:45"><call pos:start="361:13" pos:end="361:40"><name pos:start="361:13" pos:end="361:18">strcmp</name><argument_list pos:start="361:19" pos:end="361:40">(<argument pos:start="361:20" pos:end="361:28"><expr pos:start="361:20" pos:end="361:28"><name pos:start="361:20" pos:end="361:28"><name pos:start="361:20" pos:end="361:21">nd</name><operator pos:start="361:22" pos:end="361:23">-&gt;</operator><name pos:start="361:24" pos:end="361:28">model</name></name></expr></argument>, <argument pos:start="361:31" pos:end="361:39"><expr pos:start="361:31" pos:end="361:39"><literal type="string" pos:start="361:31" pos:end="361:39">"ibmveth"</literal></expr></argument>)</argument_list></call> <operator pos:start="361:42" pos:end="361:43">==</operator> <literal type="number" pos:start="361:45" pos:end="361:45">0</literal></expr>)</condition> <block pos:start="361:48" pos:end="365:9">{<block_content pos:start="363:13" pos:end="363:50">

            <expr_stmt pos:start="363:13" pos:end="363:50"><expr pos:start="363:13" pos:end="363:49"><call pos:start="363:13" pos:end="363:49"><name pos:start="363:13" pos:end="363:29">spapr_vlan_create</name><argument_list pos:start="363:30" pos:end="363:49">(<argument pos:start="363:31" pos:end="363:44"><expr pos:start="363:31" pos:end="363:44"><name pos:start="363:31" pos:end="363:44"><name pos:start="363:31" pos:end="363:35">spapr</name><operator pos:start="363:36" pos:end="363:37">-&gt;</operator><name pos:start="363:38" pos:end="363:44">vio_bus</name></name></expr></argument>, <argument pos:start="363:47" pos:end="363:48"><expr pos:start="363:47" pos:end="363:48"><name pos:start="363:47" pos:end="363:48">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="365:11" pos:end="369:9">else <block pos:start="365:16" pos:end="369:9">{<block_content pos:start="367:13" pos:end="367:73">

            <expr_stmt pos:start="367:13" pos:end="367:73"><expr pos:start="367:13" pos:end="367:72"><call pos:start="367:13" pos:end="367:72"><name pos:start="367:13" pos:end="367:31">pci_nic_init_nofail</name><argument_list pos:start="367:32" pos:end="367:72">(<argument pos:start="367:33" pos:end="367:44"><expr pos:start="367:33" pos:end="367:44"><operator pos:start="367:33" pos:end="367:33">&amp;</operator><name pos:start="367:34" pos:end="367:44"><name pos:start="367:34" pos:end="367:41">nd_table</name><index pos:start="367:42" pos:end="367:44">[<expr pos:start="367:43" pos:end="367:43"><name pos:start="367:43" pos:end="367:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="367:47" pos:end="367:54"><expr pos:start="367:47" pos:end="367:54"><name pos:start="367:47" pos:end="367:54"><name pos:start="367:47" pos:end="367:49">phb</name><operator pos:start="367:50" pos:end="367:51">-&gt;</operator><name pos:start="367:52" pos:end="367:54">bus</name></name></expr></argument>, <argument pos:start="367:57" pos:end="367:65"><expr pos:start="367:57" pos:end="367:65"><name pos:start="367:57" pos:end="367:65"><name pos:start="367:57" pos:end="367:58">nd</name><operator pos:start="367:59" pos:end="367:60">-&gt;</operator><name pos:start="367:61" pos:end="367:65">model</name></name></expr></argument>, <argument pos:start="367:68" pos:end="367:71"><expr pos:start="367:68" pos:end="367:71"><name pos:start="367:68" pos:end="367:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <for pos:start="375:5" pos:end="379:5">for <control pos:start="375:9" pos:end="375:53">(<init pos:start="375:10" pos:end="375:15"><expr pos:start="375:10" pos:end="375:14"><name pos:start="375:10" pos:end="375:10">i</name> <operator pos:start="375:12" pos:end="375:12">=</operator> <literal type="number" pos:start="375:14" pos:end="375:14">0</literal></expr>;</init> <condition pos:start="375:17" pos:end="375:48"><expr pos:start="375:17" pos:end="375:47"><name pos:start="375:17" pos:end="375:17">i</name> <operator pos:start="375:19" pos:end="375:20">&lt;=</operator> <call pos:start="375:22" pos:end="375:47"><name pos:start="375:22" pos:end="375:38">drive_get_max_bus</name><argument_list pos:start="375:39" pos:end="375:47">(<argument pos:start="375:40" pos:end="375:46"><expr pos:start="375:40" pos:end="375:46"><name pos:start="375:40" pos:end="375:46">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="375:50" pos:end="375:52"><expr pos:start="375:50" pos:end="375:52"><name pos:start="375:50" pos:end="375:50">i</name><operator pos:start="375:51" pos:end="375:52">++</operator></expr></incr>)</control> <block pos:start="375:55" pos:end="379:5">{<block_content pos:start="377:9" pos:end="377:43">

        <expr_stmt pos:start="377:9" pos:end="377:43"><expr pos:start="377:9" pos:end="377:42"><call pos:start="377:9" pos:end="377:42"><name pos:start="377:9" pos:end="377:26">spapr_vscsi_create</name><argument_list pos:start="377:27" pos:end="377:42">(<argument pos:start="377:28" pos:end="377:41"><expr pos:start="377:28" pos:end="377:41"><name pos:start="377:28" pos:end="377:41"><name pos:start="377:28" pos:end="377:32">spapr</name><operator pos:start="377:33" pos:end="377:34">-&gt;</operator><name pos:start="377:35" pos:end="377:41">vio_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="383:5" pos:end="383:18">/* Graphics */</comment>

    <if_stmt pos:start="385:5" pos:end="389:5"><if pos:start="385:5" pos:end="389:5">if <condition pos:start="385:8" pos:end="385:33">(<expr pos:start="385:9" pos:end="385:32"><call pos:start="385:9" pos:end="385:32"><name pos:start="385:9" pos:end="385:22">spapr_vga_init</name><argument_list pos:start="385:23" pos:end="385:32">(<argument pos:start="385:24" pos:end="385:31"><expr pos:start="385:24" pos:end="385:31"><name pos:start="385:24" pos:end="385:31"><name pos:start="385:24" pos:end="385:26">phb</name><operator pos:start="385:27" pos:end="385:28">-&gt;</operator><name pos:start="385:29" pos:end="385:31">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="385:35" pos:end="389:5">{<block_content pos:start="387:9" pos:end="387:35">

        <expr_stmt pos:start="387:9" pos:end="387:35"><expr pos:start="387:9" pos:end="387:34"><name pos:start="387:9" pos:end="387:27"><name pos:start="387:9" pos:end="387:13">spapr</name><operator pos:start="387:14" pos:end="387:15">-&gt;</operator><name pos:start="387:16" pos:end="387:27">has_graphics</name></name> <operator pos:start="387:29" pos:end="387:29">=</operator> <name pos:start="387:31" pos:end="387:34">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="393:5" pos:end="405:5"><if pos:start="393:5" pos:end="405:5">if <condition pos:start="393:8" pos:end="393:41">(<expr pos:start="393:9" pos:end="393:40"><call pos:start="393:9" pos:end="393:40"><name pos:start="393:9" pos:end="393:19">usb_enabled</name><argument_list pos:start="393:20" pos:end="393:40">(<argument pos:start="393:21" pos:end="393:39"><expr pos:start="393:21" pos:end="393:39"><name pos:start="393:21" pos:end="393:39"><name pos:start="393:21" pos:end="393:25">spapr</name><operator pos:start="393:26" pos:end="393:27">-&gt;</operator><name pos:start="393:28" pos:end="393:39">has_graphics</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="393:43" pos:end="405:5">{<block_content pos:start="395:9" pos:end="403:9">

        <expr_stmt pos:start="395:9" pos:end="395:52"><expr pos:start="395:9" pos:end="395:51"><call pos:start="395:9" pos:end="395:51"><name pos:start="395:9" pos:end="395:25">pci_create_simple</name><argument_list pos:start="395:26" pos:end="395:51">(<argument pos:start="395:27" pos:end="395:34"><expr pos:start="395:27" pos:end="395:34"><name pos:start="395:27" pos:end="395:34"><name pos:start="395:27" pos:end="395:29">phb</name><operator pos:start="395:30" pos:end="395:31">-&gt;</operator><name pos:start="395:32" pos:end="395:34">bus</name></name></expr></argument>, <argument pos:start="395:37" pos:end="395:38"><expr pos:start="395:37" pos:end="395:38"><operator pos:start="395:37" pos:end="395:37">-</operator><literal type="number" pos:start="395:38" pos:end="395:38">1</literal></expr></argument>, <argument pos:start="395:41" pos:end="395:50"><expr pos:start="395:41" pos:end="395:50"><literal type="string" pos:start="395:41" pos:end="395:50">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="397:9" pos:end="403:9"><if pos:start="397:9" pos:end="403:9">if <condition pos:start="397:12" pos:end="397:32">(<expr pos:start="397:13" pos:end="397:31"><name pos:start="397:13" pos:end="397:31"><name pos:start="397:13" pos:end="397:17">spapr</name><operator pos:start="397:18" pos:end="397:19">-&gt;</operator><name pos:start="397:20" pos:end="397:31">has_graphics</name></name></expr>)</condition> <block pos:start="397:34" pos:end="403:9">{<block_content pos:start="399:13" pos:end="401:38">

            <expr_stmt pos:start="399:13" pos:end="399:41"><expr pos:start="399:13" pos:end="399:40"><call pos:start="399:13" pos:end="399:40"><name pos:start="399:13" pos:end="399:28">usbdevice_create</name><argument_list pos:start="399:29" pos:end="399:40">(<argument pos:start="399:30" pos:end="399:39"><expr pos:start="399:30" pos:end="399:39"><literal type="string" pos:start="399:30" pos:end="399:39">"keyboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="401:13" pos:end="401:38"><expr pos:start="401:13" pos:end="401:37"><call pos:start="401:13" pos:end="401:37"><name pos:start="401:13" pos:end="401:28">usbdevice_create</name><argument_list pos:start="401:29" pos:end="401:37">(<argument pos:start="401:30" pos:end="401:36"><expr pos:start="401:30" pos:end="401:36"><literal type="string" pos:start="401:30" pos:end="401:36">"mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="409:5" pos:end="417:5"><if pos:start="409:5" pos:end="417:5">if <condition pos:start="409:8" pos:end="409:47">(<expr pos:start="409:9" pos:end="409:46"><name pos:start="409:9" pos:end="409:23"><name pos:start="409:9" pos:end="409:13">spapr</name><operator pos:start="409:14" pos:end="409:15">-&gt;</operator><name pos:start="409:16" pos:end="409:23">rma_size</name></name> <operator pos:start="409:25" pos:end="409:25">&lt;</operator> <operator pos:start="409:27" pos:end="409:27">(</operator><name pos:start="409:28" pos:end="409:39">MIN_RMA_SLOF</name> <operator pos:start="409:41" pos:end="409:42">&lt;&lt;</operator> <literal type="number" pos:start="409:44" pos:end="409:45">20</literal><operator pos:start="409:46" pos:end="409:46">)</operator></expr>)</condition> <block pos:start="409:49" pos:end="417:5">{<block_content pos:start="411:9" pos:end="415:16">

        <expr_stmt pos:start="411:9" pos:end="413:74"><expr pos:start="411:9" pos:end="413:73"><call pos:start="411:9" pos:end="413:73"><name pos:start="411:9" pos:end="411:15">fprintf</name><argument_list pos:start="411:16" pos:end="413:73">(<argument pos:start="411:17" pos:end="411:22"><expr pos:start="411:17" pos:end="411:22"><name pos:start="411:17" pos:end="411:22">stderr</name></expr></argument>, <argument pos:start="411:25" pos:end="413:58"><expr pos:start="411:25" pos:end="413:58"><literal type="string" pos:start="411:25" pos:end="411:66">"qemu: pSeries SLOF firmware requires &gt;= "</literal>

                <literal type="string" pos:start="413:17" pos:end="413:58">"%ldM guest RMA (Real Mode Area memory)\n"</literal></expr></argument>, <argument pos:start="413:61" pos:end="413:72"><expr pos:start="413:61" pos:end="413:72"><name pos:start="413:61" pos:end="413:72">MIN_RMA_SLOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="415:9" pos:end="415:16"><expr pos:start="415:9" pos:end="415:15"><call pos:start="415:9" pos:end="415:15"><name pos:start="415:9" pos:end="415:12">exit</name><argument_list pos:start="415:13" pos:end="415:15">(<argument pos:start="415:14" pos:end="415:14"><expr pos:start="415:14" pos:end="415:14"><literal type="number" pos:start="415:14" pos:end="415:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="421:5" pos:end="489:5"><if pos:start="421:5" pos:end="489:5">if <condition pos:start="421:8" pos:end="421:24">(<expr pos:start="421:9" pos:end="421:23"><name pos:start="421:9" pos:end="421:23">kernel_filename</name></expr>)</condition> <block pos:start="421:26" pos:end="489:5">{<block_content pos:start="423:9" pos:end="487:9">

        <decl_stmt pos:start="423:9" pos:end="423:29"><decl pos:start="423:9" pos:end="423:28"><type pos:start="423:9" pos:end="423:16"><name pos:start="423:9" pos:end="423:16">uint64_t</name></type> <name pos:start="423:18" pos:end="423:24">lowaddr</name> <init pos:start="423:26" pos:end="423:28">= <expr pos:start="423:28" pos:end="423:28"><literal type="number" pos:start="423:28" pos:end="423:28">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="427:9" pos:end="429:72"><expr pos:start="427:9" pos:end="429:71"><name pos:start="427:9" pos:end="427:19">kernel_size</name> <operator pos:start="427:21" pos:end="427:21">=</operator> <call pos:start="427:23" pos:end="429:71"><name pos:start="427:23" pos:end="427:30">load_elf</name><argument_list pos:start="427:31" pos:end="429:71">(<argument pos:start="427:32" pos:end="427:46"><expr pos:start="427:32" pos:end="427:46"><name pos:start="427:32" pos:end="427:46">kernel_filename</name></expr></argument>, <argument pos:start="427:49" pos:end="427:72"><expr pos:start="427:49" pos:end="427:72"><name pos:start="427:49" pos:end="427:72">translate_kernel_address</name></expr></argument>, <argument pos:start="427:75" pos:end="427:78"><expr pos:start="427:75" pos:end="427:78"><name pos:start="427:75" pos:end="427:78">NULL</name></expr></argument>,

                               <argument pos:start="429:32" pos:end="429:35"><expr pos:start="429:32" pos:end="429:35"><name pos:start="429:32" pos:end="429:35">NULL</name></expr></argument>, <argument pos:start="429:38" pos:end="429:45"><expr pos:start="429:38" pos:end="429:45"><operator pos:start="429:38" pos:end="429:38">&amp;</operator><name pos:start="429:39" pos:end="429:45">lowaddr</name></expr></argument>, <argument pos:start="429:48" pos:end="429:51"><expr pos:start="429:48" pos:end="429:51"><name pos:start="429:48" pos:end="429:51">NULL</name></expr></argument>, <argument pos:start="429:54" pos:end="429:54"><expr pos:start="429:54" pos:end="429:54"><literal type="number" pos:start="429:54" pos:end="429:54">1</literal></expr></argument>, <argument pos:start="429:57" pos:end="429:67"><expr pos:start="429:57" pos:end="429:67"><name pos:start="429:57" pos:end="429:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="429:70" pos:end="429:70"><expr pos:start="429:70" pos:end="429:70"><literal type="number" pos:start="429:70" pos:end="429:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="431:9" pos:end="441:9"><if pos:start="431:9" pos:end="441:9">if <condition pos:start="431:12" pos:end="431:49">(<expr pos:start="431:13" pos:end="431:48"><name pos:start="431:13" pos:end="431:23">kernel_size</name> <operator pos:start="431:25" pos:end="431:26">==</operator> <name pos:start="431:28" pos:end="431:48">ELF_LOAD_WRONG_ENDIAN</name></expr>)</condition> <block pos:start="431:51" pos:end="441:9">{<block_content pos:start="433:13" pos:end="439:40">

            <expr_stmt pos:start="433:13" pos:end="437:76"><expr pos:start="433:13" pos:end="437:75"><name pos:start="433:13" pos:end="433:23">kernel_size</name> <operator pos:start="433:25" pos:end="433:25">=</operator> <call pos:start="433:27" pos:end="437:75"><name pos:start="433:27" pos:end="433:34">load_elf</name><argument_list pos:start="433:35" pos:end="437:75">(<argument pos:start="433:36" pos:end="433:50"><expr pos:start="433:36" pos:end="433:50"><name pos:start="433:36" pos:end="433:50">kernel_filename</name></expr></argument>,

                                   <argument pos:start="435:36" pos:end="435:59"><expr pos:start="435:36" pos:end="435:59"><name pos:start="435:36" pos:end="435:59">translate_kernel_address</name></expr></argument>, <argument pos:start="435:62" pos:end="435:65"><expr pos:start="435:62" pos:end="435:65"><name pos:start="435:62" pos:end="435:65">NULL</name></expr></argument>,

                                   <argument pos:start="437:36" pos:end="437:39"><expr pos:start="437:36" pos:end="437:39"><name pos:start="437:36" pos:end="437:39">NULL</name></expr></argument>, <argument pos:start="437:42" pos:end="437:49"><expr pos:start="437:42" pos:end="437:49"><operator pos:start="437:42" pos:end="437:42">&amp;</operator><name pos:start="437:43" pos:end="437:49">lowaddr</name></expr></argument>, <argument pos:start="437:52" pos:end="437:55"><expr pos:start="437:52" pos:end="437:55"><name pos:start="437:52" pos:end="437:55">NULL</name></expr></argument>, <argument pos:start="437:58" pos:end="437:58"><expr pos:start="437:58" pos:end="437:58"><literal type="number" pos:start="437:58" pos:end="437:58">0</literal></expr></argument>, <argument pos:start="437:61" pos:end="437:71"><expr pos:start="437:61" pos:end="437:71"><name pos:start="437:61" pos:end="437:71">ELF_MACHINE</name></expr></argument>, <argument pos:start="437:74" pos:end="437:74"><expr pos:start="437:74" pos:end="437:74"><literal type="number" pos:start="437:74" pos:end="437:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="439:13" pos:end="439:40"><expr pos:start="439:13" pos:end="439:39"><name pos:start="439:13" pos:end="439:21">kernel_le</name> <operator pos:start="439:23" pos:end="439:23">=</operator> <name pos:start="439:25" pos:end="439:35">kernel_size</name> <operator pos:start="439:37" pos:end="439:37">&gt;</operator> <literal type="number" pos:start="439:39" pos:end="439:39">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="443:9" pos:end="451:9"><if pos:start="443:9" pos:end="451:9">if <condition pos:start="443:12" pos:end="443:28">(<expr pos:start="443:13" pos:end="443:27"><name pos:start="443:13" pos:end="443:23">kernel_size</name> <operator pos:start="443:25" pos:end="443:25">&lt;</operator> <literal type="number" pos:start="443:27" pos:end="443:27">0</literal></expr>)</condition> <block pos:start="443:30" pos:end="451:9">{<block_content pos:start="445:13" pos:end="449:20">

            <expr_stmt pos:start="445:13" pos:end="447:69"><expr pos:start="445:13" pos:end="447:68"><call pos:start="445:13" pos:end="447:68"><name pos:start="445:13" pos:end="445:19">fprintf</name><argument_list pos:start="445:20" pos:end="447:68">(<argument pos:start="445:21" pos:end="445:26"><expr pos:start="445:21" pos:end="445:26"><name pos:start="445:21" pos:end="445:26">stderr</name></expr></argument>, <argument pos:start="445:29" pos:end="445:58"><expr pos:start="445:29" pos:end="445:58"><literal type="string" pos:start="445:29" pos:end="445:58">"qemu: error loading %s: %s\n"</literal></expr></argument>,

                    <argument pos:start="447:21" pos:end="447:35"><expr pos:start="447:21" pos:end="447:35"><name pos:start="447:21" pos:end="447:35">kernel_filename</name></expr></argument>, <argument pos:start="447:38" pos:end="447:67"><expr pos:start="447:38" pos:end="447:67"><call pos:start="447:38" pos:end="447:67"><name pos:start="447:38" pos:end="447:54">load_elf_strerror</name><argument_list pos:start="447:55" pos:end="447:67">(<argument pos:start="447:56" pos:end="447:66"><expr pos:start="447:56" pos:end="447:66"><name pos:start="447:56" pos:end="447:66">kernel_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="449:13" pos:end="449:20"><expr pos:start="449:13" pos:end="449:19"><call pos:start="449:13" pos:end="449:19"><name pos:start="449:13" pos:end="449:16">exit</name><argument_list pos:start="449:17" pos:end="449:19">(<argument pos:start="449:18" pos:end="449:18"><expr pos:start="449:18" pos:end="449:18"><literal type="number" pos:start="449:18" pos:end="449:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="455:9" pos:end="455:25">/* load initrd */</comment>

        <if_stmt pos:start="457:9" pos:end="487:9"><if pos:start="457:9" pos:end="481:9">if <condition pos:start="457:12" pos:end="457:28">(<expr pos:start="457:13" pos:end="457:27"><name pos:start="457:13" pos:end="457:27">initrd_filename</name></expr>)</condition> <block pos:start="457:30" pos:end="481:9">{<block_content pos:start="465:13" pos:end="479:13">

            <comment type="block" pos:start="459:13" pos:end="463:15">/* Try to locate the initrd in the gap between the kernel

             * and the firmware. Add a bit of space just in case

             */</comment>

            <expr_stmt pos:start="465:13" pos:end="465:79"><expr pos:start="465:13" pos:end="465:78"><name pos:start="465:13" pos:end="465:23">initrd_base</name> <operator pos:start="465:25" pos:end="465:25">=</operator> <operator pos:start="465:27" pos:end="465:27">(</operator><name pos:start="465:28" pos:end="465:43">KERNEL_LOAD_ADDR</name> <operator pos:start="465:45" pos:end="465:45">+</operator> <name pos:start="465:47" pos:end="465:57">kernel_size</name> <operator pos:start="465:59" pos:end="465:59">+</operator> <literal type="number" pos:start="465:61" pos:end="465:67">0x1ffff</literal><operator pos:start="465:68" pos:end="465:68">)</operator> <operator pos:start="465:70" pos:end="465:70">&amp;</operator> <operator pos:start="465:72" pos:end="465:72">~</operator><literal type="number" pos:start="465:73" pos:end="465:78">0xffff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="467:13" pos:end="469:72"><expr pos:start="467:13" pos:end="469:71"><name pos:start="467:13" pos:end="467:23">initrd_size</name> <operator pos:start="467:25" pos:end="467:25">=</operator> <call pos:start="467:27" pos:end="469:71"><name pos:start="467:27" pos:end="467:45">load_image_targphys</name><argument_list pos:start="467:46" pos:end="469:71">(<argument pos:start="467:47" pos:end="467:61"><expr pos:start="467:47" pos:end="467:61"><name pos:start="467:47" pos:end="467:61">initrd_filename</name></expr></argument>, <argument pos:start="467:64" pos:end="467:74"><expr pos:start="467:64" pos:end="467:74"><name pos:start="467:64" pos:end="467:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="469:47" pos:end="469:70"><expr pos:start="469:47" pos:end="469:70"><name pos:start="469:47" pos:end="469:56">load_limit</name> <operator pos:start="469:58" pos:end="469:58">-</operator> <name pos:start="469:60" pos:end="469:70">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="471:13" pos:end="479:13"><if pos:start="471:13" pos:end="479:13">if <condition pos:start="471:16" pos:end="471:32">(<expr pos:start="471:17" pos:end="471:31"><name pos:start="471:17" pos:end="471:27">initrd_size</name> <operator pos:start="471:29" pos:end="471:29">&lt;</operator> <literal type="number" pos:start="471:31" pos:end="471:31">0</literal></expr>)</condition> <block pos:start="471:34" pos:end="479:13">{<block_content pos:start="473:17" pos:end="477:24">

                <expr_stmt pos:start="473:17" pos:end="475:41"><expr pos:start="473:17" pos:end="475:40"><call pos:start="473:17" pos:end="475:40"><name pos:start="473:17" pos:end="473:23">fprintf</name><argument_list pos:start="473:24" pos:end="475:40">(<argument pos:start="473:25" pos:end="473:30"><expr pos:start="473:25" pos:end="473:30"><name pos:start="473:25" pos:end="473:30">stderr</name></expr></argument>, <argument pos:start="473:33" pos:end="473:78"><expr pos:start="473:33" pos:end="473:78"><literal type="string" pos:start="473:33" pos:end="473:78">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="475:25" pos:end="475:39"><expr pos:start="475:25" pos:end="475:39"><name pos:start="475:25" pos:end="475:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="477:17" pos:end="477:24"><expr pos:start="477:17" pos:end="477:23"><call pos:start="477:17" pos:end="477:23"><name pos:start="477:17" pos:end="477:20">exit</name><argument_list pos:start="477:21" pos:end="477:23">(<argument pos:start="477:22" pos:end="477:22"><expr pos:start="477:22" pos:end="477:22"><literal type="number" pos:start="477:22" pos:end="477:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="481:11" pos:end="487:9">else <block pos:start="481:16" pos:end="487:9">{<block_content pos:start="483:13" pos:end="485:28">

            <expr_stmt pos:start="483:13" pos:end="483:28"><expr pos:start="483:13" pos:end="483:27"><name pos:start="483:13" pos:end="483:23">initrd_base</name> <operator pos:start="483:25" pos:end="483:25">=</operator> <literal type="number" pos:start="483:27" pos:end="483:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="485:13" pos:end="485:28"><expr pos:start="485:13" pos:end="485:27"><name pos:start="485:13" pos:end="485:23">initrd_size</name> <operator pos:start="485:25" pos:end="485:25">=</operator> <literal type="number" pos:start="485:27" pos:end="485:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="493:5" pos:end="497:5"><if pos:start="493:5" pos:end="497:5">if <condition pos:start="493:8" pos:end="493:26">(<expr pos:start="493:9" pos:end="493:25"><name pos:start="493:9" pos:end="493:17">bios_name</name> <operator pos:start="493:19" pos:end="493:20">==</operator> <name pos:start="493:22" pos:end="493:25">NULL</name></expr>)</condition> <block pos:start="493:28" pos:end="497:5">{<block_content pos:start="495:9" pos:end="495:33">

        <expr_stmt pos:start="495:9" pos:end="495:33"><expr pos:start="495:9" pos:end="495:32"><name pos:start="495:9" pos:end="495:17">bios_name</name> <operator pos:start="495:19" pos:end="495:19">=</operator> <name pos:start="495:21" pos:end="495:32">FW_FILE_NAME</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="499:5" pos:end="499:62"><expr pos:start="499:5" pos:end="499:61"><name pos:start="499:5" pos:end="499:12">filename</name> <operator pos:start="499:14" pos:end="499:14">=</operator> <call pos:start="499:16" pos:end="499:61"><name pos:start="499:16" pos:end="499:29">qemu_find_file</name><argument_list pos:start="499:30" pos:end="499:61">(<argument pos:start="499:31" pos:end="499:49"><expr pos:start="499:31" pos:end="499:49"><name pos:start="499:31" pos:end="499:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="499:52" pos:end="499:60"><expr pos:start="499:52" pos:end="499:60"><name pos:start="499:52" pos:end="499:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="501:5" pos:end="501:60"><expr pos:start="501:5" pos:end="501:59"><name pos:start="501:5" pos:end="501:11">fw_size</name> <operator pos:start="501:13" pos:end="501:13">=</operator> <call pos:start="501:15" pos:end="501:59"><name pos:start="501:15" pos:end="501:33">load_image_targphys</name><argument_list pos:start="501:34" pos:end="501:59">(<argument pos:start="501:35" pos:end="501:42"><expr pos:start="501:35" pos:end="501:42"><name pos:start="501:35" pos:end="501:42">filename</name></expr></argument>, <argument pos:start="501:45" pos:end="501:45"><expr pos:start="501:45" pos:end="501:45"><literal type="number" pos:start="501:45" pos:end="501:45">0</literal></expr></argument>, <argument pos:start="501:48" pos:end="501:58"><expr pos:start="501:48" pos:end="501:58"><name pos:start="501:48" pos:end="501:58">FW_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="503:5" pos:end="509:5"><if pos:start="503:5" pos:end="509:5">if <condition pos:start="503:8" pos:end="503:20">(<expr pos:start="503:9" pos:end="503:19"><name pos:start="503:9" pos:end="503:15">fw_size</name> <operator pos:start="503:17" pos:end="503:17">&lt;</operator> <literal type="number" pos:start="503:19" pos:end="503:19">0</literal></expr>)</condition> <block pos:start="503:22" pos:end="509:5">{<block_content pos:start="505:9" pos:end="507:16">

        <expr_stmt pos:start="505:9" pos:end="505:68"><expr pos:start="505:9" pos:end="505:67"><call pos:start="505:9" pos:end="505:67"><name pos:start="505:9" pos:end="505:16">hw_error</name><argument_list pos:start="505:17" pos:end="505:67">(<argument pos:start="505:18" pos:end="505:56"><expr pos:start="505:18" pos:end="505:56"><literal type="string" pos:start="505:18" pos:end="505:56">"qemu: could not load LPAR rtas '%s'\n"</literal></expr></argument>, <argument pos:start="505:59" pos:end="505:66"><expr pos:start="505:59" pos:end="505:66"><name pos:start="505:59" pos:end="505:66">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="507:9" pos:end="507:16"><expr pos:start="507:9" pos:end="507:15"><call pos:start="507:9" pos:end="507:15"><name pos:start="507:9" pos:end="507:12">exit</name><argument_list pos:start="507:13" pos:end="507:15">(<argument pos:start="507:14" pos:end="507:14"><expr pos:start="507:14" pos:end="507:14"><literal type="number" pos:start="507:14" pos:end="507:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="511:5" pos:end="511:21"><expr pos:start="511:5" pos:end="511:20"><call pos:start="511:5" pos:end="511:20"><name pos:start="511:5" pos:end="511:10">g_free</name><argument_list pos:start="511:11" pos:end="511:20">(<argument pos:start="511:12" pos:end="511:19"><expr pos:start="511:12" pos:end="511:19"><name pos:start="511:12" pos:end="511:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="515:5" pos:end="515:31"><expr pos:start="515:5" pos:end="515:30"><name pos:start="515:5" pos:end="515:22"><name pos:start="515:5" pos:end="515:9">spapr</name><operator pos:start="515:10" pos:end="515:11">-&gt;</operator><name pos:start="515:12" pos:end="515:22">entry_point</name></name> <operator pos:start="515:24" pos:end="515:24">=</operator> <literal type="number" pos:start="515:26" pos:end="515:30">0x100</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="519:5" pos:end="519:53"><expr pos:start="519:5" pos:end="519:52"><call pos:start="519:5" pos:end="519:52"><name pos:start="519:5" pos:end="519:20">vmstate_register</name><argument_list pos:start="519:21" pos:end="519:52">(<argument pos:start="519:22" pos:end="519:25"><expr pos:start="519:22" pos:end="519:25"><name pos:start="519:22" pos:end="519:25">NULL</name></expr></argument>, <argument pos:start="519:28" pos:end="519:28"><expr pos:start="519:28" pos:end="519:28"><literal type="number" pos:start="519:28" pos:end="519:28">0</literal></expr></argument>, <argument pos:start="519:31" pos:end="519:44"><expr pos:start="519:31" pos:end="519:44"><operator pos:start="519:31" pos:end="519:31">&amp;</operator><name pos:start="519:32" pos:end="519:44">vmstate_spapr</name></expr></argument>, <argument pos:start="519:47" pos:end="519:51"><expr pos:start="519:47" pos:end="519:51"><name pos:start="519:47" pos:end="519:51">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="523:55"><expr pos:start="521:5" pos:end="523:54"><call pos:start="521:5" pos:end="523:54"><name pos:start="521:5" pos:end="521:24">register_savevm_live</name><argument_list pos:start="521:25" pos:end="523:54">(<argument pos:start="521:26" pos:end="521:29"><expr pos:start="521:26" pos:end="521:29"><name pos:start="521:26" pos:end="521:29">NULL</name></expr></argument>, <argument pos:start="521:32" pos:end="521:43"><expr pos:start="521:32" pos:end="521:43"><literal type="string" pos:start="521:32" pos:end="521:43">"spapr/htab"</literal></expr></argument>, <argument pos:start="521:46" pos:end="521:47"><expr pos:start="521:46" pos:end="521:47"><operator pos:start="521:46" pos:end="521:46">-</operator><literal type="number" pos:start="521:47" pos:end="521:47">1</literal></expr></argument>, <argument pos:start="521:50" pos:end="521:50"><expr pos:start="521:50" pos:end="521:50"><literal type="number" pos:start="521:50" pos:end="521:50">1</literal></expr></argument>,

                         <argument pos:start="523:26" pos:end="523:46"><expr pos:start="523:26" pos:end="523:46"><operator pos:start="523:26" pos:end="523:26">&amp;</operator><name pos:start="523:27" pos:end="523:46">savevm_htab_handlers</name></expr></argument>, <argument pos:start="523:49" pos:end="523:53"><expr pos:start="523:49" pos:end="523:53"><name pos:start="523:49" pos:end="523:53">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="527:5" pos:end="527:33">/* Prepare the device tree */</comment>

    <expr_stmt pos:start="529:5" pos:end="535:61"><expr pos:start="529:5" pos:end="535:60"><name pos:start="529:5" pos:end="529:19"><name pos:start="529:5" pos:end="529:9">spapr</name><operator pos:start="529:10" pos:end="529:11">-&gt;</operator><name pos:start="529:12" pos:end="529:19">fdt_skel</name></name> <operator pos:start="529:21" pos:end="529:21">=</operator> <call pos:start="529:23" pos:end="535:60"><name pos:start="529:23" pos:end="529:43">spapr_create_fdt_skel</name><argument_list pos:start="529:44" pos:end="535:60">(<argument pos:start="529:45" pos:end="529:55"><expr pos:start="529:45" pos:end="529:55"><name pos:start="529:45" pos:end="529:55">initrd_base</name></expr></argument>, <argument pos:start="529:58" pos:end="529:68"><expr pos:start="529:58" pos:end="529:68"><name pos:start="529:58" pos:end="529:68">initrd_size</name></expr></argument>,

                                            <argument pos:start="531:45" pos:end="531:55"><expr pos:start="531:45" pos:end="531:55"><name pos:start="531:45" pos:end="531:55">kernel_size</name></expr></argument>, <argument pos:start="531:58" pos:end="531:66"><expr pos:start="531:58" pos:end="531:66"><name pos:start="531:58" pos:end="531:66">kernel_le</name></expr></argument>,

                                            <argument pos:start="533:45" pos:end="533:55"><expr pos:start="533:45" pos:end="533:55"><name pos:start="533:45" pos:end="533:55">boot_device</name></expr></argument>, <argument pos:start="533:58" pos:end="533:71"><expr pos:start="533:58" pos:end="533:71"><name pos:start="533:58" pos:end="533:71">kernel_cmdline</name></expr></argument>,

                                            <argument pos:start="535:45" pos:end="535:59"><expr pos:start="535:45" pos:end="535:59"><name pos:start="535:45" pos:end="535:59"><name pos:start="535:45" pos:end="535:49">spapr</name><operator pos:start="535:50" pos:end="535:51">-&gt;</operator><name pos:start="535:52" pos:end="535:59">epow_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="537:5" pos:end="537:36"><expr pos:start="537:5" pos:end="537:35"><call pos:start="537:5" pos:end="537:35"><name pos:start="537:5" pos:end="537:10">assert</name><argument_list pos:start="537:11" pos:end="537:35">(<argument pos:start="537:12" pos:end="537:34"><expr pos:start="537:12" pos:end="537:34"><name pos:start="537:12" pos:end="537:26"><name pos:start="537:12" pos:end="537:16">spapr</name><operator pos:start="537:17" pos:end="537:18">-&gt;</operator><name pos:start="537:19" pos:end="537:26">fdt_skel</name></name> <operator pos:start="537:28" pos:end="537:29">!=</operator> <name pos:start="537:31" pos:end="537:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
