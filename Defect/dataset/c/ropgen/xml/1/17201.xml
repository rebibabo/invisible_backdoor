<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17201.c" pos:tabs="8"><function pos:start="1:1" pos:end="38:1"><type pos:start="1:1" pos:end="1:19"><name pos:start="1:1" pos:end="1:17">AVFilterBufferRef</name> <modifier pos:start="1:19" pos:end="1:19">*</modifier></type><name pos:start="1:20" pos:end="1:38">avfilter_ref_buffer</name><parameter_list pos:start="1:39" pos:end="1:73">(<parameter pos:start="1:40" pos:end="1:61"><decl pos:start="1:40" pos:end="1:61"><type pos:start="1:40" pos:end="1:61"><name pos:start="1:40" pos:end="1:56">AVFilterBufferRef</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">ref</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">pmask</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="38:1">{<block_content pos:start="3:5" pos:end="37:15">
    <decl_stmt pos:start="3:5" pos:end="3:66"><decl pos:start="3:5" pos:end="3:65"><type pos:start="3:5" pos:end="3:23"><name pos:start="3:5" pos:end="3:21">AVFilterBufferRef</name> <modifier pos:start="3:23" pos:end="3:23">*</modifier></type><name pos:start="3:24" pos:end="3:26">ret</name> <init pos:start="3:28" pos:end="3:65">= <expr pos:start="3:30" pos:end="3:65"><call pos:start="3:30" pos:end="3:65"><name pos:start="3:30" pos:end="3:38">av_malloc</name><argument_list pos:start="3:39" pos:end="3:65">(<argument pos:start="3:40" pos:end="3:64"><expr pos:start="3:40" pos:end="3:64"><sizeof pos:start="3:40" pos:end="3:64">sizeof<argument_list pos:start="3:46" pos:end="3:64">(<argument pos:start="3:47" pos:end="3:63"><expr pos:start="3:47" pos:end="3:63"><name pos:start="3:47" pos:end="3:63">AVFilterBufferRef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="4:5" pos:end="5:20"><if pos:start="4:5" pos:end="5:20">if <condition pos:start="4:8" pos:end="4:13">(<expr pos:start="4:9" pos:end="4:12"><operator pos:start="4:9" pos:end="4:9">!</operator><name pos:start="4:10" pos:end="4:12">ret</name></expr>)</condition><block type="pseudo" pos:start="5:9" pos:end="5:20"><block_content pos:start="5:9" pos:end="5:20">
        <return pos:start="5:9" pos:end="5:20">return <expr pos:start="5:16" pos:end="5:19"><name pos:start="5:16" pos:end="5:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:16"><expr pos:start="6:5" pos:end="6:15"><operator pos:start="6:5" pos:end="6:5">*</operator><name pos:start="6:6" pos:end="6:8">ret</name> <operator pos:start="6:10" pos:end="6:10">=</operator> <operator pos:start="6:12" pos:end="6:12">*</operator><name pos:start="6:13" pos:end="6:15">ref</name></expr>;</expr_stmt>
    <if_stmt pos:start="7:5" pos:end="34:5"><if pos:start="7:5" pos:end="15:5">if <condition pos:start="7:8" pos:end="7:40">(<expr pos:start="7:9" pos:end="7:39"><name pos:start="7:9" pos:end="7:17"><name pos:start="7:9" pos:end="7:11">ref</name><operator pos:start="7:12" pos:end="7:13">-&gt;</operator><name pos:start="7:14" pos:end="7:17">type</name></name> <operator pos:start="7:19" pos:end="7:20">==</operator> <name pos:start="7:22" pos:end="7:39">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="7:42" pos:end="15:5">{<block_content pos:start="8:9" pos:end="14:39">
        <expr_stmt pos:start="8:9" pos:end="8:68"><expr pos:start="8:9" pos:end="8:67"><name pos:start="8:9" pos:end="8:18"><name pos:start="8:9" pos:end="8:11">ret</name><operator pos:start="8:12" pos:end="8:13">-&gt;</operator><name pos:start="8:14" pos:end="8:18">video</name></name> <operator pos:start="8:20" pos:end="8:20">=</operator> <call pos:start="8:22" pos:end="8:67"><name pos:start="8:22" pos:end="8:30">av_malloc</name><argument_list pos:start="8:31" pos:end="8:67">(<argument pos:start="8:32" pos:end="8:66"><expr pos:start="8:32" pos:end="8:66"><sizeof pos:start="8:32" pos:end="8:66">sizeof<argument_list pos:start="8:38" pos:end="8:66">(<argument pos:start="8:39" pos:end="8:65"><expr pos:start="8:39" pos:end="8:65"><name pos:start="8:39" pos:end="8:65">AVFilterBufferRefVideoProps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="9:9" pos:end="12:9"><if pos:start="9:9" pos:end="12:9">if <condition pos:start="9:12" pos:end="9:24">(<expr pos:start="9:13" pos:end="9:23"><operator pos:start="9:13" pos:end="9:13">!</operator><name pos:start="9:14" pos:end="9:23"><name pos:start="9:14" pos:end="9:16">ret</name><operator pos:start="9:17" pos:end="9:18">-&gt;</operator><name pos:start="9:19" pos:end="9:23">video</name></name></expr>)</condition> <block pos:start="9:26" pos:end="12:9">{<block_content pos:start="10:13" pos:end="11:24">
            <expr_stmt pos:start="10:13" pos:end="10:25"><expr pos:start="10:13" pos:end="10:24"><call pos:start="10:13" pos:end="10:24"><name pos:start="10:13" pos:end="10:19">av_free</name><argument_list pos:start="10:20" pos:end="10:24">(<argument pos:start="10:21" pos:end="10:23"><expr pos:start="10:21" pos:end="10:23"><name pos:start="10:21" pos:end="10:23">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="11:13" pos:end="11:24">return <expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="13:9" pos:end="13:49"><expr pos:start="13:9" pos:end="13:48"><call pos:start="13:9" pos:end="13:48"><name pos:start="13:9" pos:end="13:24">copy_video_props</name><argument_list pos:start="13:25" pos:end="13:48">(<argument pos:start="13:26" pos:end="13:35"><expr pos:start="13:26" pos:end="13:35"><name pos:start="13:26" pos:end="13:35"><name pos:start="13:26" pos:end="13:28">ret</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:35">video</name></name></expr></argument>, <argument pos:start="13:38" pos:end="13:47"><expr pos:start="13:38" pos:end="13:47"><name pos:start="13:38" pos:end="13:47"><name pos:start="13:38" pos:end="13:40">ref</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:47">video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="14:9" pos:end="14:39"><expr pos:start="14:9" pos:end="14:38"><name pos:start="14:9" pos:end="14:26"><name pos:start="14:9" pos:end="14:11">ret</name><operator pos:start="14:12" pos:end="14:13">-&gt;</operator><name pos:start="14:14" pos:end="14:26">extended_data</name></name> <operator pos:start="14:28" pos:end="14:28">=</operator> <name pos:start="14:30" pos:end="14:38"><name pos:start="14:30" pos:end="14:32">ret</name><operator pos:start="14:33" pos:end="14:34">-&gt;</operator><name pos:start="14:35" pos:end="14:38">data</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="15:7" pos:end="34:5">else if <condition pos:start="15:15" pos:end="15:47">(<expr pos:start="15:16" pos:end="15:46"><name pos:start="15:16" pos:end="15:24"><name pos:start="15:16" pos:end="15:18">ref</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:24">type</name></name> <operator pos:start="15:26" pos:end="15:27">==</operator> <name pos:start="15:29" pos:end="15:46">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="15:49" pos:end="34:5">{<block_content pos:start="16:9" pos:end="33:43">
        <expr_stmt pos:start="16:9" pos:end="16:68"><expr pos:start="16:9" pos:end="16:67"><name pos:start="16:9" pos:end="16:18"><name pos:start="16:9" pos:end="16:11">ret</name><operator pos:start="16:12" pos:end="16:13">-&gt;</operator><name pos:start="16:14" pos:end="16:18">audio</name></name> <operator pos:start="16:20" pos:end="16:20">=</operator> <call pos:start="16:22" pos:end="16:67"><name pos:start="16:22" pos:end="16:30">av_malloc</name><argument_list pos:start="16:31" pos:end="16:67">(<argument pos:start="16:32" pos:end="16:66"><expr pos:start="16:32" pos:end="16:66"><sizeof pos:start="16:32" pos:end="16:66">sizeof<argument_list pos:start="16:38" pos:end="16:66">(<argument pos:start="16:39" pos:end="16:65"><expr pos:start="16:39" pos:end="16:65"><name pos:start="16:39" pos:end="16:65">AVFilterBufferRefAudioProps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="17:9" pos:end="20:9"><if pos:start="17:9" pos:end="20:9">if <condition pos:start="17:12" pos:end="17:24">(<expr pos:start="17:13" pos:end="17:23"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:23"><name pos:start="17:14" pos:end="17:16">ret</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:23">audio</name></name></expr>)</condition> <block pos:start="17:26" pos:end="20:9">{<block_content pos:start="18:13" pos:end="19:24">
            <expr_stmt pos:start="18:13" pos:end="18:25"><expr pos:start="18:13" pos:end="18:24"><call pos:start="18:13" pos:end="18:24"><name pos:start="18:13" pos:end="18:19">av_free</name><argument_list pos:start="18:20" pos:end="18:24">(<argument pos:start="18:21" pos:end="18:23"><expr pos:start="18:21" pos:end="18:23"><name pos:start="18:21" pos:end="18:23">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="19:13" pos:end="19:24">return <expr pos:start="19:20" pos:end="19:23"><name pos:start="19:20" pos:end="19:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="21:9" pos:end="21:34"><expr pos:start="21:9" pos:end="21:33"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:19"><name pos:start="21:10" pos:end="21:12">ret</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:19">audio</name></name> <operator pos:start="21:21" pos:end="21:21">=</operator> <operator pos:start="21:23" pos:end="21:23">*</operator><name pos:start="21:24" pos:end="21:33"><name pos:start="21:24" pos:end="21:26">ref</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:33">audio</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="22:9" pos:end="33:43"><if pos:start="22:9" pos:end="32:9">if <condition pos:start="22:12" pos:end="22:66">(<expr pos:start="22:13" pos:end="22:65"><name pos:start="22:13" pos:end="22:30"><name pos:start="22:13" pos:end="22:15">ref</name><operator pos:start="22:16" pos:end="22:17">-&gt;</operator><name pos:start="22:18" pos:end="22:30">extended_data</name></name> <operator pos:start="22:32" pos:end="22:33">&amp;&amp;</operator> <name pos:start="22:35" pos:end="22:52"><name pos:start="22:35" pos:end="22:37">ref</name><operator pos:start="22:38" pos:end="22:39">-&gt;</operator><name pos:start="22:40" pos:end="22:52">extended_data</name></name> <operator pos:start="22:54" pos:end="22:55">!=</operator> <name pos:start="22:57" pos:end="22:65"><name pos:start="22:57" pos:end="22:59">ref</name><operator pos:start="22:60" pos:end="22:61">-&gt;</operator><name pos:start="22:62" pos:end="22:65">data</name></name></expr>)</condition> <block pos:start="22:68" pos:end="32:9">{<block_content pos:start="23:13" pos:end="31:62">
            <decl_stmt pos:start="23:13" pos:end="23:92"><decl pos:start="23:13" pos:end="23:91"><type pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">int</name></type> <name pos:start="23:17" pos:end="23:27">nb_channels</name> <init pos:start="23:29" pos:end="23:91">= <expr pos:start="23:31" pos:end="23:91"><call pos:start="23:31" pos:end="23:91"><name pos:start="23:31" pos:end="23:63">av_get_channel_layout_nb_channels</name><argument_list pos:start="23:64" pos:end="23:91">(<argument pos:start="23:65" pos:end="23:90"><expr pos:start="23:65" pos:end="23:90"><name pos:start="23:65" pos:end="23:90"><name pos:start="23:65" pos:end="23:67">ref</name><operator pos:start="23:68" pos:end="23:69">-&gt;</operator><name pos:start="23:70" pos:end="23:74">audio</name><operator pos:start="23:75" pos:end="23:76">-&gt;</operator><name pos:start="23:77" pos:end="23:90">channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="24:13" pos:end="29:13"><if pos:start="24:13" pos:end="29:13">if <condition pos:start="24:16" pos:end="25:63">(<expr pos:start="24:17" pos:end="25:62"><operator pos:start="24:17" pos:end="24:17">!</operator><operator pos:start="24:18" pos:end="24:18">(</operator><name pos:start="24:19" pos:end="24:36"><name pos:start="24:19" pos:end="24:21">ret</name><operator pos:start="24:22" pos:end="24:23">-&gt;</operator><name pos:start="24:24" pos:end="24:36">extended_data</name></name> <operator pos:start="24:38" pos:end="24:38">=</operator> <call pos:start="24:40" pos:end="25:61"><name pos:start="24:40" pos:end="24:48">av_malloc</name><argument_list pos:start="24:49" pos:end="25:61">(<argument pos:start="24:50" pos:end="25:60"><expr pos:start="24:50" pos:end="25:60"><sizeof pos:start="24:50" pos:end="24:76">sizeof<argument_list pos:start="24:56" pos:end="24:76">(<argument pos:start="24:57" pos:end="24:75"><expr pos:start="24:57" pos:end="24:75"><operator pos:start="24:57" pos:end="24:57">*</operator><name pos:start="24:58" pos:end="24:75"><name pos:start="24:58" pos:end="24:60">ret</name><operator pos:start="24:61" pos:end="24:62">-&gt;</operator><name pos:start="24:63" pos:end="24:75">extended_data</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="24:78" pos:end="24:78">*</operator>
                                                 <name pos:start="25:50" pos:end="25:60">nb_channels</name></expr></argument>)</argument_list></call><operator pos:start="25:62" pos:end="25:62">)</operator></expr>)</condition> <block pos:start="25:65" pos:end="29:13">{<block_content pos:start="26:17" pos:end="28:28">
                <expr_stmt pos:start="26:17" pos:end="26:38"><expr pos:start="26:17" pos:end="26:37"><call pos:start="26:17" pos:end="26:37"><name pos:start="26:17" pos:end="26:24">av_freep</name><argument_list pos:start="26:25" pos:end="26:37">(<argument pos:start="26:26" pos:end="26:36"><expr pos:start="26:26" pos:end="26:36"><operator pos:start="26:26" pos:end="26:26">&amp;</operator><name pos:start="26:27" pos:end="26:36"><name pos:start="26:27" pos:end="26:29">ret</name><operator pos:start="26:30" pos:end="26:31">-&gt;</operator><name pos:start="26:32" pos:end="26:36">audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="27:17" pos:end="27:31"><expr pos:start="27:17" pos:end="27:30"><call pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:24">av_freep</name><argument_list pos:start="27:25" pos:end="27:30">(<argument pos:start="27:26" pos:end="27:29"><expr pos:start="27:26" pos:end="27:29"><operator pos:start="27:26" pos:end="27:26">&amp;</operator><name pos:start="27:27" pos:end="27:29">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="28:17" pos:end="28:28">return <expr pos:start="28:24" pos:end="28:27"><name pos:start="28:24" pos:end="28:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="30:13" pos:end="31:62"><expr pos:start="30:13" pos:end="31:61"><call pos:start="30:13" pos:end="31:61"><name pos:start="30:13" pos:end="30:18">memcpy</name><argument_list pos:start="30:19" pos:end="31:61">(<argument pos:start="30:20" pos:end="30:37"><expr pos:start="30:20" pos:end="30:37"><name pos:start="30:20" pos:end="30:37"><name pos:start="30:20" pos:end="30:22">ret</name><operator pos:start="30:23" pos:end="30:24">-&gt;</operator><name pos:start="30:25" pos:end="30:37">extended_data</name></name></expr></argument>, <argument pos:start="30:40" pos:end="30:57"><expr pos:start="30:40" pos:end="30:57"><name pos:start="30:40" pos:end="30:57"><name pos:start="30:40" pos:end="30:42">ref</name><operator pos:start="30:43" pos:end="30:44">-&gt;</operator><name pos:start="30:45" pos:end="30:57">extended_data</name></name></expr></argument>,
                   <argument pos:start="31:20" pos:end="31:60"><expr pos:start="31:20" pos:end="31:60"><sizeof pos:start="31:20" pos:end="31:46">sizeof<argument_list pos:start="31:26" pos:end="31:46">(<argument pos:start="31:27" pos:end="31:45"><expr pos:start="31:27" pos:end="31:45"><operator pos:start="31:27" pos:end="31:27">*</operator><name pos:start="31:28" pos:end="31:45"><name pos:start="31:28" pos:end="31:30">ret</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:45">extended_data</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="31:48" pos:end="31:48">*</operator> <name pos:start="31:50" pos:end="31:60">nb_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="32:11" pos:end="33:43">else<block type="pseudo" pos:start="33:13" pos:end="33:43"><block_content pos:start="33:13" pos:end="33:43">
            <expr_stmt pos:start="33:13" pos:end="33:43"><expr pos:start="33:13" pos:end="33:42"><name pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:15">ret</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:30">extended_data</name></name> <operator pos:start="33:32" pos:end="33:32">=</operator> <name pos:start="33:34" pos:end="33:42"><name pos:start="33:34" pos:end="33:36">ret</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:42">data</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:7">ret</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:14">perms</name></name> <operator pos:start="35:16" pos:end="35:17">&amp;=</operator> <name pos:start="35:19" pos:end="35:23">pmask</name></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:26"><expr pos:start="36:5" pos:end="36:25"><name pos:start="36:5" pos:end="36:22"><name pos:start="36:5" pos:end="36:7">ret</name><operator pos:start="36:8" pos:end="36:9">-&gt;</operator><name pos:start="36:10" pos:end="36:12">buf</name><operator pos:start="36:13" pos:end="36:14">-&gt;</operator><name pos:start="36:15" pos:end="36:22">refcount</name></name> <operator pos:start="36:24" pos:end="36:25">++</operator></expr>;</expr_stmt>
    <return pos:start="37:5" pos:end="37:15">return <expr pos:start="37:12" pos:end="37:14"><name pos:start="37:12" pos:end="37:14">ret</name></expr>;</return>
</block_content>}</block></function></unit>
