<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12489.c" pos:tabs="8"><function pos:start="1:1" pos:end="242:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_nal_units</name><parameter_list pos:start="1:28" pos:end="1:75">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">HEVCContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:74"><decl pos:start="1:65" pos:end="1:74"><type pos:start="1:65" pos:end="1:74"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:74">length</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="242:1">{<block_content pos:start="5:5" pos:end="240:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:19">consumed</name></decl>, <decl pos:start="5:22" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:24">ret</name> <init pos:start="5:26" pos:end="5:28">= <expr pos:start="5:28" pos:end="5:28"><literal type="number" pos:start="5:28" pos:end="5:28">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:18"><expr pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:5">s</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:10">ref</name></name> <operator pos:start="9:12" pos:end="9:12">=</operator> <name pos:start="9:14" pos:end="9:17">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:25"><expr pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:15">last_eos</name></name> <operator pos:start="11:17" pos:end="11:17">=</operator> <name pos:start="11:19" pos:end="11:24"><name pos:start="11:19" pos:end="11:19">s</name><operator pos:start="11:20" pos:end="11:21">-&gt;</operator><name pos:start="11:22" pos:end="11:24">eos</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:15"><expr pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:10">eos</name></name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="19:39">/* split the input packet into NAL units, so we know the upper bound on the

     * number of slices in the frame */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:19"><expr pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:14">nb_nals</name></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="201:5">while <condition pos:start="23:11" pos:end="23:23">(<expr pos:start="23:12" pos:end="23:22"><name pos:start="23:12" pos:end="23:17">length</name> <operator pos:start="23:19" pos:end="23:20">&gt;=</operator> <literal type="number" pos:start="23:22" pos:end="23:22">4</literal></expr>)</condition> <block pos:start="23:25" pos:end="201:5">{<block_content pos:start="25:9" pos:end="199:27">

        <decl_stmt pos:start="25:9" pos:end="25:21"><decl pos:start="25:9" pos:end="25:20"><type pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:15">HEVCNAL</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:20">nal</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:31"><decl pos:start="27:9" pos:end="27:30"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:26">extract_length</name> <init pos:start="27:28" pos:end="27:30">= <expr pos:start="27:30" pos:end="27:30"><literal type="number" pos:start="27:30" pos:end="27:30">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="31:9" pos:end="81:9"><if pos:start="31:9" pos:end="54:9">if <condition pos:start="31:12" pos:end="31:24">(<expr pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:23">is_nalff</name></name></expr>)</condition> <block pos:start="31:26" pos:end="54:9">{<block_content pos:start="33:13" pos:end="52:13">

            <decl_stmt pos:start="33:13" pos:end="33:18"><decl pos:start="33:13" pos:end="33:17"><type pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">int</name></type> <name pos:start="33:17" pos:end="33:17">i</name></decl>;</decl_stmt>

            <for pos:start="35:13" pos:end="37:64">for <control pos:start="35:17" pos:end="35:52">(<init pos:start="35:18" pos:end="35:23"><expr pos:start="35:18" pos:end="35:22"><name pos:start="35:18" pos:end="35:18">i</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <literal type="number" pos:start="35:22" pos:end="35:22">0</literal></expr>;</init> <condition pos:start="35:25" pos:end="35:47"><expr pos:start="35:25" pos:end="35:46"><name pos:start="35:25" pos:end="35:25">i</name> <operator pos:start="35:27" pos:end="35:27">&lt;</operator> <name pos:start="35:29" pos:end="35:46"><name pos:start="35:29" pos:end="35:29">s</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:46">nal_length_size</name></name></expr>;</condition> <incr pos:start="35:49" pos:end="35:51"><expr pos:start="35:49" pos:end="35:51"><name pos:start="35:49" pos:end="35:49">i</name><operator pos:start="35:50" pos:end="35:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="37:17" pos:end="37:64"><block_content pos:start="37:17" pos:end="37:64">

                <expr_stmt pos:start="37:17" pos:end="37:64"><expr pos:start="37:17" pos:end="37:63"><name pos:start="37:17" pos:end="37:30">extract_length</name> <operator pos:start="37:32" pos:end="37:32">=</operator> <operator pos:start="37:34" pos:end="37:34">(</operator><name pos:start="37:35" pos:end="37:48">extract_length</name> <operator pos:start="37:50" pos:end="37:51">&lt;&lt;</operator> <literal type="number" pos:start="37:53" pos:end="37:53">8</literal><operator pos:start="37:54" pos:end="37:54">)</operator> <operator pos:start="37:56" pos:end="37:56">|</operator> <name pos:start="37:58" pos:end="37:63"><name pos:start="37:58" pos:end="37:60">buf</name><index pos:start="37:61" pos:end="37:63">[<expr pos:start="37:62" pos:end="37:62"><name pos:start="37:62" pos:end="37:62">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="39:13" pos:end="39:41"><expr pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:15">buf</name>    <operator pos:start="39:20" pos:end="39:21">+=</operator> <name pos:start="39:23" pos:end="39:40"><name pos:start="39:23" pos:end="39:23">s</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:40">nal_length_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:41"><expr pos:start="41:13" pos:end="41:40"><name pos:start="41:13" pos:end="41:18">length</name> <operator pos:start="41:20" pos:end="41:21">-=</operator> <name pos:start="41:23" pos:end="41:40"><name pos:start="41:23" pos:end="41:23">s</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:40">nal_length_size</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="45:13" pos:end="52:13"><if pos:start="45:13" pos:end="52:13">if <condition pos:start="45:16" pos:end="45:40">(<expr pos:start="45:17" pos:end="45:39"><name pos:start="45:17" pos:end="45:30">extract_length</name> <operator pos:start="45:32" pos:end="45:32">&gt;</operator> <name pos:start="45:34" pos:end="45:39">length</name></expr>)</condition> <block pos:start="45:42" pos:end="52:13">{<block_content pos:start="47:17" pos:end="49:42">

                <expr_stmt pos:start="47:17" pos:end="47:75"><expr pos:start="47:17" pos:end="47:74"><call pos:start="47:17" pos:end="47:74"><name pos:start="47:17" pos:end="47:22">av_log</name><argument_list pos:start="47:23" pos:end="47:74">(<argument pos:start="47:24" pos:end="47:31"><expr pos:start="47:24" pos:end="47:31"><name pos:start="47:24" pos:end="47:31"><name pos:start="47:24" pos:end="47:24">s</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:31">avctx</name></name></expr></argument>, <argument pos:start="47:34" pos:end="47:45"><expr pos:start="47:34" pos:end="47:45"><name pos:start="47:34" pos:end="47:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:48" pos:end="47:73"><expr pos:start="47:48" pos:end="47:73"><literal type="string" pos:start="47:48" pos:end="47:73">"Invalid NAL unit size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:42"><expr pos:start="49:17" pos:end="49:41"><name pos:start="49:17" pos:end="49:19">ret</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>


            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="54:11" pos:end="81:9">else <block pos:start="54:16" pos:end="81:9">{<block_content pos:start="58:13" pos:end="79:31">

            <comment type="block" pos:start="56:13" pos:end="56:35">/* search start code */</comment>

            <while pos:start="58:13" pos:end="73:13">while <condition pos:start="58:19" pos:end="58:61">(<expr pos:start="58:20" pos:end="58:60"><name pos:start="58:20" pos:end="58:25"><name pos:start="58:20" pos:end="58:22">buf</name><index pos:start="58:23" pos:end="58:25">[<expr pos:start="58:24" pos:end="58:24"><literal type="number" pos:start="58:24" pos:end="58:24">0</literal></expr>]</index></name> <operator pos:start="58:27" pos:end="58:28">!=</operator> <literal type="number" pos:start="58:30" pos:end="58:30">0</literal> <operator pos:start="58:32" pos:end="58:33">||</operator> <name pos:start="58:35" pos:end="58:40"><name pos:start="58:35" pos:end="58:37">buf</name><index pos:start="58:38" pos:end="58:40">[<expr pos:start="58:39" pos:end="58:39"><literal type="number" pos:start="58:39" pos:end="58:39">1</literal></expr>]</index></name> <operator pos:start="58:42" pos:end="58:43">!=</operator> <literal type="number" pos:start="58:45" pos:end="58:45">0</literal> <operator pos:start="58:47" pos:end="58:48">||</operator> <name pos:start="58:50" pos:end="58:55"><name pos:start="58:50" pos:end="58:52">buf</name><index pos:start="58:53" pos:end="58:55">[<expr pos:start="58:54" pos:end="58:54"><literal type="number" pos:start="58:54" pos:end="58:54">2</literal></expr>]</index></name> <operator pos:start="58:57" pos:end="58:58">!=</operator> <literal type="number" pos:start="58:60" pos:end="58:60">1</literal></expr>)</condition> <block pos:start="58:63" pos:end="73:13">{<block_content pos:start="60:17" pos:end="71:17">

                <expr_stmt pos:start="60:17" pos:end="60:22"><expr pos:start="60:17" pos:end="60:21"><operator pos:start="60:17" pos:end="60:18">++</operator><name pos:start="60:19" pos:end="60:21">buf</name></expr>;</expr_stmt>

                <expr_stmt pos:start="62:17" pos:end="62:25"><expr pos:start="62:17" pos:end="62:24"><operator pos:start="62:17" pos:end="62:18">--</operator><name pos:start="62:19" pos:end="62:24">length</name></expr>;</expr_stmt>

                <if_stmt pos:start="64:17" pos:end="71:17"><if pos:start="64:17" pos:end="71:17">if <condition pos:start="64:20" pos:end="64:31">(<expr pos:start="64:21" pos:end="64:30"><name pos:start="64:21" pos:end="64:26">length</name> <operator pos:start="64:28" pos:end="64:28">&lt;</operator> <literal type="number" pos:start="64:30" pos:end="64:30">4</literal></expr>)</condition> <block pos:start="64:33" pos:end="71:17">{<block_content pos:start="66:21" pos:end="68:46">

                    <expr_stmt pos:start="66:21" pos:end="66:80"><expr pos:start="66:21" pos:end="66:79"><call pos:start="66:21" pos:end="66:79"><name pos:start="66:21" pos:end="66:26">av_log</name><argument_list pos:start="66:27" pos:end="66:79">(<argument pos:start="66:28" pos:end="66:35"><expr pos:start="66:28" pos:end="66:35"><name pos:start="66:28" pos:end="66:35"><name pos:start="66:28" pos:end="66:28">s</name><operator pos:start="66:29" pos:end="66:30">-&gt;</operator><name pos:start="66:31" pos:end="66:35">avctx</name></name></expr></argument>, <argument pos:start="66:38" pos:end="66:49"><expr pos:start="66:38" pos:end="66:49"><name pos:start="66:38" pos:end="66:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="66:52" pos:end="66:78"><expr pos:start="66:52" pos:end="66:78"><literal type="string" pos:start="66:52" pos:end="66:78">"No start code is found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="68:21" pos:end="68:46"><expr pos:start="68:21" pos:end="68:45"><name pos:start="68:21" pos:end="68:23">ret</name> <operator pos:start="68:25" pos:end="68:25">=</operator> <name pos:start="68:27" pos:end="68:45">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>


                </block_content>}</block></if></if_stmt>

            </block_content>}</block></while>



            <expr_stmt pos:start="77:13" pos:end="77:31"><expr pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:15">buf</name>           <operator pos:start="77:27" pos:end="77:28">+=</operator> <literal type="number" pos:start="77:30" pos:end="77:30">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:31"><expr pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:18">length</name>        <operator pos:start="79:27" pos:end="79:28">-=</operator> <literal type="number" pos:start="79:30" pos:end="79:30">3</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="85:9" pos:end="87:36"><if pos:start="85:9" pos:end="87:36">if <condition pos:start="85:12" pos:end="85:25">(<expr pos:start="85:13" pos:end="85:24"><operator pos:start="85:13" pos:end="85:13">!</operator><name pos:start="85:14" pos:end="85:24"><name pos:start="85:14" pos:end="85:14">s</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:24">is_nalff</name></name></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:36"><block_content pos:start="87:13" pos:end="87:36">

            <expr_stmt pos:start="87:13" pos:end="87:36"><expr pos:start="87:13" pos:end="87:35"><name pos:start="87:13" pos:end="87:26">extract_length</name> <operator pos:start="87:28" pos:end="87:28">=</operator> <name pos:start="87:30" pos:end="87:35">length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="91:9" pos:end="147:9"><if pos:start="91:9" pos:end="147:9">if <condition pos:start="91:12" pos:end="91:47">(<expr pos:start="91:13" pos:end="91:46"><name pos:start="91:13" pos:end="91:29"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:29">nals_allocated</name></name> <operator pos:start="91:31" pos:end="91:31">&lt;</operator> <name pos:start="91:33" pos:end="91:42"><name pos:start="91:33" pos:end="91:33">s</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:42">nb_nals</name></name> <operator pos:start="91:44" pos:end="91:44">+</operator> <literal type="number" pos:start="91:46" pos:end="91:46">1</literal></expr>)</condition> <block pos:start="91:49" pos:end="147:9">{<block_content pos:start="93:13" pos:end="145:41">

            <decl_stmt pos:start="93:13" pos:end="93:49"><decl pos:start="93:13" pos:end="93:48"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:24">new_size</name> <init pos:start="93:26" pos:end="93:48">= <expr pos:start="93:28" pos:end="93:48"><name pos:start="93:28" pos:end="93:44"><name pos:start="93:28" pos:end="93:28">s</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:44">nals_allocated</name></name> <operator pos:start="93:46" pos:end="93:46">+</operator> <literal type="number" pos:start="93:48" pos:end="93:48">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="95:13" pos:end="95:78"><decl pos:start="95:13" pos:end="95:77"><type pos:start="95:13" pos:end="95:18"><name pos:start="95:13" pos:end="95:16">void</name> <modifier pos:start="95:18" pos:end="95:18">*</modifier></type><name pos:start="95:19" pos:end="95:21">tmp</name> <init pos:start="95:23" pos:end="95:77">= <expr pos:start="95:25" pos:end="95:77"><call pos:start="95:25" pos:end="95:77"><name pos:start="95:25" pos:end="95:40">av_realloc_array</name><argument_list pos:start="95:41" pos:end="95:77">(<argument pos:start="95:42" pos:end="95:48"><expr pos:start="95:42" pos:end="95:48"><name pos:start="95:42" pos:end="95:48"><name pos:start="95:42" pos:end="95:42">s</name><operator pos:start="95:43" pos:end="95:44">-&gt;</operator><name pos:start="95:45" pos:end="95:48">nals</name></name></expr></argument>, <argument pos:start="95:51" pos:end="95:58"><expr pos:start="95:51" pos:end="95:58"><name pos:start="95:51" pos:end="95:58">new_size</name></expr></argument>, <argument pos:start="95:61" pos:end="95:76"><expr pos:start="95:61" pos:end="95:76"><sizeof pos:start="95:61" pos:end="95:76">sizeof<argument_list pos:start="95:67" pos:end="95:76">(<argument pos:start="95:68" pos:end="95:75"><expr pos:start="95:68" pos:end="95:75"><operator pos:start="95:68" pos:end="95:68">*</operator><name pos:start="95:69" pos:end="95:75"><name pos:start="95:69" pos:end="95:69">s</name><operator pos:start="95:70" pos:end="95:71">-&gt;</operator><name pos:start="95:72" pos:end="95:75">nals</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:34"><expr pos:start="97:13" pos:end="97:33"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <call pos:start="97:19" pos:end="97:33"><name pos:start="97:19" pos:end="97:25">AVERROR</name><argument_list pos:start="97:26" pos:end="97:33">(<argument pos:start="97:27" pos:end="97:32"><expr pos:start="97:27" pos:end="97:32"><name pos:start="97:27" pos:end="97:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="102:13"><if pos:start="99:13" pos:end="102:13">if <condition pos:start="99:16" pos:end="99:21">(<expr pos:start="99:17" pos:end="99:20"><operator pos:start="99:17" pos:end="99:17">!</operator><name pos:start="99:18" pos:end="99:20">tmp</name></expr>)</condition> <block pos:start="99:23" pos:end="102:13">{<block_content>


            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="104:13" pos:end="104:26"><expr pos:start="104:13" pos:end="104:25"><name pos:start="104:13" pos:end="104:19"><name pos:start="104:13" pos:end="104:13">s</name><operator pos:start="104:14" pos:end="104:15">-&gt;</operator><name pos:start="104:16" pos:end="104:19">nals</name></name> <operator pos:start="104:21" pos:end="104:21">=</operator> <name pos:start="104:23" pos:end="104:25">tmp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="106:13" pos:end="108:70"><expr pos:start="106:13" pos:end="108:69"><call pos:start="106:13" pos:end="108:69"><name pos:start="106:13" pos:end="106:18">memset</name><argument_list pos:start="106:19" pos:end="108:69">(<argument pos:start="106:20" pos:end="106:46"><expr pos:start="106:20" pos:end="106:46"><name pos:start="106:20" pos:end="106:26"><name pos:start="106:20" pos:end="106:20">s</name><operator pos:start="106:21" pos:end="106:22">-&gt;</operator><name pos:start="106:23" pos:end="106:26">nals</name></name> <operator pos:start="106:28" pos:end="106:28">+</operator> <name pos:start="106:30" pos:end="106:46"><name pos:start="106:30" pos:end="106:30">s</name><operator pos:start="106:31" pos:end="106:32">-&gt;</operator><name pos:start="106:33" pos:end="106:46">nals_allocated</name></name></expr></argument>, <argument pos:start="106:49" pos:end="106:49"><expr pos:start="106:49" pos:end="106:49"><literal type="number" pos:start="106:49" pos:end="106:49">0</literal></expr></argument>,

                   <argument pos:start="108:20" pos:end="108:68"><expr pos:start="108:20" pos:end="108:68"><operator pos:start="108:20" pos:end="108:20">(</operator><name pos:start="108:21" pos:end="108:28">new_size</name> <operator pos:start="108:30" pos:end="108:30">-</operator> <name pos:start="108:32" pos:end="108:48"><name pos:start="108:32" pos:end="108:32">s</name><operator pos:start="108:33" pos:end="108:34">-&gt;</operator><name pos:start="108:35" pos:end="108:48">nals_allocated</name></name><operator pos:start="108:49" pos:end="108:49">)</operator> <operator pos:start="108:51" pos:end="108:51">*</operator> <sizeof pos:start="108:53" pos:end="108:68">sizeof<argument_list pos:start="108:59" pos:end="108:68">(<argument pos:start="108:60" pos:end="108:67"><expr pos:start="108:60" pos:end="108:67"><operator pos:start="108:60" pos:end="108:60">*</operator><name pos:start="108:61" pos:end="108:67"><name pos:start="108:61" pos:end="108:61">s</name><operator pos:start="108:62" pos:end="108:63">-&gt;</operator><name pos:start="108:64" pos:end="108:67">nals</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="112:13" pos:end="112:98"><expr pos:start="112:13" pos:end="112:97"><name pos:start="112:13" pos:end="112:15">tmp</name> <operator pos:start="112:17" pos:end="112:17">=</operator> <call pos:start="112:19" pos:end="112:97"><name pos:start="112:19" pos:end="112:34">av_realloc_array</name><argument_list pos:start="112:35" pos:end="112:97">(<argument pos:start="112:36" pos:end="112:55"><expr pos:start="112:36" pos:end="112:55"><name pos:start="112:36" pos:end="112:55"><name pos:start="112:36" pos:end="112:36">s</name><operator pos:start="112:37" pos:end="112:38">-&gt;</operator><name pos:start="112:39" pos:end="112:55">skipped_bytes_nal</name></name></expr></argument>, <argument pos:start="112:58" pos:end="112:65"><expr pos:start="112:58" pos:end="112:65"><name pos:start="112:58" pos:end="112:65">new_size</name></expr></argument>, <argument pos:start="112:68" pos:end="112:96"><expr pos:start="112:68" pos:end="112:96"><sizeof pos:start="112:68" pos:end="112:96">sizeof<argument_list pos:start="112:74" pos:end="112:96">(<argument pos:start="112:75" pos:end="112:95"><expr pos:start="112:75" pos:end="112:95"><operator pos:start="112:75" pos:end="112:75">*</operator><name pos:start="112:76" pos:end="112:95"><name pos:start="112:76" pos:end="112:76">s</name><operator pos:start="112:77" pos:end="112:78">-&gt;</operator><name pos:start="112:79" pos:end="112:95">skipped_bytes_nal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="114:13" pos:end="117:39"><if pos:start="114:13" pos:end="117:39">if <condition pos:start="114:16" pos:end="114:21">(<expr pos:start="114:17" pos:end="114:20"><operator pos:start="114:17" pos:end="114:17">!</operator><name pos:start="114:18" pos:end="114:20">tmp</name></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:39"><block_content pos:start="117:13" pos:end="117:39">


            <expr_stmt pos:start="117:13" pos:end="117:39"><expr pos:start="117:13" pos:end="117:38"><name pos:start="117:13" pos:end="117:32"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:32">skipped_bytes_nal</name></name> <operator pos:start="117:34" pos:end="117:34">=</operator> <name pos:start="117:36" pos:end="117:38">tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="121:13" pos:end="121:116"><expr pos:start="121:13" pos:end="121:115"><name pos:start="121:13" pos:end="121:15">tmp</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:115"><name pos:start="121:19" pos:end="121:34">av_realloc_array</name><argument_list pos:start="121:35" pos:end="121:115">(<argument pos:start="121:36" pos:end="121:64"><expr pos:start="121:36" pos:end="121:64"><name pos:start="121:36" pos:end="121:64"><name pos:start="121:36" pos:end="121:36">s</name><operator pos:start="121:37" pos:end="121:38">-&gt;</operator><name pos:start="121:39" pos:end="121:64">skipped_bytes_pos_size_nal</name></name></expr></argument>, <argument pos:start="121:67" pos:end="121:74"><expr pos:start="121:67" pos:end="121:74"><name pos:start="121:67" pos:end="121:74">new_size</name></expr></argument>, <argument pos:start="121:77" pos:end="121:114"><expr pos:start="121:77" pos:end="121:114"><sizeof pos:start="121:77" pos:end="121:114">sizeof<argument_list pos:start="121:83" pos:end="121:114">(<argument pos:start="121:84" pos:end="121:113"><expr pos:start="121:84" pos:end="121:113"><operator pos:start="121:84" pos:end="121:84">*</operator><name pos:start="121:85" pos:end="121:113"><name pos:start="121:85" pos:end="121:85">s</name><operator pos:start="121:86" pos:end="121:87">-&gt;</operator><name pos:start="121:88" pos:end="121:113">skipped_bytes_pos_size_nal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="123:13" pos:end="126:48"><if pos:start="123:13" pos:end="126:48">if <condition pos:start="123:16" pos:end="123:21">(<expr pos:start="123:17" pos:end="123:20"><operator pos:start="123:17" pos:end="123:17">!</operator><name pos:start="123:18" pos:end="123:20">tmp</name></expr>)</condition><block type="pseudo" pos:start="126:13" pos:end="126:48"><block_content pos:start="126:13" pos:end="126:48">


            <expr_stmt pos:start="126:13" pos:end="126:48"><expr pos:start="126:13" pos:end="126:47"><name pos:start="126:13" pos:end="126:41"><name pos:start="126:13" pos:end="126:13">s</name><operator pos:start="126:14" pos:end="126:15">-&gt;</operator><name pos:start="126:16" pos:end="126:41">skipped_bytes_pos_size_nal</name></name> <operator pos:start="126:43" pos:end="126:43">=</operator> <name pos:start="126:45" pos:end="126:47">tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="130:13" pos:end="130:106"><expr pos:start="130:13" pos:end="130:105"><name pos:start="130:13" pos:end="130:15">tmp</name> <operator pos:start="130:17" pos:end="130:17">=</operator> <call pos:start="130:19" pos:end="130:105"><name pos:start="130:19" pos:end="130:34">av_realloc_array</name><argument_list pos:start="130:35" pos:end="130:105">(<argument pos:start="130:36" pos:end="130:59"><expr pos:start="130:36" pos:end="130:59"><name pos:start="130:36" pos:end="130:59"><name pos:start="130:36" pos:end="130:36">s</name><operator pos:start="130:37" pos:end="130:38">-&gt;</operator><name pos:start="130:39" pos:end="130:59">skipped_bytes_pos_nal</name></name></expr></argument>, <argument pos:start="130:62" pos:end="130:69"><expr pos:start="130:62" pos:end="130:69"><name pos:start="130:62" pos:end="130:69">new_size</name></expr></argument>, <argument pos:start="130:72" pos:end="130:104"><expr pos:start="130:72" pos:end="130:104"><sizeof pos:start="130:72" pos:end="130:104">sizeof<argument_list pos:start="130:78" pos:end="130:104">(<argument pos:start="130:79" pos:end="130:103"><expr pos:start="130:79" pos:end="130:103"><operator pos:start="130:79" pos:end="130:79">*</operator><name pos:start="130:80" pos:end="130:103"><name pos:start="130:80" pos:end="130:80">s</name><operator pos:start="130:81" pos:end="130:82">-&gt;</operator><name pos:start="130:83" pos:end="130:103">skipped_bytes_pos_nal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="132:13" pos:end="135:43"><if pos:start="132:13" pos:end="135:43">if <condition pos:start="132:16" pos:end="132:21">(<expr pos:start="132:17" pos:end="132:20"><operator pos:start="132:17" pos:end="132:17">!</operator><name pos:start="132:18" pos:end="132:20">tmp</name></expr>)</condition><block type="pseudo" pos:start="135:13" pos:end="135:43"><block_content pos:start="135:13" pos:end="135:43">


            <expr_stmt pos:start="135:13" pos:end="135:43"><expr pos:start="135:13" pos:end="135:42"><name pos:start="135:13" pos:end="135:36"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:36">skipped_bytes_pos_nal</name></name> <operator pos:start="135:38" pos:end="135:38">=</operator> <name pos:start="135:40" pos:end="135:42">tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="139:13" pos:end="139:68"><expr pos:start="139:13" pos:end="139:67"><name pos:start="139:13" pos:end="139:60"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:41">skipped_bytes_pos_size_nal</name><index pos:start="139:42" pos:end="139:60">[<expr pos:start="139:43" pos:end="139:59"><name pos:start="139:43" pos:end="139:59"><name pos:start="139:43" pos:end="139:43">s</name><operator pos:start="139:44" pos:end="139:45">-&gt;</operator><name pos:start="139:46" pos:end="139:59">nals_allocated</name></name></expr>]</index></name> <operator pos:start="139:62" pos:end="139:62">=</operator> <literal type="number" pos:start="139:64" pos:end="139:67">1024</literal></expr>;</expr_stmt> <comment type="line" pos:start="139:70" pos:end="139:91">// initial buffer size</comment>

            <expr_stmt pos:start="141:13" pos:end="141:155"><expr pos:start="141:13" pos:end="141:154"><name pos:start="141:13" pos:end="141:55"><name pos:start="141:13" pos:end="141:13">s</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:36">skipped_bytes_pos_nal</name><index pos:start="141:37" pos:end="141:55">[<expr pos:start="141:38" pos:end="141:54"><name pos:start="141:38" pos:end="141:54"><name pos:start="141:38" pos:end="141:38">s</name><operator pos:start="141:39" pos:end="141:40">-&gt;</operator><name pos:start="141:41" pos:end="141:54">nals_allocated</name></name></expr>]</index></name> <operator pos:start="141:57" pos:end="141:57">=</operator> <call pos:start="141:59" pos:end="141:154"><name pos:start="141:59" pos:end="141:73">av_malloc_array</name><argument_list pos:start="141:74" pos:end="141:154">(<argument pos:start="141:75" pos:end="141:122"><expr pos:start="141:75" pos:end="141:122"><name pos:start="141:75" pos:end="141:122"><name pos:start="141:75" pos:end="141:75">s</name><operator pos:start="141:76" pos:end="141:77">-&gt;</operator><name pos:start="141:78" pos:end="141:103">skipped_bytes_pos_size_nal</name><index pos:start="141:104" pos:end="141:122">[<expr pos:start="141:105" pos:end="141:121"><name pos:start="141:105" pos:end="141:121"><name pos:start="141:105" pos:end="141:105">s</name><operator pos:start="141:106" pos:end="141:107">-&gt;</operator><name pos:start="141:108" pos:end="141:121">nals_allocated</name></name></expr>]</index></name></expr></argument>, <argument pos:start="141:125" pos:end="141:153"><expr pos:start="141:125" pos:end="141:153"><sizeof pos:start="141:125" pos:end="141:153">sizeof<argument_list pos:start="141:131" pos:end="141:153">(<argument pos:start="141:132" pos:end="141:152"><expr pos:start="141:132" pos:end="141:152"><operator pos:start="141:132" pos:end="141:132">*</operator><name pos:start="141:133" pos:end="141:152"><name pos:start="141:133" pos:end="141:133">s</name><operator pos:start="141:134" pos:end="141:135">-&gt;</operator><name pos:start="141:136" pos:end="141:152">skipped_bytes_pos</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="145:13" pos:end="145:41"><expr pos:start="145:13" pos:end="145:40"><name pos:start="145:13" pos:end="145:29"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:29">nals_allocated</name></name> <operator pos:start="145:31" pos:end="145:31">=</operator> <name pos:start="145:33" pos:end="145:40">new_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:78"><expr pos:start="149:9" pos:end="149:77"><name pos:start="149:9" pos:end="149:33"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:33">skipped_bytes_pos_size</name></name> <operator pos:start="149:35" pos:end="149:35">=</operator> <name pos:start="149:37" pos:end="149:77"><name pos:start="149:37" pos:end="149:37">s</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:65">skipped_bytes_pos_size_nal</name><index pos:start="149:66" pos:end="149:77">[<expr pos:start="149:67" pos:end="149:76"><name pos:start="149:67" pos:end="149:76"><name pos:start="149:67" pos:end="149:67">s</name><operator pos:start="149:68" pos:end="149:69">-&gt;</operator><name pos:start="149:70" pos:end="149:76">nb_nals</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:68"><expr pos:start="151:9" pos:end="151:67"><name pos:start="151:9" pos:end="151:28"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:28">skipped_bytes_pos</name></name> <operator pos:start="151:30" pos:end="151:30">=</operator> <name pos:start="151:32" pos:end="151:67"><name pos:start="151:32" pos:end="151:32">s</name><operator pos:start="151:33" pos:end="151:34">-&gt;</operator><name pos:start="151:35" pos:end="151:55">skipped_bytes_pos_nal</name><index pos:start="151:56" pos:end="151:67">[<expr pos:start="151:57" pos:end="151:66"><name pos:start="151:57" pos:end="151:66"><name pos:start="151:57" pos:end="151:57">s</name><operator pos:start="151:58" pos:end="151:59">-&gt;</operator><name pos:start="151:60" pos:end="151:66">nb_nals</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:35"><expr pos:start="153:9" pos:end="153:34"><name pos:start="153:9" pos:end="153:11">nal</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <operator pos:start="153:15" pos:end="153:15">&amp;</operator><name pos:start="153:16" pos:end="153:34"><name pos:start="153:16" pos:end="153:16">s</name><operator pos:start="153:17" pos:end="153:18">-&gt;</operator><name pos:start="153:19" pos:end="153:22">nals</name><index pos:start="153:23" pos:end="153:34">[<expr pos:start="153:24" pos:end="153:33"><name pos:start="153:24" pos:end="153:33"><name pos:start="153:24" pos:end="153:24">s</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:33">nb_nals</name></name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="157:9" pos:end="157:69"><expr pos:start="157:9" pos:end="157:68"><name pos:start="157:9" pos:end="157:16">consumed</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <call pos:start="157:20" pos:end="157:68"><name pos:start="157:20" pos:end="157:39">ff_hevc_extract_rbsp</name><argument_list pos:start="157:40" pos:end="157:68">(<argument pos:start="157:41" pos:end="157:41"><expr pos:start="157:41" pos:end="157:41"><name pos:start="157:41" pos:end="157:41">s</name></expr></argument>, <argument pos:start="157:44" pos:end="157:46"><expr pos:start="157:44" pos:end="157:46"><name pos:start="157:44" pos:end="157:46">buf</name></expr></argument>, <argument pos:start="157:49" pos:end="157:62"><expr pos:start="157:49" pos:end="157:62"><name pos:start="157:49" pos:end="157:62">extract_length</name></expr></argument>, <argument pos:start="157:65" pos:end="157:67"><expr pos:start="157:65" pos:end="157:67"><name pos:start="157:65" pos:end="157:67">nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="161:9" pos:end="161:60"><expr pos:start="161:9" pos:end="161:59"><name pos:start="161:9" pos:end="161:40"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:28">skipped_bytes_nal</name><index pos:start="161:29" pos:end="161:40">[<expr pos:start="161:30" pos:end="161:39"><name pos:start="161:30" pos:end="161:39"><name pos:start="161:30" pos:end="161:30">s</name><operator pos:start="161:31" pos:end="161:32">-&gt;</operator><name pos:start="161:33" pos:end="161:39">nb_nals</name></name></expr>]</index></name> <operator pos:start="161:42" pos:end="161:42">=</operator> <name pos:start="161:44" pos:end="161:59"><name pos:start="161:44" pos:end="161:44">s</name><operator pos:start="161:45" pos:end="161:46">-&gt;</operator><name pos:start="161:47" pos:end="161:59">skipped_bytes</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:78"><expr pos:start="163:9" pos:end="163:77"><name pos:start="163:9" pos:end="163:49"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:37">skipped_bytes_pos_size_nal</name><index pos:start="163:38" pos:end="163:49">[<expr pos:start="163:39" pos:end="163:48"><name pos:start="163:39" pos:end="163:48"><name pos:start="163:39" pos:end="163:39">s</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:48">nb_nals</name></name></expr>]</index></name> <operator pos:start="163:51" pos:end="163:51">=</operator> <name pos:start="163:53" pos:end="163:77"><name pos:start="163:53" pos:end="163:53">s</name><operator pos:start="163:54" pos:end="163:55">-&gt;</operator><name pos:start="163:56" pos:end="163:77">skipped_bytes_pos_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:70"><expr pos:start="165:9" pos:end="165:69"><name pos:start="165:9" pos:end="165:46"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:32">skipped_bytes_pos_nal</name><index pos:start="165:33" pos:end="165:46">[<expr pos:start="165:34" pos:end="165:45"><name pos:start="165:34" pos:end="165:43"><name pos:start="165:34" pos:end="165:34">s</name><operator pos:start="165:35" pos:end="165:36">-&gt;</operator><name pos:start="165:37" pos:end="165:43">nb_nals</name></name><operator pos:start="165:44" pos:end="165:45">++</operator></expr>]</index></name> <operator pos:start="165:48" pos:end="165:48">=</operator> <name pos:start="165:50" pos:end="165:69"><name pos:start="165:50" pos:end="165:50">s</name><operator pos:start="165:51" pos:end="165:52">-&gt;</operator><name pos:start="165:53" pos:end="165:69">skipped_bytes_pos</name></name></expr>;</expr_stmt>





        <if_stmt pos:start="171:9" pos:end="176:9"><if pos:start="171:9" pos:end="176:9">if <condition pos:start="171:12" pos:end="171:25">(<expr pos:start="171:13" pos:end="171:24"><name pos:start="171:13" pos:end="171:20">consumed</name> <operator pos:start="171:22" pos:end="171:22">&lt;</operator> <literal type="number" pos:start="171:24" pos:end="171:24">0</literal></expr>)</condition> <block pos:start="171:27" pos:end="176:9">{<block_content pos:start="173:13" pos:end="173:27">

            <expr_stmt pos:start="173:13" pos:end="173:27"><expr pos:start="173:13" pos:end="173:26"><name pos:start="173:13" pos:end="173:15">ret</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <name pos:start="173:19" pos:end="173:26">consumed</name></expr>;</expr_stmt>


        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="180:9" pos:end="180:67"><expr pos:start="180:9" pos:end="180:66"><name pos:start="180:9" pos:end="180:11">ret</name> <operator pos:start="180:13" pos:end="180:13">=</operator> <call pos:start="180:15" pos:end="180:66"><name pos:start="180:15" pos:end="180:28">init_get_bits8</name><argument_list pos:start="180:29" pos:end="180:66">(<argument pos:start="180:30" pos:end="180:43"><expr pos:start="180:30" pos:end="180:43"><operator pos:start="180:30" pos:end="180:30">&amp;</operator><name pos:start="180:31" pos:end="180:43"><name pos:start="180:31" pos:end="180:31">s</name><operator pos:start="180:32" pos:end="180:33">-&gt;</operator><name pos:start="180:34" pos:end="180:39">HEVClc</name><operator pos:start="180:40" pos:end="180:41">-&gt;</operator><name pos:start="180:42" pos:end="180:43">gb</name></name></expr></argument>, <argument pos:start="180:46" pos:end="180:54"><expr pos:start="180:46" pos:end="180:54"><name pos:start="180:46" pos:end="180:54"><name pos:start="180:46" pos:end="180:48">nal</name><operator pos:start="180:49" pos:end="180:50">-&gt;</operator><name pos:start="180:51" pos:end="180:54">data</name></name></expr></argument>, <argument pos:start="180:57" pos:end="180:65"><expr pos:start="180:57" pos:end="180:65"><name pos:start="180:57" pos:end="180:65"><name pos:start="180:57" pos:end="180:59">nal</name><operator pos:start="180:60" pos:end="180:61">-&gt;</operator><name pos:start="180:62" pos:end="180:65">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="182:9" pos:end="185:24"><if pos:start="182:9" pos:end="185:24">if <condition pos:start="182:12" pos:end="182:20">(<expr pos:start="182:13" pos:end="182:19"><name pos:start="182:13" pos:end="182:15">ret</name> <operator pos:start="182:17" pos:end="182:17">&lt;</operator> <literal type="number" pos:start="182:19" pos:end="182:19">0</literal></expr>)</condition><block type="pseudo" pos:start="185:9" pos:end="185:24"><block_content pos:start="185:9" pos:end="185:24">


        <expr_stmt pos:start="185:9" pos:end="185:24"><expr pos:start="185:9" pos:end="185:23"><call pos:start="185:9" pos:end="185:23"><name pos:start="185:9" pos:end="185:20">hls_nal_unit</name><argument_list pos:start="185:21" pos:end="185:23">(<argument pos:start="185:22" pos:end="185:22"><expr pos:start="185:22" pos:end="185:22"><name pos:start="185:22" pos:end="185:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="189:9" pos:end="193:23"><if pos:start="189:9" pos:end="193:23">if <condition pos:start="189:12" pos:end="191:44">(<expr pos:start="189:13" pos:end="191:43"><name pos:start="189:13" pos:end="189:28"><name pos:start="189:13" pos:end="189:13">s</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:28">nal_unit_type</name></name> <operator pos:start="189:30" pos:end="189:31">==</operator> <name pos:start="189:33" pos:end="189:43">NAL_EOB_NUT</name> <operator pos:start="189:45" pos:end="189:46">||</operator>

            <name pos:start="191:13" pos:end="191:28"><name pos:start="191:13" pos:end="191:13">s</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:28">nal_unit_type</name></name> <operator pos:start="191:30" pos:end="191:31">==</operator> <name pos:start="191:33" pos:end="191:43">NAL_EOS_NUT</name></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:23"><block_content pos:start="193:13" pos:end="193:23">

            <expr_stmt pos:start="193:13" pos:end="193:23"><expr pos:start="193:13" pos:end="193:22"><name pos:start="193:13" pos:end="193:18"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:18">eos</name></name> <operator pos:start="193:20" pos:end="193:20">=</operator> <literal type="number" pos:start="193:22" pos:end="193:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:27"><expr pos:start="197:9" pos:end="197:26"><name pos:start="197:9" pos:end="197:11">buf</name>    <operator pos:start="197:16" pos:end="197:17">+=</operator> <name pos:start="197:19" pos:end="197:26">consumed</name></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:27"><expr pos:start="199:9" pos:end="199:26"><name pos:start="199:9" pos:end="199:14">length</name> <operator pos:start="199:16" pos:end="199:17">-=</operator> <name pos:start="199:19" pos:end="199:26">consumed</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="205:5" pos:end="205:29">/* parse the NAL units */</comment>

    <for pos:start="207:5" pos:end="228:5">for <control pos:start="207:9" pos:end="207:36">(<init pos:start="207:10" pos:end="207:15"><expr pos:start="207:10" pos:end="207:14"><name pos:start="207:10" pos:end="207:10">i</name> <operator pos:start="207:12" pos:end="207:12">=</operator> <literal type="number" pos:start="207:14" pos:end="207:14">0</literal></expr>;</init> <condition pos:start="207:17" pos:end="207:31"><expr pos:start="207:17" pos:end="207:30"><name pos:start="207:17" pos:end="207:17">i</name> <operator pos:start="207:19" pos:end="207:19">&lt;</operator> <name pos:start="207:21" pos:end="207:30"><name pos:start="207:21" pos:end="207:21">s</name><operator pos:start="207:22" pos:end="207:23">-&gt;</operator><name pos:start="207:24" pos:end="207:30">nb_nals</name></name></expr>;</condition> <incr pos:start="207:33" pos:end="207:35"><expr pos:start="207:33" pos:end="207:35"><name pos:start="207:33" pos:end="207:33">i</name><operator pos:start="207:34" pos:end="207:35">++</operator></expr></incr>)</control> <block pos:start="207:38" pos:end="228:5">{<block_content pos:start="209:9" pos:end="226:9">

        <decl_stmt pos:start="209:9" pos:end="209:16"><decl pos:start="209:9" pos:end="209:15"><type pos:start="209:9" pos:end="209:11"><name pos:start="209:9" pos:end="209:11">int</name></type> <name pos:start="209:13" pos:end="209:15">ret</name></decl>;</decl_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:51"><expr pos:start="211:9" pos:end="211:50"><name pos:start="211:9" pos:end="211:24"><name pos:start="211:9" pos:end="211:9">s</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:24">skipped_bytes</name></name> <operator pos:start="211:26" pos:end="211:26">=</operator> <name pos:start="211:28" pos:end="211:50"><name pos:start="211:28" pos:end="211:28">s</name><operator pos:start="211:29" pos:end="211:30">-&gt;</operator><name pos:start="211:31" pos:end="211:47">skipped_bytes_nal</name><index pos:start="211:48" pos:end="211:50">[<expr pos:start="211:49" pos:end="211:49"><name pos:start="211:49" pos:end="211:49">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:59"><expr pos:start="213:9" pos:end="213:58"><name pos:start="213:9" pos:end="213:28"><name pos:start="213:9" pos:end="213:9">s</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:28">skipped_bytes_pos</name></name> <operator pos:start="213:30" pos:end="213:30">=</operator> <name pos:start="213:32" pos:end="213:58"><name pos:start="213:32" pos:end="213:32">s</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:55">skipped_bytes_pos_nal</name><index pos:start="213:56" pos:end="213:58">[<expr pos:start="213:57" pos:end="213:57"><name pos:start="213:57" pos:end="213:57">i</name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="217:9" pos:end="217:46"><expr pos:start="217:9" pos:end="217:45"><name pos:start="217:9" pos:end="217:11">ret</name> <operator pos:start="217:13" pos:end="217:13">=</operator> <call pos:start="217:15" pos:end="217:45"><name pos:start="217:15" pos:end="217:29">decode_nal_unit</name><argument_list pos:start="217:30" pos:end="217:45">(<argument pos:start="217:31" pos:end="217:31"><expr pos:start="217:31" pos:end="217:31"><name pos:start="217:31" pos:end="217:31">s</name></expr></argument>, <argument pos:start="217:34" pos:end="217:44"><expr pos:start="217:34" pos:end="217:44"><operator pos:start="217:34" pos:end="217:34">&amp;</operator><name pos:start="217:35" pos:end="217:44"><name pos:start="217:35" pos:end="217:35">s</name><operator pos:start="217:36" pos:end="217:37">-&gt;</operator><name pos:start="217:38" pos:end="217:41">nals</name><index pos:start="217:42" pos:end="217:44">[<expr pos:start="217:43" pos:end="217:43"><name pos:start="217:43" pos:end="217:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="219:9" pos:end="226:9"><if pos:start="219:9" pos:end="226:9">if <condition pos:start="219:12" pos:end="219:20">(<expr pos:start="219:13" pos:end="219:19"><name pos:start="219:13" pos:end="219:15">ret</name> <operator pos:start="219:17" pos:end="219:17">&lt;</operator> <literal type="number" pos:start="219:19" pos:end="219:19">0</literal></expr>)</condition> <block pos:start="219:22" pos:end="226:9">{<block_content pos:start="221:13" pos:end="223:55">

            <expr_stmt pos:start="221:13" pos:end="223:55"><expr pos:start="221:13" pos:end="223:54"><call pos:start="221:13" pos:end="223:54"><name pos:start="221:13" pos:end="221:18">av_log</name><argument_list pos:start="221:19" pos:end="223:54">(<argument pos:start="221:20" pos:end="221:27"><expr pos:start="221:20" pos:end="221:27"><name pos:start="221:20" pos:end="221:27"><name pos:start="221:20" pos:end="221:20">s</name><operator pos:start="221:21" pos:end="221:22">-&gt;</operator><name pos:start="221:23" pos:end="221:27">avctx</name></name></expr></argument>, <argument pos:start="221:30" pos:end="221:43"><expr pos:start="221:30" pos:end="221:43"><name pos:start="221:30" pos:end="221:43">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="223:20" pos:end="223:50"><expr pos:start="223:20" pos:end="223:50"><literal type="string" pos:start="223:20" pos:end="223:50">"Error parsing NAL unit #%d.\n"</literal></expr></argument>, <argument pos:start="223:53" pos:end="223:53"><expr pos:start="223:53" pos:end="223:53"><name pos:start="223:53" pos:end="223:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



<label pos:start="232:1" pos:end="232:5"><name pos:start="232:1" pos:end="232:4">fail</name>:</label>

    <if_stmt pos:start="234:5" pos:end="236:59"><if pos:start="234:5" pos:end="236:59">if <condition pos:start="234:8" pos:end="234:53">(<expr pos:start="234:9" pos:end="234:52"><name pos:start="234:9" pos:end="234:14"><name pos:start="234:9" pos:end="234:9">s</name><operator pos:start="234:10" pos:end="234:11">-&gt;</operator><name pos:start="234:12" pos:end="234:14">ref</name></name> <operator pos:start="234:16" pos:end="234:17">&amp;&amp;</operator> <name pos:start="234:19" pos:end="234:33"><name pos:start="234:19" pos:end="234:19">s</name><operator pos:start="234:20" pos:end="234:21">-&gt;</operator><name pos:start="234:22" pos:end="234:33">threads_type</name></name> <operator pos:start="234:35" pos:end="234:36">==</operator> <name pos:start="234:38" pos:end="234:52">FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo" pos:start="236:9" pos:end="236:59"><block_content pos:start="236:9" pos:end="236:59">

        <expr_stmt pos:start="236:9" pos:end="236:59"><expr pos:start="236:9" pos:end="236:58"><call pos:start="236:9" pos:end="236:58"><name pos:start="236:9" pos:end="236:33">ff_thread_report_progress</name><argument_list pos:start="236:34" pos:end="236:58">(<argument pos:start="236:35" pos:end="236:45"><expr pos:start="236:35" pos:end="236:45"><operator pos:start="236:35" pos:end="236:35">&amp;</operator><name pos:start="236:36" pos:end="236:45"><name pos:start="236:36" pos:end="236:36">s</name><operator pos:start="236:37" pos:end="236:38">-&gt;</operator><name pos:start="236:39" pos:end="236:41">ref</name><operator pos:start="236:42" pos:end="236:43">-&gt;</operator><name pos:start="236:44" pos:end="236:45">tf</name></name></expr></argument>, <argument pos:start="236:48" pos:end="236:54"><expr pos:start="236:48" pos:end="236:54"><name pos:start="236:48" pos:end="236:54">INT_MAX</name></expr></argument>, <argument pos:start="236:57" pos:end="236:57"><expr pos:start="236:57" pos:end="236:57"><literal type="number" pos:start="236:57" pos:end="236:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="240:5" pos:end="240:15">return <expr pos:start="240:12" pos:end="240:14"><name pos:start="240:12" pos:end="240:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
