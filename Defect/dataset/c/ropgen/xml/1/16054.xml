<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16054.c" pos:tabs="8"><function pos:start="1:1" pos:end="419:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">decode_init</name><parameter_list pos:start="1:23" pos:end="1:46">(<parameter pos:start="1:24" pos:end="1:45"><decl pos:start="1:24" pos:end="1:45"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:37">AVCodecContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type> <name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="419:1">{<block_content pos:start="5:5" pos:end="417:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">MPADecodeContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:14"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:19">init</name><init pos:start="7:20" pos:end="7:21">=<expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:15">k</name></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:64">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:64"><call pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:11">defined</name><argument_list pos:start="13:12" pos:end="13:30">(<argument pos:start="13:13" pos:end="13:29"><expr pos:start="13:13" pos:end="13:29"><name pos:start="13:13" pos:end="13:29">USE_HIGHPRECISION</name></expr></argument>)</argument_list></call> <operator pos:start="13:32" pos:end="13:33">&amp;&amp;</operator> <call pos:start="13:35" pos:end="13:64"><name pos:start="13:35" pos:end="13:41">defined</name><argument_list pos:start="13:42" pos:end="13:64">(<argument pos:start="13:43" pos:end="13:63"><expr pos:start="13:43" pos:end="13:63"><name pos:start="13:43" pos:end="13:63">CONFIG_AUDIO_NONSHORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:9">avctx</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:21">sample_fmt</name></name><operator pos:start="15:22" pos:end="15:22">=</operator> <name pos:start="15:24" pos:end="15:37">SAMPLE_FMT_S32</name></expr>;</expr_stmt>

<cpp:else pos:start="17:1" pos:end="17:5">#<cpp:directive pos:start="17:2" pos:end="17:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:37"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:9">avctx</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:21">sample_fmt</name></name><operator pos:start="19:22" pos:end="19:22">=</operator> <name pos:start="19:24" pos:end="19:37">SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>    

    

    <if_stmt pos:start="25:5" pos:end="31:54"><if pos:start="25:5" pos:end="27:56">if<condition pos:start="25:7" pos:end="25:44">(<expr pos:start="25:8" pos:end="25:43"><name pos:start="25:8" pos:end="25:28"><name pos:start="25:8" pos:end="25:12">avctx</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:28">antialias_algo</name></name> <operator pos:start="25:30" pos:end="25:31">!=</operator> <name pos:start="25:33" pos:end="25:43">FF_AA_FLOAT</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:56"><block_content pos:start="27:9" pos:end="27:56">

        <expr_stmt pos:start="27:9" pos:end="27:56"><expr pos:start="27:9" pos:end="27:55"><name pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:28">compute_antialias</name></name><operator pos:start="27:29" pos:end="27:29">=</operator> <name pos:start="27:31" pos:end="27:55">compute_antialias_integer</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="29:5" pos:end="31:54">else<block type="pseudo" pos:start="31:9" pos:end="31:54"><block_content pos:start="31:9" pos:end="31:54">

        <expr_stmt pos:start="31:9" pos:end="31:54"><expr pos:start="31:9" pos:end="31:53"><name pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:28">compute_antialias</name></name><operator pos:start="31:29" pos:end="31:29">=</operator> <name pos:start="31:31" pos:end="31:53">compute_antialias_float</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="35:5" pos:end="397:5"><if pos:start="35:5" pos:end="397:5">if <condition pos:start="35:8" pos:end="35:36">(<expr pos:start="35:9" pos:end="35:35"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:13">init</name> <operator pos:start="35:15" pos:end="35:16">&amp;&amp;</operator> <operator pos:start="35:18" pos:end="35:18">!</operator><name pos:start="35:19" pos:end="35:35"><name pos:start="35:19" pos:end="35:23">avctx</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:35">parse_only</name></name></expr>)</condition> <block pos:start="35:38" pos:end="397:5">{<block_content pos:start="39:9" pos:end="395:17">

        <comment type="block" pos:start="37:9" pos:end="37:47">/* scale factors table for layer 1/2 */</comment>

        <for pos:start="39:9" pos:end="51:9">for<control pos:start="39:12" pos:end="39:25">(<init pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:13">i</name><operator pos:start="39:14" pos:end="39:14">=</operator><literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</init><condition pos:start="39:17" pos:end="39:21"><expr pos:start="39:17" pos:end="39:20"><name pos:start="39:17" pos:end="39:17">i</name><operator pos:start="39:18" pos:end="39:18">&lt;</operator><literal type="number" pos:start="39:19" pos:end="39:20">64</literal></expr>;</condition><incr pos:start="39:22" pos:end="39:24"><expr pos:start="39:22" pos:end="39:24"><name pos:start="39:22" pos:end="39:22">i</name><operator pos:start="39:23" pos:end="39:24">++</operator></expr></incr>)</control> <block pos:start="39:27" pos:end="51:9">{<block_content pos:start="41:13" pos:end="49:58">

            <decl_stmt pos:start="41:13" pos:end="41:27"><decl pos:start="41:13" pos:end="41:21"><type pos:start="41:13" pos:end="41:15"><name pos:start="41:13" pos:end="41:15">int</name></type> <name pos:start="41:17" pos:end="41:21">shift</name></decl>, <decl pos:start="41:24" pos:end="41:26"><type ref="prev" pos:start="41:13" pos:end="41:15"/><name pos:start="41:24" pos:end="41:26">mod</name></decl>;</decl_stmt>

            <comment type="block" pos:start="43:13" pos:end="43:60">/* 1.0 (i = 3) is normalized to 2 ^ FRAC_BITS */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:28"><expr pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:17">shift</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:22">i</name> <operator pos:start="45:24" pos:end="45:24">/</operator> <literal type="number" pos:start="45:26" pos:end="45:26">3</literal><operator pos:start="45:27" pos:end="45:27">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:24"><expr pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:15">mod</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:19">i</name> <operator pos:start="47:21" pos:end="47:21">%</operator> <literal type="number" pos:start="47:23" pos:end="47:23">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:58"><expr pos:start="49:13" pos:end="49:57"><name pos:start="49:13" pos:end="49:36"><name pos:start="49:13" pos:end="49:33">scale_factor_modshift</name><index pos:start="49:34" pos:end="49:36">[<expr pos:start="49:35" pos:end="49:35"><name pos:start="49:35" pos:end="49:35">i</name></expr>]</index></name> <operator pos:start="49:38" pos:end="49:38">=</operator> <name pos:start="49:40" pos:end="49:42">mod</name> <operator pos:start="49:44" pos:end="49:44">|</operator> <operator pos:start="49:46" pos:end="49:46">(</operator><name pos:start="49:47" pos:end="49:51">shift</name> <operator pos:start="49:53" pos:end="49:54">&lt;&lt;</operator> <literal type="number" pos:start="49:56" pos:end="49:56">2</literal><operator pos:start="49:57" pos:end="49:57">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="55:9" pos:end="55:47">/* scale factor multiply for layer 1 */</comment>

        <for pos:start="57:9" pos:end="81:9">for<control pos:start="57:12" pos:end="57:25">(<init pos:start="57:13" pos:end="57:16"><expr pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:13">i</name><operator pos:start="57:14" pos:end="57:14">=</operator><literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>;</init><condition pos:start="57:17" pos:end="57:21"><expr pos:start="57:17" pos:end="57:20"><name pos:start="57:17" pos:end="57:17">i</name><operator pos:start="57:18" pos:end="57:18">&lt;</operator><literal type="number" pos:start="57:19" pos:end="57:20">15</literal></expr>;</condition><incr pos:start="57:22" pos:end="57:24"><expr pos:start="57:22" pos:end="57:24"><name pos:start="57:22" pos:end="57:22">i</name><operator pos:start="57:23" pos:end="57:24">++</operator></expr></incr>)</control> <block pos:start="57:27" pos:end="81:9">{<block_content pos:start="59:13" pos:end="79:45">

            <decl_stmt pos:start="59:13" pos:end="59:24"><decl pos:start="59:13" pos:end="59:17"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:17">n</name></decl>, <decl pos:start="59:20" pos:end="59:23"><type ref="prev" pos:start="59:13" pos:end="59:15"/><name pos:start="59:20" pos:end="59:23">norm</name></decl>;</decl_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:22"><expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:13">n</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:19">+</operator> <literal type="number" pos:start="61:21" pos:end="61:21">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:69"><expr pos:start="63:13" pos:end="63:68"><name pos:start="63:13" pos:end="63:16">norm</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <operator pos:start="63:20" pos:end="63:20">(</operator><operator pos:start="63:21" pos:end="63:21">(</operator><call pos:start="63:22" pos:end="63:33"><name pos:start="63:22" pos:end="63:30">int64_t_C</name><argument_list pos:start="63:31" pos:end="63:33">(<argument pos:start="63:32" pos:end="63:32"><expr pos:start="63:32" pos:end="63:32"><literal type="number" pos:start="63:32" pos:end="63:32">1</literal></expr></argument>)</argument_list></call> <operator pos:start="63:35" pos:end="63:36">&lt;&lt;</operator> <name pos:start="63:38" pos:end="63:38">n</name><operator pos:start="63:39" pos:end="63:39">)</operator> <operator pos:start="63:41" pos:end="63:41">*</operator> <name pos:start="63:43" pos:end="63:50">FRAC_ONE</name><operator pos:start="63:51" pos:end="63:51">)</operator> <operator pos:start="63:53" pos:end="63:53">/</operator> <operator pos:start="63:55" pos:end="63:55">(</operator><operator pos:start="63:56" pos:end="63:56">(</operator><literal type="number" pos:start="63:57" pos:end="63:57">1</literal> <operator pos:start="63:59" pos:end="63:60">&lt;&lt;</operator> <name pos:start="63:62" pos:end="63:62">n</name><operator pos:start="63:63" pos:end="63:63">)</operator> <operator pos:start="63:65" pos:end="63:65">-</operator> <literal type="number" pos:start="63:67" pos:end="63:67">1</literal><operator pos:start="63:68" pos:end="63:68">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:66"><expr pos:start="65:13" pos:end="65:65"><name pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:29">scale_factor_mult</name><index pos:start="65:30" pos:end="65:32">[<expr pos:start="65:31" pos:end="65:31"><name pos:start="65:31" pos:end="65:31">i</name></expr>]</index><index pos:start="65:33" pos:end="65:35">[<expr pos:start="65:34" pos:end="65:34"><literal type="number" pos:start="65:34" pos:end="65:34">0</literal></expr>]</index></name> <operator pos:start="65:37" pos:end="65:37">=</operator> <call pos:start="65:39" pos:end="65:65"><name pos:start="65:39" pos:end="65:42">MULL</name><argument_list pos:start="65:43" pos:end="65:65">(<argument pos:start="65:44" pos:end="65:58"><expr pos:start="65:44" pos:end="65:58"><call pos:start="65:44" pos:end="65:58"><name pos:start="65:44" pos:end="65:47">FIXR</name><argument_list pos:start="65:48" pos:end="65:58">(<argument pos:start="65:49" pos:end="65:57"><expr pos:start="65:49" pos:end="65:57"><literal type="number" pos:start="65:49" pos:end="65:51">1.0</literal> <operator pos:start="65:53" pos:end="65:53">*</operator> <literal type="number" pos:start="65:55" pos:end="65:57">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:61" pos:end="65:64"><expr pos:start="65:61" pos:end="65:64"><name pos:start="65:61" pos:end="65:64">norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:75"><expr pos:start="67:13" pos:end="67:74"><name pos:start="67:13" pos:end="67:35"><name pos:start="67:13" pos:end="67:29">scale_factor_mult</name><index pos:start="67:30" pos:end="67:32">[<expr pos:start="67:31" pos:end="67:31"><name pos:start="67:31" pos:end="67:31">i</name></expr>]</index><index pos:start="67:33" pos:end="67:35">[<expr pos:start="67:34" pos:end="67:34"><literal type="number" pos:start="67:34" pos:end="67:34">1</literal></expr>]</index></name> <operator pos:start="67:37" pos:end="67:37">=</operator> <call pos:start="67:39" pos:end="67:74"><name pos:start="67:39" pos:end="67:42">MULL</name><argument_list pos:start="67:43" pos:end="67:74">(<argument pos:start="67:44" pos:end="67:67"><expr pos:start="67:44" pos:end="67:67"><call pos:start="67:44" pos:end="67:67"><name pos:start="67:44" pos:end="67:47">FIXR</name><argument_list pos:start="67:48" pos:end="67:67">(<argument pos:start="67:49" pos:end="67:66"><expr pos:start="67:49" pos:end="67:66"><literal type="number" pos:start="67:49" pos:end="67:60">0.7937005259</literal> <operator pos:start="67:62" pos:end="67:62">*</operator> <literal type="number" pos:start="67:64" pos:end="67:66">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:70" pos:end="67:73"><expr pos:start="67:70" pos:end="67:73"><name pos:start="67:70" pos:end="67:73">norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:75"><expr pos:start="69:13" pos:end="69:74"><name pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:29">scale_factor_mult</name><index pos:start="69:30" pos:end="69:32">[<expr pos:start="69:31" pos:end="69:31"><name pos:start="69:31" pos:end="69:31">i</name></expr>]</index><index pos:start="69:33" pos:end="69:35">[<expr pos:start="69:34" pos:end="69:34"><literal type="number" pos:start="69:34" pos:end="69:34">2</literal></expr>]</index></name> <operator pos:start="69:37" pos:end="69:37">=</operator> <call pos:start="69:39" pos:end="69:74"><name pos:start="69:39" pos:end="69:42">MULL</name><argument_list pos:start="69:43" pos:end="69:74">(<argument pos:start="69:44" pos:end="69:67"><expr pos:start="69:44" pos:end="69:67"><call pos:start="69:44" pos:end="69:67"><name pos:start="69:44" pos:end="69:47">FIXR</name><argument_list pos:start="69:48" pos:end="69:67">(<argument pos:start="69:49" pos:end="69:66"><expr pos:start="69:49" pos:end="69:66"><literal type="number" pos:start="69:49" pos:end="69:60">0.6299605249</literal> <operator pos:start="69:62" pos:end="69:62">*</operator> <literal type="number" pos:start="69:64" pos:end="69:66">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:70" pos:end="69:73"><expr pos:start="69:70" pos:end="69:73"><name pos:start="69:70" pos:end="69:73">norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="79:45"><expr pos:start="71:13" pos:end="79:44"><call pos:start="71:13" pos:end="79:44"><name pos:start="71:13" pos:end="71:19">dprintf</name><argument_list pos:start="71:20" pos:end="79:44">(<argument pos:start="71:21" pos:end="71:46"><expr pos:start="71:21" pos:end="71:46"><literal type="string" pos:start="71:21" pos:end="71:46">"%d: norm=%x s=%x %x %x\n"</literal></expr></argument>,

                    <argument pos:start="73:21" pos:end="73:21"><expr pos:start="73:21" pos:end="73:21"><name pos:start="73:21" pos:end="73:21">i</name></expr></argument>, <argument pos:start="73:24" pos:end="73:27"><expr pos:start="73:24" pos:end="73:27"><name pos:start="73:24" pos:end="73:27">norm</name></expr></argument>, 

                    <argument pos:start="75:21" pos:end="75:43"><expr pos:start="75:21" pos:end="75:43"><name pos:start="75:21" pos:end="75:43"><name pos:start="75:21" pos:end="75:37">scale_factor_mult</name><index pos:start="75:38" pos:end="75:40">[<expr pos:start="75:39" pos:end="75:39"><name pos:start="75:39" pos:end="75:39">i</name></expr>]</index><index pos:start="75:41" pos:end="75:43">[<expr pos:start="75:42" pos:end="75:42"><literal type="number" pos:start="75:42" pos:end="75:42">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="77:21" pos:end="77:43"><expr pos:start="77:21" pos:end="77:43"><name pos:start="77:21" pos:end="77:43"><name pos:start="77:21" pos:end="77:37">scale_factor_mult</name><index pos:start="77:38" pos:end="77:40">[<expr pos:start="77:39" pos:end="77:39"><name pos:start="77:39" pos:end="77:39">i</name></expr>]</index><index pos:start="77:41" pos:end="77:43">[<expr pos:start="77:42" pos:end="77:42"><literal type="number" pos:start="77:42" pos:end="77:42">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="79:21" pos:end="79:43"><expr pos:start="79:21" pos:end="79:43"><name pos:start="79:21" pos:end="79:43"><name pos:start="79:21" pos:end="79:37">scale_factor_mult</name><index pos:start="79:38" pos:end="79:40">[<expr pos:start="79:39" pos:end="79:39"><name pos:start="79:39" pos:end="79:39">i</name></expr>]</index><index pos:start="79:41" pos:end="79:43">[<expr pos:start="79:42" pos:end="79:42"><literal type="number" pos:start="79:42" pos:end="79:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        

	<expr_stmt pos:start="85:9" pos:end="85:34"><expr pos:start="85:9" pos:end="85:33"><call pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:25">ff_mpa_synth_init</name><argument_list pos:start="85:26" pos:end="85:33">(<argument pos:start="85:27" pos:end="85:32"><expr pos:start="85:27" pos:end="85:32"><name pos:start="85:27" pos:end="85:32">window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <comment type="block" pos:start="89:9" pos:end="89:35">/* huffman decode tables */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:34"><expr pos:start="91:9" pos:end="91:33"><name pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:23">huff_code_table</name><index pos:start="91:24" pos:end="91:26">[<expr pos:start="91:25" pos:end="91:25"><literal type="number" pos:start="91:25" pos:end="91:25">0</literal></expr>]</index></name> <operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:33">NULL</name></expr>;</expr_stmt>

        <for pos:start="93:9" pos:end="131:9">for<control pos:start="93:12" pos:end="93:25">(<init pos:start="93:13" pos:end="93:16"><expr pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:13">i</name><operator pos:start="93:14" pos:end="93:14">=</operator><literal type="number" pos:start="93:15" pos:end="93:15">1</literal></expr>;</init><condition pos:start="93:17" pos:end="93:21"><expr pos:start="93:17" pos:end="93:20"><name pos:start="93:17" pos:end="93:17">i</name><operator pos:start="93:18" pos:end="93:18">&lt;</operator><literal type="number" pos:start="93:19" pos:end="93:20">16</literal></expr>;</condition><incr pos:start="93:22" pos:end="93:24"><expr pos:start="93:22" pos:end="93:24"><name pos:start="93:22" pos:end="93:22">i</name><operator pos:start="93:23" pos:end="93:24">++</operator></expr></incr>)</control> <block pos:start="93:27" pos:end="131:9">{<block_content pos:start="95:13" pos:end="129:44">

            <decl_stmt pos:start="95:13" pos:end="95:53"><decl pos:start="95:13" pos:end="95:52"><type pos:start="95:13" pos:end="95:29"><specifier pos:start="95:13" pos:end="95:17">const</specifier> <name pos:start="95:19" pos:end="95:27">HuffTable</name> <modifier pos:start="95:29" pos:end="95:29">*</modifier></type><name pos:start="95:30" pos:end="95:30">h</name> <init pos:start="95:32" pos:end="95:52">= <expr pos:start="95:34" pos:end="95:52"><operator pos:start="95:34" pos:end="95:34">&amp;</operator><name pos:start="95:35" pos:end="95:52"><name pos:start="95:35" pos:end="95:49">mpa_huff_tables</name><index pos:start="95:50" pos:end="95:52">[<expr pos:start="95:51" pos:end="95:51"><name pos:start="95:51" pos:end="95:51">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	    <decl_stmt pos:start="97:13" pos:end="97:28"><decl pos:start="97:13" pos:end="97:21"><type pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">int</name></type> <name pos:start="97:17" pos:end="97:21">xsize</name></decl>, <decl pos:start="97:24" pos:end="97:24"><type ref="prev" pos:start="97:13" pos:end="97:15"/><name pos:start="97:24" pos:end="97:24">x</name></decl>, <decl pos:start="97:27" pos:end="97:27"><type ref="prev" pos:start="97:13" pos:end="97:15"/><name pos:start="97:27" pos:end="97:27">y</name></decl>;</decl_stmt>

            <decl_stmt pos:start="99:13" pos:end="99:27"><decl pos:start="99:13" pos:end="99:26"><type pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:20">unsigned</name> <name pos:start="99:22" pos:end="99:24">int</name></type> <name pos:start="99:26" pos:end="99:26">n</name></decl>;</decl_stmt>

            <decl_stmt pos:start="101:13" pos:end="101:32"><decl pos:start="101:13" pos:end="101:31"><type pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:19">uint8_t</name> <modifier pos:start="101:21" pos:end="101:21">*</modifier></type><name pos:start="101:22" pos:end="101:31">code_table</name></decl>;</decl_stmt>



            <expr_stmt pos:start="105:13" pos:end="105:29"><expr pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:17">xsize</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:28"><name pos:start="105:21" pos:end="105:21">h</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:28">xsize</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:30"><expr pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:13">n</name> <operator pos:start="107:15" pos:end="107:15">=</operator> <name pos:start="107:17" pos:end="107:21">xsize</name> <operator pos:start="107:23" pos:end="107:23">*</operator> <name pos:start="107:25" pos:end="107:29">xsize</name></expr>;</expr_stmt>

            <comment type="block" pos:start="109:13" pos:end="109:32">/* XXX: fail test */</comment>

            <expr_stmt pos:start="111:13" pos:end="113:55"><expr pos:start="111:13" pos:end="113:54"><call pos:start="111:13" pos:end="113:54"><name pos:start="111:13" pos:end="111:20">init_vlc</name><argument_list pos:start="111:21" pos:end="113:54">(<argument pos:start="111:22" pos:end="111:33"><expr pos:start="111:22" pos:end="111:33"><operator pos:start="111:22" pos:end="111:22">&amp;</operator><name pos:start="111:23" pos:end="111:33"><name pos:start="111:23" pos:end="111:30">huff_vlc</name><index pos:start="111:31" pos:end="111:33">[<expr pos:start="111:32" pos:end="111:32"><name pos:start="111:32" pos:end="111:32">i</name></expr>]</index></name></expr></argument>, <argument pos:start="111:36" pos:end="111:36"><expr pos:start="111:36" pos:end="111:36"><literal type="number" pos:start="111:36" pos:end="111:36">8</literal></expr></argument>, <argument pos:start="111:39" pos:end="111:39"><expr pos:start="111:39" pos:end="111:39"><name pos:start="111:39" pos:end="111:39">n</name></expr></argument>, 

                     <argument pos:start="113:22" pos:end="113:28"><expr pos:start="113:22" pos:end="113:28"><name pos:start="113:22" pos:end="113:28"><name pos:start="113:22" pos:end="113:22">h</name><operator pos:start="113:23" pos:end="113:24">-&gt;</operator><name pos:start="113:25" pos:end="113:28">bits</name></name></expr></argument>, <argument pos:start="113:31" pos:end="113:31"><expr pos:start="113:31" pos:end="113:31"><literal type="number" pos:start="113:31" pos:end="113:31">1</literal></expr></argument>, <argument pos:start="113:34" pos:end="113:34"><expr pos:start="113:34" pos:end="113:34"><literal type="number" pos:start="113:34" pos:end="113:34">1</literal></expr></argument>, <argument pos:start="113:37" pos:end="113:44"><expr pos:start="113:37" pos:end="113:44"><name pos:start="113:37" pos:end="113:44"><name pos:start="113:37" pos:end="113:37">h</name><operator pos:start="113:38" pos:end="113:39">-&gt;</operator><name pos:start="113:40" pos:end="113:44">codes</name></name></expr></argument>, <argument pos:start="113:47" pos:end="113:47"><expr pos:start="113:47" pos:end="113:47"><literal type="number" pos:start="113:47" pos:end="113:47">2</literal></expr></argument>, <argument pos:start="113:50" pos:end="113:50"><expr pos:start="113:50" pos:end="113:50"><literal type="number" pos:start="113:50" pos:end="113:50">2</literal></expr></argument>, <argument pos:start="113:53" pos:end="113:53"><expr pos:start="113:53" pos:end="113:53"><literal type="number" pos:start="113:53" pos:end="113:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="117:13" pos:end="117:39"><expr pos:start="117:13" pos:end="117:38"><name pos:start="117:13" pos:end="117:22">code_table</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <call pos:start="117:26" pos:end="117:38"><name pos:start="117:26" pos:end="117:35">av_mallocz</name><argument_list pos:start="117:36" pos:end="117:38">(<argument pos:start="117:37" pos:end="117:37"><expr pos:start="117:37" pos:end="117:37"><name pos:start="117:37" pos:end="117:37">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:18"><expr pos:start="119:13" pos:end="119:17"><name pos:start="119:13" pos:end="119:13">j</name> <operator pos:start="119:15" pos:end="119:15">=</operator> <literal type="number" pos:start="119:17" pos:end="119:17">0</literal></expr>;</expr_stmt>

            <for pos:start="121:13" pos:end="127:13">for<control pos:start="121:16" pos:end="121:32">(<init pos:start="121:17" pos:end="121:20"><expr pos:start="121:17" pos:end="121:19"><name pos:start="121:17" pos:end="121:17">x</name><operator pos:start="121:18" pos:end="121:18">=</operator><literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr>;</init><condition pos:start="121:21" pos:end="121:28"><expr pos:start="121:21" pos:end="121:27"><name pos:start="121:21" pos:end="121:21">x</name><operator pos:start="121:22" pos:end="121:22">&lt;</operator><name pos:start="121:23" pos:end="121:27">xsize</name></expr>;</condition><incr pos:start="121:29" pos:end="121:31"><expr pos:start="121:29" pos:end="121:31"><name pos:start="121:29" pos:end="121:29">x</name><operator pos:start="121:30" pos:end="121:31">++</operator></expr></incr>)</control> <block pos:start="121:34" pos:end="127:13">{<block_content pos:start="123:17" pos:end="125:51">

                <for pos:start="123:17" pos:end="125:51">for<control pos:start="123:20" pos:end="123:36">(<init pos:start="123:21" pos:end="123:24"><expr pos:start="123:21" pos:end="123:23"><name pos:start="123:21" pos:end="123:21">y</name><operator pos:start="123:22" pos:end="123:22">=</operator><literal type="number" pos:start="123:23" pos:end="123:23">0</literal></expr>;</init><condition pos:start="123:25" pos:end="123:32"><expr pos:start="123:25" pos:end="123:31"><name pos:start="123:25" pos:end="123:25">y</name><operator pos:start="123:26" pos:end="123:26">&lt;</operator><name pos:start="123:27" pos:end="123:31">xsize</name></expr>;</condition><incr pos:start="123:33" pos:end="123:35"><expr pos:start="123:33" pos:end="123:35"><name pos:start="123:33" pos:end="123:33">y</name><operator pos:start="123:34" pos:end="123:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="125:21" pos:end="125:51"><block_content pos:start="125:21" pos:end="125:51">

                    <expr_stmt pos:start="125:21" pos:end="125:51"><expr pos:start="125:21" pos:end="125:50"><name pos:start="125:21" pos:end="125:35"><name pos:start="125:21" pos:end="125:30">code_table</name><index pos:start="125:31" pos:end="125:35">[<expr pos:start="125:32" pos:end="125:34"><name pos:start="125:32" pos:end="125:32">j</name><operator pos:start="125:33" pos:end="125:34">++</operator></expr>]</index></name> <operator pos:start="125:37" pos:end="125:37">=</operator> <operator pos:start="125:39" pos:end="125:39">(</operator><name pos:start="125:40" pos:end="125:40">x</name> <operator pos:start="125:42" pos:end="125:43">&lt;&lt;</operator> <literal type="number" pos:start="125:45" pos:end="125:45">4</literal><operator pos:start="125:46" pos:end="125:46">)</operator> <operator pos:start="125:48" pos:end="125:48">|</operator> <name pos:start="125:50" pos:end="125:50">y</name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

            <expr_stmt pos:start="129:13" pos:end="129:44"><expr pos:start="129:13" pos:end="129:43"><name pos:start="129:13" pos:end="129:30"><name pos:start="129:13" pos:end="129:27">huff_code_table</name><index pos:start="129:28" pos:end="129:30">[<expr pos:start="129:29" pos:end="129:29"><name pos:start="129:29" pos:end="129:29">i</name></expr>]</index></name> <operator pos:start="129:32" pos:end="129:32">=</operator> <name pos:start="129:34" pos:end="129:43">code_table</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="133:9" pos:end="139:9">for<control pos:start="133:12" pos:end="133:24">(<init pos:start="133:13" pos:end="133:16"><expr pos:start="133:13" pos:end="133:15"><name pos:start="133:13" pos:end="133:13">i</name><operator pos:start="133:14" pos:end="133:14">=</operator><literal type="number" pos:start="133:15" pos:end="133:15">0</literal></expr>;</init><condition pos:start="133:17" pos:end="133:20"><expr pos:start="133:17" pos:end="133:19"><name pos:start="133:17" pos:end="133:17">i</name><operator pos:start="133:18" pos:end="133:18">&lt;</operator><literal type="number" pos:start="133:19" pos:end="133:19">2</literal></expr>;</condition><incr pos:start="133:21" pos:end="133:23"><expr pos:start="133:21" pos:end="133:23"><name pos:start="133:21" pos:end="133:21">i</name><operator pos:start="133:22" pos:end="133:23">++</operator></expr></incr>)</control> <block pos:start="133:26" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:73">

            <expr_stmt pos:start="135:13" pos:end="137:73"><expr pos:start="135:13" pos:end="137:72"><call pos:start="135:13" pos:end="137:72"><name pos:start="135:13" pos:end="135:20">init_vlc</name><argument_list pos:start="135:21" pos:end="137:72">(<argument pos:start="135:22" pos:end="135:38"><expr pos:start="135:22" pos:end="135:38"><operator pos:start="135:22" pos:end="135:22">&amp;</operator><name pos:start="135:23" pos:end="135:38"><name pos:start="135:23" pos:end="135:35">huff_quad_vlc</name><index pos:start="135:36" pos:end="135:38">[<expr pos:start="135:37" pos:end="135:37"><name pos:start="135:37" pos:end="135:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="135:41" pos:end="135:54"><expr pos:start="135:41" pos:end="135:54"><ternary pos:start="135:41" pos:end="135:54"><condition pos:start="135:41" pos:end="135:48"><expr pos:start="135:41" pos:end="135:46"><name pos:start="135:41" pos:end="135:41">i</name> <operator pos:start="135:43" pos:end="135:44">==</operator> <literal type="number" pos:start="135:46" pos:end="135:46">0</literal></expr> ?</condition><then pos:start="135:50" pos:end="135:50"> <expr pos:start="135:50" pos:end="135:50"><literal type="number" pos:start="135:50" pos:end="135:50">7</literal></expr> </then><else pos:start="135:52" pos:end="135:54">: <expr pos:start="135:54" pos:end="135:54"><literal type="number" pos:start="135:54" pos:end="135:54">4</literal></expr></else></ternary></expr></argument>, <argument pos:start="135:57" pos:end="135:58"><expr pos:start="135:57" pos:end="135:58"><literal type="number" pos:start="135:57" pos:end="135:58">16</literal></expr></argument>, 

                     <argument pos:start="137:22" pos:end="137:37"><expr pos:start="137:22" pos:end="137:37"><name pos:start="137:22" pos:end="137:37"><name pos:start="137:22" pos:end="137:34">mpa_quad_bits</name><index pos:start="137:35" pos:end="137:37">[<expr pos:start="137:36" pos:end="137:36"><name pos:start="137:36" pos:end="137:36">i</name></expr>]</index></name></expr></argument>, <argument pos:start="137:40" pos:end="137:40"><expr pos:start="137:40" pos:end="137:40"><literal type="number" pos:start="137:40" pos:end="137:40">1</literal></expr></argument>, <argument pos:start="137:43" pos:end="137:43"><expr pos:start="137:43" pos:end="137:43"><literal type="number" pos:start="137:43" pos:end="137:43">1</literal></expr></argument>, <argument pos:start="137:46" pos:end="137:62"><expr pos:start="137:46" pos:end="137:62"><name pos:start="137:46" pos:end="137:62"><name pos:start="137:46" pos:end="137:59">mpa_quad_codes</name><index pos:start="137:60" pos:end="137:62">[<expr pos:start="137:61" pos:end="137:61"><name pos:start="137:61" pos:end="137:61">i</name></expr>]</index></name></expr></argument>, <argument pos:start="137:65" pos:end="137:65"><expr pos:start="137:65" pos:end="137:65"><literal type="number" pos:start="137:65" pos:end="137:65">1</literal></expr></argument>, <argument pos:start="137:68" pos:end="137:68"><expr pos:start="137:68" pos:end="137:68"><literal type="number" pos:start="137:68" pos:end="137:68">1</literal></expr></argument>, <argument pos:start="137:71" pos:end="137:71"><expr pos:start="137:71" pos:end="137:71"><literal type="number" pos:start="137:71" pos:end="137:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <for pos:start="143:9" pos:end="157:9">for<control pos:start="143:12" pos:end="143:24">(<init pos:start="143:13" pos:end="143:16"><expr pos:start="143:13" pos:end="143:15"><name pos:start="143:13" pos:end="143:13">i</name><operator pos:start="143:14" pos:end="143:14">=</operator><literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>;</init><condition pos:start="143:17" pos:end="143:20"><expr pos:start="143:17" pos:end="143:19"><name pos:start="143:17" pos:end="143:17">i</name><operator pos:start="143:18" pos:end="143:18">&lt;</operator><literal type="number" pos:start="143:19" pos:end="143:19">9</literal></expr>;</condition><incr pos:start="143:21" pos:end="143:23"><expr pos:start="143:21" pos:end="143:23"><name pos:start="143:21" pos:end="143:21">i</name><operator pos:start="143:22" pos:end="143:23">++</operator></expr></incr>)</control> <block pos:start="143:26" pos:end="157:9">{<block_content pos:start="145:13" pos:end="155:39">

            <expr_stmt pos:start="145:13" pos:end="145:18"><expr pos:start="145:13" pos:end="145:17"><name pos:start="145:13" pos:end="145:13">k</name> <operator pos:start="145:15" pos:end="145:15">=</operator> <literal type="number" pos:start="145:17" pos:end="145:17">0</literal></expr>;</expr_stmt>

            <for pos:start="147:13" pos:end="153:13">for<control pos:start="147:16" pos:end="147:29">(<init pos:start="147:17" pos:end="147:20"><expr pos:start="147:17" pos:end="147:19"><name pos:start="147:17" pos:end="147:17">j</name><operator pos:start="147:18" pos:end="147:18">=</operator><literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr>;</init><condition pos:start="147:21" pos:end="147:25"><expr pos:start="147:21" pos:end="147:24"><name pos:start="147:21" pos:end="147:21">j</name><operator pos:start="147:22" pos:end="147:22">&lt;</operator><literal type="number" pos:start="147:23" pos:end="147:24">22</literal></expr>;</condition><incr pos:start="147:26" pos:end="147:28"><expr pos:start="147:26" pos:end="147:28"><name pos:start="147:26" pos:end="147:26">j</name><operator pos:start="147:27" pos:end="147:28">++</operator></expr></incr>)</control> <block pos:start="147:31" pos:end="153:13">{<block_content pos:start="149:17" pos:end="151:42">

                <expr_stmt pos:start="149:17" pos:end="149:42"><expr pos:start="149:17" pos:end="149:41"><name pos:start="149:17" pos:end="149:37"><name pos:start="149:17" pos:end="149:31">band_index_long</name><index pos:start="149:32" pos:end="149:34">[<expr pos:start="149:33" pos:end="149:33"><name pos:start="149:33" pos:end="149:33">i</name></expr>]</index><index pos:start="149:35" pos:end="149:37">[<expr pos:start="149:36" pos:end="149:36"><name pos:start="149:36" pos:end="149:36">j</name></expr>]</index></name> <operator pos:start="149:39" pos:end="149:39">=</operator> <name pos:start="149:41" pos:end="149:41">k</name></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:42"><expr pos:start="151:17" pos:end="151:41"><name pos:start="151:17" pos:end="151:17">k</name> <operator pos:start="151:19" pos:end="151:20">+=</operator> <name pos:start="151:22" pos:end="151:41"><name pos:start="151:22" pos:end="151:35">band_size_long</name><index pos:start="151:36" pos:end="151:38">[<expr pos:start="151:37" pos:end="151:37"><name pos:start="151:37" pos:end="151:37">i</name></expr>]</index><index pos:start="151:39" pos:end="151:41">[<expr pos:start="151:40" pos:end="151:40"><name pos:start="151:40" pos:end="151:40">j</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="155:13" pos:end="155:39"><expr pos:start="155:13" pos:end="155:38"><name pos:start="155:13" pos:end="155:34"><name pos:start="155:13" pos:end="155:27">band_index_long</name><index pos:start="155:28" pos:end="155:30">[<expr pos:start="155:29" pos:end="155:29"><name pos:start="155:29" pos:end="155:29">i</name></expr>]</index><index pos:start="155:31" pos:end="155:34">[<expr pos:start="155:32" pos:end="155:33"><literal type="number" pos:start="155:32" pos:end="155:33">22</literal></expr>]</index></name> <operator pos:start="155:36" pos:end="155:36">=</operator> <name pos:start="155:38" pos:end="155:38">k</name></expr>;</expr_stmt>

        </block_content>}</block></for>



	<comment type="block" pos:start="161:9" pos:end="161:67">/* compute n ^ (4/3) and store it in mantissa/exp format */</comment>

	<expr_stmt pos:start="163:9" pos:end="163:84"><expr pos:start="163:9" pos:end="163:83"><name pos:start="163:9" pos:end="163:21">table_4_3_exp</name><operator pos:start="163:22" pos:end="163:22">=</operator> <call pos:start="163:24" pos:end="163:83"><name pos:start="163:24" pos:end="163:40">av_mallocz_static</name><argument_list pos:start="163:41" pos:end="163:83">(<argument pos:start="163:42" pos:end="163:82"><expr pos:start="163:42" pos:end="163:82"><name pos:start="163:42" pos:end="163:55">TABLE_4_3_SIZE</name> <operator pos:start="163:57" pos:end="163:57">*</operator> <sizeof pos:start="163:59" pos:end="163:82">sizeof<argument_list pos:start="163:65" pos:end="163:82">(<argument pos:start="163:66" pos:end="163:81"><expr pos:start="163:66" pos:end="163:81"><name pos:start="163:66" pos:end="163:81"><name pos:start="163:66" pos:end="163:78">table_4_3_exp</name><index pos:start="163:79" pos:end="163:81">[<expr pos:start="163:80" pos:end="163:80"><literal type="number" pos:start="163:80" pos:end="163:80">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="167:22"><if pos:start="165:9" pos:end="167:22">if<condition pos:start="165:11" pos:end="165:26">(<expr pos:start="165:12" pos:end="165:25"><operator pos:start="165:12" pos:end="165:12">!</operator><name pos:start="165:13" pos:end="165:25">table_4_3_exp</name></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:22"><block_content pos:start="167:13" pos:end="167:22">

	    <return pos:start="167:13" pos:end="167:22">return <expr pos:start="167:20" pos:end="167:21"><operator pos:start="167:20" pos:end="167:20">-</operator><literal type="number" pos:start="167:21" pos:end="167:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt pos:start="169:9" pos:end="169:88"><expr pos:start="169:9" pos:end="169:87"><name pos:start="169:9" pos:end="169:23">table_4_3_value</name><operator pos:start="169:24" pos:end="169:24">=</operator> <call pos:start="169:26" pos:end="169:87"><name pos:start="169:26" pos:end="169:42">av_mallocz_static</name><argument_list pos:start="169:43" pos:end="169:87">(<argument pos:start="169:44" pos:end="169:86"><expr pos:start="169:44" pos:end="169:86"><name pos:start="169:44" pos:end="169:57">TABLE_4_3_SIZE</name> <operator pos:start="169:59" pos:end="169:59">*</operator> <sizeof pos:start="169:61" pos:end="169:86">sizeof<argument_list pos:start="169:67" pos:end="169:86">(<argument pos:start="169:68" pos:end="169:85"><expr pos:start="169:68" pos:end="169:85"><name pos:start="169:68" pos:end="169:85"><name pos:start="169:68" pos:end="169:82">table_4_3_value</name><index pos:start="169:83" pos:end="169:85">[<expr pos:start="169:84" pos:end="169:84"><literal type="number" pos:start="169:84" pos:end="169:84">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="173:22"><if pos:start="171:9" pos:end="173:22">if<condition pos:start="171:11" pos:end="171:28">(<expr pos:start="171:12" pos:end="171:27"><operator pos:start="171:12" pos:end="171:12">!</operator><name pos:start="171:13" pos:end="171:27">table_4_3_value</name></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:22"><block_content pos:start="173:13" pos:end="173:22">

            <return pos:start="173:13" pos:end="173:22">return <expr pos:start="173:20" pos:end="173:21"><operator pos:start="173:20" pos:end="173:20">-</operator><literal type="number" pos:start="173:21" pos:end="173:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        

        <expr_stmt pos:start="177:9" pos:end="177:23"><expr pos:start="177:9" pos:end="177:22"><call pos:start="177:9" pos:end="177:22"><name pos:start="177:9" pos:end="177:20">int_pow_init</name><argument_list pos:start="177:21" pos:end="177:22">()</argument_list></call></expr>;</expr_stmt>

        <for pos:start="179:9" pos:end="203:9">for<control pos:start="179:12" pos:end="179:37">(<init pos:start="179:13" pos:end="179:16"><expr pos:start="179:13" pos:end="179:15"><name pos:start="179:13" pos:end="179:13">i</name><operator pos:start="179:14" pos:end="179:14">=</operator><literal type="number" pos:start="179:15" pos:end="179:15">1</literal></expr>;</init><condition pos:start="179:17" pos:end="179:33"><expr pos:start="179:17" pos:end="179:32"><name pos:start="179:17" pos:end="179:17">i</name><operator pos:start="179:18" pos:end="179:18">&lt;</operator><name pos:start="179:19" pos:end="179:32">TABLE_4_3_SIZE</name></expr>;</condition><incr pos:start="179:34" pos:end="179:36"><expr pos:start="179:34" pos:end="179:36"><name pos:start="179:34" pos:end="179:34">i</name><operator pos:start="179:35" pos:end="179:36">++</operator></expr></incr>)</control> <block pos:start="179:39" pos:end="203:9">{<block_content pos:start="181:13" pos:end="201:34">

            <decl_stmt pos:start="181:13" pos:end="181:25"><decl pos:start="181:13" pos:end="181:20"><type pos:start="181:13" pos:end="181:18"><name pos:start="181:13" pos:end="181:18">double</name></type> <name pos:start="181:20" pos:end="181:20">f</name></decl>, <decl pos:start="181:23" pos:end="181:24"><type ref="prev" pos:start="181:13" pos:end="181:18"/><name pos:start="181:23" pos:end="181:24">fm</name></decl>;</decl_stmt>

            <decl_stmt pos:start="183:13" pos:end="183:21"><decl pos:start="183:13" pos:end="183:17"><type pos:start="183:13" pos:end="183:15"><name pos:start="183:13" pos:end="183:15">int</name></type> <name pos:start="183:17" pos:end="183:17">e</name></decl>, <decl pos:start="183:20" pos:end="183:20"><type ref="prev" pos:start="183:13" pos:end="183:15"/><name pos:start="183:20" pos:end="183:20">m</name></decl>;</decl_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:67"><expr pos:start="185:13" pos:end="185:66"><name pos:start="185:13" pos:end="185:13">f</name> <operator pos:start="185:15" pos:end="185:15">=</operator> <call pos:start="185:17" pos:end="185:45"><name pos:start="185:17" pos:end="185:19">pow</name><argument_list pos:start="185:20" pos:end="185:45">(<argument pos:start="185:21" pos:end="185:33"><expr pos:start="185:21" pos:end="185:33"><operator pos:start="185:21" pos:end="185:21">(</operator><name pos:start="185:22" pos:end="185:27">double</name><operator pos:start="185:28" pos:end="185:28">)</operator><operator pos:start="185:29" pos:end="185:29">(</operator><name pos:start="185:30" pos:end="185:30">i</name><operator pos:start="185:31" pos:end="185:31">/</operator><literal type="number" pos:start="185:32" pos:end="185:32">4</literal><operator pos:start="185:33" pos:end="185:33">)</operator></expr></argument>, <argument pos:start="185:36" pos:end="185:44"><expr pos:start="185:36" pos:end="185:44"><literal type="number" pos:start="185:36" pos:end="185:38">4.0</literal> <operator pos:start="185:40" pos:end="185:40">/</operator> <literal type="number" pos:start="185:42" pos:end="185:44">3.0</literal></expr></argument>)</argument_list></call> <operator pos:start="185:47" pos:end="185:47">*</operator> <call pos:start="185:49" pos:end="185:66"><name pos:start="185:49" pos:end="185:51">pow</name><argument_list pos:start="185:52" pos:end="185:66">(<argument pos:start="185:53" pos:end="185:53"><expr pos:start="185:53" pos:end="185:53"><literal type="number" pos:start="185:53" pos:end="185:53">2</literal></expr></argument>, <argument pos:start="185:56" pos:end="185:65"><expr pos:start="185:56" pos:end="185:65"><operator pos:start="185:56" pos:end="185:56">(</operator><name pos:start="185:57" pos:end="185:57">i</name><operator pos:start="185:58" pos:end="185:58">&amp;</operator><literal type="number" pos:start="185:59" pos:end="185:59">3</literal><operator pos:start="185:60" pos:end="185:60">)</operator><operator pos:start="185:61" pos:end="185:61">*</operator><literal type="number" pos:start="185:62" pos:end="185:65">0.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:30"><expr pos:start="187:13" pos:end="187:29"><name pos:start="187:13" pos:end="187:14">fm</name> <operator pos:start="187:16" pos:end="187:16">=</operator> <call pos:start="187:18" pos:end="187:29"><name pos:start="187:18" pos:end="187:22">frexp</name><argument_list pos:start="187:23" pos:end="187:29">(<argument pos:start="187:24" pos:end="187:24"><expr pos:start="187:24" pos:end="187:24"><name pos:start="187:24" pos:end="187:24">f</name></expr></argument>, <argument pos:start="187:27" pos:end="187:28"><expr pos:start="187:27" pos:end="187:28"><operator pos:start="187:27" pos:end="187:27">&amp;</operator><name pos:start="187:28" pos:end="187:28">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:30"><expr pos:start="189:13" pos:end="189:29"><name pos:start="189:13" pos:end="189:13">m</name> <operator pos:start="189:15" pos:end="189:15">=</operator> <call pos:start="189:17" pos:end="189:29"><name pos:start="189:17" pos:end="189:21">FIXHR</name><argument_list pos:start="189:22" pos:end="189:29">(<argument pos:start="189:23" pos:end="189:28"><expr pos:start="189:23" pos:end="189:28"><name pos:start="189:23" pos:end="189:24">fm</name><operator pos:start="189:25" pos:end="189:25">*</operator><literal type="number" pos:start="189:26" pos:end="189:28">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:31"><expr pos:start="191:13" pos:end="191:30"><name pos:start="191:13" pos:end="191:13">e</name><operator pos:start="191:14" pos:end="191:15">+=</operator> <name pos:start="191:17" pos:end="191:25">FRAC_BITS</name> <operator pos:start="191:27" pos:end="191:27">-</operator> <literal type="number" pos:start="191:29" pos:end="191:30">31</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="195:13" pos:end="195:41">/* normalized to FRAC_BITS */</comment>

            <expr_stmt pos:start="197:13" pos:end="197:35"><expr pos:start="197:13" pos:end="197:34"><name pos:start="197:13" pos:end="197:30"><name pos:start="197:13" pos:end="197:27">table_4_3_value</name><index pos:start="197:28" pos:end="197:30">[<expr pos:start="197:29" pos:end="197:29"><name pos:start="197:29" pos:end="197:29">i</name></expr>]</index></name> <operator pos:start="197:32" pos:end="197:32">=</operator> <name pos:start="197:34" pos:end="197:34">m</name></expr>;</expr_stmt>

<comment type="line" pos:start="199:1" pos:end="199:88">//            av_log(NULL, AV_LOG_DEBUG, "%d %d %f\n", i, m, pow((double)i, 4.0 / 3.0));</comment>

            <expr_stmt pos:start="201:13" pos:end="201:34"><expr pos:start="201:13" pos:end="201:33"><name pos:start="201:13" pos:end="201:28"><name pos:start="201:13" pos:end="201:25">table_4_3_exp</name><index pos:start="201:26" pos:end="201:28">[<expr pos:start="201:27" pos:end="201:27"><name pos:start="201:27" pos:end="201:27">i</name></expr>]</index></name> <operator pos:start="201:30" pos:end="201:30">=</operator> <operator pos:start="201:32" pos:end="201:32">-</operator><name pos:start="201:33" pos:end="201:33">e</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        

        <for pos:start="207:9" pos:end="229:9">for<control pos:start="207:12" pos:end="207:24">(<init pos:start="207:13" pos:end="207:16"><expr pos:start="207:13" pos:end="207:15"><name pos:start="207:13" pos:end="207:13">i</name><operator pos:start="207:14" pos:end="207:14">=</operator><literal type="number" pos:start="207:15" pos:end="207:15">0</literal></expr>;</init><condition pos:start="207:17" pos:end="207:20"><expr pos:start="207:17" pos:end="207:19"><name pos:start="207:17" pos:end="207:17">i</name><operator pos:start="207:18" pos:end="207:18">&lt;</operator><literal type="number" pos:start="207:19" pos:end="207:19">7</literal></expr>;</condition><incr pos:start="207:21" pos:end="207:23"><expr pos:start="207:21" pos:end="207:23"><name pos:start="207:21" pos:end="207:21">i</name><operator pos:start="207:22" pos:end="207:23">++</operator></expr></incr>)</control> <block pos:start="207:26" pos:end="229:9">{<block_content pos:start="209:13" pos:end="227:35">

            <decl_stmt pos:start="209:13" pos:end="209:20"><decl pos:start="209:13" pos:end="209:19"><type pos:start="209:13" pos:end="209:17"><name pos:start="209:13" pos:end="209:17">float</name></type> <name pos:start="209:19" pos:end="209:19">f</name></decl>;</decl_stmt>

            <decl_stmt pos:start="211:13" pos:end="211:18"><decl pos:start="211:13" pos:end="211:17"><type pos:start="211:13" pos:end="211:15"><name pos:start="211:13" pos:end="211:15">int</name></type> <name pos:start="211:17" pos:end="211:17">v</name></decl>;</decl_stmt>

            <if_stmt pos:start="213:13" pos:end="223:13"><if pos:start="213:13" pos:end="219:13">if <condition pos:start="213:16" pos:end="213:23">(<expr pos:start="213:17" pos:end="213:22"><name pos:start="213:17" pos:end="213:17">i</name> <operator pos:start="213:19" pos:end="213:20">!=</operator> <literal type="number" pos:start="213:22" pos:end="213:22">6</literal></expr>)</condition> <block pos:start="213:25" pos:end="219:13">{<block_content pos:start="215:17" pos:end="217:40">

                <expr_stmt pos:start="215:17" pos:end="215:49"><expr pos:start="215:17" pos:end="215:48"><name pos:start="215:17" pos:end="215:17">f</name> <operator pos:start="215:19" pos:end="215:19">=</operator> <call pos:start="215:21" pos:end="215:48"><name pos:start="215:21" pos:end="215:23">tan</name><argument_list pos:start="215:24" pos:end="215:48">(<argument pos:start="215:25" pos:end="215:47"><expr pos:start="215:25" pos:end="215:47"><operator pos:start="215:25" pos:end="215:25">(</operator><name pos:start="215:26" pos:end="215:31">double</name><operator pos:start="215:32" pos:end="215:32">)</operator><name pos:start="215:33" pos:end="215:33">i</name> <operator pos:start="215:35" pos:end="215:35">*</operator> <name pos:start="215:37" pos:end="215:40">M_PI</name> <operator pos:start="215:42" pos:end="215:42">/</operator> <literal type="number" pos:start="215:44" pos:end="215:47">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:40"><expr pos:start="217:17" pos:end="217:39"><name pos:start="217:17" pos:end="217:17">v</name> <operator pos:start="217:19" pos:end="217:19">=</operator> <call pos:start="217:21" pos:end="217:39"><name pos:start="217:21" pos:end="217:24">FIXR</name><argument_list pos:start="217:25" pos:end="217:39">(<argument pos:start="217:26" pos:end="217:38"><expr pos:start="217:26" pos:end="217:38"><name pos:start="217:26" pos:end="217:26">f</name> <operator pos:start="217:28" pos:end="217:28">/</operator> <operator pos:start="217:30" pos:end="217:30">(</operator><literal type="number" pos:start="217:31" pos:end="217:35">1.0</literal> <operator pos:start="217:35" pos:end="217:35">+</operator> <name pos:start="217:37" pos:end="217:37">f</name><operator pos:start="217:38" pos:end="217:38">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="219:15" pos:end="223:13">else <block pos:start="219:20" pos:end="223:13">{<block_content pos:start="221:17" pos:end="221:30">

                <expr_stmt pos:start="221:17" pos:end="221:30"><expr pos:start="221:17" pos:end="221:29"><name pos:start="221:17" pos:end="221:17">v</name> <operator pos:start="221:19" pos:end="221:19">=</operator> <call pos:start="221:21" pos:end="221:29"><name pos:start="221:21" pos:end="221:24">FIXR</name><argument_list pos:start="221:25" pos:end="221:29">(<argument pos:start="221:26" pos:end="221:28"><expr pos:start="221:26" pos:end="221:28"><literal type="number" pos:start="221:26" pos:end="221:28">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:31"><expr pos:start="225:13" pos:end="225:30"><name pos:start="225:13" pos:end="225:26"><name pos:start="225:13" pos:end="225:20">is_table</name><index pos:start="225:21" pos:end="225:23">[<expr pos:start="225:22" pos:end="225:22"><literal type="number" pos:start="225:22" pos:end="225:22">0</literal></expr>]</index><index pos:start="225:24" pos:end="225:26">[<expr pos:start="225:25" pos:end="225:25"><name pos:start="225:25" pos:end="225:25">i</name></expr>]</index></name> <operator pos:start="225:28" pos:end="225:28">=</operator> <name pos:start="225:30" pos:end="225:30">v</name></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:35"><expr pos:start="227:13" pos:end="227:34"><name pos:start="227:13" pos:end="227:30"><name pos:start="227:13" pos:end="227:20">is_table</name><index pos:start="227:21" pos:end="227:23">[<expr pos:start="227:22" pos:end="227:22"><literal type="number" pos:start="227:22" pos:end="227:22">1</literal></expr>]</index><index pos:start="227:24" pos:end="227:30">[<expr pos:start="227:25" pos:end="227:29"><literal type="number" pos:start="227:25" pos:end="227:25">6</literal> <operator pos:start="227:27" pos:end="227:27">-</operator> <name pos:start="227:29" pos:end="227:29">i</name></expr>]</index></name> <operator pos:start="227:32" pos:end="227:32">=</operator> <name pos:start="227:34" pos:end="227:34">v</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="231:9" pos:end="231:28">/* invalid values */</comment>

        <for pos:start="233:9" pos:end="235:50">for<control pos:start="233:12" pos:end="233:25">(<init pos:start="233:13" pos:end="233:16"><expr pos:start="233:13" pos:end="233:15"><name pos:start="233:13" pos:end="233:13">i</name><operator pos:start="233:14" pos:end="233:14">=</operator><literal type="number" pos:start="233:15" pos:end="233:15">7</literal></expr>;</init><condition pos:start="233:17" pos:end="233:21"><expr pos:start="233:17" pos:end="233:20"><name pos:start="233:17" pos:end="233:17">i</name><operator pos:start="233:18" pos:end="233:18">&lt;</operator><literal type="number" pos:start="233:19" pos:end="233:20">16</literal></expr>;</condition><incr pos:start="233:22" pos:end="233:24"><expr pos:start="233:22" pos:end="233:24"><name pos:start="233:22" pos:end="233:22">i</name><operator pos:start="233:23" pos:end="233:24">++</operator></expr></incr>)</control><block type="pseudo" pos:start="235:13" pos:end="235:50"><block_content pos:start="235:13" pos:end="235:50">

            <expr_stmt pos:start="235:13" pos:end="235:50"><expr pos:start="235:13" pos:end="235:49"><name pos:start="235:13" pos:end="235:26"><name pos:start="235:13" pos:end="235:20">is_table</name><index pos:start="235:21" pos:end="235:23">[<expr pos:start="235:22" pos:end="235:22"><literal type="number" pos:start="235:22" pos:end="235:22">0</literal></expr>]</index><index pos:start="235:24" pos:end="235:26">[<expr pos:start="235:25" pos:end="235:25"><name pos:start="235:25" pos:end="235:25">i</name></expr>]</index></name> <operator pos:start="235:28" pos:end="235:28">=</operator> <name pos:start="235:30" pos:end="235:43"><name pos:start="235:30" pos:end="235:37">is_table</name><index pos:start="235:38" pos:end="235:40">[<expr pos:start="235:39" pos:end="235:39"><literal type="number" pos:start="235:39" pos:end="235:39">1</literal></expr>]</index><index pos:start="235:41" pos:end="235:43">[<expr pos:start="235:42" pos:end="235:42"><name pos:start="235:42" pos:end="235:42">i</name></expr>]</index></name> <operator pos:start="235:45" pos:end="235:45">=</operator> <literal type="number" pos:start="235:47" pos:end="235:49">0.0</literal></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="239:9" pos:end="265:9">for<control pos:start="239:12" pos:end="239:25">(<init pos:start="239:13" pos:end="239:16"><expr pos:start="239:13" pos:end="239:15"><name pos:start="239:13" pos:end="239:13">i</name><operator pos:start="239:14" pos:end="239:14">=</operator><literal type="number" pos:start="239:15" pos:end="239:15">0</literal></expr>;</init><condition pos:start="239:17" pos:end="239:21"><expr pos:start="239:17" pos:end="239:20"><name pos:start="239:17" pos:end="239:17">i</name><operator pos:start="239:18" pos:end="239:18">&lt;</operator><literal type="number" pos:start="239:19" pos:end="239:20">16</literal></expr>;</condition><incr pos:start="239:22" pos:end="239:24"><expr pos:start="239:22" pos:end="239:24"><name pos:start="239:22" pos:end="239:22">i</name><operator pos:start="239:23" pos:end="239:24">++</operator></expr></incr>)</control> <block pos:start="239:27" pos:end="265:9">{<block_content pos:start="241:13" pos:end="263:13">

            <decl_stmt pos:start="241:13" pos:end="241:21"><decl pos:start="241:13" pos:end="241:20"><type pos:start="241:13" pos:end="241:18"><name pos:start="241:13" pos:end="241:18">double</name></type> <name pos:start="241:20" pos:end="241:20">f</name></decl>;</decl_stmt>

            <decl_stmt pos:start="243:13" pos:end="243:21"><decl pos:start="243:13" pos:end="243:17"><type pos:start="243:13" pos:end="243:15"><name pos:start="243:13" pos:end="243:15">int</name></type> <name pos:start="243:17" pos:end="243:17">e</name></decl>, <decl pos:start="243:20" pos:end="243:20"><type ref="prev" pos:start="243:13" pos:end="243:15"/><name pos:start="243:20" pos:end="243:20">k</name></decl>;</decl_stmt>



            <for pos:start="247:13" pos:end="263:13">for<control pos:start="247:16" pos:end="247:28">(<init pos:start="247:17" pos:end="247:20"><expr pos:start="247:17" pos:end="247:19"><name pos:start="247:17" pos:end="247:17">j</name><operator pos:start="247:18" pos:end="247:18">=</operator><literal type="number" pos:start="247:19" pos:end="247:19">0</literal></expr>;</init><condition pos:start="247:21" pos:end="247:24"><expr pos:start="247:21" pos:end="247:23"><name pos:start="247:21" pos:end="247:21">j</name><operator pos:start="247:22" pos:end="247:22">&lt;</operator><literal type="number" pos:start="247:23" pos:end="247:23">2</literal></expr>;</condition><incr pos:start="247:25" pos:end="247:27"><expr pos:start="247:25" pos:end="247:27"><name pos:start="247:25" pos:end="247:25">j</name><operator pos:start="247:26" pos:end="247:27">++</operator></expr></incr>)</control> <block pos:start="247:30" pos:end="263:13">{<block_content pos:start="249:17" pos:end="261:76">

                <expr_stmt pos:start="249:17" pos:end="249:46"><expr pos:start="249:17" pos:end="249:45"><name pos:start="249:17" pos:end="249:17">e</name> <operator pos:start="249:19" pos:end="249:19">=</operator> <operator pos:start="249:21" pos:end="249:21">-</operator><operator pos:start="249:22" pos:end="249:22">(</operator><name pos:start="249:23" pos:end="249:23">j</name> <operator pos:start="249:25" pos:end="249:25">+</operator> <literal type="number" pos:start="249:27" pos:end="249:27">1</literal><operator pos:start="249:28" pos:end="249:28">)</operator> <operator pos:start="249:30" pos:end="249:30">*</operator> <operator pos:start="249:32" pos:end="249:32">(</operator><operator pos:start="249:33" pos:end="249:33">(</operator><name pos:start="249:34" pos:end="249:34">i</name> <operator pos:start="249:36" pos:end="249:36">+</operator> <literal type="number" pos:start="249:38" pos:end="249:38">1</literal><operator pos:start="249:39" pos:end="249:39">)</operator> <operator pos:start="249:41" pos:end="249:42">&gt;&gt;</operator> <literal type="number" pos:start="249:44" pos:end="249:44">1</literal><operator pos:start="249:45" pos:end="249:45">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:38"><expr pos:start="251:17" pos:end="251:37"><name pos:start="251:17" pos:end="251:17">f</name> <operator pos:start="251:19" pos:end="251:19">=</operator> <call pos:start="251:21" pos:end="251:37"><name pos:start="251:21" pos:end="251:23">pow</name><argument_list pos:start="251:24" pos:end="251:37">(<argument pos:start="251:25" pos:end="251:27"><expr pos:start="251:25" pos:end="251:27"><literal type="number" pos:start="251:25" pos:end="251:27">2.0</literal></expr></argument>, <argument pos:start="251:30" pos:end="251:36"><expr pos:start="251:30" pos:end="251:36"><name pos:start="251:30" pos:end="251:30">e</name> <operator pos:start="251:32" pos:end="251:32">/</operator> <literal type="number" pos:start="251:34" pos:end="251:36">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:26"><expr pos:start="253:17" pos:end="253:25"><name pos:start="253:17" pos:end="253:17">k</name> <operator pos:start="253:19" pos:end="253:19">=</operator> <name pos:start="253:21" pos:end="253:21">i</name> <operator pos:start="253:23" pos:end="253:23">&amp;</operator> <literal type="number" pos:start="253:25" pos:end="253:25">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:52"><expr pos:start="255:17" pos:end="255:51"><name pos:start="255:17" pos:end="255:41"><name pos:start="255:17" pos:end="255:28">is_table_lsf</name><index pos:start="255:29" pos:end="255:31">[<expr pos:start="255:30" pos:end="255:30"><name pos:start="255:30" pos:end="255:30">j</name></expr>]</index><index pos:start="255:32" pos:end="255:38">[<expr pos:start="255:33" pos:end="255:37"><name pos:start="255:33" pos:end="255:33">k</name> <operator pos:start="255:35" pos:end="255:35">^</operator> <literal type="number" pos:start="255:37" pos:end="255:37">1</literal></expr>]</index><index pos:start="255:39" pos:end="255:41">[<expr pos:start="255:40" pos:end="255:40"><name pos:start="255:40" pos:end="255:40">i</name></expr>]</index></name> <operator pos:start="255:43" pos:end="255:43">=</operator> <call pos:start="255:45" pos:end="255:51"><name pos:start="255:45" pos:end="255:48">FIXR</name><argument_list pos:start="255:49" pos:end="255:51">(<argument pos:start="255:50" pos:end="255:50"><expr pos:start="255:50" pos:end="255:50"><name pos:start="255:50" pos:end="255:50">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:50"><expr pos:start="257:17" pos:end="257:49"><name pos:start="257:17" pos:end="257:37"><name pos:start="257:17" pos:end="257:28">is_table_lsf</name><index pos:start="257:29" pos:end="257:31">[<expr pos:start="257:30" pos:end="257:30"><name pos:start="257:30" pos:end="257:30">j</name></expr>]</index><index pos:start="257:32" pos:end="257:34">[<expr pos:start="257:33" pos:end="257:33"><name pos:start="257:33" pos:end="257:33">k</name></expr>]</index><index pos:start="257:35" pos:end="257:37">[<expr pos:start="257:36" pos:end="257:36"><name pos:start="257:36" pos:end="257:36">i</name></expr>]</index></name> <operator pos:start="257:39" pos:end="257:39">=</operator> <call pos:start="257:41" pos:end="257:49"><name pos:start="257:41" pos:end="257:44">FIXR</name><argument_list pos:start="257:45" pos:end="257:49">(<argument pos:start="257:46" pos:end="257:48"><expr pos:start="257:46" pos:end="257:48"><literal type="number" pos:start="257:46" pos:end="257:48">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="259:17" pos:end="261:76"><expr pos:start="259:17" pos:end="261:75"><call pos:start="259:17" pos:end="261:75"><name pos:start="259:17" pos:end="259:23">dprintf</name><argument_list pos:start="259:24" pos:end="261:75">(<argument pos:start="259:25" pos:end="259:53"><expr pos:start="259:25" pos:end="259:53"><literal type="string" pos:start="259:25" pos:end="259:53">"is_table_lsf %d %d: %x %x\n"</literal></expr></argument>, 

                        <argument pos:start="261:25" pos:end="261:25"><expr pos:start="261:25" pos:end="261:25"><name pos:start="261:25" pos:end="261:25">i</name></expr></argument>, <argument pos:start="261:28" pos:end="261:28"><expr pos:start="261:28" pos:end="261:28"><name pos:start="261:28" pos:end="261:28">j</name></expr></argument>, <argument pos:start="261:31" pos:end="261:51"><expr pos:start="261:31" pos:end="261:51"><name pos:start="261:31" pos:end="261:51"><name pos:start="261:31" pos:end="261:42">is_table_lsf</name><index pos:start="261:43" pos:end="261:45">[<expr pos:start="261:44" pos:end="261:44"><name pos:start="261:44" pos:end="261:44">j</name></expr>]</index><index pos:start="261:46" pos:end="261:48">[<expr pos:start="261:47" pos:end="261:47"><literal type="number" pos:start="261:47" pos:end="261:47">0</literal></expr>]</index><index pos:start="261:49" pos:end="261:51">[<expr pos:start="261:50" pos:end="261:50"><name pos:start="261:50" pos:end="261:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="261:54" pos:end="261:74"><expr pos:start="261:54" pos:end="261:74"><name pos:start="261:54" pos:end="261:74"><name pos:start="261:54" pos:end="261:65">is_table_lsf</name><index pos:start="261:66" pos:end="261:68">[<expr pos:start="261:67" pos:end="261:67"><name pos:start="261:67" pos:end="261:67">j</name></expr>]</index><index pos:start="261:69" pos:end="261:71">[<expr pos:start="261:70" pos:end="261:70"><literal type="number" pos:start="261:70" pos:end="261:70">1</literal></expr>]</index><index pos:start="261:72" pos:end="261:74">[<expr pos:start="261:73" pos:end="261:73"><name pos:start="261:73" pos:end="261:73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <for pos:start="269:9" pos:end="299:9">for<control pos:start="269:12" pos:end="269:24">(<init pos:start="269:13" pos:end="269:16"><expr pos:start="269:13" pos:end="269:15"><name pos:start="269:13" pos:end="269:13">i</name><operator pos:start="269:14" pos:end="269:14">=</operator><literal type="number" pos:start="269:15" pos:end="269:15">0</literal></expr>;</init><condition pos:start="269:17" pos:end="269:20"><expr pos:start="269:17" pos:end="269:19"><name pos:start="269:17" pos:end="269:17">i</name><operator pos:start="269:18" pos:end="269:18">&lt;</operator><literal type="number" pos:start="269:19" pos:end="269:19">8</literal></expr>;</condition><incr pos:start="269:21" pos:end="269:23"><expr pos:start="269:21" pos:end="269:23"><name pos:start="269:21" pos:end="269:21">i</name><operator pos:start="269:22" pos:end="269:23">++</operator></expr></incr>)</control> <block pos:start="269:26" pos:end="299:9">{<block_content pos:start="271:13" pos:end="293:44">

            <decl_stmt pos:start="271:13" pos:end="271:29"><decl pos:start="271:13" pos:end="271:20"><type pos:start="271:13" pos:end="271:17"><name pos:start="271:13" pos:end="271:17">float</name></type> <name pos:start="271:19" pos:end="271:20">ci</name></decl>, <decl pos:start="271:23" pos:end="271:24"><type ref="prev" pos:start="271:13" pos:end="271:17"/><name pos:start="271:23" pos:end="271:24">cs</name></decl>, <decl pos:start="271:27" pos:end="271:28"><type ref="prev" pos:start="271:13" pos:end="271:17"/><name pos:start="271:27" pos:end="271:28">ca</name></decl>;</decl_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:29"><expr pos:start="273:13" pos:end="273:28"><name pos:start="273:13" pos:end="273:14">ci</name> <operator pos:start="273:16" pos:end="273:16">=</operator> <name pos:start="273:18" pos:end="273:28"><name pos:start="273:18" pos:end="273:25">ci_table</name><index pos:start="273:26" pos:end="273:28">[<expr pos:start="273:27" pos:end="273:27"><name pos:start="273:27" pos:end="273:27">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:43"><expr pos:start="275:13" pos:end="275:42"><name pos:start="275:13" pos:end="275:14">cs</name> <operator pos:start="275:16" pos:end="275:16">=</operator> <literal type="number" pos:start="275:18" pos:end="275:20">1.0</literal> <operator pos:start="275:22" pos:end="275:22">/</operator> <call pos:start="275:24" pos:end="275:42"><name pos:start="275:24" pos:end="275:27">sqrt</name><argument_list pos:start="275:28" pos:end="275:42">(<argument pos:start="275:29" pos:end="275:41"><expr pos:start="275:29" pos:end="275:41"><literal type="number" pos:start="275:29" pos:end="275:33">1.0</literal> <operator pos:start="275:33" pos:end="275:33">+</operator> <name pos:start="275:35" pos:end="275:36">ci</name> <operator pos:start="275:38" pos:end="275:38">*</operator> <name pos:start="275:40" pos:end="275:41">ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:25"><expr pos:start="277:13" pos:end="277:24"><name pos:start="277:13" pos:end="277:14">ca</name> <operator pos:start="277:16" pos:end="277:16">=</operator> <name pos:start="277:18" pos:end="277:19">cs</name> <operator pos:start="277:21" pos:end="277:21">*</operator> <name pos:start="277:23" pos:end="277:24">ci</name></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:42"><expr pos:start="279:13" pos:end="279:41"><name pos:start="279:13" pos:end="279:27"><name pos:start="279:13" pos:end="279:21">csa_table</name><index pos:start="279:22" pos:end="279:24">[<expr pos:start="279:23" pos:end="279:23"><name pos:start="279:23" pos:end="279:23">i</name></expr>]</index><index pos:start="279:25" pos:end="279:27">[<expr pos:start="279:26" pos:end="279:26"><literal type="number" pos:start="279:26" pos:end="279:26">0</literal></expr>]</index></name> <operator pos:start="279:29" pos:end="279:29">=</operator> <call pos:start="279:31" pos:end="279:41"><name pos:start="279:31" pos:end="279:35">FIXHR</name><argument_list pos:start="279:36" pos:end="279:41">(<argument pos:start="279:37" pos:end="279:40"><expr pos:start="279:37" pos:end="279:40"><name pos:start="279:37" pos:end="279:38">cs</name><operator pos:start="279:39" pos:end="279:39">/</operator><literal type="number" pos:start="279:40" pos:end="279:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:42"><expr pos:start="281:13" pos:end="281:41"><name pos:start="281:13" pos:end="281:27"><name pos:start="281:13" pos:end="281:21">csa_table</name><index pos:start="281:22" pos:end="281:24">[<expr pos:start="281:23" pos:end="281:23"><name pos:start="281:23" pos:end="281:23">i</name></expr>]</index><index pos:start="281:25" pos:end="281:27">[<expr pos:start="281:26" pos:end="281:26"><literal type="number" pos:start="281:26" pos:end="281:26">1</literal></expr>]</index></name> <operator pos:start="281:29" pos:end="281:29">=</operator> <call pos:start="281:31" pos:end="281:41"><name pos:start="281:31" pos:end="281:35">FIXHR</name><argument_list pos:start="281:36" pos:end="281:41">(<argument pos:start="281:37" pos:end="281:40"><expr pos:start="281:37" pos:end="281:40"><name pos:start="281:37" pos:end="281:38">ca</name><operator pos:start="281:39" pos:end="281:39">/</operator><literal type="number" pos:start="281:40" pos:end="281:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:56"><expr pos:start="283:13" pos:end="283:55"><name pos:start="283:13" pos:end="283:27"><name pos:start="283:13" pos:end="283:21">csa_table</name><index pos:start="283:22" pos:end="283:24">[<expr pos:start="283:23" pos:end="283:23"><name pos:start="283:23" pos:end="283:23">i</name></expr>]</index><index pos:start="283:25" pos:end="283:27">[<expr pos:start="283:26" pos:end="283:26"><literal type="number" pos:start="283:26" pos:end="283:26">2</literal></expr>]</index></name> <operator pos:start="283:29" pos:end="283:29">=</operator> <call pos:start="283:31" pos:end="283:41"><name pos:start="283:31" pos:end="283:35">FIXHR</name><argument_list pos:start="283:36" pos:end="283:41">(<argument pos:start="283:37" pos:end="283:40"><expr pos:start="283:37" pos:end="283:40"><name pos:start="283:37" pos:end="283:38">ca</name><operator pos:start="283:39" pos:end="283:39">/</operator><literal type="number" pos:start="283:40" pos:end="283:40">4</literal></expr></argument>)</argument_list></call> <operator pos:start="283:43" pos:end="283:43">+</operator> <call pos:start="283:45" pos:end="283:55"><name pos:start="283:45" pos:end="283:49">FIXHR</name><argument_list pos:start="283:50" pos:end="283:55">(<argument pos:start="283:51" pos:end="283:54"><expr pos:start="283:51" pos:end="283:54"><name pos:start="283:51" pos:end="283:52">cs</name><operator pos:start="283:53" pos:end="283:53">/</operator><literal type="number" pos:start="283:54" pos:end="283:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:56"><expr pos:start="285:13" pos:end="285:55"><name pos:start="285:13" pos:end="285:27"><name pos:start="285:13" pos:end="285:21">csa_table</name><index pos:start="285:22" pos:end="285:24">[<expr pos:start="285:23" pos:end="285:23"><name pos:start="285:23" pos:end="285:23">i</name></expr>]</index><index pos:start="285:25" pos:end="285:27">[<expr pos:start="285:26" pos:end="285:26"><literal type="number" pos:start="285:26" pos:end="285:26">3</literal></expr>]</index></name> <operator pos:start="285:29" pos:end="285:29">=</operator> <call pos:start="285:31" pos:end="285:41"><name pos:start="285:31" pos:end="285:35">FIXHR</name><argument_list pos:start="285:36" pos:end="285:41">(<argument pos:start="285:37" pos:end="285:40"><expr pos:start="285:37" pos:end="285:40"><name pos:start="285:37" pos:end="285:38">ca</name><operator pos:start="285:39" pos:end="285:39">/</operator><literal type="number" pos:start="285:40" pos:end="285:40">4</literal></expr></argument>)</argument_list></call> <operator pos:start="285:43" pos:end="285:43">-</operator> <call pos:start="285:45" pos:end="285:55"><name pos:start="285:45" pos:end="285:49">FIXHR</name><argument_list pos:start="285:50" pos:end="285:55">(<argument pos:start="285:51" pos:end="285:54"><expr pos:start="285:51" pos:end="285:54"><name pos:start="285:51" pos:end="285:52">cs</name><operator pos:start="285:53" pos:end="285:53">/</operator><literal type="number" pos:start="285:54" pos:end="285:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

            <expr_stmt pos:start="287:13" pos:end="287:39"><expr pos:start="287:13" pos:end="287:38"><name pos:start="287:13" pos:end="287:33"><name pos:start="287:13" pos:end="287:27">csa_table_float</name><index pos:start="287:28" pos:end="287:30">[<expr pos:start="287:29" pos:end="287:29"><name pos:start="287:29" pos:end="287:29">i</name></expr>]</index><index pos:start="287:31" pos:end="287:33">[<expr pos:start="287:32" pos:end="287:32"><literal type="number" pos:start="287:32" pos:end="287:32">0</literal></expr>]</index></name> <operator pos:start="287:35" pos:end="287:35">=</operator> <name pos:start="287:37" pos:end="287:38">cs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:39"><expr pos:start="289:13" pos:end="289:38"><name pos:start="289:13" pos:end="289:33"><name pos:start="289:13" pos:end="289:27">csa_table_float</name><index pos:start="289:28" pos:end="289:30">[<expr pos:start="289:29" pos:end="289:29"><name pos:start="289:29" pos:end="289:29">i</name></expr>]</index><index pos:start="289:31" pos:end="289:33">[<expr pos:start="289:32" pos:end="289:32"><literal type="number" pos:start="289:32" pos:end="289:32">1</literal></expr>]</index></name> <operator pos:start="289:35" pos:end="289:35">=</operator> <name pos:start="289:37" pos:end="289:38">ca</name></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:44"><expr pos:start="291:13" pos:end="291:43"><name pos:start="291:13" pos:end="291:33"><name pos:start="291:13" pos:end="291:27">csa_table_float</name><index pos:start="291:28" pos:end="291:30">[<expr pos:start="291:29" pos:end="291:29"><name pos:start="291:29" pos:end="291:29">i</name></expr>]</index><index pos:start="291:31" pos:end="291:33">[<expr pos:start="291:32" pos:end="291:32"><literal type="number" pos:start="291:32" pos:end="291:32">2</literal></expr>]</index></name> <operator pos:start="291:35" pos:end="291:35">=</operator> <name pos:start="291:37" pos:end="291:38">ca</name> <operator pos:start="291:40" pos:end="291:40">+</operator> <name pos:start="291:42" pos:end="291:43">cs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:44"><expr pos:start="293:13" pos:end="293:43"><name pos:start="293:13" pos:end="293:33"><name pos:start="293:13" pos:end="293:27">csa_table_float</name><index pos:start="293:28" pos:end="293:30">[<expr pos:start="293:29" pos:end="293:29"><name pos:start="293:29" pos:end="293:29">i</name></expr>]</index><index pos:start="293:31" pos:end="293:33">[<expr pos:start="293:32" pos:end="293:32"><literal type="number" pos:start="293:32" pos:end="293:32">3</literal></expr>]</index></name> <operator pos:start="293:35" pos:end="293:35">=</operator> <name pos:start="293:37" pos:end="293:38">ca</name> <operator pos:start="293:40" pos:end="293:40">-</operator> <name pos:start="293:42" pos:end="293:43">cs</name></expr>;</expr_stmt> 

<comment type="line" pos:start="295:1" pos:end="295:84">//            printf("%d %d %d %d\n", FIX(cs), FIX(cs-1), FIX(ca), FIX(cs)-FIX(ca));</comment>

<comment type="line" pos:start="297:1" pos:end="297:79">//            av_log(NULL, AV_LOG_DEBUG,"%f %f %f %f\n", cs, ca, ca+cs, ca-cs);</comment>

        </block_content>}</block></for>



        <comment type="block" pos:start="303:9" pos:end="303:34">/* compute mdct windows */</comment>

        <for pos:start="305:9" pos:end="357:9">for<control pos:start="305:12" pos:end="305:25">(<init pos:start="305:13" pos:end="305:16"><expr pos:start="305:13" pos:end="305:15"><name pos:start="305:13" pos:end="305:13">i</name><operator pos:start="305:14" pos:end="305:14">=</operator><literal type="number" pos:start="305:15" pos:end="305:15">0</literal></expr>;</init><condition pos:start="305:17" pos:end="305:21"><expr pos:start="305:17" pos:end="305:20"><name pos:start="305:17" pos:end="305:17">i</name><operator pos:start="305:18" pos:end="305:18">&lt;</operator><literal type="number" pos:start="305:19" pos:end="305:20">36</literal></expr>;</condition><incr pos:start="305:22" pos:end="305:24"><expr pos:start="305:22" pos:end="305:24"><name pos:start="305:22" pos:end="305:22">i</name><operator pos:start="305:23" pos:end="305:24">++</operator></expr></incr>)</control> <block pos:start="305:27" pos:end="357:9">{<block_content pos:start="307:13" pos:end="355:13">

            <for pos:start="307:13" pos:end="355:13">for<control pos:start="307:16" pos:end="307:30">(<init pos:start="307:17" pos:end="307:20"><expr pos:start="307:17" pos:end="307:19"><name pos:start="307:17" pos:end="307:17">j</name><operator pos:start="307:18" pos:end="307:18">=</operator><literal type="number" pos:start="307:19" pos:end="307:19">0</literal></expr>;</init> <condition pos:start="307:22" pos:end="307:25"><expr pos:start="307:22" pos:end="307:24"><name pos:start="307:22" pos:end="307:22">j</name><operator pos:start="307:23" pos:end="307:23">&lt;</operator><literal type="number" pos:start="307:24" pos:end="307:24">4</literal></expr>;</condition> <incr pos:start="307:27" pos:end="307:29"><expr pos:start="307:27" pos:end="307:29"><name pos:start="307:27" pos:end="307:27">j</name><operator pos:start="307:28" pos:end="307:29">++</operator></expr></incr>)</control><block pos:start="307:31" pos:end="355:13">{<block_content pos:start="309:17" pos:end="351:59">

                <decl_stmt pos:start="309:17" pos:end="309:25"><decl pos:start="309:17" pos:end="309:24"><type pos:start="309:17" pos:end="309:22"><name pos:start="309:17" pos:end="309:22">double</name></type> <name pos:start="309:24" pos:end="309:24">d</name></decl>;</decl_stmt>

                

                <if_stmt pos:start="313:17" pos:end="315:29"><if pos:start="313:17" pos:end="315:29">if<condition pos:start="313:19" pos:end="313:36">(<expr pos:start="313:20" pos:end="313:35"><name pos:start="313:20" pos:end="313:20">j</name><operator pos:start="313:21" pos:end="313:22">==</operator><literal type="number" pos:start="313:23" pos:end="313:23">2</literal> <operator pos:start="313:25" pos:end="313:26">&amp;&amp;</operator> <name pos:start="313:28" pos:end="313:28">i</name><operator pos:start="313:29" pos:end="313:29">%</operator><literal type="number" pos:start="313:30" pos:end="313:30">3</literal> <operator pos:start="313:32" pos:end="313:33">!=</operator> <literal type="number" pos:start="313:35" pos:end="313:35">1</literal></expr>)</condition><block type="pseudo" pos:start="315:21" pos:end="315:29"><block_content pos:start="315:21" pos:end="315:29">

                    <continue pos:start="315:21" pos:end="315:29">continue;</continue></block_content></block></if></if_stmt>

                

                <expr_stmt pos:start="319:17" pos:end="319:48"><expr pos:start="319:17" pos:end="319:47"><name pos:start="319:17" pos:end="319:17">d</name><operator pos:start="319:18" pos:end="319:18">=</operator> <call pos:start="319:20" pos:end="319:47"><name pos:start="319:20" pos:end="319:22">sin</name><argument_list pos:start="319:23" pos:end="319:47">(<argument pos:start="319:24" pos:end="319:46"><expr pos:start="319:24" pos:end="319:46"><name pos:start="319:24" pos:end="319:27">M_PI</name> <operator pos:start="319:29" pos:end="319:29">*</operator> <operator pos:start="319:31" pos:end="319:31">(</operator><name pos:start="319:32" pos:end="319:32">i</name> <operator pos:start="319:34" pos:end="319:34">+</operator> <literal type="number" pos:start="319:36" pos:end="319:38">0.5</literal><operator pos:start="319:39" pos:end="319:39">)</operator> <operator pos:start="319:41" pos:end="319:41">/</operator> <literal type="number" pos:start="319:43" pos:end="319:46">36.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="321:17" pos:end="337:17"><if pos:start="321:17" pos:end="329:17">if<condition pos:start="321:19" pos:end="321:24">(<expr pos:start="321:20" pos:end="321:23"><name pos:start="321:20" pos:end="321:20">j</name><operator pos:start="321:21" pos:end="321:22">==</operator><literal type="number" pos:start="321:23" pos:end="321:23">1</literal></expr>)</condition><block pos:start="321:25" pos:end="329:17">{<block_content pos:start="323:21" pos:end="327:40">

                    <if_stmt pos:start="323:21" pos:end="327:40"><if pos:start="323:21" pos:end="323:40">if     <condition pos:start="323:28" pos:end="323:34">(<expr pos:start="323:29" pos:end="323:33"><name pos:start="323:29" pos:end="323:29">i</name><operator pos:start="323:30" pos:end="323:31">&gt;=</operator><literal type="number" pos:start="323:32" pos:end="323:33">30</literal></expr>)</condition><block type="pseudo" pos:start="323:36" pos:end="323:40"><block_content pos:start="323:36" pos:end="323:40"> <expr_stmt pos:start="323:36" pos:end="323:40"><expr pos:start="323:36" pos:end="323:39"><name pos:start="323:36" pos:end="323:36">d</name><operator pos:start="323:37" pos:end="323:37">=</operator> <literal type="number" pos:start="323:39" pos:end="323:39">0</literal></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="325:21" pos:end="325:72">else if<condition pos:start="325:28" pos:end="325:34">(<expr pos:start="325:29" pos:end="325:33"><name pos:start="325:29" pos:end="325:29">i</name><operator pos:start="325:30" pos:end="325:31">&gt;=</operator><literal type="number" pos:start="325:32" pos:end="325:33">24</literal></expr>)</condition><block type="pseudo" pos:start="325:36" pos:end="325:72"><block_content pos:start="325:36" pos:end="325:72"> <expr_stmt pos:start="325:36" pos:end="325:72"><expr pos:start="325:36" pos:end="325:71"><name pos:start="325:36" pos:end="325:36">d</name><operator pos:start="325:37" pos:end="325:37">=</operator> <call pos:start="325:39" pos:end="325:71"><name pos:start="325:39" pos:end="325:41">sin</name><argument_list pos:start="325:42" pos:end="325:71">(<argument pos:start="325:43" pos:end="325:70"><expr pos:start="325:43" pos:end="325:70"><name pos:start="325:43" pos:end="325:46">M_PI</name> <operator pos:start="325:48" pos:end="325:48">*</operator> <operator pos:start="325:50" pos:end="325:50">(</operator><name pos:start="325:51" pos:end="325:51">i</name> <operator pos:start="325:53" pos:end="325:53">-</operator> <literal type="number" pos:start="325:55" pos:end="325:58">18</literal> <operator pos:start="325:58" pos:end="325:58">+</operator> <literal type="number" pos:start="325:60" pos:end="325:62">0.5</literal><operator pos:start="325:63" pos:end="325:63">)</operator> <operator pos:start="325:65" pos:end="325:65">/</operator> <literal type="number" pos:start="325:67" pos:end="325:70">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="327:21" pos:end="327:40">else if<condition pos:start="327:28" pos:end="327:34">(<expr pos:start="327:29" pos:end="327:33"><name pos:start="327:29" pos:end="327:29">i</name><operator pos:start="327:30" pos:end="327:31">&gt;=</operator><literal type="number" pos:start="327:32" pos:end="327:33">18</literal></expr>)</condition><block type="pseudo" pos:start="327:36" pos:end="327:40"><block_content pos:start="327:36" pos:end="327:40"> <expr_stmt pos:start="327:36" pos:end="327:40"><expr pos:start="327:36" pos:end="327:39"><name pos:start="327:36" pos:end="327:36">d</name><operator pos:start="327:37" pos:end="327:37">=</operator> <literal type="number" pos:start="327:39" pos:end="327:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="329:18" pos:end="337:17">else if<condition pos:start="329:25" pos:end="329:30">(<expr pos:start="329:26" pos:end="329:29"><name pos:start="329:26" pos:end="329:26">j</name><operator pos:start="329:27" pos:end="329:28">==</operator><literal type="number" pos:start="329:29" pos:end="329:29">3</literal></expr>)</condition><block pos:start="329:31" pos:end="337:17">{<block_content pos:start="331:21" pos:end="335:40">

                    <if_stmt pos:start="331:21" pos:end="335:40"><if pos:start="331:21" pos:end="331:40">if     <condition pos:start="331:28" pos:end="331:34">(<expr pos:start="331:29" pos:end="331:33"><name pos:start="331:29" pos:end="331:29">i</name><operator pos:start="331:30" pos:end="331:30">&lt;</operator>  <literal type="number" pos:start="331:33" pos:end="331:33">6</literal></expr>)</condition><block type="pseudo" pos:start="331:36" pos:end="331:40"><block_content pos:start="331:36" pos:end="331:40"> <expr_stmt pos:start="331:36" pos:end="331:40"><expr pos:start="331:36" pos:end="331:39"><name pos:start="331:36" pos:end="331:36">d</name><operator pos:start="331:37" pos:end="331:37">=</operator> <literal type="number" pos:start="331:39" pos:end="331:39">0</literal></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="333:21" pos:end="333:72">else if<condition pos:start="333:28" pos:end="333:34">(<expr pos:start="333:29" pos:end="333:33"><name pos:start="333:29" pos:end="333:29">i</name><operator pos:start="333:30" pos:end="333:30">&lt;</operator> <literal type="number" pos:start="333:32" pos:end="333:33">12</literal></expr>)</condition><block type="pseudo" pos:start="333:36" pos:end="333:72"><block_content pos:start="333:36" pos:end="333:72"> <expr_stmt pos:start="333:36" pos:end="333:72"><expr pos:start="333:36" pos:end="333:71"><name pos:start="333:36" pos:end="333:36">d</name><operator pos:start="333:37" pos:end="333:37">=</operator> <call pos:start="333:39" pos:end="333:71"><name pos:start="333:39" pos:end="333:41">sin</name><argument_list pos:start="333:42" pos:end="333:71">(<argument pos:start="333:43" pos:end="333:70"><expr pos:start="333:43" pos:end="333:70"><name pos:start="333:43" pos:end="333:46">M_PI</name> <operator pos:start="333:48" pos:end="333:48">*</operator> <operator pos:start="333:50" pos:end="333:50">(</operator><name pos:start="333:51" pos:end="333:51">i</name> <operator pos:start="333:53" pos:end="333:53">-</operator>  <literal type="number" pos:start="333:56" pos:end="333:58">6</literal> <operator pos:start="333:58" pos:end="333:58">+</operator> <literal type="number" pos:start="333:60" pos:end="333:62">0.5</literal><operator pos:start="333:63" pos:end="333:63">)</operator> <operator pos:start="333:65" pos:end="333:65">/</operator> <literal type="number" pos:start="333:67" pos:end="333:70">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="335:21" pos:end="335:40">else if<condition pos:start="335:28" pos:end="335:34">(<expr pos:start="335:29" pos:end="335:33"><name pos:start="335:29" pos:end="335:29">i</name><operator pos:start="335:30" pos:end="335:30">&lt;</operator> <literal type="number" pos:start="335:32" pos:end="335:33">18</literal></expr>)</condition><block type="pseudo" pos:start="335:36" pos:end="335:40"><block_content pos:start="335:36" pos:end="335:40"> <expr_stmt pos:start="335:36" pos:end="335:40"><expr pos:start="335:36" pos:end="335:39"><name pos:start="335:36" pos:end="335:36">d</name><operator pos:start="335:37" pos:end="335:37">=</operator> <literal type="number" pos:start="335:39" pos:end="335:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="line" pos:start="339:17" pos:end="339:72">//merge last stage of imdct into the window coefficients</comment>

                <expr_stmt pos:start="341:17" pos:end="341:50"><expr pos:start="341:17" pos:end="341:49"><name pos:start="341:17" pos:end="341:17">d</name><operator pos:start="341:18" pos:end="341:19">*=</operator> <literal type="number" pos:start="341:21" pos:end="341:23">0.5</literal> <operator pos:start="341:25" pos:end="341:25">/</operator> <call pos:start="341:27" pos:end="341:49"><name pos:start="341:27" pos:end="341:29">cos</name><argument_list pos:start="341:30" pos:end="341:49">(<argument pos:start="341:31" pos:end="341:48"><expr pos:start="341:31" pos:end="341:48"><name pos:start="341:31" pos:end="341:34">M_PI</name><operator pos:start="341:35" pos:end="341:35">*</operator><operator pos:start="341:36" pos:end="341:36">(</operator><literal type="number" pos:start="341:37" pos:end="341:37">2</literal><operator pos:start="341:38" pos:end="341:38">*</operator><name pos:start="341:39" pos:end="341:39">i</name> <operator pos:start="341:41" pos:end="341:41">+</operator> <literal type="number" pos:start="341:43" pos:end="341:44">19</literal><operator pos:start="341:45" pos:end="341:45">)</operator><operator pos:start="341:46" pos:end="341:46">/</operator><literal type="number" pos:start="341:47" pos:end="341:48">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="345:17" pos:end="351:59"><if pos:start="345:17" pos:end="347:59">if<condition pos:start="345:19" pos:end="345:24">(<expr pos:start="345:20" pos:end="345:23"><name pos:start="345:20" pos:end="345:20">j</name><operator pos:start="345:21" pos:end="345:22">==</operator><literal type="number" pos:start="345:23" pos:end="345:23">2</literal></expr>)</condition><block type="pseudo" pos:start="347:21" pos:end="347:59"><block_content pos:start="347:21" pos:end="347:59">

                    <expr_stmt pos:start="347:21" pos:end="347:59"><expr pos:start="347:21" pos:end="347:58"><name pos:start="347:21" pos:end="347:36"><name pos:start="347:21" pos:end="347:28">mdct_win</name><index pos:start="347:29" pos:end="347:31">[<expr pos:start="347:30" pos:end="347:30"><name pos:start="347:30" pos:end="347:30">j</name></expr>]</index><index pos:start="347:32" pos:end="347:36">[<expr pos:start="347:33" pos:end="347:35"><name pos:start="347:33" pos:end="347:33">i</name><operator pos:start="347:34" pos:end="347:34">/</operator><literal type="number" pos:start="347:35" pos:end="347:35">3</literal></expr>]</index></name> <operator pos:start="347:38" pos:end="347:38">=</operator> <call pos:start="347:40" pos:end="347:58"><name pos:start="347:40" pos:end="347:44">FIXHR</name><argument_list pos:start="347:45" pos:end="347:58">(<argument pos:start="347:46" pos:end="347:57"><expr pos:start="347:46" pos:end="347:57"><operator pos:start="347:46" pos:end="347:46">(</operator><name pos:start="347:47" pos:end="347:47">d</name> <operator pos:start="347:49" pos:end="347:49">/</operator> <operator pos:start="347:51" pos:end="347:51">(</operator><literal type="number" pos:start="347:52" pos:end="347:52">1</literal><operator pos:start="347:53" pos:end="347:54">&lt;&lt;</operator><literal type="number" pos:start="347:55" pos:end="347:55">5</literal><operator pos:start="347:56" pos:end="347:56">)</operator><operator pos:start="347:57" pos:end="347:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="349:17" pos:end="351:59">else<block type="pseudo" pos:start="351:21" pos:end="351:59"><block_content pos:start="351:21" pos:end="351:59">

                    <expr_stmt pos:start="351:21" pos:end="351:59"><expr pos:start="351:21" pos:end="351:58"><name pos:start="351:21" pos:end="351:36"><name pos:start="351:21" pos:end="351:28">mdct_win</name><index pos:start="351:29" pos:end="351:31">[<expr pos:start="351:30" pos:end="351:30"><name pos:start="351:30" pos:end="351:30">j</name></expr>]</index><index pos:start="351:32" pos:end="351:36">[<expr pos:start="351:33" pos:end="351:33"><name pos:start="351:33" pos:end="351:33">i</name></expr>  ]</index></name> <operator pos:start="351:38" pos:end="351:38">=</operator> <call pos:start="351:40" pos:end="351:58"><name pos:start="351:40" pos:end="351:44">FIXHR</name><argument_list pos:start="351:45" pos:end="351:58">(<argument pos:start="351:46" pos:end="351:57"><expr pos:start="351:46" pos:end="351:57"><operator pos:start="351:46" pos:end="351:46">(</operator><name pos:start="351:47" pos:end="351:47">d</name> <operator pos:start="351:49" pos:end="351:49">/</operator> <operator pos:start="351:51" pos:end="351:51">(</operator><literal type="number" pos:start="351:52" pos:end="351:52">1</literal><operator pos:start="351:53" pos:end="351:54">&lt;&lt;</operator><literal type="number" pos:start="351:55" pos:end="351:55">5</literal><operator pos:start="351:56" pos:end="351:56">)</operator><operator pos:start="351:57" pos:end="351:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<comment type="line" pos:start="353:1" pos:end="353:76">//                av_log(NULL, AV_LOG_DEBUG, "%2d %d %f\n", i,j,d / (1&lt;&lt;5));</comment>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <comment type="block" pos:start="361:9" pos:end="363:48">/* NOTE: we do frequency inversion adter the MDCT by changing

           the sign of the right window coefs */</comment>

        <for pos:start="365:9" pos:end="380:0">for<control pos:start="365:12" pos:end="365:24">(<init pos:start="365:13" pos:end="365:16"><expr pos:start="365:13" pos:end="365:15"><name pos:start="365:13" pos:end="365:13">j</name><operator pos:start="365:14" pos:end="365:14">=</operator><literal type="number" pos:start="365:15" pos:end="365:15">0</literal></expr>;</init><condition pos:start="365:17" pos:end="365:20"><expr pos:start="365:17" pos:end="365:19"><name pos:start="365:17" pos:end="365:17">j</name><operator pos:start="365:18" pos:end="365:18">&lt;</operator><literal type="number" pos:start="365:19" pos:end="365:19">4</literal></expr>;</condition><incr pos:start="365:21" pos:end="365:23"><expr pos:start="365:21" pos:end="365:23"><name pos:start="365:21" pos:end="365:21">j</name><operator pos:start="365:22" pos:end="365:23">++</operator></expr></incr>)</control> <block pos:start="365:26" pos:end="380:0">{<block_content pos:start="367:13" pos:end="373:13">

            <for pos:start="367:13" pos:end="373:13">for<control pos:start="367:16" pos:end="367:30">(<init pos:start="367:17" pos:end="367:20"><expr pos:start="367:17" pos:end="367:19"><name pos:start="367:17" pos:end="367:17">i</name><operator pos:start="367:18" pos:end="367:18">=</operator><literal type="number" pos:start="367:19" pos:end="367:19">0</literal></expr>;</init><condition pos:start="367:21" pos:end="367:25"><expr pos:start="367:21" pos:end="367:24"><name pos:start="367:21" pos:end="367:21">i</name><operator pos:start="367:22" pos:end="367:22">&lt;</operator><literal type="number" pos:start="367:23" pos:end="367:24">36</literal></expr>;</condition><incr pos:start="367:26" pos:end="367:29"><expr pos:start="367:26" pos:end="367:29"><name pos:start="367:26" pos:end="367:26">i</name><operator pos:start="367:27" pos:end="367:28">+=</operator><literal type="number" pos:start="367:29" pos:end="367:29">2</literal></expr></incr>)</control> <block pos:start="367:32" pos:end="373:13">{<block_content pos:start="369:17" pos:end="371:61">

                <expr_stmt pos:start="369:17" pos:end="369:52"><expr pos:start="369:17" pos:end="369:51"><name pos:start="369:17" pos:end="369:34"><name pos:start="369:17" pos:end="369:24">mdct_win</name><index pos:start="369:25" pos:end="369:31">[<expr pos:start="369:26" pos:end="369:30"><name pos:start="369:26" pos:end="369:26">j</name> <operator pos:start="369:28" pos:end="369:28">+</operator> <literal type="number" pos:start="369:30" pos:end="369:30">4</literal></expr>]</index><index pos:start="369:32" pos:end="369:34">[<expr pos:start="369:33" pos:end="369:33"><name pos:start="369:33" pos:end="369:33">i</name></expr>]</index></name> <operator pos:start="369:36" pos:end="369:36">=</operator> <name pos:start="369:38" pos:end="369:51"><name pos:start="369:38" pos:end="369:45">mdct_win</name><index pos:start="369:46" pos:end="369:48">[<expr pos:start="369:47" pos:end="369:47"><name pos:start="369:47" pos:end="369:47">j</name></expr>]</index><index pos:start="369:49" pos:end="369:51">[<expr pos:start="369:50" pos:end="369:50"><name pos:start="369:50" pos:end="369:50">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="371:17" pos:end="371:61"><expr pos:start="371:17" pos:end="371:60"><name pos:start="371:17" pos:end="371:38"><name pos:start="371:17" pos:end="371:24">mdct_win</name><index pos:start="371:25" pos:end="371:31">[<expr pos:start="371:26" pos:end="371:30"><name pos:start="371:26" pos:end="371:26">j</name> <operator pos:start="371:28" pos:end="371:28">+</operator> <literal type="number" pos:start="371:30" pos:end="371:30">4</literal></expr>]</index><index pos:start="371:32" pos:end="371:38">[<expr pos:start="371:33" pos:end="371:37"><name pos:start="371:33" pos:end="371:33">i</name> <operator pos:start="371:35" pos:end="371:35">+</operator> <literal type="number" pos:start="371:37" pos:end="371:37">1</literal></expr>]</index></name> <operator pos:start="371:40" pos:end="371:40">=</operator> <operator pos:start="371:42" pos:end="371:42">-</operator><name pos:start="371:43" pos:end="371:60"><name pos:start="371:43" pos:end="371:50">mdct_win</name><index pos:start="371:51" pos:end="371:53">[<expr pos:start="371:52" pos:end="371:52"><name pos:start="371:52" pos:end="371:52">j</name></expr>]</index><index pos:start="371:54" pos:end="371:60">[<expr pos:start="371:55" pos:end="371:59"><name pos:start="371:55" pos:end="371:55">i</name> <operator pos:start="371:57" pos:end="371:57">+</operator> <literal type="number" pos:start="371:59" pos:end="371:59">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



<cpp:if pos:start="379:1" pos:end="379:18">#<cpp:directive pos:start="379:2" pos:end="379:3">if</cpp:directive> <expr pos:start="379:5" pos:end="379:18"><call pos:start="379:5" pos:end="379:18"><name pos:start="379:5" pos:end="379:11">defined</name><argument_list pos:start="379:12" pos:end="379:18">(<argument pos:start="379:13" pos:end="379:17"><expr pos:start="379:13" pos:end="379:17"><name pos:start="379:13" pos:end="379:17">DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <for pos:start="381:9" pos:end="394:0">for<control pos:start="381:12" pos:end="381:24">(<init pos:start="381:13" pos:end="381:16"><expr pos:start="381:13" pos:end="381:15"><name pos:start="381:13" pos:end="381:13">j</name><operator pos:start="381:14" pos:end="381:14">=</operator><literal type="number" pos:start="381:15" pos:end="381:15">0</literal></expr>;</init><condition pos:start="381:17" pos:end="381:20"><expr pos:start="381:17" pos:end="381:19"><name pos:start="381:17" pos:end="381:17">j</name><operator pos:start="381:18" pos:end="381:18">&lt;</operator><literal type="number" pos:start="381:19" pos:end="381:19">8</literal></expr>;</condition><incr pos:start="381:21" pos:end="381:23"><expr pos:start="381:21" pos:end="381:23"><name pos:start="381:21" pos:end="381:21">j</name><operator pos:start="381:22" pos:end="381:23">++</operator></expr></incr>)</control> <block pos:start="381:26" pos:end="394:0">{<block_content pos:start="383:13" pos:end="389:25">

            <expr_stmt pos:start="383:13" pos:end="383:34"><expr pos:start="383:13" pos:end="383:33"><call pos:start="383:13" pos:end="383:33"><name pos:start="383:13" pos:end="383:18">printf</name><argument_list pos:start="383:19" pos:end="383:33">(<argument pos:start="383:20" pos:end="383:29"><expr pos:start="383:20" pos:end="383:29"><literal type="string" pos:start="383:20" pos:end="383:29">"win%d=\n"</literal></expr></argument>, <argument pos:start="383:32" pos:end="383:32"><expr pos:start="383:32" pos:end="383:32"><name pos:start="383:32" pos:end="383:32">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="385:13" pos:end="387:66">for<control pos:start="385:16" pos:end="385:29">(<init pos:start="385:17" pos:end="385:20"><expr pos:start="385:17" pos:end="385:19"><name pos:start="385:17" pos:end="385:17">i</name><operator pos:start="385:18" pos:end="385:18">=</operator><literal type="number" pos:start="385:19" pos:end="385:19">0</literal></expr>;</init><condition pos:start="385:21" pos:end="385:25"><expr pos:start="385:21" pos:end="385:24"><name pos:start="385:21" pos:end="385:21">i</name><operator pos:start="385:22" pos:end="385:22">&lt;</operator><literal type="number" pos:start="385:23" pos:end="385:24">36</literal></expr>;</condition><incr pos:start="385:26" pos:end="385:28"><expr pos:start="385:26" pos:end="385:28"><name pos:start="385:26" pos:end="385:26">i</name><operator pos:start="385:27" pos:end="385:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="387:17" pos:end="387:66"><block_content pos:start="387:17" pos:end="387:66">

                <expr_stmt pos:start="387:17" pos:end="387:66"><expr pos:start="387:17" pos:end="387:65"><call pos:start="387:17" pos:end="387:65"><name pos:start="387:17" pos:end="387:22">printf</name><argument_list pos:start="387:23" pos:end="387:65">(<argument pos:start="387:24" pos:end="387:29"><expr pos:start="387:24" pos:end="387:29"><literal type="string" pos:start="387:24" pos:end="387:29">"%f, "</literal></expr></argument>, <argument pos:start="387:32" pos:end="387:64"><expr pos:start="387:32" pos:end="387:64"><operator pos:start="387:32" pos:end="387:32">(</operator><name pos:start="387:33" pos:end="387:38">double</name><operator pos:start="387:39" pos:end="387:39">)</operator><name pos:start="387:40" pos:end="387:53"><name pos:start="387:40" pos:end="387:47">mdct_win</name><index pos:start="387:48" pos:end="387:50">[<expr pos:start="387:49" pos:end="387:49"><name pos:start="387:49" pos:end="387:49">j</name></expr>]</index><index pos:start="387:51" pos:end="387:53">[<expr pos:start="387:52" pos:end="387:52"><name pos:start="387:52" pos:end="387:52">i</name></expr>]</index></name> <operator pos:start="387:55" pos:end="387:55">/</operator> <name pos:start="387:57" pos:end="387:64">FRAC_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="389:13" pos:end="389:25"><expr pos:start="389:13" pos:end="389:24"><call pos:start="389:13" pos:end="389:24"><name pos:start="389:13" pos:end="389:18">printf</name><argument_list pos:start="389:19" pos:end="389:24">(<argument pos:start="389:20" pos:end="389:23"><expr pos:start="389:20" pos:end="389:23"><literal type="string" pos:start="389:20" pos:end="389:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:endif pos:start="393:1" pos:end="393:6">#<cpp:directive pos:start="393:2" pos:end="393:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="395:9" pos:end="395:17"><expr pos:start="395:9" pos:end="395:16"><name pos:start="395:9" pos:end="395:12">init</name> <operator pos:start="395:14" pos:end="395:14">=</operator> <literal type="number" pos:start="395:16" pos:end="395:16">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="401:5" pos:end="401:23"><expr pos:start="401:5" pos:end="401:22"><name pos:start="401:5" pos:end="401:18"><name pos:start="401:5" pos:end="401:5">s</name><operator pos:start="401:6" pos:end="401:7">-&gt;</operator><name pos:start="401:8" pos:end="401:18">inbuf_index</name></name> <operator pos:start="401:20" pos:end="401:20">=</operator> <literal type="number" pos:start="401:22" pos:end="401:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:57"><expr pos:start="403:5" pos:end="403:56"><name pos:start="403:5" pos:end="403:12"><name pos:start="403:5" pos:end="403:5">s</name><operator pos:start="403:6" pos:end="403:7">-&gt;</operator><name pos:start="403:8" pos:end="403:12">inbuf</name></name> <operator pos:start="403:14" pos:end="403:14">=</operator> <operator pos:start="403:16" pos:end="403:16">&amp;</operator><name pos:start="403:17" pos:end="403:56"><name pos:start="403:17" pos:end="403:17">s</name><operator pos:start="403:18" pos:end="403:19">-&gt;</operator><name pos:start="403:20" pos:end="403:25">inbuf1</name><index pos:start="403:26" pos:end="403:41">[<expr pos:start="403:27" pos:end="403:40"><name pos:start="403:27" pos:end="403:40"><name pos:start="403:27" pos:end="403:27">s</name><operator pos:start="403:28" pos:end="403:29">-&gt;</operator><name pos:start="403:30" pos:end="403:40">inbuf_index</name></name></expr>]</index><index pos:start="403:42" pos:end="403:56">[<expr pos:start="403:43" pos:end="403:55"><name pos:start="403:43" pos:end="403:55">BACKSTEP_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="408:0"><expr pos:start="405:5" pos:end="405:27"><name pos:start="405:5" pos:end="405:16"><name pos:start="405:5" pos:end="405:5">s</name><operator pos:start="405:6" pos:end="405:7">-&gt;</operator><name pos:start="405:8" pos:end="405:16">inbuf_ptr</name></name> <operator pos:start="405:18" pos:end="405:18">=</operator> <name pos:start="405:20" pos:end="405:27"><name pos:start="405:20" pos:end="405:20">s</name><operator pos:start="405:21" pos:end="405:22">-&gt;</operator><name pos:start="405:23" pos:end="405:27">inbuf</name></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="407:1" pos:end="407:12">#<cpp:directive pos:start="407:2" pos:end="407:6">ifdef</cpp:directive> <name pos:start="407:8" pos:end="407:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="409:5" pos:end="412:0"><expr pos:start="409:5" pos:end="409:22"><name pos:start="409:5" pos:end="409:18"><name pos:start="409:5" pos:end="409:5">s</name><operator pos:start="409:6" pos:end="409:7">-&gt;</operator><name pos:start="409:8" pos:end="409:18">frame_count</name></name> <operator pos:start="409:20" pos:end="409:20">=</operator> <literal type="number" pos:start="409:22" pos:end="409:22">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="411:1" pos:end="411:6">#<cpp:directive pos:start="411:2" pos:end="411:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="413:5" pos:end="415:24"><if pos:start="413:5" pos:end="415:24">if <condition pos:start="413:8" pos:end="413:43">(<expr pos:start="413:9" pos:end="413:42"><name pos:start="413:9" pos:end="413:23"><name pos:start="413:9" pos:end="413:13">avctx</name><operator pos:start="413:14" pos:end="413:15">-&gt;</operator><name pos:start="413:16" pos:end="413:23">codec_id</name></name> <operator pos:start="413:25" pos:end="413:26">==</operator> <name pos:start="413:28" pos:end="413:42">CODEC_ID_MP3ADU</name></expr>)</condition><block type="pseudo" pos:start="415:9" pos:end="415:24"><block_content pos:start="415:9" pos:end="415:24">

        <expr_stmt pos:start="415:9" pos:end="415:24"><expr pos:start="415:9" pos:end="415:23"><name pos:start="415:9" pos:end="415:19"><name pos:start="415:9" pos:end="415:9">s</name><operator pos:start="415:10" pos:end="415:11">-&gt;</operator><name pos:start="415:12" pos:end="415:19">adu_mode</name></name> <operator pos:start="415:21" pos:end="415:21">=</operator> <literal type="number" pos:start="415:23" pos:end="415:23">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="417:5" pos:end="417:13">return <expr pos:start="417:12" pos:end="417:12"><literal type="number" pos:start="417:12" pos:end="417:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
