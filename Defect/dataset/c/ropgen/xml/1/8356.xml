<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8356.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">build_fs_mount_list_from_mtab</name><parameter_list pos:start="1:42" pos:end="1:76">(<parameter pos:start="1:43" pos:end="1:61"><decl pos:start="1:43" pos:end="1:61"><type pos:start="1:43" pos:end="1:61"><name pos:start="1:43" pos:end="1:53">FsMountList</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:61">mounts</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:68">Error</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier><modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:75">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:18">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:17">mntent</name></name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">ment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">FsMount</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">mount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:8">char</name> <specifier pos:start="9:10" pos:end="9:14">const</specifier> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:20">mtab</name> <init pos:start="9:22" pos:end="9:42">= <expr pos:start="9:24" pos:end="9:42"><literal type="string" pos:start="9:24" pos:end="9:42">"/proc/self/mounts"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">FILE</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:12">fp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:25">devmajor</name></decl>, <decl pos:start="13:28" pos:end="13:35"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:28" pos:end="13:35">devminor</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:6">fp</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <call pos:start="17:10" pos:end="17:29"><name pos:start="17:10" pos:end="17:18">setmntent</name><argument_list pos:start="17:19" pos:end="17:29">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">mtab</name></expr></argument>, <argument pos:start="17:26" pos:end="17:28"><expr pos:start="17:26" pos:end="17:28"><literal type="string" pos:start="17:26" pos:end="17:28">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:12">(<expr pos:start="19:9" pos:end="19:11"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:11">fp</name></expr>)</condition> <block pos:start="19:14" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><call pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:64">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:57"><expr pos:start="21:26" pos:end="21:57"><literal type="string" pos:start="21:26" pos:end="21:57">"failed to open mtab file: '%s'"</literal></expr></argument>, <argument pos:start="21:60" pos:end="21:63"><expr pos:start="21:60" pos:end="21:63"><name pos:start="21:60" pos:end="21:63">mtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="29:5" pos:end="77:5">while <condition pos:start="29:11" pos:end="29:34">(<expr pos:start="29:12" pos:end="29:33"><operator pos:start="29:12" pos:end="29:12">(</operator><name pos:start="29:13" pos:end="29:16">ment</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:32"><name pos:start="29:20" pos:end="29:28">getmntent</name><argument_list pos:start="29:29" pos:end="29:32">(<argument pos:start="29:30" pos:end="29:31"><expr pos:start="29:30" pos:end="29:31"><name pos:start="29:30" pos:end="29:31">fp</name></expr></argument>)</argument_list></call><operator pos:start="29:33" pos:end="29:33">)</operator></expr>)</condition> <block pos:start="29:36" pos:end="77:5">{<block_content pos:start="43:9" pos:end="75:48">

        <comment type="block" pos:start="31:9" pos:end="41:11">/*

         * An entry which device name doesn't start with a '/' is

         * either a dummy file system or a network file system.

         * Add special handling for smbfs and cifs as is done by

         * coreutils as well.

         */</comment>

        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="47:50">(<expr pos:start="43:13" pos:end="47:49"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:32"><name pos:start="43:14" pos:end="43:17">ment</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:29">mnt_fsname</name><index pos:start="43:30" pos:end="43:32">[<expr pos:start="43:31" pos:end="43:31"><literal type="number" pos:start="43:31" pos:end="43:31">0</literal></expr>]</index></name> <operator pos:start="43:34" pos:end="43:35">!=</operator> <literal type="char" pos:start="43:37" pos:end="43:39">'/'</literal><operator pos:start="43:40" pos:end="43:40">)</operator> <operator pos:start="43:42" pos:end="43:43">||</operator>

            <operator pos:start="45:13" pos:end="45:13">(</operator><call pos:start="45:14" pos:end="45:44"><name pos:start="45:14" pos:end="45:19">strcmp</name><argument_list pos:start="45:20" pos:end="45:44">(<argument pos:start="45:21" pos:end="45:34"><expr pos:start="45:21" pos:end="45:34"><name pos:start="45:21" pos:end="45:34"><name pos:start="45:21" pos:end="45:24">ment</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:34">mnt_type</name></name></expr></argument>, <argument pos:start="45:37" pos:end="45:43"><expr pos:start="45:37" pos:end="45:43"><literal type="string" pos:start="45:37" pos:end="45:43">"smbfs"</literal></expr></argument>)</argument_list></call> <operator pos:start="45:46" pos:end="45:47">==</operator> <literal type="number" pos:start="45:49" pos:end="45:49">0</literal><operator pos:start="45:50" pos:end="45:50">)</operator> <operator pos:start="45:52" pos:end="45:53">||</operator>

            <operator pos:start="47:13" pos:end="47:13">(</operator><call pos:start="47:14" pos:end="47:43"><name pos:start="47:14" pos:end="47:19">strcmp</name><argument_list pos:start="47:20" pos:end="47:43">(<argument pos:start="47:21" pos:end="47:34"><expr pos:start="47:21" pos:end="47:34"><name pos:start="47:21" pos:end="47:34"><name pos:start="47:21" pos:end="47:24">ment</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:34">mnt_type</name></name></expr></argument>, <argument pos:start="47:37" pos:end="47:42"><expr pos:start="47:37" pos:end="47:42"><literal type="string" pos:start="47:37" pos:end="47:42">"cifs"</literal></expr></argument>)</argument_list></call> <operator pos:start="47:45" pos:end="47:46">==</operator> <literal type="number" pos:start="47:48" pos:end="47:48">0</literal><operator pos:start="47:49" pos:end="47:49">)</operator></expr>)</condition> <block pos:start="47:52" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:21">

            <continue pos:start="49:13" pos:end="49:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:74">(<expr pos:start="53:13" pos:end="53:73"><call pos:start="53:13" pos:end="53:67"><name pos:start="53:13" pos:end="53:27">dev_major_minor</name><argument_list pos:start="53:28" pos:end="53:67">(<argument pos:start="53:29" pos:end="53:44"><expr pos:start="53:29" pos:end="53:44"><name pos:start="53:29" pos:end="53:44"><name pos:start="53:29" pos:end="53:32">ment</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:44">mnt_fsname</name></name></expr></argument>, <argument pos:start="53:47" pos:end="53:55"><expr pos:start="53:47" pos:end="53:55"><operator pos:start="53:47" pos:end="53:47">&amp;</operator><name pos:start="53:48" pos:end="53:55">devmajor</name></expr></argument>, <argument pos:start="53:58" pos:end="53:66"><expr pos:start="53:58" pos:end="53:66"><operator pos:start="53:58" pos:end="53:58">&amp;</operator><name pos:start="53:59" pos:end="53:66">devminor</name></expr></argument>)</argument_list></call> <operator pos:start="53:69" pos:end="53:70">==</operator> <operator pos:start="53:72" pos:end="53:72">-</operator><literal type="number" pos:start="53:73" pos:end="53:73">2</literal></expr>)</condition> <block pos:start="53:76" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:21">

            <comment type="block" pos:start="55:13" pos:end="55:34">/* Skip bind mounts */</comment>

            <continue pos:start="57:13" pos:end="57:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:43"><expr pos:start="63:9" pos:end="63:42"><name pos:start="63:9" pos:end="63:13">mount</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:42"><name pos:start="63:17" pos:end="63:25">g_malloc0</name><argument_list pos:start="63:26" pos:end="63:42">(<argument pos:start="63:27" pos:end="63:41"><expr pos:start="63:27" pos:end="63:41"><sizeof pos:start="63:27" pos:end="63:41">sizeof<argument_list pos:start="63:33" pos:end="63:41">(<argument pos:start="63:34" pos:end="63:40"><expr pos:start="63:34" pos:end="63:40"><name pos:start="63:34" pos:end="63:40">FsMount</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:13">mount</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:22">dirname</name></name> <operator pos:start="65:24" pos:end="65:24">=</operator> <call pos:start="65:26" pos:end="65:48"><name pos:start="65:26" pos:end="65:33">g_strdup</name><argument_list pos:start="65:34" pos:end="65:48">(<argument pos:start="65:35" pos:end="65:47"><expr pos:start="65:35" pos:end="65:47"><name pos:start="65:35" pos:end="65:47"><name pos:start="65:35" pos:end="65:38">ment</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:47">mnt_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:50"><expr pos:start="67:9" pos:end="67:49"><name pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:13">mount</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:22">devtype</name></name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="67:49"><name pos:start="67:26" pos:end="67:33">g_strdup</name><argument_list pos:start="67:34" pos:end="67:49">(<argument pos:start="67:35" pos:end="67:48"><expr pos:start="67:35" pos:end="67:48"><name pos:start="67:35" pos:end="67:48"><name pos:start="67:35" pos:end="67:38">ment</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:48">mnt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:13">mount</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:23">devmajor</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:34">devmajor</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:35"><expr pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:13">mount</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:23">devminor</name></name> <operator pos:start="71:25" pos:end="71:25">=</operator> <name pos:start="71:27" pos:end="71:34">devminor</name></expr>;</expr_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><call pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="75:27" pos:end="75:47">(<argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">mounts</name></expr></argument>, <argument pos:start="75:36" pos:end="75:40"><expr pos:start="75:36" pos:end="75:40"><name pos:start="75:36" pos:end="75:40">mount</name></expr></argument>, <argument pos:start="75:43" pos:end="75:46"><expr pos:start="75:43" pos:end="75:46"><name pos:start="75:43" pos:end="75:46">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="81:5" pos:end="81:18"><expr pos:start="81:5" pos:end="81:17"><call pos:start="81:5" pos:end="81:17"><name pos:start="81:5" pos:end="81:13">endmntent</name><argument_list pos:start="81:14" pos:end="81:17">(<argument pos:start="81:15" pos:end="81:16"><expr pos:start="81:15" pos:end="81:16"><name pos:start="81:15" pos:end="81:16">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
