<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18631.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">mtv_read_packet</name><parameter_list pos:start="1:27" pos:end="1:61">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:55">AVPacket</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:15">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">MTVDemuxContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">mtv</name> <init pos:start="5:26" pos:end="5:39">= <expr pos:start="5:28" pos:end="5:39"><name pos:start="5:28" pos:end="5:39"><name pos:start="5:28" pos:end="5:28">s</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ByteIOContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">pb</name> <init pos:start="7:23" pos:end="7:29">= <expr pos:start="7:25" pos:end="7:29"><name pos:start="7:25" pos:end="7:29"><name pos:start="7:25" pos:end="7:25">s</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:29">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

<cpp:if pos:start="11:1" pos:end="11:19">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:19"><operator pos:start="11:5" pos:end="11:5">!</operator><name pos:start="11:6" pos:end="11:19">HAVE_BIGENDIAN</name></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="19:5" pos:end="77:5"><if pos:start="19:5" pos:end="41:5">if<condition pos:start="19:7" pos:end="19:89">(<expr pos:start="19:8" pos:end="19:88"><operator pos:start="19:8" pos:end="19:8">(</operator><call pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:17">url_ftell</name><argument_list pos:start="19:18" pos:end="19:21">(<argument pos:start="19:19" pos:end="19:20"><expr pos:start="19:19" pos:end="19:20"><name pos:start="19:19" pos:end="19:20">pb</name></expr></argument>)</argument_list></call> <operator pos:start="19:23" pos:end="19:23">-</operator> <name pos:start="19:25" pos:end="19:38"><name pos:start="19:25" pos:end="19:25">s</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:38">data_offset</name></name> <operator pos:start="19:40" pos:end="19:40">+</operator> <name pos:start="19:42" pos:end="19:62"><name pos:start="19:42" pos:end="19:44">mtv</name><operator pos:start="19:45" pos:end="19:46">-&gt;</operator><name pos:start="19:47" pos:end="19:62">img_segment_size</name></name><operator pos:start="19:63" pos:end="19:63">)</operator> <operator pos:start="19:65" pos:end="19:65">%</operator> <name pos:start="19:67" pos:end="19:88"><name pos:start="19:67" pos:end="19:69">mtv</name><operator pos:start="19:70" pos:end="19:71">-&gt;</operator><name pos:start="19:72" pos:end="19:88">full_segment_size</name></name></expr>)</condition>

    <block pos:start="21:5" pos:end="41:5">{<block_content pos:start="23:9" pos:end="37:38">

        <expr_stmt pos:start="23:9" pos:end="23:46"><expr pos:start="23:9" pos:end="23:45"><call pos:start="23:9" pos:end="23:45"><name pos:start="23:9" pos:end="23:17">url_fskip</name><argument_list pos:start="23:18" pos:end="23:45">(<argument pos:start="23:19" pos:end="23:20"><expr pos:start="23:19" pos:end="23:20"><name pos:start="23:19" pos:end="23:20">pb</name></expr></argument>, <argument pos:start="23:23" pos:end="23:44"><expr pos:start="23:23" pos:end="23:44"><name pos:start="23:23" pos:end="23:44">MTV_AUDIO_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:62"><expr pos:start="27:9" pos:end="27:61"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:61"><name pos:start="27:15" pos:end="27:27">av_get_packet</name><argument_list pos:start="27:28" pos:end="27:61">(<argument pos:start="27:29" pos:end="27:30"><expr pos:start="27:29" pos:end="27:30"><name pos:start="27:29" pos:end="27:30">pb</name></expr></argument>, <argument pos:start="27:33" pos:end="27:35"><expr pos:start="27:33" pos:end="27:35"><name pos:start="27:33" pos:end="27:35">pkt</name></expr></argument>, <argument pos:start="27:38" pos:end="27:60"><expr pos:start="27:38" pos:end="27:60"><name pos:start="27:38" pos:end="27:60">MTV_ASUBCHUNK_DATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="31:32"><if pos:start="29:9" pos:end="31:32">if<condition pos:start="29:11" pos:end="29:42">(<expr pos:start="29:12" pos:end="29:41"><name pos:start="29:12" pos:end="29:14">ret</name> <operator pos:start="29:16" pos:end="29:17">!=</operator> <name pos:start="29:19" pos:end="29:41">MTV_ASUBCHUNK_DATA_SIZE</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:32"><block_content pos:start="31:13" pos:end="31:32">

            <return pos:start="31:13" pos:end="31:32">return <expr pos:start="31:20" pos:end="31:31"><call pos:start="31:20" pos:end="31:31"><name pos:start="31:20" pos:end="31:26">AVERROR</name><argument_list pos:start="31:27" pos:end="31:31">(<argument pos:start="31:28" pos:end="31:30"><expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:43"><expr pos:start="35:9" pos:end="35:42"><name pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:11">pkt</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:16">pos</name></name> <operator pos:start="35:18" pos:end="35:19">-=</operator> <name pos:start="35:21" pos:end="35:42">MTV_AUDIO_PADDING_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:38"><expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:11">pkt</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:25">stream_index</name></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:37">AUDIO_SID</name></expr>;</expr_stmt>



    </block_content>}</block></if><else pos:start="41:6" pos:end="77:5">else

    <block pos:start="43:5" pos:end="77:5">{<block_content pos:start="45:9" pos:end="75:38">

        <expr_stmt pos:start="45:9" pos:end="45:60"><expr pos:start="45:9" pos:end="45:59"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:59"><name pos:start="45:15" pos:end="45:27">av_get_packet</name><argument_list pos:start="45:28" pos:end="45:59">(<argument pos:start="45:29" pos:end="45:30"><expr pos:start="45:29" pos:end="45:30"><name pos:start="45:29" pos:end="45:30">pb</name></expr></argument>, <argument pos:start="45:33" pos:end="45:35"><expr pos:start="45:33" pos:end="45:35"><name pos:start="45:33" pos:end="45:35">pkt</name></expr></argument>, <argument pos:start="45:38" pos:end="45:58"><expr pos:start="45:38" pos:end="45:58"><name pos:start="45:38" pos:end="45:58"><name pos:start="45:38" pos:end="45:40">mtv</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:58">img_segment_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="54:0"><if pos:start="47:9" pos:end="54:0">if<condition pos:start="47:11" pos:end="47:40">(<expr pos:start="47:12" pos:end="47:39"><name pos:start="47:12" pos:end="47:14">ret</name> <operator pos:start="47:16" pos:end="47:17">!=</operator> <name pos:start="47:19" pos:end="47:39"><name pos:start="47:19" pos:end="47:21">mtv</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:39">img_segment_size</name></name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="54:0"><block_content pos:start="49:13" pos:end="54:0">

            <return pos:start="49:13" pos:end="54:0">return <expr pos:start="49:20" pos:end="49:31"><call pos:start="49:20" pos:end="49:31"><name pos:start="49:20" pos:end="49:26">AVERROR</name><argument_list pos:start="49:27" pos:end="49:31">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<cpp:if pos:start="53:1" pos:end="53:19">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:19"><operator pos:start="53:5" pos:end="53:5">!</operator><name pos:start="53:6" pos:end="53:19">HAVE_BIGENDIAN</name></expr></cpp:if>



        <comment type="block" pos:start="57:9" pos:end="65:11">/* pkt-&gt;data is GGGRRRR BBBBBGGG

         * and we need RRRRRGGG GGGBBBBB

         * for PIX_FMT_RGB565 so here we

         * just swap bytes as they come

         */</comment>



        <for pos:start="69:9" pos:end="74:0">for<control pos:start="69:12" pos:end="69:46">(<init pos:start="69:13" pos:end="69:16"><expr pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:13">i</name><operator pos:start="69:14" pos:end="69:14">=</operator><literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>;</init><condition pos:start="69:17" pos:end="69:42"><expr pos:start="69:17" pos:end="69:41"><name pos:start="69:17" pos:end="69:17">i</name><operator pos:start="69:18" pos:end="69:18">&lt;</operator><name pos:start="69:19" pos:end="69:39"><name pos:start="69:19" pos:end="69:21">mtv</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:39">img_segment_size</name></name><operator pos:start="69:40" pos:end="69:40">/</operator><literal type="number" pos:start="69:41" pos:end="69:41">2</literal></expr>;</condition><incr pos:start="69:43" pos:end="69:45"><expr pos:start="69:43" pos:end="69:45"><name pos:start="69:43" pos:end="69:43">i</name><operator pos:start="69:44" pos:end="69:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="71:13" pos:end="74:0"><block_content pos:start="71:13" pos:end="74:0">

            <expr_stmt pos:start="71:13" pos:end="74:0"><expr pos:start="71:13" pos:end="71:77"><operator pos:start="71:13" pos:end="71:13">*</operator><operator pos:start="71:14" pos:end="71:14">(</operator><operator pos:start="71:15" pos:end="71:15">(</operator><name pos:start="71:16" pos:end="71:23">uint16_t</name> <operator pos:start="71:25" pos:end="71:25">*</operator><operator pos:start="71:26" pos:end="71:26">)</operator><name pos:start="71:27" pos:end="71:35"><name pos:start="71:27" pos:end="71:29">pkt</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:35">data</name></name><operator pos:start="71:36" pos:end="71:36">+</operator><name pos:start="71:37" pos:end="71:37">i</name><operator pos:start="71:38" pos:end="71:38">)</operator> <operator pos:start="71:40" pos:end="71:40">=</operator> <call pos:start="71:42" pos:end="71:77"><name pos:start="71:42" pos:end="71:49">bswap_16</name><argument_list pos:start="71:50" pos:end="71:77">(<argument pos:start="71:51" pos:end="71:76"><expr pos:start="71:51" pos:end="71:76"><operator pos:start="71:51" pos:end="71:51">*</operator><operator pos:start="71:52" pos:end="71:52">(</operator><operator pos:start="71:53" pos:end="71:53">(</operator><name pos:start="71:54" pos:end="71:61">uint16_t</name> <operator pos:start="71:63" pos:end="71:63">*</operator><operator pos:start="71:64" pos:end="71:64">)</operator><name pos:start="71:65" pos:end="71:73"><name pos:start="71:65" pos:end="71:67">pkt</name><operator pos:start="71:68" pos:end="71:69">-&gt;</operator><name pos:start="71:70" pos:end="71:73">data</name></name><operator pos:start="71:74" pos:end="71:74">+</operator><name pos:start="71:75" pos:end="71:75">i</name><operator pos:start="71:76" pos:end="71:76">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:11">pkt</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:25">stream_index</name></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <name pos:start="75:29" pos:end="75:37">VIDEO_SID</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
