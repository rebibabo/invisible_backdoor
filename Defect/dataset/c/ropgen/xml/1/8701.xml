<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8701.c" pos:tabs="8"><function pos:start="1:1" pos:end="231:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">tap_alloc</name><parameter_list pos:start="1:21" pos:end="1:48">(<parameter pos:start="1:22" pos:end="1:30"><decl pos:start="1:22" pos:end="1:30"><type pos:start="1:22" pos:end="1:30"><name pos:start="1:22" pos:end="1:25">char</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:30">dev</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:38">size_t</name></type> <name pos:start="1:40" pos:end="1:47">dev_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="231:1">{<block_content pos:start="5:5" pos:end="229:18">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">tap_fd</name></decl>, <decl pos:start="5:17" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:21">if_fd</name></decl>, <decl pos:start="5:24" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:26">ppa</name> <init pos:start="5:28" pos:end="5:31">= <expr pos:start="5:30" pos:end="5:31"><operator pos:start="5:30" pos:end="5:30">-</operator><literal type="number" pos:start="5:31" pos:end="5:31">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:14"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:20">ip_fd</name> <init pos:start="7:22" pos:end="7:24">= <expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">ptr</name></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:14">int</name></type> <name pos:start="13:16" pos:end="13:21">arp_fd</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">ip_muxid</name></decl>, <decl pos:start="15:19" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:19" pos:end="15:27">arp_muxid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:43"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:19">strioctl</name></name></type>  <name pos:start="17:22" pos:end="17:30">strioc_if</name></decl>, <decl pos:start="17:33" pos:end="17:42"><type ref="prev" pos:start="17:5" pos:end="17:19"/><name pos:start="17:33" pos:end="17:42">strioc_ppa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">link_type</name> <init pos:start="19:19" pos:end="19:27">= <expr pos:start="19:21" pos:end="19:27"><name pos:start="19:21" pos:end="19:27">I_PLINK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:17">lifreq</name></name></type> <name pos:start="21:19" pos:end="21:21">ifr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">char</name></type> <name pos:start="23:10" pos:end="23:24"><name pos:start="23:10" pos:end="23:20">actual_name</name><index pos:start="23:21" pos:end="23:24">[<expr pos:start="23:22" pos:end="23:23"><literal type="number" pos:start="23:22" pos:end="23:23">32</literal></expr>]</index></name> <init pos:start="23:26" pos:end="23:29">= <expr pos:start="23:28" pos:end="23:29"><literal type="string" pos:start="23:28" pos:end="23:29">""</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><call pos:start="27:5" pos:end="27:34"><name pos:start="27:5" pos:end="27:10">memset</name><argument_list pos:start="27:11" pos:end="27:34">(<argument pos:start="27:12" pos:end="27:15"><expr pos:start="27:12" pos:end="27:15"><operator pos:start="27:12" pos:end="27:12">&amp;</operator><name pos:start="27:13" pos:end="27:15">ifr</name></expr></argument>, <argument pos:start="27:18" pos:end="27:20"><expr pos:start="27:18" pos:end="27:20"><literal type="number" pos:start="27:18" pos:end="27:20">0x0</literal></expr></argument>, <argument pos:start="27:23" pos:end="27:33"><expr pos:start="27:23" pos:end="27:33"><sizeof pos:start="27:23" pos:end="27:33">sizeof<argument_list pos:start="27:29" pos:end="27:33">(<argument pos:start="27:30" pos:end="27:32"><expr pos:start="27:30" pos:end="27:32"><name pos:start="27:30" pos:end="27:32">ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if<condition pos:start="31:7" pos:end="31:14">( <expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">*</operator><name pos:start="31:10" pos:end="31:12">dev</name></expr> )</condition><block pos:start="31:15" pos:end="39:5">{<block_content pos:start="33:8" pos:end="37:23">

       <expr_stmt pos:start="33:8" pos:end="33:17"><expr pos:start="33:8" pos:end="33:16"><name pos:start="33:8" pos:end="33:10">ptr</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:16">dev</name></expr>;</expr_stmt>

       <while pos:start="35:8" pos:end="35:55">while<condition pos:start="35:13" pos:end="35:48">( <expr pos:start="35:15" pos:end="35:46"><operator pos:start="35:15" pos:end="35:15">*</operator><name pos:start="35:16" pos:end="35:18">ptr</name> <operator pos:start="35:20" pos:end="35:21">&amp;&amp;</operator> <operator pos:start="35:23" pos:end="35:23">!</operator><call pos:start="35:24" pos:end="35:46"><name pos:start="35:24" pos:end="35:35">qemu_isdigit</name><argument_list pos:start="35:36" pos:end="35:46">(<argument pos:start="35:37" pos:end="35:45"><expr pos:start="35:37" pos:end="35:45"><operator pos:start="35:37" pos:end="35:37">(</operator><name pos:start="35:38" pos:end="35:40">int</name><operator pos:start="35:41" pos:end="35:41">)</operator><operator pos:start="35:42" pos:end="35:42">*</operator><name pos:start="35:43" pos:end="35:45">ptr</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo" pos:start="35:50" pos:end="35:55"><block_content pos:start="35:50" pos:end="35:55"> <expr_stmt pos:start="35:50" pos:end="35:55"><expr pos:start="35:50" pos:end="35:54"><name pos:start="35:50" pos:end="35:52">ptr</name><operator pos:start="35:53" pos:end="35:54">++</operator></expr>;</expr_stmt></block_content></block></while>

       <expr_stmt pos:start="37:8" pos:end="37:23"><expr pos:start="37:8" pos:end="37:22"><name pos:start="37:8" pos:end="37:10">ppa</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:22"><name pos:start="37:14" pos:end="37:17">atoi</name><argument_list pos:start="37:18" pos:end="37:22">(<argument pos:start="37:19" pos:end="37:21"><expr pos:start="37:19" pos:end="37:21"><name pos:start="37:19" pos:end="37:21">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:39">/* Check if IP device was opened */</comment>

    <if_stmt pos:start="45:5" pos:end="47:20"><if pos:start="45:5" pos:end="47:20">if<condition pos:start="45:7" pos:end="45:15">( <expr pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:13">ip_fd</name></expr> )</condition><block type="pseudo" pos:start="47:8" pos:end="47:20"><block_content pos:start="47:8" pos:end="47:20">

       <expr_stmt pos:start="47:8" pos:end="47:20"><expr pos:start="47:8" pos:end="47:19"><call pos:start="47:8" pos:end="47:19"><name pos:start="47:8" pos:end="47:12">close</name><argument_list pos:start="47:13" pos:end="47:19">(<argument pos:start="47:14" pos:end="47:18"><expr pos:start="47:14" pos:end="47:18"><name pos:start="47:14" pos:end="47:18">ip_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:45"><expr pos:start="51:5" pos:end="51:44"><call pos:start="51:5" pos:end="51:44"><name pos:start="51:5" pos:end="51:7">TFR</name><argument_list pos:start="51:8" pos:end="51:44">(<argument pos:start="51:9" pos:end="51:43"><expr pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:13">ip_fd</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:43"><name pos:start="51:17" pos:end="51:20">open</name><argument_list pos:start="51:21" pos:end="51:43">(<argument pos:start="51:22" pos:end="51:31"><expr pos:start="51:22" pos:end="51:31"><literal type="string" pos:start="51:22" pos:end="51:31">"/dev/udp"</literal></expr></argument>, <argument pos:start="51:34" pos:end="51:39"><expr pos:start="51:34" pos:end="51:39"><name pos:start="51:34" pos:end="51:39">O_RDWR</name></expr></argument>, <argument pos:start="51:42" pos:end="51:42"><expr pos:start="51:42" pos:end="51:42"><literal type="number" pos:start="51:42" pos:end="51:42">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:18">(<expr pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:13">ip_fd</name> <operator pos:start="53:15" pos:end="53:15">&lt;</operator> <literal type="number" pos:start="53:17" pos:end="53:17">0</literal></expr>)</condition> <block pos:start="53:20" pos:end="59:5">{<block_content pos:start="55:8" pos:end="57:17">

       <expr_stmt pos:start="55:8" pos:end="55:65"><expr pos:start="55:8" pos:end="55:64"><call pos:start="55:8" pos:end="55:64"><name pos:start="55:8" pos:end="55:13">syslog</name><argument_list pos:start="55:14" pos:end="55:64">(<argument pos:start="55:15" pos:end="55:21"><expr pos:start="55:15" pos:end="55:21"><name pos:start="55:15" pos:end="55:21">LOG_ERR</name></expr></argument>, <argument pos:start="55:24" pos:end="55:63"><expr pos:start="55:24" pos:end="55:63"><literal type="string" pos:start="55:24" pos:end="55:63">"Can't open /dev/ip (actually /dev/udp)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <return pos:start="57:8" pos:end="57:17">return <expr pos:start="57:15" pos:end="57:16"><operator pos:start="57:15" pos:end="57:15">-</operator><literal type="number" pos:start="57:16" pos:end="57:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:46"><expr pos:start="63:5" pos:end="63:45"><call pos:start="63:5" pos:end="63:45"><name pos:start="63:5" pos:end="63:7">TFR</name><argument_list pos:start="63:8" pos:end="63:45">(<argument pos:start="63:9" pos:end="63:44"><expr pos:start="63:9" pos:end="63:44"><name pos:start="63:9" pos:end="63:14">tap_fd</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <call pos:start="63:18" pos:end="63:44"><name pos:start="63:18" pos:end="63:21">open</name><argument_list pos:start="63:22" pos:end="63:44">(<argument pos:start="63:23" pos:end="63:32"><expr pos:start="63:23" pos:end="63:32"><literal type="string" pos:start="63:23" pos:end="63:32">"/dev/tap"</literal></expr></argument>, <argument pos:start="63:35" pos:end="63:40"><expr pos:start="63:35" pos:end="63:40"><name pos:start="63:35" pos:end="63:40">O_RDWR</name></expr></argument>, <argument pos:start="63:43" pos:end="63:43"><expr pos:start="63:43" pos:end="63:43"><literal type="number" pos:start="63:43" pos:end="63:43">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:19">(<expr pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:14">tap_fd</name> <operator pos:start="65:16" pos:end="65:16">&lt;</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>)</condition> <block pos:start="65:21" pos:end="71:5">{<block_content pos:start="67:8" pos:end="69:17">

       <expr_stmt pos:start="67:8" pos:end="67:46"><expr pos:start="67:8" pos:end="67:45"><call pos:start="67:8" pos:end="67:45"><name pos:start="67:8" pos:end="67:13">syslog</name><argument_list pos:start="67:14" pos:end="67:45">(<argument pos:start="67:15" pos:end="67:21"><expr pos:start="67:15" pos:end="67:21"><name pos:start="67:15" pos:end="67:21">LOG_ERR</name></expr></argument>, <argument pos:start="67:24" pos:end="67:44"><expr pos:start="67:24" pos:end="67:44"><literal type="string" pos:start="67:24" pos:end="67:44">"Can't open /dev/tap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <return pos:start="69:8" pos:end="69:17">return <expr pos:start="69:15" pos:end="69:16"><operator pos:start="69:15" pos:end="69:15">-</operator><literal type="number" pos:start="69:16" pos:end="69:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:51">/* Assign a new PPA and get its unit number. */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:21"><name pos:start="77:5" pos:end="77:14">strioc_ppa</name><operator pos:start="77:15" pos:end="77:15">.</operator><name pos:start="77:16" pos:end="77:21">ic_cmd</name></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:33">TUNNEWPPA</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:24"><name pos:start="79:5" pos:end="79:14">strioc_ppa</name><operator pos:start="79:15" pos:end="79:15">.</operator><name pos:start="79:16" pos:end="79:24">ic_timout</name></name> <operator pos:start="79:26" pos:end="79:26">=</operator> <literal type="number" pos:start="79:28" pos:end="79:28">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:36"><expr pos:start="81:5" pos:end="81:35"><name pos:start="81:5" pos:end="81:21"><name pos:start="81:5" pos:end="81:14">strioc_ppa</name><operator pos:start="81:15" pos:end="81:15">.</operator><name pos:start="81:16" pos:end="81:21">ic_len</name></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <sizeof pos:start="81:25" pos:end="81:35">sizeof<argument_list pos:start="81:31" pos:end="81:35">(<argument pos:start="81:32" pos:end="81:34"><expr pos:start="81:32" pos:end="81:34"><name pos:start="81:32" pos:end="81:34">ppa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:36"><expr pos:start="83:5" pos:end="83:35"><name pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:14">strioc_ppa</name><operator pos:start="83:15" pos:end="83:15">.</operator><name pos:start="83:16" pos:end="83:20">ic_dp</name></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <operator pos:start="83:24" pos:end="83:24">(</operator><name pos:start="83:25" pos:end="83:28">char</name> <operator pos:start="83:30" pos:end="83:30">*</operator><operator pos:start="83:31" pos:end="83:31">)</operator><operator pos:start="83:32" pos:end="83:32">&amp;</operator><name pos:start="83:33" pos:end="83:35">ppa</name></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="87:54"><if pos:start="85:5" pos:end="87:54">if <condition pos:start="85:8" pos:end="85:55">(<expr pos:start="85:9" pos:end="85:54"><operator pos:start="85:9" pos:end="85:9">(</operator><name pos:start="85:10" pos:end="85:12">ppa</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:49"><name pos:start="85:16" pos:end="85:20">ioctl</name> <argument_list pos:start="85:22" pos:end="85:49">(<argument pos:start="85:23" pos:end="85:28"><expr pos:start="85:23" pos:end="85:28"><name pos:start="85:23" pos:end="85:28">tap_fd</name></expr></argument>, <argument pos:start="85:31" pos:end="85:35"><expr pos:start="85:31" pos:end="85:35"><name pos:start="85:31" pos:end="85:35">I_STR</name></expr></argument>, <argument pos:start="85:38" pos:end="85:48"><expr pos:start="85:38" pos:end="85:48"><operator pos:start="85:38" pos:end="85:38">&amp;</operator><name pos:start="85:39" pos:end="85:48">strioc_ppa</name></expr></argument>)</argument_list></call><operator pos:start="85:50" pos:end="85:50">)</operator> <operator pos:start="85:52" pos:end="85:52">&lt;</operator> <literal type="number" pos:start="85:54" pos:end="85:54">0</literal></expr>)</condition><block type="pseudo" pos:start="87:8" pos:end="87:54"><block_content pos:start="87:8" pos:end="87:54">

       <expr_stmt pos:start="87:8" pos:end="87:54"><expr pos:start="87:8" pos:end="87:53"><call pos:start="87:8" pos:end="87:53"><name pos:start="87:8" pos:end="87:13">syslog</name> <argument_list pos:start="87:15" pos:end="87:53">(<argument pos:start="87:16" pos:end="87:22"><expr pos:start="87:16" pos:end="87:22"><name pos:start="87:16" pos:end="87:22">LOG_ERR</name></expr></argument>, <argument pos:start="87:25" pos:end="87:52"><expr pos:start="87:25" pos:end="87:52"><literal type="string" pos:start="87:25" pos:end="87:52">"Can't assign new interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:45"><expr pos:start="91:5" pos:end="91:44"><call pos:start="91:5" pos:end="91:44"><name pos:start="91:5" pos:end="91:7">TFR</name><argument_list pos:start="91:8" pos:end="91:44">(<argument pos:start="91:9" pos:end="91:43"><expr pos:start="91:9" pos:end="91:43"><name pos:start="91:9" pos:end="91:13">if_fd</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <call pos:start="91:17" pos:end="91:43"><name pos:start="91:17" pos:end="91:20">open</name><argument_list pos:start="91:21" pos:end="91:43">(<argument pos:start="91:22" pos:end="91:31"><expr pos:start="91:22" pos:end="91:31"><literal type="string" pos:start="91:22" pos:end="91:31">"/dev/tap"</literal></expr></argument>, <argument pos:start="91:34" pos:end="91:39"><expr pos:start="91:34" pos:end="91:39"><name pos:start="91:34" pos:end="91:39">O_RDWR</name></expr></argument>, <argument pos:start="91:42" pos:end="91:42"><expr pos:start="91:42" pos:end="91:42"><literal type="number" pos:start="91:42" pos:end="91:42">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:18">(<expr pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:13">if_fd</name> <operator pos:start="93:15" pos:end="93:15">&lt;</operator> <literal type="number" pos:start="93:17" pos:end="93:17">0</literal></expr>)</condition> <block pos:start="93:20" pos:end="99:5">{<block_content pos:start="95:8" pos:end="97:17">

       <expr_stmt pos:start="95:8" pos:end="95:50"><expr pos:start="95:8" pos:end="95:49"><call pos:start="95:8" pos:end="95:49"><name pos:start="95:8" pos:end="95:13">syslog</name><argument_list pos:start="95:14" pos:end="95:49">(<argument pos:start="95:15" pos:end="95:21"><expr pos:start="95:15" pos:end="95:21"><name pos:start="95:15" pos:end="95:21">LOG_ERR</name></expr></argument>, <argument pos:start="95:24" pos:end="95:48"><expr pos:start="95:24" pos:end="95:48"><literal type="string" pos:start="95:24" pos:end="95:48">"Can't open /dev/tap (2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <return pos:start="97:8" pos:end="97:17">return <expr pos:start="97:15" pos:end="97:16"><operator pos:start="97:15" pos:end="97:15">-</operator><literal type="number" pos:start="97:16" pos:end="97:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if<condition pos:start="101:7" pos:end="101:38">(<expr pos:start="101:8" pos:end="101:37"><call pos:start="101:8" pos:end="101:33"><name pos:start="101:8" pos:end="101:12">ioctl</name><argument_list pos:start="101:13" pos:end="101:33">(<argument pos:start="101:14" pos:end="101:18"><expr pos:start="101:14" pos:end="101:18"><name pos:start="101:14" pos:end="101:18">if_fd</name></expr></argument>, <argument pos:start="101:21" pos:end="101:26"><expr pos:start="101:21" pos:end="101:26"><name pos:start="101:21" pos:end="101:26">I_PUSH</name></expr></argument>, <argument pos:start="101:29" pos:end="101:32"><expr pos:start="101:29" pos:end="101:32"><literal type="string" pos:start="101:29" pos:end="101:32">"ip"</literal></expr></argument>)</argument_list></call> <operator pos:start="101:35" pos:end="101:35">&lt;</operator> <literal type="number" pos:start="101:37" pos:end="101:37">0</literal></expr>)</condition><block pos:start="101:39" pos:end="107:5">{<block_content pos:start="103:8" pos:end="105:17">

       <expr_stmt pos:start="103:8" pos:end="103:47"><expr pos:start="103:8" pos:end="103:46"><call pos:start="103:8" pos:end="103:46"><name pos:start="103:8" pos:end="103:13">syslog</name><argument_list pos:start="103:14" pos:end="103:46">(<argument pos:start="103:15" pos:end="103:21"><expr pos:start="103:15" pos:end="103:21"><name pos:start="103:15" pos:end="103:21">LOG_ERR</name></expr></argument>, <argument pos:start="103:24" pos:end="103:45"><expr pos:start="103:24" pos:end="103:45"><literal type="string" pos:start="103:24" pos:end="103:45">"Can't push IP module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <return pos:start="105:8" pos:end="105:17">return <expr pos:start="105:15" pos:end="105:16"><operator pos:start="105:15" pos:end="105:15">-</operator><literal type="number" pos:start="105:16" pos:end="105:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="113:45"><if pos:start="111:5" pos:end="113:45">if <condition pos:start="111:8" pos:end="111:46">(<expr pos:start="111:9" pos:end="111:45"><call pos:start="111:9" pos:end="111:41"><name pos:start="111:9" pos:end="111:13">ioctl</name><argument_list pos:start="111:14" pos:end="111:41">(<argument pos:start="111:15" pos:end="111:19"><expr pos:start="111:15" pos:end="111:19"><name pos:start="111:15" pos:end="111:19">if_fd</name></expr></argument>, <argument pos:start="111:22" pos:end="111:34"><expr pos:start="111:22" pos:end="111:34"><name pos:start="111:22" pos:end="111:34">SIOCGLIFFLAGS</name></expr></argument>, <argument pos:start="111:37" pos:end="111:40"><expr pos:start="111:37" pos:end="111:40"><operator pos:start="111:37" pos:end="111:37">&amp;</operator><name pos:start="111:38" pos:end="111:40">ifr</name></expr></argument>)</argument_list></call> <operator pos:start="111:43" pos:end="111:43">&lt;</operator> <literal type="number" pos:start="111:45" pos:end="111:45">0</literal></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:45"><block_content pos:start="113:9" pos:end="113:45">

	<expr_stmt pos:start="113:9" pos:end="113:45"><expr pos:start="113:9" pos:end="113:44"><call pos:start="113:9" pos:end="113:44"><name pos:start="113:9" pos:end="113:14">syslog</name><argument_list pos:start="113:15" pos:end="113:44">(<argument pos:start="113:16" pos:end="113:22"><expr pos:start="113:16" pos:end="113:22"><name pos:start="113:16" pos:end="113:22">LOG_ERR</name></expr></argument>, <argument pos:start="113:25" pos:end="113:43"><expr pos:start="113:25" pos:end="113:43"><literal type="string" pos:start="113:25" pos:end="113:43">"Can't get flags\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:45"><expr pos:start="117:5" pos:end="117:44"><call pos:start="117:5" pos:end="117:44"><name pos:start="117:5" pos:end="117:12">snprintf</name> <argument_list pos:start="117:14" pos:end="117:44">(<argument pos:start="117:15" pos:end="117:25"><expr pos:start="117:15" pos:end="117:25"><name pos:start="117:15" pos:end="117:25">actual_name</name></expr></argument>, <argument pos:start="117:28" pos:end="117:29"><expr pos:start="117:28" pos:end="117:29"><literal type="number" pos:start="117:28" pos:end="117:29">32</literal></expr></argument>, <argument pos:start="117:32" pos:end="117:38"><expr pos:start="117:32" pos:end="117:38"><literal type="string" pos:start="117:32" pos:end="117:38">"tap%d"</literal></expr></argument>, <argument pos:start="117:41" pos:end="117:43"><expr pos:start="117:41" pos:end="117:43"><name pos:start="117:41" pos:end="117:43">ppa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:63"><expr pos:start="119:5" pos:end="119:62"><call pos:start="119:5" pos:end="119:62"><name pos:start="119:5" pos:end="119:11">pstrcpy</name><argument_list pos:start="119:12" pos:end="119:62">(<argument pos:start="119:13" pos:end="119:25"><expr pos:start="119:13" pos:end="119:25"><name pos:start="119:13" pos:end="119:25"><name pos:start="119:13" pos:end="119:15">ifr</name><operator pos:start="119:16" pos:end="119:16">.</operator><name pos:start="119:17" pos:end="119:25">lifr_name</name></name></expr></argument>, <argument pos:start="119:28" pos:end="119:48"><expr pos:start="119:28" pos:end="119:48"><sizeof pos:start="119:28" pos:end="119:48">sizeof<argument_list pos:start="119:34" pos:end="119:48">(<argument pos:start="119:35" pos:end="119:47"><expr pos:start="119:35" pos:end="119:47"><name pos:start="119:35" pos:end="119:47"><name pos:start="119:35" pos:end="119:37">ifr</name><operator pos:start="119:38" pos:end="119:38">.</operator><name pos:start="119:39" pos:end="119:47">lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="119:51" pos:end="119:61"><expr pos:start="119:51" pos:end="119:61"><name pos:start="119:51" pos:end="119:61">actual_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:23"><expr pos:start="123:5" pos:end="123:22"><name pos:start="123:5" pos:end="123:16"><name pos:start="123:5" pos:end="123:7">ifr</name><operator pos:start="123:8" pos:end="123:8">.</operator><name pos:start="123:9" pos:end="123:16">lifr_ppa</name></name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:22">ppa</name></expr>;</expr_stmt>

    <comment type="block" pos:start="125:5" pos:end="125:72">/* Assign ppa according to the unit number returned by tun device */</comment>



    <if_stmt pos:start="129:5" pos:end="131:50"><if pos:start="129:5" pos:end="131:50">if <condition pos:start="129:8" pos:end="129:46">(<expr pos:start="129:9" pos:end="129:45"><call pos:start="129:9" pos:end="129:41"><name pos:start="129:9" pos:end="129:13">ioctl</name> <argument_list pos:start="129:15" pos:end="129:41">(<argument pos:start="129:16" pos:end="129:20"><expr pos:start="129:16" pos:end="129:20"><name pos:start="129:16" pos:end="129:20">if_fd</name></expr></argument>, <argument pos:start="129:23" pos:end="129:34"><expr pos:start="129:23" pos:end="129:34"><name pos:start="129:23" pos:end="129:34">SIOCSLIFNAME</name></expr></argument>, <argument pos:start="129:37" pos:end="129:40"><expr pos:start="129:37" pos:end="129:40"><operator pos:start="129:37" pos:end="129:37">&amp;</operator><name pos:start="129:38" pos:end="129:40">ifr</name></expr></argument>)</argument_list></call> <operator pos:start="129:43" pos:end="129:43">&lt;</operator> <literal type="number" pos:start="129:45" pos:end="129:45">0</literal></expr>)</condition><block type="pseudo" pos:start="131:9" pos:end="131:50"><block_content pos:start="131:9" pos:end="131:50">

        <expr_stmt pos:start="131:9" pos:end="131:50"><expr pos:start="131:9" pos:end="131:49"><call pos:start="131:9" pos:end="131:49"><name pos:start="131:9" pos:end="131:14">syslog</name> <argument_list pos:start="131:16" pos:end="131:49">(<argument pos:start="131:17" pos:end="131:23"><expr pos:start="131:17" pos:end="131:23"><name pos:start="131:17" pos:end="131:23">LOG_ERR</name></expr></argument>, <argument pos:start="131:26" pos:end="131:43"><expr pos:start="131:26" pos:end="131:43"><literal type="string" pos:start="131:26" pos:end="131:43">"Can't set PPA %d"</literal></expr></argument>, <argument pos:start="131:46" pos:end="131:48"><expr pos:start="131:46" pos:end="131:48"><name pos:start="131:46" pos:end="131:48">ppa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="133:5" pos:end="135:46"><if pos:start="133:5" pos:end="135:46">if <condition pos:start="133:8" pos:end="133:45">(<expr pos:start="133:9" pos:end="133:44"><call pos:start="133:9" pos:end="133:41"><name pos:start="133:9" pos:end="133:13">ioctl</name><argument_list pos:start="133:14" pos:end="133:41">(<argument pos:start="133:15" pos:end="133:19"><expr pos:start="133:15" pos:end="133:19"><name pos:start="133:15" pos:end="133:19">if_fd</name></expr></argument>, <argument pos:start="133:22" pos:end="133:34"><expr pos:start="133:22" pos:end="133:34"><name pos:start="133:22" pos:end="133:34">SIOCGLIFFLAGS</name></expr></argument>, <argument pos:start="133:37" pos:end="133:40"><expr pos:start="133:37" pos:end="133:40"><operator pos:start="133:37" pos:end="133:37">&amp;</operator><name pos:start="133:38" pos:end="133:40">ifr</name></expr></argument>)</argument_list></call> <operator pos:start="133:43" pos:end="133:43">&lt;</operator><literal type="number" pos:start="133:44" pos:end="133:44">0</literal></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:46"><block_content pos:start="135:9" pos:end="135:46">

        <expr_stmt pos:start="135:9" pos:end="135:46"><expr pos:start="135:9" pos:end="135:45"><call pos:start="135:9" pos:end="135:45"><name pos:start="135:9" pos:end="135:14">syslog</name> <argument_list pos:start="135:16" pos:end="135:45">(<argument pos:start="135:17" pos:end="135:23"><expr pos:start="135:17" pos:end="135:23"><name pos:start="135:17" pos:end="135:23">LOG_ERR</name></expr></argument>, <argument pos:start="135:26" pos:end="135:44"><expr pos:start="135:26" pos:end="135:44"><literal type="string" pos:start="135:26" pos:end="135:44">"Can't get flags\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="137:5" pos:end="137:34">/* Push arp module to if_fd */</comment>

    <if_stmt pos:start="139:5" pos:end="141:54"><if pos:start="139:5" pos:end="141:54">if <condition pos:start="139:8" pos:end="139:41">(<expr pos:start="139:9" pos:end="139:40"><call pos:start="139:9" pos:end="139:36"><name pos:start="139:9" pos:end="139:13">ioctl</name> <argument_list pos:start="139:15" pos:end="139:36">(<argument pos:start="139:16" pos:end="139:20"><expr pos:start="139:16" pos:end="139:20"><name pos:start="139:16" pos:end="139:20">if_fd</name></expr></argument>, <argument pos:start="139:23" pos:end="139:28"><expr pos:start="139:23" pos:end="139:28"><name pos:start="139:23" pos:end="139:28">I_PUSH</name></expr></argument>, <argument pos:start="139:31" pos:end="139:35"><expr pos:start="139:31" pos:end="139:35"><literal type="string" pos:start="139:31" pos:end="139:35">"arp"</literal></expr></argument>)</argument_list></call> <operator pos:start="139:38" pos:end="139:38">&lt;</operator> <literal type="number" pos:start="139:40" pos:end="139:40">0</literal></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:54"><block_content pos:start="141:9" pos:end="141:54">

        <expr_stmt pos:start="141:9" pos:end="141:54"><expr pos:start="141:9" pos:end="141:53"><call pos:start="141:9" pos:end="141:53"><name pos:start="141:9" pos:end="141:14">syslog</name> <argument_list pos:start="141:16" pos:end="141:53">(<argument pos:start="141:17" pos:end="141:23"><expr pos:start="141:17" pos:end="141:23"><name pos:start="141:17" pos:end="141:23">LOG_ERR</name></expr></argument>, <argument pos:start="141:26" pos:end="141:52"><expr pos:start="141:26" pos:end="141:52"><literal type="string" pos:start="141:26" pos:end="141:52">"Can't push ARP module (2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:34">/* Push arp module to ip_fd */</comment>

    <if_stmt pos:start="147:5" pos:end="149:43"><if pos:start="147:5" pos:end="149:43">if <condition pos:start="147:8" pos:end="147:39">(<expr pos:start="147:9" pos:end="147:38"><call pos:start="147:9" pos:end="147:34"><name pos:start="147:9" pos:end="147:13">ioctl</name> <argument_list pos:start="147:15" pos:end="147:34">(<argument pos:start="147:16" pos:end="147:20"><expr pos:start="147:16" pos:end="147:20"><name pos:start="147:16" pos:end="147:20">ip_fd</name></expr></argument>, <argument pos:start="147:23" pos:end="147:27"><expr pos:start="147:23" pos:end="147:27"><name pos:start="147:23" pos:end="147:27">I_POP</name></expr></argument>, <argument pos:start="147:30" pos:end="147:33"><expr pos:start="147:30" pos:end="147:33"><name pos:start="147:30" pos:end="147:33">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="147:36" pos:end="147:36">&lt;</operator> <literal type="number" pos:start="147:38" pos:end="147:38">0</literal></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:43"><block_content pos:start="149:9" pos:end="149:43">

        <expr_stmt pos:start="149:9" pos:end="149:43"><expr pos:start="149:9" pos:end="149:42"><call pos:start="149:9" pos:end="149:42"><name pos:start="149:9" pos:end="149:14">syslog</name> <argument_list pos:start="149:16" pos:end="149:42">(<argument pos:start="149:17" pos:end="149:23"><expr pos:start="149:17" pos:end="149:23"><name pos:start="149:17" pos:end="149:23">LOG_ERR</name></expr></argument>, <argument pos:start="149:26" pos:end="149:41"><expr pos:start="149:26" pos:end="149:41"><literal type="string" pos:start="149:26" pos:end="149:41">"I_POP failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="151:5" pos:end="153:56"><if pos:start="151:5" pos:end="153:56">if <condition pos:start="151:8" pos:end="151:41">(<expr pos:start="151:9" pos:end="151:40"><call pos:start="151:9" pos:end="151:36"><name pos:start="151:9" pos:end="151:13">ioctl</name> <argument_list pos:start="151:15" pos:end="151:36">(<argument pos:start="151:16" pos:end="151:20"><expr pos:start="151:16" pos:end="151:20"><name pos:start="151:16" pos:end="151:20">ip_fd</name></expr></argument>, <argument pos:start="151:23" pos:end="151:28"><expr pos:start="151:23" pos:end="151:28"><name pos:start="151:23" pos:end="151:28">I_PUSH</name></expr></argument>, <argument pos:start="151:31" pos:end="151:35"><expr pos:start="151:31" pos:end="151:35"><literal type="string" pos:start="151:31" pos:end="151:35">"arp"</literal></expr></argument>)</argument_list></call> <operator pos:start="151:38" pos:end="151:38">&lt;</operator> <literal type="number" pos:start="151:40" pos:end="151:40">0</literal></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:56"><block_content pos:start="153:9" pos:end="153:56">

        <expr_stmt pos:start="153:9" pos:end="153:56"><expr pos:start="153:9" pos:end="153:55"><call pos:start="153:9" pos:end="153:55"><name pos:start="153:9" pos:end="153:14">syslog</name> <argument_list pos:start="153:16" pos:end="153:55">(<argument pos:start="153:17" pos:end="153:23"><expr pos:start="153:17" pos:end="153:23"><name pos:start="153:17" pos:end="153:23">LOG_ERR</name></expr></argument>, <argument pos:start="153:26" pos:end="153:54"><expr pos:start="153:26" pos:end="153:54"><literal type="string" pos:start="153:26" pos:end="153:54">"Can't push ARP module (3)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="155:5" pos:end="155:21">/* Open arp_fd */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:47"><expr pos:start="157:5" pos:end="157:46"><call pos:start="157:5" pos:end="157:46"><name pos:start="157:5" pos:end="157:7">TFR</name><argument_list pos:start="157:8" pos:end="157:46">(<argument pos:start="157:9" pos:end="157:45"><expr pos:start="157:9" pos:end="157:45"><name pos:start="157:9" pos:end="157:14">arp_fd</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <call pos:start="157:18" pos:end="157:45"><name pos:start="157:18" pos:end="157:21">open</name> <argument_list pos:start="157:23" pos:end="157:45">(<argument pos:start="157:24" pos:end="157:33"><expr pos:start="157:24" pos:end="157:33"><literal type="string" pos:start="157:24" pos:end="157:33">"/dev/tap"</literal></expr></argument>, <argument pos:start="157:36" pos:end="157:41"><expr pos:start="157:36" pos:end="157:41"><name pos:start="157:36" pos:end="157:41">O_RDWR</name></expr></argument>, <argument pos:start="157:44" pos:end="157:44"><expr pos:start="157:44" pos:end="157:44"><literal type="number" pos:start="157:44" pos:end="157:44">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="161:55"><if pos:start="159:5" pos:end="161:55">if <condition pos:start="159:8" pos:end="159:19">(<expr pos:start="159:9" pos:end="159:18"><name pos:start="159:9" pos:end="159:14">arp_fd</name> <operator pos:start="159:16" pos:end="159:16">&lt;</operator> <literal type="number" pos:start="159:18" pos:end="159:18">0</literal></expr>)</condition><block type="pseudo" pos:start="161:8" pos:end="161:55"><block_content pos:start="161:8" pos:end="161:55">

       <expr_stmt pos:start="161:8" pos:end="161:55"><expr pos:start="161:8" pos:end="161:54"><call pos:start="161:8" pos:end="161:54"><name pos:start="161:8" pos:end="161:13">syslog</name> <argument_list pos:start="161:15" pos:end="161:54">(<argument pos:start="161:16" pos:end="161:22"><expr pos:start="161:16" pos:end="161:22"><name pos:start="161:16" pos:end="161:22">LOG_ERR</name></expr></argument>, <argument pos:start="161:25" pos:end="161:41"><expr pos:start="161:25" pos:end="161:41"><literal type="string" pos:start="161:25" pos:end="161:41">"Can't open %s\n"</literal></expr></argument>, <argument pos:start="161:44" pos:end="161:53"><expr pos:start="161:44" pos:end="161:53"><literal type="string" pos:start="161:44" pos:end="161:53">"/dev/tap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:27">/* Set ifname to arp */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:36"><expr pos:start="167:5" pos:end="167:35"><name pos:start="167:5" pos:end="167:20"><name pos:start="167:5" pos:end="167:13">strioc_if</name><operator pos:start="167:14" pos:end="167:14">.</operator><name pos:start="167:15" pos:end="167:20">ic_cmd</name></name> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:35">SIOCSLIFNAME</name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:28"><expr pos:start="169:5" pos:end="169:27"><name pos:start="169:5" pos:end="169:23"><name pos:start="169:5" pos:end="169:13">strioc_if</name><operator pos:start="169:14" pos:end="169:14">.</operator><name pos:start="169:15" pos:end="169:23">ic_timout</name></name> <operator pos:start="169:25" pos:end="169:25">=</operator> <literal type="number" pos:start="169:27" pos:end="169:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:35"><expr pos:start="171:5" pos:end="171:34"><name pos:start="171:5" pos:end="171:20"><name pos:start="171:5" pos:end="171:13">strioc_if</name><operator pos:start="171:14" pos:end="171:14">.</operator><name pos:start="171:15" pos:end="171:20">ic_len</name></name> <operator pos:start="171:22" pos:end="171:22">=</operator> <sizeof pos:start="171:24" pos:end="171:34">sizeof<argument_list pos:start="171:30" pos:end="171:34">(<argument pos:start="171:31" pos:end="171:33"><expr pos:start="171:31" pos:end="171:33"><name pos:start="171:31" pos:end="171:33">ifr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:35"><expr pos:start="173:5" pos:end="173:34"><name pos:start="173:5" pos:end="173:19"><name pos:start="173:5" pos:end="173:13">strioc_if</name><operator pos:start="173:14" pos:end="173:14">.</operator><name pos:start="173:15" pos:end="173:19">ic_dp</name></name> <operator pos:start="173:21" pos:end="173:21">=</operator> <operator pos:start="173:23" pos:end="173:23">(</operator><name pos:start="173:24" pos:end="173:27">char</name> <operator pos:start="173:29" pos:end="173:29">*</operator><operator pos:start="173:30" pos:end="173:30">)</operator><operator pos:start="173:31" pos:end="173:31">&amp;</operator><name pos:start="173:32" pos:end="173:34">ifr</name></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="179:5"><if pos:start="175:5" pos:end="179:5">if <condition pos:start="175:8" pos:end="175:45">(<expr pos:start="175:9" pos:end="175:44"><call pos:start="175:9" pos:end="175:40"><name pos:start="175:9" pos:end="175:13">ioctl</name><argument_list pos:start="175:14" pos:end="175:40">(<argument pos:start="175:15" pos:end="175:20"><expr pos:start="175:15" pos:end="175:20"><name pos:start="175:15" pos:end="175:20">arp_fd</name></expr></argument>, <argument pos:start="175:23" pos:end="175:27"><expr pos:start="175:23" pos:end="175:27"><name pos:start="175:23" pos:end="175:27">I_STR</name></expr></argument>, <argument pos:start="175:30" pos:end="175:39"><expr pos:start="175:30" pos:end="175:39"><operator pos:start="175:30" pos:end="175:30">&amp;</operator><name pos:start="175:31" pos:end="175:39">strioc_if</name></expr></argument>)</argument_list></call> <operator pos:start="175:42" pos:end="175:42">&lt;</operator> <literal type="number" pos:start="175:44" pos:end="175:44">0</literal></expr>)</condition><block pos:start="175:46" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:54">

        <expr_stmt pos:start="177:9" pos:end="177:54"><expr pos:start="177:9" pos:end="177:53"><call pos:start="177:9" pos:end="177:53"><name pos:start="177:9" pos:end="177:14">syslog</name> <argument_list pos:start="177:16" pos:end="177:53">(<argument pos:start="177:17" pos:end="177:23"><expr pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:23">LOG_ERR</name></expr></argument>, <argument pos:start="177:26" pos:end="177:52"><expr pos:start="177:26" pos:end="177:52"><literal type="string" pos:start="177:26" pos:end="177:52">"Can't set ifname to arp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="183:5" pos:end="189:5"><if pos:start="183:5" pos:end="189:5">if<condition pos:start="183:7" pos:end="183:52">(<expr pos:start="183:8" pos:end="183:51"><operator pos:start="183:8" pos:end="183:8">(</operator><name pos:start="183:9" pos:end="183:16">ip_muxid</name> <operator pos:start="183:18" pos:end="183:18">=</operator> <call pos:start="183:20" pos:end="183:46"><name pos:start="183:20" pos:end="183:24">ioctl</name><argument_list pos:start="183:25" pos:end="183:46">(<argument pos:start="183:26" pos:end="183:30"><expr pos:start="183:26" pos:end="183:30"><name pos:start="183:26" pos:end="183:30">ip_fd</name></expr></argument>, <argument pos:start="183:33" pos:end="183:38"><expr pos:start="183:33" pos:end="183:38"><name pos:start="183:33" pos:end="183:38">I_LINK</name></expr></argument>, <argument pos:start="183:41" pos:end="183:45"><expr pos:start="183:41" pos:end="183:45"><name pos:start="183:41" pos:end="183:45">if_fd</name></expr></argument>)</argument_list></call><operator pos:start="183:47" pos:end="183:47">)</operator> <operator pos:start="183:49" pos:end="183:49">&lt;</operator> <literal type="number" pos:start="183:51" pos:end="183:51">0</literal></expr>)</condition><block pos:start="183:53" pos:end="189:5">{<block_content pos:start="185:8" pos:end="187:17">

       <expr_stmt pos:start="185:8" pos:end="185:54"><expr pos:start="185:8" pos:end="185:53"><call pos:start="185:8" pos:end="185:53"><name pos:start="185:8" pos:end="185:13">syslog</name><argument_list pos:start="185:14" pos:end="185:53">(<argument pos:start="185:15" pos:end="185:21"><expr pos:start="185:15" pos:end="185:21"><name pos:start="185:15" pos:end="185:21">LOG_ERR</name></expr></argument>, <argument pos:start="185:24" pos:end="185:52"><expr pos:start="185:24" pos:end="185:52"><literal type="string" pos:start="185:24" pos:end="185:52">"Can't link TAP device to IP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <return pos:start="187:8" pos:end="187:17">return <expr pos:start="187:15" pos:end="187:16"><operator pos:start="187:15" pos:end="187:15">-</operator><literal type="number" pos:start="187:16" pos:end="187:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="193:5" pos:end="195:57"><if pos:start="193:5" pos:end="195:57">if <condition pos:start="193:8" pos:end="193:59">(<expr pos:start="193:9" pos:end="193:58"><operator pos:start="193:9" pos:end="193:9">(</operator><name pos:start="193:10" pos:end="193:18">arp_muxid</name> <operator pos:start="193:20" pos:end="193:20">=</operator> <call pos:start="193:22" pos:end="193:53"><name pos:start="193:22" pos:end="193:26">ioctl</name> <argument_list pos:start="193:28" pos:end="193:53">(<argument pos:start="193:29" pos:end="193:33"><expr pos:start="193:29" pos:end="193:33"><name pos:start="193:29" pos:end="193:33">ip_fd</name></expr></argument>, <argument pos:start="193:36" pos:end="193:44"><expr pos:start="193:36" pos:end="193:44"><name pos:start="193:36" pos:end="193:44">link_type</name></expr></argument>, <argument pos:start="193:47" pos:end="193:52"><expr pos:start="193:47" pos:end="193:52"><name pos:start="193:47" pos:end="193:52">arp_fd</name></expr></argument>)</argument_list></call><operator pos:start="193:54" pos:end="193:54">)</operator> <operator pos:start="193:56" pos:end="193:56">&lt;</operator> <literal type="number" pos:start="193:58" pos:end="193:58">0</literal></expr>)</condition><block type="pseudo" pos:start="195:9" pos:end="195:57"><block_content pos:start="195:9" pos:end="195:57">

        <expr_stmt pos:start="195:9" pos:end="195:57"><expr pos:start="195:9" pos:end="195:56"><call pos:start="195:9" pos:end="195:56"><name pos:start="195:9" pos:end="195:14">syslog</name> <argument_list pos:start="195:16" pos:end="195:56">(<argument pos:start="195:17" pos:end="195:23"><expr pos:start="195:17" pos:end="195:23"><name pos:start="195:17" pos:end="195:23">LOG_ERR</name></expr></argument>, <argument pos:start="195:26" pos:end="195:55"><expr pos:start="195:26" pos:end="195:55"><literal type="string" pos:start="195:26" pos:end="195:55">"Can't link TAP device to ARP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:18"><expr pos:start="199:5" pos:end="199:17"><call pos:start="199:5" pos:end="199:17"><name pos:start="199:5" pos:end="199:9">close</name> <argument_list pos:start="199:11" pos:end="199:17">(<argument pos:start="199:12" pos:end="199:16"><expr pos:start="199:12" pos:end="199:16"><name pos:start="199:12" pos:end="199:16">if_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:35"><expr pos:start="203:5" pos:end="203:34"><call pos:start="203:5" pos:end="203:34"><name pos:start="203:5" pos:end="203:10">memset</name><argument_list pos:start="203:11" pos:end="203:34">(<argument pos:start="203:12" pos:end="203:15"><expr pos:start="203:12" pos:end="203:15"><operator pos:start="203:12" pos:end="203:12">&amp;</operator><name pos:start="203:13" pos:end="203:15">ifr</name></expr></argument>, <argument pos:start="203:18" pos:end="203:20"><expr pos:start="203:18" pos:end="203:20"><literal type="number" pos:start="203:18" pos:end="203:20">0x0</literal></expr></argument>, <argument pos:start="203:23" pos:end="203:33"><expr pos:start="203:23" pos:end="203:33"><sizeof pos:start="203:23" pos:end="203:33">sizeof<argument_list pos:start="203:29" pos:end="203:33">(<argument pos:start="203:30" pos:end="203:32"><expr pos:start="203:30" pos:end="203:32"><name pos:start="203:30" pos:end="203:32">ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:63"><expr pos:start="205:5" pos:end="205:62"><call pos:start="205:5" pos:end="205:62"><name pos:start="205:5" pos:end="205:11">pstrcpy</name><argument_list pos:start="205:12" pos:end="205:62">(<argument pos:start="205:13" pos:end="205:25"><expr pos:start="205:13" pos:end="205:25"><name pos:start="205:13" pos:end="205:25"><name pos:start="205:13" pos:end="205:15">ifr</name><operator pos:start="205:16" pos:end="205:16">.</operator><name pos:start="205:17" pos:end="205:25">lifr_name</name></name></expr></argument>, <argument pos:start="205:28" pos:end="205:48"><expr pos:start="205:28" pos:end="205:48"><sizeof pos:start="205:28" pos:end="205:48">sizeof<argument_list pos:start="205:34" pos:end="205:48">(<argument pos:start="205:35" pos:end="205:47"><expr pos:start="205:35" pos:end="205:47"><name pos:start="205:35" pos:end="205:47"><name pos:start="205:35" pos:end="205:37">ifr</name><operator pos:start="205:38" pos:end="205:38">.</operator><name pos:start="205:39" pos:end="205:47">lifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="205:51" pos:end="205:61"><expr pos:start="205:51" pos:end="205:61"><name pos:start="205:51" pos:end="205:61">actual_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:34"><expr pos:start="207:5" pos:end="207:33"><name pos:start="207:5" pos:end="207:21"><name pos:start="207:5" pos:end="207:7">ifr</name><operator pos:start="207:8" pos:end="207:8">.</operator><name pos:start="207:9" pos:end="207:21">lifr_ip_muxid</name></name>  <operator pos:start="207:24" pos:end="207:24">=</operator> <name pos:start="207:26" pos:end="207:33">ip_muxid</name></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:35"><expr pos:start="209:5" pos:end="209:34"><name pos:start="209:5" pos:end="209:22"><name pos:start="209:5" pos:end="209:7">ifr</name><operator pos:start="209:8" pos:end="209:8">.</operator><name pos:start="209:9" pos:end="209:22">lifr_arp_muxid</name></name> <operator pos:start="209:24" pos:end="209:24">=</operator> <name pos:start="209:26" pos:end="209:34">arp_muxid</name></expr>;</expr_stmt>



    <if_stmt pos:start="213:5" pos:end="223:5"><if pos:start="213:5" pos:end="223:5">if <condition pos:start="213:8" pos:end="213:47">(<expr pos:start="213:9" pos:end="213:46"><call pos:start="213:9" pos:end="213:42"><name pos:start="213:9" pos:end="213:13">ioctl</name> <argument_list pos:start="213:15" pos:end="213:42">(<argument pos:start="213:16" pos:end="213:20"><expr pos:start="213:16" pos:end="213:20"><name pos:start="213:16" pos:end="213:20">ip_fd</name></expr></argument>, <argument pos:start="213:23" pos:end="213:35"><expr pos:start="213:23" pos:end="213:35"><name pos:start="213:23" pos:end="213:35">SIOCSLIFMUXID</name></expr></argument>, <argument pos:start="213:38" pos:end="213:41"><expr pos:start="213:38" pos:end="213:41"><operator pos:start="213:38" pos:end="213:38">&amp;</operator><name pos:start="213:39" pos:end="213:41">ifr</name></expr></argument>)</argument_list></call> <operator pos:start="213:44" pos:end="213:44">&lt;</operator> <literal type="number" pos:start="213:46" pos:end="213:46">0</literal></expr>)</condition>

    <block pos:start="215:5" pos:end="223:5">{<block_content pos:start="217:7" pos:end="221:51">

      <expr_stmt pos:start="217:7" pos:end="217:43"><expr pos:start="217:7" pos:end="217:42"><call pos:start="217:7" pos:end="217:42"><name pos:start="217:7" pos:end="217:11">ioctl</name> <argument_list pos:start="217:13" pos:end="217:42">(<argument pos:start="217:14" pos:end="217:18"><expr pos:start="217:14" pos:end="217:18"><name pos:start="217:14" pos:end="217:18">ip_fd</name></expr></argument>, <argument pos:start="217:21" pos:end="217:29"><expr pos:start="217:21" pos:end="217:29"><name pos:start="217:21" pos:end="217:29">I_PUNLINK</name></expr></argument> , <argument pos:start="217:33" pos:end="217:41"><expr pos:start="217:33" pos:end="217:41"><name pos:start="217:33" pos:end="217:41">arp_muxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="219:7" pos:end="219:41"><expr pos:start="219:7" pos:end="219:40"><call pos:start="219:7" pos:end="219:40"><name pos:start="219:7" pos:end="219:11">ioctl</name> <argument_list pos:start="219:13" pos:end="219:40">(<argument pos:start="219:14" pos:end="219:18"><expr pos:start="219:14" pos:end="219:18"><name pos:start="219:14" pos:end="219:18">ip_fd</name></expr></argument>, <argument pos:start="219:21" pos:end="219:29"><expr pos:start="219:21" pos:end="219:29"><name pos:start="219:21" pos:end="219:29">I_PUNLINK</name></expr></argument>, <argument pos:start="219:32" pos:end="219:39"><expr pos:start="219:32" pos:end="219:39"><name pos:start="219:32" pos:end="219:39">ip_muxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="221:7" pos:end="221:51"><expr pos:start="221:7" pos:end="221:50"><call pos:start="221:7" pos:end="221:50"><name pos:start="221:7" pos:end="221:12">syslog</name> <argument_list pos:start="221:14" pos:end="221:50">(<argument pos:start="221:15" pos:end="221:21"><expr pos:start="221:15" pos:end="221:21"><name pos:start="221:15" pos:end="221:21">LOG_ERR</name></expr></argument>, <argument pos:start="221:24" pos:end="221:49"><expr pos:start="221:24" pos:end="221:49"><literal type="string" pos:start="221:24" pos:end="221:49">"Can't set multiplexor id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="227:5" pos:end="227:42"><expr pos:start="227:5" pos:end="227:41"><call pos:start="227:5" pos:end="227:41"><name pos:start="227:5" pos:end="227:12">snprintf</name><argument_list pos:start="227:13" pos:end="227:41">(<argument pos:start="227:14" pos:end="227:16"><expr pos:start="227:14" pos:end="227:16"><name pos:start="227:14" pos:end="227:16">dev</name></expr></argument>, <argument pos:start="227:19" pos:end="227:26"><expr pos:start="227:19" pos:end="227:26"><name pos:start="227:19" pos:end="227:26">dev_size</name></expr></argument>, <argument pos:start="227:29" pos:end="227:35"><expr pos:start="227:29" pos:end="227:35"><literal type="string" pos:start="227:29" pos:end="227:35">"tap%d"</literal></expr></argument>, <argument pos:start="227:38" pos:end="227:40"><expr pos:start="227:38" pos:end="227:40"><name pos:start="227:38" pos:end="227:40">ppa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="229:5" pos:end="229:18">return <expr pos:start="229:12" pos:end="229:17"><name pos:start="229:12" pos:end="229:17">tap_fd</name></expr>;</return>

</block_content>}</block></function>
</unit>
