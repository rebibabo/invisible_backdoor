<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5549.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">encode_block</name><parameter_list pos:start="1:24" pos:end="1:146">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:35">SVQ1Context</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:47">uint8_t</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">src</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">ref</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:84"><decl pos:start="1:69" pos:end="1:84"><type pos:start="1:69" pos:end="1:84"><name pos:start="1:69" pos:end="1:75">uint8_t</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:84">decoded</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:96"><decl pos:start="1:87" pos:end="1:96"><type pos:start="1:87" pos:end="1:96"><name pos:start="1:87" pos:end="1:89">int</name></type> <name pos:start="1:91" pos:end="1:96">stride</name></decl></parameter>, <parameter pos:start="1:99" pos:end="1:107"><decl pos:start="1:99" pos:end="1:107"><type pos:start="1:99" pos:end="1:107"><name pos:start="1:99" pos:end="1:101">int</name></type> <name pos:start="1:103" pos:end="1:107">level</name></decl></parameter>, <parameter pos:start="1:110" pos:end="1:122"><decl pos:start="1:110" pos:end="1:122"><type pos:start="1:110" pos:end="1:122"><name pos:start="1:110" pos:end="1:112">int</name></type> <name pos:start="1:114" pos:end="1:122">threshold</name></decl></parameter>, <parameter pos:start="1:125" pos:end="1:134"><decl pos:start="1:125" pos:end="1:134"><type pos:start="1:125" pos:end="1:134"><name pos:start="1:125" pos:end="1:127">int</name></type> <name pos:start="1:129" pos:end="1:134">lambda</name></decl></parameter>, <parameter pos:start="1:137" pos:end="1:145"><decl pos:start="1:137" pos:end="1:145"><type pos:start="1:137" pos:end="1:145"><name pos:start="1:137" pos:end="1:139">int</name></type> <name pos:start="1:141" pos:end="1:145">intra</name></decl></parameter>)</parameter_list><block pos:start="1:147" pos:end="283:1">{<block_content pos:start="3:5" pos:end="281:22">

    <decl_stmt pos:start="3:5" pos:end="3:68"><decl pos:start="3:5" pos:end="3:13"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:13">count</name></decl>, <decl pos:start="3:16" pos:end="3:16"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:16" pos:end="3:16">y</name></decl>, <decl pos:start="3:19" pos:end="3:19"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:19" pos:end="3:19">x</name></decl>, <decl pos:start="3:22" pos:end="3:22"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:22" pos:end="3:22">i</name></decl>, <decl pos:start="3:25" pos:end="3:25"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:25" pos:end="3:25">j</name></decl>, <decl pos:start="3:28" pos:end="3:32"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:28" pos:end="3:32">split</name></decl>, <decl pos:start="3:35" pos:end="3:43"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:35" pos:end="3:43">best_mean</name></decl>, <decl pos:start="3:46" pos:end="3:55"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:46" pos:end="3:55">best_score</name></decl>, <decl pos:start="3:58" pos:end="3:67"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:58" pos:end="3:67">best_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:19">best_vector</name><index pos:start="5:20" pos:end="5:22">[<expr pos:start="5:21" pos:end="5:21"><literal type="number" pos:start="5:21" pos:end="5:21">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:17">block_sum</name><index pos:start="7:18" pos:end="7:20">[<expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">7</literal></expr>]</index></name><init pos:start="7:21" pos:end="7:40">= <expr pos:start="7:23" pos:end="7:40"><block pos:start="7:23" pos:end="7:40">{<expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr>, <expr pos:start="7:27" pos:end="7:27"><literal type="number" pos:start="7:27" pos:end="7:27">0</literal></expr>, <expr pos:start="7:30" pos:end="7:30"><literal type="number" pos:start="7:30" pos:end="7:30">0</literal></expr>, <expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">0</literal></expr>, <expr pos:start="7:36" pos:end="7:36"><literal type="number" pos:start="7:36" pos:end="7:36">0</literal></expr>, <expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">w</name><init pos:start="9:10" pos:end="9:28">= <expr pos:start="9:12" pos:end="9:28"><literal type="number" pos:start="9:12" pos:end="9:12">2</literal><operator pos:start="9:13" pos:end="9:14">&lt;&lt;</operator><operator pos:start="9:15" pos:end="9:15">(</operator><operator pos:start="9:16" pos:end="9:16">(</operator><name pos:start="9:17" pos:end="9:21">level</name><operator pos:start="9:22" pos:end="9:22">+</operator><literal type="number" pos:start="9:23" pos:end="9:23">2</literal><operator pos:start="9:24" pos:end="9:24">)</operator><operator pos:start="9:25" pos:end="9:26">&gt;&gt;</operator><literal type="number" pos:start="9:27" pos:end="9:27">1</literal><operator pos:start="9:28" pos:end="9:28">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">h</name><init pos:start="11:10" pos:end="11:28">= <expr pos:start="11:12" pos:end="11:28"><literal type="number" pos:start="11:12" pos:end="11:12">2</literal><operator pos:start="11:13" pos:end="11:14">&lt;&lt;</operator><operator pos:start="11:15" pos:end="11:15">(</operator><operator pos:start="11:16" pos:end="11:16">(</operator><name pos:start="11:17" pos:end="11:21">level</name><operator pos:start="11:22" pos:end="11:22">+</operator><literal type="number" pos:start="11:23" pos:end="11:23">1</literal><operator pos:start="11:24" pos:end="11:24">)</operator><operator pos:start="11:25" pos:end="11:26">&gt;&gt;</operator><literal type="number" pos:start="11:27" pos:end="11:27">1</literal><operator pos:start="11:28" pos:end="11:28">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">size</name><init pos:start="13:13" pos:end="13:16">=<expr pos:start="13:14" pos:end="13:16"><name pos:start="13:14" pos:end="13:14">w</name><operator pos:start="13:15" pos:end="13:15">*</operator><name pos:start="13:16" pos:end="13:16">h</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int16_t</name></type> <name pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:17">block</name><index pos:start="15:18" pos:end="15:20">[<expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">7</literal></expr>]</index><index pos:start="15:21" pos:end="15:25">[<expr pos:start="15:22" pos:end="15:24"><literal type="number" pos:start="15:22" pos:end="15:24">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:18"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:16">int8_t</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:30">codebook_sum</name></decl>, <decl pos:start="17:33" pos:end="17:41"><type ref="prev" pos:start="17:5" pos:end="17:18"><modifier pos:start="17:33" pos:end="17:33">*</modifier></type><name pos:start="17:34" pos:end="17:41">codebook</name></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:34"><expr pos:start="19:5" pos:end="19:33"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <call pos:start="19:11" pos:end="19:30"><name pos:start="19:11" pos:end="19:18">uint16_t</name> <argument_list pos:start="19:20" pos:end="19:30">(<argument pos:start="19:21" pos:end="19:29"><expr pos:start="19:21" pos:end="19:29"><operator pos:start="19:21" pos:end="19:21">*</operator><name pos:start="19:22" pos:end="19:29">mean_vlc</name></expr></argument>)</argument_list></call><index pos:start="19:31" pos:end="19:33">[<expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">2</literal></expr>]</index></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <call pos:start="21:11" pos:end="21:35"><name pos:start="21:11" pos:end="21:17">uint8_t</name> <argument_list pos:start="21:19" pos:end="21:35">(<argument pos:start="21:20" pos:end="21:34"><expr pos:start="21:20" pos:end="21:34"><operator pos:start="21:20" pos:end="21:20">*</operator><name pos:start="21:21" pos:end="21:34">multistage_vlc</name></expr></argument>)</argument_list></call><index pos:start="21:36" pos:end="21:38">[<expr pos:start="21:37" pos:end="21:37"><literal type="number" pos:start="21:37" pos:end="21:37">2</literal></expr>]</index></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:14">best_score</name><operator pos:start="25:15" pos:end="25:15">=</operator><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="27:5" pos:end="27:64">//FIXME optimize, this doenst need to be done multiple times</comment>

    <if_stmt pos:start="29:5" pos:end="81:5"><if pos:start="29:5" pos:end="55:5">if<condition pos:start="29:7" pos:end="29:13">(<expr pos:start="29:8" pos:end="29:12"><name pos:start="29:8" pos:end="29:12">intra</name></expr>)</condition><block pos:start="29:14" pos:end="55:5">{<block_content pos:start="31:9" pos:end="53:9">

        <expr_stmt pos:start="31:9" pos:end="31:53"><expr pos:start="31:9" pos:end="31:52"><name pos:start="31:9" pos:end="31:20">codebook_sum</name><operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:52"><name pos:start="31:23" pos:end="31:45">svq1_intra_codebook_sum</name><index pos:start="31:46" pos:end="31:52">[<expr pos:start="31:47" pos:end="31:51"><name pos:start="31:47" pos:end="31:51">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:49"><expr pos:start="33:9" pos:end="33:48"><name pos:start="33:9" pos:end="33:16">codebook</name><operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:48"><name pos:start="33:19" pos:end="33:41">ff_svq1_intra_codebooks</name><index pos:start="33:42" pos:end="33:48">[<expr pos:start="33:43" pos:end="33:47"><name pos:start="33:43" pos:end="33:47">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:41"><expr pos:start="35:9" pos:end="35:40"><name pos:start="35:9" pos:end="35:16">mean_vlc</name><operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:40">ff_svq1_intra_mean_vlc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:60"><expr pos:start="37:9" pos:end="37:59"><name pos:start="37:9" pos:end="37:22">multistage_vlc</name><operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:59"><name pos:start="37:25" pos:end="37:52">ff_svq1_intra_multistage_vlc</name><index pos:start="37:53" pos:end="37:59">[<expr pos:start="37:54" pos:end="37:58"><name pos:start="37:54" pos:end="37:58">level</name></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="39:9" pos:end="53:9">for<control pos:start="39:12" pos:end="39:26">(<init pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:13">y</name><operator pos:start="39:14" pos:end="39:14">=</operator><literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</init> <condition pos:start="39:18" pos:end="39:21"><expr pos:start="39:18" pos:end="39:20"><name pos:start="39:18" pos:end="39:18">y</name><operator pos:start="39:19" pos:end="39:19">&lt;</operator><name pos:start="39:20" pos:end="39:20">h</name></expr>;</condition> <incr pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><name pos:start="39:23" pos:end="39:23">y</name><operator pos:start="39:24" pos:end="39:25">++</operator></expr></incr>)</control><block pos:start="39:27" pos:end="53:9">{<block_content pos:start="41:13" pos:end="51:13">

            <for pos:start="41:13" pos:end="51:13">for<control pos:start="41:16" pos:end="41:30">(<init pos:start="41:17" pos:end="41:20"><expr pos:start="41:17" pos:end="41:19"><name pos:start="41:17" pos:end="41:17">x</name><operator pos:start="41:18" pos:end="41:18">=</operator><literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>;</init> <condition pos:start="41:22" pos:end="41:25"><expr pos:start="41:22" pos:end="41:24"><name pos:start="41:22" pos:end="41:22">x</name><operator pos:start="41:23" pos:end="41:23">&lt;</operator><name pos:start="41:24" pos:end="41:24">w</name></expr>;</condition> <incr pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:27">x</name><operator pos:start="41:28" pos:end="41:29">++</operator></expr></incr>)</control><block pos:start="41:31" pos:end="51:13">{<block_content pos:start="43:17" pos:end="49:34">

                <decl_stmt pos:start="43:17" pos:end="43:41"><decl pos:start="43:17" pos:end="43:40"><type pos:start="43:17" pos:end="43:19"><name pos:start="43:17" pos:end="43:19">int</name></type> <name pos:start="43:21" pos:end="43:21">v</name><init pos:start="43:22" pos:end="43:40">= <expr pos:start="43:24" pos:end="43:40"><name pos:start="43:24" pos:end="43:40"><name pos:start="43:24" pos:end="43:26">src</name><index pos:start="43:27" pos:end="43:40">[<expr pos:start="43:28" pos:end="43:39"><name pos:start="43:28" pos:end="43:28">x</name> <operator pos:start="43:30" pos:end="43:30">+</operator> <name pos:start="43:32" pos:end="43:32">y</name><operator pos:start="43:33" pos:end="43:33">*</operator><name pos:start="43:34" pos:end="43:39">stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:37"><expr pos:start="45:17" pos:end="45:36"><name pos:start="45:17" pos:end="45:33"><name pos:start="45:17" pos:end="45:21">block</name><index pos:start="45:22" pos:end="45:24">[<expr pos:start="45:23" pos:end="45:23"><literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>]</index><index pos:start="45:25" pos:end="45:33">[<expr pos:start="45:26" pos:end="45:32"><name pos:start="45:26" pos:end="45:26">x</name> <operator pos:start="45:28" pos:end="45:28">+</operator> <name pos:start="45:30" pos:end="45:30">w</name><operator pos:start="45:31" pos:end="45:31">*</operator><name pos:start="45:32" pos:end="45:32">y</name></expr>]</index></name><operator pos:start="45:34" pos:end="45:34">=</operator> <name pos:start="45:36" pos:end="45:36">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:34"><expr pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:26">best_score</name> <operator pos:start="47:28" pos:end="47:29">+=</operator> <name pos:start="47:31" pos:end="47:31">v</name><operator pos:start="47:32" pos:end="47:32">*</operator><name pos:start="47:33" pos:end="47:33">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:34"><expr pos:start="49:17" pos:end="49:33"><name pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:25">block_sum</name><index pos:start="49:26" pos:end="49:28">[<expr pos:start="49:27" pos:end="49:27"><literal type="number" pos:start="49:27" pos:end="49:27">0</literal></expr>]</index></name> <operator pos:start="49:30" pos:end="49:31">+=</operator> <name pos:start="49:33" pos:end="49:33">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if><else pos:start="55:6" pos:end="81:5">else<block pos:start="55:10" pos:end="81:5">{<block_content pos:start="57:9" pos:end="79:9">

        <expr_stmt pos:start="57:9" pos:end="57:53"><expr pos:start="57:9" pos:end="57:52"><name pos:start="57:9" pos:end="57:20">codebook_sum</name><operator pos:start="57:21" pos:end="57:21">=</operator> <name pos:start="57:23" pos:end="57:52"><name pos:start="57:23" pos:end="57:45">svq1_inter_codebook_sum</name><index pos:start="57:46" pos:end="57:52">[<expr pos:start="57:47" pos:end="57:51"><name pos:start="57:47" pos:end="57:51">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:49"><expr pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:16">codebook</name><operator pos:start="59:17" pos:end="59:17">=</operator> <name pos:start="59:19" pos:end="59:48"><name pos:start="59:19" pos:end="59:41">ff_svq1_inter_codebooks</name><index pos:start="59:42" pos:end="59:48">[<expr pos:start="59:43" pos:end="59:47"><name pos:start="59:43" pos:end="59:47">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:47"><expr pos:start="61:9" pos:end="61:46"><name pos:start="61:9" pos:end="61:16">mean_vlc</name><operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:40">ff_svq1_inter_mean_vlc</name> <operator pos:start="61:42" pos:end="61:42">+</operator> <literal type="number" pos:start="61:44" pos:end="61:46">256</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:60"><expr pos:start="63:9" pos:end="63:59"><name pos:start="63:9" pos:end="63:22">multistage_vlc</name><operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:59"><name pos:start="63:25" pos:end="63:52">ff_svq1_inter_multistage_vlc</name><index pos:start="63:53" pos:end="63:59">[<expr pos:start="63:54" pos:end="63:58"><name pos:start="63:54" pos:end="63:58">level</name></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="65:9" pos:end="79:9">for<control pos:start="65:12" pos:end="65:26">(<init pos:start="65:13" pos:end="65:16"><expr pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:13">y</name><operator pos:start="65:14" pos:end="65:14">=</operator><literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>;</init> <condition pos:start="65:18" pos:end="65:21"><expr pos:start="65:18" pos:end="65:20"><name pos:start="65:18" pos:end="65:18">y</name><operator pos:start="65:19" pos:end="65:19">&lt;</operator><name pos:start="65:20" pos:end="65:20">h</name></expr>;</condition> <incr pos:start="65:23" pos:end="65:25"><expr pos:start="65:23" pos:end="65:25"><name pos:start="65:23" pos:end="65:23">y</name><operator pos:start="65:24" pos:end="65:25">++</operator></expr></incr>)</control><block pos:start="65:27" pos:end="79:9">{<block_content pos:start="67:13" pos:end="77:13">

            <for pos:start="67:13" pos:end="77:13">for<control pos:start="67:16" pos:end="67:30">(<init pos:start="67:17" pos:end="67:20"><expr pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:17">x</name><operator pos:start="67:18" pos:end="67:18">=</operator><literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>;</init> <condition pos:start="67:22" pos:end="67:25"><expr pos:start="67:22" pos:end="67:24"><name pos:start="67:22" pos:end="67:22">x</name><operator pos:start="67:23" pos:end="67:23">&lt;</operator><name pos:start="67:24" pos:end="67:24">w</name></expr>;</condition> <incr pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:27">x</name><operator pos:start="67:28" pos:end="67:29">++</operator></expr></incr>)</control><block pos:start="67:31" pos:end="77:13">{<block_content pos:start="69:17" pos:end="75:34">

                <decl_stmt pos:start="69:17" pos:end="69:61"><decl pos:start="69:17" pos:end="69:60"><type pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:19">int</name></type> <name pos:start="69:21" pos:end="69:21">v</name><init pos:start="69:22" pos:end="69:60">= <expr pos:start="69:24" pos:end="69:60"><name pos:start="69:24" pos:end="69:40"><name pos:start="69:24" pos:end="69:26">src</name><index pos:start="69:27" pos:end="69:40">[<expr pos:start="69:28" pos:end="69:39"><name pos:start="69:28" pos:end="69:28">x</name> <operator pos:start="69:30" pos:end="69:30">+</operator> <name pos:start="69:32" pos:end="69:32">y</name><operator pos:start="69:33" pos:end="69:33">*</operator><name pos:start="69:34" pos:end="69:39">stride</name></expr>]</index></name> <operator pos:start="69:42" pos:end="69:42">-</operator> <name pos:start="69:44" pos:end="69:60"><name pos:start="69:44" pos:end="69:46">ref</name><index pos:start="69:47" pos:end="69:60">[<expr pos:start="69:48" pos:end="69:59"><name pos:start="69:48" pos:end="69:48">x</name> <operator pos:start="69:50" pos:end="69:50">+</operator> <name pos:start="69:52" pos:end="69:52">y</name><operator pos:start="69:53" pos:end="69:53">*</operator><name pos:start="69:54" pos:end="69:59">stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:37"><expr pos:start="71:17" pos:end="71:36"><name pos:start="71:17" pos:end="71:33"><name pos:start="71:17" pos:end="71:21">block</name><index pos:start="71:22" pos:end="71:24">[<expr pos:start="71:23" pos:end="71:23"><literal type="number" pos:start="71:23" pos:end="71:23">0</literal></expr>]</index><index pos:start="71:25" pos:end="71:33">[<expr pos:start="71:26" pos:end="71:32"><name pos:start="71:26" pos:end="71:26">x</name> <operator pos:start="71:28" pos:end="71:28">+</operator> <name pos:start="71:30" pos:end="71:30">w</name><operator pos:start="71:31" pos:end="71:31">*</operator><name pos:start="71:32" pos:end="71:32">y</name></expr>]</index></name><operator pos:start="71:34" pos:end="71:34">=</operator> <name pos:start="71:36" pos:end="71:36">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:34"><expr pos:start="73:17" pos:end="73:33"><name pos:start="73:17" pos:end="73:26">best_score</name> <operator pos:start="73:28" pos:end="73:29">+=</operator> <name pos:start="73:31" pos:end="73:31">v</name><operator pos:start="73:32" pos:end="73:32">*</operator><name pos:start="73:33" pos:end="73:33">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:34"><expr pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:25">block_sum</name><index pos:start="75:26" pos:end="75:28">[<expr pos:start="75:27" pos:end="75:27"><literal type="number" pos:start="75:27" pos:end="75:27">0</literal></expr>]</index></name> <operator pos:start="75:30" pos:end="75:31">+=</operator> <name pos:start="75:33" pos:end="75:33">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:17"><expr pos:start="85:5" pos:end="85:16"><name pos:start="85:5" pos:end="85:14">best_count</name><operator pos:start="85:15" pos:end="85:15">=</operator><literal type="number" pos:start="85:16" pos:end="85:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:59"><expr pos:start="87:5" pos:end="87:58"><name pos:start="87:5" pos:end="87:14">best_score</name> <operator pos:start="87:16" pos:end="87:17">-=</operator> <operator pos:start="87:19" pos:end="87:19">(</operator><operator pos:start="87:20" pos:end="87:20">(</operator><name pos:start="87:21" pos:end="87:32"><name pos:start="87:21" pos:end="87:29">block_sum</name><index pos:start="87:30" pos:end="87:32">[<expr pos:start="87:31" pos:end="87:31"><literal type="number" pos:start="87:31" pos:end="87:31">0</literal></expr>]</index></name><operator pos:start="87:33" pos:end="87:33">*</operator><name pos:start="87:34" pos:end="87:45"><name pos:start="87:34" pos:end="87:42">block_sum</name><index pos:start="87:43" pos:end="87:45">[<expr pos:start="87:44" pos:end="87:44"><literal type="number" pos:start="87:44" pos:end="87:44">0</literal></expr>]</index></name><operator pos:start="87:46" pos:end="87:46">)</operator><operator pos:start="87:47" pos:end="87:48">&gt;&gt;</operator><operator pos:start="87:49" pos:end="87:49">(</operator><name pos:start="87:50" pos:end="87:54">level</name><operator pos:start="87:55" pos:end="87:55">+</operator><literal type="number" pos:start="87:56" pos:end="87:56">3</literal><operator pos:start="87:57" pos:end="87:57">)</operator><operator pos:start="87:58" pos:end="87:58">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:55"><expr pos:start="89:5" pos:end="89:54"><name pos:start="89:5" pos:end="89:13">best_mean</name><operator pos:start="89:14" pos:end="89:14">=</operator> <operator pos:start="89:16" pos:end="89:16">(</operator><name pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:25">block_sum</name><index pos:start="89:26" pos:end="89:28">[<expr pos:start="89:27" pos:end="89:27"><literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>]</index></name> <operator pos:start="89:30" pos:end="89:30">+</operator> <operator pos:start="89:32" pos:end="89:32">(</operator><name pos:start="89:33" pos:end="89:36">size</name><operator pos:start="89:37" pos:end="89:38">&gt;&gt;</operator><literal type="number" pos:start="89:39" pos:end="89:39">1</literal><operator pos:start="89:40" pos:end="89:40">)</operator><operator pos:start="89:41" pos:end="89:41">)</operator> <operator pos:start="89:43" pos:end="89:44">&gt;&gt;</operator> <operator pos:start="89:46" pos:end="89:46">(</operator><name pos:start="89:47" pos:end="89:51">level</name><operator pos:start="89:52" pos:end="89:52">+</operator><literal type="number" pos:start="89:53" pos:end="89:53">3</literal><operator pos:start="89:54" pos:end="89:54">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="177:5"><if pos:start="93:5" pos:end="177:5">if<condition pos:start="93:7" pos:end="93:15">(<expr pos:start="93:8" pos:end="93:14"><name pos:start="93:8" pos:end="93:12">level</name><operator pos:start="93:13" pos:end="93:13">&lt;</operator><literal type="number" pos:start="93:14" pos:end="93:14">4</literal></expr>)</condition><block pos:start="93:16" pos:end="177:5">{<block_content pos:start="95:9" pos:end="175:9">

        <for pos:start="95:9" pos:end="175:9">for<control pos:start="95:12" pos:end="95:38">(<init pos:start="95:13" pos:end="95:20"><expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:17">count</name><operator pos:start="95:18" pos:end="95:18">=</operator><literal type="number" pos:start="95:19" pos:end="95:19">1</literal></expr>;</init> <condition pos:start="95:22" pos:end="95:29"><expr pos:start="95:22" pos:end="95:28"><name pos:start="95:22" pos:end="95:26">count</name><operator pos:start="95:27" pos:end="95:27">&lt;</operator><literal type="number" pos:start="95:28" pos:end="95:28">7</literal></expr>;</condition> <incr pos:start="95:31" pos:end="95:37"><expr pos:start="95:31" pos:end="95:37"><name pos:start="95:31" pos:end="95:35">count</name><operator pos:start="95:36" pos:end="95:37">++</operator></expr></incr>)</control><block pos:start="95:39" pos:end="175:9">{<block_content pos:start="97:13" pos:end="173:13">

            <decl_stmt pos:start="97:13" pos:end="97:43"><decl pos:start="97:13" pos:end="97:42"><type pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">int</name></type> <name pos:start="97:17" pos:end="97:33">best_vector_score</name><init pos:start="97:34" pos:end="97:42">= <expr pos:start="97:36" pos:end="97:42"><name pos:start="97:36" pos:end="97:42">INT_MAX</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="99:13" pos:end="99:60"><decl pos:start="99:13" pos:end="99:36"><type pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:15">int</name></type> <name pos:start="99:17" pos:end="99:31">best_vector_sum</name><init pos:start="99:32" pos:end="99:36">=<expr pos:start="99:33" pos:end="99:36"><operator pos:start="99:33" pos:end="99:33">-</operator><literal type="number" pos:start="99:34" pos:end="99:36">999</literal></expr></init></decl>, <decl pos:start="99:39" pos:end="99:59"><type ref="prev" pos:start="99:13" pos:end="99:15"/><name pos:start="99:39" pos:end="99:54">best_vector_mean</name><init pos:start="99:55" pos:end="99:59">=<expr pos:start="99:56" pos:end="99:59"><operator pos:start="99:56" pos:end="99:56">-</operator><literal type="number" pos:start="99:57" pos:end="99:59">999</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="101:13" pos:end="101:37"><decl pos:start="101:13" pos:end="101:36"><type pos:start="101:13" pos:end="101:21"><specifier pos:start="101:13" pos:end="101:17">const</specifier> <name pos:start="101:19" pos:end="101:21">int</name></type> <name pos:start="101:23" pos:end="101:27">stage</name><init pos:start="101:28" pos:end="101:36">= <expr pos:start="101:30" pos:end="101:36"><name pos:start="101:30" pos:end="101:34">count</name><operator pos:start="101:35" pos:end="101:35">-</operator><literal type="number" pos:start="101:36" pos:end="101:36">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="103:13" pos:end="103:33"><decl pos:start="103:13" pos:end="103:32"><type pos:start="103:13" pos:end="103:26"><specifier pos:start="103:13" pos:end="103:17">const</specifier> <name pos:start="103:19" pos:end="103:24">int8_t</name> <modifier pos:start="103:26" pos:end="103:26">*</modifier></type><name pos:start="103:27" pos:end="103:32">vector</name></decl>;</decl_stmt>



            <for pos:start="107:13" pos:end="141:13">for<control pos:start="107:16" pos:end="107:31">(<init pos:start="107:17" pos:end="107:20"><expr pos:start="107:17" pos:end="107:19"><name pos:start="107:17" pos:end="107:17">i</name><operator pos:start="107:18" pos:end="107:18">=</operator><literal type="number" pos:start="107:19" pos:end="107:19">0</literal></expr>;</init> <condition pos:start="107:22" pos:end="107:26"><expr pos:start="107:22" pos:end="107:25"><name pos:start="107:22" pos:end="107:22">i</name><operator pos:start="107:23" pos:end="107:23">&lt;</operator><literal type="number" pos:start="107:24" pos:end="107:25">16</literal></expr>;</condition> <incr pos:start="107:28" pos:end="107:30"><expr pos:start="107:28" pos:end="107:30"><name pos:start="107:28" pos:end="107:28">i</name><operator pos:start="107:29" pos:end="107:30">++</operator></expr></incr>)</control><block pos:start="107:32" pos:end="141:13">{<block_content pos:start="109:17" pos:end="139:17">

                <decl_stmt pos:start="109:17" pos:end="109:52"><decl pos:start="109:17" pos:end="109:51"><type pos:start="109:17" pos:end="109:19"><name pos:start="109:17" pos:end="109:19">int</name></type> <name pos:start="109:21" pos:end="109:23">sum</name><init pos:start="109:24" pos:end="109:51">= <expr pos:start="109:26" pos:end="109:51"><name pos:start="109:26" pos:end="109:51"><name pos:start="109:26" pos:end="109:37">codebook_sum</name><index pos:start="109:38" pos:end="109:51">[<expr pos:start="109:39" pos:end="109:50"><name pos:start="109:39" pos:end="109:43">stage</name><operator pos:start="109:44" pos:end="109:44">*</operator><literal type="number" pos:start="109:45" pos:end="109:48">16</literal> <operator pos:start="109:48" pos:end="109:48">+</operator> <name pos:start="109:50" pos:end="109:50">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="111:17" pos:end="111:37"><decl pos:start="111:17" pos:end="111:23"><type pos:start="111:17" pos:end="111:19"><name pos:start="111:17" pos:end="111:19">int</name></type> <name pos:start="111:21" pos:end="111:23">sqr</name></decl>, <decl pos:start="111:26" pos:end="111:29"><type ref="prev" pos:start="111:17" pos:end="111:19"/><name pos:start="111:26" pos:end="111:29">diff</name></decl>, <decl pos:start="111:32" pos:end="111:36"><type ref="prev" pos:start="111:17" pos:end="111:19"/><name pos:start="111:32" pos:end="111:36">score</name></decl>;</decl_stmt>



                <expr_stmt pos:start="115:17" pos:end="115:59"><expr pos:start="115:17" pos:end="115:58"><name pos:start="115:17" pos:end="115:22">vector</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <name pos:start="115:26" pos:end="115:33">codebook</name> <operator pos:start="115:35" pos:end="115:35">+</operator> <name pos:start="115:37" pos:end="115:41">stage</name><operator pos:start="115:42" pos:end="115:42">*</operator><name pos:start="115:43" pos:end="115:46">size</name><operator pos:start="115:47" pos:end="115:47">*</operator><literal type="number" pos:start="115:48" pos:end="115:51">16</literal> <operator pos:start="115:51" pos:end="115:51">+</operator> <name pos:start="115:53" pos:end="115:53">i</name><operator pos:start="115:54" pos:end="115:54">*</operator><name pos:start="115:55" pos:end="115:58">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:75"><expr pos:start="117:17" pos:end="117:74"><name pos:start="117:17" pos:end="117:19">sqr</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:74"><name pos:start="117:23" pos:end="117:46"><name pos:start="117:23" pos:end="117:23">s</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:28">dsp</name><operator pos:start="117:29" pos:end="117:29">.</operator><name pos:start="117:30" pos:end="117:46">ssd_int8_vs_int16</name></name><argument_list pos:start="117:47" pos:end="117:74">(<argument pos:start="117:48" pos:end="117:53"><expr pos:start="117:48" pos:end="117:53"><name pos:start="117:48" pos:end="117:53">vector</name></expr></argument>, <argument pos:start="117:56" pos:end="117:67"><expr pos:start="117:56" pos:end="117:67"><name pos:start="117:56" pos:end="117:67"><name pos:start="117:56" pos:end="117:60">block</name><index pos:start="117:61" pos:end="117:67">[<expr pos:start="117:62" pos:end="117:66"><name pos:start="117:62" pos:end="117:66">stage</name></expr>]</index></name></expr></argument>, <argument pos:start="117:70" pos:end="117:73"><expr pos:start="117:70" pos:end="117:73"><name pos:start="117:70" pos:end="117:73">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:45"><expr pos:start="119:17" pos:end="119:44"><name pos:start="119:17" pos:end="119:20">diff</name><operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:38"><name pos:start="119:23" pos:end="119:31">block_sum</name><index pos:start="119:32" pos:end="119:38">[<expr pos:start="119:33" pos:end="119:37"><name pos:start="119:33" pos:end="119:37">stage</name></expr>]</index></name> <operator pos:start="119:40" pos:end="119:40">-</operator> <name pos:start="119:42" pos:end="119:44">sum</name></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:63"><expr pos:start="121:17" pos:end="121:62"><name pos:start="121:17" pos:end="121:21">score</name><operator pos:start="121:22" pos:end="121:22">=</operator> <name pos:start="121:24" pos:end="121:26">sqr</name> <operator pos:start="121:28" pos:end="121:28">-</operator> <operator pos:start="121:30" pos:end="121:30">(</operator><operator pos:start="121:31" pos:end="121:31">(</operator><name pos:start="121:32" pos:end="121:35">diff</name><operator pos:start="121:36" pos:end="121:36">*</operator><operator pos:start="121:37" pos:end="121:37">(</operator><name pos:start="121:38" pos:end="121:44">int64_t</name><operator pos:start="121:45" pos:end="121:45">)</operator><name pos:start="121:46" pos:end="121:49">diff</name><operator pos:start="121:50" pos:end="121:50">)</operator><operator pos:start="121:51" pos:end="121:52">&gt;&gt;</operator><operator pos:start="121:53" pos:end="121:53">(</operator><name pos:start="121:54" pos:end="121:58">level</name><operator pos:start="121:59" pos:end="121:59">+</operator><literal type="number" pos:start="121:60" pos:end="121:60">3</literal><operator pos:start="121:61" pos:end="121:61">)</operator><operator pos:start="121:62" pos:end="121:62">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="121:65" pos:end="121:84">//FIXME 64bit slooow</comment>

                <if_stmt pos:start="123:17" pos:end="139:17"><if pos:start="123:17" pos:end="139:17">if<condition pos:start="123:19" pos:end="123:45">(<expr pos:start="123:20" pos:end="123:44"><name pos:start="123:20" pos:end="123:24">score</name> <operator pos:start="123:26" pos:end="123:26">&lt;</operator> <name pos:start="123:28" pos:end="123:44">best_vector_score</name></expr>)</condition><block pos:start="123:46" pos:end="139:17">{<block_content pos:start="125:21" pos:end="137:43">

                    <decl_stmt pos:start="125:21" pos:end="125:62"><decl pos:start="125:21" pos:end="125:61"><type pos:start="125:21" pos:end="125:23"><name pos:start="125:21" pos:end="125:23">int</name></type> <name pos:start="125:25" pos:end="125:28">mean</name><init pos:start="125:29" pos:end="125:61">= <expr pos:start="125:31" pos:end="125:61"><operator pos:start="125:31" pos:end="125:31">(</operator><name pos:start="125:32" pos:end="125:35">diff</name> <operator pos:start="125:37" pos:end="125:37">+</operator> <operator pos:start="125:39" pos:end="125:39">(</operator><name pos:start="125:40" pos:end="125:43">size</name><operator pos:start="125:44" pos:end="125:45">&gt;&gt;</operator><literal type="number" pos:start="125:46" pos:end="125:46">1</literal><operator pos:start="125:47" pos:end="125:47">)</operator><operator pos:start="125:48" pos:end="125:48">)</operator> <operator pos:start="125:50" pos:end="125:51">&gt;&gt;</operator> <operator pos:start="125:53" pos:end="125:53">(</operator><name pos:start="125:54" pos:end="125:58">level</name><operator pos:start="125:59" pos:end="125:59">+</operator><literal type="number" pos:start="125:60" pos:end="125:60">3</literal><operator pos:start="125:61" pos:end="125:61">)</operator></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="127:21" pos:end="127:51"><expr pos:start="127:21" pos:end="127:50"><call pos:start="127:21" pos:end="127:50"><name pos:start="127:21" pos:end="127:26">assert</name><argument_list pos:start="127:27" pos:end="127:50">(<argument pos:start="127:28" pos:end="127:49"><expr pos:start="127:28" pos:end="127:49"><name pos:start="127:28" pos:end="127:31">mean</name> <operator pos:start="127:33" pos:end="127:33">&gt;</operator><operator pos:start="127:34" pos:end="127:34">-</operator><literal type="number" pos:start="127:35" pos:end="127:37">300</literal> <operator pos:start="127:39" pos:end="127:40">&amp;&amp;</operator> <name pos:start="127:42" pos:end="127:45">mean</name><operator pos:start="127:46" pos:end="127:46">&lt;</operator><literal type="number" pos:start="127:47" pos:end="127:49">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:59"><expr pos:start="129:21" pos:end="129:58"><name pos:start="129:21" pos:end="129:24">mean</name><operator pos:start="129:25" pos:end="129:25">=</operator> <call pos:start="129:27" pos:end="129:58"><name pos:start="129:27" pos:end="129:33">av_clip</name><argument_list pos:start="129:34" pos:end="129:58">(<argument pos:start="129:35" pos:end="129:38"><expr pos:start="129:35" pos:end="129:38"><name pos:start="129:35" pos:end="129:38">mean</name></expr></argument>, <argument pos:start="129:41" pos:end="129:52"><expr pos:start="129:41" pos:end="129:52"><ternary pos:start="129:41" pos:end="129:52"><condition pos:start="129:41" pos:end="129:46"><expr pos:start="129:41" pos:end="129:45"><name pos:start="129:41" pos:end="129:45">intra</name></expr>?</condition><then pos:start="129:47" pos:end="129:47"><expr pos:start="129:47" pos:end="129:47"><literal type="number" pos:start="129:47" pos:end="129:47">0</literal></expr></then><else pos:start="129:48" pos:end="129:52">:<expr pos:start="129:49" pos:end="129:52"><operator pos:start="129:49" pos:end="129:49">-</operator><literal type="number" pos:start="129:50" pos:end="129:52">256</literal></expr></else></ternary></expr></argument>, <argument pos:start="129:55" pos:end="129:57"><expr pos:start="129:55" pos:end="129:57"><literal type="number" pos:start="129:55" pos:end="129:57">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="131:21" pos:end="131:45"><expr pos:start="131:21" pos:end="131:44"><name pos:start="131:21" pos:end="131:37">best_vector_score</name><operator pos:start="131:38" pos:end="131:38">=</operator> <name pos:start="131:40" pos:end="131:44">score</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="133:21" pos:end="133:42"><expr pos:start="133:21" pos:end="133:41"><name pos:start="133:21" pos:end="133:38"><name pos:start="133:21" pos:end="133:31">best_vector</name><index pos:start="133:32" pos:end="133:38">[<expr pos:start="133:33" pos:end="133:37"><name pos:start="133:33" pos:end="133:37">stage</name></expr>]</index></name><operator pos:start="133:39" pos:end="133:39">=</operator> <name pos:start="133:41" pos:end="133:41">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="135:21" pos:end="135:41"><expr pos:start="135:21" pos:end="135:40"><name pos:start="135:21" pos:end="135:35">best_vector_sum</name><operator pos:start="135:36" pos:end="135:36">=</operator> <name pos:start="135:38" pos:end="135:40">sum</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="137:21" pos:end="137:43"><expr pos:start="137:21" pos:end="137:42"><name pos:start="137:21" pos:end="137:36">best_vector_mean</name><operator pos:start="137:37" pos:end="137:37">=</operator> <name pos:start="137:39" pos:end="137:42">mean</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="143:13" pos:end="143:45"><expr pos:start="143:13" pos:end="143:44"><call pos:start="143:13" pos:end="143:44"><name pos:start="143:13" pos:end="143:18">assert</name><argument_list pos:start="143:19" pos:end="143:44">(<argument pos:start="143:20" pos:end="143:43"><expr pos:start="143:20" pos:end="143:43"><name pos:start="143:20" pos:end="143:35">best_vector_mean</name> <operator pos:start="143:37" pos:end="143:38">!=</operator> <operator pos:start="143:40" pos:end="143:40">-</operator><literal type="number" pos:start="143:41" pos:end="143:43">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:71"><expr pos:start="145:13" pos:end="145:70"><name pos:start="145:13" pos:end="145:18">vector</name><operator pos:start="145:19" pos:end="145:19">=</operator> <name pos:start="145:21" pos:end="145:28">codebook</name> <operator pos:start="145:30" pos:end="145:30">+</operator> <name pos:start="145:32" pos:end="145:36">stage</name><operator pos:start="145:37" pos:end="145:37">*</operator><name pos:start="145:38" pos:end="145:41">size</name><operator pos:start="145:42" pos:end="145:42">*</operator><literal type="number" pos:start="145:43" pos:end="145:46">16</literal> <operator pos:start="145:46" pos:end="145:46">+</operator> <name pos:start="145:48" pos:end="145:65"><name pos:start="145:48" pos:end="145:58">best_vector</name><index pos:start="145:59" pos:end="145:65">[<expr pos:start="145:60" pos:end="145:64"><name pos:start="145:60" pos:end="145:64">stage</name></expr>]</index></name><operator pos:start="145:66" pos:end="145:66">*</operator><name pos:start="145:67" pos:end="145:70">size</name></expr>;</expr_stmt>

            <for pos:start="147:13" pos:end="151:13">for<control pos:start="147:16" pos:end="147:33">(<init pos:start="147:17" pos:end="147:20"><expr pos:start="147:17" pos:end="147:19"><name pos:start="147:17" pos:end="147:17">j</name><operator pos:start="147:18" pos:end="147:18">=</operator><literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr>;</init> <condition pos:start="147:22" pos:end="147:28"><expr pos:start="147:22" pos:end="147:27"><name pos:start="147:22" pos:end="147:22">j</name><operator pos:start="147:23" pos:end="147:23">&lt;</operator><name pos:start="147:24" pos:end="147:27">size</name></expr>;</condition> <incr pos:start="147:30" pos:end="147:32"><expr pos:start="147:30" pos:end="147:32"><name pos:start="147:30" pos:end="147:30">j</name><operator pos:start="147:31" pos:end="147:32">++</operator></expr></incr>)</control><block pos:start="147:34" pos:end="151:13">{<block_content pos:start="149:17" pos:end="149:64">

                <expr_stmt pos:start="149:17" pos:end="149:64"><expr pos:start="149:17" pos:end="149:63"><name pos:start="149:17" pos:end="149:33"><name pos:start="149:17" pos:end="149:21">block</name><index pos:start="149:22" pos:end="149:30">[<expr pos:start="149:23" pos:end="149:29"><name pos:start="149:23" pos:end="149:27">stage</name><operator pos:start="149:28" pos:end="149:28">+</operator><literal type="number" pos:start="149:29" pos:end="149:29">1</literal></expr>]</index><index pos:start="149:31" pos:end="149:33">[<expr pos:start="149:32" pos:end="149:32"><name pos:start="149:32" pos:end="149:32">j</name></expr>]</index></name> <operator pos:start="149:35" pos:end="149:35">=</operator> <name pos:start="149:37" pos:end="149:51"><name pos:start="149:37" pos:end="149:41">block</name><index pos:start="149:42" pos:end="149:48">[<expr pos:start="149:43" pos:end="149:47"><name pos:start="149:43" pos:end="149:47">stage</name></expr>]</index><index pos:start="149:49" pos:end="149:51">[<expr pos:start="149:50" pos:end="149:50"><name pos:start="149:50" pos:end="149:50">j</name></expr>]</index></name> <operator pos:start="149:53" pos:end="149:53">-</operator> <name pos:start="149:55" pos:end="149:63"><name pos:start="149:55" pos:end="149:60">vector</name><index pos:start="149:61" pos:end="149:63">[<expr pos:start="149:62" pos:end="149:62"><name pos:start="149:62" pos:end="149:62">j</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="153:13" pos:end="153:67"><expr pos:start="153:13" pos:end="153:66"><name pos:start="153:13" pos:end="153:30"><name pos:start="153:13" pos:end="153:21">block_sum</name><index pos:start="153:22" pos:end="153:30">[<expr pos:start="153:23" pos:end="153:29"><name pos:start="153:23" pos:end="153:27">stage</name><operator pos:start="153:28" pos:end="153:28">+</operator><literal type="number" pos:start="153:29" pos:end="153:29">1</literal></expr>]</index></name><operator pos:start="153:31" pos:end="153:31">=</operator> <name pos:start="153:33" pos:end="153:48"><name pos:start="153:33" pos:end="153:41">block_sum</name><index pos:start="153:42" pos:end="153:48">[<expr pos:start="153:43" pos:end="153:47"><name pos:start="153:43" pos:end="153:47">stage</name></expr>]</index></name> <operator pos:start="153:50" pos:end="153:50">-</operator> <name pos:start="153:52" pos:end="153:66">best_vector_sum</name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="161:57"><expr pos:start="155:13" pos:end="161:56"><name pos:start="155:13" pos:end="155:29">best_vector_score</name> <operator pos:start="155:31" pos:end="155:32">+=</operator>

                <name pos:start="157:17" pos:end="157:22">lambda</name><operator pos:start="157:23" pos:end="157:23">*</operator><operator pos:start="157:24" pos:end="157:24">(</operator><operator pos:start="157:25" pos:end="157:25">+</operator> <literal type="number" pos:start="157:27" pos:end="157:29">1</literal> <operator pos:start="157:29" pos:end="157:29">+</operator> <literal type="number" pos:start="157:31" pos:end="157:31">4</literal><operator pos:start="157:32" pos:end="157:32">*</operator><name pos:start="157:33" pos:end="157:37">count</name>

                        <operator pos:start="159:25" pos:end="159:25">+</operator> <name pos:start="159:27" pos:end="159:52"><name pos:start="159:27" pos:end="159:40">multistage_vlc</name><index pos:start="159:41" pos:end="159:49">[<expr pos:start="159:42" pos:end="159:48"><literal type="number" pos:start="159:42" pos:end="159:43">1</literal><operator pos:start="159:43" pos:end="159:43">+</operator><name pos:start="159:44" pos:end="159:48">count</name></expr>]</index><index pos:start="159:50" pos:end="159:52">[<expr pos:start="159:51" pos:end="159:51"><literal type="number" pos:start="159:51" pos:end="159:51">1</literal></expr>]</index></name>

                        <operator pos:start="161:25" pos:end="161:25">+</operator> <name pos:start="161:27" pos:end="161:55"><name pos:start="161:27" pos:end="161:34">mean_vlc</name><index pos:start="161:35" pos:end="161:52">[<expr pos:start="161:36" pos:end="161:51"><name pos:start="161:36" pos:end="161:51">best_vector_mean</name></expr>]</index><index pos:start="161:53" pos:end="161:55">[<expr pos:start="161:54" pos:end="161:54"><literal type="number" pos:start="161:54" pos:end="161:54">1</literal></expr>]</index></name><operator pos:start="161:56" pos:end="161:56">)</operator></expr>;</expr_stmt>



            <if_stmt pos:start="165:13" pos:end="173:13"><if pos:start="165:13" pos:end="173:13">if<condition pos:start="165:15" pos:end="165:46">(<expr pos:start="165:16" pos:end="165:45"><name pos:start="165:16" pos:end="165:32">best_vector_score</name> <operator pos:start="165:34" pos:end="165:34">&lt;</operator> <name pos:start="165:36" pos:end="165:45">best_score</name></expr>)</condition><block pos:start="165:47" pos:end="173:13">{<block_content pos:start="167:17" pos:end="171:44">

                <expr_stmt pos:start="167:17" pos:end="167:46"><expr pos:start="167:17" pos:end="167:45"><name pos:start="167:17" pos:end="167:26">best_score</name><operator pos:start="167:27" pos:end="167:27">=</operator> <name pos:start="167:29" pos:end="167:45">best_vector_score</name></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:34"><expr pos:start="169:17" pos:end="169:33"><name pos:start="169:17" pos:end="169:26">best_count</name><operator pos:start="169:27" pos:end="169:27">=</operator> <name pos:start="169:29" pos:end="169:33">count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:44"><expr pos:start="171:17" pos:end="171:43"><name pos:start="171:17" pos:end="171:25">best_mean</name><operator pos:start="171:26" pos:end="171:26">=</operator> <name pos:start="171:28" pos:end="171:43">best_vector_mean</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:12"><expr pos:start="181:5" pos:end="181:11"><name pos:start="181:5" pos:end="181:9">split</name><operator pos:start="181:10" pos:end="181:10">=</operator><literal type="number" pos:start="181:11" pos:end="181:11">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="223:5"><if pos:start="183:5" pos:end="223:5">if<condition pos:start="183:7" pos:end="183:39">(<expr pos:start="183:8" pos:end="183:38"><name pos:start="183:8" pos:end="183:17">best_score</name> <operator pos:start="183:19" pos:end="183:19">&gt;</operator> <name pos:start="183:21" pos:end="183:29">threshold</name> <operator pos:start="183:31" pos:end="183:32">&amp;&amp;</operator> <name pos:start="183:34" pos:end="183:38">level</name></expr>)</condition><block pos:start="183:40" pos:end="223:5">{<block_content pos:start="185:9" pos:end="221:9">

        <decl_stmt pos:start="185:9" pos:end="185:20"><decl pos:start="185:9" pos:end="185:19"><type pos:start="185:9" pos:end="185:11"><name pos:start="185:9" pos:end="185:11">int</name></type> <name pos:start="185:13" pos:end="185:17">score</name><init pos:start="185:18" pos:end="185:19">=<expr pos:start="185:19" pos:end="185:19"><literal type="number" pos:start="185:19" pos:end="185:19">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="187:9" pos:end="187:49"><decl pos:start="187:9" pos:end="187:48"><type pos:start="187:9" pos:end="187:11"><name pos:start="187:9" pos:end="187:11">int</name></type> <name pos:start="187:13" pos:end="187:18">offset</name><init pos:start="187:19" pos:end="187:48">= <expr pos:start="187:21" pos:end="187:48"><ternary pos:start="187:21" pos:end="187:48"><condition pos:start="187:21" pos:end="187:31"><expr pos:start="187:21" pos:end="187:29"><operator pos:start="187:21" pos:end="187:21">(</operator><name pos:start="187:22" pos:end="187:26">level</name><operator pos:start="187:27" pos:end="187:27">&amp;</operator><literal type="number" pos:start="187:28" pos:end="187:28">1</literal><operator pos:start="187:29" pos:end="187:29">)</operator></expr> ?</condition><then pos:start="187:33" pos:end="187:42"> <expr pos:start="187:33" pos:end="187:42"><name pos:start="187:33" pos:end="187:38">stride</name><operator pos:start="187:39" pos:end="187:39">*</operator><name pos:start="187:40" pos:end="187:40">h</name><operator pos:start="187:41" pos:end="187:41">/</operator><literal type="number" pos:start="187:42" pos:end="187:42">2</literal></expr> </then><else pos:start="187:44" pos:end="187:48">: <expr pos:start="187:46" pos:end="187:48"><name pos:start="187:46" pos:end="187:46">w</name><operator pos:start="187:47" pos:end="187:47">/</operator><literal type="number" pos:start="187:48" pos:end="187:48">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="189:9" pos:end="189:32"><decl pos:start="189:9" pos:end="189:31"><type pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:21">PutBitContext</name></type> <name pos:start="189:23" pos:end="189:31"><name pos:start="189:23" pos:end="189:28">backup</name><index pos:start="189:29" pos:end="189:31">[<expr pos:start="189:30" pos:end="189:30"><literal type="number" pos:start="189:30" pos:end="189:30">6</literal></expr>]</index></name></decl>;</decl_stmt>



        <for pos:start="193:9" pos:end="197:9">for<control pos:start="193:12" pos:end="193:33">(<init pos:start="193:13" pos:end="193:22"><expr pos:start="193:13" pos:end="193:21"><name pos:start="193:13" pos:end="193:13">i</name><operator pos:start="193:14" pos:end="193:14">=</operator><name pos:start="193:15" pos:end="193:19">level</name><operator pos:start="193:20" pos:end="193:20">-</operator><literal type="number" pos:start="193:21" pos:end="193:21">1</literal></expr>;</init> <condition pos:start="193:24" pos:end="193:28"><expr pos:start="193:24" pos:end="193:27"><name pos:start="193:24" pos:end="193:24">i</name><operator pos:start="193:25" pos:end="193:26">&gt;=</operator><literal type="number" pos:start="193:27" pos:end="193:27">0</literal></expr>;</condition> <incr pos:start="193:30" pos:end="193:32"><expr pos:start="193:30" pos:end="193:32"><name pos:start="193:30" pos:end="193:30">i</name><operator pos:start="193:31" pos:end="193:32">--</operator></expr></incr>)</control><block pos:start="193:34" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:40">

            <expr_stmt pos:start="195:13" pos:end="195:40"><expr pos:start="195:13" pos:end="195:39"><name pos:start="195:13" pos:end="195:21"><name pos:start="195:13" pos:end="195:18">backup</name><index pos:start="195:19" pos:end="195:21">[<expr pos:start="195:20" pos:end="195:20"><name pos:start="195:20" pos:end="195:20">i</name></expr>]</index></name><operator pos:start="195:22" pos:end="195:22">=</operator> <name pos:start="195:24" pos:end="195:39"><name pos:start="195:24" pos:end="195:24">s</name><operator pos:start="195:25" pos:end="195:26">-&gt;</operator><name pos:start="195:27" pos:end="195:36">reorder_pb</name><index pos:start="195:37" pos:end="195:39">[<expr pos:start="195:38" pos:end="195:38"><name pos:start="195:38" pos:end="195:38">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="199:9" pos:end="199:125"><expr pos:start="199:9" pos:end="199:124"><name pos:start="199:9" pos:end="199:13">score</name> <operator pos:start="199:15" pos:end="199:16">+=</operator> <call pos:start="199:18" pos:end="199:124"><name pos:start="199:18" pos:end="199:29">encode_block</name><argument_list pos:start="199:30" pos:end="199:124">(<argument pos:start="199:31" pos:end="199:31"><expr pos:start="199:31" pos:end="199:31"><name pos:start="199:31" pos:end="199:31">s</name></expr></argument>, <argument pos:start="199:34" pos:end="199:36"><expr pos:start="199:34" pos:end="199:36"><name pos:start="199:34" pos:end="199:36">src</name></expr></argument>         , <argument pos:start="199:48" pos:end="199:50"><expr pos:start="199:48" pos:end="199:50"><name pos:start="199:48" pos:end="199:50">ref</name></expr></argument>         , <argument pos:start="199:62" pos:end="199:68"><expr pos:start="199:62" pos:end="199:68"><name pos:start="199:62" pos:end="199:68">decoded</name></expr></argument>         , <argument pos:start="199:80" pos:end="199:85"><expr pos:start="199:80" pos:end="199:85"><name pos:start="199:80" pos:end="199:85">stride</name></expr></argument>, <argument pos:start="199:88" pos:end="199:94"><expr pos:start="199:88" pos:end="199:94"><name pos:start="199:88" pos:end="199:92">level</name><operator pos:start="199:93" pos:end="199:93">-</operator><literal type="number" pos:start="199:94" pos:end="199:94">1</literal></expr></argument>, <argument pos:start="199:97" pos:end="199:108"><expr pos:start="199:97" pos:end="199:108"><name pos:start="199:97" pos:end="199:105">threshold</name><operator pos:start="199:106" pos:end="199:107">&gt;&gt;</operator><literal type="number" pos:start="199:108" pos:end="199:108">1</literal></expr></argument>, <argument pos:start="199:111" pos:end="199:116"><expr pos:start="199:111" pos:end="199:116"><name pos:start="199:111" pos:end="199:116">lambda</name></expr></argument>, <argument pos:start="199:119" pos:end="199:123"><expr pos:start="199:119" pos:end="199:123"><name pos:start="199:119" pos:end="199:123">intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:125"><expr pos:start="201:9" pos:end="201:124"><name pos:start="201:9" pos:end="201:13">score</name> <operator pos:start="201:15" pos:end="201:16">+=</operator> <call pos:start="201:18" pos:end="201:124"><name pos:start="201:18" pos:end="201:29">encode_block</name><argument_list pos:start="201:30" pos:end="201:124">(<argument pos:start="201:31" pos:end="201:31"><expr pos:start="201:31" pos:end="201:31"><name pos:start="201:31" pos:end="201:31">s</name></expr></argument>, <argument pos:start="201:34" pos:end="201:45"><expr pos:start="201:34" pos:end="201:45"><name pos:start="201:34" pos:end="201:36">src</name> <operator pos:start="201:38" pos:end="201:38">+</operator> <name pos:start="201:40" pos:end="201:45">offset</name></expr></argument>, <argument pos:start="201:48" pos:end="201:59"><expr pos:start="201:48" pos:end="201:59"><name pos:start="201:48" pos:end="201:50">ref</name> <operator pos:start="201:52" pos:end="201:52">+</operator> <name pos:start="201:54" pos:end="201:59">offset</name></expr></argument>, <argument pos:start="201:62" pos:end="201:77"><expr pos:start="201:62" pos:end="201:77"><name pos:start="201:62" pos:end="201:68">decoded</name> <operator pos:start="201:70" pos:end="201:70">+</operator> <name pos:start="201:72" pos:end="201:77">offset</name></expr></argument>, <argument pos:start="201:80" pos:end="201:85"><expr pos:start="201:80" pos:end="201:85"><name pos:start="201:80" pos:end="201:85">stride</name></expr></argument>, <argument pos:start="201:88" pos:end="201:94"><expr pos:start="201:88" pos:end="201:94"><name pos:start="201:88" pos:end="201:92">level</name><operator pos:start="201:93" pos:end="201:93">-</operator><literal type="number" pos:start="201:94" pos:end="201:94">1</literal></expr></argument>, <argument pos:start="201:97" pos:end="201:108"><expr pos:start="201:97" pos:end="201:108"><name pos:start="201:97" pos:end="201:105">threshold</name><operator pos:start="201:106" pos:end="201:107">&gt;&gt;</operator><literal type="number" pos:start="201:108" pos:end="201:108">1</literal></expr></argument>, <argument pos:start="201:111" pos:end="201:116"><expr pos:start="201:111" pos:end="201:116"><name pos:start="201:111" pos:end="201:116">lambda</name></expr></argument>, <argument pos:start="201:119" pos:end="201:123"><expr pos:start="201:119" pos:end="201:123"><name pos:start="201:119" pos:end="201:123">intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:24"><expr pos:start="203:9" pos:end="203:23"><name pos:start="203:9" pos:end="203:13">score</name> <operator pos:start="203:15" pos:end="203:16">+=</operator> <name pos:start="203:18" pos:end="203:23">lambda</name></expr>;</expr_stmt>



        <if_stmt pos:start="207:9" pos:end="221:9"><if pos:start="207:9" pos:end="213:9">if<condition pos:start="207:11" pos:end="207:30">(<expr pos:start="207:12" pos:end="207:29"><name pos:start="207:12" pos:end="207:16">score</name> <operator pos:start="207:18" pos:end="207:18">&lt;</operator> <name pos:start="207:20" pos:end="207:29">best_score</name></expr>)</condition><block pos:start="207:31" pos:end="213:9">{<block_content pos:start="209:13" pos:end="211:20">

            <expr_stmt pos:start="209:13" pos:end="209:30"><expr pos:start="209:13" pos:end="209:29"><name pos:start="209:13" pos:end="209:22">best_score</name><operator pos:start="209:23" pos:end="209:23">=</operator> <name pos:start="209:25" pos:end="209:29">score</name></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:20"><expr pos:start="211:13" pos:end="211:19"><name pos:start="211:13" pos:end="211:17">split</name><operator pos:start="211:18" pos:end="211:18">=</operator><literal type="number" pos:start="211:19" pos:end="211:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="213:10" pos:end="221:9">else<block pos:start="213:14" pos:end="221:9">{<block_content pos:start="215:13" pos:end="219:13">

            <for pos:start="215:13" pos:end="219:13">for<control pos:start="215:16" pos:end="215:37">(<init pos:start="215:17" pos:end="215:26"><expr pos:start="215:17" pos:end="215:25"><name pos:start="215:17" pos:end="215:17">i</name><operator pos:start="215:18" pos:end="215:18">=</operator><name pos:start="215:19" pos:end="215:23">level</name><operator pos:start="215:24" pos:end="215:24">-</operator><literal type="number" pos:start="215:25" pos:end="215:25">1</literal></expr>;</init> <condition pos:start="215:28" pos:end="215:32"><expr pos:start="215:28" pos:end="215:31"><name pos:start="215:28" pos:end="215:28">i</name><operator pos:start="215:29" pos:end="215:30">&gt;=</operator><literal type="number" pos:start="215:31" pos:end="215:31">0</literal></expr>;</condition> <incr pos:start="215:34" pos:end="215:36"><expr pos:start="215:34" pos:end="215:36"><name pos:start="215:34" pos:end="215:34">i</name><operator pos:start="215:35" pos:end="215:36">--</operator></expr></incr>)</control><block pos:start="215:38" pos:end="219:13">{<block_content pos:start="217:17" pos:end="217:44">

                <expr_stmt pos:start="217:17" pos:end="217:44"><expr pos:start="217:17" pos:end="217:43"><name pos:start="217:17" pos:end="217:32"><name pos:start="217:17" pos:end="217:17">s</name><operator pos:start="217:18" pos:end="217:19">-&gt;</operator><name pos:start="217:20" pos:end="217:29">reorder_pb</name><index pos:start="217:30" pos:end="217:32">[<expr pos:start="217:31" pos:end="217:31"><name pos:start="217:31" pos:end="217:31">i</name></expr>]</index></name><operator pos:start="217:33" pos:end="217:33">=</operator> <name pos:start="217:35" pos:end="217:43"><name pos:start="217:35" pos:end="217:40">backup</name><index pos:start="217:41" pos:end="217:43">[<expr pos:start="217:42" pos:end="217:42"><name pos:start="217:42" pos:end="217:42">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="225:5" pos:end="227:50"><if pos:start="225:5" pos:end="227:50">if <condition pos:start="225:8" pos:end="225:18">(<expr pos:start="225:9" pos:end="225:17"><name pos:start="225:9" pos:end="225:13">level</name> <operator pos:start="225:15" pos:end="225:15">&gt;</operator> <literal type="number" pos:start="225:17" pos:end="225:17">0</literal></expr>)</condition><block type="pseudo" pos:start="227:9" pos:end="227:50"><block_content pos:start="227:9" pos:end="227:50">

        <expr_stmt pos:start="227:9" pos:end="227:50"><expr pos:start="227:9" pos:end="227:49"><call pos:start="227:9" pos:end="227:49"><name pos:start="227:9" pos:end="227:16">put_bits</name><argument_list pos:start="227:17" pos:end="227:49">(<argument pos:start="227:18" pos:end="227:38"><expr pos:start="227:18" pos:end="227:38"><operator pos:start="227:18" pos:end="227:18">&amp;</operator><name pos:start="227:19" pos:end="227:38"><name pos:start="227:19" pos:end="227:19">s</name><operator pos:start="227:20" pos:end="227:21">-&gt;</operator><name pos:start="227:22" pos:end="227:31">reorder_pb</name><index pos:start="227:32" pos:end="227:38">[<expr pos:start="227:33" pos:end="227:37"><name pos:start="227:33" pos:end="227:37">level</name></expr>]</index></name></expr></argument>, <argument pos:start="227:41" pos:end="227:41"><expr pos:start="227:41" pos:end="227:41"><literal type="number" pos:start="227:41" pos:end="227:41">1</literal></expr></argument>, <argument pos:start="227:44" pos:end="227:48"><expr pos:start="227:44" pos:end="227:48"><name pos:start="227:44" pos:end="227:48">split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="231:5" pos:end="277:5"><if pos:start="231:5" pos:end="277:5">if<condition pos:start="231:7" pos:end="231:14">(<expr pos:start="231:8" pos:end="231:13"><operator pos:start="231:8" pos:end="231:8">!</operator><name pos:start="231:9" pos:end="231:13">split</name></expr>)</condition><block pos:start="231:15" pos:end="277:5">{<block_content pos:start="233:9" pos:end="275:9">

        <expr_stmt pos:start="233:9" pos:end="233:60"><expr pos:start="233:9" pos:end="233:59"><call pos:start="233:9" pos:end="233:59"><name pos:start="233:9" pos:end="233:14">assert</name><argument_list pos:start="233:15" pos:end="233:59">(<argument pos:start="233:16" pos:end="233:58"><expr pos:start="233:16" pos:end="233:58"><operator pos:start="233:16" pos:end="233:16">(</operator><name pos:start="233:17" pos:end="233:25">best_mean</name> <operator pos:start="233:27" pos:end="233:28">&gt;=</operator> <literal type="number" pos:start="233:30" pos:end="233:30">0</literal> <operator pos:start="233:32" pos:end="233:33">&amp;&amp;</operator> <name pos:start="233:35" pos:end="233:43">best_mean</name><operator pos:start="233:44" pos:end="233:44">&lt;</operator><literal type="number" pos:start="233:45" pos:end="233:47">256</literal><operator pos:start="233:48" pos:end="233:48">)</operator> <operator pos:start="233:50" pos:end="233:51">||</operator> <operator pos:start="233:53" pos:end="233:53">!</operator><name pos:start="233:54" pos:end="233:58">intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:51"><expr pos:start="235:9" pos:end="235:50"><call pos:start="235:9" pos:end="235:50"><name pos:start="235:9" pos:end="235:14">assert</name><argument_list pos:start="235:15" pos:end="235:50">(<argument pos:start="235:16" pos:end="235:49"><expr pos:start="235:16" pos:end="235:49"><name pos:start="235:16" pos:end="235:24">best_mean</name> <operator pos:start="235:26" pos:end="235:27">&gt;=</operator> <operator pos:start="235:29" pos:end="235:29">-</operator><literal type="number" pos:start="235:30" pos:end="235:32">256</literal> <operator pos:start="235:34" pos:end="235:35">&amp;&amp;</operator> <name pos:start="235:37" pos:end="235:45">best_mean</name><operator pos:start="235:46" pos:end="235:46">&lt;</operator><literal type="number" pos:start="235:47" pos:end="235:49">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:47"><expr pos:start="237:9" pos:end="237:46"><call pos:start="237:9" pos:end="237:46"><name pos:start="237:9" pos:end="237:14">assert</name><argument_list pos:start="237:15" pos:end="237:46">(<argument pos:start="237:16" pos:end="237:45"><expr pos:start="237:16" pos:end="237:45"><name pos:start="237:16" pos:end="237:25">best_count</name> <operator pos:start="237:27" pos:end="237:28">&gt;=</operator><literal type="number" pos:start="237:29" pos:end="237:29">0</literal> <operator pos:start="237:31" pos:end="237:32">&amp;&amp;</operator> <name pos:start="237:34" pos:end="237:43">best_count</name><operator pos:start="237:44" pos:end="237:44">&lt;</operator><literal type="number" pos:start="237:45" pos:end="237:45">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:41"><expr pos:start="239:9" pos:end="239:40"><call pos:start="239:9" pos:end="239:40"><name pos:start="239:9" pos:end="239:14">assert</name><argument_list pos:start="239:15" pos:end="239:40">(<argument pos:start="239:16" pos:end="239:39"><expr pos:start="239:16" pos:end="239:39"><name pos:start="239:16" pos:end="239:20">level</name><operator pos:start="239:21" pos:end="239:21">&lt;</operator><literal type="number" pos:start="239:22" pos:end="239:22">4</literal> <operator pos:start="239:24" pos:end="239:25">||</operator> <name pos:start="239:27" pos:end="239:36">best_count</name><operator pos:start="239:37" pos:end="239:38">==</operator><literal type="number" pos:start="239:39" pos:end="239:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="243:9" pos:end="243:33">/* output the encoding */</comment>

        <expr_stmt pos:start="245:9" pos:end="249:47"><expr pos:start="245:9" pos:end="249:46"><call pos:start="245:9" pos:end="249:46"><name pos:start="245:9" pos:end="245:16">put_bits</name><argument_list pos:start="245:17" pos:end="249:46">(<argument pos:start="245:18" pos:end="245:38"><expr pos:start="245:18" pos:end="245:38"><operator pos:start="245:18" pos:end="245:18">&amp;</operator><name pos:start="245:19" pos:end="245:38"><name pos:start="245:19" pos:end="245:19">s</name><operator pos:start="245:20" pos:end="245:21">-&gt;</operator><name pos:start="245:22" pos:end="245:31">reorder_pb</name><index pos:start="245:32" pos:end="245:38">[<expr pos:start="245:33" pos:end="245:37"><name pos:start="245:33" pos:end="245:37">level</name></expr>]</index></name></expr></argument>,

            <argument pos:start="247:13" pos:end="247:45"><expr pos:start="247:13" pos:end="247:45"><name pos:start="247:13" pos:end="247:45"><name pos:start="247:13" pos:end="247:26">multistage_vlc</name><index pos:start="247:27" pos:end="247:42">[<expr pos:start="247:28" pos:end="247:41"><literal type="number" pos:start="247:28" pos:end="247:30">1</literal> <operator pos:start="247:30" pos:end="247:30">+</operator> <name pos:start="247:32" pos:end="247:41">best_count</name></expr>]</index><index pos:start="247:43" pos:end="247:45">[<expr pos:start="247:44" pos:end="247:44"><literal type="number" pos:start="247:44" pos:end="247:44">1</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="249:13" pos:end="249:45"><expr pos:start="249:13" pos:end="249:45"><name pos:start="249:13" pos:end="249:45"><name pos:start="249:13" pos:end="249:26">multistage_vlc</name><index pos:start="249:27" pos:end="249:42">[<expr pos:start="249:28" pos:end="249:41"><literal type="number" pos:start="249:28" pos:end="249:30">1</literal> <operator pos:start="249:30" pos:end="249:30">+</operator> <name pos:start="249:32" pos:end="249:41">best_count</name></expr>]</index><index pos:start="249:43" pos:end="249:45">[<expr pos:start="249:44" pos:end="249:44"><literal type="number" pos:start="249:44" pos:end="249:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="253:36"><expr pos:start="251:9" pos:end="253:35"><call pos:start="251:9" pos:end="253:35"><name pos:start="251:9" pos:end="251:16">put_bits</name><argument_list pos:start="251:17" pos:end="253:35">(<argument pos:start="251:18" pos:end="251:38"><expr pos:start="251:18" pos:end="251:38"><operator pos:start="251:18" pos:end="251:18">&amp;</operator><name pos:start="251:19" pos:end="251:38"><name pos:start="251:19" pos:end="251:19">s</name><operator pos:start="251:20" pos:end="251:21">-&gt;</operator><name pos:start="251:22" pos:end="251:31">reorder_pb</name><index pos:start="251:32" pos:end="251:38">[<expr pos:start="251:33" pos:end="251:37"><name pos:start="251:33" pos:end="251:37">level</name></expr>]</index></name></expr></argument>, <argument pos:start="251:41" pos:end="251:62"><expr pos:start="251:41" pos:end="251:62"><name pos:start="251:41" pos:end="251:62"><name pos:start="251:41" pos:end="251:48">mean_vlc</name><index pos:start="251:49" pos:end="251:59">[<expr pos:start="251:50" pos:end="251:58"><name pos:start="251:50" pos:end="251:58">best_mean</name></expr>]</index><index pos:start="251:60" pos:end="251:62">[<expr pos:start="251:61" pos:end="251:61"><literal type="number" pos:start="251:61" pos:end="251:61">1</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="253:13" pos:end="253:34"><expr pos:start="253:13" pos:end="253:34"><name pos:start="253:13" pos:end="253:34"><name pos:start="253:13" pos:end="253:20">mean_vlc</name><index pos:start="253:21" pos:end="253:31">[<expr pos:start="253:22" pos:end="253:30"><name pos:start="253:22" pos:end="253:30">best_mean</name></expr>]</index><index pos:start="253:32" pos:end="253:34">[<expr pos:start="253:33" pos:end="253:33"><literal type="number" pos:start="253:33" pos:end="253:33">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="257:9" pos:end="263:9">for <control pos:start="257:13" pos:end="257:40">(<init pos:start="257:14" pos:end="257:19"><expr pos:start="257:14" pos:end="257:18"><name pos:start="257:14" pos:end="257:14">i</name> <operator pos:start="257:16" pos:end="257:16">=</operator> <literal type="number" pos:start="257:18" pos:end="257:18">0</literal></expr>;</init> <condition pos:start="257:21" pos:end="257:35"><expr pos:start="257:21" pos:end="257:34"><name pos:start="257:21" pos:end="257:21">i</name> <operator pos:start="257:23" pos:end="257:23">&lt;</operator> <name pos:start="257:25" pos:end="257:34">best_count</name></expr>;</condition> <incr pos:start="257:37" pos:end="257:39"><expr pos:start="257:37" pos:end="257:39"><name pos:start="257:37" pos:end="257:37">i</name><operator pos:start="257:38" pos:end="257:39">++</operator></expr></incr>)</control><block pos:start="257:41" pos:end="263:9">{<block_content pos:start="259:13" pos:end="261:63">

            <expr_stmt pos:start="259:13" pos:end="259:59"><expr pos:start="259:13" pos:end="259:58"><call pos:start="259:13" pos:end="259:58"><name pos:start="259:13" pos:end="259:18">assert</name><argument_list pos:start="259:19" pos:end="259:58">(<argument pos:start="259:20" pos:end="259:57"><expr pos:start="259:20" pos:end="259:57"><name pos:start="259:20" pos:end="259:33"><name pos:start="259:20" pos:end="259:30">best_vector</name><index pos:start="259:31" pos:end="259:33">[<expr pos:start="259:32" pos:end="259:32"><name pos:start="259:32" pos:end="259:32">i</name></expr>]</index></name><operator pos:start="259:34" pos:end="259:35">&gt;=</operator><literal type="number" pos:start="259:36" pos:end="259:36">0</literal> <operator pos:start="259:38" pos:end="259:39">&amp;&amp;</operator> <name pos:start="259:41" pos:end="259:54"><name pos:start="259:41" pos:end="259:51">best_vector</name><index pos:start="259:52" pos:end="259:54">[<expr pos:start="259:53" pos:end="259:53"><name pos:start="259:53" pos:end="259:53">i</name></expr>]</index></name><operator pos:start="259:55" pos:end="259:55">&lt;</operator><literal type="number" pos:start="259:56" pos:end="259:57">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:63"><expr pos:start="261:13" pos:end="261:62"><call pos:start="261:13" pos:end="261:62"><name pos:start="261:13" pos:end="261:20">put_bits</name><argument_list pos:start="261:21" pos:end="261:62">(<argument pos:start="261:22" pos:end="261:42"><expr pos:start="261:22" pos:end="261:42"><operator pos:start="261:22" pos:end="261:22">&amp;</operator><name pos:start="261:23" pos:end="261:42"><name pos:start="261:23" pos:end="261:23">s</name><operator pos:start="261:24" pos:end="261:25">-&gt;</operator><name pos:start="261:26" pos:end="261:35">reorder_pb</name><index pos:start="261:36" pos:end="261:42">[<expr pos:start="261:37" pos:end="261:41"><name pos:start="261:37" pos:end="261:41">level</name></expr>]</index></name></expr></argument>, <argument pos:start="261:45" pos:end="261:45"><expr pos:start="261:45" pos:end="261:45"><literal type="number" pos:start="261:45" pos:end="261:45">4</literal></expr></argument>, <argument pos:start="261:48" pos:end="261:61"><expr pos:start="261:48" pos:end="261:61"><name pos:start="261:48" pos:end="261:61"><name pos:start="261:48" pos:end="261:58">best_vector</name><index pos:start="261:59" pos:end="261:61">[<expr pos:start="261:60" pos:end="261:60"><name pos:start="261:60" pos:end="261:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <for pos:start="267:9" pos:end="275:9">for<control pos:start="267:12" pos:end="267:26">(<init pos:start="267:13" pos:end="267:16"><expr pos:start="267:13" pos:end="267:15"><name pos:start="267:13" pos:end="267:13">y</name><operator pos:start="267:14" pos:end="267:14">=</operator><literal type="number" pos:start="267:15" pos:end="267:15">0</literal></expr>;</init> <condition pos:start="267:18" pos:end="267:21"><expr pos:start="267:18" pos:end="267:20"><name pos:start="267:18" pos:end="267:18">y</name><operator pos:start="267:19" pos:end="267:19">&lt;</operator><name pos:start="267:20" pos:end="267:20">h</name></expr>;</condition> <incr pos:start="267:23" pos:end="267:25"><expr pos:start="267:23" pos:end="267:25"><name pos:start="267:23" pos:end="267:23">y</name><operator pos:start="267:24" pos:end="267:25">++</operator></expr></incr>)</control><block pos:start="267:27" pos:end="275:9">{<block_content pos:start="269:13" pos:end="273:13">

            <for pos:start="269:13" pos:end="273:13">for<control pos:start="269:16" pos:end="269:30">(<init pos:start="269:17" pos:end="269:20"><expr pos:start="269:17" pos:end="269:19"><name pos:start="269:17" pos:end="269:17">x</name><operator pos:start="269:18" pos:end="269:18">=</operator><literal type="number" pos:start="269:19" pos:end="269:19">0</literal></expr>;</init> <condition pos:start="269:22" pos:end="269:25"><expr pos:start="269:22" pos:end="269:24"><name pos:start="269:22" pos:end="269:22">x</name><operator pos:start="269:23" pos:end="269:23">&lt;</operator><name pos:start="269:24" pos:end="269:24">w</name></expr>;</condition> <incr pos:start="269:27" pos:end="269:29"><expr pos:start="269:27" pos:end="269:29"><name pos:start="269:27" pos:end="269:27">x</name><operator pos:start="269:28" pos:end="269:29">++</operator></expr></incr>)</control><block pos:start="269:31" pos:end="273:13">{<block_content pos:start="271:17" pos:end="271:98">

                <expr_stmt pos:start="271:17" pos:end="271:98"><expr pos:start="271:17" pos:end="271:97"><name pos:start="271:17" pos:end="271:37"><name pos:start="271:17" pos:end="271:23">decoded</name><index pos:start="271:24" pos:end="271:37">[<expr pos:start="271:25" pos:end="271:36"><name pos:start="271:25" pos:end="271:25">x</name> <operator pos:start="271:27" pos:end="271:27">+</operator> <name pos:start="271:29" pos:end="271:29">y</name><operator pos:start="271:30" pos:end="271:30">*</operator><name pos:start="271:31" pos:end="271:36">stride</name></expr>]</index></name><operator pos:start="271:38" pos:end="271:38">=</operator> <name pos:start="271:40" pos:end="271:56"><name pos:start="271:40" pos:end="271:42">src</name><index pos:start="271:43" pos:end="271:56">[<expr pos:start="271:44" pos:end="271:55"><name pos:start="271:44" pos:end="271:44">x</name> <operator pos:start="271:46" pos:end="271:46">+</operator> <name pos:start="271:48" pos:end="271:48">y</name><operator pos:start="271:49" pos:end="271:49">*</operator><name pos:start="271:50" pos:end="271:55">stride</name></expr>]</index></name> <operator pos:start="271:58" pos:end="271:58">-</operator> <name pos:start="271:60" pos:end="271:85"><name pos:start="271:60" pos:end="271:64">block</name><index pos:start="271:65" pos:end="271:76">[<expr pos:start="271:66" pos:end="271:75"><name pos:start="271:66" pos:end="271:75">best_count</name></expr>]</index><index pos:start="271:77" pos:end="271:85">[<expr pos:start="271:78" pos:end="271:84"><name pos:start="271:78" pos:end="271:78">x</name> <operator pos:start="271:80" pos:end="271:80">+</operator> <name pos:start="271:82" pos:end="271:82">w</name><operator pos:start="271:83" pos:end="271:83">*</operator><name pos:start="271:84" pos:end="271:84">y</name></expr>]</index></name> <operator pos:start="271:87" pos:end="271:87">+</operator> <name pos:start="271:89" pos:end="271:97">best_mean</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="281:5" pos:end="281:22">return <expr pos:start="281:12" pos:end="281:21"><name pos:start="281:12" pos:end="281:21">best_score</name></expr>;</return>

</block_content>}</block></function>
</unit>
