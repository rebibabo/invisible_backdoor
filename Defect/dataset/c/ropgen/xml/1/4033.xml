<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4033.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:36"><name pos:start="1:1" pos:end="1:21">vmxnet3_io_bar1_write</name><argument_list pos:start="1:22" pos:end="7:36">(<argument pos:start="1:23" pos:end="1:34">void *opaque</argument>,

                      <argument pos:start="3:23" pos:end="3:33">hwaddr addr</argument>,

                      <argument pos:start="5:23" pos:end="5:34">uint64_t val</argument>,

                      <argument pos:start="7:23" pos:end="7:35">unsigned size</argument>)</argument_list></macro>

<block pos:start="9:1" pos:end="175:1">{<block_content pos:start="11:5" pos:end="173:5">

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">VMXNET3State</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:19">s</name> <init pos:start="11:21" pos:end="11:28">= <expr pos:start="11:23" pos:end="11:28"><name pos:start="11:23" pos:end="11:28">opaque</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="15:5" pos:end="173:5">switch <condition pos:start="15:12" pos:end="15:17">(<expr pos:start="15:13" pos:end="15:16"><name pos:start="15:13" pos:end="15:16">addr</name></expr>)</condition> <block pos:start="15:19" pos:end="173:5">{<block_content pos:start="19:5" pos:end="171:14">

    <comment type="block" pos:start="17:5" pos:end="17:43">/* Vmxnet3 Revision Report Selection */</comment>

    <case pos:start="19:5" pos:end="19:26">case <expr pos:start="19:10" pos:end="19:25"><name pos:start="19:10" pos:end="19:25">VMXNET3_REG_VRRS</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="23:29"><expr pos:start="21:9" pos:end="23:28"><call pos:start="21:9" pos:end="23:28"><name pos:start="21:9" pos:end="21:17">VMW_CBPRN</name><argument_list pos:start="21:18" pos:end="23:28">(<argument pos:start="21:19" pos:end="21:72"><expr pos:start="21:19" pos:end="21:72"><literal type="string" pos:start="21:19" pos:end="21:53">"Write BAR1 [VMXNET3_REG_VRRS] = %"</literal> <name pos:start="21:55" pos:end="21:60">PRIx64</name> <literal type="string" pos:start="21:62" pos:end="21:72">", size %d"</literal></expr></argument>,

                  <argument pos:start="23:19" pos:end="23:21"><expr pos:start="23:19" pos:end="23:21"><name pos:start="23:19" pos:end="23:21">val</name></expr></argument>, <argument pos:start="23:24" pos:end="23:27"><expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>



    <comment type="block" pos:start="29:5" pos:end="29:38">/* UPT Version Report Selection */</comment>

    <case pos:start="31:5" pos:end="31:26">case <expr pos:start="31:10" pos:end="31:25"><name pos:start="31:10" pos:end="31:25">VMXNET3_REG_UVRS</name></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="35:29"><expr pos:start="33:9" pos:end="35:28"><call pos:start="33:9" pos:end="35:28"><name pos:start="33:9" pos:end="33:17">VMW_CBPRN</name><argument_list pos:start="33:18" pos:end="35:28">(<argument pos:start="33:19" pos:end="33:72"><expr pos:start="33:19" pos:end="33:72"><literal type="string" pos:start="33:19" pos:end="33:53">"Write BAR1 [VMXNET3_REG_UVRS] = %"</literal> <name pos:start="33:55" pos:end="33:60">PRIx64</name> <literal type="string" pos:start="33:62" pos:end="33:72">", size %d"</literal></expr></argument>,

                  <argument pos:start="35:19" pos:end="35:21"><expr pos:start="35:19" pos:end="35:21"><name pos:start="35:19" pos:end="35:21">val</name></expr></argument>, <argument pos:start="35:24" pos:end="35:27"><expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>



    <comment type="block" pos:start="41:5" pos:end="41:35">/* Driver Shared Address Low */</comment>

    <case pos:start="43:5" pos:end="43:26">case <expr pos:start="43:10" pos:end="43:25"><name pos:start="43:10" pos:end="43:25">VMXNET3_REG_DSAL</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="47:29"><expr pos:start="45:9" pos:end="47:28"><call pos:start="45:9" pos:end="47:28"><name pos:start="45:9" pos:end="45:17">VMW_CBPRN</name><argument_list pos:start="45:18" pos:end="47:28">(<argument pos:start="45:19" pos:end="45:72"><expr pos:start="45:19" pos:end="45:72"><literal type="string" pos:start="45:19" pos:end="45:53">"Write BAR1 [VMXNET3_REG_DSAL] = %"</literal> <name pos:start="45:55" pos:end="45:60">PRIx64</name> <literal type="string" pos:start="45:62" pos:end="45:72">", size %d"</literal></expr></argument>,

                  <argument pos:start="47:19" pos:end="47:21"><expr pos:start="47:19" pos:end="47:21"><name pos:start="47:19" pos:end="47:21">val</name></expr></argument>, <argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="49:9" pos:end="57:11">/*

         * Guest driver will first write the low part of the shared

         * memory address. We save it to temp variable and set the

         * shared address only after we get the high part

         */</comment>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:21">(<expr pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:15">val</name> <operator pos:start="59:17" pos:end="59:18">==</operator> <literal type="number" pos:start="59:20" pos:end="59:20">0</literal></expr>)</condition> <block pos:start="59:23" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:37">

            <expr_stmt pos:start="61:13" pos:end="61:37"><expr pos:start="61:13" pos:end="61:36"><name pos:start="61:13" pos:end="61:28"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:28">device_active</name></name> <operator pos:start="61:30" pos:end="61:30">=</operator> <name pos:start="61:32" pos:end="61:36">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:42"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:42">temp_shared_guest_driver_memory</name></name> <operator pos:start="65:44" pos:end="65:44">=</operator> <name pos:start="65:46" pos:end="65:48">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:25"><expr pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:20">drv_shmem</name></name> <operator pos:start="67:22" pos:end="67:22">=</operator> <literal type="number" pos:start="67:24" pos:end="67:24">0</literal></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>



    <comment type="block" pos:start="73:5" pos:end="73:36">/* Driver Shared Address High */</comment>

    <case pos:start="75:5" pos:end="75:26">case <expr pos:start="75:10" pos:end="75:25"><name pos:start="75:10" pos:end="75:25">VMXNET3_REG_DSAH</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="79:29"><expr pos:start="77:9" pos:end="79:28"><call pos:start="77:9" pos:end="79:28"><name pos:start="77:9" pos:end="77:17">VMW_CBPRN</name><argument_list pos:start="77:18" pos:end="79:28">(<argument pos:start="77:19" pos:end="77:72"><expr pos:start="77:19" pos:end="77:72"><literal type="string" pos:start="77:19" pos:end="77:53">"Write BAR1 [VMXNET3_REG_DSAH] = %"</literal> <name pos:start="77:55" pos:end="77:60">PRIx64</name> <literal type="string" pos:start="77:62" pos:end="77:72">", size %d"</literal></expr></argument>,

                  <argument pos:start="79:19" pos:end="79:21"><expr pos:start="79:19" pos:end="79:21"><name pos:start="79:19" pos:end="79:21">val</name></expr></argument>, <argument pos:start="79:24" pos:end="79:27"><expr pos:start="79:24" pos:end="79:27"><name pos:start="79:24" pos:end="79:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="81:9" pos:end="87:11">/*

         * Set the shared memory between guest driver and device.

         * We already should have low address part.

         */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:72"><expr pos:start="89:9" pos:end="89:71"><name pos:start="89:9" pos:end="89:20"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:20">drv_shmem</name></name> <operator pos:start="89:22" pos:end="89:22">=</operator> <name pos:start="89:24" pos:end="89:57"><name pos:start="89:24" pos:end="89:24">s</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:57">temp_shared_guest_driver_memory</name></name> <operator pos:start="89:59" pos:end="89:59">|</operator> <operator pos:start="89:61" pos:end="89:61">(</operator><name pos:start="89:62" pos:end="89:64">val</name> <operator pos:start="89:66" pos:end="89:67">&lt;&lt;</operator> <literal type="number" pos:start="89:69" pos:end="89:70">32</literal><operator pos:start="89:71" pos:end="89:71">)</operator></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>



    <comment type="block" pos:start="95:5" pos:end="95:17">/* Command */</comment>

    <case pos:start="97:5" pos:end="97:25">case <expr pos:start="97:10" pos:end="97:24"><name pos:start="97:10" pos:end="97:24">VMXNET3_REG_CMD</name></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="101:29"><expr pos:start="99:9" pos:end="101:28"><call pos:start="99:9" pos:end="101:28"><name pos:start="99:9" pos:end="99:17">VMW_CBPRN</name><argument_list pos:start="99:18" pos:end="101:28">(<argument pos:start="99:19" pos:end="99:71"><expr pos:start="99:19" pos:end="99:71"><literal type="string" pos:start="99:19" pos:end="99:52">"Write BAR1 [VMXNET3_REG_CMD] = %"</literal> <name pos:start="99:54" pos:end="99:59">PRIx64</name> <literal type="string" pos:start="99:61" pos:end="99:71">", size %d"</literal></expr></argument>,

                  <argument pos:start="101:19" pos:end="101:21"><expr pos:start="101:19" pos:end="101:21"><name pos:start="101:19" pos:end="101:21">val</name></expr></argument>, <argument pos:start="101:24" pos:end="101:27"><expr pos:start="101:24" pos:end="101:27"><name pos:start="101:24" pos:end="101:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:39"><expr pos:start="103:9" pos:end="103:38"><call pos:start="103:9" pos:end="103:38"><name pos:start="103:9" pos:end="103:30">vmxnet3_handle_command</name><argument_list pos:start="103:31" pos:end="103:38">(<argument pos:start="103:32" pos:end="103:32"><expr pos:start="103:32" pos:end="103:32"><name pos:start="103:32" pos:end="103:32">s</name></expr></argument>, <argument pos:start="103:35" pos:end="103:37"><expr pos:start="103:35" pos:end="103:37"><name pos:start="103:35" pos:end="103:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>



    <comment type="block" pos:start="109:5" pos:end="109:25">/* MAC Address Low */</comment>

    <case pos:start="111:5" pos:end="111:26">case <expr pos:start="111:10" pos:end="111:25"><name pos:start="111:10" pos:end="111:25">VMXNET3_REG_MACL</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="115:29"><expr pos:start="113:9" pos:end="115:28"><call pos:start="113:9" pos:end="115:28"><name pos:start="113:9" pos:end="113:17">VMW_CBPRN</name><argument_list pos:start="113:18" pos:end="115:28">(<argument pos:start="113:19" pos:end="113:72"><expr pos:start="113:19" pos:end="113:72"><literal type="string" pos:start="113:19" pos:end="113:53">"Write BAR1 [VMXNET3_REG_MACL] = %"</literal> <name pos:start="113:55" pos:end="113:60">PRIx64</name> <literal type="string" pos:start="113:62" pos:end="113:72">", size %d"</literal></expr></argument>,

                  <argument pos:start="115:19" pos:end="115:21"><expr pos:start="115:19" pos:end="115:21"><name pos:start="115:19" pos:end="115:21">val</name></expr></argument>, <argument pos:start="115:24" pos:end="115:27"><expr pos:start="115:24" pos:end="115:27"><name pos:start="115:24" pos:end="115:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:26"><expr pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:19">temp_mac</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:25">val</name></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>



    <comment type="block" pos:start="123:5" pos:end="123:26">/* MAC Address High */</comment>

    <case pos:start="125:5" pos:end="125:26">case <expr pos:start="125:10" pos:end="125:25"><name pos:start="125:10" pos:end="125:25">VMXNET3_REG_MACH</name></expr>:</case>

        <expr_stmt pos:start="127:9" pos:end="129:29"><expr pos:start="127:9" pos:end="129:28"><call pos:start="127:9" pos:end="129:28"><name pos:start="127:9" pos:end="127:17">VMW_CBPRN</name><argument_list pos:start="127:18" pos:end="129:28">(<argument pos:start="127:19" pos:end="127:72"><expr pos:start="127:19" pos:end="127:72"><literal type="string" pos:start="127:19" pos:end="127:53">"Write BAR1 [VMXNET3_REG_MACH] = %"</literal> <name pos:start="127:55" pos:end="127:60">PRIx64</name> <literal type="string" pos:start="127:62" pos:end="127:72">", size %d"</literal></expr></argument>,

                  <argument pos:start="129:19" pos:end="129:21"><expr pos:start="129:19" pos:end="129:21"><name pos:start="129:19" pos:end="129:21">val</name></expr></argument>, <argument pos:start="129:24" pos:end="129:27"><expr pos:start="129:24" pos:end="129:27"><name pos:start="129:24" pos:end="129:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:54"><expr pos:start="131:9" pos:end="131:53"><call pos:start="131:9" pos:end="131:53"><name pos:start="131:9" pos:end="131:32">vmxnet3_set_variable_mac</name><argument_list pos:start="131:33" pos:end="131:53">(<argument pos:start="131:34" pos:end="131:34"><expr pos:start="131:34" pos:end="131:34"><name pos:start="131:34" pos:end="131:34">s</name></expr></argument>, <argument pos:start="131:37" pos:end="131:39"><expr pos:start="131:37" pos:end="131:39"><name pos:start="131:37" pos:end="131:39">val</name></expr></argument>, <argument pos:start="131:42" pos:end="131:52"><expr pos:start="131:42" pos:end="131:52"><name pos:start="131:42" pos:end="131:52"><name pos:start="131:42" pos:end="131:42">s</name><operator pos:start="131:43" pos:end="131:44">-&gt;</operator><name pos:start="131:45" pos:end="131:52">temp_mac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>



    <comment type="block" pos:start="137:5" pos:end="137:34">/* Interrupt Cause Register */</comment>

    <case pos:start="139:5" pos:end="139:25">case <expr pos:start="139:10" pos:end="139:24"><name pos:start="139:10" pos:end="139:24">VMXNET3_REG_ICR</name></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="143:29"><expr pos:start="141:9" pos:end="143:28"><call pos:start="141:9" pos:end="143:28"><name pos:start="141:9" pos:end="141:17">VMW_CBPRN</name><argument_list pos:start="141:18" pos:end="143:28">(<argument pos:start="141:19" pos:end="141:71"><expr pos:start="141:19" pos:end="141:71"><literal type="string" pos:start="141:19" pos:end="141:52">"Write BAR1 [VMXNET3_REG_ICR] = %"</literal> <name pos:start="141:54" pos:end="141:59">PRIx64</name> <literal type="string" pos:start="141:61" pos:end="141:71">", size %d"</literal></expr></argument>,

                  <argument pos:start="143:19" pos:end="143:21"><expr pos:start="143:19" pos:end="143:21"><name pos:start="143:19" pos:end="143:21">val</name></expr></argument>, <argument pos:start="143:24" pos:end="143:27"><expr pos:start="143:24" pos:end="143:27"><name pos:start="143:24" pos:end="143:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:31"><expr pos:start="145:9" pos:end="145:30"><call pos:start="145:9" pos:end="145:30"><name pos:start="145:9" pos:end="145:28">g_assert_not_reached</name><argument_list pos:start="145:29" pos:end="145:30">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>



    <comment type="block" pos:start="151:5" pos:end="151:30">/* Event Cause Register */</comment>

    <case pos:start="153:5" pos:end="153:25">case <expr pos:start="153:10" pos:end="153:24"><name pos:start="153:10" pos:end="153:24">VMXNET3_REG_ECR</name></expr>:</case>

        <expr_stmt pos:start="155:9" pos:end="157:29"><expr pos:start="155:9" pos:end="157:28"><call pos:start="155:9" pos:end="157:28"><name pos:start="155:9" pos:end="155:17">VMW_CBPRN</name><argument_list pos:start="155:18" pos:end="157:28">(<argument pos:start="155:19" pos:end="155:71"><expr pos:start="155:19" pos:end="155:71"><literal type="string" pos:start="155:19" pos:end="155:52">"Write BAR1 [VMXNET3_REG_ECR] = %"</literal> <name pos:start="155:54" pos:end="155:59">PRIx64</name> <literal type="string" pos:start="155:61" pos:end="155:71">", size %d"</literal></expr></argument>,

                  <argument pos:start="157:19" pos:end="157:21"><expr pos:start="157:19" pos:end="157:21"><name pos:start="157:19" pos:end="157:21">val</name></expr></argument>, <argument pos:start="157:24" pos:end="157:27"><expr pos:start="157:24" pos:end="157:27"><name pos:start="157:24" pos:end="157:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:35"><expr pos:start="159:9" pos:end="159:34"><call pos:start="159:9" pos:end="159:34"><name pos:start="159:9" pos:end="159:26">vmxnet3_ack_events</name><argument_list pos:start="159:27" pos:end="159:34">(<argument pos:start="159:28" pos:end="159:28"><expr pos:start="159:28" pos:end="159:28"><name pos:start="159:28" pos:end="159:28">s</name></expr></argument>, <argument pos:start="159:31" pos:end="159:33"><expr pos:start="159:31" pos:end="159:33"><name pos:start="159:31" pos:end="159:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="161:14">break;</break>



    <default pos:start="165:5" pos:end="165:12">default:</default>

        <expr_stmt pos:start="167:9" pos:end="169:35"><expr pos:start="167:9" pos:end="169:34"><call pos:start="167:9" pos:end="169:34"><name pos:start="167:9" pos:end="167:17">VMW_CBPRN</name><argument_list pos:start="167:18" pos:end="169:34">(<argument pos:start="167:19" pos:end="167:78"><expr pos:start="167:19" pos:end="167:78"><literal type="string" pos:start="167:19" pos:end="167:44">"Unknown Write to BAR1 [%"</literal> <name pos:start="167:46" pos:end="167:51">PRIx64</name> <literal type="string" pos:start="167:53" pos:end="167:59">"] = %"</literal> <name pos:start="167:61" pos:end="167:66">PRIx64</name> <literal type="string" pos:start="167:68" pos:end="167:78">", size %d"</literal></expr></argument>,

                  <argument pos:start="169:19" pos:end="169:22"><expr pos:start="169:19" pos:end="169:22"><name pos:start="169:19" pos:end="169:22">addr</name></expr></argument>, <argument pos:start="169:25" pos:end="169:27"><expr pos:start="169:25" pos:end="169:27"><name pos:start="169:25" pos:end="169:27">val</name></expr></argument>, <argument pos:start="169:30" pos:end="169:33"><expr pos:start="169:30" pos:end="169:33"><name pos:start="169:30" pos:end="169:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="171:9" pos:end="171:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block>
</unit>
