<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26532.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">uint8_t</name></type> <name pos:start="1:16" pos:end="1:32">send_read_command</name><parameter_list pos:start="1:33" pos:end="1:38">(<parameter pos:start="1:34" pos:end="1:37"><decl pos:start="1:34" pos:end="1:37"><type pos:start="1:34" pos:end="1:37"><name pos:start="1:34" pos:end="1:37">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:15">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:17">drive</name> <init pos:start="5:19" pos:end="5:21">= <expr pos:start="5:21" pos:end="5:21"><literal type="number" pos:start="5:21" pos:end="5:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:16">head</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:15">cyl</name> <init pos:start="9:17" pos:end="9:19">= <expr pos:start="9:19" pos:end="9:19"><literal type="number" pos:start="9:19" pos:end="9:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:21">sect_addr</name> <init pos:start="11:23" pos:end="11:25">= <expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:21">sect_size</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:15">eot</name> <init pos:start="15:17" pos:end="15:19">= <expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:15">gap</name> <init pos:start="17:17" pos:end="17:22">= <expr pos:start="17:19" pos:end="17:22"><literal type="number" pos:start="17:19" pos:end="17:22">0x1b</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:15">gpl</name> <init pos:start="19:17" pos:end="19:22">= <expr pos:start="19:19" pos:end="19:22"><literal type="number" pos:start="19:19" pos:end="19:22">0xff</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:15">msr</name> <init pos:start="23:17" pos:end="23:19">= <expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:16"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">uint8_t</name></type> <name pos:start="25:13" pos:end="25:15">st0</name></decl>;</decl_stmt>



    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:11">uint8_t</name></type> <name pos:start="29:13" pos:end="29:15">ret</name> <init pos:start="29:17" pos:end="29:19">= <expr pos:start="29:19" pos:end="29:19"><literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:26"><expr pos:start="33:5" pos:end="33:25"><call pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:15">floppy_send</name><argument_list pos:start="33:16" pos:end="33:25">(<argument pos:start="33:17" pos:end="33:24"><expr pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:24">CMD_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:15">floppy_send</name><argument_list pos:start="35:16" pos:end="35:34">(<argument pos:start="35:17" pos:end="35:33"><expr pos:start="35:17" pos:end="35:33"><name pos:start="35:17" pos:end="35:20">head</name> <operator pos:start="35:22" pos:end="35:23">&lt;&lt;</operator> <literal type="number" pos:start="35:25" pos:end="35:25">2</literal> <operator pos:start="35:27" pos:end="35:27">|</operator> <name pos:start="35:29" pos:end="35:33">drive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><call pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:12">g_assert</name><argument_list pos:start="37:13" pos:end="37:34">(<argument pos:start="37:14" pos:end="37:33"><expr pos:start="37:14" pos:end="37:33"><operator pos:start="37:14" pos:end="37:14">!</operator><call pos:start="37:15" pos:end="37:33"><name pos:start="37:15" pos:end="37:21">get_irq</name><argument_list pos:start="37:22" pos:end="37:33">(<argument pos:start="37:23" pos:end="37:32"><expr pos:start="37:23" pos:end="37:32"><name pos:start="37:23" pos:end="37:32">FLOPPY_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><call pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:15">floppy_send</name><argument_list pos:start="39:16" pos:end="39:20">(<argument pos:start="39:17" pos:end="39:19"><expr pos:start="39:17" pos:end="39:19"><name pos:start="39:17" pos:end="39:19">cyl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><call pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:15">floppy_send</name><argument_list pos:start="41:16" pos:end="41:21">(<argument pos:start="41:17" pos:end="41:20"><expr pos:start="41:17" pos:end="41:20"><name pos:start="41:17" pos:end="41:20">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:27"><expr pos:start="43:5" pos:end="43:26"><call pos:start="43:5" pos:end="43:26"><name pos:start="43:5" pos:end="43:15">floppy_send</name><argument_list pos:start="43:16" pos:end="43:26">(<argument pos:start="43:17" pos:end="43:25"><expr pos:start="43:17" pos:end="43:25"><name pos:start="43:17" pos:end="43:25">sect_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:27"><expr pos:start="45:5" pos:end="45:26"><call pos:start="45:5" pos:end="45:26"><name pos:start="45:5" pos:end="45:15">floppy_send</name><argument_list pos:start="45:16" pos:end="45:26">(<argument pos:start="45:17" pos:end="45:25"><expr pos:start="45:17" pos:end="45:25"><name pos:start="45:17" pos:end="45:25">sect_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:21"><expr pos:start="47:5" pos:end="47:20"><call pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:15">floppy_send</name><argument_list pos:start="47:16" pos:end="47:20">(<argument pos:start="47:17" pos:end="47:19"><expr pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">eot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:21"><expr pos:start="49:5" pos:end="49:20"><call pos:start="49:5" pos:end="49:20"><name pos:start="49:5" pos:end="49:15">floppy_send</name><argument_list pos:start="49:16" pos:end="49:20">(<argument pos:start="49:17" pos:end="49:19"><expr pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:21"><expr pos:start="51:5" pos:end="51:20"><call pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:15">floppy_send</name><argument_list pos:start="51:16" pos:end="51:20">(<argument pos:start="51:17" pos:end="51:19"><expr pos:start="51:17" pos:end="51:19"><name pos:start="51:17" pos:end="51:19">gpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="55:5" pos:end="55:18"><decl pos:start="55:5" pos:end="55:17"><type pos:start="55:5" pos:end="55:11"><name pos:start="55:5" pos:end="55:11">uint8_t</name></type> <name pos:start="55:13" pos:end="55:13">i</name> <init pos:start="55:15" pos:end="55:17">= <expr pos:start="55:17" pos:end="55:17"><literal type="number" pos:start="55:17" pos:end="55:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:18"><decl pos:start="57:5" pos:end="57:17"><type pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:11">uint8_t</name></type> <name pos:start="57:13" pos:end="57:13">n</name> <init pos:start="57:15" pos:end="57:17">= <expr pos:start="57:17" pos:end="57:17"><literal type="number" pos:start="57:17" pos:end="57:17">2</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="59:5" pos:end="71:5">for <control pos:start="59:9" pos:end="59:22">(<init pos:start="59:10" pos:end="59:10">;</init> <condition pos:start="59:12" pos:end="59:17"><expr pos:start="59:12" pos:end="59:16"><name pos:start="59:12" pos:end="59:12">i</name> <operator pos:start="59:14" pos:end="59:14">&lt;</operator> <name pos:start="59:16" pos:end="59:16">n</name></expr>;</condition> <incr pos:start="59:19" pos:end="59:21"><expr pos:start="59:19" pos:end="59:21"><name pos:start="59:19" pos:end="59:19">i</name><operator pos:start="59:20" pos:end="59:21">++</operator></expr></incr>)</control> <block pos:start="59:24" pos:end="71:5">{<block_content pos:start="61:9" pos:end="69:17">

        <expr_stmt pos:start="61:9" pos:end="61:41"><expr pos:start="61:9" pos:end="61:40"><name pos:start="61:9" pos:end="61:11">msr</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:40"><name pos:start="61:15" pos:end="61:17">inb</name><argument_list pos:start="61:18" pos:end="61:40">(<argument pos:start="61:19" pos:end="61:39"><expr pos:start="61:19" pos:end="61:39"><name pos:start="61:19" pos:end="61:29">FLOPPY_BASE</name> <operator pos:start="61:31" pos:end="61:31">+</operator> <name pos:start="61:33" pos:end="61:39">reg_msr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:24">(<expr pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:15">msr</name> <operator pos:start="63:17" pos:end="63:18">==</operator> <literal type="number" pos:start="63:20" pos:end="63:23">0xd0</literal></expr>)</condition> <block pos:start="63:26" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:18">

            <break pos:start="65:13" pos:end="65:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:17"><expr pos:start="69:9" pos:end="69:16"><call pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:13">sleep</name><argument_list pos:start="69:14" pos:end="69:16">(<argument pos:start="69:15" pos:end="69:15"><expr pos:start="69:15" pos:end="69:15"><literal type="number" pos:start="69:15" pos:end="69:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:15">(<expr pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:9">i</name> <operator pos:start="75:11" pos:end="75:12">&gt;=</operator> <name pos:start="75:14" pos:end="75:14">n</name></expr>)</condition> <block pos:start="75:17" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:17">

        <return pos:start="77:9" pos:end="77:17">return <expr pos:start="77:16" pos:end="77:16"><literal type="number" pos:start="77:16" pos:end="77:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:24"><expr pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:7">st0</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:23"><name pos:start="83:11" pos:end="83:21">floppy_recv</name><argument_list pos:start="83:22" pos:end="83:23">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:20">(<expr pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:11">st0</name> <operator pos:start="85:13" pos:end="85:14">!=</operator> <literal type="number" pos:start="85:16" pos:end="85:19">0x40</literal></expr>)</condition> <block pos:start="85:22" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:16">

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <literal type="number" pos:start="87:15" pos:end="87:15">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:18"><expr pos:start="93:5" pos:end="93:17"><call pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:15">floppy_recv</name><argument_list pos:start="93:16" pos:end="93:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:18"><expr pos:start="95:5" pos:end="95:17"><call pos:start="95:5" pos:end="95:17"><name pos:start="95:5" pos:end="95:15">floppy_recv</name><argument_list pos:start="95:16" pos:end="95:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:18"><expr pos:start="97:5" pos:end="97:17"><call pos:start="97:5" pos:end="97:17"><name pos:start="97:5" pos:end="97:15">floppy_recv</name><argument_list pos:start="97:16" pos:end="97:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:18"><expr pos:start="99:5" pos:end="99:17"><call pos:start="99:5" pos:end="99:17"><name pos:start="99:5" pos:end="99:15">floppy_recv</name><argument_list pos:start="99:16" pos:end="99:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:18"><expr pos:start="101:5" pos:end="101:17"><call pos:start="101:5" pos:end="101:17"><name pos:start="101:5" pos:end="101:15">floppy_recv</name><argument_list pos:start="101:16" pos:end="101:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:18"><expr pos:start="103:5" pos:end="103:17"><call pos:start="103:5" pos:end="103:17"><name pos:start="103:5" pos:end="103:15">floppy_recv</name><argument_list pos:start="103:16" pos:end="103:17">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="107:5" pos:end="107:15">return <expr pos:start="107:12" pos:end="107:14"><name pos:start="107:12" pos:end="107:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
