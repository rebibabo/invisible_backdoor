<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2021.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">spapr_vio_busdev_realize</name><parameter_list pos:start="1:37" pos:end="1:69">(<parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:48">DeviceState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">qdev</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:61">Error</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier><modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:27">

    <decl_stmt pos:start="5:5" pos:end="5:65"><decl pos:start="5:5" pos:end="5:64"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">sPAPRMachineState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:28">spapr</name> <init pos:start="5:30" pos:end="5:64">= <expr pos:start="5:32" pos:end="5:64"><call pos:start="5:32" pos:end="5:64"><name pos:start="5:32" pos:end="5:44">SPAPR_MACHINE</name><argument_list pos:start="5:45" pos:end="5:64">(<argument pos:start="5:46" pos:end="5:63"><expr pos:start="5:46" pos:end="5:63"><call pos:start="5:46" pos:end="5:63"><name pos:start="5:46" pos:end="5:61">qdev_get_machine</name><argument_list pos:start="5:62" pos:end="5:63">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">VIOsPAPRDevice</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">dev</name> <init pos:start="7:25" pos:end="7:48">= <expr pos:start="7:27" pos:end="7:48"><operator pos:start="7:27" pos:end="7:27">(</operator><name pos:start="7:28" pos:end="7:41">VIOsPAPRDevice</name> <operator pos:start="7:43" pos:end="7:43">*</operator><operator pos:start="7:44" pos:end="7:44">)</operator><name pos:start="7:45" pos:end="7:48">qdev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:62"><decl pos:start="9:5" pos:end="9:61"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">VIOsPAPRDeviceClass</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:27">pc</name> <init pos:start="9:29" pos:end="9:61">= <expr pos:start="9:31" pos:end="9:61"><call pos:start="9:31" pos:end="9:61"><name pos:start="9:31" pos:end="9:56">VIO_SPAPR_DEVICE_GET_CLASS</name><argument_list pos:start="9:57" pos:end="9:61">(<argument pos:start="9:58" pos:end="9:60"><expr pos:start="9:58" pos:end="9:60"><name pos:start="9:58" pos:end="9:60">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:12">id</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="61:5"><if pos:start="15:5" pos:end="47:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:11">dev</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:16">reg</name></name> <operator pos:start="15:18" pos:end="15:19">!=</operator> <operator pos:start="15:21" pos:end="15:21">-</operator><literal type="number" pos:start="15:22" pos:end="15:22">1</literal></expr>)</condition> <block pos:start="15:25" pos:end="47:5">{<block_content pos:start="29:9" pos:end="45:9">

        <comment type="block" pos:start="17:9" pos:end="27:11">/*

         * Explicitly assigned address, just verify that no-one else

         * is using it.  other mechanism). We have to open code this

         * rather than using spapr_vio_find_by_reg() because sdev

         * itself is already in the list.

         */</comment>

        <decl_stmt pos:start="29:9" pos:end="29:50"><decl pos:start="29:9" pos:end="29:49"><type pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:22">VIOsPAPRDevice</name> <modifier pos:start="29:24" pos:end="29:24">*</modifier></type><name pos:start="29:25" pos:end="29:29">other</name> <init pos:start="29:31" pos:end="29:49">= <expr pos:start="29:33" pos:end="29:49"><call pos:start="29:33" pos:end="29:49"><name pos:start="29:33" pos:end="29:44">reg_conflict</name><argument_list pos:start="29:45" pos:end="29:49">(<argument pos:start="29:46" pos:end="29:48"><expr pos:start="29:46" pos:end="29:48"><name pos:start="29:46" pos:end="29:48">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="33:9" pos:end="45:9"><if pos:start="33:9" pos:end="45:9">if <condition pos:start="33:12" pos:end="33:18">(<expr pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:17">other</name></expr>)</condition> <block pos:start="33:20" pos:end="45:9">{<block_content pos:start="35:13" pos:end="43:19">

            <expr_stmt pos:start="35:13" pos:end="41:33"><expr pos:start="35:13" pos:end="41:32"><call pos:start="35:13" pos:end="41:32"><name pos:start="35:13" pos:end="35:22">error_setg</name><argument_list pos:start="35:23" pos:end="41:32">(<argument pos:start="35:24" pos:end="35:27"><expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">errp</name></expr></argument>, <argument pos:start="35:30" pos:end="35:72"><expr pos:start="35:30" pos:end="35:72"><literal type="string" pos:start="35:30" pos:end="35:72">"%s and %s devices conflict at address %#x"</literal></expr></argument>,

                       <argument pos:start="37:24" pos:end="37:56"><expr pos:start="37:24" pos:end="37:56"><call pos:start="37:24" pos:end="37:56"><name pos:start="37:24" pos:end="37:42">object_get_typename</name><argument_list pos:start="37:43" pos:end="37:56">(<argument pos:start="37:44" pos:end="37:55"><expr pos:start="37:44" pos:end="37:55"><call pos:start="37:44" pos:end="37:55"><name pos:start="37:44" pos:end="37:49">OBJECT</name><argument_list pos:start="37:50" pos:end="37:55">(<argument pos:start="37:51" pos:end="37:54"><expr pos:start="37:51" pos:end="37:54"><name pos:start="37:51" pos:end="37:54">qdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="39:24" pos:end="39:64"><expr pos:start="39:24" pos:end="39:64"><call pos:start="39:24" pos:end="39:64"><name pos:start="39:24" pos:end="39:42">object_get_typename</name><argument_list pos:start="39:43" pos:end="39:64">(<argument pos:start="39:44" pos:end="39:63"><expr pos:start="39:44" pos:end="39:63"><call pos:start="39:44" pos:end="39:63"><name pos:start="39:44" pos:end="39:49">OBJECT</name><argument_list pos:start="39:50" pos:end="39:63">(<argument pos:start="39:51" pos:end="39:62"><expr pos:start="39:51" pos:end="39:62"><operator pos:start="39:51" pos:end="39:51">&amp;</operator><name pos:start="39:52" pos:end="39:62"><name pos:start="39:52" pos:end="39:56">other</name><operator pos:start="39:57" pos:end="39:58">-&gt;</operator><name pos:start="39:59" pos:end="39:62">qdev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:31"><expr pos:start="41:24" pos:end="41:31"><name pos:start="41:24" pos:end="41:31"><name pos:start="41:24" pos:end="41:26">dev</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:31">reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="61:5">else <block pos:start="47:12" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:36">

        <comment type="block" pos:start="49:9" pos:end="49:39">/* Need to assign an address */</comment>

        <decl_stmt pos:start="51:9" pos:end="51:63"><decl pos:start="51:9" pos:end="51:62"><type pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:19">VIOsPAPRBus</name> <modifier pos:start="51:21" pos:end="51:21">*</modifier></type><name pos:start="51:22" pos:end="51:24">bus</name> <init pos:start="51:26" pos:end="51:62">= <expr pos:start="51:28" pos:end="51:62"><call pos:start="51:28" pos:end="51:62"><name pos:start="51:28" pos:end="51:40">SPAPR_VIO_BUS</name><argument_list pos:start="51:41" pos:end="51:62">(<argument pos:start="51:42" pos:end="51:61"><expr pos:start="51:42" pos:end="51:61"><name pos:start="51:42" pos:end="51:61"><name pos:start="51:42" pos:end="51:44">dev</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:50">qdev</name><operator pos:start="51:51" pos:end="51:51">.</operator><name pos:start="51:52" pos:end="51:61">parent_bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <do pos:start="55:9" pos:end="59:36">do <block pos:start="55:12" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:39">

            <expr_stmt pos:start="57:13" pos:end="57:39"><expr pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:15">dev</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:20">reg</name></name> <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:36"><name pos:start="57:24" pos:end="57:26">bus</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:36">next_reg</name></name><operator pos:start="57:37" pos:end="57:38">++</operator></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="59:17" pos:end="59:35">(<expr pos:start="59:18" pos:end="59:34"><call pos:start="59:18" pos:end="59:34"><name pos:start="59:18" pos:end="59:29">reg_conflict</name><argument_list pos:start="59:30" pos:end="59:34">(<argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:33">dev</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:58">/* Don't overwrite ids assigned on the command line */</comment>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:22">(<expr pos:start="67:9" pos:end="67:21"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:21"><name pos:start="67:10" pos:end="67:12">dev</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:18">qdev</name><operator pos:start="67:19" pos:end="67:19">.</operator><name pos:start="67:20" pos:end="67:21">id</name></name></expr>)</condition> <block pos:start="67:24" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:26">

        <expr_stmt pos:start="69:9" pos:end="69:49"><expr pos:start="69:9" pos:end="69:48"><name pos:start="69:9" pos:end="69:10">id</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <call pos:start="69:14" pos:end="69:48"><name pos:start="69:14" pos:end="69:35">spapr_vio_get_dev_name</name><argument_list pos:start="69:36" pos:end="69:48">(<argument pos:start="69:37" pos:end="69:47"><expr pos:start="69:37" pos:end="69:47"><call pos:start="69:37" pos:end="69:47"><name pos:start="69:37" pos:end="69:42">DEVICE</name><argument_list pos:start="69:43" pos:end="69:47">(<argument pos:start="69:44" pos:end="69:46"><expr pos:start="69:44" pos:end="69:46"><name pos:start="69:44" pos:end="69:46">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:26"><expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:11">dev</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:17">qdev</name><operator pos:start="71:18" pos:end="71:18">.</operator><name pos:start="71:19" pos:end="71:20">id</name></name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:25">id</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:58"><expr pos:start="77:5" pos:end="77:57"><name pos:start="77:5" pos:end="77:12"><name pos:start="77:5" pos:end="77:7">dev</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:12">irq</name></name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:57"><name pos:start="77:16" pos:end="77:25">xics_alloc</name><argument_list pos:start="77:26" pos:end="77:57">(<argument pos:start="77:27" pos:end="77:36"><expr pos:start="77:27" pos:end="77:36"><name pos:start="77:27" pos:end="77:36"><name pos:start="77:27" pos:end="77:31">spapr</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:36">icp</name></name></expr></argument>, <argument pos:start="77:39" pos:end="77:39"><expr pos:start="77:39" pos:end="77:39"><literal type="number" pos:start="77:39" pos:end="77:39">0</literal></expr></argument>, <argument pos:start="77:42" pos:end="77:49"><expr pos:start="77:42" pos:end="77:49"><name pos:start="77:42" pos:end="77:49"><name pos:start="77:42" pos:end="77:44">dev</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:49">irq</name></name></expr></argument>, <argument pos:start="77:52" pos:end="77:56"><expr pos:start="77:52" pos:end="77:56"><name pos:start="77:52" pos:end="77:56">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:18">(<expr pos:start="79:9" pos:end="79:17"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:17"><name pos:start="79:10" pos:end="79:12">dev</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:17">irq</name></name></expr>)</condition> <block pos:start="79:20" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:15">

        <expr_stmt pos:start="81:9" pos:end="81:47"><expr pos:start="81:9" pos:end="81:46"><call pos:start="81:9" pos:end="81:46"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="81:46">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="81:45"><expr pos:start="81:26" pos:end="81:45"><literal type="string" pos:start="81:26" pos:end="81:45">"can't allocate IRQ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="127:5"><if pos:start="89:5" pos:end="127:5">if <condition pos:start="89:8" pos:end="89:29">(<expr pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:10">pc</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:28">rtce_window_size</name></name></expr>)</condition> <block pos:start="89:31" pos:end="127:5">{<block_content pos:start="91:9" pos:end="125:79">

        <decl_stmt pos:start="91:9" pos:end="91:51"><decl pos:start="91:9" pos:end="91:50"><type pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">uint32_t</name></type> <name pos:start="91:18" pos:end="91:22">liobn</name> <init pos:start="91:24" pos:end="91:50">= <expr pos:start="91:26" pos:end="91:50"><call pos:start="91:26" pos:end="91:50"><name pos:start="91:26" pos:end="91:40">SPAPR_VIO_LIOBN</name><argument_list pos:start="91:41" pos:end="91:50">(<argument pos:start="91:42" pos:end="91:49"><expr pos:start="91:42" pos:end="91:49"><name pos:start="91:42" pos:end="91:49"><name pos:start="91:42" pos:end="91:44">dev</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:49">reg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="95:9" pos:end="97:37"><expr pos:start="95:9" pos:end="97:36"><call pos:start="95:9" pos:end="97:36"><name pos:start="95:9" pos:end="95:26">memory_region_init</name><argument_list pos:start="95:27" pos:end="97:36">(<argument pos:start="95:28" pos:end="95:39"><expr pos:start="95:28" pos:end="95:39"><operator pos:start="95:28" pos:end="95:28">&amp;</operator><name pos:start="95:29" pos:end="95:39"><name pos:start="95:29" pos:end="95:31">dev</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:39">mrroot</name></name></expr></argument>, <argument pos:start="95:42" pos:end="95:52"><expr pos:start="95:42" pos:end="95:52"><call pos:start="95:42" pos:end="95:52"><name pos:start="95:42" pos:end="95:47">OBJECT</name><argument_list pos:start="95:48" pos:end="95:52">(<argument pos:start="95:49" pos:end="95:51"><expr pos:start="95:49" pos:end="95:51"><name pos:start="95:49" pos:end="95:51">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:55" pos:end="95:72"><expr pos:start="95:55" pos:end="95:72"><literal type="string" pos:start="95:55" pos:end="95:72">"iommu-spapr-root"</literal></expr></argument>,

                           <argument pos:start="97:28" pos:end="97:35"><expr pos:start="97:28" pos:end="97:35"><name pos:start="97:28" pos:end="97:35">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="103:46"><expr pos:start="99:9" pos:end="103:45"><call pos:start="99:9" pos:end="103:45"><name pos:start="99:9" pos:end="99:32">memory_region_init_alias</name><argument_list pos:start="99:33" pos:end="103:45">(<argument pos:start="99:34" pos:end="99:47"><expr pos:start="99:34" pos:end="99:47"><operator pos:start="99:34" pos:end="99:34">&amp;</operator><name pos:start="99:35" pos:end="99:47"><name pos:start="99:35" pos:end="99:37">dev</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:47">mrbypass</name></name></expr></argument>, <argument pos:start="99:50" pos:end="99:60"><expr pos:start="99:50" pos:end="99:60"><call pos:start="99:50" pos:end="99:60"><name pos:start="99:50" pos:end="99:55">OBJECT</name><argument_list pos:start="99:56" pos:end="99:60">(<argument pos:start="99:57" pos:end="99:59"><expr pos:start="99:57" pos:end="99:59"><name pos:start="99:57" pos:end="99:59">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="101:34" pos:end="101:53"><expr pos:start="101:34" pos:end="101:53"><literal type="string" pos:start="101:34" pos:end="101:53">"iommu-spapr-bypass"</literal></expr></argument>, <argument pos:start="101:56" pos:end="101:74"><expr pos:start="101:56" pos:end="101:74"><call pos:start="101:56" pos:end="101:74"><name pos:start="101:56" pos:end="101:72">get_system_memory</name><argument_list pos:start="101:73" pos:end="101:74">()</argument_list></call></expr></argument>,

                                 <argument pos:start="103:34" pos:end="103:34"><expr pos:start="103:34" pos:end="103:34"><literal type="number" pos:start="103:34" pos:end="103:34">0</literal></expr></argument>, <argument pos:start="103:37" pos:end="103:44"><expr pos:start="103:37" pos:end="103:44"><name pos:start="103:37" pos:end="103:44">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:80"><expr pos:start="105:9" pos:end="105:79"><call pos:start="105:9" pos:end="105:79"><name pos:start="105:9" pos:end="105:43">memory_region_add_subregion_overlap</name><argument_list pos:start="105:44" pos:end="105:79">(<argument pos:start="105:45" pos:end="105:56"><expr pos:start="105:45" pos:end="105:56"><operator pos:start="105:45" pos:end="105:45">&amp;</operator><name pos:start="105:46" pos:end="105:56"><name pos:start="105:46" pos:end="105:48">dev</name><operator pos:start="105:49" pos:end="105:50">-&gt;</operator><name pos:start="105:51" pos:end="105:56">mrroot</name></name></expr></argument>, <argument pos:start="105:59" pos:end="105:59"><expr pos:start="105:59" pos:end="105:59"><literal type="number" pos:start="105:59" pos:end="105:59">0</literal></expr></argument>, <argument pos:start="105:62" pos:end="105:75"><expr pos:start="105:62" pos:end="105:75"><operator pos:start="105:62" pos:end="105:62">&amp;</operator><name pos:start="105:63" pos:end="105:75"><name pos:start="105:63" pos:end="105:65">dev</name><operator pos:start="105:66" pos:end="105:67">-&gt;</operator><name pos:start="105:68" pos:end="105:75">mrbypass</name></name></expr></argument>, <argument pos:start="105:78" pos:end="105:78"><expr pos:start="105:78" pos:end="105:78"><literal type="number" pos:start="105:78" pos:end="105:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:61"><expr pos:start="107:9" pos:end="107:60"><call pos:start="107:9" pos:end="107:60"><name pos:start="107:9" pos:end="107:26">address_space_init</name><argument_list pos:start="107:27" pos:end="107:60">(<argument pos:start="107:28" pos:end="107:35"><expr pos:start="107:28" pos:end="107:35"><operator pos:start="107:28" pos:end="107:28">&amp;</operator><name pos:start="107:29" pos:end="107:35"><name pos:start="107:29" pos:end="107:31">dev</name><operator pos:start="107:32" pos:end="107:33">-&gt;</operator><name pos:start="107:34" pos:end="107:35">as</name></name></expr></argument>, <argument pos:start="107:38" pos:end="107:49"><expr pos:start="107:38" pos:end="107:49"><operator pos:start="107:38" pos:end="107:38">&amp;</operator><name pos:start="107:39" pos:end="107:49"><name pos:start="107:39" pos:end="107:41">dev</name><operator pos:start="107:42" pos:end="107:43">-&gt;</operator><name pos:start="107:44" pos:end="107:49">mrroot</name></name></expr></argument>, <argument pos:start="107:52" pos:end="107:59"><expr pos:start="107:52" pos:end="107:59"><name pos:start="107:52" pos:end="107:59"><name pos:start="107:52" pos:end="107:55">qdev</name><operator pos:start="107:56" pos:end="107:57">-&gt;</operator><name pos:start="107:58" pos:end="107:59">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="111:9" pos:end="119:69"><expr pos:start="111:9" pos:end="119:68"><name pos:start="111:9" pos:end="111:17"><name pos:start="111:9" pos:end="111:11">dev</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:17">tcet</name></name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="119:68"><name pos:start="111:21" pos:end="111:39">spapr_tce_new_table</name><argument_list pos:start="111:40" pos:end="119:68">(<argument pos:start="111:41" pos:end="111:44"><expr pos:start="111:41" pos:end="111:44"><name pos:start="111:41" pos:end="111:44">qdev</name></expr></argument>, <argument pos:start="111:47" pos:end="111:51"><expr pos:start="111:47" pos:end="111:51"><name pos:start="111:47" pos:end="111:51">liobn</name></expr></argument>,

                                        <argument pos:start="113:41" pos:end="113:41"><expr pos:start="113:41" pos:end="113:41"><literal type="number" pos:start="113:41" pos:end="113:41">0</literal></expr></argument>,

                                        <argument pos:start="115:41" pos:end="115:60"><expr pos:start="115:41" pos:end="115:60"><name pos:start="115:41" pos:end="115:60">SPAPR_TCE_PAGE_SHIFT</name></expr></argument>,

                                        <argument pos:start="117:41" pos:end="119:60"><expr pos:start="117:41" pos:end="119:60"><name pos:start="117:41" pos:end="117:60"><name pos:start="117:41" pos:end="117:42">pc</name><operator pos:start="117:43" pos:end="117:44">-&gt;</operator><name pos:start="117:45" pos:end="117:60">rtce_window_size</name></name> <operator pos:start="117:62" pos:end="117:63">&gt;&gt;</operator>

                                        <name pos:start="119:41" pos:end="119:60">SPAPR_TCE_PAGE_SHIFT</name></expr></argument>, <argument pos:start="119:63" pos:end="119:67"><expr pos:start="119:63" pos:end="119:67"><name pos:start="119:63" pos:end="119:67">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:30"><expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:23"><name pos:start="121:9" pos:end="121:11">dev</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:17">tcet</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:23">vdev</name></name> <operator pos:start="121:25" pos:end="121:25">=</operator> <name pos:start="121:27" pos:end="121:29">dev</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="125:79"><expr pos:start="123:9" pos:end="125:78"><call pos:start="123:9" pos:end="125:78"><name pos:start="123:9" pos:end="123:43">memory_region_add_subregion_overlap</name><argument_list pos:start="123:44" pos:end="125:78">(<argument pos:start="123:45" pos:end="123:56"><expr pos:start="123:45" pos:end="123:56"><operator pos:start="123:45" pos:end="123:45">&amp;</operator><name pos:start="123:46" pos:end="123:56"><name pos:start="123:46" pos:end="123:48">dev</name><operator pos:start="123:49" pos:end="123:50">-&gt;</operator><name pos:start="123:51" pos:end="123:56">mrroot</name></name></expr></argument>, <argument pos:start="123:59" pos:end="123:59"><expr pos:start="123:59" pos:end="123:59"><literal type="number" pos:start="123:59" pos:end="123:59">0</literal></expr></argument>,

                                            <argument pos:start="125:45" pos:end="125:74"><expr pos:start="125:45" pos:end="125:74"><call pos:start="125:45" pos:end="125:74"><name pos:start="125:45" pos:end="125:63">spapr_tce_get_iommu</name><argument_list pos:start="125:64" pos:end="125:74">(<argument pos:start="125:65" pos:end="125:73"><expr pos:start="125:65" pos:end="125:73"><name pos:start="125:65" pos:end="125:73"><name pos:start="125:65" pos:end="125:67">dev</name><operator pos:start="125:68" pos:end="125:69">-&gt;</operator><name pos:start="125:70" pos:end="125:73">tcet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="125:77" pos:end="125:77"><expr pos:start="125:77" pos:end="125:77"><literal type="number" pos:start="125:77" pos:end="125:77">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:27"><expr pos:start="131:5" pos:end="131:26"><call pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:15"><name pos:start="131:5" pos:end="131:6">pc</name><operator pos:start="131:7" pos:end="131:8">-&gt;</operator><name pos:start="131:9" pos:end="131:15">realize</name></name><argument_list pos:start="131:16" pos:end="131:26">(<argument pos:start="131:17" pos:end="131:19"><expr pos:start="131:17" pos:end="131:19"><name pos:start="131:17" pos:end="131:19">dev</name></expr></argument>, <argument pos:start="131:22" pos:end="131:25"><expr pos:start="131:22" pos:end="131:25"><name pos:start="131:22" pos:end="131:25">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
