<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27130.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:57"><name pos:start="1:1" pos:end="1:19">iscsi_co_generic_cb</name><argument_list pos:start="1:20" pos:end="3:57">(<argument pos:start="1:21" pos:end="1:47">struct iscsi_context *iscsi</argument>, <argument pos:start="1:50" pos:end="1:59">int status</argument>,

                        <argument pos:start="3:25" pos:end="3:42">void *command_data</argument>, <argument pos:start="3:45" pos:end="3:56">void *opaque</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:5">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:20">IscsiTask</name></name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:27">iTask</name> <init pos:start="7:29" pos:end="7:36">= <expr pos:start="7:31" pos:end="7:36"><name pos:start="7:31" pos:end="7:36">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:20">scsi_task</name></name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:26">task</name> <init pos:start="9:28" pos:end="9:41">= <expr pos:start="9:30" pos:end="9:41"><name pos:start="9:30" pos:end="9:41">command_data</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:27"><expr pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:9">iTask</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:17">status</name></name> <operator pos:start="13:19" pos:end="13:19">=</operator> <name pos:start="13:21" pos:end="13:26">status</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:24"><expr pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:9">iTask</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:19">do_retry</name></name> <operator pos:start="15:21" pos:end="15:21">=</operator> <literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:9">iTask</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:15">task</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <name pos:start="17:19" pos:end="17:22">task</name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="81:5"><if pos:start="21:5" pos:end="77:5">if <condition pos:start="21:8" pos:end="21:35">(<expr pos:start="21:9" pos:end="21:34"><name pos:start="21:9" pos:end="21:14">status</name> <operator pos:start="21:16" pos:end="21:17">!=</operator> <name pos:start="21:19" pos:end="21:34">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="21:37" pos:end="77:5">{<block_content pos:start="23:9" pos:end="75:66">

        <if_stmt pos:start="23:9" pos:end="73:9"><if pos:start="23:9" pos:end="73:9">if <condition pos:start="23:12" pos:end="23:49">(<expr pos:start="23:13" pos:end="23:48"><name pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:17">iTask</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:26">retries</name></name><operator pos:start="23:27" pos:end="23:28">++</operator> <operator pos:start="23:30" pos:end="23:30">&lt;</operator> <name pos:start="23:32" pos:end="23:48">ISCSI_CMD_RETRIES</name></expr>)</condition> <block pos:start="23:51" pos:end="73:9">{<block_content pos:start="25:13" pos:end="71:13">

            <if_stmt pos:start="25:13" pos:end="37:13"><if pos:start="25:13" pos:end="37:13">if <condition pos:start="25:16" pos:end="27:64">(<expr pos:start="25:17" pos:end="27:63"><name pos:start="25:17" pos:end="25:22">status</name> <operator pos:start="25:24" pos:end="25:25">==</operator> <name pos:start="25:27" pos:end="25:53">SCSI_STATUS_CHECK_CONDITION</name>

                <operator pos:start="27:17" pos:end="27:18">&amp;&amp;</operator> <name pos:start="27:20" pos:end="27:34"><name pos:start="27:20" pos:end="27:23">task</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:30">sense</name><operator pos:start="27:31" pos:end="27:31">.</operator><name pos:start="27:32" pos:end="27:34">key</name></name> <operator pos:start="27:36" pos:end="27:37">==</operator> <name pos:start="27:39" pos:end="27:63">SCSI_SENSE_UNIT_ATTENTION</name></expr>)</condition> <block pos:start="27:66" pos:end="37:13">{<block_content pos:start="29:17" pos:end="35:25">

                <expr_stmt pos:start="29:17" pos:end="31:53"><expr pos:start="29:17" pos:end="31:52"><call pos:start="29:17" pos:end="31:52"><name pos:start="29:17" pos:end="29:28">error_report</name><argument_list pos:start="29:29" pos:end="31:52">(<argument pos:start="29:30" pos:end="29:55"><expr pos:start="29:30" pos:end="29:55"><literal type="string" pos:start="29:30" pos:end="29:55">"iSCSI CheckCondition: %s"</literal></expr></argument>,

                             <argument pos:start="31:30" pos:end="31:51"><expr pos:start="31:30" pos:end="31:51"><call pos:start="31:30" pos:end="31:51"><name pos:start="31:30" pos:end="31:44">iscsi_get_error</name><argument_list pos:start="31:45" pos:end="31:51">(<argument pos:start="31:46" pos:end="31:50"><expr pos:start="31:46" pos:end="31:50"><name pos:start="31:46" pos:end="31:50">iscsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:36"><expr pos:start="33:17" pos:end="33:35"><name pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:21">iTask</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:31">do_retry</name></name> <operator pos:start="33:33" pos:end="33:33">=</operator> <literal type="number" pos:start="33:35" pos:end="33:35">1</literal></expr>;</expr_stmt>

                <goto pos:start="35:17" pos:end="35:25">goto <name pos:start="35:22" pos:end="35:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="39:13" pos:end="43:69">/* status 0x28 is SCSI_TASK_SET_FULL. It was first introduced

             * in libiscsi 1.10.0. Hardcode this value here to avoid

             * the need to bump the libiscsi requirement to 1.10.0 */</comment>

            <if_stmt pos:start="45:13" pos:end="71:13"><if pos:start="45:13" pos:end="71:13">if <condition pos:start="45:16" pos:end="45:61">(<expr pos:start="45:17" pos:end="45:60"><name pos:start="45:17" pos:end="45:22">status</name> <operator pos:start="45:24" pos:end="45:25">==</operator> <name pos:start="45:27" pos:end="45:42">SCSI_STATUS_BUSY</name> <operator pos:start="45:44" pos:end="45:45">||</operator> <name pos:start="45:47" pos:end="45:52">status</name> <operator pos:start="45:54" pos:end="45:55">==</operator> <literal type="number" pos:start="45:57" pos:end="45:60">0x28</literal></expr>)</condition> <block pos:start="45:63" pos:end="71:13">{<block_content pos:start="47:17" pos:end="69:23">

                <decl_stmt pos:start="47:17" pos:end="49:70"><decl pos:start="47:17" pos:end="49:69"><type pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:24">unsigned</name></type> <name pos:start="47:26" pos:end="47:35">retry_time</name> <init pos:start="47:37" pos:end="49:69">=

                    <expr pos:start="49:21" pos:end="49:69"><call pos:start="49:21" pos:end="49:69"><name pos:start="49:21" pos:end="49:30">exp_random</name><argument_list pos:start="49:31" pos:end="49:69">(<argument pos:start="49:32" pos:end="49:68"><expr pos:start="49:32" pos:end="49:68"><name pos:start="49:32" pos:end="49:68"><name pos:start="49:32" pos:end="49:48">iscsi_retry_times</name><index pos:start="49:49" pos:end="49:68">[<expr pos:start="49:50" pos:end="49:67"><name pos:start="49:50" pos:end="49:63"><name pos:start="49:50" pos:end="49:54">iTask</name><operator pos:start="49:55" pos:end="49:56">-&gt;</operator><name pos:start="49:57" pos:end="49:63">retries</name></name> <operator pos:start="49:65" pos:end="49:65">-</operator> <literal type="number" pos:start="49:67" pos:end="49:67">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="51:17" pos:end="55:53"><expr pos:start="51:17" pos:end="55:52"><call pos:start="51:17" pos:end="55:52"><name pos:start="51:17" pos:end="51:28">error_report</name><argument_list pos:start="51:29" pos:end="55:52">(<argument pos:start="51:30" pos:end="51:78"><expr pos:start="51:30" pos:end="51:78"><literal type="string" pos:start="51:30" pos:end="51:78">"iSCSI Busy/TaskSetFull (retry #%u in %u ms): %s"</literal></expr></argument>,

                             <argument pos:start="53:30" pos:end="53:43"><expr pos:start="53:30" pos:end="53:43"><name pos:start="53:30" pos:end="53:43"><name pos:start="53:30" pos:end="53:34">iTask</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:43">retries</name></name></expr></argument>, <argument pos:start="53:46" pos:end="53:55"><expr pos:start="53:46" pos:end="53:55"><name pos:start="53:46" pos:end="53:55">retry_time</name></expr></argument>,

                             <argument pos:start="55:30" pos:end="55:51"><expr pos:start="55:30" pos:end="55:51"><call pos:start="55:30" pos:end="55:51"><name pos:start="55:30" pos:end="55:44">iscsi_get_error</name><argument_list pos:start="55:45" pos:end="55:51">(<argument pos:start="55:46" pos:end="55:50"><expr pos:start="55:46" pos:end="55:50"><name pos:start="55:46" pos:end="55:50">iscsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="61:75"><expr pos:start="57:17" pos:end="61:74"><call pos:start="57:17" pos:end="61:74"><name pos:start="57:17" pos:end="57:30">aio_timer_init</name><argument_list pos:start="57:31" pos:end="61:74">(<argument pos:start="57:32" pos:end="57:59"><expr pos:start="57:32" pos:end="57:59"><name pos:start="57:32" pos:end="57:59"><name pos:start="57:32" pos:end="57:36">iTask</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:46">iscsilun</name><operator pos:start="57:47" pos:end="57:48">-&gt;</operator><name pos:start="57:49" pos:end="57:59">aio_context</name></name></expr></argument>,

                               <argument pos:start="59:32" pos:end="59:50"><expr pos:start="59:32" pos:end="59:50"><operator pos:start="59:32" pos:end="59:32">&amp;</operator><name pos:start="59:33" pos:end="59:50"><name pos:start="59:33" pos:end="59:37">iTask</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:50">retry_timer</name></name></expr></argument>, <argument pos:start="59:53" pos:end="59:71"><expr pos:start="59:53" pos:end="59:71"><name pos:start="59:53" pos:end="59:71">QEMU_CLOCK_REALTIME</name></expr></argument>,

                               <argument pos:start="61:32" pos:end="61:39"><expr pos:start="61:32" pos:end="61:39"><name pos:start="61:32" pos:end="61:39">SCALE_MS</name></expr></argument>, <argument pos:start="61:42" pos:end="61:66"><expr pos:start="61:42" pos:end="61:66"><name pos:start="61:42" pos:end="61:66">iscsi_retry_timer_expired</name></expr></argument>, <argument pos:start="61:69" pos:end="61:73"><expr pos:start="61:69" pos:end="61:73"><name pos:start="61:69" pos:end="61:73">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="65:79"><expr pos:start="63:17" pos:end="65:78"><call pos:start="63:17" pos:end="65:78"><name pos:start="63:17" pos:end="63:25">timer_mod</name><argument_list pos:start="63:26" pos:end="65:78">(<argument pos:start="63:27" pos:end="63:45"><expr pos:start="63:27" pos:end="63:45"><operator pos:start="63:27" pos:end="63:27">&amp;</operator><name pos:start="63:28" pos:end="63:45"><name pos:start="63:28" pos:end="63:32">iTask</name><operator pos:start="63:33" pos:end="63:34">-&gt;</operator><name pos:start="63:35" pos:end="63:45">retry_timer</name></name></expr></argument>,

                          <argument pos:start="65:27" pos:end="65:77"><expr pos:start="65:27" pos:end="65:77"><call pos:start="65:27" pos:end="65:64"><name pos:start="65:27" pos:end="65:43">qemu_clock_get_ms</name><argument_list pos:start="65:44" pos:end="65:64">(<argument pos:start="65:45" pos:end="65:63"><expr pos:start="65:45" pos:end="65:63"><name pos:start="65:45" pos:end="65:63">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call> <operator pos:start="65:66" pos:end="65:66">+</operator> <name pos:start="65:68" pos:end="65:77">retry_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:36"><expr pos:start="67:17" pos:end="67:35"><name pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:21">iTask</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:31">do_retry</name></name> <operator pos:start="67:33" pos:end="67:33">=</operator> <literal type="number" pos:start="67:35" pos:end="67:35">1</literal></expr>;</expr_stmt>

                <return pos:start="69:17" pos:end="69:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:66"><expr pos:start="75:9" pos:end="75:65"><call pos:start="75:9" pos:end="75:65"><name pos:start="75:9" pos:end="75:20">error_report</name><argument_list pos:start="75:21" pos:end="75:65">(<argument pos:start="75:22" pos:end="75:40"><expr pos:start="75:22" pos:end="75:40"><literal type="string" pos:start="75:22" pos:end="75:40">"iSCSI Failure: %s"</literal></expr></argument>, <argument pos:start="75:43" pos:end="75:64"><expr pos:start="75:43" pos:end="75:64"><call pos:start="75:43" pos:end="75:64"><name pos:start="75:43" pos:end="75:57">iscsi_get_error</name><argument_list pos:start="75:58" pos:end="75:64">(<argument pos:start="75:59" pos:end="75:63"><expr pos:start="75:59" pos:end="75:63"><name pos:start="75:59" pos:end="75:63">iscsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="81:5">else <block pos:start="77:12" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:69">

        <expr_stmt pos:start="79:9" pos:end="79:69"><expr pos:start="79:9" pos:end="79:68"><name pos:start="79:9" pos:end="79:41"><name pos:start="79:9" pos:end="79:13">iTask</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:23">iscsilun</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:41">force_next_flush</name></name> <operator pos:start="79:43" pos:end="79:44">|=</operator> <name pos:start="79:46" pos:end="79:68"><name pos:start="79:46" pos:end="79:50">iTask</name><operator pos:start="79:51" pos:end="79:52">-&gt;</operator><name pos:start="79:53" pos:end="79:68">force_next_flush</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="85:1" pos:end="85:4"><name pos:start="85:1" pos:end="85:3">out</name>:</label>

    <if_stmt pos:start="87:5" pos:end="99:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="87:18">(<expr pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:13">iTask</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:17">co</name></name></expr>)</condition> <block pos:start="87:20" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:36">

        <expr_stmt pos:start="89:9" pos:end="91:62"><expr pos:start="89:9" pos:end="91:61"><name pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:13">iTask</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:17">bh</name></name> <operator pos:start="89:19" pos:end="89:19">=</operator> <call pos:start="89:21" pos:end="91:61"><name pos:start="89:21" pos:end="89:30">aio_bh_new</name><argument_list pos:start="89:31" pos:end="91:61">(<argument pos:start="89:32" pos:end="89:59"><expr pos:start="89:32" pos:end="89:59"><name pos:start="89:32" pos:end="89:59"><name pos:start="89:32" pos:end="89:36">iTask</name><operator pos:start="89:37" pos:end="89:38">-&gt;</operator><name pos:start="89:39" pos:end="89:46">iscsilun</name><operator pos:start="89:47" pos:end="89:48">-&gt;</operator><name pos:start="89:49" pos:end="89:59">aio_context</name></name></expr></argument>,

                               <argument pos:start="91:32" pos:end="91:53"><expr pos:start="91:32" pos:end="91:53"><name pos:start="91:32" pos:end="91:53">iscsi_co_generic_bh_cb</name></expr></argument>, <argument pos:start="91:56" pos:end="91:60"><expr pos:start="91:56" pos:end="91:60"><name pos:start="91:56" pos:end="91:60">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><call pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:24">qemu_bh_schedule</name><argument_list pos:start="93:25" pos:end="93:35">(<argument pos:start="93:26" pos:end="93:34"><expr pos:start="93:26" pos:end="93:34"><name pos:start="93:26" pos:end="93:34"><name pos:start="93:26" pos:end="93:30">iTask</name><operator pos:start="93:31" pos:end="93:32">-&gt;</operator><name pos:start="93:33" pos:end="93:34">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="99:5">else <block pos:start="95:12" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:28">

        <expr_stmt pos:start="97:9" pos:end="97:28"><expr pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:13">iTask</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:23">complete</name></name> <operator pos:start="97:25" pos:end="97:25">=</operator> <literal type="number" pos:start="97:27" pos:end="97:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block>
</unit>
