<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13245.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">qemu_rdma_exchange_recv</name><parameter_list pos:start="1:35" pos:end="3:46">(<parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:52"><name pos:start="1:36" pos:end="1:46">RDMAContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">rdma</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:77"><decl pos:start="1:55" pos:end="1:77"><type pos:start="1:55" pos:end="1:77"><name pos:start="1:55" pos:end="1:71">RDMAControlHeader</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:77">head</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:45">expecting</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="83:13">

    <decl_stmt pos:start="7:5" pos:end="15:32"><decl pos:start="7:5" pos:end="15:31"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:21">RDMAControlHeader</name></type> <name pos:start="7:23" pos:end="7:27">ready</name> <init pos:start="7:29" pos:end="15:31">= <expr pos:start="7:31" pos:end="15:31"><block pos:start="7:31" pos:end="15:31">{

                                <expr pos:start="9:33" pos:end="9:40"><operator pos:start="9:33" pos:end="9:33">.</operator><name pos:start="9:34" pos:end="9:36">len</name> <operator pos:start="9:38" pos:end="9:38">=</operator> <literal type="number" pos:start="9:40" pos:end="9:40">0</literal></expr>,

                                <expr pos:start="11:33" pos:end="11:58"><operator pos:start="11:33" pos:end="11:33">.</operator><name pos:start="11:34" pos:end="11:37">type</name> <operator pos:start="11:39" pos:end="11:39">=</operator> <name pos:start="11:41" pos:end="11:58">RDMA_CONTROL_READY</name></expr>,

                                <expr pos:start="13:33" pos:end="13:43"><operator pos:start="13:33" pos:end="13:33">.</operator><name pos:start="13:34" pos:end="13:39">repeat</name> <operator pos:start="13:41" pos:end="13:41">=</operator> <literal type="number" pos:start="13:43" pos:end="13:43">1</literal></expr>,

                              }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="25:7">/*

     * Inform the source that we're ready to receive a message.

     */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:58"><expr pos:start="27:5" pos:end="27:57"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:57"><name pos:start="27:11" pos:end="27:37">qemu_rdma_post_send_control</name><argument_list pos:start="27:38" pos:end="27:57">(<argument pos:start="27:39" pos:end="27:42"><expr pos:start="27:39" pos:end="27:42"><name pos:start="27:39" pos:end="27:42">rdma</name></expr></argument>, <argument pos:start="27:45" pos:end="27:48"><expr pos:start="27:45" pos:end="27:48"><name pos:start="27:45" pos:end="27:48">NULL</name></expr></argument>, <argument pos:start="27:51" pos:end="27:56"><expr pos:start="27:51" pos:end="27:56"><operator pos:start="27:51" pos:end="27:51">&amp;</operator><name pos:start="27:52" pos:end="27:56">ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition> <block pos:start="31:18" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:19">

        <expr_stmt pos:start="33:9" pos:end="33:60"><expr pos:start="33:9" pos:end="33:59"><call pos:start="33:9" pos:end="33:59"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:59">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:58"><expr pos:start="33:25" pos:end="33:58"><literal type="string" pos:start="33:25" pos:end="33:58">"Failed to send control buffer!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:19">return <expr pos:start="35:16" pos:end="35:18"><name pos:start="35:16" pos:end="35:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="45:7">/*

     * Block and wait for the message.

     */</comment>

    <expr_stmt pos:start="47:5" pos:end="49:70"><expr pos:start="47:5" pos:end="49:69"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="49:69"><name pos:start="47:11" pos:end="47:41">qemu_rdma_exchange_get_response</name><argument_list pos:start="47:42" pos:end="49:69">(<argument pos:start="47:43" pos:end="47:46"><expr pos:start="47:43" pos:end="47:46"><name pos:start="47:43" pos:end="47:46">rdma</name></expr></argument>, <argument pos:start="47:49" pos:end="47:52"><expr pos:start="47:49" pos:end="47:52"><name pos:start="47:49" pos:end="47:52">head</name></expr></argument>,

                                          <argument pos:start="49:43" pos:end="49:51"><expr pos:start="49:43" pos:end="49:51"><name pos:start="49:43" pos:end="49:51">expecting</name></expr></argument>, <argument pos:start="49:54" pos:end="49:68"><expr pos:start="49:54" pos:end="49:68"><name pos:start="49:54" pos:end="49:68">RDMA_WRID_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:16">(<expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>)</condition> <block pos:start="53:18" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:19">

        <return pos:start="55:9" pos:end="55:19">return <expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:55"><expr pos:start="61:5" pos:end="61:54"><call pos:start="61:5" pos:end="61:54"><name pos:start="61:5" pos:end="61:25">qemu_rdma_move_header</name><argument_list pos:start="61:26" pos:end="61:54">(<argument pos:start="61:27" pos:end="61:30"><expr pos:start="61:27" pos:end="61:30"><name pos:start="61:27" pos:end="61:30">rdma</name></expr></argument>, <argument pos:start="61:33" pos:end="61:47"><expr pos:start="61:33" pos:end="61:47"><name pos:start="61:33" pos:end="61:47">RDMA_WRID_READY</name></expr></argument>, <argument pos:start="61:50" pos:end="61:53"><expr pos:start="61:50" pos:end="61:53"><name pos:start="61:50" pos:end="61:53">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="69:7">/*

     * Post a new RECV work request to replace the one we just consumed.

     */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:61"><expr pos:start="71:5" pos:end="71:60"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:60"><name pos:start="71:11" pos:end="71:37">qemu_rdma_post_recv_control</name><argument_list pos:start="71:38" pos:end="71:60">(<argument pos:start="71:39" pos:end="71:42"><expr pos:start="71:39" pos:end="71:42"><name pos:start="71:39" pos:end="71:42">rdma</name></expr></argument>, <argument pos:start="71:45" pos:end="71:59"><expr pos:start="71:45" pos:end="71:59"><name pos:start="71:45" pos:end="71:59">RDMA_WRID_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:12">(<expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">ret</name></expr>)</condition> <block pos:start="73:14" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:19">

        <expr_stmt pos:start="75:9" pos:end="75:78"><expr pos:start="75:9" pos:end="75:77"><call pos:start="75:9" pos:end="75:77"><name pos:start="75:9" pos:end="75:15">fprintf</name><argument_list pos:start="75:16" pos:end="75:77">(<argument pos:start="75:17" pos:end="75:22"><expr pos:start="75:17" pos:end="75:22"><name pos:start="75:17" pos:end="75:22">stderr</name></expr></argument>, <argument pos:start="75:25" pos:end="75:76"><expr pos:start="75:25" pos:end="75:76"><literal type="string" pos:start="75:25" pos:end="75:76">"rdma migration: error posting second control recv!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:19">return <expr pos:start="77:16" pos:end="77:18"><name pos:start="77:16" pos:end="77:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
