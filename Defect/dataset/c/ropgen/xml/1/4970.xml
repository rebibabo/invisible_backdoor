<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4970.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">gen_rp_realize</name><parameter_list pos:start="1:27" pos:end="1:58">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">DeviceState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">dev</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:50">Error</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier><modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:5">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">d</name> <init pos:start="5:18" pos:end="5:34">= <expr pos:start="5:20" pos:end="5:34"><call pos:start="5:20" pos:end="5:34"><name pos:start="5:20" pos:end="5:29">PCI_DEVICE</name><argument_list pos:start="5:30" pos:end="5:34">(<argument pos:start="5:31" pos:end="5:33"><expr pos:start="5:31" pos:end="5:33"><name pos:start="5:31" pos:end="5:33">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">GenPCIERootPort</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">grp</name> <init pos:start="7:26" pos:end="7:48">= <expr pos:start="7:28" pos:end="7:48"><call pos:start="7:28" pos:end="7:48"><name pos:start="7:28" pos:end="7:45">GEN_PCIE_ROOT_PORT</name><argument_list pos:start="7:46" pos:end="7:48">(<argument pos:start="7:47" pos:end="7:47"><expr pos:start="7:47" pos:end="7:47"><name pos:start="7:47" pos:end="7:47">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">PCIERootPortClass</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:26">rpc</name> <init pos:start="9:28" pos:end="9:56">= <expr pos:start="9:30" pos:end="9:56"><call pos:start="9:30" pos:end="9:56"><name pos:start="9:30" pos:end="9:53">PCIE_ROOT_PORT_GET_CLASS</name><argument_list pos:start="9:54" pos:end="9:56">(<argument pos:start="9:55" pos:end="9:55"><expr pos:start="9:55" pos:end="9:55"><name pos:start="9:55" pos:end="9:55">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:35"><expr pos:start="13:5" pos:end="13:34"><call pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:7">rpc</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:23">parent_realize</name></name><argument_list pos:start="13:24" pos:end="13:34">(<argument pos:start="13:25" pos:end="13:27"><expr pos:start="13:25" pos:end="13:27"><name pos:start="13:25" pos:end="13:27">dev</name></expr></argument>, <argument pos:start="13:30" pos:end="13:33"><expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="17:5" pos:end="21:39"><decl pos:start="17:5" pos:end="21:38"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">rc</name> <init pos:start="17:12" pos:end="21:38">= <expr pos:start="17:14" pos:end="21:38"><call pos:start="17:14" pos:end="21:38"><name pos:start="17:14" pos:end="17:45">pci_bridge_qemu_reserve_cap_init</name><argument_list pos:start="17:46" pos:end="21:38">(<argument pos:start="17:47" pos:end="17:47"><expr pos:start="17:47" pos:end="17:47"><name pos:start="17:47" pos:end="17:47">d</name></expr></argument>, <argument pos:start="17:50" pos:end="17:50"><expr pos:start="17:50" pos:end="17:50"><literal type="number" pos:start="17:50" pos:end="17:50">0</literal></expr></argument>, <argument pos:start="17:53" pos:end="17:68"><expr pos:start="17:53" pos:end="17:68"><name pos:start="17:53" pos:end="17:68"><name pos:start="17:53" pos:end="17:55">grp</name><operator pos:start="17:56" pos:end="17:57">-&gt;</operator><name pos:start="17:58" pos:end="17:68">bus_reserve</name></name></expr></argument>,

            <argument pos:start="19:13" pos:end="19:27"><expr pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:15">grp</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:27">io_reserve</name></name></expr></argument>, <argument pos:start="19:30" pos:end="19:45"><expr pos:start="19:30" pos:end="19:45"><name pos:start="19:30" pos:end="19:45"><name pos:start="19:30" pos:end="19:32">grp</name><operator pos:start="19:33" pos:end="19:34">-&gt;</operator><name pos:start="19:35" pos:end="19:45">mem_reserve</name></name></expr></argument>, <argument pos:start="19:48" pos:end="19:66"><expr pos:start="19:48" pos:end="19:66"><name pos:start="19:48" pos:end="19:66"><name pos:start="19:48" pos:end="19:50">grp</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:66">pref32_reserve</name></name></expr></argument>,

            <argument pos:start="21:13" pos:end="21:31"><expr pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:15">grp</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:31">pref64_reserve</name></name></expr></argument>, <argument pos:start="21:34" pos:end="21:37"><expr pos:start="21:34" pos:end="21:37"><name pos:start="21:34" pos:end="21:37">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:10">rc</name> <operator pos:start="25:12" pos:end="25:12">&lt;</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>)</condition> <block pos:start="25:17" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:34"><expr pos:start="27:9" pos:end="27:33"><call pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:11">rpc</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:25">parent_class</name><operator pos:start="27:26" pos:end="27:26">.</operator><name pos:start="27:27" pos:end="27:30">exit</name></name><argument_list pos:start="27:31" pos:end="27:33">(<argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><name pos:start="27:32" pos:end="27:32">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="45:5">if <condition pos:start="35:8" pos:end="35:25">(<expr pos:start="35:9" pos:end="35:24"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:24"><name pos:start="35:10" pos:end="35:12">grp</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:24">io_reserve</name></name></expr>)</condition> <block pos:start="35:27" pos:end="45:5">{<block_content pos:start="37:9" pos:end="43:35">

        <expr_stmt pos:start="37:9" pos:end="39:53"><expr pos:start="37:9" pos:end="39:52"><call pos:start="37:9" pos:end="39:52"><name pos:start="37:9" pos:end="37:36">pci_word_test_and_clear_mask</name><argument_list pos:start="37:37" pos:end="39:52">(<argument pos:start="37:38" pos:end="37:59"><expr pos:start="37:38" pos:end="37:59"><name pos:start="37:38" pos:end="37:45"><name pos:start="37:38" pos:end="37:38">d</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:45">wmask</name></name> <operator pos:start="37:47" pos:end="37:47">+</operator> <name pos:start="37:49" pos:end="37:59">PCI_COMMAND</name></expr></argument>,

                                     <argument pos:start="39:38" pos:end="39:51"><expr pos:start="39:38" pos:end="39:51"><name pos:start="39:38" pos:end="39:51">PCI_COMMAND_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:9">d</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:16">wmask</name><index pos:start="41:17" pos:end="41:29">[<expr pos:start="41:18" pos:end="41:28"><name pos:start="41:18" pos:end="41:28">PCI_IO_BASE</name></expr>]</index></name> <operator pos:start="41:31" pos:end="41:31">=</operator> <literal type="number" pos:start="41:33" pos:end="41:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:35"><expr pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:9">d</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:16">wmask</name><index pos:start="43:17" pos:end="43:30">[<expr pos:start="43:18" pos:end="43:29"><name pos:start="43:18" pos:end="43:29">PCI_IO_LIMIT</name></expr>]</index></name> <operator pos:start="43:32" pos:end="43:32">=</operator> <literal type="number" pos:start="43:34" pos:end="43:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
