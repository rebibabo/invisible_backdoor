<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4981.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:29"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:17">ram_addr_t</name></type> <name pos:start="1:19" pos:end="1:31">ram_block_add</name><parameter_list pos:start="1:32" pos:end="1:66">(<parameter pos:start="1:33" pos:end="1:51"><decl pos:start="1:33" pos:end="1:51"><type pos:start="1:33" pos:end="1:51"><name pos:start="1:33" pos:end="1:40">RAMBlock</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:51">new_block</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:58">Error</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:29">{<block_content pos:start="5:5" pos:end="151:29">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RAMBlock</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:19">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">RAMBlock</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:24">last_block</name> <init pos:start="7:26" pos:end="7:31">= <expr pos:start="7:28" pos:end="7:31"><name pos:start="7:28" pos:end="7:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:27">old_ram_size</name></decl>, <decl pos:start="9:30" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:14"/><name pos:start="9:30" pos:end="9:41">new_ram_size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:57"><expr pos:start="13:5" pos:end="13:56"><name pos:start="13:5" pos:end="13:16">old_ram_size</name> <operator pos:start="13:18" pos:end="13:18">=</operator> <call pos:start="13:20" pos:end="13:36"><name pos:start="13:20" pos:end="13:34">last_ram_offset</name><argument_list pos:start="13:35" pos:end="13:36">()</argument_list></call> <operator pos:start="13:38" pos:end="13:39">&gt;&gt;</operator> <name pos:start="13:41" pos:end="13:56">TARGET_PAGE_BITS</name></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><call pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:27">qemu_mutex_lock_ramlist</name><argument_list pos:start="17:28" pos:end="17:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:63"><expr pos:start="19:5" pos:end="19:62"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:13">new_block</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:21">offset</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <call pos:start="19:25" pos:end="19:62"><name pos:start="19:25" pos:end="19:39">find_ram_offset</name><argument_list pos:start="19:40" pos:end="19:62">(<argument pos:start="19:41" pos:end="19:61"><expr pos:start="19:41" pos:end="19:61"><name pos:start="19:41" pos:end="19:61"><name pos:start="19:41" pos:end="19:49">new_block</name><operator pos:start="19:50" pos:end="19:51">-&gt;</operator><name pos:start="19:52" pos:end="19:61">max_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="151:29"><if pos:start="23:5" pos:end="151:29">if <condition pos:start="23:8" pos:end="23:25">(<expr pos:start="23:9" pos:end="23:24"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:24"><name pos:start="23:10" pos:end="23:18">new_block</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:24">host</name></name></expr>)</condition> <block pos:start="23:27" pos:end="151:29">{<block_content pos:start="25:9" pos:end="151:29">

        <if_stmt pos:start="25:9" pos:end="151:29"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:26">(<expr pos:start="25:13" pos:end="25:25"><call pos:start="25:13" pos:end="25:25"><name pos:start="25:13" pos:end="25:23">xen_enabled</name><argument_list pos:start="25:24" pos:end="25:25">()</argument_list></call></expr>)</condition> <block pos:start="25:28" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:41">

            <expr_stmt pos:start="27:13" pos:end="29:41"><expr pos:start="27:13" pos:end="29:40"><call pos:start="27:13" pos:end="29:40"><name pos:start="27:13" pos:end="27:25">xen_ram_alloc</name><argument_list pos:start="27:26" pos:end="29:40">(<argument pos:start="27:27" pos:end="27:43"><expr pos:start="27:27" pos:end="27:43"><name pos:start="27:27" pos:end="27:43"><name pos:start="27:27" pos:end="27:35">new_block</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:43">offset</name></name></expr></argument>, <argument pos:start="27:46" pos:end="27:66"><expr pos:start="27:46" pos:end="27:66"><name pos:start="27:46" pos:end="27:66"><name pos:start="27:46" pos:end="27:54">new_block</name><operator pos:start="27:55" pos:end="27:56">-&gt;</operator><name pos:start="27:57" pos:end="27:66">max_length</name></name></expr></argument>,

                          <argument pos:start="29:27" pos:end="29:39"><expr pos:start="29:27" pos:end="29:39"><name pos:start="29:27" pos:end="29:39"><name pos:start="29:27" pos:end="29:35">new_block</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:39">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="151:29">else <block pos:start="31:16" pos:end="151:29">{<block_content pos:start="33:13" pos:end="151:29">

            <expr_stmt pos:start="33:13" pos:end="35:68"><expr pos:start="33:13" pos:end="35:67"><name pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:21">new_block</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:27">host</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <call pos:start="33:31" pos:end="35:67"><name pos:start="33:31" pos:end="33:44">phys_mem_alloc</name><argument_list pos:start="33:45" pos:end="35:67">(<argument pos:start="33:46" pos:end="33:66"><expr pos:start="33:46" pos:end="33:66"><name pos:start="33:46" pos:end="33:66"><name pos:start="33:46" pos:end="33:54">new_block</name><operator pos:start="33:55" pos:end="33:56">-&gt;</operator><name pos:start="33:57" pos:end="33:66">max_length</name></name></expr></argument>,

                                             <argument pos:start="35:46" pos:end="35:66"><expr pos:start="35:46" pos:end="35:66"><operator pos:start="35:46" pos:end="35:46">&amp;</operator><name pos:start="35:47" pos:end="35:66"><name pos:start="35:47" pos:end="35:55">new_block</name><operator pos:start="35:56" pos:end="35:57">-&gt;</operator><name pos:start="35:58" pos:end="35:59">mr</name><operator pos:start="35:60" pos:end="35:61">-&gt;</operator><name pos:start="35:62" pos:end="35:66">align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="151:29"><if pos:start="37:13" pos:end="151:29">if <condition pos:start="37:16" pos:end="37:33">(<expr pos:start="37:17" pos:end="37:32"><operator pos:start="37:17" pos:end="37:17">!</operator><name pos:start="37:18" pos:end="37:32"><name pos:start="37:18" pos:end="37:26">new_block</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:32">host</name></name></expr>)</condition> <block pos:start="37:35" pos:end="151:29">{<block_content pos:start="39:17" pos:end="151:29">

                <expr_stmt pos:start="39:17" pos:end="43:68"><expr pos:start="39:17" pos:end="43:67"><call pos:start="39:17" pos:end="43:67"><name pos:start="39:17" pos:end="39:32">error_setg_errno</name><argument_list pos:start="39:33" pos:end="43:67">(<argument pos:start="39:34" pos:end="39:37"><expr pos:start="39:34" pos:end="39:37"><name pos:start="39:34" pos:end="39:37">errp</name></expr></argument>, <argument pos:start="39:40" pos:end="39:44"><expr pos:start="39:40" pos:end="39:44"><name pos:start="39:40" pos:end="39:44">errno</name></expr></argument>,

                                 <argument pos:start="41:34" pos:end="41:66"><expr pos:start="41:34" pos:end="41:66"><literal type="string" pos:start="41:34" pos:end="41:66">"cannot set up guest memory '%s'"</literal></expr></argument>,

                                 <argument pos:start="43:34" pos:end="43:66"><expr pos:start="43:34" pos:end="43:66"><call pos:start="43:34" pos:end="43:66"><name pos:start="43:34" pos:end="43:51">memory_region_name</name><argument_list pos:start="43:52" pos:end="43:66">(<argument pos:start="43:53" pos:end="43:65"><expr pos:start="43:53" pos:end="43:65"><name pos:start="43:53" pos:end="43:65"><name pos:start="43:53" pos:end="43:61">new_block</name><operator pos:start="43:62" pos:end="43:63">-&gt;</operator><name pos:start="43:64" pos:end="43:65">mr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:44"><expr pos:start="45:17" pos:end="45:43"><call pos:start="45:17" pos:end="45:43"><name pos:start="45:17" pos:end="45:41">qemu_mutex_unlock_ramlist</name><argument_list pos:start="45:42" pos:end="45:43">()</argument_list></call></expr>;</expr_stmt>

                <return pos:start="47:17" pos:end="47:26">return <expr pos:start="47:24" pos:end="47:25"><operator pos:start="47:24" pos:end="47:24">-</operator><literal type="number" pos:start="47:25" pos:end="47:25">1</literal></expr>;</return>


            <expr_stmt pos:start="50:13" pos:end="50:78"><expr pos:start="50:13" pos:end="50:77"><call pos:start="50:13" pos:end="50:77"><name pos:start="50:13" pos:end="50:37">memory_try_enable_merging</name><argument_list pos:start="50:38" pos:end="50:77">(<argument pos:start="50:39" pos:end="50:53"><expr pos:start="50:39" pos:end="50:53"><name pos:start="50:39" pos:end="50:53"><name pos:start="50:39" pos:end="50:47">new_block</name><operator pos:start="50:48" pos:end="50:49">-&gt;</operator><name pos:start="50:50" pos:end="50:53">host</name></name></expr></argument>, <argument pos:start="50:56" pos:end="50:76"><expr pos:start="50:56" pos:end="50:76"><name pos:start="50:56" pos:end="50:76"><name pos:start="50:56" pos:end="50:64">new_block</name><operator pos:start="50:65" pos:end="50:66">-&gt;</operator><name pos:start="50:67" pos:end="50:76">max_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










    <comment type="block" pos:start="61:5" pos:end="67:7">/* Keep the list sorted from biggest to smallest block.  Unlike QTAILQ,

     * QLIST (which has an RCU-friendly variant) does not have insertion at

     * tail, so save the last element in last_block.

     */</comment>

    <macro pos:start="69:5" pos:end="69:52"><name pos:start="69:5" pos:end="69:21">QLIST_FOREACH_RCU</name><argument_list pos:start="69:22" pos:end="69:52">(<argument pos:start="69:23" pos:end="69:27">block</argument>, <argument pos:start="69:30" pos:end="69:45">&amp;ram_list.blocks</argument>, <argument pos:start="69:48" pos:end="69:51">next</argument>)</argument_list></macro> <block pos:start="69:54" pos:end="151:29">{<block_content pos:start="71:9" pos:end="151:29">

        <expr_stmt pos:start="71:9" pos:end="71:27"><expr pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:18">last_block</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <name pos:start="71:22" pos:end="71:26">block</name></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="151:29"><if pos:start="73:9" pos:end="151:29">if <condition pos:start="73:12" pos:end="73:54">(<expr pos:start="73:13" pos:end="73:53"><name pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:17">block</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:29">max_length</name></name> <operator pos:start="73:31" pos:end="73:31">&lt;</operator> <name pos:start="73:33" pos:end="73:53"><name pos:start="73:33" pos:end="73:41">new_block</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:53">max_length</name></name></expr>)</condition> <block pos:start="73:56" pos:end="151:29">{<block_content pos:start="75:13" pos:end="151:29">

            <break pos:start="75:13" pos:end="75:18">break;</break>



    <if_stmt pos:start="79:5" pos:end="151:29"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:14">(<expr pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:13">block</name></expr>)</condition> <block pos:start="79:16" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:56">

        <expr_stmt pos:start="81:9" pos:end="81:56"><expr pos:start="81:9" pos:end="81:55"><call pos:start="81:9" pos:end="81:55"><name pos:start="81:9" pos:end="81:31">QLIST_INSERT_BEFORE_RCU</name><argument_list pos:start="81:32" pos:end="81:55">(<argument pos:start="81:33" pos:end="81:37"><expr pos:start="81:33" pos:end="81:37"><name pos:start="81:33" pos:end="81:37">block</name></expr></argument>, <argument pos:start="81:40" pos:end="81:48"><expr pos:start="81:40" pos:end="81:48"><name pos:start="81:40" pos:end="81:48">new_block</name></expr></argument>, <argument pos:start="81:51" pos:end="81:54"><expr pos:start="81:51" pos:end="81:54"><name pos:start="81:51" pos:end="81:54">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="83:7" pos:end="87:5">else if <condition pos:start="83:15" pos:end="83:26">(<expr pos:start="83:16" pos:end="83:25"><name pos:start="83:16" pos:end="83:25">last_block</name></expr>)</condition> <block pos:start="83:28" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:60">

        <expr_stmt pos:start="85:9" pos:end="85:60"><expr pos:start="85:9" pos:end="85:59"><call pos:start="85:9" pos:end="85:59"><name pos:start="85:9" pos:end="85:30">QLIST_INSERT_AFTER_RCU</name><argument_list pos:start="85:31" pos:end="85:59">(<argument pos:start="85:32" pos:end="85:41"><expr pos:start="85:32" pos:end="85:41"><name pos:start="85:32" pos:end="85:41">last_block</name></expr></argument>, <argument pos:start="85:44" pos:end="85:52"><expr pos:start="85:44" pos:end="85:52"><name pos:start="85:44" pos:end="85:52">new_block</name></expr></argument>, <argument pos:start="85:55" pos:end="85:58"><expr pos:start="85:55" pos:end="85:58"><name pos:start="85:55" pos:end="85:58">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="151:29">else <block pos:start="87:12" pos:end="151:29">{<block_content pos:start="89:9" pos:end="151:29"> <comment type="block" pos:start="87:14" pos:end="87:32">/* list is empty */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:65"><expr pos:start="89:9" pos:end="89:64"><call pos:start="89:9" pos:end="89:64"><name pos:start="89:9" pos:end="89:29">QLIST_INSERT_HEAD_RCU</name><argument_list pos:start="89:30" pos:end="89:64">(<argument pos:start="89:31" pos:end="89:46"><expr pos:start="89:31" pos:end="89:46"><operator pos:start="89:31" pos:end="89:31">&amp;</operator><name pos:start="89:32" pos:end="89:46"><name pos:start="89:32" pos:end="89:39">ram_list</name><operator pos:start="89:40" pos:end="89:40">.</operator><name pos:start="89:41" pos:end="89:46">blocks</name></name></expr></argument>, <argument pos:start="89:49" pos:end="89:57"><expr pos:start="89:49" pos:end="89:57"><name pos:start="89:49" pos:end="89:57">new_block</name></expr></argument>, <argument pos:start="89:60" pos:end="89:63"><expr pos:start="89:60" pos:end="89:63"><name pos:start="89:60" pos:end="89:63">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="92:5" pos:end="92:30"><expr pos:start="92:5" pos:end="92:29"><name pos:start="92:5" pos:end="92:22"><name pos:start="92:5" pos:end="92:12">ram_list</name><operator pos:start="92:13" pos:end="92:13">.</operator><name pos:start="92:14" pos:end="92:22">mru_block</name></name> <operator pos:start="92:24" pos:end="92:24">=</operator> <name pos:start="92:26" pos:end="92:29">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="96:5" pos:end="96:35">/* Write list before version */</comment>

    <expr_stmt pos:start="98:5" pos:end="98:14"><expr pos:start="98:5" pos:end="98:13"><call pos:start="98:5" pos:end="98:13"><name pos:start="98:5" pos:end="98:11">smp_wmb</name><argument_list pos:start="98:12" pos:end="98:13">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="100:5" pos:end="100:23"><expr pos:start="100:5" pos:end="100:22"><name pos:start="100:5" pos:end="100:20"><name pos:start="100:5" pos:end="100:12">ram_list</name><operator pos:start="100:13" pos:end="100:13">.</operator><name pos:start="100:14" pos:end="100:20">version</name></name><operator pos:start="100:21" pos:end="100:22">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="102:5" pos:end="102:32"><expr pos:start="102:5" pos:end="102:31"><call pos:start="102:5" pos:end="102:31"><name pos:start="102:5" pos:end="102:29">qemu_mutex_unlock_ramlist</name><argument_list pos:start="102:30" pos:end="102:31">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="106:5" pos:end="106:57"><expr pos:start="106:5" pos:end="106:56"><name pos:start="106:5" pos:end="106:16">new_ram_size</name> <operator pos:start="106:18" pos:end="106:18">=</operator> <call pos:start="106:20" pos:end="106:36"><name pos:start="106:20" pos:end="106:34">last_ram_offset</name><argument_list pos:start="106:35" pos:end="106:36">()</argument_list></call> <operator pos:start="106:38" pos:end="106:39">&gt;&gt;</operator> <name pos:start="106:41" pos:end="106:56">TARGET_PAGE_BITS</name></expr>;</expr_stmt>




        <decl_stmt pos:start="111:9" pos:end="111:14"><decl pos:start="111:9" pos:end="111:13"><type pos:start="111:9" pos:end="111:11"><name pos:start="111:9" pos:end="111:11">int</name></type> <name pos:start="111:13" pos:end="111:13">i</name></decl>;</decl_stmt>



        <comment type="block" pos:start="115:9" pos:end="115:73">/* ram_list.dirty_memory[] is protected by the iothread lock.  */</comment>

        <for pos:start="117:9" pos:end="151:29">for <control pos:start="117:13" pos:end="117:46">(<init pos:start="117:14" pos:end="117:19"><expr pos:start="117:14" pos:end="117:18"><name pos:start="117:14" pos:end="117:14">i</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <literal type="number" pos:start="117:18" pos:end="117:18">0</literal></expr>;</init> <condition pos:start="117:21" pos:end="117:41"><expr pos:start="117:21" pos:end="117:40"><name pos:start="117:21" pos:end="117:21">i</name> <operator pos:start="117:23" pos:end="117:23">&lt;</operator> <name pos:start="117:25" pos:end="117:40">DIRTY_MEMORY_NUM</name></expr>;</condition> <incr pos:start="117:43" pos:end="117:45"><expr pos:start="117:43" pos:end="117:45"><name pos:start="117:43" pos:end="117:43">i</name><operator pos:start="117:44" pos:end="117:45">++</operator></expr></incr>)</control> <block pos:start="117:48" pos:end="151:29">{<block_content pos:start="119:13" pos:end="151:29">

            <expr_stmt pos:start="119:13" pos:end="123:63"><expr pos:start="119:13" pos:end="123:62"><name pos:start="119:13" pos:end="119:36"><name pos:start="119:13" pos:end="119:20">ram_list</name><operator pos:start="119:21" pos:end="119:21">.</operator><name pos:start="119:22" pos:end="119:33">dirty_memory</name><index pos:start="119:34" pos:end="119:36">[<expr pos:start="119:35" pos:end="119:35"><name pos:start="119:35" pos:end="119:35">i</name></expr>]</index></name> <operator pos:start="119:38" pos:end="119:38">=</operator>

                <call pos:start="121:17" pos:end="123:62"><name pos:start="121:17" pos:end="121:34">bitmap_zero_extend</name><argument_list pos:start="121:35" pos:end="123:62">(<argument pos:start="121:36" pos:end="121:59"><expr pos:start="121:36" pos:end="121:59"><name pos:start="121:36" pos:end="121:59"><name pos:start="121:36" pos:end="121:43">ram_list</name><operator pos:start="121:44" pos:end="121:44">.</operator><name pos:start="121:45" pos:end="121:56">dirty_memory</name><index pos:start="121:57" pos:end="121:59">[<expr pos:start="121:58" pos:end="121:58"><name pos:start="121:58" pos:end="121:58">i</name></expr>]</index></name></expr></argument>,

                                   <argument pos:start="123:36" pos:end="123:47"><expr pos:start="123:36" pos:end="123:47"><name pos:start="123:36" pos:end="123:47">old_ram_size</name></expr></argument>, <argument pos:start="123:50" pos:end="123:61"><expr pos:start="123:50" pos:end="123:61"><name pos:start="123:50" pos:end="123:61">new_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="131:59"><expr pos:start="127:5" pos:end="131:58"><call pos:start="127:5" pos:end="131:58"><name pos:start="127:5" pos:end="127:39">cpu_physical_memory_set_dirty_range</name><argument_list pos:start="127:40" pos:end="131:58">(<argument pos:start="127:41" pos:end="127:57"><expr pos:start="127:41" pos:end="127:57"><name pos:start="127:41" pos:end="127:57"><name pos:start="127:41" pos:end="127:49">new_block</name><operator pos:start="127:50" pos:end="127:51">-&gt;</operator><name pos:start="127:52" pos:end="127:57">offset</name></name></expr></argument>,

                                        <argument pos:start="129:41" pos:end="129:62"><expr pos:start="129:41" pos:end="129:62"><name pos:start="129:41" pos:end="129:62"><name pos:start="129:41" pos:end="129:49">new_block</name><operator pos:start="129:50" pos:end="129:51">-&gt;</operator><name pos:start="129:52" pos:end="129:62">used_length</name></name></expr></argument>,

                                        <argument pos:start="131:41" pos:end="131:57"><expr pos:start="131:41" pos:end="131:57"><name pos:start="131:41" pos:end="131:57">DIRTY_CLIENTS_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="135:5" pos:end="151:29"><if pos:start="135:5" pos:end="151:29">if <condition pos:start="135:8" pos:end="135:24">(<expr pos:start="135:9" pos:end="135:23"><name pos:start="135:9" pos:end="135:23"><name pos:start="135:9" pos:end="135:17">new_block</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:23">host</name></name></expr>)</condition> <block pos:start="135:26" pos:end="151:29">{<block_content pos:start="137:9" pos:end="151:29">

        <expr_stmt pos:start="137:9" pos:end="137:68"><expr pos:start="137:9" pos:end="137:67"><call pos:start="137:9" pos:end="137:67"><name pos:start="137:9" pos:end="137:27">qemu_ram_setup_dump</name><argument_list pos:start="137:28" pos:end="137:67">(<argument pos:start="137:29" pos:end="137:43"><expr pos:start="137:29" pos:end="137:43"><name pos:start="137:29" pos:end="137:43"><name pos:start="137:29" pos:end="137:37">new_block</name><operator pos:start="137:38" pos:end="137:39">-&gt;</operator><name pos:start="137:40" pos:end="137:43">host</name></name></expr></argument>, <argument pos:start="137:46" pos:end="137:66"><expr pos:start="137:46" pos:end="137:66"><name pos:start="137:46" pos:end="137:66"><name pos:start="137:46" pos:end="137:54">new_block</name><operator pos:start="137:55" pos:end="137:56">-&gt;</operator><name pos:start="137:57" pos:end="137:66">max_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:81"><expr pos:start="139:9" pos:end="139:80"><call pos:start="139:9" pos:end="139:80"><name pos:start="139:9" pos:end="139:20">qemu_madvise</name><argument_list pos:start="139:21" pos:end="139:80">(<argument pos:start="139:22" pos:end="139:36"><expr pos:start="139:22" pos:end="139:36"><name pos:start="139:22" pos:end="139:36"><name pos:start="139:22" pos:end="139:30">new_block</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:36">host</name></name></expr></argument>, <argument pos:start="139:39" pos:end="139:59"><expr pos:start="139:39" pos:end="139:59"><name pos:start="139:39" pos:end="139:59"><name pos:start="139:39" pos:end="139:47">new_block</name><operator pos:start="139:48" pos:end="139:49">-&gt;</operator><name pos:start="139:50" pos:end="139:59">max_length</name></name></expr></argument>, <argument pos:start="139:62" pos:end="139:79"><expr pos:start="139:62" pos:end="139:79"><name pos:start="139:62" pos:end="139:79">QEMU_MADV_HUGEPAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:81"><expr pos:start="141:9" pos:end="141:80"><call pos:start="141:9" pos:end="141:80"><name pos:start="141:9" pos:end="141:20">qemu_madvise</name><argument_list pos:start="141:21" pos:end="141:80">(<argument pos:start="141:22" pos:end="141:36"><expr pos:start="141:22" pos:end="141:36"><name pos:start="141:22" pos:end="141:36"><name pos:start="141:22" pos:end="141:30">new_block</name><operator pos:start="141:31" pos:end="141:32">-&gt;</operator><name pos:start="141:33" pos:end="141:36">host</name></name></expr></argument>, <argument pos:start="141:39" pos:end="141:59"><expr pos:start="141:39" pos:end="141:59"><name pos:start="141:39" pos:end="141:59"><name pos:start="141:39" pos:end="141:47">new_block</name><operator pos:start="141:48" pos:end="141:49">-&gt;</operator><name pos:start="141:50" pos:end="141:59">max_length</name></name></expr></argument>, <argument pos:start="141:62" pos:end="141:79"><expr pos:start="141:62" pos:end="141:79"><name pos:start="141:62" pos:end="141:79">QEMU_MADV_DONTFORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="151:29"><if pos:start="143:9" pos:end="151:29">if <condition pos:start="143:12" pos:end="143:26">(<expr pos:start="143:13" pos:end="143:25"><call pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:23">kvm_enabled</name><argument_list pos:start="143:24" pos:end="143:25">()</argument_list></call></expr>)</condition> <block pos:start="143:28" pos:end="151:29">{<block_content pos:start="145:13" pos:end="151:29">

            <expr_stmt pos:start="145:13" pos:end="145:75"><expr pos:start="145:13" pos:end="145:74"><call pos:start="145:13" pos:end="145:74"><name pos:start="145:13" pos:end="145:34">kvm_setup_guest_memory</name><argument_list pos:start="145:35" pos:end="145:74">(<argument pos:start="145:36" pos:end="145:50"><expr pos:start="145:36" pos:end="145:50"><name pos:start="145:36" pos:end="145:50"><name pos:start="145:36" pos:end="145:44">new_block</name><operator pos:start="145:45" pos:end="145:46">-&gt;</operator><name pos:start="145:47" pos:end="145:50">host</name></name></expr></argument>, <argument pos:start="145:53" pos:end="145:73"><expr pos:start="145:53" pos:end="145:73"><name pos:start="145:53" pos:end="145:73"><name pos:start="145:53" pos:end="145:61">new_block</name><operator pos:start="145:62" pos:end="145:63">-&gt;</operator><name pos:start="145:64" pos:end="145:73">max_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <return pos:start="151:5" pos:end="151:29">return <expr pos:start="151:12" pos:end="151:28"><name pos:start="151:12" pos:end="151:28"><name pos:start="151:12" pos:end="151:20">new_block</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:28">offset</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
