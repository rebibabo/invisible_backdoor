<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21382.c" pos:tabs="8"><function pos:start="1:1" pos:end="98:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">bdrv_open_common</name><parameter_list pos:start="1:28" pos:end="2:62">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:72"><decl pos:start="1:51" pos:end="1:72"><type pos:start="1:51" pos:end="1:72"><name pos:start="1:51" pos:end="1:66">BlockDriverState</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">file</name></decl></parameter>,
    <parameter pos:start="2:5" pos:end="2:18"><decl pos:start="2:5" pos:end="2:18"><type pos:start="2:5" pos:end="2:18"><name pos:start="2:5" pos:end="2:9">QDict</name> <modifier pos:start="2:11" pos:end="2:11">*</modifier></type><name pos:start="2:12" pos:end="2:18">options</name></decl></parameter>, <parameter pos:start="2:21" pos:end="2:29"><decl pos:start="2:21" pos:end="2:29"><type pos:start="2:21" pos:end="2:29"><name pos:start="2:21" pos:end="2:23">int</name></type> <name pos:start="2:25" pos:end="2:29">flags</name></decl></parameter>, <parameter pos:start="2:32" pos:end="2:47"><decl pos:start="2:32" pos:end="2:47"><type pos:start="2:32" pos:end="2:47"><name pos:start="2:32" pos:end="2:42">BlockDriver</name> <modifier pos:start="2:44" pos:end="2:44">*</modifier></type><name pos:start="2:45" pos:end="2:47">drv</name></decl></parameter>, <parameter pos:start="2:50" pos:end="2:61"><decl pos:start="2:50" pos:end="2:61"><type pos:start="2:50" pos:end="2:61"><name pos:start="2:50" pos:end="2:54">Error</name> <modifier pos:start="2:56" pos:end="2:56">*</modifier><modifier pos:start="2:57" pos:end="2:57">*</modifier></type><name pos:start="2:58" pos:end="2:61">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="98:15">{<block_content pos:start="4:5" pos:end="98:15">
    <decl_stmt pos:start="4:5" pos:end="4:24"><decl pos:start="4:5" pos:end="4:11"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:11">ret</name></decl>, <decl pos:start="4:14" pos:end="4:23"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:14" pos:end="4:23">open_flags</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:24">filename</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:33"><decl pos:start="6:5" pos:end="6:32"><type pos:start="6:5" pos:end="6:16"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:14">char</name> <modifier pos:start="6:16" pos:end="6:16">*</modifier></type><name pos:start="6:17" pos:end="6:25">node_name</name> <init pos:start="6:27" pos:end="6:32">= <expr pos:start="6:29" pos:end="6:32"><name pos:start="6:29" pos:end="6:32">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:24"><expr pos:start="8:5" pos:end="8:23"><call pos:start="8:5" pos:end="8:23"><name pos:start="8:5" pos:end="8:10">assert</name><argument_list pos:start="8:11" pos:end="8:23">(<argument pos:start="8:12" pos:end="8:22"><expr pos:start="8:12" pos:end="8:22"><name pos:start="8:12" pos:end="8:14">drv</name> <operator pos:start="8:16" pos:end="8:17">!=</operator> <name pos:start="8:19" pos:end="8:22">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:29"><expr pos:start="9:5" pos:end="9:28"><call pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:10">assert</name><argument_list pos:start="9:11" pos:end="9:28">(<argument pos:start="9:12" pos:end="9:27"><expr pos:start="9:12" pos:end="9:27"><name pos:start="9:12" pos:end="9:19"><name pos:start="9:12" pos:end="9:13">bs</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:19">file</name></name> <operator pos:start="9:21" pos:end="9:22">==</operator> <name pos:start="9:24" pos:end="9:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:54"><expr pos:start="10:5" pos:end="10:53"><call pos:start="10:5" pos:end="10:53"><name pos:start="10:5" pos:end="10:10">assert</name><argument_list pos:start="10:11" pos:end="10:53">(<argument pos:start="10:12" pos:end="10:52"><expr pos:start="10:12" pos:end="10:52"><name pos:start="10:12" pos:end="10:18">options</name> <operator pos:start="10:20" pos:end="10:21">!=</operator> <name pos:start="10:23" pos:end="10:26">NULL</name> <operator pos:start="10:28" pos:end="10:29">&amp;&amp;</operator> <name pos:start="10:31" pos:end="10:41"><name pos:start="10:31" pos:end="10:32">bs</name><operator pos:start="10:33" pos:end="10:34">-&gt;</operator><name pos:start="10:35" pos:end="10:41">options</name></name> <operator pos:start="10:43" pos:end="10:44">!=</operator> <name pos:start="10:46" pos:end="10:52">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="11:5" pos:end="98:15"><if pos:start="11:5" pos:end="13:5">if <condition pos:start="11:8" pos:end="11:21">(<expr pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:12">file</name> <operator pos:start="11:14" pos:end="11:15">!=</operator> <name pos:start="11:17" pos:end="11:20">NULL</name></expr>)</condition> <block pos:start="11:23" pos:end="13:5">{<block_content pos:start="12:9" pos:end="12:34">
        <expr_stmt pos:start="12:9" pos:end="12:34"><expr pos:start="12:9" pos:end="12:33"><name pos:start="12:9" pos:end="12:16">filename</name> <operator pos:start="12:18" pos:end="12:18">=</operator> <name pos:start="12:20" pos:end="12:33"><name pos:start="12:20" pos:end="12:23">file</name><operator pos:start="12:24" pos:end="12:25">-&gt;</operator><name pos:start="12:26" pos:end="12:33">filename</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="13:7" pos:end="98:15">else <block pos:start="13:12" pos:end="98:15">{<block_content pos:start="14:9" pos:end="98:15">
        <expr_stmt pos:start="14:9" pos:end="14:58"><expr pos:start="14:9" pos:end="14:57"><name pos:start="14:9" pos:end="14:16">filename</name> <operator pos:start="14:18" pos:end="14:18">=</operator> <call pos:start="14:20" pos:end="14:57"><name pos:start="14:20" pos:end="14:36">qdict_get_try_str</name><argument_list pos:start="14:37" pos:end="14:57">(<argument pos:start="14:38" pos:end="14:44"><expr pos:start="14:38" pos:end="14:44"><name pos:start="14:38" pos:end="14:44">options</name></expr></argument>, <argument pos:start="14:47" pos:end="14:56"><expr pos:start="14:47" pos:end="14:56"><literal type="string" pos:start="14:47" pos:end="14:56">"filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="15:5" pos:end="98:15"><if pos:start="15:5" pos:end="98:15">if <condition pos:start="15:8" pos:end="15:46">(<expr pos:start="15:9" pos:end="15:45"><name pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:11">drv</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:32">bdrv_needs_filename</name></name> <operator pos:start="15:34" pos:end="15:35">&amp;&amp;</operator> <operator pos:start="15:37" pos:end="15:37">!</operator><name pos:start="15:38" pos:end="15:45">filename</name></expr>)</condition> <block pos:start="15:48" pos:end="98:15">{<block_content pos:start="16:9" pos:end="98:15">
        <expr_stmt pos:start="16:9" pos:end="17:37"><expr pos:start="16:9" pos:end="17:36"><call pos:start="16:9" pos:end="17:36"><name pos:start="16:9" pos:end="16:18">error_setg</name><argument_list pos:start="16:19" pos:end="17:36">(<argument pos:start="16:20" pos:end="16:23"><expr pos:start="16:20" pos:end="16:23"><name pos:start="16:20" pos:end="16:23">errp</name></expr></argument>, <argument pos:start="16:26" pos:end="16:69"><expr pos:start="16:26" pos:end="16:69"><literal type="string" pos:start="16:26" pos:end="16:69">"The '%s' block driver requires a file name"</literal></expr></argument>,
                   <argument pos:start="17:20" pos:end="17:35"><expr pos:start="17:20" pos:end="17:35"><name pos:start="17:20" pos:end="17:35"><name pos:start="17:20" pos:end="17:22">drv</name><operator pos:start="17:23" pos:end="17:24">-&gt;</operator><name pos:start="17:25" pos:end="17:35">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="18:9" pos:end="18:23">return <expr pos:start="18:16" pos:end="18:22"><operator pos:start="18:16" pos:end="18:16">-</operator><name pos:start="18:17" pos:end="18:22">EINVAL</name></expr>;</return>
    <expr_stmt pos:start="19:5" pos:end="19:72"><expr pos:start="19:5" pos:end="19:71"><call pos:start="19:5" pos:end="19:71"><name pos:start="19:5" pos:end="19:26">trace_bdrv_open_common</name><argument_list pos:start="19:27" pos:end="19:71">(<argument pos:start="19:28" pos:end="19:29"><expr pos:start="19:28" pos:end="19:29"><name pos:start="19:28" pos:end="19:29">bs</name></expr></argument>, <argument pos:start="19:32" pos:end="19:45"><expr pos:start="19:32" pos:end="19:45"><ternary pos:start="19:32" pos:end="19:45"><condition pos:start="19:32" pos:end="19:41"><expr pos:start="19:32" pos:end="19:39"><name pos:start="19:32" pos:end="19:39">filename</name></expr> ?</condition><then/><else pos:start="19:42" pos:end="19:45">: <expr pos:start="19:44" pos:end="19:45"><literal type="string" pos:start="19:44" pos:end="19:45">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="19:48" pos:end="19:52"><expr pos:start="19:48" pos:end="19:52"><name pos:start="19:48" pos:end="19:52">flags</name></expr></argument>, <argument pos:start="19:55" pos:end="19:70"><expr pos:start="19:55" pos:end="19:70"><name pos:start="19:55" pos:end="19:70"><name pos:start="19:55" pos:end="19:57">drv</name><operator pos:start="19:58" pos:end="19:59">-&gt;</operator><name pos:start="19:60" pos:end="19:70">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:56"><expr pos:start="20:5" pos:end="20:55"><name pos:start="20:5" pos:end="20:13">node_name</name> <operator pos:start="20:15" pos:end="20:15">=</operator> <call pos:start="20:17" pos:end="20:55"><name pos:start="20:17" pos:end="20:33">qdict_get_try_str</name><argument_list pos:start="20:34" pos:end="20:55">(<argument pos:start="20:35" pos:end="20:41"><expr pos:start="20:35" pos:end="20:41"><name pos:start="20:35" pos:end="20:41">options</name></expr></argument>, <argument pos:start="20:44" pos:end="20:54"><expr pos:start="20:44" pos:end="20:54"><literal type="string" pos:start="20:44" pos:end="20:54">"node-name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:53"><expr pos:start="21:5" pos:end="21:52"><call pos:start="21:5" pos:end="21:52"><name pos:start="21:5" pos:end="21:25">bdrv_assign_node_name</name><argument_list pos:start="21:26" pos:end="21:52">(<argument pos:start="21:27" pos:end="21:28"><expr pos:start="21:27" pos:end="21:28"><name pos:start="21:27" pos:end="21:28">bs</name></expr></argument>, <argument pos:start="21:31" pos:end="21:39"><expr pos:start="21:31" pos:end="21:39"><name pos:start="21:31" pos:end="21:39">node_name</name></expr></argument>, <argument pos:start="21:42" pos:end="21:51"><expr pos:start="21:42" pos:end="21:51"><operator pos:start="21:42" pos:end="21:42">&amp;</operator><name pos:start="21:43" pos:end="21:51">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="98:15"><if pos:start="22:5" pos:end="98:15">if <condition pos:start="22:8" pos:end="22:18">(<expr pos:start="22:9" pos:end="22:17"><name pos:start="22:9" pos:end="22:17">local_err</name></expr>)</condition> <block pos:start="22:20" pos:end="98:15">{<block_content pos:start="23:9" pos:end="98:15">
        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><call pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:23">error_propagate</name><argument_list pos:start="23:24" pos:end="23:40">(<argument pos:start="23:25" pos:end="23:28"><expr pos:start="23:25" pos:end="23:28"><name pos:start="23:25" pos:end="23:28">errp</name></expr></argument>, <argument pos:start="23:31" pos:end="23:39"><expr pos:start="23:31" pos:end="23:39"><name pos:start="23:31" pos:end="23:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="24:9" pos:end="24:23">return <expr pos:start="24:16" pos:end="24:22"><operator pos:start="24:16" pos:end="24:16">-</operator><name pos:start="24:17" pos:end="24:22">EINVAL</name></expr>;</return>
    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><call pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:13">qdict_del</name><argument_list pos:start="25:14" pos:end="25:35">(<argument pos:start="25:15" pos:end="25:21"><expr pos:start="25:15" pos:end="25:21"><name pos:start="25:15" pos:end="25:21">options</name></expr></argument>, <argument pos:start="25:24" pos:end="25:34"><expr pos:start="25:24" pos:end="25:34"><literal type="string" pos:start="25:24" pos:end="25:34">"node-name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="26:5" pos:end="28:33">/* bdrv_open() with directly using a protocol as drv. This layer is already
     * opened, so assign it to bs (while file becomes a closed BlockDriverState)
     * and return immediately. */</comment>
    <if_stmt pos:start="29:5" pos:end="98:15"><if pos:start="29:5" pos:end="98:15">if <condition pos:start="29:8" pos:end="29:44">(<expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:12">file</name> <operator pos:start="29:14" pos:end="29:15">!=</operator> <name pos:start="29:17" pos:end="29:20">NULL</name> <operator pos:start="29:22" pos:end="29:23">&amp;&amp;</operator> <name pos:start="29:25" pos:end="29:43"><name pos:start="29:25" pos:end="29:27">drv</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:43">bdrv_file_open</name></name></expr>)</condition> <block pos:start="29:46" pos:end="98:15">{<block_content pos:start="30:9" pos:end="98:15">
        <expr_stmt pos:start="30:9" pos:end="30:28"><expr pos:start="30:9" pos:end="30:27"><call pos:start="30:9" pos:end="30:27"><name pos:start="30:9" pos:end="30:17">bdrv_swap</name><argument_list pos:start="30:18" pos:end="30:27">(<argument pos:start="30:19" pos:end="30:22"><expr pos:start="30:19" pos:end="30:22"><name pos:start="30:19" pos:end="30:22">file</name></expr></argument>, <argument pos:start="30:25" pos:end="30:26"><expr pos:start="30:25" pos:end="30:26"><name pos:start="30:25" pos:end="30:26">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>
    <expr_stmt pos:start="32:5" pos:end="32:27"><expr pos:start="32:5" pos:end="32:26"><name pos:start="32:5" pos:end="32:18"><name pos:start="32:5" pos:end="32:6">bs</name><operator pos:start="32:7" pos:end="32:8">-&gt;</operator><name pos:start="32:9" pos:end="32:18">open_flags</name></name> <operator pos:start="32:20" pos:end="32:20">=</operator> <name pos:start="32:22" pos:end="32:26">flags</name></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:6">bs</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:24">guest_block_size</name></name> <operator pos:start="33:26" pos:end="33:26">=</operator> <literal type="number" pos:start="33:28" pos:end="33:30">512</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:32"><expr pos:start="34:5" pos:end="34:31"><name pos:start="34:5" pos:end="34:25"><name pos:start="34:5" pos:end="34:6">bs</name><operator pos:start="34:7" pos:end="34:8">-&gt;</operator><name pos:start="34:9" pos:end="34:25">request_alignment</name></name> <operator pos:start="34:27" pos:end="34:27">=</operator> <literal type="number" pos:start="34:29" pos:end="34:31">512</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:6">bs</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:23">zero_beyond_eof</name></name> <operator pos:start="35:25" pos:end="35:25">=</operator> <name pos:start="35:27" pos:end="35:30">true</name></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:44"><expr pos:start="36:5" pos:end="36:43"><name pos:start="36:5" pos:end="36:14">open_flags</name> <operator pos:start="36:16" pos:end="36:16">=</operator> <call pos:start="36:18" pos:end="36:43"><name pos:start="36:18" pos:end="36:32">bdrv_open_flags</name><argument_list pos:start="36:33" pos:end="36:43">(<argument pos:start="36:34" pos:end="36:35"><expr pos:start="36:34" pos:end="36:35"><name pos:start="36:34" pos:end="36:35">bs</name></expr></argument>, <argument pos:start="36:38" pos:end="36:42"><expr pos:start="36:38" pos:end="36:42"><name pos:start="36:38" pos:end="36:42">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:6">bs</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:17">read_only</name></name> <operator pos:start="37:19" pos:end="37:19">=</operator> <operator pos:start="37:21" pos:end="37:21">!</operator><operator pos:start="37:22" pos:end="37:22">(</operator><name pos:start="37:23" pos:end="37:32">open_flags</name> <operator pos:start="37:34" pos:end="37:34">&amp;</operator> <name pos:start="37:36" pos:end="37:46">BDRV_O_RDWR</name><operator pos:start="37:47" pos:end="37:47">)</operator></expr>;</expr_stmt>
    <if_stmt pos:start="38:5" pos:end="98:15"><if pos:start="38:5" pos:end="98:15">if <condition pos:start="38:8" pos:end="38:71">(<expr pos:start="38:9" pos:end="38:70"><name pos:start="38:9" pos:end="38:26">use_bdrv_whitelist</name> <operator pos:start="38:28" pos:end="38:29">&amp;&amp;</operator> <operator pos:start="38:31" pos:end="38:31">!</operator><call pos:start="38:32" pos:end="38:70"><name pos:start="38:32" pos:end="38:50">bdrv_is_whitelisted</name><argument_list pos:start="38:51" pos:end="38:70">(<argument pos:start="38:52" pos:end="38:54"><expr pos:start="38:52" pos:end="38:54"><name pos:start="38:52" pos:end="38:54">drv</name></expr></argument>, <argument pos:start="38:57" pos:end="38:69"><expr pos:start="38:57" pos:end="38:69"><name pos:start="38:57" pos:end="38:69"><name pos:start="38:57" pos:end="38:58">bs</name><operator pos:start="38:59" pos:end="38:60">-&gt;</operator><name pos:start="38:61" pos:end="38:69">read_only</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="38:73" pos:end="98:15">{<block_content pos:start="39:9" pos:end="98:15">
        <expr_stmt pos:start="39:9" pos:end="43:37"><expr pos:start="39:9" pos:end="43:36"><call pos:start="39:9" pos:end="43:36"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="43:36">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>,
                   <argument pos:start="40:20" pos:end="42:58"><expr pos:start="40:20" pos:end="42:58"><ternary pos:start="40:20" pos:end="42:58"><condition pos:start="40:20" pos:end="41:25"><expr pos:start="40:20" pos:end="40:67"><operator pos:start="40:20" pos:end="40:20">!</operator><name pos:start="40:21" pos:end="40:33"><name pos:start="40:21" pos:end="40:22">bs</name><operator pos:start="40:23" pos:end="40:24">-&gt;</operator><name pos:start="40:25" pos:end="40:33">read_only</name></name> <operator pos:start="40:35" pos:end="40:36">&amp;&amp;</operator> <call pos:start="40:38" pos:end="40:67"><name pos:start="40:38" pos:end="40:56">bdrv_is_whitelisted</name><argument_list pos:start="40:57" pos:end="40:67">(<argument pos:start="40:58" pos:end="40:60"><expr pos:start="40:58" pos:end="40:60"><name pos:start="40:58" pos:end="40:60">drv</name></expr></argument>, <argument pos:start="40:63" pos:end="40:66"><expr pos:start="40:63" pos:end="40:66"><name pos:start="40:63" pos:end="40:66">true</name></expr></argument>)</argument_list></call></expr>
                        ?</condition><then pos:start="41:27" pos:end="41:78"> <expr pos:start="41:27" pos:end="41:78"><literal type="string" pos:start="41:27" pos:end="41:78">"Driver '%s' can only be used for read-only devices"</literal></expr>
                        </then><else pos:start="42:25" pos:end="42:58">: <expr pos:start="42:27" pos:end="42:58"><literal type="string" pos:start="42:27" pos:end="42:58">"Driver '%s' is not whitelisted"</literal></expr></else></ternary></expr></argument>,
                   <argument pos:start="43:20" pos:end="43:35"><expr pos:start="43:20" pos:end="43:35"><name pos:start="43:20" pos:end="43:35"><name pos:start="43:20" pos:end="43:22">drv</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:35">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="44:9" pos:end="44:24">return <expr pos:start="44:16" pos:end="44:23"><operator pos:start="44:16" pos:end="44:16">-</operator><name pos:start="44:17" pos:end="44:23">ENOTSUP</name></expr>;</return>
    <expr_stmt pos:start="45:5" pos:end="45:34"><expr pos:start="45:5" pos:end="45:33"><call pos:start="45:5" pos:end="45:33"><name pos:start="45:5" pos:end="45:10">assert</name><argument_list pos:start="45:11" pos:end="45:33">(<argument pos:start="45:12" pos:end="45:32"><expr pos:start="45:12" pos:end="45:32"><name pos:start="45:12" pos:end="45:27"><name pos:start="45:12" pos:end="45:13">bs</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:27">copy_on_read</name></name> <operator pos:start="45:29" pos:end="45:30">==</operator> <literal type="number" pos:start="45:32" pos:end="45:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="45:36" pos:end="45:79">/* bdrv_new() and bdrv_close() make it so */</comment>
    <if_stmt pos:start="46:5" pos:end="98:15"><if pos:start="46:5" pos:end="98:15">if <condition pos:start="46:8" pos:end="46:36">(<expr pos:start="46:9" pos:end="46:35"><name pos:start="46:9" pos:end="46:13">flags</name> <operator pos:start="46:15" pos:end="46:15">&amp;</operator> <name pos:start="46:17" pos:end="46:35">BDRV_O_COPY_ON_READ</name></expr>)</condition> <block pos:start="46:38" pos:end="98:15">{<block_content pos:start="47:9" pos:end="98:15">
        <if_stmt pos:start="47:9" pos:end="98:15"><if pos:start="47:9" pos:end="49:9">if <condition pos:start="47:12" pos:end="47:27">(<expr pos:start="47:13" pos:end="47:26"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:26"><name pos:start="47:14" pos:end="47:15">bs</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:26">read_only</name></name></expr>)</condition> <block pos:start="47:29" pos:end="49:9">{<block_content pos:start="48:13" pos:end="48:41">
            <expr_stmt pos:start="48:13" pos:end="48:41"><expr pos:start="48:13" pos:end="48:40"><call pos:start="48:13" pos:end="48:40"><name pos:start="48:13" pos:end="48:36">bdrv_enable_copy_on_read</name><argument_list pos:start="48:37" pos:end="48:40">(<argument pos:start="48:38" pos:end="48:39"><expr pos:start="48:38" pos:end="48:39"><name pos:start="48:38" pos:end="48:39">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="49:11" pos:end="98:15">else <block pos:start="49:16" pos:end="98:15">{<block_content pos:start="50:13" pos:end="98:15">
            <expr_stmt pos:start="50:13" pos:end="50:75"><expr pos:start="50:13" pos:end="50:74"><call pos:start="50:13" pos:end="50:74"><name pos:start="50:13" pos:end="50:22">error_setg</name><argument_list pos:start="50:23" pos:end="50:74">(<argument pos:start="50:24" pos:end="50:27"><expr pos:start="50:24" pos:end="50:27"><name pos:start="50:24" pos:end="50:27">errp</name></expr></argument>, <argument pos:start="50:30" pos:end="50:73"><expr pos:start="50:30" pos:end="50:73"><literal type="string" pos:start="50:30" pos:end="50:73">"Can't use copy-on-read on read-only device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="51:13" pos:end="51:27">return <expr pos:start="51:20" pos:end="51:26"><operator pos:start="51:20" pos:end="51:20">-</operator><name pos:start="51:21" pos:end="51:26">EINVAL</name></expr>;</return>
    <if_stmt pos:start="52:5" pos:end="98:15"><if pos:start="52:5" pos:end="54:5">if <condition pos:start="52:8" pos:end="52:25">(<expr pos:start="52:9" pos:end="52:24"><name pos:start="52:9" pos:end="52:16">filename</name> <operator pos:start="52:18" pos:end="52:19">!=</operator> <name pos:start="52:21" pos:end="52:24">NULL</name></expr>)</condition> <block pos:start="52:27" pos:end="54:5">{<block_content pos:start="53:9" pos:end="53:62">
        <expr_stmt pos:start="53:9" pos:end="53:62"><expr pos:start="53:9" pos:end="53:61"><call pos:start="53:9" pos:end="53:61"><name pos:start="53:9" pos:end="53:15">pstrcpy</name><argument_list pos:start="53:16" pos:end="53:61">(<argument pos:start="53:17" pos:end="53:28"><expr pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:18">bs</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:28">filename</name></name></expr></argument>, <argument pos:start="53:31" pos:end="53:50"><expr pos:start="53:31" pos:end="53:50"><sizeof pos:start="53:31" pos:end="53:50">sizeof<argument_list pos:start="53:37" pos:end="53:50">(<argument pos:start="53:38" pos:end="53:49"><expr pos:start="53:38" pos:end="53:49"><name pos:start="53:38" pos:end="53:49"><name pos:start="53:38" pos:end="53:39">bs</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:49">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="53:53" pos:end="53:60"><expr pos:start="53:53" pos:end="53:60"><name pos:start="53:53" pos:end="53:60">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="54:7" pos:end="98:15">else <block pos:start="54:12" pos:end="98:15">{<block_content pos:start="55:9" pos:end="98:15">
        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:10">bs</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:20">filename</name><index pos:start="55:21" pos:end="55:23">[<expr pos:start="55:22" pos:end="55:22"><literal type="number" pos:start="55:22" pos:end="55:22">0</literal></expr>]</index></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <literal type="char" pos:start="55:27" pos:end="55:30">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:74"><expr pos:start="56:5" pos:end="56:73"><call pos:start="56:5" pos:end="56:73"><name pos:start="56:5" pos:end="56:11">pstrcpy</name><argument_list pos:start="56:12" pos:end="56:73">(<argument pos:start="56:13" pos:end="56:30"><expr pos:start="56:13" pos:end="56:30"><name pos:start="56:13" pos:end="56:30"><name pos:start="56:13" pos:end="56:14">bs</name><operator pos:start="56:15" pos:end="56:16">-&gt;</operator><name pos:start="56:17" pos:end="56:30">exact_filename</name></name></expr></argument>, <argument pos:start="56:33" pos:end="56:58"><expr pos:start="56:33" pos:end="56:58"><sizeof pos:start="56:33" pos:end="56:58">sizeof<argument_list pos:start="56:39" pos:end="56:58">(<argument pos:start="56:40" pos:end="56:57"><expr pos:start="56:40" pos:end="56:57"><name pos:start="56:40" pos:end="56:57"><name pos:start="56:40" pos:end="56:41">bs</name><operator pos:start="56:42" pos:end="56:43">-&gt;</operator><name pos:start="56:44" pos:end="56:57">exact_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="56:61" pos:end="56:72"><expr pos:start="56:61" pos:end="56:72"><name pos:start="56:61" pos:end="56:72"><name pos:start="56:61" pos:end="56:62">bs</name><operator pos:start="56:63" pos:end="56:64">-&gt;</operator><name pos:start="56:65" pos:end="56:72">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:18"><expr pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:6">bs</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:11">drv</name></name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:17">drv</name></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:47"><expr pos:start="58:5" pos:end="58:46"><name pos:start="58:5" pos:end="58:14"><name pos:start="58:5" pos:end="58:6">bs</name><operator pos:start="58:7" pos:end="58:8">-&gt;</operator><name pos:start="58:9" pos:end="58:14">opaque</name></name> <operator pos:start="58:16" pos:end="58:16">=</operator> <call pos:start="58:18" pos:end="58:46"><name pos:start="58:18" pos:end="58:26">g_malloc0</name><argument_list pos:start="58:27" pos:end="58:46">(<argument pos:start="58:28" pos:end="58:45"><expr pos:start="58:28" pos:end="58:45"><name pos:start="58:28" pos:end="58:45"><name pos:start="58:28" pos:end="58:30">drv</name><operator pos:start="58:31" pos:end="58:32">-&gt;</operator><name pos:start="58:33" pos:end="58:45">instance_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:57"><expr pos:start="59:5" pos:end="59:56"><name pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:6">bs</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:26">enable_write_cache</name></name> <operator pos:start="59:28" pos:end="59:28">=</operator> <operator pos:start="59:30" pos:end="59:30">!</operator><operator pos:start="59:31" pos:end="59:31">!</operator><operator pos:start="59:32" pos:end="59:32">(</operator><name pos:start="59:33" pos:end="59:37">flags</name> <operator pos:start="59:39" pos:end="59:39">&amp;</operator> <name pos:start="59:41" pos:end="59:55">BDRV_O_CACHE_WB</name><operator pos:start="59:56" pos:end="59:56">)</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="60:5" pos:end="60:61">/* Open the image, either directly or using a protocol */</comment>
    <if_stmt pos:start="61:5" pos:end="98:15"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:28">(<expr pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:11">drv</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:27">bdrv_file_open</name></name></expr>)</condition> <block pos:start="61:30" pos:end="65:5">{<block_content pos:start="62:9" pos:end="64:71">
        <expr_stmt pos:start="62:9" pos:end="62:29"><expr pos:start="62:9" pos:end="62:28"><call pos:start="62:9" pos:end="62:28"><name pos:start="62:9" pos:end="62:14">assert</name><argument_list pos:start="62:15" pos:end="62:28">(<argument pos:start="62:16" pos:end="62:27"><expr pos:start="62:16" pos:end="62:27"><name pos:start="62:16" pos:end="62:19">file</name> <operator pos:start="62:21" pos:end="62:22">==</operator> <name pos:start="62:24" pos:end="62:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="63:9" pos:end="63:62"><expr pos:start="63:9" pos:end="63:61"><call pos:start="63:9" pos:end="63:61"><name pos:start="63:9" pos:end="63:14">assert</name><argument_list pos:start="63:15" pos:end="63:61">(<argument pos:start="63:16" pos:end="63:60"><expr pos:start="63:16" pos:end="63:60"><operator pos:start="63:16" pos:end="63:16">!</operator><name pos:start="63:17" pos:end="63:40"><name pos:start="63:17" pos:end="63:19">drv</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:40">bdrv_needs_filename</name></name> <operator pos:start="63:42" pos:end="63:43">||</operator> <name pos:start="63:45" pos:end="63:52">filename</name> <operator pos:start="63:54" pos:end="63:55">!=</operator> <name pos:start="63:57" pos:end="63:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="64:9" pos:end="64:71"><expr pos:start="64:9" pos:end="64:70"><name pos:start="64:9" pos:end="64:11">ret</name> <operator pos:start="64:13" pos:end="64:13">=</operator> <call pos:start="64:15" pos:end="64:70"><name pos:start="64:15" pos:end="64:33"><name pos:start="64:15" pos:end="64:17">drv</name><operator pos:start="64:18" pos:end="64:19">-&gt;</operator><name pos:start="64:20" pos:end="64:33">bdrv_file_open</name></name><argument_list pos:start="64:34" pos:end="64:70">(<argument pos:start="64:35" pos:end="64:36"><expr pos:start="64:35" pos:end="64:36"><name pos:start="64:35" pos:end="64:36">bs</name></expr></argument>, <argument pos:start="64:39" pos:end="64:45"><expr pos:start="64:39" pos:end="64:45"><name pos:start="64:39" pos:end="64:45">options</name></expr></argument>, <argument pos:start="64:48" pos:end="64:57"><expr pos:start="64:48" pos:end="64:57"><name pos:start="64:48" pos:end="64:57">open_flags</name></expr></argument>, <argument pos:start="64:60" pos:end="64:69"><expr pos:start="64:60" pos:end="64:69"><operator pos:start="64:60" pos:end="64:60">&amp;</operator><name pos:start="64:61" pos:end="64:69">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="65:7" pos:end="98:15">else <block pos:start="65:12" pos:end="98:15">{<block_content pos:start="66:9" pos:end="98:15">
        <if_stmt pos:start="66:9" pos:end="98:15"><if pos:start="66:9" pos:end="98:15">if <condition pos:start="66:12" pos:end="66:25">(<expr pos:start="66:13" pos:end="66:24"><name pos:start="66:13" pos:end="66:16">file</name> <operator pos:start="66:18" pos:end="66:19">==</operator> <name pos:start="66:21" pos:end="66:24">NULL</name></expr>)</condition> <block pos:start="66:27" pos:end="98:15">{<block_content pos:start="67:13" pos:end="98:15">
            <expr_stmt pos:start="67:13" pos:end="68:59"><expr pos:start="67:13" pos:end="68:58"><call pos:start="67:13" pos:end="68:58"><name pos:start="67:13" pos:end="67:22">error_setg</name><argument_list pos:start="67:23" pos:end="68:58">(<argument pos:start="67:24" pos:end="67:27"><expr pos:start="67:24" pos:end="67:27"><name pos:start="67:24" pos:end="67:27">errp</name></expr></argument>, <argument pos:start="67:30" pos:end="68:39"><expr pos:start="67:30" pos:end="68:39"><literal type="string" pos:start="67:30" pos:end="67:72">"Can't use '%s' as a block driver for the "</literal>
                       <literal type="string" pos:start="68:24" pos:end="68:39">"protocol level"</literal></expr></argument>, <argument pos:start="68:42" pos:end="68:57"><expr pos:start="68:42" pos:end="68:57"><name pos:start="68:42" pos:end="68:57"><name pos:start="68:42" pos:end="68:44">drv</name><operator pos:start="68:45" pos:end="68:46">-&gt;</operator><name pos:start="68:47" pos:end="68:57">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:26"><expr pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <operator pos:start="69:19" pos:end="69:19">-</operator><name pos:start="69:20" pos:end="69:25">EINVAL</name></expr>;</expr_stmt>
            <goto pos:start="70:13" pos:end="70:31">goto <name pos:start="70:18" pos:end="70:30">free_and_fail</name>;</goto>
        <expr_stmt pos:start="71:9" pos:end="71:24"><expr pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:10">bs</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:16">file</name></name> <operator pos:start="71:18" pos:end="71:18">=</operator> <name pos:start="71:20" pos:end="71:23">file</name></expr>;</expr_stmt>
        <expr_stmt pos:start="72:9" pos:end="72:66"><expr pos:start="72:9" pos:end="72:65"><name pos:start="72:9" pos:end="72:11">ret</name> <operator pos:start="72:13" pos:end="72:13">=</operator> <call pos:start="72:15" pos:end="72:65"><name pos:start="72:15" pos:end="72:28"><name pos:start="72:15" pos:end="72:17">drv</name><operator pos:start="72:18" pos:end="72:19">-&gt;</operator><name pos:start="72:20" pos:end="72:28">bdrv_open</name></name><argument_list pos:start="72:29" pos:end="72:65">(<argument pos:start="72:30" pos:end="72:31"><expr pos:start="72:30" pos:end="72:31"><name pos:start="72:30" pos:end="72:31">bs</name></expr></argument>, <argument pos:start="72:34" pos:end="72:40"><expr pos:start="72:34" pos:end="72:40"><name pos:start="72:34" pos:end="72:40">options</name></expr></argument>, <argument pos:start="72:43" pos:end="72:52"><expr pos:start="72:43" pos:end="72:52"><name pos:start="72:43" pos:end="72:52">open_flags</name></expr></argument>, <argument pos:start="72:55" pos:end="72:64"><expr pos:start="72:55" pos:end="72:64"><operator pos:start="72:55" pos:end="72:55">&amp;</operator><name pos:start="72:56" pos:end="72:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="73:5" pos:end="98:15"><if pos:start="73:5" pos:end="98:15">if <condition pos:start="73:8" pos:end="73:16">(<expr pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">&lt;</operator> <literal type="number" pos:start="73:15" pos:end="73:15">0</literal></expr>)</condition> <block pos:start="73:18" pos:end="98:15">{<block_content pos:start="74:9" pos:end="98:15">
        <if_stmt pos:start="74:9" pos:end="98:15"><if pos:start="74:9" pos:end="76:9">if <condition pos:start="74:12" pos:end="74:22">(<expr pos:start="74:13" pos:end="74:21"><name pos:start="74:13" pos:end="74:21">local_err</name></expr>)</condition> <block pos:start="74:24" pos:end="76:9">{<block_content pos:start="75:13" pos:end="75:45">
            <expr_stmt pos:start="75:13" pos:end="75:45"><expr pos:start="75:13" pos:end="75:44"><call pos:start="75:13" pos:end="75:44"><name pos:start="75:13" pos:end="75:27">error_propagate</name><argument_list pos:start="75:28" pos:end="75:44">(<argument pos:start="75:29" pos:end="75:32"><expr pos:start="75:29" pos:end="75:32"><name pos:start="75:29" pos:end="75:32">errp</name></expr></argument>, <argument pos:start="75:35" pos:end="75:43"><expr pos:start="75:35" pos:end="75:43"><name pos:start="75:35" pos:end="75:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="76:11" pos:end="78:9">else if <condition pos:start="76:19" pos:end="76:35">(<expr pos:start="76:20" pos:end="76:34"><name pos:start="76:20" pos:end="76:34"><name pos:start="76:20" pos:end="76:21">bs</name><operator pos:start="76:22" pos:end="76:23">-&gt;</operator><name pos:start="76:24" pos:end="76:31">filename</name><index pos:start="76:32" pos:end="76:34">[<expr pos:start="76:33" pos:end="76:33"><literal type="number" pos:start="76:33" pos:end="76:33">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="76:37" pos:end="78:9">{<block_content pos:start="77:13" pos:end="77:78">
            <expr_stmt pos:start="77:13" pos:end="77:78"><expr pos:start="77:13" pos:end="77:77"><call pos:start="77:13" pos:end="77:77"><name pos:start="77:13" pos:end="77:28">error_setg_errno</name><argument_list pos:start="77:29" pos:end="77:77">(<argument pos:start="77:30" pos:end="77:33"><expr pos:start="77:30" pos:end="77:33"><name pos:start="77:30" pos:end="77:33">errp</name></expr></argument>, <argument pos:start="77:36" pos:end="77:39"><expr pos:start="77:36" pos:end="77:39"><operator pos:start="77:36" pos:end="77:36">-</operator><name pos:start="77:37" pos:end="77:39">ret</name></expr></argument>, <argument pos:start="77:42" pos:end="77:62"><expr pos:start="77:42" pos:end="77:62"><literal type="string" pos:start="77:42" pos:end="77:62">"Could not open '%s'"</literal></expr></argument>, <argument pos:start="77:65" pos:end="77:76"><expr pos:start="77:65" pos:end="77:76"><name pos:start="77:65" pos:end="77:76"><name pos:start="77:65" pos:end="77:66">bs</name><operator pos:start="77:67" pos:end="77:68">-&gt;</operator><name pos:start="77:69" pos:end="77:76">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="78:11" pos:end="98:15">else <block pos:start="78:16" pos:end="98:15">{<block_content pos:start="79:13" pos:end="98:15">
            <expr_stmt pos:start="79:13" pos:end="79:65"><expr pos:start="79:13" pos:end="79:64"><call pos:start="79:13" pos:end="79:64"><name pos:start="79:13" pos:end="79:28">error_setg_errno</name><argument_list pos:start="79:29" pos:end="79:64">(<argument pos:start="79:30" pos:end="79:33"><expr pos:start="79:30" pos:end="79:33"><name pos:start="79:30" pos:end="79:33">errp</name></expr></argument>, <argument pos:start="79:36" pos:end="79:39"><expr pos:start="79:36" pos:end="79:39"><operator pos:start="79:36" pos:end="79:36">-</operator><name pos:start="79:37" pos:end="79:39">ret</name></expr></argument>, <argument pos:start="79:42" pos:end="79:63"><expr pos:start="79:42" pos:end="79:63"><literal type="string" pos:start="79:42" pos:end="79:63">"Could not open image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="80:9" pos:end="80:27">goto <name pos:start="80:14" pos:end="80:26">free_and_fail</name>;</goto>
    <expr_stmt pos:start="81:5" pos:end="81:55"><expr pos:start="81:5" pos:end="81:54"><name pos:start="81:5" pos:end="81:7">ret</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:54"><name pos:start="81:11" pos:end="81:31">refresh_total_sectors</name><argument_list pos:start="81:32" pos:end="81:54">(<argument pos:start="81:33" pos:end="81:34"><expr pos:start="81:33" pos:end="81:34"><name pos:start="81:33" pos:end="81:34">bs</name></expr></argument>, <argument pos:start="81:37" pos:end="81:53"><expr pos:start="81:37" pos:end="81:53"><name pos:start="81:37" pos:end="81:53"><name pos:start="81:37" pos:end="81:38">bs</name><operator pos:start="81:39" pos:end="81:40">-&gt;</operator><name pos:start="81:41" pos:end="81:53">total_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="82:5" pos:end="98:15"><if pos:start="82:5" pos:end="98:15">if <condition pos:start="82:8" pos:end="82:16">(<expr pos:start="82:9" pos:end="82:15"><name pos:start="82:9" pos:end="82:11">ret</name> <operator pos:start="82:13" pos:end="82:13">&lt;</operator> <literal type="number" pos:start="82:15" pos:end="82:15">0</literal></expr>)</condition> <block pos:start="82:18" pos:end="98:15">{<block_content pos:start="83:9" pos:end="98:15">
        <expr_stmt pos:start="83:9" pos:end="83:77"><expr pos:start="83:9" pos:end="83:76"><call pos:start="83:9" pos:end="83:76"><name pos:start="83:9" pos:end="83:24">error_setg_errno</name><argument_list pos:start="83:25" pos:end="83:76">(<argument pos:start="83:26" pos:end="83:29"><expr pos:start="83:26" pos:end="83:29"><name pos:start="83:26" pos:end="83:29">errp</name></expr></argument>, <argument pos:start="83:32" pos:end="83:35"><expr pos:start="83:32" pos:end="83:35"><operator pos:start="83:32" pos:end="83:32">-</operator><name pos:start="83:33" pos:end="83:35">ret</name></expr></argument>, <argument pos:start="83:38" pos:end="83:75"><expr pos:start="83:38" pos:end="83:75"><literal type="string" pos:start="83:38" pos:end="83:75">"Could not refresh total sector count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="84:9" pos:end="84:27">goto <name pos:start="84:14" pos:end="84:26">free_and_fail</name>;</goto>
    <expr_stmt pos:start="85:5" pos:end="85:40"><expr pos:start="85:5" pos:end="85:39"><call pos:start="85:5" pos:end="85:39"><name pos:start="85:5" pos:end="85:23">bdrv_refresh_limits</name><argument_list pos:start="85:24" pos:end="85:39">(<argument pos:start="85:25" pos:end="85:26"><expr pos:start="85:25" pos:end="85:26"><name pos:start="85:25" pos:end="85:26">bs</name></expr></argument>, <argument pos:start="85:29" pos:end="85:38"><expr pos:start="85:29" pos:end="85:38"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="86:5" pos:end="98:15"><if pos:start="86:5" pos:end="98:15">if <condition pos:start="86:8" pos:end="86:18">(<expr pos:start="86:9" pos:end="86:17"><name pos:start="86:9" pos:end="86:17">local_err</name></expr>)</condition> <block pos:start="86:20" pos:end="98:15">{<block_content pos:start="87:9" pos:end="98:15">
        <expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><call pos:start="87:9" pos:end="87:40"><name pos:start="87:9" pos:end="87:23">error_propagate</name><argument_list pos:start="87:24" pos:end="87:40">(<argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><name pos:start="87:25" pos:end="87:28">errp</name></expr></argument>, <argument pos:start="87:31" pos:end="87:39"><expr pos:start="87:31" pos:end="87:39"><name pos:start="87:31" pos:end="87:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="88:9" pos:end="88:22"><expr pos:start="88:9" pos:end="88:21"><name pos:start="88:9" pos:end="88:11">ret</name> <operator pos:start="88:13" pos:end="88:13">=</operator> <operator pos:start="88:15" pos:end="88:15">-</operator><name pos:start="88:16" pos:end="88:21">EINVAL</name></expr>;</expr_stmt>
        <goto pos:start="89:9" pos:end="89:27">goto <name pos:start="89:14" pos:end="89:26">free_and_fail</name>;</goto>
    <expr_stmt pos:start="90:5" pos:end="90:40"><expr pos:start="90:5" pos:end="90:39"><call pos:start="90:5" pos:end="90:39"><name pos:start="90:5" pos:end="90:10">assert</name><argument_list pos:start="90:11" pos:end="90:39">(<argument pos:start="90:12" pos:end="90:38"><expr pos:start="90:12" pos:end="90:38"><call pos:start="90:12" pos:end="90:33"><name pos:start="90:12" pos:end="90:29">bdrv_opt_mem_align</name><argument_list pos:start="90:30" pos:end="90:33">(<argument pos:start="90:31" pos:end="90:32"><expr pos:start="90:31" pos:end="90:32"><name pos:start="90:31" pos:end="90:32">bs</name></expr></argument>)</argument_list></call> <operator pos:start="90:35" pos:end="90:36">!=</operator> <literal type="number" pos:start="90:38" pos:end="90:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:51"><expr pos:start="91:5" pos:end="91:50"><call pos:start="91:5" pos:end="91:50"><name pos:start="91:5" pos:end="91:10">assert</name><argument_list pos:start="91:11" pos:end="91:50">(<argument pos:start="91:12" pos:end="91:49"><expr pos:start="91:12" pos:end="91:49"><operator pos:start="91:12" pos:end="91:12">(</operator><name pos:start="91:13" pos:end="91:33"><name pos:start="91:13" pos:end="91:14">bs</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:33">request_alignment</name></name> <operator pos:start="91:35" pos:end="91:36">!=</operator> <literal type="number" pos:start="91:38" pos:end="91:38">0</literal><operator pos:start="91:39" pos:end="91:39">)</operator> <operator pos:start="91:41" pos:end="91:42">||</operator> <name pos:start="91:44" pos:end="91:49"><name pos:start="91:44" pos:end="91:45">bs</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:49">sg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="92:5" pos:end="92:13">return <expr pos:start="92:12" pos:end="92:12"><literal type="number" pos:start="92:12" pos:end="92:12">0</literal></expr>;</return>
<label pos:start="93:1" pos:end="93:14"><name pos:start="93:1" pos:end="93:13">free_and_fail</name>:</label>
    <expr_stmt pos:start="94:5" pos:end="94:20"><expr pos:start="94:5" pos:end="94:19"><name pos:start="94:5" pos:end="94:12"><name pos:start="94:5" pos:end="94:6">bs</name><operator pos:start="94:7" pos:end="94:8">-&gt;</operator><name pos:start="94:9" pos:end="94:12">file</name></name> <operator pos:start="94:14" pos:end="94:14">=</operator> <name pos:start="94:16" pos:end="94:19">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:23"><expr pos:start="95:5" pos:end="95:22"><call pos:start="95:5" pos:end="95:22"><name pos:start="95:5" pos:end="95:10">g_free</name><argument_list pos:start="95:11" pos:end="95:22">(<argument pos:start="95:12" pos:end="95:21"><expr pos:start="95:12" pos:end="95:21"><name pos:start="95:12" pos:end="95:21"><name pos:start="95:12" pos:end="95:13">bs</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:21">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="96:5" pos:end="96:22"><expr pos:start="96:5" pos:end="96:21"><name pos:start="96:5" pos:end="96:14"><name pos:start="96:5" pos:end="96:6">bs</name><operator pos:start="96:7" pos:end="96:8">-&gt;</operator><name pos:start="96:9" pos:end="96:14">opaque</name></name> <operator pos:start="96:16" pos:end="96:16">=</operator> <name pos:start="96:18" pos:end="96:21">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="97:5" pos:end="97:19"><expr pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:11"><name pos:start="97:5" pos:end="97:6">bs</name><operator pos:start="97:7" pos:end="97:8">-&gt;</operator><name pos:start="97:9" pos:end="97:11">drv</name></name> <operator pos:start="97:13" pos:end="97:13">=</operator> <name pos:start="97:15" pos:end="97:18">NULL</name></expr>;</expr_stmt>
    <return pos:start="98:5" pos:end="98:15">return <expr pos:start="98:12" pos:end="98:14"><name pos:start="98:12" pos:end="98:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></function></unit>
