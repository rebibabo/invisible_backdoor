<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26718.c" pos:tabs="8"><function pos:start="1:1" pos:end="76:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">ehci_fill_queue</name><parameter_list pos:start="1:27" pos:end="1:41">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:37">EHCIPacket</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="76:13">{<block_content pos:start="5:5" pos:end="76:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">USBEndpoint</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">ep</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">p</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:31">packet</name><operator pos:start="5:32" pos:end="5:32">.</operator><name pos:start="5:33" pos:end="5:34">ep</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">EHCIQueue</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">q</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:20">p</name><operator pos:start="7:21" pos:end="7:22">-&gt;</operator><name pos:start="7:23" pos:end="7:27">queue</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">EHCIqtd</name></type> <name pos:start="9:13" pos:end="9:15">qtd</name> <init pos:start="9:17" pos:end="9:24">= <expr pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:19">p</name><operator pos:start="9:20" pos:end="9:21">-&gt;</operator><name pos:start="9:22" pos:end="9:24">qtd</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">qtdaddr</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="76:13">for <control pos:start="15:9" pos:end="15:12">(<init pos:start="15:10" pos:end="15:10">;</init><condition pos:start="15:11" pos:end="15:11">;</condition><incr/>)</control> <block pos:start="15:14" pos:end="76:13">{<block_content pos:start="17:9" pos:end="76:13">

        <if_stmt pos:start="17:9" pos:end="76:13"><if pos:start="17:9" pos:end="76:13">if <condition pos:start="17:12" pos:end="17:38">(<expr pos:start="17:13" pos:end="17:37"><call pos:start="17:13" pos:end="17:32"><name pos:start="17:13" pos:end="17:22">NLPTR_TBIT</name><argument_list pos:start="17:23" pos:end="17:32">(<argument pos:start="17:24" pos:end="17:31"><expr pos:start="17:24" pos:end="17:31"><name pos:start="17:24" pos:end="17:31"><name pos:start="17:24" pos:end="17:26">qtd</name><operator pos:start="17:27" pos:end="17:27">.</operator><name pos:start="17:28" pos:end="17:31">next</name></name></expr></argument>)</argument_list></call> <operator pos:start="17:34" pos:end="17:35">!=</operator> <literal type="number" pos:start="17:37" pos:end="17:37">0</literal></expr>)</condition> <block pos:start="17:40" pos:end="76:13">{<block_content pos:start="21:9" pos:end="76:13">



        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:15">qtdaddr</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:26"><name pos:start="21:19" pos:end="21:21">qtd</name><operator pos:start="21:22" pos:end="21:22">.</operator><name pos:start="21:23" pos:end="21:26">next</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="23:9" pos:end="29:11">/*

         * Detect circular td lists, Windows creates these, counting on the

         * active bit going low after execution to make the queue stop.

         */</comment>

        <macro pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:22">QTAILQ_FOREACH</name><argument_list pos:start="31:23" pos:end="31:44">(<argument pos:start="31:24" pos:end="31:24">p</argument>, <argument pos:start="31:27" pos:end="31:37">&amp;q-&gt;packets</argument>, <argument pos:start="31:40" pos:end="31:43">next</argument>)</argument_list></macro> <block pos:start="31:46" pos:end="76:13">{<block_content pos:start="33:13" pos:end="76:13">

            <if_stmt pos:start="33:13" pos:end="76:13"><if pos:start="33:13" pos:end="76:13">if <condition pos:start="33:16" pos:end="33:38">(<expr pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:26"><name pos:start="33:17" pos:end="33:17">p</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:26">qtdaddr</name></name> <operator pos:start="33:28" pos:end="33:29">==</operator> <name pos:start="33:31" pos:end="33:37">qtdaddr</name></expr>)</condition> <block pos:start="33:40" pos:end="76:13">{<block_content pos:start="35:17" pos:end="76:13">

                <goto pos:start="35:17" pos:end="35:27">goto <name pos:start="35:22" pos:end="35:26">leave</name>;</goto>



        <if_stmt pos:start="39:9" pos:end="76:13"><if pos:start="39:9" pos:end="76:13">if <condition pos:start="39:12" pos:end="41:68">(<expr pos:start="39:13" pos:end="41:67"><call pos:start="39:13" pos:end="41:63"><name pos:start="39:13" pos:end="39:22">get_dwords</name><argument_list pos:start="39:23" pos:end="41:63">(<argument pos:start="39:24" pos:end="39:30"><expr pos:start="39:24" pos:end="39:30"><name pos:start="39:24" pos:end="39:30"><name pos:start="39:24" pos:end="39:24">q</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:30">ehci</name></name></expr></argument>, <argument pos:start="39:33" pos:end="39:50"><expr pos:start="39:33" pos:end="39:50"><call pos:start="39:33" pos:end="39:50"><name pos:start="39:33" pos:end="39:41">NLPTR_GET</name><argument_list pos:start="39:42" pos:end="39:50">(<argument pos:start="39:43" pos:end="39:49"><expr pos:start="39:43" pos:end="39:49"><name pos:start="39:43" pos:end="39:49">qtdaddr</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:40"><expr pos:start="41:24" pos:end="41:40"><operator pos:start="41:24" pos:end="41:24">(</operator><name pos:start="41:25" pos:end="41:32">uint32_t</name> <operator pos:start="41:34" pos:end="41:34">*</operator><operator pos:start="41:35" pos:end="41:35">)</operator> <operator pos:start="41:37" pos:end="41:37">&amp;</operator><name pos:start="41:38" pos:end="41:40">qtd</name></expr></argument>, <argument pos:start="41:43" pos:end="41:62"><expr pos:start="41:43" pos:end="41:62"><sizeof pos:start="41:43" pos:end="41:57">sizeof<argument_list pos:start="41:49" pos:end="41:57">(<argument pos:start="41:50" pos:end="41:56"><expr pos:start="41:50" pos:end="41:56"><name pos:start="41:50" pos:end="41:56">EHCIqtd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="41:59" pos:end="41:60">&gt;&gt;</operator> <literal type="number" pos:start="41:62" pos:end="41:62">2</literal></expr></argument>)</argument_list></call> <operator pos:start="41:65" pos:end="41:65">&lt;</operator> <literal type="number" pos:start="41:67" pos:end="41:67">0</literal></expr>)</condition> <block pos:start="41:70" pos:end="76:13">{<block_content pos:start="43:13" pos:end="76:13">

            <return pos:start="43:13" pos:end="43:22">return <expr pos:start="43:20" pos:end="43:21"><operator pos:start="43:20" pos:end="43:20">-</operator><literal type="number" pos:start="43:21" pos:end="43:21">1</literal></expr>;</return>


        <expr_stmt pos:start="46:9" pos:end="46:52"><expr pos:start="46:9" pos:end="46:51"><call pos:start="46:9" pos:end="46:51"><name pos:start="46:9" pos:end="46:22">ehci_trace_qtd</name><argument_list pos:start="46:23" pos:end="46:51">(<argument pos:start="46:24" pos:end="46:24"><expr pos:start="46:24" pos:end="46:24"><name pos:start="46:24" pos:end="46:24">q</name></expr></argument>, <argument pos:start="46:27" pos:end="46:44"><expr pos:start="46:27" pos:end="46:44"><call pos:start="46:27" pos:end="46:44"><name pos:start="46:27" pos:end="46:35">NLPTR_GET</name><argument_list pos:start="46:36" pos:end="46:44">(<argument pos:start="46:37" pos:end="46:43"><expr pos:start="46:37" pos:end="46:43"><name pos:start="46:37" pos:end="46:43">qtdaddr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="46:47" pos:end="46:50"><expr pos:start="46:47" pos:end="46:50"><operator pos:start="46:47" pos:end="46:47">&amp;</operator><name pos:start="46:48" pos:end="46:50">qtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="48:9" pos:end="76:13"><if pos:start="48:9" pos:end="76:13">if <condition pos:start="48:12" pos:end="48:44">(<expr pos:start="48:13" pos:end="48:43"><operator pos:start="48:13" pos:end="48:13">!</operator><operator pos:start="48:14" pos:end="48:14">(</operator><name pos:start="48:15" pos:end="48:23"><name pos:start="48:15" pos:end="48:17">qtd</name><operator pos:start="48:18" pos:end="48:18">.</operator><name pos:start="48:19" pos:end="48:23">token</name></name> <operator pos:start="48:25" pos:end="48:25">&amp;</operator> <name pos:start="48:27" pos:end="48:42">QTD_TOKEN_ACTIVE</name><operator pos:start="48:43" pos:end="48:43">)</operator></expr>)</condition> <block pos:start="48:46" pos:end="76:13">{<block_content pos:start="56:9" pos:end="76:13">







        <expr_stmt pos:start="56:9" pos:end="56:33"><expr pos:start="56:9" pos:end="56:32"><name pos:start="56:9" pos:end="56:9">p</name> <operator pos:start="56:11" pos:end="56:11">=</operator> <call pos:start="56:13" pos:end="56:32"><name pos:start="56:13" pos:end="56:29">ehci_alloc_packet</name><argument_list pos:start="56:30" pos:end="56:32">(<argument pos:start="56:31" pos:end="56:31"><expr pos:start="56:31" pos:end="56:31"><name pos:start="56:31" pos:end="56:31">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="58:9" pos:end="58:29"><expr pos:start="58:9" pos:end="58:28"><name pos:start="58:9" pos:end="58:18"><name pos:start="58:9" pos:end="58:9">p</name><operator pos:start="58:10" pos:end="58:11">-&gt;</operator><name pos:start="58:12" pos:end="58:18">qtdaddr</name></name> <operator pos:start="58:20" pos:end="58:20">=</operator> <name pos:start="58:22" pos:end="58:28">qtdaddr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="60:9" pos:end="60:21"><expr pos:start="60:9" pos:end="60:20"><name pos:start="60:9" pos:end="60:14"><name pos:start="60:9" pos:end="60:9">p</name><operator pos:start="60:10" pos:end="60:11">-&gt;</operator><name pos:start="60:12" pos:end="60:14">qtd</name></name> <operator pos:start="60:16" pos:end="60:16">=</operator> <name pos:start="60:18" pos:end="60:20">qtd</name></expr>;</expr_stmt>

        <if_stmt pos:start="62:9" pos:end="76:13"><if pos:start="62:9" pos:end="76:13">if <condition pos:start="62:12" pos:end="62:43">(<expr pos:start="62:13" pos:end="62:42"><call pos:start="62:13" pos:end="62:36"><name pos:start="62:13" pos:end="62:24">ehci_execute</name><argument_list pos:start="62:25" pos:end="62:36">(<argument pos:start="62:26" pos:end="62:26"><expr pos:start="62:26" pos:end="62:26"><name pos:start="62:26" pos:end="62:26">p</name></expr></argument>, <argument pos:start="62:29" pos:end="62:35"><expr pos:start="62:29" pos:end="62:35"><literal type="string" pos:start="62:29" pos:end="62:35">"queue"</literal></expr></argument>)</argument_list></call> <operator pos:start="62:38" pos:end="62:39">==</operator> <operator pos:start="62:41" pos:end="62:41">-</operator><literal type="number" pos:start="62:42" pos:end="62:42">1</literal></expr>)</condition> <block pos:start="62:45" pos:end="76:13">{<block_content pos:start="64:13" pos:end="76:13">

            <return pos:start="64:13" pos:end="64:22">return <expr pos:start="64:20" pos:end="64:21"><operator pos:start="64:20" pos:end="64:20">-</operator><literal type="number" pos:start="64:21" pos:end="64:21">1</literal></expr>;</return>


        <expr_stmt pos:start="67:9" pos:end="67:50"><expr pos:start="67:9" pos:end="67:49"><call pos:start="67:9" pos:end="67:49"><name pos:start="67:9" pos:end="67:14">assert</name><argument_list pos:start="67:15" pos:end="67:49">(<argument pos:start="67:16" pos:end="67:48"><expr pos:start="67:16" pos:end="67:48"><name pos:start="67:16" pos:end="67:31"><name pos:start="67:16" pos:end="67:16">p</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:24">packet</name><operator pos:start="67:25" pos:end="67:25">.</operator><name pos:start="67:26" pos:end="67:31">status</name></name> <operator pos:start="67:33" pos:end="67:34">==</operator> <name pos:start="67:36" pos:end="67:48">USB_RET_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:9">p</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:16">async</name></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:38">EHCI_ASYNC_INFLIGHT</name></expr>;</expr_stmt>


<label pos:start="72:1" pos:end="72:6"><name pos:start="72:1" pos:end="72:5">leave</name>:</label>

    <expr_stmt pos:start="74:5" pos:end="74:43"><expr pos:start="74:5" pos:end="74:42"><call pos:start="74:5" pos:end="74:42"><name pos:start="74:5" pos:end="74:29">usb_device_flush_ep_queue</name><argument_list pos:start="74:30" pos:end="74:42">(<argument pos:start="74:31" pos:end="74:37"><expr pos:start="74:31" pos:end="74:37"><name pos:start="74:31" pos:end="74:37"><name pos:start="74:31" pos:end="74:32">ep</name><operator pos:start="74:33" pos:end="74:34">-&gt;</operator><name pos:start="74:35" pos:end="74:37">dev</name></name></expr></argument>, <argument pos:start="74:40" pos:end="74:41"><expr pos:start="74:40" pos:end="74:41"><name pos:start="74:40" pos:end="74:41">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="76:5" pos:end="76:13">return <expr pos:start="76:12" pos:end="76:12"><literal type="number" pos:start="76:12" pos:end="76:12">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function>
</unit>
