<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19844.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">s390_ipl_init</name><parameter_list pos:start="1:25" pos:end="1:43">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:39"><name pos:start="1:26" pos:end="1:37">SysBusDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="163:1">{<block_content pos:start="5:5" pos:end="161:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">S390IPLState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">ipl</name> <init pos:start="5:23" pos:end="5:37">= <expr pos:start="5:25" pos:end="5:37"><call pos:start="5:25" pos:end="5:37"><name pos:start="5:25" pos:end="5:32">S390_IPL</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">kernel_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="119:5"><if pos:start="11:5" pos:end="71:5">if <condition pos:start="11:8" pos:end="11:21">(<expr pos:start="11:9" pos:end="11:20"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:20"><name pos:start="11:10" pos:end="11:12">ipl</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:20">kernel</name></name></expr>)</condition> <block pos:start="11:23" pos:end="71:5">{<block_content pos:start="13:9" pos:end="69:17">

        <decl_stmt pos:start="13:9" pos:end="13:22"><decl pos:start="13:9" pos:end="13:21"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:21">bios_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:28"><decl pos:start="15:9" pos:end="15:27"><type pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:12">char</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:27">bios_filename</name></decl>;</decl_stmt>



        <comment type="block" pos:start="19:9" pos:end="19:34">/* Load zipl bootloader */</comment>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:30">(<expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:21">bios_name</name> <operator pos:start="21:23" pos:end="21:24">==</operator> <name pos:start="21:26" pos:end="21:29">NULL</name></expr>)</condition> <block pos:start="21:32" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:38">

            <expr_stmt pos:start="23:13" pos:end="23:38"><expr pos:start="23:13" pos:end="23:37"><name pos:start="23:13" pos:end="23:21">bios_name</name> <operator pos:start="23:23" pos:end="23:23">=</operator> <name pos:start="23:25" pos:end="23:37"><name pos:start="23:25" pos:end="23:27">ipl</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:37">firmware</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:71"><expr pos:start="29:9" pos:end="29:70"><name pos:start="29:9" pos:end="29:21">bios_filename</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <call pos:start="29:25" pos:end="29:70"><name pos:start="29:25" pos:end="29:38">qemu_find_file</name><argument_list pos:start="29:39" pos:end="29:70">(<argument pos:start="29:40" pos:end="29:58"><expr pos:start="29:40" pos:end="29:58"><name pos:start="29:40" pos:end="29:58">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="29:61" pos:end="29:69"><expr pos:start="29:61" pos:end="29:69"><name pos:start="29:61" pos:end="29:69">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:34">(<expr pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:25">bios_filename</name> <operator pos:start="31:27" pos:end="31:28">==</operator> <name pos:start="31:30" pos:end="31:33">NULL</name></expr>)</condition> <block pos:start="31:36" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:59">

            <expr_stmt pos:start="33:13" pos:end="33:59"><expr pos:start="33:13" pos:end="33:58"><call pos:start="33:13" pos:end="33:58"><name pos:start="33:13" pos:end="33:20">hw_error</name><argument_list pos:start="33:21" pos:end="33:58">(<argument pos:start="33:22" pos:end="33:57"><expr pos:start="33:22" pos:end="33:57"><literal type="string" pos:start="33:22" pos:end="33:57">"could not find stage1 bootloader\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="41:54"><expr pos:start="39:9" pos:end="41:53"><name pos:start="39:9" pos:end="39:17">bios_size</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <call pos:start="39:21" pos:end="41:53"><name pos:start="39:21" pos:end="39:28">load_elf</name><argument_list pos:start="39:29" pos:end="41:53">(<argument pos:start="39:30" pos:end="39:42"><expr pos:start="39:30" pos:end="39:42"><name pos:start="39:30" pos:end="39:42">bios_filename</name></expr></argument>, <argument pos:start="39:45" pos:end="39:48"><expr pos:start="39:45" pos:end="39:48"><name pos:start="39:45" pos:end="39:48">NULL</name></expr></argument>, <argument pos:start="39:51" pos:end="39:54"><expr pos:start="39:51" pos:end="39:54"><name pos:start="39:51" pos:end="39:54">NULL</name></expr></argument>, <argument pos:start="39:57" pos:end="39:72"><expr pos:start="39:57" pos:end="39:72"><operator pos:start="39:57" pos:end="39:57">&amp;</operator><name pos:start="39:58" pos:end="39:72"><name pos:start="39:58" pos:end="39:60">ipl</name><operator pos:start="39:61" pos:end="39:62">-&gt;</operator><name pos:start="39:63" pos:end="39:72">start_addr</name></name></expr></argument>, <argument pos:start="39:75" pos:end="39:78"><expr pos:start="39:75" pos:end="39:78"><name pos:start="39:75" pos:end="39:78">NULL</name></expr></argument>,

                             <argument pos:start="41:30" pos:end="41:33"><expr pos:start="41:30" pos:end="41:33"><name pos:start="41:30" pos:end="41:33">NULL</name></expr></argument>, <argument pos:start="41:36" pos:end="41:36"><expr pos:start="41:36" pos:end="41:36"><literal type="number" pos:start="41:36" pos:end="41:36">1</literal></expr></argument>, <argument pos:start="41:39" pos:end="41:49"><expr pos:start="41:39" pos:end="41:49"><name pos:start="41:39" pos:end="41:49">ELF_MACHINE</name></expr></argument>, <argument pos:start="41:52" pos:end="41:52"><expr pos:start="41:52" pos:end="41:52"><literal type="number" pos:start="41:52" pos:end="41:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="57:9"><if pos:start="43:9" pos:end="57:9">if <condition pos:start="43:12" pos:end="43:28">(<expr pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:21">bios_size</name> <operator pos:start="43:23" pos:end="43:24">==</operator> <operator pos:start="43:26" pos:end="43:26">-</operator><literal type="number" pos:start="43:27" pos:end="43:27">1</literal></expr>)</condition> <block pos:start="43:30" pos:end="57:9">{<block_content pos:start="45:13" pos:end="55:13">

            <expr_stmt pos:start="45:13" pos:end="47:50"><expr pos:start="45:13" pos:end="47:49"><name pos:start="45:13" pos:end="45:21">bios_size</name> <operator pos:start="45:23" pos:end="45:23">=</operator> <call pos:start="45:25" pos:end="47:49"><name pos:start="45:25" pos:end="45:43">load_image_targphys</name><argument_list pos:start="45:44" pos:end="47:49">(<argument pos:start="45:45" pos:end="45:57"><expr pos:start="45:45" pos:end="45:57"><name pos:start="45:45" pos:end="45:57">bios_filename</name></expr></argument>, <argument pos:start="45:60" pos:end="45:75"><expr pos:start="45:60" pos:end="45:75"><name pos:start="45:60" pos:end="45:75">ZIPL_IMAGE_START</name></expr></argument>,

                                            <argument pos:start="47:45" pos:end="47:48"><expr pos:start="47:45" pos:end="47:48"><literal type="number" pos:start="47:45" pos:end="47:48">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:47"><expr pos:start="49:13" pos:end="49:46"><name pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:15">ipl</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:27">start_addr</name></name> <operator pos:start="49:29" pos:end="49:29">=</operator> <name pos:start="49:31" pos:end="49:46">ZIPL_IMAGE_START</name></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="55:13"><if pos:start="51:13" pos:end="55:13">if <condition pos:start="51:16" pos:end="51:33">(<expr pos:start="51:17" pos:end="51:32"><name pos:start="51:17" pos:end="51:25">bios_size</name> <operator pos:start="51:27" pos:end="51:27">&gt;</operator> <literal type="number" pos:start="51:29" pos:end="51:32">4096</literal></expr>)</condition> <block pos:start="51:35" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:56">

                <expr_stmt pos:start="53:17" pos:end="53:56"><expr pos:start="53:17" pos:end="53:55"><call pos:start="53:17" pos:end="53:55"><name pos:start="53:17" pos:end="53:24">hw_error</name><argument_list pos:start="53:25" pos:end="53:55">(<argument pos:start="53:26" pos:end="53:54"><expr pos:start="53:26" pos:end="53:54"><literal type="string" pos:start="53:26" pos:end="53:54">"stage1 bootloader is &gt; 4k\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><call pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:14">g_free</name><argument_list pos:start="59:15" pos:end="59:29">(<argument pos:start="59:16" pos:end="59:28"><expr pos:start="59:16" pos:end="59:28"><name pos:start="59:16" pos:end="59:28">bios_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:28">(<expr pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:21">bios_size</name> <operator pos:start="63:23" pos:end="63:24">==</operator> <operator pos:start="63:26" pos:end="63:26">-</operator><literal type="number" pos:start="63:27" pos:end="63:27">1</literal></expr>)</condition> <block pos:start="63:30" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:68">

            <expr_stmt pos:start="65:13" pos:end="65:68"><expr pos:start="65:13" pos:end="65:67"><call pos:start="65:13" pos:end="65:67"><name pos:start="65:13" pos:end="65:20">hw_error</name><argument_list pos:start="65:21" pos:end="65:67">(<argument pos:start="65:22" pos:end="65:55"><expr pos:start="65:22" pos:end="65:55"><literal type="string" pos:start="65:22" pos:end="65:55">"could not load bootloader '%s'\n"</literal></expr></argument>, <argument pos:start="65:58" pos:end="65:66"><expr pos:start="65:58" pos:end="65:66"><name pos:start="65:58" pos:end="65:66">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="119:5">else <block pos:start="71:12" pos:end="119:5">{<block_content pos:start="73:9" pos:end="117:9">

        <decl_stmt pos:start="73:9" pos:end="73:43"><decl pos:start="73:9" pos:end="73:42"><type pos:start="73:9" pos:end="73:16"><name pos:start="73:9" pos:end="73:16">uint64_t</name></type> <name pos:start="73:18" pos:end="73:23">pentry</name> <init pos:start="73:25" pos:end="73:42">= <expr pos:start="73:27" pos:end="73:42"><name pos:start="73:27" pos:end="73:42">KERN_IMAGE_START</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="75:9" pos:end="77:56"><expr pos:start="75:9" pos:end="77:55"><name pos:start="75:9" pos:end="75:19">kernel_size</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="77:55"><name pos:start="75:23" pos:end="75:30">load_elf</name><argument_list pos:start="75:31" pos:end="77:55">(<argument pos:start="75:32" pos:end="75:42"><expr pos:start="75:32" pos:end="75:42"><name pos:start="75:32" pos:end="75:42"><name pos:start="75:32" pos:end="75:34">ipl</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:42">kernel</name></name></expr></argument>, <argument pos:start="75:45" pos:end="75:48"><expr pos:start="75:45" pos:end="75:48"><name pos:start="75:45" pos:end="75:48">NULL</name></expr></argument>, <argument pos:start="75:51" pos:end="75:54"><expr pos:start="75:51" pos:end="75:54"><name pos:start="75:51" pos:end="75:54">NULL</name></expr></argument>, <argument pos:start="75:57" pos:end="75:63"><expr pos:start="75:57" pos:end="75:63"><operator pos:start="75:57" pos:end="75:57">&amp;</operator><name pos:start="75:58" pos:end="75:63">pentry</name></expr></argument>, <argument pos:start="75:66" pos:end="75:69"><expr pos:start="75:66" pos:end="75:69"><name pos:start="75:66" pos:end="75:69">NULL</name></expr></argument>,

                               <argument pos:start="77:32" pos:end="77:35"><expr pos:start="77:32" pos:end="77:35"><name pos:start="77:32" pos:end="77:35">NULL</name></expr></argument>, <argument pos:start="77:38" pos:end="77:38"><expr pos:start="77:38" pos:end="77:38"><literal type="number" pos:start="77:38" pos:end="77:38">1</literal></expr></argument>, <argument pos:start="77:41" pos:end="77:51"><expr pos:start="77:41" pos:end="77:51"><name pos:start="77:41" pos:end="77:51">ELF_MACHINE</name></expr></argument>, <argument pos:start="77:54" pos:end="77:54"><expr pos:start="77:54" pos:end="77:54"><literal type="number" pos:start="77:54" pos:end="77:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:30">(<expr pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:23">kernel_size</name> <operator pos:start="79:25" pos:end="79:26">==</operator> <operator pos:start="79:28" pos:end="79:28">-</operator><literal type="number" pos:start="79:29" pos:end="79:29">1</literal></expr>)</condition> <block pos:start="79:32" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:72">

            <expr_stmt pos:start="81:13" pos:end="81:72"><expr pos:start="81:13" pos:end="81:71"><name pos:start="81:13" pos:end="81:23">kernel_size</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <call pos:start="81:27" pos:end="81:71"><name pos:start="81:27" pos:end="81:45">load_image_targphys</name><argument_list pos:start="81:46" pos:end="81:71">(<argument pos:start="81:47" pos:end="81:57"><expr pos:start="81:47" pos:end="81:57"><name pos:start="81:47" pos:end="81:57"><name pos:start="81:47" pos:end="81:49">ipl</name><operator pos:start="81:50" pos:end="81:51">-&gt;</operator><name pos:start="81:52" pos:end="81:57">kernel</name></name></expr></argument>, <argument pos:start="81:60" pos:end="81:60"><expr pos:start="81:60" pos:end="81:60"><literal type="number" pos:start="81:60" pos:end="81:60">0</literal></expr></argument>, <argument pos:start="81:63" pos:end="81:70"><expr pos:start="81:63" pos:end="81:70"><name pos:start="81:63" pos:end="81:70">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:30">(<expr pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:23">kernel_size</name> <operator pos:start="85:25" pos:end="85:26">==</operator> <operator pos:start="85:28" pos:end="85:28">-</operator><literal type="number" pos:start="85:29" pos:end="85:29">1</literal></expr>)</condition> <block pos:start="85:32" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:22">

            <expr_stmt pos:start="87:13" pos:end="87:73"><expr pos:start="87:13" pos:end="87:72"><call pos:start="87:13" pos:end="87:72"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="87:72">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:58"><expr pos:start="87:29" pos:end="87:58"><literal type="string" pos:start="87:29" pos:end="87:58">"could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="87:61" pos:end="87:71"><expr pos:start="87:61" pos:end="87:71"><name pos:start="87:61" pos:end="87:71"><name pos:start="87:61" pos:end="87:63">ipl</name><operator pos:start="87:64" pos:end="87:65">-&gt;</operator><name pos:start="87:66" pos:end="87:71">kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="89:13" pos:end="89:22">return <expr pos:start="89:20" pos:end="89:21"><operator pos:start="89:20" pos:end="89:20">-</operator><literal type="number" pos:start="89:21" pos:end="89:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="93:9" pos:end="103:11">/*

         * Is it a Linux kernel (starting at 0x10000)? If yes, we fill in the

         * kernel parameters here as well. Note: For old kernels (up to 3.2)

         * we can not rely on the ELF entry point - it was 0x800 (the SALIPL

         * loader) and it won't work. For this case we force it to 0x10000, too.

         */</comment>

        <if_stmt pos:start="105:9" pos:end="117:9"><if pos:start="105:9" pos:end="113:9">if <condition pos:start="105:12" pos:end="105:58">(<expr pos:start="105:13" pos:end="105:57"><name pos:start="105:13" pos:end="105:18">pentry</name> <operator pos:start="105:20" pos:end="105:21">==</operator> <name pos:start="105:23" pos:end="105:38">KERN_IMAGE_START</name> <operator pos:start="105:40" pos:end="105:41">||</operator> <name pos:start="105:43" pos:end="105:48">pentry</name> <operator pos:start="105:50" pos:end="105:51">==</operator> <literal type="number" pos:start="105:53" pos:end="105:57">0x800</literal></expr>)</condition> <block pos:start="105:60" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:58">

            <expr_stmt pos:start="107:13" pos:end="107:47"><expr pos:start="107:13" pos:end="107:46"><name pos:start="107:13" pos:end="107:27"><name pos:start="107:13" pos:end="107:15">ipl</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:27">start_addr</name></name> <operator pos:start="107:29" pos:end="107:29">=</operator> <name pos:start="107:31" pos:end="107:46">KERN_IMAGE_START</name></expr>;</expr_stmt>

            <comment type="block" pos:start="109:13" pos:end="109:75">/* Overwrite parameters in the kernel image, which are "rom" */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:58"><expr pos:start="111:13" pos:end="111:57"><call pos:start="111:13" pos:end="111:57"><name pos:start="111:13" pos:end="111:18">strcpy</name><argument_list pos:start="111:19" pos:end="111:57">(<argument pos:start="111:20" pos:end="111:42"><expr pos:start="111:20" pos:end="111:42"><call pos:start="111:20" pos:end="111:42"><name pos:start="111:20" pos:end="111:26">rom_ptr</name><argument_list pos:start="111:27" pos:end="111:42">(<argument pos:start="111:28" pos:end="111:41"><expr pos:start="111:28" pos:end="111:41"><name pos:start="111:28" pos:end="111:41">KERN_PARM_AREA</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:45" pos:end="111:56"><expr pos:start="111:45" pos:end="111:56"><name pos:start="111:45" pos:end="111:56"><name pos:start="111:45" pos:end="111:47">ipl</name><operator pos:start="111:48" pos:end="111:49">-&gt;</operator><name pos:start="111:50" pos:end="111:56">cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="113:11" pos:end="117:9">else <block pos:start="113:16" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:37">

            <expr_stmt pos:start="115:13" pos:end="115:37"><expr pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:27"><name pos:start="115:13" pos:end="115:15">ipl</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:27">start_addr</name></name> <operator pos:start="115:29" pos:end="115:29">=</operator> <name pos:start="115:31" pos:end="115:36">pentry</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="121:5" pos:end="157:5"><if pos:start="121:5" pos:end="157:5">if <condition pos:start="121:8" pos:end="121:20">(<expr pos:start="121:9" pos:end="121:19"><name pos:start="121:9" pos:end="121:19"><name pos:start="121:9" pos:end="121:11">ipl</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:19">initrd</name></name></expr>)</condition> <block pos:start="121:22" pos:end="157:5">{<block_content pos:start="123:9" pos:end="155:54">

        <decl_stmt pos:start="123:9" pos:end="123:33"><decl pos:start="123:9" pos:end="123:32"><type pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:18">ram_addr_t</name></type> <name pos:start="123:20" pos:end="123:32">initrd_offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="125:9" pos:end="125:24"><decl pos:start="125:9" pos:end="125:23"><type pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">int</name></type> <name pos:start="125:13" pos:end="125:23">initrd_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:37"><expr pos:start="129:9" pos:end="129:36"><name pos:start="129:9" pos:end="129:21">initrd_offset</name> <operator pos:start="129:23" pos:end="129:23">=</operator> <name pos:start="129:25" pos:end="129:36">INITRD_START</name></expr>;</expr_stmt>

        <while pos:start="131:9" pos:end="135:9">while <condition pos:start="131:15" pos:end="131:54">(<expr pos:start="131:16" pos:end="131:53"><name pos:start="131:16" pos:end="131:26">kernel_size</name> <operator pos:start="131:28" pos:end="131:28">+</operator> <literal type="number" pos:start="131:30" pos:end="131:37">0x100000</literal> <operator pos:start="131:39" pos:end="131:39">&gt;</operator> <name pos:start="131:41" pos:end="131:53">initrd_offset</name></expr>)</condition> <block pos:start="131:56" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:38">

            <expr_stmt pos:start="133:13" pos:end="133:38"><expr pos:start="133:13" pos:end="133:37"><name pos:start="133:13" pos:end="133:25">initrd_offset</name> <operator pos:start="133:27" pos:end="133:28">+=</operator> <literal type="number" pos:start="133:30" pos:end="133:37">0x100000</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="137:9" pos:end="139:68"><expr pos:start="137:9" pos:end="139:67"><name pos:start="137:9" pos:end="137:19">initrd_size</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <call pos:start="137:23" pos:end="139:67"><name pos:start="137:23" pos:end="137:41">load_image_targphys</name><argument_list pos:start="137:42" pos:end="139:67">(<argument pos:start="137:43" pos:end="137:53"><expr pos:start="137:43" pos:end="137:53"><name pos:start="137:43" pos:end="137:53"><name pos:start="137:43" pos:end="137:45">ipl</name><operator pos:start="137:46" pos:end="137:47">-&gt;</operator><name pos:start="137:48" pos:end="137:53">initrd</name></name></expr></argument>, <argument pos:start="137:56" pos:end="137:68"><expr pos:start="137:56" pos:end="137:68"><name pos:start="137:56" pos:end="137:68">initrd_offset</name></expr></argument>,

                                          <argument pos:start="139:43" pos:end="139:66"><expr pos:start="139:43" pos:end="139:66"><name pos:start="139:43" pos:end="139:50">ram_size</name> <operator pos:start="139:52" pos:end="139:52">-</operator> <name pos:start="139:54" pos:end="139:66">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="147:9"><if pos:start="141:9" pos:end="147:9">if <condition pos:start="141:12" pos:end="141:30">(<expr pos:start="141:13" pos:end="141:29"><name pos:start="141:13" pos:end="141:23">initrd_size</name> <operator pos:start="141:25" pos:end="141:26">==</operator> <operator pos:start="141:28" pos:end="141:28">-</operator><literal type="number" pos:start="141:29" pos:end="141:29">1</literal></expr>)</condition> <block pos:start="141:32" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:20">

            <expr_stmt pos:start="143:13" pos:end="143:79"><expr pos:start="143:13" pos:end="143:78"><call pos:start="143:13" pos:end="143:78"><name pos:start="143:13" pos:end="143:19">fprintf</name><argument_list pos:start="143:20" pos:end="143:78">(<argument pos:start="143:21" pos:end="143:26"><expr pos:start="143:21" pos:end="143:26"><name pos:start="143:21" pos:end="143:26">stderr</name></expr></argument>, <argument pos:start="143:29" pos:end="143:64"><expr pos:start="143:29" pos:end="143:64"><literal type="string" pos:start="143:29" pos:end="143:64">"qemu: could not load initrd '%s'\n"</literal></expr></argument>, <argument pos:start="143:67" pos:end="143:77"><expr pos:start="143:67" pos:end="143:77"><name pos:start="143:67" pos:end="143:77"><name pos:start="143:67" pos:end="143:69">ipl</name><operator pos:start="143:70" pos:end="143:71">-&gt;</operator><name pos:start="143:72" pos:end="143:77">initrd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:20"><expr pos:start="145:13" pos:end="145:19"><call pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:16">exit</name><argument_list pos:start="145:17" pos:end="145:19">(<argument pos:start="145:18" pos:end="145:18"><expr pos:start="145:18" pos:end="145:18"><literal type="number" pos:start="145:18" pos:end="145:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="151:9" pos:end="151:78">/* we have to overwrite values in the kernel image, which are "rom" */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:57"><expr pos:start="153:9" pos:end="153:56"><call pos:start="153:9" pos:end="153:56"><name pos:start="153:9" pos:end="153:13">stq_p</name><argument_list pos:start="153:14" pos:end="153:56">(<argument pos:start="153:15" pos:end="153:40"><expr pos:start="153:15" pos:end="153:40"><call pos:start="153:15" pos:end="153:40"><name pos:start="153:15" pos:end="153:21">rom_ptr</name><argument_list pos:start="153:22" pos:end="153:40">(<argument pos:start="153:23" pos:end="153:39"><expr pos:start="153:23" pos:end="153:39"><name pos:start="153:23" pos:end="153:39">INITRD_PARM_START</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:43" pos:end="153:55"><expr pos:start="153:43" pos:end="153:55"><name pos:start="153:43" pos:end="153:55">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:54"><expr pos:start="155:9" pos:end="155:53"><call pos:start="155:9" pos:end="155:53"><name pos:start="155:9" pos:end="155:13">stq_p</name><argument_list pos:start="155:14" pos:end="155:53">(<argument pos:start="155:15" pos:end="155:39"><expr pos:start="155:15" pos:end="155:39"><call pos:start="155:15" pos:end="155:39"><name pos:start="155:15" pos:end="155:21">rom_ptr</name><argument_list pos:start="155:22" pos:end="155:39">(<argument pos:start="155:23" pos:end="155:38"><expr pos:start="155:23" pos:end="155:38"><name pos:start="155:23" pos:end="155:38">INITRD_PARM_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="155:42" pos:end="155:52"><expr pos:start="155:42" pos:end="155:52"><name pos:start="155:42" pos:end="155:52">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
