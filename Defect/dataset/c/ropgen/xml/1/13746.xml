<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13746.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">mxpeg_decode_frame</name><parameter_list pos:start="1:30" pos:end="5:42">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:36"><decl pos:start="3:27" pos:end="3:36"><type pos:start="3:27" pos:end="3:36"><name pos:start="3:27" pos:end="3:30">void</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:36">data</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:52"><decl pos:start="3:39" pos:end="3:52"><type pos:start="3:39" pos:end="3:52"><name pos:start="3:39" pos:end="3:41">int</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:52">got_frame</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:41"><decl pos:start="5:27" pos:end="5:41"><type pos:start="5:27" pos:end="5:41"><name pos:start="5:27" pos:end="5:34">AVPacket</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:41">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="303:1">{<block_content pos:start="9:5" pos:end="301:25">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22">MXpegDecodeContext</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:25">s</name> <init pos:start="13:27" pos:end="13:44">= <expr pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:33">avctx</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:22">MJpegDecodeContext</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:27">jpg</name> <init pos:start="15:29" pos:end="15:37">= <expr pos:start="15:31" pos:end="15:37"><operator pos:start="15:31" pos:end="15:31">&amp;</operator><name pos:start="15:32" pos:end="15:37"><name pos:start="15:32" pos:end="15:32">s</name><operator pos:start="15:33" pos:end="15:34">-&gt;</operator><name pos:start="15:35" pos:end="15:37">jpg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:26">buf_end</name></decl>, <decl pos:start="17:29" pos:end="17:36"><type ref="prev" pos:start="17:5" pos:end="17:19"><modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:36">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:17">uint8_t</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:36">unescaped_buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:26">unescaped_buf_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">start_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:12"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:18"><expr pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:11">buf_ptr</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:11">buf_end</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:17">buf</name> <operator pos:start="31:19" pos:end="31:19">+</operator> <name pos:start="31:21" pos:end="31:28">buf_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:25"><expr pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:7">jpg</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:20">got_picture</name></name> <operator pos:start="33:22" pos:end="33:22">=</operator> <literal type="number" pos:start="33:24" pos:end="33:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:22">got_mxm_bitmask</name></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr>;</expr_stmt>

    <while pos:start="37:5" pos:end="261:5">while <condition pos:start="37:11" pos:end="37:29">(<expr pos:start="37:12" pos:end="37:28"><name pos:start="37:12" pos:end="37:18">buf_ptr</name> <operator pos:start="37:20" pos:end="37:20">&lt;</operator> <name pos:start="37:22" pos:end="37:28">buf_end</name></expr>)</condition> <block pos:start="37:31" pos:end="261:5">{<block_content pos:start="39:9" pos:end="257:9">

        <expr_stmt pos:start="39:9" pos:end="41:83"><expr pos:start="39:9" pos:end="41:82"><name pos:start="39:9" pos:end="39:18">start_code</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <call pos:start="39:22" pos:end="41:82"><name pos:start="39:22" pos:end="39:41">ff_mjpeg_find_marker</name><argument_list pos:start="39:42" pos:end="41:82">(<argument pos:start="39:43" pos:end="39:45"><expr pos:start="39:43" pos:end="39:45"><name pos:start="39:43" pos:end="39:45">jpg</name></expr></argument>, <argument pos:start="39:48" pos:end="39:55"><expr pos:start="39:48" pos:end="39:55"><operator pos:start="39:48" pos:end="39:48">&amp;</operator><name pos:start="39:49" pos:end="39:55">buf_ptr</name></expr></argument>, <argument pos:start="39:58" pos:end="39:64"><expr pos:start="39:58" pos:end="39:64"><name pos:start="39:58" pos:end="39:64">buf_end</name></expr></argument>,

                                          <argument pos:start="41:43" pos:end="41:60"><expr pos:start="41:43" pos:end="41:60"><operator pos:start="41:43" pos:end="41:43">&amp;</operator><name pos:start="41:44" pos:end="41:60">unescaped_buf_ptr</name></expr></argument>, <argument pos:start="41:63" pos:end="41:81"><expr pos:start="41:63" pos:end="41:81"><operator pos:start="41:63" pos:end="41:63">&amp;</operator><name pos:start="41:64" pos:end="41:81">unescaped_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="45:25"><if pos:start="43:9" pos:end="45:25">if <condition pos:start="43:12" pos:end="43:27">(<expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:22">start_code</name> <operator pos:start="43:24" pos:end="43:24">&lt;</operator> <literal type="number" pos:start="43:26" pos:end="43:26">0</literal></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:25"><block_content pos:start="45:13" pos:end="45:25">

            <goto pos:start="45:13" pos:end="45:25">goto <name pos:start="45:18" pos:end="45:24">the_end</name>;</goto></block_content></block></if></if_stmt>

        <block pos:start="47:9" pos:end="257:9">{<block_content pos:start="49:13" pos:end="255:57">

            <expr_stmt pos:start="49:13" pos:end="49:77"><expr pos:start="49:13" pos:end="49:76"><call pos:start="49:13" pos:end="49:76"><name pos:start="49:13" pos:end="49:25">init_get_bits</name><argument_list pos:start="49:26" pos:end="49:76">(<argument pos:start="49:27" pos:end="49:34"><expr pos:start="49:27" pos:end="49:34"><operator pos:start="49:27" pos:end="49:27">&amp;</operator><name pos:start="49:28" pos:end="49:34"><name pos:start="49:28" pos:end="49:30">jpg</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:34">gb</name></name></expr></argument>, <argument pos:start="49:37" pos:end="49:53"><expr pos:start="49:37" pos:end="49:53"><name pos:start="49:37" pos:end="49:53">unescaped_buf_ptr</name></expr></argument>, <argument pos:start="49:56" pos:end="49:75"><expr pos:start="49:56" pos:end="49:75"><name pos:start="49:56" pos:end="49:73">unescaped_buf_size</name><operator pos:start="49:74" pos:end="49:74">*</operator><literal type="number" pos:start="49:75" pos:end="49:75">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:58">(<expr pos:start="53:17" pos:end="53:57"><name pos:start="53:17" pos:end="53:26">start_code</name> <operator pos:start="53:28" pos:end="53:29">&gt;=</operator> <name pos:start="53:31" pos:end="53:34">APP0</name> <operator pos:start="53:36" pos:end="53:37">&amp;&amp;</operator> <name pos:start="53:39" pos:end="53:48">start_code</name> <operator pos:start="53:50" pos:end="53:51">&lt;=</operator> <name pos:start="53:53" pos:end="53:57">APP15</name></expr>)</condition> <block pos:start="53:60" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:75">

                <expr_stmt pos:start="55:17" pos:end="55:75"><expr pos:start="55:17" pos:end="55:74"><call pos:start="55:17" pos:end="55:74"><name pos:start="55:17" pos:end="55:32">mxpeg_decode_app</name><argument_list pos:start="55:33" pos:end="55:74">(<argument pos:start="55:34" pos:end="55:34"><expr pos:start="55:34" pos:end="55:34"><name pos:start="55:34" pos:end="55:34">s</name></expr></argument>, <argument pos:start="55:37" pos:end="55:53"><expr pos:start="55:37" pos:end="55:53"><name pos:start="55:37" pos:end="55:53">unescaped_buf_ptr</name></expr></argument>, <argument pos:start="55:56" pos:end="55:73"><expr pos:start="55:56" pos:end="55:73"><name pos:start="55:56" pos:end="55:73">unescaped_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <switch pos:start="61:13" pos:end="251:13">switch <condition pos:start="61:20" pos:end="61:31">(<expr pos:start="61:21" pos:end="61:30"><name pos:start="61:21" pos:end="61:30">start_code</name></expr>)</condition> <block pos:start="61:33" pos:end="251:13">{<block_content pos:start="63:13" pos:end="249:22">

            <case pos:start="63:13" pos:end="63:21">case <expr pos:start="63:18" pos:end="63:20"><name pos:start="63:18" pos:end="63:20">SOI</name></expr>:</case>

                <if_stmt pos:start="65:17" pos:end="67:33"><if pos:start="65:17" pos:end="67:33">if <condition pos:start="65:20" pos:end="65:37">(<expr pos:start="65:21" pos:end="65:36"><name pos:start="65:21" pos:end="65:36"><name pos:start="65:21" pos:end="65:23">jpg</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:36">got_picture</name></name></expr>)</condition><block type="pseudo" pos:start="67:21" pos:end="67:33"><block_content pos:start="67:21" pos:end="67:33"> <comment type="line" pos:start="65:39" pos:end="65:53">//emulating EOI</comment>

                    <goto pos:start="67:21" pos:end="67:33">goto <name pos:start="67:26" pos:end="67:32">the_end</name>;</goto></block_content></block></if></if_stmt>

                <break pos:start="69:17" pos:end="69:22">break;</break>

            <case pos:start="71:13" pos:end="71:21">case <expr pos:start="71:18" pos:end="71:20"><name pos:start="71:18" pos:end="71:20">EOI</name></expr>:</case>

                <goto pos:start="73:17" pos:end="73:29">goto <name pos:start="73:22" pos:end="73:28">the_end</name>;</goto>

            <case pos:start="75:13" pos:end="75:21">case <expr pos:start="75:18" pos:end="75:20"><name pos:start="75:18" pos:end="75:20">DQT</name></expr>:</case>

                <expr_stmt pos:start="77:17" pos:end="77:47"><expr pos:start="77:17" pos:end="77:46"><name pos:start="77:17" pos:end="77:19">ret</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:46"><name pos:start="77:23" pos:end="77:41">ff_mjpeg_decode_dqt</name><argument_list pos:start="77:42" pos:end="77:46">(<argument pos:start="77:43" pos:end="77:45"><expr pos:start="77:43" pos:end="77:45"><name pos:start="77:43" pos:end="77:45">jpg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="79:17" pos:end="87:17"><if pos:start="79:17" pos:end="87:17">if <condition pos:start="79:20" pos:end="79:28">(<expr pos:start="79:21" pos:end="79:27"><name pos:start="79:21" pos:end="79:23">ret</name> <operator pos:start="79:25" pos:end="79:25">&lt;</operator> <literal type="number" pos:start="79:27" pos:end="79:27">0</literal></expr>)</condition> <block pos:start="79:30" pos:end="87:17">{<block_content pos:start="81:21" pos:end="85:31">

                    <expr_stmt pos:start="81:21" pos:end="83:64"><expr pos:start="81:21" pos:end="83:63"><call pos:start="81:21" pos:end="83:63"><name pos:start="81:21" pos:end="81:26">av_log</name><argument_list pos:start="81:27" pos:end="83:63">(<argument pos:start="81:28" pos:end="81:32"><expr pos:start="81:28" pos:end="81:32"><name pos:start="81:28" pos:end="81:32">avctx</name></expr></argument>, <argument pos:start="81:35" pos:end="81:46"><expr pos:start="81:35" pos:end="81:46"><name pos:start="81:35" pos:end="81:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="83:28" pos:end="83:62"><expr pos:start="83:28" pos:end="83:62"><literal type="string" pos:start="83:28" pos:end="83:62">"quantization table decode error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="85:21" pos:end="85:31">return <expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <break pos:start="89:17" pos:end="89:22">break;</break>

            <case pos:start="91:13" pos:end="91:21">case <expr pos:start="91:18" pos:end="91:20"><name pos:start="91:18" pos:end="91:20">DHT</name></expr>:</case>

                <expr_stmt pos:start="93:17" pos:end="93:47"><expr pos:start="93:17" pos:end="93:46"><name pos:start="93:17" pos:end="93:19">ret</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="93:46"><name pos:start="93:23" pos:end="93:41">ff_mjpeg_decode_dht</name><argument_list pos:start="93:42" pos:end="93:46">(<argument pos:start="93:43" pos:end="93:45"><expr pos:start="93:43" pos:end="93:45"><name pos:start="93:43" pos:end="93:45">jpg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="95:17" pos:end="103:17"><if pos:start="95:17" pos:end="103:17">if <condition pos:start="95:20" pos:end="95:28">(<expr pos:start="95:21" pos:end="95:27"><name pos:start="95:21" pos:end="95:23">ret</name> <operator pos:start="95:25" pos:end="95:25">&lt;</operator> <literal type="number" pos:start="95:27" pos:end="95:27">0</literal></expr>)</condition> <block pos:start="95:30" pos:end="103:17">{<block_content pos:start="97:21" pos:end="101:31">

                    <expr_stmt pos:start="97:21" pos:end="99:59"><expr pos:start="97:21" pos:end="99:58"><call pos:start="97:21" pos:end="99:58"><name pos:start="97:21" pos:end="97:26">av_log</name><argument_list pos:start="97:27" pos:end="99:58">(<argument pos:start="97:28" pos:end="97:32"><expr pos:start="97:28" pos:end="97:32"><name pos:start="97:28" pos:end="97:32">avctx</name></expr></argument>, <argument pos:start="97:35" pos:end="97:46"><expr pos:start="97:35" pos:end="97:46"><name pos:start="97:35" pos:end="97:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="99:28" pos:end="99:57"><expr pos:start="99:28" pos:end="99:57"><literal type="string" pos:start="99:28" pos:end="99:57">"huffman table decode error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="101:21" pos:end="101:31">return <expr pos:start="101:28" pos:end="101:30"><name pos:start="101:28" pos:end="101:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <break pos:start="105:17" pos:end="105:22">break;</break>

            <case pos:start="107:13" pos:end="107:21">case <expr pos:start="107:18" pos:end="107:20"><name pos:start="107:18" pos:end="107:20">COM</name></expr>:</case>

                <expr_stmt pos:start="109:17" pos:end="111:59"><expr pos:start="109:17" pos:end="111:58"><name pos:start="109:17" pos:end="109:19">ret</name> <operator pos:start="109:21" pos:end="109:21">=</operator> <call pos:start="109:23" pos:end="111:58"><name pos:start="109:23" pos:end="109:38">mxpeg_decode_com</name><argument_list pos:start="109:39" pos:end="111:58">(<argument pos:start="109:40" pos:end="109:40"><expr pos:start="109:40" pos:end="109:40"><name pos:start="109:40" pos:end="109:40">s</name></expr></argument>, <argument pos:start="109:43" pos:end="109:59"><expr pos:start="109:43" pos:end="109:59"><name pos:start="109:43" pos:end="109:59">unescaped_buf_ptr</name></expr></argument>,

                                       <argument pos:start="111:40" pos:end="111:57"><expr pos:start="111:40" pos:end="111:57"><name pos:start="111:40" pos:end="111:57">unescaped_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="113:17" pos:end="115:31"><if pos:start="113:17" pos:end="115:31">if <condition pos:start="113:20" pos:end="113:28">(<expr pos:start="113:21" pos:end="113:27"><name pos:start="113:21" pos:end="113:23">ret</name> <operator pos:start="113:25" pos:end="113:25">&lt;</operator> <literal type="number" pos:start="113:27" pos:end="113:27">0</literal></expr>)</condition><block type="pseudo" pos:start="115:21" pos:end="115:31"><block_content pos:start="115:21" pos:end="115:31">

                    <return pos:start="115:21" pos:end="115:31">return <expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

                <break pos:start="117:17" pos:end="117:22">break;</break>

            <case pos:start="119:13" pos:end="119:22">case <expr pos:start="119:18" pos:end="119:21"><name pos:start="119:18" pos:end="119:21">SOF0</name></expr>:</case>

                <expr_stmt pos:start="121:17" pos:end="121:36"><expr pos:start="121:17" pos:end="121:35"><name pos:start="121:17" pos:end="121:31"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:31">got_sof_data</name></name> <operator pos:start="121:33" pos:end="121:33">=</operator> <literal type="number" pos:start="121:35" pos:end="121:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:47"><expr pos:start="123:17" pos:end="123:46"><name pos:start="123:17" pos:end="123:19">ret</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <call pos:start="123:23" pos:end="123:46"><name pos:start="123:23" pos:end="123:41">ff_mjpeg_decode_sof</name><argument_list pos:start="123:42" pos:end="123:46">(<argument pos:start="123:43" pos:end="123:45"><expr pos:start="123:43" pos:end="123:45"><name pos:start="123:43" pos:end="123:45">jpg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="125:17" pos:end="133:17"><if pos:start="125:17" pos:end="133:17">if <condition pos:start="125:20" pos:end="125:28">(<expr pos:start="125:21" pos:end="125:27"><name pos:start="125:21" pos:end="125:23">ret</name> <operator pos:start="125:25" pos:end="125:25">&lt;</operator> <literal type="number" pos:start="125:27" pos:end="125:27">0</literal></expr>)</condition> <block pos:start="125:30" pos:end="133:17">{<block_content pos:start="127:21" pos:end="131:31">

                    <expr_stmt pos:start="127:21" pos:end="129:54"><expr pos:start="127:21" pos:end="129:53"><call pos:start="127:21" pos:end="129:53"><name pos:start="127:21" pos:end="127:26">av_log</name><argument_list pos:start="127:27" pos:end="129:53">(<argument pos:start="127:28" pos:end="127:32"><expr pos:start="127:28" pos:end="127:32"><name pos:start="127:28" pos:end="127:32">avctx</name></expr></argument>, <argument pos:start="127:35" pos:end="127:46"><expr pos:start="127:35" pos:end="127:46"><name pos:start="127:35" pos:end="127:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="129:28" pos:end="129:52"><expr pos:start="129:28" pos:end="129:52"><literal type="string" pos:start="129:28" pos:end="129:52">"SOF data decode error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="131:21" pos:end="131:31">return <expr pos:start="131:28" pos:end="131:30"><name pos:start="131:28" pos:end="131:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="135:17" pos:end="143:17"><if pos:start="135:17" pos:end="143:17">if <condition pos:start="135:20" pos:end="135:36">(<expr pos:start="135:21" pos:end="135:35"><name pos:start="135:21" pos:end="135:35"><name pos:start="135:21" pos:end="135:23">jpg</name><operator pos:start="135:24" pos:end="135:25">-&gt;</operator><name pos:start="135:26" pos:end="135:35">interlaced</name></name></expr>)</condition> <block pos:start="135:38" pos:end="143:17">{<block_content pos:start="137:21" pos:end="141:43">

                    <expr_stmt pos:start="137:21" pos:end="139:71"><expr pos:start="137:21" pos:end="139:70"><call pos:start="137:21" pos:end="139:70"><name pos:start="137:21" pos:end="137:26">av_log</name><argument_list pos:start="137:27" pos:end="139:70">(<argument pos:start="137:28" pos:end="137:32"><expr pos:start="137:28" pos:end="137:32"><name pos:start="137:28" pos:end="137:32">avctx</name></expr></argument>, <argument pos:start="137:35" pos:end="137:46"><expr pos:start="137:35" pos:end="137:46"><name pos:start="137:35" pos:end="137:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="139:28" pos:end="139:69"><expr pos:start="139:28" pos:end="139:69"><literal type="string" pos:start="139:28" pos:end="139:69">"Interlaced mode not supported in MxPEG\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="141:21" pos:end="141:43">return <expr pos:start="141:28" pos:end="141:42"><call pos:start="141:28" pos:end="141:42"><name pos:start="141:28" pos:end="141:34">AVERROR</name><argument_list pos:start="141:35" pos:end="141:42">(<argument pos:start="141:36" pos:end="141:41"><expr pos:start="141:36" pos:end="141:41"><name pos:start="141:36" pos:end="141:41">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:36"><expr pos:start="145:17" pos:end="145:35"><name pos:start="145:17" pos:end="145:31"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:31">got_sof_data</name></name> <operator pos:start="145:33" pos:end="145:33">=</operator> <literal type="number" pos:start="145:35" pos:end="145:35">1</literal></expr>;</expr_stmt>

                <break pos:start="147:17" pos:end="147:22">break;</break>

            <case pos:start="149:13" pos:end="149:21">case <expr pos:start="149:18" pos:end="149:20"><name pos:start="149:18" pos:end="149:20">SOS</name></expr>:</case>

                <if_stmt pos:start="151:17" pos:end="159:17"><if pos:start="151:17" pos:end="159:17">if <condition pos:start="151:20" pos:end="151:37">(<expr pos:start="151:21" pos:end="151:36"><operator pos:start="151:21" pos:end="151:21">!</operator><name pos:start="151:22" pos:end="151:36"><name pos:start="151:22" pos:end="151:22">s</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:36">got_sof_data</name></name></expr>)</condition> <block pos:start="151:39" pos:end="159:17">{<block_content pos:start="153:21" pos:end="157:26">

                    <expr_stmt pos:start="153:21" pos:end="155:79"><expr pos:start="153:21" pos:end="155:78"><call pos:start="153:21" pos:end="155:78"><name pos:start="153:21" pos:end="153:26">av_log</name><argument_list pos:start="153:27" pos:end="155:78">(<argument pos:start="153:28" pos:end="153:32"><expr pos:start="153:28" pos:end="153:32"><name pos:start="153:28" pos:end="153:32">avctx</name></expr></argument>, <argument pos:start="153:35" pos:end="153:48"><expr pos:start="153:35" pos:end="153:48"><name pos:start="153:35" pos:end="153:48">AV_LOG_WARNING</name></expr></argument>,

                           <argument pos:start="155:28" pos:end="155:77"><expr pos:start="155:28" pos:end="155:77"><literal type="string" pos:start="155:28" pos:end="155:77">"Can not process SOS without SOF data, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="157:21" pos:end="157:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="161:17" pos:end="205:17"><if pos:start="161:17" pos:end="199:17">if <condition pos:start="161:20" pos:end="161:38">(<expr pos:start="161:21" pos:end="161:37"><operator pos:start="161:21" pos:end="161:21">!</operator><name pos:start="161:22" pos:end="161:37"><name pos:start="161:22" pos:end="161:24">jpg</name><operator pos:start="161:25" pos:end="161:26">-&gt;</operator><name pos:start="161:27" pos:end="161:37">got_picture</name></name></expr>)</condition> <block pos:start="161:40" pos:end="199:17">{<block_content pos:start="163:21" pos:end="197:41">

                    <if_stmt pos:start="163:21" pos:end="171:21"><if pos:start="163:21" pos:end="171:21">if <condition pos:start="163:24" pos:end="163:43">(<expr pos:start="163:25" pos:end="163:42"><name pos:start="163:25" pos:end="163:42"><name pos:start="163:25" pos:end="163:27">jpg</name><operator pos:start="163:28" pos:end="163:29">-&gt;</operator><name pos:start="163:30" pos:end="163:42">first_picture</name></name></expr>)</condition> <block pos:start="163:45" pos:end="171:21">{<block_content pos:start="165:25" pos:end="169:30">

                        <expr_stmt pos:start="165:25" pos:end="167:71"><expr pos:start="165:25" pos:end="167:70"><call pos:start="165:25" pos:end="167:70"><name pos:start="165:25" pos:end="165:30">av_log</name><argument_list pos:start="165:31" pos:end="167:70">(<argument pos:start="165:32" pos:end="165:36"><expr pos:start="165:32" pos:end="165:36"><name pos:start="165:32" pos:end="165:36">avctx</name></expr></argument>, <argument pos:start="165:39" pos:end="165:52"><expr pos:start="165:39" pos:end="165:52"><name pos:start="165:39" pos:end="165:52">AV_LOG_WARNING</name></expr></argument>,

                               <argument pos:start="167:32" pos:end="167:69"><expr pos:start="167:32" pos:end="167:69"><literal type="string" pos:start="167:32" pos:end="167:69">"First picture has no SOF, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="169:25" pos:end="169:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="173:21" pos:end="181:21"><if pos:start="173:21" pos:end="181:21">if <condition pos:start="173:24" pos:end="173:44">(<expr pos:start="173:25" pos:end="173:43"><operator pos:start="173:25" pos:end="173:25">!</operator><name pos:start="173:26" pos:end="173:43"><name pos:start="173:26" pos:end="173:26">s</name><operator pos:start="173:27" pos:end="173:28">-&gt;</operator><name pos:start="173:29" pos:end="173:43">got_mxm_bitmask</name></name></expr>)</condition><block pos:start="173:45" pos:end="181:21">{<block_content pos:start="175:25" pos:end="179:30">

                        <expr_stmt pos:start="175:25" pos:end="177:71"><expr pos:start="175:25" pos:end="177:70"><call pos:start="175:25" pos:end="177:70"><name pos:start="175:25" pos:end="175:30">av_log</name><argument_list pos:start="175:31" pos:end="177:70">(<argument pos:start="175:32" pos:end="175:36"><expr pos:start="175:32" pos:end="175:36"><name pos:start="175:32" pos:end="175:36">avctx</name></expr></argument>, <argument pos:start="175:39" pos:end="175:52"><expr pos:start="175:39" pos:end="175:52"><name pos:start="175:39" pos:end="175:52">AV_LOG_WARNING</name></expr></argument>,

                               <argument pos:start="177:32" pos:end="177:69"><expr pos:start="177:32" pos:end="177:69"><literal type="string" pos:start="177:32" pos:end="177:69">"Non-key frame has no MXM, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="179:25" pos:end="179:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="183:21" pos:end="183:73">/* use stored SOF data to allocate current picture */</comment>

                    <expr_stmt pos:start="185:21" pos:end="185:53"><expr pos:start="185:21" pos:end="185:52"><call pos:start="185:21" pos:end="185:52"><name pos:start="185:21" pos:end="185:34">av_frame_unref</name><argument_list pos:start="185:35" pos:end="185:52">(<argument pos:start="185:36" pos:end="185:51"><expr pos:start="185:36" pos:end="185:51"><name pos:start="185:36" pos:end="185:51"><name pos:start="185:36" pos:end="185:38">jpg</name><operator pos:start="185:39" pos:end="185:40">-&gt;</operator><name pos:start="185:41" pos:end="185:51">picture_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="187:21" pos:end="191:35"><if pos:start="187:21" pos:end="191:35">if <condition pos:start="187:24" pos:end="189:74">(<expr pos:start="187:25" pos:end="189:73"><operator pos:start="187:25" pos:end="187:25">(</operator><name pos:start="187:26" pos:end="187:28">ret</name> <operator pos:start="187:30" pos:end="187:30">=</operator> <call pos:start="187:32" pos:end="189:68"><name pos:start="187:32" pos:end="187:44">ff_get_buffer</name><argument_list pos:start="187:45" pos:end="189:68">(<argument pos:start="187:46" pos:end="187:50"><expr pos:start="187:46" pos:end="187:50"><name pos:start="187:46" pos:end="187:50">avctx</name></expr></argument>, <argument pos:start="187:53" pos:end="187:68"><expr pos:start="187:53" pos:end="187:68"><name pos:start="187:53" pos:end="187:68"><name pos:start="187:53" pos:end="187:55">jpg</name><operator pos:start="187:56" pos:end="187:57">-&gt;</operator><name pos:start="187:58" pos:end="187:68">picture_ptr</name></name></expr></argument>,

                                             <argument pos:start="189:46" pos:end="189:67"><expr pos:start="189:46" pos:end="189:67"><name pos:start="189:46" pos:end="189:67">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="189:69" pos:end="189:69">)</operator> <operator pos:start="189:71" pos:end="189:71">&lt;</operator> <literal type="number" pos:start="189:73" pos:end="189:73">0</literal></expr>)</condition><block type="pseudo" pos:start="191:25" pos:end="191:35"><block_content pos:start="191:25" pos:end="191:35">

                        <return pos:start="191:25" pos:end="191:35">return <expr pos:start="191:32" pos:end="191:34"><name pos:start="191:32" pos:end="191:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="193:21" pos:end="193:68"><expr pos:start="193:21" pos:end="193:67"><name pos:start="193:21" pos:end="193:47"><name pos:start="193:21" pos:end="193:23">jpg</name><operator pos:start="193:24" pos:end="193:25">-&gt;</operator><name pos:start="193:26" pos:end="193:36">picture_ptr</name><operator pos:start="193:37" pos:end="193:38">-&gt;</operator><name pos:start="193:39" pos:end="193:47">pict_type</name></name> <operator pos:start="193:49" pos:end="193:49">=</operator> <name pos:start="193:51" pos:end="193:67">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:52"><expr pos:start="195:21" pos:end="195:51"><name pos:start="195:21" pos:end="195:47"><name pos:start="195:21" pos:end="195:23">jpg</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:36">picture_ptr</name><operator pos:start="195:37" pos:end="195:38">-&gt;</operator><name pos:start="195:39" pos:end="195:47">key_frame</name></name> <operator pos:start="195:49" pos:end="195:49">=</operator> <literal type="number" pos:start="195:51" pos:end="195:51">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:41"><expr pos:start="197:21" pos:end="197:40"><name pos:start="197:21" pos:end="197:36"><name pos:start="197:21" pos:end="197:23">jpg</name><operator pos:start="197:24" pos:end="197:25">-&gt;</operator><name pos:start="197:26" pos:end="197:36">got_picture</name></name> <operator pos:start="197:38" pos:end="197:38">=</operator> <literal type="number" pos:start="197:40" pos:end="197:40">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="199:19" pos:end="205:17">else <block pos:start="199:24" pos:end="205:17">{<block_content pos:start="201:21" pos:end="203:52">

                    <expr_stmt pos:start="201:21" pos:end="201:68"><expr pos:start="201:21" pos:end="201:67"><name pos:start="201:21" pos:end="201:47"><name pos:start="201:21" pos:end="201:23">jpg</name><operator pos:start="201:24" pos:end="201:25">-&gt;</operator><name pos:start="201:26" pos:end="201:36">picture_ptr</name><operator pos:start="201:37" pos:end="201:38">-&gt;</operator><name pos:start="201:39" pos:end="201:47">pict_type</name></name> <operator pos:start="201:49" pos:end="201:49">=</operator> <name pos:start="201:51" pos:end="201:67">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:52"><expr pos:start="203:21" pos:end="203:51"><name pos:start="203:21" pos:end="203:47"><name pos:start="203:21" pos:end="203:23">jpg</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:36">picture_ptr</name><operator pos:start="203:37" pos:end="203:38">-&gt;</operator><name pos:start="203:39" pos:end="203:47">key_frame</name></name> <operator pos:start="203:49" pos:end="203:49">=</operator> <literal type="number" pos:start="203:51" pos:end="203:51">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="209:17" pos:end="245:17"><if pos:start="209:17" pos:end="237:17">if <condition pos:start="209:20" pos:end="209:39">(<expr pos:start="209:21" pos:end="209:38"><name pos:start="209:21" pos:end="209:38"><name pos:start="209:21" pos:end="209:21">s</name><operator pos:start="209:22" pos:end="209:23">-&gt;</operator><name pos:start="209:24" pos:end="209:38">got_mxm_bitmask</name></name></expr>)</condition> <block pos:start="209:41" pos:end="237:17">{<block_content pos:start="211:21" pos:end="235:35">

                    <decl_stmt pos:start="211:21" pos:end="211:78"><decl pos:start="211:21" pos:end="211:77"><type pos:start="211:21" pos:end="211:29"><name pos:start="211:21" pos:end="211:27">AVFrame</name> <modifier pos:start="211:29" pos:end="211:29">*</modifier></type><name pos:start="211:30" pos:end="211:42">reference_ptr</name> <init pos:start="211:44" pos:end="211:77">= <expr pos:start="211:46" pos:end="211:77"><name pos:start="211:46" pos:end="211:77"><name pos:start="211:46" pos:end="211:46">s</name><operator pos:start="211:47" pos:end="211:48">-&gt;</operator><name pos:start="211:49" pos:end="211:55">picture</name><index pos:start="211:56" pos:end="211:77">[<expr pos:start="211:57" pos:end="211:76"><name pos:start="211:57" pos:end="211:72"><name pos:start="211:57" pos:end="211:57">s</name><operator pos:start="211:58" pos:end="211:59">-&gt;</operator><name pos:start="211:60" pos:end="211:72">picture_index</name></name> <operator pos:start="211:74" pos:end="211:74">^</operator> <literal type="number" pos:start="211:76" pos:end="211:76">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="213:21" pos:end="215:30"><if pos:start="213:21" pos:end="215:30">if <condition pos:start="213:24" pos:end="213:74">(<expr pos:start="213:25" pos:end="213:73"><call pos:start="213:25" pos:end="213:69"><name pos:start="213:25" pos:end="213:46">mxpeg_check_dimensions</name><argument_list pos:start="213:47" pos:end="213:69">(<argument pos:start="213:48" pos:end="213:48"><expr pos:start="213:48" pos:end="213:48"><name pos:start="213:48" pos:end="213:48">s</name></expr></argument>, <argument pos:start="213:51" pos:end="213:53"><expr pos:start="213:51" pos:end="213:53"><name pos:start="213:51" pos:end="213:53">jpg</name></expr></argument>, <argument pos:start="213:56" pos:end="213:68"><expr pos:start="213:56" pos:end="213:68"><name pos:start="213:56" pos:end="213:68">reference_ptr</name></expr></argument>)</argument_list></call> <operator pos:start="213:71" pos:end="213:71">&lt;</operator> <literal type="number" pos:start="213:73" pos:end="213:73">0</literal></expr>)</condition><block type="pseudo" pos:start="215:25" pos:end="215:30"><block_content pos:start="215:25" pos:end="215:30">

                        <break pos:start="215:25" pos:end="215:30">break;</break></block_content></block></if></if_stmt>



                    <comment type="block" pos:start="219:21" pos:end="219:68">/* allocate dummy reference picture if needed */</comment>

                    <if_stmt pos:start="221:21" pos:end="227:35"><if pos:start="221:21" pos:end="227:35">if <condition pos:start="221:24" pos:end="225:74">(<expr pos:start="221:25" pos:end="225:73"><operator pos:start="221:25" pos:end="221:25">!</operator><name pos:start="221:26" pos:end="221:47"><name pos:start="221:26" pos:end="221:38">reference_ptr</name><operator pos:start="221:39" pos:end="221:40">-&gt;</operator><name pos:start="221:41" pos:end="221:44">data</name><index pos:start="221:45" pos:end="221:47">[<expr pos:start="221:46" pos:end="221:46"><literal type="number" pos:start="221:46" pos:end="221:46">0</literal></expr>]</index></name> <operator pos:start="221:49" pos:end="221:50">&amp;&amp;</operator>

                        <operator pos:start="223:25" pos:end="223:25">(</operator><name pos:start="223:26" pos:end="223:28">ret</name> <operator pos:start="223:30" pos:end="223:30">=</operator> <call pos:start="223:32" pos:end="225:68"><name pos:start="223:32" pos:end="223:44">ff_get_buffer</name><argument_list pos:start="223:45" pos:end="225:68">(<argument pos:start="223:46" pos:end="223:50"><expr pos:start="223:46" pos:end="223:50"><name pos:start="223:46" pos:end="223:50">avctx</name></expr></argument>, <argument pos:start="223:53" pos:end="223:65"><expr pos:start="223:53" pos:end="223:65"><name pos:start="223:53" pos:end="223:65">reference_ptr</name></expr></argument>,

                                             <argument pos:start="225:46" pos:end="225:67"><expr pos:start="225:46" pos:end="225:67"><name pos:start="225:46" pos:end="225:67">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="225:69" pos:end="225:69">)</operator> <operator pos:start="225:71" pos:end="225:71">&lt;</operator> <literal type="number" pos:start="225:73" pos:end="225:73">0</literal></expr>)</condition><block type="pseudo" pos:start="227:25" pos:end="227:35"><block_content pos:start="227:25" pos:end="227:35">

                        <return pos:start="227:25" pos:end="227:35">return <expr pos:start="227:32" pos:end="227:34"><name pos:start="227:32" pos:end="227:34">ret</name></expr>;</return></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="231:21" pos:end="231:82"><expr pos:start="231:21" pos:end="231:81"><name pos:start="231:21" pos:end="231:23">ret</name> <operator pos:start="231:25" pos:end="231:25">=</operator> <call pos:start="231:27" pos:end="231:81"><name pos:start="231:27" pos:end="231:45">ff_mjpeg_decode_sos</name><argument_list pos:start="231:46" pos:end="231:81">(<argument pos:start="231:47" pos:end="231:49"><expr pos:start="231:47" pos:end="231:49"><name pos:start="231:47" pos:end="231:49">jpg</name></expr></argument>, <argument pos:start="231:52" pos:end="231:65"><expr pos:start="231:52" pos:end="231:65"><name pos:start="231:52" pos:end="231:65"><name pos:start="231:52" pos:end="231:52">s</name><operator pos:start="231:53" pos:end="231:54">-&gt;</operator><name pos:start="231:55" pos:end="231:65">mxm_bitmask</name></name></expr></argument>, <argument pos:start="231:68" pos:end="231:80"><expr pos:start="231:68" pos:end="231:80"><name pos:start="231:68" pos:end="231:80">reference_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="233:21" pos:end="235:35"><if pos:start="233:21" pos:end="235:35">if <condition pos:start="233:24" pos:end="233:76">(<expr pos:start="233:25" pos:end="233:75"><name pos:start="233:25" pos:end="233:27">ret</name> <operator pos:start="233:29" pos:end="233:29">&lt;</operator> <literal type="number" pos:start="233:31" pos:end="233:31">0</literal> <operator pos:start="233:33" pos:end="233:34">&amp;&amp;</operator> <operator pos:start="233:36" pos:end="233:36">(</operator><name pos:start="233:37" pos:end="233:58"><name pos:start="233:37" pos:end="233:41">avctx</name><operator pos:start="233:42" pos:end="233:43">-&gt;</operator><name pos:start="233:44" pos:end="233:58">err_recognition</name></name> <operator pos:start="233:60" pos:end="233:60">&amp;</operator> <name pos:start="233:62" pos:end="233:74">AV_EF_EXPLODE</name><operator pos:start="233:75" pos:end="233:75">)</operator></expr>)</condition><block type="pseudo" pos:start="235:25" pos:end="235:35"><block_content pos:start="235:25" pos:end="235:35">

                        <return pos:start="235:25" pos:end="235:35">return <expr pos:start="235:32" pos:end="235:34"><name pos:start="235:32" pos:end="235:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="237:19" pos:end="245:17">else <block pos:start="237:24" pos:end="245:17">{<block_content pos:start="239:21" pos:end="243:35">

                    <expr_stmt pos:start="239:21" pos:end="239:63"><expr pos:start="239:21" pos:end="239:62"><name pos:start="239:21" pos:end="239:23">ret</name> <operator pos:start="239:25" pos:end="239:25">=</operator> <call pos:start="239:27" pos:end="239:62"><name pos:start="239:27" pos:end="239:45">ff_mjpeg_decode_sos</name><argument_list pos:start="239:46" pos:end="239:62">(<argument pos:start="239:47" pos:end="239:49"><expr pos:start="239:47" pos:end="239:49"><name pos:start="239:47" pos:end="239:49">jpg</name></expr></argument>, <argument pos:start="239:52" pos:end="239:55"><expr pos:start="239:52" pos:end="239:55"><name pos:start="239:52" pos:end="239:55">NULL</name></expr></argument>, <argument pos:start="239:58" pos:end="239:61"><expr pos:start="239:58" pos:end="239:61"><name pos:start="239:58" pos:end="239:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="241:21" pos:end="243:35"><if pos:start="241:21" pos:end="243:35">if <condition pos:start="241:24" pos:end="241:76">(<expr pos:start="241:25" pos:end="241:75"><name pos:start="241:25" pos:end="241:27">ret</name> <operator pos:start="241:29" pos:end="241:29">&lt;</operator> <literal type="number" pos:start="241:31" pos:end="241:31">0</literal> <operator pos:start="241:33" pos:end="241:34">&amp;&amp;</operator> <operator pos:start="241:36" pos:end="241:36">(</operator><name pos:start="241:37" pos:end="241:58"><name pos:start="241:37" pos:end="241:41">avctx</name><operator pos:start="241:42" pos:end="241:43">-&gt;</operator><name pos:start="241:44" pos:end="241:58">err_recognition</name></name> <operator pos:start="241:60" pos:end="241:60">&amp;</operator> <name pos:start="241:62" pos:end="241:74">AV_EF_EXPLODE</name><operator pos:start="241:75" pos:end="241:75">)</operator></expr>)</condition><block type="pseudo" pos:start="243:25" pos:end="243:35"><block_content pos:start="243:25" pos:end="243:35">

                        <return pos:start="243:25" pos:end="243:35">return <expr pos:start="243:32" pos:end="243:34"><name pos:start="243:32" pos:end="243:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></else></if_stmt>



                <break pos:start="249:17" pos:end="249:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="255:13" pos:end="255:57"><expr pos:start="255:13" pos:end="255:56"><name pos:start="255:13" pos:end="255:19">buf_ptr</name> <operator pos:start="255:21" pos:end="255:22">+=</operator> <operator pos:start="255:24" pos:end="255:24">(</operator><call pos:start="255:25" pos:end="255:48"><name pos:start="255:25" pos:end="255:38">get_bits_count</name><argument_list pos:start="255:39" pos:end="255:48">(<argument pos:start="255:40" pos:end="255:47"><expr pos:start="255:40" pos:end="255:47"><operator pos:start="255:40" pos:end="255:40">&amp;</operator><name pos:start="255:41" pos:end="255:47"><name pos:start="255:41" pos:end="255:43">jpg</name><operator pos:start="255:44" pos:end="255:45">-&gt;</operator><name pos:start="255:46" pos:end="255:47">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="255:49" pos:end="255:49">+</operator><literal type="number" pos:start="255:50" pos:end="255:50">7</literal><operator pos:start="255:51" pos:end="255:51">)</operator> <operator pos:start="255:53" pos:end="255:54">&gt;&gt;</operator> <literal type="number" pos:start="255:56" pos:end="255:56">3</literal></expr>;</expr_stmt>

        </block_content>}</block>



    </block_content>}</block></while>



<label pos:start="265:1" pos:end="265:8"><name pos:start="265:1" pos:end="265:7">the_end</name>:</label>

    <if_stmt pos:start="267:5" pos:end="297:5"><if pos:start="267:5" pos:end="297:5">if <condition pos:start="267:8" pos:end="267:25">(<expr pos:start="267:9" pos:end="267:24"><name pos:start="267:9" pos:end="267:24"><name pos:start="267:9" pos:end="267:11">jpg</name><operator pos:start="267:12" pos:end="267:13">-&gt;</operator><name pos:start="267:14" pos:end="267:24">got_picture</name></name></expr>)</condition> <block pos:start="267:27" pos:end="297:5">{<block_content pos:start="269:9" pos:end="295:9">

        <decl_stmt pos:start="269:9" pos:end="269:55"><decl pos:start="269:9" pos:end="269:54"><type pos:start="269:9" pos:end="269:11"><name pos:start="269:9" pos:end="269:11">int</name></type> <name pos:start="269:13" pos:end="269:15">ret</name> <init pos:start="269:17" pos:end="269:54">= <expr pos:start="269:19" pos:end="269:54"><call pos:start="269:19" pos:end="269:54"><name pos:start="269:19" pos:end="269:30">av_frame_ref</name><argument_list pos:start="269:31" pos:end="269:54">(<argument pos:start="269:32" pos:end="269:35"><expr pos:start="269:32" pos:end="269:35"><name pos:start="269:32" pos:end="269:35">data</name></expr></argument>, <argument pos:start="269:38" pos:end="269:53"><expr pos:start="269:38" pos:end="269:53"><name pos:start="269:38" pos:end="269:53"><name pos:start="269:38" pos:end="269:40">jpg</name><operator pos:start="269:41" pos:end="269:42">-&gt;</operator><name pos:start="269:43" pos:end="269:53">picture_ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="271:9" pos:end="273:23"><if pos:start="271:9" pos:end="273:23">if <condition pos:start="271:12" pos:end="271:20">(<expr pos:start="271:13" pos:end="271:19"><name pos:start="271:13" pos:end="271:15">ret</name> <operator pos:start="271:17" pos:end="271:17">&lt;</operator> <literal type="number" pos:start="271:19" pos:end="271:19">0</literal></expr>)</condition><block type="pseudo" pos:start="273:13" pos:end="273:23"><block_content pos:start="273:13" pos:end="273:23">

            <return pos:start="273:13" pos:end="273:23">return <expr pos:start="273:20" pos:end="273:22"><name pos:start="273:20" pos:end="273:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:23"><expr pos:start="275:9" pos:end="275:22"><operator pos:start="275:9" pos:end="275:9">*</operator><name pos:start="275:10" pos:end="275:18">got_frame</name> <operator pos:start="275:20" pos:end="275:20">=</operator> <literal type="number" pos:start="275:22" pos:end="275:22">1</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="279:9" pos:end="279:30"><expr pos:start="279:9" pos:end="279:29"><name pos:start="279:9" pos:end="279:24"><name pos:start="279:9" pos:end="279:9">s</name><operator pos:start="279:10" pos:end="279:11">-&gt;</operator><name pos:start="279:12" pos:end="279:24">picture_index</name></name> <operator pos:start="279:26" pos:end="279:27">^=</operator> <literal type="number" pos:start="279:29" pos:end="279:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:56"><expr pos:start="281:9" pos:end="281:55"><name pos:start="281:9" pos:end="281:24"><name pos:start="281:9" pos:end="281:11">jpg</name><operator pos:start="281:12" pos:end="281:13">-&gt;</operator><name pos:start="281:14" pos:end="281:24">picture_ptr</name></name> <operator pos:start="281:26" pos:end="281:26">=</operator> <name pos:start="281:28" pos:end="281:55"><name pos:start="281:28" pos:end="281:28">s</name><operator pos:start="281:29" pos:end="281:30">-&gt;</operator><name pos:start="281:31" pos:end="281:37">picture</name><index pos:start="281:38" pos:end="281:55">[<expr pos:start="281:39" pos:end="281:54"><name pos:start="281:39" pos:end="281:54"><name pos:start="281:39" pos:end="281:39">s</name><operator pos:start="281:40" pos:end="281:41">-&gt;</operator><name pos:start="281:42" pos:end="281:54">picture_index</name></name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="285:9" pos:end="295:9"><if pos:start="285:9" pos:end="295:9">if <condition pos:start="285:12" pos:end="285:35">(<expr pos:start="285:13" pos:end="285:34"><operator pos:start="285:13" pos:end="285:13">!</operator><name pos:start="285:14" pos:end="285:34"><name pos:start="285:14" pos:end="285:14">s</name><operator pos:start="285:15" pos:end="285:16">-&gt;</operator><name pos:start="285:17" pos:end="285:34">has_complete_frame</name></name></expr>)</condition> <block pos:start="285:37" pos:end="295:9">{<block_content pos:start="287:13" pos:end="293:31">

            <if_stmt pos:start="287:13" pos:end="293:31"><if pos:start="287:13" pos:end="289:42">if <condition pos:start="287:16" pos:end="287:36">(<expr pos:start="287:17" pos:end="287:35"><operator pos:start="287:17" pos:end="287:17">!</operator><name pos:start="287:18" pos:end="287:35"><name pos:start="287:18" pos:end="287:18">s</name><operator pos:start="287:19" pos:end="287:20">-&gt;</operator><name pos:start="287:21" pos:end="287:35">got_mxm_bitmask</name></name></expr>)</condition><block type="pseudo" pos:start="289:17" pos:end="289:42"><block_content pos:start="289:17" pos:end="289:42">

                <expr_stmt pos:start="289:17" pos:end="289:42"><expr pos:start="289:17" pos:end="289:41"><name pos:start="289:17" pos:end="289:37"><name pos:start="289:17" pos:end="289:17">s</name><operator pos:start="289:18" pos:end="289:19">-&gt;</operator><name pos:start="289:20" pos:end="289:37">has_complete_frame</name></name> <operator pos:start="289:39" pos:end="289:39">=</operator> <literal type="number" pos:start="289:41" pos:end="289:41">1</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="291:13" pos:end="293:31">else<block type="pseudo" pos:start="293:17" pos:end="293:31"><block_content pos:start="293:17" pos:end="293:31">

                <expr_stmt pos:start="293:17" pos:end="293:31"><expr pos:start="293:17" pos:end="293:30"><operator pos:start="293:17" pos:end="293:17">*</operator><name pos:start="293:18" pos:end="293:26">got_frame</name> <operator pos:start="293:28" pos:end="293:28">=</operator> <literal type="number" pos:start="293:30" pos:end="293:30">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="301:5" pos:end="301:25">return <expr pos:start="301:12" pos:end="301:24"><name pos:start="301:12" pos:end="301:18">buf_ptr</name> <operator pos:start="301:20" pos:end="301:20">-</operator> <name pos:start="301:22" pos:end="301:24">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
