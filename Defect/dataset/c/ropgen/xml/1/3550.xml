<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3550.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:25">iothread_run</name><parameter_list pos:start="1:26" pos:end="1:39">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:32"><name pos:start="1:27" pos:end="1:30">void</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:38">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:16">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IOThread</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:22">iothread</name> <init pos:start="5:24" pos:end="5:31">= <expr pos:start="5:26" pos:end="5:31"><name pos:start="5:26" pos:end="5:31">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:26"><expr pos:start="9:5" pos:end="9:25"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">rcu_register_thread</name><argument_list pos:start="9:24" pos:end="9:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:27"><expr pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:15">my_iothread</name> <operator pos:start="13:17" pos:end="13:17">=</operator> <name pos:start="13:19" pos:end="13:26">iothread</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:47"><expr pos:start="15:5" pos:end="15:46"><call pos:start="15:5" pos:end="15:46"><name pos:start="15:5" pos:end="15:19">qemu_mutex_lock</name><argument_list pos:start="15:20" pos:end="15:46">(<argument pos:start="15:21" pos:end="15:45"><expr pos:start="15:21" pos:end="15:45"><operator pos:start="15:21" pos:end="15:21">&amp;</operator><name pos:start="15:22" pos:end="15:45"><name pos:start="15:22" pos:end="15:29">iothread</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:45">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:47"><expr pos:start="17:5" pos:end="17:46"><name pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:12">iothread</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:23">thread_id</name></name> <operator pos:start="17:25" pos:end="17:25">=</operator> <call pos:start="17:27" pos:end="17:46"><name pos:start="17:27" pos:end="17:44">qemu_get_thread_id</name><argument_list pos:start="17:45" pos:end="17:46">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:48"><expr pos:start="19:5" pos:end="19:47"><call pos:start="19:5" pos:end="19:47"><name pos:start="19:5" pos:end="19:20">qemu_cond_signal</name><argument_list pos:start="19:21" pos:end="19:47">(<argument pos:start="19:22" pos:end="19:46"><expr pos:start="19:22" pos:end="19:46"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:46"><name pos:start="19:23" pos:end="19:30">iothread</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:46">init_done_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:49"><expr pos:start="21:5" pos:end="21:48"><call pos:start="21:5" pos:end="21:48"><name pos:start="21:5" pos:end="21:21">qemu_mutex_unlock</name><argument_list pos:start="21:22" pos:end="21:48">(<argument pos:start="21:23" pos:end="21:47"><expr pos:start="21:23" pos:end="21:47"><operator pos:start="21:23" pos:end="21:23">&amp;</operator><name pos:start="21:24" pos:end="21:47"><name pos:start="21:24" pos:end="21:31">iothread</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:47">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="25:5" pos:end="59:5">while <condition pos:start="25:11" pos:end="25:45">(<expr pos:start="25:12" pos:end="25:44"><operator pos:start="25:12" pos:end="25:12">!</operator><call pos:start="25:13" pos:end="25:44"><name pos:start="25:13" pos:end="25:23">atomic_read</name><argument_list pos:start="25:24" pos:end="25:44">(<argument pos:start="25:25" pos:end="25:43"><expr pos:start="25:25" pos:end="25:43"><operator pos:start="25:25" pos:end="25:25">&amp;</operator><name pos:start="25:26" pos:end="25:43"><name pos:start="25:26" pos:end="25:33">iothread</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:43">stopping</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:47" pos:end="59:5">{<block_content pos:start="27:9" pos:end="57:9">

        <expr_stmt pos:start="27:9" pos:end="27:38"><expr pos:start="27:9" pos:end="27:37"><call pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:16">aio_poll</name><argument_list pos:start="27:17" pos:end="27:37">(<argument pos:start="27:18" pos:end="27:30"><expr pos:start="27:18" pos:end="27:30"><name pos:start="27:18" pos:end="27:30"><name pos:start="27:18" pos:end="27:25">iothread</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:30">ctx</name></name></expr></argument>, <argument pos:start="27:33" pos:end="27:36"><expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="57:9"><if pos:start="31:9" pos:end="57:9">if <condition pos:start="31:12" pos:end="31:51">(<expr pos:start="31:13" pos:end="31:50"><call pos:start="31:13" pos:end="31:50"><name pos:start="31:13" pos:end="31:23">atomic_read</name><argument_list pos:start="31:24" pos:end="31:50">(<argument pos:start="31:25" pos:end="31:49"><expr pos:start="31:25" pos:end="31:49"><operator pos:start="31:25" pos:end="31:25">&amp;</operator><name pos:start="31:26" pos:end="31:49"><name pos:start="31:26" pos:end="31:33">iothread</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:49">worker_context</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:53" pos:end="57:9">{<block_content pos:start="33:13" pos:end="55:72">

            <decl_stmt pos:start="33:13" pos:end="33:28"><decl pos:start="33:13" pos:end="33:27"><type pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:21">GMainLoop</name> <modifier pos:start="33:23" pos:end="33:23">*</modifier></type><name pos:start="33:24" pos:end="33:27">loop</name></decl>;</decl_stmt>



            <expr_stmt pos:start="37:13" pos:end="37:73"><expr pos:start="37:13" pos:end="37:72"><call pos:start="37:13" pos:end="37:72"><name pos:start="37:13" pos:end="37:46">g_main_context_push_thread_default</name><argument_list pos:start="37:47" pos:end="37:72">(<argument pos:start="37:48" pos:end="37:71"><expr pos:start="37:48" pos:end="37:71"><name pos:start="37:48" pos:end="37:71"><name pos:start="37:48" pos:end="37:55">iothread</name><operator pos:start="37:56" pos:end="37:57">-&gt;</operator><name pos:start="37:58" pos:end="37:71">worker_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="41:64"><expr pos:start="39:13" pos:end="41:63"><name pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:20">iothread</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:31">main_loop</name></name> <operator pos:start="39:33" pos:end="39:33">=</operator>

                <call pos:start="41:17" pos:end="41:63"><name pos:start="41:17" pos:end="41:31">g_main_loop_new</name><argument_list pos:start="41:32" pos:end="41:63">(<argument pos:start="41:33" pos:end="41:56"><expr pos:start="41:33" pos:end="41:56"><name pos:start="41:33" pos:end="41:56"><name pos:start="41:33" pos:end="41:40">iothread</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:56">worker_context</name></name></expr></argument>, <argument pos:start="41:59" pos:end="41:62"><expr pos:start="41:59" pos:end="41:62"><name pos:start="41:59" pos:end="41:62">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:39"><expr pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:16">loop</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:38"><name pos:start="43:20" pos:end="43:27">iothread</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:38">main_loop</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="47:13" pos:end="47:49"><expr pos:start="47:13" pos:end="47:48"><call pos:start="47:13" pos:end="47:48"><name pos:start="47:13" pos:end="47:27">g_main_loop_run</name><argument_list pos:start="47:28" pos:end="47:48">(<argument pos:start="47:29" pos:end="47:47"><expr pos:start="47:29" pos:end="47:47"><name pos:start="47:29" pos:end="47:47"><name pos:start="47:29" pos:end="47:36">iothread</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:47">main_loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:39"><expr pos:start="49:13" pos:end="49:38"><name pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:20">iothread</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:31">main_loop</name></name> <operator pos:start="49:33" pos:end="49:33">=</operator> <name pos:start="49:35" pos:end="49:38">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><call pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:29">g_main_loop_unref</name><argument_list pos:start="51:30" pos:end="51:35">(<argument pos:start="51:31" pos:end="51:34"><expr pos:start="51:31" pos:end="51:34"><name pos:start="51:31" pos:end="51:34">loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="55:13" pos:end="55:72"><expr pos:start="55:13" pos:end="55:71"><call pos:start="55:13" pos:end="55:71"><name pos:start="55:13" pos:end="55:45">g_main_context_pop_thread_default</name><argument_list pos:start="55:46" pos:end="55:71">(<argument pos:start="55:47" pos:end="55:70"><expr pos:start="55:47" pos:end="55:70"><name pos:start="55:47" pos:end="55:70"><name pos:start="55:47" pos:end="55:54">iothread</name><operator pos:start="55:55" pos:end="55:56">-&gt;</operator><name pos:start="55:57" pos:end="55:70">worker_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><call pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:25">rcu_unregister_thread</name><argument_list pos:start="63:26" pos:end="63:27">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="65:16">return <expr pos:start="65:12" pos:end="65:15"><name pos:start="65:12" pos:end="65:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
