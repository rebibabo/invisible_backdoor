<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2688.c" pos:tabs="8"><function pos:start="1:1" pos:end="96:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">decode_rle</name><parameter_list pos:start="1:22" pos:end="3:31">(<parameter pos:start="1:23" pos:end="1:43"><decl pos:start="1:23" pos:end="1:43"><type pos:start="1:23" pos:end="1:43"><name pos:start="1:23" pos:end="1:36">AVCodecContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:43">avctx</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:55"><decl pos:start="1:46" pos:end="1:55"><type pos:start="1:46" pos:end="1:55"><name pos:start="1:46" pos:end="1:52">AVFrame</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">p</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:76"><decl pos:start="1:58" pos:end="1:76"><type pos:start="1:58" pos:end="1:76"><name pos:start="1:58" pos:end="1:71">GetByteContext</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:76">gbc</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:30"><decl pos:start="3:23" pos:end="3:30"><type pos:start="3:23" pos:end="3:30"><name pos:start="3:23" pos:end="3:25">int</name></type> <name pos:start="3:27" pos:end="3:30">step</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="96:1">{<block_content pos:start="7:5" pos:end="94:13">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">offset</name> <init pos:start="9:16" pos:end="9:36">= <expr pos:start="9:18" pos:end="9:36"><name pos:start="9:18" pos:end="9:29"><name pos:start="9:18" pos:end="9:22">avctx</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:29">width</name></name> <operator pos:start="9:31" pos:end="9:31">*</operator> <name pos:start="9:33" pos:end="9:36">step</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">outdata</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:24">p</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">data</name><index pos:start="11:31" pos:end="11:33">[<expr pos:start="11:32" pos:end="11:32"><literal type="number" pos:start="11:32" pos:end="11:32">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="92:5">for <control pos:start="15:9" pos:end="15:39">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:34"><expr pos:start="15:17" pos:end="15:33"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:33"><name pos:start="15:21" pos:end="15:25">avctx</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:33">height</name></name></expr>;</condition> <incr pos:start="15:36" pos:end="15:38"><expr pos:start="15:36" pos:end="15:38"><name pos:start="15:36" pos:end="15:36">i</name><operator pos:start="15:37" pos:end="15:38">++</operator></expr></incr>)</control> <block pos:start="15:41" pos:end="92:5">{<block_content pos:start="17:9" pos:end="90:34">

        <decl_stmt pos:start="17:9" pos:end="17:34"><decl pos:start="17:9" pos:end="17:16"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:16">size</name></decl>, <decl pos:start="17:19" pos:end="17:22"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:19" pos:end="17:22">left</name></decl>, <decl pos:start="17:25" pos:end="17:28"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:25" pos:end="17:28">code</name></decl>, <decl pos:start="17:31" pos:end="17:33"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:31" pos:end="17:33">pix</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:31"><decl pos:start="19:9" pos:end="19:30"><type pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:15">uint8_t</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">out</name> <init pos:start="19:22" pos:end="19:30">= <expr pos:start="19:24" pos:end="19:30"><name pos:start="19:24" pos:end="19:30">outdata</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:20"><decl pos:start="21:9" pos:end="21:19"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:15">pos</name> <init pos:start="21:17" pos:end="21:19">= <expr pos:start="21:19" pos:end="21:19"><literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="25:9" pos:end="25:33">/* size of packed line */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:48"><expr pos:start="27:9" pos:end="27:47"><name pos:start="27:9" pos:end="27:12">size</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:19">left</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:47"><name pos:start="27:23" pos:end="27:42">bytestream2_get_be16</name><argument_list pos:start="27:43" pos:end="27:47">(<argument pos:start="27:44" pos:end="27:46"><expr pos:start="27:44" pos:end="27:46"><name pos:start="27:44" pos:end="27:46">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="88:9"><if pos:start="29:9" pos:end="88:9">if <condition pos:start="29:12" pos:end="29:51">(<expr pos:start="29:13" pos:end="29:50"><call pos:start="29:13" pos:end="29:43"><name pos:start="29:13" pos:end="29:38">bytestream2_get_bytes_left</name><argument_list pos:start="29:39" pos:end="29:43">(<argument pos:start="29:40" pos:end="29:42"><expr pos:start="29:40" pos:end="29:42"><name pos:start="29:40" pos:end="29:42">gbc</name></expr></argument>)</argument_list></call> <operator pos:start="29:45" pos:end="29:45">&lt;</operator> <name pos:start="29:47" pos:end="29:50">size</name></expr>)</condition><block type="pseudo" pos:start="36:9" pos:end="88:9"><block_content pos:start="36:9" pos:end="88:9">




        <comment type="block" pos:start="34:9" pos:end="34:25">/* decode line */</comment>

        <while pos:start="36:9" pos:end="88:9">while <condition pos:start="36:15" pos:end="36:24">(<expr pos:start="36:16" pos:end="36:23"><name pos:start="36:16" pos:end="36:19">left</name> <operator pos:start="36:21" pos:end="36:21">&gt;</operator> <literal type="number" pos:start="36:23" pos:end="36:23">0</literal></expr>)</condition> <block pos:start="36:26" pos:end="88:9">{<block_content pos:start="38:13" pos:end="86:13">

            <expr_stmt pos:start="38:13" pos:end="38:45"><expr pos:start="38:13" pos:end="38:44"><name pos:start="38:13" pos:end="38:16">code</name> <operator pos:start="38:18" pos:end="38:18">=</operator> <call pos:start="38:20" pos:end="38:44"><name pos:start="38:20" pos:end="38:39">bytestream2_get_byte</name><argument_list pos:start="38:40" pos:end="38:44">(<argument pos:start="38:41" pos:end="38:43"><expr pos:start="38:41" pos:end="38:43"><name pos:start="38:41" pos:end="38:43">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="40:13" pos:end="86:13"><if pos:start="40:13" pos:end="64:13">if <condition pos:start="40:16" pos:end="40:29">(<expr pos:start="40:17" pos:end="40:27"><name pos:start="40:17" pos:end="40:20">code</name> <operator pos:start="40:22" pos:end="40:22">&amp;</operator> <literal type="number" pos:start="40:24" pos:end="40:27">0x80</literal></expr> )</condition> <block pos:start="40:31" pos:end="64:13">{<block_content pos:start="42:17" pos:end="62:27"> <comment type="block" pos:start="40:33" pos:end="40:41">/* run */</comment>

                <expr_stmt pos:start="42:17" pos:end="42:48"><expr pos:start="42:17" pos:end="42:47"><name pos:start="42:17" pos:end="42:19">pix</name> <operator pos:start="42:21" pos:end="42:21">=</operator> <call pos:start="42:23" pos:end="42:47"><name pos:start="42:23" pos:end="42:42">bytestream2_get_byte</name><argument_list pos:start="42:43" pos:end="42:47">(<argument pos:start="42:44" pos:end="42:46"><expr pos:start="42:44" pos:end="42:46"><name pos:start="42:44" pos:end="42:46">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="44:17" pos:end="60:17">for <control pos:start="44:21" pos:end="44:48">(<init pos:start="44:22" pos:end="44:27"><expr pos:start="44:22" pos:end="44:26"><name pos:start="44:22" pos:end="44:22">j</name> <operator pos:start="44:24" pos:end="44:24">=</operator> <literal type="number" pos:start="44:26" pos:end="44:26">0</literal></expr>;</init> <condition pos:start="44:29" pos:end="44:43"><expr pos:start="44:29" pos:end="44:42"><name pos:start="44:29" pos:end="44:29">j</name> <operator pos:start="44:31" pos:end="44:31">&lt;</operator> <literal type="number" pos:start="44:33" pos:end="44:37">257</literal> <operator pos:start="44:37" pos:end="44:37">-</operator> <name pos:start="44:39" pos:end="44:42">code</name></expr>;</condition> <incr pos:start="44:45" pos:end="44:47"><expr pos:start="44:45" pos:end="44:47"><name pos:start="44:45" pos:end="44:45">j</name><operator pos:start="44:46" pos:end="44:47">++</operator></expr></incr>)</control> <block pos:start="44:50" pos:end="60:17">{<block_content pos:start="46:21" pos:end="56:21">

                    <expr_stmt pos:start="46:21" pos:end="46:35"><expr pos:start="46:21" pos:end="46:34"><name pos:start="46:21" pos:end="46:28"><name pos:start="46:21" pos:end="46:23">out</name><index pos:start="46:24" pos:end="46:28">[<expr pos:start="46:25" pos:end="46:27"><name pos:start="46:25" pos:end="46:27">pos</name></expr>]</index></name> <operator pos:start="46:30" pos:end="46:30">=</operator> <name pos:start="46:32" pos:end="46:34">pix</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="48:21" pos:end="48:32"><expr pos:start="48:21" pos:end="48:31"><name pos:start="48:21" pos:end="48:23">pos</name> <operator pos:start="48:25" pos:end="48:26">+=</operator> <name pos:start="48:28" pos:end="48:31">step</name></expr>;</expr_stmt>

                    <if_stmt pos:start="50:21" pos:end="56:21"><if pos:start="50:21" pos:end="56:21">if <condition pos:start="50:24" pos:end="50:38">(<expr pos:start="50:25" pos:end="50:37"><name pos:start="50:25" pos:end="50:27">pos</name> <operator pos:start="50:29" pos:end="50:30">&gt;=</operator> <name pos:start="50:32" pos:end="50:37">offset</name></expr>)</condition> <block pos:start="50:40" pos:end="56:21">{<block_content pos:start="52:25" pos:end="54:30">

                        <expr_stmt pos:start="52:25" pos:end="52:38"><expr pos:start="52:25" pos:end="52:37"><name pos:start="52:25" pos:end="52:27">pos</name> <operator pos:start="52:29" pos:end="52:30">-=</operator> <name pos:start="52:32" pos:end="52:37">offset</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="54:25" pos:end="54:30"><expr pos:start="54:25" pos:end="54:29"><name pos:start="54:25" pos:end="54:27">pos</name><operator pos:start="54:28" pos:end="54:29">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                </block_content>}</block></for>

                <expr_stmt pos:start="62:17" pos:end="62:27"><expr pos:start="62:17" pos:end="62:26"><name pos:start="62:17" pos:end="62:20">left</name>  <operator pos:start="62:23" pos:end="62:24">-=</operator> <literal type="number" pos:start="62:26" pos:end="62:26">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="64:15" pos:end="86:13">else <block pos:start="64:20" pos:end="86:13">{<block_content pos:start="66:17" pos:end="84:34"> <comment type="block" pos:start="64:22" pos:end="64:31">/* copy */</comment>

                <for pos:start="66:17" pos:end="82:17">for <control pos:start="66:21" pos:end="66:46">(<init pos:start="66:22" pos:end="66:27"><expr pos:start="66:22" pos:end="66:26"><name pos:start="66:22" pos:end="66:22">j</name> <operator pos:start="66:24" pos:end="66:24">=</operator> <literal type="number" pos:start="66:26" pos:end="66:26">0</literal></expr>;</init> <condition pos:start="66:29" pos:end="66:41"><expr pos:start="66:29" pos:end="66:40"><name pos:start="66:29" pos:end="66:29">j</name> <operator pos:start="66:31" pos:end="66:31">&lt;</operator> <name pos:start="66:33" pos:end="66:36">code</name> <operator pos:start="66:38" pos:end="66:38">+</operator> <literal type="number" pos:start="66:40" pos:end="66:40">1</literal></expr>;</condition> <incr pos:start="66:43" pos:end="66:45"><expr pos:start="66:43" pos:end="66:45"><name pos:start="66:43" pos:end="66:43">j</name><operator pos:start="66:44" pos:end="66:45">++</operator></expr></incr>)</control> <block pos:start="66:48" pos:end="82:17">{<block_content pos:start="68:21" pos:end="78:21">

                    <expr_stmt pos:start="68:21" pos:end="68:57"><expr pos:start="68:21" pos:end="68:56"><name pos:start="68:21" pos:end="68:28"><name pos:start="68:21" pos:end="68:23">out</name><index pos:start="68:24" pos:end="68:28">[<expr pos:start="68:25" pos:end="68:27"><name pos:start="68:25" pos:end="68:27">pos</name></expr>]</index></name> <operator pos:start="68:30" pos:end="68:30">=</operator> <call pos:start="68:32" pos:end="68:56"><name pos:start="68:32" pos:end="68:51">bytestream2_get_byte</name><argument_list pos:start="68:52" pos:end="68:56">(<argument pos:start="68:53" pos:end="68:55"><expr pos:start="68:53" pos:end="68:55"><name pos:start="68:53" pos:end="68:55">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="70:21" pos:end="70:32"><expr pos:start="70:21" pos:end="70:31"><name pos:start="70:21" pos:end="70:23">pos</name> <operator pos:start="70:25" pos:end="70:26">+=</operator> <name pos:start="70:28" pos:end="70:31">step</name></expr>;</expr_stmt>

                    <if_stmt pos:start="72:21" pos:end="78:21"><if pos:start="72:21" pos:end="78:21">if <condition pos:start="72:24" pos:end="72:38">(<expr pos:start="72:25" pos:end="72:37"><name pos:start="72:25" pos:end="72:27">pos</name> <operator pos:start="72:29" pos:end="72:30">&gt;=</operator> <name pos:start="72:32" pos:end="72:37">offset</name></expr>)</condition> <block pos:start="72:40" pos:end="78:21">{<block_content pos:start="74:25" pos:end="76:30">

                        <expr_stmt pos:start="74:25" pos:end="74:38"><expr pos:start="74:25" pos:end="74:37"><name pos:start="74:25" pos:end="74:27">pos</name> <operator pos:start="74:29" pos:end="74:30">-=</operator> <name pos:start="74:32" pos:end="74:37">offset</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="76:25" pos:end="76:30"><expr pos:start="76:25" pos:end="76:29"><name pos:start="76:25" pos:end="76:27">pos</name><operator pos:start="76:28" pos:end="76:29">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                </block_content>}</block></for>

                <expr_stmt pos:start="84:17" pos:end="84:34"><expr pos:start="84:17" pos:end="84:33"><name pos:start="84:17" pos:end="84:20">left</name>  <operator pos:start="84:23" pos:end="84:24">-=</operator> <literal type="number" pos:start="84:26" pos:end="84:28">2</literal> <operator pos:start="84:28" pos:end="84:28">+</operator> <name pos:start="84:30" pos:end="84:33">code</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while></block_content></block></if></if_stmt>

        <expr_stmt pos:start="90:9" pos:end="90:34"><expr pos:start="90:9" pos:end="90:33"><name pos:start="90:9" pos:end="90:15">outdata</name> <operator pos:start="90:17" pos:end="90:18">+=</operator> <name pos:start="90:20" pos:end="90:33"><name pos:start="90:20" pos:end="90:20">p</name><operator pos:start="90:21" pos:end="90:22">-&gt;</operator><name pos:start="90:23" pos:end="90:30">linesize</name><index pos:start="90:31" pos:end="90:33">[<expr pos:start="90:32" pos:end="90:32"><literal type="number" pos:start="90:32" pos:end="90:32">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="94:5" pos:end="94:13">return <expr pos:start="94:12" pos:end="94:12"><literal type="number" pos:start="94:12" pos:end="94:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
