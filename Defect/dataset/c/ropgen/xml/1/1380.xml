<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1380.c" pos:tabs="8"><function pos:start="1:1" pos:end="325:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hyscale</name>)<parameter_list pos:start="1:35" pos:end="7:76">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:43">uint16_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dst</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:62">dstWidth</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:76"><decl pos:start="1:65" pos:end="1:76"><type pos:start="1:65" pos:end="1:76"><name pos:start="1:65" pos:end="1:71">uint8_t</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:76">src</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:86"><decl pos:start="1:79" pos:end="1:86"><type pos:start="1:79" pos:end="1:86"><name pos:start="1:79" pos:end="1:81">int</name></type> <name pos:start="1:83" pos:end="1:86">srcW</name></decl></parameter>, <parameter pos:start="1:89" pos:end="1:96"><decl pos:start="1:89" pos:end="1:96"><type pos:start="1:89" pos:end="1:96"><name pos:start="1:89" pos:end="1:91">int</name></type> <name pos:start="1:93" pos:end="1:96">xInc</name></decl></parameter>,

				   <parameter pos:start="3:36" pos:end="3:44"><decl pos:start="3:36" pos:end="3:44"><type pos:start="3:36" pos:end="3:44"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:44">flags</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:63"><decl pos:start="3:47" pos:end="3:63"><type pos:start="3:47" pos:end="3:63"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:63">canMMX2BeUsed</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:84"><decl pos:start="3:66" pos:end="3:84"><type pos:start="3:66" pos:end="3:84"><name pos:start="3:66" pos:end="3:72">int16_t</name> <modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:84">hLumFilter</name></decl></parameter>,

				   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:42">int16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:57">hLumFilterPos</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:77"><decl pos:start="5:60" pos:end="5:77"><type pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:77">hLumFilterSize</name></decl></parameter>, <parameter pos:start="5:80" pos:end="5:95"><decl pos:start="5:80" pos:end="5:95"><type pos:start="5:80" pos:end="5:95"><name pos:start="5:80" pos:end="5:83">void</name> <modifier pos:start="5:85" pos:end="5:85">*</modifier></type><name pos:start="5:86" pos:end="5:95">funnyYCode</name></decl></parameter>, 

				   <parameter pos:start="7:36" pos:end="7:48"><decl pos:start="7:36" pos:end="7:48"><type pos:start="7:36" pos:end="7:48"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:48">srcFormat</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:75"><decl pos:start="7:51" pos:end="7:75"><type pos:start="7:51" pos:end="7:75"><name pos:start="7:51" pos:end="7:57">uint8_t</name> <modifier pos:start="7:59" pos:end="7:59">*</modifier></type><name pos:start="7:60" pos:end="7:75">formatConvBuffer</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="325:1">{<block_content pos:start="11:5" pos:end="323:5">

    <if_stmt pos:start="11:5" pos:end="84:0"><if pos:start="11:5" pos:end="19:5">if<condition pos:start="11:7" pos:end="11:30">(<expr pos:start="11:8" pos:end="11:29"><name pos:start="11:8" pos:end="11:16">srcFormat</name><operator pos:start="11:17" pos:end="11:18">==</operator><name pos:start="11:19" pos:end="11:29">IMGFMT_YUY2</name></expr>)</condition>

    <block pos:start="13:5" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:30">

	<function_decl pos:start="15:9" pos:end="15:53"><type pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:14">RENAME</name></type>(<name pos:start="15:16" pos:end="15:22">yuy2ToY</name>)<parameter_list pos:start="15:24" pos:end="15:52">(<parameter pos:start="15:25" pos:end="15:40"><decl pos:start="15:25" pos:end="15:40"><type pos:start="15:25" pos:end="15:40"><name pos:start="15:25" pos:end="15:40">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="15:43" pos:end="15:45"><decl pos:start="15:43" pos:end="15:45"><type pos:start="15:43" pos:end="15:45"><name pos:start="15:43" pos:end="15:45">src</name></type></decl></parameter>, <parameter pos:start="15:48" pos:end="15:51"><decl pos:start="15:48" pos:end="15:51"><type pos:start="15:48" pos:end="15:51"><name pos:start="15:48" pos:end="15:51">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:11">src</name><operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="21:5" pos:end="29:5">else if<condition pos:start="21:12" pos:end="21:36">(<expr pos:start="21:13" pos:end="21:35"><name pos:start="21:13" pos:end="21:21">srcFormat</name><operator pos:start="21:22" pos:end="21:23">==</operator><name pos:start="21:24" pos:end="21:35">IMGFMT_BGR32</name></expr>)</condition>

    <block pos:start="23:5" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:30">

	<function_decl pos:start="25:9" pos:end="25:54"><type pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:14">RENAME</name></type>(<name pos:start="25:16" pos:end="25:23">bgr32ToY</name>)<parameter_list pos:start="25:25" pos:end="25:53">(<parameter pos:start="25:26" pos:end="25:41"><decl pos:start="25:26" pos:end="25:41"><type pos:start="25:26" pos:end="25:41"><name pos:start="25:26" pos:end="25:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="25:44" pos:end="25:46"><decl pos:start="25:44" pos:end="25:46"><type pos:start="25:44" pos:end="25:46"><name pos:start="25:44" pos:end="25:46">src</name></type></decl></parameter>, <parameter pos:start="25:49" pos:end="25:52"><decl pos:start="25:49" pos:end="25:52"><type pos:start="25:49" pos:end="25:52"><name pos:start="25:49" pos:end="25:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:11">src</name><operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="31:5" pos:end="39:5">else if<condition pos:start="31:12" pos:end="31:36">(<expr pos:start="31:13" pos:end="31:35"><name pos:start="31:13" pos:end="31:21">srcFormat</name><operator pos:start="31:22" pos:end="31:23">==</operator><name pos:start="31:24" pos:end="31:35">IMGFMT_BGR24</name></expr>)</condition>

    <block pos:start="33:5" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:30">

	<function_decl pos:start="35:9" pos:end="35:54"><type pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:14">RENAME</name></type>(<name pos:start="35:16" pos:end="35:23">bgr24ToY</name>)<parameter_list pos:start="35:25" pos:end="35:53">(<parameter pos:start="35:26" pos:end="35:41"><decl pos:start="35:26" pos:end="35:41"><type pos:start="35:26" pos:end="35:41"><name pos:start="35:26" pos:end="35:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="35:44" pos:end="35:46"><decl pos:start="35:44" pos:end="35:46"><type pos:start="35:44" pos:end="35:46"><name pos:start="35:44" pos:end="35:46">src</name></type></decl></parameter>, <parameter pos:start="35:49" pos:end="35:52"><decl pos:start="35:49" pos:end="35:52"><type pos:start="35:49" pos:end="35:52"><name pos:start="35:49" pos:end="35:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:11">src</name><operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="41:5" pos:end="49:5">else if<condition pos:start="41:12" pos:end="41:36">(<expr pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:21">srcFormat</name><operator pos:start="41:22" pos:end="41:23">==</operator><name pos:start="41:24" pos:end="41:35">IMGFMT_BGR16</name></expr>)</condition>

    <block pos:start="43:5" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:30">

	<function_decl pos:start="45:9" pos:end="45:54"><type pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:14">RENAME</name></type>(<name pos:start="45:16" pos:end="45:23">bgr16ToY</name>)<parameter_list pos:start="45:25" pos:end="45:53">(<parameter pos:start="45:26" pos:end="45:41"><decl pos:start="45:26" pos:end="45:41"><type pos:start="45:26" pos:end="45:41"><name pos:start="45:26" pos:end="45:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="45:44" pos:end="45:46"><decl pos:start="45:44" pos:end="45:46"><type pos:start="45:44" pos:end="45:46"><name pos:start="45:44" pos:end="45:46">src</name></type></decl></parameter>, <parameter pos:start="45:49" pos:end="45:52"><decl pos:start="45:49" pos:end="45:52"><type pos:start="45:49" pos:end="45:52"><name pos:start="45:49" pos:end="45:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:11">src</name><operator pos:start="47:12" pos:end="47:12">=</operator> <name pos:start="47:14" pos:end="47:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="51:5" pos:end="59:5">else if<condition pos:start="51:12" pos:end="51:36">(<expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:21">srcFormat</name><operator pos:start="51:22" pos:end="51:23">==</operator><name pos:start="51:24" pos:end="51:35">IMGFMT_BGR15</name></expr>)</condition>

    <block pos:start="53:5" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:30">

	<function_decl pos:start="55:9" pos:end="55:54"><type pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:14">RENAME</name></type>(<name pos:start="55:16" pos:end="55:23">bgr15ToY</name>)<parameter_list pos:start="55:25" pos:end="55:53">(<parameter pos:start="55:26" pos:end="55:41"><decl pos:start="55:26" pos:end="55:41"><type pos:start="55:26" pos:end="55:41"><name pos:start="55:26" pos:end="55:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="55:44" pos:end="55:46"><decl pos:start="55:44" pos:end="55:46"><type pos:start="55:44" pos:end="55:46"><name pos:start="55:44" pos:end="55:46">src</name></type></decl></parameter>, <parameter pos:start="55:49" pos:end="55:52"><decl pos:start="55:49" pos:end="55:52"><type pos:start="55:49" pos:end="55:52"><name pos:start="55:49" pos:end="55:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:11">src</name><operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="61:5" pos:end="69:5">else if<condition pos:start="61:12" pos:end="61:36">(<expr pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:21">srcFormat</name><operator pos:start="61:22" pos:end="61:23">==</operator><name pos:start="61:24" pos:end="61:35">IMGFMT_RGB32</name></expr>)</condition>

    <block pos:start="63:5" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:30">

	<function_decl pos:start="65:9" pos:end="65:54"><type pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:14">RENAME</name></type>(<name pos:start="65:16" pos:end="65:23">rgb32ToY</name>)<parameter_list pos:start="65:25" pos:end="65:53">(<parameter pos:start="65:26" pos:end="65:41"><decl pos:start="65:26" pos:end="65:41"><type pos:start="65:26" pos:end="65:41"><name pos:start="65:26" pos:end="65:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="65:44" pos:end="65:46"><decl pos:start="65:44" pos:end="65:46"><type pos:start="65:44" pos:end="65:46"><name pos:start="65:44" pos:end="65:46">src</name></type></decl></parameter>, <parameter pos:start="65:49" pos:end="65:52"><decl pos:start="65:49" pos:end="65:52"><type pos:start="65:49" pos:end="65:52"><name pos:start="65:49" pos:end="65:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="67:9" pos:end="67:30"><expr pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:11">src</name><operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="71:5" pos:end="84:0">else if<condition pos:start="71:12" pos:end="71:36">(<expr pos:start="71:13" pos:end="71:35"><name pos:start="71:13" pos:end="71:21">srcFormat</name><operator pos:start="71:22" pos:end="71:23">==</operator><name pos:start="71:24" pos:end="71:35">IMGFMT_RGB24</name></expr>)</condition>

    <block pos:start="73:5" pos:end="84:0">{<block_content pos:start="75:9" pos:end="77:30">

	<function_decl pos:start="75:9" pos:end="75:54"><type pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:14">RENAME</name></type>(<name pos:start="75:16" pos:end="75:23">rgb24ToY</name>)<parameter_list pos:start="75:25" pos:end="75:53">(<parameter pos:start="75:26" pos:end="75:41"><decl pos:start="75:26" pos:end="75:41"><type pos:start="75:26" pos:end="75:41"><name pos:start="75:26" pos:end="75:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="75:44" pos:end="75:46"><decl pos:start="75:44" pos:end="75:46"><type pos:start="75:44" pos:end="75:46"><name pos:start="75:44" pos:end="75:46">src</name></type></decl></parameter>, <parameter pos:start="75:49" pos:end="75:52"><decl pos:start="75:49" pos:end="75:52"><type pos:start="75:49" pos:end="75:52"><name pos:start="75:49" pos:end="75:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:11">src</name><operator pos:start="77:12" pos:end="77:12">=</operator> <name pos:start="77:14" pos:end="77:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="83:1" pos:end="83:15">#<cpp:directive pos:start="83:2" pos:end="83:6">ifdef</cpp:directive> <name pos:start="83:8" pos:end="83:15">HAVE_MMX</name></cpp:ifdef>

	<comment type="line" pos:start="85:9" pos:end="85:90">// use the new MMX scaler if th mmx2 cant be used (its faster than the x86asm one)</comment>

    <if_stmt pos:start="87:5" pos:end="323:5"><if pos:start="87:5" pos:end="323:5">if<condition pos:start="87:7" pos:end="90:0">(<expr pos:start="87:8" pos:end="87:53"><operator pos:start="87:8" pos:end="87:8">!</operator><operator pos:start="87:9" pos:end="87:9">(</operator><name pos:start="87:10" pos:end="87:14">flags</name><operator pos:start="87:15" pos:end="87:15">&amp;</operator><name pos:start="87:16" pos:end="87:32">SWS_FAST_BILINEAR</name><operator pos:start="87:33" pos:end="87:33">)</operator> <operator pos:start="87:35" pos:end="87:36">||</operator> <operator pos:start="87:38" pos:end="87:38">(</operator><operator pos:start="87:39" pos:end="87:39">!</operator><name pos:start="87:40" pos:end="87:52">canMMX2BeUsed</name><operator pos:start="87:53" pos:end="87:53">)</operator></expr>)</condition><block type="pseudo" pos:start="91:5" pos:end="323:5"><block_content pos:start="91:5" pos:end="323:5">

<cpp:else pos:start="89:1" pos:end="89:5">#<cpp:directive pos:start="89:2" pos:end="89:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="91:5" pos:end="323:5"><if pos:start="91:5" pos:end="99:5">if<condition pos:start="91:7" pos:end="94:0">(<expr pos:start="91:8" pos:end="91:33"><operator pos:start="91:8" pos:end="91:8">!</operator><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:14">flags</name><operator pos:start="91:15" pos:end="91:15">&amp;</operator><name pos:start="91:16" pos:end="91:32">SWS_FAST_BILINEAR</name><operator pos:start="91:33" pos:end="91:33">)</operator></expr>)</condition>

<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>

    <block pos:start="95:5" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:98">

    	<function_decl pos:start="97:9" pos:end="97:98"><type pos:start="97:9" pos:end="97:14"><name pos:start="97:9" pos:end="97:14">RENAME</name></type>(<name pos:start="97:16" pos:end="97:21">hScale</name>)<parameter_list pos:start="97:23" pos:end="97:97">(<parameter pos:start="97:24" pos:end="97:26"><decl pos:start="97:24" pos:end="97:26"><type pos:start="97:24" pos:end="97:26"><name pos:start="97:24" pos:end="97:26">dst</name></type></decl></parameter>, <parameter pos:start="97:29" pos:end="97:36"><decl pos:start="97:29" pos:end="97:36"><type pos:start="97:29" pos:end="97:36"><name pos:start="97:29" pos:end="97:36">dstWidth</name></type></decl></parameter>, <parameter pos:start="97:39" pos:end="97:41"><decl pos:start="97:39" pos:end="97:41"><type pos:start="97:39" pos:end="97:41"><name pos:start="97:39" pos:end="97:41">src</name></type></decl></parameter>, <parameter pos:start="97:44" pos:end="97:47"><decl pos:start="97:44" pos:end="97:47"><type pos:start="97:44" pos:end="97:47"><name pos:start="97:44" pos:end="97:47">srcW</name></type></decl></parameter>, <parameter pos:start="97:50" pos:end="97:53"><decl pos:start="97:50" pos:end="97:53"><type pos:start="97:50" pos:end="97:53"><name pos:start="97:50" pos:end="97:53">xInc</name></type></decl></parameter>, <parameter pos:start="97:56" pos:end="97:65"><decl pos:start="97:56" pos:end="97:65"><type pos:start="97:56" pos:end="97:65"><name pos:start="97:56" pos:end="97:65">hLumFilter</name></type></decl></parameter>, <parameter pos:start="97:68" pos:end="97:80"><decl pos:start="97:68" pos:end="97:80"><type pos:start="97:68" pos:end="97:80"><name pos:start="97:68" pos:end="97:80">hLumFilterPos</name></type></decl></parameter>, <parameter pos:start="97:83" pos:end="97:96"><decl pos:start="97:83" pos:end="97:96"><type pos:start="97:83" pos:end="97:96"><name pos:start="97:83" pos:end="97:96">hLumFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

    </block_content>}</block></if>

    <else pos:start="101:5" pos:end="323:5">else <comment type="line" pos:start="101:10" pos:end="101:50">// Fast Bilinear upscale / crap downscale</comment>

    <block pos:start="103:5" pos:end="323:5">{<block_content pos:start="109:9" pos:end="322:0">

<cpp:ifdef pos:start="105:1" pos:end="105:15">#<cpp:directive pos:start="105:2" pos:end="105:6">ifdef</cpp:directive> <name pos:start="105:8" pos:end="105:15">ARCH_X86</name></cpp:ifdef>

<cpp:ifdef pos:start="107:1" pos:end="107:16">#<cpp:directive pos:start="107:2" pos:end="107:6">ifdef</cpp:directive> <name pos:start="107:8" pos:end="107:16">HAVE_MMX2</name></cpp:ifdef>

	<decl_stmt pos:start="109:9" pos:end="109:14"><decl pos:start="109:9" pos:end="109:13"><type pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:11">int</name></type> <name pos:start="109:13" pos:end="109:13">i</name></decl>;</decl_stmt>

	<if_stmt pos:start="111:9" pos:end="302:0"><if pos:start="111:9" pos:end="207:9">if<condition pos:start="111:11" pos:end="111:25">(<expr pos:start="111:12" pos:end="111:24"><name pos:start="111:12" pos:end="111:24">canMMX2BeUsed</name></expr>)</condition>

	<block pos:start="113:9" pos:end="207:9">{<block_content pos:start="115:17" pos:end="205:87">

		<asm pos:start="115:17" pos:end="203:18">asm <specifier pos:start="115:21" pos:end="115:28">volatile</specifier>(

			"pxor %%mm7, %%mm7		\n\t"

			"pxor %%mm2, %%mm2		\n\t" <comment type="line" pos:start="119:63" pos:end="119:73">// 2*xalpha</comment>

			"movd %5, %%mm6			\n\t" <comment type="line" pos:start="121:63" pos:end="121:76">// xInc&amp;0xFFFF</comment>

			"punpcklwd %%mm6, %%mm6		\n\t"

			"punpcklwd %%mm6, %%mm6		\n\t"

			"movq %%mm6, %%mm2		\n\t"

			"psllq $16, %%mm2		\n\t"

			"paddw %%mm6, %%mm2		\n\t"

			"psllq $16, %%mm2		\n\t"

			"paddw %%mm6, %%mm2		\n\t"

			"psllq $16, %%mm2		\n\t" <comment type="line" pos:start="137:63" pos:end="137:99">//0,t,2t,3t		t=xInc&amp;0xFF</comment>

			"movq %%mm2, %%mm4		\n\t"

			"movd %4, %%mm6			\n\t" <comment type="line" pos:start="141:63" pos:end="141:79">//(xInc*4)&amp;0xFFFF</comment>

			"punpcklwd %%mm6, %%mm6		\n\t"

			"punpcklwd %%mm6, %%mm6		\n\t"

			"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="147:63" pos:end="147:66">// i</comment>

			"movl %0, %%esi			\n\t" <comment type="line" pos:start="149:63" pos:end="149:68">// src</comment>

			"movl %1, %%edi			\n\t" <comment type="line" pos:start="151:63" pos:end="151:69">// buf1</comment>

			"movl %3, %%edx			\n\t" <comment type="line" pos:start="153:63" pos:end="153:77">// (xInc*4)&gt;&gt;16</comment>

			"xorl %%ecx, %%ecx		\n\t"

			"xorl %%ebx, %%ebx		\n\t"

			"movw %4, %%bx			\n\t" <comment type="line" pos:start="159:63" pos:end="159:80">// (xInc*4)&amp;0xFFFF</comment>



<cpp:define pos:start="163:1" pos:end="175:61">#<cpp:directive pos:start="163:2" pos:end="163:7">define</cpp:directive> <cpp:macro pos:start="163:9" pos:end="163:20"><name pos:start="163:9" pos:end="163:20">FUNNY_Y_CODE</name></cpp:macro> \

			<cpp:value pos:start="165:25" pos:end="175:61">PREFETCH" 1024(%%esi)		\n\t"\

			PREFETCH" 1056(%%esi)		\n\t"\

			PREFETCH" 1088(%%esi)		\n\t"\

			"call *%6			\n\t"\

			"movq %%mm4, %%mm2		\n\t"\

			"xorl %%ecx, %%ecx		\n\t"</cpp:value></cpp:define>



FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE



			:: "m" (src), "m" (dst), "m" (dstWidth), "m" ((xInc*4)&gt;&gt;16),

			"m" ((xInc*4)&amp;0xFFFF), "m" (xInc&amp;0xFFFF), "m" (funnyYCode)

			: "%eax", "%ebx", "%ecx", "%edx", "%esi", "%edi"

		);</asm>

		<for pos:start="205:17" pos:end="205:87">for<control pos:start="205:20" pos:end="205:61">(<init pos:start="205:21" pos:end="205:33"><expr pos:start="205:21" pos:end="205:32"><name pos:start="205:21" pos:end="205:21">i</name><operator pos:start="205:22" pos:end="205:22">=</operator><name pos:start="205:23" pos:end="205:30">dstWidth</name><operator pos:start="205:31" pos:end="205:31">-</operator><literal type="number" pos:start="205:32" pos:end="205:32">1</literal></expr>;</init> <condition pos:start="205:35" pos:end="205:56"><expr pos:start="205:35" pos:end="205:55"><operator pos:start="205:35" pos:end="205:35">(</operator><name pos:start="205:36" pos:end="205:36">i</name><operator pos:start="205:37" pos:end="205:37">*</operator><name pos:start="205:38" pos:end="205:41">xInc</name><operator pos:start="205:42" pos:end="205:42">)</operator><operator pos:start="205:43" pos:end="205:44">&gt;&gt;</operator><literal type="number" pos:start="205:45" pos:end="205:46">16</literal> <operator pos:start="205:48" pos:end="205:49">&gt;=</operator><name pos:start="205:50" pos:end="205:53">srcW</name><operator pos:start="205:54" pos:end="205:54">-</operator><literal type="number" pos:start="205:55" pos:end="205:55">1</literal></expr>;</condition> <incr pos:start="205:58" pos:end="205:60"><expr pos:start="205:58" pos:end="205:60"><name pos:start="205:58" pos:end="205:58">i</name><operator pos:start="205:59" pos:end="205:60">--</operator></expr></incr>)</control><block type="pseudo" pos:start="205:63" pos:end="205:87"><block_content pos:start="205:63" pos:end="205:87"> <expr_stmt pos:start="205:63" pos:end="205:87"><expr pos:start="205:63" pos:end="205:86"><name pos:start="205:63" pos:end="205:68"><name pos:start="205:63" pos:end="205:65">dst</name><index pos:start="205:66" pos:end="205:68">[<expr pos:start="205:67" pos:end="205:67"><name pos:start="205:67" pos:end="205:67">i</name></expr>]</index></name> <operator pos:start="205:70" pos:end="205:70">=</operator> <name pos:start="205:72" pos:end="205:82"><name pos:start="205:72" pos:end="205:74">src</name><index pos:start="205:75" pos:end="205:82">[<expr pos:start="205:76" pos:end="205:81"><name pos:start="205:76" pos:end="205:79">srcW</name><operator pos:start="205:80" pos:end="205:80">-</operator><literal type="number" pos:start="205:81" pos:end="205:81">1</literal></expr>]</index></name><operator pos:start="205:83" pos:end="205:83">*</operator><literal type="number" pos:start="205:84" pos:end="205:86">128</literal></expr>;</expr_stmt></block_content></block></for>

	</block_content>}</block></if>

	<else pos:start="209:9" pos:end="302:0">else

	<block pos:start="211:9" pos:end="302:0">{<block_content pos:start="217:9" pos:end="296:0">

<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>

	<comment type="line" pos:start="215:9" pos:end="215:36">//NO MMX just normal asm ...</comment>

	<asm pos:start="217:9" pos:end="296:0">asm <specifier pos:start="217:13" pos:end="217:20">volatile</specifier>(

		"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="219:55" pos:end="219:58">// i</comment>

		"xorl %%ebx, %%ebx		\n\t" <comment type="line" pos:start="221:55" pos:end="221:59">// xx</comment>

		"xorl %%ecx, %%ecx		\n\t" <comment type="line" pos:start="223:55" pos:end="223:65">// 2*xalpha</comment>

		".balign 16			\n\t"

		"1:				\n\t"

		"movzbl  (%0, %%ebx), %%edi	\n\t" <comment type="line" pos:start="229:55" pos:end="229:63">//src[xx]</comment>

		"movzbl 1(%0, %%ebx), %%esi	\n\t" <comment type="line" pos:start="231:55" pos:end="231:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="233:55" pos:end="233:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="235:55" pos:end="235:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="239:55" pos:end="239:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"movl %1, %%edi			\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, (%%edi, %%eax, 2)	\n\t"

		"addw %4, %%cx			\n\t" <comment type="line" pos:start="247:55" pos:end="247:77">//2*xalpha += xInc&amp;0xFF</comment>

		"adcl %3, %%ebx			\n\t" <comment type="line" pos:start="249:55" pos:end="249:76">//xx+= xInc&gt;&gt;8 + carry</comment>



		"movzbl (%0, %%ebx), %%edi	\n\t" <comment type="line" pos:start="253:55" pos:end="253:63">//src[xx]</comment>

		"movzbl 1(%0, %%ebx), %%esi	\n\t" <comment type="line" pos:start="255:55" pos:end="255:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="257:55" pos:end="257:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="259:55" pos:end="259:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="263:55" pos:end="263:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"movl %1, %%edi			\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, 2(%%edi, %%eax, 2)	\n\t"

		"addw %4, %%cx			\n\t" <comment type="line" pos:start="271:55" pos:end="271:77">//2*xalpha += xInc&amp;0xFF</comment>

		"adcl %3, %%ebx			\n\t" <comment type="line" pos:start="273:55" pos:end="273:76">//xx+= xInc&gt;&gt;8 + carry</comment>





		"addl $2, %%eax			\n\t"

		"cmpl %2, %%eax			\n\t"

		" jb 1b				\n\t"





		:: "r" (src), "m" (dst), "m" (dstWidth), "m" (xInc&gt;&gt;16), "m" (xInc&amp;0xFFFF)

		: "%eax", "%ebx", "%ecx", "%edi", "%esi"

		);</asm>

<cpp:ifdef pos:start="295:1" pos:end="295:16">#<cpp:directive pos:start="295:2" pos:end="295:6">ifdef</cpp:directive> <name pos:start="295:8" pos:end="295:16">HAVE_MMX2</name></cpp:ifdef>

	</block_content>}</block></else></if_stmt> <comment type="line" pos:start="297:11" pos:end="297:32">//if MMX2 cant be used</comment>

<cpp:endif pos:start="299:1" pos:end="299:6">#<cpp:directive pos:start="299:2" pos:end="299:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="301:1" pos:end="301:5">#<cpp:directive pos:start="301:2" pos:end="301:5">else</cpp:directive></cpp:else>

	<decl_stmt pos:start="303:9" pos:end="303:14"><decl pos:start="303:9" pos:end="303:13"><type pos:start="303:9" pos:end="303:11"><name pos:start="303:9" pos:end="303:11">int</name></type> <name pos:start="303:13" pos:end="303:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="305:9" pos:end="305:28"><decl pos:start="305:9" pos:end="305:27"><type pos:start="305:9" pos:end="305:20"><name pos:start="305:9" pos:end="305:16">unsigned</name> <name pos:start="305:18" pos:end="305:20">int</name></type> <name pos:start="305:22" pos:end="305:25">xpos</name><init pos:start="305:26" pos:end="305:27">=<expr pos:start="305:27" pos:end="305:27"><literal type="number" pos:start="305:27" pos:end="305:27">0</literal></expr></init></decl>;</decl_stmt>

	<for pos:start="307:9" pos:end="322:0">for<control pos:start="307:12" pos:end="307:31">(<init pos:start="307:13" pos:end="307:16"><expr pos:start="307:13" pos:end="307:15"><name pos:start="307:13" pos:end="307:13">i</name><operator pos:start="307:14" pos:end="307:14">=</operator><literal type="number" pos:start="307:15" pos:end="307:15">0</literal></expr>;</init><condition pos:start="307:17" pos:end="307:27"><expr pos:start="307:17" pos:end="307:26"><name pos:start="307:17" pos:end="307:17">i</name><operator pos:start="307:18" pos:end="307:18">&lt;</operator><name pos:start="307:19" pos:end="307:26">dstWidth</name></expr>;</condition><incr pos:start="307:28" pos:end="307:30"><expr pos:start="307:28" pos:end="307:30"><name pos:start="307:28" pos:end="307:28">i</name><operator pos:start="307:29" pos:end="307:30">++</operator></expr></incr>)</control>

	<block pos:start="309:9" pos:end="322:0">{<block_content pos:start="311:17" pos:end="317:27">

		<decl_stmt pos:start="311:17" pos:end="311:50"><decl pos:start="311:17" pos:end="311:49"><type pos:start="311:17" pos:end="311:37"><specifier pos:start="311:17" pos:end="311:24">register</specifier> <name pos:start="311:26" pos:end="311:33">unsigned</name> <name pos:start="311:35" pos:end="311:37">int</name></type> <name pos:start="311:39" pos:end="311:40">xx</name><init pos:start="311:41" pos:end="311:49">=<expr pos:start="311:42" pos:end="311:49"><name pos:start="311:42" pos:end="311:45">xpos</name><operator pos:start="311:46" pos:end="311:47">&gt;&gt;</operator><literal type="number" pos:start="311:48" pos:end="311:49">16</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="313:17" pos:end="313:62"><decl pos:start="313:17" pos:end="313:61"><type pos:start="313:17" pos:end="313:37"><specifier pos:start="313:17" pos:end="313:24">register</specifier> <name pos:start="313:26" pos:end="313:33">unsigned</name> <name pos:start="313:35" pos:end="313:37">int</name></type> <name pos:start="313:39" pos:end="313:44">xalpha</name><init pos:start="313:45" pos:end="313:61">=<expr pos:start="313:46" pos:end="313:61"><operator pos:start="313:46" pos:end="313:46">(</operator><name pos:start="313:47" pos:end="313:50">xpos</name><operator pos:start="313:51" pos:end="313:51">&amp;</operator><literal type="number" pos:start="313:52" pos:end="313:57">0xFFFF</literal><operator pos:start="313:58" pos:end="313:58">)</operator><operator pos:start="313:59" pos:end="313:60">&gt;&gt;</operator><literal type="number" pos:start="313:61" pos:end="313:61">9</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="315:17" pos:end="315:68"><expr pos:start="315:17" pos:end="315:67"><name pos:start="315:17" pos:end="315:22"><name pos:start="315:17" pos:end="315:19">dst</name><index pos:start="315:20" pos:end="315:22">[<expr pos:start="315:21" pos:end="315:21"><name pos:start="315:21" pos:end="315:21">i</name></expr>]</index></name><operator pos:start="315:23" pos:end="315:23">=</operator> <operator pos:start="315:25" pos:end="315:25">(</operator><name pos:start="315:26" pos:end="315:32"><name pos:start="315:26" pos:end="315:28">src</name><index pos:start="315:29" pos:end="315:32">[<expr pos:start="315:30" pos:end="315:31"><name pos:start="315:30" pos:end="315:31">xx</name></expr>]</index></name><operator pos:start="315:33" pos:end="315:34">&lt;&lt;</operator><literal type="number" pos:start="315:35" pos:end="315:35">7</literal><operator pos:start="315:36" pos:end="315:36">)</operator> <operator pos:start="315:38" pos:end="315:38">+</operator> <operator pos:start="315:40" pos:end="315:40">(</operator><name pos:start="315:41" pos:end="315:49"><name pos:start="315:41" pos:end="315:43">src</name><index pos:start="315:44" pos:end="315:49">[<expr pos:start="315:45" pos:end="315:48"><name pos:start="315:45" pos:end="315:46">xx</name><operator pos:start="315:47" pos:end="315:47">+</operator><literal type="number" pos:start="315:48" pos:end="315:48">1</literal></expr>]</index></name> <operator pos:start="315:51" pos:end="315:51">-</operator> <name pos:start="315:53" pos:end="315:59"><name pos:start="315:53" pos:end="315:55">src</name><index pos:start="315:56" pos:end="315:59">[<expr pos:start="315:57" pos:end="315:58"><name pos:start="315:57" pos:end="315:58">xx</name></expr>]</index></name><operator pos:start="315:60" pos:end="315:60">)</operator><operator pos:start="315:61" pos:end="315:61">*</operator><name pos:start="315:62" pos:end="315:67">xalpha</name></expr>;</expr_stmt>

		<expr_stmt pos:start="317:17" pos:end="317:27"><expr pos:start="317:17" pos:end="317:26"><name pos:start="317:17" pos:end="317:20">xpos</name><operator pos:start="317:21" pos:end="317:22">+=</operator><name pos:start="317:23" pos:end="317:26">xInc</name></expr>;</expr_stmt>

	</block_content>}</block></for>

<cpp:endif pos:start="321:1" pos:end="321:6">#<cpp:directive pos:start="321:2" pos:end="321:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
