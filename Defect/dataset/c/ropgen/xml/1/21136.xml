<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21136.c" pos:tabs="8"><function pos:start="1:1" pos:end="313:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:16">TranslationBlock</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:29">tb_gen_code</name><parameter_list pos:start="1:30" pos:end="5:57">(<parameter pos:start="1:31" pos:end="1:43"><decl pos:start="1:31" pos:end="1:43"><type pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:38">CPUState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">cpu</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:45"><decl pos:start="3:31" pos:end="3:45"><type pos:start="3:31" pos:end="3:45"><name pos:start="3:31" pos:end="3:42">target_ulong</name></type> <name pos:start="3:44" pos:end="3:45">pc</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:67"><decl pos:start="3:48" pos:end="3:67"><type pos:start="3:48" pos:end="3:67"><name pos:start="3:48" pos:end="3:59">target_ulong</name></type> <name pos:start="3:61" pos:end="3:67">cs_base</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:44"><decl pos:start="5:31" pos:end="5:44"><type pos:start="5:31" pos:end="5:44"><name pos:start="5:31" pos:end="5:38">uint32_t</name></type> <name pos:start="5:40" pos:end="5:44">flags</name></decl></parameter>, <parameter pos:start="5:47" pos:end="5:56"><decl pos:start="5:47" pos:end="5:56"><type pos:start="5:47" pos:end="5:56"><name pos:start="5:47" pos:end="5:49">int</name></type> <name pos:start="5:51" pos:end="5:56">cflags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="313:1">{<block_content pos:start="9:5" pos:end="311:14">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">CPUArchState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">env</name> <init pos:start="9:23" pos:end="9:36">= <expr pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">TranslationBlock</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">tb_page_addr_t</name></type> <name pos:start="13:20" pos:end="13:26">phys_pc</name></decl>, <decl pos:start="13:29" pos:end="13:38"><type ref="prev" pos:start="13:5" pos:end="13:18"/><name pos:start="13:29" pos:end="13:38">phys_page2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:27">virt_page2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">tcg_insn_unit</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:31">gen_code_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="22:0"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:21">gen_code_size</name></decl>, <decl pos:start="19:24" pos:end="19:34"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:24" pos:end="19:34">search_size</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="21:1" pos:end="21:22">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:22">CONFIG_PROFILER</name></cpp:ifdef>

    <decl_stmt pos:start="23:5" pos:end="26:0"><decl pos:start="23:5" pos:end="23:14"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:14">ti</name></decl>;</decl_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="27:5" pos:end="27:25"><expr pos:start="27:5" pos:end="27:24"><call pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:22">assert_memory_lock</name><argument_list pos:start="27:23" pos:end="27:24">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:42"><expr pos:start="31:5" pos:end="31:41"><name pos:start="31:5" pos:end="31:11">phys_pc</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:41"><name pos:start="31:15" pos:end="31:32">get_page_addr_code</name><argument_list pos:start="31:33" pos:end="31:41">(<argument pos:start="31:34" pos:end="31:36"><expr pos:start="31:34" pos:end="31:36"><name pos:start="31:34" pos:end="31:36">env</name></expr></argument>, <argument pos:start="31:39" pos:end="31:40"><expr pos:start="31:39" pos:end="31:40"><name pos:start="31:39" pos:end="31:40">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:51">(<expr pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:18">use_icount</name> <operator pos:start="33:20" pos:end="33:21">&amp;&amp;</operator> <operator pos:start="33:23" pos:end="33:23">!</operator><operator pos:start="33:24" pos:end="33:24">(</operator><name pos:start="33:25" pos:end="33:30">cflags</name> <operator pos:start="33:32" pos:end="33:32">&amp;</operator> <name pos:start="33:34" pos:end="33:49">CF_IGNORE_ICOUNT</name><operator pos:start="33:50" pos:end="33:50">)</operator></expr>)</condition> <block pos:start="33:53" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:32">

        <expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:14">cflags</name> <operator pos:start="35:16" pos:end="35:17">|=</operator> <name pos:start="35:19" pos:end="35:31">CF_USE_ICOUNT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:6">tb</name> <operator pos:start="41:8" pos:end="41:8">=</operator> <call pos:start="41:10" pos:end="41:21"><name pos:start="41:10" pos:end="41:17">tb_alloc</name><argument_list pos:start="41:18" pos:end="41:21">(<argument pos:start="41:19" pos:end="41:20"><expr pos:start="41:19" pos:end="41:20"><name pos:start="41:19" pos:end="41:20">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="59:5"><if pos:start="43:5" pos:end="59:5">if <condition pos:start="43:8" pos:end="43:22">(<expr pos:start="43:9" pos:end="43:21"><call pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:16">unlikely</name><argument_list pos:start="43:17" pos:end="43:21">(<argument pos:start="43:18" pos:end="43:20"><expr pos:start="43:18" pos:end="43:20"><operator pos:start="43:18" pos:end="43:18">!</operator><name pos:start="43:19" pos:end="43:20">tb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:24" pos:end="59:5">{<block_content pos:start="45:2" pos:end="57:27">

 <label pos:start="45:2" pos:end="45:17"><name pos:start="45:2" pos:end="45:16">buffer_overflow</name>:</label>

        <comment type="block" pos:start="47:9" pos:end="47:32">/* flush must be done */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:22"><expr pos:start="49:9" pos:end="49:21"><call pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:16">tb_flush</name><argument_list pos:start="49:17" pos:end="49:21">(<argument pos:start="49:18" pos:end="49:20"><expr pos:start="49:18" pos:end="49:20"><name pos:start="49:18" pos:end="49:20">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><call pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:19">mmap_unlock</name><argument_list pos:start="51:20" pos:end="51:21">()</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="53:9" pos:end="53:77">/* Make the execution loop process the flush as soon as possible.  */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:46"><expr pos:start="55:9" pos:end="55:45"><name pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:11">cpu</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:28">exception_index</name></name> <operator pos:start="55:30" pos:end="55:30">=</operator> <name pos:start="55:32" pos:end="55:45">EXCP_INTERRUPT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:27"><expr pos:start="57:9" pos:end="57:26"><call pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:21">cpu_loop_exit</name><argument_list pos:start="57:22" pos:end="57:26">(<argument pos:start="57:23" pos:end="57:25"><expr pos:start="57:23" pos:end="57:25"><name pos:start="57:23" pos:end="57:25">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:40"><expr pos:start="63:5" pos:end="63:39"><name pos:start="63:5" pos:end="63:16">gen_code_buf</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:39"><name pos:start="63:20" pos:end="63:26">tcg_ctx</name><operator pos:start="63:27" pos:end="63:27">.</operator><name pos:start="63:28" pos:end="63:39">code_gen_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:14"><name pos:start="65:5" pos:end="65:6">tb</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:14">tc_ptr</name></name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:29">gen_code_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:16"><expr pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:10"><name pos:start="67:5" pos:end="67:6">tb</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:10">pc</name></name> <operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:15">pc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:26"><expr pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:15"><name pos:start="69:5" pos:end="69:6">tb</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:15">cs_base</name></name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:25">cs_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:22"><expr pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:6">tb</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:13">flags</name></name> <operator pos:start="71:15" pos:end="71:15">=</operator> <name pos:start="71:17" pos:end="71:21">flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:24"><expr pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:14"><name pos:start="73:5" pos:end="73:6">tb</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:14">cflags</name></name> <operator pos:start="73:16" pos:end="73:16">=</operator> <name pos:start="73:18" pos:end="73:23">cflags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:47"><expr pos:start="75:5" pos:end="75:46"><name pos:start="75:5" pos:end="75:25"><name pos:start="75:5" pos:end="75:6">tb</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:25">trace_vcpu_dstate</name></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <operator pos:start="75:29" pos:end="75:29">*</operator><name pos:start="75:30" pos:end="75:46"><name pos:start="75:30" pos:end="75:32">cpu</name><operator pos:start="75:33" pos:end="75:34">-&gt;</operator><name pos:start="75:35" pos:end="75:46">trace_dstate</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="82:0"><expr pos:start="77:5" pos:end="77:23"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:6">tb</name><operator pos:start="77:7" pos:end="77:8">-&gt;</operator><name pos:start="77:9" pos:end="77:15">invalid</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:23">false</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="81:1" pos:end="81:22">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="83:5" pos:end="83:24"><expr pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:21"><name pos:start="83:5" pos:end="83:11">tcg_ctx</name><operator pos:start="83:12" pos:end="83:12">.</operator><name pos:start="83:13" pos:end="83:21">tb_count1</name></name><operator pos:start="83:22" pos:end="83:23">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="83:26" pos:end="85:36">/* includes aborted translations because of

                       exceptions */</comment>

    <expr_stmt pos:start="87:5" pos:end="90:0"><expr pos:start="87:5" pos:end="87:27"><name pos:start="87:5" pos:end="87:6">ti</name> <operator pos:start="87:8" pos:end="87:8">=</operator> <call pos:start="87:10" pos:end="87:27"><name pos:start="87:10" pos:end="87:25">profile_getclock</name><argument_list pos:start="87:26" pos:end="87:27">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="93:5" pos:end="93:29"><expr pos:start="93:5" pos:end="93:28"><call pos:start="93:5" pos:end="93:28"><name pos:start="93:5" pos:end="93:18">tcg_func_start</name><argument_list pos:start="93:19" pos:end="93:28">(<argument pos:start="93:20" pos:end="93:27"><expr pos:start="93:20" pos:end="93:27"><operator pos:start="93:20" pos:end="93:20">&amp;</operator><name pos:start="93:21" pos:end="93:27">tcg_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:35"><expr pos:start="97:5" pos:end="97:34"><name pos:start="97:5" pos:end="97:15"><name pos:start="97:5" pos:end="97:11">tcg_ctx</name><operator pos:start="97:12" pos:end="97:12">.</operator><name pos:start="97:13" pos:end="97:15">cpu</name></name> <operator pos:start="97:17" pos:end="97:17">=</operator> <call pos:start="97:19" pos:end="97:34"><name pos:start="97:19" pos:end="97:29">ENV_GET_CPU</name><argument_list pos:start="97:30" pos:end="97:34">(<argument pos:start="97:31" pos:end="97:33"><expr pos:start="97:31" pos:end="97:33"><name pos:start="97:31" pos:end="97:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:35"><expr pos:start="99:5" pos:end="99:34"><call pos:start="99:5" pos:end="99:34"><name pos:start="99:5" pos:end="99:25">gen_intermediate_code</name><argument_list pos:start="99:26" pos:end="99:34">(<argument pos:start="99:27" pos:end="99:29"><expr pos:start="99:27" pos:end="99:29"><name pos:start="99:27" pos:end="99:29">cpu</name></expr></argument>, <argument pos:start="99:32" pos:end="99:33"><expr pos:start="99:32" pos:end="99:33"><name pos:start="99:32" pos:end="99:33">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:23"><expr pos:start="101:5" pos:end="101:22"><name pos:start="101:5" pos:end="101:15"><name pos:start="101:5" pos:end="101:11">tcg_ctx</name><operator pos:start="101:12" pos:end="101:12">.</operator><name pos:start="101:13" pos:end="101:15">cpu</name></name> <operator pos:start="101:17" pos:end="101:17">=</operator> <name pos:start="101:19" pos:end="101:22">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:50"><expr pos:start="105:5" pos:end="105:49"><call pos:start="105:5" pos:end="105:49"><name pos:start="105:5" pos:end="105:25">trace_translate_block</name><argument_list pos:start="105:26" pos:end="105:49">(<argument pos:start="105:27" pos:end="105:28"><expr pos:start="105:27" pos:end="105:28"><name pos:start="105:27" pos:end="105:28">tb</name></expr></argument>, <argument pos:start="105:31" pos:end="105:36"><expr pos:start="105:31" pos:end="105:36"><name pos:start="105:31" pos:end="105:36"><name pos:start="105:31" pos:end="105:32">tb</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:36">pc</name></name></expr></argument>, <argument pos:start="105:39" pos:end="105:48"><expr pos:start="105:39" pos:end="105:48"><name pos:start="105:39" pos:end="105:48"><name pos:start="105:39" pos:end="105:40">tb</name><operator pos:start="105:41" pos:end="105:42">-&gt;</operator><name pos:start="105:43" pos:end="105:48">tc_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:31">/* generate machine code */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:58"><expr pos:start="111:5" pos:end="111:57"><name pos:start="111:5" pos:end="111:27"><name pos:start="111:5" pos:end="111:6">tb</name><operator pos:start="111:7" pos:end="111:8">-&gt;</operator><name pos:start="111:9" pos:end="111:24">jmp_reset_offset</name><index pos:start="111:25" pos:end="111:27">[<expr pos:start="111:26" pos:end="111:26"><literal type="number" pos:start="111:26" pos:end="111:26">0</literal></expr>]</index></name> <operator pos:start="111:29" pos:end="111:29">=</operator> <name pos:start="111:31" pos:end="111:57">TB_JMP_RESET_OFFSET_INVALID</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:58"><expr pos:start="113:5" pos:end="113:57"><name pos:start="113:5" pos:end="113:27"><name pos:start="113:5" pos:end="113:6">tb</name><operator pos:start="113:7" pos:end="113:8">-&gt;</operator><name pos:start="113:9" pos:end="113:24">jmp_reset_offset</name><index pos:start="113:25" pos:end="113:27">[<expr pos:start="113:26" pos:end="113:26"><literal type="number" pos:start="113:26" pos:end="113:26">1</literal></expr>]</index></name> <operator pos:start="113:29" pos:end="113:29">=</operator> <name pos:start="113:31" pos:end="113:57">TB_JMP_RESET_OFFSET_INVALID</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:55"><expr pos:start="115:5" pos:end="115:54"><name pos:start="115:5" pos:end="115:31"><name pos:start="115:5" pos:end="115:11">tcg_ctx</name><operator pos:start="115:12" pos:end="115:12">.</operator><name pos:start="115:13" pos:end="115:31">tb_jmp_reset_offset</name></name> <operator pos:start="115:33" pos:end="115:33">=</operator> <name pos:start="115:35" pos:end="115:54"><name pos:start="115:35" pos:end="115:36">tb</name><operator pos:start="115:37" pos:end="115:38">-&gt;</operator><name pos:start="115:39" pos:end="115:54">jmp_reset_offset</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="134:0"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:35">(<expr pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:34">TCG_TARGET_HAS_direct_jump</name></expr>)</condition> <block pos:start="117:37" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:42">

        <expr_stmt pos:start="119:9" pos:end="119:56"><expr pos:start="119:9" pos:end="119:55"><name pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:15">tcg_ctx</name><operator pos:start="119:16" pos:end="119:16">.</operator><name pos:start="119:17" pos:end="119:34">tb_jmp_insn_offset</name></name> <operator pos:start="119:36" pos:end="119:36">=</operator> <name pos:start="119:38" pos:end="119:55"><name pos:start="119:38" pos:end="119:39">tb</name><operator pos:start="119:40" pos:end="119:41">-&gt;</operator><name pos:start="119:42" pos:end="119:55">jmp_target_arg</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:42"><expr pos:start="121:9" pos:end="121:41"><name pos:start="121:9" pos:end="121:34"><name pos:start="121:9" pos:end="121:15">tcg_ctx</name><operator pos:start="121:16" pos:end="121:16">.</operator><name pos:start="121:17" pos:end="121:34">tb_jmp_target_addr</name></name> <operator pos:start="121:36" pos:end="121:36">=</operator> <name pos:start="121:38" pos:end="121:41">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="123:7" pos:end="134:0">else <block pos:start="123:12" pos:end="134:0">{<block_content pos:start="125:9" pos:end="127:56">

        <expr_stmt pos:start="125:9" pos:end="125:42"><expr pos:start="125:9" pos:end="125:41"><name pos:start="125:9" pos:end="125:34"><name pos:start="125:9" pos:end="125:15">tcg_ctx</name><operator pos:start="125:16" pos:end="125:16">.</operator><name pos:start="125:17" pos:end="125:34">tb_jmp_insn_offset</name></name> <operator pos:start="125:36" pos:end="125:36">=</operator> <name pos:start="125:38" pos:end="125:41">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:56"><expr pos:start="127:9" pos:end="127:55"><name pos:start="127:9" pos:end="127:34"><name pos:start="127:9" pos:end="127:15">tcg_ctx</name><operator pos:start="127:16" pos:end="127:16">.</operator><name pos:start="127:17" pos:end="127:34">tb_jmp_target_addr</name></name> <operator pos:start="127:36" pos:end="127:36">=</operator> <name pos:start="127:38" pos:end="127:55"><name pos:start="127:38" pos:end="127:39">tb</name><operator pos:start="127:40" pos:end="127:41">-&gt;</operator><name pos:start="127:42" pos:end="127:55">jmp_target_arg</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="133:1" pos:end="133:22">#<cpp:directive pos:start="133:2" pos:end="133:6">ifdef</cpp:directive> <name pos:start="133:8" pos:end="133:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="135:5" pos:end="135:23"><expr pos:start="135:5" pos:end="135:22"><name pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:11">tcg_ctx</name><operator pos:start="135:12" pos:end="135:12">.</operator><name pos:start="135:13" pos:end="135:20">tb_count</name></name><operator pos:start="135:21" pos:end="135:22">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:51"><expr pos:start="137:5" pos:end="137:50"><name pos:start="137:5" pos:end="137:23"><name pos:start="137:5" pos:end="137:11">tcg_ctx</name><operator pos:start="137:12" pos:end="137:12">.</operator><name pos:start="137:13" pos:end="137:23">interm_time</name></name> <operator pos:start="137:25" pos:end="137:26">+=</operator> <call pos:start="137:28" pos:end="137:45"><name pos:start="137:28" pos:end="137:43">profile_getclock</name><argument_list pos:start="137:44" pos:end="137:45">()</argument_list></call> <operator pos:start="137:47" pos:end="137:47">-</operator> <name pos:start="137:49" pos:end="137:50">ti</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="142:0"><expr pos:start="139:5" pos:end="139:43"><name pos:start="139:5" pos:end="139:21"><name pos:start="139:5" pos:end="139:11">tcg_ctx</name><operator pos:start="139:12" pos:end="139:12">.</operator><name pos:start="139:13" pos:end="139:21">code_time</name></name> <operator pos:start="139:23" pos:end="139:24">-=</operator> <call pos:start="139:26" pos:end="139:43"><name pos:start="139:26" pos:end="139:41">profile_getclock</name><argument_list pos:start="139:42" pos:end="139:43">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="145:5" pos:end="153:76">/* ??? Overflow could be handled better here.  In particular, we

       don't need to re-do gen_intermediate_code, nor should we re-do

       the tcg optimization currently hidden inside tcg_gen_code.  All

       that should be required is to flush the TBs, allocate a new TB,

       re-initialize it per above, and re-do the actual code generation.  */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:47"><expr pos:start="155:5" pos:end="155:46"><name pos:start="155:5" pos:end="155:17">gen_code_size</name> <operator pos:start="155:19" pos:end="155:19">=</operator> <call pos:start="155:21" pos:end="155:46"><name pos:start="155:21" pos:end="155:32">tcg_gen_code</name><argument_list pos:start="155:33" pos:end="155:46">(<argument pos:start="155:34" pos:end="155:41"><expr pos:start="155:34" pos:end="155:41"><operator pos:start="155:34" pos:end="155:34">&amp;</operator><name pos:start="155:35" pos:end="155:41">tcg_ctx</name></expr></argument>, <argument pos:start="155:44" pos:end="155:45"><expr pos:start="155:44" pos:end="155:45"><name pos:start="155:44" pos:end="155:45">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="161:5"><if pos:start="157:5" pos:end="161:5">if <condition pos:start="157:8" pos:end="157:36">(<expr pos:start="157:9" pos:end="157:35"><call pos:start="157:9" pos:end="157:35"><name pos:start="157:9" pos:end="157:16">unlikely</name><argument_list pos:start="157:17" pos:end="157:35">(<argument pos:start="157:18" pos:end="157:34"><expr pos:start="157:18" pos:end="157:34"><name pos:start="157:18" pos:end="157:30">gen_code_size</name> <operator pos:start="157:32" pos:end="157:32">&lt;</operator> <literal type="number" pos:start="157:34" pos:end="157:34">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:38" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:29">

        <goto pos:start="159:9" pos:end="159:29">goto <name pos:start="159:14" pos:end="159:28">buffer_overflow</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:74"><expr pos:start="163:5" pos:end="163:73"><name pos:start="163:5" pos:end="163:15">search_size</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <call pos:start="163:19" pos:end="163:73"><name pos:start="163:19" pos:end="163:31">encode_search</name><argument_list pos:start="163:32" pos:end="163:73">(<argument pos:start="163:33" pos:end="163:34"><expr pos:start="163:33" pos:end="163:34"><name pos:start="163:33" pos:end="163:34">tb</name></expr></argument>, <argument pos:start="163:37" pos:end="163:72"><expr pos:start="163:37" pos:end="163:72"><operator pos:start="163:37" pos:end="163:37">(</operator><name pos:start="163:38" pos:end="163:41">void</name> <operator pos:start="163:43" pos:end="163:43">*</operator><operator pos:start="163:44" pos:end="163:44">)</operator><name pos:start="163:45" pos:end="163:56">gen_code_buf</name> <operator pos:start="163:58" pos:end="163:58">+</operator> <name pos:start="163:60" pos:end="163:72">gen_code_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="165:5" pos:end="174:0"><if pos:start="165:5" pos:end="174:0">if <condition pos:start="165:8" pos:end="165:34">(<expr pos:start="165:9" pos:end="165:33"><call pos:start="165:9" pos:end="165:33"><name pos:start="165:9" pos:end="165:16">unlikely</name><argument_list pos:start="165:17" pos:end="165:33">(<argument pos:start="165:18" pos:end="165:32"><expr pos:start="165:18" pos:end="165:32"><name pos:start="165:18" pos:end="165:28">search_size</name> <operator pos:start="165:30" pos:end="165:30">&lt;</operator> <literal type="number" pos:start="165:32" pos:end="165:32">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:36" pos:end="174:0">{<block_content pos:start="167:9" pos:end="167:29">

        <goto pos:start="167:9" pos:end="167:29">goto <name pos:start="167:14" pos:end="167:28">buffer_overflow</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="173:1" pos:end="173:22">#<cpp:directive pos:start="173:2" pos:end="173:6">ifdef</cpp:directive> <name pos:start="173:8" pos:end="173:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="175:5" pos:end="175:44"><expr pos:start="175:5" pos:end="175:43"><name pos:start="175:5" pos:end="175:21"><name pos:start="175:5" pos:end="175:11">tcg_ctx</name><operator pos:start="175:12" pos:end="175:12">.</operator><name pos:start="175:13" pos:end="175:21">code_time</name></name> <operator pos:start="175:23" pos:end="175:24">+=</operator> <call pos:start="175:26" pos:end="175:43"><name pos:start="175:26" pos:end="175:41">profile_getclock</name><argument_list pos:start="175:42" pos:end="175:43">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:36"><expr pos:start="177:5" pos:end="177:35"><name pos:start="177:5" pos:end="177:23"><name pos:start="177:5" pos:end="177:11">tcg_ctx</name><operator pos:start="177:12" pos:end="177:12">.</operator><name pos:start="177:13" pos:end="177:23">code_in_len</name></name> <operator pos:start="177:25" pos:end="177:26">+=</operator> <name pos:start="177:28" pos:end="177:35"><name pos:start="177:28" pos:end="177:29">tb</name><operator pos:start="177:30" pos:end="177:31">-&gt;</operator><name pos:start="177:32" pos:end="177:35">size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:42"><expr pos:start="179:5" pos:end="179:41"><name pos:start="179:5" pos:end="179:24"><name pos:start="179:5" pos:end="179:11">tcg_ctx</name><operator pos:start="179:12" pos:end="179:12">.</operator><name pos:start="179:13" pos:end="179:24">code_out_len</name></name> <operator pos:start="179:26" pos:end="179:27">+=</operator> <name pos:start="179:29" pos:end="179:41">gen_code_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="188:0"><expr pos:start="181:5" pos:end="181:41"><name pos:start="181:5" pos:end="181:26"><name pos:start="181:5" pos:end="181:11">tcg_ctx</name><operator pos:start="181:12" pos:end="181:12">.</operator><name pos:start="181:13" pos:end="181:26">search_out_len</name></name> <operator pos:start="181:28" pos:end="181:29">+=</operator> <name pos:start="181:31" pos:end="181:41">search_size</name></expr>;</expr_stmt>

<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="187:1" pos:end="187:18">#<cpp:directive pos:start="187:2" pos:end="187:6">ifdef</cpp:directive> <name pos:start="187:8" pos:end="187:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="189:5" pos:end="248:0"><if pos:start="189:5" pos:end="248:0">if <condition pos:start="189:8" pos:end="191:39">(<expr pos:start="189:9" pos:end="191:38"><call pos:start="189:9" pos:end="189:46"><name pos:start="189:9" pos:end="189:26">qemu_loglevel_mask</name><argument_list pos:start="189:27" pos:end="189:46">(<argument pos:start="189:28" pos:end="189:45"><expr pos:start="189:28" pos:end="189:45"><name pos:start="189:28" pos:end="189:45">CPU_LOG_TB_OUT_ASM</name></expr></argument>)</argument_list></call> <operator pos:start="189:48" pos:end="189:49">&amp;&amp;</operator>

        <call pos:start="191:9" pos:end="191:38"><name pos:start="191:9" pos:end="191:30">qemu_log_in_addr_range</name><argument_list pos:start="191:31" pos:end="191:38">(<argument pos:start="191:32" pos:end="191:37"><expr pos:start="191:32" pos:end="191:37"><name pos:start="191:32" pos:end="191:37"><name pos:start="191:32" pos:end="191:33">tb</name><operator pos:start="191:34" pos:end="191:35">-&gt;</operator><name pos:start="191:36" pos:end="191:37">pc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:41" pos:end="248:0">{<block_content pos:start="193:9" pos:end="243:26">

        <expr_stmt pos:start="193:9" pos:end="193:24"><expr pos:start="193:9" pos:end="193:23"><call pos:start="193:9" pos:end="193:23"><name pos:start="193:9" pos:end="193:21">qemu_log_lock</name><argument_list pos:start="193:22" pos:end="193:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:52"><expr pos:start="195:9" pos:end="195:51"><call pos:start="195:9" pos:end="195:51"><name pos:start="195:9" pos:end="195:16">qemu_log</name><argument_list pos:start="195:17" pos:end="195:51">(<argument pos:start="195:18" pos:end="195:35"><expr pos:start="195:18" pos:end="195:35"><literal type="string" pos:start="195:18" pos:end="195:35">"OUT: [size=%d]\n"</literal></expr></argument>, <argument pos:start="195:38" pos:end="195:50"><expr pos:start="195:38" pos:end="195:50"><name pos:start="195:38" pos:end="195:50">gen_code_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="237:9"><if pos:start="197:9" pos:end="233:9">if <condition pos:start="197:12" pos:end="197:33">(<expr pos:start="197:13" pos:end="197:32"><name pos:start="197:13" pos:end="197:32"><name pos:start="197:13" pos:end="197:19">tcg_ctx</name><operator pos:start="197:20" pos:end="197:20">.</operator><name pos:start="197:21" pos:end="197:32">data_gen_ptr</name></name></expr>)</condition> <block pos:start="197:35" pos:end="233:9">{<block_content pos:start="199:13" pos:end="231:13">

            <decl_stmt pos:start="199:13" pos:end="199:65"><decl pos:start="199:13" pos:end="199:64"><type pos:start="199:13" pos:end="199:18"><name pos:start="199:13" pos:end="199:18">size_t</name></type> <name pos:start="199:20" pos:end="199:28">code_size</name> <init pos:start="199:30" pos:end="199:64">= <expr pos:start="199:32" pos:end="199:64"><name pos:start="199:32" pos:end="199:51"><name pos:start="199:32" pos:end="199:38">tcg_ctx</name><operator pos:start="199:39" pos:end="199:39">.</operator><name pos:start="199:40" pos:end="199:51">data_gen_ptr</name></name> <operator pos:start="199:53" pos:end="199:53">-</operator> <name pos:start="199:55" pos:end="199:64"><name pos:start="199:55" pos:end="199:56">tb</name><operator pos:start="199:57" pos:end="199:58">-&gt;</operator><name pos:start="199:59" pos:end="199:64">tc_ptr</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="201:13" pos:end="201:57"><decl pos:start="201:13" pos:end="201:56"><type pos:start="201:13" pos:end="201:18"><name pos:start="201:13" pos:end="201:18">size_t</name></type> <name pos:start="201:20" pos:end="201:28">data_size</name> <init pos:start="201:30" pos:end="201:56">= <expr pos:start="201:32" pos:end="201:56"><name pos:start="201:32" pos:end="201:44">gen_code_size</name> <operator pos:start="201:46" pos:end="201:46">-</operator> <name pos:start="201:48" pos:end="201:56">code_size</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="203:13" pos:end="203:21"><decl pos:start="203:13" pos:end="203:20"><type pos:start="203:13" pos:end="203:18"><name pos:start="203:13" pos:end="203:18">size_t</name></type> <name pos:start="203:20" pos:end="203:20">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:45"><expr pos:start="207:13" pos:end="207:44"><call pos:start="207:13" pos:end="207:44"><name pos:start="207:13" pos:end="207:21">log_disas</name><argument_list pos:start="207:22" pos:end="207:44">(<argument pos:start="207:23" pos:end="207:32"><expr pos:start="207:23" pos:end="207:32"><name pos:start="207:23" pos:end="207:32"><name pos:start="207:23" pos:end="207:24">tb</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:32">tc_ptr</name></name></expr></argument>, <argument pos:start="207:35" pos:end="207:43"><expr pos:start="207:35" pos:end="207:43"><name pos:start="207:35" pos:end="207:43">code_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="211:13" pos:end="231:13">for <control pos:start="211:17" pos:end="211:69">(<init pos:start="211:18" pos:end="211:23"><expr pos:start="211:18" pos:end="211:22"><name pos:start="211:18" pos:end="211:18">i</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <literal type="number" pos:start="211:22" pos:end="211:22">0</literal></expr>;</init> <condition pos:start="211:25" pos:end="211:38"><expr pos:start="211:25" pos:end="211:37"><name pos:start="211:25" pos:end="211:25">i</name> <operator pos:start="211:27" pos:end="211:27">&lt;</operator> <name pos:start="211:29" pos:end="211:37">data_size</name></expr>;</condition> <incr pos:start="211:40" pos:end="211:68"><expr pos:start="211:40" pos:end="211:68"><name pos:start="211:40" pos:end="211:40">i</name> <operator pos:start="211:42" pos:end="211:43">+=</operator> <sizeof pos:start="211:45" pos:end="211:68">sizeof<argument_list pos:start="211:51" pos:end="211:68">(<argument pos:start="211:52" pos:end="211:67"><expr pos:start="211:52" pos:end="211:67"><name pos:start="211:52" pos:end="211:67">tcg_target_ulong</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block pos:start="211:71" pos:end="231:13">{<block_content pos:start="213:17" pos:end="229:17">

                <if_stmt pos:start="213:17" pos:end="229:17"><if pos:start="213:17" pos:end="221:17">if <condition pos:start="213:20" pos:end="213:50">(<expr pos:start="213:21" pos:end="213:49"><sizeof pos:start="213:21" pos:end="213:44">sizeof<argument_list pos:start="213:27" pos:end="213:44">(<argument pos:start="213:28" pos:end="213:43"><expr pos:start="213:28" pos:end="213:43"><name pos:start="213:28" pos:end="213:43">tcg_target_ulong</name></expr></argument>)</argument_list></sizeof> <operator pos:start="213:46" pos:end="213:47">==</operator> <literal type="number" pos:start="213:49" pos:end="213:49">8</literal></expr>)</condition> <block pos:start="213:52" pos:end="221:17">{<block_content pos:start="215:21" pos:end="219:70">

                    <expr_stmt pos:start="215:21" pos:end="219:70"><expr pos:start="215:21" pos:end="219:69"><call pos:start="215:21" pos:end="219:69"><name pos:start="215:21" pos:end="215:28">qemu_log</name><argument_list pos:start="215:29" pos:end="219:69">(<argument pos:start="215:30" pos:end="215:75"><expr pos:start="215:30" pos:end="215:75"><literal type="string" pos:start="215:30" pos:end="215:36">"0x%08"</literal> <name pos:start="215:38" pos:end="215:44">PRIxPTR</name> <literal type="string" pos:start="215:46" pos:end="215:63">":  .quad  0x%016"</literal> <name pos:start="215:65" pos:end="215:70">PRIx64</name> <literal type="string" pos:start="215:72" pos:end="215:75">"\n"</literal></expr></argument>,

                             <argument pos:start="217:30" pos:end="217:64"><expr pos:start="217:30" pos:end="217:64"><operator pos:start="217:30" pos:end="217:30">(</operator><name pos:start="217:31" pos:end="217:39">uintptr_t</name><operator pos:start="217:40" pos:end="217:40">)</operator><name pos:start="217:41" pos:end="217:60"><name pos:start="217:41" pos:end="217:47">tcg_ctx</name><operator pos:start="217:48" pos:end="217:48">.</operator><name pos:start="217:49" pos:end="217:60">data_gen_ptr</name></name> <operator pos:start="217:62" pos:end="217:62">+</operator> <name pos:start="217:64" pos:end="217:64">i</name></expr></argument>,

                             <argument pos:start="219:30" pos:end="219:68"><expr pos:start="219:30" pos:end="219:68"><operator pos:start="219:30" pos:end="219:30">*</operator><operator pos:start="219:31" pos:end="219:31">(</operator><name pos:start="219:32" pos:end="219:39">uint64_t</name> <operator pos:start="219:41" pos:end="219:41">*</operator><operator pos:start="219:42" pos:end="219:42">)</operator><operator pos:start="219:43" pos:end="219:43">(</operator><name pos:start="219:44" pos:end="219:63"><name pos:start="219:44" pos:end="219:50">tcg_ctx</name><operator pos:start="219:51" pos:end="219:51">.</operator><name pos:start="219:52" pos:end="219:63">data_gen_ptr</name></name> <operator pos:start="219:65" pos:end="219:65">+</operator> <name pos:start="219:67" pos:end="219:67">i</name><operator pos:start="219:68" pos:end="219:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="221:19" pos:end="229:17">else <block pos:start="221:24" pos:end="229:17">{<block_content pos:start="223:21" pos:end="227:70">

                    <expr_stmt pos:start="223:21" pos:end="227:70"><expr pos:start="223:21" pos:end="227:69"><call pos:start="223:21" pos:end="227:69"><name pos:start="223:21" pos:end="223:28">qemu_log</name><argument_list pos:start="223:29" pos:end="227:69">(<argument pos:start="223:30" pos:end="223:65"><expr pos:start="223:30" pos:end="223:65"><literal type="string" pos:start="223:30" pos:end="223:36">"0x%08"</literal> <name pos:start="223:38" pos:end="223:44">PRIxPTR</name> <literal type="string" pos:start="223:46" pos:end="223:65">":  .long  0x%08x\n"</literal></expr></argument>,

                             <argument pos:start="225:30" pos:end="225:64"><expr pos:start="225:30" pos:end="225:64"><operator pos:start="225:30" pos:end="225:30">(</operator><name pos:start="225:31" pos:end="225:39">uintptr_t</name><operator pos:start="225:40" pos:end="225:40">)</operator><name pos:start="225:41" pos:end="225:60"><name pos:start="225:41" pos:end="225:47">tcg_ctx</name><operator pos:start="225:48" pos:end="225:48">.</operator><name pos:start="225:49" pos:end="225:60">data_gen_ptr</name></name> <operator pos:start="225:62" pos:end="225:62">+</operator> <name pos:start="225:64" pos:end="225:64">i</name></expr></argument>,

                             <argument pos:start="227:30" pos:end="227:68"><expr pos:start="227:30" pos:end="227:68"><operator pos:start="227:30" pos:end="227:30">*</operator><operator pos:start="227:31" pos:end="227:31">(</operator><name pos:start="227:32" pos:end="227:39">uint32_t</name> <operator pos:start="227:41" pos:end="227:41">*</operator><operator pos:start="227:42" pos:end="227:42">)</operator><operator pos:start="227:43" pos:end="227:43">(</operator><name pos:start="227:44" pos:end="227:63"><name pos:start="227:44" pos:end="227:50">tcg_ctx</name><operator pos:start="227:51" pos:end="227:51">.</operator><name pos:start="227:52" pos:end="227:63">data_gen_ptr</name></name> <operator pos:start="227:65" pos:end="227:65">+</operator> <name pos:start="227:67" pos:end="227:67">i</name><operator pos:start="227:68" pos:end="227:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="233:11" pos:end="237:9">else <block pos:start="233:16" pos:end="237:9">{<block_content pos:start="235:13" pos:end="235:49">

            <expr_stmt pos:start="235:13" pos:end="235:49"><expr pos:start="235:13" pos:end="235:48"><call pos:start="235:13" pos:end="235:48"><name pos:start="235:13" pos:end="235:21">log_disas</name><argument_list pos:start="235:22" pos:end="235:48">(<argument pos:start="235:23" pos:end="235:32"><expr pos:start="235:23" pos:end="235:32"><name pos:start="235:23" pos:end="235:32"><name pos:start="235:23" pos:end="235:24">tb</name><operator pos:start="235:25" pos:end="235:26">-&gt;</operator><name pos:start="235:27" pos:end="235:32">tc_ptr</name></name></expr></argument>, <argument pos:start="235:35" pos:end="235:47"><expr pos:start="235:35" pos:end="235:47"><name pos:start="235:35" pos:end="235:47">gen_code_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:23"><expr pos:start="239:9" pos:end="239:22"><call pos:start="239:9" pos:end="239:22"><name pos:start="239:9" pos:end="239:16">qemu_log</name><argument_list pos:start="239:17" pos:end="239:22">(<argument pos:start="239:18" pos:end="239:21"><expr pos:start="239:18" pos:end="239:21"><literal type="string" pos:start="239:18" pos:end="239:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:25"><expr pos:start="241:9" pos:end="241:24"><call pos:start="241:9" pos:end="241:24"><name pos:start="241:9" pos:end="241:22">qemu_log_flush</name><argument_list pos:start="241:23" pos:end="241:24">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:26"><expr pos:start="243:9" pos:end="243:25"><call pos:start="243:9" pos:end="243:25"><name pos:start="243:9" pos:end="243:23">qemu_log_unlock</name><argument_list pos:start="243:24" pos:end="243:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="247:1" pos:end="247:6">#<cpp:directive pos:start="247:2" pos:end="247:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="251:5" pos:end="255:33"><expr pos:start="251:5" pos:end="255:32"><name pos:start="251:5" pos:end="251:24"><name pos:start="251:5" pos:end="251:11">tcg_ctx</name><operator pos:start="251:12" pos:end="251:12">.</operator><name pos:start="251:13" pos:end="251:24">code_gen_ptr</name></name> <operator pos:start="251:26" pos:end="251:26">=</operator> <operator pos:start="251:28" pos:end="251:28">(</operator><name pos:start="251:29" pos:end="251:32">void</name> <operator pos:start="251:34" pos:end="251:34">*</operator><operator pos:start="251:35" pos:end="251:35">)</operator>

        <call pos:start="253:9" pos:end="255:32"><name pos:start="253:9" pos:end="253:16">ROUND_UP</name><argument_list pos:start="253:17" pos:end="255:32">(<argument pos:start="253:18" pos:end="253:70"><expr pos:start="253:18" pos:end="253:70"><operator pos:start="253:18" pos:end="253:18">(</operator><name pos:start="253:19" pos:end="253:27">uintptr_t</name><operator pos:start="253:28" pos:end="253:28">)</operator><name pos:start="253:29" pos:end="253:40">gen_code_buf</name> <operator pos:start="253:42" pos:end="253:42">+</operator> <name pos:start="253:44" pos:end="253:56">gen_code_size</name> <operator pos:start="253:58" pos:end="253:58">+</operator> <name pos:start="253:60" pos:end="253:70">search_size</name></expr></argument>,

                 <argument pos:start="255:18" pos:end="255:31"><expr pos:start="255:18" pos:end="255:31"><name pos:start="255:18" pos:end="255:31">CODE_GEN_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="259:5" pos:end="259:24">/* init jump list */</comment>

    <expr_stmt pos:start="261:5" pos:end="261:37"><expr pos:start="261:5" pos:end="261:36"><call pos:start="261:5" pos:end="261:36"><name pos:start="261:5" pos:end="261:10">assert</name><argument_list pos:start="261:11" pos:end="261:36">(<argument pos:start="261:12" pos:end="261:35"><expr pos:start="261:12" pos:end="261:35"><operator pos:start="261:12" pos:end="261:12">(</operator><operator pos:start="261:13" pos:end="261:13">(</operator><name pos:start="261:14" pos:end="261:22">uintptr_t</name><operator pos:start="261:23" pos:end="261:23">)</operator><name pos:start="261:24" pos:end="261:25">tb</name> <operator pos:start="261:27" pos:end="261:27">&amp;</operator> <literal type="number" pos:start="261:29" pos:end="261:29">3</literal><operator pos:start="261:30" pos:end="261:30">)</operator> <operator pos:start="261:32" pos:end="261:33">==</operator> <literal type="number" pos:start="261:35" pos:end="261:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:43"><expr pos:start="263:5" pos:end="263:42"><name pos:start="263:5" pos:end="263:22"><name pos:start="263:5" pos:end="263:6">tb</name><operator pos:start="263:7" pos:end="263:8">-&gt;</operator><name pos:start="263:9" pos:end="263:22">jmp_list_first</name></name> <operator pos:start="263:24" pos:end="263:24">=</operator> <operator pos:start="263:26" pos:end="263:26">(</operator><name pos:start="263:27" pos:end="263:35">uintptr_t</name><operator pos:start="263:36" pos:end="263:36">)</operator><name pos:start="263:37" pos:end="263:38">tb</name> <operator pos:start="263:40" pos:end="263:40">|</operator> <literal type="number" pos:start="263:42" pos:end="263:42">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:43"><expr pos:start="265:5" pos:end="265:42"><name pos:start="265:5" pos:end="265:24"><name pos:start="265:5" pos:end="265:6">tb</name><operator pos:start="265:7" pos:end="265:8">-&gt;</operator><name pos:start="265:9" pos:end="265:21">jmp_list_next</name><index pos:start="265:22" pos:end="265:24">[<expr pos:start="265:23" pos:end="265:23"><literal type="number" pos:start="265:23" pos:end="265:23">0</literal></expr>]</index></name> <operator pos:start="265:26" pos:end="265:26">=</operator> <operator pos:start="265:28" pos:end="265:28">(</operator><name pos:start="265:29" pos:end="265:37">uintptr_t</name><operator pos:start="265:38" pos:end="265:38">)</operator><name pos:start="265:39" pos:end="265:42">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:43"><expr pos:start="267:5" pos:end="267:42"><name pos:start="267:5" pos:end="267:24"><name pos:start="267:5" pos:end="267:6">tb</name><operator pos:start="267:7" pos:end="267:8">-&gt;</operator><name pos:start="267:9" pos:end="267:21">jmp_list_next</name><index pos:start="267:22" pos:end="267:24">[<expr pos:start="267:23" pos:end="267:23"><literal type="number" pos:start="267:23" pos:end="267:23">1</literal></expr>]</index></name> <operator pos:start="267:26" pos:end="267:26">=</operator> <operator pos:start="267:28" pos:end="267:28">(</operator><name pos:start="267:29" pos:end="267:37">uintptr_t</name><operator pos:start="267:38" pos:end="267:38">)</operator><name pos:start="267:39" pos:end="267:42">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="271:5" pos:end="271:78">/* init original jump addresses wich has been set during tcg_gen_code() */</comment>

    <if_stmt pos:start="273:5" pos:end="277:5"><if pos:start="273:5" pos:end="277:5">if <condition pos:start="273:8" pos:end="273:63">(<expr pos:start="273:9" pos:end="273:62"><name pos:start="273:9" pos:end="273:31"><name pos:start="273:9" pos:end="273:10">tb</name><operator pos:start="273:11" pos:end="273:12">-&gt;</operator><name pos:start="273:13" pos:end="273:28">jmp_reset_offset</name><index pos:start="273:29" pos:end="273:31">[<expr pos:start="273:30" pos:end="273:30"><literal type="number" pos:start="273:30" pos:end="273:30">0</literal></expr>]</index></name> <operator pos:start="273:33" pos:end="273:34">!=</operator> <name pos:start="273:36" pos:end="273:62">TB_JMP_RESET_OFFSET_INVALID</name></expr>)</condition> <block pos:start="273:65" pos:end="277:5">{<block_content pos:start="275:9" pos:end="275:29">

        <expr_stmt pos:start="275:9" pos:end="275:29"><expr pos:start="275:9" pos:end="275:28"><call pos:start="275:9" pos:end="275:28"><name pos:start="275:9" pos:end="275:21">tb_reset_jump</name><argument_list pos:start="275:22" pos:end="275:28">(<argument pos:start="275:23" pos:end="275:24"><expr pos:start="275:23" pos:end="275:24"><name pos:start="275:23" pos:end="275:24">tb</name></expr></argument>, <argument pos:start="275:27" pos:end="275:27"><expr pos:start="275:27" pos:end="275:27"><literal type="number" pos:start="275:27" pos:end="275:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="279:5" pos:end="283:5"><if pos:start="279:5" pos:end="283:5">if <condition pos:start="279:8" pos:end="279:63">(<expr pos:start="279:9" pos:end="279:62"><name pos:start="279:9" pos:end="279:31"><name pos:start="279:9" pos:end="279:10">tb</name><operator pos:start="279:11" pos:end="279:12">-&gt;</operator><name pos:start="279:13" pos:end="279:28">jmp_reset_offset</name><index pos:start="279:29" pos:end="279:31">[<expr pos:start="279:30" pos:end="279:30"><literal type="number" pos:start="279:30" pos:end="279:30">1</literal></expr>]</index></name> <operator pos:start="279:33" pos:end="279:34">!=</operator> <name pos:start="279:36" pos:end="279:62">TB_JMP_RESET_OFFSET_INVALID</name></expr>)</condition> <block pos:start="279:65" pos:end="283:5">{<block_content pos:start="281:9" pos:end="281:29">

        <expr_stmt pos:start="281:9" pos:end="281:29"><expr pos:start="281:9" pos:end="281:28"><call pos:start="281:9" pos:end="281:28"><name pos:start="281:9" pos:end="281:21">tb_reset_jump</name><argument_list pos:start="281:22" pos:end="281:28">(<argument pos:start="281:23" pos:end="281:24"><expr pos:start="281:23" pos:end="281:24"><name pos:start="281:23" pos:end="281:24">tb</name></expr></argument>, <argument pos:start="281:27" pos:end="281:27"><expr pos:start="281:27" pos:end="281:27"><literal type="number" pos:start="281:27" pos:end="281:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="287:5" pos:end="287:35">/* check next page if needed */</comment>

    <expr_stmt pos:start="289:5" pos:end="289:56"><expr pos:start="289:5" pos:end="289:55"><name pos:start="289:5" pos:end="289:14">virt_page2</name> <operator pos:start="289:16" pos:end="289:16">=</operator> <operator pos:start="289:18" pos:end="289:18">(</operator><name pos:start="289:19" pos:end="289:20">pc</name> <operator pos:start="289:22" pos:end="289:22">+</operator> <name pos:start="289:24" pos:end="289:31"><name pos:start="289:24" pos:end="289:25">tb</name><operator pos:start="289:26" pos:end="289:27">-&gt;</operator><name pos:start="289:28" pos:end="289:31">size</name></name> <operator pos:start="289:33" pos:end="289:33">-</operator> <literal type="number" pos:start="289:35" pos:end="289:35">1</literal><operator pos:start="289:36" pos:end="289:36">)</operator> <operator pos:start="289:38" pos:end="289:38">&amp;</operator> <name pos:start="289:40" pos:end="289:55">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:20"><expr pos:start="291:5" pos:end="291:19"><name pos:start="291:5" pos:end="291:14">phys_page2</name> <operator pos:start="291:16" pos:end="291:16">=</operator> <operator pos:start="291:18" pos:end="291:18">-</operator><literal type="number" pos:start="291:19" pos:end="291:19">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="293:5" pos:end="297:5"><if pos:start="293:5" pos:end="297:5">if <condition pos:start="293:8" pos:end="293:46">(<expr pos:start="293:9" pos:end="293:45"><operator pos:start="293:9" pos:end="293:9">(</operator><name pos:start="293:10" pos:end="293:11">pc</name> <operator pos:start="293:13" pos:end="293:13">&amp;</operator> <name pos:start="293:15" pos:end="293:30">TARGET_PAGE_MASK</name><operator pos:start="293:31" pos:end="293:31">)</operator> <operator pos:start="293:33" pos:end="293:34">!=</operator> <name pos:start="293:36" pos:end="293:45">virt_page2</name></expr>)</condition> <block pos:start="293:48" pos:end="297:5">{<block_content pos:start="295:9" pos:end="295:57">

        <expr_stmt pos:start="295:9" pos:end="295:57"><expr pos:start="295:9" pos:end="295:56"><name pos:start="295:9" pos:end="295:18">phys_page2</name> <operator pos:start="295:20" pos:end="295:20">=</operator> <call pos:start="295:22" pos:end="295:56"><name pos:start="295:22" pos:end="295:39">get_page_addr_code</name><argument_list pos:start="295:40" pos:end="295:56">(<argument pos:start="295:41" pos:end="295:43"><expr pos:start="295:41" pos:end="295:43"><name pos:start="295:41" pos:end="295:43">env</name></expr></argument>, <argument pos:start="295:46" pos:end="295:55"><expr pos:start="295:46" pos:end="295:55"><name pos:start="295:46" pos:end="295:55">virt_page2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="299:5" pos:end="307:7">/* As long as consistency of the TB stuff is provided by tb_lock in user

     * mode and is implicit in single-threaded softmmu emulation, no explicit

     * memory barrier is required before tb_link_page() makes the TB visible

     * through the physical hash table and physical page list.

     */</comment>

    <expr_stmt pos:start="309:5" pos:end="309:42"><expr pos:start="309:5" pos:end="309:41"><call pos:start="309:5" pos:end="309:41"><name pos:start="309:5" pos:end="309:16">tb_link_page</name><argument_list pos:start="309:17" pos:end="309:41">(<argument pos:start="309:18" pos:end="309:19"><expr pos:start="309:18" pos:end="309:19"><name pos:start="309:18" pos:end="309:19">tb</name></expr></argument>, <argument pos:start="309:22" pos:end="309:28"><expr pos:start="309:22" pos:end="309:28"><name pos:start="309:22" pos:end="309:28">phys_pc</name></expr></argument>, <argument pos:start="309:31" pos:end="309:40"><expr pos:start="309:31" pos:end="309:40"><name pos:start="309:31" pos:end="309:40">phys_page2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="311:5" pos:end="311:14">return <expr pos:start="311:12" pos:end="311:13"><name pos:start="311:12" pos:end="311:13">tb</name></expr>;</return>

</block_content>}</block></function>
</unit>
