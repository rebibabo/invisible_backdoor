<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9326.c" pos:tabs="8"><function pos:start="1:1" pos:end="750:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">gen_intermediate_code</name><parameter_list pos:start="1:27" pos:end="1:66">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">CPUARMState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">env</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><name pos:start="1:46" pos:end="1:61">TranslationBlock</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">tb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="750:1">{<block_content pos:start="5:5" pos:end="748:27">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">ARMCPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:38">= <expr pos:start="5:19" pos:end="5:38"><call pos:start="5:19" pos:end="5:38"><name pos:start="5:19" pos:end="5:33">arm_env_get_cpu</name><argument_list pos:start="5:34" pos:end="5:38">(<argument pos:start="5:35" pos:end="5:37"><expr pos:start="5:35" pos:end="5:37"><name pos:start="5:35" pos:end="5:37">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">dc1</name></decl>, <decl pos:start="9:23" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:25">dc</name> <init pos:start="9:27" pos:end="9:32">= <expr pos:start="9:29" pos:end="9:32"><operator pos:start="9:29" pos:end="9:29">&amp;</operator><name pos:start="9:30" pos:end="9:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:32">next_page_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">max_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:20">end_of_page</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:36">/* generate intermediate code */</comment>



    <comment type="block" pos:start="27:5" pos:end="31:7">/* The A64 decoder has its own top level loop, because it doesn't need

     * the A32/T32 complexity to do with conditional execution/IT blocks/etc.

     */</comment>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:44">(<expr pos:start="33:9" pos:end="33:43"><call pos:start="33:9" pos:end="33:43"><name pos:start="33:9" pos:end="33:32">ARM_TBFLAG_AARCH64_STATE</name><argument_list pos:start="33:33" pos:end="33:43">(<argument pos:start="33:34" pos:end="33:42"><expr pos:start="33:34" pos:end="33:42"><name pos:start="33:34" pos:end="33:42"><name pos:start="33:34" pos:end="33:35">tb</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:42">flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:46" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:43"><expr pos:start="35:9" pos:end="35:42"><call pos:start="35:9" pos:end="35:42"><name pos:start="35:9" pos:end="35:33">gen_intermediate_code_a64</name><argument_list pos:start="35:34" pos:end="35:42">(<argument pos:start="35:35" pos:end="35:37"><expr pos:start="35:35" pos:end="35:37"><name pos:start="35:35" pos:end="35:37">cpu</name></expr></argument>, <argument pos:start="35:40" pos:end="35:41"><expr pos:start="35:40" pos:end="35:41"><name pos:start="35:40" pos:end="35:41">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:12">pc_start</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:21"><name pos:start="43:16" pos:end="43:17">tb</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:21">pc</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:16"><expr pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:6">dc</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:10">tb</name></name> <operator pos:start="47:12" pos:end="47:12">=</operator> <name pos:start="47:14" pos:end="47:15">tb</name></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:28"><expr pos:start="51:5" pos:end="51:27"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:14">is_jmp</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:22"><expr pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:10"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:10">pc</name></name> <operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:52"><expr pos:start="55:5" pos:end="55:51"><name pos:start="55:5" pos:end="55:26"><name pos:start="55:5" pos:end="55:6">dc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:26">singlestep_enabled</name></name> <operator pos:start="55:28" pos:end="55:28">=</operator> <name pos:start="55:30" pos:end="55:51"><name pos:start="55:30" pos:end="55:31">cs</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:51">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:20"><expr pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:15">condjmp</name></name> <operator pos:start="57:17" pos:end="57:17">=</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:20"><expr pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:15">aarch64</name></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <literal type="number" pos:start="61:19" pos:end="61:19">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="67:7">/* If we are coming from secure EL0 in a system with a 32-bit EL3, then

     * there is no secure EL1, so we route exceptions to EL3.

     */</comment>

    <expr_stmt pos:start="69:5" pos:end="71:55"><expr pos:start="69:5" pos:end="71:54"><name pos:start="69:5" pos:end="69:28"><name pos:start="69:5" pos:end="69:6">dc</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:28">secure_routed_to_el3</name></name> <operator pos:start="69:30" pos:end="69:30">=</operator> <call pos:start="69:32" pos:end="69:64"><name pos:start="69:32" pos:end="69:42">arm_feature</name><argument_list pos:start="69:43" pos:end="69:64">(<argument pos:start="69:44" pos:end="69:46"><expr pos:start="69:44" pos:end="69:46"><name pos:start="69:44" pos:end="69:46">env</name></expr></argument>, <argument pos:start="69:49" pos:end="69:63"><expr pos:start="69:49" pos:end="69:63"><name pos:start="69:49" pos:end="69:63">ARM_FEATURE_EL3</name></expr></argument>)</argument_list></call> <operator pos:start="69:66" pos:end="69:67">&amp;&amp;</operator>

                               <operator pos:start="71:32" pos:end="71:32">!</operator><call pos:start="71:33" pos:end="71:54"><name pos:start="71:33" pos:end="71:46">arm_el_is_aa64</name><argument_list pos:start="71:47" pos:end="71:54">(<argument pos:start="71:48" pos:end="71:50"><expr pos:start="71:48" pos:end="71:50"><name pos:start="71:48" pos:end="71:50">env</name></expr></argument>, <argument pos:start="71:53" pos:end="71:53"><expr pos:start="71:53" pos:end="71:53"><literal type="number" pos:start="71:53" pos:end="71:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:44"><expr pos:start="73:5" pos:end="73:43"><name pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:6">dc</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:13">thumb</name></name> <operator pos:start="73:15" pos:end="73:15">=</operator> <call pos:start="73:17" pos:end="73:43"><name pos:start="73:17" pos:end="73:32">ARM_TBFLAG_THUMB</name><argument_list pos:start="73:33" pos:end="73:43">(<argument pos:start="73:34" pos:end="73:42"><expr pos:start="73:34" pos:end="73:42"><name pos:start="73:34" pos:end="73:42"><name pos:start="73:34" pos:end="73:35">tb</name><operator pos:start="73:36" pos:end="73:37">-&gt;</operator><name pos:start="73:38" pos:end="73:42">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:48"><expr pos:start="75:5" pos:end="75:47"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:6">dc</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:15">sctlr_b</name></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:47"><name pos:start="75:19" pos:end="75:36">ARM_TBFLAG_SCTLR_B</name><argument_list pos:start="75:37" pos:end="75:47">(<argument pos:start="75:38" pos:end="75:46"><expr pos:start="75:38" pos:end="75:46"><name pos:start="75:38" pos:end="75:46"><name pos:start="75:38" pos:end="75:39">tb</name><operator pos:start="75:40" pos:end="75:41">-&gt;</operator><name pos:start="75:42" pos:end="75:46">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:64"><expr pos:start="77:5" pos:end="77:63"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:6">dc</name><operator pos:start="77:7" pos:end="77:8">-&gt;</operator><name pos:start="77:9" pos:end="77:15">be_data</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <ternary pos:start="77:19" pos:end="77:63"><condition pos:start="77:19" pos:end="77:49"><expr pos:start="77:19" pos:end="77:47"><call pos:start="77:19" pos:end="77:47"><name pos:start="77:19" pos:end="77:36">ARM_TBFLAG_BE_DATA</name><argument_list pos:start="77:37" pos:end="77:47">(<argument pos:start="77:38" pos:end="77:46"><expr pos:start="77:38" pos:end="77:46"><name pos:start="77:38" pos:end="77:46"><name pos:start="77:38" pos:end="77:39">tb</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:46">flags</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="77:51" pos:end="77:55"> <expr pos:start="77:51" pos:end="77:55"><name pos:start="77:51" pos:end="77:55">MO_BE</name></expr> </then><else pos:start="77:57" pos:end="77:63">: <expr pos:start="77:59" pos:end="77:63"><name pos:start="77:59" pos:end="77:63">MO_LE</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:68"><expr pos:start="79:5" pos:end="79:67"><name pos:start="79:5" pos:end="79:21"><name pos:start="79:5" pos:end="79:6">dc</name><operator pos:start="79:7" pos:end="79:8">-&gt;</operator><name pos:start="79:9" pos:end="79:21">condexec_mask</name></name> <operator pos:start="79:23" pos:end="79:23">=</operator> <operator pos:start="79:25" pos:end="79:25">(</operator><call pos:start="79:26" pos:end="79:55"><name pos:start="79:26" pos:end="79:44">ARM_TBFLAG_CONDEXEC</name><argument_list pos:start="79:45" pos:end="79:55">(<argument pos:start="79:46" pos:end="79:54"><expr pos:start="79:46" pos:end="79:54"><name pos:start="79:46" pos:end="79:54"><name pos:start="79:46" pos:end="79:47">tb</name><operator pos:start="79:48" pos:end="79:49">-&gt;</operator><name pos:start="79:50" pos:end="79:54">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:57" pos:end="79:57">&amp;</operator> <literal type="number" pos:start="79:59" pos:end="79:61">0xf</literal><operator pos:start="79:62" pos:end="79:62">)</operator> <operator pos:start="79:64" pos:end="79:65">&lt;&lt;</operator> <literal type="number" pos:start="79:67" pos:end="79:67">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:60"><expr pos:start="81:5" pos:end="81:59"><name pos:start="81:5" pos:end="81:21"><name pos:start="81:5" pos:end="81:6">dc</name><operator pos:start="81:7" pos:end="81:8">-&gt;</operator><name pos:start="81:9" pos:end="81:21">condexec_cond</name></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <call pos:start="81:25" pos:end="81:54"><name pos:start="81:25" pos:end="81:43">ARM_TBFLAG_CONDEXEC</name><argument_list pos:start="81:44" pos:end="81:54">(<argument pos:start="81:45" pos:end="81:53"><expr pos:start="81:45" pos:end="81:53"><name pos:start="81:45" pos:end="81:53"><name pos:start="81:45" pos:end="81:46">tb</name><operator pos:start="81:47" pos:end="81:48">-&gt;</operator><name pos:start="81:49" pos:end="81:53">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="81:56" pos:end="81:57">&gt;&gt;</operator> <literal type="number" pos:start="81:59" pos:end="81:59">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:47"><expr pos:start="83:5" pos:end="83:46"><name pos:start="83:5" pos:end="83:15"><name pos:start="83:5" pos:end="83:6">dc</name><operator pos:start="83:7" pos:end="83:8">-&gt;</operator><name pos:start="83:9" pos:end="83:15">mmu_idx</name></name> <operator pos:start="83:17" pos:end="83:17">=</operator> <call pos:start="83:19" pos:end="83:46"><name pos:start="83:19" pos:end="83:35">ARM_TBFLAG_MMUIDX</name><argument_list pos:start="83:36" pos:end="83:46">(<argument pos:start="83:37" pos:end="83:45"><expr pos:start="83:37" pos:end="83:45"><name pos:start="83:37" pos:end="83:45"><name pos:start="83:37" pos:end="83:38">tb</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:45">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="88:0"><expr pos:start="85:5" pos:end="85:51"><name pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:6">dc</name><operator pos:start="85:7" pos:end="85:8">-&gt;</operator><name pos:start="85:9" pos:end="85:18">current_el</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:51"><name pos:start="85:22" pos:end="85:38">arm_mmu_idx_to_el</name><argument_list pos:start="85:39" pos:end="85:51">(<argument pos:start="85:40" pos:end="85:50"><expr pos:start="85:40" pos:end="85:50"><name pos:start="85:40" pos:end="85:50"><name pos:start="85:40" pos:end="85:41">dc</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:50">mmu_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="87:1" pos:end="87:30">#<cpp:directive pos:start="87:2" pos:end="87:3">if</cpp:directive> <expr pos:start="87:5" pos:end="87:30"><operator pos:start="87:5" pos:end="87:5">!</operator><call pos:start="87:6" pos:end="87:30"><name pos:start="87:6" pos:end="87:12">defined</name><argument_list pos:start="87:13" pos:end="87:30">(<argument pos:start="87:14" pos:end="87:29"><expr pos:start="87:14" pos:end="87:29"><name pos:start="87:14" pos:end="87:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="89:5" pos:end="92:0"><expr pos:start="89:5" pos:end="89:36"><name pos:start="89:5" pos:end="89:12"><name pos:start="89:5" pos:end="89:6">dc</name><operator pos:start="89:7" pos:end="89:8">-&gt;</operator><name pos:start="89:9" pos:end="89:12">user</name></name> <operator pos:start="89:14" pos:end="89:14">=</operator> <operator pos:start="89:16" pos:end="89:16">(</operator><name pos:start="89:17" pos:end="89:30"><name pos:start="89:17" pos:end="89:18">dc</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:30">current_el</name></name> <operator pos:start="89:32" pos:end="89:33">==</operator> <literal type="number" pos:start="89:35" pos:end="89:35">0</literal><operator pos:start="89:36" pos:end="89:36">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="93:5" pos:end="93:38"><expr pos:start="93:5" pos:end="93:37"><name pos:start="93:5" pos:end="93:10"><name pos:start="93:5" pos:end="93:6">dc</name><operator pos:start="93:7" pos:end="93:8">-&gt;</operator><name pos:start="93:9" pos:end="93:10">ns</name></name> <operator pos:start="93:12" pos:end="93:12">=</operator> <call pos:start="93:14" pos:end="93:37"><name pos:start="93:14" pos:end="93:26">ARM_TBFLAG_NS</name><argument_list pos:start="93:27" pos:end="93:37">(<argument pos:start="93:28" pos:end="93:36"><expr pos:start="93:28" pos:end="93:36"><name pos:start="93:28" pos:end="93:36"><name pos:start="93:28" pos:end="93:29">tb</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:36">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:52"><expr pos:start="95:5" pos:end="95:51"><name pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:6">dc</name><operator pos:start="95:7" pos:end="95:8">-&gt;</operator><name pos:start="95:9" pos:end="95:18">fp_excp_el</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <call pos:start="95:22" pos:end="95:51"><name pos:start="95:22" pos:end="95:40">ARM_TBFLAG_FPEXC_EL</name><argument_list pos:start="95:41" pos:end="95:51">(<argument pos:start="95:42" pos:end="95:50"><expr pos:start="95:42" pos:end="95:50"><name pos:start="95:42" pos:end="95:50"><name pos:start="95:42" pos:end="95:43">tb</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:50">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:50"><expr pos:start="97:5" pos:end="97:49"><name pos:start="97:5" pos:end="97:19"><name pos:start="97:5" pos:end="97:6">dc</name><operator pos:start="97:7" pos:end="97:8">-&gt;</operator><name pos:start="97:9" pos:end="97:19">vfp_enabled</name></name> <operator pos:start="97:21" pos:end="97:21">=</operator> <call pos:start="97:23" pos:end="97:49"><name pos:start="97:23" pos:end="97:38">ARM_TBFLAG_VFPEN</name><argument_list pos:start="97:39" pos:end="97:49">(<argument pos:start="97:40" pos:end="97:48"><expr pos:start="97:40" pos:end="97:48"><name pos:start="97:40" pos:end="97:48"><name pos:start="97:40" pos:end="97:41">tb</name><operator pos:start="97:42" pos:end="97:43">-&gt;</operator><name pos:start="97:44" pos:end="97:48">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:47"><expr pos:start="99:5" pos:end="99:46"><name pos:start="99:5" pos:end="99:15"><name pos:start="99:5" pos:end="99:6">dc</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:15">vec_len</name></name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:46"><name pos:start="99:19" pos:end="99:35">ARM_TBFLAG_VECLEN</name><argument_list pos:start="99:36" pos:end="99:46">(<argument pos:start="99:37" pos:end="99:45"><expr pos:start="99:37" pos:end="99:45"><name pos:start="99:37" pos:end="99:45"><name pos:start="99:37" pos:end="99:38">tb</name><operator pos:start="99:39" pos:end="99:40">-&gt;</operator><name pos:start="99:41" pos:end="99:45">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:53"><expr pos:start="101:5" pos:end="101:52"><name pos:start="101:5" pos:end="101:18"><name pos:start="101:5" pos:end="101:6">dc</name><operator pos:start="101:7" pos:end="101:8">-&gt;</operator><name pos:start="101:9" pos:end="101:18">vec_stride</name></name> <operator pos:start="101:20" pos:end="101:20">=</operator> <call pos:start="101:22" pos:end="101:52"><name pos:start="101:22" pos:end="101:41">ARM_TBFLAG_VECSTRIDE</name><argument_list pos:start="101:42" pos:end="101:52">(<argument pos:start="101:43" pos:end="101:51"><expr pos:start="101:43" pos:end="101:51"><name pos:start="101:43" pos:end="101:51"><name pos:start="101:43" pos:end="101:44">tb</name><operator pos:start="101:45" pos:end="101:46">-&gt;</operator><name pos:start="101:47" pos:end="101:51">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:53"><expr pos:start="103:5" pos:end="103:52"><name pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:6">dc</name><operator pos:start="103:7" pos:end="103:8">-&gt;</operator><name pos:start="103:9" pos:end="103:16">c15_cpar</name></name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:52"><name pos:start="103:20" pos:end="103:41">ARM_TBFLAG_XSCALE_CPAR</name><argument_list pos:start="103:42" pos:end="103:52">(<argument pos:start="103:43" pos:end="103:51"><expr pos:start="103:43" pos:end="103:51"><name pos:start="103:43" pos:end="103:51"><name pos:start="103:43" pos:end="103:44">tb</name><operator pos:start="103:45" pos:end="103:46">-&gt;</operator><name pos:start="103:47" pos:end="103:51">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="106:5" pos:end="106:31"><expr pos:start="106:5" pos:end="106:30"><name pos:start="106:5" pos:end="106:15"><name pos:start="106:5" pos:end="106:6">dc</name><operator pos:start="106:7" pos:end="106:8">-&gt;</operator><name pos:start="106:9" pos:end="106:15">cp_regs</name></name> <operator pos:start="106:17" pos:end="106:17">=</operator> <name pos:start="106:19" pos:end="106:30"><name pos:start="106:19" pos:end="106:21">cpu</name><operator pos:start="106:22" pos:end="106:23">-&gt;</operator><name pos:start="106:24" pos:end="106:30">cp_regs</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="108:5" pos:end="108:33"><expr pos:start="108:5" pos:end="108:32"><name pos:start="108:5" pos:end="108:16"><name pos:start="108:5" pos:end="108:6">dc</name><operator pos:start="108:7" pos:end="108:8">-&gt;</operator><name pos:start="108:9" pos:end="108:16">features</name></name> <operator pos:start="108:18" pos:end="108:18">=</operator> <name pos:start="108:20" pos:end="108:32"><name pos:start="108:20" pos:end="108:22">env</name><operator pos:start="108:23" pos:end="108:24">-&gt;</operator><name pos:start="108:25" pos:end="108:32">features</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="112:5" pos:end="140:7">/* Single step state. The code-generation logic here is:

     *  SS_ACTIVE == 0:

     *   generate code with no special handling for single-stepping (except

     *   that anything that can make us go to SS_ACTIVE == 1 must end the TB;

     *   this happens anyway because those changes are all system register or

     *   PSTATE writes).

     *  SS_ACTIVE == 1, PSTATE.SS == 1: (active-not-pending)

     *   emit code for one insn

     *   emit code to clear PSTATE.SS

     *   emit code to generate software step exception for completed step

     *   end TB (as usual for having generated an exception)

     *  SS_ACTIVE == 1, PSTATE.SS == 0: (active-pending)

     *   emit code to generate a software step exception

     *   end the TB

     */</comment>

    <expr_stmt pos:start="142:5" pos:end="142:52"><expr pos:start="142:5" pos:end="142:51"><name pos:start="142:5" pos:end="142:17"><name pos:start="142:5" pos:end="142:6">dc</name><operator pos:start="142:7" pos:end="142:8">-&gt;</operator><name pos:start="142:9" pos:end="142:17">ss_active</name></name> <operator pos:start="142:19" pos:end="142:19">=</operator> <call pos:start="142:21" pos:end="142:51"><name pos:start="142:21" pos:end="142:40">ARM_TBFLAG_SS_ACTIVE</name><argument_list pos:start="142:41" pos:end="142:51">(<argument pos:start="142:42" pos:end="142:50"><expr pos:start="142:42" pos:end="142:50"><name pos:start="142:42" pos:end="142:50"><name pos:start="142:42" pos:end="142:43">tb</name><operator pos:start="142:44" pos:end="142:45">-&gt;</operator><name pos:start="142:46" pos:end="142:50">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="144:5" pos:end="144:52"><expr pos:start="144:5" pos:end="144:51"><name pos:start="144:5" pos:end="144:17"><name pos:start="144:5" pos:end="144:6">dc</name><operator pos:start="144:7" pos:end="144:8">-&gt;</operator><name pos:start="144:9" pos:end="144:17">pstate_ss</name></name> <operator pos:start="144:19" pos:end="144:19">=</operator> <call pos:start="144:21" pos:end="144:51"><name pos:start="144:21" pos:end="144:40">ARM_TBFLAG_PSTATE_SS</name><argument_list pos:start="144:41" pos:end="144:51">(<argument pos:start="144:42" pos:end="144:50"><expr pos:start="144:42" pos:end="144:50"><name pos:start="144:42" pos:end="144:50"><name pos:start="144:42" pos:end="144:43">tb</name><operator pos:start="144:44" pos:end="144:45">-&gt;</operator><name pos:start="144:46" pos:end="144:50">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="146:5" pos:end="146:24"><expr pos:start="146:5" pos:end="146:23"><name pos:start="146:5" pos:end="146:15"><name pos:start="146:5" pos:end="146:6">dc</name><operator pos:start="146:7" pos:end="146:8">-&gt;</operator><name pos:start="146:9" pos:end="146:15">is_ldex</name></name> <operator pos:start="146:17" pos:end="146:17">=</operator> <name pos:start="146:19" pos:end="146:23">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="148:5" pos:end="148:27"><expr pos:start="148:5" pos:end="148:26"><name pos:start="148:5" pos:end="148:18"><name pos:start="148:5" pos:end="148:6">dc</name><operator pos:start="148:7" pos:end="148:8">-&gt;</operator><name pos:start="148:9" pos:end="148:18">ss_same_el</name></name> <operator pos:start="148:20" pos:end="148:20">=</operator> <name pos:start="148:22" pos:end="148:26">false</name></expr>;</expr_stmt> <comment type="block" pos:start="148:29" pos:end="148:74">/* Can't be true since EL_d must be AArch64 */</comment>



    <expr_stmt pos:start="152:5" pos:end="152:33"><expr pos:start="152:5" pos:end="152:32"><name pos:start="152:5" pos:end="152:11">cpu_F0s</name> <operator pos:start="152:13" pos:end="152:13">=</operator> <call pos:start="152:15" pos:end="152:32"><name pos:start="152:15" pos:end="152:30">tcg_temp_new_i32</name><argument_list pos:start="152:31" pos:end="152:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="154:5" pos:end="154:33"><expr pos:start="154:5" pos:end="154:32"><name pos:start="154:5" pos:end="154:11">cpu_F1s</name> <operator pos:start="154:13" pos:end="154:13">=</operator> <call pos:start="154:15" pos:end="154:32"><name pos:start="154:15" pos:end="154:30">tcg_temp_new_i32</name><argument_list pos:start="154:31" pos:end="154:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="156:5" pos:end="156:33"><expr pos:start="156:5" pos:end="156:32"><name pos:start="156:5" pos:end="156:11">cpu_F0d</name> <operator pos:start="156:13" pos:end="156:13">=</operator> <call pos:start="156:15" pos:end="156:32"><name pos:start="156:15" pos:end="156:30">tcg_temp_new_i64</name><argument_list pos:start="156:31" pos:end="156:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="158:5" pos:end="158:33"><expr pos:start="158:5" pos:end="158:32"><name pos:start="158:5" pos:end="158:11">cpu_F1d</name> <operator pos:start="158:13" pos:end="158:13">=</operator> <call pos:start="158:15" pos:end="158:32"><name pos:start="158:15" pos:end="158:30">tcg_temp_new_i64</name><argument_list pos:start="158:31" pos:end="158:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="160:5" pos:end="160:21"><expr pos:start="160:5" pos:end="160:20"><name pos:start="160:5" pos:end="160:10">cpu_V0</name> <operator pos:start="160:12" pos:end="160:12">=</operator> <name pos:start="160:14" pos:end="160:20">cpu_F0d</name></expr>;</expr_stmt>

    <expr_stmt pos:start="162:5" pos:end="162:21"><expr pos:start="162:5" pos:end="162:20"><name pos:start="162:5" pos:end="162:10">cpu_V1</name> <operator pos:start="162:12" pos:end="162:12">=</operator> <name pos:start="162:14" pos:end="162:20">cpu_F1d</name></expr>;</expr_stmt>

    <comment type="block" pos:start="164:5" pos:end="164:60">/* FIXME: cpu_M0 can probably be the same as cpu_V0.  */</comment>

    <expr_stmt pos:start="166:5" pos:end="166:32"><expr pos:start="166:5" pos:end="166:31"><name pos:start="166:5" pos:end="166:10">cpu_M0</name> <operator pos:start="166:12" pos:end="166:12">=</operator> <call pos:start="166:14" pos:end="166:31"><name pos:start="166:14" pos:end="166:29">tcg_temp_new_i64</name><argument_list pos:start="166:30" pos:end="166:31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="168:5" pos:end="168:71"><expr pos:start="168:5" pos:end="168:70"><name pos:start="168:5" pos:end="168:19">next_page_start</name> <operator pos:start="168:21" pos:end="168:21">=</operator> <operator pos:start="168:23" pos:end="168:23">(</operator><name pos:start="168:24" pos:end="168:31">pc_start</name> <operator pos:start="168:33" pos:end="168:33">&amp;</operator> <name pos:start="168:35" pos:end="168:50">TARGET_PAGE_MASK</name><operator pos:start="168:51" pos:end="168:51">)</operator> <operator pos:start="168:53" pos:end="168:53">+</operator> <name pos:start="168:55" pos:end="168:70">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="170:5" pos:end="170:18"><expr pos:start="170:5" pos:end="170:17"><name pos:start="170:5" pos:end="170:13">num_insns</name> <operator pos:start="170:15" pos:end="170:15">=</operator> <literal type="number" pos:start="170:17" pos:end="170:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="172:5" pos:end="172:43"><expr pos:start="172:5" pos:end="172:42"><name pos:start="172:5" pos:end="172:13">max_insns</name> <operator pos:start="172:15" pos:end="172:15">=</operator> <name pos:start="172:17" pos:end="172:26"><name pos:start="172:17" pos:end="172:18">tb</name><operator pos:start="172:19" pos:end="172:20">-&gt;</operator><name pos:start="172:21" pos:end="172:26">cflags</name></name> <operator pos:start="172:28" pos:end="172:28">&amp;</operator> <name pos:start="172:30" pos:end="172:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="174:5" pos:end="178:5"><if pos:start="174:5" pos:end="178:5">if <condition pos:start="174:8" pos:end="174:23">(<expr pos:start="174:9" pos:end="174:22"><name pos:start="174:9" pos:end="174:17">max_insns</name> <operator pos:start="174:19" pos:end="174:20">==</operator> <literal type="number" pos:start="174:22" pos:end="174:22">0</literal></expr>)</condition> <block pos:start="174:25" pos:end="178:5">{<block_content pos:start="176:9" pos:end="176:34">

        <expr_stmt pos:start="176:9" pos:end="176:34"><expr pos:start="176:9" pos:end="176:33"><name pos:start="176:9" pos:end="176:17">max_insns</name> <operator pos:start="176:19" pos:end="176:19">=</operator> <name pos:start="176:21" pos:end="176:33">CF_COUNT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="180:5" pos:end="184:5"><if pos:start="180:5" pos:end="184:5">if <condition pos:start="180:8" pos:end="180:34">(<expr pos:start="180:9" pos:end="180:33"><name pos:start="180:9" pos:end="180:17">max_insns</name> <operator pos:start="180:19" pos:end="180:19">&gt;</operator> <name pos:start="180:21" pos:end="180:33">TCG_MAX_INSNS</name></expr>)</condition> <block pos:start="180:36" pos:end="184:5">{<block_content pos:start="182:9" pos:end="182:34">

        <expr_stmt pos:start="182:9" pos:end="182:34"><expr pos:start="182:9" pos:end="182:33"><name pos:start="182:9" pos:end="182:17">max_insns</name> <operator pos:start="182:19" pos:end="182:19">=</operator> <name pos:start="182:21" pos:end="182:33">TCG_MAX_INSNS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="188:5" pos:end="188:21"><expr pos:start="188:5" pos:end="188:20"><call pos:start="188:5" pos:end="188:20"><name pos:start="188:5" pos:end="188:16">gen_tb_start</name><argument_list pos:start="188:17" pos:end="188:20">(<argument pos:start="188:18" pos:end="188:19"><expr pos:start="188:18" pos:end="188:19"><name pos:start="188:18" pos:end="188:19">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="192:5" pos:end="192:27"><expr pos:start="192:5" pos:end="192:26"><call pos:start="192:5" pos:end="192:26"><name pos:start="192:5" pos:end="192:24">tcg_clear_temp_count</name><argument_list pos:start="192:25" pos:end="192:26">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="196:5" pos:end="252:7">/* A note on handling of the condexec (IT) bits:

     *

     * We want to avoid the overhead of having to write the updated condexec

     * bits back to the CPUARMState for every instruction in an IT block. So:

     * (1) if the condexec bits are not already zero then we write

     * zero back into the CPUARMState now. This avoids complications trying

     * to do it at the end of the block. (For example if we don't do this

     * it's hard to identify whether we can safely skip writing condexec

     * at the end of the TB, which we definitely want to do for the case

     * where a TB doesn't do anything with the IT state at all.)

     * (2) if we are going to leave the TB then we call gen_set_condexec()

     * which will write the correct value into CPUARMState if zero is wrong.

     * This is done both for leaving the TB at the end, and for leaving

     * it because of an exception we know will happen, which is done in

     * gen_exception_insn(). The latter is necessary because we need to

     * leave the TB with the PC/IT state just prior to execution of the

     * instruction which caused the exception.

     * (3) if we leave the TB unexpectedly (eg a data abort on a load)

     * then the CPUARMState will be wrong and we need to reset it.

     * This is handled in the same way as restoration of the

     * PC in these situations; we save the value of the condexec bits

     * for each PC via tcg_gen_insn_start(), and restore_state_to_opc()

     * then uses this to restore them after an exception.

     *

     * Note that there are no instructions which can read the condexec

     * bits, and none which can write non-static values to them, so

     * we don't need to care about whether CPUARMState is correct in the

     * middle of a TB.

     */</comment>



    <comment type="block" pos:start="256:5" pos:end="258:65">/* Reset the conditional execution bits immediately. This avoids

       complications trying to do it at the end of the block.  */</comment>

    <if_stmt pos:start="260:5" pos:end="270:7"><if pos:start="260:5" pos:end="270:7">if <condition pos:start="260:8" pos:end="260:47">(<expr pos:start="260:9" pos:end="260:46"><name pos:start="260:9" pos:end="260:25"><name pos:start="260:9" pos:end="260:10">dc</name><operator pos:start="260:11" pos:end="260:12">-&gt;</operator><name pos:start="260:13" pos:end="260:25">condexec_mask</name></name> <operator pos:start="260:27" pos:end="260:28">||</operator> <name pos:start="260:30" pos:end="260:46"><name pos:start="260:30" pos:end="260:31">dc</name><operator pos:start="260:32" pos:end="260:33">-&gt;</operator><name pos:start="260:34" pos:end="260:46">condexec_cond</name></name></expr>)</condition>

      <block pos:start="262:7" pos:end="270:7">{<block_content pos:start="264:9" pos:end="268:44">

        <decl_stmt pos:start="264:9" pos:end="264:42"><decl pos:start="264:9" pos:end="264:41"><type pos:start="264:9" pos:end="264:16"><name pos:start="264:9" pos:end="264:16">TCGv_i32</name></type> <name pos:start="264:18" pos:end="264:20">tmp</name> <init pos:start="264:22" pos:end="264:41">= <expr pos:start="264:24" pos:end="264:41"><call pos:start="264:24" pos:end="264:41"><name pos:start="264:24" pos:end="264:39">tcg_temp_new_i32</name><argument_list pos:start="264:40" pos:end="264:41">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="266:9" pos:end="266:33"><expr pos:start="266:9" pos:end="266:32"><call pos:start="266:9" pos:end="266:32"><name pos:start="266:9" pos:end="266:24">tcg_gen_movi_i32</name><argument_list pos:start="266:25" pos:end="266:32">(<argument pos:start="266:26" pos:end="266:28"><expr pos:start="266:26" pos:end="266:28"><name pos:start="266:26" pos:end="266:28">tmp</name></expr></argument>, <argument pos:start="266:31" pos:end="266:31"><expr pos:start="266:31" pos:end="266:31"><literal type="number" pos:start="266:31" pos:end="266:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="268:9" pos:end="268:44"><expr pos:start="268:9" pos:end="268:43"><call pos:start="268:9" pos:end="268:43"><name pos:start="268:9" pos:end="268:23">store_cpu_field</name><argument_list pos:start="268:24" pos:end="268:43">(<argument pos:start="268:25" pos:end="268:27"><expr pos:start="268:25" pos:end="268:27"><name pos:start="268:25" pos:end="268:27">tmp</name></expr></argument>, <argument pos:start="268:30" pos:end="268:42"><expr pos:start="268:30" pos:end="268:42"><name pos:start="268:30" pos:end="268:42">condexec_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt>

    <do pos:start="272:5" pos:end="514:36">do <block pos:start="272:8" pos:end="506:5">{<block_content pos:start="274:9" pos:end="502:76">

        <expr_stmt pos:start="274:9" pos:end="274:48"><expr pos:start="274:9" pos:end="274:47"><name pos:start="274:9" pos:end="274:26"><name pos:start="274:9" pos:end="274:10">dc</name><operator pos:start="274:11" pos:end="274:12">-&gt;</operator><name pos:start="274:13" pos:end="274:26">insn_start_idx</name></name> <operator pos:start="274:28" pos:end="274:28">=</operator> <call pos:start="274:30" pos:end="274:47"><name pos:start="274:30" pos:end="274:45">tcg_op_buf_count</name><argument_list pos:start="274:46" pos:end="274:47">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="276:9" pos:end="280:30"><expr pos:start="276:9" pos:end="280:29"><call pos:start="276:9" pos:end="280:29"><name pos:start="276:9" pos:end="276:26">tcg_gen_insn_start</name><argument_list pos:start="276:27" pos:end="280:29">(<argument pos:start="276:28" pos:end="276:33"><expr pos:start="276:28" pos:end="276:33"><name pos:start="276:28" pos:end="276:33"><name pos:start="276:28" pos:end="276:29">dc</name><operator pos:start="276:30" pos:end="276:31">-&gt;</operator><name pos:start="276:32" pos:end="276:33">pc</name></name></expr></argument>,

                           <argument pos:start="278:28" pos:end="278:78"><expr pos:start="278:28" pos:end="278:78"><operator pos:start="278:28" pos:end="278:28">(</operator><name pos:start="278:29" pos:end="278:45"><name pos:start="278:29" pos:end="278:30">dc</name><operator pos:start="278:31" pos:end="278:32">-&gt;</operator><name pos:start="278:33" pos:end="278:45">condexec_cond</name></name> <operator pos:start="278:47" pos:end="278:48">&lt;&lt;</operator> <literal type="number" pos:start="278:50" pos:end="278:50">4</literal><operator pos:start="278:51" pos:end="278:51">)</operator> <operator pos:start="278:53" pos:end="278:53">|</operator> <operator pos:start="278:55" pos:end="278:55">(</operator><name pos:start="278:56" pos:end="278:72"><name pos:start="278:56" pos:end="278:57">dc</name><operator pos:start="278:58" pos:end="278:59">-&gt;</operator><name pos:start="278:60" pos:end="278:72">condexec_mask</name></name> <operator pos:start="278:74" pos:end="278:75">&gt;&gt;</operator> <literal type="number" pos:start="278:77" pos:end="278:77">1</literal><operator pos:start="278:78" pos:end="278:78">)</operator></expr></argument>,

                           <argument pos:start="280:28" pos:end="280:28"><expr pos:start="280:28" pos:end="280:28"><literal type="number" pos:start="280:28" pos:end="280:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="282:9" pos:end="287:0"><expr pos:start="282:9" pos:end="282:19"><name pos:start="282:9" pos:end="282:17">num_insns</name><operator pos:start="282:18" pos:end="282:19">++</operator></expr>;</expr_stmt>



<cpp:ifdef pos:start="286:1" pos:end="286:23">#<cpp:directive pos:start="286:2" pos:end="286:6">ifdef</cpp:directive> <name pos:start="286:8" pos:end="286:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <comment type="block" pos:start="288:9" pos:end="288:55">/* Intercept jump to the magic kernel page.  */</comment>

        <if_stmt pos:start="290:9" pos:end="305:0"><if pos:start="290:9" pos:end="305:0">if <condition pos:start="290:12" pos:end="290:33">(<expr pos:start="290:13" pos:end="290:32"><name pos:start="290:13" pos:end="290:18"><name pos:start="290:13" pos:end="290:14">dc</name><operator pos:start="290:15" pos:end="290:16">-&gt;</operator><name pos:start="290:17" pos:end="290:18">pc</name></name> <operator pos:start="290:20" pos:end="290:21">&gt;=</operator> <literal type="number" pos:start="290:23" pos:end="290:32">0xffff0000</literal></expr>)</condition> <block pos:start="290:35" pos:end="305:0">{<block_content pos:start="296:13" pos:end="300:18">

            <comment type="block" pos:start="292:13" pos:end="294:47">/* We always get here via a jump, so know we are not in a

               conditional execution block.  */</comment>

            <expr_stmt pos:start="296:13" pos:end="296:53"><expr pos:start="296:13" pos:end="296:52"><call pos:start="296:13" pos:end="296:52"><name pos:start="296:13" pos:end="296:34">gen_exception_internal</name><argument_list pos:start="296:35" pos:end="296:52">(<argument pos:start="296:36" pos:end="296:51"><expr pos:start="296:36" pos:end="296:51"><name pos:start="296:36" pos:end="296:51">EXCP_KERNEL_TRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="298:13" pos:end="298:35"><expr pos:start="298:13" pos:end="298:34"><name pos:start="298:13" pos:end="298:22"><name pos:start="298:13" pos:end="298:14">dc</name><operator pos:start="298:15" pos:end="298:16">-&gt;</operator><name pos:start="298:17" pos:end="298:22">is_jmp</name></name> <operator pos:start="298:24" pos:end="298:24">=</operator> <name pos:start="298:26" pos:end="298:34">DISAS_EXC</name></expr>;</expr_stmt>

            <break pos:start="300:13" pos:end="300:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="304:1" pos:end="304:5">#<cpp:directive pos:start="304:2" pos:end="304:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="306:9" pos:end="321:0"><if pos:start="306:9" pos:end="321:0">if <condition pos:start="306:12" pos:end="306:46">(<expr pos:start="306:13" pos:end="306:45"><call pos:start="306:13" pos:end="306:45"><name pos:start="306:13" pos:end="306:26">arm_dc_feature</name><argument_list pos:start="306:27" pos:end="306:45">(<argument pos:start="306:28" pos:end="306:29"><expr pos:start="306:28" pos:end="306:29"><name pos:start="306:28" pos:end="306:29">dc</name></expr></argument>, <argument pos:start="306:32" pos:end="306:44"><expr pos:start="306:32" pos:end="306:44"><name pos:start="306:32" pos:end="306:44">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="306:48" pos:end="321:0">{<block_content pos:start="316:13" pos:end="316:40">

            <comment type="block" pos:start="308:13" pos:end="314:15">/* Branches to the magic exception-return addresses should

             * already have been caught via the arm_v7m_unassigned_access hook,

             * and never get here.

             */</comment>

            <expr_stmt pos:start="316:13" pos:end="316:40"><expr pos:start="316:13" pos:end="316:39"><call pos:start="316:13" pos:end="316:39"><name pos:start="316:13" pos:end="316:18">assert</name><argument_list pos:start="316:19" pos:end="316:39">(<argument pos:start="316:20" pos:end="316:38"><expr pos:start="316:20" pos:end="316:38"><name pos:start="316:20" pos:end="316:25"><name pos:start="316:20" pos:end="316:21">dc</name><operator pos:start="316:22" pos:end="316:23">-&gt;</operator><name pos:start="316:24" pos:end="316:25">pc</name></name> <operator pos:start="316:27" pos:end="316:27">&lt;</operator> <literal type="number" pos:start="316:29" pos:end="316:38">0xfffffff0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="320:1" pos:end="320:6">#<cpp:directive pos:start="320:2" pos:end="320:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="324:9" pos:end="374:9"><if pos:start="324:9" pos:end="374:9">if <condition pos:start="324:12" pos:end="324:54">(<expr pos:start="324:13" pos:end="324:53"><call pos:start="324:13" pos:end="324:53"><name pos:start="324:13" pos:end="324:20">unlikely</name><argument_list pos:start="324:21" pos:end="324:53">(<argument pos:start="324:22" pos:end="324:52"><expr pos:start="324:22" pos:end="324:52"><operator pos:start="324:22" pos:end="324:22">!</operator><call pos:start="324:23" pos:end="324:52"><name pos:start="324:23" pos:end="324:34">QTAILQ_EMPTY</name><argument_list pos:start="324:35" pos:end="324:52">(<argument pos:start="324:36" pos:end="324:51"><expr pos:start="324:36" pos:end="324:51"><operator pos:start="324:36" pos:end="324:36">&amp;</operator><name pos:start="324:37" pos:end="324:51"><name pos:start="324:37" pos:end="324:38">cs</name><operator pos:start="324:39" pos:end="324:40">-&gt;</operator><name pos:start="324:41" pos:end="324:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="324:56" pos:end="374:9">{<block_content pos:start="326:13" pos:end="372:13">

            <decl_stmt pos:start="326:13" pos:end="326:30"><decl pos:start="326:13" pos:end="326:29"><type pos:start="326:13" pos:end="326:27"><name pos:start="326:13" pos:end="326:25">CPUBreakpoint</name> <modifier pos:start="326:27" pos:end="326:27">*</modifier></type><name pos:start="326:28" pos:end="326:29">bp</name></decl>;</decl_stmt>

            <macro pos:start="328:13" pos:end="328:55"><name pos:start="328:13" pos:end="328:26">QTAILQ_FOREACH</name><argument_list pos:start="328:27" pos:end="328:55">(<argument pos:start="328:28" pos:end="328:29">bp</argument>, <argument pos:start="328:32" pos:end="328:47">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="328:50" pos:end="328:54">entry</argument>)</argument_list></macro> <block pos:start="328:57" pos:end="372:13">{<block_content pos:start="330:17" pos:end="370:17">

                <if_stmt pos:start="330:17" pos:end="370:17"><if pos:start="330:17" pos:end="370:17">if <condition pos:start="330:20" pos:end="330:37">(<expr pos:start="330:21" pos:end="330:36"><name pos:start="330:21" pos:end="330:26"><name pos:start="330:21" pos:end="330:22">bp</name><operator pos:start="330:23" pos:end="330:24">-&gt;</operator><name pos:start="330:25" pos:end="330:26">pc</name></name> <operator pos:start="330:28" pos:end="330:29">==</operator> <name pos:start="330:31" pos:end="330:36"><name pos:start="330:31" pos:end="330:32">dc</name><operator pos:start="330:33" pos:end="330:34">-&gt;</operator><name pos:start="330:35" pos:end="330:36">pc</name></name></expr>)</condition> <block pos:start="330:39" pos:end="370:17">{<block_content pos:start="332:21" pos:end="368:26">

                    <if_stmt pos:start="332:21" pos:end="366:21"><if pos:start="332:21" pos:end="344:21">if <condition pos:start="332:24" pos:end="332:43">(<expr pos:start="332:25" pos:end="332:42"><name pos:start="332:25" pos:end="332:33"><name pos:start="332:25" pos:end="332:26">bp</name><operator pos:start="332:27" pos:end="332:28">-&gt;</operator><name pos:start="332:29" pos:end="332:33">flags</name></name> <operator pos:start="332:35" pos:end="332:35">&amp;</operator> <name pos:start="332:37" pos:end="332:42">BP_CPU</name></expr>)</condition> <block pos:start="332:45" pos:end="344:21">{<block_content pos:start="334:25" pos:end="342:50">

                        <expr_stmt pos:start="334:25" pos:end="334:45"><expr pos:start="334:25" pos:end="334:44"><call pos:start="334:25" pos:end="334:44"><name pos:start="334:25" pos:end="334:40">gen_set_condexec</name><argument_list pos:start="334:41" pos:end="334:44">(<argument pos:start="334:42" pos:end="334:43"><expr pos:start="334:42" pos:end="334:43"><name pos:start="334:42" pos:end="334:43">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="336:25" pos:end="336:50"><expr pos:start="336:25" pos:end="336:49"><call pos:start="336:25" pos:end="336:49"><name pos:start="336:25" pos:end="336:37">gen_set_pc_im</name><argument_list pos:start="336:38" pos:end="336:49">(<argument pos:start="336:39" pos:end="336:40"><expr pos:start="336:39" pos:end="336:40"><name pos:start="336:39" pos:end="336:40">dc</name></expr></argument>, <argument pos:start="336:43" pos:end="336:48"><expr pos:start="336:43" pos:end="336:48"><name pos:start="336:43" pos:end="336:48"><name pos:start="336:43" pos:end="336:44">dc</name><operator pos:start="336:45" pos:end="336:46">-&gt;</operator><name pos:start="336:47" pos:end="336:48">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="338:25" pos:end="338:62"><expr pos:start="338:25" pos:end="338:61"><call pos:start="338:25" pos:end="338:61"><name pos:start="338:25" pos:end="338:52">gen_helper_check_breakpoints</name><argument_list pos:start="338:53" pos:end="338:61">(<argument pos:start="338:54" pos:end="338:60"><expr pos:start="338:54" pos:end="338:60"><name pos:start="338:54" pos:end="338:60">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="340:25" pos:end="340:84">/* End the TB early; it's likely not going to be executed */</comment>

                        <expr_stmt pos:start="342:25" pos:end="342:50"><expr pos:start="342:25" pos:end="342:49"><name pos:start="342:25" pos:end="342:34"><name pos:start="342:25" pos:end="342:26">dc</name><operator pos:start="342:27" pos:end="342:28">-&gt;</operator><name pos:start="342:29" pos:end="342:34">is_jmp</name></name> <operator pos:start="342:36" pos:end="342:36">=</operator> <name pos:start="342:38" pos:end="342:49">DISAS_UPDATE</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="344:23" pos:end="366:21">else <block pos:start="344:28" pos:end="366:21">{<block_content pos:start="346:25" pos:end="364:45">

                        <expr_stmt pos:start="346:25" pos:end="346:71"><expr pos:start="346:25" pos:end="346:70"><call pos:start="346:25" pos:end="346:70"><name pos:start="346:25" pos:end="346:51">gen_exception_internal_insn</name><argument_list pos:start="346:52" pos:end="346:70">(<argument pos:start="346:53" pos:end="346:54"><expr pos:start="346:53" pos:end="346:54"><name pos:start="346:53" pos:end="346:54">dc</name></expr></argument>, <argument pos:start="346:57" pos:end="346:57"><expr pos:start="346:57" pos:end="346:57"><literal type="number" pos:start="346:57" pos:end="346:57">0</literal></expr></argument>, <argument pos:start="346:60" pos:end="346:69"><expr pos:start="346:60" pos:end="346:69"><name pos:start="346:60" pos:end="346:69">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="348:25" pos:end="356:67">/* The address covered by the breakpoint must be

                           included in [tb-&gt;pc, tb-&gt;pc + tb-&gt;size) in order

                           to for it to be properly cleared -- thus we

                           increment the PC here so that the logic setting

                           tb-&gt;size below does the right thing.  */</comment>

                        <comment type="block" pos:start="358:25" pos:end="360:63">/* TODO: Advance PC by correct instruction length to

                         * avoid disassembler error messages */</comment>

                        <expr_stmt pos:start="362:25" pos:end="362:36"><expr pos:start="362:25" pos:end="362:35"><name pos:start="362:25" pos:end="362:30"><name pos:start="362:25" pos:end="362:26">dc</name><operator pos:start="362:27" pos:end="362:28">-&gt;</operator><name pos:start="362:29" pos:end="362:30">pc</name></name> <operator pos:start="362:32" pos:end="362:33">+=</operator> <literal type="number" pos:start="362:35" pos:end="362:35">2</literal></expr>;</expr_stmt>

                        <goto pos:start="364:25" pos:end="364:45">goto <name pos:start="364:30" pos:end="364:44">done_generating</name>;</goto>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="368:21" pos:end="368:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="378:9" pos:end="382:9"><if pos:start="378:9" pos:end="382:9">if <condition pos:start="378:12" pos:end="378:64">(<expr pos:start="378:13" pos:end="378:63"><name pos:start="378:13" pos:end="378:21">num_insns</name> <operator pos:start="378:23" pos:end="378:24">==</operator> <name pos:start="378:26" pos:end="378:34">max_insns</name> <operator pos:start="378:36" pos:end="378:37">&amp;&amp;</operator> <operator pos:start="378:39" pos:end="378:39">(</operator><name pos:start="378:40" pos:end="378:49"><name pos:start="378:40" pos:end="378:41">tb</name><operator pos:start="378:42" pos:end="378:43">-&gt;</operator><name pos:start="378:44" pos:end="378:49">cflags</name></name> <operator pos:start="378:51" pos:end="378:51">&amp;</operator> <name pos:start="378:53" pos:end="378:62">CF_LAST_IO</name><operator pos:start="378:63" pos:end="378:63">)</operator></expr>)</condition> <block pos:start="378:66" pos:end="382:9">{<block_content pos:start="380:13" pos:end="380:27">

            <expr_stmt pos:start="380:13" pos:end="380:27"><expr pos:start="380:13" pos:end="380:26"><call pos:start="380:13" pos:end="380:26"><name pos:start="380:13" pos:end="380:24">gen_io_start</name><argument_list pos:start="380:25" pos:end="380:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="386:9" pos:end="416:9"><if pos:start="386:9" pos:end="416:9">if <condition pos:start="386:12" pos:end="386:44">(<expr pos:start="386:13" pos:end="386:43"><name pos:start="386:13" pos:end="386:25"><name pos:start="386:13" pos:end="386:14">dc</name><operator pos:start="386:15" pos:end="386:16">-&gt;</operator><name pos:start="386:17" pos:end="386:25">ss_active</name></name> <operator pos:start="386:27" pos:end="386:28">&amp;&amp;</operator> <operator pos:start="386:30" pos:end="386:30">!</operator><name pos:start="386:31" pos:end="386:43"><name pos:start="386:31" pos:end="386:32">dc</name><operator pos:start="386:33" pos:end="386:34">-&gt;</operator><name pos:start="386:35" pos:end="386:43">pstate_ss</name></name></expr>)</condition> <block pos:start="386:46" pos:end="416:9">{<block_content pos:start="408:13" pos:end="414:33">

            <comment type="block" pos:start="388:13" pos:end="406:15">/* Singlestep state is Active-pending.

             * If we're in this state at the start of a TB then either

             *  a) we just took an exception to an EL which is being debugged

             *     and this is the first insn in the exception handler

             *  b) debug exceptions were masked and we just unmasked them

             *     without changing EL (eg by clearing PSTATE.D)

             * In either case we're going to take a swstep exception in the

             * "did not step an insn" case, and so the syndrome ISV and EX

             * bits should be zero.

             */</comment>

            <expr_stmt pos:start="408:13" pos:end="408:35"><expr pos:start="408:13" pos:end="408:34"><call pos:start="408:13" pos:end="408:34"><name pos:start="408:13" pos:end="408:18">assert</name><argument_list pos:start="408:19" pos:end="408:34">(<argument pos:start="408:20" pos:end="408:33"><expr pos:start="408:20" pos:end="408:33"><name pos:start="408:20" pos:end="408:28">num_insns</name> <operator pos:start="408:30" pos:end="408:31">==</operator> <literal type="number" pos:start="408:33" pos:end="408:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="410:13" pos:end="412:52"><expr pos:start="410:13" pos:end="412:51"><call pos:start="410:13" pos:end="412:51"><name pos:start="410:13" pos:end="410:25">gen_exception</name><argument_list pos:start="410:26" pos:end="412:51">(<argument pos:start="410:27" pos:end="410:35"><expr pos:start="410:27" pos:end="410:35"><name pos:start="410:27" pos:end="410:35">EXCP_UDEF</name></expr></argument>, <argument pos:start="410:38" pos:end="410:69"><expr pos:start="410:38" pos:end="410:69"><call pos:start="410:38" pos:end="410:69"><name pos:start="410:38" pos:end="410:47">syn_swstep</name><argument_list pos:start="410:48" pos:end="410:69">(<argument pos:start="410:49" pos:end="410:62"><expr pos:start="410:49" pos:end="410:62"><name pos:start="410:49" pos:end="410:62"><name pos:start="410:49" pos:end="410:50">dc</name><operator pos:start="410:51" pos:end="410:52">-&gt;</operator><name pos:start="410:53" pos:end="410:62">ss_same_el</name></name></expr></argument>, <argument pos:start="410:65" pos:end="410:65"><expr pos:start="410:65" pos:end="410:65"><literal type="number" pos:start="410:65" pos:end="410:65">0</literal></expr></argument>, <argument pos:start="410:68" pos:end="410:68"><expr pos:start="410:68" pos:end="410:68"><literal type="number" pos:start="410:68" pos:end="410:68">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="412:27" pos:end="412:50"><expr pos:start="412:27" pos:end="412:50"><call pos:start="412:27" pos:end="412:50"><name pos:start="412:27" pos:end="412:46">default_exception_el</name><argument_list pos:start="412:47" pos:end="412:50">(<argument pos:start="412:48" pos:end="412:49"><expr pos:start="412:48" pos:end="412:49"><name pos:start="412:48" pos:end="412:49">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="414:13" pos:end="414:33">goto <name pos:start="414:18" pos:end="414:32">done_generating</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="420:9" pos:end="448:9"><if pos:start="420:9" pos:end="440:9">if <condition pos:start="420:12" pos:end="420:22">(<expr pos:start="420:13" pos:end="420:21"><name pos:start="420:13" pos:end="420:21"><name pos:start="420:13" pos:end="420:14">dc</name><operator pos:start="420:15" pos:end="420:16">-&gt;</operator><name pos:start="420:17" pos:end="420:21">thumb</name></name></expr>)</condition> <block pos:start="420:24" pos:end="440:9">{<block_content pos:start="422:13" pos:end="438:13">

            <expr_stmt pos:start="422:13" pos:end="422:38"><expr pos:start="422:13" pos:end="422:37"><call pos:start="422:13" pos:end="422:37"><name pos:start="422:13" pos:end="422:28">disas_thumb_insn</name><argument_list pos:start="422:29" pos:end="422:37">(<argument pos:start="422:30" pos:end="422:32"><expr pos:start="422:30" pos:end="422:32"><name pos:start="422:30" pos:end="422:32">env</name></expr></argument>, <argument pos:start="422:35" pos:end="422:36"><expr pos:start="422:35" pos:end="422:36"><name pos:start="422:35" pos:end="422:36">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="424:13" pos:end="438:13"><if pos:start="424:13" pos:end="438:13">if <condition pos:start="424:16" pos:end="424:34">(<expr pos:start="424:17" pos:end="424:33"><name pos:start="424:17" pos:end="424:33"><name pos:start="424:17" pos:end="424:18">dc</name><operator pos:start="424:19" pos:end="424:20">-&gt;</operator><name pos:start="424:21" pos:end="424:33">condexec_mask</name></name></expr>)</condition> <block pos:start="424:36" pos:end="438:13">{<block_content pos:start="426:17" pos:end="436:17">

                <expr_stmt pos:start="426:17" pos:end="428:68"><expr pos:start="426:17" pos:end="428:67"><name pos:start="426:17" pos:end="426:33"><name pos:start="426:17" pos:end="426:18">dc</name><operator pos:start="426:19" pos:end="426:20">-&gt;</operator><name pos:start="426:21" pos:end="426:33">condexec_cond</name></name> <operator pos:start="426:35" pos:end="426:35">=</operator> <operator pos:start="426:37" pos:end="426:37">(</operator><name pos:start="426:38" pos:end="426:54"><name pos:start="426:38" pos:end="426:39">dc</name><operator pos:start="426:40" pos:end="426:41">-&gt;</operator><name pos:start="426:42" pos:end="426:54">condexec_cond</name></name> <operator pos:start="426:56" pos:end="426:56">&amp;</operator> <literal type="number" pos:start="426:58" pos:end="426:60">0xe</literal><operator pos:start="426:61" pos:end="426:61">)</operator>

                                   <operator pos:start="428:36" pos:end="428:36">|</operator> <operator pos:start="428:38" pos:end="428:38">(</operator><operator pos:start="428:39" pos:end="428:39">(</operator><name pos:start="428:40" pos:end="428:56"><name pos:start="428:40" pos:end="428:41">dc</name><operator pos:start="428:42" pos:end="428:43">-&gt;</operator><name pos:start="428:44" pos:end="428:56">condexec_mask</name></name> <operator pos:start="428:58" pos:end="428:59">&gt;&gt;</operator> <literal type="number" pos:start="428:61" pos:end="428:61">4</literal><operator pos:start="428:62" pos:end="428:62">)</operator> <operator pos:start="428:64" pos:end="428:64">&amp;</operator> <literal type="number" pos:start="428:66" pos:end="428:66">1</literal><operator pos:start="428:67" pos:end="428:67">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="430:17" pos:end="430:68"><expr pos:start="430:17" pos:end="430:67"><name pos:start="430:17" pos:end="430:33"><name pos:start="430:17" pos:end="430:18">dc</name><operator pos:start="430:19" pos:end="430:20">-&gt;</operator><name pos:start="430:21" pos:end="430:33">condexec_mask</name></name> <operator pos:start="430:35" pos:end="430:35">=</operator> <operator pos:start="430:37" pos:end="430:37">(</operator><name pos:start="430:38" pos:end="430:54"><name pos:start="430:38" pos:end="430:39">dc</name><operator pos:start="430:40" pos:end="430:41">-&gt;</operator><name pos:start="430:42" pos:end="430:54">condexec_mask</name></name> <operator pos:start="430:56" pos:end="430:57">&lt;&lt;</operator> <literal type="number" pos:start="430:59" pos:end="430:59">1</literal><operator pos:start="430:60" pos:end="430:60">)</operator> <operator pos:start="430:62" pos:end="430:62">&amp;</operator> <literal type="number" pos:start="430:64" pos:end="430:67">0x1f</literal></expr>;</expr_stmt>

                <if_stmt pos:start="432:17" pos:end="436:17"><if pos:start="432:17" pos:end="436:17">if <condition pos:start="432:20" pos:end="432:43">(<expr pos:start="432:21" pos:end="432:42"><name pos:start="432:21" pos:end="432:37"><name pos:start="432:21" pos:end="432:22">dc</name><operator pos:start="432:23" pos:end="432:24">-&gt;</operator><name pos:start="432:25" pos:end="432:37">condexec_mask</name></name> <operator pos:start="432:39" pos:end="432:40">==</operator> <literal type="number" pos:start="432:42" pos:end="432:42">0</literal></expr>)</condition> <block pos:start="432:45" pos:end="436:17">{<block_content pos:start="434:21" pos:end="434:42">

                    <expr_stmt pos:start="434:21" pos:end="434:42"><expr pos:start="434:21" pos:end="434:41"><name pos:start="434:21" pos:end="434:37"><name pos:start="434:21" pos:end="434:22">dc</name><operator pos:start="434:23" pos:end="434:24">-&gt;</operator><name pos:start="434:25" pos:end="434:37">condexec_cond</name></name> <operator pos:start="434:39" pos:end="434:39">=</operator> <literal type="number" pos:start="434:41" pos:end="434:41">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="440:11" pos:end="448:9">else <block pos:start="440:16" pos:end="448:9">{<block_content pos:start="442:13" pos:end="446:37">

            <decl_stmt pos:start="442:13" pos:end="442:71"><decl pos:start="442:13" pos:end="442:70"><type pos:start="442:13" pos:end="442:24"><name pos:start="442:13" pos:end="442:20">unsigned</name> <name pos:start="442:22" pos:end="442:24">int</name></type> <name pos:start="442:26" pos:end="442:29">insn</name> <init pos:start="442:31" pos:end="442:70">= <expr pos:start="442:33" pos:end="442:70"><call pos:start="442:33" pos:end="442:70"><name pos:start="442:33" pos:end="442:44">arm_ldl_code</name><argument_list pos:start="442:45" pos:end="442:70">(<argument pos:start="442:46" pos:end="442:48"><expr pos:start="442:46" pos:end="442:48"><name pos:start="442:46" pos:end="442:48">env</name></expr></argument>, <argument pos:start="442:51" pos:end="442:56"><expr pos:start="442:51" pos:end="442:56"><name pos:start="442:51" pos:end="442:56"><name pos:start="442:51" pos:end="442:52">dc</name><operator pos:start="442:53" pos:end="442:54">-&gt;</operator><name pos:start="442:55" pos:end="442:56">pc</name></name></expr></argument>, <argument pos:start="442:59" pos:end="442:69"><expr pos:start="442:59" pos:end="442:69"><name pos:start="442:59" pos:end="442:69"><name pos:start="442:59" pos:end="442:60">dc</name><operator pos:start="442:61" pos:end="442:62">-&gt;</operator><name pos:start="442:63" pos:end="442:69">sctlr_b</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="444:13" pos:end="444:24"><expr pos:start="444:13" pos:end="444:23"><name pos:start="444:13" pos:end="444:18"><name pos:start="444:13" pos:end="444:14">dc</name><operator pos:start="444:15" pos:end="444:16">-&gt;</operator><name pos:start="444:17" pos:end="444:18">pc</name></name> <operator pos:start="444:20" pos:end="444:21">+=</operator> <literal type="number" pos:start="444:23" pos:end="444:23">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="446:13" pos:end="446:37"><expr pos:start="446:13" pos:end="446:36"><call pos:start="446:13" pos:end="446:36"><name pos:start="446:13" pos:end="446:26">disas_arm_insn</name><argument_list pos:start="446:27" pos:end="446:36">(<argument pos:start="446:28" pos:end="446:29"><expr pos:start="446:28" pos:end="446:29"><name pos:start="446:28" pos:end="446:29">dc</name></expr></argument>, <argument pos:start="446:32" pos:end="446:35"><expr pos:start="446:32" pos:end="446:35"><name pos:start="446:32" pos:end="446:35">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="452:9" pos:end="458:9"><if pos:start="452:9" pos:end="458:9">if <condition pos:start="452:12" pos:end="452:39">(<expr pos:start="452:13" pos:end="452:38"><name pos:start="452:13" pos:end="452:23"><name pos:start="452:13" pos:end="452:14">dc</name><operator pos:start="452:15" pos:end="452:16">-&gt;</operator><name pos:start="452:17" pos:end="452:23">condjmp</name></name> <operator pos:start="452:25" pos:end="452:26">&amp;&amp;</operator> <operator pos:start="452:28" pos:end="452:28">!</operator><name pos:start="452:29" pos:end="452:38"><name pos:start="452:29" pos:end="452:30">dc</name><operator pos:start="452:31" pos:end="452:32">-&gt;</operator><name pos:start="452:33" pos:end="452:38">is_jmp</name></name></expr>)</condition> <block pos:start="452:41" pos:end="458:9">{<block_content pos:start="454:13" pos:end="456:28">

            <expr_stmt pos:start="454:13" pos:end="454:41"><expr pos:start="454:13" pos:end="454:40"><call pos:start="454:13" pos:end="454:40"><name pos:start="454:13" pos:end="454:25">gen_set_label</name><argument_list pos:start="454:26" pos:end="454:40">(<argument pos:start="454:27" pos:end="454:39"><expr pos:start="454:27" pos:end="454:39"><name pos:start="454:27" pos:end="454:39"><name pos:start="454:27" pos:end="454:28">dc</name><operator pos:start="454:29" pos:end="454:30">-&gt;</operator><name pos:start="454:31" pos:end="454:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="456:13" pos:end="456:28"><expr pos:start="456:13" pos:end="456:27"><name pos:start="456:13" pos:end="456:23"><name pos:start="456:13" pos:end="456:14">dc</name><operator pos:start="456:15" pos:end="456:16">-&gt;</operator><name pos:start="456:17" pos:end="456:23">condjmp</name></name> <operator pos:start="456:25" pos:end="456:25">=</operator> <literal type="number" pos:start="456:27" pos:end="456:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="462:9" pos:end="468:9"><if pos:start="462:9" pos:end="468:9">if <condition pos:start="462:12" pos:end="462:35">(<expr pos:start="462:13" pos:end="462:34"><call pos:start="462:13" pos:end="462:34"><name pos:start="462:13" pos:end="462:32">tcg_check_temp_count</name><argument_list pos:start="462:33" pos:end="462:34">()</argument_list></call></expr>)</condition> <block pos:start="462:37" pos:end="468:9">{<block_content pos:start="464:13" pos:end="466:28">

            <expr_stmt pos:start="464:13" pos:end="466:28"><expr pos:start="464:13" pos:end="466:27"><call pos:start="464:13" pos:end="466:27"><name pos:start="464:13" pos:end="464:19">fprintf</name><argument_list pos:start="464:20" pos:end="466:27">(<argument pos:start="464:21" pos:end="464:26"><expr pos:start="464:21" pos:end="464:26"><name pos:start="464:21" pos:end="464:26">stderr</name></expr></argument>, <argument pos:start="464:29" pos:end="464:73"><expr pos:start="464:29" pos:end="464:73"><literal type="string" pos:start="464:29" pos:end="464:56">"TCG temporary leak before "</literal><name pos:start="464:57" pos:end="464:69">TARGET_FMT_lx</name><literal type="string" pos:start="464:70" pos:end="464:73">"\n"</literal></expr></argument>,

                    <argument pos:start="466:21" pos:end="466:26"><expr pos:start="466:21" pos:end="466:26"><name pos:start="466:21" pos:end="466:26"><name pos:start="466:21" pos:end="466:22">dc</name><operator pos:start="466:23" pos:end="466:24">-&gt;</operator><name pos:start="466:25" pos:end="466:26">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="472:9" pos:end="478:64">/* Translation stops when a conditional branch is encountered.

         * Otherwise the subsequent code could get translated several times.

         * Also stop translation when a page boundary is reached.  This

         * ensures prefetch aborts occur at the right place.  */</comment>



        <comment type="block" pos:start="482:9" pos:end="498:11">/* We want to stop the TB if the next insn starts in a new page,

         * or if it spans between this page and the next. This means that

         * if we're looking at the last halfword in the page we need to

         * see if it's a 16-bit Thumb insn (which will fit in this TB)

         * or a 32-bit Thumb insn (which won't).

         * This is to avoid generating a silly TB with a single 16-bit insn

         * in it at the end of this page (which would execute correctly

         * but isn't very efficient).

         */</comment>

        <expr_stmt pos:start="500:9" pos:end="502:76"><expr pos:start="500:9" pos:end="502:75"><name pos:start="500:9" pos:end="500:19">end_of_page</name> <operator pos:start="500:21" pos:end="500:21">=</operator> <operator pos:start="500:23" pos:end="500:23">(</operator><name pos:start="500:24" pos:end="500:29"><name pos:start="500:24" pos:end="500:25">dc</name><operator pos:start="500:26" pos:end="500:27">-&gt;</operator><name pos:start="500:28" pos:end="500:29">pc</name></name> <operator pos:start="500:31" pos:end="500:32">&gt;=</operator> <name pos:start="500:34" pos:end="500:48">next_page_start</name><operator pos:start="500:49" pos:end="500:49">)</operator> <operator pos:start="500:51" pos:end="500:52">||</operator>

            <operator pos:start="502:13" pos:end="502:13">(</operator><operator pos:start="502:14" pos:end="502:14">(</operator><name pos:start="502:15" pos:end="502:20"><name pos:start="502:15" pos:end="502:16">dc</name><operator pos:start="502:17" pos:end="502:18">-&gt;</operator><name pos:start="502:19" pos:end="502:20">pc</name></name> <operator pos:start="502:22" pos:end="502:23">&gt;=</operator> <name pos:start="502:25" pos:end="502:39">next_page_start</name> <operator pos:start="502:41" pos:end="502:41">-</operator> <literal type="number" pos:start="502:43" pos:end="502:43">3</literal><operator pos:start="502:44" pos:end="502:44">)</operator> <operator pos:start="502:46" pos:end="502:47">&amp;&amp;</operator> <call pos:start="502:49" pos:end="502:74"><name pos:start="502:49" pos:end="502:65">insn_crosses_page</name><argument_list pos:start="502:66" pos:end="502:74">(<argument pos:start="502:67" pos:end="502:69"><expr pos:start="502:67" pos:end="502:69"><name pos:start="502:67" pos:end="502:69">env</name></expr></argument>, <argument pos:start="502:72" pos:end="502:73"><expr pos:start="502:72" pos:end="502:73"><name pos:start="502:72" pos:end="502:73">dc</name></expr></argument>)</argument_list></call><operator pos:start="502:75" pos:end="502:75">)</operator></expr>;</expr_stmt>



    </block_content>}</block> while <condition pos:start="506:13" pos:end="514:35">(<expr pos:start="506:14" pos:end="514:34"><operator pos:start="506:14" pos:end="506:14">!</operator><name pos:start="506:15" pos:end="506:24"><name pos:start="506:15" pos:end="506:16">dc</name><operator pos:start="506:17" pos:end="506:18">-&gt;</operator><name pos:start="506:19" pos:end="506:24">is_jmp</name></name> <operator pos:start="506:26" pos:end="506:27">&amp;&amp;</operator> <operator pos:start="506:29" pos:end="506:29">!</operator><call pos:start="506:30" pos:end="506:46"><name pos:start="506:30" pos:end="506:44">tcg_op_buf_full</name><argument_list pos:start="506:45" pos:end="506:46">()</argument_list></call> <operator pos:start="506:48" pos:end="506:49">&amp;&amp;</operator>

             <operator pos:start="508:14" pos:end="508:14">!</operator><call pos:start="508:15" pos:end="508:35"><name pos:start="508:15" pos:end="508:31">is_singlestepping</name><argument_list pos:start="508:32" pos:end="508:35">(<argument pos:start="508:33" pos:end="508:34"><expr pos:start="508:33" pos:end="508:34"><name pos:start="508:33" pos:end="508:34">dc</name></expr></argument>)</argument_list></call> <operator pos:start="508:37" pos:end="508:38">&amp;&amp;</operator>

             <operator pos:start="510:14" pos:end="510:14">!</operator><name pos:start="510:15" pos:end="510:24">singlestep</name> <operator pos:start="510:26" pos:end="510:27">&amp;&amp;</operator>

             <operator pos:start="512:14" pos:end="512:14">!</operator><name pos:start="512:15" pos:end="512:25">end_of_page</name> <operator pos:start="512:27" pos:end="512:28">&amp;&amp;</operator>

             <name pos:start="514:14" pos:end="514:22">num_insns</name> <operator pos:start="514:24" pos:end="514:24">&lt;</operator> <name pos:start="514:26" pos:end="514:34">max_insns</name></expr>)</condition>;</do>



    <if_stmt pos:start="518:5" pos:end="532:5"><if pos:start="518:5" pos:end="532:5">if <condition pos:start="518:8" pos:end="518:32">(<expr pos:start="518:9" pos:end="518:31"><name pos:start="518:9" pos:end="518:18"><name pos:start="518:9" pos:end="518:10">tb</name><operator pos:start="518:11" pos:end="518:12">-&gt;</operator><name pos:start="518:13" pos:end="518:18">cflags</name></name> <operator pos:start="518:20" pos:end="518:20">&amp;</operator> <name pos:start="518:22" pos:end="518:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="518:34" pos:end="532:5">{<block_content pos:start="520:9" pos:end="530:21">

        <if_stmt pos:start="520:9" pos:end="528:9"><if pos:start="520:9" pos:end="528:9">if <condition pos:start="520:12" pos:end="520:24">(<expr pos:start="520:13" pos:end="520:23"><name pos:start="520:13" pos:end="520:23"><name pos:start="520:13" pos:end="520:14">dc</name><operator pos:start="520:15" pos:end="520:16">-&gt;</operator><name pos:start="520:17" pos:end="520:23">condjmp</name></name></expr>)</condition> <block pos:start="520:26" pos:end="528:9">{<block_content pos:start="526:13" pos:end="526:66">

            <comment type="block" pos:start="522:13" pos:end="524:24">/* FIXME:  This can theoretically happen with self-modifying

               code.  */</comment>

            <expr_stmt pos:start="526:13" pos:end="526:66"><expr pos:start="526:13" pos:end="526:65"><call pos:start="526:13" pos:end="526:65"><name pos:start="526:13" pos:end="526:21">cpu_abort</name><argument_list pos:start="526:22" pos:end="526:65">(<argument pos:start="526:23" pos:end="526:24"><expr pos:start="526:23" pos:end="526:24"><name pos:start="526:23" pos:end="526:24">cs</name></expr></argument>, <argument pos:start="526:27" pos:end="526:64"><expr pos:start="526:27" pos:end="526:64"><literal type="string" pos:start="526:27" pos:end="526:64">"IO on conditional branch instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="530:9" pos:end="530:21"><expr pos:start="530:9" pos:end="530:20"><call pos:start="530:9" pos:end="530:20"><name pos:start="530:9" pos:end="530:18">gen_io_end</name><argument_list pos:start="530:19" pos:end="530:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="536:5" pos:end="540:32">/* At this stage dc-&gt;condjmp will only be set when the skipped

       instruction was a conditional branch or trap, and the PC has

       already been written.  */</comment>

    <expr_stmt pos:start="542:5" pos:end="542:25"><expr pos:start="542:5" pos:end="542:24"><call pos:start="542:5" pos:end="542:24"><name pos:start="542:5" pos:end="542:20">gen_set_condexec</name><argument_list pos:start="542:21" pos:end="542:24">(<argument pos:start="542:22" pos:end="542:23"><expr pos:start="542:22" pos:end="542:23"><name pos:start="542:22" pos:end="542:23">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="544:5" pos:end="688:5"><if pos:start="544:5" pos:end="592:5">if <condition pos:start="544:8" pos:end="544:40">(<expr pos:start="544:9" pos:end="544:39"><call pos:start="544:9" pos:end="544:39"><name pos:start="544:9" pos:end="544:16">unlikely</name><argument_list pos:start="544:17" pos:end="544:39">(<argument pos:start="544:18" pos:end="544:38"><expr pos:start="544:18" pos:end="544:38"><call pos:start="544:18" pos:end="544:38"><name pos:start="544:18" pos:end="544:34">is_singlestepping</name><argument_list pos:start="544:35" pos:end="544:38">(<argument pos:start="544:36" pos:end="544:37"><expr pos:start="544:36" pos:end="544:37"><name pos:start="544:36" pos:end="544:37">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="544:42" pos:end="592:5">{<block_content pos:start="548:9" pos:end="590:9">

        <comment type="block" pos:start="546:9" pos:end="546:72">/* Unconditional and "condition passed" instruction codepath. */</comment>

        <switch pos:start="548:9" pos:end="590:9">switch <condition pos:start="548:16" pos:end="548:27">(<expr pos:start="548:17" pos:end="548:26"><name pos:start="548:17" pos:end="548:26"><name pos:start="548:17" pos:end="548:18">dc</name><operator pos:start="548:19" pos:end="548:20">-&gt;</operator><name pos:start="548:21" pos:end="548:26">is_jmp</name></name></expr>)</condition> <block pos:start="548:29" pos:end="590:9">{<block_content pos:start="550:9" pos:end="588:41">

        <case pos:start="550:9" pos:end="550:23">case <expr pos:start="550:14" pos:end="550:22"><name pos:start="550:14" pos:end="550:22">DISAS_SWI</name></expr>:</case>

            <expr_stmt pos:start="552:13" pos:end="552:31"><expr pos:start="552:13" pos:end="552:30"><call pos:start="552:13" pos:end="552:30"><name pos:start="552:13" pos:end="552:26">gen_ss_advance</name><argument_list pos:start="552:27" pos:end="552:30">(<argument pos:start="552:28" pos:end="552:29"><expr pos:start="552:28" pos:end="552:29"><name pos:start="552:28" pos:end="552:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="554:13" pos:end="556:52"><expr pos:start="554:13" pos:end="556:51"><call pos:start="554:13" pos:end="556:51"><name pos:start="554:13" pos:end="554:25">gen_exception</name><argument_list pos:start="554:26" pos:end="556:51">(<argument pos:start="554:27" pos:end="554:34"><expr pos:start="554:27" pos:end="554:34"><name pos:start="554:27" pos:end="554:34">EXCP_SWI</name></expr></argument>, <argument pos:start="554:37" pos:end="554:72"><expr pos:start="554:37" pos:end="554:72"><call pos:start="554:37" pos:end="554:72"><name pos:start="554:37" pos:end="554:48">syn_aa32_svc</name><argument_list pos:start="554:49" pos:end="554:72">(<argument pos:start="554:50" pos:end="554:60"><expr pos:start="554:50" pos:end="554:60"><name pos:start="554:50" pos:end="554:60"><name pos:start="554:50" pos:end="554:51">dc</name><operator pos:start="554:52" pos:end="554:53">-&gt;</operator><name pos:start="554:54" pos:end="554:60">svc_imm</name></name></expr></argument>, <argument pos:start="554:63" pos:end="554:71"><expr pos:start="554:63" pos:end="554:71"><name pos:start="554:63" pos:end="554:71"><name pos:start="554:63" pos:end="554:64">dc</name><operator pos:start="554:65" pos:end="554:66">-&gt;</operator><name pos:start="554:67" pos:end="554:71">thumb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="556:27" pos:end="556:50"><expr pos:start="556:27" pos:end="556:50"><call pos:start="556:27" pos:end="556:50"><name pos:start="556:27" pos:end="556:46">default_exception_el</name><argument_list pos:start="556:47" pos:end="556:50">(<argument pos:start="556:48" pos:end="556:49"><expr pos:start="556:48" pos:end="556:49"><name pos:start="556:48" pos:end="556:49">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="558:13" pos:end="558:18">break;</break>

        <case pos:start="560:9" pos:end="560:23">case <expr pos:start="560:14" pos:end="560:22"><name pos:start="560:14" pos:end="560:22">DISAS_HVC</name></expr>:</case>

            <expr_stmt pos:start="562:13" pos:end="562:31"><expr pos:start="562:13" pos:end="562:30"><call pos:start="562:13" pos:end="562:30"><name pos:start="562:13" pos:end="562:26">gen_ss_advance</name><argument_list pos:start="562:27" pos:end="562:30">(<argument pos:start="562:28" pos:end="562:29"><expr pos:start="562:28" pos:end="562:29"><name pos:start="562:28" pos:end="562:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="564:13" pos:end="564:66"><expr pos:start="564:13" pos:end="564:65"><call pos:start="564:13" pos:end="564:65"><name pos:start="564:13" pos:end="564:25">gen_exception</name><argument_list pos:start="564:26" pos:end="564:65">(<argument pos:start="564:27" pos:end="564:34"><expr pos:start="564:27" pos:end="564:34"><name pos:start="564:27" pos:end="564:34">EXCP_HVC</name></expr></argument>, <argument pos:start="564:37" pos:end="564:61"><expr pos:start="564:37" pos:end="564:61"><call pos:start="564:37" pos:end="564:61"><name pos:start="564:37" pos:end="564:48">syn_aa32_hvc</name><argument_list pos:start="564:49" pos:end="564:61">(<argument pos:start="564:50" pos:end="564:60"><expr pos:start="564:50" pos:end="564:60"><name pos:start="564:50" pos:end="564:60"><name pos:start="564:50" pos:end="564:51">dc</name><operator pos:start="564:52" pos:end="564:53">-&gt;</operator><name pos:start="564:54" pos:end="564:60">svc_imm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="564:64" pos:end="564:64"><expr pos:start="564:64" pos:end="564:64"><literal type="number" pos:start="564:64" pos:end="564:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="566:13" pos:end="566:18">break;</break>

        <case pos:start="568:9" pos:end="568:23">case <expr pos:start="568:14" pos:end="568:22"><name pos:start="568:14" pos:end="568:22">DISAS_SMC</name></expr>:</case>

            <expr_stmt pos:start="570:13" pos:end="570:31"><expr pos:start="570:13" pos:end="570:30"><call pos:start="570:13" pos:end="570:30"><name pos:start="570:13" pos:end="570:26">gen_ss_advance</name><argument_list pos:start="570:27" pos:end="570:30">(<argument pos:start="570:28" pos:end="570:29"><expr pos:start="570:28" pos:end="570:29"><name pos:start="570:28" pos:end="570:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="572:13" pos:end="572:55"><expr pos:start="572:13" pos:end="572:54"><call pos:start="572:13" pos:end="572:54"><name pos:start="572:13" pos:end="572:25">gen_exception</name><argument_list pos:start="572:26" pos:end="572:54">(<argument pos:start="572:27" pos:end="572:34"><expr pos:start="572:27" pos:end="572:34"><name pos:start="572:27" pos:end="572:34">EXCP_SMC</name></expr></argument>, <argument pos:start="572:37" pos:end="572:50"><expr pos:start="572:37" pos:end="572:50"><call pos:start="572:37" pos:end="572:50"><name pos:start="572:37" pos:end="572:48">syn_aa32_smc</name><argument_list pos:start="572:49" pos:end="572:50">()</argument_list></call></expr></argument>, <argument pos:start="572:53" pos:end="572:53"><expr pos:start="572:53" pos:end="572:53"><literal type="number" pos:start="572:53" pos:end="572:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="574:13" pos:end="574:18">break;</break>

        <case pos:start="576:9" pos:end="576:24">case <expr pos:start="576:14" pos:end="576:23"><name pos:start="576:14" pos:end="576:23">DISAS_NEXT</name></expr>:</case>

        <case pos:start="578:9" pos:end="578:26">case <expr pos:start="578:14" pos:end="578:25"><name pos:start="578:14" pos:end="578:25">DISAS_UPDATE</name></expr>:</case>

            <expr_stmt pos:start="580:13" pos:end="580:38"><expr pos:start="580:13" pos:end="580:37"><call pos:start="580:13" pos:end="580:37"><name pos:start="580:13" pos:end="580:25">gen_set_pc_im</name><argument_list pos:start="580:26" pos:end="580:37">(<argument pos:start="580:27" pos:end="580:28"><expr pos:start="580:27" pos:end="580:28"><name pos:start="580:27" pos:end="580:28">dc</name></expr></argument>, <argument pos:start="580:31" pos:end="580:36"><expr pos:start="580:31" pos:end="580:36"><name pos:start="580:31" pos:end="580:36"><name pos:start="580:31" pos:end="580:32">dc</name><operator pos:start="580:33" pos:end="580:34">-&gt;</operator><name pos:start="580:35" pos:end="580:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="582:13" pos:end="582:30">/* fall through */</comment>

        <default pos:start="584:9" pos:end="584:16">default:</default>

            <comment type="block" pos:start="586:13" pos:end="586:74">/* FIXME: Single stepping a WFI insn will not halt the CPU. */</comment>

            <expr_stmt pos:start="588:13" pos:end="588:41"><expr pos:start="588:13" pos:end="588:40"><call pos:start="588:13" pos:end="588:40"><name pos:start="588:13" pos:end="588:36">gen_singlestep_exception</name><argument_list pos:start="588:37" pos:end="588:40">(<argument pos:start="588:38" pos:end="588:39"><expr pos:start="588:38" pos:end="588:39"><name pos:start="588:38" pos:end="588:39">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="592:7" pos:end="688:5">else <block pos:start="592:12" pos:end="688:5">{<block_content pos:start="610:9" pos:end="686:9">

        <comment type="block" pos:start="594:9" pos:end="608:11">/* While branches must always occur at the end of an IT block,

           there are a few other things that can cause us to terminate

           the TB in the middle of an IT block:

            - Exception generating instructions (bkpt, swi, undefined).

            - Page boundaries.

            - Hardware watchpoints.

           Hardware breakpoints have already been handled and skip this code.

         */</comment>

        <switch pos:start="610:9" pos:end="686:9">switch<condition pos:start="610:15" pos:end="610:26">(<expr pos:start="610:16" pos:end="610:25"><name pos:start="610:16" pos:end="610:25"><name pos:start="610:16" pos:end="610:17">dc</name><operator pos:start="610:18" pos:end="610:19">-&gt;</operator><name pos:start="610:20" pos:end="610:25">is_jmp</name></name></expr>)</condition> <block pos:start="610:28" pos:end="686:9">{<block_content pos:start="612:9" pos:end="684:18">

        <case pos:start="612:9" pos:end="612:24">case <expr pos:start="612:14" pos:end="612:23"><name pos:start="612:14" pos:end="612:23">DISAS_NEXT</name></expr>:</case>

            <expr_stmt pos:start="614:13" pos:end="614:39"><expr pos:start="614:13" pos:end="614:38"><call pos:start="614:13" pos:end="614:38"><name pos:start="614:13" pos:end="614:23">gen_goto_tb</name><argument_list pos:start="614:24" pos:end="614:38">(<argument pos:start="614:25" pos:end="614:26"><expr pos:start="614:25" pos:end="614:26"><name pos:start="614:25" pos:end="614:26">dc</name></expr></argument>, <argument pos:start="614:29" pos:end="614:29"><expr pos:start="614:29" pos:end="614:29"><literal type="number" pos:start="614:29" pos:end="614:29">1</literal></expr></argument>, <argument pos:start="614:32" pos:end="614:37"><expr pos:start="614:32" pos:end="614:37"><name pos:start="614:32" pos:end="614:37"><name pos:start="614:32" pos:end="614:33">dc</name><operator pos:start="614:34" pos:end="614:35">-&gt;</operator><name pos:start="614:36" pos:end="614:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="616:13" pos:end="616:18">break;</break>

        <case pos:start="618:9" pos:end="618:26">case <expr pos:start="618:14" pos:end="618:25"><name pos:start="618:14" pos:end="618:25">DISAS_UPDATE</name></expr>:</case>

            <expr_stmt pos:start="620:13" pos:end="620:38"><expr pos:start="620:13" pos:end="620:37"><call pos:start="620:13" pos:end="620:37"><name pos:start="620:13" pos:end="620:25">gen_set_pc_im</name><argument_list pos:start="620:26" pos:end="620:37">(<argument pos:start="620:27" pos:end="620:28"><expr pos:start="620:27" pos:end="620:28"><name pos:start="620:27" pos:end="620:28">dc</name></expr></argument>, <argument pos:start="620:31" pos:end="620:36"><expr pos:start="620:31" pos:end="620:36"><name pos:start="620:31" pos:end="620:36"><name pos:start="620:31" pos:end="620:32">dc</name><operator pos:start="620:33" pos:end="620:34">-&gt;</operator><name pos:start="620:35" pos:end="620:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="622:13" pos:end="622:30">/* fall through */</comment>

        <case pos:start="624:9" pos:end="624:24">case <expr pos:start="624:14" pos:end="624:23"><name pos:start="624:14" pos:end="624:23">DISAS_JUMP</name></expr>:</case>

        <default pos:start="626:9" pos:end="626:16">default:</default>

            <comment type="block" pos:start="628:13" pos:end="628:79">/* indicate that the hash table must be used to find the next TB */</comment>

            <expr_stmt pos:start="630:13" pos:end="630:31"><expr pos:start="630:13" pos:end="630:30"><call pos:start="630:13" pos:end="630:30"><name pos:start="630:13" pos:end="630:27">tcg_gen_exit_tb</name><argument_list pos:start="630:28" pos:end="630:30">(<argument pos:start="630:29" pos:end="630:29"><expr pos:start="630:29" pos:end="630:29"><literal type="number" pos:start="630:29" pos:end="630:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="632:13" pos:end="632:18">break;</break>

        <case pos:start="634:9" pos:end="634:27">case <expr pos:start="634:14" pos:end="634:26"><name pos:start="634:14" pos:end="634:26">DISAS_TB_JUMP</name></expr>:</case>

            <comment type="block" pos:start="636:13" pos:end="636:42">/* nothing more to generate */</comment>

            <break pos:start="638:13" pos:end="638:18">break;</break>

        <case pos:start="640:9" pos:end="640:23">case <expr pos:start="640:14" pos:end="640:22"><name pos:start="640:14" pos:end="640:22">DISAS_WFI</name></expr>:</case>

            <expr_stmt pos:start="642:13" pos:end="642:36"><expr pos:start="642:13" pos:end="642:35"><call pos:start="642:13" pos:end="642:35"><name pos:start="642:13" pos:end="642:26">gen_helper_wfi</name><argument_list pos:start="642:27" pos:end="642:35">(<argument pos:start="642:28" pos:end="642:34"><expr pos:start="642:28" pos:end="642:34"><name pos:start="642:28" pos:end="642:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="644:13" pos:end="648:15">/* The helper doesn't necessarily throw an exception, but we

             * must go back to the main loop to check for interrupts anyway.

             */</comment>

            <expr_stmt pos:start="650:13" pos:end="650:31"><expr pos:start="650:13" pos:end="650:30"><call pos:start="650:13" pos:end="650:30"><name pos:start="650:13" pos:end="650:27">tcg_gen_exit_tb</name><argument_list pos:start="650:28" pos:end="650:30">(<argument pos:start="650:29" pos:end="650:29"><expr pos:start="650:29" pos:end="650:29"><literal type="number" pos:start="650:29" pos:end="650:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="652:13" pos:end="652:18">break;</break>

        <case pos:start="654:9" pos:end="654:23">case <expr pos:start="654:14" pos:end="654:22"><name pos:start="654:14" pos:end="654:22">DISAS_WFE</name></expr>:</case>

            <expr_stmt pos:start="656:13" pos:end="656:36"><expr pos:start="656:13" pos:end="656:35"><call pos:start="656:13" pos:end="656:35"><name pos:start="656:13" pos:end="656:26">gen_helper_wfe</name><argument_list pos:start="656:27" pos:end="656:35">(<argument pos:start="656:28" pos:end="656:34"><expr pos:start="656:28" pos:end="656:34"><name pos:start="656:28" pos:end="656:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="658:13" pos:end="658:18">break;</break>

        <case pos:start="660:9" pos:end="660:25">case <expr pos:start="660:14" pos:end="660:24"><name pos:start="660:14" pos:end="660:24">DISAS_YIELD</name></expr>:</case>

            <expr_stmt pos:start="662:13" pos:end="662:38"><expr pos:start="662:13" pos:end="662:37"><call pos:start="662:13" pos:end="662:37"><name pos:start="662:13" pos:end="662:28">gen_helper_yield</name><argument_list pos:start="662:29" pos:end="662:37">(<argument pos:start="662:30" pos:end="662:36"><expr pos:start="662:30" pos:end="662:36"><name pos:start="662:30" pos:end="662:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="664:13" pos:end="664:18">break;</break>

        <case pos:start="666:9" pos:end="666:23">case <expr pos:start="666:14" pos:end="666:22"><name pos:start="666:14" pos:end="666:22">DISAS_SWI</name></expr>:</case>

            <expr_stmt pos:start="668:13" pos:end="670:52"><expr pos:start="668:13" pos:end="670:51"><call pos:start="668:13" pos:end="670:51"><name pos:start="668:13" pos:end="668:25">gen_exception</name><argument_list pos:start="668:26" pos:end="670:51">(<argument pos:start="668:27" pos:end="668:34"><expr pos:start="668:27" pos:end="668:34"><name pos:start="668:27" pos:end="668:34">EXCP_SWI</name></expr></argument>, <argument pos:start="668:37" pos:end="668:72"><expr pos:start="668:37" pos:end="668:72"><call pos:start="668:37" pos:end="668:72"><name pos:start="668:37" pos:end="668:48">syn_aa32_svc</name><argument_list pos:start="668:49" pos:end="668:72">(<argument pos:start="668:50" pos:end="668:60"><expr pos:start="668:50" pos:end="668:60"><name pos:start="668:50" pos:end="668:60"><name pos:start="668:50" pos:end="668:51">dc</name><operator pos:start="668:52" pos:end="668:53">-&gt;</operator><name pos:start="668:54" pos:end="668:60">svc_imm</name></name></expr></argument>, <argument pos:start="668:63" pos:end="668:71"><expr pos:start="668:63" pos:end="668:71"><name pos:start="668:63" pos:end="668:71"><name pos:start="668:63" pos:end="668:64">dc</name><operator pos:start="668:65" pos:end="668:66">-&gt;</operator><name pos:start="668:67" pos:end="668:71">thumb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="670:27" pos:end="670:50"><expr pos:start="670:27" pos:end="670:50"><call pos:start="670:27" pos:end="670:50"><name pos:start="670:27" pos:end="670:46">default_exception_el</name><argument_list pos:start="670:47" pos:end="670:50">(<argument pos:start="670:48" pos:end="670:49"><expr pos:start="670:48" pos:end="670:49"><name pos:start="670:48" pos:end="670:49">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="672:13" pos:end="672:18">break;</break>

        <case pos:start="674:9" pos:end="674:23">case <expr pos:start="674:14" pos:end="674:22"><name pos:start="674:14" pos:end="674:22">DISAS_HVC</name></expr>:</case>

            <expr_stmt pos:start="676:13" pos:end="676:66"><expr pos:start="676:13" pos:end="676:65"><call pos:start="676:13" pos:end="676:65"><name pos:start="676:13" pos:end="676:25">gen_exception</name><argument_list pos:start="676:26" pos:end="676:65">(<argument pos:start="676:27" pos:end="676:34"><expr pos:start="676:27" pos:end="676:34"><name pos:start="676:27" pos:end="676:34">EXCP_HVC</name></expr></argument>, <argument pos:start="676:37" pos:end="676:61"><expr pos:start="676:37" pos:end="676:61"><call pos:start="676:37" pos:end="676:61"><name pos:start="676:37" pos:end="676:48">syn_aa32_hvc</name><argument_list pos:start="676:49" pos:end="676:61">(<argument pos:start="676:50" pos:end="676:60"><expr pos:start="676:50" pos:end="676:60"><name pos:start="676:50" pos:end="676:60"><name pos:start="676:50" pos:end="676:51">dc</name><operator pos:start="676:52" pos:end="676:53">-&gt;</operator><name pos:start="676:54" pos:end="676:60">svc_imm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="676:64" pos:end="676:64"><expr pos:start="676:64" pos:end="676:64"><literal type="number" pos:start="676:64" pos:end="676:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="678:13" pos:end="678:18">break;</break>

        <case pos:start="680:9" pos:end="680:23">case <expr pos:start="680:14" pos:end="680:22"><name pos:start="680:14" pos:end="680:22">DISAS_SMC</name></expr>:</case>

            <expr_stmt pos:start="682:13" pos:end="682:55"><expr pos:start="682:13" pos:end="682:54"><call pos:start="682:13" pos:end="682:54"><name pos:start="682:13" pos:end="682:25">gen_exception</name><argument_list pos:start="682:26" pos:end="682:54">(<argument pos:start="682:27" pos:end="682:34"><expr pos:start="682:27" pos:end="682:34"><name pos:start="682:27" pos:end="682:34">EXCP_SMC</name></expr></argument>, <argument pos:start="682:37" pos:end="682:50"><expr pos:start="682:37" pos:end="682:50"><call pos:start="682:37" pos:end="682:50"><name pos:start="682:37" pos:end="682:48">syn_aa32_smc</name><argument_list pos:start="682:49" pos:end="682:50">()</argument_list></call></expr></argument>, <argument pos:start="682:53" pos:end="682:53"><expr pos:start="682:53" pos:end="682:53"><literal type="number" pos:start="682:53" pos:end="682:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="684:13" pos:end="684:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="692:5" pos:end="712:5"><if pos:start="692:5" pos:end="712:5">if <condition pos:start="692:8" pos:end="692:20">(<expr pos:start="692:9" pos:end="692:19"><name pos:start="692:9" pos:end="692:19"><name pos:start="692:9" pos:end="692:10">dc</name><operator pos:start="692:11" pos:end="692:12">-&gt;</operator><name pos:start="692:13" pos:end="692:19">condjmp</name></name></expr>)</condition> <block pos:start="692:22" pos:end="712:5">{<block_content pos:start="696:9" pos:end="710:9">

        <comment type="block" pos:start="694:9" pos:end="694:78">/* "Condition failed" instruction codepath for the branch/trap insn */</comment>

        <expr_stmt pos:start="696:9" pos:end="696:37"><expr pos:start="696:9" pos:end="696:36"><call pos:start="696:9" pos:end="696:36"><name pos:start="696:9" pos:end="696:21">gen_set_label</name><argument_list pos:start="696:22" pos:end="696:36">(<argument pos:start="696:23" pos:end="696:35"><expr pos:start="696:23" pos:end="696:35"><name pos:start="696:23" pos:end="696:35"><name pos:start="696:23" pos:end="696:24">dc</name><operator pos:start="696:25" pos:end="696:26">-&gt;</operator><name pos:start="696:27" pos:end="696:35">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="698:9" pos:end="698:29"><expr pos:start="698:9" pos:end="698:28"><call pos:start="698:9" pos:end="698:28"><name pos:start="698:9" pos:end="698:24">gen_set_condexec</name><argument_list pos:start="698:25" pos:end="698:28">(<argument pos:start="698:26" pos:end="698:27"><expr pos:start="698:26" pos:end="698:27"><name pos:start="698:26" pos:end="698:27">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="700:9" pos:end="710:9"><if pos:start="700:9" pos:end="706:9">if <condition pos:start="700:12" pos:end="700:44">(<expr pos:start="700:13" pos:end="700:43"><call pos:start="700:13" pos:end="700:43"><name pos:start="700:13" pos:end="700:20">unlikely</name><argument_list pos:start="700:21" pos:end="700:43">(<argument pos:start="700:22" pos:end="700:42"><expr pos:start="700:22" pos:end="700:42"><call pos:start="700:22" pos:end="700:42"><name pos:start="700:22" pos:end="700:38">is_singlestepping</name><argument_list pos:start="700:39" pos:end="700:42">(<argument pos:start="700:40" pos:end="700:41"><expr pos:start="700:40" pos:end="700:41"><name pos:start="700:40" pos:end="700:41">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="700:46" pos:end="706:9">{<block_content pos:start="702:13" pos:end="704:41">

            <expr_stmt pos:start="702:13" pos:end="702:38"><expr pos:start="702:13" pos:end="702:37"><call pos:start="702:13" pos:end="702:37"><name pos:start="702:13" pos:end="702:25">gen_set_pc_im</name><argument_list pos:start="702:26" pos:end="702:37">(<argument pos:start="702:27" pos:end="702:28"><expr pos:start="702:27" pos:end="702:28"><name pos:start="702:27" pos:end="702:28">dc</name></expr></argument>, <argument pos:start="702:31" pos:end="702:36"><expr pos:start="702:31" pos:end="702:36"><name pos:start="702:31" pos:end="702:36"><name pos:start="702:31" pos:end="702:32">dc</name><operator pos:start="702:33" pos:end="702:34">-&gt;</operator><name pos:start="702:35" pos:end="702:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="704:13" pos:end="704:41"><expr pos:start="704:13" pos:end="704:40"><call pos:start="704:13" pos:end="704:40"><name pos:start="704:13" pos:end="704:36">gen_singlestep_exception</name><argument_list pos:start="704:37" pos:end="704:40">(<argument pos:start="704:38" pos:end="704:39"><expr pos:start="704:38" pos:end="704:39"><name pos:start="704:38" pos:end="704:39">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="706:11" pos:end="710:9">else <block pos:start="706:16" pos:end="710:9">{<block_content pos:start="708:13" pos:end="708:39">

            <expr_stmt pos:start="708:13" pos:end="708:39"><expr pos:start="708:13" pos:end="708:38"><call pos:start="708:13" pos:end="708:38"><name pos:start="708:13" pos:end="708:23">gen_goto_tb</name><argument_list pos:start="708:24" pos:end="708:38">(<argument pos:start="708:25" pos:end="708:26"><expr pos:start="708:25" pos:end="708:26"><name pos:start="708:25" pos:end="708:26">dc</name></expr></argument>, <argument pos:start="708:29" pos:end="708:29"><expr pos:start="708:29" pos:end="708:29"><literal type="number" pos:start="708:29" pos:end="708:29">1</literal></expr></argument>, <argument pos:start="708:32" pos:end="708:37"><expr pos:start="708:32" pos:end="708:37"><name pos:start="708:32" pos:end="708:37"><name pos:start="708:32" pos:end="708:33">dc</name><operator pos:start="708:34" pos:end="708:35">-&gt;</operator><name pos:start="708:36" pos:end="708:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="716:1" pos:end="716:16"><name pos:start="716:1" pos:end="716:15">done_generating</name>:</label>

    <expr_stmt pos:start="718:5" pos:end="723:0"><expr pos:start="718:5" pos:end="718:29"><call pos:start="718:5" pos:end="718:29"><name pos:start="718:5" pos:end="718:14">gen_tb_end</name><argument_list pos:start="718:15" pos:end="718:29">(<argument pos:start="718:16" pos:end="718:17"><expr pos:start="718:16" pos:end="718:17"><name pos:start="718:16" pos:end="718:17">tb</name></expr></argument>, <argument pos:start="718:20" pos:end="718:28"><expr pos:start="718:20" pos:end="718:28"><name pos:start="718:20" pos:end="718:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="722:1" pos:end="722:18">#<cpp:directive pos:start="722:2" pos:end="722:6">ifdef</cpp:directive> <name pos:start="722:8" pos:end="722:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="724:5" pos:end="745:0"><if pos:start="724:5" pos:end="745:0">if <condition pos:start="724:8" pos:end="726:41">(<expr pos:start="724:9" pos:end="726:40"><call pos:start="724:9" pos:end="724:45"><name pos:start="724:9" pos:end="724:26">qemu_loglevel_mask</name><argument_list pos:start="724:27" pos:end="724:45">(<argument pos:start="724:28" pos:end="724:44"><expr pos:start="724:28" pos:end="724:44"><name pos:start="724:28" pos:end="724:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call> <operator pos:start="724:47" pos:end="724:48">&amp;&amp;</operator>

        <call pos:start="726:9" pos:end="726:40"><name pos:start="726:9" pos:end="726:30">qemu_log_in_addr_range</name><argument_list pos:start="726:31" pos:end="726:40">(<argument pos:start="726:32" pos:end="726:39"><expr pos:start="726:32" pos:end="726:39"><name pos:start="726:32" pos:end="726:39">pc_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="726:43" pos:end="745:0">{<block_content pos:start="728:9" pos:end="740:26">

        <expr_stmt pos:start="728:9" pos:end="728:24"><expr pos:start="728:9" pos:end="728:23"><call pos:start="728:9" pos:end="728:23"><name pos:start="728:9" pos:end="728:21">qemu_log_lock</name><argument_list pos:start="728:22" pos:end="728:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="730:9" pos:end="730:39"><expr pos:start="730:9" pos:end="730:38"><call pos:start="730:9" pos:end="730:38"><name pos:start="730:9" pos:end="730:16">qemu_log</name><argument_list pos:start="730:17" pos:end="730:38">(<argument pos:start="730:18" pos:end="730:37"><expr pos:start="730:18" pos:end="730:37"><literal type="string" pos:start="730:18" pos:end="730:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="732:9" pos:end="732:54"><expr pos:start="732:9" pos:end="732:53"><call pos:start="732:9" pos:end="732:53"><name pos:start="732:9" pos:end="732:16">qemu_log</name><argument_list pos:start="732:17" pos:end="732:53">(<argument pos:start="732:18" pos:end="732:27"><expr pos:start="732:18" pos:end="732:27"><literal type="string" pos:start="732:18" pos:end="732:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="732:30" pos:end="732:52"><expr pos:start="732:30" pos:end="732:52"><call pos:start="732:30" pos:end="732:52"><name pos:start="732:30" pos:end="732:42">lookup_symbol</name><argument_list pos:start="732:43" pos:end="732:52">(<argument pos:start="732:44" pos:end="732:51"><expr pos:start="732:44" pos:end="732:51"><name pos:start="732:44" pos:end="732:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="734:9" pos:end="736:57"><expr pos:start="734:9" pos:end="736:56"><call pos:start="734:9" pos:end="736:56"><name pos:start="734:9" pos:end="734:24">log_target_disas</name><argument_list pos:start="734:25" pos:end="736:56">(<argument pos:start="734:26" pos:end="734:27"><expr pos:start="734:26" pos:end="734:27"><name pos:start="734:26" pos:end="734:27">cs</name></expr></argument>, <argument pos:start="734:30" pos:end="734:37"><expr pos:start="734:30" pos:end="734:37"><name pos:start="734:30" pos:end="734:37">pc_start</name></expr></argument>, <argument pos:start="734:40" pos:end="734:56"><expr pos:start="734:40" pos:end="734:56"><name pos:start="734:40" pos:end="734:45"><name pos:start="734:40" pos:end="734:41">dc</name><operator pos:start="734:42" pos:end="734:43">-&gt;</operator><name pos:start="734:44" pos:end="734:45">pc</name></name> <operator pos:start="734:47" pos:end="734:47">-</operator> <name pos:start="734:49" pos:end="734:56">pc_start</name></expr></argument>,

                         <argument pos:start="736:26" pos:end="736:55"><expr pos:start="736:26" pos:end="736:55"><name pos:start="736:26" pos:end="736:34"><name pos:start="736:26" pos:end="736:27">dc</name><operator pos:start="736:28" pos:end="736:29">-&gt;</operator><name pos:start="736:30" pos:end="736:34">thumb</name></name> <operator pos:start="736:36" pos:end="736:36">|</operator> <operator pos:start="736:38" pos:end="736:38">(</operator><name pos:start="736:39" pos:end="736:49"><name pos:start="736:39" pos:end="736:40">dc</name><operator pos:start="736:41" pos:end="736:42">-&gt;</operator><name pos:start="736:43" pos:end="736:49">sctlr_b</name></name> <operator pos:start="736:51" pos:end="736:52">&lt;&lt;</operator> <literal type="number" pos:start="736:54" pos:end="736:54">1</literal><operator pos:start="736:55" pos:end="736:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="738:9" pos:end="738:23"><expr pos:start="738:9" pos:end="738:22"><call pos:start="738:9" pos:end="738:22"><name pos:start="738:9" pos:end="738:16">qemu_log</name><argument_list pos:start="738:17" pos:end="738:22">(<argument pos:start="738:18" pos:end="738:21"><expr pos:start="738:18" pos:end="738:21"><literal type="string" pos:start="738:18" pos:end="738:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="740:9" pos:end="740:26"><expr pos:start="740:9" pos:end="740:25"><call pos:start="740:9" pos:end="740:25"><name pos:start="740:9" pos:end="740:23">qemu_log_unlock</name><argument_list pos:start="740:24" pos:end="740:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="744:1" pos:end="744:6">#<cpp:directive pos:start="744:2" pos:end="744:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="746:5" pos:end="746:33"><expr pos:start="746:5" pos:end="746:32"><name pos:start="746:5" pos:end="746:12"><name pos:start="746:5" pos:end="746:6">tb</name><operator pos:start="746:7" pos:end="746:8">-&gt;</operator><name pos:start="746:9" pos:end="746:12">size</name></name> <operator pos:start="746:14" pos:end="746:14">=</operator> <name pos:start="746:16" pos:end="746:21"><name pos:start="746:16" pos:end="746:17">dc</name><operator pos:start="746:18" pos:end="746:19">-&gt;</operator><name pos:start="746:20" pos:end="746:21">pc</name></name> <operator pos:start="746:23" pos:end="746:23">-</operator> <name pos:start="746:25" pos:end="746:32">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="748:5" pos:end="748:27"><expr pos:start="748:5" pos:end="748:26"><name pos:start="748:5" pos:end="748:14"><name pos:start="748:5" pos:end="748:6">tb</name><operator pos:start="748:7" pos:end="748:8">-&gt;</operator><name pos:start="748:9" pos:end="748:14">icount</name></name> <operator pos:start="748:16" pos:end="748:16">=</operator> <name pos:start="748:18" pos:end="748:26">num_insns</name></expr>;</expr_stmt>

</block_content>}</block></function></unit>
