<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21301.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">encode_hq_slice</name><parameter_list pos:start="1:27" pos:end="1:60">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:41">AVCodecContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">avctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:59"><decl pos:start="1:51" pos:end="1:59"><type pos:start="1:51" pos:end="1:59"><name pos:start="1:51" pos:end="1:54">void</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:13">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">SliceArgs</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:24">slice_dat</name> <init pos:start="5:26" pos:end="5:30">= <expr pos:start="5:28" pos:end="5:30"><name pos:start="5:28" pos:end="5:30">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">VC2EncContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:37">= <expr pos:start="7:24" pos:end="7:37"><name pos:start="7:24" pos:end="7:37"><name pos:start="7:24" pos:end="7:32">slice_dat</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:37">ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">PutBitContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">pb</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:38"><name pos:start="9:26" pos:end="9:34">slice_dat</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:38">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:21">slice_x</name> <init pos:start="11:23" pos:end="11:36">= <expr pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:33">slice_dat</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:36">x</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:13"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:13">int</name></type> <name pos:start="13:15" pos:end="13:21">slice_y</name> <init pos:start="13:23" pos:end="13:36">= <expr pos:start="13:25" pos:end="13:36"><name pos:start="13:25" pos:end="13:36"><name pos:start="13:25" pos:end="13:33">slice_dat</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:36">y</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:13"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:13">int</name></type> <name pos:start="15:15" pos:end="15:23">quant_idx</name> <init pos:start="15:25" pos:end="15:46">= <expr pos:start="15:27" pos:end="15:46"><name pos:start="15:27" pos:end="15:46"><name pos:start="15:27" pos:end="15:35">slice_dat</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:46">quant_idx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:49"><decl pos:start="17:5" pos:end="17:48"><type pos:start="17:5" pos:end="17:13"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:13">int</name></type> <name pos:start="17:15" pos:end="17:29">slice_bytes_max</name> <init pos:start="17:31" pos:end="17:48">= <expr pos:start="17:33" pos:end="17:48"><name pos:start="17:33" pos:end="17:48"><name pos:start="17:33" pos:end="17:41">slice_dat</name><operator pos:start="17:42" pos:end="17:43">-&gt;</operator><name pos:start="17:44" pos:end="17:48">bytes</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:38"><decl pos:start="19:5" pos:end="19:37"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:37"><name pos:start="19:13" pos:end="19:18">quants</name><index pos:start="19:19" pos:end="19:34">[<expr pos:start="19:20" pos:end="19:33"><name pos:start="19:20" pos:end="19:33">MAX_DWT_LEVELS</name></expr>]</index><index pos:start="19:35" pos:end="19:37">[<expr pos:start="19:36" pos:end="19:36"><literal type="number" pos:start="19:36" pos:end="19:36">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">p</name></decl>, <decl pos:start="21:12" pos:end="21:16"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:16">level</name></decl>, <decl pos:start="21:19" pos:end="21:29"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:19" pos:end="21:29">orientation</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:71">/* The reference decoder ignores it, and its typical length is 0 */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:49"><expr pos:start="27:5" pos:end="27:48"><call pos:start="27:5" pos:end="27:48"><name pos:start="27:5" pos:end="27:10">memset</name><argument_list pos:start="27:11" pos:end="27:48">(<argument pos:start="27:12" pos:end="27:27"><expr pos:start="27:12" pos:end="27:27"><call pos:start="27:12" pos:end="27:27"><name pos:start="27:12" pos:end="27:23">put_bits_ptr</name><argument_list pos:start="27:24" pos:end="27:27">(<argument pos:start="27:25" pos:end="27:26"><expr pos:start="27:25" pos:end="27:26"><name pos:start="27:25" pos:end="27:26">pb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:30" pos:end="27:30"><expr pos:start="27:30" pos:end="27:30"><literal type="number" pos:start="27:30" pos:end="27:30">0</literal></expr></argument>, <argument pos:start="27:33" pos:end="27:47"><expr pos:start="27:33" pos:end="27:47"><name pos:start="27:33" pos:end="27:47"><name pos:start="27:33" pos:end="27:33">s</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:47">prefix_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:40"><expr pos:start="29:5" pos:end="29:39"><call pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:18">skip_put_bytes</name><argument_list pos:start="29:19" pos:end="29:39">(<argument pos:start="29:20" pos:end="29:21"><expr pos:start="29:20" pos:end="29:21"><name pos:start="29:20" pos:end="29:21">pb</name></expr></argument>, <argument pos:start="29:24" pos:end="29:38"><expr pos:start="29:24" pos:end="29:38"><name pos:start="29:24" pos:end="29:38"><name pos:start="29:24" pos:end="29:24">s</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:38">prefix_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><call pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:12">put_bits</name><argument_list pos:start="33:13" pos:end="33:30">(<argument pos:start="33:14" pos:end="33:15"><expr pos:start="33:14" pos:end="33:15"><name pos:start="33:14" pos:end="33:15">pb</name></expr></argument>, <argument pos:start="33:18" pos:end="33:18"><expr pos:start="33:18" pos:end="33:18"><literal type="number" pos:start="33:18" pos:end="33:18">8</literal></expr></argument>, <argument pos:start="33:21" pos:end="33:29"><expr pos:start="33:21" pos:end="33:29"><name pos:start="33:21" pos:end="33:29">quant_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:62">/* Slice quantization (slice_quantizers() in the specs) */</comment>

    <for pos:start="39:5" pos:end="43:92">for <control pos:start="39:9" pos:end="39:54">(<init pos:start="39:10" pos:end="39:19"><expr pos:start="39:10" pos:end="39:18"><name pos:start="39:10" pos:end="39:14">level</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr>;</init> <condition pos:start="39:21" pos:end="39:45"><expr pos:start="39:21" pos:end="39:44"><name pos:start="39:21" pos:end="39:25">level</name> <operator pos:start="39:27" pos:end="39:27">&lt;</operator> <name pos:start="39:29" pos:end="39:44"><name pos:start="39:29" pos:end="39:29">s</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:44">wavelet_depth</name></name></expr>;</condition> <incr pos:start="39:47" pos:end="39:53"><expr pos:start="39:47" pos:end="39:53"><name pos:start="39:47" pos:end="39:51">level</name><operator pos:start="39:52" pos:end="39:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="41:9" pos:end="43:92"><block_content pos:start="41:9" pos:end="43:92">

        <for pos:start="41:9" pos:end="43:92">for <control pos:start="41:13" pos:end="41:67">(<init pos:start="41:14" pos:end="41:35"><expr pos:start="41:14" pos:end="41:34"><name pos:start="41:14" pos:end="41:24">orientation</name> <operator pos:start="41:26" pos:end="41:26">=</operator> <operator pos:start="41:28" pos:end="41:28">!</operator><operator pos:start="41:29" pos:end="41:29">!</operator><name pos:start="41:30" pos:end="41:34">level</name></expr>;</init> <condition pos:start="41:37" pos:end="41:52"><expr pos:start="41:37" pos:end="41:51"><name pos:start="41:37" pos:end="41:47">orientation</name> <operator pos:start="41:49" pos:end="41:49">&lt;</operator> <literal type="number" pos:start="41:51" pos:end="41:51">4</literal></expr>;</condition> <incr pos:start="41:54" pos:end="41:66"><expr pos:start="41:54" pos:end="41:66"><name pos:start="41:54" pos:end="41:64">orientation</name><operator pos:start="41:65" pos:end="41:66">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:13" pos:end="43:92"><block_content pos:start="43:13" pos:end="43:92">

            <expr_stmt pos:start="43:13" pos:end="43:92"><expr pos:start="43:13" pos:end="43:91"><name pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:18">quants</name><index pos:start="43:19" pos:end="43:25">[<expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">level</name></expr>]</index><index pos:start="43:26" pos:end="43:38">[<expr pos:start="43:27" pos:end="43:37"><name pos:start="43:27" pos:end="43:37">orientation</name></expr>]</index></name> <operator pos:start="43:40" pos:end="43:40">=</operator> <call pos:start="43:42" pos:end="43:91"><name pos:start="43:42" pos:end="43:46">FFMAX</name><argument_list pos:start="43:47" pos:end="43:91">(<argument pos:start="43:48" pos:end="43:87"><expr pos:start="43:48" pos:end="43:87"><name pos:start="43:48" pos:end="43:56">quant_idx</name> <operator pos:start="43:58" pos:end="43:58">-</operator> <name pos:start="43:60" pos:end="43:87"><name pos:start="43:60" pos:end="43:60">s</name><operator pos:start="43:61" pos:end="43:62">-&gt;</operator><name pos:start="43:63" pos:end="43:67">quant</name><index pos:start="43:68" pos:end="43:74">[<expr pos:start="43:69" pos:end="43:73"><name pos:start="43:69" pos:end="43:73">level</name></expr>]</index><index pos:start="43:75" pos:end="43:87">[<expr pos:start="43:76" pos:end="43:86"><name pos:start="43:76" pos:end="43:86">orientation</name></expr>]</index></name></expr></argument>, <argument pos:start="43:90" pos:end="43:90"><expr pos:start="43:90" pos:end="43:90"><literal type="number" pos:start="43:90" pos:end="43:90">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>



    <comment type="block" pos:start="47:5" pos:end="47:32">/* Luma + 2 Chroma planes */</comment>

    <for pos:start="49:5" pos:end="99:5">for <control pos:start="49:9" pos:end="49:27">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">p</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:21"><name pos:start="49:17" pos:end="49:17">p</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <literal type="number" pos:start="49:21" pos:end="49:21">3</literal></expr>;</condition> <incr pos:start="49:24" pos:end="49:26"><expr pos:start="49:24" pos:end="49:26"><name pos:start="49:24" pos:end="49:24">p</name><operator pos:start="49:25" pos:end="49:26">++</operator></expr></incr>)</control> <block pos:start="49:29" pos:end="99:5">{<block_content pos:start="51:9" pos:end="97:34">

        <decl_stmt pos:start="51:9" pos:end="51:49"><decl pos:start="51:9" pos:end="51:23"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:23">bytes_start</name></decl>, <decl pos:start="51:26" pos:end="51:34"><type ref="prev" pos:start="51:9" pos:end="51:11"/><name pos:start="51:26" pos:end="51:34">bytes_len</name></decl>, <decl pos:start="51:37" pos:end="51:41"><type ref="prev" pos:start="51:9" pos:end="51:11"/><name pos:start="51:37" pos:end="51:41">pad_s</name></decl>, <decl pos:start="51:44" pos:end="51:48"><type ref="prev" pos:start="51:9" pos:end="51:11"/><name pos:start="51:44" pos:end="51:48">pad_c</name></decl>;</decl_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:46"><expr pos:start="53:9" pos:end="53:45"><name pos:start="53:9" pos:end="53:19">bytes_start</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:40"><name pos:start="53:23" pos:end="53:36">put_bits_count</name><argument_list pos:start="53:37" pos:end="53:40">(<argument pos:start="53:38" pos:end="53:39"><expr pos:start="53:38" pos:end="53:39"><name pos:start="53:38" pos:end="53:39">pb</name></expr></argument>)</argument_list></call> <operator pos:start="53:42" pos:end="53:43">&gt;&gt;</operator> <literal type="number" pos:start="53:45" pos:end="53:45">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><call pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:16">put_bits</name><argument_list pos:start="55:17" pos:end="55:26">(<argument pos:start="55:18" pos:end="55:19"><expr pos:start="55:18" pos:end="55:19"><name pos:start="55:18" pos:end="55:19">pb</name></expr></argument>, <argument pos:start="55:22" pos:end="55:22"><expr pos:start="55:22" pos:end="55:22"><literal type="number" pos:start="55:22" pos:end="55:22">8</literal></expr></argument>, <argument pos:start="55:25" pos:end="55:25"><expr pos:start="55:25" pos:end="55:25"><literal type="number" pos:start="55:25" pos:end="55:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="57:9" pos:end="69:9">for <control pos:start="57:13" pos:end="57:58">(<init pos:start="57:14" pos:end="57:23"><expr pos:start="57:14" pos:end="57:22"><name pos:start="57:14" pos:end="57:18">level</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr>;</init> <condition pos:start="57:25" pos:end="57:49"><expr pos:start="57:25" pos:end="57:48"><name pos:start="57:25" pos:end="57:29">level</name> <operator pos:start="57:31" pos:end="57:31">&lt;</operator> <name pos:start="57:33" pos:end="57:48"><name pos:start="57:33" pos:end="57:33">s</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:48">wavelet_depth</name></name></expr>;</condition> <incr pos:start="57:51" pos:end="57:57"><expr pos:start="57:51" pos:end="57:57"><name pos:start="57:51" pos:end="57:55">level</name><operator pos:start="57:56" pos:end="57:57">++</operator></expr></incr>)</control> <block pos:start="57:60" pos:end="69:9">{<block_content pos:start="59:13" pos:end="67:13">

            <for pos:start="59:13" pos:end="67:13">for <control pos:start="59:17" pos:end="59:71">(<init pos:start="59:18" pos:end="59:39"><expr pos:start="59:18" pos:end="59:38"><name pos:start="59:18" pos:end="59:28">orientation</name> <operator pos:start="59:30" pos:end="59:30">=</operator> <operator pos:start="59:32" pos:end="59:32">!</operator><operator pos:start="59:33" pos:end="59:33">!</operator><name pos:start="59:34" pos:end="59:38">level</name></expr>;</init> <condition pos:start="59:41" pos:end="59:56"><expr pos:start="59:41" pos:end="59:55"><name pos:start="59:41" pos:end="59:51">orientation</name> <operator pos:start="59:53" pos:end="59:53">&lt;</operator> <literal type="number" pos:start="59:55" pos:end="59:55">4</literal></expr>;</condition> <incr pos:start="59:58" pos:end="59:70"><expr pos:start="59:58" pos:end="59:70"><name pos:start="59:58" pos:end="59:68">orientation</name><operator pos:start="59:69" pos:end="59:70">++</operator></expr></incr>)</control> <block pos:start="59:73" pos:end="67:13">{<block_content pos:start="61:17" pos:end="65:59">

                <expr_stmt pos:start="61:17" pos:end="65:59"><expr pos:start="61:17" pos:end="65:58"><call pos:start="61:17" pos:end="65:58"><name pos:start="61:17" pos:end="61:30">encode_subband</name><argument_list pos:start="61:31" pos:end="65:58">(<argument pos:start="61:32" pos:end="61:32"><expr pos:start="61:32" pos:end="61:32"><name pos:start="61:32" pos:end="61:32">s</name></expr></argument>, <argument pos:start="61:35" pos:end="61:36"><expr pos:start="61:35" pos:end="61:36"><name pos:start="61:35" pos:end="61:36">pb</name></expr></argument>, <argument pos:start="61:39" pos:end="61:45"><expr pos:start="61:39" pos:end="61:45"><name pos:start="61:39" pos:end="61:45">slice_x</name></expr></argument>, <argument pos:start="61:48" pos:end="61:54"><expr pos:start="61:48" pos:end="61:54"><name pos:start="61:48" pos:end="61:54">slice_y</name></expr></argument>,

                               <argument pos:start="63:32" pos:end="63:68"><expr pos:start="63:32" pos:end="63:68"><operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:43"><name pos:start="63:33" pos:end="63:33">s</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:40">plane</name><index pos:start="63:41" pos:end="63:43">[<expr pos:start="63:42" pos:end="63:42"><name pos:start="63:42" pos:end="63:42">p</name></expr>]</index></name><operator pos:start="63:44" pos:end="63:44">.</operator><name pos:start="63:45" pos:end="63:68"><name pos:start="63:45" pos:end="63:48">band</name><index pos:start="63:49" pos:end="63:55">[<expr pos:start="63:50" pos:end="63:54"><name pos:start="63:50" pos:end="63:54">level</name></expr>]</index><index pos:start="63:56" pos:end="63:68">[<expr pos:start="63:57" pos:end="63:67"><name pos:start="63:57" pos:end="63:67">orientation</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="65:32" pos:end="65:57"><expr pos:start="65:32" pos:end="65:57"><name pos:start="65:32" pos:end="65:57"><name pos:start="65:32" pos:end="65:37">quants</name><index pos:start="65:38" pos:end="65:44">[<expr pos:start="65:39" pos:end="65:43"><name pos:start="65:39" pos:end="65:43">level</name></expr>]</index><index pos:start="65:45" pos:end="65:57">[<expr pos:start="65:46" pos:end="65:56"><name pos:start="65:46" pos:end="65:56">orientation</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><call pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:29">avpriv_align_put_bits</name><argument_list pos:start="71:30" pos:end="71:33">(<argument pos:start="71:31" pos:end="71:32"><expr pos:start="71:31" pos:end="71:32"><name pos:start="71:31" pos:end="71:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:64"><expr pos:start="73:9" pos:end="73:63"><name pos:start="73:9" pos:end="73:17">bytes_len</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <operator pos:start="73:21" pos:end="73:21">(</operator><call pos:start="73:22" pos:end="73:39"><name pos:start="73:22" pos:end="73:35">put_bits_count</name><argument_list pos:start="73:36" pos:end="73:39">(<argument pos:start="73:37" pos:end="73:38"><expr pos:start="73:37" pos:end="73:38"><name pos:start="73:37" pos:end="73:38">pb</name></expr></argument>)</argument_list></call> <operator pos:start="73:41" pos:end="73:42">&gt;&gt;</operator> <literal type="number" pos:start="73:44" pos:end="73:44">3</literal><operator pos:start="73:45" pos:end="73:45">)</operator> <operator pos:start="73:47" pos:end="73:47">-</operator> <name pos:start="73:49" pos:end="73:59">bytes_start</name> <operator pos:start="73:61" pos:end="73:61">-</operator> <literal type="number" pos:start="73:63" pos:end="73:63">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="89:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:19">(<expr pos:start="75:13" pos:end="75:18"><name pos:start="75:13" pos:end="75:13">p</name> <operator pos:start="75:15" pos:end="75:16">==</operator> <literal type="number" pos:start="75:18" pos:end="75:18">2</literal></expr>)</condition> <block pos:start="75:21" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:55">

            <decl_stmt pos:start="77:13" pos:end="77:71"><decl pos:start="77:13" pos:end="77:70"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:24">len_diff</name> <init pos:start="77:26" pos:end="77:70">= <expr pos:start="77:28" pos:end="77:70"><name pos:start="77:28" pos:end="77:42">slice_bytes_max</name> <operator pos:start="77:44" pos:end="77:44">-</operator> <operator pos:start="77:46" pos:end="77:46">(</operator><call pos:start="77:47" pos:end="77:64"><name pos:start="77:47" pos:end="77:60">put_bits_count</name><argument_list pos:start="77:61" pos:end="77:64">(<argument pos:start="77:62" pos:end="77:63"><expr pos:start="77:62" pos:end="77:63"><name pos:start="77:62" pos:end="77:63">pb</name></expr></argument>)</argument_list></call> <operator pos:start="77:66" pos:end="77:67">&gt;&gt;</operator> <literal type="number" pos:start="77:69" pos:end="77:69">3</literal><operator pos:start="77:70" pos:end="77:70">)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:83"><expr pos:start="79:13" pos:end="79:82"><name pos:start="79:13" pos:end="79:17">pad_s</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <call pos:start="79:21" pos:end="79:67"><name pos:start="79:21" pos:end="79:27">FFALIGN</name><argument_list pos:start="79:28" pos:end="79:67">(<argument pos:start="79:29" pos:end="79:50"><expr pos:start="79:29" pos:end="79:50"><operator pos:start="79:29" pos:end="79:29">(</operator><name pos:start="79:30" pos:end="79:38">bytes_len</name> <operator pos:start="79:40" pos:end="79:40">+</operator> <name pos:start="79:42" pos:end="79:49">len_diff</name><operator pos:start="79:50" pos:end="79:50">)</operator></expr></argument>, <argument pos:start="79:53" pos:end="79:66"><expr pos:start="79:53" pos:end="79:66"><name pos:start="79:53" pos:end="79:66"><name pos:start="79:53" pos:end="79:53">s</name><operator pos:start="79:54" pos:end="79:55">-&gt;</operator><name pos:start="79:56" pos:end="79:66">size_scaler</name></name></expr></argument>)</argument_list></call><operator pos:start="79:68" pos:end="79:68">/</operator><name pos:start="79:69" pos:end="79:82"><name pos:start="79:69" pos:end="79:69">s</name><operator pos:start="79:70" pos:end="79:71">-&gt;</operator><name pos:start="79:72" pos:end="79:82">size_scaler</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:55"><expr pos:start="81:13" pos:end="81:54"><name pos:start="81:13" pos:end="81:17">pad_c</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <operator pos:start="81:21" pos:end="81:21">(</operator><name pos:start="81:22" pos:end="81:26">pad_s</name><operator pos:start="81:27" pos:end="81:27">*</operator><name pos:start="81:28" pos:end="81:41"><name pos:start="81:28" pos:end="81:28">s</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:41">size_scaler</name></name><operator pos:start="81:42" pos:end="81:42">)</operator> <operator pos:start="81:44" pos:end="81:44">-</operator> <name pos:start="81:46" pos:end="81:54">bytes_len</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="89:9">else <block pos:start="83:16" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:55">

            <expr_stmt pos:start="85:13" pos:end="85:70"><expr pos:start="85:13" pos:end="85:69"><name pos:start="85:13" pos:end="85:17">pad_s</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <call pos:start="85:21" pos:end="85:54"><name pos:start="85:21" pos:end="85:27">FFALIGN</name><argument_list pos:start="85:28" pos:end="85:54">(<argument pos:start="85:29" pos:end="85:37"><expr pos:start="85:29" pos:end="85:37"><name pos:start="85:29" pos:end="85:37">bytes_len</name></expr></argument>, <argument pos:start="85:40" pos:end="85:53"><expr pos:start="85:40" pos:end="85:53"><name pos:start="85:40" pos:end="85:53"><name pos:start="85:40" pos:end="85:40">s</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:53">size_scaler</name></name></expr></argument>)</argument_list></call><operator pos:start="85:55" pos:end="85:55">/</operator><name pos:start="85:56" pos:end="85:69"><name pos:start="85:56" pos:end="85:56">s</name><operator pos:start="85:57" pos:end="85:58">-&gt;</operator><name pos:start="85:59" pos:end="85:69">size_scaler</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:55"><expr pos:start="87:13" pos:end="87:54"><name pos:start="87:13" pos:end="87:17">pad_c</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <operator pos:start="87:21" pos:end="87:21">(</operator><name pos:start="87:22" pos:end="87:26">pad_s</name><operator pos:start="87:27" pos:end="87:27">*</operator><name pos:start="87:28" pos:end="87:41"><name pos:start="87:28" pos:end="87:28">s</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:41">size_scaler</name></name><operator pos:start="87:42" pos:end="87:42">)</operator> <operator pos:start="87:44" pos:end="87:44">-</operator> <name pos:start="87:46" pos:end="87:54">bytes_len</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:37"><expr pos:start="91:9" pos:end="91:36"><name pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:10">pb</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:15">buf</name><index pos:start="91:16" pos:end="91:28">[<expr pos:start="91:17" pos:end="91:27"><name pos:start="91:17" pos:end="91:27">bytes_start</name></expr>]</index></name> <operator pos:start="91:30" pos:end="91:30">=</operator> <name pos:start="91:32" pos:end="91:36">pad_s</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><call pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:22">flush_put_bits</name><argument_list pos:start="93:23" pos:end="93:26">(<argument pos:start="93:24" pos:end="93:25"><expr pos:start="93:24" pos:end="93:25"><name pos:start="93:24" pos:end="93:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:34"><expr pos:start="97:9" pos:end="97:33"><call pos:start="97:9" pos:end="97:33"><name pos:start="97:9" pos:end="97:22">skip_put_bytes</name><argument_list pos:start="97:23" pos:end="97:33">(<argument pos:start="97:24" pos:end="97:25"><expr pos:start="97:24" pos:end="97:25"><name pos:start="97:24" pos:end="97:25">pb</name></expr></argument>, <argument pos:start="97:28" pos:end="97:32"><expr pos:start="97:28" pos:end="97:32"><name pos:start="97:28" pos:end="97:32">pad_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
