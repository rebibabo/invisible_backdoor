<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17465.c" pos:tabs="8"><function pos:start="1:1" pos:end="395:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:43">vorbis_parse_setup_hdr_codebooks</name><parameter_list pos:start="1:44" pos:end="1:63">(<parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:58">vorbis_context</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">vc</name></decl></parameter>)</parameter_list> <block pos:start="1:65" pos:end="395:1">{<block_content pos:start="3:5" pos:end="393:13">

    <decl_stmt pos:start="3:5" pos:end="3:21"><decl pos:start="3:5" pos:end="3:20"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:17">uint_fast16_t</name></type> <name pos:start="3:19" pos:end="3:20">cb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:25">tmp_vlc_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">uint32_t</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:27">tmp_vlc_codes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">GetBitContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">gb</name><init pos:start="9:22" pos:end="9:29">=<expr pos:start="9:23" pos:end="9:29"><operator pos:start="9:23" pos:end="9:23">&amp;</operator><name pos:start="9:24" pos:end="9:29"><name pos:start="9:24" pos:end="9:25">vc</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:29">gb</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:40"><expr pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:6">vc</name><operator pos:start="13:7" pos:end="13:8">-&gt;</operator><name pos:start="13:9" pos:end="13:22">codebook_count</name></name><operator pos:start="13:23" pos:end="13:23">=</operator><call pos:start="13:24" pos:end="13:37"><name pos:start="13:24" pos:end="13:31">get_bits</name><argument_list pos:start="13:32" pos:end="13:37">(<argument pos:start="13:33" pos:end="13:34"><expr pos:start="13:33" pos:end="13:34"><name pos:start="13:33" pos:end="13:34">gb</name></expr></argument>,<argument pos:start="13:36" pos:end="13:36"><expr pos:start="13:36" pos:end="13:36"><literal type="number" pos:start="13:36" pos:end="13:36">8</literal></expr></argument>)</argument_list></call><operator pos:start="13:38" pos:end="13:38">+</operator><literal type="number" pos:start="13:39" pos:end="13:39">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:54"><expr pos:start="17:5" pos:end="17:53"><call pos:start="17:5" pos:end="17:53"><name pos:start="17:5" pos:end="17:12">AV_DEBUG</name><argument_list pos:start="17:13" pos:end="17:53">(<argument pos:start="17:14" pos:end="17:32"><expr pos:start="17:14" pos:end="17:32"><literal type="string" pos:start="17:14" pos:end="17:32">" Codebooks: %d \n"</literal></expr></argument>, <argument pos:start="17:35" pos:end="17:52"><expr pos:start="17:35" pos:end="17:52"><name pos:start="17:35" pos:end="17:52"><name pos:start="17:35" pos:end="17:36">vc</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:52">codebook_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:94"><expr pos:start="21:5" pos:end="21:93"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:6">vc</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:17">codebooks</name></name><operator pos:start="21:18" pos:end="21:18">=</operator><operator pos:start="21:19" pos:end="21:19">(</operator><name pos:start="21:20" pos:end="21:34">vorbis_codebook</name> <operator pos:start="21:36" pos:end="21:36">*</operator><operator pos:start="21:37" pos:end="21:37">)</operator><call pos:start="21:38" pos:end="21:93"><name pos:start="21:38" pos:end="21:47">av_mallocz</name><argument_list pos:start="21:48" pos:end="21:93">(<argument pos:start="21:49" pos:end="21:92"><expr pos:start="21:49" pos:end="21:92"><name pos:start="21:49" pos:end="21:66"><name pos:start="21:49" pos:end="21:50">vc</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:66">codebook_count</name></name> <operator pos:start="21:68" pos:end="21:68">*</operator> <sizeof pos:start="21:70" pos:end="21:92">sizeof<argument_list pos:start="21:76" pos:end="21:92">(<argument pos:start="21:77" pos:end="21:91"><expr pos:start="21:77" pos:end="21:91"><name pos:start="21:77" pos:end="21:91">vorbis_codebook</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:69"><expr pos:start="23:5" pos:end="23:68"><name pos:start="23:5" pos:end="23:16">tmp_vlc_bits</name><operator pos:start="23:17" pos:end="23:17">=</operator><operator pos:start="23:18" pos:end="23:18">(</operator><name pos:start="23:19" pos:end="23:25">uint8_t</name> <operator pos:start="23:27" pos:end="23:27">*</operator><operator pos:start="23:28" pos:end="23:28">)</operator><call pos:start="23:29" pos:end="23:68"><name pos:start="23:29" pos:end="23:38">av_mallocz</name><argument_list pos:start="23:39" pos:end="23:68">(<argument pos:start="23:40" pos:end="23:67"><expr pos:start="23:40" pos:end="23:67"><name pos:start="23:40" pos:end="23:49">V_MAX_VLCS</name> <operator pos:start="23:51" pos:end="23:51">*</operator> <sizeof pos:start="23:53" pos:end="23:67">sizeof<argument_list pos:start="23:59" pos:end="23:67">(<argument pos:start="23:60" pos:end="23:66"><expr pos:start="23:60" pos:end="23:66"><name pos:start="23:60" pos:end="23:66">uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:72"><expr pos:start="25:5" pos:end="25:71"><name pos:start="25:5" pos:end="25:17">tmp_vlc_codes</name><operator pos:start="25:18" pos:end="25:18">=</operator><operator pos:start="25:19" pos:end="25:19">(</operator><name pos:start="25:20" pos:end="25:27">uint32_t</name> <operator pos:start="25:29" pos:end="25:29">*</operator><operator pos:start="25:30" pos:end="25:30">)</operator><call pos:start="25:31" pos:end="25:71"><name pos:start="25:31" pos:end="25:40">av_mallocz</name><argument_list pos:start="25:41" pos:end="25:71">(<argument pos:start="25:42" pos:end="25:70"><expr pos:start="25:42" pos:end="25:70"><name pos:start="25:42" pos:end="25:51">V_MAX_VLCS</name> <operator pos:start="25:53" pos:end="25:53">*</operator> <sizeof pos:start="25:55" pos:end="25:70">sizeof<argument_list pos:start="25:61" pos:end="25:70">(<argument pos:start="25:62" pos:end="25:69"><expr pos:start="25:62" pos:end="25:69"><name pos:start="25:62" pos:end="25:69">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="29:5" pos:end="373:5">for<control pos:start="29:8" pos:end="29:40">(<init pos:start="29:9" pos:end="29:13"><expr pos:start="29:9" pos:end="29:12"><name pos:start="29:9" pos:end="29:10">cb</name><operator pos:start="29:11" pos:end="29:11">=</operator><literal type="number" pos:start="29:12" pos:end="29:12">0</literal></expr>;</init><condition pos:start="29:14" pos:end="29:35"><expr pos:start="29:14" pos:end="29:34"><name pos:start="29:14" pos:end="29:15">cb</name><operator pos:start="29:16" pos:end="29:16">&lt;</operator><name pos:start="29:17" pos:end="29:34"><name pos:start="29:17" pos:end="29:18">vc</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:34">codebook_count</name></name></expr>;</condition><incr pos:start="29:36" pos:end="29:39"><expr pos:start="29:36" pos:end="29:39"><operator pos:start="29:36" pos:end="29:37">++</operator><name pos:start="29:38" pos:end="29:39">cb</name></expr></incr>)</control> <block pos:start="29:42" pos:end="373:5">{<block_content pos:start="31:9" pos:end="371:9">

        <decl_stmt pos:start="31:9" pos:end="31:59"><decl pos:start="31:9" pos:end="31:58"><type pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:23">vorbis_codebook</name> <modifier pos:start="31:25" pos:end="31:25">*</modifier></type><name pos:start="31:26" pos:end="31:39">codebook_setup</name><init pos:start="31:40" pos:end="31:58">=<expr pos:start="31:41" pos:end="31:58"><operator pos:start="31:41" pos:end="31:41">&amp;</operator><name pos:start="31:42" pos:end="31:58"><name pos:start="31:42" pos:end="31:43">vc</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:54">codebooks</name><index pos:start="31:55" pos:end="31:58">[<expr pos:start="31:56" pos:end="31:57"><name pos:start="31:56" pos:end="31:57">cb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:29"><decl pos:start="33:9" pos:end="33:28"><type pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:20">uint_fast8_t</name></type> <name pos:start="33:22" pos:end="33:28">ordered</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:40"><decl pos:start="35:9" pos:end="35:23"><type pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:21">uint_fast32_t</name></type> <name pos:start="35:23" pos:end="35:23">t</name></decl>, <decl pos:start="35:26" pos:end="35:39"><type ref="prev" pos:start="35:9" pos:end="35:21"/><name pos:start="35:26" pos:end="35:37">used_entries</name><init pos:start="35:38" pos:end="35:39">=<expr pos:start="35:39" pos:end="35:39"><literal type="number" pos:start="35:39" pos:end="35:39">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:30"><decl pos:start="37:9" pos:end="37:29"><type pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:21">uint_fast32_t</name></type> <name pos:start="37:23" pos:end="37:29">entries</name></decl>;</decl_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:41"><expr pos:start="41:9" pos:end="41:40"><call pos:start="41:9" pos:end="41:40"><name pos:start="41:9" pos:end="41:16">AV_DEBUG</name><argument_list pos:start="41:17" pos:end="41:40">(<argument pos:start="41:18" pos:end="41:35"><expr pos:start="41:18" pos:end="41:35"><literal type="string" pos:start="41:18" pos:end="41:35">" %d. Codebook \n"</literal></expr></argument>, <argument pos:start="41:38" pos:end="41:39"><expr pos:start="41:38" pos:end="41:39"><name pos:start="41:38" pos:end="41:39">cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:39">(<expr pos:start="45:13" pos:end="45:38"><call pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:20">get_bits</name><argument_list pos:start="45:21" pos:end="45:28">(<argument pos:start="45:22" pos:end="45:23"><expr pos:start="45:22" pos:end="45:23"><name pos:start="45:22" pos:end="45:23">gb</name></expr></argument>, <argument pos:start="45:26" pos:end="45:27"><expr pos:start="45:26" pos:end="45:27"><literal type="number" pos:start="45:26" pos:end="45:27">24</literal></expr></argument>)</argument_list></call><operator pos:start="45:29" pos:end="45:30">!=</operator><literal type="number" pos:start="45:31" pos:end="45:38">0x564342</literal></expr>)</condition> <block pos:start="45:41" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:23">

            <expr_stmt pos:start="47:13" pos:end="47:104"><expr pos:start="47:13" pos:end="47:103"><call pos:start="47:13" pos:end="47:103"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="47:103">(<argument pos:start="47:20" pos:end="47:33"><expr pos:start="47:20" pos:end="47:33"><name pos:start="47:20" pos:end="47:33"><name pos:start="47:20" pos:end="47:21">vc</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:33">avccontext</name></name></expr></argument>, <argument pos:start="47:36" pos:end="47:47"><expr pos:start="47:36" pos:end="47:47"><name pos:start="47:36" pos:end="47:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:50" pos:end="47:98"><expr pos:start="47:50" pos:end="47:98"><literal type="string" pos:start="47:50" pos:end="47:53">" %"</literal><name pos:start="47:54" pos:end="47:63">PRIdFAST16</name><literal type="string" pos:start="47:64" pos:end="47:98">". Codebook setup data corrupt. \n"</literal></expr></argument>, <argument pos:start="47:101" pos:end="47:102"><expr pos:start="47:101" pos:end="47:102"><name pos:start="47:101" pos:end="47:102">cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="49:13" pos:end="49:23">goto <name pos:start="49:18" pos:end="49:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:52"><expr pos:start="55:9" pos:end="55:51"><name pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:22">codebook_setup</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:34">dimensions</name></name><operator pos:start="55:35" pos:end="55:35">=</operator><call pos:start="55:36" pos:end="55:51"><name pos:start="55:36" pos:end="55:43">get_bits</name><argument_list pos:start="55:44" pos:end="55:51">(<argument pos:start="55:45" pos:end="55:46"><expr pos:start="55:45" pos:end="55:46"><name pos:start="55:45" pos:end="55:46">gb</name></expr></argument>, <argument pos:start="55:49" pos:end="55:50"><expr pos:start="55:49" pos:end="55:50"><literal type="number" pos:start="55:49" pos:end="55:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:42">(<expr pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:26">codebook_setup</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:38">dimensions</name></name><operator pos:start="57:39" pos:end="57:39">&gt;</operator><literal type="number" pos:start="57:40" pos:end="57:41">16</literal></expr>)</condition> <block pos:start="57:44" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:23">

            <expr_stmt pos:start="59:13" pos:end="59:143"><expr pos:start="59:13" pos:end="59:142"><call pos:start="59:13" pos:end="59:142"><name pos:start="59:13" pos:end="59:18">av_log</name><argument_list pos:start="59:19" pos:end="59:142">(<argument pos:start="59:20" pos:end="59:33"><expr pos:start="59:20" pos:end="59:33"><name pos:start="59:20" pos:end="59:33"><name pos:start="59:20" pos:end="59:21">vc</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:33">avccontext</name></name></expr></argument>, <argument pos:start="59:36" pos:end="59:47"><expr pos:start="59:36" pos:end="59:47"><name pos:start="59:36" pos:end="59:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:50" pos:end="59:109"><expr pos:start="59:50" pos:end="59:109"><literal type="string" pos:start="59:50" pos:end="59:53">" %"</literal><name pos:start="59:54" pos:end="59:63">PRIdFAST16</name><literal type="string" pos:start="59:64" pos:end="59:109">". Codebook's dimension is too large (%d). \n"</literal></expr></argument>, <argument pos:start="59:112" pos:end="59:113"><expr pos:start="59:112" pos:end="59:113"><name pos:start="59:112" pos:end="59:113">cb</name></expr></argument>, <argument pos:start="59:116" pos:end="59:141"><expr pos:start="59:116" pos:end="59:141"><name pos:start="59:116" pos:end="59:141"><name pos:start="59:116" pos:end="59:129">codebook_setup</name><operator pos:start="59:130" pos:end="59:131">-&gt;</operator><name pos:start="59:132" pos:end="59:141">dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="61:13" pos:end="61:23">goto <name pos:start="61:18" pos:end="61:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:15">entries</name><operator pos:start="65:16" pos:end="65:16">=</operator><call pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:24">get_bits</name><argument_list pos:start="65:25" pos:end="65:32">(<argument pos:start="65:26" pos:end="65:27"><expr pos:start="65:26" pos:end="65:27"><name pos:start="65:26" pos:end="65:27">gb</name></expr></argument>, <argument pos:start="65:30" pos:end="65:31"><expr pos:start="65:30" pos:end="65:31"><literal type="number" pos:start="65:30" pos:end="65:31">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:31">(<expr pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:19">entries</name><operator pos:start="67:20" pos:end="67:20">&gt;</operator><name pos:start="67:21" pos:end="67:30">V_MAX_VLCS</name></expr>)</condition> <block pos:start="67:33" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:23">

            <expr_stmt pos:start="69:13" pos:end="69:131"><expr pos:start="69:13" pos:end="69:130"><call pos:start="69:13" pos:end="69:130"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="69:130">(<argument pos:start="69:20" pos:end="69:33"><expr pos:start="69:20" pos:end="69:33"><name pos:start="69:20" pos:end="69:33"><name pos:start="69:20" pos:end="69:21">vc</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:33">avccontext</name></name></expr></argument>, <argument pos:start="69:36" pos:end="69:47"><expr pos:start="69:36" pos:end="69:47"><name pos:start="69:36" pos:end="69:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:50" pos:end="69:116"><expr pos:start="69:50" pos:end="69:116"><literal type="string" pos:start="69:50" pos:end="69:53">" %"</literal><name pos:start="69:54" pos:end="69:63">PRIdFAST16</name><literal type="string" pos:start="69:64" pos:end="69:99">". Codebook has too many entries (%"</literal><name pos:start="69:100" pos:end="69:109">PRIdFAST32</name><literal type="string" pos:start="69:110" pos:end="69:116">"). \n"</literal></expr></argument>, <argument pos:start="69:119" pos:end="69:120"><expr pos:start="69:119" pos:end="69:120"><name pos:start="69:119" pos:end="69:120">cb</name></expr></argument>, <argument pos:start="69:123" pos:end="69:129"><expr pos:start="69:123" pos:end="69:129"><name pos:start="69:123" pos:end="69:129">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="71:13" pos:end="71:23">goto <name pos:start="71:18" pos:end="71:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:15">ordered</name><operator pos:start="77:16" pos:end="77:16">=</operator><call pos:start="77:17" pos:end="77:29"><name pos:start="77:17" pos:end="77:25">get_bits1</name><argument_list pos:start="77:26" pos:end="77:29">(<argument pos:start="77:27" pos:end="77:28"><expr pos:start="77:27" pos:end="77:28"><name pos:start="77:27" pos:end="77:28">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:105"><expr pos:start="81:9" pos:end="81:104"><call pos:start="81:9" pos:end="81:104"><name pos:start="81:9" pos:end="81:16">AV_DEBUG</name><argument_list pos:start="81:17" pos:end="81:104">(<argument pos:start="81:18" pos:end="81:66"><expr pos:start="81:18" pos:end="81:66"><literal type="string" pos:start="81:18" pos:end="81:66">" codebook_dimensions %d, codebook_entries %d \n"</literal></expr></argument>, <argument pos:start="81:69" pos:end="81:94"><expr pos:start="81:69" pos:end="81:94"><name pos:start="81:69" pos:end="81:94"><name pos:start="81:69" pos:end="81:82">codebook_setup</name><operator pos:start="81:83" pos:end="81:84">-&gt;</operator><name pos:start="81:85" pos:end="81:94">dimensions</name></name></expr></argument>, <argument pos:start="81:97" pos:end="81:103"><expr pos:start="81:97" pos:end="81:103"><name pos:start="81:97" pos:end="81:103">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="85:9" pos:end="191:9"><if pos:start="85:9" pos:end="139:9">if <condition pos:start="85:12" pos:end="85:21">(<expr pos:start="85:13" pos:end="85:20"><operator pos:start="85:13" pos:end="85:13">!</operator><name pos:start="85:14" pos:end="85:20">ordered</name></expr>)</condition> <block pos:start="85:23" pos:end="139:9">{<block_content pos:start="87:13" pos:end="137:13">

            <decl_stmt pos:start="87:13" pos:end="87:29"><decl pos:start="87:13" pos:end="87:28"><type pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:25">uint_fast16_t</name></type> <name pos:start="87:27" pos:end="87:28">ce</name></decl>;</decl_stmt>

            <decl_stmt pos:start="89:13" pos:end="89:30"><decl pos:start="89:13" pos:end="89:29"><type pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:24">uint_fast8_t</name></type> <name pos:start="89:26" pos:end="89:29">flag</name></decl>;</decl_stmt>

            <decl_stmt pos:start="91:13" pos:end="91:46"><decl pos:start="91:13" pos:end="91:45"><type pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:24">uint_fast8_t</name></type> <name pos:start="91:26" pos:end="91:31">sparse</name><init pos:start="91:32" pos:end="91:45">=<expr pos:start="91:33" pos:end="91:45"><call pos:start="91:33" pos:end="91:45"><name pos:start="91:33" pos:end="91:41">get_bits1</name><argument_list pos:start="91:42" pos:end="91:45">(<argument pos:start="91:43" pos:end="91:44"><expr pos:start="91:43" pos:end="91:44"><name pos:start="91:43" pos:end="91:44">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:40"><expr pos:start="95:13" pos:end="95:39"><call pos:start="95:13" pos:end="95:39"><name pos:start="95:13" pos:end="95:20">AV_DEBUG</name><argument_list pos:start="95:21" pos:end="95:39">(<argument pos:start="95:22" pos:end="95:38"><expr pos:start="95:22" pos:end="95:38"><literal type="string" pos:start="95:22" pos:end="95:38">" not ordered \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="99:13" pos:end="137:13"><if pos:start="99:13" pos:end="123:13">if <condition pos:start="99:16" pos:end="99:23">(<expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:22">sparse</name></expr>)</condition> <block pos:start="99:25" pos:end="123:13">{<block_content pos:start="101:17" pos:end="121:17">

                <expr_stmt pos:start="101:17" pos:end="101:39"><expr pos:start="101:17" pos:end="101:38"><call pos:start="101:17" pos:end="101:38"><name pos:start="101:17" pos:end="101:24">AV_DEBUG</name><argument_list pos:start="101:25" pos:end="101:38">(<argument pos:start="101:26" pos:end="101:37"><expr pos:start="101:26" pos:end="101:37"><literal type="string" pos:start="101:26" pos:end="101:37">" sparse \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="105:17" pos:end="105:31"><expr pos:start="105:17" pos:end="105:30"><name pos:start="105:17" pos:end="105:28">used_entries</name><operator pos:start="105:29" pos:end="105:29">=</operator><literal type="number" pos:start="105:30" pos:end="105:30">0</literal></expr>;</expr_stmt>

                <for pos:start="107:17" pos:end="121:17">for<control pos:start="107:20" pos:end="107:41">(<init pos:start="107:21" pos:end="107:25"><expr pos:start="107:21" pos:end="107:24"><name pos:start="107:21" pos:end="107:22">ce</name><operator pos:start="107:23" pos:end="107:23">=</operator><literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>;</init><condition pos:start="107:26" pos:end="107:36"><expr pos:start="107:26" pos:end="107:35"><name pos:start="107:26" pos:end="107:27">ce</name><operator pos:start="107:28" pos:end="107:28">&lt;</operator><name pos:start="107:29" pos:end="107:35">entries</name></expr>;</condition><incr pos:start="107:37" pos:end="107:40"><expr pos:start="107:37" pos:end="107:40"><operator pos:start="107:37" pos:end="107:38">++</operator><name pos:start="107:39" pos:end="107:40">ce</name></expr></incr>)</control> <block pos:start="107:43" pos:end="121:17">{<block_content pos:start="109:21" pos:end="119:44">

                    <expr_stmt pos:start="109:21" pos:end="109:39"><expr pos:start="109:21" pos:end="109:38"><name pos:start="109:21" pos:end="109:24">flag</name><operator pos:start="109:25" pos:end="109:25">=</operator><call pos:start="109:26" pos:end="109:38"><name pos:start="109:26" pos:end="109:34">get_bits1</name><argument_list pos:start="109:35" pos:end="109:38">(<argument pos:start="109:36" pos:end="109:37"><expr pos:start="109:36" pos:end="109:37"><name pos:start="109:36" pos:end="109:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="111:21" pos:end="119:44"><if pos:start="111:21" pos:end="117:21">if <condition pos:start="111:24" pos:end="111:29">(<expr pos:start="111:25" pos:end="111:28"><name pos:start="111:25" pos:end="111:28">flag</name></expr>)</condition> <block pos:start="111:31" pos:end="117:21">{<block_content pos:start="113:25" pos:end="115:39">

                        <expr_stmt pos:start="113:25" pos:end="113:59"><expr pos:start="113:25" pos:end="113:58"><name pos:start="113:25" pos:end="113:40"><name pos:start="113:25" pos:end="113:36">tmp_vlc_bits</name><index pos:start="113:37" pos:end="113:40">[<expr pos:start="113:38" pos:end="113:39"><name pos:start="113:38" pos:end="113:39">ce</name></expr>]</index></name><operator pos:start="113:41" pos:end="113:41">=</operator><call pos:start="113:42" pos:end="113:56"><name pos:start="113:42" pos:end="113:49">get_bits</name><argument_list pos:start="113:50" pos:end="113:56">(<argument pos:start="113:51" pos:end="113:52"><expr pos:start="113:51" pos:end="113:52"><name pos:start="113:51" pos:end="113:52">gb</name></expr></argument>, <argument pos:start="113:55" pos:end="113:55"><expr pos:start="113:55" pos:end="113:55"><literal type="number" pos:start="113:55" pos:end="113:55">5</literal></expr></argument>)</argument_list></call><operator pos:start="113:57" pos:end="113:57">+</operator><literal type="number" pos:start="113:58" pos:end="113:58">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="115:25" pos:end="115:39"><expr pos:start="115:25" pos:end="115:38"><operator pos:start="115:25" pos:end="115:26">++</operator><name pos:start="115:27" pos:end="115:38">used_entries</name></expr>;</expr_stmt>

                    </block_content>}</block></if>

                    <else pos:start="119:21" pos:end="119:44">else<block type="pseudo" pos:start="119:26" pos:end="119:44"><block_content pos:start="119:26" pos:end="119:44"> <expr_stmt pos:start="119:26" pos:end="119:44"><expr pos:start="119:26" pos:end="119:43"><name pos:start="119:26" pos:end="119:41"><name pos:start="119:26" pos:end="119:37">tmp_vlc_bits</name><index pos:start="119:38" pos:end="119:41">[<expr pos:start="119:39" pos:end="119:40"><name pos:start="119:39" pos:end="119:40">ce</name></expr>]</index></name><operator pos:start="119:42" pos:end="119:42">=</operator><literal type="number" pos:start="119:43" pos:end="119:43">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="123:15" pos:end="137:13">else <block pos:start="123:20" pos:end="137:13">{<block_content pos:start="125:17" pos:end="135:17">

                <expr_stmt pos:start="125:17" pos:end="125:43"><expr pos:start="125:17" pos:end="125:42"><call pos:start="125:17" pos:end="125:42"><name pos:start="125:17" pos:end="125:24">AV_DEBUG</name><argument_list pos:start="125:25" pos:end="125:42">(<argument pos:start="125:26" pos:end="125:41"><expr pos:start="125:26" pos:end="125:41"><literal type="string" pos:start="125:26" pos:end="125:41">" not sparse \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="129:17" pos:end="129:37"><expr pos:start="129:17" pos:end="129:36"><name pos:start="129:17" pos:end="129:28">used_entries</name><operator pos:start="129:29" pos:end="129:29">=</operator><name pos:start="129:30" pos:end="129:36">entries</name></expr>;</expr_stmt>

                <for pos:start="131:17" pos:end="135:17">for<control pos:start="131:20" pos:end="131:41">(<init pos:start="131:21" pos:end="131:25"><expr pos:start="131:21" pos:end="131:24"><name pos:start="131:21" pos:end="131:22">ce</name><operator pos:start="131:23" pos:end="131:23">=</operator><literal type="number" pos:start="131:24" pos:end="131:24">0</literal></expr>;</init><condition pos:start="131:26" pos:end="131:36"><expr pos:start="131:26" pos:end="131:35"><name pos:start="131:26" pos:end="131:27">ce</name><operator pos:start="131:28" pos:end="131:28">&lt;</operator><name pos:start="131:29" pos:end="131:35">entries</name></expr>;</condition><incr pos:start="131:37" pos:end="131:40"><expr pos:start="131:37" pos:end="131:40"><operator pos:start="131:37" pos:end="131:38">++</operator><name pos:start="131:39" pos:end="131:40">ce</name></expr></incr>)</control> <block pos:start="131:43" pos:end="135:17">{<block_content pos:start="133:21" pos:end="133:55">

                    <expr_stmt pos:start="133:21" pos:end="133:55"><expr pos:start="133:21" pos:end="133:54"><name pos:start="133:21" pos:end="133:36"><name pos:start="133:21" pos:end="133:32">tmp_vlc_bits</name><index pos:start="133:33" pos:end="133:36">[<expr pos:start="133:34" pos:end="133:35"><name pos:start="133:34" pos:end="133:35">ce</name></expr>]</index></name><operator pos:start="133:37" pos:end="133:37">=</operator><call pos:start="133:38" pos:end="133:52"><name pos:start="133:38" pos:end="133:45">get_bits</name><argument_list pos:start="133:46" pos:end="133:52">(<argument pos:start="133:47" pos:end="133:48"><expr pos:start="133:47" pos:end="133:48"><name pos:start="133:47" pos:end="133:48">gb</name></expr></argument>, <argument pos:start="133:51" pos:end="133:51"><expr pos:start="133:51" pos:end="133:51"><literal type="number" pos:start="133:51" pos:end="133:51">5</literal></expr></argument>)</argument_list></call><operator pos:start="133:53" pos:end="133:53">+</operator><literal type="number" pos:start="133:54" pos:end="133:54">1</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="139:11" pos:end="191:9">else <block pos:start="139:16" pos:end="191:9">{<block_content pos:start="141:13" pos:end="189:13">

            <decl_stmt pos:start="141:13" pos:end="141:42"><decl pos:start="141:13" pos:end="141:41"><type pos:start="141:13" pos:end="141:25"><name pos:start="141:13" pos:end="141:25">uint_fast16_t</name></type> <name pos:start="141:27" pos:end="141:39">current_entry</name><init pos:start="141:40" pos:end="141:41">=<expr pos:start="141:41" pos:end="141:41"><literal type="number" pos:start="141:41" pos:end="141:41">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="143:13" pos:end="143:58"><decl pos:start="143:13" pos:end="143:57"><type pos:start="143:13" pos:end="143:24"><name pos:start="143:13" pos:end="143:24">uint_fast8_t</name></type> <name pos:start="143:26" pos:end="143:39">current_length</name><init pos:start="143:40" pos:end="143:57">=<expr pos:start="143:41" pos:end="143:57"><call pos:start="143:41" pos:end="143:55"><name pos:start="143:41" pos:end="143:48">get_bits</name><argument_list pos:start="143:49" pos:end="143:55">(<argument pos:start="143:50" pos:end="143:51"><expr pos:start="143:50" pos:end="143:51"><name pos:start="143:50" pos:end="143:51">gb</name></expr></argument>, <argument pos:start="143:54" pos:end="143:54"><expr pos:start="143:54" pos:end="143:54"><literal type="number" pos:start="143:54" pos:end="143:54">5</literal></expr></argument>)</argument_list></call><operator pos:start="143:56" pos:end="143:56">+</operator><literal type="number" pos:start="143:57" pos:end="143:57">1</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="147:13" pos:end="147:72"><expr pos:start="147:13" pos:end="147:71"><call pos:start="147:13" pos:end="147:71"><name pos:start="147:13" pos:end="147:20">AV_DEBUG</name><argument_list pos:start="147:21" pos:end="147:71">(<argument pos:start="147:22" pos:end="147:54"><expr pos:start="147:22" pos:end="147:54"><literal type="string" pos:start="147:22" pos:end="147:54">" ordered, current length: %d \n"</literal></expr></argument>, <argument pos:start="147:57" pos:end="147:70"><expr pos:start="147:57" pos:end="147:70"><name pos:start="147:57" pos:end="147:70">current_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="147:75" pos:end="147:81">//FIXME</comment>



            <expr_stmt pos:start="151:13" pos:end="151:33"><expr pos:start="151:13" pos:end="151:32"><name pos:start="151:13" pos:end="151:24">used_entries</name><operator pos:start="151:25" pos:end="151:25">=</operator><name pos:start="151:26" pos:end="151:32">entries</name></expr>;</expr_stmt>

            <for pos:start="153:13" pos:end="181:13">for<control pos:start="153:16" pos:end="153:61">(<init pos:start="153:17" pos:end="153:17">;</init><condition pos:start="153:18" pos:end="153:44"><expr pos:start="153:18" pos:end="153:43"><name pos:start="153:18" pos:end="153:30">current_entry</name><operator pos:start="153:31" pos:end="153:31">&lt;</operator><name pos:start="153:32" pos:end="153:43">used_entries</name></expr>;</condition><incr pos:start="153:45" pos:end="153:60"><expr pos:start="153:45" pos:end="153:60"><operator pos:start="153:45" pos:end="153:46">++</operator><name pos:start="153:47" pos:end="153:60">current_length</name></expr></incr>)</control> <block pos:start="153:63" pos:end="181:13">{<block_content pos:start="155:17" pos:end="179:38">

                <decl_stmt pos:start="155:17" pos:end="155:40"><decl pos:start="155:17" pos:end="155:31"><type pos:start="155:17" pos:end="155:29"><name pos:start="155:17" pos:end="155:29">uint_fast16_t</name></type> <name pos:start="155:31" pos:end="155:31">i</name></decl>, <decl pos:start="155:34" pos:end="155:39"><type ref="prev" pos:start="155:17" pos:end="155:29"/><name pos:start="155:34" pos:end="155:39">number</name></decl>;</decl_stmt>



                <expr_stmt pos:start="159:17" pos:end="159:77"><expr pos:start="159:17" pos:end="159:76"><call pos:start="159:17" pos:end="159:76"><name pos:start="159:17" pos:end="159:24">AV_DEBUG</name><argument_list pos:start="159:25" pos:end="159:76">(<argument pos:start="159:26" pos:end="159:44"><expr pos:start="159:26" pos:end="159:44"><literal type="string" pos:start="159:26" pos:end="159:44">" number bits: %d "</literal></expr></argument>, <argument pos:start="159:47" pos:end="159:75"><expr pos:start="159:47" pos:end="159:75"><call pos:start="159:47" pos:end="159:75"><name pos:start="159:47" pos:end="159:50">ilog</name><argument_list pos:start="159:51" pos:end="159:75">(<argument pos:start="159:52" pos:end="159:74"><expr pos:start="159:52" pos:end="159:74"><name pos:start="159:52" pos:end="159:58">entries</name> <operator pos:start="159:60" pos:end="159:60">-</operator> <name pos:start="159:62" pos:end="159:74">current_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="163:17" pos:end="163:67"><expr pos:start="163:17" pos:end="163:66"><name pos:start="163:17" pos:end="163:22">number</name><operator pos:start="163:23" pos:end="163:23">=</operator><call pos:start="163:24" pos:end="163:66"><name pos:start="163:24" pos:end="163:31">get_bits</name><argument_list pos:start="163:32" pos:end="163:66">(<argument pos:start="163:33" pos:end="163:34"><expr pos:start="163:33" pos:end="163:34"><name pos:start="163:33" pos:end="163:34">gb</name></expr></argument>, <argument pos:start="163:37" pos:end="163:65"><expr pos:start="163:37" pos:end="163:65"><call pos:start="163:37" pos:end="163:65"><name pos:start="163:37" pos:end="163:40">ilog</name><argument_list pos:start="163:41" pos:end="163:65">(<argument pos:start="163:42" pos:end="163:64"><expr pos:start="163:42" pos:end="163:64"><name pos:start="163:42" pos:end="163:48">entries</name> <operator pos:start="163:50" pos:end="163:50">-</operator> <name pos:start="163:52" pos:end="163:64">current_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="167:17" pos:end="167:51"><expr pos:start="167:17" pos:end="167:50"><call pos:start="167:17" pos:end="167:50"><name pos:start="167:17" pos:end="167:24">AV_DEBUG</name><argument_list pos:start="167:25" pos:end="167:50">(<argument pos:start="167:26" pos:end="167:41"><expr pos:start="167:26" pos:end="167:41"><literal type="string" pos:start="167:26" pos:end="167:41">" number: %d \n"</literal></expr></argument>, <argument pos:start="167:44" pos:end="167:49"><expr pos:start="167:44" pos:end="167:49"><name pos:start="167:44" pos:end="167:49">number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <for pos:start="171:17" pos:end="175:17">for<control pos:start="171:20" pos:end="171:63">(<init pos:start="171:21" pos:end="171:36"><expr pos:start="171:21" pos:end="171:35"><name pos:start="171:21" pos:end="171:21">i</name><operator pos:start="171:22" pos:end="171:22">=</operator><name pos:start="171:23" pos:end="171:35">current_entry</name></expr>;</init><condition pos:start="171:37" pos:end="171:59"><expr pos:start="171:37" pos:end="171:58"><name pos:start="171:37" pos:end="171:37">i</name><operator pos:start="171:38" pos:end="171:38">&lt;</operator><name pos:start="171:39" pos:end="171:44">number</name><operator pos:start="171:45" pos:end="171:45">+</operator><name pos:start="171:46" pos:end="171:58">current_entry</name></expr>;</condition><incr pos:start="171:60" pos:end="171:62"><expr pos:start="171:60" pos:end="171:62"><operator pos:start="171:60" pos:end="171:61">++</operator><name pos:start="171:62" pos:end="171:62">i</name></expr></incr>)</control> <block pos:start="171:65" pos:end="175:17">{<block_content pos:start="173:21" pos:end="173:71">

                    <if_stmt pos:start="173:21" pos:end="173:71"><if pos:start="173:21" pos:end="173:71">if <condition pos:start="173:24" pos:end="173:39">(<expr pos:start="173:25" pos:end="173:38"><name pos:start="173:25" pos:end="173:25">i</name><operator pos:start="173:26" pos:end="173:26">&lt;</operator><name pos:start="173:27" pos:end="173:38">used_entries</name></expr>)</condition><block type="pseudo" pos:start="173:41" pos:end="173:71"><block_content pos:start="173:41" pos:end="173:71"> <expr_stmt pos:start="173:41" pos:end="173:71"><expr pos:start="173:41" pos:end="173:70"><name pos:start="173:41" pos:end="173:55"><name pos:start="173:41" pos:end="173:52">tmp_vlc_bits</name><index pos:start="173:53" pos:end="173:55">[<expr pos:start="173:54" pos:end="173:54"><name pos:start="173:54" pos:end="173:54">i</name></expr>]</index></name><operator pos:start="173:56" pos:end="173:56">=</operator><name pos:start="173:57" pos:end="173:70">current_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="179:17" pos:end="179:38"><expr pos:start="179:17" pos:end="179:37"><name pos:start="179:17" pos:end="179:29">current_entry</name><operator pos:start="179:30" pos:end="179:31">+=</operator><name pos:start="179:32" pos:end="179:37">number</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="183:13" pos:end="189:13"><if pos:start="183:13" pos:end="189:13">if <condition pos:start="183:16" pos:end="183:43">(<expr pos:start="183:17" pos:end="183:42"><name pos:start="183:17" pos:end="183:29">current_entry</name><operator pos:start="183:30" pos:end="183:30">&gt;</operator><name pos:start="183:31" pos:end="183:42">used_entries</name></expr>)</condition> <block pos:start="183:45" pos:end="189:13">{<block_content pos:start="185:17" pos:end="187:27">

                <expr_stmt pos:start="185:17" pos:end="185:101"><expr pos:start="185:17" pos:end="185:100"><call pos:start="185:17" pos:end="185:100"><name pos:start="185:17" pos:end="185:22">av_log</name><argument_list pos:start="185:23" pos:end="185:100">(<argument pos:start="185:24" pos:end="185:37"><expr pos:start="185:24" pos:end="185:37"><name pos:start="185:24" pos:end="185:37"><name pos:start="185:24" pos:end="185:25">vc</name><operator pos:start="185:26" pos:end="185:27">-&gt;</operator><name pos:start="185:28" pos:end="185:37">avccontext</name></name></expr></argument>, <argument pos:start="185:40" pos:end="185:51"><expr pos:start="185:40" pos:end="185:51"><name pos:start="185:40" pos:end="185:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:54" pos:end="185:99"><expr pos:start="185:54" pos:end="185:99"><literal type="string" pos:start="185:54" pos:end="185:99">" More codelengths than codes in codebook. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="187:17" pos:end="187:27">goto <name pos:start="187:22" pos:end="187:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="195:9" pos:end="195:52"><expr pos:start="195:9" pos:end="195:51"><name pos:start="195:9" pos:end="195:35"><name pos:start="195:9" pos:end="195:22">codebook_setup</name><operator pos:start="195:23" pos:end="195:24">-&gt;</operator><name pos:start="195:25" pos:end="195:35">lookup_type</name></name><operator pos:start="195:36" pos:end="195:36">=</operator><call pos:start="195:37" pos:end="195:51"><name pos:start="195:37" pos:end="195:44">get_bits</name><argument_list pos:start="195:45" pos:end="195:51">(<argument pos:start="195:46" pos:end="195:47"><expr pos:start="195:46" pos:end="195:47"><name pos:start="195:46" pos:end="195:47">gb</name></expr></argument>, <argument pos:start="195:50" pos:end="195:50"><expr pos:start="195:50" pos:end="195:50"><literal type="number" pos:start="195:50" pos:end="195:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="199:9" pos:end="199:125"><expr pos:start="199:9" pos:end="199:124"><call pos:start="199:9" pos:end="199:124"><name pos:start="199:9" pos:end="199:16">AV_DEBUG</name><argument_list pos:start="199:17" pos:end="199:124">(<argument pos:start="199:18" pos:end="199:43"><expr pos:start="199:18" pos:end="199:43"><literal type="string" pos:start="199:18" pos:end="199:43">" lookup type: %d : %s \n"</literal></expr></argument>, <argument pos:start="199:46" pos:end="199:72"><expr pos:start="199:46" pos:end="199:72"><name pos:start="199:46" pos:end="199:72"><name pos:start="199:46" pos:end="199:59">codebook_setup</name><operator pos:start="199:60" pos:end="199:61">-&gt;</operator><name pos:start="199:62" pos:end="199:72">lookup_type</name></name></expr></argument>, <argument pos:start="199:75" pos:end="199:122"><expr pos:start="199:75" pos:end="199:122"><ternary pos:start="199:75" pos:end="199:122"><condition pos:start="199:75" pos:end="199:103"><expr pos:start="199:75" pos:end="199:101"><name pos:start="199:75" pos:end="199:101"><name pos:start="199:75" pos:end="199:88">codebook_setup</name><operator pos:start="199:89" pos:end="199:90">-&gt;</operator><name pos:start="199:91" pos:end="199:101">lookup_type</name></name></expr> ?</condition><then pos:start="199:105" pos:end="199:108"> <expr pos:start="199:105" pos:end="199:108"><literal type="string" pos:start="199:105" pos:end="199:108">"vq"</literal></expr> </then><else pos:start="199:110" pos:end="199:122">: <expr pos:start="199:112" pos:end="199:122"><literal type="string" pos:start="199:112" pos:end="199:122">"no lookup"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<comment type="line" pos:start="203:1" pos:end="203:67">// If the codebook is used for (inverse) VQ, calculate codevectors.</comment>



        <if_stmt pos:start="207:9" pos:end="333:9"><if pos:start="207:9" pos:end="325:9">if <condition pos:start="207:12" pos:end="207:43">(<expr pos:start="207:13" pos:end="207:42"><name pos:start="207:13" pos:end="207:39"><name pos:start="207:13" pos:end="207:26">codebook_setup</name><operator pos:start="207:27" pos:end="207:28">-&gt;</operator><name pos:start="207:29" pos:end="207:39">lookup_type</name></name><operator pos:start="207:40" pos:end="207:41">==</operator><literal type="number" pos:start="207:42" pos:end="207:42">1</literal></expr>)</condition> <block pos:start="207:45" pos:end="325:9">{<block_content pos:start="209:13" pos:end="323:33">

            <decl_stmt pos:start="209:13" pos:end="209:34"><decl pos:start="209:13" pos:end="209:27"><type pos:start="209:13" pos:end="209:25"><name pos:start="209:13" pos:end="209:25">uint_fast16_t</name></type> <name pos:start="209:27" pos:end="209:27">i</name></decl>, <decl pos:start="209:30" pos:end="209:30"><type ref="prev" pos:start="209:13" pos:end="209:25"/><name pos:start="209:30" pos:end="209:30">j</name></decl>, <decl pos:start="209:33" pos:end="209:33"><type ref="prev" pos:start="209:13" pos:end="209:25"/><name pos:start="209:33" pos:end="209:33">k</name></decl>;</decl_stmt>

            <decl_stmt pos:start="211:13" pos:end="211:105"><decl pos:start="211:13" pos:end="211:104"><type pos:start="211:13" pos:end="211:25"><name pos:start="211:13" pos:end="211:25">uint_fast16_t</name></type> <name pos:start="211:27" pos:end="211:48">codebook_lookup_values</name><init pos:start="211:49" pos:end="211:104">=<expr pos:start="211:50" pos:end="211:104"><call pos:start="211:50" pos:end="211:104"><name pos:start="211:50" pos:end="211:67">ff_vorbis_nth_root</name><argument_list pos:start="211:68" pos:end="211:104">(<argument pos:start="211:69" pos:end="211:75"><expr pos:start="211:69" pos:end="211:75"><name pos:start="211:69" pos:end="211:75">entries</name></expr></argument>, <argument pos:start="211:78" pos:end="211:103"><expr pos:start="211:78" pos:end="211:103"><name pos:start="211:78" pos:end="211:103"><name pos:start="211:78" pos:end="211:91">codebook_setup</name><operator pos:start="211:92" pos:end="211:93">-&gt;</operator><name pos:start="211:94" pos:end="211:103">dimensions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="213:13" pos:end="213:73"><decl pos:start="213:13" pos:end="213:72"><type pos:start="213:13" pos:end="213:25"><name pos:start="213:13" pos:end="213:25">uint_fast16_t</name></type> <name pos:start="213:27" pos:end="213:72"><name pos:start="213:27" pos:end="213:48">codebook_multiplicands</name><index pos:start="213:49" pos:end="213:72">[<expr pos:start="213:50" pos:end="213:71"><name pos:start="213:50" pos:end="213:71">codebook_lookup_values</name></expr>]</index></name></decl>;</decl_stmt>



            <decl_stmt pos:start="217:13" pos:end="217:82"><decl pos:start="217:13" pos:end="217:81"><type pos:start="217:13" pos:end="217:17"><name pos:start="217:13" pos:end="217:17">float</name></type> <name pos:start="217:19" pos:end="217:40">codebook_minimum_value</name><init pos:start="217:41" pos:end="217:81">=<expr pos:start="217:42" pos:end="217:81"><call pos:start="217:42" pos:end="217:81"><name pos:start="217:42" pos:end="217:58">vorbisfloat2float</name><argument_list pos:start="217:59" pos:end="217:81">(<argument pos:start="217:60" pos:end="217:80"><expr pos:start="217:60" pos:end="217:80"><call pos:start="217:60" pos:end="217:80"><name pos:start="217:60" pos:end="217:72">get_bits_long</name><argument_list pos:start="217:73" pos:end="217:80">(<argument pos:start="217:74" pos:end="217:75"><expr pos:start="217:74" pos:end="217:75"><name pos:start="217:74" pos:end="217:75">gb</name></expr></argument>, <argument pos:start="217:78" pos:end="217:79"><expr pos:start="217:78" pos:end="217:79"><literal type="number" pos:start="217:78" pos:end="217:79">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="219:13" pos:end="219:80"><decl pos:start="219:13" pos:end="219:79"><type pos:start="219:13" pos:end="219:17"><name pos:start="219:13" pos:end="219:17">float</name></type> <name pos:start="219:19" pos:end="219:38">codebook_delta_value</name><init pos:start="219:39" pos:end="219:79">=<expr pos:start="219:40" pos:end="219:79"><call pos:start="219:40" pos:end="219:79"><name pos:start="219:40" pos:end="219:56">vorbisfloat2float</name><argument_list pos:start="219:57" pos:end="219:79">(<argument pos:start="219:58" pos:end="219:78"><expr pos:start="219:58" pos:end="219:78"><call pos:start="219:58" pos:end="219:78"><name pos:start="219:58" pos:end="219:70">get_bits_long</name><argument_list pos:start="219:71" pos:end="219:78">(<argument pos:start="219:72" pos:end="219:73"><expr pos:start="219:72" pos:end="219:73"><name pos:start="219:72" pos:end="219:73">gb</name></expr></argument>, <argument pos:start="219:76" pos:end="219:77"><expr pos:start="219:76" pos:end="219:77"><literal type="number" pos:start="219:76" pos:end="219:77">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="221:13" pos:end="221:63"><decl pos:start="221:13" pos:end="221:62"><type pos:start="221:13" pos:end="221:24"><name pos:start="221:13" pos:end="221:24">uint_fast8_t</name></type> <name pos:start="221:26" pos:end="221:44">codebook_value_bits</name><init pos:start="221:45" pos:end="221:62">=<expr pos:start="221:46" pos:end="221:62"><call pos:start="221:46" pos:end="221:60"><name pos:start="221:46" pos:end="221:53">get_bits</name><argument_list pos:start="221:54" pos:end="221:60">(<argument pos:start="221:55" pos:end="221:56"><expr pos:start="221:55" pos:end="221:56"><name pos:start="221:55" pos:end="221:56">gb</name></expr></argument>, <argument pos:start="221:59" pos:end="221:59"><expr pos:start="221:59" pos:end="221:59"><literal type="number" pos:start="221:59" pos:end="221:59">4</literal></expr></argument>)</argument_list></call><operator pos:start="221:61" pos:end="221:61">+</operator><literal type="number" pos:start="221:62" pos:end="221:62">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="223:13" pos:end="223:59"><decl pos:start="223:13" pos:end="223:58"><type pos:start="223:13" pos:end="223:24"><name pos:start="223:13" pos:end="223:24">uint_fast8_t</name></type> <name pos:start="223:26" pos:end="223:44">codebook_sequence_p</name><init pos:start="223:45" pos:end="223:58">=<expr pos:start="223:46" pos:end="223:58"><call pos:start="223:46" pos:end="223:58"><name pos:start="223:46" pos:end="223:54">get_bits1</name><argument_list pos:start="223:55" pos:end="223:58">(<argument pos:start="223:56" pos:end="223:57"><expr pos:start="223:56" pos:end="223:57"><name pos:start="223:56" pos:end="223:57">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="227:13" pos:end="227:103"><expr pos:start="227:13" pos:end="227:102"><call pos:start="227:13" pos:end="227:102"><name pos:start="227:13" pos:end="227:20">AV_DEBUG</name><argument_list pos:start="227:21" pos:end="227:102">(<argument pos:start="227:22" pos:end="227:77"><expr pos:start="227:22" pos:end="227:77"><literal type="string" pos:start="227:22" pos:end="227:77">" We expect %d numbers for building the codevectors. \n"</literal></expr></argument>, <argument pos:start="227:80" pos:end="227:101"><expr pos:start="227:80" pos:end="227:101"><name pos:start="227:80" pos:end="227:101">codebook_lookup_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:94"><expr pos:start="229:13" pos:end="229:93"><call pos:start="229:13" pos:end="229:93"><name pos:start="229:13" pos:end="229:20">AV_DEBUG</name><argument_list pos:start="229:21" pos:end="229:93">(<argument pos:start="229:22" pos:end="229:46"><expr pos:start="229:22" pos:end="229:46"><literal type="string" pos:start="229:22" pos:end="229:46">"  delta %f minmum %f \n"</literal></expr></argument>, <argument pos:start="229:49" pos:end="229:68"><expr pos:start="229:49" pos:end="229:68"><name pos:start="229:49" pos:end="229:68">codebook_delta_value</name></expr></argument>, <argument pos:start="229:71" pos:end="229:92"><expr pos:start="229:71" pos:end="229:92"><name pos:start="229:71" pos:end="229:92">codebook_minimum_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="233:13" pos:end="243:13">for<control pos:start="233:16" pos:end="233:49">(<init pos:start="233:17" pos:end="233:20"><expr pos:start="233:17" pos:end="233:19"><name pos:start="233:17" pos:end="233:17">i</name><operator pos:start="233:18" pos:end="233:18">=</operator><literal type="number" pos:start="233:19" pos:end="233:19">0</literal></expr>;</init><condition pos:start="233:21" pos:end="233:45"><expr pos:start="233:21" pos:end="233:44"><name pos:start="233:21" pos:end="233:21">i</name><operator pos:start="233:22" pos:end="233:22">&lt;</operator><name pos:start="233:23" pos:end="233:44">codebook_lookup_values</name></expr>;</condition><incr pos:start="233:46" pos:end="233:48"><expr pos:start="233:46" pos:end="233:48"><operator pos:start="233:46" pos:end="233:47">++</operator><name pos:start="233:48" pos:end="233:48">i</name></expr></incr>)</control> <block pos:start="233:51" pos:end="243:13">{<block_content pos:start="235:17" pos:end="241:75">

                <expr_stmt pos:start="235:17" pos:end="235:76"><expr pos:start="235:17" pos:end="235:75"><name pos:start="235:17" pos:end="235:41"><name pos:start="235:17" pos:end="235:38">codebook_multiplicands</name><index pos:start="235:39" pos:end="235:41">[<expr pos:start="235:40" pos:end="235:40"><name pos:start="235:40" pos:end="235:40">i</name></expr>]</index></name><operator pos:start="235:42" pos:end="235:42">=</operator><call pos:start="235:43" pos:end="235:75"><name pos:start="235:43" pos:end="235:50">get_bits</name><argument_list pos:start="235:51" pos:end="235:75">(<argument pos:start="235:52" pos:end="235:53"><expr pos:start="235:52" pos:end="235:53"><name pos:start="235:52" pos:end="235:53">gb</name></expr></argument>, <argument pos:start="235:56" pos:end="235:74"><expr pos:start="235:56" pos:end="235:74"><name pos:start="235:56" pos:end="235:74">codebook_value_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="239:17" pos:end="239:142"><expr pos:start="239:17" pos:end="239:141"><call pos:start="239:17" pos:end="239:141"><name pos:start="239:17" pos:end="239:24">AV_DEBUG</name><argument_list pos:start="239:25" pos:end="239:141">(<argument pos:start="239:26" pos:end="239:62"><expr pos:start="239:26" pos:end="239:62"><literal type="string" pos:start="239:26" pos:end="239:62">" multiplicands*delta+minmum : %e \n"</literal></expr></argument>, <argument pos:start="239:65" pos:end="239:140"><expr pos:start="239:65" pos:end="239:140"><operator pos:start="239:65" pos:end="239:65">(</operator><name pos:start="239:66" pos:end="239:70">float</name><operator pos:start="239:71" pos:end="239:71">)</operator><name pos:start="239:72" pos:end="239:96"><name pos:start="239:72" pos:end="239:93">codebook_multiplicands</name><index pos:start="239:94" pos:end="239:96">[<expr pos:start="239:95" pos:end="239:95"><name pos:start="239:95" pos:end="239:95">i</name></expr>]</index></name><operator pos:start="239:97" pos:end="239:97">*</operator><name pos:start="239:98" pos:end="239:117">codebook_delta_value</name><operator pos:start="239:118" pos:end="239:118">+</operator><name pos:start="239:119" pos:end="239:140">codebook_minimum_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:75"><expr pos:start="241:17" pos:end="241:74"><call pos:start="241:17" pos:end="241:74"><name pos:start="241:17" pos:end="241:24">AV_DEBUG</name><argument_list pos:start="241:25" pos:end="241:74">(<argument pos:start="241:26" pos:end="241:46"><expr pos:start="241:26" pos:end="241:46"><literal type="string" pos:start="241:26" pos:end="241:46">" multiplicand %d \n"</literal></expr></argument>, <argument pos:start="241:49" pos:end="241:73"><expr pos:start="241:49" pos:end="241:73"><name pos:start="241:49" pos:end="241:73"><name pos:start="241:49" pos:end="241:70">codebook_multiplicands</name><index pos:start="241:71" pos:end="241:73">[<expr pos:start="241:72" pos:end="241:72"><name pos:start="241:72" pos:end="241:72">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



<comment type="line" pos:start="247:1" pos:end="247:51">// Weed out unused vlcs and build codevector vector</comment>

            <expr_stmt pos:start="249:13" pos:end="249:117"><expr pos:start="249:13" pos:end="249:116"><name pos:start="249:13" pos:end="249:39"><name pos:start="249:13" pos:end="249:26">codebook_setup</name><operator pos:start="249:27" pos:end="249:28">-&gt;</operator><name pos:start="249:29" pos:end="249:39">codevectors</name></name><operator pos:start="249:40" pos:end="249:40">=</operator><operator pos:start="249:41" pos:end="249:41">(</operator><name pos:start="249:42" pos:end="249:46">float</name> <operator pos:start="249:48" pos:end="249:48">*</operator><operator pos:start="249:49" pos:end="249:49">)</operator><call pos:start="249:50" pos:end="249:116"><name pos:start="249:50" pos:end="249:59">av_mallocz</name><argument_list pos:start="249:60" pos:end="249:116">(<argument pos:start="249:61" pos:end="249:115"><expr pos:start="249:61" pos:end="249:115"><name pos:start="249:61" pos:end="249:72">used_entries</name><operator pos:start="249:73" pos:end="249:73">*</operator><name pos:start="249:74" pos:end="249:99"><name pos:start="249:74" pos:end="249:87">codebook_setup</name><operator pos:start="249:88" pos:end="249:89">-&gt;</operator><name pos:start="249:90" pos:end="249:99">dimensions</name></name> <operator pos:start="249:101" pos:end="249:101">*</operator> <sizeof pos:start="249:103" pos:end="249:115">sizeof<argument_list pos:start="249:109" pos:end="249:115">(<argument pos:start="249:110" pos:end="249:114"><expr pos:start="249:110" pos:end="249:114"><name pos:start="249:110" pos:end="249:114">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="251:13" pos:end="313:13">for<control pos:start="251:16" pos:end="251:39">(<init pos:start="251:17" pos:end="251:25"><expr pos:start="251:17" pos:end="251:19"><name pos:start="251:17" pos:end="251:17">j</name><operator pos:start="251:18" pos:end="251:18">=</operator><literal type="number" pos:start="251:19" pos:end="251:19">0</literal></expr><operator pos:start="251:20" pos:end="251:20">,</operator> <expr pos:start="251:22" pos:end="251:24"><name pos:start="251:22" pos:end="251:22">i</name><operator pos:start="251:23" pos:end="251:23">=</operator><literal type="number" pos:start="251:24" pos:end="251:24">0</literal></expr>;</init><condition pos:start="251:26" pos:end="251:35"><expr pos:start="251:26" pos:end="251:34"><name pos:start="251:26" pos:end="251:26">i</name><operator pos:start="251:27" pos:end="251:27">&lt;</operator><name pos:start="251:28" pos:end="251:34">entries</name></expr>;</condition><incr pos:start="251:36" pos:end="251:38"><expr pos:start="251:36" pos:end="251:38"><operator pos:start="251:36" pos:end="251:37">++</operator><name pos:start="251:38" pos:end="251:38">i</name></expr></incr>)</control> <block pos:start="251:41" pos:end="313:13">{<block_content pos:start="253:17" pos:end="311:17">

                <decl_stmt pos:start="253:17" pos:end="253:60"><decl pos:start="253:17" pos:end="253:59"><type pos:start="253:17" pos:end="253:28"><name pos:start="253:17" pos:end="253:28">uint_fast8_t</name></type> <name pos:start="253:30" pos:end="253:32">dim</name><init pos:start="253:33" pos:end="253:59">=<expr pos:start="253:34" pos:end="253:59"><name pos:start="253:34" pos:end="253:59"><name pos:start="253:34" pos:end="253:47">codebook_setup</name><operator pos:start="253:48" pos:end="253:49">-&gt;</operator><name pos:start="253:50" pos:end="253:59">dimensions</name></name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="257:17" pos:end="311:17"><if pos:start="257:17" pos:end="311:17">if <condition pos:start="257:20" pos:end="257:36">(<expr pos:start="257:21" pos:end="257:35"><name pos:start="257:21" pos:end="257:35"><name pos:start="257:21" pos:end="257:32">tmp_vlc_bits</name><index pos:start="257:33" pos:end="257:35">[<expr pos:start="257:34" pos:end="257:34"><name pos:start="257:34" pos:end="257:34">i</name></expr>]</index></name></expr>)</condition> <block pos:start="257:38" pos:end="311:17">{<block_content pos:start="259:21" pos:end="309:24">

                    <decl_stmt pos:start="259:21" pos:end="259:35"><decl pos:start="259:21" pos:end="259:34"><type pos:start="259:21" pos:end="259:25"><name pos:start="259:21" pos:end="259:25">float</name></type> <name pos:start="259:27" pos:end="259:30">last</name><init pos:start="259:31" pos:end="259:34">=<expr pos:start="259:32" pos:end="259:34"><literal type="number" pos:start="259:32" pos:end="259:34">0.0</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="261:21" pos:end="266:0"><decl pos:start="261:21" pos:end="261:49"><type pos:start="261:21" pos:end="261:33"><name pos:start="261:21" pos:end="261:33">uint_fast32_t</name></type> <name pos:start="261:35" pos:end="261:47">lookup_offset</name><init pos:start="261:48" pos:end="261:49">=<expr pos:start="261:49" pos:end="261:49"><name pos:start="261:49" pos:end="261:49">i</name></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="265:1" pos:end="265:14">#<cpp:directive pos:start="265:2" pos:end="265:6">ifdef</cpp:directive> <name pos:start="265:8" pos:end="265:14">V_DEBUG</name></cpp:ifdef>

                    <expr_stmt pos:start="267:21" pos:end="270:0"><expr pos:start="267:21" pos:end="267:80"><call pos:start="267:21" pos:end="267:80"><name pos:start="267:21" pos:end="267:26">av_log</name><argument_list pos:start="267:27" pos:end="267:80">(<argument pos:start="267:28" pos:end="267:41"><expr pos:start="267:28" pos:end="267:41"><name pos:start="267:28" pos:end="267:41"><name pos:start="267:28" pos:end="267:29">vc</name><operator pos:start="267:30" pos:end="267:31">-&gt;</operator><name pos:start="267:32" pos:end="267:41">avccontext</name></name></expr></argument>, <argument pos:start="267:44" pos:end="267:54"><expr pos:start="267:44" pos:end="267:54"><name pos:start="267:44" pos:end="267:54">AV_LOG_INFO</name></expr></argument>, <argument pos:start="267:57" pos:end="267:76"><expr pos:start="267:57" pos:end="267:76"><literal type="string" pos:start="267:57" pos:end="267:76">"Lookup offset %d ,"</literal></expr></argument>, <argument pos:start="267:79" pos:end="267:79"><expr pos:start="267:79" pos:end="267:79"><name pos:start="267:79" pos:end="267:79">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>



                    <for pos:start="273:21" pos:end="287:21">for<control pos:start="273:24" pos:end="273:38">(<init pos:start="273:25" pos:end="273:28"><expr pos:start="273:25" pos:end="273:27"><name pos:start="273:25" pos:end="273:25">k</name><operator pos:start="273:26" pos:end="273:26">=</operator><literal type="number" pos:start="273:27" pos:end="273:27">0</literal></expr>;</init><condition pos:start="273:29" pos:end="273:34"><expr pos:start="273:29" pos:end="273:33"><name pos:start="273:29" pos:end="273:29">k</name><operator pos:start="273:30" pos:end="273:30">&lt;</operator><name pos:start="273:31" pos:end="273:33">dim</name></expr>;</condition><incr pos:start="273:35" pos:end="273:37"><expr pos:start="273:35" pos:end="273:37"><operator pos:start="273:35" pos:end="273:36">++</operator><name pos:start="273:37" pos:end="273:37">k</name></expr></incr>)</control> <block pos:start="273:40" pos:end="287:21">{<block_content pos:start="275:25" pos:end="285:62">

                        <decl_stmt pos:start="275:25" pos:end="275:99"><decl pos:start="275:25" pos:end="275:98"><type pos:start="275:25" pos:end="275:37"><name pos:start="275:25" pos:end="275:37">uint_fast32_t</name></type> <name pos:start="275:39" pos:end="275:57">multiplicand_offset</name> <init pos:start="275:59" pos:end="275:98">= <expr pos:start="275:61" pos:end="275:98"><name pos:start="275:61" pos:end="275:73">lookup_offset</name> <operator pos:start="275:75" pos:end="275:75">%</operator> <name pos:start="275:77" pos:end="275:98">codebook_lookup_values</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="277:25" pos:end="277:154"><expr pos:start="277:25" pos:end="277:153"><name pos:start="277:25" pos:end="277:60"><name pos:start="277:25" pos:end="277:38">codebook_setup</name><operator pos:start="277:39" pos:end="277:40">-&gt;</operator><name pos:start="277:41" pos:end="277:51">codevectors</name><index pos:start="277:52" pos:end="277:60">[<expr pos:start="277:53" pos:end="277:59"><name pos:start="277:53" pos:end="277:53">j</name><operator pos:start="277:54" pos:end="277:54">*</operator><name pos:start="277:55" pos:end="277:57">dim</name><operator pos:start="277:58" pos:end="277:58">+</operator><name pos:start="277:59" pos:end="277:59">k</name></expr>]</index></name><operator pos:start="277:61" pos:end="277:61">=</operator><name pos:start="277:62" pos:end="277:104"><name pos:start="277:62" pos:end="277:83">codebook_multiplicands</name><index pos:start="277:84" pos:end="277:104">[<expr pos:start="277:85" pos:end="277:103"><name pos:start="277:85" pos:end="277:103">multiplicand_offset</name></expr>]</index></name><operator pos:start="277:105" pos:end="277:105">*</operator><name pos:start="277:106" pos:end="277:125">codebook_delta_value</name><operator pos:start="277:126" pos:end="277:126">+</operator><name pos:start="277:127" pos:end="277:148">codebook_minimum_value</name><operator pos:start="277:149" pos:end="277:149">+</operator><name pos:start="277:150" pos:end="277:153">last</name></expr>;</expr_stmt>

                        <if_stmt pos:start="279:25" pos:end="283:25"><if pos:start="279:25" pos:end="283:25">if <condition pos:start="279:28" pos:end="279:48">(<expr pos:start="279:29" pos:end="279:47"><name pos:start="279:29" pos:end="279:47">codebook_sequence_p</name></expr>)</condition> <block pos:start="279:50" pos:end="283:25">{<block_content pos:start="281:29" pos:end="281:70">

                            <expr_stmt pos:start="281:29" pos:end="281:70"><expr pos:start="281:29" pos:end="281:69"><name pos:start="281:29" pos:end="281:32">last</name><operator pos:start="281:33" pos:end="281:33">=</operator><name pos:start="281:34" pos:end="281:69"><name pos:start="281:34" pos:end="281:47">codebook_setup</name><operator pos:start="281:48" pos:end="281:49">-&gt;</operator><name pos:start="281:50" pos:end="281:60">codevectors</name><index pos:start="281:61" pos:end="281:69">[<expr pos:start="281:62" pos:end="281:68"><name pos:start="281:62" pos:end="281:62">j</name><operator pos:start="281:63" pos:end="281:63">*</operator><name pos:start="281:64" pos:end="281:66">dim</name><operator pos:start="281:67" pos:end="281:67">+</operator><name pos:start="281:68" pos:end="281:68">k</name></expr>]</index></name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="285:25" pos:end="285:62"><expr pos:start="285:25" pos:end="285:61"><name pos:start="285:25" pos:end="285:37">lookup_offset</name><operator pos:start="285:38" pos:end="285:39">/=</operator><name pos:start="285:40" pos:end="285:61">codebook_lookup_values</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="289:21" pos:end="294:0"><expr pos:start="289:21" pos:end="289:51"><name pos:start="289:21" pos:end="289:35"><name pos:start="289:21" pos:end="289:32">tmp_vlc_bits</name><index pos:start="289:33" pos:end="289:35">[<expr pos:start="289:34" pos:end="289:34"><name pos:start="289:34" pos:end="289:34">j</name></expr>]</index></name><operator pos:start="289:36" pos:end="289:36">=</operator><name pos:start="289:37" pos:end="289:51"><name pos:start="289:37" pos:end="289:48">tmp_vlc_bits</name><index pos:start="289:49" pos:end="289:51">[<expr pos:start="289:50" pos:end="289:50"><name pos:start="289:50" pos:end="289:50">i</name></expr>]</index></name></expr>;</expr_stmt>



<cpp:ifdef pos:start="293:1" pos:end="293:14">#<cpp:directive pos:start="293:2" pos:end="293:6">ifdef</cpp:directive> <name pos:start="293:8" pos:end="293:14">V_DEBUG</name></cpp:ifdef>

                    <expr_stmt pos:start="295:21" pos:end="295:94"><expr pos:start="295:21" pos:end="295:93"><call pos:start="295:21" pos:end="295:93"><name pos:start="295:21" pos:end="295:26">av_log</name><argument_list pos:start="295:27" pos:end="295:93">(<argument pos:start="295:28" pos:end="295:41"><expr pos:start="295:28" pos:end="295:41"><name pos:start="295:28" pos:end="295:41"><name pos:start="295:28" pos:end="295:29">vc</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:41">avccontext</name></name></expr></argument>, <argument pos:start="295:44" pos:end="295:54"><expr pos:start="295:44" pos:end="295:54"><name pos:start="295:44" pos:end="295:54">AV_LOG_INFO</name></expr></argument>, <argument pos:start="295:57" pos:end="295:89"><expr pos:start="295:57" pos:end="295:89"><literal type="string" pos:start="295:57" pos:end="295:89">"real lookup offset %d, vector: "</literal></expr></argument>, <argument pos:start="295:92" pos:end="295:92"><expr pos:start="295:92" pos:end="295:92"><name pos:start="295:92" pos:end="295:92">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="297:21" pos:end="301:21">for<control pos:start="297:24" pos:end="297:38">(<init pos:start="297:25" pos:end="297:28"><expr pos:start="297:25" pos:end="297:27"><name pos:start="297:25" pos:end="297:25">k</name><operator pos:start="297:26" pos:end="297:26">=</operator><literal type="number" pos:start="297:27" pos:end="297:27">0</literal></expr>;</init><condition pos:start="297:29" pos:end="297:34"><expr pos:start="297:29" pos:end="297:33"><name pos:start="297:29" pos:end="297:29">k</name><operator pos:start="297:30" pos:end="297:30">&lt;</operator><name pos:start="297:31" pos:end="297:33">dim</name></expr>;</condition><incr pos:start="297:35" pos:end="297:37"><expr pos:start="297:35" pos:end="297:37"><operator pos:start="297:35" pos:end="297:36">++</operator><name pos:start="297:37" pos:end="297:37">k</name></expr></incr>)</control> <block pos:start="297:40" pos:end="301:21">{<block_content pos:start="299:25" pos:end="299:106">

                        <expr_stmt pos:start="299:25" pos:end="299:106"><expr pos:start="299:25" pos:end="299:105"><call pos:start="299:25" pos:end="299:105"><name pos:start="299:25" pos:end="299:30">av_log</name><argument_list pos:start="299:31" pos:end="299:105">(<argument pos:start="299:32" pos:end="299:45"><expr pos:start="299:32" pos:end="299:45"><name pos:start="299:32" pos:end="299:45"><name pos:start="299:32" pos:end="299:33">vc</name><operator pos:start="299:34" pos:end="299:35">-&gt;</operator><name pos:start="299:36" pos:end="299:45">avccontext</name></name></expr></argument>, <argument pos:start="299:48" pos:end="299:58"><expr pos:start="299:48" pos:end="299:58"><name pos:start="299:48" pos:end="299:58">AV_LOG_INFO</name></expr></argument>, <argument pos:start="299:61" pos:end="299:66"><expr pos:start="299:61" pos:end="299:66"><literal type="string" pos:start="299:61" pos:end="299:66">" %f "</literal></expr></argument>, <argument pos:start="299:69" pos:end="299:104"><expr pos:start="299:69" pos:end="299:104"><name pos:start="299:69" pos:end="299:104"><name pos:start="299:69" pos:end="299:82">codebook_setup</name><operator pos:start="299:83" pos:end="299:84">-&gt;</operator><name pos:start="299:85" pos:end="299:95">codevectors</name><index pos:start="299:96" pos:end="299:104">[<expr pos:start="299:97" pos:end="299:103"><name pos:start="299:97" pos:end="299:97">j</name><operator pos:start="299:98" pos:end="299:98">*</operator><name pos:start="299:99" pos:end="299:101">dim</name><operator pos:start="299:102" pos:end="299:102">+</operator><name pos:start="299:103" pos:end="299:103">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="303:21" pos:end="306:0"><expr pos:start="303:21" pos:end="303:61"><call pos:start="303:21" pos:end="303:61"><name pos:start="303:21" pos:end="303:26">av_log</name><argument_list pos:start="303:27" pos:end="303:61">(<argument pos:start="303:28" pos:end="303:41"><expr pos:start="303:28" pos:end="303:41"><name pos:start="303:28" pos:end="303:41"><name pos:start="303:28" pos:end="303:29">vc</name><operator pos:start="303:30" pos:end="303:31">-&gt;</operator><name pos:start="303:32" pos:end="303:41">avccontext</name></name></expr></argument>, <argument pos:start="303:44" pos:end="303:54"><expr pos:start="303:44" pos:end="303:54"><name pos:start="303:44" pos:end="303:54">AV_LOG_INFO</name></expr></argument>, <argument pos:start="303:57" pos:end="303:60"><expr pos:start="303:57" pos:end="303:60"><literal type="string" pos:start="303:57" pos:end="303:60">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="305:1" pos:end="305:6">#<cpp:directive pos:start="305:2" pos:end="305:6">endif</cpp:directive></cpp:endif>



                    <expr_stmt pos:start="309:21" pos:end="309:24"><expr pos:start="309:21" pos:end="309:23"><operator pos:start="309:21" pos:end="309:22">++</operator><name pos:start="309:23" pos:end="309:23">j</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="315:13" pos:end="321:13"><if pos:start="315:13" pos:end="321:13">if <condition pos:start="315:16" pos:end="315:32">(<expr pos:start="315:17" pos:end="315:31"><name pos:start="315:17" pos:end="315:17">j</name><operator pos:start="315:18" pos:end="315:19">!=</operator><name pos:start="315:20" pos:end="315:31">used_entries</name></expr>)</condition> <block pos:start="315:34" pos:end="321:13">{<block_content pos:start="317:17" pos:end="319:27">

                <expr_stmt pos:start="317:17" pos:end="317:99"><expr pos:start="317:17" pos:end="317:98"><call pos:start="317:17" pos:end="317:98"><name pos:start="317:17" pos:end="317:22">av_log</name><argument_list pos:start="317:23" pos:end="317:98">(<argument pos:start="317:24" pos:end="317:37"><expr pos:start="317:24" pos:end="317:37"><name pos:start="317:24" pos:end="317:37"><name pos:start="317:24" pos:end="317:25">vc</name><operator pos:start="317:26" pos:end="317:27">-&gt;</operator><name pos:start="317:28" pos:end="317:37">avccontext</name></name></expr></argument>, <argument pos:start="317:40" pos:end="317:51"><expr pos:start="317:40" pos:end="317:51"><name pos:start="317:40" pos:end="317:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="317:54" pos:end="317:97"><expr pos:start="317:54" pos:end="317:97"><literal type="string" pos:start="317:54" pos:end="317:97">"Bug in codevector vector building code. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="319:17" pos:end="319:27">goto <name pos:start="319:22" pos:end="319:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:33"><expr pos:start="323:13" pos:end="323:32"><name pos:start="323:13" pos:end="323:19">entries</name><operator pos:start="323:20" pos:end="323:20">=</operator><name pos:start="323:21" pos:end="323:32">used_entries</name></expr>;</expr_stmt>

        </block_content>}</block></if>

        <if type="elseif" pos:start="327:9" pos:end="333:9">else if <condition pos:start="327:17" pos:end="327:48">(<expr pos:start="327:18" pos:end="327:47"><name pos:start="327:18" pos:end="327:44"><name pos:start="327:18" pos:end="327:31">codebook_setup</name><operator pos:start="327:32" pos:end="327:33">-&gt;</operator><name pos:start="327:34" pos:end="327:44">lookup_type</name></name><operator pos:start="327:45" pos:end="327:46">&gt;=</operator><literal type="number" pos:start="327:47" pos:end="327:47">2</literal></expr>)</condition> <block pos:start="327:50" pos:end="333:9">{<block_content pos:start="329:13" pos:end="331:23">

            <expr_stmt pos:start="329:13" pos:end="329:91"><expr pos:start="329:13" pos:end="329:90"><call pos:start="329:13" pos:end="329:90"><name pos:start="329:13" pos:end="329:18">av_log</name><argument_list pos:start="329:19" pos:end="329:90">(<argument pos:start="329:20" pos:end="329:33"><expr pos:start="329:20" pos:end="329:33"><name pos:start="329:20" pos:end="329:33"><name pos:start="329:20" pos:end="329:21">vc</name><operator pos:start="329:22" pos:end="329:23">-&gt;</operator><name pos:start="329:24" pos:end="329:33">avccontext</name></name></expr></argument>, <argument pos:start="329:36" pos:end="329:47"><expr pos:start="329:36" pos:end="329:47"><name pos:start="329:36" pos:end="329:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="329:50" pos:end="329:89"><expr pos:start="329:50" pos:end="329:89"><literal type="string" pos:start="329:50" pos:end="329:89">"Codebook lookup type not supported. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="331:13" pos:end="331:23">goto <name pos:start="331:18" pos:end="331:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="337:1" pos:end="337:23">// Initialize VLC table</comment>

        <if_stmt pos:start="339:9" pos:end="345:9"><if pos:start="339:9" pos:end="345:9">if <condition pos:start="339:12" pos:end="339:68">(<expr pos:start="339:13" pos:end="339:67"><call pos:start="339:13" pos:end="339:67"><name pos:start="339:13" pos:end="339:29">ff_vorbis_len2vlc</name><argument_list pos:start="339:30" pos:end="339:67">(<argument pos:start="339:31" pos:end="339:42"><expr pos:start="339:31" pos:end="339:42"><name pos:start="339:31" pos:end="339:42">tmp_vlc_bits</name></expr></argument>, <argument pos:start="339:45" pos:end="339:57"><expr pos:start="339:45" pos:end="339:57"><name pos:start="339:45" pos:end="339:57">tmp_vlc_codes</name></expr></argument>, <argument pos:start="339:60" pos:end="339:66"><expr pos:start="339:60" pos:end="339:66"><name pos:start="339:60" pos:end="339:66">entries</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="339:70" pos:end="345:9">{<block_content pos:start="341:13" pos:end="343:23">

            <expr_stmt pos:start="341:13" pos:end="341:100"><expr pos:start="341:13" pos:end="341:99"><call pos:start="341:13" pos:end="341:99"><name pos:start="341:13" pos:end="341:18">av_log</name><argument_list pos:start="341:19" pos:end="341:99">(<argument pos:start="341:20" pos:end="341:33"><expr pos:start="341:20" pos:end="341:33"><name pos:start="341:20" pos:end="341:33"><name pos:start="341:20" pos:end="341:21">vc</name><operator pos:start="341:22" pos:end="341:23">-&gt;</operator><name pos:start="341:24" pos:end="341:33">avccontext</name></name></expr></argument>, <argument pos:start="341:36" pos:end="341:47"><expr pos:start="341:36" pos:end="341:47"><name pos:start="341:36" pos:end="341:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="341:50" pos:end="341:98"><expr pos:start="341:50" pos:end="341:98"><literal type="string" pos:start="341:50" pos:end="341:98">" Invalid code lengths while generating vlcs. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="343:13" pos:end="343:23">goto <name pos:start="343:18" pos:end="343:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:35"><expr pos:start="347:9" pos:end="347:34"><name pos:start="347:9" pos:end="347:32"><name pos:start="347:9" pos:end="347:22">codebook_setup</name><operator pos:start="347:23" pos:end="347:24">-&gt;</operator><name pos:start="347:25" pos:end="347:32">maxdepth</name></name><operator pos:start="347:33" pos:end="347:33">=</operator><literal type="number" pos:start="347:34" pos:end="347:34">0</literal></expr>;</expr_stmt>

        <for pos:start="349:9" pos:end="351:100">for<control pos:start="349:12" pos:end="349:30">(<init pos:start="349:13" pos:end="349:16"><expr pos:start="349:13" pos:end="349:15"><name pos:start="349:13" pos:end="349:13">t</name><operator pos:start="349:14" pos:end="349:14">=</operator><literal type="number" pos:start="349:15" pos:end="349:15">0</literal></expr>;</init><condition pos:start="349:17" pos:end="349:26"><expr pos:start="349:17" pos:end="349:25"><name pos:start="349:17" pos:end="349:17">t</name><operator pos:start="349:18" pos:end="349:18">&lt;</operator><name pos:start="349:19" pos:end="349:25">entries</name></expr>;</condition><incr pos:start="349:27" pos:end="349:29"><expr pos:start="349:27" pos:end="349:29"><operator pos:start="349:27" pos:end="349:28">++</operator><name pos:start="349:29" pos:end="349:29">t</name></expr></incr>)</control><block type="pseudo" pos:start="351:13" pos:end="351:100"><block_content pos:start="351:13" pos:end="351:100">

            <if_stmt pos:start="351:13" pos:end="351:100"><if pos:start="351:13" pos:end="351:100">if <condition pos:start="351:16" pos:end="351:58">(<expr pos:start="351:17" pos:end="351:57"><name pos:start="351:17" pos:end="351:31"><name pos:start="351:17" pos:end="351:28">tmp_vlc_bits</name><index pos:start="351:29" pos:end="351:31">[<expr pos:start="351:30" pos:end="351:30"><name pos:start="351:30" pos:end="351:30">t</name></expr>]</index></name><operator pos:start="351:32" pos:end="351:33">&gt;=</operator><name pos:start="351:34" pos:end="351:57"><name pos:start="351:34" pos:end="351:47">codebook_setup</name><operator pos:start="351:48" pos:end="351:49">-&gt;</operator><name pos:start="351:50" pos:end="351:57">maxdepth</name></name></expr>)</condition><block type="pseudo" pos:start="351:60" pos:end="351:100"><block_content pos:start="351:60" pos:end="351:100"> <expr_stmt pos:start="351:60" pos:end="351:100"><expr pos:start="351:60" pos:end="351:99"><name pos:start="351:60" pos:end="351:83"><name pos:start="351:60" pos:end="351:73">codebook_setup</name><operator pos:start="351:74" pos:end="351:75">-&gt;</operator><name pos:start="351:76" pos:end="351:83">maxdepth</name></name><operator pos:start="351:84" pos:end="351:84">=</operator><name pos:start="351:85" pos:end="351:99"><name pos:start="351:85" pos:end="351:96">tmp_vlc_bits</name><index pos:start="351:97" pos:end="351:99">[<expr pos:start="351:98" pos:end="351:98"><name pos:start="351:98" pos:end="351:98">t</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



        <if_stmt pos:start="355:9" pos:end="357:85"><if pos:start="355:9" pos:end="355:86">if<condition pos:start="355:11" pos:end="355:50">(<expr pos:start="355:12" pos:end="355:49"><name pos:start="355:12" pos:end="355:35"><name pos:start="355:12" pos:end="355:25">codebook_setup</name><operator pos:start="355:26" pos:end="355:27">-&gt;</operator><name pos:start="355:28" pos:end="355:35">maxdepth</name></name> <operator pos:start="355:37" pos:end="355:37">&gt;</operator> <literal type="number" pos:start="355:39" pos:end="355:39">3</literal><operator pos:start="355:40" pos:end="355:40">*</operator><name pos:start="355:41" pos:end="355:49">V_NB_BITS</name></expr>)</condition><block type="pseudo" pos:start="355:52" pos:end="355:86"><block_content pos:start="355:52" pos:end="355:86"> <expr_stmt pos:start="355:52" pos:end="355:86"><expr pos:start="355:52" pos:end="355:85"><name pos:start="355:52" pos:end="355:74"><name pos:start="355:52" pos:end="355:65">codebook_setup</name><operator pos:start="355:66" pos:end="355:67">-&gt;</operator><name pos:start="355:68" pos:end="355:74">nb_bits</name></name><operator pos:start="355:75" pos:end="355:75">=</operator><name pos:start="355:76" pos:end="355:85">V_NB_BITS2</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="357:9" pos:end="357:85">else<block type="pseudo" pos:start="357:52" pos:end="357:85"><block_content pos:start="357:52" pos:end="357:85">                                       <expr_stmt pos:start="357:52" pos:end="357:85"><expr pos:start="357:52" pos:end="357:84"><name pos:start="357:52" pos:end="357:74"><name pos:start="357:52" pos:end="357:65">codebook_setup</name><operator pos:start="357:66" pos:end="357:67">-&gt;</operator><name pos:start="357:68" pos:end="357:74">nb_bits</name></name><operator pos:start="357:75" pos:end="357:75">=</operator><name pos:start="357:76" pos:end="357:84">V_NB_BITS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="361:9" pos:end="361:110"><expr pos:start="361:9" pos:end="361:109"><name pos:start="361:9" pos:end="361:32"><name pos:start="361:9" pos:end="361:22">codebook_setup</name><operator pos:start="361:23" pos:end="361:24">-&gt;</operator><name pos:start="361:25" pos:end="361:32">maxdepth</name></name><operator pos:start="361:33" pos:end="361:33">=</operator><operator pos:start="361:34" pos:end="361:34">(</operator><name pos:start="361:35" pos:end="361:58"><name pos:start="361:35" pos:end="361:48">codebook_setup</name><operator pos:start="361:49" pos:end="361:50">-&gt;</operator><name pos:start="361:51" pos:end="361:58">maxdepth</name></name><operator pos:start="361:59" pos:end="361:59">+</operator><name pos:start="361:60" pos:end="361:82"><name pos:start="361:60" pos:end="361:73">codebook_setup</name><operator pos:start="361:74" pos:end="361:75">-&gt;</operator><name pos:start="361:76" pos:end="361:82">nb_bits</name></name><operator pos:start="361:83" pos:end="361:83">-</operator><literal type="number" pos:start="361:84" pos:end="361:84">1</literal><operator pos:start="361:85" pos:end="361:85">)</operator><operator pos:start="361:86" pos:end="361:86">/</operator><name pos:start="361:87" pos:end="361:109"><name pos:start="361:87" pos:end="361:100">codebook_setup</name><operator pos:start="361:101" pos:end="361:102">-&gt;</operator><name pos:start="361:103" pos:end="361:109">nb_bits</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="365:9" pos:end="371:9"><if pos:start="365:9" pos:end="371:9">if <condition pos:start="365:12" pos:end="365:213">(<expr pos:start="365:13" pos:end="365:212"><call pos:start="365:13" pos:end="365:212"><name pos:start="365:13" pos:end="365:20">init_vlc</name><argument_list pos:start="365:21" pos:end="365:212">(<argument pos:start="365:22" pos:end="365:41"><expr pos:start="365:22" pos:end="365:41"><operator pos:start="365:22" pos:end="365:22">&amp;</operator><name pos:start="365:23" pos:end="365:41"><name pos:start="365:23" pos:end="365:36">codebook_setup</name><operator pos:start="365:37" pos:end="365:38">-&gt;</operator><name pos:start="365:39" pos:end="365:41">vlc</name></name></expr></argument>, <argument pos:start="365:44" pos:end="365:66"><expr pos:start="365:44" pos:end="365:66"><name pos:start="365:44" pos:end="365:66"><name pos:start="365:44" pos:end="365:57">codebook_setup</name><operator pos:start="365:58" pos:end="365:59">-&gt;</operator><name pos:start="365:60" pos:end="365:66">nb_bits</name></name></expr></argument>, <argument pos:start="365:69" pos:end="365:75"><expr pos:start="365:69" pos:end="365:75"><name pos:start="365:69" pos:end="365:75">entries</name></expr></argument>, <argument pos:start="365:78" pos:end="365:89"><expr pos:start="365:78" pos:end="365:89"><name pos:start="365:78" pos:end="365:89">tmp_vlc_bits</name></expr></argument>, <argument pos:start="365:92" pos:end="365:112"><expr pos:start="365:92" pos:end="365:112"><sizeof pos:start="365:92" pos:end="365:112">sizeof<argument_list pos:start="365:98" pos:end="365:112">(<argument pos:start="365:99" pos:end="365:111"><expr pos:start="365:99" pos:end="365:111"><operator pos:start="365:99" pos:end="365:99">*</operator><name pos:start="365:100" pos:end="365:111">tmp_vlc_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="365:115" pos:end="365:135"><expr pos:start="365:115" pos:end="365:135"><sizeof pos:start="365:115" pos:end="365:135">sizeof<argument_list pos:start="365:121" pos:end="365:135">(<argument pos:start="365:122" pos:end="365:134"><expr pos:start="365:122" pos:end="365:134"><operator pos:start="365:122" pos:end="365:122">*</operator><name pos:start="365:123" pos:end="365:134">tmp_vlc_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="365:138" pos:end="365:150"><expr pos:start="365:138" pos:end="365:150"><name pos:start="365:138" pos:end="365:150">tmp_vlc_codes</name></expr></argument>, <argument pos:start="365:153" pos:end="365:174"><expr pos:start="365:153" pos:end="365:174"><sizeof pos:start="365:153" pos:end="365:174">sizeof<argument_list pos:start="365:159" pos:end="365:174">(<argument pos:start="365:160" pos:end="365:173"><expr pos:start="365:160" pos:end="365:173"><operator pos:start="365:160" pos:end="365:160">*</operator><name pos:start="365:161" pos:end="365:173">tmp_vlc_codes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="365:177" pos:end="365:198"><expr pos:start="365:177" pos:end="365:198"><sizeof pos:start="365:177" pos:end="365:198">sizeof<argument_list pos:start="365:183" pos:end="365:198">(<argument pos:start="365:184" pos:end="365:197"><expr pos:start="365:184" pos:end="365:197"><operator pos:start="365:184" pos:end="365:184">*</operator><name pos:start="365:185" pos:end="365:197">tmp_vlc_codes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="365:201" pos:end="365:211"><expr pos:start="365:201" pos:end="365:211"><name pos:start="365:201" pos:end="365:211">INIT_VLC_LE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="365:215" pos:end="371:9">{<block_content pos:start="367:13" pos:end="369:23">

            <expr_stmt pos:start="367:13" pos:end="367:85"><expr pos:start="367:13" pos:end="367:84"><call pos:start="367:13" pos:end="367:84"><name pos:start="367:13" pos:end="367:18">av_log</name><argument_list pos:start="367:19" pos:end="367:84">(<argument pos:start="367:20" pos:end="367:33"><expr pos:start="367:20" pos:end="367:33"><name pos:start="367:20" pos:end="367:33"><name pos:start="367:20" pos:end="367:21">vc</name><operator pos:start="367:22" pos:end="367:23">-&gt;</operator><name pos:start="367:24" pos:end="367:33">avccontext</name></name></expr></argument>, <argument pos:start="367:36" pos:end="367:47"><expr pos:start="367:36" pos:end="367:47"><name pos:start="367:36" pos:end="367:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="367:50" pos:end="367:83"><expr pos:start="367:50" pos:end="367:83"><literal type="string" pos:start="367:50" pos:end="367:83">" Error generating vlc tables. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="369:13" pos:end="369:23">goto <name pos:start="369:18" pos:end="369:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="377:5" pos:end="377:26"><expr pos:start="377:5" pos:end="377:25"><call pos:start="377:5" pos:end="377:25"><name pos:start="377:5" pos:end="377:11">av_free</name><argument_list pos:start="377:12" pos:end="377:25">(<argument pos:start="377:13" pos:end="377:24"><expr pos:start="377:13" pos:end="377:24"><name pos:start="377:13" pos:end="377:24">tmp_vlc_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:27"><expr pos:start="379:5" pos:end="379:26"><call pos:start="379:5" pos:end="379:26"><name pos:start="379:5" pos:end="379:11">av_free</name><argument_list pos:start="379:12" pos:end="379:26">(<argument pos:start="379:13" pos:end="379:25"><expr pos:start="379:13" pos:end="379:25"><name pos:start="379:13" pos:end="379:25">tmp_vlc_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="381:5" pos:end="381:13">return <expr pos:start="381:12" pos:end="381:12"><literal type="number" pos:start="381:12" pos:end="381:12">0</literal></expr>;</return>



<comment type="line" pos:start="385:1" pos:end="385:9">// Error:</comment>

<label pos:start="387:1" pos:end="387:6"><name pos:start="387:1" pos:end="387:5">error</name>:</label>

    <expr_stmt pos:start="389:5" pos:end="389:26"><expr pos:start="389:5" pos:end="389:25"><call pos:start="389:5" pos:end="389:25"><name pos:start="389:5" pos:end="389:11">av_free</name><argument_list pos:start="389:12" pos:end="389:25">(<argument pos:start="389:13" pos:end="389:24"><expr pos:start="389:13" pos:end="389:24"><name pos:start="389:13" pos:end="389:24">tmp_vlc_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:27"><expr pos:start="391:5" pos:end="391:26"><call pos:start="391:5" pos:end="391:26"><name pos:start="391:5" pos:end="391:11">av_free</name><argument_list pos:start="391:12" pos:end="391:26">(<argument pos:start="391:13" pos:end="391:25"><expr pos:start="391:13" pos:end="391:25"><name pos:start="391:13" pos:end="391:25">tmp_vlc_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="393:5" pos:end="393:13">return <expr pos:start="393:12" pos:end="393:12"><literal type="number" pos:start="393:12" pos:end="393:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
