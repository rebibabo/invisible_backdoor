<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5947.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:35">alloc_clusters_noref</name><parameter_list pos:start="1:36" pos:end="1:71">(<parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:56"><name pos:start="1:37" pos:end="1:52">BlockDriverState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">bs</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">int64_t</name></type> <name pos:start="1:67" pos:end="1:70">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:68">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:22">nb_clusters</name></decl>, <decl pos:start="7:25" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:32">refcount</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:44"><expr pos:start="11:5" pos:end="11:43"><name pos:start="11:5" pos:end="11:15">nb_clusters</name> <operator pos:start="11:17" pos:end="11:17">=</operator> <call pos:start="11:19" pos:end="11:43"><name pos:start="11:19" pos:end="11:34">size_to_clusters</name><argument_list pos:start="11:35" pos:end="11:43">(<argument pos:start="11:36" pos:end="11:36"><expr pos:start="11:36" pos:end="11:36"><name pos:start="11:36" pos:end="11:36">s</name></expr></argument>, <argument pos:start="11:39" pos:end="11:42"><expr pos:start="11:39" pos:end="11:42"><name pos:start="11:39" pos:end="11:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="13:1" pos:end="13:6"><name pos:start="13:1" pos:end="13:5">retry</name>:</label>

    <for pos:start="15:5" pos:end="36:0">for<control pos:start="15:8" pos:end="15:36">(<init pos:start="15:9" pos:end="15:14"><expr pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:9">i</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr>;</init> <condition pos:start="15:16" pos:end="15:31"><expr pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:16">i</name> <operator pos:start="15:18" pos:end="15:18">&lt;</operator> <name pos:start="15:20" pos:end="15:30">nb_clusters</name></expr>;</condition> <incr pos:start="15:33" pos:end="15:35"><expr pos:start="15:33" pos:end="15:35"><name pos:start="15:33" pos:end="15:33">i</name><operator pos:start="15:34" pos:end="15:35">++</operator></expr></incr>)</control> <block pos:start="15:38" pos:end="36:0">{<block_content pos:start="17:9" pos:end="31:9">

        <decl_stmt pos:start="17:9" pos:end="17:61"><decl pos:start="17:9" pos:end="17:60"><type pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">int64_t</name></type> <name pos:start="17:17" pos:end="17:34">next_cluster_index</name> <init pos:start="17:36" pos:end="17:60">= <expr pos:start="17:38" pos:end="17:60"><name pos:start="17:38" pos:end="17:58"><name pos:start="17:38" pos:end="17:38">s</name><operator pos:start="17:39" pos:end="17:40">-&gt;</operator><name pos:start="17:41" pos:end="17:58">free_cluster_index</name></name><operator pos:start="17:59" pos:end="17:60">++</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:56"><expr pos:start="19:9" pos:end="19:55"><name pos:start="19:9" pos:end="19:16">refcount</name> <operator pos:start="19:18" pos:end="19:18">=</operator> <call pos:start="19:20" pos:end="19:55"><name pos:start="19:20" pos:end="19:31">get_refcount</name><argument_list pos:start="19:32" pos:end="19:55">(<argument pos:start="19:33" pos:end="19:34"><expr pos:start="19:33" pos:end="19:34"><name pos:start="19:33" pos:end="19:34">bs</name></expr></argument>, <argument pos:start="19:37" pos:end="19:54"><expr pos:start="19:37" pos:end="19:54"><name pos:start="19:37" pos:end="19:54">next_cluster_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:25">(<expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:20">refcount</name> <operator pos:start="23:22" pos:end="23:22">&lt;</operator> <literal type="number" pos:start="23:24" pos:end="23:24">0</literal></expr>)</condition> <block pos:start="23:27" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:28">

            <return pos:start="25:13" pos:end="25:28">return <expr pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:27">refcount</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="27:11" pos:end="31:9">else if <condition pos:start="27:19" pos:end="27:33">(<expr pos:start="27:20" pos:end="27:32"><name pos:start="27:20" pos:end="27:27">refcount</name> <operator pos:start="27:29" pos:end="27:30">!=</operator> <literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr>)</condition> <block pos:start="27:35" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:23">

            <goto pos:start="29:13" pos:end="29:23">goto <name pos:start="29:18" pos:end="29:22">retry</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<cpp:ifdef pos:start="35:1" pos:end="35:19">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="37:5" pos:end="44:0"><expr pos:start="37:5" pos:end="41:69"><call pos:start="37:5" pos:end="41:69"><name pos:start="37:5" pos:end="37:11">fprintf</name><argument_list pos:start="37:12" pos:end="41:69">(<argument pos:start="37:13" pos:end="37:18"><expr pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:18">stderr</name></expr></argument>, <argument pos:start="37:21" pos:end="37:71"><expr pos:start="37:21" pos:end="37:71"><literal type="string" pos:start="37:21" pos:end="37:44">"alloc_clusters: size=%"</literal> <name pos:start="37:46" pos:end="37:51">PRId64</name> <literal type="string" pos:start="37:53" pos:end="37:59">" -&gt; %"</literal> <name pos:start="37:61" pos:end="37:66">PRId64</name> <literal type="string" pos:start="37:68" pos:end="37:71">"\n"</literal></expr></argument>,

            <argument pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:16"><name pos:start="39:13" pos:end="39:16">size</name></expr></argument>,

            <argument pos:start="41:13" pos:end="41:68"><expr pos:start="41:13" pos:end="41:68"><operator pos:start="41:13" pos:end="41:13">(</operator><name pos:start="41:14" pos:end="41:34"><name pos:start="41:14" pos:end="41:14">s</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:34">free_cluster_index</name></name> <operator pos:start="41:36" pos:end="41:36">-</operator> <name pos:start="41:38" pos:end="41:48">nb_clusters</name><operator pos:start="41:49" pos:end="41:49">)</operator> <operator pos:start="41:51" pos:end="41:52">&lt;&lt;</operator> <name pos:start="41:54" pos:end="41:68"><name pos:start="41:54" pos:end="41:54">s</name><operator pos:start="41:55" pos:end="41:56">-&gt;</operator><name pos:start="41:57" pos:end="41:68">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

    <return pos:start="45:5" pos:end="45:68">return <expr pos:start="45:12" pos:end="45:67"><operator pos:start="45:12" pos:end="45:12">(</operator><name pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:33">free_cluster_index</name></name> <operator pos:start="45:35" pos:end="45:35">-</operator> <name pos:start="45:37" pos:end="45:47">nb_clusters</name><operator pos:start="45:48" pos:end="45:48">)</operator> <operator pos:start="45:50" pos:end="45:51">&lt;&lt;</operator> <name pos:start="45:53" pos:end="45:67"><name pos:start="45:53" pos:end="45:53">s</name><operator pos:start="45:54" pos:end="45:55">-&gt;</operator><name pos:start="45:56" pos:end="45:67">cluster_bits</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
