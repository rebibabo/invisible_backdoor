<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19152.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:43">vfio_rtl8168_window_quirk_write</name><parameter_list pos:start="1:44" pos:end="3:73">(<parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:48">void</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">opaque</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:69"><decl pos:start="1:59" pos:end="1:69"><type pos:start="1:59" pos:end="1:69"><name pos:start="1:59" pos:end="1:64">hwaddr</name></type> <name pos:start="1:66" pos:end="1:69">addr</name></decl></parameter>,

                                            <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:52">uint64_t</name></type> <name pos:start="3:54" pos:end="3:57">data</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:72"><decl pos:start="3:60" pos:end="3:72"><type pos:start="3:60" pos:end="3:72"><name pos:start="3:60" pos:end="3:67">unsigned</name></type> <name pos:start="3:69" pos:end="3:72">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:47">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">VFIOQuirk</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">quirk</name> <init pos:start="7:22" pos:end="7:29">= <expr pos:start="7:24" pos:end="7:29"><name pos:start="7:24" pos:end="7:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">VFIOPCIDevice</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:23">vdev</name> <init pos:start="9:25" pos:end="9:37">= <expr pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:31">quirk</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:37">vdev</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="65:5">switch <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><name pos:start="13:13" pos:end="13:16">addr</name></expr>)</condition> <block pos:start="13:19" pos:end="65:5">{<block_content pos:start="15:5" pos:end="63:14">

    <case pos:start="15:5" pos:end="15:11">case <expr pos:start="15:10" pos:end="15:10"><literal type="number" pos:start="15:10" pos:end="15:10">4</literal></expr>:</case> <comment type="block" pos:start="15:13" pos:end="15:25">/* address */</comment>

        <if_stmt pos:start="17:9" pos:end="53:9"><if pos:start="17:9" pos:end="53:9">if <condition pos:start="17:12" pos:end="17:43">(<expr pos:start="17:13" pos:end="17:42"><operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:17">data</name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <literal type="number" pos:start="17:21" pos:end="17:30">0x7fff0000</literal><operator pos:start="17:31" pos:end="17:31">)</operator> <operator pos:start="17:33" pos:end="17:34">==</operator> <literal type="number" pos:start="17:36" pos:end="17:42">0x10000</literal></expr>)</condition> <block pos:start="17:45" pos:end="53:9">{<block_content pos:start="19:13" pos:end="51:19">

            <if_stmt pos:start="19:13" pos:end="41:13"><if pos:start="19:13" pos:end="41:13">if <condition pos:start="19:16" pos:end="21:59">(<expr pos:start="19:17" pos:end="21:58"><name pos:start="19:17" pos:end="19:20">data</name> <operator pos:start="19:22" pos:end="19:22">&amp;</operator> <literal type="number" pos:start="19:24" pos:end="19:34">0x80000000U</literal> <operator pos:start="19:36" pos:end="19:37">&amp;&amp;</operator>

                <name pos:start="21:17" pos:end="21:38"><name pos:start="21:17" pos:end="21:20">vdev</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:26">pdev</name><operator pos:start="21:27" pos:end="21:27">.</operator><name pos:start="21:28" pos:end="21:38">cap_present</name></name> <operator pos:start="21:40" pos:end="21:40">&amp;</operator> <name pos:start="21:42" pos:end="21:58">QEMU_PCI_CAP_MSIX</name></expr>)</condition> <block pos:start="21:61" pos:end="41:13">{<block_content pos:start="25:17" pos:end="39:75">



                <expr_stmt pos:start="25:17" pos:end="29:45"><expr pos:start="25:17" pos:end="29:44"><call pos:start="25:17" pos:end="29:44"><name pos:start="25:17" pos:end="25:59">trace_vfio_rtl8168_window_quirk_write_table</name><argument_list pos:start="25:60" pos:end="29:44">(

                        <argument pos:start="27:25" pos:end="27:55"><expr pos:start="27:25" pos:end="27:55"><call pos:start="27:25" pos:end="27:55"><name pos:start="27:25" pos:end="27:42">memory_region_name</name><argument_list pos:start="27:43" pos:end="27:55">(<argument pos:start="27:44" pos:end="27:54"><expr pos:start="27:44" pos:end="27:54"><operator pos:start="27:44" pos:end="27:44">&amp;</operator><name pos:start="27:45" pos:end="27:54"><name pos:start="27:45" pos:end="27:49">quirk</name><operator pos:start="27:50" pos:end="27:51">-&gt;</operator><name pos:start="27:52" pos:end="27:54">mem</name></name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="29:25" pos:end="29:43"><expr pos:start="29:25" pos:end="29:43"><name pos:start="29:25" pos:end="29:43"><name pos:start="29:25" pos:end="29:28">vdev</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:38">vbasedev</name><operator pos:start="29:39" pos:end="29:39">.</operator><name pos:start="29:40" pos:end="29:43">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="33:17" pos:end="39:75"><expr pos:start="33:17" pos:end="39:74"><call pos:start="33:17" pos:end="39:74"><name pos:start="33:17" pos:end="33:44">memory_region_dispatch_write</name><argument_list pos:start="33:45" pos:end="39:74">(<argument pos:start="33:46" pos:end="33:72"><expr pos:start="33:46" pos:end="33:72"><operator pos:start="33:46" pos:end="33:46">&amp;</operator><name pos:start="33:47" pos:end="33:72"><name pos:start="33:47" pos:end="33:50">vdev</name><operator pos:start="33:51" pos:end="33:52">-&gt;</operator><name pos:start="33:53" pos:end="33:56">pdev</name><operator pos:start="33:57" pos:end="33:57">.</operator><name pos:start="33:58" pos:end="33:72">msix_table_mmio</name></name></expr></argument>,

                                             <argument pos:start="35:46" pos:end="35:67"><expr pos:start="35:46" pos:end="35:67"><operator pos:start="35:46" pos:end="35:46">(</operator><name pos:start="35:47" pos:end="35:52">hwaddr</name><operator pos:start="35:53" pos:end="35:53">)</operator><operator pos:start="35:54" pos:end="35:54">(</operator><name pos:start="35:55" pos:end="35:58">data</name> <operator pos:start="35:60" pos:end="35:60">&amp;</operator> <literal type="number" pos:start="35:62" pos:end="35:66">0xfff</literal><operator pos:start="35:67" pos:end="35:67">)</operator></expr></argument>,

                                             <argument pos:start="37:46" pos:end="37:79"><expr pos:start="37:46" pos:end="37:79"><operator pos:start="37:46" pos:end="37:46">(</operator><name pos:start="37:47" pos:end="37:54">uint64_t</name><operator pos:start="37:55" pos:end="37:55">)</operator><name pos:start="37:56" pos:end="37:79"><name pos:start="37:56" pos:end="37:60">quirk</name><operator pos:start="37:61" pos:end="37:62">-&gt;</operator><name pos:start="37:63" pos:end="37:66">data</name><operator pos:start="37:67" pos:end="37:67">.</operator><name pos:start="37:68" pos:end="37:79">address_mask</name></name></expr></argument>,

                                             <argument pos:start="39:46" pos:end="39:49"><expr pos:start="39:46" pos:end="39:49"><name pos:start="39:46" pos:end="39:49">size</name></expr></argument>, <argument pos:start="39:52" pos:end="39:73"><expr pos:start="39:52" pos:end="39:73"><name pos:start="39:52" pos:end="39:73">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:17">quirk</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:23">data</name><operator pos:start="45:24" pos:end="45:24">.</operator><name pos:start="45:25" pos:end="45:29">flags</name></name> <operator pos:start="45:31" pos:end="45:31">=</operator> <literal type="number" pos:start="45:33" pos:end="45:33">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:45"><expr pos:start="47:13" pos:end="47:44"><name pos:start="47:13" pos:end="47:37"><name pos:start="47:13" pos:end="47:17">quirk</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:23">data</name><operator pos:start="47:24" pos:end="47:24">.</operator><name pos:start="47:25" pos:end="47:37">address_match</name></name> <operator pos:start="47:39" pos:end="47:39">=</operator> <name pos:start="47:41" pos:end="47:44">data</name></expr>;</expr_stmt>



            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:13">quirk</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:19">data</name><operator pos:start="55:20" pos:end="55:20">.</operator><name pos:start="55:21" pos:end="55:25">flags</name></name> <operator pos:start="55:27" pos:end="55:27">=</operator> <literal type="number" pos:start="55:29" pos:end="55:29">0</literal></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:11">case <expr pos:start="59:10" pos:end="59:10"><literal type="number" pos:start="59:10" pos:end="59:10">0</literal></expr>:</case> <comment type="block" pos:start="59:13" pos:end="59:22">/* data */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:40"><expr pos:start="61:9" pos:end="61:39"><name pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:13">quirk</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:19">data</name><operator pos:start="61:20" pos:end="61:20">.</operator><name pos:start="61:21" pos:end="61:32">address_mask</name></name> <operator pos:start="61:34" pos:end="61:34">=</operator> <name pos:start="61:36" pos:end="61:39">data</name></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="69:5" pos:end="73:33"><expr pos:start="69:5" pos:end="73:32"><call pos:start="69:5" pos:end="73:32"><name pos:start="69:5" pos:end="69:48">trace_vfio_rtl8168_window_quirk_write_direct</name><argument_list pos:start="69:49" pos:end="73:32">(

            <argument pos:start="71:13" pos:end="71:43"><expr pos:start="71:13" pos:end="71:43"><call pos:start="71:13" pos:end="71:43"><name pos:start="71:13" pos:end="71:30">memory_region_name</name><argument_list pos:start="71:31" pos:end="71:43">(<argument pos:start="71:32" pos:end="71:42"><expr pos:start="71:32" pos:end="71:42"><operator pos:start="71:32" pos:end="71:32">&amp;</operator><name pos:start="71:33" pos:end="71:42"><name pos:start="71:33" pos:end="71:37">quirk</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:42">mem</name></name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="73:13" pos:end="73:31"><expr pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:16">vdev</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:26">vbasedev</name><operator pos:start="73:27" pos:end="73:27">.</operator><name pos:start="73:28" pos:end="73:31">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="79:47"><expr pos:start="77:5" pos:end="79:46"><call pos:start="77:5" pos:end="79:46"><name pos:start="77:5" pos:end="77:21">vfio_region_write</name><argument_list pos:start="77:22" pos:end="79:46">(<argument pos:start="77:23" pos:end="77:57"><expr pos:start="77:23" pos:end="77:57"><operator pos:start="77:23" pos:end="77:23">&amp;</operator><name pos:start="77:24" pos:end="77:50"><name pos:start="77:24" pos:end="77:27">vdev</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:33">bars</name><index pos:start="77:34" pos:end="77:50">[<expr pos:start="77:35" pos:end="77:49"><name pos:start="77:35" pos:end="77:49"><name pos:start="77:35" pos:end="77:39">quirk</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:45">data</name><operator pos:start="77:46" pos:end="77:46">.</operator><name pos:start="77:47" pos:end="77:49">bar</name></name></expr>]</index></name><operator pos:start="77:51" pos:end="77:51">.</operator><name pos:start="77:52" pos:end="77:57">region</name></expr></argument>,

                      <argument pos:start="79:23" pos:end="79:33"><expr pos:start="79:23" pos:end="79:33"><name pos:start="79:23" pos:end="79:26">addr</name> <operator pos:start="79:28" pos:end="79:28">+</operator> <literal type="number" pos:start="79:30" pos:end="79:33">0x70</literal></expr></argument>, <argument pos:start="79:36" pos:end="79:39"><expr pos:start="79:36" pos:end="79:39"><name pos:start="79:36" pos:end="79:39">data</name></expr></argument>, <argument pos:start="79:42" pos:end="79:45"><expr pos:start="79:42" pos:end="79:45"><name pos:start="79:42" pos:end="79:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
