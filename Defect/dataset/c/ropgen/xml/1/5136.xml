<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5136.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:87"><name pos:start="1:1" pos:end="1:17">ff_vorbis_comment</name><argument_list pos:start="1:18" pos:end="1:87">(<argument pos:start="1:19" pos:end="1:38">AVFormatContext * as</argument>, <argument pos:start="1:41" pos:end="1:56">AVDictionary **m</argument>, <argument pos:start="1:59" pos:end="1:76">const uint8_t *buf</argument>, <argument pos:start="1:79" pos:end="1:86">int size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="182:1">{<block_content pos:start="5:5" pos:end="180:13">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">p</name> <init pos:start="5:22" pos:end="5:26">= <expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">end</name> <init pos:start="7:24" pos:end="7:35">= <expr pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:28">buf</name> <operator pos:start="7:30" pos:end="7:30">+</operator> <name pos:start="7:32" pos:end="7:35">size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:14">n</name></decl>, <decl pos:start="9:17" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:17" pos:end="9:17">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">s</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:18"><if pos:start="15:5" pos:end="17:18">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:12">size</name> <operator pos:start="15:14" pos:end="15:14">&lt;</operator> <literal type="number" pos:start="15:16" pos:end="15:16">8</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:18"><block_content pos:start="17:9" pos:end="17:18"> <comment type="block" pos:start="15:19" pos:end="15:76">/* must have vendor_length and user_comment_list_length */</comment>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:32"><expr pos:start="21:5" pos:end="21:31"><name pos:start="21:5" pos:end="21:5">s</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <call pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:27">bytestream_get_le32</name><argument_list pos:start="21:28" pos:end="21:31">(<argument pos:start="21:29" pos:end="21:30"><expr pos:start="21:29" pos:end="21:30"><operator pos:start="21:29" pos:end="21:29">&amp;</operator><name pos:start="21:30" pos:end="21:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="27:18"><if pos:start="25:5" pos:end="27:18">if <condition pos:start="25:8" pos:end="25:33">(<expr pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:11">end</name> <operator pos:start="25:13" pos:end="25:13">-</operator> <name pos:start="25:15" pos:end="25:15">p</name> <operator pos:start="25:17" pos:end="25:17">-</operator> <literal type="number" pos:start="25:19" pos:end="25:19">4</literal> <operator pos:start="25:21" pos:end="25:21">&lt;</operator> <name pos:start="25:23" pos:end="25:23">s</name> <operator pos:start="25:25" pos:end="25:26">||</operator> <name pos:start="25:28" pos:end="25:28">s</name> <operator pos:start="25:30" pos:end="25:30">&lt;</operator> <literal type="number" pos:start="25:32" pos:end="25:32">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:18"><block_content pos:start="27:9" pos:end="27:18">

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:11"><expr pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:5">p</name> <operator pos:start="31:7" pos:end="31:8">+=</operator> <name pos:start="31:10" pos:end="31:10">s</name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:5">n</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <call pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:27">bytestream_get_le32</name><argument_list pos:start="35:28" pos:end="35:31">(<argument pos:start="35:29" pos:end="35:30"><expr pos:start="35:29" pos:end="35:30"><operator pos:start="35:29" pos:end="35:29">&amp;</operator><name pos:start="35:30" pos:end="35:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="39:5" pos:end="160:5">while <condition pos:start="39:11" pos:end="39:33">(<expr pos:start="39:12" pos:end="39:32"><name pos:start="39:12" pos:end="39:14">end</name> <operator pos:start="39:16" pos:end="39:16">-</operator> <name pos:start="39:18" pos:end="39:18">p</name> <operator pos:start="39:20" pos:end="39:21">&gt;=</operator> <literal type="number" pos:start="39:23" pos:end="39:23">4</literal> <operator pos:start="39:25" pos:end="39:26">&amp;&amp;</operator> <name pos:start="39:28" pos:end="39:28">n</name> <operator pos:start="39:30" pos:end="39:30">&gt;</operator> <literal type="number" pos:start="39:32" pos:end="39:32">0</literal></expr>)</condition> <block pos:start="39:35" pos:end="160:5">{<block_content pos:start="41:9" pos:end="158:9">

        <decl_stmt pos:start="41:9" pos:end="41:26"><decl pos:start="41:9" pos:end="41:21"><type pos:start="41:9" pos:end="41:20"><specifier pos:start="41:9" pos:end="41:13">const</specifier> <name pos:start="41:15" pos:end="41:18">char</name> <modifier pos:start="41:20" pos:end="41:20">*</modifier></type><name pos:start="41:21" pos:end="41:21">t</name></decl>, <decl pos:start="41:24" pos:end="41:25"><type ref="prev" pos:start="41:9" pos:end="41:20"><modifier pos:start="41:24" pos:end="41:24">*</modifier></type><name pos:start="41:25" pos:end="41:25">v</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:19"><decl pos:start="43:9" pos:end="43:14"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:14">tl</name></decl>, <decl pos:start="43:17" pos:end="43:18"><type ref="prev" pos:start="43:9" pos:end="43:11"/><name pos:start="43:17" pos:end="43:18">vl</name></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:36"><expr pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:9">s</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:31">bytestream_get_le32</name><argument_list pos:start="47:32" pos:end="47:35">(<argument pos:start="47:33" pos:end="47:34"><expr pos:start="47:33" pos:end="47:34"><operator pos:start="47:33" pos:end="47:33">&amp;</operator><name pos:start="47:34" pos:end="47:34">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="51:9" pos:end="53:18"><if pos:start="51:9" pos:end="53:18">if <condition pos:start="51:12" pos:end="51:33">(<expr pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:15">end</name> <operator pos:start="51:17" pos:end="51:17">-</operator> <name pos:start="51:19" pos:end="51:19">p</name> <operator pos:start="51:21" pos:end="51:21">&lt;</operator> <name pos:start="51:23" pos:end="51:23">s</name> <operator pos:start="51:25" pos:end="51:26">||</operator> <name pos:start="51:28" pos:end="51:28">s</name> <operator pos:start="51:30" pos:end="51:30">&lt;</operator> <literal type="number" pos:start="51:32" pos:end="51:32">0</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:18"><block_content pos:start="53:13" pos:end="53:18">

            <break pos:start="53:13" pos:end="53:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:14"><expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:9">t</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <name pos:start="57:13" pos:end="57:13">p</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:15"><expr pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:9">p</name> <operator pos:start="59:11" pos:end="59:12">+=</operator> <name pos:start="59:14" pos:end="59:14">s</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:12"><expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:9">n</name><operator pos:start="61:10" pos:end="61:11">--</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:9">v</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:18">memchr</name><argument_list pos:start="65:19" pos:end="65:29">(<argument pos:start="65:20" pos:end="65:20"><expr pos:start="65:20" pos:end="65:20"><name pos:start="65:20" pos:end="65:20">t</name></expr></argument>, <argument pos:start="65:23" pos:end="65:25"><expr pos:start="65:23" pos:end="65:25"><literal type="char" pos:start="65:23" pos:end="65:25">'='</literal></expr></argument>, <argument pos:start="65:28" pos:end="65:28"><expr pos:start="65:28" pos:end="65:28"><name pos:start="65:28" pos:end="65:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:21"><if pos:start="67:9" pos:end="69:21">if <condition pos:start="67:12" pos:end="67:15">(<expr pos:start="67:13" pos:end="67:14"><operator pos:start="67:13" pos:end="67:13">!</operator><name pos:start="67:14" pos:end="67:14">v</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:21"><block_content pos:start="69:13" pos:end="69:21">

            <continue pos:start="69:13" pos:end="69:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:19"><expr pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:10">tl</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <name pos:start="73:14" pos:end="73:14">v</name> <operator pos:start="73:16" pos:end="73:16">-</operator> <name pos:start="73:18" pos:end="73:18">t</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:24"><expr pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:10">vl</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:14">s</name> <operator pos:start="75:16" pos:end="75:16">-</operator> <name pos:start="75:18" pos:end="75:19">tl</name> <operator pos:start="75:21" pos:end="75:21">-</operator> <literal type="number" pos:start="75:23" pos:end="75:23">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:12"><expr pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:9">v</name><operator pos:start="77:10" pos:end="77:11">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="158:9"><if pos:start="81:9" pos:end="158:9">if <condition pos:start="81:12" pos:end="81:21">(<expr pos:start="81:13" pos:end="81:20"><name pos:start="81:13" pos:end="81:14">tl</name> <operator pos:start="81:16" pos:end="81:17">&amp;&amp;</operator> <name pos:start="81:19" pos:end="81:20">vl</name></expr>)</condition> <block pos:start="81:23" pos:end="158:9">{<block_content pos:start="83:13" pos:end="156:60">

            <decl_stmt pos:start="83:13" pos:end="83:26"><decl pos:start="83:13" pos:end="83:20"><type pos:start="83:13" pos:end="83:18"><name pos:start="83:13" pos:end="83:16">char</name> <modifier pos:start="83:18" pos:end="83:18">*</modifier></type><name pos:start="83:19" pos:end="83:20">tt</name></decl>, <decl pos:start="83:23" pos:end="83:25"><type ref="prev" pos:start="83:13" pos:end="83:18"><modifier pos:start="83:23" pos:end="83:23">*</modifier></type><name pos:start="83:24" pos:end="83:25">ct</name></decl>;</decl_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:14">tt</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:34"><name pos:start="87:18" pos:end="87:26">av_malloc</name><argument_list pos:start="87:27" pos:end="87:34">(<argument pos:start="87:28" pos:end="87:33"><expr pos:start="87:28" pos:end="87:33"><name pos:start="87:28" pos:end="87:29">tl</name> <operator pos:start="87:31" pos:end="87:31">+</operator> <literal type="number" pos:start="87:33" pos:end="87:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:14">ct</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <call pos:start="89:18" pos:end="89:34"><name pos:start="89:18" pos:end="89:26">av_malloc</name><argument_list pos:start="89:27" pos:end="89:34">(<argument pos:start="89:28" pos:end="89:33"><expr pos:start="89:28" pos:end="89:33"><name pos:start="89:28" pos:end="89:29">vl</name> <operator pos:start="89:31" pos:end="89:31">+</operator> <literal type="number" pos:start="89:33" pos:end="89:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="100:13"><if pos:start="91:13" pos:end="100:13">if <condition pos:start="91:16" pos:end="91:27">(<expr pos:start="91:17" pos:end="91:26"><operator pos:start="91:17" pos:end="91:17">!</operator><name pos:start="91:18" pos:end="91:19">tt</name> <operator pos:start="91:21" pos:end="91:22">||</operator> <operator pos:start="91:24" pos:end="91:24">!</operator><name pos:start="91:25" pos:end="91:26">ct</name></expr>)</condition> <block pos:start="91:29" pos:end="100:13">{<block_content pos:start="93:17" pos:end="98:25">

                <expr_stmt pos:start="93:17" pos:end="93:30"><expr pos:start="93:17" pos:end="93:29"><call pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:24">av_freep</name><argument_list pos:start="93:25" pos:end="93:29">(<argument pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><operator pos:start="93:26" pos:end="93:26">&amp;</operator><name pos:start="93:27" pos:end="93:28">tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <expr_stmt pos:start="96:17" pos:end="96:97"><expr pos:start="96:17" pos:end="96:96"><call pos:start="96:17" pos:end="96:96"><name pos:start="96:17" pos:end="96:22">av_log</name><argument_list pos:start="96:23" pos:end="96:96">(<argument pos:start="96:24" pos:end="96:25"><expr pos:start="96:24" pos:end="96:25"><name pos:start="96:24" pos:end="96:25">as</name></expr></argument>, <argument pos:start="96:28" pos:end="96:41"><expr pos:start="96:28" pos:end="96:41"><name pos:start="96:28" pos:end="96:41">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="96:44" pos:end="96:95"><expr pos:start="96:44" pos:end="96:95"><literal type="string" pos:start="96:44" pos:end="96:95">"out-of-memory error. skipping VorbisComment tag.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="98:17" pos:end="98:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <for pos:start="104:13" pos:end="106:41">for <control pos:start="104:17" pos:end="104:36">(<init pos:start="104:18" pos:end="104:23"><expr pos:start="104:18" pos:end="104:22"><name pos:start="104:18" pos:end="104:18">j</name> <operator pos:start="104:20" pos:end="104:20">=</operator> <literal type="number" pos:start="104:22" pos:end="104:22">0</literal></expr>;</init> <condition pos:start="104:25" pos:end="104:31"><expr pos:start="104:25" pos:end="104:30"><name pos:start="104:25" pos:end="104:25">j</name> <operator pos:start="104:27" pos:end="104:27">&lt;</operator> <name pos:start="104:29" pos:end="104:30">tl</name></expr>;</condition> <incr pos:start="104:33" pos:end="104:35"><expr pos:start="104:33" pos:end="104:35"><name pos:start="104:33" pos:end="104:33">j</name><operator pos:start="104:34" pos:end="104:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="106:17" pos:end="106:41"><block_content pos:start="106:17" pos:end="106:41">

                <expr_stmt pos:start="106:17" pos:end="106:41"><expr pos:start="106:17" pos:end="106:40"><name pos:start="106:17" pos:end="106:21"><name pos:start="106:17" pos:end="106:18">tt</name><index pos:start="106:19" pos:end="106:21">[<expr pos:start="106:20" pos:end="106:20"><name pos:start="106:20" pos:end="106:20">j</name></expr>]</index></name> <operator pos:start="106:23" pos:end="106:23">=</operator> <call pos:start="106:25" pos:end="106:40"><name pos:start="106:25" pos:end="106:34">av_toupper</name><argument_list pos:start="106:35" pos:end="106:40">(<argument pos:start="106:36" pos:end="106:39"><expr pos:start="106:36" pos:end="106:39"><name pos:start="106:36" pos:end="106:39"><name pos:start="106:36" pos:end="106:36">t</name><index pos:start="106:37" pos:end="106:39">[<expr pos:start="106:38" pos:end="106:38"><name pos:start="106:38" pos:end="106:38">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="108:13" pos:end="108:23"><expr pos:start="108:13" pos:end="108:22"><name pos:start="108:13" pos:end="108:18"><name pos:start="108:13" pos:end="108:14">tt</name><index pos:start="108:15" pos:end="108:18">[<expr pos:start="108:16" pos:end="108:17"><name pos:start="108:16" pos:end="108:17">tl</name></expr>]</index></name> <operator pos:start="108:20" pos:end="108:20">=</operator> <literal type="number" pos:start="108:22" pos:end="108:22">0</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="112:13" pos:end="112:30"><expr pos:start="112:13" pos:end="112:29"><call pos:start="112:13" pos:end="112:29"><name pos:start="112:13" pos:end="112:18">memcpy</name><argument_list pos:start="112:19" pos:end="112:29">(<argument pos:start="112:20" pos:end="112:21"><expr pos:start="112:20" pos:end="112:21"><name pos:start="112:20" pos:end="112:21">ct</name></expr></argument>, <argument pos:start="112:24" pos:end="112:24"><expr pos:start="112:24" pos:end="112:24"><name pos:start="112:24" pos:end="112:24">v</name></expr></argument>, <argument pos:start="112:27" pos:end="112:28"><expr pos:start="112:27" pos:end="112:28"><name pos:start="112:27" pos:end="112:28">vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="114:13" pos:end="114:23"><expr pos:start="114:13" pos:end="114:22"><name pos:start="114:13" pos:end="114:18"><name pos:start="114:13" pos:end="114:14">ct</name><index pos:start="114:15" pos:end="114:18">[<expr pos:start="114:16" pos:end="114:17"><name pos:start="114:16" pos:end="114:17">vl</name></expr>]</index></name> <operator pos:start="114:20" pos:end="114:20">=</operator> <literal type="number" pos:start="114:22" pos:end="114:22">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="118:13" pos:end="156:60"><if pos:start="118:13" pos:end="150:13">if <condition pos:start="118:16" pos:end="118:54">(<expr pos:start="118:17" pos:end="118:53"><operator pos:start="118:17" pos:end="118:17">!</operator><call pos:start="118:18" pos:end="118:53"><name pos:start="118:18" pos:end="118:23">strcmp</name><argument_list pos:start="118:24" pos:end="118:53">(<argument pos:start="118:25" pos:end="118:26"><expr pos:start="118:25" pos:end="118:26"><name pos:start="118:25" pos:end="118:26">tt</name></expr></argument>, <argument pos:start="118:29" pos:end="118:52"><expr pos:start="118:29" pos:end="118:52"><literal type="string" pos:start="118:29" pos:end="118:52">"METADATA_BLOCK_PICTURE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="118:56" pos:end="150:13">{<block_content pos:start="120:17" pos:end="148:17">

                <decl_stmt pos:start="120:17" pos:end="120:24"><decl pos:start="120:17" pos:end="120:23"><type pos:start="120:17" pos:end="120:19"><name pos:start="120:17" pos:end="120:19">int</name></type> <name pos:start="120:21" pos:end="120:23">ret</name></decl>;</decl_stmt>

                <decl_stmt pos:start="122:17" pos:end="122:43"><decl pos:start="122:17" pos:end="122:42"><type pos:start="122:17" pos:end="122:22"><name pos:start="122:17" pos:end="122:20">char</name> <modifier pos:start="122:22" pos:end="122:22">*</modifier></type><name pos:start="122:23" pos:end="122:26">pict</name> <init pos:start="122:28" pos:end="122:42">= <expr pos:start="122:30" pos:end="122:42"><call pos:start="122:30" pos:end="122:42"><name pos:start="122:30" pos:end="122:38">av_malloc</name><argument_list pos:start="122:39" pos:end="122:42">(<argument pos:start="122:40" pos:end="122:41"><expr pos:start="122:40" pos:end="122:41"><name pos:start="122:40" pos:end="122:41">vl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="126:17" pos:end="133:17"><if pos:start="126:17" pos:end="133:17">if <condition pos:start="126:20" pos:end="126:26">(<expr pos:start="126:21" pos:end="126:25"><operator pos:start="126:21" pos:end="126:21">!</operator><name pos:start="126:22" pos:end="126:25">pict</name></expr>)</condition> <block pos:start="126:28" pos:end="133:17">{<block_content pos:start="128:21" pos:end="131:29">

                    <expr_stmt pos:start="128:21" pos:end="128:99"><expr pos:start="128:21" pos:end="128:98"><call pos:start="128:21" pos:end="128:98"><name pos:start="128:21" pos:end="128:26">av_log</name><argument_list pos:start="128:27" pos:end="128:98">(<argument pos:start="128:28" pos:end="128:29"><expr pos:start="128:28" pos:end="128:29"><name pos:start="128:28" pos:end="128:29">as</name></expr></argument>, <argument pos:start="128:32" pos:end="128:45"><expr pos:start="128:32" pos:end="128:45"><name pos:start="128:32" pos:end="128:45">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="128:48" pos:end="128:97"><expr pos:start="128:48" pos:end="128:97"><literal type="string" pos:start="128:48" pos:end="128:97">"out-of-memory error. Skipping cover art block.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                    <continue pos:start="131:21" pos:end="131:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="135:17" pos:end="137:63"><if pos:start="135:17" pos:end="137:63">if <condition pos:start="135:20" pos:end="135:63">(<expr pos:start="135:21" pos:end="135:62"><operator pos:start="135:21" pos:end="135:21">(</operator><name pos:start="135:22" pos:end="135:24">ret</name> <operator pos:start="135:26" pos:end="135:26">=</operator> <call pos:start="135:28" pos:end="135:57"><name pos:start="135:28" pos:end="135:43">av_base64_decode</name><argument_list pos:start="135:44" pos:end="135:57">(<argument pos:start="135:45" pos:end="135:48"><expr pos:start="135:45" pos:end="135:48"><name pos:start="135:45" pos:end="135:48">pict</name></expr></argument>, <argument pos:start="135:51" pos:end="135:52"><expr pos:start="135:51" pos:end="135:52"><name pos:start="135:51" pos:end="135:52">ct</name></expr></argument>, <argument pos:start="135:55" pos:end="135:56"><expr pos:start="135:55" pos:end="135:56"><name pos:start="135:55" pos:end="135:56">vl</name></expr></argument>)</argument_list></call><operator pos:start="135:58" pos:end="135:58">)</operator> <operator pos:start="135:60" pos:end="135:60">&gt;</operator> <literal type="number" pos:start="135:62" pos:end="135:62">0</literal></expr>)</condition><block type="pseudo" pos:start="137:21" pos:end="137:63"><block_content pos:start="137:21" pos:end="137:63">

                    <expr_stmt pos:start="137:21" pos:end="137:63"><expr pos:start="137:21" pos:end="137:62"><name pos:start="137:21" pos:end="137:23">ret</name> <operator pos:start="137:25" pos:end="137:25">=</operator> <call pos:start="137:27" pos:end="137:62"><name pos:start="137:27" pos:end="137:47">ff_flac_parse_picture</name><argument_list pos:start="137:48" pos:end="137:62">(<argument pos:start="137:49" pos:end="137:50"><expr pos:start="137:49" pos:end="137:50"><name pos:start="137:49" pos:end="137:50">as</name></expr></argument>, <argument pos:start="137:53" pos:end="137:56"><expr pos:start="137:53" pos:end="137:56"><name pos:start="137:53" pos:end="137:56">pict</name></expr></argument>, <argument pos:start="137:59" pos:end="137:61"><expr pos:start="137:59" pos:end="137:61"><name pos:start="137:59" pos:end="137:61">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:32"><expr pos:start="139:17" pos:end="139:31"><call pos:start="139:17" pos:end="139:31"><name pos:start="139:17" pos:end="139:24">av_freep</name><argument_list pos:start="139:25" pos:end="139:31">(<argument pos:start="139:26" pos:end="139:30"><expr pos:start="139:26" pos:end="139:30"><operator pos:start="139:26" pos:end="139:26">&amp;</operator><name pos:start="139:27" pos:end="139:30">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <if_stmt pos:start="142:17" pos:end="148:17"><if pos:start="142:17" pos:end="148:17">if <condition pos:start="142:20" pos:end="142:28">(<expr pos:start="142:21" pos:end="142:27"><name pos:start="142:21" pos:end="142:23">ret</name> <operator pos:start="142:25" pos:end="142:25">&lt;</operator> <literal type="number" pos:start="142:27" pos:end="142:27">0</literal></expr>)</condition> <block pos:start="142:30" pos:end="148:17">{<block_content pos:start="144:21" pos:end="146:29">

                    <expr_stmt pos:start="144:21" pos:end="144:85"><expr pos:start="144:21" pos:end="144:84"><call pos:start="144:21" pos:end="144:84"><name pos:start="144:21" pos:end="144:26">av_log</name><argument_list pos:start="144:27" pos:end="144:84">(<argument pos:start="144:28" pos:end="144:29"><expr pos:start="144:28" pos:end="144:29"><name pos:start="144:28" pos:end="144:29">as</name></expr></argument>, <argument pos:start="144:32" pos:end="144:45"><expr pos:start="144:32" pos:end="144:45"><name pos:start="144:32" pos:end="144:45">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="144:48" pos:end="144:83"><expr pos:start="144:48" pos:end="144:83"><literal type="string" pos:start="144:48" pos:end="144:83">"Failed to parse cover art block.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="146:21" pos:end="146:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="150:15" pos:end="156:60">else if <condition pos:start="150:23" pos:end="150:48">(<expr pos:start="150:24" pos:end="150:47"><operator pos:start="150:24" pos:end="150:24">!</operator><call pos:start="150:25" pos:end="150:47"><name pos:start="150:25" pos:end="150:35">ogm_chapter</name><argument_list pos:start="150:36" pos:end="150:47">(<argument pos:start="150:37" pos:end="150:38"><expr pos:start="150:37" pos:end="150:38"><name pos:start="150:37" pos:end="150:38">as</name></expr></argument>, <argument pos:start="150:41" pos:end="150:42"><expr pos:start="150:41" pos:end="150:42"><name pos:start="150:41" pos:end="150:42">tt</name></expr></argument>, <argument pos:start="150:45" pos:end="150:46"><expr pos:start="150:45" pos:end="150:46"><name pos:start="150:45" pos:end="150:46">ct</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="152:17" pos:end="156:60"><block_content pos:start="152:17" pos:end="156:60">

                <expr_stmt pos:start="152:17" pos:end="156:60"><expr pos:start="152:17" pos:end="156:59"><call pos:start="152:17" pos:end="156:59"><name pos:start="152:17" pos:end="152:27">av_dict_set</name><argument_list pos:start="152:28" pos:end="156:59">(<argument pos:start="152:29" pos:end="152:29"><expr pos:start="152:29" pos:end="152:29"><name pos:start="152:29" pos:end="152:29">m</name></expr></argument>, <argument pos:start="152:32" pos:end="152:33"><expr pos:start="152:32" pos:end="152:33"><name pos:start="152:32" pos:end="152:33">tt</name></expr></argument>, <argument pos:start="152:36" pos:end="152:37"><expr pos:start="152:36" pos:end="152:37"><name pos:start="152:36" pos:end="152:37">ct</name></expr></argument>,

                                   <argument pos:start="154:36" pos:end="156:58"><expr pos:start="154:36" pos:end="156:58"><name pos:start="154:36" pos:end="154:58">AV_DICT_DONT_STRDUP_KEY</name> <operator pos:start="154:60" pos:end="154:60">|</operator>

                                   <name pos:start="156:36" pos:end="156:58">AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="164:5" pos:end="166:79"><if pos:start="164:5" pos:end="166:79">if <condition pos:start="164:8" pos:end="164:17">(<expr pos:start="164:9" pos:end="164:16"><name pos:start="164:9" pos:end="164:9">p</name> <operator pos:start="164:11" pos:end="164:12">!=</operator> <name pos:start="164:14" pos:end="164:16">end</name></expr>)</condition><block type="pseudo" pos:start="166:9" pos:end="166:79"><block_content pos:start="166:9" pos:end="166:79">

        <expr_stmt pos:start="166:9" pos:end="166:79"><expr pos:start="166:9" pos:end="166:78"><call pos:start="166:9" pos:end="166:78"><name pos:start="166:9" pos:end="166:14">av_log</name><argument_list pos:start="166:15" pos:end="166:78">(<argument pos:start="166:16" pos:end="166:17"><expr pos:start="166:16" pos:end="166:17"><name pos:start="166:16" pos:end="166:17">as</name></expr></argument>, <argument pos:start="166:20" pos:end="166:30"><expr pos:start="166:20" pos:end="166:30"><name pos:start="166:20" pos:end="166:30">AV_LOG_INFO</name></expr></argument>, <argument pos:start="166:33" pos:end="166:70"><expr pos:start="166:33" pos:end="166:70"><literal type="string" pos:start="166:33" pos:end="166:70">"%ti bytes of comment header remain\n"</literal></expr></argument>, <argument pos:start="166:73" pos:end="166:77"><expr pos:start="166:73" pos:end="166:77"><name pos:start="166:73" pos:end="166:75">end</name><operator pos:start="166:76" pos:end="166:76">-</operator><name pos:start="166:77" pos:end="166:77">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="168:5" pos:end="172:71"><if pos:start="168:5" pos:end="172:71">if <condition pos:start="168:8" pos:end="168:14">(<expr pos:start="168:9" pos:end="168:13"><name pos:start="168:9" pos:end="168:9">n</name> <operator pos:start="168:11" pos:end="168:11">&gt;</operator> <literal type="number" pos:start="168:13" pos:end="168:13">0</literal></expr>)</condition><block type="pseudo" pos:start="170:9" pos:end="172:71"><block_content pos:start="170:9" pos:end="172:71">

        <expr_stmt pos:start="170:9" pos:end="172:71"><expr pos:start="170:9" pos:end="172:70"><call pos:start="170:9" pos:end="172:70"><name pos:start="170:9" pos:end="170:14">av_log</name><argument_list pos:start="170:15" pos:end="172:70">(<argument pos:start="170:16" pos:end="170:17"><expr pos:start="170:16" pos:end="170:17"><name pos:start="170:16" pos:end="170:17">as</name></expr></argument>, <argument pos:start="170:20" pos:end="170:30"><expr pos:start="170:20" pos:end="170:30"><name pos:start="170:20" pos:end="170:30">AV_LOG_INFO</name></expr></argument>,

               <argument pos:start="172:16" pos:end="172:66"><expr pos:start="172:16" pos:end="172:66"><literal type="string" pos:start="172:16" pos:end="172:66">"truncated comment header, %i comments not found\n"</literal></expr></argument>, <argument pos:start="172:69" pos:end="172:69"><expr pos:start="172:69" pos:end="172:69"><name pos:start="172:69" pos:end="172:69">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="176:5" pos:end="176:62"><expr pos:start="176:5" pos:end="176:61"><call pos:start="176:5" pos:end="176:61"><name pos:start="176:5" pos:end="176:20">ff_metadata_conv</name><argument_list pos:start="176:21" pos:end="176:61">(<argument pos:start="176:22" pos:end="176:22"><expr pos:start="176:22" pos:end="176:22"><name pos:start="176:22" pos:end="176:22">m</name></expr></argument>, <argument pos:start="176:25" pos:end="176:28"><expr pos:start="176:25" pos:end="176:28"><name pos:start="176:25" pos:end="176:28">NULL</name></expr></argument>, <argument pos:start="176:31" pos:end="176:60"><expr pos:start="176:31" pos:end="176:60"><name pos:start="176:31" pos:end="176:60">ff_vorbiscomment_metadata_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="180:5" pos:end="180:13">return <expr pos:start="180:12" pos:end="180:12"><literal type="number" pos:start="180:12" pos:end="180:12">0</literal></expr>;</return>

</block_content>}</block></unit>
