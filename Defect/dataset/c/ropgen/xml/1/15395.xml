<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15395.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">usbredir_handle_data</name><parameter_list pos:start="1:33" pos:end="1:63">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:42">USBDevice</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">udev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:59">USBPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">USBRedirDevice</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">dev</name> <init pos:start="5:25" pos:end="5:62">= <expr pos:start="5:27" pos:end="5:62"><call pos:start="5:27" pos:end="5:62"><name pos:start="5:27" pos:end="5:35">DO_UPCAST</name><argument_list pos:start="5:36" pos:end="5:62">(<argument pos:start="5:37" pos:end="5:50"><expr pos:start="5:37" pos:end="5:50"><name pos:start="5:37" pos:end="5:50">USBRedirDevice</name></expr></argument>, <argument pos:start="5:53" pos:end="5:55"><expr pos:start="5:53" pos:end="5:55"><name pos:start="5:53" pos:end="5:55">dev</name></expr></argument>, <argument pos:start="5:58" pos:end="5:61"><expr pos:start="5:58" pos:end="5:61"><name pos:start="5:58" pos:end="5:61">udev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:14">ep</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:19"><expr pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:6">ep</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:10">p</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:14">ep</name><operator pos:start="11:15" pos:end="11:16">-&gt;</operator><name pos:start="11:17" pos:end="11:18">nr</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:31">(<expr pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:9">p</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:14">pid</name></name> <operator pos:start="13:16" pos:end="13:17">==</operator> <name pos:start="13:19" pos:end="13:30">USB_TOKEN_IN</name></expr>)</condition> <block pos:start="13:33" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:25">

        <expr_stmt pos:start="15:9" pos:end="15:25"><expr pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:10">ep</name> <operator pos:start="15:12" pos:end="15:13">|=</operator> <name pos:start="15:15" pos:end="15:24">USB_DIR_IN</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="21:5" pos:end="75:5">switch <condition pos:start="21:12" pos:end="21:41">(<expr pos:start="21:13" pos:end="21:40"><name pos:start="21:13" pos:end="21:35"><name pos:start="21:13" pos:end="21:15">dev</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:25">endpoint</name><index pos:start="21:26" pos:end="21:35">[<expr pos:start="21:27" pos:end="21:34"><call pos:start="21:27" pos:end="21:34"><name pos:start="21:27" pos:end="21:30">EP2I</name><argument_list pos:start="21:31" pos:end="21:34">(<argument pos:start="21:32" pos:end="21:33"><expr pos:start="21:32" pos:end="21:33"><name pos:start="21:32" pos:end="21:33">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="21:36" pos:end="21:36">.</operator><name pos:start="21:37" pos:end="21:40">type</name></expr>)</condition> <block pos:start="21:43" pos:end="75:5">{<block_content pos:start="23:5" pos:end="73:32">

    <case pos:start="23:5" pos:end="23:35">case <expr pos:start="23:10" pos:end="23:34"><name pos:start="23:10" pos:end="23:34">USB_ENDPOINT_XFER_CONTROL</name></expr>:</case>

        <expr_stmt pos:start="25:9" pos:end="25:74"><expr pos:start="25:9" pos:end="25:73"><call pos:start="25:9" pos:end="25:73"><name pos:start="25:9" pos:end="25:13">ERROR</name><argument_list pos:start="25:14" pos:end="25:73">(<argument pos:start="25:15" pos:end="25:68"><expr pos:start="25:15" pos:end="25:68"><literal type="string" pos:start="25:15" pos:end="25:68">"handle_data called for control transfer on ep %02X\n"</literal></expr></argument>, <argument pos:start="25:71" pos:end="25:72"><expr pos:start="25:71" pos:end="25:72"><name pos:start="25:71" pos:end="25:72">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:9">p</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:17">status</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:31">USB_RET_NAK</name></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:32">case <expr pos:start="31:10" pos:end="31:31"><name pos:start="31:10" pos:end="31:31">USB_ENDPOINT_XFER_ISOC</name></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:45"><expr pos:start="33:9" pos:end="33:44"><call pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:32">usbredir_handle_iso_data</name><argument_list pos:start="33:33" pos:end="33:44">(<argument pos:start="33:34" pos:end="33:36"><expr pos:start="33:34" pos:end="33:36"><name pos:start="33:34" pos:end="33:36">dev</name></expr></argument>, <argument pos:start="33:39" pos:end="33:39"><expr pos:start="33:39" pos:end="33:39"><name pos:start="33:39" pos:end="33:39">p</name></expr></argument>, <argument pos:start="33:42" pos:end="33:43"><expr pos:start="33:42" pos:end="33:43"><name pos:start="33:42" pos:end="33:43">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:32">case <expr pos:start="37:10" pos:end="37:31"><name pos:start="37:10" pos:end="37:31">USB_ENDPOINT_XFER_BULK</name></expr>:</case>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="41:32">(<expr pos:start="39:13" pos:end="41:31"><name pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:13">p</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:20">state</name></name> <operator pos:start="39:22" pos:end="39:23">==</operator> <name pos:start="39:25" pos:end="39:40">USB_PACKET_SETUP</name> <operator pos:start="39:42" pos:end="39:43">&amp;&amp;</operator> <name pos:start="39:45" pos:end="39:50"><name pos:start="39:45" pos:end="39:45">p</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:50">pid</name></name> <operator pos:start="39:52" pos:end="39:53">==</operator> <name pos:start="39:55" pos:end="39:66">USB_TOKEN_IN</name> <operator pos:start="39:68" pos:end="39:69">&amp;&amp;</operator>

                <name pos:start="41:17" pos:end="41:31"><name pos:start="41:17" pos:end="41:17">p</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:21">ep</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:31">pipeline</name></name></expr>)</condition> <block pos:start="41:34" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:18">

            <expr_stmt pos:start="43:13" pos:end="43:45"><expr pos:start="43:13" pos:end="43:44"><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:13">p</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:21">status</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <name pos:start="43:25" pos:end="43:44">USB_RET_ADD_TO_QUEUE</name></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><call pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:33">usbredir_handle_bulk_data</name><argument_list pos:start="49:34" pos:end="49:45">(<argument pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">dev</name></expr></argument>, <argument pos:start="49:40" pos:end="49:40"><expr pos:start="49:40" pos:end="49:40"><name pos:start="49:40" pos:end="49:40">p</name></expr></argument>, <argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><name pos:start="49:43" pos:end="49:44">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:31">case <expr pos:start="53:10" pos:end="53:30"><name pos:start="53:10" pos:end="53:30">USB_ENDPOINT_XFER_INT</name></expr>:</case>

        <if_stmt pos:start="55:9" pos:end="63:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:28">(<expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:14">ep</name> <operator pos:start="55:16" pos:end="55:16">&amp;</operator> <name pos:start="55:18" pos:end="55:27">USB_DIR_IN</name></expr>)</condition> <block pos:start="55:30" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:58">

            <expr_stmt pos:start="57:13" pos:end="57:58"><expr pos:start="57:13" pos:end="57:57"><call pos:start="57:13" pos:end="57:57"><name pos:start="57:13" pos:end="57:45">usbredir_handle_interrupt_in_data</name><argument_list pos:start="57:46" pos:end="57:57">(<argument pos:start="57:47" pos:end="57:49"><expr pos:start="57:47" pos:end="57:49"><name pos:start="57:47" pos:end="57:49">dev</name></expr></argument>, <argument pos:start="57:52" pos:end="57:52"><expr pos:start="57:52" pos:end="57:52"><name pos:start="57:52" pos:end="57:52">p</name></expr></argument>, <argument pos:start="57:55" pos:end="57:56"><expr pos:start="57:55" pos:end="57:56"><name pos:start="57:55" pos:end="57:56">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="63:9">else <block pos:start="59:16" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:59">

            <expr_stmt pos:start="61:13" pos:end="61:59"><expr pos:start="61:13" pos:end="61:58"><call pos:start="61:13" pos:end="61:58"><name pos:start="61:13" pos:end="61:46">usbredir_handle_interrupt_out_data</name><argument_list pos:start="61:47" pos:end="61:58">(<argument pos:start="61:48" pos:end="61:50"><expr pos:start="61:48" pos:end="61:50"><name pos:start="61:48" pos:end="61:50">dev</name></expr></argument>, <argument pos:start="61:53" pos:end="61:53"><expr pos:start="61:53" pos:end="61:53"><name pos:start="61:53" pos:end="61:53">p</name></expr></argument>, <argument pos:start="61:56" pos:end="61:57"><expr pos:start="61:56" pos:end="61:57"><name pos:start="61:56" pos:end="61:57">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <default pos:start="67:5" pos:end="67:12">default:</default>

        <expr_stmt pos:start="69:9" pos:end="71:44"><expr pos:start="69:9" pos:end="71:43"><call pos:start="69:9" pos:end="71:43"><name pos:start="69:9" pos:end="69:13">ERROR</name><argument_list pos:start="69:14" pos:end="71:43">(<argument pos:start="69:15" pos:end="69:57"><expr pos:start="69:15" pos:end="69:57"><literal type="string" pos:start="69:15" pos:end="69:57">"handle_data ep %02X has unknown type %d\n"</literal></expr></argument>, <argument pos:start="69:60" pos:end="69:61"><expr pos:start="69:60" pos:end="69:61"><name pos:start="69:60" pos:end="69:61">ep</name></expr></argument>,

              <argument pos:start="71:15" pos:end="71:42"><expr pos:start="71:15" pos:end="71:42"><name pos:start="71:15" pos:end="71:37"><name pos:start="71:15" pos:end="71:17">dev</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:27">endpoint</name><index pos:start="71:28" pos:end="71:37">[<expr pos:start="71:29" pos:end="71:36"><call pos:start="71:29" pos:end="71:36"><name pos:start="71:29" pos:end="71:32">EP2I</name><argument_list pos:start="71:33" pos:end="71:36">(<argument pos:start="71:34" pos:end="71:35"><expr pos:start="71:34" pos:end="71:35"><name pos:start="71:34" pos:end="71:35">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="71:38" pos:end="71:38">.</operator><name pos:start="71:39" pos:end="71:42">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:32"><expr pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:9">p</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:17">status</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:31">USB_RET_NAK</name></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
