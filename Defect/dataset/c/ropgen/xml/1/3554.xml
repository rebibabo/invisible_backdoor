<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3554.c" pos:tabs="8"><function pos:start="1:1" pos:end="7077:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:30">disas_insn</name><parameter_list pos:start="1:31" pos:end="1:70">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:43">DisasContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:69"><decl pos:start="1:49" pos:end="1:69"><type pos:start="1:49" pos:end="1:69"><name pos:start="1:49" pos:end="1:60">target_ulong</name></type> <name pos:start="1:62" pos:end="1:69">pc_start</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="7077:1">{<block_content pos:start="5:5" pos:end="7075:17">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">b</name></decl>, <decl pos:start="5:12" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:19">prefixes</name></decl>, <decl pos:start="5:22" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:26">aflag</name></decl>, <decl pos:start="5:29" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:33">dflag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">shift</name></decl>, <decl pos:start="7:16" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:17">ot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">modrm</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:18">reg</name></decl>, <decl pos:start="9:21" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:22">rm</name></decl>, <decl pos:start="9:25" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:27">mod</name></decl>, <decl pos:start="9:30" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:37">reg_addr</name></decl>, <decl pos:start="9:40" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:41">op</name></decl>, <decl pos:start="9:44" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:44" pos:end="9:48">opreg</name></decl>, <decl pos:start="9:51" pos:end="9:61"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:51" pos:end="9:61">offset_addr</name></decl>, <decl pos:start="9:64" pos:end="9:66"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:64" pos:end="9:66">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:25">next_eip</name></decl>, <decl pos:start="11:28" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:28" pos:end="11:31">tval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">rex_w</name></decl>, <decl pos:start="13:16" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:16" pos:end="13:20">rex_r</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:43"><if pos:start="17:5" pos:end="19:43">if <condition pos:start="17:8" pos:end="17:43">(<expr pos:start="17:9" pos:end="17:42"><call pos:start="17:9" pos:end="17:42"><name pos:start="17:9" pos:end="17:16">unlikely</name><argument_list pos:start="17:17" pos:end="17:42">(<argument pos:start="17:18" pos:end="17:41"><expr pos:start="17:18" pos:end="17:41"><name pos:start="17:18" pos:end="17:25">loglevel</name> <operator pos:start="17:27" pos:end="17:27">&amp;</operator> <name pos:start="17:29" pos:end="17:41">CPU_LOG_TB_OP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:43"><block_content pos:start="19:9" pos:end="19:43">

        <expr_stmt pos:start="19:9" pos:end="19:43"><expr pos:start="19:9" pos:end="19:42"><call pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:32">tcg_gen_debug_insn_start</name><argument_list pos:start="19:33" pos:end="19:42">(<argument pos:start="19:34" pos:end="19:41"><expr pos:start="19:34" pos:end="19:41"><name pos:start="19:34" pos:end="19:41">pc_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:21"><expr pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:9"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:9">pc</name></name> <operator pos:start="21:11" pos:end="21:11">=</operator> <name pos:start="21:13" pos:end="21:20">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:17"><expr pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">prefixes</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:9">aflag</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <name pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:9">dflag</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:15">override</name></name> <operator pos:start="29:17" pos:end="29:17">=</operator> <operator pos:start="29:19" pos:end="29:19">-</operator><literal type="number" pos:start="29:20" pos:end="29:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:15"><expr pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:9">rex_w</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <operator pos:start="31:13" pos:end="31:13">-</operator><literal type="number" pos:start="31:14" pos:end="31:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="36:0"><expr pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:9">rex_r</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <literal type="number" pos:start="33:13" pos:end="33:13">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="35:1" pos:end="35:20">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:20">TARGET_X86_64</name></cpp:ifdef>

    <expr_stmt pos:start="37:5" pos:end="37:17"><expr pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:12">rex_x</name></name> <operator pos:start="37:14" pos:end="37:14">=</operator> <literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:12">rex_b</name></name> <operator pos:start="39:14" pos:end="39:14">=</operator> <literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="44:0"><expr pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:16">x86_64_hregs</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <literal type="number" pos:start="41:20" pos:end="41:20">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="45:5" pos:end="45:22"><expr pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:17">rip_offset</name></name> <operator pos:start="45:19" pos:end="45:19">=</operator> <literal type="number" pos:start="45:21" pos:end="45:21">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="45:24" pos:end="45:52">/* for relative ip address */</comment>

 <label pos:start="47:2" pos:end="47:11"><name pos:start="47:2" pos:end="47:10">next_byte</name>:</label>

    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:5">b</name> <operator pos:start="49:7" pos:end="49:7">=</operator> <call pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:17">ldub_code</name><argument_list pos:start="49:18" pos:end="49:24">(<argument pos:start="49:19" pos:end="49:23"><expr pos:start="49:19" pos:end="49:23"><name pos:start="49:19" pos:end="49:23"><name pos:start="49:19" pos:end="49:19">s</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:23">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="56:0"><expr pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:9"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:9">pc</name></name><operator pos:start="51:10" pos:end="51:11">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="53:5" pos:end="53:24">/* check prefixes */</comment>

<cpp:ifdef pos:start="55:1" pos:end="55:20">#<cpp:directive pos:start="55:2" pos:end="55:6">ifdef</cpp:directive> <name pos:start="55:8" pos:end="55:20">TARGET_X86_64</name></cpp:ifdef>

    <if_stmt pos:start="57:5" pos:end="247:5"><if pos:start="57:5" pos:end="163:5">if <condition pos:start="57:8" pos:end="57:18">(<expr pos:start="57:9" pos:end="57:17"><call pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:14">CODE64</name><argument_list pos:start="57:15" pos:end="57:17">(<argument pos:start="57:16" pos:end="57:16"><expr pos:start="57:16" pos:end="57:16"><name pos:start="57:16" pos:end="57:16">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:20" pos:end="163:5">{<block_content pos:start="59:9" pos:end="161:22">

        <switch pos:start="59:9" pos:end="143:9">switch <condition pos:start="59:16" pos:end="59:18">(<expr pos:start="59:17" pos:end="59:17"><name pos:start="59:17" pos:end="59:17">b</name></expr>)</condition> <block pos:start="59:20" pos:end="143:9">{<block_content pos:start="61:9" pos:end="141:27">

        <case pos:start="61:9" pos:end="61:18">case <expr pos:start="61:14" pos:end="61:17"><literal type="number" pos:start="61:14" pos:end="61:17">0xf3</literal></expr>:</case>

            <expr_stmt pos:start="63:13" pos:end="63:36"><expr pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:20">prefixes</name> <operator pos:start="63:22" pos:end="63:23">|=</operator> <name pos:start="63:25" pos:end="63:35">PREFIX_REPZ</name></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:27">goto <name pos:start="65:18" pos:end="65:26">next_byte</name>;</goto>

        <case pos:start="67:9" pos:end="67:18">case <expr pos:start="67:14" pos:end="67:17"><literal type="number" pos:start="67:14" pos:end="67:17">0xf2</literal></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:37"><expr pos:start="69:13" pos:end="69:36"><name pos:start="69:13" pos:end="69:20">prefixes</name> <operator pos:start="69:22" pos:end="69:23">|=</operator> <name pos:start="69:25" pos:end="69:36">PREFIX_REPNZ</name></expr>;</expr_stmt>

            <goto pos:start="71:13" pos:end="71:27">goto <name pos:start="71:18" pos:end="71:26">next_byte</name>;</goto>

        <case pos:start="73:9" pos:end="73:18">case <expr pos:start="73:14" pos:end="73:17"><literal type="number" pos:start="73:14" pos:end="73:17">0xf0</literal></expr>:</case>

            <expr_stmt pos:start="75:13" pos:end="75:36"><expr pos:start="75:13" pos:end="75:35"><name pos:start="75:13" pos:end="75:20">prefixes</name> <operator pos:start="75:22" pos:end="75:23">|=</operator> <name pos:start="75:25" pos:end="75:35">PREFIX_LOCK</name></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:27">goto <name pos:start="77:18" pos:end="77:26">next_byte</name>;</goto>

        <case pos:start="79:9" pos:end="79:18">case <expr pos:start="79:14" pos:end="79:17"><literal type="number" pos:start="79:14" pos:end="79:17">0x2e</literal></expr>:</case>

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:23"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:23">override</name></name> <operator pos:start="81:25" pos:end="81:25">=</operator> <name pos:start="81:27" pos:end="81:30">R_CS</name></expr>;</expr_stmt>

            <goto pos:start="83:13" pos:end="83:27">goto <name pos:start="83:18" pos:end="83:26">next_byte</name>;</goto>

        <case pos:start="85:9" pos:end="85:18">case <expr pos:start="85:14" pos:end="85:17"><literal type="number" pos:start="85:14" pos:end="85:17">0x36</literal></expr>:</case>

            <expr_stmt pos:start="87:13" pos:end="87:31"><expr pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:23">override</name></name> <operator pos:start="87:25" pos:end="87:25">=</operator> <name pos:start="87:27" pos:end="87:30">R_SS</name></expr>;</expr_stmt>

            <goto pos:start="89:13" pos:end="89:27">goto <name pos:start="89:18" pos:end="89:26">next_byte</name>;</goto>

        <case pos:start="91:9" pos:end="91:18">case <expr pos:start="91:14" pos:end="91:17"><literal type="number" pos:start="91:14" pos:end="91:17">0x3e</literal></expr>:</case>

            <expr_stmt pos:start="93:13" pos:end="93:31"><expr pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:23">override</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:30">R_DS</name></expr>;</expr_stmt>

            <goto pos:start="95:13" pos:end="95:27">goto <name pos:start="95:18" pos:end="95:26">next_byte</name>;</goto>

        <case pos:start="97:9" pos:end="97:18">case <expr pos:start="97:14" pos:end="97:17"><literal type="number" pos:start="97:14" pos:end="97:17">0x26</literal></expr>:</case>

            <expr_stmt pos:start="99:13" pos:end="99:31"><expr pos:start="99:13" pos:end="99:30"><name pos:start="99:13" pos:end="99:23"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:23">override</name></name> <operator pos:start="99:25" pos:end="99:25">=</operator> <name pos:start="99:27" pos:end="99:30">R_ES</name></expr>;</expr_stmt>

            <goto pos:start="101:13" pos:end="101:27">goto <name pos:start="101:18" pos:end="101:26">next_byte</name>;</goto>

        <case pos:start="103:9" pos:end="103:18">case <expr pos:start="103:14" pos:end="103:17"><literal type="number" pos:start="103:14" pos:end="103:17">0x64</literal></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:31"><expr pos:start="105:13" pos:end="105:30"><name pos:start="105:13" pos:end="105:23"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:23">override</name></name> <operator pos:start="105:25" pos:end="105:25">=</operator> <name pos:start="105:27" pos:end="105:30">R_FS</name></expr>;</expr_stmt>

            <goto pos:start="107:13" pos:end="107:27">goto <name pos:start="107:18" pos:end="107:26">next_byte</name>;</goto>

        <case pos:start="109:9" pos:end="109:18">case <expr pos:start="109:14" pos:end="109:17"><literal type="number" pos:start="109:14" pos:end="109:17">0x65</literal></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="111:31"><expr pos:start="111:13" pos:end="111:30"><name pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:23">override</name></name> <operator pos:start="111:25" pos:end="111:25">=</operator> <name pos:start="111:27" pos:end="111:30">R_GS</name></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:27">goto <name pos:start="113:18" pos:end="113:26">next_byte</name>;</goto>

        <case pos:start="115:9" pos:end="115:18">case <expr pos:start="115:14" pos:end="115:17"><literal type="number" pos:start="115:14" pos:end="115:17">0x66</literal></expr>:</case>

            <expr_stmt pos:start="117:13" pos:end="117:36"><expr pos:start="117:13" pos:end="117:35"><name pos:start="117:13" pos:end="117:20">prefixes</name> <operator pos:start="117:22" pos:end="117:23">|=</operator> <name pos:start="117:25" pos:end="117:35">PREFIX_DATA</name></expr>;</expr_stmt>

            <goto pos:start="119:13" pos:end="119:27">goto <name pos:start="119:18" pos:end="119:26">next_byte</name>;</goto>

        <case pos:start="121:9" pos:end="121:18">case <expr pos:start="121:14" pos:end="121:17"><literal type="number" pos:start="121:14" pos:end="121:17">0x67</literal></expr>:</case>

            <expr_stmt pos:start="123:13" pos:end="123:35"><expr pos:start="123:13" pos:end="123:34"><name pos:start="123:13" pos:end="123:20">prefixes</name> <operator pos:start="123:22" pos:end="123:23">|=</operator> <name pos:start="123:25" pos:end="123:34">PREFIX_ADR</name></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:27">goto <name pos:start="125:18" pos:end="125:26">next_byte</name>;</goto>

        <case pos:start="127:9" pos:end="127:27">case <expr pos:start="127:14" pos:end="127:26"><literal type="number" pos:start="127:14" pos:end="127:17">0x40</literal> <operator pos:start="127:19" pos:end="127:21">...</operator> <literal type="number" pos:start="127:23" pos:end="127:26">0x4f</literal></expr>:</case>

            <comment type="block" pos:start="129:13" pos:end="129:28">/* REX prefix */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:33"><expr pos:start="131:13" pos:end="131:32"><name pos:start="131:13" pos:end="131:17">rex_w</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <operator pos:start="131:21" pos:end="131:21">(</operator><name pos:start="131:22" pos:end="131:22">b</name> <operator pos:start="131:24" pos:end="131:25">&gt;&gt;</operator> <literal type="number" pos:start="131:27" pos:end="131:27">3</literal><operator pos:start="131:28" pos:end="131:28">)</operator> <operator pos:start="131:30" pos:end="131:30">&amp;</operator> <literal type="number" pos:start="131:32" pos:end="131:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:35"><expr pos:start="133:13" pos:end="133:34"><name pos:start="133:13" pos:end="133:17">rex_r</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <operator pos:start="133:21" pos:end="133:21">(</operator><name pos:start="133:22" pos:end="133:22">b</name> <operator pos:start="133:24" pos:end="133:24">&amp;</operator> <literal type="number" pos:start="133:26" pos:end="133:28">0x4</literal><operator pos:start="133:29" pos:end="133:29">)</operator> <operator pos:start="133:31" pos:end="133:32">&lt;&lt;</operator> <literal type="number" pos:start="133:34" pos:end="133:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:38"><expr pos:start="135:13" pos:end="135:37"><name pos:start="135:13" pos:end="135:20"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:20">rex_x</name></name> <operator pos:start="135:22" pos:end="135:22">=</operator> <operator pos:start="135:24" pos:end="135:24">(</operator><name pos:start="135:25" pos:end="135:25">b</name> <operator pos:start="135:27" pos:end="135:27">&amp;</operator> <literal type="number" pos:start="135:29" pos:end="135:31">0x2</literal><operator pos:start="135:32" pos:end="135:32">)</operator> <operator pos:start="135:34" pos:end="135:35">&lt;&lt;</operator> <literal type="number" pos:start="135:37" pos:end="135:37">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:38"><expr pos:start="137:13" pos:end="137:37"><call pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:17">REX_B</name><argument_list pos:start="137:18" pos:end="137:20">(<argument pos:start="137:19" pos:end="137:19"><expr pos:start="137:19" pos:end="137:19"><name pos:start="137:19" pos:end="137:19">s</name></expr></argument>)</argument_list></call> <operator pos:start="137:22" pos:end="137:22">=</operator> <operator pos:start="137:24" pos:end="137:24">(</operator><name pos:start="137:25" pos:end="137:25">b</name> <operator pos:start="137:27" pos:end="137:27">&amp;</operator> <literal type="number" pos:start="137:29" pos:end="137:31">0x1</literal><operator pos:start="137:32" pos:end="137:32">)</operator> <operator pos:start="137:34" pos:end="137:35">&lt;&lt;</operator> <literal type="number" pos:start="137:37" pos:end="137:37">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:29"><expr pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:24">x86_64_hregs</name> <operator pos:start="139:26" pos:end="139:26">=</operator> <literal type="number" pos:start="139:28" pos:end="139:28">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="139:31" pos:end="139:75">/* select uniform byte register addressing */</comment>

            <goto pos:start="141:13" pos:end="141:27">goto <name pos:start="141:18" pos:end="141:26">next_byte</name>;</goto>

        </block_content>}</block></switch>

        <if_stmt pos:start="145:9" pos:end="157:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:23">(<expr pos:start="145:13" pos:end="145:22"><name pos:start="145:13" pos:end="145:17">rex_w</name> <operator pos:start="145:19" pos:end="145:20">==</operator> <literal type="number" pos:start="145:22" pos:end="145:22">1</literal></expr>)</condition> <block pos:start="145:25" pos:end="151:9">{<block_content pos:start="149:13" pos:end="149:22">

            <comment type="block" pos:start="147:13" pos:end="147:49">/* 0x66 is ignored if rex.w is set */</comment>

            <expr_stmt pos:start="149:13" pos:end="149:22"><expr pos:start="149:13" pos:end="149:21"><name pos:start="149:13" pos:end="149:17">dflag</name> <operator pos:start="149:19" pos:end="149:19">=</operator> <literal type="number" pos:start="149:21" pos:end="149:21">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="151:11" pos:end="157:9">else <block pos:start="151:16" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:27">

            <if_stmt pos:start="153:13" pos:end="155:27"><if pos:start="153:13" pos:end="155:27">if <condition pos:start="153:16" pos:end="153:39">(<expr pos:start="153:17" pos:end="153:38"><name pos:start="153:17" pos:end="153:24">prefixes</name> <operator pos:start="153:26" pos:end="153:26">&amp;</operator> <name pos:start="153:28" pos:end="153:38">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:27"><block_content pos:start="155:17" pos:end="155:27">

                <expr_stmt pos:start="155:17" pos:end="155:27"><expr pos:start="155:17" pos:end="155:26"><name pos:start="155:17" pos:end="155:21">dflag</name> <operator pos:start="155:23" pos:end="155:24">^=</operator> <literal type="number" pos:start="155:26" pos:end="155:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="159:9" pos:end="161:22"><if pos:start="159:9" pos:end="161:22">if <condition pos:start="159:12" pos:end="159:37">(<expr pos:start="159:13" pos:end="159:36"><operator pos:start="159:13" pos:end="159:13">!</operator><operator pos:start="159:14" pos:end="159:14">(</operator><name pos:start="159:15" pos:end="159:22">prefixes</name> <operator pos:start="159:24" pos:end="159:24">&amp;</operator> <name pos:start="159:26" pos:end="159:35">PREFIX_ADR</name><operator pos:start="159:36" pos:end="159:36">)</operator></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:22"><block_content pos:start="161:13" pos:end="161:22">

            <expr_stmt pos:start="161:13" pos:end="161:22"><expr pos:start="161:13" pos:end="161:21"><name pos:start="161:13" pos:end="161:17">aflag</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <literal type="number" pos:start="161:21" pos:end="161:21">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="247:5">else

<cpp:endif pos:start="165:1" pos:end="165:6">#<cpp:directive pos:start="165:2" pos:end="165:6">endif</cpp:directive></cpp:endif>

    <block pos:start="167:5" pos:end="247:5">{<block_content pos:start="169:9" pos:end="245:23">

        <switch pos:start="169:9" pos:end="237:9">switch <condition pos:start="169:16" pos:end="169:18">(<expr pos:start="169:17" pos:end="169:17"><name pos:start="169:17" pos:end="169:17">b</name></expr>)</condition> <block pos:start="169:20" pos:end="237:9">{<block_content pos:start="171:9" pos:end="235:27">

        <case pos:start="171:9" pos:end="171:18">case <expr pos:start="171:14" pos:end="171:17"><literal type="number" pos:start="171:14" pos:end="171:17">0xf3</literal></expr>:</case>

            <expr_stmt pos:start="173:13" pos:end="173:36"><expr pos:start="173:13" pos:end="173:35"><name pos:start="173:13" pos:end="173:20">prefixes</name> <operator pos:start="173:22" pos:end="173:23">|=</operator> <name pos:start="173:25" pos:end="173:35">PREFIX_REPZ</name></expr>;</expr_stmt>

            <goto pos:start="175:13" pos:end="175:27">goto <name pos:start="175:18" pos:end="175:26">next_byte</name>;</goto>

        <case pos:start="177:9" pos:end="177:18">case <expr pos:start="177:14" pos:end="177:17"><literal type="number" pos:start="177:14" pos:end="177:17">0xf2</literal></expr>:</case>

            <expr_stmt pos:start="179:13" pos:end="179:37"><expr pos:start="179:13" pos:end="179:36"><name pos:start="179:13" pos:end="179:20">prefixes</name> <operator pos:start="179:22" pos:end="179:23">|=</operator> <name pos:start="179:25" pos:end="179:36">PREFIX_REPNZ</name></expr>;</expr_stmt>

            <goto pos:start="181:13" pos:end="181:27">goto <name pos:start="181:18" pos:end="181:26">next_byte</name>;</goto>

        <case pos:start="183:9" pos:end="183:18">case <expr pos:start="183:14" pos:end="183:17"><literal type="number" pos:start="183:14" pos:end="183:17">0xf0</literal></expr>:</case>

            <expr_stmt pos:start="185:13" pos:end="185:36"><expr pos:start="185:13" pos:end="185:35"><name pos:start="185:13" pos:end="185:20">prefixes</name> <operator pos:start="185:22" pos:end="185:23">|=</operator> <name pos:start="185:25" pos:end="185:35">PREFIX_LOCK</name></expr>;</expr_stmt>

            <goto pos:start="187:13" pos:end="187:27">goto <name pos:start="187:18" pos:end="187:26">next_byte</name>;</goto>

        <case pos:start="189:9" pos:end="189:18">case <expr pos:start="189:14" pos:end="189:17"><literal type="number" pos:start="189:14" pos:end="189:17">0x2e</literal></expr>:</case>

            <expr_stmt pos:start="191:13" pos:end="191:31"><expr pos:start="191:13" pos:end="191:30"><name pos:start="191:13" pos:end="191:23"><name pos:start="191:13" pos:end="191:13">s</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:23">override</name></name> <operator pos:start="191:25" pos:end="191:25">=</operator> <name pos:start="191:27" pos:end="191:30">R_CS</name></expr>;</expr_stmt>

            <goto pos:start="193:13" pos:end="193:27">goto <name pos:start="193:18" pos:end="193:26">next_byte</name>;</goto>

        <case pos:start="195:9" pos:end="195:18">case <expr pos:start="195:14" pos:end="195:17"><literal type="number" pos:start="195:14" pos:end="195:17">0x36</literal></expr>:</case>

            <expr_stmt pos:start="197:13" pos:end="197:31"><expr pos:start="197:13" pos:end="197:30"><name pos:start="197:13" pos:end="197:23"><name pos:start="197:13" pos:end="197:13">s</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:23">override</name></name> <operator pos:start="197:25" pos:end="197:25">=</operator> <name pos:start="197:27" pos:end="197:30">R_SS</name></expr>;</expr_stmt>

            <goto pos:start="199:13" pos:end="199:27">goto <name pos:start="199:18" pos:end="199:26">next_byte</name>;</goto>

        <case pos:start="201:9" pos:end="201:18">case <expr pos:start="201:14" pos:end="201:17"><literal type="number" pos:start="201:14" pos:end="201:17">0x3e</literal></expr>:</case>

            <expr_stmt pos:start="203:13" pos:end="203:31"><expr pos:start="203:13" pos:end="203:30"><name pos:start="203:13" pos:end="203:23"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:23">override</name></name> <operator pos:start="203:25" pos:end="203:25">=</operator> <name pos:start="203:27" pos:end="203:30">R_DS</name></expr>;</expr_stmt>

            <goto pos:start="205:13" pos:end="205:27">goto <name pos:start="205:18" pos:end="205:26">next_byte</name>;</goto>

        <case pos:start="207:9" pos:end="207:18">case <expr pos:start="207:14" pos:end="207:17"><literal type="number" pos:start="207:14" pos:end="207:17">0x26</literal></expr>:</case>

            <expr_stmt pos:start="209:13" pos:end="209:31"><expr pos:start="209:13" pos:end="209:30"><name pos:start="209:13" pos:end="209:23"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:23">override</name></name> <operator pos:start="209:25" pos:end="209:25">=</operator> <name pos:start="209:27" pos:end="209:30">R_ES</name></expr>;</expr_stmt>

            <goto pos:start="211:13" pos:end="211:27">goto <name pos:start="211:18" pos:end="211:26">next_byte</name>;</goto>

        <case pos:start="213:9" pos:end="213:18">case <expr pos:start="213:14" pos:end="213:17"><literal type="number" pos:start="213:14" pos:end="213:17">0x64</literal></expr>:</case>

            <expr_stmt pos:start="215:13" pos:end="215:31"><expr pos:start="215:13" pos:end="215:30"><name pos:start="215:13" pos:end="215:23"><name pos:start="215:13" pos:end="215:13">s</name><operator pos:start="215:14" pos:end="215:15">-&gt;</operator><name pos:start="215:16" pos:end="215:23">override</name></name> <operator pos:start="215:25" pos:end="215:25">=</operator> <name pos:start="215:27" pos:end="215:30">R_FS</name></expr>;</expr_stmt>

            <goto pos:start="217:13" pos:end="217:27">goto <name pos:start="217:18" pos:end="217:26">next_byte</name>;</goto>

        <case pos:start="219:9" pos:end="219:18">case <expr pos:start="219:14" pos:end="219:17"><literal type="number" pos:start="219:14" pos:end="219:17">0x65</literal></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:31"><expr pos:start="221:13" pos:end="221:30"><name pos:start="221:13" pos:end="221:23"><name pos:start="221:13" pos:end="221:13">s</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:23">override</name></name> <operator pos:start="221:25" pos:end="221:25">=</operator> <name pos:start="221:27" pos:end="221:30">R_GS</name></expr>;</expr_stmt>

            <goto pos:start="223:13" pos:end="223:27">goto <name pos:start="223:18" pos:end="223:26">next_byte</name>;</goto>

        <case pos:start="225:9" pos:end="225:18">case <expr pos:start="225:14" pos:end="225:17"><literal type="number" pos:start="225:14" pos:end="225:17">0x66</literal></expr>:</case>

            <expr_stmt pos:start="227:13" pos:end="227:36"><expr pos:start="227:13" pos:end="227:35"><name pos:start="227:13" pos:end="227:20">prefixes</name> <operator pos:start="227:22" pos:end="227:23">|=</operator> <name pos:start="227:25" pos:end="227:35">PREFIX_DATA</name></expr>;</expr_stmt>

            <goto pos:start="229:13" pos:end="229:27">goto <name pos:start="229:18" pos:end="229:26">next_byte</name>;</goto>

        <case pos:start="231:9" pos:end="231:18">case <expr pos:start="231:14" pos:end="231:17"><literal type="number" pos:start="231:14" pos:end="231:17">0x67</literal></expr>:</case>

            <expr_stmt pos:start="233:13" pos:end="233:35"><expr pos:start="233:13" pos:end="233:34"><name pos:start="233:13" pos:end="233:20">prefixes</name> <operator pos:start="233:22" pos:end="233:23">|=</operator> <name pos:start="233:25" pos:end="233:34">PREFIX_ADR</name></expr>;</expr_stmt>

            <goto pos:start="235:13" pos:end="235:27">goto <name pos:start="235:18" pos:end="235:26">next_byte</name>;</goto>

        </block_content>}</block></switch>

        <if_stmt pos:start="239:9" pos:end="241:23"><if pos:start="239:9" pos:end="241:23">if <condition pos:start="239:12" pos:end="239:35">(<expr pos:start="239:13" pos:end="239:34"><name pos:start="239:13" pos:end="239:20">prefixes</name> <operator pos:start="239:22" pos:end="239:22">&amp;</operator> <name pos:start="239:24" pos:end="239:34">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="241:13" pos:end="241:23"><block_content pos:start="241:13" pos:end="241:23">

            <expr_stmt pos:start="241:13" pos:end="241:23"><expr pos:start="241:13" pos:end="241:22"><name pos:start="241:13" pos:end="241:17">dflag</name> <operator pos:start="241:19" pos:end="241:20">^=</operator> <literal type="number" pos:start="241:22" pos:end="241:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="243:9" pos:end="245:23"><if pos:start="243:9" pos:end="245:23">if <condition pos:start="243:12" pos:end="243:34">(<expr pos:start="243:13" pos:end="243:33"><name pos:start="243:13" pos:end="243:20">prefixes</name> <operator pos:start="243:22" pos:end="243:22">&amp;</operator> <name pos:start="243:24" pos:end="243:33">PREFIX_ADR</name></expr>)</condition><block type="pseudo" pos:start="245:13" pos:end="245:23"><block_content pos:start="245:13" pos:end="245:23">

            <expr_stmt pos:start="245:13" pos:end="245:23"><expr pos:start="245:13" pos:end="245:22"><name pos:start="245:13" pos:end="245:17">aflag</name> <operator pos:start="245:19" pos:end="245:20">^=</operator> <literal type="number" pos:start="245:22" pos:end="245:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:25"><expr pos:start="251:5" pos:end="251:24"><name pos:start="251:5" pos:end="251:13"><name pos:start="251:5" pos:end="251:5">s</name><operator pos:start="251:6" pos:end="251:7">-&gt;</operator><name pos:start="251:8" pos:end="251:13">prefix</name></name> <operator pos:start="251:15" pos:end="251:15">=</operator> <name pos:start="251:17" pos:end="251:24">prefixes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:21"><expr pos:start="253:5" pos:end="253:20"><name pos:start="253:5" pos:end="253:12"><name pos:start="253:5" pos:end="253:5">s</name><operator pos:start="253:6" pos:end="253:7">-&gt;</operator><name pos:start="253:8" pos:end="253:12">aflag</name></name> <operator pos:start="253:14" pos:end="253:14">=</operator> <name pos:start="253:16" pos:end="253:20">aflag</name></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:21"><expr pos:start="255:5" pos:end="255:20"><name pos:start="255:5" pos:end="255:12"><name pos:start="255:5" pos:end="255:5">s</name><operator pos:start="255:6" pos:end="255:7">-&gt;</operator><name pos:start="255:8" pos:end="255:12">dflag</name></name> <operator pos:start="255:14" pos:end="255:14">=</operator> <name pos:start="255:16" pos:end="255:20">dflag</name></expr>;</expr_stmt>



    <comment type="block" pos:start="259:5" pos:end="259:25">/* lock generation */</comment>

    <if_stmt pos:start="261:5" pos:end="263:26"><if pos:start="261:5" pos:end="263:26">if <condition pos:start="261:8" pos:end="261:31">(<expr pos:start="261:9" pos:end="261:30"><name pos:start="261:9" pos:end="261:16">prefixes</name> <operator pos:start="261:18" pos:end="261:18">&amp;</operator> <name pos:start="261:20" pos:end="261:30">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="263:9" pos:end="263:26"><block_content pos:start="263:9" pos:end="263:26">

        <expr_stmt pos:start="263:9" pos:end="263:26"><expr pos:start="263:9" pos:end="263:25"><call pos:start="263:9" pos:end="263:25"><name pos:start="263:9" pos:end="263:23">gen_helper_lock</name><argument_list pos:start="263:24" pos:end="263:25">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="267:5" pos:end="267:27">/* now check op code */</comment>

 <label pos:start="269:2" pos:end="269:10"><name pos:start="269:2" pos:end="269:9">reswitch</name>:</label>

    <switch pos:start="271:5" pos:end="7055:5">switch<condition pos:start="271:11" pos:end="271:13">(<expr pos:start="271:12" pos:end="271:12"><name pos:start="271:12" pos:end="271:12">b</name></expr>)</condition> <block pos:start="271:15" pos:end="7055:5">{<block_content pos:start="273:5" pos:end="7053:24">

    <case pos:start="273:5" pos:end="273:14">case <expr pos:start="273:10" pos:end="273:13"><literal type="number" pos:start="273:10" pos:end="273:13">0x0f</literal></expr>:</case>

        <comment type="block" format="doxygen" pos:start="275:9" pos:end="275:36">/**************************/</comment>

        <comment type="block" pos:start="277:9" pos:end="277:30">/* extended op code */</comment>

        <expr_stmt pos:start="279:9" pos:end="279:39"><expr pos:start="279:9" pos:end="279:38"><name pos:start="279:9" pos:end="279:9">b</name> <operator pos:start="279:11" pos:end="279:11">=</operator> <call pos:start="279:13" pos:end="279:30"><name pos:start="279:13" pos:end="279:21">ldub_code</name><argument_list pos:start="279:22" pos:end="279:30">(<argument pos:start="279:23" pos:end="279:29"><expr pos:start="279:23" pos:end="279:29"><name pos:start="279:23" pos:end="279:27"><name pos:start="279:23" pos:end="279:23">s</name><operator pos:start="279:24" pos:end="279:25">-&gt;</operator><name pos:start="279:26" pos:end="279:27">pc</name></name><operator pos:start="279:28" pos:end="279:29">++</operator></expr></argument>)</argument_list></call> <operator pos:start="279:32" pos:end="279:32">|</operator> <literal type="number" pos:start="279:34" pos:end="279:38">0x100</literal></expr>;</expr_stmt>

        <goto pos:start="281:9" pos:end="281:22">goto <name pos:start="281:14" pos:end="281:21">reswitch</name>;</goto>



        <comment type="block" format="doxygen" pos:start="285:9" pos:end="285:36">/**************************/</comment>

        <comment type="block" pos:start="287:9" pos:end="287:27">/* arith &amp; logic */</comment>

    <case pos:start="289:5" pos:end="289:23">case <expr pos:start="289:10" pos:end="289:22"><literal type="number" pos:start="289:10" pos:end="289:13">0x00</literal> <operator pos:start="289:15" pos:end="289:17">...</operator> <literal type="number" pos:start="289:19" pos:end="289:22">0x05</literal></expr>:</case>

    <case pos:start="291:5" pos:end="291:23">case <expr pos:start="291:10" pos:end="291:22"><literal type="number" pos:start="291:10" pos:end="291:13">0x08</literal> <operator pos:start="291:15" pos:end="291:17">...</operator> <literal type="number" pos:start="291:19" pos:end="291:22">0x0d</literal></expr>:</case>

    <case pos:start="293:5" pos:end="293:23">case <expr pos:start="293:10" pos:end="293:22"><literal type="number" pos:start="293:10" pos:end="293:13">0x10</literal> <operator pos:start="293:15" pos:end="293:17">...</operator> <literal type="number" pos:start="293:19" pos:end="293:22">0x15</literal></expr>:</case>

    <case pos:start="295:5" pos:end="295:23">case <expr pos:start="295:10" pos:end="295:22"><literal type="number" pos:start="295:10" pos:end="295:13">0x18</literal> <operator pos:start="295:15" pos:end="295:17">...</operator> <literal type="number" pos:start="295:19" pos:end="295:22">0x1d</literal></expr>:</case>

    <case pos:start="297:5" pos:end="297:23">case <expr pos:start="297:10" pos:end="297:22"><literal type="number" pos:start="297:10" pos:end="297:13">0x20</literal> <operator pos:start="297:15" pos:end="297:17">...</operator> <literal type="number" pos:start="297:19" pos:end="297:22">0x25</literal></expr>:</case>

    <case pos:start="299:5" pos:end="299:23">case <expr pos:start="299:10" pos:end="299:22"><literal type="number" pos:start="299:10" pos:end="299:13">0x28</literal> <operator pos:start="299:15" pos:end="299:17">...</operator> <literal type="number" pos:start="299:19" pos:end="299:22">0x2d</literal></expr>:</case>

    <case pos:start="301:5" pos:end="301:23">case <expr pos:start="301:10" pos:end="301:22"><literal type="number" pos:start="301:10" pos:end="301:13">0x30</literal> <operator pos:start="301:15" pos:end="301:17">...</operator> <literal type="number" pos:start="301:19" pos:end="301:22">0x35</literal></expr>:</case>

    <case pos:start="303:5" pos:end="303:23">case <expr pos:start="303:10" pos:end="303:22"><literal type="number" pos:start="303:10" pos:end="303:13">0x38</literal> <operator pos:start="303:15" pos:end="303:17">...</operator> <literal type="number" pos:start="303:19" pos:end="303:22">0x3d</literal></expr>:</case>

        <block pos:start="305:9" pos:end="413:9">{<block_content pos:start="307:13" pos:end="411:13">

            <decl_stmt pos:start="307:13" pos:end="307:27"><decl pos:start="307:13" pos:end="307:18"><type pos:start="307:13" pos:end="307:15"><name pos:start="307:13" pos:end="307:15">int</name></type> <name pos:start="307:17" pos:end="307:18">op</name></decl>, <decl pos:start="307:21" pos:end="307:21"><type ref="prev" pos:start="307:13" pos:end="307:15"/><name pos:start="307:21" pos:end="307:21">f</name></decl>, <decl pos:start="307:24" pos:end="307:26"><type ref="prev" pos:start="307:13" pos:end="307:15"/><name pos:start="307:24" pos:end="307:26">val</name></decl>;</decl_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:30"><expr pos:start="309:13" pos:end="309:29"><name pos:start="309:13" pos:end="309:14">op</name> <operator pos:start="309:16" pos:end="309:16">=</operator> <operator pos:start="309:18" pos:end="309:18">(</operator><name pos:start="309:19" pos:end="309:19">b</name> <operator pos:start="309:21" pos:end="309:22">&gt;&gt;</operator> <literal type="number" pos:start="309:24" pos:end="309:24">3</literal><operator pos:start="309:25" pos:end="309:25">)</operator> <operator pos:start="309:27" pos:end="309:27">&amp;</operator> <literal type="number" pos:start="309:29" pos:end="309:29">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:29"><expr pos:start="311:13" pos:end="311:28"><name pos:start="311:13" pos:end="311:13">f</name> <operator pos:start="311:15" pos:end="311:15">=</operator> <operator pos:start="311:17" pos:end="311:17">(</operator><name pos:start="311:18" pos:end="311:18">b</name> <operator pos:start="311:20" pos:end="311:21">&gt;&gt;</operator> <literal type="number" pos:start="311:23" pos:end="311:23">1</literal><operator pos:start="311:24" pos:end="311:24">)</operator> <operator pos:start="311:26" pos:end="311:26">&amp;</operator> <literal type="number" pos:start="311:28" pos:end="311:28">3</literal></expr>;</expr_stmt>



            <if_stmt pos:start="315:13" pos:end="321:37"><if pos:start="315:13" pos:end="317:29">if <condition pos:start="315:16" pos:end="315:29">(<expr pos:start="315:17" pos:end="315:28"><operator pos:start="315:17" pos:end="315:17">(</operator><name pos:start="315:18" pos:end="315:18">b</name> <operator pos:start="315:20" pos:end="315:20">&amp;</operator> <literal type="number" pos:start="315:22" pos:end="315:22">1</literal><operator pos:start="315:23" pos:end="315:23">)</operator> <operator pos:start="315:25" pos:end="315:26">==</operator> <literal type="number" pos:start="315:28" pos:end="315:28">0</literal></expr>)</condition><block type="pseudo" pos:start="317:17" pos:end="317:29"><block_content pos:start="317:17" pos:end="317:29">

                <expr_stmt pos:start="317:17" pos:end="317:29"><expr pos:start="317:17" pos:end="317:28"><name pos:start="317:17" pos:end="317:18">ot</name> <operator pos:start="317:20" pos:end="317:20">=</operator> <name pos:start="317:22" pos:end="317:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="319:13" pos:end="321:37">else<block type="pseudo" pos:start="321:17" pos:end="321:37"><block_content pos:start="321:17" pos:end="321:37">

                <expr_stmt pos:start="321:17" pos:end="321:37"><expr pos:start="321:17" pos:end="321:36"><name pos:start="321:17" pos:end="321:18">ot</name> <operator pos:start="321:20" pos:end="321:20">=</operator> <name pos:start="321:22" pos:end="321:26">dflag</name> <operator pos:start="321:28" pos:end="321:28">+</operator> <name pos:start="321:30" pos:end="321:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <switch pos:start="325:13" pos:end="411:13">switch<condition pos:start="325:19" pos:end="325:21">(<expr pos:start="325:20" pos:end="325:20"><name pos:start="325:20" pos:end="325:20">f</name></expr>)</condition> <block pos:start="325:23" pos:end="411:13">{<block_content pos:start="327:13" pos:end="409:22">

            <case pos:start="327:13" pos:end="327:19">case <expr pos:start="327:18" pos:end="327:18"><literal type="number" pos:start="327:18" pos:end="327:18">0</literal></expr>:</case> <comment type="block" pos:start="327:21" pos:end="327:35">/* OP Ev, Gv */</comment>

                <expr_stmt pos:start="329:17" pos:end="329:43"><expr pos:start="329:17" pos:end="329:42"><name pos:start="329:17" pos:end="329:21">modrm</name> <operator pos:start="329:23" pos:end="329:23">=</operator> <call pos:start="329:25" pos:end="329:42"><name pos:start="329:25" pos:end="329:33">ldub_code</name><argument_list pos:start="329:34" pos:end="329:42">(<argument pos:start="329:35" pos:end="329:41"><expr pos:start="329:35" pos:end="329:41"><name pos:start="329:35" pos:end="329:39"><name pos:start="329:35" pos:end="329:35">s</name><operator pos:start="329:36" pos:end="329:37">-&gt;</operator><name pos:start="329:38" pos:end="329:39">pc</name></name><operator pos:start="329:40" pos:end="329:41">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:49"><expr pos:start="331:17" pos:end="331:48"><name pos:start="331:17" pos:end="331:19">reg</name> <operator pos:start="331:21" pos:end="331:21">=</operator> <operator pos:start="331:23" pos:end="331:23">(</operator><operator pos:start="331:24" pos:end="331:24">(</operator><name pos:start="331:25" pos:end="331:29">modrm</name> <operator pos:start="331:31" pos:end="331:32">&gt;&gt;</operator> <literal type="number" pos:start="331:34" pos:end="331:34">3</literal><operator pos:start="331:35" pos:end="331:35">)</operator> <operator pos:start="331:37" pos:end="331:37">&amp;</operator> <literal type="number" pos:start="331:39" pos:end="331:39">7</literal><operator pos:start="331:40" pos:end="331:40">)</operator> <operator pos:start="331:42" pos:end="331:42">|</operator> <name pos:start="331:44" pos:end="331:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="333:17" pos:end="333:39"><expr pos:start="333:17" pos:end="333:38"><name pos:start="333:17" pos:end="333:19">mod</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <operator pos:start="333:23" pos:end="333:23">(</operator><name pos:start="333:24" pos:end="333:28">modrm</name> <operator pos:start="333:30" pos:end="333:31">&gt;&gt;</operator> <literal type="number" pos:start="333:33" pos:end="333:33">6</literal><operator pos:start="333:34" pos:end="333:34">)</operator> <operator pos:start="333:36" pos:end="333:36">&amp;</operator> <literal type="number" pos:start="333:38" pos:end="333:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:44"><expr pos:start="335:17" pos:end="335:43"><name pos:start="335:17" pos:end="335:18">rm</name> <operator pos:start="335:20" pos:end="335:20">=</operator> <operator pos:start="335:22" pos:end="335:22">(</operator><name pos:start="335:23" pos:end="335:27">modrm</name> <operator pos:start="335:29" pos:end="335:29">&amp;</operator> <literal type="number" pos:start="335:31" pos:end="335:31">7</literal><operator pos:start="335:32" pos:end="335:32">)</operator> <operator pos:start="335:34" pos:end="335:34">|</operator> <call pos:start="335:36" pos:end="335:43"><name pos:start="335:36" pos:end="335:40">REX_B</name><argument_list pos:start="335:41" pos:end="335:43">(<argument pos:start="335:42" pos:end="335:42"><expr pos:start="335:42" pos:end="335:42"><name pos:start="335:42" pos:end="335:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="337:17" pos:end="363:17"><if pos:start="337:17" pos:end="343:17">if <condition pos:start="337:20" pos:end="337:29">(<expr pos:start="337:21" pos:end="337:28"><name pos:start="337:21" pos:end="337:23">mod</name> <operator pos:start="337:25" pos:end="337:26">!=</operator> <literal type="number" pos:start="337:28" pos:end="337:28">3</literal></expr>)</condition> <block pos:start="337:31" pos:end="343:17">{<block_content pos:start="339:21" pos:end="341:36">

                    <expr_stmt pos:start="339:21" pos:end="339:69"><expr pos:start="339:21" pos:end="339:68"><call pos:start="339:21" pos:end="339:68"><name pos:start="339:21" pos:end="339:33">gen_lea_modrm</name><argument_list pos:start="339:34" pos:end="339:68">(<argument pos:start="339:35" pos:end="339:35"><expr pos:start="339:35" pos:end="339:35"><name pos:start="339:35" pos:end="339:35">s</name></expr></argument>, <argument pos:start="339:38" pos:end="339:42"><expr pos:start="339:38" pos:end="339:42"><name pos:start="339:38" pos:end="339:42">modrm</name></expr></argument>, <argument pos:start="339:45" pos:end="339:53"><expr pos:start="339:45" pos:end="339:53"><operator pos:start="339:45" pos:end="339:45">&amp;</operator><name pos:start="339:46" pos:end="339:53">reg_addr</name></expr></argument>, <argument pos:start="339:56" pos:end="339:67"><expr pos:start="339:56" pos:end="339:67"><operator pos:start="339:56" pos:end="339:56">&amp;</operator><name pos:start="339:57" pos:end="339:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="341:21" pos:end="341:36"><expr pos:start="341:21" pos:end="341:35"><name pos:start="341:21" pos:end="341:25">opreg</name> <operator pos:start="341:27" pos:end="341:27">=</operator> <name pos:start="341:29" pos:end="341:35">OR_TMP0</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="343:19" pos:end="359:17">else if <condition pos:start="343:27" pos:end="343:54">(<expr pos:start="343:28" pos:end="343:53"><name pos:start="343:28" pos:end="343:29">op</name> <operator pos:start="343:31" pos:end="343:32">==</operator> <name pos:start="343:34" pos:end="343:40">OP_XORL</name> <operator pos:start="343:42" pos:end="343:43">&amp;&amp;</operator> <name pos:start="343:45" pos:end="343:46">rm</name> <operator pos:start="343:48" pos:end="343:49">==</operator> <name pos:start="343:51" pos:end="343:53">reg</name></expr>)</condition> <block pos:start="343:56" pos:end="359:17">{<block_content pos:start="345:17" pos:end="357:26">

                <label pos:start="345:17" pos:end="345:25"><name pos:start="345:17" pos:end="345:24">xor_zero</name>:</label>

                    <comment type="block" pos:start="347:21" pos:end="347:51">/* xor reg, reg optimisation */</comment>

                    <expr_stmt pos:start="349:21" pos:end="349:39"><expr pos:start="349:21" pos:end="349:38"><call pos:start="349:21" pos:end="349:38"><name pos:start="349:21" pos:end="349:36">gen_op_movl_T0_0</name><argument_list pos:start="349:37" pos:end="349:38">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="351:21" pos:end="351:49"><expr pos:start="351:21" pos:end="351:48"><name pos:start="351:21" pos:end="351:28"><name pos:start="351:21" pos:end="351:21">s</name><operator pos:start="351:22" pos:end="351:23">-&gt;</operator><name pos:start="351:24" pos:end="351:28">cc_op</name></name> <operator pos:start="351:30" pos:end="351:30">=</operator> <name pos:start="351:32" pos:end="351:43">CC_OP_LOGICB</name> <operator pos:start="351:45" pos:end="351:45">+</operator> <name pos:start="351:47" pos:end="351:48">ot</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="353:21" pos:end="353:47"><expr pos:start="353:21" pos:end="353:46"><call pos:start="353:21" pos:end="353:46"><name pos:start="353:21" pos:end="353:37">gen_op_mov_reg_T0</name><argument_list pos:start="353:38" pos:end="353:46">(<argument pos:start="353:39" pos:end="353:40"><expr pos:start="353:39" pos:end="353:40"><name pos:start="353:39" pos:end="353:40">ot</name></expr></argument>, <argument pos:start="353:43" pos:end="353:45"><expr pos:start="353:43" pos:end="353:45"><name pos:start="353:43" pos:end="353:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="355:21" pos:end="355:40"><expr pos:start="355:21" pos:end="355:39"><call pos:start="355:21" pos:end="355:39"><name pos:start="355:21" pos:end="355:37">gen_op_update1_cc</name><argument_list pos:start="355:38" pos:end="355:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="357:21" pos:end="357:26">break;</break>

                </block_content>}</block></if> <else pos:start="359:19" pos:end="363:17">else <block pos:start="359:24" pos:end="363:17">{<block_content pos:start="361:21" pos:end="361:31">

                    <expr_stmt pos:start="361:21" pos:end="361:31"><expr pos:start="361:21" pos:end="361:30"><name pos:start="361:21" pos:end="361:25">opreg</name> <operator pos:start="361:27" pos:end="361:27">=</operator> <name pos:start="361:29" pos:end="361:30">rm</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="365:17" pos:end="365:46"><expr pos:start="365:17" pos:end="365:45"><call pos:start="365:17" pos:end="365:45"><name pos:start="365:17" pos:end="365:33">gen_op_mov_TN_reg</name><argument_list pos:start="365:34" pos:end="365:45">(<argument pos:start="365:35" pos:end="365:36"><expr pos:start="365:35" pos:end="365:36"><name pos:start="365:35" pos:end="365:36">ot</name></expr></argument>, <argument pos:start="365:39" pos:end="365:39"><expr pos:start="365:39" pos:end="365:39"><literal type="number" pos:start="365:39" pos:end="365:39">1</literal></expr></argument>, <argument pos:start="365:42" pos:end="365:44"><expr pos:start="365:42" pos:end="365:44"><name pos:start="365:42" pos:end="365:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:41"><expr pos:start="367:17" pos:end="367:40"><call pos:start="367:17" pos:end="367:40"><name pos:start="367:17" pos:end="367:22">gen_op</name><argument_list pos:start="367:23" pos:end="367:40">(<argument pos:start="367:24" pos:end="367:24"><expr pos:start="367:24" pos:end="367:24"><name pos:start="367:24" pos:end="367:24">s</name></expr></argument>, <argument pos:start="367:27" pos:end="367:28"><expr pos:start="367:27" pos:end="367:28"><name pos:start="367:27" pos:end="367:28">op</name></expr></argument>, <argument pos:start="367:31" pos:end="367:32"><expr pos:start="367:31" pos:end="367:32"><name pos:start="367:31" pos:end="367:32">ot</name></expr></argument>, <argument pos:start="367:35" pos:end="367:39"><expr pos:start="367:35" pos:end="367:39"><name pos:start="367:35" pos:end="367:39">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="369:17" pos:end="369:22">break;</break>

            <case pos:start="371:13" pos:end="371:19">case <expr pos:start="371:18" pos:end="371:18"><literal type="number" pos:start="371:18" pos:end="371:18">1</literal></expr>:</case> <comment type="block" pos:start="371:21" pos:end="371:35">/* OP Gv, Ev */</comment>

                <expr_stmt pos:start="373:17" pos:end="373:43"><expr pos:start="373:17" pos:end="373:42"><name pos:start="373:17" pos:end="373:21">modrm</name> <operator pos:start="373:23" pos:end="373:23">=</operator> <call pos:start="373:25" pos:end="373:42"><name pos:start="373:25" pos:end="373:33">ldub_code</name><argument_list pos:start="373:34" pos:end="373:42">(<argument pos:start="373:35" pos:end="373:41"><expr pos:start="373:35" pos:end="373:41"><name pos:start="373:35" pos:end="373:39"><name pos:start="373:35" pos:end="373:35">s</name><operator pos:start="373:36" pos:end="373:37">-&gt;</operator><name pos:start="373:38" pos:end="373:39">pc</name></name><operator pos:start="373:40" pos:end="373:41">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:39"><expr pos:start="375:17" pos:end="375:38"><name pos:start="375:17" pos:end="375:19">mod</name> <operator pos:start="375:21" pos:end="375:21">=</operator> <operator pos:start="375:23" pos:end="375:23">(</operator><name pos:start="375:24" pos:end="375:28">modrm</name> <operator pos:start="375:30" pos:end="375:31">&gt;&gt;</operator> <literal type="number" pos:start="375:33" pos:end="375:33">6</literal><operator pos:start="375:34" pos:end="375:34">)</operator> <operator pos:start="375:36" pos:end="375:36">&amp;</operator> <literal type="number" pos:start="375:38" pos:end="375:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:49"><expr pos:start="377:17" pos:end="377:48"><name pos:start="377:17" pos:end="377:19">reg</name> <operator pos:start="377:21" pos:end="377:21">=</operator> <operator pos:start="377:23" pos:end="377:23">(</operator><operator pos:start="377:24" pos:end="377:24">(</operator><name pos:start="377:25" pos:end="377:29">modrm</name> <operator pos:start="377:31" pos:end="377:32">&gt;&gt;</operator> <literal type="number" pos:start="377:34" pos:end="377:34">3</literal><operator pos:start="377:35" pos:end="377:35">)</operator> <operator pos:start="377:37" pos:end="377:37">&amp;</operator> <literal type="number" pos:start="377:39" pos:end="377:39">7</literal><operator pos:start="377:40" pos:end="377:40">)</operator> <operator pos:start="377:42" pos:end="377:42">|</operator> <name pos:start="377:44" pos:end="377:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:44"><expr pos:start="379:17" pos:end="379:43"><name pos:start="379:17" pos:end="379:18">rm</name> <operator pos:start="379:20" pos:end="379:20">=</operator> <operator pos:start="379:22" pos:end="379:22">(</operator><name pos:start="379:23" pos:end="379:27">modrm</name> <operator pos:start="379:29" pos:end="379:29">&amp;</operator> <literal type="number" pos:start="379:31" pos:end="379:31">7</literal><operator pos:start="379:32" pos:end="379:32">)</operator> <operator pos:start="379:34" pos:end="379:34">|</operator> <call pos:start="379:36" pos:end="379:43"><name pos:start="379:36" pos:end="379:40">REX_B</name><argument_list pos:start="379:41" pos:end="379:43">(<argument pos:start="379:42" pos:end="379:42"><expr pos:start="379:42" pos:end="379:42"><name pos:start="379:42" pos:end="379:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="381:17" pos:end="395:17"><if pos:start="381:17" pos:end="387:17">if <condition pos:start="381:20" pos:end="381:29">(<expr pos:start="381:21" pos:end="381:28"><name pos:start="381:21" pos:end="381:23">mod</name> <operator pos:start="381:25" pos:end="381:26">!=</operator> <literal type="number" pos:start="381:28" pos:end="381:28">3</literal></expr>)</condition> <block pos:start="381:31" pos:end="387:17">{<block_content pos:start="383:21" pos:end="385:55">

                    <expr_stmt pos:start="383:21" pos:end="383:69"><expr pos:start="383:21" pos:end="383:68"><call pos:start="383:21" pos:end="383:68"><name pos:start="383:21" pos:end="383:33">gen_lea_modrm</name><argument_list pos:start="383:34" pos:end="383:68">(<argument pos:start="383:35" pos:end="383:35"><expr pos:start="383:35" pos:end="383:35"><name pos:start="383:35" pos:end="383:35">s</name></expr></argument>, <argument pos:start="383:38" pos:end="383:42"><expr pos:start="383:38" pos:end="383:42"><name pos:start="383:38" pos:end="383:42">modrm</name></expr></argument>, <argument pos:start="383:45" pos:end="383:53"><expr pos:start="383:45" pos:end="383:53"><operator pos:start="383:45" pos:end="383:45">&amp;</operator><name pos:start="383:46" pos:end="383:53">reg_addr</name></expr></argument>, <argument pos:start="383:56" pos:end="383:67"><expr pos:start="383:56" pos:end="383:67"><operator pos:start="383:56" pos:end="383:56">&amp;</operator><name pos:start="383:57" pos:end="383:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="385:21" pos:end="385:55"><expr pos:start="385:21" pos:end="385:54"><call pos:start="385:21" pos:end="385:54"><name pos:start="385:21" pos:end="385:35">gen_op_ld_T1_A0</name><argument_list pos:start="385:36" pos:end="385:54">(<argument pos:start="385:37" pos:end="385:53"><expr pos:start="385:37" pos:end="385:53"><name pos:start="385:37" pos:end="385:38">ot</name> <operator pos:start="385:40" pos:end="385:40">+</operator> <name pos:start="385:42" pos:end="385:53"><name pos:start="385:42" pos:end="385:42">s</name><operator pos:start="385:43" pos:end="385:44">-&gt;</operator><name pos:start="385:45" pos:end="385:53">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="387:19" pos:end="391:17">else if <condition pos:start="387:27" pos:end="387:54">(<expr pos:start="387:28" pos:end="387:53"><name pos:start="387:28" pos:end="387:29">op</name> <operator pos:start="387:31" pos:end="387:32">==</operator> <name pos:start="387:34" pos:end="387:40">OP_XORL</name> <operator pos:start="387:42" pos:end="387:43">&amp;&amp;</operator> <name pos:start="387:45" pos:end="387:46">rm</name> <operator pos:start="387:48" pos:end="387:49">==</operator> <name pos:start="387:51" pos:end="387:53">reg</name></expr>)</condition> <block pos:start="387:56" pos:end="391:17">{<block_content pos:start="389:21" pos:end="389:34">

                    <goto pos:start="389:21" pos:end="389:34">goto <name pos:start="389:26" pos:end="389:33">xor_zero</name>;</goto>

                </block_content>}</block></if> <else pos:start="391:19" pos:end="395:17">else <block pos:start="391:24" pos:end="395:17">{<block_content pos:start="393:21" pos:end="393:49">

                    <expr_stmt pos:start="393:21" pos:end="393:49"><expr pos:start="393:21" pos:end="393:48"><call pos:start="393:21" pos:end="393:48"><name pos:start="393:21" pos:end="393:37">gen_op_mov_TN_reg</name><argument_list pos:start="393:38" pos:end="393:48">(<argument pos:start="393:39" pos:end="393:40"><expr pos:start="393:39" pos:end="393:40"><name pos:start="393:39" pos:end="393:40">ot</name></expr></argument>, <argument pos:start="393:43" pos:end="393:43"><expr pos:start="393:43" pos:end="393:43"><literal type="number" pos:start="393:43" pos:end="393:43">1</literal></expr></argument>, <argument pos:start="393:46" pos:end="393:47"><expr pos:start="393:46" pos:end="393:47"><name pos:start="393:46" pos:end="393:47">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="397:17" pos:end="397:39"><expr pos:start="397:17" pos:end="397:38"><call pos:start="397:17" pos:end="397:38"><name pos:start="397:17" pos:end="397:22">gen_op</name><argument_list pos:start="397:23" pos:end="397:38">(<argument pos:start="397:24" pos:end="397:24"><expr pos:start="397:24" pos:end="397:24"><name pos:start="397:24" pos:end="397:24">s</name></expr></argument>, <argument pos:start="397:27" pos:end="397:28"><expr pos:start="397:27" pos:end="397:28"><name pos:start="397:27" pos:end="397:28">op</name></expr></argument>, <argument pos:start="397:31" pos:end="397:32"><expr pos:start="397:31" pos:end="397:32"><name pos:start="397:31" pos:end="397:32">ot</name></expr></argument>, <argument pos:start="397:35" pos:end="397:37"><expr pos:start="397:35" pos:end="397:37"><name pos:start="397:35" pos:end="397:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="399:17" pos:end="399:22">break;</break>

            <case pos:start="401:13" pos:end="401:19">case <expr pos:start="401:18" pos:end="401:18"><literal type="number" pos:start="401:18" pos:end="401:18">2</literal></expr>:</case> <comment type="block" pos:start="401:21" pos:end="401:34">/* OP A, Iv */</comment>

                <expr_stmt pos:start="403:17" pos:end="403:38"><expr pos:start="403:17" pos:end="403:37"><name pos:start="403:17" pos:end="403:19">val</name> <operator pos:start="403:21" pos:end="403:21">=</operator> <call pos:start="403:23" pos:end="403:37"><name pos:start="403:23" pos:end="403:30">insn_get</name><argument_list pos:start="403:31" pos:end="403:37">(<argument pos:start="403:32" pos:end="403:32"><expr pos:start="403:32" pos:end="403:32"><name pos:start="403:32" pos:end="403:32">s</name></expr></argument>, <argument pos:start="403:35" pos:end="403:36"><expr pos:start="403:35" pos:end="403:36"><name pos:start="403:35" pos:end="403:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="405:17" pos:end="405:39"><expr pos:start="405:17" pos:end="405:38"><call pos:start="405:17" pos:end="405:38"><name pos:start="405:17" pos:end="405:33">gen_op_movl_T1_im</name><argument_list pos:start="405:34" pos:end="405:38">(<argument pos:start="405:35" pos:end="405:37"><expr pos:start="405:35" pos:end="405:37"><name pos:start="405:35" pos:end="405:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="407:17" pos:end="407:42"><expr pos:start="407:17" pos:end="407:41"><call pos:start="407:17" pos:end="407:41"><name pos:start="407:17" pos:end="407:22">gen_op</name><argument_list pos:start="407:23" pos:end="407:41">(<argument pos:start="407:24" pos:end="407:24"><expr pos:start="407:24" pos:end="407:24"><name pos:start="407:24" pos:end="407:24">s</name></expr></argument>, <argument pos:start="407:27" pos:end="407:28"><expr pos:start="407:27" pos:end="407:28"><name pos:start="407:27" pos:end="407:28">op</name></expr></argument>, <argument pos:start="407:31" pos:end="407:32"><expr pos:start="407:31" pos:end="407:32"><name pos:start="407:31" pos:end="407:32">ot</name></expr></argument>, <argument pos:start="407:35" pos:end="407:40"><expr pos:start="407:35" pos:end="407:40"><name pos:start="407:35" pos:end="407:40">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="409:17" pos:end="409:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="415:9" pos:end="415:14">break;</break>



    <case pos:start="419:5" pos:end="419:14">case <expr pos:start="419:10" pos:end="419:13"><literal type="number" pos:start="419:10" pos:end="419:13">0x82</literal></expr>:</case>

        <if_stmt pos:start="421:9" pos:end="423:28"><if pos:start="421:9" pos:end="423:28">if <condition pos:start="421:12" pos:end="421:22">(<expr pos:start="421:13" pos:end="421:21"><call pos:start="421:13" pos:end="421:21"><name pos:start="421:13" pos:end="421:18">CODE64</name><argument_list pos:start="421:19" pos:end="421:21">(<argument pos:start="421:20" pos:end="421:20"><expr pos:start="421:20" pos:end="421:20"><name pos:start="421:20" pos:end="421:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="423:13" pos:end="423:28"><block_content pos:start="423:13" pos:end="423:28">

            <goto pos:start="423:13" pos:end="423:28">goto <name pos:start="423:18" pos:end="423:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

    <case pos:start="425:5" pos:end="425:14">case <expr pos:start="425:10" pos:end="425:13"><literal type="number" pos:start="425:10" pos:end="425:13">0x80</literal></expr>:</case> <comment type="block" pos:start="425:16" pos:end="425:25">/* GRP1 */</comment>

    <case pos:start="427:5" pos:end="427:14">case <expr pos:start="427:10" pos:end="427:13"><literal type="number" pos:start="427:10" pos:end="427:13">0x81</literal></expr>:</case>

    <case pos:start="429:5" pos:end="429:14">case <expr pos:start="429:10" pos:end="429:13"><literal type="number" pos:start="429:10" pos:end="429:13">0x83</literal></expr>:</case>

        <block pos:start="431:9" pos:end="505:9">{<block_content pos:start="433:13" pos:end="503:37">

            <decl_stmt pos:start="433:13" pos:end="433:20"><decl pos:start="433:13" pos:end="433:19"><type pos:start="433:13" pos:end="433:15"><name pos:start="433:13" pos:end="433:15">int</name></type> <name pos:start="433:17" pos:end="433:19">val</name></decl>;</decl_stmt>



            <if_stmt pos:start="437:13" pos:end="443:37"><if pos:start="437:13" pos:end="439:29">if <condition pos:start="437:16" pos:end="437:29">(<expr pos:start="437:17" pos:end="437:28"><operator pos:start="437:17" pos:end="437:17">(</operator><name pos:start="437:18" pos:end="437:18">b</name> <operator pos:start="437:20" pos:end="437:20">&amp;</operator> <literal type="number" pos:start="437:22" pos:end="437:22">1</literal><operator pos:start="437:23" pos:end="437:23">)</operator> <operator pos:start="437:25" pos:end="437:26">==</operator> <literal type="number" pos:start="437:28" pos:end="437:28">0</literal></expr>)</condition><block type="pseudo" pos:start="439:17" pos:end="439:29"><block_content pos:start="439:17" pos:end="439:29">

                <expr_stmt pos:start="439:17" pos:end="439:29"><expr pos:start="439:17" pos:end="439:28"><name pos:start="439:17" pos:end="439:18">ot</name> <operator pos:start="439:20" pos:end="439:20">=</operator> <name pos:start="439:22" pos:end="439:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="441:13" pos:end="443:37">else<block type="pseudo" pos:start="443:17" pos:end="443:37"><block_content pos:start="443:17" pos:end="443:37">

                <expr_stmt pos:start="443:17" pos:end="443:37"><expr pos:start="443:17" pos:end="443:36"><name pos:start="443:17" pos:end="443:18">ot</name> <operator pos:start="443:20" pos:end="443:20">=</operator> <name pos:start="443:22" pos:end="443:26">dflag</name> <operator pos:start="443:28" pos:end="443:28">+</operator> <name pos:start="443:30" pos:end="443:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="447:13" pos:end="447:39"><expr pos:start="447:13" pos:end="447:38"><name pos:start="447:13" pos:end="447:17">modrm</name> <operator pos:start="447:19" pos:end="447:19">=</operator> <call pos:start="447:21" pos:end="447:38"><name pos:start="447:21" pos:end="447:29">ldub_code</name><argument_list pos:start="447:30" pos:end="447:38">(<argument pos:start="447:31" pos:end="447:37"><expr pos:start="447:31" pos:end="447:37"><name pos:start="447:31" pos:end="447:35"><name pos:start="447:31" pos:end="447:31">s</name><operator pos:start="447:32" pos:end="447:33">-&gt;</operator><name pos:start="447:34" pos:end="447:35">pc</name></name><operator pos:start="447:36" pos:end="447:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="449:13" pos:end="449:35"><expr pos:start="449:13" pos:end="449:34"><name pos:start="449:13" pos:end="449:15">mod</name> <operator pos:start="449:17" pos:end="449:17">=</operator> <operator pos:start="449:19" pos:end="449:19">(</operator><name pos:start="449:20" pos:end="449:24">modrm</name> <operator pos:start="449:26" pos:end="449:27">&gt;&gt;</operator> <literal type="number" pos:start="449:29" pos:end="449:29">6</literal><operator pos:start="449:30" pos:end="449:30">)</operator> <operator pos:start="449:32" pos:end="449:32">&amp;</operator> <literal type="number" pos:start="449:34" pos:end="449:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="451:13" pos:end="451:40"><expr pos:start="451:13" pos:end="451:39"><name pos:start="451:13" pos:end="451:14">rm</name> <operator pos:start="451:16" pos:end="451:16">=</operator> <operator pos:start="451:18" pos:end="451:18">(</operator><name pos:start="451:19" pos:end="451:23">modrm</name> <operator pos:start="451:25" pos:end="451:25">&amp;</operator> <literal type="number" pos:start="451:27" pos:end="451:27">7</literal><operator pos:start="451:28" pos:end="451:28">)</operator> <operator pos:start="451:30" pos:end="451:30">|</operator> <call pos:start="451:32" pos:end="451:39"><name pos:start="451:32" pos:end="451:36">REX_B</name><argument_list pos:start="451:37" pos:end="451:39">(<argument pos:start="451:38" pos:end="451:38"><expr pos:start="451:38" pos:end="451:38"><name pos:start="451:38" pos:end="451:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:34"><expr pos:start="453:13" pos:end="453:33"><name pos:start="453:13" pos:end="453:14">op</name> <operator pos:start="453:16" pos:end="453:16">=</operator> <operator pos:start="453:18" pos:end="453:18">(</operator><name pos:start="453:19" pos:end="453:23">modrm</name> <operator pos:start="453:25" pos:end="453:26">&gt;&gt;</operator> <literal type="number" pos:start="453:28" pos:end="453:28">3</literal><operator pos:start="453:29" pos:end="453:29">)</operator> <operator pos:start="453:31" pos:end="453:31">&amp;</operator> <literal type="number" pos:start="453:33" pos:end="453:33">7</literal></expr>;</expr_stmt>



            <if_stmt pos:start="457:13" pos:end="475:13"><if pos:start="457:13" pos:end="471:13">if <condition pos:start="457:16" pos:end="457:25">(<expr pos:start="457:17" pos:end="457:24"><name pos:start="457:17" pos:end="457:19">mod</name> <operator pos:start="457:21" pos:end="457:22">!=</operator> <literal type="number" pos:start="457:24" pos:end="457:24">3</literal></expr>)</condition> <block pos:start="457:27" pos:end="471:13">{<block_content pos:start="459:17" pos:end="469:32">

                <if_stmt pos:start="459:17" pos:end="465:56"><if pos:start="459:17" pos:end="461:38">if <condition pos:start="459:20" pos:end="459:30">(<expr pos:start="459:21" pos:end="459:29"><name pos:start="459:21" pos:end="459:21">b</name> <operator pos:start="459:23" pos:end="459:24">==</operator> <literal type="number" pos:start="459:26" pos:end="459:29">0x83</literal></expr>)</condition><block type="pseudo" pos:start="461:21" pos:end="461:38"><block_content pos:start="461:21" pos:end="461:38">

                    <expr_stmt pos:start="461:21" pos:end="461:38"><expr pos:start="461:21" pos:end="461:37"><name pos:start="461:21" pos:end="461:33"><name pos:start="461:21" pos:end="461:21">s</name><operator pos:start="461:22" pos:end="461:23">-&gt;</operator><name pos:start="461:24" pos:end="461:33">rip_offset</name></name> <operator pos:start="461:35" pos:end="461:35">=</operator> <literal type="number" pos:start="461:37" pos:end="461:37">1</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="463:17" pos:end="465:56">else<block type="pseudo" pos:start="465:21" pos:end="465:56"><block_content pos:start="465:21" pos:end="465:56">

                    <expr_stmt pos:start="465:21" pos:end="465:56"><expr pos:start="465:21" pos:end="465:55"><name pos:start="465:21" pos:end="465:33"><name pos:start="465:21" pos:end="465:21">s</name><operator pos:start="465:22" pos:end="465:23">-&gt;</operator><name pos:start="465:24" pos:end="465:33">rip_offset</name></name> <operator pos:start="465:35" pos:end="465:35">=</operator> <call pos:start="465:37" pos:end="465:55"><name pos:start="465:37" pos:end="465:51">insn_const_size</name><argument_list pos:start="465:52" pos:end="465:55">(<argument pos:start="465:53" pos:end="465:54"><expr pos:start="465:53" pos:end="465:54"><name pos:start="465:53" pos:end="465:54">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="467:17" pos:end="467:65"><expr pos:start="467:17" pos:end="467:64"><call pos:start="467:17" pos:end="467:64"><name pos:start="467:17" pos:end="467:29">gen_lea_modrm</name><argument_list pos:start="467:30" pos:end="467:64">(<argument pos:start="467:31" pos:end="467:31"><expr pos:start="467:31" pos:end="467:31"><name pos:start="467:31" pos:end="467:31">s</name></expr></argument>, <argument pos:start="467:34" pos:end="467:38"><expr pos:start="467:34" pos:end="467:38"><name pos:start="467:34" pos:end="467:38">modrm</name></expr></argument>, <argument pos:start="467:41" pos:end="467:49"><expr pos:start="467:41" pos:end="467:49"><operator pos:start="467:41" pos:end="467:41">&amp;</operator><name pos:start="467:42" pos:end="467:49">reg_addr</name></expr></argument>, <argument pos:start="467:52" pos:end="467:63"><expr pos:start="467:52" pos:end="467:63"><operator pos:start="467:52" pos:end="467:52">&amp;</operator><name pos:start="467:53" pos:end="467:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="469:17" pos:end="469:32"><expr pos:start="469:17" pos:end="469:31"><name pos:start="469:17" pos:end="469:21">opreg</name> <operator pos:start="469:23" pos:end="469:23">=</operator> <name pos:start="469:25" pos:end="469:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="471:15" pos:end="475:13">else <block pos:start="471:20" pos:end="475:13">{<block_content pos:start="473:17" pos:end="473:27">

                <expr_stmt pos:start="473:17" pos:end="473:27"><expr pos:start="473:17" pos:end="473:26"><name pos:start="473:17" pos:end="473:21">opreg</name> <operator pos:start="473:23" pos:end="473:23">=</operator> <name pos:start="473:25" pos:end="473:26">rm</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <switch pos:start="479:13" pos:end="499:13">switch<condition pos:start="479:19" pos:end="479:21">(<expr pos:start="479:20" pos:end="479:20"><name pos:start="479:20" pos:end="479:20">b</name></expr>)</condition> <block pos:start="479:23" pos:end="499:13">{<block_content pos:start="481:13" pos:end="497:22">

            <default pos:start="481:13" pos:end="481:20">default:</default>

            <case pos:start="483:13" pos:end="483:22">case <expr pos:start="483:18" pos:end="483:21"><literal type="number" pos:start="483:18" pos:end="483:21">0x80</literal></expr>:</case>

            <case pos:start="485:13" pos:end="485:22">case <expr pos:start="485:18" pos:end="485:21"><literal type="number" pos:start="485:18" pos:end="485:21">0x81</literal></expr>:</case>

            <case pos:start="487:13" pos:end="487:22">case <expr pos:start="487:18" pos:end="487:21"><literal type="number" pos:start="487:18" pos:end="487:21">0x82</literal></expr>:</case>

                <expr_stmt pos:start="489:17" pos:end="489:38"><expr pos:start="489:17" pos:end="489:37"><name pos:start="489:17" pos:end="489:19">val</name> <operator pos:start="489:21" pos:end="489:21">=</operator> <call pos:start="489:23" pos:end="489:37"><name pos:start="489:23" pos:end="489:30">insn_get</name><argument_list pos:start="489:31" pos:end="489:37">(<argument pos:start="489:32" pos:end="489:32"><expr pos:start="489:32" pos:end="489:32"><name pos:start="489:32" pos:end="489:32">s</name></expr></argument>, <argument pos:start="489:35" pos:end="489:36"><expr pos:start="489:35" pos:end="489:36"><name pos:start="489:35" pos:end="489:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="491:17" pos:end="491:22">break;</break>

            <case pos:start="493:13" pos:end="493:22">case <expr pos:start="493:18" pos:end="493:21"><literal type="number" pos:start="493:18" pos:end="493:21">0x83</literal></expr>:</case>

                <expr_stmt pos:start="495:17" pos:end="495:51"><expr pos:start="495:17" pos:end="495:50"><name pos:start="495:17" pos:end="495:19">val</name> <operator pos:start="495:21" pos:end="495:21">=</operator> <operator pos:start="495:23" pos:end="495:23">(</operator><name pos:start="495:24" pos:end="495:29">int8_t</name><operator pos:start="495:30" pos:end="495:30">)</operator><call pos:start="495:31" pos:end="495:50"><name pos:start="495:31" pos:end="495:38">insn_get</name><argument_list pos:start="495:39" pos:end="495:50">(<argument pos:start="495:40" pos:end="495:40"><expr pos:start="495:40" pos:end="495:40"><name pos:start="495:40" pos:end="495:40">s</name></expr></argument>, <argument pos:start="495:43" pos:end="495:49"><expr pos:start="495:43" pos:end="495:49"><name pos:start="495:43" pos:end="495:49">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="497:17" pos:end="497:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="501:13" pos:end="501:35"><expr pos:start="501:13" pos:end="501:34"><call pos:start="501:13" pos:end="501:34"><name pos:start="501:13" pos:end="501:29">gen_op_movl_T1_im</name><argument_list pos:start="501:30" pos:end="501:34">(<argument pos:start="501:31" pos:end="501:33"><expr pos:start="501:31" pos:end="501:33"><name pos:start="501:31" pos:end="501:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:37"><expr pos:start="503:13" pos:end="503:36"><call pos:start="503:13" pos:end="503:36"><name pos:start="503:13" pos:end="503:18">gen_op</name><argument_list pos:start="503:19" pos:end="503:36">(<argument pos:start="503:20" pos:end="503:20"><expr pos:start="503:20" pos:end="503:20"><name pos:start="503:20" pos:end="503:20">s</name></expr></argument>, <argument pos:start="503:23" pos:end="503:24"><expr pos:start="503:23" pos:end="503:24"><name pos:start="503:23" pos:end="503:24">op</name></expr></argument>, <argument pos:start="503:27" pos:end="503:28"><expr pos:start="503:27" pos:end="503:28"><name pos:start="503:27" pos:end="503:28">ot</name></expr></argument>, <argument pos:start="503:31" pos:end="503:35"><expr pos:start="503:31" pos:end="503:35"><name pos:start="503:31" pos:end="503:35">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="507:9" pos:end="507:14">break;</break>



        <comment type="block" format="doxygen" pos:start="511:9" pos:end="511:36">/**************************/</comment>

        <comment type="block" pos:start="513:9" pos:end="513:44">/* inc, dec, and other misc arith */</comment>

    <case pos:start="515:5" pos:end="515:23">case <expr pos:start="515:10" pos:end="515:22"><literal type="number" pos:start="515:10" pos:end="515:13">0x40</literal> <operator pos:start="515:15" pos:end="515:17">...</operator> <literal type="number" pos:start="515:19" pos:end="515:22">0x47</literal></expr>:</case> <comment type="block" pos:start="515:25" pos:end="515:36">/* inc Gv */</comment>

        <expr_stmt pos:start="517:9" pos:end="517:39"><expr pos:start="517:9" pos:end="517:38"><name pos:start="517:9" pos:end="517:10">ot</name> <operator pos:start="517:12" pos:end="517:12">=</operator> <ternary pos:start="517:14" pos:end="517:38"><condition pos:start="517:14" pos:end="517:20"><expr pos:start="517:14" pos:end="517:18"><name pos:start="517:14" pos:end="517:18">dflag</name></expr> ?</condition><then pos:start="517:22" pos:end="517:28"> <expr pos:start="517:22" pos:end="517:28"><name pos:start="517:22" pos:end="517:28">OT_LONG</name></expr> </then><else pos:start="517:30" pos:end="517:38">: <expr pos:start="517:32" pos:end="517:38"><name pos:start="517:32" pos:end="517:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="519:9" pos:end="519:44"><expr pos:start="519:9" pos:end="519:43"><call pos:start="519:9" pos:end="519:43"><name pos:start="519:9" pos:end="519:15">gen_inc</name><argument_list pos:start="519:16" pos:end="519:43">(<argument pos:start="519:17" pos:end="519:17"><expr pos:start="519:17" pos:end="519:17"><name pos:start="519:17" pos:end="519:17">s</name></expr></argument>, <argument pos:start="519:20" pos:end="519:21"><expr pos:start="519:20" pos:end="519:21"><name pos:start="519:20" pos:end="519:21">ot</name></expr></argument>, <argument pos:start="519:24" pos:end="519:39"><expr pos:start="519:24" pos:end="519:39"><name pos:start="519:24" pos:end="519:29">OR_EAX</name> <operator pos:start="519:31" pos:end="519:31">+</operator> <operator pos:start="519:33" pos:end="519:33">(</operator><name pos:start="519:34" pos:end="519:34">b</name> <operator pos:start="519:36" pos:end="519:36">&amp;</operator> <literal type="number" pos:start="519:38" pos:end="519:38">7</literal><operator pos:start="519:39" pos:end="519:39">)</operator></expr></argument>, <argument pos:start="519:42" pos:end="519:42"><expr pos:start="519:42" pos:end="519:42"><literal type="number" pos:start="519:42" pos:end="519:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="521:9" pos:end="521:14">break;</break>

    <case pos:start="523:5" pos:end="523:23">case <expr pos:start="523:10" pos:end="523:22"><literal type="number" pos:start="523:10" pos:end="523:13">0x48</literal> <operator pos:start="523:15" pos:end="523:17">...</operator> <literal type="number" pos:start="523:19" pos:end="523:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="523:25" pos:end="523:36">/* dec Gv */</comment>

        <expr_stmt pos:start="525:9" pos:end="525:39"><expr pos:start="525:9" pos:end="525:38"><name pos:start="525:9" pos:end="525:10">ot</name> <operator pos:start="525:12" pos:end="525:12">=</operator> <ternary pos:start="525:14" pos:end="525:38"><condition pos:start="525:14" pos:end="525:20"><expr pos:start="525:14" pos:end="525:18"><name pos:start="525:14" pos:end="525:18">dflag</name></expr> ?</condition><then pos:start="525:22" pos:end="525:28"> <expr pos:start="525:22" pos:end="525:28"><name pos:start="525:22" pos:end="525:28">OT_LONG</name></expr> </then><else pos:start="525:30" pos:end="525:38">: <expr pos:start="525:32" pos:end="525:38"><name pos:start="525:32" pos:end="525:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="527:9" pos:end="527:45"><expr pos:start="527:9" pos:end="527:44"><call pos:start="527:9" pos:end="527:44"><name pos:start="527:9" pos:end="527:15">gen_inc</name><argument_list pos:start="527:16" pos:end="527:44">(<argument pos:start="527:17" pos:end="527:17"><expr pos:start="527:17" pos:end="527:17"><name pos:start="527:17" pos:end="527:17">s</name></expr></argument>, <argument pos:start="527:20" pos:end="527:21"><expr pos:start="527:20" pos:end="527:21"><name pos:start="527:20" pos:end="527:21">ot</name></expr></argument>, <argument pos:start="527:24" pos:end="527:39"><expr pos:start="527:24" pos:end="527:39"><name pos:start="527:24" pos:end="527:29">OR_EAX</name> <operator pos:start="527:31" pos:end="527:31">+</operator> <operator pos:start="527:33" pos:end="527:33">(</operator><name pos:start="527:34" pos:end="527:34">b</name> <operator pos:start="527:36" pos:end="527:36">&amp;</operator> <literal type="number" pos:start="527:38" pos:end="527:38">7</literal><operator pos:start="527:39" pos:end="527:39">)</operator></expr></argument>, <argument pos:start="527:42" pos:end="527:43"><expr pos:start="527:42" pos:end="527:43"><operator pos:start="527:42" pos:end="527:42">-</operator><literal type="number" pos:start="527:43" pos:end="527:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="529:9" pos:end="529:14">break;</break>

    <case pos:start="531:5" pos:end="531:14">case <expr pos:start="531:10" pos:end="531:13"><literal type="number" pos:start="531:10" pos:end="531:13">0xf6</literal></expr>:</case> <comment type="block" pos:start="531:16" pos:end="531:25">/* GRP3 */</comment>

    <case pos:start="533:5" pos:end="533:14">case <expr pos:start="533:10" pos:end="533:13"><literal type="number" pos:start="533:10" pos:end="533:13">0xf7</literal></expr>:</case>

        <if_stmt pos:start="535:9" pos:end="541:33"><if pos:start="535:9" pos:end="537:25">if <condition pos:start="535:12" pos:end="535:25">(<expr pos:start="535:13" pos:end="535:24"><operator pos:start="535:13" pos:end="535:13">(</operator><name pos:start="535:14" pos:end="535:14">b</name> <operator pos:start="535:16" pos:end="535:16">&amp;</operator> <literal type="number" pos:start="535:18" pos:end="535:18">1</literal><operator pos:start="535:19" pos:end="535:19">)</operator> <operator pos:start="535:21" pos:end="535:22">==</operator> <literal type="number" pos:start="535:24" pos:end="535:24">0</literal></expr>)</condition><block type="pseudo" pos:start="537:13" pos:end="537:25"><block_content pos:start="537:13" pos:end="537:25">

            <expr_stmt pos:start="537:13" pos:end="537:25"><expr pos:start="537:13" pos:end="537:24"><name pos:start="537:13" pos:end="537:14">ot</name> <operator pos:start="537:16" pos:end="537:16">=</operator> <name pos:start="537:18" pos:end="537:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="539:9" pos:end="541:33">else<block type="pseudo" pos:start="541:13" pos:end="541:33"><block_content pos:start="541:13" pos:end="541:33">

            <expr_stmt pos:start="541:13" pos:end="541:33"><expr pos:start="541:13" pos:end="541:32"><name pos:start="541:13" pos:end="541:14">ot</name> <operator pos:start="541:16" pos:end="541:16">=</operator> <name pos:start="541:18" pos:end="541:22">dflag</name> <operator pos:start="541:24" pos:end="541:24">+</operator> <name pos:start="541:26" pos:end="541:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="545:9" pos:end="545:35"><expr pos:start="545:9" pos:end="545:34"><name pos:start="545:9" pos:end="545:13">modrm</name> <operator pos:start="545:15" pos:end="545:15">=</operator> <call pos:start="545:17" pos:end="545:34"><name pos:start="545:17" pos:end="545:25">ldub_code</name><argument_list pos:start="545:26" pos:end="545:34">(<argument pos:start="545:27" pos:end="545:33"><expr pos:start="545:27" pos:end="545:33"><name pos:start="545:27" pos:end="545:31"><name pos:start="545:27" pos:end="545:27">s</name><operator pos:start="545:28" pos:end="545:29">-&gt;</operator><name pos:start="545:30" pos:end="545:31">pc</name></name><operator pos:start="545:32" pos:end="545:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="547:9" pos:end="547:31"><expr pos:start="547:9" pos:end="547:30"><name pos:start="547:9" pos:end="547:11">mod</name> <operator pos:start="547:13" pos:end="547:13">=</operator> <operator pos:start="547:15" pos:end="547:15">(</operator><name pos:start="547:16" pos:end="547:20">modrm</name> <operator pos:start="547:22" pos:end="547:23">&gt;&gt;</operator> <literal type="number" pos:start="547:25" pos:end="547:25">6</literal><operator pos:start="547:26" pos:end="547:26">)</operator> <operator pos:start="547:28" pos:end="547:28">&amp;</operator> <literal type="number" pos:start="547:30" pos:end="547:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="549:9" pos:end="549:36"><expr pos:start="549:9" pos:end="549:35"><name pos:start="549:9" pos:end="549:10">rm</name> <operator pos:start="549:12" pos:end="549:12">=</operator> <operator pos:start="549:14" pos:end="549:14">(</operator><name pos:start="549:15" pos:end="549:19">modrm</name> <operator pos:start="549:21" pos:end="549:21">&amp;</operator> <literal type="number" pos:start="549:23" pos:end="549:23">7</literal><operator pos:start="549:24" pos:end="549:24">)</operator> <operator pos:start="549:26" pos:end="549:26">|</operator> <call pos:start="549:28" pos:end="549:35"><name pos:start="549:28" pos:end="549:32">REX_B</name><argument_list pos:start="549:33" pos:end="549:35">(<argument pos:start="549:34" pos:end="549:34"><expr pos:start="549:34" pos:end="549:34"><name pos:start="549:34" pos:end="549:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="551:9" pos:end="551:30"><expr pos:start="551:9" pos:end="551:29"><name pos:start="551:9" pos:end="551:10">op</name> <operator pos:start="551:12" pos:end="551:12">=</operator> <operator pos:start="551:14" pos:end="551:14">(</operator><name pos:start="551:15" pos:end="551:19">modrm</name> <operator pos:start="551:21" pos:end="551:22">&gt;&gt;</operator> <literal type="number" pos:start="551:24" pos:end="551:24">3</literal><operator pos:start="551:25" pos:end="551:25">)</operator> <operator pos:start="551:27" pos:end="551:27">&amp;</operator> <literal type="number" pos:start="551:29" pos:end="551:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="553:9" pos:end="567:9"><if pos:start="553:9" pos:end="563:9">if <condition pos:start="553:12" pos:end="553:21">(<expr pos:start="553:13" pos:end="553:20"><name pos:start="553:13" pos:end="553:15">mod</name> <operator pos:start="553:17" pos:end="553:18">!=</operator> <literal type="number" pos:start="553:20" pos:end="553:20">3</literal></expr>)</condition> <block pos:start="553:23" pos:end="563:9">{<block_content pos:start="555:13" pos:end="561:47">

            <if_stmt pos:start="555:13" pos:end="557:52"><if pos:start="555:13" pos:end="557:52">if <condition pos:start="555:16" pos:end="555:24">(<expr pos:start="555:17" pos:end="555:23"><name pos:start="555:17" pos:end="555:18">op</name> <operator pos:start="555:20" pos:end="555:21">==</operator> <literal type="number" pos:start="555:23" pos:end="555:23">0</literal></expr>)</condition><block type="pseudo" pos:start="557:17" pos:end="557:52"><block_content pos:start="557:17" pos:end="557:52">

                <expr_stmt pos:start="557:17" pos:end="557:52"><expr pos:start="557:17" pos:end="557:51"><name pos:start="557:17" pos:end="557:29"><name pos:start="557:17" pos:end="557:17">s</name><operator pos:start="557:18" pos:end="557:19">-&gt;</operator><name pos:start="557:20" pos:end="557:29">rip_offset</name></name> <operator pos:start="557:31" pos:end="557:31">=</operator> <call pos:start="557:33" pos:end="557:51"><name pos:start="557:33" pos:end="557:47">insn_const_size</name><argument_list pos:start="557:48" pos:end="557:51">(<argument pos:start="557:49" pos:end="557:50"><expr pos:start="557:49" pos:end="557:50"><name pos:start="557:49" pos:end="557:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="559:13" pos:end="559:61"><expr pos:start="559:13" pos:end="559:60"><call pos:start="559:13" pos:end="559:60"><name pos:start="559:13" pos:end="559:25">gen_lea_modrm</name><argument_list pos:start="559:26" pos:end="559:60">(<argument pos:start="559:27" pos:end="559:27"><expr pos:start="559:27" pos:end="559:27"><name pos:start="559:27" pos:end="559:27">s</name></expr></argument>, <argument pos:start="559:30" pos:end="559:34"><expr pos:start="559:30" pos:end="559:34"><name pos:start="559:30" pos:end="559:34">modrm</name></expr></argument>, <argument pos:start="559:37" pos:end="559:45"><expr pos:start="559:37" pos:end="559:45"><operator pos:start="559:37" pos:end="559:37">&amp;</operator><name pos:start="559:38" pos:end="559:45">reg_addr</name></expr></argument>, <argument pos:start="559:48" pos:end="559:59"><expr pos:start="559:48" pos:end="559:59"><operator pos:start="559:48" pos:end="559:48">&amp;</operator><name pos:start="559:49" pos:end="559:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="561:13" pos:end="561:47"><expr pos:start="561:13" pos:end="561:46"><call pos:start="561:13" pos:end="561:46"><name pos:start="561:13" pos:end="561:27">gen_op_ld_T0_A0</name><argument_list pos:start="561:28" pos:end="561:46">(<argument pos:start="561:29" pos:end="561:45"><expr pos:start="561:29" pos:end="561:45"><name pos:start="561:29" pos:end="561:30">ot</name> <operator pos:start="561:32" pos:end="561:32">+</operator> <name pos:start="561:34" pos:end="561:45"><name pos:start="561:34" pos:end="561:34">s</name><operator pos:start="561:35" pos:end="561:36">-&gt;</operator><name pos:start="561:37" pos:end="561:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="563:11" pos:end="567:9">else <block pos:start="563:16" pos:end="567:9">{<block_content pos:start="565:13" pos:end="565:41">

            <expr_stmt pos:start="565:13" pos:end="565:41"><expr pos:start="565:13" pos:end="565:40"><call pos:start="565:13" pos:end="565:40"><name pos:start="565:13" pos:end="565:29">gen_op_mov_TN_reg</name><argument_list pos:start="565:30" pos:end="565:40">(<argument pos:start="565:31" pos:end="565:32"><expr pos:start="565:31" pos:end="565:32"><name pos:start="565:31" pos:end="565:32">ot</name></expr></argument>, <argument pos:start="565:35" pos:end="565:35"><expr pos:start="565:35" pos:end="565:35"><literal type="number" pos:start="565:35" pos:end="565:35">0</literal></expr></argument>, <argument pos:start="565:38" pos:end="565:39"><expr pos:start="565:38" pos:end="565:39"><name pos:start="565:38" pos:end="565:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="571:9" pos:end="989:9">switch<condition pos:start="571:15" pos:end="571:18">(<expr pos:start="571:16" pos:end="571:17"><name pos:start="571:16" pos:end="571:17">op</name></expr>)</condition> <block pos:start="571:20" pos:end="989:9">{<block_content pos:start="573:9" pos:end="987:28">

        <case pos:start="573:9" pos:end="573:15">case <expr pos:start="573:14" pos:end="573:14"><literal type="number" pos:start="573:14" pos:end="573:14">0</literal></expr>:</case> <comment type="block" pos:start="573:17" pos:end="573:26">/* test */</comment>

            <expr_stmt pos:start="575:13" pos:end="575:34"><expr pos:start="575:13" pos:end="575:33"><name pos:start="575:13" pos:end="575:15">val</name> <operator pos:start="575:17" pos:end="575:17">=</operator> <call pos:start="575:19" pos:end="575:33"><name pos:start="575:19" pos:end="575:26">insn_get</name><argument_list pos:start="575:27" pos:end="575:33">(<argument pos:start="575:28" pos:end="575:28"><expr pos:start="575:28" pos:end="575:28"><name pos:start="575:28" pos:end="575:28">s</name></expr></argument>, <argument pos:start="575:31" pos:end="575:32"><expr pos:start="575:31" pos:end="575:32"><name pos:start="575:31" pos:end="575:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="577:13" pos:end="577:35"><expr pos:start="577:13" pos:end="577:34"><call pos:start="577:13" pos:end="577:34"><name pos:start="577:13" pos:end="577:29">gen_op_movl_T1_im</name><argument_list pos:start="577:30" pos:end="577:34">(<argument pos:start="577:31" pos:end="577:33"><expr pos:start="577:31" pos:end="577:33"><name pos:start="577:31" pos:end="577:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="579:13" pos:end="579:36"><expr pos:start="579:13" pos:end="579:35"><call pos:start="579:13" pos:end="579:35"><name pos:start="579:13" pos:end="579:33">gen_op_testl_T0_T1_cc</name><argument_list pos:start="579:34" pos:end="579:35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="581:13" pos:end="581:41"><expr pos:start="581:13" pos:end="581:40"><name pos:start="581:13" pos:end="581:20"><name pos:start="581:13" pos:end="581:13">s</name><operator pos:start="581:14" pos:end="581:15">-&gt;</operator><name pos:start="581:16" pos:end="581:20">cc_op</name></name> <operator pos:start="581:22" pos:end="581:22">=</operator> <name pos:start="581:24" pos:end="581:35">CC_OP_LOGICB</name> <operator pos:start="581:37" pos:end="581:37">+</operator> <name pos:start="581:39" pos:end="581:40">ot</name></expr>;</expr_stmt>

            <break pos:start="583:13" pos:end="583:18">break;</break>

        <case pos:start="585:9" pos:end="585:15">case <expr pos:start="585:14" pos:end="585:14"><literal type="number" pos:start="585:14" pos:end="585:14">2</literal></expr>:</case> <comment type="block" pos:start="585:17" pos:end="585:25">/* not */</comment>

            <expr_stmt pos:start="587:13" pos:end="587:47"><expr pos:start="587:13" pos:end="587:46"><call pos:start="587:13" pos:end="587:46"><name pos:start="587:13" pos:end="587:26">tcg_gen_not_tl</name><argument_list pos:start="587:27" pos:end="587:46">(<argument pos:start="587:28" pos:end="587:35"><expr pos:start="587:28" pos:end="587:35"><name pos:start="587:28" pos:end="587:35"><name pos:start="587:28" pos:end="587:32">cpu_T</name><index pos:start="587:33" pos:end="587:35">[<expr pos:start="587:34" pos:end="587:34"><literal type="number" pos:start="587:34" pos:end="587:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="587:38" pos:end="587:45"><expr pos:start="587:38" pos:end="587:45"><name pos:start="587:38" pos:end="587:45"><name pos:start="587:38" pos:end="587:42">cpu_T</name><index pos:start="587:43" pos:end="587:45">[<expr pos:start="587:44" pos:end="587:44"><literal type="number" pos:start="587:44" pos:end="587:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="589:13" pos:end="597:13"><if pos:start="589:13" pos:end="593:13">if <condition pos:start="589:16" pos:end="589:25">(<expr pos:start="589:17" pos:end="589:24"><name pos:start="589:17" pos:end="589:19">mod</name> <operator pos:start="589:21" pos:end="589:22">!=</operator> <literal type="number" pos:start="589:24" pos:end="589:24">3</literal></expr>)</condition> <block pos:start="589:27" pos:end="593:13">{<block_content pos:start="591:17" pos:end="591:51">

                <expr_stmt pos:start="591:17" pos:end="591:51"><expr pos:start="591:17" pos:end="591:50"><call pos:start="591:17" pos:end="591:50"><name pos:start="591:17" pos:end="591:31">gen_op_st_T0_A0</name><argument_list pos:start="591:32" pos:end="591:50">(<argument pos:start="591:33" pos:end="591:49"><expr pos:start="591:33" pos:end="591:49"><name pos:start="591:33" pos:end="591:34">ot</name> <operator pos:start="591:36" pos:end="591:36">+</operator> <name pos:start="591:38" pos:end="591:49"><name pos:start="591:38" pos:end="591:38">s</name><operator pos:start="591:39" pos:end="591:40">-&gt;</operator><name pos:start="591:41" pos:end="591:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="593:15" pos:end="597:13">else <block pos:start="593:20" pos:end="597:13">{<block_content pos:start="595:17" pos:end="595:42">

                <expr_stmt pos:start="595:17" pos:end="595:42"><expr pos:start="595:17" pos:end="595:41"><call pos:start="595:17" pos:end="595:41"><name pos:start="595:17" pos:end="595:33">gen_op_mov_reg_T0</name><argument_list pos:start="595:34" pos:end="595:41">(<argument pos:start="595:35" pos:end="595:36"><expr pos:start="595:35" pos:end="595:36"><name pos:start="595:35" pos:end="595:36">ot</name></expr></argument>, <argument pos:start="595:39" pos:end="595:40"><expr pos:start="595:39" pos:end="595:40"><name pos:start="595:39" pos:end="595:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="599:13" pos:end="599:18">break;</break>

        <case pos:start="601:9" pos:end="601:15">case <expr pos:start="601:14" pos:end="601:14"><literal type="number" pos:start="601:14" pos:end="601:14">3</literal></expr>:</case> <comment type="block" pos:start="601:17" pos:end="601:25">/* neg */</comment>

            <expr_stmt pos:start="603:13" pos:end="603:47"><expr pos:start="603:13" pos:end="603:46"><call pos:start="603:13" pos:end="603:46"><name pos:start="603:13" pos:end="603:26">tcg_gen_neg_tl</name><argument_list pos:start="603:27" pos:end="603:46">(<argument pos:start="603:28" pos:end="603:35"><expr pos:start="603:28" pos:end="603:35"><name pos:start="603:28" pos:end="603:35"><name pos:start="603:28" pos:end="603:32">cpu_T</name><index pos:start="603:33" pos:end="603:35">[<expr pos:start="603:34" pos:end="603:34"><literal type="number" pos:start="603:34" pos:end="603:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="603:38" pos:end="603:45"><expr pos:start="603:38" pos:end="603:45"><name pos:start="603:38" pos:end="603:45"><name pos:start="603:38" pos:end="603:42">cpu_T</name><index pos:start="603:43" pos:end="603:45">[<expr pos:start="603:44" pos:end="603:44"><literal type="number" pos:start="603:44" pos:end="603:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="605:13" pos:end="613:13"><if pos:start="605:13" pos:end="609:13">if <condition pos:start="605:16" pos:end="605:25">(<expr pos:start="605:17" pos:end="605:24"><name pos:start="605:17" pos:end="605:19">mod</name> <operator pos:start="605:21" pos:end="605:22">!=</operator> <literal type="number" pos:start="605:24" pos:end="605:24">3</literal></expr>)</condition> <block pos:start="605:27" pos:end="609:13">{<block_content pos:start="607:17" pos:end="607:51">

                <expr_stmt pos:start="607:17" pos:end="607:51"><expr pos:start="607:17" pos:end="607:50"><call pos:start="607:17" pos:end="607:50"><name pos:start="607:17" pos:end="607:31">gen_op_st_T0_A0</name><argument_list pos:start="607:32" pos:end="607:50">(<argument pos:start="607:33" pos:end="607:49"><expr pos:start="607:33" pos:end="607:49"><name pos:start="607:33" pos:end="607:34">ot</name> <operator pos:start="607:36" pos:end="607:36">+</operator> <name pos:start="607:38" pos:end="607:49"><name pos:start="607:38" pos:end="607:38">s</name><operator pos:start="607:39" pos:end="607:40">-&gt;</operator><name pos:start="607:41" pos:end="607:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="609:15" pos:end="613:13">else <block pos:start="609:20" pos:end="613:13">{<block_content pos:start="611:17" pos:end="611:42">

                <expr_stmt pos:start="611:17" pos:end="611:42"><expr pos:start="611:17" pos:end="611:41"><call pos:start="611:17" pos:end="611:41"><name pos:start="611:17" pos:end="611:33">gen_op_mov_reg_T0</name><argument_list pos:start="611:34" pos:end="611:41">(<argument pos:start="611:35" pos:end="611:36"><expr pos:start="611:35" pos:end="611:36"><name pos:start="611:35" pos:end="611:36">ot</name></expr></argument>, <argument pos:start="611:39" pos:end="611:40"><expr pos:start="611:39" pos:end="611:40"><name pos:start="611:39" pos:end="611:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="615:13" pos:end="615:35"><expr pos:start="615:13" pos:end="615:34"><call pos:start="615:13" pos:end="615:34"><name pos:start="615:13" pos:end="615:32">gen_op_update_neg_cc</name><argument_list pos:start="615:33" pos:end="615:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="617:13" pos:end="617:39"><expr pos:start="617:13" pos:end="617:38"><name pos:start="617:13" pos:end="617:20"><name pos:start="617:13" pos:end="617:13">s</name><operator pos:start="617:14" pos:end="617:15">-&gt;</operator><name pos:start="617:16" pos:end="617:20">cc_op</name></name> <operator pos:start="617:22" pos:end="617:22">=</operator> <name pos:start="617:24" pos:end="617:33">CC_OP_SUBB</name> <operator pos:start="617:35" pos:end="617:35">+</operator> <name pos:start="617:37" pos:end="617:38">ot</name></expr>;</expr_stmt>

            <break pos:start="619:13" pos:end="619:18">break;</break>

        <case pos:start="621:9" pos:end="621:15">case <expr pos:start="621:14" pos:end="621:14"><literal type="number" pos:start="621:14" pos:end="621:14">4</literal></expr>:</case> <comment type="block" pos:start="621:17" pos:end="621:25">/* mul */</comment>

            <switch pos:start="623:13" pos:end="749:13">switch<condition pos:start="623:19" pos:end="623:22">(<expr pos:start="623:20" pos:end="623:21"><name pos:start="623:20" pos:end="623:21">ot</name></expr>)</condition> <block pos:start="623:24" pos:end="749:13">{<block_content pos:start="625:13" pos:end="748:0">

            <case pos:start="625:13" pos:end="625:25">case <expr pos:start="625:18" pos:end="625:24"><name pos:start="625:18" pos:end="625:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="627:17" pos:end="627:53"><expr pos:start="627:17" pos:end="627:52"><call pos:start="627:17" pos:end="627:52"><name pos:start="627:17" pos:end="627:33">gen_op_mov_TN_reg</name><argument_list pos:start="627:34" pos:end="627:52">(<argument pos:start="627:35" pos:end="627:41"><expr pos:start="627:35" pos:end="627:41"><name pos:start="627:35" pos:end="627:41">OT_BYTE</name></expr></argument>, <argument pos:start="627:44" pos:end="627:44"><expr pos:start="627:44" pos:end="627:44"><literal type="number" pos:start="627:44" pos:end="627:44">1</literal></expr></argument>, <argument pos:start="627:47" pos:end="627:51"><expr pos:start="627:47" pos:end="627:51"><name pos:start="627:47" pos:end="627:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="629:17" pos:end="629:53"><expr pos:start="629:17" pos:end="629:52"><call pos:start="629:17" pos:end="629:52"><name pos:start="629:17" pos:end="629:32">tcg_gen_ext8u_tl</name><argument_list pos:start="629:33" pos:end="629:52">(<argument pos:start="629:34" pos:end="629:41"><expr pos:start="629:34" pos:end="629:41"><name pos:start="629:34" pos:end="629:41"><name pos:start="629:34" pos:end="629:38">cpu_T</name><index pos:start="629:39" pos:end="629:41">[<expr pos:start="629:40" pos:end="629:40"><literal type="number" pos:start="629:40" pos:end="629:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="629:44" pos:end="629:51"><expr pos:start="629:44" pos:end="629:51"><name pos:start="629:44" pos:end="629:51"><name pos:start="629:44" pos:end="629:48">cpu_T</name><index pos:start="629:49" pos:end="629:51">[<expr pos:start="629:50" pos:end="629:50"><literal type="number" pos:start="629:50" pos:end="629:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="631:17" pos:end="631:53"><expr pos:start="631:17" pos:end="631:52"><call pos:start="631:17" pos:end="631:52"><name pos:start="631:17" pos:end="631:32">tcg_gen_ext8u_tl</name><argument_list pos:start="631:33" pos:end="631:52">(<argument pos:start="631:34" pos:end="631:41"><expr pos:start="631:34" pos:end="631:41"><name pos:start="631:34" pos:end="631:41"><name pos:start="631:34" pos:end="631:38">cpu_T</name><index pos:start="631:39" pos:end="631:41">[<expr pos:start="631:40" pos:end="631:40"><literal type="number" pos:start="631:40" pos:end="631:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="631:44" pos:end="631:51"><expr pos:start="631:44" pos:end="631:51"><name pos:start="631:44" pos:end="631:51"><name pos:start="631:44" pos:end="631:48">cpu_T</name><index pos:start="631:49" pos:end="631:51">[<expr pos:start="631:50" pos:end="631:50"><literal type="number" pos:start="631:50" pos:end="631:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="633:17" pos:end="633:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="635:17" pos:end="635:61"><expr pos:start="635:17" pos:end="635:60"><call pos:start="635:17" pos:end="635:60"><name pos:start="635:17" pos:end="635:30">tcg_gen_mul_tl</name><argument_list pos:start="635:31" pos:end="635:60">(<argument pos:start="635:32" pos:end="635:39"><expr pos:start="635:32" pos:end="635:39"><name pos:start="635:32" pos:end="635:39"><name pos:start="635:32" pos:end="635:36">cpu_T</name><index pos:start="635:37" pos:end="635:39">[<expr pos:start="635:38" pos:end="635:38"><literal type="number" pos:start="635:38" pos:end="635:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="635:42" pos:end="635:49"><expr pos:start="635:42" pos:end="635:49"><name pos:start="635:42" pos:end="635:49"><name pos:start="635:42" pos:end="635:46">cpu_T</name><index pos:start="635:47" pos:end="635:49">[<expr pos:start="635:48" pos:end="635:48"><literal type="number" pos:start="635:48" pos:end="635:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="635:52" pos:end="635:59"><expr pos:start="635:52" pos:end="635:59"><name pos:start="635:52" pos:end="635:59"><name pos:start="635:52" pos:end="635:56">cpu_T</name><index pos:start="635:57" pos:end="635:59">[<expr pos:start="635:58" pos:end="635:58"><literal type="number" pos:start="635:58" pos:end="635:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="637:17" pos:end="637:50"><expr pos:start="637:17" pos:end="637:49"><call pos:start="637:17" pos:end="637:49"><name pos:start="637:17" pos:end="637:33">gen_op_mov_reg_T0</name><argument_list pos:start="637:34" pos:end="637:49">(<argument pos:start="637:35" pos:end="637:41"><expr pos:start="637:35" pos:end="637:41"><name pos:start="637:35" pos:end="637:41">OT_WORD</name></expr></argument>, <argument pos:start="637:44" pos:end="637:48"><expr pos:start="637:44" pos:end="637:48"><name pos:start="637:44" pos:end="637:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="639:17" pos:end="639:53"><expr pos:start="639:17" pos:end="639:52"><call pos:start="639:17" pos:end="639:52"><name pos:start="639:17" pos:end="639:30">tcg_gen_mov_tl</name><argument_list pos:start="639:31" pos:end="639:52">(<argument pos:start="639:32" pos:end="639:41"><expr pos:start="639:32" pos:end="639:41"><name pos:start="639:32" pos:end="639:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="639:44" pos:end="639:51"><expr pos:start="639:44" pos:end="639:51"><name pos:start="639:44" pos:end="639:51"><name pos:start="639:44" pos:end="639:48">cpu_T</name><index pos:start="639:49" pos:end="639:51">[<expr pos:start="639:50" pos:end="639:50"><literal type="number" pos:start="639:50" pos:end="639:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="641:17" pos:end="641:62"><expr pos:start="641:17" pos:end="641:61"><call pos:start="641:17" pos:end="641:61"><name pos:start="641:17" pos:end="641:31">tcg_gen_andi_tl</name><argument_list pos:start="641:32" pos:end="641:61">(<argument pos:start="641:33" pos:end="641:42"><expr pos:start="641:33" pos:end="641:42"><name pos:start="641:33" pos:end="641:42">cpu_cc_src</name></expr></argument>, <argument pos:start="641:45" pos:end="641:52"><expr pos:start="641:45" pos:end="641:52"><name pos:start="641:45" pos:end="641:52"><name pos:start="641:45" pos:end="641:49">cpu_T</name><index pos:start="641:50" pos:end="641:52">[<expr pos:start="641:51" pos:end="641:51"><literal type="number" pos:start="641:51" pos:end="641:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="641:55" pos:end="641:60"><expr pos:start="641:55" pos:end="641:60"><literal type="number" pos:start="641:55" pos:end="641:60">0xff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="643:17" pos:end="643:38"><expr pos:start="643:17" pos:end="643:37"><name pos:start="643:17" pos:end="643:24"><name pos:start="643:17" pos:end="643:17">s</name><operator pos:start="643:18" pos:end="643:19">-&gt;</operator><name pos:start="643:20" pos:end="643:24">cc_op</name></name> <operator pos:start="643:26" pos:end="643:26">=</operator> <name pos:start="643:28" pos:end="643:37">CC_OP_MULB</name></expr>;</expr_stmt>

                <break pos:start="645:17" pos:end="645:22">break;</break>

            <case pos:start="647:13" pos:end="647:25">case <expr pos:start="647:18" pos:end="647:24"><name pos:start="647:18" pos:end="647:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="649:17" pos:end="649:53"><expr pos:start="649:17" pos:end="649:52"><call pos:start="649:17" pos:end="649:52"><name pos:start="649:17" pos:end="649:33">gen_op_mov_TN_reg</name><argument_list pos:start="649:34" pos:end="649:52">(<argument pos:start="649:35" pos:end="649:41"><expr pos:start="649:35" pos:end="649:41"><name pos:start="649:35" pos:end="649:41">OT_WORD</name></expr></argument>, <argument pos:start="649:44" pos:end="649:44"><expr pos:start="649:44" pos:end="649:44"><literal type="number" pos:start="649:44" pos:end="649:44">1</literal></expr></argument>, <argument pos:start="649:47" pos:end="649:51"><expr pos:start="649:47" pos:end="649:51"><name pos:start="649:47" pos:end="649:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="651:17" pos:end="651:54"><expr pos:start="651:17" pos:end="651:53"><call pos:start="651:17" pos:end="651:53"><name pos:start="651:17" pos:end="651:33">tcg_gen_ext16u_tl</name><argument_list pos:start="651:34" pos:end="651:53">(<argument pos:start="651:35" pos:end="651:42"><expr pos:start="651:35" pos:end="651:42"><name pos:start="651:35" pos:end="651:42"><name pos:start="651:35" pos:end="651:39">cpu_T</name><index pos:start="651:40" pos:end="651:42">[<expr pos:start="651:41" pos:end="651:41"><literal type="number" pos:start="651:41" pos:end="651:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="651:45" pos:end="651:52"><expr pos:start="651:45" pos:end="651:52"><name pos:start="651:45" pos:end="651:52"><name pos:start="651:45" pos:end="651:49">cpu_T</name><index pos:start="651:50" pos:end="651:52">[<expr pos:start="651:51" pos:end="651:51"><literal type="number" pos:start="651:51" pos:end="651:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="653:17" pos:end="653:54"><expr pos:start="653:17" pos:end="653:53"><call pos:start="653:17" pos:end="653:53"><name pos:start="653:17" pos:end="653:33">tcg_gen_ext16u_tl</name><argument_list pos:start="653:34" pos:end="653:53">(<argument pos:start="653:35" pos:end="653:42"><expr pos:start="653:35" pos:end="653:42"><name pos:start="653:35" pos:end="653:42"><name pos:start="653:35" pos:end="653:39">cpu_T</name><index pos:start="653:40" pos:end="653:42">[<expr pos:start="653:41" pos:end="653:41"><literal type="number" pos:start="653:41" pos:end="653:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="653:45" pos:end="653:52"><expr pos:start="653:45" pos:end="653:52"><name pos:start="653:45" pos:end="653:52"><name pos:start="653:45" pos:end="653:49">cpu_T</name><index pos:start="653:50" pos:end="653:52">[<expr pos:start="653:51" pos:end="653:51"><literal type="number" pos:start="653:51" pos:end="653:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="655:17" pos:end="655:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="657:17" pos:end="657:61"><expr pos:start="657:17" pos:end="657:60"><call pos:start="657:17" pos:end="657:60"><name pos:start="657:17" pos:end="657:30">tcg_gen_mul_tl</name><argument_list pos:start="657:31" pos:end="657:60">(<argument pos:start="657:32" pos:end="657:39"><expr pos:start="657:32" pos:end="657:39"><name pos:start="657:32" pos:end="657:39"><name pos:start="657:32" pos:end="657:36">cpu_T</name><index pos:start="657:37" pos:end="657:39">[<expr pos:start="657:38" pos:end="657:38"><literal type="number" pos:start="657:38" pos:end="657:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="657:42" pos:end="657:49"><expr pos:start="657:42" pos:end="657:49"><name pos:start="657:42" pos:end="657:49"><name pos:start="657:42" pos:end="657:46">cpu_T</name><index pos:start="657:47" pos:end="657:49">[<expr pos:start="657:48" pos:end="657:48"><literal type="number" pos:start="657:48" pos:end="657:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="657:52" pos:end="657:59"><expr pos:start="657:52" pos:end="657:59"><name pos:start="657:52" pos:end="657:59"><name pos:start="657:52" pos:end="657:56">cpu_T</name><index pos:start="657:57" pos:end="657:59">[<expr pos:start="657:58" pos:end="657:58"><literal type="number" pos:start="657:58" pos:end="657:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="659:17" pos:end="659:50"><expr pos:start="659:17" pos:end="659:49"><call pos:start="659:17" pos:end="659:49"><name pos:start="659:17" pos:end="659:33">gen_op_mov_reg_T0</name><argument_list pos:start="659:34" pos:end="659:49">(<argument pos:start="659:35" pos:end="659:41"><expr pos:start="659:35" pos:end="659:41"><name pos:start="659:35" pos:end="659:41">OT_WORD</name></expr></argument>, <argument pos:start="659:44" pos:end="659:48"><expr pos:start="659:44" pos:end="659:48"><name pos:start="659:44" pos:end="659:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="661:17" pos:end="661:53"><expr pos:start="661:17" pos:end="661:52"><call pos:start="661:17" pos:end="661:52"><name pos:start="661:17" pos:end="661:30">tcg_gen_mov_tl</name><argument_list pos:start="661:31" pos:end="661:52">(<argument pos:start="661:32" pos:end="661:41"><expr pos:start="661:32" pos:end="661:41"><name pos:start="661:32" pos:end="661:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="661:44" pos:end="661:51"><expr pos:start="661:44" pos:end="661:51"><name pos:start="661:44" pos:end="661:51"><name pos:start="661:44" pos:end="661:48">cpu_T</name><index pos:start="661:49" pos:end="661:51">[<expr pos:start="661:50" pos:end="661:50"><literal type="number" pos:start="661:50" pos:end="661:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="663:17" pos:end="663:56"><expr pos:start="663:17" pos:end="663:55"><call pos:start="663:17" pos:end="663:55"><name pos:start="663:17" pos:end="663:31">tcg_gen_shri_tl</name><argument_list pos:start="663:32" pos:end="663:55">(<argument pos:start="663:33" pos:end="663:40"><expr pos:start="663:33" pos:end="663:40"><name pos:start="663:33" pos:end="663:40"><name pos:start="663:33" pos:end="663:37">cpu_T</name><index pos:start="663:38" pos:end="663:40">[<expr pos:start="663:39" pos:end="663:39"><literal type="number" pos:start="663:39" pos:end="663:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="663:43" pos:end="663:50"><expr pos:start="663:43" pos:end="663:50"><name pos:start="663:43" pos:end="663:50"><name pos:start="663:43" pos:end="663:47">cpu_T</name><index pos:start="663:48" pos:end="663:50">[<expr pos:start="663:49" pos:end="663:49"><literal type="number" pos:start="663:49" pos:end="663:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="663:53" pos:end="663:54"><expr pos:start="663:53" pos:end="663:54"><literal type="number" pos:start="663:53" pos:end="663:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="665:17" pos:end="665:50"><expr pos:start="665:17" pos:end="665:49"><call pos:start="665:17" pos:end="665:49"><name pos:start="665:17" pos:end="665:33">gen_op_mov_reg_T0</name><argument_list pos:start="665:34" pos:end="665:49">(<argument pos:start="665:35" pos:end="665:41"><expr pos:start="665:35" pos:end="665:41"><name pos:start="665:35" pos:end="665:41">OT_WORD</name></expr></argument>, <argument pos:start="665:44" pos:end="665:48"><expr pos:start="665:44" pos:end="665:48"><name pos:start="665:44" pos:end="665:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="667:17" pos:end="667:53"><expr pos:start="667:17" pos:end="667:52"><call pos:start="667:17" pos:end="667:52"><name pos:start="667:17" pos:end="667:30">tcg_gen_mov_tl</name><argument_list pos:start="667:31" pos:end="667:52">(<argument pos:start="667:32" pos:end="667:41"><expr pos:start="667:32" pos:end="667:41"><name pos:start="667:32" pos:end="667:41">cpu_cc_src</name></expr></argument>, <argument pos:start="667:44" pos:end="667:51"><expr pos:start="667:44" pos:end="667:51"><name pos:start="667:44" pos:end="667:51"><name pos:start="667:44" pos:end="667:48">cpu_T</name><index pos:start="667:49" pos:end="667:51">[<expr pos:start="667:50" pos:end="667:50"><literal type="number" pos:start="667:50" pos:end="667:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="669:17" pos:end="669:38"><expr pos:start="669:17" pos:end="669:37"><name pos:start="669:17" pos:end="669:24"><name pos:start="669:17" pos:end="669:17">s</name><operator pos:start="669:18" pos:end="669:19">-&gt;</operator><name pos:start="669:20" pos:end="669:24">cc_op</name></name> <operator pos:start="669:26" pos:end="669:26">=</operator> <name pos:start="669:28" pos:end="669:37">CC_OP_MULW</name></expr>;</expr_stmt>

                <break pos:start="671:17" pos:end="671:22">break;</break>

            <default pos:start="673:13" pos:end="673:20">default:</default>

            <case pos:start="675:13" pos:end="678:0">case <expr pos:start="675:18" pos:end="675:24"><name pos:start="675:18" pos:end="675:24">OT_LONG</name></expr>:</case>

<cpp:ifdef pos:start="677:1" pos:end="677:20">#<cpp:directive pos:start="677:2" pos:end="677:6">ifdef</cpp:directive> <name pos:start="677:8" pos:end="677:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="679:17" pos:end="679:53"><expr pos:start="679:17" pos:end="679:52"><call pos:start="679:17" pos:end="679:52"><name pos:start="679:17" pos:end="679:33">gen_op_mov_TN_reg</name><argument_list pos:start="679:34" pos:end="679:52">(<argument pos:start="679:35" pos:end="679:41"><expr pos:start="679:35" pos:end="679:41"><name pos:start="679:35" pos:end="679:41">OT_LONG</name></expr></argument>, <argument pos:start="679:44" pos:end="679:44"><expr pos:start="679:44" pos:end="679:44"><literal type="number" pos:start="679:44" pos:end="679:44">1</literal></expr></argument>, <argument pos:start="679:47" pos:end="679:51"><expr pos:start="679:47" pos:end="679:51"><name pos:start="679:47" pos:end="679:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="681:17" pos:end="681:54"><expr pos:start="681:17" pos:end="681:53"><call pos:start="681:17" pos:end="681:53"><name pos:start="681:17" pos:end="681:33">tcg_gen_ext32u_tl</name><argument_list pos:start="681:34" pos:end="681:53">(<argument pos:start="681:35" pos:end="681:42"><expr pos:start="681:35" pos:end="681:42"><name pos:start="681:35" pos:end="681:42"><name pos:start="681:35" pos:end="681:39">cpu_T</name><index pos:start="681:40" pos:end="681:42">[<expr pos:start="681:41" pos:end="681:41"><literal type="number" pos:start="681:41" pos:end="681:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="681:45" pos:end="681:52"><expr pos:start="681:45" pos:end="681:52"><name pos:start="681:45" pos:end="681:52"><name pos:start="681:45" pos:end="681:49">cpu_T</name><index pos:start="681:50" pos:end="681:52">[<expr pos:start="681:51" pos:end="681:51"><literal type="number" pos:start="681:51" pos:end="681:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="683:17" pos:end="683:54"><expr pos:start="683:17" pos:end="683:53"><call pos:start="683:17" pos:end="683:53"><name pos:start="683:17" pos:end="683:33">tcg_gen_ext32u_tl</name><argument_list pos:start="683:34" pos:end="683:53">(<argument pos:start="683:35" pos:end="683:42"><expr pos:start="683:35" pos:end="683:42"><name pos:start="683:35" pos:end="683:42"><name pos:start="683:35" pos:end="683:39">cpu_T</name><index pos:start="683:40" pos:end="683:42">[<expr pos:start="683:41" pos:end="683:41"><literal type="number" pos:start="683:41" pos:end="683:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="683:45" pos:end="683:52"><expr pos:start="683:45" pos:end="683:52"><name pos:start="683:45" pos:end="683:52"><name pos:start="683:45" pos:end="683:49">cpu_T</name><index pos:start="683:50" pos:end="683:52">[<expr pos:start="683:51" pos:end="683:51"><literal type="number" pos:start="683:51" pos:end="683:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="685:17" pos:end="685:61"><expr pos:start="685:17" pos:end="685:60"><call pos:start="685:17" pos:end="685:60"><name pos:start="685:17" pos:end="685:30">tcg_gen_mul_tl</name><argument_list pos:start="685:31" pos:end="685:60">(<argument pos:start="685:32" pos:end="685:39"><expr pos:start="685:32" pos:end="685:39"><name pos:start="685:32" pos:end="685:39"><name pos:start="685:32" pos:end="685:36">cpu_T</name><index pos:start="685:37" pos:end="685:39">[<expr pos:start="685:38" pos:end="685:38"><literal type="number" pos:start="685:38" pos:end="685:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="685:42" pos:end="685:49"><expr pos:start="685:42" pos:end="685:49"><name pos:start="685:42" pos:end="685:49"><name pos:start="685:42" pos:end="685:46">cpu_T</name><index pos:start="685:47" pos:end="685:49">[<expr pos:start="685:48" pos:end="685:48"><literal type="number" pos:start="685:48" pos:end="685:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="685:52" pos:end="685:59"><expr pos:start="685:52" pos:end="685:59"><name pos:start="685:52" pos:end="685:59"><name pos:start="685:52" pos:end="685:56">cpu_T</name><index pos:start="685:57" pos:end="685:59">[<expr pos:start="685:58" pos:end="685:58"><literal type="number" pos:start="685:58" pos:end="685:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="687:17" pos:end="687:50"><expr pos:start="687:17" pos:end="687:49"><call pos:start="687:17" pos:end="687:49"><name pos:start="687:17" pos:end="687:33">gen_op_mov_reg_T0</name><argument_list pos:start="687:34" pos:end="687:49">(<argument pos:start="687:35" pos:end="687:41"><expr pos:start="687:35" pos:end="687:41"><name pos:start="687:35" pos:end="687:41">OT_LONG</name></expr></argument>, <argument pos:start="687:44" pos:end="687:48"><expr pos:start="687:44" pos:end="687:48"><name pos:start="687:44" pos:end="687:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="689:17" pos:end="689:53"><expr pos:start="689:17" pos:end="689:52"><call pos:start="689:17" pos:end="689:52"><name pos:start="689:17" pos:end="689:30">tcg_gen_mov_tl</name><argument_list pos:start="689:31" pos:end="689:52">(<argument pos:start="689:32" pos:end="689:41"><expr pos:start="689:32" pos:end="689:41"><name pos:start="689:32" pos:end="689:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="689:44" pos:end="689:51"><expr pos:start="689:44" pos:end="689:51"><name pos:start="689:44" pos:end="689:51"><name pos:start="689:44" pos:end="689:48">cpu_T</name><index pos:start="689:49" pos:end="689:51">[<expr pos:start="689:50" pos:end="689:50"><literal type="number" pos:start="689:50" pos:end="689:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="691:17" pos:end="691:56"><expr pos:start="691:17" pos:end="691:55"><call pos:start="691:17" pos:end="691:55"><name pos:start="691:17" pos:end="691:31">tcg_gen_shri_tl</name><argument_list pos:start="691:32" pos:end="691:55">(<argument pos:start="691:33" pos:end="691:40"><expr pos:start="691:33" pos:end="691:40"><name pos:start="691:33" pos:end="691:40"><name pos:start="691:33" pos:end="691:37">cpu_T</name><index pos:start="691:38" pos:end="691:40">[<expr pos:start="691:39" pos:end="691:39"><literal type="number" pos:start="691:39" pos:end="691:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="691:43" pos:end="691:50"><expr pos:start="691:43" pos:end="691:50"><name pos:start="691:43" pos:end="691:50"><name pos:start="691:43" pos:end="691:47">cpu_T</name><index pos:start="691:48" pos:end="691:50">[<expr pos:start="691:49" pos:end="691:49"><literal type="number" pos:start="691:49" pos:end="691:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="691:53" pos:end="691:54"><expr pos:start="691:53" pos:end="691:54"><literal type="number" pos:start="691:53" pos:end="691:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="693:17" pos:end="693:50"><expr pos:start="693:17" pos:end="693:49"><call pos:start="693:17" pos:end="693:49"><name pos:start="693:17" pos:end="693:33">gen_op_mov_reg_T0</name><argument_list pos:start="693:34" pos:end="693:49">(<argument pos:start="693:35" pos:end="693:41"><expr pos:start="693:35" pos:end="693:41"><name pos:start="693:35" pos:end="693:41">OT_LONG</name></expr></argument>, <argument pos:start="693:44" pos:end="693:48"><expr pos:start="693:44" pos:end="693:48"><name pos:start="693:44" pos:end="693:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="695:17" pos:end="698:0"><expr pos:start="695:17" pos:end="695:52"><call pos:start="695:17" pos:end="695:52"><name pos:start="695:17" pos:end="695:30">tcg_gen_mov_tl</name><argument_list pos:start="695:31" pos:end="695:52">(<argument pos:start="695:32" pos:end="695:41"><expr pos:start="695:32" pos:end="695:41"><name pos:start="695:32" pos:end="695:41">cpu_cc_src</name></expr></argument>, <argument pos:start="695:44" pos:end="695:51"><expr pos:start="695:44" pos:end="695:51"><name pos:start="695:44" pos:end="695:51"><name pos:start="695:44" pos:end="695:48">cpu_T</name><index pos:start="695:49" pos:end="695:51">[<expr pos:start="695:50" pos:end="695:50"><literal type="number" pos:start="695:50" pos:end="695:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="697:1" pos:end="697:5">#<cpp:directive pos:start="697:2" pos:end="697:5">else</cpp:directive></cpp:else>

                <block pos:start="699:17" pos:end="732:0">{<block_content pos:start="701:21" pos:end="727:57">

                    <decl_stmt pos:start="701:21" pos:end="701:36"><decl pos:start="701:21" pos:end="701:31"><type pos:start="701:21" pos:end="701:28"><name pos:start="701:21" pos:end="701:28">TCGv_i64</name></type> <name pos:start="701:30" pos:end="701:31">t0</name></decl>, <decl pos:start="701:34" pos:end="701:35"><type ref="prev" pos:start="701:21" pos:end="701:28"/><name pos:start="701:34" pos:end="701:35">t1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="703:21" pos:end="703:44"><expr pos:start="703:21" pos:end="703:43"><name pos:start="703:21" pos:end="703:22">t0</name> <operator pos:start="703:24" pos:end="703:24">=</operator> <call pos:start="703:26" pos:end="703:43"><name pos:start="703:26" pos:end="703:41">tcg_temp_new_i64</name><argument_list pos:start="703:42" pos:end="703:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="705:21" pos:end="705:44"><expr pos:start="705:21" pos:end="705:43"><name pos:start="705:21" pos:end="705:22">t1</name> <operator pos:start="705:24" pos:end="705:24">=</operator> <call pos:start="705:26" pos:end="705:43"><name pos:start="705:26" pos:end="705:41">tcg_temp_new_i64</name><argument_list pos:start="705:42" pos:end="705:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="707:21" pos:end="707:57"><expr pos:start="707:21" pos:end="707:56"><call pos:start="707:21" pos:end="707:56"><name pos:start="707:21" pos:end="707:37">gen_op_mov_TN_reg</name><argument_list pos:start="707:38" pos:end="707:56">(<argument pos:start="707:39" pos:end="707:45"><expr pos:start="707:39" pos:end="707:45"><name pos:start="707:39" pos:end="707:45">OT_LONG</name></expr></argument>, <argument pos:start="707:48" pos:end="707:48"><expr pos:start="707:48" pos:end="707:48"><literal type="number" pos:start="707:48" pos:end="707:48">1</literal></expr></argument>, <argument pos:start="707:51" pos:end="707:55"><expr pos:start="707:51" pos:end="707:55"><name pos:start="707:51" pos:end="707:55">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="709:21" pos:end="709:55"><expr pos:start="709:21" pos:end="709:54"><call pos:start="709:21" pos:end="709:54"><name pos:start="709:21" pos:end="709:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="709:41" pos:end="709:54">(<argument pos:start="709:42" pos:end="709:43"><expr pos:start="709:42" pos:end="709:43"><name pos:start="709:42" pos:end="709:43">t0</name></expr></argument>, <argument pos:start="709:46" pos:end="709:53"><expr pos:start="709:46" pos:end="709:53"><name pos:start="709:46" pos:end="709:53"><name pos:start="709:46" pos:end="709:50">cpu_T</name><index pos:start="709:51" pos:end="709:53">[<expr pos:start="709:52" pos:end="709:52"><literal type="number" pos:start="709:52" pos:end="709:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="711:21" pos:end="711:55"><expr pos:start="711:21" pos:end="711:54"><call pos:start="711:21" pos:end="711:54"><name pos:start="711:21" pos:end="711:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="711:41" pos:end="711:54">(<argument pos:start="711:42" pos:end="711:43"><expr pos:start="711:42" pos:end="711:43"><name pos:start="711:42" pos:end="711:43">t1</name></expr></argument>, <argument pos:start="711:46" pos:end="711:53"><expr pos:start="711:46" pos:end="711:53"><name pos:start="711:46" pos:end="711:53"><name pos:start="711:46" pos:end="711:50">cpu_T</name><index pos:start="711:51" pos:end="711:53">[<expr pos:start="711:52" pos:end="711:52"><literal type="number" pos:start="711:52" pos:end="711:52">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="713:21" pos:end="713:48"><expr pos:start="713:21" pos:end="713:47"><call pos:start="713:21" pos:end="713:47"><name pos:start="713:21" pos:end="713:35">tcg_gen_mul_i64</name><argument_list pos:start="713:36" pos:end="713:47">(<argument pos:start="713:37" pos:end="713:38"><expr pos:start="713:37" pos:end="713:38"><name pos:start="713:37" pos:end="713:38">t0</name></expr></argument>, <argument pos:start="713:41" pos:end="713:42"><expr pos:start="713:41" pos:end="713:42"><name pos:start="713:41" pos:end="713:42">t0</name></expr></argument>, <argument pos:start="713:45" pos:end="713:46"><expr pos:start="713:45" pos:end="713:46"><name pos:start="713:45" pos:end="713:46">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="715:21" pos:end="715:56"><expr pos:start="715:21" pos:end="715:55"><call pos:start="715:21" pos:end="715:55"><name pos:start="715:21" pos:end="715:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="715:42" pos:end="715:55">(<argument pos:start="715:43" pos:end="715:50"><expr pos:start="715:43" pos:end="715:50"><name pos:start="715:43" pos:end="715:50"><name pos:start="715:43" pos:end="715:47">cpu_T</name><index pos:start="715:48" pos:end="715:50">[<expr pos:start="715:49" pos:end="715:49"><literal type="number" pos:start="715:49" pos:end="715:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="715:53" pos:end="715:54"><expr pos:start="715:53" pos:end="715:54"><name pos:start="715:53" pos:end="715:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="717:21" pos:end="717:54"><expr pos:start="717:21" pos:end="717:53"><call pos:start="717:21" pos:end="717:53"><name pos:start="717:21" pos:end="717:37">gen_op_mov_reg_T0</name><argument_list pos:start="717:38" pos:end="717:53">(<argument pos:start="717:39" pos:end="717:45"><expr pos:start="717:39" pos:end="717:45"><name pos:start="717:39" pos:end="717:45">OT_LONG</name></expr></argument>, <argument pos:start="717:48" pos:end="717:52"><expr pos:start="717:48" pos:end="717:52"><name pos:start="717:48" pos:end="717:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="719:21" pos:end="719:57"><expr pos:start="719:21" pos:end="719:56"><call pos:start="719:21" pos:end="719:56"><name pos:start="719:21" pos:end="719:34">tcg_gen_mov_tl</name><argument_list pos:start="719:35" pos:end="719:56">(<argument pos:start="719:36" pos:end="719:45"><expr pos:start="719:36" pos:end="719:45"><name pos:start="719:36" pos:end="719:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="719:48" pos:end="719:55"><expr pos:start="719:48" pos:end="719:55"><name pos:start="719:48" pos:end="719:55"><name pos:start="719:48" pos:end="719:52">cpu_T</name><index pos:start="719:53" pos:end="719:55">[<expr pos:start="719:54" pos:end="719:54"><literal type="number" pos:start="719:54" pos:end="719:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="721:21" pos:end="721:49"><expr pos:start="721:21" pos:end="721:48"><call pos:start="721:21" pos:end="721:48"><name pos:start="721:21" pos:end="721:36">tcg_gen_shri_i64</name><argument_list pos:start="721:37" pos:end="721:48">(<argument pos:start="721:38" pos:end="721:39"><expr pos:start="721:38" pos:end="721:39"><name pos:start="721:38" pos:end="721:39">t0</name></expr></argument>, <argument pos:start="721:42" pos:end="721:43"><expr pos:start="721:42" pos:end="721:43"><name pos:start="721:42" pos:end="721:43">t0</name></expr></argument>, <argument pos:start="721:46" pos:end="721:47"><expr pos:start="721:46" pos:end="721:47"><literal type="number" pos:start="721:46" pos:end="721:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="723:21" pos:end="723:56"><expr pos:start="723:21" pos:end="723:55"><call pos:start="723:21" pos:end="723:55"><name pos:start="723:21" pos:end="723:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="723:42" pos:end="723:55">(<argument pos:start="723:43" pos:end="723:50"><expr pos:start="723:43" pos:end="723:50"><name pos:start="723:43" pos:end="723:50"><name pos:start="723:43" pos:end="723:47">cpu_T</name><index pos:start="723:48" pos:end="723:50">[<expr pos:start="723:49" pos:end="723:49"><literal type="number" pos:start="723:49" pos:end="723:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="723:53" pos:end="723:54"><expr pos:start="723:53" pos:end="723:54"><name pos:start="723:53" pos:end="723:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="725:21" pos:end="725:54"><expr pos:start="725:21" pos:end="725:53"><call pos:start="725:21" pos:end="725:53"><name pos:start="725:21" pos:end="725:37">gen_op_mov_reg_T0</name><argument_list pos:start="725:38" pos:end="725:53">(<argument pos:start="725:39" pos:end="725:45"><expr pos:start="725:39" pos:end="725:45"><name pos:start="725:39" pos:end="725:45">OT_LONG</name></expr></argument>, <argument pos:start="725:48" pos:end="725:52"><expr pos:start="725:48" pos:end="725:52"><name pos:start="725:48" pos:end="725:52">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="727:21" pos:end="727:57"><expr pos:start="727:21" pos:end="727:56"><call pos:start="727:21" pos:end="727:56"><name pos:start="727:21" pos:end="727:34">tcg_gen_mov_tl</name><argument_list pos:start="727:35" pos:end="727:56">(<argument pos:start="727:36" pos:end="727:45"><expr pos:start="727:36" pos:end="727:45"><name pos:start="727:36" pos:end="727:45">cpu_cc_src</name></expr></argument>, <argument pos:start="727:48" pos:end="727:55"><expr pos:start="727:48" pos:end="727:55"><name pos:start="727:48" pos:end="727:55"><name pos:start="727:48" pos:end="727:52">cpu_T</name><index pos:start="727:53" pos:end="727:55">[<expr pos:start="727:54" pos:end="727:54"><literal type="number" pos:start="727:54" pos:end="727:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

<cpp:endif pos:start="731:1" pos:end="731:6">#<cpp:directive pos:start="731:2" pos:end="731:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="733:17" pos:end="733:38"><expr pos:start="733:17" pos:end="733:37"><name pos:start="733:17" pos:end="733:24"><name pos:start="733:17" pos:end="733:17">s</name><operator pos:start="733:18" pos:end="733:19">-&gt;</operator><name pos:start="733:20" pos:end="733:24">cc_op</name></name> <operator pos:start="733:26" pos:end="733:26">=</operator> <name pos:start="733:28" pos:end="733:37">CC_OP_MULL</name></expr>;</expr_stmt>

                <break pos:start="735:17" pos:end="738:0">break;</break>

<cpp:ifdef pos:start="737:1" pos:end="737:20">#<cpp:directive pos:start="737:2" pos:end="737:6">ifdef</cpp:directive> <name pos:start="737:8" pos:end="737:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="739:13" pos:end="739:25">case <expr pos:start="739:18" pos:end="739:24"><name pos:start="739:18" pos:end="739:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="741:17" pos:end="741:49"><expr pos:start="741:17" pos:end="741:48"><call pos:start="741:17" pos:end="741:48"><name pos:start="741:17" pos:end="741:38">gen_helper_mulq_EAX_T0</name><argument_list pos:start="741:39" pos:end="741:48">(<argument pos:start="741:40" pos:end="741:47"><expr pos:start="741:40" pos:end="741:47"><name pos:start="741:40" pos:end="741:47"><name pos:start="741:40" pos:end="741:44">cpu_T</name><index pos:start="741:45" pos:end="741:47">[<expr pos:start="741:46" pos:end="741:46"><literal type="number" pos:start="741:46" pos:end="741:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="743:17" pos:end="743:38"><expr pos:start="743:17" pos:end="743:37"><name pos:start="743:17" pos:end="743:24"><name pos:start="743:17" pos:end="743:17">s</name><operator pos:start="743:18" pos:end="743:19">-&gt;</operator><name pos:start="743:20" pos:end="743:24">cc_op</name></name> <operator pos:start="743:26" pos:end="743:26">=</operator> <name pos:start="743:28" pos:end="743:37">CC_OP_MULQ</name></expr>;</expr_stmt>

                <break pos:start="745:17" pos:end="748:0">break;</break>

<cpp:endif pos:start="747:1" pos:end="747:6">#<cpp:directive pos:start="747:2" pos:end="747:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="751:13" pos:end="751:18">break;</break>

        <case pos:start="753:9" pos:end="753:15">case <expr pos:start="753:14" pos:end="753:14"><literal type="number" pos:start="753:14" pos:end="753:14">5</literal></expr>:</case> <comment type="block" pos:start="753:17" pos:end="753:26">/* imul */</comment>

            <switch pos:start="755:13" pos:end="889:13">switch<condition pos:start="755:19" pos:end="755:22">(<expr pos:start="755:20" pos:end="755:21"><name pos:start="755:20" pos:end="755:21">ot</name></expr>)</condition> <block pos:start="755:24" pos:end="889:13">{<block_content pos:start="757:13" pos:end="888:0">

            <case pos:start="757:13" pos:end="757:25">case <expr pos:start="757:18" pos:end="757:24"><name pos:start="757:18" pos:end="757:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="759:17" pos:end="759:53"><expr pos:start="759:17" pos:end="759:52"><call pos:start="759:17" pos:end="759:52"><name pos:start="759:17" pos:end="759:33">gen_op_mov_TN_reg</name><argument_list pos:start="759:34" pos:end="759:52">(<argument pos:start="759:35" pos:end="759:41"><expr pos:start="759:35" pos:end="759:41"><name pos:start="759:35" pos:end="759:41">OT_BYTE</name></expr></argument>, <argument pos:start="759:44" pos:end="759:44"><expr pos:start="759:44" pos:end="759:44"><literal type="number" pos:start="759:44" pos:end="759:44">1</literal></expr></argument>, <argument pos:start="759:47" pos:end="759:51"><expr pos:start="759:47" pos:end="759:51"><name pos:start="759:47" pos:end="759:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="761:17" pos:end="761:53"><expr pos:start="761:17" pos:end="761:52"><call pos:start="761:17" pos:end="761:52"><name pos:start="761:17" pos:end="761:32">tcg_gen_ext8s_tl</name><argument_list pos:start="761:33" pos:end="761:52">(<argument pos:start="761:34" pos:end="761:41"><expr pos:start="761:34" pos:end="761:41"><name pos:start="761:34" pos:end="761:41"><name pos:start="761:34" pos:end="761:38">cpu_T</name><index pos:start="761:39" pos:end="761:41">[<expr pos:start="761:40" pos:end="761:40"><literal type="number" pos:start="761:40" pos:end="761:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="761:44" pos:end="761:51"><expr pos:start="761:44" pos:end="761:51"><name pos:start="761:44" pos:end="761:51"><name pos:start="761:44" pos:end="761:48">cpu_T</name><index pos:start="761:49" pos:end="761:51">[<expr pos:start="761:50" pos:end="761:50"><literal type="number" pos:start="761:50" pos:end="761:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="763:17" pos:end="763:53"><expr pos:start="763:17" pos:end="763:52"><call pos:start="763:17" pos:end="763:52"><name pos:start="763:17" pos:end="763:32">tcg_gen_ext8s_tl</name><argument_list pos:start="763:33" pos:end="763:52">(<argument pos:start="763:34" pos:end="763:41"><expr pos:start="763:34" pos:end="763:41"><name pos:start="763:34" pos:end="763:41"><name pos:start="763:34" pos:end="763:38">cpu_T</name><index pos:start="763:39" pos:end="763:41">[<expr pos:start="763:40" pos:end="763:40"><literal type="number" pos:start="763:40" pos:end="763:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="763:44" pos:end="763:51"><expr pos:start="763:44" pos:end="763:51"><name pos:start="763:44" pos:end="763:51"><name pos:start="763:44" pos:end="763:48">cpu_T</name><index pos:start="763:49" pos:end="763:51">[<expr pos:start="763:50" pos:end="763:50"><literal type="number" pos:start="763:50" pos:end="763:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="765:17" pos:end="765:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="767:17" pos:end="767:61"><expr pos:start="767:17" pos:end="767:60"><call pos:start="767:17" pos:end="767:60"><name pos:start="767:17" pos:end="767:30">tcg_gen_mul_tl</name><argument_list pos:start="767:31" pos:end="767:60">(<argument pos:start="767:32" pos:end="767:39"><expr pos:start="767:32" pos:end="767:39"><name pos:start="767:32" pos:end="767:39"><name pos:start="767:32" pos:end="767:36">cpu_T</name><index pos:start="767:37" pos:end="767:39">[<expr pos:start="767:38" pos:end="767:38"><literal type="number" pos:start="767:38" pos:end="767:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="767:42" pos:end="767:49"><expr pos:start="767:42" pos:end="767:49"><name pos:start="767:42" pos:end="767:49"><name pos:start="767:42" pos:end="767:46">cpu_T</name><index pos:start="767:47" pos:end="767:49">[<expr pos:start="767:48" pos:end="767:48"><literal type="number" pos:start="767:48" pos:end="767:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="767:52" pos:end="767:59"><expr pos:start="767:52" pos:end="767:59"><name pos:start="767:52" pos:end="767:59"><name pos:start="767:52" pos:end="767:56">cpu_T</name><index pos:start="767:57" pos:end="767:59">[<expr pos:start="767:58" pos:end="767:58"><literal type="number" pos:start="767:58" pos:end="767:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="769:17" pos:end="769:50"><expr pos:start="769:17" pos:end="769:49"><call pos:start="769:17" pos:end="769:49"><name pos:start="769:17" pos:end="769:33">gen_op_mov_reg_T0</name><argument_list pos:start="769:34" pos:end="769:49">(<argument pos:start="769:35" pos:end="769:41"><expr pos:start="769:35" pos:end="769:41"><name pos:start="769:35" pos:end="769:41">OT_WORD</name></expr></argument>, <argument pos:start="769:44" pos:end="769:48"><expr pos:start="769:44" pos:end="769:48"><name pos:start="769:44" pos:end="769:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="771:17" pos:end="771:53"><expr pos:start="771:17" pos:end="771:52"><call pos:start="771:17" pos:end="771:52"><name pos:start="771:17" pos:end="771:30">tcg_gen_mov_tl</name><argument_list pos:start="771:31" pos:end="771:52">(<argument pos:start="771:32" pos:end="771:41"><expr pos:start="771:32" pos:end="771:41"><name pos:start="771:32" pos:end="771:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="771:44" pos:end="771:51"><expr pos:start="771:44" pos:end="771:51"><name pos:start="771:44" pos:end="771:51"><name pos:start="771:44" pos:end="771:48">cpu_T</name><index pos:start="771:49" pos:end="771:51">[<expr pos:start="771:50" pos:end="771:50"><literal type="number" pos:start="771:50" pos:end="771:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="773:17" pos:end="773:53"><expr pos:start="773:17" pos:end="773:52"><call pos:start="773:17" pos:end="773:52"><name pos:start="773:17" pos:end="773:32">tcg_gen_ext8s_tl</name><argument_list pos:start="773:33" pos:end="773:52">(<argument pos:start="773:34" pos:end="773:41"><expr pos:start="773:34" pos:end="773:41"><name pos:start="773:34" pos:end="773:41">cpu_tmp0</name></expr></argument>, <argument pos:start="773:44" pos:end="773:51"><expr pos:start="773:44" pos:end="773:51"><name pos:start="773:44" pos:end="773:51"><name pos:start="773:44" pos:end="773:48">cpu_T</name><index pos:start="773:49" pos:end="773:51">[<expr pos:start="773:50" pos:end="773:50"><literal type="number" pos:start="773:50" pos:end="773:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="775:17" pos:end="775:63"><expr pos:start="775:17" pos:end="775:62"><call pos:start="775:17" pos:end="775:62"><name pos:start="775:17" pos:end="775:30">tcg_gen_sub_tl</name><argument_list pos:start="775:31" pos:end="775:62">(<argument pos:start="775:32" pos:end="775:41"><expr pos:start="775:32" pos:end="775:41"><name pos:start="775:32" pos:end="775:41">cpu_cc_src</name></expr></argument>, <argument pos:start="775:44" pos:end="775:51"><expr pos:start="775:44" pos:end="775:51"><name pos:start="775:44" pos:end="775:51"><name pos:start="775:44" pos:end="775:48">cpu_T</name><index pos:start="775:49" pos:end="775:51">[<expr pos:start="775:50" pos:end="775:50"><literal type="number" pos:start="775:50" pos:end="775:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="775:54" pos:end="775:61"><expr pos:start="775:54" pos:end="775:61"><name pos:start="775:54" pos:end="775:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="777:17" pos:end="777:38"><expr pos:start="777:17" pos:end="777:37"><name pos:start="777:17" pos:end="777:24"><name pos:start="777:17" pos:end="777:17">s</name><operator pos:start="777:18" pos:end="777:19">-&gt;</operator><name pos:start="777:20" pos:end="777:24">cc_op</name></name> <operator pos:start="777:26" pos:end="777:26">=</operator> <name pos:start="777:28" pos:end="777:37">CC_OP_MULB</name></expr>;</expr_stmt>

                <break pos:start="779:17" pos:end="779:22">break;</break>

            <case pos:start="781:13" pos:end="781:25">case <expr pos:start="781:18" pos:end="781:24"><name pos:start="781:18" pos:end="781:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="783:17" pos:end="783:53"><expr pos:start="783:17" pos:end="783:52"><call pos:start="783:17" pos:end="783:52"><name pos:start="783:17" pos:end="783:33">gen_op_mov_TN_reg</name><argument_list pos:start="783:34" pos:end="783:52">(<argument pos:start="783:35" pos:end="783:41"><expr pos:start="783:35" pos:end="783:41"><name pos:start="783:35" pos:end="783:41">OT_WORD</name></expr></argument>, <argument pos:start="783:44" pos:end="783:44"><expr pos:start="783:44" pos:end="783:44"><literal type="number" pos:start="783:44" pos:end="783:44">1</literal></expr></argument>, <argument pos:start="783:47" pos:end="783:51"><expr pos:start="783:47" pos:end="783:51"><name pos:start="783:47" pos:end="783:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="785:17" pos:end="785:54"><expr pos:start="785:17" pos:end="785:53"><call pos:start="785:17" pos:end="785:53"><name pos:start="785:17" pos:end="785:33">tcg_gen_ext16s_tl</name><argument_list pos:start="785:34" pos:end="785:53">(<argument pos:start="785:35" pos:end="785:42"><expr pos:start="785:35" pos:end="785:42"><name pos:start="785:35" pos:end="785:42"><name pos:start="785:35" pos:end="785:39">cpu_T</name><index pos:start="785:40" pos:end="785:42">[<expr pos:start="785:41" pos:end="785:41"><literal type="number" pos:start="785:41" pos:end="785:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="785:45" pos:end="785:52"><expr pos:start="785:45" pos:end="785:52"><name pos:start="785:45" pos:end="785:52"><name pos:start="785:45" pos:end="785:49">cpu_T</name><index pos:start="785:50" pos:end="785:52">[<expr pos:start="785:51" pos:end="785:51"><literal type="number" pos:start="785:51" pos:end="785:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="787:17" pos:end="787:54"><expr pos:start="787:17" pos:end="787:53"><call pos:start="787:17" pos:end="787:53"><name pos:start="787:17" pos:end="787:33">tcg_gen_ext16s_tl</name><argument_list pos:start="787:34" pos:end="787:53">(<argument pos:start="787:35" pos:end="787:42"><expr pos:start="787:35" pos:end="787:42"><name pos:start="787:35" pos:end="787:42"><name pos:start="787:35" pos:end="787:39">cpu_T</name><index pos:start="787:40" pos:end="787:42">[<expr pos:start="787:41" pos:end="787:41"><literal type="number" pos:start="787:41" pos:end="787:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="787:45" pos:end="787:52"><expr pos:start="787:45" pos:end="787:52"><name pos:start="787:45" pos:end="787:52"><name pos:start="787:45" pos:end="787:49">cpu_T</name><index pos:start="787:50" pos:end="787:52">[<expr pos:start="787:51" pos:end="787:51"><literal type="number" pos:start="787:51" pos:end="787:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="789:17" pos:end="789:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="791:17" pos:end="791:61"><expr pos:start="791:17" pos:end="791:60"><call pos:start="791:17" pos:end="791:60"><name pos:start="791:17" pos:end="791:30">tcg_gen_mul_tl</name><argument_list pos:start="791:31" pos:end="791:60">(<argument pos:start="791:32" pos:end="791:39"><expr pos:start="791:32" pos:end="791:39"><name pos:start="791:32" pos:end="791:39"><name pos:start="791:32" pos:end="791:36">cpu_T</name><index pos:start="791:37" pos:end="791:39">[<expr pos:start="791:38" pos:end="791:38"><literal type="number" pos:start="791:38" pos:end="791:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="791:42" pos:end="791:49"><expr pos:start="791:42" pos:end="791:49"><name pos:start="791:42" pos:end="791:49"><name pos:start="791:42" pos:end="791:46">cpu_T</name><index pos:start="791:47" pos:end="791:49">[<expr pos:start="791:48" pos:end="791:48"><literal type="number" pos:start="791:48" pos:end="791:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="791:52" pos:end="791:59"><expr pos:start="791:52" pos:end="791:59"><name pos:start="791:52" pos:end="791:59"><name pos:start="791:52" pos:end="791:56">cpu_T</name><index pos:start="791:57" pos:end="791:59">[<expr pos:start="791:58" pos:end="791:58"><literal type="number" pos:start="791:58" pos:end="791:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="793:17" pos:end="793:50"><expr pos:start="793:17" pos:end="793:49"><call pos:start="793:17" pos:end="793:49"><name pos:start="793:17" pos:end="793:33">gen_op_mov_reg_T0</name><argument_list pos:start="793:34" pos:end="793:49">(<argument pos:start="793:35" pos:end="793:41"><expr pos:start="793:35" pos:end="793:41"><name pos:start="793:35" pos:end="793:41">OT_WORD</name></expr></argument>, <argument pos:start="793:44" pos:end="793:48"><expr pos:start="793:44" pos:end="793:48"><name pos:start="793:44" pos:end="793:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="795:17" pos:end="795:53"><expr pos:start="795:17" pos:end="795:52"><call pos:start="795:17" pos:end="795:52"><name pos:start="795:17" pos:end="795:30">tcg_gen_mov_tl</name><argument_list pos:start="795:31" pos:end="795:52">(<argument pos:start="795:32" pos:end="795:41"><expr pos:start="795:32" pos:end="795:41"><name pos:start="795:32" pos:end="795:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="795:44" pos:end="795:51"><expr pos:start="795:44" pos:end="795:51"><name pos:start="795:44" pos:end="795:51"><name pos:start="795:44" pos:end="795:48">cpu_T</name><index pos:start="795:49" pos:end="795:51">[<expr pos:start="795:50" pos:end="795:50"><literal type="number" pos:start="795:50" pos:end="795:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="797:17" pos:end="797:54"><expr pos:start="797:17" pos:end="797:53"><call pos:start="797:17" pos:end="797:53"><name pos:start="797:17" pos:end="797:33">tcg_gen_ext16s_tl</name><argument_list pos:start="797:34" pos:end="797:53">(<argument pos:start="797:35" pos:end="797:42"><expr pos:start="797:35" pos:end="797:42"><name pos:start="797:35" pos:end="797:42">cpu_tmp0</name></expr></argument>, <argument pos:start="797:45" pos:end="797:52"><expr pos:start="797:45" pos:end="797:52"><name pos:start="797:45" pos:end="797:52"><name pos:start="797:45" pos:end="797:49">cpu_T</name><index pos:start="797:50" pos:end="797:52">[<expr pos:start="797:51" pos:end="797:51"><literal type="number" pos:start="797:51" pos:end="797:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="799:17" pos:end="799:63"><expr pos:start="799:17" pos:end="799:62"><call pos:start="799:17" pos:end="799:62"><name pos:start="799:17" pos:end="799:30">tcg_gen_sub_tl</name><argument_list pos:start="799:31" pos:end="799:62">(<argument pos:start="799:32" pos:end="799:41"><expr pos:start="799:32" pos:end="799:41"><name pos:start="799:32" pos:end="799:41">cpu_cc_src</name></expr></argument>, <argument pos:start="799:44" pos:end="799:51"><expr pos:start="799:44" pos:end="799:51"><name pos:start="799:44" pos:end="799:51"><name pos:start="799:44" pos:end="799:48">cpu_T</name><index pos:start="799:49" pos:end="799:51">[<expr pos:start="799:50" pos:end="799:50"><literal type="number" pos:start="799:50" pos:end="799:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="799:54" pos:end="799:61"><expr pos:start="799:54" pos:end="799:61"><name pos:start="799:54" pos:end="799:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="801:17" pos:end="801:56"><expr pos:start="801:17" pos:end="801:55"><call pos:start="801:17" pos:end="801:55"><name pos:start="801:17" pos:end="801:31">tcg_gen_shri_tl</name><argument_list pos:start="801:32" pos:end="801:55">(<argument pos:start="801:33" pos:end="801:40"><expr pos:start="801:33" pos:end="801:40"><name pos:start="801:33" pos:end="801:40"><name pos:start="801:33" pos:end="801:37">cpu_T</name><index pos:start="801:38" pos:end="801:40">[<expr pos:start="801:39" pos:end="801:39"><literal type="number" pos:start="801:39" pos:end="801:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="801:43" pos:end="801:50"><expr pos:start="801:43" pos:end="801:50"><name pos:start="801:43" pos:end="801:50"><name pos:start="801:43" pos:end="801:47">cpu_T</name><index pos:start="801:48" pos:end="801:50">[<expr pos:start="801:49" pos:end="801:49"><literal type="number" pos:start="801:49" pos:end="801:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="801:53" pos:end="801:54"><expr pos:start="801:53" pos:end="801:54"><literal type="number" pos:start="801:53" pos:end="801:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="803:17" pos:end="803:50"><expr pos:start="803:17" pos:end="803:49"><call pos:start="803:17" pos:end="803:49"><name pos:start="803:17" pos:end="803:33">gen_op_mov_reg_T0</name><argument_list pos:start="803:34" pos:end="803:49">(<argument pos:start="803:35" pos:end="803:41"><expr pos:start="803:35" pos:end="803:41"><name pos:start="803:35" pos:end="803:41">OT_WORD</name></expr></argument>, <argument pos:start="803:44" pos:end="803:48"><expr pos:start="803:44" pos:end="803:48"><name pos:start="803:44" pos:end="803:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="805:17" pos:end="805:38"><expr pos:start="805:17" pos:end="805:37"><name pos:start="805:17" pos:end="805:24"><name pos:start="805:17" pos:end="805:17">s</name><operator pos:start="805:18" pos:end="805:19">-&gt;</operator><name pos:start="805:20" pos:end="805:24">cc_op</name></name> <operator pos:start="805:26" pos:end="805:26">=</operator> <name pos:start="805:28" pos:end="805:37">CC_OP_MULW</name></expr>;</expr_stmt>

                <break pos:start="807:17" pos:end="807:22">break;</break>

            <default pos:start="809:13" pos:end="809:20">default:</default>

            <case pos:start="811:13" pos:end="814:0">case <expr pos:start="811:18" pos:end="811:24"><name pos:start="811:18" pos:end="811:24">OT_LONG</name></expr>:</case>

<cpp:ifdef pos:start="813:1" pos:end="813:20">#<cpp:directive pos:start="813:2" pos:end="813:6">ifdef</cpp:directive> <name pos:start="813:8" pos:end="813:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="815:17" pos:end="815:53"><expr pos:start="815:17" pos:end="815:52"><call pos:start="815:17" pos:end="815:52"><name pos:start="815:17" pos:end="815:33">gen_op_mov_TN_reg</name><argument_list pos:start="815:34" pos:end="815:52">(<argument pos:start="815:35" pos:end="815:41"><expr pos:start="815:35" pos:end="815:41"><name pos:start="815:35" pos:end="815:41">OT_LONG</name></expr></argument>, <argument pos:start="815:44" pos:end="815:44"><expr pos:start="815:44" pos:end="815:44"><literal type="number" pos:start="815:44" pos:end="815:44">1</literal></expr></argument>, <argument pos:start="815:47" pos:end="815:51"><expr pos:start="815:47" pos:end="815:51"><name pos:start="815:47" pos:end="815:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="817:17" pos:end="817:54"><expr pos:start="817:17" pos:end="817:53"><call pos:start="817:17" pos:end="817:53"><name pos:start="817:17" pos:end="817:33">tcg_gen_ext32s_tl</name><argument_list pos:start="817:34" pos:end="817:53">(<argument pos:start="817:35" pos:end="817:42"><expr pos:start="817:35" pos:end="817:42"><name pos:start="817:35" pos:end="817:42"><name pos:start="817:35" pos:end="817:39">cpu_T</name><index pos:start="817:40" pos:end="817:42">[<expr pos:start="817:41" pos:end="817:41"><literal type="number" pos:start="817:41" pos:end="817:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="817:45" pos:end="817:52"><expr pos:start="817:45" pos:end="817:52"><name pos:start="817:45" pos:end="817:52"><name pos:start="817:45" pos:end="817:49">cpu_T</name><index pos:start="817:50" pos:end="817:52">[<expr pos:start="817:51" pos:end="817:51"><literal type="number" pos:start="817:51" pos:end="817:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="819:17" pos:end="819:54"><expr pos:start="819:17" pos:end="819:53"><call pos:start="819:17" pos:end="819:53"><name pos:start="819:17" pos:end="819:33">tcg_gen_ext32s_tl</name><argument_list pos:start="819:34" pos:end="819:53">(<argument pos:start="819:35" pos:end="819:42"><expr pos:start="819:35" pos:end="819:42"><name pos:start="819:35" pos:end="819:42"><name pos:start="819:35" pos:end="819:39">cpu_T</name><index pos:start="819:40" pos:end="819:42">[<expr pos:start="819:41" pos:end="819:41"><literal type="number" pos:start="819:41" pos:end="819:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="819:45" pos:end="819:52"><expr pos:start="819:45" pos:end="819:52"><name pos:start="819:45" pos:end="819:52"><name pos:start="819:45" pos:end="819:49">cpu_T</name><index pos:start="819:50" pos:end="819:52">[<expr pos:start="819:51" pos:end="819:51"><literal type="number" pos:start="819:51" pos:end="819:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="821:17" pos:end="821:61"><expr pos:start="821:17" pos:end="821:60"><call pos:start="821:17" pos:end="821:60"><name pos:start="821:17" pos:end="821:30">tcg_gen_mul_tl</name><argument_list pos:start="821:31" pos:end="821:60">(<argument pos:start="821:32" pos:end="821:39"><expr pos:start="821:32" pos:end="821:39"><name pos:start="821:32" pos:end="821:39"><name pos:start="821:32" pos:end="821:36">cpu_T</name><index pos:start="821:37" pos:end="821:39">[<expr pos:start="821:38" pos:end="821:38"><literal type="number" pos:start="821:38" pos:end="821:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="821:42" pos:end="821:49"><expr pos:start="821:42" pos:end="821:49"><name pos:start="821:42" pos:end="821:49"><name pos:start="821:42" pos:end="821:46">cpu_T</name><index pos:start="821:47" pos:end="821:49">[<expr pos:start="821:48" pos:end="821:48"><literal type="number" pos:start="821:48" pos:end="821:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="821:52" pos:end="821:59"><expr pos:start="821:52" pos:end="821:59"><name pos:start="821:52" pos:end="821:59"><name pos:start="821:52" pos:end="821:56">cpu_T</name><index pos:start="821:57" pos:end="821:59">[<expr pos:start="821:58" pos:end="821:58"><literal type="number" pos:start="821:58" pos:end="821:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="823:17" pos:end="823:50"><expr pos:start="823:17" pos:end="823:49"><call pos:start="823:17" pos:end="823:49"><name pos:start="823:17" pos:end="823:33">gen_op_mov_reg_T0</name><argument_list pos:start="823:34" pos:end="823:49">(<argument pos:start="823:35" pos:end="823:41"><expr pos:start="823:35" pos:end="823:41"><name pos:start="823:35" pos:end="823:41">OT_LONG</name></expr></argument>, <argument pos:start="823:44" pos:end="823:48"><expr pos:start="823:44" pos:end="823:48"><name pos:start="823:44" pos:end="823:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="825:17" pos:end="825:53"><expr pos:start="825:17" pos:end="825:52"><call pos:start="825:17" pos:end="825:52"><name pos:start="825:17" pos:end="825:30">tcg_gen_mov_tl</name><argument_list pos:start="825:31" pos:end="825:52">(<argument pos:start="825:32" pos:end="825:41"><expr pos:start="825:32" pos:end="825:41"><name pos:start="825:32" pos:end="825:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="825:44" pos:end="825:51"><expr pos:start="825:44" pos:end="825:51"><name pos:start="825:44" pos:end="825:51"><name pos:start="825:44" pos:end="825:48">cpu_T</name><index pos:start="825:49" pos:end="825:51">[<expr pos:start="825:50" pos:end="825:50"><literal type="number" pos:start="825:50" pos:end="825:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="827:17" pos:end="827:54"><expr pos:start="827:17" pos:end="827:53"><call pos:start="827:17" pos:end="827:53"><name pos:start="827:17" pos:end="827:33">tcg_gen_ext32s_tl</name><argument_list pos:start="827:34" pos:end="827:53">(<argument pos:start="827:35" pos:end="827:42"><expr pos:start="827:35" pos:end="827:42"><name pos:start="827:35" pos:end="827:42">cpu_tmp0</name></expr></argument>, <argument pos:start="827:45" pos:end="827:52"><expr pos:start="827:45" pos:end="827:52"><name pos:start="827:45" pos:end="827:52"><name pos:start="827:45" pos:end="827:49">cpu_T</name><index pos:start="827:50" pos:end="827:52">[<expr pos:start="827:51" pos:end="827:51"><literal type="number" pos:start="827:51" pos:end="827:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="829:17" pos:end="829:63"><expr pos:start="829:17" pos:end="829:62"><call pos:start="829:17" pos:end="829:62"><name pos:start="829:17" pos:end="829:30">tcg_gen_sub_tl</name><argument_list pos:start="829:31" pos:end="829:62">(<argument pos:start="829:32" pos:end="829:41"><expr pos:start="829:32" pos:end="829:41"><name pos:start="829:32" pos:end="829:41">cpu_cc_src</name></expr></argument>, <argument pos:start="829:44" pos:end="829:51"><expr pos:start="829:44" pos:end="829:51"><name pos:start="829:44" pos:end="829:51"><name pos:start="829:44" pos:end="829:48">cpu_T</name><index pos:start="829:49" pos:end="829:51">[<expr pos:start="829:50" pos:end="829:50"><literal type="number" pos:start="829:50" pos:end="829:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="829:54" pos:end="829:61"><expr pos:start="829:54" pos:end="829:61"><name pos:start="829:54" pos:end="829:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="831:17" pos:end="831:56"><expr pos:start="831:17" pos:end="831:55"><call pos:start="831:17" pos:end="831:55"><name pos:start="831:17" pos:end="831:31">tcg_gen_shri_tl</name><argument_list pos:start="831:32" pos:end="831:55">(<argument pos:start="831:33" pos:end="831:40"><expr pos:start="831:33" pos:end="831:40"><name pos:start="831:33" pos:end="831:40"><name pos:start="831:33" pos:end="831:37">cpu_T</name><index pos:start="831:38" pos:end="831:40">[<expr pos:start="831:39" pos:end="831:39"><literal type="number" pos:start="831:39" pos:end="831:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="831:43" pos:end="831:50"><expr pos:start="831:43" pos:end="831:50"><name pos:start="831:43" pos:end="831:50"><name pos:start="831:43" pos:end="831:47">cpu_T</name><index pos:start="831:48" pos:end="831:50">[<expr pos:start="831:49" pos:end="831:49"><literal type="number" pos:start="831:49" pos:end="831:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="831:53" pos:end="831:54"><expr pos:start="831:53" pos:end="831:54"><literal type="number" pos:start="831:53" pos:end="831:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="833:17" pos:end="836:0"><expr pos:start="833:17" pos:end="833:49"><call pos:start="833:17" pos:end="833:49"><name pos:start="833:17" pos:end="833:33">gen_op_mov_reg_T0</name><argument_list pos:start="833:34" pos:end="833:49">(<argument pos:start="833:35" pos:end="833:41"><expr pos:start="833:35" pos:end="833:41"><name pos:start="833:35" pos:end="833:41">OT_LONG</name></expr></argument>, <argument pos:start="833:44" pos:end="833:48"><expr pos:start="833:44" pos:end="833:48"><name pos:start="833:44" pos:end="833:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="835:1" pos:end="835:5">#<cpp:directive pos:start="835:2" pos:end="835:5">else</cpp:directive></cpp:else>

                <block pos:start="837:17" pos:end="872:0">{<block_content pos:start="839:21" pos:end="867:67">

                    <decl_stmt pos:start="839:21" pos:end="839:36"><decl pos:start="839:21" pos:end="839:31"><type pos:start="839:21" pos:end="839:28"><name pos:start="839:21" pos:end="839:28">TCGv_i64</name></type> <name pos:start="839:30" pos:end="839:31">t0</name></decl>, <decl pos:start="839:34" pos:end="839:35"><type ref="prev" pos:start="839:21" pos:end="839:28"/><name pos:start="839:34" pos:end="839:35">t1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="841:21" pos:end="841:44"><expr pos:start="841:21" pos:end="841:43"><name pos:start="841:21" pos:end="841:22">t0</name> <operator pos:start="841:24" pos:end="841:24">=</operator> <call pos:start="841:26" pos:end="841:43"><name pos:start="841:26" pos:end="841:41">tcg_temp_new_i64</name><argument_list pos:start="841:42" pos:end="841:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="843:21" pos:end="843:44"><expr pos:start="843:21" pos:end="843:43"><name pos:start="843:21" pos:end="843:22">t1</name> <operator pos:start="843:24" pos:end="843:24">=</operator> <call pos:start="843:26" pos:end="843:43"><name pos:start="843:26" pos:end="843:41">tcg_temp_new_i64</name><argument_list pos:start="843:42" pos:end="843:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="845:21" pos:end="845:57"><expr pos:start="845:21" pos:end="845:56"><call pos:start="845:21" pos:end="845:56"><name pos:start="845:21" pos:end="845:37">gen_op_mov_TN_reg</name><argument_list pos:start="845:38" pos:end="845:56">(<argument pos:start="845:39" pos:end="845:45"><expr pos:start="845:39" pos:end="845:45"><name pos:start="845:39" pos:end="845:45">OT_LONG</name></expr></argument>, <argument pos:start="845:48" pos:end="845:48"><expr pos:start="845:48" pos:end="845:48"><literal type="number" pos:start="845:48" pos:end="845:48">1</literal></expr></argument>, <argument pos:start="845:51" pos:end="845:55"><expr pos:start="845:51" pos:end="845:55"><name pos:start="845:51" pos:end="845:55">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="847:21" pos:end="847:54"><expr pos:start="847:21" pos:end="847:53"><call pos:start="847:21" pos:end="847:53"><name pos:start="847:21" pos:end="847:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="847:40" pos:end="847:53">(<argument pos:start="847:41" pos:end="847:42"><expr pos:start="847:41" pos:end="847:42"><name pos:start="847:41" pos:end="847:42">t0</name></expr></argument>, <argument pos:start="847:45" pos:end="847:52"><expr pos:start="847:45" pos:end="847:52"><name pos:start="847:45" pos:end="847:52"><name pos:start="847:45" pos:end="847:49">cpu_T</name><index pos:start="847:50" pos:end="847:52">[<expr pos:start="847:51" pos:end="847:51"><literal type="number" pos:start="847:51" pos:end="847:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="849:21" pos:end="849:54"><expr pos:start="849:21" pos:end="849:53"><call pos:start="849:21" pos:end="849:53"><name pos:start="849:21" pos:end="849:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="849:40" pos:end="849:53">(<argument pos:start="849:41" pos:end="849:42"><expr pos:start="849:41" pos:end="849:42"><name pos:start="849:41" pos:end="849:42">t1</name></expr></argument>, <argument pos:start="849:45" pos:end="849:52"><expr pos:start="849:45" pos:end="849:52"><name pos:start="849:45" pos:end="849:52"><name pos:start="849:45" pos:end="849:49">cpu_T</name><index pos:start="849:50" pos:end="849:52">[<expr pos:start="849:51" pos:end="849:51"><literal type="number" pos:start="849:51" pos:end="849:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="851:21" pos:end="851:48"><expr pos:start="851:21" pos:end="851:47"><call pos:start="851:21" pos:end="851:47"><name pos:start="851:21" pos:end="851:35">tcg_gen_mul_i64</name><argument_list pos:start="851:36" pos:end="851:47">(<argument pos:start="851:37" pos:end="851:38"><expr pos:start="851:37" pos:end="851:38"><name pos:start="851:37" pos:end="851:38">t0</name></expr></argument>, <argument pos:start="851:41" pos:end="851:42"><expr pos:start="851:41" pos:end="851:42"><name pos:start="851:41" pos:end="851:42">t0</name></expr></argument>, <argument pos:start="851:45" pos:end="851:46"><expr pos:start="851:45" pos:end="851:46"><name pos:start="851:45" pos:end="851:46">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="853:21" pos:end="853:56"><expr pos:start="853:21" pos:end="853:55"><call pos:start="853:21" pos:end="853:55"><name pos:start="853:21" pos:end="853:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="853:42" pos:end="853:55">(<argument pos:start="853:43" pos:end="853:50"><expr pos:start="853:43" pos:end="853:50"><name pos:start="853:43" pos:end="853:50"><name pos:start="853:43" pos:end="853:47">cpu_T</name><index pos:start="853:48" pos:end="853:50">[<expr pos:start="853:49" pos:end="853:49"><literal type="number" pos:start="853:49" pos:end="853:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="853:53" pos:end="853:54"><expr pos:start="853:53" pos:end="853:54"><name pos:start="853:53" pos:end="853:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="855:21" pos:end="855:54"><expr pos:start="855:21" pos:end="855:53"><call pos:start="855:21" pos:end="855:53"><name pos:start="855:21" pos:end="855:37">gen_op_mov_reg_T0</name><argument_list pos:start="855:38" pos:end="855:53">(<argument pos:start="855:39" pos:end="855:45"><expr pos:start="855:39" pos:end="855:45"><name pos:start="855:39" pos:end="855:45">OT_LONG</name></expr></argument>, <argument pos:start="855:48" pos:end="855:52"><expr pos:start="855:48" pos:end="855:52"><name pos:start="855:48" pos:end="855:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="857:21" pos:end="857:57"><expr pos:start="857:21" pos:end="857:56"><call pos:start="857:21" pos:end="857:56"><name pos:start="857:21" pos:end="857:34">tcg_gen_mov_tl</name><argument_list pos:start="857:35" pos:end="857:56">(<argument pos:start="857:36" pos:end="857:45"><expr pos:start="857:36" pos:end="857:45"><name pos:start="857:36" pos:end="857:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="857:48" pos:end="857:55"><expr pos:start="857:48" pos:end="857:55"><name pos:start="857:48" pos:end="857:55"><name pos:start="857:48" pos:end="857:52">cpu_T</name><index pos:start="857:53" pos:end="857:55">[<expr pos:start="857:54" pos:end="857:54"><literal type="number" pos:start="857:54" pos:end="857:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="859:21" pos:end="859:60"><expr pos:start="859:21" pos:end="859:59"><call pos:start="859:21" pos:end="859:59"><name pos:start="859:21" pos:end="859:35">tcg_gen_sari_tl</name><argument_list pos:start="859:36" pos:end="859:59">(<argument pos:start="859:37" pos:end="859:44"><expr pos:start="859:37" pos:end="859:44"><name pos:start="859:37" pos:end="859:44">cpu_tmp0</name></expr></argument>, <argument pos:start="859:47" pos:end="859:54"><expr pos:start="859:47" pos:end="859:54"><name pos:start="859:47" pos:end="859:54"><name pos:start="859:47" pos:end="859:51">cpu_T</name><index pos:start="859:52" pos:end="859:54">[<expr pos:start="859:53" pos:end="859:53"><literal type="number" pos:start="859:53" pos:end="859:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="859:57" pos:end="859:58"><expr pos:start="859:57" pos:end="859:58"><literal type="number" pos:start="859:57" pos:end="859:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="861:21" pos:end="861:49"><expr pos:start="861:21" pos:end="861:48"><call pos:start="861:21" pos:end="861:48"><name pos:start="861:21" pos:end="861:36">tcg_gen_shri_i64</name><argument_list pos:start="861:37" pos:end="861:48">(<argument pos:start="861:38" pos:end="861:39"><expr pos:start="861:38" pos:end="861:39"><name pos:start="861:38" pos:end="861:39">t0</name></expr></argument>, <argument pos:start="861:42" pos:end="861:43"><expr pos:start="861:42" pos:end="861:43"><name pos:start="861:42" pos:end="861:43">t0</name></expr></argument>, <argument pos:start="861:46" pos:end="861:47"><expr pos:start="861:46" pos:end="861:47"><literal type="number" pos:start="861:46" pos:end="861:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="863:21" pos:end="863:56"><expr pos:start="863:21" pos:end="863:55"><call pos:start="863:21" pos:end="863:55"><name pos:start="863:21" pos:end="863:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="863:42" pos:end="863:55">(<argument pos:start="863:43" pos:end="863:50"><expr pos:start="863:43" pos:end="863:50"><name pos:start="863:43" pos:end="863:50"><name pos:start="863:43" pos:end="863:47">cpu_T</name><index pos:start="863:48" pos:end="863:50">[<expr pos:start="863:49" pos:end="863:49"><literal type="number" pos:start="863:49" pos:end="863:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="863:53" pos:end="863:54"><expr pos:start="863:53" pos:end="863:54"><name pos:start="863:53" pos:end="863:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="865:21" pos:end="865:54"><expr pos:start="865:21" pos:end="865:53"><call pos:start="865:21" pos:end="865:53"><name pos:start="865:21" pos:end="865:37">gen_op_mov_reg_T0</name><argument_list pos:start="865:38" pos:end="865:53">(<argument pos:start="865:39" pos:end="865:45"><expr pos:start="865:39" pos:end="865:45"><name pos:start="865:39" pos:end="865:45">OT_LONG</name></expr></argument>, <argument pos:start="865:48" pos:end="865:52"><expr pos:start="865:48" pos:end="865:52"><name pos:start="865:48" pos:end="865:52">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="867:21" pos:end="867:67"><expr pos:start="867:21" pos:end="867:66"><call pos:start="867:21" pos:end="867:66"><name pos:start="867:21" pos:end="867:34">tcg_gen_sub_tl</name><argument_list pos:start="867:35" pos:end="867:66">(<argument pos:start="867:36" pos:end="867:45"><expr pos:start="867:36" pos:end="867:45"><name pos:start="867:36" pos:end="867:45">cpu_cc_src</name></expr></argument>, <argument pos:start="867:48" pos:end="867:55"><expr pos:start="867:48" pos:end="867:55"><name pos:start="867:48" pos:end="867:55"><name pos:start="867:48" pos:end="867:52">cpu_T</name><index pos:start="867:53" pos:end="867:55">[<expr pos:start="867:54" pos:end="867:54"><literal type="number" pos:start="867:54" pos:end="867:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="867:58" pos:end="867:65"><expr pos:start="867:58" pos:end="867:65"><name pos:start="867:58" pos:end="867:65">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

<cpp:endif pos:start="871:1" pos:end="871:6">#<cpp:directive pos:start="871:2" pos:end="871:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="873:17" pos:end="873:38"><expr pos:start="873:17" pos:end="873:37"><name pos:start="873:17" pos:end="873:24"><name pos:start="873:17" pos:end="873:17">s</name><operator pos:start="873:18" pos:end="873:19">-&gt;</operator><name pos:start="873:20" pos:end="873:24">cc_op</name></name> <operator pos:start="873:26" pos:end="873:26">=</operator> <name pos:start="873:28" pos:end="873:37">CC_OP_MULL</name></expr>;</expr_stmt>

                <break pos:start="875:17" pos:end="878:0">break;</break>

<cpp:ifdef pos:start="877:1" pos:end="877:20">#<cpp:directive pos:start="877:2" pos:end="877:6">ifdef</cpp:directive> <name pos:start="877:8" pos:end="877:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="879:13" pos:end="879:25">case <expr pos:start="879:18" pos:end="879:24"><name pos:start="879:18" pos:end="879:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="881:17" pos:end="881:50"><expr pos:start="881:17" pos:end="881:49"><call pos:start="881:17" pos:end="881:49"><name pos:start="881:17" pos:end="881:39">gen_helper_imulq_EAX_T0</name><argument_list pos:start="881:40" pos:end="881:49">(<argument pos:start="881:41" pos:end="881:48"><expr pos:start="881:41" pos:end="881:48"><name pos:start="881:41" pos:end="881:48"><name pos:start="881:41" pos:end="881:45">cpu_T</name><index pos:start="881:46" pos:end="881:48">[<expr pos:start="881:47" pos:end="881:47"><literal type="number" pos:start="881:47" pos:end="881:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="883:17" pos:end="883:38"><expr pos:start="883:17" pos:end="883:37"><name pos:start="883:17" pos:end="883:24"><name pos:start="883:17" pos:end="883:17">s</name><operator pos:start="883:18" pos:end="883:19">-&gt;</operator><name pos:start="883:20" pos:end="883:24">cc_op</name></name> <operator pos:start="883:26" pos:end="883:26">=</operator> <name pos:start="883:28" pos:end="883:37">CC_OP_MULQ</name></expr>;</expr_stmt>

                <break pos:start="885:17" pos:end="888:0">break;</break>

<cpp:endif pos:start="887:1" pos:end="887:6">#<cpp:directive pos:start="887:2" pos:end="887:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="891:13" pos:end="891:18">break;</break>

        <case pos:start="893:9" pos:end="893:15">case <expr pos:start="893:14" pos:end="893:14"><literal type="number" pos:start="893:14" pos:end="893:14">6</literal></expr>:</case> <comment type="block" pos:start="893:17" pos:end="893:25">/* div */</comment>

            <switch pos:start="895:13" pos:end="935:13">switch<condition pos:start="895:19" pos:end="895:22">(<expr pos:start="895:20" pos:end="895:21"><name pos:start="895:20" pos:end="895:21">ot</name></expr>)</condition> <block pos:start="895:24" pos:end="935:13">{<block_content pos:start="897:13" pos:end="934:0">

            <case pos:start="897:13" pos:end="897:25">case <expr pos:start="897:18" pos:end="897:24"><name pos:start="897:18" pos:end="897:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="899:17" pos:end="899:50"><expr pos:start="899:17" pos:end="899:49"><call pos:start="899:17" pos:end="899:49"><name pos:start="899:17" pos:end="899:26">gen_jmp_im</name><argument_list pos:start="899:27" pos:end="899:49">(<argument pos:start="899:28" pos:end="899:48"><expr pos:start="899:28" pos:end="899:48"><name pos:start="899:28" pos:end="899:35">pc_start</name> <operator pos:start="899:37" pos:end="899:37">-</operator> <name pos:start="899:39" pos:end="899:48"><name pos:start="899:39" pos:end="899:39">s</name><operator pos:start="899:40" pos:end="899:41">-&gt;</operator><name pos:start="899:42" pos:end="899:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="901:17" pos:end="901:45"><expr pos:start="901:17" pos:end="901:44"><call pos:start="901:17" pos:end="901:44"><name pos:start="901:17" pos:end="901:34">gen_helper_divb_AL</name><argument_list pos:start="901:35" pos:end="901:44">(<argument pos:start="901:36" pos:end="901:43"><expr pos:start="901:36" pos:end="901:43"><name pos:start="901:36" pos:end="901:43"><name pos:start="901:36" pos:end="901:40">cpu_T</name><index pos:start="901:41" pos:end="901:43">[<expr pos:start="901:42" pos:end="901:42"><literal type="number" pos:start="901:42" pos:end="901:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="903:17" pos:end="903:22">break;</break>

            <case pos:start="905:13" pos:end="905:25">case <expr pos:start="905:18" pos:end="905:24"><name pos:start="905:18" pos:end="905:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="907:17" pos:end="907:50"><expr pos:start="907:17" pos:end="907:49"><call pos:start="907:17" pos:end="907:49"><name pos:start="907:17" pos:end="907:26">gen_jmp_im</name><argument_list pos:start="907:27" pos:end="907:49">(<argument pos:start="907:28" pos:end="907:48"><expr pos:start="907:28" pos:end="907:48"><name pos:start="907:28" pos:end="907:35">pc_start</name> <operator pos:start="907:37" pos:end="907:37">-</operator> <name pos:start="907:39" pos:end="907:48"><name pos:start="907:39" pos:end="907:39">s</name><operator pos:start="907:40" pos:end="907:41">-&gt;</operator><name pos:start="907:42" pos:end="907:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="909:17" pos:end="909:45"><expr pos:start="909:17" pos:end="909:44"><call pos:start="909:17" pos:end="909:44"><name pos:start="909:17" pos:end="909:34">gen_helper_divw_AX</name><argument_list pos:start="909:35" pos:end="909:44">(<argument pos:start="909:36" pos:end="909:43"><expr pos:start="909:36" pos:end="909:43"><name pos:start="909:36" pos:end="909:43"><name pos:start="909:36" pos:end="909:40">cpu_T</name><index pos:start="909:41" pos:end="909:43">[<expr pos:start="909:42" pos:end="909:42"><literal type="number" pos:start="909:42" pos:end="909:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="911:17" pos:end="911:22">break;</break>

            <default pos:start="913:13" pos:end="913:20">default:</default>

            <case pos:start="915:13" pos:end="915:25">case <expr pos:start="915:18" pos:end="915:24"><name pos:start="915:18" pos:end="915:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="917:17" pos:end="917:50"><expr pos:start="917:17" pos:end="917:49"><call pos:start="917:17" pos:end="917:49"><name pos:start="917:17" pos:end="917:26">gen_jmp_im</name><argument_list pos:start="917:27" pos:end="917:49">(<argument pos:start="917:28" pos:end="917:48"><expr pos:start="917:28" pos:end="917:48"><name pos:start="917:28" pos:end="917:35">pc_start</name> <operator pos:start="917:37" pos:end="917:37">-</operator> <name pos:start="917:39" pos:end="917:48"><name pos:start="917:39" pos:end="917:39">s</name><operator pos:start="917:40" pos:end="917:41">-&gt;</operator><name pos:start="917:42" pos:end="917:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="919:17" pos:end="919:46"><expr pos:start="919:17" pos:end="919:45"><call pos:start="919:17" pos:end="919:45"><name pos:start="919:17" pos:end="919:35">gen_helper_divl_EAX</name><argument_list pos:start="919:36" pos:end="919:45">(<argument pos:start="919:37" pos:end="919:44"><expr pos:start="919:37" pos:end="919:44"><name pos:start="919:37" pos:end="919:44"><name pos:start="919:37" pos:end="919:41">cpu_T</name><index pos:start="919:42" pos:end="919:44">[<expr pos:start="919:43" pos:end="919:43"><literal type="number" pos:start="919:43" pos:end="919:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="921:17" pos:end="924:0">break;</break>

<cpp:ifdef pos:start="923:1" pos:end="923:20">#<cpp:directive pos:start="923:2" pos:end="923:6">ifdef</cpp:directive> <name pos:start="923:8" pos:end="923:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="925:13" pos:end="925:25">case <expr pos:start="925:18" pos:end="925:24"><name pos:start="925:18" pos:end="925:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="927:17" pos:end="927:50"><expr pos:start="927:17" pos:end="927:49"><call pos:start="927:17" pos:end="927:49"><name pos:start="927:17" pos:end="927:26">gen_jmp_im</name><argument_list pos:start="927:27" pos:end="927:49">(<argument pos:start="927:28" pos:end="927:48"><expr pos:start="927:28" pos:end="927:48"><name pos:start="927:28" pos:end="927:35">pc_start</name> <operator pos:start="927:37" pos:end="927:37">-</operator> <name pos:start="927:39" pos:end="927:48"><name pos:start="927:39" pos:end="927:39">s</name><operator pos:start="927:40" pos:end="927:41">-&gt;</operator><name pos:start="927:42" pos:end="927:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="929:17" pos:end="929:46"><expr pos:start="929:17" pos:end="929:45"><call pos:start="929:17" pos:end="929:45"><name pos:start="929:17" pos:end="929:35">gen_helper_divq_EAX</name><argument_list pos:start="929:36" pos:end="929:45">(<argument pos:start="929:37" pos:end="929:44"><expr pos:start="929:37" pos:end="929:44"><name pos:start="929:37" pos:end="929:44"><name pos:start="929:37" pos:end="929:41">cpu_T</name><index pos:start="929:42" pos:end="929:44">[<expr pos:start="929:43" pos:end="929:43"><literal type="number" pos:start="929:43" pos:end="929:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="931:17" pos:end="934:0">break;</break>

<cpp:endif pos:start="933:1" pos:end="933:6">#<cpp:directive pos:start="933:2" pos:end="933:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="937:13" pos:end="937:18">break;</break>

        <case pos:start="939:9" pos:end="939:15">case <expr pos:start="939:14" pos:end="939:14"><literal type="number" pos:start="939:14" pos:end="939:14">7</literal></expr>:</case> <comment type="block" pos:start="939:17" pos:end="939:26">/* idiv */</comment>

            <switch pos:start="941:13" pos:end="981:13">switch<condition pos:start="941:19" pos:end="941:22">(<expr pos:start="941:20" pos:end="941:21"><name pos:start="941:20" pos:end="941:21">ot</name></expr>)</condition> <block pos:start="941:24" pos:end="981:13">{<block_content pos:start="943:13" pos:end="980:0">

            <case pos:start="943:13" pos:end="943:25">case <expr pos:start="943:18" pos:end="943:24"><name pos:start="943:18" pos:end="943:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="945:17" pos:end="945:50"><expr pos:start="945:17" pos:end="945:49"><call pos:start="945:17" pos:end="945:49"><name pos:start="945:17" pos:end="945:26">gen_jmp_im</name><argument_list pos:start="945:27" pos:end="945:49">(<argument pos:start="945:28" pos:end="945:48"><expr pos:start="945:28" pos:end="945:48"><name pos:start="945:28" pos:end="945:35">pc_start</name> <operator pos:start="945:37" pos:end="945:37">-</operator> <name pos:start="945:39" pos:end="945:48"><name pos:start="945:39" pos:end="945:39">s</name><operator pos:start="945:40" pos:end="945:41">-&gt;</operator><name pos:start="945:42" pos:end="945:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="947:17" pos:end="947:46"><expr pos:start="947:17" pos:end="947:45"><call pos:start="947:17" pos:end="947:45"><name pos:start="947:17" pos:end="947:35">gen_helper_idivb_AL</name><argument_list pos:start="947:36" pos:end="947:45">(<argument pos:start="947:37" pos:end="947:44"><expr pos:start="947:37" pos:end="947:44"><name pos:start="947:37" pos:end="947:44"><name pos:start="947:37" pos:end="947:41">cpu_T</name><index pos:start="947:42" pos:end="947:44">[<expr pos:start="947:43" pos:end="947:43"><literal type="number" pos:start="947:43" pos:end="947:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="949:17" pos:end="949:22">break;</break>

            <case pos:start="951:13" pos:end="951:25">case <expr pos:start="951:18" pos:end="951:24"><name pos:start="951:18" pos:end="951:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="953:17" pos:end="953:50"><expr pos:start="953:17" pos:end="953:49"><call pos:start="953:17" pos:end="953:49"><name pos:start="953:17" pos:end="953:26">gen_jmp_im</name><argument_list pos:start="953:27" pos:end="953:49">(<argument pos:start="953:28" pos:end="953:48"><expr pos:start="953:28" pos:end="953:48"><name pos:start="953:28" pos:end="953:35">pc_start</name> <operator pos:start="953:37" pos:end="953:37">-</operator> <name pos:start="953:39" pos:end="953:48"><name pos:start="953:39" pos:end="953:39">s</name><operator pos:start="953:40" pos:end="953:41">-&gt;</operator><name pos:start="953:42" pos:end="953:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="955:17" pos:end="955:46"><expr pos:start="955:17" pos:end="955:45"><call pos:start="955:17" pos:end="955:45"><name pos:start="955:17" pos:end="955:35">gen_helper_idivw_AX</name><argument_list pos:start="955:36" pos:end="955:45">(<argument pos:start="955:37" pos:end="955:44"><expr pos:start="955:37" pos:end="955:44"><name pos:start="955:37" pos:end="955:44"><name pos:start="955:37" pos:end="955:41">cpu_T</name><index pos:start="955:42" pos:end="955:44">[<expr pos:start="955:43" pos:end="955:43"><literal type="number" pos:start="955:43" pos:end="955:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="957:17" pos:end="957:22">break;</break>

            <default pos:start="959:13" pos:end="959:20">default:</default>

            <case pos:start="961:13" pos:end="961:25">case <expr pos:start="961:18" pos:end="961:24"><name pos:start="961:18" pos:end="961:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="963:17" pos:end="963:50"><expr pos:start="963:17" pos:end="963:49"><call pos:start="963:17" pos:end="963:49"><name pos:start="963:17" pos:end="963:26">gen_jmp_im</name><argument_list pos:start="963:27" pos:end="963:49">(<argument pos:start="963:28" pos:end="963:48"><expr pos:start="963:28" pos:end="963:48"><name pos:start="963:28" pos:end="963:35">pc_start</name> <operator pos:start="963:37" pos:end="963:37">-</operator> <name pos:start="963:39" pos:end="963:48"><name pos:start="963:39" pos:end="963:39">s</name><operator pos:start="963:40" pos:end="963:41">-&gt;</operator><name pos:start="963:42" pos:end="963:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="965:17" pos:end="965:47"><expr pos:start="965:17" pos:end="965:46"><call pos:start="965:17" pos:end="965:46"><name pos:start="965:17" pos:end="965:36">gen_helper_idivl_EAX</name><argument_list pos:start="965:37" pos:end="965:46">(<argument pos:start="965:38" pos:end="965:45"><expr pos:start="965:38" pos:end="965:45"><name pos:start="965:38" pos:end="965:45"><name pos:start="965:38" pos:end="965:42">cpu_T</name><index pos:start="965:43" pos:end="965:45">[<expr pos:start="965:44" pos:end="965:44"><literal type="number" pos:start="965:44" pos:end="965:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="967:17" pos:end="970:0">break;</break>

<cpp:ifdef pos:start="969:1" pos:end="969:20">#<cpp:directive pos:start="969:2" pos:end="969:6">ifdef</cpp:directive> <name pos:start="969:8" pos:end="969:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="971:13" pos:end="971:25">case <expr pos:start="971:18" pos:end="971:24"><name pos:start="971:18" pos:end="971:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="973:17" pos:end="973:50"><expr pos:start="973:17" pos:end="973:49"><call pos:start="973:17" pos:end="973:49"><name pos:start="973:17" pos:end="973:26">gen_jmp_im</name><argument_list pos:start="973:27" pos:end="973:49">(<argument pos:start="973:28" pos:end="973:48"><expr pos:start="973:28" pos:end="973:48"><name pos:start="973:28" pos:end="973:35">pc_start</name> <operator pos:start="973:37" pos:end="973:37">-</operator> <name pos:start="973:39" pos:end="973:48"><name pos:start="973:39" pos:end="973:39">s</name><operator pos:start="973:40" pos:end="973:41">-&gt;</operator><name pos:start="973:42" pos:end="973:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="975:17" pos:end="975:47"><expr pos:start="975:17" pos:end="975:46"><call pos:start="975:17" pos:end="975:46"><name pos:start="975:17" pos:end="975:36">gen_helper_idivq_EAX</name><argument_list pos:start="975:37" pos:end="975:46">(<argument pos:start="975:38" pos:end="975:45"><expr pos:start="975:38" pos:end="975:45"><name pos:start="975:38" pos:end="975:45"><name pos:start="975:38" pos:end="975:42">cpu_T</name><index pos:start="975:43" pos:end="975:45">[<expr pos:start="975:44" pos:end="975:44"><literal type="number" pos:start="975:44" pos:end="975:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="977:17" pos:end="980:0">break;</break>

<cpp:endif pos:start="979:1" pos:end="979:6">#<cpp:directive pos:start="979:2" pos:end="979:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="983:13" pos:end="983:18">break;</break>

        <default pos:start="985:9" pos:end="985:16">default:</default>

            <goto pos:start="987:13" pos:end="987:28">goto <name pos:start="987:18" pos:end="987:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="991:9" pos:end="991:14">break;</break>



    <case pos:start="995:5" pos:end="995:14">case <expr pos:start="995:10" pos:end="995:13"><literal type="number" pos:start="995:10" pos:end="995:13">0xfe</literal></expr>:</case> <comment type="block" pos:start="995:16" pos:end="995:25">/* GRP4 */</comment>

    <case pos:start="997:5" pos:end="997:14">case <expr pos:start="997:10" pos:end="997:13"><literal type="number" pos:start="997:10" pos:end="997:13">0xff</literal></expr>:</case> <comment type="block" pos:start="997:16" pos:end="997:25">/* GRP5 */</comment>

        <if_stmt pos:start="999:9" pos:end="1005:33"><if pos:start="999:9" pos:end="1001:25">if <condition pos:start="999:12" pos:end="999:25">(<expr pos:start="999:13" pos:end="999:24"><operator pos:start="999:13" pos:end="999:13">(</operator><name pos:start="999:14" pos:end="999:14">b</name> <operator pos:start="999:16" pos:end="999:16">&amp;</operator> <literal type="number" pos:start="999:18" pos:end="999:18">1</literal><operator pos:start="999:19" pos:end="999:19">)</operator> <operator pos:start="999:21" pos:end="999:22">==</operator> <literal type="number" pos:start="999:24" pos:end="999:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1001:13" pos:end="1001:25"><block_content pos:start="1001:13" pos:end="1001:25">

            <expr_stmt pos:start="1001:13" pos:end="1001:25"><expr pos:start="1001:13" pos:end="1001:24"><name pos:start="1001:13" pos:end="1001:14">ot</name> <operator pos:start="1001:16" pos:end="1001:16">=</operator> <name pos:start="1001:18" pos:end="1001:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1003:9" pos:end="1005:33">else<block type="pseudo" pos:start="1005:13" pos:end="1005:33"><block_content pos:start="1005:13" pos:end="1005:33">

            <expr_stmt pos:start="1005:13" pos:end="1005:33"><expr pos:start="1005:13" pos:end="1005:32"><name pos:start="1005:13" pos:end="1005:14">ot</name> <operator pos:start="1005:16" pos:end="1005:16">=</operator> <name pos:start="1005:18" pos:end="1005:22">dflag</name> <operator pos:start="1005:24" pos:end="1005:24">+</operator> <name pos:start="1005:26" pos:end="1005:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="1009:9" pos:end="1009:35"><expr pos:start="1009:9" pos:end="1009:34"><name pos:start="1009:9" pos:end="1009:13">modrm</name> <operator pos:start="1009:15" pos:end="1009:15">=</operator> <call pos:start="1009:17" pos:end="1009:34"><name pos:start="1009:17" pos:end="1009:25">ldub_code</name><argument_list pos:start="1009:26" pos:end="1009:34">(<argument pos:start="1009:27" pos:end="1009:33"><expr pos:start="1009:27" pos:end="1009:33"><name pos:start="1009:27" pos:end="1009:31"><name pos:start="1009:27" pos:end="1009:27">s</name><operator pos:start="1009:28" pos:end="1009:29">-&gt;</operator><name pos:start="1009:30" pos:end="1009:31">pc</name></name><operator pos:start="1009:32" pos:end="1009:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1011:9" pos:end="1011:31"><expr pos:start="1011:9" pos:end="1011:30"><name pos:start="1011:9" pos:end="1011:11">mod</name> <operator pos:start="1011:13" pos:end="1011:13">=</operator> <operator pos:start="1011:15" pos:end="1011:15">(</operator><name pos:start="1011:16" pos:end="1011:20">modrm</name> <operator pos:start="1011:22" pos:end="1011:23">&gt;&gt;</operator> <literal type="number" pos:start="1011:25" pos:end="1011:25">6</literal><operator pos:start="1011:26" pos:end="1011:26">)</operator> <operator pos:start="1011:28" pos:end="1011:28">&amp;</operator> <literal type="number" pos:start="1011:30" pos:end="1011:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1013:9" pos:end="1013:36"><expr pos:start="1013:9" pos:end="1013:35"><name pos:start="1013:9" pos:end="1013:10">rm</name> <operator pos:start="1013:12" pos:end="1013:12">=</operator> <operator pos:start="1013:14" pos:end="1013:14">(</operator><name pos:start="1013:15" pos:end="1013:19">modrm</name> <operator pos:start="1013:21" pos:end="1013:21">&amp;</operator> <literal type="number" pos:start="1013:23" pos:end="1013:23">7</literal><operator pos:start="1013:24" pos:end="1013:24">)</operator> <operator pos:start="1013:26" pos:end="1013:26">|</operator> <call pos:start="1013:28" pos:end="1013:35"><name pos:start="1013:28" pos:end="1013:32">REX_B</name><argument_list pos:start="1013:33" pos:end="1013:35">(<argument pos:start="1013:34" pos:end="1013:34"><expr pos:start="1013:34" pos:end="1013:34"><name pos:start="1013:34" pos:end="1013:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1015:9" pos:end="1015:30"><expr pos:start="1015:9" pos:end="1015:29"><name pos:start="1015:9" pos:end="1015:10">op</name> <operator pos:start="1015:12" pos:end="1015:12">=</operator> <operator pos:start="1015:14" pos:end="1015:14">(</operator><name pos:start="1015:15" pos:end="1015:19">modrm</name> <operator pos:start="1015:21" pos:end="1015:22">&gt;&gt;</operator> <literal type="number" pos:start="1015:24" pos:end="1015:24">3</literal><operator pos:start="1015:25" pos:end="1015:25">)</operator> <operator pos:start="1015:27" pos:end="1015:27">&amp;</operator> <literal type="number" pos:start="1015:29" pos:end="1015:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1017:9" pos:end="1021:9"><if pos:start="1017:9" pos:end="1021:9">if <condition pos:start="1017:12" pos:end="1017:33">(<expr pos:start="1017:13" pos:end="1017:32"><name pos:start="1017:13" pos:end="1017:14">op</name> <operator pos:start="1017:16" pos:end="1017:17">&gt;=</operator> <literal type="number" pos:start="1017:19" pos:end="1017:19">2</literal> <operator pos:start="1017:21" pos:end="1017:22">&amp;&amp;</operator> <name pos:start="1017:24" pos:end="1017:24">b</name> <operator pos:start="1017:26" pos:end="1017:27">==</operator> <literal type="number" pos:start="1017:29" pos:end="1017:32">0xfe</literal></expr>)</condition> <block pos:start="1017:35" pos:end="1021:9">{<block_content pos:start="1019:13" pos:end="1019:28">

            <goto pos:start="1019:13" pos:end="1019:28">goto <name pos:start="1019:18" pos:end="1019:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1023:9" pos:end="1047:9"><if pos:start="1023:9" pos:end="1047:9">if <condition pos:start="1023:12" pos:end="1023:22">(<expr pos:start="1023:13" pos:end="1023:21"><call pos:start="1023:13" pos:end="1023:21"><name pos:start="1023:13" pos:end="1023:18">CODE64</name><argument_list pos:start="1023:19" pos:end="1023:21">(<argument pos:start="1023:20" pos:end="1023:20"><expr pos:start="1023:20" pos:end="1023:20"><name pos:start="1023:20" pos:end="1023:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1023:24" pos:end="1047:9">{<block_content pos:start="1025:13" pos:end="1045:13">

            <if_stmt pos:start="1025:13" pos:end="1045:13"><if pos:start="1025:13" pos:end="1031:13">if <condition pos:start="1025:16" pos:end="1025:35">(<expr pos:start="1025:17" pos:end="1025:34"><name pos:start="1025:17" pos:end="1025:18">op</name> <operator pos:start="1025:20" pos:end="1025:21">==</operator> <literal type="number" pos:start="1025:23" pos:end="1025:23">2</literal> <operator pos:start="1025:25" pos:end="1025:26">||</operator> <name pos:start="1025:28" pos:end="1025:29">op</name> <operator pos:start="1025:31" pos:end="1025:32">==</operator> <literal type="number" pos:start="1025:34" pos:end="1025:34">4</literal></expr>)</condition> <block pos:start="1025:37" pos:end="1031:13">{<block_content pos:start="1029:17" pos:end="1029:29">

                <comment type="block" pos:start="1027:17" pos:end="1027:54">/* operand size for jumps is 64 bit */</comment>

                <expr_stmt pos:start="1029:17" pos:end="1029:29"><expr pos:start="1029:17" pos:end="1029:28"><name pos:start="1029:17" pos:end="1029:18">ot</name> <operator pos:start="1029:20" pos:end="1029:20">=</operator> <name pos:start="1029:22" pos:end="1029:28">OT_QUAD</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1031:15" pos:end="1039:13">else if <condition pos:start="1031:23" pos:end="1031:42">(<expr pos:start="1031:24" pos:end="1031:41"><name pos:start="1031:24" pos:end="1031:25">op</name> <operator pos:start="1031:27" pos:end="1031:28">==</operator> <literal type="number" pos:start="1031:30" pos:end="1031:30">3</literal> <operator pos:start="1031:32" pos:end="1031:33">||</operator> <name pos:start="1031:35" pos:end="1031:36">op</name> <operator pos:start="1031:38" pos:end="1031:39">==</operator> <literal type="number" pos:start="1031:41" pos:end="1031:41">5</literal></expr>)</condition> <block pos:start="1031:44" pos:end="1039:13">{<block_content pos:start="1037:17" pos:end="1037:47">

                <comment type="block" pos:start="1033:17" pos:end="1035:34">/* for call calls, the operand is 16 or 32 bit, even

                   in long mode */</comment>

                <expr_stmt pos:start="1037:17" pos:end="1037:47"><expr pos:start="1037:17" pos:end="1037:46"><name pos:start="1037:17" pos:end="1037:18">ot</name> <operator pos:start="1037:20" pos:end="1037:20">=</operator> <ternary pos:start="1037:22" pos:end="1037:46"><condition pos:start="1037:22" pos:end="1037:28"><expr pos:start="1037:22" pos:end="1037:26"><name pos:start="1037:22" pos:end="1037:26">dflag</name></expr> ?</condition><then pos:start="1037:30" pos:end="1037:36"> <expr pos:start="1037:30" pos:end="1037:36"><name pos:start="1037:30" pos:end="1037:36">OT_LONG</name></expr> </then><else pos:start="1037:38" pos:end="1037:46">: <expr pos:start="1037:40" pos:end="1037:46"><name pos:start="1037:40" pos:end="1037:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1039:15" pos:end="1045:13">else if <condition pos:start="1039:23" pos:end="1039:31">(<expr pos:start="1039:24" pos:end="1039:30"><name pos:start="1039:24" pos:end="1039:25">op</name> <operator pos:start="1039:27" pos:end="1039:28">==</operator> <literal type="number" pos:start="1039:30" pos:end="1039:30">6</literal></expr>)</condition> <block pos:start="1039:33" pos:end="1045:13">{<block_content pos:start="1043:17" pos:end="1043:47">

                <comment type="block" pos:start="1041:17" pos:end="1041:49">/* default push size is 64 bit */</comment>

                <expr_stmt pos:start="1043:17" pos:end="1043:47"><expr pos:start="1043:17" pos:end="1043:46"><name pos:start="1043:17" pos:end="1043:18">ot</name> <operator pos:start="1043:20" pos:end="1043:20">=</operator> <ternary pos:start="1043:22" pos:end="1043:46"><condition pos:start="1043:22" pos:end="1043:28"><expr pos:start="1043:22" pos:end="1043:26"><name pos:start="1043:22" pos:end="1043:26">dflag</name></expr> ?</condition><then pos:start="1043:30" pos:end="1043:36"> <expr pos:start="1043:30" pos:end="1043:36"><name pos:start="1043:30" pos:end="1043:36">OT_QUAD</name></expr> </then><else pos:start="1043:38" pos:end="1043:46">: <expr pos:start="1043:40" pos:end="1043:46"><name pos:start="1043:40" pos:end="1043:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1049:9" pos:end="1061:9"><if pos:start="1049:9" pos:end="1057:9">if <condition pos:start="1049:12" pos:end="1049:21">(<expr pos:start="1049:13" pos:end="1049:20"><name pos:start="1049:13" pos:end="1049:15">mod</name> <operator pos:start="1049:17" pos:end="1049:18">!=</operator> <literal type="number" pos:start="1049:20" pos:end="1049:20">3</literal></expr>)</condition> <block pos:start="1049:23" pos:end="1057:9">{<block_content pos:start="1051:13" pos:end="1055:51">

            <expr_stmt pos:start="1051:13" pos:end="1051:61"><expr pos:start="1051:13" pos:end="1051:60"><call pos:start="1051:13" pos:end="1051:60"><name pos:start="1051:13" pos:end="1051:25">gen_lea_modrm</name><argument_list pos:start="1051:26" pos:end="1051:60">(<argument pos:start="1051:27" pos:end="1051:27"><expr pos:start="1051:27" pos:end="1051:27"><name pos:start="1051:27" pos:end="1051:27">s</name></expr></argument>, <argument pos:start="1051:30" pos:end="1051:34"><expr pos:start="1051:30" pos:end="1051:34"><name pos:start="1051:30" pos:end="1051:34">modrm</name></expr></argument>, <argument pos:start="1051:37" pos:end="1051:45"><expr pos:start="1051:37" pos:end="1051:45"><operator pos:start="1051:37" pos:end="1051:37">&amp;</operator><name pos:start="1051:38" pos:end="1051:45">reg_addr</name></expr></argument>, <argument pos:start="1051:48" pos:end="1051:59"><expr pos:start="1051:48" pos:end="1051:59"><operator pos:start="1051:48" pos:end="1051:48">&amp;</operator><name pos:start="1051:49" pos:end="1051:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1053:13" pos:end="1055:51"><if pos:start="1053:13" pos:end="1055:51">if <condition pos:start="1053:16" pos:end="1053:46">(<expr pos:start="1053:17" pos:end="1053:45"><name pos:start="1053:17" pos:end="1053:18">op</name> <operator pos:start="1053:20" pos:end="1053:21">&gt;=</operator> <literal type="number" pos:start="1053:23" pos:end="1053:23">2</literal> <operator pos:start="1053:25" pos:end="1053:26">&amp;&amp;</operator> <name pos:start="1053:28" pos:end="1053:29">op</name> <operator pos:start="1053:31" pos:end="1053:32">!=</operator> <literal type="number" pos:start="1053:34" pos:end="1053:34">3</literal> <operator pos:start="1053:36" pos:end="1053:37">&amp;&amp;</operator> <name pos:start="1053:39" pos:end="1053:40">op</name> <operator pos:start="1053:42" pos:end="1053:43">!=</operator> <literal type="number" pos:start="1053:45" pos:end="1053:45">5</literal></expr>)</condition><block type="pseudo" pos:start="1055:17" pos:end="1055:51"><block_content pos:start="1055:17" pos:end="1055:51">

                <expr_stmt pos:start="1055:17" pos:end="1055:51"><expr pos:start="1055:17" pos:end="1055:50"><call pos:start="1055:17" pos:end="1055:50"><name pos:start="1055:17" pos:end="1055:31">gen_op_ld_T0_A0</name><argument_list pos:start="1055:32" pos:end="1055:50">(<argument pos:start="1055:33" pos:end="1055:49"><expr pos:start="1055:33" pos:end="1055:49"><name pos:start="1055:33" pos:end="1055:34">ot</name> <operator pos:start="1055:36" pos:end="1055:36">+</operator> <name pos:start="1055:38" pos:end="1055:49"><name pos:start="1055:38" pos:end="1055:38">s</name><operator pos:start="1055:39" pos:end="1055:40">-&gt;</operator><name pos:start="1055:41" pos:end="1055:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="1057:11" pos:end="1061:9">else <block pos:start="1057:16" pos:end="1061:9">{<block_content pos:start="1059:13" pos:end="1059:41">

            <expr_stmt pos:start="1059:13" pos:end="1059:41"><expr pos:start="1059:13" pos:end="1059:40"><call pos:start="1059:13" pos:end="1059:40"><name pos:start="1059:13" pos:end="1059:29">gen_op_mov_TN_reg</name><argument_list pos:start="1059:30" pos:end="1059:40">(<argument pos:start="1059:31" pos:end="1059:32"><expr pos:start="1059:31" pos:end="1059:32"><name pos:start="1059:31" pos:end="1059:32">ot</name></expr></argument>, <argument pos:start="1059:35" pos:end="1059:35"><expr pos:start="1059:35" pos:end="1059:35"><literal type="number" pos:start="1059:35" pos:end="1059:35">0</literal></expr></argument>, <argument pos:start="1059:38" pos:end="1059:39"><expr pos:start="1059:38" pos:end="1059:39"><name pos:start="1059:38" pos:end="1059:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="1065:9" pos:end="1217:9">switch<condition pos:start="1065:15" pos:end="1065:18">(<expr pos:start="1065:16" pos:end="1065:17"><name pos:start="1065:16" pos:end="1065:17">op</name></expr>)</condition> <block pos:start="1065:20" pos:end="1217:9">{<block_content pos:start="1067:9" pos:end="1215:28">

        <case pos:start="1067:9" pos:end="1067:15">case <expr pos:start="1067:14" pos:end="1067:14"><literal type="number" pos:start="1067:14" pos:end="1067:14">0</literal></expr>:</case> <comment type="block" pos:start="1067:17" pos:end="1067:28">/* inc Ev */</comment>

            <if_stmt pos:start="1069:13" pos:end="1075:27"><if pos:start="1069:13" pos:end="1071:32">if <condition pos:start="1069:16" pos:end="1069:25">(<expr pos:start="1069:17" pos:end="1069:24"><name pos:start="1069:17" pos:end="1069:19">mod</name> <operator pos:start="1069:21" pos:end="1069:22">!=</operator> <literal type="number" pos:start="1069:24" pos:end="1069:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1071:17" pos:end="1071:32"><block_content pos:start="1071:17" pos:end="1071:32">

                <expr_stmt pos:start="1071:17" pos:end="1071:32"><expr pos:start="1071:17" pos:end="1071:31"><name pos:start="1071:17" pos:end="1071:21">opreg</name> <operator pos:start="1071:23" pos:end="1071:23">=</operator> <name pos:start="1071:25" pos:end="1071:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1073:13" pos:end="1075:27">else<block type="pseudo" pos:start="1075:17" pos:end="1075:27"><block_content pos:start="1075:17" pos:end="1075:27">

                <expr_stmt pos:start="1075:17" pos:end="1075:27"><expr pos:start="1075:17" pos:end="1075:26"><name pos:start="1075:17" pos:end="1075:21">opreg</name> <operator pos:start="1075:23" pos:end="1075:23">=</operator> <name pos:start="1075:25" pos:end="1075:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1077:13" pos:end="1077:37"><expr pos:start="1077:13" pos:end="1077:36"><call pos:start="1077:13" pos:end="1077:36"><name pos:start="1077:13" pos:end="1077:19">gen_inc</name><argument_list pos:start="1077:20" pos:end="1077:36">(<argument pos:start="1077:21" pos:end="1077:21"><expr pos:start="1077:21" pos:end="1077:21"><name pos:start="1077:21" pos:end="1077:21">s</name></expr></argument>, <argument pos:start="1077:24" pos:end="1077:25"><expr pos:start="1077:24" pos:end="1077:25"><name pos:start="1077:24" pos:end="1077:25">ot</name></expr></argument>, <argument pos:start="1077:28" pos:end="1077:32"><expr pos:start="1077:28" pos:end="1077:32"><name pos:start="1077:28" pos:end="1077:32">opreg</name></expr></argument>, <argument pos:start="1077:35" pos:end="1077:35"><expr pos:start="1077:35" pos:end="1077:35"><literal type="number" pos:start="1077:35" pos:end="1077:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1079:13" pos:end="1079:18">break;</break>

        <case pos:start="1081:9" pos:end="1081:15">case <expr pos:start="1081:14" pos:end="1081:14"><literal type="number" pos:start="1081:14" pos:end="1081:14">1</literal></expr>:</case> <comment type="block" pos:start="1081:17" pos:end="1081:28">/* dec Ev */</comment>

            <if_stmt pos:start="1083:13" pos:end="1089:27"><if pos:start="1083:13" pos:end="1085:32">if <condition pos:start="1083:16" pos:end="1083:25">(<expr pos:start="1083:17" pos:end="1083:24"><name pos:start="1083:17" pos:end="1083:19">mod</name> <operator pos:start="1083:21" pos:end="1083:22">!=</operator> <literal type="number" pos:start="1083:24" pos:end="1083:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1085:17" pos:end="1085:32"><block_content pos:start="1085:17" pos:end="1085:32">

                <expr_stmt pos:start="1085:17" pos:end="1085:32"><expr pos:start="1085:17" pos:end="1085:31"><name pos:start="1085:17" pos:end="1085:21">opreg</name> <operator pos:start="1085:23" pos:end="1085:23">=</operator> <name pos:start="1085:25" pos:end="1085:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1087:13" pos:end="1089:27">else<block type="pseudo" pos:start="1089:17" pos:end="1089:27"><block_content pos:start="1089:17" pos:end="1089:27">

                <expr_stmt pos:start="1089:17" pos:end="1089:27"><expr pos:start="1089:17" pos:end="1089:26"><name pos:start="1089:17" pos:end="1089:21">opreg</name> <operator pos:start="1089:23" pos:end="1089:23">=</operator> <name pos:start="1089:25" pos:end="1089:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1091:13" pos:end="1091:38"><expr pos:start="1091:13" pos:end="1091:37"><call pos:start="1091:13" pos:end="1091:37"><name pos:start="1091:13" pos:end="1091:19">gen_inc</name><argument_list pos:start="1091:20" pos:end="1091:37">(<argument pos:start="1091:21" pos:end="1091:21"><expr pos:start="1091:21" pos:end="1091:21"><name pos:start="1091:21" pos:end="1091:21">s</name></expr></argument>, <argument pos:start="1091:24" pos:end="1091:25"><expr pos:start="1091:24" pos:end="1091:25"><name pos:start="1091:24" pos:end="1091:25">ot</name></expr></argument>, <argument pos:start="1091:28" pos:end="1091:32"><expr pos:start="1091:28" pos:end="1091:32"><name pos:start="1091:28" pos:end="1091:32">opreg</name></expr></argument>, <argument pos:start="1091:35" pos:end="1091:36"><expr pos:start="1091:35" pos:end="1091:36"><operator pos:start="1091:35" pos:end="1091:35">-</operator><literal type="number" pos:start="1091:36" pos:end="1091:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1093:13" pos:end="1093:18">break;</break>

        <case pos:start="1095:9" pos:end="1095:15">case <expr pos:start="1095:14" pos:end="1095:14"><literal type="number" pos:start="1095:14" pos:end="1095:14">2</literal></expr>:</case> <comment type="block" pos:start="1095:17" pos:end="1095:29">/* call Ev */</comment>

            <comment type="block" pos:start="1097:13" pos:end="1097:65">/* XXX: optimize if memory (no 'and' is necessary) */</comment>

            <if_stmt pos:start="1099:13" pos:end="1101:38"><if pos:start="1099:13" pos:end="1101:38">if <condition pos:start="1099:16" pos:end="1099:30">(<expr pos:start="1099:17" pos:end="1099:29"><name pos:start="1099:17" pos:end="1099:24"><name pos:start="1099:17" pos:end="1099:17">s</name><operator pos:start="1099:18" pos:end="1099:19">-&gt;</operator><name pos:start="1099:20" pos:end="1099:24">dflag</name></name> <operator pos:start="1099:26" pos:end="1099:27">==</operator> <literal type="number" pos:start="1099:29" pos:end="1099:29">0</literal></expr>)</condition><block type="pseudo" pos:start="1101:17" pos:end="1101:38"><block_content pos:start="1101:17" pos:end="1101:38">

                <expr_stmt pos:start="1101:17" pos:end="1101:38"><expr pos:start="1101:17" pos:end="1101:37"><call pos:start="1101:17" pos:end="1101:37"><name pos:start="1101:17" pos:end="1101:35">gen_op_andl_T0_ffff</name><argument_list pos:start="1101:36" pos:end="1101:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1103:13" pos:end="1103:42"><expr pos:start="1103:13" pos:end="1103:41"><name pos:start="1103:13" pos:end="1103:20">next_eip</name> <operator pos:start="1103:22" pos:end="1103:22">=</operator> <name pos:start="1103:24" pos:end="1103:28"><name pos:start="1103:24" pos:end="1103:24">s</name><operator pos:start="1103:25" pos:end="1103:26">-&gt;</operator><name pos:start="1103:27" pos:end="1103:28">pc</name></name> <operator pos:start="1103:30" pos:end="1103:30">-</operator> <name pos:start="1103:32" pos:end="1103:41"><name pos:start="1103:32" pos:end="1103:32">s</name><operator pos:start="1103:33" pos:end="1103:34">-&gt;</operator><name pos:start="1103:35" pos:end="1103:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="1105:13" pos:end="1105:38"><expr pos:start="1105:13" pos:end="1105:37"><call pos:start="1105:13" pos:end="1105:37"><name pos:start="1105:13" pos:end="1105:27">gen_movtl_T1_im</name><argument_list pos:start="1105:28" pos:end="1105:37">(<argument pos:start="1105:29" pos:end="1105:36"><expr pos:start="1105:29" pos:end="1105:36"><name pos:start="1105:29" pos:end="1105:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1107:13" pos:end="1107:27"><expr pos:start="1107:13" pos:end="1107:26"><call pos:start="1107:13" pos:end="1107:26"><name pos:start="1107:13" pos:end="1107:23">gen_push_T1</name><argument_list pos:start="1107:24" pos:end="1107:26">(<argument pos:start="1107:25" pos:end="1107:25"><expr pos:start="1107:25" pos:end="1107:25"><name pos:start="1107:25" pos:end="1107:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1109:13" pos:end="1109:28"><expr pos:start="1109:13" pos:end="1109:27"><call pos:start="1109:13" pos:end="1109:27"><name pos:start="1109:13" pos:end="1109:25">gen_op_jmp_T0</name><argument_list pos:start="1109:26" pos:end="1109:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1111:13" pos:end="1111:23"><expr pos:start="1111:13" pos:end="1111:22"><call pos:start="1111:13" pos:end="1111:22"><name pos:start="1111:13" pos:end="1111:19">gen_eob</name><argument_list pos:start="1111:20" pos:end="1111:22">(<argument pos:start="1111:21" pos:end="1111:21"><expr pos:start="1111:21" pos:end="1111:21"><name pos:start="1111:21" pos:end="1111:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1113:13" pos:end="1113:18">break;</break>

        <case pos:start="1115:9" pos:end="1115:15">case <expr pos:start="1115:14" pos:end="1115:14"><literal type="number" pos:start="1115:14" pos:end="1115:14">3</literal></expr>:</case> <comment type="block" pos:start="1115:17" pos:end="1115:30">/* lcall Ev */</comment>

            <expr_stmt pos:start="1117:13" pos:end="1117:47"><expr pos:start="1117:13" pos:end="1117:46"><call pos:start="1117:13" pos:end="1117:46"><name pos:start="1117:13" pos:end="1117:27">gen_op_ld_T1_A0</name><argument_list pos:start="1117:28" pos:end="1117:46">(<argument pos:start="1117:29" pos:end="1117:45"><expr pos:start="1117:29" pos:end="1117:45"><name pos:start="1117:29" pos:end="1117:30">ot</name> <operator pos:start="1117:32" pos:end="1117:32">+</operator> <name pos:start="1117:34" pos:end="1117:45"><name pos:start="1117:34" pos:end="1117:34">s</name><operator pos:start="1117:35" pos:end="1117:36">-&gt;</operator><name pos:start="1117:37" pos:end="1117:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1119:13" pos:end="1119:54"><expr pos:start="1119:13" pos:end="1119:53"><call pos:start="1119:13" pos:end="1119:53"><name pos:start="1119:13" pos:end="1119:25">gen_add_A0_im</name><argument_list pos:start="1119:26" pos:end="1119:53">(<argument pos:start="1119:27" pos:end="1119:27"><expr pos:start="1119:27" pos:end="1119:27"><name pos:start="1119:27" pos:end="1119:27">s</name></expr></argument>, <argument pos:start="1119:30" pos:end="1119:52"><expr pos:start="1119:30" pos:end="1119:52"><literal type="number" pos:start="1119:30" pos:end="1119:30">1</literal> <operator pos:start="1119:32" pos:end="1119:33">&lt;&lt;</operator> <operator pos:start="1119:35" pos:end="1119:35">(</operator><name pos:start="1119:36" pos:end="1119:37">ot</name> <operator pos:start="1119:39" pos:end="1119:39">-</operator> <name pos:start="1119:41" pos:end="1119:47">OT_WORD</name> <operator pos:start="1119:49" pos:end="1119:49">+</operator> <literal type="number" pos:start="1119:51" pos:end="1119:51">1</literal><operator pos:start="1119:52" pos:end="1119:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1121:13" pos:end="1121:53"><expr pos:start="1121:13" pos:end="1121:52"><call pos:start="1121:13" pos:end="1121:52"><name pos:start="1121:13" pos:end="1121:28">gen_op_ldu_T0_A0</name><argument_list pos:start="1121:29" pos:end="1121:52">(<argument pos:start="1121:30" pos:end="1121:51"><expr pos:start="1121:30" pos:end="1121:51"><name pos:start="1121:30" pos:end="1121:36">OT_WORD</name> <operator pos:start="1121:38" pos:end="1121:38">+</operator> <name pos:start="1121:40" pos:end="1121:51"><name pos:start="1121:40" pos:end="1121:40">s</name><operator pos:start="1121:41" pos:end="1121:42">-&gt;</operator><name pos:start="1121:43" pos:end="1121:51">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="1123:9" pos:end="1123:17"><name pos:start="1123:9" pos:end="1123:16">do_lcall</name>:</label>

            <if_stmt pos:start="1125:13" pos:end="1151:13"><if pos:start="1125:13" pos:end="1141:13">if <condition pos:start="1125:16" pos:end="1125:34">(<expr pos:start="1125:17" pos:end="1125:33"><name pos:start="1125:17" pos:end="1125:21"><name pos:start="1125:17" pos:end="1125:17">s</name><operator pos:start="1125:18" pos:end="1125:19">-&gt;</operator><name pos:start="1125:20" pos:end="1125:21">pe</name></name> <operator pos:start="1125:23" pos:end="1125:24">&amp;&amp;</operator> <operator pos:start="1125:26" pos:end="1125:26">!</operator><name pos:start="1125:27" pos:end="1125:33"><name pos:start="1125:27" pos:end="1125:27">s</name><operator pos:start="1125:28" pos:end="1125:29">-&gt;</operator><name pos:start="1125:30" pos:end="1125:33">vm86</name></name></expr>)</condition> <block pos:start="1125:36" pos:end="1141:13">{<block_content pos:start="1127:17" pos:end="1139:76">

                <if_stmt pos:start="1127:17" pos:end="1129:47"><if pos:start="1127:17" pos:end="1129:47">if <condition pos:start="1127:20" pos:end="1127:46">(<expr pos:start="1127:21" pos:end="1127:45"><name pos:start="1127:21" pos:end="1127:28"><name pos:start="1127:21" pos:end="1127:21">s</name><operator pos:start="1127:22" pos:end="1127:23">-&gt;</operator><name pos:start="1127:24" pos:end="1127:28">cc_op</name></name> <operator pos:start="1127:30" pos:end="1127:31">!=</operator> <name pos:start="1127:33" pos:end="1127:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1129:21" pos:end="1129:47"><block_content pos:start="1129:21" pos:end="1129:47">

                    <expr_stmt pos:start="1129:21" pos:end="1129:47"><expr pos:start="1129:21" pos:end="1129:46"><call pos:start="1129:21" pos:end="1129:46"><name pos:start="1129:21" pos:end="1129:36">gen_op_set_cc_op</name><argument_list pos:start="1129:37" pos:end="1129:46">(<argument pos:start="1129:38" pos:end="1129:45"><expr pos:start="1129:38" pos:end="1129:45"><name pos:start="1129:38" pos:end="1129:45"><name pos:start="1129:38" pos:end="1129:38">s</name><operator pos:start="1129:39" pos:end="1129:40">-&gt;</operator><name pos:start="1129:41" pos:end="1129:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1131:17" pos:end="1131:50"><expr pos:start="1131:17" pos:end="1131:49"><call pos:start="1131:17" pos:end="1131:49"><name pos:start="1131:17" pos:end="1131:26">gen_jmp_im</name><argument_list pos:start="1131:27" pos:end="1131:49">(<argument pos:start="1131:28" pos:end="1131:48"><expr pos:start="1131:28" pos:end="1131:48"><name pos:start="1131:28" pos:end="1131:35">pc_start</name> <operator pos:start="1131:37" pos:end="1131:37">-</operator> <name pos:start="1131:39" pos:end="1131:48"><name pos:start="1131:39" pos:end="1131:39">s</name><operator pos:start="1131:40" pos:end="1131:41">-&gt;</operator><name pos:start="1131:42" pos:end="1131:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1133:17" pos:end="1133:61"><expr pos:start="1133:17" pos:end="1133:60"><call pos:start="1133:17" pos:end="1133:60"><name pos:start="1133:17" pos:end="1133:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1133:37" pos:end="1133:60">(<argument pos:start="1133:38" pos:end="1133:49"><expr pos:start="1133:38" pos:end="1133:49"><name pos:start="1133:38" pos:end="1133:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1133:52" pos:end="1133:59"><expr pos:start="1133:52" pos:end="1133:59"><name pos:start="1133:52" pos:end="1133:59"><name pos:start="1133:52" pos:end="1133:56">cpu_T</name><index pos:start="1133:57" pos:end="1133:59">[<expr pos:start="1133:58" pos:end="1133:58"><literal type="number" pos:start="1133:58" pos:end="1133:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1135:17" pos:end="1139:76"><expr pos:start="1135:17" pos:end="1139:75"><call pos:start="1135:17" pos:end="1139:75"><name pos:start="1135:17" pos:end="1135:42">gen_helper_lcall_protected</name><argument_list pos:start="1135:43" pos:end="1139:75">(<argument pos:start="1135:44" pos:end="1135:55"><expr pos:start="1135:44" pos:end="1135:55"><name pos:start="1135:44" pos:end="1135:55">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1135:58" pos:end="1135:65"><expr pos:start="1135:58" pos:end="1135:65"><name pos:start="1135:58" pos:end="1135:65"><name pos:start="1135:58" pos:end="1135:62">cpu_T</name><index pos:start="1135:63" pos:end="1135:65">[<expr pos:start="1135:64" pos:end="1135:64"><literal type="number" pos:start="1135:64" pos:end="1135:64">1</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="1137:44" pos:end="1137:63"><expr pos:start="1137:44" pos:end="1137:63"><call pos:start="1137:44" pos:end="1137:63"><name pos:start="1137:44" pos:end="1137:56">tcg_const_i32</name><argument_list pos:start="1137:57" pos:end="1137:63">(<argument pos:start="1137:58" pos:end="1137:62"><expr pos:start="1137:58" pos:end="1137:62"><name pos:start="1137:58" pos:end="1137:62">dflag</name></expr></argument>)</argument_list></call></expr></argument>, 

                                           <argument pos:start="1139:44" pos:end="1139:74"><expr pos:start="1139:44" pos:end="1139:74"><call pos:start="1139:44" pos:end="1139:74"><name pos:start="1139:44" pos:end="1139:56">tcg_const_i32</name><argument_list pos:start="1139:57" pos:end="1139:74">(<argument pos:start="1139:58" pos:end="1139:73"><expr pos:start="1139:58" pos:end="1139:73"><name pos:start="1139:58" pos:end="1139:62"><name pos:start="1139:58" pos:end="1139:58">s</name><operator pos:start="1139:59" pos:end="1139:60">-&gt;</operator><name pos:start="1139:61" pos:end="1139:62">pc</name></name> <operator pos:start="1139:64" pos:end="1139:64">-</operator> <name pos:start="1139:66" pos:end="1139:73">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1141:15" pos:end="1151:13">else <block pos:start="1141:20" pos:end="1151:13">{<block_content pos:start="1143:17" pos:end="1149:73">

                <expr_stmt pos:start="1143:17" pos:end="1143:61"><expr pos:start="1143:17" pos:end="1143:60"><call pos:start="1143:17" pos:end="1143:60"><name pos:start="1143:17" pos:end="1143:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1143:37" pos:end="1143:60">(<argument pos:start="1143:38" pos:end="1143:49"><expr pos:start="1143:38" pos:end="1143:49"><name pos:start="1143:38" pos:end="1143:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1143:52" pos:end="1143:59"><expr pos:start="1143:52" pos:end="1143:59"><name pos:start="1143:52" pos:end="1143:59"><name pos:start="1143:52" pos:end="1143:56">cpu_T</name><index pos:start="1143:57" pos:end="1143:59">[<expr pos:start="1143:58" pos:end="1143:58"><literal type="number" pos:start="1143:58" pos:end="1143:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1145:17" pos:end="1149:73"><expr pos:start="1145:17" pos:end="1149:72"><call pos:start="1145:17" pos:end="1149:72"><name pos:start="1145:17" pos:end="1145:37">gen_helper_lcall_real</name><argument_list pos:start="1145:38" pos:end="1149:72">(<argument pos:start="1145:39" pos:end="1145:50"><expr pos:start="1145:39" pos:end="1145:50"><name pos:start="1145:39" pos:end="1145:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1145:53" pos:end="1145:60"><expr pos:start="1145:53" pos:end="1145:60"><name pos:start="1145:53" pos:end="1145:60"><name pos:start="1145:53" pos:end="1145:57">cpu_T</name><index pos:start="1145:58" pos:end="1145:60">[<expr pos:start="1145:59" pos:end="1145:59"><literal type="number" pos:start="1145:59" pos:end="1145:59">1</literal></expr>]</index></name></expr></argument>,

                                      <argument pos:start="1147:39" pos:end="1147:58"><expr pos:start="1147:39" pos:end="1147:58"><call pos:start="1147:39" pos:end="1147:58"><name pos:start="1147:39" pos:end="1147:51">tcg_const_i32</name><argument_list pos:start="1147:52" pos:end="1147:58">(<argument pos:start="1147:53" pos:end="1147:57"><expr pos:start="1147:53" pos:end="1147:57"><name pos:start="1147:53" pos:end="1147:57">dflag</name></expr></argument>)</argument_list></call></expr></argument>, 

                                      <argument pos:start="1149:39" pos:end="1149:71"><expr pos:start="1149:39" pos:end="1149:71"><call pos:start="1149:39" pos:end="1149:71"><name pos:start="1149:39" pos:end="1149:51">tcg_const_i32</name><argument_list pos:start="1149:52" pos:end="1149:71">(<argument pos:start="1149:53" pos:end="1149:70"><expr pos:start="1149:53" pos:end="1149:70"><name pos:start="1149:53" pos:end="1149:57"><name pos:start="1149:53" pos:end="1149:53">s</name><operator pos:start="1149:54" pos:end="1149:55">-&gt;</operator><name pos:start="1149:56" pos:end="1149:57">pc</name></name> <operator pos:start="1149:59" pos:end="1149:59">-</operator> <name pos:start="1149:61" pos:end="1149:70"><name pos:start="1149:61" pos:end="1149:61">s</name><operator pos:start="1149:62" pos:end="1149:63">-&gt;</operator><name pos:start="1149:64" pos:end="1149:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1153:13" pos:end="1153:23"><expr pos:start="1153:13" pos:end="1153:22"><call pos:start="1153:13" pos:end="1153:22"><name pos:start="1153:13" pos:end="1153:19">gen_eob</name><argument_list pos:start="1153:20" pos:end="1153:22">(<argument pos:start="1153:21" pos:end="1153:21"><expr pos:start="1153:21" pos:end="1153:21"><name pos:start="1153:21" pos:end="1153:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1155:13" pos:end="1155:18">break;</break>

        <case pos:start="1157:9" pos:end="1157:15">case <expr pos:start="1157:14" pos:end="1157:14"><literal type="number" pos:start="1157:14" pos:end="1157:14">4</literal></expr>:</case> <comment type="block" pos:start="1157:17" pos:end="1157:28">/* jmp Ev */</comment>

            <if_stmt pos:start="1159:13" pos:end="1161:38"><if pos:start="1159:13" pos:end="1161:38">if <condition pos:start="1159:16" pos:end="1159:30">(<expr pos:start="1159:17" pos:end="1159:29"><name pos:start="1159:17" pos:end="1159:24"><name pos:start="1159:17" pos:end="1159:17">s</name><operator pos:start="1159:18" pos:end="1159:19">-&gt;</operator><name pos:start="1159:20" pos:end="1159:24">dflag</name></name> <operator pos:start="1159:26" pos:end="1159:27">==</operator> <literal type="number" pos:start="1159:29" pos:end="1159:29">0</literal></expr>)</condition><block type="pseudo" pos:start="1161:17" pos:end="1161:38"><block_content pos:start="1161:17" pos:end="1161:38">

                <expr_stmt pos:start="1161:17" pos:end="1161:38"><expr pos:start="1161:17" pos:end="1161:37"><call pos:start="1161:17" pos:end="1161:37"><name pos:start="1161:17" pos:end="1161:35">gen_op_andl_T0_ffff</name><argument_list pos:start="1161:36" pos:end="1161:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1163:13" pos:end="1163:28"><expr pos:start="1163:13" pos:end="1163:27"><call pos:start="1163:13" pos:end="1163:27"><name pos:start="1163:13" pos:end="1163:25">gen_op_jmp_T0</name><argument_list pos:start="1163:26" pos:end="1163:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1165:13" pos:end="1165:23"><expr pos:start="1165:13" pos:end="1165:22"><call pos:start="1165:13" pos:end="1165:22"><name pos:start="1165:13" pos:end="1165:19">gen_eob</name><argument_list pos:start="1165:20" pos:end="1165:22">(<argument pos:start="1165:21" pos:end="1165:21"><expr pos:start="1165:21" pos:end="1165:21"><name pos:start="1165:21" pos:end="1165:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1167:13" pos:end="1167:18">break;</break>

        <case pos:start="1169:9" pos:end="1169:15">case <expr pos:start="1169:14" pos:end="1169:14"><literal type="number" pos:start="1169:14" pos:end="1169:14">5</literal></expr>:</case> <comment type="block" pos:start="1169:17" pos:end="1169:29">/* ljmp Ev */</comment>

            <expr_stmt pos:start="1171:13" pos:end="1171:47"><expr pos:start="1171:13" pos:end="1171:46"><call pos:start="1171:13" pos:end="1171:46"><name pos:start="1171:13" pos:end="1171:27">gen_op_ld_T1_A0</name><argument_list pos:start="1171:28" pos:end="1171:46">(<argument pos:start="1171:29" pos:end="1171:45"><expr pos:start="1171:29" pos:end="1171:45"><name pos:start="1171:29" pos:end="1171:30">ot</name> <operator pos:start="1171:32" pos:end="1171:32">+</operator> <name pos:start="1171:34" pos:end="1171:45"><name pos:start="1171:34" pos:end="1171:34">s</name><operator pos:start="1171:35" pos:end="1171:36">-&gt;</operator><name pos:start="1171:37" pos:end="1171:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1173:13" pos:end="1173:54"><expr pos:start="1173:13" pos:end="1173:53"><call pos:start="1173:13" pos:end="1173:53"><name pos:start="1173:13" pos:end="1173:25">gen_add_A0_im</name><argument_list pos:start="1173:26" pos:end="1173:53">(<argument pos:start="1173:27" pos:end="1173:27"><expr pos:start="1173:27" pos:end="1173:27"><name pos:start="1173:27" pos:end="1173:27">s</name></expr></argument>, <argument pos:start="1173:30" pos:end="1173:52"><expr pos:start="1173:30" pos:end="1173:52"><literal type="number" pos:start="1173:30" pos:end="1173:30">1</literal> <operator pos:start="1173:32" pos:end="1173:33">&lt;&lt;</operator> <operator pos:start="1173:35" pos:end="1173:35">(</operator><name pos:start="1173:36" pos:end="1173:37">ot</name> <operator pos:start="1173:39" pos:end="1173:39">-</operator> <name pos:start="1173:41" pos:end="1173:47">OT_WORD</name> <operator pos:start="1173:49" pos:end="1173:49">+</operator> <literal type="number" pos:start="1173:51" pos:end="1173:51">1</literal><operator pos:start="1173:52" pos:end="1173:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1175:13" pos:end="1175:53"><expr pos:start="1175:13" pos:end="1175:52"><call pos:start="1175:13" pos:end="1175:52"><name pos:start="1175:13" pos:end="1175:28">gen_op_ldu_T0_A0</name><argument_list pos:start="1175:29" pos:end="1175:52">(<argument pos:start="1175:30" pos:end="1175:51"><expr pos:start="1175:30" pos:end="1175:51"><name pos:start="1175:30" pos:end="1175:36">OT_WORD</name> <operator pos:start="1175:38" pos:end="1175:38">+</operator> <name pos:start="1175:40" pos:end="1175:51"><name pos:start="1175:40" pos:end="1175:40">s</name><operator pos:start="1175:41" pos:end="1175:42">-&gt;</operator><name pos:start="1175:43" pos:end="1175:51">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="1177:9" pos:end="1177:16"><name pos:start="1177:9" pos:end="1177:15">do_ljmp</name>:</label>

            <if_stmt pos:start="1179:13" pos:end="1201:13"><if pos:start="1179:13" pos:end="1193:13">if <condition pos:start="1179:16" pos:end="1179:34">(<expr pos:start="1179:17" pos:end="1179:33"><name pos:start="1179:17" pos:end="1179:21"><name pos:start="1179:17" pos:end="1179:17">s</name><operator pos:start="1179:18" pos:end="1179:19">-&gt;</operator><name pos:start="1179:20" pos:end="1179:21">pe</name></name> <operator pos:start="1179:23" pos:end="1179:24">&amp;&amp;</operator> <operator pos:start="1179:26" pos:end="1179:26">!</operator><name pos:start="1179:27" pos:end="1179:33"><name pos:start="1179:27" pos:end="1179:27">s</name><operator pos:start="1179:28" pos:end="1179:29">-&gt;</operator><name pos:start="1179:30" pos:end="1179:33">vm86</name></name></expr>)</condition> <block pos:start="1179:36" pos:end="1193:13">{<block_content pos:start="1181:17" pos:end="1191:75">

                <if_stmt pos:start="1181:17" pos:end="1183:47"><if pos:start="1181:17" pos:end="1183:47">if <condition pos:start="1181:20" pos:end="1181:46">(<expr pos:start="1181:21" pos:end="1181:45"><name pos:start="1181:21" pos:end="1181:28"><name pos:start="1181:21" pos:end="1181:21">s</name><operator pos:start="1181:22" pos:end="1181:23">-&gt;</operator><name pos:start="1181:24" pos:end="1181:28">cc_op</name></name> <operator pos:start="1181:30" pos:end="1181:31">!=</operator> <name pos:start="1181:33" pos:end="1181:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1183:21" pos:end="1183:47"><block_content pos:start="1183:21" pos:end="1183:47">

                    <expr_stmt pos:start="1183:21" pos:end="1183:47"><expr pos:start="1183:21" pos:end="1183:46"><call pos:start="1183:21" pos:end="1183:46"><name pos:start="1183:21" pos:end="1183:36">gen_op_set_cc_op</name><argument_list pos:start="1183:37" pos:end="1183:46">(<argument pos:start="1183:38" pos:end="1183:45"><expr pos:start="1183:38" pos:end="1183:45"><name pos:start="1183:38" pos:end="1183:45"><name pos:start="1183:38" pos:end="1183:38">s</name><operator pos:start="1183:39" pos:end="1183:40">-&gt;</operator><name pos:start="1183:41" pos:end="1183:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1185:17" pos:end="1185:50"><expr pos:start="1185:17" pos:end="1185:49"><call pos:start="1185:17" pos:end="1185:49"><name pos:start="1185:17" pos:end="1185:26">gen_jmp_im</name><argument_list pos:start="1185:27" pos:end="1185:49">(<argument pos:start="1185:28" pos:end="1185:48"><expr pos:start="1185:28" pos:end="1185:48"><name pos:start="1185:28" pos:end="1185:35">pc_start</name> <operator pos:start="1185:37" pos:end="1185:37">-</operator> <name pos:start="1185:39" pos:end="1185:48"><name pos:start="1185:39" pos:end="1185:39">s</name><operator pos:start="1185:40" pos:end="1185:41">-&gt;</operator><name pos:start="1185:42" pos:end="1185:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1187:17" pos:end="1187:61"><expr pos:start="1187:17" pos:end="1187:60"><call pos:start="1187:17" pos:end="1187:60"><name pos:start="1187:17" pos:end="1187:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1187:37" pos:end="1187:60">(<argument pos:start="1187:38" pos:end="1187:49"><expr pos:start="1187:38" pos:end="1187:49"><name pos:start="1187:38" pos:end="1187:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1187:52" pos:end="1187:59"><expr pos:start="1187:52" pos:end="1187:59"><name pos:start="1187:52" pos:end="1187:59"><name pos:start="1187:52" pos:end="1187:56">cpu_T</name><index pos:start="1187:57" pos:end="1187:59">[<expr pos:start="1187:58" pos:end="1187:58"><literal type="number" pos:start="1187:58" pos:end="1187:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1189:17" pos:end="1191:75"><expr pos:start="1189:17" pos:end="1191:74"><call pos:start="1189:17" pos:end="1191:74"><name pos:start="1189:17" pos:end="1189:41">gen_helper_ljmp_protected</name><argument_list pos:start="1189:42" pos:end="1191:74">(<argument pos:start="1189:43" pos:end="1189:54"><expr pos:start="1189:43" pos:end="1189:54"><name pos:start="1189:43" pos:end="1189:54">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1189:57" pos:end="1189:64"><expr pos:start="1189:57" pos:end="1189:64"><name pos:start="1189:57" pos:end="1189:64"><name pos:start="1189:57" pos:end="1189:61">cpu_T</name><index pos:start="1189:62" pos:end="1189:64">[<expr pos:start="1189:63" pos:end="1189:63"><literal type="number" pos:start="1189:63" pos:end="1189:63">1</literal></expr>]</index></name></expr></argument>,

                                          <argument pos:start="1191:43" pos:end="1191:73"><expr pos:start="1191:43" pos:end="1191:73"><call pos:start="1191:43" pos:end="1191:73"><name pos:start="1191:43" pos:end="1191:55">tcg_const_i32</name><argument_list pos:start="1191:56" pos:end="1191:73">(<argument pos:start="1191:57" pos:end="1191:72"><expr pos:start="1191:57" pos:end="1191:72"><name pos:start="1191:57" pos:end="1191:61"><name pos:start="1191:57" pos:end="1191:57">s</name><operator pos:start="1191:58" pos:end="1191:59">-&gt;</operator><name pos:start="1191:60" pos:end="1191:61">pc</name></name> <operator pos:start="1191:63" pos:end="1191:63">-</operator> <name pos:start="1191:65" pos:end="1191:72">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1193:15" pos:end="1201:13">else <block pos:start="1193:20" pos:end="1201:13">{<block_content pos:start="1195:17" pos:end="1199:32">

                <expr_stmt pos:start="1195:17" pos:end="1195:44"><expr pos:start="1195:17" pos:end="1195:43"><call pos:start="1195:17" pos:end="1195:43"><name pos:start="1195:17" pos:end="1195:37">gen_op_movl_seg_T0_vm</name><argument_list pos:start="1195:38" pos:end="1195:43">(<argument pos:start="1195:39" pos:end="1195:42"><expr pos:start="1195:39" pos:end="1195:42"><name pos:start="1195:39" pos:end="1195:42">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1197:17" pos:end="1197:36"><expr pos:start="1197:17" pos:end="1197:35"><call pos:start="1197:17" pos:end="1197:35"><name pos:start="1197:17" pos:end="1197:33">gen_op_movl_T0_T1</name><argument_list pos:start="1197:34" pos:end="1197:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1199:17" pos:end="1199:32"><expr pos:start="1199:17" pos:end="1199:31"><call pos:start="1199:17" pos:end="1199:31"><name pos:start="1199:17" pos:end="1199:29">gen_op_jmp_T0</name><argument_list pos:start="1199:30" pos:end="1199:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1203:13" pos:end="1203:23"><expr pos:start="1203:13" pos:end="1203:22"><call pos:start="1203:13" pos:end="1203:22"><name pos:start="1203:13" pos:end="1203:19">gen_eob</name><argument_list pos:start="1203:20" pos:end="1203:22">(<argument pos:start="1203:21" pos:end="1203:21"><expr pos:start="1203:21" pos:end="1203:21"><name pos:start="1203:21" pos:end="1203:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1205:13" pos:end="1205:18">break;</break>

        <case pos:start="1207:9" pos:end="1207:15">case <expr pos:start="1207:14" pos:end="1207:14"><literal type="number" pos:start="1207:14" pos:end="1207:14">6</literal></expr>:</case> <comment type="block" pos:start="1207:17" pos:end="1207:29">/* push Ev */</comment>

            <expr_stmt pos:start="1209:13" pos:end="1209:27"><expr pos:start="1209:13" pos:end="1209:26"><call pos:start="1209:13" pos:end="1209:26"><name pos:start="1209:13" pos:end="1209:23">gen_push_T0</name><argument_list pos:start="1209:24" pos:end="1209:26">(<argument pos:start="1209:25" pos:end="1209:25"><expr pos:start="1209:25" pos:end="1209:25"><name pos:start="1209:25" pos:end="1209:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1211:13" pos:end="1211:18">break;</break>

        <default pos:start="1213:9" pos:end="1213:16">default:</default>

            <goto pos:start="1215:13" pos:end="1215:28">goto <name pos:start="1215:18" pos:end="1215:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="1219:9" pos:end="1219:14">break;</break>



    <case pos:start="1223:5" pos:end="1223:14">case <expr pos:start="1223:10" pos:end="1223:13"><literal type="number" pos:start="1223:10" pos:end="1223:13">0x84</literal></expr>:</case> <comment type="block" pos:start="1223:16" pos:end="1223:32">/* test Ev, Gv */</comment>

    <case pos:start="1225:5" pos:end="1225:14">case <expr pos:start="1225:10" pos:end="1225:13"><literal type="number" pos:start="1225:10" pos:end="1225:13">0x85</literal></expr>:</case>

        <if_stmt pos:start="1227:9" pos:end="1233:33"><if pos:start="1227:9" pos:end="1229:25">if <condition pos:start="1227:12" pos:end="1227:25">(<expr pos:start="1227:13" pos:end="1227:24"><operator pos:start="1227:13" pos:end="1227:13">(</operator><name pos:start="1227:14" pos:end="1227:14">b</name> <operator pos:start="1227:16" pos:end="1227:16">&amp;</operator> <literal type="number" pos:start="1227:18" pos:end="1227:18">1</literal><operator pos:start="1227:19" pos:end="1227:19">)</operator> <operator pos:start="1227:21" pos:end="1227:22">==</operator> <literal type="number" pos:start="1227:24" pos:end="1227:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1229:13" pos:end="1229:25"><block_content pos:start="1229:13" pos:end="1229:25">

            <expr_stmt pos:start="1229:13" pos:end="1229:25"><expr pos:start="1229:13" pos:end="1229:24"><name pos:start="1229:13" pos:end="1229:14">ot</name> <operator pos:start="1229:16" pos:end="1229:16">=</operator> <name pos:start="1229:18" pos:end="1229:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1231:9" pos:end="1233:33">else<block type="pseudo" pos:start="1233:13" pos:end="1233:33"><block_content pos:start="1233:13" pos:end="1233:33">

            <expr_stmt pos:start="1233:13" pos:end="1233:33"><expr pos:start="1233:13" pos:end="1233:32"><name pos:start="1233:13" pos:end="1233:14">ot</name> <operator pos:start="1233:16" pos:end="1233:16">=</operator> <name pos:start="1233:18" pos:end="1233:22">dflag</name> <operator pos:start="1233:24" pos:end="1233:24">+</operator> <name pos:start="1233:26" pos:end="1233:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="1237:9" pos:end="1237:35"><expr pos:start="1237:9" pos:end="1237:34"><name pos:start="1237:9" pos:end="1237:13">modrm</name> <operator pos:start="1237:15" pos:end="1237:15">=</operator> <call pos:start="1237:17" pos:end="1237:34"><name pos:start="1237:17" pos:end="1237:25">ldub_code</name><argument_list pos:start="1237:26" pos:end="1237:34">(<argument pos:start="1237:27" pos:end="1237:33"><expr pos:start="1237:27" pos:end="1237:33"><name pos:start="1237:27" pos:end="1237:31"><name pos:start="1237:27" pos:end="1237:27">s</name><operator pos:start="1237:28" pos:end="1237:29">-&gt;</operator><name pos:start="1237:30" pos:end="1237:31">pc</name></name><operator pos:start="1237:32" pos:end="1237:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1239:9" pos:end="1239:31"><expr pos:start="1239:9" pos:end="1239:30"><name pos:start="1239:9" pos:end="1239:11">mod</name> <operator pos:start="1239:13" pos:end="1239:13">=</operator> <operator pos:start="1239:15" pos:end="1239:15">(</operator><name pos:start="1239:16" pos:end="1239:20">modrm</name> <operator pos:start="1239:22" pos:end="1239:23">&gt;&gt;</operator> <literal type="number" pos:start="1239:25" pos:end="1239:25">6</literal><operator pos:start="1239:26" pos:end="1239:26">)</operator> <operator pos:start="1239:28" pos:end="1239:28">&amp;</operator> <literal type="number" pos:start="1239:30" pos:end="1239:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1241:9" pos:end="1241:36"><expr pos:start="1241:9" pos:end="1241:35"><name pos:start="1241:9" pos:end="1241:10">rm</name> <operator pos:start="1241:12" pos:end="1241:12">=</operator> <operator pos:start="1241:14" pos:end="1241:14">(</operator><name pos:start="1241:15" pos:end="1241:19">modrm</name> <operator pos:start="1241:21" pos:end="1241:21">&amp;</operator> <literal type="number" pos:start="1241:23" pos:end="1241:23">7</literal><operator pos:start="1241:24" pos:end="1241:24">)</operator> <operator pos:start="1241:26" pos:end="1241:26">|</operator> <call pos:start="1241:28" pos:end="1241:35"><name pos:start="1241:28" pos:end="1241:32">REX_B</name><argument_list pos:start="1241:33" pos:end="1241:35">(<argument pos:start="1241:34" pos:end="1241:34"><expr pos:start="1241:34" pos:end="1241:34"><name pos:start="1241:34" pos:end="1241:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1243:9" pos:end="1243:41"><expr pos:start="1243:9" pos:end="1243:40"><name pos:start="1243:9" pos:end="1243:11">reg</name> <operator pos:start="1243:13" pos:end="1243:13">=</operator> <operator pos:start="1243:15" pos:end="1243:15">(</operator><operator pos:start="1243:16" pos:end="1243:16">(</operator><name pos:start="1243:17" pos:end="1243:21">modrm</name> <operator pos:start="1243:23" pos:end="1243:24">&gt;&gt;</operator> <literal type="number" pos:start="1243:26" pos:end="1243:26">3</literal><operator pos:start="1243:27" pos:end="1243:27">)</operator> <operator pos:start="1243:29" pos:end="1243:29">&amp;</operator> <literal type="number" pos:start="1243:31" pos:end="1243:31">7</literal><operator pos:start="1243:32" pos:end="1243:32">)</operator> <operator pos:start="1243:34" pos:end="1243:34">|</operator> <name pos:start="1243:36" pos:end="1243:40">rex_r</name></expr>;</expr_stmt>



        <expr_stmt pos:start="1247:9" pos:end="1247:49"><expr pos:start="1247:9" pos:end="1247:48"><call pos:start="1247:9" pos:end="1247:48"><name pos:start="1247:9" pos:end="1247:22">gen_ldst_modrm</name><argument_list pos:start="1247:23" pos:end="1247:48">(<argument pos:start="1247:24" pos:end="1247:24"><expr pos:start="1247:24" pos:end="1247:24"><name pos:start="1247:24" pos:end="1247:24">s</name></expr></argument>, <argument pos:start="1247:27" pos:end="1247:31"><expr pos:start="1247:27" pos:end="1247:31"><name pos:start="1247:27" pos:end="1247:31">modrm</name></expr></argument>, <argument pos:start="1247:34" pos:end="1247:35"><expr pos:start="1247:34" pos:end="1247:35"><name pos:start="1247:34" pos:end="1247:35">ot</name></expr></argument>, <argument pos:start="1247:38" pos:end="1247:44"><expr pos:start="1247:38" pos:end="1247:44"><name pos:start="1247:38" pos:end="1247:44">OR_TMP0</name></expr></argument>, <argument pos:start="1247:47" pos:end="1247:47"><expr pos:start="1247:47" pos:end="1247:47"><literal type="number" pos:start="1247:47" pos:end="1247:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1249:9" pos:end="1249:38"><expr pos:start="1249:9" pos:end="1249:37"><call pos:start="1249:9" pos:end="1249:37"><name pos:start="1249:9" pos:end="1249:25">gen_op_mov_TN_reg</name><argument_list pos:start="1249:26" pos:end="1249:37">(<argument pos:start="1249:27" pos:end="1249:28"><expr pos:start="1249:27" pos:end="1249:28"><name pos:start="1249:27" pos:end="1249:28">ot</name></expr></argument>, <argument pos:start="1249:31" pos:end="1249:31"><expr pos:start="1249:31" pos:end="1249:31"><literal type="number" pos:start="1249:31" pos:end="1249:31">1</literal></expr></argument>, <argument pos:start="1249:34" pos:end="1249:36"><expr pos:start="1249:34" pos:end="1249:36"><name pos:start="1249:34" pos:end="1249:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1251:9" pos:end="1251:32"><expr pos:start="1251:9" pos:end="1251:31"><call pos:start="1251:9" pos:end="1251:31"><name pos:start="1251:9" pos:end="1251:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="1251:30" pos:end="1251:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1253:9" pos:end="1253:37"><expr pos:start="1253:9" pos:end="1253:36"><name pos:start="1253:9" pos:end="1253:16"><name pos:start="1253:9" pos:end="1253:9">s</name><operator pos:start="1253:10" pos:end="1253:11">-&gt;</operator><name pos:start="1253:12" pos:end="1253:16">cc_op</name></name> <operator pos:start="1253:18" pos:end="1253:18">=</operator> <name pos:start="1253:20" pos:end="1253:31">CC_OP_LOGICB</name> <operator pos:start="1253:33" pos:end="1253:33">+</operator> <name pos:start="1253:35" pos:end="1253:36">ot</name></expr>;</expr_stmt>

        <break pos:start="1255:9" pos:end="1255:14">break;</break>



    <case pos:start="1259:5" pos:end="1259:14">case <expr pos:start="1259:10" pos:end="1259:13"><literal type="number" pos:start="1259:10" pos:end="1259:13">0xa8</literal></expr>:</case> <comment type="block" pos:start="1259:16" pos:end="1259:33">/* test eAX, Iv */</comment>

    <case pos:start="1261:5" pos:end="1261:14">case <expr pos:start="1261:10" pos:end="1261:13"><literal type="number" pos:start="1261:10" pos:end="1261:13">0xa9</literal></expr>:</case>

        <if_stmt pos:start="1263:9" pos:end="1269:33"><if pos:start="1263:9" pos:end="1265:25">if <condition pos:start="1263:12" pos:end="1263:25">(<expr pos:start="1263:13" pos:end="1263:24"><operator pos:start="1263:13" pos:end="1263:13">(</operator><name pos:start="1263:14" pos:end="1263:14">b</name> <operator pos:start="1263:16" pos:end="1263:16">&amp;</operator> <literal type="number" pos:start="1263:18" pos:end="1263:18">1</literal><operator pos:start="1263:19" pos:end="1263:19">)</operator> <operator pos:start="1263:21" pos:end="1263:22">==</operator> <literal type="number" pos:start="1263:24" pos:end="1263:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1265:13" pos:end="1265:25"><block_content pos:start="1265:13" pos:end="1265:25">

            <expr_stmt pos:start="1265:13" pos:end="1265:25"><expr pos:start="1265:13" pos:end="1265:24"><name pos:start="1265:13" pos:end="1265:14">ot</name> <operator pos:start="1265:16" pos:end="1265:16">=</operator> <name pos:start="1265:18" pos:end="1265:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1267:9" pos:end="1269:33">else<block type="pseudo" pos:start="1269:13" pos:end="1269:33"><block_content pos:start="1269:13" pos:end="1269:33">

            <expr_stmt pos:start="1269:13" pos:end="1269:33"><expr pos:start="1269:13" pos:end="1269:32"><name pos:start="1269:13" pos:end="1269:14">ot</name> <operator pos:start="1269:16" pos:end="1269:16">=</operator> <name pos:start="1269:18" pos:end="1269:22">dflag</name> <operator pos:start="1269:24" pos:end="1269:24">+</operator> <name pos:start="1269:26" pos:end="1269:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1271:9" pos:end="1271:30"><expr pos:start="1271:9" pos:end="1271:29"><name pos:start="1271:9" pos:end="1271:11">val</name> <operator pos:start="1271:13" pos:end="1271:13">=</operator> <call pos:start="1271:15" pos:end="1271:29"><name pos:start="1271:15" pos:end="1271:22">insn_get</name><argument_list pos:start="1271:23" pos:end="1271:29">(<argument pos:start="1271:24" pos:end="1271:24"><expr pos:start="1271:24" pos:end="1271:24"><name pos:start="1271:24" pos:end="1271:24">s</name></expr></argument>, <argument pos:start="1271:27" pos:end="1271:28"><expr pos:start="1271:27" pos:end="1271:28"><name pos:start="1271:27" pos:end="1271:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="1275:9" pos:end="1275:41"><expr pos:start="1275:9" pos:end="1275:40"><call pos:start="1275:9" pos:end="1275:40"><name pos:start="1275:9" pos:end="1275:25">gen_op_mov_TN_reg</name><argument_list pos:start="1275:26" pos:end="1275:40">(<argument pos:start="1275:27" pos:end="1275:28"><expr pos:start="1275:27" pos:end="1275:28"><name pos:start="1275:27" pos:end="1275:28">ot</name></expr></argument>, <argument pos:start="1275:31" pos:end="1275:31"><expr pos:start="1275:31" pos:end="1275:31"><literal type="number" pos:start="1275:31" pos:end="1275:31">0</literal></expr></argument>, <argument pos:start="1275:34" pos:end="1275:39"><expr pos:start="1275:34" pos:end="1275:39"><name pos:start="1275:34" pos:end="1275:39">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1277:9" pos:end="1277:31"><expr pos:start="1277:9" pos:end="1277:30"><call pos:start="1277:9" pos:end="1277:30"><name pos:start="1277:9" pos:end="1277:25">gen_op_movl_T1_im</name><argument_list pos:start="1277:26" pos:end="1277:30">(<argument pos:start="1277:27" pos:end="1277:29"><expr pos:start="1277:27" pos:end="1277:29"><name pos:start="1277:27" pos:end="1277:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1279:9" pos:end="1279:32"><expr pos:start="1279:9" pos:end="1279:31"><call pos:start="1279:9" pos:end="1279:31"><name pos:start="1279:9" pos:end="1279:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="1279:30" pos:end="1279:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1281:9" pos:end="1281:37"><expr pos:start="1281:9" pos:end="1281:36"><name pos:start="1281:9" pos:end="1281:16"><name pos:start="1281:9" pos:end="1281:9">s</name><operator pos:start="1281:10" pos:end="1281:11">-&gt;</operator><name pos:start="1281:12" pos:end="1281:16">cc_op</name></name> <operator pos:start="1281:18" pos:end="1281:18">=</operator> <name pos:start="1281:20" pos:end="1281:31">CC_OP_LOGICB</name> <operator pos:start="1281:33" pos:end="1281:33">+</operator> <name pos:start="1281:35" pos:end="1281:36">ot</name></expr>;</expr_stmt>

        <break pos:start="1283:9" pos:end="1283:14">break;</break>



    <case pos:start="1287:5" pos:end="1290:0">case <expr pos:start="1287:10" pos:end="1287:13"><literal type="number" pos:start="1287:10" pos:end="1287:13">0x98</literal></expr>:</case> <comment type="block" pos:start="1287:16" pos:end="1287:29">/* CWDE/CBW */</comment>

<cpp:ifdef pos:start="1289:1" pos:end="1289:20">#<cpp:directive pos:start="1289:2" pos:end="1289:6">ifdef</cpp:directive> <name pos:start="1289:8" pos:end="1289:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1291:9" pos:end="1319:9"><if pos:start="1291:9" pos:end="1299:9">if <condition pos:start="1291:12" pos:end="1291:23">(<expr pos:start="1291:13" pos:end="1291:22"><name pos:start="1291:13" pos:end="1291:17">dflag</name> <operator pos:start="1291:19" pos:end="1291:20">==</operator> <literal type="number" pos:start="1291:22" pos:end="1291:22">2</literal></expr>)</condition> <block pos:start="1291:25" pos:end="1299:9">{<block_content pos:start="1293:13" pos:end="1297:46">

            <expr_stmt pos:start="1293:13" pos:end="1293:49"><expr pos:start="1293:13" pos:end="1293:48"><call pos:start="1293:13" pos:end="1293:48"><name pos:start="1293:13" pos:end="1293:29">gen_op_mov_TN_reg</name><argument_list pos:start="1293:30" pos:end="1293:48">(<argument pos:start="1293:31" pos:end="1293:37"><expr pos:start="1293:31" pos:end="1293:37"><name pos:start="1293:31" pos:end="1293:37">OT_LONG</name></expr></argument>, <argument pos:start="1293:40" pos:end="1293:40"><expr pos:start="1293:40" pos:end="1293:40"><literal type="number" pos:start="1293:40" pos:end="1293:40">0</literal></expr></argument>, <argument pos:start="1293:43" pos:end="1293:47"><expr pos:start="1293:43" pos:end="1293:47"><name pos:start="1293:43" pos:end="1293:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1295:13" pos:end="1295:50"><expr pos:start="1295:13" pos:end="1295:49"><call pos:start="1295:13" pos:end="1295:49"><name pos:start="1295:13" pos:end="1295:29">tcg_gen_ext32s_tl</name><argument_list pos:start="1295:30" pos:end="1295:49">(<argument pos:start="1295:31" pos:end="1295:38"><expr pos:start="1295:31" pos:end="1295:38"><name pos:start="1295:31" pos:end="1295:38"><name pos:start="1295:31" pos:end="1295:35">cpu_T</name><index pos:start="1295:36" pos:end="1295:38">[<expr pos:start="1295:37" pos:end="1295:37"><literal type="number" pos:start="1295:37" pos:end="1295:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1295:41" pos:end="1295:48"><expr pos:start="1295:41" pos:end="1295:48"><name pos:start="1295:41" pos:end="1295:48"><name pos:start="1295:41" pos:end="1295:45">cpu_T</name><index pos:start="1295:46" pos:end="1295:48">[<expr pos:start="1295:47" pos:end="1295:47"><literal type="number" pos:start="1295:47" pos:end="1295:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1297:13" pos:end="1297:46"><expr pos:start="1297:13" pos:end="1297:45"><call pos:start="1297:13" pos:end="1297:45"><name pos:start="1297:13" pos:end="1297:29">gen_op_mov_reg_T0</name><argument_list pos:start="1297:30" pos:end="1297:45">(<argument pos:start="1297:31" pos:end="1297:37"><expr pos:start="1297:31" pos:end="1297:37"><name pos:start="1297:31" pos:end="1297:37">OT_QUAD</name></expr></argument>, <argument pos:start="1297:40" pos:end="1297:44"><expr pos:start="1297:40" pos:end="1297:44"><name pos:start="1297:40" pos:end="1297:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1299:11" pos:end="1311:9">else

<cpp:endif pos:start="1301:1" pos:end="1301:6">#<cpp:directive pos:start="1301:2" pos:end="1301:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="1303:12" pos:end="1303:23">(<expr pos:start="1303:13" pos:end="1303:22"><name pos:start="1303:13" pos:end="1303:17">dflag</name> <operator pos:start="1303:19" pos:end="1303:20">==</operator> <literal type="number" pos:start="1303:22" pos:end="1303:22">1</literal></expr>)</condition> <block pos:start="1303:25" pos:end="1311:9">{<block_content pos:start="1305:13" pos:end="1309:46">

            <expr_stmt pos:start="1305:13" pos:end="1305:49"><expr pos:start="1305:13" pos:end="1305:48"><call pos:start="1305:13" pos:end="1305:48"><name pos:start="1305:13" pos:end="1305:29">gen_op_mov_TN_reg</name><argument_list pos:start="1305:30" pos:end="1305:48">(<argument pos:start="1305:31" pos:end="1305:37"><expr pos:start="1305:31" pos:end="1305:37"><name pos:start="1305:31" pos:end="1305:37">OT_WORD</name></expr></argument>, <argument pos:start="1305:40" pos:end="1305:40"><expr pos:start="1305:40" pos:end="1305:40"><literal type="number" pos:start="1305:40" pos:end="1305:40">0</literal></expr></argument>, <argument pos:start="1305:43" pos:end="1305:47"><expr pos:start="1305:43" pos:end="1305:47"><name pos:start="1305:43" pos:end="1305:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1307:13" pos:end="1307:50"><expr pos:start="1307:13" pos:end="1307:49"><call pos:start="1307:13" pos:end="1307:49"><name pos:start="1307:13" pos:end="1307:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1307:30" pos:end="1307:49">(<argument pos:start="1307:31" pos:end="1307:38"><expr pos:start="1307:31" pos:end="1307:38"><name pos:start="1307:31" pos:end="1307:38"><name pos:start="1307:31" pos:end="1307:35">cpu_T</name><index pos:start="1307:36" pos:end="1307:38">[<expr pos:start="1307:37" pos:end="1307:37"><literal type="number" pos:start="1307:37" pos:end="1307:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1307:41" pos:end="1307:48"><expr pos:start="1307:41" pos:end="1307:48"><name pos:start="1307:41" pos:end="1307:48"><name pos:start="1307:41" pos:end="1307:45">cpu_T</name><index pos:start="1307:46" pos:end="1307:48">[<expr pos:start="1307:47" pos:end="1307:47"><literal type="number" pos:start="1307:47" pos:end="1307:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1309:13" pos:end="1309:46"><expr pos:start="1309:13" pos:end="1309:45"><call pos:start="1309:13" pos:end="1309:45"><name pos:start="1309:13" pos:end="1309:29">gen_op_mov_reg_T0</name><argument_list pos:start="1309:30" pos:end="1309:45">(<argument pos:start="1309:31" pos:end="1309:37"><expr pos:start="1309:31" pos:end="1309:37"><name pos:start="1309:31" pos:end="1309:37">OT_LONG</name></expr></argument>, <argument pos:start="1309:40" pos:end="1309:44"><expr pos:start="1309:40" pos:end="1309:44"><name pos:start="1309:40" pos:end="1309:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1311:11" pos:end="1319:9">else <block pos:start="1311:16" pos:end="1319:9">{<block_content pos:start="1313:13" pos:end="1317:46">

            <expr_stmt pos:start="1313:13" pos:end="1313:49"><expr pos:start="1313:13" pos:end="1313:48"><call pos:start="1313:13" pos:end="1313:48"><name pos:start="1313:13" pos:end="1313:29">gen_op_mov_TN_reg</name><argument_list pos:start="1313:30" pos:end="1313:48">(<argument pos:start="1313:31" pos:end="1313:37"><expr pos:start="1313:31" pos:end="1313:37"><name pos:start="1313:31" pos:end="1313:37">OT_BYTE</name></expr></argument>, <argument pos:start="1313:40" pos:end="1313:40"><expr pos:start="1313:40" pos:end="1313:40"><literal type="number" pos:start="1313:40" pos:end="1313:40">0</literal></expr></argument>, <argument pos:start="1313:43" pos:end="1313:47"><expr pos:start="1313:43" pos:end="1313:47"><name pos:start="1313:43" pos:end="1313:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1315:13" pos:end="1315:49"><expr pos:start="1315:13" pos:end="1315:48"><call pos:start="1315:13" pos:end="1315:48"><name pos:start="1315:13" pos:end="1315:28">tcg_gen_ext8s_tl</name><argument_list pos:start="1315:29" pos:end="1315:48">(<argument pos:start="1315:30" pos:end="1315:37"><expr pos:start="1315:30" pos:end="1315:37"><name pos:start="1315:30" pos:end="1315:37"><name pos:start="1315:30" pos:end="1315:34">cpu_T</name><index pos:start="1315:35" pos:end="1315:37">[<expr pos:start="1315:36" pos:end="1315:36"><literal type="number" pos:start="1315:36" pos:end="1315:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1315:40" pos:end="1315:47"><expr pos:start="1315:40" pos:end="1315:47"><name pos:start="1315:40" pos:end="1315:47"><name pos:start="1315:40" pos:end="1315:44">cpu_T</name><index pos:start="1315:45" pos:end="1315:47">[<expr pos:start="1315:46" pos:end="1315:46"><literal type="number" pos:start="1315:46" pos:end="1315:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1317:13" pos:end="1317:46"><expr pos:start="1317:13" pos:end="1317:45"><call pos:start="1317:13" pos:end="1317:45"><name pos:start="1317:13" pos:end="1317:29">gen_op_mov_reg_T0</name><argument_list pos:start="1317:30" pos:end="1317:45">(<argument pos:start="1317:31" pos:end="1317:37"><expr pos:start="1317:31" pos:end="1317:37"><name pos:start="1317:31" pos:end="1317:37">OT_WORD</name></expr></argument>, <argument pos:start="1317:40" pos:end="1317:44"><expr pos:start="1317:40" pos:end="1317:44"><name pos:start="1317:40" pos:end="1317:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1321:9" pos:end="1321:14">break;</break>

    <case pos:start="1323:5" pos:end="1326:0">case <expr pos:start="1323:10" pos:end="1323:13"><literal type="number" pos:start="1323:10" pos:end="1323:13">0x99</literal></expr>:</case> <comment type="block" pos:start="1323:16" pos:end="1323:28">/* CDQ/CWD */</comment>

<cpp:ifdef pos:start="1325:1" pos:end="1325:20">#<cpp:directive pos:start="1325:2" pos:end="1325:6">ifdef</cpp:directive> <name pos:start="1325:8" pos:end="1325:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1327:9" pos:end="1359:9"><if pos:start="1327:9" pos:end="1335:9">if <condition pos:start="1327:12" pos:end="1327:23">(<expr pos:start="1327:13" pos:end="1327:22"><name pos:start="1327:13" pos:end="1327:17">dflag</name> <operator pos:start="1327:19" pos:end="1327:20">==</operator> <literal type="number" pos:start="1327:22" pos:end="1327:22">2</literal></expr>)</condition> <block pos:start="1327:25" pos:end="1335:9">{<block_content pos:start="1329:13" pos:end="1333:46">

            <expr_stmt pos:start="1329:13" pos:end="1329:49"><expr pos:start="1329:13" pos:end="1329:48"><call pos:start="1329:13" pos:end="1329:48"><name pos:start="1329:13" pos:end="1329:29">gen_op_mov_TN_reg</name><argument_list pos:start="1329:30" pos:end="1329:48">(<argument pos:start="1329:31" pos:end="1329:37"><expr pos:start="1329:31" pos:end="1329:37"><name pos:start="1329:31" pos:end="1329:37">OT_QUAD</name></expr></argument>, <argument pos:start="1329:40" pos:end="1329:40"><expr pos:start="1329:40" pos:end="1329:40"><literal type="number" pos:start="1329:40" pos:end="1329:40">0</literal></expr></argument>, <argument pos:start="1329:43" pos:end="1329:47"><expr pos:start="1329:43" pos:end="1329:47"><name pos:start="1329:43" pos:end="1329:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1331:13" pos:end="1331:52"><expr pos:start="1331:13" pos:end="1331:51"><call pos:start="1331:13" pos:end="1331:51"><name pos:start="1331:13" pos:end="1331:27">tcg_gen_sari_tl</name><argument_list pos:start="1331:28" pos:end="1331:51">(<argument pos:start="1331:29" pos:end="1331:36"><expr pos:start="1331:29" pos:end="1331:36"><name pos:start="1331:29" pos:end="1331:36"><name pos:start="1331:29" pos:end="1331:33">cpu_T</name><index pos:start="1331:34" pos:end="1331:36">[<expr pos:start="1331:35" pos:end="1331:35"><literal type="number" pos:start="1331:35" pos:end="1331:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1331:39" pos:end="1331:46"><expr pos:start="1331:39" pos:end="1331:46"><name pos:start="1331:39" pos:end="1331:46"><name pos:start="1331:39" pos:end="1331:43">cpu_T</name><index pos:start="1331:44" pos:end="1331:46">[<expr pos:start="1331:45" pos:end="1331:45"><literal type="number" pos:start="1331:45" pos:end="1331:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1331:49" pos:end="1331:50"><expr pos:start="1331:49" pos:end="1331:50"><literal type="number" pos:start="1331:49" pos:end="1331:50">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1333:13" pos:end="1333:46"><expr pos:start="1333:13" pos:end="1333:45"><call pos:start="1333:13" pos:end="1333:45"><name pos:start="1333:13" pos:end="1333:29">gen_op_mov_reg_T0</name><argument_list pos:start="1333:30" pos:end="1333:45">(<argument pos:start="1333:31" pos:end="1333:37"><expr pos:start="1333:31" pos:end="1333:37"><name pos:start="1333:31" pos:end="1333:37">OT_QUAD</name></expr></argument>, <argument pos:start="1333:40" pos:end="1333:44"><expr pos:start="1333:40" pos:end="1333:44"><name pos:start="1333:40" pos:end="1333:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1335:11" pos:end="1349:9">else

<cpp:endif pos:start="1337:1" pos:end="1337:6">#<cpp:directive pos:start="1337:2" pos:end="1337:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="1339:12" pos:end="1339:23">(<expr pos:start="1339:13" pos:end="1339:22"><name pos:start="1339:13" pos:end="1339:17">dflag</name> <operator pos:start="1339:19" pos:end="1339:20">==</operator> <literal type="number" pos:start="1339:22" pos:end="1339:22">1</literal></expr>)</condition> <block pos:start="1339:25" pos:end="1349:9">{<block_content pos:start="1341:13" pos:end="1347:46">

            <expr_stmt pos:start="1341:13" pos:end="1341:49"><expr pos:start="1341:13" pos:end="1341:48"><call pos:start="1341:13" pos:end="1341:48"><name pos:start="1341:13" pos:end="1341:29">gen_op_mov_TN_reg</name><argument_list pos:start="1341:30" pos:end="1341:48">(<argument pos:start="1341:31" pos:end="1341:37"><expr pos:start="1341:31" pos:end="1341:37"><name pos:start="1341:31" pos:end="1341:37">OT_LONG</name></expr></argument>, <argument pos:start="1341:40" pos:end="1341:40"><expr pos:start="1341:40" pos:end="1341:40"><literal type="number" pos:start="1341:40" pos:end="1341:40">0</literal></expr></argument>, <argument pos:start="1341:43" pos:end="1341:47"><expr pos:start="1341:43" pos:end="1341:47"><name pos:start="1341:43" pos:end="1341:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1343:13" pos:end="1343:50"><expr pos:start="1343:13" pos:end="1343:49"><call pos:start="1343:13" pos:end="1343:49"><name pos:start="1343:13" pos:end="1343:29">tcg_gen_ext32s_tl</name><argument_list pos:start="1343:30" pos:end="1343:49">(<argument pos:start="1343:31" pos:end="1343:38"><expr pos:start="1343:31" pos:end="1343:38"><name pos:start="1343:31" pos:end="1343:38"><name pos:start="1343:31" pos:end="1343:35">cpu_T</name><index pos:start="1343:36" pos:end="1343:38">[<expr pos:start="1343:37" pos:end="1343:37"><literal type="number" pos:start="1343:37" pos:end="1343:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1343:41" pos:end="1343:48"><expr pos:start="1343:41" pos:end="1343:48"><name pos:start="1343:41" pos:end="1343:48"><name pos:start="1343:41" pos:end="1343:45">cpu_T</name><index pos:start="1343:46" pos:end="1343:48">[<expr pos:start="1343:47" pos:end="1343:47"><literal type="number" pos:start="1343:47" pos:end="1343:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1345:13" pos:end="1345:52"><expr pos:start="1345:13" pos:end="1345:51"><call pos:start="1345:13" pos:end="1345:51"><name pos:start="1345:13" pos:end="1345:27">tcg_gen_sari_tl</name><argument_list pos:start="1345:28" pos:end="1345:51">(<argument pos:start="1345:29" pos:end="1345:36"><expr pos:start="1345:29" pos:end="1345:36"><name pos:start="1345:29" pos:end="1345:36"><name pos:start="1345:29" pos:end="1345:33">cpu_T</name><index pos:start="1345:34" pos:end="1345:36">[<expr pos:start="1345:35" pos:end="1345:35"><literal type="number" pos:start="1345:35" pos:end="1345:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1345:39" pos:end="1345:46"><expr pos:start="1345:39" pos:end="1345:46"><name pos:start="1345:39" pos:end="1345:46"><name pos:start="1345:39" pos:end="1345:43">cpu_T</name><index pos:start="1345:44" pos:end="1345:46">[<expr pos:start="1345:45" pos:end="1345:45"><literal type="number" pos:start="1345:45" pos:end="1345:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1345:49" pos:end="1345:50"><expr pos:start="1345:49" pos:end="1345:50"><literal type="number" pos:start="1345:49" pos:end="1345:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1347:13" pos:end="1347:46"><expr pos:start="1347:13" pos:end="1347:45"><call pos:start="1347:13" pos:end="1347:45"><name pos:start="1347:13" pos:end="1347:29">gen_op_mov_reg_T0</name><argument_list pos:start="1347:30" pos:end="1347:45">(<argument pos:start="1347:31" pos:end="1347:37"><expr pos:start="1347:31" pos:end="1347:37"><name pos:start="1347:31" pos:end="1347:37">OT_LONG</name></expr></argument>, <argument pos:start="1347:40" pos:end="1347:44"><expr pos:start="1347:40" pos:end="1347:44"><name pos:start="1347:40" pos:end="1347:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1349:11" pos:end="1359:9">else <block pos:start="1349:16" pos:end="1359:9">{<block_content pos:start="1351:13" pos:end="1357:46">

            <expr_stmt pos:start="1351:13" pos:end="1351:49"><expr pos:start="1351:13" pos:end="1351:48"><call pos:start="1351:13" pos:end="1351:48"><name pos:start="1351:13" pos:end="1351:29">gen_op_mov_TN_reg</name><argument_list pos:start="1351:30" pos:end="1351:48">(<argument pos:start="1351:31" pos:end="1351:37"><expr pos:start="1351:31" pos:end="1351:37"><name pos:start="1351:31" pos:end="1351:37">OT_WORD</name></expr></argument>, <argument pos:start="1351:40" pos:end="1351:40"><expr pos:start="1351:40" pos:end="1351:40"><literal type="number" pos:start="1351:40" pos:end="1351:40">0</literal></expr></argument>, <argument pos:start="1351:43" pos:end="1351:47"><expr pos:start="1351:43" pos:end="1351:47"><name pos:start="1351:43" pos:end="1351:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1353:13" pos:end="1353:50"><expr pos:start="1353:13" pos:end="1353:49"><call pos:start="1353:13" pos:end="1353:49"><name pos:start="1353:13" pos:end="1353:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1353:30" pos:end="1353:49">(<argument pos:start="1353:31" pos:end="1353:38"><expr pos:start="1353:31" pos:end="1353:38"><name pos:start="1353:31" pos:end="1353:38"><name pos:start="1353:31" pos:end="1353:35">cpu_T</name><index pos:start="1353:36" pos:end="1353:38">[<expr pos:start="1353:37" pos:end="1353:37"><literal type="number" pos:start="1353:37" pos:end="1353:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1353:41" pos:end="1353:48"><expr pos:start="1353:41" pos:end="1353:48"><name pos:start="1353:41" pos:end="1353:48"><name pos:start="1353:41" pos:end="1353:45">cpu_T</name><index pos:start="1353:46" pos:end="1353:48">[<expr pos:start="1353:47" pos:end="1353:47"><literal type="number" pos:start="1353:47" pos:end="1353:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1355:13" pos:end="1355:52"><expr pos:start="1355:13" pos:end="1355:51"><call pos:start="1355:13" pos:end="1355:51"><name pos:start="1355:13" pos:end="1355:27">tcg_gen_sari_tl</name><argument_list pos:start="1355:28" pos:end="1355:51">(<argument pos:start="1355:29" pos:end="1355:36"><expr pos:start="1355:29" pos:end="1355:36"><name pos:start="1355:29" pos:end="1355:36"><name pos:start="1355:29" pos:end="1355:33">cpu_T</name><index pos:start="1355:34" pos:end="1355:36">[<expr pos:start="1355:35" pos:end="1355:35"><literal type="number" pos:start="1355:35" pos:end="1355:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1355:39" pos:end="1355:46"><expr pos:start="1355:39" pos:end="1355:46"><name pos:start="1355:39" pos:end="1355:46"><name pos:start="1355:39" pos:end="1355:43">cpu_T</name><index pos:start="1355:44" pos:end="1355:46">[<expr pos:start="1355:45" pos:end="1355:45"><literal type="number" pos:start="1355:45" pos:end="1355:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1355:49" pos:end="1355:50"><expr pos:start="1355:49" pos:end="1355:50"><literal type="number" pos:start="1355:49" pos:end="1355:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1357:13" pos:end="1357:46"><expr pos:start="1357:13" pos:end="1357:45"><call pos:start="1357:13" pos:end="1357:45"><name pos:start="1357:13" pos:end="1357:29">gen_op_mov_reg_T0</name><argument_list pos:start="1357:30" pos:end="1357:45">(<argument pos:start="1357:31" pos:end="1357:37"><expr pos:start="1357:31" pos:end="1357:37"><name pos:start="1357:31" pos:end="1357:37">OT_WORD</name></expr></argument>, <argument pos:start="1357:40" pos:end="1357:44"><expr pos:start="1357:40" pos:end="1357:44"><name pos:start="1357:40" pos:end="1357:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1361:9" pos:end="1361:14">break;</break>

    <case pos:start="1363:5" pos:end="1363:15">case <expr pos:start="1363:10" pos:end="1363:14"><literal type="number" pos:start="1363:10" pos:end="1363:14">0x1af</literal></expr>:</case> <comment type="block" pos:start="1363:17" pos:end="1363:33">/* imul Gv, Ev */</comment>

    <case pos:start="1365:5" pos:end="1365:14">case <expr pos:start="1365:10" pos:end="1365:13"><literal type="number" pos:start="1365:10" pos:end="1365:13">0x69</literal></expr>:</case> <comment type="block" pos:start="1365:16" pos:end="1365:35">/* imul Gv, Ev, I */</comment>

    <case pos:start="1367:5" pos:end="1367:14">case <expr pos:start="1367:10" pos:end="1367:13"><literal type="number" pos:start="1367:10" pos:end="1367:13">0x6b</literal></expr>:</case>

        <expr_stmt pos:start="1369:9" pos:end="1369:29"><expr pos:start="1369:9" pos:end="1369:28"><name pos:start="1369:9" pos:end="1369:10">ot</name> <operator pos:start="1369:12" pos:end="1369:12">=</operator> <name pos:start="1369:14" pos:end="1369:18">dflag</name> <operator pos:start="1369:20" pos:end="1369:20">+</operator> <name pos:start="1369:22" pos:end="1369:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1371:9" pos:end="1371:35"><expr pos:start="1371:9" pos:end="1371:34"><name pos:start="1371:9" pos:end="1371:13">modrm</name> <operator pos:start="1371:15" pos:end="1371:15">=</operator> <call pos:start="1371:17" pos:end="1371:34"><name pos:start="1371:17" pos:end="1371:25">ldub_code</name><argument_list pos:start="1371:26" pos:end="1371:34">(<argument pos:start="1371:27" pos:end="1371:33"><expr pos:start="1371:27" pos:end="1371:33"><name pos:start="1371:27" pos:end="1371:31"><name pos:start="1371:27" pos:end="1371:27">s</name><operator pos:start="1371:28" pos:end="1371:29">-&gt;</operator><name pos:start="1371:30" pos:end="1371:31">pc</name></name><operator pos:start="1371:32" pos:end="1371:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1373:9" pos:end="1373:41"><expr pos:start="1373:9" pos:end="1373:40"><name pos:start="1373:9" pos:end="1373:11">reg</name> <operator pos:start="1373:13" pos:end="1373:13">=</operator> <operator pos:start="1373:15" pos:end="1373:15">(</operator><operator pos:start="1373:16" pos:end="1373:16">(</operator><name pos:start="1373:17" pos:end="1373:21">modrm</name> <operator pos:start="1373:23" pos:end="1373:24">&gt;&gt;</operator> <literal type="number" pos:start="1373:26" pos:end="1373:26">3</literal><operator pos:start="1373:27" pos:end="1373:27">)</operator> <operator pos:start="1373:29" pos:end="1373:29">&amp;</operator> <literal type="number" pos:start="1373:31" pos:end="1373:31">7</literal><operator pos:start="1373:32" pos:end="1373:32">)</operator> <operator pos:start="1373:34" pos:end="1373:34">|</operator> <name pos:start="1373:36" pos:end="1373:40">rex_r</name></expr>;</expr_stmt>

        <if_stmt pos:start="1375:9" pos:end="1381:30"><if pos:start="1375:9" pos:end="1377:48">if <condition pos:start="1375:12" pos:end="1375:22">(<expr pos:start="1375:13" pos:end="1375:21"><name pos:start="1375:13" pos:end="1375:13">b</name> <operator pos:start="1375:15" pos:end="1375:16">==</operator> <literal type="number" pos:start="1375:18" pos:end="1375:21">0x69</literal></expr>)</condition><block type="pseudo" pos:start="1377:13" pos:end="1377:48"><block_content pos:start="1377:13" pos:end="1377:48">

            <expr_stmt pos:start="1377:13" pos:end="1377:48"><expr pos:start="1377:13" pos:end="1377:47"><name pos:start="1377:13" pos:end="1377:25"><name pos:start="1377:13" pos:end="1377:13">s</name><operator pos:start="1377:14" pos:end="1377:15">-&gt;</operator><name pos:start="1377:16" pos:end="1377:25">rip_offset</name></name> <operator pos:start="1377:27" pos:end="1377:27">=</operator> <call pos:start="1377:29" pos:end="1377:47"><name pos:start="1377:29" pos:end="1377:43">insn_const_size</name><argument_list pos:start="1377:44" pos:end="1377:47">(<argument pos:start="1377:45" pos:end="1377:46"><expr pos:start="1377:45" pos:end="1377:46"><name pos:start="1377:45" pos:end="1377:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="1379:9" pos:end="1381:30">else if <condition pos:start="1379:17" pos:end="1379:27">(<expr pos:start="1379:18" pos:end="1379:26"><name pos:start="1379:18" pos:end="1379:18">b</name> <operator pos:start="1379:20" pos:end="1379:21">==</operator> <literal type="number" pos:start="1379:23" pos:end="1379:26">0x6b</literal></expr>)</condition><block type="pseudo" pos:start="1381:13" pos:end="1381:30"><block_content pos:start="1381:13" pos:end="1381:30">

            <expr_stmt pos:start="1381:13" pos:end="1381:30"><expr pos:start="1381:13" pos:end="1381:29"><name pos:start="1381:13" pos:end="1381:25"><name pos:start="1381:13" pos:end="1381:13">s</name><operator pos:start="1381:14" pos:end="1381:15">-&gt;</operator><name pos:start="1381:16" pos:end="1381:25">rip_offset</name></name> <operator pos:start="1381:27" pos:end="1381:27">=</operator> <literal type="number" pos:start="1381:29" pos:end="1381:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1383:9" pos:end="1383:49"><expr pos:start="1383:9" pos:end="1383:48"><call pos:start="1383:9" pos:end="1383:48"><name pos:start="1383:9" pos:end="1383:22">gen_ldst_modrm</name><argument_list pos:start="1383:23" pos:end="1383:48">(<argument pos:start="1383:24" pos:end="1383:24"><expr pos:start="1383:24" pos:end="1383:24"><name pos:start="1383:24" pos:end="1383:24">s</name></expr></argument>, <argument pos:start="1383:27" pos:end="1383:31"><expr pos:start="1383:27" pos:end="1383:31"><name pos:start="1383:27" pos:end="1383:31">modrm</name></expr></argument>, <argument pos:start="1383:34" pos:end="1383:35"><expr pos:start="1383:34" pos:end="1383:35"><name pos:start="1383:34" pos:end="1383:35">ot</name></expr></argument>, <argument pos:start="1383:38" pos:end="1383:44"><expr pos:start="1383:38" pos:end="1383:44"><name pos:start="1383:38" pos:end="1383:44">OR_TMP0</name></expr></argument>, <argument pos:start="1383:47" pos:end="1383:47"><expr pos:start="1383:47" pos:end="1383:47"><literal type="number" pos:start="1383:47" pos:end="1383:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1385:9" pos:end="1406:0"><if pos:start="1385:9" pos:end="1391:9">if <condition pos:start="1385:12" pos:end="1385:22">(<expr pos:start="1385:13" pos:end="1385:21"><name pos:start="1385:13" pos:end="1385:13">b</name> <operator pos:start="1385:15" pos:end="1385:16">==</operator> <literal type="number" pos:start="1385:18" pos:end="1385:21">0x69</literal></expr>)</condition> <block pos:start="1385:24" pos:end="1391:9">{<block_content pos:start="1387:13" pos:end="1389:35">

            <expr_stmt pos:start="1387:13" pos:end="1387:34"><expr pos:start="1387:13" pos:end="1387:33"><name pos:start="1387:13" pos:end="1387:15">val</name> <operator pos:start="1387:17" pos:end="1387:17">=</operator> <call pos:start="1387:19" pos:end="1387:33"><name pos:start="1387:19" pos:end="1387:26">insn_get</name><argument_list pos:start="1387:27" pos:end="1387:33">(<argument pos:start="1387:28" pos:end="1387:28"><expr pos:start="1387:28" pos:end="1387:28"><name pos:start="1387:28" pos:end="1387:28">s</name></expr></argument>, <argument pos:start="1387:31" pos:end="1387:32"><expr pos:start="1387:31" pos:end="1387:32"><name pos:start="1387:31" pos:end="1387:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1389:13" pos:end="1389:35"><expr pos:start="1389:13" pos:end="1389:34"><call pos:start="1389:13" pos:end="1389:34"><name pos:start="1389:13" pos:end="1389:29">gen_op_movl_T1_im</name><argument_list pos:start="1389:30" pos:end="1389:34">(<argument pos:start="1389:31" pos:end="1389:33"><expr pos:start="1389:31" pos:end="1389:33"><name pos:start="1389:31" pos:end="1389:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1391:11" pos:end="1397:9">else if <condition pos:start="1391:19" pos:end="1391:29">(<expr pos:start="1391:20" pos:end="1391:28"><name pos:start="1391:20" pos:end="1391:20">b</name> <operator pos:start="1391:22" pos:end="1391:23">==</operator> <literal type="number" pos:start="1391:25" pos:end="1391:28">0x6b</literal></expr>)</condition> <block pos:start="1391:31" pos:end="1397:9">{<block_content pos:start="1393:13" pos:end="1395:35">

            <expr_stmt pos:start="1393:13" pos:end="1393:47"><expr pos:start="1393:13" pos:end="1393:46"><name pos:start="1393:13" pos:end="1393:15">val</name> <operator pos:start="1393:17" pos:end="1393:17">=</operator> <operator pos:start="1393:19" pos:end="1393:19">(</operator><name pos:start="1393:20" pos:end="1393:25">int8_t</name><operator pos:start="1393:26" pos:end="1393:26">)</operator><call pos:start="1393:27" pos:end="1393:46"><name pos:start="1393:27" pos:end="1393:34">insn_get</name><argument_list pos:start="1393:35" pos:end="1393:46">(<argument pos:start="1393:36" pos:end="1393:36"><expr pos:start="1393:36" pos:end="1393:36"><name pos:start="1393:36" pos:end="1393:36">s</name></expr></argument>, <argument pos:start="1393:39" pos:end="1393:45"><expr pos:start="1393:39" pos:end="1393:45"><name pos:start="1393:39" pos:end="1393:45">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1395:13" pos:end="1395:35"><expr pos:start="1395:13" pos:end="1395:34"><call pos:start="1395:13" pos:end="1395:34"><name pos:start="1395:13" pos:end="1395:29">gen_op_movl_T1_im</name><argument_list pos:start="1395:30" pos:end="1395:34">(<argument pos:start="1395:31" pos:end="1395:33"><expr pos:start="1395:31" pos:end="1395:33"><name pos:start="1395:31" pos:end="1395:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1397:11" pos:end="1406:0">else <block pos:start="1397:16" pos:end="1406:0">{<block_content pos:start="1399:13" pos:end="1399:42">

            <expr_stmt pos:start="1399:13" pos:end="1399:42"><expr pos:start="1399:13" pos:end="1399:41"><call pos:start="1399:13" pos:end="1399:41"><name pos:start="1399:13" pos:end="1399:29">gen_op_mov_TN_reg</name><argument_list pos:start="1399:30" pos:end="1399:41">(<argument pos:start="1399:31" pos:end="1399:32"><expr pos:start="1399:31" pos:end="1399:32"><name pos:start="1399:31" pos:end="1399:32">ot</name></expr></argument>, <argument pos:start="1399:35" pos:end="1399:35"><expr pos:start="1399:35" pos:end="1399:35"><literal type="number" pos:start="1399:35" pos:end="1399:35">1</literal></expr></argument>, <argument pos:start="1399:38" pos:end="1399:40"><expr pos:start="1399:38" pos:end="1399:40"><name pos:start="1399:38" pos:end="1399:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="1405:1" pos:end="1405:20">#<cpp:directive pos:start="1405:2" pos:end="1405:6">ifdef</cpp:directive> <name pos:start="1405:8" pos:end="1405:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1407:9" pos:end="1479:9"><if pos:start="1407:9" pos:end="1411:9">if <condition pos:start="1407:12" pos:end="1407:26">(<expr pos:start="1407:13" pos:end="1407:25"><name pos:start="1407:13" pos:end="1407:14">ot</name> <operator pos:start="1407:16" pos:end="1407:17">==</operator> <name pos:start="1407:19" pos:end="1407:25">OT_QUAD</name></expr>)</condition> <block pos:start="1407:28" pos:end="1411:9">{<block_content pos:start="1409:13" pos:end="1409:65">

            <expr_stmt pos:start="1409:13" pos:end="1409:65"><expr pos:start="1409:13" pos:end="1409:64"><call pos:start="1409:13" pos:end="1409:64"><name pos:start="1409:13" pos:end="1409:34">gen_helper_imulq_T0_T1</name><argument_list pos:start="1409:35" pos:end="1409:64">(<argument pos:start="1409:36" pos:end="1409:43"><expr pos:start="1409:36" pos:end="1409:43"><name pos:start="1409:36" pos:end="1409:43"><name pos:start="1409:36" pos:end="1409:40">cpu_T</name><index pos:start="1409:41" pos:end="1409:43">[<expr pos:start="1409:42" pos:end="1409:42"><literal type="number" pos:start="1409:42" pos:end="1409:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1409:46" pos:end="1409:53"><expr pos:start="1409:46" pos:end="1409:53"><name pos:start="1409:46" pos:end="1409:53"><name pos:start="1409:46" pos:end="1409:50">cpu_T</name><index pos:start="1409:51" pos:end="1409:53">[<expr pos:start="1409:52" pos:end="1409:52"><literal type="number" pos:start="1409:52" pos:end="1409:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1409:56" pos:end="1409:63"><expr pos:start="1409:56" pos:end="1409:63"><name pos:start="1409:56" pos:end="1409:63"><name pos:start="1409:56" pos:end="1409:60">cpu_T</name><index pos:start="1409:61" pos:end="1409:63">[<expr pos:start="1409:62" pos:end="1409:62"><literal type="number" pos:start="1409:62" pos:end="1409:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1411:11" pos:end="1463:9">else

<cpp:endif pos:start="1413:1" pos:end="1413:6">#<cpp:directive pos:start="1413:2" pos:end="1413:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="1415:12" pos:end="1415:26">(<expr pos:start="1415:13" pos:end="1415:25"><name pos:start="1415:13" pos:end="1415:14">ot</name> <operator pos:start="1415:16" pos:end="1415:17">==</operator> <name pos:start="1415:19" pos:end="1415:25">OT_LONG</name></expr>)</condition> <block pos:start="1415:28" pos:end="1463:9">{<block_content pos:start="1419:17" pos:end="1462:0">

<cpp:ifdef pos:start="1417:1" pos:end="1417:20">#<cpp:directive pos:start="1417:2" pos:end="1417:6">ifdef</cpp:directive> <name pos:start="1417:8" pos:end="1417:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="1419:17" pos:end="1419:54"><expr pos:start="1419:17" pos:end="1419:53"><call pos:start="1419:17" pos:end="1419:53"><name pos:start="1419:17" pos:end="1419:33">tcg_gen_ext32s_tl</name><argument_list pos:start="1419:34" pos:end="1419:53">(<argument pos:start="1419:35" pos:end="1419:42"><expr pos:start="1419:35" pos:end="1419:42"><name pos:start="1419:35" pos:end="1419:42"><name pos:start="1419:35" pos:end="1419:39">cpu_T</name><index pos:start="1419:40" pos:end="1419:42">[<expr pos:start="1419:41" pos:end="1419:41"><literal type="number" pos:start="1419:41" pos:end="1419:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1419:45" pos:end="1419:52"><expr pos:start="1419:45" pos:end="1419:52"><name pos:start="1419:45" pos:end="1419:52"><name pos:start="1419:45" pos:end="1419:49">cpu_T</name><index pos:start="1419:50" pos:end="1419:52">[<expr pos:start="1419:51" pos:end="1419:51"><literal type="number" pos:start="1419:51" pos:end="1419:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1421:17" pos:end="1421:54"><expr pos:start="1421:17" pos:end="1421:53"><call pos:start="1421:17" pos:end="1421:53"><name pos:start="1421:17" pos:end="1421:33">tcg_gen_ext32s_tl</name><argument_list pos:start="1421:34" pos:end="1421:53">(<argument pos:start="1421:35" pos:end="1421:42"><expr pos:start="1421:35" pos:end="1421:42"><name pos:start="1421:35" pos:end="1421:42"><name pos:start="1421:35" pos:end="1421:39">cpu_T</name><index pos:start="1421:40" pos:end="1421:42">[<expr pos:start="1421:41" pos:end="1421:41"><literal type="number" pos:start="1421:41" pos:end="1421:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1421:45" pos:end="1421:52"><expr pos:start="1421:45" pos:end="1421:52"><name pos:start="1421:45" pos:end="1421:52"><name pos:start="1421:45" pos:end="1421:49">cpu_T</name><index pos:start="1421:50" pos:end="1421:52">[<expr pos:start="1421:51" pos:end="1421:51"><literal type="number" pos:start="1421:51" pos:end="1421:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1423:17" pos:end="1423:61"><expr pos:start="1423:17" pos:end="1423:60"><call pos:start="1423:17" pos:end="1423:60"><name pos:start="1423:17" pos:end="1423:30">tcg_gen_mul_tl</name><argument_list pos:start="1423:31" pos:end="1423:60">(<argument pos:start="1423:32" pos:end="1423:39"><expr pos:start="1423:32" pos:end="1423:39"><name pos:start="1423:32" pos:end="1423:39"><name pos:start="1423:32" pos:end="1423:36">cpu_T</name><index pos:start="1423:37" pos:end="1423:39">[<expr pos:start="1423:38" pos:end="1423:38"><literal type="number" pos:start="1423:38" pos:end="1423:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1423:42" pos:end="1423:49"><expr pos:start="1423:42" pos:end="1423:49"><name pos:start="1423:42" pos:end="1423:49"><name pos:start="1423:42" pos:end="1423:46">cpu_T</name><index pos:start="1423:47" pos:end="1423:49">[<expr pos:start="1423:48" pos:end="1423:48"><literal type="number" pos:start="1423:48" pos:end="1423:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1423:52" pos:end="1423:59"><expr pos:start="1423:52" pos:end="1423:59"><name pos:start="1423:52" pos:end="1423:59"><name pos:start="1423:52" pos:end="1423:56">cpu_T</name><index pos:start="1423:57" pos:end="1423:59">[<expr pos:start="1423:58" pos:end="1423:58"><literal type="number" pos:start="1423:58" pos:end="1423:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1425:17" pos:end="1425:53"><expr pos:start="1425:17" pos:end="1425:52"><call pos:start="1425:17" pos:end="1425:52"><name pos:start="1425:17" pos:end="1425:30">tcg_gen_mov_tl</name><argument_list pos:start="1425:31" pos:end="1425:52">(<argument pos:start="1425:32" pos:end="1425:41"><expr pos:start="1425:32" pos:end="1425:41"><name pos:start="1425:32" pos:end="1425:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="1425:44" pos:end="1425:51"><expr pos:start="1425:44" pos:end="1425:51"><name pos:start="1425:44" pos:end="1425:51"><name pos:start="1425:44" pos:end="1425:48">cpu_T</name><index pos:start="1425:49" pos:end="1425:51">[<expr pos:start="1425:50" pos:end="1425:50"><literal type="number" pos:start="1425:50" pos:end="1425:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1427:17" pos:end="1427:54"><expr pos:start="1427:17" pos:end="1427:53"><call pos:start="1427:17" pos:end="1427:53"><name pos:start="1427:17" pos:end="1427:33">tcg_gen_ext32s_tl</name><argument_list pos:start="1427:34" pos:end="1427:53">(<argument pos:start="1427:35" pos:end="1427:42"><expr pos:start="1427:35" pos:end="1427:42"><name pos:start="1427:35" pos:end="1427:42">cpu_tmp0</name></expr></argument>, <argument pos:start="1427:45" pos:end="1427:52"><expr pos:start="1427:45" pos:end="1427:52"><name pos:start="1427:45" pos:end="1427:52"><name pos:start="1427:45" pos:end="1427:49">cpu_T</name><index pos:start="1427:50" pos:end="1427:52">[<expr pos:start="1427:51" pos:end="1427:51"><literal type="number" pos:start="1427:51" pos:end="1427:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1429:17" pos:end="1432:0"><expr pos:start="1429:17" pos:end="1429:62"><call pos:start="1429:17" pos:end="1429:62"><name pos:start="1429:17" pos:end="1429:30">tcg_gen_sub_tl</name><argument_list pos:start="1429:31" pos:end="1429:62">(<argument pos:start="1429:32" pos:end="1429:41"><expr pos:start="1429:32" pos:end="1429:41"><name pos:start="1429:32" pos:end="1429:41">cpu_cc_src</name></expr></argument>, <argument pos:start="1429:44" pos:end="1429:51"><expr pos:start="1429:44" pos:end="1429:51"><name pos:start="1429:44" pos:end="1429:51"><name pos:start="1429:44" pos:end="1429:48">cpu_T</name><index pos:start="1429:49" pos:end="1429:51">[<expr pos:start="1429:50" pos:end="1429:50"><literal type="number" pos:start="1429:50" pos:end="1429:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1429:54" pos:end="1429:61"><expr pos:start="1429:54" pos:end="1429:61"><name pos:start="1429:54" pos:end="1429:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1431:1" pos:end="1431:5">#<cpp:directive pos:start="1431:2" pos:end="1431:5">else</cpp:directive></cpp:else>

                <block pos:start="1433:17" pos:end="1462:0">{<block_content pos:start="1435:21" pos:end="1457:67">

                    <decl_stmt pos:start="1435:21" pos:end="1435:36"><decl pos:start="1435:21" pos:end="1435:31"><type pos:start="1435:21" pos:end="1435:28"><name pos:start="1435:21" pos:end="1435:28">TCGv_i64</name></type> <name pos:start="1435:30" pos:end="1435:31">t0</name></decl>, <decl pos:start="1435:34" pos:end="1435:35"><type ref="prev" pos:start="1435:21" pos:end="1435:28"/><name pos:start="1435:34" pos:end="1435:35">t1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="1437:21" pos:end="1437:44"><expr pos:start="1437:21" pos:end="1437:43"><name pos:start="1437:21" pos:end="1437:22">t0</name> <operator pos:start="1437:24" pos:end="1437:24">=</operator> <call pos:start="1437:26" pos:end="1437:43"><name pos:start="1437:26" pos:end="1437:41">tcg_temp_new_i64</name><argument_list pos:start="1437:42" pos:end="1437:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1439:21" pos:end="1439:44"><expr pos:start="1439:21" pos:end="1439:43"><name pos:start="1439:21" pos:end="1439:22">t1</name> <operator pos:start="1439:24" pos:end="1439:24">=</operator> <call pos:start="1439:26" pos:end="1439:43"><name pos:start="1439:26" pos:end="1439:41">tcg_temp_new_i64</name><argument_list pos:start="1439:42" pos:end="1439:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1441:21" pos:end="1441:54"><expr pos:start="1441:21" pos:end="1441:53"><call pos:start="1441:21" pos:end="1441:53"><name pos:start="1441:21" pos:end="1441:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="1441:40" pos:end="1441:53">(<argument pos:start="1441:41" pos:end="1441:42"><expr pos:start="1441:41" pos:end="1441:42"><name pos:start="1441:41" pos:end="1441:42">t0</name></expr></argument>, <argument pos:start="1441:45" pos:end="1441:52"><expr pos:start="1441:45" pos:end="1441:52"><name pos:start="1441:45" pos:end="1441:52"><name pos:start="1441:45" pos:end="1441:49">cpu_T</name><index pos:start="1441:50" pos:end="1441:52">[<expr pos:start="1441:51" pos:end="1441:51"><literal type="number" pos:start="1441:51" pos:end="1441:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1443:21" pos:end="1443:54"><expr pos:start="1443:21" pos:end="1443:53"><call pos:start="1443:21" pos:end="1443:53"><name pos:start="1443:21" pos:end="1443:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="1443:40" pos:end="1443:53">(<argument pos:start="1443:41" pos:end="1443:42"><expr pos:start="1443:41" pos:end="1443:42"><name pos:start="1443:41" pos:end="1443:42">t1</name></expr></argument>, <argument pos:start="1443:45" pos:end="1443:52"><expr pos:start="1443:45" pos:end="1443:52"><name pos:start="1443:45" pos:end="1443:52"><name pos:start="1443:45" pos:end="1443:49">cpu_T</name><index pos:start="1443:50" pos:end="1443:52">[<expr pos:start="1443:51" pos:end="1443:51"><literal type="number" pos:start="1443:51" pos:end="1443:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1445:21" pos:end="1445:48"><expr pos:start="1445:21" pos:end="1445:47"><call pos:start="1445:21" pos:end="1445:47"><name pos:start="1445:21" pos:end="1445:35">tcg_gen_mul_i64</name><argument_list pos:start="1445:36" pos:end="1445:47">(<argument pos:start="1445:37" pos:end="1445:38"><expr pos:start="1445:37" pos:end="1445:38"><name pos:start="1445:37" pos:end="1445:38">t0</name></expr></argument>, <argument pos:start="1445:41" pos:end="1445:42"><expr pos:start="1445:41" pos:end="1445:42"><name pos:start="1445:41" pos:end="1445:42">t0</name></expr></argument>, <argument pos:start="1445:45" pos:end="1445:46"><expr pos:start="1445:45" pos:end="1445:46"><name pos:start="1445:45" pos:end="1445:46">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1447:21" pos:end="1447:56"><expr pos:start="1447:21" pos:end="1447:55"><call pos:start="1447:21" pos:end="1447:55"><name pos:start="1447:21" pos:end="1447:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="1447:42" pos:end="1447:55">(<argument pos:start="1447:43" pos:end="1447:50"><expr pos:start="1447:43" pos:end="1447:50"><name pos:start="1447:43" pos:end="1447:50"><name pos:start="1447:43" pos:end="1447:47">cpu_T</name><index pos:start="1447:48" pos:end="1447:50">[<expr pos:start="1447:49" pos:end="1447:49"><literal type="number" pos:start="1447:49" pos:end="1447:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1447:53" pos:end="1447:54"><expr pos:start="1447:53" pos:end="1447:54"><name pos:start="1447:53" pos:end="1447:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1449:21" pos:end="1449:57"><expr pos:start="1449:21" pos:end="1449:56"><call pos:start="1449:21" pos:end="1449:56"><name pos:start="1449:21" pos:end="1449:34">tcg_gen_mov_tl</name><argument_list pos:start="1449:35" pos:end="1449:56">(<argument pos:start="1449:36" pos:end="1449:45"><expr pos:start="1449:36" pos:end="1449:45"><name pos:start="1449:36" pos:end="1449:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="1449:48" pos:end="1449:55"><expr pos:start="1449:48" pos:end="1449:55"><name pos:start="1449:48" pos:end="1449:55"><name pos:start="1449:48" pos:end="1449:52">cpu_T</name><index pos:start="1449:53" pos:end="1449:55">[<expr pos:start="1449:54" pos:end="1449:54"><literal type="number" pos:start="1449:54" pos:end="1449:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1451:21" pos:end="1451:60"><expr pos:start="1451:21" pos:end="1451:59"><call pos:start="1451:21" pos:end="1451:59"><name pos:start="1451:21" pos:end="1451:35">tcg_gen_sari_tl</name><argument_list pos:start="1451:36" pos:end="1451:59">(<argument pos:start="1451:37" pos:end="1451:44"><expr pos:start="1451:37" pos:end="1451:44"><name pos:start="1451:37" pos:end="1451:44">cpu_tmp0</name></expr></argument>, <argument pos:start="1451:47" pos:end="1451:54"><expr pos:start="1451:47" pos:end="1451:54"><name pos:start="1451:47" pos:end="1451:54"><name pos:start="1451:47" pos:end="1451:51">cpu_T</name><index pos:start="1451:52" pos:end="1451:54">[<expr pos:start="1451:53" pos:end="1451:53"><literal type="number" pos:start="1451:53" pos:end="1451:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1451:57" pos:end="1451:58"><expr pos:start="1451:57" pos:end="1451:58"><literal type="number" pos:start="1451:57" pos:end="1451:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1453:21" pos:end="1453:49"><expr pos:start="1453:21" pos:end="1453:48"><call pos:start="1453:21" pos:end="1453:48"><name pos:start="1453:21" pos:end="1453:36">tcg_gen_shri_i64</name><argument_list pos:start="1453:37" pos:end="1453:48">(<argument pos:start="1453:38" pos:end="1453:39"><expr pos:start="1453:38" pos:end="1453:39"><name pos:start="1453:38" pos:end="1453:39">t0</name></expr></argument>, <argument pos:start="1453:42" pos:end="1453:43"><expr pos:start="1453:42" pos:end="1453:43"><name pos:start="1453:42" pos:end="1453:43">t0</name></expr></argument>, <argument pos:start="1453:46" pos:end="1453:47"><expr pos:start="1453:46" pos:end="1453:47"><literal type="number" pos:start="1453:46" pos:end="1453:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1455:21" pos:end="1455:56"><expr pos:start="1455:21" pos:end="1455:55"><call pos:start="1455:21" pos:end="1455:55"><name pos:start="1455:21" pos:end="1455:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="1455:42" pos:end="1455:55">(<argument pos:start="1455:43" pos:end="1455:50"><expr pos:start="1455:43" pos:end="1455:50"><name pos:start="1455:43" pos:end="1455:50"><name pos:start="1455:43" pos:end="1455:47">cpu_T</name><index pos:start="1455:48" pos:end="1455:50">[<expr pos:start="1455:49" pos:end="1455:49"><literal type="number" pos:start="1455:49" pos:end="1455:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1455:53" pos:end="1455:54"><expr pos:start="1455:53" pos:end="1455:54"><name pos:start="1455:53" pos:end="1455:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1457:21" pos:end="1457:67"><expr pos:start="1457:21" pos:end="1457:66"><call pos:start="1457:21" pos:end="1457:66"><name pos:start="1457:21" pos:end="1457:34">tcg_gen_sub_tl</name><argument_list pos:start="1457:35" pos:end="1457:66">(<argument pos:start="1457:36" pos:end="1457:45"><expr pos:start="1457:36" pos:end="1457:45"><name pos:start="1457:36" pos:end="1457:45">cpu_cc_src</name></expr></argument>, <argument pos:start="1457:48" pos:end="1457:55"><expr pos:start="1457:48" pos:end="1457:55"><name pos:start="1457:48" pos:end="1457:55"><name pos:start="1457:48" pos:end="1457:52">cpu_T</name><index pos:start="1457:53" pos:end="1457:55">[<expr pos:start="1457:54" pos:end="1457:54"><literal type="number" pos:start="1457:54" pos:end="1457:54">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1457:58" pos:end="1457:65"><expr pos:start="1457:58" pos:end="1457:65"><name pos:start="1457:58" pos:end="1457:65">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

<cpp:endif pos:start="1461:1" pos:end="1461:6">#<cpp:directive pos:start="1461:2" pos:end="1461:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="1463:11" pos:end="1479:9">else <block pos:start="1463:16" pos:end="1479:9">{<block_content pos:start="1465:13" pos:end="1477:59">

            <expr_stmt pos:start="1465:13" pos:end="1465:50"><expr pos:start="1465:13" pos:end="1465:49"><call pos:start="1465:13" pos:end="1465:49"><name pos:start="1465:13" pos:end="1465:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1465:30" pos:end="1465:49">(<argument pos:start="1465:31" pos:end="1465:38"><expr pos:start="1465:31" pos:end="1465:38"><name pos:start="1465:31" pos:end="1465:38"><name pos:start="1465:31" pos:end="1465:35">cpu_T</name><index pos:start="1465:36" pos:end="1465:38">[<expr pos:start="1465:37" pos:end="1465:37"><literal type="number" pos:start="1465:37" pos:end="1465:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1465:41" pos:end="1465:48"><expr pos:start="1465:41" pos:end="1465:48"><name pos:start="1465:41" pos:end="1465:48"><name pos:start="1465:41" pos:end="1465:45">cpu_T</name><index pos:start="1465:46" pos:end="1465:48">[<expr pos:start="1465:47" pos:end="1465:47"><literal type="number" pos:start="1465:47" pos:end="1465:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1467:13" pos:end="1467:50"><expr pos:start="1467:13" pos:end="1467:49"><call pos:start="1467:13" pos:end="1467:49"><name pos:start="1467:13" pos:end="1467:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1467:30" pos:end="1467:49">(<argument pos:start="1467:31" pos:end="1467:38"><expr pos:start="1467:31" pos:end="1467:38"><name pos:start="1467:31" pos:end="1467:38"><name pos:start="1467:31" pos:end="1467:35">cpu_T</name><index pos:start="1467:36" pos:end="1467:38">[<expr pos:start="1467:37" pos:end="1467:37"><literal type="number" pos:start="1467:37" pos:end="1467:37">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1467:41" pos:end="1467:48"><expr pos:start="1467:41" pos:end="1467:48"><name pos:start="1467:41" pos:end="1467:48"><name pos:start="1467:41" pos:end="1467:45">cpu_T</name><index pos:start="1467:46" pos:end="1467:48">[<expr pos:start="1467:47" pos:end="1467:47"><literal type="number" pos:start="1467:47" pos:end="1467:47">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1469:13" pos:end="1469:59">/* XXX: use 32 bit mul which could be faster */</comment>

            <expr_stmt pos:start="1471:13" pos:end="1471:57"><expr pos:start="1471:13" pos:end="1471:56"><call pos:start="1471:13" pos:end="1471:56"><name pos:start="1471:13" pos:end="1471:26">tcg_gen_mul_tl</name><argument_list pos:start="1471:27" pos:end="1471:56">(<argument pos:start="1471:28" pos:end="1471:35"><expr pos:start="1471:28" pos:end="1471:35"><name pos:start="1471:28" pos:end="1471:35"><name pos:start="1471:28" pos:end="1471:32">cpu_T</name><index pos:start="1471:33" pos:end="1471:35">[<expr pos:start="1471:34" pos:end="1471:34"><literal type="number" pos:start="1471:34" pos:end="1471:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1471:38" pos:end="1471:45"><expr pos:start="1471:38" pos:end="1471:45"><name pos:start="1471:38" pos:end="1471:45"><name pos:start="1471:38" pos:end="1471:42">cpu_T</name><index pos:start="1471:43" pos:end="1471:45">[<expr pos:start="1471:44" pos:end="1471:44"><literal type="number" pos:start="1471:44" pos:end="1471:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1471:48" pos:end="1471:55"><expr pos:start="1471:48" pos:end="1471:55"><name pos:start="1471:48" pos:end="1471:55"><name pos:start="1471:48" pos:end="1471:52">cpu_T</name><index pos:start="1471:53" pos:end="1471:55">[<expr pos:start="1471:54" pos:end="1471:54"><literal type="number" pos:start="1471:54" pos:end="1471:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1473:13" pos:end="1473:49"><expr pos:start="1473:13" pos:end="1473:48"><call pos:start="1473:13" pos:end="1473:48"><name pos:start="1473:13" pos:end="1473:26">tcg_gen_mov_tl</name><argument_list pos:start="1473:27" pos:end="1473:48">(<argument pos:start="1473:28" pos:end="1473:37"><expr pos:start="1473:28" pos:end="1473:37"><name pos:start="1473:28" pos:end="1473:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1473:40" pos:end="1473:47"><expr pos:start="1473:40" pos:end="1473:47"><name pos:start="1473:40" pos:end="1473:47"><name pos:start="1473:40" pos:end="1473:44">cpu_T</name><index pos:start="1473:45" pos:end="1473:47">[<expr pos:start="1473:46" pos:end="1473:46"><literal type="number" pos:start="1473:46" pos:end="1473:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1475:13" pos:end="1475:50"><expr pos:start="1475:13" pos:end="1475:49"><call pos:start="1475:13" pos:end="1475:49"><name pos:start="1475:13" pos:end="1475:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1475:30" pos:end="1475:49">(<argument pos:start="1475:31" pos:end="1475:38"><expr pos:start="1475:31" pos:end="1475:38"><name pos:start="1475:31" pos:end="1475:38">cpu_tmp0</name></expr></argument>, <argument pos:start="1475:41" pos:end="1475:48"><expr pos:start="1475:41" pos:end="1475:48"><name pos:start="1475:41" pos:end="1475:48"><name pos:start="1475:41" pos:end="1475:45">cpu_T</name><index pos:start="1475:46" pos:end="1475:48">[<expr pos:start="1475:47" pos:end="1475:47"><literal type="number" pos:start="1475:47" pos:end="1475:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1477:13" pos:end="1477:59"><expr pos:start="1477:13" pos:end="1477:58"><call pos:start="1477:13" pos:end="1477:58"><name pos:start="1477:13" pos:end="1477:26">tcg_gen_sub_tl</name><argument_list pos:start="1477:27" pos:end="1477:58">(<argument pos:start="1477:28" pos:end="1477:37"><expr pos:start="1477:28" pos:end="1477:37"><name pos:start="1477:28" pos:end="1477:37">cpu_cc_src</name></expr></argument>, <argument pos:start="1477:40" pos:end="1477:47"><expr pos:start="1477:40" pos:end="1477:47"><name pos:start="1477:40" pos:end="1477:47"><name pos:start="1477:40" pos:end="1477:44">cpu_T</name><index pos:start="1477:45" pos:end="1477:47">[<expr pos:start="1477:46" pos:end="1477:46"><literal type="number" pos:start="1477:46" pos:end="1477:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1477:50" pos:end="1477:57"><expr pos:start="1477:50" pos:end="1477:57"><name pos:start="1477:50" pos:end="1477:57">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1481:9" pos:end="1481:35"><expr pos:start="1481:9" pos:end="1481:34"><call pos:start="1481:9" pos:end="1481:34"><name pos:start="1481:9" pos:end="1481:25">gen_op_mov_reg_T0</name><argument_list pos:start="1481:26" pos:end="1481:34">(<argument pos:start="1481:27" pos:end="1481:28"><expr pos:start="1481:27" pos:end="1481:28"><name pos:start="1481:27" pos:end="1481:28">ot</name></expr></argument>, <argument pos:start="1481:31" pos:end="1481:33"><expr pos:start="1481:31" pos:end="1481:33"><name pos:start="1481:31" pos:end="1481:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1483:9" pos:end="1483:35"><expr pos:start="1483:9" pos:end="1483:34"><name pos:start="1483:9" pos:end="1483:16"><name pos:start="1483:9" pos:end="1483:9">s</name><operator pos:start="1483:10" pos:end="1483:11">-&gt;</operator><name pos:start="1483:12" pos:end="1483:16">cc_op</name></name> <operator pos:start="1483:18" pos:end="1483:18">=</operator> <name pos:start="1483:20" pos:end="1483:29">CC_OP_MULB</name> <operator pos:start="1483:31" pos:end="1483:31">+</operator> <name pos:start="1483:33" pos:end="1483:34">ot</name></expr>;</expr_stmt>

        <break pos:start="1485:9" pos:end="1485:14">break;</break>

    <case pos:start="1487:5" pos:end="1487:15">case <expr pos:start="1487:10" pos:end="1487:14"><literal type="number" pos:start="1487:10" pos:end="1487:14">0x1c0</literal></expr>:</case>

    <case pos:start="1489:5" pos:end="1489:15">case <expr pos:start="1489:10" pos:end="1489:14"><literal type="number" pos:start="1489:10" pos:end="1489:14">0x1c1</literal></expr>:</case> <comment type="block" pos:start="1489:17" pos:end="1489:33">/* xadd Ev, Gv */</comment>

        <if_stmt pos:start="1491:9" pos:end="1497:33"><if pos:start="1491:9" pos:end="1493:25">if <condition pos:start="1491:12" pos:end="1491:25">(<expr pos:start="1491:13" pos:end="1491:24"><operator pos:start="1491:13" pos:end="1491:13">(</operator><name pos:start="1491:14" pos:end="1491:14">b</name> <operator pos:start="1491:16" pos:end="1491:16">&amp;</operator> <literal type="number" pos:start="1491:18" pos:end="1491:18">1</literal><operator pos:start="1491:19" pos:end="1491:19">)</operator> <operator pos:start="1491:21" pos:end="1491:22">==</operator> <literal type="number" pos:start="1491:24" pos:end="1491:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1493:13" pos:end="1493:25"><block_content pos:start="1493:13" pos:end="1493:25">

            <expr_stmt pos:start="1493:13" pos:end="1493:25"><expr pos:start="1493:13" pos:end="1493:24"><name pos:start="1493:13" pos:end="1493:14">ot</name> <operator pos:start="1493:16" pos:end="1493:16">=</operator> <name pos:start="1493:18" pos:end="1493:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1495:9" pos:end="1497:33">else<block type="pseudo" pos:start="1497:13" pos:end="1497:33"><block_content pos:start="1497:13" pos:end="1497:33">

            <expr_stmt pos:start="1497:13" pos:end="1497:33"><expr pos:start="1497:13" pos:end="1497:32"><name pos:start="1497:13" pos:end="1497:14">ot</name> <operator pos:start="1497:16" pos:end="1497:16">=</operator> <name pos:start="1497:18" pos:end="1497:22">dflag</name> <operator pos:start="1497:24" pos:end="1497:24">+</operator> <name pos:start="1497:26" pos:end="1497:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1499:9" pos:end="1499:35"><expr pos:start="1499:9" pos:end="1499:34"><name pos:start="1499:9" pos:end="1499:13">modrm</name> <operator pos:start="1499:15" pos:end="1499:15">=</operator> <call pos:start="1499:17" pos:end="1499:34"><name pos:start="1499:17" pos:end="1499:25">ldub_code</name><argument_list pos:start="1499:26" pos:end="1499:34">(<argument pos:start="1499:27" pos:end="1499:33"><expr pos:start="1499:27" pos:end="1499:33"><name pos:start="1499:27" pos:end="1499:31"><name pos:start="1499:27" pos:end="1499:27">s</name><operator pos:start="1499:28" pos:end="1499:29">-&gt;</operator><name pos:start="1499:30" pos:end="1499:31">pc</name></name><operator pos:start="1499:32" pos:end="1499:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1501:9" pos:end="1501:41"><expr pos:start="1501:9" pos:end="1501:40"><name pos:start="1501:9" pos:end="1501:11">reg</name> <operator pos:start="1501:13" pos:end="1501:13">=</operator> <operator pos:start="1501:15" pos:end="1501:15">(</operator><operator pos:start="1501:16" pos:end="1501:16">(</operator><name pos:start="1501:17" pos:end="1501:21">modrm</name> <operator pos:start="1501:23" pos:end="1501:24">&gt;&gt;</operator> <literal type="number" pos:start="1501:26" pos:end="1501:26">3</literal><operator pos:start="1501:27" pos:end="1501:27">)</operator> <operator pos:start="1501:29" pos:end="1501:29">&amp;</operator> <literal type="number" pos:start="1501:31" pos:end="1501:31">7</literal><operator pos:start="1501:32" pos:end="1501:32">)</operator> <operator pos:start="1501:34" pos:end="1501:34">|</operator> <name pos:start="1501:36" pos:end="1501:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1503:9" pos:end="1503:31"><expr pos:start="1503:9" pos:end="1503:30"><name pos:start="1503:9" pos:end="1503:11">mod</name> <operator pos:start="1503:13" pos:end="1503:13">=</operator> <operator pos:start="1503:15" pos:end="1503:15">(</operator><name pos:start="1503:16" pos:end="1503:20">modrm</name> <operator pos:start="1503:22" pos:end="1503:23">&gt;&gt;</operator> <literal type="number" pos:start="1503:25" pos:end="1503:25">6</literal><operator pos:start="1503:26" pos:end="1503:26">)</operator> <operator pos:start="1503:28" pos:end="1503:28">&amp;</operator> <literal type="number" pos:start="1503:30" pos:end="1503:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1505:9" pos:end="1533:9"><if pos:start="1505:9" pos:end="1519:9">if <condition pos:start="1505:12" pos:end="1505:21">(<expr pos:start="1505:13" pos:end="1505:20"><name pos:start="1505:13" pos:end="1505:15">mod</name> <operator pos:start="1505:17" pos:end="1505:18">==</operator> <literal type="number" pos:start="1505:20" pos:end="1505:20">3</literal></expr>)</condition> <block pos:start="1505:23" pos:end="1519:9">{<block_content pos:start="1507:13" pos:end="1517:38">

            <expr_stmt pos:start="1507:13" pos:end="1507:40"><expr pos:start="1507:13" pos:end="1507:39"><name pos:start="1507:13" pos:end="1507:14">rm</name> <operator pos:start="1507:16" pos:end="1507:16">=</operator> <operator pos:start="1507:18" pos:end="1507:18">(</operator><name pos:start="1507:19" pos:end="1507:23">modrm</name> <operator pos:start="1507:25" pos:end="1507:25">&amp;</operator> <literal type="number" pos:start="1507:27" pos:end="1507:27">7</literal><operator pos:start="1507:28" pos:end="1507:28">)</operator> <operator pos:start="1507:30" pos:end="1507:30">|</operator> <call pos:start="1507:32" pos:end="1507:39"><name pos:start="1507:32" pos:end="1507:36">REX_B</name><argument_list pos:start="1507:37" pos:end="1507:39">(<argument pos:start="1507:38" pos:end="1507:38"><expr pos:start="1507:38" pos:end="1507:38"><name pos:start="1507:38" pos:end="1507:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1509:13" pos:end="1509:42"><expr pos:start="1509:13" pos:end="1509:41"><call pos:start="1509:13" pos:end="1509:41"><name pos:start="1509:13" pos:end="1509:29">gen_op_mov_TN_reg</name><argument_list pos:start="1509:30" pos:end="1509:41">(<argument pos:start="1509:31" pos:end="1509:32"><expr pos:start="1509:31" pos:end="1509:32"><name pos:start="1509:31" pos:end="1509:32">ot</name></expr></argument>, <argument pos:start="1509:35" pos:end="1509:35"><expr pos:start="1509:35" pos:end="1509:35"><literal type="number" pos:start="1509:35" pos:end="1509:35">0</literal></expr></argument>, <argument pos:start="1509:38" pos:end="1509:40"><expr pos:start="1509:38" pos:end="1509:40"><name pos:start="1509:38" pos:end="1509:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1511:13" pos:end="1511:41"><expr pos:start="1511:13" pos:end="1511:40"><call pos:start="1511:13" pos:end="1511:40"><name pos:start="1511:13" pos:end="1511:29">gen_op_mov_TN_reg</name><argument_list pos:start="1511:30" pos:end="1511:40">(<argument pos:start="1511:31" pos:end="1511:32"><expr pos:start="1511:31" pos:end="1511:32"><name pos:start="1511:31" pos:end="1511:32">ot</name></expr></argument>, <argument pos:start="1511:35" pos:end="1511:35"><expr pos:start="1511:35" pos:end="1511:35"><literal type="number" pos:start="1511:35" pos:end="1511:35">1</literal></expr></argument>, <argument pos:start="1511:38" pos:end="1511:39"><expr pos:start="1511:38" pos:end="1511:39"><name pos:start="1511:38" pos:end="1511:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1513:13" pos:end="1513:32"><expr pos:start="1513:13" pos:end="1513:31"><call pos:start="1513:13" pos:end="1513:31"><name pos:start="1513:13" pos:end="1513:29">gen_op_addl_T0_T1</name><argument_list pos:start="1513:30" pos:end="1513:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1515:13" pos:end="1515:39"><expr pos:start="1515:13" pos:end="1515:38"><call pos:start="1515:13" pos:end="1515:38"><name pos:start="1515:13" pos:end="1515:29">gen_op_mov_reg_T1</name><argument_list pos:start="1515:30" pos:end="1515:38">(<argument pos:start="1515:31" pos:end="1515:32"><expr pos:start="1515:31" pos:end="1515:32"><name pos:start="1515:31" pos:end="1515:32">ot</name></expr></argument>, <argument pos:start="1515:35" pos:end="1515:37"><expr pos:start="1515:35" pos:end="1515:37"><name pos:start="1515:35" pos:end="1515:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1517:13" pos:end="1517:38"><expr pos:start="1517:13" pos:end="1517:37"><call pos:start="1517:13" pos:end="1517:37"><name pos:start="1517:13" pos:end="1517:29">gen_op_mov_reg_T0</name><argument_list pos:start="1517:30" pos:end="1517:37">(<argument pos:start="1517:31" pos:end="1517:32"><expr pos:start="1517:31" pos:end="1517:32"><name pos:start="1517:31" pos:end="1517:32">ot</name></expr></argument>, <argument pos:start="1517:35" pos:end="1517:36"><expr pos:start="1517:35" pos:end="1517:36"><name pos:start="1517:35" pos:end="1517:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1519:11" pos:end="1533:9">else <block pos:start="1519:16" pos:end="1533:9">{<block_content pos:start="1521:13" pos:end="1531:39">

            <expr_stmt pos:start="1521:13" pos:end="1521:61"><expr pos:start="1521:13" pos:end="1521:60"><call pos:start="1521:13" pos:end="1521:60"><name pos:start="1521:13" pos:end="1521:25">gen_lea_modrm</name><argument_list pos:start="1521:26" pos:end="1521:60">(<argument pos:start="1521:27" pos:end="1521:27"><expr pos:start="1521:27" pos:end="1521:27"><name pos:start="1521:27" pos:end="1521:27">s</name></expr></argument>, <argument pos:start="1521:30" pos:end="1521:34"><expr pos:start="1521:30" pos:end="1521:34"><name pos:start="1521:30" pos:end="1521:34">modrm</name></expr></argument>, <argument pos:start="1521:37" pos:end="1521:45"><expr pos:start="1521:37" pos:end="1521:45"><operator pos:start="1521:37" pos:end="1521:37">&amp;</operator><name pos:start="1521:38" pos:end="1521:45">reg_addr</name></expr></argument>, <argument pos:start="1521:48" pos:end="1521:59"><expr pos:start="1521:48" pos:end="1521:59"><operator pos:start="1521:48" pos:end="1521:48">&amp;</operator><name pos:start="1521:49" pos:end="1521:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1523:13" pos:end="1523:42"><expr pos:start="1523:13" pos:end="1523:41"><call pos:start="1523:13" pos:end="1523:41"><name pos:start="1523:13" pos:end="1523:29">gen_op_mov_TN_reg</name><argument_list pos:start="1523:30" pos:end="1523:41">(<argument pos:start="1523:31" pos:end="1523:32"><expr pos:start="1523:31" pos:end="1523:32"><name pos:start="1523:31" pos:end="1523:32">ot</name></expr></argument>, <argument pos:start="1523:35" pos:end="1523:35"><expr pos:start="1523:35" pos:end="1523:35"><literal type="number" pos:start="1523:35" pos:end="1523:35">0</literal></expr></argument>, <argument pos:start="1523:38" pos:end="1523:40"><expr pos:start="1523:38" pos:end="1523:40"><name pos:start="1523:38" pos:end="1523:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1525:13" pos:end="1525:47"><expr pos:start="1525:13" pos:end="1525:46"><call pos:start="1525:13" pos:end="1525:46"><name pos:start="1525:13" pos:end="1525:27">gen_op_ld_T1_A0</name><argument_list pos:start="1525:28" pos:end="1525:46">(<argument pos:start="1525:29" pos:end="1525:45"><expr pos:start="1525:29" pos:end="1525:45"><name pos:start="1525:29" pos:end="1525:30">ot</name> <operator pos:start="1525:32" pos:end="1525:32">+</operator> <name pos:start="1525:34" pos:end="1525:45"><name pos:start="1525:34" pos:end="1525:34">s</name><operator pos:start="1525:35" pos:end="1525:36">-&gt;</operator><name pos:start="1525:37" pos:end="1525:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1527:13" pos:end="1527:32"><expr pos:start="1527:13" pos:end="1527:31"><call pos:start="1527:13" pos:end="1527:31"><name pos:start="1527:13" pos:end="1527:29">gen_op_addl_T0_T1</name><argument_list pos:start="1527:30" pos:end="1527:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1529:13" pos:end="1529:47"><expr pos:start="1529:13" pos:end="1529:46"><call pos:start="1529:13" pos:end="1529:46"><name pos:start="1529:13" pos:end="1529:27">gen_op_st_T0_A0</name><argument_list pos:start="1529:28" pos:end="1529:46">(<argument pos:start="1529:29" pos:end="1529:45"><expr pos:start="1529:29" pos:end="1529:45"><name pos:start="1529:29" pos:end="1529:30">ot</name> <operator pos:start="1529:32" pos:end="1529:32">+</operator> <name pos:start="1529:34" pos:end="1529:45"><name pos:start="1529:34" pos:end="1529:34">s</name><operator pos:start="1529:35" pos:end="1529:36">-&gt;</operator><name pos:start="1529:37" pos:end="1529:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1531:13" pos:end="1531:39"><expr pos:start="1531:13" pos:end="1531:38"><call pos:start="1531:13" pos:end="1531:38"><name pos:start="1531:13" pos:end="1531:29">gen_op_mov_reg_T1</name><argument_list pos:start="1531:30" pos:end="1531:38">(<argument pos:start="1531:31" pos:end="1531:32"><expr pos:start="1531:31" pos:end="1531:32"><name pos:start="1531:31" pos:end="1531:32">ot</name></expr></argument>, <argument pos:start="1531:35" pos:end="1531:37"><expr pos:start="1531:35" pos:end="1531:37"><name pos:start="1531:35" pos:end="1531:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1535:9" pos:end="1535:28"><expr pos:start="1535:9" pos:end="1535:27"><call pos:start="1535:9" pos:end="1535:27"><name pos:start="1535:9" pos:end="1535:25">gen_op_update2_cc</name><argument_list pos:start="1535:26" pos:end="1535:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1537:9" pos:end="1537:35"><expr pos:start="1537:9" pos:end="1537:34"><name pos:start="1537:9" pos:end="1537:16"><name pos:start="1537:9" pos:end="1537:9">s</name><operator pos:start="1537:10" pos:end="1537:11">-&gt;</operator><name pos:start="1537:12" pos:end="1537:16">cc_op</name></name> <operator pos:start="1537:18" pos:end="1537:18">=</operator> <name pos:start="1537:20" pos:end="1537:29">CC_OP_ADDB</name> <operator pos:start="1537:31" pos:end="1537:31">+</operator> <name pos:start="1537:33" pos:end="1537:34">ot</name></expr>;</expr_stmt>

        <break pos:start="1539:9" pos:end="1539:14">break;</break>

    <case pos:start="1541:5" pos:end="1541:15">case <expr pos:start="1541:10" pos:end="1541:14"><literal type="number" pos:start="1541:10" pos:end="1541:14">0x1b0</literal></expr>:</case>

    <case pos:start="1543:5" pos:end="1543:15">case <expr pos:start="1543:10" pos:end="1543:14"><literal type="number" pos:start="1543:10" pos:end="1543:14">0x1b1</literal></expr>:</case> <comment type="block" pos:start="1543:17" pos:end="1543:36">/* cmpxchg Ev, Gv */</comment>

        <block pos:start="1545:9" pos:end="1647:9">{<block_content pos:start="1547:13" pos:end="1645:30">

            <decl_stmt pos:start="1547:13" pos:end="1547:31"><decl pos:start="1547:13" pos:end="1547:22"><type pos:start="1547:13" pos:end="1547:15"><name pos:start="1547:13" pos:end="1547:15">int</name></type> <name pos:start="1547:17" pos:end="1547:22">label1</name></decl>, <decl pos:start="1547:25" pos:end="1547:30"><type ref="prev" pos:start="1547:13" pos:end="1547:15"/><name pos:start="1547:25" pos:end="1547:30">label2</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1549:13" pos:end="1549:32"><decl pos:start="1549:13" pos:end="1549:19"><type pos:start="1549:13" pos:end="1549:16"><name pos:start="1549:13" pos:end="1549:16">TCGv</name></type> <name pos:start="1549:18" pos:end="1549:19">t0</name></decl>, <decl pos:start="1549:22" pos:end="1549:23"><type ref="prev" pos:start="1549:13" pos:end="1549:16"/><name pos:start="1549:22" pos:end="1549:23">t1</name></decl>, <decl pos:start="1549:26" pos:end="1549:27"><type ref="prev" pos:start="1549:13" pos:end="1549:16"/><name pos:start="1549:26" pos:end="1549:27">t2</name></decl>, <decl pos:start="1549:30" pos:end="1549:31"><type ref="prev" pos:start="1549:13" pos:end="1549:16"/><name pos:start="1549:30" pos:end="1549:31">a0</name></decl>;</decl_stmt>



            <if_stmt pos:start="1553:13" pos:end="1559:37"><if pos:start="1553:13" pos:end="1555:29">if <condition pos:start="1553:16" pos:end="1553:29">(<expr pos:start="1553:17" pos:end="1553:28"><operator pos:start="1553:17" pos:end="1553:17">(</operator><name pos:start="1553:18" pos:end="1553:18">b</name> <operator pos:start="1553:20" pos:end="1553:20">&amp;</operator> <literal type="number" pos:start="1553:22" pos:end="1553:22">1</literal><operator pos:start="1553:23" pos:end="1553:23">)</operator> <operator pos:start="1553:25" pos:end="1553:26">==</operator> <literal type="number" pos:start="1553:28" pos:end="1553:28">0</literal></expr>)</condition><block type="pseudo" pos:start="1555:17" pos:end="1555:29"><block_content pos:start="1555:17" pos:end="1555:29">

                <expr_stmt pos:start="1555:17" pos:end="1555:29"><expr pos:start="1555:17" pos:end="1555:28"><name pos:start="1555:17" pos:end="1555:18">ot</name> <operator pos:start="1555:20" pos:end="1555:20">=</operator> <name pos:start="1555:22" pos:end="1555:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1557:13" pos:end="1559:37">else<block type="pseudo" pos:start="1559:17" pos:end="1559:37"><block_content pos:start="1559:17" pos:end="1559:37">

                <expr_stmt pos:start="1559:17" pos:end="1559:37"><expr pos:start="1559:17" pos:end="1559:36"><name pos:start="1559:17" pos:end="1559:18">ot</name> <operator pos:start="1559:20" pos:end="1559:20">=</operator> <name pos:start="1559:22" pos:end="1559:26">dflag</name> <operator pos:start="1559:28" pos:end="1559:28">+</operator> <name pos:start="1559:30" pos:end="1559:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1561:13" pos:end="1561:39"><expr pos:start="1561:13" pos:end="1561:38"><name pos:start="1561:13" pos:end="1561:17">modrm</name> <operator pos:start="1561:19" pos:end="1561:19">=</operator> <call pos:start="1561:21" pos:end="1561:38"><name pos:start="1561:21" pos:end="1561:29">ldub_code</name><argument_list pos:start="1561:30" pos:end="1561:38">(<argument pos:start="1561:31" pos:end="1561:37"><expr pos:start="1561:31" pos:end="1561:37"><name pos:start="1561:31" pos:end="1561:35"><name pos:start="1561:31" pos:end="1561:31">s</name><operator pos:start="1561:32" pos:end="1561:33">-&gt;</operator><name pos:start="1561:34" pos:end="1561:35">pc</name></name><operator pos:start="1561:36" pos:end="1561:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1563:13" pos:end="1563:45"><expr pos:start="1563:13" pos:end="1563:44"><name pos:start="1563:13" pos:end="1563:15">reg</name> <operator pos:start="1563:17" pos:end="1563:17">=</operator> <operator pos:start="1563:19" pos:end="1563:19">(</operator><operator pos:start="1563:20" pos:end="1563:20">(</operator><name pos:start="1563:21" pos:end="1563:25">modrm</name> <operator pos:start="1563:27" pos:end="1563:28">&gt;&gt;</operator> <literal type="number" pos:start="1563:30" pos:end="1563:30">3</literal><operator pos:start="1563:31" pos:end="1563:31">)</operator> <operator pos:start="1563:33" pos:end="1563:33">&amp;</operator> <literal type="number" pos:start="1563:35" pos:end="1563:35">7</literal><operator pos:start="1563:36" pos:end="1563:36">)</operator> <operator pos:start="1563:38" pos:end="1563:38">|</operator> <name pos:start="1563:40" pos:end="1563:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1565:13" pos:end="1565:35"><expr pos:start="1565:13" pos:end="1565:34"><name pos:start="1565:13" pos:end="1565:15">mod</name> <operator pos:start="1565:17" pos:end="1565:17">=</operator> <operator pos:start="1565:19" pos:end="1565:19">(</operator><name pos:start="1565:20" pos:end="1565:24">modrm</name> <operator pos:start="1565:26" pos:end="1565:27">&gt;&gt;</operator> <literal type="number" pos:start="1565:29" pos:end="1565:29">6</literal><operator pos:start="1565:30" pos:end="1565:30">)</operator> <operator pos:start="1565:32" pos:end="1565:32">&amp;</operator> <literal type="number" pos:start="1565:34" pos:end="1565:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1567:13" pos:end="1567:38"><expr pos:start="1567:13" pos:end="1567:37"><name pos:start="1567:13" pos:end="1567:14">t0</name> <operator pos:start="1567:16" pos:end="1567:16">=</operator> <call pos:start="1567:18" pos:end="1567:37"><name pos:start="1567:18" pos:end="1567:35">tcg_temp_local_new</name><argument_list pos:start="1567:36" pos:end="1567:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1569:13" pos:end="1569:38"><expr pos:start="1569:13" pos:end="1569:37"><name pos:start="1569:13" pos:end="1569:14">t1</name> <operator pos:start="1569:16" pos:end="1569:16">=</operator> <call pos:start="1569:18" pos:end="1569:37"><name pos:start="1569:18" pos:end="1569:35">tcg_temp_local_new</name><argument_list pos:start="1569:36" pos:end="1569:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1571:13" pos:end="1571:38"><expr pos:start="1571:13" pos:end="1571:37"><name pos:start="1571:13" pos:end="1571:14">t2</name> <operator pos:start="1571:16" pos:end="1571:16">=</operator> <call pos:start="1571:18" pos:end="1571:37"><name pos:start="1571:18" pos:end="1571:35">tcg_temp_local_new</name><argument_list pos:start="1571:36" pos:end="1571:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1573:13" pos:end="1573:38"><expr pos:start="1573:13" pos:end="1573:37"><name pos:start="1573:13" pos:end="1573:14">a0</name> <operator pos:start="1573:16" pos:end="1573:16">=</operator> <call pos:start="1573:18" pos:end="1573:37"><name pos:start="1573:18" pos:end="1573:35">tcg_temp_local_new</name><argument_list pos:start="1573:36" pos:end="1573:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1575:13" pos:end="1575:42"><expr pos:start="1575:13" pos:end="1575:41"><call pos:start="1575:13" pos:end="1575:41"><name pos:start="1575:13" pos:end="1575:28">gen_op_mov_v_reg</name><argument_list pos:start="1575:29" pos:end="1575:41">(<argument pos:start="1575:30" pos:end="1575:31"><expr pos:start="1575:30" pos:end="1575:31"><name pos:start="1575:30" pos:end="1575:31">ot</name></expr></argument>, <argument pos:start="1575:34" pos:end="1575:35"><expr pos:start="1575:34" pos:end="1575:35"><name pos:start="1575:34" pos:end="1575:35">t1</name></expr></argument>, <argument pos:start="1575:38" pos:end="1575:40"><expr pos:start="1575:38" pos:end="1575:40"><name pos:start="1575:38" pos:end="1575:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1577:13" pos:end="1593:13"><if pos:start="1577:13" pos:end="1583:13">if <condition pos:start="1577:16" pos:end="1577:25">(<expr pos:start="1577:17" pos:end="1577:24"><name pos:start="1577:17" pos:end="1577:19">mod</name> <operator pos:start="1577:21" pos:end="1577:22">==</operator> <literal type="number" pos:start="1577:24" pos:end="1577:24">3</literal></expr>)</condition> <block pos:start="1577:27" pos:end="1583:13">{<block_content pos:start="1579:17" pos:end="1581:45">

                <expr_stmt pos:start="1579:17" pos:end="1579:44"><expr pos:start="1579:17" pos:end="1579:43"><name pos:start="1579:17" pos:end="1579:18">rm</name> <operator pos:start="1579:20" pos:end="1579:20">=</operator> <operator pos:start="1579:22" pos:end="1579:22">(</operator><name pos:start="1579:23" pos:end="1579:27">modrm</name> <operator pos:start="1579:29" pos:end="1579:29">&amp;</operator> <literal type="number" pos:start="1579:31" pos:end="1579:31">7</literal><operator pos:start="1579:32" pos:end="1579:32">)</operator> <operator pos:start="1579:34" pos:end="1579:34">|</operator> <call pos:start="1579:36" pos:end="1579:43"><name pos:start="1579:36" pos:end="1579:40">REX_B</name><argument_list pos:start="1579:41" pos:end="1579:43">(<argument pos:start="1579:42" pos:end="1579:42"><expr pos:start="1579:42" pos:end="1579:42"><name pos:start="1579:42" pos:end="1579:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1581:17" pos:end="1581:45"><expr pos:start="1581:17" pos:end="1581:44"><call pos:start="1581:17" pos:end="1581:44"><name pos:start="1581:17" pos:end="1581:32">gen_op_mov_v_reg</name><argument_list pos:start="1581:33" pos:end="1581:44">(<argument pos:start="1581:34" pos:end="1581:35"><expr pos:start="1581:34" pos:end="1581:35"><name pos:start="1581:34" pos:end="1581:35">ot</name></expr></argument>, <argument pos:start="1581:38" pos:end="1581:39"><expr pos:start="1581:38" pos:end="1581:39"><name pos:start="1581:38" pos:end="1581:39">t0</name></expr></argument>, <argument pos:start="1581:42" pos:end="1581:43"><expr pos:start="1581:42" pos:end="1581:43"><name pos:start="1581:42" pos:end="1581:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1583:15" pos:end="1593:13">else <block pos:start="1583:20" pos:end="1593:13">{<block_content pos:start="1585:17" pos:end="1591:23">

                <expr_stmt pos:start="1585:17" pos:end="1585:65"><expr pos:start="1585:17" pos:end="1585:64"><call pos:start="1585:17" pos:end="1585:64"><name pos:start="1585:17" pos:end="1585:29">gen_lea_modrm</name><argument_list pos:start="1585:30" pos:end="1585:64">(<argument pos:start="1585:31" pos:end="1585:31"><expr pos:start="1585:31" pos:end="1585:31"><name pos:start="1585:31" pos:end="1585:31">s</name></expr></argument>, <argument pos:start="1585:34" pos:end="1585:38"><expr pos:start="1585:34" pos:end="1585:38"><name pos:start="1585:34" pos:end="1585:38">modrm</name></expr></argument>, <argument pos:start="1585:41" pos:end="1585:49"><expr pos:start="1585:41" pos:end="1585:49"><operator pos:start="1585:41" pos:end="1585:41">&amp;</operator><name pos:start="1585:42" pos:end="1585:49">reg_addr</name></expr></argument>, <argument pos:start="1585:52" pos:end="1585:63"><expr pos:start="1585:52" pos:end="1585:63"><operator pos:start="1585:52" pos:end="1585:52">&amp;</operator><name pos:start="1585:53" pos:end="1585:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1587:17" pos:end="1587:43"><expr pos:start="1587:17" pos:end="1587:42"><call pos:start="1587:17" pos:end="1587:42"><name pos:start="1587:17" pos:end="1587:30">tcg_gen_mov_tl</name><argument_list pos:start="1587:31" pos:end="1587:42">(<argument pos:start="1587:32" pos:end="1587:33"><expr pos:start="1587:32" pos:end="1587:33"><name pos:start="1587:32" pos:end="1587:33">a0</name></expr></argument>, <argument pos:start="1587:36" pos:end="1587:41"><expr pos:start="1587:36" pos:end="1587:41"><name pos:start="1587:36" pos:end="1587:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1589:17" pos:end="1589:55"><expr pos:start="1589:17" pos:end="1589:54"><call pos:start="1589:17" pos:end="1589:54"><name pos:start="1589:17" pos:end="1589:27">gen_op_ld_v</name><argument_list pos:start="1589:28" pos:end="1589:54">(<argument pos:start="1589:29" pos:end="1589:45"><expr pos:start="1589:29" pos:end="1589:45"><name pos:start="1589:29" pos:end="1589:30">ot</name> <operator pos:start="1589:32" pos:end="1589:32">+</operator> <name pos:start="1589:34" pos:end="1589:45"><name pos:start="1589:34" pos:end="1589:34">s</name><operator pos:start="1589:35" pos:end="1589:36">-&gt;</operator><name pos:start="1589:37" pos:end="1589:45">mem_index</name></name></expr></argument>, <argument pos:start="1589:48" pos:end="1589:49"><expr pos:start="1589:48" pos:end="1589:49"><name pos:start="1589:48" pos:end="1589:49">t0</name></expr></argument>, <argument pos:start="1589:52" pos:end="1589:53"><expr pos:start="1589:52" pos:end="1589:53"><name pos:start="1589:52" pos:end="1589:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1591:17" pos:end="1591:23"><expr pos:start="1591:17" pos:end="1591:22"><name pos:start="1591:17" pos:end="1591:18">rm</name> <operator pos:start="1591:20" pos:end="1591:20">=</operator> <literal type="number" pos:start="1591:22" pos:end="1591:22">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="1591:25" pos:end="1591:43">/* avoid warning */</comment>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1595:13" pos:end="1595:37"><expr pos:start="1595:13" pos:end="1595:36"><name pos:start="1595:13" pos:end="1595:18">label1</name> <operator pos:start="1595:20" pos:end="1595:20">=</operator> <call pos:start="1595:22" pos:end="1595:36"><name pos:start="1595:22" pos:end="1595:34">gen_new_label</name><argument_list pos:start="1595:35" pos:end="1595:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1597:13" pos:end="1597:72"><expr pos:start="1597:13" pos:end="1597:71"><call pos:start="1597:13" pos:end="1597:71"><name pos:start="1597:13" pos:end="1597:25">tcg_gen_ld_tl</name><argument_list pos:start="1597:26" pos:end="1597:71">(<argument pos:start="1597:27" pos:end="1597:28"><expr pos:start="1597:27" pos:end="1597:28"><name pos:start="1597:27" pos:end="1597:28">t2</name></expr></argument>, <argument pos:start="1597:31" pos:end="1597:37"><expr pos:start="1597:31" pos:end="1597:37"><name pos:start="1597:31" pos:end="1597:37">cpu_env</name></expr></argument>, <argument pos:start="1597:40" pos:end="1597:70"><expr pos:start="1597:40" pos:end="1597:70"><call pos:start="1597:40" pos:end="1597:70"><name pos:start="1597:40" pos:end="1597:47">offsetof</name><argument_list pos:start="1597:48" pos:end="1597:70">(<argument pos:start="1597:49" pos:end="1597:56"><expr pos:start="1597:49" pos:end="1597:56"><name pos:start="1597:49" pos:end="1597:56">CPUState</name></expr></argument>, <argument pos:start="1597:59" pos:end="1597:69"><expr pos:start="1597:59" pos:end="1597:69"><name pos:start="1597:59" pos:end="1597:69"><name pos:start="1597:59" pos:end="1597:62">regs</name><index pos:start="1597:63" pos:end="1597:69">[<expr pos:start="1597:64" pos:end="1597:68"><name pos:start="1597:64" pos:end="1597:68">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1599:13" pos:end="1599:39"><expr pos:start="1599:13" pos:end="1599:38"><call pos:start="1599:13" pos:end="1599:38"><name pos:start="1599:13" pos:end="1599:26">tcg_gen_sub_tl</name><argument_list pos:start="1599:27" pos:end="1599:38">(<argument pos:start="1599:28" pos:end="1599:29"><expr pos:start="1599:28" pos:end="1599:29"><name pos:start="1599:28" pos:end="1599:29">t2</name></expr></argument>, <argument pos:start="1599:32" pos:end="1599:33"><expr pos:start="1599:32" pos:end="1599:33"><name pos:start="1599:32" pos:end="1599:33">t2</name></expr></argument>, <argument pos:start="1599:36" pos:end="1599:37"><expr pos:start="1599:36" pos:end="1599:37"><name pos:start="1599:36" pos:end="1599:37">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1601:13" pos:end="1601:29"><expr pos:start="1601:13" pos:end="1601:28"><call pos:start="1601:13" pos:end="1601:28"><name pos:start="1601:13" pos:end="1601:20">gen_extu</name><argument_list pos:start="1601:21" pos:end="1601:28">(<argument pos:start="1601:22" pos:end="1601:23"><expr pos:start="1601:22" pos:end="1601:23"><name pos:start="1601:22" pos:end="1601:23">ot</name></expr></argument>, <argument pos:start="1601:26" pos:end="1601:27"><expr pos:start="1601:26" pos:end="1601:27"><name pos:start="1601:26" pos:end="1601:27">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1603:13" pos:end="1603:59"><expr pos:start="1603:13" pos:end="1603:58"><call pos:start="1603:13" pos:end="1603:58"><name pos:start="1603:13" pos:end="1603:30">tcg_gen_brcondi_tl</name><argument_list pos:start="1603:31" pos:end="1603:58">(<argument pos:start="1603:32" pos:end="1603:42"><expr pos:start="1603:32" pos:end="1603:42"><name pos:start="1603:32" pos:end="1603:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="1603:45" pos:end="1603:46"><expr pos:start="1603:45" pos:end="1603:46"><name pos:start="1603:45" pos:end="1603:46">t2</name></expr></argument>, <argument pos:start="1603:49" pos:end="1603:49"><expr pos:start="1603:49" pos:end="1603:49"><literal type="number" pos:start="1603:49" pos:end="1603:49">0</literal></expr></argument>, <argument pos:start="1603:52" pos:end="1603:57"><expr pos:start="1603:52" pos:end="1603:57"><name pos:start="1603:52" pos:end="1603:57">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1605:13" pos:end="1631:13"><if pos:start="1605:13" pos:end="1619:13">if <condition pos:start="1605:16" pos:end="1605:25">(<expr pos:start="1605:17" pos:end="1605:24"><name pos:start="1605:17" pos:end="1605:19">mod</name> <operator pos:start="1605:21" pos:end="1605:22">==</operator> <literal type="number" pos:start="1605:24" pos:end="1605:24">3</literal></expr>)</condition> <block pos:start="1605:27" pos:end="1619:13">{<block_content pos:start="1607:17" pos:end="1617:38">

                <expr_stmt pos:start="1607:17" pos:end="1607:41"><expr pos:start="1607:17" pos:end="1607:40"><name pos:start="1607:17" pos:end="1607:22">label2</name> <operator pos:start="1607:24" pos:end="1607:24">=</operator> <call pos:start="1607:26" pos:end="1607:40"><name pos:start="1607:26" pos:end="1607:38">gen_new_label</name><argument_list pos:start="1607:39" pos:end="1607:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1609:17" pos:end="1609:48"><expr pos:start="1609:17" pos:end="1609:47"><call pos:start="1609:17" pos:end="1609:47"><name pos:start="1609:17" pos:end="1609:32">gen_op_mov_reg_v</name><argument_list pos:start="1609:33" pos:end="1609:47">(<argument pos:start="1609:34" pos:end="1609:35"><expr pos:start="1609:34" pos:end="1609:35"><name pos:start="1609:34" pos:end="1609:35">ot</name></expr></argument>, <argument pos:start="1609:38" pos:end="1609:42"><expr pos:start="1609:38" pos:end="1609:42"><name pos:start="1609:38" pos:end="1609:42">R_EAX</name></expr></argument>, <argument pos:start="1609:45" pos:end="1609:46"><expr pos:start="1609:45" pos:end="1609:46"><name pos:start="1609:45" pos:end="1609:46">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1611:17" pos:end="1611:35"><expr pos:start="1611:17" pos:end="1611:34"><call pos:start="1611:17" pos:end="1611:34"><name pos:start="1611:17" pos:end="1611:26">tcg_gen_br</name><argument_list pos:start="1611:27" pos:end="1611:34">(<argument pos:start="1611:28" pos:end="1611:33"><expr pos:start="1611:28" pos:end="1611:33"><name pos:start="1611:28" pos:end="1611:33">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1613:17" pos:end="1613:38"><expr pos:start="1613:17" pos:end="1613:37"><call pos:start="1613:17" pos:end="1613:37"><name pos:start="1613:17" pos:end="1613:29">gen_set_label</name><argument_list pos:start="1613:30" pos:end="1613:37">(<argument pos:start="1613:31" pos:end="1613:36"><expr pos:start="1613:31" pos:end="1613:36"><name pos:start="1613:31" pos:end="1613:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1615:17" pos:end="1615:45"><expr pos:start="1615:17" pos:end="1615:44"><call pos:start="1615:17" pos:end="1615:44"><name pos:start="1615:17" pos:end="1615:32">gen_op_mov_reg_v</name><argument_list pos:start="1615:33" pos:end="1615:44">(<argument pos:start="1615:34" pos:end="1615:35"><expr pos:start="1615:34" pos:end="1615:35"><name pos:start="1615:34" pos:end="1615:35">ot</name></expr></argument>, <argument pos:start="1615:38" pos:end="1615:39"><expr pos:start="1615:38" pos:end="1615:39"><name pos:start="1615:38" pos:end="1615:39">rm</name></expr></argument>, <argument pos:start="1615:42" pos:end="1615:43"><expr pos:start="1615:42" pos:end="1615:43"><name pos:start="1615:42" pos:end="1615:43">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1617:17" pos:end="1617:38"><expr pos:start="1617:17" pos:end="1617:37"><call pos:start="1617:17" pos:end="1617:37"><name pos:start="1617:17" pos:end="1617:29">gen_set_label</name><argument_list pos:start="1617:30" pos:end="1617:37">(<argument pos:start="1617:31" pos:end="1617:36"><expr pos:start="1617:31" pos:end="1617:36"><name pos:start="1617:31" pos:end="1617:36">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1619:15" pos:end="1631:13">else <block pos:start="1619:20" pos:end="1631:13">{<block_content pos:start="1621:17" pos:end="1629:55">

                <expr_stmt pos:start="1621:17" pos:end="1621:39"><expr pos:start="1621:17" pos:end="1621:38"><call pos:start="1621:17" pos:end="1621:38"><name pos:start="1621:17" pos:end="1621:30">tcg_gen_mov_tl</name><argument_list pos:start="1621:31" pos:end="1621:38">(<argument pos:start="1621:32" pos:end="1621:33"><expr pos:start="1621:32" pos:end="1621:33"><name pos:start="1621:32" pos:end="1621:33">t1</name></expr></argument>, <argument pos:start="1621:36" pos:end="1621:37"><expr pos:start="1621:36" pos:end="1621:37"><name pos:start="1621:36" pos:end="1621:37">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1623:17" pos:end="1623:48"><expr pos:start="1623:17" pos:end="1623:47"><call pos:start="1623:17" pos:end="1623:47"><name pos:start="1623:17" pos:end="1623:32">gen_op_mov_reg_v</name><argument_list pos:start="1623:33" pos:end="1623:47">(<argument pos:start="1623:34" pos:end="1623:35"><expr pos:start="1623:34" pos:end="1623:35"><name pos:start="1623:34" pos:end="1623:35">ot</name></expr></argument>, <argument pos:start="1623:38" pos:end="1623:42"><expr pos:start="1623:38" pos:end="1623:42"><name pos:start="1623:38" pos:end="1623:42">R_EAX</name></expr></argument>, <argument pos:start="1623:45" pos:end="1623:46"><expr pos:start="1623:45" pos:end="1623:46"><name pos:start="1623:45" pos:end="1623:46">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1625:17" pos:end="1625:38"><expr pos:start="1625:17" pos:end="1625:37"><call pos:start="1625:17" pos:end="1625:37"><name pos:start="1625:17" pos:end="1625:29">gen_set_label</name><argument_list pos:start="1625:30" pos:end="1625:37">(<argument pos:start="1625:31" pos:end="1625:36"><expr pos:start="1625:31" pos:end="1625:36"><name pos:start="1625:31" pos:end="1625:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1627:17" pos:end="1627:34">/* always store */</comment>

                <expr_stmt pos:start="1629:17" pos:end="1629:55"><expr pos:start="1629:17" pos:end="1629:54"><call pos:start="1629:17" pos:end="1629:54"><name pos:start="1629:17" pos:end="1629:27">gen_op_st_v</name><argument_list pos:start="1629:28" pos:end="1629:54">(<argument pos:start="1629:29" pos:end="1629:45"><expr pos:start="1629:29" pos:end="1629:45"><name pos:start="1629:29" pos:end="1629:30">ot</name> <operator pos:start="1629:32" pos:end="1629:32">+</operator> <name pos:start="1629:34" pos:end="1629:45"><name pos:start="1629:34" pos:end="1629:34">s</name><operator pos:start="1629:35" pos:end="1629:36">-&gt;</operator><name pos:start="1629:37" pos:end="1629:45">mem_index</name></name></expr></argument>, <argument pos:start="1629:48" pos:end="1629:49"><expr pos:start="1629:48" pos:end="1629:49"><name pos:start="1629:48" pos:end="1629:49">t1</name></expr></argument>, <argument pos:start="1629:52" pos:end="1629:53"><expr pos:start="1629:52" pos:end="1629:53"><name pos:start="1629:52" pos:end="1629:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1633:13" pos:end="1633:43"><expr pos:start="1633:13" pos:end="1633:42"><call pos:start="1633:13" pos:end="1633:42"><name pos:start="1633:13" pos:end="1633:26">tcg_gen_mov_tl</name><argument_list pos:start="1633:27" pos:end="1633:42">(<argument pos:start="1633:28" pos:end="1633:37"><expr pos:start="1633:28" pos:end="1633:37"><name pos:start="1633:28" pos:end="1633:37">cpu_cc_src</name></expr></argument>, <argument pos:start="1633:40" pos:end="1633:41"><expr pos:start="1633:40" pos:end="1633:41"><name pos:start="1633:40" pos:end="1633:41">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1635:13" pos:end="1635:43"><expr pos:start="1635:13" pos:end="1635:42"><call pos:start="1635:13" pos:end="1635:42"><name pos:start="1635:13" pos:end="1635:26">tcg_gen_mov_tl</name><argument_list pos:start="1635:27" pos:end="1635:42">(<argument pos:start="1635:28" pos:end="1635:37"><expr pos:start="1635:28" pos:end="1635:37"><name pos:start="1635:28" pos:end="1635:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1635:40" pos:end="1635:41"><expr pos:start="1635:40" pos:end="1635:41"><name pos:start="1635:40" pos:end="1635:41">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1637:13" pos:end="1637:39"><expr pos:start="1637:13" pos:end="1637:38"><name pos:start="1637:13" pos:end="1637:20"><name pos:start="1637:13" pos:end="1637:13">s</name><operator pos:start="1637:14" pos:end="1637:15">-&gt;</operator><name pos:start="1637:16" pos:end="1637:20">cc_op</name></name> <operator pos:start="1637:22" pos:end="1637:22">=</operator> <name pos:start="1637:24" pos:end="1637:33">CC_OP_SUBB</name> <operator pos:start="1637:35" pos:end="1637:35">+</operator> <name pos:start="1637:37" pos:end="1637:38">ot</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1639:13" pos:end="1639:30"><expr pos:start="1639:13" pos:end="1639:29"><call pos:start="1639:13" pos:end="1639:29"><name pos:start="1639:13" pos:end="1639:25">tcg_temp_free</name><argument_list pos:start="1639:26" pos:end="1639:29">(<argument pos:start="1639:27" pos:end="1639:28"><expr pos:start="1639:27" pos:end="1639:28"><name pos:start="1639:27" pos:end="1639:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1641:13" pos:end="1641:30"><expr pos:start="1641:13" pos:end="1641:29"><call pos:start="1641:13" pos:end="1641:29"><name pos:start="1641:13" pos:end="1641:25">tcg_temp_free</name><argument_list pos:start="1641:26" pos:end="1641:29">(<argument pos:start="1641:27" pos:end="1641:28"><expr pos:start="1641:27" pos:end="1641:28"><name pos:start="1641:27" pos:end="1641:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1643:13" pos:end="1643:30"><expr pos:start="1643:13" pos:end="1643:29"><call pos:start="1643:13" pos:end="1643:29"><name pos:start="1643:13" pos:end="1643:25">tcg_temp_free</name><argument_list pos:start="1643:26" pos:end="1643:29">(<argument pos:start="1643:27" pos:end="1643:28"><expr pos:start="1643:27" pos:end="1643:28"><name pos:start="1643:27" pos:end="1643:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1645:13" pos:end="1645:30"><expr pos:start="1645:13" pos:end="1645:29"><call pos:start="1645:13" pos:end="1645:29"><name pos:start="1645:13" pos:end="1645:25">tcg_temp_free</name><argument_list pos:start="1645:26" pos:end="1645:29">(<argument pos:start="1645:27" pos:end="1645:28"><expr pos:start="1645:27" pos:end="1645:28"><name pos:start="1645:27" pos:end="1645:28">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1649:9" pos:end="1649:14">break;</break>

    <case pos:start="1651:5" pos:end="1651:15">case <expr pos:start="1651:10" pos:end="1651:14"><literal type="number" pos:start="1651:10" pos:end="1651:14">0x1c7</literal></expr>:</case> <comment type="block" pos:start="1651:17" pos:end="1651:31">/* cmpxchg8b */</comment>

        <expr_stmt pos:start="1653:9" pos:end="1653:35"><expr pos:start="1653:9" pos:end="1653:34"><name pos:start="1653:9" pos:end="1653:13">modrm</name> <operator pos:start="1653:15" pos:end="1653:15">=</operator> <call pos:start="1653:17" pos:end="1653:34"><name pos:start="1653:17" pos:end="1653:25">ldub_code</name><argument_list pos:start="1653:26" pos:end="1653:34">(<argument pos:start="1653:27" pos:end="1653:33"><expr pos:start="1653:27" pos:end="1653:33"><name pos:start="1653:27" pos:end="1653:31"><name pos:start="1653:27" pos:end="1653:27">s</name><operator pos:start="1653:28" pos:end="1653:29">-&gt;</operator><name pos:start="1653:30" pos:end="1653:31">pc</name></name><operator pos:start="1653:32" pos:end="1653:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1655:9" pos:end="1655:31"><expr pos:start="1655:9" pos:end="1655:30"><name pos:start="1655:9" pos:end="1655:11">mod</name> <operator pos:start="1655:13" pos:end="1655:13">=</operator> <operator pos:start="1655:15" pos:end="1655:15">(</operator><name pos:start="1655:16" pos:end="1655:20">modrm</name> <operator pos:start="1655:22" pos:end="1655:23">&gt;&gt;</operator> <literal type="number" pos:start="1655:25" pos:end="1655:25">6</literal><operator pos:start="1655:26" pos:end="1655:26">)</operator> <operator pos:start="1655:28" pos:end="1655:28">&amp;</operator> <literal type="number" pos:start="1655:30" pos:end="1655:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1657:9" pos:end="1662:0"><if pos:start="1657:9" pos:end="1662:0">if <condition pos:start="1657:12" pos:end="1657:50">(<expr pos:start="1657:13" pos:end="1657:49"><operator pos:start="1657:13" pos:end="1657:13">(</operator><name pos:start="1657:14" pos:end="1657:16">mod</name> <operator pos:start="1657:18" pos:end="1657:19">==</operator> <literal type="number" pos:start="1657:21" pos:end="1657:21">3</literal><operator pos:start="1657:22" pos:end="1657:22">)</operator> <operator pos:start="1657:24" pos:end="1657:25">||</operator> <operator pos:start="1657:27" pos:end="1657:27">(</operator><operator pos:start="1657:28" pos:end="1657:28">(</operator><name pos:start="1657:29" pos:end="1657:33">modrm</name> <operator pos:start="1657:35" pos:end="1657:35">&amp;</operator> <literal type="number" pos:start="1657:37" pos:end="1657:40">0x38</literal><operator pos:start="1657:41" pos:end="1657:41">)</operator> <operator pos:start="1657:43" pos:end="1657:44">!=</operator> <literal type="number" pos:start="1657:46" pos:end="1657:48">0x8</literal><operator pos:start="1657:49" pos:end="1657:49">)</operator></expr>)</condition><block type="pseudo" pos:start="1659:13" pos:end="1662:0"><block_content pos:start="1659:13" pos:end="1662:0">

            <goto pos:start="1659:13" pos:end="1662:0">goto <name pos:start="1659:18" pos:end="1659:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="1661:1" pos:end="1661:20">#<cpp:directive pos:start="1661:2" pos:end="1661:6">ifdef</cpp:directive> <name pos:start="1661:8" pos:end="1661:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1663:9" pos:end="1699:9"><if pos:start="1663:9" pos:end="1679:9">if <condition pos:start="1663:12" pos:end="1663:23">(<expr pos:start="1663:13" pos:end="1663:22"><name pos:start="1663:13" pos:end="1663:17">dflag</name> <operator pos:start="1663:19" pos:end="1663:20">==</operator> <literal type="number" pos:start="1663:22" pos:end="1663:22">2</literal></expr>)</condition> <block pos:start="1663:25" pos:end="1679:9">{<block_content pos:start="1665:13" pos:end="1677:42">

            <if_stmt pos:start="1665:13" pos:end="1667:32"><if pos:start="1665:13" pos:end="1667:32">if <condition pos:start="1665:16" pos:end="1665:58">(<expr pos:start="1665:17" pos:end="1665:57"><operator pos:start="1665:17" pos:end="1665:17">!</operator><operator pos:start="1665:18" pos:end="1665:18">(</operator><name pos:start="1665:19" pos:end="1665:39"><name pos:start="1665:19" pos:end="1665:19">s</name><operator pos:start="1665:20" pos:end="1665:21">-&gt;</operator><name pos:start="1665:22" pos:end="1665:39">cpuid_ext_features</name></name> <operator pos:start="1665:41" pos:end="1665:41">&amp;</operator> <name pos:start="1665:43" pos:end="1665:56">CPUID_EXT_CX16</name><operator pos:start="1665:57" pos:end="1665:57">)</operator></expr>)</condition><block type="pseudo" pos:start="1667:17" pos:end="1667:32"><block_content pos:start="1667:17" pos:end="1667:32">

                <goto pos:start="1667:17" pos:end="1667:32">goto <name pos:start="1667:22" pos:end="1667:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1669:13" pos:end="1669:46"><expr pos:start="1669:13" pos:end="1669:45"><call pos:start="1669:13" pos:end="1669:45"><name pos:start="1669:13" pos:end="1669:22">gen_jmp_im</name><argument_list pos:start="1669:23" pos:end="1669:45">(<argument pos:start="1669:24" pos:end="1669:44"><expr pos:start="1669:24" pos:end="1669:44"><name pos:start="1669:24" pos:end="1669:31">pc_start</name> <operator pos:start="1669:33" pos:end="1669:33">-</operator> <name pos:start="1669:35" pos:end="1669:44"><name pos:start="1669:35" pos:end="1669:35">s</name><operator pos:start="1669:36" pos:end="1669:37">-&gt;</operator><name pos:start="1669:38" pos:end="1669:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1671:13" pos:end="1673:43"><if pos:start="1671:13" pos:end="1673:43">if <condition pos:start="1671:16" pos:end="1671:42">(<expr pos:start="1671:17" pos:end="1671:41"><name pos:start="1671:17" pos:end="1671:24"><name pos:start="1671:17" pos:end="1671:17">s</name><operator pos:start="1671:18" pos:end="1671:19">-&gt;</operator><name pos:start="1671:20" pos:end="1671:24">cc_op</name></name> <operator pos:start="1671:26" pos:end="1671:27">!=</operator> <name pos:start="1671:29" pos:end="1671:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1673:17" pos:end="1673:43"><block_content pos:start="1673:17" pos:end="1673:43">

                <expr_stmt pos:start="1673:17" pos:end="1673:43"><expr pos:start="1673:17" pos:end="1673:42"><call pos:start="1673:17" pos:end="1673:42"><name pos:start="1673:17" pos:end="1673:32">gen_op_set_cc_op</name><argument_list pos:start="1673:33" pos:end="1673:42">(<argument pos:start="1673:34" pos:end="1673:41"><expr pos:start="1673:34" pos:end="1673:41"><name pos:start="1673:34" pos:end="1673:41"><name pos:start="1673:34" pos:end="1673:34">s</name><operator pos:start="1673:35" pos:end="1673:36">-&gt;</operator><name pos:start="1673:37" pos:end="1673:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1675:13" pos:end="1675:61"><expr pos:start="1675:13" pos:end="1675:60"><call pos:start="1675:13" pos:end="1675:60"><name pos:start="1675:13" pos:end="1675:25">gen_lea_modrm</name><argument_list pos:start="1675:26" pos:end="1675:60">(<argument pos:start="1675:27" pos:end="1675:27"><expr pos:start="1675:27" pos:end="1675:27"><name pos:start="1675:27" pos:end="1675:27">s</name></expr></argument>, <argument pos:start="1675:30" pos:end="1675:34"><expr pos:start="1675:30" pos:end="1675:34"><name pos:start="1675:30" pos:end="1675:34">modrm</name></expr></argument>, <argument pos:start="1675:37" pos:end="1675:45"><expr pos:start="1675:37" pos:end="1675:45"><operator pos:start="1675:37" pos:end="1675:37">&amp;</operator><name pos:start="1675:38" pos:end="1675:45">reg_addr</name></expr></argument>, <argument pos:start="1675:48" pos:end="1675:59"><expr pos:start="1675:48" pos:end="1675:59"><operator pos:start="1675:48" pos:end="1675:48">&amp;</operator><name pos:start="1675:49" pos:end="1675:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1677:13" pos:end="1677:42"><expr pos:start="1677:13" pos:end="1677:41"><call pos:start="1677:13" pos:end="1677:41"><name pos:start="1677:13" pos:end="1677:33">gen_helper_cmpxchg16b</name><argument_list pos:start="1677:34" pos:end="1677:41">(<argument pos:start="1677:35" pos:end="1677:40"><expr pos:start="1677:35" pos:end="1677:40"><name pos:start="1677:35" pos:end="1677:40">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1679:11" pos:end="1699:9">else

<cpp:endif pos:start="1681:1" pos:end="1681:6">#<cpp:directive pos:start="1681:2" pos:end="1681:6">endif</cpp:directive></cpp:endif>        

        <block pos:start="1683:9" pos:end="1699:9">{<block_content pos:start="1685:13" pos:end="1697:41">

            <if_stmt pos:start="1685:13" pos:end="1687:32"><if pos:start="1685:13" pos:end="1687:32">if <condition pos:start="1685:16" pos:end="1685:49">(<expr pos:start="1685:17" pos:end="1685:48"><operator pos:start="1685:17" pos:end="1685:17">!</operator><operator pos:start="1685:18" pos:end="1685:18">(</operator><name pos:start="1685:19" pos:end="1685:35"><name pos:start="1685:19" pos:end="1685:19">s</name><operator pos:start="1685:20" pos:end="1685:21">-&gt;</operator><name pos:start="1685:22" pos:end="1685:35">cpuid_features</name></name> <operator pos:start="1685:37" pos:end="1685:37">&amp;</operator> <name pos:start="1685:39" pos:end="1685:47">CPUID_CX8</name><operator pos:start="1685:48" pos:end="1685:48">)</operator></expr>)</condition><block type="pseudo" pos:start="1687:17" pos:end="1687:32"><block_content pos:start="1687:17" pos:end="1687:32">

                <goto pos:start="1687:17" pos:end="1687:32">goto <name pos:start="1687:22" pos:end="1687:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1689:13" pos:end="1689:46"><expr pos:start="1689:13" pos:end="1689:45"><call pos:start="1689:13" pos:end="1689:45"><name pos:start="1689:13" pos:end="1689:22">gen_jmp_im</name><argument_list pos:start="1689:23" pos:end="1689:45">(<argument pos:start="1689:24" pos:end="1689:44"><expr pos:start="1689:24" pos:end="1689:44"><name pos:start="1689:24" pos:end="1689:31">pc_start</name> <operator pos:start="1689:33" pos:end="1689:33">-</operator> <name pos:start="1689:35" pos:end="1689:44"><name pos:start="1689:35" pos:end="1689:35">s</name><operator pos:start="1689:36" pos:end="1689:37">-&gt;</operator><name pos:start="1689:38" pos:end="1689:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1691:13" pos:end="1693:43"><if pos:start="1691:13" pos:end="1693:43">if <condition pos:start="1691:16" pos:end="1691:42">(<expr pos:start="1691:17" pos:end="1691:41"><name pos:start="1691:17" pos:end="1691:24"><name pos:start="1691:17" pos:end="1691:17">s</name><operator pos:start="1691:18" pos:end="1691:19">-&gt;</operator><name pos:start="1691:20" pos:end="1691:24">cc_op</name></name> <operator pos:start="1691:26" pos:end="1691:27">!=</operator> <name pos:start="1691:29" pos:end="1691:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1693:17" pos:end="1693:43"><block_content pos:start="1693:17" pos:end="1693:43">

                <expr_stmt pos:start="1693:17" pos:end="1693:43"><expr pos:start="1693:17" pos:end="1693:42"><call pos:start="1693:17" pos:end="1693:42"><name pos:start="1693:17" pos:end="1693:32">gen_op_set_cc_op</name><argument_list pos:start="1693:33" pos:end="1693:42">(<argument pos:start="1693:34" pos:end="1693:41"><expr pos:start="1693:34" pos:end="1693:41"><name pos:start="1693:34" pos:end="1693:41"><name pos:start="1693:34" pos:end="1693:34">s</name><operator pos:start="1693:35" pos:end="1693:36">-&gt;</operator><name pos:start="1693:37" pos:end="1693:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1695:13" pos:end="1695:61"><expr pos:start="1695:13" pos:end="1695:60"><call pos:start="1695:13" pos:end="1695:60"><name pos:start="1695:13" pos:end="1695:25">gen_lea_modrm</name><argument_list pos:start="1695:26" pos:end="1695:60">(<argument pos:start="1695:27" pos:end="1695:27"><expr pos:start="1695:27" pos:end="1695:27"><name pos:start="1695:27" pos:end="1695:27">s</name></expr></argument>, <argument pos:start="1695:30" pos:end="1695:34"><expr pos:start="1695:30" pos:end="1695:34"><name pos:start="1695:30" pos:end="1695:34">modrm</name></expr></argument>, <argument pos:start="1695:37" pos:end="1695:45"><expr pos:start="1695:37" pos:end="1695:45"><operator pos:start="1695:37" pos:end="1695:37">&amp;</operator><name pos:start="1695:38" pos:end="1695:45">reg_addr</name></expr></argument>, <argument pos:start="1695:48" pos:end="1695:59"><expr pos:start="1695:48" pos:end="1695:59"><operator pos:start="1695:48" pos:end="1695:48">&amp;</operator><name pos:start="1695:49" pos:end="1695:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1697:13" pos:end="1697:41"><expr pos:start="1697:13" pos:end="1697:40"><call pos:start="1697:13" pos:end="1697:40"><name pos:start="1697:13" pos:end="1697:32">gen_helper_cmpxchg8b</name><argument_list pos:start="1697:33" pos:end="1697:40">(<argument pos:start="1697:34" pos:end="1697:39"><expr pos:start="1697:34" pos:end="1697:39"><name pos:start="1697:34" pos:end="1697:39">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1701:9" pos:end="1701:32"><expr pos:start="1701:9" pos:end="1701:31"><name pos:start="1701:9" pos:end="1701:16"><name pos:start="1701:9" pos:end="1701:9">s</name><operator pos:start="1701:10" pos:end="1701:11">-&gt;</operator><name pos:start="1701:12" pos:end="1701:16">cc_op</name></name> <operator pos:start="1701:18" pos:end="1701:18">=</operator> <name pos:start="1701:20" pos:end="1701:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="1703:9" pos:end="1703:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1707:9" pos:end="1707:36">/**************************/</comment>

        <comment type="block" pos:start="1709:9" pos:end="1709:22">/* push/pop */</comment>

    <case pos:start="1711:5" pos:end="1711:23">case <expr pos:start="1711:10" pos:end="1711:22"><literal type="number" pos:start="1711:10" pos:end="1711:13">0x50</literal> <operator pos:start="1711:15" pos:end="1711:17">...</operator> <literal type="number" pos:start="1711:19" pos:end="1711:22">0x57</literal></expr>:</case> <comment type="block" pos:start="1711:25" pos:end="1711:34">/* push */</comment>

        <expr_stmt pos:start="1713:9" pos:end="1713:58"><expr pos:start="1713:9" pos:end="1713:57"><call pos:start="1713:9" pos:end="1713:57"><name pos:start="1713:9" pos:end="1713:25">gen_op_mov_TN_reg</name><argument_list pos:start="1713:26" pos:end="1713:57">(<argument pos:start="1713:27" pos:end="1713:33"><expr pos:start="1713:27" pos:end="1713:33"><name pos:start="1713:27" pos:end="1713:33">OT_LONG</name></expr></argument>, <argument pos:start="1713:36" pos:end="1713:36"><expr pos:start="1713:36" pos:end="1713:36"><literal type="number" pos:start="1713:36" pos:end="1713:36">0</literal></expr></argument>, <argument pos:start="1713:39" pos:end="1713:56"><expr pos:start="1713:39" pos:end="1713:56"><operator pos:start="1713:39" pos:end="1713:39">(</operator><name pos:start="1713:40" pos:end="1713:40">b</name> <operator pos:start="1713:42" pos:end="1713:42">&amp;</operator> <literal type="number" pos:start="1713:44" pos:end="1713:44">7</literal><operator pos:start="1713:45" pos:end="1713:45">)</operator> <operator pos:start="1713:47" pos:end="1713:47">|</operator> <call pos:start="1713:49" pos:end="1713:56"><name pos:start="1713:49" pos:end="1713:53">REX_B</name><argument_list pos:start="1713:54" pos:end="1713:56">(<argument pos:start="1713:55" pos:end="1713:55"><expr pos:start="1713:55" pos:end="1713:55"><name pos:start="1713:55" pos:end="1713:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1715:9" pos:end="1715:23"><expr pos:start="1715:9" pos:end="1715:22"><call pos:start="1715:9" pos:end="1715:22"><name pos:start="1715:9" pos:end="1715:19">gen_push_T0</name><argument_list pos:start="1715:20" pos:end="1715:22">(<argument pos:start="1715:21" pos:end="1715:21"><expr pos:start="1715:21" pos:end="1715:21"><name pos:start="1715:21" pos:end="1715:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1717:9" pos:end="1717:14">break;</break>

    <case pos:start="1719:5" pos:end="1719:23">case <expr pos:start="1719:10" pos:end="1719:22"><literal type="number" pos:start="1719:10" pos:end="1719:13">0x58</literal> <operator pos:start="1719:15" pos:end="1719:17">...</operator> <literal type="number" pos:start="1719:19" pos:end="1719:22">0x5f</literal></expr>:</case> <comment type="block" pos:start="1719:25" pos:end="1719:33">/* pop */</comment>

        <if_stmt pos:start="1721:9" pos:end="1729:9"><if pos:start="1721:9" pos:end="1725:9">if <condition pos:start="1721:12" pos:end="1721:22">(<expr pos:start="1721:13" pos:end="1721:21"><call pos:start="1721:13" pos:end="1721:21"><name pos:start="1721:13" pos:end="1721:18">CODE64</name><argument_list pos:start="1721:19" pos:end="1721:21">(<argument pos:start="1721:20" pos:end="1721:20"><expr pos:start="1721:20" pos:end="1721:20"><name pos:start="1721:20" pos:end="1721:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1721:24" pos:end="1725:9">{<block_content pos:start="1723:13" pos:end="1723:43">

            <expr_stmt pos:start="1723:13" pos:end="1723:43"><expr pos:start="1723:13" pos:end="1723:42"><name pos:start="1723:13" pos:end="1723:14">ot</name> <operator pos:start="1723:16" pos:end="1723:16">=</operator> <ternary pos:start="1723:18" pos:end="1723:42"><condition pos:start="1723:18" pos:end="1723:24"><expr pos:start="1723:18" pos:end="1723:22"><name pos:start="1723:18" pos:end="1723:22">dflag</name></expr> ?</condition><then pos:start="1723:26" pos:end="1723:32"> <expr pos:start="1723:26" pos:end="1723:32"><name pos:start="1723:26" pos:end="1723:32">OT_QUAD</name></expr> </then><else pos:start="1723:34" pos:end="1723:42">: <expr pos:start="1723:36" pos:end="1723:42"><name pos:start="1723:36" pos:end="1723:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1725:11" pos:end="1729:9">else <block pos:start="1725:16" pos:end="1729:9">{<block_content pos:start="1727:13" pos:end="1727:33">

            <expr_stmt pos:start="1727:13" pos:end="1727:33"><expr pos:start="1727:13" pos:end="1727:32"><name pos:start="1727:13" pos:end="1727:14">ot</name> <operator pos:start="1727:16" pos:end="1727:16">=</operator> <name pos:start="1727:18" pos:end="1727:22">dflag</name> <operator pos:start="1727:24" pos:end="1727:24">+</operator> <name pos:start="1727:26" pos:end="1727:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1731:9" pos:end="1731:22"><expr pos:start="1731:9" pos:end="1731:21"><call pos:start="1731:9" pos:end="1731:21"><name pos:start="1731:9" pos:end="1731:18">gen_pop_T0</name><argument_list pos:start="1731:19" pos:end="1731:21">(<argument pos:start="1731:20" pos:end="1731:20"><expr pos:start="1731:20" pos:end="1731:20"><name pos:start="1731:20" pos:end="1731:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1733:9" pos:end="1733:50">/* NOTE: order is important for pop %sp */</comment>

        <expr_stmt pos:start="1735:9" pos:end="1735:26"><expr pos:start="1735:9" pos:end="1735:25"><call pos:start="1735:9" pos:end="1735:25"><name pos:start="1735:9" pos:end="1735:22">gen_pop_update</name><argument_list pos:start="1735:23" pos:end="1735:25">(<argument pos:start="1735:24" pos:end="1735:24"><expr pos:start="1735:24" pos:end="1735:24"><name pos:start="1735:24" pos:end="1735:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1737:9" pos:end="1737:50"><expr pos:start="1737:9" pos:end="1737:49"><call pos:start="1737:9" pos:end="1737:49"><name pos:start="1737:9" pos:end="1737:25">gen_op_mov_reg_T0</name><argument_list pos:start="1737:26" pos:end="1737:49">(<argument pos:start="1737:27" pos:end="1737:28"><expr pos:start="1737:27" pos:end="1737:28"><name pos:start="1737:27" pos:end="1737:28">ot</name></expr></argument>, <argument pos:start="1737:31" pos:end="1737:48"><expr pos:start="1737:31" pos:end="1737:48"><operator pos:start="1737:31" pos:end="1737:31">(</operator><name pos:start="1737:32" pos:end="1737:32">b</name> <operator pos:start="1737:34" pos:end="1737:34">&amp;</operator> <literal type="number" pos:start="1737:36" pos:end="1737:36">7</literal><operator pos:start="1737:37" pos:end="1737:37">)</operator> <operator pos:start="1737:39" pos:end="1737:39">|</operator> <call pos:start="1737:41" pos:end="1737:48"><name pos:start="1737:41" pos:end="1737:45">REX_B</name><argument_list pos:start="1737:46" pos:end="1737:48">(<argument pos:start="1737:47" pos:end="1737:47"><expr pos:start="1737:47" pos:end="1737:47"><name pos:start="1737:47" pos:end="1737:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1739:9" pos:end="1739:14">break;</break>

    <case pos:start="1741:5" pos:end="1741:14">case <expr pos:start="1741:10" pos:end="1741:13"><literal type="number" pos:start="1741:10" pos:end="1741:13">0x60</literal></expr>:</case> <comment type="block" pos:start="1741:16" pos:end="1741:26">/* pusha */</comment>

        <if_stmt pos:start="1743:9" pos:end="1745:28"><if pos:start="1743:9" pos:end="1745:28">if <condition pos:start="1743:12" pos:end="1743:22">(<expr pos:start="1743:13" pos:end="1743:21"><call pos:start="1743:13" pos:end="1743:21"><name pos:start="1743:13" pos:end="1743:18">CODE64</name><argument_list pos:start="1743:19" pos:end="1743:21">(<argument pos:start="1743:20" pos:end="1743:20"><expr pos:start="1743:20" pos:end="1743:20"><name pos:start="1743:20" pos:end="1743:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1745:13" pos:end="1745:28"><block_content pos:start="1745:13" pos:end="1745:28">

            <goto pos:start="1745:13" pos:end="1745:28">goto <name pos:start="1745:18" pos:end="1745:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1747:9" pos:end="1747:21"><expr pos:start="1747:9" pos:end="1747:20"><call pos:start="1747:9" pos:end="1747:20"><name pos:start="1747:9" pos:end="1747:17">gen_pusha</name><argument_list pos:start="1747:18" pos:end="1747:20">(<argument pos:start="1747:19" pos:end="1747:19"><expr pos:start="1747:19" pos:end="1747:19"><name pos:start="1747:19" pos:end="1747:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1749:9" pos:end="1749:14">break;</break>

    <case pos:start="1751:5" pos:end="1751:14">case <expr pos:start="1751:10" pos:end="1751:13"><literal type="number" pos:start="1751:10" pos:end="1751:13">0x61</literal></expr>:</case> <comment type="block" pos:start="1751:16" pos:end="1751:25">/* popa */</comment>

        <if_stmt pos:start="1753:9" pos:end="1755:28"><if pos:start="1753:9" pos:end="1755:28">if <condition pos:start="1753:12" pos:end="1753:22">(<expr pos:start="1753:13" pos:end="1753:21"><call pos:start="1753:13" pos:end="1753:21"><name pos:start="1753:13" pos:end="1753:18">CODE64</name><argument_list pos:start="1753:19" pos:end="1753:21">(<argument pos:start="1753:20" pos:end="1753:20"><expr pos:start="1753:20" pos:end="1753:20"><name pos:start="1753:20" pos:end="1753:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1755:13" pos:end="1755:28"><block_content pos:start="1755:13" pos:end="1755:28">

            <goto pos:start="1755:13" pos:end="1755:28">goto <name pos:start="1755:18" pos:end="1755:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1757:9" pos:end="1757:20"><expr pos:start="1757:9" pos:end="1757:19"><call pos:start="1757:9" pos:end="1757:19"><name pos:start="1757:9" pos:end="1757:16">gen_popa</name><argument_list pos:start="1757:17" pos:end="1757:19">(<argument pos:start="1757:18" pos:end="1757:18"><expr pos:start="1757:18" pos:end="1757:18"><name pos:start="1757:18" pos:end="1757:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1759:9" pos:end="1759:14">break;</break>

    <case pos:start="1761:5" pos:end="1761:14">case <expr pos:start="1761:10" pos:end="1761:13"><literal type="number" pos:start="1761:10" pos:end="1761:13">0x68</literal></expr>:</case> <comment type="block" pos:start="1761:16" pos:end="1761:28">/* push Iv */</comment>

    <case pos:start="1763:5" pos:end="1763:14">case <expr pos:start="1763:10" pos:end="1763:13"><literal type="number" pos:start="1763:10" pos:end="1763:13">0x6a</literal></expr>:</case>

        <if_stmt pos:start="1765:9" pos:end="1773:9"><if pos:start="1765:9" pos:end="1769:9">if <condition pos:start="1765:12" pos:end="1765:22">(<expr pos:start="1765:13" pos:end="1765:21"><call pos:start="1765:13" pos:end="1765:21"><name pos:start="1765:13" pos:end="1765:18">CODE64</name><argument_list pos:start="1765:19" pos:end="1765:21">(<argument pos:start="1765:20" pos:end="1765:20"><expr pos:start="1765:20" pos:end="1765:20"><name pos:start="1765:20" pos:end="1765:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1765:24" pos:end="1769:9">{<block_content pos:start="1767:13" pos:end="1767:43">

            <expr_stmt pos:start="1767:13" pos:end="1767:43"><expr pos:start="1767:13" pos:end="1767:42"><name pos:start="1767:13" pos:end="1767:14">ot</name> <operator pos:start="1767:16" pos:end="1767:16">=</operator> <ternary pos:start="1767:18" pos:end="1767:42"><condition pos:start="1767:18" pos:end="1767:24"><expr pos:start="1767:18" pos:end="1767:22"><name pos:start="1767:18" pos:end="1767:22">dflag</name></expr> ?</condition><then pos:start="1767:26" pos:end="1767:32"> <expr pos:start="1767:26" pos:end="1767:32"><name pos:start="1767:26" pos:end="1767:32">OT_QUAD</name></expr> </then><else pos:start="1767:34" pos:end="1767:42">: <expr pos:start="1767:36" pos:end="1767:42"><name pos:start="1767:36" pos:end="1767:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1769:11" pos:end="1773:9">else <block pos:start="1769:16" pos:end="1773:9">{<block_content pos:start="1771:13" pos:end="1771:33">

            <expr_stmt pos:start="1771:13" pos:end="1771:33"><expr pos:start="1771:13" pos:end="1771:32"><name pos:start="1771:13" pos:end="1771:14">ot</name> <operator pos:start="1771:16" pos:end="1771:16">=</operator> <name pos:start="1771:18" pos:end="1771:22">dflag</name> <operator pos:start="1771:24" pos:end="1771:24">+</operator> <name pos:start="1771:26" pos:end="1771:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="1775:9" pos:end="1781:47"><if pos:start="1775:9" pos:end="1777:34">if <condition pos:start="1775:12" pos:end="1775:22">(<expr pos:start="1775:13" pos:end="1775:21"><name pos:start="1775:13" pos:end="1775:13">b</name> <operator pos:start="1775:15" pos:end="1775:16">==</operator> <literal type="number" pos:start="1775:18" pos:end="1775:21">0x68</literal></expr>)</condition><block type="pseudo" pos:start="1777:13" pos:end="1777:34"><block_content pos:start="1777:13" pos:end="1777:34">

            <expr_stmt pos:start="1777:13" pos:end="1777:34"><expr pos:start="1777:13" pos:end="1777:33"><name pos:start="1777:13" pos:end="1777:15">val</name> <operator pos:start="1777:17" pos:end="1777:17">=</operator> <call pos:start="1777:19" pos:end="1777:33"><name pos:start="1777:19" pos:end="1777:26">insn_get</name><argument_list pos:start="1777:27" pos:end="1777:33">(<argument pos:start="1777:28" pos:end="1777:28"><expr pos:start="1777:28" pos:end="1777:28"><name pos:start="1777:28" pos:end="1777:28">s</name></expr></argument>, <argument pos:start="1777:31" pos:end="1777:32"><expr pos:start="1777:31" pos:end="1777:32"><name pos:start="1777:31" pos:end="1777:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1779:9" pos:end="1781:47">else<block type="pseudo" pos:start="1781:13" pos:end="1781:47"><block_content pos:start="1781:13" pos:end="1781:47">

            <expr_stmt pos:start="1781:13" pos:end="1781:47"><expr pos:start="1781:13" pos:end="1781:46"><name pos:start="1781:13" pos:end="1781:15">val</name> <operator pos:start="1781:17" pos:end="1781:17">=</operator> <operator pos:start="1781:19" pos:end="1781:19">(</operator><name pos:start="1781:20" pos:end="1781:25">int8_t</name><operator pos:start="1781:26" pos:end="1781:26">)</operator><call pos:start="1781:27" pos:end="1781:46"><name pos:start="1781:27" pos:end="1781:34">insn_get</name><argument_list pos:start="1781:35" pos:end="1781:46">(<argument pos:start="1781:36" pos:end="1781:36"><expr pos:start="1781:36" pos:end="1781:36"><name pos:start="1781:36" pos:end="1781:36">s</name></expr></argument>, <argument pos:start="1781:39" pos:end="1781:45"><expr pos:start="1781:39" pos:end="1781:45"><name pos:start="1781:39" pos:end="1781:45">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1783:9" pos:end="1783:31"><expr pos:start="1783:9" pos:end="1783:30"><call pos:start="1783:9" pos:end="1783:30"><name pos:start="1783:9" pos:end="1783:25">gen_op_movl_T0_im</name><argument_list pos:start="1783:26" pos:end="1783:30">(<argument pos:start="1783:27" pos:end="1783:29"><expr pos:start="1783:27" pos:end="1783:29"><name pos:start="1783:27" pos:end="1783:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1785:9" pos:end="1785:23"><expr pos:start="1785:9" pos:end="1785:22"><call pos:start="1785:9" pos:end="1785:22"><name pos:start="1785:9" pos:end="1785:19">gen_push_T0</name><argument_list pos:start="1785:20" pos:end="1785:22">(<argument pos:start="1785:21" pos:end="1785:21"><expr pos:start="1785:21" pos:end="1785:21"><name pos:start="1785:21" pos:end="1785:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1787:9" pos:end="1787:14">break;</break>

    <case pos:start="1789:5" pos:end="1789:14">case <expr pos:start="1789:10" pos:end="1789:13"><literal type="number" pos:start="1789:10" pos:end="1789:13">0x8f</literal></expr>:</case> <comment type="block" pos:start="1789:16" pos:end="1789:27">/* pop Ev */</comment>

        <if_stmt pos:start="1791:9" pos:end="1799:9"><if pos:start="1791:9" pos:end="1795:9">if <condition pos:start="1791:12" pos:end="1791:22">(<expr pos:start="1791:13" pos:end="1791:21"><call pos:start="1791:13" pos:end="1791:21"><name pos:start="1791:13" pos:end="1791:18">CODE64</name><argument_list pos:start="1791:19" pos:end="1791:21">(<argument pos:start="1791:20" pos:end="1791:20"><expr pos:start="1791:20" pos:end="1791:20"><name pos:start="1791:20" pos:end="1791:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1791:24" pos:end="1795:9">{<block_content pos:start="1793:13" pos:end="1793:43">

            <expr_stmt pos:start="1793:13" pos:end="1793:43"><expr pos:start="1793:13" pos:end="1793:42"><name pos:start="1793:13" pos:end="1793:14">ot</name> <operator pos:start="1793:16" pos:end="1793:16">=</operator> <ternary pos:start="1793:18" pos:end="1793:42"><condition pos:start="1793:18" pos:end="1793:24"><expr pos:start="1793:18" pos:end="1793:22"><name pos:start="1793:18" pos:end="1793:22">dflag</name></expr> ?</condition><then pos:start="1793:26" pos:end="1793:32"> <expr pos:start="1793:26" pos:end="1793:32"><name pos:start="1793:26" pos:end="1793:32">OT_QUAD</name></expr> </then><else pos:start="1793:34" pos:end="1793:42">: <expr pos:start="1793:36" pos:end="1793:42"><name pos:start="1793:36" pos:end="1793:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1795:11" pos:end="1799:9">else <block pos:start="1795:16" pos:end="1799:9">{<block_content pos:start="1797:13" pos:end="1797:33">

            <expr_stmt pos:start="1797:13" pos:end="1797:33"><expr pos:start="1797:13" pos:end="1797:32"><name pos:start="1797:13" pos:end="1797:14">ot</name> <operator pos:start="1797:16" pos:end="1797:16">=</operator> <name pos:start="1797:18" pos:end="1797:22">dflag</name> <operator pos:start="1797:24" pos:end="1797:24">+</operator> <name pos:start="1797:26" pos:end="1797:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1801:9" pos:end="1801:35"><expr pos:start="1801:9" pos:end="1801:34"><name pos:start="1801:9" pos:end="1801:13">modrm</name> <operator pos:start="1801:15" pos:end="1801:15">=</operator> <call pos:start="1801:17" pos:end="1801:34"><name pos:start="1801:17" pos:end="1801:25">ldub_code</name><argument_list pos:start="1801:26" pos:end="1801:34">(<argument pos:start="1801:27" pos:end="1801:33"><expr pos:start="1801:27" pos:end="1801:33"><name pos:start="1801:27" pos:end="1801:31"><name pos:start="1801:27" pos:end="1801:27">s</name><operator pos:start="1801:28" pos:end="1801:29">-&gt;</operator><name pos:start="1801:30" pos:end="1801:31">pc</name></name><operator pos:start="1801:32" pos:end="1801:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1803:9" pos:end="1803:31"><expr pos:start="1803:9" pos:end="1803:30"><name pos:start="1803:9" pos:end="1803:11">mod</name> <operator pos:start="1803:13" pos:end="1803:13">=</operator> <operator pos:start="1803:15" pos:end="1803:15">(</operator><name pos:start="1803:16" pos:end="1803:20">modrm</name> <operator pos:start="1803:22" pos:end="1803:23">&gt;&gt;</operator> <literal type="number" pos:start="1803:25" pos:end="1803:25">6</literal><operator pos:start="1803:26" pos:end="1803:26">)</operator> <operator pos:start="1803:28" pos:end="1803:28">&amp;</operator> <literal type="number" pos:start="1803:30" pos:end="1803:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1805:9" pos:end="1805:22"><expr pos:start="1805:9" pos:end="1805:21"><call pos:start="1805:9" pos:end="1805:21"><name pos:start="1805:9" pos:end="1805:18">gen_pop_T0</name><argument_list pos:start="1805:19" pos:end="1805:21">(<argument pos:start="1805:20" pos:end="1805:20"><expr pos:start="1805:20" pos:end="1805:20"><name pos:start="1805:20" pos:end="1805:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1807:9" pos:end="1829:9"><if pos:start="1807:9" pos:end="1817:9">if <condition pos:start="1807:12" pos:end="1807:21">(<expr pos:start="1807:13" pos:end="1807:20"><name pos:start="1807:13" pos:end="1807:15">mod</name> <operator pos:start="1807:17" pos:end="1807:18">==</operator> <literal type="number" pos:start="1807:20" pos:end="1807:20">3</literal></expr>)</condition> <block pos:start="1807:23" pos:end="1817:9">{<block_content pos:start="1811:13" pos:end="1815:38">

            <comment type="block" pos:start="1809:13" pos:end="1809:54">/* NOTE: order is important for pop %sp */</comment>

            <expr_stmt pos:start="1811:13" pos:end="1811:30"><expr pos:start="1811:13" pos:end="1811:29"><call pos:start="1811:13" pos:end="1811:29"><name pos:start="1811:13" pos:end="1811:26">gen_pop_update</name><argument_list pos:start="1811:27" pos:end="1811:29">(<argument pos:start="1811:28" pos:end="1811:28"><expr pos:start="1811:28" pos:end="1811:28"><name pos:start="1811:28" pos:end="1811:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1813:13" pos:end="1813:40"><expr pos:start="1813:13" pos:end="1813:39"><name pos:start="1813:13" pos:end="1813:14">rm</name> <operator pos:start="1813:16" pos:end="1813:16">=</operator> <operator pos:start="1813:18" pos:end="1813:18">(</operator><name pos:start="1813:19" pos:end="1813:23">modrm</name> <operator pos:start="1813:25" pos:end="1813:25">&amp;</operator> <literal type="number" pos:start="1813:27" pos:end="1813:27">7</literal><operator pos:start="1813:28" pos:end="1813:28">)</operator> <operator pos:start="1813:30" pos:end="1813:30">|</operator> <call pos:start="1813:32" pos:end="1813:39"><name pos:start="1813:32" pos:end="1813:36">REX_B</name><argument_list pos:start="1813:37" pos:end="1813:39">(<argument pos:start="1813:38" pos:end="1813:38"><expr pos:start="1813:38" pos:end="1813:38"><name pos:start="1813:38" pos:end="1813:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1815:13" pos:end="1815:38"><expr pos:start="1815:13" pos:end="1815:37"><call pos:start="1815:13" pos:end="1815:37"><name pos:start="1815:13" pos:end="1815:29">gen_op_mov_reg_T0</name><argument_list pos:start="1815:30" pos:end="1815:37">(<argument pos:start="1815:31" pos:end="1815:32"><expr pos:start="1815:31" pos:end="1815:32"><name pos:start="1815:31" pos:end="1815:32">ot</name></expr></argument>, <argument pos:start="1815:35" pos:end="1815:36"><expr pos:start="1815:35" pos:end="1815:36"><name pos:start="1815:35" pos:end="1815:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1817:11" pos:end="1829:9">else <block pos:start="1817:16" pos:end="1829:9">{<block_content pos:start="1821:13" pos:end="1827:30">

            <comment type="block" pos:start="1819:13" pos:end="1819:65">/* NOTE: order is important too for MMU exceptions */</comment>

            <expr_stmt pos:start="1821:13" pos:end="1821:39"><expr pos:start="1821:13" pos:end="1821:38"><name pos:start="1821:13" pos:end="1821:28"><name pos:start="1821:13" pos:end="1821:13">s</name><operator pos:start="1821:14" pos:end="1821:15">-&gt;</operator><name pos:start="1821:16" pos:end="1821:28">popl_esp_hack</name></name> <operator pos:start="1821:30" pos:end="1821:30">=</operator> <literal type="number" pos:start="1821:32" pos:end="1821:32">1</literal> <operator pos:start="1821:34" pos:end="1821:35">&lt;&lt;</operator> <name pos:start="1821:37" pos:end="1821:38">ot</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1823:13" pos:end="1823:53"><expr pos:start="1823:13" pos:end="1823:52"><call pos:start="1823:13" pos:end="1823:52"><name pos:start="1823:13" pos:end="1823:26">gen_ldst_modrm</name><argument_list pos:start="1823:27" pos:end="1823:52">(<argument pos:start="1823:28" pos:end="1823:28"><expr pos:start="1823:28" pos:end="1823:28"><name pos:start="1823:28" pos:end="1823:28">s</name></expr></argument>, <argument pos:start="1823:31" pos:end="1823:35"><expr pos:start="1823:31" pos:end="1823:35"><name pos:start="1823:31" pos:end="1823:35">modrm</name></expr></argument>, <argument pos:start="1823:38" pos:end="1823:39"><expr pos:start="1823:38" pos:end="1823:39"><name pos:start="1823:38" pos:end="1823:39">ot</name></expr></argument>, <argument pos:start="1823:42" pos:end="1823:48"><expr pos:start="1823:42" pos:end="1823:48"><name pos:start="1823:42" pos:end="1823:48">OR_TMP0</name></expr></argument>, <argument pos:start="1823:51" pos:end="1823:51"><expr pos:start="1823:51" pos:end="1823:51"><literal type="number" pos:start="1823:51" pos:end="1823:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1825:13" pos:end="1825:33"><expr pos:start="1825:13" pos:end="1825:32"><name pos:start="1825:13" pos:end="1825:28"><name pos:start="1825:13" pos:end="1825:13">s</name><operator pos:start="1825:14" pos:end="1825:15">-&gt;</operator><name pos:start="1825:16" pos:end="1825:28">popl_esp_hack</name></name> <operator pos:start="1825:30" pos:end="1825:30">=</operator> <literal type="number" pos:start="1825:32" pos:end="1825:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1827:13" pos:end="1827:30"><expr pos:start="1827:13" pos:end="1827:29"><call pos:start="1827:13" pos:end="1827:29"><name pos:start="1827:13" pos:end="1827:26">gen_pop_update</name><argument_list pos:start="1827:27" pos:end="1827:29">(<argument pos:start="1827:28" pos:end="1827:28"><expr pos:start="1827:28" pos:end="1827:28"><name pos:start="1827:28" pos:end="1827:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1831:9" pos:end="1831:14">break;</break>

    <case pos:start="1833:5" pos:end="1833:14">case <expr pos:start="1833:10" pos:end="1833:13"><literal type="number" pos:start="1833:10" pos:end="1833:13">0xc8</literal></expr>:</case> <comment type="block" pos:start="1833:16" pos:end="1833:26">/* enter */</comment>

        <block pos:start="1835:9" pos:end="1847:9">{<block_content pos:start="1837:13" pos:end="1845:37">

            <decl_stmt pos:start="1837:13" pos:end="1837:22"><decl pos:start="1837:13" pos:end="1837:21"><type pos:start="1837:13" pos:end="1837:15"><name pos:start="1837:13" pos:end="1837:15">int</name></type> <name pos:start="1837:17" pos:end="1837:21">level</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1839:13" pos:end="1839:35"><expr pos:start="1839:13" pos:end="1839:34"><name pos:start="1839:13" pos:end="1839:15">val</name> <operator pos:start="1839:17" pos:end="1839:17">=</operator> <call pos:start="1839:19" pos:end="1839:34"><name pos:start="1839:19" pos:end="1839:27">lduw_code</name><argument_list pos:start="1839:28" pos:end="1839:34">(<argument pos:start="1839:29" pos:end="1839:33"><expr pos:start="1839:29" pos:end="1839:33"><name pos:start="1839:29" pos:end="1839:33"><name pos:start="1839:29" pos:end="1839:29">s</name><operator pos:start="1839:30" pos:end="1839:31">-&gt;</operator><name pos:start="1839:32" pos:end="1839:33">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1841:13" pos:end="1841:23"><expr pos:start="1841:13" pos:end="1841:22"><name pos:start="1841:13" pos:end="1841:17"><name pos:start="1841:13" pos:end="1841:13">s</name><operator pos:start="1841:14" pos:end="1841:15">-&gt;</operator><name pos:start="1841:16" pos:end="1841:17">pc</name></name> <operator pos:start="1841:19" pos:end="1841:20">+=</operator> <literal type="number" pos:start="1841:22" pos:end="1841:22">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1843:13" pos:end="1843:39"><expr pos:start="1843:13" pos:end="1843:38"><name pos:start="1843:13" pos:end="1843:17">level</name> <operator pos:start="1843:19" pos:end="1843:19">=</operator> <call pos:start="1843:21" pos:end="1843:38"><name pos:start="1843:21" pos:end="1843:29">ldub_code</name><argument_list pos:start="1843:30" pos:end="1843:38">(<argument pos:start="1843:31" pos:end="1843:37"><expr pos:start="1843:31" pos:end="1843:37"><name pos:start="1843:31" pos:end="1843:35"><name pos:start="1843:31" pos:end="1843:31">s</name><operator pos:start="1843:32" pos:end="1843:33">-&gt;</operator><name pos:start="1843:34" pos:end="1843:35">pc</name></name><operator pos:start="1843:36" pos:end="1843:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1845:13" pos:end="1845:37"><expr pos:start="1845:13" pos:end="1845:36"><call pos:start="1845:13" pos:end="1845:36"><name pos:start="1845:13" pos:end="1845:21">gen_enter</name><argument_list pos:start="1845:22" pos:end="1845:36">(<argument pos:start="1845:23" pos:end="1845:23"><expr pos:start="1845:23" pos:end="1845:23"><name pos:start="1845:23" pos:end="1845:23">s</name></expr></argument>, <argument pos:start="1845:26" pos:end="1845:28"><expr pos:start="1845:26" pos:end="1845:28"><name pos:start="1845:26" pos:end="1845:28">val</name></expr></argument>, <argument pos:start="1845:31" pos:end="1845:35"><expr pos:start="1845:31" pos:end="1845:35"><name pos:start="1845:31" pos:end="1845:35">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1849:9" pos:end="1849:14">break;</break>

    <case pos:start="1851:5" pos:end="1851:14">case <expr pos:start="1851:10" pos:end="1851:13"><literal type="number" pos:start="1851:10" pos:end="1851:13">0xc9</literal></expr>:</case> <comment type="block" pos:start="1851:16" pos:end="1851:26">/* leave */</comment>

        <comment type="block" pos:start="1853:9" pos:end="1853:84">/* XXX: exception not precise (ESP is updated before potential exception) */</comment>

        <if_stmt pos:start="1855:9" pos:end="1873:9"><if pos:start="1855:9" pos:end="1861:9">if <condition pos:start="1855:12" pos:end="1855:22">(<expr pos:start="1855:13" pos:end="1855:21"><call pos:start="1855:13" pos:end="1855:21"><name pos:start="1855:13" pos:end="1855:18">CODE64</name><argument_list pos:start="1855:19" pos:end="1855:21">(<argument pos:start="1855:20" pos:end="1855:20"><expr pos:start="1855:20" pos:end="1855:20"><name pos:start="1855:20" pos:end="1855:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1855:24" pos:end="1861:9">{<block_content pos:start="1857:13" pos:end="1859:46">

            <expr_stmt pos:start="1857:13" pos:end="1857:49"><expr pos:start="1857:13" pos:end="1857:48"><call pos:start="1857:13" pos:end="1857:48"><name pos:start="1857:13" pos:end="1857:29">gen_op_mov_TN_reg</name><argument_list pos:start="1857:30" pos:end="1857:48">(<argument pos:start="1857:31" pos:end="1857:37"><expr pos:start="1857:31" pos:end="1857:37"><name pos:start="1857:31" pos:end="1857:37">OT_QUAD</name></expr></argument>, <argument pos:start="1857:40" pos:end="1857:40"><expr pos:start="1857:40" pos:end="1857:40"><literal type="number" pos:start="1857:40" pos:end="1857:40">0</literal></expr></argument>, <argument pos:start="1857:43" pos:end="1857:47"><expr pos:start="1857:43" pos:end="1857:47"><name pos:start="1857:43" pos:end="1857:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1859:13" pos:end="1859:46"><expr pos:start="1859:13" pos:end="1859:45"><call pos:start="1859:13" pos:end="1859:45"><name pos:start="1859:13" pos:end="1859:29">gen_op_mov_reg_T0</name><argument_list pos:start="1859:30" pos:end="1859:45">(<argument pos:start="1859:31" pos:end="1859:37"><expr pos:start="1859:31" pos:end="1859:37"><name pos:start="1859:31" pos:end="1859:37">OT_QUAD</name></expr></argument>, <argument pos:start="1859:40" pos:end="1859:44"><expr pos:start="1859:40" pos:end="1859:44"><name pos:start="1859:40" pos:end="1859:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1861:11" pos:end="1867:9">else if <condition pos:start="1861:19" pos:end="1861:27">(<expr pos:start="1861:20" pos:end="1861:26"><name pos:start="1861:20" pos:end="1861:26"><name pos:start="1861:20" pos:end="1861:20">s</name><operator pos:start="1861:21" pos:end="1861:22">-&gt;</operator><name pos:start="1861:23" pos:end="1861:26">ss32</name></name></expr>)</condition> <block pos:start="1861:29" pos:end="1867:9">{<block_content pos:start="1863:13" pos:end="1865:46">

            <expr_stmt pos:start="1863:13" pos:end="1863:49"><expr pos:start="1863:13" pos:end="1863:48"><call pos:start="1863:13" pos:end="1863:48"><name pos:start="1863:13" pos:end="1863:29">gen_op_mov_TN_reg</name><argument_list pos:start="1863:30" pos:end="1863:48">(<argument pos:start="1863:31" pos:end="1863:37"><expr pos:start="1863:31" pos:end="1863:37"><name pos:start="1863:31" pos:end="1863:37">OT_LONG</name></expr></argument>, <argument pos:start="1863:40" pos:end="1863:40"><expr pos:start="1863:40" pos:end="1863:40"><literal type="number" pos:start="1863:40" pos:end="1863:40">0</literal></expr></argument>, <argument pos:start="1863:43" pos:end="1863:47"><expr pos:start="1863:43" pos:end="1863:47"><name pos:start="1863:43" pos:end="1863:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1865:13" pos:end="1865:46"><expr pos:start="1865:13" pos:end="1865:45"><call pos:start="1865:13" pos:end="1865:45"><name pos:start="1865:13" pos:end="1865:29">gen_op_mov_reg_T0</name><argument_list pos:start="1865:30" pos:end="1865:45">(<argument pos:start="1865:31" pos:end="1865:37"><expr pos:start="1865:31" pos:end="1865:37"><name pos:start="1865:31" pos:end="1865:37">OT_LONG</name></expr></argument>, <argument pos:start="1865:40" pos:end="1865:44"><expr pos:start="1865:40" pos:end="1865:44"><name pos:start="1865:40" pos:end="1865:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1867:11" pos:end="1873:9">else <block pos:start="1867:16" pos:end="1873:9">{<block_content pos:start="1869:13" pos:end="1871:46">

            <expr_stmt pos:start="1869:13" pos:end="1869:49"><expr pos:start="1869:13" pos:end="1869:48"><call pos:start="1869:13" pos:end="1869:48"><name pos:start="1869:13" pos:end="1869:29">gen_op_mov_TN_reg</name><argument_list pos:start="1869:30" pos:end="1869:48">(<argument pos:start="1869:31" pos:end="1869:37"><expr pos:start="1869:31" pos:end="1869:37"><name pos:start="1869:31" pos:end="1869:37">OT_WORD</name></expr></argument>, <argument pos:start="1869:40" pos:end="1869:40"><expr pos:start="1869:40" pos:end="1869:40"><literal type="number" pos:start="1869:40" pos:end="1869:40">0</literal></expr></argument>, <argument pos:start="1869:43" pos:end="1869:47"><expr pos:start="1869:43" pos:end="1869:47"><name pos:start="1869:43" pos:end="1869:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1871:13" pos:end="1871:46"><expr pos:start="1871:13" pos:end="1871:45"><call pos:start="1871:13" pos:end="1871:45"><name pos:start="1871:13" pos:end="1871:29">gen_op_mov_reg_T0</name><argument_list pos:start="1871:30" pos:end="1871:45">(<argument pos:start="1871:31" pos:end="1871:37"><expr pos:start="1871:31" pos:end="1871:37"><name pos:start="1871:31" pos:end="1871:37">OT_WORD</name></expr></argument>, <argument pos:start="1871:40" pos:end="1871:44"><expr pos:start="1871:40" pos:end="1871:44"><name pos:start="1871:40" pos:end="1871:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1875:9" pos:end="1875:22"><expr pos:start="1875:9" pos:end="1875:21"><call pos:start="1875:9" pos:end="1875:21"><name pos:start="1875:9" pos:end="1875:18">gen_pop_T0</name><argument_list pos:start="1875:19" pos:end="1875:21">(<argument pos:start="1875:20" pos:end="1875:20"><expr pos:start="1875:20" pos:end="1875:20"><name pos:start="1875:20" pos:end="1875:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1877:9" pos:end="1885:9"><if pos:start="1877:9" pos:end="1881:9">if <condition pos:start="1877:12" pos:end="1877:22">(<expr pos:start="1877:13" pos:end="1877:21"><call pos:start="1877:13" pos:end="1877:21"><name pos:start="1877:13" pos:end="1877:18">CODE64</name><argument_list pos:start="1877:19" pos:end="1877:21">(<argument pos:start="1877:20" pos:end="1877:20"><expr pos:start="1877:20" pos:end="1877:20"><name pos:start="1877:20" pos:end="1877:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1877:24" pos:end="1881:9">{<block_content pos:start="1879:13" pos:end="1879:43">

            <expr_stmt pos:start="1879:13" pos:end="1879:43"><expr pos:start="1879:13" pos:end="1879:42"><name pos:start="1879:13" pos:end="1879:14">ot</name> <operator pos:start="1879:16" pos:end="1879:16">=</operator> <ternary pos:start="1879:18" pos:end="1879:42"><condition pos:start="1879:18" pos:end="1879:24"><expr pos:start="1879:18" pos:end="1879:22"><name pos:start="1879:18" pos:end="1879:22">dflag</name></expr> ?</condition><then pos:start="1879:26" pos:end="1879:32"> <expr pos:start="1879:26" pos:end="1879:32"><name pos:start="1879:26" pos:end="1879:32">OT_QUAD</name></expr> </then><else pos:start="1879:34" pos:end="1879:42">: <expr pos:start="1879:36" pos:end="1879:42"><name pos:start="1879:36" pos:end="1879:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1881:11" pos:end="1885:9">else <block pos:start="1881:16" pos:end="1885:9">{<block_content pos:start="1883:13" pos:end="1883:33">

            <expr_stmt pos:start="1883:13" pos:end="1883:33"><expr pos:start="1883:13" pos:end="1883:32"><name pos:start="1883:13" pos:end="1883:14">ot</name> <operator pos:start="1883:16" pos:end="1883:16">=</operator> <name pos:start="1883:18" pos:end="1883:22">dflag</name> <operator pos:start="1883:24" pos:end="1883:24">+</operator> <name pos:start="1883:26" pos:end="1883:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1887:9" pos:end="1887:37"><expr pos:start="1887:9" pos:end="1887:36"><call pos:start="1887:9" pos:end="1887:36"><name pos:start="1887:9" pos:end="1887:25">gen_op_mov_reg_T0</name><argument_list pos:start="1887:26" pos:end="1887:36">(<argument pos:start="1887:27" pos:end="1887:28"><expr pos:start="1887:27" pos:end="1887:28"><name pos:start="1887:27" pos:end="1887:28">ot</name></expr></argument>, <argument pos:start="1887:31" pos:end="1887:35"><expr pos:start="1887:31" pos:end="1887:35"><name pos:start="1887:31" pos:end="1887:35">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1889:9" pos:end="1889:26"><expr pos:start="1889:9" pos:end="1889:25"><call pos:start="1889:9" pos:end="1889:25"><name pos:start="1889:9" pos:end="1889:22">gen_pop_update</name><argument_list pos:start="1889:23" pos:end="1889:25">(<argument pos:start="1889:24" pos:end="1889:24"><expr pos:start="1889:24" pos:end="1889:24"><name pos:start="1889:24" pos:end="1889:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1891:9" pos:end="1891:14">break;</break>

    <case pos:start="1893:5" pos:end="1893:14">case <expr pos:start="1893:10" pos:end="1893:13"><literal type="number" pos:start="1893:10" pos:end="1893:13">0x06</literal></expr>:</case> <comment type="block" pos:start="1893:16" pos:end="1893:28">/* push es */</comment>

    <case pos:start="1895:5" pos:end="1895:14">case <expr pos:start="1895:10" pos:end="1895:13"><literal type="number" pos:start="1895:10" pos:end="1895:13">0x0e</literal></expr>:</case> <comment type="block" pos:start="1895:16" pos:end="1895:28">/* push cs */</comment>

    <case pos:start="1897:5" pos:end="1897:14">case <expr pos:start="1897:10" pos:end="1897:13"><literal type="number" pos:start="1897:10" pos:end="1897:13">0x16</literal></expr>:</case> <comment type="block" pos:start="1897:16" pos:end="1897:28">/* push ss */</comment>

    <case pos:start="1899:5" pos:end="1899:14">case <expr pos:start="1899:10" pos:end="1899:13"><literal type="number" pos:start="1899:10" pos:end="1899:13">0x1e</literal></expr>:</case> <comment type="block" pos:start="1899:16" pos:end="1899:28">/* push ds */</comment>

        <if_stmt pos:start="1901:9" pos:end="1903:28"><if pos:start="1901:9" pos:end="1903:28">if <condition pos:start="1901:12" pos:end="1901:22">(<expr pos:start="1901:13" pos:end="1901:21"><call pos:start="1901:13" pos:end="1901:21"><name pos:start="1901:13" pos:end="1901:18">CODE64</name><argument_list pos:start="1901:19" pos:end="1901:21">(<argument pos:start="1901:20" pos:end="1901:20"><expr pos:start="1901:20" pos:end="1901:20"><name pos:start="1901:20" pos:end="1901:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1903:13" pos:end="1903:28"><block_content pos:start="1903:13" pos:end="1903:28">

            <goto pos:start="1903:13" pos:end="1903:28">goto <name pos:start="1903:18" pos:end="1903:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1905:9" pos:end="1905:35"><expr pos:start="1905:9" pos:end="1905:34"><call pos:start="1905:9" pos:end="1905:34"><name pos:start="1905:9" pos:end="1905:26">gen_op_movl_T0_seg</name><argument_list pos:start="1905:27" pos:end="1905:34">(<argument pos:start="1905:28" pos:end="1905:33"><expr pos:start="1905:28" pos:end="1905:33"><name pos:start="1905:28" pos:end="1905:28">b</name> <operator pos:start="1905:30" pos:end="1905:31">&gt;&gt;</operator> <literal type="number" pos:start="1905:33" pos:end="1905:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1907:9" pos:end="1907:23"><expr pos:start="1907:9" pos:end="1907:22"><call pos:start="1907:9" pos:end="1907:22"><name pos:start="1907:9" pos:end="1907:19">gen_push_T0</name><argument_list pos:start="1907:20" pos:end="1907:22">(<argument pos:start="1907:21" pos:end="1907:21"><expr pos:start="1907:21" pos:end="1907:21"><name pos:start="1907:21" pos:end="1907:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1909:9" pos:end="1909:14">break;</break>

    <case pos:start="1911:5" pos:end="1911:15">case <expr pos:start="1911:10" pos:end="1911:14"><literal type="number" pos:start="1911:10" pos:end="1911:14">0x1a0</literal></expr>:</case> <comment type="block" pos:start="1911:17" pos:end="1911:29">/* push fs */</comment>

    <case pos:start="1913:5" pos:end="1913:15">case <expr pos:start="1913:10" pos:end="1913:14"><literal type="number" pos:start="1913:10" pos:end="1913:14">0x1a8</literal></expr>:</case> <comment type="block" pos:start="1913:17" pos:end="1913:29">/* push gs */</comment>

        <expr_stmt pos:start="1915:9" pos:end="1915:41"><expr pos:start="1915:9" pos:end="1915:40"><call pos:start="1915:9" pos:end="1915:40"><name pos:start="1915:9" pos:end="1915:26">gen_op_movl_T0_seg</name><argument_list pos:start="1915:27" pos:end="1915:40">(<argument pos:start="1915:28" pos:end="1915:39"><expr pos:start="1915:28" pos:end="1915:39"><operator pos:start="1915:28" pos:end="1915:28">(</operator><name pos:start="1915:29" pos:end="1915:29">b</name> <operator pos:start="1915:31" pos:end="1915:32">&gt;&gt;</operator> <literal type="number" pos:start="1915:34" pos:end="1915:34">3</literal><operator pos:start="1915:35" pos:end="1915:35">)</operator> <operator pos:start="1915:37" pos:end="1915:37">&amp;</operator> <literal type="number" pos:start="1915:39" pos:end="1915:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1917:9" pos:end="1917:23"><expr pos:start="1917:9" pos:end="1917:22"><call pos:start="1917:9" pos:end="1917:22"><name pos:start="1917:9" pos:end="1917:19">gen_push_T0</name><argument_list pos:start="1917:20" pos:end="1917:22">(<argument pos:start="1917:21" pos:end="1917:21"><expr pos:start="1917:21" pos:end="1917:21"><name pos:start="1917:21" pos:end="1917:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1919:9" pos:end="1919:14">break;</break>

    <case pos:start="1921:5" pos:end="1921:14">case <expr pos:start="1921:10" pos:end="1921:13"><literal type="number" pos:start="1921:10" pos:end="1921:13">0x07</literal></expr>:</case> <comment type="block" pos:start="1921:16" pos:end="1921:27">/* pop es */</comment>

    <case pos:start="1923:5" pos:end="1923:14">case <expr pos:start="1923:10" pos:end="1923:13"><literal type="number" pos:start="1923:10" pos:end="1923:13">0x17</literal></expr>:</case> <comment type="block" pos:start="1923:16" pos:end="1923:27">/* pop ss */</comment>

    <case pos:start="1925:5" pos:end="1925:14">case <expr pos:start="1925:10" pos:end="1925:13"><literal type="number" pos:start="1925:10" pos:end="1925:13">0x1f</literal></expr>:</case> <comment type="block" pos:start="1925:16" pos:end="1925:27">/* pop ds */</comment>

        <if_stmt pos:start="1927:9" pos:end="1929:28"><if pos:start="1927:9" pos:end="1929:28">if <condition pos:start="1927:12" pos:end="1927:22">(<expr pos:start="1927:13" pos:end="1927:21"><call pos:start="1927:13" pos:end="1927:21"><name pos:start="1927:13" pos:end="1927:18">CODE64</name><argument_list pos:start="1927:19" pos:end="1927:21">(<argument pos:start="1927:20" pos:end="1927:20"><expr pos:start="1927:20" pos:end="1927:20"><name pos:start="1927:20" pos:end="1927:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1929:13" pos:end="1929:28"><block_content pos:start="1929:13" pos:end="1929:28">

            <goto pos:start="1929:13" pos:end="1929:28">goto <name pos:start="1929:18" pos:end="1929:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1931:9" pos:end="1931:21"><expr pos:start="1931:9" pos:end="1931:20"><name pos:start="1931:9" pos:end="1931:11">reg</name> <operator pos:start="1931:13" pos:end="1931:13">=</operator> <name pos:start="1931:15" pos:end="1931:15">b</name> <operator pos:start="1931:17" pos:end="1931:18">&gt;&gt;</operator> <literal type="number" pos:start="1931:20" pos:end="1931:20">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1933:9" pos:end="1933:22"><expr pos:start="1933:9" pos:end="1933:21"><call pos:start="1933:9" pos:end="1933:21"><name pos:start="1933:9" pos:end="1933:18">gen_pop_T0</name><argument_list pos:start="1933:19" pos:end="1933:21">(<argument pos:start="1933:20" pos:end="1933:20"><expr pos:start="1933:20" pos:end="1933:20"><name pos:start="1933:20" pos:end="1933:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1935:9" pos:end="1935:55"><expr pos:start="1935:9" pos:end="1935:54"><call pos:start="1935:9" pos:end="1935:54"><name pos:start="1935:9" pos:end="1935:23">gen_movl_seg_T0</name><argument_list pos:start="1935:24" pos:end="1935:54">(<argument pos:start="1935:25" pos:end="1935:25"><expr pos:start="1935:25" pos:end="1935:25"><name pos:start="1935:25" pos:end="1935:25">s</name></expr></argument>, <argument pos:start="1935:28" pos:end="1935:30"><expr pos:start="1935:28" pos:end="1935:30"><name pos:start="1935:28" pos:end="1935:30">reg</name></expr></argument>, <argument pos:start="1935:33" pos:end="1935:53"><expr pos:start="1935:33" pos:end="1935:53"><name pos:start="1935:33" pos:end="1935:40">pc_start</name> <operator pos:start="1935:42" pos:end="1935:42">-</operator> <name pos:start="1935:44" pos:end="1935:53"><name pos:start="1935:44" pos:end="1935:44">s</name><operator pos:start="1935:45" pos:end="1935:46">-&gt;</operator><name pos:start="1935:47" pos:end="1935:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1937:9" pos:end="1937:26"><expr pos:start="1937:9" pos:end="1937:25"><call pos:start="1937:9" pos:end="1937:25"><name pos:start="1937:9" pos:end="1937:22">gen_pop_update</name><argument_list pos:start="1937:23" pos:end="1937:25">(<argument pos:start="1937:24" pos:end="1937:24"><expr pos:start="1937:24" pos:end="1937:24"><name pos:start="1937:24" pos:end="1937:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1939:9" pos:end="1953:9"><if pos:start="1939:9" pos:end="1953:9">if <condition pos:start="1939:12" pos:end="1939:24">(<expr pos:start="1939:13" pos:end="1939:23"><name pos:start="1939:13" pos:end="1939:15">reg</name> <operator pos:start="1939:17" pos:end="1939:18">==</operator> <name pos:start="1939:20" pos:end="1939:23">R_SS</name></expr>)</condition> <block pos:start="1939:26" pos:end="1953:9">{<block_content pos:start="1947:13" pos:end="1951:22">

            <comment type="block" pos:start="1941:13" pos:end="1941:57">/* if reg == SS, inhibit interrupts/trace. */</comment>

            <comment type="block" pos:start="1943:13" pos:end="1945:33">/* If several instructions disable interrupts, only the

               _first_ does it */</comment>

            <if_stmt pos:start="1947:13" pos:end="1949:45"><if pos:start="1947:13" pos:end="1949:45">if <condition pos:start="1947:16" pos:end="1947:54">(<expr pos:start="1947:17" pos:end="1947:53"><operator pos:start="1947:17" pos:end="1947:17">!</operator><operator pos:start="1947:18" pos:end="1947:18">(</operator><name pos:start="1947:19" pos:end="1947:30"><name pos:start="1947:19" pos:end="1947:19">s</name><operator pos:start="1947:20" pos:end="1947:21">-&gt;</operator><name pos:start="1947:22" pos:end="1947:23">tb</name><operator pos:start="1947:24" pos:end="1947:25">-&gt;</operator><name pos:start="1947:26" pos:end="1947:30">flags</name></name> <operator pos:start="1947:32" pos:end="1947:32">&amp;</operator> <name pos:start="1947:34" pos:end="1947:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="1947:53" pos:end="1947:53">)</operator></expr>)</condition><block type="pseudo" pos:start="1949:17" pos:end="1949:45"><block_content pos:start="1949:17" pos:end="1949:45">

                <expr_stmt pos:start="1949:17" pos:end="1949:45"><expr pos:start="1949:17" pos:end="1949:44"><call pos:start="1949:17" pos:end="1949:44"><name pos:start="1949:17" pos:end="1949:42">gen_helper_set_inhibit_irq</name><argument_list pos:start="1949:43" pos:end="1949:44">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1951:13" pos:end="1951:22"><expr pos:start="1951:13" pos:end="1951:21"><name pos:start="1951:13" pos:end="1951:17"><name pos:start="1951:13" pos:end="1951:13">s</name><operator pos:start="1951:14" pos:end="1951:15">-&gt;</operator><name pos:start="1951:16" pos:end="1951:17">tf</name></name> <operator pos:start="1951:19" pos:end="1951:19">=</operator> <literal type="number" pos:start="1951:21" pos:end="1951:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1955:9" pos:end="1961:9"><if pos:start="1955:9" pos:end="1961:9">if <condition pos:start="1955:12" pos:end="1955:22">(<expr pos:start="1955:13" pos:end="1955:21"><name pos:start="1955:13" pos:end="1955:21"><name pos:start="1955:13" pos:end="1955:13">s</name><operator pos:start="1955:14" pos:end="1955:15">-&gt;</operator><name pos:start="1955:16" pos:end="1955:21">is_jmp</name></name></expr>)</condition> <block pos:start="1955:24" pos:end="1961:9">{<block_content pos:start="1957:13" pos:end="1959:23">

            <expr_stmt pos:start="1957:13" pos:end="1957:43"><expr pos:start="1957:13" pos:end="1957:42"><call pos:start="1957:13" pos:end="1957:42"><name pos:start="1957:13" pos:end="1957:22">gen_jmp_im</name><argument_list pos:start="1957:23" pos:end="1957:42">(<argument pos:start="1957:24" pos:end="1957:41"><expr pos:start="1957:24" pos:end="1957:41"><name pos:start="1957:24" pos:end="1957:28"><name pos:start="1957:24" pos:end="1957:24">s</name><operator pos:start="1957:25" pos:end="1957:26">-&gt;</operator><name pos:start="1957:27" pos:end="1957:28">pc</name></name> <operator pos:start="1957:30" pos:end="1957:30">-</operator> <name pos:start="1957:32" pos:end="1957:41"><name pos:start="1957:32" pos:end="1957:32">s</name><operator pos:start="1957:33" pos:end="1957:34">-&gt;</operator><name pos:start="1957:35" pos:end="1957:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1959:13" pos:end="1959:23"><expr pos:start="1959:13" pos:end="1959:22"><call pos:start="1959:13" pos:end="1959:22"><name pos:start="1959:13" pos:end="1959:19">gen_eob</name><argument_list pos:start="1959:20" pos:end="1959:22">(<argument pos:start="1959:21" pos:end="1959:21"><expr pos:start="1959:21" pos:end="1959:21"><name pos:start="1959:21" pos:end="1959:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1963:9" pos:end="1963:14">break;</break>

    <case pos:start="1965:5" pos:end="1965:15">case <expr pos:start="1965:10" pos:end="1965:14"><literal type="number" pos:start="1965:10" pos:end="1965:14">0x1a1</literal></expr>:</case> <comment type="block" pos:start="1965:17" pos:end="1965:28">/* pop fs */</comment>

    <case pos:start="1967:5" pos:end="1967:15">case <expr pos:start="1967:10" pos:end="1967:14"><literal type="number" pos:start="1967:10" pos:end="1967:14">0x1a9</literal></expr>:</case> <comment type="block" pos:start="1967:17" pos:end="1967:28">/* pop gs */</comment>

        <expr_stmt pos:start="1969:9" pos:end="1969:22"><expr pos:start="1969:9" pos:end="1969:21"><call pos:start="1969:9" pos:end="1969:21"><name pos:start="1969:9" pos:end="1969:18">gen_pop_T0</name><argument_list pos:start="1969:19" pos:end="1969:21">(<argument pos:start="1969:20" pos:end="1969:20"><expr pos:start="1969:20" pos:end="1969:20"><name pos:start="1969:20" pos:end="1969:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1971:9" pos:end="1971:64"><expr pos:start="1971:9" pos:end="1971:63"><call pos:start="1971:9" pos:end="1971:63"><name pos:start="1971:9" pos:end="1971:23">gen_movl_seg_T0</name><argument_list pos:start="1971:24" pos:end="1971:63">(<argument pos:start="1971:25" pos:end="1971:25"><expr pos:start="1971:25" pos:end="1971:25"><name pos:start="1971:25" pos:end="1971:25">s</name></expr></argument>, <argument pos:start="1971:28" pos:end="1971:39"><expr pos:start="1971:28" pos:end="1971:39"><operator pos:start="1971:28" pos:end="1971:28">(</operator><name pos:start="1971:29" pos:end="1971:29">b</name> <operator pos:start="1971:31" pos:end="1971:32">&gt;&gt;</operator> <literal type="number" pos:start="1971:34" pos:end="1971:34">3</literal><operator pos:start="1971:35" pos:end="1971:35">)</operator> <operator pos:start="1971:37" pos:end="1971:37">&amp;</operator> <literal type="number" pos:start="1971:39" pos:end="1971:39">7</literal></expr></argument>, <argument pos:start="1971:42" pos:end="1971:62"><expr pos:start="1971:42" pos:end="1971:62"><name pos:start="1971:42" pos:end="1971:49">pc_start</name> <operator pos:start="1971:51" pos:end="1971:51">-</operator> <name pos:start="1971:53" pos:end="1971:62"><name pos:start="1971:53" pos:end="1971:53">s</name><operator pos:start="1971:54" pos:end="1971:55">-&gt;</operator><name pos:start="1971:56" pos:end="1971:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1973:9" pos:end="1973:26"><expr pos:start="1973:9" pos:end="1973:25"><call pos:start="1973:9" pos:end="1973:25"><name pos:start="1973:9" pos:end="1973:22">gen_pop_update</name><argument_list pos:start="1973:23" pos:end="1973:25">(<argument pos:start="1973:24" pos:end="1973:24"><expr pos:start="1973:24" pos:end="1973:24"><name pos:start="1973:24" pos:end="1973:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1975:9" pos:end="1981:9"><if pos:start="1975:9" pos:end="1981:9">if <condition pos:start="1975:12" pos:end="1975:22">(<expr pos:start="1975:13" pos:end="1975:21"><name pos:start="1975:13" pos:end="1975:21"><name pos:start="1975:13" pos:end="1975:13">s</name><operator pos:start="1975:14" pos:end="1975:15">-&gt;</operator><name pos:start="1975:16" pos:end="1975:21">is_jmp</name></name></expr>)</condition> <block pos:start="1975:24" pos:end="1981:9">{<block_content pos:start="1977:13" pos:end="1979:23">

            <expr_stmt pos:start="1977:13" pos:end="1977:43"><expr pos:start="1977:13" pos:end="1977:42"><call pos:start="1977:13" pos:end="1977:42"><name pos:start="1977:13" pos:end="1977:22">gen_jmp_im</name><argument_list pos:start="1977:23" pos:end="1977:42">(<argument pos:start="1977:24" pos:end="1977:41"><expr pos:start="1977:24" pos:end="1977:41"><name pos:start="1977:24" pos:end="1977:28"><name pos:start="1977:24" pos:end="1977:24">s</name><operator pos:start="1977:25" pos:end="1977:26">-&gt;</operator><name pos:start="1977:27" pos:end="1977:28">pc</name></name> <operator pos:start="1977:30" pos:end="1977:30">-</operator> <name pos:start="1977:32" pos:end="1977:41"><name pos:start="1977:32" pos:end="1977:32">s</name><operator pos:start="1977:33" pos:end="1977:34">-&gt;</operator><name pos:start="1977:35" pos:end="1977:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1979:13" pos:end="1979:23"><expr pos:start="1979:13" pos:end="1979:22"><call pos:start="1979:13" pos:end="1979:22"><name pos:start="1979:13" pos:end="1979:19">gen_eob</name><argument_list pos:start="1979:20" pos:end="1979:22">(<argument pos:start="1979:21" pos:end="1979:21"><expr pos:start="1979:21" pos:end="1979:21"><name pos:start="1979:21" pos:end="1979:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1983:9" pos:end="1983:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1987:9" pos:end="1987:36">/**************************/</comment>

        <comment type="block" pos:start="1989:9" pos:end="1989:17">/* mov */</comment>

    <case pos:start="1991:5" pos:end="1991:14">case <expr pos:start="1991:10" pos:end="1991:13"><literal type="number" pos:start="1991:10" pos:end="1991:13">0x88</literal></expr>:</case>

    <case pos:start="1993:5" pos:end="1993:14">case <expr pos:start="1993:10" pos:end="1993:13"><literal type="number" pos:start="1993:10" pos:end="1993:13">0x89</literal></expr>:</case> <comment type="block" pos:start="1993:16" pos:end="1993:31">/* mov Gv, Ev */</comment>

        <if_stmt pos:start="1995:9" pos:end="2001:33"><if pos:start="1995:9" pos:end="1997:25">if <condition pos:start="1995:12" pos:end="1995:25">(<expr pos:start="1995:13" pos:end="1995:24"><operator pos:start="1995:13" pos:end="1995:13">(</operator><name pos:start="1995:14" pos:end="1995:14">b</name> <operator pos:start="1995:16" pos:end="1995:16">&amp;</operator> <literal type="number" pos:start="1995:18" pos:end="1995:18">1</literal><operator pos:start="1995:19" pos:end="1995:19">)</operator> <operator pos:start="1995:21" pos:end="1995:22">==</operator> <literal type="number" pos:start="1995:24" pos:end="1995:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1997:13" pos:end="1997:25"><block_content pos:start="1997:13" pos:end="1997:25">

            <expr_stmt pos:start="1997:13" pos:end="1997:25"><expr pos:start="1997:13" pos:end="1997:24"><name pos:start="1997:13" pos:end="1997:14">ot</name> <operator pos:start="1997:16" pos:end="1997:16">=</operator> <name pos:start="1997:18" pos:end="1997:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1999:9" pos:end="2001:33">else<block type="pseudo" pos:start="2001:13" pos:end="2001:33"><block_content pos:start="2001:13" pos:end="2001:33">

            <expr_stmt pos:start="2001:13" pos:end="2001:33"><expr pos:start="2001:13" pos:end="2001:32"><name pos:start="2001:13" pos:end="2001:14">ot</name> <operator pos:start="2001:16" pos:end="2001:16">=</operator> <name pos:start="2001:18" pos:end="2001:22">dflag</name> <operator pos:start="2001:24" pos:end="2001:24">+</operator> <name pos:start="2001:26" pos:end="2001:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2003:9" pos:end="2003:35"><expr pos:start="2003:9" pos:end="2003:34"><name pos:start="2003:9" pos:end="2003:13">modrm</name> <operator pos:start="2003:15" pos:end="2003:15">=</operator> <call pos:start="2003:17" pos:end="2003:34"><name pos:start="2003:17" pos:end="2003:25">ldub_code</name><argument_list pos:start="2003:26" pos:end="2003:34">(<argument pos:start="2003:27" pos:end="2003:33"><expr pos:start="2003:27" pos:end="2003:33"><name pos:start="2003:27" pos:end="2003:31"><name pos:start="2003:27" pos:end="2003:27">s</name><operator pos:start="2003:28" pos:end="2003:29">-&gt;</operator><name pos:start="2003:30" pos:end="2003:31">pc</name></name><operator pos:start="2003:32" pos:end="2003:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2005:9" pos:end="2005:41"><expr pos:start="2005:9" pos:end="2005:40"><name pos:start="2005:9" pos:end="2005:11">reg</name> <operator pos:start="2005:13" pos:end="2005:13">=</operator> <operator pos:start="2005:15" pos:end="2005:15">(</operator><operator pos:start="2005:16" pos:end="2005:16">(</operator><name pos:start="2005:17" pos:end="2005:21">modrm</name> <operator pos:start="2005:23" pos:end="2005:24">&gt;&gt;</operator> <literal type="number" pos:start="2005:26" pos:end="2005:26">3</literal><operator pos:start="2005:27" pos:end="2005:27">)</operator> <operator pos:start="2005:29" pos:end="2005:29">&amp;</operator> <literal type="number" pos:start="2005:31" pos:end="2005:31">7</literal><operator pos:start="2005:32" pos:end="2005:32">)</operator> <operator pos:start="2005:34" pos:end="2005:34">|</operator> <name pos:start="2005:36" pos:end="2005:40">rex_r</name></expr>;</expr_stmt>



        <comment type="block" pos:start="2009:9" pos:end="2009:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="2011:9" pos:end="2011:45"><expr pos:start="2011:9" pos:end="2011:44"><call pos:start="2011:9" pos:end="2011:44"><name pos:start="2011:9" pos:end="2011:22">gen_ldst_modrm</name><argument_list pos:start="2011:23" pos:end="2011:44">(<argument pos:start="2011:24" pos:end="2011:24"><expr pos:start="2011:24" pos:end="2011:24"><name pos:start="2011:24" pos:end="2011:24">s</name></expr></argument>, <argument pos:start="2011:27" pos:end="2011:31"><expr pos:start="2011:27" pos:end="2011:31"><name pos:start="2011:27" pos:end="2011:31">modrm</name></expr></argument>, <argument pos:start="2011:34" pos:end="2011:35"><expr pos:start="2011:34" pos:end="2011:35"><name pos:start="2011:34" pos:end="2011:35">ot</name></expr></argument>, <argument pos:start="2011:38" pos:end="2011:40"><expr pos:start="2011:38" pos:end="2011:40"><name pos:start="2011:38" pos:end="2011:40">reg</name></expr></argument>, <argument pos:start="2011:43" pos:end="2011:43"><expr pos:start="2011:43" pos:end="2011:43"><literal type="number" pos:start="2011:43" pos:end="2011:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2013:9" pos:end="2013:14">break;</break>

    <case pos:start="2015:5" pos:end="2015:14">case <expr pos:start="2015:10" pos:end="2015:13"><literal type="number" pos:start="2015:10" pos:end="2015:13">0xc6</literal></expr>:</case>

    <case pos:start="2017:5" pos:end="2017:14">case <expr pos:start="2017:10" pos:end="2017:13"><literal type="number" pos:start="2017:10" pos:end="2017:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="2017:16" pos:end="2017:31">/* mov Ev, Iv */</comment>

        <if_stmt pos:start="2019:9" pos:end="2025:33"><if pos:start="2019:9" pos:end="2021:25">if <condition pos:start="2019:12" pos:end="2019:25">(<expr pos:start="2019:13" pos:end="2019:24"><operator pos:start="2019:13" pos:end="2019:13">(</operator><name pos:start="2019:14" pos:end="2019:14">b</name> <operator pos:start="2019:16" pos:end="2019:16">&amp;</operator> <literal type="number" pos:start="2019:18" pos:end="2019:18">1</literal><operator pos:start="2019:19" pos:end="2019:19">)</operator> <operator pos:start="2019:21" pos:end="2019:22">==</operator> <literal type="number" pos:start="2019:24" pos:end="2019:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2021:13" pos:end="2021:25"><block_content pos:start="2021:13" pos:end="2021:25">

            <expr_stmt pos:start="2021:13" pos:end="2021:25"><expr pos:start="2021:13" pos:end="2021:24"><name pos:start="2021:13" pos:end="2021:14">ot</name> <operator pos:start="2021:16" pos:end="2021:16">=</operator> <name pos:start="2021:18" pos:end="2021:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2023:9" pos:end="2025:33">else<block type="pseudo" pos:start="2025:13" pos:end="2025:33"><block_content pos:start="2025:13" pos:end="2025:33">

            <expr_stmt pos:start="2025:13" pos:end="2025:33"><expr pos:start="2025:13" pos:end="2025:32"><name pos:start="2025:13" pos:end="2025:14">ot</name> <operator pos:start="2025:16" pos:end="2025:16">=</operator> <name pos:start="2025:18" pos:end="2025:22">dflag</name> <operator pos:start="2025:24" pos:end="2025:24">+</operator> <name pos:start="2025:26" pos:end="2025:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2027:9" pos:end="2027:35"><expr pos:start="2027:9" pos:end="2027:34"><name pos:start="2027:9" pos:end="2027:13">modrm</name> <operator pos:start="2027:15" pos:end="2027:15">=</operator> <call pos:start="2027:17" pos:end="2027:34"><name pos:start="2027:17" pos:end="2027:25">ldub_code</name><argument_list pos:start="2027:26" pos:end="2027:34">(<argument pos:start="2027:27" pos:end="2027:33"><expr pos:start="2027:27" pos:end="2027:33"><name pos:start="2027:27" pos:end="2027:31"><name pos:start="2027:27" pos:end="2027:27">s</name><operator pos:start="2027:28" pos:end="2027:29">-&gt;</operator><name pos:start="2027:30" pos:end="2027:31">pc</name></name><operator pos:start="2027:32" pos:end="2027:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2029:9" pos:end="2029:31"><expr pos:start="2029:9" pos:end="2029:30"><name pos:start="2029:9" pos:end="2029:11">mod</name> <operator pos:start="2029:13" pos:end="2029:13">=</operator> <operator pos:start="2029:15" pos:end="2029:15">(</operator><name pos:start="2029:16" pos:end="2029:20">modrm</name> <operator pos:start="2029:22" pos:end="2029:23">&gt;&gt;</operator> <literal type="number" pos:start="2029:25" pos:end="2029:25">6</literal><operator pos:start="2029:26" pos:end="2029:26">)</operator> <operator pos:start="2029:28" pos:end="2029:28">&amp;</operator> <literal type="number" pos:start="2029:30" pos:end="2029:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2031:9" pos:end="2037:9"><if pos:start="2031:9" pos:end="2037:9">if <condition pos:start="2031:12" pos:end="2031:21">(<expr pos:start="2031:13" pos:end="2031:20"><name pos:start="2031:13" pos:end="2031:15">mod</name> <operator pos:start="2031:17" pos:end="2031:18">!=</operator> <literal type="number" pos:start="2031:20" pos:end="2031:20">3</literal></expr>)</condition> <block pos:start="2031:23" pos:end="2037:9">{<block_content pos:start="2033:13" pos:end="2035:61">

            <expr_stmt pos:start="2033:13" pos:end="2033:48"><expr pos:start="2033:13" pos:end="2033:47"><name pos:start="2033:13" pos:end="2033:25"><name pos:start="2033:13" pos:end="2033:13">s</name><operator pos:start="2033:14" pos:end="2033:15">-&gt;</operator><name pos:start="2033:16" pos:end="2033:25">rip_offset</name></name> <operator pos:start="2033:27" pos:end="2033:27">=</operator> <call pos:start="2033:29" pos:end="2033:47"><name pos:start="2033:29" pos:end="2033:43">insn_const_size</name><argument_list pos:start="2033:44" pos:end="2033:47">(<argument pos:start="2033:45" pos:end="2033:46"><expr pos:start="2033:45" pos:end="2033:46"><name pos:start="2033:45" pos:end="2033:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2035:13" pos:end="2035:61"><expr pos:start="2035:13" pos:end="2035:60"><call pos:start="2035:13" pos:end="2035:60"><name pos:start="2035:13" pos:end="2035:25">gen_lea_modrm</name><argument_list pos:start="2035:26" pos:end="2035:60">(<argument pos:start="2035:27" pos:end="2035:27"><expr pos:start="2035:27" pos:end="2035:27"><name pos:start="2035:27" pos:end="2035:27">s</name></expr></argument>, <argument pos:start="2035:30" pos:end="2035:34"><expr pos:start="2035:30" pos:end="2035:34"><name pos:start="2035:30" pos:end="2035:34">modrm</name></expr></argument>, <argument pos:start="2035:37" pos:end="2035:45"><expr pos:start="2035:37" pos:end="2035:45"><operator pos:start="2035:37" pos:end="2035:37">&amp;</operator><name pos:start="2035:38" pos:end="2035:45">reg_addr</name></expr></argument>, <argument pos:start="2035:48" pos:end="2035:59"><expr pos:start="2035:48" pos:end="2035:59"><operator pos:start="2035:48" pos:end="2035:48">&amp;</operator><name pos:start="2035:49" pos:end="2035:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2039:9" pos:end="2039:30"><expr pos:start="2039:9" pos:end="2039:29"><name pos:start="2039:9" pos:end="2039:11">val</name> <operator pos:start="2039:13" pos:end="2039:13">=</operator> <call pos:start="2039:15" pos:end="2039:29"><name pos:start="2039:15" pos:end="2039:22">insn_get</name><argument_list pos:start="2039:23" pos:end="2039:29">(<argument pos:start="2039:24" pos:end="2039:24"><expr pos:start="2039:24" pos:end="2039:24"><name pos:start="2039:24" pos:end="2039:24">s</name></expr></argument>, <argument pos:start="2039:27" pos:end="2039:28"><expr pos:start="2039:27" pos:end="2039:28"><name pos:start="2039:27" pos:end="2039:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2041:9" pos:end="2041:31"><expr pos:start="2041:9" pos:end="2041:30"><call pos:start="2041:9" pos:end="2041:30"><name pos:start="2041:9" pos:end="2041:25">gen_op_movl_T0_im</name><argument_list pos:start="2041:26" pos:end="2041:30">(<argument pos:start="2041:27" pos:end="2041:29"><expr pos:start="2041:27" pos:end="2041:29"><name pos:start="2041:27" pos:end="2041:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2043:9" pos:end="2049:58"><if pos:start="2043:9" pos:end="2045:47">if <condition pos:start="2043:12" pos:end="2043:21">(<expr pos:start="2043:13" pos:end="2043:20"><name pos:start="2043:13" pos:end="2043:15">mod</name> <operator pos:start="2043:17" pos:end="2043:18">!=</operator> <literal type="number" pos:start="2043:20" pos:end="2043:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2045:13" pos:end="2045:47"><block_content pos:start="2045:13" pos:end="2045:47">

            <expr_stmt pos:start="2045:13" pos:end="2045:47"><expr pos:start="2045:13" pos:end="2045:46"><call pos:start="2045:13" pos:end="2045:46"><name pos:start="2045:13" pos:end="2045:27">gen_op_st_T0_A0</name><argument_list pos:start="2045:28" pos:end="2045:46">(<argument pos:start="2045:29" pos:end="2045:45"><expr pos:start="2045:29" pos:end="2045:45"><name pos:start="2045:29" pos:end="2045:30">ot</name> <operator pos:start="2045:32" pos:end="2045:32">+</operator> <name pos:start="2045:34" pos:end="2045:45"><name pos:start="2045:34" pos:end="2045:34">s</name><operator pos:start="2045:35" pos:end="2045:36">-&gt;</operator><name pos:start="2045:37" pos:end="2045:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2047:9" pos:end="2049:58">else<block type="pseudo" pos:start="2049:13" pos:end="2049:58"><block_content pos:start="2049:13" pos:end="2049:58">

            <expr_stmt pos:start="2049:13" pos:end="2049:58"><expr pos:start="2049:13" pos:end="2049:57"><call pos:start="2049:13" pos:end="2049:57"><name pos:start="2049:13" pos:end="2049:29">gen_op_mov_reg_T0</name><argument_list pos:start="2049:30" pos:end="2049:57">(<argument pos:start="2049:31" pos:end="2049:32"><expr pos:start="2049:31" pos:end="2049:32"><name pos:start="2049:31" pos:end="2049:32">ot</name></expr></argument>, <argument pos:start="2049:35" pos:end="2049:56"><expr pos:start="2049:35" pos:end="2049:56"><operator pos:start="2049:35" pos:end="2049:35">(</operator><name pos:start="2049:36" pos:end="2049:40">modrm</name> <operator pos:start="2049:42" pos:end="2049:42">&amp;</operator> <literal type="number" pos:start="2049:44" pos:end="2049:44">7</literal><operator pos:start="2049:45" pos:end="2049:45">)</operator> <operator pos:start="2049:47" pos:end="2049:47">|</operator> <call pos:start="2049:49" pos:end="2049:56"><name pos:start="2049:49" pos:end="2049:53">REX_B</name><argument_list pos:start="2049:54" pos:end="2049:56">(<argument pos:start="2049:55" pos:end="2049:55"><expr pos:start="2049:55" pos:end="2049:55"><name pos:start="2049:55" pos:end="2049:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="2051:9" pos:end="2051:14">break;</break>

    <case pos:start="2053:5" pos:end="2053:14">case <expr pos:start="2053:10" pos:end="2053:13"><literal type="number" pos:start="2053:10" pos:end="2053:13">0x8a</literal></expr>:</case>

    <case pos:start="2055:5" pos:end="2055:14">case <expr pos:start="2055:10" pos:end="2055:13"><literal type="number" pos:start="2055:10" pos:end="2055:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="2055:16" pos:end="2055:31">/* mov Ev, Gv */</comment>

        <if_stmt pos:start="2057:9" pos:end="2063:33"><if pos:start="2057:9" pos:end="2059:25">if <condition pos:start="2057:12" pos:end="2057:25">(<expr pos:start="2057:13" pos:end="2057:24"><operator pos:start="2057:13" pos:end="2057:13">(</operator><name pos:start="2057:14" pos:end="2057:14">b</name> <operator pos:start="2057:16" pos:end="2057:16">&amp;</operator> <literal type="number" pos:start="2057:18" pos:end="2057:18">1</literal><operator pos:start="2057:19" pos:end="2057:19">)</operator> <operator pos:start="2057:21" pos:end="2057:22">==</operator> <literal type="number" pos:start="2057:24" pos:end="2057:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2059:13" pos:end="2059:25"><block_content pos:start="2059:13" pos:end="2059:25">

            <expr_stmt pos:start="2059:13" pos:end="2059:25"><expr pos:start="2059:13" pos:end="2059:24"><name pos:start="2059:13" pos:end="2059:14">ot</name> <operator pos:start="2059:16" pos:end="2059:16">=</operator> <name pos:start="2059:18" pos:end="2059:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2061:9" pos:end="2063:33">else<block type="pseudo" pos:start="2063:13" pos:end="2063:33"><block_content pos:start="2063:13" pos:end="2063:33">

            <expr_stmt pos:start="2063:13" pos:end="2063:33"><expr pos:start="2063:13" pos:end="2063:32"><name pos:start="2063:13" pos:end="2063:14">ot</name> <operator pos:start="2063:16" pos:end="2063:16">=</operator> <name pos:start="2063:18" pos:end="2063:24">OT_WORD</name> <operator pos:start="2063:26" pos:end="2063:26">+</operator> <name pos:start="2063:28" pos:end="2063:32">dflag</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2065:9" pos:end="2065:35"><expr pos:start="2065:9" pos:end="2065:34"><name pos:start="2065:9" pos:end="2065:13">modrm</name> <operator pos:start="2065:15" pos:end="2065:15">=</operator> <call pos:start="2065:17" pos:end="2065:34"><name pos:start="2065:17" pos:end="2065:25">ldub_code</name><argument_list pos:start="2065:26" pos:end="2065:34">(<argument pos:start="2065:27" pos:end="2065:33"><expr pos:start="2065:27" pos:end="2065:33"><name pos:start="2065:27" pos:end="2065:31"><name pos:start="2065:27" pos:end="2065:27">s</name><operator pos:start="2065:28" pos:end="2065:29">-&gt;</operator><name pos:start="2065:30" pos:end="2065:31">pc</name></name><operator pos:start="2065:32" pos:end="2065:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2067:9" pos:end="2067:41"><expr pos:start="2067:9" pos:end="2067:40"><name pos:start="2067:9" pos:end="2067:11">reg</name> <operator pos:start="2067:13" pos:end="2067:13">=</operator> <operator pos:start="2067:15" pos:end="2067:15">(</operator><operator pos:start="2067:16" pos:end="2067:16">(</operator><name pos:start="2067:17" pos:end="2067:21">modrm</name> <operator pos:start="2067:23" pos:end="2067:24">&gt;&gt;</operator> <literal type="number" pos:start="2067:26" pos:end="2067:26">3</literal><operator pos:start="2067:27" pos:end="2067:27">)</operator> <operator pos:start="2067:29" pos:end="2067:29">&amp;</operator> <literal type="number" pos:start="2067:31" pos:end="2067:31">7</literal><operator pos:start="2067:32" pos:end="2067:32">)</operator> <operator pos:start="2067:34" pos:end="2067:34">|</operator> <name pos:start="2067:36" pos:end="2067:40">rex_r</name></expr>;</expr_stmt>



        <expr_stmt pos:start="2071:9" pos:end="2071:49"><expr pos:start="2071:9" pos:end="2071:48"><call pos:start="2071:9" pos:end="2071:48"><name pos:start="2071:9" pos:end="2071:22">gen_ldst_modrm</name><argument_list pos:start="2071:23" pos:end="2071:48">(<argument pos:start="2071:24" pos:end="2071:24"><expr pos:start="2071:24" pos:end="2071:24"><name pos:start="2071:24" pos:end="2071:24">s</name></expr></argument>, <argument pos:start="2071:27" pos:end="2071:31"><expr pos:start="2071:27" pos:end="2071:31"><name pos:start="2071:27" pos:end="2071:31">modrm</name></expr></argument>, <argument pos:start="2071:34" pos:end="2071:35"><expr pos:start="2071:34" pos:end="2071:35"><name pos:start="2071:34" pos:end="2071:35">ot</name></expr></argument>, <argument pos:start="2071:38" pos:end="2071:44"><expr pos:start="2071:38" pos:end="2071:44"><name pos:start="2071:38" pos:end="2071:44">OR_TMP0</name></expr></argument>, <argument pos:start="2071:47" pos:end="2071:47"><expr pos:start="2071:47" pos:end="2071:47"><literal type="number" pos:start="2071:47" pos:end="2071:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2073:9" pos:end="2073:35"><expr pos:start="2073:9" pos:end="2073:34"><call pos:start="2073:9" pos:end="2073:34"><name pos:start="2073:9" pos:end="2073:25">gen_op_mov_reg_T0</name><argument_list pos:start="2073:26" pos:end="2073:34">(<argument pos:start="2073:27" pos:end="2073:28"><expr pos:start="2073:27" pos:end="2073:28"><name pos:start="2073:27" pos:end="2073:28">ot</name></expr></argument>, <argument pos:start="2073:31" pos:end="2073:33"><expr pos:start="2073:31" pos:end="2073:33"><name pos:start="2073:31" pos:end="2073:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2075:9" pos:end="2075:14">break;</break>

    <case pos:start="2077:5" pos:end="2077:14">case <expr pos:start="2077:10" pos:end="2077:13"><literal type="number" pos:start="2077:10" pos:end="2077:13">0x8e</literal></expr>:</case> <comment type="block" pos:start="2077:16" pos:end="2077:32">/* mov seg, Gv */</comment>

        <expr_stmt pos:start="2079:9" pos:end="2079:35"><expr pos:start="2079:9" pos:end="2079:34"><name pos:start="2079:9" pos:end="2079:13">modrm</name> <operator pos:start="2079:15" pos:end="2079:15">=</operator> <call pos:start="2079:17" pos:end="2079:34"><name pos:start="2079:17" pos:end="2079:25">ldub_code</name><argument_list pos:start="2079:26" pos:end="2079:34">(<argument pos:start="2079:27" pos:end="2079:33"><expr pos:start="2079:27" pos:end="2079:33"><name pos:start="2079:27" pos:end="2079:31"><name pos:start="2079:27" pos:end="2079:27">s</name><operator pos:start="2079:28" pos:end="2079:29">-&gt;</operator><name pos:start="2079:30" pos:end="2079:31">pc</name></name><operator pos:start="2079:32" pos:end="2079:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2081:9" pos:end="2081:31"><expr pos:start="2081:9" pos:end="2081:30"><name pos:start="2081:9" pos:end="2081:11">reg</name> <operator pos:start="2081:13" pos:end="2081:13">=</operator> <operator pos:start="2081:15" pos:end="2081:15">(</operator><name pos:start="2081:16" pos:end="2081:20">modrm</name> <operator pos:start="2081:22" pos:end="2081:23">&gt;&gt;</operator> <literal type="number" pos:start="2081:25" pos:end="2081:25">3</literal><operator pos:start="2081:26" pos:end="2081:26">)</operator> <operator pos:start="2081:28" pos:end="2081:28">&amp;</operator> <literal type="number" pos:start="2081:30" pos:end="2081:30">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2083:9" pos:end="2085:28"><if pos:start="2083:9" pos:end="2085:28">if <condition pos:start="2083:12" pos:end="2083:36">(<expr pos:start="2083:13" pos:end="2083:35"><name pos:start="2083:13" pos:end="2083:15">reg</name> <operator pos:start="2083:17" pos:end="2083:18">&gt;=</operator> <literal type="number" pos:start="2083:20" pos:end="2083:20">6</literal> <operator pos:start="2083:22" pos:end="2083:23">||</operator> <name pos:start="2083:25" pos:end="2083:27">reg</name> <operator pos:start="2083:29" pos:end="2083:30">==</operator> <name pos:start="2083:32" pos:end="2083:35">R_CS</name></expr>)</condition><block type="pseudo" pos:start="2085:13" pos:end="2085:28"><block_content pos:start="2085:13" pos:end="2085:28">

            <goto pos:start="2085:13" pos:end="2085:28">goto <name pos:start="2085:18" pos:end="2085:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2087:9" pos:end="2087:54"><expr pos:start="2087:9" pos:end="2087:53"><call pos:start="2087:9" pos:end="2087:53"><name pos:start="2087:9" pos:end="2087:22">gen_ldst_modrm</name><argument_list pos:start="2087:23" pos:end="2087:53">(<argument pos:start="2087:24" pos:end="2087:24"><expr pos:start="2087:24" pos:end="2087:24"><name pos:start="2087:24" pos:end="2087:24">s</name></expr></argument>, <argument pos:start="2087:27" pos:end="2087:31"><expr pos:start="2087:27" pos:end="2087:31"><name pos:start="2087:27" pos:end="2087:31">modrm</name></expr></argument>, <argument pos:start="2087:34" pos:end="2087:40"><expr pos:start="2087:34" pos:end="2087:40"><name pos:start="2087:34" pos:end="2087:40">OT_WORD</name></expr></argument>, <argument pos:start="2087:43" pos:end="2087:49"><expr pos:start="2087:43" pos:end="2087:49"><name pos:start="2087:43" pos:end="2087:49">OR_TMP0</name></expr></argument>, <argument pos:start="2087:52" pos:end="2087:52"><expr pos:start="2087:52" pos:end="2087:52"><literal type="number" pos:start="2087:52" pos:end="2087:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2089:9" pos:end="2089:55"><expr pos:start="2089:9" pos:end="2089:54"><call pos:start="2089:9" pos:end="2089:54"><name pos:start="2089:9" pos:end="2089:23">gen_movl_seg_T0</name><argument_list pos:start="2089:24" pos:end="2089:54">(<argument pos:start="2089:25" pos:end="2089:25"><expr pos:start="2089:25" pos:end="2089:25"><name pos:start="2089:25" pos:end="2089:25">s</name></expr></argument>, <argument pos:start="2089:28" pos:end="2089:30"><expr pos:start="2089:28" pos:end="2089:30"><name pos:start="2089:28" pos:end="2089:30">reg</name></expr></argument>, <argument pos:start="2089:33" pos:end="2089:53"><expr pos:start="2089:33" pos:end="2089:53"><name pos:start="2089:33" pos:end="2089:40">pc_start</name> <operator pos:start="2089:42" pos:end="2089:42">-</operator> <name pos:start="2089:44" pos:end="2089:53"><name pos:start="2089:44" pos:end="2089:44">s</name><operator pos:start="2089:45" pos:end="2089:46">-&gt;</operator><name pos:start="2089:47" pos:end="2089:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2091:9" pos:end="2105:9"><if pos:start="2091:9" pos:end="2105:9">if <condition pos:start="2091:12" pos:end="2091:24">(<expr pos:start="2091:13" pos:end="2091:23"><name pos:start="2091:13" pos:end="2091:15">reg</name> <operator pos:start="2091:17" pos:end="2091:18">==</operator> <name pos:start="2091:20" pos:end="2091:23">R_SS</name></expr>)</condition> <block pos:start="2091:26" pos:end="2105:9">{<block_content pos:start="2099:13" pos:end="2103:22">

            <comment type="block" pos:start="2093:13" pos:end="2093:56">/* if reg == SS, inhibit interrupts/trace */</comment>

            <comment type="block" pos:start="2095:13" pos:end="2097:33">/* If several instructions disable interrupts, only the

               _first_ does it */</comment>

            <if_stmt pos:start="2099:13" pos:end="2101:45"><if pos:start="2099:13" pos:end="2101:45">if <condition pos:start="2099:16" pos:end="2099:54">(<expr pos:start="2099:17" pos:end="2099:53"><operator pos:start="2099:17" pos:end="2099:17">!</operator><operator pos:start="2099:18" pos:end="2099:18">(</operator><name pos:start="2099:19" pos:end="2099:30"><name pos:start="2099:19" pos:end="2099:19">s</name><operator pos:start="2099:20" pos:end="2099:21">-&gt;</operator><name pos:start="2099:22" pos:end="2099:23">tb</name><operator pos:start="2099:24" pos:end="2099:25">-&gt;</operator><name pos:start="2099:26" pos:end="2099:30">flags</name></name> <operator pos:start="2099:32" pos:end="2099:32">&amp;</operator> <name pos:start="2099:34" pos:end="2099:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="2099:53" pos:end="2099:53">)</operator></expr>)</condition><block type="pseudo" pos:start="2101:17" pos:end="2101:45"><block_content pos:start="2101:17" pos:end="2101:45">

                <expr_stmt pos:start="2101:17" pos:end="2101:45"><expr pos:start="2101:17" pos:end="2101:44"><call pos:start="2101:17" pos:end="2101:44"><name pos:start="2101:17" pos:end="2101:42">gen_helper_set_inhibit_irq</name><argument_list pos:start="2101:43" pos:end="2101:44">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2103:13" pos:end="2103:22"><expr pos:start="2103:13" pos:end="2103:21"><name pos:start="2103:13" pos:end="2103:17"><name pos:start="2103:13" pos:end="2103:13">s</name><operator pos:start="2103:14" pos:end="2103:15">-&gt;</operator><name pos:start="2103:16" pos:end="2103:17">tf</name></name> <operator pos:start="2103:19" pos:end="2103:19">=</operator> <literal type="number" pos:start="2103:21" pos:end="2103:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="2107:9" pos:end="2113:9"><if pos:start="2107:9" pos:end="2113:9">if <condition pos:start="2107:12" pos:end="2107:22">(<expr pos:start="2107:13" pos:end="2107:21"><name pos:start="2107:13" pos:end="2107:21"><name pos:start="2107:13" pos:end="2107:13">s</name><operator pos:start="2107:14" pos:end="2107:15">-&gt;</operator><name pos:start="2107:16" pos:end="2107:21">is_jmp</name></name></expr>)</condition> <block pos:start="2107:24" pos:end="2113:9">{<block_content pos:start="2109:13" pos:end="2111:23">

            <expr_stmt pos:start="2109:13" pos:end="2109:43"><expr pos:start="2109:13" pos:end="2109:42"><call pos:start="2109:13" pos:end="2109:42"><name pos:start="2109:13" pos:end="2109:22">gen_jmp_im</name><argument_list pos:start="2109:23" pos:end="2109:42">(<argument pos:start="2109:24" pos:end="2109:41"><expr pos:start="2109:24" pos:end="2109:41"><name pos:start="2109:24" pos:end="2109:28"><name pos:start="2109:24" pos:end="2109:24">s</name><operator pos:start="2109:25" pos:end="2109:26">-&gt;</operator><name pos:start="2109:27" pos:end="2109:28">pc</name></name> <operator pos:start="2109:30" pos:end="2109:30">-</operator> <name pos:start="2109:32" pos:end="2109:41"><name pos:start="2109:32" pos:end="2109:32">s</name><operator pos:start="2109:33" pos:end="2109:34">-&gt;</operator><name pos:start="2109:35" pos:end="2109:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2111:13" pos:end="2111:23"><expr pos:start="2111:13" pos:end="2111:22"><call pos:start="2111:13" pos:end="2111:22"><name pos:start="2111:13" pos:end="2111:19">gen_eob</name><argument_list pos:start="2111:20" pos:end="2111:22">(<argument pos:start="2111:21" pos:end="2111:21"><expr pos:start="2111:21" pos:end="2111:21"><name pos:start="2111:21" pos:end="2111:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2115:9" pos:end="2115:14">break;</break>

    <case pos:start="2117:5" pos:end="2117:14">case <expr pos:start="2117:10" pos:end="2117:13"><literal type="number" pos:start="2117:10" pos:end="2117:13">0x8c</literal></expr>:</case> <comment type="block" pos:start="2117:16" pos:end="2117:32">/* mov Gv, seg */</comment>

        <expr_stmt pos:start="2119:9" pos:end="2119:35"><expr pos:start="2119:9" pos:end="2119:34"><name pos:start="2119:9" pos:end="2119:13">modrm</name> <operator pos:start="2119:15" pos:end="2119:15">=</operator> <call pos:start="2119:17" pos:end="2119:34"><name pos:start="2119:17" pos:end="2119:25">ldub_code</name><argument_list pos:start="2119:26" pos:end="2119:34">(<argument pos:start="2119:27" pos:end="2119:33"><expr pos:start="2119:27" pos:end="2119:33"><name pos:start="2119:27" pos:end="2119:31"><name pos:start="2119:27" pos:end="2119:27">s</name><operator pos:start="2119:28" pos:end="2119:29">-&gt;</operator><name pos:start="2119:30" pos:end="2119:31">pc</name></name><operator pos:start="2119:32" pos:end="2119:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2121:9" pos:end="2121:31"><expr pos:start="2121:9" pos:end="2121:30"><name pos:start="2121:9" pos:end="2121:11">reg</name> <operator pos:start="2121:13" pos:end="2121:13">=</operator> <operator pos:start="2121:15" pos:end="2121:15">(</operator><name pos:start="2121:16" pos:end="2121:20">modrm</name> <operator pos:start="2121:22" pos:end="2121:23">&gt;&gt;</operator> <literal type="number" pos:start="2121:25" pos:end="2121:25">3</literal><operator pos:start="2121:26" pos:end="2121:26">)</operator> <operator pos:start="2121:28" pos:end="2121:28">&amp;</operator> <literal type="number" pos:start="2121:30" pos:end="2121:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2123:9" pos:end="2123:31"><expr pos:start="2123:9" pos:end="2123:30"><name pos:start="2123:9" pos:end="2123:11">mod</name> <operator pos:start="2123:13" pos:end="2123:13">=</operator> <operator pos:start="2123:15" pos:end="2123:15">(</operator><name pos:start="2123:16" pos:end="2123:20">modrm</name> <operator pos:start="2123:22" pos:end="2123:23">&gt;&gt;</operator> <literal type="number" pos:start="2123:25" pos:end="2123:25">6</literal><operator pos:start="2123:26" pos:end="2123:26">)</operator> <operator pos:start="2123:28" pos:end="2123:28">&amp;</operator> <literal type="number" pos:start="2123:30" pos:end="2123:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2125:9" pos:end="2127:28"><if pos:start="2125:9" pos:end="2127:28">if <condition pos:start="2125:12" pos:end="2125:21">(<expr pos:start="2125:13" pos:end="2125:20"><name pos:start="2125:13" pos:end="2125:15">reg</name> <operator pos:start="2125:17" pos:end="2125:18">&gt;=</operator> <literal type="number" pos:start="2125:20" pos:end="2125:20">6</literal></expr>)</condition><block type="pseudo" pos:start="2127:13" pos:end="2127:28"><block_content pos:start="2127:13" pos:end="2127:28">

            <goto pos:start="2127:13" pos:end="2127:28">goto <name pos:start="2127:18" pos:end="2127:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2129:9" pos:end="2129:32"><expr pos:start="2129:9" pos:end="2129:31"><call pos:start="2129:9" pos:end="2129:31"><name pos:start="2129:9" pos:end="2129:26">gen_op_movl_T0_seg</name><argument_list pos:start="2129:27" pos:end="2129:31">(<argument pos:start="2129:28" pos:end="2129:30"><expr pos:start="2129:28" pos:end="2129:30"><name pos:start="2129:28" pos:end="2129:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2131:9" pos:end="2137:25"><if pos:start="2131:9" pos:end="2133:33">if <condition pos:start="2131:12" pos:end="2131:21">(<expr pos:start="2131:13" pos:end="2131:20"><name pos:start="2131:13" pos:end="2131:15">mod</name> <operator pos:start="2131:17" pos:end="2131:18">==</operator> <literal type="number" pos:start="2131:20" pos:end="2131:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2133:13" pos:end="2133:33"><block_content pos:start="2133:13" pos:end="2133:33">

            <expr_stmt pos:start="2133:13" pos:end="2133:33"><expr pos:start="2133:13" pos:end="2133:32"><name pos:start="2133:13" pos:end="2133:14">ot</name> <operator pos:start="2133:16" pos:end="2133:16">=</operator> <name pos:start="2133:18" pos:end="2133:24">OT_WORD</name> <operator pos:start="2133:26" pos:end="2133:26">+</operator> <name pos:start="2133:28" pos:end="2133:32">dflag</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2135:9" pos:end="2137:25">else<block type="pseudo" pos:start="2137:13" pos:end="2137:25"><block_content pos:start="2137:13" pos:end="2137:25">

            <expr_stmt pos:start="2137:13" pos:end="2137:25"><expr pos:start="2137:13" pos:end="2137:24"><name pos:start="2137:13" pos:end="2137:14">ot</name> <operator pos:start="2137:16" pos:end="2137:16">=</operator> <name pos:start="2137:18" pos:end="2137:24">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2139:9" pos:end="2139:49"><expr pos:start="2139:9" pos:end="2139:48"><call pos:start="2139:9" pos:end="2139:48"><name pos:start="2139:9" pos:end="2139:22">gen_ldst_modrm</name><argument_list pos:start="2139:23" pos:end="2139:48">(<argument pos:start="2139:24" pos:end="2139:24"><expr pos:start="2139:24" pos:end="2139:24"><name pos:start="2139:24" pos:end="2139:24">s</name></expr></argument>, <argument pos:start="2139:27" pos:end="2139:31"><expr pos:start="2139:27" pos:end="2139:31"><name pos:start="2139:27" pos:end="2139:31">modrm</name></expr></argument>, <argument pos:start="2139:34" pos:end="2139:35"><expr pos:start="2139:34" pos:end="2139:35"><name pos:start="2139:34" pos:end="2139:35">ot</name></expr></argument>, <argument pos:start="2139:38" pos:end="2139:44"><expr pos:start="2139:38" pos:end="2139:44"><name pos:start="2139:38" pos:end="2139:44">OR_TMP0</name></expr></argument>, <argument pos:start="2139:47" pos:end="2139:47"><expr pos:start="2139:47" pos:end="2139:47"><literal type="number" pos:start="2139:47" pos:end="2139:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2141:9" pos:end="2141:14">break;</break>



    <case pos:start="2145:5" pos:end="2145:15">case <expr pos:start="2145:10" pos:end="2145:14"><literal type="number" pos:start="2145:10" pos:end="2145:14">0x1b6</literal></expr>:</case> <comment type="block" pos:start="2145:17" pos:end="2145:35">/* movzbS Gv, Eb */</comment>

    <case pos:start="2147:5" pos:end="2147:15">case <expr pos:start="2147:10" pos:end="2147:14"><literal type="number" pos:start="2147:10" pos:end="2147:14">0x1b7</literal></expr>:</case> <comment type="block" pos:start="2147:17" pos:end="2147:35">/* movzwS Gv, Eb */</comment>

    <case pos:start="2149:5" pos:end="2149:15">case <expr pos:start="2149:10" pos:end="2149:14"><literal type="number" pos:start="2149:10" pos:end="2149:14">0x1be</literal></expr>:</case> <comment type="block" pos:start="2149:17" pos:end="2149:35">/* movsbS Gv, Eb */</comment>

    <case pos:start="2151:5" pos:end="2151:15">case <expr pos:start="2151:10" pos:end="2151:14"><literal type="number" pos:start="2151:10" pos:end="2151:14">0x1bf</literal></expr>:</case> <comment type="block" pos:start="2151:17" pos:end="2151:35">/* movswS Gv, Eb */</comment>

        <block pos:start="2153:9" pos:end="2229:9">{<block_content pos:start="2155:13" pos:end="2227:13">

            <decl_stmt pos:start="2155:13" pos:end="2155:21"><decl pos:start="2155:13" pos:end="2155:20"><type pos:start="2155:13" pos:end="2155:15"><name pos:start="2155:13" pos:end="2155:15">int</name></type> <name pos:start="2155:17" pos:end="2155:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="2157:13" pos:end="2157:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="2159:13" pos:end="2159:35"><expr pos:start="2159:13" pos:end="2159:34"><name pos:start="2159:13" pos:end="2159:16">d_ot</name> <operator pos:start="2159:18" pos:end="2159:18">=</operator> <name pos:start="2159:20" pos:end="2159:24">dflag</name> <operator pos:start="2159:26" pos:end="2159:26">+</operator> <name pos:start="2159:28" pos:end="2159:34">OT_WORD</name></expr>;</expr_stmt>

            <comment type="block" pos:start="2161:13" pos:end="2161:42">/* ot is the size of source */</comment>

            <expr_stmt pos:start="2163:13" pos:end="2163:35"><expr pos:start="2163:13" pos:end="2163:34"><name pos:start="2163:13" pos:end="2163:14">ot</name> <operator pos:start="2163:16" pos:end="2163:16">=</operator> <operator pos:start="2163:18" pos:end="2163:18">(</operator><name pos:start="2163:19" pos:end="2163:19">b</name> <operator pos:start="2163:21" pos:end="2163:21">&amp;</operator> <literal type="number" pos:start="2163:23" pos:end="2163:23">1</literal><operator pos:start="2163:24" pos:end="2163:24">)</operator> <operator pos:start="2163:26" pos:end="2163:26">+</operator> <name pos:start="2163:28" pos:end="2163:34">OT_BYTE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2165:13" pos:end="2165:39"><expr pos:start="2165:13" pos:end="2165:38"><name pos:start="2165:13" pos:end="2165:17">modrm</name> <operator pos:start="2165:19" pos:end="2165:19">=</operator> <call pos:start="2165:21" pos:end="2165:38"><name pos:start="2165:21" pos:end="2165:29">ldub_code</name><argument_list pos:start="2165:30" pos:end="2165:38">(<argument pos:start="2165:31" pos:end="2165:37"><expr pos:start="2165:31" pos:end="2165:37"><name pos:start="2165:31" pos:end="2165:35"><name pos:start="2165:31" pos:end="2165:31">s</name><operator pos:start="2165:32" pos:end="2165:33">-&gt;</operator><name pos:start="2165:34" pos:end="2165:35">pc</name></name><operator pos:start="2165:36" pos:end="2165:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2167:13" pos:end="2167:45"><expr pos:start="2167:13" pos:end="2167:44"><name pos:start="2167:13" pos:end="2167:15">reg</name> <operator pos:start="2167:17" pos:end="2167:17">=</operator> <operator pos:start="2167:19" pos:end="2167:19">(</operator><operator pos:start="2167:20" pos:end="2167:20">(</operator><name pos:start="2167:21" pos:end="2167:25">modrm</name> <operator pos:start="2167:27" pos:end="2167:28">&gt;&gt;</operator> <literal type="number" pos:start="2167:30" pos:end="2167:30">3</literal><operator pos:start="2167:31" pos:end="2167:31">)</operator> <operator pos:start="2167:33" pos:end="2167:33">&amp;</operator> <literal type="number" pos:start="2167:35" pos:end="2167:35">7</literal><operator pos:start="2167:36" pos:end="2167:36">)</operator> <operator pos:start="2167:38" pos:end="2167:38">|</operator> <name pos:start="2167:40" pos:end="2167:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2169:13" pos:end="2169:35"><expr pos:start="2169:13" pos:end="2169:34"><name pos:start="2169:13" pos:end="2169:15">mod</name> <operator pos:start="2169:17" pos:end="2169:17">=</operator> <operator pos:start="2169:19" pos:end="2169:19">(</operator><name pos:start="2169:20" pos:end="2169:24">modrm</name> <operator pos:start="2169:26" pos:end="2169:27">&gt;&gt;</operator> <literal type="number" pos:start="2169:29" pos:end="2169:29">6</literal><operator pos:start="2169:30" pos:end="2169:30">)</operator> <operator pos:start="2169:32" pos:end="2169:32">&amp;</operator> <literal type="number" pos:start="2169:34" pos:end="2169:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2171:13" pos:end="2171:40"><expr pos:start="2171:13" pos:end="2171:39"><name pos:start="2171:13" pos:end="2171:14">rm</name> <operator pos:start="2171:16" pos:end="2171:16">=</operator> <operator pos:start="2171:18" pos:end="2171:18">(</operator><name pos:start="2171:19" pos:end="2171:23">modrm</name> <operator pos:start="2171:25" pos:end="2171:25">&amp;</operator> <literal type="number" pos:start="2171:27" pos:end="2171:27">7</literal><operator pos:start="2171:28" pos:end="2171:28">)</operator> <operator pos:start="2171:30" pos:end="2171:30">|</operator> <call pos:start="2171:32" pos:end="2171:39"><name pos:start="2171:32" pos:end="2171:36">REX_B</name><argument_list pos:start="2171:37" pos:end="2171:39">(<argument pos:start="2171:38" pos:end="2171:38"><expr pos:start="2171:38" pos:end="2171:38"><name pos:start="2171:38" pos:end="2171:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="2175:13" pos:end="2227:13"><if pos:start="2175:13" pos:end="2211:13">if <condition pos:start="2175:16" pos:end="2175:25">(<expr pos:start="2175:17" pos:end="2175:24"><name pos:start="2175:17" pos:end="2175:19">mod</name> <operator pos:start="2175:21" pos:end="2175:22">==</operator> <literal type="number" pos:start="2175:24" pos:end="2175:24">3</literal></expr>)</condition> <block pos:start="2175:27" pos:end="2211:13">{<block_content pos:start="2177:17" pos:end="2209:45">

                <expr_stmt pos:start="2177:17" pos:end="2177:45"><expr pos:start="2177:17" pos:end="2177:44"><call pos:start="2177:17" pos:end="2177:44"><name pos:start="2177:17" pos:end="2177:33">gen_op_mov_TN_reg</name><argument_list pos:start="2177:34" pos:end="2177:44">(<argument pos:start="2177:35" pos:end="2177:36"><expr pos:start="2177:35" pos:end="2177:36"><name pos:start="2177:35" pos:end="2177:36">ot</name></expr></argument>, <argument pos:start="2177:39" pos:end="2177:39"><expr pos:start="2177:39" pos:end="2177:39"><literal type="number" pos:start="2177:39" pos:end="2177:39">0</literal></expr></argument>, <argument pos:start="2177:42" pos:end="2177:43"><expr pos:start="2177:42" pos:end="2177:43"><name pos:start="2177:42" pos:end="2177:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="2179:17" pos:end="2207:17">switch<condition pos:start="2179:23" pos:end="2179:36">(<expr pos:start="2179:24" pos:end="2179:35"><name pos:start="2179:24" pos:end="2179:25">ot</name> <operator pos:start="2179:27" pos:end="2179:27">|</operator> <operator pos:start="2179:29" pos:end="2179:29">(</operator><name pos:start="2179:30" pos:end="2179:30">b</name> <operator pos:start="2179:32" pos:end="2179:32">&amp;</operator> <literal type="number" pos:start="2179:34" pos:end="2179:34">8</literal><operator pos:start="2179:35" pos:end="2179:35">)</operator></expr>)</condition> <block pos:start="2179:38" pos:end="2207:17">{<block_content pos:start="2181:17" pos:end="2205:26">

                <case pos:start="2181:17" pos:end="2181:29">case <expr pos:start="2181:22" pos:end="2181:28"><name pos:start="2181:22" pos:end="2181:28">OT_BYTE</name></expr>:</case>

                    <expr_stmt pos:start="2183:21" pos:end="2183:57"><expr pos:start="2183:21" pos:end="2183:56"><call pos:start="2183:21" pos:end="2183:56"><name pos:start="2183:21" pos:end="2183:36">tcg_gen_ext8u_tl</name><argument_list pos:start="2183:37" pos:end="2183:56">(<argument pos:start="2183:38" pos:end="2183:45"><expr pos:start="2183:38" pos:end="2183:45"><name pos:start="2183:38" pos:end="2183:45"><name pos:start="2183:38" pos:end="2183:42">cpu_T</name><index pos:start="2183:43" pos:end="2183:45">[<expr pos:start="2183:44" pos:end="2183:44"><literal type="number" pos:start="2183:44" pos:end="2183:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2183:48" pos:end="2183:55"><expr pos:start="2183:48" pos:end="2183:55"><name pos:start="2183:48" pos:end="2183:55"><name pos:start="2183:48" pos:end="2183:52">cpu_T</name><index pos:start="2183:53" pos:end="2183:55">[<expr pos:start="2183:54" pos:end="2183:54"><literal type="number" pos:start="2183:54" pos:end="2183:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2185:21" pos:end="2185:26">break;</break>

                <case pos:start="2187:17" pos:end="2187:33">case <expr pos:start="2187:22" pos:end="2187:32"><name pos:start="2187:22" pos:end="2187:28">OT_BYTE</name> <operator pos:start="2187:30" pos:end="2187:30">|</operator> <literal type="number" pos:start="2187:32" pos:end="2187:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="2189:21" pos:end="2189:57"><expr pos:start="2189:21" pos:end="2189:56"><call pos:start="2189:21" pos:end="2189:56"><name pos:start="2189:21" pos:end="2189:36">tcg_gen_ext8s_tl</name><argument_list pos:start="2189:37" pos:end="2189:56">(<argument pos:start="2189:38" pos:end="2189:45"><expr pos:start="2189:38" pos:end="2189:45"><name pos:start="2189:38" pos:end="2189:45"><name pos:start="2189:38" pos:end="2189:42">cpu_T</name><index pos:start="2189:43" pos:end="2189:45">[<expr pos:start="2189:44" pos:end="2189:44"><literal type="number" pos:start="2189:44" pos:end="2189:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2189:48" pos:end="2189:55"><expr pos:start="2189:48" pos:end="2189:55"><name pos:start="2189:48" pos:end="2189:55"><name pos:start="2189:48" pos:end="2189:52">cpu_T</name><index pos:start="2189:53" pos:end="2189:55">[<expr pos:start="2189:54" pos:end="2189:54"><literal type="number" pos:start="2189:54" pos:end="2189:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2191:21" pos:end="2191:26">break;</break>

                <case pos:start="2193:17" pos:end="2193:29">case <expr pos:start="2193:22" pos:end="2193:28"><name pos:start="2193:22" pos:end="2193:28">OT_WORD</name></expr>:</case>

                    <expr_stmt pos:start="2195:21" pos:end="2195:58"><expr pos:start="2195:21" pos:end="2195:57"><call pos:start="2195:21" pos:end="2195:57"><name pos:start="2195:21" pos:end="2195:37">tcg_gen_ext16u_tl</name><argument_list pos:start="2195:38" pos:end="2195:57">(<argument pos:start="2195:39" pos:end="2195:46"><expr pos:start="2195:39" pos:end="2195:46"><name pos:start="2195:39" pos:end="2195:46"><name pos:start="2195:39" pos:end="2195:43">cpu_T</name><index pos:start="2195:44" pos:end="2195:46">[<expr pos:start="2195:45" pos:end="2195:45"><literal type="number" pos:start="2195:45" pos:end="2195:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2195:49" pos:end="2195:56"><expr pos:start="2195:49" pos:end="2195:56"><name pos:start="2195:49" pos:end="2195:56"><name pos:start="2195:49" pos:end="2195:53">cpu_T</name><index pos:start="2195:54" pos:end="2195:56">[<expr pos:start="2195:55" pos:end="2195:55"><literal type="number" pos:start="2195:55" pos:end="2195:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2197:21" pos:end="2197:26">break;</break>

                <default pos:start="2199:17" pos:end="2199:24">default:</default>

                <case pos:start="2201:17" pos:end="2201:33">case <expr pos:start="2201:22" pos:end="2201:32"><name pos:start="2201:22" pos:end="2201:28">OT_WORD</name> <operator pos:start="2201:30" pos:end="2201:30">|</operator> <literal type="number" pos:start="2201:32" pos:end="2201:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="2203:21" pos:end="2203:58"><expr pos:start="2203:21" pos:end="2203:57"><call pos:start="2203:21" pos:end="2203:57"><name pos:start="2203:21" pos:end="2203:37">tcg_gen_ext16s_tl</name><argument_list pos:start="2203:38" pos:end="2203:57">(<argument pos:start="2203:39" pos:end="2203:46"><expr pos:start="2203:39" pos:end="2203:46"><name pos:start="2203:39" pos:end="2203:46"><name pos:start="2203:39" pos:end="2203:43">cpu_T</name><index pos:start="2203:44" pos:end="2203:46">[<expr pos:start="2203:45" pos:end="2203:45"><literal type="number" pos:start="2203:45" pos:end="2203:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2203:49" pos:end="2203:56"><expr pos:start="2203:49" pos:end="2203:56"><name pos:start="2203:49" pos:end="2203:56"><name pos:start="2203:49" pos:end="2203:53">cpu_T</name><index pos:start="2203:54" pos:end="2203:56">[<expr pos:start="2203:55" pos:end="2203:55"><literal type="number" pos:start="2203:55" pos:end="2203:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2205:21" pos:end="2205:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="2209:17" pos:end="2209:45"><expr pos:start="2209:17" pos:end="2209:44"><call pos:start="2209:17" pos:end="2209:44"><name pos:start="2209:17" pos:end="2209:33">gen_op_mov_reg_T0</name><argument_list pos:start="2209:34" pos:end="2209:44">(<argument pos:start="2209:35" pos:end="2209:38"><expr pos:start="2209:35" pos:end="2209:38"><name pos:start="2209:35" pos:end="2209:38">d_ot</name></expr></argument>, <argument pos:start="2209:41" pos:end="2209:43"><expr pos:start="2209:41" pos:end="2209:43"><name pos:start="2209:41" pos:end="2209:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2211:15" pos:end="2227:13">else <block pos:start="2211:20" pos:end="2227:13">{<block_content pos:start="2213:17" pos:end="2225:45">

                <expr_stmt pos:start="2213:17" pos:end="2213:65"><expr pos:start="2213:17" pos:end="2213:64"><call pos:start="2213:17" pos:end="2213:64"><name pos:start="2213:17" pos:end="2213:29">gen_lea_modrm</name><argument_list pos:start="2213:30" pos:end="2213:64">(<argument pos:start="2213:31" pos:end="2213:31"><expr pos:start="2213:31" pos:end="2213:31"><name pos:start="2213:31" pos:end="2213:31">s</name></expr></argument>, <argument pos:start="2213:34" pos:end="2213:38"><expr pos:start="2213:34" pos:end="2213:38"><name pos:start="2213:34" pos:end="2213:38">modrm</name></expr></argument>, <argument pos:start="2213:41" pos:end="2213:49"><expr pos:start="2213:41" pos:end="2213:49"><operator pos:start="2213:41" pos:end="2213:41">&amp;</operator><name pos:start="2213:42" pos:end="2213:49">reg_addr</name></expr></argument>, <argument pos:start="2213:52" pos:end="2213:63"><expr pos:start="2213:52" pos:end="2213:63"><operator pos:start="2213:52" pos:end="2213:52">&amp;</operator><name pos:start="2213:53" pos:end="2213:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2215:17" pos:end="2223:17"><if pos:start="2215:17" pos:end="2219:17">if <condition pos:start="2215:20" pos:end="2215:26">(<expr pos:start="2215:21" pos:end="2215:25"><name pos:start="2215:21" pos:end="2215:21">b</name> <operator pos:start="2215:23" pos:end="2215:23">&amp;</operator> <literal type="number" pos:start="2215:25" pos:end="2215:25">8</literal></expr>)</condition> <block pos:start="2215:28" pos:end="2219:17">{<block_content pos:start="2217:21" pos:end="2217:56">

                    <expr_stmt pos:start="2217:21" pos:end="2217:56"><expr pos:start="2217:21" pos:end="2217:55"><call pos:start="2217:21" pos:end="2217:55"><name pos:start="2217:21" pos:end="2217:36">gen_op_lds_T0_A0</name><argument_list pos:start="2217:37" pos:end="2217:55">(<argument pos:start="2217:38" pos:end="2217:54"><expr pos:start="2217:38" pos:end="2217:54"><name pos:start="2217:38" pos:end="2217:39">ot</name> <operator pos:start="2217:41" pos:end="2217:41">+</operator> <name pos:start="2217:43" pos:end="2217:54"><name pos:start="2217:43" pos:end="2217:43">s</name><operator pos:start="2217:44" pos:end="2217:45">-&gt;</operator><name pos:start="2217:46" pos:end="2217:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2219:19" pos:end="2223:17">else <block pos:start="2219:24" pos:end="2223:17">{<block_content pos:start="2221:21" pos:end="2221:56">

                    <expr_stmt pos:start="2221:21" pos:end="2221:56"><expr pos:start="2221:21" pos:end="2221:55"><call pos:start="2221:21" pos:end="2221:55"><name pos:start="2221:21" pos:end="2221:36">gen_op_ldu_T0_A0</name><argument_list pos:start="2221:37" pos:end="2221:55">(<argument pos:start="2221:38" pos:end="2221:54"><expr pos:start="2221:38" pos:end="2221:54"><name pos:start="2221:38" pos:end="2221:39">ot</name> <operator pos:start="2221:41" pos:end="2221:41">+</operator> <name pos:start="2221:43" pos:end="2221:54"><name pos:start="2221:43" pos:end="2221:43">s</name><operator pos:start="2221:44" pos:end="2221:45">-&gt;</operator><name pos:start="2221:46" pos:end="2221:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2225:17" pos:end="2225:45"><expr pos:start="2225:17" pos:end="2225:44"><call pos:start="2225:17" pos:end="2225:44"><name pos:start="2225:17" pos:end="2225:33">gen_op_mov_reg_T0</name><argument_list pos:start="2225:34" pos:end="2225:44">(<argument pos:start="2225:35" pos:end="2225:38"><expr pos:start="2225:35" pos:end="2225:38"><name pos:start="2225:35" pos:end="2225:38">d_ot</name></expr></argument>, <argument pos:start="2225:41" pos:end="2225:43"><expr pos:start="2225:41" pos:end="2225:43"><name pos:start="2225:41" pos:end="2225:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2231:9" pos:end="2231:14">break;</break>



    <case pos:start="2235:5" pos:end="2235:14">case <expr pos:start="2235:10" pos:end="2235:13"><literal type="number" pos:start="2235:10" pos:end="2235:13">0x8d</literal></expr>:</case> <comment type="block" pos:start="2235:16" pos:end="2235:24">/* lea */</comment>

        <expr_stmt pos:start="2237:9" pos:end="2237:29"><expr pos:start="2237:9" pos:end="2237:28"><name pos:start="2237:9" pos:end="2237:10">ot</name> <operator pos:start="2237:12" pos:end="2237:12">=</operator> <name pos:start="2237:14" pos:end="2237:18">dflag</name> <operator pos:start="2237:20" pos:end="2237:20">+</operator> <name pos:start="2237:22" pos:end="2237:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2239:9" pos:end="2239:35"><expr pos:start="2239:9" pos:end="2239:34"><name pos:start="2239:9" pos:end="2239:13">modrm</name> <operator pos:start="2239:15" pos:end="2239:15">=</operator> <call pos:start="2239:17" pos:end="2239:34"><name pos:start="2239:17" pos:end="2239:25">ldub_code</name><argument_list pos:start="2239:26" pos:end="2239:34">(<argument pos:start="2239:27" pos:end="2239:33"><expr pos:start="2239:27" pos:end="2239:33"><name pos:start="2239:27" pos:end="2239:31"><name pos:start="2239:27" pos:end="2239:27">s</name><operator pos:start="2239:28" pos:end="2239:29">-&gt;</operator><name pos:start="2239:30" pos:end="2239:31">pc</name></name><operator pos:start="2239:32" pos:end="2239:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2241:9" pos:end="2241:31"><expr pos:start="2241:9" pos:end="2241:30"><name pos:start="2241:9" pos:end="2241:11">mod</name> <operator pos:start="2241:13" pos:end="2241:13">=</operator> <operator pos:start="2241:15" pos:end="2241:15">(</operator><name pos:start="2241:16" pos:end="2241:20">modrm</name> <operator pos:start="2241:22" pos:end="2241:23">&gt;&gt;</operator> <literal type="number" pos:start="2241:25" pos:end="2241:25">6</literal><operator pos:start="2241:26" pos:end="2241:26">)</operator> <operator pos:start="2241:28" pos:end="2241:28">&amp;</operator> <literal type="number" pos:start="2241:30" pos:end="2241:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2243:9" pos:end="2245:28"><if pos:start="2243:9" pos:end="2245:28">if <condition pos:start="2243:12" pos:end="2243:21">(<expr pos:start="2243:13" pos:end="2243:20"><name pos:start="2243:13" pos:end="2243:15">mod</name> <operator pos:start="2243:17" pos:end="2243:18">==</operator> <literal type="number" pos:start="2243:20" pos:end="2243:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2245:13" pos:end="2245:28"><block_content pos:start="2245:13" pos:end="2245:28">

            <goto pos:start="2245:13" pos:end="2245:28">goto <name pos:start="2245:18" pos:end="2245:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2247:9" pos:end="2247:41"><expr pos:start="2247:9" pos:end="2247:40"><name pos:start="2247:9" pos:end="2247:11">reg</name> <operator pos:start="2247:13" pos:end="2247:13">=</operator> <operator pos:start="2247:15" pos:end="2247:15">(</operator><operator pos:start="2247:16" pos:end="2247:16">(</operator><name pos:start="2247:17" pos:end="2247:21">modrm</name> <operator pos:start="2247:23" pos:end="2247:24">&gt;&gt;</operator> <literal type="number" pos:start="2247:26" pos:end="2247:26">3</literal><operator pos:start="2247:27" pos:end="2247:27">)</operator> <operator pos:start="2247:29" pos:end="2247:29">&amp;</operator> <literal type="number" pos:start="2247:31" pos:end="2247:31">7</literal><operator pos:start="2247:32" pos:end="2247:32">)</operator> <operator pos:start="2247:34" pos:end="2247:34">|</operator> <name pos:start="2247:36" pos:end="2247:40">rex_r</name></expr>;</expr_stmt>

        <comment type="block" pos:start="2249:9" pos:end="2249:53">/* we must ensure that no segment is added */</comment>

        <expr_stmt pos:start="2251:9" pos:end="2251:25"><expr pos:start="2251:9" pos:end="2251:24"><name pos:start="2251:9" pos:end="2251:19"><name pos:start="2251:9" pos:end="2251:9">s</name><operator pos:start="2251:10" pos:end="2251:11">-&gt;</operator><name pos:start="2251:12" pos:end="2251:19">override</name></name> <operator pos:start="2251:21" pos:end="2251:21">=</operator> <operator pos:start="2251:23" pos:end="2251:23">-</operator><literal type="number" pos:start="2251:24" pos:end="2251:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2253:9" pos:end="2253:24"><expr pos:start="2253:9" pos:end="2253:23"><name pos:start="2253:9" pos:end="2253:11">val</name> <operator pos:start="2253:13" pos:end="2253:13">=</operator> <name pos:start="2253:15" pos:end="2253:23"><name pos:start="2253:15" pos:end="2253:15">s</name><operator pos:start="2253:16" pos:end="2253:17">-&gt;</operator><name pos:start="2253:18" pos:end="2253:23">addseg</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="2255:9" pos:end="2255:22"><expr pos:start="2255:9" pos:end="2255:21"><name pos:start="2255:9" pos:end="2255:17"><name pos:start="2255:9" pos:end="2255:9">s</name><operator pos:start="2255:10" pos:end="2255:11">-&gt;</operator><name pos:start="2255:12" pos:end="2255:17">addseg</name></name> <operator pos:start="2255:19" pos:end="2255:19">=</operator> <literal type="number" pos:start="2255:21" pos:end="2255:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2257:9" pos:end="2257:57"><expr pos:start="2257:9" pos:end="2257:56"><call pos:start="2257:9" pos:end="2257:56"><name pos:start="2257:9" pos:end="2257:21">gen_lea_modrm</name><argument_list pos:start="2257:22" pos:end="2257:56">(<argument pos:start="2257:23" pos:end="2257:23"><expr pos:start="2257:23" pos:end="2257:23"><name pos:start="2257:23" pos:end="2257:23">s</name></expr></argument>, <argument pos:start="2257:26" pos:end="2257:30"><expr pos:start="2257:26" pos:end="2257:30"><name pos:start="2257:26" pos:end="2257:30">modrm</name></expr></argument>, <argument pos:start="2257:33" pos:end="2257:41"><expr pos:start="2257:33" pos:end="2257:41"><operator pos:start="2257:33" pos:end="2257:33">&amp;</operator><name pos:start="2257:34" pos:end="2257:41">reg_addr</name></expr></argument>, <argument pos:start="2257:44" pos:end="2257:55"><expr pos:start="2257:44" pos:end="2257:55"><operator pos:start="2257:44" pos:end="2257:44">&amp;</operator><name pos:start="2257:45" pos:end="2257:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2259:9" pos:end="2259:24"><expr pos:start="2259:9" pos:end="2259:23"><name pos:start="2259:9" pos:end="2259:17"><name pos:start="2259:9" pos:end="2259:9">s</name><operator pos:start="2259:10" pos:end="2259:11">-&gt;</operator><name pos:start="2259:12" pos:end="2259:17">addseg</name></name> <operator pos:start="2259:19" pos:end="2259:19">=</operator> <name pos:start="2259:21" pos:end="2259:23">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2261:9" pos:end="2261:45"><expr pos:start="2261:9" pos:end="2261:44"><call pos:start="2261:9" pos:end="2261:44"><name pos:start="2261:9" pos:end="2261:25">gen_op_mov_reg_A0</name><argument_list pos:start="2261:26" pos:end="2261:44">(<argument pos:start="2261:27" pos:end="2261:38"><expr pos:start="2261:27" pos:end="2261:38"><name pos:start="2261:27" pos:end="2261:28">ot</name> <operator pos:start="2261:30" pos:end="2261:30">-</operator> <name pos:start="2261:32" pos:end="2261:38">OT_WORD</name></expr></argument>, <argument pos:start="2261:41" pos:end="2261:43"><expr pos:start="2261:41" pos:end="2261:43"><name pos:start="2261:41" pos:end="2261:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2263:9" pos:end="2263:14">break;</break>



    <case pos:start="2267:5" pos:end="2267:14">case <expr pos:start="2267:10" pos:end="2267:13"><literal type="number" pos:start="2267:10" pos:end="2267:13">0xa0</literal></expr>:</case> <comment type="block" pos:start="2267:16" pos:end="2267:32">/* mov EAX, Ov */</comment>

    <case pos:start="2269:5" pos:end="2269:14">case <expr pos:start="2269:10" pos:end="2269:13"><literal type="number" pos:start="2269:10" pos:end="2269:13">0xa1</literal></expr>:</case>

    <case pos:start="2271:5" pos:end="2271:14">case <expr pos:start="2271:10" pos:end="2271:13"><literal type="number" pos:start="2271:10" pos:end="2271:13">0xa2</literal></expr>:</case> <comment type="block" pos:start="2271:16" pos:end="2271:32">/* mov Ov, EAX */</comment>

    <case pos:start="2273:5" pos:end="2273:14">case <expr pos:start="2273:10" pos:end="2273:13"><literal type="number" pos:start="2273:10" pos:end="2273:13">0xa3</literal></expr>:</case>

        <block pos:start="2275:9" pos:end="2335:9">{<block_content pos:start="2277:13" pos:end="2333:13">

            <decl_stmt pos:start="2277:13" pos:end="2277:37"><decl pos:start="2277:13" pos:end="2277:36"><type pos:start="2277:13" pos:end="2277:24"><name pos:start="2277:13" pos:end="2277:24">target_ulong</name></type> <name pos:start="2277:26" pos:end="2277:36">offset_addr</name></decl>;</decl_stmt>



            <if_stmt pos:start="2281:13" pos:end="2290:0"><if pos:start="2281:13" pos:end="2283:29">if <condition pos:start="2281:16" pos:end="2281:29">(<expr pos:start="2281:17" pos:end="2281:28"><operator pos:start="2281:17" pos:end="2281:17">(</operator><name pos:start="2281:18" pos:end="2281:18">b</name> <operator pos:start="2281:20" pos:end="2281:20">&amp;</operator> <literal type="number" pos:start="2281:22" pos:end="2281:22">1</literal><operator pos:start="2281:23" pos:end="2281:23">)</operator> <operator pos:start="2281:25" pos:end="2281:26">==</operator> <literal type="number" pos:start="2281:28" pos:end="2281:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2283:17" pos:end="2283:29"><block_content pos:start="2283:17" pos:end="2283:29">

                <expr_stmt pos:start="2283:17" pos:end="2283:29"><expr pos:start="2283:17" pos:end="2283:28"><name pos:start="2283:17" pos:end="2283:18">ot</name> <operator pos:start="2283:20" pos:end="2283:20">=</operator> <name pos:start="2283:22" pos:end="2283:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2285:13" pos:end="2290:0">else<block type="pseudo" pos:start="2287:17" pos:end="2290:0"><block_content pos:start="2287:17" pos:end="2290:0">

                <expr_stmt pos:start="2287:17" pos:end="2290:0"><expr pos:start="2287:17" pos:end="2287:36"><name pos:start="2287:17" pos:end="2287:18">ot</name> <operator pos:start="2287:20" pos:end="2287:20">=</operator> <name pos:start="2287:22" pos:end="2287:26">dflag</name> <operator pos:start="2287:28" pos:end="2287:28">+</operator> <name pos:start="2287:30" pos:end="2287:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef pos:start="2289:1" pos:end="2289:20">#<cpp:directive pos:start="2289:2" pos:end="2289:6">ifdef</cpp:directive> <name pos:start="2289:8" pos:end="2289:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="2291:13" pos:end="2317:13"><if pos:start="2291:13" pos:end="2299:13">if <condition pos:start="2291:16" pos:end="2291:30">(<expr pos:start="2291:17" pos:end="2291:29"><name pos:start="2291:17" pos:end="2291:24"><name pos:start="2291:17" pos:end="2291:17">s</name><operator pos:start="2291:18" pos:end="2291:19">-&gt;</operator><name pos:start="2291:20" pos:end="2291:24">aflag</name></name> <operator pos:start="2291:26" pos:end="2291:27">==</operator> <literal type="number" pos:start="2291:29" pos:end="2291:29">2</literal></expr>)</condition> <block pos:start="2291:32" pos:end="2299:13">{<block_content pos:start="2293:17" pos:end="2297:47">

                <expr_stmt pos:start="2293:17" pos:end="2293:46"><expr pos:start="2293:17" pos:end="2293:45"><name pos:start="2293:17" pos:end="2293:27">offset_addr</name> <operator pos:start="2293:29" pos:end="2293:29">=</operator> <call pos:start="2293:31" pos:end="2293:45"><name pos:start="2293:31" pos:end="2293:38">ldq_code</name><argument_list pos:start="2293:39" pos:end="2293:45">(<argument pos:start="2293:40" pos:end="2293:44"><expr pos:start="2293:40" pos:end="2293:44"><name pos:start="2293:40" pos:end="2293:44"><name pos:start="2293:40" pos:end="2293:40">s</name><operator pos:start="2293:41" pos:end="2293:42">-&gt;</operator><name pos:start="2293:43" pos:end="2293:44">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2295:17" pos:end="2295:27"><expr pos:start="2295:17" pos:end="2295:26"><name pos:start="2295:17" pos:end="2295:21"><name pos:start="2295:17" pos:end="2295:17">s</name><operator pos:start="2295:18" pos:end="2295:19">-&gt;</operator><name pos:start="2295:20" pos:end="2295:21">pc</name></name> <operator pos:start="2295:23" pos:end="2295:24">+=</operator> <literal type="number" pos:start="2295:26" pos:end="2295:26">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="2297:17" pos:end="2297:47"><expr pos:start="2297:17" pos:end="2297:46"><call pos:start="2297:17" pos:end="2297:46"><name pos:start="2297:17" pos:end="2297:33">gen_op_movq_A0_im</name><argument_list pos:start="2297:34" pos:end="2297:46">(<argument pos:start="2297:35" pos:end="2297:45"><expr pos:start="2297:35" pos:end="2297:45"><name pos:start="2297:35" pos:end="2297:45">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2299:15" pos:end="2317:13">else

<cpp:endif pos:start="2301:1" pos:end="2301:6">#<cpp:directive pos:start="2301:2" pos:end="2301:6">endif</cpp:directive></cpp:endif>

            <block pos:start="2303:13" pos:end="2317:13">{<block_content pos:start="2305:17" pos:end="2315:47">

                <if_stmt pos:start="2305:17" pos:end="2313:17"><if pos:start="2305:17" pos:end="2309:17">if <condition pos:start="2305:20" pos:end="2305:29">(<expr pos:start="2305:21" pos:end="2305:28"><name pos:start="2305:21" pos:end="2305:28"><name pos:start="2305:21" pos:end="2305:21">s</name><operator pos:start="2305:22" pos:end="2305:23">-&gt;</operator><name pos:start="2305:24" pos:end="2305:28">aflag</name></name></expr>)</condition> <block pos:start="2305:31" pos:end="2309:17">{<block_content pos:start="2307:21" pos:end="2307:55">

                    <expr_stmt pos:start="2307:21" pos:end="2307:55"><expr pos:start="2307:21" pos:end="2307:54"><name pos:start="2307:21" pos:end="2307:31">offset_addr</name> <operator pos:start="2307:33" pos:end="2307:33">=</operator> <call pos:start="2307:35" pos:end="2307:54"><name pos:start="2307:35" pos:end="2307:42">insn_get</name><argument_list pos:start="2307:43" pos:end="2307:54">(<argument pos:start="2307:44" pos:end="2307:44"><expr pos:start="2307:44" pos:end="2307:44"><name pos:start="2307:44" pos:end="2307:44">s</name></expr></argument>, <argument pos:start="2307:47" pos:end="2307:53"><expr pos:start="2307:47" pos:end="2307:53"><name pos:start="2307:47" pos:end="2307:53">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2309:19" pos:end="2313:17">else <block pos:start="2309:24" pos:end="2313:17">{<block_content pos:start="2311:21" pos:end="2311:55">

                    <expr_stmt pos:start="2311:21" pos:end="2311:55"><expr pos:start="2311:21" pos:end="2311:54"><name pos:start="2311:21" pos:end="2311:31">offset_addr</name> <operator pos:start="2311:33" pos:end="2311:33">=</operator> <call pos:start="2311:35" pos:end="2311:54"><name pos:start="2311:35" pos:end="2311:42">insn_get</name><argument_list pos:start="2311:43" pos:end="2311:54">(<argument pos:start="2311:44" pos:end="2311:44"><expr pos:start="2311:44" pos:end="2311:44"><name pos:start="2311:44" pos:end="2311:44">s</name></expr></argument>, <argument pos:start="2311:47" pos:end="2311:53"><expr pos:start="2311:47" pos:end="2311:53"><name pos:start="2311:47" pos:end="2311:53">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2315:17" pos:end="2315:47"><expr pos:start="2315:17" pos:end="2315:46"><call pos:start="2315:17" pos:end="2315:46"><name pos:start="2315:17" pos:end="2315:33">gen_op_movl_A0_im</name><argument_list pos:start="2315:34" pos:end="2315:46">(<argument pos:start="2315:35" pos:end="2315:45"><expr pos:start="2315:35" pos:end="2315:45"><name pos:start="2315:35" pos:end="2315:45">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="2319:13" pos:end="2319:33"><expr pos:start="2319:13" pos:end="2319:32"><call pos:start="2319:13" pos:end="2319:32"><name pos:start="2319:13" pos:end="2319:29">gen_add_A0_ds_seg</name><argument_list pos:start="2319:30" pos:end="2319:32">(<argument pos:start="2319:31" pos:end="2319:31"><expr pos:start="2319:31" pos:end="2319:31"><name pos:start="2319:31" pos:end="2319:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2321:13" pos:end="2333:13"><if pos:start="2321:13" pos:end="2327:13">if <condition pos:start="2321:16" pos:end="2321:29">(<expr pos:start="2321:17" pos:end="2321:28"><operator pos:start="2321:17" pos:end="2321:17">(</operator><name pos:start="2321:18" pos:end="2321:18">b</name> <operator pos:start="2321:20" pos:end="2321:20">&amp;</operator> <literal type="number" pos:start="2321:22" pos:end="2321:22">2</literal><operator pos:start="2321:23" pos:end="2321:23">)</operator> <operator pos:start="2321:25" pos:end="2321:26">==</operator> <literal type="number" pos:start="2321:28" pos:end="2321:28">0</literal></expr>)</condition> <block pos:start="2321:31" pos:end="2327:13">{<block_content pos:start="2323:17" pos:end="2325:45">

                <expr_stmt pos:start="2323:17" pos:end="2323:51"><expr pos:start="2323:17" pos:end="2323:50"><call pos:start="2323:17" pos:end="2323:50"><name pos:start="2323:17" pos:end="2323:31">gen_op_ld_T0_A0</name><argument_list pos:start="2323:32" pos:end="2323:50">(<argument pos:start="2323:33" pos:end="2323:49"><expr pos:start="2323:33" pos:end="2323:49"><name pos:start="2323:33" pos:end="2323:34">ot</name> <operator pos:start="2323:36" pos:end="2323:36">+</operator> <name pos:start="2323:38" pos:end="2323:49"><name pos:start="2323:38" pos:end="2323:38">s</name><operator pos:start="2323:39" pos:end="2323:40">-&gt;</operator><name pos:start="2323:41" pos:end="2323:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2325:17" pos:end="2325:45"><expr pos:start="2325:17" pos:end="2325:44"><call pos:start="2325:17" pos:end="2325:44"><name pos:start="2325:17" pos:end="2325:33">gen_op_mov_reg_T0</name><argument_list pos:start="2325:34" pos:end="2325:44">(<argument pos:start="2325:35" pos:end="2325:36"><expr pos:start="2325:35" pos:end="2325:36"><name pos:start="2325:35" pos:end="2325:36">ot</name></expr></argument>, <argument pos:start="2325:39" pos:end="2325:43"><expr pos:start="2325:39" pos:end="2325:43"><name pos:start="2325:39" pos:end="2325:43">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2327:15" pos:end="2333:13">else <block pos:start="2327:20" pos:end="2333:13">{<block_content pos:start="2329:17" pos:end="2331:51">

                <expr_stmt pos:start="2329:17" pos:end="2329:48"><expr pos:start="2329:17" pos:end="2329:47"><call pos:start="2329:17" pos:end="2329:47"><name pos:start="2329:17" pos:end="2329:33">gen_op_mov_TN_reg</name><argument_list pos:start="2329:34" pos:end="2329:47">(<argument pos:start="2329:35" pos:end="2329:36"><expr pos:start="2329:35" pos:end="2329:36"><name pos:start="2329:35" pos:end="2329:36">ot</name></expr></argument>, <argument pos:start="2329:39" pos:end="2329:39"><expr pos:start="2329:39" pos:end="2329:39"><literal type="number" pos:start="2329:39" pos:end="2329:39">0</literal></expr></argument>, <argument pos:start="2329:42" pos:end="2329:46"><expr pos:start="2329:42" pos:end="2329:46"><name pos:start="2329:42" pos:end="2329:46">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2331:17" pos:end="2331:51"><expr pos:start="2331:17" pos:end="2331:50"><call pos:start="2331:17" pos:end="2331:50"><name pos:start="2331:17" pos:end="2331:31">gen_op_st_T0_A0</name><argument_list pos:start="2331:32" pos:end="2331:50">(<argument pos:start="2331:33" pos:end="2331:49"><expr pos:start="2331:33" pos:end="2331:49"><name pos:start="2331:33" pos:end="2331:34">ot</name> <operator pos:start="2331:36" pos:end="2331:36">+</operator> <name pos:start="2331:38" pos:end="2331:49"><name pos:start="2331:38" pos:end="2331:38">s</name><operator pos:start="2331:39" pos:end="2331:40">-&gt;</operator><name pos:start="2331:41" pos:end="2331:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2337:9" pos:end="2337:14">break;</break>

    <case pos:start="2339:5" pos:end="2342:0">case <expr pos:start="2339:10" pos:end="2339:13"><literal type="number" pos:start="2339:10" pos:end="2339:13">0xd7</literal></expr>:</case> <comment type="block" pos:start="2339:16" pos:end="2339:25">/* xlat */</comment>

<cpp:ifdef pos:start="2341:1" pos:end="2341:20">#<cpp:directive pos:start="2341:2" pos:end="2341:6">ifdef</cpp:directive> <name pos:start="2341:8" pos:end="2341:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="2343:9" pos:end="2375:9"><if pos:start="2343:9" pos:end="2353:9">if <condition pos:start="2343:12" pos:end="2343:26">(<expr pos:start="2343:13" pos:end="2343:25"><name pos:start="2343:13" pos:end="2343:20"><name pos:start="2343:13" pos:end="2343:13">s</name><operator pos:start="2343:14" pos:end="2343:15">-&gt;</operator><name pos:start="2343:16" pos:end="2343:20">aflag</name></name> <operator pos:start="2343:22" pos:end="2343:23">==</operator> <literal type="number" pos:start="2343:25" pos:end="2343:25">2</literal></expr>)</condition> <block pos:start="2343:28" pos:end="2353:9">{<block_content pos:start="2345:13" pos:end="2351:53">

            <expr_stmt pos:start="2345:13" pos:end="2345:38"><expr pos:start="2345:13" pos:end="2345:37"><call pos:start="2345:13" pos:end="2345:37"><name pos:start="2345:13" pos:end="2345:30">gen_op_movq_A0_reg</name><argument_list pos:start="2345:31" pos:end="2345:37">(<argument pos:start="2345:32" pos:end="2345:36"><expr pos:start="2345:32" pos:end="2345:36"><name pos:start="2345:32" pos:end="2345:36">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2347:13" pos:end="2347:49"><expr pos:start="2347:13" pos:end="2347:48"><call pos:start="2347:13" pos:end="2347:48"><name pos:start="2347:13" pos:end="2347:29">gen_op_mov_TN_reg</name><argument_list pos:start="2347:30" pos:end="2347:48">(<argument pos:start="2347:31" pos:end="2347:37"><expr pos:start="2347:31" pos:end="2347:37"><name pos:start="2347:31" pos:end="2347:37">OT_QUAD</name></expr></argument>, <argument pos:start="2347:40" pos:end="2347:40"><expr pos:start="2347:40" pos:end="2347:40"><literal type="number" pos:start="2347:40" pos:end="2347:40">0</literal></expr></argument>, <argument pos:start="2347:43" pos:end="2347:47"><expr pos:start="2347:43" pos:end="2347:47"><name pos:start="2347:43" pos:end="2347:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2349:13" pos:end="2349:54"><expr pos:start="2349:13" pos:end="2349:53"><call pos:start="2349:13" pos:end="2349:53"><name pos:start="2349:13" pos:end="2349:27">tcg_gen_andi_tl</name><argument_list pos:start="2349:28" pos:end="2349:53">(<argument pos:start="2349:29" pos:end="2349:36"><expr pos:start="2349:29" pos:end="2349:36"><name pos:start="2349:29" pos:end="2349:36"><name pos:start="2349:29" pos:end="2349:33">cpu_T</name><index pos:start="2349:34" pos:end="2349:36">[<expr pos:start="2349:35" pos:end="2349:35"><literal type="number" pos:start="2349:35" pos:end="2349:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2349:39" pos:end="2349:46"><expr pos:start="2349:39" pos:end="2349:46"><name pos:start="2349:39" pos:end="2349:46"><name pos:start="2349:39" pos:end="2349:43">cpu_T</name><index pos:start="2349:44" pos:end="2349:46">[<expr pos:start="2349:45" pos:end="2349:45"><literal type="number" pos:start="2349:45" pos:end="2349:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2349:49" pos:end="2349:52"><expr pos:start="2349:49" pos:end="2349:52"><literal type="number" pos:start="2349:49" pos:end="2349:52">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2351:13" pos:end="2351:53"><expr pos:start="2351:13" pos:end="2351:52"><call pos:start="2351:13" pos:end="2351:52"><name pos:start="2351:13" pos:end="2351:26">tcg_gen_add_tl</name><argument_list pos:start="2351:27" pos:end="2351:52">(<argument pos:start="2351:28" pos:end="2351:33"><expr pos:start="2351:28" pos:end="2351:33"><name pos:start="2351:28" pos:end="2351:33">cpu_A0</name></expr></argument>, <argument pos:start="2351:36" pos:end="2351:41"><expr pos:start="2351:36" pos:end="2351:41"><name pos:start="2351:36" pos:end="2351:41">cpu_A0</name></expr></argument>, <argument pos:start="2351:44" pos:end="2351:51"><expr pos:start="2351:44" pos:end="2351:51"><name pos:start="2351:44" pos:end="2351:51"><name pos:start="2351:44" pos:end="2351:48">cpu_T</name><index pos:start="2351:49" pos:end="2351:51">[<expr pos:start="2351:50" pos:end="2351:50"><literal type="number" pos:start="2351:50" pos:end="2351:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2353:11" pos:end="2375:9">else

<cpp:endif pos:start="2355:1" pos:end="2355:6">#<cpp:directive pos:start="2355:2" pos:end="2355:6">endif</cpp:directive></cpp:endif>

        <block pos:start="2357:9" pos:end="2375:9">{<block_content pos:start="2359:13" pos:end="2373:60">

            <expr_stmt pos:start="2359:13" pos:end="2359:38"><expr pos:start="2359:13" pos:end="2359:37"><call pos:start="2359:13" pos:end="2359:37"><name pos:start="2359:13" pos:end="2359:30">gen_op_movl_A0_reg</name><argument_list pos:start="2359:31" pos:end="2359:37">(<argument pos:start="2359:32" pos:end="2359:36"><expr pos:start="2359:32" pos:end="2359:36"><name pos:start="2359:32" pos:end="2359:36">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2361:13" pos:end="2361:49"><expr pos:start="2361:13" pos:end="2361:48"><call pos:start="2361:13" pos:end="2361:48"><name pos:start="2361:13" pos:end="2361:29">gen_op_mov_TN_reg</name><argument_list pos:start="2361:30" pos:end="2361:48">(<argument pos:start="2361:31" pos:end="2361:37"><expr pos:start="2361:31" pos:end="2361:37"><name pos:start="2361:31" pos:end="2361:37">OT_LONG</name></expr></argument>, <argument pos:start="2361:40" pos:end="2361:40"><expr pos:start="2361:40" pos:end="2361:40"><literal type="number" pos:start="2361:40" pos:end="2361:40">0</literal></expr></argument>, <argument pos:start="2361:43" pos:end="2361:47"><expr pos:start="2361:43" pos:end="2361:47"><name pos:start="2361:43" pos:end="2361:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2363:13" pos:end="2363:54"><expr pos:start="2363:13" pos:end="2363:53"><call pos:start="2363:13" pos:end="2363:53"><name pos:start="2363:13" pos:end="2363:27">tcg_gen_andi_tl</name><argument_list pos:start="2363:28" pos:end="2363:53">(<argument pos:start="2363:29" pos:end="2363:36"><expr pos:start="2363:29" pos:end="2363:36"><name pos:start="2363:29" pos:end="2363:36"><name pos:start="2363:29" pos:end="2363:33">cpu_T</name><index pos:start="2363:34" pos:end="2363:36">[<expr pos:start="2363:35" pos:end="2363:35"><literal type="number" pos:start="2363:35" pos:end="2363:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2363:39" pos:end="2363:46"><expr pos:start="2363:39" pos:end="2363:46"><name pos:start="2363:39" pos:end="2363:46"><name pos:start="2363:39" pos:end="2363:43">cpu_T</name><index pos:start="2363:44" pos:end="2363:46">[<expr pos:start="2363:45" pos:end="2363:45"><literal type="number" pos:start="2363:45" pos:end="2363:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2363:49" pos:end="2363:52"><expr pos:start="2363:49" pos:end="2363:52"><literal type="number" pos:start="2363:49" pos:end="2363:52">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2365:13" pos:end="2365:53"><expr pos:start="2365:13" pos:end="2365:52"><call pos:start="2365:13" pos:end="2365:52"><name pos:start="2365:13" pos:end="2365:26">tcg_gen_add_tl</name><argument_list pos:start="2365:27" pos:end="2365:52">(<argument pos:start="2365:28" pos:end="2365:33"><expr pos:start="2365:28" pos:end="2365:33"><name pos:start="2365:28" pos:end="2365:33">cpu_A0</name></expr></argument>, <argument pos:start="2365:36" pos:end="2365:41"><expr pos:start="2365:36" pos:end="2365:41"><name pos:start="2365:36" pos:end="2365:41">cpu_A0</name></expr></argument>, <argument pos:start="2365:44" pos:end="2365:51"><expr pos:start="2365:44" pos:end="2365:51"><name pos:start="2365:44" pos:end="2365:51"><name pos:start="2365:44" pos:end="2365:48">cpu_T</name><index pos:start="2365:49" pos:end="2365:51">[<expr pos:start="2365:50" pos:end="2365:50"><literal type="number" pos:start="2365:50" pos:end="2365:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2367:13" pos:end="2373:60"><if pos:start="2367:13" pos:end="2369:38">if <condition pos:start="2367:16" pos:end="2367:30">(<expr pos:start="2367:17" pos:end="2367:29"><name pos:start="2367:17" pos:end="2367:24"><name pos:start="2367:17" pos:end="2367:17">s</name><operator pos:start="2367:18" pos:end="2367:19">-&gt;</operator><name pos:start="2367:20" pos:end="2367:24">aflag</name></name> <operator pos:start="2367:26" pos:end="2367:27">==</operator> <literal type="number" pos:start="2367:29" pos:end="2367:29">0</literal></expr>)</condition><block type="pseudo" pos:start="2369:17" pos:end="2369:38"><block_content pos:start="2369:17" pos:end="2369:38">

                <expr_stmt pos:start="2369:17" pos:end="2369:38"><expr pos:start="2369:17" pos:end="2369:37"><call pos:start="2369:17" pos:end="2369:37"><name pos:start="2369:17" pos:end="2369:35">gen_op_andl_A0_ffff</name><argument_list pos:start="2369:36" pos:end="2369:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2371:13" pos:end="2373:60">else<block type="pseudo" pos:start="2373:17" pos:end="2373:60"><block_content pos:start="2373:17" pos:end="2373:60">

                <expr_stmt pos:start="2373:17" pos:end="2373:60"><expr pos:start="2373:17" pos:end="2373:59"><call pos:start="2373:17" pos:end="2373:59"><name pos:start="2373:17" pos:end="2373:31">tcg_gen_andi_tl</name><argument_list pos:start="2373:32" pos:end="2373:59">(<argument pos:start="2373:33" pos:end="2373:38"><expr pos:start="2373:33" pos:end="2373:38"><name pos:start="2373:33" pos:end="2373:38">cpu_A0</name></expr></argument>, <argument pos:start="2373:41" pos:end="2373:46"><expr pos:start="2373:41" pos:end="2373:46"><name pos:start="2373:41" pos:end="2373:46">cpu_A0</name></expr></argument>, <argument pos:start="2373:49" pos:end="2373:58"><expr pos:start="2373:49" pos:end="2373:58"><literal type="number" pos:start="2373:49" pos:end="2373:58">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2377:9" pos:end="2377:29"><expr pos:start="2377:9" pos:end="2377:28"><call pos:start="2377:9" pos:end="2377:28"><name pos:start="2377:9" pos:end="2377:25">gen_add_A0_ds_seg</name><argument_list pos:start="2377:26" pos:end="2377:28">(<argument pos:start="2377:27" pos:end="2377:27"><expr pos:start="2377:27" pos:end="2377:27"><name pos:start="2377:27" pos:end="2377:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2379:9" pos:end="2379:49"><expr pos:start="2379:9" pos:end="2379:48"><call pos:start="2379:9" pos:end="2379:48"><name pos:start="2379:9" pos:end="2379:24">gen_op_ldu_T0_A0</name><argument_list pos:start="2379:25" pos:end="2379:48">(<argument pos:start="2379:26" pos:end="2379:47"><expr pos:start="2379:26" pos:end="2379:47"><name pos:start="2379:26" pos:end="2379:32">OT_BYTE</name> <operator pos:start="2379:34" pos:end="2379:34">+</operator> <name pos:start="2379:36" pos:end="2379:47"><name pos:start="2379:36" pos:end="2379:36">s</name><operator pos:start="2379:37" pos:end="2379:38">-&gt;</operator><name pos:start="2379:39" pos:end="2379:47">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2381:9" pos:end="2381:42"><expr pos:start="2381:9" pos:end="2381:41"><call pos:start="2381:9" pos:end="2381:41"><name pos:start="2381:9" pos:end="2381:25">gen_op_mov_reg_T0</name><argument_list pos:start="2381:26" pos:end="2381:41">(<argument pos:start="2381:27" pos:end="2381:33"><expr pos:start="2381:27" pos:end="2381:33"><name pos:start="2381:27" pos:end="2381:33">OT_BYTE</name></expr></argument>, <argument pos:start="2381:36" pos:end="2381:40"><expr pos:start="2381:36" pos:end="2381:40"><name pos:start="2381:36" pos:end="2381:40">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2383:9" pos:end="2383:14">break;</break>

    <case pos:start="2385:5" pos:end="2385:23">case <expr pos:start="2385:10" pos:end="2385:22"><literal type="number" pos:start="2385:10" pos:end="2385:13">0xb0</literal> <operator pos:start="2385:15" pos:end="2385:17">...</operator> <literal type="number" pos:start="2385:19" pos:end="2385:22">0xb7</literal></expr>:</case> <comment type="block" pos:start="2385:25" pos:end="2385:39">/* mov R, Ib */</comment>

        <expr_stmt pos:start="2387:9" pos:end="2387:35"><expr pos:start="2387:9" pos:end="2387:34"><name pos:start="2387:9" pos:end="2387:11">val</name> <operator pos:start="2387:13" pos:end="2387:13">=</operator> <call pos:start="2387:15" pos:end="2387:34"><name pos:start="2387:15" pos:end="2387:22">insn_get</name><argument_list pos:start="2387:23" pos:end="2387:34">(<argument pos:start="2387:24" pos:end="2387:24"><expr pos:start="2387:24" pos:end="2387:24"><name pos:start="2387:24" pos:end="2387:24">s</name></expr></argument>, <argument pos:start="2387:27" pos:end="2387:33"><expr pos:start="2387:27" pos:end="2387:33"><name pos:start="2387:27" pos:end="2387:33">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2389:9" pos:end="2389:31"><expr pos:start="2389:9" pos:end="2389:30"><call pos:start="2389:9" pos:end="2389:30"><name pos:start="2389:9" pos:end="2389:25">gen_op_movl_T0_im</name><argument_list pos:start="2389:26" pos:end="2389:30">(<argument pos:start="2389:27" pos:end="2389:29"><expr pos:start="2389:27" pos:end="2389:29"><name pos:start="2389:27" pos:end="2389:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2391:9" pos:end="2391:55"><expr pos:start="2391:9" pos:end="2391:54"><call pos:start="2391:9" pos:end="2391:54"><name pos:start="2391:9" pos:end="2391:25">gen_op_mov_reg_T0</name><argument_list pos:start="2391:26" pos:end="2391:54">(<argument pos:start="2391:27" pos:end="2391:33"><expr pos:start="2391:27" pos:end="2391:33"><name pos:start="2391:27" pos:end="2391:33">OT_BYTE</name></expr></argument>, <argument pos:start="2391:36" pos:end="2391:53"><expr pos:start="2391:36" pos:end="2391:53"><operator pos:start="2391:36" pos:end="2391:36">(</operator><name pos:start="2391:37" pos:end="2391:37">b</name> <operator pos:start="2391:39" pos:end="2391:39">&amp;</operator> <literal type="number" pos:start="2391:41" pos:end="2391:41">7</literal><operator pos:start="2391:42" pos:end="2391:42">)</operator> <operator pos:start="2391:44" pos:end="2391:44">|</operator> <call pos:start="2391:46" pos:end="2391:53"><name pos:start="2391:46" pos:end="2391:50">REX_B</name><argument_list pos:start="2391:51" pos:end="2391:53">(<argument pos:start="2391:52" pos:end="2391:52"><expr pos:start="2391:52" pos:end="2391:52"><name pos:start="2391:52" pos:end="2391:52">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2393:9" pos:end="2393:14">break;</break>

    <case pos:start="2395:5" pos:end="2398:0">case <expr pos:start="2395:10" pos:end="2395:22"><literal type="number" pos:start="2395:10" pos:end="2395:13">0xb8</literal> <operator pos:start="2395:15" pos:end="2395:17">...</operator> <literal type="number" pos:start="2395:19" pos:end="2395:22">0xbf</literal></expr>:</case> <comment type="block" pos:start="2395:25" pos:end="2395:39">/* mov R, Iv */</comment>

<cpp:ifdef pos:start="2397:1" pos:end="2397:20">#<cpp:directive pos:start="2397:2" pos:end="2397:6">ifdef</cpp:directive> <name pos:start="2397:8" pos:end="2397:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="2399:9" pos:end="2431:9"><if pos:start="2399:9" pos:end="2415:9">if <condition pos:start="2399:12" pos:end="2399:23">(<expr pos:start="2399:13" pos:end="2399:22"><name pos:start="2399:13" pos:end="2399:17">dflag</name> <operator pos:start="2399:19" pos:end="2399:20">==</operator> <literal type="number" pos:start="2399:22" pos:end="2399:22">2</literal></expr>)</condition> <block pos:start="2399:25" pos:end="2415:9">{<block_content pos:start="2401:13" pos:end="2413:44">

            <decl_stmt pos:start="2401:13" pos:end="2401:25"><decl pos:start="2401:13" pos:end="2401:24"><type pos:start="2401:13" pos:end="2401:20"><name pos:start="2401:13" pos:end="2401:20">uint64_t</name></type> <name pos:start="2401:22" pos:end="2401:24">tmp</name></decl>;</decl_stmt>

            <comment type="block" pos:start="2403:13" pos:end="2403:29">/* 64 bit case */</comment>

            <expr_stmt pos:start="2405:13" pos:end="2405:34"><expr pos:start="2405:13" pos:end="2405:33"><name pos:start="2405:13" pos:end="2405:15">tmp</name> <operator pos:start="2405:17" pos:end="2405:17">=</operator> <call pos:start="2405:19" pos:end="2405:33"><name pos:start="2405:19" pos:end="2405:26">ldq_code</name><argument_list pos:start="2405:27" pos:end="2405:33">(<argument pos:start="2405:28" pos:end="2405:32"><expr pos:start="2405:28" pos:end="2405:32"><name pos:start="2405:28" pos:end="2405:32"><name pos:start="2405:28" pos:end="2405:28">s</name><operator pos:start="2405:29" pos:end="2405:30">-&gt;</operator><name pos:start="2405:31" pos:end="2405:32">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2407:13" pos:end="2407:23"><expr pos:start="2407:13" pos:end="2407:22"><name pos:start="2407:13" pos:end="2407:17"><name pos:start="2407:13" pos:end="2407:13">s</name><operator pos:start="2407:14" pos:end="2407:15">-&gt;</operator><name pos:start="2407:16" pos:end="2407:17">pc</name></name> <operator pos:start="2407:19" pos:end="2407:20">+=</operator> <literal type="number" pos:start="2407:22" pos:end="2407:22">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2409:13" pos:end="2409:37"><expr pos:start="2409:13" pos:end="2409:36"><name pos:start="2409:13" pos:end="2409:15">reg</name> <operator pos:start="2409:17" pos:end="2409:17">=</operator> <operator pos:start="2409:19" pos:end="2409:19">(</operator><name pos:start="2409:20" pos:end="2409:20">b</name> <operator pos:start="2409:22" pos:end="2409:22">&amp;</operator> <literal type="number" pos:start="2409:24" pos:end="2409:24">7</literal><operator pos:start="2409:25" pos:end="2409:25">)</operator> <operator pos:start="2409:27" pos:end="2409:27">|</operator> <call pos:start="2409:29" pos:end="2409:36"><name pos:start="2409:29" pos:end="2409:33">REX_B</name><argument_list pos:start="2409:34" pos:end="2409:36">(<argument pos:start="2409:35" pos:end="2409:35"><expr pos:start="2409:35" pos:end="2409:35"><name pos:start="2409:35" pos:end="2409:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2411:13" pos:end="2411:33"><expr pos:start="2411:13" pos:end="2411:32"><call pos:start="2411:13" pos:end="2411:32"><name pos:start="2411:13" pos:end="2411:27">gen_movtl_T0_im</name><argument_list pos:start="2411:28" pos:end="2411:32">(<argument pos:start="2411:29" pos:end="2411:31"><expr pos:start="2411:29" pos:end="2411:31"><name pos:start="2411:29" pos:end="2411:31">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2413:13" pos:end="2413:44"><expr pos:start="2413:13" pos:end="2413:43"><call pos:start="2413:13" pos:end="2413:43"><name pos:start="2413:13" pos:end="2413:29">gen_op_mov_reg_T0</name><argument_list pos:start="2413:30" pos:end="2413:43">(<argument pos:start="2413:31" pos:end="2413:37"><expr pos:start="2413:31" pos:end="2413:37"><name pos:start="2413:31" pos:end="2413:37">OT_QUAD</name></expr></argument>, <argument pos:start="2413:40" pos:end="2413:42"><expr pos:start="2413:40" pos:end="2413:42"><name pos:start="2413:40" pos:end="2413:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2415:11" pos:end="2431:9">else

<cpp:endif pos:start="2417:1" pos:end="2417:6">#<cpp:directive pos:start="2417:2" pos:end="2417:6">endif</cpp:directive></cpp:endif>

        <block pos:start="2419:9" pos:end="2431:9">{<block_content pos:start="2421:13" pos:end="2429:39">

            <expr_stmt pos:start="2421:13" pos:end="2421:43"><expr pos:start="2421:13" pos:end="2421:42"><name pos:start="2421:13" pos:end="2421:14">ot</name> <operator pos:start="2421:16" pos:end="2421:16">=</operator> <ternary pos:start="2421:18" pos:end="2421:42"><condition pos:start="2421:18" pos:end="2421:24"><expr pos:start="2421:18" pos:end="2421:22"><name pos:start="2421:18" pos:end="2421:22">dflag</name></expr> ?</condition><then pos:start="2421:26" pos:end="2421:32"> <expr pos:start="2421:26" pos:end="2421:32"><name pos:start="2421:26" pos:end="2421:32">OT_LONG</name></expr> </then><else pos:start="2421:34" pos:end="2421:42">: <expr pos:start="2421:36" pos:end="2421:42"><name pos:start="2421:36" pos:end="2421:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="2423:13" pos:end="2423:34"><expr pos:start="2423:13" pos:end="2423:33"><name pos:start="2423:13" pos:end="2423:15">val</name> <operator pos:start="2423:17" pos:end="2423:17">=</operator> <call pos:start="2423:19" pos:end="2423:33"><name pos:start="2423:19" pos:end="2423:26">insn_get</name><argument_list pos:start="2423:27" pos:end="2423:33">(<argument pos:start="2423:28" pos:end="2423:28"><expr pos:start="2423:28" pos:end="2423:28"><name pos:start="2423:28" pos:end="2423:28">s</name></expr></argument>, <argument pos:start="2423:31" pos:end="2423:32"><expr pos:start="2423:31" pos:end="2423:32"><name pos:start="2423:31" pos:end="2423:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2425:13" pos:end="2425:37"><expr pos:start="2425:13" pos:end="2425:36"><name pos:start="2425:13" pos:end="2425:15">reg</name> <operator pos:start="2425:17" pos:end="2425:17">=</operator> <operator pos:start="2425:19" pos:end="2425:19">(</operator><name pos:start="2425:20" pos:end="2425:20">b</name> <operator pos:start="2425:22" pos:end="2425:22">&amp;</operator> <literal type="number" pos:start="2425:24" pos:end="2425:24">7</literal><operator pos:start="2425:25" pos:end="2425:25">)</operator> <operator pos:start="2425:27" pos:end="2425:27">|</operator> <call pos:start="2425:29" pos:end="2425:36"><name pos:start="2425:29" pos:end="2425:33">REX_B</name><argument_list pos:start="2425:34" pos:end="2425:36">(<argument pos:start="2425:35" pos:end="2425:35"><expr pos:start="2425:35" pos:end="2425:35"><name pos:start="2425:35" pos:end="2425:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2427:13" pos:end="2427:35"><expr pos:start="2427:13" pos:end="2427:34"><call pos:start="2427:13" pos:end="2427:34"><name pos:start="2427:13" pos:end="2427:29">gen_op_movl_T0_im</name><argument_list pos:start="2427:30" pos:end="2427:34">(<argument pos:start="2427:31" pos:end="2427:33"><expr pos:start="2427:31" pos:end="2427:33"><name pos:start="2427:31" pos:end="2427:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2429:13" pos:end="2429:39"><expr pos:start="2429:13" pos:end="2429:38"><call pos:start="2429:13" pos:end="2429:38"><name pos:start="2429:13" pos:end="2429:29">gen_op_mov_reg_T0</name><argument_list pos:start="2429:30" pos:end="2429:38">(<argument pos:start="2429:31" pos:end="2429:32"><expr pos:start="2429:31" pos:end="2429:32"><name pos:start="2429:31" pos:end="2429:32">ot</name></expr></argument>, <argument pos:start="2429:35" pos:end="2429:37"><expr pos:start="2429:35" pos:end="2429:37"><name pos:start="2429:35" pos:end="2429:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2433:9" pos:end="2433:14">break;</break>



    <case pos:start="2437:5" pos:end="2437:23">case <expr pos:start="2437:10" pos:end="2437:22"><literal type="number" pos:start="2437:10" pos:end="2437:13">0x91</literal> <operator pos:start="2437:15" pos:end="2437:17">...</operator> <literal type="number" pos:start="2437:19" pos:end="2437:22">0x97</literal></expr>:</case> <comment type="block" pos:start="2437:25" pos:end="2437:41">/* xchg R, EAX */</comment>

        <expr_stmt pos:start="2439:9" pos:end="2439:29"><expr pos:start="2439:9" pos:end="2439:28"><name pos:start="2439:9" pos:end="2439:10">ot</name> <operator pos:start="2439:12" pos:end="2439:12">=</operator> <name pos:start="2439:14" pos:end="2439:18">dflag</name> <operator pos:start="2439:20" pos:end="2439:20">+</operator> <name pos:start="2439:22" pos:end="2439:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2441:9" pos:end="2441:33"><expr pos:start="2441:9" pos:end="2441:32"><name pos:start="2441:9" pos:end="2441:11">reg</name> <operator pos:start="2441:13" pos:end="2441:13">=</operator> <operator pos:start="2441:15" pos:end="2441:15">(</operator><name pos:start="2441:16" pos:end="2441:16">b</name> <operator pos:start="2441:18" pos:end="2441:18">&amp;</operator> <literal type="number" pos:start="2441:20" pos:end="2441:20">7</literal><operator pos:start="2441:21" pos:end="2441:21">)</operator> <operator pos:start="2441:23" pos:end="2441:23">|</operator> <call pos:start="2441:25" pos:end="2441:32"><name pos:start="2441:25" pos:end="2441:29">REX_B</name><argument_list pos:start="2441:30" pos:end="2441:32">(<argument pos:start="2441:31" pos:end="2441:31"><expr pos:start="2441:31" pos:end="2441:31"><name pos:start="2441:31" pos:end="2441:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2443:9" pos:end="2443:19"><expr pos:start="2443:9" pos:end="2443:18"><name pos:start="2443:9" pos:end="2443:10">rm</name> <operator pos:start="2443:12" pos:end="2443:12">=</operator> <name pos:start="2443:14" pos:end="2443:18">R_EAX</name></expr>;</expr_stmt>

        <goto pos:start="2445:9" pos:end="2445:25">goto <name pos:start="2445:14" pos:end="2445:24">do_xchg_reg</name>;</goto>

    <case pos:start="2447:5" pos:end="2447:14">case <expr pos:start="2447:10" pos:end="2447:13"><literal type="number" pos:start="2447:10" pos:end="2447:13">0x86</literal></expr>:</case>

    <case pos:start="2449:5" pos:end="2449:14">case <expr pos:start="2449:10" pos:end="2449:13"><literal type="number" pos:start="2449:10" pos:end="2449:13">0x87</literal></expr>:</case> <comment type="block" pos:start="2449:16" pos:end="2449:32">/* xchg Ev, Gv */</comment>

        <if_stmt pos:start="2451:9" pos:end="2457:33"><if pos:start="2451:9" pos:end="2453:25">if <condition pos:start="2451:12" pos:end="2451:25">(<expr pos:start="2451:13" pos:end="2451:24"><operator pos:start="2451:13" pos:end="2451:13">(</operator><name pos:start="2451:14" pos:end="2451:14">b</name> <operator pos:start="2451:16" pos:end="2451:16">&amp;</operator> <literal type="number" pos:start="2451:18" pos:end="2451:18">1</literal><operator pos:start="2451:19" pos:end="2451:19">)</operator> <operator pos:start="2451:21" pos:end="2451:22">==</operator> <literal type="number" pos:start="2451:24" pos:end="2451:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2453:13" pos:end="2453:25"><block_content pos:start="2453:13" pos:end="2453:25">

            <expr_stmt pos:start="2453:13" pos:end="2453:25"><expr pos:start="2453:13" pos:end="2453:24"><name pos:start="2453:13" pos:end="2453:14">ot</name> <operator pos:start="2453:16" pos:end="2453:16">=</operator> <name pos:start="2453:18" pos:end="2453:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2455:9" pos:end="2457:33">else<block type="pseudo" pos:start="2457:13" pos:end="2457:33"><block_content pos:start="2457:13" pos:end="2457:33">

            <expr_stmt pos:start="2457:13" pos:end="2457:33"><expr pos:start="2457:13" pos:end="2457:32"><name pos:start="2457:13" pos:end="2457:14">ot</name> <operator pos:start="2457:16" pos:end="2457:16">=</operator> <name pos:start="2457:18" pos:end="2457:22">dflag</name> <operator pos:start="2457:24" pos:end="2457:24">+</operator> <name pos:start="2457:26" pos:end="2457:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2459:9" pos:end="2459:35"><expr pos:start="2459:9" pos:end="2459:34"><name pos:start="2459:9" pos:end="2459:13">modrm</name> <operator pos:start="2459:15" pos:end="2459:15">=</operator> <call pos:start="2459:17" pos:end="2459:34"><name pos:start="2459:17" pos:end="2459:25">ldub_code</name><argument_list pos:start="2459:26" pos:end="2459:34">(<argument pos:start="2459:27" pos:end="2459:33"><expr pos:start="2459:27" pos:end="2459:33"><name pos:start="2459:27" pos:end="2459:31"><name pos:start="2459:27" pos:end="2459:27">s</name><operator pos:start="2459:28" pos:end="2459:29">-&gt;</operator><name pos:start="2459:30" pos:end="2459:31">pc</name></name><operator pos:start="2459:32" pos:end="2459:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2461:9" pos:end="2461:41"><expr pos:start="2461:9" pos:end="2461:40"><name pos:start="2461:9" pos:end="2461:11">reg</name> <operator pos:start="2461:13" pos:end="2461:13">=</operator> <operator pos:start="2461:15" pos:end="2461:15">(</operator><operator pos:start="2461:16" pos:end="2461:16">(</operator><name pos:start="2461:17" pos:end="2461:21">modrm</name> <operator pos:start="2461:23" pos:end="2461:24">&gt;&gt;</operator> <literal type="number" pos:start="2461:26" pos:end="2461:26">3</literal><operator pos:start="2461:27" pos:end="2461:27">)</operator> <operator pos:start="2461:29" pos:end="2461:29">&amp;</operator> <literal type="number" pos:start="2461:31" pos:end="2461:31">7</literal><operator pos:start="2461:32" pos:end="2461:32">)</operator> <operator pos:start="2461:34" pos:end="2461:34">|</operator> <name pos:start="2461:36" pos:end="2461:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2463:9" pos:end="2463:31"><expr pos:start="2463:9" pos:end="2463:30"><name pos:start="2463:9" pos:end="2463:11">mod</name> <operator pos:start="2463:13" pos:end="2463:13">=</operator> <operator pos:start="2463:15" pos:end="2463:15">(</operator><name pos:start="2463:16" pos:end="2463:20">modrm</name> <operator pos:start="2463:22" pos:end="2463:23">&gt;&gt;</operator> <literal type="number" pos:start="2463:25" pos:end="2463:25">6</literal><operator pos:start="2463:26" pos:end="2463:26">)</operator> <operator pos:start="2463:28" pos:end="2463:28">&amp;</operator> <literal type="number" pos:start="2463:30" pos:end="2463:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2465:9" pos:end="2501:9"><if pos:start="2465:9" pos:end="2479:9">if <condition pos:start="2465:12" pos:end="2465:21">(<expr pos:start="2465:13" pos:end="2465:20"><name pos:start="2465:13" pos:end="2465:15">mod</name> <operator pos:start="2465:17" pos:end="2465:18">==</operator> <literal type="number" pos:start="2465:20" pos:end="2465:20">3</literal></expr>)</condition> <block pos:start="2465:23" pos:end="2479:9">{<block_content pos:start="2467:13" pos:end="2477:39">

            <expr_stmt pos:start="2467:13" pos:end="2467:40"><expr pos:start="2467:13" pos:end="2467:39"><name pos:start="2467:13" pos:end="2467:14">rm</name> <operator pos:start="2467:16" pos:end="2467:16">=</operator> <operator pos:start="2467:18" pos:end="2467:18">(</operator><name pos:start="2467:19" pos:end="2467:23">modrm</name> <operator pos:start="2467:25" pos:end="2467:25">&amp;</operator> <literal type="number" pos:start="2467:27" pos:end="2467:27">7</literal><operator pos:start="2467:28" pos:end="2467:28">)</operator> <operator pos:start="2467:30" pos:end="2467:30">|</operator> <call pos:start="2467:32" pos:end="2467:39"><name pos:start="2467:32" pos:end="2467:36">REX_B</name><argument_list pos:start="2467:37" pos:end="2467:39">(<argument pos:start="2467:38" pos:end="2467:38"><expr pos:start="2467:38" pos:end="2467:38"><name pos:start="2467:38" pos:end="2467:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="2469:9" pos:end="2469:20"><name pos:start="2469:9" pos:end="2469:19">do_xchg_reg</name>:</label>

            <expr_stmt pos:start="2471:13" pos:end="2471:42"><expr pos:start="2471:13" pos:end="2471:41"><call pos:start="2471:13" pos:end="2471:41"><name pos:start="2471:13" pos:end="2471:29">gen_op_mov_TN_reg</name><argument_list pos:start="2471:30" pos:end="2471:41">(<argument pos:start="2471:31" pos:end="2471:32"><expr pos:start="2471:31" pos:end="2471:32"><name pos:start="2471:31" pos:end="2471:32">ot</name></expr></argument>, <argument pos:start="2471:35" pos:end="2471:35"><expr pos:start="2471:35" pos:end="2471:35"><literal type="number" pos:start="2471:35" pos:end="2471:35">0</literal></expr></argument>, <argument pos:start="2471:38" pos:end="2471:40"><expr pos:start="2471:38" pos:end="2471:40"><name pos:start="2471:38" pos:end="2471:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2473:13" pos:end="2473:41"><expr pos:start="2473:13" pos:end="2473:40"><call pos:start="2473:13" pos:end="2473:40"><name pos:start="2473:13" pos:end="2473:29">gen_op_mov_TN_reg</name><argument_list pos:start="2473:30" pos:end="2473:40">(<argument pos:start="2473:31" pos:end="2473:32"><expr pos:start="2473:31" pos:end="2473:32"><name pos:start="2473:31" pos:end="2473:32">ot</name></expr></argument>, <argument pos:start="2473:35" pos:end="2473:35"><expr pos:start="2473:35" pos:end="2473:35"><literal type="number" pos:start="2473:35" pos:end="2473:35">1</literal></expr></argument>, <argument pos:start="2473:38" pos:end="2473:39"><expr pos:start="2473:38" pos:end="2473:39"><name pos:start="2473:38" pos:end="2473:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2475:13" pos:end="2475:38"><expr pos:start="2475:13" pos:end="2475:37"><call pos:start="2475:13" pos:end="2475:37"><name pos:start="2475:13" pos:end="2475:29">gen_op_mov_reg_T0</name><argument_list pos:start="2475:30" pos:end="2475:37">(<argument pos:start="2475:31" pos:end="2475:32"><expr pos:start="2475:31" pos:end="2475:32"><name pos:start="2475:31" pos:end="2475:32">ot</name></expr></argument>, <argument pos:start="2475:35" pos:end="2475:36"><expr pos:start="2475:35" pos:end="2475:36"><name pos:start="2475:35" pos:end="2475:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2477:13" pos:end="2477:39"><expr pos:start="2477:13" pos:end="2477:38"><call pos:start="2477:13" pos:end="2477:38"><name pos:start="2477:13" pos:end="2477:29">gen_op_mov_reg_T1</name><argument_list pos:start="2477:30" pos:end="2477:38">(<argument pos:start="2477:31" pos:end="2477:32"><expr pos:start="2477:31" pos:end="2477:32"><name pos:start="2477:31" pos:end="2477:32">ot</name></expr></argument>, <argument pos:start="2477:35" pos:end="2477:37"><expr pos:start="2477:35" pos:end="2477:37"><name pos:start="2477:35" pos:end="2477:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2479:11" pos:end="2501:9">else <block pos:start="2479:16" pos:end="2501:9">{<block_content pos:start="2481:13" pos:end="2499:39">

            <expr_stmt pos:start="2481:13" pos:end="2481:61"><expr pos:start="2481:13" pos:end="2481:60"><call pos:start="2481:13" pos:end="2481:60"><name pos:start="2481:13" pos:end="2481:25">gen_lea_modrm</name><argument_list pos:start="2481:26" pos:end="2481:60">(<argument pos:start="2481:27" pos:end="2481:27"><expr pos:start="2481:27" pos:end="2481:27"><name pos:start="2481:27" pos:end="2481:27">s</name></expr></argument>, <argument pos:start="2481:30" pos:end="2481:34"><expr pos:start="2481:30" pos:end="2481:34"><name pos:start="2481:30" pos:end="2481:34">modrm</name></expr></argument>, <argument pos:start="2481:37" pos:end="2481:45"><expr pos:start="2481:37" pos:end="2481:45"><operator pos:start="2481:37" pos:end="2481:37">&amp;</operator><name pos:start="2481:38" pos:end="2481:45">reg_addr</name></expr></argument>, <argument pos:start="2481:48" pos:end="2481:59"><expr pos:start="2481:48" pos:end="2481:59"><operator pos:start="2481:48" pos:end="2481:48">&amp;</operator><name pos:start="2481:49" pos:end="2481:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2483:13" pos:end="2483:42"><expr pos:start="2483:13" pos:end="2483:41"><call pos:start="2483:13" pos:end="2483:41"><name pos:start="2483:13" pos:end="2483:29">gen_op_mov_TN_reg</name><argument_list pos:start="2483:30" pos:end="2483:41">(<argument pos:start="2483:31" pos:end="2483:32"><expr pos:start="2483:31" pos:end="2483:32"><name pos:start="2483:31" pos:end="2483:32">ot</name></expr></argument>, <argument pos:start="2483:35" pos:end="2483:35"><expr pos:start="2483:35" pos:end="2483:35"><literal type="number" pos:start="2483:35" pos:end="2483:35">0</literal></expr></argument>, <argument pos:start="2483:38" pos:end="2483:40"><expr pos:start="2483:38" pos:end="2483:40"><name pos:start="2483:38" pos:end="2483:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2485:13" pos:end="2485:44">/* for xchg, lock is implicit */</comment>

            <if_stmt pos:start="2487:13" pos:end="2489:34"><if pos:start="2487:13" pos:end="2489:34">if <condition pos:start="2487:16" pos:end="2487:42">(<expr pos:start="2487:17" pos:end="2487:41"><operator pos:start="2487:17" pos:end="2487:17">!</operator><operator pos:start="2487:18" pos:end="2487:18">(</operator><name pos:start="2487:19" pos:end="2487:26">prefixes</name> <operator pos:start="2487:28" pos:end="2487:28">&amp;</operator> <name pos:start="2487:30" pos:end="2487:40">PREFIX_LOCK</name><operator pos:start="2487:41" pos:end="2487:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2489:17" pos:end="2489:34"><block_content pos:start="2489:17" pos:end="2489:34">

                <expr_stmt pos:start="2489:17" pos:end="2489:34"><expr pos:start="2489:17" pos:end="2489:33"><call pos:start="2489:17" pos:end="2489:33"><name pos:start="2489:17" pos:end="2489:31">gen_helper_lock</name><argument_list pos:start="2489:32" pos:end="2489:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2491:13" pos:end="2491:47"><expr pos:start="2491:13" pos:end="2491:46"><call pos:start="2491:13" pos:end="2491:46"><name pos:start="2491:13" pos:end="2491:27">gen_op_ld_T1_A0</name><argument_list pos:start="2491:28" pos:end="2491:46">(<argument pos:start="2491:29" pos:end="2491:45"><expr pos:start="2491:29" pos:end="2491:45"><name pos:start="2491:29" pos:end="2491:30">ot</name> <operator pos:start="2491:32" pos:end="2491:32">+</operator> <name pos:start="2491:34" pos:end="2491:45"><name pos:start="2491:34" pos:end="2491:34">s</name><operator pos:start="2491:35" pos:end="2491:36">-&gt;</operator><name pos:start="2491:37" pos:end="2491:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2493:13" pos:end="2493:47"><expr pos:start="2493:13" pos:end="2493:46"><call pos:start="2493:13" pos:end="2493:46"><name pos:start="2493:13" pos:end="2493:27">gen_op_st_T0_A0</name><argument_list pos:start="2493:28" pos:end="2493:46">(<argument pos:start="2493:29" pos:end="2493:45"><expr pos:start="2493:29" pos:end="2493:45"><name pos:start="2493:29" pos:end="2493:30">ot</name> <operator pos:start="2493:32" pos:end="2493:32">+</operator> <name pos:start="2493:34" pos:end="2493:45"><name pos:start="2493:34" pos:end="2493:34">s</name><operator pos:start="2493:35" pos:end="2493:36">-&gt;</operator><name pos:start="2493:37" pos:end="2493:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2495:13" pos:end="2497:36"><if pos:start="2495:13" pos:end="2497:36">if <condition pos:start="2495:16" pos:end="2495:42">(<expr pos:start="2495:17" pos:end="2495:41"><operator pos:start="2495:17" pos:end="2495:17">!</operator><operator pos:start="2495:18" pos:end="2495:18">(</operator><name pos:start="2495:19" pos:end="2495:26">prefixes</name> <operator pos:start="2495:28" pos:end="2495:28">&amp;</operator> <name pos:start="2495:30" pos:end="2495:40">PREFIX_LOCK</name><operator pos:start="2495:41" pos:end="2495:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2497:17" pos:end="2497:36"><block_content pos:start="2497:17" pos:end="2497:36">

                <expr_stmt pos:start="2497:17" pos:end="2497:36"><expr pos:start="2497:17" pos:end="2497:35"><call pos:start="2497:17" pos:end="2497:35"><name pos:start="2497:17" pos:end="2497:33">gen_helper_unlock</name><argument_list pos:start="2497:34" pos:end="2497:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2499:13" pos:end="2499:39"><expr pos:start="2499:13" pos:end="2499:38"><call pos:start="2499:13" pos:end="2499:38"><name pos:start="2499:13" pos:end="2499:29">gen_op_mov_reg_T1</name><argument_list pos:start="2499:30" pos:end="2499:38">(<argument pos:start="2499:31" pos:end="2499:32"><expr pos:start="2499:31" pos:end="2499:32"><name pos:start="2499:31" pos:end="2499:32">ot</name></expr></argument>, <argument pos:start="2499:35" pos:end="2499:37"><expr pos:start="2499:35" pos:end="2499:37"><name pos:start="2499:35" pos:end="2499:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2503:9" pos:end="2503:14">break;</break>

    <case pos:start="2505:5" pos:end="2505:14">case <expr pos:start="2505:10" pos:end="2505:13"><literal type="number" pos:start="2505:10" pos:end="2505:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="2505:16" pos:end="2505:27">/* les Gv */</comment>

        <if_stmt pos:start="2507:9" pos:end="2509:28"><if pos:start="2507:9" pos:end="2509:28">if <condition pos:start="2507:12" pos:end="2507:22">(<expr pos:start="2507:13" pos:end="2507:21"><call pos:start="2507:13" pos:end="2507:21"><name pos:start="2507:13" pos:end="2507:18">CODE64</name><argument_list pos:start="2507:19" pos:end="2507:21">(<argument pos:start="2507:20" pos:end="2507:20"><expr pos:start="2507:20" pos:end="2507:20"><name pos:start="2507:20" pos:end="2507:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2509:13" pos:end="2509:28"><block_content pos:start="2509:13" pos:end="2509:28">

            <goto pos:start="2509:13" pos:end="2509:28">goto <name pos:start="2509:18" pos:end="2509:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2511:9" pos:end="2511:18"><expr pos:start="2511:9" pos:end="2511:17"><name pos:start="2511:9" pos:end="2511:10">op</name> <operator pos:start="2511:12" pos:end="2511:12">=</operator> <name pos:start="2511:14" pos:end="2511:17">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="2513:9" pos:end="2513:20">goto <name pos:start="2513:14" pos:end="2513:19">do_lxx</name>;</goto>

    <case pos:start="2515:5" pos:end="2515:14">case <expr pos:start="2515:10" pos:end="2515:13"><literal type="number" pos:start="2515:10" pos:end="2515:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="2515:16" pos:end="2515:27">/* lds Gv */</comment>

        <if_stmt pos:start="2517:9" pos:end="2519:28"><if pos:start="2517:9" pos:end="2519:28">if <condition pos:start="2517:12" pos:end="2517:22">(<expr pos:start="2517:13" pos:end="2517:21"><call pos:start="2517:13" pos:end="2517:21"><name pos:start="2517:13" pos:end="2517:18">CODE64</name><argument_list pos:start="2517:19" pos:end="2517:21">(<argument pos:start="2517:20" pos:end="2517:20"><expr pos:start="2517:20" pos:end="2517:20"><name pos:start="2517:20" pos:end="2517:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2519:13" pos:end="2519:28"><block_content pos:start="2519:13" pos:end="2519:28">

            <goto pos:start="2519:13" pos:end="2519:28">goto <name pos:start="2519:18" pos:end="2519:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2521:9" pos:end="2521:18"><expr pos:start="2521:9" pos:end="2521:17"><name pos:start="2521:9" pos:end="2521:10">op</name> <operator pos:start="2521:12" pos:end="2521:12">=</operator> <name pos:start="2521:14" pos:end="2521:17">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="2523:9" pos:end="2523:20">goto <name pos:start="2523:14" pos:end="2523:19">do_lxx</name>;</goto>

    <case pos:start="2525:5" pos:end="2525:15">case <expr pos:start="2525:10" pos:end="2525:14"><literal type="number" pos:start="2525:10" pos:end="2525:14">0x1b2</literal></expr>:</case> <comment type="block" pos:start="2525:17" pos:end="2525:28">/* lss Gv */</comment>

        <expr_stmt pos:start="2527:9" pos:end="2527:18"><expr pos:start="2527:9" pos:end="2527:17"><name pos:start="2527:9" pos:end="2527:10">op</name> <operator pos:start="2527:12" pos:end="2527:12">=</operator> <name pos:start="2527:14" pos:end="2527:17">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="2529:9" pos:end="2529:20">goto <name pos:start="2529:14" pos:end="2529:19">do_lxx</name>;</goto>

    <case pos:start="2531:5" pos:end="2531:15">case <expr pos:start="2531:10" pos:end="2531:14"><literal type="number" pos:start="2531:10" pos:end="2531:14">0x1b4</literal></expr>:</case> <comment type="block" pos:start="2531:17" pos:end="2531:28">/* lfs Gv */</comment>

        <expr_stmt pos:start="2533:9" pos:end="2533:18"><expr pos:start="2533:9" pos:end="2533:17"><name pos:start="2533:9" pos:end="2533:10">op</name> <operator pos:start="2533:12" pos:end="2533:12">=</operator> <name pos:start="2533:14" pos:end="2533:17">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="2535:9" pos:end="2535:20">goto <name pos:start="2535:14" pos:end="2535:19">do_lxx</name>;</goto>

    <case pos:start="2537:5" pos:end="2537:15">case <expr pos:start="2537:10" pos:end="2537:14"><literal type="number" pos:start="2537:10" pos:end="2537:14">0x1b5</literal></expr>:</case> <comment type="block" pos:start="2537:17" pos:end="2537:28">/* lgs Gv */</comment>

        <expr_stmt pos:start="2539:9" pos:end="2539:18"><expr pos:start="2539:9" pos:end="2539:17"><name pos:start="2539:9" pos:end="2539:10">op</name> <operator pos:start="2539:12" pos:end="2539:12">=</operator> <name pos:start="2539:14" pos:end="2539:17">R_GS</name></expr>;</expr_stmt>

    <label pos:start="2541:5" pos:end="2541:11"><name pos:start="2541:5" pos:end="2541:10">do_lxx</name>:</label>

        <expr_stmt pos:start="2543:9" pos:end="2543:39"><expr pos:start="2543:9" pos:end="2543:38"><name pos:start="2543:9" pos:end="2543:10">ot</name> <operator pos:start="2543:12" pos:end="2543:12">=</operator> <ternary pos:start="2543:14" pos:end="2543:38"><condition pos:start="2543:14" pos:end="2543:20"><expr pos:start="2543:14" pos:end="2543:18"><name pos:start="2543:14" pos:end="2543:18">dflag</name></expr> ?</condition><then pos:start="2543:22" pos:end="2543:28"> <expr pos:start="2543:22" pos:end="2543:28"><name pos:start="2543:22" pos:end="2543:28">OT_LONG</name></expr> </then><else pos:start="2543:30" pos:end="2543:38">: <expr pos:start="2543:32" pos:end="2543:38"><name pos:start="2543:32" pos:end="2543:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="2545:9" pos:end="2545:35"><expr pos:start="2545:9" pos:end="2545:34"><name pos:start="2545:9" pos:end="2545:13">modrm</name> <operator pos:start="2545:15" pos:end="2545:15">=</operator> <call pos:start="2545:17" pos:end="2545:34"><name pos:start="2545:17" pos:end="2545:25">ldub_code</name><argument_list pos:start="2545:26" pos:end="2545:34">(<argument pos:start="2545:27" pos:end="2545:33"><expr pos:start="2545:27" pos:end="2545:33"><name pos:start="2545:27" pos:end="2545:31"><name pos:start="2545:27" pos:end="2545:27">s</name><operator pos:start="2545:28" pos:end="2545:29">-&gt;</operator><name pos:start="2545:30" pos:end="2545:31">pc</name></name><operator pos:start="2545:32" pos:end="2545:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2547:9" pos:end="2547:41"><expr pos:start="2547:9" pos:end="2547:40"><name pos:start="2547:9" pos:end="2547:11">reg</name> <operator pos:start="2547:13" pos:end="2547:13">=</operator> <operator pos:start="2547:15" pos:end="2547:15">(</operator><operator pos:start="2547:16" pos:end="2547:16">(</operator><name pos:start="2547:17" pos:end="2547:21">modrm</name> <operator pos:start="2547:23" pos:end="2547:24">&gt;&gt;</operator> <literal type="number" pos:start="2547:26" pos:end="2547:26">3</literal><operator pos:start="2547:27" pos:end="2547:27">)</operator> <operator pos:start="2547:29" pos:end="2547:29">&amp;</operator> <literal type="number" pos:start="2547:31" pos:end="2547:31">7</literal><operator pos:start="2547:32" pos:end="2547:32">)</operator> <operator pos:start="2547:34" pos:end="2547:34">|</operator> <name pos:start="2547:36" pos:end="2547:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2549:9" pos:end="2549:31"><expr pos:start="2549:9" pos:end="2549:30"><name pos:start="2549:9" pos:end="2549:11">mod</name> <operator pos:start="2549:13" pos:end="2549:13">=</operator> <operator pos:start="2549:15" pos:end="2549:15">(</operator><name pos:start="2549:16" pos:end="2549:20">modrm</name> <operator pos:start="2549:22" pos:end="2549:23">&gt;&gt;</operator> <literal type="number" pos:start="2549:25" pos:end="2549:25">6</literal><operator pos:start="2549:26" pos:end="2549:26">)</operator> <operator pos:start="2549:28" pos:end="2549:28">&amp;</operator> <literal type="number" pos:start="2549:30" pos:end="2549:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2551:9" pos:end="2553:28"><if pos:start="2551:9" pos:end="2553:28">if <condition pos:start="2551:12" pos:end="2551:21">(<expr pos:start="2551:13" pos:end="2551:20"><name pos:start="2551:13" pos:end="2551:15">mod</name> <operator pos:start="2551:17" pos:end="2551:18">==</operator> <literal type="number" pos:start="2551:20" pos:end="2551:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2553:13" pos:end="2553:28"><block_content pos:start="2553:13" pos:end="2553:28">

            <goto pos:start="2553:13" pos:end="2553:28">goto <name pos:start="2553:18" pos:end="2553:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2555:9" pos:end="2555:57"><expr pos:start="2555:9" pos:end="2555:56"><call pos:start="2555:9" pos:end="2555:56"><name pos:start="2555:9" pos:end="2555:21">gen_lea_modrm</name><argument_list pos:start="2555:22" pos:end="2555:56">(<argument pos:start="2555:23" pos:end="2555:23"><expr pos:start="2555:23" pos:end="2555:23"><name pos:start="2555:23" pos:end="2555:23">s</name></expr></argument>, <argument pos:start="2555:26" pos:end="2555:30"><expr pos:start="2555:26" pos:end="2555:30"><name pos:start="2555:26" pos:end="2555:30">modrm</name></expr></argument>, <argument pos:start="2555:33" pos:end="2555:41"><expr pos:start="2555:33" pos:end="2555:41"><operator pos:start="2555:33" pos:end="2555:33">&amp;</operator><name pos:start="2555:34" pos:end="2555:41">reg_addr</name></expr></argument>, <argument pos:start="2555:44" pos:end="2555:55"><expr pos:start="2555:44" pos:end="2555:55"><operator pos:start="2555:44" pos:end="2555:44">&amp;</operator><name pos:start="2555:45" pos:end="2555:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2557:9" pos:end="2557:43"><expr pos:start="2557:9" pos:end="2557:42"><call pos:start="2557:9" pos:end="2557:42"><name pos:start="2557:9" pos:end="2557:23">gen_op_ld_T1_A0</name><argument_list pos:start="2557:24" pos:end="2557:42">(<argument pos:start="2557:25" pos:end="2557:41"><expr pos:start="2557:25" pos:end="2557:41"><name pos:start="2557:25" pos:end="2557:26">ot</name> <operator pos:start="2557:28" pos:end="2557:28">+</operator> <name pos:start="2557:30" pos:end="2557:41"><name pos:start="2557:30" pos:end="2557:30">s</name><operator pos:start="2557:31" pos:end="2557:32">-&gt;</operator><name pos:start="2557:33" pos:end="2557:41">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2559:9" pos:end="2559:50"><expr pos:start="2559:9" pos:end="2559:49"><call pos:start="2559:9" pos:end="2559:49"><name pos:start="2559:9" pos:end="2559:21">gen_add_A0_im</name><argument_list pos:start="2559:22" pos:end="2559:49">(<argument pos:start="2559:23" pos:end="2559:23"><expr pos:start="2559:23" pos:end="2559:23"><name pos:start="2559:23" pos:end="2559:23">s</name></expr></argument>, <argument pos:start="2559:26" pos:end="2559:48"><expr pos:start="2559:26" pos:end="2559:48"><literal type="number" pos:start="2559:26" pos:end="2559:26">1</literal> <operator pos:start="2559:28" pos:end="2559:29">&lt;&lt;</operator> <operator pos:start="2559:31" pos:end="2559:31">(</operator><name pos:start="2559:32" pos:end="2559:33">ot</name> <operator pos:start="2559:35" pos:end="2559:35">-</operator> <name pos:start="2559:37" pos:end="2559:43">OT_WORD</name> <operator pos:start="2559:45" pos:end="2559:45">+</operator> <literal type="number" pos:start="2559:47" pos:end="2559:47">1</literal><operator pos:start="2559:48" pos:end="2559:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2561:9" pos:end="2561:66">/* load the segment first to handle exceptions properly */</comment>

        <expr_stmt pos:start="2563:9" pos:end="2563:49"><expr pos:start="2563:9" pos:end="2563:48"><call pos:start="2563:9" pos:end="2563:48"><name pos:start="2563:9" pos:end="2563:24">gen_op_ldu_T0_A0</name><argument_list pos:start="2563:25" pos:end="2563:48">(<argument pos:start="2563:26" pos:end="2563:47"><expr pos:start="2563:26" pos:end="2563:47"><name pos:start="2563:26" pos:end="2563:32">OT_WORD</name> <operator pos:start="2563:34" pos:end="2563:34">+</operator> <name pos:start="2563:36" pos:end="2563:47"><name pos:start="2563:36" pos:end="2563:36">s</name><operator pos:start="2563:37" pos:end="2563:38">-&gt;</operator><name pos:start="2563:39" pos:end="2563:47">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2565:9" pos:end="2565:54"><expr pos:start="2565:9" pos:end="2565:53"><call pos:start="2565:9" pos:end="2565:53"><name pos:start="2565:9" pos:end="2565:23">gen_movl_seg_T0</name><argument_list pos:start="2565:24" pos:end="2565:53">(<argument pos:start="2565:25" pos:end="2565:25"><expr pos:start="2565:25" pos:end="2565:25"><name pos:start="2565:25" pos:end="2565:25">s</name></expr></argument>, <argument pos:start="2565:28" pos:end="2565:29"><expr pos:start="2565:28" pos:end="2565:29"><name pos:start="2565:28" pos:end="2565:29">op</name></expr></argument>, <argument pos:start="2565:32" pos:end="2565:52"><expr pos:start="2565:32" pos:end="2565:52"><name pos:start="2565:32" pos:end="2565:39">pc_start</name> <operator pos:start="2565:41" pos:end="2565:41">-</operator> <name pos:start="2565:43" pos:end="2565:52"><name pos:start="2565:43" pos:end="2565:43">s</name><operator pos:start="2565:44" pos:end="2565:45">-&gt;</operator><name pos:start="2565:46" pos:end="2565:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2567:9" pos:end="2567:31">/* then put the data */</comment>

        <expr_stmt pos:start="2569:9" pos:end="2569:35"><expr pos:start="2569:9" pos:end="2569:34"><call pos:start="2569:9" pos:end="2569:34"><name pos:start="2569:9" pos:end="2569:25">gen_op_mov_reg_T1</name><argument_list pos:start="2569:26" pos:end="2569:34">(<argument pos:start="2569:27" pos:end="2569:28"><expr pos:start="2569:27" pos:end="2569:28"><name pos:start="2569:27" pos:end="2569:28">ot</name></expr></argument>, <argument pos:start="2569:31" pos:end="2569:33"><expr pos:start="2569:31" pos:end="2569:33"><name pos:start="2569:31" pos:end="2569:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2571:9" pos:end="2577:9"><if pos:start="2571:9" pos:end="2577:9">if <condition pos:start="2571:12" pos:end="2571:22">(<expr pos:start="2571:13" pos:end="2571:21"><name pos:start="2571:13" pos:end="2571:21"><name pos:start="2571:13" pos:end="2571:13">s</name><operator pos:start="2571:14" pos:end="2571:15">-&gt;</operator><name pos:start="2571:16" pos:end="2571:21">is_jmp</name></name></expr>)</condition> <block pos:start="2571:24" pos:end="2577:9">{<block_content pos:start="2573:13" pos:end="2575:23">

            <expr_stmt pos:start="2573:13" pos:end="2573:43"><expr pos:start="2573:13" pos:end="2573:42"><call pos:start="2573:13" pos:end="2573:42"><name pos:start="2573:13" pos:end="2573:22">gen_jmp_im</name><argument_list pos:start="2573:23" pos:end="2573:42">(<argument pos:start="2573:24" pos:end="2573:41"><expr pos:start="2573:24" pos:end="2573:41"><name pos:start="2573:24" pos:end="2573:28"><name pos:start="2573:24" pos:end="2573:24">s</name><operator pos:start="2573:25" pos:end="2573:26">-&gt;</operator><name pos:start="2573:27" pos:end="2573:28">pc</name></name> <operator pos:start="2573:30" pos:end="2573:30">-</operator> <name pos:start="2573:32" pos:end="2573:41"><name pos:start="2573:32" pos:end="2573:32">s</name><operator pos:start="2573:33" pos:end="2573:34">-&gt;</operator><name pos:start="2573:35" pos:end="2573:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2575:13" pos:end="2575:23"><expr pos:start="2575:13" pos:end="2575:22"><call pos:start="2575:13" pos:end="2575:22"><name pos:start="2575:13" pos:end="2575:19">gen_eob</name><argument_list pos:start="2575:20" pos:end="2575:22">(<argument pos:start="2575:21" pos:end="2575:21"><expr pos:start="2575:21" pos:end="2575:21"><name pos:start="2575:21" pos:end="2575:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2579:9" pos:end="2579:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2583:9" pos:end="2583:34">/************************/</comment>

        <comment type="block" pos:start="2585:9" pos:end="2585:20">/* shifts */</comment>

    <case pos:start="2587:5" pos:end="2587:14">case <expr pos:start="2587:10" pos:end="2587:13"><literal type="number" pos:start="2587:10" pos:end="2587:13">0xc0</literal></expr>:</case>

    <case pos:start="2589:5" pos:end="2589:14">case <expr pos:start="2589:10" pos:end="2589:13"><literal type="number" pos:start="2589:10" pos:end="2589:13">0xc1</literal></expr>:</case>

        <comment type="block" pos:start="2591:9" pos:end="2591:25">/* shift Ev,Ib */</comment>

        <expr_stmt pos:start="2593:9" pos:end="2593:18"><expr pos:start="2593:9" pos:end="2593:17"><name pos:start="2593:9" pos:end="2593:13">shift</name> <operator pos:start="2593:15" pos:end="2593:15">=</operator> <literal type="number" pos:start="2593:17" pos:end="2593:17">2</literal></expr>;</expr_stmt>

    <label pos:start="2595:5" pos:end="2595:9"><name pos:start="2595:5" pos:end="2595:8">grp2</name>:</label>

        <block pos:start="2597:9" pos:end="2655:9">{<block_content pos:start="2599:13" pos:end="2653:13">

            <if_stmt pos:start="2599:13" pos:end="2605:37"><if pos:start="2599:13" pos:end="2601:29">if <condition pos:start="2599:16" pos:end="2599:29">(<expr pos:start="2599:17" pos:end="2599:28"><operator pos:start="2599:17" pos:end="2599:17">(</operator><name pos:start="2599:18" pos:end="2599:18">b</name> <operator pos:start="2599:20" pos:end="2599:20">&amp;</operator> <literal type="number" pos:start="2599:22" pos:end="2599:22">1</literal><operator pos:start="2599:23" pos:end="2599:23">)</operator> <operator pos:start="2599:25" pos:end="2599:26">==</operator> <literal type="number" pos:start="2599:28" pos:end="2599:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2601:17" pos:end="2601:29"><block_content pos:start="2601:17" pos:end="2601:29">

                <expr_stmt pos:start="2601:17" pos:end="2601:29"><expr pos:start="2601:17" pos:end="2601:28"><name pos:start="2601:17" pos:end="2601:18">ot</name> <operator pos:start="2601:20" pos:end="2601:20">=</operator> <name pos:start="2601:22" pos:end="2601:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2603:13" pos:end="2605:37">else<block type="pseudo" pos:start="2605:17" pos:end="2605:37"><block_content pos:start="2605:17" pos:end="2605:37">

                <expr_stmt pos:start="2605:17" pos:end="2605:37"><expr pos:start="2605:17" pos:end="2605:36"><name pos:start="2605:17" pos:end="2605:18">ot</name> <operator pos:start="2605:20" pos:end="2605:20">=</operator> <name pos:start="2605:22" pos:end="2605:26">dflag</name> <operator pos:start="2605:28" pos:end="2605:28">+</operator> <name pos:start="2605:30" pos:end="2605:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="2609:13" pos:end="2609:39"><expr pos:start="2609:13" pos:end="2609:38"><name pos:start="2609:13" pos:end="2609:17">modrm</name> <operator pos:start="2609:19" pos:end="2609:19">=</operator> <call pos:start="2609:21" pos:end="2609:38"><name pos:start="2609:21" pos:end="2609:29">ldub_code</name><argument_list pos:start="2609:30" pos:end="2609:38">(<argument pos:start="2609:31" pos:end="2609:37"><expr pos:start="2609:31" pos:end="2609:37"><name pos:start="2609:31" pos:end="2609:35"><name pos:start="2609:31" pos:end="2609:31">s</name><operator pos:start="2609:32" pos:end="2609:33">-&gt;</operator><name pos:start="2609:34" pos:end="2609:35">pc</name></name><operator pos:start="2609:36" pos:end="2609:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2611:13" pos:end="2611:35"><expr pos:start="2611:13" pos:end="2611:34"><name pos:start="2611:13" pos:end="2611:15">mod</name> <operator pos:start="2611:17" pos:end="2611:17">=</operator> <operator pos:start="2611:19" pos:end="2611:19">(</operator><name pos:start="2611:20" pos:end="2611:24">modrm</name> <operator pos:start="2611:26" pos:end="2611:27">&gt;&gt;</operator> <literal type="number" pos:start="2611:29" pos:end="2611:29">6</literal><operator pos:start="2611:30" pos:end="2611:30">)</operator> <operator pos:start="2611:32" pos:end="2611:32">&amp;</operator> <literal type="number" pos:start="2611:34" pos:end="2611:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2613:13" pos:end="2613:34"><expr pos:start="2613:13" pos:end="2613:33"><name pos:start="2613:13" pos:end="2613:14">op</name> <operator pos:start="2613:16" pos:end="2613:16">=</operator> <operator pos:start="2613:18" pos:end="2613:18">(</operator><name pos:start="2613:19" pos:end="2613:23">modrm</name> <operator pos:start="2613:25" pos:end="2613:26">&gt;&gt;</operator> <literal type="number" pos:start="2613:28" pos:end="2613:28">3</literal><operator pos:start="2613:29" pos:end="2613:29">)</operator> <operator pos:start="2613:31" pos:end="2613:31">&amp;</operator> <literal type="number" pos:start="2613:33" pos:end="2613:33">7</literal></expr>;</expr_stmt>



            <if_stmt pos:start="2617:13" pos:end="2633:13"><if pos:start="2617:13" pos:end="2629:13">if <condition pos:start="2617:16" pos:end="2617:25">(<expr pos:start="2617:17" pos:end="2617:24"><name pos:start="2617:17" pos:end="2617:19">mod</name> <operator pos:start="2617:21" pos:end="2617:22">!=</operator> <literal type="number" pos:start="2617:24" pos:end="2617:24">3</literal></expr>)</condition> <block pos:start="2617:27" pos:end="2629:13">{<block_content pos:start="2619:17" pos:end="2627:32">

                <if_stmt pos:start="2619:17" pos:end="2623:17"><if pos:start="2619:17" pos:end="2623:17">if <condition pos:start="2619:20" pos:end="2619:31">(<expr pos:start="2619:21" pos:end="2619:30"><name pos:start="2619:21" pos:end="2619:25">shift</name> <operator pos:start="2619:27" pos:end="2619:28">==</operator> <literal type="number" pos:start="2619:30" pos:end="2619:30">2</literal></expr>)</condition> <block pos:start="2619:33" pos:end="2623:17">{<block_content pos:start="2621:21" pos:end="2621:38">

                    <expr_stmt pos:start="2621:21" pos:end="2621:38"><expr pos:start="2621:21" pos:end="2621:37"><name pos:start="2621:21" pos:end="2621:33"><name pos:start="2621:21" pos:end="2621:21">s</name><operator pos:start="2621:22" pos:end="2621:23">-&gt;</operator><name pos:start="2621:24" pos:end="2621:33">rip_offset</name></name> <operator pos:start="2621:35" pos:end="2621:35">=</operator> <literal type="number" pos:start="2621:37" pos:end="2621:37">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2625:17" pos:end="2625:65"><expr pos:start="2625:17" pos:end="2625:64"><call pos:start="2625:17" pos:end="2625:64"><name pos:start="2625:17" pos:end="2625:29">gen_lea_modrm</name><argument_list pos:start="2625:30" pos:end="2625:64">(<argument pos:start="2625:31" pos:end="2625:31"><expr pos:start="2625:31" pos:end="2625:31"><name pos:start="2625:31" pos:end="2625:31">s</name></expr></argument>, <argument pos:start="2625:34" pos:end="2625:38"><expr pos:start="2625:34" pos:end="2625:38"><name pos:start="2625:34" pos:end="2625:38">modrm</name></expr></argument>, <argument pos:start="2625:41" pos:end="2625:49"><expr pos:start="2625:41" pos:end="2625:49"><operator pos:start="2625:41" pos:end="2625:41">&amp;</operator><name pos:start="2625:42" pos:end="2625:49">reg_addr</name></expr></argument>, <argument pos:start="2625:52" pos:end="2625:63"><expr pos:start="2625:52" pos:end="2625:63"><operator pos:start="2625:52" pos:end="2625:52">&amp;</operator><name pos:start="2625:53" pos:end="2625:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2627:17" pos:end="2627:32"><expr pos:start="2627:17" pos:end="2627:31"><name pos:start="2627:17" pos:end="2627:21">opreg</name> <operator pos:start="2627:23" pos:end="2627:23">=</operator> <name pos:start="2627:25" pos:end="2627:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2629:15" pos:end="2633:13">else <block pos:start="2629:20" pos:end="2633:13">{<block_content pos:start="2631:17" pos:end="2631:47">

                <expr_stmt pos:start="2631:17" pos:end="2631:47"><expr pos:start="2631:17" pos:end="2631:46"><name pos:start="2631:17" pos:end="2631:21">opreg</name> <operator pos:start="2631:23" pos:end="2631:23">=</operator> <operator pos:start="2631:25" pos:end="2631:25">(</operator><name pos:start="2631:26" pos:end="2631:30">modrm</name> <operator pos:start="2631:32" pos:end="2631:32">&amp;</operator> <literal type="number" pos:start="2631:34" pos:end="2631:34">7</literal><operator pos:start="2631:35" pos:end="2631:35">)</operator> <operator pos:start="2631:37" pos:end="2631:37">|</operator> <call pos:start="2631:39" pos:end="2631:46"><name pos:start="2631:39" pos:end="2631:43">REX_B</name><argument_list pos:start="2631:44" pos:end="2631:46">(<argument pos:start="2631:45" pos:end="2631:45"><expr pos:start="2631:45" pos:end="2631:45"><name pos:start="2631:45" pos:end="2631:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="2637:13" pos:end="2637:28">/* simpler op */</comment>

            <if_stmt pos:start="2639:13" pos:end="2653:13"><if pos:start="2639:13" pos:end="2643:13">if <condition pos:start="2639:16" pos:end="2639:27">(<expr pos:start="2639:17" pos:end="2639:26"><name pos:start="2639:17" pos:end="2639:21">shift</name> <operator pos:start="2639:23" pos:end="2639:24">==</operator> <literal type="number" pos:start="2639:26" pos:end="2639:26">0</literal></expr>)</condition> <block pos:start="2639:29" pos:end="2643:13">{<block_content pos:start="2641:17" pos:end="2641:52">

                <expr_stmt pos:start="2641:17" pos:end="2641:52"><expr pos:start="2641:17" pos:end="2641:51"><call pos:start="2641:17" pos:end="2641:51"><name pos:start="2641:17" pos:end="2641:25">gen_shift</name><argument_list pos:start="2641:26" pos:end="2641:51">(<argument pos:start="2641:27" pos:end="2641:27"><expr pos:start="2641:27" pos:end="2641:27"><name pos:start="2641:27" pos:end="2641:27">s</name></expr></argument>, <argument pos:start="2641:30" pos:end="2641:31"><expr pos:start="2641:30" pos:end="2641:31"><name pos:start="2641:30" pos:end="2641:31">op</name></expr></argument>, <argument pos:start="2641:34" pos:end="2641:35"><expr pos:start="2641:34" pos:end="2641:35"><name pos:start="2641:34" pos:end="2641:35">ot</name></expr></argument>, <argument pos:start="2641:38" pos:end="2641:42"><expr pos:start="2641:38" pos:end="2641:42"><name pos:start="2641:38" pos:end="2641:42">opreg</name></expr></argument>, <argument pos:start="2641:45" pos:end="2641:50"><expr pos:start="2641:45" pos:end="2641:50"><name pos:start="2641:45" pos:end="2641:50">OR_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2643:15" pos:end="2653:13">else <block pos:start="2643:20" pos:end="2653:13">{<block_content pos:start="2645:17" pos:end="2651:52">

                <if_stmt pos:start="2645:17" pos:end="2649:17"><if pos:start="2645:17" pos:end="2649:17">if <condition pos:start="2645:20" pos:end="2645:31">(<expr pos:start="2645:21" pos:end="2645:30"><name pos:start="2645:21" pos:end="2645:25">shift</name> <operator pos:start="2645:27" pos:end="2645:28">==</operator> <literal type="number" pos:start="2645:30" pos:end="2645:30">2</literal></expr>)</condition> <block pos:start="2645:33" pos:end="2649:17">{<block_content pos:start="2647:21" pos:end="2647:47">

                    <expr_stmt pos:start="2647:21" pos:end="2647:47"><expr pos:start="2647:21" pos:end="2647:46"><name pos:start="2647:21" pos:end="2647:25">shift</name> <operator pos:start="2647:27" pos:end="2647:27">=</operator> <call pos:start="2647:29" pos:end="2647:46"><name pos:start="2647:29" pos:end="2647:37">ldub_code</name><argument_list pos:start="2647:38" pos:end="2647:46">(<argument pos:start="2647:39" pos:end="2647:45"><expr pos:start="2647:39" pos:end="2647:45"><name pos:start="2647:39" pos:end="2647:43"><name pos:start="2647:39" pos:end="2647:39">s</name><operator pos:start="2647:40" pos:end="2647:41">-&gt;</operator><name pos:start="2647:42" pos:end="2647:43">pc</name></name><operator pos:start="2647:44" pos:end="2647:45">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2651:17" pos:end="2651:52"><expr pos:start="2651:17" pos:end="2651:51"><call pos:start="2651:17" pos:end="2651:51"><name pos:start="2651:17" pos:end="2651:26">gen_shifti</name><argument_list pos:start="2651:27" pos:end="2651:51">(<argument pos:start="2651:28" pos:end="2651:28"><expr pos:start="2651:28" pos:end="2651:28"><name pos:start="2651:28" pos:end="2651:28">s</name></expr></argument>, <argument pos:start="2651:31" pos:end="2651:32"><expr pos:start="2651:31" pos:end="2651:32"><name pos:start="2651:31" pos:end="2651:32">op</name></expr></argument>, <argument pos:start="2651:35" pos:end="2651:36"><expr pos:start="2651:35" pos:end="2651:36"><name pos:start="2651:35" pos:end="2651:36">ot</name></expr></argument>, <argument pos:start="2651:39" pos:end="2651:43"><expr pos:start="2651:39" pos:end="2651:43"><name pos:start="2651:39" pos:end="2651:43">opreg</name></expr></argument>, <argument pos:start="2651:46" pos:end="2651:50"><expr pos:start="2651:46" pos:end="2651:50"><name pos:start="2651:46" pos:end="2651:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2657:9" pos:end="2657:14">break;</break>

    <case pos:start="2659:5" pos:end="2659:14">case <expr pos:start="2659:10" pos:end="2659:13"><literal type="number" pos:start="2659:10" pos:end="2659:13">0xd0</literal></expr>:</case>

    <case pos:start="2661:5" pos:end="2661:14">case <expr pos:start="2661:10" pos:end="2661:13"><literal type="number" pos:start="2661:10" pos:end="2661:13">0xd1</literal></expr>:</case>

        <comment type="block" pos:start="2663:9" pos:end="2663:24">/* shift Ev,1 */</comment>

        <expr_stmt pos:start="2665:9" pos:end="2665:18"><expr pos:start="2665:9" pos:end="2665:17"><name pos:start="2665:9" pos:end="2665:13">shift</name> <operator pos:start="2665:15" pos:end="2665:15">=</operator> <literal type="number" pos:start="2665:17" pos:end="2665:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2667:9" pos:end="2667:18">goto <name pos:start="2667:14" pos:end="2667:17">grp2</name>;</goto>

    <case pos:start="2669:5" pos:end="2669:14">case <expr pos:start="2669:10" pos:end="2669:13"><literal type="number" pos:start="2669:10" pos:end="2669:13">0xd2</literal></expr>:</case>

    <case pos:start="2671:5" pos:end="2671:14">case <expr pos:start="2671:10" pos:end="2671:13"><literal type="number" pos:start="2671:10" pos:end="2671:13">0xd3</literal></expr>:</case>

        <comment type="block" pos:start="2673:9" pos:end="2673:25">/* shift Ev,cl */</comment>

        <expr_stmt pos:start="2675:9" pos:end="2675:18"><expr pos:start="2675:9" pos:end="2675:17"><name pos:start="2675:9" pos:end="2675:13">shift</name> <operator pos:start="2675:15" pos:end="2675:15">=</operator> <literal type="number" pos:start="2675:17" pos:end="2675:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="2677:9" pos:end="2677:18">goto <name pos:start="2677:14" pos:end="2677:17">grp2</name>;</goto>



    <case pos:start="2681:5" pos:end="2681:15">case <expr pos:start="2681:10" pos:end="2681:14"><literal type="number" pos:start="2681:10" pos:end="2681:14">0x1a4</literal></expr>:</case> <comment type="block" pos:start="2681:17" pos:end="2681:30">/* shld imm */</comment>

        <expr_stmt pos:start="2683:9" pos:end="2683:15"><expr pos:start="2683:9" pos:end="2683:14"><name pos:start="2683:9" pos:end="2683:10">op</name> <operator pos:start="2683:12" pos:end="2683:12">=</operator> <literal type="number" pos:start="2683:14" pos:end="2683:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2685:9" pos:end="2685:18"><expr pos:start="2685:9" pos:end="2685:17"><name pos:start="2685:9" pos:end="2685:13">shift</name> <operator pos:start="2685:15" pos:end="2685:15">=</operator> <literal type="number" pos:start="2685:17" pos:end="2685:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2687:9" pos:end="2687:23">goto <name pos:start="2687:14" pos:end="2687:22">do_shiftd</name>;</goto>

    <case pos:start="2689:5" pos:end="2689:15">case <expr pos:start="2689:10" pos:end="2689:14"><literal type="number" pos:start="2689:10" pos:end="2689:14">0x1a5</literal></expr>:</case> <comment type="block" pos:start="2689:17" pos:end="2689:29">/* shld cl */</comment>

        <expr_stmt pos:start="2691:9" pos:end="2691:15"><expr pos:start="2691:9" pos:end="2691:14"><name pos:start="2691:9" pos:end="2691:10">op</name> <operator pos:start="2691:12" pos:end="2691:12">=</operator> <literal type="number" pos:start="2691:14" pos:end="2691:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2693:9" pos:end="2693:18"><expr pos:start="2693:9" pos:end="2693:17"><name pos:start="2693:9" pos:end="2693:13">shift</name> <operator pos:start="2693:15" pos:end="2693:15">=</operator> <literal type="number" pos:start="2693:17" pos:end="2693:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="2695:9" pos:end="2695:23">goto <name pos:start="2695:14" pos:end="2695:22">do_shiftd</name>;</goto>

    <case pos:start="2697:5" pos:end="2697:15">case <expr pos:start="2697:10" pos:end="2697:14"><literal type="number" pos:start="2697:10" pos:end="2697:14">0x1ac</literal></expr>:</case> <comment type="block" pos:start="2697:17" pos:end="2697:30">/* shrd imm */</comment>

        <expr_stmt pos:start="2699:9" pos:end="2699:15"><expr pos:start="2699:9" pos:end="2699:14"><name pos:start="2699:9" pos:end="2699:10">op</name> <operator pos:start="2699:12" pos:end="2699:12">=</operator> <literal type="number" pos:start="2699:14" pos:end="2699:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2701:9" pos:end="2701:18"><expr pos:start="2701:9" pos:end="2701:17"><name pos:start="2701:9" pos:end="2701:13">shift</name> <operator pos:start="2701:15" pos:end="2701:15">=</operator> <literal type="number" pos:start="2701:17" pos:end="2701:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2703:9" pos:end="2703:23">goto <name pos:start="2703:14" pos:end="2703:22">do_shiftd</name>;</goto>

    <case pos:start="2705:5" pos:end="2705:15">case <expr pos:start="2705:10" pos:end="2705:14"><literal type="number" pos:start="2705:10" pos:end="2705:14">0x1ad</literal></expr>:</case> <comment type="block" pos:start="2705:17" pos:end="2705:29">/* shrd cl */</comment>

        <expr_stmt pos:start="2707:9" pos:end="2707:15"><expr pos:start="2707:9" pos:end="2707:14"><name pos:start="2707:9" pos:end="2707:10">op</name> <operator pos:start="2707:12" pos:end="2707:12">=</operator> <literal type="number" pos:start="2707:14" pos:end="2707:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2709:9" pos:end="2709:18"><expr pos:start="2709:9" pos:end="2709:17"><name pos:start="2709:9" pos:end="2709:13">shift</name> <operator pos:start="2709:15" pos:end="2709:15">=</operator> <literal type="number" pos:start="2709:17" pos:end="2709:17">0</literal></expr>;</expr_stmt>

    <label pos:start="2711:5" pos:end="2711:14"><name pos:start="2711:5" pos:end="2711:13">do_shiftd</name>:</label>

        <expr_stmt pos:start="2713:9" pos:end="2713:29"><expr pos:start="2713:9" pos:end="2713:28"><name pos:start="2713:9" pos:end="2713:10">ot</name> <operator pos:start="2713:12" pos:end="2713:12">=</operator> <name pos:start="2713:14" pos:end="2713:18">dflag</name> <operator pos:start="2713:20" pos:end="2713:20">+</operator> <name pos:start="2713:22" pos:end="2713:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2715:9" pos:end="2715:35"><expr pos:start="2715:9" pos:end="2715:34"><name pos:start="2715:9" pos:end="2715:13">modrm</name> <operator pos:start="2715:15" pos:end="2715:15">=</operator> <call pos:start="2715:17" pos:end="2715:34"><name pos:start="2715:17" pos:end="2715:25">ldub_code</name><argument_list pos:start="2715:26" pos:end="2715:34">(<argument pos:start="2715:27" pos:end="2715:33"><expr pos:start="2715:27" pos:end="2715:33"><name pos:start="2715:27" pos:end="2715:31"><name pos:start="2715:27" pos:end="2715:27">s</name><operator pos:start="2715:28" pos:end="2715:29">-&gt;</operator><name pos:start="2715:30" pos:end="2715:31">pc</name></name><operator pos:start="2715:32" pos:end="2715:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2717:9" pos:end="2717:31"><expr pos:start="2717:9" pos:end="2717:30"><name pos:start="2717:9" pos:end="2717:11">mod</name> <operator pos:start="2717:13" pos:end="2717:13">=</operator> <operator pos:start="2717:15" pos:end="2717:15">(</operator><name pos:start="2717:16" pos:end="2717:20">modrm</name> <operator pos:start="2717:22" pos:end="2717:23">&gt;&gt;</operator> <literal type="number" pos:start="2717:25" pos:end="2717:25">6</literal><operator pos:start="2717:26" pos:end="2717:26">)</operator> <operator pos:start="2717:28" pos:end="2717:28">&amp;</operator> <literal type="number" pos:start="2717:30" pos:end="2717:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2719:9" pos:end="2719:36"><expr pos:start="2719:9" pos:end="2719:35"><name pos:start="2719:9" pos:end="2719:10">rm</name> <operator pos:start="2719:12" pos:end="2719:12">=</operator> <operator pos:start="2719:14" pos:end="2719:14">(</operator><name pos:start="2719:15" pos:end="2719:19">modrm</name> <operator pos:start="2719:21" pos:end="2719:21">&amp;</operator> <literal type="number" pos:start="2719:23" pos:end="2719:23">7</literal><operator pos:start="2719:24" pos:end="2719:24">)</operator> <operator pos:start="2719:26" pos:end="2719:26">|</operator> <call pos:start="2719:28" pos:end="2719:35"><name pos:start="2719:28" pos:end="2719:32">REX_B</name><argument_list pos:start="2719:33" pos:end="2719:35">(<argument pos:start="2719:34" pos:end="2719:34"><expr pos:start="2719:34" pos:end="2719:34"><name pos:start="2719:34" pos:end="2719:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2721:9" pos:end="2721:41"><expr pos:start="2721:9" pos:end="2721:40"><name pos:start="2721:9" pos:end="2721:11">reg</name> <operator pos:start="2721:13" pos:end="2721:13">=</operator> <operator pos:start="2721:15" pos:end="2721:15">(</operator><operator pos:start="2721:16" pos:end="2721:16">(</operator><name pos:start="2721:17" pos:end="2721:21">modrm</name> <operator pos:start="2721:23" pos:end="2721:24">&gt;&gt;</operator> <literal type="number" pos:start="2721:26" pos:end="2721:26">3</literal><operator pos:start="2721:27" pos:end="2721:27">)</operator> <operator pos:start="2721:29" pos:end="2721:29">&amp;</operator> <literal type="number" pos:start="2721:31" pos:end="2721:31">7</literal><operator pos:start="2721:32" pos:end="2721:32">)</operator> <operator pos:start="2721:34" pos:end="2721:34">|</operator> <name pos:start="2721:36" pos:end="2721:40">rex_r</name></expr>;</expr_stmt>

        <if_stmt pos:start="2723:9" pos:end="2733:9"><if pos:start="2723:9" pos:end="2729:9">if <condition pos:start="2723:12" pos:end="2723:21">(<expr pos:start="2723:13" pos:end="2723:20"><name pos:start="2723:13" pos:end="2723:15">mod</name> <operator pos:start="2723:17" pos:end="2723:18">!=</operator> <literal type="number" pos:start="2723:20" pos:end="2723:20">3</literal></expr>)</condition> <block pos:start="2723:23" pos:end="2729:9">{<block_content pos:start="2725:13" pos:end="2727:28">

            <expr_stmt pos:start="2725:13" pos:end="2725:61"><expr pos:start="2725:13" pos:end="2725:60"><call pos:start="2725:13" pos:end="2725:60"><name pos:start="2725:13" pos:end="2725:25">gen_lea_modrm</name><argument_list pos:start="2725:26" pos:end="2725:60">(<argument pos:start="2725:27" pos:end="2725:27"><expr pos:start="2725:27" pos:end="2725:27"><name pos:start="2725:27" pos:end="2725:27">s</name></expr></argument>, <argument pos:start="2725:30" pos:end="2725:34"><expr pos:start="2725:30" pos:end="2725:34"><name pos:start="2725:30" pos:end="2725:34">modrm</name></expr></argument>, <argument pos:start="2725:37" pos:end="2725:45"><expr pos:start="2725:37" pos:end="2725:45"><operator pos:start="2725:37" pos:end="2725:37">&amp;</operator><name pos:start="2725:38" pos:end="2725:45">reg_addr</name></expr></argument>, <argument pos:start="2725:48" pos:end="2725:59"><expr pos:start="2725:48" pos:end="2725:59"><operator pos:start="2725:48" pos:end="2725:48">&amp;</operator><name pos:start="2725:49" pos:end="2725:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2727:13" pos:end="2727:28"><expr pos:start="2727:13" pos:end="2727:27"><name pos:start="2727:13" pos:end="2727:17">opreg</name> <operator pos:start="2727:19" pos:end="2727:19">=</operator> <name pos:start="2727:21" pos:end="2727:27">OR_TMP0</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2729:11" pos:end="2733:9">else <block pos:start="2729:16" pos:end="2733:9">{<block_content pos:start="2731:13" pos:end="2731:23">

            <expr_stmt pos:start="2731:13" pos:end="2731:23"><expr pos:start="2731:13" pos:end="2731:22"><name pos:start="2731:13" pos:end="2731:17">opreg</name> <operator pos:start="2731:19" pos:end="2731:19">=</operator> <name pos:start="2731:21" pos:end="2731:22">rm</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2735:9" pos:end="2735:38"><expr pos:start="2735:9" pos:end="2735:37"><call pos:start="2735:9" pos:end="2735:37"><name pos:start="2735:9" pos:end="2735:25">gen_op_mov_TN_reg</name><argument_list pos:start="2735:26" pos:end="2735:37">(<argument pos:start="2735:27" pos:end="2735:28"><expr pos:start="2735:27" pos:end="2735:28"><name pos:start="2735:27" pos:end="2735:28">ot</name></expr></argument>, <argument pos:start="2735:31" pos:end="2735:31"><expr pos:start="2735:31" pos:end="2735:31"><literal type="number" pos:start="2735:31" pos:end="2735:31">1</literal></expr></argument>, <argument pos:start="2735:34" pos:end="2735:36"><expr pos:start="2735:34" pos:end="2735:36"><name pos:start="2735:34" pos:end="2735:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="2739:9" pos:end="2749:9"><if pos:start="2739:9" pos:end="2745:9">if <condition pos:start="2739:12" pos:end="2739:18">(<expr pos:start="2739:13" pos:end="2739:17"><name pos:start="2739:13" pos:end="2739:17">shift</name></expr>)</condition> <block pos:start="2739:20" pos:end="2745:9">{<block_content pos:start="2741:13" pos:end="2743:41">

            <expr_stmt pos:start="2741:13" pos:end="2741:37"><expr pos:start="2741:13" pos:end="2741:36"><name pos:start="2741:13" pos:end="2741:15">val</name> <operator pos:start="2741:17" pos:end="2741:17">=</operator> <call pos:start="2741:19" pos:end="2741:36"><name pos:start="2741:19" pos:end="2741:27">ldub_code</name><argument_list pos:start="2741:28" pos:end="2741:36">(<argument pos:start="2741:29" pos:end="2741:35"><expr pos:start="2741:29" pos:end="2741:35"><name pos:start="2741:29" pos:end="2741:33"><name pos:start="2741:29" pos:end="2741:29">s</name><operator pos:start="2741:30" pos:end="2741:31">-&gt;</operator><name pos:start="2741:32" pos:end="2741:33">pc</name></name><operator pos:start="2741:34" pos:end="2741:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2743:13" pos:end="2743:41"><expr pos:start="2743:13" pos:end="2743:40"><call pos:start="2743:13" pos:end="2743:40"><name pos:start="2743:13" pos:end="2743:27">tcg_gen_movi_tl</name><argument_list pos:start="2743:28" pos:end="2743:40">(<argument pos:start="2743:29" pos:end="2743:34"><expr pos:start="2743:29" pos:end="2743:34"><name pos:start="2743:29" pos:end="2743:34">cpu_T3</name></expr></argument>, <argument pos:start="2743:37" pos:end="2743:39"><expr pos:start="2743:37" pos:end="2743:39"><name pos:start="2743:37" pos:end="2743:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2745:11" pos:end="2749:9">else <block pos:start="2745:16" pos:end="2749:9">{<block_content pos:start="2747:13" pos:end="2747:76">

            <expr_stmt pos:start="2747:13" pos:end="2747:76"><expr pos:start="2747:13" pos:end="2747:75"><call pos:start="2747:13" pos:end="2747:75"><name pos:start="2747:13" pos:end="2747:25">tcg_gen_ld_tl</name><argument_list pos:start="2747:26" pos:end="2747:75">(<argument pos:start="2747:27" pos:end="2747:32"><expr pos:start="2747:27" pos:end="2747:32"><name pos:start="2747:27" pos:end="2747:32">cpu_T3</name></expr></argument>, <argument pos:start="2747:35" pos:end="2747:41"><expr pos:start="2747:35" pos:end="2747:41"><name pos:start="2747:35" pos:end="2747:41">cpu_env</name></expr></argument>, <argument pos:start="2747:44" pos:end="2747:74"><expr pos:start="2747:44" pos:end="2747:74"><call pos:start="2747:44" pos:end="2747:74"><name pos:start="2747:44" pos:end="2747:51">offsetof</name><argument_list pos:start="2747:52" pos:end="2747:74">(<argument pos:start="2747:53" pos:end="2747:60"><expr pos:start="2747:53" pos:end="2747:60"><name pos:start="2747:53" pos:end="2747:60">CPUState</name></expr></argument>, <argument pos:start="2747:63" pos:end="2747:73"><expr pos:start="2747:63" pos:end="2747:73"><name pos:start="2747:63" pos:end="2747:73"><name pos:start="2747:63" pos:end="2747:66">regs</name><index pos:start="2747:67" pos:end="2747:73">[<expr pos:start="2747:68" pos:end="2747:72"><name pos:start="2747:68" pos:end="2747:72">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2751:9" pos:end="2751:46"><expr pos:start="2751:9" pos:end="2751:45"><call pos:start="2751:9" pos:end="2751:45"><name pos:start="2751:9" pos:end="2751:27">gen_shiftd_rm_T1_T3</name><argument_list pos:start="2751:28" pos:end="2751:45">(<argument pos:start="2751:29" pos:end="2751:29"><expr pos:start="2751:29" pos:end="2751:29"><name pos:start="2751:29" pos:end="2751:29">s</name></expr></argument>, <argument pos:start="2751:32" pos:end="2751:33"><expr pos:start="2751:32" pos:end="2751:33"><name pos:start="2751:32" pos:end="2751:33">ot</name></expr></argument>, <argument pos:start="2751:36" pos:end="2751:40"><expr pos:start="2751:36" pos:end="2751:40"><name pos:start="2751:36" pos:end="2751:40">opreg</name></expr></argument>, <argument pos:start="2751:43" pos:end="2751:44"><expr pos:start="2751:43" pos:end="2751:44"><name pos:start="2751:43" pos:end="2751:44">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2753:9" pos:end="2753:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2757:9" pos:end="2757:34">/************************/</comment>

        <comment type="block" pos:start="2759:9" pos:end="2759:20">/* floats */</comment>

    <case pos:start="2761:5" pos:end="2761:23">case <expr pos:start="2761:10" pos:end="2761:22"><literal type="number" pos:start="2761:10" pos:end="2761:13">0xd8</literal> <operator pos:start="2761:15" pos:end="2761:17">...</operator> <literal type="number" pos:start="2761:19" pos:end="2761:22">0xdf</literal></expr>:</case>

        <if_stmt pos:start="2763:9" pos:end="2773:9"><if pos:start="2763:9" pos:end="2773:9">if <condition pos:start="2763:12" pos:end="2763:49">(<expr pos:start="2763:13" pos:end="2763:48"><name pos:start="2763:13" pos:end="2763:20"><name pos:start="2763:13" pos:end="2763:13">s</name><operator pos:start="2763:14" pos:end="2763:15">-&gt;</operator><name pos:start="2763:16" pos:end="2763:20">flags</name></name> <operator pos:start="2763:22" pos:end="2763:22">&amp;</operator> <operator pos:start="2763:24" pos:end="2763:24">(</operator><name pos:start="2763:25" pos:end="2763:34">HF_EM_MASK</name> <operator pos:start="2763:36" pos:end="2763:36">|</operator> <name pos:start="2763:38" pos:end="2763:47">HF_TS_MASK</name><operator pos:start="2763:48" pos:end="2763:48">)</operator></expr>)</condition> <block pos:start="2763:51" pos:end="2773:9">{<block_content pos:start="2769:13" pos:end="2771:18">

            <comment type="block" pos:start="2765:13" pos:end="2765:72">/* if CR0.EM or CR0.TS are set, generate an FPU exception */</comment>

            <comment type="block" pos:start="2767:13" pos:end="2767:49">/* XXX: what to do if illegal op ? */</comment>

            <expr_stmt pos:start="2769:13" pos:end="2769:65"><expr pos:start="2769:13" pos:end="2769:64"><call pos:start="2769:13" pos:end="2769:64"><name pos:start="2769:13" pos:end="2769:25">gen_exception</name><argument_list pos:start="2769:26" pos:end="2769:64">(<argument pos:start="2769:27" pos:end="2769:27"><expr pos:start="2769:27" pos:end="2769:27"><name pos:start="2769:27" pos:end="2769:27">s</name></expr></argument>, <argument pos:start="2769:30" pos:end="2769:40"><expr pos:start="2769:30" pos:end="2769:40"><name pos:start="2769:30" pos:end="2769:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="2769:43" pos:end="2769:63"><expr pos:start="2769:43" pos:end="2769:63"><name pos:start="2769:43" pos:end="2769:50">pc_start</name> <operator pos:start="2769:52" pos:end="2769:52">-</operator> <name pos:start="2769:54" pos:end="2769:63"><name pos:start="2769:54" pos:end="2769:54">s</name><operator pos:start="2769:55" pos:end="2769:56">-&gt;</operator><name pos:start="2769:57" pos:end="2769:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2771:13" pos:end="2771:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2775:9" pos:end="2775:35"><expr pos:start="2775:9" pos:end="2775:34"><name pos:start="2775:9" pos:end="2775:13">modrm</name> <operator pos:start="2775:15" pos:end="2775:15">=</operator> <call pos:start="2775:17" pos:end="2775:34"><name pos:start="2775:17" pos:end="2775:25">ldub_code</name><argument_list pos:start="2775:26" pos:end="2775:34">(<argument pos:start="2775:27" pos:end="2775:33"><expr pos:start="2775:27" pos:end="2775:33"><name pos:start="2775:27" pos:end="2775:31"><name pos:start="2775:27" pos:end="2775:27">s</name><operator pos:start="2775:28" pos:end="2775:29">-&gt;</operator><name pos:start="2775:30" pos:end="2775:31">pc</name></name><operator pos:start="2775:32" pos:end="2775:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2777:9" pos:end="2777:31"><expr pos:start="2777:9" pos:end="2777:30"><name pos:start="2777:9" pos:end="2777:11">mod</name> <operator pos:start="2777:13" pos:end="2777:13">=</operator> <operator pos:start="2777:15" pos:end="2777:15">(</operator><name pos:start="2777:16" pos:end="2777:20">modrm</name> <operator pos:start="2777:22" pos:end="2777:23">&gt;&gt;</operator> <literal type="number" pos:start="2777:25" pos:end="2777:25">6</literal><operator pos:start="2777:26" pos:end="2777:26">)</operator> <operator pos:start="2777:28" pos:end="2777:28">&amp;</operator> <literal type="number" pos:start="2777:30" pos:end="2777:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2779:9" pos:end="2779:23"><expr pos:start="2779:9" pos:end="2779:22"><name pos:start="2779:9" pos:end="2779:10">rm</name> <operator pos:start="2779:12" pos:end="2779:12">=</operator> <name pos:start="2779:14" pos:end="2779:18">modrm</name> <operator pos:start="2779:20" pos:end="2779:20">&amp;</operator> <literal type="number" pos:start="2779:22" pos:end="2779:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2781:9" pos:end="2781:49"><expr pos:start="2781:9" pos:end="2781:48"><name pos:start="2781:9" pos:end="2781:10">op</name> <operator pos:start="2781:12" pos:end="2781:12">=</operator> <operator pos:start="2781:14" pos:end="2781:14">(</operator><operator pos:start="2781:15" pos:end="2781:15">(</operator><name pos:start="2781:16" pos:end="2781:16">b</name> <operator pos:start="2781:18" pos:end="2781:18">&amp;</operator> <literal type="number" pos:start="2781:20" pos:end="2781:20">7</literal><operator pos:start="2781:21" pos:end="2781:21">)</operator> <operator pos:start="2781:23" pos:end="2781:24">&lt;&lt;</operator> <literal type="number" pos:start="2781:26" pos:end="2781:26">3</literal><operator pos:start="2781:27" pos:end="2781:27">)</operator> <operator pos:start="2781:29" pos:end="2781:29">|</operator> <operator pos:start="2781:31" pos:end="2781:31">(</operator><operator pos:start="2781:32" pos:end="2781:32">(</operator><name pos:start="2781:33" pos:end="2781:37">modrm</name> <operator pos:start="2781:39" pos:end="2781:40">&gt;&gt;</operator> <literal type="number" pos:start="2781:42" pos:end="2781:42">3</literal><operator pos:start="2781:43" pos:end="2781:43">)</operator> <operator pos:start="2781:45" pos:end="2781:45">&amp;</operator> <literal type="number" pos:start="2781:47" pos:end="2781:47">7</literal><operator pos:start="2781:48" pos:end="2781:48">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="2783:9" pos:end="3791:9"><if pos:start="2783:9" pos:end="3195:9">if <condition pos:start="2783:12" pos:end="2783:21">(<expr pos:start="2783:13" pos:end="2783:20"><name pos:start="2783:13" pos:end="2783:15">mod</name> <operator pos:start="2783:17" pos:end="2783:18">!=</operator> <literal type="number" pos:start="2783:20" pos:end="2783:20">3</literal></expr>)</condition> <block pos:start="2783:23" pos:end="3195:9">{<block_content pos:start="2787:13" pos:end="3193:13">

            <comment type="block" pos:start="2785:13" pos:end="2785:27">/* memory op */</comment>

            <expr_stmt pos:start="2787:13" pos:end="2787:61"><expr pos:start="2787:13" pos:end="2787:60"><call pos:start="2787:13" pos:end="2787:60"><name pos:start="2787:13" pos:end="2787:25">gen_lea_modrm</name><argument_list pos:start="2787:26" pos:end="2787:60">(<argument pos:start="2787:27" pos:end="2787:27"><expr pos:start="2787:27" pos:end="2787:27"><name pos:start="2787:27" pos:end="2787:27">s</name></expr></argument>, <argument pos:start="2787:30" pos:end="2787:34"><expr pos:start="2787:30" pos:end="2787:34"><name pos:start="2787:30" pos:end="2787:34">modrm</name></expr></argument>, <argument pos:start="2787:37" pos:end="2787:45"><expr pos:start="2787:37" pos:end="2787:45"><operator pos:start="2787:37" pos:end="2787:37">&amp;</operator><name pos:start="2787:38" pos:end="2787:45">reg_addr</name></expr></argument>, <argument pos:start="2787:48" pos:end="2787:59"><expr pos:start="2787:48" pos:end="2787:59"><operator pos:start="2787:48" pos:end="2787:48">&amp;</operator><name pos:start="2787:49" pos:end="2787:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2789:13" pos:end="3193:13">switch<condition pos:start="2789:19" pos:end="2789:22">(<expr pos:start="2789:20" pos:end="2789:21"><name pos:start="2789:20" pos:end="2789:21">op</name></expr>)</condition> <block pos:start="2789:24" pos:end="3193:13">{<block_content pos:start="2791:13" pos:end="3191:32">

            <case pos:start="2791:13" pos:end="2791:31">case <expr pos:start="2791:18" pos:end="2791:30"><literal type="number" pos:start="2791:18" pos:end="2791:21">0x00</literal> <operator pos:start="2791:23" pos:end="2791:25">...</operator> <literal type="number" pos:start="2791:27" pos:end="2791:30">0x07</literal></expr>:</case> <comment type="block" pos:start="2791:33" pos:end="2791:43">/* fxxxs */</comment>

            <case pos:start="2793:13" pos:end="2793:31">case <expr pos:start="2793:18" pos:end="2793:30"><literal type="number" pos:start="2793:18" pos:end="2793:21">0x10</literal> <operator pos:start="2793:23" pos:end="2793:25">...</operator> <literal type="number" pos:start="2793:27" pos:end="2793:30">0x17</literal></expr>:</case> <comment type="block" pos:start="2793:33" pos:end="2793:44">/* fixxxl */</comment>

            <case pos:start="2795:13" pos:end="2795:31">case <expr pos:start="2795:18" pos:end="2795:30"><literal type="number" pos:start="2795:18" pos:end="2795:21">0x20</literal> <operator pos:start="2795:23" pos:end="2795:25">...</operator> <literal type="number" pos:start="2795:27" pos:end="2795:30">0x27</literal></expr>:</case> <comment type="block" pos:start="2795:33" pos:end="2795:43">/* fxxxl */</comment>

            <case pos:start="2797:13" pos:end="2797:31">case <expr pos:start="2797:18" pos:end="2797:30"><literal type="number" pos:start="2797:18" pos:end="2797:21">0x30</literal> <operator pos:start="2797:23" pos:end="2797:25">...</operator> <literal type="number" pos:start="2797:27" pos:end="2797:30">0x37</literal></expr>:</case> <comment type="block" pos:start="2797:33" pos:end="2797:43">/* fixxx */</comment>

                <block pos:start="2799:17" pos:end="2865:17">{<block_content pos:start="2801:21" pos:end="2863:21">

                    <decl_stmt pos:start="2801:21" pos:end="2801:28"><decl pos:start="2801:21" pos:end="2801:27"><type pos:start="2801:21" pos:end="2801:23"><name pos:start="2801:21" pos:end="2801:23">int</name></type> <name pos:start="2801:25" pos:end="2801:27">op1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="2803:21" pos:end="2803:33"><expr pos:start="2803:21" pos:end="2803:32"><name pos:start="2803:21" pos:end="2803:23">op1</name> <operator pos:start="2803:25" pos:end="2803:25">=</operator> <name pos:start="2803:27" pos:end="2803:28">op</name> <operator pos:start="2803:30" pos:end="2803:30">&amp;</operator> <literal type="number" pos:start="2803:32" pos:end="2803:32">7</literal></expr>;</expr_stmt>



                    <switch pos:start="2807:21" pos:end="2851:21">switch<condition pos:start="2807:27" pos:end="2807:35">(<expr pos:start="2807:28" pos:end="2807:34"><name pos:start="2807:28" pos:end="2807:29">op</name> <operator pos:start="2807:31" pos:end="2807:32">&gt;&gt;</operator> <literal type="number" pos:start="2807:34" pos:end="2807:34">4</literal></expr>)</condition> <block pos:start="2807:37" pos:end="2851:21">{<block_content pos:start="2809:21" pos:end="2849:30">

                    <case pos:start="2809:21" pos:end="2809:27">case <expr pos:start="2809:26" pos:end="2809:26"><literal type="number" pos:start="2809:26" pos:end="2809:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2811:25" pos:end="2811:64"><expr pos:start="2811:25" pos:end="2811:63"><call pos:start="2811:25" pos:end="2811:63"><name pos:start="2811:25" pos:end="2811:39">gen_op_ld_T0_A0</name><argument_list pos:start="2811:40" pos:end="2811:63">(<argument pos:start="2811:41" pos:end="2811:62"><expr pos:start="2811:41" pos:end="2811:62"><name pos:start="2811:41" pos:end="2811:47">OT_LONG</name> <operator pos:start="2811:49" pos:end="2811:49">+</operator> <name pos:start="2811:51" pos:end="2811:62"><name pos:start="2811:51" pos:end="2811:51">s</name><operator pos:start="2811:52" pos:end="2811:53">-&gt;</operator><name pos:start="2811:54" pos:end="2811:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2813:25" pos:end="2813:69"><expr pos:start="2813:25" pos:end="2813:68"><call pos:start="2813:25" pos:end="2813:68"><name pos:start="2813:25" pos:end="2813:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2813:45" pos:end="2813:68">(<argument pos:start="2813:46" pos:end="2813:57"><expr pos:start="2813:46" pos:end="2813:57"><name pos:start="2813:46" pos:end="2813:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2813:60" pos:end="2813:67"><expr pos:start="2813:60" pos:end="2813:67"><name pos:start="2813:60" pos:end="2813:67"><name pos:start="2813:60" pos:end="2813:64">cpu_T</name><index pos:start="2813:65" pos:end="2813:67">[<expr pos:start="2813:66" pos:end="2813:66"><literal type="number" pos:start="2813:66" pos:end="2813:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2815:25" pos:end="2815:58"><expr pos:start="2815:25" pos:end="2815:57"><call pos:start="2815:25" pos:end="2815:57"><name pos:start="2815:25" pos:end="2815:43">gen_helper_flds_FT0</name><argument_list pos:start="2815:44" pos:end="2815:57">(<argument pos:start="2815:45" pos:end="2815:56"><expr pos:start="2815:45" pos:end="2815:56"><name pos:start="2815:45" pos:end="2815:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2817:25" pos:end="2817:30">break;</break>

                    <case pos:start="2819:21" pos:end="2819:27">case <expr pos:start="2819:26" pos:end="2819:26"><literal type="number" pos:start="2819:26" pos:end="2819:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2821:25" pos:end="2821:64"><expr pos:start="2821:25" pos:end="2821:63"><call pos:start="2821:25" pos:end="2821:63"><name pos:start="2821:25" pos:end="2821:39">gen_op_ld_T0_A0</name><argument_list pos:start="2821:40" pos:end="2821:63">(<argument pos:start="2821:41" pos:end="2821:62"><expr pos:start="2821:41" pos:end="2821:62"><name pos:start="2821:41" pos:end="2821:47">OT_LONG</name> <operator pos:start="2821:49" pos:end="2821:49">+</operator> <name pos:start="2821:51" pos:end="2821:62"><name pos:start="2821:51" pos:end="2821:51">s</name><operator pos:start="2821:52" pos:end="2821:53">-&gt;</operator><name pos:start="2821:54" pos:end="2821:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2823:25" pos:end="2823:69"><expr pos:start="2823:25" pos:end="2823:68"><call pos:start="2823:25" pos:end="2823:68"><name pos:start="2823:25" pos:end="2823:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2823:45" pos:end="2823:68">(<argument pos:start="2823:46" pos:end="2823:57"><expr pos:start="2823:46" pos:end="2823:57"><name pos:start="2823:46" pos:end="2823:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2823:60" pos:end="2823:67"><expr pos:start="2823:60" pos:end="2823:67"><name pos:start="2823:60" pos:end="2823:67"><name pos:start="2823:60" pos:end="2823:64">cpu_T</name><index pos:start="2823:65" pos:end="2823:67">[<expr pos:start="2823:66" pos:end="2823:66"><literal type="number" pos:start="2823:66" pos:end="2823:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2825:25" pos:end="2825:59"><expr pos:start="2825:25" pos:end="2825:58"><call pos:start="2825:25" pos:end="2825:58"><name pos:start="2825:25" pos:end="2825:44">gen_helper_fildl_FT0</name><argument_list pos:start="2825:45" pos:end="2825:58">(<argument pos:start="2825:46" pos:end="2825:57"><expr pos:start="2825:46" pos:end="2825:57"><name pos:start="2825:46" pos:end="2825:57">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2827:25" pos:end="2827:30">break;</break>

                    <case pos:start="2829:21" pos:end="2829:27">case <expr pos:start="2829:26" pos:end="2829:26"><literal type="number" pos:start="2829:26" pos:end="2829:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2831:25" pos:end="2833:67"><expr pos:start="2831:25" pos:end="2833:66"><call pos:start="2831:25" pos:end="2833:66"><name pos:start="2831:25" pos:end="2831:41">tcg_gen_qemu_ld64</name><argument_list pos:start="2831:42" pos:end="2833:66">(<argument pos:start="2831:43" pos:end="2831:54"><expr pos:start="2831:43" pos:end="2831:54"><name pos:start="2831:43" pos:end="2831:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2831:57" pos:end="2831:62"><expr pos:start="2831:57" pos:end="2831:62"><name pos:start="2831:57" pos:end="2831:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="2833:43" pos:end="2833:65"><expr pos:start="2833:43" pos:end="2833:65"><operator pos:start="2833:43" pos:end="2833:43">(</operator><name pos:start="2833:44" pos:end="2833:55"><name pos:start="2833:44" pos:end="2833:44">s</name><operator pos:start="2833:45" pos:end="2833:46">-&gt;</operator><name pos:start="2833:47" pos:end="2833:55">mem_index</name></name> <operator pos:start="2833:57" pos:end="2833:58">&gt;&gt;</operator> <literal type="number" pos:start="2833:60" pos:end="2833:60">2</literal><operator pos:start="2833:61" pos:end="2833:61">)</operator> <operator pos:start="2833:63" pos:end="2833:63">-</operator> <literal type="number" pos:start="2833:65" pos:end="2833:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2835:25" pos:end="2835:58"><expr pos:start="2835:25" pos:end="2835:57"><call pos:start="2835:25" pos:end="2835:57"><name pos:start="2835:25" pos:end="2835:43">gen_helper_fldl_FT0</name><argument_list pos:start="2835:44" pos:end="2835:57">(<argument pos:start="2835:45" pos:end="2835:56"><expr pos:start="2835:45" pos:end="2835:56"><name pos:start="2835:45" pos:end="2835:56">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2837:25" pos:end="2837:30">break;</break>

                    <case pos:start="2839:21" pos:end="2839:27">case <expr pos:start="2839:26" pos:end="2839:26"><literal type="number" pos:start="2839:26" pos:end="2839:26">3</literal></expr>:</case>

                    <default pos:start="2841:21" pos:end="2841:28">default:</default>

                        <expr_stmt pos:start="2843:25" pos:end="2843:65"><expr pos:start="2843:25" pos:end="2843:64"><call pos:start="2843:25" pos:end="2843:64"><name pos:start="2843:25" pos:end="2843:40">gen_op_lds_T0_A0</name><argument_list pos:start="2843:41" pos:end="2843:64">(<argument pos:start="2843:42" pos:end="2843:63"><expr pos:start="2843:42" pos:end="2843:63"><name pos:start="2843:42" pos:end="2843:48">OT_WORD</name> <operator pos:start="2843:50" pos:end="2843:50">+</operator> <name pos:start="2843:52" pos:end="2843:63"><name pos:start="2843:52" pos:end="2843:52">s</name><operator pos:start="2843:53" pos:end="2843:54">-&gt;</operator><name pos:start="2843:55" pos:end="2843:63">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2845:25" pos:end="2845:69"><expr pos:start="2845:25" pos:end="2845:68"><call pos:start="2845:25" pos:end="2845:68"><name pos:start="2845:25" pos:end="2845:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2845:45" pos:end="2845:68">(<argument pos:start="2845:46" pos:end="2845:57"><expr pos:start="2845:46" pos:end="2845:57"><name pos:start="2845:46" pos:end="2845:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2845:60" pos:end="2845:67"><expr pos:start="2845:60" pos:end="2845:67"><name pos:start="2845:60" pos:end="2845:67"><name pos:start="2845:60" pos:end="2845:64">cpu_T</name><index pos:start="2845:65" pos:end="2845:67">[<expr pos:start="2845:66" pos:end="2845:66"><literal type="number" pos:start="2845:66" pos:end="2845:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2847:25" pos:end="2847:59"><expr pos:start="2847:25" pos:end="2847:58"><call pos:start="2847:25" pos:end="2847:58"><name pos:start="2847:25" pos:end="2847:44">gen_helper_fildl_FT0</name><argument_list pos:start="2847:45" pos:end="2847:58">(<argument pos:start="2847:46" pos:end="2847:57"><expr pos:start="2847:46" pos:end="2847:57"><name pos:start="2847:46" pos:end="2847:57">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2849:25" pos:end="2849:30">break;</break>

                    </block_content>}</block></switch>



                    <expr_stmt pos:start="2855:21" pos:end="2855:53"><expr pos:start="2855:21" pos:end="2855:52"><call pos:start="2855:21" pos:end="2855:52"><name pos:start="2855:21" pos:end="2855:47">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="2855:48" pos:end="2855:52">(<argument pos:start="2855:49" pos:end="2855:51"><expr pos:start="2855:49" pos:end="2855:51"><name pos:start="2855:49" pos:end="2855:51">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2857:21" pos:end="2863:21"><if pos:start="2857:21" pos:end="2863:21">if <condition pos:start="2857:24" pos:end="2857:33">(<expr pos:start="2857:25" pos:end="2857:32"><name pos:start="2857:25" pos:end="2857:27">op1</name> <operator pos:start="2857:29" pos:end="2857:30">==</operator> <literal type="number" pos:start="2857:32" pos:end="2857:32">3</literal></expr>)</condition> <block pos:start="2857:35" pos:end="2863:21">{<block_content pos:start="2861:25" pos:end="2861:42">

                        <comment type="block" pos:start="2859:25" pos:end="2859:45">/* fcomp needs pop */</comment>

                        <expr_stmt pos:start="2861:25" pos:end="2861:42"><expr pos:start="2861:25" pos:end="2861:41"><call pos:start="2861:25" pos:end="2861:41"><name pos:start="2861:25" pos:end="2861:39">gen_helper_fpop</name><argument_list pos:start="2861:40" pos:end="2861:41">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="2867:17" pos:end="2867:22">break;</break>

            <case pos:start="2869:13" pos:end="2869:22">case <expr pos:start="2869:18" pos:end="2869:21"><literal type="number" pos:start="2869:18" pos:end="2869:21">0x08</literal></expr>:</case> <comment type="block" pos:start="2869:24" pos:end="2869:33">/* flds */</comment>

            <case pos:start="2871:13" pos:end="2871:22">case <expr pos:start="2871:18" pos:end="2871:21"><literal type="number" pos:start="2871:18" pos:end="2871:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="2871:24" pos:end="2871:33">/* fsts */</comment>

            <case pos:start="2873:13" pos:end="2873:22">case <expr pos:start="2873:18" pos:end="2873:21"><literal type="number" pos:start="2873:18" pos:end="2873:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="2873:24" pos:end="2873:34">/* fstps */</comment>

            <case pos:start="2875:13" pos:end="2875:31">case <expr pos:start="2875:18" pos:end="2875:30"><literal type="number" pos:start="2875:18" pos:end="2875:21">0x18</literal> <operator pos:start="2875:23" pos:end="2875:25">...</operator> <literal type="number" pos:start="2875:27" pos:end="2875:30">0x1b</literal></expr>:</case> <comment type="block" pos:start="2875:33" pos:end="2875:67">/* fildl, fisttpl, fistl, fistpl */</comment>

            <case pos:start="2877:13" pos:end="2877:31">case <expr pos:start="2877:18" pos:end="2877:30"><literal type="number" pos:start="2877:18" pos:end="2877:21">0x28</literal> <operator pos:start="2877:23" pos:end="2877:25">...</operator> <literal type="number" pos:start="2877:27" pos:end="2877:30">0x2b</literal></expr>:</case> <comment type="block" pos:start="2877:33" pos:end="2877:65">/* fldl, fisttpll, fstl, fstpl */</comment>

            <case pos:start="2879:13" pos:end="2879:31">case <expr pos:start="2879:18" pos:end="2879:30"><literal type="number" pos:start="2879:18" pos:end="2879:21">0x38</literal> <operator pos:start="2879:23" pos:end="2879:25">...</operator> <literal type="number" pos:start="2879:27" pos:end="2879:30">0x3b</literal></expr>:</case> <comment type="block" pos:start="2879:33" pos:end="2879:67">/* filds, fisttps, fists, fistps */</comment>

                <switch pos:start="2881:17" pos:end="3031:17">switch<condition pos:start="2881:23" pos:end="2881:30">(<expr pos:start="2881:24" pos:end="2881:29"><name pos:start="2881:24" pos:end="2881:25">op</name> <operator pos:start="2881:27" pos:end="2881:27">&amp;</operator> <literal type="number" pos:start="2881:29" pos:end="2881:29">7</literal></expr>)</condition> <block pos:start="2881:32" pos:end="3031:17">{<block_content pos:start="2883:17" pos:end="3029:26">

                <case pos:start="2883:17" pos:end="2883:23">case <expr pos:start="2883:22" pos:end="2883:22"><literal type="number" pos:start="2883:22" pos:end="2883:22">0</literal></expr>:</case>

                    <switch pos:start="2885:21" pos:end="2929:21">switch<condition pos:start="2885:27" pos:end="2885:35">(<expr pos:start="2885:28" pos:end="2885:34"><name pos:start="2885:28" pos:end="2885:29">op</name> <operator pos:start="2885:31" pos:end="2885:32">&gt;&gt;</operator> <literal type="number" pos:start="2885:34" pos:end="2885:34">4</literal></expr>)</condition> <block pos:start="2885:37" pos:end="2929:21">{<block_content pos:start="2887:21" pos:end="2927:30">

                    <case pos:start="2887:21" pos:end="2887:27">case <expr pos:start="2887:26" pos:end="2887:26"><literal type="number" pos:start="2887:26" pos:end="2887:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2889:25" pos:end="2889:64"><expr pos:start="2889:25" pos:end="2889:63"><call pos:start="2889:25" pos:end="2889:63"><name pos:start="2889:25" pos:end="2889:39">gen_op_ld_T0_A0</name><argument_list pos:start="2889:40" pos:end="2889:63">(<argument pos:start="2889:41" pos:end="2889:62"><expr pos:start="2889:41" pos:end="2889:62"><name pos:start="2889:41" pos:end="2889:47">OT_LONG</name> <operator pos:start="2889:49" pos:end="2889:49">+</operator> <name pos:start="2889:51" pos:end="2889:62"><name pos:start="2889:51" pos:end="2889:51">s</name><operator pos:start="2889:52" pos:end="2889:53">-&gt;</operator><name pos:start="2889:54" pos:end="2889:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2891:25" pos:end="2891:69"><expr pos:start="2891:25" pos:end="2891:68"><call pos:start="2891:25" pos:end="2891:68"><name pos:start="2891:25" pos:end="2891:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2891:45" pos:end="2891:68">(<argument pos:start="2891:46" pos:end="2891:57"><expr pos:start="2891:46" pos:end="2891:57"><name pos:start="2891:46" pos:end="2891:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2891:60" pos:end="2891:67"><expr pos:start="2891:60" pos:end="2891:67"><name pos:start="2891:60" pos:end="2891:67"><name pos:start="2891:60" pos:end="2891:64">cpu_T</name><index pos:start="2891:65" pos:end="2891:67">[<expr pos:start="2891:66" pos:end="2891:66"><literal type="number" pos:start="2891:66" pos:end="2891:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2893:25" pos:end="2893:58"><expr pos:start="2893:25" pos:end="2893:57"><call pos:start="2893:25" pos:end="2893:57"><name pos:start="2893:25" pos:end="2893:43">gen_helper_flds_ST0</name><argument_list pos:start="2893:44" pos:end="2893:57">(<argument pos:start="2893:45" pos:end="2893:56"><expr pos:start="2893:45" pos:end="2893:56"><name pos:start="2893:45" pos:end="2893:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2895:25" pos:end="2895:30">break;</break>

                    <case pos:start="2897:21" pos:end="2897:27">case <expr pos:start="2897:26" pos:end="2897:26"><literal type="number" pos:start="2897:26" pos:end="2897:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2899:25" pos:end="2899:64"><expr pos:start="2899:25" pos:end="2899:63"><call pos:start="2899:25" pos:end="2899:63"><name pos:start="2899:25" pos:end="2899:39">gen_op_ld_T0_A0</name><argument_list pos:start="2899:40" pos:end="2899:63">(<argument pos:start="2899:41" pos:end="2899:62"><expr pos:start="2899:41" pos:end="2899:62"><name pos:start="2899:41" pos:end="2899:47">OT_LONG</name> <operator pos:start="2899:49" pos:end="2899:49">+</operator> <name pos:start="2899:51" pos:end="2899:62"><name pos:start="2899:51" pos:end="2899:51">s</name><operator pos:start="2899:52" pos:end="2899:53">-&gt;</operator><name pos:start="2899:54" pos:end="2899:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2901:25" pos:end="2901:69"><expr pos:start="2901:25" pos:end="2901:68"><call pos:start="2901:25" pos:end="2901:68"><name pos:start="2901:25" pos:end="2901:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2901:45" pos:end="2901:68">(<argument pos:start="2901:46" pos:end="2901:57"><expr pos:start="2901:46" pos:end="2901:57"><name pos:start="2901:46" pos:end="2901:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2901:60" pos:end="2901:67"><expr pos:start="2901:60" pos:end="2901:67"><name pos:start="2901:60" pos:end="2901:67"><name pos:start="2901:60" pos:end="2901:64">cpu_T</name><index pos:start="2901:65" pos:end="2901:67">[<expr pos:start="2901:66" pos:end="2901:66"><literal type="number" pos:start="2901:66" pos:end="2901:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2903:25" pos:end="2903:59"><expr pos:start="2903:25" pos:end="2903:58"><call pos:start="2903:25" pos:end="2903:58"><name pos:start="2903:25" pos:end="2903:44">gen_helper_fildl_ST0</name><argument_list pos:start="2903:45" pos:end="2903:58">(<argument pos:start="2903:46" pos:end="2903:57"><expr pos:start="2903:46" pos:end="2903:57"><name pos:start="2903:46" pos:end="2903:57">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2905:25" pos:end="2905:30">break;</break>

                    <case pos:start="2907:21" pos:end="2907:27">case <expr pos:start="2907:26" pos:end="2907:26"><literal type="number" pos:start="2907:26" pos:end="2907:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2909:25" pos:end="2911:67"><expr pos:start="2909:25" pos:end="2911:66"><call pos:start="2909:25" pos:end="2911:66"><name pos:start="2909:25" pos:end="2909:41">tcg_gen_qemu_ld64</name><argument_list pos:start="2909:42" pos:end="2911:66">(<argument pos:start="2909:43" pos:end="2909:54"><expr pos:start="2909:43" pos:end="2909:54"><name pos:start="2909:43" pos:end="2909:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2909:57" pos:end="2909:62"><expr pos:start="2909:57" pos:end="2909:62"><name pos:start="2909:57" pos:end="2909:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="2911:43" pos:end="2911:65"><expr pos:start="2911:43" pos:end="2911:65"><operator pos:start="2911:43" pos:end="2911:43">(</operator><name pos:start="2911:44" pos:end="2911:55"><name pos:start="2911:44" pos:end="2911:44">s</name><operator pos:start="2911:45" pos:end="2911:46">-&gt;</operator><name pos:start="2911:47" pos:end="2911:55">mem_index</name></name> <operator pos:start="2911:57" pos:end="2911:58">&gt;&gt;</operator> <literal type="number" pos:start="2911:60" pos:end="2911:60">2</literal><operator pos:start="2911:61" pos:end="2911:61">)</operator> <operator pos:start="2911:63" pos:end="2911:63">-</operator> <literal type="number" pos:start="2911:65" pos:end="2911:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2913:25" pos:end="2913:58"><expr pos:start="2913:25" pos:end="2913:57"><call pos:start="2913:25" pos:end="2913:57"><name pos:start="2913:25" pos:end="2913:43">gen_helper_fldl_ST0</name><argument_list pos:start="2913:44" pos:end="2913:57">(<argument pos:start="2913:45" pos:end="2913:56"><expr pos:start="2913:45" pos:end="2913:56"><name pos:start="2913:45" pos:end="2913:56">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2915:25" pos:end="2915:30">break;</break>

                    <case pos:start="2917:21" pos:end="2917:27">case <expr pos:start="2917:26" pos:end="2917:26"><literal type="number" pos:start="2917:26" pos:end="2917:26">3</literal></expr>:</case>

                    <default pos:start="2919:21" pos:end="2919:28">default:</default>

                        <expr_stmt pos:start="2921:25" pos:end="2921:65"><expr pos:start="2921:25" pos:end="2921:64"><call pos:start="2921:25" pos:end="2921:64"><name pos:start="2921:25" pos:end="2921:40">gen_op_lds_T0_A0</name><argument_list pos:start="2921:41" pos:end="2921:64">(<argument pos:start="2921:42" pos:end="2921:63"><expr pos:start="2921:42" pos:end="2921:63"><name pos:start="2921:42" pos:end="2921:48">OT_WORD</name> <operator pos:start="2921:50" pos:end="2921:50">+</operator> <name pos:start="2921:52" pos:end="2921:63"><name pos:start="2921:52" pos:end="2921:52">s</name><operator pos:start="2921:53" pos:end="2921:54">-&gt;</operator><name pos:start="2921:55" pos:end="2921:63">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2923:25" pos:end="2923:69"><expr pos:start="2923:25" pos:end="2923:68"><call pos:start="2923:25" pos:end="2923:68"><name pos:start="2923:25" pos:end="2923:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2923:45" pos:end="2923:68">(<argument pos:start="2923:46" pos:end="2923:57"><expr pos:start="2923:46" pos:end="2923:57"><name pos:start="2923:46" pos:end="2923:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2923:60" pos:end="2923:67"><expr pos:start="2923:60" pos:end="2923:67"><name pos:start="2923:60" pos:end="2923:67"><name pos:start="2923:60" pos:end="2923:64">cpu_T</name><index pos:start="2923:65" pos:end="2923:67">[<expr pos:start="2923:66" pos:end="2923:66"><literal type="number" pos:start="2923:66" pos:end="2923:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2925:25" pos:end="2925:59"><expr pos:start="2925:25" pos:end="2925:58"><call pos:start="2925:25" pos:end="2925:58"><name pos:start="2925:25" pos:end="2925:44">gen_helper_fildl_ST0</name><argument_list pos:start="2925:45" pos:end="2925:58">(<argument pos:start="2925:46" pos:end="2925:57"><expr pos:start="2925:46" pos:end="2925:57"><name pos:start="2925:46" pos:end="2925:57">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2927:25" pos:end="2927:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="2931:21" pos:end="2931:26">break;</break>

                <case pos:start="2933:17" pos:end="2933:23">case <expr pos:start="2933:22" pos:end="2933:22"><literal type="number" pos:start="2933:22" pos:end="2933:22">1</literal></expr>:</case>

                    <comment type="block" pos:start="2935:21" pos:end="2935:75">/* XXX: the corresponding CPUID bit must be tested ! */</comment>

                    <switch pos:start="2937:21" pos:end="2971:21">switch<condition pos:start="2937:27" pos:end="2937:35">(<expr pos:start="2937:28" pos:end="2937:34"><name pos:start="2937:28" pos:end="2937:29">op</name> <operator pos:start="2937:31" pos:end="2937:32">&gt;&gt;</operator> <literal type="number" pos:start="2937:34" pos:end="2937:34">4</literal></expr>)</condition> <block pos:start="2937:37" pos:end="2971:21">{<block_content pos:start="2939:21" pos:end="2969:30">

                    <case pos:start="2939:21" pos:end="2939:27">case <expr pos:start="2939:26" pos:end="2939:26"><literal type="number" pos:start="2939:26" pos:end="2939:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2941:25" pos:end="2941:60"><expr pos:start="2941:25" pos:end="2941:59"><call pos:start="2941:25" pos:end="2941:59"><name pos:start="2941:25" pos:end="2941:45">gen_helper_fisttl_ST0</name><argument_list pos:start="2941:46" pos:end="2941:59">(<argument pos:start="2941:47" pos:end="2941:58"><expr pos:start="2941:47" pos:end="2941:58"><name pos:start="2941:47" pos:end="2941:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2943:25" pos:end="2943:68"><expr pos:start="2943:25" pos:end="2943:67"><call pos:start="2943:25" pos:end="2943:67"><name pos:start="2943:25" pos:end="2943:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2943:44" pos:end="2943:67">(<argument pos:start="2943:45" pos:end="2943:52"><expr pos:start="2943:45" pos:end="2943:52"><name pos:start="2943:45" pos:end="2943:52"><name pos:start="2943:45" pos:end="2943:49">cpu_T</name><index pos:start="2943:50" pos:end="2943:52">[<expr pos:start="2943:51" pos:end="2943:51"><literal type="number" pos:start="2943:51" pos:end="2943:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2943:55" pos:end="2943:66"><expr pos:start="2943:55" pos:end="2943:66"><name pos:start="2943:55" pos:end="2943:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2945:25" pos:end="2945:64"><expr pos:start="2945:25" pos:end="2945:63"><call pos:start="2945:25" pos:end="2945:63"><name pos:start="2945:25" pos:end="2945:39">gen_op_st_T0_A0</name><argument_list pos:start="2945:40" pos:end="2945:63">(<argument pos:start="2945:41" pos:end="2945:62"><expr pos:start="2945:41" pos:end="2945:62"><name pos:start="2945:41" pos:end="2945:47">OT_LONG</name> <operator pos:start="2945:49" pos:end="2945:49">+</operator> <name pos:start="2945:51" pos:end="2945:62"><name pos:start="2945:51" pos:end="2945:51">s</name><operator pos:start="2945:52" pos:end="2945:53">-&gt;</operator><name pos:start="2945:54" pos:end="2945:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2947:25" pos:end="2947:30">break;</break>

                    <case pos:start="2949:21" pos:end="2949:27">case <expr pos:start="2949:26" pos:end="2949:26"><literal type="number" pos:start="2949:26" pos:end="2949:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2951:25" pos:end="2951:61"><expr pos:start="2951:25" pos:end="2951:60"><call pos:start="2951:25" pos:end="2951:60"><name pos:start="2951:25" pos:end="2951:46">gen_helper_fisttll_ST0</name><argument_list pos:start="2951:47" pos:end="2951:60">(<argument pos:start="2951:48" pos:end="2951:59"><expr pos:start="2951:48" pos:end="2951:59"><name pos:start="2951:48" pos:end="2951:59">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2953:25" pos:end="2955:67"><expr pos:start="2953:25" pos:end="2955:66"><call pos:start="2953:25" pos:end="2955:66"><name pos:start="2953:25" pos:end="2953:41">tcg_gen_qemu_st64</name><argument_list pos:start="2953:42" pos:end="2955:66">(<argument pos:start="2953:43" pos:end="2953:54"><expr pos:start="2953:43" pos:end="2953:54"><name pos:start="2953:43" pos:end="2953:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2953:57" pos:end="2953:62"><expr pos:start="2953:57" pos:end="2953:62"><name pos:start="2953:57" pos:end="2953:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="2955:43" pos:end="2955:65"><expr pos:start="2955:43" pos:end="2955:65"><operator pos:start="2955:43" pos:end="2955:43">(</operator><name pos:start="2955:44" pos:end="2955:55"><name pos:start="2955:44" pos:end="2955:44">s</name><operator pos:start="2955:45" pos:end="2955:46">-&gt;</operator><name pos:start="2955:47" pos:end="2955:55">mem_index</name></name> <operator pos:start="2955:57" pos:end="2955:58">&gt;&gt;</operator> <literal type="number" pos:start="2955:60" pos:end="2955:60">2</literal><operator pos:start="2955:61" pos:end="2955:61">)</operator> <operator pos:start="2955:63" pos:end="2955:63">-</operator> <literal type="number" pos:start="2955:65" pos:end="2955:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2957:25" pos:end="2957:30">break;</break>

                    <case pos:start="2959:21" pos:end="2959:27">case <expr pos:start="2959:26" pos:end="2959:26"><literal type="number" pos:start="2959:26" pos:end="2959:26">3</literal></expr>:</case>

                    <default pos:start="2961:21" pos:end="2961:28">default:</default>

                        <expr_stmt pos:start="2963:25" pos:end="2963:59"><expr pos:start="2963:25" pos:end="2963:58"><call pos:start="2963:25" pos:end="2963:58"><name pos:start="2963:25" pos:end="2963:44">gen_helper_fistt_ST0</name><argument_list pos:start="2963:45" pos:end="2963:58">(<argument pos:start="2963:46" pos:end="2963:57"><expr pos:start="2963:46" pos:end="2963:57"><name pos:start="2963:46" pos:end="2963:57">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2965:25" pos:end="2965:68"><expr pos:start="2965:25" pos:end="2965:67"><call pos:start="2965:25" pos:end="2965:67"><name pos:start="2965:25" pos:end="2965:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2965:44" pos:end="2965:67">(<argument pos:start="2965:45" pos:end="2965:52"><expr pos:start="2965:45" pos:end="2965:52"><name pos:start="2965:45" pos:end="2965:52"><name pos:start="2965:45" pos:end="2965:49">cpu_T</name><index pos:start="2965:50" pos:end="2965:52">[<expr pos:start="2965:51" pos:end="2965:51"><literal type="number" pos:start="2965:51" pos:end="2965:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2965:55" pos:end="2965:66"><expr pos:start="2965:55" pos:end="2965:66"><name pos:start="2965:55" pos:end="2965:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2967:25" pos:end="2967:64"><expr pos:start="2967:25" pos:end="2967:63"><call pos:start="2967:25" pos:end="2967:63"><name pos:start="2967:25" pos:end="2967:39">gen_op_st_T0_A0</name><argument_list pos:start="2967:40" pos:end="2967:63">(<argument pos:start="2967:41" pos:end="2967:62"><expr pos:start="2967:41" pos:end="2967:62"><name pos:start="2967:41" pos:end="2967:47">OT_WORD</name> <operator pos:start="2967:49" pos:end="2967:49">+</operator> <name pos:start="2967:51" pos:end="2967:62"><name pos:start="2967:51" pos:end="2967:51">s</name><operator pos:start="2967:52" pos:end="2967:53">-&gt;</operator><name pos:start="2967:54" pos:end="2967:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2969:25" pos:end="2969:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="2973:21" pos:end="2973:38"><expr pos:start="2973:21" pos:end="2973:37"><call pos:start="2973:21" pos:end="2973:37"><name pos:start="2973:21" pos:end="2973:35">gen_helper_fpop</name><argument_list pos:start="2973:36" pos:end="2973:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2975:21" pos:end="2975:26">break;</break>

                <default pos:start="2977:17" pos:end="2977:24">default:</default>

                    <switch pos:start="2979:21" pos:end="3023:21">switch<condition pos:start="2979:27" pos:end="2979:35">(<expr pos:start="2979:28" pos:end="2979:34"><name pos:start="2979:28" pos:end="2979:29">op</name> <operator pos:start="2979:31" pos:end="2979:32">&gt;&gt;</operator> <literal type="number" pos:start="2979:34" pos:end="2979:34">4</literal></expr>)</condition> <block pos:start="2979:37" pos:end="3023:21">{<block_content pos:start="2981:21" pos:end="3021:30">

                    <case pos:start="2981:21" pos:end="2981:27">case <expr pos:start="2981:26" pos:end="2981:26"><literal type="number" pos:start="2981:26" pos:end="2981:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2983:25" pos:end="2983:58"><expr pos:start="2983:25" pos:end="2983:57"><call pos:start="2983:25" pos:end="2983:57"><name pos:start="2983:25" pos:end="2983:43">gen_helper_fsts_ST0</name><argument_list pos:start="2983:44" pos:end="2983:57">(<argument pos:start="2983:45" pos:end="2983:56"><expr pos:start="2983:45" pos:end="2983:56"><name pos:start="2983:45" pos:end="2983:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2985:25" pos:end="2985:68"><expr pos:start="2985:25" pos:end="2985:67"><call pos:start="2985:25" pos:end="2985:67"><name pos:start="2985:25" pos:end="2985:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2985:44" pos:end="2985:67">(<argument pos:start="2985:45" pos:end="2985:52"><expr pos:start="2985:45" pos:end="2985:52"><name pos:start="2985:45" pos:end="2985:52"><name pos:start="2985:45" pos:end="2985:49">cpu_T</name><index pos:start="2985:50" pos:end="2985:52">[<expr pos:start="2985:51" pos:end="2985:51"><literal type="number" pos:start="2985:51" pos:end="2985:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2985:55" pos:end="2985:66"><expr pos:start="2985:55" pos:end="2985:66"><name pos:start="2985:55" pos:end="2985:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2987:25" pos:end="2987:64"><expr pos:start="2987:25" pos:end="2987:63"><call pos:start="2987:25" pos:end="2987:63"><name pos:start="2987:25" pos:end="2987:39">gen_op_st_T0_A0</name><argument_list pos:start="2987:40" pos:end="2987:63">(<argument pos:start="2987:41" pos:end="2987:62"><expr pos:start="2987:41" pos:end="2987:62"><name pos:start="2987:41" pos:end="2987:47">OT_LONG</name> <operator pos:start="2987:49" pos:end="2987:49">+</operator> <name pos:start="2987:51" pos:end="2987:62"><name pos:start="2987:51" pos:end="2987:51">s</name><operator pos:start="2987:52" pos:end="2987:53">-&gt;</operator><name pos:start="2987:54" pos:end="2987:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2989:25" pos:end="2989:30">break;</break>

                    <case pos:start="2991:21" pos:end="2991:27">case <expr pos:start="2991:26" pos:end="2991:26"><literal type="number" pos:start="2991:26" pos:end="2991:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2993:25" pos:end="2993:59"><expr pos:start="2993:25" pos:end="2993:58"><call pos:start="2993:25" pos:end="2993:58"><name pos:start="2993:25" pos:end="2993:44">gen_helper_fistl_ST0</name><argument_list pos:start="2993:45" pos:end="2993:58">(<argument pos:start="2993:46" pos:end="2993:57"><expr pos:start="2993:46" pos:end="2993:57"><name pos:start="2993:46" pos:end="2993:57">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2995:25" pos:end="2995:68"><expr pos:start="2995:25" pos:end="2995:67"><call pos:start="2995:25" pos:end="2995:67"><name pos:start="2995:25" pos:end="2995:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2995:44" pos:end="2995:67">(<argument pos:start="2995:45" pos:end="2995:52"><expr pos:start="2995:45" pos:end="2995:52"><name pos:start="2995:45" pos:end="2995:52"><name pos:start="2995:45" pos:end="2995:49">cpu_T</name><index pos:start="2995:50" pos:end="2995:52">[<expr pos:start="2995:51" pos:end="2995:51"><literal type="number" pos:start="2995:51" pos:end="2995:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2995:55" pos:end="2995:66"><expr pos:start="2995:55" pos:end="2995:66"><name pos:start="2995:55" pos:end="2995:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2997:25" pos:end="2997:64"><expr pos:start="2997:25" pos:end="2997:63"><call pos:start="2997:25" pos:end="2997:63"><name pos:start="2997:25" pos:end="2997:39">gen_op_st_T0_A0</name><argument_list pos:start="2997:40" pos:end="2997:63">(<argument pos:start="2997:41" pos:end="2997:62"><expr pos:start="2997:41" pos:end="2997:62"><name pos:start="2997:41" pos:end="2997:47">OT_LONG</name> <operator pos:start="2997:49" pos:end="2997:49">+</operator> <name pos:start="2997:51" pos:end="2997:62"><name pos:start="2997:51" pos:end="2997:51">s</name><operator pos:start="2997:52" pos:end="2997:53">-&gt;</operator><name pos:start="2997:54" pos:end="2997:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2999:25" pos:end="2999:30">break;</break>

                    <case pos:start="3001:21" pos:end="3001:27">case <expr pos:start="3001:26" pos:end="3001:26"><literal type="number" pos:start="3001:26" pos:end="3001:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="3003:25" pos:end="3003:58"><expr pos:start="3003:25" pos:end="3003:57"><call pos:start="3003:25" pos:end="3003:57"><name pos:start="3003:25" pos:end="3003:43">gen_helper_fstl_ST0</name><argument_list pos:start="3003:44" pos:end="3003:57">(<argument pos:start="3003:45" pos:end="3003:56"><expr pos:start="3003:45" pos:end="3003:56"><name pos:start="3003:45" pos:end="3003:56">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3005:25" pos:end="3007:67"><expr pos:start="3005:25" pos:end="3007:66"><call pos:start="3005:25" pos:end="3007:66"><name pos:start="3005:25" pos:end="3005:41">tcg_gen_qemu_st64</name><argument_list pos:start="3005:42" pos:end="3007:66">(<argument pos:start="3005:43" pos:end="3005:54"><expr pos:start="3005:43" pos:end="3005:54"><name pos:start="3005:43" pos:end="3005:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3005:57" pos:end="3005:62"><expr pos:start="3005:57" pos:end="3005:62"><name pos:start="3005:57" pos:end="3005:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="3007:43" pos:end="3007:65"><expr pos:start="3007:43" pos:end="3007:65"><operator pos:start="3007:43" pos:end="3007:43">(</operator><name pos:start="3007:44" pos:end="3007:55"><name pos:start="3007:44" pos:end="3007:44">s</name><operator pos:start="3007:45" pos:end="3007:46">-&gt;</operator><name pos:start="3007:47" pos:end="3007:55">mem_index</name></name> <operator pos:start="3007:57" pos:end="3007:58">&gt;&gt;</operator> <literal type="number" pos:start="3007:60" pos:end="3007:60">2</literal><operator pos:start="3007:61" pos:end="3007:61">)</operator> <operator pos:start="3007:63" pos:end="3007:63">-</operator> <literal type="number" pos:start="3007:65" pos:end="3007:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3009:25" pos:end="3009:30">break;</break>

                    <case pos:start="3011:21" pos:end="3011:27">case <expr pos:start="3011:26" pos:end="3011:26"><literal type="number" pos:start="3011:26" pos:end="3011:26">3</literal></expr>:</case>

                    <default pos:start="3013:21" pos:end="3013:28">default:</default>

                        <expr_stmt pos:start="3015:25" pos:end="3015:58"><expr pos:start="3015:25" pos:end="3015:57"><call pos:start="3015:25" pos:end="3015:57"><name pos:start="3015:25" pos:end="3015:43">gen_helper_fist_ST0</name><argument_list pos:start="3015:44" pos:end="3015:57">(<argument pos:start="3015:45" pos:end="3015:56"><expr pos:start="3015:45" pos:end="3015:56"><name pos:start="3015:45" pos:end="3015:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3017:25" pos:end="3017:68"><expr pos:start="3017:25" pos:end="3017:67"><call pos:start="3017:25" pos:end="3017:67"><name pos:start="3017:25" pos:end="3017:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="3017:44" pos:end="3017:67">(<argument pos:start="3017:45" pos:end="3017:52"><expr pos:start="3017:45" pos:end="3017:52"><name pos:start="3017:45" pos:end="3017:52"><name pos:start="3017:45" pos:end="3017:49">cpu_T</name><index pos:start="3017:50" pos:end="3017:52">[<expr pos:start="3017:51" pos:end="3017:51"><literal type="number" pos:start="3017:51" pos:end="3017:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3017:55" pos:end="3017:66"><expr pos:start="3017:55" pos:end="3017:66"><name pos:start="3017:55" pos:end="3017:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3019:25" pos:end="3019:64"><expr pos:start="3019:25" pos:end="3019:63"><call pos:start="3019:25" pos:end="3019:63"><name pos:start="3019:25" pos:end="3019:39">gen_op_st_T0_A0</name><argument_list pos:start="3019:40" pos:end="3019:63">(<argument pos:start="3019:41" pos:end="3019:62"><expr pos:start="3019:41" pos:end="3019:62"><name pos:start="3019:41" pos:end="3019:47">OT_WORD</name> <operator pos:start="3019:49" pos:end="3019:49">+</operator> <name pos:start="3019:51" pos:end="3019:62"><name pos:start="3019:51" pos:end="3019:51">s</name><operator pos:start="3019:52" pos:end="3019:53">-&gt;</operator><name pos:start="3019:54" pos:end="3019:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3021:25" pos:end="3021:30">break;</break>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="3025:21" pos:end="3027:42"><if pos:start="3025:21" pos:end="3027:42">if <condition pos:start="3025:24" pos:end="3025:38">(<expr pos:start="3025:25" pos:end="3025:37"><operator pos:start="3025:25" pos:end="3025:25">(</operator><name pos:start="3025:26" pos:end="3025:27">op</name> <operator pos:start="3025:29" pos:end="3025:29">&amp;</operator> <literal type="number" pos:start="3025:31" pos:end="3025:31">7</literal><operator pos:start="3025:32" pos:end="3025:32">)</operator> <operator pos:start="3025:34" pos:end="3025:35">==</operator> <literal type="number" pos:start="3025:37" pos:end="3025:37">3</literal></expr>)</condition><block type="pseudo" pos:start="3027:25" pos:end="3027:42"><block_content pos:start="3027:25" pos:end="3027:42">

                        <expr_stmt pos:start="3027:25" pos:end="3027:42"><expr pos:start="3027:25" pos:end="3027:41"><call pos:start="3027:25" pos:end="3027:41"><name pos:start="3027:25" pos:end="3027:39">gen_helper_fpop</name><argument_list pos:start="3027:40" pos:end="3027:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="3029:21" pos:end="3029:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3033:17" pos:end="3033:22">break;</break>

            <case pos:start="3035:13" pos:end="3035:22">case <expr pos:start="3035:18" pos:end="3035:21"><literal type="number" pos:start="3035:18" pos:end="3035:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="3035:24" pos:end="3035:39">/* fldenv mem */</comment>

                <if_stmt pos:start="3037:17" pos:end="3039:47"><if pos:start="3037:17" pos:end="3039:47">if <condition pos:start="3037:20" pos:end="3037:46">(<expr pos:start="3037:21" pos:end="3037:45"><name pos:start="3037:21" pos:end="3037:28"><name pos:start="3037:21" pos:end="3037:21">s</name><operator pos:start="3037:22" pos:end="3037:23">-&gt;</operator><name pos:start="3037:24" pos:end="3037:28">cc_op</name></name> <operator pos:start="3037:30" pos:end="3037:31">!=</operator> <name pos:start="3037:33" pos:end="3037:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3039:21" pos:end="3039:47"><block_content pos:start="3039:21" pos:end="3039:47">

                    <expr_stmt pos:start="3039:21" pos:end="3039:47"><expr pos:start="3039:21" pos:end="3039:46"><call pos:start="3039:21" pos:end="3039:46"><name pos:start="3039:21" pos:end="3039:36">gen_op_set_cc_op</name><argument_list pos:start="3039:37" pos:end="3039:46">(<argument pos:start="3039:38" pos:end="3039:45"><expr pos:start="3039:38" pos:end="3039:45"><name pos:start="3039:38" pos:end="3039:45"><name pos:start="3039:38" pos:end="3039:38">s</name><operator pos:start="3039:39" pos:end="3039:40">-&gt;</operator><name pos:start="3039:41" pos:end="3039:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3041:17" pos:end="3041:50"><expr pos:start="3041:17" pos:end="3041:49"><call pos:start="3041:17" pos:end="3041:49"><name pos:start="3041:17" pos:end="3041:26">gen_jmp_im</name><argument_list pos:start="3041:27" pos:end="3041:49">(<argument pos:start="3041:28" pos:end="3041:48"><expr pos:start="3041:28" pos:end="3041:48"><name pos:start="3041:28" pos:end="3041:35">pc_start</name> <operator pos:start="3041:37" pos:end="3041:37">-</operator> <name pos:start="3041:39" pos:end="3041:48"><name pos:start="3041:39" pos:end="3041:39">s</name><operator pos:start="3041:40" pos:end="3041:41">-&gt;</operator><name pos:start="3041:42" pos:end="3041:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3043:17" pos:end="3045:68"><expr pos:start="3043:17" pos:end="3045:67"><call pos:start="3043:17" pos:end="3045:67"><name pos:start="3043:17" pos:end="3043:33">gen_helper_fldenv</name><argument_list pos:start="3043:34" pos:end="3045:67">(

                                   <argument pos:start="3045:36" pos:end="3045:41"><expr pos:start="3045:36" pos:end="3045:41"><name pos:start="3045:36" pos:end="3045:41">cpu_A0</name></expr></argument>, <argument pos:start="3045:44" pos:end="3045:66"><expr pos:start="3045:44" pos:end="3045:66"><call pos:start="3045:44" pos:end="3045:66"><name pos:start="3045:44" pos:end="3045:56">tcg_const_i32</name><argument_list pos:start="3045:57" pos:end="3045:66">(<argument pos:start="3045:58" pos:end="3045:65"><expr pos:start="3045:58" pos:end="3045:65"><name pos:start="3045:58" pos:end="3045:65"><name pos:start="3045:58" pos:end="3045:58">s</name><operator pos:start="3045:59" pos:end="3045:60">-&gt;</operator><name pos:start="3045:61" pos:end="3045:65">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3047:17" pos:end="3047:22">break;</break>

            <case pos:start="3049:13" pos:end="3049:22">case <expr pos:start="3049:18" pos:end="3049:21"><literal type="number" pos:start="3049:18" pos:end="3049:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="3049:24" pos:end="3049:38">/* fldcw mem */</comment>

                <expr_stmt pos:start="3051:17" pos:end="3051:56"><expr pos:start="3051:17" pos:end="3051:55"><call pos:start="3051:17" pos:end="3051:55"><name pos:start="3051:17" pos:end="3051:31">gen_op_ld_T0_A0</name><argument_list pos:start="3051:32" pos:end="3051:55">(<argument pos:start="3051:33" pos:end="3051:54"><expr pos:start="3051:33" pos:end="3051:54"><name pos:start="3051:33" pos:end="3051:39">OT_WORD</name> <operator pos:start="3051:41" pos:end="3051:41">+</operator> <name pos:start="3051:43" pos:end="3051:54"><name pos:start="3051:43" pos:end="3051:43">s</name><operator pos:start="3051:44" pos:end="3051:45">-&gt;</operator><name pos:start="3051:46" pos:end="3051:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3053:17" pos:end="3053:61"><expr pos:start="3053:17" pos:end="3053:60"><call pos:start="3053:17" pos:end="3053:60"><name pos:start="3053:17" pos:end="3053:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="3053:37" pos:end="3053:60">(<argument pos:start="3053:38" pos:end="3053:49"><expr pos:start="3053:38" pos:end="3053:49"><name pos:start="3053:38" pos:end="3053:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3053:52" pos:end="3053:59"><expr pos:start="3053:52" pos:end="3053:59"><name pos:start="3053:52" pos:end="3053:59"><name pos:start="3053:52" pos:end="3053:56">cpu_T</name><index pos:start="3053:57" pos:end="3053:59">[<expr pos:start="3053:58" pos:end="3053:58"><literal type="number" pos:start="3053:58" pos:end="3053:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3055:17" pos:end="3055:47"><expr pos:start="3055:17" pos:end="3055:46"><call pos:start="3055:17" pos:end="3055:46"><name pos:start="3055:17" pos:end="3055:32">gen_helper_fldcw</name><argument_list pos:start="3055:33" pos:end="3055:46">(<argument pos:start="3055:34" pos:end="3055:45"><expr pos:start="3055:34" pos:end="3055:45"><name pos:start="3055:34" pos:end="3055:45">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3057:17" pos:end="3057:22">break;</break>

            <case pos:start="3059:13" pos:end="3059:22">case <expr pos:start="3059:18" pos:end="3059:21"><literal type="number" pos:start="3059:18" pos:end="3059:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="3059:24" pos:end="3059:40">/* fnstenv mem */</comment>

                <if_stmt pos:start="3061:17" pos:end="3063:47"><if pos:start="3061:17" pos:end="3063:47">if <condition pos:start="3061:20" pos:end="3061:46">(<expr pos:start="3061:21" pos:end="3061:45"><name pos:start="3061:21" pos:end="3061:28"><name pos:start="3061:21" pos:end="3061:21">s</name><operator pos:start="3061:22" pos:end="3061:23">-&gt;</operator><name pos:start="3061:24" pos:end="3061:28">cc_op</name></name> <operator pos:start="3061:30" pos:end="3061:31">!=</operator> <name pos:start="3061:33" pos:end="3061:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3063:21" pos:end="3063:47"><block_content pos:start="3063:21" pos:end="3063:47">

                    <expr_stmt pos:start="3063:21" pos:end="3063:47"><expr pos:start="3063:21" pos:end="3063:46"><call pos:start="3063:21" pos:end="3063:46"><name pos:start="3063:21" pos:end="3063:36">gen_op_set_cc_op</name><argument_list pos:start="3063:37" pos:end="3063:46">(<argument pos:start="3063:38" pos:end="3063:45"><expr pos:start="3063:38" pos:end="3063:45"><name pos:start="3063:38" pos:end="3063:45"><name pos:start="3063:38" pos:end="3063:38">s</name><operator pos:start="3063:39" pos:end="3063:40">-&gt;</operator><name pos:start="3063:41" pos:end="3063:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3065:17" pos:end="3065:50"><expr pos:start="3065:17" pos:end="3065:49"><call pos:start="3065:17" pos:end="3065:49"><name pos:start="3065:17" pos:end="3065:26">gen_jmp_im</name><argument_list pos:start="3065:27" pos:end="3065:49">(<argument pos:start="3065:28" pos:end="3065:48"><expr pos:start="3065:28" pos:end="3065:48"><name pos:start="3065:28" pos:end="3065:35">pc_start</name> <operator pos:start="3065:37" pos:end="3065:37">-</operator> <name pos:start="3065:39" pos:end="3065:48"><name pos:start="3065:39" pos:end="3065:39">s</name><operator pos:start="3065:40" pos:end="3065:41">-&gt;</operator><name pos:start="3065:42" pos:end="3065:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3067:17" pos:end="3067:67"><expr pos:start="3067:17" pos:end="3067:66"><call pos:start="3067:17" pos:end="3067:66"><name pos:start="3067:17" pos:end="3067:33">gen_helper_fstenv</name><argument_list pos:start="3067:34" pos:end="3067:66">(<argument pos:start="3067:35" pos:end="3067:40"><expr pos:start="3067:35" pos:end="3067:40"><name pos:start="3067:35" pos:end="3067:40">cpu_A0</name></expr></argument>, <argument pos:start="3067:43" pos:end="3067:65"><expr pos:start="3067:43" pos:end="3067:65"><call pos:start="3067:43" pos:end="3067:65"><name pos:start="3067:43" pos:end="3067:55">tcg_const_i32</name><argument_list pos:start="3067:56" pos:end="3067:65">(<argument pos:start="3067:57" pos:end="3067:64"><expr pos:start="3067:57" pos:end="3067:64"><name pos:start="3067:57" pos:end="3067:64"><name pos:start="3067:57" pos:end="3067:57">s</name><operator pos:start="3067:58" pos:end="3067:59">-&gt;</operator><name pos:start="3067:60" pos:end="3067:64">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3069:17" pos:end="3069:22">break;</break>

            <case pos:start="3071:13" pos:end="3071:22">case <expr pos:start="3071:18" pos:end="3071:21"><literal type="number" pos:start="3071:18" pos:end="3071:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="3071:24" pos:end="3071:39">/* fnstcw mem */</comment>

                <expr_stmt pos:start="3073:17" pos:end="3073:48"><expr pos:start="3073:17" pos:end="3073:47"><call pos:start="3073:17" pos:end="3073:47"><name pos:start="3073:17" pos:end="3073:33">gen_helper_fnstcw</name><argument_list pos:start="3073:34" pos:end="3073:47">(<argument pos:start="3073:35" pos:end="3073:46"><expr pos:start="3073:35" pos:end="3073:46"><name pos:start="3073:35" pos:end="3073:46">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3075:17" pos:end="3075:60"><expr pos:start="3075:17" pos:end="3075:59"><call pos:start="3075:17" pos:end="3075:59"><name pos:start="3075:17" pos:end="3075:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="3075:36" pos:end="3075:59">(<argument pos:start="3075:37" pos:end="3075:44"><expr pos:start="3075:37" pos:end="3075:44"><name pos:start="3075:37" pos:end="3075:44"><name pos:start="3075:37" pos:end="3075:41">cpu_T</name><index pos:start="3075:42" pos:end="3075:44">[<expr pos:start="3075:43" pos:end="3075:43"><literal type="number" pos:start="3075:43" pos:end="3075:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3075:47" pos:end="3075:58"><expr pos:start="3075:47" pos:end="3075:58"><name pos:start="3075:47" pos:end="3075:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3077:17" pos:end="3077:56"><expr pos:start="3077:17" pos:end="3077:55"><call pos:start="3077:17" pos:end="3077:55"><name pos:start="3077:17" pos:end="3077:31">gen_op_st_T0_A0</name><argument_list pos:start="3077:32" pos:end="3077:55">(<argument pos:start="3077:33" pos:end="3077:54"><expr pos:start="3077:33" pos:end="3077:54"><name pos:start="3077:33" pos:end="3077:39">OT_WORD</name> <operator pos:start="3077:41" pos:end="3077:41">+</operator> <name pos:start="3077:43" pos:end="3077:54"><name pos:start="3077:43" pos:end="3077:43">s</name><operator pos:start="3077:44" pos:end="3077:45">-&gt;</operator><name pos:start="3077:46" pos:end="3077:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3079:17" pos:end="3079:22">break;</break>

            <case pos:start="3081:13" pos:end="3081:22">case <expr pos:start="3081:18" pos:end="3081:21"><literal type="number" pos:start="3081:18" pos:end="3081:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="3081:24" pos:end="3081:37">/* fldt mem */</comment>

                <if_stmt pos:start="3083:17" pos:end="3085:47"><if pos:start="3083:17" pos:end="3085:47">if <condition pos:start="3083:20" pos:end="3083:46">(<expr pos:start="3083:21" pos:end="3083:45"><name pos:start="3083:21" pos:end="3083:28"><name pos:start="3083:21" pos:end="3083:21">s</name><operator pos:start="3083:22" pos:end="3083:23">-&gt;</operator><name pos:start="3083:24" pos:end="3083:28">cc_op</name></name> <operator pos:start="3083:30" pos:end="3083:31">!=</operator> <name pos:start="3083:33" pos:end="3083:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3085:21" pos:end="3085:47"><block_content pos:start="3085:21" pos:end="3085:47">

                    <expr_stmt pos:start="3085:21" pos:end="3085:47"><expr pos:start="3085:21" pos:end="3085:46"><call pos:start="3085:21" pos:end="3085:46"><name pos:start="3085:21" pos:end="3085:36">gen_op_set_cc_op</name><argument_list pos:start="3085:37" pos:end="3085:46">(<argument pos:start="3085:38" pos:end="3085:45"><expr pos:start="3085:38" pos:end="3085:45"><name pos:start="3085:38" pos:end="3085:45"><name pos:start="3085:38" pos:end="3085:38">s</name><operator pos:start="3085:39" pos:end="3085:40">-&gt;</operator><name pos:start="3085:41" pos:end="3085:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3087:17" pos:end="3087:50"><expr pos:start="3087:17" pos:end="3087:49"><call pos:start="3087:17" pos:end="3087:49"><name pos:start="3087:17" pos:end="3087:26">gen_jmp_im</name><argument_list pos:start="3087:27" pos:end="3087:49">(<argument pos:start="3087:28" pos:end="3087:48"><expr pos:start="3087:28" pos:end="3087:48"><name pos:start="3087:28" pos:end="3087:35">pc_start</name> <operator pos:start="3087:37" pos:end="3087:37">-</operator> <name pos:start="3087:39" pos:end="3087:48"><name pos:start="3087:39" pos:end="3087:39">s</name><operator pos:start="3087:40" pos:end="3087:41">-&gt;</operator><name pos:start="3087:42" pos:end="3087:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3089:17" pos:end="3089:44"><expr pos:start="3089:17" pos:end="3089:43"><call pos:start="3089:17" pos:end="3089:43"><name pos:start="3089:17" pos:end="3089:35">gen_helper_fldt_ST0</name><argument_list pos:start="3089:36" pos:end="3089:43">(<argument pos:start="3089:37" pos:end="3089:42"><expr pos:start="3089:37" pos:end="3089:42"><name pos:start="3089:37" pos:end="3089:42">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3091:17" pos:end="3091:22">break;</break>

            <case pos:start="3093:13" pos:end="3093:22">case <expr pos:start="3093:18" pos:end="3093:21"><literal type="number" pos:start="3093:18" pos:end="3093:21">0x1f</literal></expr>:</case> <comment type="block" pos:start="3093:24" pos:end="3093:38">/* fstpt mem */</comment>

                <if_stmt pos:start="3095:17" pos:end="3097:47"><if pos:start="3095:17" pos:end="3097:47">if <condition pos:start="3095:20" pos:end="3095:46">(<expr pos:start="3095:21" pos:end="3095:45"><name pos:start="3095:21" pos:end="3095:28"><name pos:start="3095:21" pos:end="3095:21">s</name><operator pos:start="3095:22" pos:end="3095:23">-&gt;</operator><name pos:start="3095:24" pos:end="3095:28">cc_op</name></name> <operator pos:start="3095:30" pos:end="3095:31">!=</operator> <name pos:start="3095:33" pos:end="3095:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3097:21" pos:end="3097:47"><block_content pos:start="3097:21" pos:end="3097:47">

                    <expr_stmt pos:start="3097:21" pos:end="3097:47"><expr pos:start="3097:21" pos:end="3097:46"><call pos:start="3097:21" pos:end="3097:46"><name pos:start="3097:21" pos:end="3097:36">gen_op_set_cc_op</name><argument_list pos:start="3097:37" pos:end="3097:46">(<argument pos:start="3097:38" pos:end="3097:45"><expr pos:start="3097:38" pos:end="3097:45"><name pos:start="3097:38" pos:end="3097:45"><name pos:start="3097:38" pos:end="3097:38">s</name><operator pos:start="3097:39" pos:end="3097:40">-&gt;</operator><name pos:start="3097:41" pos:end="3097:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3099:17" pos:end="3099:50"><expr pos:start="3099:17" pos:end="3099:49"><call pos:start="3099:17" pos:end="3099:49"><name pos:start="3099:17" pos:end="3099:26">gen_jmp_im</name><argument_list pos:start="3099:27" pos:end="3099:49">(<argument pos:start="3099:28" pos:end="3099:48"><expr pos:start="3099:28" pos:end="3099:48"><name pos:start="3099:28" pos:end="3099:35">pc_start</name> <operator pos:start="3099:37" pos:end="3099:37">-</operator> <name pos:start="3099:39" pos:end="3099:48"><name pos:start="3099:39" pos:end="3099:39">s</name><operator pos:start="3099:40" pos:end="3099:41">-&gt;</operator><name pos:start="3099:42" pos:end="3099:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3101:17" pos:end="3101:44"><expr pos:start="3101:17" pos:end="3101:43"><call pos:start="3101:17" pos:end="3101:43"><name pos:start="3101:17" pos:end="3101:35">gen_helper_fstt_ST0</name><argument_list pos:start="3101:36" pos:end="3101:43">(<argument pos:start="3101:37" pos:end="3101:42"><expr pos:start="3101:37" pos:end="3101:42"><name pos:start="3101:37" pos:end="3101:42">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3103:17" pos:end="3103:34"><expr pos:start="3103:17" pos:end="3103:33"><call pos:start="3103:17" pos:end="3103:33"><name pos:start="3103:17" pos:end="3103:31">gen_helper_fpop</name><argument_list pos:start="3103:32" pos:end="3103:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3105:17" pos:end="3105:22">break;</break>

            <case pos:start="3107:13" pos:end="3107:22">case <expr pos:start="3107:18" pos:end="3107:21"><literal type="number" pos:start="3107:18" pos:end="3107:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="3107:24" pos:end="3107:39">/* frstor mem */</comment>

                <if_stmt pos:start="3109:17" pos:end="3111:47"><if pos:start="3109:17" pos:end="3111:47">if <condition pos:start="3109:20" pos:end="3109:46">(<expr pos:start="3109:21" pos:end="3109:45"><name pos:start="3109:21" pos:end="3109:28"><name pos:start="3109:21" pos:end="3109:21">s</name><operator pos:start="3109:22" pos:end="3109:23">-&gt;</operator><name pos:start="3109:24" pos:end="3109:28">cc_op</name></name> <operator pos:start="3109:30" pos:end="3109:31">!=</operator> <name pos:start="3109:33" pos:end="3109:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3111:21" pos:end="3111:47"><block_content pos:start="3111:21" pos:end="3111:47">

                    <expr_stmt pos:start="3111:21" pos:end="3111:47"><expr pos:start="3111:21" pos:end="3111:46"><call pos:start="3111:21" pos:end="3111:46"><name pos:start="3111:21" pos:end="3111:36">gen_op_set_cc_op</name><argument_list pos:start="3111:37" pos:end="3111:46">(<argument pos:start="3111:38" pos:end="3111:45"><expr pos:start="3111:38" pos:end="3111:45"><name pos:start="3111:38" pos:end="3111:45"><name pos:start="3111:38" pos:end="3111:38">s</name><operator pos:start="3111:39" pos:end="3111:40">-&gt;</operator><name pos:start="3111:41" pos:end="3111:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3113:17" pos:end="3113:50"><expr pos:start="3113:17" pos:end="3113:49"><call pos:start="3113:17" pos:end="3113:49"><name pos:start="3113:17" pos:end="3113:26">gen_jmp_im</name><argument_list pos:start="3113:27" pos:end="3113:49">(<argument pos:start="3113:28" pos:end="3113:48"><expr pos:start="3113:28" pos:end="3113:48"><name pos:start="3113:28" pos:end="3113:35">pc_start</name> <operator pos:start="3113:37" pos:end="3113:37">-</operator> <name pos:start="3113:39" pos:end="3113:48"><name pos:start="3113:39" pos:end="3113:39">s</name><operator pos:start="3113:40" pos:end="3113:41">-&gt;</operator><name pos:start="3113:42" pos:end="3113:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3115:17" pos:end="3115:67"><expr pos:start="3115:17" pos:end="3115:66"><call pos:start="3115:17" pos:end="3115:66"><name pos:start="3115:17" pos:end="3115:33">gen_helper_frstor</name><argument_list pos:start="3115:34" pos:end="3115:66">(<argument pos:start="3115:35" pos:end="3115:40"><expr pos:start="3115:35" pos:end="3115:40"><name pos:start="3115:35" pos:end="3115:40">cpu_A0</name></expr></argument>, <argument pos:start="3115:43" pos:end="3115:65"><expr pos:start="3115:43" pos:end="3115:65"><call pos:start="3115:43" pos:end="3115:65"><name pos:start="3115:43" pos:end="3115:55">tcg_const_i32</name><argument_list pos:start="3115:56" pos:end="3115:65">(<argument pos:start="3115:57" pos:end="3115:64"><expr pos:start="3115:57" pos:end="3115:64"><name pos:start="3115:57" pos:end="3115:64"><name pos:start="3115:57" pos:end="3115:57">s</name><operator pos:start="3115:58" pos:end="3115:59">-&gt;</operator><name pos:start="3115:60" pos:end="3115:64">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3117:17" pos:end="3117:22">break;</break>

            <case pos:start="3119:13" pos:end="3119:22">case <expr pos:start="3119:18" pos:end="3119:21"><literal type="number" pos:start="3119:18" pos:end="3119:21">0x2e</literal></expr>:</case> <comment type="block" pos:start="3119:24" pos:end="3119:39">/* fnsave mem */</comment>

                <if_stmt pos:start="3121:17" pos:end="3123:47"><if pos:start="3121:17" pos:end="3123:47">if <condition pos:start="3121:20" pos:end="3121:46">(<expr pos:start="3121:21" pos:end="3121:45"><name pos:start="3121:21" pos:end="3121:28"><name pos:start="3121:21" pos:end="3121:21">s</name><operator pos:start="3121:22" pos:end="3121:23">-&gt;</operator><name pos:start="3121:24" pos:end="3121:28">cc_op</name></name> <operator pos:start="3121:30" pos:end="3121:31">!=</operator> <name pos:start="3121:33" pos:end="3121:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3123:21" pos:end="3123:47"><block_content pos:start="3123:21" pos:end="3123:47">

                    <expr_stmt pos:start="3123:21" pos:end="3123:47"><expr pos:start="3123:21" pos:end="3123:46"><call pos:start="3123:21" pos:end="3123:46"><name pos:start="3123:21" pos:end="3123:36">gen_op_set_cc_op</name><argument_list pos:start="3123:37" pos:end="3123:46">(<argument pos:start="3123:38" pos:end="3123:45"><expr pos:start="3123:38" pos:end="3123:45"><name pos:start="3123:38" pos:end="3123:45"><name pos:start="3123:38" pos:end="3123:38">s</name><operator pos:start="3123:39" pos:end="3123:40">-&gt;</operator><name pos:start="3123:41" pos:end="3123:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3125:17" pos:end="3125:50"><expr pos:start="3125:17" pos:end="3125:49"><call pos:start="3125:17" pos:end="3125:49"><name pos:start="3125:17" pos:end="3125:26">gen_jmp_im</name><argument_list pos:start="3125:27" pos:end="3125:49">(<argument pos:start="3125:28" pos:end="3125:48"><expr pos:start="3125:28" pos:end="3125:48"><name pos:start="3125:28" pos:end="3125:35">pc_start</name> <operator pos:start="3125:37" pos:end="3125:37">-</operator> <name pos:start="3125:39" pos:end="3125:48"><name pos:start="3125:39" pos:end="3125:39">s</name><operator pos:start="3125:40" pos:end="3125:41">-&gt;</operator><name pos:start="3125:42" pos:end="3125:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3127:17" pos:end="3127:66"><expr pos:start="3127:17" pos:end="3127:65"><call pos:start="3127:17" pos:end="3127:65"><name pos:start="3127:17" pos:end="3127:32">gen_helper_fsave</name><argument_list pos:start="3127:33" pos:end="3127:65">(<argument pos:start="3127:34" pos:end="3127:39"><expr pos:start="3127:34" pos:end="3127:39"><name pos:start="3127:34" pos:end="3127:39">cpu_A0</name></expr></argument>, <argument pos:start="3127:42" pos:end="3127:64"><expr pos:start="3127:42" pos:end="3127:64"><call pos:start="3127:42" pos:end="3127:64"><name pos:start="3127:42" pos:end="3127:54">tcg_const_i32</name><argument_list pos:start="3127:55" pos:end="3127:64">(<argument pos:start="3127:56" pos:end="3127:63"><expr pos:start="3127:56" pos:end="3127:63"><name pos:start="3127:56" pos:end="3127:63"><name pos:start="3127:56" pos:end="3127:56">s</name><operator pos:start="3127:57" pos:end="3127:58">-&gt;</operator><name pos:start="3127:59" pos:end="3127:63">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3129:17" pos:end="3129:22">break;</break>

            <case pos:start="3131:13" pos:end="3131:22">case <expr pos:start="3131:18" pos:end="3131:21"><literal type="number" pos:start="3131:18" pos:end="3131:21">0x2f</literal></expr>:</case> <comment type="block" pos:start="3131:24" pos:end="3131:39">/* fnstsw mem */</comment>

                <expr_stmt pos:start="3133:17" pos:end="3133:48"><expr pos:start="3133:17" pos:end="3133:47"><call pos:start="3133:17" pos:end="3133:47"><name pos:start="3133:17" pos:end="3133:33">gen_helper_fnstsw</name><argument_list pos:start="3133:34" pos:end="3133:47">(<argument pos:start="3133:35" pos:end="3133:46"><expr pos:start="3133:35" pos:end="3133:46"><name pos:start="3133:35" pos:end="3133:46">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3135:17" pos:end="3135:60"><expr pos:start="3135:17" pos:end="3135:59"><call pos:start="3135:17" pos:end="3135:59"><name pos:start="3135:17" pos:end="3135:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="3135:36" pos:end="3135:59">(<argument pos:start="3135:37" pos:end="3135:44"><expr pos:start="3135:37" pos:end="3135:44"><name pos:start="3135:37" pos:end="3135:44"><name pos:start="3135:37" pos:end="3135:41">cpu_T</name><index pos:start="3135:42" pos:end="3135:44">[<expr pos:start="3135:43" pos:end="3135:43"><literal type="number" pos:start="3135:43" pos:end="3135:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3135:47" pos:end="3135:58"><expr pos:start="3135:47" pos:end="3135:58"><name pos:start="3135:47" pos:end="3135:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3137:17" pos:end="3137:56"><expr pos:start="3137:17" pos:end="3137:55"><call pos:start="3137:17" pos:end="3137:55"><name pos:start="3137:17" pos:end="3137:31">gen_op_st_T0_A0</name><argument_list pos:start="3137:32" pos:end="3137:55">(<argument pos:start="3137:33" pos:end="3137:54"><expr pos:start="3137:33" pos:end="3137:54"><name pos:start="3137:33" pos:end="3137:39">OT_WORD</name> <operator pos:start="3137:41" pos:end="3137:41">+</operator> <name pos:start="3137:43" pos:end="3137:54"><name pos:start="3137:43" pos:end="3137:43">s</name><operator pos:start="3137:44" pos:end="3137:45">-&gt;</operator><name pos:start="3137:46" pos:end="3137:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3139:17" pos:end="3139:22">break;</break>

            <case pos:start="3141:13" pos:end="3141:22">case <expr pos:start="3141:18" pos:end="3141:21"><literal type="number" pos:start="3141:18" pos:end="3141:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="3141:24" pos:end="3141:33">/* fbld */</comment>

                <if_stmt pos:start="3143:17" pos:end="3145:47"><if pos:start="3143:17" pos:end="3145:47">if <condition pos:start="3143:20" pos:end="3143:46">(<expr pos:start="3143:21" pos:end="3143:45"><name pos:start="3143:21" pos:end="3143:28"><name pos:start="3143:21" pos:end="3143:21">s</name><operator pos:start="3143:22" pos:end="3143:23">-&gt;</operator><name pos:start="3143:24" pos:end="3143:28">cc_op</name></name> <operator pos:start="3143:30" pos:end="3143:31">!=</operator> <name pos:start="3143:33" pos:end="3143:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3145:21" pos:end="3145:47"><block_content pos:start="3145:21" pos:end="3145:47">

                    <expr_stmt pos:start="3145:21" pos:end="3145:47"><expr pos:start="3145:21" pos:end="3145:46"><call pos:start="3145:21" pos:end="3145:46"><name pos:start="3145:21" pos:end="3145:36">gen_op_set_cc_op</name><argument_list pos:start="3145:37" pos:end="3145:46">(<argument pos:start="3145:38" pos:end="3145:45"><expr pos:start="3145:38" pos:end="3145:45"><name pos:start="3145:38" pos:end="3145:45"><name pos:start="3145:38" pos:end="3145:38">s</name><operator pos:start="3145:39" pos:end="3145:40">-&gt;</operator><name pos:start="3145:41" pos:end="3145:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3147:17" pos:end="3147:50"><expr pos:start="3147:17" pos:end="3147:49"><call pos:start="3147:17" pos:end="3147:49"><name pos:start="3147:17" pos:end="3147:26">gen_jmp_im</name><argument_list pos:start="3147:27" pos:end="3147:49">(<argument pos:start="3147:28" pos:end="3147:48"><expr pos:start="3147:28" pos:end="3147:48"><name pos:start="3147:28" pos:end="3147:35">pc_start</name> <operator pos:start="3147:37" pos:end="3147:37">-</operator> <name pos:start="3147:39" pos:end="3147:48"><name pos:start="3147:39" pos:end="3147:39">s</name><operator pos:start="3147:40" pos:end="3147:41">-&gt;</operator><name pos:start="3147:42" pos:end="3147:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3149:17" pos:end="3149:44"><expr pos:start="3149:17" pos:end="3149:43"><call pos:start="3149:17" pos:end="3149:43"><name pos:start="3149:17" pos:end="3149:35">gen_helper_fbld_ST0</name><argument_list pos:start="3149:36" pos:end="3149:43">(<argument pos:start="3149:37" pos:end="3149:42"><expr pos:start="3149:37" pos:end="3149:42"><name pos:start="3149:37" pos:end="3149:42">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3151:17" pos:end="3151:22">break;</break>

            <case pos:start="3153:13" pos:end="3153:22">case <expr pos:start="3153:18" pos:end="3153:21"><literal type="number" pos:start="3153:18" pos:end="3153:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="3153:24" pos:end="3153:34">/* fbstp */</comment>

                <if_stmt pos:start="3155:17" pos:end="3157:47"><if pos:start="3155:17" pos:end="3157:47">if <condition pos:start="3155:20" pos:end="3155:46">(<expr pos:start="3155:21" pos:end="3155:45"><name pos:start="3155:21" pos:end="3155:28"><name pos:start="3155:21" pos:end="3155:21">s</name><operator pos:start="3155:22" pos:end="3155:23">-&gt;</operator><name pos:start="3155:24" pos:end="3155:28">cc_op</name></name> <operator pos:start="3155:30" pos:end="3155:31">!=</operator> <name pos:start="3155:33" pos:end="3155:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3157:21" pos:end="3157:47"><block_content pos:start="3157:21" pos:end="3157:47">

                    <expr_stmt pos:start="3157:21" pos:end="3157:47"><expr pos:start="3157:21" pos:end="3157:46"><call pos:start="3157:21" pos:end="3157:46"><name pos:start="3157:21" pos:end="3157:36">gen_op_set_cc_op</name><argument_list pos:start="3157:37" pos:end="3157:46">(<argument pos:start="3157:38" pos:end="3157:45"><expr pos:start="3157:38" pos:end="3157:45"><name pos:start="3157:38" pos:end="3157:45"><name pos:start="3157:38" pos:end="3157:38">s</name><operator pos:start="3157:39" pos:end="3157:40">-&gt;</operator><name pos:start="3157:41" pos:end="3157:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3159:17" pos:end="3159:50"><expr pos:start="3159:17" pos:end="3159:49"><call pos:start="3159:17" pos:end="3159:49"><name pos:start="3159:17" pos:end="3159:26">gen_jmp_im</name><argument_list pos:start="3159:27" pos:end="3159:49">(<argument pos:start="3159:28" pos:end="3159:48"><expr pos:start="3159:28" pos:end="3159:48"><name pos:start="3159:28" pos:end="3159:35">pc_start</name> <operator pos:start="3159:37" pos:end="3159:37">-</operator> <name pos:start="3159:39" pos:end="3159:48"><name pos:start="3159:39" pos:end="3159:39">s</name><operator pos:start="3159:40" pos:end="3159:41">-&gt;</operator><name pos:start="3159:42" pos:end="3159:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3161:17" pos:end="3161:44"><expr pos:start="3161:17" pos:end="3161:43"><call pos:start="3161:17" pos:end="3161:43"><name pos:start="3161:17" pos:end="3161:35">gen_helper_fbst_ST0</name><argument_list pos:start="3161:36" pos:end="3161:43">(<argument pos:start="3161:37" pos:end="3161:42"><expr pos:start="3161:37" pos:end="3161:42"><name pos:start="3161:37" pos:end="3161:42">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3163:17" pos:end="3163:34"><expr pos:start="3163:17" pos:end="3163:33"><call pos:start="3163:17" pos:end="3163:33"><name pos:start="3163:17" pos:end="3163:31">gen_helper_fpop</name><argument_list pos:start="3163:32" pos:end="3163:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3165:17" pos:end="3165:22">break;</break>

            <case pos:start="3167:13" pos:end="3167:22">case <expr pos:start="3167:18" pos:end="3167:21"><literal type="number" pos:start="3167:18" pos:end="3167:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="3167:24" pos:end="3167:35">/* fildll */</comment>

                <expr_stmt pos:start="3169:17" pos:end="3171:59"><expr pos:start="3169:17" pos:end="3171:58"><call pos:start="3169:17" pos:end="3171:58"><name pos:start="3169:17" pos:end="3169:33">tcg_gen_qemu_ld64</name><argument_list pos:start="3169:34" pos:end="3171:58">(<argument pos:start="3169:35" pos:end="3169:46"><expr pos:start="3169:35" pos:end="3169:46"><name pos:start="3169:35" pos:end="3169:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3169:49" pos:end="3169:54"><expr pos:start="3169:49" pos:end="3169:54"><name pos:start="3169:49" pos:end="3169:54">cpu_A0</name></expr></argument>, 

                                  <argument pos:start="3171:35" pos:end="3171:57"><expr pos:start="3171:35" pos:end="3171:57"><operator pos:start="3171:35" pos:end="3171:35">(</operator><name pos:start="3171:36" pos:end="3171:47"><name pos:start="3171:36" pos:end="3171:36">s</name><operator pos:start="3171:37" pos:end="3171:38">-&gt;</operator><name pos:start="3171:39" pos:end="3171:47">mem_index</name></name> <operator pos:start="3171:49" pos:end="3171:50">&gt;&gt;</operator> <literal type="number" pos:start="3171:52" pos:end="3171:52">2</literal><operator pos:start="3171:53" pos:end="3171:53">)</operator> <operator pos:start="3171:55" pos:end="3171:55">-</operator> <literal type="number" pos:start="3171:57" pos:end="3171:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3173:17" pos:end="3173:52"><expr pos:start="3173:17" pos:end="3173:51"><call pos:start="3173:17" pos:end="3173:51"><name pos:start="3173:17" pos:end="3173:37">gen_helper_fildll_ST0</name><argument_list pos:start="3173:38" pos:end="3173:51">(<argument pos:start="3173:39" pos:end="3173:50"><expr pos:start="3173:39" pos:end="3173:50"><name pos:start="3173:39" pos:end="3173:50">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3175:17" pos:end="3175:22">break;</break>

            <case pos:start="3177:13" pos:end="3177:22">case <expr pos:start="3177:18" pos:end="3177:21"><literal type="number" pos:start="3177:18" pos:end="3177:21">0x3f</literal></expr>:</case> <comment type="block" pos:start="3177:24" pos:end="3177:36">/* fistpll */</comment>

                <expr_stmt pos:start="3179:17" pos:end="3179:52"><expr pos:start="3179:17" pos:end="3179:51"><call pos:start="3179:17" pos:end="3179:51"><name pos:start="3179:17" pos:end="3179:37">gen_helper_fistll_ST0</name><argument_list pos:start="3179:38" pos:end="3179:51">(<argument pos:start="3179:39" pos:end="3179:50"><expr pos:start="3179:39" pos:end="3179:50"><name pos:start="3179:39" pos:end="3179:50">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3181:17" pos:end="3183:59"><expr pos:start="3181:17" pos:end="3183:58"><call pos:start="3181:17" pos:end="3183:58"><name pos:start="3181:17" pos:end="3181:33">tcg_gen_qemu_st64</name><argument_list pos:start="3181:34" pos:end="3183:58">(<argument pos:start="3181:35" pos:end="3181:46"><expr pos:start="3181:35" pos:end="3181:46"><name pos:start="3181:35" pos:end="3181:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3181:49" pos:end="3181:54"><expr pos:start="3181:49" pos:end="3181:54"><name pos:start="3181:49" pos:end="3181:54">cpu_A0</name></expr></argument>, 

                                  <argument pos:start="3183:35" pos:end="3183:57"><expr pos:start="3183:35" pos:end="3183:57"><operator pos:start="3183:35" pos:end="3183:35">(</operator><name pos:start="3183:36" pos:end="3183:47"><name pos:start="3183:36" pos:end="3183:36">s</name><operator pos:start="3183:37" pos:end="3183:38">-&gt;</operator><name pos:start="3183:39" pos:end="3183:47">mem_index</name></name> <operator pos:start="3183:49" pos:end="3183:50">&gt;&gt;</operator> <literal type="number" pos:start="3183:52" pos:end="3183:52">2</literal><operator pos:start="3183:53" pos:end="3183:53">)</operator> <operator pos:start="3183:55" pos:end="3183:55">-</operator> <literal type="number" pos:start="3183:57" pos:end="3183:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3185:17" pos:end="3185:34"><expr pos:start="3185:17" pos:end="3185:33"><call pos:start="3185:17" pos:end="3185:33"><name pos:start="3185:17" pos:end="3185:31">gen_helper_fpop</name><argument_list pos:start="3185:32" pos:end="3185:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3187:17" pos:end="3187:22">break;</break>

            <default pos:start="3189:13" pos:end="3189:20">default:</default>

                <goto pos:start="3191:17" pos:end="3191:32">goto <name pos:start="3191:22" pos:end="3191:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="3195:11" pos:end="3791:9">else <block pos:start="3195:16" pos:end="3791:9">{<block_content pos:start="3199:13" pos:end="3789:13">

            <comment type="block" pos:start="3197:13" pos:end="3197:36">/* register float ops */</comment>

            <expr_stmt pos:start="3199:13" pos:end="3199:23"><expr pos:start="3199:13" pos:end="3199:22"><name pos:start="3199:13" pos:end="3199:17">opreg</name> <operator pos:start="3199:19" pos:end="3199:19">=</operator> <name pos:start="3199:21" pos:end="3199:22">rm</name></expr>;</expr_stmt>



            <switch pos:start="3203:13" pos:end="3789:13">switch<condition pos:start="3203:19" pos:end="3203:22">(<expr pos:start="3203:20" pos:end="3203:21"><name pos:start="3203:20" pos:end="3203:21">op</name></expr>)</condition> <block pos:start="3203:24" pos:end="3789:13">{<block_content pos:start="3205:13" pos:end="3787:32">

            <case pos:start="3205:13" pos:end="3205:22">case <expr pos:start="3205:18" pos:end="3205:21"><literal type="number" pos:start="3205:18" pos:end="3205:21">0x08</literal></expr>:</case> <comment type="block" pos:start="3205:24" pos:end="3205:36">/* fld sti */</comment>

                <expr_stmt pos:start="3207:17" pos:end="3207:35"><expr pos:start="3207:17" pos:end="3207:34"><call pos:start="3207:17" pos:end="3207:34"><name pos:start="3207:17" pos:end="3207:32">gen_helper_fpush</name><argument_list pos:start="3207:33" pos:end="3207:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3209:17" pos:end="3209:72"><expr pos:start="3209:17" pos:end="3209:71"><call pos:start="3209:17" pos:end="3209:71"><name pos:start="3209:17" pos:end="3209:39">gen_helper_fmov_ST0_STN</name><argument_list pos:start="3209:40" pos:end="3209:71">(<argument pos:start="3209:41" pos:end="3209:70"><expr pos:start="3209:41" pos:end="3209:70"><call pos:start="3209:41" pos:end="3209:70"><name pos:start="3209:41" pos:end="3209:53">tcg_const_i32</name><argument_list pos:start="3209:54" pos:end="3209:70">(<argument pos:start="3209:55" pos:end="3209:69"><expr pos:start="3209:55" pos:end="3209:69"><operator pos:start="3209:55" pos:end="3209:55">(</operator><name pos:start="3209:56" pos:end="3209:60">opreg</name> <operator pos:start="3209:62" pos:end="3209:62">+</operator> <literal type="number" pos:start="3209:64" pos:end="3209:64">1</literal><operator pos:start="3209:65" pos:end="3209:65">)</operator> <operator pos:start="3209:67" pos:end="3209:67">&amp;</operator> <literal type="number" pos:start="3209:69" pos:end="3209:69">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3211:17" pos:end="3211:22">break;</break>

            <case pos:start="3213:13" pos:end="3213:22">case <expr pos:start="3213:18" pos:end="3213:21"><literal type="number" pos:start="3213:18" pos:end="3213:21">0x09</literal></expr>:</case> <comment type="block" pos:start="3213:24" pos:end="3213:38">/* fxchg sti */</comment>

            <case pos:start="3215:13" pos:end="3215:22">case <expr pos:start="3215:18" pos:end="3215:21"><literal type="number" pos:start="3215:18" pos:end="3215:21">0x29</literal></expr>:</case> <comment type="block" pos:start="3215:24" pos:end="3215:56">/* fxchg4 sti, undocumented op */</comment>

            <case pos:start="3217:13" pos:end="3217:22">case <expr pos:start="3217:18" pos:end="3217:21"><literal type="number" pos:start="3217:18" pos:end="3217:21">0x39</literal></expr>:</case> <comment type="block" pos:start="3217:24" pos:end="3217:56">/* fxchg7 sti, undocumented op */</comment>

                <expr_stmt pos:start="3219:17" pos:end="3219:63"><expr pos:start="3219:17" pos:end="3219:62"><call pos:start="3219:17" pos:end="3219:62"><name pos:start="3219:17" pos:end="3219:40">gen_helper_fxchg_ST0_STN</name><argument_list pos:start="3219:41" pos:end="3219:62">(<argument pos:start="3219:42" pos:end="3219:61"><expr pos:start="3219:42" pos:end="3219:61"><call pos:start="3219:42" pos:end="3219:61"><name pos:start="3219:42" pos:end="3219:54">tcg_const_i32</name><argument_list pos:start="3219:55" pos:end="3219:61">(<argument pos:start="3219:56" pos:end="3219:60"><expr pos:start="3219:56" pos:end="3219:60"><name pos:start="3219:56" pos:end="3219:60">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3221:17" pos:end="3221:22">break;</break>

            <case pos:start="3223:13" pos:end="3223:22">case <expr pos:start="3223:18" pos:end="3223:21"><literal type="number" pos:start="3223:18" pos:end="3223:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="3223:24" pos:end="3223:37">/* grp d9/2 */</comment>

                <switch pos:start="3225:17" pos:end="3245:17">switch<condition pos:start="3225:23" pos:end="3225:26">(<expr pos:start="3225:24" pos:end="3225:25"><name pos:start="3225:24" pos:end="3225:25">rm</name></expr>)</condition> <block pos:start="3225:28" pos:end="3245:17">{<block_content pos:start="3227:17" pos:end="3243:36">

                <case pos:start="3227:17" pos:end="3227:23">case <expr pos:start="3227:22" pos:end="3227:22"><literal type="number" pos:start="3227:22" pos:end="3227:22">0</literal></expr>:</case> <comment type="block" pos:start="3227:25" pos:end="3227:34">/* fnop */</comment>

                    <comment type="block" pos:start="3229:21" pos:end="3229:62">/* check exceptions (FreeBSD FPU probe) */</comment>

                    <if_stmt pos:start="3231:21" pos:end="3233:51"><if pos:start="3231:21" pos:end="3233:51">if <condition pos:start="3231:24" pos:end="3231:50">(<expr pos:start="3231:25" pos:end="3231:49"><name pos:start="3231:25" pos:end="3231:32"><name pos:start="3231:25" pos:end="3231:25">s</name><operator pos:start="3231:26" pos:end="3231:27">-&gt;</operator><name pos:start="3231:28" pos:end="3231:32">cc_op</name></name> <operator pos:start="3231:34" pos:end="3231:35">!=</operator> <name pos:start="3231:37" pos:end="3231:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3233:25" pos:end="3233:51"><block_content pos:start="3233:25" pos:end="3233:51">

                        <expr_stmt pos:start="3233:25" pos:end="3233:51"><expr pos:start="3233:25" pos:end="3233:50"><call pos:start="3233:25" pos:end="3233:50"><name pos:start="3233:25" pos:end="3233:40">gen_op_set_cc_op</name><argument_list pos:start="3233:41" pos:end="3233:50">(<argument pos:start="3233:42" pos:end="3233:49"><expr pos:start="3233:42" pos:end="3233:49"><name pos:start="3233:42" pos:end="3233:49"><name pos:start="3233:42" pos:end="3233:42">s</name><operator pos:start="3233:43" pos:end="3233:44">-&gt;</operator><name pos:start="3233:45" pos:end="3233:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="3235:21" pos:end="3235:54"><expr pos:start="3235:21" pos:end="3235:53"><call pos:start="3235:21" pos:end="3235:53"><name pos:start="3235:21" pos:end="3235:30">gen_jmp_im</name><argument_list pos:start="3235:31" pos:end="3235:53">(<argument pos:start="3235:32" pos:end="3235:52"><expr pos:start="3235:32" pos:end="3235:52"><name pos:start="3235:32" pos:end="3235:39">pc_start</name> <operator pos:start="3235:41" pos:end="3235:41">-</operator> <name pos:start="3235:43" pos:end="3235:52"><name pos:start="3235:43" pos:end="3235:43">s</name><operator pos:start="3235:44" pos:end="3235:45">-&gt;</operator><name pos:start="3235:46" pos:end="3235:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3237:21" pos:end="3237:39"><expr pos:start="3237:21" pos:end="3237:38"><call pos:start="3237:21" pos:end="3237:38"><name pos:start="3237:21" pos:end="3237:36">gen_helper_fwait</name><argument_list pos:start="3237:37" pos:end="3237:38">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3239:21" pos:end="3239:26">break;</break>

                <default pos:start="3241:17" pos:end="3241:24">default:</default>

                    <goto pos:start="3243:21" pos:end="3243:36">goto <name pos:start="3243:26" pos:end="3243:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3247:17" pos:end="3247:22">break;</break>

            <case pos:start="3249:13" pos:end="3249:22">case <expr pos:start="3249:18" pos:end="3249:21"><literal type="number" pos:start="3249:18" pos:end="3249:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="3249:24" pos:end="3249:37">/* grp d9/4 */</comment>

                <switch pos:start="3251:17" pos:end="3283:17">switch<condition pos:start="3251:23" pos:end="3251:26">(<expr pos:start="3251:24" pos:end="3251:25"><name pos:start="3251:24" pos:end="3251:25">rm</name></expr>)</condition> <block pos:start="3251:28" pos:end="3283:17">{<block_content pos:start="3253:17" pos:end="3281:36">

                <case pos:start="3253:17" pos:end="3253:23">case <expr pos:start="3253:22" pos:end="3253:22"><literal type="number" pos:start="3253:22" pos:end="3253:22">0</literal></expr>:</case> <comment type="block" pos:start="3253:25" pos:end="3253:34">/* fchs */</comment>

                    <expr_stmt pos:start="3255:21" pos:end="3255:42"><expr pos:start="3255:21" pos:end="3255:41"><call pos:start="3255:21" pos:end="3255:41"><name pos:start="3255:21" pos:end="3255:39">gen_helper_fchs_ST0</name><argument_list pos:start="3255:40" pos:end="3255:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3257:21" pos:end="3257:26">break;</break>

                <case pos:start="3259:17" pos:end="3259:23">case <expr pos:start="3259:22" pos:end="3259:22"><literal type="number" pos:start="3259:22" pos:end="3259:22">1</literal></expr>:</case> <comment type="block" pos:start="3259:25" pos:end="3259:34">/* fabs */</comment>

                    <expr_stmt pos:start="3261:21" pos:end="3261:42"><expr pos:start="3261:21" pos:end="3261:41"><call pos:start="3261:21" pos:end="3261:41"><name pos:start="3261:21" pos:end="3261:39">gen_helper_fabs_ST0</name><argument_list pos:start="3261:40" pos:end="3261:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3263:21" pos:end="3263:26">break;</break>

                <case pos:start="3265:17" pos:end="3265:23">case <expr pos:start="3265:22" pos:end="3265:22"><literal type="number" pos:start="3265:22" pos:end="3265:22">4</literal></expr>:</case> <comment type="block" pos:start="3265:25" pos:end="3265:34">/* ftst */</comment>

                    <expr_stmt pos:start="3267:21" pos:end="3267:42"><expr pos:start="3267:21" pos:end="3267:41"><call pos:start="3267:21" pos:end="3267:41"><name pos:start="3267:21" pos:end="3267:39">gen_helper_fldz_FT0</name><argument_list pos:start="3267:40" pos:end="3267:41">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3269:21" pos:end="3269:46"><expr pos:start="3269:21" pos:end="3269:45"><call pos:start="3269:21" pos:end="3269:45"><name pos:start="3269:21" pos:end="3269:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3269:44" pos:end="3269:45">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3271:21" pos:end="3271:26">break;</break>

                <case pos:start="3273:17" pos:end="3273:23">case <expr pos:start="3273:22" pos:end="3273:22"><literal type="number" pos:start="3273:22" pos:end="3273:22">5</literal></expr>:</case> <comment type="block" pos:start="3273:25" pos:end="3273:34">/* fxam */</comment>

                    <expr_stmt pos:start="3275:21" pos:end="3275:42"><expr pos:start="3275:21" pos:end="3275:41"><call pos:start="3275:21" pos:end="3275:41"><name pos:start="3275:21" pos:end="3275:39">gen_helper_fxam_ST0</name><argument_list pos:start="3275:40" pos:end="3275:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3277:21" pos:end="3277:26">break;</break>

                <default pos:start="3279:17" pos:end="3279:24">default:</default>

                    <goto pos:start="3281:21" pos:end="3281:36">goto <name pos:start="3281:26" pos:end="3281:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3285:17" pos:end="3285:22">break;</break>

            <case pos:start="3287:13" pos:end="3287:22">case <expr pos:start="3287:18" pos:end="3287:21"><literal type="number" pos:start="3287:18" pos:end="3287:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="3287:24" pos:end="3287:37">/* grp d9/5 */</comment>

                <block pos:start="3289:17" pos:end="3355:17">{<block_content pos:start="3291:21" pos:end="3353:21">

                    <switch pos:start="3291:21" pos:end="3353:21">switch<condition pos:start="3291:27" pos:end="3291:30">(<expr pos:start="3291:28" pos:end="3291:29"><name pos:start="3291:28" pos:end="3291:29">rm</name></expr>)</condition> <block pos:start="3291:32" pos:end="3353:21">{<block_content pos:start="3293:21" pos:end="3351:40">

                    <case pos:start="3293:21" pos:end="3293:27">case <expr pos:start="3293:26" pos:end="3293:26"><literal type="number" pos:start="3293:26" pos:end="3293:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="3295:25" pos:end="3295:43"><expr pos:start="3295:25" pos:end="3295:42"><call pos:start="3295:25" pos:end="3295:42"><name pos:start="3295:25" pos:end="3295:40">gen_helper_fpush</name><argument_list pos:start="3295:41" pos:end="3295:42">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3297:25" pos:end="3297:46"><expr pos:start="3297:25" pos:end="3297:45"><call pos:start="3297:25" pos:end="3297:45"><name pos:start="3297:25" pos:end="3297:43">gen_helper_fld1_ST0</name><argument_list pos:start="3297:44" pos:end="3297:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3299:25" pos:end="3299:30">break;</break>

                    <case pos:start="3301:21" pos:end="3301:27">case <expr pos:start="3301:26" pos:end="3301:26"><literal type="number" pos:start="3301:26" pos:end="3301:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="3303:25" pos:end="3303:43"><expr pos:start="3303:25" pos:end="3303:42"><call pos:start="3303:25" pos:end="3303:42"><name pos:start="3303:25" pos:end="3303:40">gen_helper_fpush</name><argument_list pos:start="3303:41" pos:end="3303:42">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3305:25" pos:end="3305:48"><expr pos:start="3305:25" pos:end="3305:47"><call pos:start="3305:25" pos:end="3305:47"><name pos:start="3305:25" pos:end="3305:45">gen_helper_fldl2t_ST0</name><argument_list pos:start="3305:46" pos:end="3305:47">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3307:25" pos:end="3307:30">break;</break>

                    <case pos:start="3309:21" pos:end="3309:27">case <expr pos:start="3309:26" pos:end="3309:26"><literal type="number" pos:start="3309:26" pos:end="3309:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="3311:25" pos:end="3311:43"><expr pos:start="3311:25" pos:end="3311:42"><call pos:start="3311:25" pos:end="3311:42"><name pos:start="3311:25" pos:end="3311:40">gen_helper_fpush</name><argument_list pos:start="3311:41" pos:end="3311:42">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3313:25" pos:end="3313:48"><expr pos:start="3313:25" pos:end="3313:47"><call pos:start="3313:25" pos:end="3313:47"><name pos:start="3313:25" pos:end="3313:45">gen_helper_fldl2e_ST0</name><argument_list pos:start="3313:46" pos:end="3313:47">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3315:25" pos:end="3315:30">break;</break>

                    <case pos:start="3317:21" pos:end="3317:27">case <expr pos:start="3317:26" pos:end="3317:26"><literal type="number" pos:start="3317:26" pos:end="3317:26">3</literal></expr>:</case>

                        <expr_stmt pos:start="3319:25" pos:end="3319:43"><expr pos:start="3319:25" pos:end="3319:42"><call pos:start="3319:25" pos:end="3319:42"><name pos:start="3319:25" pos:end="3319:40">gen_helper_fpush</name><argument_list pos:start="3319:41" pos:end="3319:42">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3321:25" pos:end="3321:47"><expr pos:start="3321:25" pos:end="3321:46"><call pos:start="3321:25" pos:end="3321:46"><name pos:start="3321:25" pos:end="3321:44">gen_helper_fldpi_ST0</name><argument_list pos:start="3321:45" pos:end="3321:46">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3323:25" pos:end="3323:30">break;</break>

                    <case pos:start="3325:21" pos:end="3325:27">case <expr pos:start="3325:26" pos:end="3325:26"><literal type="number" pos:start="3325:26" pos:end="3325:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="3327:25" pos:end="3327:43"><expr pos:start="3327:25" pos:end="3327:42"><call pos:start="3327:25" pos:end="3327:42"><name pos:start="3327:25" pos:end="3327:40">gen_helper_fpush</name><argument_list pos:start="3327:41" pos:end="3327:42">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3329:25" pos:end="3329:48"><expr pos:start="3329:25" pos:end="3329:47"><call pos:start="3329:25" pos:end="3329:47"><name pos:start="3329:25" pos:end="3329:45">gen_helper_fldlg2_ST0</name><argument_list pos:start="3329:46" pos:end="3329:47">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3331:25" pos:end="3331:30">break;</break>

                    <case pos:start="3333:21" pos:end="3333:27">case <expr pos:start="3333:26" pos:end="3333:26"><literal type="number" pos:start="3333:26" pos:end="3333:26">5</literal></expr>:</case>

                        <expr_stmt pos:start="3335:25" pos:end="3335:43"><expr pos:start="3335:25" pos:end="3335:42"><call pos:start="3335:25" pos:end="3335:42"><name pos:start="3335:25" pos:end="3335:40">gen_helper_fpush</name><argument_list pos:start="3335:41" pos:end="3335:42">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3337:25" pos:end="3337:48"><expr pos:start="3337:25" pos:end="3337:47"><call pos:start="3337:25" pos:end="3337:47"><name pos:start="3337:25" pos:end="3337:45">gen_helper_fldln2_ST0</name><argument_list pos:start="3337:46" pos:end="3337:47">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3339:25" pos:end="3339:30">break;</break>

                    <case pos:start="3341:21" pos:end="3341:27">case <expr pos:start="3341:26" pos:end="3341:26"><literal type="number" pos:start="3341:26" pos:end="3341:26">6</literal></expr>:</case>

                        <expr_stmt pos:start="3343:25" pos:end="3343:43"><expr pos:start="3343:25" pos:end="3343:42"><call pos:start="3343:25" pos:end="3343:42"><name pos:start="3343:25" pos:end="3343:40">gen_helper_fpush</name><argument_list pos:start="3343:41" pos:end="3343:42">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3345:25" pos:end="3345:46"><expr pos:start="3345:25" pos:end="3345:45"><call pos:start="3345:25" pos:end="3345:45"><name pos:start="3345:25" pos:end="3345:43">gen_helper_fldz_ST0</name><argument_list pos:start="3345:44" pos:end="3345:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3347:25" pos:end="3347:30">break;</break>

                    <default pos:start="3349:21" pos:end="3349:28">default:</default>

                        <goto pos:start="3351:25" pos:end="3351:40">goto <name pos:start="3351:30" pos:end="3351:39">illegal_op</name>;</goto>

                    </block_content>}</block></switch>

                </block_content>}</block>

                <break pos:start="3357:17" pos:end="3357:22">break;</break>

            <case pos:start="3359:13" pos:end="3359:22">case <expr pos:start="3359:18" pos:end="3359:21"><literal type="number" pos:start="3359:18" pos:end="3359:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="3359:24" pos:end="3359:37">/* grp d9/6 */</comment>

                <switch pos:start="3361:17" pos:end="3413:17">switch<condition pos:start="3361:23" pos:end="3361:26">(<expr pos:start="3361:24" pos:end="3361:25"><name pos:start="3361:24" pos:end="3361:25">rm</name></expr>)</condition> <block pos:start="3361:28" pos:end="3413:17">{<block_content pos:start="3363:17" pos:end="3411:26">

                <case pos:start="3363:17" pos:end="3363:23">case <expr pos:start="3363:22" pos:end="3363:22"><literal type="number" pos:start="3363:22" pos:end="3363:22">0</literal></expr>:</case> <comment type="block" pos:start="3363:25" pos:end="3363:35">/* f2xm1 */</comment>

                    <expr_stmt pos:start="3365:21" pos:end="3365:39"><expr pos:start="3365:21" pos:end="3365:38"><call pos:start="3365:21" pos:end="3365:38"><name pos:start="3365:21" pos:end="3365:36">gen_helper_f2xm1</name><argument_list pos:start="3365:37" pos:end="3365:38">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3367:21" pos:end="3367:26">break;</break>

                <case pos:start="3369:17" pos:end="3369:23">case <expr pos:start="3369:22" pos:end="3369:22"><literal type="number" pos:start="3369:22" pos:end="3369:22">1</literal></expr>:</case> <comment type="block" pos:start="3369:25" pos:end="3369:35">/* fyl2x */</comment>

                    <expr_stmt pos:start="3371:21" pos:end="3371:39"><expr pos:start="3371:21" pos:end="3371:38"><call pos:start="3371:21" pos:end="3371:38"><name pos:start="3371:21" pos:end="3371:36">gen_helper_fyl2x</name><argument_list pos:start="3371:37" pos:end="3371:38">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3373:21" pos:end="3373:26">break;</break>

                <case pos:start="3375:17" pos:end="3375:23">case <expr pos:start="3375:22" pos:end="3375:22"><literal type="number" pos:start="3375:22" pos:end="3375:22">2</literal></expr>:</case> <comment type="block" pos:start="3375:25" pos:end="3375:35">/* fptan */</comment>

                    <expr_stmt pos:start="3377:21" pos:end="3377:39"><expr pos:start="3377:21" pos:end="3377:38"><call pos:start="3377:21" pos:end="3377:38"><name pos:start="3377:21" pos:end="3377:36">gen_helper_fptan</name><argument_list pos:start="3377:37" pos:end="3377:38">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3379:21" pos:end="3379:26">break;</break>

                <case pos:start="3381:17" pos:end="3381:23">case <expr pos:start="3381:22" pos:end="3381:22"><literal type="number" pos:start="3381:22" pos:end="3381:22">3</literal></expr>:</case> <comment type="block" pos:start="3381:25" pos:end="3381:36">/* fpatan */</comment>

                    <expr_stmt pos:start="3383:21" pos:end="3383:40"><expr pos:start="3383:21" pos:end="3383:39"><call pos:start="3383:21" pos:end="3383:39"><name pos:start="3383:21" pos:end="3383:37">gen_helper_fpatan</name><argument_list pos:start="3383:38" pos:end="3383:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3385:21" pos:end="3385:26">break;</break>

                <case pos:start="3387:17" pos:end="3387:23">case <expr pos:start="3387:22" pos:end="3387:22"><literal type="number" pos:start="3387:22" pos:end="3387:22">4</literal></expr>:</case> <comment type="block" pos:start="3387:25" pos:end="3387:37">/* fxtract */</comment>

                    <expr_stmt pos:start="3389:21" pos:end="3389:41"><expr pos:start="3389:21" pos:end="3389:40"><call pos:start="3389:21" pos:end="3389:40"><name pos:start="3389:21" pos:end="3389:38">gen_helper_fxtract</name><argument_list pos:start="3389:39" pos:end="3389:40">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3391:21" pos:end="3391:26">break;</break>

                <case pos:start="3393:17" pos:end="3393:23">case <expr pos:start="3393:22" pos:end="3393:22"><literal type="number" pos:start="3393:22" pos:end="3393:22">5</literal></expr>:</case> <comment type="block" pos:start="3393:25" pos:end="3393:36">/* fprem1 */</comment>

                    <expr_stmt pos:start="3395:21" pos:end="3395:40"><expr pos:start="3395:21" pos:end="3395:39"><call pos:start="3395:21" pos:end="3395:39"><name pos:start="3395:21" pos:end="3395:37">gen_helper_fprem1</name><argument_list pos:start="3395:38" pos:end="3395:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3397:21" pos:end="3397:26">break;</break>

                <case pos:start="3399:17" pos:end="3399:23">case <expr pos:start="3399:22" pos:end="3399:22"><literal type="number" pos:start="3399:22" pos:end="3399:22">6</literal></expr>:</case> <comment type="block" pos:start="3399:25" pos:end="3399:37">/* fdecstp */</comment>

                    <expr_stmt pos:start="3401:21" pos:end="3401:41"><expr pos:start="3401:21" pos:end="3401:40"><call pos:start="3401:21" pos:end="3401:40"><name pos:start="3401:21" pos:end="3401:38">gen_helper_fdecstp</name><argument_list pos:start="3401:39" pos:end="3401:40">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3403:21" pos:end="3403:26">break;</break>

                <default pos:start="3405:17" pos:end="3405:24">default:</default>

                <case pos:start="3407:17" pos:end="3407:23">case <expr pos:start="3407:22" pos:end="3407:22"><literal type="number" pos:start="3407:22" pos:end="3407:22">7</literal></expr>:</case> <comment type="block" pos:start="3407:25" pos:end="3407:37">/* fincstp */</comment>

                    <expr_stmt pos:start="3409:21" pos:end="3409:41"><expr pos:start="3409:21" pos:end="3409:40"><call pos:start="3409:21" pos:end="3409:40"><name pos:start="3409:21" pos:end="3409:38">gen_helper_fincstp</name><argument_list pos:start="3409:39" pos:end="3409:40">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3411:21" pos:end="3411:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3415:17" pos:end="3415:22">break;</break>

            <case pos:start="3417:13" pos:end="3417:22">case <expr pos:start="3417:18" pos:end="3417:21"><literal type="number" pos:start="3417:18" pos:end="3417:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="3417:24" pos:end="3417:37">/* grp d9/7 */</comment>

                <switch pos:start="3419:17" pos:end="3471:17">switch<condition pos:start="3419:23" pos:end="3419:26">(<expr pos:start="3419:24" pos:end="3419:25"><name pos:start="3419:24" pos:end="3419:25">rm</name></expr>)</condition> <block pos:start="3419:28" pos:end="3471:17">{<block_content pos:start="3421:17" pos:end="3469:26">

                <case pos:start="3421:17" pos:end="3421:23">case <expr pos:start="3421:22" pos:end="3421:22"><literal type="number" pos:start="3421:22" pos:end="3421:22">0</literal></expr>:</case> <comment type="block" pos:start="3421:25" pos:end="3421:35">/* fprem */</comment>

                    <expr_stmt pos:start="3423:21" pos:end="3423:39"><expr pos:start="3423:21" pos:end="3423:38"><call pos:start="3423:21" pos:end="3423:38"><name pos:start="3423:21" pos:end="3423:36">gen_helper_fprem</name><argument_list pos:start="3423:37" pos:end="3423:38">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3425:21" pos:end="3425:26">break;</break>

                <case pos:start="3427:17" pos:end="3427:23">case <expr pos:start="3427:22" pos:end="3427:22"><literal type="number" pos:start="3427:22" pos:end="3427:22">1</literal></expr>:</case> <comment type="block" pos:start="3427:25" pos:end="3427:37">/* fyl2xp1 */</comment>

                    <expr_stmt pos:start="3429:21" pos:end="3429:41"><expr pos:start="3429:21" pos:end="3429:40"><call pos:start="3429:21" pos:end="3429:40"><name pos:start="3429:21" pos:end="3429:38">gen_helper_fyl2xp1</name><argument_list pos:start="3429:39" pos:end="3429:40">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3431:21" pos:end="3431:26">break;</break>

                <case pos:start="3433:17" pos:end="3433:23">case <expr pos:start="3433:22" pos:end="3433:22"><literal type="number" pos:start="3433:22" pos:end="3433:22">2</literal></expr>:</case> <comment type="block" pos:start="3433:25" pos:end="3433:35">/* fsqrt */</comment>

                    <expr_stmt pos:start="3435:21" pos:end="3435:39"><expr pos:start="3435:21" pos:end="3435:38"><call pos:start="3435:21" pos:end="3435:38"><name pos:start="3435:21" pos:end="3435:36">gen_helper_fsqrt</name><argument_list pos:start="3435:37" pos:end="3435:38">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3437:21" pos:end="3437:26">break;</break>

                <case pos:start="3439:17" pos:end="3439:23">case <expr pos:start="3439:22" pos:end="3439:22"><literal type="number" pos:start="3439:22" pos:end="3439:22">3</literal></expr>:</case> <comment type="block" pos:start="3439:25" pos:end="3439:37">/* fsincos */</comment>

                    <expr_stmt pos:start="3441:21" pos:end="3441:41"><expr pos:start="3441:21" pos:end="3441:40"><call pos:start="3441:21" pos:end="3441:40"><name pos:start="3441:21" pos:end="3441:38">gen_helper_fsincos</name><argument_list pos:start="3441:39" pos:end="3441:40">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3443:21" pos:end="3443:26">break;</break>

                <case pos:start="3445:17" pos:end="3445:23">case <expr pos:start="3445:22" pos:end="3445:22"><literal type="number" pos:start="3445:22" pos:end="3445:22">5</literal></expr>:</case> <comment type="block" pos:start="3445:25" pos:end="3445:36">/* fscale */</comment>

                    <expr_stmt pos:start="3447:21" pos:end="3447:40"><expr pos:start="3447:21" pos:end="3447:39"><call pos:start="3447:21" pos:end="3447:39"><name pos:start="3447:21" pos:end="3447:37">gen_helper_fscale</name><argument_list pos:start="3447:38" pos:end="3447:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3449:21" pos:end="3449:26">break;</break>

                <case pos:start="3451:17" pos:end="3451:23">case <expr pos:start="3451:22" pos:end="3451:22"><literal type="number" pos:start="3451:22" pos:end="3451:22">4</literal></expr>:</case> <comment type="block" pos:start="3451:25" pos:end="3451:37">/* frndint */</comment>

                    <expr_stmt pos:start="3453:21" pos:end="3453:41"><expr pos:start="3453:21" pos:end="3453:40"><call pos:start="3453:21" pos:end="3453:40"><name pos:start="3453:21" pos:end="3453:38">gen_helper_frndint</name><argument_list pos:start="3453:39" pos:end="3453:40">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3455:21" pos:end="3455:26">break;</break>

                <case pos:start="3457:17" pos:end="3457:23">case <expr pos:start="3457:22" pos:end="3457:22"><literal type="number" pos:start="3457:22" pos:end="3457:22">6</literal></expr>:</case> <comment type="block" pos:start="3457:25" pos:end="3457:34">/* fsin */</comment>

                    <expr_stmt pos:start="3459:21" pos:end="3459:38"><expr pos:start="3459:21" pos:end="3459:37"><call pos:start="3459:21" pos:end="3459:37"><name pos:start="3459:21" pos:end="3459:35">gen_helper_fsin</name><argument_list pos:start="3459:36" pos:end="3459:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3461:21" pos:end="3461:26">break;</break>

                <default pos:start="3463:17" pos:end="3463:24">default:</default>

                <case pos:start="3465:17" pos:end="3465:23">case <expr pos:start="3465:22" pos:end="3465:22"><literal type="number" pos:start="3465:22" pos:end="3465:22">7</literal></expr>:</case> <comment type="block" pos:start="3465:25" pos:end="3465:34">/* fcos */</comment>

                    <expr_stmt pos:start="3467:21" pos:end="3467:38"><expr pos:start="3467:21" pos:end="3467:37"><call pos:start="3467:21" pos:end="3467:37"><name pos:start="3467:21" pos:end="3467:35">gen_helper_fcos</name><argument_list pos:start="3467:36" pos:end="3467:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3469:21" pos:end="3469:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3473:17" pos:end="3473:22">break;</break>

            <case pos:start="3475:13" pos:end="3475:22">case <expr pos:start="3475:18" pos:end="3475:21"><literal type="number" pos:start="3475:18" pos:end="3475:21">0x00</literal></expr>:</case> <case pos:start="3475:24" pos:end="3475:33">case <expr pos:start="3475:29" pos:end="3475:32"><literal type="number" pos:start="3475:29" pos:end="3475:32">0x01</literal></expr>:</case> <case pos:start="3475:35" pos:end="3475:53">case <expr pos:start="3475:40" pos:end="3475:52"><literal type="number" pos:start="3475:40" pos:end="3475:43">0x04</literal> <operator pos:start="3475:45" pos:end="3475:47">...</operator> <literal type="number" pos:start="3475:49" pos:end="3475:52">0x07</literal></expr>:</case> <comment type="block" pos:start="3475:55" pos:end="3475:72">/* fxxx st, sti */</comment>

            <case pos:start="3477:13" pos:end="3477:22">case <expr pos:start="3477:18" pos:end="3477:21"><literal type="number" pos:start="3477:18" pos:end="3477:21">0x20</literal></expr>:</case> <case pos:start="3477:24" pos:end="3477:33">case <expr pos:start="3477:29" pos:end="3477:32"><literal type="number" pos:start="3477:29" pos:end="3477:32">0x21</literal></expr>:</case> <case pos:start="3477:35" pos:end="3477:53">case <expr pos:start="3477:40" pos:end="3477:52"><literal type="number" pos:start="3477:40" pos:end="3477:43">0x24</literal> <operator pos:start="3477:45" pos:end="3477:47">...</operator> <literal type="number" pos:start="3477:49" pos:end="3477:52">0x27</literal></expr>:</case> <comment type="block" pos:start="3477:55" pos:end="3477:72">/* fxxx sti, st */</comment>

            <case pos:start="3479:13" pos:end="3479:22">case <expr pos:start="3479:18" pos:end="3479:21"><literal type="number" pos:start="3479:18" pos:end="3479:21">0x30</literal></expr>:</case> <case pos:start="3479:24" pos:end="3479:33">case <expr pos:start="3479:29" pos:end="3479:32"><literal type="number" pos:start="3479:29" pos:end="3479:32">0x31</literal></expr>:</case> <case pos:start="3479:35" pos:end="3479:53">case <expr pos:start="3479:40" pos:end="3479:52"><literal type="number" pos:start="3479:40" pos:end="3479:43">0x34</literal> <operator pos:start="3479:45" pos:end="3479:47">...</operator> <literal type="number" pos:start="3479:49" pos:end="3479:52">0x37</literal></expr>:</case> <comment type="block" pos:start="3479:55" pos:end="3479:73">/* fxxxp sti, st */</comment>

                <block pos:start="3481:17" pos:end="3505:17">{<block_content pos:start="3483:21" pos:end="3503:21">

                    <decl_stmt pos:start="3483:21" pos:end="3483:28"><decl pos:start="3483:21" pos:end="3483:27"><type pos:start="3483:21" pos:end="3483:23"><name pos:start="3483:21" pos:end="3483:23">int</name></type> <name pos:start="3483:25" pos:end="3483:27">op1</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="3487:21" pos:end="3487:33"><expr pos:start="3487:21" pos:end="3487:32"><name pos:start="3487:21" pos:end="3487:23">op1</name> <operator pos:start="3487:25" pos:end="3487:25">=</operator> <name pos:start="3487:27" pos:end="3487:28">op</name> <operator pos:start="3487:30" pos:end="3487:30">&amp;</operator> <literal type="number" pos:start="3487:32" pos:end="3487:32">7</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="3489:21" pos:end="3503:21"><if pos:start="3489:21" pos:end="3497:21">if <condition pos:start="3489:24" pos:end="3489:35">(<expr pos:start="3489:25" pos:end="3489:34"><name pos:start="3489:25" pos:end="3489:26">op</name> <operator pos:start="3489:28" pos:end="3489:29">&gt;=</operator> <literal type="number" pos:start="3489:31" pos:end="3489:34">0x20</literal></expr>)</condition> <block pos:start="3489:37" pos:end="3497:21">{<block_content pos:start="3491:25" pos:end="3495:46">

                        <expr_stmt pos:start="3491:25" pos:end="3491:64"><expr pos:start="3491:25" pos:end="3491:63"><call pos:start="3491:25" pos:end="3491:63"><name pos:start="3491:25" pos:end="3491:51">gen_helper_fp_arith_STN_ST0</name><argument_list pos:start="3491:52" pos:end="3491:63">(<argument pos:start="3491:53" pos:end="3491:55"><expr pos:start="3491:53" pos:end="3491:55"><name pos:start="3491:53" pos:end="3491:55">op1</name></expr></argument>, <argument pos:start="3491:58" pos:end="3491:62"><expr pos:start="3491:58" pos:end="3491:62"><name pos:start="3491:58" pos:end="3491:62">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="3493:25" pos:end="3495:46"><if pos:start="3493:25" pos:end="3495:46">if <condition pos:start="3493:28" pos:end="3493:39">(<expr pos:start="3493:29" pos:end="3493:38"><name pos:start="3493:29" pos:end="3493:30">op</name> <operator pos:start="3493:32" pos:end="3493:33">&gt;=</operator> <literal type="number" pos:start="3493:35" pos:end="3493:38">0x30</literal></expr>)</condition><block type="pseudo" pos:start="3495:29" pos:end="3495:46"><block_content pos:start="3495:29" pos:end="3495:46">

                            <expr_stmt pos:start="3495:29" pos:end="3495:46"><expr pos:start="3495:29" pos:end="3495:45"><call pos:start="3495:29" pos:end="3495:45"><name pos:start="3495:29" pos:end="3495:43">gen_helper_fpop</name><argument_list pos:start="3495:44" pos:end="3495:45">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="3497:23" pos:end="3503:21">else <block pos:start="3497:28" pos:end="3503:21">{<block_content pos:start="3499:25" pos:end="3501:57">

                        <expr_stmt pos:start="3499:25" pos:end="3499:70"><expr pos:start="3499:25" pos:end="3499:69"><call pos:start="3499:25" pos:end="3499:69"><name pos:start="3499:25" pos:end="3499:47">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3499:48" pos:end="3499:69">(<argument pos:start="3499:49" pos:end="3499:68"><expr pos:start="3499:49" pos:end="3499:68"><call pos:start="3499:49" pos:end="3499:68"><name pos:start="3499:49" pos:end="3499:61">tcg_const_i32</name><argument_list pos:start="3499:62" pos:end="3499:68">(<argument pos:start="3499:63" pos:end="3499:67"><expr pos:start="3499:63" pos:end="3499:67"><name pos:start="3499:63" pos:end="3499:67">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3501:25" pos:end="3501:57"><expr pos:start="3501:25" pos:end="3501:56"><call pos:start="3501:25" pos:end="3501:56"><name pos:start="3501:25" pos:end="3501:51">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="3501:52" pos:end="3501:56">(<argument pos:start="3501:53" pos:end="3501:55"><expr pos:start="3501:53" pos:end="3501:55"><name pos:start="3501:53" pos:end="3501:55">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="3507:17" pos:end="3507:22">break;</break>

            <case pos:start="3509:13" pos:end="3509:22">case <expr pos:start="3509:18" pos:end="3509:21"><literal type="number" pos:start="3509:18" pos:end="3509:21">0x02</literal></expr>:</case> <comment type="block" pos:start="3509:24" pos:end="3509:33">/* fcom */</comment>

            <case pos:start="3511:13" pos:end="3511:22">case <expr pos:start="3511:18" pos:end="3511:21"><literal type="number" pos:start="3511:18" pos:end="3511:21">0x22</literal></expr>:</case> <comment type="block" pos:start="3511:24" pos:end="3511:51">/* fcom2, undocumented op */</comment>

                <expr_stmt pos:start="3513:17" pos:end="3513:62"><expr pos:start="3513:17" pos:end="3513:61"><call pos:start="3513:17" pos:end="3513:61"><name pos:start="3513:17" pos:end="3513:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3513:40" pos:end="3513:61">(<argument pos:start="3513:41" pos:end="3513:60"><expr pos:start="3513:41" pos:end="3513:60"><call pos:start="3513:41" pos:end="3513:60"><name pos:start="3513:41" pos:end="3513:53">tcg_const_i32</name><argument_list pos:start="3513:54" pos:end="3513:60">(<argument pos:start="3513:55" pos:end="3513:59"><expr pos:start="3513:55" pos:end="3513:59"><name pos:start="3513:55" pos:end="3513:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3515:17" pos:end="3515:42"><expr pos:start="3515:17" pos:end="3515:41"><call pos:start="3515:17" pos:end="3515:41"><name pos:start="3515:17" pos:end="3515:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3515:40" pos:end="3515:41">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3517:17" pos:end="3517:22">break;</break>

            <case pos:start="3519:13" pos:end="3519:22">case <expr pos:start="3519:18" pos:end="3519:21"><literal type="number" pos:start="3519:18" pos:end="3519:21">0x03</literal></expr>:</case> <comment type="block" pos:start="3519:24" pos:end="3519:34">/* fcomp */</comment>

            <case pos:start="3521:13" pos:end="3521:22">case <expr pos:start="3521:18" pos:end="3521:21"><literal type="number" pos:start="3521:18" pos:end="3521:21">0x23</literal></expr>:</case> <comment type="block" pos:start="3521:24" pos:end="3521:52">/* fcomp3, undocumented op */</comment>

            <case pos:start="3523:13" pos:end="3523:22">case <expr pos:start="3523:18" pos:end="3523:21"><literal type="number" pos:start="3523:18" pos:end="3523:21">0x32</literal></expr>:</case> <comment type="block" pos:start="3523:24" pos:end="3523:52">/* fcomp5, undocumented op */</comment>

                <expr_stmt pos:start="3525:17" pos:end="3525:62"><expr pos:start="3525:17" pos:end="3525:61"><call pos:start="3525:17" pos:end="3525:61"><name pos:start="3525:17" pos:end="3525:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3525:40" pos:end="3525:61">(<argument pos:start="3525:41" pos:end="3525:60"><expr pos:start="3525:41" pos:end="3525:60"><call pos:start="3525:41" pos:end="3525:60"><name pos:start="3525:41" pos:end="3525:53">tcg_const_i32</name><argument_list pos:start="3525:54" pos:end="3525:60">(<argument pos:start="3525:55" pos:end="3525:59"><expr pos:start="3525:55" pos:end="3525:59"><name pos:start="3525:55" pos:end="3525:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3527:17" pos:end="3527:42"><expr pos:start="3527:17" pos:end="3527:41"><call pos:start="3527:17" pos:end="3527:41"><name pos:start="3527:17" pos:end="3527:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3527:40" pos:end="3527:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3529:17" pos:end="3529:34"><expr pos:start="3529:17" pos:end="3529:33"><call pos:start="3529:17" pos:end="3529:33"><name pos:start="3529:17" pos:end="3529:31">gen_helper_fpop</name><argument_list pos:start="3529:32" pos:end="3529:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3531:17" pos:end="3531:22">break;</break>

            <case pos:start="3533:13" pos:end="3533:22">case <expr pos:start="3533:18" pos:end="3533:21"><literal type="number" pos:start="3533:18" pos:end="3533:21">0x15</literal></expr>:</case> <comment type="block" pos:start="3533:24" pos:end="3533:33">/* da/5 */</comment>

                <switch pos:start="3535:17" pos:end="3553:17">switch<condition pos:start="3535:23" pos:end="3535:26">(<expr pos:start="3535:24" pos:end="3535:25"><name pos:start="3535:24" pos:end="3535:25">rm</name></expr>)</condition> <block pos:start="3535:28" pos:end="3553:17">{<block_content pos:start="3537:17" pos:end="3551:36">

                <case pos:start="3537:17" pos:end="3537:23">case <expr pos:start="3537:22" pos:end="3537:22"><literal type="number" pos:start="3537:22" pos:end="3537:22">1</literal></expr>:</case> <comment type="block" pos:start="3537:25" pos:end="3537:37">/* fucompp */</comment>

                    <expr_stmt pos:start="3539:21" pos:end="3539:62"><expr pos:start="3539:21" pos:end="3539:61"><call pos:start="3539:21" pos:end="3539:61"><name pos:start="3539:21" pos:end="3539:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3539:44" pos:end="3539:61">(<argument pos:start="3539:45" pos:end="3539:60"><expr pos:start="3539:45" pos:end="3539:60"><call pos:start="3539:45" pos:end="3539:60"><name pos:start="3539:45" pos:end="3539:57">tcg_const_i32</name><argument_list pos:start="3539:58" pos:end="3539:60">(<argument pos:start="3539:59" pos:end="3539:59"><expr pos:start="3539:59" pos:end="3539:59"><literal type="number" pos:start="3539:59" pos:end="3539:59">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3541:21" pos:end="3541:47"><expr pos:start="3541:21" pos:end="3541:46"><call pos:start="3541:21" pos:end="3541:46"><name pos:start="3541:21" pos:end="3541:44">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3541:45" pos:end="3541:46">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3543:21" pos:end="3543:38"><expr pos:start="3543:21" pos:end="3543:37"><call pos:start="3543:21" pos:end="3543:37"><name pos:start="3543:21" pos:end="3543:35">gen_helper_fpop</name><argument_list pos:start="3543:36" pos:end="3543:37">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3545:21" pos:end="3545:38"><expr pos:start="3545:21" pos:end="3545:37"><call pos:start="3545:21" pos:end="3545:37"><name pos:start="3545:21" pos:end="3545:35">gen_helper_fpop</name><argument_list pos:start="3545:36" pos:end="3545:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3547:21" pos:end="3547:26">break;</break>

                <default pos:start="3549:17" pos:end="3549:24">default:</default>

                    <goto pos:start="3551:21" pos:end="3551:36">goto <name pos:start="3551:26" pos:end="3551:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3555:17" pos:end="3555:22">break;</break>

            <case pos:start="3557:13" pos:end="3557:22">case <expr pos:start="3557:18" pos:end="3557:21"><literal type="number" pos:start="3557:18" pos:end="3557:21">0x1c</literal></expr>:</case>

                <switch pos:start="3559:17" pos:end="3589:17">switch<condition pos:start="3559:23" pos:end="3559:26">(<expr pos:start="3559:24" pos:end="3559:25"><name pos:start="3559:24" pos:end="3559:25">rm</name></expr>)</condition> <block pos:start="3559:28" pos:end="3589:17">{<block_content pos:start="3561:17" pos:end="3587:36">

                <case pos:start="3561:17" pos:end="3561:23">case <expr pos:start="3561:22" pos:end="3561:22"><literal type="number" pos:start="3561:22" pos:end="3561:22">0</literal></expr>:</case> <comment type="block" pos:start="3561:25" pos:end="3561:63">/* feni (287 only, just do nop here) */</comment>

                    <break pos:start="3563:21" pos:end="3563:26">break;</break>

                <case pos:start="3565:17" pos:end="3565:23">case <expr pos:start="3565:22" pos:end="3565:22"><literal type="number" pos:start="3565:22" pos:end="3565:22">1</literal></expr>:</case> <comment type="block" pos:start="3565:25" pos:end="3565:64">/* fdisi (287 only, just do nop here) */</comment>

                    <break pos:start="3567:21" pos:end="3567:26">break;</break>

                <case pos:start="3569:17" pos:end="3569:23">case <expr pos:start="3569:22" pos:end="3569:22"><literal type="number" pos:start="3569:22" pos:end="3569:22">2</literal></expr>:</case> <comment type="block" pos:start="3569:25" pos:end="3569:35">/* fclex */</comment>

                    <expr_stmt pos:start="3571:21" pos:end="3571:39"><expr pos:start="3571:21" pos:end="3571:38"><call pos:start="3571:21" pos:end="3571:38"><name pos:start="3571:21" pos:end="3571:36">gen_helper_fclex</name><argument_list pos:start="3571:37" pos:end="3571:38">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3573:21" pos:end="3573:26">break;</break>

                <case pos:start="3575:17" pos:end="3575:23">case <expr pos:start="3575:22" pos:end="3575:22"><literal type="number" pos:start="3575:22" pos:end="3575:22">3</literal></expr>:</case> <comment type="block" pos:start="3575:25" pos:end="3575:36">/* fninit */</comment>

                    <expr_stmt pos:start="3577:21" pos:end="3577:40"><expr pos:start="3577:21" pos:end="3577:39"><call pos:start="3577:21" pos:end="3577:39"><name pos:start="3577:21" pos:end="3577:37">gen_helper_fninit</name><argument_list pos:start="3577:38" pos:end="3577:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3579:21" pos:end="3579:26">break;</break>

                <case pos:start="3581:17" pos:end="3581:23">case <expr pos:start="3581:22" pos:end="3581:22"><literal type="number" pos:start="3581:22" pos:end="3581:22">4</literal></expr>:</case> <comment type="block" pos:start="3581:25" pos:end="3581:65">/* fsetpm (287 only, just do nop here) */</comment>

                    <break pos:start="3583:21" pos:end="3583:26">break;</break>

                <default pos:start="3585:17" pos:end="3585:24">default:</default>

                    <goto pos:start="3587:21" pos:end="3587:36">goto <name pos:start="3587:26" pos:end="3587:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3591:17" pos:end="3591:22">break;</break>

            <case pos:start="3593:13" pos:end="3593:22">case <expr pos:start="3593:18" pos:end="3593:21"><literal type="number" pos:start="3593:18" pos:end="3593:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="3593:24" pos:end="3593:35">/* fucomi */</comment>

                <if_stmt pos:start="3595:17" pos:end="3597:47"><if pos:start="3595:17" pos:end="3597:47">if <condition pos:start="3595:20" pos:end="3595:46">(<expr pos:start="3595:21" pos:end="3595:45"><name pos:start="3595:21" pos:end="3595:28"><name pos:start="3595:21" pos:end="3595:21">s</name><operator pos:start="3595:22" pos:end="3595:23">-&gt;</operator><name pos:start="3595:24" pos:end="3595:28">cc_op</name></name> <operator pos:start="3595:30" pos:end="3595:31">!=</operator> <name pos:start="3595:33" pos:end="3595:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3597:21" pos:end="3597:47"><block_content pos:start="3597:21" pos:end="3597:47">

                    <expr_stmt pos:start="3597:21" pos:end="3597:47"><expr pos:start="3597:21" pos:end="3597:46"><call pos:start="3597:21" pos:end="3597:46"><name pos:start="3597:21" pos:end="3597:36">gen_op_set_cc_op</name><argument_list pos:start="3597:37" pos:end="3597:46">(<argument pos:start="3597:38" pos:end="3597:45"><expr pos:start="3597:38" pos:end="3597:45"><name pos:start="3597:38" pos:end="3597:45"><name pos:start="3597:38" pos:end="3597:38">s</name><operator pos:start="3597:39" pos:end="3597:40">-&gt;</operator><name pos:start="3597:41" pos:end="3597:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3599:17" pos:end="3599:62"><expr pos:start="3599:17" pos:end="3599:61"><call pos:start="3599:17" pos:end="3599:61"><name pos:start="3599:17" pos:end="3599:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3599:40" pos:end="3599:61">(<argument pos:start="3599:41" pos:end="3599:60"><expr pos:start="3599:41" pos:end="3599:60"><call pos:start="3599:41" pos:end="3599:60"><name pos:start="3599:41" pos:end="3599:53">tcg_const_i32</name><argument_list pos:start="3599:54" pos:end="3599:60">(<argument pos:start="3599:55" pos:end="3599:59"><expr pos:start="3599:55" pos:end="3599:59"><name pos:start="3599:55" pos:end="3599:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3601:17" pos:end="3601:44"><expr pos:start="3601:17" pos:end="3601:43"><call pos:start="3601:17" pos:end="3601:43"><name pos:start="3601:17" pos:end="3601:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="3601:42" pos:end="3601:43">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3603:17" pos:end="3603:40"><expr pos:start="3603:17" pos:end="3603:39"><name pos:start="3603:17" pos:end="3603:24"><name pos:start="3603:17" pos:end="3603:17">s</name><operator pos:start="3603:18" pos:end="3603:19">-&gt;</operator><name pos:start="3603:20" pos:end="3603:24">cc_op</name></name> <operator pos:start="3603:26" pos:end="3603:26">=</operator> <name pos:start="3603:28" pos:end="3603:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3605:17" pos:end="3605:22">break;</break>

            <case pos:start="3607:13" pos:end="3607:22">case <expr pos:start="3607:18" pos:end="3607:21"><literal type="number" pos:start="3607:18" pos:end="3607:21">0x1e</literal></expr>:</case> <comment type="block" pos:start="3607:24" pos:end="3607:34">/* fcomi */</comment>

                <if_stmt pos:start="3609:17" pos:end="3611:47"><if pos:start="3609:17" pos:end="3611:47">if <condition pos:start="3609:20" pos:end="3609:46">(<expr pos:start="3609:21" pos:end="3609:45"><name pos:start="3609:21" pos:end="3609:28"><name pos:start="3609:21" pos:end="3609:21">s</name><operator pos:start="3609:22" pos:end="3609:23">-&gt;</operator><name pos:start="3609:24" pos:end="3609:28">cc_op</name></name> <operator pos:start="3609:30" pos:end="3609:31">!=</operator> <name pos:start="3609:33" pos:end="3609:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3611:21" pos:end="3611:47"><block_content pos:start="3611:21" pos:end="3611:47">

                    <expr_stmt pos:start="3611:21" pos:end="3611:47"><expr pos:start="3611:21" pos:end="3611:46"><call pos:start="3611:21" pos:end="3611:46"><name pos:start="3611:21" pos:end="3611:36">gen_op_set_cc_op</name><argument_list pos:start="3611:37" pos:end="3611:46">(<argument pos:start="3611:38" pos:end="3611:45"><expr pos:start="3611:38" pos:end="3611:45"><name pos:start="3611:38" pos:end="3611:45"><name pos:start="3611:38" pos:end="3611:38">s</name><operator pos:start="3611:39" pos:end="3611:40">-&gt;</operator><name pos:start="3611:41" pos:end="3611:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3613:17" pos:end="3613:62"><expr pos:start="3613:17" pos:end="3613:61"><call pos:start="3613:17" pos:end="3613:61"><name pos:start="3613:17" pos:end="3613:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3613:40" pos:end="3613:61">(<argument pos:start="3613:41" pos:end="3613:60"><expr pos:start="3613:41" pos:end="3613:60"><call pos:start="3613:41" pos:end="3613:60"><name pos:start="3613:41" pos:end="3613:53">tcg_const_i32</name><argument_list pos:start="3613:54" pos:end="3613:60">(<argument pos:start="3613:55" pos:end="3613:59"><expr pos:start="3613:55" pos:end="3613:59"><name pos:start="3613:55" pos:end="3613:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3615:17" pos:end="3615:43"><expr pos:start="3615:17" pos:end="3615:42"><call pos:start="3615:17" pos:end="3615:42"><name pos:start="3615:17" pos:end="3615:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="3615:41" pos:end="3615:42">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3617:17" pos:end="3617:40"><expr pos:start="3617:17" pos:end="3617:39"><name pos:start="3617:17" pos:end="3617:24"><name pos:start="3617:17" pos:end="3617:17">s</name><operator pos:start="3617:18" pos:end="3617:19">-&gt;</operator><name pos:start="3617:20" pos:end="3617:24">cc_op</name></name> <operator pos:start="3617:26" pos:end="3617:26">=</operator> <name pos:start="3617:28" pos:end="3617:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3619:17" pos:end="3619:22">break;</break>

            <case pos:start="3621:13" pos:end="3621:22">case <expr pos:start="3621:18" pos:end="3621:21"><literal type="number" pos:start="3621:18" pos:end="3621:21">0x28</literal></expr>:</case> <comment type="block" pos:start="3621:24" pos:end="3621:38">/* ffree sti */</comment>

                <expr_stmt pos:start="3623:17" pos:end="3623:59"><expr pos:start="3623:17" pos:end="3623:58"><call pos:start="3623:17" pos:end="3623:58"><name pos:start="3623:17" pos:end="3623:36">gen_helper_ffree_STN</name><argument_list pos:start="3623:37" pos:end="3623:58">(<argument pos:start="3623:38" pos:end="3623:57"><expr pos:start="3623:38" pos:end="3623:57"><call pos:start="3623:38" pos:end="3623:57"><name pos:start="3623:38" pos:end="3623:50">tcg_const_i32</name><argument_list pos:start="3623:51" pos:end="3623:57">(<argument pos:start="3623:52" pos:end="3623:56"><expr pos:start="3623:52" pos:end="3623:56"><name pos:start="3623:52" pos:end="3623:56">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3625:17" pos:end="3625:22">break;</break>

            <case pos:start="3627:13" pos:end="3627:22">case <expr pos:start="3627:18" pos:end="3627:21"><literal type="number" pos:start="3627:18" pos:end="3627:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="3627:24" pos:end="3627:36">/* fst sti */</comment>

                <expr_stmt pos:start="3629:17" pos:end="3629:62"><expr pos:start="3629:17" pos:end="3629:61"><call pos:start="3629:17" pos:end="3629:61"><name pos:start="3629:17" pos:end="3629:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="3629:40" pos:end="3629:61">(<argument pos:start="3629:41" pos:end="3629:60"><expr pos:start="3629:41" pos:end="3629:60"><call pos:start="3629:41" pos:end="3629:60"><name pos:start="3629:41" pos:end="3629:53">tcg_const_i32</name><argument_list pos:start="3629:54" pos:end="3629:60">(<argument pos:start="3629:55" pos:end="3629:59"><expr pos:start="3629:55" pos:end="3629:59"><name pos:start="3629:55" pos:end="3629:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3631:17" pos:end="3631:22">break;</break>

            <case pos:start="3633:13" pos:end="3633:22">case <expr pos:start="3633:18" pos:end="3633:21"><literal type="number" pos:start="3633:18" pos:end="3633:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="3633:24" pos:end="3633:37">/* fstp sti */</comment>

            <case pos:start="3635:13" pos:end="3635:22">case <expr pos:start="3635:18" pos:end="3635:21"><literal type="number" pos:start="3635:18" pos:end="3635:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="3635:24" pos:end="3635:55">/* fstp1 sti, undocumented op */</comment>

            <case pos:start="3637:13" pos:end="3637:22">case <expr pos:start="3637:18" pos:end="3637:21"><literal type="number" pos:start="3637:18" pos:end="3637:21">0x3a</literal></expr>:</case> <comment type="block" pos:start="3637:24" pos:end="3637:55">/* fstp8 sti, undocumented op */</comment>

            <case pos:start="3639:13" pos:end="3639:22">case <expr pos:start="3639:18" pos:end="3639:21"><literal type="number" pos:start="3639:18" pos:end="3639:21">0x3b</literal></expr>:</case> <comment type="block" pos:start="3639:24" pos:end="3639:55">/* fstp9 sti, undocumented op */</comment>

                <expr_stmt pos:start="3641:17" pos:end="3641:62"><expr pos:start="3641:17" pos:end="3641:61"><call pos:start="3641:17" pos:end="3641:61"><name pos:start="3641:17" pos:end="3641:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="3641:40" pos:end="3641:61">(<argument pos:start="3641:41" pos:end="3641:60"><expr pos:start="3641:41" pos:end="3641:60"><call pos:start="3641:41" pos:end="3641:60"><name pos:start="3641:41" pos:end="3641:53">tcg_const_i32</name><argument_list pos:start="3641:54" pos:end="3641:60">(<argument pos:start="3641:55" pos:end="3641:59"><expr pos:start="3641:55" pos:end="3641:59"><name pos:start="3641:55" pos:end="3641:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3643:17" pos:end="3643:34"><expr pos:start="3643:17" pos:end="3643:33"><call pos:start="3643:17" pos:end="3643:33"><name pos:start="3643:17" pos:end="3643:31">gen_helper_fpop</name><argument_list pos:start="3643:32" pos:end="3643:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3645:17" pos:end="3645:22">break;</break>

            <case pos:start="3647:13" pos:end="3647:22">case <expr pos:start="3647:18" pos:end="3647:21"><literal type="number" pos:start="3647:18" pos:end="3647:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="3647:24" pos:end="3647:40">/* fucom st(i) */</comment>

                <expr_stmt pos:start="3649:17" pos:end="3649:62"><expr pos:start="3649:17" pos:end="3649:61"><call pos:start="3649:17" pos:end="3649:61"><name pos:start="3649:17" pos:end="3649:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3649:40" pos:end="3649:61">(<argument pos:start="3649:41" pos:end="3649:60"><expr pos:start="3649:41" pos:end="3649:60"><call pos:start="3649:41" pos:end="3649:60"><name pos:start="3649:41" pos:end="3649:53">tcg_const_i32</name><argument_list pos:start="3649:54" pos:end="3649:60">(<argument pos:start="3649:55" pos:end="3649:59"><expr pos:start="3649:55" pos:end="3649:59"><name pos:start="3649:55" pos:end="3649:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3651:17" pos:end="3651:43"><expr pos:start="3651:17" pos:end="3651:42"><call pos:start="3651:17" pos:end="3651:42"><name pos:start="3651:17" pos:end="3651:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3651:41" pos:end="3651:42">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3653:17" pos:end="3653:22">break;</break>

            <case pos:start="3655:13" pos:end="3655:22">case <expr pos:start="3655:18" pos:end="3655:21"><literal type="number" pos:start="3655:18" pos:end="3655:21">0x2d</literal></expr>:</case> <comment type="block" pos:start="3655:24" pos:end="3655:41">/* fucomp st(i) */</comment>

                <expr_stmt pos:start="3657:17" pos:end="3657:62"><expr pos:start="3657:17" pos:end="3657:61"><call pos:start="3657:17" pos:end="3657:61"><name pos:start="3657:17" pos:end="3657:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3657:40" pos:end="3657:61">(<argument pos:start="3657:41" pos:end="3657:60"><expr pos:start="3657:41" pos:end="3657:60"><call pos:start="3657:41" pos:end="3657:60"><name pos:start="3657:41" pos:end="3657:53">tcg_const_i32</name><argument_list pos:start="3657:54" pos:end="3657:60">(<argument pos:start="3657:55" pos:end="3657:59"><expr pos:start="3657:55" pos:end="3657:59"><name pos:start="3657:55" pos:end="3657:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3659:17" pos:end="3659:43"><expr pos:start="3659:17" pos:end="3659:42"><call pos:start="3659:17" pos:end="3659:42"><name pos:start="3659:17" pos:end="3659:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3659:41" pos:end="3659:42">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3661:17" pos:end="3661:34"><expr pos:start="3661:17" pos:end="3661:33"><call pos:start="3661:17" pos:end="3661:33"><name pos:start="3661:17" pos:end="3661:31">gen_helper_fpop</name><argument_list pos:start="3661:32" pos:end="3661:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3663:17" pos:end="3663:22">break;</break>

            <case pos:start="3665:13" pos:end="3665:22">case <expr pos:start="3665:18" pos:end="3665:21"><literal type="number" pos:start="3665:18" pos:end="3665:21">0x33</literal></expr>:</case> <comment type="block" pos:start="3665:24" pos:end="3665:33">/* de/3 */</comment>

                <switch pos:start="3667:17" pos:end="3685:17">switch<condition pos:start="3667:23" pos:end="3667:26">(<expr pos:start="3667:24" pos:end="3667:25"><name pos:start="3667:24" pos:end="3667:25">rm</name></expr>)</condition> <block pos:start="3667:28" pos:end="3685:17">{<block_content pos:start="3669:17" pos:end="3683:36">

                <case pos:start="3669:17" pos:end="3669:23">case <expr pos:start="3669:22" pos:end="3669:22"><literal type="number" pos:start="3669:22" pos:end="3669:22">1</literal></expr>:</case> <comment type="block" pos:start="3669:25" pos:end="3669:36">/* fcompp */</comment>

                    <expr_stmt pos:start="3671:21" pos:end="3671:62"><expr pos:start="3671:21" pos:end="3671:61"><call pos:start="3671:21" pos:end="3671:61"><name pos:start="3671:21" pos:end="3671:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3671:44" pos:end="3671:61">(<argument pos:start="3671:45" pos:end="3671:60"><expr pos:start="3671:45" pos:end="3671:60"><call pos:start="3671:45" pos:end="3671:60"><name pos:start="3671:45" pos:end="3671:57">tcg_const_i32</name><argument_list pos:start="3671:58" pos:end="3671:60">(<argument pos:start="3671:59" pos:end="3671:59"><expr pos:start="3671:59" pos:end="3671:59"><literal type="number" pos:start="3671:59" pos:end="3671:59">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3673:21" pos:end="3673:46"><expr pos:start="3673:21" pos:end="3673:45"><call pos:start="3673:21" pos:end="3673:45"><name pos:start="3673:21" pos:end="3673:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3673:44" pos:end="3673:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3675:21" pos:end="3675:38"><expr pos:start="3675:21" pos:end="3675:37"><call pos:start="3675:21" pos:end="3675:37"><name pos:start="3675:21" pos:end="3675:35">gen_helper_fpop</name><argument_list pos:start="3675:36" pos:end="3675:37">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3677:21" pos:end="3677:38"><expr pos:start="3677:21" pos:end="3677:37"><call pos:start="3677:21" pos:end="3677:37"><name pos:start="3677:21" pos:end="3677:35">gen_helper_fpop</name><argument_list pos:start="3677:36" pos:end="3677:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3679:21" pos:end="3679:26">break;</break>

                <default pos:start="3681:17" pos:end="3681:24">default:</default>

                    <goto pos:start="3683:21" pos:end="3683:36">goto <name pos:start="3683:26" pos:end="3683:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3687:17" pos:end="3687:22">break;</break>

            <case pos:start="3689:13" pos:end="3689:22">case <expr pos:start="3689:18" pos:end="3689:21"><literal type="number" pos:start="3689:18" pos:end="3689:21">0x38</literal></expr>:</case> <comment type="block" pos:start="3689:24" pos:end="3689:56">/* ffreep sti, undocumented op */</comment>

                <expr_stmt pos:start="3691:17" pos:end="3691:59"><expr pos:start="3691:17" pos:end="3691:58"><call pos:start="3691:17" pos:end="3691:58"><name pos:start="3691:17" pos:end="3691:36">gen_helper_ffree_STN</name><argument_list pos:start="3691:37" pos:end="3691:58">(<argument pos:start="3691:38" pos:end="3691:57"><expr pos:start="3691:38" pos:end="3691:57"><call pos:start="3691:38" pos:end="3691:57"><name pos:start="3691:38" pos:end="3691:50">tcg_const_i32</name><argument_list pos:start="3691:51" pos:end="3691:57">(<argument pos:start="3691:52" pos:end="3691:56"><expr pos:start="3691:52" pos:end="3691:56"><name pos:start="3691:52" pos:end="3691:56">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3693:17" pos:end="3693:34"><expr pos:start="3693:17" pos:end="3693:33"><call pos:start="3693:17" pos:end="3693:33"><name pos:start="3693:17" pos:end="3693:31">gen_helper_fpop</name><argument_list pos:start="3693:32" pos:end="3693:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3695:17" pos:end="3695:22">break;</break>

            <case pos:start="3697:13" pos:end="3697:22">case <expr pos:start="3697:18" pos:end="3697:21"><literal type="number" pos:start="3697:18" pos:end="3697:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="3697:24" pos:end="3697:33">/* df/4 */</comment>

                <switch pos:start="3699:17" pos:end="3715:17">switch<condition pos:start="3699:23" pos:end="3699:26">(<expr pos:start="3699:24" pos:end="3699:25"><name pos:start="3699:24" pos:end="3699:25">rm</name></expr>)</condition> <block pos:start="3699:28" pos:end="3715:17">{<block_content pos:start="3701:17" pos:end="3713:36">

                <case pos:start="3701:17" pos:end="3701:23">case <expr pos:start="3701:22" pos:end="3701:22"><literal type="number" pos:start="3701:22" pos:end="3701:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="3703:21" pos:end="3703:52"><expr pos:start="3703:21" pos:end="3703:51"><call pos:start="3703:21" pos:end="3703:51"><name pos:start="3703:21" pos:end="3703:37">gen_helper_fnstsw</name><argument_list pos:start="3703:38" pos:end="3703:51">(<argument pos:start="3703:39" pos:end="3703:50"><expr pos:start="3703:39" pos:end="3703:50"><name pos:start="3703:39" pos:end="3703:50">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3705:21" pos:end="3705:64"><expr pos:start="3705:21" pos:end="3705:63"><call pos:start="3705:21" pos:end="3705:63"><name pos:start="3705:21" pos:end="3705:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="3705:40" pos:end="3705:63">(<argument pos:start="3705:41" pos:end="3705:48"><expr pos:start="3705:41" pos:end="3705:48"><name pos:start="3705:41" pos:end="3705:48"><name pos:start="3705:41" pos:end="3705:45">cpu_T</name><index pos:start="3705:46" pos:end="3705:48">[<expr pos:start="3705:47" pos:end="3705:47"><literal type="number" pos:start="3705:47" pos:end="3705:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3705:51" pos:end="3705:62"><expr pos:start="3705:51" pos:end="3705:62"><name pos:start="3705:51" pos:end="3705:62">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3707:21" pos:end="3707:54"><expr pos:start="3707:21" pos:end="3707:53"><call pos:start="3707:21" pos:end="3707:53"><name pos:start="3707:21" pos:end="3707:37">gen_op_mov_reg_T0</name><argument_list pos:start="3707:38" pos:end="3707:53">(<argument pos:start="3707:39" pos:end="3707:45"><expr pos:start="3707:39" pos:end="3707:45"><name pos:start="3707:39" pos:end="3707:45">OT_WORD</name></expr></argument>, <argument pos:start="3707:48" pos:end="3707:52"><expr pos:start="3707:48" pos:end="3707:52"><name pos:start="3707:48" pos:end="3707:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3709:21" pos:end="3709:26">break;</break>

                <default pos:start="3711:17" pos:end="3711:24">default:</default>

                    <goto pos:start="3713:21" pos:end="3713:36">goto <name pos:start="3713:26" pos:end="3713:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3717:17" pos:end="3717:22">break;</break>

            <case pos:start="3719:13" pos:end="3719:22">case <expr pos:start="3719:18" pos:end="3719:21"><literal type="number" pos:start="3719:18" pos:end="3719:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="3719:24" pos:end="3719:36">/* fucomip */</comment>

                <if_stmt pos:start="3721:17" pos:end="3723:47"><if pos:start="3721:17" pos:end="3723:47">if <condition pos:start="3721:20" pos:end="3721:46">(<expr pos:start="3721:21" pos:end="3721:45"><name pos:start="3721:21" pos:end="3721:28"><name pos:start="3721:21" pos:end="3721:21">s</name><operator pos:start="3721:22" pos:end="3721:23">-&gt;</operator><name pos:start="3721:24" pos:end="3721:28">cc_op</name></name> <operator pos:start="3721:30" pos:end="3721:31">!=</operator> <name pos:start="3721:33" pos:end="3721:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3723:21" pos:end="3723:47"><block_content pos:start="3723:21" pos:end="3723:47">

                    <expr_stmt pos:start="3723:21" pos:end="3723:47"><expr pos:start="3723:21" pos:end="3723:46"><call pos:start="3723:21" pos:end="3723:46"><name pos:start="3723:21" pos:end="3723:36">gen_op_set_cc_op</name><argument_list pos:start="3723:37" pos:end="3723:46">(<argument pos:start="3723:38" pos:end="3723:45"><expr pos:start="3723:38" pos:end="3723:45"><name pos:start="3723:38" pos:end="3723:45"><name pos:start="3723:38" pos:end="3723:38">s</name><operator pos:start="3723:39" pos:end="3723:40">-&gt;</operator><name pos:start="3723:41" pos:end="3723:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3725:17" pos:end="3725:62"><expr pos:start="3725:17" pos:end="3725:61"><call pos:start="3725:17" pos:end="3725:61"><name pos:start="3725:17" pos:end="3725:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3725:40" pos:end="3725:61">(<argument pos:start="3725:41" pos:end="3725:60"><expr pos:start="3725:41" pos:end="3725:60"><call pos:start="3725:41" pos:end="3725:60"><name pos:start="3725:41" pos:end="3725:53">tcg_const_i32</name><argument_list pos:start="3725:54" pos:end="3725:60">(<argument pos:start="3725:55" pos:end="3725:59"><expr pos:start="3725:55" pos:end="3725:59"><name pos:start="3725:55" pos:end="3725:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3727:17" pos:end="3727:44"><expr pos:start="3727:17" pos:end="3727:43"><call pos:start="3727:17" pos:end="3727:43"><name pos:start="3727:17" pos:end="3727:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="3727:42" pos:end="3727:43">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3729:17" pos:end="3729:34"><expr pos:start="3729:17" pos:end="3729:33"><call pos:start="3729:17" pos:end="3729:33"><name pos:start="3729:17" pos:end="3729:31">gen_helper_fpop</name><argument_list pos:start="3729:32" pos:end="3729:33">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3731:17" pos:end="3731:40"><expr pos:start="3731:17" pos:end="3731:39"><name pos:start="3731:17" pos:end="3731:24"><name pos:start="3731:17" pos:end="3731:17">s</name><operator pos:start="3731:18" pos:end="3731:19">-&gt;</operator><name pos:start="3731:20" pos:end="3731:24">cc_op</name></name> <operator pos:start="3731:26" pos:end="3731:26">=</operator> <name pos:start="3731:28" pos:end="3731:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3733:17" pos:end="3733:22">break;</break>

            <case pos:start="3735:13" pos:end="3735:22">case <expr pos:start="3735:18" pos:end="3735:21"><literal type="number" pos:start="3735:18" pos:end="3735:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="3735:24" pos:end="3735:35">/* fcomip */</comment>

                <if_stmt pos:start="3737:17" pos:end="3739:47"><if pos:start="3737:17" pos:end="3739:47">if <condition pos:start="3737:20" pos:end="3737:46">(<expr pos:start="3737:21" pos:end="3737:45"><name pos:start="3737:21" pos:end="3737:28"><name pos:start="3737:21" pos:end="3737:21">s</name><operator pos:start="3737:22" pos:end="3737:23">-&gt;</operator><name pos:start="3737:24" pos:end="3737:28">cc_op</name></name> <operator pos:start="3737:30" pos:end="3737:31">!=</operator> <name pos:start="3737:33" pos:end="3737:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3739:21" pos:end="3739:47"><block_content pos:start="3739:21" pos:end="3739:47">

                    <expr_stmt pos:start="3739:21" pos:end="3739:47"><expr pos:start="3739:21" pos:end="3739:46"><call pos:start="3739:21" pos:end="3739:46"><name pos:start="3739:21" pos:end="3739:36">gen_op_set_cc_op</name><argument_list pos:start="3739:37" pos:end="3739:46">(<argument pos:start="3739:38" pos:end="3739:45"><expr pos:start="3739:38" pos:end="3739:45"><name pos:start="3739:38" pos:end="3739:45"><name pos:start="3739:38" pos:end="3739:38">s</name><operator pos:start="3739:39" pos:end="3739:40">-&gt;</operator><name pos:start="3739:41" pos:end="3739:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3741:17" pos:end="3741:62"><expr pos:start="3741:17" pos:end="3741:61"><call pos:start="3741:17" pos:end="3741:61"><name pos:start="3741:17" pos:end="3741:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3741:40" pos:end="3741:61">(<argument pos:start="3741:41" pos:end="3741:60"><expr pos:start="3741:41" pos:end="3741:60"><call pos:start="3741:41" pos:end="3741:60"><name pos:start="3741:41" pos:end="3741:53">tcg_const_i32</name><argument_list pos:start="3741:54" pos:end="3741:60">(<argument pos:start="3741:55" pos:end="3741:59"><expr pos:start="3741:55" pos:end="3741:59"><name pos:start="3741:55" pos:end="3741:59">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3743:17" pos:end="3743:43"><expr pos:start="3743:17" pos:end="3743:42"><call pos:start="3743:17" pos:end="3743:42"><name pos:start="3743:17" pos:end="3743:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="3743:41" pos:end="3743:42">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3745:17" pos:end="3745:34"><expr pos:start="3745:17" pos:end="3745:33"><call pos:start="3745:17" pos:end="3745:33"><name pos:start="3745:17" pos:end="3745:31">gen_helper_fpop</name><argument_list pos:start="3745:32" pos:end="3745:33">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3747:17" pos:end="3747:40"><expr pos:start="3747:17" pos:end="3747:39"><name pos:start="3747:17" pos:end="3747:24"><name pos:start="3747:17" pos:end="3747:17">s</name><operator pos:start="3747:18" pos:end="3747:19">-&gt;</operator><name pos:start="3747:20" pos:end="3747:24">cc_op</name></name> <operator pos:start="3747:26" pos:end="3747:26">=</operator> <name pos:start="3747:28" pos:end="3747:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3749:17" pos:end="3749:22">break;</break>

            <case pos:start="3751:13" pos:end="3751:31">case <expr pos:start="3751:18" pos:end="3751:30"><literal type="number" pos:start="3751:18" pos:end="3751:21">0x10</literal> <operator pos:start="3751:23" pos:end="3751:25">...</operator> <literal type="number" pos:start="3751:27" pos:end="3751:30">0x13</literal></expr>:</case> <comment type="block" pos:start="3751:33" pos:end="3751:45">/* fcmovxx */</comment>

            <case pos:start="3753:13" pos:end="3753:31">case <expr pos:start="3753:18" pos:end="3753:30"><literal type="number" pos:start="3753:18" pos:end="3753:21">0x18</literal> <operator pos:start="3753:23" pos:end="3753:25">...</operator> <literal type="number" pos:start="3753:27" pos:end="3753:30">0x1b</literal></expr>:</case>

                <block pos:start="3755:17" pos:end="3781:17">{<block_content pos:start="3757:21" pos:end="3779:38">

                    <decl_stmt pos:start="3757:21" pos:end="3757:32"><decl pos:start="3757:21" pos:end="3757:27"><type pos:start="3757:21" pos:end="3757:23"><name pos:start="3757:21" pos:end="3757:23">int</name></type> <name pos:start="3757:25" pos:end="3757:27">op1</name></decl>, <decl pos:start="3757:30" pos:end="3757:31"><type ref="prev" pos:start="3757:21" pos:end="3757:23"/><name pos:start="3757:30" pos:end="3757:31">l1</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="3759:21" pos:end="3769:22"><decl pos:start="3759:21" pos:end="3769:21"><type pos:start="3759:21" pos:end="3759:40"><specifier pos:start="3759:21" pos:end="3759:26">static</specifier> <specifier pos:start="3759:28" pos:end="3759:32">const</specifier> <name pos:start="3759:34" pos:end="3759:40">uint8_t</name></type> <name pos:start="3759:42" pos:end="3759:52"><name pos:start="3759:42" pos:end="3759:49">fcmov_cc</name><index pos:start="3759:50" pos:end="3759:52">[<expr pos:start="3759:51" pos:end="3759:51"><literal type="number" pos:start="3759:51" pos:end="3759:51">8</literal></expr>]</index></name> <init pos:start="3759:54" pos:end="3769:21">= <expr pos:start="3759:56" pos:end="3769:21"><block pos:start="3759:56" pos:end="3769:21">{

                        <expr pos:start="3761:25" pos:end="3761:36"><operator pos:start="3761:25" pos:end="3761:25">(</operator><name pos:start="3761:26" pos:end="3761:30">JCC_B</name> <operator pos:start="3761:32" pos:end="3761:33">&lt;&lt;</operator> <literal type="number" pos:start="3761:35" pos:end="3761:35">1</literal><operator pos:start="3761:36" pos:end="3761:36">)</operator></expr>,

                        <expr pos:start="3763:25" pos:end="3763:36"><operator pos:start="3763:25" pos:end="3763:25">(</operator><name pos:start="3763:26" pos:end="3763:30">JCC_Z</name> <operator pos:start="3763:32" pos:end="3763:33">&lt;&lt;</operator> <literal type="number" pos:start="3763:35" pos:end="3763:35">1</literal><operator pos:start="3763:36" pos:end="3763:36">)</operator></expr>,

                        <expr pos:start="3765:25" pos:end="3765:37"><operator pos:start="3765:25" pos:end="3765:25">(</operator><name pos:start="3765:26" pos:end="3765:31">JCC_BE</name> <operator pos:start="3765:33" pos:end="3765:34">&lt;&lt;</operator> <literal type="number" pos:start="3765:36" pos:end="3765:36">1</literal><operator pos:start="3765:37" pos:end="3765:37">)</operator></expr>,

                        <expr pos:start="3767:25" pos:end="3767:36"><operator pos:start="3767:25" pos:end="3767:25">(</operator><name pos:start="3767:26" pos:end="3767:30">JCC_P</name> <operator pos:start="3767:32" pos:end="3767:33">&lt;&lt;</operator> <literal type="number" pos:start="3767:35" pos:end="3767:35">1</literal><operator pos:start="3767:36" pos:end="3767:36">)</operator></expr>,

                    }</block></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="3771:21" pos:end="3771:67"><expr pos:start="3771:21" pos:end="3771:66"><name pos:start="3771:21" pos:end="3771:23">op1</name> <operator pos:start="3771:25" pos:end="3771:25">=</operator> <name pos:start="3771:27" pos:end="3771:42"><name pos:start="3771:27" pos:end="3771:34">fcmov_cc</name><index pos:start="3771:35" pos:end="3771:42">[<expr pos:start="3771:36" pos:end="3771:41"><name pos:start="3771:36" pos:end="3771:37">op</name> <operator pos:start="3771:39" pos:end="3771:39">&amp;</operator> <literal type="number" pos:start="3771:41" pos:end="3771:41">3</literal></expr>]</index></name> <operator pos:start="3771:44" pos:end="3771:44">|</operator> <operator pos:start="3771:46" pos:end="3771:46">(</operator><operator pos:start="3771:47" pos:end="3771:47">(</operator><operator pos:start="3771:48" pos:end="3771:48">(</operator><name pos:start="3771:49" pos:end="3771:50">op</name> <operator pos:start="3771:52" pos:end="3771:53">&gt;&gt;</operator> <literal type="number" pos:start="3771:55" pos:end="3771:55">3</literal><operator pos:start="3771:56" pos:end="3771:56">)</operator> <operator pos:start="3771:58" pos:end="3771:58">&amp;</operator> <literal type="number" pos:start="3771:60" pos:end="3771:60">1</literal><operator pos:start="3771:61" pos:end="3771:61">)</operator> <operator pos:start="3771:63" pos:end="3771:63">^</operator> <literal type="number" pos:start="3771:65" pos:end="3771:65">1</literal><operator pos:start="3771:66" pos:end="3771:66">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="3773:21" pos:end="3773:41"><expr pos:start="3773:21" pos:end="3773:40"><name pos:start="3773:21" pos:end="3773:22">l1</name> <operator pos:start="3773:24" pos:end="3773:24">=</operator> <call pos:start="3773:26" pos:end="3773:40"><name pos:start="3773:26" pos:end="3773:38">gen_new_label</name><argument_list pos:start="3773:39" pos:end="3773:40">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3775:21" pos:end="3775:51"><expr pos:start="3775:21" pos:end="3775:50"><call pos:start="3775:21" pos:end="3775:50"><name pos:start="3775:21" pos:end="3775:28">gen_jcc1</name><argument_list pos:start="3775:29" pos:end="3775:50">(<argument pos:start="3775:30" pos:end="3775:30"><expr pos:start="3775:30" pos:end="3775:30"><name pos:start="3775:30" pos:end="3775:30">s</name></expr></argument>, <argument pos:start="3775:33" pos:end="3775:40"><expr pos:start="3775:33" pos:end="3775:40"><name pos:start="3775:33" pos:end="3775:40"><name pos:start="3775:33" pos:end="3775:33">s</name><operator pos:start="3775:34" pos:end="3775:35">-&gt;</operator><name pos:start="3775:36" pos:end="3775:40">cc_op</name></name></expr></argument>, <argument pos:start="3775:43" pos:end="3775:45"><expr pos:start="3775:43" pos:end="3775:45"><name pos:start="3775:43" pos:end="3775:45">op1</name></expr></argument>, <argument pos:start="3775:48" pos:end="3775:49"><expr pos:start="3775:48" pos:end="3775:49"><name pos:start="3775:48" pos:end="3775:49">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3777:21" pos:end="3777:66"><expr pos:start="3777:21" pos:end="3777:65"><call pos:start="3777:21" pos:end="3777:65"><name pos:start="3777:21" pos:end="3777:43">gen_helper_fmov_ST0_STN</name><argument_list pos:start="3777:44" pos:end="3777:65">(<argument pos:start="3777:45" pos:end="3777:64"><expr pos:start="3777:45" pos:end="3777:64"><call pos:start="3777:45" pos:end="3777:64"><name pos:start="3777:45" pos:end="3777:57">tcg_const_i32</name><argument_list pos:start="3777:58" pos:end="3777:64">(<argument pos:start="3777:59" pos:end="3777:63"><expr pos:start="3777:59" pos:end="3777:63"><name pos:start="3777:59" pos:end="3777:63">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3779:21" pos:end="3779:38"><expr pos:start="3779:21" pos:end="3779:37"><call pos:start="3779:21" pos:end="3779:37"><name pos:start="3779:21" pos:end="3779:33">gen_set_label</name><argument_list pos:start="3779:34" pos:end="3779:37">(<argument pos:start="3779:35" pos:end="3779:36"><expr pos:start="3779:35" pos:end="3779:36"><name pos:start="3779:35" pos:end="3779:36">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3783:17" pos:end="3783:22">break;</break>

            <default pos:start="3785:13" pos:end="3785:20">default:</default>

                <goto pos:start="3787:17" pos:end="3787:32">goto <name pos:start="3787:22" pos:end="3787:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3793:9" pos:end="3793:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3795:9" pos:end="3795:34">/************************/</comment>

        <comment type="block" pos:start="3797:9" pos:end="3797:24">/* string ops */</comment>



    <case pos:start="3801:5" pos:end="3801:14">case <expr pos:start="3801:10" pos:end="3801:13"><literal type="number" pos:start="3801:10" pos:end="3801:13">0xa4</literal></expr>:</case> <comment type="block" pos:start="3801:16" pos:end="3801:26">/* movsS */</comment>

    <case pos:start="3803:5" pos:end="3803:14">case <expr pos:start="3803:10" pos:end="3803:13"><literal type="number" pos:start="3803:10" pos:end="3803:13">0xa5</literal></expr>:</case>

        <if_stmt pos:start="3805:9" pos:end="3811:33"><if pos:start="3805:9" pos:end="3807:25">if <condition pos:start="3805:12" pos:end="3805:25">(<expr pos:start="3805:13" pos:end="3805:24"><operator pos:start="3805:13" pos:end="3805:13">(</operator><name pos:start="3805:14" pos:end="3805:14">b</name> <operator pos:start="3805:16" pos:end="3805:16">&amp;</operator> <literal type="number" pos:start="3805:18" pos:end="3805:18">1</literal><operator pos:start="3805:19" pos:end="3805:19">)</operator> <operator pos:start="3805:21" pos:end="3805:22">==</operator> <literal type="number" pos:start="3805:24" pos:end="3805:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3807:13" pos:end="3807:25"><block_content pos:start="3807:13" pos:end="3807:25">

            <expr_stmt pos:start="3807:13" pos:end="3807:25"><expr pos:start="3807:13" pos:end="3807:24"><name pos:start="3807:13" pos:end="3807:14">ot</name> <operator pos:start="3807:16" pos:end="3807:16">=</operator> <name pos:start="3807:18" pos:end="3807:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3809:9" pos:end="3811:33">else<block type="pseudo" pos:start="3811:13" pos:end="3811:33"><block_content pos:start="3811:13" pos:end="3811:33">

            <expr_stmt pos:start="3811:13" pos:end="3811:33"><expr pos:start="3811:13" pos:end="3811:32"><name pos:start="3811:13" pos:end="3811:14">ot</name> <operator pos:start="3811:16" pos:end="3811:16">=</operator> <name pos:start="3811:18" pos:end="3811:22">dflag</name> <operator pos:start="3811:24" pos:end="3811:24">+</operator> <name pos:start="3811:26" pos:end="3811:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="3815:9" pos:end="3823:9"><if pos:start="3815:9" pos:end="3819:9">if <condition pos:start="3815:12" pos:end="3815:52">(<expr pos:start="3815:13" pos:end="3815:51"><name pos:start="3815:13" pos:end="3815:20">prefixes</name> <operator pos:start="3815:22" pos:end="3815:22">&amp;</operator> <operator pos:start="3815:24" pos:end="3815:24">(</operator><name pos:start="3815:25" pos:end="3815:35">PREFIX_REPZ</name> <operator pos:start="3815:37" pos:end="3815:37">|</operator> <name pos:start="3815:39" pos:end="3815:50">PREFIX_REPNZ</name><operator pos:start="3815:51" pos:end="3815:51">)</operator></expr>)</condition> <block pos:start="3815:54" pos:end="3819:9">{<block_content pos:start="3817:13" pos:end="3817:76">

            <expr_stmt pos:start="3817:13" pos:end="3817:76"><expr pos:start="3817:13" pos:end="3817:75"><call pos:start="3817:13" pos:end="3817:75"><name pos:start="3817:13" pos:end="3817:25">gen_repz_movs</name><argument_list pos:start="3817:26" pos:end="3817:75">(<argument pos:start="3817:27" pos:end="3817:27"><expr pos:start="3817:27" pos:end="3817:27"><name pos:start="3817:27" pos:end="3817:27">s</name></expr></argument>, <argument pos:start="3817:30" pos:end="3817:31"><expr pos:start="3817:30" pos:end="3817:31"><name pos:start="3817:30" pos:end="3817:31">ot</name></expr></argument>, <argument pos:start="3817:34" pos:end="3817:54"><expr pos:start="3817:34" pos:end="3817:54"><name pos:start="3817:34" pos:end="3817:41">pc_start</name> <operator pos:start="3817:43" pos:end="3817:43">-</operator> <name pos:start="3817:45" pos:end="3817:54"><name pos:start="3817:45" pos:end="3817:45">s</name><operator pos:start="3817:46" pos:end="3817:47">-&gt;</operator><name pos:start="3817:48" pos:end="3817:54">cs_base</name></name></expr></argument>, <argument pos:start="3817:57" pos:end="3817:74"><expr pos:start="3817:57" pos:end="3817:74"><name pos:start="3817:57" pos:end="3817:61"><name pos:start="3817:57" pos:end="3817:57">s</name><operator pos:start="3817:58" pos:end="3817:59">-&gt;</operator><name pos:start="3817:60" pos:end="3817:61">pc</name></name> <operator pos:start="3817:63" pos:end="3817:63">-</operator> <name pos:start="3817:65" pos:end="3817:74"><name pos:start="3817:65" pos:end="3817:65">s</name><operator pos:start="3817:66" pos:end="3817:67">-&gt;</operator><name pos:start="3817:68" pos:end="3817:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3819:11" pos:end="3823:9">else <block pos:start="3819:16" pos:end="3823:9">{<block_content pos:start="3821:13" pos:end="3821:28">

            <expr_stmt pos:start="3821:13" pos:end="3821:28"><expr pos:start="3821:13" pos:end="3821:27"><call pos:start="3821:13" pos:end="3821:27"><name pos:start="3821:13" pos:end="3821:20">gen_movs</name><argument_list pos:start="3821:21" pos:end="3821:27">(<argument pos:start="3821:22" pos:end="3821:22"><expr pos:start="3821:22" pos:end="3821:22"><name pos:start="3821:22" pos:end="3821:22">s</name></expr></argument>, <argument pos:start="3821:25" pos:end="3821:26"><expr pos:start="3821:25" pos:end="3821:26"><name pos:start="3821:25" pos:end="3821:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3825:9" pos:end="3825:14">break;</break>



    <case pos:start="3829:5" pos:end="3829:14">case <expr pos:start="3829:10" pos:end="3829:13"><literal type="number" pos:start="3829:10" pos:end="3829:13">0xaa</literal></expr>:</case> <comment type="block" pos:start="3829:16" pos:end="3829:26">/* stosS */</comment>

    <case pos:start="3831:5" pos:end="3831:14">case <expr pos:start="3831:10" pos:end="3831:13"><literal type="number" pos:start="3831:10" pos:end="3831:13">0xab</literal></expr>:</case>

        <if_stmt pos:start="3833:9" pos:end="3839:33"><if pos:start="3833:9" pos:end="3835:25">if <condition pos:start="3833:12" pos:end="3833:25">(<expr pos:start="3833:13" pos:end="3833:24"><operator pos:start="3833:13" pos:end="3833:13">(</operator><name pos:start="3833:14" pos:end="3833:14">b</name> <operator pos:start="3833:16" pos:end="3833:16">&amp;</operator> <literal type="number" pos:start="3833:18" pos:end="3833:18">1</literal><operator pos:start="3833:19" pos:end="3833:19">)</operator> <operator pos:start="3833:21" pos:end="3833:22">==</operator> <literal type="number" pos:start="3833:24" pos:end="3833:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3835:13" pos:end="3835:25"><block_content pos:start="3835:13" pos:end="3835:25">

            <expr_stmt pos:start="3835:13" pos:end="3835:25"><expr pos:start="3835:13" pos:end="3835:24"><name pos:start="3835:13" pos:end="3835:14">ot</name> <operator pos:start="3835:16" pos:end="3835:16">=</operator> <name pos:start="3835:18" pos:end="3835:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3837:9" pos:end="3839:33">else<block type="pseudo" pos:start="3839:13" pos:end="3839:33"><block_content pos:start="3839:13" pos:end="3839:33">

            <expr_stmt pos:start="3839:13" pos:end="3839:33"><expr pos:start="3839:13" pos:end="3839:32"><name pos:start="3839:13" pos:end="3839:14">ot</name> <operator pos:start="3839:16" pos:end="3839:16">=</operator> <name pos:start="3839:18" pos:end="3839:22">dflag</name> <operator pos:start="3839:24" pos:end="3839:24">+</operator> <name pos:start="3839:26" pos:end="3839:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="3843:9" pos:end="3851:9"><if pos:start="3843:9" pos:end="3847:9">if <condition pos:start="3843:12" pos:end="3843:52">(<expr pos:start="3843:13" pos:end="3843:51"><name pos:start="3843:13" pos:end="3843:20">prefixes</name> <operator pos:start="3843:22" pos:end="3843:22">&amp;</operator> <operator pos:start="3843:24" pos:end="3843:24">(</operator><name pos:start="3843:25" pos:end="3843:35">PREFIX_REPZ</name> <operator pos:start="3843:37" pos:end="3843:37">|</operator> <name pos:start="3843:39" pos:end="3843:50">PREFIX_REPNZ</name><operator pos:start="3843:51" pos:end="3843:51">)</operator></expr>)</condition> <block pos:start="3843:54" pos:end="3847:9">{<block_content pos:start="3845:13" pos:end="3845:76">

            <expr_stmt pos:start="3845:13" pos:end="3845:76"><expr pos:start="3845:13" pos:end="3845:75"><call pos:start="3845:13" pos:end="3845:75"><name pos:start="3845:13" pos:end="3845:25">gen_repz_stos</name><argument_list pos:start="3845:26" pos:end="3845:75">(<argument pos:start="3845:27" pos:end="3845:27"><expr pos:start="3845:27" pos:end="3845:27"><name pos:start="3845:27" pos:end="3845:27">s</name></expr></argument>, <argument pos:start="3845:30" pos:end="3845:31"><expr pos:start="3845:30" pos:end="3845:31"><name pos:start="3845:30" pos:end="3845:31">ot</name></expr></argument>, <argument pos:start="3845:34" pos:end="3845:54"><expr pos:start="3845:34" pos:end="3845:54"><name pos:start="3845:34" pos:end="3845:41">pc_start</name> <operator pos:start="3845:43" pos:end="3845:43">-</operator> <name pos:start="3845:45" pos:end="3845:54"><name pos:start="3845:45" pos:end="3845:45">s</name><operator pos:start="3845:46" pos:end="3845:47">-&gt;</operator><name pos:start="3845:48" pos:end="3845:54">cs_base</name></name></expr></argument>, <argument pos:start="3845:57" pos:end="3845:74"><expr pos:start="3845:57" pos:end="3845:74"><name pos:start="3845:57" pos:end="3845:61"><name pos:start="3845:57" pos:end="3845:57">s</name><operator pos:start="3845:58" pos:end="3845:59">-&gt;</operator><name pos:start="3845:60" pos:end="3845:61">pc</name></name> <operator pos:start="3845:63" pos:end="3845:63">-</operator> <name pos:start="3845:65" pos:end="3845:74"><name pos:start="3845:65" pos:end="3845:65">s</name><operator pos:start="3845:66" pos:end="3845:67">-&gt;</operator><name pos:start="3845:68" pos:end="3845:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3847:11" pos:end="3851:9">else <block pos:start="3847:16" pos:end="3851:9">{<block_content pos:start="3849:13" pos:end="3849:28">

            <expr_stmt pos:start="3849:13" pos:end="3849:28"><expr pos:start="3849:13" pos:end="3849:27"><call pos:start="3849:13" pos:end="3849:27"><name pos:start="3849:13" pos:end="3849:20">gen_stos</name><argument_list pos:start="3849:21" pos:end="3849:27">(<argument pos:start="3849:22" pos:end="3849:22"><expr pos:start="3849:22" pos:end="3849:22"><name pos:start="3849:22" pos:end="3849:22">s</name></expr></argument>, <argument pos:start="3849:25" pos:end="3849:26"><expr pos:start="3849:25" pos:end="3849:26"><name pos:start="3849:25" pos:end="3849:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3853:9" pos:end="3853:14">break;</break>

    <case pos:start="3855:5" pos:end="3855:14">case <expr pos:start="3855:10" pos:end="3855:13"><literal type="number" pos:start="3855:10" pos:end="3855:13">0xac</literal></expr>:</case> <comment type="block" pos:start="3855:16" pos:end="3855:26">/* lodsS */</comment>

    <case pos:start="3857:5" pos:end="3857:14">case <expr pos:start="3857:10" pos:end="3857:13"><literal type="number" pos:start="3857:10" pos:end="3857:13">0xad</literal></expr>:</case>

        <if_stmt pos:start="3859:9" pos:end="3865:33"><if pos:start="3859:9" pos:end="3861:25">if <condition pos:start="3859:12" pos:end="3859:25">(<expr pos:start="3859:13" pos:end="3859:24"><operator pos:start="3859:13" pos:end="3859:13">(</operator><name pos:start="3859:14" pos:end="3859:14">b</name> <operator pos:start="3859:16" pos:end="3859:16">&amp;</operator> <literal type="number" pos:start="3859:18" pos:end="3859:18">1</literal><operator pos:start="3859:19" pos:end="3859:19">)</operator> <operator pos:start="3859:21" pos:end="3859:22">==</operator> <literal type="number" pos:start="3859:24" pos:end="3859:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3861:13" pos:end="3861:25"><block_content pos:start="3861:13" pos:end="3861:25">

            <expr_stmt pos:start="3861:13" pos:end="3861:25"><expr pos:start="3861:13" pos:end="3861:24"><name pos:start="3861:13" pos:end="3861:14">ot</name> <operator pos:start="3861:16" pos:end="3861:16">=</operator> <name pos:start="3861:18" pos:end="3861:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3863:9" pos:end="3865:33">else<block type="pseudo" pos:start="3865:13" pos:end="3865:33"><block_content pos:start="3865:13" pos:end="3865:33">

            <expr_stmt pos:start="3865:13" pos:end="3865:33"><expr pos:start="3865:13" pos:end="3865:32"><name pos:start="3865:13" pos:end="3865:14">ot</name> <operator pos:start="3865:16" pos:end="3865:16">=</operator> <name pos:start="3865:18" pos:end="3865:22">dflag</name> <operator pos:start="3865:24" pos:end="3865:24">+</operator> <name pos:start="3865:26" pos:end="3865:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3867:9" pos:end="3875:9"><if pos:start="3867:9" pos:end="3871:9">if <condition pos:start="3867:12" pos:end="3867:52">(<expr pos:start="3867:13" pos:end="3867:51"><name pos:start="3867:13" pos:end="3867:20">prefixes</name> <operator pos:start="3867:22" pos:end="3867:22">&amp;</operator> <operator pos:start="3867:24" pos:end="3867:24">(</operator><name pos:start="3867:25" pos:end="3867:35">PREFIX_REPZ</name> <operator pos:start="3867:37" pos:end="3867:37">|</operator> <name pos:start="3867:39" pos:end="3867:50">PREFIX_REPNZ</name><operator pos:start="3867:51" pos:end="3867:51">)</operator></expr>)</condition> <block pos:start="3867:54" pos:end="3871:9">{<block_content pos:start="3869:13" pos:end="3869:76">

            <expr_stmt pos:start="3869:13" pos:end="3869:76"><expr pos:start="3869:13" pos:end="3869:75"><call pos:start="3869:13" pos:end="3869:75"><name pos:start="3869:13" pos:end="3869:25">gen_repz_lods</name><argument_list pos:start="3869:26" pos:end="3869:75">(<argument pos:start="3869:27" pos:end="3869:27"><expr pos:start="3869:27" pos:end="3869:27"><name pos:start="3869:27" pos:end="3869:27">s</name></expr></argument>, <argument pos:start="3869:30" pos:end="3869:31"><expr pos:start="3869:30" pos:end="3869:31"><name pos:start="3869:30" pos:end="3869:31">ot</name></expr></argument>, <argument pos:start="3869:34" pos:end="3869:54"><expr pos:start="3869:34" pos:end="3869:54"><name pos:start="3869:34" pos:end="3869:41">pc_start</name> <operator pos:start="3869:43" pos:end="3869:43">-</operator> <name pos:start="3869:45" pos:end="3869:54"><name pos:start="3869:45" pos:end="3869:45">s</name><operator pos:start="3869:46" pos:end="3869:47">-&gt;</operator><name pos:start="3869:48" pos:end="3869:54">cs_base</name></name></expr></argument>, <argument pos:start="3869:57" pos:end="3869:74"><expr pos:start="3869:57" pos:end="3869:74"><name pos:start="3869:57" pos:end="3869:61"><name pos:start="3869:57" pos:end="3869:57">s</name><operator pos:start="3869:58" pos:end="3869:59">-&gt;</operator><name pos:start="3869:60" pos:end="3869:61">pc</name></name> <operator pos:start="3869:63" pos:end="3869:63">-</operator> <name pos:start="3869:65" pos:end="3869:74"><name pos:start="3869:65" pos:end="3869:65">s</name><operator pos:start="3869:66" pos:end="3869:67">-&gt;</operator><name pos:start="3869:68" pos:end="3869:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3871:11" pos:end="3875:9">else <block pos:start="3871:16" pos:end="3875:9">{<block_content pos:start="3873:13" pos:end="3873:28">

            <expr_stmt pos:start="3873:13" pos:end="3873:28"><expr pos:start="3873:13" pos:end="3873:27"><call pos:start="3873:13" pos:end="3873:27"><name pos:start="3873:13" pos:end="3873:20">gen_lods</name><argument_list pos:start="3873:21" pos:end="3873:27">(<argument pos:start="3873:22" pos:end="3873:22"><expr pos:start="3873:22" pos:end="3873:22"><name pos:start="3873:22" pos:end="3873:22">s</name></expr></argument>, <argument pos:start="3873:25" pos:end="3873:26"><expr pos:start="3873:25" pos:end="3873:26"><name pos:start="3873:25" pos:end="3873:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3877:9" pos:end="3877:14">break;</break>

    <case pos:start="3879:5" pos:end="3879:14">case <expr pos:start="3879:10" pos:end="3879:13"><literal type="number" pos:start="3879:10" pos:end="3879:13">0xae</literal></expr>:</case> <comment type="block" pos:start="3879:16" pos:end="3879:26">/* scasS */</comment>

    <case pos:start="3881:5" pos:end="3881:14">case <expr pos:start="3881:10" pos:end="3881:13"><literal type="number" pos:start="3881:10" pos:end="3881:13">0xaf</literal></expr>:</case>

        <if_stmt pos:start="3883:9" pos:end="3889:33"><if pos:start="3883:9" pos:end="3885:25">if <condition pos:start="3883:12" pos:end="3883:25">(<expr pos:start="3883:13" pos:end="3883:24"><operator pos:start="3883:13" pos:end="3883:13">(</operator><name pos:start="3883:14" pos:end="3883:14">b</name> <operator pos:start="3883:16" pos:end="3883:16">&amp;</operator> <literal type="number" pos:start="3883:18" pos:end="3883:18">1</literal><operator pos:start="3883:19" pos:end="3883:19">)</operator> <operator pos:start="3883:21" pos:end="3883:22">==</operator> <literal type="number" pos:start="3883:24" pos:end="3883:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3885:13" pos:end="3885:25"><block_content pos:start="3885:13" pos:end="3885:25">

            <expr_stmt pos:start="3885:13" pos:end="3885:25"><expr pos:start="3885:13" pos:end="3885:24"><name pos:start="3885:13" pos:end="3885:14">ot</name> <operator pos:start="3885:16" pos:end="3885:16">=</operator> <name pos:start="3885:18" pos:end="3885:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3887:9" pos:end="3889:33">else<block type="pseudo" pos:start="3889:13" pos:end="3889:33"><block_content pos:start="3889:13" pos:end="3889:33">

            <expr_stmt pos:start="3889:13" pos:end="3889:33"><expr pos:start="3889:13" pos:end="3889:32"><name pos:start="3889:13" pos:end="3889:14">ot</name> <operator pos:start="3889:16" pos:end="3889:16">=</operator> <name pos:start="3889:18" pos:end="3889:22">dflag</name> <operator pos:start="3889:24" pos:end="3889:24">+</operator> <name pos:start="3889:26" pos:end="3889:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3891:9" pos:end="3905:9"><if pos:start="3891:9" pos:end="3895:9">if <condition pos:start="3891:12" pos:end="3891:36">(<expr pos:start="3891:13" pos:end="3891:35"><name pos:start="3891:13" pos:end="3891:20">prefixes</name> <operator pos:start="3891:22" pos:end="3891:22">&amp;</operator> <name pos:start="3891:24" pos:end="3891:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="3891:38" pos:end="3895:9">{<block_content pos:start="3893:13" pos:end="3893:79">

            <expr_stmt pos:start="3893:13" pos:end="3893:79"><expr pos:start="3893:13" pos:end="3893:78"><call pos:start="3893:13" pos:end="3893:78"><name pos:start="3893:13" pos:end="3893:25">gen_repz_scas</name><argument_list pos:start="3893:26" pos:end="3893:78">(<argument pos:start="3893:27" pos:end="3893:27"><expr pos:start="3893:27" pos:end="3893:27"><name pos:start="3893:27" pos:end="3893:27">s</name></expr></argument>, <argument pos:start="3893:30" pos:end="3893:31"><expr pos:start="3893:30" pos:end="3893:31"><name pos:start="3893:30" pos:end="3893:31">ot</name></expr></argument>, <argument pos:start="3893:34" pos:end="3893:54"><expr pos:start="3893:34" pos:end="3893:54"><name pos:start="3893:34" pos:end="3893:41">pc_start</name> <operator pos:start="3893:43" pos:end="3893:43">-</operator> <name pos:start="3893:45" pos:end="3893:54"><name pos:start="3893:45" pos:end="3893:45">s</name><operator pos:start="3893:46" pos:end="3893:47">-&gt;</operator><name pos:start="3893:48" pos:end="3893:54">cs_base</name></name></expr></argument>, <argument pos:start="3893:57" pos:end="3893:74"><expr pos:start="3893:57" pos:end="3893:74"><name pos:start="3893:57" pos:end="3893:61"><name pos:start="3893:57" pos:end="3893:57">s</name><operator pos:start="3893:58" pos:end="3893:59">-&gt;</operator><name pos:start="3893:60" pos:end="3893:61">pc</name></name> <operator pos:start="3893:63" pos:end="3893:63">-</operator> <name pos:start="3893:65" pos:end="3893:74"><name pos:start="3893:65" pos:end="3893:65">s</name><operator pos:start="3893:66" pos:end="3893:67">-&gt;</operator><name pos:start="3893:68" pos:end="3893:74">cs_base</name></name></expr></argument>, <argument pos:start="3893:77" pos:end="3893:77"><expr pos:start="3893:77" pos:end="3893:77"><literal type="number" pos:start="3893:77" pos:end="3893:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3895:11" pos:end="3899:9">else if <condition pos:start="3895:19" pos:end="3895:42">(<expr pos:start="3895:20" pos:end="3895:41"><name pos:start="3895:20" pos:end="3895:27">prefixes</name> <operator pos:start="3895:29" pos:end="3895:29">&amp;</operator> <name pos:start="3895:31" pos:end="3895:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="3895:44" pos:end="3899:9">{<block_content pos:start="3897:13" pos:end="3897:79">

            <expr_stmt pos:start="3897:13" pos:end="3897:79"><expr pos:start="3897:13" pos:end="3897:78"><call pos:start="3897:13" pos:end="3897:78"><name pos:start="3897:13" pos:end="3897:25">gen_repz_scas</name><argument_list pos:start="3897:26" pos:end="3897:78">(<argument pos:start="3897:27" pos:end="3897:27"><expr pos:start="3897:27" pos:end="3897:27"><name pos:start="3897:27" pos:end="3897:27">s</name></expr></argument>, <argument pos:start="3897:30" pos:end="3897:31"><expr pos:start="3897:30" pos:end="3897:31"><name pos:start="3897:30" pos:end="3897:31">ot</name></expr></argument>, <argument pos:start="3897:34" pos:end="3897:54"><expr pos:start="3897:34" pos:end="3897:54"><name pos:start="3897:34" pos:end="3897:41">pc_start</name> <operator pos:start="3897:43" pos:end="3897:43">-</operator> <name pos:start="3897:45" pos:end="3897:54"><name pos:start="3897:45" pos:end="3897:45">s</name><operator pos:start="3897:46" pos:end="3897:47">-&gt;</operator><name pos:start="3897:48" pos:end="3897:54">cs_base</name></name></expr></argument>, <argument pos:start="3897:57" pos:end="3897:74"><expr pos:start="3897:57" pos:end="3897:74"><name pos:start="3897:57" pos:end="3897:61"><name pos:start="3897:57" pos:end="3897:57">s</name><operator pos:start="3897:58" pos:end="3897:59">-&gt;</operator><name pos:start="3897:60" pos:end="3897:61">pc</name></name> <operator pos:start="3897:63" pos:end="3897:63">-</operator> <name pos:start="3897:65" pos:end="3897:74"><name pos:start="3897:65" pos:end="3897:65">s</name><operator pos:start="3897:66" pos:end="3897:67">-&gt;</operator><name pos:start="3897:68" pos:end="3897:74">cs_base</name></name></expr></argument>, <argument pos:start="3897:77" pos:end="3897:77"><expr pos:start="3897:77" pos:end="3897:77"><literal type="number" pos:start="3897:77" pos:end="3897:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3899:11" pos:end="3905:9">else <block pos:start="3899:16" pos:end="3905:9">{<block_content pos:start="3901:13" pos:end="3903:39">

            <expr_stmt pos:start="3901:13" pos:end="3901:28"><expr pos:start="3901:13" pos:end="3901:27"><call pos:start="3901:13" pos:end="3901:27"><name pos:start="3901:13" pos:end="3901:20">gen_scas</name><argument_list pos:start="3901:21" pos:end="3901:27">(<argument pos:start="3901:22" pos:end="3901:22"><expr pos:start="3901:22" pos:end="3901:22"><name pos:start="3901:22" pos:end="3901:22">s</name></expr></argument>, <argument pos:start="3901:25" pos:end="3901:26"><expr pos:start="3901:25" pos:end="3901:26"><name pos:start="3901:25" pos:end="3901:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3903:13" pos:end="3903:39"><expr pos:start="3903:13" pos:end="3903:38"><name pos:start="3903:13" pos:end="3903:20"><name pos:start="3903:13" pos:end="3903:13">s</name><operator pos:start="3903:14" pos:end="3903:15">-&gt;</operator><name pos:start="3903:16" pos:end="3903:20">cc_op</name></name> <operator pos:start="3903:22" pos:end="3903:22">=</operator> <name pos:start="3903:24" pos:end="3903:33">CC_OP_SUBB</name> <operator pos:start="3903:35" pos:end="3903:35">+</operator> <name pos:start="3903:37" pos:end="3903:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3907:9" pos:end="3907:14">break;</break>



    <case pos:start="3911:5" pos:end="3911:14">case <expr pos:start="3911:10" pos:end="3911:13"><literal type="number" pos:start="3911:10" pos:end="3911:13">0xa6</literal></expr>:</case> <comment type="block" pos:start="3911:16" pos:end="3911:26">/* cmpsS */</comment>

    <case pos:start="3913:5" pos:end="3913:14">case <expr pos:start="3913:10" pos:end="3913:13"><literal type="number" pos:start="3913:10" pos:end="3913:13">0xa7</literal></expr>:</case>

        <if_stmt pos:start="3915:9" pos:end="3921:33"><if pos:start="3915:9" pos:end="3917:25">if <condition pos:start="3915:12" pos:end="3915:25">(<expr pos:start="3915:13" pos:end="3915:24"><operator pos:start="3915:13" pos:end="3915:13">(</operator><name pos:start="3915:14" pos:end="3915:14">b</name> <operator pos:start="3915:16" pos:end="3915:16">&amp;</operator> <literal type="number" pos:start="3915:18" pos:end="3915:18">1</literal><operator pos:start="3915:19" pos:end="3915:19">)</operator> <operator pos:start="3915:21" pos:end="3915:22">==</operator> <literal type="number" pos:start="3915:24" pos:end="3915:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3917:13" pos:end="3917:25"><block_content pos:start="3917:13" pos:end="3917:25">

            <expr_stmt pos:start="3917:13" pos:end="3917:25"><expr pos:start="3917:13" pos:end="3917:24"><name pos:start="3917:13" pos:end="3917:14">ot</name> <operator pos:start="3917:16" pos:end="3917:16">=</operator> <name pos:start="3917:18" pos:end="3917:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3919:9" pos:end="3921:33">else<block type="pseudo" pos:start="3921:13" pos:end="3921:33"><block_content pos:start="3921:13" pos:end="3921:33">

            <expr_stmt pos:start="3921:13" pos:end="3921:33"><expr pos:start="3921:13" pos:end="3921:32"><name pos:start="3921:13" pos:end="3921:14">ot</name> <operator pos:start="3921:16" pos:end="3921:16">=</operator> <name pos:start="3921:18" pos:end="3921:22">dflag</name> <operator pos:start="3921:24" pos:end="3921:24">+</operator> <name pos:start="3921:26" pos:end="3921:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3923:9" pos:end="3937:9"><if pos:start="3923:9" pos:end="3927:9">if <condition pos:start="3923:12" pos:end="3923:36">(<expr pos:start="3923:13" pos:end="3923:35"><name pos:start="3923:13" pos:end="3923:20">prefixes</name> <operator pos:start="3923:22" pos:end="3923:22">&amp;</operator> <name pos:start="3923:24" pos:end="3923:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="3923:38" pos:end="3927:9">{<block_content pos:start="3925:13" pos:end="3925:79">

            <expr_stmt pos:start="3925:13" pos:end="3925:79"><expr pos:start="3925:13" pos:end="3925:78"><call pos:start="3925:13" pos:end="3925:78"><name pos:start="3925:13" pos:end="3925:25">gen_repz_cmps</name><argument_list pos:start="3925:26" pos:end="3925:78">(<argument pos:start="3925:27" pos:end="3925:27"><expr pos:start="3925:27" pos:end="3925:27"><name pos:start="3925:27" pos:end="3925:27">s</name></expr></argument>, <argument pos:start="3925:30" pos:end="3925:31"><expr pos:start="3925:30" pos:end="3925:31"><name pos:start="3925:30" pos:end="3925:31">ot</name></expr></argument>, <argument pos:start="3925:34" pos:end="3925:54"><expr pos:start="3925:34" pos:end="3925:54"><name pos:start="3925:34" pos:end="3925:41">pc_start</name> <operator pos:start="3925:43" pos:end="3925:43">-</operator> <name pos:start="3925:45" pos:end="3925:54"><name pos:start="3925:45" pos:end="3925:45">s</name><operator pos:start="3925:46" pos:end="3925:47">-&gt;</operator><name pos:start="3925:48" pos:end="3925:54">cs_base</name></name></expr></argument>, <argument pos:start="3925:57" pos:end="3925:74"><expr pos:start="3925:57" pos:end="3925:74"><name pos:start="3925:57" pos:end="3925:61"><name pos:start="3925:57" pos:end="3925:57">s</name><operator pos:start="3925:58" pos:end="3925:59">-&gt;</operator><name pos:start="3925:60" pos:end="3925:61">pc</name></name> <operator pos:start="3925:63" pos:end="3925:63">-</operator> <name pos:start="3925:65" pos:end="3925:74"><name pos:start="3925:65" pos:end="3925:65">s</name><operator pos:start="3925:66" pos:end="3925:67">-&gt;</operator><name pos:start="3925:68" pos:end="3925:74">cs_base</name></name></expr></argument>, <argument pos:start="3925:77" pos:end="3925:77"><expr pos:start="3925:77" pos:end="3925:77"><literal type="number" pos:start="3925:77" pos:end="3925:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3927:11" pos:end="3931:9">else if <condition pos:start="3927:19" pos:end="3927:42">(<expr pos:start="3927:20" pos:end="3927:41"><name pos:start="3927:20" pos:end="3927:27">prefixes</name> <operator pos:start="3927:29" pos:end="3927:29">&amp;</operator> <name pos:start="3927:31" pos:end="3927:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="3927:44" pos:end="3931:9">{<block_content pos:start="3929:13" pos:end="3929:79">

            <expr_stmt pos:start="3929:13" pos:end="3929:79"><expr pos:start="3929:13" pos:end="3929:78"><call pos:start="3929:13" pos:end="3929:78"><name pos:start="3929:13" pos:end="3929:25">gen_repz_cmps</name><argument_list pos:start="3929:26" pos:end="3929:78">(<argument pos:start="3929:27" pos:end="3929:27"><expr pos:start="3929:27" pos:end="3929:27"><name pos:start="3929:27" pos:end="3929:27">s</name></expr></argument>, <argument pos:start="3929:30" pos:end="3929:31"><expr pos:start="3929:30" pos:end="3929:31"><name pos:start="3929:30" pos:end="3929:31">ot</name></expr></argument>, <argument pos:start="3929:34" pos:end="3929:54"><expr pos:start="3929:34" pos:end="3929:54"><name pos:start="3929:34" pos:end="3929:41">pc_start</name> <operator pos:start="3929:43" pos:end="3929:43">-</operator> <name pos:start="3929:45" pos:end="3929:54"><name pos:start="3929:45" pos:end="3929:45">s</name><operator pos:start="3929:46" pos:end="3929:47">-&gt;</operator><name pos:start="3929:48" pos:end="3929:54">cs_base</name></name></expr></argument>, <argument pos:start="3929:57" pos:end="3929:74"><expr pos:start="3929:57" pos:end="3929:74"><name pos:start="3929:57" pos:end="3929:61"><name pos:start="3929:57" pos:end="3929:57">s</name><operator pos:start="3929:58" pos:end="3929:59">-&gt;</operator><name pos:start="3929:60" pos:end="3929:61">pc</name></name> <operator pos:start="3929:63" pos:end="3929:63">-</operator> <name pos:start="3929:65" pos:end="3929:74"><name pos:start="3929:65" pos:end="3929:65">s</name><operator pos:start="3929:66" pos:end="3929:67">-&gt;</operator><name pos:start="3929:68" pos:end="3929:74">cs_base</name></name></expr></argument>, <argument pos:start="3929:77" pos:end="3929:77"><expr pos:start="3929:77" pos:end="3929:77"><literal type="number" pos:start="3929:77" pos:end="3929:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3931:11" pos:end="3937:9">else <block pos:start="3931:16" pos:end="3937:9">{<block_content pos:start="3933:13" pos:end="3935:39">

            <expr_stmt pos:start="3933:13" pos:end="3933:28"><expr pos:start="3933:13" pos:end="3933:27"><call pos:start="3933:13" pos:end="3933:27"><name pos:start="3933:13" pos:end="3933:20">gen_cmps</name><argument_list pos:start="3933:21" pos:end="3933:27">(<argument pos:start="3933:22" pos:end="3933:22"><expr pos:start="3933:22" pos:end="3933:22"><name pos:start="3933:22" pos:end="3933:22">s</name></expr></argument>, <argument pos:start="3933:25" pos:end="3933:26"><expr pos:start="3933:25" pos:end="3933:26"><name pos:start="3933:25" pos:end="3933:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3935:13" pos:end="3935:39"><expr pos:start="3935:13" pos:end="3935:38"><name pos:start="3935:13" pos:end="3935:20"><name pos:start="3935:13" pos:end="3935:13">s</name><operator pos:start="3935:14" pos:end="3935:15">-&gt;</operator><name pos:start="3935:16" pos:end="3935:20">cc_op</name></name> <operator pos:start="3935:22" pos:end="3935:22">=</operator> <name pos:start="3935:24" pos:end="3935:33">CC_OP_SUBB</name> <operator pos:start="3935:35" pos:end="3935:35">+</operator> <name pos:start="3935:37" pos:end="3935:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3939:9" pos:end="3939:14">break;</break>

    <case pos:start="3941:5" pos:end="3941:14">case <expr pos:start="3941:10" pos:end="3941:13"><literal type="number" pos:start="3941:10" pos:end="3941:13">0x6c</literal></expr>:</case> <comment type="block" pos:start="3941:16" pos:end="3941:25">/* insS */</comment>

    <case pos:start="3943:5" pos:end="3943:14">case <expr pos:start="3943:10" pos:end="3943:13"><literal type="number" pos:start="3943:10" pos:end="3943:13">0x6d</literal></expr>:</case>

        <if_stmt pos:start="3945:9" pos:end="3951:43"><if pos:start="3945:9" pos:end="3947:25">if <condition pos:start="3945:12" pos:end="3945:25">(<expr pos:start="3945:13" pos:end="3945:24"><operator pos:start="3945:13" pos:end="3945:13">(</operator><name pos:start="3945:14" pos:end="3945:14">b</name> <operator pos:start="3945:16" pos:end="3945:16">&amp;</operator> <literal type="number" pos:start="3945:18" pos:end="3945:18">1</literal><operator pos:start="3945:19" pos:end="3945:19">)</operator> <operator pos:start="3945:21" pos:end="3945:22">==</operator> <literal type="number" pos:start="3945:24" pos:end="3945:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3947:13" pos:end="3947:25"><block_content pos:start="3947:13" pos:end="3947:25">

            <expr_stmt pos:start="3947:13" pos:end="3947:25"><expr pos:start="3947:13" pos:end="3947:24"><name pos:start="3947:13" pos:end="3947:14">ot</name> <operator pos:start="3947:16" pos:end="3947:16">=</operator> <name pos:start="3947:18" pos:end="3947:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3949:9" pos:end="3951:43">else<block type="pseudo" pos:start="3951:13" pos:end="3951:43"><block_content pos:start="3951:13" pos:end="3951:43">

            <expr_stmt pos:start="3951:13" pos:end="3951:43"><expr pos:start="3951:13" pos:end="3951:42"><name pos:start="3951:13" pos:end="3951:14">ot</name> <operator pos:start="3951:16" pos:end="3951:16">=</operator> <ternary pos:start="3951:18" pos:end="3951:42"><condition pos:start="3951:18" pos:end="3951:24"><expr pos:start="3951:18" pos:end="3951:22"><name pos:start="3951:18" pos:end="3951:22">dflag</name></expr> ?</condition><then pos:start="3951:26" pos:end="3951:32"> <expr pos:start="3951:26" pos:end="3951:32"><name pos:start="3951:26" pos:end="3951:32">OT_LONG</name></expr> </then><else pos:start="3951:34" pos:end="3951:42">: <expr pos:start="3951:36" pos:end="3951:42"><name pos:start="3951:36" pos:end="3951:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3953:9" pos:end="3953:45"><expr pos:start="3953:9" pos:end="3953:44"><call pos:start="3953:9" pos:end="3953:44"><name pos:start="3953:9" pos:end="3953:25">gen_op_mov_TN_reg</name><argument_list pos:start="3953:26" pos:end="3953:44">(<argument pos:start="3953:27" pos:end="3953:33"><expr pos:start="3953:27" pos:end="3953:33"><name pos:start="3953:27" pos:end="3953:33">OT_WORD</name></expr></argument>, <argument pos:start="3953:36" pos:end="3953:36"><expr pos:start="3953:36" pos:end="3953:36"><literal type="number" pos:start="3953:36" pos:end="3953:36">0</literal></expr></argument>, <argument pos:start="3953:39" pos:end="3953:43"><expr pos:start="3953:39" pos:end="3953:43"><name pos:start="3953:39" pos:end="3953:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3955:9" pos:end="3955:30"><expr pos:start="3955:9" pos:end="3955:29"><call pos:start="3955:9" pos:end="3955:29"><name pos:start="3955:9" pos:end="3955:27">gen_op_andl_T0_ffff</name><argument_list pos:start="3955:28" pos:end="3955:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3957:9" pos:end="3959:68"><expr pos:start="3957:9" pos:end="3959:67"><call pos:start="3957:9" pos:end="3959:67"><name pos:start="3957:9" pos:end="3957:20">gen_check_io</name><argument_list pos:start="3957:21" pos:end="3959:67">(<argument pos:start="3957:22" pos:end="3957:22"><expr pos:start="3957:22" pos:end="3957:22"><name pos:start="3957:22" pos:end="3957:22">s</name></expr></argument>, <argument pos:start="3957:25" pos:end="3957:26"><expr pos:start="3957:25" pos:end="3957:26"><name pos:start="3957:25" pos:end="3957:26">ot</name></expr></argument>, <argument pos:start="3957:29" pos:end="3957:49"><expr pos:start="3957:29" pos:end="3957:49"><name pos:start="3957:29" pos:end="3957:36">pc_start</name> <operator pos:start="3957:38" pos:end="3957:38">-</operator> <name pos:start="3957:40" pos:end="3957:49"><name pos:start="3957:40" pos:end="3957:40">s</name><operator pos:start="3957:41" pos:end="3957:42">-&gt;</operator><name pos:start="3957:43" pos:end="3957:49">cs_base</name></name></expr></argument>, 

                     <argument pos:start="3959:22" pos:end="3959:66"><expr pos:start="3959:22" pos:end="3959:66"><name pos:start="3959:22" pos:end="3959:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="3959:41" pos:end="3959:41">|</operator> <call pos:start="3959:43" pos:end="3959:62"><name pos:start="3959:43" pos:end="3959:52">svm_is_rep</name><argument_list pos:start="3959:53" pos:end="3959:62">(<argument pos:start="3959:54" pos:end="3959:61"><expr pos:start="3959:54" pos:end="3959:61"><name pos:start="3959:54" pos:end="3959:61">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="3959:64" pos:end="3959:64">|</operator> <literal type="number" pos:start="3959:66" pos:end="3959:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3961:9" pos:end="3975:9"><if pos:start="3961:9" pos:end="3965:9">if <condition pos:start="3961:12" pos:end="3961:52">(<expr pos:start="3961:13" pos:end="3961:51"><name pos:start="3961:13" pos:end="3961:20">prefixes</name> <operator pos:start="3961:22" pos:end="3961:22">&amp;</operator> <operator pos:start="3961:24" pos:end="3961:24">(</operator><name pos:start="3961:25" pos:end="3961:35">PREFIX_REPZ</name> <operator pos:start="3961:37" pos:end="3961:37">|</operator> <name pos:start="3961:39" pos:end="3961:50">PREFIX_REPNZ</name><operator pos:start="3961:51" pos:end="3961:51">)</operator></expr>)</condition> <block pos:start="3961:54" pos:end="3965:9">{<block_content pos:start="3963:13" pos:end="3963:75">

            <expr_stmt pos:start="3963:13" pos:end="3963:75"><expr pos:start="3963:13" pos:end="3963:74"><call pos:start="3963:13" pos:end="3963:74"><name pos:start="3963:13" pos:end="3963:24">gen_repz_ins</name><argument_list pos:start="3963:25" pos:end="3963:74">(<argument pos:start="3963:26" pos:end="3963:26"><expr pos:start="3963:26" pos:end="3963:26"><name pos:start="3963:26" pos:end="3963:26">s</name></expr></argument>, <argument pos:start="3963:29" pos:end="3963:30"><expr pos:start="3963:29" pos:end="3963:30"><name pos:start="3963:29" pos:end="3963:30">ot</name></expr></argument>, <argument pos:start="3963:33" pos:end="3963:53"><expr pos:start="3963:33" pos:end="3963:53"><name pos:start="3963:33" pos:end="3963:40">pc_start</name> <operator pos:start="3963:42" pos:end="3963:42">-</operator> <name pos:start="3963:44" pos:end="3963:53"><name pos:start="3963:44" pos:end="3963:44">s</name><operator pos:start="3963:45" pos:end="3963:46">-&gt;</operator><name pos:start="3963:47" pos:end="3963:53">cs_base</name></name></expr></argument>, <argument pos:start="3963:56" pos:end="3963:73"><expr pos:start="3963:56" pos:end="3963:73"><name pos:start="3963:56" pos:end="3963:60"><name pos:start="3963:56" pos:end="3963:56">s</name><operator pos:start="3963:57" pos:end="3963:58">-&gt;</operator><name pos:start="3963:59" pos:end="3963:60">pc</name></name> <operator pos:start="3963:62" pos:end="3963:62">-</operator> <name pos:start="3963:64" pos:end="3963:73"><name pos:start="3963:64" pos:end="3963:64">s</name><operator pos:start="3963:65" pos:end="3963:66">-&gt;</operator><name pos:start="3963:67" pos:end="3963:73">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3965:11" pos:end="3975:9">else <block pos:start="3965:16" pos:end="3975:9">{<block_content pos:start="3967:13" pos:end="3973:13">

            <expr_stmt pos:start="3967:13" pos:end="3967:27"><expr pos:start="3967:13" pos:end="3967:26"><call pos:start="3967:13" pos:end="3967:26"><name pos:start="3967:13" pos:end="3967:19">gen_ins</name><argument_list pos:start="3967:20" pos:end="3967:26">(<argument pos:start="3967:21" pos:end="3967:21"><expr pos:start="3967:21" pos:end="3967:21"><name pos:start="3967:21" pos:end="3967:21">s</name></expr></argument>, <argument pos:start="3967:24" pos:end="3967:25"><expr pos:start="3967:24" pos:end="3967:25"><name pos:start="3967:24" pos:end="3967:25">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3969:13" pos:end="3973:13"><if pos:start="3969:13" pos:end="3973:13">if <condition pos:start="3969:16" pos:end="3969:27">(<expr pos:start="3969:17" pos:end="3969:26"><name pos:start="3969:17" pos:end="3969:26">use_icount</name></expr>)</condition> <block pos:start="3969:29" pos:end="3973:13">{<block_content pos:start="3971:17" pos:end="3971:47">

                <expr_stmt pos:start="3971:17" pos:end="3971:47"><expr pos:start="3971:17" pos:end="3971:46"><call pos:start="3971:17" pos:end="3971:46"><name pos:start="3971:17" pos:end="3971:23">gen_jmp</name><argument_list pos:start="3971:24" pos:end="3971:46">(<argument pos:start="3971:25" pos:end="3971:25"><expr pos:start="3971:25" pos:end="3971:25"><name pos:start="3971:25" pos:end="3971:25">s</name></expr></argument>, <argument pos:start="3971:28" pos:end="3971:45"><expr pos:start="3971:28" pos:end="3971:45"><name pos:start="3971:28" pos:end="3971:32"><name pos:start="3971:28" pos:end="3971:28">s</name><operator pos:start="3971:29" pos:end="3971:30">-&gt;</operator><name pos:start="3971:31" pos:end="3971:32">pc</name></name> <operator pos:start="3971:34" pos:end="3971:34">-</operator> <name pos:start="3971:36" pos:end="3971:45"><name pos:start="3971:36" pos:end="3971:36">s</name><operator pos:start="3971:37" pos:end="3971:38">-&gt;</operator><name pos:start="3971:39" pos:end="3971:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3977:9" pos:end="3977:14">break;</break>

    <case pos:start="3979:5" pos:end="3979:14">case <expr pos:start="3979:10" pos:end="3979:13"><literal type="number" pos:start="3979:10" pos:end="3979:13">0x6e</literal></expr>:</case> <comment type="block" pos:start="3979:16" pos:end="3979:26">/* outsS */</comment>

    <case pos:start="3981:5" pos:end="3981:14">case <expr pos:start="3981:10" pos:end="3981:13"><literal type="number" pos:start="3981:10" pos:end="3981:13">0x6f</literal></expr>:</case>

        <if_stmt pos:start="3983:9" pos:end="3989:43"><if pos:start="3983:9" pos:end="3985:25">if <condition pos:start="3983:12" pos:end="3983:25">(<expr pos:start="3983:13" pos:end="3983:24"><operator pos:start="3983:13" pos:end="3983:13">(</operator><name pos:start="3983:14" pos:end="3983:14">b</name> <operator pos:start="3983:16" pos:end="3983:16">&amp;</operator> <literal type="number" pos:start="3983:18" pos:end="3983:18">1</literal><operator pos:start="3983:19" pos:end="3983:19">)</operator> <operator pos:start="3983:21" pos:end="3983:22">==</operator> <literal type="number" pos:start="3983:24" pos:end="3983:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3985:13" pos:end="3985:25"><block_content pos:start="3985:13" pos:end="3985:25">

            <expr_stmt pos:start="3985:13" pos:end="3985:25"><expr pos:start="3985:13" pos:end="3985:24"><name pos:start="3985:13" pos:end="3985:14">ot</name> <operator pos:start="3985:16" pos:end="3985:16">=</operator> <name pos:start="3985:18" pos:end="3985:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3987:9" pos:end="3989:43">else<block type="pseudo" pos:start="3989:13" pos:end="3989:43"><block_content pos:start="3989:13" pos:end="3989:43">

            <expr_stmt pos:start="3989:13" pos:end="3989:43"><expr pos:start="3989:13" pos:end="3989:42"><name pos:start="3989:13" pos:end="3989:14">ot</name> <operator pos:start="3989:16" pos:end="3989:16">=</operator> <ternary pos:start="3989:18" pos:end="3989:42"><condition pos:start="3989:18" pos:end="3989:24"><expr pos:start="3989:18" pos:end="3989:22"><name pos:start="3989:18" pos:end="3989:22">dflag</name></expr> ?</condition><then pos:start="3989:26" pos:end="3989:32"> <expr pos:start="3989:26" pos:end="3989:32"><name pos:start="3989:26" pos:end="3989:32">OT_LONG</name></expr> </then><else pos:start="3989:34" pos:end="3989:42">: <expr pos:start="3989:36" pos:end="3989:42"><name pos:start="3989:36" pos:end="3989:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3991:9" pos:end="3991:45"><expr pos:start="3991:9" pos:end="3991:44"><call pos:start="3991:9" pos:end="3991:44"><name pos:start="3991:9" pos:end="3991:25">gen_op_mov_TN_reg</name><argument_list pos:start="3991:26" pos:end="3991:44">(<argument pos:start="3991:27" pos:end="3991:33"><expr pos:start="3991:27" pos:end="3991:33"><name pos:start="3991:27" pos:end="3991:33">OT_WORD</name></expr></argument>, <argument pos:start="3991:36" pos:end="3991:36"><expr pos:start="3991:36" pos:end="3991:36"><literal type="number" pos:start="3991:36" pos:end="3991:36">0</literal></expr></argument>, <argument pos:start="3991:39" pos:end="3991:43"><expr pos:start="3991:39" pos:end="3991:43"><name pos:start="3991:39" pos:end="3991:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3993:9" pos:end="3993:30"><expr pos:start="3993:9" pos:end="3993:29"><call pos:start="3993:9" pos:end="3993:29"><name pos:start="3993:9" pos:end="3993:27">gen_op_andl_T0_ffff</name><argument_list pos:start="3993:28" pos:end="3993:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3995:9" pos:end="3997:47"><expr pos:start="3995:9" pos:end="3997:46"><call pos:start="3995:9" pos:end="3997:46"><name pos:start="3995:9" pos:end="3995:20">gen_check_io</name><argument_list pos:start="3995:21" pos:end="3997:46">(<argument pos:start="3995:22" pos:end="3995:22"><expr pos:start="3995:22" pos:end="3995:22"><name pos:start="3995:22" pos:end="3995:22">s</name></expr></argument>, <argument pos:start="3995:25" pos:end="3995:26"><expr pos:start="3995:25" pos:end="3995:26"><name pos:start="3995:25" pos:end="3995:26">ot</name></expr></argument>, <argument pos:start="3995:29" pos:end="3995:49"><expr pos:start="3995:29" pos:end="3995:49"><name pos:start="3995:29" pos:end="3995:36">pc_start</name> <operator pos:start="3995:38" pos:end="3995:38">-</operator> <name pos:start="3995:40" pos:end="3995:49"><name pos:start="3995:40" pos:end="3995:40">s</name><operator pos:start="3995:41" pos:end="3995:42">-&gt;</operator><name pos:start="3995:43" pos:end="3995:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="3997:22" pos:end="3997:45"><expr pos:start="3997:22" pos:end="3997:45"><call pos:start="3997:22" pos:end="3997:41"><name pos:start="3997:22" pos:end="3997:31">svm_is_rep</name><argument_list pos:start="3997:32" pos:end="3997:41">(<argument pos:start="3997:33" pos:end="3997:40"><expr pos:start="3997:33" pos:end="3997:40"><name pos:start="3997:33" pos:end="3997:40">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="3997:43" pos:end="3997:43">|</operator> <literal type="number" pos:start="3997:45" pos:end="3997:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3999:9" pos:end="4013:9"><if pos:start="3999:9" pos:end="4003:9">if <condition pos:start="3999:12" pos:end="3999:52">(<expr pos:start="3999:13" pos:end="3999:51"><name pos:start="3999:13" pos:end="3999:20">prefixes</name> <operator pos:start="3999:22" pos:end="3999:22">&amp;</operator> <operator pos:start="3999:24" pos:end="3999:24">(</operator><name pos:start="3999:25" pos:end="3999:35">PREFIX_REPZ</name> <operator pos:start="3999:37" pos:end="3999:37">|</operator> <name pos:start="3999:39" pos:end="3999:50">PREFIX_REPNZ</name><operator pos:start="3999:51" pos:end="3999:51">)</operator></expr>)</condition> <block pos:start="3999:54" pos:end="4003:9">{<block_content pos:start="4001:13" pos:end="4001:76">

            <expr_stmt pos:start="4001:13" pos:end="4001:76"><expr pos:start="4001:13" pos:end="4001:75"><call pos:start="4001:13" pos:end="4001:75"><name pos:start="4001:13" pos:end="4001:25">gen_repz_outs</name><argument_list pos:start="4001:26" pos:end="4001:75">(<argument pos:start="4001:27" pos:end="4001:27"><expr pos:start="4001:27" pos:end="4001:27"><name pos:start="4001:27" pos:end="4001:27">s</name></expr></argument>, <argument pos:start="4001:30" pos:end="4001:31"><expr pos:start="4001:30" pos:end="4001:31"><name pos:start="4001:30" pos:end="4001:31">ot</name></expr></argument>, <argument pos:start="4001:34" pos:end="4001:54"><expr pos:start="4001:34" pos:end="4001:54"><name pos:start="4001:34" pos:end="4001:41">pc_start</name> <operator pos:start="4001:43" pos:end="4001:43">-</operator> <name pos:start="4001:45" pos:end="4001:54"><name pos:start="4001:45" pos:end="4001:45">s</name><operator pos:start="4001:46" pos:end="4001:47">-&gt;</operator><name pos:start="4001:48" pos:end="4001:54">cs_base</name></name></expr></argument>, <argument pos:start="4001:57" pos:end="4001:74"><expr pos:start="4001:57" pos:end="4001:74"><name pos:start="4001:57" pos:end="4001:61"><name pos:start="4001:57" pos:end="4001:57">s</name><operator pos:start="4001:58" pos:end="4001:59">-&gt;</operator><name pos:start="4001:60" pos:end="4001:61">pc</name></name> <operator pos:start="4001:63" pos:end="4001:63">-</operator> <name pos:start="4001:65" pos:end="4001:74"><name pos:start="4001:65" pos:end="4001:65">s</name><operator pos:start="4001:66" pos:end="4001:67">-&gt;</operator><name pos:start="4001:68" pos:end="4001:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4003:11" pos:end="4013:9">else <block pos:start="4003:16" pos:end="4013:9">{<block_content pos:start="4005:13" pos:end="4011:13">

            <expr_stmt pos:start="4005:13" pos:end="4005:28"><expr pos:start="4005:13" pos:end="4005:27"><call pos:start="4005:13" pos:end="4005:27"><name pos:start="4005:13" pos:end="4005:20">gen_outs</name><argument_list pos:start="4005:21" pos:end="4005:27">(<argument pos:start="4005:22" pos:end="4005:22"><expr pos:start="4005:22" pos:end="4005:22"><name pos:start="4005:22" pos:end="4005:22">s</name></expr></argument>, <argument pos:start="4005:25" pos:end="4005:26"><expr pos:start="4005:25" pos:end="4005:26"><name pos:start="4005:25" pos:end="4005:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4007:13" pos:end="4011:13"><if pos:start="4007:13" pos:end="4011:13">if <condition pos:start="4007:16" pos:end="4007:27">(<expr pos:start="4007:17" pos:end="4007:26"><name pos:start="4007:17" pos:end="4007:26">use_icount</name></expr>)</condition> <block pos:start="4007:29" pos:end="4011:13">{<block_content pos:start="4009:17" pos:end="4009:47">

                <expr_stmt pos:start="4009:17" pos:end="4009:47"><expr pos:start="4009:17" pos:end="4009:46"><call pos:start="4009:17" pos:end="4009:46"><name pos:start="4009:17" pos:end="4009:23">gen_jmp</name><argument_list pos:start="4009:24" pos:end="4009:46">(<argument pos:start="4009:25" pos:end="4009:25"><expr pos:start="4009:25" pos:end="4009:25"><name pos:start="4009:25" pos:end="4009:25">s</name></expr></argument>, <argument pos:start="4009:28" pos:end="4009:45"><expr pos:start="4009:28" pos:end="4009:45"><name pos:start="4009:28" pos:end="4009:32"><name pos:start="4009:28" pos:end="4009:28">s</name><operator pos:start="4009:29" pos:end="4009:30">-&gt;</operator><name pos:start="4009:31" pos:end="4009:32">pc</name></name> <operator pos:start="4009:34" pos:end="4009:34">-</operator> <name pos:start="4009:36" pos:end="4009:45"><name pos:start="4009:36" pos:end="4009:36">s</name><operator pos:start="4009:37" pos:end="4009:38">-&gt;</operator><name pos:start="4009:39" pos:end="4009:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4015:9" pos:end="4015:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4019:9" pos:end="4019:34">/************************/</comment>

        <comment type="block" pos:start="4021:9" pos:end="4021:22">/* port I/O */</comment>



    <case pos:start="4025:5" pos:end="4025:14">case <expr pos:start="4025:10" pos:end="4025:13"><literal type="number" pos:start="4025:10" pos:end="4025:13">0xe4</literal></expr>:</case>

    <case pos:start="4027:5" pos:end="4027:14">case <expr pos:start="4027:10" pos:end="4027:13"><literal type="number" pos:start="4027:10" pos:end="4027:13">0xe5</literal></expr>:</case>

        <if_stmt pos:start="4029:9" pos:end="4035:43"><if pos:start="4029:9" pos:end="4031:25">if <condition pos:start="4029:12" pos:end="4029:25">(<expr pos:start="4029:13" pos:end="4029:24"><operator pos:start="4029:13" pos:end="4029:13">(</operator><name pos:start="4029:14" pos:end="4029:14">b</name> <operator pos:start="4029:16" pos:end="4029:16">&amp;</operator> <literal type="number" pos:start="4029:18" pos:end="4029:18">1</literal><operator pos:start="4029:19" pos:end="4029:19">)</operator> <operator pos:start="4029:21" pos:end="4029:22">==</operator> <literal type="number" pos:start="4029:24" pos:end="4029:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4031:13" pos:end="4031:25"><block_content pos:start="4031:13" pos:end="4031:25">

            <expr_stmt pos:start="4031:13" pos:end="4031:25"><expr pos:start="4031:13" pos:end="4031:24"><name pos:start="4031:13" pos:end="4031:14">ot</name> <operator pos:start="4031:16" pos:end="4031:16">=</operator> <name pos:start="4031:18" pos:end="4031:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4033:9" pos:end="4035:43">else<block type="pseudo" pos:start="4035:13" pos:end="4035:43"><block_content pos:start="4035:13" pos:end="4035:43">

            <expr_stmt pos:start="4035:13" pos:end="4035:43"><expr pos:start="4035:13" pos:end="4035:42"><name pos:start="4035:13" pos:end="4035:14">ot</name> <operator pos:start="4035:16" pos:end="4035:16">=</operator> <ternary pos:start="4035:18" pos:end="4035:42"><condition pos:start="4035:18" pos:end="4035:24"><expr pos:start="4035:18" pos:end="4035:22"><name pos:start="4035:18" pos:end="4035:22">dflag</name></expr> ?</condition><then pos:start="4035:26" pos:end="4035:32"> <expr pos:start="4035:26" pos:end="4035:32"><name pos:start="4035:26" pos:end="4035:32">OT_LONG</name></expr> </then><else pos:start="4035:34" pos:end="4035:42">: <expr pos:start="4035:36" pos:end="4035:42"><name pos:start="4035:36" pos:end="4035:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4037:9" pos:end="4037:33"><expr pos:start="4037:9" pos:end="4037:32"><name pos:start="4037:9" pos:end="4037:11">val</name> <operator pos:start="4037:13" pos:end="4037:13">=</operator> <call pos:start="4037:15" pos:end="4037:32"><name pos:start="4037:15" pos:end="4037:23">ldub_code</name><argument_list pos:start="4037:24" pos:end="4037:32">(<argument pos:start="4037:25" pos:end="4037:31"><expr pos:start="4037:25" pos:end="4037:31"><name pos:start="4037:25" pos:end="4037:29"><name pos:start="4037:25" pos:end="4037:25">s</name><operator pos:start="4037:26" pos:end="4037:27">-&gt;</operator><name pos:start="4037:28" pos:end="4037:29">pc</name></name><operator pos:start="4037:30" pos:end="4037:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4039:9" pos:end="4039:31"><expr pos:start="4039:9" pos:end="4039:30"><call pos:start="4039:9" pos:end="4039:30"><name pos:start="4039:9" pos:end="4039:25">gen_op_movl_T0_im</name><argument_list pos:start="4039:26" pos:end="4039:30">(<argument pos:start="4039:27" pos:end="4039:29"><expr pos:start="4039:27" pos:end="4039:29"><name pos:start="4039:27" pos:end="4039:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4041:9" pos:end="4043:64"><expr pos:start="4041:9" pos:end="4043:63"><call pos:start="4041:9" pos:end="4043:63"><name pos:start="4041:9" pos:end="4041:20">gen_check_io</name><argument_list pos:start="4041:21" pos:end="4043:63">(<argument pos:start="4041:22" pos:end="4041:22"><expr pos:start="4041:22" pos:end="4041:22"><name pos:start="4041:22" pos:end="4041:22">s</name></expr></argument>, <argument pos:start="4041:25" pos:end="4041:26"><expr pos:start="4041:25" pos:end="4041:26"><name pos:start="4041:25" pos:end="4041:26">ot</name></expr></argument>, <argument pos:start="4041:29" pos:end="4041:49"><expr pos:start="4041:29" pos:end="4041:49"><name pos:start="4041:29" pos:end="4041:36">pc_start</name> <operator pos:start="4041:38" pos:end="4041:38">-</operator> <name pos:start="4041:40" pos:end="4041:49"><name pos:start="4041:40" pos:end="4041:40">s</name><operator pos:start="4041:41" pos:end="4041:42">-&gt;</operator><name pos:start="4041:43" pos:end="4041:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4043:22" pos:end="4043:62"><expr pos:start="4043:22" pos:end="4043:62"><name pos:start="4043:22" pos:end="4043:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="4043:41" pos:end="4043:41">|</operator> <call pos:start="4043:43" pos:end="4043:62"><name pos:start="4043:43" pos:end="4043:52">svm_is_rep</name><argument_list pos:start="4043:53" pos:end="4043:62">(<argument pos:start="4043:54" pos:end="4043:61"><expr pos:start="4043:54" pos:end="4043:61"><name pos:start="4043:54" pos:end="4043:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4045:9" pos:end="4047:27"><if pos:start="4045:9" pos:end="4047:27">if <condition pos:start="4045:12" pos:end="4045:23">(<expr pos:start="4045:13" pos:end="4045:22"><name pos:start="4045:13" pos:end="4045:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4047:13" pos:end="4047:27"><block_content pos:start="4047:13" pos:end="4047:27">

            <expr_stmt pos:start="4047:13" pos:end="4047:27"><expr pos:start="4047:13" pos:end="4047:26"><call pos:start="4047:13" pos:end="4047:26"><name pos:start="4047:13" pos:end="4047:24">gen_io_start</name><argument_list pos:start="4047:25" pos:end="4047:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4049:9" pos:end="4049:53"><expr pos:start="4049:9" pos:end="4049:52"><call pos:start="4049:9" pos:end="4049:52"><name pos:start="4049:9" pos:end="4049:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4049:29" pos:end="4049:52">(<argument pos:start="4049:30" pos:end="4049:41"><expr pos:start="4049:30" pos:end="4049:41"><name pos:start="4049:30" pos:end="4049:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4049:44" pos:end="4049:51"><expr pos:start="4049:44" pos:end="4049:51"><name pos:start="4049:44" pos:end="4049:51"><name pos:start="4049:44" pos:end="4049:48">cpu_T</name><index pos:start="4049:49" pos:end="4049:51">[<expr pos:start="4049:50" pos:end="4049:50"><literal type="number" pos:start="4049:50" pos:end="4049:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4051:9" pos:end="4051:55"><expr pos:start="4051:9" pos:end="4051:54"><call pos:start="4051:9" pos:end="4051:54"><name pos:start="4051:9" pos:end="4051:26">gen_helper_in_func</name><argument_list pos:start="4051:27" pos:end="4051:54">(<argument pos:start="4051:28" pos:end="4051:29"><expr pos:start="4051:28" pos:end="4051:29"><name pos:start="4051:28" pos:end="4051:29">ot</name></expr></argument>, <argument pos:start="4051:32" pos:end="4051:39"><expr pos:start="4051:32" pos:end="4051:39"><name pos:start="4051:32" pos:end="4051:39"><name pos:start="4051:32" pos:end="4051:36">cpu_T</name><index pos:start="4051:37" pos:end="4051:39">[<expr pos:start="4051:38" pos:end="4051:38"><literal type="number" pos:start="4051:38" pos:end="4051:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4051:42" pos:end="4051:53"><expr pos:start="4051:42" pos:end="4051:53"><name pos:start="4051:42" pos:end="4051:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4053:9" pos:end="4053:37"><expr pos:start="4053:9" pos:end="4053:36"><call pos:start="4053:9" pos:end="4053:36"><name pos:start="4053:9" pos:end="4053:25">gen_op_mov_reg_T1</name><argument_list pos:start="4053:26" pos:end="4053:36">(<argument pos:start="4053:27" pos:end="4053:28"><expr pos:start="4053:27" pos:end="4053:28"><name pos:start="4053:27" pos:end="4053:28">ot</name></expr></argument>, <argument pos:start="4053:31" pos:end="4053:35"><expr pos:start="4053:31" pos:end="4053:35"><name pos:start="4053:31" pos:end="4053:35">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4055:9" pos:end="4061:9"><if pos:start="4055:9" pos:end="4061:9">if <condition pos:start="4055:12" pos:end="4055:23">(<expr pos:start="4055:13" pos:end="4055:22"><name pos:start="4055:13" pos:end="4055:22">use_icount</name></expr>)</condition> <block pos:start="4055:25" pos:end="4061:9">{<block_content pos:start="4057:13" pos:end="4059:43">

            <expr_stmt pos:start="4057:13" pos:end="4057:25"><expr pos:start="4057:13" pos:end="4057:24"><call pos:start="4057:13" pos:end="4057:24"><name pos:start="4057:13" pos:end="4057:22">gen_io_end</name><argument_list pos:start="4057:23" pos:end="4057:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4059:13" pos:end="4059:43"><expr pos:start="4059:13" pos:end="4059:42"><call pos:start="4059:13" pos:end="4059:42"><name pos:start="4059:13" pos:end="4059:19">gen_jmp</name><argument_list pos:start="4059:20" pos:end="4059:42">(<argument pos:start="4059:21" pos:end="4059:21"><expr pos:start="4059:21" pos:end="4059:21"><name pos:start="4059:21" pos:end="4059:21">s</name></expr></argument>, <argument pos:start="4059:24" pos:end="4059:41"><expr pos:start="4059:24" pos:end="4059:41"><name pos:start="4059:24" pos:end="4059:28"><name pos:start="4059:24" pos:end="4059:24">s</name><operator pos:start="4059:25" pos:end="4059:26">-&gt;</operator><name pos:start="4059:27" pos:end="4059:28">pc</name></name> <operator pos:start="4059:30" pos:end="4059:30">-</operator> <name pos:start="4059:32" pos:end="4059:41"><name pos:start="4059:32" pos:end="4059:32">s</name><operator pos:start="4059:33" pos:end="4059:34">-&gt;</operator><name pos:start="4059:35" pos:end="4059:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4063:9" pos:end="4063:14">break;</break>

    <case pos:start="4065:5" pos:end="4065:14">case <expr pos:start="4065:10" pos:end="4065:13"><literal type="number" pos:start="4065:10" pos:end="4065:13">0xe6</literal></expr>:</case>

    <case pos:start="4067:5" pos:end="4067:14">case <expr pos:start="4067:10" pos:end="4067:13"><literal type="number" pos:start="4067:10" pos:end="4067:13">0xe7</literal></expr>:</case>

        <if_stmt pos:start="4069:9" pos:end="4075:43"><if pos:start="4069:9" pos:end="4071:25">if <condition pos:start="4069:12" pos:end="4069:25">(<expr pos:start="4069:13" pos:end="4069:24"><operator pos:start="4069:13" pos:end="4069:13">(</operator><name pos:start="4069:14" pos:end="4069:14">b</name> <operator pos:start="4069:16" pos:end="4069:16">&amp;</operator> <literal type="number" pos:start="4069:18" pos:end="4069:18">1</literal><operator pos:start="4069:19" pos:end="4069:19">)</operator> <operator pos:start="4069:21" pos:end="4069:22">==</operator> <literal type="number" pos:start="4069:24" pos:end="4069:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4071:13" pos:end="4071:25"><block_content pos:start="4071:13" pos:end="4071:25">

            <expr_stmt pos:start="4071:13" pos:end="4071:25"><expr pos:start="4071:13" pos:end="4071:24"><name pos:start="4071:13" pos:end="4071:14">ot</name> <operator pos:start="4071:16" pos:end="4071:16">=</operator> <name pos:start="4071:18" pos:end="4071:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4073:9" pos:end="4075:43">else<block type="pseudo" pos:start="4075:13" pos:end="4075:43"><block_content pos:start="4075:13" pos:end="4075:43">

            <expr_stmt pos:start="4075:13" pos:end="4075:43"><expr pos:start="4075:13" pos:end="4075:42"><name pos:start="4075:13" pos:end="4075:14">ot</name> <operator pos:start="4075:16" pos:end="4075:16">=</operator> <ternary pos:start="4075:18" pos:end="4075:42"><condition pos:start="4075:18" pos:end="4075:24"><expr pos:start="4075:18" pos:end="4075:22"><name pos:start="4075:18" pos:end="4075:22">dflag</name></expr> ?</condition><then pos:start="4075:26" pos:end="4075:32"> <expr pos:start="4075:26" pos:end="4075:32"><name pos:start="4075:26" pos:end="4075:32">OT_LONG</name></expr> </then><else pos:start="4075:34" pos:end="4075:42">: <expr pos:start="4075:36" pos:end="4075:42"><name pos:start="4075:36" pos:end="4075:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4077:9" pos:end="4077:33"><expr pos:start="4077:9" pos:end="4077:32"><name pos:start="4077:9" pos:end="4077:11">val</name> <operator pos:start="4077:13" pos:end="4077:13">=</operator> <call pos:start="4077:15" pos:end="4077:32"><name pos:start="4077:15" pos:end="4077:23">ldub_code</name><argument_list pos:start="4077:24" pos:end="4077:32">(<argument pos:start="4077:25" pos:end="4077:31"><expr pos:start="4077:25" pos:end="4077:31"><name pos:start="4077:25" pos:end="4077:29"><name pos:start="4077:25" pos:end="4077:25">s</name><operator pos:start="4077:26" pos:end="4077:27">-&gt;</operator><name pos:start="4077:28" pos:end="4077:29">pc</name></name><operator pos:start="4077:30" pos:end="4077:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4079:9" pos:end="4079:31"><expr pos:start="4079:9" pos:end="4079:30"><call pos:start="4079:9" pos:end="4079:30"><name pos:start="4079:9" pos:end="4079:25">gen_op_movl_T0_im</name><argument_list pos:start="4079:26" pos:end="4079:30">(<argument pos:start="4079:27" pos:end="4079:29"><expr pos:start="4079:27" pos:end="4079:29"><name pos:start="4079:27" pos:end="4079:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4081:9" pos:end="4083:43"><expr pos:start="4081:9" pos:end="4083:42"><call pos:start="4081:9" pos:end="4083:42"><name pos:start="4081:9" pos:end="4081:20">gen_check_io</name><argument_list pos:start="4081:21" pos:end="4083:42">(<argument pos:start="4081:22" pos:end="4081:22"><expr pos:start="4081:22" pos:end="4081:22"><name pos:start="4081:22" pos:end="4081:22">s</name></expr></argument>, <argument pos:start="4081:25" pos:end="4081:26"><expr pos:start="4081:25" pos:end="4081:26"><name pos:start="4081:25" pos:end="4081:26">ot</name></expr></argument>, <argument pos:start="4081:29" pos:end="4081:49"><expr pos:start="4081:29" pos:end="4081:49"><name pos:start="4081:29" pos:end="4081:36">pc_start</name> <operator pos:start="4081:38" pos:end="4081:38">-</operator> <name pos:start="4081:40" pos:end="4081:49"><name pos:start="4081:40" pos:end="4081:40">s</name><operator pos:start="4081:41" pos:end="4081:42">-&gt;</operator><name pos:start="4081:43" pos:end="4081:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4083:22" pos:end="4083:41"><expr pos:start="4083:22" pos:end="4083:41"><call pos:start="4083:22" pos:end="4083:41"><name pos:start="4083:22" pos:end="4083:31">svm_is_rep</name><argument_list pos:start="4083:32" pos:end="4083:41">(<argument pos:start="4083:33" pos:end="4083:40"><expr pos:start="4083:33" pos:end="4083:40"><name pos:start="4083:33" pos:end="4083:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4085:9" pos:end="4085:40"><expr pos:start="4085:9" pos:end="4085:39"><call pos:start="4085:9" pos:end="4085:39"><name pos:start="4085:9" pos:end="4085:25">gen_op_mov_TN_reg</name><argument_list pos:start="4085:26" pos:end="4085:39">(<argument pos:start="4085:27" pos:end="4085:28"><expr pos:start="4085:27" pos:end="4085:28"><name pos:start="4085:27" pos:end="4085:28">ot</name></expr></argument>, <argument pos:start="4085:31" pos:end="4085:31"><expr pos:start="4085:31" pos:end="4085:31"><literal type="number" pos:start="4085:31" pos:end="4085:31">1</literal></expr></argument>, <argument pos:start="4085:34" pos:end="4085:38"><expr pos:start="4085:34" pos:end="4085:38"><name pos:start="4085:34" pos:end="4085:38">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="4089:9" pos:end="4091:27"><if pos:start="4089:9" pos:end="4091:27">if <condition pos:start="4089:12" pos:end="4089:23">(<expr pos:start="4089:13" pos:end="4089:22"><name pos:start="4089:13" pos:end="4089:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4091:13" pos:end="4091:27"><block_content pos:start="4091:13" pos:end="4091:27">

            <expr_stmt pos:start="4091:13" pos:end="4091:27"><expr pos:start="4091:13" pos:end="4091:26"><call pos:start="4091:13" pos:end="4091:26"><name pos:start="4091:13" pos:end="4091:24">gen_io_start</name><argument_list pos:start="4091:25" pos:end="4091:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4093:9" pos:end="4093:53"><expr pos:start="4093:9" pos:end="4093:52"><call pos:start="4093:9" pos:end="4093:52"><name pos:start="4093:9" pos:end="4093:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4093:29" pos:end="4093:52">(<argument pos:start="4093:30" pos:end="4093:41"><expr pos:start="4093:30" pos:end="4093:41"><name pos:start="4093:30" pos:end="4093:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4093:44" pos:end="4093:51"><expr pos:start="4093:44" pos:end="4093:51"><name pos:start="4093:44" pos:end="4093:51"><name pos:start="4093:44" pos:end="4093:48">cpu_T</name><index pos:start="4093:49" pos:end="4093:51">[<expr pos:start="4093:50" pos:end="4093:50"><literal type="number" pos:start="4093:50" pos:end="4093:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4095:9" pos:end="4095:61"><expr pos:start="4095:9" pos:end="4095:60"><call pos:start="4095:9" pos:end="4095:60"><name pos:start="4095:9" pos:end="4095:24">tcg_gen_andi_i32</name><argument_list pos:start="4095:25" pos:end="4095:60">(<argument pos:start="4095:26" pos:end="4095:37"><expr pos:start="4095:26" pos:end="4095:37"><name pos:start="4095:26" pos:end="4095:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4095:40" pos:end="4095:51"><expr pos:start="4095:40" pos:end="4095:51"><name pos:start="4095:40" pos:end="4095:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4095:54" pos:end="4095:59"><expr pos:start="4095:54" pos:end="4095:59"><literal type="number" pos:start="4095:54" pos:end="4095:59">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4097:9" pos:end="4097:53"><expr pos:start="4097:9" pos:end="4097:52"><call pos:start="4097:9" pos:end="4097:52"><name pos:start="4097:9" pos:end="4097:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4097:29" pos:end="4097:52">(<argument pos:start="4097:30" pos:end="4097:41"><expr pos:start="4097:30" pos:end="4097:41"><name pos:start="4097:30" pos:end="4097:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="4097:44" pos:end="4097:51"><expr pos:start="4097:44" pos:end="4097:51"><name pos:start="4097:44" pos:end="4097:51"><name pos:start="4097:44" pos:end="4097:48">cpu_T</name><index pos:start="4097:49" pos:end="4097:51">[<expr pos:start="4097:50" pos:end="4097:50"><literal type="number" pos:start="4097:50" pos:end="4097:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4099:9" pos:end="4099:60"><expr pos:start="4099:9" pos:end="4099:59"><call pos:start="4099:9" pos:end="4099:59"><name pos:start="4099:9" pos:end="4099:27">gen_helper_out_func</name><argument_list pos:start="4099:28" pos:end="4099:59">(<argument pos:start="4099:29" pos:end="4099:30"><expr pos:start="4099:29" pos:end="4099:30"><name pos:start="4099:29" pos:end="4099:30">ot</name></expr></argument>, <argument pos:start="4099:33" pos:end="4099:44"><expr pos:start="4099:33" pos:end="4099:44"><name pos:start="4099:33" pos:end="4099:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4099:47" pos:end="4099:58"><expr pos:start="4099:47" pos:end="4099:58"><name pos:start="4099:47" pos:end="4099:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4101:9" pos:end="4107:9"><if pos:start="4101:9" pos:end="4107:9">if <condition pos:start="4101:12" pos:end="4101:23">(<expr pos:start="4101:13" pos:end="4101:22"><name pos:start="4101:13" pos:end="4101:22">use_icount</name></expr>)</condition> <block pos:start="4101:25" pos:end="4107:9">{<block_content pos:start="4103:13" pos:end="4105:43">

            <expr_stmt pos:start="4103:13" pos:end="4103:25"><expr pos:start="4103:13" pos:end="4103:24"><call pos:start="4103:13" pos:end="4103:24"><name pos:start="4103:13" pos:end="4103:22">gen_io_end</name><argument_list pos:start="4103:23" pos:end="4103:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4105:13" pos:end="4105:43"><expr pos:start="4105:13" pos:end="4105:42"><call pos:start="4105:13" pos:end="4105:42"><name pos:start="4105:13" pos:end="4105:19">gen_jmp</name><argument_list pos:start="4105:20" pos:end="4105:42">(<argument pos:start="4105:21" pos:end="4105:21"><expr pos:start="4105:21" pos:end="4105:21"><name pos:start="4105:21" pos:end="4105:21">s</name></expr></argument>, <argument pos:start="4105:24" pos:end="4105:41"><expr pos:start="4105:24" pos:end="4105:41"><name pos:start="4105:24" pos:end="4105:28"><name pos:start="4105:24" pos:end="4105:24">s</name><operator pos:start="4105:25" pos:end="4105:26">-&gt;</operator><name pos:start="4105:27" pos:end="4105:28">pc</name></name> <operator pos:start="4105:30" pos:end="4105:30">-</operator> <name pos:start="4105:32" pos:end="4105:41"><name pos:start="4105:32" pos:end="4105:32">s</name><operator pos:start="4105:33" pos:end="4105:34">-&gt;</operator><name pos:start="4105:35" pos:end="4105:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4109:9" pos:end="4109:14">break;</break>

    <case pos:start="4111:5" pos:end="4111:14">case <expr pos:start="4111:10" pos:end="4111:13"><literal type="number" pos:start="4111:10" pos:end="4111:13">0xec</literal></expr>:</case>

    <case pos:start="4113:5" pos:end="4113:14">case <expr pos:start="4113:10" pos:end="4113:13"><literal type="number" pos:start="4113:10" pos:end="4113:13">0xed</literal></expr>:</case>

        <if_stmt pos:start="4115:9" pos:end="4121:43"><if pos:start="4115:9" pos:end="4117:25">if <condition pos:start="4115:12" pos:end="4115:25">(<expr pos:start="4115:13" pos:end="4115:24"><operator pos:start="4115:13" pos:end="4115:13">(</operator><name pos:start="4115:14" pos:end="4115:14">b</name> <operator pos:start="4115:16" pos:end="4115:16">&amp;</operator> <literal type="number" pos:start="4115:18" pos:end="4115:18">1</literal><operator pos:start="4115:19" pos:end="4115:19">)</operator> <operator pos:start="4115:21" pos:end="4115:22">==</operator> <literal type="number" pos:start="4115:24" pos:end="4115:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4117:13" pos:end="4117:25"><block_content pos:start="4117:13" pos:end="4117:25">

            <expr_stmt pos:start="4117:13" pos:end="4117:25"><expr pos:start="4117:13" pos:end="4117:24"><name pos:start="4117:13" pos:end="4117:14">ot</name> <operator pos:start="4117:16" pos:end="4117:16">=</operator> <name pos:start="4117:18" pos:end="4117:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4119:9" pos:end="4121:43">else<block type="pseudo" pos:start="4121:13" pos:end="4121:43"><block_content pos:start="4121:13" pos:end="4121:43">

            <expr_stmt pos:start="4121:13" pos:end="4121:43"><expr pos:start="4121:13" pos:end="4121:42"><name pos:start="4121:13" pos:end="4121:14">ot</name> <operator pos:start="4121:16" pos:end="4121:16">=</operator> <ternary pos:start="4121:18" pos:end="4121:42"><condition pos:start="4121:18" pos:end="4121:24"><expr pos:start="4121:18" pos:end="4121:22"><name pos:start="4121:18" pos:end="4121:22">dflag</name></expr> ?</condition><then pos:start="4121:26" pos:end="4121:32"> <expr pos:start="4121:26" pos:end="4121:32"><name pos:start="4121:26" pos:end="4121:32">OT_LONG</name></expr> </then><else pos:start="4121:34" pos:end="4121:42">: <expr pos:start="4121:36" pos:end="4121:42"><name pos:start="4121:36" pos:end="4121:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4123:9" pos:end="4123:45"><expr pos:start="4123:9" pos:end="4123:44"><call pos:start="4123:9" pos:end="4123:44"><name pos:start="4123:9" pos:end="4123:25">gen_op_mov_TN_reg</name><argument_list pos:start="4123:26" pos:end="4123:44">(<argument pos:start="4123:27" pos:end="4123:33"><expr pos:start="4123:27" pos:end="4123:33"><name pos:start="4123:27" pos:end="4123:33">OT_WORD</name></expr></argument>, <argument pos:start="4123:36" pos:end="4123:36"><expr pos:start="4123:36" pos:end="4123:36"><literal type="number" pos:start="4123:36" pos:end="4123:36">0</literal></expr></argument>, <argument pos:start="4123:39" pos:end="4123:43"><expr pos:start="4123:39" pos:end="4123:43"><name pos:start="4123:39" pos:end="4123:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4125:9" pos:end="4125:30"><expr pos:start="4125:9" pos:end="4125:29"><call pos:start="4125:9" pos:end="4125:29"><name pos:start="4125:9" pos:end="4125:27">gen_op_andl_T0_ffff</name><argument_list pos:start="4125:28" pos:end="4125:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4127:9" pos:end="4129:64"><expr pos:start="4127:9" pos:end="4129:63"><call pos:start="4127:9" pos:end="4129:63"><name pos:start="4127:9" pos:end="4127:20">gen_check_io</name><argument_list pos:start="4127:21" pos:end="4129:63">(<argument pos:start="4127:22" pos:end="4127:22"><expr pos:start="4127:22" pos:end="4127:22"><name pos:start="4127:22" pos:end="4127:22">s</name></expr></argument>, <argument pos:start="4127:25" pos:end="4127:26"><expr pos:start="4127:25" pos:end="4127:26"><name pos:start="4127:25" pos:end="4127:26">ot</name></expr></argument>, <argument pos:start="4127:29" pos:end="4127:49"><expr pos:start="4127:29" pos:end="4127:49"><name pos:start="4127:29" pos:end="4127:36">pc_start</name> <operator pos:start="4127:38" pos:end="4127:38">-</operator> <name pos:start="4127:40" pos:end="4127:49"><name pos:start="4127:40" pos:end="4127:40">s</name><operator pos:start="4127:41" pos:end="4127:42">-&gt;</operator><name pos:start="4127:43" pos:end="4127:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4129:22" pos:end="4129:62"><expr pos:start="4129:22" pos:end="4129:62"><name pos:start="4129:22" pos:end="4129:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="4129:41" pos:end="4129:41">|</operator> <call pos:start="4129:43" pos:end="4129:62"><name pos:start="4129:43" pos:end="4129:52">svm_is_rep</name><argument_list pos:start="4129:53" pos:end="4129:62">(<argument pos:start="4129:54" pos:end="4129:61"><expr pos:start="4129:54" pos:end="4129:61"><name pos:start="4129:54" pos:end="4129:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4131:9" pos:end="4133:27"><if pos:start="4131:9" pos:end="4133:27">if <condition pos:start="4131:12" pos:end="4131:23">(<expr pos:start="4131:13" pos:end="4131:22"><name pos:start="4131:13" pos:end="4131:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4133:13" pos:end="4133:27"><block_content pos:start="4133:13" pos:end="4133:27">

            <expr_stmt pos:start="4133:13" pos:end="4133:27"><expr pos:start="4133:13" pos:end="4133:26"><call pos:start="4133:13" pos:end="4133:26"><name pos:start="4133:13" pos:end="4133:24">gen_io_start</name><argument_list pos:start="4133:25" pos:end="4133:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4135:9" pos:end="4135:53"><expr pos:start="4135:9" pos:end="4135:52"><call pos:start="4135:9" pos:end="4135:52"><name pos:start="4135:9" pos:end="4135:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4135:29" pos:end="4135:52">(<argument pos:start="4135:30" pos:end="4135:41"><expr pos:start="4135:30" pos:end="4135:41"><name pos:start="4135:30" pos:end="4135:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4135:44" pos:end="4135:51"><expr pos:start="4135:44" pos:end="4135:51"><name pos:start="4135:44" pos:end="4135:51"><name pos:start="4135:44" pos:end="4135:48">cpu_T</name><index pos:start="4135:49" pos:end="4135:51">[<expr pos:start="4135:50" pos:end="4135:50"><literal type="number" pos:start="4135:50" pos:end="4135:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4137:9" pos:end="4137:55"><expr pos:start="4137:9" pos:end="4137:54"><call pos:start="4137:9" pos:end="4137:54"><name pos:start="4137:9" pos:end="4137:26">gen_helper_in_func</name><argument_list pos:start="4137:27" pos:end="4137:54">(<argument pos:start="4137:28" pos:end="4137:29"><expr pos:start="4137:28" pos:end="4137:29"><name pos:start="4137:28" pos:end="4137:29">ot</name></expr></argument>, <argument pos:start="4137:32" pos:end="4137:39"><expr pos:start="4137:32" pos:end="4137:39"><name pos:start="4137:32" pos:end="4137:39"><name pos:start="4137:32" pos:end="4137:36">cpu_T</name><index pos:start="4137:37" pos:end="4137:39">[<expr pos:start="4137:38" pos:end="4137:38"><literal type="number" pos:start="4137:38" pos:end="4137:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4137:42" pos:end="4137:53"><expr pos:start="4137:42" pos:end="4137:53"><name pos:start="4137:42" pos:end="4137:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4139:9" pos:end="4139:37"><expr pos:start="4139:9" pos:end="4139:36"><call pos:start="4139:9" pos:end="4139:36"><name pos:start="4139:9" pos:end="4139:25">gen_op_mov_reg_T1</name><argument_list pos:start="4139:26" pos:end="4139:36">(<argument pos:start="4139:27" pos:end="4139:28"><expr pos:start="4139:27" pos:end="4139:28"><name pos:start="4139:27" pos:end="4139:28">ot</name></expr></argument>, <argument pos:start="4139:31" pos:end="4139:35"><expr pos:start="4139:31" pos:end="4139:35"><name pos:start="4139:31" pos:end="4139:35">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4141:9" pos:end="4147:9"><if pos:start="4141:9" pos:end="4147:9">if <condition pos:start="4141:12" pos:end="4141:23">(<expr pos:start="4141:13" pos:end="4141:22"><name pos:start="4141:13" pos:end="4141:22">use_icount</name></expr>)</condition> <block pos:start="4141:25" pos:end="4147:9">{<block_content pos:start="4143:13" pos:end="4145:43">

            <expr_stmt pos:start="4143:13" pos:end="4143:25"><expr pos:start="4143:13" pos:end="4143:24"><call pos:start="4143:13" pos:end="4143:24"><name pos:start="4143:13" pos:end="4143:22">gen_io_end</name><argument_list pos:start="4143:23" pos:end="4143:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4145:13" pos:end="4145:43"><expr pos:start="4145:13" pos:end="4145:42"><call pos:start="4145:13" pos:end="4145:42"><name pos:start="4145:13" pos:end="4145:19">gen_jmp</name><argument_list pos:start="4145:20" pos:end="4145:42">(<argument pos:start="4145:21" pos:end="4145:21"><expr pos:start="4145:21" pos:end="4145:21"><name pos:start="4145:21" pos:end="4145:21">s</name></expr></argument>, <argument pos:start="4145:24" pos:end="4145:41"><expr pos:start="4145:24" pos:end="4145:41"><name pos:start="4145:24" pos:end="4145:28"><name pos:start="4145:24" pos:end="4145:24">s</name><operator pos:start="4145:25" pos:end="4145:26">-&gt;</operator><name pos:start="4145:27" pos:end="4145:28">pc</name></name> <operator pos:start="4145:30" pos:end="4145:30">-</operator> <name pos:start="4145:32" pos:end="4145:41"><name pos:start="4145:32" pos:end="4145:32">s</name><operator pos:start="4145:33" pos:end="4145:34">-&gt;</operator><name pos:start="4145:35" pos:end="4145:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4149:9" pos:end="4149:14">break;</break>

    <case pos:start="4151:5" pos:end="4151:14">case <expr pos:start="4151:10" pos:end="4151:13"><literal type="number" pos:start="4151:10" pos:end="4151:13">0xee</literal></expr>:</case>

    <case pos:start="4153:5" pos:end="4153:14">case <expr pos:start="4153:10" pos:end="4153:13"><literal type="number" pos:start="4153:10" pos:end="4153:13">0xef</literal></expr>:</case>

        <if_stmt pos:start="4155:9" pos:end="4161:43"><if pos:start="4155:9" pos:end="4157:25">if <condition pos:start="4155:12" pos:end="4155:25">(<expr pos:start="4155:13" pos:end="4155:24"><operator pos:start="4155:13" pos:end="4155:13">(</operator><name pos:start="4155:14" pos:end="4155:14">b</name> <operator pos:start="4155:16" pos:end="4155:16">&amp;</operator> <literal type="number" pos:start="4155:18" pos:end="4155:18">1</literal><operator pos:start="4155:19" pos:end="4155:19">)</operator> <operator pos:start="4155:21" pos:end="4155:22">==</operator> <literal type="number" pos:start="4155:24" pos:end="4155:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4157:13" pos:end="4157:25"><block_content pos:start="4157:13" pos:end="4157:25">

            <expr_stmt pos:start="4157:13" pos:end="4157:25"><expr pos:start="4157:13" pos:end="4157:24"><name pos:start="4157:13" pos:end="4157:14">ot</name> <operator pos:start="4157:16" pos:end="4157:16">=</operator> <name pos:start="4157:18" pos:end="4157:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4159:9" pos:end="4161:43">else<block type="pseudo" pos:start="4161:13" pos:end="4161:43"><block_content pos:start="4161:13" pos:end="4161:43">

            <expr_stmt pos:start="4161:13" pos:end="4161:43"><expr pos:start="4161:13" pos:end="4161:42"><name pos:start="4161:13" pos:end="4161:14">ot</name> <operator pos:start="4161:16" pos:end="4161:16">=</operator> <ternary pos:start="4161:18" pos:end="4161:42"><condition pos:start="4161:18" pos:end="4161:24"><expr pos:start="4161:18" pos:end="4161:22"><name pos:start="4161:18" pos:end="4161:22">dflag</name></expr> ?</condition><then pos:start="4161:26" pos:end="4161:32"> <expr pos:start="4161:26" pos:end="4161:32"><name pos:start="4161:26" pos:end="4161:32">OT_LONG</name></expr> </then><else pos:start="4161:34" pos:end="4161:42">: <expr pos:start="4161:36" pos:end="4161:42"><name pos:start="4161:36" pos:end="4161:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4163:9" pos:end="4163:45"><expr pos:start="4163:9" pos:end="4163:44"><call pos:start="4163:9" pos:end="4163:44"><name pos:start="4163:9" pos:end="4163:25">gen_op_mov_TN_reg</name><argument_list pos:start="4163:26" pos:end="4163:44">(<argument pos:start="4163:27" pos:end="4163:33"><expr pos:start="4163:27" pos:end="4163:33"><name pos:start="4163:27" pos:end="4163:33">OT_WORD</name></expr></argument>, <argument pos:start="4163:36" pos:end="4163:36"><expr pos:start="4163:36" pos:end="4163:36"><literal type="number" pos:start="4163:36" pos:end="4163:36">0</literal></expr></argument>, <argument pos:start="4163:39" pos:end="4163:43"><expr pos:start="4163:39" pos:end="4163:43"><name pos:start="4163:39" pos:end="4163:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4165:9" pos:end="4165:30"><expr pos:start="4165:9" pos:end="4165:29"><call pos:start="4165:9" pos:end="4165:29"><name pos:start="4165:9" pos:end="4165:27">gen_op_andl_T0_ffff</name><argument_list pos:start="4165:28" pos:end="4165:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4167:9" pos:end="4169:43"><expr pos:start="4167:9" pos:end="4169:42"><call pos:start="4167:9" pos:end="4169:42"><name pos:start="4167:9" pos:end="4167:20">gen_check_io</name><argument_list pos:start="4167:21" pos:end="4169:42">(<argument pos:start="4167:22" pos:end="4167:22"><expr pos:start="4167:22" pos:end="4167:22"><name pos:start="4167:22" pos:end="4167:22">s</name></expr></argument>, <argument pos:start="4167:25" pos:end="4167:26"><expr pos:start="4167:25" pos:end="4167:26"><name pos:start="4167:25" pos:end="4167:26">ot</name></expr></argument>, <argument pos:start="4167:29" pos:end="4167:49"><expr pos:start="4167:29" pos:end="4167:49"><name pos:start="4167:29" pos:end="4167:36">pc_start</name> <operator pos:start="4167:38" pos:end="4167:38">-</operator> <name pos:start="4167:40" pos:end="4167:49"><name pos:start="4167:40" pos:end="4167:40">s</name><operator pos:start="4167:41" pos:end="4167:42">-&gt;</operator><name pos:start="4167:43" pos:end="4167:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4169:22" pos:end="4169:41"><expr pos:start="4169:22" pos:end="4169:41"><call pos:start="4169:22" pos:end="4169:41"><name pos:start="4169:22" pos:end="4169:31">svm_is_rep</name><argument_list pos:start="4169:32" pos:end="4169:41">(<argument pos:start="4169:33" pos:end="4169:40"><expr pos:start="4169:33" pos:end="4169:40"><name pos:start="4169:33" pos:end="4169:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4171:9" pos:end="4171:40"><expr pos:start="4171:9" pos:end="4171:39"><call pos:start="4171:9" pos:end="4171:39"><name pos:start="4171:9" pos:end="4171:25">gen_op_mov_TN_reg</name><argument_list pos:start="4171:26" pos:end="4171:39">(<argument pos:start="4171:27" pos:end="4171:28"><expr pos:start="4171:27" pos:end="4171:28"><name pos:start="4171:27" pos:end="4171:28">ot</name></expr></argument>, <argument pos:start="4171:31" pos:end="4171:31"><expr pos:start="4171:31" pos:end="4171:31"><literal type="number" pos:start="4171:31" pos:end="4171:31">1</literal></expr></argument>, <argument pos:start="4171:34" pos:end="4171:38"><expr pos:start="4171:34" pos:end="4171:38"><name pos:start="4171:34" pos:end="4171:38">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="4175:9" pos:end="4177:27"><if pos:start="4175:9" pos:end="4177:27">if <condition pos:start="4175:12" pos:end="4175:23">(<expr pos:start="4175:13" pos:end="4175:22"><name pos:start="4175:13" pos:end="4175:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4177:13" pos:end="4177:27"><block_content pos:start="4177:13" pos:end="4177:27">

            <expr_stmt pos:start="4177:13" pos:end="4177:27"><expr pos:start="4177:13" pos:end="4177:26"><call pos:start="4177:13" pos:end="4177:26"><name pos:start="4177:13" pos:end="4177:24">gen_io_start</name><argument_list pos:start="4177:25" pos:end="4177:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4179:9" pos:end="4179:53"><expr pos:start="4179:9" pos:end="4179:52"><call pos:start="4179:9" pos:end="4179:52"><name pos:start="4179:9" pos:end="4179:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4179:29" pos:end="4179:52">(<argument pos:start="4179:30" pos:end="4179:41"><expr pos:start="4179:30" pos:end="4179:41"><name pos:start="4179:30" pos:end="4179:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4179:44" pos:end="4179:51"><expr pos:start="4179:44" pos:end="4179:51"><name pos:start="4179:44" pos:end="4179:51"><name pos:start="4179:44" pos:end="4179:48">cpu_T</name><index pos:start="4179:49" pos:end="4179:51">[<expr pos:start="4179:50" pos:end="4179:50"><literal type="number" pos:start="4179:50" pos:end="4179:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4181:9" pos:end="4181:61"><expr pos:start="4181:9" pos:end="4181:60"><call pos:start="4181:9" pos:end="4181:60"><name pos:start="4181:9" pos:end="4181:24">tcg_gen_andi_i32</name><argument_list pos:start="4181:25" pos:end="4181:60">(<argument pos:start="4181:26" pos:end="4181:37"><expr pos:start="4181:26" pos:end="4181:37"><name pos:start="4181:26" pos:end="4181:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4181:40" pos:end="4181:51"><expr pos:start="4181:40" pos:end="4181:51"><name pos:start="4181:40" pos:end="4181:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4181:54" pos:end="4181:59"><expr pos:start="4181:54" pos:end="4181:59"><literal type="number" pos:start="4181:54" pos:end="4181:59">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4183:9" pos:end="4183:53"><expr pos:start="4183:9" pos:end="4183:52"><call pos:start="4183:9" pos:end="4183:52"><name pos:start="4183:9" pos:end="4183:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4183:29" pos:end="4183:52">(<argument pos:start="4183:30" pos:end="4183:41"><expr pos:start="4183:30" pos:end="4183:41"><name pos:start="4183:30" pos:end="4183:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="4183:44" pos:end="4183:51"><expr pos:start="4183:44" pos:end="4183:51"><name pos:start="4183:44" pos:end="4183:51"><name pos:start="4183:44" pos:end="4183:48">cpu_T</name><index pos:start="4183:49" pos:end="4183:51">[<expr pos:start="4183:50" pos:end="4183:50"><literal type="number" pos:start="4183:50" pos:end="4183:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4185:9" pos:end="4185:60"><expr pos:start="4185:9" pos:end="4185:59"><call pos:start="4185:9" pos:end="4185:59"><name pos:start="4185:9" pos:end="4185:27">gen_helper_out_func</name><argument_list pos:start="4185:28" pos:end="4185:59">(<argument pos:start="4185:29" pos:end="4185:30"><expr pos:start="4185:29" pos:end="4185:30"><name pos:start="4185:29" pos:end="4185:30">ot</name></expr></argument>, <argument pos:start="4185:33" pos:end="4185:44"><expr pos:start="4185:33" pos:end="4185:44"><name pos:start="4185:33" pos:end="4185:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4185:47" pos:end="4185:58"><expr pos:start="4185:47" pos:end="4185:58"><name pos:start="4185:47" pos:end="4185:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4187:9" pos:end="4193:9"><if pos:start="4187:9" pos:end="4193:9">if <condition pos:start="4187:12" pos:end="4187:23">(<expr pos:start="4187:13" pos:end="4187:22"><name pos:start="4187:13" pos:end="4187:22">use_icount</name></expr>)</condition> <block pos:start="4187:25" pos:end="4193:9">{<block_content pos:start="4189:13" pos:end="4191:43">

            <expr_stmt pos:start="4189:13" pos:end="4189:25"><expr pos:start="4189:13" pos:end="4189:24"><call pos:start="4189:13" pos:end="4189:24"><name pos:start="4189:13" pos:end="4189:22">gen_io_end</name><argument_list pos:start="4189:23" pos:end="4189:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4191:13" pos:end="4191:43"><expr pos:start="4191:13" pos:end="4191:42"><call pos:start="4191:13" pos:end="4191:42"><name pos:start="4191:13" pos:end="4191:19">gen_jmp</name><argument_list pos:start="4191:20" pos:end="4191:42">(<argument pos:start="4191:21" pos:end="4191:21"><expr pos:start="4191:21" pos:end="4191:21"><name pos:start="4191:21" pos:end="4191:21">s</name></expr></argument>, <argument pos:start="4191:24" pos:end="4191:41"><expr pos:start="4191:24" pos:end="4191:41"><name pos:start="4191:24" pos:end="4191:28"><name pos:start="4191:24" pos:end="4191:24">s</name><operator pos:start="4191:25" pos:end="4191:26">-&gt;</operator><name pos:start="4191:27" pos:end="4191:28">pc</name></name> <operator pos:start="4191:30" pos:end="4191:30">-</operator> <name pos:start="4191:32" pos:end="4191:41"><name pos:start="4191:32" pos:end="4191:32">s</name><operator pos:start="4191:33" pos:end="4191:34">-&gt;</operator><name pos:start="4191:35" pos:end="4191:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4195:9" pos:end="4195:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4199:9" pos:end="4199:34">/************************/</comment>

        <comment type="block" pos:start="4201:9" pos:end="4201:21">/* control */</comment>

    <case pos:start="4203:5" pos:end="4203:14">case <expr pos:start="4203:10" pos:end="4203:13"><literal type="number" pos:start="4203:10" pos:end="4203:13">0xc2</literal></expr>:</case> <comment type="block" pos:start="4203:16" pos:end="4203:27">/* ret im */</comment>

        <expr_stmt pos:start="4205:9" pos:end="4205:31"><expr pos:start="4205:9" pos:end="4205:30"><name pos:start="4205:9" pos:end="4205:11">val</name> <operator pos:start="4205:13" pos:end="4205:13">=</operator> <call pos:start="4205:15" pos:end="4205:30"><name pos:start="4205:15" pos:end="4205:23">ldsw_code</name><argument_list pos:start="4205:24" pos:end="4205:30">(<argument pos:start="4205:25" pos:end="4205:29"><expr pos:start="4205:25" pos:end="4205:29"><name pos:start="4205:25" pos:end="4205:29"><name pos:start="4205:25" pos:end="4205:25">s</name><operator pos:start="4205:26" pos:end="4205:27">-&gt;</operator><name pos:start="4205:28" pos:end="4205:29">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4207:9" pos:end="4207:19"><expr pos:start="4207:9" pos:end="4207:18"><name pos:start="4207:9" pos:end="4207:13"><name pos:start="4207:9" pos:end="4207:9">s</name><operator pos:start="4207:10" pos:end="4207:11">-&gt;</operator><name pos:start="4207:12" pos:end="4207:13">pc</name></name> <operator pos:start="4207:15" pos:end="4207:16">+=</operator> <literal type="number" pos:start="4207:18" pos:end="4207:18">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4209:9" pos:end="4209:22"><expr pos:start="4209:9" pos:end="4209:21"><call pos:start="4209:9" pos:end="4209:21"><name pos:start="4209:9" pos:end="4209:18">gen_pop_T0</name><argument_list pos:start="4209:19" pos:end="4209:21">(<argument pos:start="4209:20" pos:end="4209:20"><expr pos:start="4209:20" pos:end="4209:20"><name pos:start="4209:20" pos:end="4209:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4211:9" pos:end="4213:25"><if pos:start="4211:9" pos:end="4213:25">if <condition pos:start="4211:12" pos:end="4211:34">(<expr pos:start="4211:13" pos:end="4211:33"><call pos:start="4211:13" pos:end="4211:21"><name pos:start="4211:13" pos:end="4211:18">CODE64</name><argument_list pos:start="4211:19" pos:end="4211:21">(<argument pos:start="4211:20" pos:end="4211:20"><expr pos:start="4211:20" pos:end="4211:20"><name pos:start="4211:20" pos:end="4211:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4211:23" pos:end="4211:24">&amp;&amp;</operator> <name pos:start="4211:26" pos:end="4211:33"><name pos:start="4211:26" pos:end="4211:26">s</name><operator pos:start="4211:27" pos:end="4211:28">-&gt;</operator><name pos:start="4211:29" pos:end="4211:33">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="4213:13" pos:end="4213:25"><block_content pos:start="4213:13" pos:end="4213:25">

            <expr_stmt pos:start="4213:13" pos:end="4213:25"><expr pos:start="4213:13" pos:end="4213:24"><name pos:start="4213:13" pos:end="4213:20"><name pos:start="4213:13" pos:end="4213:13">s</name><operator pos:start="4213:14" pos:end="4213:15">-&gt;</operator><name pos:start="4213:16" pos:end="4213:20">dflag</name></name> <operator pos:start="4213:22" pos:end="4213:22">=</operator> <literal type="number" pos:start="4213:24" pos:end="4213:24">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4215:9" pos:end="4215:51"><expr pos:start="4215:9" pos:end="4215:50"><call pos:start="4215:9" pos:end="4215:50"><name pos:start="4215:9" pos:end="4215:24">gen_stack_update</name><argument_list pos:start="4215:25" pos:end="4215:50">(<argument pos:start="4215:26" pos:end="4215:26"><expr pos:start="4215:26" pos:end="4215:26"><name pos:start="4215:26" pos:end="4215:26">s</name></expr></argument>, <argument pos:start="4215:29" pos:end="4215:49"><expr pos:start="4215:29" pos:end="4215:49"><name pos:start="4215:29" pos:end="4215:31">val</name> <operator pos:start="4215:33" pos:end="4215:33">+</operator> <operator pos:start="4215:35" pos:end="4215:35">(</operator><literal type="number" pos:start="4215:36" pos:end="4215:36">2</literal> <operator pos:start="4215:38" pos:end="4215:39">&lt;&lt;</operator> <name pos:start="4215:41" pos:end="4215:48"><name pos:start="4215:41" pos:end="4215:41">s</name><operator pos:start="4215:42" pos:end="4215:43">-&gt;</operator><name pos:start="4215:44" pos:end="4215:48">dflag</name></name><operator pos:start="4215:49" pos:end="4215:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4217:9" pos:end="4219:34"><if pos:start="4217:9" pos:end="4219:34">if <condition pos:start="4217:12" pos:end="4217:26">(<expr pos:start="4217:13" pos:end="4217:25"><name pos:start="4217:13" pos:end="4217:20"><name pos:start="4217:13" pos:end="4217:13">s</name><operator pos:start="4217:14" pos:end="4217:15">-&gt;</operator><name pos:start="4217:16" pos:end="4217:20">dflag</name></name> <operator pos:start="4217:22" pos:end="4217:23">==</operator> <literal type="number" pos:start="4217:25" pos:end="4217:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4219:13" pos:end="4219:34"><block_content pos:start="4219:13" pos:end="4219:34">

            <expr_stmt pos:start="4219:13" pos:end="4219:34"><expr pos:start="4219:13" pos:end="4219:33"><call pos:start="4219:13" pos:end="4219:33"><name pos:start="4219:13" pos:end="4219:31">gen_op_andl_T0_ffff</name><argument_list pos:start="4219:32" pos:end="4219:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4221:9" pos:end="4221:24"><expr pos:start="4221:9" pos:end="4221:23"><call pos:start="4221:9" pos:end="4221:23"><name pos:start="4221:9" pos:end="4221:21">gen_op_jmp_T0</name><argument_list pos:start="4221:22" pos:end="4221:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4223:9" pos:end="4223:19"><expr pos:start="4223:9" pos:end="4223:18"><call pos:start="4223:9" pos:end="4223:18"><name pos:start="4223:9" pos:end="4223:15">gen_eob</name><argument_list pos:start="4223:16" pos:end="4223:18">(<argument pos:start="4223:17" pos:end="4223:17"><expr pos:start="4223:17" pos:end="4223:17"><name pos:start="4223:17" pos:end="4223:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4225:9" pos:end="4225:14">break;</break>

    <case pos:start="4227:5" pos:end="4227:14">case <expr pos:start="4227:10" pos:end="4227:13"><literal type="number" pos:start="4227:10" pos:end="4227:13">0xc3</literal></expr>:</case> <comment type="block" pos:start="4227:16" pos:end="4227:24">/* ret */</comment>

        <expr_stmt pos:start="4229:9" pos:end="4229:22"><expr pos:start="4229:9" pos:end="4229:21"><call pos:start="4229:9" pos:end="4229:21"><name pos:start="4229:9" pos:end="4229:18">gen_pop_T0</name><argument_list pos:start="4229:19" pos:end="4229:21">(<argument pos:start="4229:20" pos:end="4229:20"><expr pos:start="4229:20" pos:end="4229:20"><name pos:start="4229:20" pos:end="4229:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4231:9" pos:end="4231:26"><expr pos:start="4231:9" pos:end="4231:25"><call pos:start="4231:9" pos:end="4231:25"><name pos:start="4231:9" pos:end="4231:22">gen_pop_update</name><argument_list pos:start="4231:23" pos:end="4231:25">(<argument pos:start="4231:24" pos:end="4231:24"><expr pos:start="4231:24" pos:end="4231:24"><name pos:start="4231:24" pos:end="4231:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4233:9" pos:end="4235:34"><if pos:start="4233:9" pos:end="4235:34">if <condition pos:start="4233:12" pos:end="4233:26">(<expr pos:start="4233:13" pos:end="4233:25"><name pos:start="4233:13" pos:end="4233:20"><name pos:start="4233:13" pos:end="4233:13">s</name><operator pos:start="4233:14" pos:end="4233:15">-&gt;</operator><name pos:start="4233:16" pos:end="4233:20">dflag</name></name> <operator pos:start="4233:22" pos:end="4233:23">==</operator> <literal type="number" pos:start="4233:25" pos:end="4233:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4235:13" pos:end="4235:34"><block_content pos:start="4235:13" pos:end="4235:34">

            <expr_stmt pos:start="4235:13" pos:end="4235:34"><expr pos:start="4235:13" pos:end="4235:33"><call pos:start="4235:13" pos:end="4235:33"><name pos:start="4235:13" pos:end="4235:31">gen_op_andl_T0_ffff</name><argument_list pos:start="4235:32" pos:end="4235:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4237:9" pos:end="4237:24"><expr pos:start="4237:9" pos:end="4237:23"><call pos:start="4237:9" pos:end="4237:23"><name pos:start="4237:9" pos:end="4237:21">gen_op_jmp_T0</name><argument_list pos:start="4237:22" pos:end="4237:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4239:9" pos:end="4239:19"><expr pos:start="4239:9" pos:end="4239:18"><call pos:start="4239:9" pos:end="4239:18"><name pos:start="4239:9" pos:end="4239:15">gen_eob</name><argument_list pos:start="4239:16" pos:end="4239:18">(<argument pos:start="4239:17" pos:end="4239:17"><expr pos:start="4239:17" pos:end="4239:17"><name pos:start="4239:17" pos:end="4239:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4241:9" pos:end="4241:14">break;</break>

    <case pos:start="4243:5" pos:end="4243:14">case <expr pos:start="4243:10" pos:end="4243:13"><literal type="number" pos:start="4243:10" pos:end="4243:13">0xca</literal></expr>:</case> <comment type="block" pos:start="4243:16" pos:end="4243:28">/* lret im */</comment>

        <expr_stmt pos:start="4245:9" pos:end="4245:31"><expr pos:start="4245:9" pos:end="4245:30"><name pos:start="4245:9" pos:end="4245:11">val</name> <operator pos:start="4245:13" pos:end="4245:13">=</operator> <call pos:start="4245:15" pos:end="4245:30"><name pos:start="4245:15" pos:end="4245:23">ldsw_code</name><argument_list pos:start="4245:24" pos:end="4245:30">(<argument pos:start="4245:25" pos:end="4245:29"><expr pos:start="4245:25" pos:end="4245:29"><name pos:start="4245:25" pos:end="4245:29"><name pos:start="4245:25" pos:end="4245:25">s</name><operator pos:start="4245:26" pos:end="4245:27">-&gt;</operator><name pos:start="4245:28" pos:end="4245:29">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4247:9" pos:end="4247:19"><expr pos:start="4247:9" pos:end="4247:18"><name pos:start="4247:9" pos:end="4247:13"><name pos:start="4247:9" pos:end="4247:9">s</name><operator pos:start="4247:10" pos:end="4247:11">-&gt;</operator><name pos:start="4247:12" pos:end="4247:13">pc</name></name> <operator pos:start="4247:15" pos:end="4247:16">+=</operator> <literal type="number" pos:start="4247:18" pos:end="4247:18">2</literal></expr>;</expr_stmt>

    <label pos:start="4249:5" pos:end="4249:12"><name pos:start="4249:5" pos:end="4249:11">do_lret</name>:</label>

        <if_stmt pos:start="4251:9" pos:end="4293:9"><if pos:start="4251:9" pos:end="4263:9">if <condition pos:start="4251:12" pos:end="4251:30">(<expr pos:start="4251:13" pos:end="4251:29"><name pos:start="4251:13" pos:end="4251:17"><name pos:start="4251:13" pos:end="4251:13">s</name><operator pos:start="4251:14" pos:end="4251:15">-&gt;</operator><name pos:start="4251:16" pos:end="4251:17">pe</name></name> <operator pos:start="4251:19" pos:end="4251:20">&amp;&amp;</operator> <operator pos:start="4251:22" pos:end="4251:22">!</operator><name pos:start="4251:23" pos:end="4251:29"><name pos:start="4251:23" pos:end="4251:23">s</name><operator pos:start="4251:24" pos:end="4251:25">-&gt;</operator><name pos:start="4251:26" pos:end="4251:29">vm86</name></name></expr>)</condition> <block pos:start="4251:32" pos:end="4263:9">{<block_content pos:start="4253:13" pos:end="4261:58">

            <if_stmt pos:start="4253:13" pos:end="4255:43"><if pos:start="4253:13" pos:end="4255:43">if <condition pos:start="4253:16" pos:end="4253:42">(<expr pos:start="4253:17" pos:end="4253:41"><name pos:start="4253:17" pos:end="4253:24"><name pos:start="4253:17" pos:end="4253:17">s</name><operator pos:start="4253:18" pos:end="4253:19">-&gt;</operator><name pos:start="4253:20" pos:end="4253:24">cc_op</name></name> <operator pos:start="4253:26" pos:end="4253:27">!=</operator> <name pos:start="4253:29" pos:end="4253:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4255:17" pos:end="4255:43"><block_content pos:start="4255:17" pos:end="4255:43">

                <expr_stmt pos:start="4255:17" pos:end="4255:43"><expr pos:start="4255:17" pos:end="4255:42"><call pos:start="4255:17" pos:end="4255:42"><name pos:start="4255:17" pos:end="4255:32">gen_op_set_cc_op</name><argument_list pos:start="4255:33" pos:end="4255:42">(<argument pos:start="4255:34" pos:end="4255:41"><expr pos:start="4255:34" pos:end="4255:41"><name pos:start="4255:34" pos:end="4255:41"><name pos:start="4255:34" pos:end="4255:34">s</name><operator pos:start="4255:35" pos:end="4255:36">-&gt;</operator><name pos:start="4255:37" pos:end="4255:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4257:13" pos:end="4257:46"><expr pos:start="4257:13" pos:end="4257:45"><call pos:start="4257:13" pos:end="4257:45"><name pos:start="4257:13" pos:end="4257:22">gen_jmp_im</name><argument_list pos:start="4257:23" pos:end="4257:45">(<argument pos:start="4257:24" pos:end="4257:44"><expr pos:start="4257:24" pos:end="4257:44"><name pos:start="4257:24" pos:end="4257:31">pc_start</name> <operator pos:start="4257:33" pos:end="4257:33">-</operator> <name pos:start="4257:35" pos:end="4257:44"><name pos:start="4257:35" pos:end="4257:35">s</name><operator pos:start="4257:36" pos:end="4257:37">-&gt;</operator><name pos:start="4257:38" pos:end="4257:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4259:13" pos:end="4261:58"><expr pos:start="4259:13" pos:end="4261:57"><call pos:start="4259:13" pos:end="4261:57"><name pos:start="4259:13" pos:end="4259:37">gen_helper_lret_protected</name><argument_list pos:start="4259:38" pos:end="4261:57">(<argument pos:start="4259:39" pos:end="4259:61"><expr pos:start="4259:39" pos:end="4259:61"><call pos:start="4259:39" pos:end="4259:61"><name pos:start="4259:39" pos:end="4259:51">tcg_const_i32</name><argument_list pos:start="4259:52" pos:end="4259:61">(<argument pos:start="4259:53" pos:end="4259:60"><expr pos:start="4259:53" pos:end="4259:60"><name pos:start="4259:53" pos:end="4259:60"><name pos:start="4259:53" pos:end="4259:53">s</name><operator pos:start="4259:54" pos:end="4259:55">-&gt;</operator><name pos:start="4259:56" pos:end="4259:60">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="4261:39" pos:end="4261:56"><expr pos:start="4261:39" pos:end="4261:56"><call pos:start="4261:39" pos:end="4261:56"><name pos:start="4261:39" pos:end="4261:51">tcg_const_i32</name><argument_list pos:start="4261:52" pos:end="4261:56">(<argument pos:start="4261:53" pos:end="4261:55"><expr pos:start="4261:53" pos:end="4261:55"><name pos:start="4261:53" pos:end="4261:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4263:11" pos:end="4293:9">else <block pos:start="4263:16" pos:end="4293:9">{<block_content pos:start="4265:13" pos:end="4291:55">

            <expr_stmt pos:start="4265:13" pos:end="4265:28"><expr pos:start="4265:13" pos:end="4265:27"><call pos:start="4265:13" pos:end="4265:27"><name pos:start="4265:13" pos:end="4265:24">gen_stack_A0</name><argument_list pos:start="4265:25" pos:end="4265:27">(<argument pos:start="4265:26" pos:end="4265:26"><expr pos:start="4265:26" pos:end="4265:26"><name pos:start="4265:26" pos:end="4265:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4267:13" pos:end="4267:28">/* pop offset */</comment>

            <expr_stmt pos:start="4269:13" pos:end="4269:57"><expr pos:start="4269:13" pos:end="4269:56"><call pos:start="4269:13" pos:end="4269:56"><name pos:start="4269:13" pos:end="4269:27">gen_op_ld_T0_A0</name><argument_list pos:start="4269:28" pos:end="4269:56">(<argument pos:start="4269:29" pos:end="4269:55"><expr pos:start="4269:29" pos:end="4269:55"><literal type="number" pos:start="4269:29" pos:end="4269:31">1</literal> <operator pos:start="4269:31" pos:end="4269:31">+</operator> <name pos:start="4269:33" pos:end="4269:40"><name pos:start="4269:33" pos:end="4269:33">s</name><operator pos:start="4269:34" pos:end="4269:35">-&gt;</operator><name pos:start="4269:36" pos:end="4269:40">dflag</name></name> <operator pos:start="4269:42" pos:end="4269:42">+</operator> <name pos:start="4269:44" pos:end="4269:55"><name pos:start="4269:44" pos:end="4269:44">s</name><operator pos:start="4269:45" pos:end="4269:46">-&gt;</operator><name pos:start="4269:47" pos:end="4269:55">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4271:13" pos:end="4273:38"><if pos:start="4271:13" pos:end="4273:38">if <condition pos:start="4271:16" pos:end="4271:30">(<expr pos:start="4271:17" pos:end="4271:29"><name pos:start="4271:17" pos:end="4271:24"><name pos:start="4271:17" pos:end="4271:17">s</name><operator pos:start="4271:18" pos:end="4271:19">-&gt;</operator><name pos:start="4271:20" pos:end="4271:24">dflag</name></name> <operator pos:start="4271:26" pos:end="4271:27">==</operator> <literal type="number" pos:start="4271:29" pos:end="4271:29">0</literal></expr>)</condition><block type="pseudo" pos:start="4273:17" pos:end="4273:38"><block_content pos:start="4273:17" pos:end="4273:38">

                <expr_stmt pos:start="4273:17" pos:end="4273:38"><expr pos:start="4273:17" pos:end="4273:37"><call pos:start="4273:17" pos:end="4273:37"><name pos:start="4273:17" pos:end="4273:35">gen_op_andl_T0_ffff</name><argument_list pos:start="4273:36" pos:end="4273:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="4275:13" pos:end="4277:27">/* NOTE: keeping EIP updated is not a problem in case of

               exception */</comment>

            <expr_stmt pos:start="4279:13" pos:end="4279:28"><expr pos:start="4279:13" pos:end="4279:27"><call pos:start="4279:13" pos:end="4279:27"><name pos:start="4279:13" pos:end="4279:25">gen_op_jmp_T0</name><argument_list pos:start="4279:26" pos:end="4279:27">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4281:13" pos:end="4281:30">/* pop selector */</comment>

            <expr_stmt pos:start="4283:13" pos:end="4283:45"><expr pos:start="4283:13" pos:end="4283:44"><call pos:start="4283:13" pos:end="4283:44"><name pos:start="4283:13" pos:end="4283:29">gen_op_addl_A0_im</name><argument_list pos:start="4283:30" pos:end="4283:44">(<argument pos:start="4283:31" pos:end="4283:43"><expr pos:start="4283:31" pos:end="4283:43"><literal type="number" pos:start="4283:31" pos:end="4283:31">2</literal> <operator pos:start="4283:33" pos:end="4283:34">&lt;&lt;</operator> <name pos:start="4283:36" pos:end="4283:43"><name pos:start="4283:36" pos:end="4283:36">s</name><operator pos:start="4283:37" pos:end="4283:38">-&gt;</operator><name pos:start="4283:39" pos:end="4283:43">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4285:13" pos:end="4285:57"><expr pos:start="4285:13" pos:end="4285:56"><call pos:start="4285:13" pos:end="4285:56"><name pos:start="4285:13" pos:end="4285:27">gen_op_ld_T0_A0</name><argument_list pos:start="4285:28" pos:end="4285:56">(<argument pos:start="4285:29" pos:end="4285:55"><expr pos:start="4285:29" pos:end="4285:55"><literal type="number" pos:start="4285:29" pos:end="4285:31">1</literal> <operator pos:start="4285:31" pos:end="4285:31">+</operator> <name pos:start="4285:33" pos:end="4285:40"><name pos:start="4285:33" pos:end="4285:33">s</name><operator pos:start="4285:34" pos:end="4285:35">-&gt;</operator><name pos:start="4285:36" pos:end="4285:40">dflag</name></name> <operator pos:start="4285:42" pos:end="4285:42">+</operator> <name pos:start="4285:44" pos:end="4285:55"><name pos:start="4285:44" pos:end="4285:44">s</name><operator pos:start="4285:45" pos:end="4285:46">-&gt;</operator><name pos:start="4285:47" pos:end="4285:55">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4287:13" pos:end="4287:40"><expr pos:start="4287:13" pos:end="4287:39"><call pos:start="4287:13" pos:end="4287:39"><name pos:start="4287:13" pos:end="4287:33">gen_op_movl_seg_T0_vm</name><argument_list pos:start="4287:34" pos:end="4287:39">(<argument pos:start="4287:35" pos:end="4287:38"><expr pos:start="4287:35" pos:end="4287:38"><name pos:start="4287:35" pos:end="4287:38">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4289:13" pos:end="4289:34">/* add stack offset */</comment>

            <expr_stmt pos:start="4291:13" pos:end="4291:55"><expr pos:start="4291:13" pos:end="4291:54"><call pos:start="4291:13" pos:end="4291:54"><name pos:start="4291:13" pos:end="4291:28">gen_stack_update</name><argument_list pos:start="4291:29" pos:end="4291:54">(<argument pos:start="4291:30" pos:end="4291:30"><expr pos:start="4291:30" pos:end="4291:30"><name pos:start="4291:30" pos:end="4291:30">s</name></expr></argument>, <argument pos:start="4291:33" pos:end="4291:53"><expr pos:start="4291:33" pos:end="4291:53"><name pos:start="4291:33" pos:end="4291:35">val</name> <operator pos:start="4291:37" pos:end="4291:37">+</operator> <operator pos:start="4291:39" pos:end="4291:39">(</operator><literal type="number" pos:start="4291:40" pos:end="4291:40">4</literal> <operator pos:start="4291:42" pos:end="4291:43">&lt;&lt;</operator> <name pos:start="4291:45" pos:end="4291:52"><name pos:start="4291:45" pos:end="4291:45">s</name><operator pos:start="4291:46" pos:end="4291:47">-&gt;</operator><name pos:start="4291:48" pos:end="4291:52">dflag</name></name><operator pos:start="4291:53" pos:end="4291:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4295:9" pos:end="4295:19"><expr pos:start="4295:9" pos:end="4295:18"><call pos:start="4295:9" pos:end="4295:18"><name pos:start="4295:9" pos:end="4295:15">gen_eob</name><argument_list pos:start="4295:16" pos:end="4295:18">(<argument pos:start="4295:17" pos:end="4295:17"><expr pos:start="4295:17" pos:end="4295:17"><name pos:start="4295:17" pos:end="4295:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4297:9" pos:end="4297:14">break;</break>

    <case pos:start="4299:5" pos:end="4299:14">case <expr pos:start="4299:10" pos:end="4299:13"><literal type="number" pos:start="4299:10" pos:end="4299:13">0xcb</literal></expr>:</case> <comment type="block" pos:start="4299:16" pos:end="4299:25">/* lret */</comment>

        <expr_stmt pos:start="4301:9" pos:end="4301:16"><expr pos:start="4301:9" pos:end="4301:15"><name pos:start="4301:9" pos:end="4301:11">val</name> <operator pos:start="4301:13" pos:end="4301:13">=</operator> <literal type="number" pos:start="4301:15" pos:end="4301:15">0</literal></expr>;</expr_stmt>

        <goto pos:start="4303:9" pos:end="4303:21">goto <name pos:start="4303:14" pos:end="4303:20">do_lret</name>;</goto>

    <case pos:start="4305:5" pos:end="4305:14">case <expr pos:start="4305:10" pos:end="4305:13"><literal type="number" pos:start="4305:10" pos:end="4305:13">0xcf</literal></expr>:</case> <comment type="block" pos:start="4305:16" pos:end="4305:25">/* iret */</comment>

        <expr_stmt pos:start="4307:9" pos:end="4307:60"><expr pos:start="4307:9" pos:end="4307:59"><call pos:start="4307:9" pos:end="4307:59"><name pos:start="4307:9" pos:end="4307:31">gen_svm_check_intercept</name><argument_list pos:start="4307:32" pos:end="4307:59">(<argument pos:start="4307:33" pos:end="4307:33"><expr pos:start="4307:33" pos:end="4307:33"><name pos:start="4307:33" pos:end="4307:33">s</name></expr></argument>, <argument pos:start="4307:36" pos:end="4307:43"><expr pos:start="4307:36" pos:end="4307:43"><name pos:start="4307:36" pos:end="4307:43">pc_start</name></expr></argument>, <argument pos:start="4307:46" pos:end="4307:58"><expr pos:start="4307:46" pos:end="4307:58"><name pos:start="4307:46" pos:end="4307:58">SVM_EXIT_IRET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4309:9" pos:end="4345:9"><if pos:start="4309:9" pos:end="4317:9">if <condition pos:start="4309:12" pos:end="4309:19">(<expr pos:start="4309:13" pos:end="4309:18"><operator pos:start="4309:13" pos:end="4309:13">!</operator><name pos:start="4309:14" pos:end="4309:18"><name pos:start="4309:14" pos:end="4309:14">s</name><operator pos:start="4309:15" pos:end="4309:16">-&gt;</operator><name pos:start="4309:17" pos:end="4309:18">pe</name></name></expr>)</condition> <block pos:start="4309:21" pos:end="4317:9">{<block_content pos:start="4313:13" pos:end="4315:36">

            <comment type="block" pos:start="4311:13" pos:end="4311:27">/* real mode */</comment>

            <expr_stmt pos:start="4313:13" pos:end="4313:58"><expr pos:start="4313:13" pos:end="4313:57"><call pos:start="4313:13" pos:end="4313:57"><name pos:start="4313:13" pos:end="4313:32">gen_helper_iret_real</name><argument_list pos:start="4313:33" pos:end="4313:57">(<argument pos:start="4313:34" pos:end="4313:56"><expr pos:start="4313:34" pos:end="4313:56"><call pos:start="4313:34" pos:end="4313:56"><name pos:start="4313:34" pos:end="4313:46">tcg_const_i32</name><argument_list pos:start="4313:47" pos:end="4313:56">(<argument pos:start="4313:48" pos:end="4313:55"><expr pos:start="4313:48" pos:end="4313:55"><name pos:start="4313:48" pos:end="4313:55"><name pos:start="4313:48" pos:end="4313:48">s</name><operator pos:start="4313:49" pos:end="4313:50">-&gt;</operator><name pos:start="4313:51" pos:end="4313:55">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4315:13" pos:end="4315:36"><expr pos:start="4315:13" pos:end="4315:35"><name pos:start="4315:13" pos:end="4315:20"><name pos:start="4315:13" pos:end="4315:13">s</name><operator pos:start="4315:14" pos:end="4315:15">-&gt;</operator><name pos:start="4315:16" pos:end="4315:20">cc_op</name></name> <operator pos:start="4315:22" pos:end="4315:22">=</operator> <name pos:start="4315:24" pos:end="4315:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="4317:11" pos:end="4331:9">else if <condition pos:start="4317:19" pos:end="4317:27">(<expr pos:start="4317:20" pos:end="4317:26"><name pos:start="4317:20" pos:end="4317:26"><name pos:start="4317:20" pos:end="4317:20">s</name><operator pos:start="4317:21" pos:end="4317:22">-&gt;</operator><name pos:start="4317:23" pos:end="4317:26">vm86</name></name></expr>)</condition> <block pos:start="4317:29" pos:end="4331:9">{<block_content pos:start="4319:13" pos:end="4329:13">

            <if_stmt pos:start="4319:13" pos:end="4329:13"><if pos:start="4319:13" pos:end="4323:13">if <condition pos:start="4319:16" pos:end="4319:29">(<expr pos:start="4319:17" pos:end="4319:28"><name pos:start="4319:17" pos:end="4319:23"><name pos:start="4319:17" pos:end="4319:17">s</name><operator pos:start="4319:18" pos:end="4319:19">-&gt;</operator><name pos:start="4319:20" pos:end="4319:23">iopl</name></name> <operator pos:start="4319:25" pos:end="4319:26">!=</operator> <literal type="number" pos:start="4319:28" pos:end="4319:28">3</literal></expr>)</condition> <block pos:start="4319:31" pos:end="4323:13">{<block_content pos:start="4321:17" pos:end="4321:68">

                <expr_stmt pos:start="4321:17" pos:end="4321:68"><expr pos:start="4321:17" pos:end="4321:67"><call pos:start="4321:17" pos:end="4321:67"><name pos:start="4321:17" pos:end="4321:29">gen_exception</name><argument_list pos:start="4321:30" pos:end="4321:67">(<argument pos:start="4321:31" pos:end="4321:31"><expr pos:start="4321:31" pos:end="4321:31"><name pos:start="4321:31" pos:end="4321:31">s</name></expr></argument>, <argument pos:start="4321:34" pos:end="4321:43"><expr pos:start="4321:34" pos:end="4321:43"><name pos:start="4321:34" pos:end="4321:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4321:46" pos:end="4321:66"><expr pos:start="4321:46" pos:end="4321:66"><name pos:start="4321:46" pos:end="4321:53">pc_start</name> <operator pos:start="4321:55" pos:end="4321:55">-</operator> <name pos:start="4321:57" pos:end="4321:66"><name pos:start="4321:57" pos:end="4321:57">s</name><operator pos:start="4321:58" pos:end="4321:59">-&gt;</operator><name pos:start="4321:60" pos:end="4321:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4323:15" pos:end="4329:13">else <block pos:start="4323:20" pos:end="4329:13">{<block_content pos:start="4325:17" pos:end="4327:40">

                <expr_stmt pos:start="4325:17" pos:end="4325:62"><expr pos:start="4325:17" pos:end="4325:61"><call pos:start="4325:17" pos:end="4325:61"><name pos:start="4325:17" pos:end="4325:36">gen_helper_iret_real</name><argument_list pos:start="4325:37" pos:end="4325:61">(<argument pos:start="4325:38" pos:end="4325:60"><expr pos:start="4325:38" pos:end="4325:60"><call pos:start="4325:38" pos:end="4325:60"><name pos:start="4325:38" pos:end="4325:50">tcg_const_i32</name><argument_list pos:start="4325:51" pos:end="4325:60">(<argument pos:start="4325:52" pos:end="4325:59"><expr pos:start="4325:52" pos:end="4325:59"><name pos:start="4325:52" pos:end="4325:59"><name pos:start="4325:52" pos:end="4325:52">s</name><operator pos:start="4325:53" pos:end="4325:54">-&gt;</operator><name pos:start="4325:55" pos:end="4325:59">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4327:17" pos:end="4327:40"><expr pos:start="4327:17" pos:end="4327:39"><name pos:start="4327:17" pos:end="4327:24"><name pos:start="4327:17" pos:end="4327:17">s</name><operator pos:start="4327:18" pos:end="4327:19">-&gt;</operator><name pos:start="4327:20" pos:end="4327:24">cc_op</name></name> <operator pos:start="4327:26" pos:end="4327:26">=</operator> <name pos:start="4327:28" pos:end="4327:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="4331:11" pos:end="4345:9">else <block pos:start="4331:16" pos:end="4345:9">{<block_content pos:start="4333:13" pos:end="4343:36">

            <if_stmt pos:start="4333:13" pos:end="4335:43"><if pos:start="4333:13" pos:end="4335:43">if <condition pos:start="4333:16" pos:end="4333:42">(<expr pos:start="4333:17" pos:end="4333:41"><name pos:start="4333:17" pos:end="4333:24"><name pos:start="4333:17" pos:end="4333:17">s</name><operator pos:start="4333:18" pos:end="4333:19">-&gt;</operator><name pos:start="4333:20" pos:end="4333:24">cc_op</name></name> <operator pos:start="4333:26" pos:end="4333:27">!=</operator> <name pos:start="4333:29" pos:end="4333:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4335:17" pos:end="4335:43"><block_content pos:start="4335:17" pos:end="4335:43">

                <expr_stmt pos:start="4335:17" pos:end="4335:43"><expr pos:start="4335:17" pos:end="4335:42"><call pos:start="4335:17" pos:end="4335:42"><name pos:start="4335:17" pos:end="4335:32">gen_op_set_cc_op</name><argument_list pos:start="4335:33" pos:end="4335:42">(<argument pos:start="4335:34" pos:end="4335:41"><expr pos:start="4335:34" pos:end="4335:41"><name pos:start="4335:34" pos:end="4335:41"><name pos:start="4335:34" pos:end="4335:34">s</name><operator pos:start="4335:35" pos:end="4335:36">-&gt;</operator><name pos:start="4335:37" pos:end="4335:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4337:13" pos:end="4337:46"><expr pos:start="4337:13" pos:end="4337:45"><call pos:start="4337:13" pos:end="4337:45"><name pos:start="4337:13" pos:end="4337:22">gen_jmp_im</name><argument_list pos:start="4337:23" pos:end="4337:45">(<argument pos:start="4337:24" pos:end="4337:44"><expr pos:start="4337:24" pos:end="4337:44"><name pos:start="4337:24" pos:end="4337:31">pc_start</name> <operator pos:start="4337:33" pos:end="4337:33">-</operator> <name pos:start="4337:35" pos:end="4337:44"><name pos:start="4337:35" pos:end="4337:35">s</name><operator pos:start="4337:36" pos:end="4337:37">-&gt;</operator><name pos:start="4337:38" pos:end="4337:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4339:13" pos:end="4341:73"><expr pos:start="4339:13" pos:end="4341:72"><call pos:start="4339:13" pos:end="4341:72"><name pos:start="4339:13" pos:end="4339:37">gen_helper_iret_protected</name><argument_list pos:start="4339:38" pos:end="4341:72">(<argument pos:start="4339:39" pos:end="4339:61"><expr pos:start="4339:39" pos:end="4339:61"><call pos:start="4339:39" pos:end="4339:61"><name pos:start="4339:39" pos:end="4339:51">tcg_const_i32</name><argument_list pos:start="4339:52" pos:end="4339:61">(<argument pos:start="4339:53" pos:end="4339:60"><expr pos:start="4339:53" pos:end="4339:60"><name pos:start="4339:53" pos:end="4339:60"><name pos:start="4339:53" pos:end="4339:53">s</name><operator pos:start="4339:54" pos:end="4339:55">-&gt;</operator><name pos:start="4339:56" pos:end="4339:60">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>, 

                                      <argument pos:start="4341:39" pos:end="4341:71"><expr pos:start="4341:39" pos:end="4341:71"><call pos:start="4341:39" pos:end="4341:71"><name pos:start="4341:39" pos:end="4341:51">tcg_const_i32</name><argument_list pos:start="4341:52" pos:end="4341:71">(<argument pos:start="4341:53" pos:end="4341:70"><expr pos:start="4341:53" pos:end="4341:70"><name pos:start="4341:53" pos:end="4341:57"><name pos:start="4341:53" pos:end="4341:53">s</name><operator pos:start="4341:54" pos:end="4341:55">-&gt;</operator><name pos:start="4341:56" pos:end="4341:57">pc</name></name> <operator pos:start="4341:59" pos:end="4341:59">-</operator> <name pos:start="4341:61" pos:end="4341:70"><name pos:start="4341:61" pos:end="4341:61">s</name><operator pos:start="4341:62" pos:end="4341:63">-&gt;</operator><name pos:start="4341:64" pos:end="4341:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4343:13" pos:end="4343:36"><expr pos:start="4343:13" pos:end="4343:35"><name pos:start="4343:13" pos:end="4343:20"><name pos:start="4343:13" pos:end="4343:13">s</name><operator pos:start="4343:14" pos:end="4343:15">-&gt;</operator><name pos:start="4343:16" pos:end="4343:20">cc_op</name></name> <operator pos:start="4343:22" pos:end="4343:22">=</operator> <name pos:start="4343:24" pos:end="4343:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4347:9" pos:end="4347:19"><expr pos:start="4347:9" pos:end="4347:18"><call pos:start="4347:9" pos:end="4347:18"><name pos:start="4347:9" pos:end="4347:15">gen_eob</name><argument_list pos:start="4347:16" pos:end="4347:18">(<argument pos:start="4347:17" pos:end="4347:17"><expr pos:start="4347:17" pos:end="4347:17"><name pos:start="4347:17" pos:end="4347:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4349:9" pos:end="4349:14">break;</break>

    <case pos:start="4351:5" pos:end="4351:14">case <expr pos:start="4351:10" pos:end="4351:13"><literal type="number" pos:start="4351:10" pos:end="4351:13">0xe8</literal></expr>:</case> <comment type="block" pos:start="4351:16" pos:end="4351:28">/* call im */</comment>

        <block pos:start="4353:9" pos:end="4377:9">{<block_content pos:start="4355:13" pos:end="4375:29">

            <if_stmt pos:start="4355:13" pos:end="4361:53"><if pos:start="4355:13" pos:end="4357:53">if <condition pos:start="4355:16" pos:end="4355:22">(<expr pos:start="4355:17" pos:end="4355:21"><name pos:start="4355:17" pos:end="4355:21">dflag</name></expr>)</condition><block type="pseudo" pos:start="4357:17" pos:end="4357:53"><block_content pos:start="4357:17" pos:end="4357:53">

                <expr_stmt pos:start="4357:17" pos:end="4357:53"><expr pos:start="4357:17" pos:end="4357:52"><name pos:start="4357:17" pos:end="4357:20">tval</name> <operator pos:start="4357:22" pos:end="4357:22">=</operator> <operator pos:start="4357:24" pos:end="4357:24">(</operator><name pos:start="4357:25" pos:end="4357:31">int32_t</name><operator pos:start="4357:32" pos:end="4357:32">)</operator><call pos:start="4357:33" pos:end="4357:52"><name pos:start="4357:33" pos:end="4357:40">insn_get</name><argument_list pos:start="4357:41" pos:end="4357:52">(<argument pos:start="4357:42" pos:end="4357:42"><expr pos:start="4357:42" pos:end="4357:42"><name pos:start="4357:42" pos:end="4357:42">s</name></expr></argument>, <argument pos:start="4357:45" pos:end="4357:51"><expr pos:start="4357:45" pos:end="4357:51"><name pos:start="4357:45" pos:end="4357:51">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="4359:13" pos:end="4361:53">else<block type="pseudo" pos:start="4361:17" pos:end="4361:53"><block_content pos:start="4361:17" pos:end="4361:53">

                <expr_stmt pos:start="4361:17" pos:end="4361:53"><expr pos:start="4361:17" pos:end="4361:52"><name pos:start="4361:17" pos:end="4361:20">tval</name> <operator pos:start="4361:22" pos:end="4361:22">=</operator> <operator pos:start="4361:24" pos:end="4361:24">(</operator><name pos:start="4361:25" pos:end="4361:31">int16_t</name><operator pos:start="4361:32" pos:end="4361:32">)</operator><call pos:start="4361:33" pos:end="4361:52"><name pos:start="4361:33" pos:end="4361:40">insn_get</name><argument_list pos:start="4361:41" pos:end="4361:52">(<argument pos:start="4361:42" pos:end="4361:42"><expr pos:start="4361:42" pos:end="4361:42"><name pos:start="4361:42" pos:end="4361:42">s</name></expr></argument>, <argument pos:start="4361:45" pos:end="4361:51"><expr pos:start="4361:45" pos:end="4361:51"><name pos:start="4361:45" pos:end="4361:51">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="4363:13" pos:end="4363:42"><expr pos:start="4363:13" pos:end="4363:41"><name pos:start="4363:13" pos:end="4363:20">next_eip</name> <operator pos:start="4363:22" pos:end="4363:22">=</operator> <name pos:start="4363:24" pos:end="4363:28"><name pos:start="4363:24" pos:end="4363:24">s</name><operator pos:start="4363:25" pos:end="4363:26">-&gt;</operator><name pos:start="4363:27" pos:end="4363:28">pc</name></name> <operator pos:start="4363:30" pos:end="4363:30">-</operator> <name pos:start="4363:32" pos:end="4363:41"><name pos:start="4363:32" pos:end="4363:32">s</name><operator pos:start="4363:33" pos:end="4363:34">-&gt;</operator><name pos:start="4363:35" pos:end="4363:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="4365:13" pos:end="4365:29"><expr pos:start="4365:13" pos:end="4365:28"><name pos:start="4365:13" pos:end="4365:16">tval</name> <operator pos:start="4365:18" pos:end="4365:19">+=</operator> <name pos:start="4365:21" pos:end="4365:28">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="4367:13" pos:end="4369:31"><if pos:start="4367:13" pos:end="4369:31">if <condition pos:start="4367:16" pos:end="4367:30">(<expr pos:start="4367:17" pos:end="4367:29"><name pos:start="4367:17" pos:end="4367:24"><name pos:start="4367:17" pos:end="4367:17">s</name><operator pos:start="4367:18" pos:end="4367:19">-&gt;</operator><name pos:start="4367:20" pos:end="4367:24">dflag</name></name> <operator pos:start="4367:26" pos:end="4367:27">==</operator> <literal type="number" pos:start="4367:29" pos:end="4367:29">0</literal></expr>)</condition><block type="pseudo" pos:start="4369:17" pos:end="4369:31"><block_content pos:start="4369:17" pos:end="4369:31">

                <expr_stmt pos:start="4369:17" pos:end="4369:31"><expr pos:start="4369:17" pos:end="4369:30"><name pos:start="4369:17" pos:end="4369:20">tval</name> <operator pos:start="4369:22" pos:end="4369:23">&amp;=</operator> <literal type="number" pos:start="4369:25" pos:end="4369:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4371:13" pos:end="4371:38"><expr pos:start="4371:13" pos:end="4371:37"><call pos:start="4371:13" pos:end="4371:37"><name pos:start="4371:13" pos:end="4371:27">gen_movtl_T0_im</name><argument_list pos:start="4371:28" pos:end="4371:37">(<argument pos:start="4371:29" pos:end="4371:36"><expr pos:start="4371:29" pos:end="4371:36"><name pos:start="4371:29" pos:end="4371:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4373:13" pos:end="4373:27"><expr pos:start="4373:13" pos:end="4373:26"><call pos:start="4373:13" pos:end="4373:26"><name pos:start="4373:13" pos:end="4373:23">gen_push_T0</name><argument_list pos:start="4373:24" pos:end="4373:26">(<argument pos:start="4373:25" pos:end="4373:25"><expr pos:start="4373:25" pos:end="4373:25"><name pos:start="4373:25" pos:end="4373:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4375:13" pos:end="4375:29"><expr pos:start="4375:13" pos:end="4375:28"><call pos:start="4375:13" pos:end="4375:28"><name pos:start="4375:13" pos:end="4375:19">gen_jmp</name><argument_list pos:start="4375:20" pos:end="4375:28">(<argument pos:start="4375:21" pos:end="4375:21"><expr pos:start="4375:21" pos:end="4375:21"><name pos:start="4375:21" pos:end="4375:21">s</name></expr></argument>, <argument pos:start="4375:24" pos:end="4375:27"><expr pos:start="4375:24" pos:end="4375:27"><name pos:start="4375:24" pos:end="4375:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4379:9" pos:end="4379:14">break;</break>

    <case pos:start="4381:5" pos:end="4381:14">case <expr pos:start="4381:10" pos:end="4381:13"><literal type="number" pos:start="4381:10" pos:end="4381:13">0x9a</literal></expr>:</case> <comment type="block" pos:start="4381:16" pos:end="4381:29">/* lcall im */</comment>

        <block pos:start="4383:9" pos:end="4405:9">{<block_content pos:start="4385:13" pos:end="4403:39">

            <decl_stmt pos:start="4385:13" pos:end="4385:42"><decl pos:start="4385:13" pos:end="4385:33"><type pos:start="4385:13" pos:end="4385:24"><name pos:start="4385:13" pos:end="4385:20">unsigned</name> <name pos:start="4385:22" pos:end="4385:24">int</name></type> <name pos:start="4385:26" pos:end="4385:33">selector</name></decl>, <decl pos:start="4385:36" pos:end="4385:41"><type ref="prev" pos:start="4385:13" pos:end="4385:24"/><name pos:start="4385:36" pos:end="4385:41">offset</name></decl>;</decl_stmt>



            <if_stmt pos:start="4389:13" pos:end="4391:32"><if pos:start="4389:13" pos:end="4391:32">if <condition pos:start="4389:16" pos:end="4389:26">(<expr pos:start="4389:17" pos:end="4389:25"><call pos:start="4389:17" pos:end="4389:25"><name pos:start="4389:17" pos:end="4389:22">CODE64</name><argument_list pos:start="4389:23" pos:end="4389:25">(<argument pos:start="4389:24" pos:end="4389:24"><expr pos:start="4389:24" pos:end="4389:24"><name pos:start="4389:24" pos:end="4389:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4391:17" pos:end="4391:32"><block_content pos:start="4391:17" pos:end="4391:32">

                <goto pos:start="4391:17" pos:end="4391:32">goto <name pos:start="4391:22" pos:end="4391:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4393:13" pos:end="4393:43"><expr pos:start="4393:13" pos:end="4393:42"><name pos:start="4393:13" pos:end="4393:14">ot</name> <operator pos:start="4393:16" pos:end="4393:16">=</operator> <ternary pos:start="4393:18" pos:end="4393:42"><condition pos:start="4393:18" pos:end="4393:24"><expr pos:start="4393:18" pos:end="4393:22"><name pos:start="4393:18" pos:end="4393:22">dflag</name></expr> ?</condition><then pos:start="4393:26" pos:end="4393:32"> <expr pos:start="4393:26" pos:end="4393:32"><name pos:start="4393:26" pos:end="4393:32">OT_LONG</name></expr> </then><else pos:start="4393:34" pos:end="4393:42">: <expr pos:start="4393:36" pos:end="4393:42"><name pos:start="4393:36" pos:end="4393:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="4395:13" pos:end="4395:37"><expr pos:start="4395:13" pos:end="4395:36"><name pos:start="4395:13" pos:end="4395:18">offset</name> <operator pos:start="4395:20" pos:end="4395:20">=</operator> <call pos:start="4395:22" pos:end="4395:36"><name pos:start="4395:22" pos:end="4395:29">insn_get</name><argument_list pos:start="4395:30" pos:end="4395:36">(<argument pos:start="4395:31" pos:end="4395:31"><expr pos:start="4395:31" pos:end="4395:31"><name pos:start="4395:31" pos:end="4395:31">s</name></expr></argument>, <argument pos:start="4395:34" pos:end="4395:35"><expr pos:start="4395:34" pos:end="4395:35"><name pos:start="4395:34" pos:end="4395:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4397:13" pos:end="4397:44"><expr pos:start="4397:13" pos:end="4397:43"><name pos:start="4397:13" pos:end="4397:20">selector</name> <operator pos:start="4397:22" pos:end="4397:22">=</operator> <call pos:start="4397:24" pos:end="4397:43"><name pos:start="4397:24" pos:end="4397:31">insn_get</name><argument_list pos:start="4397:32" pos:end="4397:43">(<argument pos:start="4397:33" pos:end="4397:33"><expr pos:start="4397:33" pos:end="4397:33"><name pos:start="4397:33" pos:end="4397:33">s</name></expr></argument>, <argument pos:start="4397:36" pos:end="4397:42"><expr pos:start="4397:36" pos:end="4397:42"><name pos:start="4397:36" pos:end="4397:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4401:13" pos:end="4401:40"><expr pos:start="4401:13" pos:end="4401:39"><call pos:start="4401:13" pos:end="4401:39"><name pos:start="4401:13" pos:end="4401:29">gen_op_movl_T0_im</name><argument_list pos:start="4401:30" pos:end="4401:39">(<argument pos:start="4401:31" pos:end="4401:38"><expr pos:start="4401:31" pos:end="4401:38"><name pos:start="4401:31" pos:end="4401:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4403:13" pos:end="4403:39"><expr pos:start="4403:13" pos:end="4403:38"><call pos:start="4403:13" pos:end="4403:38"><name pos:start="4403:13" pos:end="4403:30">gen_op_movl_T1_imu</name><argument_list pos:start="4403:31" pos:end="4403:38">(<argument pos:start="4403:32" pos:end="4403:37"><expr pos:start="4403:32" pos:end="4403:37"><name pos:start="4403:32" pos:end="4403:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="4407:9" pos:end="4407:22">goto <name pos:start="4407:14" pos:end="4407:21">do_lcall</name>;</goto>

    <case pos:start="4409:5" pos:end="4409:14">case <expr pos:start="4409:10" pos:end="4409:13"><literal type="number" pos:start="4409:10" pos:end="4409:13">0xe9</literal></expr>:</case> <comment type="block" pos:start="4409:16" pos:end="4409:27">/* jmp im */</comment>

        <if_stmt pos:start="4411:9" pos:end="4417:49"><if pos:start="4411:9" pos:end="4413:49">if <condition pos:start="4411:12" pos:end="4411:18">(<expr pos:start="4411:13" pos:end="4411:17"><name pos:start="4411:13" pos:end="4411:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="4413:13" pos:end="4413:49"><block_content pos:start="4413:13" pos:end="4413:49">

            <expr_stmt pos:start="4413:13" pos:end="4413:49"><expr pos:start="4413:13" pos:end="4413:48"><name pos:start="4413:13" pos:end="4413:16">tval</name> <operator pos:start="4413:18" pos:end="4413:18">=</operator> <operator pos:start="4413:20" pos:end="4413:20">(</operator><name pos:start="4413:21" pos:end="4413:27">int32_t</name><operator pos:start="4413:28" pos:end="4413:28">)</operator><call pos:start="4413:29" pos:end="4413:48"><name pos:start="4413:29" pos:end="4413:36">insn_get</name><argument_list pos:start="4413:37" pos:end="4413:48">(<argument pos:start="4413:38" pos:end="4413:38"><expr pos:start="4413:38" pos:end="4413:38"><name pos:start="4413:38" pos:end="4413:38">s</name></expr></argument>, <argument pos:start="4413:41" pos:end="4413:47"><expr pos:start="4413:41" pos:end="4413:47"><name pos:start="4413:41" pos:end="4413:47">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4415:9" pos:end="4417:49">else<block type="pseudo" pos:start="4417:13" pos:end="4417:49"><block_content pos:start="4417:13" pos:end="4417:49">

            <expr_stmt pos:start="4417:13" pos:end="4417:49"><expr pos:start="4417:13" pos:end="4417:48"><name pos:start="4417:13" pos:end="4417:16">tval</name> <operator pos:start="4417:18" pos:end="4417:18">=</operator> <operator pos:start="4417:20" pos:end="4417:20">(</operator><name pos:start="4417:21" pos:end="4417:27">int16_t</name><operator pos:start="4417:28" pos:end="4417:28">)</operator><call pos:start="4417:29" pos:end="4417:48"><name pos:start="4417:29" pos:end="4417:36">insn_get</name><argument_list pos:start="4417:37" pos:end="4417:48">(<argument pos:start="4417:38" pos:end="4417:38"><expr pos:start="4417:38" pos:end="4417:38"><name pos:start="4417:38" pos:end="4417:38">s</name></expr></argument>, <argument pos:start="4417:41" pos:end="4417:47"><expr pos:start="4417:41" pos:end="4417:47"><name pos:start="4417:41" pos:end="4417:47">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4419:9" pos:end="4419:35"><expr pos:start="4419:9" pos:end="4419:34"><name pos:start="4419:9" pos:end="4419:12">tval</name> <operator pos:start="4419:14" pos:end="4419:15">+=</operator> <name pos:start="4419:17" pos:end="4419:21"><name pos:start="4419:17" pos:end="4419:17">s</name><operator pos:start="4419:18" pos:end="4419:19">-&gt;</operator><name pos:start="4419:20" pos:end="4419:21">pc</name></name> <operator pos:start="4419:23" pos:end="4419:23">-</operator> <name pos:start="4419:25" pos:end="4419:34"><name pos:start="4419:25" pos:end="4419:25">s</name><operator pos:start="4419:26" pos:end="4419:27">-&gt;</operator><name pos:start="4419:28" pos:end="4419:34">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="4421:9" pos:end="4423:27"><if pos:start="4421:9" pos:end="4423:27">if <condition pos:start="4421:12" pos:end="4421:26">(<expr pos:start="4421:13" pos:end="4421:25"><name pos:start="4421:13" pos:end="4421:20"><name pos:start="4421:13" pos:end="4421:13">s</name><operator pos:start="4421:14" pos:end="4421:15">-&gt;</operator><name pos:start="4421:16" pos:end="4421:20">dflag</name></name> <operator pos:start="4421:22" pos:end="4421:23">==</operator> <literal type="number" pos:start="4421:25" pos:end="4421:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4423:13" pos:end="4423:27"><block_content pos:start="4423:13" pos:end="4423:27">

            <expr_stmt pos:start="4423:13" pos:end="4423:27"><expr pos:start="4423:13" pos:end="4423:26"><name pos:start="4423:13" pos:end="4423:16">tval</name> <operator pos:start="4423:18" pos:end="4423:19">&amp;=</operator> <literal type="number" pos:start="4423:21" pos:end="4423:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="4427:9" pos:end="4427:25"><expr pos:start="4427:9" pos:end="4427:24"><call pos:start="4427:9" pos:end="4427:24"><name pos:start="4427:9" pos:end="4427:15">gen_jmp</name><argument_list pos:start="4427:16" pos:end="4427:24">(<argument pos:start="4427:17" pos:end="4427:17"><expr pos:start="4427:17" pos:end="4427:17"><name pos:start="4427:17" pos:end="4427:17">s</name></expr></argument>, <argument pos:start="4427:20" pos:end="4427:23"><expr pos:start="4427:20" pos:end="4427:23"><name pos:start="4427:20" pos:end="4427:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4429:9" pos:end="4429:14">break;</break>

    <case pos:start="4431:5" pos:end="4431:14">case <expr pos:start="4431:10" pos:end="4431:13"><literal type="number" pos:start="4431:10" pos:end="4431:13">0xea</literal></expr>:</case> <comment type="block" pos:start="4431:16" pos:end="4431:28">/* ljmp im */</comment>

        <block pos:start="4433:9" pos:end="4455:9">{<block_content pos:start="4435:13" pos:end="4453:39">

            <decl_stmt pos:start="4435:13" pos:end="4435:42"><decl pos:start="4435:13" pos:end="4435:33"><type pos:start="4435:13" pos:end="4435:24"><name pos:start="4435:13" pos:end="4435:20">unsigned</name> <name pos:start="4435:22" pos:end="4435:24">int</name></type> <name pos:start="4435:26" pos:end="4435:33">selector</name></decl>, <decl pos:start="4435:36" pos:end="4435:41"><type ref="prev" pos:start="4435:13" pos:end="4435:24"/><name pos:start="4435:36" pos:end="4435:41">offset</name></decl>;</decl_stmt>



            <if_stmt pos:start="4439:13" pos:end="4441:32"><if pos:start="4439:13" pos:end="4441:32">if <condition pos:start="4439:16" pos:end="4439:26">(<expr pos:start="4439:17" pos:end="4439:25"><call pos:start="4439:17" pos:end="4439:25"><name pos:start="4439:17" pos:end="4439:22">CODE64</name><argument_list pos:start="4439:23" pos:end="4439:25">(<argument pos:start="4439:24" pos:end="4439:24"><expr pos:start="4439:24" pos:end="4439:24"><name pos:start="4439:24" pos:end="4439:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4441:17" pos:end="4441:32"><block_content pos:start="4441:17" pos:end="4441:32">

                <goto pos:start="4441:17" pos:end="4441:32">goto <name pos:start="4441:22" pos:end="4441:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4443:13" pos:end="4443:43"><expr pos:start="4443:13" pos:end="4443:42"><name pos:start="4443:13" pos:end="4443:14">ot</name> <operator pos:start="4443:16" pos:end="4443:16">=</operator> <ternary pos:start="4443:18" pos:end="4443:42"><condition pos:start="4443:18" pos:end="4443:24"><expr pos:start="4443:18" pos:end="4443:22"><name pos:start="4443:18" pos:end="4443:22">dflag</name></expr> ?</condition><then pos:start="4443:26" pos:end="4443:32"> <expr pos:start="4443:26" pos:end="4443:32"><name pos:start="4443:26" pos:end="4443:32">OT_LONG</name></expr> </then><else pos:start="4443:34" pos:end="4443:42">: <expr pos:start="4443:36" pos:end="4443:42"><name pos:start="4443:36" pos:end="4443:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="4445:13" pos:end="4445:37"><expr pos:start="4445:13" pos:end="4445:36"><name pos:start="4445:13" pos:end="4445:18">offset</name> <operator pos:start="4445:20" pos:end="4445:20">=</operator> <call pos:start="4445:22" pos:end="4445:36"><name pos:start="4445:22" pos:end="4445:29">insn_get</name><argument_list pos:start="4445:30" pos:end="4445:36">(<argument pos:start="4445:31" pos:end="4445:31"><expr pos:start="4445:31" pos:end="4445:31"><name pos:start="4445:31" pos:end="4445:31">s</name></expr></argument>, <argument pos:start="4445:34" pos:end="4445:35"><expr pos:start="4445:34" pos:end="4445:35"><name pos:start="4445:34" pos:end="4445:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4447:13" pos:end="4447:44"><expr pos:start="4447:13" pos:end="4447:43"><name pos:start="4447:13" pos:end="4447:20">selector</name> <operator pos:start="4447:22" pos:end="4447:22">=</operator> <call pos:start="4447:24" pos:end="4447:43"><name pos:start="4447:24" pos:end="4447:31">insn_get</name><argument_list pos:start="4447:32" pos:end="4447:43">(<argument pos:start="4447:33" pos:end="4447:33"><expr pos:start="4447:33" pos:end="4447:33"><name pos:start="4447:33" pos:end="4447:33">s</name></expr></argument>, <argument pos:start="4447:36" pos:end="4447:42"><expr pos:start="4447:36" pos:end="4447:42"><name pos:start="4447:36" pos:end="4447:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4451:13" pos:end="4451:40"><expr pos:start="4451:13" pos:end="4451:39"><call pos:start="4451:13" pos:end="4451:39"><name pos:start="4451:13" pos:end="4451:29">gen_op_movl_T0_im</name><argument_list pos:start="4451:30" pos:end="4451:39">(<argument pos:start="4451:31" pos:end="4451:38"><expr pos:start="4451:31" pos:end="4451:38"><name pos:start="4451:31" pos:end="4451:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4453:13" pos:end="4453:39"><expr pos:start="4453:13" pos:end="4453:38"><call pos:start="4453:13" pos:end="4453:38"><name pos:start="4453:13" pos:end="4453:30">gen_op_movl_T1_imu</name><argument_list pos:start="4453:31" pos:end="4453:38">(<argument pos:start="4453:32" pos:end="4453:37"><expr pos:start="4453:32" pos:end="4453:37"><name pos:start="4453:32" pos:end="4453:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="4457:9" pos:end="4457:21">goto <name pos:start="4457:14" pos:end="4457:20">do_ljmp</name>;</goto>

    <case pos:start="4459:5" pos:end="4459:14">case <expr pos:start="4459:10" pos:end="4459:13"><literal type="number" pos:start="4459:10" pos:end="4459:13">0xeb</literal></expr>:</case> <comment type="block" pos:start="4459:16" pos:end="4459:27">/* jmp Jb */</comment>

        <expr_stmt pos:start="4461:9" pos:end="4461:44"><expr pos:start="4461:9" pos:end="4461:43"><name pos:start="4461:9" pos:end="4461:12">tval</name> <operator pos:start="4461:14" pos:end="4461:14">=</operator> <operator pos:start="4461:16" pos:end="4461:16">(</operator><name pos:start="4461:17" pos:end="4461:22">int8_t</name><operator pos:start="4461:23" pos:end="4461:23">)</operator><call pos:start="4461:24" pos:end="4461:43"><name pos:start="4461:24" pos:end="4461:31">insn_get</name><argument_list pos:start="4461:32" pos:end="4461:43">(<argument pos:start="4461:33" pos:end="4461:33"><expr pos:start="4461:33" pos:end="4461:33"><name pos:start="4461:33" pos:end="4461:33">s</name></expr></argument>, <argument pos:start="4461:36" pos:end="4461:42"><expr pos:start="4461:36" pos:end="4461:42"><name pos:start="4461:36" pos:end="4461:42">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4463:9" pos:end="4463:35"><expr pos:start="4463:9" pos:end="4463:34"><name pos:start="4463:9" pos:end="4463:12">tval</name> <operator pos:start="4463:14" pos:end="4463:15">+=</operator> <name pos:start="4463:17" pos:end="4463:21"><name pos:start="4463:17" pos:end="4463:17">s</name><operator pos:start="4463:18" pos:end="4463:19">-&gt;</operator><name pos:start="4463:20" pos:end="4463:21">pc</name></name> <operator pos:start="4463:23" pos:end="4463:23">-</operator> <name pos:start="4463:25" pos:end="4463:34"><name pos:start="4463:25" pos:end="4463:25">s</name><operator pos:start="4463:26" pos:end="4463:27">-&gt;</operator><name pos:start="4463:28" pos:end="4463:34">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="4465:9" pos:end="4467:27"><if pos:start="4465:9" pos:end="4467:27">if <condition pos:start="4465:12" pos:end="4465:26">(<expr pos:start="4465:13" pos:end="4465:25"><name pos:start="4465:13" pos:end="4465:20"><name pos:start="4465:13" pos:end="4465:13">s</name><operator pos:start="4465:14" pos:end="4465:15">-&gt;</operator><name pos:start="4465:16" pos:end="4465:20">dflag</name></name> <operator pos:start="4465:22" pos:end="4465:23">==</operator> <literal type="number" pos:start="4465:25" pos:end="4465:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4467:13" pos:end="4467:27"><block_content pos:start="4467:13" pos:end="4467:27">

            <expr_stmt pos:start="4467:13" pos:end="4467:27"><expr pos:start="4467:13" pos:end="4467:26"><name pos:start="4467:13" pos:end="4467:16">tval</name> <operator pos:start="4467:18" pos:end="4467:19">&amp;=</operator> <literal type="number" pos:start="4467:21" pos:end="4467:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4469:9" pos:end="4469:25"><expr pos:start="4469:9" pos:end="4469:24"><call pos:start="4469:9" pos:end="4469:24"><name pos:start="4469:9" pos:end="4469:15">gen_jmp</name><argument_list pos:start="4469:16" pos:end="4469:24">(<argument pos:start="4469:17" pos:end="4469:17"><expr pos:start="4469:17" pos:end="4469:17"><name pos:start="4469:17" pos:end="4469:17">s</name></expr></argument>, <argument pos:start="4469:20" pos:end="4469:23"><expr pos:start="4469:20" pos:end="4469:23"><name pos:start="4469:20" pos:end="4469:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4471:9" pos:end="4471:14">break;</break>

    <case pos:start="4473:5" pos:end="4473:23">case <expr pos:start="4473:10" pos:end="4473:22"><literal type="number" pos:start="4473:10" pos:end="4473:13">0x70</literal> <operator pos:start="4473:15" pos:end="4473:17">...</operator> <literal type="number" pos:start="4473:19" pos:end="4473:22">0x7f</literal></expr>:</case> <comment type="block" pos:start="4473:25" pos:end="4473:36">/* jcc Jb */</comment>

        <expr_stmt pos:start="4475:9" pos:end="4475:44"><expr pos:start="4475:9" pos:end="4475:43"><name pos:start="4475:9" pos:end="4475:12">tval</name> <operator pos:start="4475:14" pos:end="4475:14">=</operator> <operator pos:start="4475:16" pos:end="4475:16">(</operator><name pos:start="4475:17" pos:end="4475:22">int8_t</name><operator pos:start="4475:23" pos:end="4475:23">)</operator><call pos:start="4475:24" pos:end="4475:43"><name pos:start="4475:24" pos:end="4475:31">insn_get</name><argument_list pos:start="4475:32" pos:end="4475:43">(<argument pos:start="4475:33" pos:end="4475:33"><expr pos:start="4475:33" pos:end="4475:33"><name pos:start="4475:33" pos:end="4475:33">s</name></expr></argument>, <argument pos:start="4475:36" pos:end="4475:42"><expr pos:start="4475:36" pos:end="4475:42"><name pos:start="4475:36" pos:end="4475:42">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="4477:9" pos:end="4477:20">goto <name pos:start="4477:14" pos:end="4477:19">do_jcc</name>;</goto>

    <case pos:start="4479:5" pos:end="4479:25">case <expr pos:start="4479:10" pos:end="4479:24"><literal type="number" pos:start="4479:10" pos:end="4479:14">0x180</literal> <operator pos:start="4479:16" pos:end="4479:18">...</operator> <literal type="number" pos:start="4479:20" pos:end="4479:24">0x18f</literal></expr>:</case> <comment type="block" pos:start="4479:27" pos:end="4479:38">/* jcc Jv */</comment>

        <if_stmt pos:start="4481:9" pos:end="4489:9"><if pos:start="4481:9" pos:end="4485:9">if <condition pos:start="4481:12" pos:end="4481:18">(<expr pos:start="4481:13" pos:end="4481:17"><name pos:start="4481:13" pos:end="4481:17">dflag</name></expr>)</condition> <block pos:start="4481:20" pos:end="4485:9">{<block_content pos:start="4483:13" pos:end="4483:49">

            <expr_stmt pos:start="4483:13" pos:end="4483:49"><expr pos:start="4483:13" pos:end="4483:48"><name pos:start="4483:13" pos:end="4483:16">tval</name> <operator pos:start="4483:18" pos:end="4483:18">=</operator> <operator pos:start="4483:20" pos:end="4483:20">(</operator><name pos:start="4483:21" pos:end="4483:27">int32_t</name><operator pos:start="4483:28" pos:end="4483:28">)</operator><call pos:start="4483:29" pos:end="4483:48"><name pos:start="4483:29" pos:end="4483:36">insn_get</name><argument_list pos:start="4483:37" pos:end="4483:48">(<argument pos:start="4483:38" pos:end="4483:38"><expr pos:start="4483:38" pos:end="4483:38"><name pos:start="4483:38" pos:end="4483:38">s</name></expr></argument>, <argument pos:start="4483:41" pos:end="4483:47"><expr pos:start="4483:41" pos:end="4483:47"><name pos:start="4483:41" pos:end="4483:47">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4485:11" pos:end="4489:9">else <block pos:start="4485:16" pos:end="4489:9">{<block_content pos:start="4487:13" pos:end="4487:49">

            <expr_stmt pos:start="4487:13" pos:end="4487:49"><expr pos:start="4487:13" pos:end="4487:48"><name pos:start="4487:13" pos:end="4487:16">tval</name> <operator pos:start="4487:18" pos:end="4487:18">=</operator> <operator pos:start="4487:20" pos:end="4487:20">(</operator><name pos:start="4487:21" pos:end="4487:27">int16_t</name><operator pos:start="4487:28" pos:end="4487:28">)</operator><call pos:start="4487:29" pos:end="4487:48"><name pos:start="4487:29" pos:end="4487:36">insn_get</name><argument_list pos:start="4487:37" pos:end="4487:48">(<argument pos:start="4487:38" pos:end="4487:38"><expr pos:start="4487:38" pos:end="4487:38"><name pos:start="4487:38" pos:end="4487:38">s</name></expr></argument>, <argument pos:start="4487:41" pos:end="4487:47"><expr pos:start="4487:41" pos:end="4487:47"><name pos:start="4487:41" pos:end="4487:47">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <label pos:start="4491:5" pos:end="4491:11"><name pos:start="4491:5" pos:end="4491:10">do_jcc</name>:</label>

        <expr_stmt pos:start="4493:9" pos:end="4493:38"><expr pos:start="4493:9" pos:end="4493:37"><name pos:start="4493:9" pos:end="4493:16">next_eip</name> <operator pos:start="4493:18" pos:end="4493:18">=</operator> <name pos:start="4493:20" pos:end="4493:24"><name pos:start="4493:20" pos:end="4493:20">s</name><operator pos:start="4493:21" pos:end="4493:22">-&gt;</operator><name pos:start="4493:23" pos:end="4493:24">pc</name></name> <operator pos:start="4493:26" pos:end="4493:26">-</operator> <name pos:start="4493:28" pos:end="4493:37"><name pos:start="4493:28" pos:end="4493:28">s</name><operator pos:start="4493:29" pos:end="4493:30">-&gt;</operator><name pos:start="4493:31" pos:end="4493:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="4495:9" pos:end="4495:25"><expr pos:start="4495:9" pos:end="4495:24"><name pos:start="4495:9" pos:end="4495:12">tval</name> <operator pos:start="4495:14" pos:end="4495:15">+=</operator> <name pos:start="4495:17" pos:end="4495:24">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="4497:9" pos:end="4499:27"><if pos:start="4497:9" pos:end="4499:27">if <condition pos:start="4497:12" pos:end="4497:26">(<expr pos:start="4497:13" pos:end="4497:25"><name pos:start="4497:13" pos:end="4497:20"><name pos:start="4497:13" pos:end="4497:13">s</name><operator pos:start="4497:14" pos:end="4497:15">-&gt;</operator><name pos:start="4497:16" pos:end="4497:20">dflag</name></name> <operator pos:start="4497:22" pos:end="4497:23">==</operator> <literal type="number" pos:start="4497:25" pos:end="4497:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4499:13" pos:end="4499:27"><block_content pos:start="4499:13" pos:end="4499:27">

            <expr_stmt pos:start="4499:13" pos:end="4499:27"><expr pos:start="4499:13" pos:end="4499:26"><name pos:start="4499:13" pos:end="4499:16">tval</name> <operator pos:start="4499:18" pos:end="4499:19">&amp;=</operator> <literal type="number" pos:start="4499:21" pos:end="4499:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4501:9" pos:end="4501:38"><expr pos:start="4501:9" pos:end="4501:37"><call pos:start="4501:9" pos:end="4501:37"><name pos:start="4501:9" pos:end="4501:15">gen_jcc</name><argument_list pos:start="4501:16" pos:end="4501:37">(<argument pos:start="4501:17" pos:end="4501:17"><expr pos:start="4501:17" pos:end="4501:17"><name pos:start="4501:17" pos:end="4501:17">s</name></expr></argument>, <argument pos:start="4501:20" pos:end="4501:20"><expr pos:start="4501:20" pos:end="4501:20"><name pos:start="4501:20" pos:end="4501:20">b</name></expr></argument>, <argument pos:start="4501:23" pos:end="4501:26"><expr pos:start="4501:23" pos:end="4501:26"><name pos:start="4501:23" pos:end="4501:26">tval</name></expr></argument>, <argument pos:start="4501:29" pos:end="4501:36"><expr pos:start="4501:29" pos:end="4501:36"><name pos:start="4501:29" pos:end="4501:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4503:9" pos:end="4503:14">break;</break>



    <case pos:start="4507:5" pos:end="4507:25">case <expr pos:start="4507:10" pos:end="4507:24"><literal type="number" pos:start="4507:10" pos:end="4507:14">0x190</literal> <operator pos:start="4507:16" pos:end="4507:18">...</operator> <literal type="number" pos:start="4507:20" pos:end="4507:24">0x19f</literal></expr>:</case> <comment type="block" pos:start="4507:27" pos:end="4507:40">/* setcc Gv */</comment>

        <expr_stmt pos:start="4509:9" pos:end="4509:35"><expr pos:start="4509:9" pos:end="4509:34"><name pos:start="4509:9" pos:end="4509:13">modrm</name> <operator pos:start="4509:15" pos:end="4509:15">=</operator> <call pos:start="4509:17" pos:end="4509:34"><name pos:start="4509:17" pos:end="4509:25">ldub_code</name><argument_list pos:start="4509:26" pos:end="4509:34">(<argument pos:start="4509:27" pos:end="4509:33"><expr pos:start="4509:27" pos:end="4509:33"><name pos:start="4509:27" pos:end="4509:31"><name pos:start="4509:27" pos:end="4509:27">s</name><operator pos:start="4509:28" pos:end="4509:29">-&gt;</operator><name pos:start="4509:30" pos:end="4509:31">pc</name></name><operator pos:start="4509:32" pos:end="4509:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4511:9" pos:end="4511:24"><expr pos:start="4511:9" pos:end="4511:23"><call pos:start="4511:9" pos:end="4511:23"><name pos:start="4511:9" pos:end="4511:17">gen_setcc</name><argument_list pos:start="4511:18" pos:end="4511:23">(<argument pos:start="4511:19" pos:end="4511:19"><expr pos:start="4511:19" pos:end="4511:19"><name pos:start="4511:19" pos:end="4511:19">s</name></expr></argument>, <argument pos:start="4511:22" pos:end="4511:22"><expr pos:start="4511:22" pos:end="4511:22"><name pos:start="4511:22" pos:end="4511:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4513:9" pos:end="4513:54"><expr pos:start="4513:9" pos:end="4513:53"><call pos:start="4513:9" pos:end="4513:53"><name pos:start="4513:9" pos:end="4513:22">gen_ldst_modrm</name><argument_list pos:start="4513:23" pos:end="4513:53">(<argument pos:start="4513:24" pos:end="4513:24"><expr pos:start="4513:24" pos:end="4513:24"><name pos:start="4513:24" pos:end="4513:24">s</name></expr></argument>, <argument pos:start="4513:27" pos:end="4513:31"><expr pos:start="4513:27" pos:end="4513:31"><name pos:start="4513:27" pos:end="4513:31">modrm</name></expr></argument>, <argument pos:start="4513:34" pos:end="4513:40"><expr pos:start="4513:34" pos:end="4513:40"><name pos:start="4513:34" pos:end="4513:40">OT_BYTE</name></expr></argument>, <argument pos:start="4513:43" pos:end="4513:49"><expr pos:start="4513:43" pos:end="4513:49"><name pos:start="4513:43" pos:end="4513:49">OR_TMP0</name></expr></argument>, <argument pos:start="4513:52" pos:end="4513:52"><expr pos:start="4513:52" pos:end="4513:52"><literal type="number" pos:start="4513:52" pos:end="4513:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4515:9" pos:end="4515:14">break;</break>

    <case pos:start="4517:5" pos:end="4517:25">case <expr pos:start="4517:10" pos:end="4517:24"><literal type="number" pos:start="4517:10" pos:end="4517:14">0x140</literal> <operator pos:start="4517:16" pos:end="4517:18">...</operator> <literal type="number" pos:start="4517:20" pos:end="4517:24">0x14f</literal></expr>:</case> <comment type="block" pos:start="4517:27" pos:end="4517:43">/* cmov Gv, Ev */</comment>

        <block pos:start="4519:9" pos:end="4587:9">{<block_content pos:start="4521:13" pos:end="4585:30">

            <decl_stmt pos:start="4521:13" pos:end="4521:19"><decl pos:start="4521:13" pos:end="4521:18"><type pos:start="4521:13" pos:end="4521:15"><name pos:start="4521:13" pos:end="4521:15">int</name></type> <name pos:start="4521:17" pos:end="4521:18">l1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4523:13" pos:end="4523:20"><decl pos:start="4523:13" pos:end="4523:19"><type pos:start="4523:13" pos:end="4523:16"><name pos:start="4523:13" pos:end="4523:16">TCGv</name></type> <name pos:start="4523:18" pos:end="4523:19">t0</name></decl>;</decl_stmt>



            <expr_stmt pos:start="4527:13" pos:end="4527:33"><expr pos:start="4527:13" pos:end="4527:32"><name pos:start="4527:13" pos:end="4527:14">ot</name> <operator pos:start="4527:16" pos:end="4527:16">=</operator> <name pos:start="4527:18" pos:end="4527:22">dflag</name> <operator pos:start="4527:24" pos:end="4527:24">+</operator> <name pos:start="4527:26" pos:end="4527:32">OT_WORD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4529:13" pos:end="4529:39"><expr pos:start="4529:13" pos:end="4529:38"><name pos:start="4529:13" pos:end="4529:17">modrm</name> <operator pos:start="4529:19" pos:end="4529:19">=</operator> <call pos:start="4529:21" pos:end="4529:38"><name pos:start="4529:21" pos:end="4529:29">ldub_code</name><argument_list pos:start="4529:30" pos:end="4529:38">(<argument pos:start="4529:31" pos:end="4529:37"><expr pos:start="4529:31" pos:end="4529:37"><name pos:start="4529:31" pos:end="4529:35"><name pos:start="4529:31" pos:end="4529:31">s</name><operator pos:start="4529:32" pos:end="4529:33">-&gt;</operator><name pos:start="4529:34" pos:end="4529:35">pc</name></name><operator pos:start="4529:36" pos:end="4529:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4531:13" pos:end="4531:45"><expr pos:start="4531:13" pos:end="4531:44"><name pos:start="4531:13" pos:end="4531:15">reg</name> <operator pos:start="4531:17" pos:end="4531:17">=</operator> <operator pos:start="4531:19" pos:end="4531:19">(</operator><operator pos:start="4531:20" pos:end="4531:20">(</operator><name pos:start="4531:21" pos:end="4531:25">modrm</name> <operator pos:start="4531:27" pos:end="4531:28">&gt;&gt;</operator> <literal type="number" pos:start="4531:30" pos:end="4531:30">3</literal><operator pos:start="4531:31" pos:end="4531:31">)</operator> <operator pos:start="4531:33" pos:end="4531:33">&amp;</operator> <literal type="number" pos:start="4531:35" pos:end="4531:35">7</literal><operator pos:start="4531:36" pos:end="4531:36">)</operator> <operator pos:start="4531:38" pos:end="4531:38">|</operator> <name pos:start="4531:40" pos:end="4531:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4533:13" pos:end="4533:35"><expr pos:start="4533:13" pos:end="4533:34"><name pos:start="4533:13" pos:end="4533:15">mod</name> <operator pos:start="4533:17" pos:end="4533:17">=</operator> <operator pos:start="4533:19" pos:end="4533:19">(</operator><name pos:start="4533:20" pos:end="4533:24">modrm</name> <operator pos:start="4533:26" pos:end="4533:27">&gt;&gt;</operator> <literal type="number" pos:start="4533:29" pos:end="4533:29">6</literal><operator pos:start="4533:30" pos:end="4533:30">)</operator> <operator pos:start="4533:32" pos:end="4533:32">&amp;</operator> <literal type="number" pos:start="4533:34" pos:end="4533:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="4535:13" pos:end="4535:38"><expr pos:start="4535:13" pos:end="4535:37"><name pos:start="4535:13" pos:end="4535:14">t0</name> <operator pos:start="4535:16" pos:end="4535:16">=</operator> <call pos:start="4535:18" pos:end="4535:37"><name pos:start="4535:18" pos:end="4535:35">tcg_temp_local_new</name><argument_list pos:start="4535:36" pos:end="4535:37">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4537:13" pos:end="4552:0"><if pos:start="4537:13" pos:end="4543:13">if <condition pos:start="4537:16" pos:end="4537:25">(<expr pos:start="4537:17" pos:end="4537:24"><name pos:start="4537:17" pos:end="4537:19">mod</name> <operator pos:start="4537:21" pos:end="4537:22">!=</operator> <literal type="number" pos:start="4537:24" pos:end="4537:24">3</literal></expr>)</condition> <block pos:start="4537:27" pos:end="4543:13">{<block_content pos:start="4539:17" pos:end="4541:59">

                <expr_stmt pos:start="4539:17" pos:end="4539:65"><expr pos:start="4539:17" pos:end="4539:64"><call pos:start="4539:17" pos:end="4539:64"><name pos:start="4539:17" pos:end="4539:29">gen_lea_modrm</name><argument_list pos:start="4539:30" pos:end="4539:64">(<argument pos:start="4539:31" pos:end="4539:31"><expr pos:start="4539:31" pos:end="4539:31"><name pos:start="4539:31" pos:end="4539:31">s</name></expr></argument>, <argument pos:start="4539:34" pos:end="4539:38"><expr pos:start="4539:34" pos:end="4539:38"><name pos:start="4539:34" pos:end="4539:38">modrm</name></expr></argument>, <argument pos:start="4539:41" pos:end="4539:49"><expr pos:start="4539:41" pos:end="4539:49"><operator pos:start="4539:41" pos:end="4539:41">&amp;</operator><name pos:start="4539:42" pos:end="4539:49">reg_addr</name></expr></argument>, <argument pos:start="4539:52" pos:end="4539:63"><expr pos:start="4539:52" pos:end="4539:63"><operator pos:start="4539:52" pos:end="4539:52">&amp;</operator><name pos:start="4539:53" pos:end="4539:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4541:17" pos:end="4541:59"><expr pos:start="4541:17" pos:end="4541:58"><call pos:start="4541:17" pos:end="4541:58"><name pos:start="4541:17" pos:end="4541:27">gen_op_ld_v</name><argument_list pos:start="4541:28" pos:end="4541:58">(<argument pos:start="4541:29" pos:end="4541:45"><expr pos:start="4541:29" pos:end="4541:45"><name pos:start="4541:29" pos:end="4541:30">ot</name> <operator pos:start="4541:32" pos:end="4541:32">+</operator> <name pos:start="4541:34" pos:end="4541:45"><name pos:start="4541:34" pos:end="4541:34">s</name><operator pos:start="4541:35" pos:end="4541:36">-&gt;</operator><name pos:start="4541:37" pos:end="4541:45">mem_index</name></name></expr></argument>, <argument pos:start="4541:48" pos:end="4541:49"><expr pos:start="4541:48" pos:end="4541:49"><name pos:start="4541:48" pos:end="4541:49">t0</name></expr></argument>, <argument pos:start="4541:52" pos:end="4541:57"><expr pos:start="4541:52" pos:end="4541:57"><name pos:start="4541:52" pos:end="4541:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4543:15" pos:end="4552:0">else <block pos:start="4543:20" pos:end="4552:0">{<block_content pos:start="4545:17" pos:end="4547:45">

                <expr_stmt pos:start="4545:17" pos:end="4545:44"><expr pos:start="4545:17" pos:end="4545:43"><name pos:start="4545:17" pos:end="4545:18">rm</name> <operator pos:start="4545:20" pos:end="4545:20">=</operator> <operator pos:start="4545:22" pos:end="4545:22">(</operator><name pos:start="4545:23" pos:end="4545:27">modrm</name> <operator pos:start="4545:29" pos:end="4545:29">&amp;</operator> <literal type="number" pos:start="4545:31" pos:end="4545:31">7</literal><operator pos:start="4545:32" pos:end="4545:32">)</operator> <operator pos:start="4545:34" pos:end="4545:34">|</operator> <call pos:start="4545:36" pos:end="4545:43"><name pos:start="4545:36" pos:end="4545:40">REX_B</name><argument_list pos:start="4545:41" pos:end="4545:43">(<argument pos:start="4545:42" pos:end="4545:42"><expr pos:start="4545:42" pos:end="4545:42"><name pos:start="4545:42" pos:end="4545:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4547:17" pos:end="4547:45"><expr pos:start="4547:17" pos:end="4547:44"><call pos:start="4547:17" pos:end="4547:44"><name pos:start="4547:17" pos:end="4547:32">gen_op_mov_v_reg</name><argument_list pos:start="4547:33" pos:end="4547:44">(<argument pos:start="4547:34" pos:end="4547:35"><expr pos:start="4547:34" pos:end="4547:35"><name pos:start="4547:34" pos:end="4547:35">ot</name></expr></argument>, <argument pos:start="4547:38" pos:end="4547:39"><expr pos:start="4547:38" pos:end="4547:39"><name pos:start="4547:38" pos:end="4547:39">t0</name></expr></argument>, <argument pos:start="4547:42" pos:end="4547:43"><expr pos:start="4547:42" pos:end="4547:43"><name pos:start="4547:42" pos:end="4547:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="4551:1" pos:end="4551:20">#<cpp:directive pos:start="4551:2" pos:end="4551:6">ifdef</cpp:directive> <name pos:start="4551:8" pos:end="4551:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="4553:13" pos:end="4583:13"><if pos:start="4553:13" pos:end="4569:13">if <condition pos:start="4553:16" pos:end="4553:30">(<expr pos:start="4553:17" pos:end="4553:29"><name pos:start="4553:17" pos:end="4553:18">ot</name> <operator pos:start="4553:20" pos:end="4553:21">==</operator> <name pos:start="4553:23" pos:end="4553:29">OT_LONG</name></expr>)</condition> <block pos:start="4553:32" pos:end="4569:13">{<block_content pos:start="4557:17" pos:end="4567:98">

                <comment type="block" pos:start="4555:17" pos:end="4555:53">/* XXX: specific Intel behaviour ? */</comment>

                <expr_stmt pos:start="4557:17" pos:end="4557:37"><expr pos:start="4557:17" pos:end="4557:36"><name pos:start="4557:17" pos:end="4557:18">l1</name> <operator pos:start="4557:20" pos:end="4557:20">=</operator> <call pos:start="4557:22" pos:end="4557:36"><name pos:start="4557:22" pos:end="4557:34">gen_new_label</name><argument_list pos:start="4557:35" pos:end="4557:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4559:17" pos:end="4559:49"><expr pos:start="4559:17" pos:end="4559:48"><call pos:start="4559:17" pos:end="4559:48"><name pos:start="4559:17" pos:end="4559:24">gen_jcc1</name><argument_list pos:start="4559:25" pos:end="4559:48">(<argument pos:start="4559:26" pos:end="4559:26"><expr pos:start="4559:26" pos:end="4559:26"><name pos:start="4559:26" pos:end="4559:26">s</name></expr></argument>, <argument pos:start="4559:29" pos:end="4559:36"><expr pos:start="4559:29" pos:end="4559:36"><name pos:start="4559:29" pos:end="4559:36"><name pos:start="4559:29" pos:end="4559:29">s</name><operator pos:start="4559:30" pos:end="4559:31">-&gt;</operator><name pos:start="4559:32" pos:end="4559:36">cc_op</name></name></expr></argument>, <argument pos:start="4559:39" pos:end="4559:43"><expr pos:start="4559:39" pos:end="4559:43"><name pos:start="4559:39" pos:end="4559:39">b</name> <operator pos:start="4559:41" pos:end="4559:41">^</operator> <literal type="number" pos:start="4559:43" pos:end="4559:43">1</literal></expr></argument>, <argument pos:start="4559:46" pos:end="4559:47"><expr pos:start="4559:46" pos:end="4559:47"><name pos:start="4559:46" pos:end="4559:47">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4561:17" pos:end="4561:91"><expr pos:start="4561:17" pos:end="4561:90"><call pos:start="4561:17" pos:end="4561:90"><name pos:start="4561:17" pos:end="4561:31">tcg_gen_st32_tl</name><argument_list pos:start="4561:32" pos:end="4561:90">(<argument pos:start="4561:33" pos:end="4561:34"><expr pos:start="4561:33" pos:end="4561:34"><name pos:start="4561:33" pos:end="4561:34">t0</name></expr></argument>, <argument pos:start="4561:37" pos:end="4561:43"><expr pos:start="4561:37" pos:end="4561:43"><name pos:start="4561:37" pos:end="4561:43">cpu_env</name></expr></argument>, <argument pos:start="4561:46" pos:end="4561:89"><expr pos:start="4561:46" pos:end="4561:89"><call pos:start="4561:46" pos:end="4561:74"><name pos:start="4561:46" pos:end="4561:53">offsetof</name><argument_list pos:start="4561:54" pos:end="4561:74">(<argument pos:start="4561:55" pos:end="4561:62"><expr pos:start="4561:55" pos:end="4561:62"><name pos:start="4561:55" pos:end="4561:62">CPUState</name></expr></argument>, <argument pos:start="4561:65" pos:end="4561:73"><expr pos:start="4561:65" pos:end="4561:73"><name pos:start="4561:65" pos:end="4561:73"><name pos:start="4561:65" pos:end="4561:68">regs</name><index pos:start="4561:69" pos:end="4561:73">[<expr pos:start="4561:70" pos:end="4561:72"><name pos:start="4561:70" pos:end="4561:72">reg</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="4561:76" pos:end="4561:76">+</operator> <name pos:start="4561:78" pos:end="4561:89">REG_L_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4563:17" pos:end="4563:34"><expr pos:start="4563:17" pos:end="4563:33"><call pos:start="4563:17" pos:end="4563:33"><name pos:start="4563:17" pos:end="4563:29">gen_set_label</name><argument_list pos:start="4563:30" pos:end="4563:33">(<argument pos:start="4563:31" pos:end="4563:32"><expr pos:start="4563:31" pos:end="4563:32"><name pos:start="4563:31" pos:end="4563:32">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4565:17" pos:end="4565:45"><expr pos:start="4565:17" pos:end="4565:44"><call pos:start="4565:17" pos:end="4565:44"><name pos:start="4565:17" pos:end="4565:31">tcg_gen_movi_tl</name><argument_list pos:start="4565:32" pos:end="4565:44">(<argument pos:start="4565:33" pos:end="4565:40"><expr pos:start="4565:33" pos:end="4565:40"><name pos:start="4565:33" pos:end="4565:40">cpu_tmp0</name></expr></argument>, <argument pos:start="4565:43" pos:end="4565:43"><expr pos:start="4565:43" pos:end="4565:43"><literal type="number" pos:start="4565:43" pos:end="4565:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4567:17" pos:end="4567:98"><expr pos:start="4567:17" pos:end="4567:97"><call pos:start="4567:17" pos:end="4567:97"><name pos:start="4567:17" pos:end="4567:31">tcg_gen_st32_tl</name><argument_list pos:start="4567:32" pos:end="4567:97">(<argument pos:start="4567:33" pos:end="4567:40"><expr pos:start="4567:33" pos:end="4567:40"><name pos:start="4567:33" pos:end="4567:40">cpu_tmp0</name></expr></argument>, <argument pos:start="4567:43" pos:end="4567:49"><expr pos:start="4567:43" pos:end="4567:49"><name pos:start="4567:43" pos:end="4567:49">cpu_env</name></expr></argument>, <argument pos:start="4567:52" pos:end="4567:96"><expr pos:start="4567:52" pos:end="4567:96"><call pos:start="4567:52" pos:end="4567:80"><name pos:start="4567:52" pos:end="4567:59">offsetof</name><argument_list pos:start="4567:60" pos:end="4567:80">(<argument pos:start="4567:61" pos:end="4567:68"><expr pos:start="4567:61" pos:end="4567:68"><name pos:start="4567:61" pos:end="4567:68">CPUState</name></expr></argument>, <argument pos:start="4567:71" pos:end="4567:79"><expr pos:start="4567:71" pos:end="4567:79"><name pos:start="4567:71" pos:end="4567:79"><name pos:start="4567:71" pos:end="4567:74">regs</name><index pos:start="4567:75" pos:end="4567:79">[<expr pos:start="4567:76" pos:end="4567:78"><name pos:start="4567:76" pos:end="4567:78">reg</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="4567:82" pos:end="4567:82">+</operator> <name pos:start="4567:84" pos:end="4567:96">REG_LH_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4569:15" pos:end="4583:13">else

<cpp:endif pos:start="4571:1" pos:end="4571:6">#<cpp:directive pos:start="4571:2" pos:end="4571:6">endif</cpp:directive></cpp:endif>

            <block pos:start="4573:13" pos:end="4583:13">{<block_content pos:start="4575:17" pos:end="4581:34">

                <expr_stmt pos:start="4575:17" pos:end="4575:37"><expr pos:start="4575:17" pos:end="4575:36"><name pos:start="4575:17" pos:end="4575:18">l1</name> <operator pos:start="4575:20" pos:end="4575:20">=</operator> <call pos:start="4575:22" pos:end="4575:36"><name pos:start="4575:22" pos:end="4575:34">gen_new_label</name><argument_list pos:start="4575:35" pos:end="4575:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4577:17" pos:end="4577:49"><expr pos:start="4577:17" pos:end="4577:48"><call pos:start="4577:17" pos:end="4577:48"><name pos:start="4577:17" pos:end="4577:24">gen_jcc1</name><argument_list pos:start="4577:25" pos:end="4577:48">(<argument pos:start="4577:26" pos:end="4577:26"><expr pos:start="4577:26" pos:end="4577:26"><name pos:start="4577:26" pos:end="4577:26">s</name></expr></argument>, <argument pos:start="4577:29" pos:end="4577:36"><expr pos:start="4577:29" pos:end="4577:36"><name pos:start="4577:29" pos:end="4577:36"><name pos:start="4577:29" pos:end="4577:29">s</name><operator pos:start="4577:30" pos:end="4577:31">-&gt;</operator><name pos:start="4577:32" pos:end="4577:36">cc_op</name></name></expr></argument>, <argument pos:start="4577:39" pos:end="4577:43"><expr pos:start="4577:39" pos:end="4577:43"><name pos:start="4577:39" pos:end="4577:39">b</name> <operator pos:start="4577:41" pos:end="4577:41">^</operator> <literal type="number" pos:start="4577:43" pos:end="4577:43">1</literal></expr></argument>, <argument pos:start="4577:46" pos:end="4577:47"><expr pos:start="4577:46" pos:end="4577:47"><name pos:start="4577:46" pos:end="4577:47">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4579:17" pos:end="4579:46"><expr pos:start="4579:17" pos:end="4579:45"><call pos:start="4579:17" pos:end="4579:45"><name pos:start="4579:17" pos:end="4579:32">gen_op_mov_reg_v</name><argument_list pos:start="4579:33" pos:end="4579:45">(<argument pos:start="4579:34" pos:end="4579:35"><expr pos:start="4579:34" pos:end="4579:35"><name pos:start="4579:34" pos:end="4579:35">ot</name></expr></argument>, <argument pos:start="4579:38" pos:end="4579:40"><expr pos:start="4579:38" pos:end="4579:40"><name pos:start="4579:38" pos:end="4579:40">reg</name></expr></argument>, <argument pos:start="4579:43" pos:end="4579:44"><expr pos:start="4579:43" pos:end="4579:44"><name pos:start="4579:43" pos:end="4579:44">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4581:17" pos:end="4581:34"><expr pos:start="4581:17" pos:end="4581:33"><call pos:start="4581:17" pos:end="4581:33"><name pos:start="4581:17" pos:end="4581:29">gen_set_label</name><argument_list pos:start="4581:30" pos:end="4581:33">(<argument pos:start="4581:31" pos:end="4581:32"><expr pos:start="4581:31" pos:end="4581:32"><name pos:start="4581:31" pos:end="4581:32">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="4585:13" pos:end="4585:30"><expr pos:start="4585:13" pos:end="4585:29"><call pos:start="4585:13" pos:end="4585:29"><name pos:start="4585:13" pos:end="4585:25">tcg_temp_free</name><argument_list pos:start="4585:26" pos:end="4585:29">(<argument pos:start="4585:27" pos:end="4585:28"><expr pos:start="4585:27" pos:end="4585:28"><name pos:start="4585:27" pos:end="4585:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4589:9" pos:end="4589:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4593:9" pos:end="4593:34">/************************/</comment>

        <comment type="block" pos:start="4595:9" pos:end="4595:19">/* flags */</comment>

    <case pos:start="4597:5" pos:end="4597:14">case <expr pos:start="4597:10" pos:end="4597:13"><literal type="number" pos:start="4597:10" pos:end="4597:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="4597:16" pos:end="4597:26">/* pushf */</comment>

        <expr_stmt pos:start="4599:9" pos:end="4599:61"><expr pos:start="4599:9" pos:end="4599:60"><call pos:start="4599:9" pos:end="4599:60"><name pos:start="4599:9" pos:end="4599:31">gen_svm_check_intercept</name><argument_list pos:start="4599:32" pos:end="4599:60">(<argument pos:start="4599:33" pos:end="4599:33"><expr pos:start="4599:33" pos:end="4599:33"><name pos:start="4599:33" pos:end="4599:33">s</name></expr></argument>, <argument pos:start="4599:36" pos:end="4599:43"><expr pos:start="4599:36" pos:end="4599:43"><name pos:start="4599:36" pos:end="4599:43">pc_start</name></expr></argument>, <argument pos:start="4599:46" pos:end="4599:59"><expr pos:start="4599:46" pos:end="4599:59"><name pos:start="4599:46" pos:end="4599:59">SVM_EXIT_PUSHF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4601:9" pos:end="4615:9"><if pos:start="4601:9" pos:end="4605:9">if <condition pos:start="4601:12" pos:end="4601:36">(<expr pos:start="4601:13" pos:end="4601:35"><name pos:start="4601:13" pos:end="4601:19"><name pos:start="4601:13" pos:end="4601:13">s</name><operator pos:start="4601:14" pos:end="4601:15">-&gt;</operator><name pos:start="4601:16" pos:end="4601:19">vm86</name></name> <operator pos:start="4601:21" pos:end="4601:22">&amp;&amp;</operator> <name pos:start="4601:24" pos:end="4601:30"><name pos:start="4601:24" pos:end="4601:24">s</name><operator pos:start="4601:25" pos:end="4601:26">-&gt;</operator><name pos:start="4601:27" pos:end="4601:30">iopl</name></name> <operator pos:start="4601:32" pos:end="4601:33">!=</operator> <literal type="number" pos:start="4601:35" pos:end="4601:35">3</literal></expr>)</condition> <block pos:start="4601:38" pos:end="4605:9">{<block_content pos:start="4603:13" pos:end="4603:64">

            <expr_stmt pos:start="4603:13" pos:end="4603:64"><expr pos:start="4603:13" pos:end="4603:63"><call pos:start="4603:13" pos:end="4603:63"><name pos:start="4603:13" pos:end="4603:25">gen_exception</name><argument_list pos:start="4603:26" pos:end="4603:63">(<argument pos:start="4603:27" pos:end="4603:27"><expr pos:start="4603:27" pos:end="4603:27"><name pos:start="4603:27" pos:end="4603:27">s</name></expr></argument>, <argument pos:start="4603:30" pos:end="4603:39"><expr pos:start="4603:30" pos:end="4603:39"><name pos:start="4603:30" pos:end="4603:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4603:42" pos:end="4603:62"><expr pos:start="4603:42" pos:end="4603:62"><name pos:start="4603:42" pos:end="4603:49">pc_start</name> <operator pos:start="4603:51" pos:end="4603:51">-</operator> <name pos:start="4603:53" pos:end="4603:62"><name pos:start="4603:53" pos:end="4603:53">s</name><operator pos:start="4603:54" pos:end="4603:55">-&gt;</operator><name pos:start="4603:56" pos:end="4603:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4605:11" pos:end="4615:9">else <block pos:start="4605:16" pos:end="4615:9">{<block_content pos:start="4607:13" pos:end="4613:27">

            <if_stmt pos:start="4607:13" pos:end="4609:43"><if pos:start="4607:13" pos:end="4609:43">if <condition pos:start="4607:16" pos:end="4607:42">(<expr pos:start="4607:17" pos:end="4607:41"><name pos:start="4607:17" pos:end="4607:24"><name pos:start="4607:17" pos:end="4607:17">s</name><operator pos:start="4607:18" pos:end="4607:19">-&gt;</operator><name pos:start="4607:20" pos:end="4607:24">cc_op</name></name> <operator pos:start="4607:26" pos:end="4607:27">!=</operator> <name pos:start="4607:29" pos:end="4607:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4609:17" pos:end="4609:43"><block_content pos:start="4609:17" pos:end="4609:43">

                <expr_stmt pos:start="4609:17" pos:end="4609:43"><expr pos:start="4609:17" pos:end="4609:42"><call pos:start="4609:17" pos:end="4609:42"><name pos:start="4609:17" pos:end="4609:32">gen_op_set_cc_op</name><argument_list pos:start="4609:33" pos:end="4609:42">(<argument pos:start="4609:34" pos:end="4609:41"><expr pos:start="4609:34" pos:end="4609:41"><name pos:start="4609:34" pos:end="4609:41"><name pos:start="4609:34" pos:end="4609:34">s</name><operator pos:start="4609:35" pos:end="4609:36">-&gt;</operator><name pos:start="4609:37" pos:end="4609:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4611:13" pos:end="4611:45"><expr pos:start="4611:13" pos:end="4611:44"><call pos:start="4611:13" pos:end="4611:44"><name pos:start="4611:13" pos:end="4611:34">gen_helper_read_eflags</name><argument_list pos:start="4611:35" pos:end="4611:44">(<argument pos:start="4611:36" pos:end="4611:43"><expr pos:start="4611:36" pos:end="4611:43"><name pos:start="4611:36" pos:end="4611:43"><name pos:start="4611:36" pos:end="4611:40">cpu_T</name><index pos:start="4611:41" pos:end="4611:43">[<expr pos:start="4611:42" pos:end="4611:42"><literal type="number" pos:start="4611:42" pos:end="4611:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4613:13" pos:end="4613:27"><expr pos:start="4613:13" pos:end="4613:26"><call pos:start="4613:13" pos:end="4613:26"><name pos:start="4613:13" pos:end="4613:23">gen_push_T0</name><argument_list pos:start="4613:24" pos:end="4613:26">(<argument pos:start="4613:25" pos:end="4613:25"><expr pos:start="4613:25" pos:end="4613:25"><name pos:start="4613:25" pos:end="4613:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4617:9" pos:end="4617:14">break;</break>

    <case pos:start="4619:5" pos:end="4619:14">case <expr pos:start="4619:10" pos:end="4619:13"><literal type="number" pos:start="4619:10" pos:end="4619:13">0x9d</literal></expr>:</case> <comment type="block" pos:start="4619:16" pos:end="4619:25">/* popf */</comment>

        <expr_stmt pos:start="4621:9" pos:end="4621:60"><expr pos:start="4621:9" pos:end="4621:59"><call pos:start="4621:9" pos:end="4621:59"><name pos:start="4621:9" pos:end="4621:31">gen_svm_check_intercept</name><argument_list pos:start="4621:32" pos:end="4621:59">(<argument pos:start="4621:33" pos:end="4621:33"><expr pos:start="4621:33" pos:end="4621:33"><name pos:start="4621:33" pos:end="4621:33">s</name></expr></argument>, <argument pos:start="4621:36" pos:end="4621:43"><expr pos:start="4621:36" pos:end="4621:43"><name pos:start="4621:36" pos:end="4621:43">pc_start</name></expr></argument>, <argument pos:start="4621:46" pos:end="4621:58"><expr pos:start="4621:46" pos:end="4621:58"><name pos:start="4621:46" pos:end="4621:58">SVM_EXIT_POPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4623:9" pos:end="4695:9"><if pos:start="4623:9" pos:end="4627:9">if <condition pos:start="4623:12" pos:end="4623:36">(<expr pos:start="4623:13" pos:end="4623:35"><name pos:start="4623:13" pos:end="4623:19"><name pos:start="4623:13" pos:end="4623:13">s</name><operator pos:start="4623:14" pos:end="4623:15">-&gt;</operator><name pos:start="4623:16" pos:end="4623:19">vm86</name></name> <operator pos:start="4623:21" pos:end="4623:22">&amp;&amp;</operator> <name pos:start="4623:24" pos:end="4623:30"><name pos:start="4623:24" pos:end="4623:24">s</name><operator pos:start="4623:25" pos:end="4623:26">-&gt;</operator><name pos:start="4623:27" pos:end="4623:30">iopl</name></name> <operator pos:start="4623:32" pos:end="4623:33">!=</operator> <literal type="number" pos:start="4623:35" pos:end="4623:35">3</literal></expr>)</condition> <block pos:start="4623:38" pos:end="4627:9">{<block_content pos:start="4625:13" pos:end="4625:64">

            <expr_stmt pos:start="4625:13" pos:end="4625:64"><expr pos:start="4625:13" pos:end="4625:63"><call pos:start="4625:13" pos:end="4625:63"><name pos:start="4625:13" pos:end="4625:25">gen_exception</name><argument_list pos:start="4625:26" pos:end="4625:63">(<argument pos:start="4625:27" pos:end="4625:27"><expr pos:start="4625:27" pos:end="4625:27"><name pos:start="4625:27" pos:end="4625:27">s</name></expr></argument>, <argument pos:start="4625:30" pos:end="4625:39"><expr pos:start="4625:30" pos:end="4625:39"><name pos:start="4625:30" pos:end="4625:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4625:42" pos:end="4625:62"><expr pos:start="4625:42" pos:end="4625:62"><name pos:start="4625:42" pos:end="4625:49">pc_start</name> <operator pos:start="4625:51" pos:end="4625:51">-</operator> <name pos:start="4625:53" pos:end="4625:62"><name pos:start="4625:53" pos:end="4625:53">s</name><operator pos:start="4625:54" pos:end="4625:55">-&gt;</operator><name pos:start="4625:56" pos:end="4625:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4627:11" pos:end="4695:9">else <block pos:start="4627:16" pos:end="4695:9">{<block_content pos:start="4629:13" pos:end="4693:23">

            <expr_stmt pos:start="4629:13" pos:end="4629:26"><expr pos:start="4629:13" pos:end="4629:25"><call pos:start="4629:13" pos:end="4629:25"><name pos:start="4629:13" pos:end="4629:22">gen_pop_T0</name><argument_list pos:start="4629:23" pos:end="4629:25">(<argument pos:start="4629:24" pos:end="4629:24"><expr pos:start="4629:24" pos:end="4629:24"><name pos:start="4629:24" pos:end="4629:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4631:13" pos:end="4683:13"><if pos:start="4631:13" pos:end="4647:13">if <condition pos:start="4631:16" pos:end="4631:28">(<expr pos:start="4631:17" pos:end="4631:27"><name pos:start="4631:17" pos:end="4631:22"><name pos:start="4631:17" pos:end="4631:17">s</name><operator pos:start="4631:18" pos:end="4631:19">-&gt;</operator><name pos:start="4631:20" pos:end="4631:22">cpl</name></name> <operator pos:start="4631:24" pos:end="4631:25">==</operator> <literal type="number" pos:start="4631:27" pos:end="4631:27">0</literal></expr>)</condition> <block pos:start="4631:30" pos:end="4647:13">{<block_content pos:start="4633:17" pos:end="4645:17">

                <if_stmt pos:start="4633:17" pos:end="4645:17"><if pos:start="4633:17" pos:end="4639:17">if <condition pos:start="4633:20" pos:end="4633:29">(<expr pos:start="4633:21" pos:end="4633:28"><name pos:start="4633:21" pos:end="4633:28"><name pos:start="4633:21" pos:end="4633:21">s</name><operator pos:start="4633:22" pos:end="4633:23">-&gt;</operator><name pos:start="4633:24" pos:end="4633:28">dflag</name></name></expr>)</condition> <block pos:start="4633:31" pos:end="4639:17">{<block_content pos:start="4635:21" pos:end="4637:117">

                    <expr_stmt pos:start="4635:21" pos:end="4637:117"><expr pos:start="4635:21" pos:end="4637:116"><call pos:start="4635:21" pos:end="4637:116"><name pos:start="4635:21" pos:end="4635:43">gen_helper_write_eflags</name><argument_list pos:start="4635:44" pos:end="4637:116">(<argument pos:start="4635:45" pos:end="4635:52"><expr pos:start="4635:45" pos:end="4635:52"><name pos:start="4635:45" pos:end="4635:52"><name pos:start="4635:45" pos:end="4635:49">cpu_T</name><index pos:start="4635:50" pos:end="4635:52">[<expr pos:start="4635:51" pos:end="4635:51"><literal type="number" pos:start="4635:51" pos:end="4635:51">0</literal></expr>]</index></name></expr></argument>,

                                       <argument pos:start="4637:40" pos:end="4637:115"><expr pos:start="4637:40" pos:end="4637:115"><call pos:start="4637:40" pos:end="4637:115"><name pos:start="4637:40" pos:end="4637:52">tcg_const_i32</name><argument_list pos:start="4637:53" pos:end="4637:115">(<argument pos:start="4637:54" pos:end="4637:114"><expr pos:start="4637:54" pos:end="4637:114"><operator pos:start="4637:54" pos:end="4637:54">(</operator><name pos:start="4637:55" pos:end="4637:61">TF_MASK</name> <operator pos:start="4637:63" pos:end="4637:63">|</operator> <name pos:start="4637:65" pos:end="4637:71">AC_MASK</name> <operator pos:start="4637:73" pos:end="4637:73">|</operator> <name pos:start="4637:75" pos:end="4637:81">ID_MASK</name> <operator pos:start="4637:83" pos:end="4637:83">|</operator> <name pos:start="4637:85" pos:end="4637:91">NT_MASK</name> <operator pos:start="4637:93" pos:end="4637:93">|</operator> <name pos:start="4637:95" pos:end="4637:101">IF_MASK</name> <operator pos:start="4637:103" pos:end="4637:103">|</operator> <name pos:start="4637:105" pos:end="4637:113">IOPL_MASK</name><operator pos:start="4637:114" pos:end="4637:114">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4639:19" pos:end="4645:17">else <block pos:start="4639:24" pos:end="4645:17">{<block_content pos:start="4641:21" pos:end="4643:126">

                    <expr_stmt pos:start="4641:21" pos:end="4643:126"><expr pos:start="4641:21" pos:end="4643:125"><call pos:start="4641:21" pos:end="4643:125"><name pos:start="4641:21" pos:end="4641:43">gen_helper_write_eflags</name><argument_list pos:start="4641:44" pos:end="4643:125">(<argument pos:start="4641:45" pos:end="4641:52"><expr pos:start="4641:45" pos:end="4641:52"><name pos:start="4641:45" pos:end="4641:52"><name pos:start="4641:45" pos:end="4641:49">cpu_T</name><index pos:start="4641:50" pos:end="4641:52">[<expr pos:start="4641:51" pos:end="4641:51"><literal type="number" pos:start="4641:51" pos:end="4641:51">0</literal></expr>]</index></name></expr></argument>,

                                       <argument pos:start="4643:40" pos:end="4643:124"><expr pos:start="4643:40" pos:end="4643:124"><call pos:start="4643:40" pos:end="4643:124"><name pos:start="4643:40" pos:end="4643:52">tcg_const_i32</name><argument_list pos:start="4643:53" pos:end="4643:124">(<argument pos:start="4643:54" pos:end="4643:123"><expr pos:start="4643:54" pos:end="4643:123"><operator pos:start="4643:54" pos:end="4643:54">(</operator><name pos:start="4643:55" pos:end="4643:61">TF_MASK</name> <operator pos:start="4643:63" pos:end="4643:63">|</operator> <name pos:start="4643:65" pos:end="4643:71">AC_MASK</name> <operator pos:start="4643:73" pos:end="4643:73">|</operator> <name pos:start="4643:75" pos:end="4643:81">ID_MASK</name> <operator pos:start="4643:83" pos:end="4643:83">|</operator> <name pos:start="4643:85" pos:end="4643:91">NT_MASK</name> <operator pos:start="4643:93" pos:end="4643:93">|</operator> <name pos:start="4643:95" pos:end="4643:101">IF_MASK</name> <operator pos:start="4643:103" pos:end="4643:103">|</operator> <name pos:start="4643:105" pos:end="4643:113">IOPL_MASK</name><operator pos:start="4643:114" pos:end="4643:114">)</operator> <operator pos:start="4643:116" pos:end="4643:116">&amp;</operator> <literal type="number" pos:start="4643:118" pos:end="4643:123">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="4647:15" pos:end="4683:13">else <block pos:start="4647:20" pos:end="4683:13">{<block_content pos:start="4649:17" pos:end="4681:17">

                <if_stmt pos:start="4649:17" pos:end="4681:17"><if pos:start="4649:17" pos:end="4665:17">if <condition pos:start="4649:20" pos:end="4649:38">(<expr pos:start="4649:21" pos:end="4649:37"><name pos:start="4649:21" pos:end="4649:26"><name pos:start="4649:21" pos:end="4649:21">s</name><operator pos:start="4649:22" pos:end="4649:23">-&gt;</operator><name pos:start="4649:24" pos:end="4649:26">cpl</name></name> <operator pos:start="4649:28" pos:end="4649:29">&lt;=</operator> <name pos:start="4649:31" pos:end="4649:37"><name pos:start="4649:31" pos:end="4649:31">s</name><operator pos:start="4649:32" pos:end="4649:33">-&gt;</operator><name pos:start="4649:34" pos:end="4649:37">iopl</name></name></expr>)</condition> <block pos:start="4649:40" pos:end="4665:17">{<block_content pos:start="4651:21" pos:end="4663:21">

                    <if_stmt pos:start="4651:21" pos:end="4663:21"><if pos:start="4651:21" pos:end="4657:21">if <condition pos:start="4651:24" pos:end="4651:33">(<expr pos:start="4651:25" pos:end="4651:32"><name pos:start="4651:25" pos:end="4651:32"><name pos:start="4651:25" pos:end="4651:25">s</name><operator pos:start="4651:26" pos:end="4651:27">-&gt;</operator><name pos:start="4651:28" pos:end="4651:32">dflag</name></name></expr>)</condition> <block pos:start="4651:35" pos:end="4657:21">{<block_content pos:start="4653:25" pos:end="4655:109">

                        <expr_stmt pos:start="4653:25" pos:end="4655:109"><expr pos:start="4653:25" pos:end="4655:108"><call pos:start="4653:25" pos:end="4655:108"><name pos:start="4653:25" pos:end="4653:47">gen_helper_write_eflags</name><argument_list pos:start="4653:48" pos:end="4655:108">(<argument pos:start="4653:49" pos:end="4653:56"><expr pos:start="4653:49" pos:end="4653:56"><name pos:start="4653:49" pos:end="4653:56"><name pos:start="4653:49" pos:end="4653:53">cpu_T</name><index pos:start="4653:54" pos:end="4653:56">[<expr pos:start="4653:55" pos:end="4653:55"><literal type="number" pos:start="4653:55" pos:end="4653:55">0</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="4655:44" pos:end="4655:107"><expr pos:start="4655:44" pos:end="4655:107"><call pos:start="4655:44" pos:end="4655:107"><name pos:start="4655:44" pos:end="4655:56">tcg_const_i32</name><argument_list pos:start="4655:57" pos:end="4655:107">(<argument pos:start="4655:58" pos:end="4655:106"><expr pos:start="4655:58" pos:end="4655:106"><operator pos:start="4655:58" pos:end="4655:58">(</operator><name pos:start="4655:59" pos:end="4655:65">TF_MASK</name> <operator pos:start="4655:67" pos:end="4655:67">|</operator> <name pos:start="4655:69" pos:end="4655:75">AC_MASK</name> <operator pos:start="4655:77" pos:end="4655:77">|</operator> <name pos:start="4655:79" pos:end="4655:85">ID_MASK</name> <operator pos:start="4655:87" pos:end="4655:87">|</operator> <name pos:start="4655:89" pos:end="4655:95">NT_MASK</name> <operator pos:start="4655:97" pos:end="4655:97">|</operator> <name pos:start="4655:99" pos:end="4655:105">IF_MASK</name><operator pos:start="4655:106" pos:end="4655:106">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4657:23" pos:end="4663:21">else <block pos:start="4657:28" pos:end="4663:21">{<block_content pos:start="4659:25" pos:end="4661:118">

                        <expr_stmt pos:start="4659:25" pos:end="4661:118"><expr pos:start="4659:25" pos:end="4661:117"><call pos:start="4659:25" pos:end="4661:117"><name pos:start="4659:25" pos:end="4659:47">gen_helper_write_eflags</name><argument_list pos:start="4659:48" pos:end="4661:117">(<argument pos:start="4659:49" pos:end="4659:56"><expr pos:start="4659:49" pos:end="4659:56"><name pos:start="4659:49" pos:end="4659:56"><name pos:start="4659:49" pos:end="4659:53">cpu_T</name><index pos:start="4659:54" pos:end="4659:56">[<expr pos:start="4659:55" pos:end="4659:55"><literal type="number" pos:start="4659:55" pos:end="4659:55">0</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="4661:44" pos:end="4661:116"><expr pos:start="4661:44" pos:end="4661:116"><call pos:start="4661:44" pos:end="4661:116"><name pos:start="4661:44" pos:end="4661:56">tcg_const_i32</name><argument_list pos:start="4661:57" pos:end="4661:116">(<argument pos:start="4661:58" pos:end="4661:115"><expr pos:start="4661:58" pos:end="4661:115"><operator pos:start="4661:58" pos:end="4661:58">(</operator><name pos:start="4661:59" pos:end="4661:65">TF_MASK</name> <operator pos:start="4661:67" pos:end="4661:67">|</operator> <name pos:start="4661:69" pos:end="4661:75">AC_MASK</name> <operator pos:start="4661:77" pos:end="4661:77">|</operator> <name pos:start="4661:79" pos:end="4661:85">ID_MASK</name> <operator pos:start="4661:87" pos:end="4661:87">|</operator> <name pos:start="4661:89" pos:end="4661:95">NT_MASK</name> <operator pos:start="4661:97" pos:end="4661:97">|</operator> <name pos:start="4661:99" pos:end="4661:105">IF_MASK</name><operator pos:start="4661:106" pos:end="4661:106">)</operator> <operator pos:start="4661:108" pos:end="4661:108">&amp;</operator> <literal type="number" pos:start="4661:110" pos:end="4661:115">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="4665:19" pos:end="4681:17">else <block pos:start="4665:24" pos:end="4681:17">{<block_content pos:start="4667:21" pos:end="4679:21">

                    <if_stmt pos:start="4667:21" pos:end="4679:21"><if pos:start="4667:21" pos:end="4673:21">if <condition pos:start="4667:24" pos:end="4667:33">(<expr pos:start="4667:25" pos:end="4667:32"><name pos:start="4667:25" pos:end="4667:32"><name pos:start="4667:25" pos:end="4667:25">s</name><operator pos:start="4667:26" pos:end="4667:27">-&gt;</operator><name pos:start="4667:28" pos:end="4667:32">dflag</name></name></expr>)</condition> <block pos:start="4667:35" pos:end="4673:21">{<block_content pos:start="4669:25" pos:end="4671:99">

                        <expr_stmt pos:start="4669:25" pos:end="4671:99"><expr pos:start="4669:25" pos:end="4671:98"><call pos:start="4669:25" pos:end="4671:98"><name pos:start="4669:25" pos:end="4669:47">gen_helper_write_eflags</name><argument_list pos:start="4669:48" pos:end="4671:98">(<argument pos:start="4669:49" pos:end="4669:56"><expr pos:start="4669:49" pos:end="4669:56"><name pos:start="4669:49" pos:end="4669:56"><name pos:start="4669:49" pos:end="4669:53">cpu_T</name><index pos:start="4669:54" pos:end="4669:56">[<expr pos:start="4669:55" pos:end="4669:55"><literal type="number" pos:start="4669:55" pos:end="4669:55">0</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="4671:44" pos:end="4671:97"><expr pos:start="4671:44" pos:end="4671:97"><call pos:start="4671:44" pos:end="4671:97"><name pos:start="4671:44" pos:end="4671:56">tcg_const_i32</name><argument_list pos:start="4671:57" pos:end="4671:97">(<argument pos:start="4671:58" pos:end="4671:96"><expr pos:start="4671:58" pos:end="4671:96"><operator pos:start="4671:58" pos:end="4671:58">(</operator><name pos:start="4671:59" pos:end="4671:65">TF_MASK</name> <operator pos:start="4671:67" pos:end="4671:67">|</operator> <name pos:start="4671:69" pos:end="4671:75">AC_MASK</name> <operator pos:start="4671:77" pos:end="4671:77">|</operator> <name pos:start="4671:79" pos:end="4671:85">ID_MASK</name> <operator pos:start="4671:87" pos:end="4671:87">|</operator> <name pos:start="4671:89" pos:end="4671:95">NT_MASK</name><operator pos:start="4671:96" pos:end="4671:96">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4673:23" pos:end="4679:21">else <block pos:start="4673:28" pos:end="4679:21">{<block_content pos:start="4675:25" pos:end="4677:108">

                        <expr_stmt pos:start="4675:25" pos:end="4677:108"><expr pos:start="4675:25" pos:end="4677:107"><call pos:start="4675:25" pos:end="4677:107"><name pos:start="4675:25" pos:end="4675:47">gen_helper_write_eflags</name><argument_list pos:start="4675:48" pos:end="4677:107">(<argument pos:start="4675:49" pos:end="4675:56"><expr pos:start="4675:49" pos:end="4675:56"><name pos:start="4675:49" pos:end="4675:56"><name pos:start="4675:49" pos:end="4675:53">cpu_T</name><index pos:start="4675:54" pos:end="4675:56">[<expr pos:start="4675:55" pos:end="4675:55"><literal type="number" pos:start="4675:55" pos:end="4675:55">0</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="4677:44" pos:end="4677:106"><expr pos:start="4677:44" pos:end="4677:106"><call pos:start="4677:44" pos:end="4677:106"><name pos:start="4677:44" pos:end="4677:56">tcg_const_i32</name><argument_list pos:start="4677:57" pos:end="4677:106">(<argument pos:start="4677:58" pos:end="4677:105"><expr pos:start="4677:58" pos:end="4677:105"><operator pos:start="4677:58" pos:end="4677:58">(</operator><name pos:start="4677:59" pos:end="4677:65">TF_MASK</name> <operator pos:start="4677:67" pos:end="4677:67">|</operator> <name pos:start="4677:69" pos:end="4677:75">AC_MASK</name> <operator pos:start="4677:77" pos:end="4677:77">|</operator> <name pos:start="4677:79" pos:end="4677:85">ID_MASK</name> <operator pos:start="4677:87" pos:end="4677:87">|</operator> <name pos:start="4677:89" pos:end="4677:95">NT_MASK</name><operator pos:start="4677:96" pos:end="4677:96">)</operator> <operator pos:start="4677:98" pos:end="4677:98">&amp;</operator> <literal type="number" pos:start="4677:100" pos:end="4677:105">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="4685:13" pos:end="4685:30"><expr pos:start="4685:13" pos:end="4685:29"><call pos:start="4685:13" pos:end="4685:29"><name pos:start="4685:13" pos:end="4685:26">gen_pop_update</name><argument_list pos:start="4685:27" pos:end="4685:29">(<argument pos:start="4685:28" pos:end="4685:28"><expr pos:start="4685:28" pos:end="4685:28"><name pos:start="4685:28" pos:end="4685:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4687:13" pos:end="4687:36"><expr pos:start="4687:13" pos:end="4687:35"><name pos:start="4687:13" pos:end="4687:20"><name pos:start="4687:13" pos:end="4687:13">s</name><operator pos:start="4687:14" pos:end="4687:15">-&gt;</operator><name pos:start="4687:16" pos:end="4687:20">cc_op</name></name> <operator pos:start="4687:22" pos:end="4687:22">=</operator> <name pos:start="4687:24" pos:end="4687:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <comment type="block" pos:start="4689:13" pos:end="4689:62">/* abort translation because TF flag may change */</comment>

            <expr_stmt pos:start="4691:13" pos:end="4691:43"><expr pos:start="4691:13" pos:end="4691:42"><call pos:start="4691:13" pos:end="4691:42"><name pos:start="4691:13" pos:end="4691:22">gen_jmp_im</name><argument_list pos:start="4691:23" pos:end="4691:42">(<argument pos:start="4691:24" pos:end="4691:41"><expr pos:start="4691:24" pos:end="4691:41"><name pos:start="4691:24" pos:end="4691:28"><name pos:start="4691:24" pos:end="4691:24">s</name><operator pos:start="4691:25" pos:end="4691:26">-&gt;</operator><name pos:start="4691:27" pos:end="4691:28">pc</name></name> <operator pos:start="4691:30" pos:end="4691:30">-</operator> <name pos:start="4691:32" pos:end="4691:41"><name pos:start="4691:32" pos:end="4691:32">s</name><operator pos:start="4691:33" pos:end="4691:34">-&gt;</operator><name pos:start="4691:35" pos:end="4691:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4693:13" pos:end="4693:23"><expr pos:start="4693:13" pos:end="4693:22"><call pos:start="4693:13" pos:end="4693:22"><name pos:start="4693:13" pos:end="4693:19">gen_eob</name><argument_list pos:start="4693:20" pos:end="4693:22">(<argument pos:start="4693:21" pos:end="4693:21"><expr pos:start="4693:21" pos:end="4693:21"><name pos:start="4693:21" pos:end="4693:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4697:9" pos:end="4697:14">break;</break>

    <case pos:start="4699:5" pos:end="4699:14">case <expr pos:start="4699:10" pos:end="4699:13"><literal type="number" pos:start="4699:10" pos:end="4699:13">0x9e</literal></expr>:</case> <comment type="block" pos:start="4699:16" pos:end="4699:25">/* sahf */</comment>

        <if_stmt pos:start="4701:9" pos:end="4703:28"><if pos:start="4701:9" pos:end="4703:28">if <condition pos:start="4701:12" pos:end="4701:72">(<expr pos:start="4701:13" pos:end="4701:71"><call pos:start="4701:13" pos:end="4701:21"><name pos:start="4701:13" pos:end="4701:18">CODE64</name><argument_list pos:start="4701:19" pos:end="4701:21">(<argument pos:start="4701:20" pos:end="4701:20"><expr pos:start="4701:20" pos:end="4701:20"><name pos:start="4701:20" pos:end="4701:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4701:23" pos:end="4701:24">&amp;&amp;</operator> <operator pos:start="4701:26" pos:end="4701:26">!</operator><operator pos:start="4701:27" pos:end="4701:27">(</operator><name pos:start="4701:28" pos:end="4701:49"><name pos:start="4701:28" pos:end="4701:28">s</name><operator pos:start="4701:29" pos:end="4701:30">-&gt;</operator><name pos:start="4701:31" pos:end="4701:49">cpuid_ext3_features</name></name> <operator pos:start="4701:51" pos:end="4701:51">&amp;</operator> <name pos:start="4701:53" pos:end="4701:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="4701:71" pos:end="4701:71">)</operator></expr>)</condition><block type="pseudo" pos:start="4703:13" pos:end="4703:28"><block_content pos:start="4703:13" pos:end="4703:28">

            <goto pos:start="4703:13" pos:end="4703:28">goto <name pos:start="4703:18" pos:end="4703:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4705:9" pos:end="4705:44"><expr pos:start="4705:9" pos:end="4705:43"><call pos:start="4705:9" pos:end="4705:43"><name pos:start="4705:9" pos:end="4705:25">gen_op_mov_TN_reg</name><argument_list pos:start="4705:26" pos:end="4705:43">(<argument pos:start="4705:27" pos:end="4705:33"><expr pos:start="4705:27" pos:end="4705:33"><name pos:start="4705:27" pos:end="4705:33">OT_BYTE</name></expr></argument>, <argument pos:start="4705:36" pos:end="4705:36"><expr pos:start="4705:36" pos:end="4705:36"><literal type="number" pos:start="4705:36" pos:end="4705:36">0</literal></expr></argument>, <argument pos:start="4705:39" pos:end="4705:42"><expr pos:start="4705:39" pos:end="4705:42"><name pos:start="4705:39" pos:end="4705:42">R_AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4707:9" pos:end="4709:39"><if pos:start="4707:9" pos:end="4709:39">if <condition pos:start="4707:12" pos:end="4707:38">(<expr pos:start="4707:13" pos:end="4707:37"><name pos:start="4707:13" pos:end="4707:20"><name pos:start="4707:13" pos:end="4707:13">s</name><operator pos:start="4707:14" pos:end="4707:15">-&gt;</operator><name pos:start="4707:16" pos:end="4707:20">cc_op</name></name> <operator pos:start="4707:22" pos:end="4707:23">!=</operator> <name pos:start="4707:25" pos:end="4707:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4709:13" pos:end="4709:39"><block_content pos:start="4709:13" pos:end="4709:39">

            <expr_stmt pos:start="4709:13" pos:end="4709:39"><expr pos:start="4709:13" pos:end="4709:38"><call pos:start="4709:13" pos:end="4709:38"><name pos:start="4709:13" pos:end="4709:28">gen_op_set_cc_op</name><argument_list pos:start="4709:29" pos:end="4709:38">(<argument pos:start="4709:30" pos:end="4709:37"><expr pos:start="4709:30" pos:end="4709:37"><name pos:start="4709:30" pos:end="4709:37"><name pos:start="4709:30" pos:end="4709:30">s</name><operator pos:start="4709:31" pos:end="4709:32">-&gt;</operator><name pos:start="4709:33" pos:end="4709:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4711:9" pos:end="4711:39"><expr pos:start="4711:9" pos:end="4711:38"><call pos:start="4711:9" pos:end="4711:38"><name pos:start="4711:9" pos:end="4711:26">gen_compute_eflags</name><argument_list pos:start="4711:27" pos:end="4711:38">(<argument pos:start="4711:28" pos:end="4711:37"><expr pos:start="4711:28" pos:end="4711:37"><name pos:start="4711:28" pos:end="4711:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4713:9" pos:end="4713:54"><expr pos:start="4713:9" pos:end="4713:53"><call pos:start="4713:9" pos:end="4713:53"><name pos:start="4713:9" pos:end="4713:23">tcg_gen_andi_tl</name><argument_list pos:start="4713:24" pos:end="4713:53">(<argument pos:start="4713:25" pos:end="4713:34"><expr pos:start="4713:25" pos:end="4713:34"><name pos:start="4713:25" pos:end="4713:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4713:37" pos:end="4713:46"><expr pos:start="4713:37" pos:end="4713:46"><name pos:start="4713:37" pos:end="4713:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4713:49" pos:end="4713:52"><expr pos:start="4713:49" pos:end="4713:52"><name pos:start="4713:49" pos:end="4713:52">CC_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4715:9" pos:end="4715:78"><expr pos:start="4715:9" pos:end="4715:77"><call pos:start="4715:9" pos:end="4715:77"><name pos:start="4715:9" pos:end="4715:23">tcg_gen_andi_tl</name><argument_list pos:start="4715:24" pos:end="4715:77">(<argument pos:start="4715:25" pos:end="4715:32"><expr pos:start="4715:25" pos:end="4715:32"><name pos:start="4715:25" pos:end="4715:32"><name pos:start="4715:25" pos:end="4715:29">cpu_T</name><index pos:start="4715:30" pos:end="4715:32">[<expr pos:start="4715:31" pos:end="4715:31"><literal type="number" pos:start="4715:31" pos:end="4715:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4715:35" pos:end="4715:42"><expr pos:start="4715:35" pos:end="4715:42"><name pos:start="4715:35" pos:end="4715:42"><name pos:start="4715:35" pos:end="4715:39">cpu_T</name><index pos:start="4715:40" pos:end="4715:42">[<expr pos:start="4715:41" pos:end="4715:41"><literal type="number" pos:start="4715:41" pos:end="4715:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4715:45" pos:end="4715:76"><expr pos:start="4715:45" pos:end="4715:76"><name pos:start="4715:45" pos:end="4715:48">CC_S</name> <operator pos:start="4715:50" pos:end="4715:50">|</operator> <name pos:start="4715:52" pos:end="4715:55">CC_Z</name> <operator pos:start="4715:57" pos:end="4715:57">|</operator> <name pos:start="4715:59" pos:end="4715:62">CC_A</name> <operator pos:start="4715:64" pos:end="4715:64">|</operator> <name pos:start="4715:66" pos:end="4715:69">CC_P</name> <operator pos:start="4715:71" pos:end="4715:71">|</operator> <name pos:start="4715:73" pos:end="4715:76">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4717:9" pos:end="4717:56"><expr pos:start="4717:9" pos:end="4717:55"><call pos:start="4717:9" pos:end="4717:55"><name pos:start="4717:9" pos:end="4717:21">tcg_gen_or_tl</name><argument_list pos:start="4717:22" pos:end="4717:55">(<argument pos:start="4717:23" pos:end="4717:32"><expr pos:start="4717:23" pos:end="4717:32"><name pos:start="4717:23" pos:end="4717:32">cpu_cc_src</name></expr></argument>, <argument pos:start="4717:35" pos:end="4717:44"><expr pos:start="4717:35" pos:end="4717:44"><name pos:start="4717:35" pos:end="4717:44">cpu_cc_src</name></expr></argument>, <argument pos:start="4717:47" pos:end="4717:54"><expr pos:start="4717:47" pos:end="4717:54"><name pos:start="4717:47" pos:end="4717:54"><name pos:start="4717:47" pos:end="4717:51">cpu_T</name><index pos:start="4717:52" pos:end="4717:54">[<expr pos:start="4717:53" pos:end="4717:53"><literal type="number" pos:start="4717:53" pos:end="4717:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4719:9" pos:end="4719:32"><expr pos:start="4719:9" pos:end="4719:31"><name pos:start="4719:9" pos:end="4719:16"><name pos:start="4719:9" pos:end="4719:9">s</name><operator pos:start="4719:10" pos:end="4719:11">-&gt;</operator><name pos:start="4719:12" pos:end="4719:16">cc_op</name></name> <operator pos:start="4719:18" pos:end="4719:18">=</operator> <name pos:start="4719:20" pos:end="4719:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4721:9" pos:end="4721:14">break;</break>

    <case pos:start="4723:5" pos:end="4723:14">case <expr pos:start="4723:10" pos:end="4723:13"><literal type="number" pos:start="4723:10" pos:end="4723:13">0x9f</literal></expr>:</case> <comment type="block" pos:start="4723:16" pos:end="4723:25">/* lahf */</comment>

        <if_stmt pos:start="4725:9" pos:end="4727:28"><if pos:start="4725:9" pos:end="4727:28">if <condition pos:start="4725:12" pos:end="4725:72">(<expr pos:start="4725:13" pos:end="4725:71"><call pos:start="4725:13" pos:end="4725:21"><name pos:start="4725:13" pos:end="4725:18">CODE64</name><argument_list pos:start="4725:19" pos:end="4725:21">(<argument pos:start="4725:20" pos:end="4725:20"><expr pos:start="4725:20" pos:end="4725:20"><name pos:start="4725:20" pos:end="4725:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4725:23" pos:end="4725:24">&amp;&amp;</operator> <operator pos:start="4725:26" pos:end="4725:26">!</operator><operator pos:start="4725:27" pos:end="4725:27">(</operator><name pos:start="4725:28" pos:end="4725:49"><name pos:start="4725:28" pos:end="4725:28">s</name><operator pos:start="4725:29" pos:end="4725:30">-&gt;</operator><name pos:start="4725:31" pos:end="4725:49">cpuid_ext3_features</name></name> <operator pos:start="4725:51" pos:end="4725:51">&amp;</operator> <name pos:start="4725:53" pos:end="4725:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="4725:71" pos:end="4725:71">)</operator></expr>)</condition><block type="pseudo" pos:start="4727:13" pos:end="4727:28"><block_content pos:start="4727:13" pos:end="4727:28">

            <goto pos:start="4727:13" pos:end="4727:28">goto <name pos:start="4727:18" pos:end="4727:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="4729:9" pos:end="4731:39"><if pos:start="4729:9" pos:end="4731:39">if <condition pos:start="4729:12" pos:end="4729:38">(<expr pos:start="4729:13" pos:end="4729:37"><name pos:start="4729:13" pos:end="4729:20"><name pos:start="4729:13" pos:end="4729:13">s</name><operator pos:start="4729:14" pos:end="4729:15">-&gt;</operator><name pos:start="4729:16" pos:end="4729:20">cc_op</name></name> <operator pos:start="4729:22" pos:end="4729:23">!=</operator> <name pos:start="4729:25" pos:end="4729:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4731:13" pos:end="4731:39"><block_content pos:start="4731:13" pos:end="4731:39">

            <expr_stmt pos:start="4731:13" pos:end="4731:39"><expr pos:start="4731:13" pos:end="4731:38"><call pos:start="4731:13" pos:end="4731:38"><name pos:start="4731:13" pos:end="4731:28">gen_op_set_cc_op</name><argument_list pos:start="4731:29" pos:end="4731:38">(<argument pos:start="4731:30" pos:end="4731:37"><expr pos:start="4731:30" pos:end="4731:37"><name pos:start="4731:30" pos:end="4731:37"><name pos:start="4731:30" pos:end="4731:30">s</name><operator pos:start="4731:31" pos:end="4731:32">-&gt;</operator><name pos:start="4731:33" pos:end="4731:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4733:9" pos:end="4733:37"><expr pos:start="4733:9" pos:end="4733:36"><call pos:start="4733:9" pos:end="4733:36"><name pos:start="4733:9" pos:end="4733:26">gen_compute_eflags</name><argument_list pos:start="4733:27" pos:end="4733:36">(<argument pos:start="4733:28" pos:end="4733:35"><expr pos:start="4733:28" pos:end="4733:35"><name pos:start="4733:28" pos:end="4733:35"><name pos:start="4733:28" pos:end="4733:32">cpu_T</name><index pos:start="4733:33" pos:end="4733:35">[<expr pos:start="4733:34" pos:end="4733:34"><literal type="number" pos:start="4733:34" pos:end="4733:34">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="4735:9" pos:end="4735:71">/* Note: gen_compute_eflags() only gives the condition codes */</comment>

        <expr_stmt pos:start="4737:9" pos:end="4737:49"><expr pos:start="4737:9" pos:end="4737:48"><call pos:start="4737:9" pos:end="4737:48"><name pos:start="4737:9" pos:end="4737:22">tcg_gen_ori_tl</name><argument_list pos:start="4737:23" pos:end="4737:48">(<argument pos:start="4737:24" pos:end="4737:31"><expr pos:start="4737:24" pos:end="4737:31"><name pos:start="4737:24" pos:end="4737:31"><name pos:start="4737:24" pos:end="4737:28">cpu_T</name><index pos:start="4737:29" pos:end="4737:31">[<expr pos:start="4737:30" pos:end="4737:30"><literal type="number" pos:start="4737:30" pos:end="4737:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4737:34" pos:end="4737:41"><expr pos:start="4737:34" pos:end="4737:41"><name pos:start="4737:34" pos:end="4737:41"><name pos:start="4737:34" pos:end="4737:38">cpu_T</name><index pos:start="4737:39" pos:end="4737:41">[<expr pos:start="4737:40" pos:end="4737:40"><literal type="number" pos:start="4737:40" pos:end="4737:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4737:44" pos:end="4737:47"><expr pos:start="4737:44" pos:end="4737:47"><literal type="number" pos:start="4737:44" pos:end="4737:47">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4739:9" pos:end="4739:41"><expr pos:start="4739:9" pos:end="4739:40"><call pos:start="4739:9" pos:end="4739:40"><name pos:start="4739:9" pos:end="4739:25">gen_op_mov_reg_T0</name><argument_list pos:start="4739:26" pos:end="4739:40">(<argument pos:start="4739:27" pos:end="4739:33"><expr pos:start="4739:27" pos:end="4739:33"><name pos:start="4739:27" pos:end="4739:33">OT_BYTE</name></expr></argument>, <argument pos:start="4739:36" pos:end="4739:39"><expr pos:start="4739:36" pos:end="4739:39"><name pos:start="4739:36" pos:end="4739:39">R_AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4741:9" pos:end="4741:14">break;</break>

    <case pos:start="4743:5" pos:end="4743:14">case <expr pos:start="4743:10" pos:end="4743:13"><literal type="number" pos:start="4743:10" pos:end="4743:13">0xf5</literal></expr>:</case> <comment type="block" pos:start="4743:16" pos:end="4743:24">/* cmc */</comment>

        <if_stmt pos:start="4745:9" pos:end="4747:39"><if pos:start="4745:9" pos:end="4747:39">if <condition pos:start="4745:12" pos:end="4745:38">(<expr pos:start="4745:13" pos:end="4745:37"><name pos:start="4745:13" pos:end="4745:20"><name pos:start="4745:13" pos:end="4745:13">s</name><operator pos:start="4745:14" pos:end="4745:15">-&gt;</operator><name pos:start="4745:16" pos:end="4745:20">cc_op</name></name> <operator pos:start="4745:22" pos:end="4745:23">!=</operator> <name pos:start="4745:25" pos:end="4745:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4747:13" pos:end="4747:39"><block_content pos:start="4747:13" pos:end="4747:39">

            <expr_stmt pos:start="4747:13" pos:end="4747:39"><expr pos:start="4747:13" pos:end="4747:38"><call pos:start="4747:13" pos:end="4747:38"><name pos:start="4747:13" pos:end="4747:28">gen_op_set_cc_op</name><argument_list pos:start="4747:29" pos:end="4747:38">(<argument pos:start="4747:30" pos:end="4747:37"><expr pos:start="4747:30" pos:end="4747:37"><name pos:start="4747:30" pos:end="4747:37"><name pos:start="4747:30" pos:end="4747:30">s</name><operator pos:start="4747:31" pos:end="4747:32">-&gt;</operator><name pos:start="4747:33" pos:end="4747:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4749:9" pos:end="4749:39"><expr pos:start="4749:9" pos:end="4749:38"><call pos:start="4749:9" pos:end="4749:38"><name pos:start="4749:9" pos:end="4749:26">gen_compute_eflags</name><argument_list pos:start="4749:27" pos:end="4749:38">(<argument pos:start="4749:28" pos:end="4749:37"><expr pos:start="4749:28" pos:end="4749:37"><name pos:start="4749:28" pos:end="4749:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4751:9" pos:end="4751:54"><expr pos:start="4751:9" pos:end="4751:53"><call pos:start="4751:9" pos:end="4751:53"><name pos:start="4751:9" pos:end="4751:23">tcg_gen_xori_tl</name><argument_list pos:start="4751:24" pos:end="4751:53">(<argument pos:start="4751:25" pos:end="4751:34"><expr pos:start="4751:25" pos:end="4751:34"><name pos:start="4751:25" pos:end="4751:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4751:37" pos:end="4751:46"><expr pos:start="4751:37" pos:end="4751:46"><name pos:start="4751:37" pos:end="4751:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4751:49" pos:end="4751:52"><expr pos:start="4751:49" pos:end="4751:52"><name pos:start="4751:49" pos:end="4751:52">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4753:9" pos:end="4753:32"><expr pos:start="4753:9" pos:end="4753:31"><name pos:start="4753:9" pos:end="4753:16"><name pos:start="4753:9" pos:end="4753:9">s</name><operator pos:start="4753:10" pos:end="4753:11">-&gt;</operator><name pos:start="4753:12" pos:end="4753:16">cc_op</name></name> <operator pos:start="4753:18" pos:end="4753:18">=</operator> <name pos:start="4753:20" pos:end="4753:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4755:9" pos:end="4755:14">break;</break>

    <case pos:start="4757:5" pos:end="4757:14">case <expr pos:start="4757:10" pos:end="4757:13"><literal type="number" pos:start="4757:10" pos:end="4757:13">0xf8</literal></expr>:</case> <comment type="block" pos:start="4757:16" pos:end="4757:24">/* clc */</comment>

        <if_stmt pos:start="4759:9" pos:end="4761:39"><if pos:start="4759:9" pos:end="4761:39">if <condition pos:start="4759:12" pos:end="4759:38">(<expr pos:start="4759:13" pos:end="4759:37"><name pos:start="4759:13" pos:end="4759:20"><name pos:start="4759:13" pos:end="4759:13">s</name><operator pos:start="4759:14" pos:end="4759:15">-&gt;</operator><name pos:start="4759:16" pos:end="4759:20">cc_op</name></name> <operator pos:start="4759:22" pos:end="4759:23">!=</operator> <name pos:start="4759:25" pos:end="4759:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4761:13" pos:end="4761:39"><block_content pos:start="4761:13" pos:end="4761:39">

            <expr_stmt pos:start="4761:13" pos:end="4761:39"><expr pos:start="4761:13" pos:end="4761:38"><call pos:start="4761:13" pos:end="4761:38"><name pos:start="4761:13" pos:end="4761:28">gen_op_set_cc_op</name><argument_list pos:start="4761:29" pos:end="4761:38">(<argument pos:start="4761:30" pos:end="4761:37"><expr pos:start="4761:30" pos:end="4761:37"><name pos:start="4761:30" pos:end="4761:37"><name pos:start="4761:30" pos:end="4761:30">s</name><operator pos:start="4761:31" pos:end="4761:32">-&gt;</operator><name pos:start="4761:33" pos:end="4761:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4763:9" pos:end="4763:39"><expr pos:start="4763:9" pos:end="4763:38"><call pos:start="4763:9" pos:end="4763:38"><name pos:start="4763:9" pos:end="4763:26">gen_compute_eflags</name><argument_list pos:start="4763:27" pos:end="4763:38">(<argument pos:start="4763:28" pos:end="4763:37"><expr pos:start="4763:28" pos:end="4763:37"><name pos:start="4763:28" pos:end="4763:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4765:9" pos:end="4765:55"><expr pos:start="4765:9" pos:end="4765:54"><call pos:start="4765:9" pos:end="4765:54"><name pos:start="4765:9" pos:end="4765:23">tcg_gen_andi_tl</name><argument_list pos:start="4765:24" pos:end="4765:54">(<argument pos:start="4765:25" pos:end="4765:34"><expr pos:start="4765:25" pos:end="4765:34"><name pos:start="4765:25" pos:end="4765:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4765:37" pos:end="4765:46"><expr pos:start="4765:37" pos:end="4765:46"><name pos:start="4765:37" pos:end="4765:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4765:49" pos:end="4765:53"><expr pos:start="4765:49" pos:end="4765:53"><operator pos:start="4765:49" pos:end="4765:49">~</operator><name pos:start="4765:50" pos:end="4765:53">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4767:9" pos:end="4767:32"><expr pos:start="4767:9" pos:end="4767:31"><name pos:start="4767:9" pos:end="4767:16"><name pos:start="4767:9" pos:end="4767:9">s</name><operator pos:start="4767:10" pos:end="4767:11">-&gt;</operator><name pos:start="4767:12" pos:end="4767:16">cc_op</name></name> <operator pos:start="4767:18" pos:end="4767:18">=</operator> <name pos:start="4767:20" pos:end="4767:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4769:9" pos:end="4769:14">break;</break>

    <case pos:start="4771:5" pos:end="4771:14">case <expr pos:start="4771:10" pos:end="4771:13"><literal type="number" pos:start="4771:10" pos:end="4771:13">0xf9</literal></expr>:</case> <comment type="block" pos:start="4771:16" pos:end="4771:24">/* stc */</comment>

        <if_stmt pos:start="4773:9" pos:end="4775:39"><if pos:start="4773:9" pos:end="4775:39">if <condition pos:start="4773:12" pos:end="4773:38">(<expr pos:start="4773:13" pos:end="4773:37"><name pos:start="4773:13" pos:end="4773:20"><name pos:start="4773:13" pos:end="4773:13">s</name><operator pos:start="4773:14" pos:end="4773:15">-&gt;</operator><name pos:start="4773:16" pos:end="4773:20">cc_op</name></name> <operator pos:start="4773:22" pos:end="4773:23">!=</operator> <name pos:start="4773:25" pos:end="4773:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4775:13" pos:end="4775:39"><block_content pos:start="4775:13" pos:end="4775:39">

            <expr_stmt pos:start="4775:13" pos:end="4775:39"><expr pos:start="4775:13" pos:end="4775:38"><call pos:start="4775:13" pos:end="4775:38"><name pos:start="4775:13" pos:end="4775:28">gen_op_set_cc_op</name><argument_list pos:start="4775:29" pos:end="4775:38">(<argument pos:start="4775:30" pos:end="4775:37"><expr pos:start="4775:30" pos:end="4775:37"><name pos:start="4775:30" pos:end="4775:37"><name pos:start="4775:30" pos:end="4775:30">s</name><operator pos:start="4775:31" pos:end="4775:32">-&gt;</operator><name pos:start="4775:33" pos:end="4775:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4777:9" pos:end="4777:39"><expr pos:start="4777:9" pos:end="4777:38"><call pos:start="4777:9" pos:end="4777:38"><name pos:start="4777:9" pos:end="4777:26">gen_compute_eflags</name><argument_list pos:start="4777:27" pos:end="4777:38">(<argument pos:start="4777:28" pos:end="4777:37"><expr pos:start="4777:28" pos:end="4777:37"><name pos:start="4777:28" pos:end="4777:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4779:9" pos:end="4779:53"><expr pos:start="4779:9" pos:end="4779:52"><call pos:start="4779:9" pos:end="4779:52"><name pos:start="4779:9" pos:end="4779:22">tcg_gen_ori_tl</name><argument_list pos:start="4779:23" pos:end="4779:52">(<argument pos:start="4779:24" pos:end="4779:33"><expr pos:start="4779:24" pos:end="4779:33"><name pos:start="4779:24" pos:end="4779:33">cpu_cc_src</name></expr></argument>, <argument pos:start="4779:36" pos:end="4779:45"><expr pos:start="4779:36" pos:end="4779:45"><name pos:start="4779:36" pos:end="4779:45">cpu_cc_src</name></expr></argument>, <argument pos:start="4779:48" pos:end="4779:51"><expr pos:start="4779:48" pos:end="4779:51"><name pos:start="4779:48" pos:end="4779:51">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4781:9" pos:end="4781:32"><expr pos:start="4781:9" pos:end="4781:31"><name pos:start="4781:9" pos:end="4781:16"><name pos:start="4781:9" pos:end="4781:9">s</name><operator pos:start="4781:10" pos:end="4781:11">-&gt;</operator><name pos:start="4781:12" pos:end="4781:16">cc_op</name></name> <operator pos:start="4781:18" pos:end="4781:18">=</operator> <name pos:start="4781:20" pos:end="4781:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4783:9" pos:end="4783:14">break;</break>

    <case pos:start="4785:5" pos:end="4785:14">case <expr pos:start="4785:10" pos:end="4785:13"><literal type="number" pos:start="4785:10" pos:end="4785:13">0xfc</literal></expr>:</case> <comment type="block" pos:start="4785:16" pos:end="4785:24">/* cld */</comment>

        <expr_stmt pos:start="4787:9" pos:end="4787:42"><expr pos:start="4787:9" pos:end="4787:41"><call pos:start="4787:9" pos:end="4787:41"><name pos:start="4787:9" pos:end="4787:24">tcg_gen_movi_i32</name><argument_list pos:start="4787:25" pos:end="4787:41">(<argument pos:start="4787:26" pos:end="4787:37"><expr pos:start="4787:26" pos:end="4787:37"><name pos:start="4787:26" pos:end="4787:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4787:40" pos:end="4787:40"><expr pos:start="4787:40" pos:end="4787:40"><literal type="number" pos:start="4787:40" pos:end="4787:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4789:9" pos:end="4789:70"><expr pos:start="4789:9" pos:end="4789:69"><call pos:start="4789:9" pos:end="4789:69"><name pos:start="4789:9" pos:end="4789:22">tcg_gen_st_i32</name><argument_list pos:start="4789:23" pos:end="4789:69">(<argument pos:start="4789:24" pos:end="4789:35"><expr pos:start="4789:24" pos:end="4789:35"><name pos:start="4789:24" pos:end="4789:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4789:38" pos:end="4789:44"><expr pos:start="4789:38" pos:end="4789:44"><name pos:start="4789:38" pos:end="4789:44">cpu_env</name></expr></argument>, <argument pos:start="4789:47" pos:end="4789:68"><expr pos:start="4789:47" pos:end="4789:68"><call pos:start="4789:47" pos:end="4789:68"><name pos:start="4789:47" pos:end="4789:54">offsetof</name><argument_list pos:start="4789:55" pos:end="4789:68">(<argument pos:start="4789:56" pos:end="4789:63"><expr pos:start="4789:56" pos:end="4789:63"><name pos:start="4789:56" pos:end="4789:63">CPUState</name></expr></argument>, <argument pos:start="4789:66" pos:end="4789:67"><expr pos:start="4789:66" pos:end="4789:67"><name pos:start="4789:66" pos:end="4789:67">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4791:9" pos:end="4791:14">break;</break>

    <case pos:start="4793:5" pos:end="4793:14">case <expr pos:start="4793:10" pos:end="4793:13"><literal type="number" pos:start="4793:10" pos:end="4793:13">0xfd</literal></expr>:</case> <comment type="block" pos:start="4793:16" pos:end="4793:24">/* std */</comment>

        <expr_stmt pos:start="4795:9" pos:end="4795:43"><expr pos:start="4795:9" pos:end="4795:42"><call pos:start="4795:9" pos:end="4795:42"><name pos:start="4795:9" pos:end="4795:24">tcg_gen_movi_i32</name><argument_list pos:start="4795:25" pos:end="4795:42">(<argument pos:start="4795:26" pos:end="4795:37"><expr pos:start="4795:26" pos:end="4795:37"><name pos:start="4795:26" pos:end="4795:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4795:40" pos:end="4795:41"><expr pos:start="4795:40" pos:end="4795:41"><operator pos:start="4795:40" pos:end="4795:40">-</operator><literal type="number" pos:start="4795:41" pos:end="4795:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4797:9" pos:end="4797:70"><expr pos:start="4797:9" pos:end="4797:69"><call pos:start="4797:9" pos:end="4797:69"><name pos:start="4797:9" pos:end="4797:22">tcg_gen_st_i32</name><argument_list pos:start="4797:23" pos:end="4797:69">(<argument pos:start="4797:24" pos:end="4797:35"><expr pos:start="4797:24" pos:end="4797:35"><name pos:start="4797:24" pos:end="4797:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4797:38" pos:end="4797:44"><expr pos:start="4797:38" pos:end="4797:44"><name pos:start="4797:38" pos:end="4797:44">cpu_env</name></expr></argument>, <argument pos:start="4797:47" pos:end="4797:68"><expr pos:start="4797:47" pos:end="4797:68"><call pos:start="4797:47" pos:end="4797:68"><name pos:start="4797:47" pos:end="4797:54">offsetof</name><argument_list pos:start="4797:55" pos:end="4797:68">(<argument pos:start="4797:56" pos:end="4797:63"><expr pos:start="4797:56" pos:end="4797:63"><name pos:start="4797:56" pos:end="4797:63">CPUState</name></expr></argument>, <argument pos:start="4797:66" pos:end="4797:67"><expr pos:start="4797:66" pos:end="4797:67"><name pos:start="4797:66" pos:end="4797:67">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4799:9" pos:end="4799:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4803:9" pos:end="4803:34">/************************/</comment>

        <comment type="block" pos:start="4805:9" pos:end="4805:28">/* bit operations */</comment>

    <case pos:start="4807:5" pos:end="4807:15">case <expr pos:start="4807:10" pos:end="4807:14"><literal type="number" pos:start="4807:10" pos:end="4807:14">0x1ba</literal></expr>:</case> <comment type="block" pos:start="4807:17" pos:end="4807:43">/* bt/bts/btr/btc Gv, im */</comment>

        <expr_stmt pos:start="4809:9" pos:end="4809:29"><expr pos:start="4809:9" pos:end="4809:28"><name pos:start="4809:9" pos:end="4809:10">ot</name> <operator pos:start="4809:12" pos:end="4809:12">=</operator> <name pos:start="4809:14" pos:end="4809:18">dflag</name> <operator pos:start="4809:20" pos:end="4809:20">+</operator> <name pos:start="4809:22" pos:end="4809:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4811:9" pos:end="4811:35"><expr pos:start="4811:9" pos:end="4811:34"><name pos:start="4811:9" pos:end="4811:13">modrm</name> <operator pos:start="4811:15" pos:end="4811:15">=</operator> <call pos:start="4811:17" pos:end="4811:34"><name pos:start="4811:17" pos:end="4811:25">ldub_code</name><argument_list pos:start="4811:26" pos:end="4811:34">(<argument pos:start="4811:27" pos:end="4811:33"><expr pos:start="4811:27" pos:end="4811:33"><name pos:start="4811:27" pos:end="4811:31"><name pos:start="4811:27" pos:end="4811:27">s</name><operator pos:start="4811:28" pos:end="4811:29">-&gt;</operator><name pos:start="4811:30" pos:end="4811:31">pc</name></name><operator pos:start="4811:32" pos:end="4811:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4813:9" pos:end="4813:30"><expr pos:start="4813:9" pos:end="4813:29"><name pos:start="4813:9" pos:end="4813:10">op</name> <operator pos:start="4813:12" pos:end="4813:12">=</operator> <operator pos:start="4813:14" pos:end="4813:14">(</operator><name pos:start="4813:15" pos:end="4813:19">modrm</name> <operator pos:start="4813:21" pos:end="4813:22">&gt;&gt;</operator> <literal type="number" pos:start="4813:24" pos:end="4813:24">3</literal><operator pos:start="4813:25" pos:end="4813:25">)</operator> <operator pos:start="4813:27" pos:end="4813:27">&amp;</operator> <literal type="number" pos:start="4813:29" pos:end="4813:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4815:9" pos:end="4815:31"><expr pos:start="4815:9" pos:end="4815:30"><name pos:start="4815:9" pos:end="4815:11">mod</name> <operator pos:start="4815:13" pos:end="4815:13">=</operator> <operator pos:start="4815:15" pos:end="4815:15">(</operator><name pos:start="4815:16" pos:end="4815:20">modrm</name> <operator pos:start="4815:22" pos:end="4815:23">&gt;&gt;</operator> <literal type="number" pos:start="4815:25" pos:end="4815:25">6</literal><operator pos:start="4815:26" pos:end="4815:26">)</operator> <operator pos:start="4815:28" pos:end="4815:28">&amp;</operator> <literal type="number" pos:start="4815:30" pos:end="4815:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4817:9" pos:end="4817:36"><expr pos:start="4817:9" pos:end="4817:35"><name pos:start="4817:9" pos:end="4817:10">rm</name> <operator pos:start="4817:12" pos:end="4817:12">=</operator> <operator pos:start="4817:14" pos:end="4817:14">(</operator><name pos:start="4817:15" pos:end="4817:19">modrm</name> <operator pos:start="4817:21" pos:end="4817:21">&amp;</operator> <literal type="number" pos:start="4817:23" pos:end="4817:23">7</literal><operator pos:start="4817:24" pos:end="4817:24">)</operator> <operator pos:start="4817:26" pos:end="4817:26">|</operator> <call pos:start="4817:28" pos:end="4817:35"><name pos:start="4817:28" pos:end="4817:32">REX_B</name><argument_list pos:start="4817:33" pos:end="4817:35">(<argument pos:start="4817:34" pos:end="4817:34"><expr pos:start="4817:34" pos:end="4817:34"><name pos:start="4817:34" pos:end="4817:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4819:9" pos:end="4831:9"><if pos:start="4819:9" pos:end="4827:9">if <condition pos:start="4819:12" pos:end="4819:21">(<expr pos:start="4819:13" pos:end="4819:20"><name pos:start="4819:13" pos:end="4819:15">mod</name> <operator pos:start="4819:17" pos:end="4819:18">!=</operator> <literal type="number" pos:start="4819:20" pos:end="4819:20">3</literal></expr>)</condition> <block pos:start="4819:23" pos:end="4827:9">{<block_content pos:start="4821:13" pos:end="4825:47">

            <expr_stmt pos:start="4821:13" pos:end="4821:30"><expr pos:start="4821:13" pos:end="4821:29"><name pos:start="4821:13" pos:end="4821:25"><name pos:start="4821:13" pos:end="4821:13">s</name><operator pos:start="4821:14" pos:end="4821:15">-&gt;</operator><name pos:start="4821:16" pos:end="4821:25">rip_offset</name></name> <operator pos:start="4821:27" pos:end="4821:27">=</operator> <literal type="number" pos:start="4821:29" pos:end="4821:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="4823:13" pos:end="4823:61"><expr pos:start="4823:13" pos:end="4823:60"><call pos:start="4823:13" pos:end="4823:60"><name pos:start="4823:13" pos:end="4823:25">gen_lea_modrm</name><argument_list pos:start="4823:26" pos:end="4823:60">(<argument pos:start="4823:27" pos:end="4823:27"><expr pos:start="4823:27" pos:end="4823:27"><name pos:start="4823:27" pos:end="4823:27">s</name></expr></argument>, <argument pos:start="4823:30" pos:end="4823:34"><expr pos:start="4823:30" pos:end="4823:34"><name pos:start="4823:30" pos:end="4823:34">modrm</name></expr></argument>, <argument pos:start="4823:37" pos:end="4823:45"><expr pos:start="4823:37" pos:end="4823:45"><operator pos:start="4823:37" pos:end="4823:37">&amp;</operator><name pos:start="4823:38" pos:end="4823:45">reg_addr</name></expr></argument>, <argument pos:start="4823:48" pos:end="4823:59"><expr pos:start="4823:48" pos:end="4823:59"><operator pos:start="4823:48" pos:end="4823:48">&amp;</operator><name pos:start="4823:49" pos:end="4823:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4825:13" pos:end="4825:47"><expr pos:start="4825:13" pos:end="4825:46"><call pos:start="4825:13" pos:end="4825:46"><name pos:start="4825:13" pos:end="4825:27">gen_op_ld_T0_A0</name><argument_list pos:start="4825:28" pos:end="4825:46">(<argument pos:start="4825:29" pos:end="4825:45"><expr pos:start="4825:29" pos:end="4825:45"><name pos:start="4825:29" pos:end="4825:30">ot</name> <operator pos:start="4825:32" pos:end="4825:32">+</operator> <name pos:start="4825:34" pos:end="4825:45"><name pos:start="4825:34" pos:end="4825:34">s</name><operator pos:start="4825:35" pos:end="4825:36">-&gt;</operator><name pos:start="4825:37" pos:end="4825:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4827:11" pos:end="4831:9">else <block pos:start="4827:16" pos:end="4831:9">{<block_content pos:start="4829:13" pos:end="4829:41">

            <expr_stmt pos:start="4829:13" pos:end="4829:41"><expr pos:start="4829:13" pos:end="4829:40"><call pos:start="4829:13" pos:end="4829:40"><name pos:start="4829:13" pos:end="4829:29">gen_op_mov_TN_reg</name><argument_list pos:start="4829:30" pos:end="4829:40">(<argument pos:start="4829:31" pos:end="4829:32"><expr pos:start="4829:31" pos:end="4829:32"><name pos:start="4829:31" pos:end="4829:32">ot</name></expr></argument>, <argument pos:start="4829:35" pos:end="4829:35"><expr pos:start="4829:35" pos:end="4829:35"><literal type="number" pos:start="4829:35" pos:end="4829:35">0</literal></expr></argument>, <argument pos:start="4829:38" pos:end="4829:39"><expr pos:start="4829:38" pos:end="4829:39"><name pos:start="4829:38" pos:end="4829:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="4833:9" pos:end="4833:24">/* load shift */</comment>

        <expr_stmt pos:start="4835:9" pos:end="4835:33"><expr pos:start="4835:9" pos:end="4835:32"><name pos:start="4835:9" pos:end="4835:11">val</name> <operator pos:start="4835:13" pos:end="4835:13">=</operator> <call pos:start="4835:15" pos:end="4835:32"><name pos:start="4835:15" pos:end="4835:23">ldub_code</name><argument_list pos:start="4835:24" pos:end="4835:32">(<argument pos:start="4835:25" pos:end="4835:31"><expr pos:start="4835:25" pos:end="4835:31"><name pos:start="4835:25" pos:end="4835:29"><name pos:start="4835:25" pos:end="4835:25">s</name><operator pos:start="4835:26" pos:end="4835:27">-&gt;</operator><name pos:start="4835:28" pos:end="4835:29">pc</name></name><operator pos:start="4835:30" pos:end="4835:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4837:9" pos:end="4837:31"><expr pos:start="4837:9" pos:end="4837:30"><call pos:start="4837:9" pos:end="4837:30"><name pos:start="4837:9" pos:end="4837:25">gen_op_movl_T1_im</name><argument_list pos:start="4837:26" pos:end="4837:30">(<argument pos:start="4837:27" pos:end="4837:29"><expr pos:start="4837:27" pos:end="4837:29"><name pos:start="4837:27" pos:end="4837:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4839:9" pos:end="4841:28"><if pos:start="4839:9" pos:end="4841:28">if <condition pos:start="4839:12" pos:end="4839:19">(<expr pos:start="4839:13" pos:end="4839:18"><name pos:start="4839:13" pos:end="4839:14">op</name> <operator pos:start="4839:16" pos:end="4839:16">&lt;</operator> <literal type="number" pos:start="4839:18" pos:end="4839:18">4</literal></expr>)</condition><block type="pseudo" pos:start="4841:13" pos:end="4841:28"><block_content pos:start="4841:13" pos:end="4841:28">

            <goto pos:start="4841:13" pos:end="4841:28">goto <name pos:start="4841:18" pos:end="4841:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4843:9" pos:end="4843:16"><expr pos:start="4843:9" pos:end="4843:15"><name pos:start="4843:9" pos:end="4843:10">op</name> <operator pos:start="4843:12" pos:end="4843:13">-=</operator> <literal type="number" pos:start="4843:15" pos:end="4843:15">4</literal></expr>;</expr_stmt>

        <goto pos:start="4845:9" pos:end="4845:19">goto <name pos:start="4845:14" pos:end="4845:18">bt_op</name>;</goto>

    <case pos:start="4847:5" pos:end="4847:15">case <expr pos:start="4847:10" pos:end="4847:14"><literal type="number" pos:start="4847:10" pos:end="4847:14">0x1a3</literal></expr>:</case> <comment type="block" pos:start="4847:17" pos:end="4847:31">/* bt Gv, Ev */</comment>

        <expr_stmt pos:start="4849:9" pos:end="4849:15"><expr pos:start="4849:9" pos:end="4849:14"><name pos:start="4849:9" pos:end="4849:10">op</name> <operator pos:start="4849:12" pos:end="4849:12">=</operator> <literal type="number" pos:start="4849:14" pos:end="4849:14">0</literal></expr>;</expr_stmt>

        <goto pos:start="4851:9" pos:end="4851:20">goto <name pos:start="4851:14" pos:end="4851:19">do_btx</name>;</goto>

    <case pos:start="4853:5" pos:end="4853:15">case <expr pos:start="4853:10" pos:end="4853:14"><literal type="number" pos:start="4853:10" pos:end="4853:14">0x1ab</literal></expr>:</case> <comment type="block" pos:start="4853:17" pos:end="4853:25">/* bts */</comment>

        <expr_stmt pos:start="4855:9" pos:end="4855:15"><expr pos:start="4855:9" pos:end="4855:14"><name pos:start="4855:9" pos:end="4855:10">op</name> <operator pos:start="4855:12" pos:end="4855:12">=</operator> <literal type="number" pos:start="4855:14" pos:end="4855:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="4857:9" pos:end="4857:20">goto <name pos:start="4857:14" pos:end="4857:19">do_btx</name>;</goto>

    <case pos:start="4859:5" pos:end="4859:15">case <expr pos:start="4859:10" pos:end="4859:14"><literal type="number" pos:start="4859:10" pos:end="4859:14">0x1b3</literal></expr>:</case> <comment type="block" pos:start="4859:17" pos:end="4859:25">/* btr */</comment>

        <expr_stmt pos:start="4861:9" pos:end="4861:15"><expr pos:start="4861:9" pos:end="4861:14"><name pos:start="4861:9" pos:end="4861:10">op</name> <operator pos:start="4861:12" pos:end="4861:12">=</operator> <literal type="number" pos:start="4861:14" pos:end="4861:14">2</literal></expr>;</expr_stmt>

        <goto pos:start="4863:9" pos:end="4863:20">goto <name pos:start="4863:14" pos:end="4863:19">do_btx</name>;</goto>

    <case pos:start="4865:5" pos:end="4865:15">case <expr pos:start="4865:10" pos:end="4865:14"><literal type="number" pos:start="4865:10" pos:end="4865:14">0x1bb</literal></expr>:</case> <comment type="block" pos:start="4865:17" pos:end="4865:25">/* btc */</comment>

        <expr_stmt pos:start="4867:9" pos:end="4867:15"><expr pos:start="4867:9" pos:end="4867:14"><name pos:start="4867:9" pos:end="4867:10">op</name> <operator pos:start="4867:12" pos:end="4867:12">=</operator> <literal type="number" pos:start="4867:14" pos:end="4867:14">3</literal></expr>;</expr_stmt>

    <label pos:start="4869:5" pos:end="4869:11"><name pos:start="4869:5" pos:end="4869:10">do_btx</name>:</label>

        <expr_stmt pos:start="4871:9" pos:end="4871:29"><expr pos:start="4871:9" pos:end="4871:28"><name pos:start="4871:9" pos:end="4871:10">ot</name> <operator pos:start="4871:12" pos:end="4871:12">=</operator> <name pos:start="4871:14" pos:end="4871:18">dflag</name> <operator pos:start="4871:20" pos:end="4871:20">+</operator> <name pos:start="4871:22" pos:end="4871:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4873:9" pos:end="4873:35"><expr pos:start="4873:9" pos:end="4873:34"><name pos:start="4873:9" pos:end="4873:13">modrm</name> <operator pos:start="4873:15" pos:end="4873:15">=</operator> <call pos:start="4873:17" pos:end="4873:34"><name pos:start="4873:17" pos:end="4873:25">ldub_code</name><argument_list pos:start="4873:26" pos:end="4873:34">(<argument pos:start="4873:27" pos:end="4873:33"><expr pos:start="4873:27" pos:end="4873:33"><name pos:start="4873:27" pos:end="4873:31"><name pos:start="4873:27" pos:end="4873:27">s</name><operator pos:start="4873:28" pos:end="4873:29">-&gt;</operator><name pos:start="4873:30" pos:end="4873:31">pc</name></name><operator pos:start="4873:32" pos:end="4873:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4875:9" pos:end="4875:41"><expr pos:start="4875:9" pos:end="4875:40"><name pos:start="4875:9" pos:end="4875:11">reg</name> <operator pos:start="4875:13" pos:end="4875:13">=</operator> <operator pos:start="4875:15" pos:end="4875:15">(</operator><operator pos:start="4875:16" pos:end="4875:16">(</operator><name pos:start="4875:17" pos:end="4875:21">modrm</name> <operator pos:start="4875:23" pos:end="4875:24">&gt;&gt;</operator> <literal type="number" pos:start="4875:26" pos:end="4875:26">3</literal><operator pos:start="4875:27" pos:end="4875:27">)</operator> <operator pos:start="4875:29" pos:end="4875:29">&amp;</operator> <literal type="number" pos:start="4875:31" pos:end="4875:31">7</literal><operator pos:start="4875:32" pos:end="4875:32">)</operator> <operator pos:start="4875:34" pos:end="4875:34">|</operator> <name pos:start="4875:36" pos:end="4875:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4877:9" pos:end="4877:31"><expr pos:start="4877:9" pos:end="4877:30"><name pos:start="4877:9" pos:end="4877:11">mod</name> <operator pos:start="4877:13" pos:end="4877:13">=</operator> <operator pos:start="4877:15" pos:end="4877:15">(</operator><name pos:start="4877:16" pos:end="4877:20">modrm</name> <operator pos:start="4877:22" pos:end="4877:23">&gt;&gt;</operator> <literal type="number" pos:start="4877:25" pos:end="4877:25">6</literal><operator pos:start="4877:26" pos:end="4877:26">)</operator> <operator pos:start="4877:28" pos:end="4877:28">&amp;</operator> <literal type="number" pos:start="4877:30" pos:end="4877:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4879:9" pos:end="4879:36"><expr pos:start="4879:9" pos:end="4879:35"><name pos:start="4879:9" pos:end="4879:10">rm</name> <operator pos:start="4879:12" pos:end="4879:12">=</operator> <operator pos:start="4879:14" pos:end="4879:14">(</operator><name pos:start="4879:15" pos:end="4879:19">modrm</name> <operator pos:start="4879:21" pos:end="4879:21">&amp;</operator> <literal type="number" pos:start="4879:23" pos:end="4879:23">7</literal><operator pos:start="4879:24" pos:end="4879:24">)</operator> <operator pos:start="4879:26" pos:end="4879:26">|</operator> <call pos:start="4879:28" pos:end="4879:35"><name pos:start="4879:28" pos:end="4879:32">REX_B</name><argument_list pos:start="4879:33" pos:end="4879:35">(<argument pos:start="4879:34" pos:end="4879:34"><expr pos:start="4879:34" pos:end="4879:34"><name pos:start="4879:34" pos:end="4879:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4881:9" pos:end="4881:43"><expr pos:start="4881:9" pos:end="4881:42"><call pos:start="4881:9" pos:end="4881:42"><name pos:start="4881:9" pos:end="4881:25">gen_op_mov_TN_reg</name><argument_list pos:start="4881:26" pos:end="4881:42">(<argument pos:start="4881:27" pos:end="4881:33"><expr pos:start="4881:27" pos:end="4881:33"><name pos:start="4881:27" pos:end="4881:33">OT_LONG</name></expr></argument>, <argument pos:start="4881:36" pos:end="4881:36"><expr pos:start="4881:36" pos:end="4881:36"><literal type="number" pos:start="4881:36" pos:end="4881:36">1</literal></expr></argument>, <argument pos:start="4881:39" pos:end="4881:41"><expr pos:start="4881:39" pos:end="4881:41"><name pos:start="4881:39" pos:end="4881:41">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4883:9" pos:end="4903:9"><if pos:start="4883:9" pos:end="4899:9">if <condition pos:start="4883:12" pos:end="4883:21">(<expr pos:start="4883:13" pos:end="4883:20"><name pos:start="4883:13" pos:end="4883:15">mod</name> <operator pos:start="4883:17" pos:end="4883:18">!=</operator> <literal type="number" pos:start="4883:20" pos:end="4883:20">3</literal></expr>)</condition> <block pos:start="4883:23" pos:end="4899:9">{<block_content pos:start="4885:13" pos:end="4897:47">

            <expr_stmt pos:start="4885:13" pos:end="4885:61"><expr pos:start="4885:13" pos:end="4885:60"><call pos:start="4885:13" pos:end="4885:60"><name pos:start="4885:13" pos:end="4885:25">gen_lea_modrm</name><argument_list pos:start="4885:26" pos:end="4885:60">(<argument pos:start="4885:27" pos:end="4885:27"><expr pos:start="4885:27" pos:end="4885:27"><name pos:start="4885:27" pos:end="4885:27">s</name></expr></argument>, <argument pos:start="4885:30" pos:end="4885:34"><expr pos:start="4885:30" pos:end="4885:34"><name pos:start="4885:30" pos:end="4885:34">modrm</name></expr></argument>, <argument pos:start="4885:37" pos:end="4885:45"><expr pos:start="4885:37" pos:end="4885:45"><operator pos:start="4885:37" pos:end="4885:37">&amp;</operator><name pos:start="4885:38" pos:end="4885:45">reg_addr</name></expr></argument>, <argument pos:start="4885:48" pos:end="4885:59"><expr pos:start="4885:48" pos:end="4885:59"><operator pos:start="4885:48" pos:end="4885:48">&amp;</operator><name pos:start="4885:49" pos:end="4885:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4887:13" pos:end="4887:62">/* specific case: we need to add a displacement */</comment>

            <expr_stmt pos:start="4889:13" pos:end="4889:35"><expr pos:start="4889:13" pos:end="4889:34"><call pos:start="4889:13" pos:end="4889:34"><name pos:start="4889:13" pos:end="4889:20">gen_exts</name><argument_list pos:start="4889:21" pos:end="4889:34">(<argument pos:start="4889:22" pos:end="4889:23"><expr pos:start="4889:22" pos:end="4889:23"><name pos:start="4889:22" pos:end="4889:23">ot</name></expr></argument>, <argument pos:start="4889:26" pos:end="4889:33"><expr pos:start="4889:26" pos:end="4889:33"><name pos:start="4889:26" pos:end="4889:33"><name pos:start="4889:26" pos:end="4889:30">cpu_T</name><index pos:start="4889:31" pos:end="4889:33">[<expr pos:start="4889:32" pos:end="4889:32"><literal type="number" pos:start="4889:32" pos:end="4889:32">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4891:13" pos:end="4891:56"><expr pos:start="4891:13" pos:end="4891:55"><call pos:start="4891:13" pos:end="4891:55"><name pos:start="4891:13" pos:end="4891:27">tcg_gen_sari_tl</name><argument_list pos:start="4891:28" pos:end="4891:55">(<argument pos:start="4891:29" pos:end="4891:36"><expr pos:start="4891:29" pos:end="4891:36"><name pos:start="4891:29" pos:end="4891:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4891:39" pos:end="4891:46"><expr pos:start="4891:39" pos:end="4891:46"><name pos:start="4891:39" pos:end="4891:46"><name pos:start="4891:39" pos:end="4891:43">cpu_T</name><index pos:start="4891:44" pos:end="4891:46">[<expr pos:start="4891:45" pos:end="4891:45"><literal type="number" pos:start="4891:45" pos:end="4891:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4891:49" pos:end="4891:54"><expr pos:start="4891:49" pos:end="4891:54"><literal type="number" pos:start="4891:49" pos:end="4891:51">3</literal> <operator pos:start="4891:51" pos:end="4891:51">+</operator> <name pos:start="4891:53" pos:end="4891:54">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4893:13" pos:end="4893:52"><expr pos:start="4893:13" pos:end="4893:51"><call pos:start="4893:13" pos:end="4893:51"><name pos:start="4893:13" pos:end="4893:27">tcg_gen_shli_tl</name><argument_list pos:start="4893:28" pos:end="4893:51">(<argument pos:start="4893:29" pos:end="4893:36"><expr pos:start="4893:29" pos:end="4893:36"><name pos:start="4893:29" pos:end="4893:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4893:39" pos:end="4893:46"><expr pos:start="4893:39" pos:end="4893:46"><name pos:start="4893:39" pos:end="4893:46">cpu_tmp0</name></expr></argument>, <argument pos:start="4893:49" pos:end="4893:50"><expr pos:start="4893:49" pos:end="4893:50"><name pos:start="4893:49" pos:end="4893:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4895:13" pos:end="4895:53"><expr pos:start="4895:13" pos:end="4895:52"><call pos:start="4895:13" pos:end="4895:52"><name pos:start="4895:13" pos:end="4895:26">tcg_gen_add_tl</name><argument_list pos:start="4895:27" pos:end="4895:52">(<argument pos:start="4895:28" pos:end="4895:33"><expr pos:start="4895:28" pos:end="4895:33"><name pos:start="4895:28" pos:end="4895:33">cpu_A0</name></expr></argument>, <argument pos:start="4895:36" pos:end="4895:41"><expr pos:start="4895:36" pos:end="4895:41"><name pos:start="4895:36" pos:end="4895:41">cpu_A0</name></expr></argument>, <argument pos:start="4895:44" pos:end="4895:51"><expr pos:start="4895:44" pos:end="4895:51"><name pos:start="4895:44" pos:end="4895:51">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4897:13" pos:end="4897:47"><expr pos:start="4897:13" pos:end="4897:46"><call pos:start="4897:13" pos:end="4897:46"><name pos:start="4897:13" pos:end="4897:27">gen_op_ld_T0_A0</name><argument_list pos:start="4897:28" pos:end="4897:46">(<argument pos:start="4897:29" pos:end="4897:45"><expr pos:start="4897:29" pos:end="4897:45"><name pos:start="4897:29" pos:end="4897:30">ot</name> <operator pos:start="4897:32" pos:end="4897:32">+</operator> <name pos:start="4897:34" pos:end="4897:45"><name pos:start="4897:34" pos:end="4897:34">s</name><operator pos:start="4897:35" pos:end="4897:36">-&gt;</operator><name pos:start="4897:37" pos:end="4897:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4899:11" pos:end="4903:9">else <block pos:start="4899:16" pos:end="4903:9">{<block_content pos:start="4901:13" pos:end="4901:41">

            <expr_stmt pos:start="4901:13" pos:end="4901:41"><expr pos:start="4901:13" pos:end="4901:40"><call pos:start="4901:13" pos:end="4901:40"><name pos:start="4901:13" pos:end="4901:29">gen_op_mov_TN_reg</name><argument_list pos:start="4901:30" pos:end="4901:40">(<argument pos:start="4901:31" pos:end="4901:32"><expr pos:start="4901:31" pos:end="4901:32"><name pos:start="4901:31" pos:end="4901:32">ot</name></expr></argument>, <argument pos:start="4901:35" pos:end="4901:35"><expr pos:start="4901:35" pos:end="4901:35"><literal type="number" pos:start="4901:35" pos:end="4901:35">0</literal></expr></argument>, <argument pos:start="4901:38" pos:end="4901:39"><expr pos:start="4901:38" pos:end="4901:39"><name pos:start="4901:38" pos:end="4901:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <label pos:start="4905:5" pos:end="4905:10"><name pos:start="4905:5" pos:end="4905:9">bt_op</name>:</label>

        <expr_stmt pos:start="4907:9" pos:end="4907:65"><expr pos:start="4907:9" pos:end="4907:64"><call pos:start="4907:9" pos:end="4907:64"><name pos:start="4907:9" pos:end="4907:23">tcg_gen_andi_tl</name><argument_list pos:start="4907:24" pos:end="4907:64">(<argument pos:start="4907:25" pos:end="4907:32"><expr pos:start="4907:25" pos:end="4907:32"><name pos:start="4907:25" pos:end="4907:32"><name pos:start="4907:25" pos:end="4907:29">cpu_T</name><index pos:start="4907:30" pos:end="4907:32">[<expr pos:start="4907:31" pos:end="4907:31"><literal type="number" pos:start="4907:31" pos:end="4907:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4907:35" pos:end="4907:42"><expr pos:start="4907:35" pos:end="4907:42"><name pos:start="4907:35" pos:end="4907:42"><name pos:start="4907:35" pos:end="4907:39">cpu_T</name><index pos:start="4907:40" pos:end="4907:42">[<expr pos:start="4907:41" pos:end="4907:41"><literal type="number" pos:start="4907:41" pos:end="4907:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4907:45" pos:end="4907:63"><expr pos:start="4907:45" pos:end="4907:63"><operator pos:start="4907:45" pos:end="4907:45">(</operator><literal type="number" pos:start="4907:46" pos:end="4907:46">1</literal> <operator pos:start="4907:48" pos:end="4907:49">&lt;&lt;</operator> <operator pos:start="4907:51" pos:end="4907:51">(</operator><literal type="number" pos:start="4907:52" pos:end="4907:54">3</literal> <operator pos:start="4907:54" pos:end="4907:54">+</operator> <name pos:start="4907:56" pos:end="4907:57">ot</name><operator pos:start="4907:58" pos:end="4907:58">)</operator><operator pos:start="4907:59" pos:end="4907:59">)</operator> <operator pos:start="4907:61" pos:end="4907:61">-</operator> <literal type="number" pos:start="4907:63" pos:end="4907:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="4909:9" pos:end="4959:9">switch<condition pos:start="4909:15" pos:end="4909:18">(<expr pos:start="4909:16" pos:end="4909:17"><name pos:start="4909:16" pos:end="4909:17">op</name></expr>)</condition> <block pos:start="4909:20" pos:end="4959:9">{<block_content pos:start="4911:9" pos:end="4957:18">

        <case pos:start="4911:9" pos:end="4911:15">case <expr pos:start="4911:14" pos:end="4911:14"><literal type="number" pos:start="4911:14" pos:end="4911:14">0</literal></expr>:</case>

            <expr_stmt pos:start="4913:13" pos:end="4913:59"><expr pos:start="4913:13" pos:end="4913:58"><call pos:start="4913:13" pos:end="4913:58"><name pos:start="4913:13" pos:end="4913:26">tcg_gen_shr_tl</name><argument_list pos:start="4913:27" pos:end="4913:58">(<argument pos:start="4913:28" pos:end="4913:37"><expr pos:start="4913:28" pos:end="4913:37"><name pos:start="4913:28" pos:end="4913:37">cpu_cc_src</name></expr></argument>, <argument pos:start="4913:40" pos:end="4913:47"><expr pos:start="4913:40" pos:end="4913:47"><name pos:start="4913:40" pos:end="4913:47"><name pos:start="4913:40" pos:end="4913:44">cpu_T</name><index pos:start="4913:45" pos:end="4913:47">[<expr pos:start="4913:46" pos:end="4913:46"><literal type="number" pos:start="4913:46" pos:end="4913:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4913:50" pos:end="4913:57"><expr pos:start="4913:50" pos:end="4913:57"><name pos:start="4913:50" pos:end="4913:57"><name pos:start="4913:50" pos:end="4913:54">cpu_T</name><index pos:start="4913:55" pos:end="4913:57">[<expr pos:start="4913:56" pos:end="4913:56"><literal type="number" pos:start="4913:56" pos:end="4913:56">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4915:13" pos:end="4915:43"><expr pos:start="4915:13" pos:end="4915:42"><call pos:start="4915:13" pos:end="4915:42"><name pos:start="4915:13" pos:end="4915:27">tcg_gen_movi_tl</name><argument_list pos:start="4915:28" pos:end="4915:42">(<argument pos:start="4915:29" pos:end="4915:38"><expr pos:start="4915:29" pos:end="4915:38"><name pos:start="4915:29" pos:end="4915:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="4915:41" pos:end="4915:41"><expr pos:start="4915:41" pos:end="4915:41"><literal type="number" pos:start="4915:41" pos:end="4915:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4917:13" pos:end="4917:18">break;</break>

        <case pos:start="4919:9" pos:end="4919:15">case <expr pos:start="4919:14" pos:end="4919:14"><literal type="number" pos:start="4919:14" pos:end="4919:14">1</literal></expr>:</case>

            <expr_stmt pos:start="4921:13" pos:end="4921:57"><expr pos:start="4921:13" pos:end="4921:56"><call pos:start="4921:13" pos:end="4921:56"><name pos:start="4921:13" pos:end="4921:26">tcg_gen_shr_tl</name><argument_list pos:start="4921:27" pos:end="4921:56">(<argument pos:start="4921:28" pos:end="4921:35"><expr pos:start="4921:28" pos:end="4921:35"><name pos:start="4921:28" pos:end="4921:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4921:38" pos:end="4921:45"><expr pos:start="4921:38" pos:end="4921:45"><name pos:start="4921:38" pos:end="4921:45"><name pos:start="4921:38" pos:end="4921:42">cpu_T</name><index pos:start="4921:43" pos:end="4921:45">[<expr pos:start="4921:44" pos:end="4921:44"><literal type="number" pos:start="4921:44" pos:end="4921:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4921:48" pos:end="4921:55"><expr pos:start="4921:48" pos:end="4921:55"><name pos:start="4921:48" pos:end="4921:55"><name pos:start="4921:48" pos:end="4921:52">cpu_T</name><index pos:start="4921:53" pos:end="4921:55">[<expr pos:start="4921:54" pos:end="4921:54"><literal type="number" pos:start="4921:54" pos:end="4921:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4923:13" pos:end="4923:41"><expr pos:start="4923:13" pos:end="4923:40"><call pos:start="4923:13" pos:end="4923:40"><name pos:start="4923:13" pos:end="4923:27">tcg_gen_movi_tl</name><argument_list pos:start="4923:28" pos:end="4923:40">(<argument pos:start="4923:29" pos:end="4923:36"><expr pos:start="4923:29" pos:end="4923:36"><name pos:start="4923:29" pos:end="4923:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4923:39" pos:end="4923:39"><expr pos:start="4923:39" pos:end="4923:39"><literal type="number" pos:start="4923:39" pos:end="4923:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4925:13" pos:end="4925:57"><expr pos:start="4925:13" pos:end="4925:56"><call pos:start="4925:13" pos:end="4925:56"><name pos:start="4925:13" pos:end="4925:26">tcg_gen_shl_tl</name><argument_list pos:start="4925:27" pos:end="4925:56">(<argument pos:start="4925:28" pos:end="4925:35"><expr pos:start="4925:28" pos:end="4925:35"><name pos:start="4925:28" pos:end="4925:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4925:38" pos:end="4925:45"><expr pos:start="4925:38" pos:end="4925:45"><name pos:start="4925:38" pos:end="4925:45">cpu_tmp0</name></expr></argument>, <argument pos:start="4925:48" pos:end="4925:55"><expr pos:start="4925:48" pos:end="4925:55"><name pos:start="4925:48" pos:end="4925:55"><name pos:start="4925:48" pos:end="4925:52">cpu_T</name><index pos:start="4925:53" pos:end="4925:55">[<expr pos:start="4925:54" pos:end="4925:54"><literal type="number" pos:start="4925:54" pos:end="4925:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4927:13" pos:end="4927:56"><expr pos:start="4927:13" pos:end="4927:55"><call pos:start="4927:13" pos:end="4927:55"><name pos:start="4927:13" pos:end="4927:25">tcg_gen_or_tl</name><argument_list pos:start="4927:26" pos:end="4927:55">(<argument pos:start="4927:27" pos:end="4927:34"><expr pos:start="4927:27" pos:end="4927:34"><name pos:start="4927:27" pos:end="4927:34"><name pos:start="4927:27" pos:end="4927:31">cpu_T</name><index pos:start="4927:32" pos:end="4927:34">[<expr pos:start="4927:33" pos:end="4927:33"><literal type="number" pos:start="4927:33" pos:end="4927:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4927:37" pos:end="4927:44"><expr pos:start="4927:37" pos:end="4927:44"><name pos:start="4927:37" pos:end="4927:44"><name pos:start="4927:37" pos:end="4927:41">cpu_T</name><index pos:start="4927:42" pos:end="4927:44">[<expr pos:start="4927:43" pos:end="4927:43"><literal type="number" pos:start="4927:43" pos:end="4927:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4927:47" pos:end="4927:54"><expr pos:start="4927:47" pos:end="4927:54"><name pos:start="4927:47" pos:end="4927:54">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4929:13" pos:end="4929:18">break;</break>

        <case pos:start="4931:9" pos:end="4931:15">case <expr pos:start="4931:14" pos:end="4931:14"><literal type="number" pos:start="4931:14" pos:end="4931:14">2</literal></expr>:</case>

            <expr_stmt pos:start="4933:13" pos:end="4933:57"><expr pos:start="4933:13" pos:end="4933:56"><call pos:start="4933:13" pos:end="4933:56"><name pos:start="4933:13" pos:end="4933:26">tcg_gen_shr_tl</name><argument_list pos:start="4933:27" pos:end="4933:56">(<argument pos:start="4933:28" pos:end="4933:35"><expr pos:start="4933:28" pos:end="4933:35"><name pos:start="4933:28" pos:end="4933:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4933:38" pos:end="4933:45"><expr pos:start="4933:38" pos:end="4933:45"><name pos:start="4933:38" pos:end="4933:45"><name pos:start="4933:38" pos:end="4933:42">cpu_T</name><index pos:start="4933:43" pos:end="4933:45">[<expr pos:start="4933:44" pos:end="4933:44"><literal type="number" pos:start="4933:44" pos:end="4933:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4933:48" pos:end="4933:55"><expr pos:start="4933:48" pos:end="4933:55"><name pos:start="4933:48" pos:end="4933:55"><name pos:start="4933:48" pos:end="4933:52">cpu_T</name><index pos:start="4933:53" pos:end="4933:55">[<expr pos:start="4933:54" pos:end="4933:54"><literal type="number" pos:start="4933:54" pos:end="4933:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4935:13" pos:end="4935:41"><expr pos:start="4935:13" pos:end="4935:40"><call pos:start="4935:13" pos:end="4935:40"><name pos:start="4935:13" pos:end="4935:27">tcg_gen_movi_tl</name><argument_list pos:start="4935:28" pos:end="4935:40">(<argument pos:start="4935:29" pos:end="4935:36"><expr pos:start="4935:29" pos:end="4935:36"><name pos:start="4935:29" pos:end="4935:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4935:39" pos:end="4935:39"><expr pos:start="4935:39" pos:end="4935:39"><literal type="number" pos:start="4935:39" pos:end="4935:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4937:13" pos:end="4937:57"><expr pos:start="4937:13" pos:end="4937:56"><call pos:start="4937:13" pos:end="4937:56"><name pos:start="4937:13" pos:end="4937:26">tcg_gen_shl_tl</name><argument_list pos:start="4937:27" pos:end="4937:56">(<argument pos:start="4937:28" pos:end="4937:35"><expr pos:start="4937:28" pos:end="4937:35"><name pos:start="4937:28" pos:end="4937:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4937:38" pos:end="4937:45"><expr pos:start="4937:38" pos:end="4937:45"><name pos:start="4937:38" pos:end="4937:45">cpu_tmp0</name></expr></argument>, <argument pos:start="4937:48" pos:end="4937:55"><expr pos:start="4937:48" pos:end="4937:55"><name pos:start="4937:48" pos:end="4937:55"><name pos:start="4937:48" pos:end="4937:52">cpu_T</name><index pos:start="4937:53" pos:end="4937:55">[<expr pos:start="4937:54" pos:end="4937:54"><literal type="number" pos:start="4937:54" pos:end="4937:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4939:13" pos:end="4939:47"><expr pos:start="4939:13" pos:end="4939:46"><call pos:start="4939:13" pos:end="4939:46"><name pos:start="4939:13" pos:end="4939:26">tcg_gen_not_tl</name><argument_list pos:start="4939:27" pos:end="4939:46">(<argument pos:start="4939:28" pos:end="4939:35"><expr pos:start="4939:28" pos:end="4939:35"><name pos:start="4939:28" pos:end="4939:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4939:38" pos:end="4939:45"><expr pos:start="4939:38" pos:end="4939:45"><name pos:start="4939:38" pos:end="4939:45">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4941:13" pos:end="4941:57"><expr pos:start="4941:13" pos:end="4941:56"><call pos:start="4941:13" pos:end="4941:56"><name pos:start="4941:13" pos:end="4941:26">tcg_gen_and_tl</name><argument_list pos:start="4941:27" pos:end="4941:56">(<argument pos:start="4941:28" pos:end="4941:35"><expr pos:start="4941:28" pos:end="4941:35"><name pos:start="4941:28" pos:end="4941:35"><name pos:start="4941:28" pos:end="4941:32">cpu_T</name><index pos:start="4941:33" pos:end="4941:35">[<expr pos:start="4941:34" pos:end="4941:34"><literal type="number" pos:start="4941:34" pos:end="4941:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4941:38" pos:end="4941:45"><expr pos:start="4941:38" pos:end="4941:45"><name pos:start="4941:38" pos:end="4941:45"><name pos:start="4941:38" pos:end="4941:42">cpu_T</name><index pos:start="4941:43" pos:end="4941:45">[<expr pos:start="4941:44" pos:end="4941:44"><literal type="number" pos:start="4941:44" pos:end="4941:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4941:48" pos:end="4941:55"><expr pos:start="4941:48" pos:end="4941:55"><name pos:start="4941:48" pos:end="4941:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4943:13" pos:end="4943:18">break;</break>

        <default pos:start="4945:9" pos:end="4945:16">default:</default>

        <case pos:start="4947:9" pos:end="4947:15">case <expr pos:start="4947:14" pos:end="4947:14"><literal type="number" pos:start="4947:14" pos:end="4947:14">3</literal></expr>:</case>

            <expr_stmt pos:start="4949:13" pos:end="4949:57"><expr pos:start="4949:13" pos:end="4949:56"><call pos:start="4949:13" pos:end="4949:56"><name pos:start="4949:13" pos:end="4949:26">tcg_gen_shr_tl</name><argument_list pos:start="4949:27" pos:end="4949:56">(<argument pos:start="4949:28" pos:end="4949:35"><expr pos:start="4949:28" pos:end="4949:35"><name pos:start="4949:28" pos:end="4949:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4949:38" pos:end="4949:45"><expr pos:start="4949:38" pos:end="4949:45"><name pos:start="4949:38" pos:end="4949:45"><name pos:start="4949:38" pos:end="4949:42">cpu_T</name><index pos:start="4949:43" pos:end="4949:45">[<expr pos:start="4949:44" pos:end="4949:44"><literal type="number" pos:start="4949:44" pos:end="4949:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4949:48" pos:end="4949:55"><expr pos:start="4949:48" pos:end="4949:55"><name pos:start="4949:48" pos:end="4949:55"><name pos:start="4949:48" pos:end="4949:52">cpu_T</name><index pos:start="4949:53" pos:end="4949:55">[<expr pos:start="4949:54" pos:end="4949:54"><literal type="number" pos:start="4949:54" pos:end="4949:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4951:13" pos:end="4951:41"><expr pos:start="4951:13" pos:end="4951:40"><call pos:start="4951:13" pos:end="4951:40"><name pos:start="4951:13" pos:end="4951:27">tcg_gen_movi_tl</name><argument_list pos:start="4951:28" pos:end="4951:40">(<argument pos:start="4951:29" pos:end="4951:36"><expr pos:start="4951:29" pos:end="4951:36"><name pos:start="4951:29" pos:end="4951:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4951:39" pos:end="4951:39"><expr pos:start="4951:39" pos:end="4951:39"><literal type="number" pos:start="4951:39" pos:end="4951:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4953:13" pos:end="4953:57"><expr pos:start="4953:13" pos:end="4953:56"><call pos:start="4953:13" pos:end="4953:56"><name pos:start="4953:13" pos:end="4953:26">tcg_gen_shl_tl</name><argument_list pos:start="4953:27" pos:end="4953:56">(<argument pos:start="4953:28" pos:end="4953:35"><expr pos:start="4953:28" pos:end="4953:35"><name pos:start="4953:28" pos:end="4953:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4953:38" pos:end="4953:45"><expr pos:start="4953:38" pos:end="4953:45"><name pos:start="4953:38" pos:end="4953:45">cpu_tmp0</name></expr></argument>, <argument pos:start="4953:48" pos:end="4953:55"><expr pos:start="4953:48" pos:end="4953:55"><name pos:start="4953:48" pos:end="4953:55"><name pos:start="4953:48" pos:end="4953:52">cpu_T</name><index pos:start="4953:53" pos:end="4953:55">[<expr pos:start="4953:54" pos:end="4953:54"><literal type="number" pos:start="4953:54" pos:end="4953:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4955:13" pos:end="4955:57"><expr pos:start="4955:13" pos:end="4955:56"><call pos:start="4955:13" pos:end="4955:56"><name pos:start="4955:13" pos:end="4955:26">tcg_gen_xor_tl</name><argument_list pos:start="4955:27" pos:end="4955:56">(<argument pos:start="4955:28" pos:end="4955:35"><expr pos:start="4955:28" pos:end="4955:35"><name pos:start="4955:28" pos:end="4955:35"><name pos:start="4955:28" pos:end="4955:32">cpu_T</name><index pos:start="4955:33" pos:end="4955:35">[<expr pos:start="4955:34" pos:end="4955:34"><literal type="number" pos:start="4955:34" pos:end="4955:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4955:38" pos:end="4955:45"><expr pos:start="4955:38" pos:end="4955:45"><name pos:start="4955:38" pos:end="4955:45"><name pos:start="4955:38" pos:end="4955:42">cpu_T</name><index pos:start="4955:43" pos:end="4955:45">[<expr pos:start="4955:44" pos:end="4955:44"><literal type="number" pos:start="4955:44" pos:end="4955:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4955:48" pos:end="4955:55"><expr pos:start="4955:48" pos:end="4955:55"><name pos:start="4955:48" pos:end="4955:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4957:13" pos:end="4957:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="4961:9" pos:end="4961:35"><expr pos:start="4961:9" pos:end="4961:34"><name pos:start="4961:9" pos:end="4961:16"><name pos:start="4961:9" pos:end="4961:9">s</name><operator pos:start="4961:10" pos:end="4961:11">-&gt;</operator><name pos:start="4961:12" pos:end="4961:16">cc_op</name></name> <operator pos:start="4961:18" pos:end="4961:18">=</operator> <name pos:start="4961:20" pos:end="4961:29">CC_OP_SARB</name> <operator pos:start="4961:31" pos:end="4961:31">+</operator> <name pos:start="4961:33" pos:end="4961:34">ot</name></expr>;</expr_stmt>

        <if_stmt pos:start="4963:9" pos:end="4977:9"><if pos:start="4963:9" pos:end="4977:9">if <condition pos:start="4963:12" pos:end="4963:20">(<expr pos:start="4963:13" pos:end="4963:19"><name pos:start="4963:13" pos:end="4963:14">op</name> <operator pos:start="4963:16" pos:end="4963:17">!=</operator> <literal type="number" pos:start="4963:19" pos:end="4963:19">0</literal></expr>)</condition> <block pos:start="4963:22" pos:end="4977:9">{<block_content pos:start="4965:13" pos:end="4975:43">

            <if_stmt pos:start="4965:13" pos:end="4971:42"><if pos:start="4965:13" pos:end="4967:51">if <condition pos:start="4965:16" pos:end="4965:25">(<expr pos:start="4965:17" pos:end="4965:24"><name pos:start="4965:17" pos:end="4965:19">mod</name> <operator pos:start="4965:21" pos:end="4965:22">!=</operator> <literal type="number" pos:start="4965:24" pos:end="4965:24">3</literal></expr>)</condition><block type="pseudo" pos:start="4967:17" pos:end="4967:51"><block_content pos:start="4967:17" pos:end="4967:51">

                <expr_stmt pos:start="4967:17" pos:end="4967:51"><expr pos:start="4967:17" pos:end="4967:50"><call pos:start="4967:17" pos:end="4967:50"><name pos:start="4967:17" pos:end="4967:31">gen_op_st_T0_A0</name><argument_list pos:start="4967:32" pos:end="4967:50">(<argument pos:start="4967:33" pos:end="4967:49"><expr pos:start="4967:33" pos:end="4967:49"><name pos:start="4967:33" pos:end="4967:34">ot</name> <operator pos:start="4967:36" pos:end="4967:36">+</operator> <name pos:start="4967:38" pos:end="4967:49"><name pos:start="4967:38" pos:end="4967:38">s</name><operator pos:start="4967:39" pos:end="4967:40">-&gt;</operator><name pos:start="4967:41" pos:end="4967:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="4969:13" pos:end="4971:42">else<block type="pseudo" pos:start="4971:17" pos:end="4971:42"><block_content pos:start="4971:17" pos:end="4971:42">

                <expr_stmt pos:start="4971:17" pos:end="4971:42"><expr pos:start="4971:17" pos:end="4971:41"><call pos:start="4971:17" pos:end="4971:41"><name pos:start="4971:17" pos:end="4971:33">gen_op_mov_reg_T0</name><argument_list pos:start="4971:34" pos:end="4971:41">(<argument pos:start="4971:35" pos:end="4971:36"><expr pos:start="4971:35" pos:end="4971:36"><name pos:start="4971:35" pos:end="4971:36">ot</name></expr></argument>, <argument pos:start="4971:39" pos:end="4971:40"><expr pos:start="4971:39" pos:end="4971:40"><name pos:start="4971:39" pos:end="4971:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="4973:13" pos:end="4973:49"><expr pos:start="4973:13" pos:end="4973:48"><call pos:start="4973:13" pos:end="4973:48"><name pos:start="4973:13" pos:end="4973:26">tcg_gen_mov_tl</name><argument_list pos:start="4973:27" pos:end="4973:48">(<argument pos:start="4973:28" pos:end="4973:37"><expr pos:start="4973:28" pos:end="4973:37"><name pos:start="4973:28" pos:end="4973:37">cpu_cc_src</name></expr></argument>, <argument pos:start="4973:40" pos:end="4973:47"><expr pos:start="4973:40" pos:end="4973:47"><name pos:start="4973:40" pos:end="4973:47">cpu_tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4975:13" pos:end="4975:43"><expr pos:start="4975:13" pos:end="4975:42"><call pos:start="4975:13" pos:end="4975:42"><name pos:start="4975:13" pos:end="4975:27">tcg_gen_movi_tl</name><argument_list pos:start="4975:28" pos:end="4975:42">(<argument pos:start="4975:29" pos:end="4975:38"><expr pos:start="4975:29" pos:end="4975:38"><name pos:start="4975:29" pos:end="4975:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="4975:41" pos:end="4975:41"><expr pos:start="4975:41" pos:end="4975:41"><literal type="number" pos:start="4975:41" pos:end="4975:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4979:9" pos:end="4979:14">break;</break>

    <case pos:start="4981:5" pos:end="4981:15">case <expr pos:start="4981:10" pos:end="4981:14"><literal type="number" pos:start="4981:10" pos:end="4981:14">0x1bc</literal></expr>:</case> <comment type="block" pos:start="4981:17" pos:end="4981:25">/* bsf */</comment>

    <case pos:start="4983:5" pos:end="4983:15">case <expr pos:start="4983:10" pos:end="4983:14"><literal type="number" pos:start="4983:10" pos:end="4983:14">0x1bd</literal></expr>:</case> <comment type="block" pos:start="4983:17" pos:end="4983:25">/* bsr */</comment>

        <block pos:start="4985:9" pos:end="5035:9">{<block_content pos:start="4987:13" pos:end="5033:30">

            <decl_stmt pos:start="4987:13" pos:end="4987:23"><decl pos:start="4987:13" pos:end="4987:22"><type pos:start="4987:13" pos:end="4987:15"><name pos:start="4987:13" pos:end="4987:15">int</name></type> <name pos:start="4987:17" pos:end="4987:22">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4989:13" pos:end="4989:20"><decl pos:start="4989:13" pos:end="4989:19"><type pos:start="4989:13" pos:end="4989:16"><name pos:start="4989:13" pos:end="4989:16">TCGv</name></type> <name pos:start="4989:18" pos:end="4989:19">t0</name></decl>;</decl_stmt>



            <expr_stmt pos:start="4993:13" pos:end="4993:33"><expr pos:start="4993:13" pos:end="4993:32"><name pos:start="4993:13" pos:end="4993:14">ot</name> <operator pos:start="4993:16" pos:end="4993:16">=</operator> <name pos:start="4993:18" pos:end="4993:22">dflag</name> <operator pos:start="4993:24" pos:end="4993:24">+</operator> <name pos:start="4993:26" pos:end="4993:32">OT_WORD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4995:13" pos:end="4995:39"><expr pos:start="4995:13" pos:end="4995:38"><name pos:start="4995:13" pos:end="4995:17">modrm</name> <operator pos:start="4995:19" pos:end="4995:19">=</operator> <call pos:start="4995:21" pos:end="4995:38"><name pos:start="4995:21" pos:end="4995:29">ldub_code</name><argument_list pos:start="4995:30" pos:end="4995:38">(<argument pos:start="4995:31" pos:end="4995:37"><expr pos:start="4995:31" pos:end="4995:37"><name pos:start="4995:31" pos:end="4995:35"><name pos:start="4995:31" pos:end="4995:31">s</name><operator pos:start="4995:32" pos:end="4995:33">-&gt;</operator><name pos:start="4995:34" pos:end="4995:35">pc</name></name><operator pos:start="4995:36" pos:end="4995:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4997:13" pos:end="4997:45"><expr pos:start="4997:13" pos:end="4997:44"><name pos:start="4997:13" pos:end="4997:15">reg</name> <operator pos:start="4997:17" pos:end="4997:17">=</operator> <operator pos:start="4997:19" pos:end="4997:19">(</operator><operator pos:start="4997:20" pos:end="4997:20">(</operator><name pos:start="4997:21" pos:end="4997:25">modrm</name> <operator pos:start="4997:27" pos:end="4997:28">&gt;&gt;</operator> <literal type="number" pos:start="4997:30" pos:end="4997:30">3</literal><operator pos:start="4997:31" pos:end="4997:31">)</operator> <operator pos:start="4997:33" pos:end="4997:33">&amp;</operator> <literal type="number" pos:start="4997:35" pos:end="4997:35">7</literal><operator pos:start="4997:36" pos:end="4997:36">)</operator> <operator pos:start="4997:38" pos:end="4997:38">|</operator> <name pos:start="4997:40" pos:end="4997:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4999:13" pos:end="4999:53"><expr pos:start="4999:13" pos:end="4999:52"><call pos:start="4999:13" pos:end="4999:52"><name pos:start="4999:13" pos:end="4999:26">gen_ldst_modrm</name><argument_list pos:start="4999:27" pos:end="4999:52">(<argument pos:start="4999:28" pos:end="4999:28"><expr pos:start="4999:28" pos:end="4999:28"><name pos:start="4999:28" pos:end="4999:28">s</name></expr></argument>, <argument pos:start="4999:31" pos:end="4999:35"><expr pos:start="4999:31" pos:end="4999:35"><name pos:start="4999:31" pos:end="4999:35">modrm</name></expr></argument>, <argument pos:start="4999:38" pos:end="4999:39"><expr pos:start="4999:38" pos:end="4999:39"><name pos:start="4999:38" pos:end="4999:39">ot</name></expr></argument>, <argument pos:start="4999:42" pos:end="4999:48"><expr pos:start="4999:42" pos:end="4999:48"><name pos:start="4999:42" pos:end="4999:48">OR_TMP0</name></expr></argument>, <argument pos:start="4999:51" pos:end="4999:51"><expr pos:start="4999:51" pos:end="4999:51"><literal type="number" pos:start="4999:51" pos:end="4999:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5001:13" pos:end="5001:35"><expr pos:start="5001:13" pos:end="5001:34"><call pos:start="5001:13" pos:end="5001:34"><name pos:start="5001:13" pos:end="5001:20">gen_extu</name><argument_list pos:start="5001:21" pos:end="5001:34">(<argument pos:start="5001:22" pos:end="5001:23"><expr pos:start="5001:22" pos:end="5001:23"><name pos:start="5001:22" pos:end="5001:23">ot</name></expr></argument>, <argument pos:start="5001:26" pos:end="5001:33"><expr pos:start="5001:26" pos:end="5001:33"><name pos:start="5001:26" pos:end="5001:33"><name pos:start="5001:26" pos:end="5001:30">cpu_T</name><index pos:start="5001:31" pos:end="5001:33">[<expr pos:start="5001:32" pos:end="5001:32"><literal type="number" pos:start="5001:32" pos:end="5001:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5003:13" pos:end="5003:37"><expr pos:start="5003:13" pos:end="5003:36"><name pos:start="5003:13" pos:end="5003:18">label1</name> <operator pos:start="5003:20" pos:end="5003:20">=</operator> <call pos:start="5003:22" pos:end="5003:36"><name pos:start="5003:22" pos:end="5003:34">gen_new_label</name><argument_list pos:start="5003:35" pos:end="5003:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5005:13" pos:end="5005:43"><expr pos:start="5005:13" pos:end="5005:42"><call pos:start="5005:13" pos:end="5005:42"><name pos:start="5005:13" pos:end="5005:27">tcg_gen_movi_tl</name><argument_list pos:start="5005:28" pos:end="5005:42">(<argument pos:start="5005:29" pos:end="5005:38"><expr pos:start="5005:29" pos:end="5005:38"><name pos:start="5005:29" pos:end="5005:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="5005:41" pos:end="5005:41"><expr pos:start="5005:41" pos:end="5005:41"><literal type="number" pos:start="5005:41" pos:end="5005:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5007:13" pos:end="5007:38"><expr pos:start="5007:13" pos:end="5007:37"><name pos:start="5007:13" pos:end="5007:14">t0</name> <operator pos:start="5007:16" pos:end="5007:16">=</operator> <call pos:start="5007:18" pos:end="5007:37"><name pos:start="5007:18" pos:end="5007:35">tcg_temp_local_new</name><argument_list pos:start="5007:36" pos:end="5007:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5009:13" pos:end="5009:41"><expr pos:start="5009:13" pos:end="5009:40"><call pos:start="5009:13" pos:end="5009:40"><name pos:start="5009:13" pos:end="5009:26">tcg_gen_mov_tl</name><argument_list pos:start="5009:27" pos:end="5009:40">(<argument pos:start="5009:28" pos:end="5009:29"><expr pos:start="5009:28" pos:end="5009:29"><name pos:start="5009:28" pos:end="5009:29">t0</name></expr></argument>, <argument pos:start="5009:32" pos:end="5009:39"><expr pos:start="5009:32" pos:end="5009:39"><name pos:start="5009:32" pos:end="5009:39"><name pos:start="5009:32" pos:end="5009:36">cpu_T</name><index pos:start="5009:37" pos:end="5009:39">[<expr pos:start="5009:38" pos:end="5009:38"><literal type="number" pos:start="5009:38" pos:end="5009:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5011:13" pos:end="5011:59"><expr pos:start="5011:13" pos:end="5011:58"><call pos:start="5011:13" pos:end="5011:58"><name pos:start="5011:13" pos:end="5011:30">tcg_gen_brcondi_tl</name><argument_list pos:start="5011:31" pos:end="5011:58">(<argument pos:start="5011:32" pos:end="5011:42"><expr pos:start="5011:32" pos:end="5011:42"><name pos:start="5011:32" pos:end="5011:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="5011:45" pos:end="5011:46"><expr pos:start="5011:45" pos:end="5011:46"><name pos:start="5011:45" pos:end="5011:46">t0</name></expr></argument>, <argument pos:start="5011:49" pos:end="5011:49"><expr pos:start="5011:49" pos:end="5011:49"><literal type="number" pos:start="5011:49" pos:end="5011:49">0</literal></expr></argument>, <argument pos:start="5011:52" pos:end="5011:57"><expr pos:start="5011:52" pos:end="5011:57"><name pos:start="5011:52" pos:end="5011:57">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5013:13" pos:end="5021:13"><if pos:start="5013:13" pos:end="5017:13">if <condition pos:start="5013:16" pos:end="5013:22">(<expr pos:start="5013:17" pos:end="5013:21"><name pos:start="5013:17" pos:end="5013:17">b</name> <operator pos:start="5013:19" pos:end="5013:19">&amp;</operator> <literal type="number" pos:start="5013:21" pos:end="5013:21">1</literal></expr>)</condition> <block pos:start="5013:24" pos:end="5017:13">{<block_content pos:start="5015:17" pos:end="5015:45">

                <expr_stmt pos:start="5015:17" pos:end="5015:45"><expr pos:start="5015:17" pos:end="5015:44"><call pos:start="5015:17" pos:end="5015:44"><name pos:start="5015:17" pos:end="5015:30">gen_helper_bsr</name><argument_list pos:start="5015:31" pos:end="5015:44">(<argument pos:start="5015:32" pos:end="5015:39"><expr pos:start="5015:32" pos:end="5015:39"><name pos:start="5015:32" pos:end="5015:39"><name pos:start="5015:32" pos:end="5015:36">cpu_T</name><index pos:start="5015:37" pos:end="5015:39">[<expr pos:start="5015:38" pos:end="5015:38"><literal type="number" pos:start="5015:38" pos:end="5015:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5015:42" pos:end="5015:43"><expr pos:start="5015:42" pos:end="5015:43"><name pos:start="5015:42" pos:end="5015:43">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5017:15" pos:end="5021:13">else <block pos:start="5017:20" pos:end="5021:13">{<block_content pos:start="5019:17" pos:end="5019:45">

                <expr_stmt pos:start="5019:17" pos:end="5019:45"><expr pos:start="5019:17" pos:end="5019:44"><call pos:start="5019:17" pos:end="5019:44"><name pos:start="5019:17" pos:end="5019:30">gen_helper_bsf</name><argument_list pos:start="5019:31" pos:end="5019:44">(<argument pos:start="5019:32" pos:end="5019:39"><expr pos:start="5019:32" pos:end="5019:39"><name pos:start="5019:32" pos:end="5019:39"><name pos:start="5019:32" pos:end="5019:36">cpu_T</name><index pos:start="5019:37" pos:end="5019:39">[<expr pos:start="5019:38" pos:end="5019:38"><literal type="number" pos:start="5019:38" pos:end="5019:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5019:42" pos:end="5019:43"><expr pos:start="5019:42" pos:end="5019:43"><name pos:start="5019:42" pos:end="5019:43">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="5023:13" pos:end="5023:39"><expr pos:start="5023:13" pos:end="5023:38"><call pos:start="5023:13" pos:end="5023:38"><name pos:start="5023:13" pos:end="5023:29">gen_op_mov_reg_T0</name><argument_list pos:start="5023:30" pos:end="5023:38">(<argument pos:start="5023:31" pos:end="5023:32"><expr pos:start="5023:31" pos:end="5023:32"><name pos:start="5023:31" pos:end="5023:32">ot</name></expr></argument>, <argument pos:start="5023:35" pos:end="5023:37"><expr pos:start="5023:35" pos:end="5023:37"><name pos:start="5023:35" pos:end="5023:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5025:13" pos:end="5025:43"><expr pos:start="5025:13" pos:end="5025:42"><call pos:start="5025:13" pos:end="5025:42"><name pos:start="5025:13" pos:end="5025:27">tcg_gen_movi_tl</name><argument_list pos:start="5025:28" pos:end="5025:42">(<argument pos:start="5025:29" pos:end="5025:38"><expr pos:start="5025:29" pos:end="5025:38"><name pos:start="5025:29" pos:end="5025:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="5025:41" pos:end="5025:41"><expr pos:start="5025:41" pos:end="5025:41"><literal type="number" pos:start="5025:41" pos:end="5025:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5027:13" pos:end="5027:34"><expr pos:start="5027:13" pos:end="5027:33"><call pos:start="5027:13" pos:end="5027:33"><name pos:start="5027:13" pos:end="5027:25">gen_set_label</name><argument_list pos:start="5027:26" pos:end="5027:33">(<argument pos:start="5027:27" pos:end="5027:32"><expr pos:start="5027:27" pos:end="5027:32"><name pos:start="5027:27" pos:end="5027:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5029:13" pos:end="5029:43"><expr pos:start="5029:13" pos:end="5029:42"><call pos:start="5029:13" pos:end="5029:42"><name pos:start="5029:13" pos:end="5029:30">tcg_gen_discard_tl</name><argument_list pos:start="5029:31" pos:end="5029:42">(<argument pos:start="5029:32" pos:end="5029:41"><expr pos:start="5029:32" pos:end="5029:41"><name pos:start="5029:32" pos:end="5029:41">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5031:13" pos:end="5031:41"><expr pos:start="5031:13" pos:end="5031:40"><name pos:start="5031:13" pos:end="5031:20"><name pos:start="5031:13" pos:end="5031:13">s</name><operator pos:start="5031:14" pos:end="5031:15">-&gt;</operator><name pos:start="5031:16" pos:end="5031:20">cc_op</name></name> <operator pos:start="5031:22" pos:end="5031:22">=</operator> <name pos:start="5031:24" pos:end="5031:35">CC_OP_LOGICB</name> <operator pos:start="5031:37" pos:end="5031:37">+</operator> <name pos:start="5031:39" pos:end="5031:40">ot</name></expr>;</expr_stmt>

            <expr_stmt pos:start="5033:13" pos:end="5033:30"><expr pos:start="5033:13" pos:end="5033:29"><call pos:start="5033:13" pos:end="5033:29"><name pos:start="5033:13" pos:end="5033:25">tcg_temp_free</name><argument_list pos:start="5033:26" pos:end="5033:29">(<argument pos:start="5033:27" pos:end="5033:28"><expr pos:start="5033:27" pos:end="5033:28"><name pos:start="5033:27" pos:end="5033:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5037:9" pos:end="5037:14">break;</break>

        <comment type="block" format="doxygen" pos:start="5039:9" pos:end="5039:34">/************************/</comment>

        <comment type="block" pos:start="5041:9" pos:end="5041:17">/* bcd */</comment>

    <case pos:start="5043:5" pos:end="5043:14">case <expr pos:start="5043:10" pos:end="5043:13"><literal type="number" pos:start="5043:10" pos:end="5043:13">0x27</literal></expr>:</case> <comment type="block" pos:start="5043:16" pos:end="5043:24">/* daa */</comment>

        <if_stmt pos:start="5045:9" pos:end="5047:28"><if pos:start="5045:9" pos:end="5047:28">if <condition pos:start="5045:12" pos:end="5045:22">(<expr pos:start="5045:13" pos:end="5045:21"><call pos:start="5045:13" pos:end="5045:21"><name pos:start="5045:13" pos:end="5045:18">CODE64</name><argument_list pos:start="5045:19" pos:end="5045:21">(<argument pos:start="5045:20" pos:end="5045:20"><expr pos:start="5045:20" pos:end="5045:20"><name pos:start="5045:20" pos:end="5045:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5047:13" pos:end="5047:28"><block_content pos:start="5047:13" pos:end="5047:28">

            <goto pos:start="5047:13" pos:end="5047:28">goto <name pos:start="5047:18" pos:end="5047:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5049:9" pos:end="5051:39"><if pos:start="5049:9" pos:end="5051:39">if <condition pos:start="5049:12" pos:end="5049:38">(<expr pos:start="5049:13" pos:end="5049:37"><name pos:start="5049:13" pos:end="5049:20"><name pos:start="5049:13" pos:end="5049:13">s</name><operator pos:start="5049:14" pos:end="5049:15">-&gt;</operator><name pos:start="5049:16" pos:end="5049:20">cc_op</name></name> <operator pos:start="5049:22" pos:end="5049:23">!=</operator> <name pos:start="5049:25" pos:end="5049:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5051:13" pos:end="5051:39"><block_content pos:start="5051:13" pos:end="5051:39">

            <expr_stmt pos:start="5051:13" pos:end="5051:39"><expr pos:start="5051:13" pos:end="5051:38"><call pos:start="5051:13" pos:end="5051:38"><name pos:start="5051:13" pos:end="5051:28">gen_op_set_cc_op</name><argument_list pos:start="5051:29" pos:end="5051:38">(<argument pos:start="5051:30" pos:end="5051:37"><expr pos:start="5051:30" pos:end="5051:37"><name pos:start="5051:30" pos:end="5051:37"><name pos:start="5051:30" pos:end="5051:30">s</name><operator pos:start="5051:31" pos:end="5051:32">-&gt;</operator><name pos:start="5051:33" pos:end="5051:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5053:9" pos:end="5053:25"><expr pos:start="5053:9" pos:end="5053:24"><call pos:start="5053:9" pos:end="5053:24"><name pos:start="5053:9" pos:end="5053:22">gen_helper_daa</name><argument_list pos:start="5053:23" pos:end="5053:24">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5055:9" pos:end="5055:32"><expr pos:start="5055:9" pos:end="5055:31"><name pos:start="5055:9" pos:end="5055:16"><name pos:start="5055:9" pos:end="5055:9">s</name><operator pos:start="5055:10" pos:end="5055:11">-&gt;</operator><name pos:start="5055:12" pos:end="5055:16">cc_op</name></name> <operator pos:start="5055:18" pos:end="5055:18">=</operator> <name pos:start="5055:20" pos:end="5055:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5057:9" pos:end="5057:14">break;</break>

    <case pos:start="5059:5" pos:end="5059:14">case <expr pos:start="5059:10" pos:end="5059:13"><literal type="number" pos:start="5059:10" pos:end="5059:13">0x2f</literal></expr>:</case> <comment type="block" pos:start="5059:16" pos:end="5059:24">/* das */</comment>

        <if_stmt pos:start="5061:9" pos:end="5063:28"><if pos:start="5061:9" pos:end="5063:28">if <condition pos:start="5061:12" pos:end="5061:22">(<expr pos:start="5061:13" pos:end="5061:21"><call pos:start="5061:13" pos:end="5061:21"><name pos:start="5061:13" pos:end="5061:18">CODE64</name><argument_list pos:start="5061:19" pos:end="5061:21">(<argument pos:start="5061:20" pos:end="5061:20"><expr pos:start="5061:20" pos:end="5061:20"><name pos:start="5061:20" pos:end="5061:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5063:13" pos:end="5063:28"><block_content pos:start="5063:13" pos:end="5063:28">

            <goto pos:start="5063:13" pos:end="5063:28">goto <name pos:start="5063:18" pos:end="5063:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5065:9" pos:end="5067:39"><if pos:start="5065:9" pos:end="5067:39">if <condition pos:start="5065:12" pos:end="5065:38">(<expr pos:start="5065:13" pos:end="5065:37"><name pos:start="5065:13" pos:end="5065:20"><name pos:start="5065:13" pos:end="5065:13">s</name><operator pos:start="5065:14" pos:end="5065:15">-&gt;</operator><name pos:start="5065:16" pos:end="5065:20">cc_op</name></name> <operator pos:start="5065:22" pos:end="5065:23">!=</operator> <name pos:start="5065:25" pos:end="5065:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5067:13" pos:end="5067:39"><block_content pos:start="5067:13" pos:end="5067:39">

            <expr_stmt pos:start="5067:13" pos:end="5067:39"><expr pos:start="5067:13" pos:end="5067:38"><call pos:start="5067:13" pos:end="5067:38"><name pos:start="5067:13" pos:end="5067:28">gen_op_set_cc_op</name><argument_list pos:start="5067:29" pos:end="5067:38">(<argument pos:start="5067:30" pos:end="5067:37"><expr pos:start="5067:30" pos:end="5067:37"><name pos:start="5067:30" pos:end="5067:37"><name pos:start="5067:30" pos:end="5067:30">s</name><operator pos:start="5067:31" pos:end="5067:32">-&gt;</operator><name pos:start="5067:33" pos:end="5067:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5069:9" pos:end="5069:25"><expr pos:start="5069:9" pos:end="5069:24"><call pos:start="5069:9" pos:end="5069:24"><name pos:start="5069:9" pos:end="5069:22">gen_helper_das</name><argument_list pos:start="5069:23" pos:end="5069:24">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5071:9" pos:end="5071:32"><expr pos:start="5071:9" pos:end="5071:31"><name pos:start="5071:9" pos:end="5071:16"><name pos:start="5071:9" pos:end="5071:9">s</name><operator pos:start="5071:10" pos:end="5071:11">-&gt;</operator><name pos:start="5071:12" pos:end="5071:16">cc_op</name></name> <operator pos:start="5071:18" pos:end="5071:18">=</operator> <name pos:start="5071:20" pos:end="5071:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5073:9" pos:end="5073:14">break;</break>

    <case pos:start="5075:5" pos:end="5075:14">case <expr pos:start="5075:10" pos:end="5075:13"><literal type="number" pos:start="5075:10" pos:end="5075:13">0x37</literal></expr>:</case> <comment type="block" pos:start="5075:16" pos:end="5075:24">/* aaa */</comment>

        <if_stmt pos:start="5077:9" pos:end="5079:28"><if pos:start="5077:9" pos:end="5079:28">if <condition pos:start="5077:12" pos:end="5077:22">(<expr pos:start="5077:13" pos:end="5077:21"><call pos:start="5077:13" pos:end="5077:21"><name pos:start="5077:13" pos:end="5077:18">CODE64</name><argument_list pos:start="5077:19" pos:end="5077:21">(<argument pos:start="5077:20" pos:end="5077:20"><expr pos:start="5077:20" pos:end="5077:20"><name pos:start="5077:20" pos:end="5077:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5079:13" pos:end="5079:28"><block_content pos:start="5079:13" pos:end="5079:28">

            <goto pos:start="5079:13" pos:end="5079:28">goto <name pos:start="5079:18" pos:end="5079:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5081:9" pos:end="5083:39"><if pos:start="5081:9" pos:end="5083:39">if <condition pos:start="5081:12" pos:end="5081:38">(<expr pos:start="5081:13" pos:end="5081:37"><name pos:start="5081:13" pos:end="5081:20"><name pos:start="5081:13" pos:end="5081:13">s</name><operator pos:start="5081:14" pos:end="5081:15">-&gt;</operator><name pos:start="5081:16" pos:end="5081:20">cc_op</name></name> <operator pos:start="5081:22" pos:end="5081:23">!=</operator> <name pos:start="5081:25" pos:end="5081:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5083:13" pos:end="5083:39"><block_content pos:start="5083:13" pos:end="5083:39">

            <expr_stmt pos:start="5083:13" pos:end="5083:39"><expr pos:start="5083:13" pos:end="5083:38"><call pos:start="5083:13" pos:end="5083:38"><name pos:start="5083:13" pos:end="5083:28">gen_op_set_cc_op</name><argument_list pos:start="5083:29" pos:end="5083:38">(<argument pos:start="5083:30" pos:end="5083:37"><expr pos:start="5083:30" pos:end="5083:37"><name pos:start="5083:30" pos:end="5083:37"><name pos:start="5083:30" pos:end="5083:30">s</name><operator pos:start="5083:31" pos:end="5083:32">-&gt;</operator><name pos:start="5083:33" pos:end="5083:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5085:9" pos:end="5085:25"><expr pos:start="5085:9" pos:end="5085:24"><call pos:start="5085:9" pos:end="5085:24"><name pos:start="5085:9" pos:end="5085:22">gen_helper_aaa</name><argument_list pos:start="5085:23" pos:end="5085:24">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5087:9" pos:end="5087:32"><expr pos:start="5087:9" pos:end="5087:31"><name pos:start="5087:9" pos:end="5087:16"><name pos:start="5087:9" pos:end="5087:9">s</name><operator pos:start="5087:10" pos:end="5087:11">-&gt;</operator><name pos:start="5087:12" pos:end="5087:16">cc_op</name></name> <operator pos:start="5087:18" pos:end="5087:18">=</operator> <name pos:start="5087:20" pos:end="5087:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5089:9" pos:end="5089:14">break;</break>

    <case pos:start="5091:5" pos:end="5091:14">case <expr pos:start="5091:10" pos:end="5091:13"><literal type="number" pos:start="5091:10" pos:end="5091:13">0x3f</literal></expr>:</case> <comment type="block" pos:start="5091:16" pos:end="5091:24">/* aas */</comment>

        <if_stmt pos:start="5093:9" pos:end="5095:28"><if pos:start="5093:9" pos:end="5095:28">if <condition pos:start="5093:12" pos:end="5093:22">(<expr pos:start="5093:13" pos:end="5093:21"><call pos:start="5093:13" pos:end="5093:21"><name pos:start="5093:13" pos:end="5093:18">CODE64</name><argument_list pos:start="5093:19" pos:end="5093:21">(<argument pos:start="5093:20" pos:end="5093:20"><expr pos:start="5093:20" pos:end="5093:20"><name pos:start="5093:20" pos:end="5093:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5095:13" pos:end="5095:28"><block_content pos:start="5095:13" pos:end="5095:28">

            <goto pos:start="5095:13" pos:end="5095:28">goto <name pos:start="5095:18" pos:end="5095:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5097:9" pos:end="5099:39"><if pos:start="5097:9" pos:end="5099:39">if <condition pos:start="5097:12" pos:end="5097:38">(<expr pos:start="5097:13" pos:end="5097:37"><name pos:start="5097:13" pos:end="5097:20"><name pos:start="5097:13" pos:end="5097:13">s</name><operator pos:start="5097:14" pos:end="5097:15">-&gt;</operator><name pos:start="5097:16" pos:end="5097:20">cc_op</name></name> <operator pos:start="5097:22" pos:end="5097:23">!=</operator> <name pos:start="5097:25" pos:end="5097:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5099:13" pos:end="5099:39"><block_content pos:start="5099:13" pos:end="5099:39">

            <expr_stmt pos:start="5099:13" pos:end="5099:39"><expr pos:start="5099:13" pos:end="5099:38"><call pos:start="5099:13" pos:end="5099:38"><name pos:start="5099:13" pos:end="5099:28">gen_op_set_cc_op</name><argument_list pos:start="5099:29" pos:end="5099:38">(<argument pos:start="5099:30" pos:end="5099:37"><expr pos:start="5099:30" pos:end="5099:37"><name pos:start="5099:30" pos:end="5099:37"><name pos:start="5099:30" pos:end="5099:30">s</name><operator pos:start="5099:31" pos:end="5099:32">-&gt;</operator><name pos:start="5099:33" pos:end="5099:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5101:9" pos:end="5101:25"><expr pos:start="5101:9" pos:end="5101:24"><call pos:start="5101:9" pos:end="5101:24"><name pos:start="5101:9" pos:end="5101:22">gen_helper_aas</name><argument_list pos:start="5101:23" pos:end="5101:24">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5103:9" pos:end="5103:32"><expr pos:start="5103:9" pos:end="5103:31"><name pos:start="5103:9" pos:end="5103:16"><name pos:start="5103:9" pos:end="5103:9">s</name><operator pos:start="5103:10" pos:end="5103:11">-&gt;</operator><name pos:start="5103:12" pos:end="5103:16">cc_op</name></name> <operator pos:start="5103:18" pos:end="5103:18">=</operator> <name pos:start="5103:20" pos:end="5103:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5105:9" pos:end="5105:14">break;</break>

    <case pos:start="5107:5" pos:end="5107:14">case <expr pos:start="5107:10" pos:end="5107:13"><literal type="number" pos:start="5107:10" pos:end="5107:13">0xd4</literal></expr>:</case> <comment type="block" pos:start="5107:16" pos:end="5107:24">/* aam */</comment>

        <if_stmt pos:start="5109:9" pos:end="5111:28"><if pos:start="5109:9" pos:end="5111:28">if <condition pos:start="5109:12" pos:end="5109:22">(<expr pos:start="5109:13" pos:end="5109:21"><call pos:start="5109:13" pos:end="5109:21"><name pos:start="5109:13" pos:end="5109:18">CODE64</name><argument_list pos:start="5109:19" pos:end="5109:21">(<argument pos:start="5109:20" pos:end="5109:20"><expr pos:start="5109:20" pos:end="5109:20"><name pos:start="5109:20" pos:end="5109:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5111:13" pos:end="5111:28"><block_content pos:start="5111:13" pos:end="5111:28">

            <goto pos:start="5111:13" pos:end="5111:28">goto <name pos:start="5111:18" pos:end="5111:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5113:9" pos:end="5113:33"><expr pos:start="5113:9" pos:end="5113:32"><name pos:start="5113:9" pos:end="5113:11">val</name> <operator pos:start="5113:13" pos:end="5113:13">=</operator> <call pos:start="5113:15" pos:end="5113:32"><name pos:start="5113:15" pos:end="5113:23">ldub_code</name><argument_list pos:start="5113:24" pos:end="5113:32">(<argument pos:start="5113:25" pos:end="5113:31"><expr pos:start="5113:25" pos:end="5113:31"><name pos:start="5113:25" pos:end="5113:29"><name pos:start="5113:25" pos:end="5113:25">s</name><operator pos:start="5113:26" pos:end="5113:27">-&gt;</operator><name pos:start="5113:28" pos:end="5113:29">pc</name></name><operator pos:start="5113:30" pos:end="5113:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5115:9" pos:end="5125:9"><if pos:start="5115:9" pos:end="5119:9">if <condition pos:start="5115:12" pos:end="5115:21">(<expr pos:start="5115:13" pos:end="5115:20"><name pos:start="5115:13" pos:end="5115:15">val</name> <operator pos:start="5115:17" pos:end="5115:18">==</operator> <literal type="number" pos:start="5115:20" pos:end="5115:20">0</literal></expr>)</condition> <block pos:start="5115:23" pos:end="5119:9">{<block_content pos:start="5117:13" pos:end="5117:65">

            <expr_stmt pos:start="5117:13" pos:end="5117:65"><expr pos:start="5117:13" pos:end="5117:64"><call pos:start="5117:13" pos:end="5117:64"><name pos:start="5117:13" pos:end="5117:25">gen_exception</name><argument_list pos:start="5117:26" pos:end="5117:64">(<argument pos:start="5117:27" pos:end="5117:27"><expr pos:start="5117:27" pos:end="5117:27"><name pos:start="5117:27" pos:end="5117:27">s</name></expr></argument>, <argument pos:start="5117:30" pos:end="5117:40"><expr pos:start="5117:30" pos:end="5117:40"><name pos:start="5117:30" pos:end="5117:40">EXCP00_DIVZ</name></expr></argument>, <argument pos:start="5117:43" pos:end="5117:63"><expr pos:start="5117:43" pos:end="5117:63"><name pos:start="5117:43" pos:end="5117:50">pc_start</name> <operator pos:start="5117:52" pos:end="5117:52">-</operator> <name pos:start="5117:54" pos:end="5117:63"><name pos:start="5117:54" pos:end="5117:54">s</name><operator pos:start="5117:55" pos:end="5117:56">-&gt;</operator><name pos:start="5117:57" pos:end="5117:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5119:11" pos:end="5125:9">else <block pos:start="5119:16" pos:end="5125:9">{<block_content pos:start="5121:13" pos:end="5123:36">

            <expr_stmt pos:start="5121:13" pos:end="5121:47"><expr pos:start="5121:13" pos:end="5121:46"><call pos:start="5121:13" pos:end="5121:46"><name pos:start="5121:13" pos:end="5121:26">gen_helper_aam</name><argument_list pos:start="5121:27" pos:end="5121:46">(<argument pos:start="5121:28" pos:end="5121:45"><expr pos:start="5121:28" pos:end="5121:45"><call pos:start="5121:28" pos:end="5121:45"><name pos:start="5121:28" pos:end="5121:40">tcg_const_i32</name><argument_list pos:start="5121:41" pos:end="5121:45">(<argument pos:start="5121:42" pos:end="5121:44"><expr pos:start="5121:42" pos:end="5121:44"><name pos:start="5121:42" pos:end="5121:44">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5123:13" pos:end="5123:36"><expr pos:start="5123:13" pos:end="5123:35"><name pos:start="5123:13" pos:end="5123:20"><name pos:start="5123:13" pos:end="5123:13">s</name><operator pos:start="5123:14" pos:end="5123:15">-&gt;</operator><name pos:start="5123:16" pos:end="5123:20">cc_op</name></name> <operator pos:start="5123:22" pos:end="5123:22">=</operator> <name pos:start="5123:24" pos:end="5123:35">CC_OP_LOGICB</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5127:9" pos:end="5127:14">break;</break>

    <case pos:start="5129:5" pos:end="5129:14">case <expr pos:start="5129:10" pos:end="5129:13"><literal type="number" pos:start="5129:10" pos:end="5129:13">0xd5</literal></expr>:</case> <comment type="block" pos:start="5129:16" pos:end="5129:24">/* aad */</comment>

        <if_stmt pos:start="5131:9" pos:end="5133:28"><if pos:start="5131:9" pos:end="5133:28">if <condition pos:start="5131:12" pos:end="5131:22">(<expr pos:start="5131:13" pos:end="5131:21"><call pos:start="5131:13" pos:end="5131:21"><name pos:start="5131:13" pos:end="5131:18">CODE64</name><argument_list pos:start="5131:19" pos:end="5131:21">(<argument pos:start="5131:20" pos:end="5131:20"><expr pos:start="5131:20" pos:end="5131:20"><name pos:start="5131:20" pos:end="5131:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5133:13" pos:end="5133:28"><block_content pos:start="5133:13" pos:end="5133:28">

            <goto pos:start="5133:13" pos:end="5133:28">goto <name pos:start="5133:18" pos:end="5133:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5135:9" pos:end="5135:33"><expr pos:start="5135:9" pos:end="5135:32"><name pos:start="5135:9" pos:end="5135:11">val</name> <operator pos:start="5135:13" pos:end="5135:13">=</operator> <call pos:start="5135:15" pos:end="5135:32"><name pos:start="5135:15" pos:end="5135:23">ldub_code</name><argument_list pos:start="5135:24" pos:end="5135:32">(<argument pos:start="5135:25" pos:end="5135:31"><expr pos:start="5135:25" pos:end="5135:31"><name pos:start="5135:25" pos:end="5135:29"><name pos:start="5135:25" pos:end="5135:25">s</name><operator pos:start="5135:26" pos:end="5135:27">-&gt;</operator><name pos:start="5135:28" pos:end="5135:29">pc</name></name><operator pos:start="5135:30" pos:end="5135:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5137:9" pos:end="5137:43"><expr pos:start="5137:9" pos:end="5137:42"><call pos:start="5137:9" pos:end="5137:42"><name pos:start="5137:9" pos:end="5137:22">gen_helper_aad</name><argument_list pos:start="5137:23" pos:end="5137:42">(<argument pos:start="5137:24" pos:end="5137:41"><expr pos:start="5137:24" pos:end="5137:41"><call pos:start="5137:24" pos:end="5137:41"><name pos:start="5137:24" pos:end="5137:36">tcg_const_i32</name><argument_list pos:start="5137:37" pos:end="5137:41">(<argument pos:start="5137:38" pos:end="5137:40"><expr pos:start="5137:38" pos:end="5137:40"><name pos:start="5137:38" pos:end="5137:40">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5139:9" pos:end="5139:32"><expr pos:start="5139:9" pos:end="5139:31"><name pos:start="5139:9" pos:end="5139:16"><name pos:start="5139:9" pos:end="5139:9">s</name><operator pos:start="5139:10" pos:end="5139:11">-&gt;</operator><name pos:start="5139:12" pos:end="5139:16">cc_op</name></name> <operator pos:start="5139:18" pos:end="5139:18">=</operator> <name pos:start="5139:20" pos:end="5139:31">CC_OP_LOGICB</name></expr>;</expr_stmt>

        <break pos:start="5141:9" pos:end="5141:14">break;</break>

        <comment type="block" format="doxygen" pos:start="5143:9" pos:end="5143:34">/************************/</comment>

        <comment type="block" pos:start="5145:9" pos:end="5145:18">/* misc */</comment>

    <case pos:start="5147:5" pos:end="5147:14">case <expr pos:start="5147:10" pos:end="5147:13"><literal type="number" pos:start="5147:10" pos:end="5147:13">0x90</literal></expr>:</case> <comment type="block" pos:start="5147:16" pos:end="5147:24">/* nop */</comment>

        <comment type="block" pos:start="5149:9" pos:end="5149:38">/* XXX: xchg + rex handling */</comment>

        <comment type="block" pos:start="5151:9" pos:end="5151:49">/* XXX: correct lock test for all insn */</comment>

        <if_stmt pos:start="5153:9" pos:end="5155:28"><if pos:start="5153:9" pos:end="5155:28">if <condition pos:start="5153:12" pos:end="5153:35">(<expr pos:start="5153:13" pos:end="5153:34"><name pos:start="5153:13" pos:end="5153:20">prefixes</name> <operator pos:start="5153:22" pos:end="5153:22">&amp;</operator> <name pos:start="5153:24" pos:end="5153:34">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="5155:13" pos:end="5155:28"><block_content pos:start="5155:13" pos:end="5155:28">

            <goto pos:start="5155:13" pos:end="5155:28">goto <name pos:start="5155:18" pos:end="5155:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5157:9" pos:end="5161:9"><if pos:start="5157:9" pos:end="5161:9">if <condition pos:start="5157:12" pos:end="5157:35">(<expr pos:start="5157:13" pos:end="5157:34"><name pos:start="5157:13" pos:end="5157:20">prefixes</name> <operator pos:start="5157:22" pos:end="5157:22">&amp;</operator> <name pos:start="5157:24" pos:end="5157:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="5157:37" pos:end="5161:9">{<block_content pos:start="5159:13" pos:end="5159:65">

            <expr_stmt pos:start="5159:13" pos:end="5159:65"><expr pos:start="5159:13" pos:end="5159:64"><call pos:start="5159:13" pos:end="5159:64"><name pos:start="5159:13" pos:end="5159:35">gen_svm_check_intercept</name><argument_list pos:start="5159:36" pos:end="5159:64">(<argument pos:start="5159:37" pos:end="5159:37"><expr pos:start="5159:37" pos:end="5159:37"><name pos:start="5159:37" pos:end="5159:37">s</name></expr></argument>, <argument pos:start="5159:40" pos:end="5159:47"><expr pos:start="5159:40" pos:end="5159:47"><name pos:start="5159:40" pos:end="5159:47">pc_start</name></expr></argument>, <argument pos:start="5159:50" pos:end="5159:63"><expr pos:start="5159:50" pos:end="5159:63"><name pos:start="5159:50" pos:end="5159:63">SVM_EXIT_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5163:9" pos:end="5163:14">break;</break>

    <case pos:start="5165:5" pos:end="5165:14">case <expr pos:start="5165:10" pos:end="5165:13"><literal type="number" pos:start="5165:10" pos:end="5165:13">0x9b</literal></expr>:</case> <comment type="block" pos:start="5165:16" pos:end="5165:26">/* fwait */</comment>

        <if_stmt pos:start="5167:9" pos:end="5183:9"><if pos:start="5167:9" pos:end="5173:9">if <condition pos:start="5167:12" pos:end="5169:38">(<expr pos:start="5167:13" pos:end="5169:37"><operator pos:start="5167:13" pos:end="5167:13">(</operator><name pos:start="5167:14" pos:end="5167:21"><name pos:start="5167:14" pos:end="5167:14">s</name><operator pos:start="5167:15" pos:end="5167:16">-&gt;</operator><name pos:start="5167:17" pos:end="5167:21">flags</name></name> <operator pos:start="5167:23" pos:end="5167:23">&amp;</operator> <operator pos:start="5167:25" pos:end="5167:25">(</operator><name pos:start="5167:26" pos:end="5167:35">HF_MP_MASK</name> <operator pos:start="5167:37" pos:end="5167:37">|</operator> <name pos:start="5167:39" pos:end="5167:48">HF_TS_MASK</name><operator pos:start="5167:49" pos:end="5167:49">)</operator><operator pos:start="5167:50" pos:end="5167:50">)</operator> <operator pos:start="5167:52" pos:end="5167:53">==</operator>

            <operator pos:start="5169:13" pos:end="5169:13">(</operator><name pos:start="5169:14" pos:end="5169:23">HF_MP_MASK</name> <operator pos:start="5169:25" pos:end="5169:25">|</operator> <name pos:start="5169:27" pos:end="5169:36">HF_TS_MASK</name><operator pos:start="5169:37" pos:end="5169:37">)</operator></expr>)</condition> <block pos:start="5169:40" pos:end="5173:9">{<block_content pos:start="5171:13" pos:end="5171:65">

            <expr_stmt pos:start="5171:13" pos:end="5171:65"><expr pos:start="5171:13" pos:end="5171:64"><call pos:start="5171:13" pos:end="5171:64"><name pos:start="5171:13" pos:end="5171:25">gen_exception</name><argument_list pos:start="5171:26" pos:end="5171:64">(<argument pos:start="5171:27" pos:end="5171:27"><expr pos:start="5171:27" pos:end="5171:27"><name pos:start="5171:27" pos:end="5171:27">s</name></expr></argument>, <argument pos:start="5171:30" pos:end="5171:40"><expr pos:start="5171:30" pos:end="5171:40"><name pos:start="5171:30" pos:end="5171:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="5171:43" pos:end="5171:63"><expr pos:start="5171:43" pos:end="5171:63"><name pos:start="5171:43" pos:end="5171:50">pc_start</name> <operator pos:start="5171:52" pos:end="5171:52">-</operator> <name pos:start="5171:54" pos:end="5171:63"><name pos:start="5171:54" pos:end="5171:54">s</name><operator pos:start="5171:55" pos:end="5171:56">-&gt;</operator><name pos:start="5171:57" pos:end="5171:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5173:11" pos:end="5183:9">else <block pos:start="5173:16" pos:end="5183:9">{<block_content pos:start="5175:13" pos:end="5181:31">

            <if_stmt pos:start="5175:13" pos:end="5177:43"><if pos:start="5175:13" pos:end="5177:43">if <condition pos:start="5175:16" pos:end="5175:42">(<expr pos:start="5175:17" pos:end="5175:41"><name pos:start="5175:17" pos:end="5175:24"><name pos:start="5175:17" pos:end="5175:17">s</name><operator pos:start="5175:18" pos:end="5175:19">-&gt;</operator><name pos:start="5175:20" pos:end="5175:24">cc_op</name></name> <operator pos:start="5175:26" pos:end="5175:27">!=</operator> <name pos:start="5175:29" pos:end="5175:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5177:17" pos:end="5177:43"><block_content pos:start="5177:17" pos:end="5177:43">

                <expr_stmt pos:start="5177:17" pos:end="5177:43"><expr pos:start="5177:17" pos:end="5177:42"><call pos:start="5177:17" pos:end="5177:42"><name pos:start="5177:17" pos:end="5177:32">gen_op_set_cc_op</name><argument_list pos:start="5177:33" pos:end="5177:42">(<argument pos:start="5177:34" pos:end="5177:41"><expr pos:start="5177:34" pos:end="5177:41"><name pos:start="5177:34" pos:end="5177:41"><name pos:start="5177:34" pos:end="5177:34">s</name><operator pos:start="5177:35" pos:end="5177:36">-&gt;</operator><name pos:start="5177:37" pos:end="5177:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5179:13" pos:end="5179:46"><expr pos:start="5179:13" pos:end="5179:45"><call pos:start="5179:13" pos:end="5179:45"><name pos:start="5179:13" pos:end="5179:22">gen_jmp_im</name><argument_list pos:start="5179:23" pos:end="5179:45">(<argument pos:start="5179:24" pos:end="5179:44"><expr pos:start="5179:24" pos:end="5179:44"><name pos:start="5179:24" pos:end="5179:31">pc_start</name> <operator pos:start="5179:33" pos:end="5179:33">-</operator> <name pos:start="5179:35" pos:end="5179:44"><name pos:start="5179:35" pos:end="5179:35">s</name><operator pos:start="5179:36" pos:end="5179:37">-&gt;</operator><name pos:start="5179:38" pos:end="5179:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5181:13" pos:end="5181:31"><expr pos:start="5181:13" pos:end="5181:30"><call pos:start="5181:13" pos:end="5181:30"><name pos:start="5181:13" pos:end="5181:28">gen_helper_fwait</name><argument_list pos:start="5181:29" pos:end="5181:30">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5185:9" pos:end="5185:14">break;</break>

    <case pos:start="5187:5" pos:end="5187:14">case <expr pos:start="5187:10" pos:end="5187:13"><literal type="number" pos:start="5187:10" pos:end="5187:13">0xcc</literal></expr>:</case> <comment type="block" pos:start="5187:16" pos:end="5187:25">/* int3 */</comment>

        <expr_stmt pos:start="5189:9" pos:end="5189:81"><expr pos:start="5189:9" pos:end="5189:80"><call pos:start="5189:9" pos:end="5189:80"><name pos:start="5189:9" pos:end="5189:21">gen_interrupt</name><argument_list pos:start="5189:22" pos:end="5189:80">(<argument pos:start="5189:23" pos:end="5189:23"><expr pos:start="5189:23" pos:end="5189:23"><name pos:start="5189:23" pos:end="5189:23">s</name></expr></argument>, <argument pos:start="5189:26" pos:end="5189:36"><expr pos:start="5189:26" pos:end="5189:36"><name pos:start="5189:26" pos:end="5189:36">EXCP03_INT3</name></expr></argument>, <argument pos:start="5189:39" pos:end="5189:59"><expr pos:start="5189:39" pos:end="5189:59"><name pos:start="5189:39" pos:end="5189:46">pc_start</name> <operator pos:start="5189:48" pos:end="5189:48">-</operator> <name pos:start="5189:50" pos:end="5189:59"><name pos:start="5189:50" pos:end="5189:50">s</name><operator pos:start="5189:51" pos:end="5189:52">-&gt;</operator><name pos:start="5189:53" pos:end="5189:59">cs_base</name></name></expr></argument>, <argument pos:start="5189:62" pos:end="5189:79"><expr pos:start="5189:62" pos:end="5189:79"><name pos:start="5189:62" pos:end="5189:66"><name pos:start="5189:62" pos:end="5189:62">s</name><operator pos:start="5189:63" pos:end="5189:64">-&gt;</operator><name pos:start="5189:65" pos:end="5189:66">pc</name></name> <operator pos:start="5189:68" pos:end="5189:68">-</operator> <name pos:start="5189:70" pos:end="5189:79"><name pos:start="5189:70" pos:end="5189:70">s</name><operator pos:start="5189:71" pos:end="5189:72">-&gt;</operator><name pos:start="5189:73" pos:end="5189:79">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5191:9" pos:end="5191:14">break;</break>

    <case pos:start="5193:5" pos:end="5193:14">case <expr pos:start="5193:10" pos:end="5193:13"><literal type="number" pos:start="5193:10" pos:end="5193:13">0xcd</literal></expr>:</case> <comment type="block" pos:start="5193:16" pos:end="5193:26">/* int N */</comment>

        <expr_stmt pos:start="5195:9" pos:end="5195:33"><expr pos:start="5195:9" pos:end="5195:32"><name pos:start="5195:9" pos:end="5195:11">val</name> <operator pos:start="5195:13" pos:end="5195:13">=</operator> <call pos:start="5195:15" pos:end="5195:32"><name pos:start="5195:15" pos:end="5195:23">ldub_code</name><argument_list pos:start="5195:24" pos:end="5195:32">(<argument pos:start="5195:25" pos:end="5195:31"><expr pos:start="5195:25" pos:end="5195:31"><name pos:start="5195:25" pos:end="5195:29"><name pos:start="5195:25" pos:end="5195:25">s</name><operator pos:start="5195:26" pos:end="5195:27">-&gt;</operator><name pos:start="5195:28" pos:end="5195:29">pc</name></name><operator pos:start="5195:30" pos:end="5195:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5197:9" pos:end="5205:9"><if pos:start="5197:9" pos:end="5201:9">if <condition pos:start="5197:12" pos:end="5197:36">(<expr pos:start="5197:13" pos:end="5197:35"><name pos:start="5197:13" pos:end="5197:19"><name pos:start="5197:13" pos:end="5197:13">s</name><operator pos:start="5197:14" pos:end="5197:15">-&gt;</operator><name pos:start="5197:16" pos:end="5197:19">vm86</name></name> <operator pos:start="5197:21" pos:end="5197:22">&amp;&amp;</operator> <name pos:start="5197:24" pos:end="5197:30"><name pos:start="5197:24" pos:end="5197:24">s</name><operator pos:start="5197:25" pos:end="5197:26">-&gt;</operator><name pos:start="5197:27" pos:end="5197:30">iopl</name></name> <operator pos:start="5197:32" pos:end="5197:33">!=</operator> <literal type="number" pos:start="5197:35" pos:end="5197:35">3</literal></expr>)</condition> <block pos:start="5197:38" pos:end="5201:9">{<block_content pos:start="5199:13" pos:end="5199:64">

            <expr_stmt pos:start="5199:13" pos:end="5199:64"><expr pos:start="5199:13" pos:end="5199:63"><call pos:start="5199:13" pos:end="5199:63"><name pos:start="5199:13" pos:end="5199:25">gen_exception</name><argument_list pos:start="5199:26" pos:end="5199:63">(<argument pos:start="5199:27" pos:end="5199:27"><expr pos:start="5199:27" pos:end="5199:27"><name pos:start="5199:27" pos:end="5199:27">s</name></expr></argument>, <argument pos:start="5199:30" pos:end="5199:39"><expr pos:start="5199:30" pos:end="5199:39"><name pos:start="5199:30" pos:end="5199:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5199:42" pos:end="5199:62"><expr pos:start="5199:42" pos:end="5199:62"><name pos:start="5199:42" pos:end="5199:49">pc_start</name> <operator pos:start="5199:51" pos:end="5199:51">-</operator> <name pos:start="5199:53" pos:end="5199:62"><name pos:start="5199:53" pos:end="5199:53">s</name><operator pos:start="5199:54" pos:end="5199:55">-&gt;</operator><name pos:start="5199:56" pos:end="5199:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5201:11" pos:end="5205:9">else <block pos:start="5201:16" pos:end="5205:9">{<block_content pos:start="5203:13" pos:end="5203:77">

            <expr_stmt pos:start="5203:13" pos:end="5203:77"><expr pos:start="5203:13" pos:end="5203:76"><call pos:start="5203:13" pos:end="5203:76"><name pos:start="5203:13" pos:end="5203:25">gen_interrupt</name><argument_list pos:start="5203:26" pos:end="5203:76">(<argument pos:start="5203:27" pos:end="5203:27"><expr pos:start="5203:27" pos:end="5203:27"><name pos:start="5203:27" pos:end="5203:27">s</name></expr></argument>, <argument pos:start="5203:30" pos:end="5203:32"><expr pos:start="5203:30" pos:end="5203:32"><name pos:start="5203:30" pos:end="5203:32">val</name></expr></argument>, <argument pos:start="5203:35" pos:end="5203:55"><expr pos:start="5203:35" pos:end="5203:55"><name pos:start="5203:35" pos:end="5203:42">pc_start</name> <operator pos:start="5203:44" pos:end="5203:44">-</operator> <name pos:start="5203:46" pos:end="5203:55"><name pos:start="5203:46" pos:end="5203:46">s</name><operator pos:start="5203:47" pos:end="5203:48">-&gt;</operator><name pos:start="5203:49" pos:end="5203:55">cs_base</name></name></expr></argument>, <argument pos:start="5203:58" pos:end="5203:75"><expr pos:start="5203:58" pos:end="5203:75"><name pos:start="5203:58" pos:end="5203:62"><name pos:start="5203:58" pos:end="5203:58">s</name><operator pos:start="5203:59" pos:end="5203:60">-&gt;</operator><name pos:start="5203:61" pos:end="5203:62">pc</name></name> <operator pos:start="5203:64" pos:end="5203:64">-</operator> <name pos:start="5203:66" pos:end="5203:75"><name pos:start="5203:66" pos:end="5203:66">s</name><operator pos:start="5203:67" pos:end="5203:68">-&gt;</operator><name pos:start="5203:69" pos:end="5203:75">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5207:9" pos:end="5207:14">break;</break>

    <case pos:start="5209:5" pos:end="5209:14">case <expr pos:start="5209:10" pos:end="5209:13"><literal type="number" pos:start="5209:10" pos:end="5209:13">0xce</literal></expr>:</case> <comment type="block" pos:start="5209:16" pos:end="5209:25">/* into */</comment>

        <if_stmt pos:start="5211:9" pos:end="5213:28"><if pos:start="5211:9" pos:end="5213:28">if <condition pos:start="5211:12" pos:end="5211:22">(<expr pos:start="5211:13" pos:end="5211:21"><call pos:start="5211:13" pos:end="5211:21"><name pos:start="5211:13" pos:end="5211:18">CODE64</name><argument_list pos:start="5211:19" pos:end="5211:21">(<argument pos:start="5211:20" pos:end="5211:20"><expr pos:start="5211:20" pos:end="5211:20"><name pos:start="5211:20" pos:end="5211:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5213:13" pos:end="5213:28"><block_content pos:start="5213:13" pos:end="5213:28">

            <goto pos:start="5213:13" pos:end="5213:28">goto <name pos:start="5213:18" pos:end="5213:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5215:9" pos:end="5217:39"><if pos:start="5215:9" pos:end="5217:39">if <condition pos:start="5215:12" pos:end="5215:38">(<expr pos:start="5215:13" pos:end="5215:37"><name pos:start="5215:13" pos:end="5215:20"><name pos:start="5215:13" pos:end="5215:13">s</name><operator pos:start="5215:14" pos:end="5215:15">-&gt;</operator><name pos:start="5215:16" pos:end="5215:20">cc_op</name></name> <operator pos:start="5215:22" pos:end="5215:23">!=</operator> <name pos:start="5215:25" pos:end="5215:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5217:13" pos:end="5217:39"><block_content pos:start="5217:13" pos:end="5217:39">

            <expr_stmt pos:start="5217:13" pos:end="5217:39"><expr pos:start="5217:13" pos:end="5217:38"><call pos:start="5217:13" pos:end="5217:38"><name pos:start="5217:13" pos:end="5217:28">gen_op_set_cc_op</name><argument_list pos:start="5217:29" pos:end="5217:38">(<argument pos:start="5217:30" pos:end="5217:37"><expr pos:start="5217:30" pos:end="5217:37"><name pos:start="5217:30" pos:end="5217:37"><name pos:start="5217:30" pos:end="5217:30">s</name><operator pos:start="5217:31" pos:end="5217:32">-&gt;</operator><name pos:start="5217:33" pos:end="5217:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5219:9" pos:end="5219:42"><expr pos:start="5219:9" pos:end="5219:41"><call pos:start="5219:9" pos:end="5219:41"><name pos:start="5219:9" pos:end="5219:18">gen_jmp_im</name><argument_list pos:start="5219:19" pos:end="5219:41">(<argument pos:start="5219:20" pos:end="5219:40"><expr pos:start="5219:20" pos:end="5219:40"><name pos:start="5219:20" pos:end="5219:27">pc_start</name> <operator pos:start="5219:29" pos:end="5219:29">-</operator> <name pos:start="5219:31" pos:end="5219:40"><name pos:start="5219:31" pos:end="5219:31">s</name><operator pos:start="5219:32" pos:end="5219:33">-&gt;</operator><name pos:start="5219:34" pos:end="5219:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5221:9" pos:end="5221:57"><expr pos:start="5221:9" pos:end="5221:56"><call pos:start="5221:9" pos:end="5221:56"><name pos:start="5221:9" pos:end="5221:23">gen_helper_into</name><argument_list pos:start="5221:24" pos:end="5221:56">(<argument pos:start="5221:25" pos:end="5221:55"><expr pos:start="5221:25" pos:end="5221:55"><call pos:start="5221:25" pos:end="5221:55"><name pos:start="5221:25" pos:end="5221:37">tcg_const_i32</name><argument_list pos:start="5221:38" pos:end="5221:55">(<argument pos:start="5221:39" pos:end="5221:54"><expr pos:start="5221:39" pos:end="5221:54"><name pos:start="5221:39" pos:end="5221:43"><name pos:start="5221:39" pos:end="5221:39">s</name><operator pos:start="5221:40" pos:end="5221:41">-&gt;</operator><name pos:start="5221:42" pos:end="5221:43">pc</name></name> <operator pos:start="5221:45" pos:end="5221:45">-</operator> <name pos:start="5221:47" pos:end="5221:54">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5223:9" pos:end="5226:0">break;</break>

<cpp:ifdef pos:start="5225:1" pos:end="5225:17">#<cpp:directive pos:start="5225:2" pos:end="5225:6">ifdef</cpp:directive> <name pos:start="5225:8" pos:end="5225:17">WANT_ICEBP</name></cpp:ifdef>

    <case pos:start="5227:5" pos:end="5227:14">case <expr pos:start="5227:10" pos:end="5227:13"><literal type="number" pos:start="5227:10" pos:end="5227:13">0xf1</literal></expr>:</case> <comment type="block" pos:start="5227:16" pos:end="5227:69">/* icebp (undocumented, exits to external debugger) */</comment>

        <expr_stmt pos:start="5229:9" pos:end="5232:0"><expr pos:start="5229:9" pos:end="5229:60"><call pos:start="5229:9" pos:end="5229:60"><name pos:start="5229:9" pos:end="5229:31">gen_svm_check_intercept</name><argument_list pos:start="5229:32" pos:end="5229:60">(<argument pos:start="5229:33" pos:end="5229:33"><expr pos:start="5229:33" pos:end="5229:33"><name pos:start="5229:33" pos:end="5229:33">s</name></expr></argument>, <argument pos:start="5229:36" pos:end="5229:43"><expr pos:start="5229:36" pos:end="5229:43"><name pos:start="5229:36" pos:end="5229:43">pc_start</name></expr></argument>, <argument pos:start="5229:46" pos:end="5229:59"><expr pos:start="5229:46" pos:end="5229:59"><name pos:start="5229:46" pos:end="5229:59">SVM_EXIT_ICEBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="5231:1" pos:end="5231:5">#<cpp:directive pos:start="5231:2" pos:end="5231:3">if</cpp:directive> <expr pos:start="5231:5" pos:end="5231:5"><literal type="number" pos:start="5231:5" pos:end="5231:5">1</literal></expr></cpp:if>

        <expr_stmt pos:start="5233:9" pos:end="5236:0"><expr pos:start="5233:9" pos:end="5233:43"><call pos:start="5233:9" pos:end="5233:43"><name pos:start="5233:9" pos:end="5233:17">gen_debug</name><argument_list pos:start="5233:18" pos:end="5233:43">(<argument pos:start="5233:19" pos:end="5233:19"><expr pos:start="5233:19" pos:end="5233:19"><name pos:start="5233:19" pos:end="5233:19">s</name></expr></argument>, <argument pos:start="5233:22" pos:end="5233:42"><expr pos:start="5233:22" pos:end="5233:42"><name pos:start="5233:22" pos:end="5233:29">pc_start</name> <operator pos:start="5233:31" pos:end="5233:31">-</operator> <name pos:start="5233:33" pos:end="5233:42"><name pos:start="5233:33" pos:end="5233:33">s</name><operator pos:start="5233:34" pos:end="5233:35">-&gt;</operator><name pos:start="5233:36" pos:end="5233:42">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="5235:1" pos:end="5235:5">#<cpp:directive pos:start="5235:2" pos:end="5235:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="5237:9" pos:end="5237:25">/* start debug */</comment>

        <expr_stmt pos:start="5239:9" pos:end="5239:33"><expr pos:start="5239:9" pos:end="5239:32"><call pos:start="5239:9" pos:end="5239:32"><name pos:start="5239:9" pos:end="5239:16">tb_flush</name><argument_list pos:start="5239:17" pos:end="5239:32">(<argument pos:start="5239:18" pos:end="5239:31"><expr pos:start="5239:18" pos:end="5239:31"><name pos:start="5239:18" pos:end="5239:31">cpu_single_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5241:9" pos:end="5244:0"><expr pos:start="5241:9" pos:end="5241:52"><call pos:start="5241:9" pos:end="5241:52"><name pos:start="5241:9" pos:end="5241:19">cpu_set_log</name><argument_list pos:start="5241:20" pos:end="5241:52">(<argument pos:start="5241:21" pos:end="5241:51"><expr pos:start="5241:21" pos:end="5241:51"><name pos:start="5241:21" pos:end="5241:31">CPU_LOG_INT</name> <operator pos:start="5241:33" pos:end="5241:33">|</operator> <name pos:start="5241:35" pos:end="5241:51">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="5243:1" pos:end="5243:6">#<cpp:directive pos:start="5243:2" pos:end="5243:6">endif</cpp:directive></cpp:endif>

        <break pos:start="5245:9" pos:end="5248:0">break;</break>

<cpp:endif pos:start="5247:1" pos:end="5247:6">#<cpp:directive pos:start="5247:2" pos:end="5247:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5249:5" pos:end="5249:14">case <expr pos:start="5249:10" pos:end="5249:13"><literal type="number" pos:start="5249:10" pos:end="5249:13">0xfa</literal></expr>:</case> <comment type="block" pos:start="5249:16" pos:end="5249:24">/* cli */</comment>

        <if_stmt pos:start="5251:9" pos:end="5275:9"><if pos:start="5251:9" pos:end="5263:9">if <condition pos:start="5251:12" pos:end="5251:21">(<expr pos:start="5251:13" pos:end="5251:20"><operator pos:start="5251:13" pos:end="5251:13">!</operator><name pos:start="5251:14" pos:end="5251:20"><name pos:start="5251:14" pos:end="5251:14">s</name><operator pos:start="5251:15" pos:end="5251:16">-&gt;</operator><name pos:start="5251:17" pos:end="5251:20">vm86</name></name></expr>)</condition> <block pos:start="5251:23" pos:end="5263:9">{<block_content pos:start="5253:13" pos:end="5261:13">

            <if_stmt pos:start="5253:13" pos:end="5261:13"><if pos:start="5253:13" pos:end="5257:13">if <condition pos:start="5253:16" pos:end="5253:34">(<expr pos:start="5253:17" pos:end="5253:33"><name pos:start="5253:17" pos:end="5253:22"><name pos:start="5253:17" pos:end="5253:17">s</name><operator pos:start="5253:18" pos:end="5253:19">-&gt;</operator><name pos:start="5253:20" pos:end="5253:22">cpl</name></name> <operator pos:start="5253:24" pos:end="5253:25">&lt;=</operator> <name pos:start="5253:27" pos:end="5253:33"><name pos:start="5253:27" pos:end="5253:27">s</name><operator pos:start="5253:28" pos:end="5253:29">-&gt;</operator><name pos:start="5253:30" pos:end="5253:33">iopl</name></name></expr>)</condition> <block pos:start="5253:36" pos:end="5257:13">{<block_content pos:start="5255:17" pos:end="5255:33">

                <expr_stmt pos:start="5255:17" pos:end="5255:33"><expr pos:start="5255:17" pos:end="5255:32"><call pos:start="5255:17" pos:end="5255:32"><name pos:start="5255:17" pos:end="5255:30">gen_helper_cli</name><argument_list pos:start="5255:31" pos:end="5255:32">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5257:15" pos:end="5261:13">else <block pos:start="5257:20" pos:end="5261:13">{<block_content pos:start="5259:17" pos:end="5259:68">

                <expr_stmt pos:start="5259:17" pos:end="5259:68"><expr pos:start="5259:17" pos:end="5259:67"><call pos:start="5259:17" pos:end="5259:67"><name pos:start="5259:17" pos:end="5259:29">gen_exception</name><argument_list pos:start="5259:30" pos:end="5259:67">(<argument pos:start="5259:31" pos:end="5259:31"><expr pos:start="5259:31" pos:end="5259:31"><name pos:start="5259:31" pos:end="5259:31">s</name></expr></argument>, <argument pos:start="5259:34" pos:end="5259:43"><expr pos:start="5259:34" pos:end="5259:43"><name pos:start="5259:34" pos:end="5259:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5259:46" pos:end="5259:66"><expr pos:start="5259:46" pos:end="5259:66"><name pos:start="5259:46" pos:end="5259:53">pc_start</name> <operator pos:start="5259:55" pos:end="5259:55">-</operator> <name pos:start="5259:57" pos:end="5259:66"><name pos:start="5259:57" pos:end="5259:57">s</name><operator pos:start="5259:58" pos:end="5259:59">-&gt;</operator><name pos:start="5259:60" pos:end="5259:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="5263:11" pos:end="5275:9">else <block pos:start="5263:16" pos:end="5275:9">{<block_content pos:start="5265:13" pos:end="5273:13">

            <if_stmt pos:start="5265:13" pos:end="5273:13"><if pos:start="5265:13" pos:end="5269:13">if <condition pos:start="5265:16" pos:end="5265:29">(<expr pos:start="5265:17" pos:end="5265:28"><name pos:start="5265:17" pos:end="5265:23"><name pos:start="5265:17" pos:end="5265:17">s</name><operator pos:start="5265:18" pos:end="5265:19">-&gt;</operator><name pos:start="5265:20" pos:end="5265:23">iopl</name></name> <operator pos:start="5265:25" pos:end="5265:26">==</operator> <literal type="number" pos:start="5265:28" pos:end="5265:28">3</literal></expr>)</condition> <block pos:start="5265:31" pos:end="5269:13">{<block_content pos:start="5267:17" pos:end="5267:33">

                <expr_stmt pos:start="5267:17" pos:end="5267:33"><expr pos:start="5267:17" pos:end="5267:32"><call pos:start="5267:17" pos:end="5267:32"><name pos:start="5267:17" pos:end="5267:30">gen_helper_cli</name><argument_list pos:start="5267:31" pos:end="5267:32">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5269:15" pos:end="5273:13">else <block pos:start="5269:20" pos:end="5273:13">{<block_content pos:start="5271:17" pos:end="5271:68">

                <expr_stmt pos:start="5271:17" pos:end="5271:68"><expr pos:start="5271:17" pos:end="5271:67"><call pos:start="5271:17" pos:end="5271:67"><name pos:start="5271:17" pos:end="5271:29">gen_exception</name><argument_list pos:start="5271:30" pos:end="5271:67">(<argument pos:start="5271:31" pos:end="5271:31"><expr pos:start="5271:31" pos:end="5271:31"><name pos:start="5271:31" pos:end="5271:31">s</name></expr></argument>, <argument pos:start="5271:34" pos:end="5271:43"><expr pos:start="5271:34" pos:end="5271:43"><name pos:start="5271:34" pos:end="5271:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5271:46" pos:end="5271:66"><expr pos:start="5271:46" pos:end="5271:66"><name pos:start="5271:46" pos:end="5271:53">pc_start</name> <operator pos:start="5271:55" pos:end="5271:55">-</operator> <name pos:start="5271:57" pos:end="5271:66"><name pos:start="5271:57" pos:end="5271:57">s</name><operator pos:start="5271:58" pos:end="5271:59">-&gt;</operator><name pos:start="5271:60" pos:end="5271:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5277:9" pos:end="5277:14">break;</break>

    <case pos:start="5279:5" pos:end="5279:14">case <expr pos:start="5279:10" pos:end="5279:13"><literal type="number" pos:start="5279:10" pos:end="5279:13">0xfb</literal></expr>:</case> <comment type="block" pos:start="5279:16" pos:end="5279:24">/* sti */</comment>

        <if_stmt pos:start="5281:9" pos:end="5323:9"><if pos:start="5281:9" pos:end="5311:9">if <condition pos:start="5281:12" pos:end="5281:21">(<expr pos:start="5281:13" pos:end="5281:20"><operator pos:start="5281:13" pos:end="5281:13">!</operator><name pos:start="5281:14" pos:end="5281:20"><name pos:start="5281:14" pos:end="5281:14">s</name><operator pos:start="5281:15" pos:end="5281:16">-&gt;</operator><name pos:start="5281:17" pos:end="5281:20">vm86</name></name></expr>)</condition> <block pos:start="5281:23" pos:end="5311:9">{<block_content pos:start="5283:13" pos:end="5309:13">

            <if_stmt pos:start="5283:13" pos:end="5309:13"><if pos:start="5283:13" pos:end="5305:13">if <condition pos:start="5283:16" pos:end="5283:34">(<expr pos:start="5283:17" pos:end="5283:33"><name pos:start="5283:17" pos:end="5283:22"><name pos:start="5283:17" pos:end="5283:17">s</name><operator pos:start="5283:18" pos:end="5283:19">-&gt;</operator><name pos:start="5283:20" pos:end="5283:22">cpl</name></name> <operator pos:start="5283:24" pos:end="5283:25">&lt;=</operator> <name pos:start="5283:27" pos:end="5283:33"><name pos:start="5283:27" pos:end="5283:27">s</name><operator pos:start="5283:28" pos:end="5283:29">-&gt;</operator><name pos:start="5283:30" pos:end="5283:33">iopl</name></name></expr>)</condition> <block pos:start="5283:36" pos:end="5305:13">{<block_content pos:start="5285:13" pos:end="5303:27">

            <label pos:start="5285:13" pos:end="5285:20"><name pos:start="5285:13" pos:end="5285:19">gen_sti</name>:</label>

                <expr_stmt pos:start="5287:17" pos:end="5287:33"><expr pos:start="5287:17" pos:end="5287:32"><call pos:start="5287:17" pos:end="5287:32"><name pos:start="5287:17" pos:end="5287:30">gen_helper_sti</name><argument_list pos:start="5287:31" pos:end="5287:32">()</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="5289:17" pos:end="5289:77">/* interruptions are enabled only the first insn after sti */</comment>

                <comment type="block" pos:start="5291:17" pos:end="5293:37">/* If several instructions disable interrupts, only the

                   _first_ does it */</comment>

                <if_stmt pos:start="5295:17" pos:end="5297:49"><if pos:start="5295:17" pos:end="5297:49">if <condition pos:start="5295:20" pos:end="5295:58">(<expr pos:start="5295:21" pos:end="5295:57"><operator pos:start="5295:21" pos:end="5295:21">!</operator><operator pos:start="5295:22" pos:end="5295:22">(</operator><name pos:start="5295:23" pos:end="5295:34"><name pos:start="5295:23" pos:end="5295:23">s</name><operator pos:start="5295:24" pos:end="5295:25">-&gt;</operator><name pos:start="5295:26" pos:end="5295:27">tb</name><operator pos:start="5295:28" pos:end="5295:29">-&gt;</operator><name pos:start="5295:30" pos:end="5295:34">flags</name></name> <operator pos:start="5295:36" pos:end="5295:36">&amp;</operator> <name pos:start="5295:38" pos:end="5295:56">HF_INHIBIT_IRQ_MASK</name><operator pos:start="5295:57" pos:end="5295:57">)</operator></expr>)</condition><block type="pseudo" pos:start="5297:21" pos:end="5297:49"><block_content pos:start="5297:21" pos:end="5297:49">

                    <expr_stmt pos:start="5297:21" pos:end="5297:49"><expr pos:start="5297:21" pos:end="5297:48"><call pos:start="5297:21" pos:end="5297:48"><name pos:start="5297:21" pos:end="5297:46">gen_helper_set_inhibit_irq</name><argument_list pos:start="5297:47" pos:end="5297:48">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="block" pos:start="5299:17" pos:end="5299:58">/* give a chance to handle pending irqs */</comment>

                <expr_stmt pos:start="5301:17" pos:end="5301:47"><expr pos:start="5301:17" pos:end="5301:46"><call pos:start="5301:17" pos:end="5301:46"><name pos:start="5301:17" pos:end="5301:26">gen_jmp_im</name><argument_list pos:start="5301:27" pos:end="5301:46">(<argument pos:start="5301:28" pos:end="5301:45"><expr pos:start="5301:28" pos:end="5301:45"><name pos:start="5301:28" pos:end="5301:32"><name pos:start="5301:28" pos:end="5301:28">s</name><operator pos:start="5301:29" pos:end="5301:30">-&gt;</operator><name pos:start="5301:31" pos:end="5301:32">pc</name></name> <operator pos:start="5301:34" pos:end="5301:34">-</operator> <name pos:start="5301:36" pos:end="5301:45"><name pos:start="5301:36" pos:end="5301:36">s</name><operator pos:start="5301:37" pos:end="5301:38">-&gt;</operator><name pos:start="5301:39" pos:end="5301:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5303:17" pos:end="5303:27"><expr pos:start="5303:17" pos:end="5303:26"><call pos:start="5303:17" pos:end="5303:26"><name pos:start="5303:17" pos:end="5303:23">gen_eob</name><argument_list pos:start="5303:24" pos:end="5303:26">(<argument pos:start="5303:25" pos:end="5303:25"><expr pos:start="5303:25" pos:end="5303:25"><name pos:start="5303:25" pos:end="5303:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5305:15" pos:end="5309:13">else <block pos:start="5305:20" pos:end="5309:13">{<block_content pos:start="5307:17" pos:end="5307:68">

                <expr_stmt pos:start="5307:17" pos:end="5307:68"><expr pos:start="5307:17" pos:end="5307:67"><call pos:start="5307:17" pos:end="5307:67"><name pos:start="5307:17" pos:end="5307:29">gen_exception</name><argument_list pos:start="5307:30" pos:end="5307:67">(<argument pos:start="5307:31" pos:end="5307:31"><expr pos:start="5307:31" pos:end="5307:31"><name pos:start="5307:31" pos:end="5307:31">s</name></expr></argument>, <argument pos:start="5307:34" pos:end="5307:43"><expr pos:start="5307:34" pos:end="5307:43"><name pos:start="5307:34" pos:end="5307:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5307:46" pos:end="5307:66"><expr pos:start="5307:46" pos:end="5307:66"><name pos:start="5307:46" pos:end="5307:53">pc_start</name> <operator pos:start="5307:55" pos:end="5307:55">-</operator> <name pos:start="5307:57" pos:end="5307:66"><name pos:start="5307:57" pos:end="5307:57">s</name><operator pos:start="5307:58" pos:end="5307:59">-&gt;</operator><name pos:start="5307:60" pos:end="5307:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="5311:11" pos:end="5323:9">else <block pos:start="5311:16" pos:end="5323:9">{<block_content pos:start="5313:13" pos:end="5321:13">

            <if_stmt pos:start="5313:13" pos:end="5321:13"><if pos:start="5313:13" pos:end="5317:13">if <condition pos:start="5313:16" pos:end="5313:29">(<expr pos:start="5313:17" pos:end="5313:28"><name pos:start="5313:17" pos:end="5313:23"><name pos:start="5313:17" pos:end="5313:17">s</name><operator pos:start="5313:18" pos:end="5313:19">-&gt;</operator><name pos:start="5313:20" pos:end="5313:23">iopl</name></name> <operator pos:start="5313:25" pos:end="5313:26">==</operator> <literal type="number" pos:start="5313:28" pos:end="5313:28">3</literal></expr>)</condition> <block pos:start="5313:31" pos:end="5317:13">{<block_content pos:start="5315:17" pos:end="5315:29">

                <goto pos:start="5315:17" pos:end="5315:29">goto <name pos:start="5315:22" pos:end="5315:28">gen_sti</name>;</goto>

            </block_content>}</block></if> <else pos:start="5317:15" pos:end="5321:13">else <block pos:start="5317:20" pos:end="5321:13">{<block_content pos:start="5319:17" pos:end="5319:68">

                <expr_stmt pos:start="5319:17" pos:end="5319:68"><expr pos:start="5319:17" pos:end="5319:67"><call pos:start="5319:17" pos:end="5319:67"><name pos:start="5319:17" pos:end="5319:29">gen_exception</name><argument_list pos:start="5319:30" pos:end="5319:67">(<argument pos:start="5319:31" pos:end="5319:31"><expr pos:start="5319:31" pos:end="5319:31"><name pos:start="5319:31" pos:end="5319:31">s</name></expr></argument>, <argument pos:start="5319:34" pos:end="5319:43"><expr pos:start="5319:34" pos:end="5319:43"><name pos:start="5319:34" pos:end="5319:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5319:46" pos:end="5319:66"><expr pos:start="5319:46" pos:end="5319:66"><name pos:start="5319:46" pos:end="5319:53">pc_start</name> <operator pos:start="5319:55" pos:end="5319:55">-</operator> <name pos:start="5319:57" pos:end="5319:66"><name pos:start="5319:57" pos:end="5319:57">s</name><operator pos:start="5319:58" pos:end="5319:59">-&gt;</operator><name pos:start="5319:60" pos:end="5319:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5325:9" pos:end="5325:14">break;</break>

    <case pos:start="5327:5" pos:end="5327:14">case <expr pos:start="5327:10" pos:end="5327:13"><literal type="number" pos:start="5327:10" pos:end="5327:13">0x62</literal></expr>:</case> <comment type="block" pos:start="5327:16" pos:end="5327:26">/* bound */</comment>

        <if_stmt pos:start="5329:9" pos:end="5331:28"><if pos:start="5329:9" pos:end="5331:28">if <condition pos:start="5329:12" pos:end="5329:22">(<expr pos:start="5329:13" pos:end="5329:21"><call pos:start="5329:13" pos:end="5329:21"><name pos:start="5329:13" pos:end="5329:18">CODE64</name><argument_list pos:start="5329:19" pos:end="5329:21">(<argument pos:start="5329:20" pos:end="5329:20"><expr pos:start="5329:20" pos:end="5329:20"><name pos:start="5329:20" pos:end="5329:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5331:13" pos:end="5331:28"><block_content pos:start="5331:13" pos:end="5331:28">

            <goto pos:start="5331:13" pos:end="5331:28">goto <name pos:start="5331:18" pos:end="5331:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5333:9" pos:end="5333:39"><expr pos:start="5333:9" pos:end="5333:38"><name pos:start="5333:9" pos:end="5333:10">ot</name> <operator pos:start="5333:12" pos:end="5333:12">=</operator> <ternary pos:start="5333:14" pos:end="5333:38"><condition pos:start="5333:14" pos:end="5333:20"><expr pos:start="5333:14" pos:end="5333:18"><name pos:start="5333:14" pos:end="5333:18">dflag</name></expr> ?</condition><then pos:start="5333:22" pos:end="5333:28"> <expr pos:start="5333:22" pos:end="5333:28"><name pos:start="5333:22" pos:end="5333:28">OT_LONG</name></expr> </then><else pos:start="5333:30" pos:end="5333:38">: <expr pos:start="5333:32" pos:end="5333:38"><name pos:start="5333:32" pos:end="5333:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="5335:9" pos:end="5335:35"><expr pos:start="5335:9" pos:end="5335:34"><name pos:start="5335:9" pos:end="5335:13">modrm</name> <operator pos:start="5335:15" pos:end="5335:15">=</operator> <call pos:start="5335:17" pos:end="5335:34"><name pos:start="5335:17" pos:end="5335:25">ldub_code</name><argument_list pos:start="5335:26" pos:end="5335:34">(<argument pos:start="5335:27" pos:end="5335:33"><expr pos:start="5335:27" pos:end="5335:33"><name pos:start="5335:27" pos:end="5335:31"><name pos:start="5335:27" pos:end="5335:27">s</name><operator pos:start="5335:28" pos:end="5335:29">-&gt;</operator><name pos:start="5335:30" pos:end="5335:31">pc</name></name><operator pos:start="5335:32" pos:end="5335:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5337:9" pos:end="5337:31"><expr pos:start="5337:9" pos:end="5337:30"><name pos:start="5337:9" pos:end="5337:11">reg</name> <operator pos:start="5337:13" pos:end="5337:13">=</operator> <operator pos:start="5337:15" pos:end="5337:15">(</operator><name pos:start="5337:16" pos:end="5337:20">modrm</name> <operator pos:start="5337:22" pos:end="5337:23">&gt;&gt;</operator> <literal type="number" pos:start="5337:25" pos:end="5337:25">3</literal><operator pos:start="5337:26" pos:end="5337:26">)</operator> <operator pos:start="5337:28" pos:end="5337:28">&amp;</operator> <literal type="number" pos:start="5337:30" pos:end="5337:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5339:9" pos:end="5339:31"><expr pos:start="5339:9" pos:end="5339:30"><name pos:start="5339:9" pos:end="5339:11">mod</name> <operator pos:start="5339:13" pos:end="5339:13">=</operator> <operator pos:start="5339:15" pos:end="5339:15">(</operator><name pos:start="5339:16" pos:end="5339:20">modrm</name> <operator pos:start="5339:22" pos:end="5339:23">&gt;&gt;</operator> <literal type="number" pos:start="5339:25" pos:end="5339:25">6</literal><operator pos:start="5339:26" pos:end="5339:26">)</operator> <operator pos:start="5339:28" pos:end="5339:28">&amp;</operator> <literal type="number" pos:start="5339:30" pos:end="5339:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="5341:9" pos:end="5343:28"><if pos:start="5341:9" pos:end="5343:28">if <condition pos:start="5341:12" pos:end="5341:21">(<expr pos:start="5341:13" pos:end="5341:20"><name pos:start="5341:13" pos:end="5341:15">mod</name> <operator pos:start="5341:17" pos:end="5341:18">==</operator> <literal type="number" pos:start="5341:20" pos:end="5341:20">3</literal></expr>)</condition><block type="pseudo" pos:start="5343:13" pos:end="5343:28"><block_content pos:start="5343:13" pos:end="5343:28">

            <goto pos:start="5343:13" pos:end="5343:28">goto <name pos:start="5343:18" pos:end="5343:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5345:9" pos:end="5345:38"><expr pos:start="5345:9" pos:end="5345:37"><call pos:start="5345:9" pos:end="5345:37"><name pos:start="5345:9" pos:end="5345:25">gen_op_mov_TN_reg</name><argument_list pos:start="5345:26" pos:end="5345:37">(<argument pos:start="5345:27" pos:end="5345:28"><expr pos:start="5345:27" pos:end="5345:28"><name pos:start="5345:27" pos:end="5345:28">ot</name></expr></argument>, <argument pos:start="5345:31" pos:end="5345:31"><expr pos:start="5345:31" pos:end="5345:31"><literal type="number" pos:start="5345:31" pos:end="5345:31">0</literal></expr></argument>, <argument pos:start="5345:34" pos:end="5345:36"><expr pos:start="5345:34" pos:end="5345:36"><name pos:start="5345:34" pos:end="5345:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5347:9" pos:end="5347:57"><expr pos:start="5347:9" pos:end="5347:56"><call pos:start="5347:9" pos:end="5347:56"><name pos:start="5347:9" pos:end="5347:21">gen_lea_modrm</name><argument_list pos:start="5347:22" pos:end="5347:56">(<argument pos:start="5347:23" pos:end="5347:23"><expr pos:start="5347:23" pos:end="5347:23"><name pos:start="5347:23" pos:end="5347:23">s</name></expr></argument>, <argument pos:start="5347:26" pos:end="5347:30"><expr pos:start="5347:26" pos:end="5347:30"><name pos:start="5347:26" pos:end="5347:30">modrm</name></expr></argument>, <argument pos:start="5347:33" pos:end="5347:41"><expr pos:start="5347:33" pos:end="5347:41"><operator pos:start="5347:33" pos:end="5347:33">&amp;</operator><name pos:start="5347:34" pos:end="5347:41">reg_addr</name></expr></argument>, <argument pos:start="5347:44" pos:end="5347:55"><expr pos:start="5347:44" pos:end="5347:55"><operator pos:start="5347:44" pos:end="5347:44">&amp;</operator><name pos:start="5347:45" pos:end="5347:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5349:9" pos:end="5349:42"><expr pos:start="5349:9" pos:end="5349:41"><call pos:start="5349:9" pos:end="5349:41"><name pos:start="5349:9" pos:end="5349:18">gen_jmp_im</name><argument_list pos:start="5349:19" pos:end="5349:41">(<argument pos:start="5349:20" pos:end="5349:40"><expr pos:start="5349:20" pos:end="5349:40"><name pos:start="5349:20" pos:end="5349:27">pc_start</name> <operator pos:start="5349:29" pos:end="5349:29">-</operator> <name pos:start="5349:31" pos:end="5349:40"><name pos:start="5349:31" pos:end="5349:31">s</name><operator pos:start="5349:32" pos:end="5349:33">-&gt;</operator><name pos:start="5349:34" pos:end="5349:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5351:9" pos:end="5351:53"><expr pos:start="5351:9" pos:end="5351:52"><call pos:start="5351:9" pos:end="5351:52"><name pos:start="5351:9" pos:end="5351:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5351:29" pos:end="5351:52">(<argument pos:start="5351:30" pos:end="5351:41"><expr pos:start="5351:30" pos:end="5351:41"><name pos:start="5351:30" pos:end="5351:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5351:44" pos:end="5351:51"><expr pos:start="5351:44" pos:end="5351:51"><name pos:start="5351:44" pos:end="5351:51"><name pos:start="5351:44" pos:end="5351:48">cpu_T</name><index pos:start="5351:49" pos:end="5351:51">[<expr pos:start="5351:50" pos:end="5351:50"><literal type="number" pos:start="5351:50" pos:end="5351:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5353:9" pos:end="5359:52"><if pos:start="5353:9" pos:end="5355:52">if <condition pos:start="5353:12" pos:end="5353:26">(<expr pos:start="5353:13" pos:end="5353:25"><name pos:start="5353:13" pos:end="5353:14">ot</name> <operator pos:start="5353:16" pos:end="5353:17">==</operator> <name pos:start="5353:19" pos:end="5353:25">OT_WORD</name></expr>)</condition><block type="pseudo" pos:start="5355:13" pos:end="5355:52"><block_content pos:start="5355:13" pos:end="5355:52">

            <expr_stmt pos:start="5355:13" pos:end="5355:52"><expr pos:start="5355:13" pos:end="5355:51"><call pos:start="5355:13" pos:end="5355:51"><name pos:start="5355:13" pos:end="5355:29">gen_helper_boundw</name><argument_list pos:start="5355:30" pos:end="5355:51">(<argument pos:start="5355:31" pos:end="5355:36"><expr pos:start="5355:31" pos:end="5355:36"><name pos:start="5355:31" pos:end="5355:36">cpu_A0</name></expr></argument>, <argument pos:start="5355:39" pos:end="5355:50"><expr pos:start="5355:39" pos:end="5355:50"><name pos:start="5355:39" pos:end="5355:50">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="5357:9" pos:end="5359:52">else<block type="pseudo" pos:start="5359:13" pos:end="5359:52"><block_content pos:start="5359:13" pos:end="5359:52">

            <expr_stmt pos:start="5359:13" pos:end="5359:52"><expr pos:start="5359:13" pos:end="5359:51"><call pos:start="5359:13" pos:end="5359:51"><name pos:start="5359:13" pos:end="5359:29">gen_helper_boundl</name><argument_list pos:start="5359:30" pos:end="5359:51">(<argument pos:start="5359:31" pos:end="5359:36"><expr pos:start="5359:31" pos:end="5359:36"><name pos:start="5359:31" pos:end="5359:36">cpu_A0</name></expr></argument>, <argument pos:start="5359:39" pos:end="5359:50"><expr pos:start="5359:39" pos:end="5359:50"><name pos:start="5359:39" pos:end="5359:50">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="5361:9" pos:end="5361:14">break;</break>

    <case pos:start="5363:5" pos:end="5363:25">case <expr pos:start="5363:10" pos:end="5363:24"><literal type="number" pos:start="5363:10" pos:end="5363:14">0x1c8</literal> <operator pos:start="5363:16" pos:end="5363:18">...</operator> <literal type="number" pos:start="5363:20" pos:end="5363:24">0x1cf</literal></expr>:</case> <comment type="block" pos:start="5363:27" pos:end="5363:41">/* bswap reg */</comment>

        <expr_stmt pos:start="5365:9" pos:end="5368:0"><expr pos:start="5365:9" pos:end="5365:32"><name pos:start="5365:9" pos:end="5365:11">reg</name> <operator pos:start="5365:13" pos:end="5365:13">=</operator> <operator pos:start="5365:15" pos:end="5365:15">(</operator><name pos:start="5365:16" pos:end="5365:16">b</name> <operator pos:start="5365:18" pos:end="5365:18">&amp;</operator> <literal type="number" pos:start="5365:20" pos:end="5365:20">7</literal><operator pos:start="5365:21" pos:end="5365:21">)</operator> <operator pos:start="5365:23" pos:end="5365:23">|</operator> <call pos:start="5365:25" pos:end="5365:32"><name pos:start="5365:25" pos:end="5365:29">REX_B</name><argument_list pos:start="5365:30" pos:end="5365:32">(<argument pos:start="5365:31" pos:end="5365:31"><expr pos:start="5365:31" pos:end="5365:31"><name pos:start="5365:31" pos:end="5365:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="5367:1" pos:end="5367:20">#<cpp:directive pos:start="5367:2" pos:end="5367:6">ifdef</cpp:directive> <name pos:start="5367:8" pos:end="5367:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="5369:9" pos:end="5400:0"><if pos:start="5369:9" pos:end="5377:9">if <condition pos:start="5369:12" pos:end="5369:23">(<expr pos:start="5369:13" pos:end="5369:22"><name pos:start="5369:13" pos:end="5369:17">dflag</name> <operator pos:start="5369:19" pos:end="5369:20">==</operator> <literal type="number" pos:start="5369:22" pos:end="5369:22">2</literal></expr>)</condition> <block pos:start="5369:25" pos:end="5377:9">{<block_content pos:start="5371:13" pos:end="5375:44">

            <expr_stmt pos:start="5371:13" pos:end="5371:47"><expr pos:start="5371:13" pos:end="5371:46"><call pos:start="5371:13" pos:end="5371:46"><name pos:start="5371:13" pos:end="5371:29">gen_op_mov_TN_reg</name><argument_list pos:start="5371:30" pos:end="5371:46">(<argument pos:start="5371:31" pos:end="5371:37"><expr pos:start="5371:31" pos:end="5371:37"><name pos:start="5371:31" pos:end="5371:37">OT_QUAD</name></expr></argument>, <argument pos:start="5371:40" pos:end="5371:40"><expr pos:start="5371:40" pos:end="5371:40"><literal type="number" pos:start="5371:40" pos:end="5371:40">0</literal></expr></argument>, <argument pos:start="5371:43" pos:end="5371:45"><expr pos:start="5371:43" pos:end="5371:45"><name pos:start="5371:43" pos:end="5371:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5373:13" pos:end="5373:50"><expr pos:start="5373:13" pos:end="5373:49"><call pos:start="5373:13" pos:end="5373:49"><name pos:start="5373:13" pos:end="5373:29">tcg_gen_bswap_i64</name><argument_list pos:start="5373:30" pos:end="5373:49">(<argument pos:start="5373:31" pos:end="5373:38"><expr pos:start="5373:31" pos:end="5373:38"><name pos:start="5373:31" pos:end="5373:38"><name pos:start="5373:31" pos:end="5373:35">cpu_T</name><index pos:start="5373:36" pos:end="5373:38">[<expr pos:start="5373:37" pos:end="5373:37"><literal type="number" pos:start="5373:37" pos:end="5373:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5373:41" pos:end="5373:48"><expr pos:start="5373:41" pos:end="5373:48"><name pos:start="5373:41" pos:end="5373:48"><name pos:start="5373:41" pos:end="5373:45">cpu_T</name><index pos:start="5373:46" pos:end="5373:48">[<expr pos:start="5373:47" pos:end="5373:47"><literal type="number" pos:start="5373:47" pos:end="5373:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5375:13" pos:end="5375:44"><expr pos:start="5375:13" pos:end="5375:43"><call pos:start="5375:13" pos:end="5375:43"><name pos:start="5375:13" pos:end="5375:29">gen_op_mov_reg_T0</name><argument_list pos:start="5375:30" pos:end="5375:43">(<argument pos:start="5375:31" pos:end="5375:37"><expr pos:start="5375:31" pos:end="5375:37"><name pos:start="5375:31" pos:end="5375:37">OT_QUAD</name></expr></argument>, <argument pos:start="5375:40" pos:end="5375:42"><expr pos:start="5375:40" pos:end="5375:42"><name pos:start="5375:40" pos:end="5375:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5377:11" pos:end="5400:0">else

        <block pos:start="5379:9" pos:end="5400:0">{<block_content pos:start="5381:13" pos:end="5395:44">

            <decl_stmt pos:start="5381:13" pos:end="5381:26"><decl pos:start="5381:13" pos:end="5381:25"><type pos:start="5381:13" pos:end="5381:20"><name pos:start="5381:13" pos:end="5381:20">TCGv_i32</name></type> <name pos:start="5381:22" pos:end="5381:25">tmp0</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5383:13" pos:end="5383:47"><expr pos:start="5383:13" pos:end="5383:46"><call pos:start="5383:13" pos:end="5383:46"><name pos:start="5383:13" pos:end="5383:29">gen_op_mov_TN_reg</name><argument_list pos:start="5383:30" pos:end="5383:46">(<argument pos:start="5383:31" pos:end="5383:37"><expr pos:start="5383:31" pos:end="5383:37"><name pos:start="5383:31" pos:end="5383:37">OT_LONG</name></expr></argument>, <argument pos:start="5383:40" pos:end="5383:40"><expr pos:start="5383:40" pos:end="5383:40"><literal type="number" pos:start="5383:40" pos:end="5383:40">0</literal></expr></argument>, <argument pos:start="5383:43" pos:end="5383:45"><expr pos:start="5383:43" pos:end="5383:45"><name pos:start="5383:43" pos:end="5383:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="5387:13" pos:end="5387:38"><expr pos:start="5387:13" pos:end="5387:37"><name pos:start="5387:13" pos:end="5387:16">tmp0</name> <operator pos:start="5387:18" pos:end="5387:18">=</operator> <call pos:start="5387:20" pos:end="5387:37"><name pos:start="5387:20" pos:end="5387:35">tcg_temp_new_i32</name><argument_list pos:start="5387:36" pos:end="5387:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5389:13" pos:end="5389:50"><expr pos:start="5389:13" pos:end="5389:49"><call pos:start="5389:13" pos:end="5389:49"><name pos:start="5389:13" pos:end="5389:33">tcg_gen_trunc_i64_i32</name><argument_list pos:start="5389:34" pos:end="5389:49">(<argument pos:start="5389:35" pos:end="5389:38"><expr pos:start="5389:35" pos:end="5389:38"><name pos:start="5389:35" pos:end="5389:38">tmp0</name></expr></argument>, <argument pos:start="5389:41" pos:end="5389:48"><expr pos:start="5389:41" pos:end="5389:48"><name pos:start="5389:41" pos:end="5389:48"><name pos:start="5389:41" pos:end="5389:45">cpu_T</name><index pos:start="5389:46" pos:end="5389:48">[<expr pos:start="5389:47" pos:end="5389:47"><literal type="number" pos:start="5389:47" pos:end="5389:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5391:13" pos:end="5391:42"><expr pos:start="5391:13" pos:end="5391:41"><call pos:start="5391:13" pos:end="5391:41"><name pos:start="5391:13" pos:end="5391:29">tcg_gen_bswap_i32</name><argument_list pos:start="5391:30" pos:end="5391:41">(<argument pos:start="5391:31" pos:end="5391:34"><expr pos:start="5391:31" pos:end="5391:34"><name pos:start="5391:31" pos:end="5391:34">tmp0</name></expr></argument>, <argument pos:start="5391:37" pos:end="5391:40"><expr pos:start="5391:37" pos:end="5391:40"><name pos:start="5391:37" pos:end="5391:40">tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5393:13" pos:end="5393:49"><expr pos:start="5393:13" pos:end="5393:48"><call pos:start="5393:13" pos:end="5393:48"><name pos:start="5393:13" pos:end="5393:32">tcg_gen_extu_i32_i64</name><argument_list pos:start="5393:33" pos:end="5393:48">(<argument pos:start="5393:34" pos:end="5393:41"><expr pos:start="5393:34" pos:end="5393:41"><name pos:start="5393:34" pos:end="5393:41"><name pos:start="5393:34" pos:end="5393:38">cpu_T</name><index pos:start="5393:39" pos:end="5393:41">[<expr pos:start="5393:40" pos:end="5393:40"><literal type="number" pos:start="5393:40" pos:end="5393:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5393:44" pos:end="5393:47"><expr pos:start="5393:44" pos:end="5393:47"><name pos:start="5393:44" pos:end="5393:47">tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5395:13" pos:end="5395:44"><expr pos:start="5395:13" pos:end="5395:43"><call pos:start="5395:13" pos:end="5395:43"><name pos:start="5395:13" pos:end="5395:29">gen_op_mov_reg_T0</name><argument_list pos:start="5395:30" pos:end="5395:43">(<argument pos:start="5395:31" pos:end="5395:37"><expr pos:start="5395:31" pos:end="5395:37"><name pos:start="5395:31" pos:end="5395:37">OT_LONG</name></expr></argument>, <argument pos:start="5395:40" pos:end="5395:42"><expr pos:start="5395:40" pos:end="5395:42"><name pos:start="5395:40" pos:end="5395:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:else pos:start="5399:1" pos:end="5399:5">#<cpp:directive pos:start="5399:2" pos:end="5399:5">else</cpp:directive></cpp:else>

        <block pos:start="5401:9" pos:end="5412:0">{<block_content pos:start="5403:13" pos:end="5407:44">

            <expr_stmt pos:start="5403:13" pos:end="5403:47"><expr pos:start="5403:13" pos:end="5403:46"><call pos:start="5403:13" pos:end="5403:46"><name pos:start="5403:13" pos:end="5403:29">gen_op_mov_TN_reg</name><argument_list pos:start="5403:30" pos:end="5403:46">(<argument pos:start="5403:31" pos:end="5403:37"><expr pos:start="5403:31" pos:end="5403:37"><name pos:start="5403:31" pos:end="5403:37">OT_LONG</name></expr></argument>, <argument pos:start="5403:40" pos:end="5403:40"><expr pos:start="5403:40" pos:end="5403:40"><literal type="number" pos:start="5403:40" pos:end="5403:40">0</literal></expr></argument>, <argument pos:start="5403:43" pos:end="5403:45"><expr pos:start="5403:43" pos:end="5403:45"><name pos:start="5403:43" pos:end="5403:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5405:13" pos:end="5405:50"><expr pos:start="5405:13" pos:end="5405:49"><call pos:start="5405:13" pos:end="5405:49"><name pos:start="5405:13" pos:end="5405:29">tcg_gen_bswap_i32</name><argument_list pos:start="5405:30" pos:end="5405:49">(<argument pos:start="5405:31" pos:end="5405:38"><expr pos:start="5405:31" pos:end="5405:38"><name pos:start="5405:31" pos:end="5405:38"><name pos:start="5405:31" pos:end="5405:35">cpu_T</name><index pos:start="5405:36" pos:end="5405:38">[<expr pos:start="5405:37" pos:end="5405:37"><literal type="number" pos:start="5405:37" pos:end="5405:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5405:41" pos:end="5405:48"><expr pos:start="5405:41" pos:end="5405:48"><name pos:start="5405:41" pos:end="5405:48"><name pos:start="5405:41" pos:end="5405:45">cpu_T</name><index pos:start="5405:46" pos:end="5405:48">[<expr pos:start="5405:47" pos:end="5405:47"><literal type="number" pos:start="5405:47" pos:end="5405:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5407:13" pos:end="5407:44"><expr pos:start="5407:13" pos:end="5407:43"><call pos:start="5407:13" pos:end="5407:43"><name pos:start="5407:13" pos:end="5407:29">gen_op_mov_reg_T0</name><argument_list pos:start="5407:30" pos:end="5407:43">(<argument pos:start="5407:31" pos:end="5407:37"><expr pos:start="5407:31" pos:end="5407:37"><name pos:start="5407:31" pos:end="5407:37">OT_LONG</name></expr></argument>, <argument pos:start="5407:40" pos:end="5407:42"><expr pos:start="5407:40" pos:end="5407:42"><name pos:start="5407:40" pos:end="5407:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:endif pos:start="5411:1" pos:end="5411:6">#<cpp:directive pos:start="5411:2" pos:end="5411:6">endif</cpp:directive></cpp:endif>

        <break pos:start="5413:9" pos:end="5413:14">break;</break>

    <case pos:start="5415:5" pos:end="5415:14">case <expr pos:start="5415:10" pos:end="5415:13"><literal type="number" pos:start="5415:10" pos:end="5415:13">0xd6</literal></expr>:</case> <comment type="block" pos:start="5415:16" pos:end="5415:25">/* salc */</comment>

        <if_stmt pos:start="5417:9" pos:end="5419:28"><if pos:start="5417:9" pos:end="5419:28">if <condition pos:start="5417:12" pos:end="5417:22">(<expr pos:start="5417:13" pos:end="5417:21"><call pos:start="5417:13" pos:end="5417:21"><name pos:start="5417:13" pos:end="5417:18">CODE64</name><argument_list pos:start="5417:19" pos:end="5417:21">(<argument pos:start="5417:20" pos:end="5417:20"><expr pos:start="5417:20" pos:end="5417:20"><name pos:start="5417:20" pos:end="5417:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5419:13" pos:end="5419:28"><block_content pos:start="5419:13" pos:end="5419:28">

            <goto pos:start="5419:13" pos:end="5419:28">goto <name pos:start="5419:18" pos:end="5419:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5421:9" pos:end="5423:39"><if pos:start="5421:9" pos:end="5423:39">if <condition pos:start="5421:12" pos:end="5421:38">(<expr pos:start="5421:13" pos:end="5421:37"><name pos:start="5421:13" pos:end="5421:20"><name pos:start="5421:13" pos:end="5421:13">s</name><operator pos:start="5421:14" pos:end="5421:15">-&gt;</operator><name pos:start="5421:16" pos:end="5421:20">cc_op</name></name> <operator pos:start="5421:22" pos:end="5421:23">!=</operator> <name pos:start="5421:25" pos:end="5421:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5423:13" pos:end="5423:39"><block_content pos:start="5423:13" pos:end="5423:39">

            <expr_stmt pos:start="5423:13" pos:end="5423:39"><expr pos:start="5423:13" pos:end="5423:38"><call pos:start="5423:13" pos:end="5423:38"><name pos:start="5423:13" pos:end="5423:28">gen_op_set_cc_op</name><argument_list pos:start="5423:29" pos:end="5423:38">(<argument pos:start="5423:30" pos:end="5423:37"><expr pos:start="5423:30" pos:end="5423:37"><name pos:start="5423:30" pos:end="5423:37"><name pos:start="5423:30" pos:end="5423:30">s</name><operator pos:start="5423:31" pos:end="5423:32">-&gt;</operator><name pos:start="5423:33" pos:end="5423:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5425:9" pos:end="5425:39"><expr pos:start="5425:9" pos:end="5425:38"><call pos:start="5425:9" pos:end="5425:38"><name pos:start="5425:9" pos:end="5425:28">gen_compute_eflags_c</name><argument_list pos:start="5425:29" pos:end="5425:38">(<argument pos:start="5425:30" pos:end="5425:37"><expr pos:start="5425:30" pos:end="5425:37"><name pos:start="5425:30" pos:end="5425:37"><name pos:start="5425:30" pos:end="5425:34">cpu_T</name><index pos:start="5425:35" pos:end="5425:37">[<expr pos:start="5425:36" pos:end="5425:36"><literal type="number" pos:start="5425:36" pos:end="5425:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5427:9" pos:end="5427:43"><expr pos:start="5427:9" pos:end="5427:42"><call pos:start="5427:9" pos:end="5427:42"><name pos:start="5427:9" pos:end="5427:22">tcg_gen_neg_tl</name><argument_list pos:start="5427:23" pos:end="5427:42">(<argument pos:start="5427:24" pos:end="5427:31"><expr pos:start="5427:24" pos:end="5427:31"><name pos:start="5427:24" pos:end="5427:31"><name pos:start="5427:24" pos:end="5427:28">cpu_T</name><index pos:start="5427:29" pos:end="5427:31">[<expr pos:start="5427:30" pos:end="5427:30"><literal type="number" pos:start="5427:30" pos:end="5427:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5427:34" pos:end="5427:41"><expr pos:start="5427:34" pos:end="5427:41"><name pos:start="5427:34" pos:end="5427:41"><name pos:start="5427:34" pos:end="5427:38">cpu_T</name><index pos:start="5427:39" pos:end="5427:41">[<expr pos:start="5427:40" pos:end="5427:40"><literal type="number" pos:start="5427:40" pos:end="5427:40">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5429:9" pos:end="5429:42"><expr pos:start="5429:9" pos:end="5429:41"><call pos:start="5429:9" pos:end="5429:41"><name pos:start="5429:9" pos:end="5429:25">gen_op_mov_reg_T0</name><argument_list pos:start="5429:26" pos:end="5429:41">(<argument pos:start="5429:27" pos:end="5429:33"><expr pos:start="5429:27" pos:end="5429:33"><name pos:start="5429:27" pos:end="5429:33">OT_BYTE</name></expr></argument>, <argument pos:start="5429:36" pos:end="5429:40"><expr pos:start="5429:36" pos:end="5429:40"><name pos:start="5429:36" pos:end="5429:40">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5431:9" pos:end="5431:14">break;</break>

    <case pos:start="5433:5" pos:end="5433:14">case <expr pos:start="5433:10" pos:end="5433:13"><literal type="number" pos:start="5433:10" pos:end="5433:13">0xe0</literal></expr>:</case> <comment type="block" pos:start="5433:16" pos:end="5433:27">/* loopnz */</comment>

    <case pos:start="5435:5" pos:end="5435:14">case <expr pos:start="5435:10" pos:end="5435:13"><literal type="number" pos:start="5435:10" pos:end="5435:13">0xe1</literal></expr>:</case> <comment type="block" pos:start="5435:16" pos:end="5435:26">/* loopz */</comment>

    <case pos:start="5437:5" pos:end="5437:14">case <expr pos:start="5437:10" pos:end="5437:13"><literal type="number" pos:start="5437:10" pos:end="5437:13">0xe2</literal></expr>:</case> <comment type="block" pos:start="5437:16" pos:end="5437:25">/* loop */</comment>

    <case pos:start="5439:5" pos:end="5439:14">case <expr pos:start="5439:10" pos:end="5439:13"><literal type="number" pos:start="5439:10" pos:end="5439:13">0xe3</literal></expr>:</case> <comment type="block" pos:start="5439:16" pos:end="5439:26">/* jecxz */</comment>

        <block pos:start="5441:9" pos:end="5533:9">{<block_content pos:start="5443:13" pos:end="5531:23">

            <decl_stmt pos:start="5443:13" pos:end="5443:27"><decl pos:start="5443:13" pos:end="5443:18"><type pos:start="5443:13" pos:end="5443:15"><name pos:start="5443:13" pos:end="5443:15">int</name></type> <name pos:start="5443:17" pos:end="5443:18">l1</name></decl>, <decl pos:start="5443:21" pos:end="5443:22"><type ref="prev" pos:start="5443:13" pos:end="5443:15"/><name pos:start="5443:21" pos:end="5443:22">l2</name></decl>, <decl pos:start="5443:25" pos:end="5443:26"><type ref="prev" pos:start="5443:13" pos:end="5443:15"/><name pos:start="5443:25" pos:end="5443:26">l3</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5447:13" pos:end="5447:48"><expr pos:start="5447:13" pos:end="5447:47"><name pos:start="5447:13" pos:end="5447:16">tval</name> <operator pos:start="5447:18" pos:end="5447:18">=</operator> <operator pos:start="5447:20" pos:end="5447:20">(</operator><name pos:start="5447:21" pos:end="5447:26">int8_t</name><operator pos:start="5447:27" pos:end="5447:27">)</operator><call pos:start="5447:28" pos:end="5447:47"><name pos:start="5447:28" pos:end="5447:35">insn_get</name><argument_list pos:start="5447:36" pos:end="5447:47">(<argument pos:start="5447:37" pos:end="5447:37"><expr pos:start="5447:37" pos:end="5447:37"><name pos:start="5447:37" pos:end="5447:37">s</name></expr></argument>, <argument pos:start="5447:40" pos:end="5447:46"><expr pos:start="5447:40" pos:end="5447:46"><name pos:start="5447:40" pos:end="5447:46">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5449:13" pos:end="5449:42"><expr pos:start="5449:13" pos:end="5449:41"><name pos:start="5449:13" pos:end="5449:20">next_eip</name> <operator pos:start="5449:22" pos:end="5449:22">=</operator> <name pos:start="5449:24" pos:end="5449:28"><name pos:start="5449:24" pos:end="5449:24">s</name><operator pos:start="5449:25" pos:end="5449:26">-&gt;</operator><name pos:start="5449:27" pos:end="5449:28">pc</name></name> <operator pos:start="5449:30" pos:end="5449:30">-</operator> <name pos:start="5449:32" pos:end="5449:41"><name pos:start="5449:32" pos:end="5449:32">s</name><operator pos:start="5449:33" pos:end="5449:34">-&gt;</operator><name pos:start="5449:35" pos:end="5449:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="5451:13" pos:end="5451:29"><expr pos:start="5451:13" pos:end="5451:28"><name pos:start="5451:13" pos:end="5451:16">tval</name> <operator pos:start="5451:18" pos:end="5451:19">+=</operator> <name pos:start="5451:21" pos:end="5451:28">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="5453:13" pos:end="5455:31"><if pos:start="5453:13" pos:end="5455:31">if <condition pos:start="5453:16" pos:end="5453:30">(<expr pos:start="5453:17" pos:end="5453:29"><name pos:start="5453:17" pos:end="5453:24"><name pos:start="5453:17" pos:end="5453:17">s</name><operator pos:start="5453:18" pos:end="5453:19">-&gt;</operator><name pos:start="5453:20" pos:end="5453:24">dflag</name></name> <operator pos:start="5453:26" pos:end="5453:27">==</operator> <literal type="number" pos:start="5453:29" pos:end="5453:29">0</literal></expr>)</condition><block type="pseudo" pos:start="5455:17" pos:end="5455:31"><block_content pos:start="5455:17" pos:end="5455:31">

                <expr_stmt pos:start="5455:17" pos:end="5455:31"><expr pos:start="5455:17" pos:end="5455:30"><name pos:start="5455:17" pos:end="5455:20">tval</name> <operator pos:start="5455:22" pos:end="5455:23">&amp;=</operator> <literal type="number" pos:start="5455:25" pos:end="5455:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="5459:13" pos:end="5459:33"><expr pos:start="5459:13" pos:end="5459:32"><name pos:start="5459:13" pos:end="5459:14">l1</name> <operator pos:start="5459:16" pos:end="5459:16">=</operator> <call pos:start="5459:18" pos:end="5459:32"><name pos:start="5459:18" pos:end="5459:30">gen_new_label</name><argument_list pos:start="5459:31" pos:end="5459:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5461:13" pos:end="5461:33"><expr pos:start="5461:13" pos:end="5461:32"><name pos:start="5461:13" pos:end="5461:14">l2</name> <operator pos:start="5461:16" pos:end="5461:16">=</operator> <call pos:start="5461:18" pos:end="5461:32"><name pos:start="5461:18" pos:end="5461:30">gen_new_label</name><argument_list pos:start="5461:31" pos:end="5461:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5463:13" pos:end="5463:33"><expr pos:start="5463:13" pos:end="5463:32"><name pos:start="5463:13" pos:end="5463:14">l3</name> <operator pos:start="5463:16" pos:end="5463:16">=</operator> <call pos:start="5463:18" pos:end="5463:32"><name pos:start="5463:18" pos:end="5463:30">gen_new_label</name><argument_list pos:start="5463:31" pos:end="5463:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5465:13" pos:end="5465:19"><expr pos:start="5465:13" pos:end="5465:18"><name pos:start="5465:13" pos:end="5465:13">b</name> <operator pos:start="5465:15" pos:end="5465:16">&amp;=</operator> <literal type="number" pos:start="5465:18" pos:end="5465:18">3</literal></expr>;</expr_stmt>

            <switch pos:start="5467:13" pos:end="5513:13">switch<condition pos:start="5467:19" pos:end="5467:21">(<expr pos:start="5467:20" pos:end="5467:20"><name pos:start="5467:20" pos:end="5467:20">b</name></expr>)</condition> <block pos:start="5467:23" pos:end="5513:13">{<block_content pos:start="5469:13" pos:end="5511:22">

            <case pos:start="5469:13" pos:end="5469:19">case <expr pos:start="5469:18" pos:end="5469:18"><literal type="number" pos:start="5469:18" pos:end="5469:18">0</literal></expr>:</case> <comment type="block" pos:start="5469:21" pos:end="5469:32">/* loopnz */</comment>

            <case pos:start="5471:13" pos:end="5471:19">case <expr pos:start="5471:18" pos:end="5471:18"><literal type="number" pos:start="5471:18" pos:end="5471:18">1</literal></expr>:</case> <comment type="block" pos:start="5471:21" pos:end="5471:31">/* loopz */</comment>

                <if_stmt pos:start="5473:17" pos:end="5475:47"><if pos:start="5473:17" pos:end="5475:47">if <condition pos:start="5473:20" pos:end="5473:46">(<expr pos:start="5473:21" pos:end="5473:45"><name pos:start="5473:21" pos:end="5473:28"><name pos:start="5473:21" pos:end="5473:21">s</name><operator pos:start="5473:22" pos:end="5473:23">-&gt;</operator><name pos:start="5473:24" pos:end="5473:28">cc_op</name></name> <operator pos:start="5473:30" pos:end="5473:31">!=</operator> <name pos:start="5473:33" pos:end="5473:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5475:21" pos:end="5475:47"><block_content pos:start="5475:21" pos:end="5475:47">

                    <expr_stmt pos:start="5475:21" pos:end="5475:47"><expr pos:start="5475:21" pos:end="5475:46"><call pos:start="5475:21" pos:end="5475:46"><name pos:start="5475:21" pos:end="5475:36">gen_op_set_cc_op</name><argument_list pos:start="5475:37" pos:end="5475:46">(<argument pos:start="5475:38" pos:end="5475:45"><expr pos:start="5475:38" pos:end="5475:45"><name pos:start="5475:38" pos:end="5475:45"><name pos:start="5475:38" pos:end="5475:38">s</name><operator pos:start="5475:39" pos:end="5475:40">-&gt;</operator><name pos:start="5475:41" pos:end="5475:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="5477:17" pos:end="5477:55"><expr pos:start="5477:17" pos:end="5477:54"><call pos:start="5477:17" pos:end="5477:54"><name pos:start="5477:17" pos:end="5477:33">gen_op_add_reg_im</name><argument_list pos:start="5477:34" pos:end="5477:54">(<argument pos:start="5477:35" pos:end="5477:42"><expr pos:start="5477:35" pos:end="5477:42"><name pos:start="5477:35" pos:end="5477:42"><name pos:start="5477:35" pos:end="5477:35">s</name><operator pos:start="5477:36" pos:end="5477:37">-&gt;</operator><name pos:start="5477:38" pos:end="5477:42">aflag</name></name></expr></argument>, <argument pos:start="5477:45" pos:end="5477:49"><expr pos:start="5477:45" pos:end="5477:49"><name pos:start="5477:45" pos:end="5477:49">R_ECX</name></expr></argument>, <argument pos:start="5477:52" pos:end="5477:53"><expr pos:start="5477:52" pos:end="5477:53"><operator pos:start="5477:52" pos:end="5477:52">-</operator><literal type="number" pos:start="5477:53" pos:end="5477:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5479:17" pos:end="5479:44"><expr pos:start="5479:17" pos:end="5479:43"><call pos:start="5479:17" pos:end="5479:43"><name pos:start="5479:17" pos:end="5479:29">gen_op_jz_ecx</name><argument_list pos:start="5479:30" pos:end="5479:43">(<argument pos:start="5479:31" pos:end="5479:38"><expr pos:start="5479:31" pos:end="5479:38"><name pos:start="5479:31" pos:end="5479:38"><name pos:start="5479:31" pos:end="5479:31">s</name><operator pos:start="5479:32" pos:end="5479:33">-&gt;</operator><name pos:start="5479:34" pos:end="5479:38">aflag</name></name></expr></argument>, <argument pos:start="5479:41" pos:end="5479:42"><expr pos:start="5479:41" pos:end="5479:42"><name pos:start="5479:41" pos:end="5479:42">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5481:17" pos:end="5481:45"><expr pos:start="5481:17" pos:end="5481:44"><call pos:start="5481:17" pos:end="5481:44"><name pos:start="5481:17" pos:end="5481:34">gen_compute_eflags</name><argument_list pos:start="5481:35" pos:end="5481:44">(<argument pos:start="5481:36" pos:end="5481:43"><expr pos:start="5481:36" pos:end="5481:43"><name pos:start="5481:36" pos:end="5481:43">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5483:17" pos:end="5483:58"><expr pos:start="5483:17" pos:end="5483:57"><call pos:start="5483:17" pos:end="5483:57"><name pos:start="5483:17" pos:end="5483:31">tcg_gen_andi_tl</name><argument_list pos:start="5483:32" pos:end="5483:57">(<argument pos:start="5483:33" pos:end="5483:40"><expr pos:start="5483:33" pos:end="5483:40"><name pos:start="5483:33" pos:end="5483:40">cpu_tmp0</name></expr></argument>, <argument pos:start="5483:43" pos:end="5483:50"><expr pos:start="5483:43" pos:end="5483:50"><name pos:start="5483:43" pos:end="5483:50">cpu_tmp0</name></expr></argument>, <argument pos:start="5483:53" pos:end="5483:56"><expr pos:start="5483:53" pos:end="5483:56"><name pos:start="5483:53" pos:end="5483:56">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5485:17" pos:end="5493:17"><if pos:start="5485:17" pos:end="5489:17">if <condition pos:start="5485:20" pos:end="5485:27">(<expr pos:start="5485:21" pos:end="5485:26"><name pos:start="5485:21" pos:end="5485:21">b</name> <operator pos:start="5485:23" pos:end="5485:24">==</operator> <literal type="number" pos:start="5485:26" pos:end="5485:26">0</literal></expr>)</condition> <block pos:start="5485:29" pos:end="5489:17">{<block_content pos:start="5487:21" pos:end="5487:69">

                    <expr_stmt pos:start="5487:21" pos:end="5487:69"><expr pos:start="5487:21" pos:end="5487:68"><call pos:start="5487:21" pos:end="5487:68"><name pos:start="5487:21" pos:end="5487:38">tcg_gen_brcondi_tl</name><argument_list pos:start="5487:39" pos:end="5487:68">(<argument pos:start="5487:40" pos:end="5487:50"><expr pos:start="5487:40" pos:end="5487:50"><name pos:start="5487:40" pos:end="5487:50">TCG_COND_EQ</name></expr></argument>, <argument pos:start="5487:53" pos:end="5487:60"><expr pos:start="5487:53" pos:end="5487:60"><name pos:start="5487:53" pos:end="5487:60">cpu_tmp0</name></expr></argument>, <argument pos:start="5487:63" pos:end="5487:63"><expr pos:start="5487:63" pos:end="5487:63"><literal type="number" pos:start="5487:63" pos:end="5487:63">0</literal></expr></argument>, <argument pos:start="5487:66" pos:end="5487:67"><expr pos:start="5487:66" pos:end="5487:67"><name pos:start="5487:66" pos:end="5487:67">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="5489:19" pos:end="5493:17">else <block pos:start="5489:24" pos:end="5493:17">{<block_content pos:start="5491:21" pos:end="5491:69">

                    <expr_stmt pos:start="5491:21" pos:end="5491:69"><expr pos:start="5491:21" pos:end="5491:68"><call pos:start="5491:21" pos:end="5491:68"><name pos:start="5491:21" pos:end="5491:38">tcg_gen_brcondi_tl</name><argument_list pos:start="5491:39" pos:end="5491:68">(<argument pos:start="5491:40" pos:end="5491:50"><expr pos:start="5491:40" pos:end="5491:50"><name pos:start="5491:40" pos:end="5491:50">TCG_COND_NE</name></expr></argument>, <argument pos:start="5491:53" pos:end="5491:60"><expr pos:start="5491:53" pos:end="5491:60"><name pos:start="5491:53" pos:end="5491:60">cpu_tmp0</name></expr></argument>, <argument pos:start="5491:63" pos:end="5491:63"><expr pos:start="5491:63" pos:end="5491:63"><literal type="number" pos:start="5491:63" pos:end="5491:63">0</literal></expr></argument>, <argument pos:start="5491:66" pos:end="5491:67"><expr pos:start="5491:66" pos:end="5491:67"><name pos:start="5491:66" pos:end="5491:67">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="5495:17" pos:end="5495:22">break;</break>

            <case pos:start="5497:13" pos:end="5497:19">case <expr pos:start="5497:18" pos:end="5497:18"><literal type="number" pos:start="5497:18" pos:end="5497:18">2</literal></expr>:</case> <comment type="block" pos:start="5497:21" pos:end="5497:30">/* loop */</comment>

                <expr_stmt pos:start="5499:17" pos:end="5499:55"><expr pos:start="5499:17" pos:end="5499:54"><call pos:start="5499:17" pos:end="5499:54"><name pos:start="5499:17" pos:end="5499:33">gen_op_add_reg_im</name><argument_list pos:start="5499:34" pos:end="5499:54">(<argument pos:start="5499:35" pos:end="5499:42"><expr pos:start="5499:35" pos:end="5499:42"><name pos:start="5499:35" pos:end="5499:42"><name pos:start="5499:35" pos:end="5499:35">s</name><operator pos:start="5499:36" pos:end="5499:37">-&gt;</operator><name pos:start="5499:38" pos:end="5499:42">aflag</name></name></expr></argument>, <argument pos:start="5499:45" pos:end="5499:49"><expr pos:start="5499:45" pos:end="5499:49"><name pos:start="5499:45" pos:end="5499:49">R_ECX</name></expr></argument>, <argument pos:start="5499:52" pos:end="5499:53"><expr pos:start="5499:52" pos:end="5499:53"><operator pos:start="5499:52" pos:end="5499:52">-</operator><literal type="number" pos:start="5499:53" pos:end="5499:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5501:17" pos:end="5501:45"><expr pos:start="5501:17" pos:end="5501:44"><call pos:start="5501:17" pos:end="5501:44"><name pos:start="5501:17" pos:end="5501:30">gen_op_jnz_ecx</name><argument_list pos:start="5501:31" pos:end="5501:44">(<argument pos:start="5501:32" pos:end="5501:39"><expr pos:start="5501:32" pos:end="5501:39"><name pos:start="5501:32" pos:end="5501:39"><name pos:start="5501:32" pos:end="5501:32">s</name><operator pos:start="5501:33" pos:end="5501:34">-&gt;</operator><name pos:start="5501:35" pos:end="5501:39">aflag</name></name></expr></argument>, <argument pos:start="5501:42" pos:end="5501:43"><expr pos:start="5501:42" pos:end="5501:43"><name pos:start="5501:42" pos:end="5501:43">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5503:17" pos:end="5503:22">break;</break>

            <default pos:start="5505:13" pos:end="5505:20">default:</default>

            <case pos:start="5507:13" pos:end="5507:19">case <expr pos:start="5507:18" pos:end="5507:18"><literal type="number" pos:start="5507:18" pos:end="5507:18">3</literal></expr>:</case> <comment type="block" pos:start="5507:21" pos:end="5507:30">/* jcxz */</comment>

                <expr_stmt pos:start="5509:17" pos:end="5509:44"><expr pos:start="5509:17" pos:end="5509:43"><call pos:start="5509:17" pos:end="5509:43"><name pos:start="5509:17" pos:end="5509:29">gen_op_jz_ecx</name><argument_list pos:start="5509:30" pos:end="5509:43">(<argument pos:start="5509:31" pos:end="5509:38"><expr pos:start="5509:31" pos:end="5509:38"><name pos:start="5509:31" pos:end="5509:38"><name pos:start="5509:31" pos:end="5509:31">s</name><operator pos:start="5509:32" pos:end="5509:33">-&gt;</operator><name pos:start="5509:34" pos:end="5509:38">aflag</name></name></expr></argument>, <argument pos:start="5509:41" pos:end="5509:42"><expr pos:start="5509:41" pos:end="5509:42"><name pos:start="5509:41" pos:end="5509:42">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5511:17" pos:end="5511:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="5517:13" pos:end="5517:30"><expr pos:start="5517:13" pos:end="5517:29"><call pos:start="5517:13" pos:end="5517:29"><name pos:start="5517:13" pos:end="5517:25">gen_set_label</name><argument_list pos:start="5517:26" pos:end="5517:29">(<argument pos:start="5517:27" pos:end="5517:28"><expr pos:start="5517:27" pos:end="5517:28"><name pos:start="5517:27" pos:end="5517:28">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5519:13" pos:end="5519:33"><expr pos:start="5519:13" pos:end="5519:32"><call pos:start="5519:13" pos:end="5519:32"><name pos:start="5519:13" pos:end="5519:22">gen_jmp_im</name><argument_list pos:start="5519:23" pos:end="5519:32">(<argument pos:start="5519:24" pos:end="5519:31"><expr pos:start="5519:24" pos:end="5519:31"><name pos:start="5519:24" pos:end="5519:31">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5521:13" pos:end="5521:27"><expr pos:start="5521:13" pos:end="5521:26"><call pos:start="5521:13" pos:end="5521:26"><name pos:start="5521:13" pos:end="5521:22">tcg_gen_br</name><argument_list pos:start="5521:23" pos:end="5521:26">(<argument pos:start="5521:24" pos:end="5521:25"><expr pos:start="5521:24" pos:end="5521:25"><name pos:start="5521:24" pos:end="5521:25">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="5525:13" pos:end="5525:30"><expr pos:start="5525:13" pos:end="5525:29"><call pos:start="5525:13" pos:end="5525:29"><name pos:start="5525:13" pos:end="5525:25">gen_set_label</name><argument_list pos:start="5525:26" pos:end="5525:29">(<argument pos:start="5525:27" pos:end="5525:28"><expr pos:start="5525:27" pos:end="5525:28"><name pos:start="5525:27" pos:end="5525:28">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5527:13" pos:end="5527:29"><expr pos:start="5527:13" pos:end="5527:28"><call pos:start="5527:13" pos:end="5527:28"><name pos:start="5527:13" pos:end="5527:22">gen_jmp_im</name><argument_list pos:start="5527:23" pos:end="5527:28">(<argument pos:start="5527:24" pos:end="5527:27"><expr pos:start="5527:24" pos:end="5527:27"><name pos:start="5527:24" pos:end="5527:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5529:13" pos:end="5529:30"><expr pos:start="5529:13" pos:end="5529:29"><call pos:start="5529:13" pos:end="5529:29"><name pos:start="5529:13" pos:end="5529:25">gen_set_label</name><argument_list pos:start="5529:26" pos:end="5529:29">(<argument pos:start="5529:27" pos:end="5529:28"><expr pos:start="5529:27" pos:end="5529:28"><name pos:start="5529:27" pos:end="5529:28">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5531:13" pos:end="5531:23"><expr pos:start="5531:13" pos:end="5531:22"><call pos:start="5531:13" pos:end="5531:22"><name pos:start="5531:13" pos:end="5531:19">gen_eob</name><argument_list pos:start="5531:20" pos:end="5531:22">(<argument pos:start="5531:21" pos:end="5531:21"><expr pos:start="5531:21" pos:end="5531:21"><name pos:start="5531:21" pos:end="5531:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5535:9" pos:end="5535:14">break;</break>

    <case pos:start="5537:5" pos:end="5537:15">case <expr pos:start="5537:10" pos:end="5537:14"><literal type="number" pos:start="5537:10" pos:end="5537:14">0x130</literal></expr>:</case> <comment type="block" pos:start="5537:17" pos:end="5537:27">/* wrmsr */</comment>

    <case pos:start="5539:5" pos:end="5539:15">case <expr pos:start="5539:10" pos:end="5539:14"><literal type="number" pos:start="5539:10" pos:end="5539:14">0x132</literal></expr>:</case> <comment type="block" pos:start="5539:17" pos:end="5539:27">/* rdmsr */</comment>

        <if_stmt pos:start="5541:9" pos:end="5563:9"><if pos:start="5541:9" pos:end="5545:9">if <condition pos:start="5541:12" pos:end="5541:24">(<expr pos:start="5541:13" pos:end="5541:23"><name pos:start="5541:13" pos:end="5541:18"><name pos:start="5541:13" pos:end="5541:13">s</name><operator pos:start="5541:14" pos:end="5541:15">-&gt;</operator><name pos:start="5541:16" pos:end="5541:18">cpl</name></name> <operator pos:start="5541:20" pos:end="5541:21">!=</operator> <literal type="number" pos:start="5541:23" pos:end="5541:23">0</literal></expr>)</condition> <block pos:start="5541:26" pos:end="5545:9">{<block_content pos:start="5543:13" pos:end="5543:64">

            <expr_stmt pos:start="5543:13" pos:end="5543:64"><expr pos:start="5543:13" pos:end="5543:63"><call pos:start="5543:13" pos:end="5543:63"><name pos:start="5543:13" pos:end="5543:25">gen_exception</name><argument_list pos:start="5543:26" pos:end="5543:63">(<argument pos:start="5543:27" pos:end="5543:27"><expr pos:start="5543:27" pos:end="5543:27"><name pos:start="5543:27" pos:end="5543:27">s</name></expr></argument>, <argument pos:start="5543:30" pos:end="5543:39"><expr pos:start="5543:30" pos:end="5543:39"><name pos:start="5543:30" pos:end="5543:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5543:42" pos:end="5543:62"><expr pos:start="5543:42" pos:end="5543:62"><name pos:start="5543:42" pos:end="5543:49">pc_start</name> <operator pos:start="5543:51" pos:end="5543:51">-</operator> <name pos:start="5543:53" pos:end="5543:62"><name pos:start="5543:53" pos:end="5543:53">s</name><operator pos:start="5543:54" pos:end="5543:55">-&gt;</operator><name pos:start="5543:56" pos:end="5543:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5545:11" pos:end="5563:9">else <block pos:start="5545:16" pos:end="5563:9">{<block_content pos:start="5547:13" pos:end="5561:13">

            <if_stmt pos:start="5547:13" pos:end="5549:43"><if pos:start="5547:13" pos:end="5549:43">if <condition pos:start="5547:16" pos:end="5547:42">(<expr pos:start="5547:17" pos:end="5547:41"><name pos:start="5547:17" pos:end="5547:24"><name pos:start="5547:17" pos:end="5547:17">s</name><operator pos:start="5547:18" pos:end="5547:19">-&gt;</operator><name pos:start="5547:20" pos:end="5547:24">cc_op</name></name> <operator pos:start="5547:26" pos:end="5547:27">!=</operator> <name pos:start="5547:29" pos:end="5547:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5549:17" pos:end="5549:43"><block_content pos:start="5549:17" pos:end="5549:43">

                <expr_stmt pos:start="5549:17" pos:end="5549:43"><expr pos:start="5549:17" pos:end="5549:42"><call pos:start="5549:17" pos:end="5549:42"><name pos:start="5549:17" pos:end="5549:32">gen_op_set_cc_op</name><argument_list pos:start="5549:33" pos:end="5549:42">(<argument pos:start="5549:34" pos:end="5549:41"><expr pos:start="5549:34" pos:end="5549:41"><name pos:start="5549:34" pos:end="5549:41"><name pos:start="5549:34" pos:end="5549:34">s</name><operator pos:start="5549:35" pos:end="5549:36">-&gt;</operator><name pos:start="5549:37" pos:end="5549:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5551:13" pos:end="5551:46"><expr pos:start="5551:13" pos:end="5551:45"><call pos:start="5551:13" pos:end="5551:45"><name pos:start="5551:13" pos:end="5551:22">gen_jmp_im</name><argument_list pos:start="5551:23" pos:end="5551:45">(<argument pos:start="5551:24" pos:end="5551:44"><expr pos:start="5551:24" pos:end="5551:44"><name pos:start="5551:24" pos:end="5551:31">pc_start</name> <operator pos:start="5551:33" pos:end="5551:33">-</operator> <name pos:start="5551:35" pos:end="5551:44"><name pos:start="5551:35" pos:end="5551:35">s</name><operator pos:start="5551:36" pos:end="5551:37">-&gt;</operator><name pos:start="5551:38" pos:end="5551:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5553:13" pos:end="5561:13"><if pos:start="5553:13" pos:end="5557:13">if <condition pos:start="5553:16" pos:end="5553:22">(<expr pos:start="5553:17" pos:end="5553:21"><name pos:start="5553:17" pos:end="5553:17">b</name> <operator pos:start="5553:19" pos:end="5553:19">&amp;</operator> <literal type="number" pos:start="5553:21" pos:end="5553:21">2</literal></expr>)</condition> <block pos:start="5553:24" pos:end="5557:13">{<block_content pos:start="5555:17" pos:end="5555:35">

                <expr_stmt pos:start="5555:17" pos:end="5555:35"><expr pos:start="5555:17" pos:end="5555:34"><call pos:start="5555:17" pos:end="5555:34"><name pos:start="5555:17" pos:end="5555:32">gen_helper_rdmsr</name><argument_list pos:start="5555:33" pos:end="5555:34">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5557:15" pos:end="5561:13">else <block pos:start="5557:20" pos:end="5561:13">{<block_content pos:start="5559:17" pos:end="5559:35">

                <expr_stmt pos:start="5559:17" pos:end="5559:35"><expr pos:start="5559:17" pos:end="5559:34"><call pos:start="5559:17" pos:end="5559:34"><name pos:start="5559:17" pos:end="5559:32">gen_helper_wrmsr</name><argument_list pos:start="5559:33" pos:end="5559:34">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5565:9" pos:end="5565:14">break;</break>

    <case pos:start="5567:5" pos:end="5567:15">case <expr pos:start="5567:10" pos:end="5567:14"><literal type="number" pos:start="5567:10" pos:end="5567:14">0x131</literal></expr>:</case> <comment type="block" pos:start="5567:17" pos:end="5567:27">/* rdtsc */</comment>

        <if_stmt pos:start="5569:9" pos:end="5571:39"><if pos:start="5569:9" pos:end="5571:39">if <condition pos:start="5569:12" pos:end="5569:38">(<expr pos:start="5569:13" pos:end="5569:37"><name pos:start="5569:13" pos:end="5569:20"><name pos:start="5569:13" pos:end="5569:13">s</name><operator pos:start="5569:14" pos:end="5569:15">-&gt;</operator><name pos:start="5569:16" pos:end="5569:20">cc_op</name></name> <operator pos:start="5569:22" pos:end="5569:23">!=</operator> <name pos:start="5569:25" pos:end="5569:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5571:13" pos:end="5571:39"><block_content pos:start="5571:13" pos:end="5571:39">

            <expr_stmt pos:start="5571:13" pos:end="5571:39"><expr pos:start="5571:13" pos:end="5571:38"><call pos:start="5571:13" pos:end="5571:38"><name pos:start="5571:13" pos:end="5571:28">gen_op_set_cc_op</name><argument_list pos:start="5571:29" pos:end="5571:38">(<argument pos:start="5571:30" pos:end="5571:37"><expr pos:start="5571:30" pos:end="5571:37"><name pos:start="5571:30" pos:end="5571:37"><name pos:start="5571:30" pos:end="5571:30">s</name><operator pos:start="5571:31" pos:end="5571:32">-&gt;</operator><name pos:start="5571:33" pos:end="5571:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5573:9" pos:end="5573:42"><expr pos:start="5573:9" pos:end="5573:41"><call pos:start="5573:9" pos:end="5573:41"><name pos:start="5573:9" pos:end="5573:18">gen_jmp_im</name><argument_list pos:start="5573:19" pos:end="5573:41">(<argument pos:start="5573:20" pos:end="5573:40"><expr pos:start="5573:20" pos:end="5573:40"><name pos:start="5573:20" pos:end="5573:27">pc_start</name> <operator pos:start="5573:29" pos:end="5573:29">-</operator> <name pos:start="5573:31" pos:end="5573:40"><name pos:start="5573:31" pos:end="5573:31">s</name><operator pos:start="5573:32" pos:end="5573:33">-&gt;</operator><name pos:start="5573:34" pos:end="5573:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5575:9" pos:end="5577:27"><if pos:start="5575:9" pos:end="5577:27">if <condition pos:start="5575:12" pos:end="5575:23">(<expr pos:start="5575:13" pos:end="5575:22"><name pos:start="5575:13" pos:end="5575:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="5577:13" pos:end="5577:27"><block_content pos:start="5577:13" pos:end="5577:27">

            <expr_stmt pos:start="5577:13" pos:end="5577:27"><expr pos:start="5577:13" pos:end="5577:26"><call pos:start="5577:13" pos:end="5577:26"><name pos:start="5577:13" pos:end="5577:24">gen_io_start</name><argument_list pos:start="5577:25" pos:end="5577:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5579:9" pos:end="5579:27"><expr pos:start="5579:9" pos:end="5579:26"><call pos:start="5579:9" pos:end="5579:26"><name pos:start="5579:9" pos:end="5579:24">gen_helper_rdtsc</name><argument_list pos:start="5579:25" pos:end="5579:26">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5581:9" pos:end="5587:9"><if pos:start="5581:9" pos:end="5587:9">if <condition pos:start="5581:12" pos:end="5581:23">(<expr pos:start="5581:13" pos:end="5581:22"><name pos:start="5581:13" pos:end="5581:22">use_icount</name></expr>)</condition> <block pos:start="5581:25" pos:end="5587:9">{<block_content pos:start="5583:13" pos:end="5585:43">

            <expr_stmt pos:start="5583:13" pos:end="5583:25"><expr pos:start="5583:13" pos:end="5583:24"><call pos:start="5583:13" pos:end="5583:24"><name pos:start="5583:13" pos:end="5583:22">gen_io_end</name><argument_list pos:start="5583:23" pos:end="5583:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5585:13" pos:end="5585:43"><expr pos:start="5585:13" pos:end="5585:42"><call pos:start="5585:13" pos:end="5585:42"><name pos:start="5585:13" pos:end="5585:19">gen_jmp</name><argument_list pos:start="5585:20" pos:end="5585:42">(<argument pos:start="5585:21" pos:end="5585:21"><expr pos:start="5585:21" pos:end="5585:21"><name pos:start="5585:21" pos:end="5585:21">s</name></expr></argument>, <argument pos:start="5585:24" pos:end="5585:41"><expr pos:start="5585:24" pos:end="5585:41"><name pos:start="5585:24" pos:end="5585:28"><name pos:start="5585:24" pos:end="5585:24">s</name><operator pos:start="5585:25" pos:end="5585:26">-&gt;</operator><name pos:start="5585:27" pos:end="5585:28">pc</name></name> <operator pos:start="5585:30" pos:end="5585:30">-</operator> <name pos:start="5585:32" pos:end="5585:41"><name pos:start="5585:32" pos:end="5585:32">s</name><operator pos:start="5585:33" pos:end="5585:34">-&gt;</operator><name pos:start="5585:35" pos:end="5585:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5589:9" pos:end="5589:14">break;</break>

    <case pos:start="5591:5" pos:end="5591:15">case <expr pos:start="5591:10" pos:end="5591:14"><literal type="number" pos:start="5591:10" pos:end="5591:14">0x133</literal></expr>:</case> <comment type="block" pos:start="5591:17" pos:end="5591:27">/* rdpmc */</comment>

        <if_stmt pos:start="5593:9" pos:end="5595:39"><if pos:start="5593:9" pos:end="5595:39">if <condition pos:start="5593:12" pos:end="5593:38">(<expr pos:start="5593:13" pos:end="5593:37"><name pos:start="5593:13" pos:end="5593:20"><name pos:start="5593:13" pos:end="5593:13">s</name><operator pos:start="5593:14" pos:end="5593:15">-&gt;</operator><name pos:start="5593:16" pos:end="5593:20">cc_op</name></name> <operator pos:start="5593:22" pos:end="5593:23">!=</operator> <name pos:start="5593:25" pos:end="5593:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5595:13" pos:end="5595:39"><block_content pos:start="5595:13" pos:end="5595:39">

            <expr_stmt pos:start="5595:13" pos:end="5595:39"><expr pos:start="5595:13" pos:end="5595:38"><call pos:start="5595:13" pos:end="5595:38"><name pos:start="5595:13" pos:end="5595:28">gen_op_set_cc_op</name><argument_list pos:start="5595:29" pos:end="5595:38">(<argument pos:start="5595:30" pos:end="5595:37"><expr pos:start="5595:30" pos:end="5595:37"><name pos:start="5595:30" pos:end="5595:37"><name pos:start="5595:30" pos:end="5595:30">s</name><operator pos:start="5595:31" pos:end="5595:32">-&gt;</operator><name pos:start="5595:33" pos:end="5595:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5597:9" pos:end="5597:42"><expr pos:start="5597:9" pos:end="5597:41"><call pos:start="5597:9" pos:end="5597:41"><name pos:start="5597:9" pos:end="5597:18">gen_jmp_im</name><argument_list pos:start="5597:19" pos:end="5597:41">(<argument pos:start="5597:20" pos:end="5597:40"><expr pos:start="5597:20" pos:end="5597:40"><name pos:start="5597:20" pos:end="5597:27">pc_start</name> <operator pos:start="5597:29" pos:end="5597:29">-</operator> <name pos:start="5597:31" pos:end="5597:40"><name pos:start="5597:31" pos:end="5597:31">s</name><operator pos:start="5597:32" pos:end="5597:33">-&gt;</operator><name pos:start="5597:34" pos:end="5597:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5599:9" pos:end="5599:27"><expr pos:start="5599:9" pos:end="5599:26"><call pos:start="5599:9" pos:end="5599:26"><name pos:start="5599:9" pos:end="5599:24">gen_helper_rdpmc</name><argument_list pos:start="5599:25" pos:end="5599:26">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5601:9" pos:end="5601:14">break;</break>

    <case pos:start="5603:5" pos:end="5603:15">case <expr pos:start="5603:10" pos:end="5603:14"><literal type="number" pos:start="5603:10" pos:end="5603:14">0x134</literal></expr>:</case> <comment type="block" pos:start="5603:17" pos:end="5603:30">/* sysenter */</comment>

        <comment type="block" pos:start="5605:9" pos:end="5605:51">/* For Intel SYSENTER is valid on 64-bit */</comment>

        <if_stmt pos:start="5607:9" pos:end="5609:28"><if pos:start="5607:9" pos:end="5609:28">if <condition pos:start="5607:12" pos:end="5607:79">(<expr pos:start="5607:13" pos:end="5607:78"><call pos:start="5607:13" pos:end="5607:21"><name pos:start="5607:13" pos:end="5607:18">CODE64</name><argument_list pos:start="5607:19" pos:end="5607:21">(<argument pos:start="5607:20" pos:end="5607:20"><expr pos:start="5607:20" pos:end="5607:20"><name pos:start="5607:20" pos:end="5607:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="5607:23" pos:end="5607:24">&amp;&amp;</operator> <name pos:start="5607:26" pos:end="5607:54"><name pos:start="5607:26" pos:end="5607:39">cpu_single_env</name><operator pos:start="5607:40" pos:end="5607:41">-&gt;</operator><name pos:start="5607:42" pos:end="5607:54">cpuid_vendor1</name></name> <operator pos:start="5607:56" pos:end="5607:57">!=</operator> <name pos:start="5607:59" pos:end="5607:78">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="5609:13" pos:end="5609:28"><block_content pos:start="5609:13" pos:end="5609:28">

            <goto pos:start="5609:13" pos:end="5609:28">goto <name pos:start="5609:18" pos:end="5609:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5611:9" pos:end="5631:9"><if pos:start="5611:9" pos:end="5615:9">if <condition pos:start="5611:12" pos:end="5611:19">(<expr pos:start="5611:13" pos:end="5611:18"><operator pos:start="5611:13" pos:end="5611:13">!</operator><name pos:start="5611:14" pos:end="5611:18"><name pos:start="5611:14" pos:end="5611:14">s</name><operator pos:start="5611:15" pos:end="5611:16">-&gt;</operator><name pos:start="5611:17" pos:end="5611:18">pe</name></name></expr>)</condition> <block pos:start="5611:21" pos:end="5615:9">{<block_content pos:start="5613:13" pos:end="5613:64">

            <expr_stmt pos:start="5613:13" pos:end="5613:64"><expr pos:start="5613:13" pos:end="5613:63"><call pos:start="5613:13" pos:end="5613:63"><name pos:start="5613:13" pos:end="5613:25">gen_exception</name><argument_list pos:start="5613:26" pos:end="5613:63">(<argument pos:start="5613:27" pos:end="5613:27"><expr pos:start="5613:27" pos:end="5613:27"><name pos:start="5613:27" pos:end="5613:27">s</name></expr></argument>, <argument pos:start="5613:30" pos:end="5613:39"><expr pos:start="5613:30" pos:end="5613:39"><name pos:start="5613:30" pos:end="5613:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5613:42" pos:end="5613:62"><expr pos:start="5613:42" pos:end="5613:62"><name pos:start="5613:42" pos:end="5613:49">pc_start</name> <operator pos:start="5613:51" pos:end="5613:51">-</operator> <name pos:start="5613:53" pos:end="5613:62"><name pos:start="5613:53" pos:end="5613:53">s</name><operator pos:start="5613:54" pos:end="5613:55">-&gt;</operator><name pos:start="5613:56" pos:end="5613:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5615:11" pos:end="5631:9">else <block pos:start="5615:16" pos:end="5631:9">{<block_content pos:start="5617:13" pos:end="5629:23">

            <if_stmt pos:start="5617:13" pos:end="5623:13"><if pos:start="5617:13" pos:end="5623:13">if <condition pos:start="5617:16" pos:end="5617:42">(<expr pos:start="5617:17" pos:end="5617:41"><name pos:start="5617:17" pos:end="5617:24"><name pos:start="5617:17" pos:end="5617:17">s</name><operator pos:start="5617:18" pos:end="5617:19">-&gt;</operator><name pos:start="5617:20" pos:end="5617:24">cc_op</name></name> <operator pos:start="5617:26" pos:end="5617:27">!=</operator> <name pos:start="5617:29" pos:end="5617:41">CC_OP_DYNAMIC</name></expr>)</condition> <block pos:start="5617:44" pos:end="5623:13">{<block_content pos:start="5619:17" pos:end="5621:41">

                <expr_stmt pos:start="5619:17" pos:end="5619:43"><expr pos:start="5619:17" pos:end="5619:42"><call pos:start="5619:17" pos:end="5619:42"><name pos:start="5619:17" pos:end="5619:32">gen_op_set_cc_op</name><argument_list pos:start="5619:33" pos:end="5619:42">(<argument pos:start="5619:34" pos:end="5619:41"><expr pos:start="5619:34" pos:end="5619:41"><name pos:start="5619:34" pos:end="5619:41"><name pos:start="5619:34" pos:end="5619:34">s</name><operator pos:start="5619:35" pos:end="5619:36">-&gt;</operator><name pos:start="5619:37" pos:end="5619:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5621:17" pos:end="5621:41"><expr pos:start="5621:17" pos:end="5621:40"><name pos:start="5621:17" pos:end="5621:24"><name pos:start="5621:17" pos:end="5621:17">s</name><operator pos:start="5621:18" pos:end="5621:19">-&gt;</operator><name pos:start="5621:20" pos:end="5621:24">cc_op</name></name> <operator pos:start="5621:26" pos:end="5621:26">=</operator> <name pos:start="5621:28" pos:end="5621:40">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5625:13" pos:end="5625:46"><expr pos:start="5625:13" pos:end="5625:45"><call pos:start="5625:13" pos:end="5625:45"><name pos:start="5625:13" pos:end="5625:22">gen_jmp_im</name><argument_list pos:start="5625:23" pos:end="5625:45">(<argument pos:start="5625:24" pos:end="5625:44"><expr pos:start="5625:24" pos:end="5625:44"><name pos:start="5625:24" pos:end="5625:31">pc_start</name> <operator pos:start="5625:33" pos:end="5625:33">-</operator> <name pos:start="5625:35" pos:end="5625:44"><name pos:start="5625:35" pos:end="5625:35">s</name><operator pos:start="5625:36" pos:end="5625:37">-&gt;</operator><name pos:start="5625:38" pos:end="5625:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5627:13" pos:end="5627:34"><expr pos:start="5627:13" pos:end="5627:33"><call pos:start="5627:13" pos:end="5627:33"><name pos:start="5627:13" pos:end="5627:31">gen_helper_sysenter</name><argument_list pos:start="5627:32" pos:end="5627:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5629:13" pos:end="5629:23"><expr pos:start="5629:13" pos:end="5629:22"><call pos:start="5629:13" pos:end="5629:22"><name pos:start="5629:13" pos:end="5629:19">gen_eob</name><argument_list pos:start="5629:20" pos:end="5629:22">(<argument pos:start="5629:21" pos:end="5629:21"><expr pos:start="5629:21" pos:end="5629:21"><name pos:start="5629:21" pos:end="5629:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5633:9" pos:end="5633:14">break;</break>

    <case pos:start="5635:5" pos:end="5635:15">case <expr pos:start="5635:10" pos:end="5635:14"><literal type="number" pos:start="5635:10" pos:end="5635:14">0x135</literal></expr>:</case> <comment type="block" pos:start="5635:17" pos:end="5635:29">/* sysexit */</comment>

        <comment type="block" pos:start="5637:9" pos:end="5637:50">/* For Intel SYSEXIT is valid on 64-bit */</comment>

        <if_stmt pos:start="5639:9" pos:end="5641:28"><if pos:start="5639:9" pos:end="5641:28">if <condition pos:start="5639:12" pos:end="5639:79">(<expr pos:start="5639:13" pos:end="5639:78"><call pos:start="5639:13" pos:end="5639:21"><name pos:start="5639:13" pos:end="5639:18">CODE64</name><argument_list pos:start="5639:19" pos:end="5639:21">(<argument pos:start="5639:20" pos:end="5639:20"><expr pos:start="5639:20" pos:end="5639:20"><name pos:start="5639:20" pos:end="5639:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="5639:23" pos:end="5639:24">&amp;&amp;</operator> <name pos:start="5639:26" pos:end="5639:54"><name pos:start="5639:26" pos:end="5639:39">cpu_single_env</name><operator pos:start="5639:40" pos:end="5639:41">-&gt;</operator><name pos:start="5639:42" pos:end="5639:54">cpuid_vendor1</name></name> <operator pos:start="5639:56" pos:end="5639:57">!=</operator> <name pos:start="5639:59" pos:end="5639:78">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="5641:13" pos:end="5641:28"><block_content pos:start="5641:13" pos:end="5641:28">

            <goto pos:start="5641:13" pos:end="5641:28">goto <name pos:start="5641:18" pos:end="5641:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5643:9" pos:end="5663:9"><if pos:start="5643:9" pos:end="5647:9">if <condition pos:start="5643:12" pos:end="5643:19">(<expr pos:start="5643:13" pos:end="5643:18"><operator pos:start="5643:13" pos:end="5643:13">!</operator><name pos:start="5643:14" pos:end="5643:18"><name pos:start="5643:14" pos:end="5643:14">s</name><operator pos:start="5643:15" pos:end="5643:16">-&gt;</operator><name pos:start="5643:17" pos:end="5643:18">pe</name></name></expr>)</condition> <block pos:start="5643:21" pos:end="5647:9">{<block_content pos:start="5645:13" pos:end="5645:64">

            <expr_stmt pos:start="5645:13" pos:end="5645:64"><expr pos:start="5645:13" pos:end="5645:63"><call pos:start="5645:13" pos:end="5645:63"><name pos:start="5645:13" pos:end="5645:25">gen_exception</name><argument_list pos:start="5645:26" pos:end="5645:63">(<argument pos:start="5645:27" pos:end="5645:27"><expr pos:start="5645:27" pos:end="5645:27"><name pos:start="5645:27" pos:end="5645:27">s</name></expr></argument>, <argument pos:start="5645:30" pos:end="5645:39"><expr pos:start="5645:30" pos:end="5645:39"><name pos:start="5645:30" pos:end="5645:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5645:42" pos:end="5645:62"><expr pos:start="5645:42" pos:end="5645:62"><name pos:start="5645:42" pos:end="5645:49">pc_start</name> <operator pos:start="5645:51" pos:end="5645:51">-</operator> <name pos:start="5645:53" pos:end="5645:62"><name pos:start="5645:53" pos:end="5645:53">s</name><operator pos:start="5645:54" pos:end="5645:55">-&gt;</operator><name pos:start="5645:56" pos:end="5645:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5647:11" pos:end="5663:9">else <block pos:start="5647:16" pos:end="5663:9">{<block_content pos:start="5649:13" pos:end="5661:23">

            <if_stmt pos:start="5649:13" pos:end="5655:13"><if pos:start="5649:13" pos:end="5655:13">if <condition pos:start="5649:16" pos:end="5649:42">(<expr pos:start="5649:17" pos:end="5649:41"><name pos:start="5649:17" pos:end="5649:24"><name pos:start="5649:17" pos:end="5649:17">s</name><operator pos:start="5649:18" pos:end="5649:19">-&gt;</operator><name pos:start="5649:20" pos:end="5649:24">cc_op</name></name> <operator pos:start="5649:26" pos:end="5649:27">!=</operator> <name pos:start="5649:29" pos:end="5649:41">CC_OP_DYNAMIC</name></expr>)</condition> <block pos:start="5649:44" pos:end="5655:13">{<block_content pos:start="5651:17" pos:end="5653:41">

                <expr_stmt pos:start="5651:17" pos:end="5651:43"><expr pos:start="5651:17" pos:end="5651:42"><call pos:start="5651:17" pos:end="5651:42"><name pos:start="5651:17" pos:end="5651:32">gen_op_set_cc_op</name><argument_list pos:start="5651:33" pos:end="5651:42">(<argument pos:start="5651:34" pos:end="5651:41"><expr pos:start="5651:34" pos:end="5651:41"><name pos:start="5651:34" pos:end="5651:41"><name pos:start="5651:34" pos:end="5651:34">s</name><operator pos:start="5651:35" pos:end="5651:36">-&gt;</operator><name pos:start="5651:37" pos:end="5651:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5653:17" pos:end="5653:41"><expr pos:start="5653:17" pos:end="5653:40"><name pos:start="5653:17" pos:end="5653:24"><name pos:start="5653:17" pos:end="5653:17">s</name><operator pos:start="5653:18" pos:end="5653:19">-&gt;</operator><name pos:start="5653:20" pos:end="5653:24">cc_op</name></name> <operator pos:start="5653:26" pos:end="5653:26">=</operator> <name pos:start="5653:28" pos:end="5653:40">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5657:13" pos:end="5657:46"><expr pos:start="5657:13" pos:end="5657:45"><call pos:start="5657:13" pos:end="5657:45"><name pos:start="5657:13" pos:end="5657:22">gen_jmp_im</name><argument_list pos:start="5657:23" pos:end="5657:45">(<argument pos:start="5657:24" pos:end="5657:44"><expr pos:start="5657:24" pos:end="5657:44"><name pos:start="5657:24" pos:end="5657:31">pc_start</name> <operator pos:start="5657:33" pos:end="5657:33">-</operator> <name pos:start="5657:35" pos:end="5657:44"><name pos:start="5657:35" pos:end="5657:35">s</name><operator pos:start="5657:36" pos:end="5657:37">-&gt;</operator><name pos:start="5657:38" pos:end="5657:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5659:13" pos:end="5659:53"><expr pos:start="5659:13" pos:end="5659:52"><call pos:start="5659:13" pos:end="5659:52"><name pos:start="5659:13" pos:end="5659:30">gen_helper_sysexit</name><argument_list pos:start="5659:31" pos:end="5659:52">(<argument pos:start="5659:32" pos:end="5659:51"><expr pos:start="5659:32" pos:end="5659:51"><call pos:start="5659:32" pos:end="5659:51"><name pos:start="5659:32" pos:end="5659:44">tcg_const_i32</name><argument_list pos:start="5659:45" pos:end="5659:51">(<argument pos:start="5659:46" pos:end="5659:50"><expr pos:start="5659:46" pos:end="5659:50"><name pos:start="5659:46" pos:end="5659:50">dflag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5661:13" pos:end="5661:23"><expr pos:start="5661:13" pos:end="5661:22"><call pos:start="5661:13" pos:end="5661:22"><name pos:start="5661:13" pos:end="5661:19">gen_eob</name><argument_list pos:start="5661:20" pos:end="5661:22">(<argument pos:start="5661:21" pos:end="5661:21"><expr pos:start="5661:21" pos:end="5661:21"><name pos:start="5661:21" pos:end="5661:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5665:9" pos:end="5668:0">break;</break>

<cpp:ifdef pos:start="5667:1" pos:end="5667:20">#<cpp:directive pos:start="5667:2" pos:end="5667:6">ifdef</cpp:directive> <name pos:start="5667:8" pos:end="5667:20">TARGET_X86_64</name></cpp:ifdef>

    <case pos:start="5669:5" pos:end="5669:15">case <expr pos:start="5669:10" pos:end="5669:14"><literal type="number" pos:start="5669:10" pos:end="5669:14">0x105</literal></expr>:</case> <comment type="block" pos:start="5669:17" pos:end="5669:29">/* syscall */</comment>

        <comment type="block" pos:start="5671:9" pos:end="5671:46">/* XXX: is it usable in real mode ? */</comment>

        <if_stmt pos:start="5673:9" pos:end="5679:9"><if pos:start="5673:9" pos:end="5679:9">if <condition pos:start="5673:12" pos:end="5673:38">(<expr pos:start="5673:13" pos:end="5673:37"><name pos:start="5673:13" pos:end="5673:20"><name pos:start="5673:13" pos:end="5673:13">s</name><operator pos:start="5673:14" pos:end="5673:15">-&gt;</operator><name pos:start="5673:16" pos:end="5673:20">cc_op</name></name> <operator pos:start="5673:22" pos:end="5673:23">!=</operator> <name pos:start="5673:25" pos:end="5673:37">CC_OP_DYNAMIC</name></expr>)</condition> <block pos:start="5673:40" pos:end="5679:9">{<block_content pos:start="5675:13" pos:end="5677:37">

            <expr_stmt pos:start="5675:13" pos:end="5675:39"><expr pos:start="5675:13" pos:end="5675:38"><call pos:start="5675:13" pos:end="5675:38"><name pos:start="5675:13" pos:end="5675:28">gen_op_set_cc_op</name><argument_list pos:start="5675:29" pos:end="5675:38">(<argument pos:start="5675:30" pos:end="5675:37"><expr pos:start="5675:30" pos:end="5675:37"><name pos:start="5675:30" pos:end="5675:37"><name pos:start="5675:30" pos:end="5675:30">s</name><operator pos:start="5675:31" pos:end="5675:32">-&gt;</operator><name pos:start="5675:33" pos:end="5675:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5677:13" pos:end="5677:37"><expr pos:start="5677:13" pos:end="5677:36"><name pos:start="5677:13" pos:end="5677:20"><name pos:start="5677:13" pos:end="5677:13">s</name><operator pos:start="5677:14" pos:end="5677:15">-&gt;</operator><name pos:start="5677:16" pos:end="5677:20">cc_op</name></name> <operator pos:start="5677:22" pos:end="5677:22">=</operator> <name pos:start="5677:24" pos:end="5677:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="5681:9" pos:end="5681:42"><expr pos:start="5681:9" pos:end="5681:41"><call pos:start="5681:9" pos:end="5681:41"><name pos:start="5681:9" pos:end="5681:18">gen_jmp_im</name><argument_list pos:start="5681:19" pos:end="5681:41">(<argument pos:start="5681:20" pos:end="5681:40"><expr pos:start="5681:20" pos:end="5681:40"><name pos:start="5681:20" pos:end="5681:27">pc_start</name> <operator pos:start="5681:29" pos:end="5681:29">-</operator> <name pos:start="5681:31" pos:end="5681:40"><name pos:start="5681:31" pos:end="5681:31">s</name><operator pos:start="5681:32" pos:end="5681:33">-&gt;</operator><name pos:start="5681:34" pos:end="5681:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5683:9" pos:end="5683:60"><expr pos:start="5683:9" pos:end="5683:59"><call pos:start="5683:9" pos:end="5683:59"><name pos:start="5683:9" pos:end="5683:26">gen_helper_syscall</name><argument_list pos:start="5683:27" pos:end="5683:59">(<argument pos:start="5683:28" pos:end="5683:58"><expr pos:start="5683:28" pos:end="5683:58"><call pos:start="5683:28" pos:end="5683:58"><name pos:start="5683:28" pos:end="5683:40">tcg_const_i32</name><argument_list pos:start="5683:41" pos:end="5683:58">(<argument pos:start="5683:42" pos:end="5683:57"><expr pos:start="5683:42" pos:end="5683:57"><name pos:start="5683:42" pos:end="5683:46"><name pos:start="5683:42" pos:end="5683:42">s</name><operator pos:start="5683:43" pos:end="5683:44">-&gt;</operator><name pos:start="5683:45" pos:end="5683:46">pc</name></name> <operator pos:start="5683:48" pos:end="5683:48">-</operator> <name pos:start="5683:50" pos:end="5683:57">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5685:9" pos:end="5685:19"><expr pos:start="5685:9" pos:end="5685:18"><call pos:start="5685:9" pos:end="5685:18"><name pos:start="5685:9" pos:end="5685:15">gen_eob</name><argument_list pos:start="5685:16" pos:end="5685:18">(<argument pos:start="5685:17" pos:end="5685:17"><expr pos:start="5685:17" pos:end="5685:17"><name pos:start="5685:17" pos:end="5685:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5687:9" pos:end="5687:14">break;</break>

    <case pos:start="5689:5" pos:end="5689:15">case <expr pos:start="5689:10" pos:end="5689:14"><literal type="number" pos:start="5689:10" pos:end="5689:14">0x107</literal></expr>:</case> <comment type="block" pos:start="5689:17" pos:end="5689:28">/* sysret */</comment>

        <if_stmt pos:start="5691:9" pos:end="5717:9"><if pos:start="5691:9" pos:end="5695:9">if <condition pos:start="5691:12" pos:end="5691:19">(<expr pos:start="5691:13" pos:end="5691:18"><operator pos:start="5691:13" pos:end="5691:13">!</operator><name pos:start="5691:14" pos:end="5691:18"><name pos:start="5691:14" pos:end="5691:14">s</name><operator pos:start="5691:15" pos:end="5691:16">-&gt;</operator><name pos:start="5691:17" pos:end="5691:18">pe</name></name></expr>)</condition> <block pos:start="5691:21" pos:end="5695:9">{<block_content pos:start="5693:13" pos:end="5693:64">

            <expr_stmt pos:start="5693:13" pos:end="5693:64"><expr pos:start="5693:13" pos:end="5693:63"><call pos:start="5693:13" pos:end="5693:63"><name pos:start="5693:13" pos:end="5693:25">gen_exception</name><argument_list pos:start="5693:26" pos:end="5693:63">(<argument pos:start="5693:27" pos:end="5693:27"><expr pos:start="5693:27" pos:end="5693:27"><name pos:start="5693:27" pos:end="5693:27">s</name></expr></argument>, <argument pos:start="5693:30" pos:end="5693:39"><expr pos:start="5693:30" pos:end="5693:39"><name pos:start="5693:30" pos:end="5693:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5693:42" pos:end="5693:62"><expr pos:start="5693:42" pos:end="5693:62"><name pos:start="5693:42" pos:end="5693:49">pc_start</name> <operator pos:start="5693:51" pos:end="5693:51">-</operator> <name pos:start="5693:53" pos:end="5693:62"><name pos:start="5693:53" pos:end="5693:53">s</name><operator pos:start="5693:54" pos:end="5693:55">-&gt;</operator><name pos:start="5693:56" pos:end="5693:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5695:11" pos:end="5717:9">else <block pos:start="5695:16" pos:end="5717:9">{<block_content pos:start="5697:13" pos:end="5715:23">

            <if_stmt pos:start="5697:13" pos:end="5703:13"><if pos:start="5697:13" pos:end="5703:13">if <condition pos:start="5697:16" pos:end="5697:42">(<expr pos:start="5697:17" pos:end="5697:41"><name pos:start="5697:17" pos:end="5697:24"><name pos:start="5697:17" pos:end="5697:17">s</name><operator pos:start="5697:18" pos:end="5697:19">-&gt;</operator><name pos:start="5697:20" pos:end="5697:24">cc_op</name></name> <operator pos:start="5697:26" pos:end="5697:27">!=</operator> <name pos:start="5697:29" pos:end="5697:41">CC_OP_DYNAMIC</name></expr>)</condition> <block pos:start="5697:44" pos:end="5703:13">{<block_content pos:start="5699:17" pos:end="5701:41">

                <expr_stmt pos:start="5699:17" pos:end="5699:43"><expr pos:start="5699:17" pos:end="5699:42"><call pos:start="5699:17" pos:end="5699:42"><name pos:start="5699:17" pos:end="5699:32">gen_op_set_cc_op</name><argument_list pos:start="5699:33" pos:end="5699:42">(<argument pos:start="5699:34" pos:end="5699:41"><expr pos:start="5699:34" pos:end="5699:41"><name pos:start="5699:34" pos:end="5699:41"><name pos:start="5699:34" pos:end="5699:34">s</name><operator pos:start="5699:35" pos:end="5699:36">-&gt;</operator><name pos:start="5699:37" pos:end="5699:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5701:17" pos:end="5701:41"><expr pos:start="5701:17" pos:end="5701:40"><name pos:start="5701:17" pos:end="5701:24"><name pos:start="5701:17" pos:end="5701:17">s</name><operator pos:start="5701:18" pos:end="5701:19">-&gt;</operator><name pos:start="5701:20" pos:end="5701:24">cc_op</name></name> <operator pos:start="5701:26" pos:end="5701:26">=</operator> <name pos:start="5701:28" pos:end="5701:40">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5705:13" pos:end="5705:46"><expr pos:start="5705:13" pos:end="5705:45"><call pos:start="5705:13" pos:end="5705:45"><name pos:start="5705:13" pos:end="5705:22">gen_jmp_im</name><argument_list pos:start="5705:23" pos:end="5705:45">(<argument pos:start="5705:24" pos:end="5705:44"><expr pos:start="5705:24" pos:end="5705:44"><name pos:start="5705:24" pos:end="5705:31">pc_start</name> <operator pos:start="5705:33" pos:end="5705:33">-</operator> <name pos:start="5705:35" pos:end="5705:44"><name pos:start="5705:35" pos:end="5705:35">s</name><operator pos:start="5705:36" pos:end="5705:37">-&gt;</operator><name pos:start="5705:38" pos:end="5705:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5707:13" pos:end="5707:55"><expr pos:start="5707:13" pos:end="5707:54"><call pos:start="5707:13" pos:end="5707:54"><name pos:start="5707:13" pos:end="5707:29">gen_helper_sysret</name><argument_list pos:start="5707:30" pos:end="5707:54">(<argument pos:start="5707:31" pos:end="5707:53"><expr pos:start="5707:31" pos:end="5707:53"><call pos:start="5707:31" pos:end="5707:53"><name pos:start="5707:31" pos:end="5707:43">tcg_const_i32</name><argument_list pos:start="5707:44" pos:end="5707:53">(<argument pos:start="5707:45" pos:end="5707:52"><expr pos:start="5707:45" pos:end="5707:52"><name pos:start="5707:45" pos:end="5707:52"><name pos:start="5707:45" pos:end="5707:45">s</name><operator pos:start="5707:46" pos:end="5707:47">-&gt;</operator><name pos:start="5707:48" pos:end="5707:52">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="5709:13" pos:end="5709:64">/* condition codes are modified only in long mode */</comment>

            <if_stmt pos:start="5711:13" pos:end="5713:40"><if pos:start="5711:13" pos:end="5713:40">if <condition pos:start="5711:16" pos:end="5711:23">(<expr pos:start="5711:17" pos:end="5711:22"><name pos:start="5711:17" pos:end="5711:22"><name pos:start="5711:17" pos:end="5711:17">s</name><operator pos:start="5711:18" pos:end="5711:19">-&gt;</operator><name pos:start="5711:20" pos:end="5711:22">lma</name></name></expr>)</condition><block type="pseudo" pos:start="5713:17" pos:end="5713:40"><block_content pos:start="5713:17" pos:end="5713:40">

                <expr_stmt pos:start="5713:17" pos:end="5713:40"><expr pos:start="5713:17" pos:end="5713:39"><name pos:start="5713:17" pos:end="5713:24"><name pos:start="5713:17" pos:end="5713:17">s</name><operator pos:start="5713:18" pos:end="5713:19">-&gt;</operator><name pos:start="5713:20" pos:end="5713:24">cc_op</name></name> <operator pos:start="5713:26" pos:end="5713:26">=</operator> <name pos:start="5713:28" pos:end="5713:39">CC_OP_EFLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5715:13" pos:end="5715:23"><expr pos:start="5715:13" pos:end="5715:22"><call pos:start="5715:13" pos:end="5715:22"><name pos:start="5715:13" pos:end="5715:19">gen_eob</name><argument_list pos:start="5715:20" pos:end="5715:22">(<argument pos:start="5715:21" pos:end="5715:21"><expr pos:start="5715:21" pos:end="5715:21"><name pos:start="5715:21" pos:end="5715:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5719:9" pos:end="5722:0">break;</break>

<cpp:endif pos:start="5721:1" pos:end="5721:6">#<cpp:directive pos:start="5721:2" pos:end="5721:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5723:5" pos:end="5723:15">case <expr pos:start="5723:10" pos:end="5723:14"><literal type="number" pos:start="5723:10" pos:end="5723:14">0x1a2</literal></expr>:</case> <comment type="block" pos:start="5723:17" pos:end="5723:27">/* cpuid */</comment>

        <if_stmt pos:start="5725:9" pos:end="5727:39"><if pos:start="5725:9" pos:end="5727:39">if <condition pos:start="5725:12" pos:end="5725:38">(<expr pos:start="5725:13" pos:end="5725:37"><name pos:start="5725:13" pos:end="5725:20"><name pos:start="5725:13" pos:end="5725:13">s</name><operator pos:start="5725:14" pos:end="5725:15">-&gt;</operator><name pos:start="5725:16" pos:end="5725:20">cc_op</name></name> <operator pos:start="5725:22" pos:end="5725:23">!=</operator> <name pos:start="5725:25" pos:end="5725:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5727:13" pos:end="5727:39"><block_content pos:start="5727:13" pos:end="5727:39">

            <expr_stmt pos:start="5727:13" pos:end="5727:39"><expr pos:start="5727:13" pos:end="5727:38"><call pos:start="5727:13" pos:end="5727:38"><name pos:start="5727:13" pos:end="5727:28">gen_op_set_cc_op</name><argument_list pos:start="5727:29" pos:end="5727:38">(<argument pos:start="5727:30" pos:end="5727:37"><expr pos:start="5727:30" pos:end="5727:37"><name pos:start="5727:30" pos:end="5727:37"><name pos:start="5727:30" pos:end="5727:30">s</name><operator pos:start="5727:31" pos:end="5727:32">-&gt;</operator><name pos:start="5727:33" pos:end="5727:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5729:9" pos:end="5729:42"><expr pos:start="5729:9" pos:end="5729:41"><call pos:start="5729:9" pos:end="5729:41"><name pos:start="5729:9" pos:end="5729:18">gen_jmp_im</name><argument_list pos:start="5729:19" pos:end="5729:41">(<argument pos:start="5729:20" pos:end="5729:40"><expr pos:start="5729:20" pos:end="5729:40"><name pos:start="5729:20" pos:end="5729:27">pc_start</name> <operator pos:start="5729:29" pos:end="5729:29">-</operator> <name pos:start="5729:31" pos:end="5729:40"><name pos:start="5729:31" pos:end="5729:31">s</name><operator pos:start="5729:32" pos:end="5729:33">-&gt;</operator><name pos:start="5729:34" pos:end="5729:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5731:9" pos:end="5731:27"><expr pos:start="5731:9" pos:end="5731:26"><call pos:start="5731:9" pos:end="5731:26"><name pos:start="5731:9" pos:end="5731:24">gen_helper_cpuid</name><argument_list pos:start="5731:25" pos:end="5731:26">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5733:9" pos:end="5733:14">break;</break>

    <case pos:start="5735:5" pos:end="5735:14">case <expr pos:start="5735:10" pos:end="5735:13"><literal type="number" pos:start="5735:10" pos:end="5735:13">0xf4</literal></expr>:</case> <comment type="block" pos:start="5735:16" pos:end="5735:24">/* hlt */</comment>

        <if_stmt pos:start="5737:9" pos:end="5753:9"><if pos:start="5737:9" pos:end="5741:9">if <condition pos:start="5737:12" pos:end="5737:24">(<expr pos:start="5737:13" pos:end="5737:23"><name pos:start="5737:13" pos:end="5737:18"><name pos:start="5737:13" pos:end="5737:13">s</name><operator pos:start="5737:14" pos:end="5737:15">-&gt;</operator><name pos:start="5737:16" pos:end="5737:18">cpl</name></name> <operator pos:start="5737:20" pos:end="5737:21">!=</operator> <literal type="number" pos:start="5737:23" pos:end="5737:23">0</literal></expr>)</condition> <block pos:start="5737:26" pos:end="5741:9">{<block_content pos:start="5739:13" pos:end="5739:64">

            <expr_stmt pos:start="5739:13" pos:end="5739:64"><expr pos:start="5739:13" pos:end="5739:63"><call pos:start="5739:13" pos:end="5739:63"><name pos:start="5739:13" pos:end="5739:25">gen_exception</name><argument_list pos:start="5739:26" pos:end="5739:63">(<argument pos:start="5739:27" pos:end="5739:27"><expr pos:start="5739:27" pos:end="5739:27"><name pos:start="5739:27" pos:end="5739:27">s</name></expr></argument>, <argument pos:start="5739:30" pos:end="5739:39"><expr pos:start="5739:30" pos:end="5739:39"><name pos:start="5739:30" pos:end="5739:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5739:42" pos:end="5739:62"><expr pos:start="5739:42" pos:end="5739:62"><name pos:start="5739:42" pos:end="5739:49">pc_start</name> <operator pos:start="5739:51" pos:end="5739:51">-</operator> <name pos:start="5739:53" pos:end="5739:62"><name pos:start="5739:53" pos:end="5739:53">s</name><operator pos:start="5739:54" pos:end="5739:55">-&gt;</operator><name pos:start="5739:56" pos:end="5739:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5741:11" pos:end="5753:9">else <block pos:start="5741:16" pos:end="5753:9">{<block_content pos:start="5743:13" pos:end="5751:26">

            <if_stmt pos:start="5743:13" pos:end="5745:43"><if pos:start="5743:13" pos:end="5745:43">if <condition pos:start="5743:16" pos:end="5743:42">(<expr pos:start="5743:17" pos:end="5743:41"><name pos:start="5743:17" pos:end="5743:24"><name pos:start="5743:17" pos:end="5743:17">s</name><operator pos:start="5743:18" pos:end="5743:19">-&gt;</operator><name pos:start="5743:20" pos:end="5743:24">cc_op</name></name> <operator pos:start="5743:26" pos:end="5743:27">!=</operator> <name pos:start="5743:29" pos:end="5743:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5745:17" pos:end="5745:43"><block_content pos:start="5745:17" pos:end="5745:43">

                <expr_stmt pos:start="5745:17" pos:end="5745:43"><expr pos:start="5745:17" pos:end="5745:42"><call pos:start="5745:17" pos:end="5745:42"><name pos:start="5745:17" pos:end="5745:32">gen_op_set_cc_op</name><argument_list pos:start="5745:33" pos:end="5745:42">(<argument pos:start="5745:34" pos:end="5745:41"><expr pos:start="5745:34" pos:end="5745:41"><name pos:start="5745:34" pos:end="5745:41"><name pos:start="5745:34" pos:end="5745:34">s</name><operator pos:start="5745:35" pos:end="5745:36">-&gt;</operator><name pos:start="5745:37" pos:end="5745:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5747:13" pos:end="5747:46"><expr pos:start="5747:13" pos:end="5747:45"><call pos:start="5747:13" pos:end="5747:45"><name pos:start="5747:13" pos:end="5747:22">gen_jmp_im</name><argument_list pos:start="5747:23" pos:end="5747:45">(<argument pos:start="5747:24" pos:end="5747:44"><expr pos:start="5747:24" pos:end="5747:44"><name pos:start="5747:24" pos:end="5747:31">pc_start</name> <operator pos:start="5747:33" pos:end="5747:33">-</operator> <name pos:start="5747:35" pos:end="5747:44"><name pos:start="5747:35" pos:end="5747:35">s</name><operator pos:start="5747:36" pos:end="5747:37">-&gt;</operator><name pos:start="5747:38" pos:end="5747:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5749:13" pos:end="5749:60"><expr pos:start="5749:13" pos:end="5749:59"><call pos:start="5749:13" pos:end="5749:59"><name pos:start="5749:13" pos:end="5749:26">gen_helper_hlt</name><argument_list pos:start="5749:27" pos:end="5749:59">(<argument pos:start="5749:28" pos:end="5749:58"><expr pos:start="5749:28" pos:end="5749:58"><call pos:start="5749:28" pos:end="5749:58"><name pos:start="5749:28" pos:end="5749:40">tcg_const_i32</name><argument_list pos:start="5749:41" pos:end="5749:58">(<argument pos:start="5749:42" pos:end="5749:57"><expr pos:start="5749:42" pos:end="5749:57"><name pos:start="5749:42" pos:end="5749:46"><name pos:start="5749:42" pos:end="5749:42">s</name><operator pos:start="5749:43" pos:end="5749:44">-&gt;</operator><name pos:start="5749:45" pos:end="5749:46">pc</name></name> <operator pos:start="5749:48" pos:end="5749:48">-</operator> <name pos:start="5749:50" pos:end="5749:57">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5751:13" pos:end="5751:26"><expr pos:start="5751:13" pos:end="5751:25"><name pos:start="5751:13" pos:end="5751:21"><name pos:start="5751:13" pos:end="5751:13">s</name><operator pos:start="5751:14" pos:end="5751:15">-&gt;</operator><name pos:start="5751:16" pos:end="5751:21">is_jmp</name></name> <operator pos:start="5751:23" pos:end="5751:23">=</operator> <literal type="number" pos:start="5751:25" pos:end="5751:25">3</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5755:9" pos:end="5755:14">break;</break>

    <case pos:start="5757:5" pos:end="5757:15">case <expr pos:start="5757:10" pos:end="5757:14"><literal type="number" pos:start="5757:10" pos:end="5757:14">0x100</literal></expr>:</case>

        <expr_stmt pos:start="5759:9" pos:end="5759:35"><expr pos:start="5759:9" pos:end="5759:34"><name pos:start="5759:9" pos:end="5759:13">modrm</name> <operator pos:start="5759:15" pos:end="5759:15">=</operator> <call pos:start="5759:17" pos:end="5759:34"><name pos:start="5759:17" pos:end="5759:25">ldub_code</name><argument_list pos:start="5759:26" pos:end="5759:34">(<argument pos:start="5759:27" pos:end="5759:33"><expr pos:start="5759:27" pos:end="5759:33"><name pos:start="5759:27" pos:end="5759:31"><name pos:start="5759:27" pos:end="5759:27">s</name><operator pos:start="5759:28" pos:end="5759:29">-&gt;</operator><name pos:start="5759:30" pos:end="5759:31">pc</name></name><operator pos:start="5759:32" pos:end="5759:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5761:9" pos:end="5761:31"><expr pos:start="5761:9" pos:end="5761:30"><name pos:start="5761:9" pos:end="5761:11">mod</name> <operator pos:start="5761:13" pos:end="5761:13">=</operator> <operator pos:start="5761:15" pos:end="5761:15">(</operator><name pos:start="5761:16" pos:end="5761:20">modrm</name> <operator pos:start="5761:22" pos:end="5761:23">&gt;&gt;</operator> <literal type="number" pos:start="5761:25" pos:end="5761:25">6</literal><operator pos:start="5761:26" pos:end="5761:26">)</operator> <operator pos:start="5761:28" pos:end="5761:28">&amp;</operator> <literal type="number" pos:start="5761:30" pos:end="5761:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5763:9" pos:end="5763:30"><expr pos:start="5763:9" pos:end="5763:29"><name pos:start="5763:9" pos:end="5763:10">op</name> <operator pos:start="5763:12" pos:end="5763:12">=</operator> <operator pos:start="5763:14" pos:end="5763:14">(</operator><name pos:start="5763:15" pos:end="5763:19">modrm</name> <operator pos:start="5763:21" pos:end="5763:22">&gt;&gt;</operator> <literal type="number" pos:start="5763:24" pos:end="5763:24">3</literal><operator pos:start="5763:25" pos:end="5763:25">)</operator> <operator pos:start="5763:27" pos:end="5763:27">&amp;</operator> <literal type="number" pos:start="5763:29" pos:end="5763:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="5765:9" pos:end="5889:9">switch<condition pos:start="5765:15" pos:end="5765:18">(<expr pos:start="5765:16" pos:end="5765:17"><name pos:start="5765:16" pos:end="5765:17">op</name></expr>)</condition> <block pos:start="5765:20" pos:end="5889:9">{<block_content pos:start="5767:9" pos:end="5887:28">

        <case pos:start="5767:9" pos:end="5767:15">case <expr pos:start="5767:14" pos:end="5767:14"><literal type="number" pos:start="5767:14" pos:end="5767:14">0</literal></expr>:</case> <comment type="block" pos:start="5767:17" pos:end="5767:26">/* sldt */</comment>

            <if_stmt pos:start="5769:13" pos:end="5771:32"><if pos:start="5769:13" pos:end="5771:32">if <condition pos:start="5769:16" pos:end="5769:34">(<expr pos:start="5769:17" pos:end="5769:33"><operator pos:start="5769:17" pos:end="5769:17">!</operator><name pos:start="5769:18" pos:end="5769:22"><name pos:start="5769:18" pos:end="5769:18">s</name><operator pos:start="5769:19" pos:end="5769:20">-&gt;</operator><name pos:start="5769:21" pos:end="5769:22">pe</name></name> <operator pos:start="5769:24" pos:end="5769:25">||</operator> <name pos:start="5769:27" pos:end="5769:33"><name pos:start="5769:27" pos:end="5769:27">s</name><operator pos:start="5769:28" pos:end="5769:29">-&gt;</operator><name pos:start="5769:30" pos:end="5769:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5771:17" pos:end="5771:32"><block_content pos:start="5771:17" pos:end="5771:32">

                <goto pos:start="5771:17" pos:end="5771:32">goto <name pos:start="5771:22" pos:end="5771:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5773:13" pos:end="5773:69"><expr pos:start="5773:13" pos:end="5773:68"><call pos:start="5773:13" pos:end="5773:68"><name pos:start="5773:13" pos:end="5773:35">gen_svm_check_intercept</name><argument_list pos:start="5773:36" pos:end="5773:68">(<argument pos:start="5773:37" pos:end="5773:37"><expr pos:start="5773:37" pos:end="5773:37"><name pos:start="5773:37" pos:end="5773:37">s</name></expr></argument>, <argument pos:start="5773:40" pos:end="5773:47"><expr pos:start="5773:40" pos:end="5773:47"><name pos:start="5773:40" pos:end="5773:47">pc_start</name></expr></argument>, <argument pos:start="5773:50" pos:end="5773:67"><expr pos:start="5773:50" pos:end="5773:67"><name pos:start="5773:50" pos:end="5773:67">SVM_EXIT_LDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5775:13" pos:end="5775:84"><expr pos:start="5775:13" pos:end="5775:83"><call pos:start="5775:13" pos:end="5775:83"><name pos:start="5775:13" pos:end="5775:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5775:29" pos:end="5775:83">(<argument pos:start="5775:30" pos:end="5775:37"><expr pos:start="5775:30" pos:end="5775:37"><name pos:start="5775:30" pos:end="5775:37"><name pos:start="5775:30" pos:end="5775:34">cpu_T</name><index pos:start="5775:35" pos:end="5775:37">[<expr pos:start="5775:36" pos:end="5775:36"><literal type="number" pos:start="5775:36" pos:end="5775:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5775:40" pos:end="5775:46"><expr pos:start="5775:40" pos:end="5775:46"><name pos:start="5775:40" pos:end="5775:46">cpu_env</name></expr></argument>, <argument pos:start="5775:49" pos:end="5775:82"><expr pos:start="5775:49" pos:end="5775:82"><call pos:start="5775:49" pos:end="5775:82"><name pos:start="5775:49" pos:end="5775:56">offsetof</name><argument_list pos:start="5775:57" pos:end="5775:82">(<argument pos:start="5775:58" pos:end="5775:68"><expr pos:start="5775:58" pos:end="5775:68"><name pos:start="5775:58" pos:end="5775:68">CPUX86State</name></expr></argument>,<argument pos:start="5775:70" pos:end="5775:81"><expr pos:start="5775:70" pos:end="5775:81"><name pos:start="5775:70" pos:end="5775:81"><name pos:start="5775:70" pos:end="5775:72">ldt</name><operator pos:start="5775:73" pos:end="5775:73">.</operator><name pos:start="5775:74" pos:end="5775:81">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5777:13" pos:end="5777:25"><expr pos:start="5777:13" pos:end="5777:24"><name pos:start="5777:13" pos:end="5777:14">ot</name> <operator pos:start="5777:16" pos:end="5777:16">=</operator> <name pos:start="5777:18" pos:end="5777:24">OT_WORD</name></expr>;</expr_stmt>

            <if_stmt pos:start="5779:13" pos:end="5781:31"><if pos:start="5779:13" pos:end="5781:31">if <condition pos:start="5779:16" pos:end="5779:25">(<expr pos:start="5779:17" pos:end="5779:24"><name pos:start="5779:17" pos:end="5779:19">mod</name> <operator pos:start="5779:21" pos:end="5779:22">==</operator> <literal type="number" pos:start="5779:24" pos:end="5779:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5781:17" pos:end="5781:31"><block_content pos:start="5781:17" pos:end="5781:31">

                <expr_stmt pos:start="5781:17" pos:end="5781:31"><expr pos:start="5781:17" pos:end="5781:30"><name pos:start="5781:17" pos:end="5781:18">ot</name> <operator pos:start="5781:20" pos:end="5781:21">+=</operator> <name pos:start="5781:23" pos:end="5781:30"><name pos:start="5781:23" pos:end="5781:23">s</name><operator pos:start="5781:24" pos:end="5781:25">-&gt;</operator><name pos:start="5781:26" pos:end="5781:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5783:13" pos:end="5783:53"><expr pos:start="5783:13" pos:end="5783:52"><call pos:start="5783:13" pos:end="5783:52"><name pos:start="5783:13" pos:end="5783:26">gen_ldst_modrm</name><argument_list pos:start="5783:27" pos:end="5783:52">(<argument pos:start="5783:28" pos:end="5783:28"><expr pos:start="5783:28" pos:end="5783:28"><name pos:start="5783:28" pos:end="5783:28">s</name></expr></argument>, <argument pos:start="5783:31" pos:end="5783:35"><expr pos:start="5783:31" pos:end="5783:35"><name pos:start="5783:31" pos:end="5783:35">modrm</name></expr></argument>, <argument pos:start="5783:38" pos:end="5783:39"><expr pos:start="5783:38" pos:end="5783:39"><name pos:start="5783:38" pos:end="5783:39">ot</name></expr></argument>, <argument pos:start="5783:42" pos:end="5783:48"><expr pos:start="5783:42" pos:end="5783:48"><name pos:start="5783:42" pos:end="5783:48">OR_TMP0</name></expr></argument>, <argument pos:start="5783:51" pos:end="5783:51"><expr pos:start="5783:51" pos:end="5783:51"><literal type="number" pos:start="5783:51" pos:end="5783:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5785:13" pos:end="5785:18">break;</break>

        <case pos:start="5787:9" pos:end="5787:15">case <expr pos:start="5787:14" pos:end="5787:14"><literal type="number" pos:start="5787:14" pos:end="5787:14">2</literal></expr>:</case> <comment type="block" pos:start="5787:17" pos:end="5787:26">/* lldt */</comment>

            <if_stmt pos:start="5789:13" pos:end="5791:32"><if pos:start="5789:13" pos:end="5791:32">if <condition pos:start="5789:16" pos:end="5789:34">(<expr pos:start="5789:17" pos:end="5789:33"><operator pos:start="5789:17" pos:end="5789:17">!</operator><name pos:start="5789:18" pos:end="5789:22"><name pos:start="5789:18" pos:end="5789:18">s</name><operator pos:start="5789:19" pos:end="5789:20">-&gt;</operator><name pos:start="5789:21" pos:end="5789:22">pe</name></name> <operator pos:start="5789:24" pos:end="5789:25">||</operator> <name pos:start="5789:27" pos:end="5789:33"><name pos:start="5789:27" pos:end="5789:27">s</name><operator pos:start="5789:28" pos:end="5789:29">-&gt;</operator><name pos:start="5789:30" pos:end="5789:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5791:17" pos:end="5791:32"><block_content pos:start="5791:17" pos:end="5791:32">

                <goto pos:start="5791:17" pos:end="5791:32">goto <name pos:start="5791:22" pos:end="5791:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="5793:13" pos:end="5809:13"><if pos:start="5793:13" pos:end="5797:13">if <condition pos:start="5793:16" pos:end="5793:28">(<expr pos:start="5793:17" pos:end="5793:27"><name pos:start="5793:17" pos:end="5793:22"><name pos:start="5793:17" pos:end="5793:17">s</name><operator pos:start="5793:18" pos:end="5793:19">-&gt;</operator><name pos:start="5793:20" pos:end="5793:22">cpl</name></name> <operator pos:start="5793:24" pos:end="5793:25">!=</operator> <literal type="number" pos:start="5793:27" pos:end="5793:27">0</literal></expr>)</condition> <block pos:start="5793:30" pos:end="5797:13">{<block_content pos:start="5795:17" pos:end="5795:68">

                <expr_stmt pos:start="5795:17" pos:end="5795:68"><expr pos:start="5795:17" pos:end="5795:67"><call pos:start="5795:17" pos:end="5795:67"><name pos:start="5795:17" pos:end="5795:29">gen_exception</name><argument_list pos:start="5795:30" pos:end="5795:67">(<argument pos:start="5795:31" pos:end="5795:31"><expr pos:start="5795:31" pos:end="5795:31"><name pos:start="5795:31" pos:end="5795:31">s</name></expr></argument>, <argument pos:start="5795:34" pos:end="5795:43"><expr pos:start="5795:34" pos:end="5795:43"><name pos:start="5795:34" pos:end="5795:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5795:46" pos:end="5795:66"><expr pos:start="5795:46" pos:end="5795:66"><name pos:start="5795:46" pos:end="5795:53">pc_start</name> <operator pos:start="5795:55" pos:end="5795:55">-</operator> <name pos:start="5795:57" pos:end="5795:66"><name pos:start="5795:57" pos:end="5795:57">s</name><operator pos:start="5795:58" pos:end="5795:59">-&gt;</operator><name pos:start="5795:60" pos:end="5795:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5797:15" pos:end="5809:13">else <block pos:start="5797:20" pos:end="5809:13">{<block_content pos:start="5799:17" pos:end="5807:46">

                <expr_stmt pos:start="5799:17" pos:end="5799:74"><expr pos:start="5799:17" pos:end="5799:73"><call pos:start="5799:17" pos:end="5799:73"><name pos:start="5799:17" pos:end="5799:39">gen_svm_check_intercept</name><argument_list pos:start="5799:40" pos:end="5799:73">(<argument pos:start="5799:41" pos:end="5799:41"><expr pos:start="5799:41" pos:end="5799:41"><name pos:start="5799:41" pos:end="5799:41">s</name></expr></argument>, <argument pos:start="5799:44" pos:end="5799:51"><expr pos:start="5799:44" pos:end="5799:51"><name pos:start="5799:44" pos:end="5799:51">pc_start</name></expr></argument>, <argument pos:start="5799:54" pos:end="5799:72"><expr pos:start="5799:54" pos:end="5799:72"><name pos:start="5799:54" pos:end="5799:72">SVM_EXIT_LDTR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5801:17" pos:end="5801:62"><expr pos:start="5801:17" pos:end="5801:61"><call pos:start="5801:17" pos:end="5801:61"><name pos:start="5801:17" pos:end="5801:30">gen_ldst_modrm</name><argument_list pos:start="5801:31" pos:end="5801:61">(<argument pos:start="5801:32" pos:end="5801:32"><expr pos:start="5801:32" pos:end="5801:32"><name pos:start="5801:32" pos:end="5801:32">s</name></expr></argument>, <argument pos:start="5801:35" pos:end="5801:39"><expr pos:start="5801:35" pos:end="5801:39"><name pos:start="5801:35" pos:end="5801:39">modrm</name></expr></argument>, <argument pos:start="5801:42" pos:end="5801:48"><expr pos:start="5801:42" pos:end="5801:48"><name pos:start="5801:42" pos:end="5801:48">OT_WORD</name></expr></argument>, <argument pos:start="5801:51" pos:end="5801:57"><expr pos:start="5801:51" pos:end="5801:57"><name pos:start="5801:51" pos:end="5801:57">OR_TMP0</name></expr></argument>, <argument pos:start="5801:60" pos:end="5801:60"><expr pos:start="5801:60" pos:end="5801:60"><literal type="number" pos:start="5801:60" pos:end="5801:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5803:17" pos:end="5803:50"><expr pos:start="5803:17" pos:end="5803:49"><call pos:start="5803:17" pos:end="5803:49"><name pos:start="5803:17" pos:end="5803:26">gen_jmp_im</name><argument_list pos:start="5803:27" pos:end="5803:49">(<argument pos:start="5803:28" pos:end="5803:48"><expr pos:start="5803:28" pos:end="5803:48"><name pos:start="5803:28" pos:end="5803:35">pc_start</name> <operator pos:start="5803:37" pos:end="5803:37">-</operator> <name pos:start="5803:39" pos:end="5803:48"><name pos:start="5803:39" pos:end="5803:39">s</name><operator pos:start="5803:40" pos:end="5803:41">-&gt;</operator><name pos:start="5803:42" pos:end="5803:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5805:17" pos:end="5805:61"><expr pos:start="5805:17" pos:end="5805:60"><call pos:start="5805:17" pos:end="5805:60"><name pos:start="5805:17" pos:end="5805:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5805:37" pos:end="5805:60">(<argument pos:start="5805:38" pos:end="5805:49"><expr pos:start="5805:38" pos:end="5805:49"><name pos:start="5805:38" pos:end="5805:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5805:52" pos:end="5805:59"><expr pos:start="5805:52" pos:end="5805:59"><name pos:start="5805:52" pos:end="5805:59"><name pos:start="5805:52" pos:end="5805:56">cpu_T</name><index pos:start="5805:57" pos:end="5805:59">[<expr pos:start="5805:58" pos:end="5805:58"><literal type="number" pos:start="5805:58" pos:end="5805:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5807:17" pos:end="5807:46"><expr pos:start="5807:17" pos:end="5807:45"><call pos:start="5807:17" pos:end="5807:45"><name pos:start="5807:17" pos:end="5807:31">gen_helper_lldt</name><argument_list pos:start="5807:32" pos:end="5807:45">(<argument pos:start="5807:33" pos:end="5807:44"><expr pos:start="5807:33" pos:end="5807:44"><name pos:start="5807:33" pos:end="5807:44">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="5811:13" pos:end="5811:18">break;</break>

        <case pos:start="5813:9" pos:end="5813:15">case <expr pos:start="5813:14" pos:end="5813:14"><literal type="number" pos:start="5813:14" pos:end="5813:14">1</literal></expr>:</case> <comment type="block" pos:start="5813:17" pos:end="5813:25">/* str */</comment>

            <if_stmt pos:start="5815:13" pos:end="5817:32"><if pos:start="5815:13" pos:end="5817:32">if <condition pos:start="5815:16" pos:end="5815:34">(<expr pos:start="5815:17" pos:end="5815:33"><operator pos:start="5815:17" pos:end="5815:17">!</operator><name pos:start="5815:18" pos:end="5815:22"><name pos:start="5815:18" pos:end="5815:18">s</name><operator pos:start="5815:19" pos:end="5815:20">-&gt;</operator><name pos:start="5815:21" pos:end="5815:22">pe</name></name> <operator pos:start="5815:24" pos:end="5815:25">||</operator> <name pos:start="5815:27" pos:end="5815:33"><name pos:start="5815:27" pos:end="5815:27">s</name><operator pos:start="5815:28" pos:end="5815:29">-&gt;</operator><name pos:start="5815:30" pos:end="5815:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5817:17" pos:end="5817:32"><block_content pos:start="5817:17" pos:end="5817:32">

                <goto pos:start="5817:17" pos:end="5817:32">goto <name pos:start="5817:22" pos:end="5817:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5819:13" pos:end="5819:67"><expr pos:start="5819:13" pos:end="5819:66"><call pos:start="5819:13" pos:end="5819:66"><name pos:start="5819:13" pos:end="5819:35">gen_svm_check_intercept</name><argument_list pos:start="5819:36" pos:end="5819:66">(<argument pos:start="5819:37" pos:end="5819:37"><expr pos:start="5819:37" pos:end="5819:37"><name pos:start="5819:37" pos:end="5819:37">s</name></expr></argument>, <argument pos:start="5819:40" pos:end="5819:47"><expr pos:start="5819:40" pos:end="5819:47"><name pos:start="5819:40" pos:end="5819:47">pc_start</name></expr></argument>, <argument pos:start="5819:50" pos:end="5819:65"><expr pos:start="5819:50" pos:end="5819:65"><name pos:start="5819:50" pos:end="5819:65">SVM_EXIT_TR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5821:13" pos:end="5821:83"><expr pos:start="5821:13" pos:end="5821:82"><call pos:start="5821:13" pos:end="5821:82"><name pos:start="5821:13" pos:end="5821:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5821:29" pos:end="5821:82">(<argument pos:start="5821:30" pos:end="5821:37"><expr pos:start="5821:30" pos:end="5821:37"><name pos:start="5821:30" pos:end="5821:37"><name pos:start="5821:30" pos:end="5821:34">cpu_T</name><index pos:start="5821:35" pos:end="5821:37">[<expr pos:start="5821:36" pos:end="5821:36"><literal type="number" pos:start="5821:36" pos:end="5821:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5821:40" pos:end="5821:46"><expr pos:start="5821:40" pos:end="5821:46"><name pos:start="5821:40" pos:end="5821:46">cpu_env</name></expr></argument>, <argument pos:start="5821:49" pos:end="5821:81"><expr pos:start="5821:49" pos:end="5821:81"><call pos:start="5821:49" pos:end="5821:81"><name pos:start="5821:49" pos:end="5821:56">offsetof</name><argument_list pos:start="5821:57" pos:end="5821:81">(<argument pos:start="5821:58" pos:end="5821:68"><expr pos:start="5821:58" pos:end="5821:68"><name pos:start="5821:58" pos:end="5821:68">CPUX86State</name></expr></argument>,<argument pos:start="5821:70" pos:end="5821:80"><expr pos:start="5821:70" pos:end="5821:80"><name pos:start="5821:70" pos:end="5821:80"><name pos:start="5821:70" pos:end="5821:71">tr</name><operator pos:start="5821:72" pos:end="5821:72">.</operator><name pos:start="5821:73" pos:end="5821:80">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5823:13" pos:end="5823:25"><expr pos:start="5823:13" pos:end="5823:24"><name pos:start="5823:13" pos:end="5823:14">ot</name> <operator pos:start="5823:16" pos:end="5823:16">=</operator> <name pos:start="5823:18" pos:end="5823:24">OT_WORD</name></expr>;</expr_stmt>

            <if_stmt pos:start="5825:13" pos:end="5827:31"><if pos:start="5825:13" pos:end="5827:31">if <condition pos:start="5825:16" pos:end="5825:25">(<expr pos:start="5825:17" pos:end="5825:24"><name pos:start="5825:17" pos:end="5825:19">mod</name> <operator pos:start="5825:21" pos:end="5825:22">==</operator> <literal type="number" pos:start="5825:24" pos:end="5825:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5827:17" pos:end="5827:31"><block_content pos:start="5827:17" pos:end="5827:31">

                <expr_stmt pos:start="5827:17" pos:end="5827:31"><expr pos:start="5827:17" pos:end="5827:30"><name pos:start="5827:17" pos:end="5827:18">ot</name> <operator pos:start="5827:20" pos:end="5827:21">+=</operator> <name pos:start="5827:23" pos:end="5827:30"><name pos:start="5827:23" pos:end="5827:23">s</name><operator pos:start="5827:24" pos:end="5827:25">-&gt;</operator><name pos:start="5827:26" pos:end="5827:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5829:13" pos:end="5829:53"><expr pos:start="5829:13" pos:end="5829:52"><call pos:start="5829:13" pos:end="5829:52"><name pos:start="5829:13" pos:end="5829:26">gen_ldst_modrm</name><argument_list pos:start="5829:27" pos:end="5829:52">(<argument pos:start="5829:28" pos:end="5829:28"><expr pos:start="5829:28" pos:end="5829:28"><name pos:start="5829:28" pos:end="5829:28">s</name></expr></argument>, <argument pos:start="5829:31" pos:end="5829:35"><expr pos:start="5829:31" pos:end="5829:35"><name pos:start="5829:31" pos:end="5829:35">modrm</name></expr></argument>, <argument pos:start="5829:38" pos:end="5829:39"><expr pos:start="5829:38" pos:end="5829:39"><name pos:start="5829:38" pos:end="5829:39">ot</name></expr></argument>, <argument pos:start="5829:42" pos:end="5829:48"><expr pos:start="5829:42" pos:end="5829:48"><name pos:start="5829:42" pos:end="5829:48">OR_TMP0</name></expr></argument>, <argument pos:start="5829:51" pos:end="5829:51"><expr pos:start="5829:51" pos:end="5829:51"><literal type="number" pos:start="5829:51" pos:end="5829:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5831:13" pos:end="5831:18">break;</break>

        <case pos:start="5833:9" pos:end="5833:15">case <expr pos:start="5833:14" pos:end="5833:14"><literal type="number" pos:start="5833:14" pos:end="5833:14">3</literal></expr>:</case> <comment type="block" pos:start="5833:17" pos:end="5833:25">/* ltr */</comment>

            <if_stmt pos:start="5835:13" pos:end="5837:32"><if pos:start="5835:13" pos:end="5837:32">if <condition pos:start="5835:16" pos:end="5835:34">(<expr pos:start="5835:17" pos:end="5835:33"><operator pos:start="5835:17" pos:end="5835:17">!</operator><name pos:start="5835:18" pos:end="5835:22"><name pos:start="5835:18" pos:end="5835:18">s</name><operator pos:start="5835:19" pos:end="5835:20">-&gt;</operator><name pos:start="5835:21" pos:end="5835:22">pe</name></name> <operator pos:start="5835:24" pos:end="5835:25">||</operator> <name pos:start="5835:27" pos:end="5835:33"><name pos:start="5835:27" pos:end="5835:27">s</name><operator pos:start="5835:28" pos:end="5835:29">-&gt;</operator><name pos:start="5835:30" pos:end="5835:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5837:17" pos:end="5837:32"><block_content pos:start="5837:17" pos:end="5837:32">

                <goto pos:start="5837:17" pos:end="5837:32">goto <name pos:start="5837:22" pos:end="5837:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="5839:13" pos:end="5855:13"><if pos:start="5839:13" pos:end="5843:13">if <condition pos:start="5839:16" pos:end="5839:28">(<expr pos:start="5839:17" pos:end="5839:27"><name pos:start="5839:17" pos:end="5839:22"><name pos:start="5839:17" pos:end="5839:17">s</name><operator pos:start="5839:18" pos:end="5839:19">-&gt;</operator><name pos:start="5839:20" pos:end="5839:22">cpl</name></name> <operator pos:start="5839:24" pos:end="5839:25">!=</operator> <literal type="number" pos:start="5839:27" pos:end="5839:27">0</literal></expr>)</condition> <block pos:start="5839:30" pos:end="5843:13">{<block_content pos:start="5841:17" pos:end="5841:68">

                <expr_stmt pos:start="5841:17" pos:end="5841:68"><expr pos:start="5841:17" pos:end="5841:67"><call pos:start="5841:17" pos:end="5841:67"><name pos:start="5841:17" pos:end="5841:29">gen_exception</name><argument_list pos:start="5841:30" pos:end="5841:67">(<argument pos:start="5841:31" pos:end="5841:31"><expr pos:start="5841:31" pos:end="5841:31"><name pos:start="5841:31" pos:end="5841:31">s</name></expr></argument>, <argument pos:start="5841:34" pos:end="5841:43"><expr pos:start="5841:34" pos:end="5841:43"><name pos:start="5841:34" pos:end="5841:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5841:46" pos:end="5841:66"><expr pos:start="5841:46" pos:end="5841:66"><name pos:start="5841:46" pos:end="5841:53">pc_start</name> <operator pos:start="5841:55" pos:end="5841:55">-</operator> <name pos:start="5841:57" pos:end="5841:66"><name pos:start="5841:57" pos:end="5841:57">s</name><operator pos:start="5841:58" pos:end="5841:59">-&gt;</operator><name pos:start="5841:60" pos:end="5841:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5843:15" pos:end="5855:13">else <block pos:start="5843:20" pos:end="5855:13">{<block_content pos:start="5845:17" pos:end="5853:45">

                <expr_stmt pos:start="5845:17" pos:end="5845:72"><expr pos:start="5845:17" pos:end="5845:71"><call pos:start="5845:17" pos:end="5845:71"><name pos:start="5845:17" pos:end="5845:39">gen_svm_check_intercept</name><argument_list pos:start="5845:40" pos:end="5845:71">(<argument pos:start="5845:41" pos:end="5845:41"><expr pos:start="5845:41" pos:end="5845:41"><name pos:start="5845:41" pos:end="5845:41">s</name></expr></argument>, <argument pos:start="5845:44" pos:end="5845:51"><expr pos:start="5845:44" pos:end="5845:51"><name pos:start="5845:44" pos:end="5845:51">pc_start</name></expr></argument>, <argument pos:start="5845:54" pos:end="5845:70"><expr pos:start="5845:54" pos:end="5845:70"><name pos:start="5845:54" pos:end="5845:70">SVM_EXIT_TR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5847:17" pos:end="5847:62"><expr pos:start="5847:17" pos:end="5847:61"><call pos:start="5847:17" pos:end="5847:61"><name pos:start="5847:17" pos:end="5847:30">gen_ldst_modrm</name><argument_list pos:start="5847:31" pos:end="5847:61">(<argument pos:start="5847:32" pos:end="5847:32"><expr pos:start="5847:32" pos:end="5847:32"><name pos:start="5847:32" pos:end="5847:32">s</name></expr></argument>, <argument pos:start="5847:35" pos:end="5847:39"><expr pos:start="5847:35" pos:end="5847:39"><name pos:start="5847:35" pos:end="5847:39">modrm</name></expr></argument>, <argument pos:start="5847:42" pos:end="5847:48"><expr pos:start="5847:42" pos:end="5847:48"><name pos:start="5847:42" pos:end="5847:48">OT_WORD</name></expr></argument>, <argument pos:start="5847:51" pos:end="5847:57"><expr pos:start="5847:51" pos:end="5847:57"><name pos:start="5847:51" pos:end="5847:57">OR_TMP0</name></expr></argument>, <argument pos:start="5847:60" pos:end="5847:60"><expr pos:start="5847:60" pos:end="5847:60"><literal type="number" pos:start="5847:60" pos:end="5847:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5849:17" pos:end="5849:50"><expr pos:start="5849:17" pos:end="5849:49"><call pos:start="5849:17" pos:end="5849:49"><name pos:start="5849:17" pos:end="5849:26">gen_jmp_im</name><argument_list pos:start="5849:27" pos:end="5849:49">(<argument pos:start="5849:28" pos:end="5849:48"><expr pos:start="5849:28" pos:end="5849:48"><name pos:start="5849:28" pos:end="5849:35">pc_start</name> <operator pos:start="5849:37" pos:end="5849:37">-</operator> <name pos:start="5849:39" pos:end="5849:48"><name pos:start="5849:39" pos:end="5849:39">s</name><operator pos:start="5849:40" pos:end="5849:41">-&gt;</operator><name pos:start="5849:42" pos:end="5849:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5851:17" pos:end="5851:61"><expr pos:start="5851:17" pos:end="5851:60"><call pos:start="5851:17" pos:end="5851:60"><name pos:start="5851:17" pos:end="5851:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5851:37" pos:end="5851:60">(<argument pos:start="5851:38" pos:end="5851:49"><expr pos:start="5851:38" pos:end="5851:49"><name pos:start="5851:38" pos:end="5851:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5851:52" pos:end="5851:59"><expr pos:start="5851:52" pos:end="5851:59"><name pos:start="5851:52" pos:end="5851:59"><name pos:start="5851:52" pos:end="5851:56">cpu_T</name><index pos:start="5851:57" pos:end="5851:59">[<expr pos:start="5851:58" pos:end="5851:58"><literal type="number" pos:start="5851:58" pos:end="5851:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5853:17" pos:end="5853:45"><expr pos:start="5853:17" pos:end="5853:44"><call pos:start="5853:17" pos:end="5853:44"><name pos:start="5853:17" pos:end="5853:30">gen_helper_ltr</name><argument_list pos:start="5853:31" pos:end="5853:44">(<argument pos:start="5853:32" pos:end="5853:43"><expr pos:start="5853:32" pos:end="5853:43"><name pos:start="5853:32" pos:end="5853:43">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="5857:13" pos:end="5857:18">break;</break>

        <case pos:start="5859:9" pos:end="5859:15">case <expr pos:start="5859:14" pos:end="5859:14"><literal type="number" pos:start="5859:14" pos:end="5859:14">4</literal></expr>:</case> <comment type="block" pos:start="5859:17" pos:end="5859:26">/* verr */</comment>

        <case pos:start="5861:9" pos:end="5861:15">case <expr pos:start="5861:14" pos:end="5861:14"><literal type="number" pos:start="5861:14" pos:end="5861:14">5</literal></expr>:</case> <comment type="block" pos:start="5861:17" pos:end="5861:26">/* verw */</comment>

            <if_stmt pos:start="5863:13" pos:end="5865:32"><if pos:start="5863:13" pos:end="5865:32">if <condition pos:start="5863:16" pos:end="5863:34">(<expr pos:start="5863:17" pos:end="5863:33"><operator pos:start="5863:17" pos:end="5863:17">!</operator><name pos:start="5863:18" pos:end="5863:22"><name pos:start="5863:18" pos:end="5863:18">s</name><operator pos:start="5863:19" pos:end="5863:20">-&gt;</operator><name pos:start="5863:21" pos:end="5863:22">pe</name></name> <operator pos:start="5863:24" pos:end="5863:25">||</operator> <name pos:start="5863:27" pos:end="5863:33"><name pos:start="5863:27" pos:end="5863:27">s</name><operator pos:start="5863:28" pos:end="5863:29">-&gt;</operator><name pos:start="5863:30" pos:end="5863:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5865:17" pos:end="5865:32"><block_content pos:start="5865:17" pos:end="5865:32">

                <goto pos:start="5865:17" pos:end="5865:32">goto <name pos:start="5865:22" pos:end="5865:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5867:13" pos:end="5867:58"><expr pos:start="5867:13" pos:end="5867:57"><call pos:start="5867:13" pos:end="5867:57"><name pos:start="5867:13" pos:end="5867:26">gen_ldst_modrm</name><argument_list pos:start="5867:27" pos:end="5867:57">(<argument pos:start="5867:28" pos:end="5867:28"><expr pos:start="5867:28" pos:end="5867:28"><name pos:start="5867:28" pos:end="5867:28">s</name></expr></argument>, <argument pos:start="5867:31" pos:end="5867:35"><expr pos:start="5867:31" pos:end="5867:35"><name pos:start="5867:31" pos:end="5867:35">modrm</name></expr></argument>, <argument pos:start="5867:38" pos:end="5867:44"><expr pos:start="5867:38" pos:end="5867:44"><name pos:start="5867:38" pos:end="5867:44">OT_WORD</name></expr></argument>, <argument pos:start="5867:47" pos:end="5867:53"><expr pos:start="5867:47" pos:end="5867:53"><name pos:start="5867:47" pos:end="5867:53">OR_TMP0</name></expr></argument>, <argument pos:start="5867:56" pos:end="5867:56"><expr pos:start="5867:56" pos:end="5867:56"><literal type="number" pos:start="5867:56" pos:end="5867:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5869:13" pos:end="5871:43"><if pos:start="5869:13" pos:end="5871:43">if <condition pos:start="5869:16" pos:end="5869:42">(<expr pos:start="5869:17" pos:end="5869:41"><name pos:start="5869:17" pos:end="5869:24"><name pos:start="5869:17" pos:end="5869:17">s</name><operator pos:start="5869:18" pos:end="5869:19">-&gt;</operator><name pos:start="5869:20" pos:end="5869:24">cc_op</name></name> <operator pos:start="5869:26" pos:end="5869:27">!=</operator> <name pos:start="5869:29" pos:end="5869:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5871:17" pos:end="5871:43"><block_content pos:start="5871:17" pos:end="5871:43">

                <expr_stmt pos:start="5871:17" pos:end="5871:43"><expr pos:start="5871:17" pos:end="5871:42"><call pos:start="5871:17" pos:end="5871:42"><name pos:start="5871:17" pos:end="5871:32">gen_op_set_cc_op</name><argument_list pos:start="5871:33" pos:end="5871:42">(<argument pos:start="5871:34" pos:end="5871:41"><expr pos:start="5871:34" pos:end="5871:41"><name pos:start="5871:34" pos:end="5871:41"><name pos:start="5871:34" pos:end="5871:34">s</name><operator pos:start="5871:35" pos:end="5871:36">-&gt;</operator><name pos:start="5871:37" pos:end="5871:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="5873:13" pos:end="5879:42"><if pos:start="5873:13" pos:end="5875:42">if <condition pos:start="5873:16" pos:end="5873:24">(<expr pos:start="5873:17" pos:end="5873:23"><name pos:start="5873:17" pos:end="5873:18">op</name> <operator pos:start="5873:20" pos:end="5873:21">==</operator> <literal type="number" pos:start="5873:23" pos:end="5873:23">4</literal></expr>)</condition><block type="pseudo" pos:start="5875:17" pos:end="5875:42"><block_content pos:start="5875:17" pos:end="5875:42">

                <expr_stmt pos:start="5875:17" pos:end="5875:42"><expr pos:start="5875:17" pos:end="5875:41"><call pos:start="5875:17" pos:end="5875:41"><name pos:start="5875:17" pos:end="5875:31">gen_helper_verr</name><argument_list pos:start="5875:32" pos:end="5875:41">(<argument pos:start="5875:33" pos:end="5875:40"><expr pos:start="5875:33" pos:end="5875:40"><name pos:start="5875:33" pos:end="5875:40"><name pos:start="5875:33" pos:end="5875:37">cpu_T</name><index pos:start="5875:38" pos:end="5875:40">[<expr pos:start="5875:39" pos:end="5875:39"><literal type="number" pos:start="5875:39" pos:end="5875:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="5877:13" pos:end="5879:42">else<block type="pseudo" pos:start="5879:17" pos:end="5879:42"><block_content pos:start="5879:17" pos:end="5879:42">

                <expr_stmt pos:start="5879:17" pos:end="5879:42"><expr pos:start="5879:17" pos:end="5879:41"><call pos:start="5879:17" pos:end="5879:41"><name pos:start="5879:17" pos:end="5879:31">gen_helper_verw</name><argument_list pos:start="5879:32" pos:end="5879:41">(<argument pos:start="5879:33" pos:end="5879:40"><expr pos:start="5879:33" pos:end="5879:40"><name pos:start="5879:33" pos:end="5879:40"><name pos:start="5879:33" pos:end="5879:37">cpu_T</name><index pos:start="5879:38" pos:end="5879:40">[<expr pos:start="5879:39" pos:end="5879:39"><literal type="number" pos:start="5879:39" pos:end="5879:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="5881:13" pos:end="5881:36"><expr pos:start="5881:13" pos:end="5881:35"><name pos:start="5881:13" pos:end="5881:20"><name pos:start="5881:13" pos:end="5881:13">s</name><operator pos:start="5881:14" pos:end="5881:15">-&gt;</operator><name pos:start="5881:16" pos:end="5881:20">cc_op</name></name> <operator pos:start="5881:22" pos:end="5881:22">=</operator> <name pos:start="5881:24" pos:end="5881:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <break pos:start="5883:13" pos:end="5883:18">break;</break>

        <default pos:start="5885:9" pos:end="5885:16">default:</default>

            <goto pos:start="5887:13" pos:end="5887:28">goto <name pos:start="5887:18" pos:end="5887:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="5891:9" pos:end="5891:14">break;</break>

    <case pos:start="5893:5" pos:end="5893:15">case <expr pos:start="5893:10" pos:end="5893:14"><literal type="number" pos:start="5893:10" pos:end="5893:14">0x101</literal></expr>:</case>

        <expr_stmt pos:start="5895:9" pos:end="5895:35"><expr pos:start="5895:9" pos:end="5895:34"><name pos:start="5895:9" pos:end="5895:13">modrm</name> <operator pos:start="5895:15" pos:end="5895:15">=</operator> <call pos:start="5895:17" pos:end="5895:34"><name pos:start="5895:17" pos:end="5895:25">ldub_code</name><argument_list pos:start="5895:26" pos:end="5895:34">(<argument pos:start="5895:27" pos:end="5895:33"><expr pos:start="5895:27" pos:end="5895:33"><name pos:start="5895:27" pos:end="5895:31"><name pos:start="5895:27" pos:end="5895:27">s</name><operator pos:start="5895:28" pos:end="5895:29">-&gt;</operator><name pos:start="5895:30" pos:end="5895:31">pc</name></name><operator pos:start="5895:32" pos:end="5895:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5897:9" pos:end="5897:31"><expr pos:start="5897:9" pos:end="5897:30"><name pos:start="5897:9" pos:end="5897:11">mod</name> <operator pos:start="5897:13" pos:end="5897:13">=</operator> <operator pos:start="5897:15" pos:end="5897:15">(</operator><name pos:start="5897:16" pos:end="5897:20">modrm</name> <operator pos:start="5897:22" pos:end="5897:23">&gt;&gt;</operator> <literal type="number" pos:start="5897:25" pos:end="5897:25">6</literal><operator pos:start="5897:26" pos:end="5897:26">)</operator> <operator pos:start="5897:28" pos:end="5897:28">&amp;</operator> <literal type="number" pos:start="5897:30" pos:end="5897:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5899:9" pos:end="5899:30"><expr pos:start="5899:9" pos:end="5899:29"><name pos:start="5899:9" pos:end="5899:10">op</name> <operator pos:start="5899:12" pos:end="5899:12">=</operator> <operator pos:start="5899:14" pos:end="5899:14">(</operator><name pos:start="5899:15" pos:end="5899:19">modrm</name> <operator pos:start="5899:21" pos:end="5899:22">&gt;&gt;</operator> <literal type="number" pos:start="5899:24" pos:end="5899:24">3</literal><operator pos:start="5899:25" pos:end="5899:25">)</operator> <operator pos:start="5899:27" pos:end="5899:27">&amp;</operator> <literal type="number" pos:start="5899:29" pos:end="5899:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5901:9" pos:end="5901:23"><expr pos:start="5901:9" pos:end="5901:22"><name pos:start="5901:9" pos:end="5901:10">rm</name> <operator pos:start="5901:12" pos:end="5901:12">=</operator> <name pos:start="5901:14" pos:end="5901:18">modrm</name> <operator pos:start="5901:20" pos:end="5901:20">&amp;</operator> <literal type="number" pos:start="5901:22" pos:end="5901:22">7</literal></expr>;</expr_stmt>

        <switch pos:start="5903:9" pos:end="6337:9">switch<condition pos:start="5903:15" pos:end="5903:18">(<expr pos:start="5903:16" pos:end="5903:17"><name pos:start="5903:16" pos:end="5903:17">op</name></expr>)</condition> <block pos:start="5903:20" pos:end="6337:9">{<block_content pos:start="5905:9" pos:end="6335:28">

        <case pos:start="5905:9" pos:end="5905:15">case <expr pos:start="5905:14" pos:end="5905:14"><literal type="number" pos:start="5905:14" pos:end="5905:14">0</literal></expr>:</case> <comment type="block" pos:start="5905:17" pos:end="5905:26">/* sgdt */</comment>

            <if_stmt pos:start="5907:13" pos:end="5909:32"><if pos:start="5907:13" pos:end="5909:32">if <condition pos:start="5907:16" pos:end="5907:25">(<expr pos:start="5907:17" pos:end="5907:24"><name pos:start="5907:17" pos:end="5907:19">mod</name> <operator pos:start="5907:21" pos:end="5907:22">==</operator> <literal type="number" pos:start="5907:24" pos:end="5907:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5909:17" pos:end="5909:32"><block_content pos:start="5909:17" pos:end="5909:32">

                <goto pos:start="5909:17" pos:end="5909:32">goto <name pos:start="5909:22" pos:end="5909:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5911:13" pos:end="5911:69"><expr pos:start="5911:13" pos:end="5911:68"><call pos:start="5911:13" pos:end="5911:68"><name pos:start="5911:13" pos:end="5911:35">gen_svm_check_intercept</name><argument_list pos:start="5911:36" pos:end="5911:68">(<argument pos:start="5911:37" pos:end="5911:37"><expr pos:start="5911:37" pos:end="5911:37"><name pos:start="5911:37" pos:end="5911:37">s</name></expr></argument>, <argument pos:start="5911:40" pos:end="5911:47"><expr pos:start="5911:40" pos:end="5911:47"><name pos:start="5911:40" pos:end="5911:47">pc_start</name></expr></argument>, <argument pos:start="5911:50" pos:end="5911:67"><expr pos:start="5911:50" pos:end="5911:67"><name pos:start="5911:50" pos:end="5911:67">SVM_EXIT_GDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5913:13" pos:end="5913:61"><expr pos:start="5913:13" pos:end="5913:60"><call pos:start="5913:13" pos:end="5913:60"><name pos:start="5913:13" pos:end="5913:25">gen_lea_modrm</name><argument_list pos:start="5913:26" pos:end="5913:60">(<argument pos:start="5913:27" pos:end="5913:27"><expr pos:start="5913:27" pos:end="5913:27"><name pos:start="5913:27" pos:end="5913:27">s</name></expr></argument>, <argument pos:start="5913:30" pos:end="5913:34"><expr pos:start="5913:30" pos:end="5913:34"><name pos:start="5913:30" pos:end="5913:34">modrm</name></expr></argument>, <argument pos:start="5913:37" pos:end="5913:45"><expr pos:start="5913:37" pos:end="5913:45"><operator pos:start="5913:37" pos:end="5913:37">&amp;</operator><name pos:start="5913:38" pos:end="5913:45">reg_addr</name></expr></argument>, <argument pos:start="5913:48" pos:end="5913:59"><expr pos:start="5913:48" pos:end="5913:59"><operator pos:start="5913:48" pos:end="5913:48">&amp;</operator><name pos:start="5913:49" pos:end="5913:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5915:13" pos:end="5915:82"><expr pos:start="5915:13" pos:end="5915:81"><call pos:start="5915:13" pos:end="5915:81"><name pos:start="5915:13" pos:end="5915:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5915:29" pos:end="5915:81">(<argument pos:start="5915:30" pos:end="5915:37"><expr pos:start="5915:30" pos:end="5915:37"><name pos:start="5915:30" pos:end="5915:37"><name pos:start="5915:30" pos:end="5915:34">cpu_T</name><index pos:start="5915:35" pos:end="5915:37">[<expr pos:start="5915:36" pos:end="5915:36"><literal type="number" pos:start="5915:36" pos:end="5915:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5915:40" pos:end="5915:46"><expr pos:start="5915:40" pos:end="5915:46"><name pos:start="5915:40" pos:end="5915:46">cpu_env</name></expr></argument>, <argument pos:start="5915:49" pos:end="5915:80"><expr pos:start="5915:49" pos:end="5915:80"><call pos:start="5915:49" pos:end="5915:80"><name pos:start="5915:49" pos:end="5915:56">offsetof</name><argument_list pos:start="5915:57" pos:end="5915:80">(<argument pos:start="5915:58" pos:end="5915:68"><expr pos:start="5915:58" pos:end="5915:68"><name pos:start="5915:58" pos:end="5915:68">CPUX86State</name></expr></argument>, <argument pos:start="5915:71" pos:end="5915:79"><expr pos:start="5915:71" pos:end="5915:79"><name pos:start="5915:71" pos:end="5915:79"><name pos:start="5915:71" pos:end="5915:73">gdt</name><operator pos:start="5915:74" pos:end="5915:74">.</operator><name pos:start="5915:75" pos:end="5915:79">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5917:13" pos:end="5917:52"><expr pos:start="5917:13" pos:end="5917:51"><call pos:start="5917:13" pos:end="5917:51"><name pos:start="5917:13" pos:end="5917:27">gen_op_st_T0_A0</name><argument_list pos:start="5917:28" pos:end="5917:51">(<argument pos:start="5917:29" pos:end="5917:50"><expr pos:start="5917:29" pos:end="5917:50"><name pos:start="5917:29" pos:end="5917:35">OT_WORD</name> <operator pos:start="5917:37" pos:end="5917:37">+</operator> <name pos:start="5917:39" pos:end="5917:50"><name pos:start="5917:39" pos:end="5917:39">s</name><operator pos:start="5917:40" pos:end="5917:41">-&gt;</operator><name pos:start="5917:42" pos:end="5917:50">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5919:13" pos:end="5919:32"><expr pos:start="5919:13" pos:end="5919:31"><call pos:start="5919:13" pos:end="5919:31"><name pos:start="5919:13" pos:end="5919:25">gen_add_A0_im</name><argument_list pos:start="5919:26" pos:end="5919:31">(<argument pos:start="5919:27" pos:end="5919:27"><expr pos:start="5919:27" pos:end="5919:27"><name pos:start="5919:27" pos:end="5919:27">s</name></expr></argument>, <argument pos:start="5919:30" pos:end="5919:30"><expr pos:start="5919:30" pos:end="5919:30"><literal type="number" pos:start="5919:30" pos:end="5919:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5921:13" pos:end="5921:78"><expr pos:start="5921:13" pos:end="5921:77"><call pos:start="5921:13" pos:end="5921:77"><name pos:start="5921:13" pos:end="5921:25">tcg_gen_ld_tl</name><argument_list pos:start="5921:26" pos:end="5921:77">(<argument pos:start="5921:27" pos:end="5921:34"><expr pos:start="5921:27" pos:end="5921:34"><name pos:start="5921:27" pos:end="5921:34"><name pos:start="5921:27" pos:end="5921:31">cpu_T</name><index pos:start="5921:32" pos:end="5921:34">[<expr pos:start="5921:33" pos:end="5921:33"><literal type="number" pos:start="5921:33" pos:end="5921:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5921:37" pos:end="5921:43"><expr pos:start="5921:37" pos:end="5921:43"><name pos:start="5921:37" pos:end="5921:43">cpu_env</name></expr></argument>, <argument pos:start="5921:46" pos:end="5921:76"><expr pos:start="5921:46" pos:end="5921:76"><call pos:start="5921:46" pos:end="5921:76"><name pos:start="5921:46" pos:end="5921:53">offsetof</name><argument_list pos:start="5921:54" pos:end="5921:76">(<argument pos:start="5921:55" pos:end="5921:65"><expr pos:start="5921:55" pos:end="5921:65"><name pos:start="5921:55" pos:end="5921:65">CPUX86State</name></expr></argument>, <argument pos:start="5921:68" pos:end="5921:75"><expr pos:start="5921:68" pos:end="5921:75"><name pos:start="5921:68" pos:end="5921:75"><name pos:start="5921:68" pos:end="5921:70">gdt</name><operator pos:start="5921:71" pos:end="5921:71">.</operator><name pos:start="5921:72" pos:end="5921:75">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5923:13" pos:end="5925:44"><if pos:start="5923:13" pos:end="5925:44">if <condition pos:start="5923:16" pos:end="5923:26">(<expr pos:start="5923:17" pos:end="5923:25"><operator pos:start="5923:17" pos:end="5923:17">!</operator><name pos:start="5923:18" pos:end="5923:25"><name pos:start="5923:18" pos:end="5923:18">s</name><operator pos:start="5923:19" pos:end="5923:20">-&gt;</operator><name pos:start="5923:21" pos:end="5923:25">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="5925:17" pos:end="5925:44"><block_content pos:start="5925:17" pos:end="5925:44">

                <expr_stmt pos:start="5925:17" pos:end="5925:44"><expr pos:start="5925:17" pos:end="5925:43"><call pos:start="5925:17" pos:end="5925:43"><name pos:start="5925:17" pos:end="5925:33">gen_op_andl_T0_im</name><argument_list pos:start="5925:34" pos:end="5925:43">(<argument pos:start="5925:35" pos:end="5925:42"><expr pos:start="5925:35" pos:end="5925:42"><literal type="number" pos:start="5925:35" pos:end="5925:42">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5927:13" pos:end="5927:64"><expr pos:start="5927:13" pos:end="5927:63"><call pos:start="5927:13" pos:end="5927:63"><name pos:start="5927:13" pos:end="5927:27">gen_op_st_T0_A0</name><argument_list pos:start="5927:28" pos:end="5927:63">(<argument pos:start="5927:29" pos:end="5927:62"><expr pos:start="5927:29" pos:end="5927:62"><call pos:start="5927:29" pos:end="5927:37"><name pos:start="5927:29" pos:end="5927:34">CODE64</name><argument_list pos:start="5927:35" pos:end="5927:37">(<argument pos:start="5927:36" pos:end="5927:36"><expr pos:start="5927:36" pos:end="5927:36"><name pos:start="5927:36" pos:end="5927:36">s</name></expr></argument>)</argument_list></call> <operator pos:start="5927:39" pos:end="5927:39">+</operator> <name pos:start="5927:41" pos:end="5927:47">OT_LONG</name> <operator pos:start="5927:49" pos:end="5927:49">+</operator> <name pos:start="5927:51" pos:end="5927:62"><name pos:start="5927:51" pos:end="5927:51">s</name><operator pos:start="5927:52" pos:end="5927:53">-&gt;</operator><name pos:start="5927:54" pos:end="5927:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5929:13" pos:end="5929:18">break;</break>

        <case pos:start="5931:9" pos:end="5931:15">case <expr pos:start="5931:14" pos:end="5931:14"><literal type="number" pos:start="5931:14" pos:end="5931:14">1</literal></expr>:</case>

            <if_stmt pos:start="5933:13" pos:end="6027:13"><if pos:start="5933:13" pos:end="6007:13">if <condition pos:start="5933:16" pos:end="5933:25">(<expr pos:start="5933:17" pos:end="5933:24"><name pos:start="5933:17" pos:end="5933:19">mod</name> <operator pos:start="5933:21" pos:end="5933:22">==</operator> <literal type="number" pos:start="5933:24" pos:end="5933:24">3</literal></expr>)</condition> <block pos:start="5933:27" pos:end="6007:13">{<block_content pos:start="5935:17" pos:end="6005:17">

                <switch pos:start="5935:17" pos:end="6005:17">switch <condition pos:start="5935:24" pos:end="5935:27">(<expr pos:start="5935:25" pos:end="5935:26"><name pos:start="5935:25" pos:end="5935:26">rm</name></expr>)</condition> <block pos:start="5935:29" pos:end="6005:17">{<block_content pos:start="5937:17" pos:end="6003:36">

                <case pos:start="5937:17" pos:end="5937:23">case <expr pos:start="5937:22" pos:end="5937:22"><literal type="number" pos:start="5937:22" pos:end="5937:22">0</literal></expr>:</case> <comment type="block" pos:start="5937:25" pos:end="5937:37">/* monitor */</comment>

                    <if_stmt pos:start="5939:21" pos:end="5943:40"><if pos:start="5939:21" pos:end="5943:40">if <condition pos:start="5939:24" pos:end="5941:36">(<expr pos:start="5939:25" pos:end="5941:35"><operator pos:start="5939:25" pos:end="5939:25">!</operator><operator pos:start="5939:26" pos:end="5939:26">(</operator><name pos:start="5939:27" pos:end="5939:47"><name pos:start="5939:27" pos:end="5939:27">s</name><operator pos:start="5939:28" pos:end="5939:29">-&gt;</operator><name pos:start="5939:30" pos:end="5939:47">cpuid_ext_features</name></name> <operator pos:start="5939:49" pos:end="5939:49">&amp;</operator> <name pos:start="5939:51" pos:end="5939:67">CPUID_EXT_MONITOR</name><operator pos:start="5939:68" pos:end="5939:68">)</operator> <operator pos:start="5939:70" pos:end="5939:71">||</operator>

                        <name pos:start="5941:25" pos:end="5941:30"><name pos:start="5941:25" pos:end="5941:25">s</name><operator pos:start="5941:26" pos:end="5941:27">-&gt;</operator><name pos:start="5941:28" pos:end="5941:30">cpl</name></name> <operator pos:start="5941:32" pos:end="5941:33">!=</operator> <literal type="number" pos:start="5941:35" pos:end="5941:35">0</literal></expr>)</condition><block type="pseudo" pos:start="5943:25" pos:end="5943:40"><block_content pos:start="5943:25" pos:end="5943:40">

                        <goto pos:start="5943:25" pos:end="5943:40">goto <name pos:start="5943:30" pos:end="5943:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="5945:21" pos:end="5947:51"><if pos:start="5945:21" pos:end="5947:51">if <condition pos:start="5945:24" pos:end="5945:50">(<expr pos:start="5945:25" pos:end="5945:49"><name pos:start="5945:25" pos:end="5945:32"><name pos:start="5945:25" pos:end="5945:25">s</name><operator pos:start="5945:26" pos:end="5945:27">-&gt;</operator><name pos:start="5945:28" pos:end="5945:32">cc_op</name></name> <operator pos:start="5945:34" pos:end="5945:35">!=</operator> <name pos:start="5945:37" pos:end="5945:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5947:25" pos:end="5947:51"><block_content pos:start="5947:25" pos:end="5947:51">

                        <expr_stmt pos:start="5947:25" pos:end="5947:51"><expr pos:start="5947:25" pos:end="5947:50"><call pos:start="5947:25" pos:end="5947:50"><name pos:start="5947:25" pos:end="5947:40">gen_op_set_cc_op</name><argument_list pos:start="5947:41" pos:end="5947:50">(<argument pos:start="5947:42" pos:end="5947:49"><expr pos:start="5947:42" pos:end="5947:49"><name pos:start="5947:42" pos:end="5947:49"><name pos:start="5947:42" pos:end="5947:42">s</name><operator pos:start="5947:43" pos:end="5947:44">-&gt;</operator><name pos:start="5947:45" pos:end="5947:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="5949:21" pos:end="5952:0"><expr pos:start="5949:21" pos:end="5949:53"><call pos:start="5949:21" pos:end="5949:53"><name pos:start="5949:21" pos:end="5949:30">gen_jmp_im</name><argument_list pos:start="5949:31" pos:end="5949:53">(<argument pos:start="5949:32" pos:end="5949:52"><expr pos:start="5949:32" pos:end="5949:52"><name pos:start="5949:32" pos:end="5949:39">pc_start</name> <operator pos:start="5949:41" pos:end="5949:41">-</operator> <name pos:start="5949:43" pos:end="5949:52"><name pos:start="5949:43" pos:end="5949:43">s</name><operator pos:start="5949:44" pos:end="5949:45">-&gt;</operator><name pos:start="5949:46" pos:end="5949:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="5951:1" pos:end="5951:20">#<cpp:directive pos:start="5951:2" pos:end="5951:6">ifdef</cpp:directive> <name pos:start="5951:8" pos:end="5951:20">TARGET_X86_64</name></cpp:ifdef>

                    <if_stmt pos:start="5953:21" pos:end="5969:21"><if pos:start="5953:21" pos:end="5957:21">if <condition pos:start="5953:24" pos:end="5953:38">(<expr pos:start="5953:25" pos:end="5953:37"><name pos:start="5953:25" pos:end="5953:32"><name pos:start="5953:25" pos:end="5953:25">s</name><operator pos:start="5953:26" pos:end="5953:27">-&gt;</operator><name pos:start="5953:28" pos:end="5953:32">aflag</name></name> <operator pos:start="5953:34" pos:end="5953:35">==</operator> <literal type="number" pos:start="5953:37" pos:end="5953:37">2</literal></expr>)</condition> <block pos:start="5953:40" pos:end="5957:21">{<block_content pos:start="5955:25" pos:end="5955:50">

                        <expr_stmt pos:start="5955:25" pos:end="5955:50"><expr pos:start="5955:25" pos:end="5955:49"><call pos:start="5955:25" pos:end="5955:49"><name pos:start="5955:25" pos:end="5955:42">gen_op_movq_A0_reg</name><argument_list pos:start="5955:43" pos:end="5955:49">(<argument pos:start="5955:44" pos:end="5955:48"><expr pos:start="5955:44" pos:end="5955:48"><name pos:start="5955:44" pos:end="5955:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="5957:23" pos:end="5969:21">else

<cpp:endif pos:start="5959:1" pos:end="5959:6">#<cpp:directive pos:start="5959:2" pos:end="5959:6">endif</cpp:directive></cpp:endif>

                    <block pos:start="5961:21" pos:end="5969:21">{<block_content pos:start="5963:25" pos:end="5967:50">

                        <expr_stmt pos:start="5963:25" pos:end="5963:50"><expr pos:start="5963:25" pos:end="5963:49"><call pos:start="5963:25" pos:end="5963:49"><name pos:start="5963:25" pos:end="5963:42">gen_op_movl_A0_reg</name><argument_list pos:start="5963:43" pos:end="5963:49">(<argument pos:start="5963:44" pos:end="5963:48"><expr pos:start="5963:44" pos:end="5963:48"><name pos:start="5963:44" pos:end="5963:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="5965:25" pos:end="5967:50"><if pos:start="5965:25" pos:end="5967:50">if <condition pos:start="5965:28" pos:end="5965:42">(<expr pos:start="5965:29" pos:end="5965:41"><name pos:start="5965:29" pos:end="5965:36"><name pos:start="5965:29" pos:end="5965:29">s</name><operator pos:start="5965:30" pos:end="5965:31">-&gt;</operator><name pos:start="5965:32" pos:end="5965:36">aflag</name></name> <operator pos:start="5965:38" pos:end="5965:39">==</operator> <literal type="number" pos:start="5965:41" pos:end="5965:41">0</literal></expr>)</condition><block type="pseudo" pos:start="5967:29" pos:end="5967:50"><block_content pos:start="5967:29" pos:end="5967:50">

                            <expr_stmt pos:start="5967:29" pos:end="5967:50"><expr pos:start="5967:29" pos:end="5967:49"><call pos:start="5967:29" pos:end="5967:49"><name pos:start="5967:29" pos:end="5967:47">gen_op_andl_A0_ffff</name><argument_list pos:start="5967:48" pos:end="5967:49">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="5971:21" pos:end="5971:41"><expr pos:start="5971:21" pos:end="5971:40"><call pos:start="5971:21" pos:end="5971:40"><name pos:start="5971:21" pos:end="5971:37">gen_add_A0_ds_seg</name><argument_list pos:start="5971:38" pos:end="5971:40">(<argument pos:start="5971:39" pos:end="5971:39"><expr pos:start="5971:39" pos:end="5971:39"><name pos:start="5971:39" pos:end="5971:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5973:21" pos:end="5973:47"><expr pos:start="5973:21" pos:end="5973:46"><call pos:start="5973:21" pos:end="5973:46"><name pos:start="5973:21" pos:end="5973:38">gen_helper_monitor</name><argument_list pos:start="5973:39" pos:end="5973:46">(<argument pos:start="5973:40" pos:end="5973:45"><expr pos:start="5973:40" pos:end="5973:45"><name pos:start="5973:40" pos:end="5973:45">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5975:21" pos:end="5975:26">break;</break>

                <case pos:start="5977:17" pos:end="5977:23">case <expr pos:start="5977:22" pos:end="5977:22"><literal type="number" pos:start="5977:22" pos:end="5977:22">1</literal></expr>:</case> <comment type="block" pos:start="5977:25" pos:end="5977:35">/* mwait */</comment>

                    <if_stmt pos:start="5979:21" pos:end="5983:40"><if pos:start="5979:21" pos:end="5983:40">if <condition pos:start="5979:24" pos:end="5981:36">(<expr pos:start="5979:25" pos:end="5981:35"><operator pos:start="5979:25" pos:end="5979:25">!</operator><operator pos:start="5979:26" pos:end="5979:26">(</operator><name pos:start="5979:27" pos:end="5979:47"><name pos:start="5979:27" pos:end="5979:27">s</name><operator pos:start="5979:28" pos:end="5979:29">-&gt;</operator><name pos:start="5979:30" pos:end="5979:47">cpuid_ext_features</name></name> <operator pos:start="5979:49" pos:end="5979:49">&amp;</operator> <name pos:start="5979:51" pos:end="5979:67">CPUID_EXT_MONITOR</name><operator pos:start="5979:68" pos:end="5979:68">)</operator> <operator pos:start="5979:70" pos:end="5979:71">||</operator>

                        <name pos:start="5981:25" pos:end="5981:30"><name pos:start="5981:25" pos:end="5981:25">s</name><operator pos:start="5981:26" pos:end="5981:27">-&gt;</operator><name pos:start="5981:28" pos:end="5981:30">cpl</name></name> <operator pos:start="5981:32" pos:end="5981:33">!=</operator> <literal type="number" pos:start="5981:35" pos:end="5981:35">0</literal></expr>)</condition><block type="pseudo" pos:start="5983:25" pos:end="5983:40"><block_content pos:start="5983:25" pos:end="5983:40">

                        <goto pos:start="5983:25" pos:end="5983:40">goto <name pos:start="5983:30" pos:end="5983:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="5985:21" pos:end="5991:21"><if pos:start="5985:21" pos:end="5991:21">if <condition pos:start="5985:24" pos:end="5985:50">(<expr pos:start="5985:25" pos:end="5985:49"><name pos:start="5985:25" pos:end="5985:32"><name pos:start="5985:25" pos:end="5985:25">s</name><operator pos:start="5985:26" pos:end="5985:27">-&gt;</operator><name pos:start="5985:28" pos:end="5985:32">cc_op</name></name> <operator pos:start="5985:34" pos:end="5985:35">!=</operator> <name pos:start="5985:37" pos:end="5985:49">CC_OP_DYNAMIC</name></expr>)</condition> <block pos:start="5985:52" pos:end="5991:21">{<block_content pos:start="5987:25" pos:end="5989:49">

                        <expr_stmt pos:start="5987:25" pos:end="5987:51"><expr pos:start="5987:25" pos:end="5987:50"><call pos:start="5987:25" pos:end="5987:50"><name pos:start="5987:25" pos:end="5987:40">gen_op_set_cc_op</name><argument_list pos:start="5987:41" pos:end="5987:50">(<argument pos:start="5987:42" pos:end="5987:49"><expr pos:start="5987:42" pos:end="5987:49"><name pos:start="5987:42" pos:end="5987:49"><name pos:start="5987:42" pos:end="5987:42">s</name><operator pos:start="5987:43" pos:end="5987:44">-&gt;</operator><name pos:start="5987:45" pos:end="5987:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5989:25" pos:end="5989:49"><expr pos:start="5989:25" pos:end="5989:48"><name pos:start="5989:25" pos:end="5989:32"><name pos:start="5989:25" pos:end="5989:25">s</name><operator pos:start="5989:26" pos:end="5989:27">-&gt;</operator><name pos:start="5989:28" pos:end="5989:32">cc_op</name></name> <operator pos:start="5989:34" pos:end="5989:34">=</operator> <name pos:start="5989:36" pos:end="5989:48">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="5993:21" pos:end="5993:54"><expr pos:start="5993:21" pos:end="5993:53"><call pos:start="5993:21" pos:end="5993:53"><name pos:start="5993:21" pos:end="5993:30">gen_jmp_im</name><argument_list pos:start="5993:31" pos:end="5993:53">(<argument pos:start="5993:32" pos:end="5993:52"><expr pos:start="5993:32" pos:end="5993:52"><name pos:start="5993:32" pos:end="5993:39">pc_start</name> <operator pos:start="5993:41" pos:end="5993:41">-</operator> <name pos:start="5993:43" pos:end="5993:52"><name pos:start="5993:43" pos:end="5993:43">s</name><operator pos:start="5993:44" pos:end="5993:45">-&gt;</operator><name pos:start="5993:46" pos:end="5993:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5995:21" pos:end="5995:70"><expr pos:start="5995:21" pos:end="5995:69"><call pos:start="5995:21" pos:end="5995:69"><name pos:start="5995:21" pos:end="5995:36">gen_helper_mwait</name><argument_list pos:start="5995:37" pos:end="5995:69">(<argument pos:start="5995:38" pos:end="5995:68"><expr pos:start="5995:38" pos:end="5995:68"><call pos:start="5995:38" pos:end="5995:68"><name pos:start="5995:38" pos:end="5995:50">tcg_const_i32</name><argument_list pos:start="5995:51" pos:end="5995:68">(<argument pos:start="5995:52" pos:end="5995:67"><expr pos:start="5995:52" pos:end="5995:67"><name pos:start="5995:52" pos:end="5995:56"><name pos:start="5995:52" pos:end="5995:52">s</name><operator pos:start="5995:53" pos:end="5995:54">-&gt;</operator><name pos:start="5995:55" pos:end="5995:56">pc</name></name> <operator pos:start="5995:58" pos:end="5995:58">-</operator> <name pos:start="5995:60" pos:end="5995:67">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5997:21" pos:end="5997:31"><expr pos:start="5997:21" pos:end="5997:30"><call pos:start="5997:21" pos:end="5997:30"><name pos:start="5997:21" pos:end="5997:27">gen_eob</name><argument_list pos:start="5997:28" pos:end="5997:30">(<argument pos:start="5997:29" pos:end="5997:29"><expr pos:start="5997:29" pos:end="5997:29"><name pos:start="5997:29" pos:end="5997:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5999:21" pos:end="5999:26">break;</break>

                <default pos:start="6001:17" pos:end="6001:24">default:</default>

                    <goto pos:start="6003:21" pos:end="6003:36">goto <name pos:start="6003:26" pos:end="6003:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="6007:15" pos:end="6027:13">else <block pos:start="6007:20" pos:end="6027:13">{<block_content pos:start="6009:17" pos:end="6025:68"> <comment type="block" pos:start="6007:22" pos:end="6007:31">/* sidt */</comment>

                <expr_stmt pos:start="6009:17" pos:end="6009:73"><expr pos:start="6009:17" pos:end="6009:72"><call pos:start="6009:17" pos:end="6009:72"><name pos:start="6009:17" pos:end="6009:39">gen_svm_check_intercept</name><argument_list pos:start="6009:40" pos:end="6009:72">(<argument pos:start="6009:41" pos:end="6009:41"><expr pos:start="6009:41" pos:end="6009:41"><name pos:start="6009:41" pos:end="6009:41">s</name></expr></argument>, <argument pos:start="6009:44" pos:end="6009:51"><expr pos:start="6009:44" pos:end="6009:51"><name pos:start="6009:44" pos:end="6009:51">pc_start</name></expr></argument>, <argument pos:start="6009:54" pos:end="6009:71"><expr pos:start="6009:54" pos:end="6009:71"><name pos:start="6009:54" pos:end="6009:71">SVM_EXIT_IDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6011:17" pos:end="6011:65"><expr pos:start="6011:17" pos:end="6011:64"><call pos:start="6011:17" pos:end="6011:64"><name pos:start="6011:17" pos:end="6011:29">gen_lea_modrm</name><argument_list pos:start="6011:30" pos:end="6011:64">(<argument pos:start="6011:31" pos:end="6011:31"><expr pos:start="6011:31" pos:end="6011:31"><name pos:start="6011:31" pos:end="6011:31">s</name></expr></argument>, <argument pos:start="6011:34" pos:end="6011:38"><expr pos:start="6011:34" pos:end="6011:38"><name pos:start="6011:34" pos:end="6011:38">modrm</name></expr></argument>, <argument pos:start="6011:41" pos:end="6011:49"><expr pos:start="6011:41" pos:end="6011:49"><operator pos:start="6011:41" pos:end="6011:41">&amp;</operator><name pos:start="6011:42" pos:end="6011:49">reg_addr</name></expr></argument>, <argument pos:start="6011:52" pos:end="6011:63"><expr pos:start="6011:52" pos:end="6011:63"><operator pos:start="6011:52" pos:end="6011:52">&amp;</operator><name pos:start="6011:53" pos:end="6011:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6013:17" pos:end="6013:86"><expr pos:start="6013:17" pos:end="6013:85"><call pos:start="6013:17" pos:end="6013:85"><name pos:start="6013:17" pos:end="6013:32">tcg_gen_ld32u_tl</name><argument_list pos:start="6013:33" pos:end="6013:85">(<argument pos:start="6013:34" pos:end="6013:41"><expr pos:start="6013:34" pos:end="6013:41"><name pos:start="6013:34" pos:end="6013:41"><name pos:start="6013:34" pos:end="6013:38">cpu_T</name><index pos:start="6013:39" pos:end="6013:41">[<expr pos:start="6013:40" pos:end="6013:40"><literal type="number" pos:start="6013:40" pos:end="6013:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6013:44" pos:end="6013:50"><expr pos:start="6013:44" pos:end="6013:50"><name pos:start="6013:44" pos:end="6013:50">cpu_env</name></expr></argument>, <argument pos:start="6013:53" pos:end="6013:84"><expr pos:start="6013:53" pos:end="6013:84"><call pos:start="6013:53" pos:end="6013:84"><name pos:start="6013:53" pos:end="6013:60">offsetof</name><argument_list pos:start="6013:61" pos:end="6013:84">(<argument pos:start="6013:62" pos:end="6013:72"><expr pos:start="6013:62" pos:end="6013:72"><name pos:start="6013:62" pos:end="6013:72">CPUX86State</name></expr></argument>, <argument pos:start="6013:75" pos:end="6013:83"><expr pos:start="6013:75" pos:end="6013:83"><name pos:start="6013:75" pos:end="6013:83"><name pos:start="6013:75" pos:end="6013:77">idt</name><operator pos:start="6013:78" pos:end="6013:78">.</operator><name pos:start="6013:79" pos:end="6013:83">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6015:17" pos:end="6015:56"><expr pos:start="6015:17" pos:end="6015:55"><call pos:start="6015:17" pos:end="6015:55"><name pos:start="6015:17" pos:end="6015:31">gen_op_st_T0_A0</name><argument_list pos:start="6015:32" pos:end="6015:55">(<argument pos:start="6015:33" pos:end="6015:54"><expr pos:start="6015:33" pos:end="6015:54"><name pos:start="6015:33" pos:end="6015:39">OT_WORD</name> <operator pos:start="6015:41" pos:end="6015:41">+</operator> <name pos:start="6015:43" pos:end="6015:54"><name pos:start="6015:43" pos:end="6015:43">s</name><operator pos:start="6015:44" pos:end="6015:45">-&gt;</operator><name pos:start="6015:46" pos:end="6015:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6017:17" pos:end="6017:36"><expr pos:start="6017:17" pos:end="6017:35"><call pos:start="6017:17" pos:end="6017:35"><name pos:start="6017:17" pos:end="6017:29">gen_add_A0_im</name><argument_list pos:start="6017:30" pos:end="6017:35">(<argument pos:start="6017:31" pos:end="6017:31"><expr pos:start="6017:31" pos:end="6017:31"><name pos:start="6017:31" pos:end="6017:31">s</name></expr></argument>, <argument pos:start="6017:34" pos:end="6017:34"><expr pos:start="6017:34" pos:end="6017:34"><literal type="number" pos:start="6017:34" pos:end="6017:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6019:17" pos:end="6019:82"><expr pos:start="6019:17" pos:end="6019:81"><call pos:start="6019:17" pos:end="6019:81"><name pos:start="6019:17" pos:end="6019:29">tcg_gen_ld_tl</name><argument_list pos:start="6019:30" pos:end="6019:81">(<argument pos:start="6019:31" pos:end="6019:38"><expr pos:start="6019:31" pos:end="6019:38"><name pos:start="6019:31" pos:end="6019:38"><name pos:start="6019:31" pos:end="6019:35">cpu_T</name><index pos:start="6019:36" pos:end="6019:38">[<expr pos:start="6019:37" pos:end="6019:37"><literal type="number" pos:start="6019:37" pos:end="6019:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6019:41" pos:end="6019:47"><expr pos:start="6019:41" pos:end="6019:47"><name pos:start="6019:41" pos:end="6019:47">cpu_env</name></expr></argument>, <argument pos:start="6019:50" pos:end="6019:80"><expr pos:start="6019:50" pos:end="6019:80"><call pos:start="6019:50" pos:end="6019:80"><name pos:start="6019:50" pos:end="6019:57">offsetof</name><argument_list pos:start="6019:58" pos:end="6019:80">(<argument pos:start="6019:59" pos:end="6019:69"><expr pos:start="6019:59" pos:end="6019:69"><name pos:start="6019:59" pos:end="6019:69">CPUX86State</name></expr></argument>, <argument pos:start="6019:72" pos:end="6019:79"><expr pos:start="6019:72" pos:end="6019:79"><name pos:start="6019:72" pos:end="6019:79"><name pos:start="6019:72" pos:end="6019:74">idt</name><operator pos:start="6019:75" pos:end="6019:75">.</operator><name pos:start="6019:76" pos:end="6019:79">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6021:17" pos:end="6023:48"><if pos:start="6021:17" pos:end="6023:48">if <condition pos:start="6021:20" pos:end="6021:30">(<expr pos:start="6021:21" pos:end="6021:29"><operator pos:start="6021:21" pos:end="6021:21">!</operator><name pos:start="6021:22" pos:end="6021:29"><name pos:start="6021:22" pos:end="6021:22">s</name><operator pos:start="6021:23" pos:end="6021:24">-&gt;</operator><name pos:start="6021:25" pos:end="6021:29">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="6023:21" pos:end="6023:48"><block_content pos:start="6023:21" pos:end="6023:48">

                    <expr_stmt pos:start="6023:21" pos:end="6023:48"><expr pos:start="6023:21" pos:end="6023:47"><call pos:start="6023:21" pos:end="6023:47"><name pos:start="6023:21" pos:end="6023:37">gen_op_andl_T0_im</name><argument_list pos:start="6023:38" pos:end="6023:47">(<argument pos:start="6023:39" pos:end="6023:46"><expr pos:start="6023:39" pos:end="6023:46"><literal type="number" pos:start="6023:39" pos:end="6023:46">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6025:17" pos:end="6025:68"><expr pos:start="6025:17" pos:end="6025:67"><call pos:start="6025:17" pos:end="6025:67"><name pos:start="6025:17" pos:end="6025:31">gen_op_st_T0_A0</name><argument_list pos:start="6025:32" pos:end="6025:67">(<argument pos:start="6025:33" pos:end="6025:66"><expr pos:start="6025:33" pos:end="6025:66"><call pos:start="6025:33" pos:end="6025:41"><name pos:start="6025:33" pos:end="6025:38">CODE64</name><argument_list pos:start="6025:39" pos:end="6025:41">(<argument pos:start="6025:40" pos:end="6025:40"><expr pos:start="6025:40" pos:end="6025:40"><name pos:start="6025:40" pos:end="6025:40">s</name></expr></argument>)</argument_list></call> <operator pos:start="6025:43" pos:end="6025:43">+</operator> <name pos:start="6025:45" pos:end="6025:51">OT_LONG</name> <operator pos:start="6025:53" pos:end="6025:53">+</operator> <name pos:start="6025:55" pos:end="6025:66"><name pos:start="6025:55" pos:end="6025:55">s</name><operator pos:start="6025:56" pos:end="6025:57">-&gt;</operator><name pos:start="6025:58" pos:end="6025:66">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6029:13" pos:end="6029:18">break;</break>

        <case pos:start="6031:9" pos:end="6031:15">case <expr pos:start="6031:14" pos:end="6031:14"><literal type="number" pos:start="6031:14" pos:end="6031:14">2</literal></expr>:</case> <comment type="block" pos:start="6031:17" pos:end="6031:26">/* lgdt */</comment>

        <case pos:start="6033:9" pos:end="6033:15">case <expr pos:start="6033:14" pos:end="6033:14"><literal type="number" pos:start="6033:14" pos:end="6033:14">3</literal></expr>:</case> <comment type="block" pos:start="6033:17" pos:end="6033:26">/* lidt */</comment>

            <if_stmt pos:start="6035:13" pos:end="6241:13"><if pos:start="6035:13" pos:end="6205:13">if <condition pos:start="6035:16" pos:end="6035:25">(<expr pos:start="6035:17" pos:end="6035:24"><name pos:start="6035:17" pos:end="6035:19">mod</name> <operator pos:start="6035:21" pos:end="6035:22">==</operator> <literal type="number" pos:start="6035:24" pos:end="6035:24">3</literal></expr>)</condition> <block pos:start="6035:27" pos:end="6205:13">{<block_content pos:start="6037:17" pos:end="6203:17">

                <if_stmt pos:start="6037:17" pos:end="6039:47"><if pos:start="6037:17" pos:end="6039:47">if <condition pos:start="6037:20" pos:end="6037:46">(<expr pos:start="6037:21" pos:end="6037:45"><name pos:start="6037:21" pos:end="6037:28"><name pos:start="6037:21" pos:end="6037:21">s</name><operator pos:start="6037:22" pos:end="6037:23">-&gt;</operator><name pos:start="6037:24" pos:end="6037:28">cc_op</name></name> <operator pos:start="6037:30" pos:end="6037:31">!=</operator> <name pos:start="6037:33" pos:end="6037:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6039:21" pos:end="6039:47"><block_content pos:start="6039:21" pos:end="6039:47">

                    <expr_stmt pos:start="6039:21" pos:end="6039:47"><expr pos:start="6039:21" pos:end="6039:46"><call pos:start="6039:21" pos:end="6039:46"><name pos:start="6039:21" pos:end="6039:36">gen_op_set_cc_op</name><argument_list pos:start="6039:37" pos:end="6039:46">(<argument pos:start="6039:38" pos:end="6039:45"><expr pos:start="6039:38" pos:end="6039:45"><name pos:start="6039:38" pos:end="6039:45"><name pos:start="6039:38" pos:end="6039:38">s</name><operator pos:start="6039:39" pos:end="6039:40">-&gt;</operator><name pos:start="6039:41" pos:end="6039:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6041:17" pos:end="6041:50"><expr pos:start="6041:17" pos:end="6041:49"><call pos:start="6041:17" pos:end="6041:49"><name pos:start="6041:17" pos:end="6041:26">gen_jmp_im</name><argument_list pos:start="6041:27" pos:end="6041:49">(<argument pos:start="6041:28" pos:end="6041:48"><expr pos:start="6041:28" pos:end="6041:48"><name pos:start="6041:28" pos:end="6041:35">pc_start</name> <operator pos:start="6041:37" pos:end="6041:37">-</operator> <name pos:start="6041:39" pos:end="6041:48"><name pos:start="6041:39" pos:end="6041:39">s</name><operator pos:start="6041:40" pos:end="6041:41">-&gt;</operator><name pos:start="6041:42" pos:end="6041:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="6043:17" pos:end="6203:17">switch<condition pos:start="6043:23" pos:end="6043:26">(<expr pos:start="6043:24" pos:end="6043:25"><name pos:start="6043:24" pos:end="6043:25">rm</name></expr>)</condition> <block pos:start="6043:28" pos:end="6203:17">{<block_content pos:start="6045:17" pos:end="6201:36">

                <case pos:start="6045:17" pos:end="6045:23">case <expr pos:start="6045:22" pos:end="6045:22"><literal type="number" pos:start="6045:22" pos:end="6045:22">0</literal></expr>:</case> <comment type="block" pos:start="6045:25" pos:end="6045:35">/* VMRUN */</comment>

                    <if_stmt pos:start="6047:21" pos:end="6049:40"><if pos:start="6047:21" pos:end="6049:40">if <condition pos:start="6047:24" pos:end="6047:61">(<expr pos:start="6047:25" pos:end="6047:60"><operator pos:start="6047:25" pos:end="6047:25">!</operator><operator pos:start="6047:26" pos:end="6047:26">(</operator><name pos:start="6047:27" pos:end="6047:34"><name pos:start="6047:27" pos:end="6047:27">s</name><operator pos:start="6047:28" pos:end="6047:29">-&gt;</operator><name pos:start="6047:30" pos:end="6047:34">flags</name></name> <operator pos:start="6047:36" pos:end="6047:36">&amp;</operator> <name pos:start="6047:38" pos:end="6047:49">HF_SVME_MASK</name><operator pos:start="6047:50" pos:end="6047:50">)</operator> <operator pos:start="6047:52" pos:end="6047:53">||</operator> <operator pos:start="6047:55" pos:end="6047:55">!</operator><name pos:start="6047:56" pos:end="6047:60"><name pos:start="6047:56" pos:end="6047:56">s</name><operator pos:start="6047:57" pos:end="6047:58">-&gt;</operator><name pos:start="6047:59" pos:end="6047:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6049:25" pos:end="6049:40"><block_content pos:start="6049:25" pos:end="6049:40">

                        <goto pos:start="6049:25" pos:end="6049:40">goto <name pos:start="6049:30" pos:end="6049:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6051:21" pos:end="6067:21"><if pos:start="6051:21" pos:end="6057:21">if <condition pos:start="6051:24" pos:end="6051:36">(<expr pos:start="6051:25" pos:end="6051:35"><name pos:start="6051:25" pos:end="6051:30"><name pos:start="6051:25" pos:end="6051:25">s</name><operator pos:start="6051:26" pos:end="6051:27">-&gt;</operator><name pos:start="6051:28" pos:end="6051:30">cpl</name></name> <operator pos:start="6051:32" pos:end="6051:33">!=</operator> <literal type="number" pos:start="6051:35" pos:end="6051:35">0</literal></expr>)</condition> <block pos:start="6051:38" pos:end="6057:21">{<block_content pos:start="6053:25" pos:end="6055:30">

                        <expr_stmt pos:start="6053:25" pos:end="6053:76"><expr pos:start="6053:25" pos:end="6053:75"><call pos:start="6053:25" pos:end="6053:75"><name pos:start="6053:25" pos:end="6053:37">gen_exception</name><argument_list pos:start="6053:38" pos:end="6053:75">(<argument pos:start="6053:39" pos:end="6053:39"><expr pos:start="6053:39" pos:end="6053:39"><name pos:start="6053:39" pos:end="6053:39">s</name></expr></argument>, <argument pos:start="6053:42" pos:end="6053:51"><expr pos:start="6053:42" pos:end="6053:51"><name pos:start="6053:42" pos:end="6053:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6053:54" pos:end="6053:74"><expr pos:start="6053:54" pos:end="6053:74"><name pos:start="6053:54" pos:end="6053:61">pc_start</name> <operator pos:start="6053:63" pos:end="6053:63">-</operator> <name pos:start="6053:65" pos:end="6053:74"><name pos:start="6053:65" pos:end="6053:65">s</name><operator pos:start="6053:66" pos:end="6053:67">-&gt;</operator><name pos:start="6053:68" pos:end="6053:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6055:25" pos:end="6055:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6057:23" pos:end="6067:21">else <block pos:start="6057:28" pos:end="6067:21">{<block_content pos:start="6059:25" pos:end="6065:38">

                        <expr_stmt pos:start="6059:25" pos:end="6061:74"><expr pos:start="6059:25" pos:end="6061:73"><call pos:start="6059:25" pos:end="6061:73"><name pos:start="6059:25" pos:end="6059:40">gen_helper_vmrun</name><argument_list pos:start="6059:41" pos:end="6061:73">(<argument pos:start="6059:42" pos:end="6059:64"><expr pos:start="6059:42" pos:end="6059:64"><call pos:start="6059:42" pos:end="6059:64"><name pos:start="6059:42" pos:end="6059:54">tcg_const_i32</name><argument_list pos:start="6059:55" pos:end="6059:64">(<argument pos:start="6059:56" pos:end="6059:63"><expr pos:start="6059:56" pos:end="6059:63"><name pos:start="6059:56" pos:end="6059:63"><name pos:start="6059:56" pos:end="6059:56">s</name><operator pos:start="6059:57" pos:end="6059:58">-&gt;</operator><name pos:start="6059:59" pos:end="6059:63">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="6061:42" pos:end="6061:72"><expr pos:start="6061:42" pos:end="6061:72"><call pos:start="6061:42" pos:end="6061:72"><name pos:start="6061:42" pos:end="6061:54">tcg_const_i32</name><argument_list pos:start="6061:55" pos:end="6061:72">(<argument pos:start="6061:56" pos:end="6061:71"><expr pos:start="6061:56" pos:end="6061:71"><name pos:start="6061:56" pos:end="6061:60"><name pos:start="6061:56" pos:end="6061:56">s</name><operator pos:start="6061:57" pos:end="6061:58">-&gt;</operator><name pos:start="6061:59" pos:end="6061:60">pc</name></name> <operator pos:start="6061:62" pos:end="6061:62">-</operator> <name pos:start="6061:64" pos:end="6061:71">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6063:25" pos:end="6063:43"><expr pos:start="6063:25" pos:end="6063:42"><call pos:start="6063:25" pos:end="6063:42"><name pos:start="6063:25" pos:end="6063:39">tcg_gen_exit_tb</name><argument_list pos:start="6063:40" pos:end="6063:42">(<argument pos:start="6063:41" pos:end="6063:41"><expr pos:start="6063:41" pos:end="6063:41"><literal type="number" pos:start="6063:41" pos:end="6063:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6065:25" pos:end="6065:38"><expr pos:start="6065:25" pos:end="6065:37"><name pos:start="6065:25" pos:end="6065:33"><name pos:start="6065:25" pos:end="6065:25">s</name><operator pos:start="6065:26" pos:end="6065:27">-&gt;</operator><name pos:start="6065:28" pos:end="6065:33">is_jmp</name></name> <operator pos:start="6065:35" pos:end="6065:35">=</operator> <literal type="number" pos:start="6065:37" pos:end="6065:37">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6069:21" pos:end="6069:26">break;</break>

                <case pos:start="6071:17" pos:end="6071:23">case <expr pos:start="6071:22" pos:end="6071:22"><literal type="number" pos:start="6071:22" pos:end="6071:22">1</literal></expr>:</case> <comment type="block" pos:start="6071:25" pos:end="6071:37">/* VMMCALL */</comment>

                    <if_stmt pos:start="6073:21" pos:end="6075:40"><if pos:start="6073:21" pos:end="6075:40">if <condition pos:start="6073:24" pos:end="6073:51">(<expr pos:start="6073:25" pos:end="6073:50"><operator pos:start="6073:25" pos:end="6073:25">!</operator><operator pos:start="6073:26" pos:end="6073:26">(</operator><name pos:start="6073:27" pos:end="6073:34"><name pos:start="6073:27" pos:end="6073:27">s</name><operator pos:start="6073:28" pos:end="6073:29">-&gt;</operator><name pos:start="6073:30" pos:end="6073:34">flags</name></name> <operator pos:start="6073:36" pos:end="6073:36">&amp;</operator> <name pos:start="6073:38" pos:end="6073:49">HF_SVME_MASK</name><operator pos:start="6073:50" pos:end="6073:50">)</operator></expr>)</condition><block type="pseudo" pos:start="6075:25" pos:end="6075:40"><block_content pos:start="6075:25" pos:end="6075:40">

                        <goto pos:start="6075:25" pos:end="6075:40">goto <name pos:start="6075:30" pos:end="6075:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6077:21" pos:end="6077:41"><expr pos:start="6077:21" pos:end="6077:40"><call pos:start="6077:21" pos:end="6077:40"><name pos:start="6077:21" pos:end="6077:38">gen_helper_vmmcall</name><argument_list pos:start="6077:39" pos:end="6077:40">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6079:21" pos:end="6079:26">break;</break>

                <case pos:start="6081:17" pos:end="6081:23">case <expr pos:start="6081:22" pos:end="6081:22"><literal type="number" pos:start="6081:22" pos:end="6081:22">2</literal></expr>:</case> <comment type="block" pos:start="6081:25" pos:end="6081:36">/* VMLOAD */</comment>

                    <if_stmt pos:start="6083:21" pos:end="6085:40"><if pos:start="6083:21" pos:end="6085:40">if <condition pos:start="6083:24" pos:end="6083:61">(<expr pos:start="6083:25" pos:end="6083:60"><operator pos:start="6083:25" pos:end="6083:25">!</operator><operator pos:start="6083:26" pos:end="6083:26">(</operator><name pos:start="6083:27" pos:end="6083:34"><name pos:start="6083:27" pos:end="6083:27">s</name><operator pos:start="6083:28" pos:end="6083:29">-&gt;</operator><name pos:start="6083:30" pos:end="6083:34">flags</name></name> <operator pos:start="6083:36" pos:end="6083:36">&amp;</operator> <name pos:start="6083:38" pos:end="6083:49">HF_SVME_MASK</name><operator pos:start="6083:50" pos:end="6083:50">)</operator> <operator pos:start="6083:52" pos:end="6083:53">||</operator> <operator pos:start="6083:55" pos:end="6083:55">!</operator><name pos:start="6083:56" pos:end="6083:60"><name pos:start="6083:56" pos:end="6083:56">s</name><operator pos:start="6083:57" pos:end="6083:58">-&gt;</operator><name pos:start="6083:59" pos:end="6083:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6085:25" pos:end="6085:40"><block_content pos:start="6085:25" pos:end="6085:40">

                        <goto pos:start="6085:25" pos:end="6085:40">goto <name pos:start="6085:30" pos:end="6085:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6087:21" pos:end="6097:21"><if pos:start="6087:21" pos:end="6093:21">if <condition pos:start="6087:24" pos:end="6087:36">(<expr pos:start="6087:25" pos:end="6087:35"><name pos:start="6087:25" pos:end="6087:30"><name pos:start="6087:25" pos:end="6087:25">s</name><operator pos:start="6087:26" pos:end="6087:27">-&gt;</operator><name pos:start="6087:28" pos:end="6087:30">cpl</name></name> <operator pos:start="6087:32" pos:end="6087:33">!=</operator> <literal type="number" pos:start="6087:35" pos:end="6087:35">0</literal></expr>)</condition> <block pos:start="6087:38" pos:end="6093:21">{<block_content pos:start="6089:25" pos:end="6091:30">

                        <expr_stmt pos:start="6089:25" pos:end="6089:76"><expr pos:start="6089:25" pos:end="6089:75"><call pos:start="6089:25" pos:end="6089:75"><name pos:start="6089:25" pos:end="6089:37">gen_exception</name><argument_list pos:start="6089:38" pos:end="6089:75">(<argument pos:start="6089:39" pos:end="6089:39"><expr pos:start="6089:39" pos:end="6089:39"><name pos:start="6089:39" pos:end="6089:39">s</name></expr></argument>, <argument pos:start="6089:42" pos:end="6089:51"><expr pos:start="6089:42" pos:end="6089:51"><name pos:start="6089:42" pos:end="6089:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6089:54" pos:end="6089:74"><expr pos:start="6089:54" pos:end="6089:74"><name pos:start="6089:54" pos:end="6089:61">pc_start</name> <operator pos:start="6089:63" pos:end="6089:63">-</operator> <name pos:start="6089:65" pos:end="6089:74"><name pos:start="6089:65" pos:end="6089:65">s</name><operator pos:start="6089:66" pos:end="6089:67">-&gt;</operator><name pos:start="6089:68" pos:end="6089:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6091:25" pos:end="6091:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6093:23" pos:end="6097:21">else <block pos:start="6093:28" pos:end="6097:21">{<block_content pos:start="6095:25" pos:end="6095:67">

                        <expr_stmt pos:start="6095:25" pos:end="6095:67"><expr pos:start="6095:25" pos:end="6095:66"><call pos:start="6095:25" pos:end="6095:66"><name pos:start="6095:25" pos:end="6095:41">gen_helper_vmload</name><argument_list pos:start="6095:42" pos:end="6095:66">(<argument pos:start="6095:43" pos:end="6095:65"><expr pos:start="6095:43" pos:end="6095:65"><call pos:start="6095:43" pos:end="6095:65"><name pos:start="6095:43" pos:end="6095:55">tcg_const_i32</name><argument_list pos:start="6095:56" pos:end="6095:65">(<argument pos:start="6095:57" pos:end="6095:64"><expr pos:start="6095:57" pos:end="6095:64"><name pos:start="6095:57" pos:end="6095:64"><name pos:start="6095:57" pos:end="6095:57">s</name><operator pos:start="6095:58" pos:end="6095:59">-&gt;</operator><name pos:start="6095:60" pos:end="6095:64">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6099:21" pos:end="6099:26">break;</break>

                <case pos:start="6101:17" pos:end="6101:23">case <expr pos:start="6101:22" pos:end="6101:22"><literal type="number" pos:start="6101:22" pos:end="6101:22">3</literal></expr>:</case> <comment type="block" pos:start="6101:25" pos:end="6101:36">/* VMSAVE */</comment>

                    <if_stmt pos:start="6103:21" pos:end="6105:40"><if pos:start="6103:21" pos:end="6105:40">if <condition pos:start="6103:24" pos:end="6103:61">(<expr pos:start="6103:25" pos:end="6103:60"><operator pos:start="6103:25" pos:end="6103:25">!</operator><operator pos:start="6103:26" pos:end="6103:26">(</operator><name pos:start="6103:27" pos:end="6103:34"><name pos:start="6103:27" pos:end="6103:27">s</name><operator pos:start="6103:28" pos:end="6103:29">-&gt;</operator><name pos:start="6103:30" pos:end="6103:34">flags</name></name> <operator pos:start="6103:36" pos:end="6103:36">&amp;</operator> <name pos:start="6103:38" pos:end="6103:49">HF_SVME_MASK</name><operator pos:start="6103:50" pos:end="6103:50">)</operator> <operator pos:start="6103:52" pos:end="6103:53">||</operator> <operator pos:start="6103:55" pos:end="6103:55">!</operator><name pos:start="6103:56" pos:end="6103:60"><name pos:start="6103:56" pos:end="6103:56">s</name><operator pos:start="6103:57" pos:end="6103:58">-&gt;</operator><name pos:start="6103:59" pos:end="6103:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6105:25" pos:end="6105:40"><block_content pos:start="6105:25" pos:end="6105:40">

                        <goto pos:start="6105:25" pos:end="6105:40">goto <name pos:start="6105:30" pos:end="6105:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6107:21" pos:end="6117:21"><if pos:start="6107:21" pos:end="6113:21">if <condition pos:start="6107:24" pos:end="6107:36">(<expr pos:start="6107:25" pos:end="6107:35"><name pos:start="6107:25" pos:end="6107:30"><name pos:start="6107:25" pos:end="6107:25">s</name><operator pos:start="6107:26" pos:end="6107:27">-&gt;</operator><name pos:start="6107:28" pos:end="6107:30">cpl</name></name> <operator pos:start="6107:32" pos:end="6107:33">!=</operator> <literal type="number" pos:start="6107:35" pos:end="6107:35">0</literal></expr>)</condition> <block pos:start="6107:38" pos:end="6113:21">{<block_content pos:start="6109:25" pos:end="6111:30">

                        <expr_stmt pos:start="6109:25" pos:end="6109:76"><expr pos:start="6109:25" pos:end="6109:75"><call pos:start="6109:25" pos:end="6109:75"><name pos:start="6109:25" pos:end="6109:37">gen_exception</name><argument_list pos:start="6109:38" pos:end="6109:75">(<argument pos:start="6109:39" pos:end="6109:39"><expr pos:start="6109:39" pos:end="6109:39"><name pos:start="6109:39" pos:end="6109:39">s</name></expr></argument>, <argument pos:start="6109:42" pos:end="6109:51"><expr pos:start="6109:42" pos:end="6109:51"><name pos:start="6109:42" pos:end="6109:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6109:54" pos:end="6109:74"><expr pos:start="6109:54" pos:end="6109:74"><name pos:start="6109:54" pos:end="6109:61">pc_start</name> <operator pos:start="6109:63" pos:end="6109:63">-</operator> <name pos:start="6109:65" pos:end="6109:74"><name pos:start="6109:65" pos:end="6109:65">s</name><operator pos:start="6109:66" pos:end="6109:67">-&gt;</operator><name pos:start="6109:68" pos:end="6109:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6111:25" pos:end="6111:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6113:23" pos:end="6117:21">else <block pos:start="6113:28" pos:end="6117:21">{<block_content pos:start="6115:25" pos:end="6115:67">

                        <expr_stmt pos:start="6115:25" pos:end="6115:67"><expr pos:start="6115:25" pos:end="6115:66"><call pos:start="6115:25" pos:end="6115:66"><name pos:start="6115:25" pos:end="6115:41">gen_helper_vmsave</name><argument_list pos:start="6115:42" pos:end="6115:66">(<argument pos:start="6115:43" pos:end="6115:65"><expr pos:start="6115:43" pos:end="6115:65"><call pos:start="6115:43" pos:end="6115:65"><name pos:start="6115:43" pos:end="6115:55">tcg_const_i32</name><argument_list pos:start="6115:56" pos:end="6115:65">(<argument pos:start="6115:57" pos:end="6115:64"><expr pos:start="6115:57" pos:end="6115:64"><name pos:start="6115:57" pos:end="6115:64"><name pos:start="6115:57" pos:end="6115:57">s</name><operator pos:start="6115:58" pos:end="6115:59">-&gt;</operator><name pos:start="6115:60" pos:end="6115:64">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6119:21" pos:end="6119:26">break;</break>

                <case pos:start="6121:17" pos:end="6121:23">case <expr pos:start="6121:22" pos:end="6121:22"><literal type="number" pos:start="6121:22" pos:end="6121:22">4</literal></expr>:</case> <comment type="block" pos:start="6121:25" pos:end="6121:34">/* STGI */</comment>

                    <if_stmt pos:start="6123:21" pos:end="6129:40"><if pos:start="6123:21" pos:end="6129:40">if <condition pos:start="6123:24" pos:end="6127:31">(<expr pos:start="6123:25" pos:end="6127:30"><operator pos:start="6123:25" pos:end="6123:25">(</operator><operator pos:start="6123:26" pos:end="6123:26">!</operator><operator pos:start="6123:27" pos:end="6123:27">(</operator><name pos:start="6123:28" pos:end="6123:35"><name pos:start="6123:28" pos:end="6123:28">s</name><operator pos:start="6123:29" pos:end="6123:30">-&gt;</operator><name pos:start="6123:31" pos:end="6123:35">flags</name></name> <operator pos:start="6123:37" pos:end="6123:37">&amp;</operator> <name pos:start="6123:39" pos:end="6123:50">HF_SVME_MASK</name><operator pos:start="6123:51" pos:end="6123:51">)</operator> <operator pos:start="6123:53" pos:end="6123:54">&amp;&amp;</operator>

                         <operator pos:start="6125:26" pos:end="6125:26">!</operator><operator pos:start="6125:27" pos:end="6125:27">(</operator><name pos:start="6125:28" pos:end="6125:49"><name pos:start="6125:28" pos:end="6125:28">s</name><operator pos:start="6125:29" pos:end="6125:30">-&gt;</operator><name pos:start="6125:31" pos:end="6125:49">cpuid_ext3_features</name></name> <operator pos:start="6125:51" pos:end="6125:51">&amp;</operator> <name pos:start="6125:53" pos:end="6125:69">CPUID_EXT3_SKINIT</name><operator pos:start="6125:70" pos:end="6125:70">)</operator><operator pos:start="6125:71" pos:end="6125:71">)</operator> <operator pos:start="6125:73" pos:end="6125:74">||</operator> 

                        <operator pos:start="6127:25" pos:end="6127:25">!</operator><name pos:start="6127:26" pos:end="6127:30"><name pos:start="6127:26" pos:end="6127:26">s</name><operator pos:start="6127:27" pos:end="6127:28">-&gt;</operator><name pos:start="6127:29" pos:end="6127:30">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6129:25" pos:end="6129:40"><block_content pos:start="6129:25" pos:end="6129:40">

                        <goto pos:start="6129:25" pos:end="6129:40">goto <name pos:start="6129:30" pos:end="6129:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6131:21" pos:end="6141:21"><if pos:start="6131:21" pos:end="6137:21">if <condition pos:start="6131:24" pos:end="6131:36">(<expr pos:start="6131:25" pos:end="6131:35"><name pos:start="6131:25" pos:end="6131:30"><name pos:start="6131:25" pos:end="6131:25">s</name><operator pos:start="6131:26" pos:end="6131:27">-&gt;</operator><name pos:start="6131:28" pos:end="6131:30">cpl</name></name> <operator pos:start="6131:32" pos:end="6131:33">!=</operator> <literal type="number" pos:start="6131:35" pos:end="6131:35">0</literal></expr>)</condition> <block pos:start="6131:38" pos:end="6137:21">{<block_content pos:start="6133:25" pos:end="6135:30">

                        <expr_stmt pos:start="6133:25" pos:end="6133:76"><expr pos:start="6133:25" pos:end="6133:75"><call pos:start="6133:25" pos:end="6133:75"><name pos:start="6133:25" pos:end="6133:37">gen_exception</name><argument_list pos:start="6133:38" pos:end="6133:75">(<argument pos:start="6133:39" pos:end="6133:39"><expr pos:start="6133:39" pos:end="6133:39"><name pos:start="6133:39" pos:end="6133:39">s</name></expr></argument>, <argument pos:start="6133:42" pos:end="6133:51"><expr pos:start="6133:42" pos:end="6133:51"><name pos:start="6133:42" pos:end="6133:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6133:54" pos:end="6133:74"><expr pos:start="6133:54" pos:end="6133:74"><name pos:start="6133:54" pos:end="6133:61">pc_start</name> <operator pos:start="6133:63" pos:end="6133:63">-</operator> <name pos:start="6133:65" pos:end="6133:74"><name pos:start="6133:65" pos:end="6133:65">s</name><operator pos:start="6133:66" pos:end="6133:67">-&gt;</operator><name pos:start="6133:68" pos:end="6133:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6135:25" pos:end="6135:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6137:23" pos:end="6141:21">else <block pos:start="6137:28" pos:end="6141:21">{<block_content pos:start="6139:25" pos:end="6139:42">

                        <expr_stmt pos:start="6139:25" pos:end="6139:42"><expr pos:start="6139:25" pos:end="6139:41"><call pos:start="6139:25" pos:end="6139:41"><name pos:start="6139:25" pos:end="6139:39">gen_helper_stgi</name><argument_list pos:start="6139:40" pos:end="6139:41">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6143:21" pos:end="6143:26">break;</break>

                <case pos:start="6145:17" pos:end="6145:23">case <expr pos:start="6145:22" pos:end="6145:22"><literal type="number" pos:start="6145:22" pos:end="6145:22">5</literal></expr>:</case> <comment type="block" pos:start="6145:25" pos:end="6145:34">/* CLGI */</comment>

                    <if_stmt pos:start="6147:21" pos:end="6149:40"><if pos:start="6147:21" pos:end="6149:40">if <condition pos:start="6147:24" pos:end="6147:61">(<expr pos:start="6147:25" pos:end="6147:60"><operator pos:start="6147:25" pos:end="6147:25">!</operator><operator pos:start="6147:26" pos:end="6147:26">(</operator><name pos:start="6147:27" pos:end="6147:34"><name pos:start="6147:27" pos:end="6147:27">s</name><operator pos:start="6147:28" pos:end="6147:29">-&gt;</operator><name pos:start="6147:30" pos:end="6147:34">flags</name></name> <operator pos:start="6147:36" pos:end="6147:36">&amp;</operator> <name pos:start="6147:38" pos:end="6147:49">HF_SVME_MASK</name><operator pos:start="6147:50" pos:end="6147:50">)</operator> <operator pos:start="6147:52" pos:end="6147:53">||</operator> <operator pos:start="6147:55" pos:end="6147:55">!</operator><name pos:start="6147:56" pos:end="6147:60"><name pos:start="6147:56" pos:end="6147:56">s</name><operator pos:start="6147:57" pos:end="6147:58">-&gt;</operator><name pos:start="6147:59" pos:end="6147:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6149:25" pos:end="6149:40"><block_content pos:start="6149:25" pos:end="6149:40">

                        <goto pos:start="6149:25" pos:end="6149:40">goto <name pos:start="6149:30" pos:end="6149:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6151:21" pos:end="6161:21"><if pos:start="6151:21" pos:end="6157:21">if <condition pos:start="6151:24" pos:end="6151:36">(<expr pos:start="6151:25" pos:end="6151:35"><name pos:start="6151:25" pos:end="6151:30"><name pos:start="6151:25" pos:end="6151:25">s</name><operator pos:start="6151:26" pos:end="6151:27">-&gt;</operator><name pos:start="6151:28" pos:end="6151:30">cpl</name></name> <operator pos:start="6151:32" pos:end="6151:33">!=</operator> <literal type="number" pos:start="6151:35" pos:end="6151:35">0</literal></expr>)</condition> <block pos:start="6151:38" pos:end="6157:21">{<block_content pos:start="6153:25" pos:end="6155:30">

                        <expr_stmt pos:start="6153:25" pos:end="6153:76"><expr pos:start="6153:25" pos:end="6153:75"><call pos:start="6153:25" pos:end="6153:75"><name pos:start="6153:25" pos:end="6153:37">gen_exception</name><argument_list pos:start="6153:38" pos:end="6153:75">(<argument pos:start="6153:39" pos:end="6153:39"><expr pos:start="6153:39" pos:end="6153:39"><name pos:start="6153:39" pos:end="6153:39">s</name></expr></argument>, <argument pos:start="6153:42" pos:end="6153:51"><expr pos:start="6153:42" pos:end="6153:51"><name pos:start="6153:42" pos:end="6153:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6153:54" pos:end="6153:74"><expr pos:start="6153:54" pos:end="6153:74"><name pos:start="6153:54" pos:end="6153:61">pc_start</name> <operator pos:start="6153:63" pos:end="6153:63">-</operator> <name pos:start="6153:65" pos:end="6153:74"><name pos:start="6153:65" pos:end="6153:65">s</name><operator pos:start="6153:66" pos:end="6153:67">-&gt;</operator><name pos:start="6153:68" pos:end="6153:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6155:25" pos:end="6155:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6157:23" pos:end="6161:21">else <block pos:start="6157:28" pos:end="6161:21">{<block_content pos:start="6159:25" pos:end="6159:42">

                        <expr_stmt pos:start="6159:25" pos:end="6159:42"><expr pos:start="6159:25" pos:end="6159:41"><call pos:start="6159:25" pos:end="6159:41"><name pos:start="6159:25" pos:end="6159:39">gen_helper_clgi</name><argument_list pos:start="6159:40" pos:end="6159:41">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6163:21" pos:end="6163:26">break;</break>

                <case pos:start="6165:17" pos:end="6165:23">case <expr pos:start="6165:22" pos:end="6165:22"><literal type="number" pos:start="6165:22" pos:end="6165:22">6</literal></expr>:</case> <comment type="block" pos:start="6165:25" pos:end="6165:36">/* SKINIT */</comment>

                    <if_stmt pos:start="6167:21" pos:end="6173:40"><if pos:start="6167:21" pos:end="6173:40">if <condition pos:start="6167:24" pos:end="6171:31">(<expr pos:start="6167:25" pos:end="6171:30"><operator pos:start="6167:25" pos:end="6167:25">(</operator><operator pos:start="6167:26" pos:end="6167:26">!</operator><operator pos:start="6167:27" pos:end="6167:27">(</operator><name pos:start="6167:28" pos:end="6167:35"><name pos:start="6167:28" pos:end="6167:28">s</name><operator pos:start="6167:29" pos:end="6167:30">-&gt;</operator><name pos:start="6167:31" pos:end="6167:35">flags</name></name> <operator pos:start="6167:37" pos:end="6167:37">&amp;</operator> <name pos:start="6167:39" pos:end="6167:50">HF_SVME_MASK</name><operator pos:start="6167:51" pos:end="6167:51">)</operator> <operator pos:start="6167:53" pos:end="6167:54">&amp;&amp;</operator> 

                         <operator pos:start="6169:26" pos:end="6169:26">!</operator><operator pos:start="6169:27" pos:end="6169:27">(</operator><name pos:start="6169:28" pos:end="6169:49"><name pos:start="6169:28" pos:end="6169:28">s</name><operator pos:start="6169:29" pos:end="6169:30">-&gt;</operator><name pos:start="6169:31" pos:end="6169:49">cpuid_ext3_features</name></name> <operator pos:start="6169:51" pos:end="6169:51">&amp;</operator> <name pos:start="6169:53" pos:end="6169:69">CPUID_EXT3_SKINIT</name><operator pos:start="6169:70" pos:end="6169:70">)</operator><operator pos:start="6169:71" pos:end="6169:71">)</operator> <operator pos:start="6169:73" pos:end="6169:74">||</operator> 

                        <operator pos:start="6171:25" pos:end="6171:25">!</operator><name pos:start="6171:26" pos:end="6171:30"><name pos:start="6171:26" pos:end="6171:26">s</name><operator pos:start="6171:27" pos:end="6171:28">-&gt;</operator><name pos:start="6171:29" pos:end="6171:30">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6173:25" pos:end="6173:40"><block_content pos:start="6173:25" pos:end="6173:40">

                        <goto pos:start="6173:25" pos:end="6173:40">goto <name pos:start="6173:30" pos:end="6173:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6175:21" pos:end="6175:40"><expr pos:start="6175:21" pos:end="6175:39"><call pos:start="6175:21" pos:end="6175:39"><name pos:start="6175:21" pos:end="6175:37">gen_helper_skinit</name><argument_list pos:start="6175:38" pos:end="6175:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6177:21" pos:end="6177:26">break;</break>

                <case pos:start="6179:17" pos:end="6179:23">case <expr pos:start="6179:22" pos:end="6179:22"><literal type="number" pos:start="6179:22" pos:end="6179:22">7</literal></expr>:</case> <comment type="block" pos:start="6179:25" pos:end="6179:37">/* INVLPGA */</comment>

                    <if_stmt pos:start="6181:21" pos:end="6183:40"><if pos:start="6181:21" pos:end="6183:40">if <condition pos:start="6181:24" pos:end="6181:61">(<expr pos:start="6181:25" pos:end="6181:60"><operator pos:start="6181:25" pos:end="6181:25">!</operator><operator pos:start="6181:26" pos:end="6181:26">(</operator><name pos:start="6181:27" pos:end="6181:34"><name pos:start="6181:27" pos:end="6181:27">s</name><operator pos:start="6181:28" pos:end="6181:29">-&gt;</operator><name pos:start="6181:30" pos:end="6181:34">flags</name></name> <operator pos:start="6181:36" pos:end="6181:36">&amp;</operator> <name pos:start="6181:38" pos:end="6181:49">HF_SVME_MASK</name><operator pos:start="6181:50" pos:end="6181:50">)</operator> <operator pos:start="6181:52" pos:end="6181:53">||</operator> <operator pos:start="6181:55" pos:end="6181:55">!</operator><name pos:start="6181:56" pos:end="6181:60"><name pos:start="6181:56" pos:end="6181:56">s</name><operator pos:start="6181:57" pos:end="6181:58">-&gt;</operator><name pos:start="6181:59" pos:end="6181:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6183:25" pos:end="6183:40"><block_content pos:start="6183:25" pos:end="6183:40">

                        <goto pos:start="6183:25" pos:end="6183:40">goto <name pos:start="6183:30" pos:end="6183:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6185:21" pos:end="6195:21"><if pos:start="6185:21" pos:end="6191:21">if <condition pos:start="6185:24" pos:end="6185:36">(<expr pos:start="6185:25" pos:end="6185:35"><name pos:start="6185:25" pos:end="6185:30"><name pos:start="6185:25" pos:end="6185:25">s</name><operator pos:start="6185:26" pos:end="6185:27">-&gt;</operator><name pos:start="6185:28" pos:end="6185:30">cpl</name></name> <operator pos:start="6185:32" pos:end="6185:33">!=</operator> <literal type="number" pos:start="6185:35" pos:end="6185:35">0</literal></expr>)</condition> <block pos:start="6185:38" pos:end="6191:21">{<block_content pos:start="6187:25" pos:end="6189:30">

                        <expr_stmt pos:start="6187:25" pos:end="6187:76"><expr pos:start="6187:25" pos:end="6187:75"><call pos:start="6187:25" pos:end="6187:75"><name pos:start="6187:25" pos:end="6187:37">gen_exception</name><argument_list pos:start="6187:38" pos:end="6187:75">(<argument pos:start="6187:39" pos:end="6187:39"><expr pos:start="6187:39" pos:end="6187:39"><name pos:start="6187:39" pos:end="6187:39">s</name></expr></argument>, <argument pos:start="6187:42" pos:end="6187:51"><expr pos:start="6187:42" pos:end="6187:51"><name pos:start="6187:42" pos:end="6187:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6187:54" pos:end="6187:74"><expr pos:start="6187:54" pos:end="6187:74"><name pos:start="6187:54" pos:end="6187:61">pc_start</name> <operator pos:start="6187:63" pos:end="6187:63">-</operator> <name pos:start="6187:65" pos:end="6187:74"><name pos:start="6187:65" pos:end="6187:65">s</name><operator pos:start="6187:66" pos:end="6187:67">-&gt;</operator><name pos:start="6187:68" pos:end="6187:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6189:25" pos:end="6189:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6191:23" pos:end="6195:21">else <block pos:start="6191:28" pos:end="6195:21">{<block_content pos:start="6193:25" pos:end="6193:68">

                        <expr_stmt pos:start="6193:25" pos:end="6193:68"><expr pos:start="6193:25" pos:end="6193:67"><call pos:start="6193:25" pos:end="6193:67"><name pos:start="6193:25" pos:end="6193:42">gen_helper_invlpga</name><argument_list pos:start="6193:43" pos:end="6193:67">(<argument pos:start="6193:44" pos:end="6193:66"><expr pos:start="6193:44" pos:end="6193:66"><call pos:start="6193:44" pos:end="6193:66"><name pos:start="6193:44" pos:end="6193:56">tcg_const_i32</name><argument_list pos:start="6193:57" pos:end="6193:66">(<argument pos:start="6193:58" pos:end="6193:65"><expr pos:start="6193:58" pos:end="6193:65"><name pos:start="6193:58" pos:end="6193:65"><name pos:start="6193:58" pos:end="6193:58">s</name><operator pos:start="6193:59" pos:end="6193:60">-&gt;</operator><name pos:start="6193:61" pos:end="6193:65">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6197:21" pos:end="6197:26">break;</break>

                <default pos:start="6199:17" pos:end="6199:24">default:</default>

                    <goto pos:start="6201:21" pos:end="6201:36">goto <name pos:start="6201:26" pos:end="6201:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="6205:15" pos:end="6209:13">else if <condition pos:start="6205:23" pos:end="6205:35">(<expr pos:start="6205:24" pos:end="6205:34"><name pos:start="6205:24" pos:end="6205:29"><name pos:start="6205:24" pos:end="6205:24">s</name><operator pos:start="6205:25" pos:end="6205:26">-&gt;</operator><name pos:start="6205:27" pos:end="6205:29">cpl</name></name> <operator pos:start="6205:31" pos:end="6205:32">!=</operator> <literal type="number" pos:start="6205:34" pos:end="6205:34">0</literal></expr>)</condition> <block pos:start="6205:37" pos:end="6209:13">{<block_content pos:start="6207:17" pos:end="6207:68">

                <expr_stmt pos:start="6207:17" pos:end="6207:68"><expr pos:start="6207:17" pos:end="6207:67"><call pos:start="6207:17" pos:end="6207:67"><name pos:start="6207:17" pos:end="6207:29">gen_exception</name><argument_list pos:start="6207:30" pos:end="6207:67">(<argument pos:start="6207:31" pos:end="6207:31"><expr pos:start="6207:31" pos:end="6207:31"><name pos:start="6207:31" pos:end="6207:31">s</name></expr></argument>, <argument pos:start="6207:34" pos:end="6207:43"><expr pos:start="6207:34" pos:end="6207:43"><name pos:start="6207:34" pos:end="6207:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6207:46" pos:end="6207:66"><expr pos:start="6207:46" pos:end="6207:66"><name pos:start="6207:46" pos:end="6207:53">pc_start</name> <operator pos:start="6207:55" pos:end="6207:55">-</operator> <name pos:start="6207:57" pos:end="6207:66"><name pos:start="6207:57" pos:end="6207:57">s</name><operator pos:start="6207:58" pos:end="6207:59">-&gt;</operator><name pos:start="6207:60" pos:end="6207:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6209:15" pos:end="6241:13">else <block pos:start="6209:20" pos:end="6241:13">{<block_content pos:start="6211:17" pos:end="6239:17">

                <expr_stmt pos:start="6211:17" pos:end="6213:91"><expr pos:start="6211:17" pos:end="6213:90"><call pos:start="6211:17" pos:end="6213:90"><name pos:start="6211:17" pos:end="6211:39">gen_svm_check_intercept</name><argument_list pos:start="6211:40" pos:end="6213:90">(<argument pos:start="6211:41" pos:end="6211:41"><expr pos:start="6211:41" pos:end="6211:41"><name pos:start="6211:41" pos:end="6211:41">s</name></expr></argument>, <argument pos:start="6211:44" pos:end="6211:51"><expr pos:start="6211:44" pos:end="6211:51"><name pos:start="6211:44" pos:end="6211:51">pc_start</name></expr></argument>,

                                        <argument pos:start="6213:41" pos:end="6213:89"><expr pos:start="6213:41" pos:end="6213:89"><ternary pos:start="6213:41" pos:end="6213:89"><condition pos:start="6213:41" pos:end="6213:47"><expr pos:start="6213:41" pos:end="6213:45"><name pos:start="6213:41" pos:end="6213:42">op</name><operator pos:start="6213:43" pos:end="6213:44">==</operator><literal type="number" pos:start="6213:45" pos:end="6213:45">2</literal></expr> ?</condition><then pos:start="6213:49" pos:end="6213:67"> <expr pos:start="6213:49" pos:end="6213:67"><name pos:start="6213:49" pos:end="6213:67">SVM_EXIT_GDTR_WRITE</name></expr> </then><else pos:start="6213:69" pos:end="6213:89">: <expr pos:start="6213:71" pos:end="6213:89"><name pos:start="6213:71" pos:end="6213:89">SVM_EXIT_IDTR_WRITE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6215:17" pos:end="6215:65"><expr pos:start="6215:17" pos:end="6215:64"><call pos:start="6215:17" pos:end="6215:64"><name pos:start="6215:17" pos:end="6215:29">gen_lea_modrm</name><argument_list pos:start="6215:30" pos:end="6215:64">(<argument pos:start="6215:31" pos:end="6215:31"><expr pos:start="6215:31" pos:end="6215:31"><name pos:start="6215:31" pos:end="6215:31">s</name></expr></argument>, <argument pos:start="6215:34" pos:end="6215:38"><expr pos:start="6215:34" pos:end="6215:38"><name pos:start="6215:34" pos:end="6215:38">modrm</name></expr></argument>, <argument pos:start="6215:41" pos:end="6215:49"><expr pos:start="6215:41" pos:end="6215:49"><operator pos:start="6215:41" pos:end="6215:41">&amp;</operator><name pos:start="6215:42" pos:end="6215:49">reg_addr</name></expr></argument>, <argument pos:start="6215:52" pos:end="6215:63"><expr pos:start="6215:52" pos:end="6215:63"><operator pos:start="6215:52" pos:end="6215:52">&amp;</operator><name pos:start="6215:53" pos:end="6215:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6217:17" pos:end="6217:56"><expr pos:start="6217:17" pos:end="6217:55"><call pos:start="6217:17" pos:end="6217:55"><name pos:start="6217:17" pos:end="6217:31">gen_op_ld_T1_A0</name><argument_list pos:start="6217:32" pos:end="6217:55">(<argument pos:start="6217:33" pos:end="6217:54"><expr pos:start="6217:33" pos:end="6217:54"><name pos:start="6217:33" pos:end="6217:39">OT_WORD</name> <operator pos:start="6217:41" pos:end="6217:41">+</operator> <name pos:start="6217:43" pos:end="6217:54"><name pos:start="6217:43" pos:end="6217:43">s</name><operator pos:start="6217:44" pos:end="6217:45">-&gt;</operator><name pos:start="6217:46" pos:end="6217:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6219:17" pos:end="6219:36"><expr pos:start="6219:17" pos:end="6219:35"><call pos:start="6219:17" pos:end="6219:35"><name pos:start="6219:17" pos:end="6219:29">gen_add_A0_im</name><argument_list pos:start="6219:30" pos:end="6219:35">(<argument pos:start="6219:31" pos:end="6219:31"><expr pos:start="6219:31" pos:end="6219:31"><name pos:start="6219:31" pos:end="6219:31">s</name></expr></argument>, <argument pos:start="6219:34" pos:end="6219:34"><expr pos:start="6219:34" pos:end="6219:34"><literal type="number" pos:start="6219:34" pos:end="6219:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6221:17" pos:end="6221:68"><expr pos:start="6221:17" pos:end="6221:67"><call pos:start="6221:17" pos:end="6221:67"><name pos:start="6221:17" pos:end="6221:31">gen_op_ld_T0_A0</name><argument_list pos:start="6221:32" pos:end="6221:67">(<argument pos:start="6221:33" pos:end="6221:66"><expr pos:start="6221:33" pos:end="6221:66"><call pos:start="6221:33" pos:end="6221:41"><name pos:start="6221:33" pos:end="6221:38">CODE64</name><argument_list pos:start="6221:39" pos:end="6221:41">(<argument pos:start="6221:40" pos:end="6221:40"><expr pos:start="6221:40" pos:end="6221:40"><name pos:start="6221:40" pos:end="6221:40">s</name></expr></argument>)</argument_list></call> <operator pos:start="6221:43" pos:end="6221:43">+</operator> <name pos:start="6221:45" pos:end="6221:51">OT_LONG</name> <operator pos:start="6221:53" pos:end="6221:53">+</operator> <name pos:start="6221:55" pos:end="6221:66"><name pos:start="6221:55" pos:end="6221:55">s</name><operator pos:start="6221:56" pos:end="6221:57">-&gt;</operator><name pos:start="6221:58" pos:end="6221:66">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6223:17" pos:end="6225:48"><if pos:start="6223:17" pos:end="6225:48">if <condition pos:start="6223:20" pos:end="6223:30">(<expr pos:start="6223:21" pos:end="6223:29"><operator pos:start="6223:21" pos:end="6223:21">!</operator><name pos:start="6223:22" pos:end="6223:29"><name pos:start="6223:22" pos:end="6223:22">s</name><operator pos:start="6223:23" pos:end="6223:24">-&gt;</operator><name pos:start="6223:25" pos:end="6223:29">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="6225:21" pos:end="6225:48"><block_content pos:start="6225:21" pos:end="6225:48">

                    <expr_stmt pos:start="6225:21" pos:end="6225:48"><expr pos:start="6225:21" pos:end="6225:47"><call pos:start="6225:21" pos:end="6225:47"><name pos:start="6225:21" pos:end="6225:37">gen_op_andl_T0_im</name><argument_list pos:start="6225:38" pos:end="6225:47">(<argument pos:start="6225:39" pos:end="6225:46"><expr pos:start="6225:39" pos:end="6225:46"><literal type="number" pos:start="6225:39" pos:end="6225:46">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="6227:17" pos:end="6239:17"><if pos:start="6227:17" pos:end="6233:17">if <condition pos:start="6227:20" pos:end="6227:28">(<expr pos:start="6227:21" pos:end="6227:27"><name pos:start="6227:21" pos:end="6227:22">op</name> <operator pos:start="6227:24" pos:end="6227:25">==</operator> <literal type="number" pos:start="6227:27" pos:end="6227:27">2</literal></expr>)</condition> <block pos:start="6227:30" pos:end="6233:17">{<block_content pos:start="6229:21" pos:end="6231:88">

                    <expr_stmt pos:start="6229:21" pos:end="6229:85"><expr pos:start="6229:21" pos:end="6229:84"><call pos:start="6229:21" pos:end="6229:84"><name pos:start="6229:21" pos:end="6229:33">tcg_gen_st_tl</name><argument_list pos:start="6229:34" pos:end="6229:84">(<argument pos:start="6229:35" pos:end="6229:42"><expr pos:start="6229:35" pos:end="6229:42"><name pos:start="6229:35" pos:end="6229:42"><name pos:start="6229:35" pos:end="6229:39">cpu_T</name><index pos:start="6229:40" pos:end="6229:42">[<expr pos:start="6229:41" pos:end="6229:41"><literal type="number" pos:start="6229:41" pos:end="6229:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6229:45" pos:end="6229:51"><expr pos:start="6229:45" pos:end="6229:51"><name pos:start="6229:45" pos:end="6229:51">cpu_env</name></expr></argument>, <argument pos:start="6229:54" pos:end="6229:83"><expr pos:start="6229:54" pos:end="6229:83"><call pos:start="6229:54" pos:end="6229:83"><name pos:start="6229:54" pos:end="6229:61">offsetof</name><argument_list pos:start="6229:62" pos:end="6229:83">(<argument pos:start="6229:63" pos:end="6229:73"><expr pos:start="6229:63" pos:end="6229:73"><name pos:start="6229:63" pos:end="6229:73">CPUX86State</name></expr></argument>,<argument pos:start="6229:75" pos:end="6229:82"><expr pos:start="6229:75" pos:end="6229:82"><name pos:start="6229:75" pos:end="6229:82"><name pos:start="6229:75" pos:end="6229:77">gdt</name><operator pos:start="6229:78" pos:end="6229:78">.</operator><name pos:start="6229:79" pos:end="6229:82">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6231:21" pos:end="6231:88"><expr pos:start="6231:21" pos:end="6231:87"><call pos:start="6231:21" pos:end="6231:87"><name pos:start="6231:21" pos:end="6231:35">tcg_gen_st32_tl</name><argument_list pos:start="6231:36" pos:end="6231:87">(<argument pos:start="6231:37" pos:end="6231:44"><expr pos:start="6231:37" pos:end="6231:44"><name pos:start="6231:37" pos:end="6231:44"><name pos:start="6231:37" pos:end="6231:41">cpu_T</name><index pos:start="6231:42" pos:end="6231:44">[<expr pos:start="6231:43" pos:end="6231:43"><literal type="number" pos:start="6231:43" pos:end="6231:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6231:47" pos:end="6231:53"><expr pos:start="6231:47" pos:end="6231:53"><name pos:start="6231:47" pos:end="6231:53">cpu_env</name></expr></argument>, <argument pos:start="6231:56" pos:end="6231:86"><expr pos:start="6231:56" pos:end="6231:86"><call pos:start="6231:56" pos:end="6231:86"><name pos:start="6231:56" pos:end="6231:63">offsetof</name><argument_list pos:start="6231:64" pos:end="6231:86">(<argument pos:start="6231:65" pos:end="6231:75"><expr pos:start="6231:65" pos:end="6231:75"><name pos:start="6231:65" pos:end="6231:75">CPUX86State</name></expr></argument>,<argument pos:start="6231:77" pos:end="6231:85"><expr pos:start="6231:77" pos:end="6231:85"><name pos:start="6231:77" pos:end="6231:85"><name pos:start="6231:77" pos:end="6231:79">gdt</name><operator pos:start="6231:80" pos:end="6231:80">.</operator><name pos:start="6231:81" pos:end="6231:85">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6233:19" pos:end="6239:17">else <block pos:start="6233:24" pos:end="6239:17">{<block_content pos:start="6235:21" pos:end="6237:88">

                    <expr_stmt pos:start="6235:21" pos:end="6235:85"><expr pos:start="6235:21" pos:end="6235:84"><call pos:start="6235:21" pos:end="6235:84"><name pos:start="6235:21" pos:end="6235:33">tcg_gen_st_tl</name><argument_list pos:start="6235:34" pos:end="6235:84">(<argument pos:start="6235:35" pos:end="6235:42"><expr pos:start="6235:35" pos:end="6235:42"><name pos:start="6235:35" pos:end="6235:42"><name pos:start="6235:35" pos:end="6235:39">cpu_T</name><index pos:start="6235:40" pos:end="6235:42">[<expr pos:start="6235:41" pos:end="6235:41"><literal type="number" pos:start="6235:41" pos:end="6235:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6235:45" pos:end="6235:51"><expr pos:start="6235:45" pos:end="6235:51"><name pos:start="6235:45" pos:end="6235:51">cpu_env</name></expr></argument>, <argument pos:start="6235:54" pos:end="6235:83"><expr pos:start="6235:54" pos:end="6235:83"><call pos:start="6235:54" pos:end="6235:83"><name pos:start="6235:54" pos:end="6235:61">offsetof</name><argument_list pos:start="6235:62" pos:end="6235:83">(<argument pos:start="6235:63" pos:end="6235:73"><expr pos:start="6235:63" pos:end="6235:73"><name pos:start="6235:63" pos:end="6235:73">CPUX86State</name></expr></argument>,<argument pos:start="6235:75" pos:end="6235:82"><expr pos:start="6235:75" pos:end="6235:82"><name pos:start="6235:75" pos:end="6235:82"><name pos:start="6235:75" pos:end="6235:77">idt</name><operator pos:start="6235:78" pos:end="6235:78">.</operator><name pos:start="6235:79" pos:end="6235:82">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6237:21" pos:end="6237:88"><expr pos:start="6237:21" pos:end="6237:87"><call pos:start="6237:21" pos:end="6237:87"><name pos:start="6237:21" pos:end="6237:35">tcg_gen_st32_tl</name><argument_list pos:start="6237:36" pos:end="6237:87">(<argument pos:start="6237:37" pos:end="6237:44"><expr pos:start="6237:37" pos:end="6237:44"><name pos:start="6237:37" pos:end="6237:44"><name pos:start="6237:37" pos:end="6237:41">cpu_T</name><index pos:start="6237:42" pos:end="6237:44">[<expr pos:start="6237:43" pos:end="6237:43"><literal type="number" pos:start="6237:43" pos:end="6237:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6237:47" pos:end="6237:53"><expr pos:start="6237:47" pos:end="6237:53"><name pos:start="6237:47" pos:end="6237:53">cpu_env</name></expr></argument>, <argument pos:start="6237:56" pos:end="6237:86"><expr pos:start="6237:56" pos:end="6237:86"><call pos:start="6237:56" pos:end="6237:86"><name pos:start="6237:56" pos:end="6237:63">offsetof</name><argument_list pos:start="6237:64" pos:end="6237:86">(<argument pos:start="6237:65" pos:end="6237:75"><expr pos:start="6237:65" pos:end="6237:75"><name pos:start="6237:65" pos:end="6237:75">CPUX86State</name></expr></argument>,<argument pos:start="6237:77" pos:end="6237:85"><expr pos:start="6237:77" pos:end="6237:85"><name pos:start="6237:77" pos:end="6237:85"><name pos:start="6237:77" pos:end="6237:79">idt</name><operator pos:start="6237:80" pos:end="6237:80">.</operator><name pos:start="6237:81" pos:end="6237:85">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6243:13" pos:end="6243:18">break;</break>

        <case pos:start="6245:9" pos:end="6245:15">case <expr pos:start="6245:14" pos:end="6245:14"><literal type="number" pos:start="6245:14" pos:end="6245:14">4</literal></expr>:</case> <comment type="block" pos:start="6245:17" pos:end="6245:26">/* smsw */</comment>

            <expr_stmt pos:start="6247:13" pos:end="6247:68"><expr pos:start="6247:13" pos:end="6247:67"><call pos:start="6247:13" pos:end="6247:67"><name pos:start="6247:13" pos:end="6247:35">gen_svm_check_intercept</name><argument_list pos:start="6247:36" pos:end="6247:67">(<argument pos:start="6247:37" pos:end="6247:37"><expr pos:start="6247:37" pos:end="6247:37"><name pos:start="6247:37" pos:end="6247:37">s</name></expr></argument>, <argument pos:start="6247:40" pos:end="6247:47"><expr pos:start="6247:40" pos:end="6247:47"><name pos:start="6247:40" pos:end="6247:47">pc_start</name></expr></argument>, <argument pos:start="6247:50" pos:end="6247:66"><expr pos:start="6247:50" pos:end="6247:66"><name pos:start="6247:50" pos:end="6247:66">SVM_EXIT_READ_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6249:13" pos:end="6249:77"><expr pos:start="6249:13" pos:end="6249:76"><call pos:start="6249:13" pos:end="6249:76"><name pos:start="6249:13" pos:end="6249:28">tcg_gen_ld32u_tl</name><argument_list pos:start="6249:29" pos:end="6249:76">(<argument pos:start="6249:30" pos:end="6249:37"><expr pos:start="6249:30" pos:end="6249:37"><name pos:start="6249:30" pos:end="6249:37"><name pos:start="6249:30" pos:end="6249:34">cpu_T</name><index pos:start="6249:35" pos:end="6249:37">[<expr pos:start="6249:36" pos:end="6249:36"><literal type="number" pos:start="6249:36" pos:end="6249:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6249:40" pos:end="6249:46"><expr pos:start="6249:40" pos:end="6249:46"><name pos:start="6249:40" pos:end="6249:46">cpu_env</name></expr></argument>, <argument pos:start="6249:49" pos:end="6249:75"><expr pos:start="6249:49" pos:end="6249:75"><call pos:start="6249:49" pos:end="6249:75"><name pos:start="6249:49" pos:end="6249:56">offsetof</name><argument_list pos:start="6249:57" pos:end="6249:75">(<argument pos:start="6249:58" pos:end="6249:68"><expr pos:start="6249:58" pos:end="6249:68"><name pos:start="6249:58" pos:end="6249:68">CPUX86State</name></expr></argument>,<argument pos:start="6249:70" pos:end="6249:74"><expr pos:start="6249:70" pos:end="6249:74"><name pos:start="6249:70" pos:end="6249:74"><name pos:start="6249:70" pos:end="6249:71">cr</name><index pos:start="6249:72" pos:end="6249:74">[<expr pos:start="6249:73" pos:end="6249:73"><literal type="number" pos:start="6249:73" pos:end="6249:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6251:13" pos:end="6251:58"><expr pos:start="6251:13" pos:end="6251:57"><call pos:start="6251:13" pos:end="6251:57"><name pos:start="6251:13" pos:end="6251:26">gen_ldst_modrm</name><argument_list pos:start="6251:27" pos:end="6251:57">(<argument pos:start="6251:28" pos:end="6251:28"><expr pos:start="6251:28" pos:end="6251:28"><name pos:start="6251:28" pos:end="6251:28">s</name></expr></argument>, <argument pos:start="6251:31" pos:end="6251:35"><expr pos:start="6251:31" pos:end="6251:35"><name pos:start="6251:31" pos:end="6251:35">modrm</name></expr></argument>, <argument pos:start="6251:38" pos:end="6251:44"><expr pos:start="6251:38" pos:end="6251:44"><name pos:start="6251:38" pos:end="6251:44">OT_WORD</name></expr></argument>, <argument pos:start="6251:47" pos:end="6251:53"><expr pos:start="6251:47" pos:end="6251:53"><name pos:start="6251:47" pos:end="6251:53">OR_TMP0</name></expr></argument>, <argument pos:start="6251:56" pos:end="6251:56"><expr pos:start="6251:56" pos:end="6251:56"><literal type="number" pos:start="6251:56" pos:end="6251:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6253:13" pos:end="6253:18">break;</break>

        <case pos:start="6255:9" pos:end="6255:15">case <expr pos:start="6255:14" pos:end="6255:14"><literal type="number" pos:start="6255:14" pos:end="6255:14">6</literal></expr>:</case> <comment type="block" pos:start="6255:17" pos:end="6255:26">/* lmsw */</comment>

            <if_stmt pos:start="6257:13" pos:end="6273:13"><if pos:start="6257:13" pos:end="6261:13">if <condition pos:start="6257:16" pos:end="6257:28">(<expr pos:start="6257:17" pos:end="6257:27"><name pos:start="6257:17" pos:end="6257:22"><name pos:start="6257:17" pos:end="6257:17">s</name><operator pos:start="6257:18" pos:end="6257:19">-&gt;</operator><name pos:start="6257:20" pos:end="6257:22">cpl</name></name> <operator pos:start="6257:24" pos:end="6257:25">!=</operator> <literal type="number" pos:start="6257:27" pos:end="6257:27">0</literal></expr>)</condition> <block pos:start="6257:30" pos:end="6261:13">{<block_content pos:start="6259:17" pos:end="6259:68">

                <expr_stmt pos:start="6259:17" pos:end="6259:68"><expr pos:start="6259:17" pos:end="6259:67"><call pos:start="6259:17" pos:end="6259:67"><name pos:start="6259:17" pos:end="6259:29">gen_exception</name><argument_list pos:start="6259:30" pos:end="6259:67">(<argument pos:start="6259:31" pos:end="6259:31"><expr pos:start="6259:31" pos:end="6259:31"><name pos:start="6259:31" pos:end="6259:31">s</name></expr></argument>, <argument pos:start="6259:34" pos:end="6259:43"><expr pos:start="6259:34" pos:end="6259:43"><name pos:start="6259:34" pos:end="6259:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6259:46" pos:end="6259:66"><expr pos:start="6259:46" pos:end="6259:66"><name pos:start="6259:46" pos:end="6259:53">pc_start</name> <operator pos:start="6259:55" pos:end="6259:55">-</operator> <name pos:start="6259:57" pos:end="6259:66"><name pos:start="6259:57" pos:end="6259:57">s</name><operator pos:start="6259:58" pos:end="6259:59">-&gt;</operator><name pos:start="6259:60" pos:end="6259:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6261:15" pos:end="6273:13">else <block pos:start="6261:20" pos:end="6273:13">{<block_content pos:start="6263:17" pos:end="6271:27">

                <expr_stmt pos:start="6263:17" pos:end="6263:73"><expr pos:start="6263:17" pos:end="6263:72"><call pos:start="6263:17" pos:end="6263:72"><name pos:start="6263:17" pos:end="6263:39">gen_svm_check_intercept</name><argument_list pos:start="6263:40" pos:end="6263:72">(<argument pos:start="6263:41" pos:end="6263:41"><expr pos:start="6263:41" pos:end="6263:41"><name pos:start="6263:41" pos:end="6263:41">s</name></expr></argument>, <argument pos:start="6263:44" pos:end="6263:51"><expr pos:start="6263:44" pos:end="6263:51"><name pos:start="6263:44" pos:end="6263:51">pc_start</name></expr></argument>, <argument pos:start="6263:54" pos:end="6263:71"><expr pos:start="6263:54" pos:end="6263:71"><name pos:start="6263:54" pos:end="6263:71">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6265:17" pos:end="6265:62"><expr pos:start="6265:17" pos:end="6265:61"><call pos:start="6265:17" pos:end="6265:61"><name pos:start="6265:17" pos:end="6265:30">gen_ldst_modrm</name><argument_list pos:start="6265:31" pos:end="6265:61">(<argument pos:start="6265:32" pos:end="6265:32"><expr pos:start="6265:32" pos:end="6265:32"><name pos:start="6265:32" pos:end="6265:32">s</name></expr></argument>, <argument pos:start="6265:35" pos:end="6265:39"><expr pos:start="6265:35" pos:end="6265:39"><name pos:start="6265:35" pos:end="6265:39">modrm</name></expr></argument>, <argument pos:start="6265:42" pos:end="6265:48"><expr pos:start="6265:42" pos:end="6265:48"><name pos:start="6265:42" pos:end="6265:48">OT_WORD</name></expr></argument>, <argument pos:start="6265:51" pos:end="6265:57"><expr pos:start="6265:51" pos:end="6265:57"><name pos:start="6265:51" pos:end="6265:57">OR_TMP0</name></expr></argument>, <argument pos:start="6265:60" pos:end="6265:60"><expr pos:start="6265:60" pos:end="6265:60"><literal type="number" pos:start="6265:60" pos:end="6265:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6267:17" pos:end="6267:42"><expr pos:start="6267:17" pos:end="6267:41"><call pos:start="6267:17" pos:end="6267:41"><name pos:start="6267:17" pos:end="6267:31">gen_helper_lmsw</name><argument_list pos:start="6267:32" pos:end="6267:41">(<argument pos:start="6267:33" pos:end="6267:40"><expr pos:start="6267:33" pos:end="6267:40"><name pos:start="6267:33" pos:end="6267:40"><name pos:start="6267:33" pos:end="6267:37">cpu_T</name><index pos:start="6267:38" pos:end="6267:40">[<expr pos:start="6267:39" pos:end="6267:39"><literal type="number" pos:start="6267:39" pos:end="6267:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6269:17" pos:end="6269:47"><expr pos:start="6269:17" pos:end="6269:46"><call pos:start="6269:17" pos:end="6269:46"><name pos:start="6269:17" pos:end="6269:26">gen_jmp_im</name><argument_list pos:start="6269:27" pos:end="6269:46">(<argument pos:start="6269:28" pos:end="6269:45"><expr pos:start="6269:28" pos:end="6269:45"><name pos:start="6269:28" pos:end="6269:32"><name pos:start="6269:28" pos:end="6269:28">s</name><operator pos:start="6269:29" pos:end="6269:30">-&gt;</operator><name pos:start="6269:31" pos:end="6269:32">pc</name></name> <operator pos:start="6269:34" pos:end="6269:34">-</operator> <name pos:start="6269:36" pos:end="6269:45"><name pos:start="6269:36" pos:end="6269:36">s</name><operator pos:start="6269:37" pos:end="6269:38">-&gt;</operator><name pos:start="6269:39" pos:end="6269:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6271:17" pos:end="6271:27"><expr pos:start="6271:17" pos:end="6271:26"><call pos:start="6271:17" pos:end="6271:26"><name pos:start="6271:17" pos:end="6271:23">gen_eob</name><argument_list pos:start="6271:24" pos:end="6271:26">(<argument pos:start="6271:25" pos:end="6271:25"><expr pos:start="6271:25" pos:end="6271:25"><name pos:start="6271:25" pos:end="6271:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6275:13" pos:end="6275:18">break;</break>

        <case pos:start="6277:9" pos:end="6277:15">case <expr pos:start="6277:14" pos:end="6277:14"><literal type="number" pos:start="6277:14" pos:end="6277:14">7</literal></expr>:</case> <comment type="block" pos:start="6277:17" pos:end="6277:28">/* invlpg */</comment>

            <if_stmt pos:start="6279:13" pos:end="6329:13"><if pos:start="6279:13" pos:end="6283:13">if <condition pos:start="6279:16" pos:end="6279:28">(<expr pos:start="6279:17" pos:end="6279:27"><name pos:start="6279:17" pos:end="6279:22"><name pos:start="6279:17" pos:end="6279:17">s</name><operator pos:start="6279:18" pos:end="6279:19">-&gt;</operator><name pos:start="6279:20" pos:end="6279:22">cpl</name></name> <operator pos:start="6279:24" pos:end="6279:25">!=</operator> <literal type="number" pos:start="6279:27" pos:end="6279:27">0</literal></expr>)</condition> <block pos:start="6279:30" pos:end="6283:13">{<block_content pos:start="6281:17" pos:end="6281:68">

                <expr_stmt pos:start="6281:17" pos:end="6281:68"><expr pos:start="6281:17" pos:end="6281:67"><call pos:start="6281:17" pos:end="6281:67"><name pos:start="6281:17" pos:end="6281:29">gen_exception</name><argument_list pos:start="6281:30" pos:end="6281:67">(<argument pos:start="6281:31" pos:end="6281:31"><expr pos:start="6281:31" pos:end="6281:31"><name pos:start="6281:31" pos:end="6281:31">s</name></expr></argument>, <argument pos:start="6281:34" pos:end="6281:43"><expr pos:start="6281:34" pos:end="6281:43"><name pos:start="6281:34" pos:end="6281:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6281:46" pos:end="6281:66"><expr pos:start="6281:46" pos:end="6281:66"><name pos:start="6281:46" pos:end="6281:53">pc_start</name> <operator pos:start="6281:55" pos:end="6281:55">-</operator> <name pos:start="6281:57" pos:end="6281:66"><name pos:start="6281:57" pos:end="6281:57">s</name><operator pos:start="6281:58" pos:end="6281:59">-&gt;</operator><name pos:start="6281:60" pos:end="6281:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6283:15" pos:end="6329:13">else <block pos:start="6283:20" pos:end="6329:13">{<block_content pos:start="6285:17" pos:end="6327:17">

                <if_stmt pos:start="6285:17" pos:end="6327:17"><if pos:start="6285:17" pos:end="6311:17">if <condition pos:start="6285:20" pos:end="6285:29">(<expr pos:start="6285:21" pos:end="6285:28"><name pos:start="6285:21" pos:end="6285:23">mod</name> <operator pos:start="6285:25" pos:end="6285:26">==</operator> <literal type="number" pos:start="6285:28" pos:end="6285:28">3</literal></expr>)</condition> <block pos:start="6285:31" pos:end="6311:17">{<block_content pos:start="6289:21" pos:end="6309:21">

<cpp:ifdef pos:start="6287:1" pos:end="6287:20">#<cpp:directive pos:start="6287:2" pos:end="6287:6">ifdef</cpp:directive> <name pos:start="6287:8" pos:end="6287:20">TARGET_X86_64</name></cpp:ifdef>

                    <if_stmt pos:start="6289:21" pos:end="6309:21"><if pos:start="6289:21" pos:end="6301:21">if <condition pos:start="6289:24" pos:end="6289:45">(<expr pos:start="6289:25" pos:end="6289:44"><call pos:start="6289:25" pos:end="6289:33"><name pos:start="6289:25" pos:end="6289:30">CODE64</name><argument_list pos:start="6289:31" pos:end="6289:33">(<argument pos:start="6289:32" pos:end="6289:32"><expr pos:start="6289:32" pos:end="6289:32"><name pos:start="6289:32" pos:end="6289:32">s</name></expr></argument>)</argument_list></call> <operator pos:start="6289:35" pos:end="6289:36">&amp;&amp;</operator> <name pos:start="6289:38" pos:end="6289:39">rm</name> <operator pos:start="6289:41" pos:end="6289:42">==</operator> <literal type="number" pos:start="6289:44" pos:end="6289:44">0</literal></expr>)</condition> <block pos:start="6289:47" pos:end="6301:21">{<block_content pos:start="6293:25" pos:end="6299:93">

                        <comment type="block" pos:start="6291:25" pos:end="6291:36">/* swapgs */</comment>

                        <expr_stmt pos:start="6293:25" pos:end="6293:96"><expr pos:start="6293:25" pos:end="6293:95"><call pos:start="6293:25" pos:end="6293:95"><name pos:start="6293:25" pos:end="6293:37">tcg_gen_ld_tl</name><argument_list pos:start="6293:38" pos:end="6293:95">(<argument pos:start="6293:39" pos:end="6293:46"><expr pos:start="6293:39" pos:end="6293:46"><name pos:start="6293:39" pos:end="6293:46"><name pos:start="6293:39" pos:end="6293:43">cpu_T</name><index pos:start="6293:44" pos:end="6293:46">[<expr pos:start="6293:45" pos:end="6293:45"><literal type="number" pos:start="6293:45" pos:end="6293:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6293:49" pos:end="6293:55"><expr pos:start="6293:49" pos:end="6293:55"><name pos:start="6293:49" pos:end="6293:55">cpu_env</name></expr></argument>, <argument pos:start="6293:58" pos:end="6293:94"><expr pos:start="6293:58" pos:end="6293:94"><call pos:start="6293:58" pos:end="6293:94"><name pos:start="6293:58" pos:end="6293:65">offsetof</name><argument_list pos:start="6293:66" pos:end="6293:94">(<argument pos:start="6293:67" pos:end="6293:77"><expr pos:start="6293:67" pos:end="6293:77"><name pos:start="6293:67" pos:end="6293:77">CPUX86State</name></expr></argument>,<argument pos:start="6293:79" pos:end="6293:93"><expr pos:start="6293:79" pos:end="6293:93"><name pos:start="6293:79" pos:end="6293:88"><name pos:start="6293:79" pos:end="6293:82">segs</name><index pos:start="6293:83" pos:end="6293:88">[<expr pos:start="6293:84" pos:end="6293:87"><name pos:start="6293:84" pos:end="6293:87">R_GS</name></expr>]</index></name><operator pos:start="6293:89" pos:end="6293:89">.</operator><name pos:start="6293:90" pos:end="6293:93">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6295:25" pos:end="6295:93"><expr pos:start="6295:25" pos:end="6295:92"><call pos:start="6295:25" pos:end="6295:92"><name pos:start="6295:25" pos:end="6295:37">tcg_gen_ld_tl</name><argument_list pos:start="6295:38" pos:end="6295:92">(<argument pos:start="6295:39" pos:end="6295:46"><expr pos:start="6295:39" pos:end="6295:46"><name pos:start="6295:39" pos:end="6295:46"><name pos:start="6295:39" pos:end="6295:43">cpu_T</name><index pos:start="6295:44" pos:end="6295:46">[<expr pos:start="6295:45" pos:end="6295:45"><literal type="number" pos:start="6295:45" pos:end="6295:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6295:49" pos:end="6295:55"><expr pos:start="6295:49" pos:end="6295:55"><name pos:start="6295:49" pos:end="6295:55">cpu_env</name></expr></argument>, <argument pos:start="6295:58" pos:end="6295:91"><expr pos:start="6295:58" pos:end="6295:91"><call pos:start="6295:58" pos:end="6295:91"><name pos:start="6295:58" pos:end="6295:65">offsetof</name><argument_list pos:start="6295:66" pos:end="6295:91">(<argument pos:start="6295:67" pos:end="6295:77"><expr pos:start="6295:67" pos:end="6295:77"><name pos:start="6295:67" pos:end="6295:77">CPUX86State</name></expr></argument>,<argument pos:start="6295:79" pos:end="6295:90"><expr pos:start="6295:79" pos:end="6295:90"><name pos:start="6295:79" pos:end="6295:90">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6297:25" pos:end="6297:96"><expr pos:start="6297:25" pos:end="6297:95"><call pos:start="6297:25" pos:end="6297:95"><name pos:start="6297:25" pos:end="6297:37">tcg_gen_st_tl</name><argument_list pos:start="6297:38" pos:end="6297:95">(<argument pos:start="6297:39" pos:end="6297:46"><expr pos:start="6297:39" pos:end="6297:46"><name pos:start="6297:39" pos:end="6297:46"><name pos:start="6297:39" pos:end="6297:43">cpu_T</name><index pos:start="6297:44" pos:end="6297:46">[<expr pos:start="6297:45" pos:end="6297:45"><literal type="number" pos:start="6297:45" pos:end="6297:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6297:49" pos:end="6297:55"><expr pos:start="6297:49" pos:end="6297:55"><name pos:start="6297:49" pos:end="6297:55">cpu_env</name></expr></argument>, <argument pos:start="6297:58" pos:end="6297:94"><expr pos:start="6297:58" pos:end="6297:94"><call pos:start="6297:58" pos:end="6297:94"><name pos:start="6297:58" pos:end="6297:65">offsetof</name><argument_list pos:start="6297:66" pos:end="6297:94">(<argument pos:start="6297:67" pos:end="6297:77"><expr pos:start="6297:67" pos:end="6297:77"><name pos:start="6297:67" pos:end="6297:77">CPUX86State</name></expr></argument>,<argument pos:start="6297:79" pos:end="6297:93"><expr pos:start="6297:79" pos:end="6297:93"><name pos:start="6297:79" pos:end="6297:88"><name pos:start="6297:79" pos:end="6297:82">segs</name><index pos:start="6297:83" pos:end="6297:88">[<expr pos:start="6297:84" pos:end="6297:87"><name pos:start="6297:84" pos:end="6297:87">R_GS</name></expr>]</index></name><operator pos:start="6297:89" pos:end="6297:89">.</operator><name pos:start="6297:90" pos:end="6297:93">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6299:25" pos:end="6299:93"><expr pos:start="6299:25" pos:end="6299:92"><call pos:start="6299:25" pos:end="6299:92"><name pos:start="6299:25" pos:end="6299:37">tcg_gen_st_tl</name><argument_list pos:start="6299:38" pos:end="6299:92">(<argument pos:start="6299:39" pos:end="6299:46"><expr pos:start="6299:39" pos:end="6299:46"><name pos:start="6299:39" pos:end="6299:46"><name pos:start="6299:39" pos:end="6299:43">cpu_T</name><index pos:start="6299:44" pos:end="6299:46">[<expr pos:start="6299:45" pos:end="6299:45"><literal type="number" pos:start="6299:45" pos:end="6299:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6299:49" pos:end="6299:55"><expr pos:start="6299:49" pos:end="6299:55"><name pos:start="6299:49" pos:end="6299:55">cpu_env</name></expr></argument>, <argument pos:start="6299:58" pos:end="6299:91"><expr pos:start="6299:58" pos:end="6299:91"><call pos:start="6299:58" pos:end="6299:91"><name pos:start="6299:58" pos:end="6299:65">offsetof</name><argument_list pos:start="6299:66" pos:end="6299:91">(<argument pos:start="6299:67" pos:end="6299:77"><expr pos:start="6299:67" pos:end="6299:77"><name pos:start="6299:67" pos:end="6299:77">CPUX86State</name></expr></argument>,<argument pos:start="6299:79" pos:end="6299:90"><expr pos:start="6299:79" pos:end="6299:90"><name pos:start="6299:79" pos:end="6299:90">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="6301:23" pos:end="6309:21">else

<cpp:endif pos:start="6303:1" pos:end="6303:6">#<cpp:directive pos:start="6303:2" pos:end="6303:6">endif</cpp:directive></cpp:endif>

                    <block pos:start="6305:21" pos:end="6309:21">{<block_content pos:start="6307:25" pos:end="6307:40">

                        <goto pos:start="6307:25" pos:end="6307:40">goto <name pos:start="6307:30" pos:end="6307:39">illegal_op</name>;</goto>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="6311:19" pos:end="6327:17">else <block pos:start="6311:24" pos:end="6327:17">{<block_content pos:start="6313:21" pos:end="6325:31">

                    <if_stmt pos:start="6313:21" pos:end="6315:51"><if pos:start="6313:21" pos:end="6315:51">if <condition pos:start="6313:24" pos:end="6313:50">(<expr pos:start="6313:25" pos:end="6313:49"><name pos:start="6313:25" pos:end="6313:32"><name pos:start="6313:25" pos:end="6313:25">s</name><operator pos:start="6313:26" pos:end="6313:27">-&gt;</operator><name pos:start="6313:28" pos:end="6313:32">cc_op</name></name> <operator pos:start="6313:34" pos:end="6313:35">!=</operator> <name pos:start="6313:37" pos:end="6313:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6315:25" pos:end="6315:51"><block_content pos:start="6315:25" pos:end="6315:51">

                        <expr_stmt pos:start="6315:25" pos:end="6315:51"><expr pos:start="6315:25" pos:end="6315:50"><call pos:start="6315:25" pos:end="6315:50"><name pos:start="6315:25" pos:end="6315:40">gen_op_set_cc_op</name><argument_list pos:start="6315:41" pos:end="6315:50">(<argument pos:start="6315:42" pos:end="6315:49"><expr pos:start="6315:42" pos:end="6315:49"><name pos:start="6315:42" pos:end="6315:49"><name pos:start="6315:42" pos:end="6315:42">s</name><operator pos:start="6315:43" pos:end="6315:44">-&gt;</operator><name pos:start="6315:45" pos:end="6315:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6317:21" pos:end="6317:54"><expr pos:start="6317:21" pos:end="6317:53"><call pos:start="6317:21" pos:end="6317:53"><name pos:start="6317:21" pos:end="6317:30">gen_jmp_im</name><argument_list pos:start="6317:31" pos:end="6317:53">(<argument pos:start="6317:32" pos:end="6317:52"><expr pos:start="6317:32" pos:end="6317:52"><name pos:start="6317:32" pos:end="6317:39">pc_start</name> <operator pos:start="6317:41" pos:end="6317:41">-</operator> <name pos:start="6317:43" pos:end="6317:52"><name pos:start="6317:43" pos:end="6317:43">s</name><operator pos:start="6317:44" pos:end="6317:45">-&gt;</operator><name pos:start="6317:46" pos:end="6317:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6319:21" pos:end="6319:69"><expr pos:start="6319:21" pos:end="6319:68"><call pos:start="6319:21" pos:end="6319:68"><name pos:start="6319:21" pos:end="6319:33">gen_lea_modrm</name><argument_list pos:start="6319:34" pos:end="6319:68">(<argument pos:start="6319:35" pos:end="6319:35"><expr pos:start="6319:35" pos:end="6319:35"><name pos:start="6319:35" pos:end="6319:35">s</name></expr></argument>, <argument pos:start="6319:38" pos:end="6319:42"><expr pos:start="6319:38" pos:end="6319:42"><name pos:start="6319:38" pos:end="6319:42">modrm</name></expr></argument>, <argument pos:start="6319:45" pos:end="6319:53"><expr pos:start="6319:45" pos:end="6319:53"><operator pos:start="6319:45" pos:end="6319:45">&amp;</operator><name pos:start="6319:46" pos:end="6319:53">reg_addr</name></expr></argument>, <argument pos:start="6319:56" pos:end="6319:67"><expr pos:start="6319:56" pos:end="6319:67"><operator pos:start="6319:56" pos:end="6319:56">&amp;</operator><name pos:start="6319:57" pos:end="6319:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6321:21" pos:end="6321:46"><expr pos:start="6321:21" pos:end="6321:45"><call pos:start="6321:21" pos:end="6321:45"><name pos:start="6321:21" pos:end="6321:37">gen_helper_invlpg</name><argument_list pos:start="6321:38" pos:end="6321:45">(<argument pos:start="6321:39" pos:end="6321:44"><expr pos:start="6321:39" pos:end="6321:44"><name pos:start="6321:39" pos:end="6321:44">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6323:21" pos:end="6323:51"><expr pos:start="6323:21" pos:end="6323:50"><call pos:start="6323:21" pos:end="6323:50"><name pos:start="6323:21" pos:end="6323:30">gen_jmp_im</name><argument_list pos:start="6323:31" pos:end="6323:50">(<argument pos:start="6323:32" pos:end="6323:49"><expr pos:start="6323:32" pos:end="6323:49"><name pos:start="6323:32" pos:end="6323:36"><name pos:start="6323:32" pos:end="6323:32">s</name><operator pos:start="6323:33" pos:end="6323:34">-&gt;</operator><name pos:start="6323:35" pos:end="6323:36">pc</name></name> <operator pos:start="6323:38" pos:end="6323:38">-</operator> <name pos:start="6323:40" pos:end="6323:49"><name pos:start="6323:40" pos:end="6323:40">s</name><operator pos:start="6323:41" pos:end="6323:42">-&gt;</operator><name pos:start="6323:43" pos:end="6323:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6325:21" pos:end="6325:31"><expr pos:start="6325:21" pos:end="6325:30"><call pos:start="6325:21" pos:end="6325:30"><name pos:start="6325:21" pos:end="6325:27">gen_eob</name><argument_list pos:start="6325:28" pos:end="6325:30">(<argument pos:start="6325:29" pos:end="6325:29"><expr pos:start="6325:29" pos:end="6325:29"><name pos:start="6325:29" pos:end="6325:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6331:13" pos:end="6331:18">break;</break>

        <default pos:start="6333:9" pos:end="6333:16">default:</default>

            <goto pos:start="6335:13" pos:end="6335:28">goto <name pos:start="6335:18" pos:end="6335:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="6339:9" pos:end="6339:14">break;</break>

    <case pos:start="6341:5" pos:end="6341:15">case <expr pos:start="6341:10" pos:end="6341:14"><literal type="number" pos:start="6341:10" pos:end="6341:14">0x108</literal></expr>:</case> <comment type="block" pos:start="6341:17" pos:end="6341:26">/* invd */</comment>

    <case pos:start="6343:5" pos:end="6343:15">case <expr pos:start="6343:10" pos:end="6343:14"><literal type="number" pos:start="6343:10" pos:end="6343:14">0x109</literal></expr>:</case> <comment type="block" pos:start="6343:17" pos:end="6343:28">/* wbinvd */</comment>

        <if_stmt pos:start="6345:9" pos:end="6355:9"><if pos:start="6345:9" pos:end="6349:9">if <condition pos:start="6345:12" pos:end="6345:24">(<expr pos:start="6345:13" pos:end="6345:23"><name pos:start="6345:13" pos:end="6345:18"><name pos:start="6345:13" pos:end="6345:13">s</name><operator pos:start="6345:14" pos:end="6345:15">-&gt;</operator><name pos:start="6345:16" pos:end="6345:18">cpl</name></name> <operator pos:start="6345:20" pos:end="6345:21">!=</operator> <literal type="number" pos:start="6345:23" pos:end="6345:23">0</literal></expr>)</condition> <block pos:start="6345:26" pos:end="6349:9">{<block_content pos:start="6347:13" pos:end="6347:64">

            <expr_stmt pos:start="6347:13" pos:end="6347:64"><expr pos:start="6347:13" pos:end="6347:63"><call pos:start="6347:13" pos:end="6347:63"><name pos:start="6347:13" pos:end="6347:25">gen_exception</name><argument_list pos:start="6347:26" pos:end="6347:63">(<argument pos:start="6347:27" pos:end="6347:27"><expr pos:start="6347:27" pos:end="6347:27"><name pos:start="6347:27" pos:end="6347:27">s</name></expr></argument>, <argument pos:start="6347:30" pos:end="6347:39"><expr pos:start="6347:30" pos:end="6347:39"><name pos:start="6347:30" pos:end="6347:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6347:42" pos:end="6347:62"><expr pos:start="6347:42" pos:end="6347:62"><name pos:start="6347:42" pos:end="6347:49">pc_start</name> <operator pos:start="6347:51" pos:end="6347:51">-</operator> <name pos:start="6347:53" pos:end="6347:62"><name pos:start="6347:53" pos:end="6347:53">s</name><operator pos:start="6347:54" pos:end="6347:55">-&gt;</operator><name pos:start="6347:56" pos:end="6347:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6349:11" pos:end="6355:9">else <block pos:start="6349:16" pos:end="6355:9">{<block_content pos:start="6351:13" pos:end="6351:92">

            <expr_stmt pos:start="6351:13" pos:end="6351:92"><expr pos:start="6351:13" pos:end="6351:91"><call pos:start="6351:13" pos:end="6351:91"><name pos:start="6351:13" pos:end="6351:35">gen_svm_check_intercept</name><argument_list pos:start="6351:36" pos:end="6351:91">(<argument pos:start="6351:37" pos:end="6351:37"><expr pos:start="6351:37" pos:end="6351:37"><name pos:start="6351:37" pos:end="6351:37">s</name></expr></argument>, <argument pos:start="6351:40" pos:end="6351:47"><expr pos:start="6351:40" pos:end="6351:47"><name pos:start="6351:40" pos:end="6351:47">pc_start</name></expr></argument>, <argument pos:start="6351:50" pos:end="6351:90"><expr pos:start="6351:50" pos:end="6351:90"><ternary pos:start="6351:50" pos:end="6351:90"><condition pos:start="6351:50" pos:end="6351:58"><expr pos:start="6351:50" pos:end="6351:56"><operator pos:start="6351:50" pos:end="6351:50">(</operator><name pos:start="6351:51" pos:end="6351:51">b</name> <operator pos:start="6351:53" pos:end="6351:53">&amp;</operator> <literal type="number" pos:start="6351:55" pos:end="6351:55">2</literal><operator pos:start="6351:56" pos:end="6351:56">)</operator></expr> ?</condition><then pos:start="6351:60" pos:end="6351:72"> <expr pos:start="6351:60" pos:end="6351:72"><name pos:start="6351:60" pos:end="6351:72">SVM_EXIT_INVD</name></expr> </then><else pos:start="6351:74" pos:end="6351:90">: <expr pos:start="6351:76" pos:end="6351:90"><name pos:start="6351:76" pos:end="6351:90">SVM_EXIT_WBINVD</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6353:13" pos:end="6353:31">/* nothing to do */</comment>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6357:9" pos:end="6357:14">break;</break>

    <case pos:start="6359:5" pos:end="6362:0">case <expr pos:start="6359:10" pos:end="6359:13"><literal type="number" pos:start="6359:10" pos:end="6359:13">0x63</literal></expr>:</case> <comment type="block" pos:start="6359:16" pos:end="6359:44">/* arpl or movslS (x86_64) */</comment>

<cpp:ifdef pos:start="6361:1" pos:end="6361:20">#<cpp:directive pos:start="6361:2" pos:end="6361:6">ifdef</cpp:directive> <name pos:start="6361:8" pos:end="6361:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="6363:9" pos:end="6505:9"><if pos:start="6363:9" pos:end="6413:9">if <condition pos:start="6363:12" pos:end="6363:22">(<expr pos:start="6363:13" pos:end="6363:21"><call pos:start="6363:13" pos:end="6363:21"><name pos:start="6363:13" pos:end="6363:18">CODE64</name><argument_list pos:start="6363:19" pos:end="6363:21">(<argument pos:start="6363:20" pos:end="6363:20"><expr pos:start="6363:20" pos:end="6363:20"><name pos:start="6363:20" pos:end="6363:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6363:24" pos:end="6413:9">{<block_content pos:start="6365:13" pos:end="6411:13">

            <decl_stmt pos:start="6365:13" pos:end="6365:21"><decl pos:start="6365:13" pos:end="6365:20"><type pos:start="6365:13" pos:end="6365:15"><name pos:start="6365:13" pos:end="6365:15">int</name></type> <name pos:start="6365:17" pos:end="6365:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="6367:13" pos:end="6367:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="6369:13" pos:end="6369:35"><expr pos:start="6369:13" pos:end="6369:34"><name pos:start="6369:13" pos:end="6369:16">d_ot</name> <operator pos:start="6369:18" pos:end="6369:18">=</operator> <name pos:start="6369:20" pos:end="6369:24">dflag</name> <operator pos:start="6369:26" pos:end="6369:26">+</operator> <name pos:start="6369:28" pos:end="6369:34">OT_WORD</name></expr>;</expr_stmt>



            <expr_stmt pos:start="6373:13" pos:end="6373:39"><expr pos:start="6373:13" pos:end="6373:38"><name pos:start="6373:13" pos:end="6373:17">modrm</name> <operator pos:start="6373:19" pos:end="6373:19">=</operator> <call pos:start="6373:21" pos:end="6373:38"><name pos:start="6373:21" pos:end="6373:29">ldub_code</name><argument_list pos:start="6373:30" pos:end="6373:38">(<argument pos:start="6373:31" pos:end="6373:37"><expr pos:start="6373:31" pos:end="6373:37"><name pos:start="6373:31" pos:end="6373:35"><name pos:start="6373:31" pos:end="6373:31">s</name><operator pos:start="6373:32" pos:end="6373:33">-&gt;</operator><name pos:start="6373:34" pos:end="6373:35">pc</name></name><operator pos:start="6373:36" pos:end="6373:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6375:13" pos:end="6375:45"><expr pos:start="6375:13" pos:end="6375:44"><name pos:start="6375:13" pos:end="6375:15">reg</name> <operator pos:start="6375:17" pos:end="6375:17">=</operator> <operator pos:start="6375:19" pos:end="6375:19">(</operator><operator pos:start="6375:20" pos:end="6375:20">(</operator><name pos:start="6375:21" pos:end="6375:25">modrm</name> <operator pos:start="6375:27" pos:end="6375:28">&gt;&gt;</operator> <literal type="number" pos:start="6375:30" pos:end="6375:30">3</literal><operator pos:start="6375:31" pos:end="6375:31">)</operator> <operator pos:start="6375:33" pos:end="6375:33">&amp;</operator> <literal type="number" pos:start="6375:35" pos:end="6375:35">7</literal><operator pos:start="6375:36" pos:end="6375:36">)</operator> <operator pos:start="6375:38" pos:end="6375:38">|</operator> <name pos:start="6375:40" pos:end="6375:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6377:13" pos:end="6377:35"><expr pos:start="6377:13" pos:end="6377:34"><name pos:start="6377:13" pos:end="6377:15">mod</name> <operator pos:start="6377:17" pos:end="6377:17">=</operator> <operator pos:start="6377:19" pos:end="6377:19">(</operator><name pos:start="6377:20" pos:end="6377:24">modrm</name> <operator pos:start="6377:26" pos:end="6377:27">&gt;&gt;</operator> <literal type="number" pos:start="6377:29" pos:end="6377:29">6</literal><operator pos:start="6377:30" pos:end="6377:30">)</operator> <operator pos:start="6377:32" pos:end="6377:32">&amp;</operator> <literal type="number" pos:start="6377:34" pos:end="6377:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6379:13" pos:end="6379:40"><expr pos:start="6379:13" pos:end="6379:39"><name pos:start="6379:13" pos:end="6379:14">rm</name> <operator pos:start="6379:16" pos:end="6379:16">=</operator> <operator pos:start="6379:18" pos:end="6379:18">(</operator><name pos:start="6379:19" pos:end="6379:23">modrm</name> <operator pos:start="6379:25" pos:end="6379:25">&amp;</operator> <literal type="number" pos:start="6379:27" pos:end="6379:27">7</literal><operator pos:start="6379:28" pos:end="6379:28">)</operator> <operator pos:start="6379:30" pos:end="6379:30">|</operator> <call pos:start="6379:32" pos:end="6379:39"><name pos:start="6379:32" pos:end="6379:36">REX_B</name><argument_list pos:start="6379:37" pos:end="6379:39">(<argument pos:start="6379:38" pos:end="6379:38"><expr pos:start="6379:38" pos:end="6379:38"><name pos:start="6379:38" pos:end="6379:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="6383:13" pos:end="6411:13"><if pos:start="6383:13" pos:end="6395:13">if <condition pos:start="6383:16" pos:end="6383:25">(<expr pos:start="6383:17" pos:end="6383:24"><name pos:start="6383:17" pos:end="6383:19">mod</name> <operator pos:start="6383:21" pos:end="6383:22">==</operator> <literal type="number" pos:start="6383:24" pos:end="6383:24">3</literal></expr>)</condition> <block pos:start="6383:27" pos:end="6395:13">{<block_content pos:start="6385:17" pos:end="6393:45">

                <expr_stmt pos:start="6385:17" pos:end="6385:50"><expr pos:start="6385:17" pos:end="6385:49"><call pos:start="6385:17" pos:end="6385:49"><name pos:start="6385:17" pos:end="6385:33">gen_op_mov_TN_reg</name><argument_list pos:start="6385:34" pos:end="6385:49">(<argument pos:start="6385:35" pos:end="6385:41"><expr pos:start="6385:35" pos:end="6385:41"><name pos:start="6385:35" pos:end="6385:41">OT_LONG</name></expr></argument>, <argument pos:start="6385:44" pos:end="6385:44"><expr pos:start="6385:44" pos:end="6385:44"><literal type="number" pos:start="6385:44" pos:end="6385:44">0</literal></expr></argument>, <argument pos:start="6385:47" pos:end="6385:48"><expr pos:start="6385:47" pos:end="6385:48"><name pos:start="6385:47" pos:end="6385:48">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="6387:17" pos:end="6387:33">/* sign extend */</comment>

                <if_stmt pos:start="6389:17" pos:end="6391:58"><if pos:start="6389:17" pos:end="6391:58">if <condition pos:start="6389:20" pos:end="6389:36">(<expr pos:start="6389:21" pos:end="6389:35"><name pos:start="6389:21" pos:end="6389:24">d_ot</name> <operator pos:start="6389:26" pos:end="6389:27">==</operator> <name pos:start="6389:29" pos:end="6389:35">OT_QUAD</name></expr>)</condition><block type="pseudo" pos:start="6391:21" pos:end="6391:58"><block_content pos:start="6391:21" pos:end="6391:58">

                    <expr_stmt pos:start="6391:21" pos:end="6391:58"><expr pos:start="6391:21" pos:end="6391:57"><call pos:start="6391:21" pos:end="6391:57"><name pos:start="6391:21" pos:end="6391:37">tcg_gen_ext32s_tl</name><argument_list pos:start="6391:38" pos:end="6391:57">(<argument pos:start="6391:39" pos:end="6391:46"><expr pos:start="6391:39" pos:end="6391:46"><name pos:start="6391:39" pos:end="6391:46"><name pos:start="6391:39" pos:end="6391:43">cpu_T</name><index pos:start="6391:44" pos:end="6391:46">[<expr pos:start="6391:45" pos:end="6391:45"><literal type="number" pos:start="6391:45" pos:end="6391:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6391:49" pos:end="6391:56"><expr pos:start="6391:49" pos:end="6391:56"><name pos:start="6391:49" pos:end="6391:56"><name pos:start="6391:49" pos:end="6391:53">cpu_T</name><index pos:start="6391:54" pos:end="6391:56">[<expr pos:start="6391:55" pos:end="6391:55"><literal type="number" pos:start="6391:55" pos:end="6391:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6393:17" pos:end="6393:45"><expr pos:start="6393:17" pos:end="6393:44"><call pos:start="6393:17" pos:end="6393:44"><name pos:start="6393:17" pos:end="6393:33">gen_op_mov_reg_T0</name><argument_list pos:start="6393:34" pos:end="6393:44">(<argument pos:start="6393:35" pos:end="6393:38"><expr pos:start="6393:35" pos:end="6393:38"><name pos:start="6393:35" pos:end="6393:38">d_ot</name></expr></argument>, <argument pos:start="6393:41" pos:end="6393:43"><expr pos:start="6393:41" pos:end="6393:43"><name pos:start="6393:41" pos:end="6393:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6395:15" pos:end="6411:13">else <block pos:start="6395:20" pos:end="6411:13">{<block_content pos:start="6397:17" pos:end="6409:45">

                <expr_stmt pos:start="6397:17" pos:end="6397:65"><expr pos:start="6397:17" pos:end="6397:64"><call pos:start="6397:17" pos:end="6397:64"><name pos:start="6397:17" pos:end="6397:29">gen_lea_modrm</name><argument_list pos:start="6397:30" pos:end="6397:64">(<argument pos:start="6397:31" pos:end="6397:31"><expr pos:start="6397:31" pos:end="6397:31"><name pos:start="6397:31" pos:end="6397:31">s</name></expr></argument>, <argument pos:start="6397:34" pos:end="6397:38"><expr pos:start="6397:34" pos:end="6397:38"><name pos:start="6397:34" pos:end="6397:38">modrm</name></expr></argument>, <argument pos:start="6397:41" pos:end="6397:49"><expr pos:start="6397:41" pos:end="6397:49"><operator pos:start="6397:41" pos:end="6397:41">&amp;</operator><name pos:start="6397:42" pos:end="6397:49">reg_addr</name></expr></argument>, <argument pos:start="6397:52" pos:end="6397:63"><expr pos:start="6397:52" pos:end="6397:63"><operator pos:start="6397:52" pos:end="6397:52">&amp;</operator><name pos:start="6397:53" pos:end="6397:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6399:17" pos:end="6407:17"><if pos:start="6399:17" pos:end="6403:17">if <condition pos:start="6399:20" pos:end="6399:36">(<expr pos:start="6399:21" pos:end="6399:35"><name pos:start="6399:21" pos:end="6399:24">d_ot</name> <operator pos:start="6399:26" pos:end="6399:27">==</operator> <name pos:start="6399:29" pos:end="6399:35">OT_QUAD</name></expr>)</condition> <block pos:start="6399:38" pos:end="6403:17">{<block_content pos:start="6401:21" pos:end="6401:61">

                    <expr_stmt pos:start="6401:21" pos:end="6401:61"><expr pos:start="6401:21" pos:end="6401:60"><call pos:start="6401:21" pos:end="6401:60"><name pos:start="6401:21" pos:end="6401:36">gen_op_lds_T0_A0</name><argument_list pos:start="6401:37" pos:end="6401:60">(<argument pos:start="6401:38" pos:end="6401:59"><expr pos:start="6401:38" pos:end="6401:59"><name pos:start="6401:38" pos:end="6401:44">OT_LONG</name> <operator pos:start="6401:46" pos:end="6401:46">+</operator> <name pos:start="6401:48" pos:end="6401:59"><name pos:start="6401:48" pos:end="6401:48">s</name><operator pos:start="6401:49" pos:end="6401:50">-&gt;</operator><name pos:start="6401:51" pos:end="6401:59">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6403:19" pos:end="6407:17">else <block pos:start="6403:24" pos:end="6407:17">{<block_content pos:start="6405:21" pos:end="6405:60">

                    <expr_stmt pos:start="6405:21" pos:end="6405:60"><expr pos:start="6405:21" pos:end="6405:59"><call pos:start="6405:21" pos:end="6405:59"><name pos:start="6405:21" pos:end="6405:35">gen_op_ld_T0_A0</name><argument_list pos:start="6405:36" pos:end="6405:59">(<argument pos:start="6405:37" pos:end="6405:58"><expr pos:start="6405:37" pos:end="6405:58"><name pos:start="6405:37" pos:end="6405:43">OT_LONG</name> <operator pos:start="6405:45" pos:end="6405:45">+</operator> <name pos:start="6405:47" pos:end="6405:58"><name pos:start="6405:47" pos:end="6405:47">s</name><operator pos:start="6405:48" pos:end="6405:49">-&gt;</operator><name pos:start="6405:50" pos:end="6405:58">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="6409:17" pos:end="6409:45"><expr pos:start="6409:17" pos:end="6409:44"><call pos:start="6409:17" pos:end="6409:44"><name pos:start="6409:17" pos:end="6409:33">gen_op_mov_reg_T0</name><argument_list pos:start="6409:34" pos:end="6409:44">(<argument pos:start="6409:35" pos:end="6409:38"><expr pos:start="6409:35" pos:end="6409:38"><name pos:start="6409:35" pos:end="6409:38">d_ot</name></expr></argument>, <argument pos:start="6409:41" pos:end="6409:43"><expr pos:start="6409:41" pos:end="6409:43"><name pos:start="6409:41" pos:end="6409:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="6413:11" pos:end="6505:9">else

<cpp:endif pos:start="6415:1" pos:end="6415:6">#<cpp:directive pos:start="6415:2" pos:end="6415:6">endif</cpp:directive></cpp:endif>

        <block pos:start="6417:9" pos:end="6505:9">{<block_content pos:start="6419:13" pos:end="6503:30">

            <decl_stmt pos:start="6419:13" pos:end="6419:23"><decl pos:start="6419:13" pos:end="6419:22"><type pos:start="6419:13" pos:end="6419:15"><name pos:start="6419:13" pos:end="6419:15">int</name></type> <name pos:start="6419:17" pos:end="6419:22">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="6421:13" pos:end="6421:28"><decl pos:start="6421:13" pos:end="6421:19"><type pos:start="6421:13" pos:end="6421:16"><name pos:start="6421:13" pos:end="6421:16">TCGv</name></type> <name pos:start="6421:18" pos:end="6421:19">t0</name></decl>, <decl pos:start="6421:22" pos:end="6421:23"><type ref="prev" pos:start="6421:13" pos:end="6421:16"/><name pos:start="6421:22" pos:end="6421:23">t1</name></decl>, <decl pos:start="6421:26" pos:end="6421:27"><type ref="prev" pos:start="6421:13" pos:end="6421:16"/><name pos:start="6421:26" pos:end="6421:27">t2</name></decl>;</decl_stmt>



            <if_stmt pos:start="6425:13" pos:end="6427:32"><if pos:start="6425:13" pos:end="6427:32">if <condition pos:start="6425:16" pos:end="6425:34">(<expr pos:start="6425:17" pos:end="6425:33"><operator pos:start="6425:17" pos:end="6425:17">!</operator><name pos:start="6425:18" pos:end="6425:22"><name pos:start="6425:18" pos:end="6425:18">s</name><operator pos:start="6425:19" pos:end="6425:20">-&gt;</operator><name pos:start="6425:21" pos:end="6425:22">pe</name></name> <operator pos:start="6425:24" pos:end="6425:25">||</operator> <name pos:start="6425:27" pos:end="6425:33"><name pos:start="6425:27" pos:end="6425:27">s</name><operator pos:start="6425:28" pos:end="6425:29">-&gt;</operator><name pos:start="6425:30" pos:end="6425:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="6427:17" pos:end="6427:32"><block_content pos:start="6427:17" pos:end="6427:32">

                <goto pos:start="6427:17" pos:end="6427:32">goto <name pos:start="6427:22" pos:end="6427:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6429:13" pos:end="6429:38"><expr pos:start="6429:13" pos:end="6429:37"><name pos:start="6429:13" pos:end="6429:14">t0</name> <operator pos:start="6429:16" pos:end="6429:16">=</operator> <call pos:start="6429:18" pos:end="6429:37"><name pos:start="6429:18" pos:end="6429:35">tcg_temp_local_new</name><argument_list pos:start="6429:36" pos:end="6429:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6431:13" pos:end="6431:38"><expr pos:start="6431:13" pos:end="6431:37"><name pos:start="6431:13" pos:end="6431:14">t1</name> <operator pos:start="6431:16" pos:end="6431:16">=</operator> <call pos:start="6431:18" pos:end="6431:37"><name pos:start="6431:18" pos:end="6431:35">tcg_temp_local_new</name><argument_list pos:start="6431:36" pos:end="6431:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6433:13" pos:end="6433:38"><expr pos:start="6433:13" pos:end="6433:37"><name pos:start="6433:13" pos:end="6433:14">t2</name> <operator pos:start="6433:16" pos:end="6433:16">=</operator> <call pos:start="6433:18" pos:end="6433:37"><name pos:start="6433:18" pos:end="6433:35">tcg_temp_local_new</name><argument_list pos:start="6433:36" pos:end="6433:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6435:13" pos:end="6435:25"><expr pos:start="6435:13" pos:end="6435:24"><name pos:start="6435:13" pos:end="6435:14">ot</name> <operator pos:start="6435:16" pos:end="6435:16">=</operator> <name pos:start="6435:18" pos:end="6435:24">OT_WORD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6437:13" pos:end="6437:39"><expr pos:start="6437:13" pos:end="6437:38"><name pos:start="6437:13" pos:end="6437:17">modrm</name> <operator pos:start="6437:19" pos:end="6437:19">=</operator> <call pos:start="6437:21" pos:end="6437:38"><name pos:start="6437:21" pos:end="6437:29">ldub_code</name><argument_list pos:start="6437:30" pos:end="6437:38">(<argument pos:start="6437:31" pos:end="6437:37"><expr pos:start="6437:31" pos:end="6437:37"><name pos:start="6437:31" pos:end="6437:35"><name pos:start="6437:31" pos:end="6437:31">s</name><operator pos:start="6437:32" pos:end="6437:33">-&gt;</operator><name pos:start="6437:34" pos:end="6437:35">pc</name></name><operator pos:start="6437:36" pos:end="6437:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6439:13" pos:end="6439:35"><expr pos:start="6439:13" pos:end="6439:34"><name pos:start="6439:13" pos:end="6439:15">reg</name> <operator pos:start="6439:17" pos:end="6439:17">=</operator> <operator pos:start="6439:19" pos:end="6439:19">(</operator><name pos:start="6439:20" pos:end="6439:24">modrm</name> <operator pos:start="6439:26" pos:end="6439:27">&gt;&gt;</operator> <literal type="number" pos:start="6439:29" pos:end="6439:29">3</literal><operator pos:start="6439:30" pos:end="6439:30">)</operator> <operator pos:start="6439:32" pos:end="6439:32">&amp;</operator> <literal type="number" pos:start="6439:34" pos:end="6439:34">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6441:13" pos:end="6441:35"><expr pos:start="6441:13" pos:end="6441:34"><name pos:start="6441:13" pos:end="6441:15">mod</name> <operator pos:start="6441:17" pos:end="6441:17">=</operator> <operator pos:start="6441:19" pos:end="6441:19">(</operator><name pos:start="6441:20" pos:end="6441:24">modrm</name> <operator pos:start="6441:26" pos:end="6441:27">&gt;&gt;</operator> <literal type="number" pos:start="6441:29" pos:end="6441:29">6</literal><operator pos:start="6441:30" pos:end="6441:30">)</operator> <operator pos:start="6441:32" pos:end="6441:32">&amp;</operator> <literal type="number" pos:start="6441:34" pos:end="6441:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6443:13" pos:end="6443:27"><expr pos:start="6443:13" pos:end="6443:26"><name pos:start="6443:13" pos:end="6443:14">rm</name> <operator pos:start="6443:16" pos:end="6443:16">=</operator> <name pos:start="6443:18" pos:end="6443:22">modrm</name> <operator pos:start="6443:24" pos:end="6443:24">&amp;</operator> <literal type="number" pos:start="6443:26" pos:end="6443:26">7</literal></expr>;</expr_stmt>

            <if_stmt pos:start="6445:13" pos:end="6455:13"><if pos:start="6445:13" pos:end="6451:13">if <condition pos:start="6445:16" pos:end="6445:25">(<expr pos:start="6445:17" pos:end="6445:24"><name pos:start="6445:17" pos:end="6445:19">mod</name> <operator pos:start="6445:21" pos:end="6445:22">!=</operator> <literal type="number" pos:start="6445:24" pos:end="6445:24">3</literal></expr>)</condition> <block pos:start="6445:27" pos:end="6451:13">{<block_content pos:start="6447:17" pos:end="6449:59">

                <expr_stmt pos:start="6447:17" pos:end="6447:65"><expr pos:start="6447:17" pos:end="6447:64"><call pos:start="6447:17" pos:end="6447:64"><name pos:start="6447:17" pos:end="6447:29">gen_lea_modrm</name><argument_list pos:start="6447:30" pos:end="6447:64">(<argument pos:start="6447:31" pos:end="6447:31"><expr pos:start="6447:31" pos:end="6447:31"><name pos:start="6447:31" pos:end="6447:31">s</name></expr></argument>, <argument pos:start="6447:34" pos:end="6447:38"><expr pos:start="6447:34" pos:end="6447:38"><name pos:start="6447:34" pos:end="6447:38">modrm</name></expr></argument>, <argument pos:start="6447:41" pos:end="6447:49"><expr pos:start="6447:41" pos:end="6447:49"><operator pos:start="6447:41" pos:end="6447:41">&amp;</operator><name pos:start="6447:42" pos:end="6447:49">reg_addr</name></expr></argument>, <argument pos:start="6447:52" pos:end="6447:63"><expr pos:start="6447:52" pos:end="6447:63"><operator pos:start="6447:52" pos:end="6447:52">&amp;</operator><name pos:start="6447:53" pos:end="6447:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6449:17" pos:end="6449:59"><expr pos:start="6449:17" pos:end="6449:58"><call pos:start="6449:17" pos:end="6449:58"><name pos:start="6449:17" pos:end="6449:27">gen_op_ld_v</name><argument_list pos:start="6449:28" pos:end="6449:58">(<argument pos:start="6449:29" pos:end="6449:45"><expr pos:start="6449:29" pos:end="6449:45"><name pos:start="6449:29" pos:end="6449:30">ot</name> <operator pos:start="6449:32" pos:end="6449:32">+</operator> <name pos:start="6449:34" pos:end="6449:45"><name pos:start="6449:34" pos:end="6449:34">s</name><operator pos:start="6449:35" pos:end="6449:36">-&gt;</operator><name pos:start="6449:37" pos:end="6449:45">mem_index</name></name></expr></argument>, <argument pos:start="6449:48" pos:end="6449:49"><expr pos:start="6449:48" pos:end="6449:49"><name pos:start="6449:48" pos:end="6449:49">t0</name></expr></argument>, <argument pos:start="6449:52" pos:end="6449:57"><expr pos:start="6449:52" pos:end="6449:57"><name pos:start="6449:52" pos:end="6449:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6451:15" pos:end="6455:13">else <block pos:start="6451:20" pos:end="6455:13">{<block_content pos:start="6453:17" pos:end="6453:45">

                <expr_stmt pos:start="6453:17" pos:end="6453:45"><expr pos:start="6453:17" pos:end="6453:44"><call pos:start="6453:17" pos:end="6453:44"><name pos:start="6453:17" pos:end="6453:32">gen_op_mov_v_reg</name><argument_list pos:start="6453:33" pos:end="6453:44">(<argument pos:start="6453:34" pos:end="6453:35"><expr pos:start="6453:34" pos:end="6453:35"><name pos:start="6453:34" pos:end="6453:35">ot</name></expr></argument>, <argument pos:start="6453:38" pos:end="6453:39"><expr pos:start="6453:38" pos:end="6453:39"><name pos:start="6453:38" pos:end="6453:39">t0</name></expr></argument>, <argument pos:start="6453:42" pos:end="6453:43"><expr pos:start="6453:42" pos:end="6453:43"><name pos:start="6453:42" pos:end="6453:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6457:13" pos:end="6457:42"><expr pos:start="6457:13" pos:end="6457:41"><call pos:start="6457:13" pos:end="6457:41"><name pos:start="6457:13" pos:end="6457:28">gen_op_mov_v_reg</name><argument_list pos:start="6457:29" pos:end="6457:41">(<argument pos:start="6457:30" pos:end="6457:31"><expr pos:start="6457:30" pos:end="6457:31"><name pos:start="6457:30" pos:end="6457:31">ot</name></expr></argument>, <argument pos:start="6457:34" pos:end="6457:35"><expr pos:start="6457:34" pos:end="6457:35"><name pos:start="6457:34" pos:end="6457:35">t1</name></expr></argument>, <argument pos:start="6457:38" pos:end="6457:40"><expr pos:start="6457:38" pos:end="6457:40"><name pos:start="6457:38" pos:end="6457:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6459:13" pos:end="6459:45"><expr pos:start="6459:13" pos:end="6459:44"><call pos:start="6459:13" pos:end="6459:44"><name pos:start="6459:13" pos:end="6459:27">tcg_gen_andi_tl</name><argument_list pos:start="6459:28" pos:end="6459:44">(<argument pos:start="6459:29" pos:end="6459:36"><expr pos:start="6459:29" pos:end="6459:36"><name pos:start="6459:29" pos:end="6459:36">cpu_tmp0</name></expr></argument>, <argument pos:start="6459:39" pos:end="6459:40"><expr pos:start="6459:39" pos:end="6459:40"><name pos:start="6459:39" pos:end="6459:40">t0</name></expr></argument>, <argument pos:start="6459:43" pos:end="6459:43"><expr pos:start="6459:43" pos:end="6459:43"><literal type="number" pos:start="6459:43" pos:end="6459:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6461:13" pos:end="6461:39"><expr pos:start="6461:13" pos:end="6461:38"><call pos:start="6461:13" pos:end="6461:38"><name pos:start="6461:13" pos:end="6461:27">tcg_gen_andi_tl</name><argument_list pos:start="6461:28" pos:end="6461:38">(<argument pos:start="6461:29" pos:end="6461:30"><expr pos:start="6461:29" pos:end="6461:30"><name pos:start="6461:29" pos:end="6461:30">t1</name></expr></argument>, <argument pos:start="6461:33" pos:end="6461:34"><expr pos:start="6461:33" pos:end="6461:34"><name pos:start="6461:33" pos:end="6461:34">t1</name></expr></argument>, <argument pos:start="6461:37" pos:end="6461:37"><expr pos:start="6461:37" pos:end="6461:37"><literal type="number" pos:start="6461:37" pos:end="6461:37">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6463:13" pos:end="6463:35"><expr pos:start="6463:13" pos:end="6463:34"><call pos:start="6463:13" pos:end="6463:34"><name pos:start="6463:13" pos:end="6463:27">tcg_gen_movi_tl</name><argument_list pos:start="6463:28" pos:end="6463:34">(<argument pos:start="6463:29" pos:end="6463:30"><expr pos:start="6463:29" pos:end="6463:30"><name pos:start="6463:29" pos:end="6463:30">t2</name></expr></argument>, <argument pos:start="6463:33" pos:end="6463:33"><expr pos:start="6463:33" pos:end="6463:33"><literal type="number" pos:start="6463:33" pos:end="6463:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6465:13" pos:end="6465:37"><expr pos:start="6465:13" pos:end="6465:36"><name pos:start="6465:13" pos:end="6465:18">label1</name> <operator pos:start="6465:20" pos:end="6465:20">=</operator> <call pos:start="6465:22" pos:end="6465:36"><name pos:start="6465:22" pos:end="6465:34">gen_new_label</name><argument_list pos:start="6465:35" pos:end="6465:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6467:13" pos:end="6467:65"><expr pos:start="6467:13" pos:end="6467:64"><call pos:start="6467:13" pos:end="6467:64"><name pos:start="6467:13" pos:end="6467:29">tcg_gen_brcond_tl</name><argument_list pos:start="6467:30" pos:end="6467:64">(<argument pos:start="6467:31" pos:end="6467:41"><expr pos:start="6467:31" pos:end="6467:41"><name pos:start="6467:31" pos:end="6467:41">TCG_COND_GE</name></expr></argument>, <argument pos:start="6467:44" pos:end="6467:51"><expr pos:start="6467:44" pos:end="6467:51"><name pos:start="6467:44" pos:end="6467:51">cpu_tmp0</name></expr></argument>, <argument pos:start="6467:54" pos:end="6467:55"><expr pos:start="6467:54" pos:end="6467:55"><name pos:start="6467:54" pos:end="6467:55">t1</name></expr></argument>, <argument pos:start="6467:58" pos:end="6467:63"><expr pos:start="6467:58" pos:end="6467:63"><name pos:start="6467:58" pos:end="6467:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6469:13" pos:end="6469:40"><expr pos:start="6469:13" pos:end="6469:39"><call pos:start="6469:13" pos:end="6469:39"><name pos:start="6469:13" pos:end="6469:27">tcg_gen_andi_tl</name><argument_list pos:start="6469:28" pos:end="6469:39">(<argument pos:start="6469:29" pos:end="6469:30"><expr pos:start="6469:29" pos:end="6469:30"><name pos:start="6469:29" pos:end="6469:30">t0</name></expr></argument>, <argument pos:start="6469:33" pos:end="6469:34"><expr pos:start="6469:33" pos:end="6469:34"><name pos:start="6469:33" pos:end="6469:34">t0</name></expr></argument>, <argument pos:start="6469:37" pos:end="6469:38"><expr pos:start="6469:37" pos:end="6469:38"><operator pos:start="6469:37" pos:end="6469:37">~</operator><literal type="number" pos:start="6469:38" pos:end="6469:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6471:13" pos:end="6471:38"><expr pos:start="6471:13" pos:end="6471:37"><call pos:start="6471:13" pos:end="6471:37"><name pos:start="6471:13" pos:end="6471:25">tcg_gen_or_tl</name><argument_list pos:start="6471:26" pos:end="6471:37">(<argument pos:start="6471:27" pos:end="6471:28"><expr pos:start="6471:27" pos:end="6471:28"><name pos:start="6471:27" pos:end="6471:28">t0</name></expr></argument>, <argument pos:start="6471:31" pos:end="6471:32"><expr pos:start="6471:31" pos:end="6471:32"><name pos:start="6471:31" pos:end="6471:32">t0</name></expr></argument>, <argument pos:start="6471:35" pos:end="6471:36"><expr pos:start="6471:35" pos:end="6471:36"><name pos:start="6471:35" pos:end="6471:36">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6473:13" pos:end="6473:38"><expr pos:start="6473:13" pos:end="6473:37"><call pos:start="6473:13" pos:end="6473:37"><name pos:start="6473:13" pos:end="6473:27">tcg_gen_movi_tl</name><argument_list pos:start="6473:28" pos:end="6473:37">(<argument pos:start="6473:29" pos:end="6473:30"><expr pos:start="6473:29" pos:end="6473:30"><name pos:start="6473:29" pos:end="6473:30">t2</name></expr></argument>, <argument pos:start="6473:33" pos:end="6473:36"><expr pos:start="6473:33" pos:end="6473:36"><name pos:start="6473:33" pos:end="6473:36">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6475:13" pos:end="6475:34"><expr pos:start="6475:13" pos:end="6475:33"><call pos:start="6475:13" pos:end="6475:33"><name pos:start="6475:13" pos:end="6475:25">gen_set_label</name><argument_list pos:start="6475:26" pos:end="6475:33">(<argument pos:start="6475:27" pos:end="6475:32"><expr pos:start="6475:27" pos:end="6475:32"><name pos:start="6475:27" pos:end="6475:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6477:13" pos:end="6485:13"><if pos:start="6477:13" pos:end="6481:13">if <condition pos:start="6477:16" pos:end="6477:25">(<expr pos:start="6477:17" pos:end="6477:24"><name pos:start="6477:17" pos:end="6477:19">mod</name> <operator pos:start="6477:21" pos:end="6477:22">!=</operator> <literal type="number" pos:start="6477:24" pos:end="6477:24">3</literal></expr>)</condition> <block pos:start="6477:27" pos:end="6481:13">{<block_content pos:start="6479:17" pos:end="6479:59">

                <expr_stmt pos:start="6479:17" pos:end="6479:59"><expr pos:start="6479:17" pos:end="6479:58"><call pos:start="6479:17" pos:end="6479:58"><name pos:start="6479:17" pos:end="6479:27">gen_op_st_v</name><argument_list pos:start="6479:28" pos:end="6479:58">(<argument pos:start="6479:29" pos:end="6479:45"><expr pos:start="6479:29" pos:end="6479:45"><name pos:start="6479:29" pos:end="6479:30">ot</name> <operator pos:start="6479:32" pos:end="6479:32">+</operator> <name pos:start="6479:34" pos:end="6479:45"><name pos:start="6479:34" pos:end="6479:34">s</name><operator pos:start="6479:35" pos:end="6479:36">-&gt;</operator><name pos:start="6479:37" pos:end="6479:45">mem_index</name></name></expr></argument>, <argument pos:start="6479:48" pos:end="6479:49"><expr pos:start="6479:48" pos:end="6479:49"><name pos:start="6479:48" pos:end="6479:49">t0</name></expr></argument>, <argument pos:start="6479:52" pos:end="6479:57"><expr pos:start="6479:52" pos:end="6479:57"><name pos:start="6479:52" pos:end="6479:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6481:15" pos:end="6485:13">else <block pos:start="6481:20" pos:end="6485:13">{<block_content pos:start="6483:17" pos:end="6483:45">

                <expr_stmt pos:start="6483:17" pos:end="6483:45"><expr pos:start="6483:17" pos:end="6483:44"><call pos:start="6483:17" pos:end="6483:44"><name pos:start="6483:17" pos:end="6483:32">gen_op_mov_reg_v</name><argument_list pos:start="6483:33" pos:end="6483:44">(<argument pos:start="6483:34" pos:end="6483:35"><expr pos:start="6483:34" pos:end="6483:35"><name pos:start="6483:34" pos:end="6483:35">ot</name></expr></argument>, <argument pos:start="6483:38" pos:end="6483:39"><expr pos:start="6483:38" pos:end="6483:39"><name pos:start="6483:38" pos:end="6483:39">rm</name></expr></argument>, <argument pos:start="6483:42" pos:end="6483:43"><expr pos:start="6483:42" pos:end="6483:43"><name pos:start="6483:42" pos:end="6483:43">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="6487:13" pos:end="6489:43"><if pos:start="6487:13" pos:end="6489:43">if <condition pos:start="6487:16" pos:end="6487:42">(<expr pos:start="6487:17" pos:end="6487:41"><name pos:start="6487:17" pos:end="6487:24"><name pos:start="6487:17" pos:end="6487:17">s</name><operator pos:start="6487:18" pos:end="6487:19">-&gt;</operator><name pos:start="6487:20" pos:end="6487:24">cc_op</name></name> <operator pos:start="6487:26" pos:end="6487:27">!=</operator> <name pos:start="6487:29" pos:end="6487:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6489:17" pos:end="6489:43"><block_content pos:start="6489:17" pos:end="6489:43">

                <expr_stmt pos:start="6489:17" pos:end="6489:43"><expr pos:start="6489:17" pos:end="6489:42"><call pos:start="6489:17" pos:end="6489:42"><name pos:start="6489:17" pos:end="6489:32">gen_op_set_cc_op</name><argument_list pos:start="6489:33" pos:end="6489:42">(<argument pos:start="6489:34" pos:end="6489:41"><expr pos:start="6489:34" pos:end="6489:41"><name pos:start="6489:34" pos:end="6489:41"><name pos:start="6489:34" pos:end="6489:34">s</name><operator pos:start="6489:35" pos:end="6489:36">-&gt;</operator><name pos:start="6489:37" pos:end="6489:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6491:13" pos:end="6491:43"><expr pos:start="6491:13" pos:end="6491:42"><call pos:start="6491:13" pos:end="6491:42"><name pos:start="6491:13" pos:end="6491:30">gen_compute_eflags</name><argument_list pos:start="6491:31" pos:end="6491:42">(<argument pos:start="6491:32" pos:end="6491:41"><expr pos:start="6491:32" pos:end="6491:41"><name pos:start="6491:32" pos:end="6491:41">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6493:13" pos:end="6493:59"><expr pos:start="6493:13" pos:end="6493:58"><call pos:start="6493:13" pos:end="6493:58"><name pos:start="6493:13" pos:end="6493:27">tcg_gen_andi_tl</name><argument_list pos:start="6493:28" pos:end="6493:58">(<argument pos:start="6493:29" pos:end="6493:38"><expr pos:start="6493:29" pos:end="6493:38"><name pos:start="6493:29" pos:end="6493:38">cpu_cc_src</name></expr></argument>, <argument pos:start="6493:41" pos:end="6493:50"><expr pos:start="6493:41" pos:end="6493:50"><name pos:start="6493:41" pos:end="6493:50">cpu_cc_src</name></expr></argument>, <argument pos:start="6493:53" pos:end="6493:57"><expr pos:start="6493:53" pos:end="6493:57"><operator pos:start="6493:53" pos:end="6493:53">~</operator><name pos:start="6493:54" pos:end="6493:57">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6495:13" pos:end="6495:54"><expr pos:start="6495:13" pos:end="6495:53"><call pos:start="6495:13" pos:end="6495:53"><name pos:start="6495:13" pos:end="6495:25">tcg_gen_or_tl</name><argument_list pos:start="6495:26" pos:end="6495:53">(<argument pos:start="6495:27" pos:end="6495:36"><expr pos:start="6495:27" pos:end="6495:36"><name pos:start="6495:27" pos:end="6495:36">cpu_cc_src</name></expr></argument>, <argument pos:start="6495:39" pos:end="6495:48"><expr pos:start="6495:39" pos:end="6495:48"><name pos:start="6495:39" pos:end="6495:48">cpu_cc_src</name></expr></argument>, <argument pos:start="6495:51" pos:end="6495:52"><expr pos:start="6495:51" pos:end="6495:52"><name pos:start="6495:51" pos:end="6495:52">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6497:13" pos:end="6497:36"><expr pos:start="6497:13" pos:end="6497:35"><name pos:start="6497:13" pos:end="6497:20"><name pos:start="6497:13" pos:end="6497:13">s</name><operator pos:start="6497:14" pos:end="6497:15">-&gt;</operator><name pos:start="6497:16" pos:end="6497:20">cc_op</name></name> <operator pos:start="6497:22" pos:end="6497:22">=</operator> <name pos:start="6497:24" pos:end="6497:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6499:13" pos:end="6499:30"><expr pos:start="6499:13" pos:end="6499:29"><call pos:start="6499:13" pos:end="6499:29"><name pos:start="6499:13" pos:end="6499:25">tcg_temp_free</name><argument_list pos:start="6499:26" pos:end="6499:29">(<argument pos:start="6499:27" pos:end="6499:28"><expr pos:start="6499:27" pos:end="6499:28"><name pos:start="6499:27" pos:end="6499:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6501:13" pos:end="6501:30"><expr pos:start="6501:13" pos:end="6501:29"><call pos:start="6501:13" pos:end="6501:29"><name pos:start="6501:13" pos:end="6501:25">tcg_temp_free</name><argument_list pos:start="6501:26" pos:end="6501:29">(<argument pos:start="6501:27" pos:end="6501:28"><expr pos:start="6501:27" pos:end="6501:28"><name pos:start="6501:27" pos:end="6501:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6503:13" pos:end="6503:30"><expr pos:start="6503:13" pos:end="6503:29"><call pos:start="6503:13" pos:end="6503:29"><name pos:start="6503:13" pos:end="6503:25">tcg_temp_free</name><argument_list pos:start="6503:26" pos:end="6503:29">(<argument pos:start="6503:27" pos:end="6503:28"><expr pos:start="6503:27" pos:end="6503:28"><name pos:start="6503:27" pos:end="6503:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6507:9" pos:end="6507:14">break;</break>

    <case pos:start="6509:5" pos:end="6509:15">case <expr pos:start="6509:10" pos:end="6509:14"><literal type="number" pos:start="6509:10" pos:end="6509:14">0x102</literal></expr>:</case> <comment type="block" pos:start="6509:17" pos:end="6509:25">/* lar */</comment>

    <case pos:start="6511:5" pos:end="6511:15">case <expr pos:start="6511:10" pos:end="6511:14"><literal type="number" pos:start="6511:10" pos:end="6511:14">0x103</literal></expr>:</case> <comment type="block" pos:start="6511:17" pos:end="6511:25">/* lsl */</comment>

        <block pos:start="6513:9" pos:end="6559:9">{<block_content pos:start="6515:13" pos:end="6557:30">

            <decl_stmt pos:start="6515:13" pos:end="6515:23"><decl pos:start="6515:13" pos:end="6515:22"><type pos:start="6515:13" pos:end="6515:15"><name pos:start="6515:13" pos:end="6515:15">int</name></type> <name pos:start="6515:17" pos:end="6515:22">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="6517:13" pos:end="6517:20"><decl pos:start="6517:13" pos:end="6517:19"><type pos:start="6517:13" pos:end="6517:16"><name pos:start="6517:13" pos:end="6517:16">TCGv</name></type> <name pos:start="6517:18" pos:end="6517:19">t0</name></decl>;</decl_stmt>

            <if_stmt pos:start="6519:13" pos:end="6521:32"><if pos:start="6519:13" pos:end="6521:32">if <condition pos:start="6519:16" pos:end="6519:34">(<expr pos:start="6519:17" pos:end="6519:33"><operator pos:start="6519:17" pos:end="6519:17">!</operator><name pos:start="6519:18" pos:end="6519:22"><name pos:start="6519:18" pos:end="6519:18">s</name><operator pos:start="6519:19" pos:end="6519:20">-&gt;</operator><name pos:start="6519:21" pos:end="6519:22">pe</name></name> <operator pos:start="6519:24" pos:end="6519:25">||</operator> <name pos:start="6519:27" pos:end="6519:33"><name pos:start="6519:27" pos:end="6519:27">s</name><operator pos:start="6519:28" pos:end="6519:29">-&gt;</operator><name pos:start="6519:30" pos:end="6519:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="6521:17" pos:end="6521:32"><block_content pos:start="6521:17" pos:end="6521:32">

                <goto pos:start="6521:17" pos:end="6521:32">goto <name pos:start="6521:22" pos:end="6521:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6523:13" pos:end="6523:43"><expr pos:start="6523:13" pos:end="6523:42"><name pos:start="6523:13" pos:end="6523:14">ot</name> <operator pos:start="6523:16" pos:end="6523:16">=</operator> <ternary pos:start="6523:18" pos:end="6523:42"><condition pos:start="6523:18" pos:end="6523:24"><expr pos:start="6523:18" pos:end="6523:22"><name pos:start="6523:18" pos:end="6523:22">dflag</name></expr> ?</condition><then pos:start="6523:26" pos:end="6523:32"> <expr pos:start="6523:26" pos:end="6523:32"><name pos:start="6523:26" pos:end="6523:32">OT_LONG</name></expr> </then><else pos:start="6523:34" pos:end="6523:42">: <expr pos:start="6523:36" pos:end="6523:42"><name pos:start="6523:36" pos:end="6523:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="6525:13" pos:end="6525:39"><expr pos:start="6525:13" pos:end="6525:38"><name pos:start="6525:13" pos:end="6525:17">modrm</name> <operator pos:start="6525:19" pos:end="6525:19">=</operator> <call pos:start="6525:21" pos:end="6525:38"><name pos:start="6525:21" pos:end="6525:29">ldub_code</name><argument_list pos:start="6525:30" pos:end="6525:38">(<argument pos:start="6525:31" pos:end="6525:37"><expr pos:start="6525:31" pos:end="6525:37"><name pos:start="6525:31" pos:end="6525:35"><name pos:start="6525:31" pos:end="6525:31">s</name><operator pos:start="6525:32" pos:end="6525:33">-&gt;</operator><name pos:start="6525:34" pos:end="6525:35">pc</name></name><operator pos:start="6525:36" pos:end="6525:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6527:13" pos:end="6527:45"><expr pos:start="6527:13" pos:end="6527:44"><name pos:start="6527:13" pos:end="6527:15">reg</name> <operator pos:start="6527:17" pos:end="6527:17">=</operator> <operator pos:start="6527:19" pos:end="6527:19">(</operator><operator pos:start="6527:20" pos:end="6527:20">(</operator><name pos:start="6527:21" pos:end="6527:25">modrm</name> <operator pos:start="6527:27" pos:end="6527:28">&gt;&gt;</operator> <literal type="number" pos:start="6527:30" pos:end="6527:30">3</literal><operator pos:start="6527:31" pos:end="6527:31">)</operator> <operator pos:start="6527:33" pos:end="6527:33">&amp;</operator> <literal type="number" pos:start="6527:35" pos:end="6527:35">7</literal><operator pos:start="6527:36" pos:end="6527:36">)</operator> <operator pos:start="6527:38" pos:end="6527:38">|</operator> <name pos:start="6527:40" pos:end="6527:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6529:13" pos:end="6529:58"><expr pos:start="6529:13" pos:end="6529:57"><call pos:start="6529:13" pos:end="6529:57"><name pos:start="6529:13" pos:end="6529:26">gen_ldst_modrm</name><argument_list pos:start="6529:27" pos:end="6529:57">(<argument pos:start="6529:28" pos:end="6529:28"><expr pos:start="6529:28" pos:end="6529:28"><name pos:start="6529:28" pos:end="6529:28">s</name></expr></argument>, <argument pos:start="6529:31" pos:end="6529:35"><expr pos:start="6529:31" pos:end="6529:35"><name pos:start="6529:31" pos:end="6529:35">modrm</name></expr></argument>, <argument pos:start="6529:38" pos:end="6529:44"><expr pos:start="6529:38" pos:end="6529:44"><name pos:start="6529:38" pos:end="6529:44">OT_WORD</name></expr></argument>, <argument pos:start="6529:47" pos:end="6529:53"><expr pos:start="6529:47" pos:end="6529:53"><name pos:start="6529:47" pos:end="6529:53">OR_TMP0</name></expr></argument>, <argument pos:start="6529:56" pos:end="6529:56"><expr pos:start="6529:56" pos:end="6529:56"><literal type="number" pos:start="6529:56" pos:end="6529:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6531:13" pos:end="6531:38"><expr pos:start="6531:13" pos:end="6531:37"><name pos:start="6531:13" pos:end="6531:14">t0</name> <operator pos:start="6531:16" pos:end="6531:16">=</operator> <call pos:start="6531:18" pos:end="6531:37"><name pos:start="6531:18" pos:end="6531:35">tcg_temp_local_new</name><argument_list pos:start="6531:36" pos:end="6531:37">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6533:13" pos:end="6535:43"><if pos:start="6533:13" pos:end="6535:43">if <condition pos:start="6533:16" pos:end="6533:42">(<expr pos:start="6533:17" pos:end="6533:41"><name pos:start="6533:17" pos:end="6533:24"><name pos:start="6533:17" pos:end="6533:17">s</name><operator pos:start="6533:18" pos:end="6533:19">-&gt;</operator><name pos:start="6533:20" pos:end="6533:24">cc_op</name></name> <operator pos:start="6533:26" pos:end="6533:27">!=</operator> <name pos:start="6533:29" pos:end="6533:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6535:17" pos:end="6535:43"><block_content pos:start="6535:17" pos:end="6535:43">

                <expr_stmt pos:start="6535:17" pos:end="6535:43"><expr pos:start="6535:17" pos:end="6535:42"><call pos:start="6535:17" pos:end="6535:42"><name pos:start="6535:17" pos:end="6535:32">gen_op_set_cc_op</name><argument_list pos:start="6535:33" pos:end="6535:42">(<argument pos:start="6535:34" pos:end="6535:41"><expr pos:start="6535:34" pos:end="6535:41"><name pos:start="6535:34" pos:end="6535:41"><name pos:start="6535:34" pos:end="6535:34">s</name><operator pos:start="6535:35" pos:end="6535:36">-&gt;</operator><name pos:start="6535:37" pos:end="6535:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="6537:13" pos:end="6543:45"><if pos:start="6537:13" pos:end="6539:45">if <condition pos:start="6537:16" pos:end="6537:27">(<expr pos:start="6537:17" pos:end="6537:26"><name pos:start="6537:17" pos:end="6537:17">b</name> <operator pos:start="6537:19" pos:end="6537:20">==</operator> <literal type="number" pos:start="6537:22" pos:end="6537:26">0x102</literal></expr>)</condition><block type="pseudo" pos:start="6539:17" pos:end="6539:45"><block_content pos:start="6539:17" pos:end="6539:45">

                <expr_stmt pos:start="6539:17" pos:end="6539:45"><expr pos:start="6539:17" pos:end="6539:44"><call pos:start="6539:17" pos:end="6539:44"><name pos:start="6539:17" pos:end="6539:30">gen_helper_lar</name><argument_list pos:start="6539:31" pos:end="6539:44">(<argument pos:start="6539:32" pos:end="6539:33"><expr pos:start="6539:32" pos:end="6539:33"><name pos:start="6539:32" pos:end="6539:33">t0</name></expr></argument>, <argument pos:start="6539:36" pos:end="6539:43"><expr pos:start="6539:36" pos:end="6539:43"><name pos:start="6539:36" pos:end="6539:43"><name pos:start="6539:36" pos:end="6539:40">cpu_T</name><index pos:start="6539:41" pos:end="6539:43">[<expr pos:start="6539:42" pos:end="6539:42"><literal type="number" pos:start="6539:42" pos:end="6539:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="6541:13" pos:end="6543:45">else<block type="pseudo" pos:start="6543:17" pos:end="6543:45"><block_content pos:start="6543:17" pos:end="6543:45">

                <expr_stmt pos:start="6543:17" pos:end="6543:45"><expr pos:start="6543:17" pos:end="6543:44"><call pos:start="6543:17" pos:end="6543:44"><name pos:start="6543:17" pos:end="6543:30">gen_helper_lsl</name><argument_list pos:start="6543:31" pos:end="6543:44">(<argument pos:start="6543:32" pos:end="6543:33"><expr pos:start="6543:32" pos:end="6543:33"><name pos:start="6543:32" pos:end="6543:33">t0</name></expr></argument>, <argument pos:start="6543:36" pos:end="6543:43"><expr pos:start="6543:36" pos:end="6543:43"><name pos:start="6543:36" pos:end="6543:43"><name pos:start="6543:36" pos:end="6543:40">cpu_T</name><index pos:start="6543:41" pos:end="6543:43">[<expr pos:start="6543:42" pos:end="6543:42"><literal type="number" pos:start="6543:42" pos:end="6543:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="6545:13" pos:end="6545:56"><expr pos:start="6545:13" pos:end="6545:55"><call pos:start="6545:13" pos:end="6545:55"><name pos:start="6545:13" pos:end="6545:27">tcg_gen_andi_tl</name><argument_list pos:start="6545:28" pos:end="6545:55">(<argument pos:start="6545:29" pos:end="6545:36"><expr pos:start="6545:29" pos:end="6545:36"><name pos:start="6545:29" pos:end="6545:36">cpu_tmp0</name></expr></argument>, <argument pos:start="6545:39" pos:end="6545:48"><expr pos:start="6545:39" pos:end="6545:48"><name pos:start="6545:39" pos:end="6545:48">cpu_cc_src</name></expr></argument>, <argument pos:start="6545:51" pos:end="6545:54"><expr pos:start="6545:51" pos:end="6545:54"><name pos:start="6545:51" pos:end="6545:54">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6547:13" pos:end="6547:37"><expr pos:start="6547:13" pos:end="6547:36"><name pos:start="6547:13" pos:end="6547:18">label1</name> <operator pos:start="6547:20" pos:end="6547:20">=</operator> <call pos:start="6547:22" pos:end="6547:36"><name pos:start="6547:22" pos:end="6547:34">gen_new_label</name><argument_list pos:start="6547:35" pos:end="6547:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6549:13" pos:end="6549:65"><expr pos:start="6549:13" pos:end="6549:64"><call pos:start="6549:13" pos:end="6549:64"><name pos:start="6549:13" pos:end="6549:30">tcg_gen_brcondi_tl</name><argument_list pos:start="6549:31" pos:end="6549:64">(<argument pos:start="6549:32" pos:end="6549:42"><expr pos:start="6549:32" pos:end="6549:42"><name pos:start="6549:32" pos:end="6549:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="6549:45" pos:end="6549:52"><expr pos:start="6549:45" pos:end="6549:52"><name pos:start="6549:45" pos:end="6549:52">cpu_tmp0</name></expr></argument>, <argument pos:start="6549:55" pos:end="6549:55"><expr pos:start="6549:55" pos:end="6549:55"><literal type="number" pos:start="6549:55" pos:end="6549:55">0</literal></expr></argument>, <argument pos:start="6549:58" pos:end="6549:63"><expr pos:start="6549:58" pos:end="6549:63"><name pos:start="6549:58" pos:end="6549:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6551:13" pos:end="6551:42"><expr pos:start="6551:13" pos:end="6551:41"><call pos:start="6551:13" pos:end="6551:41"><name pos:start="6551:13" pos:end="6551:28">gen_op_mov_reg_v</name><argument_list pos:start="6551:29" pos:end="6551:41">(<argument pos:start="6551:30" pos:end="6551:31"><expr pos:start="6551:30" pos:end="6551:31"><name pos:start="6551:30" pos:end="6551:31">ot</name></expr></argument>, <argument pos:start="6551:34" pos:end="6551:36"><expr pos:start="6551:34" pos:end="6551:36"><name pos:start="6551:34" pos:end="6551:36">reg</name></expr></argument>, <argument pos:start="6551:39" pos:end="6551:40"><expr pos:start="6551:39" pos:end="6551:40"><name pos:start="6551:39" pos:end="6551:40">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6553:13" pos:end="6553:34"><expr pos:start="6553:13" pos:end="6553:33"><call pos:start="6553:13" pos:end="6553:33"><name pos:start="6553:13" pos:end="6553:25">gen_set_label</name><argument_list pos:start="6553:26" pos:end="6553:33">(<argument pos:start="6553:27" pos:end="6553:32"><expr pos:start="6553:27" pos:end="6553:32"><name pos:start="6553:27" pos:end="6553:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6555:13" pos:end="6555:36"><expr pos:start="6555:13" pos:end="6555:35"><name pos:start="6555:13" pos:end="6555:20"><name pos:start="6555:13" pos:end="6555:13">s</name><operator pos:start="6555:14" pos:end="6555:15">-&gt;</operator><name pos:start="6555:16" pos:end="6555:20">cc_op</name></name> <operator pos:start="6555:22" pos:end="6555:22">=</operator> <name pos:start="6555:24" pos:end="6555:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6557:13" pos:end="6557:30"><expr pos:start="6557:13" pos:end="6557:29"><call pos:start="6557:13" pos:end="6557:29"><name pos:start="6557:13" pos:end="6557:25">tcg_temp_free</name><argument_list pos:start="6557:26" pos:end="6557:29">(<argument pos:start="6557:27" pos:end="6557:28"><expr pos:start="6557:27" pos:end="6557:28"><name pos:start="6557:27" pos:end="6557:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6561:9" pos:end="6561:14">break;</break>

    <case pos:start="6563:5" pos:end="6563:15">case <expr pos:start="6563:10" pos:end="6563:14"><literal type="number" pos:start="6563:10" pos:end="6563:14">0x118</literal></expr>:</case>

        <expr_stmt pos:start="6565:9" pos:end="6565:35"><expr pos:start="6565:9" pos:end="6565:34"><name pos:start="6565:9" pos:end="6565:13">modrm</name> <operator pos:start="6565:15" pos:end="6565:15">=</operator> <call pos:start="6565:17" pos:end="6565:34"><name pos:start="6565:17" pos:end="6565:25">ldub_code</name><argument_list pos:start="6565:26" pos:end="6565:34">(<argument pos:start="6565:27" pos:end="6565:33"><expr pos:start="6565:27" pos:end="6565:33"><name pos:start="6565:27" pos:end="6565:31"><name pos:start="6565:27" pos:end="6565:27">s</name><operator pos:start="6565:28" pos:end="6565:29">-&gt;</operator><name pos:start="6565:30" pos:end="6565:31">pc</name></name><operator pos:start="6565:32" pos:end="6565:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6567:9" pos:end="6567:31"><expr pos:start="6567:9" pos:end="6567:30"><name pos:start="6567:9" pos:end="6567:11">mod</name> <operator pos:start="6567:13" pos:end="6567:13">=</operator> <operator pos:start="6567:15" pos:end="6567:15">(</operator><name pos:start="6567:16" pos:end="6567:20">modrm</name> <operator pos:start="6567:22" pos:end="6567:23">&gt;&gt;</operator> <literal type="number" pos:start="6567:25" pos:end="6567:25">6</literal><operator pos:start="6567:26" pos:end="6567:26">)</operator> <operator pos:start="6567:28" pos:end="6567:28">&amp;</operator> <literal type="number" pos:start="6567:30" pos:end="6567:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="6569:9" pos:end="6569:30"><expr pos:start="6569:9" pos:end="6569:29"><name pos:start="6569:9" pos:end="6569:10">op</name> <operator pos:start="6569:12" pos:end="6569:12">=</operator> <operator pos:start="6569:14" pos:end="6569:14">(</operator><name pos:start="6569:15" pos:end="6569:19">modrm</name> <operator pos:start="6569:21" pos:end="6569:22">&gt;&gt;</operator> <literal type="number" pos:start="6569:24" pos:end="6569:24">3</literal><operator pos:start="6569:25" pos:end="6569:25">)</operator> <operator pos:start="6569:27" pos:end="6569:27">&amp;</operator> <literal type="number" pos:start="6569:29" pos:end="6569:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="6571:9" pos:end="6597:9">switch<condition pos:start="6571:15" pos:end="6571:18">(<expr pos:start="6571:16" pos:end="6571:17"><name pos:start="6571:16" pos:end="6571:17">op</name></expr>)</condition> <block pos:start="6571:20" pos:end="6597:9">{<block_content pos:start="6573:9" pos:end="6595:18">

        <case pos:start="6573:9" pos:end="6573:15">case <expr pos:start="6573:14" pos:end="6573:14"><literal type="number" pos:start="6573:14" pos:end="6573:14">0</literal></expr>:</case> <comment type="block" pos:start="6573:17" pos:end="6573:33">/* prefetchnta */</comment>

        <case pos:start="6575:9" pos:end="6575:15">case <expr pos:start="6575:14" pos:end="6575:14"><literal type="number" pos:start="6575:14" pos:end="6575:14">1</literal></expr>:</case> <comment type="block" pos:start="6575:17" pos:end="6575:33">/* prefetchnt0 */</comment>

        <case pos:start="6577:9" pos:end="6577:15">case <expr pos:start="6577:14" pos:end="6577:14"><literal type="number" pos:start="6577:14" pos:end="6577:14">2</literal></expr>:</case> <comment type="block" pos:start="6577:17" pos:end="6577:33">/* prefetchnt0 */</comment>

        <case pos:start="6579:9" pos:end="6579:15">case <expr pos:start="6579:14" pos:end="6579:14"><literal type="number" pos:start="6579:14" pos:end="6579:14">3</literal></expr>:</case> <comment type="block" pos:start="6579:17" pos:end="6579:33">/* prefetchnt0 */</comment>

            <if_stmt pos:start="6581:13" pos:end="6583:32"><if pos:start="6581:13" pos:end="6583:32">if <condition pos:start="6581:16" pos:end="6581:25">(<expr pos:start="6581:17" pos:end="6581:24"><name pos:start="6581:17" pos:end="6581:19">mod</name> <operator pos:start="6581:21" pos:end="6581:22">==</operator> <literal type="number" pos:start="6581:24" pos:end="6581:24">3</literal></expr>)</condition><block type="pseudo" pos:start="6583:17" pos:end="6583:32"><block_content pos:start="6583:17" pos:end="6583:32">

                <goto pos:start="6583:17" pos:end="6583:32">goto <name pos:start="6583:22" pos:end="6583:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6585:13" pos:end="6585:61"><expr pos:start="6585:13" pos:end="6585:60"><call pos:start="6585:13" pos:end="6585:60"><name pos:start="6585:13" pos:end="6585:25">gen_lea_modrm</name><argument_list pos:start="6585:26" pos:end="6585:60">(<argument pos:start="6585:27" pos:end="6585:27"><expr pos:start="6585:27" pos:end="6585:27"><name pos:start="6585:27" pos:end="6585:27">s</name></expr></argument>, <argument pos:start="6585:30" pos:end="6585:34"><expr pos:start="6585:30" pos:end="6585:34"><name pos:start="6585:30" pos:end="6585:34">modrm</name></expr></argument>, <argument pos:start="6585:37" pos:end="6585:45"><expr pos:start="6585:37" pos:end="6585:45"><operator pos:start="6585:37" pos:end="6585:37">&amp;</operator><name pos:start="6585:38" pos:end="6585:45">reg_addr</name></expr></argument>, <argument pos:start="6585:48" pos:end="6585:59"><expr pos:start="6585:48" pos:end="6585:59"><operator pos:start="6585:48" pos:end="6585:48">&amp;</operator><name pos:start="6585:49" pos:end="6585:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6587:13" pos:end="6587:36">/* nothing more to do */</comment>

            <break pos:start="6589:13" pos:end="6589:18">break;</break>

        <default pos:start="6591:9" pos:end="6591:16">default:</default> <comment type="block" pos:start="6591:18" pos:end="6591:39">/* nop (multi byte) */</comment>

            <expr_stmt pos:start="6593:13" pos:end="6593:36"><expr pos:start="6593:13" pos:end="6593:35"><call pos:start="6593:13" pos:end="6593:35"><name pos:start="6593:13" pos:end="6593:25">gen_nop_modrm</name><argument_list pos:start="6593:26" pos:end="6593:35">(<argument pos:start="6593:27" pos:end="6593:27"><expr pos:start="6593:27" pos:end="6593:27"><name pos:start="6593:27" pos:end="6593:27">s</name></expr></argument>, <argument pos:start="6593:30" pos:end="6593:34"><expr pos:start="6593:30" pos:end="6593:34"><name pos:start="6593:30" pos:end="6593:34">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6595:13" pos:end="6595:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="6599:9" pos:end="6599:14">break;</break>

    <case pos:start="6601:5" pos:end="6601:25">case <expr pos:start="6601:10" pos:end="6601:24"><literal type="number" pos:start="6601:10" pos:end="6601:14">0x119</literal> <operator pos:start="6601:16" pos:end="6601:18">...</operator> <literal type="number" pos:start="6601:20" pos:end="6601:24">0x11f</literal></expr>:</case> <comment type="block" pos:start="6601:27" pos:end="6601:48">/* nop (multi byte) */</comment>

        <expr_stmt pos:start="6603:9" pos:end="6603:35"><expr pos:start="6603:9" pos:end="6603:34"><name pos:start="6603:9" pos:end="6603:13">modrm</name> <operator pos:start="6603:15" pos:end="6603:15">=</operator> <call pos:start="6603:17" pos:end="6603:34"><name pos:start="6603:17" pos:end="6603:25">ldub_code</name><argument_list pos:start="6603:26" pos:end="6603:34">(<argument pos:start="6603:27" pos:end="6603:33"><expr pos:start="6603:27" pos:end="6603:33"><name pos:start="6603:27" pos:end="6603:31"><name pos:start="6603:27" pos:end="6603:27">s</name><operator pos:start="6603:28" pos:end="6603:29">-&gt;</operator><name pos:start="6603:30" pos:end="6603:31">pc</name></name><operator pos:start="6603:32" pos:end="6603:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6605:9" pos:end="6605:32"><expr pos:start="6605:9" pos:end="6605:31"><call pos:start="6605:9" pos:end="6605:31"><name pos:start="6605:9" pos:end="6605:21">gen_nop_modrm</name><argument_list pos:start="6605:22" pos:end="6605:31">(<argument pos:start="6605:23" pos:end="6605:23"><expr pos:start="6605:23" pos:end="6605:23"><name pos:start="6605:23" pos:end="6605:23">s</name></expr></argument>, <argument pos:start="6605:26" pos:end="6605:30"><expr pos:start="6605:26" pos:end="6605:30"><name pos:start="6605:26" pos:end="6605:30">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6607:9" pos:end="6607:14">break;</break>

    <case pos:start="6609:5" pos:end="6609:15">case <expr pos:start="6609:10" pos:end="6609:14"><literal type="number" pos:start="6609:10" pos:end="6609:14">0x120</literal></expr>:</case> <comment type="block" pos:start="6609:17" pos:end="6609:34">/* mov reg, crN */</comment>

    <case pos:start="6611:5" pos:end="6611:15">case <expr pos:start="6611:10" pos:end="6611:14"><literal type="number" pos:start="6611:10" pos:end="6611:14">0x122</literal></expr>:</case> <comment type="block" pos:start="6611:17" pos:end="6611:34">/* mov crN, reg */</comment>

        <if_stmt pos:start="6613:9" pos:end="6681:9"><if pos:start="6613:9" pos:end="6617:9">if <condition pos:start="6613:12" pos:end="6613:24">(<expr pos:start="6613:13" pos:end="6613:23"><name pos:start="6613:13" pos:end="6613:18"><name pos:start="6613:13" pos:end="6613:13">s</name><operator pos:start="6613:14" pos:end="6613:15">-&gt;</operator><name pos:start="6613:16" pos:end="6613:18">cpl</name></name> <operator pos:start="6613:20" pos:end="6613:21">!=</operator> <literal type="number" pos:start="6613:23" pos:end="6613:23">0</literal></expr>)</condition> <block pos:start="6613:26" pos:end="6617:9">{<block_content pos:start="6615:13" pos:end="6615:64">

            <expr_stmt pos:start="6615:13" pos:end="6615:64"><expr pos:start="6615:13" pos:end="6615:63"><call pos:start="6615:13" pos:end="6615:63"><name pos:start="6615:13" pos:end="6615:25">gen_exception</name><argument_list pos:start="6615:26" pos:end="6615:63">(<argument pos:start="6615:27" pos:end="6615:27"><expr pos:start="6615:27" pos:end="6615:27"><name pos:start="6615:27" pos:end="6615:27">s</name></expr></argument>, <argument pos:start="6615:30" pos:end="6615:39"><expr pos:start="6615:30" pos:end="6615:39"><name pos:start="6615:30" pos:end="6615:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6615:42" pos:end="6615:62"><expr pos:start="6615:42" pos:end="6615:62"><name pos:start="6615:42" pos:end="6615:49">pc_start</name> <operator pos:start="6615:51" pos:end="6615:51">-</operator> <name pos:start="6615:53" pos:end="6615:62"><name pos:start="6615:53" pos:end="6615:53">s</name><operator pos:start="6615:54" pos:end="6615:55">-&gt;</operator><name pos:start="6615:56" pos:end="6615:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6617:11" pos:end="6681:9">else <block pos:start="6617:16" pos:end="6681:9">{<block_content pos:start="6619:13" pos:end="6679:13">

            <expr_stmt pos:start="6619:13" pos:end="6619:39"><expr pos:start="6619:13" pos:end="6619:38"><name pos:start="6619:13" pos:end="6619:17">modrm</name> <operator pos:start="6619:19" pos:end="6619:19">=</operator> <call pos:start="6619:21" pos:end="6619:38"><name pos:start="6619:21" pos:end="6619:29">ldub_code</name><argument_list pos:start="6619:30" pos:end="6619:38">(<argument pos:start="6619:31" pos:end="6619:37"><expr pos:start="6619:31" pos:end="6619:37"><name pos:start="6619:31" pos:end="6619:35"><name pos:start="6619:31" pos:end="6619:31">s</name><operator pos:start="6619:32" pos:end="6619:33">-&gt;</operator><name pos:start="6619:34" pos:end="6619:35">pc</name></name><operator pos:start="6619:36" pos:end="6619:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6621:13" pos:end="6623:32"><if pos:start="6621:13" pos:end="6623:32">if <condition pos:start="6621:16" pos:end="6621:39">(<expr pos:start="6621:17" pos:end="6621:38"><operator pos:start="6621:17" pos:end="6621:17">(</operator><name pos:start="6621:18" pos:end="6621:22">modrm</name> <operator pos:start="6621:24" pos:end="6621:24">&amp;</operator> <literal type="number" pos:start="6621:26" pos:end="6621:29">0xc0</literal><operator pos:start="6621:30" pos:end="6621:30">)</operator> <operator pos:start="6621:32" pos:end="6621:33">!=</operator> <literal type="number" pos:start="6621:35" pos:end="6621:38">0xc0</literal></expr>)</condition><block type="pseudo" pos:start="6623:17" pos:end="6623:32"><block_content pos:start="6623:17" pos:end="6623:32">

                <goto pos:start="6623:17" pos:end="6623:32">goto <name pos:start="6623:22" pos:end="6623:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6625:13" pos:end="6625:40"><expr pos:start="6625:13" pos:end="6625:39"><name pos:start="6625:13" pos:end="6625:14">rm</name> <operator pos:start="6625:16" pos:end="6625:16">=</operator> <operator pos:start="6625:18" pos:end="6625:18">(</operator><name pos:start="6625:19" pos:end="6625:23">modrm</name> <operator pos:start="6625:25" pos:end="6625:25">&amp;</operator> <literal type="number" pos:start="6625:27" pos:end="6625:27">7</literal><operator pos:start="6625:28" pos:end="6625:28">)</operator> <operator pos:start="6625:30" pos:end="6625:30">|</operator> <call pos:start="6625:32" pos:end="6625:39"><name pos:start="6625:32" pos:end="6625:36">REX_B</name><argument_list pos:start="6625:37" pos:end="6625:39">(<argument pos:start="6625:38" pos:end="6625:38"><expr pos:start="6625:38" pos:end="6625:38"><name pos:start="6625:38" pos:end="6625:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6627:13" pos:end="6627:45"><expr pos:start="6627:13" pos:end="6627:44"><name pos:start="6627:13" pos:end="6627:15">reg</name> <operator pos:start="6627:17" pos:end="6627:17">=</operator> <operator pos:start="6627:19" pos:end="6627:19">(</operator><operator pos:start="6627:20" pos:end="6627:20">(</operator><name pos:start="6627:21" pos:end="6627:25">modrm</name> <operator pos:start="6627:27" pos:end="6627:28">&gt;&gt;</operator> <literal type="number" pos:start="6627:30" pos:end="6627:30">3</literal><operator pos:start="6627:31" pos:end="6627:31">)</operator> <operator pos:start="6627:33" pos:end="6627:33">&amp;</operator> <literal type="number" pos:start="6627:35" pos:end="6627:35">7</literal><operator pos:start="6627:36" pos:end="6627:36">)</operator> <operator pos:start="6627:38" pos:end="6627:38">|</operator> <name pos:start="6627:40" pos:end="6627:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="6629:13" pos:end="6635:29"><if pos:start="6629:13" pos:end="6631:29">if <condition pos:start="6629:16" pos:end="6629:26">(<expr pos:start="6629:17" pos:end="6629:25"><call pos:start="6629:17" pos:end="6629:25"><name pos:start="6629:17" pos:end="6629:22">CODE64</name><argument_list pos:start="6629:23" pos:end="6629:25">(<argument pos:start="6629:24" pos:end="6629:24"><expr pos:start="6629:24" pos:end="6629:24"><name pos:start="6629:24" pos:end="6629:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6631:17" pos:end="6631:29"><block_content pos:start="6631:17" pos:end="6631:29">

                <expr_stmt pos:start="6631:17" pos:end="6631:29"><expr pos:start="6631:17" pos:end="6631:28"><name pos:start="6631:17" pos:end="6631:18">ot</name> <operator pos:start="6631:20" pos:end="6631:20">=</operator> <name pos:start="6631:22" pos:end="6631:28">OT_QUAD</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="6633:13" pos:end="6635:29">else<block type="pseudo" pos:start="6635:17" pos:end="6635:29"><block_content pos:start="6635:17" pos:end="6635:29">

                <expr_stmt pos:start="6635:17" pos:end="6635:29"><expr pos:start="6635:17" pos:end="6635:28"><name pos:start="6635:17" pos:end="6635:18">ot</name> <operator pos:start="6635:20" pos:end="6635:20">=</operator> <name pos:start="6635:22" pos:end="6635:28">OT_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <switch pos:start="6637:13" pos:end="6679:13">switch<condition pos:start="6637:19" pos:end="6637:23">(<expr pos:start="6637:20" pos:end="6637:22"><name pos:start="6637:20" pos:end="6637:22">reg</name></expr>)</condition> <block pos:start="6637:25" pos:end="6679:13">{<block_content pos:start="6639:13" pos:end="6677:32">

            <case pos:start="6639:13" pos:end="6639:19">case <expr pos:start="6639:18" pos:end="6639:18"><literal type="number" pos:start="6639:18" pos:end="6639:18">0</literal></expr>:</case>

            <case pos:start="6641:13" pos:end="6641:19">case <expr pos:start="6641:18" pos:end="6641:18"><literal type="number" pos:start="6641:18" pos:end="6641:18">2</literal></expr>:</case>

            <case pos:start="6643:13" pos:end="6643:19">case <expr pos:start="6643:18" pos:end="6643:18"><literal type="number" pos:start="6643:18" pos:end="6643:18">3</literal></expr>:</case>

            <case pos:start="6645:13" pos:end="6645:19">case <expr pos:start="6645:18" pos:end="6645:18"><literal type="number" pos:start="6645:18" pos:end="6645:18">4</literal></expr>:</case>

            <case pos:start="6647:13" pos:end="6647:19">case <expr pos:start="6647:18" pos:end="6647:18"><literal type="number" pos:start="6647:18" pos:end="6647:18">8</literal></expr>:</case>

                <if_stmt pos:start="6649:17" pos:end="6651:47"><if pos:start="6649:17" pos:end="6651:47">if <condition pos:start="6649:20" pos:end="6649:46">(<expr pos:start="6649:21" pos:end="6649:45"><name pos:start="6649:21" pos:end="6649:28"><name pos:start="6649:21" pos:end="6649:21">s</name><operator pos:start="6649:22" pos:end="6649:23">-&gt;</operator><name pos:start="6649:24" pos:end="6649:28">cc_op</name></name> <operator pos:start="6649:30" pos:end="6649:31">!=</operator> <name pos:start="6649:33" pos:end="6649:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6651:21" pos:end="6651:47"><block_content pos:start="6651:21" pos:end="6651:47">

                    <expr_stmt pos:start="6651:21" pos:end="6651:47"><expr pos:start="6651:21" pos:end="6651:46"><call pos:start="6651:21" pos:end="6651:46"><name pos:start="6651:21" pos:end="6651:36">gen_op_set_cc_op</name><argument_list pos:start="6651:37" pos:end="6651:46">(<argument pos:start="6651:38" pos:end="6651:45"><expr pos:start="6651:38" pos:end="6651:45"><name pos:start="6651:38" pos:end="6651:45"><name pos:start="6651:38" pos:end="6651:38">s</name><operator pos:start="6651:39" pos:end="6651:40">-&gt;</operator><name pos:start="6651:41" pos:end="6651:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6653:17" pos:end="6653:50"><expr pos:start="6653:17" pos:end="6653:49"><call pos:start="6653:17" pos:end="6653:49"><name pos:start="6653:17" pos:end="6653:26">gen_jmp_im</name><argument_list pos:start="6653:27" pos:end="6653:49">(<argument pos:start="6653:28" pos:end="6653:48"><expr pos:start="6653:28" pos:end="6653:48"><name pos:start="6653:28" pos:end="6653:35">pc_start</name> <operator pos:start="6653:37" pos:end="6653:37">-</operator> <name pos:start="6653:39" pos:end="6653:48"><name pos:start="6653:39" pos:end="6653:39">s</name><operator pos:start="6653:40" pos:end="6653:41">-&gt;</operator><name pos:start="6653:42" pos:end="6653:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6655:17" pos:end="6671:17"><if pos:start="6655:17" pos:end="6665:17">if <condition pos:start="6655:20" pos:end="6655:26">(<expr pos:start="6655:21" pos:end="6655:25"><name pos:start="6655:21" pos:end="6655:21">b</name> <operator pos:start="6655:23" pos:end="6655:23">&amp;</operator> <literal type="number" pos:start="6655:25" pos:end="6655:25">2</literal></expr>)</condition> <block pos:start="6655:28" pos:end="6665:17">{<block_content pos:start="6657:21" pos:end="6663:31">

                    <expr_stmt pos:start="6657:21" pos:end="6657:49"><expr pos:start="6657:21" pos:end="6657:48"><call pos:start="6657:21" pos:end="6657:48"><name pos:start="6657:21" pos:end="6657:37">gen_op_mov_TN_reg</name><argument_list pos:start="6657:38" pos:end="6657:48">(<argument pos:start="6657:39" pos:end="6657:40"><expr pos:start="6657:39" pos:end="6657:40"><name pos:start="6657:39" pos:end="6657:40">ot</name></expr></argument>, <argument pos:start="6657:43" pos:end="6657:43"><expr pos:start="6657:43" pos:end="6657:43"><literal type="number" pos:start="6657:43" pos:end="6657:43">0</literal></expr></argument>, <argument pos:start="6657:46" pos:end="6657:47"><expr pos:start="6657:46" pos:end="6657:47"><name pos:start="6657:46" pos:end="6657:47">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6659:21" pos:end="6659:71"><expr pos:start="6659:21" pos:end="6659:70"><call pos:start="6659:21" pos:end="6659:70"><name pos:start="6659:21" pos:end="6659:40">gen_helper_write_crN</name><argument_list pos:start="6659:41" pos:end="6659:70">(<argument pos:start="6659:42" pos:end="6659:59"><expr pos:start="6659:42" pos:end="6659:59"><call pos:start="6659:42" pos:end="6659:59"><name pos:start="6659:42" pos:end="6659:54">tcg_const_i32</name><argument_list pos:start="6659:55" pos:end="6659:59">(<argument pos:start="6659:56" pos:end="6659:58"><expr pos:start="6659:56" pos:end="6659:58"><name pos:start="6659:56" pos:end="6659:58">reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="6659:62" pos:end="6659:69"><expr pos:start="6659:62" pos:end="6659:69"><name pos:start="6659:62" pos:end="6659:69"><name pos:start="6659:62" pos:end="6659:66">cpu_T</name><index pos:start="6659:67" pos:end="6659:69">[<expr pos:start="6659:68" pos:end="6659:68"><literal type="number" pos:start="6659:68" pos:end="6659:68">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6661:21" pos:end="6661:51"><expr pos:start="6661:21" pos:end="6661:50"><call pos:start="6661:21" pos:end="6661:50"><name pos:start="6661:21" pos:end="6661:30">gen_jmp_im</name><argument_list pos:start="6661:31" pos:end="6661:50">(<argument pos:start="6661:32" pos:end="6661:49"><expr pos:start="6661:32" pos:end="6661:49"><name pos:start="6661:32" pos:end="6661:36"><name pos:start="6661:32" pos:end="6661:32">s</name><operator pos:start="6661:33" pos:end="6661:34">-&gt;</operator><name pos:start="6661:35" pos:end="6661:36">pc</name></name> <operator pos:start="6661:38" pos:end="6661:38">-</operator> <name pos:start="6661:40" pos:end="6661:49"><name pos:start="6661:40" pos:end="6661:40">s</name><operator pos:start="6661:41" pos:end="6661:42">-&gt;</operator><name pos:start="6661:43" pos:end="6661:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6663:21" pos:end="6663:31"><expr pos:start="6663:21" pos:end="6663:30"><call pos:start="6663:21" pos:end="6663:30"><name pos:start="6663:21" pos:end="6663:27">gen_eob</name><argument_list pos:start="6663:28" pos:end="6663:30">(<argument pos:start="6663:29" pos:end="6663:29"><expr pos:start="6663:29" pos:end="6663:29"><name pos:start="6663:29" pos:end="6663:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6665:19" pos:end="6671:17">else <block pos:start="6665:24" pos:end="6671:17">{<block_content pos:start="6667:21" pos:end="6669:46">

                    <expr_stmt pos:start="6667:21" pos:end="6667:70"><expr pos:start="6667:21" pos:end="6667:69"><call pos:start="6667:21" pos:end="6667:69"><name pos:start="6667:21" pos:end="6667:39">gen_helper_read_crN</name><argument_list pos:start="6667:40" pos:end="6667:69">(<argument pos:start="6667:41" pos:end="6667:48"><expr pos:start="6667:41" pos:end="6667:48"><name pos:start="6667:41" pos:end="6667:48"><name pos:start="6667:41" pos:end="6667:45">cpu_T</name><index pos:start="6667:46" pos:end="6667:48">[<expr pos:start="6667:47" pos:end="6667:47"><literal type="number" pos:start="6667:47" pos:end="6667:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6667:51" pos:end="6667:68"><expr pos:start="6667:51" pos:end="6667:68"><call pos:start="6667:51" pos:end="6667:68"><name pos:start="6667:51" pos:end="6667:63">tcg_const_i32</name><argument_list pos:start="6667:64" pos:end="6667:68">(<argument pos:start="6667:65" pos:end="6667:67"><expr pos:start="6667:65" pos:end="6667:67"><name pos:start="6667:65" pos:end="6667:67">reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6669:21" pos:end="6669:46"><expr pos:start="6669:21" pos:end="6669:45"><call pos:start="6669:21" pos:end="6669:45"><name pos:start="6669:21" pos:end="6669:37">gen_op_mov_reg_T0</name><argument_list pos:start="6669:38" pos:end="6669:45">(<argument pos:start="6669:39" pos:end="6669:40"><expr pos:start="6669:39" pos:end="6669:40"><name pos:start="6669:39" pos:end="6669:40">ot</name></expr></argument>, <argument pos:start="6669:43" pos:end="6669:44"><expr pos:start="6669:43" pos:end="6669:44"><name pos:start="6669:43" pos:end="6669:44">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="6673:17" pos:end="6673:22">break;</break>

            <default pos:start="6675:13" pos:end="6675:20">default:</default>

                <goto pos:start="6677:17" pos:end="6677:32">goto <name pos:start="6677:22" pos:end="6677:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6683:9" pos:end="6683:14">break;</break>

    <case pos:start="6685:5" pos:end="6685:15">case <expr pos:start="6685:10" pos:end="6685:14"><literal type="number" pos:start="6685:10" pos:end="6685:14">0x121</literal></expr>:</case> <comment type="block" pos:start="6685:17" pos:end="6685:34">/* mov reg, drN */</comment>

    <case pos:start="6687:5" pos:end="6687:15">case <expr pos:start="6687:10" pos:end="6687:14"><literal type="number" pos:start="6687:10" pos:end="6687:14">0x123</literal></expr>:</case> <comment type="block" pos:start="6687:17" pos:end="6687:34">/* mov drN, reg */</comment>

        <if_stmt pos:start="6689:9" pos:end="6741:9"><if pos:start="6689:9" pos:end="6693:9">if <condition pos:start="6689:12" pos:end="6689:24">(<expr pos:start="6689:13" pos:end="6689:23"><name pos:start="6689:13" pos:end="6689:18"><name pos:start="6689:13" pos:end="6689:13">s</name><operator pos:start="6689:14" pos:end="6689:15">-&gt;</operator><name pos:start="6689:16" pos:end="6689:18">cpl</name></name> <operator pos:start="6689:20" pos:end="6689:21">!=</operator> <literal type="number" pos:start="6689:23" pos:end="6689:23">0</literal></expr>)</condition> <block pos:start="6689:26" pos:end="6693:9">{<block_content pos:start="6691:13" pos:end="6691:64">

            <expr_stmt pos:start="6691:13" pos:end="6691:64"><expr pos:start="6691:13" pos:end="6691:63"><call pos:start="6691:13" pos:end="6691:63"><name pos:start="6691:13" pos:end="6691:25">gen_exception</name><argument_list pos:start="6691:26" pos:end="6691:63">(<argument pos:start="6691:27" pos:end="6691:27"><expr pos:start="6691:27" pos:end="6691:27"><name pos:start="6691:27" pos:end="6691:27">s</name></expr></argument>, <argument pos:start="6691:30" pos:end="6691:39"><expr pos:start="6691:30" pos:end="6691:39"><name pos:start="6691:30" pos:end="6691:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6691:42" pos:end="6691:62"><expr pos:start="6691:42" pos:end="6691:62"><name pos:start="6691:42" pos:end="6691:49">pc_start</name> <operator pos:start="6691:51" pos:end="6691:51">-</operator> <name pos:start="6691:53" pos:end="6691:62"><name pos:start="6691:53" pos:end="6691:53">s</name><operator pos:start="6691:54" pos:end="6691:55">-&gt;</operator><name pos:start="6691:56" pos:end="6691:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6693:11" pos:end="6741:9">else <block pos:start="6693:16" pos:end="6741:9">{<block_content pos:start="6695:13" pos:end="6739:13">

            <expr_stmt pos:start="6695:13" pos:end="6695:39"><expr pos:start="6695:13" pos:end="6695:38"><name pos:start="6695:13" pos:end="6695:17">modrm</name> <operator pos:start="6695:19" pos:end="6695:19">=</operator> <call pos:start="6695:21" pos:end="6695:38"><name pos:start="6695:21" pos:end="6695:29">ldub_code</name><argument_list pos:start="6695:30" pos:end="6695:38">(<argument pos:start="6695:31" pos:end="6695:37"><expr pos:start="6695:31" pos:end="6695:37"><name pos:start="6695:31" pos:end="6695:35"><name pos:start="6695:31" pos:end="6695:31">s</name><operator pos:start="6695:32" pos:end="6695:33">-&gt;</operator><name pos:start="6695:34" pos:end="6695:35">pc</name></name><operator pos:start="6695:36" pos:end="6695:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6697:13" pos:end="6699:32"><if pos:start="6697:13" pos:end="6699:32">if <condition pos:start="6697:16" pos:end="6697:39">(<expr pos:start="6697:17" pos:end="6697:38"><operator pos:start="6697:17" pos:end="6697:17">(</operator><name pos:start="6697:18" pos:end="6697:22">modrm</name> <operator pos:start="6697:24" pos:end="6697:24">&amp;</operator> <literal type="number" pos:start="6697:26" pos:end="6697:29">0xc0</literal><operator pos:start="6697:30" pos:end="6697:30">)</operator> <operator pos:start="6697:32" pos:end="6697:33">!=</operator> <literal type="number" pos:start="6697:35" pos:end="6697:38">0xc0</literal></expr>)</condition><block type="pseudo" pos:start="6699:17" pos:end="6699:32"><block_content pos:start="6699:17" pos:end="6699:32">

                <goto pos:start="6699:17" pos:end="6699:32">goto <name pos:start="6699:22" pos:end="6699:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6701:13" pos:end="6701:40"><expr pos:start="6701:13" pos:end="6701:39"><name pos:start="6701:13" pos:end="6701:14">rm</name> <operator pos:start="6701:16" pos:end="6701:16">=</operator> <operator pos:start="6701:18" pos:end="6701:18">(</operator><name pos:start="6701:19" pos:end="6701:23">modrm</name> <operator pos:start="6701:25" pos:end="6701:25">&amp;</operator> <literal type="number" pos:start="6701:27" pos:end="6701:27">7</literal><operator pos:start="6701:28" pos:end="6701:28">)</operator> <operator pos:start="6701:30" pos:end="6701:30">|</operator> <call pos:start="6701:32" pos:end="6701:39"><name pos:start="6701:32" pos:end="6701:36">REX_B</name><argument_list pos:start="6701:37" pos:end="6701:39">(<argument pos:start="6701:38" pos:end="6701:38"><expr pos:start="6701:38" pos:end="6701:38"><name pos:start="6701:38" pos:end="6701:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6703:13" pos:end="6703:45"><expr pos:start="6703:13" pos:end="6703:44"><name pos:start="6703:13" pos:end="6703:15">reg</name> <operator pos:start="6703:17" pos:end="6703:17">=</operator> <operator pos:start="6703:19" pos:end="6703:19">(</operator><operator pos:start="6703:20" pos:end="6703:20">(</operator><name pos:start="6703:21" pos:end="6703:25">modrm</name> <operator pos:start="6703:27" pos:end="6703:28">&gt;&gt;</operator> <literal type="number" pos:start="6703:30" pos:end="6703:30">3</literal><operator pos:start="6703:31" pos:end="6703:31">)</operator> <operator pos:start="6703:33" pos:end="6703:33">&amp;</operator> <literal type="number" pos:start="6703:35" pos:end="6703:35">7</literal><operator pos:start="6703:36" pos:end="6703:36">)</operator> <operator pos:start="6703:38" pos:end="6703:38">|</operator> <name pos:start="6703:40" pos:end="6703:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="6705:13" pos:end="6711:29"><if pos:start="6705:13" pos:end="6707:29">if <condition pos:start="6705:16" pos:end="6705:26">(<expr pos:start="6705:17" pos:end="6705:25"><call pos:start="6705:17" pos:end="6705:25"><name pos:start="6705:17" pos:end="6705:22">CODE64</name><argument_list pos:start="6705:23" pos:end="6705:25">(<argument pos:start="6705:24" pos:end="6705:24"><expr pos:start="6705:24" pos:end="6705:24"><name pos:start="6705:24" pos:end="6705:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6707:17" pos:end="6707:29"><block_content pos:start="6707:17" pos:end="6707:29">

                <expr_stmt pos:start="6707:17" pos:end="6707:29"><expr pos:start="6707:17" pos:end="6707:28"><name pos:start="6707:17" pos:end="6707:18">ot</name> <operator pos:start="6707:20" pos:end="6707:20">=</operator> <name pos:start="6707:22" pos:end="6707:28">OT_QUAD</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="6709:13" pos:end="6711:29">else<block type="pseudo" pos:start="6711:17" pos:end="6711:29"><block_content pos:start="6711:17" pos:end="6711:29">

                <expr_stmt pos:start="6711:17" pos:end="6711:29"><expr pos:start="6711:17" pos:end="6711:28"><name pos:start="6711:17" pos:end="6711:18">ot</name> <operator pos:start="6711:20" pos:end="6711:20">=</operator> <name pos:start="6711:22" pos:end="6711:28">OT_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <comment type="block" pos:start="6713:13" pos:end="6713:56">/* XXX: do it dynamically with CR4.DE bit */</comment>

            <if_stmt pos:start="6715:13" pos:end="6717:32"><if pos:start="6715:13" pos:end="6717:32">if <condition pos:start="6715:16" pos:end="6715:49">(<expr pos:start="6715:17" pos:end="6715:48"><name pos:start="6715:17" pos:end="6715:19">reg</name> <operator pos:start="6715:21" pos:end="6715:22">==</operator> <literal type="number" pos:start="6715:24" pos:end="6715:24">4</literal> <operator pos:start="6715:26" pos:end="6715:27">||</operator> <name pos:start="6715:29" pos:end="6715:31">reg</name> <operator pos:start="6715:33" pos:end="6715:34">==</operator> <literal type="number" pos:start="6715:36" pos:end="6715:36">5</literal> <operator pos:start="6715:38" pos:end="6715:39">||</operator> <name pos:start="6715:41" pos:end="6715:43">reg</name> <operator pos:start="6715:45" pos:end="6715:46">&gt;=</operator> <literal type="number" pos:start="6715:48" pos:end="6715:48">8</literal></expr>)</condition><block type="pseudo" pos:start="6717:17" pos:end="6717:32"><block_content pos:start="6717:17" pos:end="6717:32">

                <goto pos:start="6717:17" pos:end="6717:32">goto <name pos:start="6717:22" pos:end="6717:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6719:13" pos:end="6739:13"><if pos:start="6719:13" pos:end="6731:13">if <condition pos:start="6719:16" pos:end="6719:22">(<expr pos:start="6719:17" pos:end="6719:21"><name pos:start="6719:17" pos:end="6719:17">b</name> <operator pos:start="6719:19" pos:end="6719:19">&amp;</operator> <literal type="number" pos:start="6719:21" pos:end="6719:21">2</literal></expr>)</condition> <block pos:start="6719:24" pos:end="6731:13">{<block_content pos:start="6721:17" pos:end="6729:27">

                <expr_stmt pos:start="6721:17" pos:end="6721:79"><expr pos:start="6721:17" pos:end="6721:78"><call pos:start="6721:17" pos:end="6721:78"><name pos:start="6721:17" pos:end="6721:39">gen_svm_check_intercept</name><argument_list pos:start="6721:40" pos:end="6721:78">(<argument pos:start="6721:41" pos:end="6721:41"><expr pos:start="6721:41" pos:end="6721:41"><name pos:start="6721:41" pos:end="6721:41">s</name></expr></argument>, <argument pos:start="6721:44" pos:end="6721:51"><expr pos:start="6721:44" pos:end="6721:51"><name pos:start="6721:44" pos:end="6721:51">pc_start</name></expr></argument>, <argument pos:start="6721:54" pos:end="6721:77"><expr pos:start="6721:54" pos:end="6721:77"><name pos:start="6721:54" pos:end="6721:71">SVM_EXIT_WRITE_DR0</name> <operator pos:start="6721:73" pos:end="6721:73">+</operator> <name pos:start="6721:75" pos:end="6721:77">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6723:17" pos:end="6723:45"><expr pos:start="6723:17" pos:end="6723:44"><call pos:start="6723:17" pos:end="6723:44"><name pos:start="6723:17" pos:end="6723:33">gen_op_mov_TN_reg</name><argument_list pos:start="6723:34" pos:end="6723:44">(<argument pos:start="6723:35" pos:end="6723:36"><expr pos:start="6723:35" pos:end="6723:36"><name pos:start="6723:35" pos:end="6723:36">ot</name></expr></argument>, <argument pos:start="6723:39" pos:end="6723:39"><expr pos:start="6723:39" pos:end="6723:39"><literal type="number" pos:start="6723:39" pos:end="6723:39">0</literal></expr></argument>, <argument pos:start="6723:42" pos:end="6723:43"><expr pos:start="6723:42" pos:end="6723:43"><name pos:start="6723:42" pos:end="6723:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6725:17" pos:end="6725:69"><expr pos:start="6725:17" pos:end="6725:68"><call pos:start="6725:17" pos:end="6725:68"><name pos:start="6725:17" pos:end="6725:38">gen_helper_movl_drN_T0</name><argument_list pos:start="6725:39" pos:end="6725:68">(<argument pos:start="6725:40" pos:end="6725:57"><expr pos:start="6725:40" pos:end="6725:57"><call pos:start="6725:40" pos:end="6725:57"><name pos:start="6725:40" pos:end="6725:52">tcg_const_i32</name><argument_list pos:start="6725:53" pos:end="6725:57">(<argument pos:start="6725:54" pos:end="6725:56"><expr pos:start="6725:54" pos:end="6725:56"><name pos:start="6725:54" pos:end="6725:56">reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="6725:60" pos:end="6725:67"><expr pos:start="6725:60" pos:end="6725:67"><name pos:start="6725:60" pos:end="6725:67"><name pos:start="6725:60" pos:end="6725:64">cpu_T</name><index pos:start="6725:65" pos:end="6725:67">[<expr pos:start="6725:66" pos:end="6725:66"><literal type="number" pos:start="6725:66" pos:end="6725:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6727:17" pos:end="6727:47"><expr pos:start="6727:17" pos:end="6727:46"><call pos:start="6727:17" pos:end="6727:46"><name pos:start="6727:17" pos:end="6727:26">gen_jmp_im</name><argument_list pos:start="6727:27" pos:end="6727:46">(<argument pos:start="6727:28" pos:end="6727:45"><expr pos:start="6727:28" pos:end="6727:45"><name pos:start="6727:28" pos:end="6727:32"><name pos:start="6727:28" pos:end="6727:28">s</name><operator pos:start="6727:29" pos:end="6727:30">-&gt;</operator><name pos:start="6727:31" pos:end="6727:32">pc</name></name> <operator pos:start="6727:34" pos:end="6727:34">-</operator> <name pos:start="6727:36" pos:end="6727:45"><name pos:start="6727:36" pos:end="6727:36">s</name><operator pos:start="6727:37" pos:end="6727:38">-&gt;</operator><name pos:start="6727:39" pos:end="6727:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6729:17" pos:end="6729:27"><expr pos:start="6729:17" pos:end="6729:26"><call pos:start="6729:17" pos:end="6729:26"><name pos:start="6729:17" pos:end="6729:23">gen_eob</name><argument_list pos:start="6729:24" pos:end="6729:26">(<argument pos:start="6729:25" pos:end="6729:25"><expr pos:start="6729:25" pos:end="6729:25"><name pos:start="6729:25" pos:end="6729:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6731:15" pos:end="6739:13">else <block pos:start="6731:20" pos:end="6739:13">{<block_content pos:start="6733:17" pos:end="6737:42">

                <expr_stmt pos:start="6733:17" pos:end="6733:78"><expr pos:start="6733:17" pos:end="6733:77"><call pos:start="6733:17" pos:end="6733:77"><name pos:start="6733:17" pos:end="6733:39">gen_svm_check_intercept</name><argument_list pos:start="6733:40" pos:end="6733:77">(<argument pos:start="6733:41" pos:end="6733:41"><expr pos:start="6733:41" pos:end="6733:41"><name pos:start="6733:41" pos:end="6733:41">s</name></expr></argument>, <argument pos:start="6733:44" pos:end="6733:51"><expr pos:start="6733:44" pos:end="6733:51"><name pos:start="6733:44" pos:end="6733:51">pc_start</name></expr></argument>, <argument pos:start="6733:54" pos:end="6733:76"><expr pos:start="6733:54" pos:end="6733:76"><name pos:start="6733:54" pos:end="6733:70">SVM_EXIT_READ_DR0</name> <operator pos:start="6733:72" pos:end="6733:72">+</operator> <name pos:start="6733:74" pos:end="6733:76">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6735:17" pos:end="6735:80"><expr pos:start="6735:17" pos:end="6735:79"><call pos:start="6735:17" pos:end="6735:79"><name pos:start="6735:17" pos:end="6735:29">tcg_gen_ld_tl</name><argument_list pos:start="6735:30" pos:end="6735:79">(<argument pos:start="6735:31" pos:end="6735:38"><expr pos:start="6735:31" pos:end="6735:38"><name pos:start="6735:31" pos:end="6735:38"><name pos:start="6735:31" pos:end="6735:35">cpu_T</name><index pos:start="6735:36" pos:end="6735:38">[<expr pos:start="6735:37" pos:end="6735:37"><literal type="number" pos:start="6735:37" pos:end="6735:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6735:41" pos:end="6735:47"><expr pos:start="6735:41" pos:end="6735:47"><name pos:start="6735:41" pos:end="6735:47">cpu_env</name></expr></argument>, <argument pos:start="6735:50" pos:end="6735:78"><expr pos:start="6735:50" pos:end="6735:78"><call pos:start="6735:50" pos:end="6735:78"><name pos:start="6735:50" pos:end="6735:57">offsetof</name><argument_list pos:start="6735:58" pos:end="6735:78">(<argument pos:start="6735:59" pos:end="6735:69"><expr pos:start="6735:59" pos:end="6735:69"><name pos:start="6735:59" pos:end="6735:69">CPUX86State</name></expr></argument>,<argument pos:start="6735:71" pos:end="6735:77"><expr pos:start="6735:71" pos:end="6735:77"><name pos:start="6735:71" pos:end="6735:77"><name pos:start="6735:71" pos:end="6735:72">dr</name><index pos:start="6735:73" pos:end="6735:77">[<expr pos:start="6735:74" pos:end="6735:76"><name pos:start="6735:74" pos:end="6735:76">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6737:17" pos:end="6737:42"><expr pos:start="6737:17" pos:end="6737:41"><call pos:start="6737:17" pos:end="6737:41"><name pos:start="6737:17" pos:end="6737:33">gen_op_mov_reg_T0</name><argument_list pos:start="6737:34" pos:end="6737:41">(<argument pos:start="6737:35" pos:end="6737:36"><expr pos:start="6737:35" pos:end="6737:36"><name pos:start="6737:35" pos:end="6737:36">ot</name></expr></argument>, <argument pos:start="6737:39" pos:end="6737:40"><expr pos:start="6737:39" pos:end="6737:40"><name pos:start="6737:39" pos:end="6737:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6743:9" pos:end="6743:14">break;</break>

    <case pos:start="6745:5" pos:end="6745:15">case <expr pos:start="6745:10" pos:end="6745:14"><literal type="number" pos:start="6745:10" pos:end="6745:14">0x106</literal></expr>:</case> <comment type="block" pos:start="6745:17" pos:end="6745:26">/* clts */</comment>

        <if_stmt pos:start="6747:9" pos:end="6763:9"><if pos:start="6747:9" pos:end="6751:9">if <condition pos:start="6747:12" pos:end="6747:24">(<expr pos:start="6747:13" pos:end="6747:23"><name pos:start="6747:13" pos:end="6747:18"><name pos:start="6747:13" pos:end="6747:13">s</name><operator pos:start="6747:14" pos:end="6747:15">-&gt;</operator><name pos:start="6747:16" pos:end="6747:18">cpl</name></name> <operator pos:start="6747:20" pos:end="6747:21">!=</operator> <literal type="number" pos:start="6747:23" pos:end="6747:23">0</literal></expr>)</condition> <block pos:start="6747:26" pos:end="6751:9">{<block_content pos:start="6749:13" pos:end="6749:64">

            <expr_stmt pos:start="6749:13" pos:end="6749:64"><expr pos:start="6749:13" pos:end="6749:63"><call pos:start="6749:13" pos:end="6749:63"><name pos:start="6749:13" pos:end="6749:25">gen_exception</name><argument_list pos:start="6749:26" pos:end="6749:63">(<argument pos:start="6749:27" pos:end="6749:27"><expr pos:start="6749:27" pos:end="6749:27"><name pos:start="6749:27" pos:end="6749:27">s</name></expr></argument>, <argument pos:start="6749:30" pos:end="6749:39"><expr pos:start="6749:30" pos:end="6749:39"><name pos:start="6749:30" pos:end="6749:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6749:42" pos:end="6749:62"><expr pos:start="6749:42" pos:end="6749:62"><name pos:start="6749:42" pos:end="6749:49">pc_start</name> <operator pos:start="6749:51" pos:end="6749:51">-</operator> <name pos:start="6749:53" pos:end="6749:62"><name pos:start="6749:53" pos:end="6749:53">s</name><operator pos:start="6749:54" pos:end="6749:55">-&gt;</operator><name pos:start="6749:56" pos:end="6749:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6751:11" pos:end="6763:9">else <block pos:start="6751:16" pos:end="6763:9">{<block_content pos:start="6753:13" pos:end="6761:23">

            <expr_stmt pos:start="6753:13" pos:end="6753:69"><expr pos:start="6753:13" pos:end="6753:68"><call pos:start="6753:13" pos:end="6753:68"><name pos:start="6753:13" pos:end="6753:35">gen_svm_check_intercept</name><argument_list pos:start="6753:36" pos:end="6753:68">(<argument pos:start="6753:37" pos:end="6753:37"><expr pos:start="6753:37" pos:end="6753:37"><name pos:start="6753:37" pos:end="6753:37">s</name></expr></argument>, <argument pos:start="6753:40" pos:end="6753:47"><expr pos:start="6753:40" pos:end="6753:47"><name pos:start="6753:40" pos:end="6753:47">pc_start</name></expr></argument>, <argument pos:start="6753:50" pos:end="6753:67"><expr pos:start="6753:50" pos:end="6753:67"><name pos:start="6753:50" pos:end="6753:67">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6755:13" pos:end="6755:30"><expr pos:start="6755:13" pos:end="6755:29"><call pos:start="6755:13" pos:end="6755:29"><name pos:start="6755:13" pos:end="6755:27">gen_helper_clts</name><argument_list pos:start="6755:28" pos:end="6755:29">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6757:13" pos:end="6757:62">/* abort block because static cpu state changed */</comment>

            <expr_stmt pos:start="6759:13" pos:end="6759:43"><expr pos:start="6759:13" pos:end="6759:42"><call pos:start="6759:13" pos:end="6759:42"><name pos:start="6759:13" pos:end="6759:22">gen_jmp_im</name><argument_list pos:start="6759:23" pos:end="6759:42">(<argument pos:start="6759:24" pos:end="6759:41"><expr pos:start="6759:24" pos:end="6759:41"><name pos:start="6759:24" pos:end="6759:28"><name pos:start="6759:24" pos:end="6759:24">s</name><operator pos:start="6759:25" pos:end="6759:26">-&gt;</operator><name pos:start="6759:27" pos:end="6759:28">pc</name></name> <operator pos:start="6759:30" pos:end="6759:30">-</operator> <name pos:start="6759:32" pos:end="6759:41"><name pos:start="6759:32" pos:end="6759:32">s</name><operator pos:start="6759:33" pos:end="6759:34">-&gt;</operator><name pos:start="6759:35" pos:end="6759:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6761:13" pos:end="6761:23"><expr pos:start="6761:13" pos:end="6761:22"><call pos:start="6761:13" pos:end="6761:22"><name pos:start="6761:13" pos:end="6761:19">gen_eob</name><argument_list pos:start="6761:20" pos:end="6761:22">(<argument pos:start="6761:21" pos:end="6761:21"><expr pos:start="6761:21" pos:end="6761:21"><name pos:start="6761:21" pos:end="6761:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6765:9" pos:end="6765:14">break;</break>

    <comment type="block" pos:start="6767:5" pos:end="6767:53">/* MMX/3DNow!/SSE/SSE2/SSE3/SSSE3/SSE4 support */</comment>

    <case pos:start="6769:5" pos:end="6769:15">case <expr pos:start="6769:10" pos:end="6769:14"><literal type="number" pos:start="6769:10" pos:end="6769:14">0x1c3</literal></expr>:</case> <comment type="block" pos:start="6769:17" pos:end="6769:37">/* MOVNTI reg, mem */</comment>

        <if_stmt pos:start="6771:9" pos:end="6773:28"><if pos:start="6771:9" pos:end="6773:28">if <condition pos:start="6771:12" pos:end="6771:46">(<expr pos:start="6771:13" pos:end="6771:45"><operator pos:start="6771:13" pos:end="6771:13">!</operator><operator pos:start="6771:14" pos:end="6771:14">(</operator><name pos:start="6771:15" pos:end="6771:31"><name pos:start="6771:15" pos:end="6771:15">s</name><operator pos:start="6771:16" pos:end="6771:17">-&gt;</operator><name pos:start="6771:18" pos:end="6771:31">cpuid_features</name></name> <operator pos:start="6771:33" pos:end="6771:33">&amp;</operator> <name pos:start="6771:35" pos:end="6771:44">CPUID_SSE2</name><operator pos:start="6771:45" pos:end="6771:45">)</operator></expr>)</condition><block type="pseudo" pos:start="6773:13" pos:end="6773:28"><block_content pos:start="6773:13" pos:end="6773:28">

            <goto pos:start="6773:13" pos:end="6773:28">goto <name pos:start="6773:18" pos:end="6773:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="6775:9" pos:end="6775:47"><expr pos:start="6775:9" pos:end="6775:46"><name pos:start="6775:9" pos:end="6775:10">ot</name> <operator pos:start="6775:12" pos:end="6775:12">=</operator> <ternary pos:start="6775:14" pos:end="6775:46"><condition pos:start="6775:14" pos:end="6775:28"><expr pos:start="6775:14" pos:end="6775:26"><name pos:start="6775:14" pos:end="6775:21"><name pos:start="6775:14" pos:end="6775:14">s</name><operator pos:start="6775:15" pos:end="6775:16">-&gt;</operator><name pos:start="6775:17" pos:end="6775:21">dflag</name></name> <operator pos:start="6775:23" pos:end="6775:24">==</operator> <literal type="number" pos:start="6775:26" pos:end="6775:26">2</literal></expr> ?</condition><then pos:start="6775:30" pos:end="6775:36"> <expr pos:start="6775:30" pos:end="6775:36"><name pos:start="6775:30" pos:end="6775:36">OT_QUAD</name></expr> </then><else pos:start="6775:38" pos:end="6775:46">: <expr pos:start="6775:40" pos:end="6775:46"><name pos:start="6775:40" pos:end="6775:46">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="6777:9" pos:end="6777:35"><expr pos:start="6777:9" pos:end="6777:34"><name pos:start="6777:9" pos:end="6777:13">modrm</name> <operator pos:start="6777:15" pos:end="6777:15">=</operator> <call pos:start="6777:17" pos:end="6777:34"><name pos:start="6777:17" pos:end="6777:25">ldub_code</name><argument_list pos:start="6777:26" pos:end="6777:34">(<argument pos:start="6777:27" pos:end="6777:33"><expr pos:start="6777:27" pos:end="6777:33"><name pos:start="6777:27" pos:end="6777:31"><name pos:start="6777:27" pos:end="6777:27">s</name><operator pos:start="6777:28" pos:end="6777:29">-&gt;</operator><name pos:start="6777:30" pos:end="6777:31">pc</name></name><operator pos:start="6777:32" pos:end="6777:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6779:9" pos:end="6779:31"><expr pos:start="6779:9" pos:end="6779:30"><name pos:start="6779:9" pos:end="6779:11">mod</name> <operator pos:start="6779:13" pos:end="6779:13">=</operator> <operator pos:start="6779:15" pos:end="6779:15">(</operator><name pos:start="6779:16" pos:end="6779:20">modrm</name> <operator pos:start="6779:22" pos:end="6779:23">&gt;&gt;</operator> <literal type="number" pos:start="6779:25" pos:end="6779:25">6</literal><operator pos:start="6779:26" pos:end="6779:26">)</operator> <operator pos:start="6779:28" pos:end="6779:28">&amp;</operator> <literal type="number" pos:start="6779:30" pos:end="6779:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="6781:9" pos:end="6783:28"><if pos:start="6781:9" pos:end="6783:28">if <condition pos:start="6781:12" pos:end="6781:21">(<expr pos:start="6781:13" pos:end="6781:20"><name pos:start="6781:13" pos:end="6781:15">mod</name> <operator pos:start="6781:17" pos:end="6781:18">==</operator> <literal type="number" pos:start="6781:20" pos:end="6781:20">3</literal></expr>)</condition><block type="pseudo" pos:start="6783:13" pos:end="6783:28"><block_content pos:start="6783:13" pos:end="6783:28">

            <goto pos:start="6783:13" pos:end="6783:28">goto <name pos:start="6783:18" pos:end="6783:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="6785:9" pos:end="6785:41"><expr pos:start="6785:9" pos:end="6785:40"><name pos:start="6785:9" pos:end="6785:11">reg</name> <operator pos:start="6785:13" pos:end="6785:13">=</operator> <operator pos:start="6785:15" pos:end="6785:15">(</operator><operator pos:start="6785:16" pos:end="6785:16">(</operator><name pos:start="6785:17" pos:end="6785:21">modrm</name> <operator pos:start="6785:23" pos:end="6785:24">&gt;&gt;</operator> <literal type="number" pos:start="6785:26" pos:end="6785:26">3</literal><operator pos:start="6785:27" pos:end="6785:27">)</operator> <operator pos:start="6785:29" pos:end="6785:29">&amp;</operator> <literal type="number" pos:start="6785:31" pos:end="6785:31">7</literal><operator pos:start="6785:32" pos:end="6785:32">)</operator> <operator pos:start="6785:34" pos:end="6785:34">|</operator> <name pos:start="6785:36" pos:end="6785:40">rex_r</name></expr>;</expr_stmt>

        <comment type="block" pos:start="6787:9" pos:end="6787:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="6789:9" pos:end="6789:45"><expr pos:start="6789:9" pos:end="6789:44"><call pos:start="6789:9" pos:end="6789:44"><name pos:start="6789:9" pos:end="6789:22">gen_ldst_modrm</name><argument_list pos:start="6789:23" pos:end="6789:44">(<argument pos:start="6789:24" pos:end="6789:24"><expr pos:start="6789:24" pos:end="6789:24"><name pos:start="6789:24" pos:end="6789:24">s</name></expr></argument>, <argument pos:start="6789:27" pos:end="6789:31"><expr pos:start="6789:27" pos:end="6789:31"><name pos:start="6789:27" pos:end="6789:31">modrm</name></expr></argument>, <argument pos:start="6789:34" pos:end="6789:35"><expr pos:start="6789:34" pos:end="6789:35"><name pos:start="6789:34" pos:end="6789:35">ot</name></expr></argument>, <argument pos:start="6789:38" pos:end="6789:40"><expr pos:start="6789:38" pos:end="6789:40"><name pos:start="6789:38" pos:end="6789:40">reg</name></expr></argument>, <argument pos:start="6789:43" pos:end="6789:43"><expr pos:start="6789:43" pos:end="6789:43"><literal type="number" pos:start="6789:43" pos:end="6789:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6791:9" pos:end="6791:14">break;</break>

    <case pos:start="6793:5" pos:end="6793:15">case <expr pos:start="6793:10" pos:end="6793:14"><literal type="number" pos:start="6793:10" pos:end="6793:14">0x1ae</literal></expr>:</case>

        <expr_stmt pos:start="6795:9" pos:end="6795:35"><expr pos:start="6795:9" pos:end="6795:34"><name pos:start="6795:9" pos:end="6795:13">modrm</name> <operator pos:start="6795:15" pos:end="6795:15">=</operator> <call pos:start="6795:17" pos:end="6795:34"><name pos:start="6795:17" pos:end="6795:25">ldub_code</name><argument_list pos:start="6795:26" pos:end="6795:34">(<argument pos:start="6795:27" pos:end="6795:33"><expr pos:start="6795:27" pos:end="6795:33"><name pos:start="6795:27" pos:end="6795:31"><name pos:start="6795:27" pos:end="6795:27">s</name><operator pos:start="6795:28" pos:end="6795:29">-&gt;</operator><name pos:start="6795:30" pos:end="6795:31">pc</name></name><operator pos:start="6795:32" pos:end="6795:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6797:9" pos:end="6797:31"><expr pos:start="6797:9" pos:end="6797:30"><name pos:start="6797:9" pos:end="6797:11">mod</name> <operator pos:start="6797:13" pos:end="6797:13">=</operator> <operator pos:start="6797:15" pos:end="6797:15">(</operator><name pos:start="6797:16" pos:end="6797:20">modrm</name> <operator pos:start="6797:22" pos:end="6797:23">&gt;&gt;</operator> <literal type="number" pos:start="6797:25" pos:end="6797:25">6</literal><operator pos:start="6797:26" pos:end="6797:26">)</operator> <operator pos:start="6797:28" pos:end="6797:28">&amp;</operator> <literal type="number" pos:start="6797:30" pos:end="6797:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="6799:9" pos:end="6799:30"><expr pos:start="6799:9" pos:end="6799:29"><name pos:start="6799:9" pos:end="6799:10">op</name> <operator pos:start="6799:12" pos:end="6799:12">=</operator> <operator pos:start="6799:14" pos:end="6799:14">(</operator><name pos:start="6799:15" pos:end="6799:19">modrm</name> <operator pos:start="6799:21" pos:end="6799:22">&gt;&gt;</operator> <literal type="number" pos:start="6799:24" pos:end="6799:24">3</literal><operator pos:start="6799:25" pos:end="6799:25">)</operator> <operator pos:start="6799:27" pos:end="6799:27">&amp;</operator> <literal type="number" pos:start="6799:29" pos:end="6799:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="6801:9" pos:end="6935:9">switch<condition pos:start="6801:15" pos:end="6801:18">(<expr pos:start="6801:16" pos:end="6801:17"><name pos:start="6801:16" pos:end="6801:17">op</name></expr>)</condition> <block pos:start="6801:20" pos:end="6935:9">{<block_content pos:start="6803:9" pos:end="6933:28">

        <case pos:start="6803:9" pos:end="6803:15">case <expr pos:start="6803:14" pos:end="6803:14"><literal type="number" pos:start="6803:14" pos:end="6803:14">0</literal></expr>:</case> <comment type="block" pos:start="6803:17" pos:end="6803:28">/* fxsave */</comment>

            <if_stmt pos:start="6805:13" pos:end="6809:32"><if pos:start="6805:13" pos:end="6809:32">if <condition pos:start="6805:16" pos:end="6807:40">(<expr pos:start="6805:17" pos:end="6807:39"><name pos:start="6805:17" pos:end="6805:19">mod</name> <operator pos:start="6805:21" pos:end="6805:22">==</operator> <literal type="number" pos:start="6805:24" pos:end="6805:24">3</literal> <operator pos:start="6805:26" pos:end="6805:27">||</operator> <operator pos:start="6805:29" pos:end="6805:29">!</operator><operator pos:start="6805:30" pos:end="6805:30">(</operator><name pos:start="6805:31" pos:end="6805:47"><name pos:start="6805:31" pos:end="6805:31">s</name><operator pos:start="6805:32" pos:end="6805:33">-&gt;</operator><name pos:start="6805:34" pos:end="6805:47">cpuid_features</name></name> <operator pos:start="6805:49" pos:end="6805:49">&amp;</operator> <name pos:start="6805:51" pos:end="6805:60">CPUID_FXSR</name><operator pos:start="6805:61" pos:end="6805:61">)</operator> <operator pos:start="6805:63" pos:end="6805:64">||</operator>

                <operator pos:start="6807:17" pos:end="6807:17">(</operator><name pos:start="6807:18" pos:end="6807:25"><name pos:start="6807:18" pos:end="6807:18">s</name><operator pos:start="6807:19" pos:end="6807:20">-&gt;</operator><name pos:start="6807:21" pos:end="6807:25">flags</name></name> <operator pos:start="6807:27" pos:end="6807:27">&amp;</operator> <name pos:start="6807:29" pos:end="6807:38">HF_EM_MASK</name><operator pos:start="6807:39" pos:end="6807:39">)</operator></expr>)</condition><block type="pseudo" pos:start="6809:17" pos:end="6809:32"><block_content pos:start="6809:17" pos:end="6809:32">

                <goto pos:start="6809:17" pos:end="6809:32">goto <name pos:start="6809:22" pos:end="6809:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6811:13" pos:end="6817:13"><if pos:start="6811:13" pos:end="6817:13">if <condition pos:start="6811:16" pos:end="6811:38">(<expr pos:start="6811:17" pos:end="6811:37"><name pos:start="6811:17" pos:end="6811:24"><name pos:start="6811:17" pos:end="6811:17">s</name><operator pos:start="6811:18" pos:end="6811:19">-&gt;</operator><name pos:start="6811:20" pos:end="6811:24">flags</name></name> <operator pos:start="6811:26" pos:end="6811:26">&amp;</operator> <name pos:start="6811:28" pos:end="6811:37">HF_TS_MASK</name></expr>)</condition> <block pos:start="6811:40" pos:end="6817:13">{<block_content pos:start="6813:17" pos:end="6815:22">

                <expr_stmt pos:start="6813:17" pos:end="6813:69"><expr pos:start="6813:17" pos:end="6813:68"><call pos:start="6813:17" pos:end="6813:68"><name pos:start="6813:17" pos:end="6813:29">gen_exception</name><argument_list pos:start="6813:30" pos:end="6813:68">(<argument pos:start="6813:31" pos:end="6813:31"><expr pos:start="6813:31" pos:end="6813:31"><name pos:start="6813:31" pos:end="6813:31">s</name></expr></argument>, <argument pos:start="6813:34" pos:end="6813:44"><expr pos:start="6813:34" pos:end="6813:44"><name pos:start="6813:34" pos:end="6813:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="6813:47" pos:end="6813:67"><expr pos:start="6813:47" pos:end="6813:67"><name pos:start="6813:47" pos:end="6813:54">pc_start</name> <operator pos:start="6813:56" pos:end="6813:56">-</operator> <name pos:start="6813:58" pos:end="6813:67"><name pos:start="6813:58" pos:end="6813:58">s</name><operator pos:start="6813:59" pos:end="6813:60">-&gt;</operator><name pos:start="6813:61" pos:end="6813:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6815:17" pos:end="6815:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6819:13" pos:end="6819:61"><expr pos:start="6819:13" pos:end="6819:60"><call pos:start="6819:13" pos:end="6819:60"><name pos:start="6819:13" pos:end="6819:25">gen_lea_modrm</name><argument_list pos:start="6819:26" pos:end="6819:60">(<argument pos:start="6819:27" pos:end="6819:27"><expr pos:start="6819:27" pos:end="6819:27"><name pos:start="6819:27" pos:end="6819:27">s</name></expr></argument>, <argument pos:start="6819:30" pos:end="6819:34"><expr pos:start="6819:30" pos:end="6819:34"><name pos:start="6819:30" pos:end="6819:34">modrm</name></expr></argument>, <argument pos:start="6819:37" pos:end="6819:45"><expr pos:start="6819:37" pos:end="6819:45"><operator pos:start="6819:37" pos:end="6819:37">&amp;</operator><name pos:start="6819:38" pos:end="6819:45">reg_addr</name></expr></argument>, <argument pos:start="6819:48" pos:end="6819:59"><expr pos:start="6819:48" pos:end="6819:59"><operator pos:start="6819:48" pos:end="6819:48">&amp;</operator><name pos:start="6819:49" pos:end="6819:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6821:13" pos:end="6823:43"><if pos:start="6821:13" pos:end="6823:43">if <condition pos:start="6821:16" pos:end="6821:42">(<expr pos:start="6821:17" pos:end="6821:41"><name pos:start="6821:17" pos:end="6821:24"><name pos:start="6821:17" pos:end="6821:17">s</name><operator pos:start="6821:18" pos:end="6821:19">-&gt;</operator><name pos:start="6821:20" pos:end="6821:24">cc_op</name></name> <operator pos:start="6821:26" pos:end="6821:27">!=</operator> <name pos:start="6821:29" pos:end="6821:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6823:17" pos:end="6823:43"><block_content pos:start="6823:17" pos:end="6823:43">

                <expr_stmt pos:start="6823:17" pos:end="6823:43"><expr pos:start="6823:17" pos:end="6823:42"><call pos:start="6823:17" pos:end="6823:42"><name pos:start="6823:17" pos:end="6823:32">gen_op_set_cc_op</name><argument_list pos:start="6823:33" pos:end="6823:42">(<argument pos:start="6823:34" pos:end="6823:41"><expr pos:start="6823:34" pos:end="6823:41"><name pos:start="6823:34" pos:end="6823:41"><name pos:start="6823:34" pos:end="6823:34">s</name><operator pos:start="6823:35" pos:end="6823:36">-&gt;</operator><name pos:start="6823:37" pos:end="6823:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6825:13" pos:end="6825:46"><expr pos:start="6825:13" pos:end="6825:45"><call pos:start="6825:13" pos:end="6825:45"><name pos:start="6825:13" pos:end="6825:22">gen_jmp_im</name><argument_list pos:start="6825:23" pos:end="6825:45">(<argument pos:start="6825:24" pos:end="6825:44"><expr pos:start="6825:24" pos:end="6825:44"><name pos:start="6825:24" pos:end="6825:31">pc_start</name> <operator pos:start="6825:33" pos:end="6825:33">-</operator> <name pos:start="6825:35" pos:end="6825:44"><name pos:start="6825:35" pos:end="6825:35">s</name><operator pos:start="6825:36" pos:end="6825:37">-&gt;</operator><name pos:start="6825:38" pos:end="6825:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6827:13" pos:end="6827:70"><expr pos:start="6827:13" pos:end="6827:69"><call pos:start="6827:13" pos:end="6827:69"><name pos:start="6827:13" pos:end="6827:29">gen_helper_fxsave</name><argument_list pos:start="6827:30" pos:end="6827:69">(<argument pos:start="6827:31" pos:end="6827:36"><expr pos:start="6827:31" pos:end="6827:36"><name pos:start="6827:31" pos:end="6827:36">cpu_A0</name></expr></argument>, <argument pos:start="6827:39" pos:end="6827:68"><expr pos:start="6827:39" pos:end="6827:68"><call pos:start="6827:39" pos:end="6827:68"><name pos:start="6827:39" pos:end="6827:51">tcg_const_i32</name><argument_list pos:start="6827:52" pos:end="6827:68">(<argument pos:start="6827:53" pos:end="6827:67"><expr pos:start="6827:53" pos:end="6827:67"><operator pos:start="6827:53" pos:end="6827:53">(</operator><name pos:start="6827:54" pos:end="6827:61"><name pos:start="6827:54" pos:end="6827:54">s</name><operator pos:start="6827:55" pos:end="6827:56">-&gt;</operator><name pos:start="6827:57" pos:end="6827:61">dflag</name></name> <operator pos:start="6827:63" pos:end="6827:64">==</operator> <literal type="number" pos:start="6827:66" pos:end="6827:66">2</literal><operator pos:start="6827:67" pos:end="6827:67">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6829:13" pos:end="6829:18">break;</break>

        <case pos:start="6831:9" pos:end="6831:15">case <expr pos:start="6831:14" pos:end="6831:14"><literal type="number" pos:start="6831:14" pos:end="6831:14">1</literal></expr>:</case> <comment type="block" pos:start="6831:17" pos:end="6831:29">/* fxrstor */</comment>

            <if_stmt pos:start="6833:13" pos:end="6837:32"><if pos:start="6833:13" pos:end="6837:32">if <condition pos:start="6833:16" pos:end="6835:40">(<expr pos:start="6833:17" pos:end="6835:39"><name pos:start="6833:17" pos:end="6833:19">mod</name> <operator pos:start="6833:21" pos:end="6833:22">==</operator> <literal type="number" pos:start="6833:24" pos:end="6833:24">3</literal> <operator pos:start="6833:26" pos:end="6833:27">||</operator> <operator pos:start="6833:29" pos:end="6833:29">!</operator><operator pos:start="6833:30" pos:end="6833:30">(</operator><name pos:start="6833:31" pos:end="6833:47"><name pos:start="6833:31" pos:end="6833:31">s</name><operator pos:start="6833:32" pos:end="6833:33">-&gt;</operator><name pos:start="6833:34" pos:end="6833:47">cpuid_features</name></name> <operator pos:start="6833:49" pos:end="6833:49">&amp;</operator> <name pos:start="6833:51" pos:end="6833:60">CPUID_FXSR</name><operator pos:start="6833:61" pos:end="6833:61">)</operator> <operator pos:start="6833:63" pos:end="6833:64">||</operator>

                <operator pos:start="6835:17" pos:end="6835:17">(</operator><name pos:start="6835:18" pos:end="6835:25"><name pos:start="6835:18" pos:end="6835:18">s</name><operator pos:start="6835:19" pos:end="6835:20">-&gt;</operator><name pos:start="6835:21" pos:end="6835:25">flags</name></name> <operator pos:start="6835:27" pos:end="6835:27">&amp;</operator> <name pos:start="6835:29" pos:end="6835:38">HF_EM_MASK</name><operator pos:start="6835:39" pos:end="6835:39">)</operator></expr>)</condition><block type="pseudo" pos:start="6837:17" pos:end="6837:32"><block_content pos:start="6837:17" pos:end="6837:32">

                <goto pos:start="6837:17" pos:end="6837:32">goto <name pos:start="6837:22" pos:end="6837:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6839:13" pos:end="6845:13"><if pos:start="6839:13" pos:end="6845:13">if <condition pos:start="6839:16" pos:end="6839:38">(<expr pos:start="6839:17" pos:end="6839:37"><name pos:start="6839:17" pos:end="6839:24"><name pos:start="6839:17" pos:end="6839:17">s</name><operator pos:start="6839:18" pos:end="6839:19">-&gt;</operator><name pos:start="6839:20" pos:end="6839:24">flags</name></name> <operator pos:start="6839:26" pos:end="6839:26">&amp;</operator> <name pos:start="6839:28" pos:end="6839:37">HF_TS_MASK</name></expr>)</condition> <block pos:start="6839:40" pos:end="6845:13">{<block_content pos:start="6841:17" pos:end="6843:22">

                <expr_stmt pos:start="6841:17" pos:end="6841:69"><expr pos:start="6841:17" pos:end="6841:68"><call pos:start="6841:17" pos:end="6841:68"><name pos:start="6841:17" pos:end="6841:29">gen_exception</name><argument_list pos:start="6841:30" pos:end="6841:68">(<argument pos:start="6841:31" pos:end="6841:31"><expr pos:start="6841:31" pos:end="6841:31"><name pos:start="6841:31" pos:end="6841:31">s</name></expr></argument>, <argument pos:start="6841:34" pos:end="6841:44"><expr pos:start="6841:34" pos:end="6841:44"><name pos:start="6841:34" pos:end="6841:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="6841:47" pos:end="6841:67"><expr pos:start="6841:47" pos:end="6841:67"><name pos:start="6841:47" pos:end="6841:54">pc_start</name> <operator pos:start="6841:56" pos:end="6841:56">-</operator> <name pos:start="6841:58" pos:end="6841:67"><name pos:start="6841:58" pos:end="6841:58">s</name><operator pos:start="6841:59" pos:end="6841:60">-&gt;</operator><name pos:start="6841:61" pos:end="6841:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6843:17" pos:end="6843:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6847:13" pos:end="6847:61"><expr pos:start="6847:13" pos:end="6847:60"><call pos:start="6847:13" pos:end="6847:60"><name pos:start="6847:13" pos:end="6847:25">gen_lea_modrm</name><argument_list pos:start="6847:26" pos:end="6847:60">(<argument pos:start="6847:27" pos:end="6847:27"><expr pos:start="6847:27" pos:end="6847:27"><name pos:start="6847:27" pos:end="6847:27">s</name></expr></argument>, <argument pos:start="6847:30" pos:end="6847:34"><expr pos:start="6847:30" pos:end="6847:34"><name pos:start="6847:30" pos:end="6847:34">modrm</name></expr></argument>, <argument pos:start="6847:37" pos:end="6847:45"><expr pos:start="6847:37" pos:end="6847:45"><operator pos:start="6847:37" pos:end="6847:37">&amp;</operator><name pos:start="6847:38" pos:end="6847:45">reg_addr</name></expr></argument>, <argument pos:start="6847:48" pos:end="6847:59"><expr pos:start="6847:48" pos:end="6847:59"><operator pos:start="6847:48" pos:end="6847:48">&amp;</operator><name pos:start="6847:49" pos:end="6847:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6849:13" pos:end="6851:43"><if pos:start="6849:13" pos:end="6851:43">if <condition pos:start="6849:16" pos:end="6849:42">(<expr pos:start="6849:17" pos:end="6849:41"><name pos:start="6849:17" pos:end="6849:24"><name pos:start="6849:17" pos:end="6849:17">s</name><operator pos:start="6849:18" pos:end="6849:19">-&gt;</operator><name pos:start="6849:20" pos:end="6849:24">cc_op</name></name> <operator pos:start="6849:26" pos:end="6849:27">!=</operator> <name pos:start="6849:29" pos:end="6849:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6851:17" pos:end="6851:43"><block_content pos:start="6851:17" pos:end="6851:43">

                <expr_stmt pos:start="6851:17" pos:end="6851:43"><expr pos:start="6851:17" pos:end="6851:42"><call pos:start="6851:17" pos:end="6851:42"><name pos:start="6851:17" pos:end="6851:32">gen_op_set_cc_op</name><argument_list pos:start="6851:33" pos:end="6851:42">(<argument pos:start="6851:34" pos:end="6851:41"><expr pos:start="6851:34" pos:end="6851:41"><name pos:start="6851:34" pos:end="6851:41"><name pos:start="6851:34" pos:end="6851:34">s</name><operator pos:start="6851:35" pos:end="6851:36">-&gt;</operator><name pos:start="6851:37" pos:end="6851:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6853:13" pos:end="6853:46"><expr pos:start="6853:13" pos:end="6853:45"><call pos:start="6853:13" pos:end="6853:45"><name pos:start="6853:13" pos:end="6853:22">gen_jmp_im</name><argument_list pos:start="6853:23" pos:end="6853:45">(<argument pos:start="6853:24" pos:end="6853:44"><expr pos:start="6853:24" pos:end="6853:44"><name pos:start="6853:24" pos:end="6853:31">pc_start</name> <operator pos:start="6853:33" pos:end="6853:33">-</operator> <name pos:start="6853:35" pos:end="6853:44"><name pos:start="6853:35" pos:end="6853:35">s</name><operator pos:start="6853:36" pos:end="6853:37">-&gt;</operator><name pos:start="6853:38" pos:end="6853:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6855:13" pos:end="6855:71"><expr pos:start="6855:13" pos:end="6855:70"><call pos:start="6855:13" pos:end="6855:70"><name pos:start="6855:13" pos:end="6855:30">gen_helper_fxrstor</name><argument_list pos:start="6855:31" pos:end="6855:70">(<argument pos:start="6855:32" pos:end="6855:37"><expr pos:start="6855:32" pos:end="6855:37"><name pos:start="6855:32" pos:end="6855:37">cpu_A0</name></expr></argument>, <argument pos:start="6855:40" pos:end="6855:69"><expr pos:start="6855:40" pos:end="6855:69"><call pos:start="6855:40" pos:end="6855:69"><name pos:start="6855:40" pos:end="6855:52">tcg_const_i32</name><argument_list pos:start="6855:53" pos:end="6855:69">(<argument pos:start="6855:54" pos:end="6855:68"><expr pos:start="6855:54" pos:end="6855:68"><operator pos:start="6855:54" pos:end="6855:54">(</operator><name pos:start="6855:55" pos:end="6855:62"><name pos:start="6855:55" pos:end="6855:55">s</name><operator pos:start="6855:56" pos:end="6855:57">-&gt;</operator><name pos:start="6855:58" pos:end="6855:62">dflag</name></name> <operator pos:start="6855:64" pos:end="6855:65">==</operator> <literal type="number" pos:start="6855:67" pos:end="6855:67">2</literal><operator pos:start="6855:68" pos:end="6855:68">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6857:13" pos:end="6857:18">break;</break>

        <case pos:start="6859:9" pos:end="6859:15">case <expr pos:start="6859:14" pos:end="6859:14"><literal type="number" pos:start="6859:14" pos:end="6859:14">2</literal></expr>:</case> <comment type="block" pos:start="6859:17" pos:end="6859:29">/* ldmxcsr */</comment>

        <case pos:start="6861:9" pos:end="6861:15">case <expr pos:start="6861:14" pos:end="6861:14"><literal type="number" pos:start="6861:14" pos:end="6861:14">3</literal></expr>:</case> <comment type="block" pos:start="6861:17" pos:end="6861:29">/* stmxcsr */</comment>

            <if_stmt pos:start="6863:13" pos:end="6869:13"><if pos:start="6863:13" pos:end="6869:13">if <condition pos:start="6863:16" pos:end="6863:38">(<expr pos:start="6863:17" pos:end="6863:37"><name pos:start="6863:17" pos:end="6863:24"><name pos:start="6863:17" pos:end="6863:17">s</name><operator pos:start="6863:18" pos:end="6863:19">-&gt;</operator><name pos:start="6863:20" pos:end="6863:24">flags</name></name> <operator pos:start="6863:26" pos:end="6863:26">&amp;</operator> <name pos:start="6863:28" pos:end="6863:37">HF_TS_MASK</name></expr>)</condition> <block pos:start="6863:40" pos:end="6869:13">{<block_content pos:start="6865:17" pos:end="6867:22">

                <expr_stmt pos:start="6865:17" pos:end="6865:69"><expr pos:start="6865:17" pos:end="6865:68"><call pos:start="6865:17" pos:end="6865:68"><name pos:start="6865:17" pos:end="6865:29">gen_exception</name><argument_list pos:start="6865:30" pos:end="6865:68">(<argument pos:start="6865:31" pos:end="6865:31"><expr pos:start="6865:31" pos:end="6865:31"><name pos:start="6865:31" pos:end="6865:31">s</name></expr></argument>, <argument pos:start="6865:34" pos:end="6865:44"><expr pos:start="6865:34" pos:end="6865:44"><name pos:start="6865:34" pos:end="6865:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="6865:47" pos:end="6865:67"><expr pos:start="6865:47" pos:end="6865:67"><name pos:start="6865:47" pos:end="6865:54">pc_start</name> <operator pos:start="6865:56" pos:end="6865:56">-</operator> <name pos:start="6865:58" pos:end="6865:67"><name pos:start="6865:58" pos:end="6865:58">s</name><operator pos:start="6865:59" pos:end="6865:60">-&gt;</operator><name pos:start="6865:61" pos:end="6865:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6867:17" pos:end="6867:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="6871:13" pos:end="6875:32"><if pos:start="6871:13" pos:end="6875:32">if <condition pos:start="6871:16" pos:end="6873:25">(<expr pos:start="6871:17" pos:end="6873:24"><operator pos:start="6871:17" pos:end="6871:17">(</operator><name pos:start="6871:18" pos:end="6871:25"><name pos:start="6871:18" pos:end="6871:18">s</name><operator pos:start="6871:19" pos:end="6871:20">-&gt;</operator><name pos:start="6871:21" pos:end="6871:25">flags</name></name> <operator pos:start="6871:27" pos:end="6871:27">&amp;</operator> <name pos:start="6871:29" pos:end="6871:38">HF_EM_MASK</name><operator pos:start="6871:39" pos:end="6871:39">)</operator> <operator pos:start="6871:41" pos:end="6871:42">||</operator> <operator pos:start="6871:44" pos:end="6871:44">!</operator><operator pos:start="6871:45" pos:end="6871:45">(</operator><name pos:start="6871:46" pos:end="6871:53"><name pos:start="6871:46" pos:end="6871:46">s</name><operator pos:start="6871:47" pos:end="6871:48">-&gt;</operator><name pos:start="6871:49" pos:end="6871:53">flags</name></name> <operator pos:start="6871:55" pos:end="6871:55">&amp;</operator> <name pos:start="6871:57" pos:end="6871:70">HF_OSFXSR_MASK</name><operator pos:start="6871:71" pos:end="6871:71">)</operator> <operator pos:start="6871:73" pos:end="6871:74">||</operator>

                <name pos:start="6873:17" pos:end="6873:19">mod</name> <operator pos:start="6873:21" pos:end="6873:22">==</operator> <literal type="number" pos:start="6873:24" pos:end="6873:24">3</literal></expr>)</condition><block type="pseudo" pos:start="6875:17" pos:end="6875:32"><block_content pos:start="6875:17" pos:end="6875:32">

                <goto pos:start="6875:17" pos:end="6875:32">goto <name pos:start="6875:22" pos:end="6875:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6877:13" pos:end="6877:61"><expr pos:start="6877:13" pos:end="6877:60"><call pos:start="6877:13" pos:end="6877:60"><name pos:start="6877:13" pos:end="6877:25">gen_lea_modrm</name><argument_list pos:start="6877:26" pos:end="6877:60">(<argument pos:start="6877:27" pos:end="6877:27"><expr pos:start="6877:27" pos:end="6877:27"><name pos:start="6877:27" pos:end="6877:27">s</name></expr></argument>, <argument pos:start="6877:30" pos:end="6877:34"><expr pos:start="6877:30" pos:end="6877:34"><name pos:start="6877:30" pos:end="6877:34">modrm</name></expr></argument>, <argument pos:start="6877:37" pos:end="6877:45"><expr pos:start="6877:37" pos:end="6877:45"><operator pos:start="6877:37" pos:end="6877:37">&amp;</operator><name pos:start="6877:38" pos:end="6877:45">reg_addr</name></expr></argument>, <argument pos:start="6877:48" pos:end="6877:59"><expr pos:start="6877:48" pos:end="6877:59"><operator pos:start="6877:48" pos:end="6877:48">&amp;</operator><name pos:start="6877:49" pos:end="6877:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6879:13" pos:end="6891:13"><if pos:start="6879:13" pos:end="6885:13">if <condition pos:start="6879:16" pos:end="6879:24">(<expr pos:start="6879:17" pos:end="6879:23"><name pos:start="6879:17" pos:end="6879:18">op</name> <operator pos:start="6879:20" pos:end="6879:21">==</operator> <literal type="number" pos:start="6879:23" pos:end="6879:23">2</literal></expr>)</condition> <block pos:start="6879:26" pos:end="6885:13">{<block_content pos:start="6881:17" pos:end="6883:81">

                <expr_stmt pos:start="6881:17" pos:end="6881:56"><expr pos:start="6881:17" pos:end="6881:55"><call pos:start="6881:17" pos:end="6881:55"><name pos:start="6881:17" pos:end="6881:31">gen_op_ld_T0_A0</name><argument_list pos:start="6881:32" pos:end="6881:55">(<argument pos:start="6881:33" pos:end="6881:54"><expr pos:start="6881:33" pos:end="6881:54"><name pos:start="6881:33" pos:end="6881:39">OT_LONG</name> <operator pos:start="6881:41" pos:end="6881:41">+</operator> <name pos:start="6881:43" pos:end="6881:54"><name pos:start="6881:43" pos:end="6881:43">s</name><operator pos:start="6881:44" pos:end="6881:45">-&gt;</operator><name pos:start="6881:46" pos:end="6881:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6883:17" pos:end="6883:81"><expr pos:start="6883:17" pos:end="6883:80"><call pos:start="6883:17" pos:end="6883:80"><name pos:start="6883:17" pos:end="6883:31">tcg_gen_st32_tl</name><argument_list pos:start="6883:32" pos:end="6883:80">(<argument pos:start="6883:33" pos:end="6883:40"><expr pos:start="6883:33" pos:end="6883:40"><name pos:start="6883:33" pos:end="6883:40"><name pos:start="6883:33" pos:end="6883:37">cpu_T</name><index pos:start="6883:38" pos:end="6883:40">[<expr pos:start="6883:39" pos:end="6883:39"><literal type="number" pos:start="6883:39" pos:end="6883:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6883:43" pos:end="6883:49"><expr pos:start="6883:43" pos:end="6883:49"><name pos:start="6883:43" pos:end="6883:49">cpu_env</name></expr></argument>, <argument pos:start="6883:52" pos:end="6883:79"><expr pos:start="6883:52" pos:end="6883:79"><call pos:start="6883:52" pos:end="6883:79"><name pos:start="6883:52" pos:end="6883:59">offsetof</name><argument_list pos:start="6883:60" pos:end="6883:79">(<argument pos:start="6883:61" pos:end="6883:71"><expr pos:start="6883:61" pos:end="6883:71"><name pos:start="6883:61" pos:end="6883:71">CPUX86State</name></expr></argument>, <argument pos:start="6883:74" pos:end="6883:78"><expr pos:start="6883:74" pos:end="6883:78"><name pos:start="6883:74" pos:end="6883:78">mxcsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6885:15" pos:end="6891:13">else <block pos:start="6885:20" pos:end="6891:13">{<block_content pos:start="6887:17" pos:end="6889:56">

                <expr_stmt pos:start="6887:17" pos:end="6887:82"><expr pos:start="6887:17" pos:end="6887:81"><call pos:start="6887:17" pos:end="6887:81"><name pos:start="6887:17" pos:end="6887:32">tcg_gen_ld32u_tl</name><argument_list pos:start="6887:33" pos:end="6887:81">(<argument pos:start="6887:34" pos:end="6887:41"><expr pos:start="6887:34" pos:end="6887:41"><name pos:start="6887:34" pos:end="6887:41"><name pos:start="6887:34" pos:end="6887:38">cpu_T</name><index pos:start="6887:39" pos:end="6887:41">[<expr pos:start="6887:40" pos:end="6887:40"><literal type="number" pos:start="6887:40" pos:end="6887:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6887:44" pos:end="6887:50"><expr pos:start="6887:44" pos:end="6887:50"><name pos:start="6887:44" pos:end="6887:50">cpu_env</name></expr></argument>, <argument pos:start="6887:53" pos:end="6887:80"><expr pos:start="6887:53" pos:end="6887:80"><call pos:start="6887:53" pos:end="6887:80"><name pos:start="6887:53" pos:end="6887:60">offsetof</name><argument_list pos:start="6887:61" pos:end="6887:80">(<argument pos:start="6887:62" pos:end="6887:72"><expr pos:start="6887:62" pos:end="6887:72"><name pos:start="6887:62" pos:end="6887:72">CPUX86State</name></expr></argument>, <argument pos:start="6887:75" pos:end="6887:79"><expr pos:start="6887:75" pos:end="6887:79"><name pos:start="6887:75" pos:end="6887:79">mxcsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6889:17" pos:end="6889:56"><expr pos:start="6889:17" pos:end="6889:55"><call pos:start="6889:17" pos:end="6889:55"><name pos:start="6889:17" pos:end="6889:31">gen_op_st_T0_A0</name><argument_list pos:start="6889:32" pos:end="6889:55">(<argument pos:start="6889:33" pos:end="6889:54"><expr pos:start="6889:33" pos:end="6889:54"><name pos:start="6889:33" pos:end="6889:39">OT_LONG</name> <operator pos:start="6889:41" pos:end="6889:41">+</operator> <name pos:start="6889:43" pos:end="6889:54"><name pos:start="6889:43" pos:end="6889:43">s</name><operator pos:start="6889:44" pos:end="6889:45">-&gt;</operator><name pos:start="6889:46" pos:end="6889:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6893:13" pos:end="6893:18">break;</break>

        <case pos:start="6895:9" pos:end="6895:15">case <expr pos:start="6895:14" pos:end="6895:14"><literal type="number" pos:start="6895:14" pos:end="6895:14">5</literal></expr>:</case> <comment type="block" pos:start="6895:17" pos:end="6895:28">/* lfence */</comment>

        <case pos:start="6897:9" pos:end="6897:15">case <expr pos:start="6897:14" pos:end="6897:14"><literal type="number" pos:start="6897:14" pos:end="6897:14">6</literal></expr>:</case> <comment type="block" pos:start="6897:17" pos:end="6897:28">/* mfence */</comment>

            <if_stmt pos:start="6899:13" pos:end="6901:32"><if pos:start="6899:13" pos:end="6901:32">if <condition pos:start="6899:16" pos:end="6899:75">(<expr pos:start="6899:17" pos:end="6899:74"><operator pos:start="6899:17" pos:end="6899:17">(</operator><name pos:start="6899:18" pos:end="6899:22">modrm</name> <operator pos:start="6899:24" pos:end="6899:24">&amp;</operator> <literal type="number" pos:start="6899:26" pos:end="6899:29">0xc7</literal><operator pos:start="6899:30" pos:end="6899:30">)</operator> <operator pos:start="6899:32" pos:end="6899:33">!=</operator> <literal type="number" pos:start="6899:35" pos:end="6899:38">0xc0</literal> <operator pos:start="6899:40" pos:end="6899:41">||</operator> <operator pos:start="6899:43" pos:end="6899:43">!</operator><operator pos:start="6899:44" pos:end="6899:44">(</operator><name pos:start="6899:45" pos:end="6899:61"><name pos:start="6899:45" pos:end="6899:45">s</name><operator pos:start="6899:46" pos:end="6899:47">-&gt;</operator><name pos:start="6899:48" pos:end="6899:61">cpuid_features</name></name> <operator pos:start="6899:63" pos:end="6899:63">&amp;</operator> <name pos:start="6899:65" pos:end="6899:73">CPUID_SSE</name><operator pos:start="6899:74" pos:end="6899:74">)</operator></expr>)</condition><block type="pseudo" pos:start="6901:17" pos:end="6901:32"><block_content pos:start="6901:17" pos:end="6901:32">

                <goto pos:start="6901:17" pos:end="6901:32">goto <name pos:start="6901:22" pos:end="6901:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="6903:13" pos:end="6903:18">break;</break>

        <case pos:start="6905:9" pos:end="6905:15">case <expr pos:start="6905:14" pos:end="6905:14"><literal type="number" pos:start="6905:14" pos:end="6905:14">7</literal></expr>:</case> <comment type="block" pos:start="6905:17" pos:end="6905:38">/* sfence / clflush */</comment>

            <if_stmt pos:start="6907:13" pos:end="6927:13"><if pos:start="6907:13" pos:end="6917:13">if <condition pos:start="6907:16" pos:end="6907:39">(<expr pos:start="6907:17" pos:end="6907:38"><operator pos:start="6907:17" pos:end="6907:17">(</operator><name pos:start="6907:18" pos:end="6907:22">modrm</name> <operator pos:start="6907:24" pos:end="6907:24">&amp;</operator> <literal type="number" pos:start="6907:26" pos:end="6907:29">0xc7</literal><operator pos:start="6907:30" pos:end="6907:30">)</operator> <operator pos:start="6907:32" pos:end="6907:33">==</operator> <literal type="number" pos:start="6907:35" pos:end="6907:38">0xc0</literal></expr>)</condition> <block pos:start="6907:41" pos:end="6917:13">{<block_content pos:start="6913:17" pos:end="6915:36">

                <comment type="block" pos:start="6909:17" pos:end="6909:28">/* sfence */</comment>

                <comment type="block" pos:start="6911:17" pos:end="6911:79">/* XXX: also check for cpuid_ext2_features &amp; CPUID_EXT2_EMMX */</comment>

                <if_stmt pos:start="6913:17" pos:end="6915:36"><if pos:start="6913:17" pos:end="6915:36">if <condition pos:start="6913:20" pos:end="6913:53">(<expr pos:start="6913:21" pos:end="6913:52"><operator pos:start="6913:21" pos:end="6913:21">!</operator><operator pos:start="6913:22" pos:end="6913:22">(</operator><name pos:start="6913:23" pos:end="6913:39"><name pos:start="6913:23" pos:end="6913:23">s</name><operator pos:start="6913:24" pos:end="6913:25">-&gt;</operator><name pos:start="6913:26" pos:end="6913:39">cpuid_features</name></name> <operator pos:start="6913:41" pos:end="6913:41">&amp;</operator> <name pos:start="6913:43" pos:end="6913:51">CPUID_SSE</name><operator pos:start="6913:52" pos:end="6913:52">)</operator></expr>)</condition><block type="pseudo" pos:start="6915:21" pos:end="6915:36"><block_content pos:start="6915:21" pos:end="6915:36">

                    <goto pos:start="6915:21" pos:end="6915:36">goto <name pos:start="6915:26" pos:end="6915:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="6917:15" pos:end="6927:13">else <block pos:start="6917:20" pos:end="6927:13">{<block_content pos:start="6921:17" pos:end="6925:65">

                <comment type="block" pos:start="6919:17" pos:end="6919:29">/* clflush */</comment>

                <if_stmt pos:start="6921:17" pos:end="6923:36"><if pos:start="6921:17" pos:end="6923:36">if <condition pos:start="6921:20" pos:end="6921:57">(<expr pos:start="6921:21" pos:end="6921:56"><operator pos:start="6921:21" pos:end="6921:21">!</operator><operator pos:start="6921:22" pos:end="6921:22">(</operator><name pos:start="6921:23" pos:end="6921:39"><name pos:start="6921:23" pos:end="6921:23">s</name><operator pos:start="6921:24" pos:end="6921:25">-&gt;</operator><name pos:start="6921:26" pos:end="6921:39">cpuid_features</name></name> <operator pos:start="6921:41" pos:end="6921:41">&amp;</operator> <name pos:start="6921:43" pos:end="6921:55">CPUID_CLFLUSH</name><operator pos:start="6921:56" pos:end="6921:56">)</operator></expr>)</condition><block type="pseudo" pos:start="6923:21" pos:end="6923:36"><block_content pos:start="6923:21" pos:end="6923:36">

                    <goto pos:start="6923:21" pos:end="6923:36">goto <name pos:start="6923:26" pos:end="6923:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6925:17" pos:end="6925:65"><expr pos:start="6925:17" pos:end="6925:64"><call pos:start="6925:17" pos:end="6925:64"><name pos:start="6925:17" pos:end="6925:29">gen_lea_modrm</name><argument_list pos:start="6925:30" pos:end="6925:64">(<argument pos:start="6925:31" pos:end="6925:31"><expr pos:start="6925:31" pos:end="6925:31"><name pos:start="6925:31" pos:end="6925:31">s</name></expr></argument>, <argument pos:start="6925:34" pos:end="6925:38"><expr pos:start="6925:34" pos:end="6925:38"><name pos:start="6925:34" pos:end="6925:38">modrm</name></expr></argument>, <argument pos:start="6925:41" pos:end="6925:49"><expr pos:start="6925:41" pos:end="6925:49"><operator pos:start="6925:41" pos:end="6925:41">&amp;</operator><name pos:start="6925:42" pos:end="6925:49">reg_addr</name></expr></argument>, <argument pos:start="6925:52" pos:end="6925:63"><expr pos:start="6925:52" pos:end="6925:63"><operator pos:start="6925:52" pos:end="6925:52">&amp;</operator><name pos:start="6925:53" pos:end="6925:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6929:13" pos:end="6929:18">break;</break>

        <default pos:start="6931:9" pos:end="6931:16">default:</default>

            <goto pos:start="6933:13" pos:end="6933:28">goto <name pos:start="6933:18" pos:end="6933:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="6937:9" pos:end="6937:14">break;</break>

    <case pos:start="6939:5" pos:end="6939:15">case <expr pos:start="6939:10" pos:end="6939:14"><literal type="number" pos:start="6939:10" pos:end="6939:14">0x10d</literal></expr>:</case> <comment type="block" pos:start="6939:17" pos:end="6939:40">/* 3DNow! prefetch(w) */</comment>

        <expr_stmt pos:start="6941:9" pos:end="6941:35"><expr pos:start="6941:9" pos:end="6941:34"><name pos:start="6941:9" pos:end="6941:13">modrm</name> <operator pos:start="6941:15" pos:end="6941:15">=</operator> <call pos:start="6941:17" pos:end="6941:34"><name pos:start="6941:17" pos:end="6941:25">ldub_code</name><argument_list pos:start="6941:26" pos:end="6941:34">(<argument pos:start="6941:27" pos:end="6941:33"><expr pos:start="6941:27" pos:end="6941:33"><name pos:start="6941:27" pos:end="6941:31"><name pos:start="6941:27" pos:end="6941:27">s</name><operator pos:start="6941:28" pos:end="6941:29">-&gt;</operator><name pos:start="6941:30" pos:end="6941:31">pc</name></name><operator pos:start="6941:32" pos:end="6941:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6943:9" pos:end="6943:31"><expr pos:start="6943:9" pos:end="6943:30"><name pos:start="6943:9" pos:end="6943:11">mod</name> <operator pos:start="6943:13" pos:end="6943:13">=</operator> <operator pos:start="6943:15" pos:end="6943:15">(</operator><name pos:start="6943:16" pos:end="6943:20">modrm</name> <operator pos:start="6943:22" pos:end="6943:23">&gt;&gt;</operator> <literal type="number" pos:start="6943:25" pos:end="6943:25">6</literal><operator pos:start="6943:26" pos:end="6943:26">)</operator> <operator pos:start="6943:28" pos:end="6943:28">&amp;</operator> <literal type="number" pos:start="6943:30" pos:end="6943:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="6945:9" pos:end="6947:28"><if pos:start="6945:9" pos:end="6947:28">if <condition pos:start="6945:12" pos:end="6945:21">(<expr pos:start="6945:13" pos:end="6945:20"><name pos:start="6945:13" pos:end="6945:15">mod</name> <operator pos:start="6945:17" pos:end="6945:18">==</operator> <literal type="number" pos:start="6945:20" pos:end="6945:20">3</literal></expr>)</condition><block type="pseudo" pos:start="6947:13" pos:end="6947:28"><block_content pos:start="6947:13" pos:end="6947:28">

            <goto pos:start="6947:13" pos:end="6947:28">goto <name pos:start="6947:18" pos:end="6947:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="6949:9" pos:end="6949:57"><expr pos:start="6949:9" pos:end="6949:56"><call pos:start="6949:9" pos:end="6949:56"><name pos:start="6949:9" pos:end="6949:21">gen_lea_modrm</name><argument_list pos:start="6949:22" pos:end="6949:56">(<argument pos:start="6949:23" pos:end="6949:23"><expr pos:start="6949:23" pos:end="6949:23"><name pos:start="6949:23" pos:end="6949:23">s</name></expr></argument>, <argument pos:start="6949:26" pos:end="6949:30"><expr pos:start="6949:26" pos:end="6949:30"><name pos:start="6949:26" pos:end="6949:30">modrm</name></expr></argument>, <argument pos:start="6949:33" pos:end="6949:41"><expr pos:start="6949:33" pos:end="6949:41"><operator pos:start="6949:33" pos:end="6949:33">&amp;</operator><name pos:start="6949:34" pos:end="6949:41">reg_addr</name></expr></argument>, <argument pos:start="6949:44" pos:end="6949:55"><expr pos:start="6949:44" pos:end="6949:55"><operator pos:start="6949:44" pos:end="6949:44">&amp;</operator><name pos:start="6949:45" pos:end="6949:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="6951:9" pos:end="6951:28">/* ignore for now */</comment>

        <break pos:start="6953:9" pos:end="6953:14">break;</break>

    <case pos:start="6955:5" pos:end="6955:15">case <expr pos:start="6955:10" pos:end="6955:14"><literal type="number" pos:start="6955:10" pos:end="6955:14">0x1aa</literal></expr>:</case> <comment type="block" pos:start="6955:17" pos:end="6955:25">/* rsm */</comment>

        <expr_stmt pos:start="6957:9" pos:end="6957:59"><expr pos:start="6957:9" pos:end="6957:58"><call pos:start="6957:9" pos:end="6957:58"><name pos:start="6957:9" pos:end="6957:31">gen_svm_check_intercept</name><argument_list pos:start="6957:32" pos:end="6957:58">(<argument pos:start="6957:33" pos:end="6957:33"><expr pos:start="6957:33" pos:end="6957:33"><name pos:start="6957:33" pos:end="6957:33">s</name></expr></argument>, <argument pos:start="6957:36" pos:end="6957:43"><expr pos:start="6957:36" pos:end="6957:43"><name pos:start="6957:36" pos:end="6957:43">pc_start</name></expr></argument>, <argument pos:start="6957:46" pos:end="6957:57"><expr pos:start="6957:46" pos:end="6957:57"><name pos:start="6957:46" pos:end="6957:57">SVM_EXIT_RSM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6959:9" pos:end="6961:28"><if pos:start="6959:9" pos:end="6961:28">if <condition pos:start="6959:12" pos:end="6959:38">(<expr pos:start="6959:13" pos:end="6959:37"><operator pos:start="6959:13" pos:end="6959:13">!</operator><operator pos:start="6959:14" pos:end="6959:14">(</operator><name pos:start="6959:15" pos:end="6959:22"><name pos:start="6959:15" pos:end="6959:15">s</name><operator pos:start="6959:16" pos:end="6959:17">-&gt;</operator><name pos:start="6959:18" pos:end="6959:22">flags</name></name> <operator pos:start="6959:24" pos:end="6959:24">&amp;</operator> <name pos:start="6959:26" pos:end="6959:36">HF_SMM_MASK</name><operator pos:start="6959:37" pos:end="6959:37">)</operator></expr>)</condition><block type="pseudo" pos:start="6961:13" pos:end="6961:28"><block_content pos:start="6961:13" pos:end="6961:28">

            <goto pos:start="6961:13" pos:end="6961:28">goto <name pos:start="6961:18" pos:end="6961:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="6963:9" pos:end="6969:9"><if pos:start="6963:9" pos:end="6969:9">if <condition pos:start="6963:12" pos:end="6963:38">(<expr pos:start="6963:13" pos:end="6963:37"><name pos:start="6963:13" pos:end="6963:20"><name pos:start="6963:13" pos:end="6963:13">s</name><operator pos:start="6963:14" pos:end="6963:15">-&gt;</operator><name pos:start="6963:16" pos:end="6963:20">cc_op</name></name> <operator pos:start="6963:22" pos:end="6963:23">!=</operator> <name pos:start="6963:25" pos:end="6963:37">CC_OP_DYNAMIC</name></expr>)</condition> <block pos:start="6963:40" pos:end="6969:9">{<block_content pos:start="6965:13" pos:end="6967:37">

            <expr_stmt pos:start="6965:13" pos:end="6965:39"><expr pos:start="6965:13" pos:end="6965:38"><call pos:start="6965:13" pos:end="6965:38"><name pos:start="6965:13" pos:end="6965:28">gen_op_set_cc_op</name><argument_list pos:start="6965:29" pos:end="6965:38">(<argument pos:start="6965:30" pos:end="6965:37"><expr pos:start="6965:30" pos:end="6965:37"><name pos:start="6965:30" pos:end="6965:37"><name pos:start="6965:30" pos:end="6965:30">s</name><operator pos:start="6965:31" pos:end="6965:32">-&gt;</operator><name pos:start="6965:33" pos:end="6965:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6967:13" pos:end="6967:37"><expr pos:start="6967:13" pos:end="6967:36"><name pos:start="6967:13" pos:end="6967:20"><name pos:start="6967:13" pos:end="6967:13">s</name><operator pos:start="6967:14" pos:end="6967:15">-&gt;</operator><name pos:start="6967:16" pos:end="6967:20">cc_op</name></name> <operator pos:start="6967:22" pos:end="6967:22">=</operator> <name pos:start="6967:24" pos:end="6967:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="6971:9" pos:end="6971:39"><expr pos:start="6971:9" pos:end="6971:38"><call pos:start="6971:9" pos:end="6971:38"><name pos:start="6971:9" pos:end="6971:18">gen_jmp_im</name><argument_list pos:start="6971:19" pos:end="6971:38">(<argument pos:start="6971:20" pos:end="6971:37"><expr pos:start="6971:20" pos:end="6971:37"><name pos:start="6971:20" pos:end="6971:24"><name pos:start="6971:20" pos:end="6971:20">s</name><operator pos:start="6971:21" pos:end="6971:22">-&gt;</operator><name pos:start="6971:23" pos:end="6971:24">pc</name></name> <operator pos:start="6971:26" pos:end="6971:26">-</operator> <name pos:start="6971:28" pos:end="6971:37"><name pos:start="6971:28" pos:end="6971:28">s</name><operator pos:start="6971:29" pos:end="6971:30">-&gt;</operator><name pos:start="6971:31" pos:end="6971:37">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6973:9" pos:end="6973:25"><expr pos:start="6973:9" pos:end="6973:24"><call pos:start="6973:9" pos:end="6973:24"><name pos:start="6973:9" pos:end="6973:22">gen_helper_rsm</name><argument_list pos:start="6973:23" pos:end="6973:24">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6975:9" pos:end="6975:19"><expr pos:start="6975:9" pos:end="6975:18"><call pos:start="6975:9" pos:end="6975:18"><name pos:start="6975:9" pos:end="6975:15">gen_eob</name><argument_list pos:start="6975:16" pos:end="6975:18">(<argument pos:start="6975:17" pos:end="6975:17"><expr pos:start="6975:17" pos:end="6975:17"><name pos:start="6975:17" pos:end="6975:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6977:9" pos:end="6977:14">break;</break>

    <case pos:start="6979:5" pos:end="6979:15">case <expr pos:start="6979:10" pos:end="6979:14"><literal type="number" pos:start="6979:10" pos:end="6979:14">0x1b8</literal></expr>:</case> <comment type="block" pos:start="6979:17" pos:end="6979:35">/* SSE4.2 popcnt */</comment>

        <if_stmt pos:start="6981:9" pos:end="6985:28"><if pos:start="6981:9" pos:end="6985:28">if <condition pos:start="6981:12" pos:end="6983:25">(<expr pos:start="6981:13" pos:end="6983:24"><operator pos:start="6981:13" pos:end="6981:13">(</operator><name pos:start="6981:14" pos:end="6981:21">prefixes</name> <operator pos:start="6981:23" pos:end="6981:23">&amp;</operator> <operator pos:start="6981:25" pos:end="6981:25">(</operator><name pos:start="6981:26" pos:end="6981:36">PREFIX_REPZ</name> <operator pos:start="6981:38" pos:end="6981:38">|</operator> <name pos:start="6981:40" pos:end="6981:50">PREFIX_LOCK</name> <operator pos:start="6981:52" pos:end="6981:52">|</operator> <name pos:start="6981:54" pos:end="6981:65">PREFIX_REPNZ</name><operator pos:start="6981:66" pos:end="6981:66">)</operator><operator pos:start="6981:67" pos:end="6981:67">)</operator> <operator pos:start="6981:69" pos:end="6981:70">!=</operator>

             <name pos:start="6983:14" pos:end="6983:24">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="6985:13" pos:end="6985:28"><block_content pos:start="6985:13" pos:end="6985:28">

            <goto pos:start="6985:13" pos:end="6985:28">goto <name pos:start="6985:18" pos:end="6985:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="6987:9" pos:end="6989:28"><if pos:start="6987:9" pos:end="6989:28">if <condition pos:start="6987:12" pos:end="6987:56">(<expr pos:start="6987:13" pos:end="6987:55"><operator pos:start="6987:13" pos:end="6987:13">!</operator><operator pos:start="6987:14" pos:end="6987:14">(</operator><name pos:start="6987:15" pos:end="6987:35"><name pos:start="6987:15" pos:end="6987:15">s</name><operator pos:start="6987:16" pos:end="6987:17">-&gt;</operator><name pos:start="6987:18" pos:end="6987:35">cpuid_ext_features</name></name> <operator pos:start="6987:37" pos:end="6987:37">&amp;</operator> <name pos:start="6987:39" pos:end="6987:54">CPUID_EXT_POPCNT</name><operator pos:start="6987:55" pos:end="6987:55">)</operator></expr>)</condition><block type="pseudo" pos:start="6989:13" pos:end="6989:28"><block_content pos:start="6989:13" pos:end="6989:28">

            <goto pos:start="6989:13" pos:end="6989:28">goto <name pos:start="6989:18" pos:end="6989:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="6993:9" pos:end="6993:35"><expr pos:start="6993:9" pos:end="6993:34"><name pos:start="6993:9" pos:end="6993:13">modrm</name> <operator pos:start="6993:15" pos:end="6993:15">=</operator> <call pos:start="6993:17" pos:end="6993:34"><name pos:start="6993:17" pos:end="6993:25">ldub_code</name><argument_list pos:start="6993:26" pos:end="6993:34">(<argument pos:start="6993:27" pos:end="6993:33"><expr pos:start="6993:27" pos:end="6993:33"><name pos:start="6993:27" pos:end="6993:31"><name pos:start="6993:27" pos:end="6993:27">s</name><operator pos:start="6993:28" pos:end="6993:29">-&gt;</operator><name pos:start="6993:30" pos:end="6993:31">pc</name></name><operator pos:start="6993:32" pos:end="6993:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6995:9" pos:end="6995:33"><expr pos:start="6995:9" pos:end="6995:32"><name pos:start="6995:9" pos:end="6995:11">reg</name> <operator pos:start="6995:13" pos:end="6995:13">=</operator> <operator pos:start="6995:15" pos:end="6995:15">(</operator><operator pos:start="6995:16" pos:end="6995:16">(</operator><name pos:start="6995:17" pos:end="6995:21">modrm</name> <operator pos:start="6995:23" pos:end="6995:24">&gt;&gt;</operator> <literal type="number" pos:start="6995:26" pos:end="6995:26">3</literal><operator pos:start="6995:27" pos:end="6995:27">)</operator> <operator pos:start="6995:29" pos:end="6995:29">&amp;</operator> <literal type="number" pos:start="6995:31" pos:end="6995:31">7</literal><operator pos:start="6995:32" pos:end="6995:32">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="6999:9" pos:end="7009:25"><if pos:start="6999:9" pos:end="7001:25">if <condition pos:start="6999:12" pos:end="6999:36">(<expr pos:start="6999:13" pos:end="6999:35"><name pos:start="6999:13" pos:end="6999:21"><name pos:start="6999:13" pos:end="6999:13">s</name><operator pos:start="6999:14" pos:end="6999:15">-&gt;</operator><name pos:start="6999:16" pos:end="6999:21">prefix</name></name> <operator pos:start="6999:23" pos:end="6999:23">&amp;</operator> <name pos:start="6999:25" pos:end="6999:35">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="7001:13" pos:end="7001:25"><block_content pos:start="7001:13" pos:end="7001:25">

            <expr_stmt pos:start="7001:13" pos:end="7001:25"><expr pos:start="7001:13" pos:end="7001:24"><name pos:start="7001:13" pos:end="7001:14">ot</name> <operator pos:start="7001:16" pos:end="7001:16">=</operator> <name pos:start="7001:18" pos:end="7001:24">OT_WORD</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="7003:9" pos:end="7005:25">else if <condition pos:start="7003:17" pos:end="7003:31">(<expr pos:start="7003:18" pos:end="7003:30"><name pos:start="7003:18" pos:end="7003:25"><name pos:start="7003:18" pos:end="7003:18">s</name><operator pos:start="7003:19" pos:end="7003:20">-&gt;</operator><name pos:start="7003:21" pos:end="7003:25">dflag</name></name> <operator pos:start="7003:27" pos:end="7003:28">!=</operator> <literal type="number" pos:start="7003:30" pos:end="7003:30">2</literal></expr>)</condition><block type="pseudo" pos:start="7005:13" pos:end="7005:25"><block_content pos:start="7005:13" pos:end="7005:25">

            <expr_stmt pos:start="7005:13" pos:end="7005:25"><expr pos:start="7005:13" pos:end="7005:24"><name pos:start="7005:13" pos:end="7005:14">ot</name> <operator pos:start="7005:16" pos:end="7005:16">=</operator> <name pos:start="7005:18" pos:end="7005:24">OT_LONG</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="7007:9" pos:end="7009:25">else<block type="pseudo" pos:start="7009:13" pos:end="7009:25"><block_content pos:start="7009:13" pos:end="7009:25">

            <expr_stmt pos:start="7009:13" pos:end="7009:25"><expr pos:start="7009:13" pos:end="7009:24"><name pos:start="7009:13" pos:end="7009:14">ot</name> <operator pos:start="7009:16" pos:end="7009:16">=</operator> <name pos:start="7009:18" pos:end="7009:24">OT_QUAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="7013:9" pos:end="7013:49"><expr pos:start="7013:9" pos:end="7013:48"><call pos:start="7013:9" pos:end="7013:48"><name pos:start="7013:9" pos:end="7013:22">gen_ldst_modrm</name><argument_list pos:start="7013:23" pos:end="7013:48">(<argument pos:start="7013:24" pos:end="7013:24"><expr pos:start="7013:24" pos:end="7013:24"><name pos:start="7013:24" pos:end="7013:24">s</name></expr></argument>, <argument pos:start="7013:27" pos:end="7013:31"><expr pos:start="7013:27" pos:end="7013:31"><name pos:start="7013:27" pos:end="7013:31">modrm</name></expr></argument>, <argument pos:start="7013:34" pos:end="7013:35"><expr pos:start="7013:34" pos:end="7013:35"><name pos:start="7013:34" pos:end="7013:35">ot</name></expr></argument>, <argument pos:start="7013:38" pos:end="7013:44"><expr pos:start="7013:38" pos:end="7013:44"><name pos:start="7013:38" pos:end="7013:44">OR_TMP0</name></expr></argument>, <argument pos:start="7013:47" pos:end="7013:47"><expr pos:start="7013:47" pos:end="7013:47"><literal type="number" pos:start="7013:47" pos:end="7013:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7015:9" pos:end="7015:65"><expr pos:start="7015:9" pos:end="7015:64"><call pos:start="7015:9" pos:end="7015:64"><name pos:start="7015:9" pos:end="7015:25">gen_helper_popcnt</name><argument_list pos:start="7015:26" pos:end="7015:64">(<argument pos:start="7015:27" pos:end="7015:34"><expr pos:start="7015:27" pos:end="7015:34"><name pos:start="7015:27" pos:end="7015:34"><name pos:start="7015:27" pos:end="7015:31">cpu_T</name><index pos:start="7015:32" pos:end="7015:34">[<expr pos:start="7015:33" pos:end="7015:33"><literal type="number" pos:start="7015:33" pos:end="7015:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="7015:37" pos:end="7015:44"><expr pos:start="7015:37" pos:end="7015:44"><name pos:start="7015:37" pos:end="7015:44"><name pos:start="7015:37" pos:end="7015:41">cpu_T</name><index pos:start="7015:42" pos:end="7015:44">[<expr pos:start="7015:43" pos:end="7015:43"><literal type="number" pos:start="7015:43" pos:end="7015:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="7015:47" pos:end="7015:63"><expr pos:start="7015:47" pos:end="7015:63"><call pos:start="7015:47" pos:end="7015:63"><name pos:start="7015:47" pos:end="7015:59">tcg_const_i32</name><argument_list pos:start="7015:60" pos:end="7015:63">(<argument pos:start="7015:61" pos:end="7015:62"><expr pos:start="7015:61" pos:end="7015:62"><name pos:start="7015:61" pos:end="7015:62">ot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7017:9" pos:end="7017:35"><expr pos:start="7017:9" pos:end="7017:34"><call pos:start="7017:9" pos:end="7017:34"><name pos:start="7017:9" pos:end="7017:25">gen_op_mov_reg_T0</name><argument_list pos:start="7017:26" pos:end="7017:34">(<argument pos:start="7017:27" pos:end="7017:28"><expr pos:start="7017:27" pos:end="7017:28"><name pos:start="7017:27" pos:end="7017:28">ot</name></expr></argument>, <argument pos:start="7017:31" pos:end="7017:33"><expr pos:start="7017:31" pos:end="7017:33"><name pos:start="7017:31" pos:end="7017:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="7021:9" pos:end="7021:32"><expr pos:start="7021:9" pos:end="7021:31"><name pos:start="7021:9" pos:end="7021:16"><name pos:start="7021:9" pos:end="7021:9">s</name><operator pos:start="7021:10" pos:end="7021:11">-&gt;</operator><name pos:start="7021:12" pos:end="7021:16">cc_op</name></name> <operator pos:start="7021:18" pos:end="7021:18">=</operator> <name pos:start="7021:20" pos:end="7021:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="7023:9" pos:end="7023:14">break;</break>

    <case pos:start="7025:5" pos:end="7025:25">case <expr pos:start="7025:10" pos:end="7025:24"><literal type="number" pos:start="7025:10" pos:end="7025:14">0x10e</literal> <operator pos:start="7025:16" pos:end="7025:18">...</operator> <literal type="number" pos:start="7025:20" pos:end="7025:24">0x10f</literal></expr>:</case>

        <comment type="block" pos:start="7027:9" pos:end="7027:50">/* 3DNow! instructions, ignore prefixes */</comment>

        <expr_stmt pos:start="7029:9" pos:end="7029:65"><expr pos:start="7029:9" pos:end="7029:64"><name pos:start="7029:9" pos:end="7029:17"><name pos:start="7029:9" pos:end="7029:9">s</name><operator pos:start="7029:10" pos:end="7029:11">-&gt;</operator><name pos:start="7029:12" pos:end="7029:17">prefix</name></name> <operator pos:start="7029:19" pos:end="7029:20">&amp;=</operator> <operator pos:start="7029:22" pos:end="7029:22">~</operator><operator pos:start="7029:23" pos:end="7029:23">(</operator><name pos:start="7029:24" pos:end="7029:34">PREFIX_REPZ</name> <operator pos:start="7029:36" pos:end="7029:36">|</operator> <name pos:start="7029:38" pos:end="7029:49">PREFIX_REPNZ</name> <operator pos:start="7029:51" pos:end="7029:51">|</operator> <name pos:start="7029:53" pos:end="7029:63">PREFIX_DATA</name><operator pos:start="7029:64" pos:end="7029:64">)</operator></expr>;</expr_stmt>

    <case pos:start="7031:5" pos:end="7031:25">case <expr pos:start="7031:10" pos:end="7031:24"><literal type="number" pos:start="7031:10" pos:end="7031:14">0x110</literal> <operator pos:start="7031:16" pos:end="7031:18">...</operator> <literal type="number" pos:start="7031:20" pos:end="7031:24">0x117</literal></expr>:</case>

    <case pos:start="7033:5" pos:end="7033:25">case <expr pos:start="7033:10" pos:end="7033:24"><literal type="number" pos:start="7033:10" pos:end="7033:14">0x128</literal> <operator pos:start="7033:16" pos:end="7033:18">...</operator> <literal type="number" pos:start="7033:20" pos:end="7033:24">0x12f</literal></expr>:</case>

    <case pos:start="7035:5" pos:end="7035:25">case <expr pos:start="7035:10" pos:end="7035:24"><literal type="number" pos:start="7035:10" pos:end="7035:14">0x138</literal> <operator pos:start="7035:16" pos:end="7035:18">...</operator> <literal type="number" pos:start="7035:20" pos:end="7035:24">0x13a</literal></expr>:</case>

    <case pos:start="7037:5" pos:end="7037:25">case <expr pos:start="7037:10" pos:end="7037:24"><literal type="number" pos:start="7037:10" pos:end="7037:14">0x150</literal> <operator pos:start="7037:16" pos:end="7037:18">...</operator> <literal type="number" pos:start="7037:20" pos:end="7037:24">0x177</literal></expr>:</case>

    <case pos:start="7039:5" pos:end="7039:25">case <expr pos:start="7039:10" pos:end="7039:24"><literal type="number" pos:start="7039:10" pos:end="7039:14">0x17c</literal> <operator pos:start="7039:16" pos:end="7039:18">...</operator> <literal type="number" pos:start="7039:20" pos:end="7039:24">0x17f</literal></expr>:</case>

    <case pos:start="7041:5" pos:end="7041:15">case <expr pos:start="7041:10" pos:end="7041:14"><literal type="number" pos:start="7041:10" pos:end="7041:14">0x1c2</literal></expr>:</case>

    <case pos:start="7043:5" pos:end="7043:25">case <expr pos:start="7043:10" pos:end="7043:24"><literal type="number" pos:start="7043:10" pos:end="7043:14">0x1c4</literal> <operator pos:start="7043:16" pos:end="7043:18">...</operator> <literal type="number" pos:start="7043:20" pos:end="7043:24">0x1c6</literal></expr>:</case>

    <case pos:start="7045:5" pos:end="7045:25">case <expr pos:start="7045:10" pos:end="7045:24"><literal type="number" pos:start="7045:10" pos:end="7045:14">0x1d0</literal> <operator pos:start="7045:16" pos:end="7045:18">...</operator> <literal type="number" pos:start="7045:20" pos:end="7045:24">0x1fe</literal></expr>:</case>

        <expr_stmt pos:start="7047:9" pos:end="7047:39"><expr pos:start="7047:9" pos:end="7047:38"><call pos:start="7047:9" pos:end="7047:38"><name pos:start="7047:9" pos:end="7047:15">gen_sse</name><argument_list pos:start="7047:16" pos:end="7047:38">(<argument pos:start="7047:17" pos:end="7047:17"><expr pos:start="7047:17" pos:end="7047:17"><name pos:start="7047:17" pos:end="7047:17">s</name></expr></argument>, <argument pos:start="7047:20" pos:end="7047:20"><expr pos:start="7047:20" pos:end="7047:20"><name pos:start="7047:20" pos:end="7047:20">b</name></expr></argument>, <argument pos:start="7047:23" pos:end="7047:30"><expr pos:start="7047:23" pos:end="7047:30"><name pos:start="7047:23" pos:end="7047:30">pc_start</name></expr></argument>, <argument pos:start="7047:33" pos:end="7047:37"><expr pos:start="7047:33" pos:end="7047:37"><name pos:start="7047:33" pos:end="7047:37">rex_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7049:9" pos:end="7049:14">break;</break>

    <default pos:start="7051:5" pos:end="7051:12">default:</default>

        <goto pos:start="7053:9" pos:end="7053:24">goto <name pos:start="7053:14" pos:end="7053:23">illegal_op</name>;</goto>

    </block_content>}</block></switch>

    <comment type="block" pos:start="7057:5" pos:end="7057:25">/* lock generation */</comment>

    <if_stmt pos:start="7059:5" pos:end="7061:28"><if pos:start="7059:5" pos:end="7061:28">if <condition pos:start="7059:8" pos:end="7059:32">(<expr pos:start="7059:9" pos:end="7059:31"><name pos:start="7059:9" pos:end="7059:17"><name pos:start="7059:9" pos:end="7059:9">s</name><operator pos:start="7059:10" pos:end="7059:11">-&gt;</operator><name pos:start="7059:12" pos:end="7059:17">prefix</name></name> <operator pos:start="7059:19" pos:end="7059:19">&amp;</operator> <name pos:start="7059:21" pos:end="7059:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="7061:9" pos:end="7061:28"><block_content pos:start="7061:9" pos:end="7061:28">

        <expr_stmt pos:start="7061:9" pos:end="7061:28"><expr pos:start="7061:9" pos:end="7061:27"><call pos:start="7061:9" pos:end="7061:27"><name pos:start="7061:9" pos:end="7061:25">gen_helper_unlock</name><argument_list pos:start="7061:26" pos:end="7061:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="7063:5" pos:end="7063:17">return <expr pos:start="7063:12" pos:end="7063:16"><name pos:start="7063:12" pos:end="7063:16"><name pos:start="7063:12" pos:end="7063:12">s</name><operator pos:start="7063:13" pos:end="7063:14">-&gt;</operator><name pos:start="7063:15" pos:end="7063:16">pc</name></name></expr>;</return>

 <label pos:start="7065:2" pos:end="7065:12"><name pos:start="7065:2" pos:end="7065:11">illegal_op</name>:</label>

    <if_stmt pos:start="7067:5" pos:end="7069:28"><if pos:start="7067:5" pos:end="7069:28">if <condition pos:start="7067:8" pos:end="7067:32">(<expr pos:start="7067:9" pos:end="7067:31"><name pos:start="7067:9" pos:end="7067:17"><name pos:start="7067:9" pos:end="7067:9">s</name><operator pos:start="7067:10" pos:end="7067:11">-&gt;</operator><name pos:start="7067:12" pos:end="7067:17">prefix</name></name> <operator pos:start="7067:19" pos:end="7067:19">&amp;</operator> <name pos:start="7067:21" pos:end="7067:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="7069:9" pos:end="7069:28"><block_content pos:start="7069:9" pos:end="7069:28">

        <expr_stmt pos:start="7069:9" pos:end="7069:28"><expr pos:start="7069:9" pos:end="7069:27"><call pos:start="7069:9" pos:end="7069:27"><name pos:start="7069:9" pos:end="7069:25">gen_helper_unlock</name><argument_list pos:start="7069:26" pos:end="7069:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="7071:5" pos:end="7071:48">/* XXX: ensure that no lock was generated */</comment>

    <expr_stmt pos:start="7073:5" pos:end="7073:58"><expr pos:start="7073:5" pos:end="7073:57"><call pos:start="7073:5" pos:end="7073:57"><name pos:start="7073:5" pos:end="7073:17">gen_exception</name><argument_list pos:start="7073:18" pos:end="7073:57">(<argument pos:start="7073:19" pos:end="7073:19"><expr pos:start="7073:19" pos:end="7073:19"><name pos:start="7073:19" pos:end="7073:19">s</name></expr></argument>, <argument pos:start="7073:22" pos:end="7073:33"><expr pos:start="7073:22" pos:end="7073:33"><name pos:start="7073:22" pos:end="7073:33">EXCP06_ILLOP</name></expr></argument>, <argument pos:start="7073:36" pos:end="7073:56"><expr pos:start="7073:36" pos:end="7073:56"><name pos:start="7073:36" pos:end="7073:43">pc_start</name> <operator pos:start="7073:45" pos:end="7073:45">-</operator> <name pos:start="7073:47" pos:end="7073:56"><name pos:start="7073:47" pos:end="7073:47">s</name><operator pos:start="7073:48" pos:end="7073:49">-&gt;</operator><name pos:start="7073:50" pos:end="7073:56">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="7075:5" pos:end="7075:17">return <expr pos:start="7075:12" pos:end="7075:16"><name pos:start="7075:12" pos:end="7075:16"><name pos:start="7075:12" pos:end="7075:12">s</name><operator pos:start="7075:13" pos:end="7075:14">-&gt;</operator><name pos:start="7075:15" pos:end="7075:16">pc</name></name></expr>;</return>

</block_content>}</block></function></unit>
