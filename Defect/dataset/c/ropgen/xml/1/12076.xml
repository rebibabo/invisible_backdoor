<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12076.c" pos:tabs="8"><function pos:start="1:1" pos:end="813:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">wavpack_decode_block</name><parameter_list pos:start="1:32" pos:end="5:65">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:67">block_no</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:42"><decl pos:start="3:33" pos:end="3:42"><type pos:start="3:33" pos:end="3:42"><name pos:start="3:33" pos:end="3:36">void</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">data</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:58">data_size</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:50"><decl pos:start="5:33" pos:end="5:50"><type pos:start="5:33" pos:end="5:50"><specifier pos:start="5:33" pos:end="5:37">const</specifier> <name pos:start="5:39" pos:end="5:45">uint8_t</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:50">buf</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:64"><decl pos:start="5:53" pos:end="5:64"><type pos:start="5:53" pos:end="5:64"><name pos:start="5:53" pos:end="5:55">int</name></type> <name pos:start="5:57" pos:end="5:64">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="813:1">{<block_content pos:start="9:5" pos:end="811:29">

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">WavpackContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:22">wc</name> <init pos:start="9:24" pos:end="9:41">= <expr pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:30">avctx</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23">WavpackFrameContext</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:26">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:17">samples</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">samplecount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:100"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">got_terms</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>, <decl pos:start="17:24" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:24" pos:end="17:34">got_weights</name> <init pos:start="17:36" pos:end="17:38">= <expr pos:start="17:38" pos:end="17:38"><literal type="number" pos:start="17:38" pos:end="17:38">0</literal></expr></init></decl>, <decl pos:start="17:41" pos:end="17:55"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:41" pos:end="17:51">got_samples</name> <init pos:start="17:53" pos:end="17:55">= <expr pos:start="17:55" pos:end="17:55"><literal type="number" pos:start="17:55" pos:end="17:55">0</literal></expr></init></decl>, <decl pos:start="17:58" pos:end="17:72"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:58" pos:end="17:68">got_entropy</name> <init pos:start="17:70" pos:end="17:72">= <expr pos:start="17:72" pos:end="17:72"><literal type="number" pos:start="17:72" pos:end="17:72">0</literal></expr></init></decl>, <decl pos:start="17:75" pos:end="17:84"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:75" pos:end="17:80">got_bs</name> <init pos:start="17:82" pos:end="17:84">= <expr pos:start="17:84" pos:end="17:84"><literal type="number" pos:start="17:84" pos:end="17:84">0</literal></expr></init></decl>, <decl pos:start="17:87" pos:end="17:99"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:87" pos:end="17:95">got_float</name> <init pos:start="17:97" pos:end="17:99">= <expr pos:start="17:99" pos:end="17:99"><literal type="number" pos:start="17:99" pos:end="17:99">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">got_hybrid</name> <init pos:start="19:20" pos:end="19:22">= <expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:18"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:17">uint8_t</name><modifier pos:start="21:18" pos:end="21:18">*</modifier></type> <name pos:start="21:20" pos:end="21:27">orig_buf</name> <init pos:start="21:29" pos:end="21:33">= <expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:44"><decl pos:start="23:5" pos:end="23:43"><type pos:start="23:5" pos:end="23:18"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:17">uint8_t</name><modifier pos:start="23:18" pos:end="23:18">*</modifier></type> <name pos:start="23:20" pos:end="23:26">buf_end</name> <init pos:start="23:28" pos:end="23:43">= <expr pos:start="23:30" pos:end="23:43"><name pos:start="23:30" pos:end="23:32">buf</name> <operator pos:start="23:34" pos:end="23:34">+</operator> <name pos:start="23:36" pos:end="23:43">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:42"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>, <decl pos:start="25:12" pos:end="25:12"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:12" pos:end="25:12">j</name></decl>, <decl pos:start="25:15" pos:end="25:16"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:15" pos:end="25:16">id</name></decl>, <decl pos:start="25:19" pos:end="25:22"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:19" pos:end="25:22">size</name></decl>, <decl pos:start="25:25" pos:end="25:29"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:25" pos:end="25:29">ssize</name></decl>, <decl pos:start="25:32" pos:end="25:38"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:32" pos:end="25:38">weights</name></decl>, <decl pos:start="25:41" pos:end="25:41"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:41" pos:end="25:41">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:11"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">bpp</name></decl>, <decl pos:start="27:14" pos:end="27:17"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:14" pos:end="27:17">chan</name></decl>, <decl pos:start="27:20" pos:end="27:25"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:20" pos:end="27:25">chmask</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:16">buf_size</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr>)</condition><block pos:start="31:23" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:18">data_size</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <literal type="number" pos:start="33:22" pos:end="33:22">0</literal></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if<condition pos:start="41:7" pos:end="41:66">(<expr pos:start="41:8" pos:end="41:65"><name pos:start="41:8" pos:end="41:15">block_no</name> <operator pos:start="41:17" pos:end="41:18">&gt;=</operator> <name pos:start="41:20" pos:end="41:31"><name pos:start="41:20" pos:end="41:21">wc</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:31">fdec_num</name></name> <operator pos:start="41:33" pos:end="41:34">&amp;&amp;</operator> <call pos:start="41:36" pos:end="41:61"><name pos:start="41:36" pos:end="41:57">wv_alloc_frame_context</name><argument_list pos:start="41:58" pos:end="41:61">(<argument pos:start="41:59" pos:end="41:60"><expr pos:start="41:59" pos:end="41:60"><name pos:start="41:59" pos:end="41:60">wc</name></expr></argument>)</argument_list></call> <operator pos:start="41:63" pos:end="41:63">&lt;</operator> <literal type="number" pos:start="41:65" pos:end="41:65">0</literal></expr>)</condition><block pos:start="41:67" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:77"><expr pos:start="43:9" pos:end="43:76"><call pos:start="43:9" pos:end="43:76"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:76">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:75"><expr pos:start="43:37" pos:end="43:75"><literal type="string" pos:start="43:37" pos:end="43:75">"Error creating frame decode context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:5">s</name> <operator pos:start="51:7" pos:end="51:7">=</operator> <name pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:10">wc</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:16">fdec</name><index pos:start="51:17" pos:end="51:26">[<expr pos:start="51:18" pos:end="51:25"><name pos:start="51:18" pos:end="51:25">block_no</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if<condition pos:start="53:7" pos:end="53:10">(<expr pos:start="53:8" pos:end="53:9"><operator pos:start="53:8" pos:end="53:8">!</operator><name pos:start="53:9" pos:end="53:9">s</name></expr>)</condition><block pos:start="53:11" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <expr_stmt pos:start="55:9" pos:end="55:87"><expr pos:start="55:9" pos:end="55:86"><call pos:start="55:9" pos:end="55:86"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:86">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:37" pos:end="55:75"><expr pos:start="55:37" pos:end="55:75"><literal type="string" pos:start="55:37" pos:end="55:75">"Context for block %d is not present\n"</literal></expr></argument>, <argument pos:start="55:78" pos:end="55:85"><expr pos:start="55:78" pos:end="55:85"><name pos:start="55:78" pos:end="55:85">block_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="75:5"><if pos:start="63:5" pos:end="75:5">if<condition pos:start="63:7" pos:end="63:24">(<expr pos:start="63:8" pos:end="63:23"><operator pos:start="63:8" pos:end="63:8">!</operator><name pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:23">samples_left</name></name></expr>)</condition><block pos:start="63:25" pos:end="75:5">{<block_content pos:start="65:9" pos:end="73:30">

        <expr_stmt pos:start="65:9" pos:end="65:57"><expr pos:start="65:9" pos:end="65:56"><call pos:start="65:9" pos:end="65:56"><name pos:start="65:9" pos:end="65:14">memset</name><argument_list pos:start="65:15" pos:end="65:56">(<argument pos:start="65:16" pos:end="65:24"><expr pos:start="65:16" pos:end="65:24"><name pos:start="65:16" pos:end="65:24"><name pos:start="65:16" pos:end="65:16">s</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:24">decorr</name></name></expr></argument>, <argument pos:start="65:27" pos:end="65:27"><expr pos:start="65:27" pos:end="65:27"><literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr></argument>, <argument pos:start="65:30" pos:end="65:55"><expr pos:start="65:30" pos:end="65:55"><name pos:start="65:30" pos:end="65:38">MAX_TERMS</name> <operator pos:start="65:40" pos:end="65:40">*</operator> <sizeof pos:start="65:42" pos:end="65:55">sizeof<argument_list pos:start="65:48" pos:end="65:55">(<argument pos:start="65:49" pos:end="65:54"><expr pos:start="65:49" pos:end="65:54"><name pos:start="65:49" pos:end="65:54">Decorr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:40"><expr pos:start="67:9" pos:end="67:39"><call pos:start="67:9" pos:end="67:39"><name pos:start="67:9" pos:end="67:14">memset</name><argument_list pos:start="67:15" pos:end="67:39">(<argument pos:start="67:16" pos:end="67:20"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:16">s</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:20">ch</name></name></expr></argument>, <argument pos:start="67:23" pos:end="67:23"><expr pos:start="67:23" pos:end="67:23"><literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr></argument>, <argument pos:start="67:26" pos:end="67:38"><expr pos:start="67:26" pos:end="67:38"><sizeof pos:start="67:26" pos:end="67:38">sizeof<argument_list pos:start="67:32" pos:end="67:38">(<argument pos:start="67:33" pos:end="67:37"><expr pos:start="67:33" pos:end="67:37"><name pos:start="67:33" pos:end="67:37"><name pos:start="67:33" pos:end="67:33">s</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:37">ch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:21">extra_bits</name></name> <operator pos:start="69:23" pos:end="69:23">=</operator> <literal type="number" pos:start="69:25" pos:end="69:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:38"><expr pos:start="71:9" pos:end="71:37"><name pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:14">and</name></name> <operator pos:start="71:16" pos:end="71:16">=</operator> <name pos:start="71:18" pos:end="71:22"><name pos:start="71:18" pos:end="71:18">s</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:22">or</name></name> <operator pos:start="71:24" pos:end="71:24">=</operator> <name pos:start="71:26" pos:end="71:33"><name pos:start="71:26" pos:end="71:26">s</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:33">shift</name></name> <operator pos:start="71:35" pos:end="71:35">=</operator> <literal type="number" pos:start="71:37" pos:end="71:37">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:25">got_extra_bits</name></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <literal type="number" pos:start="73:29" pos:end="73:29">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="95:5"><if pos:start="79:5" pos:end="91:5">if<condition pos:start="79:7" pos:end="79:21">(<expr pos:start="79:8" pos:end="79:20"><operator pos:start="79:8" pos:end="79:8">!</operator><name pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:10">wc</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:20">mkv_mode</name></name></expr>)</condition><block pos:start="79:22" pos:end="91:5">{<block_content pos:start="81:9" pos:end="89:9">

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:18">samples</name></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <call pos:start="81:22" pos:end="81:33"><name pos:start="81:22" pos:end="81:28">AV_RL32</name><argument_list pos:start="81:29" pos:end="81:33">(<argument pos:start="81:30" pos:end="81:32"><expr pos:start="81:30" pos:end="81:32"><name pos:start="81:30" pos:end="81:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="81:36" pos:end="81:44"><expr pos:start="81:36" pos:end="81:43"><name pos:start="81:36" pos:end="81:38">buf</name> <operator pos:start="81:40" pos:end="81:41">+=</operator> <literal type="number" pos:start="81:43" pos:end="81:43">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if<condition pos:start="83:11" pos:end="83:23">(<expr pos:start="83:12" pos:end="83:22"><operator pos:start="83:12" pos:end="83:12">!</operator><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:22">samples</name></name></expr>)</condition><block pos:start="83:24" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:21">

            <expr_stmt pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:26"><operator pos:start="85:13" pos:end="85:13">*</operator><name pos:start="85:14" pos:end="85:22">data_size</name> <operator pos:start="85:24" pos:end="85:24">=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">0</literal></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:21">return <expr pos:start="87:20" pos:end="87:20"><literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if><else pos:start="91:6" pos:end="95:5">else<block pos:start="91:10" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:33">

        <expr_stmt pos:start="93:9" pos:end="93:33"><expr pos:start="93:9" pos:end="93:32"><name pos:start="93:9" pos:end="93:18"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:18">samples</name></name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:32"><name pos:start="93:22" pos:end="93:23">wc</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:32">samples</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:34"><expr pos:start="97:5" pos:end="97:33"><name pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:18">frame_flags</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <call pos:start="97:22" pos:end="97:33"><name pos:start="97:22" pos:end="97:28">AV_RL32</name><argument_list pos:start="97:29" pos:end="97:33">(<argument pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><name pos:start="97:30" pos:end="97:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="97:36" pos:end="97:44"><expr pos:start="97:36" pos:end="97:43"><name pos:start="97:36" pos:end="97:38">buf</name> <operator pos:start="97:40" pos:end="97:41">+=</operator> <literal type="number" pos:start="97:43" pos:end="97:43">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="117:5"><if pos:start="99:5" pos:end="105:5">if<condition pos:start="99:7" pos:end="99:27">(<expr pos:start="99:8" pos:end="99:26"><name pos:start="99:8" pos:end="99:21"><name pos:start="99:8" pos:end="99:8">s</name><operator pos:start="99:9" pos:end="99:10">-&gt;</operator><name pos:start="99:11" pos:end="99:21">frame_flags</name></name><operator pos:start="99:22" pos:end="99:22">&amp;</operator><literal type="number" pos:start="99:23" pos:end="99:26">0x80</literal></expr>)</condition><block pos:start="99:28" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:46">

        <expr_stmt pos:start="101:9" pos:end="101:28"><expr pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:11">bpp</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <sizeof pos:start="101:15" pos:end="101:27">sizeof<argument_list pos:start="101:21" pos:end="101:27">(<argument pos:start="101:22" pos:end="101:26"><expr pos:start="101:22" pos:end="101:26"><name pos:start="101:22" pos:end="101:26">float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:46"><expr pos:start="103:9" pos:end="103:45"><name pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:13">avctx</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:25">sample_fmt</name></name> <operator pos:start="103:27" pos:end="103:27">=</operator> <name pos:start="103:29" pos:end="103:45">AV_SAMPLE_FMT_FLT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="105:7" pos:end="111:5">else if<condition pos:start="105:14" pos:end="105:41">(<expr pos:start="105:15" pos:end="105:40"><operator pos:start="105:15" pos:end="105:15">(</operator><name pos:start="105:16" pos:end="105:29"><name pos:start="105:16" pos:end="105:16">s</name><operator pos:start="105:17" pos:end="105:18">-&gt;</operator><name pos:start="105:19" pos:end="105:29">frame_flags</name></name><operator pos:start="105:30" pos:end="105:30">&amp;</operator><literal type="number" pos:start="105:31" pos:end="105:34">0x03</literal><operator pos:start="105:35" pos:end="105:35">)</operator> <operator pos:start="105:37" pos:end="105:38">&lt;=</operator> <literal type="number" pos:start="105:40" pos:end="105:40">1</literal></expr>)</condition><block pos:start="105:42" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:46">

        <expr_stmt pos:start="107:9" pos:end="107:16"><expr pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:11">bpp</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <literal type="number" pos:start="107:15" pos:end="107:15">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:46"><expr pos:start="109:9" pos:end="109:45"><name pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:13">avctx</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:25">sample_fmt</name></name> <operator pos:start="109:27" pos:end="109:27">=</operator> <name pos:start="109:29" pos:end="109:45">AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="117:5">else <block pos:start="111:12" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:46">

        <expr_stmt pos:start="113:9" pos:end="113:16"><expr pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:11">bpp</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <literal type="number" pos:start="113:15" pos:end="113:15">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:46"><expr pos:start="115:9" pos:end="115:45"><name pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:13">avctx</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:25">sample_fmt</name></name> <operator pos:start="115:27" pos:end="115:27">=</operator> <name pos:start="115:29" pos:end="115:45">AV_SAMPLE_FMT_S32</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:54"><expr pos:start="119:5" pos:end="119:53"><name pos:start="119:5" pos:end="119:11">samples</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <operator pos:start="119:15" pos:end="119:15">(</operator><name pos:start="119:16" pos:end="119:22">uint8_t</name><operator pos:start="119:23" pos:end="119:23">*</operator><operator pos:start="119:24" pos:end="119:24">)</operator><name pos:start="119:25" pos:end="119:31">samples</name> <operator pos:start="119:33" pos:end="119:33">+</operator> <name pos:start="119:35" pos:end="119:37">bpp</name> <operator pos:start="119:39" pos:end="119:39">*</operator> <name pos:start="119:41" pos:end="119:53"><name pos:start="119:41" pos:end="119:42">wc</name><operator pos:start="119:43" pos:end="119:44">-&gt;</operator><name pos:start="119:45" pos:end="119:53">ch_offset</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:44"><expr pos:start="123:5" pos:end="123:43"><name pos:start="123:5" pos:end="123:13"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:13">stereo</name></name> <operator pos:start="123:15" pos:end="123:15">=</operator> <operator pos:start="123:17" pos:end="123:17">!</operator><operator pos:start="123:18" pos:end="123:18">(</operator><name pos:start="123:19" pos:end="123:32"><name pos:start="123:19" pos:end="123:19">s</name><operator pos:start="123:20" pos:end="123:21">-&gt;</operator><name pos:start="123:22" pos:end="123:32">frame_flags</name></name> <operator pos:start="123:34" pos:end="123:34">&amp;</operator> <name pos:start="123:36" pos:end="123:42">WV_MONO</name><operator pos:start="123:43" pos:end="123:43">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:70"><expr pos:start="125:5" pos:end="125:69"><name pos:start="125:5" pos:end="125:16"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:16">stereo_in</name></name> <operator pos:start="125:18" pos:end="125:18">=</operator> <ternary pos:start="125:20" pos:end="125:69"><condition pos:start="125:20" pos:end="125:55"><expr pos:start="125:20" pos:end="125:53"><operator pos:start="125:20" pos:end="125:20">(</operator><name pos:start="125:21" pos:end="125:34"><name pos:start="125:21" pos:end="125:21">s</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:34">frame_flags</name></name> <operator pos:start="125:36" pos:end="125:36">&amp;</operator> <name pos:start="125:38" pos:end="125:52">WV_FALSE_STEREO</name><operator pos:start="125:53" pos:end="125:53">)</operator></expr> ?</condition><then pos:start="125:57" pos:end="125:57"> <expr pos:start="125:57" pos:end="125:57"><literal type="number" pos:start="125:57" pos:end="125:57">0</literal></expr> </then><else pos:start="125:59" pos:end="125:69">: <expr pos:start="125:61" pos:end="125:69"><name pos:start="125:61" pos:end="125:69"><name pos:start="125:61" pos:end="125:61">s</name><operator pos:start="125:62" pos:end="125:63">-&gt;</operator><name pos:start="125:64" pos:end="125:69">stereo</name></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:48"><expr pos:start="127:5" pos:end="127:47"><name pos:start="127:5" pos:end="127:12"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:12">joint</name></name> <operator pos:start="127:14" pos:end="127:14">=</operator> <name pos:start="127:16" pos:end="127:29"><name pos:start="127:16" pos:end="127:16">s</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:29">frame_flags</name></name> <operator pos:start="127:31" pos:end="127:31">&amp;</operator> <name pos:start="127:33" pos:end="127:47">WV_JOINT_STEREO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:48"><expr pos:start="129:5" pos:end="129:47"><name pos:start="129:5" pos:end="129:13"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:13">hybrid</name></name> <operator pos:start="129:15" pos:end="129:15">=</operator> <name pos:start="129:17" pos:end="129:30"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:30">frame_flags</name></name> <operator pos:start="129:32" pos:end="129:32">&amp;</operator> <name pos:start="129:34" pos:end="129:47">WV_HYBRID_MODE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:59"><expr pos:start="131:5" pos:end="131:58"><name pos:start="131:5" pos:end="131:21"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:21">hybrid_bitrate</name></name> <operator pos:start="131:23" pos:end="131:23">=</operator> <name pos:start="131:25" pos:end="131:38"><name pos:start="131:25" pos:end="131:25">s</name><operator pos:start="131:26" pos:end="131:27">-&gt;</operator><name pos:start="131:28" pos:end="131:38">frame_flags</name></name> <operator pos:start="131:40" pos:end="131:40">&amp;</operator> <name pos:start="131:42" pos:end="131:58">WV_HYBRID_BITRATE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:88"><expr pos:start="133:5" pos:end="133:87"><name pos:start="133:5" pos:end="133:17"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:17">post_shift</name></name> <operator pos:start="133:19" pos:end="133:19">=</operator> <literal type="number" pos:start="133:21" pos:end="133:21">8</literal> <operator pos:start="133:23" pos:end="133:23">*</operator> <operator pos:start="133:25" pos:end="133:25">(</operator><name pos:start="133:26" pos:end="133:28">bpp</name><operator pos:start="133:29" pos:end="133:29">-</operator><literal type="number" pos:start="133:30" pos:end="133:31">1</literal><operator pos:start="133:31" pos:end="133:31">-</operator><operator pos:start="133:32" pos:end="133:32">(</operator><name pos:start="133:33" pos:end="133:46"><name pos:start="133:33" pos:end="133:33">s</name><operator pos:start="133:34" pos:end="133:35">-&gt;</operator><name pos:start="133:36" pos:end="133:46">frame_flags</name></name><operator pos:start="133:47" pos:end="133:47">&amp;</operator><literal type="number" pos:start="133:48" pos:end="133:51">0x03</literal><operator pos:start="133:52" pos:end="133:52">)</operator><operator pos:start="133:53" pos:end="133:53">)</operator> <operator pos:start="133:55" pos:end="133:55">+</operator> <operator pos:start="133:57" pos:end="133:57">(</operator><operator pos:start="133:58" pos:end="133:58">(</operator><name pos:start="133:59" pos:end="133:72"><name pos:start="133:59" pos:end="133:59">s</name><operator pos:start="133:60" pos:end="133:61">-&gt;</operator><name pos:start="133:62" pos:end="133:72">frame_flags</name></name> <operator pos:start="133:74" pos:end="133:75">&gt;&gt;</operator> <literal type="number" pos:start="133:77" pos:end="133:78">13</literal><operator pos:start="133:79" pos:end="133:79">)</operator> <operator pos:start="133:81" pos:end="133:81">&amp;</operator> <literal type="number" pos:start="133:83" pos:end="133:86">0x1f</literal><operator pos:start="133:87" pos:end="133:87">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:26"><expr pos:start="135:5" pos:end="135:25"><name pos:start="135:5" pos:end="135:10"><name pos:start="135:5" pos:end="135:5">s</name><operator pos:start="135:6" pos:end="135:7">-&gt;</operator><name pos:start="135:8" pos:end="135:10">CRC</name></name> <operator pos:start="135:12" pos:end="135:12">=</operator> <call pos:start="135:14" pos:end="135:25"><name pos:start="135:14" pos:end="135:20">AV_RL32</name><argument_list pos:start="135:21" pos:end="135:25">(<argument pos:start="135:22" pos:end="135:24"><expr pos:start="135:22" pos:end="135:24"><name pos:start="135:22" pos:end="135:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="135:28" pos:end="135:36"><expr pos:start="135:28" pos:end="135:35"><name pos:start="135:28" pos:end="135:30">buf</name> <operator pos:start="135:32" pos:end="135:33">+=</operator> <literal type="number" pos:start="135:35" pos:end="135:35">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="139:17"><if pos:start="137:5" pos:end="139:17">if<condition pos:start="137:7" pos:end="137:20">(<expr pos:start="137:8" pos:end="137:19"><name pos:start="137:8" pos:end="137:19"><name pos:start="137:8" pos:end="137:9">wc</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:19">mkv_mode</name></name></expr>)</condition><block type="pseudo" pos:start="139:9" pos:end="139:17"><block_content pos:start="139:9" pos:end="139:17">

        <expr_stmt pos:start="139:9" pos:end="139:17"><expr pos:start="139:9" pos:end="139:16"><name pos:start="139:9" pos:end="139:11">buf</name> <operator pos:start="139:13" pos:end="139:14">+=</operator> <literal type="number" pos:start="139:16" pos:end="139:16">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="139:19" pos:end="139:36">//skip block size;</comment>



    <expr_stmt pos:start="143:5" pos:end="143:35"><expr pos:start="143:5" pos:end="143:34"><name pos:start="143:5" pos:end="143:17"><name pos:start="143:5" pos:end="143:6">wc</name><operator pos:start="143:7" pos:end="143:8">-&gt;</operator><name pos:start="143:9" pos:end="143:17">ch_offset</name></name> <operator pos:start="143:19" pos:end="143:20">+=</operator> <literal type="number" pos:start="143:22" pos:end="143:24">1</literal> <operator pos:start="143:24" pos:end="143:24">+</operator> <name pos:start="143:26" pos:end="143:34"><name pos:start="143:26" pos:end="143:26">s</name><operator pos:start="143:27" pos:end="143:28">-&gt;</operator><name pos:start="143:29" pos:end="143:34">stereo</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:58"><expr pos:start="147:5" pos:end="147:57"><name pos:start="147:5" pos:end="147:18"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:18">max_samples</name></name> <operator pos:start="147:20" pos:end="147:20">=</operator> <operator pos:start="147:22" pos:end="147:22">*</operator><name pos:start="147:23" pos:end="147:31">data_size</name> <operator pos:start="147:33" pos:end="147:33">/</operator> <operator pos:start="147:35" pos:end="147:35">(</operator><name pos:start="147:36" pos:end="147:38">bpp</name> <operator pos:start="147:40" pos:end="147:40">*</operator> <name pos:start="147:42" pos:end="147:56"><name pos:start="147:42" pos:end="147:46">avctx</name><operator pos:start="147:47" pos:end="147:48">-&gt;</operator><name pos:start="147:49" pos:end="147:56">channels</name></name><operator pos:start="147:57" pos:end="147:57">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:55"><expr pos:start="149:5" pos:end="149:54"><name pos:start="149:5" pos:end="149:18"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:18">max_samples</name></name> <operator pos:start="149:20" pos:end="149:20">=</operator> <call pos:start="149:22" pos:end="149:54"><name pos:start="149:22" pos:end="149:26">FFMIN</name><argument_list pos:start="149:27" pos:end="149:54">(<argument pos:start="149:28" pos:end="149:41"><expr pos:start="149:28" pos:end="149:41"><name pos:start="149:28" pos:end="149:41"><name pos:start="149:28" pos:end="149:28">s</name><operator pos:start="149:29" pos:end="149:30">-&gt;</operator><name pos:start="149:31" pos:end="149:41">max_samples</name></name></expr></argument>, <argument pos:start="149:44" pos:end="149:53"><expr pos:start="149:44" pos:end="149:53"><name pos:start="149:44" pos:end="149:53"><name pos:start="149:44" pos:end="149:44">s</name><operator pos:start="149:45" pos:end="149:46">-&gt;</operator><name pos:start="149:47" pos:end="149:53">samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="157:5"><if pos:start="151:5" pos:end="157:5">if<condition pos:start="151:7" pos:end="151:27">(<expr pos:start="151:8" pos:end="151:26"><name pos:start="151:8" pos:end="151:22"><name pos:start="151:8" pos:end="151:8">s</name><operator pos:start="151:9" pos:end="151:10">-&gt;</operator><name pos:start="151:11" pos:end="151:22">samples_left</name></name> <operator pos:start="151:24" pos:end="151:24">&gt;</operator> <literal type="number" pos:start="151:26" pos:end="151:26">0</literal></expr>)</condition><block pos:start="151:28" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:22">

        <expr_stmt pos:start="153:9" pos:end="153:64"><expr pos:start="153:9" pos:end="153:63"><name pos:start="153:9" pos:end="153:22"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:22">max_samples</name></name> <operator pos:start="153:24" pos:end="153:24">=</operator> <call pos:start="153:26" pos:end="153:63"><name pos:start="153:26" pos:end="153:30">FFMIN</name><argument_list pos:start="153:31" pos:end="153:63">(<argument pos:start="153:32" pos:end="153:45"><expr pos:start="153:32" pos:end="153:45"><name pos:start="153:32" pos:end="153:45"><name pos:start="153:32" pos:end="153:32">s</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:45">max_samples</name></name></expr></argument>, <argument pos:start="153:48" pos:end="153:62"><expr pos:start="153:48" pos:end="153:62"><name pos:start="153:48" pos:end="153:62"><name pos:start="153:48" pos:end="153:48">s</name><operator pos:start="153:49" pos:end="153:50">-&gt;</operator><name pos:start="153:51" pos:end="153:62">samples_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:22"><expr pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:11">buf</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <name pos:start="155:15" pos:end="155:21">buf_end</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="161:5" pos:end="161:28">// parse metadata blocks</comment>

    <while pos:start="163:5" pos:end="613:5">while<condition pos:start="163:10" pos:end="163:24">(<expr pos:start="163:11" pos:end="163:23"><name pos:start="163:11" pos:end="163:13">buf</name> <operator pos:start="163:15" pos:end="163:15">&lt;</operator> <name pos:start="163:17" pos:end="163:23">buf_end</name></expr>)</condition><block pos:start="163:25" pos:end="613:5">{<block_content pos:start="165:9" pos:end="611:34">

        <expr_stmt pos:start="165:9" pos:end="165:20"><expr pos:start="165:9" pos:end="165:19"><name pos:start="165:9" pos:end="165:10">id</name> <operator pos:start="165:12" pos:end="165:12">=</operator> <operator pos:start="165:14" pos:end="165:14">*</operator><name pos:start="165:15" pos:end="165:17">buf</name><operator pos:start="165:18" pos:end="165:19">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:22"><expr pos:start="167:9" pos:end="167:21"><name pos:start="167:9" pos:end="167:12">size</name> <operator pos:start="167:14" pos:end="167:14">=</operator> <operator pos:start="167:16" pos:end="167:16">*</operator><name pos:start="167:17" pos:end="167:19">buf</name><operator pos:start="167:20" pos:end="167:21">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="175:9"><if pos:start="169:9" pos:end="175:9">if<condition pos:start="169:11" pos:end="169:28">(<expr pos:start="169:12" pos:end="169:27"><name pos:start="169:12" pos:end="169:13">id</name> <operator pos:start="169:15" pos:end="169:15">&amp;</operator> <name pos:start="169:17" pos:end="169:27">WP_IDF_LONG</name></expr>)</condition> <block pos:start="169:30" pos:end="175:9">{<block_content pos:start="171:13" pos:end="173:35">

            <expr_stmt pos:start="171:13" pos:end="171:34"><expr pos:start="171:13" pos:end="171:33"><name pos:start="171:13" pos:end="171:16">size</name> <operator pos:start="171:18" pos:end="171:19">|=</operator> <operator pos:start="171:21" pos:end="171:21">(</operator><operator pos:start="171:22" pos:end="171:22">*</operator><name pos:start="171:23" pos:end="171:25">buf</name><operator pos:start="171:26" pos:end="171:27">++</operator><operator pos:start="171:28" pos:end="171:28">)</operator> <operator pos:start="171:30" pos:end="171:31">&lt;&lt;</operator> <literal type="number" pos:start="171:33" pos:end="171:33">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:35"><expr pos:start="173:13" pos:end="173:34"><name pos:start="173:13" pos:end="173:16">size</name> <operator pos:start="173:18" pos:end="173:19">|=</operator> <operator pos:start="173:21" pos:end="173:21">(</operator><operator pos:start="173:22" pos:end="173:22">*</operator><name pos:start="173:23" pos:end="173:25">buf</name><operator pos:start="173:26" pos:end="173:27">++</operator><operator pos:start="173:28" pos:end="173:28">)</operator> <operator pos:start="173:30" pos:end="173:31">&lt;&lt;</operator> <literal type="number" pos:start="173:33" pos:end="173:34">16</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:19"><expr pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:12">size</name> <operator pos:start="177:14" pos:end="177:16">&lt;&lt;=</operator> <literal type="number" pos:start="177:18" pos:end="177:18">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="177:21" pos:end="177:49">// size is specified in words</comment>

        <expr_stmt pos:start="179:9" pos:end="179:21"><expr pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:13">ssize</name> <operator pos:start="179:15" pos:end="179:15">=</operator> <name pos:start="179:17" pos:end="179:20">size</name></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="181:35"><if pos:start="181:9" pos:end="181:35">if<condition pos:start="181:11" pos:end="181:27">(<expr pos:start="181:12" pos:end="181:26"><name pos:start="181:12" pos:end="181:13">id</name> <operator pos:start="181:15" pos:end="181:15">&amp;</operator> <name pos:start="181:17" pos:end="181:26">WP_IDF_ODD</name></expr>)</condition><block type="pseudo" pos:start="181:29" pos:end="181:35"><block_content pos:start="181:29" pos:end="181:35"> <expr_stmt pos:start="181:29" pos:end="181:35"><expr pos:start="181:29" pos:end="181:34"><name pos:start="181:29" pos:end="181:32">size</name><operator pos:start="181:33" pos:end="181:34">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if<condition pos:start="183:11" pos:end="183:20">(<expr pos:start="183:12" pos:end="183:19"><name pos:start="183:12" pos:end="183:15">size</name> <operator pos:start="183:17" pos:end="183:17">&lt;</operator> <literal type="number" pos:start="183:19" pos:end="183:19">0</literal></expr>)</condition><block pos:start="183:21" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:18">

            <expr_stmt pos:start="185:13" pos:end="185:93"><expr pos:start="185:13" pos:end="185:92"><call pos:start="185:13" pos:end="185:92"><name pos:start="185:13" pos:end="185:18">av_log</name><argument_list pos:start="185:19" pos:end="185:92">(<argument pos:start="185:20" pos:end="185:24"><expr pos:start="185:20" pos:end="185:24"><name pos:start="185:20" pos:end="185:24">avctx</name></expr></argument>, <argument pos:start="185:27" pos:end="185:38"><expr pos:start="185:27" pos:end="185:38"><name pos:start="185:27" pos:end="185:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:41" pos:end="185:81"><expr pos:start="185:41" pos:end="185:81"><literal type="string" pos:start="185:41" pos:end="185:81">"Got incorrect block %02X with size %i\n"</literal></expr></argument>, <argument pos:start="185:84" pos:end="185:85"><expr pos:start="185:84" pos:end="185:85"><name pos:start="185:84" pos:end="185:85">id</name></expr></argument>, <argument pos:start="185:88" pos:end="185:91"><expr pos:start="185:88" pos:end="185:91"><name pos:start="185:88" pos:end="185:91">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="191:9" pos:end="197:9"><if pos:start="191:9" pos:end="197:9">if<condition pos:start="191:11" pos:end="191:33">(<expr pos:start="191:12" pos:end="191:32"><name pos:start="191:12" pos:end="191:14">buf</name> <operator pos:start="191:16" pos:end="191:16">+</operator> <name pos:start="191:18" pos:end="191:22">ssize</name> <operator pos:start="191:24" pos:end="191:24">&gt;</operator> <name pos:start="191:26" pos:end="191:32">buf_end</name></expr>)</condition><block pos:start="191:34" pos:end="197:9">{<block_content pos:start="193:13" pos:end="195:18">

            <expr_stmt pos:start="193:13" pos:end="193:82"><expr pos:start="193:13" pos:end="193:81"><call pos:start="193:13" pos:end="193:81"><name pos:start="193:13" pos:end="193:18">av_log</name><argument_list pos:start="193:19" pos:end="193:81">(<argument pos:start="193:20" pos:end="193:24"><expr pos:start="193:20" pos:end="193:24"><name pos:start="193:20" pos:end="193:24">avctx</name></expr></argument>, <argument pos:start="193:27" pos:end="193:38"><expr pos:start="193:27" pos:end="193:38"><name pos:start="193:27" pos:end="193:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:41" pos:end="193:74"><expr pos:start="193:41" pos:end="193:74"><literal type="string" pos:start="193:41" pos:end="193:74">"Block size %i is out of bounds\n"</literal></expr></argument>, <argument pos:start="193:77" pos:end="193:80"><expr pos:start="193:77" pos:end="193:80"><name pos:start="193:77" pos:end="193:80">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="199:9" pos:end="205:9"><if pos:start="199:9" pos:end="205:9">if<condition pos:start="199:11" pos:end="199:30">(<expr pos:start="199:12" pos:end="199:29"><name pos:start="199:12" pos:end="199:13">id</name> <operator pos:start="199:15" pos:end="199:15">&amp;</operator> <name pos:start="199:17" pos:end="199:29">WP_IDF_IGNORE</name></expr>)</condition><block pos:start="199:31" pos:end="205:9">{<block_content pos:start="201:13" pos:end="203:21">

            <expr_stmt pos:start="201:13" pos:end="201:25"><expr pos:start="201:13" pos:end="201:24"><name pos:start="201:13" pos:end="201:15">buf</name> <operator pos:start="201:17" pos:end="201:18">+=</operator> <name pos:start="201:20" pos:end="201:24">ssize</name></expr>;</expr_stmt>

            <continue pos:start="203:13" pos:end="203:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="207:9" pos:end="609:9">switch<condition pos:start="207:15" pos:end="207:32">(<expr pos:start="207:16" pos:end="207:31"><name pos:start="207:16" pos:end="207:17">id</name> <operator pos:start="207:19" pos:end="207:19">&amp;</operator> <name pos:start="207:21" pos:end="207:31">WP_IDF_MASK</name></expr>)</condition><block pos:start="207:33" pos:end="609:9">{<block_content pos:start="209:9" pos:end="607:24">

        <case pos:start="209:9" pos:end="209:28">case <expr pos:start="209:14" pos:end="209:27"><name pos:start="209:14" pos:end="209:27">WP_ID_DECTERMS</name></expr>:</case>

            <expr_stmt pos:start="211:13" pos:end="211:28"><expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:20"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:20">terms</name></name> <operator pos:start="211:22" pos:end="211:22">=</operator> <name pos:start="211:24" pos:end="211:27">size</name></expr>;</expr_stmt>

            <if_stmt pos:start="213:13" pos:end="221:13"><if pos:start="213:13" pos:end="221:13">if<condition pos:start="213:15" pos:end="213:36">(<expr pos:start="213:16" pos:end="213:35"><name pos:start="213:16" pos:end="213:23"><name pos:start="213:16" pos:end="213:16">s</name><operator pos:start="213:17" pos:end="213:18">-&gt;</operator><name pos:start="213:19" pos:end="213:23">terms</name></name> <operator pos:start="213:25" pos:end="213:25">&gt;</operator> <name pos:start="213:27" pos:end="213:35">MAX_TERMS</name></expr>)</condition><block pos:start="213:37" pos:end="221:13">{<block_content pos:start="215:17" pos:end="219:25">

                <expr_stmt pos:start="215:17" pos:end="215:78"><expr pos:start="215:17" pos:end="215:77"><call pos:start="215:17" pos:end="215:77"><name pos:start="215:17" pos:end="215:22">av_log</name><argument_list pos:start="215:23" pos:end="215:77">(<argument pos:start="215:24" pos:end="215:28"><expr pos:start="215:24" pos:end="215:28"><name pos:start="215:24" pos:end="215:28">avctx</name></expr></argument>, <argument pos:start="215:31" pos:end="215:42"><expr pos:start="215:31" pos:end="215:42"><name pos:start="215:31" pos:end="215:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="215:45" pos:end="215:76"><expr pos:start="215:45" pos:end="215:76"><literal type="string" pos:start="215:45" pos:end="215:76">"Too many decorrelation terms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:29"><expr pos:start="217:17" pos:end="217:28"><name pos:start="217:17" pos:end="217:19">buf</name> <operator pos:start="217:21" pos:end="217:22">+=</operator> <name pos:start="217:24" pos:end="217:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="219:17" pos:end="219:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <for pos:start="223:13" pos:end="231:13">for<control pos:start="223:16" pos:end="223:41">(<init pos:start="223:17" pos:end="223:22"><expr pos:start="223:17" pos:end="223:21"><name pos:start="223:17" pos:end="223:17">i</name> <operator pos:start="223:19" pos:end="223:19">=</operator> <literal type="number" pos:start="223:21" pos:end="223:21">0</literal></expr>;</init> <condition pos:start="223:24" pos:end="223:36"><expr pos:start="223:24" pos:end="223:35"><name pos:start="223:24" pos:end="223:24">i</name> <operator pos:start="223:26" pos:end="223:26">&lt;</operator> <name pos:start="223:28" pos:end="223:35"><name pos:start="223:28" pos:end="223:28">s</name><operator pos:start="223:29" pos:end="223:30">-&gt;</operator><name pos:start="223:31" pos:end="223:35">terms</name></name></expr>;</condition> <incr pos:start="223:38" pos:end="223:40"><expr pos:start="223:38" pos:end="223:40"><name pos:start="223:38" pos:end="223:38">i</name><operator pos:start="223:39" pos:end="223:40">++</operator></expr></incr>)</control> <block pos:start="223:43" pos:end="231:13">{<block_content pos:start="225:17" pos:end="229:22">

                <expr_stmt pos:start="225:17" pos:end="225:70"><expr pos:start="225:17" pos:end="225:69"><name pos:start="225:17" pos:end="225:43"><name pos:start="225:17" pos:end="225:17">s</name><operator pos:start="225:18" pos:end="225:19">-&gt;</operator><name pos:start="225:20" pos:end="225:25">decorr</name><index pos:start="225:26" pos:end="225:43">[<expr pos:start="225:27" pos:end="225:42"><name pos:start="225:27" pos:end="225:34"><name pos:start="225:27" pos:end="225:27">s</name><operator pos:start="225:28" pos:end="225:29">-&gt;</operator><name pos:start="225:30" pos:end="225:34">terms</name></name> <operator pos:start="225:36" pos:end="225:36">-</operator> <name pos:start="225:38" pos:end="225:38">i</name> <operator pos:start="225:40" pos:end="225:40">-</operator> <literal type="number" pos:start="225:42" pos:end="225:42">1</literal></expr>]</index></name><operator pos:start="225:44" pos:end="225:44">.</operator><name pos:start="225:45" pos:end="225:49">value</name> <operator pos:start="225:51" pos:end="225:51">=</operator> <operator pos:start="225:53" pos:end="225:53">(</operator><operator pos:start="225:54" pos:end="225:54">*</operator><name pos:start="225:55" pos:end="225:57">buf</name> <operator pos:start="225:59" pos:end="225:59">&amp;</operator> <literal type="number" pos:start="225:61" pos:end="225:64">0x1F</literal><operator pos:start="225:65" pos:end="225:65">)</operator> <operator pos:start="225:67" pos:end="225:67">-</operator> <literal type="number" pos:start="225:69" pos:end="225:69">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:62"><expr pos:start="227:17" pos:end="227:61"><name pos:start="227:17" pos:end="227:43"><name pos:start="227:17" pos:end="227:17">s</name><operator pos:start="227:18" pos:end="227:19">-&gt;</operator><name pos:start="227:20" pos:end="227:25">decorr</name><index pos:start="227:26" pos:end="227:43">[<expr pos:start="227:27" pos:end="227:42"><name pos:start="227:27" pos:end="227:34"><name pos:start="227:27" pos:end="227:27">s</name><operator pos:start="227:28" pos:end="227:29">-&gt;</operator><name pos:start="227:30" pos:end="227:34">terms</name></name> <operator pos:start="227:36" pos:end="227:36">-</operator> <name pos:start="227:38" pos:end="227:38">i</name> <operator pos:start="227:40" pos:end="227:40">-</operator> <literal type="number" pos:start="227:42" pos:end="227:42">1</literal></expr>]</index></name><operator pos:start="227:44" pos:end="227:44">.</operator><name pos:start="227:45" pos:end="227:49">delta</name> <operator pos:start="227:51" pos:end="227:51">=</operator> <operator pos:start="227:53" pos:end="227:53">*</operator><name pos:start="227:54" pos:end="227:56">buf</name> <operator pos:start="227:58" pos:end="227:59">&gt;&gt;</operator> <literal type="number" pos:start="227:61" pos:end="227:61">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:22"><expr pos:start="229:17" pos:end="229:21"><name pos:start="229:17" pos:end="229:19">buf</name><operator pos:start="229:20" pos:end="229:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="233:13" pos:end="233:26"><expr pos:start="233:13" pos:end="233:25"><name pos:start="233:13" pos:end="233:21">got_terms</name> <operator pos:start="233:23" pos:end="233:23">=</operator> <literal type="number" pos:start="233:25" pos:end="233:25">1</literal></expr>;</expr_stmt>

            <break pos:start="235:13" pos:end="235:18">break;</break>

        <case pos:start="237:9" pos:end="237:30">case <expr pos:start="237:14" pos:end="237:29"><name pos:start="237:14" pos:end="237:29">WP_ID_DECWEIGHTS</name></expr>:</case>

            <if_stmt pos:start="239:13" pos:end="245:13"><if pos:start="239:13" pos:end="245:13">if<condition pos:start="239:15" pos:end="239:26">(<expr pos:start="239:16" pos:end="239:25"><operator pos:start="239:16" pos:end="239:16">!</operator><name pos:start="239:17" pos:end="239:25">got_terms</name></expr>)</condition><block pos:start="239:27" pos:end="245:13">{<block_content pos:start="241:17" pos:end="243:25">

                <expr_stmt pos:start="241:17" pos:end="241:76"><expr pos:start="241:17" pos:end="241:75"><call pos:start="241:17" pos:end="241:75"><name pos:start="241:17" pos:end="241:22">av_log</name><argument_list pos:start="241:23" pos:end="241:75">(<argument pos:start="241:24" pos:end="241:28"><expr pos:start="241:24" pos:end="241:28"><name pos:start="241:24" pos:end="241:28">avctx</name></expr></argument>, <argument pos:start="241:31" pos:end="241:42"><expr pos:start="241:31" pos:end="241:42"><name pos:start="241:31" pos:end="241:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="241:45" pos:end="241:74"><expr pos:start="241:45" pos:end="241:74"><literal type="string" pos:start="241:45" pos:end="241:74">"No decorrelation terms met\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="243:17" pos:end="243:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:43"><expr pos:start="247:13" pos:end="247:42"><name pos:start="247:13" pos:end="247:19">weights</name> <operator pos:start="247:21" pos:end="247:21">=</operator> <name pos:start="247:23" pos:end="247:26">size</name> <operator pos:start="247:28" pos:end="247:29">&gt;&gt;</operator> <name pos:start="247:31" pos:end="247:42"><name pos:start="247:31" pos:end="247:31">s</name><operator pos:start="247:32" pos:end="247:33">-&gt;</operator><name pos:start="247:34" pos:end="247:42">stereo_in</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="257:13"><if pos:start="249:13" pos:end="257:13">if<condition pos:start="249:15" pos:end="249:57">(<expr pos:start="249:16" pos:end="249:56"><name pos:start="249:16" pos:end="249:22">weights</name> <operator pos:start="249:24" pos:end="249:24">&gt;</operator> <name pos:start="249:26" pos:end="249:34">MAX_TERMS</name> <operator pos:start="249:36" pos:end="249:37">||</operator> <name pos:start="249:39" pos:end="249:45">weights</name> <operator pos:start="249:47" pos:end="249:47">&gt;</operator> <name pos:start="249:49" pos:end="249:56"><name pos:start="249:49" pos:end="249:49">s</name><operator pos:start="249:50" pos:end="249:51">-&gt;</operator><name pos:start="249:52" pos:end="249:56">terms</name></name></expr>)</condition><block pos:start="249:58" pos:end="257:13">{<block_content pos:start="251:17" pos:end="255:25">

                <expr_stmt pos:start="251:17" pos:end="251:80"><expr pos:start="251:17" pos:end="251:79"><call pos:start="251:17" pos:end="251:79"><name pos:start="251:17" pos:end="251:22">av_log</name><argument_list pos:start="251:23" pos:end="251:79">(<argument pos:start="251:24" pos:end="251:28"><expr pos:start="251:24" pos:end="251:28"><name pos:start="251:24" pos:end="251:28">avctx</name></expr></argument>, <argument pos:start="251:31" pos:end="251:42"><expr pos:start="251:31" pos:end="251:42"><name pos:start="251:31" pos:end="251:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="251:45" pos:end="251:78"><expr pos:start="251:45" pos:end="251:78"><literal type="string" pos:start="251:45" pos:end="251:78">"Too many decorrelation weights\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:29"><expr pos:start="253:17" pos:end="253:28"><name pos:start="253:17" pos:end="253:19">buf</name> <operator pos:start="253:21" pos:end="253:22">+=</operator> <name pos:start="253:24" pos:end="253:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="255:17" pos:end="255:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <for pos:start="259:13" pos:end="281:13">for<control pos:start="259:16" pos:end="259:40">(<init pos:start="259:17" pos:end="259:22"><expr pos:start="259:17" pos:end="259:21"><name pos:start="259:17" pos:end="259:17">i</name> <operator pos:start="259:19" pos:end="259:19">=</operator> <literal type="number" pos:start="259:21" pos:end="259:21">0</literal></expr>;</init> <condition pos:start="259:24" pos:end="259:35"><expr pos:start="259:24" pos:end="259:34"><name pos:start="259:24" pos:end="259:24">i</name> <operator pos:start="259:26" pos:end="259:26">&lt;</operator> <name pos:start="259:28" pos:end="259:34">weights</name></expr>;</condition> <incr pos:start="259:37" pos:end="259:39"><expr pos:start="259:37" pos:end="259:39"><name pos:start="259:37" pos:end="259:37">i</name><operator pos:start="259:38" pos:end="259:39">++</operator></expr></incr>)</control> <block pos:start="259:42" pos:end="281:13">{<block_content pos:start="261:17" pos:end="279:17">

                <expr_stmt pos:start="261:17" pos:end="261:37"><expr pos:start="261:17" pos:end="261:36"><name pos:start="261:17" pos:end="261:17">t</name> <operator pos:start="261:19" pos:end="261:19">=</operator> <operator pos:start="261:21" pos:end="261:21">(</operator><name pos:start="261:22" pos:end="261:27">int8_t</name><operator pos:start="261:28" pos:end="261:28">)</operator><operator pos:start="261:29" pos:end="261:29">(</operator><operator pos:start="261:30" pos:end="261:30">*</operator><name pos:start="261:31" pos:end="261:33">buf</name><operator pos:start="261:34" pos:end="261:35">++</operator><operator pos:start="261:36" pos:end="261:36">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:61"><expr pos:start="263:17" pos:end="263:60"><name pos:start="263:17" pos:end="263:43"><name pos:start="263:17" pos:end="263:17">s</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:25">decorr</name><index pos:start="263:26" pos:end="263:43">[<expr pos:start="263:27" pos:end="263:42"><name pos:start="263:27" pos:end="263:34"><name pos:start="263:27" pos:end="263:27">s</name><operator pos:start="263:28" pos:end="263:29">-&gt;</operator><name pos:start="263:30" pos:end="263:34">terms</name></name> <operator pos:start="263:36" pos:end="263:36">-</operator> <name pos:start="263:38" pos:end="263:38">i</name> <operator pos:start="263:40" pos:end="263:40">-</operator> <literal type="number" pos:start="263:42" pos:end="263:42">1</literal></expr>]</index></name><operator pos:start="263:44" pos:end="263:44">.</operator><name pos:start="263:45" pos:end="263:51">weightA</name> <operator pos:start="263:53" pos:end="263:53">=</operator> <name pos:start="263:55" pos:end="263:55">t</name> <operator pos:start="263:57" pos:end="263:58">&lt;&lt;</operator> <literal type="number" pos:start="263:60" pos:end="263:60">3</literal></expr>;</expr_stmt>

                <if_stmt pos:start="265:17" pos:end="267:107"><if pos:start="265:17" pos:end="267:107">if<condition pos:start="265:19" pos:end="265:59">(<expr pos:start="265:20" pos:end="265:58"><name pos:start="265:20" pos:end="265:46"><name pos:start="265:20" pos:end="265:20">s</name><operator pos:start="265:21" pos:end="265:22">-&gt;</operator><name pos:start="265:23" pos:end="265:28">decorr</name><index pos:start="265:29" pos:end="265:46">[<expr pos:start="265:30" pos:end="265:45"><name pos:start="265:30" pos:end="265:37"><name pos:start="265:30" pos:end="265:30">s</name><operator pos:start="265:31" pos:end="265:32">-&gt;</operator><name pos:start="265:33" pos:end="265:37">terms</name></name> <operator pos:start="265:39" pos:end="265:39">-</operator> <name pos:start="265:41" pos:end="265:41">i</name> <operator pos:start="265:43" pos:end="265:43">-</operator> <literal type="number" pos:start="265:45" pos:end="265:45">1</literal></expr>]</index></name><operator pos:start="265:47" pos:end="265:47">.</operator><name pos:start="265:48" pos:end="265:54">weightA</name> <operator pos:start="265:56" pos:end="265:56">&gt;</operator> <literal type="number" pos:start="265:58" pos:end="265:58">0</literal></expr>)</condition><block type="pseudo" pos:start="267:21" pos:end="267:107"><block_content pos:start="267:21" pos:end="267:107">

                    <expr_stmt pos:start="267:21" pos:end="267:107"><expr pos:start="267:21" pos:end="267:106"><name pos:start="267:21" pos:end="267:47"><name pos:start="267:21" pos:end="267:21">s</name><operator pos:start="267:22" pos:end="267:23">-&gt;</operator><name pos:start="267:24" pos:end="267:29">decorr</name><index pos:start="267:30" pos:end="267:47">[<expr pos:start="267:31" pos:end="267:46"><name pos:start="267:31" pos:end="267:38"><name pos:start="267:31" pos:end="267:31">s</name><operator pos:start="267:32" pos:end="267:33">-&gt;</operator><name pos:start="267:34" pos:end="267:38">terms</name></name> <operator pos:start="267:40" pos:end="267:40">-</operator> <name pos:start="267:42" pos:end="267:42">i</name> <operator pos:start="267:44" pos:end="267:44">-</operator> <literal type="number" pos:start="267:46" pos:end="267:46">1</literal></expr>]</index></name><operator pos:start="267:48" pos:end="267:48">.</operator><name pos:start="267:49" pos:end="267:55">weightA</name> <operator pos:start="267:57" pos:end="267:58">+=</operator> <operator pos:start="267:60" pos:end="267:60">(</operator><name pos:start="267:61" pos:end="267:87"><name pos:start="267:61" pos:end="267:61">s</name><operator pos:start="267:62" pos:end="267:63">-&gt;</operator><name pos:start="267:64" pos:end="267:69">decorr</name><index pos:start="267:70" pos:end="267:87">[<expr pos:start="267:71" pos:end="267:86"><name pos:start="267:71" pos:end="267:78"><name pos:start="267:71" pos:end="267:71">s</name><operator pos:start="267:72" pos:end="267:73">-&gt;</operator><name pos:start="267:74" pos:end="267:78">terms</name></name> <operator pos:start="267:80" pos:end="267:80">-</operator> <name pos:start="267:82" pos:end="267:82">i</name> <operator pos:start="267:84" pos:end="267:84">-</operator> <literal type="number" pos:start="267:86" pos:end="267:86">1</literal></expr>]</index></name><operator pos:start="267:88" pos:end="267:88">.</operator><name pos:start="267:89" pos:end="267:95">weightA</name> <operator pos:start="267:97" pos:end="267:97">+</operator> <literal type="number" pos:start="267:99" pos:end="267:100">64</literal><operator pos:start="267:101" pos:end="267:101">)</operator> <operator pos:start="267:103" pos:end="267:104">&gt;&gt;</operator> <literal type="number" pos:start="267:106" pos:end="267:106">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="269:17" pos:end="279:17"><if pos:start="269:17" pos:end="279:17">if<condition pos:start="269:19" pos:end="269:32">(<expr pos:start="269:20" pos:end="269:31"><name pos:start="269:20" pos:end="269:31"><name pos:start="269:20" pos:end="269:20">s</name><operator pos:start="269:21" pos:end="269:22">-&gt;</operator><name pos:start="269:23" pos:end="269:31">stereo_in</name></name></expr>)</condition><block pos:start="269:33" pos:end="279:17">{<block_content pos:start="271:21" pos:end="277:111">

                    <expr_stmt pos:start="271:21" pos:end="271:41"><expr pos:start="271:21" pos:end="271:40"><name pos:start="271:21" pos:end="271:21">t</name> <operator pos:start="271:23" pos:end="271:23">=</operator> <operator pos:start="271:25" pos:end="271:25">(</operator><name pos:start="271:26" pos:end="271:31">int8_t</name><operator pos:start="271:32" pos:end="271:32">)</operator><operator pos:start="271:33" pos:end="271:33">(</operator><operator pos:start="271:34" pos:end="271:34">*</operator><name pos:start="271:35" pos:end="271:37">buf</name><operator pos:start="271:38" pos:end="271:39">++</operator><operator pos:start="271:40" pos:end="271:40">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="273:21" pos:end="273:65"><expr pos:start="273:21" pos:end="273:64"><name pos:start="273:21" pos:end="273:47"><name pos:start="273:21" pos:end="273:21">s</name><operator pos:start="273:22" pos:end="273:23">-&gt;</operator><name pos:start="273:24" pos:end="273:29">decorr</name><index pos:start="273:30" pos:end="273:47">[<expr pos:start="273:31" pos:end="273:46"><name pos:start="273:31" pos:end="273:38"><name pos:start="273:31" pos:end="273:31">s</name><operator pos:start="273:32" pos:end="273:33">-&gt;</operator><name pos:start="273:34" pos:end="273:38">terms</name></name> <operator pos:start="273:40" pos:end="273:40">-</operator> <name pos:start="273:42" pos:end="273:42">i</name> <operator pos:start="273:44" pos:end="273:44">-</operator> <literal type="number" pos:start="273:46" pos:end="273:46">1</literal></expr>]</index></name><operator pos:start="273:48" pos:end="273:48">.</operator><name pos:start="273:49" pos:end="273:55">weightB</name> <operator pos:start="273:57" pos:end="273:57">=</operator> <name pos:start="273:59" pos:end="273:59">t</name> <operator pos:start="273:61" pos:end="273:62">&lt;&lt;</operator> <literal type="number" pos:start="273:64" pos:end="273:64">3</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="275:21" pos:end="277:111"><if pos:start="275:21" pos:end="277:111">if<condition pos:start="275:23" pos:end="275:63">(<expr pos:start="275:24" pos:end="275:62"><name pos:start="275:24" pos:end="275:50"><name pos:start="275:24" pos:end="275:24">s</name><operator pos:start="275:25" pos:end="275:26">-&gt;</operator><name pos:start="275:27" pos:end="275:32">decorr</name><index pos:start="275:33" pos:end="275:50">[<expr pos:start="275:34" pos:end="275:49"><name pos:start="275:34" pos:end="275:41"><name pos:start="275:34" pos:end="275:34">s</name><operator pos:start="275:35" pos:end="275:36">-&gt;</operator><name pos:start="275:37" pos:end="275:41">terms</name></name> <operator pos:start="275:43" pos:end="275:43">-</operator> <name pos:start="275:45" pos:end="275:45">i</name> <operator pos:start="275:47" pos:end="275:47">-</operator> <literal type="number" pos:start="275:49" pos:end="275:49">1</literal></expr>]</index></name><operator pos:start="275:51" pos:end="275:51">.</operator><name pos:start="275:52" pos:end="275:58">weightB</name> <operator pos:start="275:60" pos:end="275:60">&gt;</operator> <literal type="number" pos:start="275:62" pos:end="275:62">0</literal></expr>)</condition><block type="pseudo" pos:start="277:25" pos:end="277:111"><block_content pos:start="277:25" pos:end="277:111">

                        <expr_stmt pos:start="277:25" pos:end="277:111"><expr pos:start="277:25" pos:end="277:110"><name pos:start="277:25" pos:end="277:51"><name pos:start="277:25" pos:end="277:25">s</name><operator pos:start="277:26" pos:end="277:27">-&gt;</operator><name pos:start="277:28" pos:end="277:33">decorr</name><index pos:start="277:34" pos:end="277:51">[<expr pos:start="277:35" pos:end="277:50"><name pos:start="277:35" pos:end="277:42"><name pos:start="277:35" pos:end="277:35">s</name><operator pos:start="277:36" pos:end="277:37">-&gt;</operator><name pos:start="277:38" pos:end="277:42">terms</name></name> <operator pos:start="277:44" pos:end="277:44">-</operator> <name pos:start="277:46" pos:end="277:46">i</name> <operator pos:start="277:48" pos:end="277:48">-</operator> <literal type="number" pos:start="277:50" pos:end="277:50">1</literal></expr>]</index></name><operator pos:start="277:52" pos:end="277:52">.</operator><name pos:start="277:53" pos:end="277:59">weightB</name> <operator pos:start="277:61" pos:end="277:62">+=</operator> <operator pos:start="277:64" pos:end="277:64">(</operator><name pos:start="277:65" pos:end="277:91"><name pos:start="277:65" pos:end="277:65">s</name><operator pos:start="277:66" pos:end="277:67">-&gt;</operator><name pos:start="277:68" pos:end="277:73">decorr</name><index pos:start="277:74" pos:end="277:91">[<expr pos:start="277:75" pos:end="277:90"><name pos:start="277:75" pos:end="277:82"><name pos:start="277:75" pos:end="277:75">s</name><operator pos:start="277:76" pos:end="277:77">-&gt;</operator><name pos:start="277:78" pos:end="277:82">terms</name></name> <operator pos:start="277:84" pos:end="277:84">-</operator> <name pos:start="277:86" pos:end="277:86">i</name> <operator pos:start="277:88" pos:end="277:88">-</operator> <literal type="number" pos:start="277:90" pos:end="277:90">1</literal></expr>]</index></name><operator pos:start="277:92" pos:end="277:92">.</operator><name pos:start="277:93" pos:end="277:99">weightB</name> <operator pos:start="277:101" pos:end="277:101">+</operator> <literal type="number" pos:start="277:103" pos:end="277:104">64</literal><operator pos:start="277:105" pos:end="277:105">)</operator> <operator pos:start="277:107" pos:end="277:108">&gt;&gt;</operator> <literal type="number" pos:start="277:110" pos:end="277:110">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="283:13" pos:end="283:28"><expr pos:start="283:13" pos:end="283:27"><name pos:start="283:13" pos:end="283:23">got_weights</name> <operator pos:start="283:25" pos:end="283:25">=</operator> <literal type="number" pos:start="283:27" pos:end="283:27">1</literal></expr>;</expr_stmt>

            <break pos:start="285:13" pos:end="285:18">break;</break>

        <case pos:start="287:9" pos:end="287:30">case <expr pos:start="287:14" pos:end="287:29"><name pos:start="287:14" pos:end="287:29">WP_ID_DECSAMPLES</name></expr>:</case>

            <if_stmt pos:start="289:13" pos:end="295:13"><if pos:start="289:13" pos:end="295:13">if<condition pos:start="289:15" pos:end="289:26">(<expr pos:start="289:16" pos:end="289:25"><operator pos:start="289:16" pos:end="289:16">!</operator><name pos:start="289:17" pos:end="289:25">got_terms</name></expr>)</condition><block pos:start="289:27" pos:end="295:13">{<block_content pos:start="291:17" pos:end="293:25">

                <expr_stmt pos:start="291:17" pos:end="291:76"><expr pos:start="291:17" pos:end="291:75"><call pos:start="291:17" pos:end="291:75"><name pos:start="291:17" pos:end="291:22">av_log</name><argument_list pos:start="291:23" pos:end="291:75">(<argument pos:start="291:24" pos:end="291:28"><expr pos:start="291:24" pos:end="291:28"><name pos:start="291:24" pos:end="291:28">avctx</name></expr></argument>, <argument pos:start="291:31" pos:end="291:42"><expr pos:start="291:31" pos:end="291:42"><name pos:start="291:31" pos:end="291:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="291:45" pos:end="291:74"><expr pos:start="291:45" pos:end="291:74"><literal type="string" pos:start="291:45" pos:end="291:74">"No decorrelation terms met\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="293:17" pos:end="293:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:18"><expr pos:start="297:13" pos:end="297:17"><name pos:start="297:13" pos:end="297:13">t</name> <operator pos:start="297:15" pos:end="297:15">=</operator> <literal type="number" pos:start="297:17" pos:end="297:17">0</literal></expr>;</expr_stmt>

            <for pos:start="299:13" pos:end="345:13">for<control pos:start="299:16" pos:end="299:62">(<init pos:start="299:17" pos:end="299:33"><expr pos:start="299:17" pos:end="299:32"><name pos:start="299:17" pos:end="299:17">i</name> <operator pos:start="299:19" pos:end="299:19">=</operator> <name pos:start="299:21" pos:end="299:28"><name pos:start="299:21" pos:end="299:21">s</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:28">terms</name></name> <operator pos:start="299:30" pos:end="299:30">-</operator> <literal type="number" pos:start="299:32" pos:end="299:32">1</literal></expr>;</init> <condition pos:start="299:35" pos:end="299:57"><expr pos:start="299:35" pos:end="299:56"><operator pos:start="299:35" pos:end="299:35">(</operator><name pos:start="299:36" pos:end="299:36">i</name> <operator pos:start="299:38" pos:end="299:39">&gt;=</operator> <literal type="number" pos:start="299:41" pos:end="299:41">0</literal><operator pos:start="299:42" pos:end="299:42">)</operator> <operator pos:start="299:44" pos:end="299:45">&amp;&amp;</operator> <operator pos:start="299:47" pos:end="299:47">(</operator><name pos:start="299:48" pos:end="299:48">t</name> <operator pos:start="299:50" pos:end="299:50">&lt;</operator> <name pos:start="299:52" pos:end="299:55">size</name><operator pos:start="299:56" pos:end="299:56">)</operator></expr>;</condition> <incr pos:start="299:59" pos:end="299:61"><expr pos:start="299:59" pos:end="299:61"><name pos:start="299:59" pos:end="299:59">i</name><operator pos:start="299:60" pos:end="299:61">--</operator></expr></incr>)</control> <block pos:start="299:64" pos:end="345:13">{<block_content pos:start="301:17" pos:end="343:17">

                <if_stmt pos:start="301:17" pos:end="343:17"><if pos:start="301:17" pos:end="319:17">if<condition pos:start="301:19" pos:end="301:42">(<expr pos:start="301:20" pos:end="301:41"><name pos:start="301:20" pos:end="301:31"><name pos:start="301:20" pos:end="301:20">s</name><operator pos:start="301:21" pos:end="301:22">-&gt;</operator><name pos:start="301:23" pos:end="301:28">decorr</name><index pos:start="301:29" pos:end="301:31">[<expr pos:start="301:30" pos:end="301:30"><name pos:start="301:30" pos:end="301:30">i</name></expr>]</index></name><operator pos:start="301:32" pos:end="301:32">.</operator><name pos:start="301:33" pos:end="301:37">value</name> <operator pos:start="301:39" pos:end="301:39">&gt;</operator> <literal type="number" pos:start="301:41" pos:end="301:41">8</literal></expr>)</condition><block pos:start="301:43" pos:end="319:17">{<block_content pos:start="303:21" pos:end="317:27">

                    <expr_stmt pos:start="303:21" pos:end="303:69"><expr pos:start="303:21" pos:end="303:68"><name pos:start="303:21" pos:end="303:32"><name pos:start="303:21" pos:end="303:21">s</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:29">decorr</name><index pos:start="303:30" pos:end="303:32">[<expr pos:start="303:31" pos:end="303:31"><name pos:start="303:31" pos:end="303:31">i</name></expr>]</index></name><operator pos:start="303:33" pos:end="303:33">.</operator><name pos:start="303:34" pos:end="303:44"><name pos:start="303:34" pos:end="303:41">samplesA</name><index pos:start="303:42" pos:end="303:44">[<expr pos:start="303:43" pos:end="303:43"><literal type="number" pos:start="303:43" pos:end="303:43">0</literal></expr>]</index></name> <operator pos:start="303:46" pos:end="303:46">=</operator> <call pos:start="303:48" pos:end="303:68"><name pos:start="303:48" pos:end="303:54">wp_exp2</name><argument_list pos:start="303:55" pos:end="303:68">(<argument pos:start="303:56" pos:end="303:67"><expr pos:start="303:56" pos:end="303:67"><call pos:start="303:56" pos:end="303:67"><name pos:start="303:56" pos:end="303:62">AV_RL16</name><argument_list pos:start="303:63" pos:end="303:67">(<argument pos:start="303:64" pos:end="303:66"><expr pos:start="303:64" pos:end="303:66"><name pos:start="303:64" pos:end="303:66">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="303:71" pos:end="303:79"><expr pos:start="303:71" pos:end="303:78"><name pos:start="303:71" pos:end="303:73">buf</name> <operator pos:start="303:75" pos:end="303:76">+=</operator> <literal type="number" pos:start="303:78" pos:end="303:78">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="305:21" pos:end="305:69"><expr pos:start="305:21" pos:end="305:68"><name pos:start="305:21" pos:end="305:32"><name pos:start="305:21" pos:end="305:21">s</name><operator pos:start="305:22" pos:end="305:23">-&gt;</operator><name pos:start="305:24" pos:end="305:29">decorr</name><index pos:start="305:30" pos:end="305:32">[<expr pos:start="305:31" pos:end="305:31"><name pos:start="305:31" pos:end="305:31">i</name></expr>]</index></name><operator pos:start="305:33" pos:end="305:33">.</operator><name pos:start="305:34" pos:end="305:44"><name pos:start="305:34" pos:end="305:41">samplesA</name><index pos:start="305:42" pos:end="305:44">[<expr pos:start="305:43" pos:end="305:43"><literal type="number" pos:start="305:43" pos:end="305:43">1</literal></expr>]</index></name> <operator pos:start="305:46" pos:end="305:46">=</operator> <call pos:start="305:48" pos:end="305:68"><name pos:start="305:48" pos:end="305:54">wp_exp2</name><argument_list pos:start="305:55" pos:end="305:68">(<argument pos:start="305:56" pos:end="305:67"><expr pos:start="305:56" pos:end="305:67"><call pos:start="305:56" pos:end="305:67"><name pos:start="305:56" pos:end="305:62">AV_RL16</name><argument_list pos:start="305:63" pos:end="305:67">(<argument pos:start="305:64" pos:end="305:66"><expr pos:start="305:64" pos:end="305:66"><name pos:start="305:64" pos:end="305:66">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="305:71" pos:end="305:79"><expr pos:start="305:71" pos:end="305:78"><name pos:start="305:71" pos:end="305:73">buf</name> <operator pos:start="305:75" pos:end="305:76">+=</operator> <literal type="number" pos:start="305:78" pos:end="305:78">2</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="307:21" pos:end="315:21"><if pos:start="307:21" pos:end="315:21">if<condition pos:start="307:23" pos:end="307:36">(<expr pos:start="307:24" pos:end="307:35"><name pos:start="307:24" pos:end="307:35"><name pos:start="307:24" pos:end="307:24">s</name><operator pos:start="307:25" pos:end="307:26">-&gt;</operator><name pos:start="307:27" pos:end="307:35">stereo_in</name></name></expr>)</condition><block pos:start="307:37" pos:end="315:21">{<block_content pos:start="309:25" pos:end="313:31">

                        <expr_stmt pos:start="309:25" pos:end="309:73"><expr pos:start="309:25" pos:end="309:72"><name pos:start="309:25" pos:end="309:36"><name pos:start="309:25" pos:end="309:25">s</name><operator pos:start="309:26" pos:end="309:27">-&gt;</operator><name pos:start="309:28" pos:end="309:33">decorr</name><index pos:start="309:34" pos:end="309:36">[<expr pos:start="309:35" pos:end="309:35"><name pos:start="309:35" pos:end="309:35">i</name></expr>]</index></name><operator pos:start="309:37" pos:end="309:37">.</operator><name pos:start="309:38" pos:end="309:48"><name pos:start="309:38" pos:end="309:45">samplesB</name><index pos:start="309:46" pos:end="309:48">[<expr pos:start="309:47" pos:end="309:47"><literal type="number" pos:start="309:47" pos:end="309:47">0</literal></expr>]</index></name> <operator pos:start="309:50" pos:end="309:50">=</operator> <call pos:start="309:52" pos:end="309:72"><name pos:start="309:52" pos:end="309:58">wp_exp2</name><argument_list pos:start="309:59" pos:end="309:72">(<argument pos:start="309:60" pos:end="309:71"><expr pos:start="309:60" pos:end="309:71"><call pos:start="309:60" pos:end="309:71"><name pos:start="309:60" pos:end="309:66">AV_RL16</name><argument_list pos:start="309:67" pos:end="309:71">(<argument pos:start="309:68" pos:end="309:70"><expr pos:start="309:68" pos:end="309:70"><name pos:start="309:68" pos:end="309:70">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="309:75" pos:end="309:83"><expr pos:start="309:75" pos:end="309:82"><name pos:start="309:75" pos:end="309:77">buf</name> <operator pos:start="309:79" pos:end="309:80">+=</operator> <literal type="number" pos:start="309:82" pos:end="309:82">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="311:25" pos:end="311:73"><expr pos:start="311:25" pos:end="311:72"><name pos:start="311:25" pos:end="311:36"><name pos:start="311:25" pos:end="311:25">s</name><operator pos:start="311:26" pos:end="311:27">-&gt;</operator><name pos:start="311:28" pos:end="311:33">decorr</name><index pos:start="311:34" pos:end="311:36">[<expr pos:start="311:35" pos:end="311:35"><name pos:start="311:35" pos:end="311:35">i</name></expr>]</index></name><operator pos:start="311:37" pos:end="311:37">.</operator><name pos:start="311:38" pos:end="311:48"><name pos:start="311:38" pos:end="311:45">samplesB</name><index pos:start="311:46" pos:end="311:48">[<expr pos:start="311:47" pos:end="311:47"><literal type="number" pos:start="311:47" pos:end="311:47">1</literal></expr>]</index></name> <operator pos:start="311:50" pos:end="311:50">=</operator> <call pos:start="311:52" pos:end="311:72"><name pos:start="311:52" pos:end="311:58">wp_exp2</name><argument_list pos:start="311:59" pos:end="311:72">(<argument pos:start="311:60" pos:end="311:71"><expr pos:start="311:60" pos:end="311:71"><call pos:start="311:60" pos:end="311:71"><name pos:start="311:60" pos:end="311:66">AV_RL16</name><argument_list pos:start="311:67" pos:end="311:71">(<argument pos:start="311:68" pos:end="311:70"><expr pos:start="311:68" pos:end="311:70"><name pos:start="311:68" pos:end="311:70">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="311:75" pos:end="311:83"><expr pos:start="311:75" pos:end="311:82"><name pos:start="311:75" pos:end="311:77">buf</name> <operator pos:start="311:79" pos:end="311:80">+=</operator> <literal type="number" pos:start="311:82" pos:end="311:82">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="313:25" pos:end="313:31"><expr pos:start="313:25" pos:end="313:30"><name pos:start="313:25" pos:end="313:25">t</name> <operator pos:start="313:27" pos:end="313:28">+=</operator> <literal type="number" pos:start="313:30" pos:end="313:30">4</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="317:21" pos:end="317:27"><expr pos:start="317:21" pos:end="317:26"><name pos:start="317:21" pos:end="317:21">t</name> <operator pos:start="317:23" pos:end="317:24">+=</operator> <literal type="number" pos:start="317:26" pos:end="317:26">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="319:18" pos:end="327:17">else if<condition pos:start="319:25" pos:end="319:48">(<expr pos:start="319:26" pos:end="319:47"><name pos:start="319:26" pos:end="319:37"><name pos:start="319:26" pos:end="319:26">s</name><operator pos:start="319:27" pos:end="319:28">-&gt;</operator><name pos:start="319:29" pos:end="319:34">decorr</name><index pos:start="319:35" pos:end="319:37">[<expr pos:start="319:36" pos:end="319:36"><name pos:start="319:36" pos:end="319:36">i</name></expr>]</index></name><operator pos:start="319:38" pos:end="319:38">.</operator><name pos:start="319:39" pos:end="319:43">value</name> <operator pos:start="319:45" pos:end="319:45">&lt;</operator> <literal type="number" pos:start="319:47" pos:end="319:47">0</literal></expr>)</condition><block pos:start="319:49" pos:end="327:17">{<block_content pos:start="321:21" pos:end="325:27">

                    <expr_stmt pos:start="321:21" pos:end="321:69"><expr pos:start="321:21" pos:end="321:68"><name pos:start="321:21" pos:end="321:32"><name pos:start="321:21" pos:end="321:21">s</name><operator pos:start="321:22" pos:end="321:23">-&gt;</operator><name pos:start="321:24" pos:end="321:29">decorr</name><index pos:start="321:30" pos:end="321:32">[<expr pos:start="321:31" pos:end="321:31"><name pos:start="321:31" pos:end="321:31">i</name></expr>]</index></name><operator pos:start="321:33" pos:end="321:33">.</operator><name pos:start="321:34" pos:end="321:44"><name pos:start="321:34" pos:end="321:41">samplesA</name><index pos:start="321:42" pos:end="321:44">[<expr pos:start="321:43" pos:end="321:43"><literal type="number" pos:start="321:43" pos:end="321:43">0</literal></expr>]</index></name> <operator pos:start="321:46" pos:end="321:46">=</operator> <call pos:start="321:48" pos:end="321:68"><name pos:start="321:48" pos:end="321:54">wp_exp2</name><argument_list pos:start="321:55" pos:end="321:68">(<argument pos:start="321:56" pos:end="321:67"><expr pos:start="321:56" pos:end="321:67"><call pos:start="321:56" pos:end="321:67"><name pos:start="321:56" pos:end="321:62">AV_RL16</name><argument_list pos:start="321:63" pos:end="321:67">(<argument pos:start="321:64" pos:end="321:66"><expr pos:start="321:64" pos:end="321:66"><name pos:start="321:64" pos:end="321:66">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="321:71" pos:end="321:79"><expr pos:start="321:71" pos:end="321:78"><name pos:start="321:71" pos:end="321:73">buf</name> <operator pos:start="321:75" pos:end="321:76">+=</operator> <literal type="number" pos:start="321:78" pos:end="321:78">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="323:21" pos:end="323:69"><expr pos:start="323:21" pos:end="323:68"><name pos:start="323:21" pos:end="323:32"><name pos:start="323:21" pos:end="323:21">s</name><operator pos:start="323:22" pos:end="323:23">-&gt;</operator><name pos:start="323:24" pos:end="323:29">decorr</name><index pos:start="323:30" pos:end="323:32">[<expr pos:start="323:31" pos:end="323:31"><name pos:start="323:31" pos:end="323:31">i</name></expr>]</index></name><operator pos:start="323:33" pos:end="323:33">.</operator><name pos:start="323:34" pos:end="323:44"><name pos:start="323:34" pos:end="323:41">samplesB</name><index pos:start="323:42" pos:end="323:44">[<expr pos:start="323:43" pos:end="323:43"><literal type="number" pos:start="323:43" pos:end="323:43">0</literal></expr>]</index></name> <operator pos:start="323:46" pos:end="323:46">=</operator> <call pos:start="323:48" pos:end="323:68"><name pos:start="323:48" pos:end="323:54">wp_exp2</name><argument_list pos:start="323:55" pos:end="323:68">(<argument pos:start="323:56" pos:end="323:67"><expr pos:start="323:56" pos:end="323:67"><call pos:start="323:56" pos:end="323:67"><name pos:start="323:56" pos:end="323:62">AV_RL16</name><argument_list pos:start="323:63" pos:end="323:67">(<argument pos:start="323:64" pos:end="323:66"><expr pos:start="323:64" pos:end="323:66"><name pos:start="323:64" pos:end="323:66">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="323:71" pos:end="323:79"><expr pos:start="323:71" pos:end="323:78"><name pos:start="323:71" pos:end="323:73">buf</name> <operator pos:start="323:75" pos:end="323:76">+=</operator> <literal type="number" pos:start="323:78" pos:end="323:78">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="325:21" pos:end="325:27"><expr pos:start="325:21" pos:end="325:26"><name pos:start="325:21" pos:end="325:21">t</name> <operator pos:start="325:23" pos:end="325:24">+=</operator> <literal type="number" pos:start="325:26" pos:end="325:26">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="327:18" pos:end="343:17">else<block pos:start="327:22" pos:end="343:17">{<block_content pos:start="329:21" pos:end="341:69">

                    <for pos:start="329:21" pos:end="339:21">for<control pos:start="329:24" pos:end="329:59">(<init pos:start="329:25" pos:end="329:30"><expr pos:start="329:25" pos:end="329:29"><name pos:start="329:25" pos:end="329:25">j</name> <operator pos:start="329:27" pos:end="329:27">=</operator> <literal type="number" pos:start="329:29" pos:end="329:29">0</literal></expr>;</init> <condition pos:start="329:32" pos:end="329:54"><expr pos:start="329:32" pos:end="329:53"><name pos:start="329:32" pos:end="329:32">j</name> <operator pos:start="329:34" pos:end="329:34">&lt;</operator> <name pos:start="329:36" pos:end="329:47"><name pos:start="329:36" pos:end="329:36">s</name><operator pos:start="329:37" pos:end="329:38">-&gt;</operator><name pos:start="329:39" pos:end="329:44">decorr</name><index pos:start="329:45" pos:end="329:47">[<expr pos:start="329:46" pos:end="329:46"><name pos:start="329:46" pos:end="329:46">i</name></expr>]</index></name><operator pos:start="329:48" pos:end="329:48">.</operator><name pos:start="329:49" pos:end="329:53">value</name></expr>;</condition> <incr pos:start="329:56" pos:end="329:58"><expr pos:start="329:56" pos:end="329:58"><name pos:start="329:56" pos:end="329:56">j</name><operator pos:start="329:57" pos:end="329:58">++</operator></expr></incr>)</control><block pos:start="329:60" pos:end="339:21">{<block_content pos:start="331:25" pos:end="337:25">

                        <expr_stmt pos:start="331:25" pos:end="331:73"><expr pos:start="331:25" pos:end="331:72"><name pos:start="331:25" pos:end="331:36"><name pos:start="331:25" pos:end="331:25">s</name><operator pos:start="331:26" pos:end="331:27">-&gt;</operator><name pos:start="331:28" pos:end="331:33">decorr</name><index pos:start="331:34" pos:end="331:36">[<expr pos:start="331:35" pos:end="331:35"><name pos:start="331:35" pos:end="331:35">i</name></expr>]</index></name><operator pos:start="331:37" pos:end="331:37">.</operator><name pos:start="331:38" pos:end="331:48"><name pos:start="331:38" pos:end="331:45">samplesA</name><index pos:start="331:46" pos:end="331:48">[<expr pos:start="331:47" pos:end="331:47"><name pos:start="331:47" pos:end="331:47">j</name></expr>]</index></name> <operator pos:start="331:50" pos:end="331:50">=</operator> <call pos:start="331:52" pos:end="331:72"><name pos:start="331:52" pos:end="331:58">wp_exp2</name><argument_list pos:start="331:59" pos:end="331:72">(<argument pos:start="331:60" pos:end="331:71"><expr pos:start="331:60" pos:end="331:71"><call pos:start="331:60" pos:end="331:71"><name pos:start="331:60" pos:end="331:66">AV_RL16</name><argument_list pos:start="331:67" pos:end="331:71">(<argument pos:start="331:68" pos:end="331:70"><expr pos:start="331:68" pos:end="331:70"><name pos:start="331:68" pos:end="331:70">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="331:75" pos:end="331:83"><expr pos:start="331:75" pos:end="331:82"><name pos:start="331:75" pos:end="331:77">buf</name> <operator pos:start="331:79" pos:end="331:80">+=</operator> <literal type="number" pos:start="331:82" pos:end="331:82">2</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="333:25" pos:end="337:25"><if pos:start="333:25" pos:end="337:25">if<condition pos:start="333:27" pos:end="333:40">(<expr pos:start="333:28" pos:end="333:39"><name pos:start="333:28" pos:end="333:39"><name pos:start="333:28" pos:end="333:28">s</name><operator pos:start="333:29" pos:end="333:30">-&gt;</operator><name pos:start="333:31" pos:end="333:39">stereo_in</name></name></expr>)</condition><block pos:start="333:41" pos:end="337:25">{<block_content pos:start="335:29" pos:end="335:87">

                            <expr_stmt pos:start="335:29" pos:end="335:77"><expr pos:start="335:29" pos:end="335:76"><name pos:start="335:29" pos:end="335:40"><name pos:start="335:29" pos:end="335:29">s</name><operator pos:start="335:30" pos:end="335:31">-&gt;</operator><name pos:start="335:32" pos:end="335:37">decorr</name><index pos:start="335:38" pos:end="335:40">[<expr pos:start="335:39" pos:end="335:39"><name pos:start="335:39" pos:end="335:39">i</name></expr>]</index></name><operator pos:start="335:41" pos:end="335:41">.</operator><name pos:start="335:42" pos:end="335:52"><name pos:start="335:42" pos:end="335:49">samplesB</name><index pos:start="335:50" pos:end="335:52">[<expr pos:start="335:51" pos:end="335:51"><name pos:start="335:51" pos:end="335:51">j</name></expr>]</index></name> <operator pos:start="335:54" pos:end="335:54">=</operator> <call pos:start="335:56" pos:end="335:76"><name pos:start="335:56" pos:end="335:62">wp_exp2</name><argument_list pos:start="335:63" pos:end="335:76">(<argument pos:start="335:64" pos:end="335:75"><expr pos:start="335:64" pos:end="335:75"><call pos:start="335:64" pos:end="335:75"><name pos:start="335:64" pos:end="335:70">AV_RL16</name><argument_list pos:start="335:71" pos:end="335:75">(<argument pos:start="335:72" pos:end="335:74"><expr pos:start="335:72" pos:end="335:74"><name pos:start="335:72" pos:end="335:74">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="335:79" pos:end="335:87"><expr pos:start="335:79" pos:end="335:86"><name pos:start="335:79" pos:end="335:81">buf</name> <operator pos:start="335:83" pos:end="335:84">+=</operator> <literal type="number" pos:start="335:86" pos:end="335:86">2</literal></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="341:21" pos:end="341:69"><expr pos:start="341:21" pos:end="341:68"><name pos:start="341:21" pos:end="341:21">t</name> <operator pos:start="341:23" pos:end="341:24">+=</operator> <name pos:start="341:26" pos:end="341:37"><name pos:start="341:26" pos:end="341:26">s</name><operator pos:start="341:27" pos:end="341:28">-&gt;</operator><name pos:start="341:29" pos:end="341:34">decorr</name><index pos:start="341:35" pos:end="341:37">[<expr pos:start="341:36" pos:end="341:36"><name pos:start="341:36" pos:end="341:36">i</name></expr>]</index></name><operator pos:start="341:38" pos:end="341:38">.</operator><name pos:start="341:39" pos:end="341:43">value</name> <operator pos:start="341:45" pos:end="341:45">*</operator> <literal type="number" pos:start="341:47" pos:end="341:47">2</literal> <operator pos:start="341:49" pos:end="341:49">*</operator> <operator pos:start="341:51" pos:end="341:51">(</operator><name pos:start="341:52" pos:end="341:63"><name pos:start="341:52" pos:end="341:52">s</name><operator pos:start="341:53" pos:end="341:54">-&gt;</operator><name pos:start="341:55" pos:end="341:63">stereo_in</name></name> <operator pos:start="341:65" pos:end="341:65">+</operator> <literal type="number" pos:start="341:67" pos:end="341:67">1</literal><operator pos:start="341:68" pos:end="341:68">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="347:13" pos:end="347:28"><expr pos:start="347:13" pos:end="347:27"><name pos:start="347:13" pos:end="347:23">got_samples</name> <operator pos:start="347:25" pos:end="347:25">=</operator> <literal type="number" pos:start="347:27" pos:end="347:27">1</literal></expr>;</expr_stmt>

            <break pos:start="349:13" pos:end="349:18">break;</break>

        <case pos:start="351:9" pos:end="351:27">case <expr pos:start="351:14" pos:end="351:26"><name pos:start="351:14" pos:end="351:26">WP_ID_ENTROPY</name></expr>:</case>

            <if_stmt pos:start="353:13" pos:end="361:13"><if pos:start="353:13" pos:end="361:13">if<condition pos:start="353:15" pos:end="353:46">(<expr pos:start="353:16" pos:end="353:45"><name pos:start="353:16" pos:end="353:19">size</name> <operator pos:start="353:21" pos:end="353:22">!=</operator> <literal type="number" pos:start="353:24" pos:end="353:24">6</literal> <operator pos:start="353:26" pos:end="353:26">*</operator> <operator pos:start="353:28" pos:end="353:28">(</operator><name pos:start="353:29" pos:end="353:40"><name pos:start="353:29" pos:end="353:29">s</name><operator pos:start="353:30" pos:end="353:31">-&gt;</operator><name pos:start="353:32" pos:end="353:40">stereo_in</name></name> <operator pos:start="353:42" pos:end="353:42">+</operator> <literal type="number" pos:start="353:44" pos:end="353:44">1</literal><operator pos:start="353:45" pos:end="353:45">)</operator></expr>)</condition><block pos:start="353:47" pos:end="361:13">{<block_content pos:start="355:17" pos:end="359:25">

                <expr_stmt pos:start="355:17" pos:end="355:116"><expr pos:start="355:17" pos:end="355:115"><call pos:start="355:17" pos:end="355:115"><name pos:start="355:17" pos:end="355:22">av_log</name><argument_list pos:start="355:23" pos:end="355:115">(<argument pos:start="355:24" pos:end="355:28"><expr pos:start="355:24" pos:end="355:28"><name pos:start="355:24" pos:end="355:28">avctx</name></expr></argument>, <argument pos:start="355:31" pos:end="355:42"><expr pos:start="355:31" pos:end="355:42"><name pos:start="355:31" pos:end="355:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="355:45" pos:end="355:84"><expr pos:start="355:45" pos:end="355:84"><literal type="string" pos:start="355:45" pos:end="355:84">"Entropy vars size should be %i, got %i"</literal></expr></argument>, <argument pos:start="355:87" pos:end="355:108"><expr pos:start="355:87" pos:end="355:108"><literal type="number" pos:start="355:87" pos:end="355:87">6</literal> <operator pos:start="355:89" pos:end="355:89">*</operator> <operator pos:start="355:91" pos:end="355:91">(</operator><name pos:start="355:92" pos:end="355:103"><name pos:start="355:92" pos:end="355:92">s</name><operator pos:start="355:93" pos:end="355:94">-&gt;</operator><name pos:start="355:95" pos:end="355:103">stereo_in</name></name> <operator pos:start="355:105" pos:end="355:105">+</operator> <literal type="number" pos:start="355:107" pos:end="355:107">1</literal><operator pos:start="355:108" pos:end="355:108">)</operator></expr></argument>, <argument pos:start="355:111" pos:end="355:114"><expr pos:start="355:111" pos:end="355:114"><name pos:start="355:111" pos:end="355:114">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="357:29"><expr pos:start="357:17" pos:end="357:28"><name pos:start="357:17" pos:end="357:19">buf</name> <operator pos:start="357:21" pos:end="357:22">+=</operator> <name pos:start="357:24" pos:end="357:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="359:17" pos:end="359:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <for pos:start="363:13" pos:end="373:13">for<control pos:start="363:16" pos:end="363:46">(<init pos:start="363:17" pos:end="363:22"><expr pos:start="363:17" pos:end="363:21"><name pos:start="363:17" pos:end="363:17">j</name> <operator pos:start="363:19" pos:end="363:19">=</operator> <literal type="number" pos:start="363:21" pos:end="363:21">0</literal></expr>;</init> <condition pos:start="363:24" pos:end="363:41"><expr pos:start="363:24" pos:end="363:40"><name pos:start="363:24" pos:end="363:24">j</name> <operator pos:start="363:26" pos:end="363:27">&lt;=</operator> <name pos:start="363:29" pos:end="363:40"><name pos:start="363:29" pos:end="363:29">s</name><operator pos:start="363:30" pos:end="363:31">-&gt;</operator><name pos:start="363:32" pos:end="363:40">stereo_in</name></name></expr>;</condition> <incr pos:start="363:43" pos:end="363:45"><expr pos:start="363:43" pos:end="363:45"><name pos:start="363:43" pos:end="363:43">j</name><operator pos:start="363:44" pos:end="363:45">++</operator></expr></incr>)</control><block pos:start="363:47" pos:end="373:13">{<block_content pos:start="365:17" pos:end="371:17">

                <for pos:start="365:17" pos:end="371:17">for<control pos:start="365:20" pos:end="365:38">(<init pos:start="365:21" pos:end="365:26"><expr pos:start="365:21" pos:end="365:25"><name pos:start="365:21" pos:end="365:21">i</name> <operator pos:start="365:23" pos:end="365:23">=</operator> <literal type="number" pos:start="365:25" pos:end="365:25">0</literal></expr>;</init> <condition pos:start="365:28" pos:end="365:33"><expr pos:start="365:28" pos:end="365:32"><name pos:start="365:28" pos:end="365:28">i</name> <operator pos:start="365:30" pos:end="365:30">&lt;</operator> <literal type="number" pos:start="365:32" pos:end="365:32">3</literal></expr>;</condition> <incr pos:start="365:35" pos:end="365:37"><expr pos:start="365:35" pos:end="365:37"><name pos:start="365:35" pos:end="365:35">i</name><operator pos:start="365:36" pos:end="365:37">++</operator></expr></incr>)</control><block pos:start="365:39" pos:end="371:17">{<block_content pos:start="367:21" pos:end="369:29">

                    <expr_stmt pos:start="367:21" pos:end="367:63"><expr pos:start="367:21" pos:end="367:62"><name pos:start="367:21" pos:end="367:28"><name pos:start="367:21" pos:end="367:21">s</name><operator pos:start="367:22" pos:end="367:23">-&gt;</operator><name pos:start="367:24" pos:end="367:25">ch</name><index pos:start="367:26" pos:end="367:28">[<expr pos:start="367:27" pos:end="367:27"><name pos:start="367:27" pos:end="367:27">j</name></expr>]</index></name><operator pos:start="367:29" pos:end="367:29">.</operator><name pos:start="367:30" pos:end="367:38"><name pos:start="367:30" pos:end="367:35">median</name><index pos:start="367:36" pos:end="367:38">[<expr pos:start="367:37" pos:end="367:37"><name pos:start="367:37" pos:end="367:37">i</name></expr>]</index></name> <operator pos:start="367:40" pos:end="367:40">=</operator> <call pos:start="367:42" pos:end="367:62"><name pos:start="367:42" pos:end="367:48">wp_exp2</name><argument_list pos:start="367:49" pos:end="367:62">(<argument pos:start="367:50" pos:end="367:61"><expr pos:start="367:50" pos:end="367:61"><call pos:start="367:50" pos:end="367:61"><name pos:start="367:50" pos:end="367:56">AV_RL16</name><argument_list pos:start="367:57" pos:end="367:61">(<argument pos:start="367:58" pos:end="367:60"><expr pos:start="367:58" pos:end="367:60"><name pos:start="367:58" pos:end="367:60">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="369:29"><expr pos:start="369:21" pos:end="369:28"><name pos:start="369:21" pos:end="369:23">buf</name> <operator pos:start="369:25" pos:end="369:26">+=</operator> <literal type="number" pos:start="369:28" pos:end="369:28">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

            <expr_stmt pos:start="375:13" pos:end="375:28"><expr pos:start="375:13" pos:end="375:27"><name pos:start="375:13" pos:end="375:23">got_entropy</name> <operator pos:start="375:25" pos:end="375:25">=</operator> <literal type="number" pos:start="375:27" pos:end="375:27">1</literal></expr>;</expr_stmt>

            <break pos:start="377:13" pos:end="377:18">break;</break>

        <case pos:start="379:9" pos:end="379:26">case <expr pos:start="379:14" pos:end="379:25"><name pos:start="379:14" pos:end="379:25">WP_ID_HYBRID</name></expr>:</case>

            <if_stmt pos:start="381:13" pos:end="393:13"><if pos:start="381:13" pos:end="393:13">if<condition pos:start="381:15" pos:end="381:33">(<expr pos:start="381:16" pos:end="381:32"><name pos:start="381:16" pos:end="381:32"><name pos:start="381:16" pos:end="381:16">s</name><operator pos:start="381:17" pos:end="381:18">-&gt;</operator><name pos:start="381:19" pos:end="381:32">hybrid_bitrate</name></name></expr>)</condition><block pos:start="381:34" pos:end="393:13">{<block_content pos:start="383:17" pos:end="391:17">

                <for pos:start="383:17" pos:end="391:17">for<control pos:start="383:20" pos:end="383:50">(<init pos:start="383:21" pos:end="383:26"><expr pos:start="383:21" pos:end="383:25"><name pos:start="383:21" pos:end="383:21">i</name> <operator pos:start="383:23" pos:end="383:23">=</operator> <literal type="number" pos:start="383:25" pos:end="383:25">0</literal></expr>;</init> <condition pos:start="383:28" pos:end="383:45"><expr pos:start="383:28" pos:end="383:44"><name pos:start="383:28" pos:end="383:28">i</name> <operator pos:start="383:30" pos:end="383:31">&lt;=</operator> <name pos:start="383:33" pos:end="383:44"><name pos:start="383:33" pos:end="383:33">s</name><operator pos:start="383:34" pos:end="383:35">-&gt;</operator><name pos:start="383:36" pos:end="383:44">stereo_in</name></name></expr>;</condition> <incr pos:start="383:47" pos:end="383:49"><expr pos:start="383:47" pos:end="383:49"><name pos:start="383:47" pos:end="383:47">i</name><operator pos:start="383:48" pos:end="383:49">++</operator></expr></incr>)</control><block pos:start="383:51" pos:end="391:17">{<block_content pos:start="385:21" pos:end="389:30">

                    <expr_stmt pos:start="385:21" pos:end="385:64"><expr pos:start="385:21" pos:end="385:63"><name pos:start="385:21" pos:end="385:28"><name pos:start="385:21" pos:end="385:21">s</name><operator pos:start="385:22" pos:end="385:23">-&gt;</operator><name pos:start="385:24" pos:end="385:25">ch</name><index pos:start="385:26" pos:end="385:28">[<expr pos:start="385:27" pos:end="385:27"><name pos:start="385:27" pos:end="385:27">i</name></expr>]</index></name><operator pos:start="385:29" pos:end="385:29">.</operator><name pos:start="385:30" pos:end="385:39">slow_level</name> <operator pos:start="385:41" pos:end="385:41">=</operator> <call pos:start="385:43" pos:end="385:63"><name pos:start="385:43" pos:end="385:49">wp_exp2</name><argument_list pos:start="385:50" pos:end="385:63">(<argument pos:start="385:51" pos:end="385:62"><expr pos:start="385:51" pos:end="385:62"><call pos:start="385:51" pos:end="385:62"><name pos:start="385:51" pos:end="385:57">AV_RL16</name><argument_list pos:start="385:58" pos:end="385:62">(<argument pos:start="385:59" pos:end="385:61"><expr pos:start="385:59" pos:end="385:61"><name pos:start="385:59" pos:end="385:61">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="387:21" pos:end="387:29"><expr pos:start="387:21" pos:end="387:28"><name pos:start="387:21" pos:end="387:23">buf</name> <operator pos:start="387:25" pos:end="387:26">+=</operator> <literal type="number" pos:start="387:28" pos:end="387:28">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="389:21" pos:end="389:30"><expr pos:start="389:21" pos:end="389:29"><name pos:start="389:21" pos:end="389:24">size</name> <operator pos:start="389:26" pos:end="389:27">-=</operator> <literal type="number" pos:start="389:29" pos:end="389:29">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <for pos:start="395:13" pos:end="403:13">for<control pos:start="395:16" pos:end="395:51">(<init pos:start="395:17" pos:end="395:22"><expr pos:start="395:17" pos:end="395:21"><name pos:start="395:17" pos:end="395:17">i</name> <operator pos:start="395:19" pos:end="395:19">=</operator> <literal type="number" pos:start="395:21" pos:end="395:21">0</literal></expr>;</init> <condition pos:start="395:24" pos:end="395:46"><expr pos:start="395:24" pos:end="395:45"><name pos:start="395:24" pos:end="395:24">i</name> <operator pos:start="395:26" pos:end="395:26">&lt;</operator> <operator pos:start="395:28" pos:end="395:28">(</operator><name pos:start="395:29" pos:end="395:40"><name pos:start="395:29" pos:end="395:29">s</name><operator pos:start="395:30" pos:end="395:31">-&gt;</operator><name pos:start="395:32" pos:end="395:40">stereo_in</name></name> <operator pos:start="395:42" pos:end="395:42">+</operator> <literal type="number" pos:start="395:44" pos:end="395:44">1</literal><operator pos:start="395:45" pos:end="395:45">)</operator></expr>;</condition> <incr pos:start="395:48" pos:end="395:50"><expr pos:start="395:48" pos:end="395:50"><name pos:start="395:48" pos:end="395:48">i</name><operator pos:start="395:49" pos:end="395:50">++</operator></expr></incr>)</control><block pos:start="395:52" pos:end="403:13">{<block_content pos:start="397:17" pos:end="401:26">

                <expr_stmt pos:start="397:17" pos:end="397:58"><expr pos:start="397:17" pos:end="397:57"><name pos:start="397:17" pos:end="397:24"><name pos:start="397:17" pos:end="397:17">s</name><operator pos:start="397:18" pos:end="397:19">-&gt;</operator><name pos:start="397:20" pos:end="397:21">ch</name><index pos:start="397:22" pos:end="397:24">[<expr pos:start="397:23" pos:end="397:23"><name pos:start="397:23" pos:end="397:23">i</name></expr>]</index></name><operator pos:start="397:25" pos:end="397:25">.</operator><name pos:start="397:26" pos:end="397:36">bitrate_acc</name> <operator pos:start="397:38" pos:end="397:38">=</operator> <call pos:start="397:40" pos:end="397:51"><name pos:start="397:40" pos:end="397:46">AV_RL16</name><argument_list pos:start="397:47" pos:end="397:51">(<argument pos:start="397:48" pos:end="397:50"><expr pos:start="397:48" pos:end="397:50"><name pos:start="397:48" pos:end="397:50">buf</name></expr></argument>)</argument_list></call> <operator pos:start="397:53" pos:end="397:54">&lt;&lt;</operator> <literal type="number" pos:start="397:56" pos:end="397:57">16</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="399:17" pos:end="399:25"><expr pos:start="399:17" pos:end="399:24"><name pos:start="399:17" pos:end="399:19">buf</name> <operator pos:start="399:21" pos:end="399:22">+=</operator> <literal type="number" pos:start="399:24" pos:end="399:24">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="401:17" pos:end="401:26"><expr pos:start="401:17" pos:end="401:25"><name pos:start="401:17" pos:end="401:20">size</name> <operator pos:start="401:22" pos:end="401:23">-=</operator> <literal type="number" pos:start="401:25" pos:end="401:25">2</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="405:13" pos:end="421:13"><if pos:start="405:13" pos:end="415:13">if<condition pos:start="405:15" pos:end="405:24">(<expr pos:start="405:16" pos:end="405:23"><name pos:start="405:16" pos:end="405:19">size</name> <operator pos:start="405:21" pos:end="405:21">&gt;</operator> <literal type="number" pos:start="405:23" pos:end="405:23">0</literal></expr>)</condition><block pos:start="405:25" pos:end="415:13">{<block_content pos:start="407:17" pos:end="413:17">

                <for pos:start="407:17" pos:end="413:17">for<control pos:start="407:20" pos:end="407:55">(<init pos:start="407:21" pos:end="407:26"><expr pos:start="407:21" pos:end="407:25"><name pos:start="407:21" pos:end="407:21">i</name> <operator pos:start="407:23" pos:end="407:23">=</operator> <literal type="number" pos:start="407:25" pos:end="407:25">0</literal></expr>;</init> <condition pos:start="407:28" pos:end="407:50"><expr pos:start="407:28" pos:end="407:49"><name pos:start="407:28" pos:end="407:28">i</name> <operator pos:start="407:30" pos:end="407:30">&lt;</operator> <operator pos:start="407:32" pos:end="407:32">(</operator><name pos:start="407:33" pos:end="407:44"><name pos:start="407:33" pos:end="407:33">s</name><operator pos:start="407:34" pos:end="407:35">-&gt;</operator><name pos:start="407:36" pos:end="407:44">stereo_in</name></name> <operator pos:start="407:46" pos:end="407:46">+</operator> <literal type="number" pos:start="407:48" pos:end="407:48">1</literal><operator pos:start="407:49" pos:end="407:49">)</operator></expr>;</condition> <incr pos:start="407:52" pos:end="407:54"><expr pos:start="407:52" pos:end="407:54"><name pos:start="407:52" pos:end="407:52">i</name><operator pos:start="407:53" pos:end="407:54">++</operator></expr></incr>)</control><block pos:start="407:56" pos:end="413:17">{<block_content pos:start="409:21" pos:end="411:29">

                    <expr_stmt pos:start="409:21" pos:end="409:76"><expr pos:start="409:21" pos:end="409:75"><name pos:start="409:21" pos:end="409:28"><name pos:start="409:21" pos:end="409:21">s</name><operator pos:start="409:22" pos:end="409:23">-&gt;</operator><name pos:start="409:24" pos:end="409:25">ch</name><index pos:start="409:26" pos:end="409:28">[<expr pos:start="409:27" pos:end="409:27"><name pos:start="409:27" pos:end="409:27">i</name></expr>]</index></name><operator pos:start="409:29" pos:end="409:29">.</operator><name pos:start="409:30" pos:end="409:42">bitrate_delta</name> <operator pos:start="409:44" pos:end="409:44">=</operator> <call pos:start="409:46" pos:end="409:75"><name pos:start="409:46" pos:end="409:52">wp_exp2</name><argument_list pos:start="409:53" pos:end="409:75">(<argument pos:start="409:54" pos:end="409:74"><expr pos:start="409:54" pos:end="409:74"><operator pos:start="409:54" pos:end="409:54">(</operator><name pos:start="409:55" pos:end="409:61">int16_t</name><operator pos:start="409:62" pos:end="409:62">)</operator><call pos:start="409:63" pos:end="409:74"><name pos:start="409:63" pos:end="409:69">AV_RL16</name><argument_list pos:start="409:70" pos:end="409:74">(<argument pos:start="409:71" pos:end="409:73"><expr pos:start="409:71" pos:end="409:73"><name pos:start="409:71" pos:end="409:73">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="411:21" pos:end="411:29"><expr pos:start="411:21" pos:end="411:28"><name pos:start="411:21" pos:end="411:23">buf</name> <operator pos:start="411:25" pos:end="411:26">+=</operator> <literal type="number" pos:start="411:28" pos:end="411:28">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if><else pos:start="415:14" pos:end="421:13">else<block pos:start="415:18" pos:end="421:13">{<block_content pos:start="417:17" pos:end="419:47">

                <for pos:start="417:17" pos:end="419:47">for<control pos:start="417:20" pos:end="417:55">(<init pos:start="417:21" pos:end="417:26"><expr pos:start="417:21" pos:end="417:25"><name pos:start="417:21" pos:end="417:21">i</name> <operator pos:start="417:23" pos:end="417:23">=</operator> <literal type="number" pos:start="417:25" pos:end="417:25">0</literal></expr>;</init> <condition pos:start="417:28" pos:end="417:50"><expr pos:start="417:28" pos:end="417:49"><name pos:start="417:28" pos:end="417:28">i</name> <operator pos:start="417:30" pos:end="417:30">&lt;</operator> <operator pos:start="417:32" pos:end="417:32">(</operator><name pos:start="417:33" pos:end="417:44"><name pos:start="417:33" pos:end="417:33">s</name><operator pos:start="417:34" pos:end="417:35">-&gt;</operator><name pos:start="417:36" pos:end="417:44">stereo_in</name></name> <operator pos:start="417:46" pos:end="417:46">+</operator> <literal type="number" pos:start="417:48" pos:end="417:48">1</literal><operator pos:start="417:49" pos:end="417:49">)</operator></expr>;</condition> <incr pos:start="417:52" pos:end="417:54"><expr pos:start="417:52" pos:end="417:54"><name pos:start="417:52" pos:end="417:52">i</name><operator pos:start="417:53" pos:end="417:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="419:21" pos:end="419:47"><block_content pos:start="419:21" pos:end="419:47">

                    <expr_stmt pos:start="419:21" pos:end="419:47"><expr pos:start="419:21" pos:end="419:46"><name pos:start="419:21" pos:end="419:28"><name pos:start="419:21" pos:end="419:21">s</name><operator pos:start="419:22" pos:end="419:23">-&gt;</operator><name pos:start="419:24" pos:end="419:25">ch</name><index pos:start="419:26" pos:end="419:28">[<expr pos:start="419:27" pos:end="419:27"><name pos:start="419:27" pos:end="419:27">i</name></expr>]</index></name><operator pos:start="419:29" pos:end="419:29">.</operator><name pos:start="419:30" pos:end="419:42">bitrate_delta</name> <operator pos:start="419:44" pos:end="419:44">=</operator> <literal type="number" pos:start="419:46" pos:end="419:46">0</literal></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="423:13" pos:end="423:27"><expr pos:start="423:13" pos:end="423:26"><name pos:start="423:13" pos:end="423:22">got_hybrid</name> <operator pos:start="423:24" pos:end="423:24">=</operator> <literal type="number" pos:start="423:26" pos:end="423:26">1</literal></expr>;</expr_stmt>

            <break pos:start="425:13" pos:end="425:18">break;</break>

        <case pos:start="427:9" pos:end="427:29">case <expr pos:start="427:14" pos:end="427:28"><name pos:start="427:14" pos:end="427:28">WP_ID_INT32INFO</name></expr>:</case>

            <if_stmt pos:start="429:13" pos:end="437:13"><if pos:start="429:13" pos:end="437:13">if<condition pos:start="429:15" pos:end="429:25">(<expr pos:start="429:16" pos:end="429:24"><name pos:start="429:16" pos:end="429:19">size</name> <operator pos:start="429:21" pos:end="429:22">!=</operator> <literal type="number" pos:start="429:24" pos:end="429:24">4</literal></expr>)</condition><block pos:start="429:26" pos:end="437:13">{<block_content pos:start="431:17" pos:end="435:25">

                <expr_stmt pos:start="431:17" pos:end="431:106"><expr pos:start="431:17" pos:end="431:105"><call pos:start="431:17" pos:end="431:105"><name pos:start="431:17" pos:end="431:22">av_log</name><argument_list pos:start="431:23" pos:end="431:105">(<argument pos:start="431:24" pos:end="431:28"><expr pos:start="431:24" pos:end="431:28"><name pos:start="431:24" pos:end="431:28">avctx</name></expr></argument>, <argument pos:start="431:31" pos:end="431:42"><expr pos:start="431:31" pos:end="431:42"><name pos:start="431:31" pos:end="431:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="431:45" pos:end="431:92"><expr pos:start="431:45" pos:end="431:92"><literal type="string" pos:start="431:45" pos:end="431:92">"Invalid INT32INFO, size = %i, sent_bits = %i\n"</literal></expr></argument>, <argument pos:start="431:95" pos:end="431:98"><expr pos:start="431:95" pos:end="431:98"><name pos:start="431:95" pos:end="431:98">size</name></expr></argument>, <argument pos:start="431:101" pos:end="431:104"><expr pos:start="431:101" pos:end="431:104"><operator pos:start="431:101" pos:end="431:101">*</operator><name pos:start="431:102" pos:end="431:104">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="433:29"><expr pos:start="433:17" pos:end="433:28"><name pos:start="433:17" pos:end="433:19">buf</name> <operator pos:start="433:21" pos:end="433:22">+=</operator> <name pos:start="433:24" pos:end="433:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="435:17" pos:end="435:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="439:13" pos:end="459:13"><if pos:start="439:13" pos:end="441:39">if<condition pos:start="439:15" pos:end="439:22">(<expr pos:start="439:16" pos:end="439:21"><name pos:start="439:16" pos:end="439:21"><name pos:start="439:16" pos:end="439:18">buf</name><index pos:start="439:19" pos:end="439:21">[<expr pos:start="439:20" pos:end="439:20"><literal type="number" pos:start="439:20" pos:end="439:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="441:17" pos:end="441:39"><block_content pos:start="441:17" pos:end="441:39">

                <expr_stmt pos:start="441:17" pos:end="441:39"><expr pos:start="441:17" pos:end="441:38"><name pos:start="441:17" pos:end="441:29"><name pos:start="441:17" pos:end="441:17">s</name><operator pos:start="441:18" pos:end="441:19">-&gt;</operator><name pos:start="441:20" pos:end="441:29">extra_bits</name></name> <operator pos:start="441:31" pos:end="441:31">=</operator> <name pos:start="441:33" pos:end="441:38"><name pos:start="441:33" pos:end="441:35">buf</name><index pos:start="441:36" pos:end="441:38">[<expr pos:start="441:37" pos:end="441:37"><literal type="number" pos:start="441:37" pos:end="441:37">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="443:13" pos:end="445:34">else if<condition pos:start="443:20" pos:end="443:27">(<expr pos:start="443:21" pos:end="443:26"><name pos:start="443:21" pos:end="443:26"><name pos:start="443:21" pos:end="443:23">buf</name><index pos:start="443:24" pos:end="443:26">[<expr pos:start="443:25" pos:end="443:25"><literal type="number" pos:start="443:25" pos:end="443:25">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="445:17" pos:end="445:34"><block_content pos:start="445:17" pos:end="445:34">

                <expr_stmt pos:start="445:17" pos:end="445:34"><expr pos:start="445:17" pos:end="445:33"><name pos:start="445:17" pos:end="445:24"><name pos:start="445:17" pos:end="445:17">s</name><operator pos:start="445:18" pos:end="445:19">-&gt;</operator><name pos:start="445:20" pos:end="445:24">shift</name></name> <operator pos:start="445:26" pos:end="445:26">=</operator> <name pos:start="445:28" pos:end="445:33"><name pos:start="445:28" pos:end="445:30">buf</name><index pos:start="445:31" pos:end="445:33">[<expr pos:start="445:32" pos:end="445:32"><literal type="number" pos:start="445:32" pos:end="445:32">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="447:13" pos:end="453:13">else if<condition pos:start="447:20" pos:end="447:27">(<expr pos:start="447:21" pos:end="447:26"><name pos:start="447:21" pos:end="447:26"><name pos:start="447:21" pos:end="447:23">buf</name><index pos:start="447:24" pos:end="447:26">[<expr pos:start="447:25" pos:end="447:25"><literal type="number" pos:start="447:25" pos:end="447:25">2</literal></expr>]</index></name></expr>)</condition><block pos:start="447:28" pos:end="453:13">{<block_content pos:start="449:17" pos:end="451:34">

                <expr_stmt pos:start="449:17" pos:end="449:35"><expr pos:start="449:17" pos:end="449:34"><name pos:start="449:17" pos:end="449:22"><name pos:start="449:17" pos:end="449:17">s</name><operator pos:start="449:18" pos:end="449:19">-&gt;</operator><name pos:start="449:20" pos:end="449:22">and</name></name> <operator pos:start="449:24" pos:end="449:24">=</operator> <name pos:start="449:26" pos:end="449:30"><name pos:start="449:26" pos:end="449:26">s</name><operator pos:start="449:27" pos:end="449:28">-&gt;</operator><name pos:start="449:29" pos:end="449:30">or</name></name> <operator pos:start="449:32" pos:end="449:32">=</operator> <literal type="number" pos:start="449:34" pos:end="449:34">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="451:17" pos:end="451:34"><expr pos:start="451:17" pos:end="451:33"><name pos:start="451:17" pos:end="451:24"><name pos:start="451:17" pos:end="451:17">s</name><operator pos:start="451:18" pos:end="451:19">-&gt;</operator><name pos:start="451:20" pos:end="451:24">shift</name></name> <operator pos:start="451:26" pos:end="451:26">=</operator> <name pos:start="451:28" pos:end="451:33"><name pos:start="451:28" pos:end="451:30">buf</name><index pos:start="451:31" pos:end="451:33">[<expr pos:start="451:32" pos:end="451:32"><literal type="number" pos:start="451:32" pos:end="451:32">2</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if><if type="elseif" pos:start="453:14" pos:end="459:13">else if<condition pos:start="453:21" pos:end="453:28">(<expr pos:start="453:22" pos:end="453:27"><name pos:start="453:22" pos:end="453:27"><name pos:start="453:22" pos:end="453:24">buf</name><index pos:start="453:25" pos:end="453:27">[<expr pos:start="453:26" pos:end="453:26"><literal type="number" pos:start="453:26" pos:end="453:26">3</literal></expr>]</index></name></expr>)</condition><block pos:start="453:29" pos:end="459:13">{<block_content pos:start="455:17" pos:end="457:34">

                <expr_stmt pos:start="455:17" pos:end="455:27"><expr pos:start="455:17" pos:end="455:26"><name pos:start="455:17" pos:end="455:22"><name pos:start="455:17" pos:end="455:17">s</name><operator pos:start="455:18" pos:end="455:19">-&gt;</operator><name pos:start="455:20" pos:end="455:22">and</name></name> <operator pos:start="455:24" pos:end="455:24">=</operator> <literal type="number" pos:start="455:26" pos:end="455:26">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="457:17" pos:end="457:34"><expr pos:start="457:17" pos:end="457:33"><name pos:start="457:17" pos:end="457:24"><name pos:start="457:17" pos:end="457:17">s</name><operator pos:start="457:18" pos:end="457:19">-&gt;</operator><name pos:start="457:20" pos:end="457:24">shift</name></name> <operator pos:start="457:26" pos:end="457:26">=</operator> <name pos:start="457:28" pos:end="457:33"><name pos:start="457:28" pos:end="457:30">buf</name><index pos:start="457:31" pos:end="457:33">[<expr pos:start="457:32" pos:end="457:32"><literal type="number" pos:start="457:32" pos:end="457:32">3</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="461:13" pos:end="461:21"><expr pos:start="461:13" pos:end="461:20"><name pos:start="461:13" pos:end="461:15">buf</name> <operator pos:start="461:17" pos:end="461:18">+=</operator> <literal type="number" pos:start="461:20" pos:end="461:20">4</literal></expr>;</expr_stmt>

            <break pos:start="463:13" pos:end="463:18">break;</break>

        <case pos:start="465:9" pos:end="465:29">case <expr pos:start="465:14" pos:end="465:28"><name pos:start="465:14" pos:end="465:28">WP_ID_FLOATINFO</name></expr>:</case>

            <if_stmt pos:start="467:13" pos:end="475:13"><if pos:start="467:13" pos:end="475:13">if<condition pos:start="467:15" pos:end="467:25">(<expr pos:start="467:16" pos:end="467:24"><name pos:start="467:16" pos:end="467:19">size</name> <operator pos:start="467:21" pos:end="467:22">!=</operator> <literal type="number" pos:start="467:24" pos:end="467:24">4</literal></expr>)</condition><block pos:start="467:26" pos:end="475:13">{<block_content pos:start="469:17" pos:end="473:25">

                <expr_stmt pos:start="469:17" pos:end="469:84"><expr pos:start="469:17" pos:end="469:83"><call pos:start="469:17" pos:end="469:83"><name pos:start="469:17" pos:end="469:22">av_log</name><argument_list pos:start="469:23" pos:end="469:83">(<argument pos:start="469:24" pos:end="469:28"><expr pos:start="469:24" pos:end="469:28"><name pos:start="469:24" pos:end="469:28">avctx</name></expr></argument>, <argument pos:start="469:31" pos:end="469:42"><expr pos:start="469:31" pos:end="469:42"><name pos:start="469:31" pos:end="469:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="469:45" pos:end="469:76"><expr pos:start="469:45" pos:end="469:76"><literal type="string" pos:start="469:45" pos:end="469:76">"Invalid FLOATINFO, size = %i\n"</literal></expr></argument>, <argument pos:start="469:79" pos:end="469:82"><expr pos:start="469:79" pos:end="469:82"><name pos:start="469:79" pos:end="469:82">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="471:17" pos:end="471:29"><expr pos:start="471:17" pos:end="471:28"><name pos:start="471:17" pos:end="471:19">buf</name> <operator pos:start="471:21" pos:end="471:22">+=</operator> <name pos:start="471:24" pos:end="471:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="473:17" pos:end="473:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="477:13" pos:end="477:35"><expr pos:start="477:13" pos:end="477:34"><name pos:start="477:13" pos:end="477:25"><name pos:start="477:13" pos:end="477:13">s</name><operator pos:start="477:14" pos:end="477:15">-&gt;</operator><name pos:start="477:16" pos:end="477:25">float_flag</name></name> <operator pos:start="477:27" pos:end="477:27">=</operator> <name pos:start="477:29" pos:end="477:34"><name pos:start="477:29" pos:end="477:31">buf</name><index pos:start="477:32" pos:end="477:34">[<expr pos:start="477:33" pos:end="477:33"><literal type="number" pos:start="477:33" pos:end="477:33">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="479:13" pos:end="479:36"><expr pos:start="479:13" pos:end="479:35"><name pos:start="479:13" pos:end="479:26"><name pos:start="479:13" pos:end="479:13">s</name><operator pos:start="479:14" pos:end="479:15">-&gt;</operator><name pos:start="479:16" pos:end="479:26">float_shift</name></name> <operator pos:start="479:28" pos:end="479:28">=</operator> <name pos:start="479:30" pos:end="479:35"><name pos:start="479:30" pos:end="479:32">buf</name><index pos:start="479:33" pos:end="479:35">[<expr pos:start="479:34" pos:end="479:34"><literal type="number" pos:start="479:34" pos:end="479:34">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:38"><expr pos:start="481:13" pos:end="481:37"><name pos:start="481:13" pos:end="481:28"><name pos:start="481:13" pos:end="481:13">s</name><operator pos:start="481:14" pos:end="481:15">-&gt;</operator><name pos:start="481:16" pos:end="481:28">float_max_exp</name></name> <operator pos:start="481:30" pos:end="481:30">=</operator> <name pos:start="481:32" pos:end="481:37"><name pos:start="481:32" pos:end="481:34">buf</name><index pos:start="481:35" pos:end="481:37">[<expr pos:start="481:36" pos:end="481:36"><literal type="number" pos:start="481:36" pos:end="481:36">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:21"><expr pos:start="483:13" pos:end="483:20"><name pos:start="483:13" pos:end="483:15">buf</name> <operator pos:start="483:17" pos:end="483:18">+=</operator> <literal type="number" pos:start="483:20" pos:end="483:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="485:13" pos:end="485:26"><expr pos:start="485:13" pos:end="485:25"><name pos:start="485:13" pos:end="485:21">got_float</name> <operator pos:start="485:23" pos:end="485:23">=</operator> <literal type="number" pos:start="485:25" pos:end="485:25">1</literal></expr>;</expr_stmt>

            <break pos:start="487:13" pos:end="487:18">break;</break>

        <case pos:start="489:9" pos:end="489:24">case <expr pos:start="489:14" pos:end="489:23"><name pos:start="489:14" pos:end="489:23">WP_ID_DATA</name></expr>:</case>

            <expr_stmt pos:start="491:13" pos:end="491:42"><expr pos:start="491:13" pos:end="491:41"><name pos:start="491:13" pos:end="491:24"><name pos:start="491:13" pos:end="491:13">s</name><operator pos:start="491:14" pos:end="491:15">-&gt;</operator><name pos:start="491:16" pos:end="491:17">sc</name><operator pos:start="491:18" pos:end="491:18">.</operator><name pos:start="491:19" pos:end="491:24">offset</name></name> <operator pos:start="491:26" pos:end="491:26">=</operator> <name pos:start="491:28" pos:end="491:30">buf</name> <operator pos:start="491:32" pos:end="491:32">-</operator> <name pos:start="491:34" pos:end="491:41">orig_buf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="493:13" pos:end="493:36"><expr pos:start="493:13" pos:end="493:35"><name pos:start="493:13" pos:end="493:22"><name pos:start="493:13" pos:end="493:13">s</name><operator pos:start="493:14" pos:end="493:15">-&gt;</operator><name pos:start="493:16" pos:end="493:17">sc</name><operator pos:start="493:18" pos:end="493:18">.</operator><name pos:start="493:19" pos:end="493:22">size</name></name>   <operator pos:start="493:26" pos:end="493:26">=</operator> <name pos:start="493:28" pos:end="493:31">size</name> <operator pos:start="493:33" pos:end="493:33">*</operator> <literal type="number" pos:start="493:35" pos:end="493:35">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="495:13" pos:end="495:49"><expr pos:start="495:13" pos:end="495:48"><call pos:start="495:13" pos:end="495:48"><name pos:start="495:13" pos:end="495:25">init_get_bits</name><argument_list pos:start="495:26" pos:end="495:48">(<argument pos:start="495:27" pos:end="495:32"><expr pos:start="495:27" pos:end="495:32"><operator pos:start="495:27" pos:end="495:27">&amp;</operator><name pos:start="495:28" pos:end="495:32"><name pos:start="495:28" pos:end="495:28">s</name><operator pos:start="495:29" pos:end="495:30">-&gt;</operator><name pos:start="495:31" pos:end="495:32">gb</name></name></expr></argument>, <argument pos:start="495:35" pos:end="495:37"><expr pos:start="495:35" pos:end="495:37"><name pos:start="495:35" pos:end="495:37">buf</name></expr></argument>, <argument pos:start="495:40" pos:end="495:47"><expr pos:start="495:40" pos:end="495:47"><name pos:start="495:40" pos:end="495:43">size</name> <operator pos:start="495:45" pos:end="495:45">*</operator> <literal type="number" pos:start="495:47" pos:end="495:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="497:13" pos:end="497:36"><expr pos:start="497:13" pos:end="497:35"><name pos:start="497:13" pos:end="497:24"><name pos:start="497:13" pos:end="497:13">s</name><operator pos:start="497:14" pos:end="497:15">-&gt;</operator><name pos:start="497:16" pos:end="497:24">data_size</name></name> <operator pos:start="497:26" pos:end="497:26">=</operator> <name pos:start="497:28" pos:end="497:31">size</name> <operator pos:start="497:33" pos:end="497:33">*</operator> <literal type="number" pos:start="497:35" pos:end="497:35">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="499:13" pos:end="499:24"><expr pos:start="499:13" pos:end="499:23"><name pos:start="499:13" pos:end="499:15">buf</name> <operator pos:start="499:17" pos:end="499:18">+=</operator> <name pos:start="499:20" pos:end="499:23">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:23"><expr pos:start="501:13" pos:end="501:22"><name pos:start="501:13" pos:end="501:18">got_bs</name> <operator pos:start="501:20" pos:end="501:20">=</operator> <literal type="number" pos:start="501:22" pos:end="501:22">1</literal></expr>;</expr_stmt>

            <break pos:start="503:13" pos:end="503:18">break;</break>

        <case pos:start="505:9" pos:end="505:29">case <expr pos:start="505:14" pos:end="505:28"><name pos:start="505:14" pos:end="505:28">WP_ID_EXTRABITS</name></expr>:</case>

            <if_stmt pos:start="507:13" pos:end="515:13"><if pos:start="507:13" pos:end="515:13">if<condition pos:start="507:15" pos:end="507:25">(<expr pos:start="507:16" pos:end="507:24"><name pos:start="507:16" pos:end="507:19">size</name> <operator pos:start="507:21" pos:end="507:22">&lt;=</operator> <literal type="number" pos:start="507:24" pos:end="507:24">4</literal></expr>)</condition><block pos:start="507:26" pos:end="515:13">{<block_content pos:start="509:17" pos:end="513:25">

                <expr_stmt pos:start="509:17" pos:end="509:84"><expr pos:start="509:17" pos:end="509:83"><call pos:start="509:17" pos:end="509:83"><name pos:start="509:17" pos:end="509:22">av_log</name><argument_list pos:start="509:23" pos:end="509:83">(<argument pos:start="509:24" pos:end="509:28"><expr pos:start="509:24" pos:end="509:28"><name pos:start="509:24" pos:end="509:28">avctx</name></expr></argument>, <argument pos:start="509:31" pos:end="509:42"><expr pos:start="509:31" pos:end="509:42"><name pos:start="509:31" pos:end="509:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="509:45" pos:end="509:76"><expr pos:start="509:45" pos:end="509:76"><literal type="string" pos:start="509:45" pos:end="509:76">"Invalid EXTRABITS, size = %i\n"</literal></expr></argument>, <argument pos:start="509:79" pos:end="509:82"><expr pos:start="509:79" pos:end="509:82"><name pos:start="509:79" pos:end="509:82">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="511:17" pos:end="511:28"><expr pos:start="511:17" pos:end="511:27"><name pos:start="511:17" pos:end="511:19">buf</name> <operator pos:start="511:21" pos:end="511:22">+=</operator> <name pos:start="511:24" pos:end="511:27">size</name></expr>;</expr_stmt>

                <continue pos:start="513:17" pos:end="513:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="517:13" pos:end="517:48"><expr pos:start="517:13" pos:end="517:47"><name pos:start="517:13" pos:end="517:30"><name pos:start="517:13" pos:end="517:13">s</name><operator pos:start="517:14" pos:end="517:15">-&gt;</operator><name pos:start="517:16" pos:end="517:23">extra_sc</name><operator pos:start="517:24" pos:end="517:24">.</operator><name pos:start="517:25" pos:end="517:30">offset</name></name> <operator pos:start="517:32" pos:end="517:32">=</operator> <name pos:start="517:34" pos:end="517:36">buf</name> <operator pos:start="517:38" pos:end="517:38">-</operator> <name pos:start="517:40" pos:end="517:47">orig_buf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="519:13" pos:end="519:42"><expr pos:start="519:13" pos:end="519:41"><name pos:start="519:13" pos:end="519:28"><name pos:start="519:13" pos:end="519:13">s</name><operator pos:start="519:14" pos:end="519:15">-&gt;</operator><name pos:start="519:16" pos:end="519:23">extra_sc</name><operator pos:start="519:24" pos:end="519:24">.</operator><name pos:start="519:25" pos:end="519:28">size</name></name>   <operator pos:start="519:32" pos:end="519:32">=</operator> <name pos:start="519:34" pos:end="519:37">size</name> <operator pos:start="519:39" pos:end="519:39">*</operator> <literal type="number" pos:start="519:41" pos:end="519:41">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="521:13" pos:end="521:60"><expr pos:start="521:13" pos:end="521:59"><call pos:start="521:13" pos:end="521:59"><name pos:start="521:13" pos:end="521:25">init_get_bits</name><argument_list pos:start="521:26" pos:end="521:59">(<argument pos:start="521:27" pos:end="521:43"><expr pos:start="521:27" pos:end="521:43"><operator pos:start="521:27" pos:end="521:27">&amp;</operator><name pos:start="521:28" pos:end="521:43"><name pos:start="521:28" pos:end="521:28">s</name><operator pos:start="521:29" pos:end="521:30">-&gt;</operator><name pos:start="521:31" pos:end="521:43">gb_extra_bits</name></name></expr></argument>, <argument pos:start="521:46" pos:end="521:48"><expr pos:start="521:46" pos:end="521:48"><name pos:start="521:46" pos:end="521:48">buf</name></expr></argument>, <argument pos:start="521:51" pos:end="521:58"><expr pos:start="521:51" pos:end="521:58"><name pos:start="521:51" pos:end="521:54">size</name> <operator pos:start="521:56" pos:end="521:56">*</operator> <literal type="number" pos:start="521:58" pos:end="521:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="523:13" pos:end="523:69"><expr pos:start="523:13" pos:end="523:68"><name pos:start="523:13" pos:end="523:29"><name pos:start="523:13" pos:end="523:13">s</name><operator pos:start="523:14" pos:end="523:15">-&gt;</operator><name pos:start="523:16" pos:end="523:29">crc_extra_bits</name></name> <operator pos:start="523:31" pos:end="523:31">=</operator> <call pos:start="523:33" pos:end="523:68"><name pos:start="523:33" pos:end="523:45">get_bits_long</name><argument_list pos:start="523:46" pos:end="523:68">(<argument pos:start="523:47" pos:end="523:63"><expr pos:start="523:47" pos:end="523:63"><operator pos:start="523:47" pos:end="523:47">&amp;</operator><name pos:start="523:48" pos:end="523:63"><name pos:start="523:48" pos:end="523:48">s</name><operator pos:start="523:49" pos:end="523:50">-&gt;</operator><name pos:start="523:51" pos:end="523:63">gb_extra_bits</name></name></expr></argument>, <argument pos:start="523:66" pos:end="523:67"><expr pos:start="523:66" pos:end="523:67"><literal type="number" pos:start="523:66" pos:end="523:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="525:13" pos:end="525:24"><expr pos:start="525:13" pos:end="525:23"><name pos:start="525:13" pos:end="525:15">buf</name> <operator pos:start="525:17" pos:end="525:18">+=</operator> <name pos:start="525:20" pos:end="525:23">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="527:13" pos:end="527:34"><expr pos:start="527:13" pos:end="527:33"><name pos:start="527:13" pos:end="527:29"><name pos:start="527:13" pos:end="527:13">s</name><operator pos:start="527:14" pos:end="527:15">-&gt;</operator><name pos:start="527:16" pos:end="527:29">got_extra_bits</name></name> <operator pos:start="527:31" pos:end="527:31">=</operator> <literal type="number" pos:start="527:33" pos:end="527:33">1</literal></expr>;</expr_stmt>

            <break pos:start="529:13" pos:end="529:18">break;</break>

        <case pos:start="531:9" pos:end="531:28">case <expr pos:start="531:14" pos:end="531:27"><name pos:start="531:14" pos:end="531:27">WP_ID_CHANINFO</name></expr>:</case>

            <if_stmt pos:start="533:13" pos:end="539:13"><if pos:start="533:13" pos:end="539:13">if<condition pos:start="533:15" pos:end="533:25">(<expr pos:start="533:16" pos:end="533:24"><name pos:start="533:16" pos:end="533:19">size</name> <operator pos:start="533:21" pos:end="533:22">&lt;=</operator> <literal type="number" pos:start="533:24" pos:end="533:24">1</literal></expr>)</condition><block pos:start="533:26" pos:end="539:13">{<block_content pos:start="535:17" pos:end="537:26">

                <expr_stmt pos:start="535:17" pos:end="535:82"><expr pos:start="535:17" pos:end="535:81"><call pos:start="535:17" pos:end="535:81"><name pos:start="535:17" pos:end="535:22">av_log</name><argument_list pos:start="535:23" pos:end="535:81">(<argument pos:start="535:24" pos:end="535:28"><expr pos:start="535:24" pos:end="535:28"><name pos:start="535:24" pos:end="535:28">avctx</name></expr></argument>, <argument pos:start="535:31" pos:end="535:42"><expr pos:start="535:31" pos:end="535:42"><name pos:start="535:31" pos:end="535:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="535:45" pos:end="535:80"><expr pos:start="535:45" pos:end="535:80"><literal type="string" pos:start="535:45" pos:end="535:80">"Insufficient channel information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="537:17" pos:end="537:26">return <expr pos:start="537:24" pos:end="537:25"><operator pos:start="537:24" pos:end="537:24">-</operator><literal type="number" pos:start="537:25" pos:end="537:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="541:13" pos:end="541:26"><expr pos:start="541:13" pos:end="541:25"><name pos:start="541:13" pos:end="541:16">chan</name> <operator pos:start="541:18" pos:end="541:18">=</operator> <operator pos:start="541:20" pos:end="541:20">*</operator><name pos:start="541:21" pos:end="541:23">buf</name><operator pos:start="541:24" pos:end="541:25">++</operator></expr>;</expr_stmt>

            <switch pos:start="543:13" pos:end="585:13">switch<condition pos:start="543:19" pos:end="543:28">(<expr pos:start="543:20" pos:end="543:27"><name pos:start="543:20" pos:end="543:23">size</name> <operator pos:start="543:25" pos:end="543:25">-</operator> <literal type="number" pos:start="543:27" pos:end="543:27">2</literal></expr>)</condition><block pos:start="543:29" pos:end="585:13">{<block_content pos:start="545:13" pos:end="583:47">

            <case pos:start="545:13" pos:end="545:19">case <expr pos:start="545:18" pos:end="545:18"><literal type="number" pos:start="545:18" pos:end="545:18">0</literal></expr>:</case>

                <expr_stmt pos:start="547:17" pos:end="547:30"><expr pos:start="547:17" pos:end="547:29"><name pos:start="547:17" pos:end="547:22">chmask</name> <operator pos:start="547:24" pos:end="547:24">=</operator> <operator pos:start="547:26" pos:end="547:26">*</operator><name pos:start="547:27" pos:end="547:29">buf</name></expr>;</expr_stmt>

                <break pos:start="549:17" pos:end="549:22">break;</break>

            <case pos:start="551:13" pos:end="551:19">case <expr pos:start="551:18" pos:end="551:18"><literal type="number" pos:start="551:18" pos:end="551:18">1</literal></expr>:</case>

                <expr_stmt pos:start="553:17" pos:end="553:38"><expr pos:start="553:17" pos:end="553:37"><name pos:start="553:17" pos:end="553:22">chmask</name> <operator pos:start="553:24" pos:end="553:24">=</operator> <call pos:start="553:26" pos:end="553:37"><name pos:start="553:26" pos:end="553:32">AV_RL16</name><argument_list pos:start="553:33" pos:end="553:37">(<argument pos:start="553:34" pos:end="553:36"><expr pos:start="553:34" pos:end="553:36"><name pos:start="553:34" pos:end="553:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="555:17" pos:end="555:22">break;</break>

            <case pos:start="557:13" pos:end="557:19">case <expr pos:start="557:18" pos:end="557:18"><literal type="number" pos:start="557:18" pos:end="557:18">2</literal></expr>:</case>

                <expr_stmt pos:start="559:17" pos:end="559:38"><expr pos:start="559:17" pos:end="559:37"><name pos:start="559:17" pos:end="559:22">chmask</name> <operator pos:start="559:24" pos:end="559:24">=</operator> <call pos:start="559:26" pos:end="559:37"><name pos:start="559:26" pos:end="559:32">AV_RL24</name><argument_list pos:start="559:33" pos:end="559:37">(<argument pos:start="559:34" pos:end="559:36"><expr pos:start="559:34" pos:end="559:36"><name pos:start="559:34" pos:end="559:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="561:17" pos:end="561:22">break;</break>

            <case pos:start="563:13" pos:end="563:19">case <expr pos:start="563:18" pos:end="563:18"><literal type="number" pos:start="563:18" pos:end="563:18">3</literal></expr>:</case>

                <expr_stmt pos:start="565:17" pos:end="565:38"><expr pos:start="565:17" pos:end="565:37"><name pos:start="565:17" pos:end="565:22">chmask</name> <operator pos:start="565:24" pos:end="565:24">=</operator> <call pos:start="565:26" pos:end="565:37"><name pos:start="565:26" pos:end="565:32">AV_RL32</name><argument_list pos:start="565:33" pos:end="565:37">(<argument pos:start="565:34" pos:end="565:36"><expr pos:start="565:34" pos:end="565:36"><name pos:start="565:34" pos:end="565:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="567:17" pos:end="567:22">break;</break>

            <case pos:start="569:13" pos:end="569:19">case <expr pos:start="569:18" pos:end="569:18"><literal type="number" pos:start="569:18" pos:end="569:18">5</literal></expr>:</case>

                <expr_stmt pos:start="571:17" pos:end="571:44"><expr pos:start="571:17" pos:end="571:43"><name pos:start="571:17" pos:end="571:20">chan</name> <operator pos:start="571:22" pos:end="571:23">|=</operator> <operator pos:start="571:25" pos:end="571:25">(</operator><name pos:start="571:26" pos:end="571:31"><name pos:start="571:26" pos:end="571:28">buf</name><index pos:start="571:29" pos:end="571:31">[<expr pos:start="571:30" pos:end="571:30"><literal type="number" pos:start="571:30" pos:end="571:30">1</literal></expr>]</index></name> <operator pos:start="571:33" pos:end="571:33">&amp;</operator> <literal type="number" pos:start="571:35" pos:end="571:37">0xF</literal><operator pos:start="571:38" pos:end="571:38">)</operator> <operator pos:start="571:40" pos:end="571:41">&lt;&lt;</operator> <literal type="number" pos:start="571:43" pos:end="571:43">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="573:17" pos:end="573:42"><expr pos:start="573:17" pos:end="573:41"><name pos:start="573:17" pos:end="573:22">chmask</name> <operator pos:start="573:24" pos:end="573:24">=</operator> <call pos:start="573:26" pos:end="573:41"><name pos:start="573:26" pos:end="573:32">AV_RL24</name><argument_list pos:start="573:33" pos:end="573:41">(<argument pos:start="573:34" pos:end="573:40"><expr pos:start="573:34" pos:end="573:40"><name pos:start="573:34" pos:end="573:36">buf</name> <operator pos:start="573:38" pos:end="573:38">+</operator> <literal type="number" pos:start="573:40" pos:end="573:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="575:17" pos:end="575:22">break;</break>

            <default pos:start="577:13" pos:end="577:20">default:</default>

                <expr_stmt pos:start="579:17" pos:end="579:84"><expr pos:start="579:17" pos:end="579:83"><call pos:start="579:17" pos:end="579:83"><name pos:start="579:17" pos:end="579:22">av_log</name><argument_list pos:start="579:23" pos:end="579:83">(<argument pos:start="579:24" pos:end="579:28"><expr pos:start="579:24" pos:end="579:28"><name pos:start="579:24" pos:end="579:28">avctx</name></expr></argument>, <argument pos:start="579:31" pos:end="579:42"><expr pos:start="579:31" pos:end="579:42"><name pos:start="579:31" pos:end="579:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="579:45" pos:end="579:76"><expr pos:start="579:45" pos:end="579:76"><literal type="string" pos:start="579:45" pos:end="579:76">"Invalid channel info size %d\n"</literal></expr></argument>, <argument pos:start="579:79" pos:end="579:82"><expr pos:start="579:79" pos:end="579:82"><name pos:start="579:79" pos:end="579:82">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="581:17" pos:end="581:39"><expr pos:start="581:17" pos:end="581:38"><name pos:start="581:17" pos:end="581:20">chan</name> <operator pos:start="581:22" pos:end="581:22">=</operator> <name pos:start="581:24" pos:end="581:38"><name pos:start="581:24" pos:end="581:28">avctx</name><operator pos:start="581:29" pos:end="581:30">-&gt;</operator><name pos:start="581:31" pos:end="581:38">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="583:17" pos:end="583:47"><expr pos:start="583:17" pos:end="583:46"><name pos:start="583:17" pos:end="583:22">chmask</name> <operator pos:start="583:24" pos:end="583:24">=</operator> <name pos:start="583:26" pos:end="583:46"><name pos:start="583:26" pos:end="583:30">avctx</name><operator pos:start="583:31" pos:end="583:32">-&gt;</operator><name pos:start="583:33" pos:end="583:46">channel_layout</name></name></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <if_stmt pos:start="587:13" pos:end="595:13"><if pos:start="587:13" pos:end="595:13">if<condition pos:start="587:15" pos:end="587:39">(<expr pos:start="587:16" pos:end="587:38"><name pos:start="587:16" pos:end="587:19">chan</name> <operator pos:start="587:21" pos:end="587:22">!=</operator> <name pos:start="587:24" pos:end="587:38"><name pos:start="587:24" pos:end="587:28">avctx</name><operator pos:start="587:29" pos:end="587:30">-&gt;</operator><name pos:start="587:31" pos:end="587:38">channels</name></name></expr>)</condition><block pos:start="587:40" pos:end="595:13">{<block_content pos:start="589:17" pos:end="593:26">

                <expr_stmt pos:start="589:17" pos:end="591:46"><expr pos:start="589:17" pos:end="591:45"><call pos:start="589:17" pos:end="591:45"><name pos:start="589:17" pos:end="589:22">av_log</name><argument_list pos:start="589:23" pos:end="591:45">(<argument pos:start="589:24" pos:end="589:28"><expr pos:start="589:24" pos:end="589:28"><name pos:start="589:24" pos:end="589:28">avctx</name></expr></argument>, <argument pos:start="589:31" pos:end="589:42"><expr pos:start="589:31" pos:end="589:42"><name pos:start="589:31" pos:end="589:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="589:45" pos:end="589:114"><expr pos:start="589:45" pos:end="589:114"><literal type="string" pos:start="589:45" pos:end="589:114">"Block reports total %d channels, decoder believes it's %d channels\n"</literal></expr></argument>,

                       <argument pos:start="591:24" pos:end="591:27"><expr pos:start="591:24" pos:end="591:27"><name pos:start="591:24" pos:end="591:27">chan</name></expr></argument>, <argument pos:start="591:30" pos:end="591:44"><expr pos:start="591:30" pos:end="591:44"><name pos:start="591:30" pos:end="591:44"><name pos:start="591:30" pos:end="591:34">avctx</name><operator pos:start="591:35" pos:end="591:36">-&gt;</operator><name pos:start="591:37" pos:end="591:44">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="593:17" pos:end="593:26">return <expr pos:start="593:24" pos:end="593:25"><operator pos:start="593:24" pos:end="593:24">-</operator><literal type="number" pos:start="593:25" pos:end="593:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="597:13" pos:end="599:47"><if pos:start="597:13" pos:end="599:47">if<condition pos:start="597:15" pos:end="597:38">(<expr pos:start="597:16" pos:end="597:37"><operator pos:start="597:16" pos:end="597:16">!</operator><name pos:start="597:17" pos:end="597:37"><name pos:start="597:17" pos:end="597:21">avctx</name><operator pos:start="597:22" pos:end="597:23">-&gt;</operator><name pos:start="597:24" pos:end="597:37">channel_layout</name></name></expr>)</condition><block type="pseudo" pos:start="599:17" pos:end="599:47"><block_content pos:start="599:17" pos:end="599:47">

                <expr_stmt pos:start="599:17" pos:end="599:47"><expr pos:start="599:17" pos:end="599:46"><name pos:start="599:17" pos:end="599:37"><name pos:start="599:17" pos:end="599:21">avctx</name><operator pos:start="599:22" pos:end="599:23">-&gt;</operator><name pos:start="599:24" pos:end="599:37">channel_layout</name></name> <operator pos:start="599:39" pos:end="599:39">=</operator> <name pos:start="599:41" pos:end="599:46">chmask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="601:13" pos:end="601:28"><expr pos:start="601:13" pos:end="601:27"><name pos:start="601:13" pos:end="601:15">buf</name> <operator pos:start="601:17" pos:end="601:18">+=</operator> <name pos:start="601:20" pos:end="601:23">size</name> <operator pos:start="601:25" pos:end="601:25">-</operator> <literal type="number" pos:start="601:27" pos:end="601:27">1</literal></expr>;</expr_stmt>

            <break pos:start="603:13" pos:end="603:18">break;</break>

        <default pos:start="605:9" pos:end="605:16">default:</default>

            <expr_stmt pos:start="607:13" pos:end="607:24"><expr pos:start="607:13" pos:end="607:23"><name pos:start="607:13" pos:end="607:15">buf</name> <operator pos:start="607:17" pos:end="607:18">+=</operator> <name pos:start="607:20" pos:end="607:23">size</name></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="611:9" pos:end="611:34"><if pos:start="611:9" pos:end="611:34">if<condition pos:start="611:11" pos:end="611:27">(<expr pos:start="611:12" pos:end="611:26"><name pos:start="611:12" pos:end="611:13">id</name> <operator pos:start="611:15" pos:end="611:15">&amp;</operator> <name pos:start="611:17" pos:end="611:26">WP_IDF_ODD</name></expr>)</condition><block type="pseudo" pos:start="611:29" pos:end="611:34"><block_content pos:start="611:29" pos:end="611:34"> <expr_stmt pos:start="611:29" pos:end="611:34"><expr pos:start="611:29" pos:end="611:33"><name pos:start="611:29" pos:end="611:31">buf</name><operator pos:start="611:32" pos:end="611:33">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="615:5" pos:end="707:5"><if pos:start="615:5" pos:end="691:5">if<condition pos:start="615:7" pos:end="615:24">(<expr pos:start="615:8" pos:end="615:23"><operator pos:start="615:8" pos:end="615:8">!</operator><name pos:start="615:9" pos:end="615:23"><name pos:start="615:9" pos:end="615:9">s</name><operator pos:start="615:10" pos:end="615:11">-&gt;</operator><name pos:start="615:12" pos:end="615:23">samples_left</name></name></expr>)</condition><block pos:start="615:25" pos:end="691:5">{<block_content pos:start="617:9" pos:end="689:37">

        <if_stmt pos:start="617:9" pos:end="623:9"><if pos:start="617:9" pos:end="623:9">if<condition pos:start="617:11" pos:end="617:22">(<expr pos:start="617:12" pos:end="617:21"><operator pos:start="617:12" pos:end="617:12">!</operator><name pos:start="617:13" pos:end="617:21">got_terms</name></expr>)</condition><block pos:start="617:23" pos:end="623:9">{<block_content pos:start="619:13" pos:end="621:22">

            <expr_stmt pos:start="619:13" pos:end="619:79"><expr pos:start="619:13" pos:end="619:78"><call pos:start="619:13" pos:end="619:78"><name pos:start="619:13" pos:end="619:18">av_log</name><argument_list pos:start="619:19" pos:end="619:78">(<argument pos:start="619:20" pos:end="619:24"><expr pos:start="619:20" pos:end="619:24"><name pos:start="619:20" pos:end="619:24">avctx</name></expr></argument>, <argument pos:start="619:27" pos:end="619:38"><expr pos:start="619:27" pos:end="619:38"><name pos:start="619:27" pos:end="619:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="619:41" pos:end="619:77"><expr pos:start="619:41" pos:end="619:77"><literal type="string" pos:start="619:41" pos:end="619:77">"No block with decorrelation terms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="621:13" pos:end="621:22">return <expr pos:start="621:20" pos:end="621:21"><operator pos:start="621:20" pos:end="621:20">-</operator><literal type="number" pos:start="621:21" pos:end="621:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="625:9" pos:end="631:9"><if pos:start="625:9" pos:end="631:9">if<condition pos:start="625:11" pos:end="625:24">(<expr pos:start="625:12" pos:end="625:23"><operator pos:start="625:12" pos:end="625:12">!</operator><name pos:start="625:13" pos:end="625:23">got_weights</name></expr>)</condition><block pos:start="625:25" pos:end="631:9">{<block_content pos:start="627:13" pos:end="629:22">

            <expr_stmt pos:start="627:13" pos:end="627:81"><expr pos:start="627:13" pos:end="627:80"><call pos:start="627:13" pos:end="627:80"><name pos:start="627:13" pos:end="627:18">av_log</name><argument_list pos:start="627:19" pos:end="627:80">(<argument pos:start="627:20" pos:end="627:24"><expr pos:start="627:20" pos:end="627:24"><name pos:start="627:20" pos:end="627:24">avctx</name></expr></argument>, <argument pos:start="627:27" pos:end="627:38"><expr pos:start="627:27" pos:end="627:38"><name pos:start="627:27" pos:end="627:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="627:41" pos:end="627:79"><expr pos:start="627:41" pos:end="627:79"><literal type="string" pos:start="627:41" pos:end="627:79">"No block with decorrelation weights\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="629:13" pos:end="629:22">return <expr pos:start="629:20" pos:end="629:21"><operator pos:start="629:20" pos:end="629:20">-</operator><literal type="number" pos:start="629:21" pos:end="629:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="633:9" pos:end="639:9"><if pos:start="633:9" pos:end="639:9">if<condition pos:start="633:11" pos:end="633:24">(<expr pos:start="633:12" pos:end="633:23"><operator pos:start="633:12" pos:end="633:12">!</operator><name pos:start="633:13" pos:end="633:23">got_samples</name></expr>)</condition><block pos:start="633:25" pos:end="639:9">{<block_content pos:start="635:13" pos:end="637:22">

            <expr_stmt pos:start="635:13" pos:end="635:81"><expr pos:start="635:13" pos:end="635:80"><call pos:start="635:13" pos:end="635:80"><name pos:start="635:13" pos:end="635:18">av_log</name><argument_list pos:start="635:19" pos:end="635:80">(<argument pos:start="635:20" pos:end="635:24"><expr pos:start="635:20" pos:end="635:24"><name pos:start="635:20" pos:end="635:24">avctx</name></expr></argument>, <argument pos:start="635:27" pos:end="635:38"><expr pos:start="635:27" pos:end="635:38"><name pos:start="635:27" pos:end="635:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="635:41" pos:end="635:79"><expr pos:start="635:41" pos:end="635:79"><literal type="string" pos:start="635:41" pos:end="635:79">"No block with decorrelation samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="637:13" pos:end="637:22">return <expr pos:start="637:20" pos:end="637:21"><operator pos:start="637:20" pos:end="637:20">-</operator><literal type="number" pos:start="637:21" pos:end="637:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="641:9" pos:end="647:9"><if pos:start="641:9" pos:end="647:9">if<condition pos:start="641:11" pos:end="641:24">(<expr pos:start="641:12" pos:end="641:23"><operator pos:start="641:12" pos:end="641:12">!</operator><name pos:start="641:13" pos:end="641:23">got_entropy</name></expr>)</condition><block pos:start="641:25" pos:end="647:9">{<block_content pos:start="643:13" pos:end="645:22">

            <expr_stmt pos:start="643:13" pos:end="643:72"><expr pos:start="643:13" pos:end="643:71"><call pos:start="643:13" pos:end="643:71"><name pos:start="643:13" pos:end="643:18">av_log</name><argument_list pos:start="643:19" pos:end="643:71">(<argument pos:start="643:20" pos:end="643:24"><expr pos:start="643:20" pos:end="643:24"><name pos:start="643:20" pos:end="643:24">avctx</name></expr></argument>, <argument pos:start="643:27" pos:end="643:38"><expr pos:start="643:27" pos:end="643:38"><name pos:start="643:27" pos:end="643:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="643:41" pos:end="643:70"><expr pos:start="643:41" pos:end="643:70"><literal type="string" pos:start="643:41" pos:end="643:70">"No block with entropy info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="645:13" pos:end="645:22">return <expr pos:start="645:20" pos:end="645:21"><operator pos:start="645:20" pos:end="645:20">-</operator><literal type="number" pos:start="645:21" pos:end="645:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="649:9" pos:end="655:9"><if pos:start="649:9" pos:end="655:9">if<condition pos:start="649:11" pos:end="649:36">(<expr pos:start="649:12" pos:end="649:35"><name pos:start="649:12" pos:end="649:20"><name pos:start="649:12" pos:end="649:12">s</name><operator pos:start="649:13" pos:end="649:14">-&gt;</operator><name pos:start="649:15" pos:end="649:20">hybrid</name></name> <operator pos:start="649:22" pos:end="649:23">&amp;&amp;</operator> <operator pos:start="649:25" pos:end="649:25">!</operator><name pos:start="649:26" pos:end="649:35">got_hybrid</name></expr>)</condition><block pos:start="649:37" pos:end="655:9">{<block_content pos:start="651:13" pos:end="653:22">

            <expr_stmt pos:start="651:13" pos:end="651:69"><expr pos:start="651:13" pos:end="651:68"><call pos:start="651:13" pos:end="651:68"><name pos:start="651:13" pos:end="651:18">av_log</name><argument_list pos:start="651:19" pos:end="651:68">(<argument pos:start="651:20" pos:end="651:24"><expr pos:start="651:20" pos:end="651:24"><name pos:start="651:20" pos:end="651:24">avctx</name></expr></argument>, <argument pos:start="651:27" pos:end="651:38"><expr pos:start="651:27" pos:end="651:38"><name pos:start="651:27" pos:end="651:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="651:41" pos:end="651:67"><expr pos:start="651:41" pos:end="651:67"><literal type="string" pos:start="651:41" pos:end="651:67">"Hybrid config not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="653:13" pos:end="653:22">return <expr pos:start="653:20" pos:end="653:21"><operator pos:start="653:20" pos:end="653:20">-</operator><literal type="number" pos:start="653:21" pos:end="653:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="657:9" pos:end="663:9"><if pos:start="657:9" pos:end="663:9">if<condition pos:start="657:11" pos:end="657:19">(<expr pos:start="657:12" pos:end="657:18"><operator pos:start="657:12" pos:end="657:12">!</operator><name pos:start="657:13" pos:end="657:18">got_bs</name></expr>)</condition><block pos:start="657:20" pos:end="663:9">{<block_content pos:start="659:13" pos:end="661:22">

            <expr_stmt pos:start="659:13" pos:end="659:70"><expr pos:start="659:13" pos:end="659:69"><call pos:start="659:13" pos:end="659:69"><name pos:start="659:13" pos:end="659:18">av_log</name><argument_list pos:start="659:19" pos:end="659:69">(<argument pos:start="659:20" pos:end="659:24"><expr pos:start="659:20" pos:end="659:24"><name pos:start="659:20" pos:end="659:24">avctx</name></expr></argument>, <argument pos:start="659:27" pos:end="659:38"><expr pos:start="659:27" pos:end="659:38"><name pos:start="659:27" pos:end="659:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="659:41" pos:end="659:68"><expr pos:start="659:41" pos:end="659:68"><literal type="string" pos:start="659:41" pos:end="659:68">"Packed samples not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="661:13" pos:end="661:22">return <expr pos:start="661:20" pos:end="661:21"><operator pos:start="661:20" pos:end="661:20">-</operator><literal type="number" pos:start="661:21" pos:end="661:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="665:9" pos:end="671:9"><if pos:start="665:9" pos:end="671:9">if<condition pos:start="665:11" pos:end="665:64">(<expr pos:start="665:12" pos:end="665:63"><operator pos:start="665:12" pos:end="665:12">!</operator><name pos:start="665:13" pos:end="665:21">got_float</name> <operator pos:start="665:23" pos:end="665:24">&amp;&amp;</operator> <name pos:start="665:26" pos:end="665:42"><name pos:start="665:26" pos:end="665:30">avctx</name><operator pos:start="665:31" pos:end="665:32">-&gt;</operator><name pos:start="665:33" pos:end="665:42">sample_fmt</name></name> <operator pos:start="665:44" pos:end="665:45">==</operator> <name pos:start="665:47" pos:end="665:63">AV_SAMPLE_FMT_FLT</name></expr>)</condition><block pos:start="665:65" pos:end="671:9">{<block_content pos:start="667:13" pos:end="669:22">

            <expr_stmt pos:start="667:13" pos:end="667:73"><expr pos:start="667:13" pos:end="667:72"><call pos:start="667:13" pos:end="667:72"><name pos:start="667:13" pos:end="667:18">av_log</name><argument_list pos:start="667:19" pos:end="667:72">(<argument pos:start="667:20" pos:end="667:24"><expr pos:start="667:20" pos:end="667:24"><name pos:start="667:20" pos:end="667:24">avctx</name></expr></argument>, <argument pos:start="667:27" pos:end="667:38"><expr pos:start="667:27" pos:end="667:38"><name pos:start="667:27" pos:end="667:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="667:41" pos:end="667:71"><expr pos:start="667:41" pos:end="667:71"><literal type="string" pos:start="667:41" pos:end="667:71">"Float information not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="669:13" pos:end="669:22">return <expr pos:start="669:20" pos:end="669:21"><operator pos:start="669:20" pos:end="669:20">-</operator><literal type="number" pos:start="669:21" pos:end="669:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="673:9" pos:end="687:9"><if pos:start="673:9" pos:end="687:9">if<condition pos:start="673:11" pos:end="673:71">(<expr pos:start="673:12" pos:end="673:70"><name pos:start="673:12" pos:end="673:28"><name pos:start="673:12" pos:end="673:12">s</name><operator pos:start="673:13" pos:end="673:14">-&gt;</operator><name pos:start="673:15" pos:end="673:28">got_extra_bits</name></name> <operator pos:start="673:30" pos:end="673:31">&amp;&amp;</operator> <name pos:start="673:33" pos:end="673:49"><name pos:start="673:33" pos:end="673:37">avctx</name><operator pos:start="673:38" pos:end="673:39">-&gt;</operator><name pos:start="673:40" pos:end="673:49">sample_fmt</name></name> <operator pos:start="673:51" pos:end="673:52">!=</operator> <name pos:start="673:54" pos:end="673:70">AV_SAMPLE_FMT_FLT</name></expr>)</condition><block pos:start="673:72" pos:end="687:9">{<block_content pos:start="675:13" pos:end="685:13">

            <decl_stmt pos:start="675:13" pos:end="675:62"><decl pos:start="675:13" pos:end="675:61"><type pos:start="675:13" pos:end="675:21"><specifier pos:start="675:13" pos:end="675:17">const</specifier> <name pos:start="675:19" pos:end="675:21">int</name></type> <name pos:start="675:23" pos:end="675:26">size</name> <init pos:start="675:28" pos:end="675:61">= <expr pos:start="675:30" pos:end="675:61"><call pos:start="675:30" pos:end="675:61"><name pos:start="675:30" pos:end="675:42">get_bits_left</name><argument_list pos:start="675:43" pos:end="675:61">(<argument pos:start="675:44" pos:end="675:60"><expr pos:start="675:44" pos:end="675:60"><operator pos:start="675:44" pos:end="675:44">&amp;</operator><name pos:start="675:45" pos:end="675:60"><name pos:start="675:45" pos:end="675:45">s</name><operator pos:start="675:46" pos:end="675:47">-&gt;</operator><name pos:start="675:48" pos:end="675:60">gb_extra_bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="677:13" pos:end="677:74"><decl pos:start="677:13" pos:end="677:73"><type pos:start="677:13" pos:end="677:21"><specifier pos:start="677:13" pos:end="677:17">const</specifier> <name pos:start="677:19" pos:end="677:21">int</name></type> <name pos:start="677:23" pos:end="677:28">wanted</name> <init pos:start="677:30" pos:end="677:73">= <expr pos:start="677:32" pos:end="677:73"><name pos:start="677:32" pos:end="677:41"><name pos:start="677:32" pos:end="677:32">s</name><operator pos:start="677:33" pos:end="677:34">-&gt;</operator><name pos:start="677:35" pos:end="677:41">samples</name></name> <operator pos:start="677:43" pos:end="677:43">*</operator> <name pos:start="677:45" pos:end="677:57"><name pos:start="677:45" pos:end="677:45">s</name><operator pos:start="677:46" pos:end="677:47">-&gt;</operator><name pos:start="677:48" pos:end="677:57">extra_bits</name></name> <operator pos:start="677:59" pos:end="677:60">&lt;&lt;</operator> <name pos:start="677:62" pos:end="677:73"><name pos:start="677:62" pos:end="677:62">s</name><operator pos:start="677:63" pos:end="677:64">-&gt;</operator><name pos:start="677:65" pos:end="677:73">stereo_in</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="679:13" pos:end="685:13"><if pos:start="679:13" pos:end="685:13">if<condition pos:start="679:15" pos:end="679:29">(<expr pos:start="679:16" pos:end="679:28"><name pos:start="679:16" pos:end="679:19">size</name> <operator pos:start="679:21" pos:end="679:21">&lt;</operator> <name pos:start="679:23" pos:end="679:28">wanted</name></expr>)</condition><block pos:start="679:30" pos:end="685:13">{<block_content pos:start="681:17" pos:end="683:38">

                <expr_stmt pos:start="681:17" pos:end="681:69"><expr pos:start="681:17" pos:end="681:68"><call pos:start="681:17" pos:end="681:68"><name pos:start="681:17" pos:end="681:22">av_log</name><argument_list pos:start="681:23" pos:end="681:68">(<argument pos:start="681:24" pos:end="681:28"><expr pos:start="681:24" pos:end="681:28"><name pos:start="681:24" pos:end="681:28">avctx</name></expr></argument>, <argument pos:start="681:31" pos:end="681:42"><expr pos:start="681:31" pos:end="681:42"><name pos:start="681:31" pos:end="681:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="681:45" pos:end="681:67"><expr pos:start="681:45" pos:end="681:67"><literal type="string" pos:start="681:45" pos:end="681:67">"Too small EXTRABITS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="683:17" pos:end="683:38"><expr pos:start="683:17" pos:end="683:37"><name pos:start="683:17" pos:end="683:33"><name pos:start="683:17" pos:end="683:17">s</name><operator pos:start="683:18" pos:end="683:19">-&gt;</operator><name pos:start="683:20" pos:end="683:33">got_extra_bits</name></name> <operator pos:start="683:35" pos:end="683:35">=</operator> <literal type="number" pos:start="683:37" pos:end="683:37">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="689:9" pos:end="689:37"><expr pos:start="689:9" pos:end="689:36"><name pos:start="689:9" pos:end="689:23"><name pos:start="689:9" pos:end="689:9">s</name><operator pos:start="689:10" pos:end="689:11">-&gt;</operator><name pos:start="689:12" pos:end="689:23">samples_left</name></name> <operator pos:start="689:25" pos:end="689:25">=</operator> <name pos:start="689:27" pos:end="689:36"><name pos:start="689:27" pos:end="689:27">s</name><operator pos:start="689:28" pos:end="689:29">-&gt;</operator><name pos:start="689:30" pos:end="689:36">samples</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="691:6" pos:end="707:5">else<block pos:start="691:10" pos:end="707:5">{<block_content pos:start="693:9" pos:end="705:9">

        <expr_stmt pos:start="693:9" pos:end="693:67"><expr pos:start="693:9" pos:end="693:66"><call pos:start="693:9" pos:end="693:66"><name pos:start="693:9" pos:end="693:21">init_get_bits</name><argument_list pos:start="693:22" pos:end="693:66">(<argument pos:start="693:23" pos:end="693:28"><expr pos:start="693:23" pos:end="693:28"><operator pos:start="693:23" pos:end="693:23">&amp;</operator><name pos:start="693:24" pos:end="693:28"><name pos:start="693:24" pos:end="693:24">s</name><operator pos:start="693:25" pos:end="693:26">-&gt;</operator><name pos:start="693:27" pos:end="693:28">gb</name></name></expr></argument>, <argument pos:start="693:31" pos:end="693:53"><expr pos:start="693:31" pos:end="693:53"><name pos:start="693:31" pos:end="693:38">orig_buf</name> <operator pos:start="693:40" pos:end="693:40">+</operator> <name pos:start="693:42" pos:end="693:53"><name pos:start="693:42" pos:end="693:42">s</name><operator pos:start="693:43" pos:end="693:44">-&gt;</operator><name pos:start="693:45" pos:end="693:46">sc</name><operator pos:start="693:47" pos:end="693:47">.</operator><name pos:start="693:48" pos:end="693:53">offset</name></name></expr></argument>, <argument pos:start="693:56" pos:end="693:65"><expr pos:start="693:56" pos:end="693:65"><name pos:start="693:56" pos:end="693:65"><name pos:start="693:56" pos:end="693:56">s</name><operator pos:start="693:57" pos:end="693:58">-&gt;</operator><name pos:start="693:59" pos:end="693:60">sc</name><operator pos:start="693:61" pos:end="693:61">.</operator><name pos:start="693:62" pos:end="693:65">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="695:9" pos:end="695:48"><expr pos:start="695:9" pos:end="695:47"><call pos:start="695:9" pos:end="695:47"><name pos:start="695:9" pos:end="695:22">skip_bits_long</name><argument_list pos:start="695:23" pos:end="695:47">(<argument pos:start="695:24" pos:end="695:29"><expr pos:start="695:24" pos:end="695:29"><operator pos:start="695:24" pos:end="695:24">&amp;</operator><name pos:start="695:25" pos:end="695:29"><name pos:start="695:25" pos:end="695:25">s</name><operator pos:start="695:26" pos:end="695:27">-&gt;</operator><name pos:start="695:28" pos:end="695:29">gb</name></name></expr></argument>, <argument pos:start="695:32" pos:end="695:46"><expr pos:start="695:32" pos:end="695:46"><name pos:start="695:32" pos:end="695:46"><name pos:start="695:32" pos:end="695:32">s</name><operator pos:start="695:33" pos:end="695:34">-&gt;</operator><name pos:start="695:35" pos:end="695:36">sc</name><operator pos:start="695:37" pos:end="695:37">.</operator><name pos:start="695:38" pos:end="695:46">bits_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="697:9" pos:end="705:9"><if pos:start="697:9" pos:end="705:9">if<condition pos:start="697:11" pos:end="697:29">(<expr pos:start="697:12" pos:end="697:28"><name pos:start="697:12" pos:end="697:28"><name pos:start="697:12" pos:end="697:12">s</name><operator pos:start="697:13" pos:end="697:14">-&gt;</operator><name pos:start="697:15" pos:end="697:28">got_extra_bits</name></name></expr>)</condition><block pos:start="697:30" pos:end="705:9">{<block_content pos:start="699:13" pos:end="703:69">

            <expr_stmt pos:start="699:13" pos:end="701:44"><expr pos:start="699:13" pos:end="701:43"><call pos:start="699:13" pos:end="701:43"><name pos:start="699:13" pos:end="699:25">init_get_bits</name><argument_list pos:start="699:26" pos:end="701:43">(<argument pos:start="699:27" pos:end="699:43"><expr pos:start="699:27" pos:end="699:43"><operator pos:start="699:27" pos:end="699:27">&amp;</operator><name pos:start="699:28" pos:end="699:43"><name pos:start="699:28" pos:end="699:28">s</name><operator pos:start="699:29" pos:end="699:30">-&gt;</operator><name pos:start="699:31" pos:end="699:43">gb_extra_bits</name></name></expr></argument>, <argument pos:start="699:46" pos:end="699:74"><expr pos:start="699:46" pos:end="699:74"><name pos:start="699:46" pos:end="699:53">orig_buf</name> <operator pos:start="699:55" pos:end="699:55">+</operator> <name pos:start="699:57" pos:end="699:74"><name pos:start="699:57" pos:end="699:57">s</name><operator pos:start="699:58" pos:end="699:59">-&gt;</operator><name pos:start="699:60" pos:end="699:67">extra_sc</name><operator pos:start="699:68" pos:end="699:68">.</operator><name pos:start="699:69" pos:end="699:74">offset</name></name></expr></argument>,

                          <argument pos:start="701:27" pos:end="701:42"><expr pos:start="701:27" pos:end="701:42"><name pos:start="701:27" pos:end="701:42"><name pos:start="701:27" pos:end="701:27">s</name><operator pos:start="701:28" pos:end="701:29">-&gt;</operator><name pos:start="701:30" pos:end="701:37">extra_sc</name><operator pos:start="701:38" pos:end="701:38">.</operator><name pos:start="701:39" pos:end="701:42">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:69"><expr pos:start="703:13" pos:end="703:68"><call pos:start="703:13" pos:end="703:68"><name pos:start="703:13" pos:end="703:26">skip_bits_long</name><argument_list pos:start="703:27" pos:end="703:68">(<argument pos:start="703:28" pos:end="703:44"><expr pos:start="703:28" pos:end="703:44"><operator pos:start="703:28" pos:end="703:28">&amp;</operator><name pos:start="703:29" pos:end="703:44"><name pos:start="703:29" pos:end="703:29">s</name><operator pos:start="703:30" pos:end="703:31">-&gt;</operator><name pos:start="703:32" pos:end="703:44">gb_extra_bits</name></name></expr></argument>, <argument pos:start="703:47" pos:end="703:67"><expr pos:start="703:47" pos:end="703:67"><name pos:start="703:47" pos:end="703:67"><name pos:start="703:47" pos:end="703:47">s</name><operator pos:start="703:48" pos:end="703:49">-&gt;</operator><name pos:start="703:50" pos:end="703:57">extra_sc</name><operator pos:start="703:58" pos:end="703:58">.</operator><name pos:start="703:59" pos:end="703:67">bits_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="711:5" pos:end="803:5"><if pos:start="711:5" pos:end="727:5">if<condition pos:start="711:7" pos:end="711:20">(<expr pos:start="711:8" pos:end="711:19"><name pos:start="711:8" pos:end="711:19"><name pos:start="711:8" pos:end="711:8">s</name><operator pos:start="711:9" pos:end="711:10">-&gt;</operator><name pos:start="711:11" pos:end="711:19">stereo_in</name></name></expr>)</condition><block pos:start="711:21" pos:end="727:5">{<block_content pos:start="713:9" pos:end="725:26">

        <if_stmt pos:start="713:9" pos:end="723:82"><if pos:start="713:9" pos:end="715:82">if<condition pos:start="713:11" pos:end="713:50">(<expr pos:start="713:12" pos:end="713:49"><name pos:start="713:12" pos:end="713:28"><name pos:start="713:12" pos:end="713:16">avctx</name><operator pos:start="713:17" pos:end="713:18">-&gt;</operator><name pos:start="713:19" pos:end="713:28">sample_fmt</name></name> <operator pos:start="713:30" pos:end="713:31">==</operator> <name pos:start="713:33" pos:end="713:49">AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo" pos:start="715:13" pos:end="715:82"><block_content pos:start="715:13" pos:end="715:82">

            <expr_stmt pos:start="715:13" pos:end="715:82"><expr pos:start="715:13" pos:end="715:81"><name pos:start="715:13" pos:end="715:23">samplecount</name> <operator pos:start="715:25" pos:end="715:25">=</operator> <call pos:start="715:27" pos:end="715:81"><name pos:start="715:27" pos:end="715:42">wv_unpack_stereo</name><argument_list pos:start="715:43" pos:end="715:81">(<argument pos:start="715:44" pos:end="715:44"><expr pos:start="715:44" pos:end="715:44"><name pos:start="715:44" pos:end="715:44">s</name></expr></argument>, <argument pos:start="715:47" pos:end="715:52"><expr pos:start="715:47" pos:end="715:52"><operator pos:start="715:47" pos:end="715:47">&amp;</operator><name pos:start="715:48" pos:end="715:52"><name pos:start="715:48" pos:end="715:48">s</name><operator pos:start="715:49" pos:end="715:50">-&gt;</operator><name pos:start="715:51" pos:end="715:52">gb</name></name></expr></argument>, <argument pos:start="715:55" pos:end="715:61"><expr pos:start="715:55" pos:end="715:61"><name pos:start="715:55" pos:end="715:61">samples</name></expr></argument>, <argument pos:start="715:64" pos:end="715:80"><expr pos:start="715:64" pos:end="715:80"><name pos:start="715:64" pos:end="715:80">AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="717:9" pos:end="719:82">else if<condition pos:start="717:16" pos:end="717:55">(<expr pos:start="717:17" pos:end="717:54"><name pos:start="717:17" pos:end="717:33"><name pos:start="717:17" pos:end="717:21">avctx</name><operator pos:start="717:22" pos:end="717:23">-&gt;</operator><name pos:start="717:24" pos:end="717:33">sample_fmt</name></name> <operator pos:start="717:35" pos:end="717:36">==</operator> <name pos:start="717:38" pos:end="717:54">AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo" pos:start="719:13" pos:end="719:82"><block_content pos:start="719:13" pos:end="719:82">

            <expr_stmt pos:start="719:13" pos:end="719:82"><expr pos:start="719:13" pos:end="719:81"><name pos:start="719:13" pos:end="719:23">samplecount</name> <operator pos:start="719:25" pos:end="719:25">=</operator> <call pos:start="719:27" pos:end="719:81"><name pos:start="719:27" pos:end="719:42">wv_unpack_stereo</name><argument_list pos:start="719:43" pos:end="719:81">(<argument pos:start="719:44" pos:end="719:44"><expr pos:start="719:44" pos:end="719:44"><name pos:start="719:44" pos:end="719:44">s</name></expr></argument>, <argument pos:start="719:47" pos:end="719:52"><expr pos:start="719:47" pos:end="719:52"><operator pos:start="719:47" pos:end="719:47">&amp;</operator><name pos:start="719:48" pos:end="719:52"><name pos:start="719:48" pos:end="719:48">s</name><operator pos:start="719:49" pos:end="719:50">-&gt;</operator><name pos:start="719:51" pos:end="719:52">gb</name></name></expr></argument>, <argument pos:start="719:55" pos:end="719:61"><expr pos:start="719:55" pos:end="719:61"><name pos:start="719:55" pos:end="719:61">samples</name></expr></argument>, <argument pos:start="719:64" pos:end="719:80"><expr pos:start="719:64" pos:end="719:80"><name pos:start="719:64" pos:end="719:80">AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="721:9" pos:end="723:82">else<block type="pseudo" pos:start="723:13" pos:end="723:82"><block_content pos:start="723:13" pos:end="723:82">

            <expr_stmt pos:start="723:13" pos:end="723:82"><expr pos:start="723:13" pos:end="723:81"><name pos:start="723:13" pos:end="723:23">samplecount</name> <operator pos:start="723:25" pos:end="723:25">=</operator> <call pos:start="723:27" pos:end="723:81"><name pos:start="723:27" pos:end="723:42">wv_unpack_stereo</name><argument_list pos:start="723:43" pos:end="723:81">(<argument pos:start="723:44" pos:end="723:44"><expr pos:start="723:44" pos:end="723:44"><name pos:start="723:44" pos:end="723:44">s</name></expr></argument>, <argument pos:start="723:47" pos:end="723:52"><expr pos:start="723:47" pos:end="723:52"><operator pos:start="723:47" pos:end="723:47">&amp;</operator><name pos:start="723:48" pos:end="723:52"><name pos:start="723:48" pos:end="723:48">s</name><operator pos:start="723:49" pos:end="723:50">-&gt;</operator><name pos:start="723:51" pos:end="723:52">gb</name></name></expr></argument>, <argument pos:start="723:55" pos:end="723:61"><expr pos:start="723:55" pos:end="723:61"><name pos:start="723:55" pos:end="723:61">samples</name></expr></argument>, <argument pos:start="723:64" pos:end="723:80"><expr pos:start="723:64" pos:end="723:80"><name pos:start="723:64" pos:end="723:80">AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="725:9" pos:end="725:26"><expr pos:start="725:9" pos:end="725:25"><name pos:start="725:9" pos:end="725:19">samplecount</name> <operator pos:start="725:21" pos:end="725:23">&gt;&gt;=</operator> <literal type="number" pos:start="725:25" pos:end="725:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="727:6" pos:end="803:5">else<block pos:start="727:10" pos:end="803:5">{<block_content pos:start="729:9" pos:end="801:9">

        <decl_stmt pos:start="729:9" pos:end="729:51"><decl pos:start="729:9" pos:end="729:50"><type pos:start="729:9" pos:end="729:17"><specifier pos:start="729:9" pos:end="729:13">const</specifier> <name pos:start="729:15" pos:end="729:17">int</name></type> <name pos:start="729:19" pos:end="729:32">channel_stride</name> <init pos:start="729:34" pos:end="729:50">= <expr pos:start="729:36" pos:end="729:50"><name pos:start="729:36" pos:end="729:50"><name pos:start="729:36" pos:end="729:40">avctx</name><operator pos:start="729:41" pos:end="729:42">-&gt;</operator><name pos:start="729:43" pos:end="729:50">channels</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="733:9" pos:end="743:80"><if pos:start="733:9" pos:end="735:80">if<condition pos:start="733:11" pos:end="733:50">(<expr pos:start="733:12" pos:end="733:49"><name pos:start="733:12" pos:end="733:28"><name pos:start="733:12" pos:end="733:16">avctx</name><operator pos:start="733:17" pos:end="733:18">-&gt;</operator><name pos:start="733:19" pos:end="733:28">sample_fmt</name></name> <operator pos:start="733:30" pos:end="733:31">==</operator> <name pos:start="733:33" pos:end="733:49">AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo" pos:start="735:13" pos:end="735:80"><block_content pos:start="735:13" pos:end="735:80">

            <expr_stmt pos:start="735:13" pos:end="735:80"><expr pos:start="735:13" pos:end="735:79"><name pos:start="735:13" pos:end="735:23">samplecount</name> <operator pos:start="735:25" pos:end="735:25">=</operator> <call pos:start="735:27" pos:end="735:79"><name pos:start="735:27" pos:end="735:40">wv_unpack_mono</name><argument_list pos:start="735:41" pos:end="735:79">(<argument pos:start="735:42" pos:end="735:42"><expr pos:start="735:42" pos:end="735:42"><name pos:start="735:42" pos:end="735:42">s</name></expr></argument>, <argument pos:start="735:45" pos:end="735:50"><expr pos:start="735:45" pos:end="735:50"><operator pos:start="735:45" pos:end="735:45">&amp;</operator><name pos:start="735:46" pos:end="735:50"><name pos:start="735:46" pos:end="735:46">s</name><operator pos:start="735:47" pos:end="735:48">-&gt;</operator><name pos:start="735:49" pos:end="735:50">gb</name></name></expr></argument>, <argument pos:start="735:53" pos:end="735:59"><expr pos:start="735:53" pos:end="735:59"><name pos:start="735:53" pos:end="735:59">samples</name></expr></argument>, <argument pos:start="735:62" pos:end="735:78"><expr pos:start="735:62" pos:end="735:78"><name pos:start="735:62" pos:end="735:78">AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="737:9" pos:end="739:80">else if<condition pos:start="737:16" pos:end="737:55">(<expr pos:start="737:17" pos:end="737:54"><name pos:start="737:17" pos:end="737:33"><name pos:start="737:17" pos:end="737:21">avctx</name><operator pos:start="737:22" pos:end="737:23">-&gt;</operator><name pos:start="737:24" pos:end="737:33">sample_fmt</name></name> <operator pos:start="737:35" pos:end="737:36">==</operator> <name pos:start="737:38" pos:end="737:54">AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo" pos:start="739:13" pos:end="739:80"><block_content pos:start="739:13" pos:end="739:80">

            <expr_stmt pos:start="739:13" pos:end="739:80"><expr pos:start="739:13" pos:end="739:79"><name pos:start="739:13" pos:end="739:23">samplecount</name> <operator pos:start="739:25" pos:end="739:25">=</operator> <call pos:start="739:27" pos:end="739:79"><name pos:start="739:27" pos:end="739:40">wv_unpack_mono</name><argument_list pos:start="739:41" pos:end="739:79">(<argument pos:start="739:42" pos:end="739:42"><expr pos:start="739:42" pos:end="739:42"><name pos:start="739:42" pos:end="739:42">s</name></expr></argument>, <argument pos:start="739:45" pos:end="739:50"><expr pos:start="739:45" pos:end="739:50"><operator pos:start="739:45" pos:end="739:45">&amp;</operator><name pos:start="739:46" pos:end="739:50"><name pos:start="739:46" pos:end="739:46">s</name><operator pos:start="739:47" pos:end="739:48">-&gt;</operator><name pos:start="739:49" pos:end="739:50">gb</name></name></expr></argument>, <argument pos:start="739:53" pos:end="739:59"><expr pos:start="739:53" pos:end="739:59"><name pos:start="739:53" pos:end="739:59">samples</name></expr></argument>, <argument pos:start="739:62" pos:end="739:78"><expr pos:start="739:62" pos:end="739:78"><name pos:start="739:62" pos:end="739:78">AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="741:9" pos:end="743:80">else<block type="pseudo" pos:start="743:13" pos:end="743:80"><block_content pos:start="743:13" pos:end="743:80">

            <expr_stmt pos:start="743:13" pos:end="743:80"><expr pos:start="743:13" pos:end="743:79"><name pos:start="743:13" pos:end="743:23">samplecount</name> <operator pos:start="743:25" pos:end="743:25">=</operator> <call pos:start="743:27" pos:end="743:79"><name pos:start="743:27" pos:end="743:40">wv_unpack_mono</name><argument_list pos:start="743:41" pos:end="743:79">(<argument pos:start="743:42" pos:end="743:42"><expr pos:start="743:42" pos:end="743:42"><name pos:start="743:42" pos:end="743:42">s</name></expr></argument>, <argument pos:start="743:45" pos:end="743:50"><expr pos:start="743:45" pos:end="743:50"><operator pos:start="743:45" pos:end="743:45">&amp;</operator><name pos:start="743:46" pos:end="743:50"><name pos:start="743:46" pos:end="743:46">s</name><operator pos:start="743:47" pos:end="743:48">-&gt;</operator><name pos:start="743:49" pos:end="743:50">gb</name></name></expr></argument>, <argument pos:start="743:53" pos:end="743:59"><expr pos:start="743:53" pos:end="743:59"><name pos:start="743:53" pos:end="743:59">samples</name></expr></argument>, <argument pos:start="743:62" pos:end="743:78"><expr pos:start="743:62" pos:end="743:78"><name pos:start="743:62" pos:end="743:78">AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="747:9" pos:end="801:9"><if pos:start="747:9" pos:end="765:9">if<condition pos:start="747:11" pos:end="747:63">(<expr pos:start="747:12" pos:end="747:62"><name pos:start="747:12" pos:end="747:20"><name pos:start="747:12" pos:end="747:12">s</name><operator pos:start="747:13" pos:end="747:14">-&gt;</operator><name pos:start="747:15" pos:end="747:20">stereo</name></name> <operator pos:start="747:22" pos:end="747:23">&amp;&amp;</operator> <name pos:start="747:25" pos:end="747:41"><name pos:start="747:25" pos:end="747:29">avctx</name><operator pos:start="747:30" pos:end="747:31">-&gt;</operator><name pos:start="747:32" pos:end="747:41">sample_fmt</name></name> <operator pos:start="747:43" pos:end="747:44">==</operator> <name pos:start="747:46" pos:end="747:62">AV_SAMPLE_FMT_S16</name></expr>)</condition><block pos:start="747:64" pos:end="765:9">{<block_content pos:start="749:13" pos:end="763:13">

            <decl_stmt pos:start="749:13" pos:end="749:49"><decl pos:start="749:13" pos:end="749:48"><type pos:start="749:13" pos:end="749:21"><name pos:start="749:13" pos:end="749:19">int16_t</name> <modifier pos:start="749:21" pos:end="749:21">*</modifier></type><name pos:start="749:22" pos:end="749:24">dst</name> <init pos:start="749:26" pos:end="749:48">= <expr pos:start="749:28" pos:end="749:48"><operator pos:start="749:28" pos:end="749:28">(</operator><name pos:start="749:29" pos:end="749:35">int16_t</name><operator pos:start="749:36" pos:end="749:36">*</operator><operator pos:start="749:37" pos:end="749:37">)</operator><name pos:start="749:38" pos:end="749:44">samples</name> <operator pos:start="749:46" pos:end="749:46">+</operator> <literal type="number" pos:start="749:48" pos:end="749:48">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="751:13" pos:end="751:45"><decl pos:start="751:13" pos:end="751:44"><type pos:start="751:13" pos:end="751:21"><name pos:start="751:13" pos:end="751:19">int16_t</name> <modifier pos:start="751:21" pos:end="751:21">*</modifier></type><name pos:start="751:22" pos:end="751:24">src</name> <init pos:start="751:26" pos:end="751:44">= <expr pos:start="751:28" pos:end="751:44"><operator pos:start="751:28" pos:end="751:28">(</operator><name pos:start="751:29" pos:end="751:35">int16_t</name><operator pos:start="751:36" pos:end="751:36">*</operator><operator pos:start="751:37" pos:end="751:37">)</operator><name pos:start="751:38" pos:end="751:44">samples</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="753:13" pos:end="753:34"><decl pos:start="753:13" pos:end="753:33"><type pos:start="753:13" pos:end="753:15"><name pos:start="753:13" pos:end="753:15">int</name></type> <name pos:start="753:17" pos:end="753:19">cnt</name> <init pos:start="753:21" pos:end="753:33">= <expr pos:start="753:23" pos:end="753:33"><name pos:start="753:23" pos:end="753:33">samplecount</name></expr></init></decl>;</decl_stmt>

            <while pos:start="755:13" pos:end="763:13">while<condition pos:start="755:18" pos:end="755:24">(<expr pos:start="755:19" pos:end="755:23"><name pos:start="755:19" pos:end="755:21">cnt</name><operator pos:start="755:22" pos:end="755:23">--</operator></expr>)</condition><block pos:start="755:25" pos:end="763:13">{<block_content pos:start="757:17" pos:end="761:38">

                <expr_stmt pos:start="757:17" pos:end="757:28"><expr pos:start="757:17" pos:end="757:27"><operator pos:start="757:17" pos:end="757:17">*</operator><name pos:start="757:18" pos:end="757:20">dst</name> <operator pos:start="757:22" pos:end="757:22">=</operator> <operator pos:start="757:24" pos:end="757:24">*</operator><name pos:start="757:25" pos:end="757:27">src</name></expr>;</expr_stmt>

                <expr_stmt pos:start="759:17" pos:end="759:38"><expr pos:start="759:17" pos:end="759:37"><name pos:start="759:17" pos:end="759:19">src</name> <operator pos:start="759:21" pos:end="759:22">+=</operator> <name pos:start="759:24" pos:end="759:37">channel_stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="761:17" pos:end="761:38"><expr pos:start="761:17" pos:end="761:37"><name pos:start="761:17" pos:end="761:19">dst</name> <operator pos:start="761:21" pos:end="761:22">+=</operator> <name pos:start="761:24" pos:end="761:37">channel_stride</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if><if type="elseif" pos:start="765:10" pos:end="783:9">else if<condition pos:start="765:17" pos:end="765:69">(<expr pos:start="765:18" pos:end="765:68"><name pos:start="765:18" pos:end="765:26"><name pos:start="765:18" pos:end="765:18">s</name><operator pos:start="765:19" pos:end="765:20">-&gt;</operator><name pos:start="765:21" pos:end="765:26">stereo</name></name> <operator pos:start="765:28" pos:end="765:29">&amp;&amp;</operator> <name pos:start="765:31" pos:end="765:47"><name pos:start="765:31" pos:end="765:35">avctx</name><operator pos:start="765:36" pos:end="765:37">-&gt;</operator><name pos:start="765:38" pos:end="765:47">sample_fmt</name></name> <operator pos:start="765:49" pos:end="765:50">==</operator> <name pos:start="765:52" pos:end="765:68">AV_SAMPLE_FMT_S32</name></expr>)</condition><block pos:start="765:70" pos:end="783:9">{<block_content pos:start="767:13" pos:end="781:13">

            <decl_stmt pos:start="767:13" pos:end="767:49"><decl pos:start="767:13" pos:end="767:48"><type pos:start="767:13" pos:end="767:21"><name pos:start="767:13" pos:end="767:19">int32_t</name> <modifier pos:start="767:21" pos:end="767:21">*</modifier></type><name pos:start="767:22" pos:end="767:24">dst</name> <init pos:start="767:26" pos:end="767:48">= <expr pos:start="767:28" pos:end="767:48"><operator pos:start="767:28" pos:end="767:28">(</operator><name pos:start="767:29" pos:end="767:35">int32_t</name><operator pos:start="767:36" pos:end="767:36">*</operator><operator pos:start="767:37" pos:end="767:37">)</operator><name pos:start="767:38" pos:end="767:44">samples</name> <operator pos:start="767:46" pos:end="767:46">+</operator> <literal type="number" pos:start="767:48" pos:end="767:48">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="769:13" pos:end="769:45"><decl pos:start="769:13" pos:end="769:44"><type pos:start="769:13" pos:end="769:21"><name pos:start="769:13" pos:end="769:19">int32_t</name> <modifier pos:start="769:21" pos:end="769:21">*</modifier></type><name pos:start="769:22" pos:end="769:24">src</name> <init pos:start="769:26" pos:end="769:44">= <expr pos:start="769:28" pos:end="769:44"><operator pos:start="769:28" pos:end="769:28">(</operator><name pos:start="769:29" pos:end="769:35">int32_t</name><operator pos:start="769:36" pos:end="769:36">*</operator><operator pos:start="769:37" pos:end="769:37">)</operator><name pos:start="769:38" pos:end="769:44">samples</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="771:13" pos:end="771:34"><decl pos:start="771:13" pos:end="771:33"><type pos:start="771:13" pos:end="771:15"><name pos:start="771:13" pos:end="771:15">int</name></type> <name pos:start="771:17" pos:end="771:19">cnt</name> <init pos:start="771:21" pos:end="771:33">= <expr pos:start="771:23" pos:end="771:33"><name pos:start="771:23" pos:end="771:33">samplecount</name></expr></init></decl>;</decl_stmt>

            <while pos:start="773:13" pos:end="781:13">while<condition pos:start="773:18" pos:end="773:24">(<expr pos:start="773:19" pos:end="773:23"><name pos:start="773:19" pos:end="773:21">cnt</name><operator pos:start="773:22" pos:end="773:23">--</operator></expr>)</condition><block pos:start="773:25" pos:end="781:13">{<block_content pos:start="775:17" pos:end="779:38">

                <expr_stmt pos:start="775:17" pos:end="775:28"><expr pos:start="775:17" pos:end="775:27"><operator pos:start="775:17" pos:end="775:17">*</operator><name pos:start="775:18" pos:end="775:20">dst</name> <operator pos:start="775:22" pos:end="775:22">=</operator> <operator pos:start="775:24" pos:end="775:24">*</operator><name pos:start="775:25" pos:end="775:27">src</name></expr>;</expr_stmt>

                <expr_stmt pos:start="777:17" pos:end="777:38"><expr pos:start="777:17" pos:end="777:37"><name pos:start="777:17" pos:end="777:19">src</name> <operator pos:start="777:21" pos:end="777:22">+=</operator> <name pos:start="777:24" pos:end="777:37">channel_stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="779:17" pos:end="779:38"><expr pos:start="779:17" pos:end="779:37"><name pos:start="779:17" pos:end="779:19">dst</name> <operator pos:start="779:21" pos:end="779:22">+=</operator> <name pos:start="779:24" pos:end="779:37">channel_stride</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if><if type="elseif" pos:start="783:10" pos:end="801:9">else if<condition pos:start="783:17" pos:end="783:27">(<expr pos:start="783:18" pos:end="783:26"><name pos:start="783:18" pos:end="783:26"><name pos:start="783:18" pos:end="783:18">s</name><operator pos:start="783:19" pos:end="783:20">-&gt;</operator><name pos:start="783:21" pos:end="783:26">stereo</name></name></expr>)</condition><block pos:start="783:28" pos:end="801:9">{<block_content pos:start="785:13" pos:end="799:13">

            <decl_stmt pos:start="785:13" pos:end="785:45"><decl pos:start="785:13" pos:end="785:44"><type pos:start="785:13" pos:end="785:19"><name pos:start="785:13" pos:end="785:17">float</name> <modifier pos:start="785:19" pos:end="785:19">*</modifier></type><name pos:start="785:20" pos:end="785:22">dst</name> <init pos:start="785:24" pos:end="785:44">= <expr pos:start="785:26" pos:end="785:44"><operator pos:start="785:26" pos:end="785:26">(</operator><name pos:start="785:27" pos:end="785:31">float</name><operator pos:start="785:32" pos:end="785:32">*</operator><operator pos:start="785:33" pos:end="785:33">)</operator><name pos:start="785:34" pos:end="785:40">samples</name> <operator pos:start="785:42" pos:end="785:42">+</operator> <literal type="number" pos:start="785:44" pos:end="785:44">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="787:13" pos:end="787:41"><decl pos:start="787:13" pos:end="787:40"><type pos:start="787:13" pos:end="787:19"><name pos:start="787:13" pos:end="787:17">float</name> <modifier pos:start="787:19" pos:end="787:19">*</modifier></type><name pos:start="787:20" pos:end="787:22">src</name> <init pos:start="787:24" pos:end="787:40">= <expr pos:start="787:26" pos:end="787:40"><operator pos:start="787:26" pos:end="787:26">(</operator><name pos:start="787:27" pos:end="787:31">float</name><operator pos:start="787:32" pos:end="787:32">*</operator><operator pos:start="787:33" pos:end="787:33">)</operator><name pos:start="787:34" pos:end="787:40">samples</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="789:13" pos:end="789:34"><decl pos:start="789:13" pos:end="789:33"><type pos:start="789:13" pos:end="789:15"><name pos:start="789:13" pos:end="789:15">int</name></type> <name pos:start="789:17" pos:end="789:19">cnt</name> <init pos:start="789:21" pos:end="789:33">= <expr pos:start="789:23" pos:end="789:33"><name pos:start="789:23" pos:end="789:33">samplecount</name></expr></init></decl>;</decl_stmt>

            <while pos:start="791:13" pos:end="799:13">while<condition pos:start="791:18" pos:end="791:24">(<expr pos:start="791:19" pos:end="791:23"><name pos:start="791:19" pos:end="791:21">cnt</name><operator pos:start="791:22" pos:end="791:23">--</operator></expr>)</condition><block pos:start="791:25" pos:end="799:13">{<block_content pos:start="793:17" pos:end="797:38">

                <expr_stmt pos:start="793:17" pos:end="793:28"><expr pos:start="793:17" pos:end="793:27"><operator pos:start="793:17" pos:end="793:17">*</operator><name pos:start="793:18" pos:end="793:20">dst</name> <operator pos:start="793:22" pos:end="793:22">=</operator> <operator pos:start="793:24" pos:end="793:24">*</operator><name pos:start="793:25" pos:end="793:27">src</name></expr>;</expr_stmt>

                <expr_stmt pos:start="795:17" pos:end="795:38"><expr pos:start="795:17" pos:end="795:37"><name pos:start="795:17" pos:end="795:19">src</name> <operator pos:start="795:21" pos:end="795:22">+=</operator> <name pos:start="795:24" pos:end="795:37">channel_stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="797:17" pos:end="797:38"><expr pos:start="797:17" pos:end="797:37"><name pos:start="797:17" pos:end="797:19">dst</name> <operator pos:start="797:21" pos:end="797:22">+=</operator> <name pos:start="797:24" pos:end="797:37">channel_stride</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="807:5" pos:end="807:39"><expr pos:start="807:5" pos:end="807:38"><name pos:start="807:5" pos:end="807:20"><name pos:start="807:5" pos:end="807:6">wc</name><operator pos:start="807:7" pos:end="807:8">-&gt;</operator><name pos:start="807:9" pos:end="807:20">samples_left</name></name> <operator pos:start="807:22" pos:end="807:22">=</operator> <name pos:start="807:24" pos:end="807:38"><name pos:start="807:24" pos:end="807:24">s</name><operator pos:start="807:25" pos:end="807:26">-&gt;</operator><name pos:start="807:27" pos:end="807:38">samples_left</name></name></expr>;</expr_stmt>



    <return pos:start="811:5" pos:end="811:29">return <expr pos:start="811:12" pos:end="811:28"><name pos:start="811:12" pos:end="811:22">samplecount</name> <operator pos:start="811:24" pos:end="811:24">*</operator> <name pos:start="811:26" pos:end="811:28">bpp</name></expr>;</return>

</block_content>}</block></function>
</unit>
