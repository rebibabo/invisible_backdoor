<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6001.c" pos:tabs="8"><function pos:start="1:1" pos:end="62:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">bdrv_inactivate_all</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="62:1">{<block_content pos:start="5:5" pos:end="60:15">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name> <init pos:start="5:26" pos:end="5:31">= <expr pos:start="5:28" pos:end="5:31"><name pos:start="5:28" pos:end="5:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20">BdrvNextIterator</name></type> <name pos:start="7:22" pos:end="7:23">it</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">pass</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="19:5">for <control pos:start="15:9" pos:end="15:55">(<init pos:start="15:10" pos:end="15:30"><expr pos:start="15:10" pos:end="15:29"><name pos:start="15:10" pos:end="15:11">bs</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:29"><name pos:start="15:15" pos:end="15:24">bdrv_first</name><argument_list pos:start="15:25" pos:end="15:29">(<argument pos:start="15:26" pos:end="15:28"><expr pos:start="15:26" pos:end="15:28"><operator pos:start="15:26" pos:end="15:26">&amp;</operator><name pos:start="15:27" pos:end="15:28">it</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="15:32" pos:end="15:34"><expr pos:start="15:32" pos:end="15:33"><name pos:start="15:32" pos:end="15:33">bs</name></expr>;</condition> <incr pos:start="15:36" pos:end="15:54"><expr pos:start="15:36" pos:end="15:54"><name pos:start="15:36" pos:end="15:37">bs</name> <operator pos:start="15:39" pos:end="15:39">=</operator> <call pos:start="15:41" pos:end="15:54"><name pos:start="15:41" pos:end="15:49">bdrv_next</name><argument_list pos:start="15:50" pos:end="15:54">(<argument pos:start="15:51" pos:end="15:53"><expr pos:start="15:51" pos:end="15:53"><operator pos:start="15:51" pos:end="15:51">&amp;</operator><name pos:start="15:52" pos:end="15:53">it</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="15:57" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:54">

        <expr_stmt pos:start="17:9" pos:end="17:54"><expr pos:start="17:9" pos:end="17:53"><call pos:start="17:9" pos:end="17:53"><name pos:start="17:9" pos:end="17:27">aio_context_acquire</name><argument_list pos:start="17:28" pos:end="17:53">(<argument pos:start="17:29" pos:end="17:52"><expr pos:start="17:29" pos:end="17:52"><call pos:start="17:29" pos:end="17:52"><name pos:start="17:29" pos:end="17:48">bdrv_get_aio_context</name><argument_list pos:start="17:49" pos:end="17:52">(<argument pos:start="17:50" pos:end="17:51"><expr pos:start="17:50" pos:end="17:51"><name pos:start="17:50" pos:end="17:51">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="23:5" pos:end="29:21">/* We do two passes of inactivation. The first pass calls to drivers'

     * .bdrv_inactivate callbacks recursively so all cache is flushed to disk;

     * the second pass sets the BDRV_O_INACTIVE flag so that no further write

     * is allowed. */</comment>

    <for pos:start="31:5" pos:end="46:5">for <control pos:start="31:9" pos:end="31:36">(<init pos:start="31:10" pos:end="31:18"><expr pos:start="31:10" pos:end="31:17"><name pos:start="31:10" pos:end="31:13">pass</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr>;</init> <condition pos:start="31:20" pos:end="31:28"><expr pos:start="31:20" pos:end="31:27"><name pos:start="31:20" pos:end="31:23">pass</name> <operator pos:start="31:25" pos:end="31:25">&lt;</operator> <literal type="number" pos:start="31:27" pos:end="31:27">2</literal></expr>;</condition> <incr pos:start="31:30" pos:end="31:35"><expr pos:start="31:30" pos:end="31:35"><name pos:start="31:30" pos:end="31:33">pass</name><operator pos:start="31:34" pos:end="31:35">++</operator></expr></incr>)</control> <block pos:start="31:38" pos:end="46:5">{<block_content pos:start="33:9" pos:end="44:9">

        <for pos:start="33:9" pos:end="44:9">for <control pos:start="33:13" pos:end="33:59">(<init pos:start="33:14" pos:end="33:34"><expr pos:start="33:14" pos:end="33:33"><name pos:start="33:14" pos:end="33:15">bs</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:33"><name pos:start="33:19" pos:end="33:28">bdrv_first</name><argument_list pos:start="33:29" pos:end="33:33">(<argument pos:start="33:30" pos:end="33:32"><expr pos:start="33:30" pos:end="33:32"><operator pos:start="33:30" pos:end="33:30">&amp;</operator><name pos:start="33:31" pos:end="33:32">it</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="33:36" pos:end="33:38"><expr pos:start="33:36" pos:end="33:37"><name pos:start="33:36" pos:end="33:37">bs</name></expr>;</condition> <incr pos:start="33:40" pos:end="33:58"><expr pos:start="33:40" pos:end="33:58"><name pos:start="33:40" pos:end="33:41">bs</name> <operator pos:start="33:43" pos:end="33:43">=</operator> <call pos:start="33:45" pos:end="33:58"><name pos:start="33:45" pos:end="33:53">bdrv_next</name><argument_list pos:start="33:54" pos:end="33:58">(<argument pos:start="33:55" pos:end="33:57"><expr pos:start="33:55" pos:end="33:57"><operator pos:start="33:55" pos:end="33:55">&amp;</operator><name pos:start="33:56" pos:end="33:57">it</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="33:61" pos:end="44:9">{<block_content pos:start="35:13" pos:end="42:13">

            <expr_stmt pos:start="35:13" pos:end="35:52"><expr pos:start="35:13" pos:end="35:51"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:51"><name pos:start="35:19" pos:end="35:41">bdrv_inactivate_recurse</name><argument_list pos:start="35:42" pos:end="35:51">(<argument pos:start="35:43" pos:end="35:44"><expr pos:start="35:43" pos:end="35:44"><name pos:start="35:43" pos:end="35:44">bs</name></expr></argument>, <argument pos:start="35:47" pos:end="35:50"><expr pos:start="35:47" pos:end="35:50"><name pos:start="35:47" pos:end="35:50">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="42:13"><if pos:start="37:13" pos:end="42:13">if <condition pos:start="37:16" pos:end="37:24">(<expr pos:start="37:17" pos:end="37:23"><name pos:start="37:17" pos:end="37:19">ret</name> <operator pos:start="37:21" pos:end="37:21">&lt;</operator> <literal type="number" pos:start="37:23" pos:end="37:23">0</literal></expr>)</condition> <block pos:start="37:26" pos:end="42:13">{<block_content pos:start="40:17" pos:end="40:25">


                <goto pos:start="40:17" pos:end="40:25">goto <name pos:start="40:22" pos:end="40:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



<label pos:start="50:1" pos:end="50:4"><name pos:start="50:1" pos:end="50:3">out</name>:</label>

    <for pos:start="52:5" pos:end="56:5">for <control pos:start="52:9" pos:end="52:55">(<init pos:start="52:10" pos:end="52:30"><expr pos:start="52:10" pos:end="52:29"><name pos:start="52:10" pos:end="52:11">bs</name> <operator pos:start="52:13" pos:end="52:13">=</operator> <call pos:start="52:15" pos:end="52:29"><name pos:start="52:15" pos:end="52:24">bdrv_first</name><argument_list pos:start="52:25" pos:end="52:29">(<argument pos:start="52:26" pos:end="52:28"><expr pos:start="52:26" pos:end="52:28"><operator pos:start="52:26" pos:end="52:26">&amp;</operator><name pos:start="52:27" pos:end="52:28">it</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="52:32" pos:end="52:34"><expr pos:start="52:32" pos:end="52:33"><name pos:start="52:32" pos:end="52:33">bs</name></expr>;</condition> <incr pos:start="52:36" pos:end="52:54"><expr pos:start="52:36" pos:end="52:54"><name pos:start="52:36" pos:end="52:37">bs</name> <operator pos:start="52:39" pos:end="52:39">=</operator> <call pos:start="52:41" pos:end="52:54"><name pos:start="52:41" pos:end="52:49">bdrv_next</name><argument_list pos:start="52:50" pos:end="52:54">(<argument pos:start="52:51" pos:end="52:53"><expr pos:start="52:51" pos:end="52:53"><operator pos:start="52:51" pos:end="52:51">&amp;</operator><name pos:start="52:52" pos:end="52:53">it</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="52:57" pos:end="56:5">{<block_content pos:start="54:9" pos:end="54:54">

        <expr_stmt pos:start="54:9" pos:end="54:54"><expr pos:start="54:9" pos:end="54:53"><call pos:start="54:9" pos:end="54:53"><name pos:start="54:9" pos:end="54:27">aio_context_release</name><argument_list pos:start="54:28" pos:end="54:53">(<argument pos:start="54:29" pos:end="54:52"><expr pos:start="54:29" pos:end="54:52"><call pos:start="54:29" pos:end="54:52"><name pos:start="54:29" pos:end="54:48">bdrv_get_aio_context</name><argument_list pos:start="54:49" pos:end="54:52">(<argument pos:start="54:50" pos:end="54:51"><expr pos:start="54:50" pos:end="54:51"><name pos:start="54:50" pos:end="54:51">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="60:5" pos:end="60:15">return <expr pos:start="60:12" pos:end="60:14"><name pos:start="60:12" pos:end="60:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
