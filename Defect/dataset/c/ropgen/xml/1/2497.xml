<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2497.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">tm2_read_stream</name><parameter_list pos:start="1:27" pos:end="1:78">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:37">TM2Context</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:77"><decl pos:start="1:65" pos:end="1:77"><type pos:start="1:65" pos:end="1:77"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:77">stream_id</name></decl></parameter>)</parameter_list> <block pos:start="1:80" pos:end="125:1">{<block_content pos:start="3:5" pos:end="123:16">

    <decl_stmt pos:start="3:5" pos:end="3:10"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">cur</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">skip</name> <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>, <decl pos:start="9:14" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:17">toks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TM2Codes</name></type> <name pos:start="11:14" pos:end="11:18">codes</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:37">/* get stream length in dwords */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:7">len</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:22"><name pos:start="17:11" pos:end="17:17">AV_RB32</name><argument_list pos:start="17:18" pos:end="17:22">(<argument pos:start="17:19" pos:end="17:21"><expr pos:start="17:19" pos:end="17:21"><name pos:start="17:19" pos:end="17:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="17:25" pos:end="17:33"><expr pos:start="17:25" pos:end="17:32"><name pos:start="17:25" pos:end="17:27">buf</name> <operator pos:start="17:29" pos:end="17:30">+=</operator> <literal type="number" pos:start="17:32" pos:end="17:32">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="17:35" pos:end="17:43"><expr pos:start="17:35" pos:end="17:42"><name pos:start="17:35" pos:end="17:37">cur</name> <operator pos:start="17:39" pos:end="17:40">+=</operator> <literal type="number" pos:start="17:42" pos:end="17:42">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:8">skip</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <name pos:start="19:12" pos:end="19:14">len</name> <operator pos:start="19:16" pos:end="19:16">*</operator> <literal type="number" pos:start="19:18" pos:end="19:20">4</literal> <operator pos:start="19:20" pos:end="19:20">+</operator> <literal type="number" pos:start="19:22" pos:end="19:22">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="25:17"><if pos:start="23:5" pos:end="25:17">if<condition pos:start="23:7" pos:end="23:16">(<expr pos:start="23:8" pos:end="23:15"><name pos:start="23:8" pos:end="23:10">len</name> <operator pos:start="23:12" pos:end="23:13">==</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:17"><block_content pos:start="25:9" pos:end="25:17">

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">4</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:8">toks</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:23"><name pos:start="29:12" pos:end="29:18">AV_RB32</name><argument_list pos:start="29:19" pos:end="29:23">(<argument pos:start="29:20" pos:end="29:22"><expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="29:26" pos:end="29:34"><expr pos:start="29:26" pos:end="29:33"><name pos:start="29:26" pos:end="29:28">buf</name> <operator pos:start="29:30" pos:end="29:31">+=</operator> <literal type="number" pos:start="29:33" pos:end="29:33">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="29:36" pos:end="29:44"><expr pos:start="29:36" pos:end="29:43"><name pos:start="29:36" pos:end="29:38">cur</name> <operator pos:start="29:40" pos:end="29:41">+=</operator> <literal type="number" pos:start="29:43" pos:end="29:43">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="55:5"><if pos:start="31:5" pos:end="55:5">if<condition pos:start="31:7" pos:end="31:16">(<expr pos:start="31:8" pos:end="31:15"><name pos:start="31:8" pos:end="31:11">toks</name> <operator pos:start="31:13" pos:end="31:13">&amp;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">1</literal></expr>)</condition> <block pos:start="31:18" pos:end="55:5">{<block_content pos:start="33:9" pos:end="53:9">

        <expr_stmt pos:start="33:9" pos:end="33:27"><expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:11">len</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:26"><name pos:start="33:15" pos:end="33:21">AV_RB32</name><argument_list pos:start="33:22" pos:end="33:26">(<argument pos:start="33:23" pos:end="33:25"><expr pos:start="33:23" pos:end="33:25"><name pos:start="33:23" pos:end="33:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="33:29" pos:end="33:37"><expr pos:start="33:29" pos:end="33:36"><name pos:start="33:29" pos:end="33:31">buf</name> <operator pos:start="33:33" pos:end="33:34">+=</operator> <literal type="number" pos:start="33:36" pos:end="33:36">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="33:39" pos:end="33:47"><expr pos:start="33:39" pos:end="33:46"><name pos:start="33:39" pos:end="33:41">cur</name> <operator pos:start="33:43" pos:end="33:44">+=</operator> <literal type="number" pos:start="33:46" pos:end="33:46">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if<condition pos:start="35:11" pos:end="35:29">(<expr pos:start="35:12" pos:end="35:28"><name pos:start="35:12" pos:end="35:14">len</name> <operator pos:start="35:16" pos:end="35:17">==</operator> <name pos:start="35:19" pos:end="35:28">TM2_ESCAPE</name></expr>)</condition> <block pos:start="35:31" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:51">

            <expr_stmt pos:start="37:13" pos:end="37:31"><expr pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:15">len</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:30"><name pos:start="37:19" pos:end="37:25">AV_RB32</name><argument_list pos:start="37:26" pos:end="37:30">(<argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="37:33" pos:end="37:41"><expr pos:start="37:33" pos:end="37:40"><name pos:start="37:33" pos:end="37:35">buf</name> <operator pos:start="37:37" pos:end="37:38">+=</operator> <literal type="number" pos:start="37:40" pos:end="37:40">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="37:43" pos:end="37:51"><expr pos:start="37:43" pos:end="37:50"><name pos:start="37:43" pos:end="37:45">cur</name> <operator pos:start="37:47" pos:end="37:48">+=</operator> <literal type="number" pos:start="37:50" pos:end="37:50">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="53:9"><if pos:start="41:9" pos:end="53:9">if<condition pos:start="41:11" pos:end="41:19">(<expr pos:start="41:12" pos:end="41:18"><name pos:start="41:12" pos:end="41:14">len</name> <operator pos:start="41:16" pos:end="41:16">&gt;</operator> <literal type="number" pos:start="41:18" pos:end="41:18">0</literal></expr>)</condition> <block pos:start="41:21" pos:end="53:9">{<block_content pos:start="43:13" pos:end="51:63">

            <expr_stmt pos:start="43:13" pos:end="43:59"><expr pos:start="43:13" pos:end="43:58"><call pos:start="43:13" pos:end="43:58"><name pos:start="43:13" pos:end="43:25">init_get_bits</name><argument_list pos:start="43:26" pos:end="43:58">(<argument pos:start="43:27" pos:end="43:34"><expr pos:start="43:27" pos:end="43:34"><operator pos:start="43:27" pos:end="43:27">&amp;</operator><name pos:start="43:28" pos:end="43:34"><name pos:start="43:28" pos:end="43:30">ctx</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:34">gb</name></name></expr></argument>, <argument pos:start="43:37" pos:end="43:39"><expr pos:start="43:37" pos:end="43:39"><name pos:start="43:37" pos:end="43:39">buf</name></expr></argument>, <argument pos:start="43:42" pos:end="43:57"><expr pos:start="43:42" pos:end="43:57"><operator pos:start="43:42" pos:end="43:42">(</operator><name pos:start="43:43" pos:end="43:46">skip</name> <operator pos:start="43:48" pos:end="43:48">-</operator> <name pos:start="43:50" pos:end="43:52">cur</name><operator pos:start="43:53" pos:end="43:53">)</operator> <operator pos:start="43:55" pos:end="43:55">*</operator> <literal type="number" pos:start="43:57" pos:end="43:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="47:26"><if pos:start="45:13" pos:end="47:26">if<condition pos:start="45:15" pos:end="45:53">(<expr pos:start="45:16" pos:end="45:52"><call pos:start="45:16" pos:end="45:46"><name pos:start="45:16" pos:end="45:30">tm2_read_deltas</name><argument_list pos:start="45:31" pos:end="45:46">(<argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">ctx</name></expr></argument>, <argument pos:start="45:37" pos:end="45:45"><expr pos:start="45:37" pos:end="45:45"><name pos:start="45:37" pos:end="45:45">stream_id</name></expr></argument>)</argument_list></call> <operator pos:start="45:48" pos:end="45:49">==</operator> <operator pos:start="45:51" pos:end="45:51">-</operator><literal type="number" pos:start="45:52" pos:end="45:52">1</literal></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:26"><block_content pos:start="47:17" pos:end="47:26">

                <return pos:start="47:17" pos:end="47:26">return <expr pos:start="47:24" pos:end="47:25"><operator pos:start="47:24" pos:end="47:24">-</operator><literal type="number" pos:start="47:25" pos:end="47:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:63"><expr pos:start="49:13" pos:end="49:62"><name pos:start="49:13" pos:end="49:15">buf</name> <operator pos:start="49:17" pos:end="49:18">+=</operator> <operator pos:start="49:20" pos:end="49:20">(</operator><operator pos:start="49:21" pos:end="49:21">(</operator><call pos:start="49:22" pos:end="49:45"><name pos:start="49:22" pos:end="49:35">get_bits_count</name><argument_list pos:start="49:36" pos:end="49:45">(<argument pos:start="49:37" pos:end="49:44"><expr pos:start="49:37" pos:end="49:44"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:44"><name pos:start="49:38" pos:end="49:40">ctx</name><operator pos:start="49:41" pos:end="49:42">-&gt;</operator><name pos:start="49:43" pos:end="49:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="49:47" pos:end="49:47">+</operator> <literal type="number" pos:start="49:49" pos:end="49:50">31</literal><operator pos:start="49:51" pos:end="49:51">)</operator> <operator pos:start="49:53" pos:end="49:54">&gt;&gt;</operator> <literal type="number" pos:start="49:56" pos:end="49:56">5</literal><operator pos:start="49:57" pos:end="49:57">)</operator> <operator pos:start="49:59" pos:end="49:60">&lt;&lt;</operator> <literal type="number" pos:start="49:62" pos:end="49:62">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:63"><expr pos:start="51:13" pos:end="51:62"><name pos:start="51:13" pos:end="51:15">cur</name> <operator pos:start="51:17" pos:end="51:18">+=</operator> <operator pos:start="51:20" pos:end="51:20">(</operator><operator pos:start="51:21" pos:end="51:21">(</operator><call pos:start="51:22" pos:end="51:45"><name pos:start="51:22" pos:end="51:35">get_bits_count</name><argument_list pos:start="51:36" pos:end="51:45">(<argument pos:start="51:37" pos:end="51:44"><expr pos:start="51:37" pos:end="51:44"><operator pos:start="51:37" pos:end="51:37">&amp;</operator><name pos:start="51:38" pos:end="51:44"><name pos:start="51:38" pos:end="51:40">ctx</name><operator pos:start="51:41" pos:end="51:42">-&gt;</operator><name pos:start="51:43" pos:end="51:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:47" pos:end="51:47">+</operator> <literal type="number" pos:start="51:49" pos:end="51:50">31</literal><operator pos:start="51:51" pos:end="51:51">)</operator> <operator pos:start="51:53" pos:end="51:54">&gt;&gt;</operator> <literal type="number" pos:start="51:56" pos:end="51:56">5</literal><operator pos:start="51:57" pos:end="51:57">)</operator> <operator pos:start="51:59" pos:end="51:60">&lt;&lt;</operator> <literal type="number" pos:start="51:62" pos:end="51:62">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:28">/* skip unused fields */</comment>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if<condition pos:start="59:7" pos:end="59:34">(<expr pos:start="59:8" pos:end="59:33"><call pos:start="59:8" pos:end="59:19"><name pos:start="59:8" pos:end="59:14">AV_RB32</name><argument_list pos:start="59:15" pos:end="59:19">(<argument pos:start="59:16" pos:end="59:18"><expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">buf</name></expr></argument>)</argument_list></call> <operator pos:start="59:21" pos:end="59:22">==</operator> <name pos:start="59:24" pos:end="59:33">TM2_ESCAPE</name></expr>)</condition> <block pos:start="59:36" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:27">

        <expr_stmt pos:start="61:9" pos:end="61:17"><expr pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:11">buf</name> <operator pos:start="61:13" pos:end="61:14">+=</operator> <literal type="number" pos:start="61:16" pos:end="61:16">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="61:19" pos:end="61:27"><expr pos:start="61:19" pos:end="61:26"><name pos:start="61:19" pos:end="61:21">cur</name> <operator pos:start="61:23" pos:end="61:24">+=</operator> <literal type="number" pos:start="61:26" pos:end="61:26">4</literal></expr>;</expr_stmt> <comment type="block" pos:start="61:29" pos:end="61:76">/* some unknown length - could be escaped too */</comment>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:13"><expr pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:7">buf</name> <operator pos:start="65:9" pos:end="65:10">+=</operator> <literal type="number" pos:start="65:12" pos:end="65:12">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="65:15" pos:end="65:23"><expr pos:start="65:15" pos:end="65:22"><name pos:start="65:15" pos:end="65:17">cur</name> <operator pos:start="65:19" pos:end="65:20">+=</operator> <literal type="number" pos:start="65:22" pos:end="65:22">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:13"><expr pos:start="67:5" pos:end="67:12"><name pos:start="67:5" pos:end="67:7">buf</name> <operator pos:start="67:9" pos:end="67:10">+=</operator> <literal type="number" pos:start="67:12" pos:end="67:12">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="67:15" pos:end="67:23"><expr pos:start="67:15" pos:end="67:22"><name pos:start="67:15" pos:end="67:17">cur</name> <operator pos:start="67:19" pos:end="67:20">+=</operator> <literal type="number" pos:start="67:22" pos:end="67:22">4</literal></expr>;</expr_stmt> <comment type="block" pos:start="67:25" pos:end="67:47">/* unused by decoder */</comment>



    <expr_stmt pos:start="71:5" pos:end="71:51"><expr pos:start="71:5" pos:end="71:50"><call pos:start="71:5" pos:end="71:50"><name pos:start="71:5" pos:end="71:17">init_get_bits</name><argument_list pos:start="71:18" pos:end="71:50">(<argument pos:start="71:19" pos:end="71:26"><expr pos:start="71:19" pos:end="71:26"><operator pos:start="71:19" pos:end="71:19">&amp;</operator><name pos:start="71:20" pos:end="71:26"><name pos:start="71:20" pos:end="71:22">ctx</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:26">gb</name></name></expr></argument>, <argument pos:start="71:29" pos:end="71:31"><expr pos:start="71:29" pos:end="71:31"><name pos:start="71:29" pos:end="71:31">buf</name></expr></argument>, <argument pos:start="71:34" pos:end="71:49"><expr pos:start="71:34" pos:end="71:49"><operator pos:start="71:34" pos:end="71:34">(</operator><name pos:start="71:35" pos:end="71:38">skip</name> <operator pos:start="71:40" pos:end="71:40">-</operator> <name pos:start="71:42" pos:end="71:44">cur</name><operator pos:start="71:45" pos:end="71:45">)</operator> <operator pos:start="71:47" pos:end="71:47">*</operator> <literal type="number" pos:start="71:49" pos:end="71:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="75:18"><if pos:start="73:5" pos:end="75:18">if<condition pos:start="73:7" pos:end="73:47">(<expr pos:start="73:8" pos:end="73:46"><call pos:start="73:8" pos:end="73:40"><name pos:start="73:8" pos:end="73:27">tm2_build_huff_table</name><argument_list pos:start="73:28" pos:end="73:40">(<argument pos:start="73:29" pos:end="73:31"><expr pos:start="73:29" pos:end="73:31"><name pos:start="73:29" pos:end="73:31">ctx</name></expr></argument>, <argument pos:start="73:34" pos:end="73:39"><expr pos:start="73:34" pos:end="73:39"><operator pos:start="73:34" pos:end="73:34">&amp;</operator><name pos:start="73:35" pos:end="73:39">codes</name></expr></argument>)</argument_list></call> <operator pos:start="73:42" pos:end="73:43">==</operator> <operator pos:start="73:45" pos:end="73:45">-</operator><literal type="number" pos:start="73:46" pos:end="73:46">1</literal></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:18"><block_content pos:start="75:9" pos:end="75:18">

        <return pos:start="75:9" pos:end="75:18">return <expr pos:start="75:16" pos:end="75:17"><operator pos:start="75:16" pos:end="75:16">-</operator><literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:55"><expr pos:start="77:5" pos:end="77:54"><name pos:start="77:5" pos:end="77:7">buf</name> <operator pos:start="77:9" pos:end="77:10">+=</operator> <operator pos:start="77:12" pos:end="77:12">(</operator><operator pos:start="77:13" pos:end="77:13">(</operator><call pos:start="77:14" pos:end="77:37"><name pos:start="77:14" pos:end="77:27">get_bits_count</name><argument_list pos:start="77:28" pos:end="77:37">(<argument pos:start="77:29" pos:end="77:36"><expr pos:start="77:29" pos:end="77:36"><operator pos:start="77:29" pos:end="77:29">&amp;</operator><name pos:start="77:30" pos:end="77:36"><name pos:start="77:30" pos:end="77:32">ctx</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:39" pos:end="77:39">+</operator> <literal type="number" pos:start="77:41" pos:end="77:42">31</literal><operator pos:start="77:43" pos:end="77:43">)</operator> <operator pos:start="77:45" pos:end="77:46">&gt;&gt;</operator> <literal type="number" pos:start="77:48" pos:end="77:48">5</literal><operator pos:start="77:49" pos:end="77:49">)</operator> <operator pos:start="77:51" pos:end="77:52">&lt;&lt;</operator> <literal type="number" pos:start="77:54" pos:end="77:54">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:55"><expr pos:start="79:5" pos:end="79:54"><name pos:start="79:5" pos:end="79:7">cur</name> <operator pos:start="79:9" pos:end="79:10">+=</operator> <operator pos:start="79:12" pos:end="79:12">(</operator><operator pos:start="79:13" pos:end="79:13">(</operator><call pos:start="79:14" pos:end="79:37"><name pos:start="79:14" pos:end="79:27">get_bits_count</name><argument_list pos:start="79:28" pos:end="79:37">(<argument pos:start="79:29" pos:end="79:36"><expr pos:start="79:29" pos:end="79:36"><operator pos:start="79:29" pos:end="79:29">&amp;</operator><name pos:start="79:30" pos:end="79:36"><name pos:start="79:30" pos:end="79:32">ctx</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:39" pos:end="79:39">+</operator> <literal type="number" pos:start="79:41" pos:end="79:42">31</literal><operator pos:start="79:43" pos:end="79:43">)</operator> <operator pos:start="79:45" pos:end="79:46">&gt;&gt;</operator> <literal type="number" pos:start="79:48" pos:end="79:48">5</literal><operator pos:start="79:49" pos:end="79:49">)</operator> <operator pos:start="79:51" pos:end="79:52">&lt;&lt;</operator> <literal type="number" pos:start="79:54" pos:end="79:54">2</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:15"><expr pos:start="83:5" pos:end="83:14"><name pos:start="83:5" pos:end="83:8">toks</name> <operator pos:start="83:10" pos:end="83:12">&gt;&gt;=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="85:5" pos:end="85:48">/* check if we have sane number of tokens */</comment>

    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if<condition pos:start="87:7" pos:end="87:39">(<expr pos:start="87:8" pos:end="87:38"><operator pos:start="87:8" pos:end="87:8">(</operator><name pos:start="87:9" pos:end="87:12">toks</name> <operator pos:start="87:14" pos:end="87:14">&lt;</operator> <literal type="number" pos:start="87:16" pos:end="87:16">0</literal><operator pos:start="87:17" pos:end="87:17">)</operator> <operator pos:start="87:19" pos:end="87:20">||</operator> <operator pos:start="87:22" pos:end="87:22">(</operator><name pos:start="87:23" pos:end="87:26">toks</name> <operator pos:start="87:28" pos:end="87:28">&gt;</operator> <literal type="number" pos:start="87:30" pos:end="87:37">0xFFFFFF</literal><operator pos:start="87:38" pos:end="87:38">)</operator></expr>)</condition><block pos:start="87:40" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:18">

        <expr_stmt pos:start="89:9" pos:end="89:83"><expr pos:start="89:9" pos:end="89:82"><call pos:start="89:9" pos:end="89:82"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="89:82">(<argument pos:start="89:16" pos:end="89:25"><expr pos:start="89:16" pos:end="89:25"><name pos:start="89:16" pos:end="89:25"><name pos:start="89:16" pos:end="89:18">ctx</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:25">avctx</name></name></expr></argument>, <argument pos:start="89:28" pos:end="89:39"><expr pos:start="89:28" pos:end="89:39"><name pos:start="89:28" pos:end="89:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:42" pos:end="89:75"><expr pos:start="89:42" pos:end="89:75"><literal type="string" pos:start="89:42" pos:end="89:75">"Incorrect number of tokens: %i\n"</literal></expr></argument>, <argument pos:start="89:78" pos:end="89:81"><expr pos:start="89:78" pos:end="89:81"><name pos:start="89:78" pos:end="89:81">toks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:31"><expr pos:start="91:9" pos:end="91:30"><call pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:22">tm2_free_codes</name><argument_list pos:start="91:23" pos:end="91:30">(<argument pos:start="91:24" pos:end="91:29"><expr pos:start="91:24" pos:end="91:29"><operator pos:start="91:24" pos:end="91:24">&amp;</operator><name pos:start="91:25" pos:end="91:29">codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:18">return <expr pos:start="93:16" pos:end="93:17"><operator pos:start="93:16" pos:end="93:16">-</operator><literal type="number" pos:start="93:17" pos:end="93:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:84"><expr pos:start="97:5" pos:end="97:83"><name pos:start="97:5" pos:end="97:26"><name pos:start="97:5" pos:end="97:7">ctx</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:15">tokens</name><index pos:start="97:16" pos:end="97:26">[<expr pos:start="97:17" pos:end="97:25"><name pos:start="97:17" pos:end="97:25">stream_id</name></expr>]</index></name> <operator pos:start="97:28" pos:end="97:28">=</operator> <call pos:start="97:30" pos:end="97:83"><name pos:start="97:30" pos:end="97:39">av_realloc</name><argument_list pos:start="97:40" pos:end="97:83">(<argument pos:start="97:41" pos:end="97:62"><expr pos:start="97:41" pos:end="97:62"><name pos:start="97:41" pos:end="97:62"><name pos:start="97:41" pos:end="97:43">ctx</name><operator pos:start="97:44" pos:end="97:45">-&gt;</operator><name pos:start="97:46" pos:end="97:51">tokens</name><index pos:start="97:52" pos:end="97:62">[<expr pos:start="97:53" pos:end="97:61"><name pos:start="97:53" pos:end="97:61">stream_id</name></expr>]</index></name></expr></argument>, <argument pos:start="97:65" pos:end="97:82"><expr pos:start="97:65" pos:end="97:82"><name pos:start="97:65" pos:end="97:68">toks</name> <operator pos:start="97:70" pos:end="97:70">*</operator> <sizeof pos:start="97:72" pos:end="97:82">sizeof<argument_list pos:start="97:78" pos:end="97:82">(<argument pos:start="97:79" pos:end="97:81"><expr pos:start="97:79" pos:end="97:81"><name pos:start="97:79" pos:end="97:81">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:36"><expr pos:start="99:5" pos:end="99:35"><name pos:start="99:5" pos:end="99:28"><name pos:start="99:5" pos:end="99:7">ctx</name><operator pos:start="99:8" pos:end="99:9">-&gt;</operator><name pos:start="99:10" pos:end="99:17">tok_lens</name><index pos:start="99:18" pos:end="99:28">[<expr pos:start="99:19" pos:end="99:27"><name pos:start="99:19" pos:end="99:27">stream_id</name></expr>]</index></name> <operator pos:start="99:30" pos:end="99:30">=</operator> <name pos:start="99:32" pos:end="99:35">toks</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:23"><expr pos:start="101:5" pos:end="101:22"><name pos:start="101:5" pos:end="101:7">len</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:22"><name pos:start="101:11" pos:end="101:17">AV_RB32</name><argument_list pos:start="101:18" pos:end="101:22">(<argument pos:start="101:19" pos:end="101:21"><expr pos:start="101:19" pos:end="101:21"><name pos:start="101:19" pos:end="101:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="101:25" pos:end="101:33"><expr pos:start="101:25" pos:end="101:32"><name pos:start="101:25" pos:end="101:27">buf</name> <operator pos:start="101:29" pos:end="101:30">+=</operator> <literal type="number" pos:start="101:32" pos:end="101:32">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="101:35" pos:end="101:43"><expr pos:start="101:35" pos:end="101:42"><name pos:start="101:35" pos:end="101:37">cur</name> <operator pos:start="101:39" pos:end="101:40">+=</operator> <literal type="number" pos:start="101:42" pos:end="101:42">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="117:5"><if pos:start="103:5" pos:end="111:5">if<condition pos:start="103:7" pos:end="103:15">(<expr pos:start="103:8" pos:end="103:14"><name pos:start="103:8" pos:end="103:10">len</name> <operator pos:start="103:12" pos:end="103:12">&gt;</operator> <literal type="number" pos:start="103:14" pos:end="103:14">0</literal></expr>)</condition> <block pos:start="103:17" pos:end="111:5">{<block_content pos:start="105:9" pos:end="109:72">

        <expr_stmt pos:start="105:9" pos:end="105:55"><expr pos:start="105:9" pos:end="105:54"><call pos:start="105:9" pos:end="105:54"><name pos:start="105:9" pos:end="105:21">init_get_bits</name><argument_list pos:start="105:22" pos:end="105:54">(<argument pos:start="105:23" pos:end="105:30"><expr pos:start="105:23" pos:end="105:30"><operator pos:start="105:23" pos:end="105:23">&amp;</operator><name pos:start="105:24" pos:end="105:30"><name pos:start="105:24" pos:end="105:26">ctx</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:30">gb</name></name></expr></argument>, <argument pos:start="105:33" pos:end="105:35"><expr pos:start="105:33" pos:end="105:35"><name pos:start="105:33" pos:end="105:35">buf</name></expr></argument>, <argument pos:start="105:38" pos:end="105:53"><expr pos:start="105:38" pos:end="105:53"><operator pos:start="105:38" pos:end="105:38">(</operator><name pos:start="105:39" pos:end="105:42">skip</name> <operator pos:start="105:44" pos:end="105:44">-</operator> <name pos:start="105:46" pos:end="105:48">cur</name><operator pos:start="105:49" pos:end="105:49">)</operator> <operator pos:start="105:51" pos:end="105:51">*</operator> <literal type="number" pos:start="105:53" pos:end="105:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="107:9" pos:end="109:72">for<control pos:start="107:12" pos:end="107:33">(<init pos:start="107:13" pos:end="107:18"><expr pos:start="107:13" pos:end="107:17"><name pos:start="107:13" pos:end="107:13">i</name> <operator pos:start="107:15" pos:end="107:15">=</operator> <literal type="number" pos:start="107:17" pos:end="107:17">0</literal></expr>;</init> <condition pos:start="107:20" pos:end="107:28"><expr pos:start="107:20" pos:end="107:27"><name pos:start="107:20" pos:end="107:20">i</name> <operator pos:start="107:22" pos:end="107:22">&lt;</operator> <name pos:start="107:24" pos:end="107:27">toks</name></expr>;</condition> <incr pos:start="107:30" pos:end="107:32"><expr pos:start="107:30" pos:end="107:32"><name pos:start="107:30" pos:end="107:30">i</name><operator pos:start="107:31" pos:end="107:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="109:13" pos:end="109:72"><block_content pos:start="109:13" pos:end="109:72">

            <expr_stmt pos:start="109:13" pos:end="109:72"><expr pos:start="109:13" pos:end="109:71"><name pos:start="109:13" pos:end="109:37"><name pos:start="109:13" pos:end="109:15">ctx</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:23">tokens</name><index pos:start="109:24" pos:end="109:34">[<expr pos:start="109:25" pos:end="109:33"><name pos:start="109:25" pos:end="109:33">stream_id</name></expr>]</index><index pos:start="109:35" pos:end="109:37">[<expr pos:start="109:36" pos:end="109:36"><name pos:start="109:36" pos:end="109:36">i</name></expr>]</index></name> <operator pos:start="109:39" pos:end="109:39">=</operator> <call pos:start="109:41" pos:end="109:71"><name pos:start="109:41" pos:end="109:53">tm2_get_token</name><argument_list pos:start="109:54" pos:end="109:71">(<argument pos:start="109:55" pos:end="109:62"><expr pos:start="109:55" pos:end="109:62"><operator pos:start="109:55" pos:end="109:55">&amp;</operator><name pos:start="109:56" pos:end="109:62"><name pos:start="109:56" pos:end="109:58">ctx</name><operator pos:start="109:59" pos:end="109:60">-&gt;</operator><name pos:start="109:61" pos:end="109:62">gb</name></name></expr></argument>, <argument pos:start="109:65" pos:end="109:70"><expr pos:start="109:65" pos:end="109:70"><operator pos:start="109:65" pos:end="109:65">&amp;</operator><name pos:start="109:66" pos:end="109:70">codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="117:5">else <block pos:start="111:12" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:56">

        <for pos:start="113:9" pos:end="115:56">for<control pos:start="113:12" pos:end="113:33">(<init pos:start="113:13" pos:end="113:18"><expr pos:start="113:13" pos:end="113:17"><name pos:start="113:13" pos:end="113:13">i</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <literal type="number" pos:start="113:17" pos:end="113:17">0</literal></expr>;</init> <condition pos:start="113:20" pos:end="113:28"><expr pos:start="113:20" pos:end="113:27"><name pos:start="113:20" pos:end="113:20">i</name> <operator pos:start="113:22" pos:end="113:22">&lt;</operator> <name pos:start="113:24" pos:end="113:27">toks</name></expr>;</condition> <incr pos:start="113:30" pos:end="113:32"><expr pos:start="113:30" pos:end="113:32"><name pos:start="113:30" pos:end="113:30">i</name><operator pos:start="113:31" pos:end="113:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="115:13" pos:end="115:56"><block_content pos:start="115:13" pos:end="115:56">

            <expr_stmt pos:start="115:13" pos:end="115:56"><expr pos:start="115:13" pos:end="115:55"><name pos:start="115:13" pos:end="115:37"><name pos:start="115:13" pos:end="115:15">ctx</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:23">tokens</name><index pos:start="115:24" pos:end="115:34">[<expr pos:start="115:25" pos:end="115:33"><name pos:start="115:25" pos:end="115:33">stream_id</name></expr>]</index><index pos:start="115:35" pos:end="115:37">[<expr pos:start="115:36" pos:end="115:36"><name pos:start="115:36" pos:end="115:36">i</name></expr>]</index></name> <operator pos:start="115:39" pos:end="115:39">=</operator> <name pos:start="115:41" pos:end="115:55"><name pos:start="115:41" pos:end="115:45">codes</name><operator pos:start="115:46" pos:end="115:46">.</operator><name pos:start="115:47" pos:end="115:52">recode</name><index pos:start="115:53" pos:end="115:55">[<expr pos:start="115:54" pos:end="115:54"><literal type="number" pos:start="115:54" pos:end="115:54">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:27"><expr pos:start="119:5" pos:end="119:26"><call pos:start="119:5" pos:end="119:26"><name pos:start="119:5" pos:end="119:18">tm2_free_codes</name><argument_list pos:start="119:19" pos:end="119:26">(<argument pos:start="119:20" pos:end="119:25"><expr pos:start="119:20" pos:end="119:25"><operator pos:start="119:20" pos:end="119:20">&amp;</operator><name pos:start="119:21" pos:end="119:25">codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="123:5" pos:end="123:16">return <expr pos:start="123:12" pos:end="123:15"><name pos:start="123:12" pos:end="123:15">skip</name></expr>;</return>

</block_content>}</block></function>
</unit>
