<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25746.c" pos:tabs="8"><function pos:start="1:1" pos:end="375:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">ibm_40p_init</name><parameter_list pos:start="1:25" pos:end="1:47">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:39"><name pos:start="1:26" pos:end="1:37">MachineState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:46">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="375:1">{<block_content pos:start="5:5" pos:end="373:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUPPCState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:26">cmos_checksum</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">PowerPCCPU</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">DeviceState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">SysBusDevice</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:25">pcihost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Nvram</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:17">m48t59</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">ISABus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">void</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:46"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:24">kernel_base</name> <init pos:start="25:26" pos:end="25:28">= <expr pos:start="25:28" pos:end="25:28"><literal type="number" pos:start="25:28" pos:end="25:28">0</literal></expr></init></decl>, <decl pos:start="25:31" pos:end="25:45"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:31" pos:end="25:41">initrd_base</name> <init pos:start="25:43" pos:end="25:45">= <expr pos:start="25:45" pos:end="25:45"><literal type="number" pos:start="25:45" pos:end="25:45">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:42"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">long</name></type> <name pos:start="27:10" pos:end="27:20">kernel_size</name> <init pos:start="27:22" pos:end="27:24">= <expr pos:start="27:24" pos:end="27:24"><literal type="number" pos:start="27:24" pos:end="27:24">0</literal></expr></init></decl>, <decl pos:start="27:27" pos:end="27:41"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:27" pos:end="27:37">initrd_size</name> <init pos:start="27:39" pos:end="27:41">= <expr pos:start="27:41" pos:end="27:41"><literal type="number" pos:start="27:41" pos:end="27:41">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">char</name></type> <name pos:start="29:10" pos:end="29:20">boot_device</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:18">/* init CPU */</comment>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:28">(<expr pos:start="35:9" pos:end="35:27"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:27"><name pos:start="35:10" pos:end="35:16">machine</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:27">cpu_model</name></name></expr>)</condition> <block pos:start="35:30" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:35">

        <expr_stmt pos:start="37:9" pos:end="37:35"><expr pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:15">machine</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:26">cpu_model</name></name> <operator pos:start="37:28" pos:end="37:28">=</operator> <literal type="string" pos:start="37:30" pos:end="37:34">"604"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:78"><expr pos:start="41:5" pos:end="41:77"><name pos:start="41:5" pos:end="41:7">cpu</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:77"><name pos:start="41:11" pos:end="41:21">POWERPC_CPU</name><argument_list pos:start="41:22" pos:end="41:77">(<argument pos:start="41:23" pos:end="41:76"><expr pos:start="41:23" pos:end="41:76"><call pos:start="41:23" pos:end="41:76"><name pos:start="41:23" pos:end="41:38">cpu_generic_init</name><argument_list pos:start="41:39" pos:end="41:76">(<argument pos:start="41:40" pos:end="41:55"><expr pos:start="41:40" pos:end="41:55"><name pos:start="41:40" pos:end="41:55">TYPE_POWERPC_CPU</name></expr></argument>, <argument pos:start="41:58" pos:end="41:75"><expr pos:start="41:58" pos:end="41:75"><name pos:start="41:58" pos:end="41:75"><name pos:start="41:58" pos:end="41:64">machine</name><operator pos:start="41:65" pos:end="41:66">-&gt;</operator><name pos:start="41:67" pos:end="41:75">cpu_model</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:13">(<expr pos:start="43:9" pos:end="43:12"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:12">cpu</name></expr>)</condition> <block pos:start="43:15" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:16">

        <expr_stmt pos:start="45:9" pos:end="47:41"><expr pos:start="45:9" pos:end="47:40"><call pos:start="45:9" pos:end="47:40"><name pos:start="45:9" pos:end="45:20">error_report</name><argument_list pos:start="45:21" pos:end="47:40">(<argument pos:start="45:22" pos:end="45:52"><expr pos:start="45:22" pos:end="45:52"><literal type="string" pos:start="45:22" pos:end="45:52">"could not initialize CPU '%s'"</literal></expr></argument>,

                     <argument pos:start="47:22" pos:end="47:39"><expr pos:start="47:22" pos:end="47:39"><name pos:start="47:22" pos:end="47:39"><name pos:start="47:22" pos:end="47:28">machine</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:39">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:16"><expr pos:start="49:9" pos:end="49:15"><call pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:12">exit</name><argument_list pos:start="49:13" pos:end="49:15">(<argument pos:start="49:14" pos:end="49:14"><expr pos:start="49:14" pos:end="49:14"><literal type="number" pos:start="49:14" pos:end="49:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:20"><expr pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:7">env</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <operator pos:start="53:11" pos:end="53:11">&amp;</operator><name pos:start="53:12" pos:end="53:19"><name pos:start="53:12" pos:end="53:14">cpu</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:19">env</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:46">(<expr pos:start="55:9" pos:end="55:45"><call pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:17">PPC_INPUT</name><argument_list pos:start="55:18" pos:end="55:22">(<argument pos:start="55:19" pos:end="55:21"><expr pos:start="55:19" pos:end="55:21"><name pos:start="55:19" pos:end="55:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="55:24" pos:end="55:25">!=</operator> <name pos:start="55:27" pos:end="55:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="55:48" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:16">

        <expr_stmt pos:start="57:9" pos:end="57:66"><expr pos:start="57:9" pos:end="57:65"><call pos:start="57:9" pos:end="57:65"><name pos:start="57:9" pos:end="57:20">error_report</name><argument_list pos:start="57:21" pos:end="57:65">(<argument pos:start="57:22" pos:end="57:64"><expr pos:start="57:22" pos:end="57:64"><literal type="string" pos:start="57:22" pos:end="57:64">"only 6xx bus is supported on this machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><call pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:12">exit</name><argument_list pos:start="59:13" pos:end="59:15">(<argument pos:start="59:14" pos:end="59:14"><expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="77:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:42">(<expr pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:11">env</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:18">flags</name></name> <operator pos:start="65:20" pos:end="65:20">&amp;</operator> <name pos:start="65:22" pos:end="65:41">POWERPC_FLAG_RTC_CLK</name></expr>)</condition> <block pos:start="65:44" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:40">

        <comment type="block" pos:start="67:9" pos:end="67:67">/* POWER / PowerPC 601 RTC clock frequency is 7.8125 MHz */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:40"><expr pos:start="69:9" pos:end="69:39"><call pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:23">cpu_ppc_tb_init</name><argument_list pos:start="69:24" pos:end="69:39">(<argument pos:start="69:25" pos:end="69:27"><expr pos:start="69:25" pos:end="69:27"><name pos:start="69:25" pos:end="69:27">env</name></expr></argument>, <argument pos:start="69:30" pos:end="69:38"><expr pos:start="69:30" pos:end="69:38"><literal type="number" pos:start="69:30" pos:end="69:38">7812500UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="77:5">else <block pos:start="71:12" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:54">

        <comment type="block" pos:start="73:9" pos:end="73:48">/* Set time-base frequency to 100 Mhz */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:54"><expr pos:start="75:9" pos:end="75:53"><call pos:start="75:9" pos:end="75:53"><name pos:start="75:9" pos:end="75:23">cpu_ppc_tb_init</name><argument_list pos:start="75:24" pos:end="75:53">(<argument pos:start="75:25" pos:end="75:27"><expr pos:start="75:25" pos:end="75:27"><name pos:start="75:25" pos:end="75:27">env</name></expr></argument>, <argument pos:start="75:30" pos:end="75:52"><expr pos:start="75:30" pos:end="75:52"><literal type="number" pos:start="75:30" pos:end="75:34">100UL</literal> <operator pos:start="75:36" pos:end="75:36">*</operator> <literal type="number" pos:start="75:38" pos:end="75:43">1000UL</literal> <operator pos:start="75:45" pos:end="75:45">*</operator> <literal type="number" pos:start="75:47" pos:end="75:52">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:45"><expr pos:start="79:5" pos:end="79:44"><call pos:start="79:5" pos:end="79:44"><name pos:start="79:5" pos:end="79:23">qemu_register_reset</name><argument_list pos:start="79:24" pos:end="79:44">(<argument pos:start="79:25" pos:end="79:38"><expr pos:start="79:25" pos:end="79:38"><name pos:start="79:25" pos:end="79:38">ppc_prep_reset</name></expr></argument>, <argument pos:start="79:41" pos:end="79:43"><expr pos:start="79:41" pos:end="79:43"><name pos:start="79:41" pos:end="79:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:18">/* PCI host */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:45"><expr pos:start="85:5" pos:end="85:44"><name pos:start="85:5" pos:end="85:7">dev</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:44"><name pos:start="85:11" pos:end="85:21">qdev_create</name><argument_list pos:start="85:22" pos:end="85:44">(<argument pos:start="85:23" pos:end="85:26"><expr pos:start="85:23" pos:end="85:26"><name pos:start="85:23" pos:end="85:26">NULL</name></expr></argument>, <argument pos:start="85:29" pos:end="85:43"><expr pos:start="85:29" pos:end="85:43"><literal type="string" pos:start="85:29" pos:end="85:43">"raven-pcihost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:19">(<expr pos:start="87:9" pos:end="87:18"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:18">bios_name</name></expr>)</condition> <block pos:start="87:21" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:34">

        <expr_stmt pos:start="89:9" pos:end="89:34"><expr pos:start="89:9" pos:end="89:33"><name pos:start="89:9" pos:end="89:17">bios_name</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <name pos:start="89:21" pos:end="89:33">BIOS_FILENAME</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:54"><expr pos:start="93:5" pos:end="93:53"><call pos:start="93:5" pos:end="93:53"><name pos:start="93:5" pos:end="93:24">qdev_prop_set_string</name><argument_list pos:start="93:25" pos:end="93:53">(<argument pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><name pos:start="93:26" pos:end="93:28">dev</name></expr></argument>, <argument pos:start="93:31" pos:end="93:41"><expr pos:start="93:31" pos:end="93:41"><literal type="string" pos:start="93:31" pos:end="93:41">"bios-name"</literal></expr></argument>, <argument pos:start="93:44" pos:end="93:52"><expr pos:start="93:44" pos:end="93:52"><name pos:start="93:44" pos:end="93:52">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:62"><expr pos:start="95:5" pos:end="95:61"><call pos:start="95:5" pos:end="95:61"><name pos:start="95:5" pos:end="95:24">qdev_prop_set_uint32</name><argument_list pos:start="95:25" pos:end="95:61">(<argument pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><name pos:start="95:26" pos:end="95:28">dev</name></expr></argument>, <argument pos:start="95:31" pos:end="95:43"><expr pos:start="95:31" pos:end="95:43"><literal type="string" pos:start="95:31" pos:end="95:43">"elf-machine"</literal></expr></argument>, <argument pos:start="95:46" pos:end="95:60"><expr pos:start="95:46" pos:end="95:60"><name pos:start="95:46" pos:end="95:60">PPC_ELF_MACHINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:34"><expr pos:start="97:5" pos:end="97:33"><name pos:start="97:5" pos:end="97:11">pcihost</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:33"><name pos:start="97:15" pos:end="97:28">SYS_BUS_DEVICE</name><argument_list pos:start="97:29" pos:end="97:33">(<argument pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><name pos:start="97:30" pos:end="97:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:78"><expr pos:start="99:5" pos:end="99:77"><call pos:start="99:5" pos:end="99:77"><name pos:start="99:5" pos:end="99:29">object_property_add_child</name><argument_list pos:start="99:30" pos:end="99:77">(<argument pos:start="99:31" pos:end="99:48"><expr pos:start="99:31" pos:end="99:48"><call pos:start="99:31" pos:end="99:48"><name pos:start="99:31" pos:end="99:46">qdev_get_machine</name><argument_list pos:start="99:47" pos:end="99:48">()</argument_list></call></expr></argument>, <argument pos:start="99:51" pos:end="99:57"><expr pos:start="99:51" pos:end="99:57"><literal type="string" pos:start="99:51" pos:end="99:57">"raven"</literal></expr></argument>, <argument pos:start="99:60" pos:end="99:70"><expr pos:start="99:60" pos:end="99:70"><call pos:start="99:60" pos:end="99:70"><name pos:start="99:60" pos:end="99:65">OBJECT</name><argument_list pos:start="99:66" pos:end="99:70">(<argument pos:start="99:67" pos:end="99:69"><expr pos:start="99:67" pos:end="99:69"><name pos:start="99:67" pos:end="99:69">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:73" pos:end="99:76"><expr pos:start="99:73" pos:end="99:76"><name pos:start="99:73" pos:end="99:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:26"><expr pos:start="101:5" pos:end="101:25"><call pos:start="101:5" pos:end="101:25"><name pos:start="101:5" pos:end="101:20">qdev_init_nofail</name><argument_list pos:start="101:21" pos:end="101:25">(<argument pos:start="101:22" pos:end="101:24"><expr pos:start="101:22" pos:end="101:24"><name pos:start="101:22" pos:end="101:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:56"><expr pos:start="103:5" pos:end="103:55"><name pos:start="103:5" pos:end="103:11">pci_bus</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:55"><name pos:start="103:15" pos:end="103:21">PCI_BUS</name><argument_list pos:start="103:22" pos:end="103:55">(<argument pos:start="103:23" pos:end="103:54"><expr pos:start="103:23" pos:end="103:54"><call pos:start="103:23" pos:end="103:54"><name pos:start="103:23" pos:end="103:40">qdev_get_child_bus</name><argument_list pos:start="103:41" pos:end="103:54">(<argument pos:start="103:42" pos:end="103:44"><expr pos:start="103:42" pos:end="103:44"><name pos:start="103:42" pos:end="103:44">dev</name></expr></argument>, <argument pos:start="103:47" pos:end="103:53"><expr pos:start="103:47" pos:end="103:53"><literal type="string" pos:start="103:47" pos:end="103:53">"pci.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:17">(<expr pos:start="105:9" pos:end="105:16"><operator pos:start="105:9" pos:end="105:9">!</operator><name pos:start="105:10" pos:end="105:16">pci_bus</name></expr>)</condition> <block pos:start="105:19" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:16">

        <expr_stmt pos:start="107:9" pos:end="107:61"><expr pos:start="107:9" pos:end="107:60"><call pos:start="107:9" pos:end="107:60"><name pos:start="107:9" pos:end="107:20">error_report</name><argument_list pos:start="107:21" pos:end="107:60">(<argument pos:start="107:22" pos:end="107:59"><expr pos:start="107:22" pos:end="107:59"><literal type="string" pos:start="107:22" pos:end="107:59">"could not create PCI host controller"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:16"><expr pos:start="109:9" pos:end="109:15"><call pos:start="109:9" pos:end="109:15"><name pos:start="109:9" pos:end="109:12">exit</name><argument_list pos:start="109:13" pos:end="109:15">(<argument pos:start="109:14" pos:end="109:14"><expr pos:start="109:14" pos:end="109:14"><literal type="number" pos:start="109:14" pos:end="109:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:27">/* PCI -&gt; ISA bridge */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:73"><expr pos:start="117:5" pos:end="117:72"><name pos:start="117:5" pos:end="117:7">dev</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:72"><name pos:start="117:11" pos:end="117:16">DEVICE</name><argument_list pos:start="117:17" pos:end="117:72">(<argument pos:start="117:18" pos:end="117:71"><expr pos:start="117:18" pos:end="117:71"><call pos:start="117:18" pos:end="117:71"><name pos:start="117:18" pos:end="117:34">pci_create_simple</name><argument_list pos:start="117:35" pos:end="117:71">(<argument pos:start="117:36" pos:end="117:42"><expr pos:start="117:36" pos:end="117:42"><name pos:start="117:36" pos:end="117:42">pci_bus</name></expr></argument>, <argument pos:start="117:45" pos:end="117:60"><expr pos:start="117:45" pos:end="117:60"><call pos:start="117:45" pos:end="117:60"><name pos:start="117:45" pos:end="117:53">PCI_DEVFN</name><argument_list pos:start="117:54" pos:end="117:60">(<argument pos:start="117:55" pos:end="117:56"><expr pos:start="117:55" pos:end="117:56"><literal type="number" pos:start="117:55" pos:end="117:56">11</literal></expr></argument>, <argument pos:start="117:59" pos:end="117:59"><expr pos:start="117:59" pos:end="117:59"><literal type="number" pos:start="117:59" pos:end="117:59">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="117:63" pos:end="117:70"><expr pos:start="117:63" pos:end="117:70"><literal type="string" pos:start="117:63" pos:end="117:70">"i82378"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="121:65"><expr pos:start="119:5" pos:end="121:64"><call pos:start="119:5" pos:end="121:64"><name pos:start="119:5" pos:end="119:25">qdev_connect_gpio_out</name><argument_list pos:start="119:26" pos:end="121:64">(<argument pos:start="119:27" pos:end="119:29"><expr pos:start="119:27" pos:end="119:29"><name pos:start="119:27" pos:end="119:29">dev</name></expr></argument>, <argument pos:start="119:32" pos:end="119:32"><expr pos:start="119:32" pos:end="119:32"><literal type="number" pos:start="119:32" pos:end="119:32">0</literal></expr></argument>,

                          <argument pos:start="121:27" pos:end="121:63"><expr pos:start="121:27" pos:end="121:63"><name pos:start="121:27" pos:end="121:63"><name pos:start="121:27" pos:end="121:29">cpu</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:34">env</name><operator pos:start="121:35" pos:end="121:35">.</operator><name pos:start="121:36" pos:end="121:45">irq_inputs</name><index pos:start="121:46" pos:end="121:63">[<expr pos:start="121:47" pos:end="121:62"><name pos:start="121:47" pos:end="121:62">PPC6xx_INPUT_INT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:62"><expr pos:start="123:5" pos:end="123:61"><call pos:start="123:5" pos:end="123:61"><name pos:start="123:5" pos:end="123:22">sysbus_connect_irq</name><argument_list pos:start="123:23" pos:end="123:61">(<argument pos:start="123:24" pos:end="123:30"><expr pos:start="123:24" pos:end="123:30"><name pos:start="123:24" pos:end="123:30">pcihost</name></expr></argument>, <argument pos:start="123:33" pos:end="123:33"><expr pos:start="123:33" pos:end="123:33"><literal type="number" pos:start="123:33" pos:end="123:33">0</literal></expr></argument>, <argument pos:start="123:36" pos:end="123:60"><expr pos:start="123:36" pos:end="123:60"><call pos:start="123:36" pos:end="123:60"><name pos:start="123:36" pos:end="123:51">qdev_get_gpio_in</name><argument_list pos:start="123:52" pos:end="123:60">(<argument pos:start="123:53" pos:end="123:55"><expr pos:start="123:53" pos:end="123:55"><name pos:start="123:53" pos:end="123:55">dev</name></expr></argument>, <argument pos:start="123:58" pos:end="123:59"><expr pos:start="123:58" pos:end="123:59"><literal type="number" pos:start="123:58" pos:end="123:59">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:62"><expr pos:start="125:5" pos:end="125:61"><call pos:start="125:5" pos:end="125:61"><name pos:start="125:5" pos:end="125:22">sysbus_connect_irq</name><argument_list pos:start="125:23" pos:end="125:61">(<argument pos:start="125:24" pos:end="125:30"><expr pos:start="125:24" pos:end="125:30"><name pos:start="125:24" pos:end="125:30">pcihost</name></expr></argument>, <argument pos:start="125:33" pos:end="125:33"><expr pos:start="125:33" pos:end="125:33"><literal type="number" pos:start="125:33" pos:end="125:33">1</literal></expr></argument>, <argument pos:start="125:36" pos:end="125:60"><expr pos:start="125:36" pos:end="125:60"><call pos:start="125:36" pos:end="125:60"><name pos:start="125:36" pos:end="125:51">qdev_get_gpio_in</name><argument_list pos:start="125:52" pos:end="125:60">(<argument pos:start="125:53" pos:end="125:55"><expr pos:start="125:53" pos:end="125:55"><name pos:start="125:53" pos:end="125:55">dev</name></expr></argument>, <argument pos:start="125:58" pos:end="125:59"><expr pos:start="125:58" pos:end="125:59"><literal type="number" pos:start="125:58" pos:end="125:59">13</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:62"><expr pos:start="127:5" pos:end="127:61"><call pos:start="127:5" pos:end="127:61"><name pos:start="127:5" pos:end="127:22">sysbus_connect_irq</name><argument_list pos:start="127:23" pos:end="127:61">(<argument pos:start="127:24" pos:end="127:30"><expr pos:start="127:24" pos:end="127:30"><name pos:start="127:24" pos:end="127:30">pcihost</name></expr></argument>, <argument pos:start="127:33" pos:end="127:33"><expr pos:start="127:33" pos:end="127:33"><literal type="number" pos:start="127:33" pos:end="127:33">2</literal></expr></argument>, <argument pos:start="127:36" pos:end="127:60"><expr pos:start="127:36" pos:end="127:60"><call pos:start="127:36" pos:end="127:60"><name pos:start="127:36" pos:end="127:51">qdev_get_gpio_in</name><argument_list pos:start="127:52" pos:end="127:60">(<argument pos:start="127:53" pos:end="127:55"><expr pos:start="127:53" pos:end="127:55"><name pos:start="127:53" pos:end="127:55">dev</name></expr></argument>, <argument pos:start="127:58" pos:end="127:59"><expr pos:start="127:58" pos:end="127:59"><literal type="number" pos:start="127:58" pos:end="127:59">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:62"><expr pos:start="129:5" pos:end="129:61"><call pos:start="129:5" pos:end="129:61"><name pos:start="129:5" pos:end="129:22">sysbus_connect_irq</name><argument_list pos:start="129:23" pos:end="129:61">(<argument pos:start="129:24" pos:end="129:30"><expr pos:start="129:24" pos:end="129:30"><name pos:start="129:24" pos:end="129:30">pcihost</name></expr></argument>, <argument pos:start="129:33" pos:end="129:33"><expr pos:start="129:33" pos:end="129:33"><literal type="number" pos:start="129:33" pos:end="129:33">3</literal></expr></argument>, <argument pos:start="129:36" pos:end="129:60"><expr pos:start="129:36" pos:end="129:60"><call pos:start="129:36" pos:end="129:60"><name pos:start="129:36" pos:end="129:51">qdev_get_gpio_in</name><argument_list pos:start="129:52" pos:end="129:60">(<argument pos:start="129:53" pos:end="129:55"><expr pos:start="129:53" pos:end="129:55"><name pos:start="129:53" pos:end="129:55">dev</name></expr></argument>, <argument pos:start="129:58" pos:end="129:59"><expr pos:start="129:58" pos:end="129:59"><literal type="number" pos:start="129:58" pos:end="129:59">13</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:56"><expr pos:start="131:5" pos:end="131:55"><name pos:start="131:5" pos:end="131:11">isa_bus</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <call pos:start="131:15" pos:end="131:55"><name pos:start="131:15" pos:end="131:21">ISA_BUS</name><argument_list pos:start="131:22" pos:end="131:55">(<argument pos:start="131:23" pos:end="131:54"><expr pos:start="131:23" pos:end="131:54"><call pos:start="131:23" pos:end="131:54"><name pos:start="131:23" pos:end="131:40">qdev_get_child_bus</name><argument_list pos:start="131:41" pos:end="131:54">(<argument pos:start="131:42" pos:end="131:44"><expr pos:start="131:42" pos:end="131:44"><name pos:start="131:42" pos:end="131:44">dev</name></expr></argument>, <argument pos:start="131:47" pos:end="131:53"><expr pos:start="131:47" pos:end="131:53"><literal type="string" pos:start="131:47" pos:end="131:53">"isa.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:27">/* Memory controller */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:51"><expr pos:start="137:5" pos:end="137:50"><name pos:start="137:5" pos:end="137:7">dev</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:50"><name pos:start="137:11" pos:end="137:16">DEVICE</name><argument_list pos:start="137:17" pos:end="137:50">(<argument pos:start="137:18" pos:end="137:49"><expr pos:start="137:18" pos:end="137:49"><call pos:start="137:18" pos:end="137:49"><name pos:start="137:18" pos:end="137:27">isa_create</name><argument_list pos:start="137:28" pos:end="137:49">(<argument pos:start="137:29" pos:end="137:35"><expr pos:start="137:29" pos:end="137:35"><name pos:start="137:29" pos:end="137:35">isa_bus</name></expr></argument>, <argument pos:start="137:38" pos:end="137:48"><expr pos:start="137:38" pos:end="137:48"><literal type="string" pos:start="137:38" pos:end="137:48">"rs6000-mc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:61"><expr pos:start="139:5" pos:end="139:60"><call pos:start="139:5" pos:end="139:60"><name pos:start="139:5" pos:end="139:24">qdev_prop_set_uint32</name><argument_list pos:start="139:25" pos:end="139:60">(<argument pos:start="139:26" pos:end="139:28"><expr pos:start="139:26" pos:end="139:28"><name pos:start="139:26" pos:end="139:28">dev</name></expr></argument>, <argument pos:start="139:31" pos:end="139:40"><expr pos:start="139:31" pos:end="139:40"><literal type="string" pos:start="139:31" pos:end="139:40">"ram-size"</literal></expr></argument>, <argument pos:start="139:43" pos:end="139:59"><expr pos:start="139:43" pos:end="139:59"><name pos:start="139:43" pos:end="139:59"><name pos:start="139:43" pos:end="139:49">machine</name><operator pos:start="139:50" pos:end="139:51">-&gt;</operator><name pos:start="139:52" pos:end="139:59">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:26"><expr pos:start="141:5" pos:end="141:25"><call pos:start="141:5" pos:end="141:25"><name pos:start="141:5" pos:end="141:20">qdev_init_nofail</name><argument_list pos:start="141:21" pos:end="141:25">(<argument pos:start="141:22" pos:end="141:24"><expr pos:start="141:22" pos:end="141:24"><name pos:start="141:22" pos:end="141:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:35">/* initialize CMOS checksums */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:27"><expr pos:start="147:5" pos:end="147:26"><name pos:start="147:5" pos:end="147:17">cmos_checksum</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <literal type="number" pos:start="147:21" pos:end="147:26">0x6aa9</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="151:39"><expr pos:start="149:5" pos:end="151:38"><call pos:start="149:5" pos:end="151:38"><name pos:start="149:5" pos:end="149:22">qbus_walk_children</name><argument_list pos:start="149:23" pos:end="151:38">(<argument pos:start="149:24" pos:end="149:35"><expr pos:start="149:24" pos:end="149:35"><call pos:start="149:24" pos:end="149:35"><name pos:start="149:24" pos:end="149:26">BUS</name><argument_list pos:start="149:27" pos:end="149:35">(<argument pos:start="149:28" pos:end="149:34"><expr pos:start="149:28" pos:end="149:34"><name pos:start="149:28" pos:end="149:34">isa_bus</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="149:38" pos:end="149:59"><expr pos:start="149:38" pos:end="149:59"><name pos:start="149:38" pos:end="149:59">prep_set_cmos_checksum</name></expr></argument>, <argument pos:start="149:62" pos:end="149:65"><expr pos:start="149:62" pos:end="149:65"><name pos:start="149:62" pos:end="149:65">NULL</name></expr></argument>, <argument pos:start="149:68" pos:end="149:71"><expr pos:start="149:68" pos:end="149:71"><name pos:start="149:68" pos:end="149:71">NULL</name></expr></argument>, <argument pos:start="149:74" pos:end="149:77"><expr pos:start="149:74" pos:end="149:77"><name pos:start="149:74" pos:end="149:77">NULL</name></expr></argument>,

                       <argument pos:start="151:24" pos:end="151:37"><expr pos:start="151:24" pos:end="151:37"><operator pos:start="151:24" pos:end="151:24">&amp;</operator><name pos:start="151:25" pos:end="151:37">cmos_checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:31">/* add some more devices */</comment>

    <if_stmt pos:start="157:5" pos:end="211:5"><if pos:start="157:5" pos:end="211:5">if <condition pos:start="157:8" pos:end="157:27">(<expr pos:start="157:9" pos:end="157:26"><call pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:24">defaults_enabled</name><argument_list pos:start="157:25" pos:end="157:26">()</argument_list></call></expr>)</condition> <block pos:start="157:29" pos:end="211:5">{<block_content pos:start="159:9" pos:end="209:9">

        <expr_stmt pos:start="159:9" pos:end="159:44"><expr pos:start="159:9" pos:end="159:43"><call pos:start="159:9" pos:end="159:43"><name pos:start="159:9" pos:end="159:25">isa_create_simple</name><argument_list pos:start="159:26" pos:end="159:43">(<argument pos:start="159:27" pos:end="159:33"><expr pos:start="159:27" pos:end="159:33"><name pos:start="159:27" pos:end="159:33">isa_bus</name></expr></argument>, <argument pos:start="159:36" pos:end="159:42"><expr pos:start="159:36" pos:end="159:42"><literal type="string" pos:start="159:36" pos:end="159:42">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:65"><expr pos:start="161:9" pos:end="161:64"><name pos:start="161:9" pos:end="161:14">m48t59</name> <operator pos:start="161:16" pos:end="161:16">=</operator> <call pos:start="161:18" pos:end="161:64"><name pos:start="161:18" pos:end="161:22">NVRAM</name><argument_list pos:start="161:23" pos:end="161:64">(<argument pos:start="161:24" pos:end="161:63"><expr pos:start="161:24" pos:end="161:63"><call pos:start="161:24" pos:end="161:63"><name pos:start="161:24" pos:end="161:40">isa_create_simple</name><argument_list pos:start="161:41" pos:end="161:63">(<argument pos:start="161:42" pos:end="161:48"><expr pos:start="161:42" pos:end="161:48"><name pos:start="161:42" pos:end="161:48">isa_bus</name></expr></argument>, <argument pos:start="161:51" pos:end="161:62"><expr pos:start="161:51" pos:end="161:62"><literal type="string" pos:start="161:51" pos:end="161:62">"isa-m48t59"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:53"><expr pos:start="165:9" pos:end="165:52"><name pos:start="165:9" pos:end="165:11">dev</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="165:52"><name pos:start="165:15" pos:end="165:20">DEVICE</name><argument_list pos:start="165:21" pos:end="165:52">(<argument pos:start="165:22" pos:end="165:51"><expr pos:start="165:22" pos:end="165:51"><call pos:start="165:22" pos:end="165:51"><name pos:start="165:22" pos:end="165:31">isa_create</name><argument_list pos:start="165:32" pos:end="165:51">(<argument pos:start="165:33" pos:end="165:39"><expr pos:start="165:33" pos:end="165:39"><name pos:start="165:33" pos:end="165:39">isa_bus</name></expr></argument>, <argument pos:start="165:42" pos:end="165:50"><expr pos:start="165:42" pos:end="165:50"><literal type="string" pos:start="165:42" pos:end="165:50">"cs4231a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:51"><expr pos:start="167:9" pos:end="167:50"><call pos:start="167:9" pos:end="167:50"><name pos:start="167:9" pos:end="167:28">qdev_prop_set_uint32</name><argument_list pos:start="167:29" pos:end="167:50">(<argument pos:start="167:30" pos:end="167:32"><expr pos:start="167:30" pos:end="167:32"><name pos:start="167:30" pos:end="167:32">dev</name></expr></argument>, <argument pos:start="167:35" pos:end="167:42"><expr pos:start="167:35" pos:end="167:42"><literal type="string" pos:start="167:35" pos:end="167:42">"iobase"</literal></expr></argument>, <argument pos:start="167:45" pos:end="167:49"><expr pos:start="167:45" pos:end="167:49"><literal type="number" pos:start="167:45" pos:end="167:49">0x830</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:45"><expr pos:start="169:9" pos:end="169:44"><call pos:start="169:9" pos:end="169:44"><name pos:start="169:9" pos:end="169:28">qdev_prop_set_uint32</name><argument_list pos:start="169:29" pos:end="169:44">(<argument pos:start="169:30" pos:end="169:32"><expr pos:start="169:30" pos:end="169:32"><name pos:start="169:30" pos:end="169:32">dev</name></expr></argument>, <argument pos:start="169:35" pos:end="169:39"><expr pos:start="169:35" pos:end="169:39"><literal type="string" pos:start="169:35" pos:end="169:39">"irq"</literal></expr></argument>, <argument pos:start="169:42" pos:end="169:43"><expr pos:start="169:42" pos:end="169:43"><literal type="number" pos:start="169:42" pos:end="169:43">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:30"><expr pos:start="171:9" pos:end="171:29"><call pos:start="171:9" pos:end="171:29"><name pos:start="171:9" pos:end="171:24">qdev_init_nofail</name><argument_list pos:start="171:25" pos:end="171:29">(<argument pos:start="171:26" pos:end="171:28"><expr pos:start="171:26" pos:end="171:28"><name pos:start="171:26" pos:end="171:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:53"><expr pos:start="175:9" pos:end="175:52"><name pos:start="175:9" pos:end="175:11">dev</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:52"><name pos:start="175:15" pos:end="175:20">DEVICE</name><argument_list pos:start="175:21" pos:end="175:52">(<argument pos:start="175:22" pos:end="175:51"><expr pos:start="175:22" pos:end="175:51"><call pos:start="175:22" pos:end="175:51"><name pos:start="175:22" pos:end="175:31">isa_create</name><argument_list pos:start="175:32" pos:end="175:51">(<argument pos:start="175:33" pos:end="175:39"><expr pos:start="175:33" pos:end="175:39"><name pos:start="175:33" pos:end="175:39">isa_bus</name></expr></argument>, <argument pos:start="175:42" pos:end="175:50"><expr pos:start="175:42" pos:end="175:50"><literal type="string" pos:start="175:42" pos:end="175:50">"pc87312"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:48"><expr pos:start="177:9" pos:end="177:47"><call pos:start="177:9" pos:end="177:47"><name pos:start="177:9" pos:end="177:28">qdev_prop_set_uint32</name><argument_list pos:start="177:29" pos:end="177:47">(<argument pos:start="177:30" pos:end="177:32"><expr pos:start="177:30" pos:end="177:32"><name pos:start="177:30" pos:end="177:32">dev</name></expr></argument>, <argument pos:start="177:35" pos:end="177:42"><expr pos:start="177:35" pos:end="177:42"><literal type="string" pos:start="177:35" pos:end="177:42">"config"</literal></expr></argument>, <argument pos:start="177:45" pos:end="177:46"><expr pos:start="177:45" pos:end="177:46"><literal type="number" pos:start="177:45" pos:end="177:46">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:30"><expr pos:start="179:9" pos:end="179:29"><call pos:start="179:9" pos:end="179:29"><name pos:start="179:9" pos:end="179:24">qdev_init_nofail</name><argument_list pos:start="179:25" pos:end="179:29">(<argument pos:start="179:26" pos:end="179:28"><expr pos:start="179:26" pos:end="179:28"><name pos:start="179:26" pos:end="179:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:59"><expr pos:start="183:9" pos:end="183:58"><name pos:start="183:9" pos:end="183:11">dev</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="183:58"><name pos:start="183:15" pos:end="183:20">DEVICE</name><argument_list pos:start="183:21" pos:end="183:58">(<argument pos:start="183:22" pos:end="183:57"><expr pos:start="183:22" pos:end="183:57"><call pos:start="183:22" pos:end="183:57"><name pos:start="183:22" pos:end="183:31">isa_create</name><argument_list pos:start="183:32" pos:end="183:57">(<argument pos:start="183:33" pos:end="183:39"><expr pos:start="183:33" pos:end="183:39"><name pos:start="183:33" pos:end="183:39">isa_bus</name></expr></argument>, <argument pos:start="183:42" pos:end="183:56"><expr pos:start="183:42" pos:end="183:56"><literal type="string" pos:start="183:42" pos:end="183:56">"prep-systemio"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:57"><expr pos:start="185:9" pos:end="185:56"><call pos:start="185:9" pos:end="185:56"><name pos:start="185:9" pos:end="185:28">qdev_prop_set_uint32</name><argument_list pos:start="185:29" pos:end="185:56">(<argument pos:start="185:30" pos:end="185:32"><expr pos:start="185:30" pos:end="185:32"><name pos:start="185:30" pos:end="185:32">dev</name></expr></argument>, <argument pos:start="185:35" pos:end="185:49"><expr pos:start="185:35" pos:end="185:49"><literal type="string" pos:start="185:35" pos:end="185:49">"ibm-planar-id"</literal></expr></argument>, <argument pos:start="185:52" pos:end="185:55"><expr pos:start="185:52" pos:end="185:55"><literal type="number" pos:start="185:52" pos:end="185:55">0xfc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:53"><expr pos:start="187:9" pos:end="187:52"><call pos:start="187:9" pos:end="187:52"><name pos:start="187:9" pos:end="187:28">qdev_prop_set_uint32</name><argument_list pos:start="187:29" pos:end="187:52">(<argument pos:start="187:30" pos:end="187:32"><expr pos:start="187:30" pos:end="187:32"><name pos:start="187:30" pos:end="187:32">dev</name></expr></argument>, <argument pos:start="187:35" pos:end="187:45"><expr pos:start="187:35" pos:end="187:45"><literal type="string" pos:start="187:35" pos:end="187:45">"equipment"</literal></expr></argument>, <argument pos:start="187:48" pos:end="187:51"><expr pos:start="187:48" pos:end="187:51"><literal type="number" pos:start="187:48" pos:end="187:51">0xc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:30"><expr pos:start="189:9" pos:end="189:29"><call pos:start="189:9" pos:end="189:29"><name pos:start="189:9" pos:end="189:24">qdev_init_nofail</name><argument_list pos:start="189:25" pos:end="189:29">(<argument pos:start="189:26" pos:end="189:28"><expr pos:start="189:26" pos:end="189:28"><name pos:start="189:26" pos:end="189:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="193:9" pos:end="193:65"><expr pos:start="193:9" pos:end="193:64"><call pos:start="193:9" pos:end="193:64"><name pos:start="193:9" pos:end="193:25">pci_create_simple</name><argument_list pos:start="193:26" pos:end="193:64">(<argument pos:start="193:27" pos:end="193:33"><expr pos:start="193:27" pos:end="193:33"><name pos:start="193:27" pos:end="193:33">pci_bus</name></expr></argument>, <argument pos:start="193:36" pos:end="193:50"><expr pos:start="193:36" pos:end="193:50"><call pos:start="193:36" pos:end="193:50"><name pos:start="193:36" pos:end="193:44">PCI_DEVFN</name><argument_list pos:start="193:45" pos:end="193:50">(<argument pos:start="193:46" pos:end="193:46"><expr pos:start="193:46" pos:end="193:46"><literal type="number" pos:start="193:46" pos:end="193:46">1</literal></expr></argument>, <argument pos:start="193:49" pos:end="193:49"><expr pos:start="193:49" pos:end="193:49"><literal type="number" pos:start="193:49" pos:end="193:49">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:53" pos:end="193:63"><expr pos:start="193:53" pos:end="193:63"><literal type="string" pos:start="193:53" pos:end="193:63">"lsi53c810"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="197:9" pos:end="197:45">/* XXX: s3-trio at PCI_DEVFN(2, 0) */</comment>

        <expr_stmt pos:start="199:9" pos:end="199:30"><expr pos:start="199:9" pos:end="199:29"><call pos:start="199:9" pos:end="199:29"><name pos:start="199:9" pos:end="199:20">pci_vga_init</name><argument_list pos:start="199:21" pos:end="199:29">(<argument pos:start="199:22" pos:end="199:28"><expr pos:start="199:22" pos:end="199:28"><name pos:start="199:22" pos:end="199:28">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="203:9" pos:end="209:9">for <control pos:start="203:13" pos:end="203:37">(<init pos:start="203:14" pos:end="203:19"><expr pos:start="203:14" pos:end="203:18"><name pos:start="203:14" pos:end="203:14">i</name> <operator pos:start="203:16" pos:end="203:16">=</operator> <literal type="number" pos:start="203:18" pos:end="203:18">0</literal></expr>;</init> <condition pos:start="203:21" pos:end="203:32"><expr pos:start="203:21" pos:end="203:31"><name pos:start="203:21" pos:end="203:21">i</name> <operator pos:start="203:23" pos:end="203:23">&lt;</operator> <name pos:start="203:25" pos:end="203:31">nb_nics</name></expr>;</condition> <incr pos:start="203:34" pos:end="203:36"><expr pos:start="203:34" pos:end="203:36"><name pos:start="203:34" pos:end="203:34">i</name><operator pos:start="203:35" pos:end="203:36">++</operator></expr></incr>)</control> <block pos:start="203:39" pos:end="209:9">{<block_content pos:start="205:13" pos:end="207:53">

            <expr_stmt pos:start="205:13" pos:end="207:53"><expr pos:start="205:13" pos:end="207:52"><call pos:start="205:13" pos:end="207:52"><name pos:start="205:13" pos:end="205:31">pci_nic_init_nofail</name><argument_list pos:start="205:32" pos:end="207:52">(<argument pos:start="205:33" pos:end="205:44"><expr pos:start="205:33" pos:end="205:44"><operator pos:start="205:33" pos:end="205:33">&amp;</operator><name pos:start="205:34" pos:end="205:44"><name pos:start="205:34" pos:end="205:41">nd_table</name><index pos:start="205:42" pos:end="205:44">[<expr pos:start="205:43" pos:end="205:43"><name pos:start="205:43" pos:end="205:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="205:47" pos:end="205:53"><expr pos:start="205:47" pos:end="205:53"><name pos:start="205:47" pos:end="205:53">pci_bus</name></expr></argument>, <argument pos:start="205:56" pos:end="205:62"><expr pos:start="205:56" pos:end="205:62"><literal type="string" pos:start="205:56" pos:end="205:62">"pcnet"</literal></expr></argument>,

                                <argument pos:start="207:33" pos:end="207:51"><expr pos:start="207:33" pos:end="207:51"><ternary pos:start="207:33" pos:end="207:51"><condition pos:start="207:33" pos:end="207:40"><expr pos:start="207:33" pos:end="207:38"><name pos:start="207:33" pos:end="207:33">i</name> <operator pos:start="207:35" pos:end="207:36">==</operator> <literal type="number" pos:start="207:38" pos:end="207:38">0</literal></expr> ?</condition><then pos:start="207:42" pos:end="207:44"> <expr pos:start="207:42" pos:end="207:44"><literal type="string" pos:start="207:42" pos:end="207:44">"3"</literal></expr> </then><else pos:start="207:46" pos:end="207:51">: <expr pos:start="207:48" pos:end="207:51"><name pos:start="207:48" pos:end="207:51">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:53">/* Prepare firmware configuration for OpenBIOS */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:53"><expr pos:start="217:5" pos:end="217:52"><name pos:start="217:5" pos:end="217:10">fw_cfg</name> <operator pos:start="217:12" pos:end="217:12">=</operator> <call pos:start="217:14" pos:end="217:52"><name pos:start="217:14" pos:end="217:28">fw_cfg_init_mem</name><argument_list pos:start="217:29" pos:end="217:52">(<argument pos:start="217:30" pos:end="217:37"><expr pos:start="217:30" pos:end="217:37"><name pos:start="217:30" pos:end="217:37">CFG_ADDR</name></expr></argument>, <argument pos:start="217:40" pos:end="217:51"><expr pos:start="217:40" pos:end="217:51"><name pos:start="217:40" pos:end="217:47">CFG_ADDR</name> <operator pos:start="217:49" pos:end="217:49">+</operator> <literal type="number" pos:start="217:51" pos:end="217:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="221:5" pos:end="299:5"><if pos:start="221:5" pos:end="295:5">if <condition pos:start="221:8" pos:end="221:33">(<expr pos:start="221:9" pos:end="221:32"><name pos:start="221:9" pos:end="221:32"><name pos:start="221:9" pos:end="221:15">machine</name><operator pos:start="221:16" pos:end="221:17">-&gt;</operator><name pos:start="221:18" pos:end="221:32">kernel_filename</name></name></expr>)</condition> <block pos:start="221:35" pos:end="295:5">{<block_content pos:start="225:9" pos:end="293:26">

        <comment type="block" pos:start="223:9" pos:end="223:25">/* load kernel */</comment>

        <expr_stmt pos:start="225:9" pos:end="225:39"><expr pos:start="225:9" pos:end="225:38"><name pos:start="225:9" pos:end="225:19">kernel_base</name> <operator pos:start="225:21" pos:end="225:21">=</operator> <name pos:start="225:23" pos:end="225:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="231:75"><expr pos:start="227:9" pos:end="231:74"><name pos:start="227:9" pos:end="227:19">kernel_size</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <call pos:start="227:23" pos:end="231:74"><name pos:start="227:23" pos:end="227:41">load_image_targphys</name><argument_list pos:start="227:42" pos:end="231:74">(<argument pos:start="227:43" pos:end="227:66"><expr pos:start="227:43" pos:end="227:66"><name pos:start="227:43" pos:end="227:66"><name pos:start="227:43" pos:end="227:49">machine</name><operator pos:start="227:50" pos:end="227:51">-&gt;</operator><name pos:start="227:52" pos:end="227:66">kernel_filename</name></name></expr></argument>,

                                          <argument pos:start="229:43" pos:end="229:53"><expr pos:start="229:43" pos:end="229:53"><name pos:start="229:43" pos:end="229:53">kernel_base</name></expr></argument>,

                                          <argument pos:start="231:43" pos:end="231:73"><expr pos:start="231:43" pos:end="231:73"><name pos:start="231:43" pos:end="231:59"><name pos:start="231:43" pos:end="231:49">machine</name><operator pos:start="231:50" pos:end="231:51">-&gt;</operator><name pos:start="231:52" pos:end="231:59">ram_size</name></name> <operator pos:start="231:61" pos:end="231:61">-</operator> <name pos:start="231:63" pos:end="231:73">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="233:9" pos:end="241:9"><if pos:start="233:9" pos:end="241:9">if <condition pos:start="233:12" pos:end="233:28">(<expr pos:start="233:13" pos:end="233:27"><name pos:start="233:13" pos:end="233:23">kernel_size</name> <operator pos:start="233:25" pos:end="233:25">&lt;</operator> <literal type="number" pos:start="233:27" pos:end="233:27">0</literal></expr>)</condition> <block pos:start="233:30" pos:end="241:9">{<block_content pos:start="235:13" pos:end="239:20">

            <expr_stmt pos:start="235:13" pos:end="237:51"><expr pos:start="235:13" pos:end="237:50"><call pos:start="235:13" pos:end="237:50"><name pos:start="235:13" pos:end="235:24">error_report</name><argument_list pos:start="235:25" pos:end="237:50">(<argument pos:start="235:26" pos:end="235:53"><expr pos:start="235:26" pos:end="235:53"><literal type="string" pos:start="235:26" pos:end="235:53">"could not load kernel '%s'"</literal></expr></argument>,

                         <argument pos:start="237:26" pos:end="237:49"><expr pos:start="237:26" pos:end="237:49"><name pos:start="237:26" pos:end="237:49"><name pos:start="237:26" pos:end="237:32">machine</name><operator pos:start="237:33" pos:end="237:34">-&gt;</operator><name pos:start="237:35" pos:end="237:49">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:20"><expr pos:start="239:13" pos:end="239:19"><call pos:start="239:13" pos:end="239:19"><name pos:start="239:13" pos:end="239:16">exit</name><argument_list pos:start="239:17" pos:end="239:19">(<argument pos:start="239:18" pos:end="239:18"><expr pos:start="239:18" pos:end="239:18"><literal type="number" pos:start="239:18" pos:end="239:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:64"><expr pos:start="243:9" pos:end="243:63"><call pos:start="243:9" pos:end="243:63"><name pos:start="243:9" pos:end="243:22">fw_cfg_add_i32</name><argument_list pos:start="243:23" pos:end="243:63">(<argument pos:start="243:24" pos:end="243:29"><expr pos:start="243:24" pos:end="243:29"><name pos:start="243:24" pos:end="243:29">fw_cfg</name></expr></argument>, <argument pos:start="243:32" pos:end="243:49"><expr pos:start="243:32" pos:end="243:49"><name pos:start="243:32" pos:end="243:49">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="243:52" pos:end="243:62"><expr pos:start="243:52" pos:end="243:62"><name pos:start="243:52" pos:end="243:62">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:64"><expr pos:start="245:9" pos:end="245:63"><call pos:start="245:9" pos:end="245:63"><name pos:start="245:9" pos:end="245:22">fw_cfg_add_i32</name><argument_list pos:start="245:23" pos:end="245:63">(<argument pos:start="245:24" pos:end="245:29"><expr pos:start="245:24" pos:end="245:29"><name pos:start="245:24" pos:end="245:29">fw_cfg</name></expr></argument>, <argument pos:start="245:32" pos:end="245:49"><expr pos:start="245:32" pos:end="245:49"><name pos:start="245:32" pos:end="245:49">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="245:52" pos:end="245:62"><expr pos:start="245:52" pos:end="245:62"><name pos:start="245:52" pos:end="245:62">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="247:9" pos:end="247:25">/* load initrd */</comment>

        <if_stmt pos:start="249:9" pos:end="273:9"><if pos:start="249:9" pos:end="273:9">if <condition pos:start="249:12" pos:end="249:37">(<expr pos:start="249:13" pos:end="249:36"><name pos:start="249:13" pos:end="249:36"><name pos:start="249:13" pos:end="249:19">machine</name><operator pos:start="249:20" pos:end="249:21">-&gt;</operator><name pos:start="249:22" pos:end="249:36">initrd_filename</name></name></expr>)</condition> <block pos:start="249:39" pos:end="273:9">{<block_content pos:start="251:13" pos:end="271:68">

            <expr_stmt pos:start="251:13" pos:end="251:43"><expr pos:start="251:13" pos:end="251:42"><name pos:start="251:13" pos:end="251:23">initrd_base</name> <operator pos:start="251:25" pos:end="251:25">=</operator> <name pos:start="251:27" pos:end="251:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="257:79"><expr pos:start="253:13" pos:end="257:78"><name pos:start="253:13" pos:end="253:23">initrd_size</name> <operator pos:start="253:25" pos:end="253:25">=</operator> <call pos:start="253:27" pos:end="257:78"><name pos:start="253:27" pos:end="253:45">load_image_targphys</name><argument_list pos:start="253:46" pos:end="257:78">(<argument pos:start="253:47" pos:end="253:70"><expr pos:start="253:47" pos:end="253:70"><name pos:start="253:47" pos:end="253:70"><name pos:start="253:47" pos:end="253:53">machine</name><operator pos:start="253:54" pos:end="253:55">-&gt;</operator><name pos:start="253:56" pos:end="253:70">initrd_filename</name></name></expr></argument>,

                                              <argument pos:start="255:47" pos:end="255:57"><expr pos:start="255:47" pos:end="255:57"><name pos:start="255:47" pos:end="255:57">initrd_base</name></expr></argument>,

                                              <argument pos:start="257:47" pos:end="257:77"><expr pos:start="257:47" pos:end="257:77"><name pos:start="257:47" pos:end="257:63"><name pos:start="257:47" pos:end="257:53">machine</name><operator pos:start="257:54" pos:end="257:55">-&gt;</operator><name pos:start="257:56" pos:end="257:63">ram_size</name></name> <operator pos:start="257:65" pos:end="257:65">-</operator> <name pos:start="257:67" pos:end="257:77">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="259:13" pos:end="267:13"><if pos:start="259:13" pos:end="267:13">if <condition pos:start="259:16" pos:end="259:32">(<expr pos:start="259:17" pos:end="259:31"><name pos:start="259:17" pos:end="259:27">initrd_size</name> <operator pos:start="259:29" pos:end="259:29">&lt;</operator> <literal type="number" pos:start="259:31" pos:end="259:31">0</literal></expr>)</condition> <block pos:start="259:34" pos:end="267:13">{<block_content pos:start="261:17" pos:end="265:24">

                <expr_stmt pos:start="261:17" pos:end="263:55"><expr pos:start="261:17" pos:end="263:54"><call pos:start="261:17" pos:end="263:54"><name pos:start="261:17" pos:end="261:28">error_report</name><argument_list pos:start="261:29" pos:end="263:54">(<argument pos:start="261:30" pos:end="261:67"><expr pos:start="261:30" pos:end="261:67"><literal type="string" pos:start="261:30" pos:end="261:67">"could not load initial ram disk '%s'"</literal></expr></argument>,

                             <argument pos:start="263:30" pos:end="263:53"><expr pos:start="263:30" pos:end="263:53"><name pos:start="263:30" pos:end="263:53"><name pos:start="263:30" pos:end="263:36">machine</name><operator pos:start="263:37" pos:end="263:38">-&gt;</operator><name pos:start="263:39" pos:end="263:53">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:24"><expr pos:start="265:17" pos:end="265:23"><call pos:start="265:17" pos:end="265:23"><name pos:start="265:17" pos:end="265:20">exit</name><argument_list pos:start="265:21" pos:end="265:23">(<argument pos:start="265:22" pos:end="265:22"><expr pos:start="265:22" pos:end="265:22"><literal type="number" pos:start="265:22" pos:end="265:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:68"><expr pos:start="269:13" pos:end="269:67"><call pos:start="269:13" pos:end="269:67"><name pos:start="269:13" pos:end="269:26">fw_cfg_add_i32</name><argument_list pos:start="269:27" pos:end="269:67">(<argument pos:start="269:28" pos:end="269:33"><expr pos:start="269:28" pos:end="269:33"><name pos:start="269:28" pos:end="269:33">fw_cfg</name></expr></argument>, <argument pos:start="269:36" pos:end="269:53"><expr pos:start="269:36" pos:end="269:53"><name pos:start="269:36" pos:end="269:53">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="269:56" pos:end="269:66"><expr pos:start="269:56" pos:end="269:66"><name pos:start="269:56" pos:end="269:66">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:68"><expr pos:start="271:13" pos:end="271:67"><call pos:start="271:13" pos:end="271:67"><name pos:start="271:13" pos:end="271:26">fw_cfg_add_i32</name><argument_list pos:start="271:27" pos:end="271:67">(<argument pos:start="271:28" pos:end="271:33"><expr pos:start="271:28" pos:end="271:33"><name pos:start="271:28" pos:end="271:33">fw_cfg</name></expr></argument>, <argument pos:start="271:36" pos:end="271:53"><expr pos:start="271:36" pos:end="271:53"><name pos:start="271:36" pos:end="271:53">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="271:56" pos:end="271:66"><expr pos:start="271:56" pos:end="271:66"><name pos:start="271:56" pos:end="271:66">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="275:9" pos:end="291:9"><if pos:start="275:9" pos:end="291:9">if <condition pos:start="275:12" pos:end="275:64">(<expr pos:start="275:13" pos:end="275:63"><name pos:start="275:13" pos:end="275:35"><name pos:start="275:13" pos:end="275:19">machine</name><operator pos:start="275:20" pos:end="275:21">-&gt;</operator><name pos:start="275:22" pos:end="275:35">kernel_cmdline</name></name> <operator pos:start="275:37" pos:end="275:38">&amp;&amp;</operator> <operator pos:start="275:40" pos:end="275:40">*</operator><name pos:start="275:41" pos:end="275:63"><name pos:start="275:41" pos:end="275:47">machine</name><operator pos:start="275:48" pos:end="275:49">-&gt;</operator><name pos:start="275:50" pos:end="275:63">kernel_cmdline</name></name></expr>)</condition> <block pos:start="275:66" pos:end="291:9">{<block_content pos:start="277:13" pos:end="289:64">

            <expr_stmt pos:start="277:13" pos:end="277:72"><expr pos:start="277:13" pos:end="277:71"><call pos:start="277:13" pos:end="277:71"><name pos:start="277:13" pos:end="277:26">fw_cfg_add_i32</name><argument_list pos:start="277:27" pos:end="277:71">(<argument pos:start="277:28" pos:end="277:33"><expr pos:start="277:28" pos:end="277:33"><name pos:start="277:28" pos:end="277:33">fw_cfg</name></expr></argument>, <argument pos:start="277:36" pos:end="277:56"><expr pos:start="277:36" pos:end="277:56"><name pos:start="277:36" pos:end="277:56">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="277:59" pos:end="277:70"><expr pos:start="277:59" pos:end="277:70"><name pos:start="277:59" pos:end="277:70">CMDLINE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="281:54"><expr pos:start="279:13" pos:end="281:53"><call pos:start="279:13" pos:end="281:53"><name pos:start="279:13" pos:end="279:28">pstrcpy_targphys</name><argument_list pos:start="279:29" pos:end="281:53">(<argument pos:start="279:30" pos:end="279:38"><expr pos:start="279:30" pos:end="279:38"><literal type="string" pos:start="279:30" pos:end="279:38">"cmdline"</literal></expr></argument>, <argument pos:start="279:41" pos:end="279:52"><expr pos:start="279:41" pos:end="279:52"><name pos:start="279:41" pos:end="279:52">CMDLINE_ADDR</name></expr></argument>, <argument pos:start="279:55" pos:end="279:70"><expr pos:start="279:55" pos:end="279:70"><name pos:start="279:55" pos:end="279:70">TARGET_PAGE_SIZE</name></expr></argument>,

                             <argument pos:start="281:30" pos:end="281:52"><expr pos:start="281:30" pos:end="281:52"><name pos:start="281:30" pos:end="281:52"><name pos:start="281:30" pos:end="281:36">machine</name><operator pos:start="281:37" pos:end="281:38">-&gt;</operator><name pos:start="281:39" pos:end="281:52">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="285:55"><expr pos:start="283:13" pos:end="285:54"><call pos:start="283:13" pos:end="285:54"><name pos:start="283:13" pos:end="283:29">fw_cfg_add_string</name><argument_list pos:start="283:30" pos:end="285:54">(<argument pos:start="283:31" pos:end="283:36"><expr pos:start="283:31" pos:end="283:36"><name pos:start="283:31" pos:end="283:36">fw_cfg</name></expr></argument>, <argument pos:start="283:39" pos:end="283:57"><expr pos:start="283:39" pos:end="283:57"><name pos:start="283:39" pos:end="283:57">FW_CFG_CMDLINE_DATA</name></expr></argument>,

                              <argument pos:start="285:31" pos:end="285:53"><expr pos:start="285:31" pos:end="285:53"><name pos:start="285:31" pos:end="285:53"><name pos:start="285:31" pos:end="285:37">machine</name><operator pos:start="285:38" pos:end="285:39">-&gt;</operator><name pos:start="285:40" pos:end="285:53">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="287:13" pos:end="289:64"><expr pos:start="287:13" pos:end="289:63"><call pos:start="287:13" pos:end="289:63"><name pos:start="287:13" pos:end="287:26">fw_cfg_add_i32</name><argument_list pos:start="287:27" pos:end="289:63">(<argument pos:start="287:28" pos:end="287:33"><expr pos:start="287:28" pos:end="287:33"><name pos:start="287:28" pos:end="287:33">fw_cfg</name></expr></argument>, <argument pos:start="287:36" pos:end="287:54"><expr pos:start="287:36" pos:end="287:54"><name pos:start="287:36" pos:end="287:54">FW_CFG_CMDLINE_SIZE</name></expr></argument>,

                           <argument pos:start="289:28" pos:end="289:62"><expr pos:start="289:28" pos:end="289:62"><call pos:start="289:28" pos:end="289:58"><name pos:start="289:28" pos:end="289:33">strlen</name><argument_list pos:start="289:34" pos:end="289:58">(<argument pos:start="289:35" pos:end="289:57"><expr pos:start="289:35" pos:end="289:57"><name pos:start="289:35" pos:end="289:57"><name pos:start="289:35" pos:end="289:41">machine</name><operator pos:start="289:42" pos:end="289:43">-&gt;</operator><name pos:start="289:44" pos:end="289:57">kernel_cmdline</name></name></expr></argument>)</argument_list></call> <operator pos:start="289:60" pos:end="289:60">+</operator> <literal type="number" pos:start="289:62" pos:end="289:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:26"><expr pos:start="293:9" pos:end="293:25"><name pos:start="293:9" pos:end="293:19">boot_device</name> <operator pos:start="293:21" pos:end="293:21">=</operator> <literal type="char" pos:start="293:23" pos:end="293:25">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="295:7" pos:end="299:5">else <block pos:start="295:12" pos:end="299:5">{<block_content pos:start="297:9" pos:end="297:45">

        <expr_stmt pos:start="297:9" pos:end="297:45"><expr pos:start="297:9" pos:end="297:44"><name pos:start="297:9" pos:end="297:19">boot_device</name> <operator pos:start="297:21" pos:end="297:21">=</operator> <name pos:start="297:23" pos:end="297:44"><name pos:start="297:23" pos:end="297:29">machine</name><operator pos:start="297:30" pos:end="297:31">-&gt;</operator><name pos:start="297:32" pos:end="297:41">boot_order</name><index pos:start="297:42" pos:end="297:44">[<expr pos:start="297:43" pos:end="297:43"><literal type="number" pos:start="297:43" pos:end="297:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="303:5" pos:end="303:64"><expr pos:start="303:5" pos:end="303:63"><call pos:start="303:5" pos:end="303:63"><name pos:start="303:5" pos:end="303:18">fw_cfg_add_i16</name><argument_list pos:start="303:19" pos:end="303:63">(<argument pos:start="303:20" pos:end="303:25"><expr pos:start="303:20" pos:end="303:25"><name pos:start="303:20" pos:end="303:25">fw_cfg</name></expr></argument>, <argument pos:start="303:28" pos:end="303:42"><expr pos:start="303:28" pos:end="303:42"><name pos:start="303:28" pos:end="303:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="303:45" pos:end="303:62"><expr pos:start="303:45" pos:end="303:62"><operator pos:start="303:45" pos:end="303:45">(</operator><name pos:start="303:46" pos:end="303:53">uint16_t</name><operator pos:start="303:54" pos:end="303:54">)</operator><name pos:start="303:55" pos:end="303:62">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="305:73"><expr pos:start="305:5" pos:end="305:72"><call pos:start="305:5" pos:end="305:72"><name pos:start="305:5" pos:end="305:18">fw_cfg_add_i64</name><argument_list pos:start="305:19" pos:end="305:72">(<argument pos:start="305:20" pos:end="305:25"><expr pos:start="305:20" pos:end="305:25"><name pos:start="305:20" pos:end="305:25">fw_cfg</name></expr></argument>, <argument pos:start="305:28" pos:end="305:42"><expr pos:start="305:28" pos:end="305:42"><name pos:start="305:28" pos:end="305:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="305:45" pos:end="305:71"><expr pos:start="305:45" pos:end="305:71"><operator pos:start="305:45" pos:end="305:45">(</operator><name pos:start="305:46" pos:end="305:53">uint64_t</name><operator pos:start="305:54" pos:end="305:54">)</operator><name pos:start="305:55" pos:end="305:71"><name pos:start="305:55" pos:end="305:61">machine</name><operator pos:start="305:62" pos:end="305:63">-&gt;</operator><name pos:start="305:64" pos:end="305:71">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:57"><expr pos:start="307:5" pos:end="307:56"><call pos:start="307:5" pos:end="307:56"><name pos:start="307:5" pos:end="307:18">fw_cfg_add_i16</name><argument_list pos:start="307:19" pos:end="307:56">(<argument pos:start="307:20" pos:end="307:25"><expr pos:start="307:20" pos:end="307:25"><name pos:start="307:20" pos:end="307:25">fw_cfg</name></expr></argument>, <argument pos:start="307:28" pos:end="307:44"><expr pos:start="307:28" pos:end="307:44"><name pos:start="307:28" pos:end="307:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="307:47" pos:end="307:55"><expr pos:start="307:47" pos:end="307:55"><name pos:start="307:47" pos:end="307:55">ARCH_PREP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="311:5" pos:end="311:60"><expr pos:start="311:5" pos:end="311:59"><call pos:start="311:5" pos:end="311:59"><name pos:start="311:5" pos:end="311:18">fw_cfg_add_i16</name><argument_list pos:start="311:19" pos:end="311:59">(<argument pos:start="311:20" pos:end="311:25"><expr pos:start="311:20" pos:end="311:25"><name pos:start="311:20" pos:end="311:25">fw_cfg</name></expr></argument>, <argument pos:start="311:28" pos:end="311:43"><expr pos:start="311:28" pos:end="311:43"><name pos:start="311:28" pos:end="311:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="311:46" pos:end="311:58"><expr pos:start="311:46" pos:end="311:58"><name pos:start="311:46" pos:end="311:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:62"><expr pos:start="313:5" pos:end="313:61"><call pos:start="313:5" pos:end="313:61"><name pos:start="313:5" pos:end="313:18">fw_cfg_add_i16</name><argument_list pos:start="313:19" pos:end="313:61">(<argument pos:start="313:20" pos:end="313:25"><expr pos:start="313:20" pos:end="313:25"><name pos:start="313:20" pos:end="313:25">fw_cfg</name></expr></argument>, <argument pos:start="313:28" pos:end="313:44"><expr pos:start="313:28" pos:end="313:44"><name pos:start="313:28" pos:end="313:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="313:47" pos:end="313:60"><expr pos:start="313:47" pos:end="313:60"><name pos:start="313:47" pos:end="313:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:60"><expr pos:start="315:5" pos:end="315:59"><call pos:start="315:5" pos:end="315:59"><name pos:start="315:5" pos:end="315:18">fw_cfg_add_i16</name><argument_list pos:start="315:19" pos:end="315:59">(<argument pos:start="315:20" pos:end="315:25"><expr pos:start="315:20" pos:end="315:25"><name pos:start="315:20" pos:end="315:25">fw_cfg</name></expr></argument>, <argument pos:start="315:28" pos:end="315:43"><expr pos:start="315:28" pos:end="315:43"><name pos:start="315:28" pos:end="315:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="315:46" pos:end="315:58"><expr pos:start="315:46" pos:end="315:58"><name pos:start="315:46" pos:end="315:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="319:5" pos:end="319:61"><expr pos:start="319:5" pos:end="319:60"><call pos:start="319:5" pos:end="319:60"><name pos:start="319:5" pos:end="319:18">fw_cfg_add_i32</name><argument_list pos:start="319:19" pos:end="319:60">(<argument pos:start="319:20" pos:end="319:25"><expr pos:start="319:20" pos:end="319:25"><name pos:start="319:20" pos:end="319:25">fw_cfg</name></expr></argument>, <argument pos:start="319:28" pos:end="319:44"><expr pos:start="319:28" pos:end="319:44"><name pos:start="319:28" pos:end="319:44">FW_CFG_PPC_IS_KVM</name></expr></argument>, <argument pos:start="319:47" pos:end="319:59"><expr pos:start="319:47" pos:end="319:59"><call pos:start="319:47" pos:end="319:59"><name pos:start="319:47" pos:end="319:57">kvm_enabled</name><argument_list pos:start="319:58" pos:end="319:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="321:5" pos:end="345:5"><if pos:start="321:5" pos:end="341:5">if <condition pos:start="321:8" pos:end="321:22">(<expr pos:start="321:9" pos:end="321:21"><call pos:start="321:9" pos:end="321:21"><name pos:start="321:9" pos:end="321:19">kvm_enabled</name><argument_list pos:start="321:20" pos:end="321:21">()</argument_list></call></expr>)</condition> <block pos:start="321:24" pos:end="341:5">{<block_content pos:start="325:9" pos:end="340:0">

<cpp:ifdef pos:start="323:1" pos:end="323:17">#<cpp:directive pos:start="323:2" pos:end="323:6">ifdef</cpp:directive> <name pos:start="323:8" pos:end="323:17">CONFIG_KVM</name></cpp:ifdef>

        <decl_stmt pos:start="325:9" pos:end="325:27"><decl pos:start="325:9" pos:end="325:26"><type pos:start="325:9" pos:end="325:17"><name pos:start="325:9" pos:end="325:15">uint8_t</name> <modifier pos:start="325:17" pos:end="325:17">*</modifier></type><name pos:start="325:18" pos:end="325:26">hypercall</name></decl>;</decl_stmt>



        <expr_stmt pos:start="329:9" pos:end="329:71"><expr pos:start="329:9" pos:end="329:70"><call pos:start="329:9" pos:end="329:70"><name pos:start="329:9" pos:end="329:22">fw_cfg_add_i32</name><argument_list pos:start="329:23" pos:end="329:70">(<argument pos:start="329:24" pos:end="329:29"><expr pos:start="329:24" pos:end="329:29"><name pos:start="329:24" pos:end="329:29">fw_cfg</name></expr></argument>, <argument pos:start="329:32" pos:end="329:48"><expr pos:start="329:32" pos:end="329:48"><name pos:start="329:32" pos:end="329:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="329:51" pos:end="329:69"><expr pos:start="329:51" pos:end="329:69"><call pos:start="329:51" pos:end="329:69"><name pos:start="329:51" pos:end="329:67">kvmppc_get_tbfreq</name><argument_list pos:start="329:68" pos:end="329:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:33"><expr pos:start="331:9" pos:end="331:32"><name pos:start="331:9" pos:end="331:17">hypercall</name> <operator pos:start="331:19" pos:end="331:19">=</operator> <call pos:start="331:21" pos:end="331:32"><name pos:start="331:21" pos:end="331:28">g_malloc</name><argument_list pos:start="331:29" pos:end="331:32">(<argument pos:start="331:30" pos:end="331:31"><expr pos:start="331:30" pos:end="331:31"><literal type="number" pos:start="331:30" pos:end="331:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:49"><expr pos:start="333:9" pos:end="333:48"><call pos:start="333:9" pos:end="333:48"><name pos:start="333:9" pos:end="333:28">kvmppc_get_hypercall</name><argument_list pos:start="333:29" pos:end="333:48">(<argument pos:start="333:30" pos:end="333:32"><expr pos:start="333:30" pos:end="333:32"><name pos:start="333:30" pos:end="333:32">env</name></expr></argument>, <argument pos:start="333:35" pos:end="333:43"><expr pos:start="333:35" pos:end="333:43"><name pos:start="333:35" pos:end="333:43">hypercall</name></expr></argument>, <argument pos:start="333:46" pos:end="333:47"><expr pos:start="333:46" pos:end="333:47"><literal type="number" pos:start="333:46" pos:end="333:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:67"><expr pos:start="335:9" pos:end="335:66"><call pos:start="335:9" pos:end="335:66"><name pos:start="335:9" pos:end="335:24">fw_cfg_add_bytes</name><argument_list pos:start="335:25" pos:end="335:66">(<argument pos:start="335:26" pos:end="335:31"><expr pos:start="335:26" pos:end="335:31"><name pos:start="335:26" pos:end="335:31">fw_cfg</name></expr></argument>, <argument pos:start="335:34" pos:end="335:50"><expr pos:start="335:34" pos:end="335:50"><name pos:start="335:34" pos:end="335:50">FW_CFG_PPC_KVM_HC</name></expr></argument>, <argument pos:start="335:53" pos:end="335:61"><expr pos:start="335:53" pos:end="335:61"><name pos:start="335:53" pos:end="335:61">hypercall</name></expr></argument>, <argument pos:start="335:64" pos:end="335:65"><expr pos:start="335:64" pos:end="335:65"><literal type="number" pos:start="335:64" pos:end="335:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="340:0"><expr pos:start="337:9" pos:end="337:60"><call pos:start="337:9" pos:end="337:60"><name pos:start="337:9" pos:end="337:22">fw_cfg_add_i32</name><argument_list pos:start="337:23" pos:end="337:60">(<argument pos:start="337:24" pos:end="337:29"><expr pos:start="337:24" pos:end="337:29"><name pos:start="337:24" pos:end="337:29">fw_cfg</name></expr></argument>, <argument pos:start="337:32" pos:end="337:49"><expr pos:start="337:32" pos:end="337:49"><name pos:start="337:32" pos:end="337:49">FW_CFG_PPC_KVM_PID</name></expr></argument>, <argument pos:start="337:52" pos:end="337:59"><expr pos:start="337:52" pos:end="337:59"><call pos:start="337:52" pos:end="337:59"><name pos:start="337:52" pos:end="337:57">getpid</name><argument_list pos:start="337:58" pos:end="337:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="339:1" pos:end="339:6">#<cpp:directive pos:start="339:2" pos:end="339:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="341:7" pos:end="345:5">else <block pos:start="341:12" pos:end="345:5">{<block_content pos:start="343:9" pos:end="343:74">

        <expr_stmt pos:start="343:9" pos:end="343:74"><expr pos:start="343:9" pos:end="343:73"><call pos:start="343:9" pos:end="343:73"><name pos:start="343:9" pos:end="343:22">fw_cfg_add_i32</name><argument_list pos:start="343:23" pos:end="343:73">(<argument pos:start="343:24" pos:end="343:29"><expr pos:start="343:24" pos:end="343:29"><name pos:start="343:24" pos:end="343:29">fw_cfg</name></expr></argument>, <argument pos:start="343:32" pos:end="343:48"><expr pos:start="343:32" pos:end="343:48"><name pos:start="343:32" pos:end="343:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="343:51" pos:end="343:72"><expr pos:start="343:51" pos:end="343:72"><name pos:start="343:51" pos:end="343:72">NANOSECONDS_PER_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:60"><expr pos:start="347:5" pos:end="347:59"><call pos:start="347:5" pos:end="347:59"><name pos:start="347:5" pos:end="347:18">fw_cfg_add_i16</name><argument_list pos:start="347:19" pos:end="347:59">(<argument pos:start="347:20" pos:end="347:25"><expr pos:start="347:20" pos:end="347:25"><name pos:start="347:20" pos:end="347:25">fw_cfg</name></expr></argument>, <argument pos:start="347:28" pos:end="347:45"><expr pos:start="347:28" pos:end="347:45"><name pos:start="347:28" pos:end="347:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="347:48" pos:end="347:58"><expr pos:start="347:48" pos:end="347:58"><name pos:start="347:48" pos:end="347:58">boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:52"><expr pos:start="349:5" pos:end="349:51"><call pos:start="349:5" pos:end="349:51"><name pos:start="349:5" pos:end="349:26">qemu_register_boot_set</name><argument_list pos:start="349:27" pos:end="349:51">(<argument pos:start="349:28" pos:end="349:42"><expr pos:start="349:28" pos:end="349:42"><name pos:start="349:28" pos:end="349:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="349:45" pos:end="349:50"><expr pos:start="349:45" pos:end="349:50"><name pos:start="349:45" pos:end="349:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="353:5" pos:end="353:59">/* Prepare firmware configuration for Open Hack'Ware */</comment>

    <if_stmt pos:start="355:5" pos:end="373:5"><if pos:start="355:5" pos:end="373:5">if <condition pos:start="355:8" pos:end="355:15">(<expr pos:start="355:9" pos:end="355:14"><name pos:start="355:9" pos:end="355:14">m48t59</name></expr>)</condition> <block pos:start="355:17" pos:end="373:5">{<block_content pos:start="357:9" pos:end="371:75">

        <expr_stmt pos:start="357:9" pos:end="371:75"><expr pos:start="357:9" pos:end="371:74"><call pos:start="357:9" pos:end="371:74"><name pos:start="357:9" pos:end="357:28">PPC_NVRAM_set_params</name><argument_list pos:start="357:29" pos:end="371:74">(<argument pos:start="357:30" pos:end="357:35"><expr pos:start="357:30" pos:end="357:35"><name pos:start="357:30" pos:end="357:35">m48t59</name></expr></argument>, <argument pos:start="357:38" pos:end="357:47"><expr pos:start="357:38" pos:end="357:47"><name pos:start="357:38" pos:end="357:47">NVRAM_SIZE</name></expr></argument>, <argument pos:start="357:50" pos:end="357:55"><expr pos:start="357:50" pos:end="357:55"><literal type="string" pos:start="357:50" pos:end="357:55">"PREP"</literal></expr></argument>, <argument pos:start="357:58" pos:end="357:65"><expr pos:start="357:58" pos:end="357:65"><name pos:start="357:58" pos:end="357:65">ram_size</name></expr></argument>,

                             <argument pos:start="359:30" pos:end="359:40"><expr pos:start="359:30" pos:end="359:40"><name pos:start="359:30" pos:end="359:40">boot_device</name></expr></argument>,

                             <argument pos:start="361:30" pos:end="361:40"><expr pos:start="361:30" pos:end="361:40"><name pos:start="361:30" pos:end="361:40">kernel_base</name></expr></argument>, <argument pos:start="361:43" pos:end="361:53"><expr pos:start="361:43" pos:end="361:53"><name pos:start="361:43" pos:end="361:53">kernel_size</name></expr></argument>,

                             <argument pos:start="363:30" pos:end="363:52"><expr pos:start="363:30" pos:end="363:52"><name pos:start="363:30" pos:end="363:52"><name pos:start="363:30" pos:end="363:36">machine</name><operator pos:start="363:37" pos:end="363:38">-&gt;</operator><name pos:start="363:39" pos:end="363:52">kernel_cmdline</name></name></expr></argument>,

                             <argument pos:start="365:30" pos:end="365:40"><expr pos:start="365:30" pos:end="365:40"><name pos:start="365:30" pos:end="365:40">initrd_base</name></expr></argument>, <argument pos:start="365:43" pos:end="365:53"><expr pos:start="365:43" pos:end="365:53"><name pos:start="365:43" pos:end="365:53">initrd_size</name></expr></argument>,

                             <comment type="block" pos:start="367:30" pos:end="367:76">/* XXX: need an option to load a NVRAM image */</comment>

                             <argument pos:start="369:30" pos:end="369:30"><expr pos:start="369:30" pos:end="369:30"><literal type="number" pos:start="369:30" pos:end="369:30">0</literal></expr></argument>,

                             <argument pos:start="371:30" pos:end="371:42"><expr pos:start="371:30" pos:end="371:42"><name pos:start="371:30" pos:end="371:42">graphic_width</name></expr></argument>, <argument pos:start="371:45" pos:end="371:58"><expr pos:start="371:45" pos:end="371:58"><name pos:start="371:45" pos:end="371:58">graphic_height</name></expr></argument>, <argument pos:start="371:61" pos:end="371:73"><expr pos:start="371:61" pos:end="371:73"><name pos:start="371:61" pos:end="371:73">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
