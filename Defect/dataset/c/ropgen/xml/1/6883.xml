<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6883.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_wide</name><parameter_list pos:start="1:25" pos:end="1:75">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">ByteIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:74"><decl pos:start="1:60" pos:end="1:74"><type pos:start="1:60" pos:end="1:74"><name pos:start="1:60" pos:end="1:69">MOV_atom_t</name></type> <name pos:start="1:71" pos:end="1:74">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:15">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">type</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="11:1" pos:end="11:12">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><call pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:14">print_atom</name><argument_list pos:start="13:15" pos:end="13:28">(<argument pos:start="13:16" pos:end="13:21"><expr pos:start="13:16" pos:end="13:21"><literal type="string" pos:start="13:16" pos:end="13:21">"wide"</literal></expr></argument>, <argument pos:start="13:24" pos:end="13:27"><expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">debug_indent</name><operator pos:start="15:17" pos:end="15:18">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="19:5" pos:end="21:17"><if pos:start="19:5" pos:end="21:17">if <condition pos:start="19:8" pos:end="19:22">(<expr pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:12">atom</name><operator pos:start="19:13" pos:end="19:13">.</operator><name pos:start="19:14" pos:end="19:17">size</name></name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <literal type="number" pos:start="19:21" pos:end="19:21">8</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:17"><block_content pos:start="21:9" pos:end="21:17">

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="21:19" pos:end="21:32">/* continue */</comment>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:26">(<expr pos:start="23:9" pos:end="23:25"><call pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:16">get_be32</name><argument_list pos:start="23:17" pos:end="23:20">(<argument pos:start="23:18" pos:end="23:19"><expr pos:start="23:18" pos:end="23:19"><name pos:start="23:18" pos:end="23:19">pb</name></expr></argument>)</argument_list></call> <operator pos:start="23:22" pos:end="23:23">!=</operator> <literal type="number" pos:start="23:25" pos:end="23:25">0</literal></expr>)</condition> <block pos:start="23:28" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:17"> <comment type="block" pos:start="23:30" pos:end="23:80">/* 0 sized mdat atom... use the 'wide' atom size */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:37"><expr pos:start="25:9" pos:end="25:36"><call pos:start="25:9" pos:end="25:36"><name pos:start="25:9" pos:end="25:17">url_fskip</name><argument_list pos:start="25:18" pos:end="25:36">(<argument pos:start="25:19" pos:end="25:20"><expr pos:start="25:19" pos:end="25:20"><name pos:start="25:19" pos:end="25:20">pb</name></expr></argument>, <argument pos:start="25:23" pos:end="25:35"><expr pos:start="25:23" pos:end="25:35"><name pos:start="25:23" pos:end="25:31"><name pos:start="25:23" pos:end="25:26">atom</name><operator pos:start="25:27" pos:end="25:27">.</operator><name pos:start="25:28" pos:end="25:31">size</name></name> <operator pos:start="25:33" pos:end="25:33">-</operator> <literal type="number" pos:start="25:35" pos:end="25:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:8">atom</name><operator pos:start="31:9" pos:end="31:9">.</operator><name pos:start="31:10" pos:end="31:13">type</name></name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:28"><name pos:start="31:17" pos:end="31:24">get_le32</name><argument_list pos:start="31:25" pos:end="31:28">(<argument pos:start="31:26" pos:end="31:27"><expr pos:start="31:26" pos:end="31:27"><name pos:start="31:26" pos:end="31:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:8">atom</name><operator pos:start="33:9" pos:end="33:9">.</operator><name pos:start="33:10" pos:end="33:15">offset</name></name> <operator pos:start="33:17" pos:end="33:18">+=</operator> <literal type="number" pos:start="33:20" pos:end="33:20">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:19"><expr pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:8">atom</name><operator pos:start="35:9" pos:end="35:9">.</operator><name pos:start="35:10" pos:end="35:13">size</name></name> <operator pos:start="35:15" pos:end="35:16">-=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:42">(<expr pos:start="37:9" pos:end="37:41"><name pos:start="37:9" pos:end="37:12">type</name> <operator pos:start="37:14" pos:end="37:15">!=</operator> <call pos:start="37:17" pos:end="37:41"><name pos:start="37:17" pos:end="37:21">MKTAG</name><argument_list pos:start="37:22" pos:end="37:41">(<argument pos:start="37:23" pos:end="37:25"><expr pos:start="37:23" pos:end="37:25"><literal type="char" pos:start="37:23" pos:end="37:25">'m'</literal></expr></argument>, <argument pos:start="37:28" pos:end="37:30"><expr pos:start="37:28" pos:end="37:30"><literal type="char" pos:start="37:28" pos:end="37:30">'d'</literal></expr></argument>, <argument pos:start="37:33" pos:end="37:35"><expr pos:start="37:33" pos:end="37:35"><literal type="char" pos:start="37:33" pos:end="37:35">'a'</literal></expr></argument>, <argument pos:start="37:38" pos:end="37:40"><expr pos:start="37:38" pos:end="37:40"><literal type="char" pos:start="37:38" pos:end="37:40">'t'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:44" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:17">

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:17">url_fskip</name><argument_list pos:start="39:18" pos:end="39:32">(<argument pos:start="39:19" pos:end="39:20"><expr pos:start="39:19" pos:end="39:20"><name pos:start="39:19" pos:end="39:20">pb</name></expr></argument>, <argument pos:start="39:23" pos:end="39:31"><expr pos:start="39:23" pos:end="39:31"><name pos:start="39:23" pos:end="39:31"><name pos:start="39:23" pos:end="39:26">atom</name><operator pos:start="39:27" pos:end="39:27">.</operator><name pos:start="39:28" pos:end="39:31">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="48:0"><expr pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:7">err</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:36"><name pos:start="45:11" pos:end="45:23">mov_read_mdat</name><argument_list pos:start="45:24" pos:end="45:36">(<argument pos:start="45:25" pos:end="45:25"><expr pos:start="45:25" pos:end="45:25"><name pos:start="45:25" pos:end="45:25">c</name></expr></argument>, <argument pos:start="45:28" pos:end="45:29"><expr pos:start="45:28" pos:end="45:29"><name pos:start="45:28" pos:end="45:29">pb</name></expr></argument>, <argument pos:start="45:32" pos:end="45:35"><expr pos:start="45:32" pos:end="45:35"><name pos:start="45:32" pos:end="45:35">atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="47:1" pos:end="47:12">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:16">debug_indent</name><operator pos:start="49:17" pos:end="49:18">--</operator></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
