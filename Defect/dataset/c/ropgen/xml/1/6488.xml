<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6488.c" pos:tabs="8"><function pos:start="1:1" pos:end="25:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">handle_arg_cpu</name><parameter_list pos:start="1:27" pos:end="1:43">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:39"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="25:1">{<block_content pos:start="5:5" pos:end="23:5">

    <expr_stmt pos:start="5:5" pos:end="5:28"><expr pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:13">cpu_model</name> <operator pos:start="5:15" pos:end="5:15">=</operator> <call pos:start="5:17" pos:end="5:27"><name pos:start="5:17" pos:end="5:22">strdup</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="7:5" pos:end="23:5"><if pos:start="7:5" pos:end="23:5">if <condition pos:start="7:8" pos:end="7:57">(<expr pos:start="7:9" pos:end="7:56"><name pos:start="7:9" pos:end="7:17">cpu_model</name> <operator pos:start="7:19" pos:end="7:20">==</operator> <name pos:start="7:22" pos:end="7:25">NULL</name> <operator pos:start="7:27" pos:end="7:28">||</operator> <call pos:start="7:30" pos:end="7:51"><name pos:start="7:30" pos:end="7:35">strcmp</name><argument_list pos:start="7:36" pos:end="7:51">(<argument pos:start="7:37" pos:end="7:45"><expr pos:start="7:37" pos:end="7:45"><name pos:start="7:37" pos:end="7:45">cpu_model</name></expr></argument>, <argument pos:start="7:48" pos:end="7:50"><expr pos:start="7:48" pos:end="7:50"><literal type="string" pos:start="7:48" pos:end="7:50">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="7:53" pos:end="7:54">==</operator> <literal type="number" pos:start="7:56" pos:end="7:56">0</literal></expr>)</condition> <block pos:start="7:59" pos:end="23:5">{<block_content pos:start="13:9" pos:end="21:16">

        <comment type="block" pos:start="9:9" pos:end="9:72">/* XXX: implement xxx_cpu_list for targets that still miss it */</comment>

<cpp:if pos:start="11:1" pos:end="11:24">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:24"><call pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:24">(<argument pos:start="11:13" pos:end="11:23"><expr pos:start="11:13" pos:end="11:23"><name pos:start="11:13" pos:end="11:23">cpu_list_id</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="13:9" pos:end="16:0"><expr pos:start="13:9" pos:end="13:41"><call pos:start="13:9" pos:end="13:41"><name pos:start="13:9" pos:end="13:19">cpu_list_id</name><argument_list pos:start="13:20" pos:end="13:41">(<argument pos:start="13:21" pos:end="13:26"><expr pos:start="13:21" pos:end="13:26"><name pos:start="13:21" pos:end="13:26">stdout</name></expr></argument>, <argument pos:start="13:29" pos:end="13:36"><expr pos:start="13:29" pos:end="13:36"><operator pos:start="13:29" pos:end="13:29">&amp;</operator><name pos:start="13:30" pos:end="13:36">fprintf</name></expr></argument>, <argument pos:start="13:39" pos:end="13:40"><expr pos:start="13:39" pos:end="13:40"><literal type="string" pos:start="13:39" pos:end="13:40">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="15:1" pos:end="15:23">#<cpp:directive pos:start="15:2" pos:end="15:5">elif</cpp:directive> <expr pos:start="15:7" pos:end="15:23"><call pos:start="15:7" pos:end="15:23"><name pos:start="15:7" pos:end="15:13">defined</name><argument_list pos:start="15:14" pos:end="15:23">(<argument pos:start="15:15" pos:end="15:22"><expr pos:start="15:15" pos:end="15:22"><name pos:start="15:15" pos:end="15:22">cpu_list</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="17:9" pos:end="20:0"><expr pos:start="17:9" pos:end="17:34"><call pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:16">cpu_list</name><argument_list pos:start="17:17" pos:end="17:34">(<argument pos:start="17:18" pos:end="17:23"><expr pos:start="17:18" pos:end="17:23"><name pos:start="17:18" pos:end="17:23">stdout</name></expr></argument>, <argument pos:start="17:26" pos:end="17:33"><expr pos:start="17:26" pos:end="17:33"><operator pos:start="17:26" pos:end="17:26">&amp;</operator><name pos:start="17:27" pos:end="17:33">fprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="17:37" pos:end="17:52">/* deprecated */</comment>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="21:9" pos:end="21:16"><expr pos:start="21:9" pos:end="21:15"><call pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:12">exit</name><argument_list pos:start="21:13" pos:end="21:15">(<argument pos:start="21:14" pos:end="21:14"><expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
