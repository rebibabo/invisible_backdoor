<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/865.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">rtp_parse_one_packet</name><parameter_list pos:start="1:32" pos:end="3:58">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:47">RTPDemuxContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:65"><decl pos:start="1:53" pos:end="1:65"><type pos:start="1:53" pos:end="1:65"><name pos:start="1:53" pos:end="1:60">AVPacket</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">pkt</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:48"><decl pos:start="3:33" pos:end="3:48"><type pos:start="3:33" pos:end="3:48"><name pos:start="3:33" pos:end="3:39">uint8_t</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:48">bufptr</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:57"><decl pos:start="3:51" pos:end="3:57"><type pos:start="3:51" pos:end="3:57"><name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:57">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="151:1">{<block_content pos:start="7:5" pos:end="149:5">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">buf</name> <init pos:start="7:18" pos:end="7:42">= <expr pos:start="7:20" pos:end="7:42"><ternary pos:start="7:20" pos:end="7:42"><condition pos:start="7:20" pos:end="7:27"><expr pos:start="7:20" pos:end="7:25"><name pos:start="7:20" pos:end="7:25">bufptr</name></expr> ?</condition><then pos:start="7:29" pos:end="7:35"> <expr pos:start="7:29" pos:end="7:35"><operator pos:start="7:29" pos:end="7:29">*</operator><name pos:start="7:30" pos:end="7:35">bufptr</name></expr> </then><else pos:start="7:37" pos:end="7:42">: <expr pos:start="7:39" pos:end="7:42"><name pos:start="7:39" pos:end="7:42">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">flags</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:22">timestamp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">rv</name> <init pos:start="13:12" pos:end="13:14">= <expr pos:start="13:14" pos:end="13:14"><literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="51:5"><if pos:start="17:5" pos:end="51:5">if <condition pos:start="17:8" pos:end="17:13">(<expr pos:start="17:9" pos:end="17:12"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:12">buf</name></expr>)</condition> <block pos:start="17:15" pos:end="51:5">{<block_content pos:start="25:9" pos:end="49:9">

        <comment type="block" pos:start="19:9" pos:end="23:68">/* If parsing of the previous packet actually returned 0 or an error,

         * there's nothing more to be parsed from that packet, but we may have

         * indicated that we can return the next enqueued packet. */</comment>

        <if_stmt pos:start="25:9" pos:end="27:51"><if pos:start="25:9" pos:end="27:51">if <condition pos:start="25:12" pos:end="25:29">(<expr pos:start="25:13" pos:end="25:28"><name pos:start="25:13" pos:end="25:23"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:23">prev_ret</name></name> <operator pos:start="25:25" pos:end="25:26">&lt;=</operator> <literal type="number" pos:start="25:28" pos:end="25:28">0</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:51"><block_content pos:start="27:13" pos:end="27:51">

            <return pos:start="27:13" pos:end="27:51">return <expr pos:start="27:20" pos:end="27:50"><call pos:start="27:20" pos:end="27:50"><name pos:start="27:20" pos:end="27:42">rtp_parse_queued_packet</name><argument_list pos:start="27:43" pos:end="27:50">(<argument pos:start="27:44" pos:end="27:44"><expr pos:start="27:44" pos:end="27:44"><name pos:start="27:44" pos:end="27:44">s</name></expr></argument>, <argument pos:start="27:47" pos:end="27:49"><expr pos:start="27:47" pos:end="27:49"><name pos:start="27:47" pos:end="27:49">pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="29:9" pos:end="29:45">/* return the next packets, if any */</comment>

        <if_stmt pos:start="31:9" pos:end="49:9"><if pos:start="31:9" pos:end="49:9">if <condition pos:start="31:12" pos:end="31:51">(<expr pos:start="31:13" pos:end="31:50"><name pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:22">handler</name></name> <operator pos:start="31:24" pos:end="31:25">&amp;&amp;</operator> <name pos:start="31:27" pos:end="31:50"><name pos:start="31:27" pos:end="31:27">s</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:36">handler</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:50">parse_packet</name></name></expr>)</condition> <block pos:start="31:53" pos:end="49:9">{<block_content pos:start="37:13" pos:end="47:22">

            <comment type="block" pos:start="33:13" pos:end="35:63">/* timestamp should be overwritten by parse_packet, if not,

             * the packet is left with pts == AV_NOPTS_VALUE */</comment>

            <expr_stmt pos:start="37:13" pos:end="37:39"><expr pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:21">timestamp</name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:38">RTP_NOTS_VALUE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="43:56"><expr pos:start="39:13" pos:end="43:55"><name pos:start="39:13" pos:end="39:14">rv</name>        <operator pos:start="39:23" pos:end="39:23">=</operator> <call pos:start="39:25" pos:end="43:55"><name pos:start="39:25" pos:end="39:48"><name pos:start="39:25" pos:end="39:25">s</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:34">handler</name><operator pos:start="39:35" pos:end="39:36">-&gt;</operator><name pos:start="39:37" pos:end="39:48">parse_packet</name></name><argument_list pos:start="39:49" pos:end="43:55">(<argument pos:start="39:50" pos:end="39:54"><expr pos:start="39:50" pos:end="39:54"><name pos:start="39:50" pos:end="39:54"><name pos:start="39:50" pos:end="39:50">s</name><operator pos:start="39:51" pos:end="39:52">-&gt;</operator><name pos:start="39:53" pos:end="39:54">ic</name></name></expr></argument>, <argument pos:start="39:57" pos:end="39:83"><expr pos:start="39:57" pos:end="39:83"><name pos:start="39:57" pos:end="39:83"><name pos:start="39:57" pos:end="39:57">s</name><operator pos:start="39:58" pos:end="39:59">-&gt;</operator><name pos:start="39:60" pos:end="39:83">dynamic_protocol_context</name></name></expr></argument>,

                                                 <argument pos:start="41:50" pos:end="41:54"><expr pos:start="41:50" pos:end="41:54"><name pos:start="41:50" pos:end="41:54"><name pos:start="41:50" pos:end="41:50">s</name><operator pos:start="41:51" pos:end="41:52">-&gt;</operator><name pos:start="41:53" pos:end="41:54">st</name></name></expr></argument>, <argument pos:start="41:57" pos:end="41:59"><expr pos:start="41:57" pos:end="41:59"><name pos:start="41:57" pos:end="41:59">pkt</name></expr></argument>, <argument pos:start="41:62" pos:end="41:71"><expr pos:start="41:62" pos:end="41:71"><operator pos:start="41:62" pos:end="41:62">&amp;</operator><name pos:start="41:63" pos:end="41:71">timestamp</name></expr></argument>, <argument pos:start="41:74" pos:end="41:77"><expr pos:start="41:74" pos:end="41:77"><name pos:start="41:74" pos:end="41:77">NULL</name></expr></argument>, <argument pos:start="41:80" pos:end="41:80"><expr pos:start="41:80" pos:end="41:80"><literal type="number" pos:start="41:80" pos:end="41:80">0</literal></expr></argument>, <argument pos:start="41:83" pos:end="41:83"><expr pos:start="41:83" pos:end="41:83"><literal type="number" pos:start="41:83" pos:end="41:83">0</literal></expr></argument>,

                                                 <argument pos:start="43:50" pos:end="43:54"><expr pos:start="43:50" pos:end="43:54"><name pos:start="43:50" pos:end="43:54">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:47"><expr pos:start="45:13" pos:end="45:46"><call pos:start="45:13" pos:end="45:46"><name pos:start="45:13" pos:end="45:27">finalize_packet</name><argument_list pos:start="45:28" pos:end="45:46">(<argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><name pos:start="45:29" pos:end="45:29">s</name></expr></argument>, <argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">pkt</name></expr></argument>, <argument pos:start="45:37" pos:end="45:45"><expr pos:start="45:37" pos:end="45:45"><name pos:start="45:37" pos:end="45:45">timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><name pos:start="47:20" pos:end="47:21">rv</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="57:18"><if pos:start="55:5" pos:end="57:18">if <condition pos:start="55:8" pos:end="55:17">(<expr pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:11">len</name> <operator pos:start="55:13" pos:end="55:13">&lt;</operator> <literal type="number" pos:start="55:15" pos:end="55:16">12</literal></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:18"><block_content pos:start="57:9" pos:end="57:18">

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="63:18"><if pos:start="61:5" pos:end="63:18">if <condition pos:start="61:8" pos:end="61:46">(<expr pos:start="61:9" pos:end="61:45"><operator pos:start="61:9" pos:end="61:9">(</operator><name pos:start="61:10" pos:end="61:15"><name pos:start="61:10" pos:end="61:12">buf</name><index pos:start="61:13" pos:end="61:15">[<expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>]</index></name> <operator pos:start="61:17" pos:end="61:17">&amp;</operator> <literal type="number" pos:start="61:19" pos:end="61:22">0xc0</literal><operator pos:start="61:23" pos:end="61:23">)</operator> <operator pos:start="61:25" pos:end="61:26">!=</operator> <operator pos:start="61:28" pos:end="61:28">(</operator><name pos:start="61:29" pos:end="61:39">RTP_VERSION</name> <operator pos:start="61:41" pos:end="61:42">&lt;&lt;</operator> <literal type="number" pos:start="61:44" pos:end="61:44">6</literal><operator pos:start="61:45" pos:end="61:45">)</operator></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:18"><block_content pos:start="63:9" pos:end="63:18">

        <return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:31">(<expr pos:start="65:9" pos:end="65:30"><call pos:start="65:9" pos:end="65:30"><name pos:start="65:9" pos:end="65:22">RTP_PT_IS_RTCP</name><argument_list pos:start="65:23" pos:end="65:30">(<argument pos:start="65:24" pos:end="65:29"><expr pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:26">buf</name><index pos:start="65:27" pos:end="65:29">[<expr pos:start="65:28" pos:end="65:28"><literal type="number" pos:start="65:28" pos:end="65:28">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:33" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:46">

        <return pos:start="67:9" pos:end="67:46">return <expr pos:start="67:16" pos:end="67:45"><call pos:start="67:16" pos:end="67:45"><name pos:start="67:16" pos:end="67:32">rtcp_parse_packet</name><argument_list pos:start="67:33" pos:end="67:45">(<argument pos:start="67:34" pos:end="67:34"><expr pos:start="67:34" pos:end="67:34"><name pos:start="67:34" pos:end="67:34">s</name></expr></argument>, <argument pos:start="67:37" pos:end="67:39"><expr pos:start="67:37" pos:end="67:39"><name pos:start="67:37" pos:end="67:39">buf</name></expr></argument>, <argument pos:start="67:42" pos:end="67:44"><expr pos:start="67:42" pos:end="67:44"><name pos:start="67:42" pos:end="67:44">len</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="89:5"><if pos:start="73:5" pos:end="89:5">if <condition pos:start="73:8" pos:end="73:14">(<expr pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:13">st</name></name></expr>)</condition> <block pos:start="73:16" pos:end="89:5">{<block_content pos:start="75:9" pos:end="87:66">

        <decl_stmt pos:start="75:9" pos:end="75:49"><decl pos:start="75:9" pos:end="75:48"><type pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:15">int64_t</name></type> <name pos:start="75:17" pos:end="75:24">received</name> <init pos:start="75:26" pos:end="75:48">= <expr pos:start="75:28" pos:end="75:48"><call pos:start="75:28" pos:end="75:48"><name pos:start="75:28" pos:end="75:46">av_gettime_relative</name><argument_list pos:start="75:47" pos:end="75:48">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="79:61"><decl pos:start="77:9" pos:end="79:60"><type pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:16">uint32_t</name></type> <name pos:start="77:18" pos:end="77:27">arrival_ts</name> <init pos:start="77:29" pos:end="79:60">= <expr pos:start="77:31" pos:end="79:60"><call pos:start="77:31" pos:end="79:60"><name pos:start="77:31" pos:end="77:42">av_rescale_q</name><argument_list pos:start="77:43" pos:end="79:60">(<argument pos:start="77:44" pos:end="77:51"><expr pos:start="77:44" pos:end="77:51"><name pos:start="77:44" pos:end="77:51">received</name></expr></argument>, <argument pos:start="77:54" pos:end="77:67"><expr pos:start="77:54" pos:end="77:67"><name pos:start="77:54" pos:end="77:67">AV_TIME_BASE_Q</name></expr></argument>,

                                           <argument pos:start="79:44" pos:end="79:59"><expr pos:start="79:44" pos:end="79:59"><name pos:start="79:44" pos:end="79:59"><name pos:start="79:44" pos:end="79:44">s</name><operator pos:start="79:45" pos:end="79:46">-&gt;</operator><name pos:start="79:47" pos:end="79:48">st</name><operator pos:start="79:49" pos:end="79:50">-&gt;</operator><name pos:start="79:51" pos:end="79:59">time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:17">timestamp</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <call pos:start="81:21" pos:end="81:36"><name pos:start="81:21" pos:end="81:27">AV_RB32</name><argument_list pos:start="81:28" pos:end="81:36">(<argument pos:start="81:29" pos:end="81:35"><expr pos:start="81:29" pos:end="81:35"><name pos:start="81:29" pos:end="81:31">buf</name> <operator pos:start="81:33" pos:end="81:33">+</operator> <literal type="number" pos:start="81:35" pos:end="81:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="83:9" pos:end="83:71">// Calculate the jitter immediately, before queueing the packet</comment>

        <comment type="line" pos:start="85:9" pos:end="85:37">// into the reordering queue.</comment>

        <expr_stmt pos:start="87:9" pos:end="87:66"><expr pos:start="87:9" pos:end="87:65"><call pos:start="87:9" pos:end="87:65"><name pos:start="87:9" pos:end="87:26">rtcp_update_jitter</name><argument_list pos:start="87:27" pos:end="87:65">(<argument pos:start="87:28" pos:end="87:41"><expr pos:start="87:28" pos:end="87:41"><operator pos:start="87:28" pos:end="87:28">&amp;</operator><name pos:start="87:29" pos:end="87:41"><name pos:start="87:29" pos:end="87:29">s</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:41">statistics</name></name></expr></argument>, <argument pos:start="87:44" pos:end="87:52"><expr pos:start="87:44" pos:end="87:52"><name pos:start="87:44" pos:end="87:52">timestamp</name></expr></argument>, <argument pos:start="87:55" pos:end="87:64"><expr pos:start="87:55" pos:end="87:64"><name pos:start="87:55" pos:end="87:64">arrival_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="149:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:57">(<expr pos:start="93:9" pos:end="93:56"><operator pos:start="93:9" pos:end="93:9">(</operator><name pos:start="93:10" pos:end="93:15"><name pos:start="93:10" pos:end="93:10">s</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:15">seq</name></name> <operator pos:start="93:17" pos:end="93:18">==</operator> <literal type="number" pos:start="93:20" pos:end="93:20">0</literal> <operator pos:start="93:22" pos:end="93:23">&amp;&amp;</operator> <operator pos:start="93:25" pos:end="93:25">!</operator><name pos:start="93:26" pos:end="93:33"><name pos:start="93:26" pos:end="93:26">s</name><operator pos:start="93:27" pos:end="93:28">-&gt;</operator><name pos:start="93:29" pos:end="93:33">queue</name></name><operator pos:start="93:34" pos:end="93:34">)</operator> <operator pos:start="93:36" pos:end="93:37">||</operator> <name pos:start="93:39" pos:end="93:51"><name pos:start="93:39" pos:end="93:39">s</name><operator pos:start="93:40" pos:end="93:41">-&gt;</operator><name pos:start="93:42" pos:end="93:51">queue_size</name></name> <operator pos:start="93:53" pos:end="93:54">&lt;=</operator> <literal type="number" pos:start="93:56" pos:end="93:56">1</literal></expr>)</condition> <block pos:start="93:59" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:59">

        <comment type="block" pos:start="95:9" pos:end="95:44">/* First packet, or no reordering */</comment>

        <return pos:start="97:9" pos:end="97:59">return <expr pos:start="97:16" pos:end="97:58"><call pos:start="97:16" pos:end="97:58"><name pos:start="97:16" pos:end="97:40">rtp_parse_packet_internal</name><argument_list pos:start="97:41" pos:end="97:58">(<argument pos:start="97:42" pos:end="97:42"><expr pos:start="97:42" pos:end="97:42"><name pos:start="97:42" pos:end="97:42">s</name></expr></argument>, <argument pos:start="97:45" pos:end="97:47"><expr pos:start="97:45" pos:end="97:47"><name pos:start="97:45" pos:end="97:47">pkt</name></expr></argument>, <argument pos:start="97:50" pos:end="97:52"><expr pos:start="97:50" pos:end="97:52"><name pos:start="97:50" pos:end="97:52">buf</name></expr></argument>, <argument pos:start="97:55" pos:end="97:57"><expr pos:start="97:55" pos:end="97:57"><name pos:start="97:55" pos:end="97:57">len</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="149:5">else <block pos:start="99:12" pos:end="149:5">{<block_content pos:start="101:9" pos:end="147:9">

        <decl_stmt pos:start="101:9" pos:end="101:40"><decl pos:start="101:9" pos:end="101:39"><type pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:16">uint16_t</name></type> <name pos:start="101:18" pos:end="101:20">seq</name> <init pos:start="101:22" pos:end="101:39">= <expr pos:start="101:24" pos:end="101:39"><call pos:start="101:24" pos:end="101:39"><name pos:start="101:24" pos:end="101:30">AV_RB16</name><argument_list pos:start="101:31" pos:end="101:39">(<argument pos:start="101:32" pos:end="101:38"><expr pos:start="101:32" pos:end="101:38"><name pos:start="101:32" pos:end="101:34">buf</name> <operator pos:start="101:36" pos:end="101:36">+</operator> <literal type="number" pos:start="101:38" pos:end="101:38">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:36"><decl pos:start="103:9" pos:end="103:35"><type pos:start="103:9" pos:end="103:15"><name pos:start="103:9" pos:end="103:15">int16_t</name></type> <name pos:start="103:17" pos:end="103:20">diff</name> <init pos:start="103:22" pos:end="103:35">= <expr pos:start="103:24" pos:end="103:35"><name pos:start="103:24" pos:end="103:26">seq</name> <operator pos:start="103:28" pos:end="103:28">-</operator> <name pos:start="103:30" pos:end="103:35"><name pos:start="103:30" pos:end="103:30">s</name><operator pos:start="103:31" pos:end="103:32">-&gt;</operator><name pos:start="103:33" pos:end="103:35">seq</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="105:9" pos:end="147:9"><if pos:start="105:9" pos:end="115:9">if <condition pos:start="105:12" pos:end="105:21">(<expr pos:start="105:13" pos:end="105:20"><name pos:start="105:13" pos:end="105:16">diff</name> <operator pos:start="105:18" pos:end="105:18">&lt;</operator> <literal type="number" pos:start="105:20" pos:end="105:20">0</literal></expr>)</condition> <block pos:start="105:23" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:22">

            <comment type="block" pos:start="107:13" pos:end="107:68">/* Packet older than the previously emitted one, drop */</comment>

            <expr_stmt pos:start="109:13" pos:end="111:67"><expr pos:start="109:13" pos:end="111:66"><call pos:start="109:13" pos:end="111:66"><name pos:start="109:13" pos:end="109:18">av_log</name><argument_list pos:start="109:19" pos:end="111:66">(<argument pos:start="109:20" pos:end="109:46"><expr pos:start="109:20" pos:end="109:46"><ternary pos:start="109:20" pos:end="109:46"><condition pos:start="109:20" pos:end="109:26"><expr pos:start="109:20" pos:end="109:24"><name pos:start="109:20" pos:end="109:24"><name pos:start="109:20" pos:end="109:20">s</name><operator pos:start="109:21" pos:end="109:22">-&gt;</operator><name pos:start="109:23" pos:end="109:24">st</name></name></expr> ?</condition><then pos:start="109:28" pos:end="109:39"> <expr pos:start="109:28" pos:end="109:39"><name pos:start="109:28" pos:end="109:39"><name pos:start="109:28" pos:end="109:28">s</name><operator pos:start="109:29" pos:end="109:30">-&gt;</operator><name pos:start="109:31" pos:end="109:32">st</name><operator pos:start="109:33" pos:end="109:34">-&gt;</operator><name pos:start="109:35" pos:end="109:39">codec</name></name></expr> </then><else pos:start="109:41" pos:end="109:46">: <expr pos:start="109:43" pos:end="109:46"><name pos:start="109:43" pos:end="109:46">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="109:49" pos:end="109:62"><expr pos:start="109:49" pos:end="109:62"><name pos:start="109:49" pos:end="109:62">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="111:20" pos:end="111:65"><expr pos:start="111:20" pos:end="111:65"><literal type="string" pos:start="111:20" pos:end="111:65">"RTP: dropping old packet received too late\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="113:13" pos:end="113:22">return <expr pos:start="113:20" pos:end="113:21"><operator pos:start="113:20" pos:end="113:20">-</operator><literal type="number" pos:start="113:21" pos:end="113:21">1</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="115:11" pos:end="123:9">else if <condition pos:start="115:19" pos:end="115:29">(<expr pos:start="115:20" pos:end="115:28"><name pos:start="115:20" pos:end="115:23">diff</name> <operator pos:start="115:25" pos:end="115:26">&lt;=</operator> <literal type="number" pos:start="115:28" pos:end="115:28">1</literal></expr>)</condition> <block pos:start="115:31" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:22">

            <comment type="block" pos:start="117:13" pos:end="117:32">/* Correct packet */</comment>

            <expr_stmt pos:start="119:13" pos:end="119:61"><expr pos:start="119:13" pos:end="119:60"><name pos:start="119:13" pos:end="119:14">rv</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <call pos:start="119:18" pos:end="119:60"><name pos:start="119:18" pos:end="119:42">rtp_parse_packet_internal</name><argument_list pos:start="119:43" pos:end="119:60">(<argument pos:start="119:44" pos:end="119:44"><expr pos:start="119:44" pos:end="119:44"><name pos:start="119:44" pos:end="119:44">s</name></expr></argument>, <argument pos:start="119:47" pos:end="119:49"><expr pos:start="119:47" pos:end="119:49"><name pos:start="119:47" pos:end="119:49">pkt</name></expr></argument>, <argument pos:start="119:52" pos:end="119:54"><expr pos:start="119:52" pos:end="119:54"><name pos:start="119:52" pos:end="119:54">buf</name></expr></argument>, <argument pos:start="119:57" pos:end="119:59"><expr pos:start="119:57" pos:end="119:59"><name pos:start="119:57" pos:end="119:59">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:22">return <expr pos:start="121:20" pos:end="121:21"><name pos:start="121:20" pos:end="121:21">rv</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="147:9">else <block pos:start="123:16" pos:end="147:9">{<block_content pos:start="127:13" pos:end="145:22">

            <comment type="block" pos:start="125:13" pos:end="125:62">/* Still missing some packet, enqueue this one. */</comment>

            <expr_stmt pos:start="127:13" pos:end="127:40"><expr pos:start="127:13" pos:end="127:39"><call pos:start="127:13" pos:end="127:39"><name pos:start="127:13" pos:end="127:26">enqueue_packet</name><argument_list pos:start="127:27" pos:end="127:39">(<argument pos:start="127:28" pos:end="127:28"><expr pos:start="127:28" pos:end="127:28"><name pos:start="127:28" pos:end="127:28">s</name></expr></argument>, <argument pos:start="127:31" pos:end="127:33"><expr pos:start="127:31" pos:end="127:33"><name pos:start="127:31" pos:end="127:33">buf</name></expr></argument>, <argument pos:start="127:36" pos:end="127:38"><expr pos:start="127:36" pos:end="127:38"><name pos:start="127:36" pos:end="127:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:27"><expr pos:start="129:13" pos:end="129:26"><operator pos:start="129:13" pos:end="129:13">*</operator><name pos:start="129:14" pos:end="129:19">bufptr</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:26">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="131:13" pos:end="133:49">/* Return the first enqueued packet if the queue is full,

             * even if we're missing something */</comment>

            <if_stmt pos:start="135:13" pos:end="143:13"><if pos:start="135:13" pos:end="143:13">if <condition pos:start="135:16" pos:end="135:46">(<expr pos:start="135:17" pos:end="135:45"><name pos:start="135:17" pos:end="135:28"><name pos:start="135:17" pos:end="135:17">s</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:28">queue_len</name></name> <operator pos:start="135:30" pos:end="135:31">&gt;=</operator> <name pos:start="135:33" pos:end="135:45"><name pos:start="135:33" pos:end="135:33">s</name><operator pos:start="135:34" pos:end="135:35">-&gt;</operator><name pos:start="135:36" pos:end="135:45">queue_size</name></name></expr>)</condition> <block pos:start="135:48" pos:end="143:13">{<block_content pos:start="137:17" pos:end="141:55">

                <expr_stmt pos:start="137:17" pos:end="139:47"><expr pos:start="137:17" pos:end="139:46"><call pos:start="137:17" pos:end="139:46"><name pos:start="137:17" pos:end="137:22">av_log</name><argument_list pos:start="137:23" pos:end="139:46">(<argument pos:start="137:24" pos:end="137:50"><expr pos:start="137:24" pos:end="137:50"><ternary pos:start="137:24" pos:end="137:50"><condition pos:start="137:24" pos:end="137:30"><expr pos:start="137:24" pos:end="137:28"><name pos:start="137:24" pos:end="137:28"><name pos:start="137:24" pos:end="137:24">s</name><operator pos:start="137:25" pos:end="137:26">-&gt;</operator><name pos:start="137:27" pos:end="137:28">st</name></name></expr> ?</condition><then pos:start="137:32" pos:end="137:43"> <expr pos:start="137:32" pos:end="137:43"><name pos:start="137:32" pos:end="137:43"><name pos:start="137:32" pos:end="137:32">s</name><operator pos:start="137:33" pos:end="137:34">-&gt;</operator><name pos:start="137:35" pos:end="137:36">st</name><operator pos:start="137:37" pos:end="137:38">-&gt;</operator><name pos:start="137:39" pos:end="137:43">codec</name></name></expr> </then><else pos:start="137:45" pos:end="137:50">: <expr pos:start="137:47" pos:end="137:50"><name pos:start="137:47" pos:end="137:50">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="137:53" pos:end="137:66"><expr pos:start="137:53" pos:end="137:66"><name pos:start="137:53" pos:end="137:66">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="139:24" pos:end="139:45"><expr pos:start="139:24" pos:end="139:45"><literal type="string" pos:start="139:24" pos:end="139:45">"jitter buffer full\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="141:17" pos:end="141:55">return <expr pos:start="141:24" pos:end="141:54"><call pos:start="141:24" pos:end="141:54"><name pos:start="141:24" pos:end="141:46">rtp_parse_queued_packet</name><argument_list pos:start="141:47" pos:end="141:54">(<argument pos:start="141:48" pos:end="141:48"><expr pos:start="141:48" pos:end="141:48"><name pos:start="141:48" pos:end="141:48">s</name></expr></argument>, <argument pos:start="141:51" pos:end="141:53"><expr pos:start="141:51" pos:end="141:53"><name pos:start="141:51" pos:end="141:53">pkt</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <return pos:start="145:13" pos:end="145:22">return <expr pos:start="145:20" pos:end="145:21"><operator pos:start="145:20" pos:end="145:20">-</operator><literal type="number" pos:start="145:21" pos:end="145:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
