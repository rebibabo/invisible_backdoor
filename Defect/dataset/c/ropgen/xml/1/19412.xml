<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19412.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">mirror_do_read</name><parameter_list pos:start="1:26" pos:end="3:41">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:40">MirrorBlockJob</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:63"><decl pos:start="1:46" pos:end="1:63"><type pos:start="1:46" pos:end="1:63"><name pos:start="1:46" pos:end="1:52">int64_t</name></type> <name pos:start="1:54" pos:end="1:63">sector_num</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:40"><decl pos:start="3:27" pos:end="3:40"><type pos:start="3:27" pos:end="3:40"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:40">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="115:1">{<block_content pos:start="7:5" pos:end="113:15">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BlockBackend</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:24">source</name> <init pos:start="7:26" pos:end="7:40">= <expr pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:28">s</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:36">common</name><operator pos:start="7:37" pos:end="7:37">.</operator><name pos:start="7:38" pos:end="7:40">blk</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:25">sectors_per_chunk</name></decl>, <decl pos:start="9:28" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:36">nb_chunks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:24">= <expr pos:start="11:15" pos:end="11:24"><name pos:start="11:15" pos:end="11:24">nb_sectors</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">MirrorOp</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">op</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:59"><expr pos:start="17:5" pos:end="17:58"><name pos:start="17:5" pos:end="17:21">sectors_per_chunk</name> <operator pos:start="17:23" pos:end="17:23">=</operator> <name pos:start="17:25" pos:end="17:38"><name pos:start="17:25" pos:end="17:25">s</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:38">granularity</name></name> <operator pos:start="17:40" pos:end="17:41">&gt;&gt;</operator> <name pos:start="17:43" pos:end="17:58">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:59">/* We can only handle as much as buf_size at a time. */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:66"><expr pos:start="23:5" pos:end="23:65"><name pos:start="23:5" pos:end="23:14">nb_sectors</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <call pos:start="23:18" pos:end="23:65"><name pos:start="23:18" pos:end="23:20">MIN</name><argument_list pos:start="23:21" pos:end="23:65">(<argument pos:start="23:22" pos:end="23:52"><expr pos:start="23:22" pos:end="23:52"><name pos:start="23:22" pos:end="23:32"><name pos:start="23:22" pos:end="23:22">s</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:32">buf_size</name></name> <operator pos:start="23:34" pos:end="23:35">&gt;&gt;</operator> <name pos:start="23:37" pos:end="23:52">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="23:55" pos:end="23:64"><expr pos:start="23:55" pos:end="23:64"><name pos:start="23:55" pos:end="23:64">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><call pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:22">(<argument pos:start="25:12" pos:end="25:21"><expr pos:start="25:12" pos:end="25:21"><name pos:start="25:12" pos:end="25:21">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:21">cow_bitmap</name></name></expr>)</condition> <block pos:start="29:24" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:61">

        <expr_stmt pos:start="31:9" pos:end="31:61"><expr pos:start="31:9" pos:end="31:60"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:14">+=</operator> <call pos:start="31:16" pos:end="31:60"><name pos:start="31:16" pos:end="31:31">mirror_cow_align</name><argument_list pos:start="31:32" pos:end="31:60">(<argument pos:start="31:33" pos:end="31:33"><expr pos:start="31:33" pos:end="31:33"><name pos:start="31:33" pos:end="31:33">s</name></expr></argument>, <argument pos:start="31:36" pos:end="31:46"><expr pos:start="31:36" pos:end="31:46"><operator pos:start="31:36" pos:end="31:36">&amp;</operator><name pos:start="31:37" pos:end="31:46">sector_num</name></expr></argument>, <argument pos:start="31:49" pos:end="31:59"><expr pos:start="31:49" pos:end="31:59"><operator pos:start="31:49" pos:end="31:49">&amp;</operator><name pos:start="31:50" pos:end="31:59">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:58"><expr pos:start="35:5" pos:end="35:57"><call pos:start="35:5" pos:end="35:57"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:57">(<argument pos:start="35:12" pos:end="35:56"><expr pos:start="35:12" pos:end="35:56"><name pos:start="35:12" pos:end="35:21">nb_sectors</name> <operator pos:start="35:23" pos:end="35:24">&lt;&lt;</operator> <name pos:start="35:26" pos:end="35:41">BDRV_SECTOR_BITS</name> <operator pos:start="35:43" pos:end="35:44">&lt;=</operator> <name pos:start="35:46" pos:end="35:56"><name pos:start="35:46" pos:end="35:46">s</name><operator pos:start="35:47" pos:end="35:48">-&gt;</operator><name pos:start="35:49" pos:end="35:56">buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="37:5" pos:end="41:73">/* The sector range must meet granularity because:

     * 1) Caller passes in aligned values;

     * 2) mirror_cow_align is used only when target cluster is larger. */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><call pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:45">(<argument pos:start="43:12" pos:end="43:44"><expr pos:start="43:12" pos:end="43:44"><operator pos:start="43:12" pos:end="43:12">!</operator><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:23">sector_num</name> <operator pos:start="43:25" pos:end="43:25">%</operator> <name pos:start="43:27" pos:end="43:43">sectors_per_chunk</name><operator pos:start="43:44" pos:end="43:44">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:60"><expr pos:start="45:5" pos:end="45:59"><name pos:start="45:5" pos:end="45:13">nb_chunks</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <call pos:start="45:17" pos:end="45:59"><name pos:start="45:17" pos:end="45:28">DIV_ROUND_UP</name><argument_list pos:start="45:29" pos:end="45:59">(<argument pos:start="45:30" pos:end="45:39"><expr pos:start="45:30" pos:end="45:39"><name pos:start="45:30" pos:end="45:39">nb_sectors</name></expr></argument>, <argument pos:start="45:42" pos:end="45:58"><expr pos:start="45:42" pos:end="45:58"><name pos:start="45:42" pos:end="45:58">sectors_per_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="49:5" pos:end="55:5">while <condition pos:start="49:11" pos:end="49:41">(<expr pos:start="49:12" pos:end="49:40"><name pos:start="49:12" pos:end="49:28"><name pos:start="49:12" pos:end="49:12">s</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:28">buf_free_count</name></name> <operator pos:start="49:30" pos:end="49:30">&lt;</operator> <name pos:start="49:32" pos:end="49:40">nb_chunks</name></expr>)</condition> <block pos:start="49:43" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:30">

        <expr_stmt pos:start="51:9" pos:end="51:66"><expr pos:start="51:9" pos:end="51:65"><call pos:start="51:9" pos:end="51:65"><name pos:start="51:9" pos:end="51:36">trace_mirror_yield_in_flight</name><argument_list pos:start="51:37" pos:end="51:65">(<argument pos:start="51:38" pos:end="51:38"><expr pos:start="51:38" pos:end="51:38"><name pos:start="51:38" pos:end="51:38">s</name></expr></argument>, <argument pos:start="51:41" pos:end="51:50"><expr pos:start="51:41" pos:end="51:50"><name pos:start="51:41" pos:end="51:50">sector_num</name></expr></argument>, <argument pos:start="51:53" pos:end="51:64"><expr pos:start="51:53" pos:end="51:64"><name pos:start="51:53" pos:end="51:64"><name pos:start="51:53" pos:end="51:53">s</name><operator pos:start="51:54" pos:end="51:55">-&gt;</operator><name pos:start="51:56" pos:end="51:64">in_flight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><call pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:26">mirror_wait_for_io</name><argument_list pos:start="53:27" pos:end="53:29">(<argument pos:start="53:28" pos:end="53:28"><expr pos:start="53:28" pos:end="53:28"><name pos:start="53:28" pos:end="53:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="59:5" pos:end="59:63">/* Allocate a MirrorOp that is used as an AIO callback.  */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:28"><expr pos:start="61:5" pos:end="61:27"><name pos:start="61:5" pos:end="61:6">op</name> <operator pos:start="61:8" pos:end="61:8">=</operator> <call pos:start="61:10" pos:end="61:27"><name pos:start="61:10" pos:end="61:14">g_new</name><argument_list pos:start="61:15" pos:end="61:27">(<argument pos:start="61:16" pos:end="61:23"><expr pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:23">MirrorOp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:26"><expr pos:start="61:26" pos:end="61:26"><literal type="number" pos:start="61:26" pos:end="61:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:14"><expr pos:start="63:5" pos:end="63:13"><name pos:start="63:5" pos:end="63:9"><name pos:start="63:5" pos:end="63:6">op</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:9">s</name></name> <operator pos:start="63:11" pos:end="63:11">=</operator> <name pos:start="63:13" pos:end="63:13">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:32"><expr pos:start="65:5" pos:end="65:31"><name pos:start="65:5" pos:end="65:18"><name pos:start="65:5" pos:end="65:6">op</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:18">sector_num</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:31">sector_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:32"><expr pos:start="67:5" pos:end="67:31"><name pos:start="67:5" pos:end="67:18"><name pos:start="67:5" pos:end="67:6">op</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:18">nb_sectors</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <name pos:start="67:22" pos:end="67:31">nb_sectors</name></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="75:7">/* Now make a QEMUIOVector taking enough granularity-sized chunks

     * from s-&gt;buf_free.

     */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:42"><expr pos:start="77:5" pos:end="77:41"><call pos:start="77:5" pos:end="77:41"><name pos:start="77:5" pos:end="77:19">qemu_iovec_init</name><argument_list pos:start="77:20" pos:end="77:41">(<argument pos:start="77:21" pos:end="77:29"><expr pos:start="77:21" pos:end="77:29"><operator pos:start="77:21" pos:end="77:21">&amp;</operator><name pos:start="77:22" pos:end="77:29"><name pos:start="77:22" pos:end="77:23">op</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:29">qiov</name></name></expr></argument>, <argument pos:start="77:32" pos:end="77:40"><expr pos:start="77:32" pos:end="77:40"><name pos:start="77:32" pos:end="77:40">nb_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="79:5" pos:end="93:5">while <condition pos:start="79:11" pos:end="79:27">(<expr pos:start="79:12" pos:end="79:26"><name pos:start="79:12" pos:end="79:20">nb_chunks</name><operator pos:start="79:21" pos:end="79:22">--</operator> <operator pos:start="79:24" pos:end="79:24">&gt;</operator> <literal type="number" pos:start="79:26" pos:end="79:26">0</literal></expr>)</condition> <block pos:start="79:29" pos:end="93:5">{<block_content pos:start="81:9" pos:end="91:71">

        <decl_stmt pos:start="81:9" pos:end="81:57"><decl pos:start="81:9" pos:end="81:56"><type pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:20">MirrorBuffer</name> <modifier pos:start="81:22" pos:end="81:22">*</modifier></type><name pos:start="81:23" pos:end="81:25">buf</name> <init pos:start="81:27" pos:end="81:56">= <expr pos:start="81:29" pos:end="81:56"><call pos:start="81:29" pos:end="81:56"><name pos:start="81:29" pos:end="81:42">QSIMPLEQ_FIRST</name><argument_list pos:start="81:43" pos:end="81:56">(<argument pos:start="81:44" pos:end="81:55"><expr pos:start="81:44" pos:end="81:55"><operator pos:start="81:44" pos:end="81:44">&amp;</operator><name pos:start="81:45" pos:end="81:55"><name pos:start="81:45" pos:end="81:45">s</name><operator pos:start="81:46" pos:end="81:47">-&gt;</operator><name pos:start="81:48" pos:end="81:55">buf_free</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:73"><decl pos:start="83:9" pos:end="83:72"><type pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:14">size_t</name></type> <name pos:start="83:16" pos:end="83:24">remaining</name> <init pos:start="83:26" pos:end="83:72">= <expr pos:start="83:28" pos:end="83:72"><name pos:start="83:28" pos:end="83:37">nb_sectors</name> <operator pos:start="83:39" pos:end="83:39">*</operator> <name pos:start="83:41" pos:end="83:56">BDRV_SECTOR_SIZE</name> <operator pos:start="83:58" pos:end="83:58">-</operator> <name pos:start="83:60" pos:end="83:72"><name pos:start="83:60" pos:end="83:61">op</name><operator pos:start="83:62" pos:end="83:63">-&gt;</operator><name pos:start="83:64" pos:end="83:67">qiov</name><operator pos:start="83:68" pos:end="83:68">.</operator><name pos:start="83:69" pos:end="83:72">size</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:49"><expr pos:start="87:9" pos:end="87:48"><call pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:28">QSIMPLEQ_REMOVE_HEAD</name><argument_list pos:start="87:29" pos:end="87:48">(<argument pos:start="87:30" pos:end="87:41"><expr pos:start="87:30" pos:end="87:41"><operator pos:start="87:30" pos:end="87:30">&amp;</operator><name pos:start="87:31" pos:end="87:41"><name pos:start="87:31" pos:end="87:31">s</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:41">buf_free</name></name></expr></argument>, <argument pos:start="87:44" pos:end="87:47"><expr pos:start="87:44" pos:end="87:47"><name pos:start="87:44" pos:end="87:47">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:28"><expr pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:25">buf_free_count</name></name><operator pos:start="89:26" pos:end="89:27">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:71"><expr pos:start="91:9" pos:end="91:70"><call pos:start="91:9" pos:end="91:70"><name pos:start="91:9" pos:end="91:22">qemu_iovec_add</name><argument_list pos:start="91:23" pos:end="91:70">(<argument pos:start="91:24" pos:end="91:32"><expr pos:start="91:24" pos:end="91:32"><operator pos:start="91:24" pos:end="91:24">&amp;</operator><name pos:start="91:25" pos:end="91:32"><name pos:start="91:25" pos:end="91:26">op</name><operator pos:start="91:27" pos:end="91:28">-&gt;</operator><name pos:start="91:29" pos:end="91:32">qiov</name></name></expr></argument>, <argument pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><name pos:start="91:35" pos:end="91:37">buf</name></expr></argument>, <argument pos:start="91:40" pos:end="91:69"><expr pos:start="91:40" pos:end="91:69"><call pos:start="91:40" pos:end="91:69"><name pos:start="91:40" pos:end="91:42">MIN</name><argument_list pos:start="91:43" pos:end="91:69">(<argument pos:start="91:44" pos:end="91:57"><expr pos:start="91:44" pos:end="91:57"><name pos:start="91:44" pos:end="91:57"><name pos:start="91:44" pos:end="91:44">s</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:57">granularity</name></name></expr></argument>, <argument pos:start="91:60" pos:end="91:68"><expr pos:start="91:60" pos:end="91:68"><name pos:start="91:60" pos:end="91:68">remaining</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="97:5" pos:end="97:34">/* Copy the dirty cluster.  */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:19"><expr pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:16">in_flight</name></name><operator pos:start="99:17" pos:end="99:18">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:39"><expr pos:start="101:5" pos:end="101:38"><name pos:start="101:5" pos:end="101:24"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:24">sectors_in_flight</name></name> <operator pos:start="101:26" pos:end="101:27">+=</operator> <name pos:start="101:29" pos:end="101:38">nb_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:58"><expr pos:start="103:5" pos:end="103:57"><call pos:start="103:5" pos:end="103:57"><name pos:start="103:5" pos:end="103:30">trace_mirror_one_iteration</name><argument_list pos:start="103:31" pos:end="103:57">(<argument pos:start="103:32" pos:end="103:32"><expr pos:start="103:32" pos:end="103:32"><name pos:start="103:32" pos:end="103:32">s</name></expr></argument>, <argument pos:start="103:35" pos:end="103:44"><expr pos:start="103:35" pos:end="103:44"><name pos:start="103:35" pos:end="103:44">sector_num</name></expr></argument>, <argument pos:start="103:47" pos:end="103:56"><expr pos:start="103:47" pos:end="103:56"><name pos:start="103:47" pos:end="103:56">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="111:45"><expr pos:start="107:5" pos:end="111:44"><call pos:start="107:5" pos:end="111:44"><name pos:start="107:5" pos:end="107:18">blk_aio_preadv</name><argument_list pos:start="107:19" pos:end="111:44">(<argument pos:start="107:20" pos:end="107:25"><expr pos:start="107:20" pos:end="107:25"><name pos:start="107:20" pos:end="107:25">source</name></expr></argument>, <argument pos:start="107:28" pos:end="107:56"><expr pos:start="107:28" pos:end="107:56"><name pos:start="107:28" pos:end="107:37">sector_num</name> <operator pos:start="107:39" pos:end="107:39">*</operator> <name pos:start="107:41" pos:end="107:56">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="107:59" pos:end="107:67"><expr pos:start="107:59" pos:end="107:67"><operator pos:start="107:59" pos:end="107:59">&amp;</operator><name pos:start="107:60" pos:end="107:67"><name pos:start="107:60" pos:end="107:61">op</name><operator pos:start="107:62" pos:end="107:63">-&gt;</operator><name pos:start="107:64" pos:end="107:67">qiov</name></name></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:48"><expr pos:start="109:20" pos:end="109:48"><name pos:start="109:20" pos:end="109:29">nb_sectors</name> <operator pos:start="109:31" pos:end="109:31">*</operator> <name pos:start="109:33" pos:end="109:48">BDRV_SECTOR_SIZE</name></expr></argument>,

                   <argument pos:start="111:20" pos:end="111:39"><expr pos:start="111:20" pos:end="111:39"><name pos:start="111:20" pos:end="111:39">mirror_read_complete</name></expr></argument>, <argument pos:start="111:42" pos:end="111:43"><expr pos:start="111:42" pos:end="111:43"><name pos:start="111:42" pos:end="111:43">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="113:5" pos:end="113:15">return <expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
