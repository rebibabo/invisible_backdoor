<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13104.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">dca_subframe_footer</name><parameter_list pos:start="1:31" pos:end="1:63">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:41">DCAContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:62"><decl pos:start="1:47" pos:end="1:62"><type pos:start="1:47" pos:end="1:62"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:62">base_channel</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="203:1">{<block_content pos:start="5:5" pos:end="201:13">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">in</name></decl>, <decl pos:start="5:13" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:15">out</name></decl>, <decl pos:start="5:18" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:31">aux_data_count</name></decl>, <decl pos:start="5:34" pos:end="5:45"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:34" pos:end="5:45">aux_data_end</name></decl>, <decl pos:start="5:48" pos:end="5:55"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:48" pos:end="5:55">reserved</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:21">nsyncaux</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="15:7">/*

     * Unpack optional information

     */</comment>



    <comment type="block" pos:start="19:5" pos:end="19:67">/* presumably optional information only appears in the core? */</comment>

    <if_stmt pos:start="21:5" pos:end="197:5"><if pos:start="21:5" pos:end="197:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:21">base_channel</name></expr>)</condition> <block pos:start="21:24" pos:end="197:5">{<block_content pos:start="23:9" pos:end="195:33">

        <if_stmt pos:start="23:9" pos:end="25:39"><if pos:start="23:9" pos:end="25:39">if <condition pos:start="23:12" pos:end="23:25">(<expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:24">timestamp</name></name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:39"><block_content pos:start="25:13" pos:end="25:39">

            <expr_stmt pos:start="25:13" pos:end="25:39"><expr pos:start="25:13" pos:end="25:38"><call pos:start="25:13" pos:end="25:38"><name pos:start="25:13" pos:end="25:26">skip_bits_long</name><argument_list pos:start="25:27" pos:end="25:38">(<argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><operator pos:start="25:28" pos:end="25:28">&amp;</operator><name pos:start="25:29" pos:end="25:33"><name pos:start="25:29" pos:end="25:29">s</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:33">gb</name></name></expr></argument>, <argument pos:start="25:36" pos:end="25:37"><expr pos:start="25:36" pos:end="25:37"><literal type="number" pos:start="25:36" pos:end="25:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="29:9" pos:end="189:9"><if pos:start="29:9" pos:end="189:9">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:23">aux_data</name></name></expr>)</condition> <block pos:start="29:26" pos:end="189:9">{<block_content pos:start="31:13" pos:end="187:13">

            <expr_stmt pos:start="31:13" pos:end="31:49"><expr pos:start="31:13" pos:end="31:48"><name pos:start="31:13" pos:end="31:26">aux_data_count</name> <operator pos:start="31:28" pos:end="31:28">=</operator> <call pos:start="31:30" pos:end="31:48"><name pos:start="31:30" pos:end="31:37">get_bits</name><argument_list pos:start="31:38" pos:end="31:48">(<argument pos:start="31:39" pos:end="31:44"><expr pos:start="31:39" pos:end="31:44"><operator pos:start="31:39" pos:end="31:39">&amp;</operator><name pos:start="31:40" pos:end="31:44"><name pos:start="31:40" pos:end="31:40">s</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:44">gb</name></name></expr></argument>, <argument pos:start="31:47" pos:end="31:47"><expr pos:start="31:47" pos:end="31:47"><literal type="number" pos:start="31:47" pos:end="31:47">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="line" pos:start="35:13" pos:end="35:29">// align (32-bit)</comment>

            <expr_stmt pos:start="37:13" pos:end="37:67"><expr pos:start="37:13" pos:end="37:66"><call pos:start="37:13" pos:end="37:66"><name pos:start="37:13" pos:end="37:26">skip_bits_long</name><argument_list pos:start="37:27" pos:end="37:66">(<argument pos:start="37:28" pos:end="37:33"><expr pos:start="37:28" pos:end="37:33"><operator pos:start="37:28" pos:end="37:28">&amp;</operator><name pos:start="37:29" pos:end="37:33"><name pos:start="37:29" pos:end="37:29">s</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:33">gb</name></name></expr></argument>, <argument pos:start="37:36" pos:end="37:65"><expr pos:start="37:36" pos:end="37:65"><operator pos:start="37:36" pos:end="37:36">(</operator><operator pos:start="37:37" pos:end="37:37">-</operator><call pos:start="37:38" pos:end="37:59"><name pos:start="37:38" pos:end="37:51">get_bits_count</name><argument_list pos:start="37:52" pos:end="37:59">(<argument pos:start="37:53" pos:end="37:58"><expr pos:start="37:53" pos:end="37:58"><operator pos:start="37:53" pos:end="37:53">&amp;</operator><name pos:start="37:54" pos:end="37:58"><name pos:start="37:54" pos:end="37:54">s</name><operator pos:start="37:55" pos:end="37:56">-&gt;</operator><name pos:start="37:57" pos:end="37:58">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="37:60" pos:end="37:60">)</operator> <operator pos:start="37:62" pos:end="37:62">&amp;</operator> <literal type="number" pos:start="37:64" pos:end="37:65">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="41:13" pos:end="41:71"><expr pos:start="41:13" pos:end="41:70"><name pos:start="41:13" pos:end="41:24">aux_data_end</name> <operator pos:start="41:26" pos:end="41:26">=</operator> <literal type="number" pos:start="41:28" pos:end="41:28">8</literal> <operator pos:start="41:30" pos:end="41:30">*</operator> <name pos:start="41:32" pos:end="41:45">aux_data_count</name> <operator pos:start="41:47" pos:end="41:47">+</operator> <call pos:start="41:49" pos:end="41:70"><name pos:start="41:49" pos:end="41:62">get_bits_count</name><argument_list pos:start="41:63" pos:end="41:70">(<argument pos:start="41:64" pos:end="41:69"><expr pos:start="41:64" pos:end="41:69"><operator pos:start="41:64" pos:end="41:64">&amp;</operator><name pos:start="41:65" pos:end="41:69"><name pos:start="41:65" pos:end="41:65">s</name><operator pos:start="41:66" pos:end="41:67">-&gt;</operator><name pos:start="41:68" pos:end="41:69">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="45:13" pos:end="53:13"><if pos:start="45:13" pos:end="53:13">if <condition pos:start="45:16" pos:end="45:71">(<expr pos:start="45:17" pos:end="45:70"><operator pos:start="45:17" pos:end="45:17">(</operator><name pos:start="45:18" pos:end="45:25">nsyncaux</name> <operator pos:start="45:27" pos:end="45:27">=</operator> <call pos:start="45:29" pos:end="45:53"><name pos:start="45:29" pos:end="45:41">get_bits_long</name><argument_list pos:start="45:42" pos:end="45:53">(<argument pos:start="45:43" pos:end="45:48"><expr pos:start="45:43" pos:end="45:48"><operator pos:start="45:43" pos:end="45:43">&amp;</operator><name pos:start="45:44" pos:end="45:48"><name pos:start="45:44" pos:end="45:44">s</name><operator pos:start="45:45" pos:end="45:46">-&gt;</operator><name pos:start="45:47" pos:end="45:48">gb</name></name></expr></argument>, <argument pos:start="45:51" pos:end="45:52"><expr pos:start="45:51" pos:end="45:52"><literal type="number" pos:start="45:51" pos:end="45:52">32</literal></expr></argument>)</argument_list></call><operator pos:start="45:54" pos:end="45:54">)</operator> <operator pos:start="45:56" pos:end="45:57">!=</operator> <name pos:start="45:59" pos:end="45:70">DCA_NSYNCAUX</name></expr>)</condition> <block pos:start="45:73" pos:end="53:13">{<block_content pos:start="47:17" pos:end="51:43">

                <expr_stmt pos:start="47:17" pos:end="49:33"><expr pos:start="47:17" pos:end="49:32"><call pos:start="47:17" pos:end="49:32"><name pos:start="47:17" pos:end="47:22">av_log</name><argument_list pos:start="47:23" pos:end="49:32">(<argument pos:start="47:24" pos:end="47:31"><expr pos:start="47:24" pos:end="47:31"><name pos:start="47:24" pos:end="47:31"><name pos:start="47:24" pos:end="47:24">s</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:31">avctx</name></name></expr></argument>, <argument pos:start="47:34" pos:end="47:45"><expr pos:start="47:34" pos:end="47:45"><name pos:start="47:34" pos:end="47:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:48" pos:end="47:79"><expr pos:start="47:48" pos:end="47:79"><literal type="string" pos:start="47:48" pos:end="47:69">"nSYNCAUX mismatch %#"</literal><name pos:start="47:70" pos:end="47:75">PRIx32</name><literal type="string" pos:start="47:76" pos:end="47:79">"\n"</literal></expr></argument>,

                       <argument pos:start="49:24" pos:end="49:31"><expr pos:start="49:24" pos:end="49:31"><name pos:start="49:24" pos:end="49:31">nsyncaux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="51:17" pos:end="51:43">return <expr pos:start="51:24" pos:end="51:42"><name pos:start="51:24" pos:end="51:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="57:13" pos:end="71:13"><if pos:start="57:13" pos:end="71:13">if <condition pos:start="57:16" pos:end="57:34">(<expr pos:start="57:17" pos:end="57:33"><call pos:start="57:17" pos:end="57:33"><name pos:start="57:17" pos:end="57:25">get_bits1</name><argument_list pos:start="57:26" pos:end="57:33">(<argument pos:start="57:27" pos:end="57:32"><expr pos:start="57:27" pos:end="57:32"><operator pos:start="57:27" pos:end="57:27">&amp;</operator><name pos:start="57:28" pos:end="57:32"><name pos:start="57:28" pos:end="57:28">s</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:32">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:36" pos:end="71:13">{<block_content pos:start="59:17" pos:end="69:43"> <comment type="line" pos:start="57:38" pos:end="57:57">// bAUXTimeStampFlag</comment>

                <expr_stmt pos:start="59:17" pos:end="61:74"><expr pos:start="59:17" pos:end="61:73"><call pos:start="59:17" pos:end="61:73"><name pos:start="59:17" pos:end="59:37">avpriv_request_sample</name><argument_list pos:start="59:38" pos:end="61:73">(<argument pos:start="59:39" pos:end="59:46"><expr pos:start="59:39" pos:end="59:46"><name pos:start="59:39" pos:end="59:46"><name pos:start="59:39" pos:end="59:39">s</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:46">avctx</name></name></expr></argument>,

                                      <argument pos:start="61:39" pos:end="61:72"><expr pos:start="61:39" pos:end="61:72"><literal type="string" pos:start="61:39" pos:end="61:72">"Auxiliary Decode Time Stamp Flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:start="63:17" pos:end="63:32">// align (4-bit)</comment>

                <expr_stmt pos:start="65:17" pos:end="65:65"><expr pos:start="65:17" pos:end="65:64"><call pos:start="65:17" pos:end="65:64"><name pos:start="65:17" pos:end="65:25">skip_bits</name><argument_list pos:start="65:26" pos:end="65:64">(<argument pos:start="65:27" pos:end="65:32"><expr pos:start="65:27" pos:end="65:32"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:32"><name pos:start="65:28" pos:end="65:28">s</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:32">gb</name></name></expr></argument>, <argument pos:start="65:35" pos:end="65:63"><expr pos:start="65:35" pos:end="65:63"><operator pos:start="65:35" pos:end="65:35">(</operator><operator pos:start="65:36" pos:end="65:36">-</operator><call pos:start="65:37" pos:end="65:58"><name pos:start="65:37" pos:end="65:50">get_bits_count</name><argument_list pos:start="65:51" pos:end="65:58">(<argument pos:start="65:52" pos:end="65:57"><expr pos:start="65:52" pos:end="65:57"><operator pos:start="65:52" pos:end="65:52">&amp;</operator><name pos:start="65:53" pos:end="65:57"><name pos:start="65:53" pos:end="65:53">s</name><operator pos:start="65:54" pos:end="65:55">-&gt;</operator><name pos:start="65:56" pos:end="65:57">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="65:59" pos:end="65:59">)</operator> <operator pos:start="65:61" pos:end="65:61">&amp;</operator> <literal type="number" pos:start="65:63" pos:end="65:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:start="67:17" pos:end="67:79">// 44 bits: nMSByte (8), nMarker (4), nLSByte (28), nMarker (4)</comment>

                <expr_stmt pos:start="69:17" pos:end="69:43"><expr pos:start="69:17" pos:end="69:42"><call pos:start="69:17" pos:end="69:42"><name pos:start="69:17" pos:end="69:30">skip_bits_long</name><argument_list pos:start="69:31" pos:end="69:42">(<argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:37"><name pos:start="69:33" pos:end="69:33">s</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:37">gb</name></name></expr></argument>, <argument pos:start="69:40" pos:end="69:41"><expr pos:start="69:40" pos:end="69:41"><literal type="number" pos:start="69:40" pos:end="69:41">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="75:13" pos:end="159:13"><if pos:start="75:13" pos:end="159:13">if <condition pos:start="75:16" pos:end="75:54">(<expr pos:start="75:17" pos:end="75:53"><operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:32"><name pos:start="75:18" pos:end="75:18">s</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:32">core_downmix</name></name> <operator pos:start="75:34" pos:end="75:34">=</operator> <call pos:start="75:36" pos:end="75:52"><name pos:start="75:36" pos:end="75:44">get_bits1</name><argument_list pos:start="75:45" pos:end="75:52">(<argument pos:start="75:46" pos:end="75:51"><expr pos:start="75:46" pos:end="75:51"><operator pos:start="75:46" pos:end="75:46">&amp;</operator><name pos:start="75:47" pos:end="75:51"><name pos:start="75:47" pos:end="75:47">s</name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:51">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="75:53" pos:end="75:53">)</operator></expr>)</condition> <block pos:start="75:56" pos:end="159:13">{<block_content pos:start="77:17" pos:end="157:17">

                <decl_stmt pos:start="77:17" pos:end="77:45"><decl pos:start="77:17" pos:end="77:44"><type pos:start="77:17" pos:end="77:19"><name pos:start="77:17" pos:end="77:19">int</name></type> <name pos:start="77:21" pos:end="77:22">am</name> <init pos:start="77:24" pos:end="77:44">= <expr pos:start="77:26" pos:end="77:44"><call pos:start="77:26" pos:end="77:44"><name pos:start="77:26" pos:end="77:33">get_bits</name><argument_list pos:start="77:34" pos:end="77:44">(<argument pos:start="77:35" pos:end="77:40"><expr pos:start="77:35" pos:end="77:40"><operator pos:start="77:35" pos:end="77:35">&amp;</operator><name pos:start="77:36" pos:end="77:40"><name pos:start="77:36" pos:end="77:36">s</name><operator pos:start="77:37" pos:end="77:38">-&gt;</operator><name pos:start="77:39" pos:end="77:40">gb</name></name></expr></argument>, <argument pos:start="77:43" pos:end="77:43"><expr pos:start="77:43" pos:end="77:43"><literal type="number" pos:start="77:43" pos:end="77:43">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <switch pos:start="79:17" pos:end="133:17">switch <condition pos:start="79:24" pos:end="79:27">(<expr pos:start="79:25" pos:end="79:26"><name pos:start="79:25" pos:end="79:26">am</name></expr>)</condition> <block pos:start="79:29" pos:end="133:17">{<block_content pos:start="81:17" pos:end="131:47">

                <case pos:start="81:17" pos:end="81:23">case <expr pos:start="81:22" pos:end="81:22"><literal type="number" pos:start="81:22" pos:end="81:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="83:21" pos:end="83:53"><expr pos:start="83:21" pos:end="83:52"><name pos:start="83:21" pos:end="83:41"><name pos:start="83:21" pos:end="83:21">s</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:41">core_downmix_amode</name></name> <operator pos:start="83:43" pos:end="83:43">=</operator> <name pos:start="83:45" pos:end="83:52">DCA_MONO</name></expr>;</expr_stmt>

                    <break pos:start="85:21" pos:end="85:26">break;</break>

                <case pos:start="87:17" pos:end="87:23">case <expr pos:start="87:22" pos:end="87:22"><literal type="number" pos:start="87:22" pos:end="87:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="89:21" pos:end="89:55"><expr pos:start="89:21" pos:end="89:54"><name pos:start="89:21" pos:end="89:41"><name pos:start="89:21" pos:end="89:21">s</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:41">core_downmix_amode</name></name> <operator pos:start="89:43" pos:end="89:43">=</operator> <name pos:start="89:45" pos:end="89:54">DCA_STEREO</name></expr>;</expr_stmt>

                    <break pos:start="91:21" pos:end="91:26">break;</break>

                <case pos:start="93:17" pos:end="93:23">case <expr pos:start="93:22" pos:end="93:22"><literal type="number" pos:start="93:22" pos:end="93:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="95:21" pos:end="95:61"><expr pos:start="95:21" pos:end="95:60"><name pos:start="95:21" pos:end="95:41"><name pos:start="95:21" pos:end="95:21">s</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:41">core_downmix_amode</name></name> <operator pos:start="95:43" pos:end="95:43">=</operator> <name pos:start="95:45" pos:end="95:60">DCA_STEREO_TOTAL</name></expr>;</expr_stmt>

                    <break pos:start="97:21" pos:end="97:26">break;</break>

                <case pos:start="99:17" pos:end="99:23">case <expr pos:start="99:22" pos:end="99:22"><literal type="number" pos:start="99:22" pos:end="99:22">3</literal></expr>:</case>

                    <expr_stmt pos:start="101:21" pos:end="101:51"><expr pos:start="101:21" pos:end="101:50"><name pos:start="101:21" pos:end="101:41"><name pos:start="101:21" pos:end="101:21">s</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:41">core_downmix_amode</name></name> <operator pos:start="101:43" pos:end="101:43">=</operator> <name pos:start="101:45" pos:end="101:50">DCA_3F</name></expr>;</expr_stmt>

                    <break pos:start="103:21" pos:end="103:26">break;</break>

                <case pos:start="105:17" pos:end="105:23">case <expr pos:start="105:22" pos:end="105:22"><literal type="number" pos:start="105:22" pos:end="105:22">4</literal></expr>:</case>

                    <expr_stmt pos:start="107:21" pos:end="107:53"><expr pos:start="107:21" pos:end="107:52"><name pos:start="107:21" pos:end="107:41"><name pos:start="107:21" pos:end="107:21">s</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:41">core_downmix_amode</name></name> <operator pos:start="107:43" pos:end="107:43">=</operator> <name pos:start="107:45" pos:end="107:52">DCA_2F1R</name></expr>;</expr_stmt>

                    <break pos:start="109:21" pos:end="109:26">break;</break>

                <case pos:start="111:17" pos:end="111:23">case <expr pos:start="111:22" pos:end="111:22"><literal type="number" pos:start="111:22" pos:end="111:22">5</literal></expr>:</case>

                    <expr_stmt pos:start="113:21" pos:end="113:53"><expr pos:start="113:21" pos:end="113:52"><name pos:start="113:21" pos:end="113:41"><name pos:start="113:21" pos:end="113:21">s</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:41">core_downmix_amode</name></name> <operator pos:start="113:43" pos:end="113:43">=</operator> <name pos:start="113:45" pos:end="113:52">DCA_2F2R</name></expr>;</expr_stmt>

                    <break pos:start="115:21" pos:end="115:26">break;</break>

                <case pos:start="117:17" pos:end="117:23">case <expr pos:start="117:22" pos:end="117:22"><literal type="number" pos:start="117:22" pos:end="117:22">6</literal></expr>:</case>

                    <expr_stmt pos:start="119:21" pos:end="119:53"><expr pos:start="119:21" pos:end="119:52"><name pos:start="119:21" pos:end="119:41"><name pos:start="119:21" pos:end="119:21">s</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:41">core_downmix_amode</name></name> <operator pos:start="119:43" pos:end="119:43">=</operator> <name pos:start="119:45" pos:end="119:52">DCA_3F1R</name></expr>;</expr_stmt>

                    <break pos:start="121:21" pos:end="121:26">break;</break>

                <default pos:start="123:17" pos:end="123:24">default:</default>

                    <expr_stmt pos:start="125:21" pos:end="129:31"><expr pos:start="125:21" pos:end="129:30"><call pos:start="125:21" pos:end="129:30"><name pos:start="125:21" pos:end="125:26">av_log</name><argument_list pos:start="125:27" pos:end="129:30">(<argument pos:start="125:28" pos:end="125:35"><expr pos:start="125:28" pos:end="125:35"><name pos:start="125:28" pos:end="125:35"><name pos:start="125:28" pos:end="125:28">s</name><operator pos:start="125:29" pos:end="125:30">-&gt;</operator><name pos:start="125:31" pos:end="125:35">avctx</name></name></expr></argument>, <argument pos:start="125:38" pos:end="125:49"><expr pos:start="125:38" pos:end="125:49"><name pos:start="125:38" pos:end="125:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="127:28" pos:end="127:80"><expr pos:start="127:28" pos:end="127:80"><literal type="string" pos:start="127:28" pos:end="127:80">"Invalid mode %d for embedded downmix coefficients\n"</literal></expr></argument>,

                           <argument pos:start="129:28" pos:end="129:29"><expr pos:start="129:28" pos:end="129:29"><name pos:start="129:28" pos:end="129:29">am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="131:21" pos:end="131:47">return <expr pos:start="131:28" pos:end="131:46"><name pos:start="131:28" pos:end="131:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></switch>

                <for pos:start="135:17" pos:end="157:17">for <control pos:start="135:21" pos:end="135:82">(<init pos:start="135:22" pos:end="135:29"><expr pos:start="135:22" pos:end="135:28"><name pos:start="135:22" pos:end="135:24">out</name> <operator pos:start="135:26" pos:end="135:26">=</operator> <literal type="number" pos:start="135:28" pos:end="135:28">0</literal></expr>;</init> <condition pos:start="135:31" pos:end="135:75"><expr pos:start="135:31" pos:end="135:74"><name pos:start="135:31" pos:end="135:33">out</name> <operator pos:start="135:35" pos:end="135:35">&lt;</operator> <name pos:start="135:37" pos:end="135:74"><name pos:start="135:37" pos:end="135:51">ff_dca_channels</name><index pos:start="135:52" pos:end="135:74">[<expr pos:start="135:53" pos:end="135:73"><name pos:start="135:53" pos:end="135:73"><name pos:start="135:53" pos:end="135:53">s</name><operator pos:start="135:54" pos:end="135:55">-&gt;</operator><name pos:start="135:56" pos:end="135:73">core_downmix_amode</name></name></expr>]</index></name></expr>;</condition> <incr pos:start="135:77" pos:end="135:81"><expr pos:start="135:77" pos:end="135:81"><name pos:start="135:77" pos:end="135:79">out</name><operator pos:start="135:80" pos:end="135:81">++</operator></expr></incr>)</control> <block pos:start="135:84" pos:end="157:17">{<block_content pos:start="137:21" pos:end="155:21">

                    <for pos:start="137:21" pos:end="155:21">for <control pos:start="137:25" pos:end="137:85">(<init pos:start="137:26" pos:end="137:32"><expr pos:start="137:26" pos:end="137:31"><name pos:start="137:26" pos:end="137:27">in</name> <operator pos:start="137:29" pos:end="137:29">=</operator> <literal type="number" pos:start="137:31" pos:end="137:31">0</literal></expr>;</init> <condition pos:start="137:34" pos:end="137:79"><expr pos:start="137:34" pos:end="137:78"><name pos:start="137:34" pos:end="137:35">in</name> <operator pos:start="137:37" pos:end="137:37">&lt;</operator> <name pos:start="137:39" pos:end="137:67"><name pos:start="137:39" pos:end="137:39">s</name><operator pos:start="137:40" pos:end="137:41">-&gt;</operator><name pos:start="137:42" pos:end="137:53">audio_header</name><operator pos:start="137:54" pos:end="137:54">.</operator><name pos:start="137:55" pos:end="137:67">prim_channels</name></name> <operator pos:start="137:69" pos:end="137:69">+</operator> <operator pos:start="137:71" pos:end="137:71">!</operator><operator pos:start="137:72" pos:end="137:72">!</operator><name pos:start="137:73" pos:end="137:78"><name pos:start="137:73" pos:end="137:73">s</name><operator pos:start="137:74" pos:end="137:75">-&gt;</operator><name pos:start="137:76" pos:end="137:78">lfe</name></name></expr>;</condition> <incr pos:start="137:81" pos:end="137:84"><expr pos:start="137:81" pos:end="137:84"><name pos:start="137:81" pos:end="137:82">in</name><operator pos:start="137:83" pos:end="137:84">++</operator></expr></incr>)</control> <block pos:start="137:87" pos:end="155:21">{<block_content pos:start="139:25" pos:end="153:61">

                        <decl_stmt pos:start="139:25" pos:end="139:59"><decl pos:start="139:25" pos:end="139:58"><type pos:start="139:25" pos:end="139:32"><name pos:start="139:25" pos:end="139:32">uint16_t</name></type> <name pos:start="139:34" pos:end="139:36">tmp</name> <init pos:start="139:38" pos:end="139:58">= <expr pos:start="139:40" pos:end="139:58"><call pos:start="139:40" pos:end="139:58"><name pos:start="139:40" pos:end="139:47">get_bits</name><argument_list pos:start="139:48" pos:end="139:58">(<argument pos:start="139:49" pos:end="139:54"><expr pos:start="139:49" pos:end="139:54"><operator pos:start="139:49" pos:end="139:49">&amp;</operator><name pos:start="139:50" pos:end="139:54"><name pos:start="139:50" pos:end="139:50">s</name><operator pos:start="139:51" pos:end="139:52">-&gt;</operator><name pos:start="139:53" pos:end="139:54">gb</name></name></expr></argument>, <argument pos:start="139:57" pos:end="139:57"><expr pos:start="139:57" pos:end="139:57"><literal type="number" pos:start="139:57" pos:end="139:57">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="141:25" pos:end="151:25"><if pos:start="141:25" pos:end="151:25">if <condition pos:start="141:28" pos:end="141:47">(<expr pos:start="141:29" pos:end="141:46"><operator pos:start="141:29" pos:end="141:29">(</operator><name pos:start="141:30" pos:end="141:32">tmp</name> <operator pos:start="141:34" pos:end="141:34">&amp;</operator> <literal type="number" pos:start="141:36" pos:end="141:39">0xFF</literal><operator pos:start="141:40" pos:end="141:40">)</operator> <operator pos:start="141:42" pos:end="141:42">&gt;</operator> <literal type="number" pos:start="141:44" pos:end="141:46">241</literal></expr>)</condition> <block pos:start="141:49" pos:end="151:25">{<block_content pos:start="143:29" pos:end="149:55">

                            <expr_stmt pos:start="143:29" pos:end="147:40"><expr pos:start="143:29" pos:end="147:39"><call pos:start="143:29" pos:end="147:39"><name pos:start="143:29" pos:end="143:34">av_log</name><argument_list pos:start="143:35" pos:end="147:39">(<argument pos:start="143:36" pos:end="143:43"><expr pos:start="143:36" pos:end="143:43"><name pos:start="143:36" pos:end="143:43"><name pos:start="143:36" pos:end="143:36">s</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:43">avctx</name></name></expr></argument>, <argument pos:start="143:46" pos:end="143:57"><expr pos:start="143:46" pos:end="143:57"><name pos:start="143:46" pos:end="143:57">AV_LOG_ERROR</name></expr></argument>,

                                   <argument pos:start="145:36" pos:end="145:81"><expr pos:start="145:36" pos:end="145:81"><literal type="string" pos:start="145:36" pos:end="145:71">"Invalid downmix coefficient code %"</literal><name pos:start="145:72" pos:end="145:77">PRIu16</name><literal type="string" pos:start="145:78" pos:end="145:81">"\n"</literal></expr></argument>,

                                   <argument pos:start="147:36" pos:end="147:38"><expr pos:start="147:36" pos:end="147:38"><name pos:start="147:36" pos:end="147:38">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="149:29" pos:end="149:55">return <expr pos:start="149:36" pos:end="149:54"><name pos:start="149:36" pos:end="149:54">AVERROR_INVALIDDATA</name></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="153:25" pos:end="153:61"><expr pos:start="153:25" pos:end="153:60"><name pos:start="153:25" pos:end="153:54"><name pos:start="153:25" pos:end="153:25">s</name><operator pos:start="153:26" pos:end="153:27">-&gt;</operator><name pos:start="153:28" pos:end="153:45">core_downmix_codes</name><index pos:start="153:46" pos:end="153:49">[<expr pos:start="153:47" pos:end="153:48"><name pos:start="153:47" pos:end="153:48">in</name></expr>]</index><index pos:start="153:50" pos:end="153:54">[<expr pos:start="153:51" pos:end="153:53"><name pos:start="153:51" pos:end="153:53">out</name></expr>]</index></name> <operator pos:start="153:56" pos:end="153:56">=</operator> <name pos:start="153:58" pos:end="153:60">tmp</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="163:13" pos:end="163:35"><expr pos:start="163:13" pos:end="163:34"><call pos:start="163:13" pos:end="163:34"><name pos:start="163:13" pos:end="163:26">align_get_bits</name><argument_list pos:start="163:27" pos:end="163:34">(<argument pos:start="163:28" pos:end="163:33"><expr pos:start="163:28" pos:end="163:33"><operator pos:start="163:28" pos:end="163:28">&amp;</operator><name pos:start="163:29" pos:end="163:33"><name pos:start="163:29" pos:end="163:29">s</name><operator pos:start="163:30" pos:end="163:31">-&gt;</operator><name pos:start="163:32" pos:end="163:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="163:37" pos:end="163:49">// byte align</comment>

            <expr_stmt pos:start="165:13" pos:end="165:34"><expr pos:start="165:13" pos:end="165:33"><call pos:start="165:13" pos:end="165:33"><name pos:start="165:13" pos:end="165:21">skip_bits</name><argument_list pos:start="165:22" pos:end="165:33">(<argument pos:start="165:23" pos:end="165:28"><expr pos:start="165:23" pos:end="165:28"><operator pos:start="165:23" pos:end="165:23">&amp;</operator><name pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:24">s</name><operator pos:start="165:25" pos:end="165:26">-&gt;</operator><name pos:start="165:27" pos:end="165:28">gb</name></name></expr></argument>, <argument pos:start="165:31" pos:end="165:32"><expr pos:start="165:31" pos:end="165:32"><literal type="number" pos:start="165:31" pos:end="165:32">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="165:37" pos:end="165:48">// nAUXCRC16</comment>



            <comment type="line" pos:start="169:13" pos:end="169:69">// additional data (reserved, cf. ETSI TS 102 114 V1.4.1)</comment>

            <if_stmt pos:start="171:13" pos:end="187:13"><if pos:start="171:13" pos:end="179:13">if <condition pos:start="171:16" pos:end="171:73">(<expr pos:start="171:17" pos:end="171:72"><operator pos:start="171:17" pos:end="171:17">(</operator><name pos:start="171:18" pos:end="171:25">reserved</name> <operator pos:start="171:27" pos:end="171:27">=</operator> <operator pos:start="171:29" pos:end="171:29">(</operator><name pos:start="171:30" pos:end="171:41">aux_data_end</name> <operator pos:start="171:43" pos:end="171:43">-</operator> <call pos:start="171:45" pos:end="171:66"><name pos:start="171:45" pos:end="171:58">get_bits_count</name><argument_list pos:start="171:59" pos:end="171:66">(<argument pos:start="171:60" pos:end="171:65"><expr pos:start="171:60" pos:end="171:65"><operator pos:start="171:60" pos:end="171:60">&amp;</operator><name pos:start="171:61" pos:end="171:65"><name pos:start="171:61" pos:end="171:61">s</name><operator pos:start="171:62" pos:end="171:63">-&gt;</operator><name pos:start="171:64" pos:end="171:65">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="171:67" pos:end="171:67">)</operator><operator pos:start="171:68" pos:end="171:68">)</operator> <operator pos:start="171:70" pos:end="171:70">&lt;</operator> <literal type="number" pos:start="171:72" pos:end="171:72">0</literal></expr>)</condition> <block pos:start="171:75" pos:end="179:13">{<block_content pos:start="173:17" pos:end="177:43">

                <expr_stmt pos:start="173:17" pos:end="175:74"><expr pos:start="173:17" pos:end="175:73"><call pos:start="173:17" pos:end="175:73"><name pos:start="173:17" pos:end="173:22">av_log</name><argument_list pos:start="173:23" pos:end="175:73">(<argument pos:start="173:24" pos:end="173:31"><expr pos:start="173:24" pos:end="173:31"><name pos:start="173:24" pos:end="173:31"><name pos:start="173:24" pos:end="173:24">s</name><operator pos:start="173:25" pos:end="173:26">-&gt;</operator><name pos:start="173:27" pos:end="173:31">avctx</name></name></expr></argument>, <argument pos:start="173:34" pos:end="173:45"><expr pos:start="173:34" pos:end="173:45"><name pos:start="173:34" pos:end="173:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="175:24" pos:end="175:61"><expr pos:start="175:24" pos:end="175:61"><literal type="string" pos:start="175:24" pos:end="175:61">"Overread auxiliary data by %d bits\n"</literal></expr></argument>, <argument pos:start="175:64" pos:end="175:72"><expr pos:start="175:64" pos:end="175:72"><operator pos:start="175:64" pos:end="175:64">-</operator><name pos:start="175:65" pos:end="175:72">reserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="177:17" pos:end="177:43">return <expr pos:start="177:24" pos:end="177:42"><name pos:start="177:24" pos:end="177:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="179:15" pos:end="187:13">else if <condition pos:start="179:23" pos:end="179:32">(<expr pos:start="179:24" pos:end="179:31"><name pos:start="179:24" pos:end="179:31">reserved</name></expr>)</condition> <block pos:start="179:34" pos:end="187:13">{<block_content pos:start="181:17" pos:end="185:49">

                <expr_stmt pos:start="181:17" pos:end="183:78"><expr pos:start="181:17" pos:end="183:77"><call pos:start="181:17" pos:end="183:77"><name pos:start="181:17" pos:end="181:37">avpriv_request_sample</name><argument_list pos:start="181:38" pos:end="183:77">(<argument pos:start="181:39" pos:end="181:46"><expr pos:start="181:39" pos:end="181:46"><name pos:start="181:39" pos:end="181:46"><name pos:start="181:39" pos:end="181:39">s</name><operator pos:start="181:40" pos:end="181:41">-&gt;</operator><name pos:start="181:42" pos:end="181:46">avctx</name></name></expr></argument>,

                                      <argument pos:start="183:39" pos:end="183:76"><expr pos:start="183:39" pos:end="183:76"><literal type="string" pos:start="183:39" pos:end="183:76">"Core auxiliary data reserved content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:49"><expr pos:start="185:17" pos:end="185:48"><call pos:start="185:17" pos:end="185:48"><name pos:start="185:17" pos:end="185:30">skip_bits_long</name><argument_list pos:start="185:31" pos:end="185:48">(<argument pos:start="185:32" pos:end="185:37"><expr pos:start="185:32" pos:end="185:37"><operator pos:start="185:32" pos:end="185:32">&amp;</operator><name pos:start="185:33" pos:end="185:37"><name pos:start="185:33" pos:end="185:33">s</name><operator pos:start="185:34" pos:end="185:35">-&gt;</operator><name pos:start="185:36" pos:end="185:37">gb</name></name></expr></argument>, <argument pos:start="185:40" pos:end="185:47"><expr pos:start="185:40" pos:end="185:47"><name pos:start="185:40" pos:end="185:47">reserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="193:9" pos:end="195:33"><if pos:start="193:9" pos:end="195:33">if <condition pos:start="193:12" pos:end="193:42">(<expr pos:start="193:13" pos:end="193:41"><name pos:start="193:13" pos:end="193:26"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:26">crc_present</name></name> <operator pos:start="193:28" pos:end="193:29">&amp;&amp;</operator> <name pos:start="193:31" pos:end="193:41"><name pos:start="193:31" pos:end="193:31">s</name><operator pos:start="193:32" pos:end="193:33">-&gt;</operator><name pos:start="193:34" pos:end="193:41">dynrange</name></name></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="195:33"><block_content pos:start="195:13" pos:end="195:33">

            <expr_stmt pos:start="195:13" pos:end="195:33"><expr pos:start="195:13" pos:end="195:32"><call pos:start="195:13" pos:end="195:32"><name pos:start="195:13" pos:end="195:20">get_bits</name><argument_list pos:start="195:21" pos:end="195:32">(<argument pos:start="195:22" pos:end="195:27"><expr pos:start="195:22" pos:end="195:27"><operator pos:start="195:22" pos:end="195:22">&amp;</operator><name pos:start="195:23" pos:end="195:27"><name pos:start="195:23" pos:end="195:23">s</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:27">gb</name></name></expr></argument>, <argument pos:start="195:30" pos:end="195:31"><expr pos:start="195:30" pos:end="195:31"><literal type="number" pos:start="195:30" pos:end="195:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="201:5" pos:end="201:13">return <expr pos:start="201:12" pos:end="201:12"><literal type="number" pos:start="201:12" pos:end="201:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
