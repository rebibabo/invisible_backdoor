<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12905.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:44">avcodec_encode_video</name><parameter_list pos:start="1:45" pos:end="3:65">(<parameter pos:start="1:46" pos:end="1:66"><decl pos:start="1:46" pos:end="1:66"><type pos:start="1:46" pos:end="1:66"><name pos:start="1:46" pos:end="1:59">AVCodecContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:66">avctx</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:80"><decl pos:start="1:69" pos:end="1:80"><type pos:start="1:69" pos:end="1:80"><name pos:start="1:69" pos:end="1:75">uint8_t</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:80">buf</name></decl></parameter>, <parameter pos:start="1:83" pos:end="1:94"><decl pos:start="1:83" pos:end="1:94"><type pos:start="1:83" pos:end="1:94"><name pos:start="1:83" pos:end="1:85">int</name></type> <name pos:start="1:87" pos:end="1:94">buf_size</name></decl></parameter>,

                                             <parameter pos:start="3:46" pos:end="3:64"><decl pos:start="3:46" pos:end="3:64"><type pos:start="3:46" pos:end="3:64"><specifier pos:start="3:46" pos:end="3:50">const</specifier> <name pos:start="3:52" pos:end="3:58">AVFrame</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:64">pict</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:32">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">AVPacket</name></type> <name pos:start="7:14" pos:end="7:16">pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:23">got_packet</name> <init pos:start="9:25" pos:end="9:27">= <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:38">(<expr pos:start="13:9" pos:end="13:37"><name pos:start="13:9" pos:end="13:16">buf_size</name> <operator pos:start="13:18" pos:end="13:18">&lt;</operator> <name pos:start="13:20" pos:end="13:37">FF_MIN_BUFFER_SIZE</name></expr>)</condition> <block pos:start="13:40" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:74"><expr pos:start="15:9" pos:end="15:73"><call pos:start="15:9" pos:end="15:73"><name pos:start="15:9" pos:end="15:14">av_log</name><argument_list pos:start="15:15" pos:end="15:73">(<argument pos:start="15:16" pos:end="15:20"><expr pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:20">avctx</name></expr></argument>, <argument pos:start="15:23" pos:end="15:34"><expr pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:37" pos:end="15:72"><expr pos:start="15:37" pos:end="15:72"><literal type="string" pos:start="15:37" pos:end="15:72">"buffer smaller than minimum size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:25"><expr pos:start="23:5" pos:end="23:24"><call pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:18">av_init_packet</name><argument_list pos:start="23:19" pos:end="23:24">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><operator pos:start="23:20" pos:end="23:20">&amp;</operator><name pos:start="23:21" pos:end="23:23">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:7">pkt</name><operator pos:start="25:8" pos:end="25:8">.</operator><name pos:start="25:9" pos:end="25:12">data</name></name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:18">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:24"><expr pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:7">pkt</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:12">size</name></name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:23">buf_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:64"><expr pos:start="31:5" pos:end="31:63"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:63"><name pos:start="31:11" pos:end="31:31">avcodec_encode_video2</name><argument_list pos:start="31:32" pos:end="31:63">(<argument pos:start="31:33" pos:end="31:37"><expr pos:start="31:33" pos:end="31:37"><name pos:start="31:33" pos:end="31:37">avctx</name></expr></argument>, <argument pos:start="31:40" pos:end="31:43"><expr pos:start="31:40" pos:end="31:43"><operator pos:start="31:40" pos:end="31:40">&amp;</operator><name pos:start="31:41" pos:end="31:43">pkt</name></expr></argument>, <argument pos:start="31:46" pos:end="31:49"><expr pos:start="31:46" pos:end="31:49"><name pos:start="31:46" pos:end="31:49">pict</name></expr></argument>, <argument pos:start="31:52" pos:end="31:62"><expr pos:start="31:52" pos:end="31:62"><operator pos:start="31:52" pos:end="31:52">&amp;</operator><name pos:start="31:53" pos:end="31:62">got_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:49">(<expr pos:start="35:9" pos:end="35:48"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:12">ret</name> <operator pos:start="35:14" pos:end="35:15">&amp;&amp;</operator> <name pos:start="35:17" pos:end="35:26">got_packet</name> <operator pos:start="35:28" pos:end="35:29">&amp;&amp;</operator> <name pos:start="35:31" pos:end="35:48"><name pos:start="35:31" pos:end="35:35">avctx</name><operator pos:start="35:36" pos:end="35:37">-&gt;</operator><name pos:start="35:38" pos:end="35:48">coded_frame</name></name></expr>)</condition> <block pos:start="35:51" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:72">

        <expr_stmt pos:start="37:9" pos:end="37:48"><expr pos:start="37:9" pos:end="37:47"><name pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:26">coded_frame</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:31">pts</name></name>       <operator pos:start="37:39" pos:end="37:39">=</operator> <name pos:start="37:41" pos:end="37:47"><name pos:start="37:41" pos:end="37:43">pkt</name><operator pos:start="37:44" pos:end="37:44">.</operator><name pos:start="37:45" pos:end="37:47">pts</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:72"><expr pos:start="39:9" pos:end="39:71"><name pos:start="39:9" pos:end="39:37"><name pos:start="39:9" pos:end="39:13">avctx</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:26">coded_frame</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:37">key_frame</name></name> <operator pos:start="39:39" pos:end="39:39">=</operator> <operator pos:start="39:41" pos:end="39:41">!</operator><operator pos:start="39:42" pos:end="39:42">!</operator><operator pos:start="39:43" pos:end="39:43">(</operator><name pos:start="39:44" pos:end="39:52"><name pos:start="39:44" pos:end="39:46">pkt</name><operator pos:start="39:47" pos:end="39:47">.</operator><name pos:start="39:48" pos:end="39:52">flags</name></name> <operator pos:start="39:54" pos:end="39:54">&amp;</operator> <name pos:start="39:56" pos:end="39:70">AV_PKT_FLAG_KEY</name><operator pos:start="39:71" pos:end="39:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="47:5" pos:end="47:54">/* free any side data since we cannot return it */</comment>

    <if_stmt pos:start="49:5" pos:end="61:5"><if pos:start="49:5" pos:end="61:5">if <condition pos:start="49:8" pos:end="49:32">(<expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:11">pkt</name><operator pos:start="49:12" pos:end="49:12">.</operator><name pos:start="49:13" pos:end="49:27">side_data_elems</name></name> <operator pos:start="49:29" pos:end="49:29">&gt;</operator> <literal type="number" pos:start="49:31" pos:end="49:31">0</literal></expr>)</condition> <block pos:start="49:34" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:32">

        <decl_stmt pos:start="51:9" pos:end="51:14"><decl pos:start="51:9" pos:end="51:13"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:13">i</name></decl>;</decl_stmt>

        <for pos:start="53:9" pos:end="55:43">for <control pos:start="53:13" pos:end="53:49">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:44"><expr pos:start="53:21" pos:end="53:43"><name pos:start="53:21" pos:end="53:21">i</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <name pos:start="53:25" pos:end="53:43"><name pos:start="53:25" pos:end="53:27">pkt</name><operator pos:start="53:28" pos:end="53:28">.</operator><name pos:start="53:29" pos:end="53:43">side_data_elems</name></name></expr>;</condition> <incr pos:start="53:46" pos:end="53:48"><expr pos:start="53:46" pos:end="53:48"><name pos:start="53:46" pos:end="53:46">i</name><operator pos:start="53:47" pos:end="53:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="55:13" pos:end="55:43"><block_content pos:start="55:13" pos:end="55:43">

            <expr_stmt pos:start="55:13" pos:end="55:43"><expr pos:start="55:13" pos:end="55:42"><call pos:start="55:13" pos:end="55:42"><name pos:start="55:13" pos:end="55:19">av_free</name><argument_list pos:start="55:20" pos:end="55:42">(<argument pos:start="55:21" pos:end="55:41"><expr pos:start="55:21" pos:end="55:41"><name pos:start="55:21" pos:end="55:36"><name pos:start="55:21" pos:end="55:23">pkt</name><operator pos:start="55:24" pos:end="55:24">.</operator><name pos:start="55:25" pos:end="55:33">side_data</name><index pos:start="55:34" pos:end="55:36">[<expr pos:start="55:35" pos:end="55:35"><name pos:start="55:35" pos:end="55:35">i</name></expr>]</index></name><operator pos:start="55:37" pos:end="55:37">.</operator><name pos:start="55:38" pos:end="55:41">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><call pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:16">av_freep</name><argument_list pos:start="57:17" pos:end="57:32">(<argument pos:start="57:18" pos:end="57:31"><expr pos:start="57:18" pos:end="57:31"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:31"><name pos:start="57:19" pos:end="57:21">pkt</name><operator pos:start="57:22" pos:end="57:22">.</operator><name pos:start="57:23" pos:end="57:31">side_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:32"><expr pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:27"><name pos:start="59:9" pos:end="59:11">pkt</name><operator pos:start="59:12" pos:end="59:12">.</operator><name pos:start="59:13" pos:end="59:27">side_data_elems</name></name> <operator pos:start="59:29" pos:end="59:29">=</operator> <literal type="number" pos:start="59:31" pos:end="59:31">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="65:5" pos:end="65:32">return <expr pos:start="65:12" pos:end="65:31"><ternary pos:start="65:12" pos:end="65:31"><condition pos:start="65:12" pos:end="65:16"><expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">ret</name></expr> ?</condition><then pos:start="65:18" pos:end="65:20"> <expr pos:start="65:18" pos:end="65:20"><name pos:start="65:18" pos:end="65:20">ret</name></expr> </then><else pos:start="65:22" pos:end="65:31">: <expr pos:start="65:24" pos:end="65:31"><name pos:start="65:24" pos:end="65:31"><name pos:start="65:24" pos:end="65:26">pkt</name><operator pos:start="65:27" pos:end="65:27">.</operator><name pos:start="65:28" pos:end="65:31">size</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function></unit>
