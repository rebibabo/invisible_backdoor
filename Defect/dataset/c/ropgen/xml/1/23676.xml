<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23676.c" pos:tabs="8"><function pos:start="1:1" pos:end="295:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">inline</specifier> <specifier pos:start="1:8" pos:end="1:13">static</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hcscale</name>)<parameter_list pos:start="1:35" pos:end="3:81">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:43">uint16_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dst</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:62">dstWidth</name></decl></parameter>,

				<parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:39">uint8_t</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:45">src1</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:60"><decl pos:start="3:48" pos:end="3:60"><type pos:start="3:48" pos:end="3:60"><name pos:start="3:48" pos:end="3:54">uint8_t</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:60">src2</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:70"><decl pos:start="3:63" pos:end="3:70"><type pos:start="3:63" pos:end="3:70"><name pos:start="3:63" pos:end="3:65">int</name></type> <name pos:start="3:67" pos:end="3:70">srcW</name></decl></parameter>, <parameter pos:start="3:73" pos:end="3:80"><decl pos:start="3:73" pos:end="3:80"><type pos:start="3:73" pos:end="3:80"><name pos:start="3:73" pos:end="3:75">int</name></type> <name pos:start="3:77" pos:end="3:80">xInc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="295:1">{<block_content pos:start="11:5" pos:end="293:4">

<cpp:ifdef pos:start="7:1" pos:end="7:15">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:15">HAVE_MMX</name></cpp:ifdef>

	<comment type="line" pos:start="9:9" pos:end="9:90">// use the new MMX scaler if th mmx2 cant be used (its faster than the x86asm one)</comment>

    <if_stmt pos:start="11:5" pos:end="293:4"><if pos:start="11:5" pos:end="293:4">if<condition pos:start="11:7" pos:end="14:0">(<expr pos:start="11:8" pos:end="11:57"><name pos:start="11:8" pos:end="11:16">sws_flags</name> <operator pos:start="11:18" pos:end="11:19">!=</operator> <name pos:start="11:21" pos:end="11:37">SWS_FAST_BILINEAR</name> <operator pos:start="11:39" pos:end="11:40">||</operator> <operator pos:start="11:42" pos:end="11:42">(</operator><operator pos:start="11:43" pos:end="11:43">!</operator><name pos:start="11:44" pos:end="11:56">canMMX2BeUsed</name><operator pos:start="11:57" pos:end="11:57">)</operator></expr>)</condition><block type="pseudo" pos:start="15:5" pos:end="293:4"><block_content pos:start="15:5" pos:end="293:4">

<cpp:else pos:start="13:1" pos:end="13:5">#<cpp:directive pos:start="13:2" pos:end="13:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="15:5" pos:end="293:4"><if pos:start="15:5" pos:end="25:5">if<condition pos:start="15:7" pos:end="18:0">(<expr pos:start="15:8" pos:end="15:37"><name pos:start="15:8" pos:end="15:16">sws_flags</name> <operator pos:start="15:18" pos:end="15:19">!=</operator> <name pos:start="15:21" pos:end="15:37">SWS_FAST_BILINEAR</name></expr>)</condition>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <block pos:start="19:5" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:104">

    	<function_decl pos:start="21:9" pos:end="21:104"><type pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:14">RENAME</name></type>(<name pos:start="21:16" pos:end="21:21">hScale</name>)<parameter_list pos:start="21:23" pos:end="21:103">(<parameter pos:start="21:24" pos:end="21:26"><decl pos:start="21:24" pos:end="21:26"><type pos:start="21:24" pos:end="21:26"><name pos:start="21:24" pos:end="21:26">dst</name></type></decl></parameter>     , <parameter pos:start="21:34" pos:end="21:41"><decl pos:start="21:34" pos:end="21:41"><type pos:start="21:34" pos:end="21:41"><name pos:start="21:34" pos:end="21:41">dstWidth</name></type></decl></parameter>, <parameter pos:start="21:44" pos:end="21:47"><decl pos:start="21:44" pos:end="21:47"><type pos:start="21:44" pos:end="21:47"><name pos:start="21:44" pos:end="21:47">src1</name></type></decl></parameter>, <parameter pos:start="21:50" pos:end="21:53"><decl pos:start="21:50" pos:end="21:53"><type pos:start="21:50" pos:end="21:53"><name pos:start="21:50" pos:end="21:53">srcW</name></type></decl></parameter>, <parameter pos:start="21:56" pos:end="21:59"><decl pos:start="21:56" pos:end="21:59"><type pos:start="21:56" pos:end="21:59"><name pos:start="21:56" pos:end="21:59">xInc</name></type></decl></parameter>, <parameter pos:start="21:62" pos:end="21:71"><decl pos:start="21:62" pos:end="21:71"><type pos:start="21:62" pos:end="21:71"><name pos:start="21:62" pos:end="21:71">hChrFilter</name></type></decl></parameter>, <parameter pos:start="21:74" pos:end="21:86"><decl pos:start="21:74" pos:end="21:86"><type pos:start="21:74" pos:end="21:86"><name pos:start="21:74" pos:end="21:86">hChrFilterPos</name></type></decl></parameter>, <parameter pos:start="21:89" pos:end="21:102"><decl pos:start="21:89" pos:end="21:102"><type pos:start="21:89" pos:end="21:102"><name pos:start="21:89" pos:end="21:102">hChrFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

    	<expr_stmt pos:start="23:9" pos:end="23:104"><expr pos:start="23:9" pos:end="23:103"><call pos:start="23:9" pos:end="23:103"><call pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:14">RENAME</name><argument_list pos:start="23:15" pos:end="23:22">(<argument pos:start="23:16" pos:end="23:21"><expr pos:start="23:16" pos:end="23:21"><name pos:start="23:16" pos:end="23:21">hScale</name></expr></argument>)</argument_list></call><argument_list pos:start="23:23" pos:end="23:103">(<argument pos:start="23:24" pos:end="23:31"><expr pos:start="23:24" pos:end="23:31"><name pos:start="23:24" pos:end="23:26">dst</name><operator pos:start="23:27" pos:end="23:27">+</operator><literal type="number" pos:start="23:28" pos:end="23:31">2048</literal></expr></argument>, <argument pos:start="23:34" pos:end="23:41"><expr pos:start="23:34" pos:end="23:41"><name pos:start="23:34" pos:end="23:41">dstWidth</name></expr></argument>, <argument pos:start="23:44" pos:end="23:47"><expr pos:start="23:44" pos:end="23:47"><name pos:start="23:44" pos:end="23:47">src2</name></expr></argument>, <argument pos:start="23:50" pos:end="23:53"><expr pos:start="23:50" pos:end="23:53"><name pos:start="23:50" pos:end="23:53">srcW</name></expr></argument>, <argument pos:start="23:56" pos:end="23:59"><expr pos:start="23:56" pos:end="23:59"><name pos:start="23:56" pos:end="23:59">xInc</name></expr></argument>, <argument pos:start="23:62" pos:end="23:71"><expr pos:start="23:62" pos:end="23:71"><name pos:start="23:62" pos:end="23:71">hChrFilter</name></expr></argument>, <argument pos:start="23:74" pos:end="23:86"><expr pos:start="23:74" pos:end="23:86"><name pos:start="23:74" pos:end="23:86">hChrFilterPos</name></expr></argument>, <argument pos:start="23:89" pos:end="23:102"><expr pos:start="23:89" pos:end="23:102"><name pos:start="23:89" pos:end="23:102">hChrFilterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="27:5" pos:end="293:4">else <comment type="line" pos:start="27:10" pos:end="27:50">// Fast Bilinear upscale / crap downscale</comment>

    <block pos:start="29:5" pos:end="293:4">{<block_content pos:start="35:9" pos:end="292:0">

<cpp:ifdef pos:start="31:1" pos:end="31:15">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:15">ARCH_X86</name></cpp:ifdef>

<cpp:ifdef pos:start="33:1" pos:end="33:16">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:16">HAVE_MMX2</name></cpp:ifdef>

	<decl_stmt pos:start="35:9" pos:end="35:14"><decl pos:start="35:9" pos:end="35:13"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:13">i</name></decl>;</decl_stmt>

	<if_stmt pos:start="37:9" pos:end="262:0"><if pos:start="37:9" pos:end="173:9">if<condition pos:start="37:11" pos:end="37:25">(<expr pos:start="37:12" pos:end="37:24"><name pos:start="37:12" pos:end="37:24">canMMX2BeUsed</name></expr>)</condition>

	<block pos:start="39:9" pos:end="173:9">{<block_content pos:start="41:17" pos:end="171:17">

		<asm pos:start="41:17" pos:end="159:10">asm <specifier pos:start="41:21" pos:end="41:28">volatile</specifier>(

		"pxor %%mm7, %%mm7		\n\t"

		"pxor %%mm2, %%mm2		\n\t" <comment type="line" pos:start="45:55" pos:end="45:65">// 2*xalpha</comment>

		"movd %5, %%mm6			\n\t" <comment type="line" pos:start="47:55" pos:end="47:68">// xInc&amp;0xFFFF</comment>

		"punpcklwd %%mm6, %%mm6		\n\t"

		"punpcklwd %%mm6, %%mm6		\n\t"

		"movq %%mm6, %%mm2		\n\t"

		"psllq $16, %%mm2		\n\t"

		"paddw %%mm6, %%mm2		\n\t"

		"psllq $16, %%mm2		\n\t"

		"paddw %%mm6, %%mm2		\n\t"

		"psllq $16, %%mm2		\n\t" <comment type="line" pos:start="63:55" pos:end="63:93">//0,t,2t,3t		t=xInc&amp;0xFFFF</comment>

		"movq %%mm2, "MANGLE(temp0)"	\n\t"

		"movd %4, %%mm6			\n\t" <comment type="line" pos:start="67:55" pos:end="67:71">//(xInc*4)&amp;0xFFFF</comment>

		"punpcklwd %%mm6, %%mm6		\n\t"

		"punpcklwd %%mm6, %%mm6		\n\t"

		"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="73:55" pos:end="73:58">// i</comment>

		"movl %0, %%esi			\n\t" <comment type="line" pos:start="75:55" pos:end="75:60">// src</comment>

		"movl %1, %%edi			\n\t" <comment type="line" pos:start="77:55" pos:end="77:61">// buf1</comment>

		"movl %3, %%edx			\n\t" <comment type="line" pos:start="79:55" pos:end="79:69">// (xInc*4)&gt;&gt;16</comment>

		"xorl %%ecx, %%ecx		\n\t"

		"xorl %%ebx, %%ebx		\n\t"

		"movw %4, %%bx			\n\t" <comment type="line" pos:start="85:55" pos:end="85:72">// (xInc*4)&amp;0xFFFF</comment>



<cpp:define pos:start="89:1" pos:end="101:61">#<cpp:directive pos:start="89:2" pos:end="89:7">define</cpp:directive> <cpp:macro pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:19">FUNNYUVCODE</name></cpp:macro> \

			<cpp:value pos:start="91:25" pos:end="101:61">PREFETCH" 1024(%%esi)		\n\t"\

			PREFETCH" 1056(%%esi)		\n\t"\

			PREFETCH" 1088(%%esi)		\n\t"\

			"call "MANGLE(funnyUVCode)"	\n\t"\

			"movq "MANGLE(temp0)", %%mm2	\n\t"\

			"xorl %%ecx, %%ecx		\n\t"</cpp:value></cpp:define>



FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE



FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

		"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="123:55" pos:end="123:58">// i</comment>

		"movl %6, %%esi			\n\t" <comment type="line" pos:start="125:55" pos:end="125:60">// src</comment>

		"movl %1, %%edi			\n\t" <comment type="line" pos:start="127:55" pos:end="127:61">// buf1</comment>

		"addl $4096, %%edi		\n\t"



FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE



FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE



		:: "m" (src1), "m" (dst), "m" (dstWidth), "m" ((xInc*4)&gt;&gt;16),

		  "m" ((xInc*4)&amp;0xFFFF), "m" (xInc&amp;0xFFFF), "m" (src2)

		: "%eax", "%ebx", "%ecx", "%edx", "%esi", "%edi"

	);</asm>

		<for pos:start="161:17" pos:end="171:17">for<control pos:start="161:20" pos:end="161:61">(<init pos:start="161:21" pos:end="161:33"><expr pos:start="161:21" pos:end="161:32"><name pos:start="161:21" pos:end="161:21">i</name><operator pos:start="161:22" pos:end="161:22">=</operator><name pos:start="161:23" pos:end="161:30">dstWidth</name><operator pos:start="161:31" pos:end="161:31">-</operator><literal type="number" pos:start="161:32" pos:end="161:32">1</literal></expr>;</init> <condition pos:start="161:35" pos:end="161:56"><expr pos:start="161:35" pos:end="161:55"><operator pos:start="161:35" pos:end="161:35">(</operator><name pos:start="161:36" pos:end="161:36">i</name><operator pos:start="161:37" pos:end="161:37">*</operator><name pos:start="161:38" pos:end="161:41">xInc</name><operator pos:start="161:42" pos:end="161:42">)</operator><operator pos:start="161:43" pos:end="161:44">&gt;&gt;</operator><literal type="number" pos:start="161:45" pos:end="161:46">16</literal> <operator pos:start="161:48" pos:end="161:49">&gt;=</operator><name pos:start="161:50" pos:end="161:53">srcW</name><operator pos:start="161:54" pos:end="161:54">-</operator><literal type="number" pos:start="161:55" pos:end="161:55">1</literal></expr>;</condition> <incr pos:start="161:58" pos:end="161:60"><expr pos:start="161:58" pos:end="161:60"><name pos:start="161:58" pos:end="161:58">i</name><operator pos:start="161:59" pos:end="161:60">--</operator></expr></incr>)</control>

		<block pos:start="163:17" pos:end="171:17">{<block_content pos:start="167:25" pos:end="169:55">

<comment type="line" pos:start="165:1" pos:end="165:64">//			printf("%d %d %d\n", dstWidth, i, srcW);</comment>

			<expr_stmt pos:start="167:25" pos:end="167:50"><expr pos:start="167:25" pos:end="167:49"><name pos:start="167:25" pos:end="167:30"><name pos:start="167:25" pos:end="167:27">dst</name><index pos:start="167:28" pos:end="167:30">[<expr pos:start="167:29" pos:end="167:29"><name pos:start="167:29" pos:end="167:29">i</name></expr>]</index></name> <operator pos:start="167:32" pos:end="167:32">=</operator> <name pos:start="167:34" pos:end="167:45"><name pos:start="167:34" pos:end="167:37">src1</name><index pos:start="167:38" pos:end="167:45">[<expr pos:start="167:39" pos:end="167:44"><name pos:start="167:39" pos:end="167:42">srcW</name><operator pos:start="167:43" pos:end="167:43">-</operator><literal type="number" pos:start="167:44" pos:end="167:44">1</literal></expr>]</index></name><operator pos:start="167:46" pos:end="167:46">*</operator><literal type="number" pos:start="167:47" pos:end="167:49">128</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="169:25" pos:end="169:55"><expr pos:start="169:25" pos:end="169:54"><name pos:start="169:25" pos:end="169:35"><name pos:start="169:25" pos:end="169:27">dst</name><index pos:start="169:28" pos:end="169:35">[<expr pos:start="169:29" pos:end="169:34"><name pos:start="169:29" pos:end="169:29">i</name><operator pos:start="169:30" pos:end="169:30">+</operator><literal type="number" pos:start="169:31" pos:end="169:34">2048</literal></expr>]</index></name> <operator pos:start="169:37" pos:end="169:37">=</operator> <name pos:start="169:39" pos:end="169:50"><name pos:start="169:39" pos:end="169:42">src2</name><index pos:start="169:43" pos:end="169:50">[<expr pos:start="169:44" pos:end="169:49"><name pos:start="169:44" pos:end="169:47">srcW</name><operator pos:start="169:48" pos:end="169:48">-</operator><literal type="number" pos:start="169:49" pos:end="169:49">1</literal></expr>]</index></name><operator pos:start="169:51" pos:end="169:51">*</operator><literal type="number" pos:start="169:52" pos:end="169:54">128</literal></expr>;</expr_stmt>

		</block_content>}</block></for>

	</block_content>}</block></if>

	<else pos:start="175:9" pos:end="262:0">else

	<block pos:start="177:9" pos:end="262:0">{<block_content pos:start="181:9" pos:end="256:0">

<cpp:endif pos:start="179:1" pos:end="179:6">#<cpp:directive pos:start="179:2" pos:end="179:6">endif</cpp:directive></cpp:endif>

	<asm pos:start="181:9" pos:end="256:0">asm <specifier pos:start="181:13" pos:end="181:20">volatile</specifier>(

		"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="183:55" pos:end="183:58">// i</comment>

		"xorl %%ebx, %%ebx		\n\t" <comment type="line" pos:start="185:55" pos:end="185:59">// xx</comment>

		"xorl %%ecx, %%ecx		\n\t" <comment type="line" pos:start="187:55" pos:end="187:65">// 2*xalpha</comment>

		".balign 16			\n\t"

		"1:				\n\t"

		"movl %0, %%esi			\n\t"

		"movzbl  (%%esi, %%ebx), %%edi	\n\t" <comment type="line" pos:start="195:55" pos:end="195:63">//src[xx]</comment>

		"movzbl 1(%%esi, %%ebx), %%esi	\n\t" <comment type="line" pos:start="197:55" pos:end="197:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="199:55" pos:end="199:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="201:55" pos:end="201:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="205:55" pos:end="205:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"movl %1, %%edi			\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, (%%edi, %%eax, 2)	\n\t"



		"movzbl  (%5, %%ebx), %%edi	\n\t" <comment type="line" pos:start="215:55" pos:end="215:63">//src[xx]</comment>

		"movzbl 1(%5, %%ebx), %%esi	\n\t" <comment type="line" pos:start="217:55" pos:end="217:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="219:55" pos:end="219:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="221:55" pos:end="221:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="225:55" pos:end="225:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"movl %1, %%edi			\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, 4096(%%edi, %%eax, 2)\n\t"



		"addw %4, %%cx			\n\t" <comment type="line" pos:start="235:55" pos:end="235:77">//2*xalpha += xInc&amp;0xFF</comment>

		"adcl %3, %%ebx			\n\t" <comment type="line" pos:start="237:55" pos:end="237:76">//xx+= xInc&gt;&gt;8 + carry</comment>

		"addl $1, %%eax			\n\t"

		"cmpl %2, %%eax			\n\t"

		" jb 1b				\n\t"



		:: "m" (src1), "m" (dst), "m" (dstWidth), "m" (xInc&gt;&gt;16), "m" (xInc&amp;0xFFFF),

		"r" (src2)

		: "%eax", "%ebx", "%ecx", "%edi", "%esi"

		);</asm>

<cpp:ifdef pos:start="255:1" pos:end="255:16">#<cpp:directive pos:start="255:2" pos:end="255:6">ifdef</cpp:directive> <name pos:start="255:8" pos:end="255:16">HAVE_MMX2</name></cpp:ifdef>

	</block_content>}</block></else></if_stmt> <comment type="line" pos:start="257:11" pos:end="257:32">//if MMX2 cant be used</comment>

<cpp:endif pos:start="259:1" pos:end="259:6">#<cpp:directive pos:start="259:2" pos:end="259:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="261:1" pos:end="261:5">#<cpp:directive pos:start="261:2" pos:end="261:5">else</cpp:directive></cpp:else>

	<decl_stmt pos:start="263:9" pos:end="263:14"><decl pos:start="263:9" pos:end="263:13"><type pos:start="263:9" pos:end="263:11"><name pos:start="263:9" pos:end="263:11">int</name></type> <name pos:start="263:13" pos:end="263:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="265:9" pos:end="265:28"><decl pos:start="265:9" pos:end="265:27"><type pos:start="265:9" pos:end="265:20"><name pos:start="265:9" pos:end="265:16">unsigned</name> <name pos:start="265:18" pos:end="265:20">int</name></type> <name pos:start="265:22" pos:end="265:25">xpos</name><init pos:start="265:26" pos:end="265:27">=<expr pos:start="265:27" pos:end="265:27"><literal type="number" pos:start="265:27" pos:end="265:27">0</literal></expr></init></decl>;</decl_stmt>

	<for pos:start="267:9" pos:end="292:0">for<control pos:start="267:12" pos:end="267:31">(<init pos:start="267:13" pos:end="267:16"><expr pos:start="267:13" pos:end="267:15"><name pos:start="267:13" pos:end="267:13">i</name><operator pos:start="267:14" pos:end="267:14">=</operator><literal type="number" pos:start="267:15" pos:end="267:15">0</literal></expr>;</init><condition pos:start="267:17" pos:end="267:27"><expr pos:start="267:17" pos:end="267:26"><name pos:start="267:17" pos:end="267:17">i</name><operator pos:start="267:18" pos:end="267:18">&lt;</operator><name pos:start="267:19" pos:end="267:26">dstWidth</name></expr>;</condition><incr pos:start="267:28" pos:end="267:30"><expr pos:start="267:28" pos:end="267:30"><name pos:start="267:28" pos:end="267:28">i</name><operator pos:start="267:29" pos:end="267:30">++</operator></expr></incr>)</control>

	<block pos:start="269:9" pos:end="292:0">{<block_content pos:start="271:17" pos:end="287:27">

		<decl_stmt pos:start="271:17" pos:end="271:50"><decl pos:start="271:17" pos:end="271:49"><type pos:start="271:17" pos:end="271:37"><specifier pos:start="271:17" pos:end="271:24">register</specifier> <name pos:start="271:26" pos:end="271:33">unsigned</name> <name pos:start="271:35" pos:end="271:37">int</name></type> <name pos:start="271:39" pos:end="271:40">xx</name><init pos:start="271:41" pos:end="271:49">=<expr pos:start="271:42" pos:end="271:49"><name pos:start="271:42" pos:end="271:45">xpos</name><operator pos:start="271:46" pos:end="271:47">&gt;&gt;</operator><literal type="number" pos:start="271:48" pos:end="271:49">16</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="273:17" pos:end="273:62"><decl pos:start="273:17" pos:end="273:61"><type pos:start="273:17" pos:end="273:37"><specifier pos:start="273:17" pos:end="273:24">register</specifier> <name pos:start="273:26" pos:end="273:33">unsigned</name> <name pos:start="273:35" pos:end="273:37">int</name></type> <name pos:start="273:39" pos:end="273:44">xalpha</name><init pos:start="273:45" pos:end="273:61">=<expr pos:start="273:46" pos:end="273:61"><operator pos:start="273:46" pos:end="273:46">(</operator><name pos:start="273:47" pos:end="273:50">xpos</name><operator pos:start="273:51" pos:end="273:51">&amp;</operator><literal type="number" pos:start="273:52" pos:end="273:57">0xFFFF</literal><operator pos:start="273:58" pos:end="273:58">)</operator><operator pos:start="273:59" pos:end="273:60">&gt;&gt;</operator><literal type="number" pos:start="273:61" pos:end="273:61">9</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="275:17" pos:end="275:65"><expr pos:start="275:17" pos:end="275:64"><name pos:start="275:17" pos:end="275:22"><name pos:start="275:17" pos:end="275:19">dst</name><index pos:start="275:20" pos:end="275:22">[<expr pos:start="275:21" pos:end="275:21"><name pos:start="275:21" pos:end="275:21">i</name></expr>]</index></name><operator pos:start="275:23" pos:end="275:23">=</operator><operator pos:start="275:24" pos:end="275:24">(</operator><name pos:start="275:25" pos:end="275:32"><name pos:start="275:25" pos:end="275:28">src1</name><index pos:start="275:29" pos:end="275:32">[<expr pos:start="275:30" pos:end="275:31"><name pos:start="275:30" pos:end="275:31">xx</name></expr>]</index></name><operator pos:start="275:33" pos:end="275:33">*</operator><operator pos:start="275:34" pos:end="275:34">(</operator><name pos:start="275:35" pos:end="275:40">xalpha</name><operator pos:start="275:41" pos:end="275:41">^</operator><literal type="number" pos:start="275:42" pos:end="275:44">127</literal><operator pos:start="275:45" pos:end="275:45">)</operator><operator pos:start="275:46" pos:end="275:46">+</operator><name pos:start="275:47" pos:end="275:56"><name pos:start="275:47" pos:end="275:50">src1</name><index pos:start="275:51" pos:end="275:56">[<expr pos:start="275:52" pos:end="275:55"><name pos:start="275:52" pos:end="275:53">xx</name><operator pos:start="275:54" pos:end="275:54">+</operator><literal type="number" pos:start="275:55" pos:end="275:55">1</literal></expr>]</index></name><operator pos:start="275:57" pos:end="275:57">*</operator><name pos:start="275:58" pos:end="275:63">xalpha</name><operator pos:start="275:64" pos:end="275:64">)</operator></expr>;</expr_stmt>

		<expr_stmt pos:start="277:17" pos:end="277:70"><expr pos:start="277:17" pos:end="277:69"><name pos:start="277:17" pos:end="277:27"><name pos:start="277:17" pos:end="277:19">dst</name><index pos:start="277:20" pos:end="277:27">[<expr pos:start="277:21" pos:end="277:26"><name pos:start="277:21" pos:end="277:21">i</name><operator pos:start="277:22" pos:end="277:22">+</operator><literal type="number" pos:start="277:23" pos:end="277:26">2048</literal></expr>]</index></name><operator pos:start="277:28" pos:end="277:28">=</operator><operator pos:start="277:29" pos:end="277:29">(</operator><name pos:start="277:30" pos:end="277:37"><name pos:start="277:30" pos:end="277:33">src2</name><index pos:start="277:34" pos:end="277:37">[<expr pos:start="277:35" pos:end="277:36"><name pos:start="277:35" pos:end="277:36">xx</name></expr>]</index></name><operator pos:start="277:38" pos:end="277:38">*</operator><operator pos:start="277:39" pos:end="277:39">(</operator><name pos:start="277:40" pos:end="277:45">xalpha</name><operator pos:start="277:46" pos:end="277:46">^</operator><literal type="number" pos:start="277:47" pos:end="277:49">127</literal><operator pos:start="277:50" pos:end="277:50">)</operator><operator pos:start="277:51" pos:end="277:51">+</operator><name pos:start="277:52" pos:end="277:61"><name pos:start="277:52" pos:end="277:55">src2</name><index pos:start="277:56" pos:end="277:61">[<expr pos:start="277:57" pos:end="277:60"><name pos:start="277:57" pos:end="277:58">xx</name><operator pos:start="277:59" pos:end="277:59">+</operator><literal type="number" pos:start="277:60" pos:end="277:60">1</literal></expr>]</index></name><operator pos:start="277:62" pos:end="277:62">*</operator><name pos:start="277:63" pos:end="277:68">xalpha</name><operator pos:start="277:69" pos:end="277:69">)</operator></expr>;</expr_stmt>

<comment type="block" pos:start="279:1" pos:end="285:2">/* slower

	  dst[i]= (src1[xx]&lt;&lt;7) + (src1[xx+1] - src1[xx])*xalpha;

	  dst[i+2048]=(src2[xx]&lt;&lt;7) + (src2[xx+1] - src2[xx])*xalpha;

*/</comment>

		<expr_stmt pos:start="287:17" pos:end="287:27"><expr pos:start="287:17" pos:end="287:26"><name pos:start="287:17" pos:end="287:20">xpos</name><operator pos:start="287:21" pos:end="287:22">+=</operator><name pos:start="287:23" pos:end="287:26">xInc</name></expr>;</expr_stmt>

	</block_content>}</block></for>

<cpp:endif pos:start="291:1" pos:end="291:6">#<cpp:directive pos:start="291:2" pos:end="291:6">endif</cpp:directive></cpp:endif>

   </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
