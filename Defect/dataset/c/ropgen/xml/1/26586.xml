<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26586.c" pos:tabs="8"><function pos:start="1:1" pos:end="361:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_residual</name><parameter_list pos:start="1:27" pos:end="1:147">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:41"><name pos:start="1:28" pos:end="1:38">H264Context</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">h</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:56">GetBitContext</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">gb</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:76"><decl pos:start="1:63" pos:end="1:76"><type pos:start="1:63" pos:end="1:76"><name pos:start="1:63" pos:end="1:69">DCTELEM</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:76">block</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:83"><decl pos:start="1:79" pos:end="1:83"><type pos:start="1:79" pos:end="1:83"><name pos:start="1:79" pos:end="1:81">int</name></type> <name pos:start="1:83" pos:end="1:83">n</name></decl></parameter>, <parameter pos:start="1:86" pos:end="1:109"><decl pos:start="1:86" pos:end="1:109"><type pos:start="1:86" pos:end="1:109"><specifier pos:start="1:86" pos:end="1:90">const</specifier> <name pos:start="1:92" pos:end="1:98">uint8_t</name> <modifier pos:start="1:100" pos:end="1:100">*</modifier></type><name pos:start="1:101" pos:end="1:109">scantable</name></decl></parameter>, <parameter pos:start="1:112" pos:end="1:131"><decl pos:start="1:112" pos:end="1:131"><type pos:start="1:112" pos:end="1:131"><specifier pos:start="1:112" pos:end="1:116">const</specifier> <name pos:start="1:118" pos:end="1:125">uint32_t</name> <modifier pos:start="1:127" pos:end="1:127">*</modifier></type><name pos:start="1:128" pos:end="1:131">qmul</name></decl></parameter>, <parameter pos:start="1:134" pos:end="1:146"><decl pos:start="1:134" pos:end="1:146"><type pos:start="1:134" pos:end="1:146"><name pos:start="1:134" pos:end="1:136">int</name></type> <name pos:start="1:138" pos:end="1:146">max_coeff</name></decl></parameter>)</parameter_list><block pos:start="1:148" pos:end="361:1">{<block_content pos:start="3:5" pos:end="359:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:102"><decl pos:start="5:5" pos:end="5:101"><type pos:start="5:5" pos:end="5:20"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:20">int</name></type> <name pos:start="5:22" pos:end="5:48"><name pos:start="5:22" pos:end="5:44">coeff_token_table_index</name><index pos:start="5:45" pos:end="5:48">[<expr pos:start="5:46" pos:end="5:47"><literal type="number" pos:start="5:46" pos:end="5:47">17</literal></expr>]</index></name><init pos:start="5:49" pos:end="5:101">= <expr pos:start="5:51" pos:end="5:101"><block pos:start="5:51" pos:end="5:101">{<expr pos:start="5:52" pos:end="5:52"><literal type="number" pos:start="5:52" pos:end="5:52">0</literal></expr>, <expr pos:start="5:55" pos:end="5:55"><literal type="number" pos:start="5:55" pos:end="5:55">0</literal></expr>, <expr pos:start="5:58" pos:end="5:58"><literal type="number" pos:start="5:58" pos:end="5:58">1</literal></expr>, <expr pos:start="5:61" pos:end="5:61"><literal type="number" pos:start="5:61" pos:end="5:61">1</literal></expr>, <expr pos:start="5:64" pos:end="5:64"><literal type="number" pos:start="5:64" pos:end="5:64">2</literal></expr>, <expr pos:start="5:67" pos:end="5:67"><literal type="number" pos:start="5:67" pos:end="5:67">2</literal></expr>, <expr pos:start="5:70" pos:end="5:70"><literal type="number" pos:start="5:70" pos:end="5:70">2</literal></expr>, <expr pos:start="5:73" pos:end="5:73"><literal type="number" pos:start="5:73" pos:end="5:73">2</literal></expr>, <expr pos:start="5:76" pos:end="5:76"><literal type="number" pos:start="5:76" pos:end="5:76">3</literal></expr>, <expr pos:start="5:79" pos:end="5:79"><literal type="number" pos:start="5:79" pos:end="5:79">3</literal></expr>, <expr pos:start="5:82" pos:end="5:82"><literal type="number" pos:start="5:82" pos:end="5:82">3</literal></expr>, <expr pos:start="5:85" pos:end="5:85"><literal type="number" pos:start="5:85" pos:end="5:85">3</literal></expr>, <expr pos:start="5:88" pos:end="5:88"><literal type="number" pos:start="5:88" pos:end="5:88">3</literal></expr>, <expr pos:start="5:91" pos:end="5:91"><literal type="number" pos:start="5:91" pos:end="5:91">3</literal></expr>, <expr pos:start="5:94" pos:end="5:94"><literal type="number" pos:start="5:94" pos:end="5:94">3</literal></expr>, <expr pos:start="5:97" pos:end="5:97"><literal type="number" pos:start="5:97" pos:end="5:97">3</literal></expr>, <expr pos:start="5:100" pos:end="5:100"><literal type="number" pos:start="5:100" pos:end="5:100">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17"><name pos:start="7:9" pos:end="7:13">level</name><index pos:start="7:14" pos:end="7:17">[<expr pos:start="7:15" pos:end="7:16"><literal type="number" pos:start="7:15" pos:end="7:16">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:75"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">zeros_left</name></decl>, <decl pos:start="9:21" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:31">coeff_token</name></decl>, <decl pos:start="9:34" pos:end="9:44"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:34" pos:end="9:44">total_coeff</name></decl>, <decl pos:start="9:47" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:47" pos:end="9:47">i</name></decl>, <decl pos:start="9:50" pos:end="9:62"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:50" pos:end="9:62">trailing_ones</name></decl>, <decl pos:start="9:65" pos:end="9:74"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:65" pos:end="9:74">run_before</name></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:46">//FIXME put trailing_onex into the context</comment>



    <if_stmt pos:start="17:5" pos:end="49:5"><if pos:start="17:5" pos:end="29:5">if<condition pos:start="17:7" pos:end="17:22">(<expr pos:start="17:8" pos:end="17:21"><name pos:start="17:8" pos:end="17:16">max_coeff</name> <operator pos:start="17:18" pos:end="17:19">&lt;=</operator> <literal type="number" pos:start="17:21" pos:end="17:21">8</literal></expr>)</condition><block pos:start="17:23" pos:end="29:5">{<block_content pos:start="19:9" pos:end="27:36">

        <if_stmt pos:start="19:9" pos:end="25:113"><if pos:start="19:9" pos:end="21:107">if <condition pos:start="19:12" pos:end="19:27">(<expr pos:start="19:13" pos:end="19:26"><name pos:start="19:13" pos:end="19:21">max_coeff</name> <operator pos:start="19:23" pos:end="19:24">==</operator> <literal type="number" pos:start="19:26" pos:end="19:26">4</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:107"><block_content pos:start="21:13" pos:end="21:107">

            <expr_stmt pos:start="21:13" pos:end="21:107"><expr pos:start="21:13" pos:end="21:106"><name pos:start="21:13" pos:end="21:23">coeff_token</name> <operator pos:start="21:25" pos:end="21:25">=</operator> <call pos:start="21:27" pos:end="21:106"><name pos:start="21:27" pos:end="21:34">get_vlc2</name><argument_list pos:start="21:35" pos:end="21:106">(<argument pos:start="21:36" pos:end="21:37"><expr pos:start="21:36" pos:end="21:37"><name pos:start="21:36" pos:end="21:37">gb</name></expr></argument>, <argument pos:start="21:40" pos:end="21:70"><expr pos:start="21:40" pos:end="21:70"><name pos:start="21:40" pos:end="21:70"><name pos:start="21:40" pos:end="21:64">chroma_dc_coeff_token_vlc</name><operator pos:start="21:65" pos:end="21:65">.</operator><name pos:start="21:66" pos:end="21:70">table</name></name></expr></argument>, <argument pos:start="21:73" pos:end="21:102"><expr pos:start="21:73" pos:end="21:102"><name pos:start="21:73" pos:end="21:102">CHROMA_DC_COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="21:105" pos:end="21:105"><expr pos:start="21:105" pos:end="21:105"><literal type="number" pos:start="21:105" pos:end="21:105">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="23:9" pos:end="25:113">else<block type="pseudo" pos:start="25:13" pos:end="25:113"><block_content pos:start="25:13" pos:end="25:113">

            <expr_stmt pos:start="25:13" pos:end="25:113"><expr pos:start="25:13" pos:end="25:112"><name pos:start="25:13" pos:end="25:23">coeff_token</name> <operator pos:start="25:25" pos:end="25:25">=</operator> <call pos:start="25:27" pos:end="25:112"><name pos:start="25:27" pos:end="25:34">get_vlc2</name><argument_list pos:start="25:35" pos:end="25:112">(<argument pos:start="25:36" pos:end="25:37"><expr pos:start="25:36" pos:end="25:37"><name pos:start="25:36" pos:end="25:37">gb</name></expr></argument>, <argument pos:start="25:40" pos:end="25:73"><expr pos:start="25:40" pos:end="25:73"><name pos:start="25:40" pos:end="25:73"><name pos:start="25:40" pos:end="25:67">chroma422_dc_coeff_token_vlc</name><operator pos:start="25:68" pos:end="25:68">.</operator><name pos:start="25:69" pos:end="25:73">table</name></name></expr></argument>, <argument pos:start="25:76" pos:end="25:108"><expr pos:start="25:76" pos:end="25:108"><name pos:start="25:76" pos:end="25:108">CHROMA422_DC_COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="25:111" pos:end="25:111"><expr pos:start="25:111" pos:end="25:111"><literal type="number" pos:start="25:111" pos:end="25:111">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:36"><expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:19">total_coeff</name><operator pos:start="27:20" pos:end="27:20">=</operator> <name pos:start="27:22" pos:end="27:32">coeff_token</name><operator pos:start="27:33" pos:end="27:34">&gt;&gt;</operator><literal type="number" pos:start="27:35" pos:end="27:35">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="29:6" pos:end="49:5">else<block pos:start="29:10" pos:end="49:5">{<block_content pos:start="31:9" pos:end="47:9">

        <if_stmt pos:start="31:9" pos:end="47:9"><if pos:start="31:9" pos:end="39:9">if<condition pos:start="31:11" pos:end="31:36">(<expr pos:start="31:12" pos:end="31:35"><name pos:start="31:12" pos:end="31:12">n</name> <operator pos:start="31:14" pos:end="31:15">&gt;=</operator> <name pos:start="31:17" pos:end="31:35">LUMA_DC_BLOCK_INDEX</name></expr>)</condition><block pos:start="31:37" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:40">

            <expr_stmt pos:start="33:13" pos:end="33:78"><expr pos:start="33:13" pos:end="33:77"><name pos:start="33:13" pos:end="33:23">total_coeff</name><operator pos:start="33:24" pos:end="33:24">=</operator> <call pos:start="33:26" pos:end="33:77"><name pos:start="33:26" pos:end="33:44">pred_non_zero_count</name><argument_list pos:start="33:45" pos:end="33:77">(<argument pos:start="33:46" pos:end="33:46"><expr pos:start="33:46" pos:end="33:46"><name pos:start="33:46" pos:end="33:46">h</name></expr></argument>, <argument pos:start="33:49" pos:end="33:76"><expr pos:start="33:49" pos:end="33:76"><operator pos:start="33:49" pos:end="33:49">(</operator><name pos:start="33:50" pos:end="33:50">n</name> <operator pos:start="33:52" pos:end="33:52">-</operator> <name pos:start="33:54" pos:end="33:72">LUMA_DC_BLOCK_INDEX</name><operator pos:start="33:73" pos:end="33:73">)</operator><operator pos:start="33:74" pos:end="33:74">*</operator><literal type="number" pos:start="33:75" pos:end="33:76">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:126"><expr pos:start="35:13" pos:end="35:125"><name pos:start="35:13" pos:end="35:23">coeff_token</name><operator pos:start="35:24" pos:end="35:24">=</operator> <call pos:start="35:26" pos:end="35:125"><name pos:start="35:26" pos:end="35:33">get_vlc2</name><argument_list pos:start="35:34" pos:end="35:125">(<argument pos:start="35:35" pos:end="35:36"><expr pos:start="35:35" pos:end="35:36"><name pos:start="35:35" pos:end="35:36">gb</name></expr></argument>, <argument pos:start="35:39" pos:end="35:99"><expr pos:start="35:39" pos:end="35:99"><name pos:start="35:39" pos:end="35:93"><name pos:start="35:39" pos:end="35:53">coeff_token_vlc</name><index pos:start="35:54" pos:end="35:93">[ <expr pos:start="35:56" pos:end="35:91"><name pos:start="35:56" pos:end="35:91"><name pos:start="35:56" pos:end="35:78">coeff_token_table_index</name><index pos:start="35:79" pos:end="35:91">[<expr pos:start="35:80" pos:end="35:90"><name pos:start="35:80" pos:end="35:90">total_coeff</name></expr>]</index></name></expr> ]</index></name><operator pos:start="35:94" pos:end="35:94">.</operator><name pos:start="35:95" pos:end="35:99">table</name></expr></argument>, <argument pos:start="35:102" pos:end="35:121"><expr pos:start="35:102" pos:end="35:121"><name pos:start="35:102" pos:end="35:121">COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="35:124" pos:end="35:124"><expr pos:start="35:124" pos:end="35:124"><literal type="number" pos:start="35:124" pos:end="35:124">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:40"><expr pos:start="37:13" pos:end="37:39"><name pos:start="37:13" pos:end="37:23">total_coeff</name><operator pos:start="37:24" pos:end="37:24">=</operator> <name pos:start="37:26" pos:end="37:36">coeff_token</name><operator pos:start="37:37" pos:end="37:38">&gt;&gt;</operator><literal type="number" pos:start="37:39" pos:end="37:39">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="39:10" pos:end="47:9">else<block pos:start="39:14" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:40">

            <expr_stmt pos:start="41:13" pos:end="41:51"><expr pos:start="41:13" pos:end="41:50"><name pos:start="41:13" pos:end="41:23">total_coeff</name><operator pos:start="41:24" pos:end="41:24">=</operator> <call pos:start="41:26" pos:end="41:50"><name pos:start="41:26" pos:end="41:44">pred_non_zero_count</name><argument_list pos:start="41:45" pos:end="41:50">(<argument pos:start="41:46" pos:end="41:46"><expr pos:start="41:46" pos:end="41:46"><name pos:start="41:46" pos:end="41:46">h</name></expr></argument>, <argument pos:start="41:49" pos:end="41:49"><expr pos:start="41:49" pos:end="41:49"><name pos:start="41:49" pos:end="41:49">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:126"><expr pos:start="43:13" pos:end="43:125"><name pos:start="43:13" pos:end="43:23">coeff_token</name><operator pos:start="43:24" pos:end="43:24">=</operator> <call pos:start="43:26" pos:end="43:125"><name pos:start="43:26" pos:end="43:33">get_vlc2</name><argument_list pos:start="43:34" pos:end="43:125">(<argument pos:start="43:35" pos:end="43:36"><expr pos:start="43:35" pos:end="43:36"><name pos:start="43:35" pos:end="43:36">gb</name></expr></argument>, <argument pos:start="43:39" pos:end="43:99"><expr pos:start="43:39" pos:end="43:99"><name pos:start="43:39" pos:end="43:93"><name pos:start="43:39" pos:end="43:53">coeff_token_vlc</name><index pos:start="43:54" pos:end="43:93">[ <expr pos:start="43:56" pos:end="43:91"><name pos:start="43:56" pos:end="43:91"><name pos:start="43:56" pos:end="43:78">coeff_token_table_index</name><index pos:start="43:79" pos:end="43:91">[<expr pos:start="43:80" pos:end="43:90"><name pos:start="43:80" pos:end="43:90">total_coeff</name></expr>]</index></name></expr> ]</index></name><operator pos:start="43:94" pos:end="43:94">.</operator><name pos:start="43:95" pos:end="43:99">table</name></expr></argument>, <argument pos:start="43:102" pos:end="43:121"><expr pos:start="43:102" pos:end="43:121"><name pos:start="43:102" pos:end="43:121">COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="43:124" pos:end="43:124"><expr pos:start="43:124" pos:end="43:124"><literal type="number" pos:start="43:124" pos:end="43:124">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:40"><expr pos:start="45:13" pos:end="45:39"><name pos:start="45:13" pos:end="45:23">total_coeff</name><operator pos:start="45:24" pos:end="45:24">=</operator> <name pos:start="45:26" pos:end="45:36">coeff_token</name><operator pos:start="45:37" pos:end="45:38">&gt;&gt;</operator><literal type="number" pos:start="45:39" pos:end="45:39">2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:53"><expr pos:start="51:5" pos:end="51:52"><name pos:start="51:5" pos:end="51:39"><name pos:start="51:5" pos:end="51:5">h</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:27">non_zero_count_cache</name><index pos:start="51:28" pos:end="51:39">[ <expr pos:start="51:30" pos:end="51:37"><name pos:start="51:30" pos:end="51:37"><name pos:start="51:30" pos:end="51:34">scan8</name><index pos:start="51:35" pos:end="51:37">[<expr pos:start="51:36" pos:end="51:36"><name pos:start="51:36" pos:end="51:36">n</name></expr>]</index></name></expr> ]</index></name><operator pos:start="51:40" pos:end="51:40">=</operator> <name pos:start="51:42" pos:end="51:52">total_coeff</name></expr>;</expr_stmt>



    <comment type="line" pos:start="55:5" pos:end="55:30">//FIXME set last_non_zero?</comment>



    <if_stmt pos:start="59:5" pos:end="61:17"><if pos:start="59:5" pos:end="61:17">if<condition pos:start="59:7" pos:end="59:22">(<expr pos:start="59:8" pos:end="59:21"><name pos:start="59:8" pos:end="59:18">total_coeff</name><operator pos:start="59:19" pos:end="59:20">==</operator><literal type="number" pos:start="59:21" pos:end="59:21">0</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:17"><block_content pos:start="61:9" pos:end="61:17">

        <return pos:start="61:9" pos:end="61:17">return <expr pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if<condition pos:start="63:7" pos:end="63:41">(<expr pos:start="63:8" pos:end="63:40"><name pos:start="63:8" pos:end="63:18">total_coeff</name> <operator pos:start="63:20" pos:end="63:20">&gt;</operator> <operator pos:start="63:22" pos:end="63:22">(</operator><name pos:start="63:23" pos:end="63:30">unsigned</name><operator pos:start="63:31" pos:end="63:31">)</operator><name pos:start="63:32" pos:end="63:40">max_coeff</name></expr>)</condition> <block pos:start="63:43" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:121"><expr pos:start="65:9" pos:end="65:120"><call pos:start="65:9" pos:end="65:120"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:120">(<argument pos:start="65:16" pos:end="65:25"><expr pos:start="65:16" pos:end="65:25"><name pos:start="65:16" pos:end="65:25"><name pos:start="65:16" pos:end="65:16">h</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:19">s</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:25">avctx</name></name></expr></argument>, <argument pos:start="65:28" pos:end="65:39"><expr pos:start="65:28" pos:end="65:39"><name pos:start="65:28" pos:end="65:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:42" pos:end="65:88"><expr pos:start="65:42" pos:end="65:88"><literal type="string" pos:start="65:42" pos:end="65:88">"corrupted macroblock %d %d (total_coeff=%d)\n"</literal></expr></argument>, <argument pos:start="65:91" pos:end="65:97"><expr pos:start="65:91" pos:end="65:97"><name pos:start="65:91" pos:end="65:97"><name pos:start="65:91" pos:end="65:91">s</name><operator pos:start="65:92" pos:end="65:93">-&gt;</operator><name pos:start="65:94" pos:end="65:97">mb_x</name></name></expr></argument>, <argument pos:start="65:100" pos:end="65:106"><expr pos:start="65:100" pos:end="65:106"><name pos:start="65:100" pos:end="65:106"><name pos:start="65:100" pos:end="65:100">s</name><operator pos:start="65:101" pos:end="65:102">-&gt;</operator><name pos:start="65:103" pos:end="65:106">mb_y</name></name></expr></argument>, <argument pos:start="65:109" pos:end="65:119"><expr pos:start="65:109" pos:end="65:119"><name pos:start="65:109" pos:end="65:119">total_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:17">trailing_ones</name><operator pos:start="73:18" pos:end="73:18">=</operator> <name pos:start="73:20" pos:end="73:30">coeff_token</name><operator pos:start="73:31" pos:end="73:31">&amp;</operator><literal type="number" pos:start="73:32" pos:end="73:32">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:79"><expr pos:start="75:5" pos:end="75:78"><call pos:start="75:5" pos:end="75:78"><name pos:start="75:5" pos:end="75:11">tprintf</name><argument_list pos:start="75:12" pos:end="75:78">(<argument pos:start="75:13" pos:end="75:22"><expr pos:start="75:13" pos:end="75:22"><name pos:start="75:13" pos:end="75:22"><name pos:start="75:13" pos:end="75:13">h</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:16">s</name><operator pos:start="75:17" pos:end="75:17">.</operator><name pos:start="75:18" pos:end="75:22">avctx</name></name></expr></argument>, <argument pos:start="75:25" pos:end="75:49"><expr pos:start="75:25" pos:end="75:49"><literal type="string" pos:start="75:25" pos:end="75:49">"trailing:%d, total:%d\n"</literal></expr></argument>, <argument pos:start="75:52" pos:end="75:64"><expr pos:start="75:52" pos:end="75:64"><name pos:start="75:52" pos:end="75:64">trailing_ones</name></expr></argument>, <argument pos:start="75:67" pos:end="75:77"><expr pos:start="75:67" pos:end="75:77"><name pos:start="75:67" pos:end="75:77">total_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:28"><expr pos:start="77:5" pos:end="77:27"><call pos:start="77:5" pos:end="77:27"><name pos:start="77:5" pos:end="77:10">assert</name><argument_list pos:start="77:11" pos:end="77:27">(<argument pos:start="77:12" pos:end="77:26"><expr pos:start="77:12" pos:end="77:26"><name pos:start="77:12" pos:end="77:22">total_coeff</name><operator pos:start="77:23" pos:end="77:24">&lt;=</operator><literal type="number" pos:start="77:25" pos:end="77:26">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:25"><expr pos:start="81:5" pos:end="81:24"><name pos:start="81:5" pos:end="81:5">i</name> <operator pos:start="81:7" pos:end="81:7">=</operator> <call pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:17">show_bits</name><argument_list pos:start="81:18" pos:end="81:24">(<argument pos:start="81:19" pos:end="81:20"><expr pos:start="81:19" pos:end="81:20"><name pos:start="81:19" pos:end="81:20">gb</name></expr></argument>, <argument pos:start="81:23" pos:end="81:23"><expr pos:start="81:23" pos:end="81:23"><literal type="number" pos:start="81:23" pos:end="81:23">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><call pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:13">skip_bits</name><argument_list pos:start="83:14" pos:end="83:32">(<argument pos:start="83:15" pos:end="83:16"><expr pos:start="83:15" pos:end="83:16"><name pos:start="83:15" pos:end="83:16">gb</name></expr></argument>, <argument pos:start="83:19" pos:end="83:31"><expr pos:start="83:19" pos:end="83:31"><name pos:start="83:19" pos:end="83:31">trailing_ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:28"><expr pos:start="85:5" pos:end="85:27"><name pos:start="85:5" pos:end="85:12"><name pos:start="85:5" pos:end="85:9">level</name><index pos:start="85:10" pos:end="85:12">[<expr pos:start="85:11" pos:end="85:11"><literal type="number" pos:start="85:11" pos:end="85:11">0</literal></expr>]</index></name> <operator pos:start="85:14" pos:end="85:14">=</operator> <literal type="number" pos:start="85:16" pos:end="85:17">1</literal><operator pos:start="85:17" pos:end="85:17">-</operator><operator pos:start="85:18" pos:end="85:18">(</operator><operator pos:start="85:19" pos:end="85:19">(</operator><name pos:start="85:20" pos:end="85:20">i</name><operator pos:start="85:21" pos:end="85:21">&amp;</operator><literal type="number" pos:start="85:22" pos:end="85:22">4</literal><operator pos:start="85:23" pos:end="85:23">)</operator><operator pos:start="85:24" pos:end="85:25">&gt;&gt;</operator><literal type="number" pos:start="85:26" pos:end="85:26">1</literal><operator pos:start="85:27" pos:end="85:27">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:28"><expr pos:start="87:5" pos:end="87:27"><name pos:start="87:5" pos:end="87:12"><name pos:start="87:5" pos:end="87:9">level</name><index pos:start="87:10" pos:end="87:12">[<expr pos:start="87:11" pos:end="87:11"><literal type="number" pos:start="87:11" pos:end="87:11">1</literal></expr>]</index></name> <operator pos:start="87:14" pos:end="87:14">=</operator> <literal type="number" pos:start="87:16" pos:end="87:17">1</literal><operator pos:start="87:17" pos:end="87:17">-</operator><operator pos:start="87:18" pos:end="87:18">(</operator><operator pos:start="87:19" pos:end="87:19">(</operator><name pos:start="87:20" pos:end="87:20">i</name><operator pos:start="87:21" pos:end="87:21">&amp;</operator><literal type="number" pos:start="87:22" pos:end="87:22">2</literal><operator pos:start="87:23" pos:end="87:23">)</operator>   <operator pos:start="87:27" pos:end="87:27">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:28"><expr pos:start="89:5" pos:end="89:27"><name pos:start="89:5" pos:end="89:12"><name pos:start="89:5" pos:end="89:9">level</name><index pos:start="89:10" pos:end="89:12">[<expr pos:start="89:11" pos:end="89:11"><literal type="number" pos:start="89:11" pos:end="89:11">2</literal></expr>]</index></name> <operator pos:start="89:14" pos:end="89:14">=</operator> <literal type="number" pos:start="89:16" pos:end="89:17">1</literal><operator pos:start="89:17" pos:end="89:17">-</operator><operator pos:start="89:18" pos:end="89:18">(</operator><operator pos:start="89:19" pos:end="89:19">(</operator><name pos:start="89:20" pos:end="89:20">i</name><operator pos:start="89:21" pos:end="89:21">&amp;</operator><literal type="number" pos:start="89:22" pos:end="89:22">1</literal><operator pos:start="89:23" pos:end="89:23">)</operator><operator pos:start="89:24" pos:end="89:25">&lt;&lt;</operator><literal type="number" pos:start="89:26" pos:end="89:26">1</literal><operator pos:start="89:27" pos:end="89:27">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="235:5"><if pos:start="93:5" pos:end="235:5">if<condition pos:start="93:7" pos:end="93:33">(<expr pos:start="93:8" pos:end="93:32"><name pos:start="93:8" pos:end="93:20">trailing_ones</name><operator pos:start="93:21" pos:end="93:21">&lt;</operator><name pos:start="93:22" pos:end="93:32">total_coeff</name></expr>)</condition> <block pos:start="93:35" pos:end="235:5">{<block_content pos:start="95:9" pos:end="233:9">

        <decl_stmt pos:start="95:9" pos:end="95:25"><decl pos:start="95:9" pos:end="95:16"><type pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">int</name></type> <name pos:start="95:13" pos:end="95:16">mask</name></decl>, <decl pos:start="95:19" pos:end="95:24"><type ref="prev" pos:start="95:9" pos:end="95:11"/><name pos:start="95:19" pos:end="95:24">prefix</name></decl>;</decl_stmt>

        <decl_stmt pos:start="97:9" pos:end="97:65"><decl pos:start="97:9" pos:end="97:64"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:25">suffix_length</name> <init pos:start="97:27" pos:end="97:64">= <expr pos:start="97:29" pos:end="97:64"><name pos:start="97:29" pos:end="97:39">total_coeff</name> <operator pos:start="97:41" pos:end="97:41">&gt;</operator> <literal type="number" pos:start="97:43" pos:end="97:44">10</literal> <operator pos:start="97:46" pos:end="97:46">&amp;</operator> <name pos:start="97:48" pos:end="97:60">trailing_ones</name> <operator pos:start="97:62" pos:end="97:62">&lt;</operator> <literal type="number" pos:start="97:64" pos:end="97:64">3</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="99:9" pos:end="99:49"><decl pos:start="99:9" pos:end="99:48"><type pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">int</name></type> <name pos:start="99:13" pos:end="99:17">bitsi</name><init pos:start="99:18" pos:end="99:48">= <expr pos:start="99:20" pos:end="99:48"><call pos:start="99:20" pos:end="99:48"><name pos:start="99:20" pos:end="99:28">show_bits</name><argument_list pos:start="99:29" pos:end="99:48">(<argument pos:start="99:30" pos:end="99:31"><expr pos:start="99:30" pos:end="99:31"><name pos:start="99:30" pos:end="99:31">gb</name></expr></argument>, <argument pos:start="99:34" pos:end="99:47"><expr pos:start="99:34" pos:end="99:47"><name pos:start="99:34" pos:end="99:47">LEVEL_TAB_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="101:9" pos:end="101:65"><decl pos:start="101:9" pos:end="101:64"><type pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">int</name></type> <name pos:start="101:13" pos:end="101:22">level_code</name><init pos:start="101:23" pos:end="101:64">= <expr pos:start="101:25" pos:end="101:64"><name pos:start="101:25" pos:end="101:64"><name pos:start="101:25" pos:end="101:39">cavlc_level_tab</name><index pos:start="101:40" pos:end="101:54">[<expr pos:start="101:41" pos:end="101:53"><name pos:start="101:41" pos:end="101:53">suffix_length</name></expr>]</index><index pos:start="101:55" pos:end="101:61">[<expr pos:start="101:56" pos:end="101:60"><name pos:start="101:56" pos:end="101:60">bitsi</name></expr>]</index><index pos:start="101:62" pos:end="101:64">[<expr pos:start="101:63" pos:end="101:63"><literal type="number" pos:start="101:63" pos:end="101:63">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:64"><expr pos:start="105:9" pos:end="105:63"><call pos:start="105:9" pos:end="105:63"><name pos:start="105:9" pos:end="105:17">skip_bits</name><argument_list pos:start="105:18" pos:end="105:63">(<argument pos:start="105:19" pos:end="105:20"><expr pos:start="105:19" pos:end="105:20"><name pos:start="105:19" pos:end="105:20">gb</name></expr></argument>, <argument pos:start="105:23" pos:end="105:62"><expr pos:start="105:23" pos:end="105:62"><name pos:start="105:23" pos:end="105:62"><name pos:start="105:23" pos:end="105:37">cavlc_level_tab</name><index pos:start="105:38" pos:end="105:52">[<expr pos:start="105:39" pos:end="105:51"><name pos:start="105:39" pos:end="105:51">suffix_length</name></expr>]</index><index pos:start="105:53" pos:end="105:59">[<expr pos:start="105:54" pos:end="105:58"><name pos:start="105:54" pos:end="105:58">bitsi</name></expr>]</index><index pos:start="105:60" pos:end="105:62">[<expr pos:start="105:61" pos:end="105:61"><literal type="number" pos:start="105:61" pos:end="105:61">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="181:9"><if pos:start="107:9" pos:end="171:9">if<condition pos:start="107:11" pos:end="107:29">(<expr pos:start="107:12" pos:end="107:28"><name pos:start="107:12" pos:end="107:21">level_code</name> <operator pos:start="107:23" pos:end="107:24">&gt;=</operator> <literal type="number" pos:start="107:26" pos:end="107:28">100</literal></expr>)</condition><block pos:start="107:30" pos:end="171:9">{<block_content pos:start="109:13" pos:end="169:70">

            <expr_stmt pos:start="109:13" pos:end="109:37"><expr pos:start="109:13" pos:end="109:36"><name pos:start="109:13" pos:end="109:18">prefix</name><operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:30">level_code</name> <operator pos:start="109:32" pos:end="109:32">-</operator> <literal type="number" pos:start="109:34" pos:end="109:36">100</literal></expr>;</expr_stmt>

            <if_stmt pos:start="111:13" pos:end="113:47"><if pos:start="111:13" pos:end="113:47">if<condition pos:start="111:15" pos:end="111:40">(<expr pos:start="111:16" pos:end="111:39"><name pos:start="111:16" pos:end="111:21">prefix</name> <operator pos:start="111:23" pos:end="111:24">==</operator> <name pos:start="111:26" pos:end="111:39">LEVEL_TAB_BITS</name></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="113:47"><block_content pos:start="113:17" pos:end="113:47">

                <expr_stmt pos:start="113:17" pos:end="113:47"><expr pos:start="113:17" pos:end="113:46"><name pos:start="113:17" pos:end="113:22">prefix</name> <operator pos:start="113:24" pos:end="113:25">+=</operator> <call pos:start="113:27" pos:end="113:46"><name pos:start="113:27" pos:end="113:42">get_level_prefix</name><argument_list pos:start="113:43" pos:end="113:46">(<argument pos:start="113:44" pos:end="113:45"><expr pos:start="113:44" pos:end="113:45"><name pos:start="113:44" pos:end="113:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="line" pos:start="117:13" pos:end="117:65">//first coefficient has suffix_length equal to 0 or 1</comment>

            <if_stmt pos:start="119:13" pos:end="157:13"><if pos:start="119:13" pos:end="129:13">if<condition pos:start="119:15" pos:end="119:25">(<expr pos:start="119:16" pos:end="119:24"><name pos:start="119:16" pos:end="119:21">prefix</name><operator pos:start="119:22" pos:end="119:22">&lt;</operator><literal type="number" pos:start="119:23" pos:end="119:24">14</literal></expr>)</condition><block pos:start="119:26" pos:end="129:13">{<block_content pos:start="121:17" pos:end="127:39"> <comment type="line" pos:start="119:28" pos:end="119:86">//FIXME try to build a large unified VLC table for all this</comment>

                <if_stmt pos:start="121:17" pos:end="127:39"><if pos:start="121:17" pos:end="123:60">if<condition pos:start="121:19" pos:end="121:33">(<expr pos:start="121:20" pos:end="121:32"><name pos:start="121:20" pos:end="121:32">suffix_length</name></expr>)</condition><block type="pseudo" pos:start="123:21" pos:end="123:60"><block_content pos:start="123:21" pos:end="123:60">

                    <expr_stmt pos:start="123:21" pos:end="123:60"><expr pos:start="123:21" pos:end="123:59"><name pos:start="123:21" pos:end="123:30">level_code</name><operator pos:start="123:31" pos:end="123:31">=</operator> <operator pos:start="123:33" pos:end="123:33">(</operator><name pos:start="123:34" pos:end="123:39">prefix</name><operator pos:start="123:40" pos:end="123:41">&lt;&lt;</operator><literal type="number" pos:start="123:42" pos:end="123:42">1</literal><operator pos:start="123:43" pos:end="123:43">)</operator> <operator pos:start="123:45" pos:end="123:45">+</operator> <call pos:start="123:47" pos:end="123:59"><name pos:start="123:47" pos:end="123:55">get_bits1</name><argument_list pos:start="123:56" pos:end="123:59">(<argument pos:start="123:57" pos:end="123:58"><expr pos:start="123:57" pos:end="123:58"><name pos:start="123:57" pos:end="123:58">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="123:62" pos:end="123:67">//part</comment>

                <else pos:start="125:17" pos:end="127:39">else<block type="pseudo" pos:start="127:21" pos:end="127:39"><block_content pos:start="127:21" pos:end="127:39">

                    <expr_stmt pos:start="127:21" pos:end="127:39"><expr pos:start="127:21" pos:end="127:38"><name pos:start="127:21" pos:end="127:30">level_code</name><operator pos:start="127:31" pos:end="127:31">=</operator> <name pos:start="127:33" pos:end="127:38">prefix</name></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="127:41" pos:end="127:46">//part</comment>

            </block_content>}</block></if><if type="elseif" pos:start="129:14" pos:end="139:13">else if<condition pos:start="129:21" pos:end="129:32">(<expr pos:start="129:22" pos:end="129:31"><name pos:start="129:22" pos:end="129:27">prefix</name><operator pos:start="129:28" pos:end="129:29">==</operator><literal type="number" pos:start="129:30" pos:end="129:31">14</literal></expr>)</condition><block pos:start="129:33" pos:end="139:13">{<block_content pos:start="131:17" pos:end="137:57">

                <if_stmt pos:start="131:17" pos:end="137:57"><if pos:start="131:17" pos:end="133:60">if<condition pos:start="131:19" pos:end="131:33">(<expr pos:start="131:20" pos:end="131:32"><name pos:start="131:20" pos:end="131:32">suffix_length</name></expr>)</condition><block type="pseudo" pos:start="133:21" pos:end="133:60"><block_content pos:start="133:21" pos:end="133:60">

                    <expr_stmt pos:start="133:21" pos:end="133:60"><expr pos:start="133:21" pos:end="133:59"><name pos:start="133:21" pos:end="133:30">level_code</name><operator pos:start="133:31" pos:end="133:31">=</operator> <operator pos:start="133:33" pos:end="133:33">(</operator><name pos:start="133:34" pos:end="133:39">prefix</name><operator pos:start="133:40" pos:end="133:41">&lt;&lt;</operator><literal type="number" pos:start="133:42" pos:end="133:42">1</literal><operator pos:start="133:43" pos:end="133:43">)</operator> <operator pos:start="133:45" pos:end="133:45">+</operator> <call pos:start="133:47" pos:end="133:59"><name pos:start="133:47" pos:end="133:55">get_bits1</name><argument_list pos:start="133:56" pos:end="133:59">(<argument pos:start="133:57" pos:end="133:58"><expr pos:start="133:57" pos:end="133:58"><name pos:start="133:57" pos:end="133:58">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="133:62" pos:end="133:67">//part</comment>

                <else pos:start="135:17" pos:end="137:57">else<block type="pseudo" pos:start="137:21" pos:end="137:57"><block_content pos:start="137:21" pos:end="137:57">

                    <expr_stmt pos:start="137:21" pos:end="137:57"><expr pos:start="137:21" pos:end="137:56"><name pos:start="137:21" pos:end="137:30">level_code</name><operator pos:start="137:31" pos:end="137:31">=</operator> <name pos:start="137:33" pos:end="137:38">prefix</name> <operator pos:start="137:40" pos:end="137:40">+</operator> <call pos:start="137:42" pos:end="137:56"><name pos:start="137:42" pos:end="137:49">get_bits</name><argument_list pos:start="137:50" pos:end="137:56">(<argument pos:start="137:51" pos:end="137:52"><expr pos:start="137:51" pos:end="137:52"><name pos:start="137:51" pos:end="137:52">gb</name></expr></argument>, <argument pos:start="137:55" pos:end="137:55"><expr pos:start="137:55" pos:end="137:55"><literal type="number" pos:start="137:55" pos:end="137:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="137:59" pos:end="137:64">//part</comment>

            </block_content>}</block></if><else pos:start="139:14" pos:end="157:13">else<block pos:start="139:18" pos:end="157:13">{<block_content pos:start="141:17" pos:end="155:17">

                <expr_stmt pos:start="141:17" pos:end="141:56"><expr pos:start="141:17" pos:end="141:55"><name pos:start="141:17" pos:end="141:26">level_code</name><operator pos:start="141:27" pos:end="141:27">=</operator> <literal type="number" pos:start="141:29" pos:end="141:32">30</literal> <operator pos:start="141:32" pos:end="141:32">+</operator> <call pos:start="141:34" pos:end="141:55"><name pos:start="141:34" pos:end="141:41">get_bits</name><argument_list pos:start="141:42" pos:end="141:55">(<argument pos:start="141:43" pos:end="141:44"><expr pos:start="141:43" pos:end="141:44"><name pos:start="141:43" pos:end="141:44">gb</name></expr></argument>, <argument pos:start="141:47" pos:end="141:54"><expr pos:start="141:47" pos:end="141:54"><name pos:start="141:47" pos:end="141:52">prefix</name><operator pos:start="141:53" pos:end="141:53">-</operator><literal type="number" pos:start="141:54" pos:end="141:54">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="141:58" pos:end="141:63">//part</comment>

                <if_stmt pos:start="143:17" pos:end="155:17"><if pos:start="143:17" pos:end="155:17">if<condition pos:start="143:19" pos:end="143:30">(<expr pos:start="143:20" pos:end="143:29"><name pos:start="143:20" pos:end="143:25">prefix</name><operator pos:start="143:26" pos:end="143:27">&gt;=</operator><literal type="number" pos:start="143:28" pos:end="143:29">16</literal></expr>)</condition><block pos:start="143:31" pos:end="155:17">{<block_content pos:start="145:21" pos:end="153:55">

                    <if_stmt pos:start="145:21" pos:end="151:21"><if pos:start="145:21" pos:end="151:21">if<condition pos:start="145:23" pos:end="145:37">(<expr pos:start="145:24" pos:end="145:36"><name pos:start="145:24" pos:end="145:29">prefix</name> <operator pos:start="145:31" pos:end="145:31">&gt;</operator> <literal type="number" pos:start="145:33" pos:end="145:35">25</literal><operator pos:start="145:35" pos:end="145:35">+</operator><literal type="number" pos:start="145:36" pos:end="145:36">3</literal></expr>)</condition><block pos:start="145:38" pos:end="151:21">{<block_content pos:start="147:25" pos:end="149:34">

                        <expr_stmt pos:start="147:25" pos:end="147:83"><expr pos:start="147:25" pos:end="147:82"><call pos:start="147:25" pos:end="147:82"><name pos:start="147:25" pos:end="147:30">av_log</name><argument_list pos:start="147:31" pos:end="147:82">(<argument pos:start="147:32" pos:end="147:41"><expr pos:start="147:32" pos:end="147:41"><name pos:start="147:32" pos:end="147:41"><name pos:start="147:32" pos:end="147:32">h</name><operator pos:start="147:33" pos:end="147:34">-&gt;</operator><name pos:start="147:35" pos:end="147:35">s</name><operator pos:start="147:36" pos:end="147:36">.</operator><name pos:start="147:37" pos:end="147:41">avctx</name></name></expr></argument>, <argument pos:start="147:44" pos:end="147:55"><expr pos:start="147:44" pos:end="147:55"><name pos:start="147:44" pos:end="147:55">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:58" pos:end="147:81"><expr pos:start="147:58" pos:end="147:81"><literal type="string" pos:start="147:58" pos:end="147:81">"Invalid level prefix\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="149:25" pos:end="149:34">return <expr pos:start="149:32" pos:end="149:33"><operator pos:start="149:32" pos:end="149:32">-</operator><literal type="number" pos:start="149:33" pos:end="149:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="153:21" pos:end="153:55"><expr pos:start="153:21" pos:end="153:54"><name pos:start="153:21" pos:end="153:30">level_code</name> <operator pos:start="153:32" pos:end="153:33">+=</operator> <operator pos:start="153:35" pos:end="153:35">(</operator><literal type="number" pos:start="153:36" pos:end="153:36">1</literal><operator pos:start="153:37" pos:end="153:38">&lt;&lt;</operator><operator pos:start="153:39" pos:end="153:39">(</operator><name pos:start="153:40" pos:end="153:45">prefix</name><operator pos:start="153:46" pos:end="153:46">-</operator><literal type="number" pos:start="153:47" pos:end="153:47">3</literal><operator pos:start="153:48" pos:end="153:48">)</operator><operator pos:start="153:49" pos:end="153:49">)</operator><operator pos:start="153:50" pos:end="153:50">-</operator><literal type="number" pos:start="153:51" pos:end="153:54">4096</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="161:13" pos:end="161:50"><if pos:start="161:13" pos:end="161:50">if<condition pos:start="161:15" pos:end="161:33">(<expr pos:start="161:16" pos:end="161:32"><name pos:start="161:16" pos:end="161:28">trailing_ones</name> <operator pos:start="161:30" pos:end="161:30">&lt;</operator> <literal type="number" pos:start="161:32" pos:end="161:32">3</literal></expr>)</condition><block type="pseudo" pos:start="161:35" pos:end="161:50"><block_content pos:start="161:35" pos:end="161:50"> <expr_stmt pos:start="161:35" pos:end="161:50"><expr pos:start="161:35" pos:end="161:49"><name pos:start="161:35" pos:end="161:44">level_code</name> <operator pos:start="161:46" pos:end="161:47">+=</operator> <literal type="number" pos:start="161:49" pos:end="161:49">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="165:13" pos:end="165:30"><expr pos:start="165:13" pos:end="165:29"><name pos:start="165:13" pos:end="165:25">suffix_length</name> <operator pos:start="165:27" pos:end="165:27">=</operator> <literal type="number" pos:start="165:29" pos:end="165:29">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:34"><expr pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:16">mask</name><operator pos:start="167:17" pos:end="167:17">=</operator> <operator pos:start="167:19" pos:end="167:19">-</operator><operator pos:start="167:20" pos:end="167:20">(</operator><name pos:start="167:21" pos:end="167:30">level_code</name><operator pos:start="167:31" pos:end="167:31">&amp;</operator><literal type="number" pos:start="167:32" pos:end="167:32">1</literal><operator pos:start="167:33" pos:end="167:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:70"><expr pos:start="169:13" pos:end="169:69"><name pos:start="169:13" pos:end="169:32"><name pos:start="169:13" pos:end="169:17">level</name><index pos:start="169:18" pos:end="169:32">[<expr pos:start="169:19" pos:end="169:31"><name pos:start="169:19" pos:end="169:31">trailing_ones</name></expr>]</index></name><operator pos:start="169:33" pos:end="169:33">=</operator> <operator pos:start="169:35" pos:end="169:35">(</operator><operator pos:start="169:36" pos:end="169:36">(</operator><operator pos:start="169:37" pos:end="169:37">(</operator><literal type="number" pos:start="169:38" pos:end="169:39">2</literal><operator pos:start="169:39" pos:end="169:39">+</operator><name pos:start="169:40" pos:end="169:49">level_code</name><operator pos:start="169:50" pos:end="169:50">)</operator><operator pos:start="169:51" pos:end="169:52">&gt;&gt;</operator><literal type="number" pos:start="169:53" pos:end="169:53">1</literal><operator pos:start="169:54" pos:end="169:54">)</operator> <operator pos:start="169:56" pos:end="169:56">^</operator> <name pos:start="169:58" pos:end="169:61">mask</name><operator pos:start="169:62" pos:end="169:62">)</operator> <operator pos:start="169:64" pos:end="169:64">-</operator> <name pos:start="169:66" pos:end="169:69">mask</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="171:10" pos:end="181:9">else<block pos:start="171:14" pos:end="181:9">{<block_content pos:start="173:13" pos:end="179:45">

            <expr_stmt pos:start="173:13" pos:end="173:70"><expr pos:start="173:13" pos:end="173:69"><name pos:start="173:13" pos:end="173:22">level_code</name> <operator pos:start="173:24" pos:end="173:25">+=</operator> <operator pos:start="173:27" pos:end="173:27">(</operator><operator pos:start="173:28" pos:end="173:28">(</operator><name pos:start="173:29" pos:end="173:38">level_code</name><operator pos:start="173:39" pos:end="173:40">&gt;&gt;</operator><literal type="number" pos:start="173:41" pos:end="173:42">31</literal><operator pos:start="173:43" pos:end="173:43">)</operator><operator pos:start="173:44" pos:end="173:44">|</operator><literal type="number" pos:start="173:45" pos:end="173:45">1</literal><operator pos:start="173:46" pos:end="173:46">)</operator> <operator pos:start="173:48" pos:end="173:48">&amp;</operator> <operator pos:start="173:50" pos:end="173:50">-</operator><operator pos:start="173:51" pos:end="173:51">(</operator><name pos:start="173:52" pos:end="173:64">trailing_ones</name> <operator pos:start="173:66" pos:end="173:66">&lt;</operator> <literal type="number" pos:start="173:68" pos:end="173:68">3</literal><operator pos:start="173:69" pos:end="173:69">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="177:13" pos:end="177:55"><expr pos:start="177:13" pos:end="177:54"><name pos:start="177:13" pos:end="177:25">suffix_length</name> <operator pos:start="177:27" pos:end="177:27">=</operator> <literal type="number" pos:start="177:29" pos:end="177:31">1</literal> <operator pos:start="177:31" pos:end="177:31">+</operator> <operator pos:start="177:33" pos:end="177:33">(</operator><name pos:start="177:34" pos:end="177:43">level_code</name> <operator pos:start="177:45" pos:end="177:45">+</operator> <literal type="number" pos:start="177:47" pos:end="177:48">3U</literal> <operator pos:start="177:50" pos:end="177:50">&gt;</operator> <literal type="number" pos:start="177:52" pos:end="177:53">6U</literal><operator pos:start="177:54" pos:end="177:54">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:45"><expr pos:start="179:13" pos:end="179:44"><name pos:start="179:13" pos:end="179:32"><name pos:start="179:13" pos:end="179:17">level</name><index pos:start="179:18" pos:end="179:32">[<expr pos:start="179:19" pos:end="179:31"><name pos:start="179:19" pos:end="179:31">trailing_ones</name></expr>]</index></name><operator pos:start="179:33" pos:end="179:33">=</operator> <name pos:start="179:35" pos:end="179:44">level_code</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="line" pos:start="185:9" pos:end="185:55">//remaining coefficients have suffix_length &gt; 0</comment>

        <for pos:start="187:9" pos:end="233:9">for<control pos:start="187:12" pos:end="187:48">(<init pos:start="187:13" pos:end="187:30"><expr pos:start="187:13" pos:end="187:29"><name pos:start="187:13" pos:end="187:13">i</name><operator pos:start="187:14" pos:end="187:14">=</operator><name pos:start="187:15" pos:end="187:27">trailing_ones</name><operator pos:start="187:28" pos:end="187:28">+</operator><literal type="number" pos:start="187:29" pos:end="187:29">1</literal></expr>;</init><condition pos:start="187:31" pos:end="187:44"><expr pos:start="187:31" pos:end="187:43"><name pos:start="187:31" pos:end="187:31">i</name><operator pos:start="187:32" pos:end="187:32">&lt;</operator><name pos:start="187:33" pos:end="187:43">total_coeff</name></expr>;</condition><incr pos:start="187:45" pos:end="187:47"><expr pos:start="187:45" pos:end="187:47"><name pos:start="187:45" pos:end="187:45">i</name><operator pos:start="187:46" pos:end="187:47">++</operator></expr></incr>)</control> <block pos:start="187:50" pos:end="233:9">{<block_content pos:start="189:13" pos:end="231:102">

            <decl_stmt pos:start="189:13" pos:end="189:82"><decl pos:start="189:13" pos:end="189:81"><type pos:start="189:13" pos:end="189:37"><specifier pos:start="189:13" pos:end="189:18">static</specifier> <specifier pos:start="189:20" pos:end="189:24">const</specifier> <name pos:start="189:26" pos:end="189:33">unsigned</name> <name pos:start="189:35" pos:end="189:37">int</name></type> <name pos:start="189:39" pos:end="189:53"><name pos:start="189:39" pos:end="189:50">suffix_limit</name><index pos:start="189:51" pos:end="189:53">[<expr pos:start="189:52" pos:end="189:52"><literal type="number" pos:start="189:52" pos:end="189:52">7</literal></expr>]</index></name> <init pos:start="189:55" pos:end="189:81">= <expr pos:start="189:57" pos:end="189:81"><block pos:start="189:57" pos:end="189:81">{<expr pos:start="189:58" pos:end="189:58"><literal type="number" pos:start="189:58" pos:end="189:58">0</literal></expr>,<expr pos:start="189:60" pos:end="189:60"><literal type="number" pos:start="189:60" pos:end="189:60">3</literal></expr>,<expr pos:start="189:62" pos:end="189:62"><literal type="number" pos:start="189:62" pos:end="189:62">6</literal></expr>,<expr pos:start="189:64" pos:end="189:65"><literal type="number" pos:start="189:64" pos:end="189:65">12</literal></expr>,<expr pos:start="189:67" pos:end="189:68"><literal type="number" pos:start="189:67" pos:end="189:68">24</literal></expr>,<expr pos:start="189:70" pos:end="189:71"><literal type="number" pos:start="189:70" pos:end="189:71">48</literal></expr>,<expr pos:start="189:73" pos:end="189:79"><name pos:start="189:73" pos:end="189:79">INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="191:13" pos:end="191:53"><decl pos:start="191:13" pos:end="191:52"><type pos:start="191:13" pos:end="191:15"><name pos:start="191:13" pos:end="191:15">int</name></type> <name pos:start="191:17" pos:end="191:21">bitsi</name><init pos:start="191:22" pos:end="191:52">= <expr pos:start="191:24" pos:end="191:52"><call pos:start="191:24" pos:end="191:52"><name pos:start="191:24" pos:end="191:32">show_bits</name><argument_list pos:start="191:33" pos:end="191:52">(<argument pos:start="191:34" pos:end="191:35"><expr pos:start="191:34" pos:end="191:35"><name pos:start="191:34" pos:end="191:35">gb</name></expr></argument>, <argument pos:start="191:38" pos:end="191:51"><expr pos:start="191:38" pos:end="191:51"><name pos:start="191:38" pos:end="191:51">LEVEL_TAB_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:65"><expr pos:start="193:13" pos:end="193:64"><name pos:start="193:13" pos:end="193:22">level_code</name><operator pos:start="193:23" pos:end="193:23">=</operator> <name pos:start="193:25" pos:end="193:64"><name pos:start="193:25" pos:end="193:39">cavlc_level_tab</name><index pos:start="193:40" pos:end="193:54">[<expr pos:start="193:41" pos:end="193:53"><name pos:start="193:41" pos:end="193:53">suffix_length</name></expr>]</index><index pos:start="193:55" pos:end="193:61">[<expr pos:start="193:56" pos:end="193:60"><name pos:start="193:56" pos:end="193:60">bitsi</name></expr>]</index><index pos:start="193:62" pos:end="193:64">[<expr pos:start="193:63" pos:end="193:63"><literal type="number" pos:start="193:63" pos:end="193:63">0</literal></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="197:13" pos:end="197:68"><expr pos:start="197:13" pos:end="197:67"><call pos:start="197:13" pos:end="197:67"><name pos:start="197:13" pos:end="197:21">skip_bits</name><argument_list pos:start="197:22" pos:end="197:67">(<argument pos:start="197:23" pos:end="197:24"><expr pos:start="197:23" pos:end="197:24"><name pos:start="197:23" pos:end="197:24">gb</name></expr></argument>, <argument pos:start="197:27" pos:end="197:66"><expr pos:start="197:27" pos:end="197:66"><name pos:start="197:27" pos:end="197:66"><name pos:start="197:27" pos:end="197:41">cavlc_level_tab</name><index pos:start="197:42" pos:end="197:56">[<expr pos:start="197:43" pos:end="197:55"><name pos:start="197:43" pos:end="197:55">suffix_length</name></expr>]</index><index pos:start="197:57" pos:end="197:63">[<expr pos:start="197:58" pos:end="197:62"><name pos:start="197:58" pos:end="197:62">bitsi</name></expr>]</index><index pos:start="197:64" pos:end="197:66">[<expr pos:start="197:65" pos:end="197:65"><literal type="number" pos:start="197:65" pos:end="197:65">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="227:13"><if pos:start="199:13" pos:end="227:13">if<condition pos:start="199:15" pos:end="199:33">(<expr pos:start="199:16" pos:end="199:32"><name pos:start="199:16" pos:end="199:25">level_code</name> <operator pos:start="199:27" pos:end="199:28">&gt;=</operator> <literal type="number" pos:start="199:30" pos:end="199:32">100</literal></expr>)</condition><block pos:start="199:34" pos:end="227:13">{<block_content pos:start="201:17" pos:end="225:64">

                <expr_stmt pos:start="201:17" pos:end="201:41"><expr pos:start="201:17" pos:end="201:40"><name pos:start="201:17" pos:end="201:22">prefix</name><operator pos:start="201:23" pos:end="201:23">=</operator> <name pos:start="201:25" pos:end="201:34">level_code</name> <operator pos:start="201:36" pos:end="201:36">-</operator> <literal type="number" pos:start="201:38" pos:end="201:40">100</literal></expr>;</expr_stmt>

                <if_stmt pos:start="203:17" pos:end="207:17"><if pos:start="203:17" pos:end="207:17">if<condition pos:start="203:19" pos:end="203:44">(<expr pos:start="203:20" pos:end="203:43"><name pos:start="203:20" pos:end="203:25">prefix</name> <operator pos:start="203:27" pos:end="203:28">==</operator> <name pos:start="203:30" pos:end="203:43">LEVEL_TAB_BITS</name></expr>)</condition><block pos:start="203:45" pos:end="207:17">{<block_content pos:start="205:21" pos:end="205:51">

                    <expr_stmt pos:start="205:21" pos:end="205:51"><expr pos:start="205:21" pos:end="205:50"><name pos:start="205:21" pos:end="205:26">prefix</name> <operator pos:start="205:28" pos:end="205:29">+=</operator> <call pos:start="205:31" pos:end="205:50"><name pos:start="205:31" pos:end="205:46">get_level_prefix</name><argument_list pos:start="205:47" pos:end="205:50">(<argument pos:start="205:48" pos:end="205:49"><expr pos:start="205:48" pos:end="205:49"><name pos:start="205:48" pos:end="205:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="209:17" pos:end="221:17"><if pos:start="209:17" pos:end="213:17">if<condition pos:start="209:19" pos:end="209:29">(<expr pos:start="209:20" pos:end="209:28"><name pos:start="209:20" pos:end="209:25">prefix</name><operator pos:start="209:26" pos:end="209:26">&lt;</operator><literal type="number" pos:start="209:27" pos:end="209:28">15</literal></expr>)</condition><block pos:start="209:30" pos:end="213:17">{<block_content pos:start="211:21" pos:end="211:87">

                    <expr_stmt pos:start="211:21" pos:end="211:87"><expr pos:start="211:21" pos:end="211:86"><name pos:start="211:21" pos:end="211:30">level_code</name> <operator pos:start="211:32" pos:end="211:32">=</operator> <operator pos:start="211:34" pos:end="211:34">(</operator><name pos:start="211:35" pos:end="211:40">prefix</name><operator pos:start="211:41" pos:end="211:42">&lt;&lt;</operator><name pos:start="211:43" pos:end="211:55">suffix_length</name><operator pos:start="211:56" pos:end="211:56">)</operator> <operator pos:start="211:58" pos:end="211:58">+</operator> <call pos:start="211:60" pos:end="211:86"><name pos:start="211:60" pos:end="211:67">get_bits</name><argument_list pos:start="211:68" pos:end="211:86">(<argument pos:start="211:69" pos:end="211:70"><expr pos:start="211:69" pos:end="211:70"><name pos:start="211:69" pos:end="211:70">gb</name></expr></argument>, <argument pos:start="211:73" pos:end="211:85"><expr pos:start="211:73" pos:end="211:85"><name pos:start="211:73" pos:end="211:85">suffix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="213:18" pos:end="221:17">else<block pos:start="213:22" pos:end="221:17">{<block_content pos:start="215:21" pos:end="219:59">

                    <expr_stmt pos:start="215:21" pos:end="215:78"><expr pos:start="215:21" pos:end="215:77"><name pos:start="215:21" pos:end="215:30">level_code</name> <operator pos:start="215:32" pos:end="215:32">=</operator> <operator pos:start="215:34" pos:end="215:34">(</operator><literal type="number" pos:start="215:35" pos:end="215:36">15</literal><operator pos:start="215:37" pos:end="215:38">&lt;&lt;</operator><name pos:start="215:39" pos:end="215:51">suffix_length</name><operator pos:start="215:52" pos:end="215:52">)</operator> <operator pos:start="215:54" pos:end="215:54">+</operator> <call pos:start="215:56" pos:end="215:77"><name pos:start="215:56" pos:end="215:63">get_bits</name><argument_list pos:start="215:64" pos:end="215:77">(<argument pos:start="215:65" pos:end="215:66"><expr pos:start="215:65" pos:end="215:66"><name pos:start="215:65" pos:end="215:66">gb</name></expr></argument>, <argument pos:start="215:69" pos:end="215:76"><expr pos:start="215:69" pos:end="215:76"><name pos:start="215:69" pos:end="215:74">prefix</name><operator pos:start="215:75" pos:end="215:75">-</operator><literal type="number" pos:start="215:76" pos:end="215:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="217:21" pos:end="219:59"><if pos:start="217:21" pos:end="219:59">if<condition pos:start="217:23" pos:end="217:34">(<expr pos:start="217:24" pos:end="217:33"><name pos:start="217:24" pos:end="217:29">prefix</name><operator pos:start="217:30" pos:end="217:31">&gt;=</operator><literal type="number" pos:start="217:32" pos:end="217:33">16</literal></expr>)</condition><block type="pseudo" pos:start="219:25" pos:end="219:59"><block_content pos:start="219:25" pos:end="219:59">

                        <expr_stmt pos:start="219:25" pos:end="219:59"><expr pos:start="219:25" pos:end="219:58"><name pos:start="219:25" pos:end="219:34">level_code</name> <operator pos:start="219:36" pos:end="219:37">+=</operator> <operator pos:start="219:39" pos:end="219:39">(</operator><literal type="number" pos:start="219:40" pos:end="219:40">1</literal><operator pos:start="219:41" pos:end="219:42">&lt;&lt;</operator><operator pos:start="219:43" pos:end="219:43">(</operator><name pos:start="219:44" pos:end="219:49">prefix</name><operator pos:start="219:50" pos:end="219:50">-</operator><literal type="number" pos:start="219:51" pos:end="219:51">3</literal><operator pos:start="219:52" pos:end="219:52">)</operator><operator pos:start="219:53" pos:end="219:53">)</operator><operator pos:start="219:54" pos:end="219:54">-</operator><literal type="number" pos:start="219:55" pos:end="219:58">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:38"><expr pos:start="223:17" pos:end="223:37"><name pos:start="223:17" pos:end="223:20">mask</name><operator pos:start="223:21" pos:end="223:21">=</operator> <operator pos:start="223:23" pos:end="223:23">-</operator><operator pos:start="223:24" pos:end="223:24">(</operator><name pos:start="223:25" pos:end="223:34">level_code</name><operator pos:start="223:35" pos:end="223:35">&amp;</operator><literal type="number" pos:start="223:36" pos:end="223:36">1</literal><operator pos:start="223:37" pos:end="223:37">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="225:17" pos:end="225:64"><expr pos:start="225:17" pos:end="225:63"><name pos:start="225:17" pos:end="225:26">level_code</name><operator pos:start="225:27" pos:end="225:27">=</operator> <operator pos:start="225:29" pos:end="225:29">(</operator><operator pos:start="225:30" pos:end="225:30">(</operator><operator pos:start="225:31" pos:end="225:31">(</operator><literal type="number" pos:start="225:32" pos:end="225:33">2</literal><operator pos:start="225:33" pos:end="225:33">+</operator><name pos:start="225:34" pos:end="225:43">level_code</name><operator pos:start="225:44" pos:end="225:44">)</operator><operator pos:start="225:45" pos:end="225:46">&gt;&gt;</operator><literal type="number" pos:start="225:47" pos:end="225:47">1</literal><operator pos:start="225:48" pos:end="225:48">)</operator> <operator pos:start="225:50" pos:end="225:50">^</operator> <name pos:start="225:52" pos:end="225:55">mask</name><operator pos:start="225:56" pos:end="225:56">)</operator> <operator pos:start="225:58" pos:end="225:58">-</operator> <name pos:start="225:60" pos:end="225:63">mask</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:33"><expr pos:start="229:13" pos:end="229:32"><name pos:start="229:13" pos:end="229:20"><name pos:start="229:13" pos:end="229:17">level</name><index pos:start="229:18" pos:end="229:20">[<expr pos:start="229:19" pos:end="229:19"><name pos:start="229:19" pos:end="229:19">i</name></expr>]</index></name><operator pos:start="229:21" pos:end="229:21">=</operator> <name pos:start="229:23" pos:end="229:32">level_code</name></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:102"><expr pos:start="231:13" pos:end="231:101"><name pos:start="231:13" pos:end="231:25">suffix_length</name><operator pos:start="231:26" pos:end="231:27">+=</operator> <name pos:start="231:29" pos:end="231:55"><name pos:start="231:29" pos:end="231:40">suffix_limit</name><index pos:start="231:41" pos:end="231:55">[<expr pos:start="231:42" pos:end="231:54"><name pos:start="231:42" pos:end="231:54">suffix_length</name></expr>]</index></name> <operator pos:start="231:57" pos:end="231:57">+</operator> <name pos:start="231:59" pos:end="231:68">level_code</name> <operator pos:start="231:70" pos:end="231:70">&gt;</operator> <literal type="number" pos:start="231:72" pos:end="231:73">2U</literal><operator pos:start="231:74" pos:end="231:74">*</operator><name pos:start="231:75" pos:end="231:101"><name pos:start="231:75" pos:end="231:86">suffix_limit</name><index pos:start="231:87" pos:end="231:101">[<expr pos:start="231:88" pos:end="231:100"><name pos:start="231:88" pos:end="231:100">suffix_length</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="334:0"><if pos:start="239:5" pos:end="241:21">if<condition pos:start="239:7" pos:end="239:32">(<expr pos:start="239:8" pos:end="239:31"><name pos:start="239:8" pos:end="239:18">total_coeff</name> <operator pos:start="239:20" pos:end="239:21">==</operator> <name pos:start="239:23" pos:end="239:31">max_coeff</name></expr>)</condition><block type="pseudo" pos:start="241:9" pos:end="241:21"><block_content pos:start="241:9" pos:end="241:21">

        <expr_stmt pos:start="241:9" pos:end="241:21"><expr pos:start="241:9" pos:end="241:20"><name pos:start="241:9" pos:end="241:18">zeros_left</name><operator pos:start="241:19" pos:end="241:19">=</operator><literal type="number" pos:start="241:20" pos:end="241:20">0</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="243:5" pos:end="334:0">else<block pos:start="243:9" pos:end="334:0">{<block_content pos:start="245:9" pos:end="263:9">

        <if_stmt pos:start="245:9" pos:end="263:9"><if pos:start="245:9" pos:end="259:9">if <condition pos:start="245:12" pos:end="245:27">(<expr pos:start="245:13" pos:end="245:26"><name pos:start="245:13" pos:end="245:21">max_coeff</name> <operator pos:start="245:23" pos:end="245:24">&lt;=</operator> <literal type="number" pos:start="245:26" pos:end="245:26">8</literal></expr>)</condition> <block pos:start="245:29" pos:end="259:9">{<block_content pos:start="247:13" pos:end="257:76">

            <if_stmt pos:start="247:13" pos:end="257:76"><if pos:start="247:13" pos:end="251:73">if <condition pos:start="247:16" pos:end="247:31">(<expr pos:start="247:17" pos:end="247:30"><name pos:start="247:17" pos:end="247:25">max_coeff</name> <operator pos:start="247:27" pos:end="247:28">==</operator> <literal type="number" pos:start="247:30" pos:end="247:30">4</literal></expr>)</condition><block type="pseudo" pos:start="249:17" pos:end="251:73"><block_content pos:start="249:17" pos:end="251:73">

                <expr_stmt pos:start="249:17" pos:end="251:73"><expr pos:start="249:17" pos:end="251:72"><name pos:start="249:17" pos:end="249:26">zeros_left</name> <operator pos:start="249:28" pos:end="249:28">=</operator> <call pos:start="249:30" pos:end="251:72"><name pos:start="249:30" pos:end="249:37">get_vlc2</name><argument_list pos:start="249:38" pos:end="251:72">(<argument pos:start="249:39" pos:end="249:40"><expr pos:start="249:39" pos:end="249:40"><name pos:start="249:39" pos:end="249:40">gb</name></expr></argument>, <argument pos:start="249:43" pos:end="249:90"><expr pos:start="249:43" pos:end="249:90"><name pos:start="249:43" pos:end="249:84"><name pos:start="249:43" pos:end="249:67">chroma_dc_total_zeros_vlc</name><index pos:start="249:68" pos:end="249:84">[<expr pos:start="249:69" pos:end="249:83"><name pos:start="249:69" pos:end="249:79">total_coeff</name> <operator pos:start="249:81" pos:end="249:81">-</operator> <literal type="number" pos:start="249:83" pos:end="249:83">1</literal></expr>]</index></name><operator pos:start="249:85" pos:end="249:85">.</operator><name pos:start="249:86" pos:end="249:90">table</name></expr></argument>,

                                      <argument pos:start="251:39" pos:end="251:68"><expr pos:start="251:39" pos:end="251:68"><name pos:start="251:39" pos:end="251:68">CHROMA_DC_TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument pos:start="251:71" pos:end="251:71"><expr pos:start="251:71" pos:end="251:71"><literal type="number" pos:start="251:71" pos:end="251:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="253:13" pos:end="257:76">else<block type="pseudo" pos:start="255:17" pos:end="257:76"><block_content pos:start="255:17" pos:end="257:76">

                <expr_stmt pos:start="255:17" pos:end="257:76"><expr pos:start="255:17" pos:end="257:75"><name pos:start="255:17" pos:end="255:26">zeros_left</name> <operator pos:start="255:28" pos:end="255:28">=</operator> <call pos:start="255:30" pos:end="257:75"><name pos:start="255:30" pos:end="255:37">get_vlc2</name><argument_list pos:start="255:38" pos:end="257:75">(<argument pos:start="255:39" pos:end="255:40"><expr pos:start="255:39" pos:end="255:40"><name pos:start="255:39" pos:end="255:40">gb</name></expr></argument>, <argument pos:start="255:43" pos:end="255:93"><expr pos:start="255:43" pos:end="255:93"><name pos:start="255:43" pos:end="255:87"><name pos:start="255:43" pos:end="255:70">chroma422_dc_total_zeros_vlc</name><index pos:start="255:71" pos:end="255:87">[<expr pos:start="255:72" pos:end="255:86"><name pos:start="255:72" pos:end="255:82">total_coeff</name> <operator pos:start="255:84" pos:end="255:84">-</operator> <literal type="number" pos:start="255:86" pos:end="255:86">1</literal></expr>]</index></name><operator pos:start="255:88" pos:end="255:88">.</operator><name pos:start="255:89" pos:end="255:93">table</name></expr></argument>,

                                      <argument pos:start="257:39" pos:end="257:71"><expr pos:start="257:39" pos:end="257:71"><name pos:start="257:39" pos:end="257:71">CHROMA422_DC_TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument pos:start="257:74" pos:end="257:74"><expr pos:start="257:74" pos:end="257:74"><literal type="number" pos:start="257:74" pos:end="257:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="259:11" pos:end="263:9">else <block pos:start="259:16" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:102">

            <expr_stmt pos:start="261:13" pos:end="261:102"><expr pos:start="261:13" pos:end="261:101"><name pos:start="261:13" pos:end="261:22">zeros_left</name><operator pos:start="261:23" pos:end="261:23">=</operator> <call pos:start="261:25" pos:end="261:101"><name pos:start="261:25" pos:end="261:32">get_vlc2</name><argument_list pos:start="261:33" pos:end="261:101">(<argument pos:start="261:34" pos:end="261:35"><expr pos:start="261:34" pos:end="261:35"><name pos:start="261:34" pos:end="261:35">gb</name></expr></argument>, <argument pos:start="261:38" pos:end="261:75"><expr pos:start="261:38" pos:end="261:75"><name pos:start="261:38" pos:end="261:69"><name pos:start="261:38" pos:end="261:52">total_zeros_vlc</name><index pos:start="261:53" pos:end="261:69">[<expr pos:start="261:54" pos:end="261:68"><name pos:start="261:54" pos:end="261:64">total_coeff</name> <operator pos:start="261:66" pos:end="261:66">-</operator> <literal type="number" pos:start="261:68" pos:end="261:68">1</literal></expr>]</index></name><operator pos:start="261:70" pos:end="261:70">.</operator><name pos:start="261:71" pos:end="261:75">table</name></expr></argument>, <argument pos:start="261:78" pos:end="261:97"><expr pos:start="261:78" pos:end="261:97"><name pos:start="261:78" pos:end="261:97">TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument pos:start="261:100" pos:end="261:100"><expr pos:start="261:100" pos:end="261:100"><literal type="number" pos:start="261:100" pos:end="261:100">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:define pos:start="269:1" pos:end="333:5">#<cpp:directive pos:start="269:2" pos:end="269:7">define</cpp:directive> <cpp:macro pos:start="269:9" pos:end="269:25"><name pos:start="269:9" pos:end="269:19">STORE_BLOCK</name><parameter_list pos:start="269:20" pos:end="269:25">(<parameter pos:start="269:21" pos:end="269:24"><type pos:start="269:21" pos:end="269:24"><name pos:start="269:21" pos:end="269:24">type</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="271:5" pos:end="333:5">scantable += zeros_left + total_coeff - 1; \

    if(n &gt;= LUMA_DC_BLOCK_INDEX){ \

        ((type*)block)[*scantable] = level[0]; \

        for(i=1;i&lt;total_coeff &amp;&amp; zeros_left &gt; 0;i++) { \

            if(zeros_left &lt; 7) \

                run_before= get_vlc2(gb, run_vlc[zeros_left - 1].table, RUN_VLC_BITS, 1); \

            else \

                run_before= get_vlc2(gb, run7_vlc.table, RUN7_VLC_BITS, 2); \

            zeros_left -= run_before; \

            scantable -= 1 + run_before; \

            ((type*)block)[*scantable]= level[i]; \

        } \

        for(;i&lt;total_coeff;i++) { \

            scantable--; \

            ((type*)block)[*scantable]= level[i]; \

        } \

    }else{ \

        ((type*)block)[*scantable] = ((int)(level[0] * qmul[*scantable] + 32))&gt;&gt;6; \

        for(i=1;i&lt;total_coeff &amp;&amp; zeros_left &gt; 0;i++) { \

            if(zeros_left &lt; 7) \

                run_before= get_vlc2(gb, run_vlc[zeros_left - 1].table, RUN_VLC_BITS, 1); \

            else \

                run_before= get_vlc2(gb, run7_vlc.table, RUN7_VLC_BITS, 2); \

            zeros_left -= run_before; \

            scantable -= 1 + run_before; \

            ((type*)block)[*scantable]= ((int)(level[i] * qmul[*scantable] + 32))&gt;&gt;6; \

        } \

        for(;i&lt;total_coeff;i++) { \

            scantable--; \

            ((type*)block)[*scantable]= ((int)(level[i] * qmul[*scantable] + 32))&gt;&gt;6; \

        } \

    }</cpp:value></cpp:define>



    <if_stmt pos:start="337:5" pos:end="345:5"><if pos:start="337:5" pos:end="341:5">if <condition pos:start="337:8" pos:end="337:23">(<expr pos:start="337:9" pos:end="337:22"><name pos:start="337:9" pos:end="337:22"><name pos:start="337:9" pos:end="337:9">h</name><operator pos:start="337:10" pos:end="337:11">-&gt;</operator><name pos:start="337:12" pos:end="337:22">pixel_shift</name></name></expr>)</condition> <block pos:start="337:25" pos:end="341:5">{<block_content pos:start="339:9" pos:end="339:28">

        <macro pos:start="339:9" pos:end="339:28"><name pos:start="339:9" pos:end="339:19">STORE_BLOCK</name><argument_list pos:start="339:20" pos:end="339:28">(<argument pos:start="339:21" pos:end="339:27">int32_t</argument>)</argument_list></macro>

    </block_content>}</block></if> <else pos:start="341:7" pos:end="345:5">else <block pos:start="341:12" pos:end="345:5">{<block_content pos:start="343:9" pos:end="343:28">

        <macro pos:start="343:9" pos:end="343:28"><name pos:start="343:9" pos:end="343:19">STORE_BLOCK</name><argument_list pos:start="343:20" pos:end="343:28">(<argument pos:start="343:21" pos:end="343:27">int16_t</argument>)</argument_list></macro>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="349:5" pos:end="355:5"><if pos:start="349:5" pos:end="355:5">if<condition pos:start="349:7" pos:end="349:20">(<expr pos:start="349:8" pos:end="349:19"><name pos:start="349:8" pos:end="349:17">zeros_left</name><operator pos:start="349:18" pos:end="349:18">&lt;</operator><literal type="number" pos:start="349:19" pos:end="349:19">0</literal></expr>)</condition><block pos:start="349:21" pos:end="355:5">{<block_content pos:start="351:9" pos:end="353:18">

        <expr_stmt pos:start="351:9" pos:end="351:104"><expr pos:start="351:9" pos:end="351:103"><call pos:start="351:9" pos:end="351:103"><name pos:start="351:9" pos:end="351:14">av_log</name><argument_list pos:start="351:15" pos:end="351:103">(<argument pos:start="351:16" pos:end="351:25"><expr pos:start="351:16" pos:end="351:25"><name pos:start="351:16" pos:end="351:25"><name pos:start="351:16" pos:end="351:16">h</name><operator pos:start="351:17" pos:end="351:18">-&gt;</operator><name pos:start="351:19" pos:end="351:19">s</name><operator pos:start="351:20" pos:end="351:20">.</operator><name pos:start="351:21" pos:end="351:25">avctx</name></name></expr></argument>, <argument pos:start="351:28" pos:end="351:39"><expr pos:start="351:28" pos:end="351:39"><name pos:start="351:28" pos:end="351:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="351:42" pos:end="351:84"><expr pos:start="351:42" pos:end="351:84"><literal type="string" pos:start="351:42" pos:end="351:84">"negative number of zero coeffs at %d %d\n"</literal></expr></argument>, <argument pos:start="351:87" pos:end="351:93"><expr pos:start="351:87" pos:end="351:93"><name pos:start="351:87" pos:end="351:93"><name pos:start="351:87" pos:end="351:87">s</name><operator pos:start="351:88" pos:end="351:89">-&gt;</operator><name pos:start="351:90" pos:end="351:93">mb_x</name></name></expr></argument>, <argument pos:start="351:96" pos:end="351:102"><expr pos:start="351:96" pos:end="351:102"><name pos:start="351:96" pos:end="351:102"><name pos:start="351:96" pos:end="351:96">s</name><operator pos:start="351:97" pos:end="351:98">-&gt;</operator><name pos:start="351:99" pos:end="351:102">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="353:9" pos:end="353:18">return <expr pos:start="353:16" pos:end="353:17"><operator pos:start="353:16" pos:end="353:16">-</operator><literal type="number" pos:start="353:17" pos:end="353:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="359:5" pos:end="359:13">return <expr pos:start="359:12" pos:end="359:12"><literal type="number" pos:start="359:12" pos:end="359:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
