<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/708.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">spapr_populate_drconf_memory</name><parameter_list pos:start="1:40" pos:end="1:76">(<parameter pos:start="1:41" pos:end="1:64"><decl pos:start="1:41" pos:end="1:64"><type pos:start="1:41" pos:end="1:64"><name pos:start="1:41" pos:end="1:57">sPAPRMachineState</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:64">spapr</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:75"><decl pos:start="1:67" pos:end="1:75"><type pos:start="1:67" pos:end="1:75"><name pos:start="1:67" pos:end="1:70">void</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:75">fdt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:15">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MachineState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:25">machine</name> <init pos:start="5:27" pos:end="5:42">= <expr pos:start="5:29" pos:end="5:42"><call pos:start="5:29" pos:end="5:42"><name pos:start="5:29" pos:end="5:35">MACHINE</name><argument_list pos:start="5:36" pos:end="5:42">(<argument pos:start="5:37" pos:end="5:41"><expr pos:start="5:37" pos:end="5:41"><name pos:start="5:37" pos:end="5:41">spapr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">i</name></decl>, <decl pos:start="7:17" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:22">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:47"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:21">lmb_size</name> <init pos:start="9:23" pos:end="9:47">= <expr pos:start="9:25" pos:end="9:47"><name pos:start="9:25" pos:end="9:47">SPAPR_MEMORY_BLOCK_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:58"><decl pos:start="11:5" pos:end="11:57"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:28"><name pos:start="11:14" pos:end="11:26">prop_lmb_size</name><index pos:start="11:27" pos:end="11:28">[]</index></name> <init pos:start="11:30" pos:end="11:57">= <expr pos:start="11:32" pos:end="11:57"><block pos:start="11:32" pos:end="11:57">{<expr pos:start="11:33" pos:end="11:33"><literal type="number" pos:start="11:33" pos:end="11:33">0</literal></expr>, <macro pos:start="11:36" pos:end="11:56"><name pos:start="11:36" pos:end="11:46">cpu_to_be32</name><argument_list pos:start="11:47" pos:end="11:56">(<argument pos:start="11:48" pos:end="11:55">lmb_size</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:75"><decl pos:start="13:5" pos:end="13:74"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:20">nr_lmbs</name> <init pos:start="13:22" pos:end="13:74">= <expr pos:start="13:24" pos:end="13:74"><operator pos:start="13:24" pos:end="13:24">(</operator><name pos:start="13:25" pos:end="13:44"><name pos:start="13:25" pos:end="13:31">machine</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:44">maxram_size</name></name> <operator pos:start="13:46" pos:end="13:46">-</operator> <name pos:start="13:48" pos:end="13:64"><name pos:start="13:48" pos:end="13:54">machine</name><operator pos:start="13:55" pos:end="13:56">-&gt;</operator><name pos:start="13:57" pos:end="13:64">ram_size</name></name><operator pos:start="13:65" pos:end="13:65">)</operator><operator pos:start="13:66" pos:end="13:66">/</operator><name pos:start="13:67" pos:end="13:74">lmb_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint32_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:21">int_buf</name></decl>, <decl pos:start="15:24" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:14"><modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:33">cur_index</name></decl>, <decl pos:start="15:36" pos:end="15:42"><type ref="prev" pos:start="15:5" pos:end="15:14"/><name pos:start="15:36" pos:end="15:42">buf_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:53"><decl pos:start="17:5" pos:end="17:52"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">nr_nodes</name> <init pos:start="17:18" pos:end="17:52">= <expr pos:start="17:20" pos:end="17:52"><ternary pos:start="17:20" pos:end="17:52"><condition pos:start="17:20" pos:end="17:34"><expr pos:start="17:20" pos:end="17:32"><name pos:start="17:20" pos:end="17:32">nb_numa_nodes</name></expr> ?</condition><then pos:start="17:36" pos:end="17:48"> <expr pos:start="17:36" pos:end="17:48"><name pos:start="17:36" pos:end="17:48">nb_numa_nodes</name></expr> </then><else pos:start="17:50" pos:end="17:52">: <expr pos:start="17:52" pos:end="17:52"><literal type="number" pos:start="17:52" pos:end="17:52">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:66">/* Allocate enough buffer size to fit in ibm,dynamic-memory */</comment>

    <expr_stmt pos:start="23:5" pos:end="25:33"><expr pos:start="23:5" pos:end="25:32"><name pos:start="23:5" pos:end="23:11">buf_len</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:21">nr_lmbs</name> <operator pos:start="23:23" pos:end="23:23">*</operator> <name pos:start="23:25" pos:end="23:52">SPAPR_DR_LMB_LIST_ENTRY_SIZE</name> <operator pos:start="23:54" pos:end="23:54">*</operator> <sizeof pos:start="23:56" pos:end="23:71">sizeof<argument_list pos:start="23:62" pos:end="23:71">(<argument pos:start="23:63" pos:end="23:70"><expr pos:start="23:63" pos:end="23:70"><name pos:start="23:63" pos:end="23:70">uint32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="23:73" pos:end="23:73">+</operator>

                <sizeof pos:start="25:17" pos:end="25:32">sizeof<argument_list pos:start="25:23" pos:end="25:32">(<argument pos:start="25:24" pos:end="25:31"><expr pos:start="25:24" pos:end="25:31"><name pos:start="25:24" pos:end="25:31">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:45"><expr pos:start="27:5" pos:end="27:44"><name pos:start="27:5" pos:end="27:13">cur_index</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:23">int_buf</name> <operator pos:start="27:25" pos:end="27:25">=</operator> <call pos:start="27:27" pos:end="27:44"><name pos:start="27:27" pos:end="27:35">g_malloc0</name><argument_list pos:start="27:36" pos:end="27:44">(<argument pos:start="27:37" pos:end="27:43"><expr pos:start="27:37" pos:end="27:43"><name pos:start="27:37" pos:end="27:43">buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:75"><expr pos:start="31:5" pos:end="31:74"><name pos:start="31:5" pos:end="31:10">offset</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:74"><name pos:start="31:14" pos:end="31:28">fdt_add_subnode</name><argument_list pos:start="31:29" pos:end="31:74">(<argument pos:start="31:30" pos:end="31:32"><expr pos:start="31:30" pos:end="31:32"><name pos:start="31:30" pos:end="31:32">fdt</name></expr></argument>, <argument pos:start="31:35" pos:end="31:35"><expr pos:start="31:35" pos:end="31:35"><literal type="number" pos:start="31:35" pos:end="31:35">0</literal></expr></argument>, <argument pos:start="31:38" pos:end="31:73"><expr pos:start="31:38" pos:end="31:73"><literal type="string" pos:start="31:38" pos:end="31:73">"ibm,dynamic-reconfiguration-memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="37:43"><expr pos:start="35:5" pos:end="37:42"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="37:42"><name pos:start="35:11" pos:end="35:21">fdt_setprop</name><argument_list pos:start="35:22" pos:end="37:42">(<argument pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:25">fdt</name></expr></argument>, <argument pos:start="35:28" pos:end="35:33"><expr pos:start="35:28" pos:end="35:33"><name pos:start="35:28" pos:end="35:33">offset</name></expr></argument>, <argument pos:start="35:36" pos:end="35:49"><expr pos:start="35:36" pos:end="35:49"><literal type="string" pos:start="35:36" pos:end="35:49">"ibm,lmb-size"</literal></expr></argument>, <argument pos:start="35:52" pos:end="35:64"><expr pos:start="35:52" pos:end="35:64"><name pos:start="35:52" pos:end="35:64">prop_lmb_size</name></expr></argument>,

                    <argument pos:start="37:21" pos:end="37:41"><expr pos:start="37:21" pos:end="37:41"><sizeof pos:start="37:21" pos:end="37:41">sizeof<argument_list pos:start="37:27" pos:end="37:41">(<argument pos:start="37:28" pos:end="37:40"><expr pos:start="37:28" pos:end="37:40"><name pos:start="37:28" pos:end="37:40">prop_lmb_size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">&lt;</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition> <block pos:start="39:18" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:17">

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:71"><expr pos:start="47:5" pos:end="47:70"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:70"><name pos:start="47:11" pos:end="47:26">fdt_setprop_cell</name><argument_list pos:start="47:27" pos:end="47:70">(<argument pos:start="47:28" pos:end="47:30"><expr pos:start="47:28" pos:end="47:30"><name pos:start="47:28" pos:end="47:30">fdt</name></expr></argument>, <argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:38">offset</name></expr></argument>, <argument pos:start="47:41" pos:end="47:63"><expr pos:start="47:41" pos:end="47:63"><literal type="string" pos:start="47:41" pos:end="47:63">"ibm,memory-flags-mask"</literal></expr></argument>, <argument pos:start="47:66" pos:end="47:69"><expr pos:start="47:66" pos:end="47:69"><literal type="number" pos:start="47:66" pos:end="47:69">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:16">(<expr pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">&lt;</operator> <literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr>)</condition> <block pos:start="49:18" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:17">

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:77"><expr pos:start="57:5" pos:end="57:76"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:76"><name pos:start="57:11" pos:end="57:26">fdt_setprop_cell</name><argument_list pos:start="57:27" pos:end="57:76">(<argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">fdt</name></expr></argument>, <argument pos:start="57:33" pos:end="57:38"><expr pos:start="57:33" pos:end="57:38"><name pos:start="57:33" pos:end="57:38">offset</name></expr></argument>, <argument pos:start="57:41" pos:end="57:70"><expr pos:start="57:41" pos:end="57:70"><literal type="string" pos:start="57:41" pos:end="57:70">"ibm,memory-preservation-time"</literal></expr></argument>, <argument pos:start="57:73" pos:end="57:75"><expr pos:start="57:73" pos:end="57:75"><literal type="number" pos:start="57:73" pos:end="57:75">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:16">(<expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">&lt;</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>)</condition> <block pos:start="59:18" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:17">

        <goto pos:start="61:9" pos:end="61:17">goto <name pos:start="61:14" pos:end="61:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:28">/* ibm,dynamic-memory */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:38"><expr pos:start="69:5" pos:end="69:37"><name pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:11">int_buf</name><index pos:start="69:12" pos:end="69:14">[<expr pos:start="69:13" pos:end="69:13"><literal type="number" pos:start="69:13" pos:end="69:13">0</literal></expr>]</index></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="69:37"><name pos:start="69:18" pos:end="69:28">cpu_to_be32</name><argument_list pos:start="69:29" pos:end="69:37">(<argument pos:start="69:30" pos:end="69:36"><expr pos:start="69:30" pos:end="69:36"><name pos:start="69:30" pos:end="69:36">nr_lmbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:16"><expr pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:13">cur_index</name><operator pos:start="71:14" pos:end="71:15">++</operator></expr>;</expr_stmt>

    <for pos:start="73:5" pos:end="121:5">for <control pos:start="73:9" pos:end="73:33">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:28"><expr pos:start="73:17" pos:end="73:27"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:27">nr_lmbs</name></expr>;</condition> <incr pos:start="73:30" pos:end="73:32"><expr pos:start="73:30" pos:end="73:32"><name pos:start="73:30" pos:end="73:30">i</name><operator pos:start="73:31" pos:end="73:32">++</operator></expr></incr>)</control> <block pos:start="73:35" pos:end="121:5">{<block_content pos:start="75:9" pos:end="119:50">

        <decl_stmt pos:start="75:9" pos:end="75:30"><decl pos:start="75:9" pos:end="75:29"><type pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:24">sPAPRDRConnector</name> <modifier pos:start="75:26" pos:end="75:26">*</modifier></type><name pos:start="75:27" pos:end="75:29">drc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="77:36"><decl pos:start="77:9" pos:end="77:35"><type pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:29">sPAPRDRConnectorClass</name> <modifier pos:start="77:31" pos:end="77:31">*</modifier></type><name pos:start="77:32" pos:end="77:35">drck</name></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:66"><decl pos:start="79:9" pos:end="79:65"><type pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:16">uint64_t</name></type> <name pos:start="79:18" pos:end="79:21">addr</name> <init pos:start="79:23" pos:end="79:65">= <expr pos:start="79:25" pos:end="79:65"><name pos:start="79:25" pos:end="79:25">i</name> <operator pos:start="79:27" pos:end="79:27">*</operator> <name pos:start="79:29" pos:end="79:36">lmb_size</name> <operator pos:start="79:38" pos:end="79:38">+</operator> <name pos:start="79:40" pos:end="79:65"><name pos:start="79:40" pos:end="79:44">spapr</name><operator pos:start="79:45" pos:end="79:46">-&gt;</operator><name pos:start="79:47" pos:end="79:60">hotplug_memory</name><operator pos:start="79:61" pos:end="79:61">.</operator><name pos:start="79:62" pos:end="79:65">base</name></name></expr></init></decl>;</decl_stmt><empty_stmt pos:start="79:67" pos:end="79:67">;</empty_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:45"><decl pos:start="81:9" pos:end="81:44"><type pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:16">uint32_t</name> <modifier pos:start="81:18" pos:end="81:18">*</modifier></type><name pos:start="81:19" pos:end="81:32">dynamic_memory</name> <init pos:start="81:34" pos:end="81:44">= <expr pos:start="81:36" pos:end="81:44"><name pos:start="81:36" pos:end="81:44">cur_index</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="85:9" pos:end="87:54"><expr pos:start="85:9" pos:end="87:53"><name pos:start="85:9" pos:end="85:11">drc</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="87:53"><name pos:start="85:15" pos:end="85:38">spapr_dr_connector_by_id</name><argument_list pos:start="85:39" pos:end="87:53">(<argument pos:start="85:40" pos:end="85:66"><expr pos:start="85:40" pos:end="85:66"><name pos:start="85:40" pos:end="85:66">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>,

                                       <argument pos:start="87:40" pos:end="87:52"><expr pos:start="87:40" pos:end="87:52"><name pos:start="87:40" pos:end="87:43">addr</name><operator pos:start="87:44" pos:end="87:44">/</operator><name pos:start="87:45" pos:end="87:52">lmb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:22"><expr pos:start="89:9" pos:end="89:21"><call pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:16">g_assert</name><argument_list pos:start="89:17" pos:end="89:21">(<argument pos:start="89:18" pos:end="89:20"><expr pos:start="89:18" pos:end="89:20"><name pos:start="89:18" pos:end="89:20">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:49"><expr pos:start="91:9" pos:end="91:48"><name pos:start="91:9" pos:end="91:12">drck</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:48"><name pos:start="91:16" pos:end="91:43">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="91:44" pos:end="91:48">(<argument pos:start="91:45" pos:end="91:47"><expr pos:start="91:45" pos:end="91:47"><name pos:start="91:45" pos:end="91:47">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:52"><expr pos:start="95:9" pos:end="95:51"><name pos:start="95:9" pos:end="95:25"><name pos:start="95:9" pos:end="95:22">dynamic_memory</name><index pos:start="95:23" pos:end="95:25">[<expr pos:start="95:24" pos:end="95:24"><literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr>]</index></name> <operator pos:start="95:27" pos:end="95:27">=</operator> <call pos:start="95:29" pos:end="95:51"><name pos:start="95:29" pos:end="95:39">cpu_to_be32</name><argument_list pos:start="95:40" pos:end="95:51">(<argument pos:start="95:41" pos:end="95:50"><expr pos:start="95:41" pos:end="95:50"><name pos:start="95:41" pos:end="95:44">addr</name> <operator pos:start="95:46" pos:end="95:47">&gt;&gt;</operator> <literal type="number" pos:start="95:49" pos:end="95:50">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:59"><expr pos:start="97:9" pos:end="97:58"><name pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:22">dynamic_memory</name><index pos:start="97:23" pos:end="97:25">[<expr pos:start="97:24" pos:end="97:24"><literal type="number" pos:start="97:24" pos:end="97:24">1</literal></expr>]</index></name> <operator pos:start="97:27" pos:end="97:27">=</operator> <call pos:start="97:29" pos:end="97:58"><name pos:start="97:29" pos:end="97:39">cpu_to_be32</name><argument_list pos:start="97:40" pos:end="97:58">(<argument pos:start="97:41" pos:end="97:57"><expr pos:start="97:41" pos:end="97:57"><name pos:start="97:41" pos:end="97:44">addr</name> <operator pos:start="97:46" pos:end="97:46">&amp;</operator> <literal type="number" pos:start="97:48" pos:end="97:57">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:62"><expr pos:start="99:9" pos:end="99:61"><name pos:start="99:9" pos:end="99:25"><name pos:start="99:9" pos:end="99:22">dynamic_memory</name><index pos:start="99:23" pos:end="99:25">[<expr pos:start="99:24" pos:end="99:24"><literal type="number" pos:start="99:24" pos:end="99:24">2</literal></expr>]</index></name> <operator pos:start="99:27" pos:end="99:27">=</operator> <call pos:start="99:29" pos:end="99:61"><name pos:start="99:29" pos:end="99:39">cpu_to_be32</name><argument_list pos:start="99:40" pos:end="99:61">(<argument pos:start="99:41" pos:end="99:60"><expr pos:start="99:41" pos:end="99:60"><call pos:start="99:41" pos:end="99:60"><name pos:start="99:41" pos:end="99:55"><name pos:start="99:41" pos:end="99:44">drck</name><operator pos:start="99:45" pos:end="99:46">-&gt;</operator><name pos:start="99:47" pos:end="99:55">get_index</name></name><argument_list pos:start="99:56" pos:end="99:60">(<argument pos:start="99:57" pos:end="99:59"><expr pos:start="99:57" pos:end="99:59"><name pos:start="99:57" pos:end="99:59">drc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:22">dynamic_memory</name><index pos:start="101:23" pos:end="101:25">[<expr pos:start="101:24" pos:end="101:24"><literal type="number" pos:start="101:24" pos:end="101:24">3</literal></expr>]</index></name> <operator pos:start="101:27" pos:end="101:27">=</operator> <call pos:start="101:29" pos:end="101:42"><name pos:start="101:29" pos:end="101:39">cpu_to_be32</name><argument_list pos:start="101:40" pos:end="101:42">(<argument pos:start="101:41" pos:end="101:41"><expr pos:start="101:41" pos:end="101:41"><literal type="number" pos:start="101:41" pos:end="101:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="101:45" pos:end="101:58">/* reserved */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:67"><expr pos:start="103:9" pos:end="103:66"><name pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:22">dynamic_memory</name><index pos:start="103:23" pos:end="103:25">[<expr pos:start="103:24" pos:end="103:24"><literal type="number" pos:start="103:24" pos:end="103:24">4</literal></expr>]</index></name> <operator pos:start="103:27" pos:end="103:27">=</operator> <call pos:start="103:29" pos:end="103:66"><name pos:start="103:29" pos:end="103:39">cpu_to_be32</name><argument_list pos:start="103:40" pos:end="103:66">(<argument pos:start="103:41" pos:end="103:65"><expr pos:start="103:41" pos:end="103:65"><call pos:start="103:41" pos:end="103:65"><name pos:start="103:41" pos:end="103:53">numa_get_node</name><argument_list pos:start="103:54" pos:end="103:65">(<argument pos:start="103:55" pos:end="103:58"><expr pos:start="103:55" pos:end="103:58"><name pos:start="103:55" pos:end="103:58">addr</name></expr></argument>, <argument pos:start="103:61" pos:end="103:64"><expr pos:start="103:61" pos:end="103:64"><name pos:start="103:61" pos:end="103:64">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="115:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="107:69">(<expr pos:start="105:13" pos:end="107:68"><name pos:start="105:13" pos:end="105:16">addr</name> <operator pos:start="105:18" pos:end="105:18">&lt;</operator> <name pos:start="105:20" pos:end="105:36"><name pos:start="105:20" pos:end="105:26">machine</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:36">ram_size</name></name> <operator pos:start="105:38" pos:end="105:39">||</operator>

                    <call pos:start="107:21" pos:end="107:68"><name pos:start="107:21" pos:end="107:41">memory_region_present</name><argument_list pos:start="107:42" pos:end="107:68">(<argument pos:start="107:43" pos:end="107:61"><expr pos:start="107:43" pos:end="107:61"><call pos:start="107:43" pos:end="107:61"><name pos:start="107:43" pos:end="107:59">get_system_memory</name><argument_list pos:start="107:60" pos:end="107:61">()</argument_list></call></expr></argument>, <argument pos:start="107:64" pos:end="107:67"><expr pos:start="107:64" pos:end="107:67"><name pos:start="107:64" pos:end="107:67">addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:71" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:70">

            <expr_stmt pos:start="109:13" pos:end="109:70"><expr pos:start="109:13" pos:end="109:69"><name pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:26">dynamic_memory</name><index pos:start="109:27" pos:end="109:29">[<expr pos:start="109:28" pos:end="109:28"><literal type="number" pos:start="109:28" pos:end="109:28">5</literal></expr>]</index></name> <operator pos:start="109:31" pos:end="109:31">=</operator> <call pos:start="109:33" pos:end="109:69"><name pos:start="109:33" pos:end="109:43">cpu_to_be32</name><argument_list pos:start="109:44" pos:end="109:69">(<argument pos:start="109:45" pos:end="109:68"><expr pos:start="109:45" pos:end="109:68"><name pos:start="109:45" pos:end="109:68">SPAPR_LMB_FLAGS_ASSIGNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="111:11" pos:end="115:9">else <block pos:start="111:16" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:47">

            <expr_stmt pos:start="113:13" pos:end="113:47"><expr pos:start="113:13" pos:end="113:46"><name pos:start="113:13" pos:end="113:29"><name pos:start="113:13" pos:end="113:26">dynamic_memory</name><index pos:start="113:27" pos:end="113:29">[<expr pos:start="113:28" pos:end="113:28"><literal type="number" pos:start="113:28" pos:end="113:28">5</literal></expr>]</index></name> <operator pos:start="113:31" pos:end="113:31">=</operator> <call pos:start="113:33" pos:end="113:46"><name pos:start="113:33" pos:end="113:43">cpu_to_be32</name><argument_list pos:start="113:44" pos:end="113:46">(<argument pos:start="113:45" pos:end="113:45"><expr pos:start="113:45" pos:end="113:45"><literal type="number" pos:start="113:45" pos:end="113:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:50"><expr pos:start="119:9" pos:end="119:49"><name pos:start="119:9" pos:end="119:17">cur_index</name> <operator pos:start="119:19" pos:end="119:20">+=</operator> <name pos:start="119:22" pos:end="119:49">SPAPR_DR_LMB_LIST_ENTRY_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="123:5" pos:end="123:75"><expr pos:start="123:5" pos:end="123:74"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:74"><name pos:start="123:11" pos:end="123:21">fdt_setprop</name><argument_list pos:start="123:22" pos:end="123:74">(<argument pos:start="123:23" pos:end="123:25"><expr pos:start="123:23" pos:end="123:25"><name pos:start="123:23" pos:end="123:25">fdt</name></expr></argument>, <argument pos:start="123:28" pos:end="123:33"><expr pos:start="123:28" pos:end="123:33"><name pos:start="123:28" pos:end="123:33">offset</name></expr></argument>, <argument pos:start="123:36" pos:end="123:55"><expr pos:start="123:36" pos:end="123:55"><literal type="string" pos:start="123:36" pos:end="123:55">"ibm,dynamic-memory"</literal></expr></argument>, <argument pos:start="123:58" pos:end="123:64"><expr pos:start="123:58" pos:end="123:64"><name pos:start="123:58" pos:end="123:64">int_buf</name></expr></argument>, <argument pos:start="123:67" pos:end="123:73"><expr pos:start="123:67" pos:end="123:73"><name pos:start="123:67" pos:end="123:73">buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:16">(<expr pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">&lt;</operator> <literal type="number" pos:start="125:15" pos:end="125:15">0</literal></expr>)</condition> <block pos:start="125:18" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:17">

        <goto pos:start="127:9" pos:end="127:17">goto <name pos:start="127:14" pos:end="127:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:41">/* ibm,associativity-lookup-arrays */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:24"><expr pos:start="135:5" pos:end="135:23"><name pos:start="135:5" pos:end="135:13">cur_index</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:23">int_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:39"><expr pos:start="137:5" pos:end="137:38"><name pos:start="137:5" pos:end="137:14"><name pos:start="137:5" pos:end="137:11">int_buf</name><index pos:start="137:12" pos:end="137:14">[<expr pos:start="137:13" pos:end="137:13"><literal type="number" pos:start="137:13" pos:end="137:13">0</literal></expr>]</index></name> <operator pos:start="137:16" pos:end="137:16">=</operator> <call pos:start="137:18" pos:end="137:38"><name pos:start="137:18" pos:end="137:28">cpu_to_be32</name><argument_list pos:start="137:29" pos:end="137:38">(<argument pos:start="137:30" pos:end="137:37"><expr pos:start="137:30" pos:end="137:37"><name pos:start="137:30" pos:end="137:37">nr_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:32"><expr pos:start="139:5" pos:end="139:31"><name pos:start="139:5" pos:end="139:14"><name pos:start="139:5" pos:end="139:11">int_buf</name><index pos:start="139:12" pos:end="139:14">[<expr pos:start="139:13" pos:end="139:13"><literal type="number" pos:start="139:13" pos:end="139:13">1</literal></expr>]</index></name> <operator pos:start="139:16" pos:end="139:16">=</operator> <call pos:start="139:18" pos:end="139:31"><name pos:start="139:18" pos:end="139:28">cpu_to_be32</name><argument_list pos:start="139:29" pos:end="139:31">(<argument pos:start="139:30" pos:end="139:30"><expr pos:start="139:30" pos:end="139:30"><literal type="number" pos:start="139:30" pos:end="139:30">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="139:34" pos:end="139:79">/* Number of entries per associativity list */</comment>

    <expr_stmt pos:start="141:5" pos:end="141:19"><expr pos:start="141:5" pos:end="141:18"><name pos:start="141:5" pos:end="141:13">cur_index</name> <operator pos:start="141:15" pos:end="141:16">+=</operator> <literal type="number" pos:start="141:18" pos:end="141:18">2</literal></expr>;</expr_stmt>

    <for pos:start="143:5" pos:end="161:5">for <control pos:start="143:9" pos:end="143:34">(<init pos:start="143:10" pos:end="143:15"><expr pos:start="143:10" pos:end="143:14"><name pos:start="143:10" pos:end="143:10">i</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <literal type="number" pos:start="143:14" pos:end="143:14">0</literal></expr>;</init> <condition pos:start="143:17" pos:end="143:29"><expr pos:start="143:17" pos:end="143:28"><name pos:start="143:17" pos:end="143:17">i</name> <operator pos:start="143:19" pos:end="143:19">&lt;</operator> <name pos:start="143:21" pos:end="143:28">nr_nodes</name></expr>;</condition> <incr pos:start="143:31" pos:end="143:33"><expr pos:start="143:31" pos:end="143:33"><name pos:start="143:31" pos:end="143:31">i</name><operator pos:start="143:32" pos:end="143:33">++</operator></expr></incr>)</control> <block pos:start="143:36" pos:end="161:5">{<block_content pos:start="145:9" pos:end="159:23">

        <decl_stmt pos:start="145:9" pos:end="155:10"><decl pos:start="145:9" pos:end="155:9"><type pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:16">uint32_t</name></type> <name pos:start="145:18" pos:end="145:32"><name pos:start="145:18" pos:end="145:30">associativity</name><index pos:start="145:31" pos:end="145:32">[]</index></name> <init pos:start="145:34" pos:end="155:9">= <expr pos:start="145:36" pos:end="155:9"><block pos:start="145:36" pos:end="155:9">{

            <expr pos:start="147:13" pos:end="147:28"><call pos:start="147:13" pos:end="147:28"><name pos:start="147:13" pos:end="147:23">cpu_to_be32</name><argument_list pos:start="147:24" pos:end="147:28">(<argument pos:start="147:25" pos:end="147:27"><expr pos:start="147:25" pos:end="147:27"><literal type="number" pos:start="147:25" pos:end="147:27">0x0</literal></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="149:13" pos:end="149:28"><call pos:start="149:13" pos:end="149:28"><name pos:start="149:13" pos:end="149:23">cpu_to_be32</name><argument_list pos:start="149:24" pos:end="149:28">(<argument pos:start="149:25" pos:end="149:27"><expr pos:start="149:25" pos:end="149:27"><literal type="number" pos:start="149:25" pos:end="149:27">0x0</literal></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="151:13" pos:end="151:28"><call pos:start="151:13" pos:end="151:28"><name pos:start="151:13" pos:end="151:23">cpu_to_be32</name><argument_list pos:start="151:24" pos:end="151:28">(<argument pos:start="151:25" pos:end="151:27"><expr pos:start="151:25" pos:end="151:27"><literal type="number" pos:start="151:25" pos:end="151:27">0x0</literal></expr></argument>)</argument_list></call></expr>,

            <macro pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:23">cpu_to_be32</name><argument_list pos:start="153:24" pos:end="153:26">(<argument pos:start="153:25" pos:end="153:25">i</argument>)</argument_list></macro>

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:64"><expr pos:start="157:9" pos:end="157:63"><call pos:start="157:9" pos:end="157:63"><name pos:start="157:9" pos:end="157:14">memcpy</name><argument_list pos:start="157:15" pos:end="157:63">(<argument pos:start="157:16" pos:end="157:24"><expr pos:start="157:16" pos:end="157:24"><name pos:start="157:16" pos:end="157:24">cur_index</name></expr></argument>, <argument pos:start="157:27" pos:end="157:39"><expr pos:start="157:27" pos:end="157:39"><name pos:start="157:27" pos:end="157:39">associativity</name></expr></argument>, <argument pos:start="157:42" pos:end="157:62"><expr pos:start="157:42" pos:end="157:62"><sizeof pos:start="157:42" pos:end="157:62">sizeof<argument_list pos:start="157:48" pos:end="157:62">(<argument pos:start="157:49" pos:end="157:61"><expr pos:start="157:49" pos:end="157:61"><name pos:start="157:49" pos:end="157:61">associativity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:23"><expr pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:17">cur_index</name> <operator pos:start="159:19" pos:end="159:20">+=</operator> <literal type="number" pos:start="159:22" pos:end="159:22">4</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="163:5" pos:end="165:54"><expr pos:start="163:5" pos:end="165:53"><name pos:start="163:5" pos:end="163:7">ret</name> <operator pos:start="163:9" pos:end="163:9">=</operator> <call pos:start="163:11" pos:end="165:53"><name pos:start="163:11" pos:end="163:21">fdt_setprop</name><argument_list pos:start="163:22" pos:end="165:53">(<argument pos:start="163:23" pos:end="163:25"><expr pos:start="163:23" pos:end="163:25"><name pos:start="163:23" pos:end="163:25">fdt</name></expr></argument>, <argument pos:start="163:28" pos:end="163:33"><expr pos:start="163:28" pos:end="163:33"><name pos:start="163:28" pos:end="163:33">offset</name></expr></argument>, <argument pos:start="163:36" pos:end="163:68"><expr pos:start="163:36" pos:end="163:68"><literal type="string" pos:start="163:36" pos:end="163:68">"ibm,associativity-lookup-arrays"</literal></expr></argument>, <argument pos:start="163:71" pos:end="163:77"><expr pos:start="163:71" pos:end="163:77"><name pos:start="163:71" pos:end="163:77">int_buf</name></expr></argument>,

            <argument pos:start="165:13" pos:end="165:52"><expr pos:start="165:13" pos:end="165:52"><operator pos:start="165:13" pos:end="165:13">(</operator><name pos:start="165:14" pos:end="165:22">cur_index</name> <operator pos:start="165:24" pos:end="165:24">-</operator> <name pos:start="165:26" pos:end="165:32">int_buf</name><operator pos:start="165:33" pos:end="165:33">)</operator> <operator pos:start="165:35" pos:end="165:35">*</operator> <sizeof pos:start="165:37" pos:end="165:52">sizeof<argument_list pos:start="165:43" pos:end="165:52">(<argument pos:start="165:44" pos:end="165:51"><expr pos:start="165:44" pos:end="165:51"><name pos:start="165:44" pos:end="165:51">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="167:1" pos:end="167:4"><name pos:start="167:1" pos:end="167:3">out</name>:</label>

    <expr_stmt pos:start="169:5" pos:end="169:20"><expr pos:start="169:5" pos:end="169:19"><call pos:start="169:5" pos:end="169:19"><name pos:start="169:5" pos:end="169:10">g_free</name><argument_list pos:start="169:11" pos:end="169:19">(<argument pos:start="169:12" pos:end="169:18"><expr pos:start="169:12" pos:end="169:18"><name pos:start="169:12" pos:end="169:18">int_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="171:5" pos:end="171:15">return <expr pos:start="171:12" pos:end="171:14"><name pos:start="171:12" pos:end="171:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
