<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22386.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:10">AVRational</name></type> <name pos:start="1:12" pos:end="1:17">av_d2q</name><parameter_list pos:start="1:18" pos:end="1:36">(<parameter pos:start="1:19" pos:end="1:26"><decl pos:start="1:19" pos:end="1:26"><type pos:start="1:19" pos:end="1:26"><name pos:start="1:19" pos:end="1:24">double</name></type> <name pos:start="1:26" pos:end="1:26">d</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:35"><decl pos:start="1:29" pos:end="1:35"><type pos:start="1:29" pos:end="1:35"><name pos:start="1:29" pos:end="1:31">int</name></type> <name pos:start="1:33" pos:end="1:35">max</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="5:5" pos:end="29:13">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">AVRational</name></type> <name pos:start="5:16" pos:end="5:16">a</name></decl>;</decl_stmt>

<cpp:define pos:start="7:1" pos:end="7:66">#<cpp:directive pos:start="7:2" pos:end="7:7">define</cpp:directive> <cpp:macro pos:start="7:9" pos:end="7:12"><name pos:start="7:9" pos:end="7:12">LOG2</name></cpp:macro>  <cpp:value pos:start="7:15" pos:end="7:66">0.69314718055994530941723212145817656807550013436025</cpp:value></cpp:define>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">exponent</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:15">den</name></decl>;</decl_stmt>

    <if_stmt pos:start="13:5" pos:end="15:36"><if pos:start="13:5" pos:end="15:36">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><call pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:13">isnan</name><argument_list pos:start="13:14" pos:end="13:16">(<argument pos:start="13:15" pos:end="13:15"><expr pos:start="13:15" pos:end="13:15"><name pos:start="13:15" pos:end="13:15">d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:36"><block_content pos:start="15:9" pos:end="15:36">

        <return pos:start="15:9" pos:end="15:36">return <expr pos:start="15:16" pos:end="15:35"><operator pos:start="15:16" pos:end="15:16">(</operator><name pos:start="15:17" pos:end="15:26">AVRational</name><operator pos:start="15:27" pos:end="15:27">)</operator> <block pos:start="15:29" pos:end="15:35">{ <expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr>,<expr pos:start="15:33" pos:end="15:33"><literal type="number" pos:start="15:33" pos:end="15:33">0</literal></expr> }</block></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="19:50"><if pos:start="17:5" pos:end="19:50">if <condition pos:start="17:8" pos:end="17:17">(<expr pos:start="17:9" pos:end="17:16"><call pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:13">isinf</name><argument_list pos:start="17:14" pos:end="17:16">(<argument pos:start="17:15" pos:end="17:15"><expr pos:start="17:15" pos:end="17:15"><name pos:start="17:15" pos:end="17:15">d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:50"><block_content pos:start="19:9" pos:end="19:50">

        <return pos:start="19:9" pos:end="19:50">return <expr pos:start="19:16" pos:end="19:49"><operator pos:start="19:16" pos:end="19:16">(</operator><name pos:start="19:17" pos:end="19:26">AVRational</name><operator pos:start="19:27" pos:end="19:27">)</operator> <block pos:start="19:29" pos:end="19:49">{ <expr pos:start="19:31" pos:end="19:44"><name pos:start="19:31" pos:end="19:31">d</name> <operator pos:start="19:33" pos:end="19:33">&lt;</operator> <literal type="number" pos:start="19:35" pos:end="19:35">0</literal> <operator pos:start="19:37" pos:end="19:37">?</operator> <operator pos:start="19:39" pos:end="19:39">-</operator><literal type="number" pos:start="19:40" pos:end="19:40">1</literal> <operator pos:start="19:42" pos:end="19:42">:</operator> <literal type="number" pos:start="19:44" pos:end="19:44">1</literal></expr>, <expr pos:start="19:47" pos:end="19:47"><literal type="number" pos:start="19:47" pos:end="19:47">0</literal></expr> }</block></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:59"><expr pos:start="21:5" pos:end="21:58"><name pos:start="21:5" pos:end="21:12">exponent</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:58"><name pos:start="21:16" pos:end="21:20">FFMAX</name><argument_list pos:start="21:21" pos:end="21:58">( <argument pos:start="21:23" pos:end="21:54"><expr pos:start="21:23" pos:end="21:54"><operator pos:start="21:23" pos:end="21:23">(</operator><name pos:start="21:24" pos:end="21:26">int</name><operator pos:start="21:27" pos:end="21:27">)</operator><operator pos:start="21:28" pos:end="21:28">(</operator><call pos:start="21:29" pos:end="21:48"><name pos:start="21:29" pos:end="21:31">log</name><argument_list pos:start="21:32" pos:end="21:48">(<argument pos:start="21:33" pos:end="21:47"><expr pos:start="21:33" pos:end="21:47"><call pos:start="21:33" pos:end="21:39"><name pos:start="21:33" pos:end="21:36">fabs</name><argument_list pos:start="21:37" pos:end="21:39">(<argument pos:start="21:38" pos:end="21:38"><expr pos:start="21:38" pos:end="21:38"><name pos:start="21:38" pos:end="21:38">d</name></expr></argument>)</argument_list></call> <operator pos:start="21:41" pos:end="21:41">+</operator> <literal type="number" pos:start="21:43" pos:end="21:47">1e-20</literal></expr></argument>)</argument_list></call><operator pos:start="21:49" pos:end="21:49">/</operator><name pos:start="21:50" pos:end="21:53">LOG2</name><operator pos:start="21:54" pos:end="21:54">)</operator></expr></argument>, <argument pos:start="21:57" pos:end="21:57"><expr pos:start="21:57" pos:end="21:57"><literal type="number" pos:start="21:57" pos:end="21:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:7">den</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <literal type="number" pos:start="23:11" pos:end="23:13">1LL</literal> <operator pos:start="23:15" pos:end="23:16">&lt;&lt;</operator> <operator pos:start="23:18" pos:end="23:18">(</operator><literal type="number" pos:start="23:19" pos:end="23:22">61</literal> <operator pos:start="23:22" pos:end="23:22">-</operator> <name pos:start="23:24" pos:end="23:31">exponent</name><operator pos:start="23:32" pos:end="23:32">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:66"><expr pos:start="25:5" pos:end="25:65"><call pos:start="25:5" pos:end="25:65"><name pos:start="25:5" pos:end="25:13">av_reduce</name><argument_list pos:start="25:14" pos:end="25:65">(<argument pos:start="25:15" pos:end="25:20"><expr pos:start="25:15" pos:end="25:20"><operator pos:start="25:15" pos:end="25:15">&amp;</operator><name pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:16">a</name><operator pos:start="25:17" pos:end="25:17">.</operator><name pos:start="25:18" pos:end="25:20">num</name></name></expr></argument>, <argument pos:start="25:23" pos:end="25:28"><expr pos:start="25:23" pos:end="25:28"><operator pos:start="25:23" pos:end="25:23">&amp;</operator><name pos:start="25:24" pos:end="25:28"><name pos:start="25:24" pos:end="25:24">a</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:28">den</name></name></expr></argument>, <argument pos:start="25:31" pos:end="25:54"><expr pos:start="25:31" pos:end="25:54"><operator pos:start="25:31" pos:end="25:31">(</operator><name pos:start="25:32" pos:end="25:38">int64_t</name><operator pos:start="25:39" pos:end="25:39">)</operator><operator pos:start="25:40" pos:end="25:40">(</operator><name pos:start="25:41" pos:end="25:41">d</name> <operator pos:start="25:43" pos:end="25:43">*</operator> <name pos:start="25:45" pos:end="25:47">den</name> <operator pos:start="25:49" pos:end="25:49">+</operator> <literal type="number" pos:start="25:51" pos:end="25:53">0.5</literal><operator pos:start="25:54" pos:end="25:54">)</operator></expr></argument>, <argument pos:start="25:57" pos:end="25:59"><expr pos:start="25:57" pos:end="25:59"><name pos:start="25:57" pos:end="25:59">den</name></expr></argument>, <argument pos:start="25:62" pos:end="25:64"><expr pos:start="25:62" pos:end="25:64"><name pos:start="25:62" pos:end="25:64">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="29:5" pos:end="29:13">return <expr pos:start="29:12" pos:end="29:12"><name pos:start="29:12" pos:end="29:12">a</name></expr>;</return>

</block_content>}</block></function>
</unit>
