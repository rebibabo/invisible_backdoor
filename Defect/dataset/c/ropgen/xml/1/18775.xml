<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18775.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">htab_load</name><parameter_list pos:start="1:21" pos:end="1:63">(<parameter pos:start="1:22" pos:end="1:32"><decl pos:start="1:22" pos:end="1:32"><type pos:start="1:22" pos:end="1:32"><name pos:start="1:22" pos:end="1:29">QEMUFile</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:32">f</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:62">version_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">sPAPRMachineState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:28">spapr</name> <init pos:start="5:30" pos:end="5:37">= <expr pos:start="5:32" pos:end="5:37"><name pos:start="5:32" pos:end="5:37">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:24">section_hdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">fd</name> <init pos:start="9:12" pos:end="9:15">= <expr pos:start="9:14" pos:end="9:15"><operator pos:start="9:14" pos:end="9:14">-</operator><literal type="number" pos:start="9:15" pos:end="9:15">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:41">(<expr pos:start="13:9" pos:end="13:40"><name pos:start="13:9" pos:end="13:38"><name pos:start="13:9" pos:end="13:18">version_id</name> <argument_list type="generic" pos:start="13:20" pos:end="13:38">&lt; <argument pos:start="13:22" pos:end="13:36"><expr pos:start="13:22" pos:end="13:36"><literal type="number" pos:start="13:22" pos:end="13:22">1</literal> <operator pos:start="13:24" pos:end="13:25">||</operator> <name pos:start="13:27" pos:end="13:36">version_id</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="13:40" pos:end="13:40">1</literal></expr>)</condition> <block pos:start="13:43" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:23">

        <expr_stmt pos:start="15:9" pos:end="15:48"><expr pos:start="15:9" pos:end="15:47"><call pos:start="15:9" pos:end="15:47"><name pos:start="15:9" pos:end="15:20">error_report</name><argument_list pos:start="15:21" pos:end="15:47">(<argument pos:start="15:22" pos:end="15:46"><expr pos:start="15:22" pos:end="15:46"><literal type="string" pos:start="15:22" pos:end="15:46">"htab_load() bad version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:23">return <expr pos:start="17:16" pos:end="17:22"><operator pos:start="17:16" pos:end="17:16">-</operator><name pos:start="17:17" pos:end="17:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:35"><expr pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:15">section_hdr</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <call pos:start="23:19" pos:end="23:34"><name pos:start="23:19" pos:end="23:31">qemu_get_be32</name><argument_list pos:start="23:32" pos:end="23:34">(<argument pos:start="23:33" pos:end="23:33"><expr pos:start="23:33" pos:end="23:33"><name pos:start="23:33" pos:end="23:33">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="47:5"><if pos:start="27:5" pos:end="47:5">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:19">section_hdr</name></expr>)</condition> <block pos:start="27:22" pos:end="47:5">{<block_content pos:start="29:9" pos:end="45:17">

        <decl_stmt pos:start="29:9" pos:end="29:25"><decl pos:start="29:9" pos:end="29:24"><type pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:13">Error</name> <modifier pos:start="29:15" pos:end="29:15">*</modifier></type><name pos:start="29:16" pos:end="29:24">local_err</name></decl>;</decl_stmt>



        <comment type="block" pos:start="33:9" pos:end="33:47">/* First section gives the htab size */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:61"><expr pos:start="35:9" pos:end="35:60"><call pos:start="35:9" pos:end="35:60"><name pos:start="35:9" pos:end="35:28">spapr_reallocate_hpt</name><argument_list pos:start="35:29" pos:end="35:60">(<argument pos:start="35:30" pos:end="35:34"><expr pos:start="35:30" pos:end="35:34"><name pos:start="35:30" pos:end="35:34">spapr</name></expr></argument>, <argument pos:start="35:37" pos:end="35:47"><expr pos:start="35:37" pos:end="35:47"><name pos:start="35:37" pos:end="35:47">section_hdr</name></expr></argument>, <argument pos:start="35:50" pos:end="35:59"><expr pos:start="35:50" pos:end="35:59"><operator pos:start="35:50" pos:end="35:50">&amp;</operator><name pos:start="35:51" pos:end="35:59">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:22">(<expr pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:21">local_err</name></expr>)</condition> <block pos:start="37:24" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:27">

            <expr_stmt pos:start="39:13" pos:end="39:40"><expr pos:start="39:13" pos:end="39:39"><call pos:start="39:13" pos:end="39:39"><name pos:start="39:13" pos:end="39:28">error_report_err</name><argument_list pos:start="39:29" pos:end="39:39">(<argument pos:start="39:30" pos:end="39:38"><expr pos:start="39:30" pos:end="39:38"><name pos:start="39:30" pos:end="39:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:27">return <expr pos:start="41:20" pos:end="41:26"><operator pos:start="41:20" pos:end="41:20">-</operator><name pos:start="41:21" pos:end="41:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="67:5"><if pos:start="51:5" pos:end="67:5">if <condition pos:start="51:8" pos:end="51:21">(<expr pos:start="51:9" pos:end="51:20"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:20"><name pos:start="51:10" pos:end="51:14">spapr</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:20">htab</name></name></expr>)</condition> <block pos:start="51:23" pos:end="67:5">{<block_content pos:start="53:9" pos:end="65:9">

        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><call pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:14">assert</name><argument_list pos:start="53:15" pos:end="53:29">(<argument pos:start="53:16" pos:end="53:28"><expr pos:start="53:16" pos:end="53:28"><call pos:start="53:16" pos:end="53:28"><name pos:start="53:16" pos:end="53:26">kvm_enabled</name><argument_list pos:start="53:27" pos:end="53:28">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:10">fd</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:37"><name pos:start="57:14" pos:end="57:31">kvmppc_get_htab_fd</name><argument_list pos:start="57:32" pos:end="57:37">(<argument pos:start="57:33" pos:end="57:36"><expr pos:start="57:33" pos:end="57:36"><name pos:start="57:33" pos:end="57:36">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:19">(<expr pos:start="59:13" pos:end="59:18"><name pos:start="59:13" pos:end="59:14">fd</name> <operator pos:start="59:16" pos:end="59:16">&lt;</operator> <literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr>)</condition> <block pos:start="59:21" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:42">

            <expr_stmt pos:start="61:13" pos:end="63:42"><expr pos:start="61:13" pos:end="63:41"><call pos:start="61:13" pos:end="63:41"><name pos:start="61:13" pos:end="61:24">error_report</name><argument_list pos:start="61:25" pos:end="63:41">(<argument pos:start="61:26" pos:end="61:74"><expr pos:start="61:26" pos:end="61:74"><literal type="string" pos:start="61:26" pos:end="61:74">"Unable to open fd to restore KVM hash table: %s"</literal></expr></argument>,

                         <argument pos:start="63:26" pos:end="63:40"><expr pos:start="63:26" pos:end="63:40"><call pos:start="63:26" pos:end="63:40"><name pos:start="63:26" pos:end="63:33">strerror</name><argument_list pos:start="63:34" pos:end="63:40">(<argument pos:start="63:35" pos:end="63:39"><expr pos:start="63:35" pos:end="63:39"><name pos:start="63:35" pos:end="63:39">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="71:5" pos:end="153:5">while <condition pos:start="71:11" pos:end="71:16">(<expr pos:start="71:12" pos:end="71:15"><name pos:start="71:12" pos:end="71:15">true</name></expr>)</condition> <block pos:start="71:18" pos:end="153:5">{<block_content pos:start="73:9" pos:end="151:9">

        <decl_stmt pos:start="73:9" pos:end="73:23"><decl pos:start="73:9" pos:end="73:22"><type pos:start="73:9" pos:end="73:16"><name pos:start="73:9" pos:end="73:16">uint32_t</name></type> <name pos:start="73:18" pos:end="73:22">index</name></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:36"><decl pos:start="75:9" pos:end="75:24"><type pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:16">uint16_t</name></type> <name pos:start="75:18" pos:end="75:24">n_valid</name></decl>, <decl pos:start="75:27" pos:end="75:35"><type ref="prev" pos:start="75:9" pos:end="75:16"/><name pos:start="75:27" pos:end="75:35">n_invalid</name></decl>;</decl_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:13">index</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <call pos:start="79:17" pos:end="79:32"><name pos:start="79:17" pos:end="79:29">qemu_get_be32</name><argument_list pos:start="79:30" pos:end="79:32">(<argument pos:start="79:31" pos:end="79:31"><expr pos:start="79:31" pos:end="79:31"><name pos:start="79:31" pos:end="79:31">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:35"><expr pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:15">n_valid</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:34"><name pos:start="81:19" pos:end="81:31">qemu_get_be16</name><argument_list pos:start="81:32" pos:end="81:34">(<argument pos:start="81:33" pos:end="81:33"><expr pos:start="81:33" pos:end="81:33"><name pos:start="81:33" pos:end="81:33">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:37"><expr pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:17">n_invalid</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <call pos:start="83:21" pos:end="83:36"><name pos:start="83:21" pos:end="83:33">qemu_get_be16</name><argument_list pos:start="83:34" pos:end="83:36">(<argument pos:start="83:35" pos:end="83:35"><expr pos:start="83:35" pos:end="83:35"><name pos:start="83:35" pos:end="83:35">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:63">(<expr pos:start="87:13" pos:end="87:62"><operator pos:start="87:13" pos:end="87:13">(</operator><name pos:start="87:14" pos:end="87:18">index</name> <operator pos:start="87:20" pos:end="87:21">==</operator> <literal type="number" pos:start="87:23" pos:end="87:23">0</literal><operator pos:start="87:24" pos:end="87:24">)</operator> <operator pos:start="87:26" pos:end="87:27">&amp;&amp;</operator> <operator pos:start="87:29" pos:end="87:29">(</operator><name pos:start="87:30" pos:end="87:36">n_valid</name> <operator pos:start="87:38" pos:end="87:39">==</operator> <literal type="number" pos:start="87:41" pos:end="87:41">0</literal><operator pos:start="87:42" pos:end="87:42">)</operator> <operator pos:start="87:44" pos:end="87:45">&amp;&amp;</operator> <operator pos:start="87:47" pos:end="87:47">(</operator><name pos:start="87:48" pos:end="87:56">n_invalid</name> <operator pos:start="87:58" pos:end="87:59">==</operator> <literal type="number" pos:start="87:61" pos:end="87:61">0</literal><operator pos:start="87:62" pos:end="87:62">)</operator></expr>)</condition> <block pos:start="87:65" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:18">

            <comment type="block" pos:start="89:13" pos:end="89:31">/* End of Stream */</comment>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="97:9" pos:end="111:9"><if pos:start="97:9" pos:end="111:9">if <condition pos:start="97:12" pos:end="99:50">(<expr pos:start="97:13" pos:end="99:49"><operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:18">index</name> <operator pos:start="97:20" pos:end="97:20">+</operator> <name pos:start="97:22" pos:end="97:28">n_valid</name> <operator pos:start="97:30" pos:end="97:30">+</operator> <name pos:start="97:32" pos:end="97:40">n_invalid</name><operator pos:start="97:41" pos:end="97:41">)</operator> <operator pos:start="97:43" pos:end="97:43">&gt;</operator>

            <operator pos:start="99:13" pos:end="99:13">(</operator><call pos:start="99:14" pos:end="99:29"><name pos:start="99:14" pos:end="99:22">HTAB_SIZE</name><argument_list pos:start="99:23" pos:end="99:29">(<argument pos:start="99:24" pos:end="99:28"><expr pos:start="99:24" pos:end="99:28"><name pos:start="99:24" pos:end="99:28">spapr</name></expr></argument>)</argument_list></call> <operator pos:start="99:31" pos:end="99:31">/</operator> <name pos:start="99:33" pos:end="99:48">HASH_PTE_SIZE_64</name><operator pos:start="99:49" pos:end="99:49">)</operator></expr>)</condition> <block pos:start="99:52" pos:end="111:9">{<block_content pos:start="103:13" pos:end="109:27">

            <comment type="block" pos:start="101:13" pos:end="101:37">/* Bad index in stream */</comment>

            <expr_stmt pos:start="103:13" pos:end="107:62"><expr pos:start="103:13" pos:end="107:61"><call pos:start="103:13" pos:end="107:61"><name pos:start="103:13" pos:end="103:24">error_report</name><argument_list pos:start="103:25" pos:end="107:61">(

                <argument pos:start="105:17" pos:end="105:91"><expr pos:start="105:17" pos:end="105:91"><literal type="string" pos:start="105:17" pos:end="105:91">"htab_load() bad index %d (%hd+%hd entries) in htab stream (htab_shift=%d)"</literal></expr></argument>,

                <argument pos:start="107:17" pos:end="107:21"><expr pos:start="107:17" pos:end="107:21"><name pos:start="107:17" pos:end="107:21">index</name></expr></argument>, <argument pos:start="107:24" pos:end="107:30"><expr pos:start="107:24" pos:end="107:30"><name pos:start="107:24" pos:end="107:30">n_valid</name></expr></argument>, <argument pos:start="107:33" pos:end="107:41"><expr pos:start="107:33" pos:end="107:41"><name pos:start="107:33" pos:end="107:41">n_invalid</name></expr></argument>, <argument pos:start="107:44" pos:end="107:60"><expr pos:start="107:44" pos:end="107:60"><name pos:start="107:44" pos:end="107:60"><name pos:start="107:44" pos:end="107:48">spapr</name><operator pos:start="107:49" pos:end="107:50">-&gt;</operator><name pos:start="107:51" pos:end="107:60">htab_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:27">return <expr pos:start="109:20" pos:end="109:26"><operator pos:start="109:20" pos:end="109:20">-</operator><name pos:start="109:21" pos:end="109:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="115:9" pos:end="151:9"><if pos:start="115:9" pos:end="133:9">if <condition pos:start="115:12" pos:end="115:24">(<expr pos:start="115:13" pos:end="115:23"><name pos:start="115:13" pos:end="115:23"><name pos:start="115:13" pos:end="115:17">spapr</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:23">htab</name></name></expr>)</condition> <block pos:start="115:26" pos:end="133:9">{<block_content pos:start="117:13" pos:end="131:13">

            <if_stmt pos:start="117:13" pos:end="123:13"><if pos:start="117:13" pos:end="123:13">if <condition pos:start="117:16" pos:end="117:24">(<expr pos:start="117:17" pos:end="117:23"><name pos:start="117:17" pos:end="117:23">n_valid</name></expr>)</condition> <block pos:start="117:26" pos:end="123:13">{<block_content pos:start="119:17" pos:end="121:60">

                <expr_stmt pos:start="119:17" pos:end="121:60"><expr pos:start="119:17" pos:end="121:59"><call pos:start="119:17" pos:end="121:59"><name pos:start="119:17" pos:end="119:31">qemu_get_buffer</name><argument_list pos:start="119:32" pos:end="121:59">(<argument pos:start="119:33" pos:end="119:33"><expr pos:start="119:33" pos:end="119:33"><name pos:start="119:33" pos:end="119:33">f</name></expr></argument>, <argument pos:start="119:36" pos:end="119:59"><expr pos:start="119:36" pos:end="119:59"><call pos:start="119:36" pos:end="119:59"><name pos:start="119:36" pos:end="119:39">HPTE</name><argument_list pos:start="119:40" pos:end="119:59">(<argument pos:start="119:41" pos:end="119:51"><expr pos:start="119:41" pos:end="119:51"><name pos:start="119:41" pos:end="119:51"><name pos:start="119:41" pos:end="119:45">spapr</name><operator pos:start="119:46" pos:end="119:47">-&gt;</operator><name pos:start="119:48" pos:end="119:51">htab</name></name></expr></argument>, <argument pos:start="119:54" pos:end="119:58"><expr pos:start="119:54" pos:end="119:58"><name pos:start="119:54" pos:end="119:58">index</name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="121:33" pos:end="121:58"><expr pos:start="121:33" pos:end="121:58"><name pos:start="121:33" pos:end="121:48">HASH_PTE_SIZE_64</name> <operator pos:start="121:50" pos:end="121:50">*</operator> <name pos:start="121:52" pos:end="121:58">n_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="125:13" pos:end="131:13"><if pos:start="125:13" pos:end="131:13">if <condition pos:start="125:16" pos:end="125:26">(<expr pos:start="125:17" pos:end="125:25"><name pos:start="125:17" pos:end="125:25">n_invalid</name></expr>)</condition> <block pos:start="125:28" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:53">

                <expr_stmt pos:start="127:17" pos:end="129:53"><expr pos:start="127:17" pos:end="129:52"><call pos:start="127:17" pos:end="129:52"><name pos:start="127:17" pos:end="127:22">memset</name><argument_list pos:start="127:23" pos:end="129:52">(<argument pos:start="127:24" pos:end="127:57"><expr pos:start="127:24" pos:end="127:57"><call pos:start="127:24" pos:end="127:57"><name pos:start="127:24" pos:end="127:27">HPTE</name><argument_list pos:start="127:28" pos:end="127:57">(<argument pos:start="127:29" pos:end="127:39"><expr pos:start="127:29" pos:end="127:39"><name pos:start="127:29" pos:end="127:39"><name pos:start="127:29" pos:end="127:33">spapr</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:39">htab</name></name></expr></argument>, <argument pos:start="127:42" pos:end="127:56"><expr pos:start="127:42" pos:end="127:56"><name pos:start="127:42" pos:end="127:46">index</name> <operator pos:start="127:48" pos:end="127:48">+</operator> <name pos:start="127:50" pos:end="127:56">n_valid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="127:60" pos:end="127:60"><expr pos:start="127:60" pos:end="127:60"><literal type="number" pos:start="127:60" pos:end="127:60">0</literal></expr></argument>,

                       <argument pos:start="129:24" pos:end="129:51"><expr pos:start="129:24" pos:end="129:51"><name pos:start="129:24" pos:end="129:39">HASH_PTE_SIZE_64</name> <operator pos:start="129:41" pos:end="129:41">*</operator> <name pos:start="129:43" pos:end="129:51">n_invalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="133:11" pos:end="151:9">else <block pos:start="133:16" pos:end="151:9">{<block_content pos:start="135:13" pos:end="149:13">

            <decl_stmt pos:start="135:13" pos:end="135:19"><decl pos:start="135:13" pos:end="135:18"><type pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">int</name></type> <name pos:start="135:17" pos:end="135:18">rc</name></decl>;</decl_stmt>



            <expr_stmt pos:start="139:13" pos:end="139:28"><expr pos:start="139:13" pos:end="139:27"><call pos:start="139:13" pos:end="139:27"><name pos:start="139:13" pos:end="139:18">assert</name><argument_list pos:start="139:19" pos:end="139:27">(<argument pos:start="139:20" pos:end="139:26"><expr pos:start="139:20" pos:end="139:26"><name pos:start="139:20" pos:end="139:21">fd</name> <operator pos:start="139:23" pos:end="139:24">&gt;=</operator> <literal type="number" pos:start="139:26" pos:end="139:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="143:13" pos:end="143:74"><expr pos:start="143:13" pos:end="143:73"><name pos:start="143:13" pos:end="143:14">rc</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <call pos:start="143:18" pos:end="143:73"><name pos:start="143:18" pos:end="143:39">kvmppc_load_htab_chunk</name><argument_list pos:start="143:40" pos:end="143:73">(<argument pos:start="143:41" pos:end="143:41"><expr pos:start="143:41" pos:end="143:41"><name pos:start="143:41" pos:end="143:41">f</name></expr></argument>, <argument pos:start="143:44" pos:end="143:45"><expr pos:start="143:44" pos:end="143:45"><name pos:start="143:44" pos:end="143:45">fd</name></expr></argument>, <argument pos:start="143:48" pos:end="143:52"><expr pos:start="143:48" pos:end="143:52"><name pos:start="143:48" pos:end="143:52">index</name></expr></argument>, <argument pos:start="143:55" pos:end="143:61"><expr pos:start="143:55" pos:end="143:61"><name pos:start="143:55" pos:end="143:61">n_valid</name></expr></argument>, <argument pos:start="143:64" pos:end="143:72"><expr pos:start="143:64" pos:end="143:72"><name pos:start="143:64" pos:end="143:72">n_invalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="149:13"><if pos:start="145:13" pos:end="149:13">if <condition pos:start="145:16" pos:end="145:23">(<expr pos:start="145:17" pos:end="145:22"><name pos:start="145:17" pos:end="145:18">rc</name> <operator pos:start="145:20" pos:end="145:20">&lt;</operator> <literal type="number" pos:start="145:22" pos:end="145:22">0</literal></expr>)</condition> <block pos:start="145:25" pos:end="149:13">{<block_content pos:start="147:17" pos:end="147:26">

                <return pos:start="147:17" pos:end="147:26">return <expr pos:start="147:24" pos:end="147:25"><name pos:start="147:24" pos:end="147:25">rc</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:21">(<expr pos:start="157:9" pos:end="157:20"><operator pos:start="157:9" pos:end="157:9">!</operator><name pos:start="157:10" pos:end="157:20"><name pos:start="157:10" pos:end="157:14">spapr</name><operator pos:start="157:15" pos:end="157:16">-&gt;</operator><name pos:start="157:17" pos:end="157:20">htab</name></name></expr>)</condition> <block pos:start="157:23" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:18">

        <expr_stmt pos:start="159:9" pos:end="159:24"><expr pos:start="159:9" pos:end="159:23"><call pos:start="159:9" pos:end="159:23"><name pos:start="159:9" pos:end="159:14">assert</name><argument_list pos:start="159:15" pos:end="159:23">(<argument pos:start="159:16" pos:end="159:22"><expr pos:start="159:16" pos:end="159:22"><name pos:start="159:16" pos:end="159:17">fd</name> <operator pos:start="159:19" pos:end="159:20">&gt;=</operator> <literal type="number" pos:start="159:22" pos:end="159:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:18"><expr pos:start="161:9" pos:end="161:17"><call pos:start="161:9" pos:end="161:17"><name pos:start="161:9" pos:end="161:13">close</name><argument_list pos:start="161:14" pos:end="161:17">(<argument pos:start="161:15" pos:end="161:16"><expr pos:start="161:15" pos:end="161:16"><name pos:start="161:15" pos:end="161:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="167:5" pos:end="167:13">return <expr pos:start="167:12" pos:end="167:12"><literal type="number" pos:start="167:12" pos:end="167:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
