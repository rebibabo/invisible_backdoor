<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17763.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">msix_init</name><parameter_list pos:start="1:14" pos:end="7:71">(<parameter pos:start="1:15" pos:end="1:35"><decl pos:start="1:15" pos:end="1:35"><type pos:start="1:15" pos:end="1:35"><name pos:start="1:15" pos:end="1:30"><name pos:start="1:15" pos:end="1:20">struct</name> <name pos:start="1:22" pos:end="1:30">PCIDevice</name></name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">dev</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:60"><decl pos:start="1:38" pos:end="1:60"><type pos:start="1:38" pos:end="1:60"><name pos:start="1:38" pos:end="1:45">unsigned</name> <name pos:start="1:47" pos:end="1:51">short</name></type> <name pos:start="1:53" pos:end="1:60">nentries</name></decl></parameter>,

              <parameter pos:start="3:15" pos:end="3:37"><decl pos:start="3:15" pos:end="3:37"><type pos:start="3:15" pos:end="3:37"><name pos:start="3:15" pos:end="3:26">MemoryRegion</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:37">table_bar</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:59"><decl pos:start="3:40" pos:end="3:59"><type pos:start="3:40" pos:end="3:59"><name pos:start="3:40" pos:end="3:46">uint8_t</name></type> <name pos:start="3:48" pos:end="3:59">table_bar_nr</name></decl></parameter>,

              <parameter pos:start="5:15" pos:end="5:35"><decl pos:start="5:15" pos:end="5:35"><type pos:start="5:15" pos:end="5:35"><name pos:start="5:15" pos:end="5:22">unsigned</name></type> <name pos:start="5:24" pos:end="5:35">table_offset</name></decl></parameter>, <parameter pos:start="5:38" pos:end="5:58"><decl pos:start="5:38" pos:end="5:58"><type pos:start="5:38" pos:end="5:58"><name pos:start="5:38" pos:end="5:49">MemoryRegion</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier></type><name pos:start="5:52" pos:end="5:58">pba_bar</name></decl></parameter>,

              <parameter pos:start="7:15" pos:end="7:32"><decl pos:start="7:15" pos:end="7:32"><type pos:start="7:15" pos:end="7:32"><name pos:start="7:15" pos:end="7:21">uint8_t</name></type> <name pos:start="7:23" pos:end="7:32">pba_bar_nr</name></decl></parameter>, <parameter pos:start="7:35" pos:end="7:53"><decl pos:start="7:35" pos:end="7:53"><type pos:start="7:35" pos:end="7:53"><name pos:start="7:35" pos:end="7:42">unsigned</name></type> <name pos:start="7:44" pos:end="7:53">pba_offset</name></decl></parameter>, <parameter pos:start="7:56" pos:end="7:70"><decl pos:start="7:56" pos:end="7:70"><type pos:start="7:56" pos:end="7:70"><name pos:start="7:56" pos:end="7:62">uint8_t</name></type> <name pos:start="7:64" pos:end="7:70">cap_pos</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="129:1">{<block_content pos:start="11:5" pos:end="127:13">

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:23">table_size</name></decl>, <decl pos:start="13:26" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:26" pos:end="13:33">pba_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:19">config</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:71">/* Nothing to do if MSI is not supported by interrupt controller */</comment>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:23">(<expr pos:start="21:9" pos:end="21:22"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:22">msi_nonbroken</name></expr>)</condition> <block pos:start="21:25" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:24">

        <return pos:start="23:9" pos:end="23:24">return <expr pos:start="23:16" pos:end="23:23"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:60">(<expr pos:start="29:9" pos:end="29:59"><name pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:16">nentries</name> <argument_list type="generic" pos:start="29:18" pos:end="29:34">&lt; <argument pos:start="29:20" pos:end="29:32"><expr pos:start="29:20" pos:end="29:32"><literal type="number" pos:start="29:20" pos:end="29:20">1</literal> <operator pos:start="29:22" pos:end="29:23">||</operator> <name pos:start="29:25" pos:end="29:32">nentries</name></expr></argument> &gt;</argument_list></name> <name pos:start="29:36" pos:end="29:55">PCI_MSIX_FLAGS_QSIZE</name> <operator pos:start="29:57" pos:end="29:57">+</operator> <literal type="number" pos:start="29:59" pos:end="29:59">1</literal></expr>)</condition> <block pos:start="29:62" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:23">

        <return pos:start="31:9" pos:end="31:23">return <expr pos:start="31:16" pos:end="31:22"><operator pos:start="31:16" pos:end="31:16">-</operator><name pos:start="31:17" pos:end="31:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:14">table_size</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:25">nentries</name> <operator pos:start="37:27" pos:end="37:27">*</operator> <name pos:start="37:29" pos:end="37:47">PCI_MSIX_ENTRY_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:47"><expr pos:start="39:5" pos:end="39:46"><name pos:start="39:5" pos:end="39:12">pba_size</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:42"><name pos:start="39:16" pos:end="39:28">QEMU_ALIGN_UP</name><argument_list pos:start="39:29" pos:end="39:42">(<argument pos:start="39:30" pos:end="39:37"><expr pos:start="39:30" pos:end="39:37"><name pos:start="39:30" pos:end="39:37">nentries</name></expr></argument>, <argument pos:start="39:40" pos:end="39:41"><expr pos:start="39:40" pos:end="39:41"><literal type="number" pos:start="39:40" pos:end="39:41">64</literal></expr></argument>)</argument_list></call> <operator pos:start="39:44" pos:end="39:44">/</operator> <literal type="number" pos:start="39:46" pos:end="39:46">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:78">/* Sanity test: table &amp; pba don't overlap, fit within BARs, min aligned */</comment>

    <if_stmt pos:start="45:5" pos:end="57:5"><if pos:start="45:5" pos:end="57:5">if <condition pos:start="45:8" pos:end="53:61">(<expr pos:start="45:9" pos:end="53:60"><operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:21">table_bar_nr</name> <operator pos:start="45:23" pos:end="45:24">==</operator> <name pos:start="45:26" pos:end="45:35">pba_bar_nr</name> <operator pos:start="45:37" pos:end="45:38">&amp;&amp;</operator>

         <call pos:start="47:10" pos:end="47:71"><name pos:start="47:10" pos:end="47:23">ranges_overlap</name><argument_list pos:start="47:24" pos:end="47:71">(<argument pos:start="47:25" pos:end="47:36"><expr pos:start="47:25" pos:end="47:36"><name pos:start="47:25" pos:end="47:36">table_offset</name></expr></argument>, <argument pos:start="47:39" pos:end="47:48"><expr pos:start="47:39" pos:end="47:48"><name pos:start="47:39" pos:end="47:48">table_size</name></expr></argument>, <argument pos:start="47:51" pos:end="47:60"><expr pos:start="47:51" pos:end="47:60"><name pos:start="47:51" pos:end="47:60">pba_offset</name></expr></argument>, <argument pos:start="47:63" pos:end="47:70"><expr pos:start="47:63" pos:end="47:70"><name pos:start="47:63" pos:end="47:70">pba_size</name></expr></argument>)</argument_list></call><operator pos:start="47:72" pos:end="47:72">)</operator> <operator pos:start="47:74" pos:end="47:75">||</operator>

        <name pos:start="49:9" pos:end="49:20">table_offset</name> <operator pos:start="49:22" pos:end="49:22">+</operator> <name pos:start="49:24" pos:end="49:33">table_size</name> <operator pos:start="49:35" pos:end="49:35">&gt;</operator> <call pos:start="49:37" pos:end="49:65"><name pos:start="49:37" pos:end="49:54">memory_region_size</name><argument_list pos:start="49:55" pos:end="49:65">(<argument pos:start="49:56" pos:end="49:64"><expr pos:start="49:56" pos:end="49:64"><name pos:start="49:56" pos:end="49:64">table_bar</name></expr></argument>)</argument_list></call> <operator pos:start="49:67" pos:end="49:68">||</operator>

        <name pos:start="51:9" pos:end="51:18">pba_offset</name> <operator pos:start="51:20" pos:end="51:20">+</operator> <name pos:start="51:22" pos:end="51:29">pba_size</name> <operator pos:start="51:31" pos:end="51:31">&gt;</operator> <call pos:start="51:33" pos:end="51:59"><name pos:start="51:33" pos:end="51:50">memory_region_size</name><argument_list pos:start="51:51" pos:end="51:59">(<argument pos:start="51:52" pos:end="51:58"><expr pos:start="51:52" pos:end="51:58"><name pos:start="51:52" pos:end="51:58">pba_bar</name></expr></argument>)</argument_list></call> <operator pos:start="51:61" pos:end="51:62">||</operator>

        <operator pos:start="53:9" pos:end="53:9">(</operator><name pos:start="53:10" pos:end="53:21">table_offset</name> <operator pos:start="53:23" pos:end="53:23">|</operator> <name pos:start="53:25" pos:end="53:34">pba_offset</name><operator pos:start="53:35" pos:end="53:35">)</operator> <operator pos:start="53:37" pos:end="53:37">&amp;</operator> <name pos:start="53:39" pos:end="53:60">PCI_MSIX_FLAGS_BIRMASK</name></expr>)</condition> <block pos:start="53:63" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:23">

        <return pos:start="55:9" pos:end="55:23">return <expr pos:start="55:16" pos:end="55:22"><operator pos:start="55:16" pos:end="55:16">-</operator><name pos:start="55:17" pos:end="55:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:77"><expr pos:start="61:5" pos:end="61:76"><name pos:start="61:5" pos:end="61:7">cap</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:76"><name pos:start="61:11" pos:end="61:28">pci_add_capability</name><argument_list pos:start="61:29" pos:end="61:76">(<argument pos:start="61:30" pos:end="61:32"><expr pos:start="61:30" pos:end="61:32"><name pos:start="61:30" pos:end="61:32">dev</name></expr></argument>, <argument pos:start="61:35" pos:end="61:49"><expr pos:start="61:35" pos:end="61:49"><name pos:start="61:35" pos:end="61:49">PCI_CAP_ID_MSIX</name></expr></argument>, <argument pos:start="61:52" pos:end="61:58"><expr pos:start="61:52" pos:end="61:58"><name pos:start="61:52" pos:end="61:58">cap_pos</name></expr></argument>, <argument pos:start="61:61" pos:end="61:75"><expr pos:start="61:61" pos:end="61:75"><name pos:start="61:61" pos:end="61:75">MSIX_CAP_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">cap</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:19">

        <return pos:start="65:9" pos:end="65:19">return <expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">cap</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:24"><expr pos:start="71:5" pos:end="71:23"><name pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:7">dev</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:17">msix_cap</name></name> <operator pos:start="71:19" pos:end="71:19">=</operator> <name pos:start="71:21" pos:end="71:23">cap</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:42"><expr pos:start="73:5" pos:end="73:41"><name pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:7">dev</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:20">cap_present</name></name> <operator pos:start="73:22" pos:end="73:23">|=</operator> <name pos:start="73:25" pos:end="73:41">QEMU_PCI_CAP_MSIX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:10">config</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:24"><name pos:start="75:14" pos:end="75:16">dev</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:24">config</name></name> <operator pos:start="75:26" pos:end="75:26">+</operator> <name pos:start="75:28" pos:end="75:30">cap</name></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:56"><expr pos:start="79:5" pos:end="79:55"><call pos:start="79:5" pos:end="79:55"><name pos:start="79:5" pos:end="79:16">pci_set_word</name><argument_list pos:start="79:17" pos:end="79:55">(<argument pos:start="79:18" pos:end="79:40"><expr pos:start="79:18" pos:end="79:40"><name pos:start="79:18" pos:end="79:23">config</name> <operator pos:start="79:25" pos:end="79:25">+</operator> <name pos:start="79:27" pos:end="79:40">PCI_MSIX_FLAGS</name></expr></argument>, <argument pos:start="79:43" pos:end="79:54"><expr pos:start="79:43" pos:end="79:54"><name pos:start="79:43" pos:end="79:50">nentries</name> <operator pos:start="79:52" pos:end="79:52">-</operator> <literal type="number" pos:start="79:54" pos:end="79:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:36"><expr pos:start="81:5" pos:end="81:35"><name pos:start="81:5" pos:end="81:24"><name pos:start="81:5" pos:end="81:7">dev</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:24">msix_entries_nr</name></name> <operator pos:start="81:26" pos:end="81:26">=</operator> <name pos:start="81:28" pos:end="81:35">nentries</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:37"><expr pos:start="83:5" pos:end="83:36"><name pos:start="83:5" pos:end="83:29"><name pos:start="83:5" pos:end="83:7">dev</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:29">msix_function_masked</name></name> <operator pos:start="83:31" pos:end="83:31">=</operator> <name pos:start="83:33" pos:end="83:36">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:71"><expr pos:start="87:5" pos:end="87:70"><call pos:start="87:5" pos:end="87:70"><name pos:start="87:5" pos:end="87:16">pci_set_long</name><argument_list pos:start="87:17" pos:end="87:70">(<argument pos:start="87:18" pos:end="87:40"><expr pos:start="87:18" pos:end="87:40"><name pos:start="87:18" pos:end="87:23">config</name> <operator pos:start="87:25" pos:end="87:25">+</operator> <name pos:start="87:27" pos:end="87:40">PCI_MSIX_TABLE</name></expr></argument>, <argument pos:start="87:43" pos:end="87:69"><expr pos:start="87:43" pos:end="87:69"><name pos:start="87:43" pos:end="87:54">table_offset</name> <operator pos:start="87:56" pos:end="87:56">|</operator> <name pos:start="87:58" pos:end="87:69">table_bar_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:65"><expr pos:start="89:5" pos:end="89:64"><call pos:start="89:5" pos:end="89:64"><name pos:start="89:5" pos:end="89:16">pci_set_long</name><argument_list pos:start="89:17" pos:end="89:64">(<argument pos:start="89:18" pos:end="89:38"><expr pos:start="89:18" pos:end="89:38"><name pos:start="89:18" pos:end="89:23">config</name> <operator pos:start="89:25" pos:end="89:25">+</operator> <name pos:start="89:27" pos:end="89:38">PCI_MSIX_PBA</name></expr></argument>, <argument pos:start="89:41" pos:end="89:63"><expr pos:start="89:41" pos:end="89:63"><name pos:start="89:41" pos:end="89:50">pba_offset</name> <operator pos:start="89:52" pos:end="89:52">|</operator> <name pos:start="89:54" pos:end="89:63">pba_bar_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:34">/* Make flags bit writable. */</comment>

    <expr_stmt pos:start="95:5" pos:end="97:63"><expr pos:start="95:5" pos:end="97:62"><name pos:start="95:5" pos:end="95:41"><name pos:start="95:5" pos:end="95:7">dev</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:14">wmask</name><index pos:start="95:15" pos:end="95:41">[<expr pos:start="95:16" pos:end="95:40"><name pos:start="95:16" pos:end="95:18">cap</name> <operator pos:start="95:20" pos:end="95:20">+</operator> <name pos:start="95:22" pos:end="95:40">MSIX_CONTROL_OFFSET</name></expr>]</index></name> <operator pos:start="95:43" pos:end="95:44">|=</operator> <name pos:start="95:46" pos:end="95:61">MSIX_ENABLE_MASK</name> <operator pos:start="95:63" pos:end="95:63">|</operator>

                                             <name pos:start="97:46" pos:end="97:62">MSIX_MASKALL_MASK</name></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:44"><expr pos:start="101:5" pos:end="101:43"><name pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:7">dev</name><operator pos:start="101:8" pos:end="101:9">-&gt;</operator><name pos:start="101:10" pos:end="101:19">msix_table</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <call pos:start="101:23" pos:end="101:43"><name pos:start="101:23" pos:end="101:31">g_malloc0</name><argument_list pos:start="101:32" pos:end="101:43">(<argument pos:start="101:33" pos:end="101:42"><expr pos:start="101:33" pos:end="101:42"><name pos:start="101:33" pos:end="101:42">table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:40"><expr pos:start="103:5" pos:end="103:39"><name pos:start="103:5" pos:end="103:17"><name pos:start="103:5" pos:end="103:7">dev</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:17">msix_pba</name></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <call pos:start="103:21" pos:end="103:39"><name pos:start="103:21" pos:end="103:29">g_malloc0</name><argument_list pos:start="103:30" pos:end="103:39">(<argument pos:start="103:31" pos:end="103:38"><expr pos:start="103:31" pos:end="103:38"><name pos:start="103:31" pos:end="103:38">pba_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:78"><expr pos:start="105:5" pos:end="105:77"><name pos:start="105:5" pos:end="105:24"><name pos:start="105:5" pos:end="105:7">dev</name><operator pos:start="105:8" pos:end="105:9">-&gt;</operator><name pos:start="105:10" pos:end="105:24">msix_entry_used</name></name> <operator pos:start="105:26" pos:end="105:26">=</operator> <call pos:start="105:28" pos:end="105:77"><name pos:start="105:28" pos:end="105:36">g_malloc0</name><argument_list pos:start="105:37" pos:end="105:77">(<argument pos:start="105:38" pos:end="105:76"><expr pos:start="105:38" pos:end="105:76"><name pos:start="105:38" pos:end="105:45">nentries</name> <operator pos:start="105:47" pos:end="105:47">*</operator> <sizeof pos:start="105:49" pos:end="105:54">sizeof <name/></sizeof>*<name pos:start="105:57" pos:end="105:76"><name pos:start="105:57" pos:end="105:59">dev</name><operator pos:start="105:60" pos:end="105:61">-&gt;</operator><name pos:start="105:62" pos:end="105:76">msix_entry_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:33"><expr pos:start="109:5" pos:end="109:32"><call pos:start="109:5" pos:end="109:32"><name pos:start="109:5" pos:end="109:17">msix_mask_all</name><argument_list pos:start="109:18" pos:end="109:32">(<argument pos:start="109:19" pos:end="109:21"><expr pos:start="109:19" pos:end="109:21"><name pos:start="109:19" pos:end="109:21">dev</name></expr></argument>, <argument pos:start="109:24" pos:end="109:31"><expr pos:start="109:24" pos:end="109:31"><name pos:start="109:24" pos:end="109:31">nentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="115:52"><expr pos:start="113:5" pos:end="115:51"><call pos:start="113:5" pos:end="115:51"><name pos:start="113:5" pos:end="113:25">memory_region_init_io</name><argument_list pos:start="113:26" pos:end="115:51">(<argument pos:start="113:27" pos:end="113:47"><expr pos:start="113:27" pos:end="113:47"><operator pos:start="113:27" pos:end="113:27">&amp;</operator><name pos:start="113:28" pos:end="113:47"><name pos:start="113:28" pos:end="113:30">dev</name><operator pos:start="113:31" pos:end="113:32">-&gt;</operator><name pos:start="113:33" pos:end="113:47">msix_table_mmio</name></name></expr></argument>, <argument pos:start="113:50" pos:end="113:60"><expr pos:start="113:50" pos:end="113:60"><call pos:start="113:50" pos:end="113:60"><name pos:start="113:50" pos:end="113:55">OBJECT</name><argument_list pos:start="113:56" pos:end="113:60">(<argument pos:start="113:57" pos:end="113:59"><expr pos:start="113:57" pos:end="113:59"><name pos:start="113:57" pos:end="113:59">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:63" pos:end="113:82"><expr pos:start="113:63" pos:end="113:82"><operator pos:start="113:63" pos:end="113:63">&amp;</operator><name pos:start="113:64" pos:end="113:82">msix_table_mmio_ops</name></expr></argument>, <argument pos:start="113:85" pos:end="113:87"><expr pos:start="113:85" pos:end="113:87"><name pos:start="113:85" pos:end="113:87">dev</name></expr></argument>,

                          <argument pos:start="115:27" pos:end="115:38"><expr pos:start="115:27" pos:end="115:38"><literal type="string" pos:start="115:27" pos:end="115:38">"msix-table"</literal></expr></argument>, <argument pos:start="115:41" pos:end="115:50"><expr pos:start="115:41" pos:end="115:50"><name pos:start="115:41" pos:end="115:50">table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:80"><expr pos:start="117:5" pos:end="117:79"><call pos:start="117:5" pos:end="117:79"><name pos:start="117:5" pos:end="117:31">memory_region_add_subregion</name><argument_list pos:start="117:32" pos:end="117:79">(<argument pos:start="117:33" pos:end="117:41"><expr pos:start="117:33" pos:end="117:41"><name pos:start="117:33" pos:end="117:41">table_bar</name></expr></argument>, <argument pos:start="117:44" pos:end="117:55"><expr pos:start="117:44" pos:end="117:55"><name pos:start="117:44" pos:end="117:55">table_offset</name></expr></argument>, <argument pos:start="117:58" pos:end="117:78"><expr pos:start="117:58" pos:end="117:78"><operator pos:start="117:58" pos:end="117:58">&amp;</operator><name pos:start="117:59" pos:end="117:78"><name pos:start="117:59" pos:end="117:61">dev</name><operator pos:start="117:62" pos:end="117:63">-&gt;</operator><name pos:start="117:64" pos:end="117:78">msix_table_mmio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="121:48"><expr pos:start="119:5" pos:end="121:47"><call pos:start="119:5" pos:end="121:47"><name pos:start="119:5" pos:end="119:25">memory_region_init_io</name><argument_list pos:start="119:26" pos:end="121:47">(<argument pos:start="119:27" pos:end="119:45"><expr pos:start="119:27" pos:end="119:45"><operator pos:start="119:27" pos:end="119:27">&amp;</operator><name pos:start="119:28" pos:end="119:45"><name pos:start="119:28" pos:end="119:30">dev</name><operator pos:start="119:31" pos:end="119:32">-&gt;</operator><name pos:start="119:33" pos:end="119:45">msix_pba_mmio</name></name></expr></argument>, <argument pos:start="119:48" pos:end="119:58"><expr pos:start="119:48" pos:end="119:58"><call pos:start="119:48" pos:end="119:58"><name pos:start="119:48" pos:end="119:53">OBJECT</name><argument_list pos:start="119:54" pos:end="119:58">(<argument pos:start="119:55" pos:end="119:57"><expr pos:start="119:55" pos:end="119:57"><name pos:start="119:55" pos:end="119:57">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:61" pos:end="119:78"><expr pos:start="119:61" pos:end="119:78"><operator pos:start="119:61" pos:end="119:61">&amp;</operator><name pos:start="119:62" pos:end="119:78">msix_pba_mmio_ops</name></expr></argument>, <argument pos:start="119:81" pos:end="119:83"><expr pos:start="119:81" pos:end="119:83"><name pos:start="119:81" pos:end="119:83">dev</name></expr></argument>,

                          <argument pos:start="121:27" pos:end="121:36"><expr pos:start="121:27" pos:end="121:36"><literal type="string" pos:start="121:27" pos:end="121:36">"msix-pba"</literal></expr></argument>, <argument pos:start="121:39" pos:end="121:46"><expr pos:start="121:39" pos:end="121:46"><name pos:start="121:39" pos:end="121:46">pba_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:74"><expr pos:start="123:5" pos:end="123:73"><call pos:start="123:5" pos:end="123:73"><name pos:start="123:5" pos:end="123:31">memory_region_add_subregion</name><argument_list pos:start="123:32" pos:end="123:73">(<argument pos:start="123:33" pos:end="123:39"><expr pos:start="123:33" pos:end="123:39"><name pos:start="123:33" pos:end="123:39">pba_bar</name></expr></argument>, <argument pos:start="123:42" pos:end="123:51"><expr pos:start="123:42" pos:end="123:51"><name pos:start="123:42" pos:end="123:51">pba_offset</name></expr></argument>, <argument pos:start="123:54" pos:end="123:72"><expr pos:start="123:54" pos:end="123:72"><operator pos:start="123:54" pos:end="123:54">&amp;</operator><name pos:start="123:55" pos:end="123:72"><name pos:start="123:55" pos:end="123:57">dev</name><operator pos:start="123:58" pos:end="123:59">-&gt;</operator><name pos:start="123:60" pos:end="123:72">msix_pba_mmio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="127:5" pos:end="127:13">return <expr pos:start="127:12" pos:end="127:12"><literal type="number" pos:start="127:12" pos:end="127:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
