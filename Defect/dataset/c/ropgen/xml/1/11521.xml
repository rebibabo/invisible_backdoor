<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11521.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:12">target_ulong</name></type> <name pos:start="1:14" pos:end="1:24">helper_evpe</name><parameter_list pos:start="1:25" pos:end="1:43">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:39"><name pos:start="1:26" pos:end="1:37">CPUMIPSState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:16">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">CPUMIPSState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:27">other_cpu</name> <init pos:start="5:29" pos:end="5:39">= <expr pos:start="5:31" pos:end="5:39"><name pos:start="5:31" pos:end="5:39">first_cpu</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:21">prev</name> <init pos:start="7:23" pos:end="7:48">= <expr pos:start="7:25" pos:end="7:48"><name pos:start="7:25" pos:end="7:48"><name pos:start="7:25" pos:end="7:27">env</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">mvp</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:48">CP0_MVPControl</name></name></expr></init></decl>;</decl_stmt>



    <do pos:start="11:5" pos:end="29:24">do <block pos:start="11:8" pos:end="29:5">{<block_content pos:start="13:9" pos:end="27:40">

        <if_stmt pos:start="13:9" pos:end="25:9"><if pos:start="13:9" pos:end="25:9">if <condition pos:start="13:12" pos:end="17:42">(<expr pos:start="13:13" pos:end="17:41"><name pos:start="13:13" pos:end="13:21">other_cpu</name> <operator pos:start="13:23" pos:end="13:24">!=</operator> <name pos:start="13:26" pos:end="13:28">env</name>

           <comment type="block" pos:start="15:12" pos:end="15:61">/* If the VPE is WFI, don't disturb its sleep.  */</comment>

           <operator pos:start="17:12" pos:end="17:13">&amp;&amp;</operator> <operator pos:start="17:15" pos:end="17:15">!</operator><call pos:start="17:16" pos:end="17:41"><name pos:start="17:16" pos:end="17:30">mips_vpe_is_wfi</name><argument_list pos:start="17:31" pos:end="17:41">(<argument pos:start="17:32" pos:end="17:40"><expr pos:start="17:32" pos:end="17:40"><name pos:start="17:32" pos:end="17:40">other_cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:44" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:37">

            <comment type="block" pos:start="19:13" pos:end="19:34">/* Enable the VPE.  */</comment>

            <expr_stmt pos:start="21:13" pos:end="21:66"><expr pos:start="21:13" pos:end="21:65"><name pos:start="21:13" pos:end="21:42"><name pos:start="21:13" pos:end="21:21">other_cpu</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:26">mvp</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:42">CP0_MVPControl</name></name> <operator pos:start="21:44" pos:end="21:45">|=</operator> <operator pos:start="21:47" pos:end="21:47">(</operator><literal type="number" pos:start="21:48" pos:end="21:48">1</literal> <operator pos:start="21:50" pos:end="21:51">&lt;&lt;</operator> <name pos:start="21:53" pos:end="21:64">CP0MVPCo_EVP</name><operator pos:start="21:65" pos:end="21:65">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:37"><expr pos:start="23:13" pos:end="23:36"><call pos:start="23:13" pos:end="23:36"><name pos:start="23:13" pos:end="23:25">mips_vpe_wake</name><argument_list pos:start="23:26" pos:end="23:36">(<argument pos:start="23:27" pos:end="23:35"><expr pos:start="23:27" pos:end="23:35"><name pos:start="23:27" pos:end="23:35">other_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="23:39" pos:end="23:60">/* And wake it up.  */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:40"><expr pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:17">other_cpu</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:39"><name pos:start="27:21" pos:end="27:29">other_cpu</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:39">next_cpu</name></name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="29:13" pos:end="29:23">(<expr pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:22">other_cpu</name></expr>)</condition>;</do>

    <return pos:start="31:5" pos:end="31:16">return <expr pos:start="31:12" pos:end="31:15"><name pos:start="31:12" pos:end="31:15">prev</name></expr>;</return>

</block_content>}</block></function>
</unit>
