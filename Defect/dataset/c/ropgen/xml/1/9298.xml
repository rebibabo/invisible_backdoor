<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9298.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">gluster_finish_aiocb</name><parameter_list pos:start="1:33" pos:end="1:76">(<parameter pos:start="1:34" pos:end="1:51"><decl pos:start="1:34" pos:end="1:51"><type pos:start="1:34" pos:end="1:51"><name pos:start="1:34" pos:end="1:47"><name pos:start="1:34" pos:end="1:39">struct</name> <name pos:start="1:41" pos:end="1:47">glfs_fd</name></name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">fd</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:64"><decl pos:start="1:54" pos:end="1:64"><type pos:start="1:54" pos:end="1:64"><name pos:start="1:54" pos:end="1:60">ssize_t</name></type> <name pos:start="1:62" pos:end="1:64">ret</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:75"><decl pos:start="1:67" pos:end="1:75"><type pos:start="1:67" pos:end="1:75"><name pos:start="1:67" pos:end="1:70">void</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:75">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:5">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">GlusterAIOCB</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">acb</name> <init pos:start="5:23" pos:end="5:43">= <expr pos:start="5:25" pos:end="5:43"><operator pos:start="5:25" pos:end="5:25">(</operator><name pos:start="5:26" pos:end="5:37">GlusterAIOCB</name> <operator pos:start="5:39" pos:end="5:39">*</operator><operator pos:start="5:40" pos:end="5:40">)</operator><name pos:start="5:41" pos:end="5:43">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name> <init pos:start="7:26" pos:end="7:41">= <expr pos:start="7:28" pos:end="7:41"><name pos:start="7:28" pos:end="7:41"><name pos:start="7:28" pos:end="7:30">acb</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:38">common</name><operator pos:start="7:39" pos:end="7:39">.</operator><name pos:start="7:40" pos:end="7:41">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BDRVGlusterState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:23">s</name> <init pos:start="9:25" pos:end="9:36">= <expr pos:start="9:27" pos:end="9:36"><name pos:start="9:27" pos:end="9:36"><name pos:start="9:27" pos:end="9:28">bs</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:36">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">retval</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:19"><expr pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:7">acb</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:12">ret</name></name> <operator pos:start="15:14" pos:end="15:14">=</operator> <name pos:start="15:16" pos:end="15:18">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:74"><expr pos:start="17:5" pos:end="17:73"><name pos:start="17:5" pos:end="17:10">retval</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:73"><name pos:start="17:14" pos:end="17:28">qemu_write_full</name><argument_list pos:start="17:29" pos:end="17:73">(<argument pos:start="17:30" pos:end="17:53"><expr pos:start="17:30" pos:end="17:53"><name pos:start="17:30" pos:end="17:53"><name pos:start="17:30" pos:end="17:30">s</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:35">fds</name><index pos:start="17:36" pos:end="17:53">[<expr pos:start="17:37" pos:end="17:52"><name pos:start="17:37" pos:end="17:52">GLUSTER_FD_WRITE</name></expr>]</index></name></expr></argument>, <argument pos:start="17:56" pos:end="17:59"><expr pos:start="17:56" pos:end="17:59"><operator pos:start="17:56" pos:end="17:56">&amp;</operator><name pos:start="17:57" pos:end="17:59">acb</name></expr></argument>, <argument pos:start="17:62" pos:end="17:72"><expr pos:start="17:62" pos:end="17:72"><sizeof pos:start="17:62" pos:end="17:72">sizeof<argument_list pos:start="17:68" pos:end="17:72">(<argument pos:start="17:69" pos:end="17:71"><expr pos:start="17:69" pos:end="17:71"><name pos:start="17:69" pos:end="17:71">acb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="55:5"><if pos:start="19:5" pos:end="55:5">if <condition pos:start="19:8" pos:end="19:30">(<expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:14">retval</name> <operator pos:start="19:16" pos:end="19:17">!=</operator> <sizeof pos:start="19:19" pos:end="19:29">sizeof<argument_list pos:start="19:25" pos:end="19:29">(<argument pos:start="19:26" pos:end="19:28"><expr pos:start="19:26" pos:end="19:28"><name pos:start="19:26" pos:end="19:28">acb</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="19:32" pos:end="55:5">{<block_content pos:start="35:9" pos:end="53:37">

        <comment type="block" pos:start="21:9" pos:end="33:11">/*

         * Gluster AIO callback thread failed to notify the waiting

         * QEMU thread about IO completion.

         *

         * Complete this IO request and make the disk inaccessible for

         * subsequent reads and writes.

         */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:74"><expr pos:start="35:9" pos:end="35:73"><call pos:start="35:9" pos:end="35:73"><name pos:start="35:9" pos:end="35:20">error_report</name><argument_list pos:start="35:21" pos:end="35:73">(<argument pos:start="35:22" pos:end="35:72"><expr pos:start="35:22" pos:end="35:72"><literal type="string" pos:start="35:22" pos:end="35:72">"Gluster failed to notify QEMU about IO completion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:35"><expr pos:start="39:9" pos:end="39:34"><call pos:start="39:9" pos:end="39:34"><name pos:start="39:9" pos:end="39:32">qemu_mutex_lock_iothread</name><argument_list pos:start="39:33" pos:end="39:34">()</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="39:37" pos:end="39:74">/* We are in gluster thread context */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:49"><expr pos:start="41:9" pos:end="41:48"><call pos:start="41:9" pos:end="41:48"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:11">acb</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:19">common</name><operator pos:start="41:20" pos:end="41:20">.</operator><name pos:start="41:21" pos:end="41:22">cb</name></name><argument_list pos:start="41:23" pos:end="41:48">(<argument pos:start="41:24" pos:end="41:41"><expr pos:start="41:24" pos:end="41:41"><name pos:start="41:24" pos:end="41:41"><name pos:start="41:24" pos:end="41:26">acb</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:34">common</name><operator pos:start="41:35" pos:end="41:35">.</operator><name pos:start="41:36" pos:end="41:41">opaque</name></name></expr></argument>, <argument pos:start="41:44" pos:end="41:47"><expr pos:start="41:44" pos:end="41:47"><operator pos:start="41:44" pos:end="41:44">-</operator><name pos:start="41:45" pos:end="41:47">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:24">qemu_aio_release</name><argument_list pos:start="43:25" pos:end="43:29">(<argument pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><call pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:13">close</name><argument_list pos:start="45:14" pos:end="45:38">(<argument pos:start="45:15" pos:end="45:37"><expr pos:start="45:15" pos:end="45:37"><name pos:start="45:15" pos:end="45:37"><name pos:start="45:15" pos:end="45:15">s</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:20">fds</name><index pos:start="45:21" pos:end="45:37">[<expr pos:start="45:22" pos:end="45:36"><name pos:start="45:22" pos:end="45:36">GLUSTER_FD_READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><call pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:13">close</name><argument_list pos:start="47:14" pos:end="47:39">(<argument pos:start="47:15" pos:end="47:38"><expr pos:start="47:15" pos:end="47:38"><name pos:start="47:15" pos:end="47:38"><name pos:start="47:15" pos:end="47:15">s</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:20">fds</name><index pos:start="47:21" pos:end="47:38">[<expr pos:start="47:22" pos:end="47:37"><name pos:start="47:22" pos:end="47:37">GLUSTER_FD_WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:75"><expr pos:start="49:9" pos:end="49:74"><call pos:start="49:9" pos:end="49:74"><name pos:start="49:9" pos:end="49:31">qemu_aio_set_fd_handler</name><argument_list pos:start="49:32" pos:end="49:74">(<argument pos:start="49:33" pos:end="49:55"><expr pos:start="49:33" pos:end="49:55"><name pos:start="49:33" pos:end="49:55"><name pos:start="49:33" pos:end="49:33">s</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:38">fds</name><index pos:start="49:39" pos:end="49:55">[<expr pos:start="49:40" pos:end="49:54"><name pos:start="49:40" pos:end="49:54">GLUSTER_FD_READ</name></expr>]</index></name></expr></argument>, <argument pos:start="49:58" pos:end="49:61"><expr pos:start="49:58" pos:end="49:61"><name pos:start="49:58" pos:end="49:61">NULL</name></expr></argument>, <argument pos:start="49:64" pos:end="49:67"><expr pos:start="49:64" pos:end="49:67"><name pos:start="49:64" pos:end="49:67">NULL</name></expr></argument>, <argument pos:start="49:70" pos:end="49:73"><expr pos:start="49:70" pos:end="49:73"><name pos:start="49:70" pos:end="49:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:23"><expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:10">bs</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:15">drv</name></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:22">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="51:25" pos:end="51:56">/* Make the disk inaccessible */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><call pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="53:35" pos:end="53:36">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
