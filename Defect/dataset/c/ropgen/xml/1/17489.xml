<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17489.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:58"><name pos:start="1:1" pos:end="1:16">print_insn_sparc</name> <argument_list pos:start="1:18" pos:end="1:58">(<argument pos:start="1:19" pos:end="1:33">bfd_vma memaddr</argument>, <argument pos:start="1:36" pos:end="1:57">disassemble_info *info</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="1139:1">{<block_content pos:start="5:3" pos:end="1137:25">

  <decl_stmt pos:start="5:3" pos:end="5:30"><decl pos:start="5:3" pos:end="5:29"><type pos:start="5:3" pos:end="5:8"><name pos:start="5:3" pos:end="5:6">FILE</name> <modifier pos:start="5:8" pos:end="5:8">*</modifier></type><name pos:start="5:9" pos:end="5:14">stream</name> <init pos:start="5:16" pos:end="5:29">= <expr pos:start="5:18" pos:end="5:29"><name pos:start="5:18" pos:end="5:29"><name pos:start="5:18" pos:end="5:21">info</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:29">stream</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:21"><decl pos:start="7:3" pos:end="7:20"><type pos:start="7:3" pos:end="7:10"><name pos:start="7:3" pos:end="7:10">bfd_byte</name></type> <name pos:start="7:12" pos:end="7:20"><name pos:start="7:12" pos:end="7:17">buffer</name><index pos:start="7:18" pos:end="7:20">[<expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">4</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="9:21"><decl pos:start="9:3" pos:end="9:20"><type pos:start="9:3" pos:end="9:15"><name pos:start="9:3" pos:end="9:10">unsigned</name> <name pos:start="9:12" pos:end="9:15">long</name></type> <name pos:start="9:17" pos:end="9:20">insn</name></decl>;</decl_stmt>

  <decl_stmt pos:start="11:3" pos:end="11:24"><decl pos:start="11:3" pos:end="11:23"><type pos:start="11:3" pos:end="11:21"><name pos:start="11:3" pos:end="11:19">sparc_opcode_hash</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:23">op</name></decl>;</decl_stmt>

  <comment type="block" pos:start="13:3" pos:end="13:54">/* Nonzero of opcode table has been initialized.  */</comment>

  <decl_stmt pos:start="15:3" pos:end="15:37"><decl pos:start="15:3" pos:end="15:36"><type pos:start="15:3" pos:end="15:12"><specifier pos:start="15:3" pos:end="15:8">static</specifier> <name pos:start="15:10" pos:end="15:12">int</name></type> <name pos:start="15:14" pos:end="15:32">opcodes_initialized</name> <init pos:start="15:34" pos:end="15:36">= <expr pos:start="15:36" pos:end="15:36"><literal type="number" pos:start="15:36" pos:end="15:36">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" pos:start="17:3" pos:end="17:38">/* bfd mach number of last call.  */</comment>

  <decl_stmt pos:start="19:3" pos:end="19:40"><decl pos:start="19:3" pos:end="19:39"><type pos:start="19:3" pos:end="19:22"><specifier pos:start="19:3" pos:end="19:8">static</specifier> <name pos:start="19:10" pos:end="19:17">unsigned</name> <name pos:start="19:19" pos:end="19:22">long</name></type> <name pos:start="19:24" pos:end="19:35">current_mach</name> <init pos:start="19:37" pos:end="19:39">= <expr pos:start="19:39" pos:end="19:39"><literal type="number" pos:start="19:39" pos:end="19:39">0</literal></expr></init></decl>;</decl_stmt>

  <function_decl pos:start="21:3" pos:end="21:45"><type pos:start="21:3" pos:end="21:9"><name pos:start="21:3" pos:end="21:9">bfd_vma</name></type> (<modifier pos:start="21:12" pos:end="21:12">*</modifier><name pos:start="21:13" pos:end="21:19">getword</name>) <parameter_list pos:start="21:22" pos:end="21:44">(<parameter pos:start="21:23" pos:end="21:43"><decl pos:start="21:23" pos:end="21:43"><type pos:start="21:23" pos:end="21:43"><specifier pos:start="21:23" pos:end="21:27">const</specifier> <name pos:start="21:29" pos:end="21:36">unsigned</name> <name pos:start="21:38" pos:end="21:41">char</name> <modifier pos:start="21:43" pos:end="21:43">*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



  <if_stmt pos:start="25:3" pos:end="63:5"><if pos:start="25:3" pos:end="63:5">if <condition pos:start="25:6" pos:end="27:36">(<expr pos:start="25:7" pos:end="27:35"><operator pos:start="25:7" pos:end="25:7">!</operator><name pos:start="25:8" pos:end="25:26">opcodes_initialized</name>

      <operator pos:start="27:7" pos:end="27:8">||</operator> <name pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:13">info</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:19">mach</name></name> <operator pos:start="27:21" pos:end="27:22">!=</operator> <name pos:start="27:24" pos:end="27:35">current_mach</name></expr>)</condition>

    <block pos:start="29:5" pos:end="63:5">{<block_content pos:start="31:7" pos:end="61:30">

      <decl_stmt pos:start="31:7" pos:end="31:12"><decl pos:start="31:7" pos:end="31:11"><type pos:start="31:7" pos:end="31:9"><name pos:start="31:7" pos:end="31:9">int</name></type> <name pos:start="31:11" pos:end="31:11">i</name></decl>;</decl_stmt>



      <expr_stmt pos:start="35:7" pos:end="35:57"><expr pos:start="35:7" pos:end="35:56"><name pos:start="35:7" pos:end="35:23">current_arch_mask</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <call pos:start="35:27" pos:end="35:56"><name pos:start="35:27" pos:end="35:43">compute_arch_mask</name> <argument_list pos:start="35:45" pos:end="35:56">(<argument pos:start="35:46" pos:end="35:55"><expr pos:start="35:46" pos:end="35:55"><name pos:start="35:46" pos:end="35:55"><name pos:start="35:46" pos:end="35:49">info</name><operator pos:start="35:50" pos:end="35:51">-&gt;</operator><name pos:start="35:52" pos:end="35:55">mach</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



      <if_stmt pos:start="39:7" pos:end="43:63"><if pos:start="39:7" pos:end="43:63">if <condition pos:start="39:10" pos:end="39:31">(<expr pos:start="39:11" pos:end="39:30"><operator pos:start="39:11" pos:end="39:11">!</operator><name pos:start="39:12" pos:end="39:30">opcodes_initialized</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="43:63"><block_content pos:start="41:9" pos:end="43:63">

        <expr_stmt pos:start="41:9" pos:end="43:63"><expr pos:start="41:9" pos:end="43:62"><name pos:start="41:9" pos:end="41:22">sorted_opcodes</name> <operator pos:start="41:24" pos:end="41:24">=</operator>

          <call pos:start="43:11" pos:end="43:62"><name pos:start="43:11" pos:end="43:16">malloc</name> <argument_list pos:start="43:18" pos:end="43:62">(<argument pos:start="43:19" pos:end="43:61"><expr pos:start="43:19" pos:end="43:61"><name pos:start="43:19" pos:end="43:35">sparc_num_opcodes</name> <operator pos:start="43:37" pos:end="43:37">*</operator> <sizeof pos:start="43:39" pos:end="43:61">sizeof <argument_list pos:start="43:46" pos:end="43:61">(<argument pos:start="43:47" pos:end="43:60"><expr pos:start="43:47" pos:end="43:60"><name pos:start="43:47" pos:end="43:58">sparc_opcode</name> <operator pos:start="43:60" pos:end="43:60">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block" pos:start="45:7" pos:end="45:56">/* Reset the sorted table so we can resort it.  */</comment>

      <for pos:start="47:7" pos:end="49:46">for <control pos:start="47:11" pos:end="47:45">(<init pos:start="47:12" pos:end="47:17"><expr pos:start="47:12" pos:end="47:16"><name pos:start="47:12" pos:end="47:12">i</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</init> <condition pos:start="47:19" pos:end="47:40"><expr pos:start="47:19" pos:end="47:39"><name pos:start="47:19" pos:end="47:19">i</name> <operator pos:start="47:21" pos:end="47:21">&lt;</operator> <name pos:start="47:23" pos:end="47:39">sparc_num_opcodes</name></expr>;</condition> <incr pos:start="47:42" pos:end="47:44"><expr pos:start="47:42" pos:end="47:44"><operator pos:start="47:42" pos:end="47:43">++</operator><name pos:start="47:44" pos:end="47:44">i</name></expr></incr>)</control><block type="pseudo" pos:start="49:9" pos:end="49:46"><block_content pos:start="49:9" pos:end="49:46">

        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:22">sorted_opcodes</name><index pos:start="49:23" pos:end="49:25">[<expr pos:start="49:24" pos:end="49:24"><name pos:start="49:24" pos:end="49:24">i</name></expr>]</index></name> <operator pos:start="49:27" pos:end="49:27">=</operator> <operator pos:start="49:29" pos:end="49:29">&amp;</operator><name pos:start="49:30" pos:end="49:45"><name pos:start="49:30" pos:end="49:42">sparc_opcodes</name><index pos:start="49:43" pos:end="49:45">[<expr pos:start="49:44" pos:end="49:44"><name pos:start="49:44" pos:end="49:44">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

      <expr_stmt pos:start="51:7" pos:end="53:58"><expr pos:start="51:7" pos:end="53:57"><call pos:start="51:7" pos:end="53:57"><name pos:start="51:7" pos:end="51:11">qsort</name> <argument_list pos:start="51:13" pos:end="53:57">(<argument pos:start="51:14" pos:end="51:36"><expr pos:start="51:14" pos:end="51:36"><operator pos:start="51:14" pos:end="51:14">(</operator><name pos:start="51:15" pos:end="51:18">char</name> <operator pos:start="51:20" pos:end="51:20">*</operator><operator pos:start="51:21" pos:end="51:21">)</operator> <name pos:start="51:23" pos:end="51:36">sorted_opcodes</name></expr></argument>, <argument pos:start="51:39" pos:end="51:55"><expr pos:start="51:39" pos:end="51:55"><name pos:start="51:39" pos:end="51:55">sparc_num_opcodes</name></expr></argument>,

             <argument pos:start="53:14" pos:end="53:39"><expr pos:start="53:14" pos:end="53:39"><sizeof pos:start="53:14" pos:end="53:39">sizeof <argument_list pos:start="53:21" pos:end="53:39">(<argument pos:start="53:22" pos:end="53:38"><expr pos:start="53:22" pos:end="53:38"><name pos:start="53:22" pos:end="53:38"><name pos:start="53:22" pos:end="53:35">sorted_opcodes</name><index pos:start="53:36" pos:end="53:38">[<expr pos:start="53:37" pos:end="53:37"><literal type="number" pos:start="53:37" pos:end="53:37">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="53:42" pos:end="53:56"><expr pos:start="53:42" pos:end="53:56"><name pos:start="53:42" pos:end="53:56">compare_opcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



      <expr_stmt pos:start="57:7" pos:end="57:78"><expr pos:start="57:7" pos:end="57:77"><call pos:start="57:7" pos:end="57:77"><name pos:start="57:7" pos:end="57:22">build_hash_table</name> <argument_list pos:start="57:24" pos:end="57:77">(<argument pos:start="57:25" pos:end="57:38"><expr pos:start="57:25" pos:end="57:38"><name pos:start="57:25" pos:end="57:38">sorted_opcodes</name></expr></argument>, <argument pos:start="57:41" pos:end="57:57"><expr pos:start="57:41" pos:end="57:57"><name pos:start="57:41" pos:end="57:57">opcode_hash_table</name></expr></argument>, <argument pos:start="57:60" pos:end="57:76"><expr pos:start="57:60" pos:end="57:76"><name pos:start="57:60" pos:end="57:76">sparc_num_opcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="59:7" pos:end="59:32"><expr pos:start="59:7" pos:end="59:31"><name pos:start="59:7" pos:end="59:18">current_mach</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <name pos:start="59:22" pos:end="59:31"><name pos:start="59:22" pos:end="59:25">info</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:31">mach</name></name></expr>;</expr_stmt>

      <expr_stmt pos:start="61:7" pos:end="61:30"><expr pos:start="61:7" pos:end="61:29"><name pos:start="61:7" pos:end="61:25">opcodes_initialized</name> <operator pos:start="61:27" pos:end="61:27">=</operator> <literal type="number" pos:start="61:29" pos:end="61:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



  <block pos:start="67:3" pos:end="85:3">{<block_content pos:start="69:5" pos:end="83:7">

    <decl_stmt pos:start="69:5" pos:end="71:73"><decl pos:start="69:5" pos:end="71:72"><type pos:start="69:5" pos:end="69:7"><name pos:start="69:5" pos:end="69:7">int</name></type> <name pos:start="69:9" pos:end="69:14">status</name> <init pos:start="69:16" pos:end="71:72">=

      <expr pos:start="71:7" pos:end="71:72"><call pos:start="71:7" pos:end="71:72">(<modifier pos:start="71:8" pos:end="71:8">*</modifier><name pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:12">info</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:30">read_memory_func</name></name>) <argument_list pos:start="71:33" pos:end="71:72">(<argument pos:start="71:34" pos:end="71:40"><expr pos:start="71:34" pos:end="71:40"><name pos:start="71:34" pos:end="71:40">memaddr</name></expr></argument>, <argument pos:start="71:43" pos:end="71:48"><expr pos:start="71:43" pos:end="71:48"><name pos:start="71:43" pos:end="71:48">buffer</name></expr></argument>, <argument pos:start="71:51" pos:end="71:65"><expr pos:start="71:51" pos:end="71:65"><sizeof pos:start="71:51" pos:end="71:65">sizeof <argument_list pos:start="71:58" pos:end="71:65">(<argument pos:start="71:59" pos:end="71:64"><expr pos:start="71:59" pos:end="71:64"><name pos:start="71:59" pos:end="71:64">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="71:68" pos:end="71:71"><expr pos:start="71:68" pos:end="71:71"><name pos:start="71:68" pos:end="71:71">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="75:5" pos:end="83:7"><if pos:start="75:5" pos:end="83:7">if <condition pos:start="75:8" pos:end="75:20">(<expr pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:14">status</name> <operator pos:start="75:16" pos:end="75:17">!=</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>)</condition>

      <block pos:start="77:7" pos:end="83:7">{<block_content pos:start="79:9" pos:end="81:18">

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><call pos:start="79:9" pos:end="79:58">(<modifier pos:start="79:10" pos:end="79:10">*</modifier><name pos:start="79:11" pos:end="79:33"><name pos:start="79:11" pos:end="79:14">info</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:33">memory_error_func</name></name>) <argument_list pos:start="79:36" pos:end="79:58">(<argument pos:start="79:37" pos:end="79:42"><expr pos:start="79:37" pos:end="79:42"><name pos:start="79:37" pos:end="79:42">status</name></expr></argument>, <argument pos:start="79:45" pos:end="79:51"><expr pos:start="79:45" pos:end="79:51"><name pos:start="79:45" pos:end="79:51">memaddr</name></expr></argument>, <argument pos:start="79:54" pos:end="79:57"><expr pos:start="79:54" pos:end="79:57"><name pos:start="79:54" pos:end="79:57">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>;</return>

      </block_content>}</block></if></if_stmt>

  </block_content>}</block>



  <comment type="block" pos:start="89:3" pos:end="91:78">/* On SPARClite variants such as DANlite (sparc86x), instructions

     are always big-endian even when the machine is in little-endian mode.  */</comment>

  <if_stmt pos:start="93:3" pos:end="99:25"><if pos:start="93:3" pos:end="95:25">if <condition pos:start="93:6" pos:end="93:79">(<expr pos:start="93:7" pos:end="93:78"><name pos:start="93:7" pos:end="93:18"><name pos:start="93:7" pos:end="93:10">info</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:18">endian</name></name> <operator pos:start="93:20" pos:end="93:21">==</operator> <name pos:start="93:23" pos:end="93:36">BFD_ENDIAN_BIG</name> <operator pos:start="93:38" pos:end="93:39">||</operator> <name pos:start="93:41" pos:end="93:50"><name pos:start="93:41" pos:end="93:44">info</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:50">mach</name></name> <operator pos:start="93:52" pos:end="93:53">==</operator> <name pos:start="93:55" pos:end="93:78">bfd_mach_sparc_sparclite</name></expr>)</condition><block type="pseudo" pos:start="95:5" pos:end="95:25"><block_content pos:start="95:5" pos:end="95:25">

    <expr_stmt pos:start="95:5" pos:end="95:25"><expr pos:start="95:5" pos:end="95:24"><name pos:start="95:5" pos:end="95:11">getword</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <name pos:start="95:15" pos:end="95:24">bfd_getb32</name></expr>;</expr_stmt></block_content></block></if>

  <else pos:start="97:3" pos:end="99:25">else<block type="pseudo" pos:start="99:5" pos:end="99:25"><block_content pos:start="99:5" pos:end="99:25">

    <expr_stmt pos:start="99:5" pos:end="99:25"><expr pos:start="99:5" pos:end="99:24"><name pos:start="99:5" pos:end="99:11">getword</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <name pos:start="99:15" pos:end="99:24">bfd_getl32</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



  <expr_stmt pos:start="103:3" pos:end="103:26"><expr pos:start="103:3" pos:end="103:25"><name pos:start="103:3" pos:end="103:6">insn</name> <operator pos:start="103:8" pos:end="103:8">=</operator> <call pos:start="103:10" pos:end="103:25"><name pos:start="103:10" pos:end="103:16">getword</name> <argument_list pos:start="103:18" pos:end="103:25">(<argument pos:start="103:19" pos:end="103:24"><expr pos:start="103:19" pos:end="103:24"><name pos:start="103:19" pos:end="103:24">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <expr_stmt pos:start="107:3" pos:end="107:28"><expr pos:start="107:3" pos:end="107:27"><name pos:start="107:3" pos:end="107:23"><name pos:start="107:3" pos:end="107:6">info</name><operator pos:start="107:7" pos:end="107:8">-&gt;</operator><name pos:start="107:9" pos:end="107:23">insn_info_valid</name></name> <operator pos:start="107:25" pos:end="107:25">=</operator> <literal type="number" pos:start="107:27" pos:end="107:27">1</literal></expr>;</expr_stmt>                    <comment type="block" pos:start="107:49" pos:end="107:78">/* We do return this info.  */</comment>

  <expr_stmt pos:start="109:3" pos:end="109:34"><expr pos:start="109:3" pos:end="109:33"><name pos:start="109:3" pos:end="109:17"><name pos:start="109:3" pos:end="109:6">info</name><operator pos:start="109:7" pos:end="109:8">-&gt;</operator><name pos:start="109:9" pos:end="109:17">insn_type</name></name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:33">dis_nonbranch</name></expr>;</expr_stmt>              <comment type="block" pos:start="109:49" pos:end="109:78">/* Assume non branch insn.  */</comment>

  <expr_stmt pos:start="111:3" pos:end="111:31"><expr pos:start="111:3" pos:end="111:30"><name pos:start="111:3" pos:end="111:26"><name pos:start="111:3" pos:end="111:6">info</name><operator pos:start="111:7" pos:end="111:8">-&gt;</operator><name pos:start="111:9" pos:end="111:26">branch_delay_insns</name></name> <operator pos:start="111:28" pos:end="111:28">=</operator> <literal type="number" pos:start="111:30" pos:end="111:30">0</literal></expr>;</expr_stmt>                 <comment type="block" pos:start="111:49" pos:end="111:71">/* Assume no delay.  */</comment>

  <expr_stmt pos:start="113:3" pos:end="113:19"><expr pos:start="113:3" pos:end="113:18"><name pos:start="113:3" pos:end="113:14"><name pos:start="113:3" pos:end="113:6">info</name><operator pos:start="113:7" pos:end="113:8">-&gt;</operator><name pos:start="113:9" pos:end="113:14">target</name></name> <operator pos:start="113:16" pos:end="113:16">=</operator> <literal type="number" pos:start="113:18" pos:end="113:18">0</literal></expr>;</expr_stmt>                             <comment type="block" pos:start="113:49" pos:end="113:78">/* Assume no target known.  */</comment>



  <for pos:start="117:3" pos:end="1129:5">for <control pos:start="117:7" pos:end="117:67">(<init pos:start="117:8" pos:end="117:48"><expr pos:start="117:8" pos:end="117:47"><name pos:start="117:8" pos:end="117:9">op</name> <operator pos:start="117:11" pos:end="117:11">=</operator> <name pos:start="117:13" pos:end="117:47"><name pos:start="117:13" pos:end="117:29">opcode_hash_table</name><index pos:start="117:30" pos:end="117:47">[<expr pos:start="117:31" pos:end="117:46"><call pos:start="117:31" pos:end="117:46"><name pos:start="117:31" pos:end="117:39">HASH_INSN</name> <argument_list pos:start="117:41" pos:end="117:46">(<argument pos:start="117:42" pos:end="117:45"><expr pos:start="117:42" pos:end="117:45"><name pos:start="117:42" pos:end="117:45">insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</init> <condition pos:start="117:50" pos:end="117:52"><expr pos:start="117:50" pos:end="117:51"><name pos:start="117:50" pos:end="117:51">op</name></expr>;</condition> <incr pos:start="117:54" pos:end="117:66"><expr pos:start="117:54" pos:end="117:66"><name pos:start="117:54" pos:end="117:55">op</name> <operator pos:start="117:57" pos:end="117:57">=</operator> <name pos:start="117:59" pos:end="117:66"><name pos:start="117:59" pos:end="117:60">op</name><operator pos:start="117:61" pos:end="117:62">-&gt;</operator><name pos:start="117:63" pos:end="117:66">next</name></name></expr></incr>)</control>

    <block pos:start="119:5" pos:end="1129:5">{<block_content pos:start="121:7" pos:end="1127:9">

      <decl_stmt pos:start="121:7" pos:end="121:46"><decl pos:start="121:7" pos:end="121:45"><type pos:start="121:7" pos:end="121:26"><specifier pos:start="121:7" pos:end="121:11">const</specifier> <name pos:start="121:13" pos:end="121:24">sparc_opcode</name> <modifier pos:start="121:26" pos:end="121:26">*</modifier></type><name pos:start="121:27" pos:end="121:32">opcode</name> <init pos:start="121:34" pos:end="121:45">= <expr pos:start="121:36" pos:end="121:45"><name pos:start="121:36" pos:end="121:45"><name pos:start="121:36" pos:end="121:37">op</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:45">opcode</name></name></expr></init></decl>;</decl_stmt>



      <comment type="block" pos:start="125:7" pos:end="125:78">/* If the insn isn't supported by the current architecture, skip it.  */</comment>

      <if_stmt pos:start="127:7" pos:end="129:17"><if pos:start="127:7" pos:end="129:17">if <condition pos:start="127:10" pos:end="127:55">(<expr pos:start="127:11" pos:end="127:54"><operator pos:start="127:11" pos:end="127:11">!</operator> <operator pos:start="127:13" pos:end="127:13">(</operator><name pos:start="127:14" pos:end="127:33"><name pos:start="127:14" pos:end="127:19">opcode</name><operator pos:start="127:20" pos:end="127:21">-&gt;</operator><name pos:start="127:22" pos:end="127:33">architecture</name></name> <operator pos:start="127:35" pos:end="127:35">&amp;</operator> <name pos:start="127:37" pos:end="127:53">current_arch_mask</name><operator pos:start="127:54" pos:end="127:54">)</operator></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:17"><block_content pos:start="129:9" pos:end="129:17">

        <continue pos:start="129:9" pos:end="129:17">continue;</continue></block_content></block></if></if_stmt>



      <if_stmt pos:start="133:7" pos:end="1127:9"><if pos:start="133:7" pos:end="1127:9">if <condition pos:start="133:10" pos:end="135:40">(<expr pos:start="133:11" pos:end="135:39"><operator pos:start="133:11" pos:end="133:11">(</operator><name pos:start="133:12" pos:end="133:24"><name pos:start="133:12" pos:end="133:17">opcode</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:24">match</name></name> <operator pos:start="133:26" pos:end="133:26">&amp;</operator> <name pos:start="133:28" pos:end="133:31">insn</name><operator pos:start="133:32" pos:end="133:32">)</operator> <operator pos:start="133:34" pos:end="133:35">==</operator> <name pos:start="133:37" pos:end="133:49"><name pos:start="133:37" pos:end="133:42">opcode</name><operator pos:start="133:43" pos:end="133:44">-&gt;</operator><name pos:start="133:45" pos:end="133:49">match</name></name>

          <operator pos:start="135:11" pos:end="135:12">&amp;&amp;</operator> <operator pos:start="135:14" pos:end="135:14">(</operator><name pos:start="135:15" pos:end="135:26"><name pos:start="135:15" pos:end="135:20">opcode</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:26">lose</name></name> <operator pos:start="135:28" pos:end="135:28">&amp;</operator> <name pos:start="135:30" pos:end="135:33">insn</name><operator pos:start="135:34" pos:end="135:34">)</operator> <operator pos:start="135:36" pos:end="135:37">==</operator> <literal type="number" pos:start="135:39" pos:end="135:39">0</literal></expr>)</condition>

        <block pos:start="137:9" pos:end="1127:9">{<block_content pos:start="143:11" pos:end="1125:33">

          <comment type="block" pos:start="139:11" pos:end="141:71">/* Nonzero means that we have found an instruction which has

             the effect of adding or or'ing the imm13 field to rs1.  */</comment>

          <decl_stmt pos:start="143:11" pos:end="143:35"><decl pos:start="143:11" pos:end="143:34"><type pos:start="143:11" pos:end="143:13"><name pos:start="143:11" pos:end="143:13">int</name></type> <name pos:start="143:15" pos:end="143:30">imm_added_to_rs1</name> <init pos:start="143:32" pos:end="143:34">= <expr pos:start="143:34" pos:end="143:34"><literal type="number" pos:start="143:34" pos:end="143:34">0</literal></expr></init></decl>;</decl_stmt>

          <decl_stmt pos:start="145:11" pos:end="145:34"><decl pos:start="145:11" pos:end="145:33"><type pos:start="145:11" pos:end="145:13"><name pos:start="145:11" pos:end="145:13">int</name></type> <name pos:start="145:15" pos:end="145:29">imm_ored_to_rs1</name> <init pos:start="145:31" pos:end="145:33">= <expr pos:start="145:33" pos:end="145:33"><literal type="number" pos:start="145:33" pos:end="145:33">0</literal></expr></init></decl>;</decl_stmt>



          <comment type="block" pos:start="149:11" pos:end="151:43">/* Nonzero means that we have found a plus sign in the args

             field of the opcode table.  */</comment>

          <decl_stmt pos:start="153:11" pos:end="153:29"><decl pos:start="153:11" pos:end="153:28"><type pos:start="153:11" pos:end="153:13"><name pos:start="153:11" pos:end="153:13">int</name></type> <name pos:start="153:15" pos:end="153:24">found_plus</name> <init pos:start="153:26" pos:end="153:28">= <expr pos:start="153:28" pos:end="153:28"><literal type="number" pos:start="153:28" pos:end="153:28">0</literal></expr></init></decl>;</decl_stmt>



          <comment type="block" pos:start="157:11" pos:end="157:58">/* Nonzero means we have an annulled branch.  */</comment>

          <comment type="block" pos:start="159:11" pos:end="159:36">/* int is_annulled = 0; */</comment> <comment type="block" pos:start="159:38" pos:end="159:58">/* see FIXME below */</comment>



          <comment type="block" pos:start="163:11" pos:end="165:36">/* Do we have an `add' or `or' instruction combining an

             immediate with rs1?  */</comment>

          <if_stmt pos:start="167:11" pos:end="169:32"><if pos:start="167:11" pos:end="169:32">if <condition pos:start="167:14" pos:end="167:42">(<expr pos:start="167:15" pos:end="167:41"><name pos:start="167:15" pos:end="167:27"><name pos:start="167:15" pos:end="167:20">opcode</name><operator pos:start="167:21" pos:end="167:22">-&gt;</operator><name pos:start="167:23" pos:end="167:27">match</name></name> <operator pos:start="167:29" pos:end="167:30">==</operator> <literal type="number" pos:start="167:32" pos:end="167:41">0x80102000</literal></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:32"><block_content pos:start="169:13" pos:end="169:32"> <comment type="block" pos:start="167:44" pos:end="167:51">/* or */</comment>

            <expr_stmt pos:start="169:13" pos:end="169:32"><expr pos:start="169:13" pos:end="169:31"><name pos:start="169:13" pos:end="169:27">imm_ored_to_rs1</name> <operator pos:start="169:29" pos:end="169:29">=</operator> <literal type="number" pos:start="169:31" pos:end="169:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

          <if_stmt pos:start="171:11" pos:end="173:33"><if pos:start="171:11" pos:end="173:33">if <condition pos:start="171:14" pos:end="171:42">(<expr pos:start="171:15" pos:end="171:41"><name pos:start="171:15" pos:end="171:27"><name pos:start="171:15" pos:end="171:20">opcode</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:27">match</name></name> <operator pos:start="171:29" pos:end="171:30">==</operator> <literal type="number" pos:start="171:32" pos:end="171:41">0x80002000</literal></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:33"><block_content pos:start="173:13" pos:end="173:33"> <comment type="block" pos:start="171:44" pos:end="171:52">/* add */</comment>

            <expr_stmt pos:start="173:13" pos:end="173:33"><expr pos:start="173:13" pos:end="173:32"><name pos:start="173:13" pos:end="173:28">imm_added_to_rs1</name> <operator pos:start="173:30" pos:end="173:30">=</operator> <literal type="number" pos:start="173:32" pos:end="173:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



          <if_stmt pos:start="177:11" pos:end="183:23"><if pos:start="177:11" pos:end="183:23">if <condition pos:start="177:14" pos:end="179:52">(<expr pos:start="177:15" pos:end="179:51"><call pos:start="177:15" pos:end="177:26"><name pos:start="177:15" pos:end="177:19">X_RS1</name> <argument_list pos:start="177:21" pos:end="177:26">(<argument pos:start="177:22" pos:end="177:25"><expr pos:start="177:22" pos:end="177:25"><name pos:start="177:22" pos:end="177:25">insn</name></expr></argument>)</argument_list></call> <operator pos:start="177:28" pos:end="177:29">!=</operator> <call pos:start="177:31" pos:end="177:41"><name pos:start="177:31" pos:end="177:34">X_RD</name> <argument_list pos:start="177:36" pos:end="177:41">(<argument pos:start="177:37" pos:end="177:40"><expr pos:start="177:37" pos:end="177:40"><name pos:start="177:37" pos:end="177:40">insn</name></expr></argument>)</argument_list></call>

              <operator pos:start="179:15" pos:end="179:16">&amp;&amp;</operator> <call pos:start="179:18" pos:end="179:43"><name pos:start="179:18" pos:end="179:23">strchr</name> <argument_list pos:start="179:25" pos:end="179:43">(<argument pos:start="179:26" pos:end="179:37"><expr pos:start="179:26" pos:end="179:37"><name pos:start="179:26" pos:end="179:37"><name pos:start="179:26" pos:end="179:31">opcode</name><operator pos:start="179:32" pos:end="179:33">-&gt;</operator><name pos:start="179:34" pos:end="179:37">args</name></name></expr></argument>, <argument pos:start="179:40" pos:end="179:42"><expr pos:start="179:40" pos:end="179:42"><literal type="char" pos:start="179:40" pos:end="179:42">'r'</literal></expr></argument>)</argument_list></call> <operator pos:start="179:45" pos:end="179:46">!=</operator> <name pos:start="179:48" pos:end="179:51">NULL</name></expr>)</condition><block type="pseudo" pos:start="183:15" pos:end="183:23"><block_content pos:start="183:15" pos:end="183:23">

              <comment type="block" pos:start="181:15" pos:end="181:77">/* Can't do simple format if source and dest are different.  */</comment>

              <continue pos:start="183:15" pos:end="183:23">continue;</continue></block_content></block></if></if_stmt>

          <if_stmt pos:start="185:11" pos:end="191:23"><if pos:start="185:11" pos:end="191:23">if <condition pos:start="185:14" pos:end="187:52">(<expr pos:start="185:15" pos:end="187:51"><call pos:start="185:15" pos:end="185:26"><name pos:start="185:15" pos:end="185:19">X_RS2</name> <argument_list pos:start="185:21" pos:end="185:26">(<argument pos:start="185:22" pos:end="185:25"><expr pos:start="185:22" pos:end="185:25"><name pos:start="185:22" pos:end="185:25">insn</name></expr></argument>)</argument_list></call> <operator pos:start="185:28" pos:end="185:29">!=</operator> <call pos:start="185:31" pos:end="185:41"><name pos:start="185:31" pos:end="185:34">X_RD</name> <argument_list pos:start="185:36" pos:end="185:41">(<argument pos:start="185:37" pos:end="185:40"><expr pos:start="185:37" pos:end="185:40"><name pos:start="185:37" pos:end="185:40">insn</name></expr></argument>)</argument_list></call>

              <operator pos:start="187:15" pos:end="187:16">&amp;&amp;</operator> <call pos:start="187:18" pos:end="187:43"><name pos:start="187:18" pos:end="187:23">strchr</name> <argument_list pos:start="187:25" pos:end="187:43">(<argument pos:start="187:26" pos:end="187:37"><expr pos:start="187:26" pos:end="187:37"><name pos:start="187:26" pos:end="187:37"><name pos:start="187:26" pos:end="187:31">opcode</name><operator pos:start="187:32" pos:end="187:33">-&gt;</operator><name pos:start="187:34" pos:end="187:37">args</name></name></expr></argument>, <argument pos:start="187:40" pos:end="187:42"><expr pos:start="187:40" pos:end="187:42"><literal type="char" pos:start="187:40" pos:end="187:42">'O'</literal></expr></argument>)</argument_list></call> <operator pos:start="187:45" pos:end="187:46">!=</operator> <name pos:start="187:48" pos:end="187:51">NULL</name></expr>)</condition><block type="pseudo" pos:start="191:15" pos:end="191:23"><block_content pos:start="191:15" pos:end="191:23">

              <comment type="block" pos:start="189:15" pos:end="189:77">/* Can't do simple format if source and dest are different.  */</comment>

              <continue pos:start="191:15" pos:end="191:23">continue;</continue></block_content></block></if></if_stmt>



          <expr_stmt pos:start="195:11" pos:end="195:61"><expr pos:start="195:11" pos:end="195:60"><call pos:start="195:11" pos:end="195:60">(<modifier pos:start="195:12" pos:end="195:12">*</modifier><name pos:start="195:13" pos:end="195:30"><name pos:start="195:13" pos:end="195:16">info</name><operator pos:start="195:17" pos:end="195:18">-&gt;</operator><name pos:start="195:19" pos:end="195:30">fprintf_func</name></name>) <argument_list pos:start="195:33" pos:end="195:60">(<argument pos:start="195:34" pos:end="195:39"><expr pos:start="195:34" pos:end="195:39"><name pos:start="195:34" pos:end="195:39">stream</name></expr></argument>, <argument pos:start="195:42" pos:end="195:45"><expr pos:start="195:42" pos:end="195:45"><literal type="string" pos:start="195:42" pos:end="195:45">"%s"</literal></expr></argument>, <argument pos:start="195:48" pos:end="195:59"><expr pos:start="195:48" pos:end="195:59"><name pos:start="195:48" pos:end="195:59"><name pos:start="195:48" pos:end="195:53">opcode</name><operator pos:start="195:54" pos:end="195:55">-&gt;</operator><name pos:start="195:56" pos:end="195:59">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



          <block pos:start="199:11" pos:end="965:11">{<block_content pos:start="201:13" pos:end="963:15">

            <decl_stmt pos:start="201:13" pos:end="201:26"><decl pos:start="201:13" pos:end="201:25"><type pos:start="201:13" pos:end="201:24"><specifier pos:start="201:13" pos:end="201:17">const</specifier> <name pos:start="201:19" pos:end="201:22">char</name> <modifier pos:start="201:24" pos:end="201:24">*</modifier></type><name pos:start="201:25" pos:end="201:25">s</name></decl>;</decl_stmt>



            <if_stmt pos:start="205:13" pos:end="207:50"><if pos:start="205:13" pos:end="207:50">if <condition pos:start="205:16" pos:end="205:39">(<expr pos:start="205:17" pos:end="205:38"><name pos:start="205:17" pos:end="205:31"><name pos:start="205:17" pos:end="205:22">opcode</name><operator pos:start="205:23" pos:end="205:24">-&gt;</operator><name pos:start="205:25" pos:end="205:28">args</name><index pos:start="205:29" pos:end="205:31">[<expr pos:start="205:30" pos:end="205:30"><literal type="number" pos:start="205:30" pos:end="205:30">0</literal></expr>]</index></name> <operator pos:start="205:33" pos:end="205:34">!=</operator> <literal type="char" pos:start="205:36" pos:end="205:38">','</literal></expr>)</condition><block type="pseudo" pos:start="207:15" pos:end="207:50"><block_content pos:start="207:15" pos:end="207:50">

              <expr_stmt pos:start="207:15" pos:end="207:50"><expr pos:start="207:15" pos:end="207:49"><call pos:start="207:15" pos:end="207:49">(<modifier pos:start="207:16" pos:end="207:16">*</modifier><name pos:start="207:17" pos:end="207:34"><name pos:start="207:17" pos:end="207:20">info</name><operator pos:start="207:21" pos:end="207:22">-&gt;</operator><name pos:start="207:23" pos:end="207:34">fprintf_func</name></name>) <argument_list pos:start="207:37" pos:end="207:49">(<argument pos:start="207:38" pos:end="207:43"><expr pos:start="207:38" pos:end="207:43"><name pos:start="207:38" pos:end="207:43">stream</name></expr></argument>, <argument pos:start="207:46" pos:end="207:48"><expr pos:start="207:46" pos:end="207:48"><literal type="string" pos:start="207:46" pos:end="207:48">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <for pos:start="211:13" pos:end="963:15">for <control pos:start="211:17" pos:end="211:51">(<init pos:start="211:18" pos:end="211:34"><expr pos:start="211:18" pos:end="211:33"><name pos:start="211:18" pos:end="211:18">s</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <name pos:start="211:22" pos:end="211:33"><name pos:start="211:22" pos:end="211:27">opcode</name><operator pos:start="211:28" pos:end="211:29">-&gt;</operator><name pos:start="211:30" pos:end="211:33">args</name></name></expr>;</init> <condition pos:start="211:36" pos:end="211:46"><expr pos:start="211:36" pos:end="211:45"><operator pos:start="211:36" pos:end="211:36">*</operator><name pos:start="211:37" pos:end="211:37">s</name> <operator pos:start="211:39" pos:end="211:40">!=</operator> <literal type="char" pos:start="211:42" pos:end="211:45">'\0'</literal></expr>;</condition> <incr pos:start="211:48" pos:end="211:50"><expr pos:start="211:48" pos:end="211:50"><operator pos:start="211:48" pos:end="211:49">++</operator><name pos:start="211:50" pos:end="211:50">s</name></expr></incr>)</control>

              <block pos:start="213:15" pos:end="963:15">{<block_content pos:start="215:17" pos:end="961:19">

                <while pos:start="215:17" pos:end="263:19">while <condition pos:start="215:23" pos:end="215:33">(<expr pos:start="215:24" pos:end="215:32"><operator pos:start="215:24" pos:end="215:24">*</operator><name pos:start="215:25" pos:end="215:25">s</name> <operator pos:start="215:27" pos:end="215:28">==</operator> <literal type="char" pos:start="215:30" pos:end="215:32">','</literal></expr>)</condition>

                  <block pos:start="217:19" pos:end="263:19">{<block_content pos:start="219:21" pos:end="261:23">

                    <expr_stmt pos:start="219:21" pos:end="219:56"><expr pos:start="219:21" pos:end="219:55"><call pos:start="219:21" pos:end="219:55">(<modifier pos:start="219:22" pos:end="219:22">*</modifier><name pos:start="219:23" pos:end="219:40"><name pos:start="219:23" pos:end="219:26">info</name><operator pos:start="219:27" pos:end="219:28">-&gt;</operator><name pos:start="219:29" pos:end="219:40">fprintf_func</name></name>) <argument_list pos:start="219:43" pos:end="219:55">(<argument pos:start="219:44" pos:end="219:49"><expr pos:start="219:44" pos:end="219:49"><name pos:start="219:44" pos:end="219:49">stream</name></expr></argument>, <argument pos:start="219:52" pos:end="219:54"><expr pos:start="219:52" pos:end="219:54"><literal type="string" pos:start="219:52" pos:end="219:54">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="221:21" pos:end="221:24"><expr pos:start="221:21" pos:end="221:23"><operator pos:start="221:21" pos:end="221:22">++</operator><name pos:start="221:23" pos:end="221:23">s</name></expr>;</expr_stmt>

                    <switch pos:start="223:21" pos:end="261:23">switch <condition pos:start="223:28" pos:end="223:31">(<expr pos:start="223:29" pos:end="223:30"><operator pos:start="223:29" pos:end="223:29">*</operator><name pos:start="223:30" pos:end="223:30">s</name></expr>)</condition>

                      <block pos:start="225:23" pos:end="261:23">{<block_content pos:start="227:23" pos:end="259:30">

                      <case pos:start="227:23" pos:end="227:31">case <expr pos:start="227:28" pos:end="227:30"><literal type="char" pos:start="227:28" pos:end="227:30">'a'</literal></expr>:</case>

                        <expr_stmt pos:start="229:25" pos:end="229:60"><expr pos:start="229:25" pos:end="229:59"><call pos:start="229:25" pos:end="229:59">(<modifier pos:start="229:26" pos:end="229:26">*</modifier><name pos:start="229:27" pos:end="229:44"><name pos:start="229:27" pos:end="229:30">info</name><operator pos:start="229:31" pos:end="229:32">-&gt;</operator><name pos:start="229:33" pos:end="229:44">fprintf_func</name></name>) <argument_list pos:start="229:47" pos:end="229:59">(<argument pos:start="229:48" pos:end="229:53"><expr pos:start="229:48" pos:end="229:53"><name pos:start="229:48" pos:end="229:53">stream</name></expr></argument>, <argument pos:start="229:56" pos:end="229:58"><expr pos:start="229:56" pos:end="229:58"><literal type="string" pos:start="229:56" pos:end="229:58">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="231:25" pos:end="231:46">/* is_annulled = 1; */</comment> <comment type="block" pos:start="231:48" pos:end="231:68">/* see FIXME below */</comment>

                        <expr_stmt pos:start="233:25" pos:end="233:28"><expr pos:start="233:25" pos:end="233:27"><operator pos:start="233:25" pos:end="233:26">++</operator><name pos:start="233:27" pos:end="233:27">s</name></expr>;</expr_stmt>

                        <continue pos:start="235:25" pos:end="235:33">continue;</continue>

                      <case pos:start="237:23" pos:end="237:31">case <expr pos:start="237:28" pos:end="237:30"><literal type="char" pos:start="237:28" pos:end="237:30">'N'</literal></expr>:</case>

                        <expr_stmt pos:start="239:25" pos:end="239:61"><expr pos:start="239:25" pos:end="239:60"><call pos:start="239:25" pos:end="239:60">(<modifier pos:start="239:26" pos:end="239:26">*</modifier><name pos:start="239:27" pos:end="239:44"><name pos:start="239:27" pos:end="239:30">info</name><operator pos:start="239:31" pos:end="239:32">-&gt;</operator><name pos:start="239:33" pos:end="239:44">fprintf_func</name></name>) <argument_list pos:start="239:47" pos:end="239:60">(<argument pos:start="239:48" pos:end="239:53"><expr pos:start="239:48" pos:end="239:53"><name pos:start="239:48" pos:end="239:53">stream</name></expr></argument>, <argument pos:start="239:56" pos:end="239:59"><expr pos:start="239:56" pos:end="239:59"><literal type="string" pos:start="239:56" pos:end="239:59">"pn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="241:25" pos:end="241:28"><expr pos:start="241:25" pos:end="241:27"><operator pos:start="241:25" pos:end="241:26">++</operator><name pos:start="241:27" pos:end="241:27">s</name></expr>;</expr_stmt>

                        <continue pos:start="243:25" pos:end="243:33">continue;</continue>



                      <case pos:start="247:23" pos:end="247:31">case <expr pos:start="247:28" pos:end="247:30"><literal type="char" pos:start="247:28" pos:end="247:30">'T'</literal></expr>:</case>

                        <expr_stmt pos:start="249:25" pos:end="249:61"><expr pos:start="249:25" pos:end="249:60"><call pos:start="249:25" pos:end="249:60">(<modifier pos:start="249:26" pos:end="249:26">*</modifier><name pos:start="249:27" pos:end="249:44"><name pos:start="249:27" pos:end="249:30">info</name><operator pos:start="249:31" pos:end="249:32">-&gt;</operator><name pos:start="249:33" pos:end="249:44">fprintf_func</name></name>) <argument_list pos:start="249:47" pos:end="249:60">(<argument pos:start="249:48" pos:end="249:53"><expr pos:start="249:48" pos:end="249:53"><name pos:start="249:48" pos:end="249:53">stream</name></expr></argument>, <argument pos:start="249:56" pos:end="249:59"><expr pos:start="249:56" pos:end="249:59"><literal type="string" pos:start="249:56" pos:end="249:59">"pt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="251:25" pos:end="251:28"><expr pos:start="251:25" pos:end="251:27"><operator pos:start="251:25" pos:end="251:26">++</operator><name pos:start="251:27" pos:end="251:27">s</name></expr>;</expr_stmt>

                        <continue pos:start="253:25" pos:end="253:33">continue;</continue>



                      <default pos:start="257:23" pos:end="257:30">default:</default>

                        <break pos:start="259:25" pos:end="259:30">break;</break>

                      </block_content>}</block></switch>

                  </block_content>}</block></while>



                <expr_stmt pos:start="267:17" pos:end="267:52"><expr pos:start="267:17" pos:end="267:51"><call pos:start="267:17" pos:end="267:51">(<modifier pos:start="267:18" pos:end="267:18">*</modifier><name pos:start="267:19" pos:end="267:36"><name pos:start="267:19" pos:end="267:22">info</name><operator pos:start="267:23" pos:end="267:24">-&gt;</operator><name pos:start="267:25" pos:end="267:36">fprintf_func</name></name>) <argument_list pos:start="267:39" pos:end="267:51">(<argument pos:start="267:40" pos:end="267:45"><expr pos:start="267:40" pos:end="267:45"><name pos:start="267:40" pos:end="267:45">stream</name></expr></argument>, <argument pos:start="267:48" pos:end="267:50"><expr pos:start="267:48" pos:end="267:50"><literal type="string" pos:start="267:48" pos:end="267:50">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <switch pos:start="271:17" pos:end="961:19">switch <condition pos:start="271:24" pos:end="271:27">(<expr pos:start="271:25" pos:end="271:26"><operator pos:start="271:25" pos:end="271:25">*</operator><name pos:start="271:26" pos:end="271:26">s</name></expr>)</condition>

                  <block pos:start="273:19" pos:end="961:19">{<block_content pos:start="275:19" pos:end="959:21">

                  <case pos:start="275:19" pos:end="275:27">case <expr pos:start="275:24" pos:end="275:26"><literal type="char" pos:start="275:24" pos:end="275:26">'+'</literal></expr>:</case>

                    <expr_stmt pos:start="277:21" pos:end="277:35"><expr pos:start="277:21" pos:end="277:34"><name pos:start="277:21" pos:end="277:30">found_plus</name> <operator pos:start="277:32" pos:end="277:32">=</operator> <literal type="number" pos:start="277:34" pos:end="277:34">1</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="279:21" pos:end="279:40">/* Fall through.  */</comment>



                  <default pos:start="283:19" pos:end="283:26">default:</default>

                    <expr_stmt pos:start="285:21" pos:end="285:61"><expr pos:start="285:21" pos:end="285:60"><call pos:start="285:21" pos:end="285:60">(<modifier pos:start="285:22" pos:end="285:22">*</modifier><name pos:start="285:23" pos:end="285:40"><name pos:start="285:23" pos:end="285:26">info</name><operator pos:start="285:27" pos:end="285:28">-&gt;</operator><name pos:start="285:29" pos:end="285:40">fprintf_func</name></name>) <argument_list pos:start="285:43" pos:end="285:60">(<argument pos:start="285:44" pos:end="285:49"><expr pos:start="285:44" pos:end="285:49"><name pos:start="285:44" pos:end="285:49">stream</name></expr></argument>, <argument pos:start="285:52" pos:end="285:55"><expr pos:start="285:52" pos:end="285:55"><literal type="string" pos:start="285:52" pos:end="285:55">"%c"</literal></expr></argument>, <argument pos:start="285:58" pos:end="285:59"><expr pos:start="285:58" pos:end="285:59"><operator pos:start="285:58" pos:end="285:58">*</operator><name pos:start="285:59" pos:end="285:59">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="287:21" pos:end="287:26">break;</break>



                  <case pos:start="291:19" pos:end="291:27">case <expr pos:start="291:24" pos:end="291:26"><literal type="char" pos:start="291:24" pos:end="291:26">'#'</literal></expr>:</case>

                    <expr_stmt pos:start="293:21" pos:end="293:56"><expr pos:start="293:21" pos:end="293:55"><call pos:start="293:21" pos:end="293:55">(<modifier pos:start="293:22" pos:end="293:22">*</modifier><name pos:start="293:23" pos:end="293:40"><name pos:start="293:23" pos:end="293:26">info</name><operator pos:start="293:27" pos:end="293:28">-&gt;</operator><name pos:start="293:29" pos:end="293:40">fprintf_func</name></name>) <argument_list pos:start="293:43" pos:end="293:55">(<argument pos:start="293:44" pos:end="293:49"><expr pos:start="293:44" pos:end="293:49"><name pos:start="293:44" pos:end="293:49">stream</name></expr></argument>, <argument pos:start="293:52" pos:end="293:54"><expr pos:start="293:52" pos:end="293:54"><literal type="string" pos:start="293:52" pos:end="293:54">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="295:21" pos:end="300:0">break;</break>



<cpp:define pos:start="299:1" pos:end="299:68">#<cpp:directive pos:start="299:2" pos:end="299:7">define</cpp:directive> <cpp:macro pos:start="299:9" pos:end="299:14"><name pos:start="299:9" pos:end="299:11">reg</name><parameter_list pos:start="299:12" pos:end="299:14">(<parameter pos:start="299:13" pos:end="299:13"><type pos:start="299:13" pos:end="299:13"><name pos:start="299:13" pos:end="299:13">n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value pos:start="299:17" pos:end="299:68">(*info-&gt;fprintf_func) (stream, "%%%s", reg_names[n])</cpp:value></cpp:define>

                  <case pos:start="301:19" pos:end="301:27">case <expr pos:start="301:24" pos:end="301:26"><literal type="char" pos:start="301:24" pos:end="301:26">'1'</literal></expr>:</case>

                  <case pos:start="303:19" pos:end="303:27">case <expr pos:start="303:24" pos:end="303:26"><literal type="char" pos:start="303:24" pos:end="303:26">'r'</literal></expr>:</case>

                    <expr_stmt pos:start="305:21" pos:end="305:39"><expr pos:start="305:21" pos:end="305:38"><call pos:start="305:21" pos:end="305:38"><name pos:start="305:21" pos:end="305:23">reg</name> <argument_list pos:start="305:25" pos:end="305:38">(<argument pos:start="305:26" pos:end="305:37"><expr pos:start="305:26" pos:end="305:37"><call pos:start="305:26" pos:end="305:37"><name pos:start="305:26" pos:end="305:30">X_RS1</name> <argument_list pos:start="305:32" pos:end="305:37">(<argument pos:start="305:33" pos:end="305:36"><expr pos:start="305:33" pos:end="305:36"><name pos:start="305:33" pos:end="305:36">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="307:21" pos:end="307:26">break;</break>



                  <case pos:start="311:19" pos:end="311:27">case <expr pos:start="311:24" pos:end="311:26"><literal type="char" pos:start="311:24" pos:end="311:26">'2'</literal></expr>:</case>

                  <case pos:start="313:19" pos:end="313:27">case <expr pos:start="313:24" pos:end="313:26"><literal type="char" pos:start="313:24" pos:end="313:26">'O'</literal></expr>:</case>

                    <expr_stmt pos:start="315:21" pos:end="315:39"><expr pos:start="315:21" pos:end="315:38"><call pos:start="315:21" pos:end="315:38"><name pos:start="315:21" pos:end="315:23">reg</name> <argument_list pos:start="315:25" pos:end="315:38">(<argument pos:start="315:26" pos:end="315:37"><expr pos:start="315:26" pos:end="315:37"><call pos:start="315:26" pos:end="315:37"><name pos:start="315:26" pos:end="315:30">X_RS2</name> <argument_list pos:start="315:32" pos:end="315:37">(<argument pos:start="315:33" pos:end="315:36"><expr pos:start="315:33" pos:end="315:36"><name pos:start="315:33" pos:end="315:36">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="317:21" pos:end="317:26">break;</break>



                  <case pos:start="321:19" pos:end="321:27">case <expr pos:start="321:24" pos:end="321:26"><literal type="char" pos:start="321:24" pos:end="321:26">'d'</literal></expr>:</case>

                    <expr_stmt pos:start="323:21" pos:end="323:38"><expr pos:start="323:21" pos:end="323:37"><call pos:start="323:21" pos:end="323:37"><name pos:start="323:21" pos:end="323:23">reg</name> <argument_list pos:start="323:25" pos:end="323:37">(<argument pos:start="323:26" pos:end="323:36"><expr pos:start="323:26" pos:end="323:36"><call pos:start="323:26" pos:end="323:36"><name pos:start="323:26" pos:end="323:29">X_RD</name> <argument_list pos:start="323:31" pos:end="323:36">(<argument pos:start="323:32" pos:end="323:35"><expr pos:start="323:32" pos:end="323:35"><name pos:start="323:32" pos:end="323:35">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="325:21" pos:end="334:0">break;</break>

<cpp:undef pos:start="327:1" pos:end="327:11">#<cpp:directive pos:start="327:2" pos:end="327:6">undef</cpp:directive>  <name pos:start="327:9" pos:end="327:11">reg</name></cpp:undef>



<cpp:define pos:start="331:1" pos:end="331:77">#<cpp:directive pos:start="331:2" pos:end="331:7">define</cpp:directive> <cpp:macro pos:start="331:9" pos:end="331:15"><name pos:start="331:9" pos:end="331:12">freg</name><parameter_list pos:start="331:13" pos:end="331:15">(<parameter pos:start="331:14" pos:end="331:14"><type pos:start="331:14" pos:end="331:14"><name pos:start="331:14" pos:end="331:14">n</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value pos:start="331:25" pos:end="331:77">(*info-&gt;fprintf_func) (stream, "%%%s", freg_names[n])</cpp:value></cpp:define>

<cpp:define pos:start="333:1" pos:end="333:105">#<cpp:directive pos:start="333:2" pos:end="333:7">define</cpp:directive> <cpp:macro pos:start="333:9" pos:end="333:16"><name pos:start="333:9" pos:end="333:13">fregx</name><parameter_list pos:start="333:14" pos:end="333:16">(<parameter pos:start="333:15" pos:end="333:15"><type pos:start="333:15" pos:end="333:15"><name pos:start="333:15" pos:end="333:15">n</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value pos:start="333:25" pos:end="333:105">(*info-&gt;fprintf_func) (stream, "%%%s", freg_names[((n) &amp; ~1) | (((n) &amp; 1) &lt;&lt; 5)])</cpp:value></cpp:define>

                  <case pos:start="335:19" pos:end="335:27">case <expr pos:start="335:24" pos:end="335:26"><literal type="char" pos:start="335:24" pos:end="335:26">'e'</literal></expr>:</case>

                    <expr_stmt pos:start="337:21" pos:end="337:40"><expr pos:start="337:21" pos:end="337:39"><call pos:start="337:21" pos:end="337:39"><name pos:start="337:21" pos:end="337:24">freg</name> <argument_list pos:start="337:26" pos:end="337:39">(<argument pos:start="337:27" pos:end="337:38"><expr pos:start="337:27" pos:end="337:38"><call pos:start="337:27" pos:end="337:38"><name pos:start="337:27" pos:end="337:31">X_RS1</name> <argument_list pos:start="337:33" pos:end="337:38">(<argument pos:start="337:34" pos:end="337:37"><expr pos:start="337:34" pos:end="337:37"><name pos:start="337:34" pos:end="337:37">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="339:21" pos:end="339:26">break;</break>

                  <case pos:start="341:19" pos:end="341:27">case <expr pos:start="341:24" pos:end="341:26"><literal type="char" pos:start="341:24" pos:end="341:26">'v'</literal></expr>:</case>     <comment type="block" pos:start="341:33" pos:end="341:51">/* Double/even.  */</comment>

                  <case pos:start="343:19" pos:end="343:27">case <expr pos:start="343:24" pos:end="343:26"><literal type="char" pos:start="343:24" pos:end="343:26">'V'</literal></expr>:</case>     <comment type="block" pos:start="343:33" pos:end="343:58">/* Quad/multiple of 4.  */</comment>

                    <expr_stmt pos:start="345:21" pos:end="345:41"><expr pos:start="345:21" pos:end="345:40"><call pos:start="345:21" pos:end="345:40"><name pos:start="345:21" pos:end="345:25">fregx</name> <argument_list pos:start="345:27" pos:end="345:40">(<argument pos:start="345:28" pos:end="345:39"><expr pos:start="345:28" pos:end="345:39"><call pos:start="345:28" pos:end="345:39"><name pos:start="345:28" pos:end="345:32">X_RS1</name> <argument_list pos:start="345:34" pos:end="345:39">(<argument pos:start="345:35" pos:end="345:38"><expr pos:start="345:35" pos:end="345:38"><name pos:start="345:35" pos:end="345:38">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="347:21" pos:end="347:26">break;</break>



                  <case pos:start="351:19" pos:end="351:27">case <expr pos:start="351:24" pos:end="351:26"><literal type="char" pos:start="351:24" pos:end="351:26">'f'</literal></expr>:</case>

                    <expr_stmt pos:start="353:21" pos:end="353:40"><expr pos:start="353:21" pos:end="353:39"><call pos:start="353:21" pos:end="353:39"><name pos:start="353:21" pos:end="353:24">freg</name> <argument_list pos:start="353:26" pos:end="353:39">(<argument pos:start="353:27" pos:end="353:38"><expr pos:start="353:27" pos:end="353:38"><call pos:start="353:27" pos:end="353:38"><name pos:start="353:27" pos:end="353:31">X_RS2</name> <argument_list pos:start="353:33" pos:end="353:38">(<argument pos:start="353:34" pos:end="353:37"><expr pos:start="353:34" pos:end="353:37"><name pos:start="353:34" pos:end="353:37">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="355:21" pos:end="355:26">break;</break>

                  <case pos:start="357:19" pos:end="357:27">case <expr pos:start="357:24" pos:end="357:26"><literal type="char" pos:start="357:24" pos:end="357:26">'B'</literal></expr>:</case>     <comment type="block" pos:start="357:33" pos:end="357:51">/* Double/even.  */</comment>

                  <case pos:start="359:19" pos:end="359:27">case <expr pos:start="359:24" pos:end="359:26"><literal type="char" pos:start="359:24" pos:end="359:26">'R'</literal></expr>:</case>     <comment type="block" pos:start="359:33" pos:end="359:58">/* Quad/multiple of 4.  */</comment>

                    <expr_stmt pos:start="361:21" pos:end="361:41"><expr pos:start="361:21" pos:end="361:40"><call pos:start="361:21" pos:end="361:40"><name pos:start="361:21" pos:end="361:25">fregx</name> <argument_list pos:start="361:27" pos:end="361:40">(<argument pos:start="361:28" pos:end="361:39"><expr pos:start="361:28" pos:end="361:39"><call pos:start="361:28" pos:end="361:39"><name pos:start="361:28" pos:end="361:32">X_RS2</name> <argument_list pos:start="361:34" pos:end="361:39">(<argument pos:start="361:35" pos:end="361:38"><expr pos:start="361:35" pos:end="361:38"><name pos:start="361:35" pos:end="361:38">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="363:21" pos:end="363:26">break;</break>



                  <case pos:start="367:19" pos:end="367:27">case <expr pos:start="367:24" pos:end="367:26"><literal type="char" pos:start="367:24" pos:end="367:26">'g'</literal></expr>:</case>

                    <expr_stmt pos:start="369:21" pos:end="369:39"><expr pos:start="369:21" pos:end="369:38"><call pos:start="369:21" pos:end="369:38"><name pos:start="369:21" pos:end="369:24">freg</name> <argument_list pos:start="369:26" pos:end="369:38">(<argument pos:start="369:27" pos:end="369:37"><expr pos:start="369:27" pos:end="369:37"><call pos:start="369:27" pos:end="369:37"><name pos:start="369:27" pos:end="369:30">X_RD</name> <argument_list pos:start="369:32" pos:end="369:37">(<argument pos:start="369:33" pos:end="369:36"><expr pos:start="369:33" pos:end="369:36"><name pos:start="369:33" pos:end="369:36">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="371:21" pos:end="371:26">break;</break>

                  <case pos:start="373:19" pos:end="373:27">case <expr pos:start="373:24" pos:end="373:26"><literal type="char" pos:start="373:24" pos:end="373:26">'H'</literal></expr>:</case>     <comment type="block" pos:start="373:33" pos:end="373:51">/* Double/even.  */</comment>

                  <case pos:start="375:19" pos:end="375:27">case <expr pos:start="375:24" pos:end="375:26"><literal type="char" pos:start="375:24" pos:end="375:26">'J'</literal></expr>:</case>     <comment type="block" pos:start="375:33" pos:end="375:58">/* Quad/multiple of 4.  */</comment>

                    <expr_stmt pos:start="377:21" pos:end="377:40"><expr pos:start="377:21" pos:end="377:39"><call pos:start="377:21" pos:end="377:39"><name pos:start="377:21" pos:end="377:25">fregx</name> <argument_list pos:start="377:27" pos:end="377:39">(<argument pos:start="377:28" pos:end="377:38"><expr pos:start="377:28" pos:end="377:38"><call pos:start="377:28" pos:end="377:38"><name pos:start="377:28" pos:end="377:31">X_RD</name> <argument_list pos:start="377:33" pos:end="377:38">(<argument pos:start="377:34" pos:end="377:37"><expr pos:start="377:34" pos:end="377:37"><name pos:start="377:34" pos:end="377:37">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="379:21" pos:end="388:0">break;</break>

<cpp:undef pos:start="381:1" pos:end="381:12">#<cpp:directive pos:start="381:2" pos:end="381:6">undef</cpp:directive>  <name pos:start="381:9" pos:end="381:12">freg</name></cpp:undef>

<cpp:undef pos:start="383:1" pos:end="383:13">#<cpp:directive pos:start="383:2" pos:end="383:6">undef</cpp:directive>  <name pos:start="383:9" pos:end="383:13">fregx</name></cpp:undef>



<cpp:define pos:start="387:1" pos:end="387:75">#<cpp:directive pos:start="387:2" pos:end="387:7">define</cpp:directive> <cpp:macro pos:start="387:9" pos:end="387:15"><name pos:start="387:9" pos:end="387:12">creg</name><parameter_list pos:start="387:13" pos:end="387:15">(<parameter pos:start="387:14" pos:end="387:14"><type pos:start="387:14" pos:end="387:14"><name pos:start="387:14" pos:end="387:14">n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="387:17" pos:end="387:75">(*info-&gt;fprintf_func) (stream, "%%c%u", (unsigned int) (n))</cpp:value></cpp:define>

                  <case pos:start="389:19" pos:end="389:27">case <expr pos:start="389:24" pos:end="389:26"><literal type="char" pos:start="389:24" pos:end="389:26">'b'</literal></expr>:</case>

                    <expr_stmt pos:start="391:21" pos:end="391:40"><expr pos:start="391:21" pos:end="391:39"><call pos:start="391:21" pos:end="391:39"><name pos:start="391:21" pos:end="391:24">creg</name> <argument_list pos:start="391:26" pos:end="391:39">(<argument pos:start="391:27" pos:end="391:38"><expr pos:start="391:27" pos:end="391:38"><call pos:start="391:27" pos:end="391:38"><name pos:start="391:27" pos:end="391:31">X_RS1</name> <argument_list pos:start="391:33" pos:end="391:38">(<argument pos:start="391:34" pos:end="391:37"><expr pos:start="391:34" pos:end="391:37"><name pos:start="391:34" pos:end="391:37">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="393:21" pos:end="393:26">break;</break>



                  <case pos:start="397:19" pos:end="397:27">case <expr pos:start="397:24" pos:end="397:26"><literal type="char" pos:start="397:24" pos:end="397:26">'c'</literal></expr>:</case>

                    <expr_stmt pos:start="399:21" pos:end="399:40"><expr pos:start="399:21" pos:end="399:39"><call pos:start="399:21" pos:end="399:39"><name pos:start="399:21" pos:end="399:24">creg</name> <argument_list pos:start="399:26" pos:end="399:39">(<argument pos:start="399:27" pos:end="399:38"><expr pos:start="399:27" pos:end="399:38"><call pos:start="399:27" pos:end="399:38"><name pos:start="399:27" pos:end="399:31">X_RS2</name> <argument_list pos:start="399:33" pos:end="399:38">(<argument pos:start="399:34" pos:end="399:37"><expr pos:start="399:34" pos:end="399:37"><name pos:start="399:34" pos:end="399:37">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="401:21" pos:end="401:26">break;</break>



                  <case pos:start="405:19" pos:end="405:27">case <expr pos:start="405:24" pos:end="405:26"><literal type="char" pos:start="405:24" pos:end="405:26">'D'</literal></expr>:</case>

                    <expr_stmt pos:start="407:21" pos:end="407:39"><expr pos:start="407:21" pos:end="407:38"><call pos:start="407:21" pos:end="407:38"><name pos:start="407:21" pos:end="407:24">creg</name> <argument_list pos:start="407:26" pos:end="407:38">(<argument pos:start="407:27" pos:end="407:37"><expr pos:start="407:27" pos:end="407:37"><call pos:start="407:27" pos:end="407:37"><name pos:start="407:27" pos:end="407:30">X_RD</name> <argument_list pos:start="407:32" pos:end="407:37">(<argument pos:start="407:33" pos:end="407:36"><expr pos:start="407:33" pos:end="407:36"><name pos:start="407:33" pos:end="407:36">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="409:21" pos:end="412:0">break;</break>

<cpp:undef pos:start="411:1" pos:end="411:12">#<cpp:directive pos:start="411:2" pos:end="411:6">undef</cpp:directive>  <name pos:start="411:9" pos:end="411:12">creg</name></cpp:undef>



                  <case pos:start="415:19" pos:end="415:27">case <expr pos:start="415:24" pos:end="415:26"><literal type="char" pos:start="415:24" pos:end="415:26">'h'</literal></expr>:</case>

                    <expr_stmt pos:start="417:21" pos:end="421:77"><expr pos:start="417:21" pos:end="421:76"><call pos:start="417:21" pos:end="421:76">(<modifier pos:start="417:22" pos:end="417:22">*</modifier><name pos:start="417:23" pos:end="417:40"><name pos:start="417:23" pos:end="417:26">info</name><operator pos:start="417:27" pos:end="417:28">-&gt;</operator><name pos:start="417:29" pos:end="417:40">fprintf_func</name></name>) <argument_list pos:start="417:43" pos:end="421:76">(<argument pos:start="417:44" pos:end="417:49"><expr pos:start="417:44" pos:end="417:49"><name pos:start="417:44" pos:end="417:49">stream</name></expr></argument>, <argument pos:start="417:52" pos:end="417:62"><expr pos:start="417:52" pos:end="417:62"><literal type="string" pos:start="417:52" pos:end="417:62">"%%hi(%#x)"</literal></expr></argument>,

                                           <argument pos:start="419:44" pos:end="421:75"><expr pos:start="419:44" pos:end="421:75"><operator pos:start="419:44" pos:end="419:44">(</operator><operator pos:start="419:45" pos:end="419:45">(</operator><name pos:start="419:46" pos:end="419:53">unsigned</name><operator pos:start="419:54" pos:end="419:54">)</operator> <literal type="number" pos:start="419:56" pos:end="419:65">0xFFFFFFFF</literal>

                                            <operator pos:start="421:45" pos:end="421:45">&amp;</operator> <operator pos:start="421:47" pos:end="421:47">(</operator><operator pos:start="421:48" pos:end="421:48">(</operator><name pos:start="421:49" pos:end="421:51">int</name><operator pos:start="421:52" pos:end="421:52">)</operator> <call pos:start="421:54" pos:end="421:67"><name pos:start="421:54" pos:end="421:60">X_IMM22</name> <argument_list pos:start="421:62" pos:end="421:67">(<argument pos:start="421:63" pos:end="421:66"><expr pos:start="421:63" pos:end="421:66"><name pos:start="421:63" pos:end="421:66">insn</name></expr></argument>)</argument_list></call> <operator pos:start="421:69" pos:end="421:70">&lt;&lt;</operator> <literal type="number" pos:start="421:72" pos:end="421:73">10</literal><operator pos:start="421:74" pos:end="421:74">)</operator><operator pos:start="421:75" pos:end="421:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="423:21" pos:end="423:26">break;</break>



                  <case pos:start="427:19" pos:end="427:27">case <expr pos:start="427:24" pos:end="427:26"><literal type="char" pos:start="427:24" pos:end="427:26">'i'</literal></expr>:</case>     <comment type="block" pos:start="427:33" pos:end="427:56">/* 13 bit immediate.  */</comment>

                  <case pos:start="429:19" pos:end="429:27">case <expr pos:start="429:24" pos:end="429:26"><literal type="char" pos:start="429:24" pos:end="429:26">'I'</literal></expr>:</case>     <comment type="block" pos:start="429:33" pos:end="429:56">/* 11 bit immediate.  */</comment>

                  <case pos:start="431:19" pos:end="431:27">case <expr pos:start="431:24" pos:end="431:26"><literal type="char" pos:start="431:24" pos:end="431:26">'j'</literal></expr>:</case>     <comment type="block" pos:start="431:33" pos:end="431:56">/* 10 bit immediate.  */</comment>

                    <block pos:start="433:21" pos:end="481:21">{<block_content pos:start="435:23" pos:end="479:67">

                      <decl_stmt pos:start="435:23" pos:end="435:30"><decl pos:start="435:23" pos:end="435:29"><type pos:start="435:23" pos:end="435:25"><name pos:start="435:23" pos:end="435:25">int</name></type> <name pos:start="435:27" pos:end="435:29">imm</name></decl>;</decl_stmt>



                      <if_stmt pos:start="439:23" pos:end="449:48"><if pos:start="439:23" pos:end="441:48">if <condition pos:start="439:26" pos:end="439:36">(<expr pos:start="439:27" pos:end="439:35"><operator pos:start="439:27" pos:end="439:27">*</operator><name pos:start="439:28" pos:end="439:28">s</name> <operator pos:start="439:30" pos:end="439:31">==</operator> <literal type="char" pos:start="439:33" pos:end="439:35">'i'</literal></expr>)</condition><block type="pseudo" pos:start="441:25" pos:end="441:48"><block_content pos:start="441:25" pos:end="441:48">

                        <expr_stmt pos:start="441:25" pos:end="441:48"><expr pos:start="441:25" pos:end="441:47"><name pos:start="441:25" pos:end="441:27">imm</name> <operator pos:start="441:29" pos:end="441:29">=</operator> <call pos:start="441:31" pos:end="441:47"><name pos:start="441:31" pos:end="441:36">X_SIMM</name> <argument_list pos:start="441:38" pos:end="441:47">(<argument pos:start="441:39" pos:end="441:42"><expr pos:start="441:39" pos:end="441:42"><name pos:start="441:39" pos:end="441:42">insn</name></expr></argument>, <argument pos:start="441:45" pos:end="441:46"><expr pos:start="441:45" pos:end="441:46"><literal type="number" pos:start="441:45" pos:end="441:46">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                      <if type="elseif" pos:start="443:23" pos:end="445:48">else if <condition pos:start="443:31" pos:end="443:41">(<expr pos:start="443:32" pos:end="443:40"><operator pos:start="443:32" pos:end="443:32">*</operator><name pos:start="443:33" pos:end="443:33">s</name> <operator pos:start="443:35" pos:end="443:36">==</operator> <literal type="char" pos:start="443:38" pos:end="443:40">'I'</literal></expr>)</condition><block type="pseudo" pos:start="445:25" pos:end="445:48"><block_content pos:start="445:25" pos:end="445:48">

                        <expr_stmt pos:start="445:25" pos:end="445:48"><expr pos:start="445:25" pos:end="445:47"><name pos:start="445:25" pos:end="445:27">imm</name> <operator pos:start="445:29" pos:end="445:29">=</operator> <call pos:start="445:31" pos:end="445:47"><name pos:start="445:31" pos:end="445:36">X_SIMM</name> <argument_list pos:start="445:38" pos:end="445:47">(<argument pos:start="445:39" pos:end="445:42"><expr pos:start="445:39" pos:end="445:42"><name pos:start="445:39" pos:end="445:42">insn</name></expr></argument>, <argument pos:start="445:45" pos:end="445:46"><expr pos:start="445:45" pos:end="445:46"><literal type="number" pos:start="445:45" pos:end="445:46">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="447:23" pos:end="449:48">else<block type="pseudo" pos:start="449:25" pos:end="449:48"><block_content pos:start="449:25" pos:end="449:48">

                        <expr_stmt pos:start="449:25" pos:end="449:48"><expr pos:start="449:25" pos:end="449:47"><name pos:start="449:25" pos:end="449:27">imm</name> <operator pos:start="449:29" pos:end="449:29">=</operator> <call pos:start="449:31" pos:end="449:47"><name pos:start="449:31" pos:end="449:36">X_SIMM</name> <argument_list pos:start="449:38" pos:end="449:47">(<argument pos:start="449:39" pos:end="449:42"><expr pos:start="449:39" pos:end="449:42"><name pos:start="449:39" pos:end="449:42">insn</name></expr></argument>, <argument pos:start="449:45" pos:end="449:46"><expr pos:start="449:45" pos:end="449:46"><literal type="number" pos:start="449:45" pos:end="449:46">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                      <comment type="block" pos:start="453:23" pos:end="465:43">/* Check to see whether we have a 1+i, and take

                         note of that fact.



                         Note: because of the way we sort the table,

                         we will be matching 1+i rather than i+1,

                         so it is OK to assume that i is after +,

                         not before it.  */</comment>

                      <if_stmt pos:start="467:23" pos:end="469:45"><if pos:start="467:23" pos:end="469:45">if <condition pos:start="467:26" pos:end="467:37">(<expr pos:start="467:27" pos:end="467:36"><name pos:start="467:27" pos:end="467:36">found_plus</name></expr>)</condition><block type="pseudo" pos:start="469:25" pos:end="469:45"><block_content pos:start="469:25" pos:end="469:45">

                        <expr_stmt pos:start="469:25" pos:end="469:45"><expr pos:start="469:25" pos:end="469:44"><name pos:start="469:25" pos:end="469:40">imm_added_to_rs1</name> <operator pos:start="469:42" pos:end="469:42">=</operator> <literal type="number" pos:start="469:44" pos:end="469:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                      <if_stmt pos:start="473:23" pos:end="479:67"><if pos:start="473:23" pos:end="475:66">if <condition pos:start="473:26" pos:end="473:35">(<expr pos:start="473:27" pos:end="473:34"><name pos:start="473:27" pos:end="473:29">imm</name> <operator pos:start="473:31" pos:end="473:32">&lt;=</operator> <literal type="number" pos:start="473:34" pos:end="473:34">9</literal></expr>)</condition><block type="pseudo" pos:start="475:25" pos:end="475:66"><block_content pos:start="475:25" pos:end="475:66">

                        <expr_stmt pos:start="475:25" pos:end="475:66"><expr pos:start="475:25" pos:end="475:65"><call pos:start="475:25" pos:end="475:65">(<modifier pos:start="475:26" pos:end="475:26">*</modifier><name pos:start="475:27" pos:end="475:44"><name pos:start="475:27" pos:end="475:30">info</name><operator pos:start="475:31" pos:end="475:32">-&gt;</operator><name pos:start="475:33" pos:end="475:44">fprintf_func</name></name>) <argument_list pos:start="475:47" pos:end="475:65">(<argument pos:start="475:48" pos:end="475:53"><expr pos:start="475:48" pos:end="475:53"><name pos:start="475:48" pos:end="475:53">stream</name></expr></argument>, <argument pos:start="475:56" pos:end="475:59"><expr pos:start="475:56" pos:end="475:59"><literal type="string" pos:start="475:56" pos:end="475:59">"%d"</literal></expr></argument>, <argument pos:start="475:62" pos:end="475:64"><expr pos:start="475:62" pos:end="475:64"><name pos:start="475:62" pos:end="475:64">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="477:23" pos:end="479:67">else<block type="pseudo" pos:start="479:25" pos:end="479:67"><block_content pos:start="479:25" pos:end="479:67">

                        <expr_stmt pos:start="479:25" pos:end="479:67"><expr pos:start="479:25" pos:end="479:66"><call pos:start="479:25" pos:end="479:66">(<modifier pos:start="479:26" pos:end="479:26">*</modifier><name pos:start="479:27" pos:end="479:44"><name pos:start="479:27" pos:end="479:30">info</name><operator pos:start="479:31" pos:end="479:32">-&gt;</operator><name pos:start="479:33" pos:end="479:44">fprintf_func</name></name>) <argument_list pos:start="479:47" pos:end="479:66">(<argument pos:start="479:48" pos:end="479:53"><expr pos:start="479:48" pos:end="479:53"><name pos:start="479:48" pos:end="479:53">stream</name></expr></argument>, <argument pos:start="479:56" pos:end="479:60"><expr pos:start="479:56" pos:end="479:60"><literal type="string" pos:start="479:56" pos:end="479:60">"%#x"</literal></expr></argument>, <argument pos:start="479:63" pos:end="479:65"><expr pos:start="479:63" pos:end="479:65"><name pos:start="479:63" pos:end="479:65">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block>

                    <break pos:start="483:21" pos:end="483:26">break;</break>



                  <case pos:start="487:19" pos:end="487:27">case <expr pos:start="487:24" pos:end="487:26"><literal type="char" pos:start="487:24" pos:end="487:26">'X'</literal></expr>:</case>     <comment type="block" pos:start="487:33" pos:end="487:64">/* 5 bit unsigned immediate.  */</comment>

                  <case pos:start="489:19" pos:end="489:27">case <expr pos:start="489:24" pos:end="489:26"><literal type="char" pos:start="489:24" pos:end="489:26">'Y'</literal></expr>:</case>     <comment type="block" pos:start="489:33" pos:end="489:64">/* 6 bit unsigned immediate.  */</comment>

                    <block pos:start="491:21" pos:end="505:21">{<block_content pos:start="493:23" pos:end="503:77">

                      <decl_stmt pos:start="493:23" pos:end="493:64"><decl pos:start="493:23" pos:end="493:63"><type pos:start="493:23" pos:end="493:25"><name pos:start="493:23" pos:end="493:25">int</name></type> <name pos:start="493:27" pos:end="493:29">imm</name> <init pos:start="493:31" pos:end="493:63">= <expr pos:start="493:33" pos:end="493:63"><call pos:start="493:33" pos:end="493:63"><name pos:start="493:33" pos:end="493:37">X_IMM</name> <argument_list pos:start="493:39" pos:end="493:63">(<argument pos:start="493:40" pos:end="493:43"><expr pos:start="493:40" pos:end="493:43"><name pos:start="493:40" pos:end="493:43">insn</name></expr></argument>, <argument pos:start="493:46" pos:end="493:62"><expr pos:start="493:46" pos:end="493:62"><ternary pos:start="493:46" pos:end="493:62"><condition pos:start="493:46" pos:end="493:56"><expr pos:start="493:46" pos:end="493:54"><operator pos:start="493:46" pos:end="493:46">*</operator><name pos:start="493:47" pos:end="493:47">s</name> <operator pos:start="493:49" pos:end="493:50">==</operator> <literal type="char" pos:start="493:52" pos:end="493:54">'X'</literal></expr> ?</condition><then pos:start="493:58" pos:end="493:58"> <expr pos:start="493:58" pos:end="493:58"><literal type="number" pos:start="493:58" pos:end="493:58">5</literal></expr> </then><else pos:start="493:60" pos:end="493:62">: <expr pos:start="493:62" pos:end="493:62"><literal type="number" pos:start="493:62" pos:end="493:62">6</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                      <if_stmt pos:start="497:23" pos:end="503:77"><if pos:start="497:23" pos:end="499:65">if <condition pos:start="497:26" pos:end="497:35">(<expr pos:start="497:27" pos:end="497:34"><name pos:start="497:27" pos:end="497:29">imm</name> <operator pos:start="497:31" pos:end="497:32">&lt;=</operator> <literal type="number" pos:start="497:34" pos:end="497:34">9</literal></expr>)</condition><block type="pseudo" pos:start="499:25" pos:end="499:65"><block_content pos:start="499:25" pos:end="499:65">

                        <expr_stmt pos:start="499:25" pos:end="499:65"><expr pos:start="499:25" pos:end="499:64"><operator pos:start="499:25" pos:end="499:25">(</operator><name pos:start="499:26" pos:end="499:43"><name pos:start="499:26" pos:end="499:29">info</name><operator pos:start="499:30" pos:end="499:31">-&gt;</operator><name pos:start="499:32" pos:end="499:43">fprintf_func</name></name><operator pos:start="499:44" pos:end="499:44">)</operator> <operator pos:start="499:46" pos:end="499:46">(</operator><name pos:start="499:47" pos:end="499:52">stream</name><operator pos:start="499:53" pos:end="499:53">,</operator> <literal type="string" pos:start="499:55" pos:end="499:58">"%d"</literal><operator pos:start="499:59" pos:end="499:59">,</operator> <name pos:start="499:61" pos:end="499:63">imm</name><operator pos:start="499:64" pos:end="499:64">)</operator></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="501:23" pos:end="503:77">else<block type="pseudo" pos:start="503:25" pos:end="503:77"><block_content pos:start="503:25" pos:end="503:77">

                        <expr_stmt pos:start="503:25" pos:end="503:77"><expr pos:start="503:25" pos:end="503:76"><operator pos:start="503:25" pos:end="503:25">(</operator><name pos:start="503:26" pos:end="503:43"><name pos:start="503:26" pos:end="503:29">info</name><operator pos:start="503:30" pos:end="503:31">-&gt;</operator><name pos:start="503:32" pos:end="503:43">fprintf_func</name></name><operator pos:start="503:44" pos:end="503:44">)</operator> <operator pos:start="503:46" pos:end="503:46">(</operator><name pos:start="503:47" pos:end="503:52">stream</name><operator pos:start="503:53" pos:end="503:53">,</operator> <literal type="string" pos:start="503:55" pos:end="503:59">"%#x"</literal><operator pos:start="503:60" pos:end="503:60">,</operator> <operator pos:start="503:62" pos:end="503:62">(</operator><name pos:start="503:63" pos:end="503:70">unsigned</name><operator pos:start="503:71" pos:end="503:71">)</operator> <name pos:start="503:73" pos:end="503:75">imm</name><operator pos:start="503:76" pos:end="503:76">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block>

                    <break pos:start="507:21" pos:end="507:26">break;</break>



                  <case pos:start="511:19" pos:end="511:27">case <expr pos:start="511:24" pos:end="511:26"><literal type="char" pos:start="511:24" pos:end="511:26">'3'</literal></expr>:</case>

                    <expr_stmt pos:start="513:21" pos:end="513:74"><expr pos:start="513:21" pos:end="513:73"><operator pos:start="513:21" pos:end="513:21">(</operator><name pos:start="513:22" pos:end="513:39"><name pos:start="513:22" pos:end="513:25">info</name><operator pos:start="513:26" pos:end="513:27">-&gt;</operator><name pos:start="513:28" pos:end="513:39">fprintf_func</name></name><operator pos:start="513:40" pos:end="513:40">)</operator> <operator pos:start="513:42" pos:end="513:42">(</operator><name pos:start="513:43" pos:end="513:48">stream</name><operator pos:start="513:49" pos:end="513:49">,</operator> <literal type="string" pos:start="513:51" pos:end="513:55">"%ld"</literal><operator pos:start="513:56" pos:end="513:56">,</operator> <call pos:start="513:58" pos:end="513:72"><name pos:start="513:58" pos:end="513:62">X_IMM</name> <argument_list pos:start="513:64" pos:end="513:72">(<argument pos:start="513:65" pos:end="513:68"><expr pos:start="513:65" pos:end="513:68"><name pos:start="513:65" pos:end="513:68">insn</name></expr></argument>, <argument pos:start="513:71" pos:end="513:71"><expr pos:start="513:71" pos:end="513:71"><literal type="number" pos:start="513:71" pos:end="513:71">3</literal></expr></argument>)</argument_list></call><operator pos:start="513:73" pos:end="513:73">)</operator></expr>;</expr_stmt>

                    <break pos:start="515:21" pos:end="515:26">break;</break>



                  <case pos:start="519:19" pos:end="519:27">case <expr pos:start="519:24" pos:end="519:26"><literal type="char" pos:start="519:24" pos:end="519:26">'K'</literal></expr>:</case>

                    <block pos:start="521:21" pos:end="563:21">{<block_content pos:start="523:23" pos:end="561:28">

                      <decl_stmt pos:start="523:23" pos:end="523:49"><decl pos:start="523:23" pos:end="523:48"><type pos:start="523:23" pos:end="523:25"><name pos:start="523:23" pos:end="523:25">int</name></type> <name pos:start="523:27" pos:end="523:30">mask</name> <init pos:start="523:32" pos:end="523:48">= <expr pos:start="523:34" pos:end="523:48"><call pos:start="523:34" pos:end="523:48"><name pos:start="523:34" pos:end="523:41">X_MEMBAR</name> <argument_list pos:start="523:43" pos:end="523:48">(<argument pos:start="523:44" pos:end="523:47"><expr pos:start="523:44" pos:end="523:47"><name pos:start="523:44" pos:end="523:47">insn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                      <decl_stmt pos:start="525:23" pos:end="525:54"><decl pos:start="525:23" pos:end="525:36"><type pos:start="525:23" pos:end="525:25"><name pos:start="525:23" pos:end="525:25">int</name></type> <name pos:start="525:27" pos:end="525:29">bit</name> <init pos:start="525:31" pos:end="525:36">= <expr pos:start="525:33" pos:end="525:36"><literal type="number" pos:start="525:33" pos:end="525:36">0x40</literal></expr></init></decl>, <decl pos:start="525:39" pos:end="525:53"><type ref="prev" pos:start="525:23" pos:end="525:25"/><name pos:start="525:39" pos:end="525:49">printed_one</name> <init pos:start="525:51" pos:end="525:53">= <expr pos:start="525:53" pos:end="525:53"><literal type="number" pos:start="525:53" pos:end="525:53">0</literal></expr></init></decl>;</decl_stmt>

                      <decl_stmt pos:start="527:23" pos:end="527:39"><decl pos:start="527:23" pos:end="527:38"><type pos:start="527:23" pos:end="527:34"><specifier pos:start="527:23" pos:end="527:27">const</specifier> <name pos:start="527:29" pos:end="527:32">char</name> <modifier pos:start="527:34" pos:end="527:34">*</modifier></type><name pos:start="527:35" pos:end="527:38">name</name></decl>;</decl_stmt>



                      <if_stmt pos:start="531:23" pos:end="559:27"><if pos:start="531:23" pos:end="533:59">if <condition pos:start="531:26" pos:end="531:36">(<expr pos:start="531:27" pos:end="531:35"><name pos:start="531:27" pos:end="531:30">mask</name> <operator pos:start="531:32" pos:end="531:33">==</operator> <literal type="number" pos:start="531:35" pos:end="531:35">0</literal></expr>)</condition><block type="pseudo" pos:start="533:25" pos:end="533:59"><block_content pos:start="533:25" pos:end="533:59">

                        <expr_stmt pos:start="533:25" pos:end="533:59"><expr pos:start="533:25" pos:end="533:58"><operator pos:start="533:25" pos:end="533:25">(</operator><name pos:start="533:26" pos:end="533:43"><name pos:start="533:26" pos:end="533:29">info</name><operator pos:start="533:30" pos:end="533:31">-&gt;</operator><name pos:start="533:32" pos:end="533:43">fprintf_func</name></name><operator pos:start="533:44" pos:end="533:44">)</operator> <operator pos:start="533:46" pos:end="533:46">(</operator><name pos:start="533:47" pos:end="533:52">stream</name><operator pos:start="533:53" pos:end="533:53">,</operator> <literal type="string" pos:start="533:55" pos:end="533:57">"0"</literal><operator pos:start="533:58" pos:end="533:58">)</operator></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="535:23" pos:end="559:27">else<block type="pseudo" pos:start="537:25" pos:end="559:27"><block_content pos:start="537:25" pos:end="559:27">

                        <while pos:start="537:25" pos:end="559:27">while <condition pos:start="537:31" pos:end="537:35">(<expr pos:start="537:32" pos:end="537:34"><name pos:start="537:32" pos:end="537:34">bit</name></expr>)</condition>

                          <block pos:start="539:27" pos:end="559:27">{<block_content pos:start="541:29" pos:end="557:38">

                            <if_stmt pos:start="541:29" pos:end="555:31"><if pos:start="541:29" pos:end="555:31">if <condition pos:start="541:32" pos:end="541:43">(<expr pos:start="541:33" pos:end="541:42"><name pos:start="541:33" pos:end="541:36">mask</name> <operator pos:start="541:38" pos:end="541:38">&amp;</operator> <name pos:start="541:40" pos:end="541:42">bit</name></expr>)</condition>

                              <block pos:start="543:31" pos:end="555:31">{<block_content pos:start="545:33" pos:end="553:48">

                                <if_stmt pos:start="545:33" pos:end="547:69"><if pos:start="545:33" pos:end="547:69">if <condition pos:start="545:36" pos:end="545:48">(<expr pos:start="545:37" pos:end="545:47"><name pos:start="545:37" pos:end="545:47">printed_one</name></expr>)</condition><block type="pseudo" pos:start="547:35" pos:end="547:69"><block_content pos:start="547:35" pos:end="547:69">

                                  <expr_stmt pos:start="547:35" pos:end="547:69"><expr pos:start="547:35" pos:end="547:68"><operator pos:start="547:35" pos:end="547:35">(</operator><name pos:start="547:36" pos:end="547:53"><name pos:start="547:36" pos:end="547:39">info</name><operator pos:start="547:40" pos:end="547:41">-&gt;</operator><name pos:start="547:42" pos:end="547:53">fprintf_func</name></name><operator pos:start="547:54" pos:end="547:54">)</operator> <operator pos:start="547:56" pos:end="547:56">(</operator><name pos:start="547:57" pos:end="547:62">stream</name><operator pos:start="547:63" pos:end="547:63">,</operator> <literal type="string" pos:start="547:65" pos:end="547:67">"|"</literal><operator pos:start="547:68" pos:end="547:68">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="549:33" pos:end="549:65"><expr pos:start="549:33" pos:end="549:64"><name pos:start="549:33" pos:end="549:36">name</name> <operator pos:start="549:38" pos:end="549:38">=</operator> <call pos:start="549:40" pos:end="549:64"><name pos:start="549:40" pos:end="549:58">sparc_decode_membar</name> <argument_list pos:start="549:60" pos:end="549:64">(<argument pos:start="549:61" pos:end="549:63"><expr pos:start="549:61" pos:end="549:63"><name pos:start="549:61" pos:end="549:63">bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="551:33" pos:end="551:74"><expr pos:start="551:33" pos:end="551:73"><operator pos:start="551:33" pos:end="551:33">(</operator><name pos:start="551:34" pos:end="551:51"><name pos:start="551:34" pos:end="551:37">info</name><operator pos:start="551:38" pos:end="551:39">-&gt;</operator><name pos:start="551:40" pos:end="551:51">fprintf_func</name></name><operator pos:start="551:52" pos:end="551:52">)</operator> <operator pos:start="551:54" pos:end="551:54">(</operator><name pos:start="551:55" pos:end="551:60">stream</name><operator pos:start="551:61" pos:end="551:61">,</operator> <literal type="string" pos:start="551:63" pos:end="551:66">"%s"</literal><operator pos:start="551:67" pos:end="551:67">,</operator> <name pos:start="551:69" pos:end="551:72">name</name><operator pos:start="551:73" pos:end="551:73">)</operator></expr>;</expr_stmt>

                                <expr_stmt pos:start="553:33" pos:end="553:48"><expr pos:start="553:33" pos:end="553:47"><name pos:start="553:33" pos:end="553:43">printed_one</name> <operator pos:start="553:45" pos:end="553:45">=</operator> <literal type="number" pos:start="553:47" pos:end="553:47">1</literal></expr>;</expr_stmt>

                              </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="557:29" pos:end="557:38"><expr pos:start="557:29" pos:end="557:37"><name pos:start="557:29" pos:end="557:31">bit</name> <operator pos:start="557:33" pos:end="557:35">&gt;&gt;=</operator> <literal type="number" pos:start="557:37" pos:end="557:37">1</literal></expr>;</expr_stmt>

                          </block_content>}</block></while></block_content></block></else></if_stmt>

                      <break pos:start="561:23" pos:end="561:28">break;</break>

                    </block_content>}</block>



                  <case pos:start="567:19" pos:end="567:27">case <expr pos:start="567:24" pos:end="567:26"><literal type="char" pos:start="567:24" pos:end="567:26">'k'</literal></expr>:</case>

                    <expr_stmt pos:start="569:21" pos:end="569:75"><expr pos:start="569:21" pos:end="569:74"><name pos:start="569:21" pos:end="569:32"><name pos:start="569:21" pos:end="569:24">info</name><operator pos:start="569:25" pos:end="569:26">-&gt;</operator><name pos:start="569:27" pos:end="569:32">target</name></name> <operator pos:start="569:34" pos:end="569:34">=</operator> <name pos:start="569:36" pos:end="569:42">memaddr</name> <operator pos:start="569:44" pos:end="569:44">+</operator> <call pos:start="569:46" pos:end="569:70"><name pos:start="569:46" pos:end="569:48">SEX</name> <argument_list pos:start="569:50" pos:end="569:70">(<argument pos:start="569:51" pos:end="569:65"><expr pos:start="569:51" pos:end="569:65"><call pos:start="569:51" pos:end="569:65"><name pos:start="569:51" pos:end="569:58">X_DISP16</name> <argument_list pos:start="569:60" pos:end="569:65">(<argument pos:start="569:61" pos:end="569:64"><expr pos:start="569:61" pos:end="569:64"><name pos:start="569:61" pos:end="569:64">insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="569:68" pos:end="569:69"><expr pos:start="569:68" pos:end="569:69"><literal type="number" pos:start="569:68" pos:end="569:69">16</literal></expr></argument>)</argument_list></call> <operator pos:start="569:72" pos:end="569:72">*</operator> <literal type="number" pos:start="569:74" pos:end="569:74">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="571:21" pos:end="571:69"><expr pos:start="571:21" pos:end="571:68"><call pos:start="571:21" pos:end="571:68">(<modifier pos:start="571:22" pos:end="571:22">*</modifier><name pos:start="571:23" pos:end="571:46"><name pos:start="571:23" pos:end="571:26">info</name><operator pos:start="571:27" pos:end="571:28">-&gt;</operator><name pos:start="571:29" pos:end="571:46">print_address_func</name></name>) <argument_list pos:start="571:49" pos:end="571:68">(<argument pos:start="571:50" pos:end="571:61"><expr pos:start="571:50" pos:end="571:61"><name pos:start="571:50" pos:end="571:61"><name pos:start="571:50" pos:end="571:53">info</name><operator pos:start="571:54" pos:end="571:55">-&gt;</operator><name pos:start="571:56" pos:end="571:61">target</name></name></expr></argument>, <argument pos:start="571:64" pos:end="571:67"><expr pos:start="571:64" pos:end="571:67"><name pos:start="571:64" pos:end="571:67">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="573:21" pos:end="573:26">break;</break>



                  <case pos:start="577:19" pos:end="577:27">case <expr pos:start="577:24" pos:end="577:26"><literal type="char" pos:start="577:24" pos:end="577:26">'G'</literal></expr>:</case>

                    <expr_stmt pos:start="579:21" pos:end="579:75"><expr pos:start="579:21" pos:end="579:74"><name pos:start="579:21" pos:end="579:32"><name pos:start="579:21" pos:end="579:24">info</name><operator pos:start="579:25" pos:end="579:26">-&gt;</operator><name pos:start="579:27" pos:end="579:32">target</name></name> <operator pos:start="579:34" pos:end="579:34">=</operator> <name pos:start="579:36" pos:end="579:42">memaddr</name> <operator pos:start="579:44" pos:end="579:44">+</operator> <call pos:start="579:46" pos:end="579:70"><name pos:start="579:46" pos:end="579:48">SEX</name> <argument_list pos:start="579:50" pos:end="579:70">(<argument pos:start="579:51" pos:end="579:65"><expr pos:start="579:51" pos:end="579:65"><call pos:start="579:51" pos:end="579:65"><name pos:start="579:51" pos:end="579:58">X_DISP19</name> <argument_list pos:start="579:60" pos:end="579:65">(<argument pos:start="579:61" pos:end="579:64"><expr pos:start="579:61" pos:end="579:64"><name pos:start="579:61" pos:end="579:64">insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="579:68" pos:end="579:69"><expr pos:start="579:68" pos:end="579:69"><literal type="number" pos:start="579:68" pos:end="579:69">19</literal></expr></argument>)</argument_list></call> <operator pos:start="579:72" pos:end="579:72">*</operator> <literal type="number" pos:start="579:74" pos:end="579:74">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="581:21" pos:end="581:69"><expr pos:start="581:21" pos:end="581:68"><call pos:start="581:21" pos:end="581:68">(<modifier pos:start="581:22" pos:end="581:22">*</modifier><name pos:start="581:23" pos:end="581:46"><name pos:start="581:23" pos:end="581:26">info</name><operator pos:start="581:27" pos:end="581:28">-&gt;</operator><name pos:start="581:29" pos:end="581:46">print_address_func</name></name>) <argument_list pos:start="581:49" pos:end="581:68">(<argument pos:start="581:50" pos:end="581:61"><expr pos:start="581:50" pos:end="581:61"><name pos:start="581:50" pos:end="581:61"><name pos:start="581:50" pos:end="581:53">info</name><operator pos:start="581:54" pos:end="581:55">-&gt;</operator><name pos:start="581:56" pos:end="581:61">target</name></name></expr></argument>, <argument pos:start="581:64" pos:end="581:67"><expr pos:start="581:64" pos:end="581:67"><name pos:start="581:64" pos:end="581:67">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="583:21" pos:end="583:26">break;</break>



                  <case pos:start="587:19" pos:end="587:27">case <expr pos:start="587:24" pos:end="587:26"><literal type="char" pos:start="587:24" pos:end="587:26">'6'</literal></expr>:</case>

                  <case pos:start="589:19" pos:end="589:27">case <expr pos:start="589:24" pos:end="589:26"><literal type="char" pos:start="589:24" pos:end="589:26">'7'</literal></expr>:</case>

                  <case pos:start="591:19" pos:end="591:27">case <expr pos:start="591:24" pos:end="591:26"><literal type="char" pos:start="591:24" pos:end="591:26">'8'</literal></expr>:</case>

                  <case pos:start="593:19" pos:end="593:27">case <expr pos:start="593:24" pos:end="593:26"><literal type="char" pos:start="593:24" pos:end="593:26">'9'</literal></expr>:</case>

                    <expr_stmt pos:start="595:21" pos:end="595:78"><expr pos:start="595:21" pos:end="595:77"><call pos:start="595:21" pos:end="595:77">(<modifier pos:start="595:22" pos:end="595:22">*</modifier><name pos:start="595:23" pos:end="595:40"><name pos:start="595:23" pos:end="595:26">info</name><operator pos:start="595:27" pos:end="595:28">-&gt;</operator><name pos:start="595:29" pos:end="595:40">fprintf_func</name></name>) <argument_list pos:start="595:43" pos:end="595:77">(<argument pos:start="595:44" pos:end="595:49"><expr pos:start="595:44" pos:end="595:49"><name pos:start="595:44" pos:end="595:49">stream</name></expr></argument>, <argument pos:start="595:52" pos:end="595:60"><expr pos:start="595:52" pos:end="595:60"><literal type="string" pos:start="595:52" pos:end="595:60">"%%fcc%c"</literal></expr></argument>, <argument pos:start="595:63" pos:end="595:76"><expr pos:start="595:63" pos:end="595:76"><operator pos:start="595:63" pos:end="595:63">*</operator><name pos:start="595:64" pos:end="595:64">s</name> <operator pos:start="595:66" pos:end="595:66">-</operator> <literal type="char" pos:start="595:68" pos:end="595:70">'6'</literal> <operator pos:start="595:72" pos:end="595:72">+</operator> <literal type="char" pos:start="595:74" pos:end="595:76">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="597:21" pos:end="597:26">break;</break>



                  <case pos:start="601:19" pos:end="601:27">case <expr pos:start="601:24" pos:end="601:26"><literal type="char" pos:start="601:24" pos:end="601:26">'z'</literal></expr>:</case>

                    <expr_stmt pos:start="603:21" pos:end="603:60"><expr pos:start="603:21" pos:end="603:59"><call pos:start="603:21" pos:end="603:59">(<modifier pos:start="603:22" pos:end="603:22">*</modifier><name pos:start="603:23" pos:end="603:40"><name pos:start="603:23" pos:end="603:26">info</name><operator pos:start="603:27" pos:end="603:28">-&gt;</operator><name pos:start="603:29" pos:end="603:40">fprintf_func</name></name>) <argument_list pos:start="603:43" pos:end="603:59">(<argument pos:start="603:44" pos:end="603:49"><expr pos:start="603:44" pos:end="603:49"><name pos:start="603:44" pos:end="603:49">stream</name></expr></argument>, <argument pos:start="603:52" pos:end="603:58"><expr pos:start="603:52" pos:end="603:58"><literal type="string" pos:start="603:52" pos:end="603:58">"%%icc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="605:21" pos:end="605:26">break;</break>



                  <case pos:start="609:19" pos:end="609:27">case <expr pos:start="609:24" pos:end="609:26"><literal type="char" pos:start="609:24" pos:end="609:26">'Z'</literal></expr>:</case>

                    <expr_stmt pos:start="611:21" pos:end="611:60"><expr pos:start="611:21" pos:end="611:59"><call pos:start="611:21" pos:end="611:59">(<modifier pos:start="611:22" pos:end="611:22">*</modifier><name pos:start="611:23" pos:end="611:40"><name pos:start="611:23" pos:end="611:26">info</name><operator pos:start="611:27" pos:end="611:28">-&gt;</operator><name pos:start="611:29" pos:end="611:40">fprintf_func</name></name>) <argument_list pos:start="611:43" pos:end="611:59">(<argument pos:start="611:44" pos:end="611:49"><expr pos:start="611:44" pos:end="611:49"><name pos:start="611:44" pos:end="611:49">stream</name></expr></argument>, <argument pos:start="611:52" pos:end="611:58"><expr pos:start="611:52" pos:end="611:58"><literal type="string" pos:start="611:52" pos:end="611:58">"%%xcc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="613:21" pos:end="613:26">break;</break>



                  <case pos:start="617:19" pos:end="617:27">case <expr pos:start="617:24" pos:end="617:26"><literal type="char" pos:start="617:24" pos:end="617:26">'E'</literal></expr>:</case>

                    <expr_stmt pos:start="619:21" pos:end="619:60"><expr pos:start="619:21" pos:end="619:59"><call pos:start="619:21" pos:end="619:59">(<modifier pos:start="619:22" pos:end="619:22">*</modifier><name pos:start="619:23" pos:end="619:40"><name pos:start="619:23" pos:end="619:26">info</name><operator pos:start="619:27" pos:end="619:28">-&gt;</operator><name pos:start="619:29" pos:end="619:40">fprintf_func</name></name>) <argument_list pos:start="619:43" pos:end="619:59">(<argument pos:start="619:44" pos:end="619:49"><expr pos:start="619:44" pos:end="619:49"><name pos:start="619:44" pos:end="619:49">stream</name></expr></argument>, <argument pos:start="619:52" pos:end="619:58"><expr pos:start="619:52" pos:end="619:58"><literal type="string" pos:start="619:52" pos:end="619:58">"%%ccr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="621:21" pos:end="621:26">break;</break>



                  <case pos:start="625:19" pos:end="625:27">case <expr pos:start="625:24" pos:end="625:26"><literal type="char" pos:start="625:24" pos:end="625:26">'s'</literal></expr>:</case>

                    <expr_stmt pos:start="627:21" pos:end="627:61"><expr pos:start="627:21" pos:end="627:60"><call pos:start="627:21" pos:end="627:60">(<modifier pos:start="627:22" pos:end="627:22">*</modifier><name pos:start="627:23" pos:end="627:40"><name pos:start="627:23" pos:end="627:26">info</name><operator pos:start="627:27" pos:end="627:28">-&gt;</operator><name pos:start="627:29" pos:end="627:40">fprintf_func</name></name>) <argument_list pos:start="627:43" pos:end="627:60">(<argument pos:start="627:44" pos:end="627:49"><expr pos:start="627:44" pos:end="627:49"><name pos:start="627:44" pos:end="627:49">stream</name></expr></argument>, <argument pos:start="627:52" pos:end="627:59"><expr pos:start="627:52" pos:end="627:59"><literal type="string" pos:start="627:52" pos:end="627:59">"%%fprs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="629:21" pos:end="629:26">break;</break>



                  <case pos:start="633:19" pos:end="633:27">case <expr pos:start="633:24" pos:end="633:26"><literal type="char" pos:start="633:24" pos:end="633:26">'o'</literal></expr>:</case>

                    <expr_stmt pos:start="635:21" pos:end="635:60"><expr pos:start="635:21" pos:end="635:59"><call pos:start="635:21" pos:end="635:59">(<modifier pos:start="635:22" pos:end="635:22">*</modifier><name pos:start="635:23" pos:end="635:40"><name pos:start="635:23" pos:end="635:26">info</name><operator pos:start="635:27" pos:end="635:28">-&gt;</operator><name pos:start="635:29" pos:end="635:40">fprintf_func</name></name>) <argument_list pos:start="635:43" pos:end="635:59">(<argument pos:start="635:44" pos:end="635:49"><expr pos:start="635:44" pos:end="635:49"><name pos:start="635:44" pos:end="635:49">stream</name></expr></argument>, <argument pos:start="635:52" pos:end="635:58"><expr pos:start="635:52" pos:end="635:58"><literal type="string" pos:start="635:52" pos:end="635:58">"%%asi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="637:21" pos:end="637:26">break;</break>



                  <case pos:start="641:19" pos:end="641:27">case <expr pos:start="641:24" pos:end="641:26"><literal type="char" pos:start="641:24" pos:end="641:26">'W'</literal></expr>:</case>

                    <expr_stmt pos:start="643:21" pos:end="643:61"><expr pos:start="643:21" pos:end="643:60"><call pos:start="643:21" pos:end="643:60">(<modifier pos:start="643:22" pos:end="643:22">*</modifier><name pos:start="643:23" pos:end="643:40"><name pos:start="643:23" pos:end="643:26">info</name><operator pos:start="643:27" pos:end="643:28">-&gt;</operator><name pos:start="643:29" pos:end="643:40">fprintf_func</name></name>) <argument_list pos:start="643:43" pos:end="643:60">(<argument pos:start="643:44" pos:end="643:49"><expr pos:start="643:44" pos:end="643:49"><name pos:start="643:44" pos:end="643:49">stream</name></expr></argument>, <argument pos:start="643:52" pos:end="643:59"><expr pos:start="643:52" pos:end="643:59"><literal type="string" pos:start="643:52" pos:end="643:59">"%%tick"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="645:21" pos:end="645:26">break;</break>



                  <case pos:start="649:19" pos:end="649:27">case <expr pos:start="649:24" pos:end="649:26"><literal type="char" pos:start="649:24" pos:end="649:26">'P'</literal></expr>:</case>

                    <expr_stmt pos:start="651:21" pos:end="651:59"><expr pos:start="651:21" pos:end="651:58"><call pos:start="651:21" pos:end="651:58">(<modifier pos:start="651:22" pos:end="651:22">*</modifier><name pos:start="651:23" pos:end="651:40"><name pos:start="651:23" pos:end="651:26">info</name><operator pos:start="651:27" pos:end="651:28">-&gt;</operator><name pos:start="651:29" pos:end="651:40">fprintf_func</name></name>) <argument_list pos:start="651:43" pos:end="651:58">(<argument pos:start="651:44" pos:end="651:49"><expr pos:start="651:44" pos:end="651:49"><name pos:start="651:44" pos:end="651:49">stream</name></expr></argument>, <argument pos:start="651:52" pos:end="651:57"><expr pos:start="651:52" pos:end="651:57"><literal type="string" pos:start="651:52" pos:end="651:57">"%%pc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="653:21" pos:end="653:26">break;</break>



                  <case pos:start="657:19" pos:end="657:27">case <expr pos:start="657:24" pos:end="657:26"><literal type="char" pos:start="657:24" pos:end="657:26">'?'</literal></expr>:</case>

                    <if_stmt pos:start="659:21" pos:end="671:67"><if pos:start="659:21" pos:end="661:62">if <condition pos:start="659:24" pos:end="659:43">(<expr pos:start="659:25" pos:end="659:42"><call pos:start="659:25" pos:end="659:36"><name pos:start="659:25" pos:end="659:29">X_RS1</name> <argument_list pos:start="659:31" pos:end="659:36">(<argument pos:start="659:32" pos:end="659:35"><expr pos:start="659:32" pos:end="659:35"><name pos:start="659:32" pos:end="659:35">insn</name></expr></argument>)</argument_list></call> <operator pos:start="659:38" pos:end="659:39">==</operator> <literal type="number" pos:start="659:41" pos:end="659:42">31</literal></expr>)</condition><block type="pseudo" pos:start="661:23" pos:end="661:62"><block_content pos:start="661:23" pos:end="661:62">

                      <expr_stmt pos:start="661:23" pos:end="661:62"><expr pos:start="661:23" pos:end="661:61"><call pos:start="661:23" pos:end="661:61">(<modifier pos:start="661:24" pos:end="661:24">*</modifier><name pos:start="661:25" pos:end="661:42"><name pos:start="661:25" pos:end="661:28">info</name><operator pos:start="661:29" pos:end="661:30">-&gt;</operator><name pos:start="661:31" pos:end="661:42">fprintf_func</name></name>) <argument_list pos:start="661:45" pos:end="661:61">(<argument pos:start="661:46" pos:end="661:51"><expr pos:start="661:46" pos:end="661:51"><name pos:start="661:46" pos:end="661:51">stream</name></expr></argument>, <argument pos:start="661:54" pos:end="661:60"><expr pos:start="661:54" pos:end="661:60"><literal type="string" pos:start="661:54" pos:end="661:60">"%%ver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="663:21" pos:end="667:78">else if <condition pos:start="663:29" pos:end="663:58">(<expr pos:start="663:30" pos:end="663:57"><operator pos:start="663:30" pos:end="663:30">(</operator><name pos:start="663:31" pos:end="663:38">unsigned</name><operator pos:start="663:39" pos:end="663:39">)</operator> <call pos:start="663:41" pos:end="663:52"><name pos:start="663:41" pos:end="663:45">X_RS1</name> <argument_list pos:start="663:47" pos:end="663:52">(<argument pos:start="663:48" pos:end="663:51"><expr pos:start="663:48" pos:end="663:51"><name pos:start="663:48" pos:end="663:51">insn</name></expr></argument>)</argument_list></call> <operator pos:start="663:54" pos:end="663:54">&lt;</operator> <literal type="number" pos:start="663:56" pos:end="663:57">17</literal></expr>)</condition><block type="pseudo" pos:start="665:23" pos:end="667:78"><block_content pos:start="665:23" pos:end="667:78">

                      <expr_stmt pos:start="665:23" pos:end="667:78"><expr pos:start="665:23" pos:end="667:77"><call pos:start="665:23" pos:end="667:77">(<modifier pos:start="665:24" pos:end="665:24">*</modifier><name pos:start="665:25" pos:end="665:42"><name pos:start="665:25" pos:end="665:28">info</name><operator pos:start="665:29" pos:end="665:30">-&gt;</operator><name pos:start="665:31" pos:end="665:42">fprintf_func</name></name>) <argument_list pos:start="665:45" pos:end="667:77">(<argument pos:start="665:46" pos:end="665:51"><expr pos:start="665:46" pos:end="665:51"><name pos:start="665:46" pos:end="665:51">stream</name></expr></argument>, <argument pos:start="665:54" pos:end="665:59"><expr pos:start="665:54" pos:end="665:59"><literal type="string" pos:start="665:54" pos:end="665:59">"%%%s"</literal></expr></argument>,

                                             <argument pos:start="667:46" pos:end="667:76"><expr pos:start="667:46" pos:end="667:76"><name pos:start="667:46" pos:end="667:76"><name pos:start="667:46" pos:end="667:62">v9_priv_reg_names</name><index pos:start="667:63" pos:end="667:76">[<expr pos:start="667:64" pos:end="667:75"><call pos:start="667:64" pos:end="667:75"><name pos:start="667:64" pos:end="667:68">X_RS1</name> <argument_list pos:start="667:70" pos:end="667:75">(<argument pos:start="667:71" pos:end="667:74"><expr pos:start="667:71" pos:end="667:74"><name pos:start="667:71" pos:end="667:74">insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="669:21" pos:end="671:67">else<block type="pseudo" pos:start="671:23" pos:end="671:67"><block_content pos:start="671:23" pos:end="671:67">

                      <expr_stmt pos:start="671:23" pos:end="671:67"><expr pos:start="671:23" pos:end="671:66"><call pos:start="671:23" pos:end="671:66">(<modifier pos:start="671:24" pos:end="671:24">*</modifier><name pos:start="671:25" pos:end="671:42"><name pos:start="671:25" pos:end="671:28">info</name><operator pos:start="671:29" pos:end="671:30">-&gt;</operator><name pos:start="671:31" pos:end="671:42">fprintf_func</name></name>) <argument_list pos:start="671:45" pos:end="671:66">(<argument pos:start="671:46" pos:end="671:51"><expr pos:start="671:46" pos:end="671:51"><name pos:start="671:46" pos:end="671:51">stream</name></expr></argument>, <argument pos:start="671:54" pos:end="671:65"><expr pos:start="671:54" pos:end="671:65"><literal type="string" pos:start="671:54" pos:end="671:65">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="673:21" pos:end="673:26">break;</break>



                  <case pos:start="677:19" pos:end="677:27">case <expr pos:start="677:24" pos:end="677:26"><literal type="char" pos:start="677:24" pos:end="677:26">'!'</literal></expr>:</case>

                    <if_stmt pos:start="679:21" pos:end="687:67"><if pos:start="679:21" pos:end="683:77">if <condition pos:start="679:24" pos:end="679:52">(<expr pos:start="679:25" pos:end="679:51"><operator pos:start="679:25" pos:end="679:25">(</operator><name pos:start="679:26" pos:end="679:33">unsigned</name><operator pos:start="679:34" pos:end="679:34">)</operator> <call pos:start="679:36" pos:end="679:46"><name pos:start="679:36" pos:end="679:39">X_RD</name> <argument_list pos:start="679:41" pos:end="679:46">(<argument pos:start="679:42" pos:end="679:45"><expr pos:start="679:42" pos:end="679:45"><name pos:start="679:42" pos:end="679:45">insn</name></expr></argument>)</argument_list></call> <operator pos:start="679:48" pos:end="679:48">&lt;</operator> <literal type="number" pos:start="679:50" pos:end="679:51">17</literal></expr>)</condition><block type="pseudo" pos:start="681:23" pos:end="683:77"><block_content pos:start="681:23" pos:end="683:77">

                      <expr_stmt pos:start="681:23" pos:end="683:77"><expr pos:start="681:23" pos:end="683:76"><call pos:start="681:23" pos:end="683:76">(<modifier pos:start="681:24" pos:end="681:24">*</modifier><name pos:start="681:25" pos:end="681:42"><name pos:start="681:25" pos:end="681:28">info</name><operator pos:start="681:29" pos:end="681:30">-&gt;</operator><name pos:start="681:31" pos:end="681:42">fprintf_func</name></name>) <argument_list pos:start="681:45" pos:end="683:76">(<argument pos:start="681:46" pos:end="681:51"><expr pos:start="681:46" pos:end="681:51"><name pos:start="681:46" pos:end="681:51">stream</name></expr></argument>, <argument pos:start="681:54" pos:end="681:59"><expr pos:start="681:54" pos:end="681:59"><literal type="string" pos:start="681:54" pos:end="681:59">"%%%s"</literal></expr></argument>,

                                             <argument pos:start="683:46" pos:end="683:75"><expr pos:start="683:46" pos:end="683:75"><name pos:start="683:46" pos:end="683:75"><name pos:start="683:46" pos:end="683:62">v9_priv_reg_names</name><index pos:start="683:63" pos:end="683:75">[<expr pos:start="683:64" pos:end="683:74"><call pos:start="683:64" pos:end="683:74"><name pos:start="683:64" pos:end="683:67">X_RD</name> <argument_list pos:start="683:69" pos:end="683:74">(<argument pos:start="683:70" pos:end="683:73"><expr pos:start="683:70" pos:end="683:73"><name pos:start="683:70" pos:end="683:73">insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="685:21" pos:end="687:67">else<block type="pseudo" pos:start="687:23" pos:end="687:67"><block_content pos:start="687:23" pos:end="687:67">

                      <expr_stmt pos:start="687:23" pos:end="687:67"><expr pos:start="687:23" pos:end="687:66"><call pos:start="687:23" pos:end="687:66">(<modifier pos:start="687:24" pos:end="687:24">*</modifier><name pos:start="687:25" pos:end="687:42"><name pos:start="687:25" pos:end="687:28">info</name><operator pos:start="687:29" pos:end="687:30">-&gt;</operator><name pos:start="687:31" pos:end="687:42">fprintf_func</name></name>) <argument_list pos:start="687:45" pos:end="687:66">(<argument pos:start="687:46" pos:end="687:51"><expr pos:start="687:46" pos:end="687:51"><name pos:start="687:46" pos:end="687:51">stream</name></expr></argument>, <argument pos:start="687:54" pos:end="687:65"><expr pos:start="687:54" pos:end="687:65"><literal type="string" pos:start="687:54" pos:end="687:65">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="689:21" pos:end="689:26">break;</break>



                  <case pos:start="693:19" pos:end="693:27">case <expr pos:start="693:24" pos:end="693:26"><literal type="char" pos:start="693:24" pos:end="693:26">'$'</literal></expr>:</case>

                    <if_stmt pos:start="695:21" pos:end="703:67"><if pos:start="695:21" pos:end="699:79">if <condition pos:start="695:24" pos:end="695:53">(<expr pos:start="695:25" pos:end="695:52"><operator pos:start="695:25" pos:end="695:25">(</operator><name pos:start="695:26" pos:end="695:33">unsigned</name><operator pos:start="695:34" pos:end="695:34">)</operator> <call pos:start="695:36" pos:end="695:47"><name pos:start="695:36" pos:end="695:40">X_RS1</name> <argument_list pos:start="695:42" pos:end="695:47">(<argument pos:start="695:43" pos:end="695:46"><expr pos:start="695:43" pos:end="695:46"><name pos:start="695:43" pos:end="695:46">insn</name></expr></argument>)</argument_list></call> <operator pos:start="695:49" pos:end="695:49">&lt;</operator> <literal type="number" pos:start="695:51" pos:end="695:52">32</literal></expr>)</condition><block type="pseudo" pos:start="697:23" pos:end="699:79"><block_content pos:start="697:23" pos:end="699:79">

                      <expr_stmt pos:start="697:23" pos:end="699:79"><expr pos:start="697:23" pos:end="699:78"><call pos:start="697:23" pos:end="699:78">(<modifier pos:start="697:24" pos:end="697:24">*</modifier><name pos:start="697:25" pos:end="697:42"><name pos:start="697:25" pos:end="697:28">info</name><operator pos:start="697:29" pos:end="697:30">-&gt;</operator><name pos:start="697:31" pos:end="697:42">fprintf_func</name></name>) <argument_list pos:start="697:45" pos:end="699:78">(<argument pos:start="697:46" pos:end="697:51"><expr pos:start="697:46" pos:end="697:51"><name pos:start="697:46" pos:end="697:51">stream</name></expr></argument>, <argument pos:start="697:54" pos:end="697:59"><expr pos:start="697:54" pos:end="697:59"><literal type="string" pos:start="697:54" pos:end="697:59">"%%%s"</literal></expr></argument>,

                                             <argument pos:start="699:46" pos:end="699:77"><expr pos:start="699:46" pos:end="699:77"><name pos:start="699:46" pos:end="699:77"><name pos:start="699:46" pos:end="699:63">v9_hpriv_reg_names</name><index pos:start="699:64" pos:end="699:77">[<expr pos:start="699:65" pos:end="699:76"><call pos:start="699:65" pos:end="699:76"><name pos:start="699:65" pos:end="699:69">X_RS1</name> <argument_list pos:start="699:71" pos:end="699:76">(<argument pos:start="699:72" pos:end="699:75"><expr pos:start="699:72" pos:end="699:75"><name pos:start="699:72" pos:end="699:75">insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="701:21" pos:end="703:67">else<block type="pseudo" pos:start="703:23" pos:end="703:67"><block_content pos:start="703:23" pos:end="703:67">

                      <expr_stmt pos:start="703:23" pos:end="703:67"><expr pos:start="703:23" pos:end="703:66"><call pos:start="703:23" pos:end="703:66">(<modifier pos:start="703:24" pos:end="703:24">*</modifier><name pos:start="703:25" pos:end="703:42"><name pos:start="703:25" pos:end="703:28">info</name><operator pos:start="703:29" pos:end="703:30">-&gt;</operator><name pos:start="703:31" pos:end="703:42">fprintf_func</name></name>) <argument_list pos:start="703:45" pos:end="703:66">(<argument pos:start="703:46" pos:end="703:51"><expr pos:start="703:46" pos:end="703:51"><name pos:start="703:46" pos:end="703:51">stream</name></expr></argument>, <argument pos:start="703:54" pos:end="703:65"><expr pos:start="703:54" pos:end="703:65"><literal type="string" pos:start="703:54" pos:end="703:65">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="705:21" pos:end="705:26">break;</break>



                  <case pos:start="709:19" pos:end="709:27">case <expr pos:start="709:24" pos:end="709:26"><literal type="char" pos:start="709:24" pos:end="709:26">'%'</literal></expr>:</case>

                    <if_stmt pos:start="711:21" pos:end="719:67"><if pos:start="711:21" pos:end="715:78">if <condition pos:start="711:24" pos:end="711:52">(<expr pos:start="711:25" pos:end="711:51"><operator pos:start="711:25" pos:end="711:25">(</operator><name pos:start="711:26" pos:end="711:33">unsigned</name><operator pos:start="711:34" pos:end="711:34">)</operator> <call pos:start="711:36" pos:end="711:46"><name pos:start="711:36" pos:end="711:39">X_RD</name> <argument_list pos:start="711:41" pos:end="711:46">(<argument pos:start="711:42" pos:end="711:45"><expr pos:start="711:42" pos:end="711:45"><name pos:start="711:42" pos:end="711:45">insn</name></expr></argument>)</argument_list></call> <operator pos:start="711:48" pos:end="711:48">&lt;</operator> <literal type="number" pos:start="711:50" pos:end="711:51">32</literal></expr>)</condition><block type="pseudo" pos:start="713:23" pos:end="715:78"><block_content pos:start="713:23" pos:end="715:78">

                      <expr_stmt pos:start="713:23" pos:end="715:78"><expr pos:start="713:23" pos:end="715:77"><call pos:start="713:23" pos:end="715:77">(<modifier pos:start="713:24" pos:end="713:24">*</modifier><name pos:start="713:25" pos:end="713:42"><name pos:start="713:25" pos:end="713:28">info</name><operator pos:start="713:29" pos:end="713:30">-&gt;</operator><name pos:start="713:31" pos:end="713:42">fprintf_func</name></name>) <argument_list pos:start="713:45" pos:end="715:77">(<argument pos:start="713:46" pos:end="713:51"><expr pos:start="713:46" pos:end="713:51"><name pos:start="713:46" pos:end="713:51">stream</name></expr></argument>, <argument pos:start="713:54" pos:end="713:59"><expr pos:start="713:54" pos:end="713:59"><literal type="string" pos:start="713:54" pos:end="713:59">"%%%s"</literal></expr></argument>,

                                             <argument pos:start="715:46" pos:end="715:76"><expr pos:start="715:46" pos:end="715:76"><name pos:start="715:46" pos:end="715:76"><name pos:start="715:46" pos:end="715:63">v9_hpriv_reg_names</name><index pos:start="715:64" pos:end="715:76">[<expr pos:start="715:65" pos:end="715:75"><call pos:start="715:65" pos:end="715:75"><name pos:start="715:65" pos:end="715:68">X_RD</name> <argument_list pos:start="715:70" pos:end="715:75">(<argument pos:start="715:71" pos:end="715:74"><expr pos:start="715:71" pos:end="715:74"><name pos:start="715:71" pos:end="715:74">insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="717:21" pos:end="719:67">else<block type="pseudo" pos:start="719:23" pos:end="719:67"><block_content pos:start="719:23" pos:end="719:67">

                      <expr_stmt pos:start="719:23" pos:end="719:67"><expr pos:start="719:23" pos:end="719:66"><call pos:start="719:23" pos:end="719:66">(<modifier pos:start="719:24" pos:end="719:24">*</modifier><name pos:start="719:25" pos:end="719:42"><name pos:start="719:25" pos:end="719:28">info</name><operator pos:start="719:29" pos:end="719:30">-&gt;</operator><name pos:start="719:31" pos:end="719:42">fprintf_func</name></name>) <argument_list pos:start="719:45" pos:end="719:66">(<argument pos:start="719:46" pos:end="719:51"><expr pos:start="719:46" pos:end="719:51"><name pos:start="719:46" pos:end="719:51">stream</name></expr></argument>, <argument pos:start="719:54" pos:end="719:65"><expr pos:start="719:54" pos:end="719:65"><literal type="string" pos:start="719:54" pos:end="719:65">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="721:21" pos:end="721:26">break;</break>



                  <case pos:start="725:19" pos:end="725:27">case <expr pos:start="725:24" pos:end="725:26"><literal type="char" pos:start="725:24" pos:end="725:26">'/'</literal></expr>:</case>

                    <if_stmt pos:start="727:21" pos:end="735:81"><if pos:start="727:21" pos:end="729:67">if <condition pos:start="727:24" pos:end="727:63">(<expr pos:start="727:25" pos:end="727:62"><call pos:start="727:25" pos:end="727:36"><name pos:start="727:25" pos:end="727:29">X_RS1</name> <argument_list pos:start="727:31" pos:end="727:36">(<argument pos:start="727:32" pos:end="727:35"><expr pos:start="727:32" pos:end="727:35"><name pos:start="727:32" pos:end="727:35">insn</name></expr></argument>)</argument_list></call> <operator pos:start="727:38" pos:end="727:38">&lt;</operator> <literal type="number" pos:start="727:40" pos:end="727:41">16</literal> <operator pos:start="727:43" pos:end="727:44">||</operator> <call pos:start="727:46" pos:end="727:57"><name pos:start="727:46" pos:end="727:50">X_RS1</name> <argument_list pos:start="727:52" pos:end="727:57">(<argument pos:start="727:53" pos:end="727:56"><expr pos:start="727:53" pos:end="727:56"><name pos:start="727:53" pos:end="727:56">insn</name></expr></argument>)</argument_list></call> <operator pos:start="727:59" pos:end="727:59">&gt;</operator> <literal type="number" pos:start="727:61" pos:end="727:62">25</literal></expr>)</condition><block type="pseudo" pos:start="729:23" pos:end="729:67"><block_content pos:start="729:23" pos:end="729:67">

                      <expr_stmt pos:start="729:23" pos:end="729:67"><expr pos:start="729:23" pos:end="729:66"><call pos:start="729:23" pos:end="729:66">(<modifier pos:start="729:24" pos:end="729:24">*</modifier><name pos:start="729:25" pos:end="729:42"><name pos:start="729:25" pos:end="729:28">info</name><operator pos:start="729:29" pos:end="729:30">-&gt;</operator><name pos:start="729:31" pos:end="729:42">fprintf_func</name></name>) <argument_list pos:start="729:45" pos:end="729:66">(<argument pos:start="729:46" pos:end="729:51"><expr pos:start="729:46" pos:end="729:51"><name pos:start="729:46" pos:end="729:51">stream</name></expr></argument>, <argument pos:start="729:54" pos:end="729:65"><expr pos:start="729:54" pos:end="729:65"><literal type="string" pos:start="729:54" pos:end="729:65">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="731:21" pos:end="735:81">else<block type="pseudo" pos:start="733:23" pos:end="735:81"><block_content pos:start="733:23" pos:end="735:81">

                      <expr_stmt pos:start="733:23" pos:end="735:81"><expr pos:start="733:23" pos:end="735:80"><call pos:start="733:23" pos:end="735:80">(<modifier pos:start="733:24" pos:end="733:24">*</modifier><name pos:start="733:25" pos:end="733:42"><name pos:start="733:25" pos:end="733:28">info</name><operator pos:start="733:29" pos:end="733:30">-&gt;</operator><name pos:start="733:31" pos:end="733:42">fprintf_func</name></name>) <argument_list pos:start="733:45" pos:end="735:80">(<argument pos:start="733:46" pos:end="733:51"><expr pos:start="733:46" pos:end="733:51"><name pos:start="733:46" pos:end="733:51">stream</name></expr></argument>, <argument pos:start="733:54" pos:end="733:59"><expr pos:start="733:54" pos:end="733:59"><literal type="string" pos:start="733:54" pos:end="733:59">"%%%s"</literal></expr></argument>,

                                             <argument pos:start="735:46" pos:end="735:79"><expr pos:start="735:46" pos:end="735:79"><name pos:start="735:46" pos:end="735:79"><name pos:start="735:46" pos:end="735:62">v9a_asr_reg_names</name><index pos:start="735:63" pos:end="735:79">[<expr pos:start="735:64" pos:end="735:78"><call pos:start="735:64" pos:end="735:75"><name pos:start="735:64" pos:end="735:68">X_RS1</name> <argument_list pos:start="735:70" pos:end="735:75">(<argument pos:start="735:71" pos:end="735:74"><expr pos:start="735:71" pos:end="735:74"><name pos:start="735:71" pos:end="735:74">insn</name></expr></argument>)</argument_list></call><operator pos:start="735:76" pos:end="735:76">-</operator><literal type="number" pos:start="735:77" pos:end="735:78">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="737:21" pos:end="737:26">break;</break>



                  <case pos:start="741:19" pos:end="741:27">case <expr pos:start="741:24" pos:end="741:26"><literal type="char" pos:start="741:24" pos:end="741:26">'_'</literal></expr>:</case>

                    <if_stmt pos:start="743:21" pos:end="751:80"><if pos:start="743:21" pos:end="745:67">if <condition pos:start="743:24" pos:end="743:61">(<expr pos:start="743:25" pos:end="743:60"><call pos:start="743:25" pos:end="743:35"><name pos:start="743:25" pos:end="743:28">X_RD</name> <argument_list pos:start="743:30" pos:end="743:35">(<argument pos:start="743:31" pos:end="743:34"><expr pos:start="743:31" pos:end="743:34"><name pos:start="743:31" pos:end="743:34">insn</name></expr></argument>)</argument_list></call> <operator pos:start="743:37" pos:end="743:37">&lt;</operator> <literal type="number" pos:start="743:39" pos:end="743:40">16</literal> <operator pos:start="743:42" pos:end="743:43">||</operator> <call pos:start="743:45" pos:end="743:55"><name pos:start="743:45" pos:end="743:48">X_RD</name> <argument_list pos:start="743:50" pos:end="743:55">(<argument pos:start="743:51" pos:end="743:54"><expr pos:start="743:51" pos:end="743:54"><name pos:start="743:51" pos:end="743:54">insn</name></expr></argument>)</argument_list></call> <operator pos:start="743:57" pos:end="743:57">&gt;</operator> <literal type="number" pos:start="743:59" pos:end="743:60">25</literal></expr>)</condition><block type="pseudo" pos:start="745:23" pos:end="745:67"><block_content pos:start="745:23" pos:end="745:67">

                      <expr_stmt pos:start="745:23" pos:end="745:67"><expr pos:start="745:23" pos:end="745:66"><call pos:start="745:23" pos:end="745:66">(<modifier pos:start="745:24" pos:end="745:24">*</modifier><name pos:start="745:25" pos:end="745:42"><name pos:start="745:25" pos:end="745:28">info</name><operator pos:start="745:29" pos:end="745:30">-&gt;</operator><name pos:start="745:31" pos:end="745:42">fprintf_func</name></name>) <argument_list pos:start="745:45" pos:end="745:66">(<argument pos:start="745:46" pos:end="745:51"><expr pos:start="745:46" pos:end="745:51"><name pos:start="745:46" pos:end="745:51">stream</name></expr></argument>, <argument pos:start="745:54" pos:end="745:65"><expr pos:start="745:54" pos:end="745:65"><literal type="string" pos:start="745:54" pos:end="745:65">"%%reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="747:21" pos:end="751:80">else<block type="pseudo" pos:start="749:23" pos:end="751:80"><block_content pos:start="749:23" pos:end="751:80">

                      <expr_stmt pos:start="749:23" pos:end="751:80"><expr pos:start="749:23" pos:end="751:79"><call pos:start="749:23" pos:end="751:79">(<modifier pos:start="749:24" pos:end="749:24">*</modifier><name pos:start="749:25" pos:end="749:42"><name pos:start="749:25" pos:end="749:28">info</name><operator pos:start="749:29" pos:end="749:30">-&gt;</operator><name pos:start="749:31" pos:end="749:42">fprintf_func</name></name>) <argument_list pos:start="749:45" pos:end="751:79">(<argument pos:start="749:46" pos:end="749:51"><expr pos:start="749:46" pos:end="749:51"><name pos:start="749:46" pos:end="749:51">stream</name></expr></argument>, <argument pos:start="749:54" pos:end="749:59"><expr pos:start="749:54" pos:end="749:59"><literal type="string" pos:start="749:54" pos:end="749:59">"%%%s"</literal></expr></argument>,

                                             <argument pos:start="751:46" pos:end="751:78"><expr pos:start="751:46" pos:end="751:78"><name pos:start="751:46" pos:end="751:78"><name pos:start="751:46" pos:end="751:62">v9a_asr_reg_names</name><index pos:start="751:63" pos:end="751:78">[<expr pos:start="751:64" pos:end="751:77"><call pos:start="751:64" pos:end="751:74"><name pos:start="751:64" pos:end="751:67">X_RD</name> <argument_list pos:start="751:69" pos:end="751:74">(<argument pos:start="751:70" pos:end="751:73"><expr pos:start="751:70" pos:end="751:73"><name pos:start="751:70" pos:end="751:73">insn</name></expr></argument>)</argument_list></call><operator pos:start="751:75" pos:end="751:75">-</operator><literal type="number" pos:start="751:76" pos:end="751:77">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="753:21" pos:end="753:26">break;</break>



                  <case pos:start="757:19" pos:end="757:27">case <expr pos:start="757:24" pos:end="757:26"><literal type="char" pos:start="757:24" pos:end="757:26">'*'</literal></expr>:</case>

                    <block pos:start="759:21" pos:end="775:21">{<block_content pos:start="761:23" pos:end="773:28">

                      <decl_stmt pos:start="761:23" pos:end="761:77"><decl pos:start="761:23" pos:end="761:76"><type pos:start="761:23" pos:end="761:34"><specifier pos:start="761:23" pos:end="761:27">const</specifier> <name pos:start="761:29" pos:end="761:32">char</name> <modifier pos:start="761:34" pos:end="761:34">*</modifier></type><name pos:start="761:35" pos:end="761:38">name</name> <init pos:start="761:40" pos:end="761:76">= <expr pos:start="761:42" pos:end="761:76"><call pos:start="761:42" pos:end="761:76"><name pos:start="761:42" pos:end="761:62">sparc_decode_prefetch</name> <argument_list pos:start="761:64" pos:end="761:76">(<argument pos:start="761:65" pos:end="761:75"><expr pos:start="761:65" pos:end="761:75"><call pos:start="761:65" pos:end="761:75"><name pos:start="761:65" pos:end="761:68">X_RD</name> <argument_list pos:start="761:70" pos:end="761:75">(<argument pos:start="761:71" pos:end="761:74"><expr pos:start="761:71" pos:end="761:74"><name pos:start="761:71" pos:end="761:74">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                      <if_stmt pos:start="765:23" pos:end="771:75"><if pos:start="765:23" pos:end="767:67">if <condition pos:start="765:26" pos:end="765:31">(<expr pos:start="765:27" pos:end="765:30"><name pos:start="765:27" pos:end="765:30">name</name></expr>)</condition><block type="pseudo" pos:start="767:25" pos:end="767:67"><block_content pos:start="767:25" pos:end="767:67">

                        <expr_stmt pos:start="767:25" pos:end="767:67"><expr pos:start="767:25" pos:end="767:66"><call pos:start="767:25" pos:end="767:66">(<modifier pos:start="767:26" pos:end="767:26">*</modifier><name pos:start="767:27" pos:end="767:44"><name pos:start="767:27" pos:end="767:30">info</name><operator pos:start="767:31" pos:end="767:32">-&gt;</operator><name pos:start="767:33" pos:end="767:44">fprintf_func</name></name>) <argument_list pos:start="767:47" pos:end="767:66">(<argument pos:start="767:48" pos:end="767:53"><expr pos:start="767:48" pos:end="767:53"><name pos:start="767:48" pos:end="767:53">stream</name></expr></argument>, <argument pos:start="767:56" pos:end="767:59"><expr pos:start="767:56" pos:end="767:59"><literal type="string" pos:start="767:56" pos:end="767:59">"%s"</literal></expr></argument>, <argument pos:start="767:62" pos:end="767:65"><expr pos:start="767:62" pos:end="767:65"><name pos:start="767:62" pos:end="767:65">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="769:23" pos:end="771:75">else<block type="pseudo" pos:start="771:25" pos:end="771:75"><block_content pos:start="771:25" pos:end="771:75">

                        <expr_stmt pos:start="771:25" pos:end="771:75"><expr pos:start="771:25" pos:end="771:74"><call pos:start="771:25" pos:end="771:74">(<modifier pos:start="771:26" pos:end="771:26">*</modifier><name pos:start="771:27" pos:end="771:44"><name pos:start="771:27" pos:end="771:30">info</name><operator pos:start="771:31" pos:end="771:32">-&gt;</operator><name pos:start="771:33" pos:end="771:44">fprintf_func</name></name>) <argument_list pos:start="771:47" pos:end="771:74">(<argument pos:start="771:48" pos:end="771:53"><expr pos:start="771:48" pos:end="771:53"><name pos:start="771:48" pos:end="771:53">stream</name></expr></argument>, <argument pos:start="771:56" pos:end="771:60"><expr pos:start="771:56" pos:end="771:60"><literal type="string" pos:start="771:56" pos:end="771:60">"%ld"</literal></expr></argument>, <argument pos:start="771:63" pos:end="771:73"><expr pos:start="771:63" pos:end="771:73"><call pos:start="771:63" pos:end="771:73"><name pos:start="771:63" pos:end="771:66">X_RD</name> <argument_list pos:start="771:68" pos:end="771:73">(<argument pos:start="771:69" pos:end="771:72"><expr pos:start="771:69" pos:end="771:72"><name pos:start="771:69" pos:end="771:72">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                      <break pos:start="773:23" pos:end="773:28">break;</break>

                    </block_content>}</block>



                  <case pos:start="779:19" pos:end="779:27">case <expr pos:start="779:24" pos:end="779:26"><literal type="char" pos:start="779:24" pos:end="779:26">'M'</literal></expr>:</case>

                    <expr_stmt pos:start="781:21" pos:end="781:77"><expr pos:start="781:21" pos:end="781:76"><call pos:start="781:21" pos:end="781:76">(<modifier pos:start="781:22" pos:end="781:22">*</modifier><name pos:start="781:23" pos:end="781:40"><name pos:start="781:23" pos:end="781:26">info</name><operator pos:start="781:27" pos:end="781:28">-&gt;</operator><name pos:start="781:29" pos:end="781:40">fprintf_func</name></name>) <argument_list pos:start="781:43" pos:end="781:76">(<argument pos:start="781:44" pos:end="781:49"><expr pos:start="781:44" pos:end="781:49"><name pos:start="781:44" pos:end="781:49">stream</name></expr></argument>, <argument pos:start="781:52" pos:end="781:61"><expr pos:start="781:52" pos:end="781:61"><literal type="string" pos:start="781:52" pos:end="781:61">"%%asr%ld"</literal></expr></argument>, <argument pos:start="781:64" pos:end="781:75"><expr pos:start="781:64" pos:end="781:75"><call pos:start="781:64" pos:end="781:75"><name pos:start="781:64" pos:end="781:68">X_RS1</name> <argument_list pos:start="781:70" pos:end="781:75">(<argument pos:start="781:71" pos:end="781:74"><expr pos:start="781:71" pos:end="781:74"><name pos:start="781:71" pos:end="781:74">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="783:21" pos:end="783:26">break;</break>



                  <case pos:start="787:19" pos:end="787:27">case <expr pos:start="787:24" pos:end="787:26"><literal type="char" pos:start="787:24" pos:end="787:26">'m'</literal></expr>:</case>

                    <expr_stmt pos:start="789:21" pos:end="789:76"><expr pos:start="789:21" pos:end="789:75"><call pos:start="789:21" pos:end="789:75">(<modifier pos:start="789:22" pos:end="789:22">*</modifier><name pos:start="789:23" pos:end="789:40"><name pos:start="789:23" pos:end="789:26">info</name><operator pos:start="789:27" pos:end="789:28">-&gt;</operator><name pos:start="789:29" pos:end="789:40">fprintf_func</name></name>) <argument_list pos:start="789:43" pos:end="789:75">(<argument pos:start="789:44" pos:end="789:49"><expr pos:start="789:44" pos:end="789:49"><name pos:start="789:44" pos:end="789:49">stream</name></expr></argument>, <argument pos:start="789:52" pos:end="789:61"><expr pos:start="789:52" pos:end="789:61"><literal type="string" pos:start="789:52" pos:end="789:61">"%%asr%ld"</literal></expr></argument>, <argument pos:start="789:64" pos:end="789:74"><expr pos:start="789:64" pos:end="789:74"><call pos:start="789:64" pos:end="789:74"><name pos:start="789:64" pos:end="789:67">X_RD</name> <argument_list pos:start="789:69" pos:end="789:74">(<argument pos:start="789:70" pos:end="789:73"><expr pos:start="789:70" pos:end="789:73"><name pos:start="789:70" pos:end="789:73">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="791:21" pos:end="791:26">break;</break>



                  <case pos:start="795:19" pos:end="795:27">case <expr pos:start="795:24" pos:end="795:26"><literal type="char" pos:start="795:24" pos:end="795:26">'L'</literal></expr>:</case>

                    <expr_stmt pos:start="797:21" pos:end="797:75"><expr pos:start="797:21" pos:end="797:74"><name pos:start="797:21" pos:end="797:32"><name pos:start="797:21" pos:end="797:24">info</name><operator pos:start="797:25" pos:end="797:26">-&gt;</operator><name pos:start="797:27" pos:end="797:32">target</name></name> <operator pos:start="797:34" pos:end="797:34">=</operator> <name pos:start="797:36" pos:end="797:42">memaddr</name> <operator pos:start="797:44" pos:end="797:44">+</operator> <call pos:start="797:46" pos:end="797:70"><name pos:start="797:46" pos:end="797:48">SEX</name> <argument_list pos:start="797:50" pos:end="797:70">(<argument pos:start="797:51" pos:end="797:65"><expr pos:start="797:51" pos:end="797:65"><call pos:start="797:51" pos:end="797:65"><name pos:start="797:51" pos:end="797:58">X_DISP30</name> <argument_list pos:start="797:60" pos:end="797:65">(<argument pos:start="797:61" pos:end="797:64"><expr pos:start="797:61" pos:end="797:64"><name pos:start="797:61" pos:end="797:64">insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="797:68" pos:end="797:69"><expr pos:start="797:68" pos:end="797:69"><literal type="number" pos:start="797:68" pos:end="797:69">30</literal></expr></argument>)</argument_list></call> <operator pos:start="797:72" pos:end="797:72">*</operator> <literal type="number" pos:start="797:74" pos:end="797:74">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="799:21" pos:end="799:69"><expr pos:start="799:21" pos:end="799:68"><call pos:start="799:21" pos:end="799:68">(<modifier pos:start="799:22" pos:end="799:22">*</modifier><name pos:start="799:23" pos:end="799:46"><name pos:start="799:23" pos:end="799:26">info</name><operator pos:start="799:27" pos:end="799:28">-&gt;</operator><name pos:start="799:29" pos:end="799:46">print_address_func</name></name>) <argument_list pos:start="799:49" pos:end="799:68">(<argument pos:start="799:50" pos:end="799:61"><expr pos:start="799:50" pos:end="799:61"><name pos:start="799:50" pos:end="799:61"><name pos:start="799:50" pos:end="799:53">info</name><operator pos:start="799:54" pos:end="799:55">-&gt;</operator><name pos:start="799:56" pos:end="799:61">target</name></name></expr></argument>, <argument pos:start="799:64" pos:end="799:67"><expr pos:start="799:64" pos:end="799:67"><name pos:start="799:64" pos:end="799:67">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="801:21" pos:end="801:26">break;</break>



                  <case pos:start="805:19" pos:end="805:27">case <expr pos:start="805:24" pos:end="805:26"><literal type="char" pos:start="805:24" pos:end="805:26">'n'</literal></expr>:</case>

                    <expr_stmt pos:start="807:21" pos:end="809:65"><expr pos:start="807:21" pos:end="809:64"><call pos:start="807:21" pos:end="809:64">(<modifier pos:start="807:22" pos:end="807:22">*</modifier><name pos:start="807:23" pos:end="807:40"><name pos:start="807:23" pos:end="807:26">info</name><operator pos:start="807:27" pos:end="807:28">-&gt;</operator><name pos:start="807:29" pos:end="807:40">fprintf_func</name></name>)

                      <argument_list pos:start="809:23" pos:end="809:64">(<argument pos:start="809:24" pos:end="809:29"><expr pos:start="809:24" pos:end="809:29"><name pos:start="809:24" pos:end="809:29">stream</name></expr></argument>, <argument pos:start="809:32" pos:end="809:36"><expr pos:start="809:32" pos:end="809:36"><literal type="string" pos:start="809:32" pos:end="809:36">"%#x"</literal></expr></argument>, <argument pos:start="809:39" pos:end="809:63"><expr pos:start="809:39" pos:end="809:63"><call pos:start="809:39" pos:end="809:63"><name pos:start="809:39" pos:end="809:41">SEX</name> <argument_list pos:start="809:43" pos:end="809:63">(<argument pos:start="809:44" pos:end="809:58"><expr pos:start="809:44" pos:end="809:58"><call pos:start="809:44" pos:end="809:58"><name pos:start="809:44" pos:end="809:51">X_DISP22</name> <argument_list pos:start="809:53" pos:end="809:58">(<argument pos:start="809:54" pos:end="809:57"><expr pos:start="809:54" pos:end="809:57"><name pos:start="809:54" pos:end="809:57">insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="809:61" pos:end="809:62"><expr pos:start="809:61" pos:end="809:62"><literal type="number" pos:start="809:61" pos:end="809:62">22</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="811:21" pos:end="811:26">break;</break>



                  <case pos:start="815:19" pos:end="815:27">case <expr pos:start="815:24" pos:end="815:26"><literal type="char" pos:start="815:24" pos:end="815:26">'l'</literal></expr>:</case>

                    <expr_stmt pos:start="817:21" pos:end="817:75"><expr pos:start="817:21" pos:end="817:74"><name pos:start="817:21" pos:end="817:32"><name pos:start="817:21" pos:end="817:24">info</name><operator pos:start="817:25" pos:end="817:26">-&gt;</operator><name pos:start="817:27" pos:end="817:32">target</name></name> <operator pos:start="817:34" pos:end="817:34">=</operator> <name pos:start="817:36" pos:end="817:42">memaddr</name> <operator pos:start="817:44" pos:end="817:44">+</operator> <call pos:start="817:46" pos:end="817:70"><name pos:start="817:46" pos:end="817:48">SEX</name> <argument_list pos:start="817:50" pos:end="817:70">(<argument pos:start="817:51" pos:end="817:65"><expr pos:start="817:51" pos:end="817:65"><call pos:start="817:51" pos:end="817:65"><name pos:start="817:51" pos:end="817:58">X_DISP22</name> <argument_list pos:start="817:60" pos:end="817:65">(<argument pos:start="817:61" pos:end="817:64"><expr pos:start="817:61" pos:end="817:64"><name pos:start="817:61" pos:end="817:64">insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="817:68" pos:end="817:69"><expr pos:start="817:68" pos:end="817:69"><literal type="number" pos:start="817:68" pos:end="817:69">22</literal></expr></argument>)</argument_list></call> <operator pos:start="817:72" pos:end="817:72">*</operator> <literal type="number" pos:start="817:74" pos:end="817:74">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="819:21" pos:end="819:69"><expr pos:start="819:21" pos:end="819:68"><call pos:start="819:21" pos:end="819:68">(<modifier pos:start="819:22" pos:end="819:22">*</modifier><name pos:start="819:23" pos:end="819:46"><name pos:start="819:23" pos:end="819:26">info</name><operator pos:start="819:27" pos:end="819:28">-&gt;</operator><name pos:start="819:29" pos:end="819:46">print_address_func</name></name>) <argument_list pos:start="819:49" pos:end="819:68">(<argument pos:start="819:50" pos:end="819:61"><expr pos:start="819:50" pos:end="819:61"><name pos:start="819:50" pos:end="819:61"><name pos:start="819:50" pos:end="819:53">info</name><operator pos:start="819:54" pos:end="819:55">-&gt;</operator><name pos:start="819:56" pos:end="819:61">target</name></name></expr></argument>, <argument pos:start="819:64" pos:end="819:67"><expr pos:start="819:64" pos:end="819:67"><name pos:start="819:64" pos:end="819:67">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="821:21" pos:end="821:26">break;</break>



                  <case pos:start="825:19" pos:end="825:27">case <expr pos:start="825:24" pos:end="825:26"><literal type="char" pos:start="825:24" pos:end="825:26">'A'</literal></expr>:</case>

                    <block pos:start="827:21" pos:end="857:21">{<block_content pos:start="829:23" pos:end="855:28">

                      <decl_stmt pos:start="829:23" pos:end="829:39"><decl pos:start="829:23" pos:end="829:38"><type pos:start="829:23" pos:end="829:34"><specifier pos:start="829:23" pos:end="829:27">const</specifier> <name pos:start="829:29" pos:end="829:32">char</name> <modifier pos:start="829:34" pos:end="829:34">*</modifier></type><name pos:start="829:35" pos:end="829:38">name</name></decl>;</decl_stmt>



                      <if_stmt pos:start="833:23" pos:end="843:66"><if pos:start="833:23" pos:end="839:66">if <condition pos:start="833:26" pos:end="837:63">(<expr pos:start="833:27" pos:end="837:62"><operator pos:start="833:27" pos:end="833:27">(</operator><name pos:start="833:28" pos:end="833:37"><name pos:start="833:28" pos:end="833:31">info</name><operator pos:start="833:32" pos:end="833:33">-&gt;</operator><name pos:start="833:34" pos:end="833:37">mach</name></name> <operator pos:start="833:39" pos:end="833:40">==</operator> <name pos:start="833:42" pos:end="833:63">bfd_mach_sparc_v8plusa</name><operator pos:start="833:64" pos:end="833:64">)</operator> <operator pos:start="833:66" pos:end="833:67">||</operator>

                          <operator pos:start="835:27" pos:end="835:27">(</operator><operator pos:start="835:28" pos:end="835:28">(</operator><name pos:start="835:29" pos:end="835:38"><name pos:start="835:29" pos:end="835:32">info</name><operator pos:start="835:33" pos:end="835:34">-&gt;</operator><name pos:start="835:35" pos:end="835:38">mach</name></name> <operator pos:start="835:40" pos:end="835:41">&gt;=</operator> <name pos:start="835:43" pos:end="835:59">bfd_mach_sparc_v9</name><operator pos:start="835:60" pos:end="835:60">)</operator> <operator pos:start="835:62" pos:end="835:63">&amp;&amp;</operator>

                           <operator pos:start="837:28" pos:end="837:28">(</operator><name pos:start="837:29" pos:end="837:38"><name pos:start="837:29" pos:end="837:32">info</name><operator pos:start="837:33" pos:end="837:34">-&gt;</operator><name pos:start="837:35" pos:end="837:38">mach</name></name> <operator pos:start="837:40" pos:end="837:41">&lt;=</operator> <name pos:start="837:43" pos:end="837:60">bfd_mach_sparc_v9b</name><operator pos:start="837:61" pos:end="837:61">)</operator><operator pos:start="837:62" pos:end="837:62">)</operator></expr>)</condition><block type="pseudo" pos:start="839:25" pos:end="839:66"><block_content pos:start="839:25" pos:end="839:66">

                        <expr_stmt pos:start="839:25" pos:end="839:66"><expr pos:start="839:25" pos:end="839:65"><name pos:start="839:25" pos:end="839:28">name</name> <operator pos:start="839:30" pos:end="839:30">=</operator> <call pos:start="839:32" pos:end="839:65"><name pos:start="839:32" pos:end="839:50">sparc_decode_asi_v9</name> <argument_list pos:start="839:52" pos:end="839:65">(<argument pos:start="839:53" pos:end="839:64"><expr pos:start="839:53" pos:end="839:64"><call pos:start="839:53" pos:end="839:64"><name pos:start="839:53" pos:end="839:57">X_ASI</name> <argument_list pos:start="839:59" pos:end="839:64">(<argument pos:start="839:60" pos:end="839:63"><expr pos:start="839:60" pos:end="839:63"><name pos:start="839:60" pos:end="839:63">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="841:23" pos:end="843:66">else<block type="pseudo" pos:start="843:25" pos:end="843:66"><block_content pos:start="843:25" pos:end="843:66">

                        <expr_stmt pos:start="843:25" pos:end="843:66"><expr pos:start="843:25" pos:end="843:65"><name pos:start="843:25" pos:end="843:28">name</name> <operator pos:start="843:30" pos:end="843:30">=</operator> <call pos:start="843:32" pos:end="843:65"><name pos:start="843:32" pos:end="843:50">sparc_decode_asi_v8</name> <argument_list pos:start="843:52" pos:end="843:65">(<argument pos:start="843:53" pos:end="843:64"><expr pos:start="843:53" pos:end="843:64"><call pos:start="843:53" pos:end="843:64"><name pos:start="843:53" pos:end="843:57">X_ASI</name> <argument_list pos:start="843:59" pos:end="843:64">(<argument pos:start="843:60" pos:end="843:63"><expr pos:start="843:60" pos:end="843:63"><name pos:start="843:60" pos:end="843:63">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                      <if_stmt pos:start="847:23" pos:end="853:78"><if pos:start="847:23" pos:end="849:67">if <condition pos:start="847:26" pos:end="847:31">(<expr pos:start="847:27" pos:end="847:30"><name pos:start="847:27" pos:end="847:30">name</name></expr>)</condition><block type="pseudo" pos:start="849:25" pos:end="849:67"><block_content pos:start="849:25" pos:end="849:67">

                        <expr_stmt pos:start="849:25" pos:end="849:67"><expr pos:start="849:25" pos:end="849:66"><call pos:start="849:25" pos:end="849:66">(<modifier pos:start="849:26" pos:end="849:26">*</modifier><name pos:start="849:27" pos:end="849:44"><name pos:start="849:27" pos:end="849:30">info</name><operator pos:start="849:31" pos:end="849:32">-&gt;</operator><name pos:start="849:33" pos:end="849:44">fprintf_func</name></name>) <argument_list pos:start="849:47" pos:end="849:66">(<argument pos:start="849:48" pos:end="849:53"><expr pos:start="849:48" pos:end="849:53"><name pos:start="849:48" pos:end="849:53">stream</name></expr></argument>, <argument pos:start="849:56" pos:end="849:59"><expr pos:start="849:56" pos:end="849:59"><literal type="string" pos:start="849:56" pos:end="849:59">"%s"</literal></expr></argument>, <argument pos:start="849:62" pos:end="849:65"><expr pos:start="849:62" pos:end="849:65"><name pos:start="849:62" pos:end="849:65">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="851:23" pos:end="853:78">else<block type="pseudo" pos:start="853:25" pos:end="853:78"><block_content pos:start="853:25" pos:end="853:78">

                        <expr_stmt pos:start="853:25" pos:end="853:78"><expr pos:start="853:25" pos:end="853:77"><call pos:start="853:25" pos:end="853:77">(<modifier pos:start="853:26" pos:end="853:26">*</modifier><name pos:start="853:27" pos:end="853:44"><name pos:start="853:27" pos:end="853:30">info</name><operator pos:start="853:31" pos:end="853:32">-&gt;</operator><name pos:start="853:33" pos:end="853:44">fprintf_func</name></name>) <argument_list pos:start="853:47" pos:end="853:77">(<argument pos:start="853:48" pos:end="853:53"><expr pos:start="853:48" pos:end="853:53"><name pos:start="853:48" pos:end="853:53">stream</name></expr></argument>, <argument pos:start="853:56" pos:end="853:62"><expr pos:start="853:56" pos:end="853:62"><literal type="string" pos:start="853:56" pos:end="853:62">"(%ld)"</literal></expr></argument>, <argument pos:start="853:65" pos:end="853:76"><expr pos:start="853:65" pos:end="853:76"><call pos:start="853:65" pos:end="853:76"><name pos:start="853:65" pos:end="853:69">X_ASI</name> <argument_list pos:start="853:71" pos:end="853:76">(<argument pos:start="853:72" pos:end="853:75"><expr pos:start="853:72" pos:end="853:75"><name pos:start="853:72" pos:end="853:75">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                      <break pos:start="855:23" pos:end="855:28">break;</break>

                    </block_content>}</block>



                  <case pos:start="861:19" pos:end="861:27">case <expr pos:start="861:24" pos:end="861:26"><literal type="char" pos:start="861:24" pos:end="861:26">'C'</literal></expr>:</case>

                    <expr_stmt pos:start="863:21" pos:end="863:60"><expr pos:start="863:21" pos:end="863:59"><call pos:start="863:21" pos:end="863:59">(<modifier pos:start="863:22" pos:end="863:22">*</modifier><name pos:start="863:23" pos:end="863:40"><name pos:start="863:23" pos:end="863:26">info</name><operator pos:start="863:27" pos:end="863:28">-&gt;</operator><name pos:start="863:29" pos:end="863:40">fprintf_func</name></name>) <argument_list pos:start="863:43" pos:end="863:59">(<argument pos:start="863:44" pos:end="863:49"><expr pos:start="863:44" pos:end="863:49"><name pos:start="863:44" pos:end="863:49">stream</name></expr></argument>, <argument pos:start="863:52" pos:end="863:58"><expr pos:start="863:52" pos:end="863:58"><literal type="string" pos:start="863:52" pos:end="863:58">"%%csr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="865:21" pos:end="865:26">break;</break>



                  <case pos:start="869:19" pos:end="869:27">case <expr pos:start="869:24" pos:end="869:26"><literal type="char" pos:start="869:24" pos:end="869:26">'F'</literal></expr>:</case>

                    <expr_stmt pos:start="871:21" pos:end="871:60"><expr pos:start="871:21" pos:end="871:59"><call pos:start="871:21" pos:end="871:59">(<modifier pos:start="871:22" pos:end="871:22">*</modifier><name pos:start="871:23" pos:end="871:40"><name pos:start="871:23" pos:end="871:26">info</name><operator pos:start="871:27" pos:end="871:28">-&gt;</operator><name pos:start="871:29" pos:end="871:40">fprintf_func</name></name>) <argument_list pos:start="871:43" pos:end="871:59">(<argument pos:start="871:44" pos:end="871:49"><expr pos:start="871:44" pos:end="871:49"><name pos:start="871:44" pos:end="871:49">stream</name></expr></argument>, <argument pos:start="871:52" pos:end="871:58"><expr pos:start="871:52" pos:end="871:58"><literal type="string" pos:start="871:52" pos:end="871:58">"%%fsr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="873:21" pos:end="873:26">break;</break>



                  <case pos:start="877:19" pos:end="877:27">case <expr pos:start="877:24" pos:end="877:26"><literal type="char" pos:start="877:24" pos:end="877:26">'p'</literal></expr>:</case>

                    <expr_stmt pos:start="879:21" pos:end="879:60"><expr pos:start="879:21" pos:end="879:59"><call pos:start="879:21" pos:end="879:59">(<modifier pos:start="879:22" pos:end="879:22">*</modifier><name pos:start="879:23" pos:end="879:40"><name pos:start="879:23" pos:end="879:26">info</name><operator pos:start="879:27" pos:end="879:28">-&gt;</operator><name pos:start="879:29" pos:end="879:40">fprintf_func</name></name>) <argument_list pos:start="879:43" pos:end="879:59">(<argument pos:start="879:44" pos:end="879:49"><expr pos:start="879:44" pos:end="879:49"><name pos:start="879:44" pos:end="879:49">stream</name></expr></argument>, <argument pos:start="879:52" pos:end="879:58"><expr pos:start="879:52" pos:end="879:58"><literal type="string" pos:start="879:52" pos:end="879:58">"%%psr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="881:21" pos:end="881:26">break;</break>



                  <case pos:start="885:19" pos:end="885:27">case <expr pos:start="885:24" pos:end="885:26"><literal type="char" pos:start="885:24" pos:end="885:26">'q'</literal></expr>:</case>

                    <expr_stmt pos:start="887:21" pos:end="887:59"><expr pos:start="887:21" pos:end="887:58"><call pos:start="887:21" pos:end="887:58">(<modifier pos:start="887:22" pos:end="887:22">*</modifier><name pos:start="887:23" pos:end="887:40"><name pos:start="887:23" pos:end="887:26">info</name><operator pos:start="887:27" pos:end="887:28">-&gt;</operator><name pos:start="887:29" pos:end="887:40">fprintf_func</name></name>) <argument_list pos:start="887:43" pos:end="887:58">(<argument pos:start="887:44" pos:end="887:49"><expr pos:start="887:44" pos:end="887:49"><name pos:start="887:44" pos:end="887:49">stream</name></expr></argument>, <argument pos:start="887:52" pos:end="887:57"><expr pos:start="887:52" pos:end="887:57"><literal type="string" pos:start="887:52" pos:end="887:57">"%%fq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="889:21" pos:end="889:26">break;</break>



                  <case pos:start="893:19" pos:end="893:27">case <expr pos:start="893:24" pos:end="893:26"><literal type="char" pos:start="893:24" pos:end="893:26">'Q'</literal></expr>:</case>

                    <expr_stmt pos:start="895:21" pos:end="895:59"><expr pos:start="895:21" pos:end="895:58"><call pos:start="895:21" pos:end="895:58">(<modifier pos:start="895:22" pos:end="895:22">*</modifier><name pos:start="895:23" pos:end="895:40"><name pos:start="895:23" pos:end="895:26">info</name><operator pos:start="895:27" pos:end="895:28">-&gt;</operator><name pos:start="895:29" pos:end="895:40">fprintf_func</name></name>) <argument_list pos:start="895:43" pos:end="895:58">(<argument pos:start="895:44" pos:end="895:49"><expr pos:start="895:44" pos:end="895:49"><name pos:start="895:44" pos:end="895:49">stream</name></expr></argument>, <argument pos:start="895:52" pos:end="895:57"><expr pos:start="895:52" pos:end="895:57"><literal type="string" pos:start="895:52" pos:end="895:57">"%%cq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="897:21" pos:end="897:26">break;</break>



                  <case pos:start="901:19" pos:end="901:27">case <expr pos:start="901:24" pos:end="901:26"><literal type="char" pos:start="901:24" pos:end="901:26">'t'</literal></expr>:</case>

                    <expr_stmt pos:start="903:21" pos:end="903:60"><expr pos:start="903:21" pos:end="903:59"><call pos:start="903:21" pos:end="903:59">(<modifier pos:start="903:22" pos:end="903:22">*</modifier><name pos:start="903:23" pos:end="903:40"><name pos:start="903:23" pos:end="903:26">info</name><operator pos:start="903:27" pos:end="903:28">-&gt;</operator><name pos:start="903:29" pos:end="903:40">fprintf_func</name></name>) <argument_list pos:start="903:43" pos:end="903:59">(<argument pos:start="903:44" pos:end="903:49"><expr pos:start="903:44" pos:end="903:49"><name pos:start="903:44" pos:end="903:49">stream</name></expr></argument>, <argument pos:start="903:52" pos:end="903:58"><expr pos:start="903:52" pos:end="903:58"><literal type="string" pos:start="903:52" pos:end="903:58">"%%tbr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="905:21" pos:end="905:26">break;</break>



                  <case pos:start="909:19" pos:end="909:27">case <expr pos:start="909:24" pos:end="909:26"><literal type="char" pos:start="909:24" pos:end="909:26">'w'</literal></expr>:</case>

                    <expr_stmt pos:start="911:21" pos:end="911:60"><expr pos:start="911:21" pos:end="911:59"><call pos:start="911:21" pos:end="911:59">(<modifier pos:start="911:22" pos:end="911:22">*</modifier><name pos:start="911:23" pos:end="911:40"><name pos:start="911:23" pos:end="911:26">info</name><operator pos:start="911:27" pos:end="911:28">-&gt;</operator><name pos:start="911:29" pos:end="911:40">fprintf_func</name></name>) <argument_list pos:start="911:43" pos:end="911:59">(<argument pos:start="911:44" pos:end="911:49"><expr pos:start="911:44" pos:end="911:49"><name pos:start="911:44" pos:end="911:49">stream</name></expr></argument>, <argument pos:start="911:52" pos:end="911:58"><expr pos:start="911:52" pos:end="911:58"><literal type="string" pos:start="911:52" pos:end="911:58">"%%wim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="913:21" pos:end="913:26">break;</break>



                  <case pos:start="917:19" pos:end="917:27">case <expr pos:start="917:24" pos:end="917:26"><literal type="char" pos:start="917:24" pos:end="917:26">'x'</literal></expr>:</case>

                    <expr_stmt pos:start="919:21" pos:end="923:61"><expr pos:start="919:21" pos:end="923:60"><call pos:start="919:21" pos:end="923:60">(<modifier pos:start="919:22" pos:end="919:22">*</modifier><name pos:start="919:23" pos:end="919:40"><name pos:start="919:23" pos:end="919:26">info</name><operator pos:start="919:27" pos:end="919:28">-&gt;</operator><name pos:start="919:29" pos:end="919:40">fprintf_func</name></name>) <argument_list pos:start="919:43" pos:end="923:60">(<argument pos:start="919:44" pos:end="919:49"><expr pos:start="919:44" pos:end="919:49"><name pos:start="919:44" pos:end="919:49">stream</name></expr></argument>, <argument pos:start="919:52" pos:end="919:56"><expr pos:start="919:52" pos:end="919:56"><literal type="string" pos:start="919:52" pos:end="919:56">"%ld"</literal></expr></argument>,

                                           <argument pos:start="921:44" pos:end="923:59"><expr pos:start="921:44" pos:end="923:59"><operator pos:start="921:44" pos:end="921:44">(</operator><operator pos:start="921:45" pos:end="921:45">(</operator><call pos:start="921:46" pos:end="921:60"><name pos:start="921:46" pos:end="921:53">X_LDST_I</name> <argument_list pos:start="921:55" pos:end="921:60">(<argument pos:start="921:56" pos:end="921:59"><expr pos:start="921:56" pos:end="921:59"><name pos:start="921:56" pos:end="921:59">insn</name></expr></argument>)</argument_list></call> <operator pos:start="921:62" pos:end="921:63">&lt;&lt;</operator> <literal type="number" pos:start="921:65" pos:end="921:65">8</literal><operator pos:start="921:66" pos:end="921:66">)</operator>

                                            <operator pos:start="923:45" pos:end="923:45">+</operator> <call pos:start="923:47" pos:end="923:58"><name pos:start="923:47" pos:end="923:51">X_ASI</name> <argument_list pos:start="923:53" pos:end="923:58">(<argument pos:start="923:54" pos:end="923:57"><expr pos:start="923:54" pos:end="923:57"><name pos:start="923:54" pos:end="923:57">insn</name></expr></argument>)</argument_list></call><operator pos:start="923:59" pos:end="923:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="925:21" pos:end="925:26">break;</break>



                  <case pos:start="929:19" pos:end="929:27">case <expr pos:start="929:24" pos:end="929:26"><literal type="char" pos:start="929:24" pos:end="929:26">'y'</literal></expr>:</case>

                    <expr_stmt pos:start="931:21" pos:end="931:58"><expr pos:start="931:21" pos:end="931:57"><call pos:start="931:21" pos:end="931:57">(<modifier pos:start="931:22" pos:end="931:22">*</modifier><name pos:start="931:23" pos:end="931:40"><name pos:start="931:23" pos:end="931:26">info</name><operator pos:start="931:27" pos:end="931:28">-&gt;</operator><name pos:start="931:29" pos:end="931:40">fprintf_func</name></name>) <argument_list pos:start="931:43" pos:end="931:57">(<argument pos:start="931:44" pos:end="931:49"><expr pos:start="931:44" pos:end="931:49"><name pos:start="931:44" pos:end="931:49">stream</name></expr></argument>, <argument pos:start="931:52" pos:end="931:56"><expr pos:start="931:52" pos:end="931:56"><literal type="string" pos:start="931:52" pos:end="931:56">"%%y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="933:21" pos:end="933:26">break;</break>



                  <case pos:start="937:19" pos:end="937:27">case <expr pos:start="937:24" pos:end="937:26"><literal type="char" pos:start="937:24" pos:end="937:26">'u'</literal></expr>:</case>

                  <case pos:start="939:19" pos:end="939:27">case <expr pos:start="939:24" pos:end="939:26"><literal type="char" pos:start="939:24" pos:end="939:26">'U'</literal></expr>:</case>

                    <block pos:start="941:21" pos:end="959:21">{<block_content pos:start="943:23" pos:end="957:28">

                      <decl_stmt pos:start="943:23" pos:end="943:71"><decl pos:start="943:23" pos:end="943:70"><type pos:start="943:23" pos:end="943:25"><name pos:start="943:23" pos:end="943:25">int</name></type> <name pos:start="943:27" pos:end="943:29">val</name> <init pos:start="943:31" pos:end="943:70">= <expr pos:start="943:33" pos:end="943:70"><ternary pos:start="943:33" pos:end="943:70"><condition pos:start="943:33" pos:end="943:43"><expr pos:start="943:33" pos:end="943:41"><operator pos:start="943:33" pos:end="943:33">*</operator><name pos:start="943:34" pos:end="943:34">s</name> <operator pos:start="943:36" pos:end="943:37">==</operator> <literal type="char" pos:start="943:39" pos:end="943:41">'U'</literal></expr> ?</condition><then pos:start="943:45" pos:end="943:56"> <expr pos:start="943:45" pos:end="943:56"><call pos:start="943:45" pos:end="943:56"><name pos:start="943:45" pos:end="943:49">X_RS1</name> <argument_list pos:start="943:51" pos:end="943:56">(<argument pos:start="943:52" pos:end="943:55"><expr pos:start="943:52" pos:end="943:55"><name pos:start="943:52" pos:end="943:55">insn</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="943:58" pos:end="943:70">: <expr pos:start="943:60" pos:end="943:70"><call pos:start="943:60" pos:end="943:70"><name pos:start="943:60" pos:end="943:63">X_RD</name> <argument_list pos:start="943:65" pos:end="943:70">(<argument pos:start="943:66" pos:end="943:69"><expr pos:start="943:66" pos:end="943:69"><name pos:start="943:66" pos:end="943:69">insn</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                      <decl_stmt pos:start="945:23" pos:end="945:75"><decl pos:start="945:23" pos:end="945:74"><type pos:start="945:23" pos:end="945:34"><specifier pos:start="945:23" pos:end="945:27">const</specifier> <name pos:start="945:29" pos:end="945:32">char</name> <modifier pos:start="945:34" pos:end="945:34">*</modifier></type><name pos:start="945:35" pos:end="945:38">name</name> <init pos:start="945:40" pos:end="945:74">= <expr pos:start="945:42" pos:end="945:74"><call pos:start="945:42" pos:end="945:74"><name pos:start="945:42" pos:end="945:68">sparc_decode_sparclet_cpreg</name> <argument_list pos:start="945:70" pos:end="945:74">(<argument pos:start="945:71" pos:end="945:73"><expr pos:start="945:71" pos:end="945:73"><name pos:start="945:71" pos:end="945:73">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                      <if_stmt pos:start="949:23" pos:end="955:75"><if pos:start="949:23" pos:end="951:67">if <condition pos:start="949:26" pos:end="949:31">(<expr pos:start="949:27" pos:end="949:30"><name pos:start="949:27" pos:end="949:30">name</name></expr>)</condition><block type="pseudo" pos:start="951:25" pos:end="951:67"><block_content pos:start="951:25" pos:end="951:67">

                        <expr_stmt pos:start="951:25" pos:end="951:67"><expr pos:start="951:25" pos:end="951:66"><call pos:start="951:25" pos:end="951:66">(<modifier pos:start="951:26" pos:end="951:26">*</modifier><name pos:start="951:27" pos:end="951:44"><name pos:start="951:27" pos:end="951:30">info</name><operator pos:start="951:31" pos:end="951:32">-&gt;</operator><name pos:start="951:33" pos:end="951:44">fprintf_func</name></name>) <argument_list pos:start="951:47" pos:end="951:66">(<argument pos:start="951:48" pos:end="951:53"><expr pos:start="951:48" pos:end="951:53"><name pos:start="951:48" pos:end="951:53">stream</name></expr></argument>, <argument pos:start="951:56" pos:end="951:59"><expr pos:start="951:56" pos:end="951:59"><literal type="string" pos:start="951:56" pos:end="951:59">"%s"</literal></expr></argument>, <argument pos:start="951:62" pos:end="951:65"><expr pos:start="951:62" pos:end="951:65"><name pos:start="951:62" pos:end="951:65">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="953:23" pos:end="955:75">else<block type="pseudo" pos:start="955:25" pos:end="955:75"><block_content pos:start="955:25" pos:end="955:75">

                        <expr_stmt pos:start="955:25" pos:end="955:75"><expr pos:start="955:25" pos:end="955:74"><call pos:start="955:25" pos:end="955:74">(<modifier pos:start="955:26" pos:end="955:26">*</modifier><name pos:start="955:27" pos:end="955:44"><name pos:start="955:27" pos:end="955:30">info</name><operator pos:start="955:31" pos:end="955:32">-&gt;</operator><name pos:start="955:33" pos:end="955:44">fprintf_func</name></name>) <argument_list pos:start="955:47" pos:end="955:74">(<argument pos:start="955:48" pos:end="955:53"><expr pos:start="955:48" pos:end="955:53"><name pos:start="955:48" pos:end="955:53">stream</name></expr></argument>, <argument pos:start="955:56" pos:end="955:68"><expr pos:start="955:56" pos:end="955:68"><literal type="string" pos:start="955:56" pos:end="955:68">"%%cpreg(%d)"</literal></expr></argument>, <argument pos:start="955:71" pos:end="955:73"><expr pos:start="955:71" pos:end="955:73"><name pos:start="955:71" pos:end="955:73">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                      <break pos:start="957:23" pos:end="957:28">break;</break>

                    </block_content>}</block>

                  </block_content>}</block></switch>

              </block_content>}</block></for>

          </block_content>}</block>



          <comment type="block" pos:start="969:11" pos:end="979:40">/* If we are adding or or'ing something to rs1, then

             check to see whether the previous instruction was

             a sethi to the same register as in the sethi.

             If so, attempt to print the result of the add or

             or (in this context add and or do the same thing)

             and its symbolic value.  */</comment>

          <if_stmt pos:start="981:11" pos:end="1095:13"><if pos:start="981:11" pos:end="1095:13">if <condition pos:start="981:14" pos:end="981:50">(<expr pos:start="981:15" pos:end="981:49"><name pos:start="981:15" pos:end="981:29">imm_ored_to_rs1</name> <operator pos:start="981:31" pos:end="981:32">||</operator> <name pos:start="981:34" pos:end="981:49">imm_added_to_rs1</name></expr>)</condition>

            <block pos:start="983:13" pos:end="1095:13">{<block_content pos:start="985:15" pos:end="1093:17">

              <decl_stmt pos:start="985:15" pos:end="985:38"><decl pos:start="985:15" pos:end="985:37"><type pos:start="985:15" pos:end="985:27"><name pos:start="985:15" pos:end="985:22">unsigned</name> <name pos:start="985:24" pos:end="985:27">long</name></type> <name pos:start="985:29" pos:end="985:37">prev_insn</name></decl>;</decl_stmt>

              <decl_stmt pos:start="987:15" pos:end="987:26"><decl pos:start="987:15" pos:end="987:25"><type pos:start="987:15" pos:end="987:17"><name pos:start="987:15" pos:end="987:17">int</name></type> <name pos:start="987:19" pos:end="987:25">errcode</name></decl>;</decl_stmt>



              <if_stmt pos:start="991:15" pos:end="1001:28"><if pos:start="991:15" pos:end="997:63">if <condition pos:start="991:18" pos:end="991:31">(<expr pos:start="991:19" pos:end="991:30"><name pos:start="991:19" pos:end="991:25">memaddr</name> <operator pos:start="991:27" pos:end="991:28">&gt;=</operator> <literal type="number" pos:start="991:30" pos:end="991:30">4</literal></expr>)</condition><block type="pseudo" pos:start="993:17" pos:end="997:63"><block_content pos:start="993:17" pos:end="997:63">

                <expr_stmt pos:start="993:17" pos:end="997:63"><expr pos:start="993:17" pos:end="997:62"><name pos:start="993:17" pos:end="993:23">errcode</name> <operator pos:start="993:25" pos:end="993:25">=</operator>

                  <call pos:start="995:19" pos:end="997:62">(<modifier pos:start="995:20" pos:end="995:20">*</modifier><name pos:start="995:21" pos:end="995:42"><name pos:start="995:21" pos:end="995:24">info</name><operator pos:start="995:25" pos:end="995:26">-&gt;</operator><name pos:start="995:27" pos:end="995:42">read_memory_func</name></name>)

                  <argument_list pos:start="997:19" pos:end="997:62">(<argument pos:start="997:20" pos:end="997:30"><expr pos:start="997:20" pos:end="997:30"><name pos:start="997:20" pos:end="997:26">memaddr</name> <operator pos:start="997:28" pos:end="997:28">-</operator> <literal type="number" pos:start="997:30" pos:end="997:30">4</literal></expr></argument>, <argument pos:start="997:33" pos:end="997:38"><expr pos:start="997:33" pos:end="997:38"><name pos:start="997:33" pos:end="997:38">buffer</name></expr></argument>, <argument pos:start="997:41" pos:end="997:55"><expr pos:start="997:41" pos:end="997:55"><sizeof pos:start="997:41" pos:end="997:55">sizeof <argument_list pos:start="997:48" pos:end="997:55">(<argument pos:start="997:49" pos:end="997:54"><expr pos:start="997:49" pos:end="997:54"><name pos:start="997:49" pos:end="997:54">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="997:58" pos:end="997:61"><expr pos:start="997:58" pos:end="997:61"><name pos:start="997:58" pos:end="997:61">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

              <else pos:start="999:15" pos:end="1001:28">else<block type="pseudo" pos:start="1001:17" pos:end="1001:28"><block_content pos:start="1001:17" pos:end="1001:28">

                <expr_stmt pos:start="1001:17" pos:end="1001:28"><expr pos:start="1001:17" pos:end="1001:27"><name pos:start="1001:17" pos:end="1001:23">errcode</name> <operator pos:start="1001:25" pos:end="1001:25">=</operator> <literal type="number" pos:start="1001:27" pos:end="1001:27">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



              <expr_stmt pos:start="1005:15" pos:end="1005:43"><expr pos:start="1005:15" pos:end="1005:42"><name pos:start="1005:15" pos:end="1005:23">prev_insn</name> <operator pos:start="1005:25" pos:end="1005:25">=</operator> <call pos:start="1005:27" pos:end="1005:42"><name pos:start="1005:27" pos:end="1005:33">getword</name> <argument_list pos:start="1005:35" pos:end="1005:42">(<argument pos:start="1005:36" pos:end="1005:41"><expr pos:start="1005:36" pos:end="1005:41"><name pos:start="1005:36" pos:end="1005:41">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



              <if_stmt pos:start="1009:15" pos:end="1049:17"><if pos:start="1009:15" pos:end="1049:17">if <condition pos:start="1009:18" pos:end="1009:31">(<expr pos:start="1009:19" pos:end="1009:30"><name pos:start="1009:19" pos:end="1009:25">errcode</name> <operator pos:start="1009:27" pos:end="1009:28">==</operator> <literal type="number" pos:start="1009:30" pos:end="1009:30">0</literal></expr>)</condition>

                <block pos:start="1011:17" pos:end="1049:17">{<block_content pos:start="1029:19" pos:end="1047:21">

                  <comment type="block" pos:start="1013:19" pos:end="1025:47">/* If it is a delayed branch, we need to look at the

                     instruction before the delayed branch.  This handles

                     sequences such as:



                     sethi %o1, %hi(_foo), %o1

                     call _printf

                     or %o1, %lo(_foo), %o1  */</comment>



                  <if_stmt pos:start="1029:19" pos:end="1047:21"><if pos:start="1029:19" pos:end="1047:21">if <condition pos:start="1029:22" pos:end="1029:52">(<expr pos:start="1029:23" pos:end="1029:51"><call pos:start="1029:23" pos:end="1029:51"><name pos:start="1029:23" pos:end="1029:39">is_delayed_branch</name> <argument_list pos:start="1029:41" pos:end="1029:51">(<argument pos:start="1029:42" pos:end="1029:50"><expr pos:start="1029:42" pos:end="1029:50"><name pos:start="1029:42" pos:end="1029:50">prev_insn</name></expr></argument>)</argument_list></call></expr>)</condition>

                    <block pos:start="1031:21" pos:end="1047:21">{<block_content pos:start="1033:23" pos:end="1045:51">

                      <if_stmt pos:start="1033:23" pos:end="1041:36"><if pos:start="1033:23" pos:end="1037:71">if <condition pos:start="1033:26" pos:end="1033:39">(<expr pos:start="1033:27" pos:end="1033:38"><name pos:start="1033:27" pos:end="1033:33">memaddr</name> <operator pos:start="1033:35" pos:end="1033:36">&gt;=</operator> <literal type="number" pos:start="1033:38" pos:end="1033:38">8</literal></expr>)</condition><block type="pseudo" pos:start="1035:25" pos:end="1037:71"><block_content pos:start="1035:25" pos:end="1037:71">

                        <expr_stmt pos:start="1035:25" pos:end="1037:71"><expr pos:start="1035:25" pos:end="1037:70"><name pos:start="1035:25" pos:end="1035:31">errcode</name> <operator pos:start="1035:33" pos:end="1035:33">=</operator> <call pos:start="1035:35" pos:end="1037:70">(<modifier pos:start="1035:36" pos:end="1035:36">*</modifier><name pos:start="1035:37" pos:end="1035:58"><name pos:start="1035:37" pos:end="1035:40">info</name><operator pos:start="1035:41" pos:end="1035:42">-&gt;</operator><name pos:start="1035:43" pos:end="1035:58">read_memory_func</name></name>)

                          <argument_list pos:start="1037:27" pos:end="1037:70">(<argument pos:start="1037:28" pos:end="1037:38"><expr pos:start="1037:28" pos:end="1037:38"><name pos:start="1037:28" pos:end="1037:34">memaddr</name> <operator pos:start="1037:36" pos:end="1037:36">-</operator> <literal type="number" pos:start="1037:38" pos:end="1037:38">8</literal></expr></argument>, <argument pos:start="1037:41" pos:end="1037:46"><expr pos:start="1037:41" pos:end="1037:46"><name pos:start="1037:41" pos:end="1037:46">buffer</name></expr></argument>, <argument pos:start="1037:49" pos:end="1037:63"><expr pos:start="1037:49" pos:end="1037:63"><sizeof pos:start="1037:49" pos:end="1037:63">sizeof <argument_list pos:start="1037:56" pos:end="1037:63">(<argument pos:start="1037:57" pos:end="1037:62"><expr pos:start="1037:57" pos:end="1037:62"><name pos:start="1037:57" pos:end="1037:62">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1037:66" pos:end="1037:69"><expr pos:start="1037:66" pos:end="1037:69"><name pos:start="1037:66" pos:end="1037:69">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="1039:23" pos:end="1041:36">else<block type="pseudo" pos:start="1041:25" pos:end="1041:36"><block_content pos:start="1041:25" pos:end="1041:36">

                        <expr_stmt pos:start="1041:25" pos:end="1041:36"><expr pos:start="1041:25" pos:end="1041:35"><name pos:start="1041:25" pos:end="1041:31">errcode</name> <operator pos:start="1041:33" pos:end="1041:33">=</operator> <literal type="number" pos:start="1041:35" pos:end="1041:35">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                      <expr_stmt pos:start="1045:23" pos:end="1045:51"><expr pos:start="1045:23" pos:end="1045:50"><name pos:start="1045:23" pos:end="1045:31">prev_insn</name> <operator pos:start="1045:33" pos:end="1045:33">=</operator> <call pos:start="1045:35" pos:end="1045:50"><name pos:start="1045:35" pos:end="1045:41">getword</name> <argument_list pos:start="1045:43" pos:end="1045:50">(<argument pos:start="1045:44" pos:end="1045:49"><expr pos:start="1045:44" pos:end="1045:49"><name pos:start="1045:44" pos:end="1045:49">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



              <comment type="block" pos:start="1053:15" pos:end="1055:60">/* If there was a problem reading memory, then assume

                 the previous instruction was not sethi.  */</comment>

              <if_stmt pos:start="1057:15" pos:end="1093:17"><if pos:start="1057:15" pos:end="1093:17">if <condition pos:start="1057:18" pos:end="1057:31">(<expr pos:start="1057:19" pos:end="1057:30"><name pos:start="1057:19" pos:end="1057:25">errcode</name> <operator pos:start="1057:27" pos:end="1057:28">==</operator> <literal type="number" pos:start="1057:30" pos:end="1057:30">0</literal></expr>)</condition>

                <block pos:start="1059:17" pos:end="1093:17">{<block_content pos:start="1063:19" pos:end="1091:21">

                  <comment type="block" pos:start="1061:19" pos:end="1061:58">/* Is it sethi to the same register?  */</comment>

                  <if_stmt pos:start="1063:19" pos:end="1091:21"><if pos:start="1063:19" pos:end="1091:21">if <condition pos:start="1063:22" pos:end="1065:58">(<expr pos:start="1063:23" pos:end="1065:57"><operator pos:start="1063:23" pos:end="1063:23">(</operator><name pos:start="1063:24" pos:end="1063:32">prev_insn</name> <operator pos:start="1063:34" pos:end="1063:34">&amp;</operator> <literal type="number" pos:start="1063:36" pos:end="1063:45">0xc1c00000</literal><operator pos:start="1063:46" pos:end="1063:46">)</operator> <operator pos:start="1063:48" pos:end="1063:49">==</operator> <literal type="number" pos:start="1063:51" pos:end="1063:60">0x01000000</literal>

                      <operator pos:start="1065:23" pos:end="1065:24">&amp;&amp;</operator> <call pos:start="1065:26" pos:end="1065:41"><name pos:start="1065:26" pos:end="1065:29">X_RD</name> <argument_list pos:start="1065:31" pos:end="1065:41">(<argument pos:start="1065:32" pos:end="1065:40"><expr pos:start="1065:32" pos:end="1065:40"><name pos:start="1065:32" pos:end="1065:40">prev_insn</name></expr></argument>)</argument_list></call> <operator pos:start="1065:43" pos:end="1065:44">==</operator> <call pos:start="1065:46" pos:end="1065:57"><name pos:start="1065:46" pos:end="1065:50">X_RS1</name> <argument_list pos:start="1065:52" pos:end="1065:57">(<argument pos:start="1065:53" pos:end="1065:56"><expr pos:start="1065:53" pos:end="1065:56"><name pos:start="1065:53" pos:end="1065:56">insn</name></expr></argument>)</argument_list></call></expr>)</condition>

                    <block pos:start="1067:21" pos:end="1091:21">{<block_content pos:start="1069:23" pos:end="1089:42">

                      <expr_stmt pos:start="1069:23" pos:end="1069:61"><expr pos:start="1069:23" pos:end="1069:60"><call pos:start="1069:23" pos:end="1069:60">(<modifier pos:start="1069:24" pos:end="1069:24">*</modifier><name pos:start="1069:25" pos:end="1069:42"><name pos:start="1069:25" pos:end="1069:28">info</name><operator pos:start="1069:29" pos:end="1069:30">-&gt;</operator><name pos:start="1069:31" pos:end="1069:42">fprintf_func</name></name>) <argument_list pos:start="1069:45" pos:end="1069:60">(<argument pos:start="1069:46" pos:end="1069:51"><expr pos:start="1069:46" pos:end="1069:51"><name pos:start="1069:46" pos:end="1069:51">stream</name></expr></argument>, <argument pos:start="1069:54" pos:end="1069:59"><expr pos:start="1069:54" pos:end="1069:59"><literal type="string" pos:start="1069:54" pos:end="1069:59">"\t! "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                      <expr_stmt pos:start="1071:23" pos:end="1075:62"><expr pos:start="1071:23" pos:end="1075:61"><name pos:start="1071:23" pos:end="1071:34"><name pos:start="1071:23" pos:end="1071:26">info</name><operator pos:start="1071:27" pos:end="1071:28">-&gt;</operator><name pos:start="1071:29" pos:end="1071:34">target</name></name> <operator pos:start="1071:36" pos:end="1071:36">=</operator>

                        <operator pos:start="1073:25" pos:end="1073:25">(</operator><operator pos:start="1073:26" pos:end="1073:26">(</operator><name pos:start="1073:27" pos:end="1073:34">unsigned</name><operator pos:start="1073:35" pos:end="1073:35">)</operator> <literal type="number" pos:start="1073:37" pos:end="1073:46">0xFFFFFFFF</literal>

                         <operator pos:start="1075:26" pos:end="1075:26">&amp;</operator> <operator pos:start="1075:28" pos:end="1075:28">(</operator><operator pos:start="1075:29" pos:end="1075:29">(</operator><name pos:start="1075:30" pos:end="1075:32">int</name><operator pos:start="1075:33" pos:end="1075:33">)</operator> <call pos:start="1075:35" pos:end="1075:53"><name pos:start="1075:35" pos:end="1075:41">X_IMM22</name> <argument_list pos:start="1075:43" pos:end="1075:53">(<argument pos:start="1075:44" pos:end="1075:52"><expr pos:start="1075:44" pos:end="1075:52"><name pos:start="1075:44" pos:end="1075:52">prev_insn</name></expr></argument>)</argument_list></call> <operator pos:start="1075:55" pos:end="1075:56">&lt;&lt;</operator> <literal type="number" pos:start="1075:58" pos:end="1075:59">10</literal><operator pos:start="1075:60" pos:end="1075:60">)</operator><operator pos:start="1075:61" pos:end="1075:61">)</operator></expr>;</expr_stmt>

                      <if_stmt pos:start="1077:23" pos:end="1083:58"><if pos:start="1077:23" pos:end="1079:58">if <condition pos:start="1077:26" pos:end="1077:43">(<expr pos:start="1077:27" pos:end="1077:42"><name pos:start="1077:27" pos:end="1077:42">imm_added_to_rs1</name></expr>)</condition><block type="pseudo" pos:start="1079:25" pos:end="1079:58"><block_content pos:start="1079:25" pos:end="1079:58">

                        <expr_stmt pos:start="1079:25" pos:end="1079:58"><expr pos:start="1079:25" pos:end="1079:57"><name pos:start="1079:25" pos:end="1079:36"><name pos:start="1079:25" pos:end="1079:28">info</name><operator pos:start="1079:29" pos:end="1079:30">-&gt;</operator><name pos:start="1079:31" pos:end="1079:36">target</name></name> <operator pos:start="1079:38" pos:end="1079:39">+=</operator> <call pos:start="1079:41" pos:end="1079:57"><name pos:start="1079:41" pos:end="1079:46">X_SIMM</name> <argument_list pos:start="1079:48" pos:end="1079:57">(<argument pos:start="1079:49" pos:end="1079:52"><expr pos:start="1079:49" pos:end="1079:52"><name pos:start="1079:49" pos:end="1079:52">insn</name></expr></argument>, <argument pos:start="1079:55" pos:end="1079:56"><expr pos:start="1079:55" pos:end="1079:56"><literal type="number" pos:start="1079:55" pos:end="1079:56">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                      <else pos:start="1081:23" pos:end="1083:58">else<block type="pseudo" pos:start="1083:25" pos:end="1083:58"><block_content pos:start="1083:25" pos:end="1083:58">

                        <expr_stmt pos:start="1083:25" pos:end="1083:58"><expr pos:start="1083:25" pos:end="1083:57"><name pos:start="1083:25" pos:end="1083:36"><name pos:start="1083:25" pos:end="1083:28">info</name><operator pos:start="1083:29" pos:end="1083:30">-&gt;</operator><name pos:start="1083:31" pos:end="1083:36">target</name></name> <operator pos:start="1083:38" pos:end="1083:39">|=</operator> <call pos:start="1083:41" pos:end="1083:57"><name pos:start="1083:41" pos:end="1083:46">X_SIMM</name> <argument_list pos:start="1083:48" pos:end="1083:57">(<argument pos:start="1083:49" pos:end="1083:52"><expr pos:start="1083:49" pos:end="1083:52"><name pos:start="1083:49" pos:end="1083:52">insn</name></expr></argument>, <argument pos:start="1083:55" pos:end="1083:56"><expr pos:start="1083:55" pos:end="1083:56"><literal type="number" pos:start="1083:55" pos:end="1083:56">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                      <expr_stmt pos:start="1085:23" pos:end="1085:71"><expr pos:start="1085:23" pos:end="1085:70"><call pos:start="1085:23" pos:end="1085:70">(<modifier pos:start="1085:24" pos:end="1085:24">*</modifier><name pos:start="1085:25" pos:end="1085:48"><name pos:start="1085:25" pos:end="1085:28">info</name><operator pos:start="1085:29" pos:end="1085:30">-&gt;</operator><name pos:start="1085:31" pos:end="1085:48">print_address_func</name></name>) <argument_list pos:start="1085:51" pos:end="1085:70">(<argument pos:start="1085:52" pos:end="1085:63"><expr pos:start="1085:52" pos:end="1085:63"><name pos:start="1085:52" pos:end="1085:63"><name pos:start="1085:52" pos:end="1085:55">info</name><operator pos:start="1085:56" pos:end="1085:57">-&gt;</operator><name pos:start="1085:58" pos:end="1085:63">target</name></name></expr></argument>, <argument pos:start="1085:66" pos:end="1085:69"><expr pos:start="1085:66" pos:end="1085:69"><name pos:start="1085:66" pos:end="1085:69">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                      <expr_stmt pos:start="1087:23" pos:end="1087:49"><expr pos:start="1087:23" pos:end="1087:48"><name pos:start="1087:23" pos:end="1087:37"><name pos:start="1087:23" pos:end="1087:26">info</name><operator pos:start="1087:27" pos:end="1087:28">-&gt;</operator><name pos:start="1087:29" pos:end="1087:37">insn_type</name></name> <operator pos:start="1087:39" pos:end="1087:39">=</operator> <name pos:start="1087:41" pos:end="1087:48">dis_dref</name></expr>;</expr_stmt>

                      <expr_stmt pos:start="1089:23" pos:end="1089:42"><expr pos:start="1089:23" pos:end="1089:41"><name pos:start="1089:23" pos:end="1089:37"><name pos:start="1089:23" pos:end="1089:26">info</name><operator pos:start="1089:27" pos:end="1089:28">-&gt;</operator><name pos:start="1089:29" pos:end="1089:37">data_size</name></name> <operator pos:start="1089:39" pos:end="1089:39">=</operator> <literal type="number" pos:start="1089:41" pos:end="1089:41">4</literal></expr>;</expr_stmt>  <comment type="block" pos:start="1089:45" pos:end="1089:58">/* FIXME!!! */</comment>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



          <if_stmt pos:start="1099:11" pos:end="1121:13"><if pos:start="1099:11" pos:end="1121:13">if <condition pos:start="1099:14" pos:end="1099:54">(<expr pos:start="1099:15" pos:end="1099:53"><name pos:start="1099:15" pos:end="1099:27"><name pos:start="1099:15" pos:end="1099:20">opcode</name><operator pos:start="1099:21" pos:end="1099:22">-&gt;</operator><name pos:start="1099:23" pos:end="1099:27">flags</name></name> <operator pos:start="1099:29" pos:end="1099:29">&amp;</operator> <operator pos:start="1099:31" pos:end="1099:31">(</operator><name pos:start="1099:32" pos:end="1099:37">F_UNBR</name><operator pos:start="1099:38" pos:end="1099:38">|</operator><name pos:start="1099:39" pos:end="1099:46">F_CONDBR</name><operator pos:start="1099:47" pos:end="1099:47">|</operator><name pos:start="1099:48" pos:end="1099:52">F_JSR</name><operator pos:start="1099:53" pos:end="1099:53">)</operator></expr>)</condition>

            <block pos:start="1101:13" pos:end="1121:13">{<block_content pos:start="1105:15" pos:end="1119:45">

                <comment type="block" pos:start="1103:17" pos:end="1103:55">/* FIXME -- check is_annulled flag.  */</comment>

              <if_stmt pos:start="1105:15" pos:end="1107:45"><if pos:start="1105:15" pos:end="1107:45">if <condition pos:start="1105:18" pos:end="1105:41">(<expr pos:start="1105:19" pos:end="1105:40"><name pos:start="1105:19" pos:end="1105:31"><name pos:start="1105:19" pos:end="1105:24">opcode</name><operator pos:start="1105:25" pos:end="1105:26">-&gt;</operator><name pos:start="1105:27" pos:end="1105:31">flags</name></name> <operator pos:start="1105:33" pos:end="1105:33">&amp;</operator> <name pos:start="1105:35" pos:end="1105:40">F_UNBR</name></expr>)</condition><block type="pseudo" pos:start="1107:17" pos:end="1107:45"><block_content pos:start="1107:17" pos:end="1107:45">

                <expr_stmt pos:start="1107:17" pos:end="1107:45"><expr pos:start="1107:17" pos:end="1107:44"><name pos:start="1107:17" pos:end="1107:31"><name pos:start="1107:17" pos:end="1107:20">info</name><operator pos:start="1107:21" pos:end="1107:22">-&gt;</operator><name pos:start="1107:23" pos:end="1107:31">insn_type</name></name> <operator pos:start="1107:33" pos:end="1107:33">=</operator> <name pos:start="1107:35" pos:end="1107:44">dis_branch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

              <if_stmt pos:start="1109:15" pos:end="1111:49"><if pos:start="1109:15" pos:end="1111:49">if <condition pos:start="1109:18" pos:end="1109:43">(<expr pos:start="1109:19" pos:end="1109:42"><name pos:start="1109:19" pos:end="1109:31"><name pos:start="1109:19" pos:end="1109:24">opcode</name><operator pos:start="1109:25" pos:end="1109:26">-&gt;</operator><name pos:start="1109:27" pos:end="1109:31">flags</name></name> <operator pos:start="1109:33" pos:end="1109:33">&amp;</operator> <name pos:start="1109:35" pos:end="1109:42">F_CONDBR</name></expr>)</condition><block type="pseudo" pos:start="1111:17" pos:end="1111:49"><block_content pos:start="1111:17" pos:end="1111:49">

                <expr_stmt pos:start="1111:17" pos:end="1111:49"><expr pos:start="1111:17" pos:end="1111:48"><name pos:start="1111:17" pos:end="1111:31"><name pos:start="1111:17" pos:end="1111:20">info</name><operator pos:start="1111:21" pos:end="1111:22">-&gt;</operator><name pos:start="1111:23" pos:end="1111:31">insn_type</name></name> <operator pos:start="1111:33" pos:end="1111:33">=</operator> <name pos:start="1111:35" pos:end="1111:48">dis_condbranch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

              <if_stmt pos:start="1113:15" pos:end="1115:42"><if pos:start="1113:15" pos:end="1115:42">if <condition pos:start="1113:18" pos:end="1113:40">(<expr pos:start="1113:19" pos:end="1113:39"><name pos:start="1113:19" pos:end="1113:31"><name pos:start="1113:19" pos:end="1113:24">opcode</name><operator pos:start="1113:25" pos:end="1113:26">-&gt;</operator><name pos:start="1113:27" pos:end="1113:31">flags</name></name> <operator pos:start="1113:33" pos:end="1113:33">&amp;</operator> <name pos:start="1113:35" pos:end="1113:39">F_JSR</name></expr>)</condition><block type="pseudo" pos:start="1115:17" pos:end="1115:42"><block_content pos:start="1115:17" pos:end="1115:42">

                <expr_stmt pos:start="1115:17" pos:end="1115:42"><expr pos:start="1115:17" pos:end="1115:41"><name pos:start="1115:17" pos:end="1115:31"><name pos:start="1115:17" pos:end="1115:20">info</name><operator pos:start="1115:21" pos:end="1115:22">-&gt;</operator><name pos:start="1115:23" pos:end="1115:31">insn_type</name></name> <operator pos:start="1115:33" pos:end="1115:33">=</operator> <name pos:start="1115:35" pos:end="1115:41">dis_jsr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

              <if_stmt pos:start="1117:15" pos:end="1119:45"><if pos:start="1117:15" pos:end="1119:45">if <condition pos:start="1117:18" pos:end="1117:44">(<expr pos:start="1117:19" pos:end="1117:43"><name pos:start="1117:19" pos:end="1117:31"><name pos:start="1117:19" pos:end="1117:24">opcode</name><operator pos:start="1117:25" pos:end="1117:26">-&gt;</operator><name pos:start="1117:27" pos:end="1117:31">flags</name></name> <operator pos:start="1117:33" pos:end="1117:33">&amp;</operator> <name pos:start="1117:35" pos:end="1117:43">F_DELAYED</name></expr>)</condition><block type="pseudo" pos:start="1119:17" pos:end="1119:45"><block_content pos:start="1119:17" pos:end="1119:45">

                <expr_stmt pos:start="1119:17" pos:end="1119:45"><expr pos:start="1119:17" pos:end="1119:44"><name pos:start="1119:17" pos:end="1119:40"><name pos:start="1119:17" pos:end="1119:20">info</name><operator pos:start="1119:21" pos:end="1119:22">-&gt;</operator><name pos:start="1119:23" pos:end="1119:40">branch_delay_insns</name></name> <operator pos:start="1119:42" pos:end="1119:42">=</operator> <literal type="number" pos:start="1119:44" pos:end="1119:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



          <return pos:start="1125:11" pos:end="1125:33">return <expr pos:start="1125:18" pos:end="1125:32"><sizeof pos:start="1125:18" pos:end="1125:32">sizeof <argument_list pos:start="1125:25" pos:end="1125:32">(<argument pos:start="1125:26" pos:end="1125:31"><expr pos:start="1125:26" pos:end="1125:31"><name pos:start="1125:26" pos:end="1125:31">buffer</name></expr></argument>)</argument_list></sizeof></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



  <expr_stmt pos:start="1133:3" pos:end="1133:32"><expr pos:start="1133:3" pos:end="1133:31"><name pos:start="1133:3" pos:end="1133:17"><name pos:start="1133:3" pos:end="1133:6">info</name><operator pos:start="1133:7" pos:end="1133:8">-&gt;</operator><name pos:start="1133:9" pos:end="1133:17">insn_type</name></name> <operator pos:start="1133:19" pos:end="1133:19">=</operator> <name pos:start="1133:21" pos:end="1133:31">dis_noninsn</name></expr>;</expr_stmt>        <comment type="block" pos:start="1133:41" pos:end="1133:77">/* Mark as non-valid instruction.  */</comment>

  <expr_stmt pos:start="1135:3" pos:end="1135:47"><expr pos:start="1135:3" pos:end="1135:46"><call pos:start="1135:3" pos:end="1135:46">(<modifier pos:start="1135:4" pos:end="1135:4">*</modifier><name pos:start="1135:5" pos:end="1135:22"><name pos:start="1135:5" pos:end="1135:8">info</name><operator pos:start="1135:9" pos:end="1135:10">-&gt;</operator><name pos:start="1135:11" pos:end="1135:22">fprintf_func</name></name>) <argument_list pos:start="1135:25" pos:end="1135:46">(<argument pos:start="1135:26" pos:end="1135:31"><expr pos:start="1135:26" pos:end="1135:31"><name pos:start="1135:26" pos:end="1135:31">stream</name></expr></argument>, <argument pos:start="1135:34" pos:end="1135:45"><expr pos:start="1135:34" pos:end="1135:45"><call pos:start="1135:34" pos:end="1135:45"><name pos:start="1135:34" pos:end="1135:34">_</name><argument_list pos:start="1135:35" pos:end="1135:45">(<argument pos:start="1135:36" pos:end="1135:44"><expr pos:start="1135:36" pos:end="1135:44"><literal type="string" pos:start="1135:36" pos:end="1135:44">"unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return pos:start="1137:3" pos:end="1137:25">return <expr pos:start="1137:10" pos:end="1137:24"><sizeof pos:start="1137:10" pos:end="1137:24">sizeof <argument_list pos:start="1137:17" pos:end="1137:24">(<argument pos:start="1137:18" pos:end="1137:23"><expr pos:start="1137:18" pos:end="1137:23"><name pos:start="1137:18" pos:end="1137:23">buffer</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block>
</unit>
