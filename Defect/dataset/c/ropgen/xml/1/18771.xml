<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18771.c" pos:tabs="8"><function pos:start="1:1" pos:end="72:0"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">bad_mode_switch</name><parameter_list pos:start="1:27" pos:end="1:80">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">CPUARMState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">env</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:53"><decl pos:start="1:46" pos:end="1:53"><type pos:start="1:46" pos:end="1:53"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:53">mode</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:79"><decl pos:start="1:56" pos:end="1:79"><type pos:start="1:56" pos:end="1:79"><name pos:start="1:56" pos:end="1:68">CPSRWriteType</name></type> <name pos:start="1:70" pos:end="1:79">write_type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:26">{<block_content pos:start="17:9" pos:end="19:35">

    <comment type="block" pos:start="5:5" pos:end="14:61">/* Return true if it is not valid for us to switch to

     * this CPU mode (ie all the UNPREDICTABLE cases in

     * the ARM ARM CPSRWriteByInstr pseudocode).




    /* Changes to or from Hyp via MSR and CPS are illegal. */</comment>


        <expr_stmt pos:start="17:9" pos:end="19:34"><expr pos:start="17:9" pos:end="19:34"><operator pos:start="17:9" pos:end="17:9">(</operator><operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:28"><name pos:start="17:11" pos:end="17:13">env</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:28">uncached_cpsr</name></name> <operator pos:start="17:30" pos:end="17:30">&amp;</operator> <name pos:start="17:32" pos:end="17:37">CPSR_M</name><operator pos:start="17:38" pos:end="17:38">)</operator> <operator pos:start="17:40" pos:end="17:41">==</operator> <name pos:start="17:43" pos:end="17:58">ARM_CPU_MODE_HYP</name> <operator pos:start="17:60" pos:end="17:61">||</operator>

         <name pos:start="19:10" pos:end="19:13">mode</name> <operator pos:start="19:15" pos:end="19:16">==</operator> <name pos:start="19:18" pos:end="19:33">ARM_CPU_MODE_HYP</name><operator pos:start="19:34" pos:end="19:34">)</operator></expr></expr_stmt>)</block_content> <block pos:start="19:37" pos:end="41:26">{<block_content pos:start="25:5" pos:end="41:26">





    <switch pos:start="25:5" pos:end="41:26">switch <condition pos:start="25:12" pos:end="25:17">(<expr pos:start="25:13" pos:end="25:16"><name pos:start="25:13" pos:end="25:16">mode</name></expr>)</condition> <block pos:start="25:19" pos:end="41:26">{<block_content pos:start="27:5" pos:end="41:26">

    <case pos:start="27:5" pos:end="27:26">case <expr pos:start="27:10" pos:end="27:25"><name pos:start="27:10" pos:end="27:25">ARM_CPU_MODE_USR</name></expr>:</case>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    <case pos:start="31:5" pos:end="31:26">case <expr pos:start="31:10" pos:end="31:25"><name pos:start="31:10" pos:end="31:25">ARM_CPU_MODE_SYS</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:26">case <expr pos:start="33:10" pos:end="33:25"><name pos:start="33:10" pos:end="33:25">ARM_CPU_MODE_SVC</name></expr>:</case>

    <case pos:start="35:5" pos:end="35:26">case <expr pos:start="35:10" pos:end="35:25"><name pos:start="35:10" pos:end="35:25">ARM_CPU_MODE_ABT</name></expr>:</case>

    <case pos:start="37:5" pos:end="37:26">case <expr pos:start="37:10" pos:end="37:25"><name pos:start="37:10" pos:end="37:25">ARM_CPU_MODE_UND</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:26">case <expr pos:start="39:10" pos:end="39:25"><name pos:start="39:10" pos:end="39:25">ARM_CPU_MODE_IRQ</name></expr>:</case>

    <case pos:start="41:5" pos:end="41:26">case <expr pos:start="41:10" pos:end="41:25"><name pos:start="41:10" pos:end="41:25">ARM_CPU_MODE_FIQ</name></expr>:</case></block_content></block></switch></block_content></block></block></function>

        <comment type="block">/* Note that we don't implement the IMPDEF NSACR.RFR which in v7

         * allows FIQ mode to be Secure-only. (In v8 this doesn't exist.)











        return 0;

    case ARM_CPU_MODE_HYP:

        return !arm_feature(env, ARM_FEATURE_EL2)

            || arm_current_el(env) &lt; 2 || arm_is_secure(env);

    case ARM_CPU_MODE_MON:

        return arm_current_el(env) &lt; 3;

    default:


</comment></unit>
