<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7987.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">bastardized_rice_decompress</name><parameter_list pos:start="1:40" pos:end="17:9">(<parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:51">ALACContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">alac</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:55"><decl pos:start="3:34" pos:end="3:55"><type pos:start="3:34" pos:end="3:55"><name pos:start="3:34" pos:end="3:40">int32_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:55">output_buffer</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:48"><decl pos:start="5:34" pos:end="5:48"><type pos:start="5:34" pos:end="5:48"><name pos:start="5:34" pos:end="5:36">int</name></type> <name pos:start="5:38" pos:end="5:48">output_size</name></decl></parameter>,

                                 <parameter pos:start="7:34" pos:end="7:51"><decl pos:start="7:34" pos:end="7:51"><type pos:start="7:34" pos:end="7:51"><name pos:start="7:34" pos:end="7:36">int</name></type> <name pos:start="7:38" pos:end="7:51">readsamplesize</name></decl></parameter>, <comment type="block" pos:start="7:54" pos:end="7:65">/* arg_10 */</comment>

                                 <parameter pos:start="9:34" pos:end="9:56"><decl pos:start="9:34" pos:end="9:56"><type pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:36">int</name></type> <name pos:start="9:38" pos:end="9:56">rice_initialhistory</name></decl></parameter>, <comment type="block" pos:start="9:59" pos:end="9:73">/* arg424-&gt;b */</comment>

                                 <parameter pos:start="11:34" pos:end="11:51"><decl pos:start="11:34" pos:end="11:51"><type pos:start="11:34" pos:end="11:51"><name pos:start="11:34" pos:end="11:36">int</name></type> <name pos:start="11:38" pos:end="11:51">rice_kmodifier</name></decl></parameter>, <comment type="block" pos:start="11:54" pos:end="11:68">/* arg424-&gt;d */</comment>

                                 <parameter pos:start="13:34" pos:end="13:53"><decl pos:start="13:34" pos:end="13:53"><type pos:start="13:34" pos:end="13:53"><name pos:start="13:34" pos:end="13:36">int</name></type> <name pos:start="13:38" pos:end="13:53">rice_historymult</name></decl></parameter>, <comment type="block" pos:start="13:56" pos:end="13:70">/* arg424-&gt;c */</comment>

                                 <parameter pos:start="15:34" pos:end="15:56"><decl pos:start="15:34" pos:end="15:56"><type pos:start="15:34" pos:end="15:56"><name pos:start="15:34" pos:end="15:36">int</name></type> <name pos:start="15:38" pos:end="15:56">rice_kmodifier_mask</name></decl></parameter> <comment type="block" pos:start="15:58" pos:end="15:72">/* arg424-&gt;e */</comment>

        )</parameter_list>

<block pos:start="19:1" pos:end="135:1">{<block_content pos:start="21:5" pos:end="133:5">

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:20">output_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:47"><decl pos:start="23:5" pos:end="23:46"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:24">history</name> <init pos:start="23:26" pos:end="23:46">= <expr pos:start="23:28" pos:end="23:46"><name pos:start="23:28" pos:end="23:46">rice_initialhistory</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:21">sign_modifier</name> <init pos:start="25:23" pos:end="25:25">= <expr pos:start="25:25" pos:end="25:25"><literal type="number" pos:start="25:25" pos:end="25:25">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="29:5" pos:end="133:5">for <control pos:start="29:9" pos:end="29:70">(<init pos:start="29:10" pos:end="29:26"><expr pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:21">output_count</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>;</init> <condition pos:start="29:28" pos:end="29:54"><expr pos:start="29:28" pos:end="29:53"><name pos:start="29:28" pos:end="29:39">output_count</name> <operator pos:start="29:41" pos:end="29:41">&lt;</operator> <name pos:start="29:43" pos:end="29:53">output_size</name></expr>;</condition> <incr pos:start="29:56" pos:end="29:69"><expr pos:start="29:56" pos:end="29:69"><name pos:start="29:56" pos:end="29:67">output_count</name><operator pos:start="29:68" pos:end="29:69">++</operator></expr></incr>)</control> <block pos:start="29:72" pos:end="133:5">{<block_content pos:start="31:9" pos:end="131:9">

        <decl_stmt pos:start="31:9" pos:end="31:18"><decl pos:start="31:9" pos:end="31:17"><type pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:15">int32_t</name></type> <name pos:start="31:17" pos:end="31:17">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:27"><decl pos:start="33:9" pos:end="33:26"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">int32_t</name></type> <name pos:start="33:17" pos:end="33:26">x_modified</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:26"><decl pos:start="35:9" pos:end="35:25"><type pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:15">int32_t</name></type> <name pos:start="35:17" pos:end="35:25">final_val</name></decl>;</decl_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:36">/* standard rice encoding */</comment>

        <decl_stmt pos:start="41:9" pos:end="41:14"><decl pos:start="41:9" pos:end="41:13"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:13">k</name></decl>;</decl_stmt> <comment type="block" pos:start="41:16" pos:end="41:39">/* size of extra bits */</comment>



        <comment type="block" pos:start="45:9" pos:end="45:40">/* read k, that is bits as is */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:9">k</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:39"><name pos:start="47:13" pos:end="47:19">av_log2</name><argument_list pos:start="47:20" pos:end="47:39">(<argument pos:start="47:21" pos:end="47:38"><expr pos:start="47:21" pos:end="47:38"><operator pos:start="47:21" pos:end="47:21">(</operator><name pos:start="47:22" pos:end="47:28">history</name> <operator pos:start="47:30" pos:end="47:31">&gt;&gt;</operator> <literal type="number" pos:start="47:33" pos:end="47:33">9</literal><operator pos:start="47:34" pos:end="47:34">)</operator> <operator pos:start="47:36" pos:end="47:36">+</operator> <literal type="number" pos:start="47:38" pos:end="47:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:71"><expr pos:start="49:9" pos:end="49:70"><name pos:start="49:9" pos:end="49:9">x</name><operator pos:start="49:10" pos:end="49:10">=</operator> <call pos:start="49:12" pos:end="49:70"><name pos:start="49:12" pos:end="49:24">decode_scalar</name><argument_list pos:start="49:25" pos:end="49:70">(<argument pos:start="49:26" pos:end="49:34"><expr pos:start="49:26" pos:end="49:34"><operator pos:start="49:26" pos:end="49:26">&amp;</operator><name pos:start="49:27" pos:end="49:34"><name pos:start="49:27" pos:end="49:30">alac</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:34">gb</name></name></expr></argument>, <argument pos:start="49:37" pos:end="49:37"><expr pos:start="49:37" pos:end="49:37"><name pos:start="49:37" pos:end="49:37">k</name></expr></argument>, <argument pos:start="49:40" pos:end="49:53"><expr pos:start="49:40" pos:end="49:53"><name pos:start="49:40" pos:end="49:53">rice_kmodifier</name></expr></argument>, <argument pos:start="49:56" pos:end="49:69"><expr pos:start="49:56" pos:end="49:69"><name pos:start="49:56" pos:end="49:69">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:39"><expr pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:18">x_modified</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:34">sign_modifier</name> <operator pos:start="53:36" pos:end="53:36">+</operator> <name pos:start="53:38" pos:end="53:38">x</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:41"><expr pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:17">final_val</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <operator pos:start="55:21" pos:end="55:21">(</operator><name pos:start="55:22" pos:end="55:31">x_modified</name> <operator pos:start="55:33" pos:end="55:33">+</operator> <literal type="number" pos:start="55:35" pos:end="55:35">1</literal><operator pos:start="55:36" pos:end="55:36">)</operator> <operator pos:start="55:38" pos:end="55:38">/</operator> <literal type="number" pos:start="55:40" pos:end="55:40">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="57:44"><if pos:start="57:9" pos:end="57:44">if <condition pos:start="57:12" pos:end="57:27">(<expr pos:start="57:13" pos:end="57:26"><name pos:start="57:13" pos:end="57:22">x_modified</name> <operator pos:start="57:24" pos:end="57:24">&amp;</operator> <literal type="number" pos:start="57:26" pos:end="57:26">1</literal></expr>)</condition><block type="pseudo" pos:start="57:29" pos:end="57:44"><block_content pos:start="57:29" pos:end="57:44"> <expr_stmt pos:start="57:29" pos:end="57:44"><expr pos:start="57:29" pos:end="57:43"><name pos:start="57:29" pos:end="57:37">final_val</name> <operator pos:start="57:39" pos:end="57:40">*=</operator> <operator pos:start="57:42" pos:end="57:42">-</operator><literal type="number" pos:start="57:43" pos:end="57:43">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:48"><expr pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:21">output_buffer</name><index pos:start="61:22" pos:end="61:35">[<expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">output_count</name></expr>]</index></name> <operator pos:start="61:37" pos:end="61:37">=</operator> <name pos:start="61:39" pos:end="61:47">final_val</name></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:21">sign_modifier</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:25">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="69:9" pos:end="69:36">/* now update the history */</comment>

        <expr_stmt pos:start="71:9" pos:end="73:57"><expr pos:start="71:9" pos:end="73:56"><name pos:start="71:9" pos:end="71:15">history</name> <operator pos:start="71:17" pos:end="71:18">+=</operator> <name pos:start="71:20" pos:end="71:29">x_modified</name> <operator pos:start="71:31" pos:end="71:31">*</operator> <name pos:start="71:33" pos:end="71:48">rice_historymult</name>

                   <operator pos:start="73:20" pos:end="73:20">-</operator> <operator pos:start="73:22" pos:end="73:22">(</operator><operator pos:start="73:23" pos:end="73:23">(</operator><name pos:start="73:24" pos:end="73:30">history</name> <operator pos:start="73:32" pos:end="73:32">*</operator> <name pos:start="73:34" pos:end="73:49">rice_historymult</name><operator pos:start="73:50" pos:end="73:50">)</operator> <operator pos:start="73:52" pos:end="73:53">&gt;&gt;</operator> <literal type="number" pos:start="73:55" pos:end="73:55">9</literal><operator pos:start="73:56" pos:end="73:56">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="79:29"><if pos:start="77:9" pos:end="79:29">if <condition pos:start="77:12" pos:end="77:32">(<expr pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:22">x_modified</name> <operator pos:start="77:24" pos:end="77:24">&gt;</operator> <literal type="number" pos:start="77:26" pos:end="77:31">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:29"><block_content pos:start="79:13" pos:end="79:29">

            <expr_stmt pos:start="79:13" pos:end="79:29"><expr pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:19">history</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <literal type="number" pos:start="79:23" pos:end="79:28">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="83:9" pos:end="83:63">/* special case: there may be compressed blocks of 0 */</comment>

        <if_stmt pos:start="85:9" pos:end="131:9"><if pos:start="85:9" pos:end="131:9">if <condition pos:start="85:12" pos:end="85:62">(<expr pos:start="85:13" pos:end="85:61"><operator pos:start="85:13" pos:end="85:13">(</operator><name pos:start="85:14" pos:end="85:20">history</name> <operator pos:start="85:22" pos:end="85:22">&lt;</operator> <literal type="number" pos:start="85:24" pos:end="85:26">128</literal><operator pos:start="85:27" pos:end="85:27">)</operator> <operator pos:start="85:29" pos:end="85:30">&amp;&amp;</operator> <operator pos:start="85:32" pos:end="85:32">(</operator><name pos:start="85:33" pos:end="85:44">output_count</name><operator pos:start="85:45" pos:end="85:45">+</operator><literal type="number" pos:start="85:46" pos:end="85:46">1</literal> <operator pos:start="85:48" pos:end="85:48">&lt;</operator> <name pos:start="85:50" pos:end="85:60">output_size</name><operator pos:start="85:61" pos:end="85:61">)</operator></expr>)</condition> <block pos:start="85:64" pos:end="131:9">{<block_content pos:start="87:13" pos:end="129:24">

            <decl_stmt pos:start="87:13" pos:end="87:18"><decl pos:start="87:13" pos:end="87:17"><type pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:15">int</name></type> <name pos:start="87:17" pos:end="87:17">k</name></decl>;</decl_stmt>

            <decl_stmt pos:start="89:13" pos:end="89:36"><decl pos:start="89:13" pos:end="89:35"><type pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:20">unsigned</name> <name pos:start="89:22" pos:end="89:24">int</name></type> <name pos:start="89:26" pos:end="89:35">block_size</name></decl>;</decl_stmt>



            <expr_stmt pos:start="93:13" pos:end="93:30"><expr pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:25">sign_modifier</name> <operator pos:start="93:27" pos:end="93:27">=</operator> <literal type="number" pos:start="93:29" pos:end="93:29">1</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="97:13" pos:end="97:72"><expr pos:start="97:13" pos:end="97:71"><name pos:start="97:13" pos:end="97:13">k</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <literal type="number" pos:start="97:17" pos:end="97:19">7</literal> <operator pos:start="97:19" pos:end="97:19">-</operator> <call pos:start="97:21" pos:end="97:36"><name pos:start="97:21" pos:end="97:27">av_log2</name><argument_list pos:start="97:28" pos:end="97:36">(<argument pos:start="97:29" pos:end="97:35"><expr pos:start="97:29" pos:end="97:35"><name pos:start="97:29" pos:end="97:35">history</name></expr></argument>)</argument_list></call> <operator pos:start="97:38" pos:end="97:38">+</operator> <operator pos:start="97:40" pos:end="97:40">(</operator><operator pos:start="97:41" pos:end="97:41">(</operator><name pos:start="97:42" pos:end="97:48">history</name> <operator pos:start="97:50" pos:end="97:50">+</operator> <literal type="number" pos:start="97:52" pos:end="97:53">16</literal><operator pos:start="97:54" pos:end="97:54">)</operator> <operator pos:start="97:56" pos:end="97:57">&gt;&gt;</operator> <literal type="number" pos:start="97:59" pos:end="97:59">6</literal> <comment type="block" pos:start="97:61" pos:end="97:70">/* / 64 */</comment><operator pos:start="97:71" pos:end="97:71">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:72"><expr pos:start="101:13" pos:end="101:71"><name pos:start="101:13" pos:end="101:22">block_size</name><operator pos:start="101:23" pos:end="101:23">=</operator> <call pos:start="101:25" pos:end="101:71"><name pos:start="101:25" pos:end="101:37">decode_scalar</name><argument_list pos:start="101:38" pos:end="101:71">(<argument pos:start="101:39" pos:end="101:47"><expr pos:start="101:39" pos:end="101:47"><operator pos:start="101:39" pos:end="101:39">&amp;</operator><name pos:start="101:40" pos:end="101:47"><name pos:start="101:40" pos:end="101:43">alac</name><operator pos:start="101:44" pos:end="101:45">-&gt;</operator><name pos:start="101:46" pos:end="101:47">gb</name></name></expr></argument>, <argument pos:start="101:50" pos:end="101:50"><expr pos:start="101:50" pos:end="101:50"><name pos:start="101:50" pos:end="101:50">k</name></expr></argument>, <argument pos:start="101:53" pos:end="101:66"><expr pos:start="101:53" pos:end="101:66"><name pos:start="101:53" pos:end="101:66">rice_kmodifier</name></expr></argument>, <argument pos:start="101:69" pos:end="101:70"><expr pos:start="101:69" pos:end="101:70"><literal type="number" pos:start="101:69" pos:end="101:70">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="105:13" pos:end="119:13"><if pos:start="105:13" pos:end="119:13">if <condition pos:start="105:16" pos:end="105:31">(<expr pos:start="105:17" pos:end="105:30"><name pos:start="105:17" pos:end="105:26">block_size</name> <operator pos:start="105:28" pos:end="105:28">&gt;</operator> <literal type="number" pos:start="105:30" pos:end="105:30">0</literal></expr>)</condition> <block pos:start="105:33" pos:end="119:13">{<block_content pos:start="107:17" pos:end="117:43">

                <if_stmt pos:start="107:17" pos:end="113:17"><if pos:start="107:17" pos:end="113:17">if<condition pos:start="107:19" pos:end="107:60">(<expr pos:start="107:20" pos:end="107:59"><name pos:start="107:20" pos:end="107:29">block_size</name> <operator pos:start="107:31" pos:end="107:32">&gt;=</operator> <name pos:start="107:34" pos:end="107:44">output_size</name> <operator pos:start="107:46" pos:end="107:46">-</operator> <name pos:start="107:48" pos:end="107:59">output_count</name></expr>)</condition><block pos:start="107:61" pos:end="113:17">{<block_content pos:start="109:21" pos:end="111:63">

                    <expr_stmt pos:start="109:21" pos:end="109:134"><expr pos:start="109:21" pos:end="109:133"><call pos:start="109:21" pos:end="109:133"><name pos:start="109:21" pos:end="109:26">av_log</name><argument_list pos:start="109:27" pos:end="109:133">(<argument pos:start="109:28" pos:end="109:38"><expr pos:start="109:28" pos:end="109:38"><name pos:start="109:28" pos:end="109:38"><name pos:start="109:28" pos:end="109:31">alac</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:38">avctx</name></name></expr></argument>, <argument pos:start="109:41" pos:end="109:52"><expr pos:start="109:41" pos:end="109:52"><name pos:start="109:41" pos:end="109:52">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:55" pos:end="109:93"><expr pos:start="109:55" pos:end="109:93"><literal type="string" pos:start="109:55" pos:end="109:93">"invalid zero block size of %d %d %d\n"</literal></expr></argument>, <argument pos:start="109:96" pos:end="109:105"><expr pos:start="109:96" pos:end="109:105"><name pos:start="109:96" pos:end="109:105">block_size</name></expr></argument>, <argument pos:start="109:108" pos:end="109:118"><expr pos:start="109:108" pos:end="109:118"><name pos:start="109:108" pos:end="109:118">output_size</name></expr></argument>, <argument pos:start="109:121" pos:end="109:132"><expr pos:start="109:121" pos:end="109:132"><name pos:start="109:121" pos:end="109:132">output_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="111:21" pos:end="111:63"><expr pos:start="111:21" pos:end="111:62"><name pos:start="111:21" pos:end="111:30">block_size</name><operator pos:start="111:31" pos:end="111:31">=</operator> <name pos:start="111:33" pos:end="111:43">output_size</name> <operator pos:start="111:45" pos:end="111:45">-</operator> <name pos:start="111:47" pos:end="111:58">output_count</name> <operator pos:start="111:60" pos:end="111:60">-</operator> <literal type="number" pos:start="111:62" pos:end="111:62">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:74"><expr pos:start="115:17" pos:end="115:73"><call pos:start="115:17" pos:end="115:73"><name pos:start="115:17" pos:end="115:22">memset</name><argument_list pos:start="115:23" pos:end="115:73">(<argument pos:start="115:24" pos:end="115:53"><expr pos:start="115:24" pos:end="115:53"><operator pos:start="115:24" pos:end="115:24">&amp;</operator><name pos:start="115:25" pos:end="115:53"><name pos:start="115:25" pos:end="115:37">output_buffer</name><index pos:start="115:38" pos:end="115:53">[<expr pos:start="115:39" pos:end="115:52"><name pos:start="115:39" pos:end="115:50">output_count</name><operator pos:start="115:51" pos:end="115:51">+</operator><literal type="number" pos:start="115:52" pos:end="115:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="115:56" pos:end="115:56"><expr pos:start="115:56" pos:end="115:56"><literal type="number" pos:start="115:56" pos:end="115:56">0</literal></expr></argument>, <argument pos:start="115:59" pos:end="115:72"><expr pos:start="115:59" pos:end="115:72"><name pos:start="115:59" pos:end="115:68">block_size</name> <operator pos:start="115:70" pos:end="115:70">*</operator> <literal type="number" pos:start="115:72" pos:end="115:72">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:43"><expr pos:start="117:17" pos:end="117:42"><name pos:start="117:17" pos:end="117:28">output_count</name> <operator pos:start="117:30" pos:end="117:31">+=</operator> <name pos:start="117:33" pos:end="117:42">block_size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="123:13" pos:end="125:34"><if pos:start="123:13" pos:end="125:34">if <condition pos:start="123:16" pos:end="123:36">(<expr pos:start="123:17" pos:end="123:35"><name pos:start="123:17" pos:end="123:26">block_size</name> <operator pos:start="123:28" pos:end="123:28">&gt;</operator> <literal type="number" pos:start="123:30" pos:end="123:35">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="125:17" pos:end="125:34"><block_content pos:start="125:17" pos:end="125:34">

                <expr_stmt pos:start="125:17" pos:end="125:34"><expr pos:start="125:17" pos:end="125:33"><name pos:start="125:17" pos:end="125:29">sign_modifier</name> <operator pos:start="125:31" pos:end="125:31">=</operator> <literal type="number" pos:start="125:33" pos:end="125:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="129:13" pos:end="129:24"><expr pos:start="129:13" pos:end="129:23"><name pos:start="129:13" pos:end="129:19">history</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <literal type="number" pos:start="129:23" pos:end="129:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
