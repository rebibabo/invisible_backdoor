<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/381.c" pos:tabs="8"><function pos:start="1:1" pos:end="1115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">adpcm_decode_frame</name><parameter_list pos:start="1:30" pos:end="5:55">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:40"><decl pos:start="5:29" pos:end="5:40"><type pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="1115:1">{<block_content pos:start="9:5" pos:end="1113:21">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">ADPCMContext</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">c</name> <init pos:start="9:21" pos:end="9:38">= <expr pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:27">avctx</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22">ADPCMChannelStatus</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:26">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">n</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">m</name></decl>, <decl pos:start="13:15" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:21">channel</name></decl>, <decl pos:start="13:24" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:24" pos:end="13:24">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:23">block_predictor</name><index pos:start="15:24" pos:end="15:26">[<expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">short</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:18">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">short</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:22">samples_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:16">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:11"><decl pos:start="23:5" pos:end="23:10"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:10">st</name></decl>;</decl_stmt> <comment type="block" pos:start="23:13" pos:end="23:24">/* stereo */</comment>



    <comment type="block" pos:start="27:5" pos:end="27:40">/* DK3 ADPCM accounting variables */</comment>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:17">char</name></type> <name pos:start="29:19" pos:end="29:27">last_byte</name> <init pos:start="29:29" pos:end="29:31">= <expr pos:start="29:31" pos:end="29:31"><literal type="number" pos:start="29:31" pos:end="29:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:17">char</name></type> <name pos:start="31:19" pos:end="31:24">nibble</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:35"><decl pos:start="33:5" pos:end="33:34"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:30">decode_top_nibble_next</name> <init pos:start="33:32" pos:end="33:34">= <expr pos:start="33:34" pos:end="33:34"><literal type="number" pos:start="33:34" pos:end="33:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:21"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:20">diff_channel</name></decl>;</decl_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:34">/* EA ADPCM state variables */</comment>

    <decl_stmt pos:start="41:5" pos:end="41:30"><decl pos:start="41:5" pos:end="41:29"><type pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:12">uint32_t</name></type> <name pos:start="41:14" pos:end="41:29">samples_in_chunk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:56"><decl pos:start="43:5" pos:end="43:32"><type pos:start="43:5" pos:end="43:11"><name pos:start="43:5" pos:end="43:11">int32_t</name></type> <name pos:start="43:13" pos:end="43:32">previous_left_sample</name></decl>, <decl pos:start="43:35" pos:end="43:55"><type ref="prev" pos:start="43:5" pos:end="43:11"/><name pos:start="43:35" pos:end="43:55">previous_right_sample</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:54"><decl pos:start="45:5" pos:end="45:31"><type pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:11">int32_t</name></type> <name pos:start="45:13" pos:end="45:31">current_left_sample</name></decl>, <decl pos:start="45:34" pos:end="45:53"><type ref="prev" pos:start="45:5" pos:end="45:11"/><name pos:start="45:34" pos:end="45:53">current_right_sample</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:48"><decl pos:start="47:5" pos:end="47:28"><type pos:start="47:5" pos:end="47:11"><name pos:start="47:5" pos:end="47:11">int32_t</name></type> <name pos:start="47:13" pos:end="47:28">next_left_sample</name></decl>, <decl pos:start="47:31" pos:end="47:47"><type ref="prev" pos:start="47:5" pos:end="47:11"/><name pos:start="47:31" pos:end="47:47">next_right_sample</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:47"><decl pos:start="49:5" pos:end="49:19"><type pos:start="49:5" pos:end="49:11"><name pos:start="49:5" pos:end="49:11">int32_t</name></type> <name pos:start="49:13" pos:end="49:19">coeff1l</name></decl>, <decl pos:start="49:22" pos:end="49:28"><type ref="prev" pos:start="49:5" pos:end="49:11"/><name pos:start="49:22" pos:end="49:28">coeff2l</name></decl>, <decl pos:start="49:31" pos:end="49:37"><type ref="prev" pos:start="49:5" pos:end="49:11"/><name pos:start="49:31" pos:end="49:37">coeff1r</name></decl>, <decl pos:start="49:40" pos:end="49:46"><type ref="prev" pos:start="49:5" pos:end="49:11"/><name pos:start="49:40" pos:end="49:46">coeff2r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:36"><decl pos:start="51:5" pos:end="51:22"><type pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:11">uint8_t</name></type> <name pos:start="51:13" pos:end="51:22">shift_left</name></decl>, <decl pos:start="51:25" pos:end="51:35"><type ref="prev" pos:start="51:5" pos:end="51:11"/><name pos:start="51:25" pos:end="51:35">shift_right</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:23"><decl pos:start="53:5" pos:end="53:14"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:14">count1</name></decl>, <decl pos:start="53:17" pos:end="53:22"><type ref="prev" pos:start="53:5" pos:end="53:7"/><name pos:start="53:17" pos:end="53:22">count2</name></decl>;</decl_stmt>



    <if_stmt pos:start="57:5" pos:end="59:17"><if pos:start="57:5" pos:end="59:17">if <condition pos:start="57:8" pos:end="57:18">(<expr pos:start="57:9" pos:end="57:17"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:17">buf_size</name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:17"><block_content pos:start="59:9" pos:end="59:17">

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="63:5" pos:end="63:44">//should protect all 4bit ADPCM variants</comment>

    <comment type="line" pos:start="65:5" pos:end="65:60">//8 is needed for CODEC_ID_ADPCM_IMA_WAV with 2 channels</comment>

    <comment type="line" pos:start="67:5" pos:end="67:6">//</comment>

    <if_stmt pos:start="69:5" pos:end="71:18"><if pos:start="69:5" pos:end="71:18">if<condition pos:start="69:7" pos:end="69:35">(<expr pos:start="69:8" pos:end="69:34"><operator pos:start="69:8" pos:end="69:8">*</operator><name pos:start="69:9" pos:end="69:17">data_size</name><operator pos:start="69:18" pos:end="69:18">/</operator><literal type="number" pos:start="69:19" pos:end="69:19">4</literal> <operator pos:start="69:21" pos:end="69:21">&lt;</operator> <name pos:start="69:23" pos:end="69:30">buf_size</name> <operator pos:start="69:32" pos:end="69:32">+</operator> <literal type="number" pos:start="69:34" pos:end="69:34">8</literal></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:18"><block_content pos:start="71:9" pos:end="71:18">

        <return pos:start="71:9" pos:end="71:18">return <expr pos:start="71:16" pos:end="71:17"><operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:19"><expr pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:11">samples</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <name pos:start="75:15" pos:end="75:18">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:40"><expr pos:start="77:5" pos:end="77:39"><name pos:start="77:5" pos:end="77:15">samples_end</name><operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:24">samples</name> <operator pos:start="77:26" pos:end="77:26">+</operator> <operator pos:start="77:28" pos:end="77:28">*</operator><name pos:start="77:29" pos:end="77:37">data_size</name><operator pos:start="77:38" pos:end="77:38">/</operator><literal type="number" pos:start="77:39" pos:end="77:39">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:18"><expr pos:start="79:5" pos:end="79:17"><operator pos:start="79:5" pos:end="79:5">*</operator><name pos:start="79:6" pos:end="79:14">data_size</name><operator pos:start="79:15" pos:end="79:15">=</operator> <literal type="number" pos:start="79:17" pos:end="79:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:14"><expr pos:start="81:5" pos:end="81:13"><name pos:start="81:5" pos:end="81:7">src</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <name pos:start="81:11" pos:end="81:13">buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:38"><expr pos:start="85:5" pos:end="85:37"><name pos:start="85:5" pos:end="85:6">st</name> <operator pos:start="85:8" pos:end="85:8">=</operator> <ternary pos:start="85:10" pos:end="85:37"><condition pos:start="85:10" pos:end="85:31"><expr pos:start="85:10" pos:end="85:29"><name pos:start="85:10" pos:end="85:24"><name pos:start="85:10" pos:end="85:14">avctx</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:24">channels</name></name> <operator pos:start="85:26" pos:end="85:27">==</operator> <literal type="number" pos:start="85:29" pos:end="85:29">2</literal></expr> ?</condition><then pos:start="85:33" pos:end="85:33"> <expr pos:start="85:33" pos:end="85:33"><literal type="number" pos:start="85:33" pos:end="85:33">1</literal></expr> </then><else pos:start="85:35" pos:end="85:37">: <expr pos:start="85:37" pos:end="85:37"><literal type="number" pos:start="85:37" pos:end="85:37">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <switch pos:start="89:5" pos:end="1109:5">switch<condition pos:start="89:11" pos:end="89:28">(<expr pos:start="89:12" pos:end="89:27"><name pos:start="89:12" pos:end="89:27"><name pos:start="89:12" pos:end="89:16">avctx</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:23">codec</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:27">id</name></name></expr>)</condition> <block pos:start="89:30" pos:end="1109:5">{<block_content pos:start="91:5" pos:end="1107:18">

    <case pos:start="91:5" pos:end="91:31">case <expr pos:start="91:10" pos:end="91:30"><name pos:start="91:10" pos:end="91:30">CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:9">n</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:21">buf_size</name> <operator pos:start="93:23" pos:end="93:23">-</operator> <literal type="number" pos:start="93:25" pos:end="93:25">2</literal><operator pos:start="93:26" pos:end="93:26">)</operator></expr>;</expr_stmt><comment type="block" pos:start="93:28" pos:end="93:53">/* &gt;&gt; 2*avctx-&gt;channels;*/</comment>

        <expr_stmt pos:start="95:9" pos:end="95:29"><expr pos:start="95:9" pos:end="95:28"><name pos:start="95:9" pos:end="95:15">channel</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <name pos:start="95:19" pos:end="95:28"><name pos:start="95:19" pos:end="95:19">c</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:28">channel</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:35"><expr pos:start="97:9" pos:end="97:34"><name pos:start="97:9" pos:end="97:10">cs</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <operator pos:start="97:14" pos:end="97:14">&amp;</operator><operator pos:start="97:15" pos:end="97:15">(</operator><name pos:start="97:16" pos:end="97:33"><name pos:start="97:16" pos:end="97:16">c</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:24">status</name><index pos:start="97:25" pos:end="97:33">[<expr pos:start="97:26" pos:end="97:32"><name pos:start="97:26" pos:end="97:32">channel</name></expr>]</index></name><operator pos:start="97:34" pos:end="97:34">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="99:9" pos:end="99:33">/* (pppppp) (piiiiiii) */</comment>



        <comment type="block" pos:start="103:9" pos:end="103:82">/* Bits 15-7 are the _top_ 9 bits of the 16-bit initial predictor value */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:38"><expr pos:start="105:9" pos:end="105:37"><name pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:10">cs</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:21">predictor</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <operator pos:start="105:25" pos:end="105:25">(</operator><operator pos:start="105:26" pos:end="105:26">*</operator><name pos:start="105:27" pos:end="105:29">src</name><operator pos:start="105:30" pos:end="105:31">++</operator><operator pos:start="105:32" pos:end="105:32">)</operator> <operator pos:start="105:34" pos:end="105:35">&lt;&lt;</operator> <literal type="number" pos:start="105:37" pos:end="105:37">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:39"><expr pos:start="107:9" pos:end="107:38"><name pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:10">cs</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:21">predictor</name></name> <operator pos:start="107:23" pos:end="107:24">|=</operator> <operator pos:start="107:26" pos:end="107:26">(</operator><operator pos:start="107:27" pos:end="107:27">*</operator><name pos:start="107:28" pos:end="107:30">src</name> <operator pos:start="107:32" pos:end="107:32">&amp;</operator> <literal type="number" pos:start="107:34" pos:end="107:37">0x80</literal><operator pos:start="107:38" pos:end="107:38">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:32"><expr pos:start="109:9" pos:end="109:31"><name pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:10">cs</name><operator pos:start="109:11" pos:end="109:12">-&gt;</operator><name pos:start="109:13" pos:end="109:21">predictor</name></name> <operator pos:start="109:23" pos:end="109:24">&amp;=</operator> <literal type="number" pos:start="109:26" pos:end="109:31">0xFF80</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="113:9" pos:end="113:28">/* sign extension */</comment>

        <if_stmt pos:start="115:9" pos:end="117:37"><if pos:start="115:9" pos:end="117:37">if<condition pos:start="115:11" pos:end="115:34">(<expr pos:start="115:12" pos:end="115:33"><name pos:start="115:12" pos:end="115:24"><name pos:start="115:12" pos:end="115:13">cs</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:24">predictor</name></name> <operator pos:start="115:26" pos:end="115:26">&amp;</operator> <literal type="number" pos:start="115:28" pos:end="115:33">0x8000</literal></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:37"><block_content pos:start="117:13" pos:end="117:37">

            <expr_stmt pos:start="117:13" pos:end="117:37"><expr pos:start="117:13" pos:end="117:36"><name pos:start="117:13" pos:end="117:25"><name pos:start="117:13" pos:end="117:14">cs</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:25">predictor</name></name> <operator pos:start="117:27" pos:end="117:28">-=</operator> <literal type="number" pos:start="117:30" pos:end="117:36">0x10000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="121:9" pos:end="121:38"><expr pos:start="121:9" pos:end="121:37"><call pos:start="121:9" pos:end="121:37"><name pos:start="121:9" pos:end="121:22">CLAMP_TO_SHORT</name><argument_list pos:start="121:23" pos:end="121:37">(<argument pos:start="121:24" pos:end="121:36"><expr pos:start="121:24" pos:end="121:36"><name pos:start="121:24" pos:end="121:36"><name pos:start="121:24" pos:end="121:25">cs</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:36">predictor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:41"><expr pos:start="125:9" pos:end="125:40"><name pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:10">cs</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:22">step_index</name></name> <operator pos:start="125:24" pos:end="125:24">=</operator> <operator pos:start="125:26" pos:end="125:26">(</operator><operator pos:start="125:27" pos:end="125:27">*</operator><name pos:start="125:28" pos:end="125:30">src</name><operator pos:start="125:31" pos:end="125:32">++</operator><operator pos:start="125:33" pos:end="125:33">)</operator> <operator pos:start="125:35" pos:end="125:35">&amp;</operator> <literal type="number" pos:start="125:37" pos:end="125:40">0x7F</literal></expr>;</expr_stmt>



        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:32">(<expr pos:start="129:13" pos:end="129:31"><name pos:start="129:13" pos:end="129:26"><name pos:start="129:13" pos:end="129:14">cs</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:26">step_index</name></name> <operator pos:start="129:28" pos:end="129:28">&gt;</operator> <literal type="number" pos:start="129:30" pos:end="129:31">88</literal></expr>)</condition><block pos:start="129:33" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:32">

            <expr_stmt pos:start="131:13" pos:end="131:84"><expr pos:start="131:13" pos:end="131:83"><call pos:start="131:13" pos:end="131:83"><name pos:start="131:13" pos:end="131:18">av_log</name><argument_list pos:start="131:19" pos:end="131:83">(<argument pos:start="131:20" pos:end="131:24"><expr pos:start="131:20" pos:end="131:24"><name pos:start="131:20" pos:end="131:24">avctx</name></expr></argument>, <argument pos:start="131:27" pos:end="131:38"><expr pos:start="131:27" pos:end="131:38"><name pos:start="131:27" pos:end="131:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:41" pos:end="131:66"><expr pos:start="131:41" pos:end="131:66"><literal type="string" pos:start="131:41" pos:end="131:66">"ERROR: step_index = %i\n"</literal></expr></argument>, <argument pos:start="131:69" pos:end="131:82"><expr pos:start="131:69" pos:end="131:82"><name pos:start="131:69" pos:end="131:82"><name pos:start="131:69" pos:end="131:70">cs</name><operator pos:start="131:71" pos:end="131:72">-&gt;</operator><name pos:start="131:73" pos:end="131:82">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:32"><expr pos:start="133:13" pos:end="133:31"><name pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:14">cs</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:26">step_index</name></name> <operator pos:start="133:28" pos:end="133:28">=</operator> <literal type="number" pos:start="133:30" pos:end="133:31">88</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="139:9" pos:end="139:46"><expr pos:start="139:9" pos:end="139:45"><name pos:start="139:9" pos:end="139:16"><name pos:start="139:9" pos:end="139:10">cs</name><operator pos:start="139:11" pos:end="139:12">-&gt;</operator><name pos:start="139:13" pos:end="139:16">step</name></name> <operator pos:start="139:18" pos:end="139:18">=</operator> <name pos:start="139:20" pos:end="139:45"><name pos:start="139:20" pos:end="139:29">step_table</name><index pos:start="139:30" pos:end="139:45">[<expr pos:start="139:31" pos:end="139:44"><name pos:start="139:31" pos:end="139:44"><name pos:start="139:31" pos:end="139:32">cs</name><operator pos:start="139:33" pos:end="139:34">-&gt;</operator><name pos:start="139:35" pos:end="139:44">step_index</name></name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="143:9" pos:end="145:22"><if pos:start="143:9" pos:end="145:22">if <condition pos:start="143:12" pos:end="143:26">(<expr pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:14">st</name> <operator pos:start="143:16" pos:end="143:17">&amp;&amp;</operator> <name pos:start="143:19" pos:end="143:25">channel</name></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:22"><block_content pos:start="145:13" pos:end="145:22">

            <expr_stmt pos:start="145:13" pos:end="145:22"><expr pos:start="145:13" pos:end="145:21"><name pos:start="145:13" pos:end="145:19">samples</name><operator pos:start="145:20" pos:end="145:21">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="149:9" pos:end="161:9">for<control pos:start="149:12" pos:end="149:39">(<init pos:start="149:13" pos:end="149:17"><expr pos:start="149:13" pos:end="149:16"><name pos:start="149:13" pos:end="149:13">m</name><operator pos:start="149:14" pos:end="149:14">=</operator><literal type="number" pos:start="149:15" pos:end="149:16">32</literal></expr>;</init> <condition pos:start="149:19" pos:end="149:29"><expr pos:start="149:19" pos:end="149:28"><name pos:start="149:19" pos:end="149:19">n</name><operator pos:start="149:20" pos:end="149:20">&gt;</operator><literal type="number" pos:start="149:21" pos:end="149:21">0</literal> <operator pos:start="149:23" pos:end="149:24">&amp;&amp;</operator> <name pos:start="149:26" pos:end="149:26">m</name><operator pos:start="149:27" pos:end="149:27">&gt;</operator><literal type="number" pos:start="149:28" pos:end="149:28">0</literal></expr>;</condition> <incr pos:start="149:31" pos:end="149:38"><expr pos:start="149:31" pos:end="149:33"><name pos:start="149:31" pos:end="149:31">n</name><operator pos:start="149:32" pos:end="149:33">--</operator></expr><operator pos:start="149:34" pos:end="149:34">,</operator> <expr pos:start="149:36" pos:end="149:38"><name pos:start="149:36" pos:end="149:36">m</name><operator pos:start="149:37" pos:end="149:38">--</operator></expr></incr>)</control> <block pos:start="149:41" pos:end="161:9">{<block_content pos:start="151:13" pos:end="159:19"> <comment type="block" pos:start="149:43" pos:end="149:113">/* in QuickTime, IMA is encoded by chuncks of 34 bytes (=64 samples) */</comment>

            <expr_stmt pos:start="151:13" pos:end="151:69"><expr pos:start="151:13" pos:end="151:68"><operator pos:start="151:13" pos:end="151:13">*</operator><name pos:start="151:14" pos:end="151:20">samples</name> <operator pos:start="151:22" pos:end="151:22">=</operator> <call pos:start="151:24" pos:end="151:68"><name pos:start="151:24" pos:end="151:46">adpcm_ima_expand_nibble</name><argument_list pos:start="151:47" pos:end="151:68">(<argument pos:start="151:48" pos:end="151:49"><expr pos:start="151:48" pos:end="151:49"><name pos:start="151:48" pos:end="151:49">cs</name></expr></argument>, <argument pos:start="151:52" pos:end="151:64"><expr pos:start="151:52" pos:end="151:64"><name pos:start="151:52" pos:end="151:57"><name pos:start="151:52" pos:end="151:54">src</name><index pos:start="151:55" pos:end="151:57">[<expr pos:start="151:56" pos:end="151:56"><literal type="number" pos:start="151:56" pos:end="151:56">0</literal></expr>]</index></name> <operator pos:start="151:59" pos:end="151:59">&amp;</operator> <literal type="number" pos:start="151:61" pos:end="151:64">0x0F</literal></expr></argument>, <argument pos:start="151:67" pos:end="151:67"><expr pos:start="151:67" pos:end="151:67"><literal type="number" pos:start="151:67" pos:end="151:67">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:39"><expr pos:start="153:13" pos:end="153:38"><name pos:start="153:13" pos:end="153:19">samples</name> <operator pos:start="153:21" pos:end="153:22">+=</operator> <name pos:start="153:24" pos:end="153:38"><name pos:start="153:24" pos:end="153:28">avctx</name><operator pos:start="153:29" pos:end="153:30">-&gt;</operator><name pos:start="153:31" pos:end="153:38">channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:76"><expr pos:start="155:13" pos:end="155:75"><operator pos:start="155:13" pos:end="155:13">*</operator><name pos:start="155:14" pos:end="155:20">samples</name> <operator pos:start="155:22" pos:end="155:22">=</operator> <call pos:start="155:24" pos:end="155:75"><name pos:start="155:24" pos:end="155:46">adpcm_ima_expand_nibble</name><argument_list pos:start="155:47" pos:end="155:75">(<argument pos:start="155:48" pos:end="155:49"><expr pos:start="155:48" pos:end="155:49"><name pos:start="155:48" pos:end="155:49">cs</name></expr></argument>, <argument pos:start="155:52" pos:end="155:71"><expr pos:start="155:52" pos:end="155:71"><operator pos:start="155:52" pos:end="155:52">(</operator><name pos:start="155:53" pos:end="155:58"><name pos:start="155:53" pos:end="155:55">src</name><index pos:start="155:56" pos:end="155:58">[<expr pos:start="155:57" pos:end="155:57"><literal type="number" pos:start="155:57" pos:end="155:57">0</literal></expr>]</index></name> <operator pos:start="155:60" pos:end="155:61">&gt;&gt;</operator> <literal type="number" pos:start="155:63" pos:end="155:63">4</literal><operator pos:start="155:64" pos:end="155:64">)</operator> <operator pos:start="155:66" pos:end="155:66">&amp;</operator> <literal type="number" pos:start="155:68" pos:end="155:71">0x0F</literal></expr></argument>, <argument pos:start="155:74" pos:end="155:74"><expr pos:start="155:74" pos:end="155:74"><literal type="number" pos:start="155:74" pos:end="155:74">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:39"><expr pos:start="157:13" pos:end="157:38"><name pos:start="157:13" pos:end="157:19">samples</name> <operator pos:start="157:21" pos:end="157:22">+=</operator> <name pos:start="157:24" pos:end="157:38"><name pos:start="157:24" pos:end="157:28">avctx</name><operator pos:start="157:29" pos:end="157:30">-&gt;</operator><name pos:start="157:31" pos:end="157:38">channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:19"><expr pos:start="159:13" pos:end="159:18"><name pos:start="159:13" pos:end="159:15">src</name> <operator pos:start="159:17" pos:end="159:18">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="165:9" pos:end="175:9"><if pos:start="165:9" pos:end="175:9">if<condition pos:start="165:11" pos:end="165:14">(<expr pos:start="165:12" pos:end="165:13"><name pos:start="165:12" pos:end="165:13">st</name></expr>)</condition> <block pos:start="165:16" pos:end="175:9">{<block_content pos:start="167:13" pos:end="173:13"> <comment type="block" pos:start="165:18" pos:end="165:48">/* handle stereo interlacing */</comment>

            <expr_stmt pos:start="167:13" pos:end="167:43"><expr pos:start="167:13" pos:end="167:42"><name pos:start="167:13" pos:end="167:22"><name pos:start="167:13" pos:end="167:13">c</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:22">channel</name></name> <operator pos:start="167:24" pos:end="167:24">=</operator> <operator pos:start="167:26" pos:end="167:26">(</operator><name pos:start="167:27" pos:end="167:33">channel</name> <operator pos:start="167:35" pos:end="167:35">+</operator> <literal type="number" pos:start="167:37" pos:end="167:37">1</literal><operator pos:start="167:38" pos:end="167:38">)</operator> <operator pos:start="167:40" pos:end="167:40">%</operator> <literal type="number" pos:start="167:42" pos:end="167:42">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="167:45" pos:end="167:101">/* we get one packet for left, then one for right data */</comment>

            <if_stmt pos:start="169:13" pos:end="173:13"><if pos:start="169:13" pos:end="173:13">if<condition pos:start="169:15" pos:end="169:28">(<expr pos:start="169:16" pos:end="169:27"><name pos:start="169:16" pos:end="169:22">channel</name> <operator pos:start="169:24" pos:end="169:25">==</operator> <literal type="number" pos:start="169:27" pos:end="169:27">1</literal></expr>)</condition> <block pos:start="169:30" pos:end="173:13">{<block_content pos:start="171:17" pos:end="171:33"> <comment type="block" pos:start="169:32" pos:end="169:88">/* wait for the other packet before outputing anything */</comment>

                <return pos:start="171:17" pos:end="171:33">return <expr pos:start="171:24" pos:end="171:32"><name pos:start="171:24" pos:end="171:26">src</name> <operator pos:start="171:28" pos:end="171:28">-</operator> <name pos:start="171:30" pos:end="171:32">buf</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="177:9" pos:end="177:14">break;</break>

    <case pos:start="179:5" pos:end="179:32">case <expr pos:start="179:10" pos:end="179:31"><name pos:start="179:10" pos:end="179:31">CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

        <if_stmt pos:start="181:9" pos:end="183:42"><if pos:start="181:9" pos:end="183:42">if <condition pos:start="181:12" pos:end="181:69">(<expr pos:start="181:13" pos:end="181:68"><name pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:17">avctx</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:30">block_align</name></name> <operator pos:start="181:32" pos:end="181:33">!=</operator> <literal type="number" pos:start="181:35" pos:end="181:35">0</literal> <operator pos:start="181:37" pos:end="181:38">&amp;&amp;</operator> <name pos:start="181:40" pos:end="181:47">buf_size</name> <operator pos:start="181:49" pos:end="181:49">&gt;</operator> <name pos:start="181:51" pos:end="181:68"><name pos:start="181:51" pos:end="181:55">avctx</name><operator pos:start="181:56" pos:end="181:57">-&gt;</operator><name pos:start="181:58" pos:end="181:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="183:42"><block_content pos:start="183:13" pos:end="183:42">

            <expr_stmt pos:start="183:13" pos:end="183:42"><expr pos:start="183:13" pos:end="183:41"><name pos:start="183:13" pos:end="183:20">buf_size</name> <operator pos:start="183:22" pos:end="183:22">=</operator> <name pos:start="183:24" pos:end="183:41"><name pos:start="183:24" pos:end="183:28">avctx</name><operator pos:start="183:29" pos:end="183:30">-&gt;</operator><name pos:start="183:31" pos:end="183:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<comment type="line" pos:start="187:1" pos:end="187:89">//        samples_per_block= (block_align-4*chanels)*8 / (bits_per_sample * chanels) + 1;</comment>



        <for pos:start="191:9" pos:end="217:9">for<control pos:start="191:12" pos:end="191:40">(<init pos:start="191:13" pos:end="191:16"><expr pos:start="191:13" pos:end="191:15"><name pos:start="191:13" pos:end="191:13">i</name><operator pos:start="191:14" pos:end="191:14">=</operator><literal type="number" pos:start="191:15" pos:end="191:15">0</literal></expr>;</init> <condition pos:start="191:18" pos:end="191:35"><expr pos:start="191:18" pos:end="191:34"><name pos:start="191:18" pos:end="191:18">i</name><operator pos:start="191:19" pos:end="191:19">&lt;</operator><name pos:start="191:20" pos:end="191:34"><name pos:start="191:20" pos:end="191:24">avctx</name><operator pos:start="191:25" pos:end="191:26">-&gt;</operator><name pos:start="191:27" pos:end="191:34">channels</name></name></expr>;</condition> <incr pos:start="191:37" pos:end="191:39"><expr pos:start="191:37" pos:end="191:39"><name pos:start="191:37" pos:end="191:37">i</name><operator pos:start="191:38" pos:end="191:39">++</operator></expr></incr>)</control><block pos:start="191:41" pos:end="217:9">{<block_content pos:start="193:13" pos:end="215:105">

            <expr_stmt pos:start="193:13" pos:end="193:33"><expr pos:start="193:13" pos:end="193:32"><name pos:start="193:13" pos:end="193:14">cs</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <operator pos:start="193:18" pos:end="193:18">&amp;</operator><operator pos:start="193:19" pos:end="193:19">(</operator><name pos:start="193:20" pos:end="193:31"><name pos:start="193:20" pos:end="193:20">c</name><operator pos:start="193:21" pos:end="193:22">-&gt;</operator><name pos:start="193:23" pos:end="193:28">status</name><index pos:start="193:29" pos:end="193:31">[<expr pos:start="193:30" pos:end="193:30"><name pos:start="193:30" pos:end="193:30">i</name></expr>]</index></name><operator pos:start="193:32" pos:end="193:32">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:60"><expr pos:start="195:13" pos:end="195:59"><name pos:start="195:13" pos:end="195:25"><name pos:start="195:13" pos:end="195:14">cs</name><operator pos:start="195:15" pos:end="195:16">-&gt;</operator><name pos:start="195:17" pos:end="195:25">predictor</name></name> <operator pos:start="195:27" pos:end="195:27">=</operator> <operator pos:start="195:29" pos:end="195:29">(</operator><name pos:start="195:30" pos:end="195:36">int16_t</name><operator pos:start="195:37" pos:end="195:37">)</operator><operator pos:start="195:38" pos:end="195:38">(</operator><name pos:start="195:39" pos:end="195:44"><name pos:start="195:39" pos:end="195:41">src</name><index pos:start="195:42" pos:end="195:44">[<expr pos:start="195:43" pos:end="195:43"><literal type="number" pos:start="195:43" pos:end="195:43">0</literal></expr>]</index></name> <operator pos:start="195:46" pos:end="195:46">+</operator> <operator pos:start="195:48" pos:end="195:48">(</operator><name pos:start="195:49" pos:end="195:54"><name pos:start="195:49" pos:end="195:51">src</name><index pos:start="195:52" pos:end="195:54">[<expr pos:start="195:53" pos:end="195:53"><literal type="number" pos:start="195:53" pos:end="195:53">1</literal></expr>]</index></name><operator pos:start="195:55" pos:end="195:56">&lt;&lt;</operator><literal type="number" pos:start="195:57" pos:end="195:57">8</literal><operator pos:start="195:58" pos:end="195:58">)</operator><operator pos:start="195:59" pos:end="195:59">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:19"><expr pos:start="197:13" pos:end="197:18"><name pos:start="197:13" pos:end="197:15">src</name><operator pos:start="197:16" pos:end="197:17">+=</operator><literal type="number" pos:start="197:18" pos:end="197:18">2</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="201:9" pos:end="201:63">// XXX: is this correct ??: *samples++ = cs-&gt;predictor;</comment>



            <expr_stmt pos:start="205:13" pos:end="205:36"><expr pos:start="205:13" pos:end="205:35"><name pos:start="205:13" pos:end="205:26"><name pos:start="205:13" pos:end="205:14">cs</name><operator pos:start="205:15" pos:end="205:16">-&gt;</operator><name pos:start="205:17" pos:end="205:26">step_index</name></name> <operator pos:start="205:28" pos:end="205:28">=</operator> <operator pos:start="205:30" pos:end="205:30">*</operator><name pos:start="205:31" pos:end="205:33">src</name><operator pos:start="205:34" pos:end="205:35">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="207:13" pos:end="213:13"><if pos:start="207:13" pos:end="213:13">if <condition pos:start="207:16" pos:end="207:36">(<expr pos:start="207:17" pos:end="207:35"><name pos:start="207:17" pos:end="207:30"><name pos:start="207:17" pos:end="207:18">cs</name><operator pos:start="207:19" pos:end="207:20">-&gt;</operator><name pos:start="207:21" pos:end="207:30">step_index</name></name> <operator pos:start="207:32" pos:end="207:32">&gt;</operator> <literal type="number" pos:start="207:34" pos:end="207:35">88</literal></expr>)</condition><block pos:start="207:37" pos:end="213:13">{<block_content pos:start="209:17" pos:end="211:36">

                <expr_stmt pos:start="209:17" pos:end="209:88"><expr pos:start="209:17" pos:end="209:87"><call pos:start="209:17" pos:end="209:87"><name pos:start="209:17" pos:end="209:22">av_log</name><argument_list pos:start="209:23" pos:end="209:87">(<argument pos:start="209:24" pos:end="209:28"><expr pos:start="209:24" pos:end="209:28"><name pos:start="209:24" pos:end="209:28">avctx</name></expr></argument>, <argument pos:start="209:31" pos:end="209:42"><expr pos:start="209:31" pos:end="209:42"><name pos:start="209:31" pos:end="209:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="209:45" pos:end="209:70"><expr pos:start="209:45" pos:end="209:70"><literal type="string" pos:start="209:45" pos:end="209:70">"ERROR: step_index = %i\n"</literal></expr></argument>, <argument pos:start="209:73" pos:end="209:86"><expr pos:start="209:73" pos:end="209:86"><name pos:start="209:73" pos:end="209:86"><name pos:start="209:73" pos:end="209:74">cs</name><operator pos:start="209:75" pos:end="209:76">-&gt;</operator><name pos:start="209:77" pos:end="209:86">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:36"><expr pos:start="211:17" pos:end="211:35"><name pos:start="211:17" pos:end="211:30"><name pos:start="211:17" pos:end="211:18">cs</name><operator pos:start="211:19" pos:end="211:20">-&gt;</operator><name pos:start="211:21" pos:end="211:30">step_index</name></name> <operator pos:start="211:32" pos:end="211:32">=</operator> <literal type="number" pos:start="211:34" pos:end="211:35">88</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="215:13" pos:end="215:105"><if pos:start="215:13" pos:end="215:105">if <condition pos:start="215:16" pos:end="215:23">(<expr pos:start="215:17" pos:end="215:22"><operator pos:start="215:17" pos:end="215:17">*</operator><name pos:start="215:18" pos:end="215:20">src</name><operator pos:start="215:21" pos:end="215:22">++</operator></expr>)</condition><block type="pseudo" pos:start="215:25" pos:end="215:105"><block_content pos:start="215:25" pos:end="215:105"> <expr_stmt pos:start="215:25" pos:end="215:105"><expr pos:start="215:25" pos:end="215:104"><call pos:start="215:25" pos:end="215:104"><name pos:start="215:25" pos:end="215:30">av_log</name><argument_list pos:start="215:31" pos:end="215:104">(<argument pos:start="215:32" pos:end="215:36"><expr pos:start="215:32" pos:end="215:36"><name pos:start="215:32" pos:end="215:36">avctx</name></expr></argument>, <argument pos:start="215:39" pos:end="215:50"><expr pos:start="215:39" pos:end="215:50"><name pos:start="215:39" pos:end="215:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="215:53" pos:end="215:94"><expr pos:start="215:53" pos:end="215:94"><literal type="string" pos:start="215:53" pos:end="215:94">"unused byte should be null but is %d!!\n"</literal></expr></argument>, <argument pos:start="215:97" pos:end="215:103"><expr pos:start="215:97" pos:end="215:103"><name pos:start="215:97" pos:end="215:103"><name pos:start="215:97" pos:end="215:99">src</name><index pos:start="215:100" pos:end="215:103">[<expr pos:start="215:101" pos:end="215:102"><operator pos:start="215:101" pos:end="215:101">-</operator><literal type="number" pos:start="215:102" pos:end="215:102">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="215:107" pos:end="215:118">/* unused */</comment>

        </block_content>}</block></for>



        <while pos:start="221:9" pos:end="239:9">while<condition pos:start="221:14" pos:end="221:35">(<expr pos:start="221:15" pos:end="221:34"><name pos:start="221:15" pos:end="221:17">src</name> <operator pos:start="221:19" pos:end="221:19">&lt;</operator> <name pos:start="221:21" pos:end="221:23">buf</name> <operator pos:start="221:25" pos:end="221:25">+</operator> <name pos:start="221:27" pos:end="221:34">buf_size</name></expr>)</condition><block pos:start="221:36" pos:end="239:9">{<block_content pos:start="223:13" pos:end="237:24">

            <for pos:start="223:13" pos:end="235:13">for<control pos:start="223:16" pos:end="223:30">(<init pos:start="223:17" pos:end="223:20"><expr pos:start="223:17" pos:end="223:19"><name pos:start="223:17" pos:end="223:17">m</name><operator pos:start="223:18" pos:end="223:18">=</operator><literal type="number" pos:start="223:19" pos:end="223:19">0</literal></expr>;</init> <condition pos:start="223:22" pos:end="223:25"><expr pos:start="223:22" pos:end="223:24"><name pos:start="223:22" pos:end="223:22">m</name><operator pos:start="223:23" pos:end="223:23">&lt;</operator><literal type="number" pos:start="223:24" pos:end="223:24">4</literal></expr>;</condition> <incr pos:start="223:27" pos:end="223:29"><expr pos:start="223:27" pos:end="223:29"><name pos:start="223:27" pos:end="223:27">m</name><operator pos:start="223:28" pos:end="223:29">++</operator></expr></incr>)</control><block pos:start="223:31" pos:end="235:13">{<block_content pos:start="225:17" pos:end="233:22">

                <for pos:start="225:17" pos:end="227:92">for<control pos:start="225:20" pos:end="225:36">(<init pos:start="225:21" pos:end="225:24"><expr pos:start="225:21" pos:end="225:23"><name pos:start="225:21" pos:end="225:21">i</name><operator pos:start="225:22" pos:end="225:22">=</operator><literal type="number" pos:start="225:23" pos:end="225:23">0</literal></expr>;</init> <condition pos:start="225:26" pos:end="225:31"><expr pos:start="225:26" pos:end="225:30"><name pos:start="225:26" pos:end="225:26">i</name><operator pos:start="225:27" pos:end="225:28">&lt;=</operator><name pos:start="225:29" pos:end="225:30">st</name></expr>;</condition> <incr pos:start="225:33" pos:end="225:35"><expr pos:start="225:33" pos:end="225:35"><name pos:start="225:33" pos:end="225:33">i</name><operator pos:start="225:34" pos:end="225:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="227:21" pos:end="227:92"><block_content pos:start="227:21" pos:end="227:92">

                    <expr_stmt pos:start="227:21" pos:end="227:92"><expr pos:start="227:21" pos:end="227:91"><operator pos:start="227:21" pos:end="227:21">*</operator><name pos:start="227:22" pos:end="227:28">samples</name><operator pos:start="227:29" pos:end="227:30">++</operator> <operator pos:start="227:32" pos:end="227:32">=</operator> <call pos:start="227:34" pos:end="227:91"><name pos:start="227:34" pos:end="227:56">adpcm_ima_expand_nibble</name><argument_list pos:start="227:57" pos:end="227:91">(<argument pos:start="227:58" pos:end="227:70"><expr pos:start="227:58" pos:end="227:70"><operator pos:start="227:58" pos:end="227:58">&amp;</operator><name pos:start="227:59" pos:end="227:70"><name pos:start="227:59" pos:end="227:59">c</name><operator pos:start="227:60" pos:end="227:61">-&gt;</operator><name pos:start="227:62" pos:end="227:67">status</name><index pos:start="227:68" pos:end="227:70">[<expr pos:start="227:69" pos:end="227:69"><name pos:start="227:69" pos:end="227:69">i</name></expr>]</index></name></expr></argument>, <argument pos:start="227:73" pos:end="227:87"><expr pos:start="227:73" pos:end="227:87"><name pos:start="227:73" pos:end="227:80"><name pos:start="227:73" pos:end="227:75">src</name><index pos:start="227:76" pos:end="227:80">[<expr pos:start="227:77" pos:end="227:79"><literal type="number" pos:start="227:77" pos:end="227:77">4</literal><operator pos:start="227:78" pos:end="227:78">*</operator><name pos:start="227:79" pos:end="227:79">i</name></expr>]</index></name> <operator pos:start="227:82" pos:end="227:82">&amp;</operator> <literal type="number" pos:start="227:84" pos:end="227:87">0x0F</literal></expr></argument>, <argument pos:start="227:90" pos:end="227:90"><expr pos:start="227:90" pos:end="227:90"><literal type="number" pos:start="227:90" pos:end="227:90">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <for pos:start="229:17" pos:end="231:92">for<control pos:start="229:20" pos:end="229:36">(<init pos:start="229:21" pos:end="229:24"><expr pos:start="229:21" pos:end="229:23"><name pos:start="229:21" pos:end="229:21">i</name><operator pos:start="229:22" pos:end="229:22">=</operator><literal type="number" pos:start="229:23" pos:end="229:23">0</literal></expr>;</init> <condition pos:start="229:26" pos:end="229:31"><expr pos:start="229:26" pos:end="229:30"><name pos:start="229:26" pos:end="229:26">i</name><operator pos:start="229:27" pos:end="229:28">&lt;=</operator><name pos:start="229:29" pos:end="229:30">st</name></expr>;</condition> <incr pos:start="229:33" pos:end="229:35"><expr pos:start="229:33" pos:end="229:35"><name pos:start="229:33" pos:end="229:33">i</name><operator pos:start="229:34" pos:end="229:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="231:21" pos:end="231:92"><block_content pos:start="231:21" pos:end="231:92">

                    <expr_stmt pos:start="231:21" pos:end="231:92"><expr pos:start="231:21" pos:end="231:91"><operator pos:start="231:21" pos:end="231:21">*</operator><name pos:start="231:22" pos:end="231:28">samples</name><operator pos:start="231:29" pos:end="231:30">++</operator> <operator pos:start="231:32" pos:end="231:32">=</operator> <call pos:start="231:34" pos:end="231:91"><name pos:start="231:34" pos:end="231:56">adpcm_ima_expand_nibble</name><argument_list pos:start="231:57" pos:end="231:91">(<argument pos:start="231:58" pos:end="231:70"><expr pos:start="231:58" pos:end="231:70"><operator pos:start="231:58" pos:end="231:58">&amp;</operator><name pos:start="231:59" pos:end="231:70"><name pos:start="231:59" pos:end="231:59">c</name><operator pos:start="231:60" pos:end="231:61">-&gt;</operator><name pos:start="231:62" pos:end="231:67">status</name><index pos:start="231:68" pos:end="231:70">[<expr pos:start="231:69" pos:end="231:69"><name pos:start="231:69" pos:end="231:69">i</name></expr>]</index></name></expr></argument>, <argument pos:start="231:73" pos:end="231:85"><expr pos:start="231:73" pos:end="231:85"><name pos:start="231:73" pos:end="231:80"><name pos:start="231:73" pos:end="231:75">src</name><index pos:start="231:76" pos:end="231:80">[<expr pos:start="231:77" pos:end="231:79"><literal type="number" pos:start="231:77" pos:end="231:77">4</literal><operator pos:start="231:78" pos:end="231:78">*</operator><name pos:start="231:79" pos:end="231:79">i</name></expr>]</index></name> <operator pos:start="231:82" pos:end="231:83">&gt;&gt;</operator> <literal type="number" pos:start="231:85" pos:end="231:85">4</literal></expr></argument>  , <argument pos:start="231:90" pos:end="231:90"><expr pos:start="231:90" pos:end="231:90"><literal type="number" pos:start="231:90" pos:end="231:90">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="233:17" pos:end="233:22"><expr pos:start="233:17" pos:end="233:21"><name pos:start="233:17" pos:end="233:19">src</name><operator pos:start="233:20" pos:end="233:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="237:13" pos:end="237:24"><expr pos:start="237:13" pos:end="237:23"><name pos:start="237:13" pos:end="237:15">src</name> <operator pos:start="237:17" pos:end="237:18">+=</operator> <literal type="number" pos:start="237:20" pos:end="237:20">4</literal><operator pos:start="237:21" pos:end="237:21">*</operator><name pos:start="237:22" pos:end="237:23">st</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="241:9" pos:end="241:14">break;</break>

    <case pos:start="243:5" pos:end="243:28">case <expr pos:start="243:10" pos:end="243:27"><name pos:start="243:10" pos:end="243:27">CODEC_ID_ADPCM_4XM</name></expr>:</case>

        <expr_stmt pos:start="245:9" pos:end="245:29"><expr pos:start="245:9" pos:end="245:28"><name pos:start="245:9" pos:end="245:10">cs</name> <operator pos:start="245:12" pos:end="245:12">=</operator> <operator pos:start="245:14" pos:end="245:14">&amp;</operator><operator pos:start="245:15" pos:end="245:15">(</operator><name pos:start="245:16" pos:end="245:27"><name pos:start="245:16" pos:end="245:16">c</name><operator pos:start="245:17" pos:end="245:18">-&gt;</operator><name pos:start="245:19" pos:end="245:24">status</name><index pos:start="245:25" pos:end="245:27">[<expr pos:start="245:26" pos:end="245:26"><literal type="number" pos:start="245:26" pos:end="245:26">0</literal></expr>]</index></name><operator pos:start="245:28" pos:end="245:28">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:64"><expr pos:start="247:9" pos:end="247:63"><name pos:start="247:9" pos:end="247:20"><name pos:start="247:9" pos:end="247:9">c</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:17">status</name><index pos:start="247:18" pos:end="247:20">[<expr pos:start="247:19" pos:end="247:19"><literal type="number" pos:start="247:19" pos:end="247:19">0</literal></expr>]</index></name><operator pos:start="247:21" pos:end="247:21">.</operator><name pos:start="247:22" pos:end="247:30">predictor</name><operator pos:start="247:31" pos:end="247:31">=</operator> <operator pos:start="247:33" pos:end="247:33">(</operator><name pos:start="247:34" pos:end="247:40">int16_t</name><operator pos:start="247:41" pos:end="247:41">)</operator><operator pos:start="247:42" pos:end="247:42">(</operator><name pos:start="247:43" pos:end="247:48"><name pos:start="247:43" pos:end="247:45">src</name><index pos:start="247:46" pos:end="247:48">[<expr pos:start="247:47" pos:end="247:47"><literal type="number" pos:start="247:47" pos:end="247:47">0</literal></expr>]</index></name> <operator pos:start="247:50" pos:end="247:50">+</operator> <operator pos:start="247:52" pos:end="247:52">(</operator><name pos:start="247:53" pos:end="247:58"><name pos:start="247:53" pos:end="247:55">src</name><index pos:start="247:56" pos:end="247:58">[<expr pos:start="247:57" pos:end="247:57"><literal type="number" pos:start="247:57" pos:end="247:57">1</literal></expr>]</index></name><operator pos:start="247:59" pos:end="247:60">&lt;&lt;</operator><literal type="number" pos:start="247:61" pos:end="247:61">8</literal><operator pos:start="247:62" pos:end="247:62">)</operator><operator pos:start="247:63" pos:end="247:63">)</operator></expr>;</expr_stmt> <expr_stmt pos:start="247:66" pos:end="247:72"><expr pos:start="247:66" pos:end="247:71"><name pos:start="247:66" pos:end="247:68">src</name><operator pos:start="247:69" pos:end="247:70">+=</operator><literal type="number" pos:start="247:71" pos:end="247:71">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="249:9" pos:end="253:9"><if pos:start="249:9" pos:end="253:9">if<condition pos:start="249:11" pos:end="249:14">(<expr pos:start="249:12" pos:end="249:13"><name pos:start="249:12" pos:end="249:13">st</name></expr>)</condition><block pos:start="249:15" pos:end="253:9">{<block_content pos:start="251:13" pos:end="251:76">

            <expr_stmt pos:start="251:13" pos:end="251:68"><expr pos:start="251:13" pos:end="251:67"><name pos:start="251:13" pos:end="251:24"><name pos:start="251:13" pos:end="251:13">c</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:21">status</name><index pos:start="251:22" pos:end="251:24">[<expr pos:start="251:23" pos:end="251:23"><literal type="number" pos:start="251:23" pos:end="251:23">1</literal></expr>]</index></name><operator pos:start="251:25" pos:end="251:25">.</operator><name pos:start="251:26" pos:end="251:34">predictor</name><operator pos:start="251:35" pos:end="251:35">=</operator> <operator pos:start="251:37" pos:end="251:37">(</operator><name pos:start="251:38" pos:end="251:44">int16_t</name><operator pos:start="251:45" pos:end="251:45">)</operator><operator pos:start="251:46" pos:end="251:46">(</operator><name pos:start="251:47" pos:end="251:52"><name pos:start="251:47" pos:end="251:49">src</name><index pos:start="251:50" pos:end="251:52">[<expr pos:start="251:51" pos:end="251:51"><literal type="number" pos:start="251:51" pos:end="251:51">0</literal></expr>]</index></name> <operator pos:start="251:54" pos:end="251:54">+</operator> <operator pos:start="251:56" pos:end="251:56">(</operator><name pos:start="251:57" pos:end="251:62"><name pos:start="251:57" pos:end="251:59">src</name><index pos:start="251:60" pos:end="251:62">[<expr pos:start="251:61" pos:end="251:61"><literal type="number" pos:start="251:61" pos:end="251:61">1</literal></expr>]</index></name><operator pos:start="251:63" pos:end="251:64">&lt;&lt;</operator><literal type="number" pos:start="251:65" pos:end="251:65">8</literal><operator pos:start="251:66" pos:end="251:66">)</operator><operator pos:start="251:67" pos:end="251:67">)</operator></expr>;</expr_stmt> <expr_stmt pos:start="251:70" pos:end="251:76"><expr pos:start="251:70" pos:end="251:75"><name pos:start="251:70" pos:end="251:72">src</name><operator pos:start="251:73" pos:end="251:74">+=</operator><literal type="number" pos:start="251:75" pos:end="251:75">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:65"><expr pos:start="255:9" pos:end="255:64"><name pos:start="255:9" pos:end="255:20"><name pos:start="255:9" pos:end="255:9">c</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:17">status</name><index pos:start="255:18" pos:end="255:20">[<expr pos:start="255:19" pos:end="255:19"><literal type="number" pos:start="255:19" pos:end="255:19">0</literal></expr>]</index></name><operator pos:start="255:21" pos:end="255:21">.</operator><name pos:start="255:22" pos:end="255:31">step_index</name><operator pos:start="255:32" pos:end="255:32">=</operator> <operator pos:start="255:34" pos:end="255:34">(</operator><name pos:start="255:35" pos:end="255:41">int16_t</name><operator pos:start="255:42" pos:end="255:42">)</operator><operator pos:start="255:43" pos:end="255:43">(</operator><name pos:start="255:44" pos:end="255:49"><name pos:start="255:44" pos:end="255:46">src</name><index pos:start="255:47" pos:end="255:49">[<expr pos:start="255:48" pos:end="255:48"><literal type="number" pos:start="255:48" pos:end="255:48">0</literal></expr>]</index></name> <operator pos:start="255:51" pos:end="255:51">+</operator> <operator pos:start="255:53" pos:end="255:53">(</operator><name pos:start="255:54" pos:end="255:59"><name pos:start="255:54" pos:end="255:56">src</name><index pos:start="255:57" pos:end="255:59">[<expr pos:start="255:58" pos:end="255:58"><literal type="number" pos:start="255:58" pos:end="255:58">1</literal></expr>]</index></name><operator pos:start="255:60" pos:end="255:61">&lt;&lt;</operator><literal type="number" pos:start="255:62" pos:end="255:62">8</literal><operator pos:start="255:63" pos:end="255:63">)</operator><operator pos:start="255:64" pos:end="255:64">)</operator></expr>;</expr_stmt> <expr_stmt pos:start="255:67" pos:end="255:73"><expr pos:start="255:67" pos:end="255:72"><name pos:start="255:67" pos:end="255:69">src</name><operator pos:start="255:70" pos:end="255:71">+=</operator><literal type="number" pos:start="255:72" pos:end="255:72">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="257:9" pos:end="261:9"><if pos:start="257:9" pos:end="261:9">if<condition pos:start="257:11" pos:end="257:14">(<expr pos:start="257:12" pos:end="257:13"><name pos:start="257:12" pos:end="257:13">st</name></expr>)</condition><block pos:start="257:15" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:77">

            <expr_stmt pos:start="259:13" pos:end="259:69"><expr pos:start="259:13" pos:end="259:68"><name pos:start="259:13" pos:end="259:24"><name pos:start="259:13" pos:end="259:13">c</name><operator pos:start="259:14" pos:end="259:15">-&gt;</operator><name pos:start="259:16" pos:end="259:21">status</name><index pos:start="259:22" pos:end="259:24">[<expr pos:start="259:23" pos:end="259:23"><literal type="number" pos:start="259:23" pos:end="259:23">1</literal></expr>]</index></name><operator pos:start="259:25" pos:end="259:25">.</operator><name pos:start="259:26" pos:end="259:35">step_index</name><operator pos:start="259:36" pos:end="259:36">=</operator> <operator pos:start="259:38" pos:end="259:38">(</operator><name pos:start="259:39" pos:end="259:45">int16_t</name><operator pos:start="259:46" pos:end="259:46">)</operator><operator pos:start="259:47" pos:end="259:47">(</operator><name pos:start="259:48" pos:end="259:53"><name pos:start="259:48" pos:end="259:50">src</name><index pos:start="259:51" pos:end="259:53">[<expr pos:start="259:52" pos:end="259:52"><literal type="number" pos:start="259:52" pos:end="259:52">0</literal></expr>]</index></name> <operator pos:start="259:55" pos:end="259:55">+</operator> <operator pos:start="259:57" pos:end="259:57">(</operator><name pos:start="259:58" pos:end="259:63"><name pos:start="259:58" pos:end="259:60">src</name><index pos:start="259:61" pos:end="259:63">[<expr pos:start="259:62" pos:end="259:62"><literal type="number" pos:start="259:62" pos:end="259:62">1</literal></expr>]</index></name><operator pos:start="259:64" pos:end="259:65">&lt;&lt;</operator><literal type="number" pos:start="259:66" pos:end="259:66">8</literal><operator pos:start="259:67" pos:end="259:67">)</operator><operator pos:start="259:68" pos:end="259:68">)</operator></expr>;</expr_stmt> <expr_stmt pos:start="259:71" pos:end="259:77"><expr pos:start="259:71" pos:end="259:76"><name pos:start="259:71" pos:end="259:73">src</name><operator pos:start="259:74" pos:end="259:75">+=</operator><literal type="number" pos:start="259:76" pos:end="259:76">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="263:9" pos:end="263:51"><if pos:start="263:9" pos:end="263:51">if <condition pos:start="263:12" pos:end="263:31">(<expr pos:start="263:13" pos:end="263:30"><name pos:start="263:13" pos:end="263:26"><name pos:start="263:13" pos:end="263:14">cs</name><operator pos:start="263:15" pos:end="263:16">-&gt;</operator><name pos:start="263:17" pos:end="263:26">step_index</name></name> <operator pos:start="263:28" pos:end="263:28">&lt;</operator> <literal type="number" pos:start="263:30" pos:end="263:30">0</literal></expr>)</condition><block type="pseudo" pos:start="263:33" pos:end="263:51"><block_content pos:start="263:33" pos:end="263:51"> <expr_stmt pos:start="263:33" pos:end="263:51"><expr pos:start="263:33" pos:end="263:50"><name pos:start="263:33" pos:end="263:46"><name pos:start="263:33" pos:end="263:34">cs</name><operator pos:start="263:35" pos:end="263:36">-&gt;</operator><name pos:start="263:37" pos:end="263:46">step_index</name></name> <operator pos:start="263:48" pos:end="263:48">=</operator> <literal type="number" pos:start="263:50" pos:end="263:50">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="265:9" pos:end="265:53"><if pos:start="265:9" pos:end="265:53">if <condition pos:start="265:12" pos:end="265:32">(<expr pos:start="265:13" pos:end="265:31"><name pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:14">cs</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:26">step_index</name></name> <operator pos:start="265:28" pos:end="265:28">&gt;</operator> <literal type="number" pos:start="265:30" pos:end="265:31">88</literal></expr>)</condition><block type="pseudo" pos:start="265:34" pos:end="265:53"><block_content pos:start="265:34" pos:end="265:53"> <expr_stmt pos:start="265:34" pos:end="265:53"><expr pos:start="265:34" pos:end="265:52"><name pos:start="265:34" pos:end="265:47"><name pos:start="265:34" pos:end="265:35">cs</name><operator pos:start="265:36" pos:end="265:37">-&gt;</operator><name pos:start="265:38" pos:end="265:47">step_index</name></name> <operator pos:start="265:49" pos:end="265:49">=</operator> <literal type="number" pos:start="265:51" pos:end="265:52">88</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="269:9" pos:end="269:40"><expr pos:start="269:9" pos:end="269:39"><name pos:start="269:9" pos:end="269:9">m</name><operator pos:start="269:10" pos:end="269:10">=</operator> <operator pos:start="269:12" pos:end="269:12">(</operator><name pos:start="269:13" pos:end="269:20">buf_size</name> <operator pos:start="269:22" pos:end="269:22">-</operator> <operator pos:start="269:24" pos:end="269:24">(</operator><name pos:start="269:25" pos:end="269:27">src</name> <operator pos:start="269:29" pos:end="269:29">-</operator> <name pos:start="269:31" pos:end="269:33">buf</name><operator pos:start="269:34" pos:end="269:34">)</operator><operator pos:start="269:35" pos:end="269:35">)</operator><operator pos:start="269:36" pos:end="269:37">&gt;&gt;</operator><name pos:start="269:38" pos:end="269:39">st</name></expr>;</expr_stmt>

        <for pos:start="271:9" pos:end="285:9">for<control pos:start="271:12" pos:end="271:26">(<init pos:start="271:13" pos:end="271:16"><expr pos:start="271:13" pos:end="271:15"><name pos:start="271:13" pos:end="271:13">i</name><operator pos:start="271:14" pos:end="271:14">=</operator><literal type="number" pos:start="271:15" pos:end="271:15">0</literal></expr>;</init> <condition pos:start="271:18" pos:end="271:21"><expr pos:start="271:18" pos:end="271:20"><name pos:start="271:18" pos:end="271:18">i</name><operator pos:start="271:19" pos:end="271:19">&lt;</operator><name pos:start="271:20" pos:end="271:20">m</name></expr>;</condition> <incr pos:start="271:23" pos:end="271:25"><expr pos:start="271:23" pos:end="271:25"><name pos:start="271:23" pos:end="271:23">i</name><operator pos:start="271:24" pos:end="271:25">++</operator></expr></incr>)</control> <block pos:start="271:28" pos:end="285:9">{<block_content pos:start="273:13" pos:end="283:86">

            <expr_stmt pos:start="273:13" pos:end="273:82"><expr pos:start="273:13" pos:end="273:81"><operator pos:start="273:13" pos:end="273:13">*</operator><name pos:start="273:14" pos:end="273:20">samples</name><operator pos:start="273:21" pos:end="273:22">++</operator> <operator pos:start="273:24" pos:end="273:24">=</operator> <call pos:start="273:26" pos:end="273:81"><name pos:start="273:26" pos:end="273:48">adpcm_ima_expand_nibble</name><argument_list pos:start="273:49" pos:end="273:81">(<argument pos:start="273:50" pos:end="273:62"><expr pos:start="273:50" pos:end="273:62"><operator pos:start="273:50" pos:end="273:50">&amp;</operator><name pos:start="273:51" pos:end="273:62"><name pos:start="273:51" pos:end="273:51">c</name><operator pos:start="273:52" pos:end="273:53">-&gt;</operator><name pos:start="273:54" pos:end="273:59">status</name><index pos:start="273:60" pos:end="273:62">[<expr pos:start="273:61" pos:end="273:61"><literal type="number" pos:start="273:61" pos:end="273:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="273:65" pos:end="273:77"><expr pos:start="273:65" pos:end="273:77"><name pos:start="273:65" pos:end="273:70"><name pos:start="273:65" pos:end="273:67">src</name><index pos:start="273:68" pos:end="273:70">[<expr pos:start="273:69" pos:end="273:69"><name pos:start="273:69" pos:end="273:69">i</name></expr>]</index></name> <operator pos:start="273:72" pos:end="273:72">&amp;</operator> <literal type="number" pos:start="273:74" pos:end="273:77">0x0F</literal></expr></argument>, <argument pos:start="273:80" pos:end="273:80"><expr pos:start="273:80" pos:end="273:80"><literal type="number" pos:start="273:80" pos:end="273:80">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="275:13" pos:end="277:88"><if pos:start="275:13" pos:end="277:88">if <condition pos:start="275:16" pos:end="275:19">(<expr pos:start="275:17" pos:end="275:18"><name pos:start="275:17" pos:end="275:18">st</name></expr>)</condition><block type="pseudo" pos:start="277:17" pos:end="277:88"><block_content pos:start="277:17" pos:end="277:88">

                <expr_stmt pos:start="277:17" pos:end="277:88"><expr pos:start="277:17" pos:end="277:87"><operator pos:start="277:17" pos:end="277:17">*</operator><name pos:start="277:18" pos:end="277:24">samples</name><operator pos:start="277:25" pos:end="277:26">++</operator> <operator pos:start="277:28" pos:end="277:28">=</operator> <call pos:start="277:30" pos:end="277:87"><name pos:start="277:30" pos:end="277:52">adpcm_ima_expand_nibble</name><argument_list pos:start="277:53" pos:end="277:87">(<argument pos:start="277:54" pos:end="277:66"><expr pos:start="277:54" pos:end="277:66"><operator pos:start="277:54" pos:end="277:54">&amp;</operator><name pos:start="277:55" pos:end="277:66"><name pos:start="277:55" pos:end="277:55">c</name><operator pos:start="277:56" pos:end="277:57">-&gt;</operator><name pos:start="277:58" pos:end="277:63">status</name><index pos:start="277:64" pos:end="277:66">[<expr pos:start="277:65" pos:end="277:65"><literal type="number" pos:start="277:65" pos:end="277:65">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="277:69" pos:end="277:83"><expr pos:start="277:69" pos:end="277:83"><name pos:start="277:69" pos:end="277:76"><name pos:start="277:69" pos:end="277:71">src</name><index pos:start="277:72" pos:end="277:76">[<expr pos:start="277:73" pos:end="277:75"><name pos:start="277:73" pos:end="277:73">i</name><operator pos:start="277:74" pos:end="277:74">+</operator><name pos:start="277:75" pos:end="277:75">m</name></expr>]</index></name> <operator pos:start="277:78" pos:end="277:78">&amp;</operator> <literal type="number" pos:start="277:80" pos:end="277:83">0x0F</literal></expr></argument>, <argument pos:start="277:86" pos:end="277:86"><expr pos:start="277:86" pos:end="277:86"><literal type="number" pos:start="277:86" pos:end="277:86">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:80"><expr pos:start="279:13" pos:end="279:79"><operator pos:start="279:13" pos:end="279:13">*</operator><name pos:start="279:14" pos:end="279:20">samples</name><operator pos:start="279:21" pos:end="279:22">++</operator> <operator pos:start="279:24" pos:end="279:24">=</operator> <call pos:start="279:26" pos:end="279:79"><name pos:start="279:26" pos:end="279:48">adpcm_ima_expand_nibble</name><argument_list pos:start="279:49" pos:end="279:79">(<argument pos:start="279:50" pos:end="279:62"><expr pos:start="279:50" pos:end="279:62"><operator pos:start="279:50" pos:end="279:50">&amp;</operator><name pos:start="279:51" pos:end="279:62"><name pos:start="279:51" pos:end="279:51">c</name><operator pos:start="279:52" pos:end="279:53">-&gt;</operator><name pos:start="279:54" pos:end="279:59">status</name><index pos:start="279:60" pos:end="279:62">[<expr pos:start="279:61" pos:end="279:61"><literal type="number" pos:start="279:61" pos:end="279:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="279:65" pos:end="279:75"><expr pos:start="279:65" pos:end="279:75"><name pos:start="279:65" pos:end="279:70"><name pos:start="279:65" pos:end="279:67">src</name><index pos:start="279:68" pos:end="279:70">[<expr pos:start="279:69" pos:end="279:69"><name pos:start="279:69" pos:end="279:69">i</name></expr>]</index></name> <operator pos:start="279:72" pos:end="279:73">&gt;&gt;</operator> <literal type="number" pos:start="279:75" pos:end="279:75">4</literal></expr></argument>, <argument pos:start="279:78" pos:end="279:78"><expr pos:start="279:78" pos:end="279:78"><literal type="number" pos:start="279:78" pos:end="279:78">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="281:13" pos:end="283:86"><if pos:start="281:13" pos:end="283:86">if <condition pos:start="281:16" pos:end="281:19">(<expr pos:start="281:17" pos:end="281:18"><name pos:start="281:17" pos:end="281:18">st</name></expr>)</condition><block type="pseudo" pos:start="283:17" pos:end="283:86"><block_content pos:start="283:17" pos:end="283:86">

                <expr_stmt pos:start="283:17" pos:end="283:86"><expr pos:start="283:17" pos:end="283:85"><operator pos:start="283:17" pos:end="283:17">*</operator><name pos:start="283:18" pos:end="283:24">samples</name><operator pos:start="283:25" pos:end="283:26">++</operator> <operator pos:start="283:28" pos:end="283:28">=</operator> <call pos:start="283:30" pos:end="283:85"><name pos:start="283:30" pos:end="283:52">adpcm_ima_expand_nibble</name><argument_list pos:start="283:53" pos:end="283:85">(<argument pos:start="283:54" pos:end="283:66"><expr pos:start="283:54" pos:end="283:66"><operator pos:start="283:54" pos:end="283:54">&amp;</operator><name pos:start="283:55" pos:end="283:66"><name pos:start="283:55" pos:end="283:55">c</name><operator pos:start="283:56" pos:end="283:57">-&gt;</operator><name pos:start="283:58" pos:end="283:63">status</name><index pos:start="283:64" pos:end="283:66">[<expr pos:start="283:65" pos:end="283:65"><literal type="number" pos:start="283:65" pos:end="283:65">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="283:69" pos:end="283:81"><expr pos:start="283:69" pos:end="283:81"><name pos:start="283:69" pos:end="283:76"><name pos:start="283:69" pos:end="283:71">src</name><index pos:start="283:72" pos:end="283:76">[<expr pos:start="283:73" pos:end="283:75"><name pos:start="283:73" pos:end="283:73">i</name><operator pos:start="283:74" pos:end="283:74">+</operator><name pos:start="283:75" pos:end="283:75">m</name></expr>]</index></name> <operator pos:start="283:78" pos:end="283:79">&gt;&gt;</operator> <literal type="number" pos:start="283:81" pos:end="283:81">4</literal></expr></argument>, <argument pos:start="283:84" pos:end="283:84"><expr pos:start="283:84" pos:end="283:84"><literal type="number" pos:start="283:84" pos:end="283:84">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="289:9" pos:end="289:21"><expr pos:start="289:9" pos:end="289:20"><name pos:start="289:9" pos:end="289:11">src</name> <operator pos:start="289:13" pos:end="289:14">+=</operator> <name pos:start="289:16" pos:end="289:16">m</name><operator pos:start="289:17" pos:end="289:18">&lt;&lt;</operator><name pos:start="289:19" pos:end="289:20">st</name></expr>;</expr_stmt>



        <break pos:start="293:9" pos:end="293:14">break;</break>

    <case pos:start="295:5" pos:end="295:27">case <expr pos:start="295:10" pos:end="295:26"><name pos:start="295:10" pos:end="295:26">CODEC_ID_ADPCM_MS</name></expr>:</case>

        <if_stmt pos:start="297:9" pos:end="299:42"><if pos:start="297:9" pos:end="299:42">if <condition pos:start="297:12" pos:end="297:69">(<expr pos:start="297:13" pos:end="297:68"><name pos:start="297:13" pos:end="297:30"><name pos:start="297:13" pos:end="297:17">avctx</name><operator pos:start="297:18" pos:end="297:19">-&gt;</operator><name pos:start="297:20" pos:end="297:30">block_align</name></name> <operator pos:start="297:32" pos:end="297:33">!=</operator> <literal type="number" pos:start="297:35" pos:end="297:35">0</literal> <operator pos:start="297:37" pos:end="297:38">&amp;&amp;</operator> <name pos:start="297:40" pos:end="297:47">buf_size</name> <operator pos:start="297:49" pos:end="297:49">&gt;</operator> <name pos:start="297:51" pos:end="297:68"><name pos:start="297:51" pos:end="297:55">avctx</name><operator pos:start="297:56" pos:end="297:57">-&gt;</operator><name pos:start="297:58" pos:end="297:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="299:13" pos:end="299:42"><block_content pos:start="299:13" pos:end="299:42">

            <expr_stmt pos:start="299:13" pos:end="299:42"><expr pos:start="299:13" pos:end="299:41"><name pos:start="299:13" pos:end="299:20">buf_size</name> <operator pos:start="299:22" pos:end="299:22">=</operator> <name pos:start="299:24" pos:end="299:41"><name pos:start="299:24" pos:end="299:28">avctx</name><operator pos:start="299:29" pos:end="299:30">-&gt;</operator><name pos:start="299:31" pos:end="299:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:43"><expr pos:start="301:9" pos:end="301:42"><name pos:start="301:9" pos:end="301:9">n</name> <operator pos:start="301:11" pos:end="301:11">=</operator> <name pos:start="301:13" pos:end="301:20">buf_size</name> <operator pos:start="301:22" pos:end="301:22">-</operator> <literal type="number" pos:start="301:24" pos:end="301:24">7</literal> <operator pos:start="301:26" pos:end="301:26">*</operator> <name pos:start="301:28" pos:end="301:42"><name pos:start="301:28" pos:end="301:32">avctx</name><operator pos:start="301:33" pos:end="301:34">-&gt;</operator><name pos:start="301:35" pos:end="301:42">channels</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="303:9" pos:end="305:22"><if pos:start="303:9" pos:end="305:22">if <condition pos:start="303:12" pos:end="303:18">(<expr pos:start="303:13" pos:end="303:17"><name pos:start="303:13" pos:end="303:13">n</name> <operator pos:start="303:15" pos:end="303:15">&lt;</operator> <literal type="number" pos:start="303:17" pos:end="303:17">0</literal></expr>)</condition><block type="pseudo" pos:start="305:13" pos:end="305:22"><block_content pos:start="305:13" pos:end="305:22">

            <return pos:start="305:13" pos:end="305:22">return <expr pos:start="305:20" pos:end="305:21"><operator pos:start="305:20" pos:end="305:20">-</operator><literal type="number" pos:start="305:21" pos:end="305:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:51"><expr pos:start="307:9" pos:end="307:50"><name pos:start="307:9" pos:end="307:26"><name pos:start="307:9" pos:end="307:23">block_predictor</name><index pos:start="307:24" pos:end="307:26">[<expr pos:start="307:25" pos:end="307:25"><literal type="number" pos:start="307:25" pos:end="307:25">0</literal></expr>]</index></name> <operator pos:start="307:28" pos:end="307:28">=</operator> <call pos:start="307:30" pos:end="307:50"><name pos:start="307:30" pos:end="307:36">av_clip</name><argument_list pos:start="307:37" pos:end="307:50">(<argument pos:start="307:38" pos:end="307:43"><expr pos:start="307:38" pos:end="307:43"><operator pos:start="307:38" pos:end="307:38">*</operator><name pos:start="307:39" pos:end="307:41">src</name><operator pos:start="307:42" pos:end="307:43">++</operator></expr></argument>, <argument pos:start="307:46" pos:end="307:46"><expr pos:start="307:46" pos:end="307:46"><literal type="number" pos:start="307:46" pos:end="307:46">0</literal></expr></argument>, <argument pos:start="307:49" pos:end="307:49"><expr pos:start="307:49" pos:end="307:49"><literal type="number" pos:start="307:49" pos:end="307:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:31"><expr pos:start="309:9" pos:end="309:30"><name pos:start="309:9" pos:end="309:26"><name pos:start="309:9" pos:end="309:23">block_predictor</name><index pos:start="309:24" pos:end="309:26">[<expr pos:start="309:25" pos:end="309:25"><literal type="number" pos:start="309:25" pos:end="309:25">1</literal></expr>]</index></name> <operator pos:start="309:28" pos:end="309:28">=</operator> <literal type="number" pos:start="309:30" pos:end="309:30">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="311:9" pos:end="313:55"><if pos:start="311:9" pos:end="313:55">if <condition pos:start="311:12" pos:end="311:15">(<expr pos:start="311:13" pos:end="311:14"><name pos:start="311:13" pos:end="311:14">st</name></expr>)</condition><block type="pseudo" pos:start="313:13" pos:end="313:55"><block_content pos:start="313:13" pos:end="313:55">

            <expr_stmt pos:start="313:13" pos:end="313:55"><expr pos:start="313:13" pos:end="313:54"><name pos:start="313:13" pos:end="313:30"><name pos:start="313:13" pos:end="313:27">block_predictor</name><index pos:start="313:28" pos:end="313:30">[<expr pos:start="313:29" pos:end="313:29"><literal type="number" pos:start="313:29" pos:end="313:29">1</literal></expr>]</index></name> <operator pos:start="313:32" pos:end="313:32">=</operator> <call pos:start="313:34" pos:end="313:54"><name pos:start="313:34" pos:end="313:40">av_clip</name><argument_list pos:start="313:41" pos:end="313:54">(<argument pos:start="313:42" pos:end="313:47"><expr pos:start="313:42" pos:end="313:47"><operator pos:start="313:42" pos:end="313:42">*</operator><name pos:start="313:43" pos:end="313:45">src</name><operator pos:start="313:46" pos:end="313:47">++</operator></expr></argument>, <argument pos:start="313:50" pos:end="313:50"><expr pos:start="313:50" pos:end="313:50"><literal type="number" pos:start="313:50" pos:end="313:50">0</literal></expr></argument>, <argument pos:start="313:53" pos:end="313:53"><expr pos:start="313:53" pos:end="313:53"><literal type="number" pos:start="313:53" pos:end="313:53">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:82"><expr pos:start="315:9" pos:end="315:81"><name pos:start="315:9" pos:end="315:20"><name pos:start="315:9" pos:end="315:9">c</name><operator pos:start="315:10" pos:end="315:11">-&gt;</operator><name pos:start="315:12" pos:end="315:17">status</name><index pos:start="315:18" pos:end="315:20">[<expr pos:start="315:19" pos:end="315:19"><literal type="number" pos:start="315:19" pos:end="315:19">0</literal></expr>]</index></name><operator pos:start="315:21" pos:end="315:21">.</operator><name pos:start="315:22" pos:end="315:27">idelta</name> <operator pos:start="315:29" pos:end="315:29">=</operator> <operator pos:start="315:31" pos:end="315:31">(</operator><name pos:start="315:32" pos:end="315:38">int16_t</name><operator pos:start="315:39" pos:end="315:39">)</operator><operator pos:start="315:40" pos:end="315:40">(</operator><operator pos:start="315:41" pos:end="315:41">(</operator><operator pos:start="315:42" pos:end="315:42">*</operator><name pos:start="315:43" pos:end="315:45">src</name> <operator pos:start="315:47" pos:end="315:47">&amp;</operator> <literal type="number" pos:start="315:49" pos:end="315:52">0xFF</literal><operator pos:start="315:53" pos:end="315:53">)</operator> <operator pos:start="315:55" pos:end="315:55">|</operator> <operator pos:start="315:57" pos:end="315:57">(</operator><operator pos:start="315:58" pos:end="315:58">(</operator><name pos:start="315:59" pos:end="315:64"><name pos:start="315:59" pos:end="315:61">src</name><index pos:start="315:62" pos:end="315:64">[<expr pos:start="315:63" pos:end="315:63"><literal type="number" pos:start="315:63" pos:end="315:63">1</literal></expr>]</index></name> <operator pos:start="315:66" pos:end="315:67">&lt;&lt;</operator> <literal type="number" pos:start="315:69" pos:end="315:69">8</literal><operator pos:start="315:70" pos:end="315:70">)</operator> <operator pos:start="315:72" pos:end="315:72">&amp;</operator> <literal type="number" pos:start="315:74" pos:end="315:79">0xFF00</literal><operator pos:start="315:80" pos:end="315:80">)</operator><operator pos:start="315:81" pos:end="315:81">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:15"><expr pos:start="317:9" pos:end="317:14"><name pos:start="317:9" pos:end="317:11">src</name><operator pos:start="317:12" pos:end="317:13">+=</operator><literal type="number" pos:start="317:14" pos:end="317:14">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="319:9" pos:end="325:9"><if pos:start="319:9" pos:end="325:9">if <condition pos:start="319:12" pos:end="319:15">(<expr pos:start="319:13" pos:end="319:14"><name pos:start="319:13" pos:end="319:14">st</name></expr>)</condition><block pos:start="319:16" pos:end="325:9">{<block_content pos:start="321:13" pos:end="323:19">

            <expr_stmt pos:start="321:13" pos:end="321:86"><expr pos:start="321:13" pos:end="321:85"><name pos:start="321:13" pos:end="321:24"><name pos:start="321:13" pos:end="321:13">c</name><operator pos:start="321:14" pos:end="321:15">-&gt;</operator><name pos:start="321:16" pos:end="321:21">status</name><index pos:start="321:22" pos:end="321:24">[<expr pos:start="321:23" pos:end="321:23"><literal type="number" pos:start="321:23" pos:end="321:23">1</literal></expr>]</index></name><operator pos:start="321:25" pos:end="321:25">.</operator><name pos:start="321:26" pos:end="321:31">idelta</name> <operator pos:start="321:33" pos:end="321:33">=</operator> <operator pos:start="321:35" pos:end="321:35">(</operator><name pos:start="321:36" pos:end="321:42">int16_t</name><operator pos:start="321:43" pos:end="321:43">)</operator><operator pos:start="321:44" pos:end="321:44">(</operator><operator pos:start="321:45" pos:end="321:45">(</operator><operator pos:start="321:46" pos:end="321:46">*</operator><name pos:start="321:47" pos:end="321:49">src</name> <operator pos:start="321:51" pos:end="321:51">&amp;</operator> <literal type="number" pos:start="321:53" pos:end="321:56">0xFF</literal><operator pos:start="321:57" pos:end="321:57">)</operator> <operator pos:start="321:59" pos:end="321:59">|</operator> <operator pos:start="321:61" pos:end="321:61">(</operator><operator pos:start="321:62" pos:end="321:62">(</operator><name pos:start="321:63" pos:end="321:68"><name pos:start="321:63" pos:end="321:65">src</name><index pos:start="321:66" pos:end="321:68">[<expr pos:start="321:67" pos:end="321:67"><literal type="number" pos:start="321:67" pos:end="321:67">1</literal></expr>]</index></name> <operator pos:start="321:70" pos:end="321:71">&lt;&lt;</operator> <literal type="number" pos:start="321:73" pos:end="321:73">8</literal><operator pos:start="321:74" pos:end="321:74">)</operator> <operator pos:start="321:76" pos:end="321:76">&amp;</operator> <literal type="number" pos:start="321:78" pos:end="321:83">0xFF00</literal><operator pos:start="321:84" pos:end="321:84">)</operator><operator pos:start="321:85" pos:end="321:85">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:19"><expr pos:start="323:13" pos:end="323:18"><name pos:start="323:13" pos:end="323:15">src</name><operator pos:start="323:16" pos:end="323:17">+=</operator><literal type="number" pos:start="323:18" pos:end="323:18">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:62"><expr pos:start="327:9" pos:end="327:61"><name pos:start="327:9" pos:end="327:20"><name pos:start="327:9" pos:end="327:9">c</name><operator pos:start="327:10" pos:end="327:11">-&gt;</operator><name pos:start="327:12" pos:end="327:17">status</name><index pos:start="327:18" pos:end="327:20">[<expr pos:start="327:19" pos:end="327:19"><literal type="number" pos:start="327:19" pos:end="327:19">0</literal></expr>]</index></name><operator pos:start="327:21" pos:end="327:21">.</operator><name pos:start="327:22" pos:end="327:27">coeff1</name> <operator pos:start="327:29" pos:end="327:29">=</operator> <name pos:start="327:31" pos:end="327:61"><name pos:start="327:31" pos:end="327:41">AdaptCoeff1</name><index pos:start="327:42" pos:end="327:61">[<expr pos:start="327:43" pos:end="327:60"><name pos:start="327:43" pos:end="327:60"><name pos:start="327:43" pos:end="327:57">block_predictor</name><index pos:start="327:58" pos:end="327:60">[<expr pos:start="327:59" pos:end="327:59"><literal type="number" pos:start="327:59" pos:end="327:59">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:62"><expr pos:start="329:9" pos:end="329:61"><name pos:start="329:9" pos:end="329:20"><name pos:start="329:9" pos:end="329:9">c</name><operator pos:start="329:10" pos:end="329:11">-&gt;</operator><name pos:start="329:12" pos:end="329:17">status</name><index pos:start="329:18" pos:end="329:20">[<expr pos:start="329:19" pos:end="329:19"><literal type="number" pos:start="329:19" pos:end="329:19">0</literal></expr>]</index></name><operator pos:start="329:21" pos:end="329:21">.</operator><name pos:start="329:22" pos:end="329:27">coeff2</name> <operator pos:start="329:29" pos:end="329:29">=</operator> <name pos:start="329:31" pos:end="329:61"><name pos:start="329:31" pos:end="329:41">AdaptCoeff2</name><index pos:start="329:42" pos:end="329:61">[<expr pos:start="329:43" pos:end="329:60"><name pos:start="329:43" pos:end="329:60"><name pos:start="329:43" pos:end="329:57">block_predictor</name><index pos:start="329:58" pos:end="329:60">[<expr pos:start="329:59" pos:end="329:59"><literal type="number" pos:start="329:59" pos:end="329:59">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:62"><expr pos:start="331:9" pos:end="331:61"><name pos:start="331:9" pos:end="331:20"><name pos:start="331:9" pos:end="331:9">c</name><operator pos:start="331:10" pos:end="331:11">-&gt;</operator><name pos:start="331:12" pos:end="331:17">status</name><index pos:start="331:18" pos:end="331:20">[<expr pos:start="331:19" pos:end="331:19"><literal type="number" pos:start="331:19" pos:end="331:19">1</literal></expr>]</index></name><operator pos:start="331:21" pos:end="331:21">.</operator><name pos:start="331:22" pos:end="331:27">coeff1</name> <operator pos:start="331:29" pos:end="331:29">=</operator> <name pos:start="331:31" pos:end="331:61"><name pos:start="331:31" pos:end="331:41">AdaptCoeff1</name><index pos:start="331:42" pos:end="331:61">[<expr pos:start="331:43" pos:end="331:60"><name pos:start="331:43" pos:end="331:60"><name pos:start="331:43" pos:end="331:57">block_predictor</name><index pos:start="331:58" pos:end="331:60">[<expr pos:start="331:59" pos:end="331:59"><literal type="number" pos:start="331:59" pos:end="331:59">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:62"><expr pos:start="333:9" pos:end="333:61"><name pos:start="333:9" pos:end="333:20"><name pos:start="333:9" pos:end="333:9">c</name><operator pos:start="333:10" pos:end="333:11">-&gt;</operator><name pos:start="333:12" pos:end="333:17">status</name><index pos:start="333:18" pos:end="333:20">[<expr pos:start="333:19" pos:end="333:19"><literal type="number" pos:start="333:19" pos:end="333:19">1</literal></expr>]</index></name><operator pos:start="333:21" pos:end="333:21">.</operator><name pos:start="333:22" pos:end="333:27">coeff2</name> <operator pos:start="333:29" pos:end="333:29">=</operator> <name pos:start="333:31" pos:end="333:61"><name pos:start="333:31" pos:end="333:41">AdaptCoeff2</name><index pos:start="333:42" pos:end="333:61">[<expr pos:start="333:43" pos:end="333:60"><name pos:start="333:43" pos:end="333:60"><name pos:start="333:43" pos:end="333:57">block_predictor</name><index pos:start="333:58" pos:end="333:60">[<expr pos:start="333:59" pos:end="333:59"><literal type="number" pos:start="333:59" pos:end="333:59">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="337:9" pos:end="337:74"><expr pos:start="337:9" pos:end="337:73"><name pos:start="337:9" pos:end="337:20"><name pos:start="337:9" pos:end="337:9">c</name><operator pos:start="337:10" pos:end="337:11">-&gt;</operator><name pos:start="337:12" pos:end="337:17">status</name><index pos:start="337:18" pos:end="337:20">[<expr pos:start="337:19" pos:end="337:19"><literal type="number" pos:start="337:19" pos:end="337:19">0</literal></expr>]</index></name><operator pos:start="337:21" pos:end="337:21">.</operator><name pos:start="337:22" pos:end="337:28">sample1</name> <operator pos:start="337:30" pos:end="337:30">=</operator> <operator pos:start="337:32" pos:end="337:32">(</operator><operator pos:start="337:33" pos:end="337:33">(</operator><operator pos:start="337:34" pos:end="337:34">*</operator><name pos:start="337:35" pos:end="337:37">src</name> <operator pos:start="337:39" pos:end="337:39">&amp;</operator> <literal type="number" pos:start="337:41" pos:end="337:44">0xFF</literal><operator pos:start="337:45" pos:end="337:45">)</operator> <operator pos:start="337:47" pos:end="337:47">|</operator> <operator pos:start="337:49" pos:end="337:49">(</operator><operator pos:start="337:50" pos:end="337:50">(</operator><name pos:start="337:51" pos:end="337:56"><name pos:start="337:51" pos:end="337:53">src</name><index pos:start="337:54" pos:end="337:56">[<expr pos:start="337:55" pos:end="337:55"><literal type="number" pos:start="337:55" pos:end="337:55">1</literal></expr>]</index></name> <operator pos:start="337:58" pos:end="337:59">&lt;&lt;</operator> <literal type="number" pos:start="337:61" pos:end="337:61">8</literal><operator pos:start="337:62" pos:end="337:62">)</operator> <operator pos:start="337:64" pos:end="337:64">&amp;</operator> <literal type="number" pos:start="337:66" pos:end="337:71">0xFF00</literal><operator pos:start="337:72" pos:end="337:72">)</operator><operator pos:start="337:73" pos:end="337:73">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:15"><expr pos:start="339:9" pos:end="339:14"><name pos:start="339:9" pos:end="339:11">src</name><operator pos:start="339:12" pos:end="339:13">+=</operator><literal type="number" pos:start="339:14" pos:end="339:14">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="341:9" pos:end="341:82"><if pos:start="341:9" pos:end="341:82">if <condition pos:start="341:12" pos:end="341:15">(<expr pos:start="341:13" pos:end="341:14"><name pos:start="341:13" pos:end="341:14">st</name></expr>)</condition><block type="pseudo" pos:start="341:17" pos:end="341:82"><block_content pos:start="341:17" pos:end="341:82"> <expr_stmt pos:start="341:17" pos:end="341:82"><expr pos:start="341:17" pos:end="341:81"><name pos:start="341:17" pos:end="341:28"><name pos:start="341:17" pos:end="341:17">c</name><operator pos:start="341:18" pos:end="341:19">-&gt;</operator><name pos:start="341:20" pos:end="341:25">status</name><index pos:start="341:26" pos:end="341:28">[<expr pos:start="341:27" pos:end="341:27"><literal type="number" pos:start="341:27" pos:end="341:27">1</literal></expr>]</index></name><operator pos:start="341:29" pos:end="341:29">.</operator><name pos:start="341:30" pos:end="341:36">sample1</name> <operator pos:start="341:38" pos:end="341:38">=</operator> <operator pos:start="341:40" pos:end="341:40">(</operator><operator pos:start="341:41" pos:end="341:41">(</operator><operator pos:start="341:42" pos:end="341:42">*</operator><name pos:start="341:43" pos:end="341:45">src</name> <operator pos:start="341:47" pos:end="341:47">&amp;</operator> <literal type="number" pos:start="341:49" pos:end="341:52">0xFF</literal><operator pos:start="341:53" pos:end="341:53">)</operator> <operator pos:start="341:55" pos:end="341:55">|</operator> <operator pos:start="341:57" pos:end="341:57">(</operator><operator pos:start="341:58" pos:end="341:58">(</operator><name pos:start="341:59" pos:end="341:64"><name pos:start="341:59" pos:end="341:61">src</name><index pos:start="341:62" pos:end="341:64">[<expr pos:start="341:63" pos:end="341:63"><literal type="number" pos:start="341:63" pos:end="341:63">1</literal></expr>]</index></name> <operator pos:start="341:66" pos:end="341:67">&lt;&lt;</operator> <literal type="number" pos:start="341:69" pos:end="341:69">8</literal><operator pos:start="341:70" pos:end="341:70">)</operator> <operator pos:start="341:72" pos:end="341:72">&amp;</operator> <literal type="number" pos:start="341:74" pos:end="341:79">0xFF00</literal><operator pos:start="341:80" pos:end="341:80">)</operator><operator pos:start="341:81" pos:end="341:81">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="343:9" pos:end="343:23"><if pos:start="343:9" pos:end="343:23">if <condition pos:start="343:12" pos:end="343:15">(<expr pos:start="343:13" pos:end="343:14"><name pos:start="343:13" pos:end="343:14">st</name></expr>)</condition><block type="pseudo" pos:start="343:17" pos:end="343:23"><block_content pos:start="343:17" pos:end="343:23"> <expr_stmt pos:start="343:17" pos:end="343:23"><expr pos:start="343:17" pos:end="343:22"><name pos:start="343:17" pos:end="343:19">src</name><operator pos:start="343:20" pos:end="343:21">+=</operator><literal type="number" pos:start="343:22" pos:end="343:22">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:74"><expr pos:start="345:9" pos:end="345:73"><name pos:start="345:9" pos:end="345:20"><name pos:start="345:9" pos:end="345:9">c</name><operator pos:start="345:10" pos:end="345:11">-&gt;</operator><name pos:start="345:12" pos:end="345:17">status</name><index pos:start="345:18" pos:end="345:20">[<expr pos:start="345:19" pos:end="345:19"><literal type="number" pos:start="345:19" pos:end="345:19">0</literal></expr>]</index></name><operator pos:start="345:21" pos:end="345:21">.</operator><name pos:start="345:22" pos:end="345:28">sample2</name> <operator pos:start="345:30" pos:end="345:30">=</operator> <operator pos:start="345:32" pos:end="345:32">(</operator><operator pos:start="345:33" pos:end="345:33">(</operator><operator pos:start="345:34" pos:end="345:34">*</operator><name pos:start="345:35" pos:end="345:37">src</name> <operator pos:start="345:39" pos:end="345:39">&amp;</operator> <literal type="number" pos:start="345:41" pos:end="345:44">0xFF</literal><operator pos:start="345:45" pos:end="345:45">)</operator> <operator pos:start="345:47" pos:end="345:47">|</operator> <operator pos:start="345:49" pos:end="345:49">(</operator><operator pos:start="345:50" pos:end="345:50">(</operator><name pos:start="345:51" pos:end="345:56"><name pos:start="345:51" pos:end="345:53">src</name><index pos:start="345:54" pos:end="345:56">[<expr pos:start="345:55" pos:end="345:55"><literal type="number" pos:start="345:55" pos:end="345:55">1</literal></expr>]</index></name> <operator pos:start="345:58" pos:end="345:59">&lt;&lt;</operator> <literal type="number" pos:start="345:61" pos:end="345:61">8</literal><operator pos:start="345:62" pos:end="345:62">)</operator> <operator pos:start="345:64" pos:end="345:64">&amp;</operator> <literal type="number" pos:start="345:66" pos:end="345:71">0xFF00</literal><operator pos:start="345:72" pos:end="345:72">)</operator><operator pos:start="345:73" pos:end="345:73">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:15"><expr pos:start="347:9" pos:end="347:14"><name pos:start="347:9" pos:end="347:11">src</name><operator pos:start="347:12" pos:end="347:13">+=</operator><literal type="number" pos:start="347:14" pos:end="347:14">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="349:9" pos:end="349:82"><if pos:start="349:9" pos:end="349:82">if <condition pos:start="349:12" pos:end="349:15">(<expr pos:start="349:13" pos:end="349:14"><name pos:start="349:13" pos:end="349:14">st</name></expr>)</condition><block type="pseudo" pos:start="349:17" pos:end="349:82"><block_content pos:start="349:17" pos:end="349:82"> <expr_stmt pos:start="349:17" pos:end="349:82"><expr pos:start="349:17" pos:end="349:81"><name pos:start="349:17" pos:end="349:28"><name pos:start="349:17" pos:end="349:17">c</name><operator pos:start="349:18" pos:end="349:19">-&gt;</operator><name pos:start="349:20" pos:end="349:25">status</name><index pos:start="349:26" pos:end="349:28">[<expr pos:start="349:27" pos:end="349:27"><literal type="number" pos:start="349:27" pos:end="349:27">1</literal></expr>]</index></name><operator pos:start="349:29" pos:end="349:29">.</operator><name pos:start="349:30" pos:end="349:36">sample2</name> <operator pos:start="349:38" pos:end="349:38">=</operator> <operator pos:start="349:40" pos:end="349:40">(</operator><operator pos:start="349:41" pos:end="349:41">(</operator><operator pos:start="349:42" pos:end="349:42">*</operator><name pos:start="349:43" pos:end="349:45">src</name> <operator pos:start="349:47" pos:end="349:47">&amp;</operator> <literal type="number" pos:start="349:49" pos:end="349:52">0xFF</literal><operator pos:start="349:53" pos:end="349:53">)</operator> <operator pos:start="349:55" pos:end="349:55">|</operator> <operator pos:start="349:57" pos:end="349:57">(</operator><operator pos:start="349:58" pos:end="349:58">(</operator><name pos:start="349:59" pos:end="349:64"><name pos:start="349:59" pos:end="349:61">src</name><index pos:start="349:62" pos:end="349:64">[<expr pos:start="349:63" pos:end="349:63"><literal type="number" pos:start="349:63" pos:end="349:63">1</literal></expr>]</index></name> <operator pos:start="349:66" pos:end="349:67">&lt;&lt;</operator> <literal type="number" pos:start="349:69" pos:end="349:69">8</literal><operator pos:start="349:70" pos:end="349:70">)</operator> <operator pos:start="349:72" pos:end="349:72">&amp;</operator> <literal type="number" pos:start="349:74" pos:end="349:79">0xFF00</literal><operator pos:start="349:80" pos:end="349:80">)</operator><operator pos:start="349:81" pos:end="349:81">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="351:9" pos:end="351:23"><if pos:start="351:9" pos:end="351:23">if <condition pos:start="351:12" pos:end="351:15">(<expr pos:start="351:13" pos:end="351:14"><name pos:start="351:13" pos:end="351:14">st</name></expr>)</condition><block type="pseudo" pos:start="351:17" pos:end="351:23"><block_content pos:start="351:17" pos:end="351:23"> <expr_stmt pos:start="351:17" pos:end="351:23"><expr pos:start="351:17" pos:end="351:22"><name pos:start="351:17" pos:end="351:19">src</name><operator pos:start="351:20" pos:end="351:21">+=</operator><literal type="number" pos:start="351:22" pos:end="351:22">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="355:9" pos:end="355:42"><expr pos:start="355:9" pos:end="355:41"><operator pos:start="355:9" pos:end="355:9">*</operator><name pos:start="355:10" pos:end="355:16">samples</name><operator pos:start="355:17" pos:end="355:18">++</operator> <operator pos:start="355:20" pos:end="355:20">=</operator> <name pos:start="355:22" pos:end="355:33"><name pos:start="355:22" pos:end="355:22">c</name><operator pos:start="355:23" pos:end="355:24">-&gt;</operator><name pos:start="355:25" pos:end="355:30">status</name><index pos:start="355:31" pos:end="355:33">[<expr pos:start="355:32" pos:end="355:32"><literal type="number" pos:start="355:32" pos:end="355:32">0</literal></expr>]</index></name><operator pos:start="355:34" pos:end="355:34">.</operator><name pos:start="355:35" pos:end="355:41">sample1</name></expr>;</expr_stmt>

        <if_stmt pos:start="357:9" pos:end="357:50"><if pos:start="357:9" pos:end="357:50">if <condition pos:start="357:12" pos:end="357:15">(<expr pos:start="357:13" pos:end="357:14"><name pos:start="357:13" pos:end="357:14">st</name></expr>)</condition><block type="pseudo" pos:start="357:17" pos:end="357:50"><block_content pos:start="357:17" pos:end="357:50"> <expr_stmt pos:start="357:17" pos:end="357:50"><expr pos:start="357:17" pos:end="357:49"><operator pos:start="357:17" pos:end="357:17">*</operator><name pos:start="357:18" pos:end="357:24">samples</name><operator pos:start="357:25" pos:end="357:26">++</operator> <operator pos:start="357:28" pos:end="357:28">=</operator> <name pos:start="357:30" pos:end="357:41"><name pos:start="357:30" pos:end="357:30">c</name><operator pos:start="357:31" pos:end="357:32">-&gt;</operator><name pos:start="357:33" pos:end="357:38">status</name><index pos:start="357:39" pos:end="357:41">[<expr pos:start="357:40" pos:end="357:40"><literal type="number" pos:start="357:40" pos:end="357:40">1</literal></expr>]</index></name><operator pos:start="357:42" pos:end="357:42">.</operator><name pos:start="357:43" pos:end="357:49">sample1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="359:9" pos:end="359:42"><expr pos:start="359:9" pos:end="359:41"><operator pos:start="359:9" pos:end="359:9">*</operator><name pos:start="359:10" pos:end="359:16">samples</name><operator pos:start="359:17" pos:end="359:18">++</operator> <operator pos:start="359:20" pos:end="359:20">=</operator> <name pos:start="359:22" pos:end="359:33"><name pos:start="359:22" pos:end="359:22">c</name><operator pos:start="359:23" pos:end="359:24">-&gt;</operator><name pos:start="359:25" pos:end="359:30">status</name><index pos:start="359:31" pos:end="359:33">[<expr pos:start="359:32" pos:end="359:32"><literal type="number" pos:start="359:32" pos:end="359:32">0</literal></expr>]</index></name><operator pos:start="359:34" pos:end="359:34">.</operator><name pos:start="359:35" pos:end="359:41">sample2</name></expr>;</expr_stmt>

        <if_stmt pos:start="361:9" pos:end="361:50"><if pos:start="361:9" pos:end="361:50">if <condition pos:start="361:12" pos:end="361:15">(<expr pos:start="361:13" pos:end="361:14"><name pos:start="361:13" pos:end="361:14">st</name></expr>)</condition><block type="pseudo" pos:start="361:17" pos:end="361:50"><block_content pos:start="361:17" pos:end="361:50"> <expr_stmt pos:start="361:17" pos:end="361:50"><expr pos:start="361:17" pos:end="361:49"><operator pos:start="361:17" pos:end="361:17">*</operator><name pos:start="361:18" pos:end="361:24">samples</name><operator pos:start="361:25" pos:end="361:26">++</operator> <operator pos:start="361:28" pos:end="361:28">=</operator> <name pos:start="361:30" pos:end="361:41"><name pos:start="361:30" pos:end="361:30">c</name><operator pos:start="361:31" pos:end="361:32">-&gt;</operator><name pos:start="361:33" pos:end="361:38">status</name><index pos:start="361:39" pos:end="361:41">[<expr pos:start="361:40" pos:end="361:40"><literal type="number" pos:start="361:40" pos:end="361:40">1</literal></expr>]</index></name><operator pos:start="361:42" pos:end="361:42">.</operator><name pos:start="361:43" pos:end="361:49">sample2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for pos:start="363:9" pos:end="371:9">for<control pos:start="363:12" pos:end="363:21">(<init pos:start="363:13" pos:end="363:13">;</init><condition pos:start="363:14" pos:end="363:17"><expr pos:start="363:14" pos:end="363:16"><name pos:start="363:14" pos:end="363:14">n</name><operator pos:start="363:15" pos:end="363:15">&gt;</operator><literal type="number" pos:start="363:16" pos:end="363:16">0</literal></expr>;</condition><incr pos:start="363:18" pos:end="363:20"><expr pos:start="363:18" pos:end="363:20"><name pos:start="363:18" pos:end="363:18">n</name><operator pos:start="363:19" pos:end="363:20">--</operator></expr></incr>)</control> <block pos:start="363:23" pos:end="371:9">{<block_content pos:start="365:13" pos:end="369:19">

            <expr_stmt pos:start="365:13" pos:end="365:85"><expr pos:start="365:13" pos:end="365:84"><operator pos:start="365:13" pos:end="365:13">*</operator><name pos:start="365:14" pos:end="365:20">samples</name><operator pos:start="365:21" pos:end="365:22">++</operator> <operator pos:start="365:24" pos:end="365:24">=</operator> <call pos:start="365:26" pos:end="365:84"><name pos:start="365:26" pos:end="365:47">adpcm_ms_expand_nibble</name><argument_list pos:start="365:48" pos:end="365:84">(<argument pos:start="365:49" pos:end="365:61"><expr pos:start="365:49" pos:end="365:61"><operator pos:start="365:49" pos:end="365:49">&amp;</operator><name pos:start="365:50" pos:end="365:61"><name pos:start="365:50" pos:end="365:50">c</name><operator pos:start="365:51" pos:end="365:52">-&gt;</operator><name pos:start="365:53" pos:end="365:58">status</name><index pos:start="365:59" pos:end="365:61">[<expr pos:start="365:60" pos:end="365:60"><literal type="number" pos:start="365:60" pos:end="365:60">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="365:64" pos:end="365:83"><expr pos:start="365:64" pos:end="365:83"><operator pos:start="365:64" pos:end="365:64">(</operator><name pos:start="365:65" pos:end="365:70"><name pos:start="365:65" pos:end="365:67">src</name><index pos:start="365:68" pos:end="365:70">[<expr pos:start="365:69" pos:end="365:69"><literal type="number" pos:start="365:69" pos:end="365:69">0</literal></expr>]</index></name> <operator pos:start="365:72" pos:end="365:73">&gt;&gt;</operator> <literal type="number" pos:start="365:75" pos:end="365:75">4</literal><operator pos:start="365:76" pos:end="365:76">)</operator> <operator pos:start="365:78" pos:end="365:78">&amp;</operator> <literal type="number" pos:start="365:80" pos:end="365:83">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:79"><expr pos:start="367:13" pos:end="367:78"><operator pos:start="367:13" pos:end="367:13">*</operator><name pos:start="367:14" pos:end="367:20">samples</name><operator pos:start="367:21" pos:end="367:22">++</operator> <operator pos:start="367:24" pos:end="367:24">=</operator> <call pos:start="367:26" pos:end="367:78"><name pos:start="367:26" pos:end="367:47">adpcm_ms_expand_nibble</name><argument_list pos:start="367:48" pos:end="367:78">(<argument pos:start="367:49" pos:end="367:62"><expr pos:start="367:49" pos:end="367:62"><operator pos:start="367:49" pos:end="367:49">&amp;</operator><name pos:start="367:50" pos:end="367:62"><name pos:start="367:50" pos:end="367:50">c</name><operator pos:start="367:51" pos:end="367:52">-&gt;</operator><name pos:start="367:53" pos:end="367:58">status</name><index pos:start="367:59" pos:end="367:62">[<expr pos:start="367:60" pos:end="367:61"><name pos:start="367:60" pos:end="367:61">st</name></expr>]</index></name></expr></argument>, <argument pos:start="367:65" pos:end="367:77"><expr pos:start="367:65" pos:end="367:77"><name pos:start="367:65" pos:end="367:70"><name pos:start="367:65" pos:end="367:67">src</name><index pos:start="367:68" pos:end="367:70">[<expr pos:start="367:69" pos:end="367:69"><literal type="number" pos:start="367:69" pos:end="367:69">0</literal></expr>]</index></name> <operator pos:start="367:72" pos:end="367:72">&amp;</operator> <literal type="number" pos:start="367:74" pos:end="367:77">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:19"><expr pos:start="369:13" pos:end="369:18"><name pos:start="369:13" pos:end="369:15">src</name> <operator pos:start="369:17" pos:end="369:18">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="373:9" pos:end="373:14">break;</break>

    <case pos:start="375:5" pos:end="375:32">case <expr pos:start="375:10" pos:end="375:31"><name pos:start="375:10" pos:end="375:31">CODEC_ID_ADPCM_IMA_DK4</name></expr>:</case>

        <if_stmt pos:start="377:9" pos:end="379:42"><if pos:start="377:9" pos:end="379:42">if <condition pos:start="377:12" pos:end="377:69">(<expr pos:start="377:13" pos:end="377:68"><name pos:start="377:13" pos:end="377:30"><name pos:start="377:13" pos:end="377:17">avctx</name><operator pos:start="377:18" pos:end="377:19">-&gt;</operator><name pos:start="377:20" pos:end="377:30">block_align</name></name> <operator pos:start="377:32" pos:end="377:33">!=</operator> <literal type="number" pos:start="377:35" pos:end="377:35">0</literal> <operator pos:start="377:37" pos:end="377:38">&amp;&amp;</operator> <name pos:start="377:40" pos:end="377:47">buf_size</name> <operator pos:start="377:49" pos:end="377:49">&gt;</operator> <name pos:start="377:51" pos:end="377:68"><name pos:start="377:51" pos:end="377:55">avctx</name><operator pos:start="377:56" pos:end="377:57">-&gt;</operator><name pos:start="377:58" pos:end="377:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="379:13" pos:end="379:42"><block_content pos:start="379:13" pos:end="379:42">

            <expr_stmt pos:start="379:13" pos:end="379:42"><expr pos:start="379:13" pos:end="379:41"><name pos:start="379:13" pos:end="379:20">buf_size</name> <operator pos:start="379:22" pos:end="379:22">=</operator> <name pos:start="379:24" pos:end="379:41"><name pos:start="379:24" pos:end="379:28">avctx</name><operator pos:start="379:29" pos:end="379:30">-&gt;</operator><name pos:start="379:31" pos:end="379:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="383:9" pos:end="383:67"><expr pos:start="383:9" pos:end="383:66"><name pos:start="383:9" pos:end="383:20"><name pos:start="383:9" pos:end="383:9">c</name><operator pos:start="383:10" pos:end="383:11">-&gt;</operator><name pos:start="383:12" pos:end="383:17">status</name><index pos:start="383:18" pos:end="383:20">[<expr pos:start="383:19" pos:end="383:19"><literal type="number" pos:start="383:19" pos:end="383:19">0</literal></expr>]</index></name><operator pos:start="383:21" pos:end="383:21">.</operator><name pos:start="383:22" pos:end="383:30">predictor</name> <operator pos:start="383:32" pos:end="383:32">=</operator> <operator pos:start="383:34" pos:end="383:34">(</operator><name pos:start="383:35" pos:end="383:41">int16_t</name><operator pos:start="383:42" pos:end="383:42">)</operator><operator pos:start="383:43" pos:end="383:43">(</operator><name pos:start="383:44" pos:end="383:49"><name pos:start="383:44" pos:end="383:46">src</name><index pos:start="383:47" pos:end="383:49">[<expr pos:start="383:48" pos:end="383:48"><literal type="number" pos:start="383:48" pos:end="383:48">0</literal></expr>]</index></name> <operator pos:start="383:51" pos:end="383:51">|</operator> <operator pos:start="383:53" pos:end="383:53">(</operator><name pos:start="383:54" pos:end="383:59"><name pos:start="383:54" pos:end="383:56">src</name><index pos:start="383:57" pos:end="383:59">[<expr pos:start="383:58" pos:end="383:58"><literal type="number" pos:start="383:58" pos:end="383:58">1</literal></expr>]</index></name> <operator pos:start="383:61" pos:end="383:62">&lt;&lt;</operator> <literal type="number" pos:start="383:64" pos:end="383:64">8</literal><operator pos:start="383:65" pos:end="383:65">)</operator><operator pos:start="383:66" pos:end="383:66">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:41"><expr pos:start="385:9" pos:end="385:40"><name pos:start="385:9" pos:end="385:20"><name pos:start="385:9" pos:end="385:9">c</name><operator pos:start="385:10" pos:end="385:11">-&gt;</operator><name pos:start="385:12" pos:end="385:17">status</name><index pos:start="385:18" pos:end="385:20">[<expr pos:start="385:19" pos:end="385:19"><literal type="number" pos:start="385:19" pos:end="385:19">0</literal></expr>]</index></name><operator pos:start="385:21" pos:end="385:21">.</operator><name pos:start="385:22" pos:end="385:31">step_index</name> <operator pos:start="385:33" pos:end="385:33">=</operator> <name pos:start="385:35" pos:end="385:40"><name pos:start="385:35" pos:end="385:37">src</name><index pos:start="385:38" pos:end="385:40">[<expr pos:start="385:39" pos:end="385:39"><literal type="number" pos:start="385:39" pos:end="385:39">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:17"><expr pos:start="387:9" pos:end="387:16"><name pos:start="387:9" pos:end="387:11">src</name> <operator pos:start="387:13" pos:end="387:14">+=</operator> <literal type="number" pos:start="387:16" pos:end="387:16">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:44"><expr pos:start="389:9" pos:end="389:43"><operator pos:start="389:9" pos:end="389:9">*</operator><name pos:start="389:10" pos:end="389:16">samples</name><operator pos:start="389:17" pos:end="389:18">++</operator> <operator pos:start="389:20" pos:end="389:20">=</operator> <name pos:start="389:22" pos:end="389:33"><name pos:start="389:22" pos:end="389:22">c</name><operator pos:start="389:23" pos:end="389:24">-&gt;</operator><name pos:start="389:25" pos:end="389:30">status</name><index pos:start="389:31" pos:end="389:33">[<expr pos:start="389:32" pos:end="389:32"><literal type="number" pos:start="389:32" pos:end="389:32">0</literal></expr>]</index></name><operator pos:start="389:34" pos:end="389:34">.</operator><name pos:start="389:35" pos:end="389:43">predictor</name></expr>;</expr_stmt>

        <if_stmt pos:start="391:9" pos:end="401:9"><if pos:start="391:9" pos:end="401:9">if <condition pos:start="391:12" pos:end="391:15">(<expr pos:start="391:13" pos:end="391:14"><name pos:start="391:13" pos:end="391:14">st</name></expr>)</condition> <block pos:start="391:17" pos:end="401:9">{<block_content pos:start="393:13" pos:end="399:48">

            <expr_stmt pos:start="393:13" pos:end="393:71"><expr pos:start="393:13" pos:end="393:70"><name pos:start="393:13" pos:end="393:24"><name pos:start="393:13" pos:end="393:13">c</name><operator pos:start="393:14" pos:end="393:15">-&gt;</operator><name pos:start="393:16" pos:end="393:21">status</name><index pos:start="393:22" pos:end="393:24">[<expr pos:start="393:23" pos:end="393:23"><literal type="number" pos:start="393:23" pos:end="393:23">1</literal></expr>]</index></name><operator pos:start="393:25" pos:end="393:25">.</operator><name pos:start="393:26" pos:end="393:34">predictor</name> <operator pos:start="393:36" pos:end="393:36">=</operator> <operator pos:start="393:38" pos:end="393:38">(</operator><name pos:start="393:39" pos:end="393:45">int16_t</name><operator pos:start="393:46" pos:end="393:46">)</operator><operator pos:start="393:47" pos:end="393:47">(</operator><name pos:start="393:48" pos:end="393:53"><name pos:start="393:48" pos:end="393:50">src</name><index pos:start="393:51" pos:end="393:53">[<expr pos:start="393:52" pos:end="393:52"><literal type="number" pos:start="393:52" pos:end="393:52">0</literal></expr>]</index></name> <operator pos:start="393:55" pos:end="393:55">|</operator> <operator pos:start="393:57" pos:end="393:57">(</operator><name pos:start="393:58" pos:end="393:63"><name pos:start="393:58" pos:end="393:60">src</name><index pos:start="393:61" pos:end="393:63">[<expr pos:start="393:62" pos:end="393:62"><literal type="number" pos:start="393:62" pos:end="393:62">1</literal></expr>]</index></name> <operator pos:start="393:65" pos:end="393:66">&lt;&lt;</operator> <literal type="number" pos:start="393:68" pos:end="393:68">8</literal><operator pos:start="393:69" pos:end="393:69">)</operator><operator pos:start="393:70" pos:end="393:70">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:45"><expr pos:start="395:13" pos:end="395:44"><name pos:start="395:13" pos:end="395:24"><name pos:start="395:13" pos:end="395:13">c</name><operator pos:start="395:14" pos:end="395:15">-&gt;</operator><name pos:start="395:16" pos:end="395:21">status</name><index pos:start="395:22" pos:end="395:24">[<expr pos:start="395:23" pos:end="395:23"><literal type="number" pos:start="395:23" pos:end="395:23">1</literal></expr>]</index></name><operator pos:start="395:25" pos:end="395:25">.</operator><name pos:start="395:26" pos:end="395:35">step_index</name> <operator pos:start="395:37" pos:end="395:37">=</operator> <name pos:start="395:39" pos:end="395:44"><name pos:start="395:39" pos:end="395:41">src</name><index pos:start="395:42" pos:end="395:44">[<expr pos:start="395:43" pos:end="395:43"><literal type="number" pos:start="395:43" pos:end="395:43">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:21"><expr pos:start="397:13" pos:end="397:20"><name pos:start="397:13" pos:end="397:15">src</name> <operator pos:start="397:17" pos:end="397:18">+=</operator> <literal type="number" pos:start="397:20" pos:end="397:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:48"><expr pos:start="399:13" pos:end="399:47"><operator pos:start="399:13" pos:end="399:13">*</operator><name pos:start="399:14" pos:end="399:20">samples</name><operator pos:start="399:21" pos:end="399:22">++</operator> <operator pos:start="399:24" pos:end="399:24">=</operator> <name pos:start="399:26" pos:end="399:37"><name pos:start="399:26" pos:end="399:26">c</name><operator pos:start="399:27" pos:end="399:28">-&gt;</operator><name pos:start="399:29" pos:end="399:34">status</name><index pos:start="399:35" pos:end="399:37">[<expr pos:start="399:36" pos:end="399:36"><literal type="number" pos:start="399:36" pos:end="399:36">1</literal></expr>]</index></name><operator pos:start="399:38" pos:end="399:38">.</operator><name pos:start="399:39" pos:end="399:47">predictor</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <while pos:start="403:9" pos:end="435:9">while <condition pos:start="403:15" pos:end="403:36">(<expr pos:start="403:16" pos:end="403:35"><name pos:start="403:16" pos:end="403:18">src</name> <operator pos:start="403:20" pos:end="403:20">&lt;</operator> <name pos:start="403:22" pos:end="403:24">buf</name> <operator pos:start="403:26" pos:end="403:26">+</operator> <name pos:start="403:28" pos:end="403:35">buf_size</name></expr>)</condition> <block pos:start="403:38" pos:end="435:9">{<block_content pos:start="409:13" pos:end="433:18">



            <comment type="block" pos:start="407:13" pos:end="407:75">/* take care of the top nibble (always left or mono channel) */</comment>

            <expr_stmt pos:start="409:13" pos:end="411:41"><expr pos:start="409:13" pos:end="411:40"><operator pos:start="409:13" pos:end="409:13">*</operator><name pos:start="409:14" pos:end="409:20">samples</name><operator pos:start="409:21" pos:end="409:22">++</operator> <operator pos:start="409:24" pos:end="409:24">=</operator> <call pos:start="409:26" pos:end="411:40"><name pos:start="409:26" pos:end="409:48">adpcm_ima_expand_nibble</name><argument_list pos:start="409:49" pos:end="411:40">(<argument pos:start="409:50" pos:end="409:62"><expr pos:start="409:50" pos:end="409:62"><operator pos:start="409:50" pos:end="409:50">&amp;</operator><name pos:start="409:51" pos:end="409:62"><name pos:start="409:51" pos:end="409:51">c</name><operator pos:start="409:52" pos:end="409:53">-&gt;</operator><name pos:start="409:54" pos:end="409:59">status</name><index pos:start="409:60" pos:end="409:62">[<expr pos:start="409:61" pos:end="409:61"><literal type="number" pos:start="409:61" pos:end="409:61">0</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="411:17" pos:end="411:36"><expr pos:start="411:17" pos:end="411:36"><operator pos:start="411:17" pos:end="411:17">(</operator><name pos:start="411:18" pos:end="411:23"><name pos:start="411:18" pos:end="411:20">src</name><index pos:start="411:21" pos:end="411:23">[<expr pos:start="411:22" pos:end="411:22"><literal type="number" pos:start="411:22" pos:end="411:22">0</literal></expr>]</index></name> <operator pos:start="411:25" pos:end="411:26">&gt;&gt;</operator> <literal type="number" pos:start="411:28" pos:end="411:28">4</literal><operator pos:start="411:29" pos:end="411:29">)</operator> <operator pos:start="411:31" pos:end="411:31">&amp;</operator> <literal type="number" pos:start="411:33" pos:end="411:36">0x0F</literal></expr></argument>, <argument pos:start="411:39" pos:end="411:39"><expr pos:start="411:39" pos:end="411:39"><literal type="number" pos:start="411:39" pos:end="411:39">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="415:13" pos:end="417:48">/* take care of the bottom nibble, which is right sample for

             * stereo, or another mono sample */</comment>

            <if_stmt pos:start="419:13" pos:end="429:38"><if pos:start="419:13" pos:end="423:38">if <condition pos:start="419:16" pos:end="419:19">(<expr pos:start="419:17" pos:end="419:18"><name pos:start="419:17" pos:end="419:18">st</name></expr>)</condition><block type="pseudo" pos:start="421:17" pos:end="423:38"><block_content pos:start="421:17" pos:end="423:38">

                <expr_stmt pos:start="421:17" pos:end="423:38"><expr pos:start="421:17" pos:end="423:37"><operator pos:start="421:17" pos:end="421:17">*</operator><name pos:start="421:18" pos:end="421:24">samples</name><operator pos:start="421:25" pos:end="421:26">++</operator> <operator pos:start="421:28" pos:end="421:28">=</operator> <call pos:start="421:30" pos:end="423:37"><name pos:start="421:30" pos:end="421:52">adpcm_ima_expand_nibble</name><argument_list pos:start="421:53" pos:end="423:37">(<argument pos:start="421:54" pos:end="421:66"><expr pos:start="421:54" pos:end="421:66"><operator pos:start="421:54" pos:end="421:54">&amp;</operator><name pos:start="421:55" pos:end="421:66"><name pos:start="421:55" pos:end="421:55">c</name><operator pos:start="421:56" pos:end="421:57">-&gt;</operator><name pos:start="421:58" pos:end="421:63">status</name><index pos:start="421:64" pos:end="421:66">[<expr pos:start="421:65" pos:end="421:65"><literal type="number" pos:start="421:65" pos:end="421:65">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="423:21" pos:end="423:33"><expr pos:start="423:21" pos:end="423:33"><name pos:start="423:21" pos:end="423:26"><name pos:start="423:21" pos:end="423:23">src</name><index pos:start="423:24" pos:end="423:26">[<expr pos:start="423:25" pos:end="423:25"><literal type="number" pos:start="423:25" pos:end="423:25">0</literal></expr>]</index></name> <operator pos:start="423:28" pos:end="423:28">&amp;</operator> <literal type="number" pos:start="423:30" pos:end="423:33">0x0F</literal></expr></argument>, <argument pos:start="423:36" pos:end="423:36"><expr pos:start="423:36" pos:end="423:36"><literal type="number" pos:start="423:36" pos:end="423:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="425:13" pos:end="429:38">else<block type="pseudo" pos:start="427:17" pos:end="429:38"><block_content pos:start="427:17" pos:end="429:38">

                <expr_stmt pos:start="427:17" pos:end="429:38"><expr pos:start="427:17" pos:end="429:37"><operator pos:start="427:17" pos:end="427:17">*</operator><name pos:start="427:18" pos:end="427:24">samples</name><operator pos:start="427:25" pos:end="427:26">++</operator> <operator pos:start="427:28" pos:end="427:28">=</operator> <call pos:start="427:30" pos:end="429:37"><name pos:start="427:30" pos:end="427:52">adpcm_ima_expand_nibble</name><argument_list pos:start="427:53" pos:end="429:37">(<argument pos:start="427:54" pos:end="427:66"><expr pos:start="427:54" pos:end="427:66"><operator pos:start="427:54" pos:end="427:54">&amp;</operator><name pos:start="427:55" pos:end="427:66"><name pos:start="427:55" pos:end="427:55">c</name><operator pos:start="427:56" pos:end="427:57">-&gt;</operator><name pos:start="427:58" pos:end="427:63">status</name><index pos:start="427:64" pos:end="427:66">[<expr pos:start="427:65" pos:end="427:65"><literal type="number" pos:start="427:65" pos:end="427:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="429:21" pos:end="429:33"><expr pos:start="429:21" pos:end="429:33"><name pos:start="429:21" pos:end="429:26"><name pos:start="429:21" pos:end="429:23">src</name><index pos:start="429:24" pos:end="429:26">[<expr pos:start="429:25" pos:end="429:25"><literal type="number" pos:start="429:25" pos:end="429:25">0</literal></expr>]</index></name> <operator pos:start="429:28" pos:end="429:28">&amp;</operator> <literal type="number" pos:start="429:30" pos:end="429:33">0x0F</literal></expr></argument>, <argument pos:start="429:36" pos:end="429:36"><expr pos:start="429:36" pos:end="429:36"><literal type="number" pos:start="429:36" pos:end="429:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="433:13" pos:end="433:18"><expr pos:start="433:13" pos:end="433:17"><name pos:start="433:13" pos:end="433:15">src</name><operator pos:start="433:16" pos:end="433:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="437:9" pos:end="437:14">break;</break>

    <case pos:start="439:5" pos:end="439:32">case <expr pos:start="439:10" pos:end="439:31"><name pos:start="439:10" pos:end="439:31">CODEC_ID_ADPCM_IMA_DK3</name></expr>:</case>

        <if_stmt pos:start="441:9" pos:end="443:42"><if pos:start="441:9" pos:end="443:42">if <condition pos:start="441:12" pos:end="441:69">(<expr pos:start="441:13" pos:end="441:68"><name pos:start="441:13" pos:end="441:30"><name pos:start="441:13" pos:end="441:17">avctx</name><operator pos:start="441:18" pos:end="441:19">-&gt;</operator><name pos:start="441:20" pos:end="441:30">block_align</name></name> <operator pos:start="441:32" pos:end="441:33">!=</operator> <literal type="number" pos:start="441:35" pos:end="441:35">0</literal> <operator pos:start="441:37" pos:end="441:38">&amp;&amp;</operator> <name pos:start="441:40" pos:end="441:47">buf_size</name> <operator pos:start="441:49" pos:end="441:49">&gt;</operator> <name pos:start="441:51" pos:end="441:68"><name pos:start="441:51" pos:end="441:55">avctx</name><operator pos:start="441:56" pos:end="441:57">-&gt;</operator><name pos:start="441:58" pos:end="441:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="443:13" pos:end="443:42"><block_content pos:start="443:13" pos:end="443:42">

            <expr_stmt pos:start="443:13" pos:end="443:42"><expr pos:start="443:13" pos:end="443:41"><name pos:start="443:13" pos:end="443:20">buf_size</name> <operator pos:start="443:22" pos:end="443:22">=</operator> <name pos:start="443:24" pos:end="443:41"><name pos:start="443:24" pos:end="443:28">avctx</name><operator pos:start="443:29" pos:end="443:30">-&gt;</operator><name pos:start="443:31" pos:end="443:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="447:9" pos:end="449:22"><if pos:start="447:9" pos:end="449:22">if<condition pos:start="447:11" pos:end="447:55">(<expr pos:start="447:12" pos:end="447:54"><name pos:start="447:12" pos:end="447:19">buf_size</name> <operator pos:start="447:21" pos:end="447:21">+</operator> <literal type="number" pos:start="447:23" pos:end="447:24">16</literal> <operator pos:start="447:26" pos:end="447:26">&gt;</operator> <operator pos:start="447:28" pos:end="447:28">(</operator><name pos:start="447:29" pos:end="447:39">samples_end</name> <operator pos:start="447:41" pos:end="447:41">-</operator> <name pos:start="447:43" pos:end="447:49">samples</name><operator pos:start="447:50" pos:end="447:50">)</operator><operator pos:start="447:51" pos:end="447:51">*</operator><literal type="number" pos:start="447:52" pos:end="447:52">3</literal><operator pos:start="447:53" pos:end="447:53">/</operator><literal type="number" pos:start="447:54" pos:end="447:54">8</literal></expr>)</condition><block type="pseudo" pos:start="449:13" pos:end="449:22"><block_content pos:start="449:13" pos:end="449:22">

            <return pos:start="449:13" pos:end="449:22">return <expr pos:start="449:20" pos:end="449:21"><operator pos:start="449:20" pos:end="449:20">-</operator><literal type="number" pos:start="449:21" pos:end="449:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="453:9" pos:end="453:69"><expr pos:start="453:9" pos:end="453:68"><name pos:start="453:9" pos:end="453:20"><name pos:start="453:9" pos:end="453:9">c</name><operator pos:start="453:10" pos:end="453:11">-&gt;</operator><name pos:start="453:12" pos:end="453:17">status</name><index pos:start="453:18" pos:end="453:20">[<expr pos:start="453:19" pos:end="453:19"><literal type="number" pos:start="453:19" pos:end="453:19">0</literal></expr>]</index></name><operator pos:start="453:21" pos:end="453:21">.</operator><name pos:start="453:22" pos:end="453:30">predictor</name> <operator pos:start="453:32" pos:end="453:32">=</operator> <operator pos:start="453:34" pos:end="453:34">(</operator><name pos:start="453:35" pos:end="453:41">int16_t</name><operator pos:start="453:42" pos:end="453:42">)</operator><operator pos:start="453:43" pos:end="453:43">(</operator><name pos:start="453:44" pos:end="453:50"><name pos:start="453:44" pos:end="453:46">src</name><index pos:start="453:47" pos:end="453:50">[<expr pos:start="453:48" pos:end="453:49"><literal type="number" pos:start="453:48" pos:end="453:49">10</literal></expr>]</index></name> <operator pos:start="453:52" pos:end="453:52">|</operator> <operator pos:start="453:54" pos:end="453:54">(</operator><name pos:start="453:55" pos:end="453:61"><name pos:start="453:55" pos:end="453:57">src</name><index pos:start="453:58" pos:end="453:61">[<expr pos:start="453:59" pos:end="453:60"><literal type="number" pos:start="453:59" pos:end="453:60">11</literal></expr>]</index></name> <operator pos:start="453:63" pos:end="453:64">&lt;&lt;</operator> <literal type="number" pos:start="453:66" pos:end="453:66">8</literal><operator pos:start="453:67" pos:end="453:67">)</operator><operator pos:start="453:68" pos:end="453:68">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:69"><expr pos:start="455:9" pos:end="455:68"><name pos:start="455:9" pos:end="455:20"><name pos:start="455:9" pos:end="455:9">c</name><operator pos:start="455:10" pos:end="455:11">-&gt;</operator><name pos:start="455:12" pos:end="455:17">status</name><index pos:start="455:18" pos:end="455:20">[<expr pos:start="455:19" pos:end="455:19"><literal type="number" pos:start="455:19" pos:end="455:19">1</literal></expr>]</index></name><operator pos:start="455:21" pos:end="455:21">.</operator><name pos:start="455:22" pos:end="455:30">predictor</name> <operator pos:start="455:32" pos:end="455:32">=</operator> <operator pos:start="455:34" pos:end="455:34">(</operator><name pos:start="455:35" pos:end="455:41">int16_t</name><operator pos:start="455:42" pos:end="455:42">)</operator><operator pos:start="455:43" pos:end="455:43">(</operator><name pos:start="455:44" pos:end="455:50"><name pos:start="455:44" pos:end="455:46">src</name><index pos:start="455:47" pos:end="455:50">[<expr pos:start="455:48" pos:end="455:49"><literal type="number" pos:start="455:48" pos:end="455:49">12</literal></expr>]</index></name> <operator pos:start="455:52" pos:end="455:52">|</operator> <operator pos:start="455:54" pos:end="455:54">(</operator><name pos:start="455:55" pos:end="455:61"><name pos:start="455:55" pos:end="455:57">src</name><index pos:start="455:58" pos:end="455:61">[<expr pos:start="455:59" pos:end="455:60"><literal type="number" pos:start="455:59" pos:end="455:60">13</literal></expr>]</index></name> <operator pos:start="455:63" pos:end="455:64">&lt;&lt;</operator> <literal type="number" pos:start="455:66" pos:end="455:66">8</literal><operator pos:start="455:67" pos:end="455:67">)</operator><operator pos:start="455:68" pos:end="455:68">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:42"><expr pos:start="457:9" pos:end="457:41"><name pos:start="457:9" pos:end="457:20"><name pos:start="457:9" pos:end="457:9">c</name><operator pos:start="457:10" pos:end="457:11">-&gt;</operator><name pos:start="457:12" pos:end="457:17">status</name><index pos:start="457:18" pos:end="457:20">[<expr pos:start="457:19" pos:end="457:19"><literal type="number" pos:start="457:19" pos:end="457:19">0</literal></expr>]</index></name><operator pos:start="457:21" pos:end="457:21">.</operator><name pos:start="457:22" pos:end="457:31">step_index</name> <operator pos:start="457:33" pos:end="457:33">=</operator> <name pos:start="457:35" pos:end="457:41"><name pos:start="457:35" pos:end="457:37">src</name><index pos:start="457:38" pos:end="457:41">[<expr pos:start="457:39" pos:end="457:40"><literal type="number" pos:start="457:39" pos:end="457:40">14</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="459:9" pos:end="459:42"><expr pos:start="459:9" pos:end="459:41"><name pos:start="459:9" pos:end="459:20"><name pos:start="459:9" pos:end="459:9">c</name><operator pos:start="459:10" pos:end="459:11">-&gt;</operator><name pos:start="459:12" pos:end="459:17">status</name><index pos:start="459:18" pos:end="459:20">[<expr pos:start="459:19" pos:end="459:19"><literal type="number" pos:start="459:19" pos:end="459:19">1</literal></expr>]</index></name><operator pos:start="459:21" pos:end="459:21">.</operator><name pos:start="459:22" pos:end="459:31">step_index</name> <operator pos:start="459:33" pos:end="459:33">=</operator> <name pos:start="459:35" pos:end="459:41"><name pos:start="459:35" pos:end="459:37">src</name><index pos:start="459:38" pos:end="459:41">[<expr pos:start="459:39" pos:end="459:40"><literal type="number" pos:start="459:39" pos:end="459:40">15</literal></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block" pos:start="461:9" pos:end="461:40">/* sign extend the predictors */</comment>

        <expr_stmt pos:start="463:9" pos:end="463:18"><expr pos:start="463:9" pos:end="463:17"><name pos:start="463:9" pos:end="463:11">src</name> <operator pos:start="463:13" pos:end="463:14">+=</operator> <literal type="number" pos:start="463:16" pos:end="463:17">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="465:9" pos:end="465:46"><expr pos:start="465:9" pos:end="465:45"><name pos:start="465:9" pos:end="465:20">diff_channel</name> <operator pos:start="465:22" pos:end="465:22">=</operator> <name pos:start="465:24" pos:end="465:35"><name pos:start="465:24" pos:end="465:24">c</name><operator pos:start="465:25" pos:end="465:26">-&gt;</operator><name pos:start="465:27" pos:end="465:32">status</name><index pos:start="465:33" pos:end="465:35">[<expr pos:start="465:34" pos:end="465:34"><literal type="number" pos:start="465:34" pos:end="465:34">1</literal></expr>]</index></name><operator pos:start="465:36" pos:end="465:36">.</operator><name pos:start="465:37" pos:end="465:45">predictor</name></expr>;</expr_stmt>



        <comment type="block" pos:start="469:9" pos:end="471:36">/* the DK3_GET_NEXT_NIBBLE macro issues the break statement when

         * the buffer is consumed */</comment>

        <while pos:start="473:9" pos:end="525:9">while <condition pos:start="473:15" pos:end="473:17">(<expr pos:start="473:16" pos:end="473:16"><literal type="number" pos:start="473:16" pos:end="473:16">1</literal></expr>)</condition> <block pos:start="473:19" pos:end="525:9">{<block_content pos:start="485:13" pos:end="523:73">



            <comment type="block" pos:start="477:13" pos:end="479:50">/* for this algorithm, c-&gt;status[0] is the sum channel and

             * c-&gt;status[1] is the diff channel */</comment>



            <comment type="block" pos:start="483:13" pos:end="483:64">/* process the first predictor of the sum channel */</comment>

            <expr_stmt pos:start="485:13" pos:end="485:34"><expr pos:start="485:13" pos:end="485:33"><call pos:start="485:13" pos:end="485:33"><name pos:start="485:13" pos:end="485:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="485:32" pos:end="485:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:62"><expr pos:start="487:13" pos:end="487:61"><call pos:start="487:13" pos:end="487:61"><name pos:start="487:13" pos:end="487:35">adpcm_ima_expand_nibble</name><argument_list pos:start="487:36" pos:end="487:61">(<argument pos:start="487:37" pos:end="487:49"><expr pos:start="487:37" pos:end="487:49"><operator pos:start="487:37" pos:end="487:37">&amp;</operator><name pos:start="487:38" pos:end="487:49"><name pos:start="487:38" pos:end="487:38">c</name><operator pos:start="487:39" pos:end="487:40">-&gt;</operator><name pos:start="487:41" pos:end="487:46">status</name><index pos:start="487:47" pos:end="487:49">[<expr pos:start="487:48" pos:end="487:48"><literal type="number" pos:start="487:48" pos:end="487:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="487:52" pos:end="487:57"><expr pos:start="487:52" pos:end="487:57"><name pos:start="487:52" pos:end="487:57">nibble</name></expr></argument>, <argument pos:start="487:60" pos:end="487:60"><expr pos:start="487:60" pos:end="487:60"><literal type="number" pos:start="487:60" pos:end="487:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="491:13" pos:end="491:52">/* process the diff channel predictor */</comment>

            <expr_stmt pos:start="493:13" pos:end="493:34"><expr pos:start="493:13" pos:end="493:33"><call pos:start="493:13" pos:end="493:33"><name pos:start="493:13" pos:end="493:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="493:32" pos:end="493:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="495:13" pos:end="495:62"><expr pos:start="495:13" pos:end="495:61"><call pos:start="495:13" pos:end="495:61"><name pos:start="495:13" pos:end="495:35">adpcm_ima_expand_nibble</name><argument_list pos:start="495:36" pos:end="495:61">(<argument pos:start="495:37" pos:end="495:49"><expr pos:start="495:37" pos:end="495:49"><operator pos:start="495:37" pos:end="495:37">&amp;</operator><name pos:start="495:38" pos:end="495:49"><name pos:start="495:38" pos:end="495:38">c</name><operator pos:start="495:39" pos:end="495:40">-&gt;</operator><name pos:start="495:41" pos:end="495:46">status</name><index pos:start="495:47" pos:end="495:49">[<expr pos:start="495:48" pos:end="495:48"><literal type="number" pos:start="495:48" pos:end="495:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="495:52" pos:end="495:57"><expr pos:start="495:52" pos:end="495:57"><name pos:start="495:52" pos:end="495:57">nibble</name></expr></argument>, <argument pos:start="495:60" pos:end="495:60"><expr pos:start="495:60" pos:end="495:60"><literal type="number" pos:start="495:60" pos:end="495:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="499:13" pos:end="499:62">/* process the first pair of stereo PCM samples */</comment>

            <expr_stmt pos:start="501:13" pos:end="501:71"><expr pos:start="501:13" pos:end="501:70"><name pos:start="501:13" pos:end="501:24">diff_channel</name> <operator pos:start="501:26" pos:end="501:26">=</operator> <operator pos:start="501:28" pos:end="501:28">(</operator><name pos:start="501:29" pos:end="501:40">diff_channel</name> <operator pos:start="501:42" pos:end="501:42">+</operator> <name pos:start="501:44" pos:end="501:55"><name pos:start="501:44" pos:end="501:44">c</name><operator pos:start="501:45" pos:end="501:46">-&gt;</operator><name pos:start="501:47" pos:end="501:52">status</name><index pos:start="501:53" pos:end="501:55">[<expr pos:start="501:54" pos:end="501:54"><literal type="number" pos:start="501:54" pos:end="501:54">1</literal></expr>]</index></name><operator pos:start="501:56" pos:end="501:56">.</operator><name pos:start="501:57" pos:end="501:65">predictor</name><operator pos:start="501:66" pos:end="501:66">)</operator> <operator pos:start="501:68" pos:end="501:68">/</operator> <literal type="number" pos:start="501:70" pos:end="501:70">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:73"><expr pos:start="503:13" pos:end="503:72"><operator pos:start="503:13" pos:end="503:13">*</operator><name pos:start="503:14" pos:end="503:20">samples</name><operator pos:start="503:21" pos:end="503:22">++</operator> <operator pos:start="503:24" pos:end="503:24">=</operator> <name pos:start="503:26" pos:end="503:37"><name pos:start="503:26" pos:end="503:26">c</name><operator pos:start="503:27" pos:end="503:28">-&gt;</operator><name pos:start="503:29" pos:end="503:34">status</name><index pos:start="503:35" pos:end="503:37">[<expr pos:start="503:36" pos:end="503:36"><literal type="number" pos:start="503:36" pos:end="503:36">0</literal></expr>]</index></name><operator pos:start="503:38" pos:end="503:38">.</operator><name pos:start="503:39" pos:end="503:47">predictor</name> <operator pos:start="503:49" pos:end="503:49">+</operator> <name pos:start="503:51" pos:end="503:62"><name pos:start="503:51" pos:end="503:51">c</name><operator pos:start="503:52" pos:end="503:53">-&gt;</operator><name pos:start="503:54" pos:end="503:59">status</name><index pos:start="503:60" pos:end="503:62">[<expr pos:start="503:61" pos:end="503:61"><literal type="number" pos:start="503:61" pos:end="503:61">1</literal></expr>]</index></name><operator pos:start="503:63" pos:end="503:63">.</operator><name pos:start="503:64" pos:end="503:72">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="505:13" pos:end="505:73"><expr pos:start="505:13" pos:end="505:72"><operator pos:start="505:13" pos:end="505:13">*</operator><name pos:start="505:14" pos:end="505:20">samples</name><operator pos:start="505:21" pos:end="505:22">++</operator> <operator pos:start="505:24" pos:end="505:24">=</operator> <name pos:start="505:26" pos:end="505:37"><name pos:start="505:26" pos:end="505:26">c</name><operator pos:start="505:27" pos:end="505:28">-&gt;</operator><name pos:start="505:29" pos:end="505:34">status</name><index pos:start="505:35" pos:end="505:37">[<expr pos:start="505:36" pos:end="505:36"><literal type="number" pos:start="505:36" pos:end="505:36">0</literal></expr>]</index></name><operator pos:start="505:38" pos:end="505:38">.</operator><name pos:start="505:39" pos:end="505:47">predictor</name> <operator pos:start="505:49" pos:end="505:49">-</operator> <name pos:start="505:51" pos:end="505:62"><name pos:start="505:51" pos:end="505:51">c</name><operator pos:start="505:52" pos:end="505:53">-&gt;</operator><name pos:start="505:54" pos:end="505:59">status</name><index pos:start="505:60" pos:end="505:62">[<expr pos:start="505:61" pos:end="505:61"><literal type="number" pos:start="505:61" pos:end="505:61">1</literal></expr>]</index></name><operator pos:start="505:63" pos:end="505:63">.</operator><name pos:start="505:64" pos:end="505:72">predictor</name></expr>;</expr_stmt>



            <comment type="block" pos:start="509:13" pos:end="509:65">/* process the second predictor of the sum channel */</comment>

            <expr_stmt pos:start="511:13" pos:end="511:34"><expr pos:start="511:13" pos:end="511:33"><call pos:start="511:13" pos:end="511:33"><name pos:start="511:13" pos:end="511:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="511:32" pos:end="511:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="513:13" pos:end="513:62"><expr pos:start="513:13" pos:end="513:61"><call pos:start="513:13" pos:end="513:61"><name pos:start="513:13" pos:end="513:35">adpcm_ima_expand_nibble</name><argument_list pos:start="513:36" pos:end="513:61">(<argument pos:start="513:37" pos:end="513:49"><expr pos:start="513:37" pos:end="513:49"><operator pos:start="513:37" pos:end="513:37">&amp;</operator><name pos:start="513:38" pos:end="513:49"><name pos:start="513:38" pos:end="513:38">c</name><operator pos:start="513:39" pos:end="513:40">-&gt;</operator><name pos:start="513:41" pos:end="513:46">status</name><index pos:start="513:47" pos:end="513:49">[<expr pos:start="513:48" pos:end="513:48"><literal type="number" pos:start="513:48" pos:end="513:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="513:52" pos:end="513:57"><expr pos:start="513:52" pos:end="513:57"><name pos:start="513:52" pos:end="513:57">nibble</name></expr></argument>, <argument pos:start="513:60" pos:end="513:60"><expr pos:start="513:60" pos:end="513:60"><literal type="number" pos:start="513:60" pos:end="513:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="517:13" pos:end="517:63">/* process the second pair of stereo PCM samples */</comment>

            <expr_stmt pos:start="519:13" pos:end="519:71"><expr pos:start="519:13" pos:end="519:70"><name pos:start="519:13" pos:end="519:24">diff_channel</name> <operator pos:start="519:26" pos:end="519:26">=</operator> <operator pos:start="519:28" pos:end="519:28">(</operator><name pos:start="519:29" pos:end="519:40">diff_channel</name> <operator pos:start="519:42" pos:end="519:42">+</operator> <name pos:start="519:44" pos:end="519:55"><name pos:start="519:44" pos:end="519:44">c</name><operator pos:start="519:45" pos:end="519:46">-&gt;</operator><name pos:start="519:47" pos:end="519:52">status</name><index pos:start="519:53" pos:end="519:55">[<expr pos:start="519:54" pos:end="519:54"><literal type="number" pos:start="519:54" pos:end="519:54">1</literal></expr>]</index></name><operator pos:start="519:56" pos:end="519:56">.</operator><name pos:start="519:57" pos:end="519:65">predictor</name><operator pos:start="519:66" pos:end="519:66">)</operator> <operator pos:start="519:68" pos:end="519:68">/</operator> <literal type="number" pos:start="519:70" pos:end="519:70">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="521:13" pos:end="521:73"><expr pos:start="521:13" pos:end="521:72"><operator pos:start="521:13" pos:end="521:13">*</operator><name pos:start="521:14" pos:end="521:20">samples</name><operator pos:start="521:21" pos:end="521:22">++</operator> <operator pos:start="521:24" pos:end="521:24">=</operator> <name pos:start="521:26" pos:end="521:37"><name pos:start="521:26" pos:end="521:26">c</name><operator pos:start="521:27" pos:end="521:28">-&gt;</operator><name pos:start="521:29" pos:end="521:34">status</name><index pos:start="521:35" pos:end="521:37">[<expr pos:start="521:36" pos:end="521:36"><literal type="number" pos:start="521:36" pos:end="521:36">0</literal></expr>]</index></name><operator pos:start="521:38" pos:end="521:38">.</operator><name pos:start="521:39" pos:end="521:47">predictor</name> <operator pos:start="521:49" pos:end="521:49">+</operator> <name pos:start="521:51" pos:end="521:62"><name pos:start="521:51" pos:end="521:51">c</name><operator pos:start="521:52" pos:end="521:53">-&gt;</operator><name pos:start="521:54" pos:end="521:59">status</name><index pos:start="521:60" pos:end="521:62">[<expr pos:start="521:61" pos:end="521:61"><literal type="number" pos:start="521:61" pos:end="521:61">1</literal></expr>]</index></name><operator pos:start="521:63" pos:end="521:63">.</operator><name pos:start="521:64" pos:end="521:72">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="523:13" pos:end="523:73"><expr pos:start="523:13" pos:end="523:72"><operator pos:start="523:13" pos:end="523:13">*</operator><name pos:start="523:14" pos:end="523:20">samples</name><operator pos:start="523:21" pos:end="523:22">++</operator> <operator pos:start="523:24" pos:end="523:24">=</operator> <name pos:start="523:26" pos:end="523:37"><name pos:start="523:26" pos:end="523:26">c</name><operator pos:start="523:27" pos:end="523:28">-&gt;</operator><name pos:start="523:29" pos:end="523:34">status</name><index pos:start="523:35" pos:end="523:37">[<expr pos:start="523:36" pos:end="523:36"><literal type="number" pos:start="523:36" pos:end="523:36">0</literal></expr>]</index></name><operator pos:start="523:38" pos:end="523:38">.</operator><name pos:start="523:39" pos:end="523:47">predictor</name> <operator pos:start="523:49" pos:end="523:49">-</operator> <name pos:start="523:51" pos:end="523:62"><name pos:start="523:51" pos:end="523:51">c</name><operator pos:start="523:52" pos:end="523:53">-&gt;</operator><name pos:start="523:54" pos:end="523:59">status</name><index pos:start="523:60" pos:end="523:62">[<expr pos:start="523:61" pos:end="523:61"><literal type="number" pos:start="523:61" pos:end="523:61">1</literal></expr>]</index></name><operator pos:start="523:63" pos:end="523:63">.</operator><name pos:start="523:64" pos:end="523:72">predictor</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="527:9" pos:end="527:14">break;</break>

    <case pos:start="529:5" pos:end="529:31">case <expr pos:start="529:10" pos:end="529:30"><name pos:start="529:10" pos:end="529:30">CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>

        <comment type="block" pos:start="531:9" pos:end="531:71">/* no per-block initialization; just start decoding the data */</comment>

        <while pos:start="533:9" pos:end="563:9">while <condition pos:start="533:15" pos:end="533:36">(<expr pos:start="533:16" pos:end="533:35"><name pos:start="533:16" pos:end="533:18">src</name> <operator pos:start="533:20" pos:end="533:20">&lt;</operator> <name pos:start="533:22" pos:end="533:24">buf</name> <operator pos:start="533:26" pos:end="533:26">+</operator> <name pos:start="533:28" pos:end="533:35">buf_size</name></expr>)</condition> <block pos:start="533:38" pos:end="563:9">{<block_content pos:start="537:13" pos:end="561:18">



            <if_stmt pos:start="537:13" pos:end="557:13"><if pos:start="537:13" pos:end="547:13">if <condition pos:start="537:16" pos:end="537:19">(<expr pos:start="537:17" pos:end="537:18"><name pos:start="537:17" pos:end="537:18">st</name></expr>)</condition> <block pos:start="537:21" pos:end="547:13">{<block_content pos:start="539:17" pos:end="545:38">

                <expr_stmt pos:start="539:17" pos:end="541:45"><expr pos:start="539:17" pos:end="541:44"><operator pos:start="539:17" pos:end="539:17">*</operator><name pos:start="539:18" pos:end="539:24">samples</name><operator pos:start="539:25" pos:end="539:26">++</operator> <operator pos:start="539:28" pos:end="539:28">=</operator> <call pos:start="539:30" pos:end="541:44"><name pos:start="539:30" pos:end="539:52">adpcm_ima_expand_nibble</name><argument_list pos:start="539:53" pos:end="541:44">(<argument pos:start="539:54" pos:end="539:66"><expr pos:start="539:54" pos:end="539:66"><operator pos:start="539:54" pos:end="539:54">&amp;</operator><name pos:start="539:55" pos:end="539:66"><name pos:start="539:55" pos:end="539:55">c</name><operator pos:start="539:56" pos:end="539:57">-&gt;</operator><name pos:start="539:58" pos:end="539:63">status</name><index pos:start="539:64" pos:end="539:66">[<expr pos:start="539:65" pos:end="539:65"><literal type="number" pos:start="539:65" pos:end="539:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="541:21" pos:end="541:40"><expr pos:start="541:21" pos:end="541:40"><operator pos:start="541:21" pos:end="541:21">(</operator><name pos:start="541:22" pos:end="541:27"><name pos:start="541:22" pos:end="541:24">src</name><index pos:start="541:25" pos:end="541:27">[<expr pos:start="541:26" pos:end="541:26"><literal type="number" pos:start="541:26" pos:end="541:26">0</literal></expr>]</index></name> <operator pos:start="541:29" pos:end="541:30">&gt;&gt;</operator> <literal type="number" pos:start="541:32" pos:end="541:32">4</literal><operator pos:start="541:33" pos:end="541:33">)</operator> <operator pos:start="541:35" pos:end="541:35">&amp;</operator> <literal type="number" pos:start="541:37" pos:end="541:40">0x0F</literal></expr></argument>, <argument pos:start="541:43" pos:end="541:43"><expr pos:start="541:43" pos:end="541:43"><literal type="number" pos:start="541:43" pos:end="541:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="543:17" pos:end="545:38"><expr pos:start="543:17" pos:end="545:37"><operator pos:start="543:17" pos:end="543:17">*</operator><name pos:start="543:18" pos:end="543:24">samples</name><operator pos:start="543:25" pos:end="543:26">++</operator> <operator pos:start="543:28" pos:end="543:28">=</operator> <call pos:start="543:30" pos:end="545:37"><name pos:start="543:30" pos:end="543:52">adpcm_ima_expand_nibble</name><argument_list pos:start="543:53" pos:end="545:37">(<argument pos:start="543:54" pos:end="543:66"><expr pos:start="543:54" pos:end="543:66"><operator pos:start="543:54" pos:end="543:54">&amp;</operator><name pos:start="543:55" pos:end="543:66"><name pos:start="543:55" pos:end="543:55">c</name><operator pos:start="543:56" pos:end="543:57">-&gt;</operator><name pos:start="543:58" pos:end="543:63">status</name><index pos:start="543:64" pos:end="543:66">[<expr pos:start="543:65" pos:end="543:65"><literal type="number" pos:start="543:65" pos:end="543:65">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="545:21" pos:end="545:33"><expr pos:start="545:21" pos:end="545:33"><name pos:start="545:21" pos:end="545:26"><name pos:start="545:21" pos:end="545:23">src</name><index pos:start="545:24" pos:end="545:26">[<expr pos:start="545:25" pos:end="545:25"><literal type="number" pos:start="545:25" pos:end="545:25">0</literal></expr>]</index></name> <operator pos:start="545:28" pos:end="545:28">&amp;</operator> <literal type="number" pos:start="545:30" pos:end="545:33">0x0F</literal></expr></argument>, <argument pos:start="545:36" pos:end="545:36"><expr pos:start="545:36" pos:end="545:36"><literal type="number" pos:start="545:36" pos:end="545:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="547:15" pos:end="557:13">else <block pos:start="547:20" pos:end="557:13">{<block_content pos:start="549:17" pos:end="555:38">

                <expr_stmt pos:start="549:17" pos:end="551:45"><expr pos:start="549:17" pos:end="551:44"><operator pos:start="549:17" pos:end="549:17">*</operator><name pos:start="549:18" pos:end="549:24">samples</name><operator pos:start="549:25" pos:end="549:26">++</operator> <operator pos:start="549:28" pos:end="549:28">=</operator> <call pos:start="549:30" pos:end="551:44"><name pos:start="549:30" pos:end="549:52">adpcm_ima_expand_nibble</name><argument_list pos:start="549:53" pos:end="551:44">(<argument pos:start="549:54" pos:end="549:66"><expr pos:start="549:54" pos:end="549:66"><operator pos:start="549:54" pos:end="549:54">&amp;</operator><name pos:start="549:55" pos:end="549:66"><name pos:start="549:55" pos:end="549:55">c</name><operator pos:start="549:56" pos:end="549:57">-&gt;</operator><name pos:start="549:58" pos:end="549:63">status</name><index pos:start="549:64" pos:end="549:66">[<expr pos:start="549:65" pos:end="549:65"><literal type="number" pos:start="549:65" pos:end="549:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="551:21" pos:end="551:40"><expr pos:start="551:21" pos:end="551:40"><operator pos:start="551:21" pos:end="551:21">(</operator><name pos:start="551:22" pos:end="551:27"><name pos:start="551:22" pos:end="551:24">src</name><index pos:start="551:25" pos:end="551:27">[<expr pos:start="551:26" pos:end="551:26"><literal type="number" pos:start="551:26" pos:end="551:26">0</literal></expr>]</index></name> <operator pos:start="551:29" pos:end="551:30">&gt;&gt;</operator> <literal type="number" pos:start="551:32" pos:end="551:32">4</literal><operator pos:start="551:33" pos:end="551:33">)</operator> <operator pos:start="551:35" pos:end="551:35">&amp;</operator> <literal type="number" pos:start="551:37" pos:end="551:40">0x0F</literal></expr></argument>, <argument pos:start="551:43" pos:end="551:43"><expr pos:start="551:43" pos:end="551:43"><literal type="number" pos:start="551:43" pos:end="551:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="553:17" pos:end="555:38"><expr pos:start="553:17" pos:end="555:37"><operator pos:start="553:17" pos:end="553:17">*</operator><name pos:start="553:18" pos:end="553:24">samples</name><operator pos:start="553:25" pos:end="553:26">++</operator> <operator pos:start="553:28" pos:end="553:28">=</operator> <call pos:start="553:30" pos:end="555:37"><name pos:start="553:30" pos:end="553:52">adpcm_ima_expand_nibble</name><argument_list pos:start="553:53" pos:end="555:37">(<argument pos:start="553:54" pos:end="553:66"><expr pos:start="553:54" pos:end="553:66"><operator pos:start="553:54" pos:end="553:54">&amp;</operator><name pos:start="553:55" pos:end="553:66"><name pos:start="553:55" pos:end="553:55">c</name><operator pos:start="553:56" pos:end="553:57">-&gt;</operator><name pos:start="553:58" pos:end="553:63">status</name><index pos:start="553:64" pos:end="553:66">[<expr pos:start="553:65" pos:end="553:65"><literal type="number" pos:start="553:65" pos:end="553:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="555:21" pos:end="555:33"><expr pos:start="555:21" pos:end="555:33"><name pos:start="555:21" pos:end="555:26"><name pos:start="555:21" pos:end="555:23">src</name><index pos:start="555:24" pos:end="555:26">[<expr pos:start="555:25" pos:end="555:25"><literal type="number" pos:start="555:25" pos:end="555:25">0</literal></expr>]</index></name> <operator pos:start="555:28" pos:end="555:28">&amp;</operator> <literal type="number" pos:start="555:30" pos:end="555:33">0x0F</literal></expr></argument>, <argument pos:start="555:36" pos:end="555:36"><expr pos:start="555:36" pos:end="555:36"><literal type="number" pos:start="555:36" pos:end="555:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="561:13" pos:end="561:18"><expr pos:start="561:13" pos:end="561:17"><name pos:start="561:13" pos:end="561:15">src</name><operator pos:start="561:16" pos:end="561:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="565:9" pos:end="565:14">break;</break>

    <case pos:start="567:5" pos:end="567:27">case <expr pos:start="567:10" pos:end="567:26"><name pos:start="567:10" pos:end="567:26">CODEC_ID_ADPCM_XA</name></expr>:</case>

        <expr_stmt pos:start="569:9" pos:end="571:56"><expr pos:start="569:9" pos:end="571:55"><name pos:start="569:9" pos:end="569:20"><name pos:start="569:9" pos:end="569:9">c</name><operator pos:start="569:10" pos:end="569:11">-&gt;</operator><name pos:start="569:12" pos:end="569:17">status</name><index pos:start="569:18" pos:end="569:20">[<expr pos:start="569:19" pos:end="569:19"><literal type="number" pos:start="569:19" pos:end="569:19">0</literal></expr>]</index></name><operator pos:start="569:21" pos:end="569:21">.</operator><name pos:start="569:22" pos:end="569:28">sample1</name> <operator pos:start="569:30" pos:end="569:30">=</operator> <name pos:start="569:32" pos:end="569:43"><name pos:start="569:32" pos:end="569:32">c</name><operator pos:start="569:33" pos:end="569:34">-&gt;</operator><name pos:start="569:35" pos:end="569:40">status</name><index pos:start="569:41" pos:end="569:43">[<expr pos:start="569:42" pos:end="569:42"><literal type="number" pos:start="569:42" pos:end="569:42">0</literal></expr>]</index></name><operator pos:start="569:44" pos:end="569:44">.</operator><name pos:start="569:45" pos:end="569:51">sample2</name> <operator pos:start="569:53" pos:end="569:53">=</operator>

        <name pos:start="571:9" pos:end="571:20"><name pos:start="571:9" pos:end="571:9">c</name><operator pos:start="571:10" pos:end="571:11">-&gt;</operator><name pos:start="571:12" pos:end="571:17">status</name><index pos:start="571:18" pos:end="571:20">[<expr pos:start="571:19" pos:end="571:19"><literal type="number" pos:start="571:19" pos:end="571:19">1</literal></expr>]</index></name><operator pos:start="571:21" pos:end="571:21">.</operator><name pos:start="571:22" pos:end="571:28">sample1</name> <operator pos:start="571:30" pos:end="571:30">=</operator> <name pos:start="571:32" pos:end="571:43"><name pos:start="571:32" pos:end="571:32">c</name><operator pos:start="571:33" pos:end="571:34">-&gt;</operator><name pos:start="571:35" pos:end="571:40">status</name><index pos:start="571:41" pos:end="571:43">[<expr pos:start="571:42" pos:end="571:42"><literal type="number" pos:start="571:42" pos:end="571:42">1</literal></expr>]</index></name><operator pos:start="571:44" pos:end="571:44">.</operator><name pos:start="571:45" pos:end="571:51">sample2</name> <operator pos:start="571:53" pos:end="571:53">=</operator> <literal type="number" pos:start="571:55" pos:end="571:55">0</literal></expr>;</expr_stmt>

        <while pos:start="573:9" pos:end="585:9">while <condition pos:start="573:15" pos:end="573:31">(<expr pos:start="573:16" pos:end="573:30"><name pos:start="573:16" pos:end="573:23">buf_size</name> <operator pos:start="573:25" pos:end="573:26">&gt;=</operator> <literal type="number" pos:start="573:28" pos:end="573:30">128</literal></expr>)</condition> <block pos:start="573:33" pos:end="585:9">{<block_content pos:start="575:13" pos:end="583:28">

            <expr_stmt pos:start="575:13" pos:end="577:33"><expr pos:start="575:13" pos:end="577:32"><call pos:start="575:13" pos:end="577:32"><name pos:start="575:13" pos:end="575:21">xa_decode</name><argument_list pos:start="575:22" pos:end="577:32">(<argument pos:start="575:23" pos:end="575:29"><expr pos:start="575:23" pos:end="575:29"><name pos:start="575:23" pos:end="575:29">samples</name></expr></argument>, <argument pos:start="575:32" pos:end="575:34"><expr pos:start="575:32" pos:end="575:34"><name pos:start="575:32" pos:end="575:34">src</name></expr></argument>, <argument pos:start="575:37" pos:end="575:49"><expr pos:start="575:37" pos:end="575:49"><operator pos:start="575:37" pos:end="575:37">&amp;</operator><name pos:start="575:38" pos:end="575:49"><name pos:start="575:38" pos:end="575:38">c</name><operator pos:start="575:39" pos:end="575:40">-&gt;</operator><name pos:start="575:41" pos:end="575:46">status</name><index pos:start="575:47" pos:end="575:49">[<expr pos:start="575:48" pos:end="575:48"><literal type="number" pos:start="575:48" pos:end="575:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="575:52" pos:end="575:64"><expr pos:start="575:52" pos:end="575:64"><operator pos:start="575:52" pos:end="575:52">&amp;</operator><name pos:start="575:53" pos:end="575:64"><name pos:start="575:53" pos:end="575:53">c</name><operator pos:start="575:54" pos:end="575:55">-&gt;</operator><name pos:start="575:56" pos:end="575:61">status</name><index pos:start="575:62" pos:end="575:64">[<expr pos:start="575:63" pos:end="575:63"><literal type="number" pos:start="575:63" pos:end="575:63">1</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="577:17" pos:end="577:31"><expr pos:start="577:17" pos:end="577:31"><name pos:start="577:17" pos:end="577:31"><name pos:start="577:17" pos:end="577:21">avctx</name><operator pos:start="577:22" pos:end="577:23">-&gt;</operator><name pos:start="577:24" pos:end="577:31">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="579:13" pos:end="579:23"><expr pos:start="579:13" pos:end="579:22"><name pos:start="579:13" pos:end="579:15">src</name> <operator pos:start="579:17" pos:end="579:18">+=</operator> <literal type="number" pos:start="579:20" pos:end="579:22">128</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="581:13" pos:end="581:30"><expr pos:start="581:13" pos:end="581:29"><name pos:start="581:13" pos:end="581:19">samples</name> <operator pos:start="581:21" pos:end="581:22">+=</operator> <literal type="number" pos:start="581:24" pos:end="581:25">28</literal> <operator pos:start="581:27" pos:end="581:27">*</operator> <literal type="number" pos:start="581:29" pos:end="581:29">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:28"><expr pos:start="583:13" pos:end="583:27"><name pos:start="583:13" pos:end="583:20">buf_size</name> <operator pos:start="583:22" pos:end="583:23">-=</operator> <literal type="number" pos:start="583:25" pos:end="583:27">128</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="587:9" pos:end="587:14">break;</break>

    <case pos:start="589:5" pos:end="589:27">case <expr pos:start="589:10" pos:end="589:26"><name pos:start="589:10" pos:end="589:26">CODEC_ID_ADPCM_EA</name></expr>:</case>

        <expr_stmt pos:start="591:9" pos:end="591:40"><expr pos:start="591:9" pos:end="591:39"><name pos:start="591:9" pos:end="591:24">samples_in_chunk</name> <operator pos:start="591:26" pos:end="591:26">=</operator> <call pos:start="591:28" pos:end="591:39"><name pos:start="591:28" pos:end="591:34">AV_RL32</name><argument_list pos:start="591:35" pos:end="591:39">(<argument pos:start="591:36" pos:end="591:38"><expr pos:start="591:36" pos:end="591:38"><name pos:start="591:36" pos:end="591:38">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="593:9" pos:end="599:9"><if pos:start="593:9" pos:end="599:9">if <condition pos:start="593:12" pos:end="593:54">(<expr pos:start="593:13" pos:end="593:53"><name pos:start="593:13" pos:end="593:28">samples_in_chunk</name> <operator pos:start="593:30" pos:end="593:31">&gt;=</operator> <operator pos:start="593:33" pos:end="593:33">(</operator><operator pos:start="593:34" pos:end="593:34">(</operator><name pos:start="593:35" pos:end="593:42">buf_size</name> <operator pos:start="593:44" pos:end="593:44">-</operator> <literal type="number" pos:start="593:46" pos:end="593:47">12</literal><operator pos:start="593:48" pos:end="593:48">)</operator> <operator pos:start="593:50" pos:end="593:50">*</operator> <literal type="number" pos:start="593:52" pos:end="593:52">2</literal><operator pos:start="593:53" pos:end="593:53">)</operator></expr>)</condition> <block pos:start="593:56" pos:end="599:9">{<block_content pos:start="595:13" pos:end="597:18">

            <expr_stmt pos:start="595:13" pos:end="595:28"><expr pos:start="595:13" pos:end="595:27"><name pos:start="595:13" pos:end="595:15">src</name> <operator pos:start="595:17" pos:end="595:18">+=</operator> <name pos:start="595:20" pos:end="595:27">buf_size</name></expr>;</expr_stmt>

            <break pos:start="597:13" pos:end="597:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:17"><expr pos:start="601:9" pos:end="601:16"><name pos:start="601:9" pos:end="601:11">src</name> <operator pos:start="601:13" pos:end="601:14">+=</operator> <literal type="number" pos:start="601:16" pos:end="601:16">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="603:9" pos:end="603:52"><expr pos:start="603:9" pos:end="603:51"><name pos:start="603:9" pos:end="603:27">current_left_sample</name> <operator pos:start="603:29" pos:end="603:29">=</operator> <operator pos:start="603:31" pos:end="603:31">(</operator><name pos:start="603:32" pos:end="603:38">int16_t</name><operator pos:start="603:39" pos:end="603:39">)</operator><call pos:start="603:40" pos:end="603:51"><name pos:start="603:40" pos:end="603:46">AV_RL16</name><argument_list pos:start="603:47" pos:end="603:51">(<argument pos:start="603:48" pos:end="603:50"><expr pos:start="603:48" pos:end="603:50"><name pos:start="603:48" pos:end="603:50">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="605:9" pos:end="605:17"><expr pos:start="605:9" pos:end="605:16"><name pos:start="605:9" pos:end="605:11">src</name> <operator pos:start="605:13" pos:end="605:14">+=</operator> <literal type="number" pos:start="605:16" pos:end="605:16">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="607:9" pos:end="607:53"><expr pos:start="607:9" pos:end="607:52"><name pos:start="607:9" pos:end="607:28">previous_left_sample</name> <operator pos:start="607:30" pos:end="607:30">=</operator> <operator pos:start="607:32" pos:end="607:32">(</operator><name pos:start="607:33" pos:end="607:39">int16_t</name><operator pos:start="607:40" pos:end="607:40">)</operator><call pos:start="607:41" pos:end="607:52"><name pos:start="607:41" pos:end="607:47">AV_RL16</name><argument_list pos:start="607:48" pos:end="607:52">(<argument pos:start="607:49" pos:end="607:51"><expr pos:start="607:49" pos:end="607:51"><name pos:start="607:49" pos:end="607:51">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:17"><expr pos:start="609:9" pos:end="609:16"><name pos:start="609:9" pos:end="609:11">src</name> <operator pos:start="609:13" pos:end="609:14">+=</operator> <literal type="number" pos:start="609:16" pos:end="609:16">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="611:9" pos:end="611:53"><expr pos:start="611:9" pos:end="611:52"><name pos:start="611:9" pos:end="611:28">current_right_sample</name> <operator pos:start="611:30" pos:end="611:30">=</operator> <operator pos:start="611:32" pos:end="611:32">(</operator><name pos:start="611:33" pos:end="611:39">int16_t</name><operator pos:start="611:40" pos:end="611:40">)</operator><call pos:start="611:41" pos:end="611:52"><name pos:start="611:41" pos:end="611:47">AV_RL16</name><argument_list pos:start="611:48" pos:end="611:52">(<argument pos:start="611:49" pos:end="611:51"><expr pos:start="611:49" pos:end="611:51"><name pos:start="611:49" pos:end="611:51">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="613:9" pos:end="613:17"><expr pos:start="613:9" pos:end="613:16"><name pos:start="613:9" pos:end="613:11">src</name> <operator pos:start="613:13" pos:end="613:14">+=</operator> <literal type="number" pos:start="613:16" pos:end="613:16">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="615:9" pos:end="615:54"><expr pos:start="615:9" pos:end="615:53"><name pos:start="615:9" pos:end="615:29">previous_right_sample</name> <operator pos:start="615:31" pos:end="615:31">=</operator> <operator pos:start="615:33" pos:end="615:33">(</operator><name pos:start="615:34" pos:end="615:40">int16_t</name><operator pos:start="615:41" pos:end="615:41">)</operator><call pos:start="615:42" pos:end="615:53"><name pos:start="615:42" pos:end="615:48">AV_RL16</name><argument_list pos:start="615:49" pos:end="615:53">(<argument pos:start="615:50" pos:end="615:52"><expr pos:start="615:50" pos:end="615:52"><name pos:start="615:50" pos:end="615:52">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="617:9" pos:end="617:17"><expr pos:start="617:9" pos:end="617:16"><name pos:start="617:9" pos:end="617:11">src</name> <operator pos:start="617:13" pos:end="617:14">+=</operator> <literal type="number" pos:start="617:16" pos:end="617:16">2</literal></expr>;</expr_stmt>



        <for pos:start="621:9" pos:end="685:9">for <control pos:start="621:13" pos:end="621:63">(<init pos:start="621:14" pos:end="621:24"><expr pos:start="621:14" pos:end="621:23"><name pos:start="621:14" pos:end="621:19">count1</name> <operator pos:start="621:21" pos:end="621:21">=</operator> <literal type="number" pos:start="621:23" pos:end="621:23">0</literal></expr>;</init> <condition pos:start="621:26" pos:end="621:54"><expr pos:start="621:26" pos:end="621:53"><name pos:start="621:26" pos:end="621:31">count1</name> <operator pos:start="621:33" pos:end="621:33">&lt;</operator> <name pos:start="621:35" pos:end="621:50">samples_in_chunk</name><operator pos:start="621:51" pos:end="621:51">/</operator><literal type="number" pos:start="621:52" pos:end="621:53">28</literal></expr>;</condition><incr pos:start="621:55" pos:end="621:62"><expr pos:start="621:55" pos:end="621:62"><name pos:start="621:55" pos:end="621:60">count1</name><operator pos:start="621:61" pos:end="621:62">++</operator></expr></incr>)</control> <block pos:start="621:65" pos:end="685:9">{<block_content pos:start="623:13" pos:end="683:13">

            <expr_stmt pos:start="623:13" pos:end="623:57"><expr pos:start="623:13" pos:end="623:56"><name pos:start="623:13" pos:end="623:19">coeff1l</name> <operator pos:start="623:21" pos:end="623:21">=</operator> <name pos:start="623:23" pos:end="623:56"><name pos:start="623:23" pos:end="623:36">ea_adpcm_table</name><index pos:start="623:37" pos:end="623:56">[<expr pos:start="623:38" pos:end="623:55"><operator pos:start="623:38" pos:end="623:38">(</operator><operator pos:start="623:39" pos:end="623:39">*</operator><name pos:start="623:40" pos:end="623:42">src</name> <operator pos:start="623:44" pos:end="623:45">&gt;&gt;</operator> <literal type="number" pos:start="623:47" pos:end="623:47">4</literal><operator pos:start="623:48" pos:end="623:48">)</operator> <operator pos:start="623:50" pos:end="623:50">&amp;</operator> <literal type="number" pos:start="623:52" pos:end="623:55">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="625:13" pos:end="625:63"><expr pos:start="625:13" pos:end="625:62"><name pos:start="625:13" pos:end="625:19">coeff2l</name> <operator pos:start="625:21" pos:end="625:21">=</operator> <name pos:start="625:23" pos:end="625:62"><name pos:start="625:23" pos:end="625:36">ea_adpcm_table</name><index pos:start="625:37" pos:end="625:62">[<expr pos:start="625:38" pos:end="625:61"><operator pos:start="625:38" pos:end="625:38">(</operator><operator pos:start="625:39" pos:end="625:39">(</operator><operator pos:start="625:40" pos:end="625:40">*</operator><name pos:start="625:41" pos:end="625:43">src</name> <operator pos:start="625:45" pos:end="625:46">&gt;&gt;</operator> <literal type="number" pos:start="625:48" pos:end="625:48">4</literal><operator pos:start="625:49" pos:end="625:49">)</operator> <operator pos:start="625:51" pos:end="625:51">&amp;</operator> <literal type="number" pos:start="625:53" pos:end="625:56">0x0F</literal><operator pos:start="625:57" pos:end="625:57">)</operator> <operator pos:start="625:59" pos:end="625:59">+</operator> <literal type="number" pos:start="625:61" pos:end="625:61">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="627:13" pos:end="627:50"><expr pos:start="627:13" pos:end="627:49"><name pos:start="627:13" pos:end="627:19">coeff1r</name> <operator pos:start="627:21" pos:end="627:21">=</operator> <name pos:start="627:23" pos:end="627:49"><name pos:start="627:23" pos:end="627:36">ea_adpcm_table</name><index pos:start="627:37" pos:end="627:49">[<expr pos:start="627:38" pos:end="627:48"><operator pos:start="627:38" pos:end="627:38">*</operator><name pos:start="627:39" pos:end="627:41">src</name> <operator pos:start="627:43" pos:end="627:43">&amp;</operator> <literal type="number" pos:start="627:45" pos:end="627:48">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="629:13" pos:end="629:56"><expr pos:start="629:13" pos:end="629:55"><name pos:start="629:13" pos:end="629:19">coeff2r</name> <operator pos:start="629:21" pos:end="629:21">=</operator> <name pos:start="629:23" pos:end="629:55"><name pos:start="629:23" pos:end="629:36">ea_adpcm_table</name><index pos:start="629:37" pos:end="629:55">[<expr pos:start="629:38" pos:end="629:54"><operator pos:start="629:38" pos:end="629:38">(</operator><operator pos:start="629:39" pos:end="629:39">*</operator><name pos:start="629:40" pos:end="629:42">src</name> <operator pos:start="629:44" pos:end="629:44">&amp;</operator> <literal type="number" pos:start="629:46" pos:end="629:49">0x0F</literal><operator pos:start="629:50" pos:end="629:50">)</operator> <operator pos:start="629:52" pos:end="629:52">+</operator> <literal type="number" pos:start="629:54" pos:end="629:54">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="631:13" pos:end="631:18"><expr pos:start="631:13" pos:end="631:17"><name pos:start="631:13" pos:end="631:15">src</name><operator pos:start="631:16" pos:end="631:17">++</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="635:13" pos:end="635:50"><expr pos:start="635:13" pos:end="635:49"><name pos:start="635:13" pos:end="635:22">shift_left</name> <operator pos:start="635:24" pos:end="635:24">=</operator> <operator pos:start="635:26" pos:end="635:26">(</operator><operator pos:start="635:27" pos:end="635:27">(</operator><operator pos:start="635:28" pos:end="635:28">*</operator><name pos:start="635:29" pos:end="635:31">src</name> <operator pos:start="635:33" pos:end="635:34">&gt;&gt;</operator> <literal type="number" pos:start="635:36" pos:end="635:36">4</literal><operator pos:start="635:37" pos:end="635:37">)</operator> <operator pos:start="635:39" pos:end="635:39">&amp;</operator> <literal type="number" pos:start="635:41" pos:end="635:44">0x0F</literal><operator pos:start="635:45" pos:end="635:45">)</operator> <operator pos:start="635:47" pos:end="635:47">+</operator> <literal type="number" pos:start="635:49" pos:end="635:49">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="637:13" pos:end="637:44"><expr pos:start="637:13" pos:end="637:43"><name pos:start="637:13" pos:end="637:23">shift_right</name> <operator pos:start="637:25" pos:end="637:25">=</operator> <operator pos:start="637:27" pos:end="637:27">(</operator><operator pos:start="637:28" pos:end="637:28">*</operator><name pos:start="637:29" pos:end="637:31">src</name> <operator pos:start="637:33" pos:end="637:33">&amp;</operator> <literal type="number" pos:start="637:35" pos:end="637:38">0x0F</literal><operator pos:start="637:39" pos:end="637:39">)</operator> <operator pos:start="637:41" pos:end="637:41">+</operator> <literal type="number" pos:start="637:43" pos:end="637:43">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="639:13" pos:end="639:18"><expr pos:start="639:13" pos:end="639:17"><name pos:start="639:13" pos:end="639:15">src</name><operator pos:start="639:16" pos:end="639:17">++</operator></expr>;</expr_stmt>



            <for pos:start="643:13" pos:end="683:13">for <control pos:start="643:17" pos:end="643:51">(<init pos:start="643:18" pos:end="643:28"><expr pos:start="643:18" pos:end="643:27"><name pos:start="643:18" pos:end="643:23">count2</name> <operator pos:start="643:25" pos:end="643:25">=</operator> <literal type="number" pos:start="643:27" pos:end="643:27">0</literal></expr>;</init> <condition pos:start="643:30" pos:end="643:41"><expr pos:start="643:30" pos:end="643:40"><name pos:start="643:30" pos:end="643:35">count2</name> <operator pos:start="643:37" pos:end="643:37">&lt;</operator> <literal type="number" pos:start="643:39" pos:end="643:40">28</literal></expr>;</condition> <incr pos:start="643:43" pos:end="643:50"><expr pos:start="643:43" pos:end="643:50"><name pos:start="643:43" pos:end="643:48">count2</name><operator pos:start="643:49" pos:end="643:50">++</operator></expr></incr>)</control> <block pos:start="643:53" pos:end="683:13">{<block_content pos:start="645:17" pos:end="681:66">

                <expr_stmt pos:start="645:17" pos:end="645:73"><expr pos:start="645:17" pos:end="645:72"><name pos:start="645:17" pos:end="645:32">next_left_sample</name> <operator pos:start="645:34" pos:end="645:34">=</operator> <operator pos:start="645:36" pos:end="645:36">(</operator><operator pos:start="645:37" pos:end="645:37">(</operator><operator pos:start="645:38" pos:end="645:38">(</operator><operator pos:start="645:39" pos:end="645:39">*</operator><name pos:start="645:40" pos:end="645:42">src</name> <operator pos:start="645:44" pos:end="645:44">&amp;</operator> <literal type="number" pos:start="645:46" pos:end="645:49">0xF0</literal><operator pos:start="645:50" pos:end="645:50">)</operator> <operator pos:start="645:52" pos:end="645:53">&lt;&lt;</operator> <literal type="number" pos:start="645:55" pos:end="645:56">24</literal><operator pos:start="645:57" pos:end="645:57">)</operator> <operator pos:start="645:59" pos:end="645:60">&gt;&gt;</operator> <name pos:start="645:62" pos:end="645:71">shift_left</name><operator pos:start="645:72" pos:end="645:72">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="647:17" pos:end="647:75"><expr pos:start="647:17" pos:end="647:74"><name pos:start="647:17" pos:end="647:33">next_right_sample</name> <operator pos:start="647:35" pos:end="647:35">=</operator> <operator pos:start="647:37" pos:end="647:37">(</operator><operator pos:start="647:38" pos:end="647:38">(</operator><operator pos:start="647:39" pos:end="647:39">(</operator><operator pos:start="647:40" pos:end="647:40">*</operator><name pos:start="647:41" pos:end="647:43">src</name> <operator pos:start="647:45" pos:end="647:45">&amp;</operator> <literal type="number" pos:start="647:47" pos:end="647:50">0x0F</literal><operator pos:start="647:51" pos:end="647:51">)</operator> <operator pos:start="647:53" pos:end="647:54">&lt;&lt;</operator> <literal type="number" pos:start="647:56" pos:end="647:57">28</literal><operator pos:start="647:58" pos:end="647:58">)</operator> <operator pos:start="647:60" pos:end="647:61">&gt;&gt;</operator> <name pos:start="647:63" pos:end="647:73">shift_right</name><operator pos:start="647:74" pos:end="647:74">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="649:17" pos:end="649:22"><expr pos:start="649:17" pos:end="649:21"><name pos:start="649:17" pos:end="649:19">src</name><operator pos:start="649:20" pos:end="649:21">++</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="653:17" pos:end="657:66"><expr pos:start="653:17" pos:end="657:65"><name pos:start="653:17" pos:end="653:32">next_left_sample</name> <operator pos:start="653:34" pos:end="653:34">=</operator> <operator pos:start="653:36" pos:end="653:36">(</operator><name pos:start="653:37" pos:end="653:52">next_left_sample</name> <operator pos:start="653:54" pos:end="653:54">+</operator>

                    <operator pos:start="655:21" pos:end="655:21">(</operator><name pos:start="655:22" pos:end="655:40">current_left_sample</name> <operator pos:start="655:42" pos:end="655:42">*</operator> <name pos:start="655:44" pos:end="655:50">coeff1l</name><operator pos:start="655:51" pos:end="655:51">)</operator> <operator pos:start="655:53" pos:end="655:53">+</operator>

                    <operator pos:start="657:21" pos:end="657:21">(</operator><name pos:start="657:22" pos:end="657:41">previous_left_sample</name> <operator pos:start="657:43" pos:end="657:43">*</operator> <name pos:start="657:45" pos:end="657:51">coeff2l</name><operator pos:start="657:52" pos:end="657:52">)</operator> <operator pos:start="657:54" pos:end="657:54">+</operator> <literal type="number" pos:start="657:56" pos:end="657:59">0x80</literal><operator pos:start="657:60" pos:end="657:60">)</operator> <operator pos:start="657:62" pos:end="657:63">&gt;&gt;</operator> <literal type="number" pos:start="657:65" pos:end="657:65">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="659:17" pos:end="663:67"><expr pos:start="659:17" pos:end="663:66"><name pos:start="659:17" pos:end="659:33">next_right_sample</name> <operator pos:start="659:35" pos:end="659:35">=</operator> <operator pos:start="659:37" pos:end="659:37">(</operator><name pos:start="659:38" pos:end="659:54">next_right_sample</name> <operator pos:start="659:56" pos:end="659:56">+</operator>

                    <operator pos:start="661:21" pos:end="661:21">(</operator><name pos:start="661:22" pos:end="661:41">current_right_sample</name> <operator pos:start="661:43" pos:end="661:43">*</operator> <name pos:start="661:45" pos:end="661:51">coeff1r</name><operator pos:start="661:52" pos:end="661:52">)</operator> <operator pos:start="661:54" pos:end="661:54">+</operator>

                    <operator pos:start="663:21" pos:end="663:21">(</operator><name pos:start="663:22" pos:end="663:42">previous_right_sample</name> <operator pos:start="663:44" pos:end="663:44">*</operator> <name pos:start="663:46" pos:end="663:52">coeff2r</name><operator pos:start="663:53" pos:end="663:53">)</operator> <operator pos:start="663:55" pos:end="663:55">+</operator> <literal type="number" pos:start="663:57" pos:end="663:60">0x80</literal><operator pos:start="663:61" pos:end="663:61">)</operator> <operator pos:start="663:63" pos:end="663:64">&gt;&gt;</operator> <literal type="number" pos:start="663:66" pos:end="663:66">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="665:17" pos:end="665:49"><expr pos:start="665:17" pos:end="665:48"><call pos:start="665:17" pos:end="665:48"><name pos:start="665:17" pos:end="665:30">CLAMP_TO_SHORT</name><argument_list pos:start="665:31" pos:end="665:48">(<argument pos:start="665:32" pos:end="665:47"><expr pos:start="665:32" pos:end="665:47"><name pos:start="665:32" pos:end="665:47">next_left_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="667:17" pos:end="667:50"><expr pos:start="667:17" pos:end="667:49"><call pos:start="667:17" pos:end="667:49"><name pos:start="667:17" pos:end="667:30">CLAMP_TO_SHORT</name><argument_list pos:start="667:31" pos:end="667:49">(<argument pos:start="667:32" pos:end="667:48"><expr pos:start="667:32" pos:end="667:48"><name pos:start="667:32" pos:end="667:48">next_right_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="671:17" pos:end="671:59"><expr pos:start="671:17" pos:end="671:58"><name pos:start="671:17" pos:end="671:36">previous_left_sample</name> <operator pos:start="671:38" pos:end="671:38">=</operator> <name pos:start="671:40" pos:end="671:58">current_left_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="673:17" pos:end="673:55"><expr pos:start="673:17" pos:end="673:54"><name pos:start="673:17" pos:end="673:35">current_left_sample</name> <operator pos:start="673:37" pos:end="673:37">=</operator> <name pos:start="673:39" pos:end="673:54">next_left_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="675:17" pos:end="675:61"><expr pos:start="675:17" pos:end="675:60"><name pos:start="675:17" pos:end="675:37">previous_right_sample</name> <operator pos:start="675:39" pos:end="675:39">=</operator> <name pos:start="675:41" pos:end="675:60">current_right_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="677:17" pos:end="677:57"><expr pos:start="677:17" pos:end="677:56"><name pos:start="677:17" pos:end="677:36">current_right_sample</name> <operator pos:start="677:38" pos:end="677:38">=</operator> <name pos:start="677:40" pos:end="677:56">next_right_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="679:17" pos:end="679:65"><expr pos:start="679:17" pos:end="679:64"><operator pos:start="679:17" pos:end="679:17">*</operator><name pos:start="679:18" pos:end="679:24">samples</name><operator pos:start="679:25" pos:end="679:26">++</operator> <operator pos:start="679:28" pos:end="679:28">=</operator> <operator pos:start="679:30" pos:end="679:30">(</operator><name pos:start="679:31" pos:end="679:38">unsigned</name> <name pos:start="679:40" pos:end="679:44">short</name><operator pos:start="679:45" pos:end="679:45">)</operator><name pos:start="679:46" pos:end="679:64">current_left_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="681:17" pos:end="681:66"><expr pos:start="681:17" pos:end="681:65"><operator pos:start="681:17" pos:end="681:17">*</operator><name pos:start="681:18" pos:end="681:24">samples</name><operator pos:start="681:25" pos:end="681:26">++</operator> <operator pos:start="681:28" pos:end="681:28">=</operator> <operator pos:start="681:30" pos:end="681:30">(</operator><name pos:start="681:31" pos:end="681:38">unsigned</name> <name pos:start="681:40" pos:end="681:44">short</name><operator pos:start="681:45" pos:end="681:45">)</operator><name pos:start="681:46" pos:end="681:65">current_right_sample</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="687:9" pos:end="687:14">break;</break>

    <case pos:start="689:5" pos:end="689:35">case <expr pos:start="689:10" pos:end="689:34"><name pos:start="689:10" pos:end="689:34">CODEC_ID_ADPCM_IMA_SMJPEG</name></expr>:</case>

        <expr_stmt pos:start="691:9" pos:end="691:38"><expr pos:start="691:9" pos:end="691:37"><name pos:start="691:9" pos:end="691:20"><name pos:start="691:9" pos:end="691:9">c</name><operator pos:start="691:10" pos:end="691:11">-&gt;</operator><name pos:start="691:12" pos:end="691:17">status</name><index pos:start="691:18" pos:end="691:20">[<expr pos:start="691:19" pos:end="691:19"><literal type="number" pos:start="691:19" pos:end="691:19">0</literal></expr>]</index></name><operator pos:start="691:21" pos:end="691:21">.</operator><name pos:start="691:22" pos:end="691:30">predictor</name> <operator pos:start="691:32" pos:end="691:32">=</operator> <operator pos:start="691:34" pos:end="691:34">*</operator><name pos:start="691:35" pos:end="691:37">src</name></expr>;</expr_stmt>

        <expr_stmt pos:start="693:9" pos:end="693:17"><expr pos:start="693:9" pos:end="693:16"><name pos:start="693:9" pos:end="693:11">src</name> <operator pos:start="693:13" pos:end="693:14">+=</operator> <literal type="number" pos:start="693:16" pos:end="693:16">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="695:9" pos:end="695:41"><expr pos:start="695:9" pos:end="695:40"><name pos:start="695:9" pos:end="695:20"><name pos:start="695:9" pos:end="695:9">c</name><operator pos:start="695:10" pos:end="695:11">-&gt;</operator><name pos:start="695:12" pos:end="695:17">status</name><index pos:start="695:18" pos:end="695:20">[<expr pos:start="695:19" pos:end="695:19"><literal type="number" pos:start="695:19" pos:end="695:19">0</literal></expr>]</index></name><operator pos:start="695:21" pos:end="695:21">.</operator><name pos:start="695:22" pos:end="695:31">step_index</name> <operator pos:start="695:33" pos:end="695:33">=</operator> <operator pos:start="695:35" pos:end="695:35">*</operator><name pos:start="695:36" pos:end="695:38">src</name><operator pos:start="695:39" pos:end="695:40">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="697:9" pos:end="697:14"><expr pos:start="697:9" pos:end="697:13"><name pos:start="697:9" pos:end="697:11">src</name><operator pos:start="697:12" pos:end="697:13">++</operator></expr>;</expr_stmt>  <comment type="block" pos:start="697:17" pos:end="697:66">/* skip another byte before getting to the meat */</comment>

        <while pos:start="699:9" pos:end="711:9">while <condition pos:start="699:15" pos:end="699:36">(<expr pos:start="699:16" pos:end="699:35"><name pos:start="699:16" pos:end="699:18">src</name> <operator pos:start="699:20" pos:end="699:20">&lt;</operator> <name pos:start="699:22" pos:end="699:24">buf</name> <operator pos:start="699:26" pos:end="699:26">+</operator> <name pos:start="699:28" pos:end="699:35">buf_size</name></expr>)</condition> <block pos:start="699:38" pos:end="711:9">{<block_content pos:start="701:13" pos:end="709:18">

            <expr_stmt pos:start="701:13" pos:end="703:32"><expr pos:start="701:13" pos:end="703:31"><operator pos:start="701:13" pos:end="701:13">*</operator><name pos:start="701:14" pos:end="701:20">samples</name><operator pos:start="701:21" pos:end="701:22">++</operator> <operator pos:start="701:24" pos:end="701:24">=</operator> <call pos:start="701:26" pos:end="703:31"><name pos:start="701:26" pos:end="701:48">adpcm_ima_expand_nibble</name><argument_list pos:start="701:49" pos:end="703:31">(<argument pos:start="701:50" pos:end="701:62"><expr pos:start="701:50" pos:end="701:62"><operator pos:start="701:50" pos:end="701:50">&amp;</operator><name pos:start="701:51" pos:end="701:62"><name pos:start="701:51" pos:end="701:51">c</name><operator pos:start="701:52" pos:end="701:53">-&gt;</operator><name pos:start="701:54" pos:end="701:59">status</name><index pos:start="701:60" pos:end="701:62">[<expr pos:start="701:61" pos:end="701:61"><literal type="number" pos:start="701:61" pos:end="701:61">0</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="703:17" pos:end="703:27"><expr pos:start="703:17" pos:end="703:27"><operator pos:start="703:17" pos:end="703:17">*</operator><name pos:start="703:18" pos:end="703:20">src</name> <operator pos:start="703:22" pos:end="703:22">&amp;</operator> <literal type="number" pos:start="703:24" pos:end="703:27">0x0F</literal></expr></argument>, <argument pos:start="703:30" pos:end="703:30"><expr pos:start="703:30" pos:end="703:30"><literal type="number" pos:start="703:30" pos:end="703:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="707:39"><expr pos:start="705:13" pos:end="707:38"><operator pos:start="705:13" pos:end="705:13">*</operator><name pos:start="705:14" pos:end="705:20">samples</name><operator pos:start="705:21" pos:end="705:22">++</operator> <operator pos:start="705:24" pos:end="705:24">=</operator> <call pos:start="705:26" pos:end="707:38"><name pos:start="705:26" pos:end="705:48">adpcm_ima_expand_nibble</name><argument_list pos:start="705:49" pos:end="707:38">(<argument pos:start="705:50" pos:end="705:62"><expr pos:start="705:50" pos:end="705:62"><operator pos:start="705:50" pos:end="705:50">&amp;</operator><name pos:start="705:51" pos:end="705:62"><name pos:start="705:51" pos:end="705:51">c</name><operator pos:start="705:52" pos:end="705:53">-&gt;</operator><name pos:start="705:54" pos:end="705:59">status</name><index pos:start="705:60" pos:end="705:62">[<expr pos:start="705:61" pos:end="705:61"><literal type="number" pos:start="705:61" pos:end="705:61">0</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="707:17" pos:end="707:34"><expr pos:start="707:17" pos:end="707:34"><operator pos:start="707:17" pos:end="707:17">(</operator><operator pos:start="707:18" pos:end="707:18">*</operator><name pos:start="707:19" pos:end="707:21">src</name> <operator pos:start="707:23" pos:end="707:24">&gt;&gt;</operator> <literal type="number" pos:start="707:26" pos:end="707:26">4</literal><operator pos:start="707:27" pos:end="707:27">)</operator> <operator pos:start="707:29" pos:end="707:29">&amp;</operator> <literal type="number" pos:start="707:31" pos:end="707:34">0x0F</literal></expr></argument>, <argument pos:start="707:37" pos:end="707:37"><expr pos:start="707:37" pos:end="707:37"><literal type="number" pos:start="707:37" pos:end="707:37">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="709:13" pos:end="709:18"><expr pos:start="709:13" pos:end="709:17"><name pos:start="709:13" pos:end="709:15">src</name><operator pos:start="709:16" pos:end="709:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="713:9" pos:end="713:14">break;</break>

    <case pos:start="715:5" pos:end="715:27">case <expr pos:start="715:10" pos:end="715:26"><name pos:start="715:10" pos:end="715:26">CODEC_ID_ADPCM_CT</name></expr>:</case>

        <while pos:start="717:9" pos:end="743:9">while <condition pos:start="717:15" pos:end="717:36">(<expr pos:start="717:16" pos:end="717:35"><name pos:start="717:16" pos:end="717:18">src</name> <operator pos:start="717:20" pos:end="717:20">&lt;</operator> <name pos:start="717:22" pos:end="717:24">buf</name> <operator pos:start="717:26" pos:end="717:26">+</operator> <name pos:start="717:28" pos:end="717:35">buf_size</name></expr>)</condition> <block pos:start="717:38" pos:end="743:9">{<block_content pos:start="719:13" pos:end="741:18">

            <if_stmt pos:start="719:13" pos:end="739:13"><if pos:start="719:13" pos:end="729:13">if <condition pos:start="719:16" pos:end="719:19">(<expr pos:start="719:17" pos:end="719:18"><name pos:start="719:17" pos:end="719:18">st</name></expr>)</condition> <block pos:start="719:21" pos:end="729:13">{<block_content pos:start="721:17" pos:end="727:35">

                <expr_stmt pos:start="721:17" pos:end="723:42"><expr pos:start="721:17" pos:end="723:41"><operator pos:start="721:17" pos:end="721:17">*</operator><name pos:start="721:18" pos:end="721:24">samples</name><operator pos:start="721:25" pos:end="721:26">++</operator> <operator pos:start="721:28" pos:end="721:28">=</operator> <call pos:start="721:30" pos:end="723:41"><name pos:start="721:30" pos:end="721:51">adpcm_ct_expand_nibble</name><argument_list pos:start="721:52" pos:end="723:41">(<argument pos:start="721:53" pos:end="721:65"><expr pos:start="721:53" pos:end="721:65"><operator pos:start="721:53" pos:end="721:53">&amp;</operator><name pos:start="721:54" pos:end="721:65"><name pos:start="721:54" pos:end="721:54">c</name><operator pos:start="721:55" pos:end="721:56">-&gt;</operator><name pos:start="721:57" pos:end="721:62">status</name><index pos:start="721:63" pos:end="721:65">[<expr pos:start="721:64" pos:end="721:64"><literal type="number" pos:start="721:64" pos:end="721:64">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="723:21" pos:end="723:40"><expr pos:start="723:21" pos:end="723:40"><operator pos:start="723:21" pos:end="723:21">(</operator><name pos:start="723:22" pos:end="723:27"><name pos:start="723:22" pos:end="723:24">src</name><index pos:start="723:25" pos:end="723:27">[<expr pos:start="723:26" pos:end="723:26"><literal type="number" pos:start="723:26" pos:end="723:26">0</literal></expr>]</index></name> <operator pos:start="723:29" pos:end="723:30">&gt;&gt;</operator> <literal type="number" pos:start="723:32" pos:end="723:32">4</literal><operator pos:start="723:33" pos:end="723:33">)</operator> <operator pos:start="723:35" pos:end="723:35">&amp;</operator> <literal type="number" pos:start="723:37" pos:end="723:40">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="725:17" pos:end="727:35"><expr pos:start="725:17" pos:end="727:34"><operator pos:start="725:17" pos:end="725:17">*</operator><name pos:start="725:18" pos:end="725:24">samples</name><operator pos:start="725:25" pos:end="725:26">++</operator> <operator pos:start="725:28" pos:end="725:28">=</operator> <call pos:start="725:30" pos:end="727:34"><name pos:start="725:30" pos:end="725:51">adpcm_ct_expand_nibble</name><argument_list pos:start="725:52" pos:end="727:34">(<argument pos:start="725:53" pos:end="725:65"><expr pos:start="725:53" pos:end="725:65"><operator pos:start="725:53" pos:end="725:53">&amp;</operator><name pos:start="725:54" pos:end="725:65"><name pos:start="725:54" pos:end="725:54">c</name><operator pos:start="725:55" pos:end="725:56">-&gt;</operator><name pos:start="725:57" pos:end="725:62">status</name><index pos:start="725:63" pos:end="725:65">[<expr pos:start="725:64" pos:end="725:64"><literal type="number" pos:start="725:64" pos:end="725:64">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="727:21" pos:end="727:33"><expr pos:start="727:21" pos:end="727:33"><name pos:start="727:21" pos:end="727:26"><name pos:start="727:21" pos:end="727:23">src</name><index pos:start="727:24" pos:end="727:26">[<expr pos:start="727:25" pos:end="727:25"><literal type="number" pos:start="727:25" pos:end="727:25">0</literal></expr>]</index></name> <operator pos:start="727:28" pos:end="727:28">&amp;</operator> <literal type="number" pos:start="727:30" pos:end="727:33">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="729:15" pos:end="739:13">else <block pos:start="729:20" pos:end="739:13">{<block_content pos:start="731:17" pos:end="737:35">

                <expr_stmt pos:start="731:17" pos:end="733:42"><expr pos:start="731:17" pos:end="733:41"><operator pos:start="731:17" pos:end="731:17">*</operator><name pos:start="731:18" pos:end="731:24">samples</name><operator pos:start="731:25" pos:end="731:26">++</operator> <operator pos:start="731:28" pos:end="731:28">=</operator> <call pos:start="731:30" pos:end="733:41"><name pos:start="731:30" pos:end="731:51">adpcm_ct_expand_nibble</name><argument_list pos:start="731:52" pos:end="733:41">(<argument pos:start="731:53" pos:end="731:65"><expr pos:start="731:53" pos:end="731:65"><operator pos:start="731:53" pos:end="731:53">&amp;</operator><name pos:start="731:54" pos:end="731:65"><name pos:start="731:54" pos:end="731:54">c</name><operator pos:start="731:55" pos:end="731:56">-&gt;</operator><name pos:start="731:57" pos:end="731:62">status</name><index pos:start="731:63" pos:end="731:65">[<expr pos:start="731:64" pos:end="731:64"><literal type="number" pos:start="731:64" pos:end="731:64">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="733:21" pos:end="733:40"><expr pos:start="733:21" pos:end="733:40"><operator pos:start="733:21" pos:end="733:21">(</operator><name pos:start="733:22" pos:end="733:27"><name pos:start="733:22" pos:end="733:24">src</name><index pos:start="733:25" pos:end="733:27">[<expr pos:start="733:26" pos:end="733:26"><literal type="number" pos:start="733:26" pos:end="733:26">0</literal></expr>]</index></name> <operator pos:start="733:29" pos:end="733:30">&gt;&gt;</operator> <literal type="number" pos:start="733:32" pos:end="733:32">4</literal><operator pos:start="733:33" pos:end="733:33">)</operator> <operator pos:start="733:35" pos:end="733:35">&amp;</operator> <literal type="number" pos:start="733:37" pos:end="733:40">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="735:17" pos:end="737:35"><expr pos:start="735:17" pos:end="737:34"><operator pos:start="735:17" pos:end="735:17">*</operator><name pos:start="735:18" pos:end="735:24">samples</name><operator pos:start="735:25" pos:end="735:26">++</operator> <operator pos:start="735:28" pos:end="735:28">=</operator> <call pos:start="735:30" pos:end="737:34"><name pos:start="735:30" pos:end="735:51">adpcm_ct_expand_nibble</name><argument_list pos:start="735:52" pos:end="737:34">(<argument pos:start="735:53" pos:end="735:65"><expr pos:start="735:53" pos:end="735:65"><operator pos:start="735:53" pos:end="735:53">&amp;</operator><name pos:start="735:54" pos:end="735:65"><name pos:start="735:54" pos:end="735:54">c</name><operator pos:start="735:55" pos:end="735:56">-&gt;</operator><name pos:start="735:57" pos:end="735:62">status</name><index pos:start="735:63" pos:end="735:65">[<expr pos:start="735:64" pos:end="735:64"><literal type="number" pos:start="735:64" pos:end="735:64">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="737:21" pos:end="737:33"><expr pos:start="737:21" pos:end="737:33"><name pos:start="737:21" pos:end="737:26"><name pos:start="737:21" pos:end="737:23">src</name><index pos:start="737:24" pos:end="737:26">[<expr pos:start="737:25" pos:end="737:25"><literal type="number" pos:start="737:25" pos:end="737:25">0</literal></expr>]</index></name> <operator pos:start="737:28" pos:end="737:28">&amp;</operator> <literal type="number" pos:start="737:30" pos:end="737:33">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="741:13" pos:end="741:18"><expr pos:start="741:13" pos:end="741:17"><name pos:start="741:13" pos:end="741:15">src</name><operator pos:start="741:16" pos:end="741:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="745:9" pos:end="745:14">break;</break>

    <case pos:start="747:5" pos:end="747:32">case <expr pos:start="747:10" pos:end="747:31"><name pos:start="747:10" pos:end="747:31">CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case>

    <case pos:start="749:5" pos:end="749:32">case <expr pos:start="749:10" pos:end="749:31"><name pos:start="749:10" pos:end="749:31">CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case>

    <case pos:start="751:5" pos:end="751:32">case <expr pos:start="751:10" pos:end="751:31"><name pos:start="751:10" pos:end="751:31">CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case>

        <if_stmt pos:start="753:9" pos:end="765:9"><if pos:start="753:9" pos:end="765:9">if <condition pos:start="753:12" pos:end="753:37">(<expr pos:start="753:13" pos:end="753:36"><operator pos:start="753:13" pos:end="753:13">!</operator><name pos:start="753:14" pos:end="753:25"><name pos:start="753:14" pos:end="753:14">c</name><operator pos:start="753:15" pos:end="753:16">-&gt;</operator><name pos:start="753:17" pos:end="753:22">status</name><index pos:start="753:23" pos:end="753:25">[<expr pos:start="753:24" pos:end="753:24"><literal type="number" pos:start="753:24" pos:end="753:24">0</literal></expr>]</index></name><operator pos:start="753:26" pos:end="753:26">.</operator><name pos:start="753:27" pos:end="753:36">step_index</name></expr>)</condition> <block pos:start="753:39" pos:end="765:9">{<block_content pos:start="757:13" pos:end="763:40">

            <comment type="block" pos:start="755:13" pos:end="755:48">/* the first byte is a raw sample */</comment>

            <expr_stmt pos:start="757:13" pos:end="757:47"><expr pos:start="757:13" pos:end="757:46"><operator pos:start="757:13" pos:end="757:13">*</operator><name pos:start="757:14" pos:end="757:20">samples</name><operator pos:start="757:21" pos:end="757:22">++</operator> <operator pos:start="757:24" pos:end="757:24">=</operator> <literal type="number" pos:start="757:26" pos:end="757:28">128</literal> <operator pos:start="757:30" pos:end="757:30">*</operator> <operator pos:start="757:32" pos:end="757:32">(</operator><operator pos:start="757:33" pos:end="757:33">*</operator><name pos:start="757:34" pos:end="757:36">src</name><operator pos:start="757:37" pos:end="757:38">++</operator> <operator pos:start="757:40" pos:end="757:40">-</operator> <literal type="number" pos:start="757:42" pos:end="757:45">0x80</literal><operator pos:start="757:46" pos:end="757:46">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="759:13" pos:end="761:49"><if pos:start="759:13" pos:end="761:49">if <condition pos:start="759:16" pos:end="759:19">(<expr pos:start="759:17" pos:end="759:18"><name pos:start="759:17" pos:end="759:18">st</name></expr>)</condition><block type="pseudo" pos:start="761:15" pos:end="761:49"><block_content pos:start="761:15" pos:end="761:49">

              <expr_stmt pos:start="761:15" pos:end="761:49"><expr pos:start="761:15" pos:end="761:48"><operator pos:start="761:15" pos:end="761:15">*</operator><name pos:start="761:16" pos:end="761:22">samples</name><operator pos:start="761:23" pos:end="761:24">++</operator> <operator pos:start="761:26" pos:end="761:26">=</operator> <literal type="number" pos:start="761:28" pos:end="761:30">128</literal> <operator pos:start="761:32" pos:end="761:32">*</operator> <operator pos:start="761:34" pos:end="761:34">(</operator><operator pos:start="761:35" pos:end="761:35">*</operator><name pos:start="761:36" pos:end="761:38">src</name><operator pos:start="761:39" pos:end="761:40">++</operator> <operator pos:start="761:42" pos:end="761:42">-</operator> <literal type="number" pos:start="761:44" pos:end="761:47">0x80</literal><operator pos:start="761:48" pos:end="761:48">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="763:13" pos:end="763:40"><expr pos:start="763:13" pos:end="763:39"><name pos:start="763:13" pos:end="763:24"><name pos:start="763:13" pos:end="763:13">c</name><operator pos:start="763:14" pos:end="763:15">-&gt;</operator><name pos:start="763:16" pos:end="763:21">status</name><index pos:start="763:22" pos:end="763:24">[<expr pos:start="763:23" pos:end="763:23"><literal type="number" pos:start="763:23" pos:end="763:23">0</literal></expr>]</index></name><operator pos:start="763:25" pos:end="763:25">.</operator><name pos:start="763:26" pos:end="763:35">step_index</name> <operator pos:start="763:37" pos:end="763:37">=</operator> <literal type="number" pos:start="763:39" pos:end="763:39">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="767:9" pos:end="827:9"><if pos:start="767:9" pos:end="783:9">if <condition pos:start="767:12" pos:end="767:55">(<expr pos:start="767:13" pos:end="767:54"><name pos:start="767:13" pos:end="767:28"><name pos:start="767:13" pos:end="767:17">avctx</name><operator pos:start="767:18" pos:end="767:19">-&gt;</operator><name pos:start="767:20" pos:end="767:24">codec</name><operator pos:start="767:25" pos:end="767:26">-&gt;</operator><name pos:start="767:27" pos:end="767:28">id</name></name> <operator pos:start="767:30" pos:end="767:31">==</operator> <name pos:start="767:33" pos:end="767:54">CODEC_ID_ADPCM_SBPRO_4</name></expr>)</condition> <block pos:start="767:57" pos:end="783:9">{<block_content pos:start="769:13" pos:end="781:13">

            <while pos:start="769:13" pos:end="781:13">while <condition pos:start="769:19" pos:end="769:40">(<expr pos:start="769:20" pos:end="769:39"><name pos:start="769:20" pos:end="769:22">src</name> <operator pos:start="769:24" pos:end="769:24">&lt;</operator> <name pos:start="769:26" pos:end="769:28">buf</name> <operator pos:start="769:30" pos:end="769:30">+</operator> <name pos:start="769:32" pos:end="769:39">buf_size</name></expr>)</condition> <block pos:start="769:42" pos:end="781:13">{<block_content pos:start="771:17" pos:end="779:22">

                <expr_stmt pos:start="771:17" pos:end="773:48"><expr pos:start="771:17" pos:end="773:47"><operator pos:start="771:17" pos:end="771:17">*</operator><name pos:start="771:18" pos:end="771:24">samples</name><operator pos:start="771:25" pos:end="771:26">++</operator> <operator pos:start="771:28" pos:end="771:28">=</operator> <call pos:start="771:30" pos:end="773:47"><name pos:start="771:30" pos:end="771:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="771:55" pos:end="773:47">(<argument pos:start="771:56" pos:end="771:68"><expr pos:start="771:56" pos:end="771:68"><operator pos:start="771:56" pos:end="771:56">&amp;</operator><name pos:start="771:57" pos:end="771:68"><name pos:start="771:57" pos:end="771:57">c</name><operator pos:start="771:58" pos:end="771:59">-&gt;</operator><name pos:start="771:60" pos:end="771:65">status</name><index pos:start="771:66" pos:end="771:68">[<expr pos:start="771:67" pos:end="771:67"><literal type="number" pos:start="771:67" pos:end="771:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="773:21" pos:end="773:40"><expr pos:start="773:21" pos:end="773:40"><operator pos:start="773:21" pos:end="773:21">(</operator><name pos:start="773:22" pos:end="773:27"><name pos:start="773:22" pos:end="773:24">src</name><index pos:start="773:25" pos:end="773:27">[<expr pos:start="773:26" pos:end="773:26"><literal type="number" pos:start="773:26" pos:end="773:26">0</literal></expr>]</index></name> <operator pos:start="773:29" pos:end="773:30">&gt;&gt;</operator> <literal type="number" pos:start="773:32" pos:end="773:32">4</literal><operator pos:start="773:33" pos:end="773:33">)</operator> <operator pos:start="773:35" pos:end="773:35">&amp;</operator> <literal type="number" pos:start="773:37" pos:end="773:40">0x0F</literal></expr></argument>, <argument pos:start="773:43" pos:end="773:43"><expr pos:start="773:43" pos:end="773:43"><literal type="number" pos:start="773:43" pos:end="773:43">4</literal></expr></argument>, <argument pos:start="773:46" pos:end="773:46"><expr pos:start="773:46" pos:end="773:46"><literal type="number" pos:start="773:46" pos:end="773:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="775:17" pos:end="777:41"><expr pos:start="775:17" pos:end="777:40"><operator pos:start="775:17" pos:end="775:17">*</operator><name pos:start="775:18" pos:end="775:24">samples</name><operator pos:start="775:25" pos:end="775:26">++</operator> <operator pos:start="775:28" pos:end="775:28">=</operator> <call pos:start="775:30" pos:end="777:40"><name pos:start="775:30" pos:end="775:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="775:55" pos:end="777:40">(<argument pos:start="775:56" pos:end="775:69"><expr pos:start="775:56" pos:end="775:69"><operator pos:start="775:56" pos:end="775:56">&amp;</operator><name pos:start="775:57" pos:end="775:69"><name pos:start="775:57" pos:end="775:57">c</name><operator pos:start="775:58" pos:end="775:59">-&gt;</operator><name pos:start="775:60" pos:end="775:65">status</name><index pos:start="775:66" pos:end="775:69">[<expr pos:start="775:67" pos:end="775:68"><name pos:start="775:67" pos:end="775:68">st</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="777:21" pos:end="777:33"><expr pos:start="777:21" pos:end="777:33"><name pos:start="777:21" pos:end="777:26"><name pos:start="777:21" pos:end="777:23">src</name><index pos:start="777:24" pos:end="777:26">[<expr pos:start="777:25" pos:end="777:25"><literal type="number" pos:start="777:25" pos:end="777:25">0</literal></expr>]</index></name> <operator pos:start="777:28" pos:end="777:28">&amp;</operator> <literal type="number" pos:start="777:30" pos:end="777:33">0x0F</literal></expr></argument>, <argument pos:start="777:36" pos:end="777:36"><expr pos:start="777:36" pos:end="777:36"><literal type="number" pos:start="777:36" pos:end="777:36">4</literal></expr></argument>, <argument pos:start="777:39" pos:end="777:39"><expr pos:start="777:39" pos:end="777:39"><literal type="number" pos:start="777:39" pos:end="777:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="779:17" pos:end="779:22"><expr pos:start="779:17" pos:end="779:21"><name pos:start="779:17" pos:end="779:19">src</name><operator pos:start="779:20" pos:end="779:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if> <if type="elseif" pos:start="783:11" pos:end="803:9">else if <condition pos:start="783:19" pos:end="783:62">(<expr pos:start="783:20" pos:end="783:61"><name pos:start="783:20" pos:end="783:35"><name pos:start="783:20" pos:end="783:24">avctx</name><operator pos:start="783:25" pos:end="783:26">-&gt;</operator><name pos:start="783:27" pos:end="783:31">codec</name><operator pos:start="783:32" pos:end="783:33">-&gt;</operator><name pos:start="783:34" pos:end="783:35">id</name></name> <operator pos:start="783:37" pos:end="783:38">==</operator> <name pos:start="783:40" pos:end="783:61">CODEC_ID_ADPCM_SBPRO_3</name></expr>)</condition> <block pos:start="783:64" pos:end="803:9">{<block_content pos:start="785:13" pos:end="801:13">

            <while pos:start="785:13" pos:end="801:13">while <condition pos:start="785:19" pos:end="785:69">(<expr pos:start="785:20" pos:end="785:68"><name pos:start="785:20" pos:end="785:22">src</name> <operator pos:start="785:24" pos:end="785:24">&lt;</operator> <name pos:start="785:26" pos:end="785:28">buf</name> <operator pos:start="785:30" pos:end="785:30">+</operator> <name pos:start="785:32" pos:end="785:39">buf_size</name> <operator pos:start="785:41" pos:end="785:42">&amp;&amp;</operator> <name pos:start="785:44" pos:end="785:50">samples</name> <operator pos:start="785:52" pos:end="785:52">+</operator> <literal type="number" pos:start="785:54" pos:end="785:54">2</literal> <operator pos:start="785:56" pos:end="785:56">&lt;</operator> <name pos:start="785:58" pos:end="785:68">samples_end</name></expr>)</condition> <block pos:start="785:71" pos:end="801:13">{<block_content pos:start="787:17" pos:end="799:22">

                <expr_stmt pos:start="787:17" pos:end="789:48"><expr pos:start="787:17" pos:end="789:47"><operator pos:start="787:17" pos:end="787:17">*</operator><name pos:start="787:18" pos:end="787:24">samples</name><operator pos:start="787:25" pos:end="787:26">++</operator> <operator pos:start="787:28" pos:end="787:28">=</operator> <call pos:start="787:30" pos:end="789:47"><name pos:start="787:30" pos:end="787:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="787:55" pos:end="789:47">(<argument pos:start="787:56" pos:end="787:68"><expr pos:start="787:56" pos:end="787:68"><operator pos:start="787:56" pos:end="787:56">&amp;</operator><name pos:start="787:57" pos:end="787:68"><name pos:start="787:57" pos:end="787:57">c</name><operator pos:start="787:58" pos:end="787:59">-&gt;</operator><name pos:start="787:60" pos:end="787:65">status</name><index pos:start="787:66" pos:end="787:68">[<expr pos:start="787:67" pos:end="787:67"><literal type="number" pos:start="787:67" pos:end="787:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="789:21" pos:end="789:40"><expr pos:start="789:21" pos:end="789:40"><operator pos:start="789:21" pos:end="789:21">(</operator><name pos:start="789:22" pos:end="789:27"><name pos:start="789:22" pos:end="789:24">src</name><index pos:start="789:25" pos:end="789:27">[<expr pos:start="789:26" pos:end="789:26"><literal type="number" pos:start="789:26" pos:end="789:26">0</literal></expr>]</index></name> <operator pos:start="789:29" pos:end="789:30">&gt;&gt;</operator> <literal type="number" pos:start="789:32" pos:end="789:32">5</literal><operator pos:start="789:33" pos:end="789:33">)</operator> <operator pos:start="789:35" pos:end="789:35">&amp;</operator> <literal type="number" pos:start="789:37" pos:end="789:40">0x07</literal></expr></argument>, <argument pos:start="789:43" pos:end="789:43"><expr pos:start="789:43" pos:end="789:43"><literal type="number" pos:start="789:43" pos:end="789:43">3</literal></expr></argument>, <argument pos:start="789:46" pos:end="789:46"><expr pos:start="789:46" pos:end="789:46"><literal type="number" pos:start="789:46" pos:end="789:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="791:17" pos:end="793:48"><expr pos:start="791:17" pos:end="793:47"><operator pos:start="791:17" pos:end="791:17">*</operator><name pos:start="791:18" pos:end="791:24">samples</name><operator pos:start="791:25" pos:end="791:26">++</operator> <operator pos:start="791:28" pos:end="791:28">=</operator> <call pos:start="791:30" pos:end="793:47"><name pos:start="791:30" pos:end="791:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="791:55" pos:end="793:47">(<argument pos:start="791:56" pos:end="791:68"><expr pos:start="791:56" pos:end="791:68"><operator pos:start="791:56" pos:end="791:56">&amp;</operator><name pos:start="791:57" pos:end="791:68"><name pos:start="791:57" pos:end="791:57">c</name><operator pos:start="791:58" pos:end="791:59">-&gt;</operator><name pos:start="791:60" pos:end="791:65">status</name><index pos:start="791:66" pos:end="791:68">[<expr pos:start="791:67" pos:end="791:67"><literal type="number" pos:start="791:67" pos:end="791:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="793:21" pos:end="793:40"><expr pos:start="793:21" pos:end="793:40"><operator pos:start="793:21" pos:end="793:21">(</operator><name pos:start="793:22" pos:end="793:27"><name pos:start="793:22" pos:end="793:24">src</name><index pos:start="793:25" pos:end="793:27">[<expr pos:start="793:26" pos:end="793:26"><literal type="number" pos:start="793:26" pos:end="793:26">0</literal></expr>]</index></name> <operator pos:start="793:29" pos:end="793:30">&gt;&gt;</operator> <literal type="number" pos:start="793:32" pos:end="793:32">2</literal><operator pos:start="793:33" pos:end="793:33">)</operator> <operator pos:start="793:35" pos:end="793:35">&amp;</operator> <literal type="number" pos:start="793:37" pos:end="793:40">0x07</literal></expr></argument>, <argument pos:start="793:43" pos:end="793:43"><expr pos:start="793:43" pos:end="793:43"><literal type="number" pos:start="793:43" pos:end="793:43">3</literal></expr></argument>, <argument pos:start="793:46" pos:end="793:46"><expr pos:start="793:46" pos:end="793:46"><literal type="number" pos:start="793:46" pos:end="793:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="795:17" pos:end="797:41"><expr pos:start="795:17" pos:end="797:40"><operator pos:start="795:17" pos:end="795:17">*</operator><name pos:start="795:18" pos:end="795:24">samples</name><operator pos:start="795:25" pos:end="795:26">++</operator> <operator pos:start="795:28" pos:end="795:28">=</operator> <call pos:start="795:30" pos:end="797:40"><name pos:start="795:30" pos:end="795:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="795:55" pos:end="797:40">(<argument pos:start="795:56" pos:end="795:68"><expr pos:start="795:56" pos:end="795:68"><operator pos:start="795:56" pos:end="795:56">&amp;</operator><name pos:start="795:57" pos:end="795:68"><name pos:start="795:57" pos:end="795:57">c</name><operator pos:start="795:58" pos:end="795:59">-&gt;</operator><name pos:start="795:60" pos:end="795:65">status</name><index pos:start="795:66" pos:end="795:68">[<expr pos:start="795:67" pos:end="795:67"><literal type="number" pos:start="795:67" pos:end="795:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="797:21" pos:end="797:33"><expr pos:start="797:21" pos:end="797:33"><name pos:start="797:21" pos:end="797:26"><name pos:start="797:21" pos:end="797:23">src</name><index pos:start="797:24" pos:end="797:26">[<expr pos:start="797:25" pos:end="797:25"><literal type="number" pos:start="797:25" pos:end="797:25">0</literal></expr>]</index></name> <operator pos:start="797:28" pos:end="797:28">&amp;</operator> <literal type="number" pos:start="797:30" pos:end="797:33">0x03</literal></expr></argument>, <argument pos:start="797:36" pos:end="797:36"><expr pos:start="797:36" pos:end="797:36"><literal type="number" pos:start="797:36" pos:end="797:36">2</literal></expr></argument>, <argument pos:start="797:39" pos:end="797:39"><expr pos:start="797:39" pos:end="797:39"><literal type="number" pos:start="797:39" pos:end="797:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="799:17" pos:end="799:22"><expr pos:start="799:17" pos:end="799:21"><name pos:start="799:17" pos:end="799:19">src</name><operator pos:start="799:20" pos:end="799:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if> <else pos:start="803:11" pos:end="827:9">else <block pos:start="803:16" pos:end="827:9">{<block_content pos:start="805:13" pos:end="825:13">

            <while pos:start="805:13" pos:end="825:13">while <condition pos:start="805:19" pos:end="805:69">(<expr pos:start="805:20" pos:end="805:68"><name pos:start="805:20" pos:end="805:22">src</name> <operator pos:start="805:24" pos:end="805:24">&lt;</operator> <name pos:start="805:26" pos:end="805:28">buf</name> <operator pos:start="805:30" pos:end="805:30">+</operator> <name pos:start="805:32" pos:end="805:39">buf_size</name> <operator pos:start="805:41" pos:end="805:42">&amp;&amp;</operator> <name pos:start="805:44" pos:end="805:50">samples</name> <operator pos:start="805:52" pos:end="805:52">+</operator> <literal type="number" pos:start="805:54" pos:end="805:54">3</literal> <operator pos:start="805:56" pos:end="805:56">&lt;</operator> <name pos:start="805:58" pos:end="805:68">samples_end</name></expr>)</condition> <block pos:start="805:71" pos:end="825:13">{<block_content pos:start="807:17" pos:end="823:22">

                <expr_stmt pos:start="807:17" pos:end="809:48"><expr pos:start="807:17" pos:end="809:47"><operator pos:start="807:17" pos:end="807:17">*</operator><name pos:start="807:18" pos:end="807:24">samples</name><operator pos:start="807:25" pos:end="807:26">++</operator> <operator pos:start="807:28" pos:end="807:28">=</operator> <call pos:start="807:30" pos:end="809:47"><name pos:start="807:30" pos:end="807:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="807:55" pos:end="809:47">(<argument pos:start="807:56" pos:end="807:68"><expr pos:start="807:56" pos:end="807:68"><operator pos:start="807:56" pos:end="807:56">&amp;</operator><name pos:start="807:57" pos:end="807:68"><name pos:start="807:57" pos:end="807:57">c</name><operator pos:start="807:58" pos:end="807:59">-&gt;</operator><name pos:start="807:60" pos:end="807:65">status</name><index pos:start="807:66" pos:end="807:68">[<expr pos:start="807:67" pos:end="807:67"><literal type="number" pos:start="807:67" pos:end="807:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="809:21" pos:end="809:40"><expr pos:start="809:21" pos:end="809:40"><operator pos:start="809:21" pos:end="809:21">(</operator><name pos:start="809:22" pos:end="809:27"><name pos:start="809:22" pos:end="809:24">src</name><index pos:start="809:25" pos:end="809:27">[<expr pos:start="809:26" pos:end="809:26"><literal type="number" pos:start="809:26" pos:end="809:26">0</literal></expr>]</index></name> <operator pos:start="809:29" pos:end="809:30">&gt;&gt;</operator> <literal type="number" pos:start="809:32" pos:end="809:32">6</literal><operator pos:start="809:33" pos:end="809:33">)</operator> <operator pos:start="809:35" pos:end="809:35">&amp;</operator> <literal type="number" pos:start="809:37" pos:end="809:40">0x03</literal></expr></argument>, <argument pos:start="809:43" pos:end="809:43"><expr pos:start="809:43" pos:end="809:43"><literal type="number" pos:start="809:43" pos:end="809:43">2</literal></expr></argument>, <argument pos:start="809:46" pos:end="809:46"><expr pos:start="809:46" pos:end="809:46"><literal type="number" pos:start="809:46" pos:end="809:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="811:17" pos:end="813:48"><expr pos:start="811:17" pos:end="813:47"><operator pos:start="811:17" pos:end="811:17">*</operator><name pos:start="811:18" pos:end="811:24">samples</name><operator pos:start="811:25" pos:end="811:26">++</operator> <operator pos:start="811:28" pos:end="811:28">=</operator> <call pos:start="811:30" pos:end="813:47"><name pos:start="811:30" pos:end="811:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="811:55" pos:end="813:47">(<argument pos:start="811:56" pos:end="811:69"><expr pos:start="811:56" pos:end="811:69"><operator pos:start="811:56" pos:end="811:56">&amp;</operator><name pos:start="811:57" pos:end="811:69"><name pos:start="811:57" pos:end="811:57">c</name><operator pos:start="811:58" pos:end="811:59">-&gt;</operator><name pos:start="811:60" pos:end="811:65">status</name><index pos:start="811:66" pos:end="811:69">[<expr pos:start="811:67" pos:end="811:68"><name pos:start="811:67" pos:end="811:68">st</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="813:21" pos:end="813:40"><expr pos:start="813:21" pos:end="813:40"><operator pos:start="813:21" pos:end="813:21">(</operator><name pos:start="813:22" pos:end="813:27"><name pos:start="813:22" pos:end="813:24">src</name><index pos:start="813:25" pos:end="813:27">[<expr pos:start="813:26" pos:end="813:26"><literal type="number" pos:start="813:26" pos:end="813:26">0</literal></expr>]</index></name> <operator pos:start="813:29" pos:end="813:30">&gt;&gt;</operator> <literal type="number" pos:start="813:32" pos:end="813:32">4</literal><operator pos:start="813:33" pos:end="813:33">)</operator> <operator pos:start="813:35" pos:end="813:35">&amp;</operator> <literal type="number" pos:start="813:37" pos:end="813:40">0x03</literal></expr></argument>, <argument pos:start="813:43" pos:end="813:43"><expr pos:start="813:43" pos:end="813:43"><literal type="number" pos:start="813:43" pos:end="813:43">2</literal></expr></argument>, <argument pos:start="813:46" pos:end="813:46"><expr pos:start="813:46" pos:end="813:46"><literal type="number" pos:start="813:46" pos:end="813:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="815:17" pos:end="817:48"><expr pos:start="815:17" pos:end="817:47"><operator pos:start="815:17" pos:end="815:17">*</operator><name pos:start="815:18" pos:end="815:24">samples</name><operator pos:start="815:25" pos:end="815:26">++</operator> <operator pos:start="815:28" pos:end="815:28">=</operator> <call pos:start="815:30" pos:end="817:47"><name pos:start="815:30" pos:end="815:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="815:55" pos:end="817:47">(<argument pos:start="815:56" pos:end="815:68"><expr pos:start="815:56" pos:end="815:68"><operator pos:start="815:56" pos:end="815:56">&amp;</operator><name pos:start="815:57" pos:end="815:68"><name pos:start="815:57" pos:end="815:57">c</name><operator pos:start="815:58" pos:end="815:59">-&gt;</operator><name pos:start="815:60" pos:end="815:65">status</name><index pos:start="815:66" pos:end="815:68">[<expr pos:start="815:67" pos:end="815:67"><literal type="number" pos:start="815:67" pos:end="815:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="817:21" pos:end="817:40"><expr pos:start="817:21" pos:end="817:40"><operator pos:start="817:21" pos:end="817:21">(</operator><name pos:start="817:22" pos:end="817:27"><name pos:start="817:22" pos:end="817:24">src</name><index pos:start="817:25" pos:end="817:27">[<expr pos:start="817:26" pos:end="817:26"><literal type="number" pos:start="817:26" pos:end="817:26">0</literal></expr>]</index></name> <operator pos:start="817:29" pos:end="817:30">&gt;&gt;</operator> <literal type="number" pos:start="817:32" pos:end="817:32">2</literal><operator pos:start="817:33" pos:end="817:33">)</operator> <operator pos:start="817:35" pos:end="817:35">&amp;</operator> <literal type="number" pos:start="817:37" pos:end="817:40">0x03</literal></expr></argument>, <argument pos:start="817:43" pos:end="817:43"><expr pos:start="817:43" pos:end="817:43"><literal type="number" pos:start="817:43" pos:end="817:43">2</literal></expr></argument>, <argument pos:start="817:46" pos:end="817:46"><expr pos:start="817:46" pos:end="817:46"><literal type="number" pos:start="817:46" pos:end="817:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="819:17" pos:end="821:41"><expr pos:start="819:17" pos:end="821:40"><operator pos:start="819:17" pos:end="819:17">*</operator><name pos:start="819:18" pos:end="819:24">samples</name><operator pos:start="819:25" pos:end="819:26">++</operator> <operator pos:start="819:28" pos:end="819:28">=</operator> <call pos:start="819:30" pos:end="821:40"><name pos:start="819:30" pos:end="819:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="819:55" pos:end="821:40">(<argument pos:start="819:56" pos:end="819:69"><expr pos:start="819:56" pos:end="819:69"><operator pos:start="819:56" pos:end="819:56">&amp;</operator><name pos:start="819:57" pos:end="819:69"><name pos:start="819:57" pos:end="819:57">c</name><operator pos:start="819:58" pos:end="819:59">-&gt;</operator><name pos:start="819:60" pos:end="819:65">status</name><index pos:start="819:66" pos:end="819:69">[<expr pos:start="819:67" pos:end="819:68"><name pos:start="819:67" pos:end="819:68">st</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="821:21" pos:end="821:33"><expr pos:start="821:21" pos:end="821:33"><name pos:start="821:21" pos:end="821:26"><name pos:start="821:21" pos:end="821:23">src</name><index pos:start="821:24" pos:end="821:26">[<expr pos:start="821:25" pos:end="821:25"><literal type="number" pos:start="821:25" pos:end="821:25">0</literal></expr>]</index></name> <operator pos:start="821:28" pos:end="821:28">&amp;</operator> <literal type="number" pos:start="821:30" pos:end="821:33">0x03</literal></expr></argument>, <argument pos:start="821:36" pos:end="821:36"><expr pos:start="821:36" pos:end="821:36"><literal type="number" pos:start="821:36" pos:end="821:36">2</literal></expr></argument>, <argument pos:start="821:39" pos:end="821:39"><expr pos:start="821:39" pos:end="821:39"><literal type="number" pos:start="821:39" pos:end="821:39">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="823:17" pos:end="823:22"><expr pos:start="823:17" pos:end="823:21"><name pos:start="823:17" pos:end="823:19">src</name><operator pos:start="823:20" pos:end="823:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></else></if_stmt>

        <break pos:start="829:9" pos:end="829:14">break;</break>

    <case pos:start="831:5" pos:end="831:28">case <expr pos:start="831:10" pos:end="831:27"><name pos:start="831:10" pos:end="831:27">CODEC_ID_ADPCM_SWF</name></expr>:</case>

    <block pos:start="833:5" pos:end="949:5">{<block_content pos:start="835:9" pos:end="947:14">

        <decl_stmt pos:start="835:9" pos:end="835:25"><decl pos:start="835:9" pos:end="835:24"><type pos:start="835:9" pos:end="835:21"><name pos:start="835:9" pos:end="835:21">GetBitContext</name></type> <name pos:start="835:23" pos:end="835:24">gb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="837:9" pos:end="837:25"><decl pos:start="837:9" pos:end="837:24"><type pos:start="837:9" pos:end="837:19"><specifier pos:start="837:9" pos:end="837:13">const</specifier> <name pos:start="837:15" pos:end="837:17">int</name> <modifier pos:start="837:19" pos:end="837:19">*</modifier></type><name pos:start="837:20" pos:end="837:24">table</name></decl>;</decl_stmt>

        <decl_stmt pos:start="839:9" pos:end="839:34"><decl pos:start="839:9" pos:end="839:14"><type pos:start="839:9" pos:end="839:11"><name pos:start="839:9" pos:end="839:11">int</name></type> <name pos:start="839:13" pos:end="839:14">k0</name></decl>, <decl pos:start="839:17" pos:end="839:24"><type ref="prev" pos:start="839:9" pos:end="839:11"/><name pos:start="839:17" pos:end="839:24">signmask</name></decl>, <decl pos:start="839:27" pos:end="839:33"><type ref="prev" pos:start="839:9" pos:end="839:11"/><name pos:start="839:27" pos:end="839:33">nb_bits</name></decl>;</decl_stmt>

        <decl_stmt pos:start="841:9" pos:end="841:30"><decl pos:start="841:9" pos:end="841:29"><type pos:start="841:9" pos:end="841:11"><name pos:start="841:9" pos:end="841:11">int</name></type> <name pos:start="841:13" pos:end="841:16">size</name> <init pos:start="841:18" pos:end="841:29">= <expr pos:start="841:20" pos:end="841:29"><name pos:start="841:20" pos:end="841:27">buf_size</name><operator pos:start="841:28" pos:end="841:28">*</operator><literal type="number" pos:start="841:29" pos:end="841:29">8</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="845:9" pos:end="845:38"><expr pos:start="845:9" pos:end="845:37"><call pos:start="845:9" pos:end="845:37"><name pos:start="845:9" pos:end="845:21">init_get_bits</name><argument_list pos:start="845:22" pos:end="845:37">(<argument pos:start="845:23" pos:end="845:25"><expr pos:start="845:23" pos:end="845:25"><operator pos:start="845:23" pos:end="845:23">&amp;</operator><name pos:start="845:24" pos:end="845:25">gb</name></expr></argument>, <argument pos:start="845:28" pos:end="845:30"><expr pos:start="845:28" pos:end="845:30"><name pos:start="845:28" pos:end="845:30">buf</name></expr></argument>, <argument pos:start="845:33" pos:end="845:36"><expr pos:start="845:33" pos:end="845:36"><name pos:start="845:33" pos:end="845:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="849:9" pos:end="849:35">//read bits &amp; inital values</comment>

        <expr_stmt pos:start="851:9" pos:end="851:37"><expr pos:start="851:9" pos:end="851:36"><name pos:start="851:9" pos:end="851:15">nb_bits</name> <operator pos:start="851:17" pos:end="851:17">=</operator> <call pos:start="851:19" pos:end="851:34"><name pos:start="851:19" pos:end="851:26">get_bits</name><argument_list pos:start="851:27" pos:end="851:34">(<argument pos:start="851:28" pos:end="851:30"><expr pos:start="851:28" pos:end="851:30"><operator pos:start="851:28" pos:end="851:28">&amp;</operator><name pos:start="851:29" pos:end="851:30">gb</name></expr></argument>, <argument pos:start="851:33" pos:end="851:33"><expr pos:start="851:33" pos:end="851:33"><literal type="number" pos:start="851:33" pos:end="851:33">2</literal></expr></argument>)</argument_list></call><operator pos:start="851:35" pos:end="851:35">+</operator><literal type="number" pos:start="851:36" pos:end="851:36">2</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="853:9" pos:end="853:60">//av_log(NULL,AV_LOG_INFO,"nb_bits: %d\n", nb_bits);</comment>

        <expr_stmt pos:start="855:9" pos:end="855:44"><expr pos:start="855:9" pos:end="855:43"><name pos:start="855:9" pos:end="855:13">table</name> <operator pos:start="855:15" pos:end="855:15">=</operator> <name pos:start="855:17" pos:end="855:43"><name pos:start="855:17" pos:end="855:32">swf_index_tables</name><index pos:start="855:33" pos:end="855:43">[<expr pos:start="855:34" pos:end="855:42"><name pos:start="855:34" pos:end="855:40">nb_bits</name><operator pos:start="855:41" pos:end="855:41">-</operator><literal type="number" pos:start="855:42" pos:end="855:42">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="857:9" pos:end="857:30"><expr pos:start="857:9" pos:end="857:29"><name pos:start="857:9" pos:end="857:10">k0</name> <operator pos:start="857:12" pos:end="857:12">=</operator> <literal type="number" pos:start="857:14" pos:end="857:14">1</literal> <operator pos:start="857:16" pos:end="857:17">&lt;&lt;</operator> <operator pos:start="857:19" pos:end="857:19">(</operator><name pos:start="857:20" pos:end="857:26">nb_bits</name><operator pos:start="857:27" pos:end="857:27">-</operator><literal type="number" pos:start="857:28" pos:end="857:28">2</literal><operator pos:start="857:29" pos:end="857:29">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="859:9" pos:end="859:36"><expr pos:start="859:9" pos:end="859:35"><name pos:start="859:9" pos:end="859:16">signmask</name> <operator pos:start="859:18" pos:end="859:18">=</operator> <literal type="number" pos:start="859:20" pos:end="859:20">1</literal> <operator pos:start="859:22" pos:end="859:23">&lt;&lt;</operator> <operator pos:start="859:25" pos:end="859:25">(</operator><name pos:start="859:26" pos:end="859:32">nb_bits</name><operator pos:start="859:33" pos:end="859:33">-</operator><literal type="number" pos:start="859:34" pos:end="859:34">1</literal><operator pos:start="859:35" pos:end="859:35">)</operator></expr>;</expr_stmt>



        <for pos:start="863:9" pos:end="869:9">for <control pos:start="863:13" pos:end="863:45">(<init pos:start="863:14" pos:end="863:19"><expr pos:start="863:14" pos:end="863:18"><name pos:start="863:14" pos:end="863:14">i</name> <operator pos:start="863:16" pos:end="863:16">=</operator> <literal type="number" pos:start="863:18" pos:end="863:18">0</literal></expr>;</init> <condition pos:start="863:21" pos:end="863:40"><expr pos:start="863:21" pos:end="863:39"><name pos:start="863:21" pos:end="863:21">i</name> <operator pos:start="863:23" pos:end="863:23">&lt;</operator> <name pos:start="863:25" pos:end="863:39"><name pos:start="863:25" pos:end="863:29">avctx</name><operator pos:start="863:30" pos:end="863:31">-&gt;</operator><name pos:start="863:32" pos:end="863:39">channels</name></name></expr>;</condition> <incr pos:start="863:42" pos:end="863:44"><expr pos:start="863:42" pos:end="863:44"><name pos:start="863:42" pos:end="863:42">i</name><operator pos:start="863:43" pos:end="863:44">++</operator></expr></incr>)</control> <block pos:start="863:47" pos:end="869:9">{<block_content pos:start="865:13" pos:end="867:55">

            <expr_stmt pos:start="865:13" pos:end="865:69"><expr pos:start="865:13" pos:end="865:68"><operator pos:start="865:13" pos:end="865:13">*</operator><name pos:start="865:14" pos:end="865:20">samples</name><operator pos:start="865:21" pos:end="865:22">++</operator> <operator pos:start="865:24" pos:end="865:24">=</operator> <name pos:start="865:26" pos:end="865:37"><name pos:start="865:26" pos:end="865:26">c</name><operator pos:start="865:27" pos:end="865:28">-&gt;</operator><name pos:start="865:29" pos:end="865:34">status</name><index pos:start="865:35" pos:end="865:37">[<expr pos:start="865:36" pos:end="865:36"><name pos:start="865:36" pos:end="865:36">i</name></expr>]</index></name><operator pos:start="865:38" pos:end="865:38">.</operator><name pos:start="865:39" pos:end="865:47">predictor</name> <operator pos:start="865:49" pos:end="865:49">=</operator> <call pos:start="865:51" pos:end="865:68"><name pos:start="865:51" pos:end="865:59">get_sbits</name><argument_list pos:start="865:60" pos:end="865:68">(<argument pos:start="865:61" pos:end="865:63"><expr pos:start="865:61" pos:end="865:63"><operator pos:start="865:61" pos:end="865:61">&amp;</operator><name pos:start="865:62" pos:end="865:63">gb</name></expr></argument>, <argument pos:start="865:66" pos:end="865:67"><expr pos:start="865:66" pos:end="865:67"><literal type="number" pos:start="865:66" pos:end="865:67">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="867:13" pos:end="867:55"><expr pos:start="867:13" pos:end="867:54"><name pos:start="867:13" pos:end="867:24"><name pos:start="867:13" pos:end="867:13">c</name><operator pos:start="867:14" pos:end="867:15">-&gt;</operator><name pos:start="867:16" pos:end="867:21">status</name><index pos:start="867:22" pos:end="867:24">[<expr pos:start="867:23" pos:end="867:23"><name pos:start="867:23" pos:end="867:23">i</name></expr>]</index></name><operator pos:start="867:25" pos:end="867:25">.</operator><name pos:start="867:26" pos:end="867:35">step_index</name> <operator pos:start="867:37" pos:end="867:37">=</operator> <call pos:start="867:39" pos:end="867:54"><name pos:start="867:39" pos:end="867:46">get_bits</name><argument_list pos:start="867:47" pos:end="867:54">(<argument pos:start="867:48" pos:end="867:50"><expr pos:start="867:48" pos:end="867:50"><operator pos:start="867:48" pos:end="867:48">&amp;</operator><name pos:start="867:49" pos:end="867:50">gb</name></expr></argument>, <argument pos:start="867:53" pos:end="867:53"><expr pos:start="867:53" pos:end="867:53"><literal type="number" pos:start="867:53" pos:end="867:53">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <while pos:start="873:9" pos:end="943:9">while <condition pos:start="873:15" pos:end="873:42">(<expr pos:start="873:16" pos:end="873:41"><call pos:start="873:16" pos:end="873:34"><name pos:start="873:16" pos:end="873:29">get_bits_count</name><argument_list pos:start="873:30" pos:end="873:34">(<argument pos:start="873:31" pos:end="873:33"><expr pos:start="873:31" pos:end="873:33"><operator pos:start="873:31" pos:end="873:31">&amp;</operator><name pos:start="873:32" pos:end="873:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="873:36" pos:end="873:36">&lt;</operator> <name pos:start="873:38" pos:end="873:41">size</name></expr>)</condition>

        <block pos:start="875:9" pos:end="943:9">{<block_content pos:start="877:13" pos:end="941:13">

            <decl_stmt pos:start="877:13" pos:end="877:18"><decl pos:start="877:13" pos:end="877:17"><type pos:start="877:13" pos:end="877:15"><name pos:start="877:13" pos:end="877:15">int</name></type> <name pos:start="877:17" pos:end="877:17">i</name></decl>;</decl_stmt>



            <for pos:start="881:13" pos:end="941:13">for <control pos:start="881:17" pos:end="881:49">(<init pos:start="881:18" pos:end="881:23"><expr pos:start="881:18" pos:end="881:22"><name pos:start="881:18" pos:end="881:18">i</name> <operator pos:start="881:20" pos:end="881:20">=</operator> <literal type="number" pos:start="881:22" pos:end="881:22">0</literal></expr>;</init> <condition pos:start="881:25" pos:end="881:44"><expr pos:start="881:25" pos:end="881:43"><name pos:start="881:25" pos:end="881:25">i</name> <operator pos:start="881:27" pos:end="881:27">&lt;</operator> <name pos:start="881:29" pos:end="881:43"><name pos:start="881:29" pos:end="881:33">avctx</name><operator pos:start="881:34" pos:end="881:35">-&gt;</operator><name pos:start="881:36" pos:end="881:43">channels</name></name></expr>;</condition> <incr pos:start="881:46" pos:end="881:48"><expr pos:start="881:46" pos:end="881:48"><name pos:start="881:46" pos:end="881:46">i</name><operator pos:start="881:47" pos:end="881:48">++</operator></expr></incr>)</control> <block pos:start="881:51" pos:end="941:13">{<block_content pos:start="885:17" pos:end="939:17">

                <comment type="line" pos:start="883:17" pos:end="883:39">// similar to IMA adpcm</comment>

                <decl_stmt pos:start="885:17" pos:end="885:51"><decl pos:start="885:17" pos:end="885:50"><type pos:start="885:17" pos:end="885:19"><name pos:start="885:17" pos:end="885:19">int</name></type> <name pos:start="885:21" pos:end="885:25">delta</name> <init pos:start="885:27" pos:end="885:50">= <expr pos:start="885:29" pos:end="885:50"><call pos:start="885:29" pos:end="885:50"><name pos:start="885:29" pos:end="885:36">get_bits</name><argument_list pos:start="885:37" pos:end="885:50">(<argument pos:start="885:38" pos:end="885:40"><expr pos:start="885:38" pos:end="885:40"><operator pos:start="885:38" pos:end="885:38">&amp;</operator><name pos:start="885:39" pos:end="885:40">gb</name></expr></argument>, <argument pos:start="885:43" pos:end="885:49"><expr pos:start="885:43" pos:end="885:49"><name pos:start="885:43" pos:end="885:49">nb_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="887:17" pos:end="887:63"><decl pos:start="887:17" pos:end="887:62"><type pos:start="887:17" pos:end="887:19"><name pos:start="887:17" pos:end="887:19">int</name></type> <name pos:start="887:21" pos:end="887:24">step</name> <init pos:start="887:26" pos:end="887:62">= <expr pos:start="887:28" pos:end="887:62"><name pos:start="887:28" pos:end="887:62"><name pos:start="887:28" pos:end="887:37">step_table</name><index pos:start="887:38" pos:end="887:62">[<expr pos:start="887:39" pos:end="887:61"><name pos:start="887:39" pos:end="887:50"><name pos:start="887:39" pos:end="887:39">c</name><operator pos:start="887:40" pos:end="887:41">-&gt;</operator><name pos:start="887:42" pos:end="887:47">status</name><index pos:start="887:48" pos:end="887:50">[<expr pos:start="887:49" pos:end="887:49"><name pos:start="887:49" pos:end="887:49">i</name></expr>]</index></name><operator pos:start="887:51" pos:end="887:51">.</operator><name pos:start="887:52" pos:end="887:61">step_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="889:17" pos:end="889:32"><decl pos:start="889:17" pos:end="889:31"><type pos:start="889:17" pos:end="889:20"><name pos:start="889:17" pos:end="889:20">long</name></type> <name pos:start="889:22" pos:end="889:27">vpdiff</name> <init pos:start="889:29" pos:end="889:31">= <expr pos:start="889:31" pos:end="889:31"><literal type="number" pos:start="889:31" pos:end="889:31">0</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="889:34" pos:end="889:63">// vpdiff = (delta+0.5)*step/4</comment>

                <decl_stmt pos:start="891:17" pos:end="891:27"><decl pos:start="891:17" pos:end="891:26"><type pos:start="891:17" pos:end="891:19"><name pos:start="891:17" pos:end="891:19">int</name></type> <name pos:start="891:21" pos:end="891:21">k</name> <init pos:start="891:23" pos:end="891:26">= <expr pos:start="891:25" pos:end="891:26"><name pos:start="891:25" pos:end="891:26">k0</name></expr></init></decl>;</decl_stmt>



                <do pos:start="895:17" pos:end="905:27">do <block pos:start="895:20" pos:end="905:17">{<block_content pos:start="897:21" pos:end="903:28">

                    <if_stmt pos:start="897:21" pos:end="899:39"><if pos:start="897:21" pos:end="899:39">if <condition pos:start="897:24" pos:end="897:34">(<expr pos:start="897:25" pos:end="897:33"><name pos:start="897:25" pos:end="897:29">delta</name> <operator pos:start="897:31" pos:end="897:31">&amp;</operator> <name pos:start="897:33" pos:end="897:33">k</name></expr>)</condition><block type="pseudo" pos:start="899:25" pos:end="899:39"><block_content pos:start="899:25" pos:end="899:39">

                        <expr_stmt pos:start="899:25" pos:end="899:39"><expr pos:start="899:25" pos:end="899:38"><name pos:start="899:25" pos:end="899:30">vpdiff</name> <operator pos:start="899:32" pos:end="899:33">+=</operator> <name pos:start="899:35" pos:end="899:38">step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="901:21" pos:end="901:31"><expr pos:start="901:21" pos:end="901:30"><name pos:start="901:21" pos:end="901:24">step</name> <operator pos:start="901:26" pos:end="901:28">&gt;&gt;=</operator> <literal type="number" pos:start="901:30" pos:end="901:30">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="903:21" pos:end="903:28"><expr pos:start="903:21" pos:end="903:27"><name pos:start="903:21" pos:end="903:21">k</name> <operator pos:start="903:23" pos:end="903:25">&gt;&gt;=</operator> <literal type="number" pos:start="903:27" pos:end="903:27">1</literal></expr>;</expr_stmt>

                </block_content>}</block> while<condition pos:start="905:24" pos:end="905:26">(<expr pos:start="905:25" pos:end="905:25"><name pos:start="905:25" pos:end="905:25">k</name></expr>)</condition>;</do>

                <expr_stmt pos:start="907:17" pos:end="907:31"><expr pos:start="907:17" pos:end="907:30"><name pos:start="907:17" pos:end="907:22">vpdiff</name> <operator pos:start="907:24" pos:end="907:25">+=</operator> <name pos:start="907:27" pos:end="907:30">step</name></expr>;</expr_stmt>



                <if_stmt pos:start="911:17" pos:end="917:53"><if pos:start="911:17" pos:end="913:53">if <condition pos:start="911:20" pos:end="911:37">(<expr pos:start="911:21" pos:end="911:36"><name pos:start="911:21" pos:end="911:25">delta</name> <operator pos:start="911:27" pos:end="911:27">&amp;</operator> <name pos:start="911:29" pos:end="911:36">signmask</name></expr>)</condition><block type="pseudo" pos:start="913:21" pos:end="913:53"><block_content pos:start="913:21" pos:end="913:53">

                    <expr_stmt pos:start="913:21" pos:end="913:53"><expr pos:start="913:21" pos:end="913:52"><name pos:start="913:21" pos:end="913:32"><name pos:start="913:21" pos:end="913:21">c</name><operator pos:start="913:22" pos:end="913:23">-&gt;</operator><name pos:start="913:24" pos:end="913:29">status</name><index pos:start="913:30" pos:end="913:32">[<expr pos:start="913:31" pos:end="913:31"><name pos:start="913:31" pos:end="913:31">i</name></expr>]</index></name><operator pos:start="913:33" pos:end="913:33">.</operator><name pos:start="913:34" pos:end="913:42">predictor</name> <operator pos:start="913:44" pos:end="913:45">-=</operator> <name pos:start="913:47" pos:end="913:52">vpdiff</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="915:17" pos:end="917:53">else<block type="pseudo" pos:start="917:21" pos:end="917:53"><block_content pos:start="917:21" pos:end="917:53">

                    <expr_stmt pos:start="917:21" pos:end="917:53"><expr pos:start="917:21" pos:end="917:52"><name pos:start="917:21" pos:end="917:32"><name pos:start="917:21" pos:end="917:21">c</name><operator pos:start="917:22" pos:end="917:23">-&gt;</operator><name pos:start="917:24" pos:end="917:29">status</name><index pos:start="917:30" pos:end="917:32">[<expr pos:start="917:31" pos:end="917:31"><name pos:start="917:31" pos:end="917:31">i</name></expr>]</index></name><operator pos:start="917:33" pos:end="917:33">.</operator><name pos:start="917:34" pos:end="917:42">predictor</name> <operator pos:start="917:44" pos:end="917:45">+=</operator> <name pos:start="917:47" pos:end="917:52">vpdiff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="921:17" pos:end="921:70"><expr pos:start="921:17" pos:end="921:69"><name pos:start="921:17" pos:end="921:28"><name pos:start="921:17" pos:end="921:17">c</name><operator pos:start="921:18" pos:end="921:19">-&gt;</operator><name pos:start="921:20" pos:end="921:25">status</name><index pos:start="921:26" pos:end="921:28">[<expr pos:start="921:27" pos:end="921:27"><name pos:start="921:27" pos:end="921:27">i</name></expr>]</index></name><operator pos:start="921:29" pos:end="921:29">.</operator><name pos:start="921:30" pos:end="921:39">step_index</name> <operator pos:start="921:41" pos:end="921:42">+=</operator> <name pos:start="921:44" pos:end="921:69"><name pos:start="921:44" pos:end="921:48">table</name><index pos:start="921:49" pos:end="921:69">[<expr pos:start="921:50" pos:end="921:68"><name pos:start="921:50" pos:end="921:54">delta</name> <operator pos:start="921:56" pos:end="921:56">&amp;</operator> <operator pos:start="921:58" pos:end="921:58">(</operator><operator pos:start="921:59" pos:end="921:59">~</operator><name pos:start="921:60" pos:end="921:67">signmask</name><operator pos:start="921:68" pos:end="921:68">)</operator></expr>]</index></name></expr>;</expr_stmt>



                <expr_stmt pos:start="925:17" pos:end="925:82"><expr pos:start="925:17" pos:end="925:81"><name pos:start="925:17" pos:end="925:28"><name pos:start="925:17" pos:end="925:17">c</name><operator pos:start="925:18" pos:end="925:19">-&gt;</operator><name pos:start="925:20" pos:end="925:25">status</name><index pos:start="925:26" pos:end="925:28">[<expr pos:start="925:27" pos:end="925:27"><name pos:start="925:27" pos:end="925:27">i</name></expr>]</index></name><operator pos:start="925:29" pos:end="925:29">.</operator><name pos:start="925:30" pos:end="925:39">step_index</name> <operator pos:start="925:41" pos:end="925:41">=</operator> <call pos:start="925:43" pos:end="925:81"><name pos:start="925:43" pos:end="925:49">av_clip</name><argument_list pos:start="925:50" pos:end="925:81">(<argument pos:start="925:51" pos:end="925:73"><expr pos:start="925:51" pos:end="925:73"><name pos:start="925:51" pos:end="925:62"><name pos:start="925:51" pos:end="925:51">c</name><operator pos:start="925:52" pos:end="925:53">-&gt;</operator><name pos:start="925:54" pos:end="925:59">status</name><index pos:start="925:60" pos:end="925:62">[<expr pos:start="925:61" pos:end="925:61"><name pos:start="925:61" pos:end="925:61">i</name></expr>]</index></name><operator pos:start="925:63" pos:end="925:63">.</operator><name pos:start="925:64" pos:end="925:73">step_index</name></expr></argument>, <argument pos:start="925:76" pos:end="925:76"><expr pos:start="925:76" pos:end="925:76"><literal type="number" pos:start="925:76" pos:end="925:76">0</literal></expr></argument>, <argument pos:start="925:79" pos:end="925:80"><expr pos:start="925:79" pos:end="925:80"><literal type="number" pos:start="925:79" pos:end="925:80">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="927:17" pos:end="927:88"><expr pos:start="927:17" pos:end="927:87"><name pos:start="927:17" pos:end="927:28"><name pos:start="927:17" pos:end="927:17">c</name><operator pos:start="927:18" pos:end="927:19">-&gt;</operator><name pos:start="927:20" pos:end="927:25">status</name><index pos:start="927:26" pos:end="927:28">[<expr pos:start="927:27" pos:end="927:27"><name pos:start="927:27" pos:end="927:27">i</name></expr>]</index></name><operator pos:start="927:29" pos:end="927:29">.</operator><name pos:start="927:30" pos:end="927:38">predictor</name> <operator pos:start="927:40" pos:end="927:40">=</operator> <call pos:start="927:42" pos:end="927:87"><name pos:start="927:42" pos:end="927:48">av_clip</name><argument_list pos:start="927:49" pos:end="927:87">(<argument pos:start="927:50" pos:end="927:71"><expr pos:start="927:50" pos:end="927:71"><name pos:start="927:50" pos:end="927:61"><name pos:start="927:50" pos:end="927:50">c</name><operator pos:start="927:51" pos:end="927:52">-&gt;</operator><name pos:start="927:53" pos:end="927:58">status</name><index pos:start="927:59" pos:end="927:61">[<expr pos:start="927:60" pos:end="927:60"><name pos:start="927:60" pos:end="927:60">i</name></expr>]</index></name><operator pos:start="927:62" pos:end="927:62">.</operator><name pos:start="927:63" pos:end="927:71">predictor</name></expr></argument>, <argument pos:start="927:74" pos:end="927:79"><expr pos:start="927:74" pos:end="927:79"><operator pos:start="927:74" pos:end="927:74">-</operator><literal type="number" pos:start="927:75" pos:end="927:79">32768</literal></expr></argument>, <argument pos:start="927:82" pos:end="927:86"><expr pos:start="927:82" pos:end="927:86"><literal type="number" pos:start="927:82" pos:end="927:86">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="931:17" pos:end="931:52"><expr pos:start="931:17" pos:end="931:51"><operator pos:start="931:17" pos:end="931:17">*</operator><name pos:start="931:18" pos:end="931:24">samples</name><operator pos:start="931:25" pos:end="931:26">++</operator> <operator pos:start="931:28" pos:end="931:28">=</operator> <name pos:start="931:30" pos:end="931:41"><name pos:start="931:30" pos:end="931:30">c</name><operator pos:start="931:31" pos:end="931:32">-&gt;</operator><name pos:start="931:33" pos:end="931:38">status</name><index pos:start="931:39" pos:end="931:41">[<expr pos:start="931:40" pos:end="931:40"><name pos:start="931:40" pos:end="931:40">i</name></expr>]</index></name><operator pos:start="931:42" pos:end="931:42">.</operator><name pos:start="931:43" pos:end="931:51">predictor</name></expr>;</expr_stmt>

                <if_stmt pos:start="933:17" pos:end="939:17"><if pos:start="933:17" pos:end="939:17">if <condition pos:start="933:20" pos:end="933:43">(<expr pos:start="933:21" pos:end="933:42"><name pos:start="933:21" pos:end="933:27">samples</name> <operator pos:start="933:29" pos:end="933:30">&gt;=</operator> <name pos:start="933:32" pos:end="933:42">samples_end</name></expr>)</condition> <block pos:start="933:45" pos:end="939:17">{<block_content pos:start="935:21" pos:end="937:30">

                    <expr_stmt pos:start="935:21" pos:end="935:90"><expr pos:start="935:21" pos:end="935:89"><call pos:start="935:21" pos:end="935:89"><name pos:start="935:21" pos:end="935:26">av_log</name><argument_list pos:start="935:27" pos:end="935:89">(<argument pos:start="935:28" pos:end="935:32"><expr pos:start="935:28" pos:end="935:32"><name pos:start="935:28" pos:end="935:32">avctx</name></expr></argument>, <argument pos:start="935:35" pos:end="935:46"><expr pos:start="935:35" pos:end="935:46"><name pos:start="935:35" pos:end="935:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="935:49" pos:end="935:88"><expr pos:start="935:49" pos:end="935:88"><literal type="string" pos:start="935:49" pos:end="935:88">"allocated output buffer is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="937:21" pos:end="937:30">return <expr pos:start="937:28" pos:end="937:29"><operator pos:start="937:28" pos:end="937:28">-</operator><literal type="number" pos:start="937:29" pos:end="937:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></while>

        <expr_stmt pos:start="945:9" pos:end="945:24"><expr pos:start="945:9" pos:end="945:23"><name pos:start="945:9" pos:end="945:11">src</name> <operator pos:start="945:13" pos:end="945:14">+=</operator> <name pos:start="945:16" pos:end="945:23">buf_size</name></expr>;</expr_stmt>

        <break pos:start="947:9" pos:end="947:14">break;</break>

    </block_content>}</block>

    <case pos:start="951:5" pos:end="951:31">case <expr pos:start="951:10" pos:end="951:30"><name pos:start="951:10" pos:end="951:30">CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>

        <while pos:start="953:9" pos:end="979:9">while <condition pos:start="953:15" pos:end="953:36">(<expr pos:start="953:16" pos:end="953:35"><name pos:start="953:16" pos:end="953:18">src</name> <operator pos:start="953:20" pos:end="953:20">&lt;</operator> <name pos:start="953:22" pos:end="953:24">buf</name> <operator pos:start="953:26" pos:end="953:26">+</operator> <name pos:start="953:28" pos:end="953:35">buf_size</name></expr>)</condition> <block pos:start="953:38" pos:end="979:9">{<block_content pos:start="955:13" pos:end="977:18">

            <if_stmt pos:start="955:13" pos:end="975:13"><if pos:start="955:13" pos:end="965:13">if <condition pos:start="955:16" pos:end="955:19">(<expr pos:start="955:17" pos:end="955:18"><name pos:start="955:17" pos:end="955:18">st</name></expr>)</condition> <block pos:start="955:21" pos:end="965:13">{<block_content pos:start="957:17" pos:end="963:46">

                <expr_stmt pos:start="957:17" pos:end="959:39"><expr pos:start="957:17" pos:end="959:38"><operator pos:start="957:17" pos:end="957:17">*</operator><name pos:start="957:18" pos:end="957:24">samples</name><operator pos:start="957:25" pos:end="957:26">++</operator> <operator pos:start="957:28" pos:end="957:28">=</operator> <call pos:start="957:30" pos:end="959:38"><name pos:start="957:30" pos:end="957:55">adpcm_yamaha_expand_nibble</name><argument_list pos:start="957:56" pos:end="959:38">(<argument pos:start="957:57" pos:end="957:69"><expr pos:start="957:57" pos:end="957:69"><operator pos:start="957:57" pos:end="957:57">&amp;</operator><name pos:start="957:58" pos:end="957:69"><name pos:start="957:58" pos:end="957:58">c</name><operator pos:start="957:59" pos:end="957:60">-&gt;</operator><name pos:start="957:61" pos:end="957:66">status</name><index pos:start="957:67" pos:end="957:69">[<expr pos:start="957:68" pos:end="957:68"><literal type="number" pos:start="957:68" pos:end="957:68">0</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="959:25" pos:end="959:37"><expr pos:start="959:25" pos:end="959:37"><name pos:start="959:25" pos:end="959:30"><name pos:start="959:25" pos:end="959:27">src</name><index pos:start="959:28" pos:end="959:30">[<expr pos:start="959:29" pos:end="959:29"><literal type="number" pos:start="959:29" pos:end="959:29">0</literal></expr>]</index></name> <operator pos:start="959:32" pos:end="959:32">&amp;</operator> <literal type="number" pos:start="959:34" pos:end="959:37">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="961:17" pos:end="963:46"><expr pos:start="961:17" pos:end="963:45"><operator pos:start="961:17" pos:end="961:17">*</operator><name pos:start="961:18" pos:end="961:24">samples</name><operator pos:start="961:25" pos:end="961:26">++</operator> <operator pos:start="961:28" pos:end="961:28">=</operator> <call pos:start="961:30" pos:end="963:45"><name pos:start="961:30" pos:end="961:55">adpcm_yamaha_expand_nibble</name><argument_list pos:start="961:56" pos:end="963:45">(<argument pos:start="961:57" pos:end="961:69"><expr pos:start="961:57" pos:end="961:69"><operator pos:start="961:57" pos:end="961:57">&amp;</operator><name pos:start="961:58" pos:end="961:69"><name pos:start="961:58" pos:end="961:58">c</name><operator pos:start="961:59" pos:end="961:60">-&gt;</operator><name pos:start="961:61" pos:end="961:66">status</name><index pos:start="961:67" pos:end="961:69">[<expr pos:start="961:68" pos:end="961:68"><literal type="number" pos:start="961:68" pos:end="961:68">1</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="963:25" pos:end="963:44"><expr pos:start="963:25" pos:end="963:44"><operator pos:start="963:25" pos:end="963:25">(</operator><name pos:start="963:26" pos:end="963:31"><name pos:start="963:26" pos:end="963:28">src</name><index pos:start="963:29" pos:end="963:31">[<expr pos:start="963:30" pos:end="963:30"><literal type="number" pos:start="963:30" pos:end="963:30">0</literal></expr>]</index></name> <operator pos:start="963:33" pos:end="963:34">&gt;&gt;</operator> <literal type="number" pos:start="963:36" pos:end="963:36">4</literal><operator pos:start="963:37" pos:end="963:37">)</operator> <operator pos:start="963:39" pos:end="963:39">&amp;</operator> <literal type="number" pos:start="963:41" pos:end="963:44">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="965:15" pos:end="975:13">else <block pos:start="965:20" pos:end="975:13">{<block_content pos:start="967:17" pos:end="973:46">

                <expr_stmt pos:start="967:17" pos:end="969:39"><expr pos:start="967:17" pos:end="969:38"><operator pos:start="967:17" pos:end="967:17">*</operator><name pos:start="967:18" pos:end="967:24">samples</name><operator pos:start="967:25" pos:end="967:26">++</operator> <operator pos:start="967:28" pos:end="967:28">=</operator> <call pos:start="967:30" pos:end="969:38"><name pos:start="967:30" pos:end="967:55">adpcm_yamaha_expand_nibble</name><argument_list pos:start="967:56" pos:end="969:38">(<argument pos:start="967:57" pos:end="967:69"><expr pos:start="967:57" pos:end="967:69"><operator pos:start="967:57" pos:end="967:57">&amp;</operator><name pos:start="967:58" pos:end="967:69"><name pos:start="967:58" pos:end="967:58">c</name><operator pos:start="967:59" pos:end="967:60">-&gt;</operator><name pos:start="967:61" pos:end="967:66">status</name><index pos:start="967:67" pos:end="967:69">[<expr pos:start="967:68" pos:end="967:68"><literal type="number" pos:start="967:68" pos:end="967:68">0</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="969:25" pos:end="969:37"><expr pos:start="969:25" pos:end="969:37"><name pos:start="969:25" pos:end="969:30"><name pos:start="969:25" pos:end="969:27">src</name><index pos:start="969:28" pos:end="969:30">[<expr pos:start="969:29" pos:end="969:29"><literal type="number" pos:start="969:29" pos:end="969:29">0</literal></expr>]</index></name> <operator pos:start="969:32" pos:end="969:32">&amp;</operator> <literal type="number" pos:start="969:34" pos:end="969:37">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="971:17" pos:end="973:46"><expr pos:start="971:17" pos:end="973:45"><operator pos:start="971:17" pos:end="971:17">*</operator><name pos:start="971:18" pos:end="971:24">samples</name><operator pos:start="971:25" pos:end="971:26">++</operator> <operator pos:start="971:28" pos:end="971:28">=</operator> <call pos:start="971:30" pos:end="973:45"><name pos:start="971:30" pos:end="971:55">adpcm_yamaha_expand_nibble</name><argument_list pos:start="971:56" pos:end="973:45">(<argument pos:start="971:57" pos:end="971:69"><expr pos:start="971:57" pos:end="971:69"><operator pos:start="971:57" pos:end="971:57">&amp;</operator><name pos:start="971:58" pos:end="971:69"><name pos:start="971:58" pos:end="971:58">c</name><operator pos:start="971:59" pos:end="971:60">-&gt;</operator><name pos:start="971:61" pos:end="971:66">status</name><index pos:start="971:67" pos:end="971:69">[<expr pos:start="971:68" pos:end="971:68"><literal type="number" pos:start="971:68" pos:end="971:68">0</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="973:25" pos:end="973:44"><expr pos:start="973:25" pos:end="973:44"><operator pos:start="973:25" pos:end="973:25">(</operator><name pos:start="973:26" pos:end="973:31"><name pos:start="973:26" pos:end="973:28">src</name><index pos:start="973:29" pos:end="973:31">[<expr pos:start="973:30" pos:end="973:30"><literal type="number" pos:start="973:30" pos:end="973:30">0</literal></expr>]</index></name> <operator pos:start="973:33" pos:end="973:34">&gt;&gt;</operator> <literal type="number" pos:start="973:36" pos:end="973:36">4</literal><operator pos:start="973:37" pos:end="973:37">)</operator> <operator pos:start="973:39" pos:end="973:39">&amp;</operator> <literal type="number" pos:start="973:41" pos:end="973:44">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="977:13" pos:end="977:18"><expr pos:start="977:13" pos:end="977:17"><name pos:start="977:13" pos:end="977:15">src</name><operator pos:start="977:16" pos:end="977:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="981:9" pos:end="981:14">break;</break>

    <case pos:start="983:5" pos:end="983:28">case <expr pos:start="983:10" pos:end="983:27"><name pos:start="983:10" pos:end="983:27">CODEC_ID_ADPCM_THP</name></expr>:</case>

    <block pos:start="985:5" pos:end="1101:5">{<block_content pos:start="987:9" pos:end="1099:14">

        <decl_stmt pos:start="987:9" pos:end="987:25"><decl pos:start="987:9" pos:end="987:24"><type pos:start="987:9" pos:end="987:11"><name pos:start="987:9" pos:end="987:11">int</name></type> <name pos:start="987:13" pos:end="987:24"><name pos:start="987:13" pos:end="987:17">table</name><index pos:start="987:18" pos:end="987:20">[<expr pos:start="987:19" pos:end="987:19"><literal type="number" pos:start="987:19" pos:end="987:19">2</literal></expr>]</index><index pos:start="987:21" pos:end="987:24">[<expr pos:start="987:22" pos:end="987:23"><literal type="number" pos:start="987:22" pos:end="987:23">16</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="989:9" pos:end="989:31"><decl pos:start="989:9" pos:end="989:30"><type pos:start="989:9" pos:end="989:20"><name pos:start="989:9" pos:end="989:16">unsigned</name> <name pos:start="989:18" pos:end="989:20">int</name></type> <name pos:start="989:22" pos:end="989:30">samplecnt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="991:9" pos:end="991:23"><decl pos:start="991:9" pos:end="991:22"><type pos:start="991:9" pos:end="991:11"><name pos:start="991:9" pos:end="991:11">int</name></type> <name pos:start="991:13" pos:end="991:22"><name pos:start="991:13" pos:end="991:16">prev</name><index pos:start="991:17" pos:end="991:19">[<expr pos:start="991:18" pos:end="991:18"><literal type="number" pos:start="991:18" pos:end="991:18">2</literal></expr>]</index><index pos:start="991:20" pos:end="991:22">[<expr pos:start="991:21" pos:end="991:21"><literal type="number" pos:start="991:21" pos:end="991:21">2</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="993:9" pos:end="993:15"><decl pos:start="993:9" pos:end="993:14"><type pos:start="993:9" pos:end="993:11"><name pos:start="993:9" pos:end="993:11">int</name></type> <name pos:start="993:13" pos:end="993:14">ch</name></decl>;</decl_stmt>



        <if_stmt pos:start="997:9" pos:end="1003:9"><if pos:start="997:9" pos:end="1003:9">if <condition pos:start="997:12" pos:end="997:26">(<expr pos:start="997:13" pos:end="997:25"><name pos:start="997:13" pos:end="997:20">buf_size</name> <operator pos:start="997:22" pos:end="997:22">&lt;</operator> <literal type="number" pos:start="997:24" pos:end="997:25">80</literal></expr>)</condition> <block pos:start="997:28" pos:end="1003:9">{<block_content pos:start="999:13" pos:end="1001:22">

            <expr_stmt pos:start="999:13" pos:end="999:61"><expr pos:start="999:13" pos:end="999:60"><call pos:start="999:13" pos:end="999:60"><name pos:start="999:13" pos:end="999:18">av_log</name><argument_list pos:start="999:19" pos:end="999:60">(<argument pos:start="999:20" pos:end="999:24"><expr pos:start="999:20" pos:end="999:24"><name pos:start="999:20" pos:end="999:24">avctx</name></expr></argument>, <argument pos:start="999:27" pos:end="999:38"><expr pos:start="999:27" pos:end="999:38"><name pos:start="999:27" pos:end="999:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="999:41" pos:end="999:59"><expr pos:start="999:41" pos:end="999:59"><literal type="string" pos:start="999:41" pos:end="999:59">"frame too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="1001:13" pos:end="1001:22">return <expr pos:start="1001:20" pos:end="1001:21"><operator pos:start="1001:20" pos:end="1001:20">-</operator><literal type="number" pos:start="1001:21" pos:end="1001:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="1007:9" pos:end="1007:15"><expr pos:start="1007:9" pos:end="1007:14"><name pos:start="1007:9" pos:end="1007:11">src</name><operator pos:start="1007:12" pos:end="1007:13">+=</operator><literal type="number" pos:start="1007:14" pos:end="1007:14">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1009:9" pos:end="1009:46"><expr pos:start="1009:9" pos:end="1009:45"><name pos:start="1009:9" pos:end="1009:17">samplecnt</name> <operator pos:start="1009:19" pos:end="1009:19">=</operator> <call pos:start="1009:21" pos:end="1009:45"><name pos:start="1009:21" pos:end="1009:39">bytestream_get_be32</name><argument_list pos:start="1009:40" pos:end="1009:45">(<argument pos:start="1009:41" pos:end="1009:44"><expr pos:start="1009:41" pos:end="1009:44"><operator pos:start="1009:41" pos:end="1009:41">&amp;</operator><name pos:start="1009:42" pos:end="1009:44">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="1013:9" pos:end="1015:61">for <control pos:start="1013:13" pos:end="1013:32">(<init pos:start="1013:14" pos:end="1013:19"><expr pos:start="1013:14" pos:end="1013:18"><name pos:start="1013:14" pos:end="1013:14">i</name> <operator pos:start="1013:16" pos:end="1013:16">=</operator> <literal type="number" pos:start="1013:18" pos:end="1013:18">0</literal></expr>;</init> <condition pos:start="1013:21" pos:end="1013:27"><expr pos:start="1013:21" pos:end="1013:26"><name pos:start="1013:21" pos:end="1013:21">i</name> <operator pos:start="1013:23" pos:end="1013:23">&lt;</operator> <literal type="number" pos:start="1013:25" pos:end="1013:26">32</literal></expr>;</condition> <incr pos:start="1013:29" pos:end="1013:31"><expr pos:start="1013:29" pos:end="1013:31"><name pos:start="1013:29" pos:end="1013:29">i</name><operator pos:start="1013:30" pos:end="1013:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1015:13" pos:end="1015:61"><block_content pos:start="1015:13" pos:end="1015:61">

            <expr_stmt pos:start="1015:13" pos:end="1015:61"><expr pos:start="1015:13" pos:end="1015:60"><name pos:start="1015:13" pos:end="1015:23"><name pos:start="1015:13" pos:end="1015:17">table</name><index pos:start="1015:18" pos:end="1015:20">[<expr pos:start="1015:19" pos:end="1015:19"><literal type="number" pos:start="1015:19" pos:end="1015:19">0</literal></expr>]</index><index pos:start="1015:21" pos:end="1015:23">[<expr pos:start="1015:22" pos:end="1015:22"><name pos:start="1015:22" pos:end="1015:22">i</name></expr>]</index></name> <operator pos:start="1015:25" pos:end="1015:25">=</operator> <operator pos:start="1015:27" pos:end="1015:27">(</operator><name pos:start="1015:28" pos:end="1015:34">int16_t</name><operator pos:start="1015:35" pos:end="1015:35">)</operator><call pos:start="1015:36" pos:end="1015:60"><name pos:start="1015:36" pos:end="1015:54">bytestream_get_be16</name><argument_list pos:start="1015:55" pos:end="1015:60">(<argument pos:start="1015:56" pos:end="1015:59"><expr pos:start="1015:56" pos:end="1015:59"><operator pos:start="1015:56" pos:end="1015:56">&amp;</operator><name pos:start="1015:57" pos:end="1015:59">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <comment type="block" pos:start="1019:9" pos:end="1019:46">/* Initialize the previous sample.  */</comment>

        <for pos:start="1021:9" pos:end="1023:60">for <control pos:start="1021:13" pos:end="1021:31">(<init pos:start="1021:14" pos:end="1021:19"><expr pos:start="1021:14" pos:end="1021:18"><name pos:start="1021:14" pos:end="1021:14">i</name> <operator pos:start="1021:16" pos:end="1021:16">=</operator> <literal type="number" pos:start="1021:18" pos:end="1021:18">0</literal></expr>;</init> <condition pos:start="1021:21" pos:end="1021:26"><expr pos:start="1021:21" pos:end="1021:25"><name pos:start="1021:21" pos:end="1021:21">i</name> <operator pos:start="1021:23" pos:end="1021:23">&lt;</operator> <literal type="number" pos:start="1021:25" pos:end="1021:25">4</literal></expr>;</condition> <incr pos:start="1021:28" pos:end="1021:30"><expr pos:start="1021:28" pos:end="1021:30"><name pos:start="1021:28" pos:end="1021:28">i</name><operator pos:start="1021:29" pos:end="1021:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1023:13" pos:end="1023:60"><block_content pos:start="1023:13" pos:end="1023:60">

            <expr_stmt pos:start="1023:13" pos:end="1023:60"><expr pos:start="1023:13" pos:end="1023:59"><name pos:start="1023:13" pos:end="1023:22"><name pos:start="1023:13" pos:end="1023:16">prev</name><index pos:start="1023:17" pos:end="1023:19">[<expr pos:start="1023:18" pos:end="1023:18"><literal type="number" pos:start="1023:18" pos:end="1023:18">0</literal></expr>]</index><index pos:start="1023:20" pos:end="1023:22">[<expr pos:start="1023:21" pos:end="1023:21"><name pos:start="1023:21" pos:end="1023:21">i</name></expr>]</index></name> <operator pos:start="1023:24" pos:end="1023:24">=</operator> <operator pos:start="1023:26" pos:end="1023:26">(</operator><name pos:start="1023:27" pos:end="1023:33">int16_t</name><operator pos:start="1023:34" pos:end="1023:34">)</operator><call pos:start="1023:35" pos:end="1023:59"><name pos:start="1023:35" pos:end="1023:53">bytestream_get_be16</name><argument_list pos:start="1023:54" pos:end="1023:59">(<argument pos:start="1023:55" pos:end="1023:58"><expr pos:start="1023:55" pos:end="1023:58"><operator pos:start="1023:55" pos:end="1023:55">&amp;</operator><name pos:start="1023:56" pos:end="1023:58">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="1027:9" pos:end="1033:9"><if pos:start="1027:9" pos:end="1033:9">if <condition pos:start="1027:12" pos:end="1027:61">(<expr pos:start="1027:13" pos:end="1027:60"><name pos:start="1027:13" pos:end="1027:21">samplecnt</name> <operator pos:start="1027:23" pos:end="1027:24">&gt;=</operator> <operator pos:start="1027:26" pos:end="1027:26">(</operator><name pos:start="1027:27" pos:end="1027:37">samples_end</name> <operator pos:start="1027:39" pos:end="1027:39">-</operator> <name pos:start="1027:41" pos:end="1027:47">samples</name><operator pos:start="1027:48" pos:end="1027:48">)</operator> <operator pos:start="1027:50" pos:end="1027:50">/</operator>  <operator pos:start="1027:53" pos:end="1027:53">(</operator><name pos:start="1027:54" pos:end="1027:55">st</name> <operator pos:start="1027:57" pos:end="1027:57">+</operator> <literal type="number" pos:start="1027:59" pos:end="1027:59">1</literal><operator pos:start="1027:60" pos:end="1027:60">)</operator></expr>)</condition> <block pos:start="1027:63" pos:end="1033:9">{<block_content pos:start="1029:13" pos:end="1031:22">

            <expr_stmt pos:start="1029:13" pos:end="1029:82"><expr pos:start="1029:13" pos:end="1029:81"><call pos:start="1029:13" pos:end="1029:81"><name pos:start="1029:13" pos:end="1029:18">av_log</name><argument_list pos:start="1029:19" pos:end="1029:81">(<argument pos:start="1029:20" pos:end="1029:24"><expr pos:start="1029:20" pos:end="1029:24"><name pos:start="1029:20" pos:end="1029:24">avctx</name></expr></argument>, <argument pos:start="1029:27" pos:end="1029:38"><expr pos:start="1029:27" pos:end="1029:38"><name pos:start="1029:27" pos:end="1029:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1029:41" pos:end="1029:80"><expr pos:start="1029:41" pos:end="1029:80"><literal type="string" pos:start="1029:41" pos:end="1029:80">"allocated output buffer is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="1031:13" pos:end="1031:22">return <expr pos:start="1031:20" pos:end="1031:21"><operator pos:start="1031:20" pos:end="1031:20">-</operator><literal type="number" pos:start="1031:21" pos:end="1031:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="1037:9" pos:end="1089:9">for <control pos:start="1037:13" pos:end="1037:36">(<init pos:start="1037:14" pos:end="1037:20"><expr pos:start="1037:14" pos:end="1037:19"><name pos:start="1037:14" pos:end="1037:15">ch</name> <operator pos:start="1037:17" pos:end="1037:17">=</operator> <literal type="number" pos:start="1037:19" pos:end="1037:19">0</literal></expr>;</init> <condition pos:start="1037:22" pos:end="1037:30"><expr pos:start="1037:22" pos:end="1037:29"><name pos:start="1037:22" pos:end="1037:23">ch</name> <operator pos:start="1037:25" pos:end="1037:26">&lt;=</operator> <name pos:start="1037:28" pos:end="1037:29">st</name></expr>;</condition> <incr pos:start="1037:32" pos:end="1037:35"><expr pos:start="1037:32" pos:end="1037:35"><name pos:start="1037:32" pos:end="1037:33">ch</name><operator pos:start="1037:34" pos:end="1037:35">++</operator></expr></incr>)</control> <block pos:start="1037:38" pos:end="1089:9">{<block_content pos:start="1039:13" pos:end="1087:13">

            <expr_stmt pos:start="1039:13" pos:end="1039:51"><expr pos:start="1039:13" pos:end="1039:50"><name pos:start="1039:13" pos:end="1039:19">samples</name> <operator pos:start="1039:21" pos:end="1039:21">=</operator> <operator pos:start="1039:23" pos:end="1039:23">(</operator><name pos:start="1039:24" pos:end="1039:31">unsigned</name> <name pos:start="1039:33" pos:end="1039:37">short</name> <operator pos:start="1039:39" pos:end="1039:39">*</operator><operator pos:start="1039:40" pos:end="1039:40">)</operator> <name pos:start="1039:42" pos:end="1039:45">data</name> <operator pos:start="1039:47" pos:end="1039:47">+</operator> <name pos:start="1039:49" pos:end="1039:50">ch</name></expr>;</expr_stmt>



            <comment type="block" pos:start="1043:13" pos:end="1043:57">/* Read in every sample for this channel.  */</comment>

            <for pos:start="1045:13" pos:end="1087:13">for <control pos:start="1045:17" pos:end="1045:48">(<init pos:start="1045:18" pos:end="1045:23"><expr pos:start="1045:18" pos:end="1045:22"><name pos:start="1045:18" pos:end="1045:18">i</name> <operator pos:start="1045:20" pos:end="1045:20">=</operator> <literal type="number" pos:start="1045:22" pos:end="1045:22">0</literal></expr>;</init> <condition pos:start="1045:25" pos:end="1045:43"><expr pos:start="1045:25" pos:end="1045:42"><name pos:start="1045:25" pos:end="1045:25">i</name> <operator pos:start="1045:27" pos:end="1045:27">&lt;</operator> <name pos:start="1045:29" pos:end="1045:37">samplecnt</name> <operator pos:start="1045:39" pos:end="1045:39">/</operator> <literal type="number" pos:start="1045:41" pos:end="1045:42">14</literal></expr>;</condition> <incr pos:start="1045:45" pos:end="1045:47"><expr pos:start="1045:45" pos:end="1045:47"><name pos:start="1045:45" pos:end="1045:45">i</name><operator pos:start="1045:46" pos:end="1045:47">++</operator></expr></incr>)</control> <block pos:start="1045:50" pos:end="1087:13">{<block_content pos:start="1047:17" pos:end="1085:17">

                <decl_stmt pos:start="1047:17" pos:end="1047:44"><decl pos:start="1047:17" pos:end="1047:43"><type pos:start="1047:17" pos:end="1047:19"><name pos:start="1047:17" pos:end="1047:19">int</name></type> <name pos:start="1047:21" pos:end="1047:25">index</name> <init pos:start="1047:27" pos:end="1047:43">= <expr pos:start="1047:29" pos:end="1047:43"><operator pos:start="1047:29" pos:end="1047:29">(</operator><operator pos:start="1047:30" pos:end="1047:30">*</operator><name pos:start="1047:31" pos:end="1047:33">src</name> <operator pos:start="1047:35" pos:end="1047:36">&gt;&gt;</operator> <literal type="number" pos:start="1047:38" pos:end="1047:38">4</literal><operator pos:start="1047:39" pos:end="1047:39">)</operator> <operator pos:start="1047:41" pos:end="1047:41">&amp;</operator> <literal type="number" pos:start="1047:43" pos:end="1047:43">7</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1049:17" pos:end="1049:54"><decl pos:start="1049:17" pos:end="1049:53"><type pos:start="1049:17" pos:end="1049:28"><name pos:start="1049:17" pos:end="1049:24">unsigned</name> <name pos:start="1049:26" pos:end="1049:28">int</name></type> <name pos:start="1049:30" pos:end="1049:32">exp</name> <init pos:start="1049:34" pos:end="1049:53">= <expr pos:start="1049:36" pos:end="1049:53"><literal type="number" pos:start="1049:36" pos:end="1049:39">28</literal> <operator pos:start="1049:39" pos:end="1049:39">-</operator> <operator pos:start="1049:41" pos:end="1049:41">(</operator><operator pos:start="1049:42" pos:end="1049:42">*</operator><name pos:start="1049:43" pos:end="1049:45">src</name><operator pos:start="1049:46" pos:end="1049:47">++</operator> <operator pos:start="1049:49" pos:end="1049:49">&amp;</operator> <literal type="number" pos:start="1049:51" pos:end="1049:52">15</literal><operator pos:start="1049:53" pos:end="1049:53">)</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1051:17" pos:end="1051:51"><decl pos:start="1051:17" pos:end="1051:50"><type pos:start="1051:17" pos:end="1051:19"><name pos:start="1051:17" pos:end="1051:19">int</name></type> <name pos:start="1051:21" pos:end="1051:27">factor1</name> <init pos:start="1051:29" pos:end="1051:50">= <expr pos:start="1051:31" pos:end="1051:50"><name pos:start="1051:31" pos:end="1051:50"><name pos:start="1051:31" pos:end="1051:35">table</name><index pos:start="1051:36" pos:end="1051:39">[<expr pos:start="1051:37" pos:end="1051:38"><name pos:start="1051:37" pos:end="1051:38">ch</name></expr>]</index><index pos:start="1051:40" pos:end="1051:50">[<expr pos:start="1051:41" pos:end="1051:49"><name pos:start="1051:41" pos:end="1051:45">index</name> <operator pos:start="1051:47" pos:end="1051:47">*</operator> <literal type="number" pos:start="1051:49" pos:end="1051:49">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1053:17" pos:end="1053:55"><decl pos:start="1053:17" pos:end="1053:54"><type pos:start="1053:17" pos:end="1053:19"><name pos:start="1053:17" pos:end="1053:19">int</name></type> <name pos:start="1053:21" pos:end="1053:27">factor2</name> <init pos:start="1053:29" pos:end="1053:54">= <expr pos:start="1053:31" pos:end="1053:54"><name pos:start="1053:31" pos:end="1053:54"><name pos:start="1053:31" pos:end="1053:35">table</name><index pos:start="1053:36" pos:end="1053:39">[<expr pos:start="1053:37" pos:end="1053:38"><name pos:start="1053:37" pos:end="1053:38">ch</name></expr>]</index><index pos:start="1053:40" pos:end="1053:54">[<expr pos:start="1053:41" pos:end="1053:53"><name pos:start="1053:41" pos:end="1053:45">index</name> <operator pos:start="1053:47" pos:end="1053:47">*</operator> <literal type="number" pos:start="1053:49" pos:end="1053:51">2</literal> <operator pos:start="1053:51" pos:end="1053:51">+</operator> <literal type="number" pos:start="1053:53" pos:end="1053:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="1057:17" pos:end="1057:41">/* Decode 14 samples.  */</comment>

                <for pos:start="1059:17" pos:end="1085:17">for <control pos:start="1059:21" pos:end="1059:40">(<init pos:start="1059:22" pos:end="1059:27"><expr pos:start="1059:22" pos:end="1059:26"><name pos:start="1059:22" pos:end="1059:22">n</name> <operator pos:start="1059:24" pos:end="1059:24">=</operator> <literal type="number" pos:start="1059:26" pos:end="1059:26">0</literal></expr>;</init> <condition pos:start="1059:29" pos:end="1059:35"><expr pos:start="1059:29" pos:end="1059:34"><name pos:start="1059:29" pos:end="1059:29">n</name> <operator pos:start="1059:31" pos:end="1059:31">&lt;</operator> <literal type="number" pos:start="1059:33" pos:end="1059:34">14</literal></expr>;</condition> <incr pos:start="1059:37" pos:end="1059:39"><expr pos:start="1059:37" pos:end="1059:39"><name pos:start="1059:37" pos:end="1059:37">n</name><operator pos:start="1059:38" pos:end="1059:39">++</operator></expr></incr>)</control> <block pos:start="1059:42" pos:end="1085:17">{<block_content pos:start="1061:21" pos:end="1083:34">

                    <decl_stmt pos:start="1061:21" pos:end="1061:38"><decl pos:start="1061:21" pos:end="1061:37"><type pos:start="1061:21" pos:end="1061:27"><name pos:start="1061:21" pos:end="1061:27">int32_t</name></type> <name pos:start="1061:29" pos:end="1061:37">sampledat</name></decl>;</decl_stmt>

                    <if_stmt pos:start="1063:21" pos:end="1065:55"><if pos:start="1063:21" pos:end="1063:55">if<condition pos:start="1063:23" pos:end="1063:27">(<expr pos:start="1063:24" pos:end="1063:26"><name pos:start="1063:24" pos:end="1063:24">n</name><operator pos:start="1063:25" pos:end="1063:25">&amp;</operator><literal type="number" pos:start="1063:26" pos:end="1063:26">1</literal></expr>)</condition><block type="pseudo" pos:start="1063:29" pos:end="1063:55"><block_content pos:start="1063:29" pos:end="1063:55"> <expr_stmt pos:start="1063:29" pos:end="1063:55"><expr pos:start="1063:29" pos:end="1063:54"><name pos:start="1063:29" pos:end="1063:37">sampledat</name><operator pos:start="1063:38" pos:end="1063:38">=</operator>  <operator pos:start="1063:41" pos:end="1063:41">*</operator><name pos:start="1063:42" pos:end="1063:44">src</name><operator pos:start="1063:45" pos:end="1063:46">++</operator>    <operator pos:start="1063:51" pos:end="1063:52">&lt;&lt;</operator><literal type="number" pos:start="1063:53" pos:end="1063:54">28</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1065:21" pos:end="1065:55">else<block type="pseudo" pos:start="1065:29" pos:end="1065:55"><block_content pos:start="1065:29" pos:end="1065:55">    <expr_stmt pos:start="1065:29" pos:end="1065:55"><expr pos:start="1065:29" pos:end="1065:54"><name pos:start="1065:29" pos:end="1065:37">sampledat</name><operator pos:start="1065:38" pos:end="1065:38">=</operator> <operator pos:start="1065:40" pos:end="1065:40">(</operator><operator pos:start="1065:41" pos:end="1065:41">*</operator><name pos:start="1065:42" pos:end="1065:44">src</name><operator pos:start="1065:45" pos:end="1065:45">&amp;</operator><literal type="number" pos:start="1065:46" pos:end="1065:49">0xF0</literal><operator pos:start="1065:50" pos:end="1065:50">)</operator><operator pos:start="1065:51" pos:end="1065:52">&lt;&lt;</operator><literal type="number" pos:start="1065:53" pos:end="1065:54">24</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <expr_stmt pos:start="1069:21" pos:end="1071:81"><expr pos:start="1069:21" pos:end="1071:80"><operator pos:start="1069:21" pos:end="1069:21">*</operator><name pos:start="1069:22" pos:end="1069:28">samples</name> <operator pos:start="1069:30" pos:end="1069:30">=</operator> <operator pos:start="1069:32" pos:end="1069:32">(</operator><operator pos:start="1069:33" pos:end="1069:33">(</operator><name pos:start="1069:34" pos:end="1069:44"><name pos:start="1069:34" pos:end="1069:37">prev</name><index pos:start="1069:38" pos:end="1069:41">[<expr pos:start="1069:39" pos:end="1069:40"><name pos:start="1069:39" pos:end="1069:40">ch</name></expr>]</index><index pos:start="1069:42" pos:end="1069:44">[<expr pos:start="1069:43" pos:end="1069:43"><literal type="number" pos:start="1069:43" pos:end="1069:43">0</literal></expr>]</index></name><operator pos:start="1069:45" pos:end="1069:45">*</operator><name pos:start="1069:46" pos:end="1069:52">factor1</name>

                                <operator pos:start="1071:33" pos:end="1071:33">+</operator> <name pos:start="1071:35" pos:end="1071:45"><name pos:start="1071:35" pos:end="1071:38">prev</name><index pos:start="1071:39" pos:end="1071:42">[<expr pos:start="1071:40" pos:end="1071:41"><name pos:start="1071:40" pos:end="1071:41">ch</name></expr>]</index><index pos:start="1071:43" pos:end="1071:45">[<expr pos:start="1071:44" pos:end="1071:44"><literal type="number" pos:start="1071:44" pos:end="1071:44">1</literal></expr>]</index></name><operator pos:start="1071:46" pos:end="1071:46">*</operator><name pos:start="1071:47" pos:end="1071:53">factor2</name><operator pos:start="1071:54" pos:end="1071:54">)</operator> <operator pos:start="1071:56" pos:end="1071:57">&gt;&gt;</operator> <literal type="number" pos:start="1071:59" pos:end="1071:60">11</literal><operator pos:start="1071:61" pos:end="1071:61">)</operator> <operator pos:start="1071:63" pos:end="1071:63">+</operator> <operator pos:start="1071:65" pos:end="1071:65">(</operator><name pos:start="1071:66" pos:end="1071:74">sampledat</name><operator pos:start="1071:75" pos:end="1071:76">&gt;&gt;</operator><name pos:start="1071:77" pos:end="1071:79">exp</name><operator pos:start="1071:80" pos:end="1071:80">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1073:21" pos:end="1073:46"><expr pos:start="1073:21" pos:end="1073:45"><name pos:start="1073:21" pos:end="1073:31"><name pos:start="1073:21" pos:end="1073:24">prev</name><index pos:start="1073:25" pos:end="1073:28">[<expr pos:start="1073:26" pos:end="1073:27"><name pos:start="1073:26" pos:end="1073:27">ch</name></expr>]</index><index pos:start="1073:29" pos:end="1073:31">[<expr pos:start="1073:30" pos:end="1073:30"><literal type="number" pos:start="1073:30" pos:end="1073:30">1</literal></expr>]</index></name> <operator pos:start="1073:33" pos:end="1073:33">=</operator> <name pos:start="1073:35" pos:end="1073:45"><name pos:start="1073:35" pos:end="1073:38">prev</name><index pos:start="1073:39" pos:end="1073:42">[<expr pos:start="1073:40" pos:end="1073:41"><name pos:start="1073:40" pos:end="1073:41">ch</name></expr>]</index><index pos:start="1073:43" pos:end="1073:45">[<expr pos:start="1073:44" pos:end="1073:44"><literal type="number" pos:start="1073:44" pos:end="1073:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1075:21" pos:end="1075:45"><expr pos:start="1075:21" pos:end="1075:44"><name pos:start="1075:21" pos:end="1075:31"><name pos:start="1075:21" pos:end="1075:24">prev</name><index pos:start="1075:25" pos:end="1075:28">[<expr pos:start="1075:26" pos:end="1075:27"><name pos:start="1075:26" pos:end="1075:27">ch</name></expr>]</index><index pos:start="1075:29" pos:end="1075:31">[<expr pos:start="1075:30" pos:end="1075:30"><literal type="number" pos:start="1075:30" pos:end="1075:30">0</literal></expr>]</index></name> <operator pos:start="1075:33" pos:end="1075:33">=</operator> <operator pos:start="1075:35" pos:end="1075:35">*</operator><name pos:start="1075:36" pos:end="1075:42">samples</name><operator pos:start="1075:43" pos:end="1075:44">++</operator></expr>;</expr_stmt>



                    <comment type="block" pos:start="1079:21" pos:end="1081:52">/* In case of stereo, skip one sample, this sample

                       is for the other channel.  */</comment>

                    <expr_stmt pos:start="1083:21" pos:end="1083:34"><expr pos:start="1083:21" pos:end="1083:33"><name pos:start="1083:21" pos:end="1083:27">samples</name> <operator pos:start="1083:29" pos:end="1083:30">+=</operator> <name pos:start="1083:32" pos:end="1083:33">st</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <comment type="block" pos:start="1093:9" pos:end="1095:52">/* In the previous loop, in case stereo is used, samples is

           increased exactly one time too often.  */</comment>

        <expr_stmt pos:start="1097:9" pos:end="1097:22"><expr pos:start="1097:9" pos:end="1097:21"><name pos:start="1097:9" pos:end="1097:15">samples</name> <operator pos:start="1097:17" pos:end="1097:18">-=</operator> <name pos:start="1097:20" pos:end="1097:21">st</name></expr>;</expr_stmt>

        <break pos:start="1099:9" pos:end="1099:14">break;</break>

    </block_content>}</block>



    <default pos:start="1105:5" pos:end="1105:12">default:</default>

        <return pos:start="1107:9" pos:end="1107:18">return <expr pos:start="1107:16" pos:end="1107:17"><operator pos:start="1107:16" pos:end="1107:16">-</operator><literal type="number" pos:start="1107:17" pos:end="1107:17">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="1111:5" pos:end="1111:54"><expr pos:start="1111:5" pos:end="1111:53"><operator pos:start="1111:5" pos:end="1111:5">*</operator><name pos:start="1111:6" pos:end="1111:14">data_size</name> <operator pos:start="1111:16" pos:end="1111:16">=</operator> <operator pos:start="1111:18" pos:end="1111:18">(</operator><name pos:start="1111:19" pos:end="1111:25">uint8_t</name> <operator pos:start="1111:27" pos:end="1111:27">*</operator><operator pos:start="1111:28" pos:end="1111:28">)</operator><name pos:start="1111:29" pos:end="1111:35">samples</name> <operator pos:start="1111:37" pos:end="1111:37">-</operator> <operator pos:start="1111:39" pos:end="1111:39">(</operator><name pos:start="1111:40" pos:end="1111:46">uint8_t</name> <operator pos:start="1111:48" pos:end="1111:48">*</operator><operator pos:start="1111:49" pos:end="1111:49">)</operator><name pos:start="1111:50" pos:end="1111:53">data</name></expr>;</expr_stmt>

    <return pos:start="1113:5" pos:end="1113:21">return <expr pos:start="1113:12" pos:end="1113:20"><name pos:start="1113:12" pos:end="1113:14">src</name> <operator pos:start="1113:16" pos:end="1113:16">-</operator> <name pos:start="1113:18" pos:end="1113:20">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
