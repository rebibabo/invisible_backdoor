<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3134.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">wmavoice_decode_packet</name><parameter_list pos:start="1:34" pos:end="3:70">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">ctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:52"><decl pos:start="3:35" pos:end="3:52"><type pos:start="3:35" pos:end="3:52"><name pos:start="3:35" pos:end="3:37">int</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:52">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:69"><decl pos:start="3:55" pos:end="3:69"><type pos:start="3:55" pos:end="3:69"><name pos:start="3:55" pos:end="3:62">AVPacket</name> <modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:69">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="177:1">{<block_content pos:start="7:5" pos:end="175:16">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">WMAVoiceContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:22">s</name> <init pos:start="7:24" pos:end="7:39">= <expr pos:start="7:26" pos:end="7:39"><name pos:start="7:26" pos:end="7:39"><name pos:start="7:26" pos:end="7:28">ctx</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">GetBitContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">gb</name> <init pos:start="9:23" pos:end="9:30">= <expr pos:start="9:25" pos:end="9:30"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:30"><name pos:start="9:26" pos:end="9:26">s</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">res</name></decl>, <decl pos:start="11:20" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:22">pos</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="23:54">/* Packets are sometimes a multiple of ctx-&gt;block_align, with a packet

     * header at each ctx-&gt;block_align bytes. However, FFmpeg's ASF demuxer

     * feeds us ASF packets, which may concatenate multiple "codec" packets

     * in a single "muxer" packet, so we artificially emulate that by

     * capping the packet size at ctx-&gt;block_align. */</comment>

    <for pos:start="25:5" pos:end="25:80">for <control pos:start="25:9" pos:end="25:79">(<init pos:start="25:10" pos:end="25:28"><expr pos:start="25:10" pos:end="25:27"><name pos:start="25:10" pos:end="25:13">size</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:27"><name pos:start="25:17" pos:end="25:21">avpkt</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">size</name></name></expr>;</init> <condition pos:start="25:30" pos:end="25:53"><expr pos:start="25:30" pos:end="25:52"><name pos:start="25:30" pos:end="25:33">size</name> <operator pos:start="25:35" pos:end="25:35">&gt;</operator> <name pos:start="25:37" pos:end="25:52"><name pos:start="25:37" pos:end="25:39">ctx</name><operator pos:start="25:40" pos:end="25:41">-&gt;</operator><name pos:start="25:42" pos:end="25:52">block_align</name></name></expr>;</condition> <incr pos:start="25:55" pos:end="25:78"><expr pos:start="25:55" pos:end="25:78"><name pos:start="25:55" pos:end="25:58">size</name> <operator pos:start="25:60" pos:end="25:61">-=</operator> <name pos:start="25:63" pos:end="25:78"><name pos:start="25:63" pos:end="25:65">ctx</name><operator pos:start="25:66" pos:end="25:67">-&gt;</operator><name pos:start="25:68" pos:end="25:78">block_align</name></name></expr></incr>)</control><block type="pseudo" pos:start="25:80" pos:end="25:80"><block_content pos:start="25:80" pos:end="25:80"><empty_stmt pos:start="25:80" pos:end="25:80">;</empty_stmt></block_content></block></for>

    <expr_stmt pos:start="27:5" pos:end="27:50"><expr pos:start="27:5" pos:end="27:49"><call pos:start="27:5" pos:end="27:49"><name pos:start="27:5" pos:end="27:17">init_get_bits</name><argument_list pos:start="27:18" pos:end="27:49">(<argument pos:start="27:19" pos:end="27:24"><expr pos:start="27:19" pos:end="27:24"><operator pos:start="27:19" pos:end="27:19">&amp;</operator><name pos:start="27:20" pos:end="27:24"><name pos:start="27:20" pos:end="27:20">s</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:24">gb</name></name></expr></argument>, <argument pos:start="27:27" pos:end="27:37"><expr pos:start="27:27" pos:end="27:37"><name pos:start="27:27" pos:end="27:37"><name pos:start="27:27" pos:end="27:31">avpkt</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:37">data</name></name></expr></argument>, <argument pos:start="27:40" pos:end="27:48"><expr pos:start="27:40" pos:end="27:48"><name pos:start="27:40" pos:end="27:43">size</name> <operator pos:start="27:45" pos:end="27:46">&lt;&lt;</operator> <literal type="number" pos:start="27:48" pos:end="27:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="35:21">/* size == ctx-&gt;block_align is used to indicate whether we are dealing with

     * a new packet or a packet of which we already read the packet header

     * previously. */</comment>

    <if_stmt pos:start="37:5" pos:end="111:41"><if pos:start="37:5" pos:end="109:5">if <condition pos:start="37:8" pos:end="37:35">(<expr pos:start="37:9" pos:end="37:34"><operator pos:start="37:9" pos:end="37:9">!</operator><operator pos:start="37:10" pos:end="37:10">(</operator><name pos:start="37:11" pos:end="37:14">size</name> <operator pos:start="37:16" pos:end="37:16">%</operator> <name pos:start="37:18" pos:end="37:33"><name pos:start="37:18" pos:end="37:20">ctx</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:33">block_align</name></name><operator pos:start="37:34" pos:end="37:34">)</operator></expr>)</condition> <block pos:start="37:37" pos:end="109:5">{<block_content pos:start="39:9" pos:end="107:9"> <comment type="line" pos:start="37:39" pos:end="37:58">// new packet header</comment>

        <if_stmt pos:start="39:9" pos:end="53:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:18">(<expr pos:start="39:13" pos:end="39:17"><operator pos:start="39:13" pos:end="39:13">!</operator><name pos:start="39:14" pos:end="39:17">size</name></expr>)</condition> <block pos:start="39:20" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:34">

            <expr_stmt pos:start="41:13" pos:end="41:35"><expr pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:30">spillover_nbits</name></name> <operator pos:start="41:32" pos:end="41:32">=</operator> <literal type="number" pos:start="41:34" pos:end="41:34">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:34"><expr pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:29">nb_superframes</name></name> <operator pos:start="43:31" pos:end="43:31">=</operator> <literal type="number" pos:start="43:33" pos:end="43:33">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="45:11" pos:end="53:9">else <block pos:start="45:16" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:36">

            <if_stmt pos:start="47:13" pos:end="49:27"><if pos:start="47:13" pos:end="49:27">if <condition pos:start="47:16" pos:end="47:51">(<expr pos:start="47:17" pos:end="47:50"><operator pos:start="47:17" pos:end="47:17">(</operator><name pos:start="47:18" pos:end="47:20">res</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <call pos:start="47:24" pos:end="47:45"><name pos:start="47:24" pos:end="47:42">parse_packet_header</name><argument_list pos:start="47:43" pos:end="47:45">(<argument pos:start="47:44" pos:end="47:44"><expr pos:start="47:44" pos:end="47:44"><name pos:start="47:44" pos:end="47:44">s</name></expr></argument>)</argument_list></call><operator pos:start="47:46" pos:end="47:46">)</operator> <operator pos:start="47:48" pos:end="47:48">&lt;</operator> <literal type="number" pos:start="47:50" pos:end="47:50">0</literal></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:27"><block_content pos:start="49:17" pos:end="49:27">

                <return pos:start="49:17" pos:end="49:27">return <expr pos:start="49:24" pos:end="49:26"><name pos:start="49:24" pos:end="49:26">res</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:29">nb_superframes</name></name> <operator pos:start="51:31" pos:end="51:31">=</operator> <name pos:start="51:33" pos:end="51:35">res</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="57:9" pos:end="61:72">/* If the packet header specifies a s-&gt;spillover_nbits, then we want

         * to push out all data of the previous packet (+ spillover) before

         * continuing to parse new superframes in the current packet. */</comment>

        <if_stmt pos:start="63:9" pos:end="107:9"><if pos:start="63:9" pos:end="103:9">if <condition pos:start="63:12" pos:end="63:37">(<expr pos:start="63:13" pos:end="63:36"><name pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:32">sframe_cache_size</name></name> <operator pos:start="63:34" pos:end="63:34">&gt;</operator> <literal type="number" pos:start="63:36" pos:end="63:36">0</literal></expr>)</condition> <block pos:start="63:39" pos:end="103:9">{<block_content pos:start="65:13" pos:end="101:52">

            <decl_stmt pos:start="65:13" pos:end="65:41"><decl pos:start="65:13" pos:end="65:40"><type pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:15">int</name></type> <name pos:start="65:17" pos:end="65:19">cnt</name> <init pos:start="65:21" pos:end="65:40">= <expr pos:start="65:23" pos:end="65:40"><call pos:start="65:23" pos:end="65:40"><name pos:start="65:23" pos:end="65:36">get_bits_count</name><argument_list pos:start="65:37" pos:end="65:40">(<argument pos:start="65:38" pos:end="65:39"><expr pos:start="65:38" pos:end="65:39"><name pos:start="65:38" pos:end="65:39">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:73"><expr pos:start="67:13" pos:end="67:72"><call pos:start="67:13" pos:end="67:72"><name pos:start="67:13" pos:end="67:21">copy_bits</name><argument_list pos:start="67:22" pos:end="67:72">(<argument pos:start="67:23" pos:end="67:28"><expr pos:start="67:23" pos:end="67:28"><operator pos:start="67:23" pos:end="67:23">&amp;</operator><name pos:start="67:24" pos:end="67:28"><name pos:start="67:24" pos:end="67:24">s</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:28">pb</name></name></expr></argument>, <argument pos:start="67:31" pos:end="67:41"><expr pos:start="67:31" pos:end="67:41"><name pos:start="67:31" pos:end="67:41"><name pos:start="67:31" pos:end="67:35">avpkt</name><operator pos:start="67:36" pos:end="67:37">-&gt;</operator><name pos:start="67:38" pos:end="67:41">data</name></name></expr></argument>, <argument pos:start="67:44" pos:end="67:47"><expr pos:start="67:44" pos:end="67:47"><name pos:start="67:44" pos:end="67:47">size</name></expr></argument>, <argument pos:start="67:50" pos:end="67:51"><expr pos:start="67:50" pos:end="67:51"><name pos:start="67:50" pos:end="67:51">gb</name></expr></argument>, <argument pos:start="67:54" pos:end="67:71"><expr pos:start="67:54" pos:end="67:71"><name pos:start="67:54" pos:end="67:71"><name pos:start="67:54" pos:end="67:54">s</name><operator pos:start="67:55" pos:end="67:56">-&gt;</operator><name pos:start="67:57" pos:end="67:71">spillover_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:35"><expr pos:start="69:13" pos:end="69:34"><call pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:26">flush_put_bits</name><argument_list pos:start="69:27" pos:end="69:34">(<argument pos:start="69:28" pos:end="69:33"><expr pos:start="69:28" pos:end="69:33"><operator pos:start="69:28" pos:end="69:28">&amp;</operator><name pos:start="69:29" pos:end="69:33"><name pos:start="69:29" pos:end="69:29">s</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:33">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:55"><expr pos:start="71:13" pos:end="71:54"><name pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:32">sframe_cache_size</name></name> <operator pos:start="71:34" pos:end="71:35">+=</operator> <name pos:start="71:37" pos:end="71:54"><name pos:start="71:37" pos:end="71:37">s</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:54">spillover_nbits</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="101:52"><if pos:start="73:13" pos:end="97:13">if <condition pos:start="73:16" pos:end="75:31">(<expr pos:start="73:17" pos:end="75:30"><operator pos:start="73:17" pos:end="73:17">(</operator><name pos:start="73:18" pos:end="73:20">res</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <call pos:start="73:24" pos:end="73:65"><name pos:start="73:24" pos:end="73:39">synth_superframe</name><argument_list pos:start="73:40" pos:end="73:65">(<argument pos:start="73:41" pos:end="73:43"><expr pos:start="73:41" pos:end="73:43"><name pos:start="73:41" pos:end="73:43">ctx</name></expr></argument>, <argument pos:start="73:46" pos:end="73:49"><expr pos:start="73:46" pos:end="73:49"><name pos:start="73:46" pos:end="73:49">data</name></expr></argument>, <argument pos:start="73:52" pos:end="73:64"><expr pos:start="73:52" pos:end="73:64"><name pos:start="73:52" pos:end="73:64">got_frame_ptr</name></expr></argument>)</argument_list></call><operator pos:start="73:66" pos:end="73:66">)</operator> <operator pos:start="73:68" pos:end="73:69">==</operator> <literal type="number" pos:start="73:71" pos:end="73:71">0</literal> <operator pos:start="73:73" pos:end="73:74">&amp;&amp;</operator>

                <operator pos:start="75:17" pos:end="75:17">*</operator><name pos:start="75:18" pos:end="75:30">got_frame_ptr</name></expr>)</condition> <block pos:start="75:33" pos:end="97:13">{<block_content pos:start="77:17" pos:end="95:27">

                <expr_stmt pos:start="77:17" pos:end="77:42"><expr pos:start="77:17" pos:end="77:41"><name pos:start="77:17" pos:end="77:19">cnt</name> <operator pos:start="77:21" pos:end="77:22">+=</operator> <name pos:start="77:24" pos:end="77:41"><name pos:start="77:24" pos:end="77:24">s</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:41">spillover_nbits</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:44"><expr pos:start="79:17" pos:end="79:43"><name pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:17">s</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:33">skip_bits_next</name></name> <operator pos:start="79:35" pos:end="79:35">=</operator> <name pos:start="79:37" pos:end="79:39">cnt</name> <operator pos:start="79:41" pos:end="79:41">&amp;</operator> <literal type="number" pos:start="79:43" pos:end="79:43">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:31"><expr pos:start="81:17" pos:end="81:30"><name pos:start="81:17" pos:end="81:19">res</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <name pos:start="81:23" pos:end="81:25">cnt</name> <operator pos:start="81:27" pos:end="81:28">&gt;&gt;</operator> <literal type="number" pos:start="81:30" pos:end="81:30">3</literal></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="93:17"><if pos:start="83:17" pos:end="93:17">if <condition pos:start="83:20" pos:end="83:38">(<expr pos:start="83:21" pos:end="83:37"><name pos:start="83:21" pos:end="83:23">res</name> <operator pos:start="83:25" pos:end="83:25">&gt;</operator> <name pos:start="83:27" pos:end="83:37"><name pos:start="83:27" pos:end="83:31">avpkt</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:37">size</name></name></expr>)</condition> <block pos:start="83:40" pos:end="93:17">{<block_content pos:start="85:21" pos:end="91:47">

                    <expr_stmt pos:start="85:21" pos:end="89:45"><expr pos:start="85:21" pos:end="89:44"><call pos:start="85:21" pos:end="89:44"><name pos:start="85:21" pos:end="85:26">av_log</name><argument_list pos:start="85:27" pos:end="89:44">(<argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">ctx</name></expr></argument>, <argument pos:start="85:33" pos:end="85:44"><expr pos:start="85:33" pos:end="85:44"><name pos:start="85:33" pos:end="85:44">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="87:28" pos:end="87:75"><expr pos:start="87:28" pos:end="87:75"><literal type="string" pos:start="87:28" pos:end="87:75">"Trying to skip %d bytes in packet of size %d\n"</literal></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:30"><expr pos:start="89:28" pos:end="89:30"><name pos:start="89:28" pos:end="89:30">res</name></expr></argument>, <argument pos:start="89:33" pos:end="89:43"><expr pos:start="89:33" pos:end="89:43"><name pos:start="89:33" pos:end="89:43"><name pos:start="89:33" pos:end="89:37">avpkt</name><operator pos:start="89:38" pos:end="89:39">-&gt;</operator><name pos:start="89:40" pos:end="89:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="91:21" pos:end="91:47">return <expr pos:start="91:28" pos:end="91:46"><name pos:start="91:28" pos:end="91:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <return pos:start="95:17" pos:end="95:27">return <expr pos:start="95:24" pos:end="95:26"><name pos:start="95:24" pos:end="95:26">res</name></expr>;</return>

            </block_content>}</block></if> <else pos:start="97:15" pos:end="101:52">else<block type="pseudo" pos:start="99:17" pos:end="101:52"><block_content pos:start="99:17" pos:end="101:52">

                <expr_stmt pos:start="99:17" pos:end="101:52"><expr pos:start="99:17" pos:end="101:51"><call pos:start="99:17" pos:end="101:51"><name pos:start="99:17" pos:end="99:30">skip_bits_long</name> <argument_list pos:start="99:32" pos:end="101:51">(<argument pos:start="99:33" pos:end="99:34"><expr pos:start="99:33" pos:end="99:34"><name pos:start="99:33" pos:end="99:34">gb</name></expr></argument>, <argument pos:start="99:37" pos:end="101:50"><expr pos:start="99:37" pos:end="101:50"><name pos:start="99:37" pos:end="99:54"><name pos:start="99:37" pos:end="99:37">s</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:54">spillover_nbits</name></name> <operator pos:start="99:56" pos:end="99:56">-</operator> <name pos:start="99:58" pos:end="99:60">cnt</name> <operator pos:start="99:62" pos:end="99:62">+</operator>

                                <call pos:start="101:33" pos:end="101:50"><name pos:start="101:33" pos:end="101:46">get_bits_count</name><argument_list pos:start="101:47" pos:end="101:50">(<argument pos:start="101:48" pos:end="101:49"><expr pos:start="101:48" pos:end="101:49"><name pos:start="101:48" pos:end="101:49">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="101:54" pos:end="101:62">// resync</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="103:11" pos:end="107:9">else if <condition pos:start="103:19" pos:end="103:38">(<expr pos:start="103:20" pos:end="103:37"><name pos:start="103:20" pos:end="103:37"><name pos:start="103:20" pos:end="103:20">s</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:37">spillover_nbits</name></name></expr>)</condition> <block pos:start="103:40" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:51">

            <expr_stmt pos:start="105:13" pos:end="105:51"><expr pos:start="105:13" pos:end="105:50"><call pos:start="105:13" pos:end="105:50"><name pos:start="105:13" pos:end="105:26">skip_bits_long</name><argument_list pos:start="105:27" pos:end="105:50">(<argument pos:start="105:28" pos:end="105:29"><expr pos:start="105:28" pos:end="105:29"><name pos:start="105:28" pos:end="105:29">gb</name></expr></argument>, <argument pos:start="105:32" pos:end="105:49"><expr pos:start="105:32" pos:end="105:49"><name pos:start="105:32" pos:end="105:49"><name pos:start="105:32" pos:end="105:32">s</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:49">spillover_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="105:54" pos:end="105:62">// resync</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="109:7" pos:end="111:41">else if <condition pos:start="109:15" pos:end="109:33">(<expr pos:start="109:16" pos:end="109:32"><name pos:start="109:16" pos:end="109:32"><name pos:start="109:16" pos:end="109:16">s</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:32">skip_bits_next</name></name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:41"><block_content pos:start="111:9" pos:end="111:41">

        <expr_stmt pos:start="111:9" pos:end="111:41"><expr pos:start="111:9" pos:end="111:40"><call pos:start="111:9" pos:end="111:40"><name pos:start="111:9" pos:end="111:17">skip_bits</name><argument_list pos:start="111:18" pos:end="111:40">(<argument pos:start="111:19" pos:end="111:20"><expr pos:start="111:19" pos:end="111:20"><name pos:start="111:19" pos:end="111:20">gb</name></expr></argument>, <argument pos:start="111:23" pos:end="111:39"><expr pos:start="111:23" pos:end="111:39"><name pos:start="111:23" pos:end="111:39"><name pos:start="111:23" pos:end="111:23">s</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:39">skip_bits_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:51">/* Try parsing superframes in current packet */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:29"><expr pos:start="117:5" pos:end="117:28"><name pos:start="117:5" pos:end="117:24"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:24">sframe_cache_size</name></name> <operator pos:start="117:26" pos:end="117:26">=</operator> <literal type="number" pos:start="117:28" pos:end="117:28">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:26"><expr pos:start="119:5" pos:end="119:25"><name pos:start="119:5" pos:end="119:21"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:21">skip_bits_next</name></name> <operator pos:start="119:23" pos:end="119:23">=</operator> <literal type="number" pos:start="119:25" pos:end="119:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:28"><expr pos:start="121:5" pos:end="121:27"><name pos:start="121:5" pos:end="121:7">pos</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <call pos:start="121:11" pos:end="121:27"><name pos:start="121:11" pos:end="121:23">get_bits_left</name><argument_list pos:start="121:24" pos:end="121:27">(<argument pos:start="121:25" pos:end="121:26"><expr pos:start="121:25" pos:end="121:26"><name pos:start="121:25" pos:end="121:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="171:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:33">(<expr pos:start="123:9" pos:end="123:32"><name pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:25">nb_superframes</name></name><operator pos:start="123:26" pos:end="123:27">--</operator> <operator pos:start="123:29" pos:end="123:30">==</operator> <literal type="number" pos:start="123:32" pos:end="123:32">0</literal></expr>)</condition> <block pos:start="123:35" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:20">

        <expr_stmt pos:start="125:9" pos:end="125:27"><expr pos:start="125:9" pos:end="125:26"><operator pos:start="125:9" pos:end="125:9">*</operator><name pos:start="125:10" pos:end="125:22">got_frame_ptr</name> <operator pos:start="125:24" pos:end="125:24">=</operator> <literal type="number" pos:start="125:26" pos:end="125:26">0</literal></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:20">return <expr pos:start="127:16" pos:end="127:19"><name pos:start="127:16" pos:end="127:19">size</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="129:7" pos:end="159:5">else if <condition pos:start="129:15" pos:end="129:37">(<expr pos:start="129:16" pos:end="129:36"><name pos:start="129:16" pos:end="129:32"><name pos:start="129:16" pos:end="129:16">s</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:32">nb_superframes</name></name> <operator pos:start="129:34" pos:end="129:34">&gt;</operator> <literal type="number" pos:start="129:36" pos:end="129:36">0</literal></expr>)</condition> <block pos:start="129:39" pos:end="159:5">{<block_content pos:start="131:9" pos:end="157:9">

        <if_stmt pos:start="131:9" pos:end="157:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:67">(<expr pos:start="131:13" pos:end="131:66"><operator pos:start="131:13" pos:end="131:13">(</operator><name pos:start="131:14" pos:end="131:16">res</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <call pos:start="131:20" pos:end="131:61"><name pos:start="131:20" pos:end="131:35">synth_superframe</name><argument_list pos:start="131:36" pos:end="131:61">(<argument pos:start="131:37" pos:end="131:39"><expr pos:start="131:37" pos:end="131:39"><name pos:start="131:37" pos:end="131:39">ctx</name></expr></argument>, <argument pos:start="131:42" pos:end="131:45"><expr pos:start="131:42" pos:end="131:45"><name pos:start="131:42" pos:end="131:45">data</name></expr></argument>, <argument pos:start="131:48" pos:end="131:60"><expr pos:start="131:48" pos:end="131:60"><name pos:start="131:48" pos:end="131:60">got_frame_ptr</name></expr></argument>)</argument_list></call><operator pos:start="131:62" pos:end="131:62">)</operator> <operator pos:start="131:64" pos:end="131:64">&lt;</operator> <literal type="number" pos:start="131:66" pos:end="131:66">0</literal></expr>)</condition> <block pos:start="131:69" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:23">

            <return pos:start="133:13" pos:end="133:23">return <expr pos:start="133:20" pos:end="133:22"><name pos:start="133:20" pos:end="133:22">res</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="135:11" pos:end="157:9">else if <condition pos:start="135:19" pos:end="135:34">(<expr pos:start="135:20" pos:end="135:33"><operator pos:start="135:20" pos:end="135:20">*</operator><name pos:start="135:21" pos:end="135:33">got_frame_ptr</name></expr>)</condition> <block pos:start="135:36" pos:end="157:9">{<block_content pos:start="137:13" pos:end="155:23">

            <decl_stmt pos:start="137:13" pos:end="137:41"><decl pos:start="137:13" pos:end="137:40"><type pos:start="137:13" pos:end="137:15"><name pos:start="137:13" pos:end="137:15">int</name></type> <name pos:start="137:17" pos:end="137:19">cnt</name> <init pos:start="137:21" pos:end="137:40">= <expr pos:start="137:23" pos:end="137:40"><call pos:start="137:23" pos:end="137:40"><name pos:start="137:23" pos:end="137:36">get_bits_count</name><argument_list pos:start="137:37" pos:end="137:40">(<argument pos:start="137:38" pos:end="137:39"><expr pos:start="137:38" pos:end="137:39"><name pos:start="137:38" pos:end="137:39">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:40"><expr pos:start="139:13" pos:end="139:39"><name pos:start="139:13" pos:end="139:29"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:29">skip_bits_next</name></name> <operator pos:start="139:31" pos:end="139:31">=</operator> <name pos:start="139:33" pos:end="139:35">cnt</name> <operator pos:start="139:37" pos:end="139:37">&amp;</operator> <literal type="number" pos:start="139:39" pos:end="139:39">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:27"><expr pos:start="141:13" pos:end="141:26"><name pos:start="141:13" pos:end="141:15">res</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <name pos:start="141:19" pos:end="141:21">cnt</name> <operator pos:start="141:23" pos:end="141:24">&gt;&gt;</operator> <literal type="number" pos:start="141:26" pos:end="141:26">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="153:13"><if pos:start="143:13" pos:end="153:13">if <condition pos:start="143:16" pos:end="143:34">(<expr pos:start="143:17" pos:end="143:33"><name pos:start="143:17" pos:end="143:19">res</name> <operator pos:start="143:21" pos:end="143:21">&gt;</operator> <name pos:start="143:23" pos:end="143:33"><name pos:start="143:23" pos:end="143:27">avpkt</name><operator pos:start="143:28" pos:end="143:29">-&gt;</operator><name pos:start="143:30" pos:end="143:33">size</name></name></expr>)</condition> <block pos:start="143:36" pos:end="153:13">{<block_content pos:start="145:17" pos:end="151:43">

                <expr_stmt pos:start="145:17" pos:end="149:41"><expr pos:start="145:17" pos:end="149:40"><call pos:start="145:17" pos:end="149:40"><name pos:start="145:17" pos:end="145:22">av_log</name><argument_list pos:start="145:23" pos:end="149:40">(<argument pos:start="145:24" pos:end="145:26"><expr pos:start="145:24" pos:end="145:26"><name pos:start="145:24" pos:end="145:26">ctx</name></expr></argument>, <argument pos:start="145:29" pos:end="145:40"><expr pos:start="145:29" pos:end="145:40"><name pos:start="145:29" pos:end="145:40">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="147:24" pos:end="147:71"><expr pos:start="147:24" pos:end="147:71"><literal type="string" pos:start="147:24" pos:end="147:71">"Trying to skip %d bytes in packet of size %d\n"</literal></expr></argument>,

                       <argument pos:start="149:24" pos:end="149:26"><expr pos:start="149:24" pos:end="149:26"><name pos:start="149:24" pos:end="149:26">res</name></expr></argument>, <argument pos:start="149:29" pos:end="149:39"><expr pos:start="149:29" pos:end="149:39"><name pos:start="149:29" pos:end="149:39"><name pos:start="149:29" pos:end="149:33">avpkt</name><operator pos:start="149:34" pos:end="149:35">-&gt;</operator><name pos:start="149:36" pos:end="149:39">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="151:17" pos:end="151:43">return <expr pos:start="151:24" pos:end="151:42"><name pos:start="151:24" pos:end="151:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <return pos:start="155:13" pos:end="155:23">return <expr pos:start="155:20" pos:end="155:22"><name pos:start="155:20" pos:end="155:22">res</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="159:7" pos:end="171:5">else if <condition pos:start="159:15" pos:end="159:48">(<expr pos:start="159:16" pos:end="159:47"><operator pos:start="159:16" pos:end="159:16">(</operator><name pos:start="159:17" pos:end="159:36"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:36">sframe_cache_size</name></name> <operator pos:start="159:38" pos:end="159:38">=</operator> <name pos:start="159:40" pos:end="159:42">pos</name><operator pos:start="159:43" pos:end="159:43">)</operator> <operator pos:start="159:45" pos:end="159:45">&gt;</operator> <literal type="number" pos:start="159:47" pos:end="159:47">0</literal></expr>)</condition> <block pos:start="159:50" pos:end="171:5">{<block_content pos:start="163:9" pos:end="165:71">

        <comment type="block" pos:start="161:9" pos:end="161:55">/* ... cache it for spillover in next packet */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:69"><expr pos:start="163:9" pos:end="163:68"><call pos:start="163:9" pos:end="163:68"><name pos:start="163:9" pos:end="163:21">init_put_bits</name><argument_list pos:start="163:22" pos:end="163:68">(<argument pos:start="163:23" pos:end="163:28"><expr pos:start="163:23" pos:end="163:28"><operator pos:start="163:23" pos:end="163:23">&amp;</operator><name pos:start="163:24" pos:end="163:28"><name pos:start="163:24" pos:end="163:24">s</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:28">pb</name></name></expr></argument>, <argument pos:start="163:31" pos:end="163:45"><expr pos:start="163:31" pos:end="163:45"><name pos:start="163:31" pos:end="163:45"><name pos:start="163:31" pos:end="163:31">s</name><operator pos:start="163:32" pos:end="163:33">-&gt;</operator><name pos:start="163:34" pos:end="163:45">sframe_cache</name></name></expr></argument>, <argument pos:start="163:48" pos:end="163:67"><expr pos:start="163:48" pos:end="163:67"><name pos:start="163:48" pos:end="163:67">SFRAME_CACHE_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:71"><expr pos:start="165:9" pos:end="165:70"><call pos:start="165:9" pos:end="165:70"><name pos:start="165:9" pos:end="165:17">copy_bits</name><argument_list pos:start="165:18" pos:end="165:70">(<argument pos:start="165:19" pos:end="165:24"><expr pos:start="165:19" pos:end="165:24"><operator pos:start="165:19" pos:end="165:19">&amp;</operator><name pos:start="165:20" pos:end="165:24"><name pos:start="165:20" pos:end="165:20">s</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:24">pb</name></name></expr></argument>, <argument pos:start="165:27" pos:end="165:37"><expr pos:start="165:27" pos:end="165:37"><name pos:start="165:27" pos:end="165:37"><name pos:start="165:27" pos:end="165:31">avpkt</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:37">data</name></name></expr></argument>, <argument pos:start="165:40" pos:end="165:43"><expr pos:start="165:40" pos:end="165:43"><name pos:start="165:40" pos:end="165:43">size</name></expr></argument>, <argument pos:start="165:46" pos:end="165:47"><expr pos:start="165:46" pos:end="165:47"><name pos:start="165:46" pos:end="165:47">gb</name></expr></argument>, <argument pos:start="165:50" pos:end="165:69"><expr pos:start="165:50" pos:end="165:69"><name pos:start="165:50" pos:end="165:69"><name pos:start="165:50" pos:end="165:50">s</name><operator pos:start="165:51" pos:end="165:52">-&gt;</operator><name pos:start="165:53" pos:end="165:69">sframe_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="167:9" pos:end="167:63">// FIXME bad - just copy bytes as whole and add use the</comment>

        <comment type="line" pos:start="169:9" pos:end="169:31">// skip_bits_next field</comment>

    </block_content>}</block></if></if_stmt>



    <return pos:start="175:5" pos:end="175:16">return <expr pos:start="175:12" pos:end="175:15"><name pos:start="175:12" pos:end="175:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
