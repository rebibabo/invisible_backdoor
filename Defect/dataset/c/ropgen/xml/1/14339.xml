<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14339.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">commit_start</name><parameter_list pos:start="1:18" pos:end="7:75">(<parameter pos:start="1:19" pos:end="1:38"><decl pos:start="1:19" pos:end="1:38"><type pos:start="1:19" pos:end="1:38"><name pos:start="1:19" pos:end="1:34">BlockDriverState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">bs</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:62"><decl pos:start="1:41" pos:end="1:62"><type pos:start="1:41" pos:end="1:62"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">base</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:39"><decl pos:start="3:19" pos:end="3:39"><type pos:start="3:19" pos:end="3:39"><name pos:start="3:19" pos:end="3:34">BlockDriverState</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">top</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:48">int64_t</name></type> <name pos:start="3:50" pos:end="3:54">speed</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:42"><decl pos:start="5:19" pos:end="5:42"><type pos:start="5:19" pos:end="5:42"><name pos:start="5:19" pos:end="5:33">BlockdevOnError</name></type> <name pos:start="5:35" pos:end="5:42">on_error</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:67"><decl pos:start="5:45" pos:end="5:67"><type pos:start="5:45" pos:end="5:67"><name pos:start="5:45" pos:end="5:63">BlockCompletionFunc</name> <modifier pos:start="5:65" pos:end="5:65">*</modifier></type><name pos:start="5:66" pos:end="5:67">cb</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:30"><decl pos:start="7:19" pos:end="7:30"><type pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:22">void</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:30">opaque</name></decl></parameter>, <parameter pos:start="7:33" pos:end="7:60"><decl pos:start="7:33" pos:end="7:60"><type pos:start="7:33" pos:end="7:60"><specifier pos:start="7:33" pos:end="7:37">const</specifier> <name pos:start="7:39" pos:end="7:42">char</name> <modifier pos:start="7:44" pos:end="7:44">*</modifier></type><name pos:start="7:45" pos:end="7:60">backing_file_str</name></decl></parameter>, <parameter pos:start="7:63" pos:end="7:74"><decl pos:start="7:63" pos:end="7:74"><type pos:start="7:63" pos:end="7:74"><name pos:start="7:63" pos:end="7:67">Error</name> <modifier pos:start="7:69" pos:end="7:69">*</modifier><modifier pos:start="7:70" pos:end="7:70">*</modifier></type><name pos:start="7:71" pos:end="7:74">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="141:1">{<block_content pos:start="11:5" pos:end="139:42">

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">CommitBlockJob</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockReopenQueue</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:34">reopen_queue</name> <init pos:start="13:36" pos:end="13:41">= <expr pos:start="13:38" pos:end="13:41"><name pos:start="13:38" pos:end="13:41">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:26">orig_overlay_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:23">orig_base_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">BlockDriverState</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:32">overlay_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><call pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:21">(<argument pos:start="25:12" pos:end="25:20"><expr pos:start="25:12" pos:end="25:20"><name pos:start="25:12" pos:end="25:14">top</name> <operator pos:start="25:16" pos:end="25:17">!=</operator> <name pos:start="25:19" pos:end="25:20">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:11">top</name> <operator pos:start="27:13" pos:end="27:14">==</operator> <name pos:start="27:16" pos:end="27:19">base</name></expr>)</condition> <block pos:start="27:22" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:15">

        <expr_stmt pos:start="29:9" pos:end="29:79"><expr pos:start="29:9" pos:end="29:78"><call pos:start="29:9" pos:end="29:78"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="29:78">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="29:77"><expr pos:start="29:26" pos:end="29:77"><literal type="string" pos:start="29:26" pos:end="29:77">"Invalid files for merge: top and base are the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:14">overlay_bs</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="37:43"><name pos:start="37:18" pos:end="37:34">bdrv_find_overlay</name><argument_list pos:start="37:35" pos:end="37:43">(<argument pos:start="37:36" pos:end="37:37"><expr pos:start="37:36" pos:end="37:37"><name pos:start="37:36" pos:end="37:37">bs</name></expr></argument>, <argument pos:start="37:40" pos:end="37:42"><expr pos:start="37:40" pos:end="37:42"><name pos:start="37:40" pos:end="37:42">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:27">(<expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:18">overlay_bs</name> <operator pos:start="41:20" pos:end="41:21">==</operator> <name pos:start="41:23" pos:end="41:26">NULL</name></expr>)</condition> <block pos:start="41:29" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:80"><expr pos:start="43:9" pos:end="43:79"><call pos:start="43:9" pos:end="43:79"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="43:79">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:63"><expr pos:start="43:26" pos:end="43:63"><literal type="string" pos:start="43:26" pos:end="43:63">"Could not find overlay image for %s:"</literal></expr></argument>, <argument pos:start="43:66" pos:end="43:78"><expr pos:start="43:66" pos:end="43:78"><name pos:start="43:66" pos:end="43:78"><name pos:start="43:66" pos:end="43:68">top</name><operator pos:start="43:69" pos:end="43:70">-&gt;</operator><name pos:start="43:71" pos:end="43:78">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:74"><expr pos:start="51:5" pos:end="51:73"><name pos:start="51:5" pos:end="51:5">s</name> <operator pos:start="51:7" pos:end="51:7">=</operator> <call pos:start="51:9" pos:end="51:73"><name pos:start="51:9" pos:end="51:24">block_job_create</name><argument_list pos:start="51:25" pos:end="51:73">(<argument pos:start="51:26" pos:end="51:43"><expr pos:start="51:26" pos:end="51:43"><operator pos:start="51:26" pos:end="51:26">&amp;</operator><name pos:start="51:27" pos:end="51:43">commit_job_driver</name></expr></argument>, <argument pos:start="51:46" pos:end="51:47"><expr pos:start="51:46" pos:end="51:47"><name pos:start="51:46" pos:end="51:47">bs</name></expr></argument>, <argument pos:start="51:50" pos:end="51:54"><expr pos:start="51:50" pos:end="51:54"><name pos:start="51:50" pos:end="51:54">speed</name></expr></argument>, <argument pos:start="51:57" pos:end="51:58"><expr pos:start="51:57" pos:end="51:58"><name pos:start="51:57" pos:end="51:58">cb</name></expr></argument>, <argument pos:start="51:61" pos:end="51:66"><expr pos:start="51:61" pos:end="51:66"><name pos:start="51:61" pos:end="51:66">opaque</name></expr></argument>, <argument pos:start="51:69" pos:end="51:72"><expr pos:start="51:69" pos:end="51:72"><name pos:start="51:69" pos:end="51:72">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:11">(<expr pos:start="53:9" pos:end="53:10"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:10">s</name></expr>)</condition> <block pos:start="53:13" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:15">

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:46"><expr pos:start="61:5" pos:end="61:45"><name pos:start="61:5" pos:end="61:19">orig_base_flags</name>    <operator pos:start="61:24" pos:end="61:24">=</operator> <call pos:start="61:26" pos:end="61:45"><name pos:start="61:26" pos:end="61:39">bdrv_get_flags</name><argument_list pos:start="61:40" pos:end="61:45">(<argument pos:start="61:41" pos:end="61:44"><expr pos:start="61:41" pos:end="61:44"><name pos:start="61:41" pos:end="61:44">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:52"><expr pos:start="63:5" pos:end="63:51"><name pos:start="63:5" pos:end="63:22">orig_overlay_flags</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <call pos:start="63:26" pos:end="63:51"><name pos:start="63:26" pos:end="63:39">bdrv_get_flags</name><argument_list pos:start="63:40" pos:end="63:51">(<argument pos:start="63:41" pos:end="63:50"><expr pos:start="63:41" pos:end="63:50"><name pos:start="63:41" pos:end="63:50">overlay_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:56">/* convert base &amp; overlay_bs to r/w, if necessary */</comment>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:44">(<expr pos:start="69:9" pos:end="69:43"><operator pos:start="69:9" pos:end="69:9">!</operator><operator pos:start="69:10" pos:end="69:10">(</operator><name pos:start="69:11" pos:end="69:28">orig_overlay_flags</name> <operator pos:start="69:30" pos:end="69:30">&amp;</operator> <name pos:start="69:32" pos:end="69:42">BDRV_O_RDWR</name><operator pos:start="69:43" pos:end="69:43">)</operator></expr>)</condition> <block pos:start="69:46" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:75">

        <expr_stmt pos:start="71:9" pos:end="73:75"><expr pos:start="71:9" pos:end="73:74"><name pos:start="71:9" pos:end="71:20">reopen_queue</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <call pos:start="71:24" pos:end="73:74"><name pos:start="71:24" pos:end="71:40">bdrv_reopen_queue</name><argument_list pos:start="71:41" pos:end="73:74">(<argument pos:start="71:42" pos:end="71:53"><expr pos:start="71:42" pos:end="71:53"><name pos:start="71:42" pos:end="71:53">reopen_queue</name></expr></argument>, <argument pos:start="71:56" pos:end="71:65"><expr pos:start="71:56" pos:end="71:65"><name pos:start="71:56" pos:end="71:65">overlay_bs</name></expr></argument>, <argument pos:start="71:68" pos:end="71:71"><expr pos:start="71:68" pos:end="71:71"><name pos:start="71:68" pos:end="71:71">NULL</name></expr></argument>,

                                         <argument pos:start="73:42" pos:end="73:73"><expr pos:start="73:42" pos:end="73:73"><name pos:start="73:42" pos:end="73:59">orig_overlay_flags</name> <operator pos:start="73:61" pos:end="73:61">|</operator> <name pos:start="73:63" pos:end="73:73">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:41">(<expr pos:start="77:9" pos:end="77:40"><operator pos:start="77:9" pos:end="77:9">!</operator><operator pos:start="77:10" pos:end="77:10">(</operator><name pos:start="77:11" pos:end="77:25">orig_base_flags</name> <operator pos:start="77:27" pos:end="77:27">&amp;</operator> <name pos:start="77:29" pos:end="77:39">BDRV_O_RDWR</name><operator pos:start="77:40" pos:end="77:40">)</operator></expr>)</condition> <block pos:start="77:43" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:72">

        <expr_stmt pos:start="79:9" pos:end="81:72"><expr pos:start="79:9" pos:end="81:71"><name pos:start="79:9" pos:end="79:20">reopen_queue</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <call pos:start="79:24" pos:end="81:71"><name pos:start="79:24" pos:end="79:40">bdrv_reopen_queue</name><argument_list pos:start="79:41" pos:end="81:71">(<argument pos:start="79:42" pos:end="79:53"><expr pos:start="79:42" pos:end="79:53"><name pos:start="79:42" pos:end="79:53">reopen_queue</name></expr></argument>, <argument pos:start="79:56" pos:end="79:59"><expr pos:start="79:56" pos:end="79:59"><name pos:start="79:56" pos:end="79:59">base</name></expr></argument>, <argument pos:start="79:62" pos:end="79:65"><expr pos:start="79:62" pos:end="79:65"><name pos:start="79:62" pos:end="79:65">NULL</name></expr></argument>,

                                         <argument pos:start="81:42" pos:end="81:70"><expr pos:start="81:42" pos:end="81:70"><name pos:start="81:42" pos:end="81:56">orig_base_flags</name> <operator pos:start="81:58" pos:end="81:58">|</operator> <name pos:start="81:60" pos:end="81:70">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="99:5"><if pos:start="85:5" pos:end="99:5">if <condition pos:start="85:8" pos:end="85:21">(<expr pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:20">reopen_queue</name></expr>)</condition> <block pos:start="85:23" pos:end="99:5">{<block_content pos:start="87:9" pos:end="97:9">

        <expr_stmt pos:start="87:9" pos:end="87:55"><expr pos:start="87:9" pos:end="87:54"><call pos:start="87:9" pos:end="87:54"><name pos:start="87:9" pos:end="87:28">bdrv_reopen_multiple</name><argument_list pos:start="87:29" pos:end="87:54">(<argument pos:start="87:30" pos:end="87:41"><expr pos:start="87:30" pos:end="87:41"><name pos:start="87:30" pos:end="87:41">reopen_queue</name></expr></argument>, <argument pos:start="87:44" pos:end="87:53"><expr pos:start="87:44" pos:end="87:53"><operator pos:start="87:44" pos:end="87:44">&amp;</operator><name pos:start="87:45" pos:end="87:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="97:9"><if pos:start="89:9" pos:end="97:9">if <condition pos:start="89:12" pos:end="89:30">(<expr pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:21">local_err</name> <operator pos:start="89:23" pos:end="89:24">!=</operator> <name pos:start="89:26" pos:end="89:29">NULL</name></expr>)</condition> <block pos:start="89:32" pos:end="97:9">{<block_content pos:start="91:13" pos:end="95:19">

            <expr_stmt pos:start="91:13" pos:end="91:45"><expr pos:start="91:13" pos:end="91:44"><call pos:start="91:13" pos:end="91:44"><name pos:start="91:13" pos:end="91:27">error_propagate</name><argument_list pos:start="91:28" pos:end="91:44">(<argument pos:start="91:29" pos:end="91:32"><expr pos:start="91:29" pos:end="91:32"><name pos:start="91:29" pos:end="91:32">errp</name></expr></argument>, <argument pos:start="91:35" pos:end="91:43"><expr pos:start="91:35" pos:end="91:43"><name pos:start="91:35" pos:end="91:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:40"><expr pos:start="93:13" pos:end="93:39"><call pos:start="93:13" pos:end="93:39"><name pos:start="93:13" pos:end="93:27">block_job_unref</name><argument_list pos:start="93:28" pos:end="93:39">(<argument pos:start="93:29" pos:end="93:38"><expr pos:start="93:29" pos:end="93:38"><operator pos:start="93:29" pos:end="93:29">&amp;</operator><name pos:start="93:30" pos:end="93:38"><name pos:start="93:30" pos:end="93:30">s</name><operator pos:start="93:31" pos:end="93:32">-&gt;</operator><name pos:start="93:33" pos:end="93:38">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="105:5" pos:end="105:24"><expr pos:start="105:5" pos:end="105:23"><name pos:start="105:5" pos:end="105:11"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:11">base</name></name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:23"><name pos:start="105:15" pos:end="105:21">blk_new</name><argument_list pos:start="105:22" pos:end="105:23">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:33"><expr pos:start="107:5" pos:end="107:32"><call pos:start="107:5" pos:end="107:32"><name pos:start="107:5" pos:end="107:17">blk_insert_bs</name><argument_list pos:start="107:18" pos:end="107:32">(<argument pos:start="107:19" pos:end="107:25"><expr pos:start="107:19" pos:end="107:25"><name pos:start="107:19" pos:end="107:25"><name pos:start="107:19" pos:end="107:19">s</name><operator pos:start="107:20" pos:end="107:21">-&gt;</operator><name pos:start="107:22" pos:end="107:25">base</name></name></expr></argument>, <argument pos:start="107:28" pos:end="107:31"><expr pos:start="107:28" pos:end="107:31"><name pos:start="107:28" pos:end="107:31">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:23"><expr pos:start="111:5" pos:end="111:22"><name pos:start="111:5" pos:end="111:10"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:10">top</name></name> <operator pos:start="111:12" pos:end="111:12">=</operator> <call pos:start="111:14" pos:end="111:22"><name pos:start="111:14" pos:end="111:20">blk_new</name><argument_list pos:start="111:21" pos:end="111:22">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:31"><expr pos:start="113:5" pos:end="113:30"><call pos:start="113:5" pos:end="113:30"><name pos:start="113:5" pos:end="113:17">blk_insert_bs</name><argument_list pos:start="113:18" pos:end="113:30">(<argument pos:start="113:19" pos:end="113:24"><expr pos:start="113:19" pos:end="113:24"><name pos:start="113:19" pos:end="113:24"><name pos:start="113:19" pos:end="113:19">s</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:24">top</name></name></expr></argument>, <argument pos:start="113:27" pos:end="113:29"><expr pos:start="113:27" pos:end="113:29"><name pos:start="113:27" pos:end="113:29">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:19"><expr pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:13"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:13">active</name></name> <operator pos:start="117:15" pos:end="117:15">=</operator> <name pos:start="117:17" pos:end="117:18">bs</name></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:45"><expr pos:start="121:5" pos:end="121:44"><name pos:start="121:5" pos:end="121:17"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:17">base_flags</name></name>          <operator pos:start="121:28" pos:end="121:28">=</operator> <name pos:start="121:30" pos:end="121:44">orig_base_flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:48"><expr pos:start="123:5" pos:end="123:47"><name pos:start="123:5" pos:end="123:25"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:25">orig_overlay_flags</name></name>  <operator pos:start="123:28" pos:end="123:28">=</operator> <name pos:start="123:30" pos:end="123:47">orig_overlay_flags</name></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:53"><expr pos:start="127:5" pos:end="127:52"><name pos:start="127:5" pos:end="127:23"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:23">backing_file_str</name></name> <operator pos:start="127:25" pos:end="127:25">=</operator> <call pos:start="127:27" pos:end="127:52"><name pos:start="127:27" pos:end="127:34">g_strdup</name><argument_list pos:start="127:35" pos:end="127:52">(<argument pos:start="127:36" pos:end="127:51"><expr pos:start="127:36" pos:end="127:51"><name pos:start="127:36" pos:end="127:51">backing_file_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:27"><expr pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:15"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:15">on_error</name></name> <operator pos:start="131:17" pos:end="131:17">=</operator> <name pos:start="131:19" pos:end="131:26">on_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:53"><expr pos:start="133:5" pos:end="133:52"><name pos:start="133:5" pos:end="133:16"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:13">common</name><operator pos:start="133:14" pos:end="133:14">.</operator><name pos:start="133:15" pos:end="133:16">co</name></name> <operator pos:start="133:18" pos:end="133:18">=</operator> <call pos:start="133:20" pos:end="133:52"><name pos:start="133:20" pos:end="133:40">qemu_coroutine_create</name><argument_list pos:start="133:41" pos:end="133:52">(<argument pos:start="133:42" pos:end="133:51"><expr pos:start="133:42" pos:end="133:51"><name pos:start="133:42" pos:end="133:51">commit_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:63"><expr pos:start="137:5" pos:end="137:62"><call pos:start="137:5" pos:end="137:62"><name pos:start="137:5" pos:end="137:22">trace_commit_start</name><argument_list pos:start="137:23" pos:end="137:62">(<argument pos:start="137:24" pos:end="137:25"><expr pos:start="137:24" pos:end="137:25"><name pos:start="137:24" pos:end="137:25">bs</name></expr></argument>, <argument pos:start="137:28" pos:end="137:31"><expr pos:start="137:28" pos:end="137:31"><name pos:start="137:28" pos:end="137:31">base</name></expr></argument>, <argument pos:start="137:34" pos:end="137:36"><expr pos:start="137:34" pos:end="137:36"><name pos:start="137:34" pos:end="137:36">top</name></expr></argument>, <argument pos:start="137:39" pos:end="137:39"><expr pos:start="137:39" pos:end="137:39"><name pos:start="137:39" pos:end="137:39">s</name></expr></argument>, <argument pos:start="137:42" pos:end="137:53"><expr pos:start="137:42" pos:end="137:53"><name pos:start="137:42" pos:end="137:53"><name pos:start="137:42" pos:end="137:42">s</name><operator pos:start="137:43" pos:end="137:44">-&gt;</operator><name pos:start="137:45" pos:end="137:50">common</name><operator pos:start="137:51" pos:end="137:51">.</operator><name pos:start="137:52" pos:end="137:53">co</name></name></expr></argument>, <argument pos:start="137:56" pos:end="137:61"><expr pos:start="137:56" pos:end="137:61"><name pos:start="137:56" pos:end="137:61">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:42"><expr pos:start="139:5" pos:end="139:41"><call pos:start="139:5" pos:end="139:41"><name pos:start="139:5" pos:end="139:24">qemu_coroutine_enter</name><argument_list pos:start="139:25" pos:end="139:41">(<argument pos:start="139:26" pos:end="139:37"><expr pos:start="139:26" pos:end="139:37"><name pos:start="139:26" pos:end="139:37"><name pos:start="139:26" pos:end="139:26">s</name><operator pos:start="139:27" pos:end="139:28">-&gt;</operator><name pos:start="139:29" pos:end="139:34">common</name><operator pos:start="139:35" pos:end="139:35">.</operator><name pos:start="139:36" pos:end="139:37">co</name></name></expr></argument>, <argument pos:start="139:40" pos:end="139:40"><expr pos:start="139:40" pos:end="139:40"><name pos:start="139:40" pos:end="139:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
