<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21928.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">msi_init</name><parameter_list pos:start="1:13" pos:end="3:78">(<parameter pos:start="1:14" pos:end="1:34"><decl pos:start="1:14" pos:end="1:34"><type pos:start="1:14" pos:end="1:34"><name pos:start="1:14" pos:end="1:29"><name pos:start="1:14" pos:end="1:19">struct</name> <name pos:start="1:21" pos:end="1:29">PCIDevice</name></name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">dev</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:50"><decl pos:start="1:37" pos:end="1:50"><type pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:43">uint8_t</name></type> <name pos:start="1:45" pos:end="1:50">offset</name></decl></parameter>,

             <parameter pos:start="3:14" pos:end="3:36"><decl pos:start="3:14" pos:end="3:36"><type pos:start="3:14" pos:end="3:36"><name pos:start="3:14" pos:end="3:21">unsigned</name> <name pos:start="3:23" pos:end="3:25">int</name></type> <name pos:start="3:27" pos:end="3:36">nr_vectors</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:51"><decl pos:start="3:39" pos:end="3:51"><type pos:start="3:39" pos:end="3:51"><name pos:start="3:39" pos:end="3:42">bool</name></type> <name pos:start="3:44" pos:end="3:51">msi64bit</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:77"><decl pos:start="3:54" pos:end="3:77"><type pos:start="3:54" pos:end="3:77"><name pos:start="3:54" pos:end="3:57">bool</name></type> <name pos:start="3:59" pos:end="3:77">msi_per_vector_mask</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="115:1">{<block_content pos:start="7:5" pos:end="113:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:30">vectors_order</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:20">cap_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:21">config_offset</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:23">(<expr pos:start="17:9" pos:end="17:22"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:22">msi_nonbroken</name></expr>)</condition> <block pos:start="17:25" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:24">

        <return pos:start="19:9" pos:end="19:24">return <expr pos:start="19:16" pos:end="19:23"><operator pos:start="19:16" pos:end="19:16">-</operator><name pos:start="19:17" pos:end="19:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="31:70"><expr pos:start="25:5" pos:end="31:69"><call pos:start="25:5" pos:end="31:69"><name pos:start="25:5" pos:end="25:18">MSI_DEV_PRINTF</name><argument_list pos:start="25:19" pos:end="31:69">(<argument pos:start="25:20" pos:end="25:22"><expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">dev</name></expr></argument>,

                   <argument pos:start="27:20" pos:end="29:40"><expr pos:start="27:20" pos:end="29:40"><literal type="string" pos:start="27:20" pos:end="27:37">"init offset: 0x%"</literal><name pos:start="27:38" pos:end="27:42">PRIx8</name><literal type="string" pos:start="27:43" pos:end="27:54">" vector: %"</literal><name pos:start="27:55" pos:end="27:59">PRId8</name>

                   <literal type="string" pos:start="29:20" pos:end="29:40">" 64bit %d mask %d\n"</literal></expr></argument>,

                   <argument pos:start="31:20" pos:end="31:25"><expr pos:start="31:20" pos:end="31:25"><name pos:start="31:20" pos:end="31:25">offset</name></expr></argument>, <argument pos:start="31:28" pos:end="31:37"><expr pos:start="31:28" pos:end="31:37"><name pos:start="31:28" pos:end="31:37">nr_vectors</name></expr></argument>, <argument pos:start="31:40" pos:end="31:47"><expr pos:start="31:40" pos:end="31:47"><name pos:start="31:40" pos:end="31:47">msi64bit</name></expr></argument>, <argument pos:start="31:50" pos:end="31:68"><expr pos:start="31:50" pos:end="31:68"><name pos:start="31:50" pos:end="31:68">msi_per_vector_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><call pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:44">(<argument pos:start="35:12" pos:end="35:43"><expr pos:start="35:12" pos:end="35:43"><operator pos:start="35:12" pos:end="35:12">!</operator><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:23">nr_vectors</name> <operator pos:start="35:25" pos:end="35:25">&amp;</operator> <operator pos:start="35:27" pos:end="35:27">(</operator><name pos:start="35:28" pos:end="35:37">nr_vectors</name> <operator pos:start="35:39" pos:end="35:39">-</operator> <literal type="number" pos:start="35:41" pos:end="35:41">1</literal><operator pos:start="35:42" pos:end="35:42">)</operator><operator pos:start="35:43" pos:end="35:43">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="35:49" pos:end="35:64">/* power of 2 */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><call pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:10">assert</name><argument_list pos:start="37:11" pos:end="37:26">(<argument pos:start="37:12" pos:end="37:25"><expr pos:start="37:12" pos:end="37:25"><name pos:start="37:12" pos:end="37:21">nr_vectors</name> <operator pos:start="37:23" pos:end="37:23">&gt;</operator> <literal type="number" pos:start="37:25" pos:end="37:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:46"><expr pos:start="39:5" pos:end="39:45"><call pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:45">(<argument pos:start="39:12" pos:end="39:44"><expr pos:start="39:12" pos:end="39:44"><name pos:start="39:12" pos:end="39:21">nr_vectors</name> <operator pos:start="39:23" pos:end="39:24">&lt;=</operator> <name pos:start="39:26" pos:end="39:44">PCI_MSI_VECTORS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="41:5" pos:end="41:43">/* the nr of MSI vectors is up to 32 */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:38"><expr pos:start="43:5" pos:end="43:37"><name pos:start="43:5" pos:end="43:17">vectors_order</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <call pos:start="43:21" pos:end="43:37"><name pos:start="43:21" pos:end="43:25">ctz32</name><argument_list pos:start="43:26" pos:end="43:37">(<argument pos:start="43:27" pos:end="43:36"><expr pos:start="43:27" pos:end="43:36"><name pos:start="43:27" pos:end="43:36">nr_vectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:56"><expr pos:start="47:5" pos:end="47:55"><name pos:start="47:5" pos:end="47:9">flags</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <name pos:start="47:13" pos:end="47:25">vectors_order</name> <operator pos:start="47:27" pos:end="47:28">&lt;&lt;</operator> <call pos:start="47:30" pos:end="47:55"><name pos:start="47:30" pos:end="47:34">ctz32</name><argument_list pos:start="47:35" pos:end="47:55">(<argument pos:start="47:36" pos:end="47:54"><expr pos:start="47:36" pos:end="47:54"><name pos:start="47:36" pos:end="47:54">PCI_MSI_FLAGS_QMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:17">(<expr pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">msi64bit</name></expr>)</condition> <block pos:start="49:19" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:37">

        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:13">flags</name> <operator pos:start="51:15" pos:end="51:16">|=</operator> <name pos:start="51:18" pos:end="51:36">PCI_MSI_FLAGS_64BIT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:28">(<expr pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:27">msi_per_vector_mask</name></expr>)</condition> <block pos:start="55:30" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:39">

        <expr_stmt pos:start="57:9" pos:end="57:39"><expr pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:13">flags</name> <operator pos:start="57:15" pos:end="57:16">|=</operator> <name pos:start="57:18" pos:end="57:38">PCI_MSI_FLAGS_MASKBIT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:12">cap_size</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:36"><name pos:start="63:16" pos:end="63:29">msi_cap_sizeof</name><argument_list pos:start="63:30" pos:end="63:36">(<argument pos:start="63:31" pos:end="63:35"><expr pos:start="63:31" pos:end="63:35"><name pos:start="63:31" pos:end="63:35">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:78"><expr pos:start="65:5" pos:end="65:77"><name pos:start="65:5" pos:end="65:17">config_offset</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <call pos:start="65:21" pos:end="65:77"><name pos:start="65:21" pos:end="65:38">pci_add_capability</name><argument_list pos:start="65:39" pos:end="65:77">(<argument pos:start="65:40" pos:end="65:42"><expr pos:start="65:40" pos:end="65:42"><name pos:start="65:40" pos:end="65:42">dev</name></expr></argument>, <argument pos:start="65:45" pos:end="65:58"><expr pos:start="65:45" pos:end="65:58"><name pos:start="65:45" pos:end="65:58">PCI_CAP_ID_MSI</name></expr></argument>, <argument pos:start="65:61" pos:end="65:66"><expr pos:start="65:61" pos:end="65:66"><name pos:start="65:61" pos:end="65:66">offset</name></expr></argument>, <argument pos:start="65:69" pos:end="65:76"><expr pos:start="65:69" pos:end="65:76"><name pos:start="65:69" pos:end="65:76">cap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:26">(<expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:21">config_offset</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <literal type="number" pos:start="67:25" pos:end="67:25">0</literal></expr>)</condition> <block pos:start="67:28" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:29">

        <return pos:start="69:9" pos:end="69:29">return <expr pos:start="69:16" pos:end="69:28"><name pos:start="69:16" pos:end="69:28">config_offset</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:33"><expr pos:start="75:5" pos:end="75:32"><name pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:7">dev</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:16">msi_cap</name></name> <operator pos:start="75:18" pos:end="75:18">=</operator> <name pos:start="75:20" pos:end="75:32">config_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:41"><expr pos:start="77:5" pos:end="77:40"><name pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:7">dev</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:20">cap_present</name></name> <operator pos:start="77:22" pos:end="77:23">|=</operator> <name pos:start="77:25" pos:end="77:40">QEMU_PCI_CAP_MSI</name></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:58"><expr pos:start="81:5" pos:end="81:57"><call pos:start="81:5" pos:end="81:57"><name pos:start="81:5" pos:end="81:16">pci_set_word</name><argument_list pos:start="81:17" pos:end="81:57">(<argument pos:start="81:18" pos:end="81:49"><expr pos:start="81:18" pos:end="81:49"><name pos:start="81:18" pos:end="81:28"><name pos:start="81:18" pos:end="81:20">dev</name><operator pos:start="81:21" pos:end="81:22">-&gt;</operator><name pos:start="81:23" pos:end="81:28">config</name></name> <operator pos:start="81:30" pos:end="81:30">+</operator> <call pos:start="81:32" pos:end="81:49"><name pos:start="81:32" pos:end="81:44">msi_flags_off</name><argument_list pos:start="81:45" pos:end="81:49">(<argument pos:start="81:46" pos:end="81:48"><expr pos:start="81:46" pos:end="81:48"><name pos:start="81:46" pos:end="81:48">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:52" pos:end="81:56"><expr pos:start="81:52" pos:end="81:56"><name pos:start="81:52" pos:end="81:56">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="85:61"><expr pos:start="83:5" pos:end="85:60"><call pos:start="83:5" pos:end="85:60"><name pos:start="83:5" pos:end="83:16">pci_set_word</name><argument_list pos:start="83:17" pos:end="85:60">(<argument pos:start="83:18" pos:end="83:48"><expr pos:start="83:18" pos:end="83:48"><name pos:start="83:18" pos:end="83:27"><name pos:start="83:18" pos:end="83:20">dev</name><operator pos:start="83:21" pos:end="83:22">-&gt;</operator><name pos:start="83:23" pos:end="83:27">wmask</name></name> <operator pos:start="83:29" pos:end="83:29">+</operator> <call pos:start="83:31" pos:end="83:48"><name pos:start="83:31" pos:end="83:43">msi_flags_off</name><argument_list pos:start="83:44" pos:end="83:48">(<argument pos:start="83:45" pos:end="83:47"><expr pos:start="83:45" pos:end="83:47"><name pos:start="83:45" pos:end="83:47">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                 <argument pos:start="85:18" pos:end="85:59"><expr pos:start="85:18" pos:end="85:59"><name pos:start="85:18" pos:end="85:36">PCI_MSI_FLAGS_QSIZE</name> <operator pos:start="85:38" pos:end="85:38">|</operator> <name pos:start="85:40" pos:end="85:59">PCI_MSI_FLAGS_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="89:42"><expr pos:start="87:5" pos:end="89:41"><call pos:start="87:5" pos:end="89:41"><name pos:start="87:5" pos:end="87:16">pci_set_long</name><argument_list pos:start="87:17" pos:end="89:41">(<argument pos:start="87:18" pos:end="87:53"><expr pos:start="87:18" pos:end="87:53"><name pos:start="87:18" pos:end="87:27"><name pos:start="87:18" pos:end="87:20">dev</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:27">wmask</name></name> <operator pos:start="87:29" pos:end="87:29">+</operator> <call pos:start="87:31" pos:end="87:53"><name pos:start="87:31" pos:end="87:48">msi_address_lo_off</name><argument_list pos:start="87:49" pos:end="87:53">(<argument pos:start="87:50" pos:end="87:52"><expr pos:start="87:50" pos:end="87:52"><name pos:start="87:50" pos:end="87:52">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                 <argument pos:start="89:18" pos:end="89:40"><expr pos:start="89:18" pos:end="89:40"><name pos:start="89:18" pos:end="89:40">PCI_MSI_ADDRESS_LO_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:17">(<expr pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">msi64bit</name></expr>)</condition> <block pos:start="91:19" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:71">

        <expr_stmt pos:start="93:9" pos:end="93:71"><expr pos:start="93:9" pos:end="93:70"><call pos:start="93:9" pos:end="93:70"><name pos:start="93:9" pos:end="93:20">pci_set_long</name><argument_list pos:start="93:21" pos:end="93:70">(<argument pos:start="93:22" pos:end="93:57"><expr pos:start="93:22" pos:end="93:57"><name pos:start="93:22" pos:end="93:31"><name pos:start="93:22" pos:end="93:24">dev</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:31">wmask</name></name> <operator pos:start="93:33" pos:end="93:33">+</operator> <call pos:start="93:35" pos:end="93:57"><name pos:start="93:35" pos:end="93:52">msi_address_hi_off</name><argument_list pos:start="93:53" pos:end="93:57">(<argument pos:start="93:54" pos:end="93:56"><expr pos:start="93:54" pos:end="93:56"><name pos:start="93:54" pos:end="93:56">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:60" pos:end="93:69"><expr pos:start="93:60" pos:end="93:69"><literal type="number" pos:start="93:60" pos:end="93:69">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:67"><expr pos:start="97:5" pos:end="97:66"><call pos:start="97:5" pos:end="97:66"><name pos:start="97:5" pos:end="97:16">pci_set_word</name><argument_list pos:start="97:17" pos:end="97:66">(<argument pos:start="97:18" pos:end="97:57"><expr pos:start="97:18" pos:end="97:57"><name pos:start="97:18" pos:end="97:27"><name pos:start="97:18" pos:end="97:20">dev</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:27">wmask</name></name> <operator pos:start="97:29" pos:end="97:29">+</operator> <call pos:start="97:31" pos:end="97:57"><name pos:start="97:31" pos:end="97:42">msi_data_off</name><argument_list pos:start="97:43" pos:end="97:57">(<argument pos:start="97:44" pos:end="97:46"><expr pos:start="97:44" pos:end="97:46"><name pos:start="97:44" pos:end="97:46">dev</name></expr></argument>, <argument pos:start="97:49" pos:end="97:56"><expr pos:start="97:49" pos:end="97:56"><name pos:start="97:49" pos:end="97:56">msi64bit</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:60" pos:end="97:65"><expr pos:start="97:60" pos:end="97:65"><literal type="number" pos:start="97:60" pos:end="97:65">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:28">(<expr pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:27">msi_per_vector_mask</name></expr>)</condition> <block pos:start="101:30" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:71">

        <comment type="block" pos:start="103:9" pos:end="103:58">/* Make mask bits 0 to nr_vectors - 1 writable. */</comment>

        <expr_stmt pos:start="105:9" pos:end="107:71"><expr pos:start="105:9" pos:end="107:70"><call pos:start="105:9" pos:end="107:70"><name pos:start="105:9" pos:end="105:20">pci_set_long</name><argument_list pos:start="105:21" pos:end="107:70">(<argument pos:start="105:22" pos:end="105:61"><expr pos:start="105:22" pos:end="105:61"><name pos:start="105:22" pos:end="105:31"><name pos:start="105:22" pos:end="105:24">dev</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:31">wmask</name></name> <operator pos:start="105:33" pos:end="105:33">+</operator> <call pos:start="105:35" pos:end="105:61"><name pos:start="105:35" pos:end="105:46">msi_mask_off</name><argument_list pos:start="105:47" pos:end="105:61">(<argument pos:start="105:48" pos:end="105:50"><expr pos:start="105:48" pos:end="105:50"><name pos:start="105:48" pos:end="105:50">dev</name></expr></argument>, <argument pos:start="105:53" pos:end="105:60"><expr pos:start="105:53" pos:end="105:60"><name pos:start="105:53" pos:end="105:60">msi64bit</name></expr></argument>)</argument_list></call></expr></argument>,

                     <argument pos:start="107:22" pos:end="107:69"><expr pos:start="107:22" pos:end="107:69"><literal type="number" pos:start="107:22" pos:end="107:31">0xffffffff</literal> <operator pos:start="107:33" pos:end="107:34">&gt;&gt;</operator> <operator pos:start="107:36" pos:end="107:36">(</operator><name pos:start="107:37" pos:end="107:55">PCI_MSI_VECTORS_MAX</name> <operator pos:start="107:57" pos:end="107:57">-</operator> <name pos:start="107:59" pos:end="107:68">nr_vectors</name><operator pos:start="107:69" pos:end="107:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
