<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2842.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">dirac_decode_data_unit</name><parameter_list pos:start="1:34" pos:end="1:86">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:75"><decl pos:start="1:58" pos:end="1:75"><type pos:start="1:58" pos:end="1:75"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:70">uint8_t</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:75">buf</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:85"><decl pos:start="1:78" pos:end="1:85"><type pos:start="1:78" pos:end="1:85"><name pos:start="1:78" pos:end="1:80">int</name></type> <name pos:start="1:82" pos:end="1:85">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="267:1">{<block_content pos:start="5:5" pos:end="265:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">DiracContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name>   <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">DiracFrame</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">pic</name>   <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">AVDiracSeqHeader</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">dsh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:22">parse_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:16">tmp</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:35"><if pos:start="19:5" pos:end="21:35">if <condition pos:start="19:8" pos:end="19:37">(<expr pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:12">size</name> <operator pos:start="19:14" pos:end="19:14">&lt;</operator> <name pos:start="19:16" pos:end="19:36">DATA_UNIT_HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:35"><block_content pos:start="21:9" pos:end="21:35">

        <return pos:start="21:9" pos:end="21:35">return <expr pos:start="21:16" pos:end="21:34"><name pos:start="21:16" pos:end="21:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:24"><expr pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:14">parse_code</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:23"><name pos:start="25:18" pos:end="25:20">buf</name><index pos:start="25:21" pos:end="25:23">[<expr pos:start="25:22" pos:end="25:22"><literal type="number" pos:start="25:22" pos:end="25:22">4</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:70"><expr pos:start="29:5" pos:end="29:69"><call pos:start="29:5" pos:end="29:69"><name pos:start="29:5" pos:end="29:17">init_get_bits</name><argument_list pos:start="29:18" pos:end="29:69">(<argument pos:start="29:19" pos:end="29:24"><expr pos:start="29:19" pos:end="29:24"><operator pos:start="29:19" pos:end="29:19">&amp;</operator><name pos:start="29:20" pos:end="29:24"><name pos:start="29:20" pos:end="29:20">s</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:24">gb</name></name></expr></argument>, <argument pos:start="29:27" pos:end="29:34"><expr pos:start="29:27" pos:end="29:34"><operator pos:start="29:27" pos:end="29:27">&amp;</operator><name pos:start="29:28" pos:end="29:34"><name pos:start="29:28" pos:end="29:30">buf</name><index pos:start="29:31" pos:end="29:34">[<expr pos:start="29:32" pos:end="29:33"><literal type="number" pos:start="29:32" pos:end="29:33">13</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:37" pos:end="29:68"><expr pos:start="29:37" pos:end="29:68"><literal type="number" pos:start="29:37" pos:end="29:37">8</literal><operator pos:start="29:38" pos:end="29:38">*</operator><operator pos:start="29:39" pos:end="29:39">(</operator><name pos:start="29:40" pos:end="29:43">size</name> <operator pos:start="29:45" pos:end="29:45">-</operator> <name pos:start="29:47" pos:end="29:67">DATA_UNIT_HEADER_SIZE</name><operator pos:start="29:68" pos:end="29:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="263:5"><if pos:start="33:5" pos:end="115:5">if <condition pos:start="33:8" pos:end="33:45">(<expr pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:18">parse_code</name> <operator pos:start="33:20" pos:end="33:21">==</operator> <name pos:start="33:23" pos:end="33:44">DIRAC_PCODE_SEQ_HEADER</name></expr>)</condition> <block pos:start="33:47" pos:end="115:5">{<block_content pos:start="35:9" pos:end="113:36">

        <if_stmt pos:start="35:9" pos:end="37:21"><if pos:start="35:9" pos:end="37:21">if <condition pos:start="35:12" pos:end="35:36">(<expr pos:start="35:13" pos:end="35:35"><name pos:start="35:13" pos:end="35:35"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:35">seen_sequence_header</name></name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:21"><block_content pos:start="37:13" pos:end="37:21">

            <return pos:start="37:13" pos:end="37:21">return <expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:45">/* [DIRAC_STD] 10. Sequence header */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:117"><expr pos:start="43:9" pos:end="43:116"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:116"><name pos:start="43:15" pos:end="43:44">av_dirac_parse_sequence_header</name><argument_list pos:start="43:45" pos:end="43:116">(<argument pos:start="43:46" pos:end="43:49"><expr pos:start="43:46" pos:end="43:49"><operator pos:start="43:46" pos:end="43:46">&amp;</operator><name pos:start="43:47" pos:end="43:49">dsh</name></expr></argument>, <argument pos:start="43:52" pos:end="43:78"><expr pos:start="43:52" pos:end="43:78"><name pos:start="43:52" pos:end="43:54">buf</name> <operator pos:start="43:56" pos:end="43:56">+</operator> <name pos:start="43:58" pos:end="43:78">DATA_UNIT_HEADER_SIZE</name></expr></argument>, <argument pos:start="43:81" pos:end="43:108"><expr pos:start="43:81" pos:end="43:108"><name pos:start="43:81" pos:end="43:84">size</name> <operator pos:start="43:86" pos:end="43:86">-</operator> <name pos:start="43:88" pos:end="43:108">DATA_UNIT_HEADER_SIZE</name></expr></argument>, <argument pos:start="43:111" pos:end="43:115"><expr pos:start="43:111" pos:end="43:115"><name pos:start="43:111" pos:end="43:115">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition> <block pos:start="45:22" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:23">

            <expr_stmt pos:start="47:13" pos:end="47:73"><expr pos:start="47:13" pos:end="47:72"><call pos:start="47:13" pos:end="47:72"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="47:72">(<argument pos:start="47:20" pos:end="47:24"><expr pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:24">avctx</name></expr></argument>, <argument pos:start="47:27" pos:end="47:38"><expr pos:start="47:27" pos:end="47:38"><name pos:start="47:27" pos:end="47:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:41" pos:end="47:71"><expr pos:start="47:41" pos:end="47:71"><literal type="string" pos:start="47:41" pos:end="47:71">"error parsing sequence header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:23">return <expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:64"><expr pos:start="55:9" pos:end="55:63"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:63"><name pos:start="55:15" pos:end="55:31">ff_set_dimensions</name><argument_list pos:start="55:32" pos:end="55:63">(<argument pos:start="55:33" pos:end="55:37"><expr pos:start="55:33" pos:end="55:37"><name pos:start="55:33" pos:end="55:37">avctx</name></expr></argument>, <argument pos:start="55:40" pos:end="55:49"><expr pos:start="55:40" pos:end="55:49"><name pos:start="55:40" pos:end="55:49"><name pos:start="55:40" pos:end="55:42">dsh</name><operator pos:start="55:43" pos:end="55:44">-&gt;</operator><name pos:start="55:45" pos:end="55:49">width</name></name></expr></argument>, <argument pos:start="55:52" pos:end="55:62"><expr pos:start="55:52" pos:end="55:62"><name pos:start="55:52" pos:end="55:62"><name pos:start="55:52" pos:end="55:54">dsh</name><operator pos:start="55:55" pos:end="55:56">-&gt;</operator><name pos:start="55:57" pos:end="55:62">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:20">(<expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">&lt;</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>)</condition> <block pos:start="57:22" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:23">

            <expr_stmt pos:start="59:13" pos:end="59:27"><expr pos:start="59:13" pos:end="59:26"><call pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:20">av_freep</name><argument_list pos:start="59:21" pos:end="59:26">(<argument pos:start="59:22" pos:end="59:25"><expr pos:start="59:22" pos:end="59:25"><operator pos:start="59:22" pos:end="59:22">&amp;</operator><name pos:start="59:23" pos:end="59:25">dsh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:23">return <expr pos:start="61:20" pos:end="61:22"><name pos:start="61:20" pos:end="61:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:52"><expr pos:start="67:9" pos:end="67:51"><call pos:start="67:9" pos:end="67:51"><name pos:start="67:9" pos:end="67:18">ff_set_sar</name><argument_list pos:start="67:19" pos:end="67:51">(<argument pos:start="67:20" pos:end="67:24"><expr pos:start="67:20" pos:end="67:24"><name pos:start="67:20" pos:end="67:24">avctx</name></expr></argument>, <argument pos:start="67:27" pos:end="67:50"><expr pos:start="67:27" pos:end="67:50"><name pos:start="67:27" pos:end="67:50"><name pos:start="67:27" pos:end="67:29">dsh</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:50">sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:46"><expr pos:start="69:9" pos:end="69:45"><name pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:13">avctx</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:22">pix_fmt</name></name>         <operator pos:start="69:32" pos:end="69:32">=</operator> <name pos:start="69:34" pos:end="69:45"><name pos:start="69:34" pos:end="69:36">dsh</name><operator pos:start="69:37" pos:end="69:38">-&gt;</operator><name pos:start="69:39" pos:end="69:45">pix_fmt</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:50"><expr pos:start="71:9" pos:end="71:49"><name pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:13">avctx</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:26">color_range</name></name>     <operator pos:start="71:32" pos:end="71:32">=</operator> <name pos:start="71:34" pos:end="71:49"><name pos:start="71:34" pos:end="71:36">dsh</name><operator pos:start="71:37" pos:end="71:38">-&gt;</operator><name pos:start="71:39" pos:end="71:49">color_range</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:48"><expr pos:start="73:9" pos:end="73:47"><name pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:13">avctx</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:24">color_trc</name></name>       <operator pos:start="73:32" pos:end="73:32">=</operator> <name pos:start="73:34" pos:end="73:47"><name pos:start="73:34" pos:end="73:36">dsh</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:47">color_trc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:54"><expr pos:start="75:9" pos:end="75:53"><name pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:13">avctx</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:30">color_primaries</name></name> <operator pos:start="75:32" pos:end="75:32">=</operator> <name pos:start="75:34" pos:end="75:53"><name pos:start="75:34" pos:end="75:36">dsh</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:53">color_primaries</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:49"><expr pos:start="77:9" pos:end="77:48"><name pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:13">avctx</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:25">colorspace</name></name>      <operator pos:start="77:32" pos:end="77:32">=</operator> <name pos:start="77:34" pos:end="77:48"><name pos:start="77:34" pos:end="77:36">dsh</name><operator pos:start="77:37" pos:end="77:38">-&gt;</operator><name pos:start="77:39" pos:end="77:48">colorspace</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:13">avctx</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:22">profile</name></name>         <operator pos:start="79:32" pos:end="79:32">=</operator> <name pos:start="79:34" pos:end="79:45"><name pos:start="79:34" pos:end="79:36">dsh</name><operator pos:start="79:37" pos:end="79:38">-&gt;</operator><name pos:start="79:39" pos:end="79:45">profile</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:44"><expr pos:start="81:9" pos:end="81:43"><name pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:13">avctx</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:20">level</name></name>           <operator pos:start="81:32" pos:end="81:32">=</operator> <name pos:start="81:34" pos:end="81:43"><name pos:start="81:34" pos:end="81:36">dsh</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:43">level</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:48"><expr pos:start="83:9" pos:end="83:47"><name pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:13">avctx</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:24">framerate</name></name>       <operator pos:start="83:32" pos:end="83:32">=</operator> <name pos:start="83:34" pos:end="83:47"><name pos:start="83:34" pos:end="83:36">dsh</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:47">framerate</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:48"><expr pos:start="85:9" pos:end="85:47"><name pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:20">bit_depth</name></name>           <operator pos:start="85:32" pos:end="85:32">=</operator> <name pos:start="85:34" pos:end="85:47"><name pos:start="85:34" pos:end="85:36">dsh</name><operator pos:start="85:37" pos:end="85:38">-&gt;</operator><name pos:start="85:39" pos:end="85:47">bit_depth</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:52"><expr pos:start="87:9" pos:end="87:51"><name pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:18">version</name><operator pos:start="87:19" pos:end="87:19">.</operator><name pos:start="87:20" pos:end="87:24">major</name></name>       <operator pos:start="87:32" pos:end="87:32">=</operator> <name pos:start="87:34" pos:end="87:51"><name pos:start="87:34" pos:end="87:36">dsh</name><operator pos:start="87:37" pos:end="87:38">-&gt;</operator><name pos:start="87:39" pos:end="87:45">version</name><operator pos:start="87:46" pos:end="87:46">.</operator><name pos:start="87:47" pos:end="87:51">major</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:52"><expr pos:start="89:9" pos:end="89:51"><name pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:18">version</name><operator pos:start="89:19" pos:end="89:19">.</operator><name pos:start="89:20" pos:end="89:24">minor</name></name>       <operator pos:start="89:32" pos:end="89:32">=</operator> <name pos:start="89:34" pos:end="89:51"><name pos:start="89:34" pos:end="89:36">dsh</name><operator pos:start="89:37" pos:end="89:38">-&gt;</operator><name pos:start="89:39" pos:end="89:45">version</name><operator pos:start="89:46" pos:end="89:46">.</operator><name pos:start="89:47" pos:end="89:51">minor</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:38"><expr pos:start="91:9" pos:end="91:37"><name pos:start="91:9" pos:end="91:14"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:14">seq</name></name>                 <operator pos:start="91:32" pos:end="91:32">=</operator> <operator pos:start="91:34" pos:end="91:34">*</operator><name pos:start="91:35" pos:end="91:37">dsh</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:23"><expr pos:start="93:9" pos:end="93:22"><call pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:16">av_freep</name><argument_list pos:start="93:17" pos:end="93:22">(<argument pos:start="93:18" pos:end="93:21"><expr pos:start="93:18" pos:end="93:21"><operator pos:start="93:18" pos:end="93:18">&amp;</operator><name pos:start="93:19" pos:end="93:21">dsh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:37"><expr pos:start="97:9" pos:end="97:36"><name pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:17">pshift</name></name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:32"><name pos:start="97:21" pos:end="97:21">s</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:32">bit_depth</name></name> <operator pos:start="97:34" pos:end="97:34">&gt;</operator> <literal type="number" pos:start="97:36" pos:end="97:36">8</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:94"><expr pos:start="101:9" pos:end="101:93"><call pos:start="101:9" pos:end="101:93"><name pos:start="101:9" pos:end="101:37">avcodec_get_chroma_sub_sample</name><argument_list pos:start="101:38" pos:end="101:93">(<argument pos:start="101:39" pos:end="101:52"><expr pos:start="101:39" pos:end="101:52"><name pos:start="101:39" pos:end="101:52"><name pos:start="101:39" pos:end="101:43">avctx</name><operator pos:start="101:44" pos:end="101:45">-&gt;</operator><name pos:start="101:46" pos:end="101:52">pix_fmt</name></name></expr></argument>, <argument pos:start="101:55" pos:end="101:72"><expr pos:start="101:55" pos:end="101:72"><operator pos:start="101:55" pos:end="101:55">&amp;</operator><name pos:start="101:56" pos:end="101:72"><name pos:start="101:56" pos:end="101:56">s</name><operator pos:start="101:57" pos:end="101:58">-&gt;</operator><name pos:start="101:59" pos:end="101:72">chroma_x_shift</name></name></expr></argument>, <argument pos:start="101:75" pos:end="101:92"><expr pos:start="101:75" pos:end="101:92"><operator pos:start="101:75" pos:end="101:75">&amp;</operator><name pos:start="101:76" pos:end="101:92"><name pos:start="101:76" pos:end="101:76">s</name><operator pos:start="101:77" pos:end="101:78">-&gt;</operator><name pos:start="101:79" pos:end="101:92">chroma_y_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:40"><expr pos:start="105:9" pos:end="105:39"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:39"><name pos:start="105:15" pos:end="105:36">alloc_sequence_buffers</name><argument_list pos:start="105:37" pos:end="105:39">(<argument pos:start="105:38" pos:end="105:38"><expr pos:start="105:38" pos:end="105:38"><name pos:start="105:38" pos:end="105:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="109:23"><if pos:start="107:9" pos:end="109:23">if <condition pos:start="107:12" pos:end="107:20">(<expr pos:start="107:13" pos:end="107:19"><name pos:start="107:13" pos:end="107:15">ret</name> <operator pos:start="107:17" pos:end="107:17">&lt;</operator> <literal type="number" pos:start="107:19" pos:end="107:19">0</literal></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:23"><block_content pos:start="109:13" pos:end="109:23">

            <return pos:start="109:13" pos:end="109:23">return <expr pos:start="109:20" pos:end="109:22"><name pos:start="109:20" pos:end="109:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:36"><expr pos:start="113:9" pos:end="113:35"><name pos:start="113:9" pos:end="113:31"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:31">seen_sequence_header</name></name> <operator pos:start="113:33" pos:end="113:33">=</operator> <literal type="number" pos:start="113:35" pos:end="113:35">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="115:7" pos:end="121:5">else if <condition pos:start="115:15" pos:end="115:49">(<expr pos:start="115:16" pos:end="115:48"><name pos:start="115:16" pos:end="115:25">parse_code</name> <operator pos:start="115:27" pos:end="115:28">==</operator> <name pos:start="115:30" pos:end="115:48">DIRAC_PCODE_END_SEQ</name></expr>)</condition> <block pos:start="115:51" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:36"> <comment type="block" pos:start="115:53" pos:end="115:85">/* [DIRAC_STD] End of Sequence */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:33"><expr pos:start="117:9" pos:end="117:32"><call pos:start="117:9" pos:end="117:32"><name pos:start="117:9" pos:end="117:29">free_sequence_buffers</name><argument_list pos:start="117:30" pos:end="117:32">(<argument pos:start="117:31" pos:end="117:31"><expr pos:start="117:31" pos:end="117:31"><name pos:start="117:31" pos:end="117:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:36"><expr pos:start="119:9" pos:end="119:35"><name pos:start="119:9" pos:end="119:31"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:31">seen_sequence_header</name></name> <operator pos:start="119:33" pos:end="119:33">=</operator> <literal type="number" pos:start="119:35" pos:end="119:35">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="121:7" pos:end="139:5">else if <condition pos:start="121:15" pos:end="121:45">(<expr pos:start="121:16" pos:end="121:44"><name pos:start="121:16" pos:end="121:25">parse_code</name> <operator pos:start="121:27" pos:end="121:28">==</operator> <name pos:start="121:30" pos:end="121:44">DIRAC_PCODE_AUX</name></expr>)</condition> <block pos:start="121:47" pos:end="139:5">{<block_content pos:start="123:9" pos:end="137:9">

        <if_stmt pos:start="123:9" pos:end="137:9"><if pos:start="123:9" pos:end="137:9">if <condition pos:start="123:12" pos:end="123:25">(<expr pos:start="123:13" pos:end="123:24"><name pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:15">buf</name><index pos:start="123:16" pos:end="123:19">[<expr pos:start="123:17" pos:end="123:18"><literal type="number" pos:start="123:17" pos:end="123:18">13</literal></expr>]</index></name> <operator pos:start="123:21" pos:end="123:22">==</operator> <literal type="number" pos:start="123:24" pos:end="123:24">1</literal></expr>)</condition> <block pos:start="123:27" pos:end="137:9">{<block_content pos:start="125:13" pos:end="135:43">     <comment type="block" pos:start="123:33" pos:end="123:68">/* encoder implementation/version */</comment>

            <decl_stmt pos:start="125:13" pos:end="125:23"><decl pos:start="125:13" pos:end="125:22"><type pos:start="125:13" pos:end="125:15"><name pos:start="125:13" pos:end="125:15">int</name></type> <name pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:19">ver</name><index pos:start="125:20" pos:end="125:22">[<expr pos:start="125:21" pos:end="125:21"><literal type="number" pos:start="125:21" pos:end="125:21">3</literal></expr>]</index></name></decl>;</decl_stmt>

            <comment type="block" pos:start="127:13" pos:end="129:50">/* versions older than 1.0.8 don't store quant delta for

               subbands with only one codeblock */</comment>

            <if_stmt pos:start="131:13" pos:end="135:43"><if pos:start="131:13" pos:end="135:43">if <condition pos:start="131:16" pos:end="131:80">(<expr pos:start="131:17" pos:end="131:79"><call pos:start="131:17" pos:end="131:74"><name pos:start="131:17" pos:end="131:22">sscanf</name><argument_list pos:start="131:23" pos:end="131:74">(<argument pos:start="131:24" pos:end="131:29"><expr pos:start="131:24" pos:end="131:29"><name pos:start="131:24" pos:end="131:26">buf</name><operator pos:start="131:27" pos:end="131:27">+</operator><literal type="number" pos:start="131:28" pos:end="131:29">14</literal></expr></argument>, <argument pos:start="131:32" pos:end="131:54"><expr pos:start="131:32" pos:end="131:54"><literal type="string" pos:start="131:32" pos:end="131:54">"Schroedinger %d.%d.%d"</literal></expr></argument>, <argument pos:start="131:57" pos:end="131:59"><expr pos:start="131:57" pos:end="131:59"><name pos:start="131:57" pos:end="131:59">ver</name></expr></argument>, <argument pos:start="131:62" pos:end="131:66"><expr pos:start="131:62" pos:end="131:66"><name pos:start="131:62" pos:end="131:64">ver</name><operator pos:start="131:65" pos:end="131:65">+</operator><literal type="number" pos:start="131:66" pos:end="131:66">1</literal></expr></argument>, <argument pos:start="131:69" pos:end="131:73"><expr pos:start="131:69" pos:end="131:73"><name pos:start="131:69" pos:end="131:71">ver</name><operator pos:start="131:72" pos:end="131:72">+</operator><literal type="number" pos:start="131:73" pos:end="131:73">2</literal></expr></argument>)</argument_list></call> <operator pos:start="131:76" pos:end="131:77">==</operator> <literal type="number" pos:start="131:79" pos:end="131:79">3</literal></expr>)</condition><block type="pseudo" pos:start="133:17" pos:end="135:43"><block_content pos:start="133:17" pos:end="135:43">

                <if_stmt pos:start="133:17" pos:end="135:43"><if pos:start="133:17" pos:end="135:43">if <condition pos:start="133:20" pos:end="133:62">(<expr pos:start="133:21" pos:end="133:61"><name pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:23">ver</name><index pos:start="133:24" pos:end="133:26">[<expr pos:start="133:25" pos:end="133:25"><literal type="number" pos:start="133:25" pos:end="133:25">0</literal></expr>]</index></name> <operator pos:start="133:28" pos:end="133:29">==</operator> <literal type="number" pos:start="133:31" pos:end="133:31">1</literal> <operator pos:start="133:33" pos:end="133:34">&amp;&amp;</operator> <name pos:start="133:36" pos:end="133:41"><name pos:start="133:36" pos:end="133:38">ver</name><index pos:start="133:39" pos:end="133:41">[<expr pos:start="133:40" pos:end="133:40"><literal type="number" pos:start="133:40" pos:end="133:40">1</literal></expr>]</index></name> <operator pos:start="133:43" pos:end="133:44">==</operator> <literal type="number" pos:start="133:46" pos:end="133:46">0</literal> <operator pos:start="133:48" pos:end="133:49">&amp;&amp;</operator> <name pos:start="133:51" pos:end="133:56"><name pos:start="133:51" pos:end="133:53">ver</name><index pos:start="133:54" pos:end="133:56">[<expr pos:start="133:55" pos:end="133:55"><literal type="number" pos:start="133:55" pos:end="133:55">2</literal></expr>]</index></name> <operator pos:start="133:58" pos:end="133:59">&lt;=</operator> <literal type="number" pos:start="133:61" pos:end="133:61">7</literal></expr>)</condition><block type="pseudo" pos:start="135:21" pos:end="135:43"><block_content pos:start="135:21" pos:end="135:43">

                    <expr_stmt pos:start="135:21" pos:end="135:43"><expr pos:start="135:21" pos:end="135:42"><name pos:start="135:21" pos:end="135:38"><name pos:start="135:21" pos:end="135:21">s</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:38">old_delta_quant</name></name> <operator pos:start="135:40" pos:end="135:40">=</operator> <literal type="number" pos:start="135:42" pos:end="135:42">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="263:5">else if <condition pos:start="139:15" pos:end="139:32">(<expr pos:start="139:16" pos:end="139:31"><name pos:start="139:16" pos:end="139:25">parse_code</name> <operator pos:start="139:27" pos:end="139:27">&amp;</operator> <literal type="number" pos:start="139:29" pos:end="139:31">0x8</literal></expr>)</condition> <block pos:start="139:34" pos:end="263:5">{<block_content pos:start="141:9" pos:end="261:23">  <comment type="block" pos:start="139:37" pos:end="139:59">/* picture data unit */</comment>

        <if_stmt pos:start="141:9" pos:end="147:9"><if pos:start="141:9" pos:end="147:9">if <condition pos:start="141:12" pos:end="141:37">(<expr pos:start="141:13" pos:end="141:36"><operator pos:start="141:13" pos:end="141:13">!</operator><name pos:start="141:14" pos:end="141:36"><name pos:start="141:14" pos:end="141:14">s</name><operator pos:start="141:15" pos:end="141:16">-&gt;</operator><name pos:start="141:17" pos:end="141:36">seen_sequence_header</name></name></expr>)</condition> <block pos:start="141:39" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:39">

            <expr_stmt pos:start="143:13" pos:end="143:84"><expr pos:start="143:13" pos:end="143:83"><call pos:start="143:13" pos:end="143:83"><name pos:start="143:13" pos:end="143:18">av_log</name><argument_list pos:start="143:19" pos:end="143:83">(<argument pos:start="143:20" pos:end="143:24"><expr pos:start="143:20" pos:end="143:24"><name pos:start="143:20" pos:end="143:24">avctx</name></expr></argument>, <argument pos:start="143:27" pos:end="143:38"><expr pos:start="143:27" pos:end="143:38"><name pos:start="143:27" pos:end="143:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="143:41" pos:end="143:82"><expr pos:start="143:41" pos:end="143:82"><literal type="string" pos:start="143:41" pos:end="143:82">"Dropping frame without sequence header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="145:13" pos:end="145:39">return <expr pos:start="145:20" pos:end="145:38"><name pos:start="145:20" pos:end="145:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="151:9" pos:end="151:34">/* find an unused frame */</comment>

        <for pos:start="153:9" pos:end="157:40">for <control pos:start="153:13" pos:end="153:40">(<init pos:start="153:14" pos:end="153:19"><expr pos:start="153:14" pos:end="153:18"><name pos:start="153:14" pos:end="153:14">i</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <literal type="number" pos:start="153:18" pos:end="153:18">0</literal></expr>;</init> <condition pos:start="153:21" pos:end="153:35"><expr pos:start="153:21" pos:end="153:34"><name pos:start="153:21" pos:end="153:21">i</name> <operator pos:start="153:23" pos:end="153:23">&lt;</operator> <name pos:start="153:25" pos:end="153:34">MAX_FRAMES</name></expr>;</condition> <incr pos:start="153:37" pos:end="153:39"><expr pos:start="153:37" pos:end="153:39"><name pos:start="153:37" pos:end="153:37">i</name><operator pos:start="153:38" pos:end="153:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="155:13" pos:end="157:40"><block_content pos:start="155:13" pos:end="157:40">

            <if_stmt pos:start="155:13" pos:end="157:40"><if pos:start="155:13" pos:end="157:40">if <condition pos:start="155:16" pos:end="155:58">(<expr pos:start="155:17" pos:end="155:57"><name pos:start="155:17" pos:end="155:32"><name pos:start="155:17" pos:end="155:17">s</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:29">all_frames</name><index pos:start="155:30" pos:end="155:32">[<expr pos:start="155:31" pos:end="155:31"><name pos:start="155:31" pos:end="155:31">i</name></expr>]</index></name><operator pos:start="155:33" pos:end="155:33">.</operator><name pos:start="155:34" pos:end="155:49"><name pos:start="155:34" pos:end="155:40">avframe</name><operator pos:start="155:41" pos:end="155:42">-&gt;</operator><name pos:start="155:43" pos:end="155:46">data</name><index pos:start="155:47" pos:end="155:49">[<expr pos:start="155:48" pos:end="155:48"><literal type="number" pos:start="155:48" pos:end="155:48">0</literal></expr>]</index></name> <operator pos:start="155:51" pos:end="155:52">==</operator> <name pos:start="155:54" pos:end="155:57">NULL</name></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:40"><block_content pos:start="157:17" pos:end="157:40">

                <expr_stmt pos:start="157:17" pos:end="157:40"><expr pos:start="157:17" pos:end="157:39"><name pos:start="157:17" pos:end="157:19">pic</name> <operator pos:start="157:21" pos:end="157:21">=</operator> <operator pos:start="157:23" pos:end="157:23">&amp;</operator><name pos:start="157:24" pos:end="157:39"><name pos:start="157:24" pos:end="157:24">s</name><operator pos:start="157:25" pos:end="157:26">-&gt;</operator><name pos:start="157:27" pos:end="157:36">all_frames</name><index pos:start="157:37" pos:end="157:39">[<expr pos:start="157:38" pos:end="157:38"><name pos:start="157:38" pos:end="157:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

        <if_stmt pos:start="159:9" pos:end="165:9"><if pos:start="159:9" pos:end="165:9">if <condition pos:start="159:12" pos:end="159:17">(<expr pos:start="159:13" pos:end="159:16"><operator pos:start="159:13" pos:end="159:13">!</operator><name pos:start="159:14" pos:end="159:16">pic</name></expr>)</condition> <block pos:start="159:19" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:39">

            <expr_stmt pos:start="161:13" pos:end="161:60"><expr pos:start="161:13" pos:end="161:59"><call pos:start="161:13" pos:end="161:59"><name pos:start="161:13" pos:end="161:18">av_log</name><argument_list pos:start="161:19" pos:end="161:59">(<argument pos:start="161:20" pos:end="161:24"><expr pos:start="161:20" pos:end="161:24"><name pos:start="161:20" pos:end="161:24">avctx</name></expr></argument>, <argument pos:start="161:27" pos:end="161:38"><expr pos:start="161:27" pos:end="161:38"><name pos:start="161:27" pos:end="161:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:41" pos:end="161:58"><expr pos:start="161:41" pos:end="161:58"><literal type="string" pos:start="161:41" pos:end="161:58">"framelist full\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="163:13" pos:end="163:39">return <expr pos:start="163:20" pos:end="163:38"><name pos:start="163:20" pos:end="163:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:37"><expr pos:start="169:9" pos:end="169:36"><call pos:start="169:9" pos:end="169:36"><name pos:start="169:9" pos:end="169:22">av_frame_unref</name><argument_list pos:start="169:23" pos:end="169:36">(<argument pos:start="169:24" pos:end="169:35"><expr pos:start="169:24" pos:end="169:35"><name pos:start="169:24" pos:end="169:35"><name pos:start="169:24" pos:end="169:26">pic</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:35">avframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="173:9" pos:end="173:46">/* [DIRAC_STD] Defined in 9.6.1 ... */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:44"><expr pos:start="175:9" pos:end="175:43"><name pos:start="175:9" pos:end="175:11">tmp</name>            <operator pos:start="175:24" pos:end="175:24">=</operator>  <name pos:start="175:27" pos:end="175:36">parse_code</name> <operator pos:start="175:38" pos:end="175:38">&amp;</operator> <literal type="number" pos:start="175:40" pos:end="175:43">0x03</literal></expr>;</expr_stmt>                   <comment type="block" pos:start="175:64" pos:end="175:96">/* [DIRAC_STD] num_refs()      */</comment>

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:20">(<expr pos:start="177:13" pos:end="177:19"><name pos:start="177:13" pos:end="177:15">tmp</name> <operator pos:start="177:17" pos:end="177:17">&gt;</operator> <literal type="number" pos:start="177:19" pos:end="177:19">2</literal></expr>)</condition> <block pos:start="177:22" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:39">

            <expr_stmt pos:start="179:13" pos:end="179:59"><expr pos:start="179:13" pos:end="179:58"><call pos:start="179:13" pos:end="179:58"><name pos:start="179:13" pos:end="179:18">av_log</name><argument_list pos:start="179:19" pos:end="179:58">(<argument pos:start="179:20" pos:end="179:24"><expr pos:start="179:20" pos:end="179:24"><name pos:start="179:20" pos:end="179:24">avctx</name></expr></argument>, <argument pos:start="179:27" pos:end="179:38"><expr pos:start="179:27" pos:end="179:38"><name pos:start="179:27" pos:end="179:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:41" pos:end="179:57"><expr pos:start="179:41" pos:end="179:57"><literal type="string" pos:start="179:41" pos:end="179:57">"num_refs of 3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="181:13" pos:end="181:39">return <expr pos:start="181:20" pos:end="181:38"><name pos:start="181:20" pos:end="181:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:31"><expr pos:start="185:9" pos:end="185:30"><name pos:start="185:9" pos:end="185:19"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:19">num_refs</name></name>      <operator pos:start="185:26" pos:end="185:26">=</operator> <name pos:start="185:28" pos:end="185:30">tmp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:55"><expr pos:start="187:9" pos:end="187:54"><name pos:start="187:9" pos:end="187:19"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:19">is_arith</name></name>      <operator pos:start="187:26" pos:end="187:26">=</operator> <operator pos:start="187:28" pos:end="187:28">(</operator><name pos:start="187:29" pos:end="187:38">parse_code</name> <operator pos:start="187:40" pos:end="187:40">&amp;</operator> <literal type="number" pos:start="187:42" pos:end="187:45">0x48</literal><operator pos:start="187:46" pos:end="187:46">)</operator> <operator pos:start="187:48" pos:end="187:49">==</operator> <literal type="number" pos:start="187:51" pos:end="187:54">0x08</literal></expr>;</expr_stmt>          <comment type="block" pos:start="187:66" pos:end="187:104">/* [DIRAC_STD] using_ac()            */</comment>

        <expr_stmt pos:start="189:9" pos:end="189:55"><expr pos:start="189:9" pos:end="189:54"><name pos:start="189:9" pos:end="189:20"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:20">low_delay</name></name>     <operator pos:start="189:26" pos:end="189:26">=</operator> <operator pos:start="189:28" pos:end="189:28">(</operator><name pos:start="189:29" pos:end="189:38">parse_code</name> <operator pos:start="189:40" pos:end="189:40">&amp;</operator> <literal type="number" pos:start="189:42" pos:end="189:45">0x88</literal><operator pos:start="189:46" pos:end="189:46">)</operator> <operator pos:start="189:48" pos:end="189:49">==</operator> <literal type="number" pos:start="189:51" pos:end="189:54">0x88</literal></expr>;</expr_stmt>          <comment type="block" pos:start="189:66" pos:end="189:104">/* [DIRAC_STD] is_low_delay()        */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:55"><expr pos:start="191:9" pos:end="191:54"><name pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:22">core_syntax</name></name>   <operator pos:start="191:26" pos:end="191:26">=</operator> <operator pos:start="191:28" pos:end="191:28">(</operator><name pos:start="191:29" pos:end="191:38">parse_code</name> <operator pos:start="191:40" pos:end="191:40">&amp;</operator> <literal type="number" pos:start="191:42" pos:end="191:45">0x88</literal><operator pos:start="191:46" pos:end="191:46">)</operator> <operator pos:start="191:48" pos:end="191:49">==</operator> <literal type="number" pos:start="191:51" pos:end="191:54">0x08</literal></expr>;</expr_stmt>          <comment type="block" pos:start="191:66" pos:end="191:104">/* [DIRAC_STD] is_core_syntax()      */</comment>

        <expr_stmt pos:start="193:9" pos:end="193:55"><expr pos:start="193:9" pos:end="193:54"><name pos:start="193:9" pos:end="193:21"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:21">ld_picture</name></name>    <operator pos:start="193:26" pos:end="193:26">=</operator> <operator pos:start="193:28" pos:end="193:28">(</operator><name pos:start="193:29" pos:end="193:38">parse_code</name> <operator pos:start="193:40" pos:end="193:40">&amp;</operator> <literal type="number" pos:start="193:42" pos:end="193:45">0xF8</literal><operator pos:start="193:46" pos:end="193:46">)</operator> <operator pos:start="193:48" pos:end="193:49">==</operator> <literal type="number" pos:start="193:51" pos:end="193:54">0xC8</literal></expr>;</expr_stmt>          <comment type="block" pos:start="193:66" pos:end="193:104">/* [DIRAC_STD] is_ld_picture()       */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:55"><expr pos:start="195:9" pos:end="195:54"><name pos:start="195:9" pos:end="195:21"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:21">hq_picture</name></name>    <operator pos:start="195:26" pos:end="195:26">=</operator> <operator pos:start="195:28" pos:end="195:28">(</operator><name pos:start="195:29" pos:end="195:38">parse_code</name> <operator pos:start="195:40" pos:end="195:40">&amp;</operator> <literal type="number" pos:start="195:42" pos:end="195:45">0xF8</literal><operator pos:start="195:46" pos:end="195:46">)</operator> <operator pos:start="195:48" pos:end="195:49">==</operator> <literal type="number" pos:start="195:51" pos:end="195:54">0xE8</literal></expr>;</expr_stmt>          <comment type="block" pos:start="195:66" pos:end="195:104">/* [DIRAC_STD] is_hq_picture()       */</comment>

        <expr_stmt pos:start="197:9" pos:end="197:55"><expr pos:start="197:9" pos:end="197:54"><name pos:start="197:9" pos:end="197:24"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:24">dc_prediction</name></name> <operator pos:start="197:26" pos:end="197:26">=</operator> <operator pos:start="197:28" pos:end="197:28">(</operator><name pos:start="197:29" pos:end="197:38">parse_code</name> <operator pos:start="197:40" pos:end="197:40">&amp;</operator> <literal type="number" pos:start="197:42" pos:end="197:45">0x28</literal><operator pos:start="197:46" pos:end="197:46">)</operator> <operator pos:start="197:48" pos:end="197:49">==</operator> <literal type="number" pos:start="197:51" pos:end="197:54">0x08</literal></expr>;</expr_stmt>          <comment type="block" pos:start="197:66" pos:end="197:104">/* [DIRAC_STD] using_dc_prediction() */</comment>

        <expr_stmt pos:start="199:9" pos:end="199:55"><expr pos:start="199:9" pos:end="199:54"><name pos:start="199:9" pos:end="199:22"><name pos:start="199:9" pos:end="199:11">pic</name><operator pos:start="199:12" pos:end="199:13">-&gt;</operator><name pos:start="199:14" pos:end="199:22">reference</name></name>   <operator pos:start="199:26" pos:end="199:26">=</operator> <operator pos:start="199:28" pos:end="199:28">(</operator><name pos:start="199:29" pos:end="199:38">parse_code</name> <operator pos:start="199:40" pos:end="199:40">&amp;</operator> <literal type="number" pos:start="199:42" pos:end="199:45">0x0C</literal><operator pos:start="199:46" pos:end="199:46">)</operator> <operator pos:start="199:48" pos:end="199:49">==</operator> <literal type="number" pos:start="199:51" pos:end="199:54">0x0C</literal></expr>;</expr_stmt>          <comment type="block" pos:start="199:66" pos:end="199:104">/* [DIRAC_STD] is_reference()        */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:51"><expr pos:start="201:9" pos:end="201:50"><name pos:start="201:9" pos:end="201:31"><name pos:start="201:9" pos:end="201:11">pic</name><operator pos:start="201:12" pos:end="201:13">-&gt;</operator><name pos:start="201:14" pos:end="201:20">avframe</name><operator pos:start="201:21" pos:end="201:22">-&gt;</operator><name pos:start="201:23" pos:end="201:31">key_frame</name></name> <operator pos:start="201:33" pos:end="201:33">=</operator> <name pos:start="201:35" pos:end="201:45"><name pos:start="201:35" pos:end="201:35">s</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:45">num_refs</name></name> <operator pos:start="201:47" pos:end="201:48">==</operator> <literal type="number" pos:start="201:50" pos:end="201:50">0</literal></expr>;</expr_stmt>              <comment type="block" pos:start="201:66" pos:end="201:104">/* [DIRAC_STD] is_intra()            */</comment>

        <expr_stmt pos:start="203:9" pos:end="203:50"><expr pos:start="203:9" pos:end="203:49"><name pos:start="203:9" pos:end="203:31"><name pos:start="203:9" pos:end="203:11">pic</name><operator pos:start="203:12" pos:end="203:13">-&gt;</operator><name pos:start="203:14" pos:end="203:20">avframe</name><operator pos:start="203:21" pos:end="203:22">-&gt;</operator><name pos:start="203:23" pos:end="203:31">pict_type</name></name> <operator pos:start="203:33" pos:end="203:33">=</operator> <name pos:start="203:35" pos:end="203:45"><name pos:start="203:35" pos:end="203:35">s</name><operator pos:start="203:36" pos:end="203:37">-&gt;</operator><name pos:start="203:38" pos:end="203:45">num_refs</name></name> <operator pos:start="203:47" pos:end="203:47">+</operator> <literal type="number" pos:start="203:49" pos:end="203:49">1</literal></expr>;</expr_stmt>               <comment type="block" pos:start="203:66" pos:end="203:110">/* Definition of AVPictureType in avutil.h */</comment>



        <comment type="block" pos:start="207:9" pos:end="207:80">/* VC-2 Low Delay has a different parse code than the Dirac Low Delay */</comment>

        <if_stmt pos:start="209:9" pos:end="211:30"><if pos:start="209:9" pos:end="211:30">if <condition pos:start="209:12" pos:end="209:56">(<expr pos:start="209:13" pos:end="209:55"><name pos:start="209:13" pos:end="209:28"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:22">version</name><operator pos:start="209:23" pos:end="209:23">.</operator><name pos:start="209:24" pos:end="209:28">minor</name></name> <operator pos:start="209:30" pos:end="209:31">==</operator> <literal type="number" pos:start="209:33" pos:end="209:33">2</literal> <operator pos:start="209:35" pos:end="209:36">&amp;&amp;</operator> <name pos:start="209:38" pos:end="209:47">parse_code</name> <operator pos:start="209:49" pos:end="209:50">==</operator> <literal type="number" pos:start="209:52" pos:end="209:55">0x88</literal></expr>)</condition><block type="pseudo" pos:start="211:13" pos:end="211:30"><block_content pos:start="211:13" pos:end="211:30">

            <expr_stmt pos:start="211:13" pos:end="211:30"><expr pos:start="211:13" pos:end="211:29"><name pos:start="211:13" pos:end="211:25"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:25">ld_picture</name></name> <operator pos:start="211:27" pos:end="211:27">=</operator> <literal type="number" pos:start="211:29" pos:end="211:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="215:9" pos:end="221:9"><if pos:start="215:9" pos:end="221:9">if <condition pos:start="215:12" pos:end="215:63">(<expr pos:start="215:13" pos:end="215:61"><name pos:start="215:13" pos:end="215:24"><name pos:start="215:13" pos:end="215:13">s</name><operator pos:start="215:14" pos:end="215:15">-&gt;</operator><name pos:start="215:16" pos:end="215:24">low_delay</name></name> <operator pos:start="215:26" pos:end="215:27">&amp;&amp;</operator> <operator pos:start="215:29" pos:end="215:29">!</operator><operator pos:start="215:30" pos:end="215:30">(</operator><name pos:start="215:31" pos:end="215:43"><name pos:start="215:31" pos:end="215:31">s</name><operator pos:start="215:32" pos:end="215:33">-&gt;</operator><name pos:start="215:34" pos:end="215:43">ld_picture</name></name> <operator pos:start="215:45" pos:end="215:46">||</operator> <name pos:start="215:48" pos:end="215:60"><name pos:start="215:48" pos:end="215:48">s</name><operator pos:start="215:49" pos:end="215:50">-&gt;</operator><name pos:start="215:51" pos:end="215:60">hq_picture</name></name><operator pos:start="215:61" pos:end="215:61">)</operator></expr> )</condition> <block pos:start="215:65" pos:end="221:9">{<block_content pos:start="217:13" pos:end="219:39">

            <expr_stmt pos:start="217:13" pos:end="217:68"><expr pos:start="217:13" pos:end="217:67"><call pos:start="217:13" pos:end="217:67"><name pos:start="217:13" pos:end="217:18">av_log</name><argument_list pos:start="217:19" pos:end="217:67">(<argument pos:start="217:20" pos:end="217:24"><expr pos:start="217:20" pos:end="217:24"><name pos:start="217:20" pos:end="217:24">avctx</name></expr></argument>, <argument pos:start="217:27" pos:end="217:38"><expr pos:start="217:27" pos:end="217:38"><name pos:start="217:27" pos:end="217:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:41" pos:end="217:66"><expr pos:start="217:41" pos:end="217:66"><literal type="string" pos:start="217:41" pos:end="217:66">"Invalid low delay flag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="219:13" pos:end="219:39">return <expr pos:start="219:20" pos:end="219:38"><name pos:start="219:20" pos:end="219:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="225:9" pos:end="227:23"><if pos:start="225:9" pos:end="227:23">if <condition pos:start="225:12" pos:end="225:124">(<expr pos:start="225:13" pos:end="225:123"><operator pos:start="225:13" pos:end="225:13">(</operator><name pos:start="225:14" pos:end="225:16">ret</name> <operator pos:start="225:18" pos:end="225:18">=</operator> <call pos:start="225:20" pos:end="225:118"><name pos:start="225:20" pos:end="225:39">get_buffer_with_edge</name><argument_list pos:start="225:40" pos:end="225:118">(<argument pos:start="225:41" pos:end="225:45"><expr pos:start="225:41" pos:end="225:45"><name pos:start="225:41" pos:end="225:45">avctx</name></expr></argument>, <argument pos:start="225:48" pos:end="225:59"><expr pos:start="225:48" pos:end="225:59"><name pos:start="225:48" pos:end="225:59"><name pos:start="225:48" pos:end="225:50">pic</name><operator pos:start="225:51" pos:end="225:52">-&gt;</operator><name pos:start="225:53" pos:end="225:59">avframe</name></name></expr></argument>, <argument pos:start="225:62" pos:end="225:117"><expr pos:start="225:62" pos:end="225:117"><ternary pos:start="225:62" pos:end="225:117"><condition pos:start="225:62" pos:end="225:90"><expr pos:start="225:62" pos:end="225:88"><operator pos:start="225:62" pos:end="225:62">(</operator><name pos:start="225:63" pos:end="225:72">parse_code</name> <operator pos:start="225:74" pos:end="225:74">&amp;</operator> <literal type="number" pos:start="225:76" pos:end="225:79">0x0C</literal><operator pos:start="225:80" pos:end="225:80">)</operator> <operator pos:start="225:82" pos:end="225:83">==</operator> <literal type="number" pos:start="225:85" pos:end="225:88">0x0C</literal></expr> ?</condition><then pos:start="225:92" pos:end="225:113"> <expr pos:start="225:92" pos:end="225:113"><name pos:start="225:92" pos:end="225:113">AV_GET_BUFFER_FLAG_REF</name></expr> </then><else pos:start="225:115" pos:end="225:117">: <expr pos:start="225:117" pos:end="225:117"><literal type="number" pos:start="225:117" pos:end="225:117">0</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator pos:start="225:119" pos:end="225:119">)</operator> <operator pos:start="225:121" pos:end="225:121">&lt;</operator> <literal type="number" pos:start="225:123" pos:end="225:123">0</literal></expr>)</condition><block type="pseudo" pos:start="227:13" pos:end="227:23"><block_content pos:start="227:13" pos:end="227:23">

            <return pos:start="227:13" pos:end="227:23">return <expr pos:start="227:20" pos:end="227:22"><name pos:start="227:20" pos:end="227:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:33"><expr pos:start="229:9" pos:end="229:32"><name pos:start="229:9" pos:end="229:26"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:26">current_picture</name></name> <operator pos:start="229:28" pos:end="229:28">=</operator> <name pos:start="229:30" pos:end="229:32">pic</name></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:55"><expr pos:start="231:9" pos:end="231:54"><name pos:start="231:9" pos:end="231:19"><name pos:start="231:9" pos:end="231:9">s</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:16">plane</name><index pos:start="231:17" pos:end="231:19">[<expr pos:start="231:18" pos:end="231:18"><literal type="number" pos:start="231:18" pos:end="231:18">0</literal></expr>]</index></name><operator pos:start="231:20" pos:end="231:20">.</operator><name pos:start="231:21" pos:end="231:26">stride</name> <operator pos:start="231:28" pos:end="231:28">=</operator> <name pos:start="231:30" pos:end="231:54"><name pos:start="231:30" pos:end="231:32">pic</name><operator pos:start="231:33" pos:end="231:34">-&gt;</operator><name pos:start="231:35" pos:end="231:41">avframe</name><operator pos:start="231:42" pos:end="231:43">-&gt;</operator><name pos:start="231:44" pos:end="231:51">linesize</name><index pos:start="231:52" pos:end="231:54">[<expr pos:start="231:53" pos:end="231:53"><literal type="number" pos:start="231:53" pos:end="231:53">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:55"><expr pos:start="233:9" pos:end="233:54"><name pos:start="233:9" pos:end="233:19"><name pos:start="233:9" pos:end="233:9">s</name><operator pos:start="233:10" pos:end="233:11">-&gt;</operator><name pos:start="233:12" pos:end="233:16">plane</name><index pos:start="233:17" pos:end="233:19">[<expr pos:start="233:18" pos:end="233:18"><literal type="number" pos:start="233:18" pos:end="233:18">1</literal></expr>]</index></name><operator pos:start="233:20" pos:end="233:20">.</operator><name pos:start="233:21" pos:end="233:26">stride</name> <operator pos:start="233:28" pos:end="233:28">=</operator> <name pos:start="233:30" pos:end="233:54"><name pos:start="233:30" pos:end="233:32">pic</name><operator pos:start="233:33" pos:end="233:34">-&gt;</operator><name pos:start="233:35" pos:end="233:41">avframe</name><operator pos:start="233:42" pos:end="233:43">-&gt;</operator><name pos:start="233:44" pos:end="233:51">linesize</name><index pos:start="233:52" pos:end="233:54">[<expr pos:start="233:53" pos:end="233:53"><literal type="number" pos:start="233:53" pos:end="233:53">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:55"><expr pos:start="235:9" pos:end="235:54"><name pos:start="235:9" pos:end="235:19"><name pos:start="235:9" pos:end="235:9">s</name><operator pos:start="235:10" pos:end="235:11">-&gt;</operator><name pos:start="235:12" pos:end="235:16">plane</name><index pos:start="235:17" pos:end="235:19">[<expr pos:start="235:18" pos:end="235:18"><literal type="number" pos:start="235:18" pos:end="235:18">2</literal></expr>]</index></name><operator pos:start="235:20" pos:end="235:20">.</operator><name pos:start="235:21" pos:end="235:26">stride</name> <operator pos:start="235:28" pos:end="235:28">=</operator> <name pos:start="235:30" pos:end="235:54"><name pos:start="235:30" pos:end="235:32">pic</name><operator pos:start="235:33" pos:end="235:34">-&gt;</operator><name pos:start="235:35" pos:end="235:41">avframe</name><operator pos:start="235:42" pos:end="235:43">-&gt;</operator><name pos:start="235:44" pos:end="235:51">linesize</name><index pos:start="235:52" pos:end="235:54">[<expr pos:start="235:53" pos:end="235:53"><literal type="number" pos:start="235:53" pos:end="235:53">2</literal></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="239:9" pos:end="241:35"><if pos:start="239:9" pos:end="241:35">if <condition pos:start="239:12" pos:end="239:122">(<expr pos:start="239:13" pos:end="239:121"><call pos:start="239:13" pos:end="239:117"><name pos:start="239:13" pos:end="239:25">alloc_buffers</name><argument_list pos:start="239:26" pos:end="239:117">(<argument pos:start="239:27" pos:end="239:27"><expr pos:start="239:27" pos:end="239:27"><name pos:start="239:27" pos:end="239:27">s</name></expr></argument>, <argument pos:start="239:30" pos:end="239:116"><expr pos:start="239:30" pos:end="239:116"><call pos:start="239:30" pos:end="239:116"><name pos:start="239:30" pos:end="239:35">FFMAX3</name><argument_list pos:start="239:36" pos:end="239:116">(<argument pos:start="239:37" pos:end="239:61"><expr pos:start="239:37" pos:end="239:61"><call pos:start="239:37" pos:end="239:61"><name pos:start="239:37" pos:end="239:41">FFABS</name><argument_list pos:start="239:42" pos:end="239:61">(<argument pos:start="239:43" pos:end="239:60"><expr pos:start="239:43" pos:end="239:60"><name pos:start="239:43" pos:end="239:53"><name pos:start="239:43" pos:end="239:43">s</name><operator pos:start="239:44" pos:end="239:45">-&gt;</operator><name pos:start="239:46" pos:end="239:50">plane</name><index pos:start="239:51" pos:end="239:53">[<expr pos:start="239:52" pos:end="239:52"><literal type="number" pos:start="239:52" pos:end="239:52">0</literal></expr>]</index></name><operator pos:start="239:54" pos:end="239:54">.</operator><name pos:start="239:55" pos:end="239:60">stride</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="239:64" pos:end="239:88"><expr pos:start="239:64" pos:end="239:88"><call pos:start="239:64" pos:end="239:88"><name pos:start="239:64" pos:end="239:68">FFABS</name><argument_list pos:start="239:69" pos:end="239:88">(<argument pos:start="239:70" pos:end="239:87"><expr pos:start="239:70" pos:end="239:87"><name pos:start="239:70" pos:end="239:80"><name pos:start="239:70" pos:end="239:70">s</name><operator pos:start="239:71" pos:end="239:72">-&gt;</operator><name pos:start="239:73" pos:end="239:77">plane</name><index pos:start="239:78" pos:end="239:80">[<expr pos:start="239:79" pos:end="239:79"><literal type="number" pos:start="239:79" pos:end="239:79">1</literal></expr>]</index></name><operator pos:start="239:81" pos:end="239:81">.</operator><name pos:start="239:82" pos:end="239:87">stride</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="239:91" pos:end="239:115"><expr pos:start="239:91" pos:end="239:115"><call pos:start="239:91" pos:end="239:115"><name pos:start="239:91" pos:end="239:95">FFABS</name><argument_list pos:start="239:96" pos:end="239:115">(<argument pos:start="239:97" pos:end="239:114"><expr pos:start="239:97" pos:end="239:114"><name pos:start="239:97" pos:end="239:107"><name pos:start="239:97" pos:end="239:97">s</name><operator pos:start="239:98" pos:end="239:99">-&gt;</operator><name pos:start="239:100" pos:end="239:104">plane</name><index pos:start="239:105" pos:end="239:107">[<expr pos:start="239:106" pos:end="239:106"><literal type="number" pos:start="239:106" pos:end="239:106">2</literal></expr>]</index></name><operator pos:start="239:108" pos:end="239:108">.</operator><name pos:start="239:109" pos:end="239:114">stride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="239:119" pos:end="239:119">&lt;</operator> <literal type="number" pos:start="239:121" pos:end="239:121">0</literal></expr>)</condition><block type="pseudo" pos:start="241:13" pos:end="241:35"><block_content pos:start="241:13" pos:end="241:35">

            <return pos:start="241:13" pos:end="241:35">return <expr pos:start="241:20" pos:end="241:34"><call pos:start="241:20" pos:end="241:34"><name pos:start="241:20" pos:end="241:26">AVERROR</name><argument_list pos:start="241:27" pos:end="241:34">(<argument pos:start="241:28" pos:end="241:33"><expr pos:start="241:28" pos:end="241:33"><name pos:start="241:28" pos:end="241:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="245:9" pos:end="245:61">/* [DIRAC_STD] 11.1 Picture parse. picture_parse() */</comment>

        <expr_stmt pos:start="247:9" pos:end="247:45"><expr pos:start="247:9" pos:end="247:44"><name pos:start="247:9" pos:end="247:11">ret</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <call pos:start="247:15" pos:end="247:44"><name pos:start="247:15" pos:end="247:41">dirac_decode_picture_header</name><argument_list pos:start="247:42" pos:end="247:44">(<argument pos:start="247:43" pos:end="247:43"><expr pos:start="247:43" pos:end="247:43"><name pos:start="247:43" pos:end="247:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="249:9" pos:end="251:23"><if pos:start="249:9" pos:end="251:23">if <condition pos:start="249:12" pos:end="249:20">(<expr pos:start="249:13" pos:end="249:19"><name pos:start="249:13" pos:end="249:15">ret</name> <operator pos:start="249:17" pos:end="249:17">&lt;</operator> <literal type="number" pos:start="249:19" pos:end="249:19">0</literal></expr>)</condition><block type="pseudo" pos:start="251:13" pos:end="251:23"><block_content pos:start="251:13" pos:end="251:23">

            <return pos:start="251:13" pos:end="251:23">return <expr pos:start="251:20" pos:end="251:22"><name pos:start="251:20" pos:end="251:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="255:9" pos:end="255:70">/* [DIRAC_STD] 13.0 Transform data syntax. transform_data() */</comment>

        <expr_stmt pos:start="257:9" pos:end="257:45"><expr pos:start="257:9" pos:end="257:44"><name pos:start="257:9" pos:end="257:11">ret</name> <operator pos:start="257:13" pos:end="257:13">=</operator> <call pos:start="257:15" pos:end="257:44"><name pos:start="257:15" pos:end="257:41">dirac_decode_frame_internal</name><argument_list pos:start="257:42" pos:end="257:44">(<argument pos:start="257:43" pos:end="257:43"><expr pos:start="257:43" pos:end="257:43"><name pos:start="257:43" pos:end="257:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="259:9" pos:end="261:23"><if pos:start="259:9" pos:end="261:23">if <condition pos:start="259:12" pos:end="259:20">(<expr pos:start="259:13" pos:end="259:19"><name pos:start="259:13" pos:end="259:15">ret</name> <operator pos:start="259:17" pos:end="259:17">&lt;</operator> <literal type="number" pos:start="259:19" pos:end="259:19">0</literal></expr>)</condition><block type="pseudo" pos:start="261:13" pos:end="261:23"><block_content pos:start="261:13" pos:end="261:23">

            <return pos:start="261:13" pos:end="261:23">return <expr pos:start="261:20" pos:end="261:22"><name pos:start="261:20" pos:end="261:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="265:5" pos:end="265:13">return <expr pos:start="265:12" pos:end="265:12"><literal type="number" pos:start="265:12" pos:end="265:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
