<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24403.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:32">mptsas_load_request</name><parameter_list pos:start="1:33" pos:end="1:64">(<parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:41">QEMUFile</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">f</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><name pos:start="1:47" pos:end="1:57">SCSIRequest</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">sreq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">SCSIBus</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">bus</name> <init pos:start="5:18" pos:end="5:28">= <expr pos:start="5:20" pos:end="5:28"><name pos:start="5:20" pos:end="5:28"><name pos:start="5:20" pos:end="5:23">sreq</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:28">bus</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">MPTSASState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:56">= <expr pos:start="7:22" pos:end="7:56"><call pos:start="7:22" pos:end="7:56"><name pos:start="7:22" pos:end="7:33">container_of</name><argument_list pos:start="7:34" pos:end="7:56">(<argument pos:start="7:35" pos:end="7:37"><expr pos:start="7:35" pos:end="7:37"><name pos:start="7:35" pos:end="7:37">bus</name></expr></argument>, <argument pos:start="7:40" pos:end="7:50"><expr pos:start="7:40" pos:end="7:50"><name pos:start="7:40" pos:end="7:50">MPTSASState</name></expr></argument>, <argument pos:start="7:53" pos:end="7:55"><expr pos:start="7:53" pos:end="7:55"><name pos:start="7:53" pos:end="7:55">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCIDevice</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">pci</name> <init pos:start="9:20" pos:end="9:34">= <expr pos:start="9:22" pos:end="9:34"><call pos:start="9:22" pos:end="9:34"><name pos:start="9:22" pos:end="9:31">PCI_DEVICE</name><argument_list pos:start="9:32" pos:end="9:34">(<argument pos:start="9:33" pos:end="9:33"><expr pos:start="9:33" pos:end="9:33"><name pos:start="9:33" pos:end="9:33">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">MPTSASRequest</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">n</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:7">req</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:33"><name pos:start="17:11" pos:end="17:15">g_new</name><argument_list pos:start="17:16" pos:end="17:33">(<argument pos:start="17:17" pos:end="17:29"><expr pos:start="17:17" pos:end="17:29"><name pos:start="17:17" pos:end="17:29">MPTSASRequest</name></expr></argument>, <argument pos:start="17:32" pos:end="17:32"><expr pos:start="17:32" pos:end="17:32"><literal type="number" pos:start="17:32" pos:end="17:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:77"><expr pos:start="19:5" pos:end="19:76"><call pos:start="19:5" pos:end="19:76"><name pos:start="19:5" pos:end="19:19">qemu_get_buffer</name><argument_list pos:start="19:20" pos:end="19:76">(<argument pos:start="19:21" pos:end="19:21"><expr pos:start="19:21" pos:end="19:21"><name pos:start="19:21" pos:end="19:21">f</name></expr></argument>, <argument pos:start="19:24" pos:end="19:53"><expr pos:start="19:24" pos:end="19:53"><operator pos:start="19:24" pos:end="19:24">(</operator><name pos:start="19:25" pos:end="19:32">unsigned</name> <name pos:start="19:34" pos:end="19:37">char</name> <operator pos:start="19:39" pos:end="19:39">*</operator><operator pos:start="19:40" pos:end="19:40">)</operator><operator pos:start="19:41" pos:end="19:41">&amp;</operator><name pos:start="19:42" pos:end="19:53"><name pos:start="19:42" pos:end="19:44">req</name><operator pos:start="19:45" pos:end="19:46">-&gt;</operator><name pos:start="19:47" pos:end="19:53">scsi_io</name></name></expr></argument>, <argument pos:start="19:56" pos:end="19:75"><expr pos:start="19:56" pos:end="19:75"><sizeof pos:start="19:56" pos:end="19:75">sizeof<argument_list pos:start="19:62" pos:end="19:75">(<argument pos:start="19:63" pos:end="19:74"><expr pos:start="19:63" pos:end="19:74"><name pos:start="19:63" pos:end="19:74"><name pos:start="19:63" pos:end="19:65">req</name><operator pos:start="19:66" pos:end="19:67">-&gt;</operator><name pos:start="19:68" pos:end="19:74">scsi_io</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="38:0"><expr pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:5">n</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:21">qemu_get_be32</name><argument_list pos:start="23:22" pos:end="23:24">(<argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><name pos:start="23:23" pos:end="23:23">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="31:7">/* TODO: add a way for SCSIBusInfo's load_request to fail,

     * and fail migration instead of asserting here.

     * When we do, we might be able to re-enable NDEBUG below.

     */</comment>

<cpp:ifdef pos:start="33:1" pos:end="33:13">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:13">NDEBUG</name></cpp:ifdef>

<cpp:error pos:start="35:1" pos:end="35:44">#<cpp:directive pos:start="35:2" pos:end="35:6">error</cpp:directive> building with NDEBUG is not supported</cpp:error>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="39:5" pos:end="39:19"><expr pos:start="39:5" pos:end="39:18"><call pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:18">(<argument pos:start="39:12" pos:end="39:17"><expr pos:start="39:12" pos:end="39:17"><name pos:start="39:12" pos:end="39:12">n</name> <operator pos:start="39:14" pos:end="39:15">&gt;=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:43"><expr pos:start="43:5" pos:end="43:42"><call pos:start="43:5" pos:end="43:42"><name pos:start="43:5" pos:end="43:23">pci_dma_sglist_init</name><argument_list pos:start="43:24" pos:end="43:42">(<argument pos:start="43:25" pos:end="43:33"><expr pos:start="43:25" pos:end="43:33"><operator pos:start="43:25" pos:end="43:25">&amp;</operator><name pos:start="43:26" pos:end="43:33"><name pos:start="43:26" pos:end="43:28">req</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:33">qsg</name></name></expr></argument>, <argument pos:start="43:36" pos:end="43:38"><expr pos:start="43:36" pos:end="43:38"><name pos:start="43:36" pos:end="43:38">pci</name></expr></argument>, <argument pos:start="43:41" pos:end="43:41"><expr pos:start="43:41" pos:end="43:41"><name pos:start="43:41" pos:end="43:41">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="45:5" pos:end="53:5">for <control pos:start="45:9" pos:end="45:27">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:21"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <name pos:start="45:21" pos:end="45:21">n</name></expr>;</condition> <incr pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:24">i</name><operator pos:start="45:25" pos:end="45:26">++</operator></expr></incr>)</control> <block pos:start="45:29" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:46">

        <decl_stmt pos:start="47:9" pos:end="47:41"><decl pos:start="47:9" pos:end="47:40"><type pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16">uint64_t</name></type> <name pos:start="47:18" pos:end="47:21">base</name> <init pos:start="47:23" pos:end="47:40">= <expr pos:start="47:25" pos:end="47:40"><call pos:start="47:25" pos:end="47:40"><name pos:start="47:25" pos:end="47:37">qemu_get_be64</name><argument_list pos:start="47:38" pos:end="47:40">(<argument pos:start="47:39" pos:end="47:39"><expr pos:start="47:39" pos:end="47:39"><name pos:start="47:39" pos:end="47:39">f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:40"><decl pos:start="49:9" pos:end="49:39"><type pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">uint64_t</name></type> <name pos:start="49:18" pos:end="49:20">len</name> <init pos:start="49:22" pos:end="49:39">= <expr pos:start="49:24" pos:end="49:39"><call pos:start="49:24" pos:end="49:39"><name pos:start="49:24" pos:end="49:36">qemu_get_be64</name><argument_list pos:start="49:37" pos:end="49:39">(<argument pos:start="49:38" pos:end="49:38"><expr pos:start="49:38" pos:end="49:38"><name pos:start="49:38" pos:end="49:38">f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:46"><expr pos:start="51:9" pos:end="51:45"><call pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:23">qemu_sglist_add</name><argument_list pos:start="51:24" pos:end="51:45">(<argument pos:start="51:25" pos:end="51:33"><expr pos:start="51:25" pos:end="51:33"><operator pos:start="51:25" pos:end="51:25">&amp;</operator><name pos:start="51:26" pos:end="51:33"><name pos:start="51:26" pos:end="51:28">req</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:33">qsg</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:39"><expr pos:start="51:36" pos:end="51:39"><name pos:start="51:36" pos:end="51:39">base</name></expr></argument>, <argument pos:start="51:42" pos:end="51:44"><expr pos:start="51:42" pos:end="51:44"><name pos:start="51:42" pos:end="51:44">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="57:5" pos:end="57:23"><expr pos:start="57:5" pos:end="57:22"><call pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:16">scsi_req_ref</name><argument_list pos:start="57:17" pos:end="57:22">(<argument pos:start="57:18" pos:end="57:21"><expr pos:start="57:18" pos:end="57:21"><name pos:start="57:18" pos:end="57:21">sreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:21"><expr pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:13"><name pos:start="59:5" pos:end="59:7">req</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:13">sreq</name></name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:20">sreq</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:17"><expr pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:12"><name pos:start="61:5" pos:end="61:7">req</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:12">dev</name></name> <operator pos:start="61:14" pos:end="61:14">=</operator> <name pos:start="61:16" pos:end="61:16">s</name></expr>;</expr_stmt>



    <return pos:start="65:5" pos:end="65:15">return <expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">req</name></expr>;</return>

</block_content>}</block></function>
</unit>
