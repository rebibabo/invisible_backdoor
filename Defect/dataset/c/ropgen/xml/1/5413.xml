<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5413.c" pos:tabs="8"><function pos:start="1:1" pos:end="439:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">alac_decode_frame</name><parameter_list pos:start="1:29" pos:end="5:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">outbuffer</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:61"><decl pos:start="3:47" pos:end="3:61"><type pos:start="3:47" pos:end="3:61"><name pos:start="3:47" pos:end="3:49">int</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:61">outputsize</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:44"><decl pos:start="5:30" pos:end="5:44"><type pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:37">AVPacket</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="439:1">{<block_content pos:start="9:5" pos:end="437:29">

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:27">inbuffer</name> <init pos:start="9:29" pos:end="9:41">= <expr pos:start="9:31" pos:end="9:41"><name pos:start="9:31" pos:end="9:41"><name pos:start="9:31" pos:end="9:35">avpkt</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:41">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:25">input_buffer_size</name> <init pos:start="11:27" pos:end="11:39">= <expr pos:start="11:29" pos:end="11:39"><name pos:start="11:29" pos:end="11:39"><name pos:start="11:29" pos:end="11:33">avpkt</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:39">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">ALACContext</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:21">alac</name> <init pos:start="13:23" pos:end="13:40">= <expr pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:29">avctx</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:40">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">channels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:30">outputsamples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">hassize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:32"><decl pos:start="23:5" pos:end="23:31"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:31">readsamplesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:23">isnotcompressed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">uint8_t</name></type> <name pos:start="27:13" pos:end="27:29">interlacing_shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:35"><decl pos:start="29:5" pos:end="29:34"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:11">uint8_t</name></type> <name pos:start="29:13" pos:end="29:34">interlacing_leftweight</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:36">/* short-circuit null buffers */</comment>

    <if_stmt pos:start="35:5" pos:end="37:33"><if pos:start="35:5" pos:end="37:33">if <condition pos:start="35:8" pos:end="35:40">(<expr pos:start="35:9" pos:end="35:39"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:17">inbuffer</name> <operator pos:start="35:19" pos:end="35:20">||</operator> <operator pos:start="35:22" pos:end="35:22">!</operator><name pos:start="35:23" pos:end="35:39">input_buffer_size</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:33"><block_content pos:start="37:9" pos:end="37:33">

        <return pos:start="37:9" pos:end="37:33">return <expr pos:start="37:16" pos:end="37:32"><name pos:start="37:16" pos:end="37:32">input_buffer_size</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:39">/* initialize from the extradata */</comment>

    <if_stmt pos:start="43:5" pos:end="65:5"><if pos:start="43:5" pos:end="65:5">if <condition pos:start="43:8" pos:end="43:35">(<expr pos:start="43:9" pos:end="43:34"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:34"><name pos:start="43:10" pos:end="43:13">alac</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:34">context_initialized</name></name></expr>)</condition> <block pos:start="43:37" pos:end="65:5">{<block_content pos:start="45:9" pos:end="63:38">

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:63">(<expr pos:start="45:13" pos:end="45:62"><name pos:start="45:13" pos:end="45:39"><name pos:start="45:13" pos:end="45:16">alac</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:23">avctx</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:39">extradata_size</name></name> <operator pos:start="45:41" pos:end="45:42">!=</operator> <name pos:start="45:44" pos:end="45:62">ALAC_EXTRADATA_SIZE</name></expr>)</condition> <block pos:start="45:65" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:37">

            <expr_stmt pos:start="47:13" pos:end="49:37"><expr pos:start="47:13" pos:end="49:36"><call pos:start="47:13" pos:end="49:36"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="49:36">(<argument pos:start="47:20" pos:end="47:24"><expr pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:24">avctx</name></expr></argument>, <argument pos:start="47:27" pos:end="47:38"><expr pos:start="47:27" pos:end="47:38"><name pos:start="47:27" pos:end="47:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:41" pos:end="47:77"><expr pos:start="47:41" pos:end="47:77"><literal type="string" pos:start="47:41" pos:end="47:77">"alac: expected %d extradata bytes\n"</literal></expr></argument>,

                <argument pos:start="49:17" pos:end="49:35"><expr pos:start="49:17" pos:end="49:35"><name pos:start="49:17" pos:end="49:35">ALAC_EXTRADATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:37">return <expr pos:start="51:20" pos:end="51:36"><name pos:start="51:20" pos:end="51:36">input_buffer_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:32">(<expr pos:start="55:13" pos:end="55:31"><call pos:start="55:13" pos:end="55:31"><name pos:start="55:13" pos:end="55:25">alac_set_info</name><argument_list pos:start="55:26" pos:end="55:31">(<argument pos:start="55:27" pos:end="55:30"><expr pos:start="55:27" pos:end="55:30"><name pos:start="55:27" pos:end="55:30">alac</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:34" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:37">

            <expr_stmt pos:start="57:13" pos:end="57:67"><expr pos:start="57:13" pos:end="57:66"><call pos:start="57:13" pos:end="57:66"><name pos:start="57:13" pos:end="57:18">av_log</name><argument_list pos:start="57:19" pos:end="57:66">(<argument pos:start="57:20" pos:end="57:24"><expr pos:start="57:20" pos:end="57:24"><name pos:start="57:20" pos:end="57:24">avctx</name></expr></argument>, <argument pos:start="57:27" pos:end="57:38"><expr pos:start="57:27" pos:end="57:38"><name pos:start="57:27" pos:end="57:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:41" pos:end="57:65"><expr pos:start="57:41" pos:end="57:65"><literal type="string" pos:start="57:41" pos:end="57:65">"alac: set_info failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:37">return <expr pos:start="59:20" pos:end="59:36"><name pos:start="59:20" pos:end="59:36">input_buffer_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:38"><expr pos:start="63:9" pos:end="63:37"><name pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:12">alac</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:33">context_initialized</name></name> <operator pos:start="63:35" pos:end="63:35">=</operator> <literal type="number" pos:start="63:37" pos:end="63:37">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:62"><expr pos:start="69:5" pos:end="69:61"><call pos:start="69:5" pos:end="69:61"><name pos:start="69:5" pos:end="69:17">init_get_bits</name><argument_list pos:start="69:18" pos:end="69:61">(<argument pos:start="69:19" pos:end="69:27"><expr pos:start="69:19" pos:end="69:27"><operator pos:start="69:19" pos:end="69:19">&amp;</operator><name pos:start="69:20" pos:end="69:27"><name pos:start="69:20" pos:end="69:23">alac</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:27">gb</name></name></expr></argument>, <argument pos:start="69:30" pos:end="69:37"><expr pos:start="69:30" pos:end="69:37"><name pos:start="69:30" pos:end="69:37">inbuffer</name></expr></argument>, <argument pos:start="69:40" pos:end="69:60"><expr pos:start="69:40" pos:end="69:60"><name pos:start="69:40" pos:end="69:56">input_buffer_size</name> <operator pos:start="69:58" pos:end="69:58">*</operator> <literal type="number" pos:start="69:60" pos:end="69:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:42"><expr pos:start="73:5" pos:end="73:41"><name pos:start="73:5" pos:end="73:12">channels</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="73:37"><name pos:start="73:16" pos:end="73:23">get_bits</name><argument_list pos:start="73:24" pos:end="73:37">(<argument pos:start="73:25" pos:end="73:33"><expr pos:start="73:25" pos:end="73:33"><operator pos:start="73:25" pos:end="73:25">&amp;</operator><name pos:start="73:26" pos:end="73:33"><name pos:start="73:26" pos:end="73:29">alac</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:33">gb</name></name></expr></argument>, <argument pos:start="73:36" pos:end="73:36"><expr pos:start="73:36" pos:end="73:36"><literal type="number" pos:start="73:36" pos:end="73:36">3</literal></expr></argument>)</argument_list></call> <operator pos:start="73:39" pos:end="73:39">+</operator> <literal type="number" pos:start="73:41" pos:end="73:41">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:32">(<expr pos:start="75:9" pos:end="75:31"><name pos:start="75:9" pos:end="75:16">channels</name> <operator pos:start="75:18" pos:end="75:18">&gt;</operator> <name pos:start="75:20" pos:end="75:31">MAX_CHANNELS</name></expr>)</condition> <block pos:start="75:34" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:33">

        <expr_stmt pos:start="77:9" pos:end="79:29"><expr pos:start="77:9" pos:end="79:28"><call pos:start="77:9" pos:end="79:28"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="79:28">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:67"><expr pos:start="77:37" pos:end="77:67"><literal type="string" pos:start="77:37" pos:end="77:67">"channels &gt; %d not supported\n"</literal></expr></argument>,

               <argument pos:start="79:16" pos:end="79:27"><expr pos:start="79:16" pos:end="79:27"><name pos:start="79:16" pos:end="79:27">MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:33">return <expr pos:start="81:16" pos:end="81:32"><name pos:start="81:16" pos:end="81:32">input_buffer_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="91:7">/* 2^result = something to do with output waiting.

     * perhaps matters if we read &gt; 1 frame in a pass?

     */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:28"><expr pos:start="93:5" pos:end="93:27"><call pos:start="93:5" pos:end="93:27"><name pos:start="93:5" pos:end="93:13">skip_bits</name><argument_list pos:start="93:14" pos:end="93:27">(<argument pos:start="93:15" pos:end="93:23"><expr pos:start="93:15" pos:end="93:23"><operator pos:start="93:15" pos:end="93:15">&amp;</operator><name pos:start="93:16" pos:end="93:23"><name pos:start="93:16" pos:end="93:19">alac</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:23">gb</name></name></expr></argument>, <argument pos:start="93:26" pos:end="93:26"><expr pos:start="93:26" pos:end="93:26"><literal type="number" pos:start="93:26" pos:end="93:26">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><call pos:start="97:5" pos:end="97:28"><name pos:start="97:5" pos:end="97:13">skip_bits</name><argument_list pos:start="97:14" pos:end="97:28">(<argument pos:start="97:15" pos:end="97:23"><expr pos:start="97:15" pos:end="97:23"><operator pos:start="97:15" pos:end="97:15">&amp;</operator><name pos:start="97:16" pos:end="97:23"><name pos:start="97:16" pos:end="97:19">alac</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:23">gb</name></name></expr></argument>, <argument pos:start="97:26" pos:end="97:27"><expr pos:start="97:26" pos:end="97:27"><literal type="number" pos:start="97:26" pos:end="97:27">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="97:31" pos:end="97:57">/* unknown, skip 12 bits */</comment>



    <comment type="block" pos:start="101:5" pos:end="101:47">/* the output sample size is stored soon */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:35"><expr pos:start="103:5" pos:end="103:34"><name pos:start="103:5" pos:end="103:11">hassize</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:34"><name pos:start="103:15" pos:end="103:23">get_bits1</name><argument_list pos:start="103:24" pos:end="103:34">(<argument pos:start="103:25" pos:end="103:33"><expr pos:start="103:25" pos:end="103:33"><operator pos:start="103:25" pos:end="103:25">&amp;</operator><name pos:start="103:26" pos:end="103:33"><name pos:start="103:26" pos:end="103:29">alac</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:52"><expr pos:start="107:5" pos:end="107:51"><name pos:start="107:5" pos:end="107:21"><name pos:start="107:5" pos:end="107:8">alac</name><operator pos:start="107:9" pos:end="107:10">-&gt;</operator><name pos:start="107:11" pos:end="107:21">wasted_bits</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <call pos:start="107:25" pos:end="107:46"><name pos:start="107:25" pos:end="107:32">get_bits</name><argument_list pos:start="107:33" pos:end="107:46">(<argument pos:start="107:34" pos:end="107:42"><expr pos:start="107:34" pos:end="107:42"><operator pos:start="107:34" pos:end="107:34">&amp;</operator><name pos:start="107:35" pos:end="107:42"><name pos:start="107:35" pos:end="107:38">alac</name><operator pos:start="107:39" pos:end="107:40">-&gt;</operator><name pos:start="107:41" pos:end="107:42">gb</name></name></expr></argument>, <argument pos:start="107:45" pos:end="107:45"><expr pos:start="107:45" pos:end="107:45"><literal type="number" pos:start="107:45" pos:end="107:45">2</literal></expr></argument>)</argument_list></call> <operator pos:start="107:48" pos:end="107:49">&lt;&lt;</operator> <literal type="number" pos:start="107:51" pos:end="107:51">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:41">/* whether the frame is compressed */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:43"><expr pos:start="113:5" pos:end="113:42"><name pos:start="113:5" pos:end="113:19">isnotcompressed</name> <operator pos:start="113:21" pos:end="113:21">=</operator> <call pos:start="113:23" pos:end="113:42"><name pos:start="113:23" pos:end="113:31">get_bits1</name><argument_list pos:start="113:32" pos:end="113:42">(<argument pos:start="113:33" pos:end="113:41"><expr pos:start="113:33" pos:end="113:41"><operator pos:start="113:33" pos:end="113:33">&amp;</operator><name pos:start="113:34" pos:end="113:41"><name pos:start="113:34" pos:end="113:37">alac</name><operator pos:start="113:38" pos:end="113:39">-&gt;</operator><name pos:start="113:40" pos:end="113:41">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="133:60"><if pos:start="117:5" pos:end="131:5">if <condition pos:start="117:8" pos:end="117:16">(<expr pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:15">hassize</name></expr>)</condition> <block pos:start="117:18" pos:end="131:5">{<block_content pos:start="121:9" pos:end="129:9">

        <comment type="block" pos:start="119:9" pos:end="119:63">/* now read the number of samples as a 32bit integer */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:53"><expr pos:start="121:9" pos:end="121:52"><name pos:start="121:9" pos:end="121:21">outputsamples</name> <operator pos:start="121:23" pos:end="121:23">=</operator> <call pos:start="121:25" pos:end="121:52"><name pos:start="121:25" pos:end="121:37">get_bits_long</name><argument_list pos:start="121:38" pos:end="121:52">(<argument pos:start="121:39" pos:end="121:47"><expr pos:start="121:39" pos:end="121:47"><operator pos:start="121:39" pos:end="121:39">&amp;</operator><name pos:start="121:40" pos:end="121:47"><name pos:start="121:40" pos:end="121:43">alac</name><operator pos:start="121:44" pos:end="121:45">-&gt;</operator><name pos:start="121:46" pos:end="121:47">gb</name></name></expr></argument>, <argument pos:start="121:50" pos:end="121:51"><expr pos:start="121:50" pos:end="121:51"><literal type="number" pos:start="121:50" pos:end="121:51">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="129:9"><if pos:start="123:9" pos:end="129:9">if<condition pos:start="123:11" pos:end="123:63">(<expr pos:start="123:12" pos:end="123:62"><name pos:start="123:12" pos:end="123:24">outputsamples</name> <operator pos:start="123:26" pos:end="123:26">&gt;</operator> <name pos:start="123:28" pos:end="123:62"><name pos:start="123:28" pos:end="123:31">alac</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:62">setinfo_max_samples_per_frame</name></name></expr>)</condition><block pos:start="123:64" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:22">

            <expr_stmt pos:start="125:13" pos:end="125:119"><expr pos:start="125:13" pos:end="125:118"><call pos:start="125:13" pos:end="125:118"><name pos:start="125:13" pos:end="125:18">av_log</name><argument_list pos:start="125:19" pos:end="125:118">(<argument pos:start="125:20" pos:end="125:24"><expr pos:start="125:20" pos:end="125:24"><name pos:start="125:20" pos:end="125:24">avctx</name></expr></argument>, <argument pos:start="125:27" pos:end="125:38"><expr pos:start="125:27" pos:end="125:38"><name pos:start="125:27" pos:end="125:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:41" pos:end="125:65"><expr pos:start="125:41" pos:end="125:65"><literal type="string" pos:start="125:41" pos:end="125:65">"outputsamples %d &gt; %d\n"</literal></expr></argument>, <argument pos:start="125:68" pos:end="125:80"><expr pos:start="125:68" pos:end="125:80"><name pos:start="125:68" pos:end="125:80">outputsamples</name></expr></argument>, <argument pos:start="125:83" pos:end="125:117"><expr pos:start="125:83" pos:end="125:117"><name pos:start="125:83" pos:end="125:117"><name pos:start="125:83" pos:end="125:86">alac</name><operator pos:start="125:87" pos:end="125:88">-&gt;</operator><name pos:start="125:89" pos:end="125:117">setinfo_max_samples_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="127:13" pos:end="127:22">return <expr pos:start="127:20" pos:end="127:21"><operator pos:start="127:20" pos:end="127:20">-</operator><literal type="number" pos:start="127:21" pos:end="127:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="133:60">else<block type="pseudo" pos:start="133:9" pos:end="133:60"><block_content pos:start="133:9" pos:end="133:60">

        <expr_stmt pos:start="133:9" pos:end="133:60"><expr pos:start="133:9" pos:end="133:59"><name pos:start="133:9" pos:end="133:21">outputsamples</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:59"><name pos:start="133:25" pos:end="133:28">alac</name><operator pos:start="133:29" pos:end="133:30">-&gt;</operator><name pos:start="133:31" pos:end="133:59">setinfo_max_samples_per_frame</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <switch pos:start="137:5" pos:end="157:5">switch <condition pos:start="137:12" pos:end="137:38">(<expr pos:start="137:13" pos:end="137:37"><name pos:start="137:13" pos:end="137:37"><name pos:start="137:13" pos:end="137:16">alac</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:37">setinfo_sample_size</name></name></expr>)</condition> <block pos:start="137:40" pos:end="157:5">{<block_content pos:start="139:5" pos:end="155:23">

    <case pos:start="139:5" pos:end="139:12">case <expr pos:start="139:10" pos:end="139:11"><literal type="number" pos:start="139:10" pos:end="139:11">16</literal></expr>:</case> <expr_stmt pos:start="139:14" pos:end="139:51"><expr pos:start="139:14" pos:end="139:50"><name pos:start="139:14" pos:end="139:30"><name pos:start="139:14" pos:end="139:18">avctx</name><operator pos:start="139:19" pos:end="139:20">-&gt;</operator><name pos:start="139:21" pos:end="139:30">sample_fmt</name></name>    <operator pos:start="139:35" pos:end="139:35">=</operator> <name pos:start="139:37" pos:end="139:50">SAMPLE_FMT_S16</name></expr>;</expr_stmt>

             <expr_stmt pos:start="141:14" pos:end="141:50"><expr pos:start="141:14" pos:end="141:49"><name pos:start="141:14" pos:end="141:33"><name pos:start="141:14" pos:end="141:17">alac</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:33">bytespersample</name></name> <operator pos:start="141:35" pos:end="141:35">=</operator> <name pos:start="141:37" pos:end="141:44">channels</name> <operator pos:start="141:46" pos:end="141:47">&lt;&lt;</operator> <literal type="number" pos:start="141:49" pos:end="141:49">1</literal></expr>;</expr_stmt>

             <break pos:start="143:14" pos:end="143:19">break;</break>

    <case pos:start="145:5" pos:end="145:12">case <expr pos:start="145:10" pos:end="145:11"><literal type="number" pos:start="145:10" pos:end="145:11">24</literal></expr>:</case> <expr_stmt pos:start="145:14" pos:end="145:51"><expr pos:start="145:14" pos:end="145:50"><name pos:start="145:14" pos:end="145:30"><name pos:start="145:14" pos:end="145:18">avctx</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:30">sample_fmt</name></name>    <operator pos:start="145:35" pos:end="145:35">=</operator> <name pos:start="145:37" pos:end="145:50">SAMPLE_FMT_S32</name></expr>;</expr_stmt>

             <expr_stmt pos:start="147:14" pos:end="147:50"><expr pos:start="147:14" pos:end="147:49"><name pos:start="147:14" pos:end="147:33"><name pos:start="147:14" pos:end="147:17">alac</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:33">bytespersample</name></name> <operator pos:start="147:35" pos:end="147:35">=</operator> <name pos:start="147:37" pos:end="147:44">channels</name> <operator pos:start="147:46" pos:end="147:47">&lt;&lt;</operator> <literal type="number" pos:start="147:49" pos:end="147:49">2</literal></expr>;</expr_stmt>

             <break pos:start="149:14" pos:end="149:19">break;</break>

    <default pos:start="151:5" pos:end="151:12">default:</default> <expr_stmt pos:start="151:14" pos:end="153:47"><expr pos:start="151:14" pos:end="153:46"><call pos:start="151:14" pos:end="153:46"><name pos:start="151:14" pos:end="151:19">av_log</name><argument_list pos:start="151:20" pos:end="153:46">(<argument pos:start="151:21" pos:end="151:25"><expr pos:start="151:21" pos:end="151:25"><name pos:start="151:21" pos:end="151:25">avctx</name></expr></argument>, <argument pos:start="151:28" pos:end="151:39"><expr pos:start="151:28" pos:end="151:39"><name pos:start="151:28" pos:end="151:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:42" pos:end="151:78"><expr pos:start="151:42" pos:end="151:78"><literal type="string" pos:start="151:42" pos:end="151:78">"Sample depth %d is not supported.\n"</literal></expr></argument>,

                    <argument pos:start="153:21" pos:end="153:45"><expr pos:start="153:21" pos:end="153:45"><name pos:start="153:21" pos:end="153:45"><name pos:start="153:21" pos:end="153:24">alac</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:45">setinfo_sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <return pos:start="155:14" pos:end="155:23">return <expr pos:start="155:21" pos:end="155:22"><operator pos:start="155:21" pos:end="155:21">-</operator><literal type="number" pos:start="155:22" pos:end="155:22">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if<condition pos:start="161:7" pos:end="161:58">(<expr pos:start="161:8" pos:end="161:57"><name pos:start="161:8" pos:end="161:20">outputsamples</name> <operator pos:start="161:22" pos:end="161:22">&gt;</operator> <operator pos:start="161:24" pos:end="161:24">*</operator><name pos:start="161:25" pos:end="161:34">outputsize</name> <operator pos:start="161:36" pos:end="161:36">/</operator> <name pos:start="161:38" pos:end="161:57"><name pos:start="161:38" pos:end="161:41">alac</name><operator pos:start="161:42" pos:end="161:43">-&gt;</operator><name pos:start="161:44" pos:end="161:57">bytespersample</name></name></expr>)</condition><block pos:start="161:59" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:18">

        <expr_stmt pos:start="163:9" pos:end="163:65"><expr pos:start="163:9" pos:end="163:64"><call pos:start="163:9" pos:end="163:64"><name pos:start="163:9" pos:end="163:14">av_log</name><argument_list pos:start="163:15" pos:end="163:64">(<argument pos:start="163:16" pos:end="163:20"><expr pos:start="163:16" pos:end="163:20"><name pos:start="163:16" pos:end="163:20">avctx</name></expr></argument>, <argument pos:start="163:23" pos:end="163:34"><expr pos:start="163:23" pos:end="163:34"><name pos:start="163:23" pos:end="163:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:37" pos:end="163:63"><expr pos:start="163:37" pos:end="163:63"><literal type="string" pos:start="163:37" pos:end="163:63">"sample buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="165:9" pos:end="165:18">return <expr pos:start="165:16" pos:end="165:17"><operator pos:start="165:16" pos:end="165:16">-</operator><literal type="number" pos:start="165:17" pos:end="165:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:55"><expr pos:start="171:5" pos:end="171:54"><operator pos:start="171:5" pos:end="171:5">*</operator><name pos:start="171:6" pos:end="171:15">outputsize</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <name pos:start="171:19" pos:end="171:31">outputsamples</name> <operator pos:start="171:33" pos:end="171:33">*</operator> <name pos:start="171:35" pos:end="171:54"><name pos:start="171:35" pos:end="171:38">alac</name><operator pos:start="171:39" pos:end="171:40">-&gt;</operator><name pos:start="171:41" pos:end="171:54">bytespersample</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:84"><expr pos:start="173:5" pos:end="173:83"><name pos:start="173:5" pos:end="173:18">readsamplesize</name> <operator pos:start="173:20" pos:end="173:20">=</operator> <name pos:start="173:22" pos:end="173:46"><name pos:start="173:22" pos:end="173:25">alac</name><operator pos:start="173:26" pos:end="173:27">-&gt;</operator><name pos:start="173:28" pos:end="173:46">setinfo_sample_size</name></name> <operator pos:start="173:48" pos:end="173:48">-</operator> <operator pos:start="173:50" pos:end="173:50">(</operator><name pos:start="173:51" pos:end="173:67"><name pos:start="173:51" pos:end="173:54">alac</name><operator pos:start="173:55" pos:end="173:56">-&gt;</operator><name pos:start="173:57" pos:end="173:67">wasted_bits</name></name><operator pos:start="173:68" pos:end="173:68">)</operator> <operator pos:start="173:70" pos:end="173:70">+</operator> <name pos:start="173:72" pos:end="173:79">channels</name> <operator pos:start="173:81" pos:end="173:81">-</operator> <literal type="number" pos:start="173:83" pos:end="173:83">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="181:5"><if pos:start="175:5" pos:end="181:5">if <condition pos:start="175:8" pos:end="175:40">(<expr pos:start="175:9" pos:end="175:39"><name pos:start="175:9" pos:end="175:22">readsamplesize</name> <operator pos:start="175:24" pos:end="175:24">&gt;</operator> <name pos:start="175:26" pos:end="175:39">MIN_CACHE_BITS</name></expr>)</condition> <block pos:start="175:42" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:18">

        <expr_stmt pos:start="177:9" pos:end="177:85"><expr pos:start="177:9" pos:end="177:84"><call pos:start="177:9" pos:end="177:84"><name pos:start="177:9" pos:end="177:14">av_log</name><argument_list pos:start="177:15" pos:end="177:84">(<argument pos:start="177:16" pos:end="177:20"><expr pos:start="177:16" pos:end="177:20"><name pos:start="177:16" pos:end="177:20">avctx</name></expr></argument>, <argument pos:start="177:23" pos:end="177:34"><expr pos:start="177:23" pos:end="177:34"><name pos:start="177:23" pos:end="177:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="177:37" pos:end="177:67"><expr pos:start="177:37" pos:end="177:67"><literal type="string" pos:start="177:37" pos:end="177:67">"readsamplesize too big (%d)\n"</literal></expr></argument>, <argument pos:start="177:70" pos:end="177:83"><expr pos:start="177:70" pos:end="177:83"><name pos:start="177:70" pos:end="177:83">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="179:9" pos:end="179:18">return <expr pos:start="179:16" pos:end="179:17"><operator pos:start="179:16" pos:end="179:16">-</operator><literal type="number" pos:start="179:17" pos:end="179:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="185:5" pos:end="355:5"><if pos:start="185:5" pos:end="305:5">if <condition pos:start="185:8" pos:end="185:25">(<expr pos:start="185:9" pos:end="185:24"><operator pos:start="185:9" pos:end="185:9">!</operator><name pos:start="185:10" pos:end="185:24">isnotcompressed</name></expr>)</condition> <block pos:start="185:27" pos:end="305:5">{<block_content pos:start="189:9" pos:end="303:9">

        <comment type="block" pos:start="187:9" pos:end="187:33">/* so it is compressed */</comment>

        <decl_stmt pos:start="189:9" pos:end="189:55"><decl pos:start="189:9" pos:end="189:54"><type pos:start="189:9" pos:end="189:15"><name pos:start="189:9" pos:end="189:15">int16_t</name></type> <name pos:start="189:17" pos:end="189:54"><name pos:start="189:17" pos:end="189:36">predictor_coef_table</name><index pos:start="189:37" pos:end="189:50">[<expr pos:start="189:38" pos:end="189:49"><name pos:start="189:38" pos:end="189:49">MAX_CHANNELS</name></expr>]</index><index pos:start="189:51" pos:end="189:54">[<expr pos:start="189:52" pos:end="189:53"><literal type="number" pos:start="189:52" pos:end="189:53">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="191:9" pos:end="191:45"><decl pos:start="191:9" pos:end="191:44"><type pos:start="191:9" pos:end="191:11"><name pos:start="191:9" pos:end="191:11">int</name></type> <name pos:start="191:13" pos:end="191:44"><name pos:start="191:13" pos:end="191:30">predictor_coef_num</name><index pos:start="191:31" pos:end="191:44">[<expr pos:start="191:32" pos:end="191:43"><name pos:start="191:32" pos:end="191:43">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="193:9" pos:end="193:42"><decl pos:start="193:9" pos:end="193:41"><type pos:start="193:9" pos:end="193:11"><name pos:start="193:9" pos:end="193:11">int</name></type> <name pos:start="193:13" pos:end="193:41"><name pos:start="193:13" pos:end="193:27">prediction_type</name><index pos:start="193:28" pos:end="193:41">[<expr pos:start="193:29" pos:end="193:40"><name pos:start="193:29" pos:end="193:40">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="195:9" pos:end="195:52"><decl pos:start="195:9" pos:end="195:51"><type pos:start="195:9" pos:end="195:11"><name pos:start="195:9" pos:end="195:11">int</name></type> <name pos:start="195:13" pos:end="195:51"><name pos:start="195:13" pos:end="195:37">prediction_quantitization</name><index pos:start="195:38" pos:end="195:51">[<expr pos:start="195:39" pos:end="195:50"><name pos:start="195:39" pos:end="195:50">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="197:9" pos:end="197:39"><decl pos:start="197:9" pos:end="197:38"><type pos:start="197:9" pos:end="197:11"><name pos:start="197:9" pos:end="197:11">int</name></type> <name pos:start="197:13" pos:end="197:38"><name pos:start="197:13" pos:end="197:24">ricemodifier</name><index pos:start="197:25" pos:end="197:38">[<expr pos:start="197:26" pos:end="197:37"><name pos:start="197:26" pos:end="197:37">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="199:9" pos:end="199:20"><decl pos:start="199:9" pos:end="199:13"><type pos:start="199:9" pos:end="199:11"><name pos:start="199:9" pos:end="199:11">int</name></type> <name pos:start="199:13" pos:end="199:13">i</name></decl>, <decl pos:start="199:16" pos:end="199:19"><type ref="prev" pos:start="199:9" pos:end="199:11"/><name pos:start="199:16" pos:end="199:19">chan</name></decl>;</decl_stmt>



        <expr_stmt pos:start="203:9" pos:end="203:51"><expr pos:start="203:9" pos:end="203:50"><name pos:start="203:9" pos:end="203:25">interlacing_shift</name> <operator pos:start="203:27" pos:end="203:27">=</operator> <call pos:start="203:29" pos:end="203:50"><name pos:start="203:29" pos:end="203:36">get_bits</name><argument_list pos:start="203:37" pos:end="203:50">(<argument pos:start="203:38" pos:end="203:46"><expr pos:start="203:38" pos:end="203:46"><operator pos:start="203:38" pos:end="203:38">&amp;</operator><name pos:start="203:39" pos:end="203:46"><name pos:start="203:39" pos:end="203:42">alac</name><operator pos:start="203:43" pos:end="203:44">-&gt;</operator><name pos:start="203:45" pos:end="203:46">gb</name></name></expr></argument>, <argument pos:start="203:49" pos:end="203:49"><expr pos:start="203:49" pos:end="203:49"><literal type="number" pos:start="203:49" pos:end="203:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:56"><expr pos:start="205:9" pos:end="205:55"><name pos:start="205:9" pos:end="205:30">interlacing_leftweight</name> <operator pos:start="205:32" pos:end="205:32">=</operator> <call pos:start="205:34" pos:end="205:55"><name pos:start="205:34" pos:end="205:41">get_bits</name><argument_list pos:start="205:42" pos:end="205:55">(<argument pos:start="205:43" pos:end="205:51"><expr pos:start="205:43" pos:end="205:51"><operator pos:start="205:43" pos:end="205:43">&amp;</operator><name pos:start="205:44" pos:end="205:51"><name pos:start="205:44" pos:end="205:47">alac</name><operator pos:start="205:48" pos:end="205:49">-&gt;</operator><name pos:start="205:50" pos:end="205:51">gb</name></name></expr></argument>, <argument pos:start="205:54" pos:end="205:54"><expr pos:start="205:54" pos:end="205:54"><literal type="number" pos:start="205:54" pos:end="205:54">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="209:9" pos:end="229:9">for <control pos:start="209:13" pos:end="209:47">(<init pos:start="209:14" pos:end="209:22"><expr pos:start="209:14" pos:end="209:21"><name pos:start="209:14" pos:end="209:17">chan</name> <operator pos:start="209:19" pos:end="209:19">=</operator> <literal type="number" pos:start="209:21" pos:end="209:21">0</literal></expr>;</init> <condition pos:start="209:24" pos:end="209:39"><expr pos:start="209:24" pos:end="209:38"><name pos:start="209:24" pos:end="209:27">chan</name> <operator pos:start="209:29" pos:end="209:29">&lt;</operator> <name pos:start="209:31" pos:end="209:38">channels</name></expr>;</condition> <incr pos:start="209:41" pos:end="209:46"><expr pos:start="209:41" pos:end="209:46"><name pos:start="209:41" pos:end="209:44">chan</name><operator pos:start="209:45" pos:end="209:46">++</operator></expr></incr>)</control> <block pos:start="209:49" pos:end="229:9">{<block_content pos:start="211:13" pos:end="227:81">

            <expr_stmt pos:start="211:13" pos:end="211:59"><expr pos:start="211:13" pos:end="211:58"><name pos:start="211:13" pos:end="211:33"><name pos:start="211:13" pos:end="211:27">prediction_type</name><index pos:start="211:28" pos:end="211:33">[<expr pos:start="211:29" pos:end="211:32"><name pos:start="211:29" pos:end="211:32">chan</name></expr>]</index></name> <operator pos:start="211:35" pos:end="211:35">=</operator> <call pos:start="211:37" pos:end="211:58"><name pos:start="211:37" pos:end="211:44">get_bits</name><argument_list pos:start="211:45" pos:end="211:58">(<argument pos:start="211:46" pos:end="211:54"><expr pos:start="211:46" pos:end="211:54"><operator pos:start="211:46" pos:end="211:46">&amp;</operator><name pos:start="211:47" pos:end="211:54"><name pos:start="211:47" pos:end="211:50">alac</name><operator pos:start="211:51" pos:end="211:52">-&gt;</operator><name pos:start="211:53" pos:end="211:54">gb</name></name></expr></argument>, <argument pos:start="211:57" pos:end="211:57"><expr pos:start="211:57" pos:end="211:57"><literal type="number" pos:start="211:57" pos:end="211:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:69"><expr pos:start="213:13" pos:end="213:68"><name pos:start="213:13" pos:end="213:43"><name pos:start="213:13" pos:end="213:37">prediction_quantitization</name><index pos:start="213:38" pos:end="213:43">[<expr pos:start="213:39" pos:end="213:42"><name pos:start="213:39" pos:end="213:42">chan</name></expr>]</index></name> <operator pos:start="213:45" pos:end="213:45">=</operator> <call pos:start="213:47" pos:end="213:68"><name pos:start="213:47" pos:end="213:54">get_bits</name><argument_list pos:start="213:55" pos:end="213:68">(<argument pos:start="213:56" pos:end="213:64"><expr pos:start="213:56" pos:end="213:64"><operator pos:start="213:56" pos:end="213:56">&amp;</operator><name pos:start="213:57" pos:end="213:64"><name pos:start="213:57" pos:end="213:60">alac</name><operator pos:start="213:61" pos:end="213:62">-&gt;</operator><name pos:start="213:63" pos:end="213:64">gb</name></name></expr></argument>, <argument pos:start="213:67" pos:end="213:67"><expr pos:start="213:67" pos:end="213:67"><literal type="number" pos:start="213:67" pos:end="213:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="217:13" pos:end="217:56"><expr pos:start="217:13" pos:end="217:55"><name pos:start="217:13" pos:end="217:30"><name pos:start="217:13" pos:end="217:24">ricemodifier</name><index pos:start="217:25" pos:end="217:30">[<expr pos:start="217:26" pos:end="217:29"><name pos:start="217:26" pos:end="217:29">chan</name></expr>]</index></name> <operator pos:start="217:32" pos:end="217:32">=</operator> <call pos:start="217:34" pos:end="217:55"><name pos:start="217:34" pos:end="217:41">get_bits</name><argument_list pos:start="217:42" pos:end="217:55">(<argument pos:start="217:43" pos:end="217:51"><expr pos:start="217:43" pos:end="217:51"><operator pos:start="217:43" pos:end="217:43">&amp;</operator><name pos:start="217:44" pos:end="217:51"><name pos:start="217:44" pos:end="217:47">alac</name><operator pos:start="217:48" pos:end="217:49">-&gt;</operator><name pos:start="217:50" pos:end="217:51">gb</name></name></expr></argument>, <argument pos:start="217:54" pos:end="217:54"><expr pos:start="217:54" pos:end="217:54"><literal type="number" pos:start="217:54" pos:end="217:54">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:62"><expr pos:start="219:13" pos:end="219:61"><name pos:start="219:13" pos:end="219:36"><name pos:start="219:13" pos:end="219:30">predictor_coef_num</name><index pos:start="219:31" pos:end="219:36">[<expr pos:start="219:32" pos:end="219:35"><name pos:start="219:32" pos:end="219:35">chan</name></expr>]</index></name> <operator pos:start="219:38" pos:end="219:38">=</operator> <call pos:start="219:40" pos:end="219:61"><name pos:start="219:40" pos:end="219:47">get_bits</name><argument_list pos:start="219:48" pos:end="219:61">(<argument pos:start="219:49" pos:end="219:57"><expr pos:start="219:49" pos:end="219:57"><operator pos:start="219:49" pos:end="219:49">&amp;</operator><name pos:start="219:50" pos:end="219:57"><name pos:start="219:50" pos:end="219:53">alac</name><operator pos:start="219:54" pos:end="219:55">-&gt;</operator><name pos:start="219:56" pos:end="219:57">gb</name></name></expr></argument>, <argument pos:start="219:60" pos:end="219:60"><expr pos:start="219:60" pos:end="219:60"><literal type="number" pos:start="219:60" pos:end="219:60">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="223:13" pos:end="223:42">/* read the predictor table */</comment>

            <for pos:start="225:13" pos:end="227:81">for <control pos:start="225:17" pos:end="225:58">(<init pos:start="225:18" pos:end="225:23"><expr pos:start="225:18" pos:end="225:22"><name pos:start="225:18" pos:end="225:18">i</name> <operator pos:start="225:20" pos:end="225:20">=</operator> <literal type="number" pos:start="225:22" pos:end="225:22">0</literal></expr>;</init> <condition pos:start="225:25" pos:end="225:53"><expr pos:start="225:25" pos:end="225:52"><name pos:start="225:25" pos:end="225:25">i</name> <operator pos:start="225:27" pos:end="225:27">&lt;</operator> <name pos:start="225:29" pos:end="225:52"><name pos:start="225:29" pos:end="225:46">predictor_coef_num</name><index pos:start="225:47" pos:end="225:52">[<expr pos:start="225:48" pos:end="225:51"><name pos:start="225:48" pos:end="225:51">chan</name></expr>]</index></name></expr>;</condition> <incr pos:start="225:55" pos:end="225:57"><expr pos:start="225:55" pos:end="225:57"><name pos:start="225:55" pos:end="225:55">i</name><operator pos:start="225:56" pos:end="225:57">++</operator></expr></incr>)</control><block type="pseudo" pos:start="227:17" pos:end="227:81"><block_content pos:start="227:17" pos:end="227:81">

                <expr_stmt pos:start="227:17" pos:end="227:81"><expr pos:start="227:17" pos:end="227:80"><name pos:start="227:17" pos:end="227:45"><name pos:start="227:17" pos:end="227:36">predictor_coef_table</name><index pos:start="227:37" pos:end="227:42">[<expr pos:start="227:38" pos:end="227:41"><name pos:start="227:38" pos:end="227:41">chan</name></expr>]</index><index pos:start="227:43" pos:end="227:45">[<expr pos:start="227:44" pos:end="227:44"><name pos:start="227:44" pos:end="227:44">i</name></expr>]</index></name> <operator pos:start="227:47" pos:end="227:47">=</operator> <operator pos:start="227:49" pos:end="227:49">(</operator><name pos:start="227:50" pos:end="227:56">int16_t</name><operator pos:start="227:57" pos:end="227:57">)</operator><call pos:start="227:58" pos:end="227:80"><name pos:start="227:58" pos:end="227:65">get_bits</name><argument_list pos:start="227:66" pos:end="227:80">(<argument pos:start="227:67" pos:end="227:75"><expr pos:start="227:67" pos:end="227:75"><operator pos:start="227:67" pos:end="227:67">&amp;</operator><name pos:start="227:68" pos:end="227:75"><name pos:start="227:68" pos:end="227:71">alac</name><operator pos:start="227:72" pos:end="227:73">-&gt;</operator><name pos:start="227:74" pos:end="227:75">gb</name></name></expr></argument>, <argument pos:start="227:78" pos:end="227:79"><expr pos:start="227:78" pos:end="227:79"><literal type="number" pos:start="227:78" pos:end="227:79">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="233:9" pos:end="245:9"><if pos:start="233:9" pos:end="245:9">if <condition pos:start="233:12" pos:end="233:30">(<expr pos:start="233:13" pos:end="233:29"><name pos:start="233:13" pos:end="233:29"><name pos:start="233:13" pos:end="233:16">alac</name><operator pos:start="233:17" pos:end="233:18">-&gt;</operator><name pos:start="233:19" pos:end="233:29">wasted_bits</name></name></expr>)</condition> <block pos:start="233:32" pos:end="245:9">{<block_content pos:start="235:13" pos:end="243:13">

            <decl_stmt pos:start="235:13" pos:end="235:22"><decl pos:start="235:13" pos:end="235:17"><type pos:start="235:13" pos:end="235:15"><name pos:start="235:13" pos:end="235:15">int</name></type> <name pos:start="235:17" pos:end="235:17">i</name></decl>, <decl pos:start="235:20" pos:end="235:21"><type ref="prev" pos:start="235:13" pos:end="235:15"/><name pos:start="235:20" pos:end="235:21">ch</name></decl>;</decl_stmt>

            <for pos:start="237:13" pos:end="243:13">for <control pos:start="237:17" pos:end="237:47">(<init pos:start="237:18" pos:end="237:23"><expr pos:start="237:18" pos:end="237:22"><name pos:start="237:18" pos:end="237:18">i</name> <operator pos:start="237:20" pos:end="237:20">=</operator> <literal type="number" pos:start="237:22" pos:end="237:22">0</literal></expr>;</init> <condition pos:start="237:25" pos:end="237:42"><expr pos:start="237:25" pos:end="237:41"><name pos:start="237:25" pos:end="237:25">i</name> <operator pos:start="237:27" pos:end="237:27">&lt;</operator> <name pos:start="237:29" pos:end="237:41">outputsamples</name></expr>;</condition> <incr pos:start="237:44" pos:end="237:46"><expr pos:start="237:44" pos:end="237:46"><name pos:start="237:44" pos:end="237:44">i</name><operator pos:start="237:45" pos:end="237:46">++</operator></expr></incr>)</control> <block pos:start="237:49" pos:end="243:13">{<block_content pos:start="239:17" pos:end="241:93">

                <for pos:start="239:17" pos:end="241:93">for <control pos:start="239:21" pos:end="239:49">(<init pos:start="239:22" pos:end="239:28"><expr pos:start="239:22" pos:end="239:27"><name pos:start="239:22" pos:end="239:23">ch</name> <operator pos:start="239:25" pos:end="239:25">=</operator> <literal type="number" pos:start="239:27" pos:end="239:27">0</literal></expr>;</init> <condition pos:start="239:30" pos:end="239:43"><expr pos:start="239:30" pos:end="239:42"><name pos:start="239:30" pos:end="239:31">ch</name> <operator pos:start="239:33" pos:end="239:33">&lt;</operator> <name pos:start="239:35" pos:end="239:42">channels</name></expr>;</condition> <incr pos:start="239:45" pos:end="239:48"><expr pos:start="239:45" pos:end="239:48"><name pos:start="239:45" pos:end="239:46">ch</name><operator pos:start="239:47" pos:end="239:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="241:21" pos:end="241:93"><block_content pos:start="241:21" pos:end="241:93">

                    <expr_stmt pos:start="241:21" pos:end="241:93"><expr pos:start="241:21" pos:end="241:92"><name pos:start="241:21" pos:end="241:51"><name pos:start="241:21" pos:end="241:24">alac</name><operator pos:start="241:25" pos:end="241:26">-&gt;</operator><name pos:start="241:27" pos:end="241:44">wasted_bits_buffer</name><index pos:start="241:45" pos:end="241:48">[<expr pos:start="241:46" pos:end="241:47"><name pos:start="241:46" pos:end="241:47">ch</name></expr>]</index><index pos:start="241:49" pos:end="241:51">[<expr pos:start="241:50" pos:end="241:50"><name pos:start="241:50" pos:end="241:50">i</name></expr>]</index></name> <operator pos:start="241:53" pos:end="241:53">=</operator> <call pos:start="241:55" pos:end="241:92"><name pos:start="241:55" pos:end="241:62">get_bits</name><argument_list pos:start="241:63" pos:end="241:92">(<argument pos:start="241:64" pos:end="241:72"><expr pos:start="241:64" pos:end="241:72"><operator pos:start="241:64" pos:end="241:64">&amp;</operator><name pos:start="241:65" pos:end="241:72"><name pos:start="241:65" pos:end="241:68">alac</name><operator pos:start="241:69" pos:end="241:70">-&gt;</operator><name pos:start="241:71" pos:end="241:72">gb</name></name></expr></argument>, <argument pos:start="241:75" pos:end="241:91"><expr pos:start="241:75" pos:end="241:91"><name pos:start="241:75" pos:end="241:91"><name pos:start="241:75" pos:end="241:78">alac</name><operator pos:start="241:79" pos:end="241:80">-&gt;</operator><name pos:start="241:81" pos:end="241:91">wasted_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <for pos:start="247:9" pos:end="303:9">for <control pos:start="247:13" pos:end="247:47">(<init pos:start="247:14" pos:end="247:22"><expr pos:start="247:14" pos:end="247:21"><name pos:start="247:14" pos:end="247:17">chan</name> <operator pos:start="247:19" pos:end="247:19">=</operator> <literal type="number" pos:start="247:21" pos:end="247:21">0</literal></expr>;</init> <condition pos:start="247:24" pos:end="247:39"><expr pos:start="247:24" pos:end="247:38"><name pos:start="247:24" pos:end="247:27">chan</name> <operator pos:start="247:29" pos:end="247:29">&lt;</operator> <name pos:start="247:31" pos:end="247:38">channels</name></expr>;</condition> <incr pos:start="247:41" pos:end="247:46"><expr pos:start="247:41" pos:end="247:46"><name pos:start="247:41" pos:end="247:44">chan</name><operator pos:start="247:45" pos:end="247:46">++</operator></expr></incr>)</control> <block pos:start="247:49" pos:end="303:9">{<block_content pos:start="249:13" pos:end="301:13">

            <expr_stmt pos:start="249:13" pos:end="263:81"><expr pos:start="249:13" pos:end="263:80"><call pos:start="249:13" pos:end="263:80"><name pos:start="249:13" pos:end="249:39">bastardized_rice_decompress</name><argument_list pos:start="249:40" pos:end="263:80">(<argument pos:start="249:41" pos:end="249:44"><expr pos:start="249:41" pos:end="249:44"><name pos:start="249:41" pos:end="249:44">alac</name></expr></argument>,

                                        <argument pos:start="251:41" pos:end="251:71"><expr pos:start="251:41" pos:end="251:71"><name pos:start="251:41" pos:end="251:71"><name pos:start="251:41" pos:end="251:44">alac</name><operator pos:start="251:45" pos:end="251:46">-&gt;</operator><name pos:start="251:47" pos:end="251:65">predicterror_buffer</name><index pos:start="251:66" pos:end="251:71">[<expr pos:start="251:67" pos:end="251:70"><name pos:start="251:67" pos:end="251:70">chan</name></expr>]</index></name></expr></argument>,

                                        <argument pos:start="253:41" pos:end="253:53"><expr pos:start="253:41" pos:end="253:53"><name pos:start="253:41" pos:end="253:53">outputsamples</name></expr></argument>,

                                        <argument pos:start="255:41" pos:end="255:54"><expr pos:start="255:41" pos:end="255:54"><name pos:start="255:41" pos:end="255:54">readsamplesize</name></expr></argument>,

                                        <argument pos:start="257:41" pos:end="257:73"><expr pos:start="257:41" pos:end="257:73"><name pos:start="257:41" pos:end="257:73"><name pos:start="257:41" pos:end="257:44">alac</name><operator pos:start="257:45" pos:end="257:46">-&gt;</operator><name pos:start="257:47" pos:end="257:73">setinfo_rice_initialhistory</name></name></expr></argument>,

                                        <argument pos:start="259:41" pos:end="259:68"><expr pos:start="259:41" pos:end="259:68"><name pos:start="259:41" pos:end="259:68"><name pos:start="259:41" pos:end="259:44">alac</name><operator pos:start="259:45" pos:end="259:46">-&gt;</operator><name pos:start="259:47" pos:end="259:68">setinfo_rice_kmodifier</name></name></expr></argument>,

                                        <argument pos:start="261:41" pos:end="261:95"><expr pos:start="261:41" pos:end="261:95"><name pos:start="261:41" pos:end="261:58"><name pos:start="261:41" pos:end="261:52">ricemodifier</name><index pos:start="261:53" pos:end="261:58">[<expr pos:start="261:54" pos:end="261:57"><name pos:start="261:54" pos:end="261:57">chan</name></expr>]</index></name> <operator pos:start="261:60" pos:end="261:60">*</operator> <name pos:start="261:62" pos:end="261:91"><name pos:start="261:62" pos:end="261:65">alac</name><operator pos:start="261:66" pos:end="261:67">-&gt;</operator><name pos:start="261:68" pos:end="261:91">setinfo_rice_historymult</name></name> <operator pos:start="261:93" pos:end="261:93">/</operator> <literal type="number" pos:start="261:95" pos:end="261:95">4</literal></expr></argument>,

                                        <argument pos:start="263:41" pos:end="263:79"><expr pos:start="263:41" pos:end="263:79"><operator pos:start="263:41" pos:end="263:41">(</operator><literal type="number" pos:start="263:42" pos:end="263:42">1</literal> <operator pos:start="263:44" pos:end="263:45">&lt;&lt;</operator> <name pos:start="263:47" pos:end="263:74"><name pos:start="263:47" pos:end="263:50">alac</name><operator pos:start="263:51" pos:end="263:52">-&gt;</operator><name pos:start="263:53" pos:end="263:74">setinfo_rice_kmodifier</name></name><operator pos:start="263:75" pos:end="263:75">)</operator> <operator pos:start="263:77" pos:end="263:77">-</operator> <literal type="number" pos:start="263:79" pos:end="263:79">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="267:13" pos:end="301:13"><if pos:start="267:13" pos:end="285:13">if <condition pos:start="267:16" pos:end="267:43">(<expr pos:start="267:17" pos:end="267:42"><name pos:start="267:17" pos:end="267:37"><name pos:start="267:17" pos:end="267:31">prediction_type</name><index pos:start="267:32" pos:end="267:37">[<expr pos:start="267:33" pos:end="267:36"><name pos:start="267:33" pos:end="267:36">chan</name></expr>]</index></name> <operator pos:start="267:39" pos:end="267:40">==</operator> <literal type="number" pos:start="267:42" pos:end="267:42">0</literal></expr>)</condition> <block pos:start="267:45" pos:end="285:13">{<block_content pos:start="271:17" pos:end="283:80">

                <comment type="block" pos:start="269:17" pos:end="269:34">/* adaptive fir */</comment>

                <expr_stmt pos:start="271:17" pos:end="283:80"><expr pos:start="271:17" pos:end="283:79"><call pos:start="271:17" pos:end="283:79"><name pos:start="271:17" pos:end="271:46">predictor_decompress_fir_adapt</name><argument_list pos:start="271:47" pos:end="283:79">(<argument pos:start="271:48" pos:end="271:78"><expr pos:start="271:48" pos:end="271:78"><name pos:start="271:48" pos:end="271:78"><name pos:start="271:48" pos:end="271:51">alac</name><operator pos:start="271:52" pos:end="271:53">-&gt;</operator><name pos:start="271:54" pos:end="271:72">predicterror_buffer</name><index pos:start="271:73" pos:end="271:78">[<expr pos:start="271:74" pos:end="271:77"><name pos:start="271:74" pos:end="271:77">chan</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="273:48" pos:end="273:79"><expr pos:start="273:48" pos:end="273:79"><name pos:start="273:48" pos:end="273:79"><name pos:start="273:48" pos:end="273:51">alac</name><operator pos:start="273:52" pos:end="273:53">-&gt;</operator><name pos:start="273:54" pos:end="273:73">outputsamples_buffer</name><index pos:start="273:74" pos:end="273:79">[<expr pos:start="273:75" pos:end="273:78"><name pos:start="273:75" pos:end="273:78">chan</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="275:48" pos:end="275:60"><expr pos:start="275:48" pos:end="275:60"><name pos:start="275:48" pos:end="275:60">outputsamples</name></expr></argument>,

                                               <argument pos:start="277:48" pos:end="277:61"><expr pos:start="277:48" pos:end="277:61"><name pos:start="277:48" pos:end="277:61">readsamplesize</name></expr></argument>,

                                               <argument pos:start="279:48" pos:end="279:73"><expr pos:start="279:48" pos:end="279:73"><name pos:start="279:48" pos:end="279:73"><name pos:start="279:48" pos:end="279:67">predictor_coef_table</name><index pos:start="279:68" pos:end="279:73">[<expr pos:start="279:69" pos:end="279:72"><name pos:start="279:69" pos:end="279:72">chan</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="281:48" pos:end="281:71"><expr pos:start="281:48" pos:end="281:71"><name pos:start="281:48" pos:end="281:71"><name pos:start="281:48" pos:end="281:65">predictor_coef_num</name><index pos:start="281:66" pos:end="281:71">[<expr pos:start="281:67" pos:end="281:70"><name pos:start="281:67" pos:end="281:70">chan</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="283:48" pos:end="283:78"><expr pos:start="283:48" pos:end="283:78"><name pos:start="283:48" pos:end="283:78"><name pos:start="283:48" pos:end="283:72">prediction_quantitization</name><index pos:start="283:73" pos:end="283:78">[<expr pos:start="283:74" pos:end="283:77"><name pos:start="283:74" pos:end="283:77">chan</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="285:15" pos:end="301:13">else <block pos:start="285:20" pos:end="301:13">{<block_content pos:start="287:17" pos:end="287:109">

                <expr_stmt pos:start="287:17" pos:end="287:109"><expr pos:start="287:17" pos:end="287:108"><call pos:start="287:17" pos:end="287:108"><name pos:start="287:17" pos:end="287:22">av_log</name><argument_list pos:start="287:23" pos:end="287:108">(<argument pos:start="287:24" pos:end="287:28"><expr pos:start="287:24" pos:end="287:28"><name pos:start="287:24" pos:end="287:28">avctx</name></expr></argument>, <argument pos:start="287:31" pos:end="287:42"><expr pos:start="287:31" pos:end="287:42"><name pos:start="287:31" pos:end="287:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="287:45" pos:end="287:84"><expr pos:start="287:45" pos:end="287:84"><literal type="string" pos:start="287:45" pos:end="287:84">"FIXME: unhandled prediction type: %i\n"</literal></expr></argument>, <argument pos:start="287:87" pos:end="287:107"><expr pos:start="287:87" pos:end="287:107"><name pos:start="287:87" pos:end="287:107"><name pos:start="287:87" pos:end="287:101">prediction_type</name><index pos:start="287:102" pos:end="287:107">[<expr pos:start="287:103" pos:end="287:106"><name pos:start="287:103" pos:end="287:106">chan</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="289:17" pos:end="299:19">/* I think the only other prediction type (or perhaps this is

                 * just a boolean?) runs adaptive fir twice.. like:

                 * predictor_decompress_fir_adapt(predictor_error, tempout, ...)

                 * predictor_decompress_fir_adapt(predictor_error, outputsamples ...)

                 * little strange..

                 */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="305:7" pos:end="355:5">else <block pos:start="305:12" pos:end="355:5">{<block_content pos:start="309:9" pos:end="353:35">

        <comment type="block" pos:start="307:9" pos:end="307:39">/* not compressed, easy case */</comment>

        <decl_stmt pos:start="309:9" pos:end="309:20"><decl pos:start="309:9" pos:end="309:13"><type pos:start="309:9" pos:end="309:11"><name pos:start="309:9" pos:end="309:11">int</name></type> <name pos:start="309:13" pos:end="309:13">i</name></decl>, <decl pos:start="309:16" pos:end="309:19"><type ref="prev" pos:start="309:9" pos:end="309:11"/><name pos:start="309:16" pos:end="309:19">chan</name></decl>;</decl_stmt>

        <if_stmt pos:start="311:9" pos:end="347:9"><if pos:start="311:9" pos:end="329:9">if <condition pos:start="311:12" pos:end="311:44">(<expr pos:start="311:13" pos:end="311:43"><name pos:start="311:13" pos:end="311:37"><name pos:start="311:13" pos:end="311:16">alac</name><operator pos:start="311:17" pos:end="311:18">-&gt;</operator><name pos:start="311:19" pos:end="311:37">setinfo_sample_size</name></name> <operator pos:start="311:39" pos:end="311:40">&lt;=</operator> <literal type="number" pos:start="311:42" pos:end="311:43">16</literal></expr>)</condition> <block pos:start="311:46" pos:end="329:9">{<block_content pos:start="313:9" pos:end="327:13">

        <for pos:start="313:9" pos:end="327:13">for <control pos:start="313:13" pos:end="313:43">(<init pos:start="313:14" pos:end="313:19"><expr pos:start="313:14" pos:end="313:18"><name pos:start="313:14" pos:end="313:14">i</name> <operator pos:start="313:16" pos:end="313:16">=</operator> <literal type="number" pos:start="313:18" pos:end="313:18">0</literal></expr>;</init> <condition pos:start="313:21" pos:end="313:38"><expr pos:start="313:21" pos:end="313:37"><name pos:start="313:21" pos:end="313:21">i</name> <operator pos:start="313:23" pos:end="313:23">&lt;</operator> <name pos:start="313:25" pos:end="313:37">outputsamples</name></expr>;</condition> <incr pos:start="313:40" pos:end="313:42"><expr pos:start="313:40" pos:end="313:42"><name pos:start="313:40" pos:end="313:40">i</name><operator pos:start="313:41" pos:end="313:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="315:13" pos:end="327:13"><block_content pos:start="315:13" pos:end="327:13">

            <for pos:start="315:13" pos:end="327:13">for <control pos:start="315:17" pos:end="315:51">(<init pos:start="315:18" pos:end="315:26"><expr pos:start="315:18" pos:end="315:25"><name pos:start="315:18" pos:end="315:21">chan</name> <operator pos:start="315:23" pos:end="315:23">=</operator> <literal type="number" pos:start="315:25" pos:end="315:25">0</literal></expr>;</init> <condition pos:start="315:28" pos:end="315:43"><expr pos:start="315:28" pos:end="315:42"><name pos:start="315:28" pos:end="315:31">chan</name> <operator pos:start="315:33" pos:end="315:33">&lt;</operator> <name pos:start="315:35" pos:end="315:42">channels</name></expr>;</condition> <incr pos:start="315:45" pos:end="315:50"><expr pos:start="315:45" pos:end="315:50"><name pos:start="315:45" pos:end="315:48">chan</name><operator pos:start="315:49" pos:end="315:50">++</operator></expr></incr>)</control> <block pos:start="315:53" pos:end="327:13">{<block_content pos:start="317:17" pos:end="325:64">

                <decl_stmt pos:start="317:17" pos:end="317:34"><decl pos:start="317:17" pos:end="317:33"><type pos:start="317:17" pos:end="317:23"><name pos:start="317:17" pos:end="317:23">int32_t</name></type> <name pos:start="317:25" pos:end="317:33">audiobits</name></decl>;</decl_stmt>



                <expr_stmt pos:start="321:17" pos:end="321:81"><expr pos:start="321:17" pos:end="321:80"><name pos:start="321:17" pos:end="321:25">audiobits</name> <operator pos:start="321:27" pos:end="321:27">=</operator> <call pos:start="321:29" pos:end="321:80"><name pos:start="321:29" pos:end="321:42">get_sbits_long</name><argument_list pos:start="321:43" pos:end="321:80">(<argument pos:start="321:44" pos:end="321:52"><expr pos:start="321:44" pos:end="321:52"><operator pos:start="321:44" pos:end="321:44">&amp;</operator><name pos:start="321:45" pos:end="321:52"><name pos:start="321:45" pos:end="321:48">alac</name><operator pos:start="321:49" pos:end="321:50">-&gt;</operator><name pos:start="321:51" pos:end="321:52">gb</name></name></expr></argument>, <argument pos:start="321:55" pos:end="321:79"><expr pos:start="321:55" pos:end="321:79"><name pos:start="321:55" pos:end="321:79"><name pos:start="321:55" pos:end="321:58">alac</name><operator pos:start="321:59" pos:end="321:60">-&gt;</operator><name pos:start="321:61" pos:end="321:79">setinfo_sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="325:17" pos:end="325:64"><expr pos:start="325:17" pos:end="325:63"><name pos:start="325:17" pos:end="325:51"><name pos:start="325:17" pos:end="325:20">alac</name><operator pos:start="325:21" pos:end="325:22">-&gt;</operator><name pos:start="325:23" pos:end="325:42">outputsamples_buffer</name><index pos:start="325:43" pos:end="325:48">[<expr pos:start="325:44" pos:end="325:47"><name pos:start="325:44" pos:end="325:47">chan</name></expr>]</index><index pos:start="325:49" pos:end="325:51">[<expr pos:start="325:50" pos:end="325:50"><name pos:start="325:50" pos:end="325:50">i</name></expr>]</index></name> <operator pos:start="325:53" pos:end="325:53">=</operator> <name pos:start="325:55" pos:end="325:63">audiobits</name></expr>;</expr_stmt>

            </block_content>}</block></for></block_content></block></for>

        </block_content>}</block></if> <else pos:start="329:11" pos:end="347:9">else <block pos:start="329:16" pos:end="347:9">{<block_content pos:start="331:13" pos:end="345:13">

            <for pos:start="331:13" pos:end="345:13">for <control pos:start="331:17" pos:end="331:47">(<init pos:start="331:18" pos:end="331:23"><expr pos:start="331:18" pos:end="331:22"><name pos:start="331:18" pos:end="331:18">i</name> <operator pos:start="331:20" pos:end="331:20">=</operator> <literal type="number" pos:start="331:22" pos:end="331:22">0</literal></expr>;</init> <condition pos:start="331:25" pos:end="331:42"><expr pos:start="331:25" pos:end="331:41"><name pos:start="331:25" pos:end="331:25">i</name> <operator pos:start="331:27" pos:end="331:27">&lt;</operator> <name pos:start="331:29" pos:end="331:41">outputsamples</name></expr>;</condition> <incr pos:start="331:44" pos:end="331:46"><expr pos:start="331:44" pos:end="331:46"><name pos:start="331:44" pos:end="331:44">i</name><operator pos:start="331:45" pos:end="331:46">++</operator></expr></incr>)</control> <block pos:start="331:49" pos:end="345:13">{<block_content pos:start="333:17" pos:end="343:17">

                <for pos:start="333:17" pos:end="343:17">for <control pos:start="333:21" pos:end="333:55">(<init pos:start="333:22" pos:end="333:30"><expr pos:start="333:22" pos:end="333:29"><name pos:start="333:22" pos:end="333:25">chan</name> <operator pos:start="333:27" pos:end="333:27">=</operator> <literal type="number" pos:start="333:29" pos:end="333:29">0</literal></expr>;</init> <condition pos:start="333:32" pos:end="333:47"><expr pos:start="333:32" pos:end="333:46"><name pos:start="333:32" pos:end="333:35">chan</name> <operator pos:start="333:37" pos:end="333:37">&lt;</operator> <name pos:start="333:39" pos:end="333:46">channels</name></expr>;</condition> <incr pos:start="333:49" pos:end="333:54"><expr pos:start="333:49" pos:end="333:54"><name pos:start="333:49" pos:end="333:52">chan</name><operator pos:start="333:53" pos:end="333:54">++</operator></expr></incr>)</control> <block pos:start="333:57" pos:end="343:17">{<block_content pos:start="335:21" pos:end="341:97">

                    <expr_stmt pos:start="335:21" pos:end="337:85"><expr pos:start="335:21" pos:end="337:84"><name pos:start="335:21" pos:end="335:55"><name pos:start="335:21" pos:end="335:24">alac</name><operator pos:start="335:25" pos:end="335:26">-&gt;</operator><name pos:start="335:27" pos:end="335:46">outputsamples_buffer</name><index pos:start="335:47" pos:end="335:52">[<expr pos:start="335:48" pos:end="335:51"><name pos:start="335:48" pos:end="335:51">chan</name></expr>]</index><index pos:start="335:53" pos:end="335:55">[<expr pos:start="335:54" pos:end="335:54"><name pos:start="335:54" pos:end="335:54">i</name></expr>]</index></name> <operator pos:start="335:57" pos:end="335:57">=</operator> <call pos:start="335:59" pos:end="337:84"><name pos:start="335:59" pos:end="335:66">get_bits</name><argument_list pos:start="335:67" pos:end="337:84">(<argument pos:start="335:68" pos:end="335:76"><expr pos:start="335:68" pos:end="335:76"><operator pos:start="335:68" pos:end="335:68">&amp;</operator><name pos:start="335:69" pos:end="335:76"><name pos:start="335:69" pos:end="335:72">alac</name><operator pos:start="335:73" pos:end="335:74">-&gt;</operator><name pos:start="335:75" pos:end="335:76">gb</name></name></expr></argument>,

                                                          <argument pos:start="337:59" pos:end="337:83"><expr pos:start="337:59" pos:end="337:83"><name pos:start="337:59" pos:end="337:83"><name pos:start="337:59" pos:end="337:62">alac</name><operator pos:start="337:63" pos:end="337:64">-&gt;</operator><name pos:start="337:65" pos:end="337:83">setinfo_sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="339:21" pos:end="341:97"><expr pos:start="339:21" pos:end="341:96"><name pos:start="339:21" pos:end="339:55"><name pos:start="339:21" pos:end="339:24">alac</name><operator pos:start="339:25" pos:end="339:26">-&gt;</operator><name pos:start="339:27" pos:end="339:46">outputsamples_buffer</name><index pos:start="339:47" pos:end="339:52">[<expr pos:start="339:48" pos:end="339:51"><name pos:start="339:48" pos:end="339:51">chan</name></expr>]</index><index pos:start="339:53" pos:end="339:55">[<expr pos:start="339:54" pos:end="339:54"><name pos:start="339:54" pos:end="339:54">i</name></expr>]</index></name> <operator pos:start="339:57" pos:end="339:57">=</operator> <call pos:start="339:59" pos:end="341:96"><name pos:start="339:59" pos:end="339:69">sign_extend</name><argument_list pos:start="339:70" pos:end="341:96">(<argument pos:start="339:71" pos:end="339:105"><expr pos:start="339:71" pos:end="339:105"><name pos:start="339:71" pos:end="339:105"><name pos:start="339:71" pos:end="339:74">alac</name><operator pos:start="339:75" pos:end="339:76">-&gt;</operator><name pos:start="339:77" pos:end="339:96">outputsamples_buffer</name><index pos:start="339:97" pos:end="339:102">[<expr pos:start="339:98" pos:end="339:101"><name pos:start="339:98" pos:end="339:101">chan</name></expr>]</index><index pos:start="339:103" pos:end="339:105">[<expr pos:start="339:104" pos:end="339:104"><name pos:start="339:104" pos:end="339:104">i</name></expr>]</index></name></expr></argument>,

                                                                      <argument pos:start="341:71" pos:end="341:95"><expr pos:start="341:71" pos:end="341:95"><name pos:start="341:71" pos:end="341:95"><name pos:start="341:71" pos:end="341:74">alac</name><operator pos:start="341:75" pos:end="341:76">-&gt;</operator><name pos:start="341:77" pos:end="341:95">setinfo_sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:30"><expr pos:start="349:9" pos:end="349:29"><name pos:start="349:9" pos:end="349:25"><name pos:start="349:9" pos:end="349:12">alac</name><operator pos:start="349:13" pos:end="349:14">-&gt;</operator><name pos:start="349:15" pos:end="349:25">wasted_bits</name></name> <operator pos:start="349:27" pos:end="349:27">=</operator> <literal type="number" pos:start="349:29" pos:end="349:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:30"><expr pos:start="351:9" pos:end="351:29"><name pos:start="351:9" pos:end="351:25">interlacing_shift</name> <operator pos:start="351:27" pos:end="351:27">=</operator> <literal type="number" pos:start="351:29" pos:end="351:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="353:9" pos:end="353:35"><expr pos:start="353:9" pos:end="353:34"><name pos:start="353:9" pos:end="353:30">interlacing_leftweight</name> <operator pos:start="353:32" pos:end="353:32">=</operator> <literal type="number" pos:start="353:34" pos:end="353:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="357:5" pos:end="359:68"><if pos:start="357:5" pos:end="359:68">if <condition pos:start="357:8" pos:end="357:36">(<expr pos:start="357:9" pos:end="357:35"><call pos:start="357:9" pos:end="357:30"><name pos:start="357:9" pos:end="357:16">get_bits</name><argument_list pos:start="357:17" pos:end="357:30">(<argument pos:start="357:18" pos:end="357:26"><expr pos:start="357:18" pos:end="357:26"><operator pos:start="357:18" pos:end="357:18">&amp;</operator><name pos:start="357:19" pos:end="357:26"><name pos:start="357:19" pos:end="357:22">alac</name><operator pos:start="357:23" pos:end="357:24">-&gt;</operator><name pos:start="357:25" pos:end="357:26">gb</name></name></expr></argument>, <argument pos:start="357:29" pos:end="357:29"><expr pos:start="357:29" pos:end="357:29"><literal type="number" pos:start="357:29" pos:end="357:29">3</literal></expr></argument>)</argument_list></call> <operator pos:start="357:32" pos:end="357:33">!=</operator> <literal type="number" pos:start="357:35" pos:end="357:35">7</literal></expr>)</condition><block type="pseudo" pos:start="359:9" pos:end="359:68"><block_content pos:start="359:9" pos:end="359:68">

        <expr_stmt pos:start="359:9" pos:end="359:68"><expr pos:start="359:9" pos:end="359:67"><call pos:start="359:9" pos:end="359:67"><name pos:start="359:9" pos:end="359:14">av_log</name><argument_list pos:start="359:15" pos:end="359:67">(<argument pos:start="359:16" pos:end="359:20"><expr pos:start="359:16" pos:end="359:20"><name pos:start="359:16" pos:end="359:20">avctx</name></expr></argument>, <argument pos:start="359:23" pos:end="359:34"><expr pos:start="359:23" pos:end="359:34"><name pos:start="359:23" pos:end="359:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="359:37" pos:end="359:66"><expr pos:start="359:37" pos:end="359:66"><literal type="string" pos:start="359:37" pos:end="359:66">"Error : Wrong End Of Frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <switch pos:start="363:5" pos:end="427:5">switch<condition pos:start="363:11" pos:end="363:37">(<expr pos:start="363:12" pos:end="363:36"><name pos:start="363:12" pos:end="363:36"><name pos:start="363:12" pos:end="363:15">alac</name><operator pos:start="363:16" pos:end="363:17">-&gt;</operator><name pos:start="363:18" pos:end="363:36">setinfo_sample_size</name></name></expr>)</condition> <block pos:start="363:39" pos:end="427:5">{<block_content pos:start="365:5" pos:end="425:14">

    <case pos:start="365:5" pos:end="365:12">case <expr pos:start="365:10" pos:end="365:11"><literal type="number" pos:start="365:10" pos:end="365:11">16</literal></expr>:</case>

        <if_stmt pos:start="367:9" pos:end="391:9"><if pos:start="367:9" pos:end="381:9">if <condition pos:start="367:12" pos:end="367:26">(<expr pos:start="367:13" pos:end="367:25"><name pos:start="367:13" pos:end="367:20">channels</name> <operator pos:start="367:22" pos:end="367:23">==</operator> <literal type="number" pos:start="367:25" pos:end="367:25">2</literal></expr>)</condition> <block pos:start="367:28" pos:end="381:9">{<block_content pos:start="369:13" pos:end="379:58">

            <expr_stmt pos:start="369:13" pos:end="379:58"><expr pos:start="369:13" pos:end="379:57"><call pos:start="369:13" pos:end="379:57"><name pos:start="369:13" pos:end="369:33">reconstruct_stereo_16</name><argument_list pos:start="369:34" pos:end="379:57">(<argument pos:start="369:35" pos:end="369:60"><expr pos:start="369:35" pos:end="369:60"><name pos:start="369:35" pos:end="369:60"><name pos:start="369:35" pos:end="369:38">alac</name><operator pos:start="369:39" pos:end="369:40">-&gt;</operator><name pos:start="369:41" pos:end="369:60">outputsamples_buffer</name></name></expr></argument>,

                                  <argument pos:start="371:35" pos:end="371:53"><expr pos:start="371:35" pos:end="371:53"><operator pos:start="371:35" pos:end="371:35">(</operator><name pos:start="371:36" pos:end="371:42">int16_t</name><operator pos:start="371:43" pos:end="371:43">*</operator><operator pos:start="371:44" pos:end="371:44">)</operator><name pos:start="371:45" pos:end="371:53">outbuffer</name></expr></argument>,

                                  <argument pos:start="373:35" pos:end="373:51"><expr pos:start="373:35" pos:end="373:51"><name pos:start="373:35" pos:end="373:51"><name pos:start="373:35" pos:end="373:38">alac</name><operator pos:start="373:39" pos:end="373:40">-&gt;</operator><name pos:start="373:41" pos:end="373:51">numchannels</name></name></expr></argument>,

                                  <argument pos:start="375:35" pos:end="375:47"><expr pos:start="375:35" pos:end="375:47"><name pos:start="375:35" pos:end="375:47">outputsamples</name></expr></argument>,

                                  <argument pos:start="377:35" pos:end="377:51"><expr pos:start="377:35" pos:end="377:51"><name pos:start="377:35" pos:end="377:51">interlacing_shift</name></expr></argument>,

                                  <argument pos:start="379:35" pos:end="379:56"><expr pos:start="379:35" pos:end="379:56"><name pos:start="379:35" pos:end="379:56">interlacing_leftweight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="381:11" pos:end="391:9">else <block pos:start="381:16" pos:end="391:9">{<block_content pos:start="383:13" pos:end="389:13">

            <decl_stmt pos:start="383:13" pos:end="383:18"><decl pos:start="383:13" pos:end="383:17"><type pos:start="383:13" pos:end="383:15"><name pos:start="383:13" pos:end="383:15">int</name></type> <name pos:start="383:17" pos:end="383:17">i</name></decl>;</decl_stmt>

            <for pos:start="385:13" pos:end="389:13">for <control pos:start="385:17" pos:end="385:47">(<init pos:start="385:18" pos:end="385:23"><expr pos:start="385:18" pos:end="385:22"><name pos:start="385:18" pos:end="385:18">i</name> <operator pos:start="385:20" pos:end="385:20">=</operator> <literal type="number" pos:start="385:22" pos:end="385:22">0</literal></expr>;</init> <condition pos:start="385:25" pos:end="385:42"><expr pos:start="385:25" pos:end="385:41"><name pos:start="385:25" pos:end="385:25">i</name> <operator pos:start="385:27" pos:end="385:27">&lt;</operator> <name pos:start="385:29" pos:end="385:41">outputsamples</name></expr>;</condition> <incr pos:start="385:44" pos:end="385:46"><expr pos:start="385:44" pos:end="385:46"><name pos:start="385:44" pos:end="385:44">i</name><operator pos:start="385:45" pos:end="385:46">++</operator></expr></incr>)</control> <block pos:start="385:49" pos:end="389:13">{<block_content pos:start="387:17" pos:end="387:76">

                <expr_stmt pos:start="387:17" pos:end="387:76"><expr pos:start="387:17" pos:end="387:75"><operator pos:start="387:17" pos:end="387:17">(</operator><operator pos:start="387:18" pos:end="387:18">(</operator><name pos:start="387:19" pos:end="387:25">int16_t</name><operator pos:start="387:26" pos:end="387:26">*</operator><operator pos:start="387:27" pos:end="387:27">)</operator><name pos:start="387:28" pos:end="387:36">outbuffer</name><operator pos:start="387:37" pos:end="387:37">)</operator><index pos:start="387:38" pos:end="387:40">[<expr pos:start="387:39" pos:end="387:39"><name pos:start="387:39" pos:end="387:39">i</name></expr>]</index> <operator pos:start="387:42" pos:end="387:42">=</operator> <name pos:start="387:44" pos:end="387:75"><name pos:start="387:44" pos:end="387:47">alac</name><operator pos:start="387:48" pos:end="387:49">-&gt;</operator><name pos:start="387:50" pos:end="387:69">outputsamples_buffer</name><index pos:start="387:70" pos:end="387:72">[<expr pos:start="387:71" pos:end="387:71"><literal type="number" pos:start="387:71" pos:end="387:71">0</literal></expr>]</index><index pos:start="387:73" pos:end="387:75">[<expr pos:start="387:74" pos:end="387:74"><name pos:start="387:74" pos:end="387:74">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="393:9" pos:end="393:14">break;</break>

    <case pos:start="395:5" pos:end="395:12">case <expr pos:start="395:10" pos:end="395:11"><literal type="number" pos:start="395:10" pos:end="395:11">24</literal></expr>:</case>

        <if_stmt pos:start="397:9" pos:end="423:9"><if pos:start="397:9" pos:end="415:9">if <condition pos:start="397:12" pos:end="397:26">(<expr pos:start="397:13" pos:end="397:25"><name pos:start="397:13" pos:end="397:20">channels</name> <operator pos:start="397:22" pos:end="397:23">==</operator> <literal type="number" pos:start="397:25" pos:end="397:25">2</literal></expr>)</condition> <block pos:start="397:28" pos:end="415:9">{<block_content pos:start="399:13" pos:end="413:58">

            <expr_stmt pos:start="399:13" pos:end="413:58"><expr pos:start="399:13" pos:end="413:57"><call pos:start="399:13" pos:end="413:57"><name pos:start="399:13" pos:end="399:33">decorrelate_stereo_24</name><argument_list pos:start="399:34" pos:end="413:57">(<argument pos:start="399:35" pos:end="399:60"><expr pos:start="399:35" pos:end="399:60"><name pos:start="399:35" pos:end="399:60"><name pos:start="399:35" pos:end="399:38">alac</name><operator pos:start="399:39" pos:end="399:40">-&gt;</operator><name pos:start="399:41" pos:end="399:60">outputsamples_buffer</name></name></expr></argument>,

                                  <argument pos:start="401:35" pos:end="401:43"><expr pos:start="401:35" pos:end="401:43"><name pos:start="401:35" pos:end="401:43">outbuffer</name></expr></argument>,

                                  <argument pos:start="403:35" pos:end="403:58"><expr pos:start="403:35" pos:end="403:58"><name pos:start="403:35" pos:end="403:58"><name pos:start="403:35" pos:end="403:38">alac</name><operator pos:start="403:39" pos:end="403:40">-&gt;</operator><name pos:start="403:41" pos:end="403:58">wasted_bits_buffer</name></name></expr></argument>,

                                  <argument pos:start="405:35" pos:end="405:51"><expr pos:start="405:35" pos:end="405:51"><name pos:start="405:35" pos:end="405:51"><name pos:start="405:35" pos:end="405:38">alac</name><operator pos:start="405:39" pos:end="405:40">-&gt;</operator><name pos:start="405:41" pos:end="405:51">wasted_bits</name></name></expr></argument>,

                                  <argument pos:start="407:35" pos:end="407:51"><expr pos:start="407:35" pos:end="407:51"><name pos:start="407:35" pos:end="407:51"><name pos:start="407:35" pos:end="407:38">alac</name><operator pos:start="407:39" pos:end="407:40">-&gt;</operator><name pos:start="407:41" pos:end="407:51">numchannels</name></name></expr></argument>,

                                  <argument pos:start="409:35" pos:end="409:47"><expr pos:start="409:35" pos:end="409:47"><name pos:start="409:35" pos:end="409:47">outputsamples</name></expr></argument>,

                                  <argument pos:start="411:35" pos:end="411:51"><expr pos:start="411:35" pos:end="411:51"><name pos:start="411:35" pos:end="411:51">interlacing_shift</name></expr></argument>,

                                  <argument pos:start="413:35" pos:end="413:56"><expr pos:start="413:35" pos:end="413:56"><name pos:start="413:35" pos:end="413:56">interlacing_leftweight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="415:11" pos:end="423:9">else <block pos:start="415:16" pos:end="423:9">{<block_content pos:start="417:13" pos:end="421:82">

            <decl_stmt pos:start="417:13" pos:end="417:18"><decl pos:start="417:13" pos:end="417:17"><type pos:start="417:13" pos:end="417:15"><name pos:start="417:13" pos:end="417:15">int</name></type> <name pos:start="417:17" pos:end="417:17">i</name></decl>;</decl_stmt>

            <for pos:start="419:13" pos:end="421:82">for <control pos:start="419:17" pos:end="419:47">(<init pos:start="419:18" pos:end="419:23"><expr pos:start="419:18" pos:end="419:22"><name pos:start="419:18" pos:end="419:18">i</name> <operator pos:start="419:20" pos:end="419:20">=</operator> <literal type="number" pos:start="419:22" pos:end="419:22">0</literal></expr>;</init> <condition pos:start="419:25" pos:end="419:42"><expr pos:start="419:25" pos:end="419:41"><name pos:start="419:25" pos:end="419:25">i</name> <operator pos:start="419:27" pos:end="419:27">&lt;</operator> <name pos:start="419:29" pos:end="419:41">outputsamples</name></expr>;</condition> <incr pos:start="419:44" pos:end="419:46"><expr pos:start="419:44" pos:end="419:46"><name pos:start="419:44" pos:end="419:44">i</name><operator pos:start="419:45" pos:end="419:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="421:17" pos:end="421:82"><block_content pos:start="421:17" pos:end="421:82">

                <expr_stmt pos:start="421:17" pos:end="421:82"><expr pos:start="421:17" pos:end="421:81"><operator pos:start="421:17" pos:end="421:17">(</operator><operator pos:start="421:18" pos:end="421:18">(</operator><name pos:start="421:19" pos:end="421:25">int32_t</name> <operator pos:start="421:27" pos:end="421:27">*</operator><operator pos:start="421:28" pos:end="421:28">)</operator><name pos:start="421:29" pos:end="421:37">outbuffer</name><operator pos:start="421:38" pos:end="421:38">)</operator><index pos:start="421:39" pos:end="421:41">[<expr pos:start="421:40" pos:end="421:40"><name pos:start="421:40" pos:end="421:40">i</name></expr>]</index> <operator pos:start="421:43" pos:end="421:43">=</operator> <name pos:start="421:45" pos:end="421:76"><name pos:start="421:45" pos:end="421:48">alac</name><operator pos:start="421:49" pos:end="421:50">-&gt;</operator><name pos:start="421:51" pos:end="421:70">outputsamples_buffer</name><index pos:start="421:71" pos:end="421:73">[<expr pos:start="421:72" pos:end="421:72"><literal type="number" pos:start="421:72" pos:end="421:72">0</literal></expr>]</index><index pos:start="421:74" pos:end="421:76">[<expr pos:start="421:75" pos:end="421:75"><name pos:start="421:75" pos:end="421:75">i</name></expr>]</index></name> <operator pos:start="421:78" pos:end="421:79">&lt;&lt;</operator> <literal type="number" pos:start="421:81" pos:end="421:81">8</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="425:9" pos:end="425:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="431:5" pos:end="433:113"><if pos:start="431:5" pos:end="433:113">if <condition pos:start="431:8" pos:end="431:62">(<expr pos:start="431:9" pos:end="431:61"><name pos:start="431:9" pos:end="431:25">input_buffer_size</name> <operator pos:start="431:27" pos:end="431:27">*</operator> <literal type="number" pos:start="431:29" pos:end="431:31">8</literal> <operator pos:start="431:31" pos:end="431:31">-</operator> <call pos:start="431:33" pos:end="431:57"><name pos:start="431:33" pos:end="431:46">get_bits_count</name><argument_list pos:start="431:47" pos:end="431:57">(<argument pos:start="431:48" pos:end="431:56"><expr pos:start="431:48" pos:end="431:56"><operator pos:start="431:48" pos:end="431:48">&amp;</operator><name pos:start="431:49" pos:end="431:56"><name pos:start="431:49" pos:end="431:52">alac</name><operator pos:start="431:53" pos:end="431:54">-&gt;</operator><name pos:start="431:55" pos:end="431:56">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="431:59" pos:end="431:59">&gt;</operator> <literal type="number" pos:start="431:61" pos:end="431:61">8</literal></expr>)</condition><block type="pseudo" pos:start="433:9" pos:end="433:113"><block_content pos:start="433:9" pos:end="433:113">

        <expr_stmt pos:start="433:9" pos:end="433:113"><expr pos:start="433:9" pos:end="433:112"><call pos:start="433:9" pos:end="433:112"><name pos:start="433:9" pos:end="433:14">av_log</name><argument_list pos:start="433:15" pos:end="433:112">(<argument pos:start="433:16" pos:end="433:20"><expr pos:start="433:16" pos:end="433:20"><name pos:start="433:16" pos:end="433:20">avctx</name></expr></argument>, <argument pos:start="433:23" pos:end="433:34"><expr pos:start="433:23" pos:end="433:34"><name pos:start="433:23" pos:end="433:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="433:37" pos:end="433:60"><expr pos:start="433:37" pos:end="433:60"><literal type="string" pos:start="433:37" pos:end="433:60">"Error : %d bits left\n"</literal></expr></argument>, <argument pos:start="433:63" pos:end="433:111"><expr pos:start="433:63" pos:end="433:111"><name pos:start="433:63" pos:end="433:79">input_buffer_size</name> <operator pos:start="433:81" pos:end="433:81">*</operator> <literal type="number" pos:start="433:83" pos:end="433:85">8</literal> <operator pos:start="433:85" pos:end="433:85">-</operator> <call pos:start="433:87" pos:end="433:111"><name pos:start="433:87" pos:end="433:100">get_bits_count</name><argument_list pos:start="433:101" pos:end="433:111">(<argument pos:start="433:102" pos:end="433:110"><expr pos:start="433:102" pos:end="433:110"><operator pos:start="433:102" pos:end="433:102">&amp;</operator><name pos:start="433:103" pos:end="433:110"><name pos:start="433:103" pos:end="433:106">alac</name><operator pos:start="433:107" pos:end="433:108">-&gt;</operator><name pos:start="433:109" pos:end="433:110">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="437:5" pos:end="437:29">return <expr pos:start="437:12" pos:end="437:28"><name pos:start="437:12" pos:end="437:28">input_buffer_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
