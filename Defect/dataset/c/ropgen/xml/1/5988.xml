<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5988.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ppc6xx_set_irq</name> <parameter_list pos:start="1:28" pos:end="1:61">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:49"><decl pos:start="1:43" pos:end="1:49"><type pos:start="1:43" pos:end="1:49"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:49">pin</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:60"><decl pos:start="1:52" pos:end="1:60"><type pos:start="1:52" pos:end="1:60"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:60">level</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="225:1">{<block_content pos:start="5:5" pos:end="223:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">env</name> <init pos:start="5:19" pos:end="5:26">= <expr pos:start="5:21" pos:end="5:26"><name pos:start="5:21" pos:end="5:26">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">cur_level</name></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:26">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:26"><call pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:26">(<argument pos:start="11:13" pos:end="11:25"><expr pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="13:5" pos:end="22:0"><if pos:start="13:5" pos:end="22:0">if <condition pos:start="13:8" pos:end="13:31">(<expr pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:16">loglevel</name> <operator pos:start="13:18" pos:end="13:18">&amp;</operator> <name pos:start="13:20" pos:end="13:30">CPU_LOG_INT</name></expr>)</condition> <block pos:start="13:33" pos:end="22:0">{<block_content pos:start="15:9" pos:end="17:33">

        <expr_stmt pos:start="15:9" pos:end="17:33"><expr pos:start="15:9" pos:end="17:32"><call pos:start="15:9" pos:end="17:32"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="17:32">(<argument pos:start="15:17" pos:end="15:23"><expr pos:start="15:17" pos:end="15:23"><name pos:start="15:17" pos:end="15:23">logfile</name></expr></argument>, <argument pos:start="15:26" pos:end="15:55"><expr pos:start="15:26" pos:end="15:55"><literal type="string" pos:start="15:26" pos:end="15:55">"%s: env %p pin %d level %d\n"</literal></expr></argument>, <argument pos:start="15:58" pos:end="15:65"><expr pos:start="15:58" pos:end="15:65"><name pos:start="15:58" pos:end="15:65">__func__</name></expr></argument>,

                <argument pos:start="17:17" pos:end="17:19"><expr pos:start="17:17" pos:end="17:19"><name pos:start="17:17" pos:end="17:19">env</name></expr></argument>, <argument pos:start="17:22" pos:end="17:24"><expr pos:start="17:22" pos:end="17:24"><name pos:start="17:22" pos:end="17:24">pin</name></expr></argument>, <argument pos:start="17:27" pos:end="17:31"><expr pos:start="17:27" pos:end="17:31"><name pos:start="17:27" pos:end="17:31">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:13">cur_level</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <operator pos:start="23:17" pos:end="23:17">(</operator><name pos:start="23:18" pos:end="23:37"><name pos:start="23:18" pos:end="23:20">env</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:37">irq_input_state</name></name> <operator pos:start="23:39" pos:end="23:40">&gt;&gt;</operator> <name pos:start="23:42" pos:end="23:44">pin</name><operator pos:start="23:45" pos:end="23:45">)</operator> <operator pos:start="23:47" pos:end="23:47">&amp;</operator> <literal type="number" pos:start="23:49" pos:end="23:49">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="25:40">/* Don't generate spurious events */</comment>

    <if_stmt pos:start="27:5" pos:end="223:5"><if pos:start="27:5" pos:end="223:5">if <condition pos:start="27:8" pos:end="27:73">(<expr pos:start="27:9" pos:end="27:72"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:18">cur_level</name> <operator pos:start="27:20" pos:end="27:21">==</operator> <literal type="number" pos:start="27:23" pos:end="27:23">1</literal> <operator pos:start="27:25" pos:end="27:26">&amp;&amp;</operator> <name pos:start="27:28" pos:end="27:32">level</name> <operator pos:start="27:34" pos:end="27:35">==</operator> <literal type="number" pos:start="27:37" pos:end="27:37">0</literal><operator pos:start="27:38" pos:end="27:38">)</operator> <operator pos:start="27:40" pos:end="27:41">||</operator> <operator pos:start="27:43" pos:end="27:43">(</operator><name pos:start="27:44" pos:end="27:52">cur_level</name> <operator pos:start="27:54" pos:end="27:55">==</operator> <literal type="number" pos:start="27:57" pos:end="27:57">0</literal> <operator pos:start="27:59" pos:end="27:60">&amp;&amp;</operator> <name pos:start="27:62" pos:end="27:66">level</name> <operator pos:start="27:68" pos:end="27:69">!=</operator> <literal type="number" pos:start="27:71" pos:end="27:71">0</literal><operator pos:start="27:72" pos:end="27:72">)</operator></expr>)</condition> <block pos:start="27:75" pos:end="223:5">{<block_content pos:start="29:9" pos:end="221:48">

        <switch pos:start="29:9" pos:end="213:9">switch <condition pos:start="29:16" pos:end="29:20">(<expr pos:start="29:17" pos:end="29:19"><name pos:start="29:17" pos:end="29:19">pin</name></expr>)</condition> <block pos:start="29:22" pos:end="213:9">{<block_content pos:start="31:9" pos:end="211:19">

        <case pos:start="31:9" pos:end="36:0">case <expr pos:start="31:14" pos:end="31:30"><name pos:start="31:14" pos:end="31:30">PPC6xx_INPUT_TBEN</name></expr>:</case>

            <comment type="block" pos:start="33:13" pos:end="33:47">/* Level sensitive - active high */</comment>

<cpp:if pos:start="35:1" pos:end="35:26">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:26"><call pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:11">defined</name><argument_list pos:start="35:12" pos:end="35:26">(<argument pos:start="35:13" pos:end="35:25"><expr pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="37:13" pos:end="46:0"><if pos:start="37:13" pos:end="46:0">if <condition pos:start="37:16" pos:end="37:39">(<expr pos:start="37:17" pos:end="37:38"><name pos:start="37:17" pos:end="37:24">loglevel</name> <operator pos:start="37:26" pos:end="37:26">&amp;</operator> <name pos:start="37:28" pos:end="37:38">CPU_LOG_INT</name></expr>)</condition> <block pos:start="37:41" pos:end="46:0">{<block_content pos:start="39:17" pos:end="41:60">

                <expr_stmt pos:start="39:17" pos:end="41:60"><expr pos:start="39:17" pos:end="41:59"><call pos:start="39:17" pos:end="41:59"><name pos:start="39:17" pos:end="39:23">fprintf</name><argument_list pos:start="39:24" pos:end="41:59">(<argument pos:start="39:25" pos:end="39:31"><expr pos:start="39:25" pos:end="39:31"><name pos:start="39:25" pos:end="39:31">logfile</name></expr></argument>, <argument pos:start="39:34" pos:end="39:57"><expr pos:start="39:34" pos:end="39:57"><literal type="string" pos:start="39:34" pos:end="39:57">"%s: %s the time base\n"</literal></expr></argument>,

                        <argument pos:start="41:25" pos:end="41:32"><expr pos:start="41:25" pos:end="41:32"><name pos:start="41:25" pos:end="41:32">__func__</name></expr></argument>, <argument pos:start="41:35" pos:end="41:58"><expr pos:start="41:35" pos:end="41:58"><ternary pos:start="41:35" pos:end="41:58"><condition pos:start="41:35" pos:end="41:41"><expr pos:start="41:35" pos:end="41:39"><name pos:start="41:35" pos:end="41:39">level</name></expr> ?</condition><then pos:start="41:43" pos:end="41:49"> <expr pos:start="41:43" pos:end="41:49"><literal type="string" pos:start="41:43" pos:end="41:49">"start"</literal></expr> </then><else pos:start="41:51" pos:end="41:58">: <expr pos:start="41:53" pos:end="41:58"><literal type="string" pos:start="41:53" pos:end="41:58">"stop"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="47:13" pos:end="55:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:22">(<expr pos:start="47:17" pos:end="47:21"><name pos:start="47:17" pos:end="47:21">level</name></expr>)</condition> <block pos:start="47:24" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:38">

                <expr_stmt pos:start="49:17" pos:end="49:38"><expr pos:start="49:17" pos:end="49:37"><call pos:start="49:17" pos:end="49:37"><name pos:start="49:17" pos:end="49:32">cpu_ppc_tb_start</name><argument_list pos:start="49:33" pos:end="49:37">(<argument pos:start="49:34" pos:end="49:36"><expr pos:start="49:34" pos:end="49:36"><name pos:start="49:34" pos:end="49:36">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="55:13">else <block pos:start="51:20" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:37">

                <expr_stmt pos:start="53:17" pos:end="53:37"><expr pos:start="53:17" pos:end="53:36"><call pos:start="53:17" pos:end="53:36"><name pos:start="53:17" pos:end="53:31">cpu_ppc_tb_stop</name><argument_list pos:start="53:32" pos:end="53:36">(<argument pos:start="53:33" pos:end="53:35"><expr pos:start="53:33" pos:end="53:35"><name pos:start="53:33" pos:end="53:35">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        <case pos:start="57:9" pos:end="62:0">case <expr pos:start="57:14" pos:end="57:29"><name pos:start="57:14" pos:end="57:29">PPC6xx_INPUT_INT</name></expr>:</case>

            <comment type="block" pos:start="59:13" pos:end="59:47">/* Level sensitive - active high */</comment>

<cpp:if pos:start="61:1" pos:end="61:26">#<cpp:directive pos:start="61:2" pos:end="61:3">if</cpp:directive> <expr pos:start="61:5" pos:end="61:26"><call pos:start="61:5" pos:end="61:26"><name pos:start="61:5" pos:end="61:11">defined</name><argument_list pos:start="61:12" pos:end="61:26">(<argument pos:start="61:13" pos:end="61:25"><expr pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="63:13" pos:end="72:0"><if pos:start="63:13" pos:end="72:0">if <condition pos:start="63:16" pos:end="63:39">(<expr pos:start="63:17" pos:end="63:38"><name pos:start="63:17" pos:end="63:24">loglevel</name> <operator pos:start="63:26" pos:end="63:26">&amp;</operator> <name pos:start="63:28" pos:end="63:38">CPU_LOG_INT</name></expr>)</condition> <block pos:start="63:41" pos:end="72:0">{<block_content pos:start="65:17" pos:end="67:41">

                <expr_stmt pos:start="65:17" pos:end="67:41"><expr pos:start="65:17" pos:end="67:40"><call pos:start="65:17" pos:end="67:40"><name pos:start="65:17" pos:end="65:23">fprintf</name><argument_list pos:start="65:24" pos:end="67:40">(<argument pos:start="65:25" pos:end="65:31"><expr pos:start="65:25" pos:end="65:31"><name pos:start="65:25" pos:end="65:31">logfile</name></expr></argument>, <argument pos:start="65:34" pos:end="65:73"><expr pos:start="65:34" pos:end="65:73"><literal type="string" pos:start="65:34" pos:end="65:73">"%s: set the external IRQ state to %d\n"</literal></expr></argument>,

                        <argument pos:start="67:25" pos:end="67:32"><expr pos:start="67:25" pos:end="67:32"><name pos:start="67:25" pos:end="67:32">__func__</name></expr></argument>, <argument pos:start="67:35" pos:end="67:39"><expr pos:start="67:35" pos:end="67:39"><name pos:start="67:35" pos:end="67:39">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="73:13" pos:end="73:55"><expr pos:start="73:13" pos:end="73:54"><call pos:start="73:13" pos:end="73:54"><name pos:start="73:13" pos:end="73:23">ppc_set_irq</name><argument_list pos:start="73:24" pos:end="73:54">(<argument pos:start="73:25" pos:end="73:27"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:27">env</name></expr></argument>, <argument pos:start="73:30" pos:end="73:46"><expr pos:start="73:30" pos:end="73:46"><name pos:start="73:30" pos:end="73:46">PPC_INTERRUPT_EXT</name></expr></argument>, <argument pos:start="73:49" pos:end="73:53"><expr pos:start="73:49" pos:end="73:53"><name pos:start="73:49" pos:end="73:53">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="82:0">case <expr pos:start="77:14" pos:end="77:29"><name pos:start="77:14" pos:end="77:29">PPC6xx_INPUT_SMI</name></expr>:</case>

            <comment type="block" pos:start="79:13" pos:end="79:47">/* Level sensitive - active high */</comment>

<cpp:if pos:start="81:1" pos:end="81:26">#<cpp:directive pos:start="81:2" pos:end="81:3">if</cpp:directive> <expr pos:start="81:5" pos:end="81:26"><call pos:start="81:5" pos:end="81:26"><name pos:start="81:5" pos:end="81:11">defined</name><argument_list pos:start="81:12" pos:end="81:26">(<argument pos:start="81:13" pos:end="81:25"><expr pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="83:13" pos:end="92:0"><if pos:start="83:13" pos:end="92:0">if <condition pos:start="83:16" pos:end="83:39">(<expr pos:start="83:17" pos:end="83:38"><name pos:start="83:17" pos:end="83:24">loglevel</name> <operator pos:start="83:26" pos:end="83:26">&amp;</operator> <name pos:start="83:28" pos:end="83:38">CPU_LOG_INT</name></expr>)</condition> <block pos:start="83:41" pos:end="92:0">{<block_content pos:start="85:17" pos:end="87:41">

                <expr_stmt pos:start="85:17" pos:end="87:41"><expr pos:start="85:17" pos:end="87:40"><call pos:start="85:17" pos:end="87:40"><name pos:start="85:17" pos:end="85:23">fprintf</name><argument_list pos:start="85:24" pos:end="87:40">(<argument pos:start="85:25" pos:end="85:31"><expr pos:start="85:25" pos:end="85:31"><name pos:start="85:25" pos:end="85:31">logfile</name></expr></argument>, <argument pos:start="85:34" pos:end="85:68"><expr pos:start="85:34" pos:end="85:68"><literal type="string" pos:start="85:34" pos:end="85:68">"%s: set the SMI IRQ state to %d\n"</literal></expr></argument>,

                        <argument pos:start="87:25" pos:end="87:32"><expr pos:start="87:25" pos:end="87:32"><name pos:start="87:25" pos:end="87:32">__func__</name></expr></argument>, <argument pos:start="87:35" pos:end="87:39"><expr pos:start="87:35" pos:end="87:39"><name pos:start="87:35" pos:end="87:39">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="93:13" pos:end="93:55"><expr pos:start="93:13" pos:end="93:54"><call pos:start="93:13" pos:end="93:54"><name pos:start="93:13" pos:end="93:23">ppc_set_irq</name><argument_list pos:start="93:24" pos:end="93:54">(<argument pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:27"><name pos:start="93:25" pos:end="93:27">env</name></expr></argument>, <argument pos:start="93:30" pos:end="93:46"><expr pos:start="93:30" pos:end="93:46"><name pos:start="93:30" pos:end="93:46">PPC_INTERRUPT_SMI</name></expr></argument>, <argument pos:start="93:49" pos:end="93:53"><expr pos:start="93:49" pos:end="93:53"><name pos:start="93:49" pos:end="93:53">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        <case pos:start="97:9" pos:end="97:30">case <expr pos:start="97:14" pos:end="97:29"><name pos:start="97:14" pos:end="97:29">PPC6xx_INPUT_MCP</name></expr>:</case>

            <comment type="block" pos:start="99:13" pos:end="99:41">/* Negative edge sensitive */</comment>

            <comment type="block" pos:start="101:13" pos:end="105:15">/* XXX: TODO: actual reaction may depends on HID0 status

             *            603/604/740/750: check HID0[EMCP]

             */</comment>

            <if_stmt pos:start="107:13" pos:end="123:13"><if pos:start="107:13" pos:end="123:13">if <condition pos:start="107:16" pos:end="107:45">(<expr pos:start="107:17" pos:end="107:44"><name pos:start="107:17" pos:end="107:25">cur_level</name> <operator pos:start="107:27" pos:end="107:28">==</operator> <literal type="number" pos:start="107:30" pos:end="107:30">1</literal> <operator pos:start="107:32" pos:end="107:33">&amp;&amp;</operator> <name pos:start="107:35" pos:end="107:39">level</name> <operator pos:start="107:41" pos:end="107:42">==</operator> <literal type="number" pos:start="107:44" pos:end="107:44">0</literal></expr>)</condition> <block pos:start="107:47" pos:end="123:13">{<block_content pos:start="111:17" pos:end="121:55">

<cpp:if pos:start="109:1" pos:end="109:26">#<cpp:directive pos:start="109:2" pos:end="109:3">if</cpp:directive> <expr pos:start="109:5" pos:end="109:26"><call pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:11">defined</name><argument_list pos:start="109:12" pos:end="109:26">(<argument pos:start="109:13" pos:end="109:25"><expr pos:start="109:13" pos:end="109:25"><name pos:start="109:13" pos:end="109:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="111:17" pos:end="120:0"><if pos:start="111:17" pos:end="120:0">if <condition pos:start="111:20" pos:end="111:43">(<expr pos:start="111:21" pos:end="111:42"><name pos:start="111:21" pos:end="111:28">loglevel</name> <operator pos:start="111:30" pos:end="111:30">&amp;</operator> <name pos:start="111:32" pos:end="111:42">CPU_LOG_INT</name></expr>)</condition> <block pos:start="111:45" pos:end="120:0">{<block_content pos:start="113:21" pos:end="115:38">

                    <expr_stmt pos:start="113:21" pos:end="115:38"><expr pos:start="113:21" pos:end="115:37"><call pos:start="113:21" pos:end="115:37"><name pos:start="113:21" pos:end="113:27">fprintf</name><argument_list pos:start="113:28" pos:end="115:37">(<argument pos:start="113:29" pos:end="113:35"><expr pos:start="113:29" pos:end="113:35"><name pos:start="113:29" pos:end="113:35">logfile</name></expr></argument>, <argument pos:start="113:38" pos:end="113:70"><expr pos:start="113:38" pos:end="113:70"><literal type="string" pos:start="113:38" pos:end="113:70">"%s: raise machine check state\n"</literal></expr></argument>,

                            <argument pos:start="115:29" pos:end="115:36"><expr pos:start="115:29" pos:end="115:36"><name pos:start="115:29" pos:end="115:36">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="121:17" pos:end="121:55"><expr pos:start="121:17" pos:end="121:54"><call pos:start="121:17" pos:end="121:54"><name pos:start="121:17" pos:end="121:27">ppc_set_irq</name><argument_list pos:start="121:28" pos:end="121:54">(<argument pos:start="121:29" pos:end="121:31"><expr pos:start="121:29" pos:end="121:31"><name pos:start="121:29" pos:end="121:31">env</name></expr></argument>, <argument pos:start="121:34" pos:end="121:50"><expr pos:start="121:34" pos:end="121:50"><name pos:start="121:34" pos:end="121:50">PPC_INTERRUPT_MCK</name></expr></argument>, <argument pos:start="121:53" pos:end="121:53"><expr pos:start="121:53" pos:end="121:53"><literal type="number" pos:start="121:53" pos:end="121:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="125:13" pos:end="125:18">break;</break>

        <case pos:start="127:9" pos:end="127:35">case <expr pos:start="127:14" pos:end="127:34"><name pos:start="127:14" pos:end="127:34">PPC6xx_INPUT_CKSTP_IN</name></expr>:</case>

            <comment type="block" pos:start="129:13" pos:end="129:46">/* Level sensitive - active low */</comment>

            <comment type="block" pos:start="131:13" pos:end="131:62">/* XXX: TODO: relay the signal to CKSTP_OUT pin */</comment>

            <comment type="block" pos:start="133:13" pos:end="133:79">/* XXX: Note that the only way to restart the CPU is to reset it */</comment>

            <if_stmt pos:start="135:13" pos:end="149:13"><if pos:start="135:13" pos:end="149:13">if <condition pos:start="135:16" pos:end="135:22">(<expr pos:start="135:17" pos:end="135:21"><name pos:start="135:17" pos:end="135:21">level</name></expr>)</condition> <block pos:start="135:24" pos:end="149:13">{<block_content pos:start="139:17" pos:end="147:32">

<cpp:if pos:start="137:1" pos:end="137:26">#<cpp:directive pos:start="137:2" pos:end="137:3">if</cpp:directive> <expr pos:start="137:5" pos:end="137:26"><call pos:start="137:5" pos:end="137:26"><name pos:start="137:5" pos:end="137:11">defined</name><argument_list pos:start="137:12" pos:end="137:26">(<argument pos:start="137:13" pos:end="137:25"><expr pos:start="137:13" pos:end="137:25"><name pos:start="137:13" pos:end="137:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="139:17" pos:end="146:0"><if pos:start="139:17" pos:end="146:0">if <condition pos:start="139:20" pos:end="139:43">(<expr pos:start="139:21" pos:end="139:42"><name pos:start="139:21" pos:end="139:28">loglevel</name> <operator pos:start="139:30" pos:end="139:30">&amp;</operator> <name pos:start="139:32" pos:end="139:42">CPU_LOG_INT</name></expr>)</condition> <block pos:start="139:45" pos:end="146:0">{<block_content pos:start="141:21" pos:end="141:69">

                    <expr_stmt pos:start="141:21" pos:end="141:69"><expr pos:start="141:21" pos:end="141:68"><call pos:start="141:21" pos:end="141:68"><name pos:start="141:21" pos:end="141:27">fprintf</name><argument_list pos:start="141:28" pos:end="141:68">(<argument pos:start="141:29" pos:end="141:35"><expr pos:start="141:29" pos:end="141:35"><name pos:start="141:29" pos:end="141:35">logfile</name></expr></argument>, <argument pos:start="141:38" pos:end="141:57"><expr pos:start="141:38" pos:end="141:57"><literal type="string" pos:start="141:38" pos:end="141:57">"%s: stop the CPU\n"</literal></expr></argument>, <argument pos:start="141:60" pos:end="141:67"><expr pos:start="141:60" pos:end="141:67"><name pos:start="141:60" pos:end="141:67">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="147:17" pos:end="147:32"><expr pos:start="147:17" pos:end="147:31"><name pos:start="147:17" pos:end="147:27"><name pos:start="147:17" pos:end="147:19">env</name><operator pos:start="147:20" pos:end="147:21">-&gt;</operator><name pos:start="147:22" pos:end="147:27">halted</name></name> <operator pos:start="147:29" pos:end="147:29">=</operator> <literal type="number" pos:start="147:31" pos:end="147:31">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="151:13" pos:end="151:18">break;</break>

        <case pos:start="153:9" pos:end="153:33">case <expr pos:start="153:14" pos:end="153:32"><name pos:start="153:14" pos:end="153:32">PPC6xx_INPUT_HRESET</name></expr>:</case>

            <comment type="block" pos:start="155:13" pos:end="155:46">/* Level sensitive - active low */</comment>

            <if_stmt pos:start="157:13" pos:end="175:13"><if pos:start="157:13" pos:end="175:13">if <condition pos:start="157:16" pos:end="157:22">(<expr pos:start="157:17" pos:end="157:21"><name pos:start="157:17" pos:end="157:21">level</name></expr>)</condition> <block pos:start="157:24" pos:end="175:13">{<block_content>

<cpp:if pos:start="159:1" pos:end="159:5">#<cpp:directive pos:start="159:2" pos:end="159:3">if</cpp:directive> <expr pos:start="159:5" pos:end="159:5"><literal type="number" pos:start="159:5" pos:end="159:5">0</literal></expr></cpp:if> <comment type="line" pos:start="159:7" pos:end="159:19">// XXX: TOFIX</comment>

<cpp:if pos:start="161:1" pos:end="161:26">#<cpp:directive pos:start="161:2" pos:end="161:3">if</cpp:directive> <expr pos:start="161:5" pos:end="161:26"><call pos:start="161:5" pos:end="161:26"><name pos:start="161:5" pos:end="161:11">defined</name><argument_list pos:start="161:12" pos:end="161:26">(<argument pos:start="161:13" pos:end="161:25"><expr pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

                if (loglevel &amp; CPU_LOG_INT) {

                    fprintf(logfile, "%s: reset the CPU\n", __func__);

                }

<cpp:endif pos:start="169:1" pos:end="169:6">#<cpp:directive pos:start="169:2" pos:end="169:6">endif</cpp:directive></cpp:endif>

                cpu_reset(env);

<cpp:endif pos:start="173:1" pos:end="173:6">#<cpp:directive pos:start="173:2" pos:end="173:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if></if_stmt>

            <break pos:start="177:13" pos:end="177:18">break;</break>

        <case pos:start="179:9" pos:end="182:0">case <expr pos:start="179:14" pos:end="179:32"><name pos:start="179:14" pos:end="179:32">PPC6xx_INPUT_SRESET</name></expr>:</case>

<cpp:if pos:start="181:1" pos:end="181:26">#<cpp:directive pos:start="181:2" pos:end="181:3">if</cpp:directive> <expr pos:start="181:5" pos:end="181:26"><call pos:start="181:5" pos:end="181:26"><name pos:start="181:5" pos:end="181:11">defined</name><argument_list pos:start="181:12" pos:end="181:26">(<argument pos:start="181:13" pos:end="181:25"><expr pos:start="181:13" pos:end="181:25"><name pos:start="181:13" pos:end="181:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="183:13" pos:end="192:0"><if pos:start="183:13" pos:end="192:0">if <condition pos:start="183:16" pos:end="183:39">(<expr pos:start="183:17" pos:end="183:38"><name pos:start="183:17" pos:end="183:24">loglevel</name> <operator pos:start="183:26" pos:end="183:26">&amp;</operator> <name pos:start="183:28" pos:end="183:38">CPU_LOG_INT</name></expr>)</condition> <block pos:start="183:41" pos:end="192:0">{<block_content pos:start="185:17" pos:end="187:41">

                <expr_stmt pos:start="185:17" pos:end="187:41"><expr pos:start="185:17" pos:end="187:40"><call pos:start="185:17" pos:end="187:40"><name pos:start="185:17" pos:end="185:23">fprintf</name><argument_list pos:start="185:24" pos:end="187:40">(<argument pos:start="185:25" pos:end="185:31"><expr pos:start="185:25" pos:end="185:31"><name pos:start="185:25" pos:end="185:31">logfile</name></expr></argument>, <argument pos:start="185:34" pos:end="185:70"><expr pos:start="185:34" pos:end="185:70"><literal type="string" pos:start="185:34" pos:end="185:70">"%s: set the RESET IRQ state to %d\n"</literal></expr></argument>,

                        <argument pos:start="187:25" pos:end="187:32"><expr pos:start="187:25" pos:end="187:32"><name pos:start="187:25" pos:end="187:32">__func__</name></expr></argument>, <argument pos:start="187:35" pos:end="187:39"><expr pos:start="187:35" pos:end="187:39"><name pos:start="187:35" pos:end="187:39">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="193:13" pos:end="193:57"><expr pos:start="193:13" pos:end="193:56"><call pos:start="193:13" pos:end="193:56"><name pos:start="193:13" pos:end="193:23">ppc_set_irq</name><argument_list pos:start="193:24" pos:end="193:56">(<argument pos:start="193:25" pos:end="193:27"><expr pos:start="193:25" pos:end="193:27"><name pos:start="193:25" pos:end="193:27">env</name></expr></argument>, <argument pos:start="193:30" pos:end="193:48"><expr pos:start="193:30" pos:end="193:48"><name pos:start="193:30" pos:end="193:48">PPC_INTERRUPT_RESET</name></expr></argument>, <argument pos:start="193:51" pos:end="193:55"><expr pos:start="193:51" pos:end="193:55"><name pos:start="193:51" pos:end="193:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>

        <default pos:start="197:9" pos:end="202:0">default:</default>

            <comment type="block" pos:start="199:13" pos:end="199:42">/* Unknown pin - do nothing */</comment>

<cpp:if pos:start="201:1" pos:end="201:26">#<cpp:directive pos:start="201:2" pos:end="201:3">if</cpp:directive> <expr pos:start="201:5" pos:end="201:26"><call pos:start="201:5" pos:end="201:26"><name pos:start="201:5" pos:end="201:11">defined</name><argument_list pos:start="201:12" pos:end="201:26">(<argument pos:start="201:13" pos:end="201:25"><expr pos:start="201:13" pos:end="201:25"><name pos:start="201:13" pos:end="201:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="203:13" pos:end="210:0"><if pos:start="203:13" pos:end="210:0">if <condition pos:start="203:16" pos:end="203:39">(<expr pos:start="203:17" pos:end="203:38"><name pos:start="203:17" pos:end="203:24">loglevel</name> <operator pos:start="203:26" pos:end="203:26">&amp;</operator> <name pos:start="203:28" pos:end="203:38">CPU_LOG_INT</name></expr>)</condition> <block pos:start="203:41" pos:end="210:0">{<block_content pos:start="205:17" pos:end="205:76">

                <expr_stmt pos:start="205:17" pos:end="205:76"><expr pos:start="205:17" pos:end="205:75"><call pos:start="205:17" pos:end="205:75"><name pos:start="205:17" pos:end="205:23">fprintf</name><argument_list pos:start="205:24" pos:end="205:75">(<argument pos:start="205:25" pos:end="205:31"><expr pos:start="205:25" pos:end="205:31"><name pos:start="205:25" pos:end="205:31">logfile</name></expr></argument>, <argument pos:start="205:34" pos:end="205:59"><expr pos:start="205:34" pos:end="205:59"><literal type="string" pos:start="205:34" pos:end="205:59">"%s: unknown IRQ pin %d\n"</literal></expr></argument>, <argument pos:start="205:62" pos:end="205:69"><expr pos:start="205:62" pos:end="205:69"><name pos:start="205:62" pos:end="205:69">__func__</name></expr></argument>, <argument pos:start="205:72" pos:end="205:74"><expr pos:start="205:72" pos:end="205:74"><name pos:start="205:72" pos:end="205:74">pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

            <return pos:start="211:13" pos:end="211:19">return;</return>

        </block_content>}</block></switch>

        <if_stmt pos:start="215:9" pos:end="221:48"><if pos:start="215:9" pos:end="217:45">if <condition pos:start="215:12" pos:end="215:18">(<expr pos:start="215:13" pos:end="215:17"><name pos:start="215:13" pos:end="215:17">level</name></expr>)</condition><block type="pseudo" pos:start="217:13" pos:end="217:45"><block_content pos:start="217:13" pos:end="217:45">

            <expr_stmt pos:start="217:13" pos:end="217:45"><expr pos:start="217:13" pos:end="217:44"><name pos:start="217:13" pos:end="217:32"><name pos:start="217:13" pos:end="217:15">env</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:32">irq_input_state</name></name> <operator pos:start="217:34" pos:end="217:35">|=</operator> <literal type="number" pos:start="217:37" pos:end="217:37">1</literal> <operator pos:start="217:39" pos:end="217:40">&lt;&lt;</operator> <name pos:start="217:42" pos:end="217:44">pin</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="219:9" pos:end="221:48">else<block type="pseudo" pos:start="221:13" pos:end="221:48"><block_content pos:start="221:13" pos:end="221:48">

            <expr_stmt pos:start="221:13" pos:end="221:48"><expr pos:start="221:13" pos:end="221:47"><name pos:start="221:13" pos:end="221:32"><name pos:start="221:13" pos:end="221:15">env</name><operator pos:start="221:16" pos:end="221:17">-&gt;</operator><name pos:start="221:18" pos:end="221:32">irq_input_state</name></name> <operator pos:start="221:34" pos:end="221:35">&amp;=</operator> <operator pos:start="221:37" pos:end="221:37">~</operator><operator pos:start="221:38" pos:end="221:38">(</operator><literal type="number" pos:start="221:39" pos:end="221:39">1</literal> <operator pos:start="221:41" pos:end="221:42">&lt;&lt;</operator> <name pos:start="221:44" pos:end="221:46">pin</name><operator pos:start="221:47" pos:end="221:47">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
