<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25878.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:24"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:17">BlockAIOCB</name> <modifier pos:start="1:19" pos:end="1:19">*</modifier></type><name pos:start="1:20" pos:end="1:34">iscsi_aio_ioctl</name><parameter_list pos:start="1:35" pos:end="3:46">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>,
        <parameter pos:start="2:9" pos:end="2:29"><decl pos:start="2:9" pos:end="2:29"><type pos:start="2:9" pos:end="2:29"><name pos:start="2:9" pos:end="2:16">unsigned</name> <name pos:start="2:18" pos:end="2:21">long</name> <name pos:start="2:23" pos:end="2:25">int</name></type> <name pos:start="2:27" pos:end="2:29">req</name></decl></parameter>, <parameter pos:start="2:32" pos:end="2:40"><decl pos:start="2:32" pos:end="2:40"><type pos:start="2:32" pos:end="2:40"><name pos:start="2:32" pos:end="2:35">void</name> <modifier pos:start="2:37" pos:end="2:37">*</modifier></type><name pos:start="2:38" pos:end="2:40">buf</name></decl></parameter>,
        <parameter pos:start="3:9" pos:end="3:31"><decl pos:start="3:9" pos:end="3:31"><type pos:start="3:9" pos:end="3:31"><name pos:start="3:9" pos:end="3:27">BlockCompletionFunc</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:31">cb</name></decl></parameter>, <parameter pos:start="3:34" pos:end="3:45"><decl pos:start="3:34" pos:end="3:45"><type pos:start="3:34" pos:end="3:45"><name pos:start="3:34" pos:end="3:37">void</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:45">opaque</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="61:24">{<block_content pos:start="5:5" pos:end="61:24">
    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IscsiLun</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:22">iscsilun</name> <init pos:start="5:24" pos:end="5:35">= <expr pos:start="5:26" pos:end="5:35"><name pos:start="5:26" pos:end="5:35"><name pos:start="5:26" pos:end="5:27">bs</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:35">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:50"><decl pos:start="6:5" pos:end="6:49"><type pos:start="6:5" pos:end="6:26"><name pos:start="6:5" pos:end="6:24"><name pos:start="6:5" pos:end="6:10">struct</name> <name pos:start="6:12" pos:end="6:24">iscsi_context</name></name> <modifier pos:start="6:26" pos:end="6:26">*</modifier></type><name pos:start="6:27" pos:end="6:31">iscsi</name> <init pos:start="6:33" pos:end="6:49">= <expr pos:start="6:35" pos:end="6:49"><name pos:start="6:35" pos:end="6:49"><name pos:start="6:35" pos:end="6:42">iscsilun</name><operator pos:start="6:43" pos:end="6:44">-&gt;</operator><name pos:start="6:45" pos:end="6:49">iscsi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">iscsi_data</name></name></type> <name pos:start="7:23" pos:end="7:26">data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:20"><decl pos:start="8:5" pos:end="8:19"><type pos:start="8:5" pos:end="8:16"><name pos:start="8:5" pos:end="8:14">IscsiAIOCB</name> <modifier pos:start="8:16" pos:end="8:16">*</modifier></type><name pos:start="8:17" pos:end="8:19">acb</name></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:58"><expr pos:start="9:5" pos:end="9:57"><name pos:start="9:5" pos:end="9:7">acb</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:57"><name pos:start="9:11" pos:end="9:22">qemu_aio_get</name><argument_list pos:start="9:23" pos:end="9:57">(<argument pos:start="9:24" pos:end="9:40"><expr pos:start="9:24" pos:end="9:40"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><name pos:start="9:25" pos:end="9:40">iscsi_aiocb_info</name></expr></argument>, <argument pos:start="9:43" pos:end="9:44"><expr pos:start="9:43" pos:end="9:44"><name pos:start="9:43" pos:end="9:44">bs</name></expr></argument>, <argument pos:start="9:47" pos:end="9:48"><expr pos:start="9:47" pos:end="9:48"><name pos:start="9:47" pos:end="9:48">cb</name></expr></argument>, <argument pos:start="9:51" pos:end="9:56"><expr pos:start="9:51" pos:end="9:56"><name pos:start="9:51" pos:end="9:56">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:29"><expr pos:start="10:5" pos:end="10:28"><name pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:7">acb</name><operator pos:start="10:8" pos:end="10:9">-&gt;</operator><name pos:start="10:10" pos:end="10:17">iscsilun</name></name> <operator pos:start="10:19" pos:end="10:19">=</operator> <name pos:start="10:21" pos:end="10:28">iscsilun</name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:28"><expr pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:7">acb</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:11">bh</name></name>          <operator pos:start="11:22" pos:end="11:22">=</operator> <name pos:start="11:24" pos:end="11:27">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:36"><expr pos:start="12:5" pos:end="12:35"><name pos:start="12:5" pos:end="12:15"><name pos:start="12:5" pos:end="12:7">acb</name><operator pos:start="12:8" pos:end="12:9">-&gt;</operator><name pos:start="12:10" pos:end="12:15">status</name></name>      <operator pos:start="12:22" pos:end="12:22">=</operator> <operator pos:start="12:24" pos:end="12:24">-</operator><name pos:start="12:25" pos:end="12:35">EINPROGRESS</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:28"><expr pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:7">acb</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:12">buf</name></name>         <operator pos:start="13:22" pos:end="13:22">=</operator> <name pos:start="13:24" pos:end="13:27">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:27"><expr pos:start="14:5" pos:end="14:26"><name pos:start="14:5" pos:end="14:12"><name pos:start="14:5" pos:end="14:7">acb</name><operator pos:start="14:8" pos:end="14:9">-&gt;</operator><name pos:start="14:10" pos:end="14:12">ioh</name></name>         <operator pos:start="14:22" pos:end="14:22">=</operator> <name pos:start="14:24" pos:end="14:26">buf</name></expr>;</expr_stmt>
    <if_stmt pos:start="15:5" pos:end="61:24"><if pos:start="15:5" pos:end="61:24">if <condition pos:start="15:8" pos:end="15:21">(<expr pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:11">req</name> <operator pos:start="15:13" pos:end="15:14">!=</operator> <name pos:start="15:16" pos:end="15:20">SG_IO</name></expr>)</condition> <block pos:start="15:23" pos:end="61:24">{<block_content pos:start="16:9" pos:end="61:24">
        <expr_stmt pos:start="16:9" pos:end="16:51"><expr pos:start="16:9" pos:end="16:50"><call pos:start="16:9" pos:end="16:50"><name pos:start="16:9" pos:end="16:35">iscsi_ioctl_handle_emulated</name><argument_list pos:start="16:36" pos:end="16:50">(<argument pos:start="16:37" pos:end="16:39"><expr pos:start="16:37" pos:end="16:39"><name pos:start="16:37" pos:end="16:39">acb</name></expr></argument>, <argument pos:start="16:42" pos:end="16:44"><expr pos:start="16:42" pos:end="16:44"><name pos:start="16:42" pos:end="16:44">req</name></expr></argument>, <argument pos:start="16:47" pos:end="16:49"><expr pos:start="16:47" pos:end="16:49"><name pos:start="16:47" pos:end="16:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="17:9" pos:end="17:28">return <expr pos:start="17:16" pos:end="17:27"><operator pos:start="17:16" pos:end="17:16">&amp;</operator><name pos:start="17:17" pos:end="17:27"><name pos:start="17:17" pos:end="17:19">acb</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:27">common</name></name></expr>;</return>
    <expr_stmt pos:start="18:5" pos:end="18:49"><expr pos:start="18:5" pos:end="18:48"><name pos:start="18:5" pos:end="18:13"><name pos:start="18:5" pos:end="18:7">acb</name><operator pos:start="18:8" pos:end="18:9">-&gt;</operator><name pos:start="18:10" pos:end="18:13">task</name></name> <operator pos:start="18:15" pos:end="18:15">=</operator> <call pos:start="18:17" pos:end="18:48"><name pos:start="18:17" pos:end="18:22">malloc</name><argument_list pos:start="18:23" pos:end="18:48">(<argument pos:start="18:24" pos:end="18:47"><expr pos:start="18:24" pos:end="18:47"><sizeof pos:start="18:24" pos:end="18:47">sizeof<argument_list pos:start="18:30" pos:end="18:47">(<argument pos:start="18:31" pos:end="18:46"><expr pos:start="18:31" pos:end="18:46">struct <name pos:start="18:38" pos:end="18:46">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="19:5" pos:end="61:24"><if pos:start="19:5" pos:end="61:24">if <condition pos:start="19:8" pos:end="19:26">(<expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:11">acb</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:17">task</name></name> <operator pos:start="19:19" pos:end="19:20">==</operator> <name pos:start="19:22" pos:end="19:25">NULL</name></expr>)</condition> <block pos:start="19:28" pos:end="61:24">{<block_content pos:start="20:9" pos:end="61:24">
        <expr_stmt pos:start="20:9" pos:end="21:45"><expr pos:start="20:9" pos:end="21:44"><call pos:start="20:9" pos:end="21:44"><name pos:start="20:9" pos:end="20:20">error_report</name><argument_list pos:start="20:21" pos:end="21:44">(<argument pos:start="20:22" pos:end="20:74"><expr pos:start="20:22" pos:end="20:74"><literal type="string" pos:start="20:22" pos:end="20:74">"iSCSI: Failed to allocate task for scsi command. %s"</literal></expr></argument>,
                     <argument pos:start="21:22" pos:end="21:43"><expr pos:start="21:22" pos:end="21:43"><call pos:start="21:22" pos:end="21:43"><name pos:start="21:22" pos:end="21:36">iscsi_get_error</name><argument_list pos:start="21:37" pos:end="21:43">(<argument pos:start="21:38" pos:end="21:42"><expr pos:start="21:38" pos:end="21:42"><name pos:start="21:38" pos:end="21:42">iscsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:51"><expr pos:start="22:5" pos:end="22:50"><call pos:start="22:5" pos:end="22:50"><name pos:start="22:5" pos:end="22:10">memset</name><argument_list pos:start="22:11" pos:end="22:50">(<argument pos:start="22:12" pos:end="22:20"><expr pos:start="22:12" pos:end="22:20"><name pos:start="22:12" pos:end="22:20"><name pos:start="22:12" pos:end="22:14">acb</name><operator pos:start="22:15" pos:end="22:16">-&gt;</operator><name pos:start="22:17" pos:end="22:20">task</name></name></expr></argument>, <argument pos:start="22:23" pos:end="22:23"><expr pos:start="22:23" pos:end="22:23"><literal type="number" pos:start="22:23" pos:end="22:23">0</literal></expr></argument>, <argument pos:start="22:26" pos:end="22:49"><expr pos:start="22:26" pos:end="22:49"><sizeof pos:start="22:26" pos:end="22:49">sizeof<argument_list pos:start="22:32" pos:end="22:49">(<argument pos:start="22:33" pos:end="22:48"><expr pos:start="22:33" pos:end="22:48">struct <name pos:start="22:40" pos:end="22:48">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="23:5" pos:end="61:24">switch <condition pos:start="23:12" pos:end="23:38">(<expr pos:start="23:13" pos:end="23:37"><name pos:start="23:13" pos:end="23:37"><name pos:start="23:13" pos:end="23:15">acb</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:20">ioh</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:37">dxfer_direction</name></name></expr>)</condition> <block pos:start="23:40" pos:end="61:24">{<block_content pos:start="24:5" pos:end="61:24">
    <case pos:start="24:5" pos:end="24:25">case <expr pos:start="24:10" pos:end="24:24"><name pos:start="24:10" pos:end="24:24">SG_DXFER_TO_DEV</name></expr>:</case>
        <expr_stmt pos:start="25:9" pos:end="25:46"><expr pos:start="25:9" pos:end="25:45"><name pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:11">acb</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:17">task</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:27">xfer_dir</name></name> <operator pos:start="25:29" pos:end="25:29">=</operator> <name pos:start="25:31" pos:end="25:45">SCSI_XFER_WRITE</name></expr>;</expr_stmt>
        <break pos:start="26:9" pos:end="26:14">break;</break>
    <case pos:start="27:5" pos:end="27:27">case <expr pos:start="27:10" pos:end="27:26"><name pos:start="27:10" pos:end="27:26">SG_DXFER_FROM_DEV</name></expr>:</case>
        <expr_stmt pos:start="28:9" pos:end="28:45"><expr pos:start="28:9" pos:end="28:44"><name pos:start="28:9" pos:end="28:27"><name pos:start="28:9" pos:end="28:11">acb</name><operator pos:start="28:12" pos:end="28:13">-&gt;</operator><name pos:start="28:14" pos:end="28:17">task</name><operator pos:start="28:18" pos:end="28:19">-&gt;</operator><name pos:start="28:20" pos:end="28:27">xfer_dir</name></name> <operator pos:start="28:29" pos:end="28:29">=</operator> <name pos:start="28:31" pos:end="28:44">SCSI_XFER_READ</name></expr>;</expr_stmt>
        <break pos:start="29:9" pos:end="29:14">break;</break>
    <default pos:start="30:5" pos:end="30:12">default:</default>
        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:11">acb</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:17">task</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:27">xfer_dir</name></name> <operator pos:start="31:29" pos:end="31:29">=</operator> <name pos:start="31:31" pos:end="31:44">SCSI_XFER_NONE</name></expr>;</expr_stmt>
        <break pos:start="32:9" pos:end="32:14">break;</break>
    <expr_stmt pos:start="33:5" pos:end="33:44"><expr pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:7">acb</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:13">task</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:23">cdb_size</name></name> <operator pos:start="33:25" pos:end="33:25">=</operator> <name pos:start="33:27" pos:end="33:43"><name pos:start="33:27" pos:end="33:29">acb</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:34">ioh</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:43">cmd_len</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:66"><expr pos:start="34:5" pos:end="34:65"><call pos:start="34:5" pos:end="34:65"><name pos:start="34:5" pos:end="34:10">memcpy</name><argument_list pos:start="34:11" pos:end="34:65">(<argument pos:start="34:12" pos:end="34:29"><expr pos:start="34:12" pos:end="34:29"><operator pos:start="34:12" pos:end="34:12">&amp;</operator><name pos:start="34:13" pos:end="34:29"><name pos:start="34:13" pos:end="34:15">acb</name><operator pos:start="34:16" pos:end="34:17">-&gt;</operator><name pos:start="34:18" pos:end="34:21">task</name><operator pos:start="34:22" pos:end="34:23">-&gt;</operator><name pos:start="34:24" pos:end="34:26">cdb</name><index pos:start="34:27" pos:end="34:29">[<expr pos:start="34:28" pos:end="34:28"><literal type="number" pos:start="34:28" pos:end="34:28">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="34:32" pos:end="34:45"><expr pos:start="34:32" pos:end="34:45"><name pos:start="34:32" pos:end="34:45"><name pos:start="34:32" pos:end="34:34">acb</name><operator pos:start="34:35" pos:end="34:36">-&gt;</operator><name pos:start="34:37" pos:end="34:39">ioh</name><operator pos:start="34:40" pos:end="34:41">-&gt;</operator><name pos:start="34:42" pos:end="34:45">cmdp</name></name></expr></argument>, <argument pos:start="34:48" pos:end="34:64"><expr pos:start="34:48" pos:end="34:64"><name pos:start="34:48" pos:end="34:64"><name pos:start="34:48" pos:end="34:50">acb</name><operator pos:start="34:51" pos:end="34:52">-&gt;</operator><name pos:start="34:53" pos:end="34:55">ioh</name><operator pos:start="34:56" pos:end="34:57">-&gt;</operator><name pos:start="34:58" pos:end="34:64">cmd_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:48"><expr pos:start="35:5" pos:end="35:47"><name pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:7">acb</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:13">task</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:25">expxferlen</name></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:47"><name pos:start="35:29" pos:end="35:31">acb</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:36">ioh</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:47">dxfer_len</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:18"><expr pos:start="36:5" pos:end="36:17"><name pos:start="36:5" pos:end="36:13"><name pos:start="36:5" pos:end="36:8">data</name><operator pos:start="36:9" pos:end="36:9">.</operator><name pos:start="36:10" pos:end="36:13">size</name></name> <operator pos:start="36:15" pos:end="36:15">=</operator> <literal type="number" pos:start="36:17" pos:end="36:17">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="37:5" pos:end="61:24"><if pos:start="37:5" pos:end="61:24">if <condition pos:start="37:8" pos:end="37:47">(<expr pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:11">acb</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:17">task</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:27">xfer_dir</name></name> <operator pos:start="37:29" pos:end="37:30">==</operator> <name pos:start="37:32" pos:end="37:46">SCSI_XFER_WRITE</name></expr>)</condition> <block pos:start="37:49" pos:end="61:24">{<block_content pos:start="38:9" pos:end="61:24">
        <if_stmt pos:start="38:9" pos:end="61:24"><if pos:start="38:9" pos:end="41:9">if <condition pos:start="38:12" pos:end="38:39">(<expr pos:start="38:13" pos:end="38:38"><name pos:start="38:13" pos:end="38:33"><name pos:start="38:13" pos:end="38:15">acb</name><operator pos:start="38:16" pos:end="38:17">-&gt;</operator><name pos:start="38:18" pos:end="38:20">ioh</name><operator pos:start="38:21" pos:end="38:22">-&gt;</operator><name pos:start="38:23" pos:end="38:33">iovec_count</name></name> <operator pos:start="38:35" pos:end="38:36">==</operator> <literal type="number" pos:start="38:38" pos:end="38:38">0</literal></expr>)</condition> <block pos:start="38:41" pos:end="41:9">{<block_content pos:start="39:13" pos:end="40:44">
            <expr_stmt pos:start="39:13" pos:end="39:41"><expr pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:16">data</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:21">data</name></name> <operator pos:start="39:23" pos:end="39:23">=</operator> <name pos:start="39:25" pos:end="39:40"><name pos:start="39:25" pos:end="39:27">acb</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:32">ioh</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:40">dxferp</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="40:13" pos:end="40:44"><expr pos:start="40:13" pos:end="40:43"><name pos:start="40:13" pos:end="40:21"><name pos:start="40:13" pos:end="40:16">data</name><operator pos:start="40:17" pos:end="40:17">.</operator><name pos:start="40:18" pos:end="40:21">size</name></name> <operator pos:start="40:23" pos:end="40:23">=</operator> <name pos:start="40:25" pos:end="40:43"><name pos:start="40:25" pos:end="40:27">acb</name><operator pos:start="40:28" pos:end="40:29">-&gt;</operator><name pos:start="40:30" pos:end="40:32">ioh</name><operator pos:start="40:33" pos:end="40:34">-&gt;</operator><name pos:start="40:35" pos:end="40:43">dxfer_len</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="41:11" pos:end="61:24">else <block pos:start="41:16" pos:end="61:24">{<block_content pos:start="42:13" pos:end="61:24">
            <expr_stmt pos:start="42:13" pos:end="44:56"><expr pos:start="42:13" pos:end="44:55"><call pos:start="42:13" pos:end="44:55"><name pos:start="42:13" pos:end="42:33">scsi_task_set_iov_out</name><argument_list pos:start="42:34" pos:end="44:55">(<argument pos:start="42:35" pos:end="42:43"><expr pos:start="42:35" pos:end="42:43"><name pos:start="42:35" pos:end="42:43"><name pos:start="42:35" pos:end="42:37">acb</name><operator pos:start="42:38" pos:end="42:39">-&gt;</operator><name pos:start="42:40" pos:end="42:43">task</name></name></expr></argument>,
                                 <argument pos:start="43:34" pos:end="43:71"><expr pos:start="43:34" pos:end="43:71"><operator pos:start="43:34" pos:end="43:34">(</operator>struct <name pos:start="43:42" pos:end="43:51">scsi_iovec</name> <operator pos:start="43:53" pos:end="43:53">*</operator><operator pos:start="43:54" pos:end="43:54">)</operator> <name pos:start="43:56" pos:end="43:71"><name pos:start="43:56" pos:end="43:58">acb</name><operator pos:start="43:59" pos:end="43:60">-&gt;</operator><name pos:start="43:61" pos:end="43:63">ioh</name><operator pos:start="43:64" pos:end="43:65">-&gt;</operator><name pos:start="43:66" pos:end="43:71">dxferp</name></name></expr></argument>,
                                 <argument pos:start="44:34" pos:end="44:54"><expr pos:start="44:34" pos:end="44:54"><name pos:start="44:34" pos:end="44:54"><name pos:start="44:34" pos:end="44:36">acb</name><operator pos:start="44:37" pos:end="44:38">-&gt;</operator><name pos:start="44:39" pos:end="44:41">ioh</name><operator pos:start="44:42" pos:end="44:43">-&gt;</operator><name pos:start="44:44" pos:end="44:54">iovec_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="45:5" pos:end="61:24"><if pos:start="45:5" pos:end="61:24">if <condition pos:start="45:8" pos:end="48:43">(<expr pos:start="45:9" pos:end="48:42"><call pos:start="45:9" pos:end="48:37"><name pos:start="45:9" pos:end="45:32">iscsi_scsi_command_async</name><argument_list pos:start="45:33" pos:end="48:37">(<argument pos:start="45:34" pos:end="45:38"><expr pos:start="45:34" pos:end="45:38"><name pos:start="45:34" pos:end="45:38">iscsi</name></expr></argument>, <argument pos:start="45:41" pos:end="45:53"><expr pos:start="45:41" pos:end="45:53"><name pos:start="45:41" pos:end="45:53"><name pos:start="45:41" pos:end="45:48">iscsilun</name><operator pos:start="45:49" pos:end="45:50">-&gt;</operator><name pos:start="45:51" pos:end="45:53">lun</name></name></expr></argument>, <argument pos:start="45:56" pos:end="45:64"><expr pos:start="45:56" pos:end="45:64"><name pos:start="45:56" pos:end="45:64"><name pos:start="45:56" pos:end="45:58">acb</name><operator pos:start="45:59" pos:end="45:60">-&gt;</operator><name pos:start="45:61" pos:end="45:64">task</name></name></expr></argument>,
                                 <argument pos:start="46:34" pos:end="46:51"><expr pos:start="46:34" pos:end="46:51"><name pos:start="46:34" pos:end="46:51">iscsi_aio_ioctl_cb</name></expr></argument>,
                                 <argument pos:start="47:34" pos:end="47:63"><expr pos:start="47:34" pos:end="47:63"><ternary pos:start="47:34" pos:end="47:63"><condition pos:start="47:34" pos:end="47:50"><expr pos:start="47:34" pos:end="47:48"><operator pos:start="47:34" pos:end="47:34">(</operator><name pos:start="47:35" pos:end="47:43"><name pos:start="47:35" pos:end="47:38">data</name><operator pos:start="47:39" pos:end="47:39">.</operator><name pos:start="47:40" pos:end="47:43">size</name></name> <operator pos:start="47:45" pos:end="47:45">&gt;</operator> <literal type="number" pos:start="47:47" pos:end="47:47">0</literal><operator pos:start="47:48" pos:end="47:48">)</operator></expr> ?</condition><then pos:start="47:52" pos:end="47:56"> <expr pos:start="47:52" pos:end="47:56"><operator pos:start="47:52" pos:end="47:52">&amp;</operator><name pos:start="47:53" pos:end="47:56">data</name></expr> </then><else pos:start="47:58" pos:end="47:63">: <expr pos:start="47:60" pos:end="47:63"><name pos:start="47:60" pos:end="47:63">NULL</name></expr></else></ternary></expr></argument>,
                                 <argument pos:start="48:34" pos:end="48:36"><expr pos:start="48:34" pos:end="48:36"><name pos:start="48:34" pos:end="48:36">acb</name></expr></argument>)</argument_list></call> <operator pos:start="48:39" pos:end="48:40">!=</operator> <literal type="number" pos:start="48:42" pos:end="48:42">0</literal></expr>)</condition> <block pos:start="48:45" pos:end="61:24">{<block_content pos:start="49:9" pos:end="61:24">
        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><call pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:27">scsi_free_scsi_task</name><argument_list pos:start="49:28" pos:end="49:38">(<argument pos:start="49:29" pos:end="49:37"><expr pos:start="49:29" pos:end="49:37"><name pos:start="49:29" pos:end="49:37"><name pos:start="49:29" pos:end="49:31">acb</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:37">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="50:5" pos:end="50:74">/* tell libiscsi to read straight into the buffer we got from ioctl */</comment>
    <if_stmt pos:start="51:5" pos:end="61:24"><if pos:start="51:5" pos:end="61:24">if <condition pos:start="51:8" pos:end="51:46">(<expr pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:11">acb</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:17">task</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:27">xfer_dir</name></name> <operator pos:start="51:29" pos:end="51:30">==</operator> <name pos:start="51:32" pos:end="51:45">SCSI_XFER_READ</name></expr>)</condition> <block pos:start="51:48" pos:end="61:24">{<block_content pos:start="52:9" pos:end="61:24">
        <if_stmt pos:start="52:9" pos:end="61:24"><if pos:start="52:9" pos:end="56:9">if <condition pos:start="52:12" pos:end="52:39">(<expr pos:start="52:13" pos:end="52:38"><name pos:start="52:13" pos:end="52:33"><name pos:start="52:13" pos:end="52:15">acb</name><operator pos:start="52:16" pos:end="52:17">-&gt;</operator><name pos:start="52:18" pos:end="52:20">ioh</name><operator pos:start="52:21" pos:end="52:22">-&gt;</operator><name pos:start="52:23" pos:end="52:33">iovec_count</name></name> <operator pos:start="52:35" pos:end="52:36">==</operator> <literal type="number" pos:start="52:38" pos:end="52:38">0</literal></expr>)</condition> <block pos:start="52:41" pos:end="56:9">{<block_content pos:start="53:13" pos:end="55:59">
            <expr_stmt pos:start="53:13" pos:end="55:59"><expr pos:start="53:13" pos:end="55:58"><call pos:start="53:13" pos:end="55:58"><name pos:start="53:13" pos:end="53:40">scsi_task_add_data_in_buffer</name><argument_list pos:start="53:41" pos:end="55:58">(<argument pos:start="53:42" pos:end="53:50"><expr pos:start="53:42" pos:end="53:50"><name pos:start="53:42" pos:end="53:50"><name pos:start="53:42" pos:end="53:44">acb</name><operator pos:start="53:45" pos:end="53:46">-&gt;</operator><name pos:start="53:47" pos:end="53:50">task</name></name></expr></argument>,
                                         <argument pos:start="54:42" pos:end="54:60"><expr pos:start="54:42" pos:end="54:60"><name pos:start="54:42" pos:end="54:60"><name pos:start="54:42" pos:end="54:44">acb</name><operator pos:start="54:45" pos:end="54:46">-&gt;</operator><name pos:start="54:47" pos:end="54:49">ioh</name><operator pos:start="54:50" pos:end="54:51">-&gt;</operator><name pos:start="54:52" pos:end="54:60">dxfer_len</name></name></expr></argument>,
                                         <argument pos:start="55:42" pos:end="55:57"><expr pos:start="55:42" pos:end="55:57"><name pos:start="55:42" pos:end="55:57"><name pos:start="55:42" pos:end="55:44">acb</name><operator pos:start="55:45" pos:end="55:46">-&gt;</operator><name pos:start="55:47" pos:end="55:49">ioh</name><operator pos:start="55:50" pos:end="55:51">-&gt;</operator><name pos:start="55:52" pos:end="55:57">dxferp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="56:11" pos:end="61:24">else <block pos:start="56:16" pos:end="61:24">{<block_content pos:start="57:13" pos:end="61:24">
            <expr_stmt pos:start="57:13" pos:end="59:56"><expr pos:start="57:13" pos:end="59:55"><call pos:start="57:13" pos:end="59:55"><name pos:start="57:13" pos:end="57:32">scsi_task_set_iov_in</name><argument_list pos:start="57:33" pos:end="59:55">(<argument pos:start="57:34" pos:end="57:42"><expr pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:36">acb</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:42">task</name></name></expr></argument>,
                                 <argument pos:start="58:34" pos:end="58:71"><expr pos:start="58:34" pos:end="58:71"><operator pos:start="58:34" pos:end="58:34">(</operator>struct <name pos:start="58:42" pos:end="58:51">scsi_iovec</name> <operator pos:start="58:53" pos:end="58:53">*</operator><operator pos:start="58:54" pos:end="58:54">)</operator> <name pos:start="58:56" pos:end="58:71"><name pos:start="58:56" pos:end="58:58">acb</name><operator pos:start="58:59" pos:end="58:60">-&gt;</operator><name pos:start="58:61" pos:end="58:63">ioh</name><operator pos:start="58:64" pos:end="58:65">-&gt;</operator><name pos:start="58:66" pos:end="58:71">dxferp</name></name></expr></argument>,
                                 <argument pos:start="59:34" pos:end="59:54"><expr pos:start="59:34" pos:end="59:54"><name pos:start="59:34" pos:end="59:54"><name pos:start="59:34" pos:end="59:36">acb</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:41">ioh</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:54">iovec_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="60:5" pos:end="60:31"><expr pos:start="60:5" pos:end="60:30"><call pos:start="60:5" pos:end="60:30"><name pos:start="60:5" pos:end="60:20">iscsi_set_events</name><argument_list pos:start="60:21" pos:end="60:30">(<argument pos:start="60:22" pos:end="60:29"><expr pos:start="60:22" pos:end="60:29"><name pos:start="60:22" pos:end="60:29">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="61:5" pos:end="61:24">return <expr pos:start="61:12" pos:end="61:23"><operator pos:start="61:12" pos:end="61:12">&amp;</operator><name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:15">acb</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:23">common</name></name></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
