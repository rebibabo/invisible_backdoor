<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/481.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">iothread_complete</name><parameter_list pos:start="1:30" pos:end="1:63">(<parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><name pos:start="1:31" pos:end="1:43">UserCreatable</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">obj</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:49">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IOThread</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:22">iothread</name> <init pos:start="5:24" pos:end="5:38">= <expr pos:start="5:26" pos:end="5:38"><call pos:start="5:26" pos:end="5:38"><name pos:start="5:26" pos:end="5:33">IOTHREAD</name><argument_list pos:start="5:34" pos:end="5:38">(<argument pos:start="5:35" pos:end="5:37"><expr pos:start="5:35" pos:end="5:37"><name pos:start="5:35" pos:end="5:37">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:31"><expr pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:12">iothread</name><operator pos:start="9:13" pos:end="9:14">-&gt;</operator><name pos:start="9:15" pos:end="9:22">stopping</name></name> <operator pos:start="9:24" pos:end="9:24">=</operator> <name pos:start="9:26" pos:end="9:30">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:38"><expr pos:start="11:5" pos:end="11:37"><name pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">iothread</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:17">ctx</name></name> <operator pos:start="11:19" pos:end="11:19">=</operator> <call pos:start="11:21" pos:end="11:37"><name pos:start="11:21" pos:end="11:35">aio_context_new</name><argument_list pos:start="11:36" pos:end="11:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:12">iothread</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:23">thread_id</name></name> <operator pos:start="13:25" pos:end="13:25">=</operator> <operator pos:start="13:27" pos:end="13:27">-</operator><literal type="number" pos:start="13:28" pos:end="13:28">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:47"><expr pos:start="17:5" pos:end="17:46"><call pos:start="17:5" pos:end="17:46"><name pos:start="17:5" pos:end="17:19">qemu_mutex_init</name><argument_list pos:start="17:20" pos:end="17:46">(<argument pos:start="17:21" pos:end="17:45"><expr pos:start="17:21" pos:end="17:45"><operator pos:start="17:21" pos:end="17:21">&amp;</operator><name pos:start="17:22" pos:end="17:45"><name pos:start="17:22" pos:end="17:29">iothread</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:45">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:46"><expr pos:start="19:5" pos:end="19:45"><call pos:start="19:5" pos:end="19:45"><name pos:start="19:5" pos:end="19:18">qemu_cond_init</name><argument_list pos:start="19:19" pos:end="19:45">(<argument pos:start="19:20" pos:end="19:44"><expr pos:start="19:20" pos:end="19:44"><operator pos:start="19:20" pos:end="19:20">&amp;</operator><name pos:start="19:21" pos:end="19:44"><name pos:start="19:21" pos:end="19:28">iothread</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:44">init_done_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="27:7">/* This assumes we are called from a thread with useful CPU affinity for us

     * to inherit.

     */</comment>

    <expr_stmt pos:start="29:5" pos:end="31:55"><expr pos:start="29:5" pos:end="31:54"><call pos:start="29:5" pos:end="31:54"><name pos:start="29:5" pos:end="29:22">qemu_thread_create</name><argument_list pos:start="29:23" pos:end="31:54">(<argument pos:start="29:24" pos:end="29:40"><expr pos:start="29:24" pos:end="29:40"><operator pos:start="29:24" pos:end="29:24">&amp;</operator><name pos:start="29:25" pos:end="29:40"><name pos:start="29:25" pos:end="29:32">iothread</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:40">thread</name></name></expr></argument>, <argument pos:start="29:43" pos:end="29:52"><expr pos:start="29:43" pos:end="29:52"><literal type="string" pos:start="29:43" pos:end="29:52">"iothread"</literal></expr></argument>, <argument pos:start="29:55" pos:end="29:66"><expr pos:start="29:55" pos:end="29:66"><name pos:start="29:55" pos:end="29:66">iothread_run</name></expr></argument>,

                       <argument pos:start="31:24" pos:end="31:31"><expr pos:start="31:24" pos:end="31:31"><name pos:start="31:24" pos:end="31:31">iothread</name></expr></argument>, <argument pos:start="31:34" pos:end="31:53"><expr pos:start="31:34" pos:end="31:53"><name pos:start="31:34" pos:end="31:53">QEMU_THREAD_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:45">/* Wait for initialization to complete */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:47"><expr pos:start="37:5" pos:end="37:46"><call pos:start="37:5" pos:end="37:46"><name pos:start="37:5" pos:end="37:19">qemu_mutex_lock</name><argument_list pos:start="37:20" pos:end="37:46">(<argument pos:start="37:21" pos:end="37:45"><expr pos:start="37:21" pos:end="37:45"><operator pos:start="37:21" pos:end="37:21">&amp;</operator><name pos:start="37:22" pos:end="37:45"><name pos:start="37:22" pos:end="37:29">iothread</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:45">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="39:5" pos:end="45:5">while <condition pos:start="39:11" pos:end="39:37">(<expr pos:start="39:12" pos:end="39:36"><name pos:start="39:12" pos:end="39:30"><name pos:start="39:12" pos:end="39:19">iothread</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:30">thread_id</name></name> <operator pos:start="39:32" pos:end="39:33">==</operator> <operator pos:start="39:35" pos:end="39:35">-</operator><literal type="number" pos:start="39:36" pos:end="39:36">1</literal></expr>)</condition> <block pos:start="39:39" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:50">

        <expr_stmt pos:start="41:9" pos:end="43:50"><expr pos:start="41:9" pos:end="43:49"><call pos:start="41:9" pos:end="43:49"><name pos:start="41:9" pos:end="41:22">qemu_cond_wait</name><argument_list pos:start="41:23" pos:end="43:49">(<argument pos:start="41:24" pos:end="41:48"><expr pos:start="41:24" pos:end="41:48"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:48"><name pos:start="41:25" pos:end="41:32">iothread</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:48">init_done_cond</name></name></expr></argument>,

                       <argument pos:start="43:24" pos:end="43:48"><expr pos:start="43:24" pos:end="43:48"><operator pos:start="43:24" pos:end="43:24">&amp;</operator><name pos:start="43:25" pos:end="43:48"><name pos:start="43:25" pos:end="43:32">iothread</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:48">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="47:5" pos:end="47:49"><expr pos:start="47:5" pos:end="47:48"><call pos:start="47:5" pos:end="47:48"><name pos:start="47:5" pos:end="47:21">qemu_mutex_unlock</name><argument_list pos:start="47:22" pos:end="47:48">(<argument pos:start="47:23" pos:end="47:47"><expr pos:start="47:23" pos:end="47:47"><operator pos:start="47:23" pos:end="47:23">&amp;</operator><name pos:start="47:24" pos:end="47:47"><name pos:start="47:24" pos:end="47:31">iothread</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:47">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
