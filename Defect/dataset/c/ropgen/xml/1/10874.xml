<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10874.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">test_tco_timeout</name><parameter_list pos:start="1:29" pos:end="1:34">(<parameter pos:start="1:30" pos:end="1:33"><decl pos:start="1:30" pos:end="1:33"><type pos:start="1:30" pos:end="1:33"><name pos:start="1:30" pos:end="1:33">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:16">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">TestData</name></type> <name pos:start="5:14" pos:end="5:14">d</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:18"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:18">uint16_t</name></type> <name pos:start="7:20" pos:end="7:24">ticks</name> <init pos:start="7:26" pos:end="7:47">= <expr pos:start="7:28" pos:end="7:47"><call pos:start="7:28" pos:end="7:47"><name pos:start="7:28" pos:end="7:44">TCO_SECS_TO_TICKS</name><argument_list pos:start="7:45" pos:end="7:47">(<argument pos:start="7:46" pos:end="7:46"><expr pos:start="7:46" pos:end="7:46"><literal type="number" pos:start="7:46" pos:end="7:46">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:18"><expr pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:5">d</name><operator pos:start="15:6" pos:end="15:6">.</operator><name pos:start="15:7" pos:end="15:10">args</name></name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:17">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:22"><expr pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:5">d</name><operator pos:start="17:6" pos:end="17:6">.</operator><name pos:start="17:7" pos:end="17:14">noreboot</name></name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:21">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:18"><expr pos:start="19:5" pos:end="19:17"><call pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:13">test_init</name><argument_list pos:start="19:14" pos:end="19:17">(<argument pos:start="19:15" pos:end="19:16"><expr pos:start="19:15" pos:end="19:16"><operator pos:start="19:15" pos:end="19:15">&amp;</operator><name pos:start="19:16" pos:end="19:16">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:17"><expr pos:start="23:5" pos:end="23:16"><call pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">stop_tco</name><argument_list pos:start="23:13" pos:end="23:16">(<argument pos:start="23:14" pos:end="23:15"><expr pos:start="23:14" pos:end="23:15"><operator pos:start="23:14" pos:end="23:14">&amp;</operator><name pos:start="23:15" pos:end="23:15">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><call pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:20">clear_tco_status</name><argument_list pos:start="25:21" pos:end="25:24">(<argument pos:start="25:22" pos:end="25:23"><expr pos:start="25:22" pos:end="25:23"><operator pos:start="25:22" pos:end="25:22">&amp;</operator><name pos:start="25:23" pos:end="25:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><call pos:start="27:5" pos:end="27:34"><name pos:start="27:5" pos:end="27:27">reset_on_second_timeout</name><argument_list pos:start="27:28" pos:end="27:34">(<argument pos:start="27:29" pos:end="27:33"><expr pos:start="27:29" pos:end="27:33"><name pos:start="27:29" pos:end="27:33">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><call pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:19">set_tco_timeout</name><argument_list pos:start="29:20" pos:end="29:30">(<argument pos:start="29:21" pos:end="29:22"><expr pos:start="29:21" pos:end="29:22"><operator pos:start="29:21" pos:end="29:21">&amp;</operator><name pos:start="29:22" pos:end="29:22">d</name></expr></argument>, <argument pos:start="29:25" pos:end="29:29"><expr pos:start="29:25" pos:end="29:29"><name pos:start="29:25" pos:end="29:29">ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><call pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12">load_tco</name><argument_list pos:start="31:13" pos:end="31:16">(<argument pos:start="31:14" pos:end="31:15"><expr pos:start="31:14" pos:end="31:15"><operator pos:start="31:14" pos:end="31:14">&amp;</operator><name pos:start="31:15" pos:end="31:15">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:18"><expr pos:start="33:5" pos:end="33:17"><call pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:13">start_tco</name><argument_list pos:start="33:14" pos:end="33:17">(<argument pos:start="33:15" pos:end="33:16"><expr pos:start="33:15" pos:end="33:16"><operator pos:start="33:15" pos:end="33:15">&amp;</operator><name pos:start="33:16" pos:end="33:16">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:38"><expr pos:start="35:5" pos:end="35:37"><call pos:start="35:5" pos:end="35:37"><name pos:start="35:5" pos:end="35:14">clock_step</name><argument_list pos:start="35:15" pos:end="35:37">(<argument pos:start="35:16" pos:end="35:36"><expr pos:start="35:16" pos:end="35:36"><name pos:start="35:16" pos:end="35:20">ticks</name> <operator pos:start="35:22" pos:end="35:22">*</operator> <name pos:start="35:24" pos:end="35:36">TCO_TICK_NSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:28">/* test first timeout */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:57"><expr pos:start="41:5" pos:end="41:56"><name pos:start="41:5" pos:end="41:7">val</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:56"><name pos:start="41:11" pos:end="41:23">qpci_io_readw</name><argument_list pos:start="41:24" pos:end="41:56">(<argument pos:start="41:25" pos:end="41:29"><expr pos:start="41:25" pos:end="41:29"><name pos:start="41:25" pos:end="41:29"><name pos:start="41:25" pos:end="41:25">d</name><operator pos:start="41:26" pos:end="41:26">.</operator><name pos:start="41:27" pos:end="41:29">dev</name></name></expr></argument>, <argument pos:start="41:32" pos:end="41:55"><expr pos:start="41:32" pos:end="41:55"><name pos:start="41:32" pos:end="41:44"><name pos:start="41:32" pos:end="41:32">d</name><operator pos:start="41:33" pos:end="41:33">.</operator><name pos:start="41:34" pos:end="41:44">tco_io_base</name></name> <operator pos:start="41:46" pos:end="41:46">+</operator> <name pos:start="41:48" pos:end="41:55">TCO1_STS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:36"><expr pos:start="43:5" pos:end="43:35"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <ternary pos:start="43:11" pos:end="43:35"><condition pos:start="43:11" pos:end="43:29"><expr pos:start="43:11" pos:end="43:27"><name pos:start="43:11" pos:end="43:13">val</name> <operator pos:start="43:15" pos:end="43:15">&amp;</operator> <name pos:start="43:17" pos:end="43:27">TCO_TIMEOUT</name></expr> ?</condition><then pos:start="43:31" pos:end="43:31"> <expr pos:start="43:31" pos:end="43:31"><literal type="number" pos:start="43:31" pos:end="43:31">1</literal></expr> </then><else pos:start="43:33" pos:end="43:35">: <expr pos:start="43:35" pos:end="43:35"><literal type="number" pos:start="43:35" pos:end="43:35">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:23"><expr pos:start="45:5" pos:end="45:22"><call pos:start="45:5" pos:end="45:22"><name pos:start="45:5" pos:end="45:12">g_assert</name><argument_list pos:start="45:13" pos:end="45:22">(<argument pos:start="45:14" pos:end="45:21"><expr pos:start="45:14" pos:end="45:21"><name pos:start="45:14" pos:end="45:16">ret</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:35">/* test clearing timeout bit */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:23"><expr pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:7">val</name> <operator pos:start="51:9" pos:end="51:10">|=</operator> <name pos:start="51:12" pos:end="51:22">TCO_TIMEOUT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:57"><expr pos:start="53:5" pos:end="53:56"><call pos:start="53:5" pos:end="53:56"><name pos:start="53:5" pos:end="53:18">qpci_io_writew</name><argument_list pos:start="53:19" pos:end="53:56">(<argument pos:start="53:20" pos:end="53:24"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:20">d</name><operator pos:start="53:21" pos:end="53:21">.</operator><name pos:start="53:22" pos:end="53:24">dev</name></name></expr></argument>, <argument pos:start="53:27" pos:end="53:50"><expr pos:start="53:27" pos:end="53:50"><name pos:start="53:27" pos:end="53:39"><name pos:start="53:27" pos:end="53:27">d</name><operator pos:start="53:28" pos:end="53:28">.</operator><name pos:start="53:29" pos:end="53:39">tco_io_base</name></name> <operator pos:start="53:41" pos:end="53:41">+</operator> <name pos:start="53:43" pos:end="53:50">TCO1_STS</name></expr></argument>, <argument pos:start="53:53" pos:end="53:55"><expr pos:start="53:53" pos:end="53:55"><name pos:start="53:53" pos:end="53:55">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:57"><expr pos:start="55:5" pos:end="55:56"><name pos:start="55:5" pos:end="55:7">val</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:56"><name pos:start="55:11" pos:end="55:23">qpci_io_readw</name><argument_list pos:start="55:24" pos:end="55:56">(<argument pos:start="55:25" pos:end="55:29"><expr pos:start="55:25" pos:end="55:29"><name pos:start="55:25" pos:end="55:29"><name pos:start="55:25" pos:end="55:25">d</name><operator pos:start="55:26" pos:end="55:26">.</operator><name pos:start="55:27" pos:end="55:29">dev</name></name></expr></argument>, <argument pos:start="55:32" pos:end="55:55"><expr pos:start="55:32" pos:end="55:55"><name pos:start="55:32" pos:end="55:44"><name pos:start="55:32" pos:end="55:32">d</name><operator pos:start="55:33" pos:end="55:33">.</operator><name pos:start="55:34" pos:end="55:44">tco_io_base</name></name> <operator pos:start="55:46" pos:end="55:46">+</operator> <name pos:start="55:48" pos:end="55:55">TCO1_STS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:36"><expr pos:start="57:5" pos:end="57:35"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <ternary pos:start="57:11" pos:end="57:35"><condition pos:start="57:11" pos:end="57:29"><expr pos:start="57:11" pos:end="57:27"><name pos:start="57:11" pos:end="57:13">val</name> <operator pos:start="57:15" pos:end="57:15">&amp;</operator> <name pos:start="57:17" pos:end="57:27">TCO_TIMEOUT</name></expr> ?</condition><then pos:start="57:31" pos:end="57:31"> <expr pos:start="57:31" pos:end="57:31"><literal type="number" pos:start="57:31" pos:end="57:31">1</literal></expr> </then><else pos:start="57:33" pos:end="57:35">: <expr pos:start="57:35" pos:end="57:35"><literal type="number" pos:start="57:35" pos:end="57:35">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:23"><expr pos:start="59:5" pos:end="59:22"><call pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:12">g_assert</name><argument_list pos:start="59:13" pos:end="59:22">(<argument pos:start="59:14" pos:end="59:21"><expr pos:start="59:14" pos:end="59:21"><name pos:start="59:14" pos:end="59:16">ret</name> <operator pos:start="59:18" pos:end="59:19">==</operator> <literal type="number" pos:start="59:21" pos:end="59:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:29">/* test second timeout */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:38"><expr pos:start="65:5" pos:end="65:37"><call pos:start="65:5" pos:end="65:37"><name pos:start="65:5" pos:end="65:14">clock_step</name><argument_list pos:start="65:15" pos:end="65:37">(<argument pos:start="65:16" pos:end="65:36"><expr pos:start="65:16" pos:end="65:36"><name pos:start="65:16" pos:end="65:20">ticks</name> <operator pos:start="65:22" pos:end="65:22">*</operator> <name pos:start="65:24" pos:end="65:36">TCO_TICK_NSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:57"><expr pos:start="67:5" pos:end="67:56"><name pos:start="67:5" pos:end="67:7">val</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:56"><name pos:start="67:11" pos:end="67:23">qpci_io_readw</name><argument_list pos:start="67:24" pos:end="67:56">(<argument pos:start="67:25" pos:end="67:29"><expr pos:start="67:25" pos:end="67:29"><name pos:start="67:25" pos:end="67:29"><name pos:start="67:25" pos:end="67:25">d</name><operator pos:start="67:26" pos:end="67:26">.</operator><name pos:start="67:27" pos:end="67:29">dev</name></name></expr></argument>, <argument pos:start="67:32" pos:end="67:55"><expr pos:start="67:32" pos:end="67:55"><name pos:start="67:32" pos:end="67:44"><name pos:start="67:32" pos:end="67:32">d</name><operator pos:start="67:33" pos:end="67:33">.</operator><name pos:start="67:34" pos:end="67:44">tco_io_base</name></name> <operator pos:start="67:46" pos:end="67:46">+</operator> <name pos:start="67:48" pos:end="67:55">TCO1_STS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:36"><expr pos:start="69:5" pos:end="69:35"><name pos:start="69:5" pos:end="69:7">ret</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <ternary pos:start="69:11" pos:end="69:35"><condition pos:start="69:11" pos:end="69:29"><expr pos:start="69:11" pos:end="69:27"><name pos:start="69:11" pos:end="69:13">val</name> <operator pos:start="69:15" pos:end="69:15">&amp;</operator> <name pos:start="69:17" pos:end="69:27">TCO_TIMEOUT</name></expr> ?</condition><then pos:start="69:31" pos:end="69:31"> <expr pos:start="69:31" pos:end="69:31"><literal type="number" pos:start="69:31" pos:end="69:31">1</literal></expr> </then><else pos:start="69:33" pos:end="69:35">: <expr pos:start="69:35" pos:end="69:35"><literal type="number" pos:start="69:35" pos:end="69:35">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:23"><expr pos:start="71:5" pos:end="71:22"><call pos:start="71:5" pos:end="71:22"><name pos:start="71:5" pos:end="71:12">g_assert</name><argument_list pos:start="71:13" pos:end="71:22">(<argument pos:start="71:14" pos:end="71:21"><expr pos:start="71:14" pos:end="71:21"><name pos:start="71:14" pos:end="71:16">ret</name> <operator pos:start="71:18" pos:end="71:19">==</operator> <literal type="number" pos:start="71:21" pos:end="71:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:57"><expr pos:start="73:5" pos:end="73:56"><name pos:start="73:5" pos:end="73:7">val</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:56"><name pos:start="73:11" pos:end="73:23">qpci_io_readw</name><argument_list pos:start="73:24" pos:end="73:56">(<argument pos:start="73:25" pos:end="73:29"><expr pos:start="73:25" pos:end="73:29"><name pos:start="73:25" pos:end="73:29"><name pos:start="73:25" pos:end="73:25">d</name><operator pos:start="73:26" pos:end="73:26">.</operator><name pos:start="73:27" pos:end="73:29">dev</name></name></expr></argument>, <argument pos:start="73:32" pos:end="73:55"><expr pos:start="73:32" pos:end="73:55"><name pos:start="73:32" pos:end="73:44"><name pos:start="73:32" pos:end="73:32">d</name><operator pos:start="73:33" pos:end="73:33">.</operator><name pos:start="73:34" pos:end="73:44">tco_io_base</name></name> <operator pos:start="73:46" pos:end="73:46">+</operator> <name pos:start="73:48" pos:end="73:55">TCO2_STS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:42"><expr pos:start="75:5" pos:end="75:41"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <ternary pos:start="75:11" pos:end="75:41"><condition pos:start="75:11" pos:end="75:35"><expr pos:start="75:11" pos:end="75:33"><name pos:start="75:11" pos:end="75:13">val</name> <operator pos:start="75:15" pos:end="75:15">&amp;</operator> <name pos:start="75:17" pos:end="75:33">TCO_SECOND_TO_STS</name></expr> ?</condition><then pos:start="75:37" pos:end="75:37"> <expr pos:start="75:37" pos:end="75:37"><literal type="number" pos:start="75:37" pos:end="75:37">1</literal></expr> </then><else pos:start="75:39" pos:end="75:41">: <expr pos:start="75:41" pos:end="75:41"><literal type="number" pos:start="75:41" pos:end="75:41">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:23"><expr pos:start="77:5" pos:end="77:22"><call pos:start="77:5" pos:end="77:22"><name pos:start="77:5" pos:end="77:12">g_assert</name><argument_list pos:start="77:13" pos:end="77:22">(<argument pos:start="77:14" pos:end="77:21"><expr pos:start="77:14" pos:end="77:21"><name pos:start="77:14" pos:end="77:16">ret</name> <operator pos:start="77:18" pos:end="77:19">==</operator> <literal type="number" pos:start="77:21" pos:end="77:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:17"><expr pos:start="81:5" pos:end="81:16"><call pos:start="81:5" pos:end="81:16"><name pos:start="81:5" pos:end="81:12">stop_tco</name><argument_list pos:start="81:13" pos:end="81:16">(<argument pos:start="81:14" pos:end="81:15"><expr pos:start="81:14" pos:end="81:15"><operator pos:start="81:14" pos:end="81:14">&amp;</operator><name pos:start="81:15" pos:end="81:15">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:16"><expr pos:start="83:5" pos:end="83:15"><call pos:start="83:5" pos:end="83:15"><name pos:start="83:5" pos:end="83:13">qtest_end</name><argument_list pos:start="83:14" pos:end="83:15">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
