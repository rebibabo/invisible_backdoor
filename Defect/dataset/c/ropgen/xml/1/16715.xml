<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16715.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">laio_cancel</name><parameter_list pos:start="1:24" pos:end="1:51">(<parameter pos:start="1:25" pos:end="1:50"><decl pos:start="1:25" pos:end="1:50"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:40">BlockDriverAIOCB</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:50">blockacb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:5">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">qemu_laiocb</name></name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:30">laiocb</name> <init pos:start="5:32" pos:end="5:63">= <expr pos:start="5:34" pos:end="5:63"><operator pos:start="5:34" pos:end="5:34">(</operator>struct <name pos:start="5:42" pos:end="5:52">qemu_laiocb</name> <operator pos:start="5:54" pos:end="5:54">*</operator><operator pos:start="5:55" pos:end="5:55">)</operator><name pos:start="5:56" pos:end="5:63">blockacb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">io_event</name></name></type> <name pos:start="7:21" pos:end="7:25">event</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:15"><if pos:start="13:5" pos:end="15:15">if <condition pos:start="13:8" pos:end="13:36">(<expr pos:start="13:9" pos:end="13:35"><name pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:14">laiocb</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:19">ret</name></name> <operator pos:start="13:21" pos:end="13:22">!=</operator> <operator pos:start="13:24" pos:end="13:24">-</operator><name pos:start="13:25" pos:end="13:35">EINPROGRESS</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:15"><block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="27:7">/*

     * Note that as of Linux 2.6.31 neither the block device code nor any

     * filesystem implements cancellation of AIO request.

     * Thus the polling loop below is the normal code path.

     */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:61"><expr pos:start="29:5" pos:end="29:60"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:60"><name pos:start="29:11" pos:end="29:19">io_cancel</name><argument_list pos:start="29:20" pos:end="29:60">(<argument pos:start="29:21" pos:end="29:36"><expr pos:start="29:21" pos:end="29:36"><name pos:start="29:21" pos:end="29:36"><name pos:start="29:21" pos:end="29:26">laiocb</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:31">ctx</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:36">ctx</name></name></expr></argument>, <argument pos:start="29:39" pos:end="29:51"><expr pos:start="29:39" pos:end="29:51"><operator pos:start="29:39" pos:end="29:39">&amp;</operator><name pos:start="29:40" pos:end="29:51"><name pos:start="29:40" pos:end="29:45">laiocb</name><operator pos:start="29:46" pos:end="29:47">-&gt;</operator><name pos:start="29:48" pos:end="29:51">iocb</name></name></expr></argument>, <argument pos:start="29:54" pos:end="29:59"><expr pos:start="29:54" pos:end="29:59"><operator pos:start="29:54" pos:end="29:54">&amp;</operator><name pos:start="29:55" pos:end="29:59">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:17">(<expr pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:14">==</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>)</condition> <block pos:start="31:19" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:14">laiocb</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:19">ret</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <operator pos:start="33:23" pos:end="33:23">-</operator><name pos:start="33:24" pos:end="33:32">ECANCELED</name></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="53:7">/*

     * We have to wait for the iocb to finish.

     *

     * The only way to get the iocb status update is by polling the io context.

     * We might be able to do this slightly more optimal by removing the

     * O_NONBLOCK flag.

     */</comment>

    <while pos:start="55:5" pos:end="59:5">while <condition pos:start="55:11" pos:end="55:39">(<expr pos:start="55:12" pos:end="55:38"><name pos:start="55:12" pos:end="55:22"><name pos:start="55:12" pos:end="55:17">laiocb</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:22">ret</name></name> <operator pos:start="55:24" pos:end="55:25">==</operator> <operator pos:start="55:27" pos:end="55:27">-</operator><name pos:start="55:28" pos:end="55:38">EINPROGRESS</name></expr>)</condition> <block pos:start="55:41" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:49">

        <expr_stmt pos:start="57:9" pos:end="57:49"><expr pos:start="57:9" pos:end="57:48"><call pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:31">qemu_laio_completion_cb</name><argument_list pos:start="57:32" pos:end="57:48">(<argument pos:start="57:33" pos:end="57:47"><expr pos:start="57:33" pos:end="57:47"><operator pos:start="57:33" pos:end="57:33">&amp;</operator><name pos:start="57:34" pos:end="57:47"><name pos:start="57:34" pos:end="57:39">laiocb</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:44">ctx</name><operator pos:start="57:45" pos:end="57:46">-&gt;</operator><name pos:start="57:47" pos:end="57:47">e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
