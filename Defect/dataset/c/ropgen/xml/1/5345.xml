<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5345.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">qemu_chr_fe_write_buffer</name><parameter_list pos:start="1:36" pos:end="1:97">(<parameter pos:start="1:37" pos:end="1:54"><decl pos:start="1:37" pos:end="1:54"><type pos:start="1:37" pos:end="1:54"><name pos:start="1:37" pos:end="1:51">CharDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">s</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:74"><decl pos:start="1:57" pos:end="1:74"><type pos:start="1:57" pos:end="1:74"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:69">uint8_t</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">buf</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:83"><decl pos:start="1:77" pos:end="1:83"><type pos:start="1:77" pos:end="1:83"><name pos:start="1:77" pos:end="1:79">int</name></type> <name pos:start="1:81" pos:end="1:83">len</name></decl></parameter>, <parameter pos:start="1:86" pos:end="1:96"><decl pos:start="1:86" pos:end="1:96"><type pos:start="1:86" pos:end="1:96"><name pos:start="1:86" pos:end="1:88">int</name> <modifier pos:start="1:90" pos:end="1:90">*</modifier></type><name pos:start="1:91" pos:end="1:96">offset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">res</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:16"><expr pos:start="7:5" pos:end="7:15"><operator pos:start="7:5" pos:end="7:5">*</operator><name pos:start="7:6" pos:end="7:11">offset</name> <operator pos:start="7:13" pos:end="7:13">=</operator> <literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:40"><expr pos:start="11:5" pos:end="11:39"><call pos:start="11:5" pos:end="11:39"><name pos:start="11:5" pos:end="11:19">qemu_mutex_lock</name><argument_list pos:start="11:20" pos:end="11:39">(<argument pos:start="11:21" pos:end="11:38"><expr pos:start="11:21" pos:end="11:38"><operator pos:start="11:21" pos:end="11:21">&amp;</operator><name pos:start="11:22" pos:end="11:38"><name pos:start="11:22" pos:end="11:22">s</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:38">chr_write_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="13:5" pos:end="39:5">while <condition pos:start="13:11" pos:end="13:25">(<expr pos:start="13:12" pos:end="13:24"><operator pos:start="13:12" pos:end="13:12">*</operator><name pos:start="13:13" pos:end="13:18">offset</name> <operator pos:start="13:20" pos:end="13:20">&lt;</operator> <name pos:start="13:22" pos:end="13:24">len</name></expr>)</condition> <block pos:start="13:27" pos:end="39:5">{<block_content pos:start="15:9" pos:end="37:23">

        <do pos:start="15:9" pos:end="25:47">do <block pos:start="15:12" pos:end="25:9">{<block_content pos:start="17:13" pos:end="23:13">

            <expr_stmt pos:start="17:13" pos:end="17:64"><expr pos:start="17:13" pos:end="17:63"><name pos:start="17:13" pos:end="17:15">res</name> <operator pos:start="17:17" pos:end="17:17">=</operator> <call pos:start="17:19" pos:end="17:63"><name pos:start="17:19" pos:end="17:30"><name pos:start="17:19" pos:end="17:19">s</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:30">chr_write</name></name><argument_list pos:start="17:31" pos:end="17:63">(<argument pos:start="17:32" pos:end="17:32"><expr pos:start="17:32" pos:end="17:32"><name pos:start="17:32" pos:end="17:32">s</name></expr></argument>, <argument pos:start="17:35" pos:end="17:47"><expr pos:start="17:35" pos:end="17:47"><name pos:start="17:35" pos:end="17:37">buf</name> <operator pos:start="17:39" pos:end="17:39">+</operator> <operator pos:start="17:41" pos:end="17:41">*</operator><name pos:start="17:42" pos:end="17:47">offset</name></expr></argument>, <argument pos:start="17:50" pos:end="17:62"><expr pos:start="17:50" pos:end="17:62"><name pos:start="17:50" pos:end="17:52">len</name> <operator pos:start="17:54" pos:end="17:54">-</operator> <operator pos:start="17:56" pos:end="17:56">*</operator><name pos:start="17:57" pos:end="17:62">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="19:13" pos:end="23:13"><if pos:start="19:13" pos:end="23:13">if <condition pos:start="19:16" pos:end="19:45">(<expr pos:start="19:17" pos:end="19:44"><name pos:start="19:17" pos:end="19:19">res</name> <operator pos:start="19:21" pos:end="19:22">==</operator> <operator pos:start="19:24" pos:end="19:24">-</operator><literal type="number" pos:start="19:25" pos:end="19:25">1</literal> <operator pos:start="19:27" pos:end="19:28">&amp;&amp;</operator> <name pos:start="19:30" pos:end="19:34">errno</name> <operator pos:start="19:36" pos:end="19:37">==</operator> <name pos:start="19:39" pos:end="19:44">EAGAIN</name></expr>)</condition> <block pos:start="19:47" pos:end="23:13">{<block_content pos:start="21:17" pos:end="21:30">

                <expr_stmt pos:start="21:17" pos:end="21:30"><expr pos:start="21:17" pos:end="21:29"><call pos:start="21:17" pos:end="21:29"><name pos:start="21:17" pos:end="21:24">g_usleep</name><argument_list pos:start="21:25" pos:end="21:29">(<argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><literal type="number" pos:start="21:26" pos:end="21:28">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="25:17" pos:end="25:46">(<expr pos:start="25:18" pos:end="25:45"><name pos:start="25:18" pos:end="25:20">res</name> <operator pos:start="25:22" pos:end="25:23">==</operator> <operator pos:start="25:25" pos:end="25:25">-</operator><literal type="number" pos:start="25:26" pos:end="25:26">1</literal> <operator pos:start="25:28" pos:end="25:29">&amp;&amp;</operator> <name pos:start="25:31" pos:end="25:35">errno</name> <operator pos:start="25:37" pos:end="25:38">==</operator> <name pos:start="25:40" pos:end="25:45">EAGAIN</name></expr>)</condition>;</do>



        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:21">(<expr pos:start="29:13" pos:end="29:20"><name pos:start="29:13" pos:end="29:15">res</name> <operator pos:start="29:17" pos:end="29:18">&lt;=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>)</condition> <block pos:start="29:23" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:18">

            <break pos:start="31:13" pos:end="31:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><operator pos:start="37:9" pos:end="37:9">*</operator><name pos:start="37:10" pos:end="37:15">offset</name> <operator pos:start="37:17" pos:end="37:18">+=</operator> <name pos:start="37:20" pos:end="37:22">res</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:20">(<expr pos:start="41:9" pos:end="41:19"><operator pos:start="41:9" pos:end="41:9">*</operator><name pos:start="41:10" pos:end="41:15">offset</name> <operator pos:start="41:17" pos:end="41:17">&gt;</operator> <literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>)</condition> <block pos:start="41:22" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:47">

        <expr_stmt pos:start="43:9" pos:end="43:47"><expr pos:start="43:9" pos:end="43:46"><call pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:29">qemu_chr_fe_write_log</name><argument_list pos:start="43:30" pos:end="43:46">(<argument pos:start="43:31" pos:end="43:31"><expr pos:start="43:31" pos:end="43:31"><name pos:start="43:31" pos:end="43:31">s</name></expr></argument>, <argument pos:start="43:34" pos:end="43:36"><expr pos:start="43:34" pos:end="43:36"><name pos:start="43:34" pos:end="43:36">buf</name></expr></argument>, <argument pos:start="43:39" pos:end="43:45"><expr pos:start="43:39" pos:end="43:45"><operator pos:start="43:39" pos:end="43:39">*</operator><name pos:start="43:40" pos:end="43:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><call pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:21">qemu_mutex_unlock</name><argument_list pos:start="47:22" pos:end="47:41">(<argument pos:start="47:23" pos:end="47:40"><expr pos:start="47:23" pos:end="47:40"><operator pos:start="47:23" pos:end="47:23">&amp;</operator><name pos:start="47:24" pos:end="47:40"><name pos:start="47:24" pos:end="47:24">s</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:40">chr_write_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="51:5" pos:end="51:15">return <expr pos:start="51:12" pos:end="51:14"><name pos:start="51:12" pos:end="51:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
