<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17905.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">print_device_sources</name><parameter_list pos:start="1:32" pos:end="1:71">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:45">AVInputFormat</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">fmt</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:70"><decl pos:start="1:53" pos:end="1:70"><type pos:start="1:53" pos:end="1:70"><name pos:start="1:53" pos:end="1:64">AVDictionary</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">opts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:15">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">AVFormatContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">dev</name> <init pos:start="7:26" pos:end="7:31">= <expr pos:start="7:28" pos:end="7:31"><name pos:start="7:28" pos:end="7:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">AVDeviceInfoList</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:33">device_list</name> <init pos:start="9:35" pos:end="9:40">= <expr pos:start="9:37" pos:end="9:40"><name pos:start="9:37" pos:end="9:40">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">AVDictionary</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:26">tmp_opts</name> <init pos:start="11:28" pos:end="11:33">= <expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:31"><if pos:start="15:5" pos:end="17:31">if <condition pos:start="15:8" pos:end="15:84">(<expr pos:start="15:9" pos:end="15:83"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">fmt</name> <operator pos:start="15:14" pos:end="15:15">||</operator> <operator pos:start="15:17" pos:end="15:17">!</operator><name pos:start="15:18" pos:end="15:32"><name pos:start="15:18" pos:end="15:20">fmt</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:32">priv_class</name></name>  <operator pos:start="15:35" pos:end="15:36">||</operator> <operator pos:start="15:38" pos:end="15:38">!</operator><call pos:start="15:39" pos:end="15:83"><name pos:start="15:39" pos:end="15:56">AV_IS_INPUT_DEVICE</name><argument_list pos:start="15:57" pos:end="15:83">(<argument pos:start="15:58" pos:end="15:82"><expr pos:start="15:58" pos:end="15:82"><name pos:start="15:58" pos:end="15:82"><name pos:start="15:58" pos:end="15:60">fmt</name><operator pos:start="15:61" pos:end="15:62">-&gt;</operator><name pos:start="15:63" pos:end="15:72">priv_class</name><operator pos:start="15:73" pos:end="15:74">-&gt;</operator><name pos:start="15:75" pos:end="15:82">category</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:31"><block_content pos:start="17:9" pos:end="17:31">

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:57"><expr pos:start="21:5" pos:end="21:56"><call pos:start="21:5" pos:end="21:56"><name pos:start="21:5" pos:end="21:10">printf</name><argument_list pos:start="21:11" pos:end="21:56">(<argument pos:start="21:12" pos:end="21:44"><expr pos:start="21:12" pos:end="21:44"><literal type="string" pos:start="21:12" pos:end="21:44">"Audo-detected sources for %s:\n"</literal></expr></argument>, <argument pos:start="21:47" pos:end="21:55"><expr pos:start="21:47" pos:end="21:55"><name pos:start="21:47" pos:end="21:55"><name pos:start="21:47" pos:end="21:49">fmt</name><operator pos:start="21:50" pos:end="21:51">-&gt;</operator><name pos:start="21:52" pos:end="21:55">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:29"><name pos:start="23:10" pos:end="23:12">fmt</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:29">get_device_list</name></name></expr>)</condition> <block pos:start="23:32" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:18">

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:29"><name pos:start="25:15" pos:end="25:21">AVERROR</name><argument_list pos:start="25:22" pos:end="25:29">(<argument pos:start="25:23" pos:end="25:28"><expr pos:start="25:23" pos:end="25:28"><name pos:start="25:23" pos:end="25:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:58"><expr pos:start="27:9" pos:end="27:57"><call pos:start="27:9" pos:end="27:57"><name pos:start="27:9" pos:end="27:14">printf</name><argument_list pos:start="27:15" pos:end="27:57">(<argument pos:start="27:16" pos:end="27:56"><expr pos:start="27:16" pos:end="27:56"><literal type="string" pos:start="27:16" pos:end="27:56">"Cannot list sources. Not implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="37:93">/* TODO: avformat_open_input calls read_header callback which is not necessary.

             Function like avformat_alloc_output_context2 for input could be helpful here. */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><call pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:16">av_dict_copy</name><argument_list pos:start="39:17" pos:end="39:36">(<argument pos:start="39:18" pos:end="39:26"><expr pos:start="39:18" pos:end="39:26"><operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:26">tmp_opts</name></expr></argument>, <argument pos:start="39:29" pos:end="39:32"><expr pos:start="39:29" pos:end="39:32"><name pos:start="39:29" pos:end="39:32">opts</name></expr></argument>, <argument pos:start="39:35" pos:end="39:35"><expr pos:start="39:35" pos:end="39:35"><literal type="number" pos:start="39:35" pos:end="39:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:68">(<expr pos:start="41:9" pos:end="41:67"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:12">ret</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:62"><name pos:start="41:16" pos:end="41:34">avformat_open_input</name><argument_list pos:start="41:35" pos:end="41:62">(<argument pos:start="41:36" pos:end="41:39"><expr pos:start="41:36" pos:end="41:39"><operator pos:start="41:36" pos:end="41:36">&amp;</operator><name pos:start="41:37" pos:end="41:39">dev</name></expr></argument>, <argument pos:start="41:42" pos:end="41:45"><expr pos:start="41:42" pos:end="41:45"><name pos:start="41:42" pos:end="41:45">NULL</name></expr></argument>, <argument pos:start="41:48" pos:end="41:50"><expr pos:start="41:48" pos:end="41:50"><name pos:start="41:48" pos:end="41:50">fmt</name></expr></argument>, <argument pos:start="41:53" pos:end="41:61"><expr pos:start="41:53" pos:end="41:61"><operator pos:start="41:53" pos:end="41:53">&amp;</operator><name pos:start="41:54" pos:end="41:61">tmp_opts</name></expr></argument>)</argument_list></call><operator pos:start="41:63" pos:end="41:63">)</operator> <operator pos:start="41:65" pos:end="41:65">&lt;</operator> <literal type="number" pos:start="41:67" pos:end="41:67">0</literal></expr>)</condition> <block pos:start="41:70" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:55"><expr pos:start="43:9" pos:end="43:54"><call pos:start="43:9" pos:end="43:54"><name pos:start="43:9" pos:end="43:14">printf</name><argument_list pos:start="43:15" pos:end="43:54">(<argument pos:start="43:16" pos:end="43:42"><expr pos:start="43:16" pos:end="43:42"><literal type="string" pos:start="43:16" pos:end="43:42">"Cannot open device: %s.\n"</literal></expr></argument>, <argument pos:start="43:45" pos:end="43:53"><expr pos:start="43:45" pos:end="43:53"><name pos:start="43:45" pos:end="43:53"><name pos:start="43:45" pos:end="43:47">fmt</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:53">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:18">goto <name pos:start="45:14" pos:end="45:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:61">(<expr pos:start="51:9" pos:end="51:60"><operator pos:start="51:9" pos:end="51:9">(</operator><name pos:start="51:10" pos:end="51:12">ret</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:55"><name pos:start="51:16" pos:end="51:36">avdevice_list_devices</name><argument_list pos:start="51:37" pos:end="51:55">(<argument pos:start="51:38" pos:end="51:40"><expr pos:start="51:38" pos:end="51:40"><name pos:start="51:38" pos:end="51:40">dev</name></expr></argument>, <argument pos:start="51:43" pos:end="51:54"><expr pos:start="51:43" pos:end="51:54"><operator pos:start="51:43" pos:end="51:43">&amp;</operator><name pos:start="51:44" pos:end="51:54">device_list</name></expr></argument>)</argument_list></call><operator pos:start="51:56" pos:end="51:56">)</operator> <operator pos:start="51:58" pos:end="51:58">&lt;</operator> <literal type="number" pos:start="51:60" pos:end="51:60">0</literal></expr>)</condition> <block pos:start="51:63" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><call pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:14">printf</name><argument_list pos:start="53:15" pos:end="53:40">(<argument pos:start="53:16" pos:end="53:39"><expr pos:start="53:16" pos:end="53:39"><literal type="string" pos:start="53:16" pos:end="53:39">"Cannot list sources.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="61:5" pos:end="67:5">for <control pos:start="61:9" pos:end="61:49">(<init pos:start="61:10" pos:end="61:15"><expr pos:start="61:10" pos:end="61:14"><name pos:start="61:10" pos:end="61:10">i</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</init> <condition pos:start="61:17" pos:end="61:44"><expr pos:start="61:17" pos:end="61:43"><name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:19">&lt;</operator> <name pos:start="61:21" pos:end="61:43"><name pos:start="61:21" pos:end="61:31">device_list</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:43">nb_devices</name></name></expr>;</condition> <incr pos:start="61:46" pos:end="61:48"><expr pos:start="61:46" pos:end="61:48"><name pos:start="61:46" pos:end="61:46">i</name><operator pos:start="61:47" pos:end="61:48">++</operator></expr></incr>)</control> <block pos:start="61:51" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:98">

        <expr_stmt pos:start="63:9" pos:end="65:98"><expr pos:start="63:9" pos:end="65:97"><call pos:start="63:9" pos:end="65:97"><name pos:start="63:9" pos:end="63:14">printf</name><argument_list pos:start="63:15" pos:end="65:97">(<argument pos:start="63:16" pos:end="63:29"><expr pos:start="63:16" pos:end="63:29"><literal type="string" pos:start="63:16" pos:end="63:29">"%s %s [%s]\n"</literal></expr></argument>, <argument pos:start="63:32" pos:end="63:75"><expr pos:start="63:32" pos:end="63:75"><ternary pos:start="63:32" pos:end="63:75"><condition pos:start="63:32" pos:end="63:65"><expr pos:start="63:32" pos:end="63:63"><name pos:start="63:32" pos:end="63:58"><name pos:start="63:32" pos:end="63:42">device_list</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:58">default_device</name></name> <operator pos:start="63:60" pos:end="63:61">==</operator> <name pos:start="63:63" pos:end="63:63">i</name></expr> ?</condition><then pos:start="63:67" pos:end="63:69"> <expr pos:start="63:67" pos:end="63:69"><literal type="string" pos:start="63:67" pos:end="63:69">"*"</literal></expr> </then><else pos:start="63:71" pos:end="63:75">: <expr pos:start="63:73" pos:end="63:75"><literal type="string" pos:start="63:73" pos:end="63:75">" "</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="65:16" pos:end="65:51"><expr pos:start="65:16" pos:end="65:51"><name pos:start="65:16" pos:end="65:38"><name pos:start="65:16" pos:end="65:26">device_list</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:35">devices</name><index pos:start="65:36" pos:end="65:38">[<expr pos:start="65:37" pos:end="65:37"><name pos:start="65:37" pos:end="65:37">i</name></expr>]</index></name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:51">device_name</name></expr></argument>, <argument pos:start="65:54" pos:end="65:96"><expr pos:start="65:54" pos:end="65:96"><name pos:start="65:54" pos:end="65:76"><name pos:start="65:54" pos:end="65:64">device_list</name><operator pos:start="65:65" pos:end="65:66">-&gt;</operator><name pos:start="65:67" pos:end="65:73">devices</name><index pos:start="65:74" pos:end="65:76">[<expr pos:start="65:75" pos:end="65:75"><name pos:start="65:75" pos:end="65:75">i</name></expr>]</index></name><operator pos:start="65:77" pos:end="65:78">-&gt;</operator><name pos:start="65:79" pos:end="65:96">device_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



  <label pos:start="71:3" pos:end="71:7"><name pos:start="71:3" pos:end="71:6">fail</name>:</label>

    <expr_stmt pos:start="73:5" pos:end="73:28"><expr pos:start="73:5" pos:end="73:27"><call pos:start="73:5" pos:end="73:27"><name pos:start="73:5" pos:end="73:16">av_dict_free</name><argument_list pos:start="73:17" pos:end="73:27">(<argument pos:start="73:18" pos:end="73:26"><expr pos:start="73:18" pos:end="73:26"><operator pos:start="73:18" pos:end="73:18">&amp;</operator><name pos:start="73:19" pos:end="73:26">tmp_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:45"><expr pos:start="75:5" pos:end="75:44"><call pos:start="75:5" pos:end="75:44"><name pos:start="75:5" pos:end="75:30">avdevice_free_list_devices</name><argument_list pos:start="75:31" pos:end="75:44">(<argument pos:start="75:32" pos:end="75:43"><expr pos:start="75:32" pos:end="75:43"><operator pos:start="75:32" pos:end="75:32">&amp;</operator><name pos:start="75:33" pos:end="75:43">device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:31"><expr pos:start="77:5" pos:end="77:30"><call pos:start="77:5" pos:end="77:30"><name pos:start="77:5" pos:end="77:24">avformat_close_input</name><argument_list pos:start="77:25" pos:end="77:30">(<argument pos:start="77:26" pos:end="77:29"><expr pos:start="77:26" pos:end="77:29"><operator pos:start="77:26" pos:end="77:26">&amp;</operator><name pos:start="77:27" pos:end="77:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="79:5" pos:end="79:15">return <expr pos:start="79:12" pos:end="79:14"><name pos:start="79:12" pos:end="79:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
