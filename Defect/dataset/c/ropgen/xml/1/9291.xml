<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9291.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:36"><name pos:start="1:1" pos:end="1:13">aio_read_done</name><argument_list pos:start="1:14" pos:end="1:36">(<argument pos:start="1:15" pos:end="1:26">void *opaque</argument>, <argument pos:start="1:29" pos:end="1:35">int ret</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:9" pos:end="77:18">

	<decl_stmt pos:start="5:9" pos:end="5:37"><decl pos:start="5:9" pos:end="5:36"><type pos:start="5:9" pos:end="5:24"><name pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:22">aio_ctx</name></name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">ctx</name> <init pos:start="5:29" pos:end="5:36">= <expr pos:start="5:31" pos:end="5:36"><name pos:start="5:31" pos:end="5:36">opaque</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:26"><decl pos:start="7:9" pos:end="7:25"><type pos:start="7:9" pos:end="7:22"><name pos:start="7:9" pos:end="7:22"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:22">timeval</name></name></type> <name pos:start="7:24" pos:end="7:25">t2</name></decl>;</decl_stmt>



	<expr_stmt pos:start="11:9" pos:end="11:32"><expr pos:start="11:9" pos:end="11:31"><call pos:start="11:9" pos:end="11:31"><name pos:start="11:9" pos:end="11:20">gettimeofday</name><argument_list pos:start="11:21" pos:end="11:31">(<argument pos:start="11:22" pos:end="11:24"><expr pos:start="11:22" pos:end="11:24"><operator pos:start="11:22" pos:end="11:22">&amp;</operator><name pos:start="11:23" pos:end="11:24">t2</name></expr></argument>, <argument pos:start="11:27" pos:end="11:30"><expr pos:start="11:27" pos:end="11:30"><name pos:start="11:27" pos:end="11:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="15:9" pos:end="21:9"><if pos:start="15:9" pos:end="21:9">if <condition pos:start="15:12" pos:end="15:20">(<expr pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:15">ret</name> <operator pos:start="15:17" pos:end="15:17">&lt;</operator> <literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr>)</condition> <block pos:start="15:22" pos:end="21:9">{<block_content pos:start="17:17" pos:end="19:23">

		<expr_stmt pos:start="17:17" pos:end="17:61"><expr pos:start="17:17" pos:end="17:60"><call pos:start="17:17" pos:end="17:60"><name pos:start="17:17" pos:end="17:22">printf</name><argument_list pos:start="17:23" pos:end="17:60">(<argument pos:start="17:24" pos:end="17:43"><expr pos:start="17:24" pos:end="17:43"><literal type="string" pos:start="17:24" pos:end="17:43">"readv failed: %s\n"</literal></expr></argument>, <argument pos:start="17:46" pos:end="17:59"><expr pos:start="17:46" pos:end="17:59"><call pos:start="17:46" pos:end="17:59"><name pos:start="17:46" pos:end="17:53">strerror</name><argument_list pos:start="17:54" pos:end="17:59">(<argument pos:start="17:55" pos:end="17:58"><expr pos:start="17:55" pos:end="17:58"><operator pos:start="17:55" pos:end="17:55">-</operator><name pos:start="17:56" pos:end="17:58">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="19:17" pos:end="19:23">return;</return>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="25:9" pos:end="45:9"><if pos:start="25:9" pos:end="45:9">if <condition pos:start="25:12" pos:end="25:23">(<expr pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:15">ctx</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:22">Pflag</name></name></expr>)</condition> <block pos:start="25:25" pos:end="45:9">{<block_content pos:start="27:17" pos:end="43:30">

		<decl_stmt pos:start="27:17" pos:end="27:55"><decl pos:start="27:17" pos:end="27:54"><type pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:20">void</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:29">cmp_buf</name> <init pos:start="27:31" pos:end="27:54">= <expr pos:start="27:33" pos:end="27:54"><call pos:start="27:33" pos:end="27:54"><name pos:start="27:33" pos:end="27:38">malloc</name><argument_list pos:start="27:39" pos:end="27:54">(<argument pos:start="27:40" pos:end="27:53"><expr pos:start="27:40" pos:end="27:53"><name pos:start="27:40" pos:end="27:53"><name pos:start="27:40" pos:end="27:42">ctx</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:48">qiov</name><operator pos:start="27:49" pos:end="27:49">.</operator><name pos:start="27:50" pos:end="27:53">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



		<expr_stmt pos:start="31:17" pos:end="31:62"><expr pos:start="31:17" pos:end="31:61"><call pos:start="31:17" pos:end="31:61"><name pos:start="31:17" pos:end="31:22">memset</name><argument_list pos:start="31:23" pos:end="31:61">(<argument pos:start="31:24" pos:end="31:30"><expr pos:start="31:24" pos:end="31:30"><name pos:start="31:24" pos:end="31:30">cmp_buf</name></expr></argument>, <argument pos:start="31:33" pos:end="31:44"><expr pos:start="31:33" pos:end="31:44"><name pos:start="31:33" pos:end="31:44"><name pos:start="31:33" pos:end="31:35">ctx</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:44">pattern</name></name></expr></argument>, <argument pos:start="31:47" pos:end="31:60"><expr pos:start="31:47" pos:end="31:60"><name pos:start="31:47" pos:end="31:60"><name pos:start="31:47" pos:end="31:49">ctx</name><operator pos:start="31:50" pos:end="31:51">-&gt;</operator><name pos:start="31:52" pos:end="31:55">qiov</name><operator pos:start="31:56" pos:end="31:56">.</operator><name pos:start="31:57" pos:end="31:60">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="33:17" pos:end="41:17"><if pos:start="33:17" pos:end="41:17">if <condition pos:start="33:20" pos:end="33:62">(<expr pos:start="33:21" pos:end="33:61"><call pos:start="33:21" pos:end="33:61"><name pos:start="33:21" pos:end="33:26">memcmp</name><argument_list pos:start="33:27" pos:end="33:61">(<argument pos:start="33:28" pos:end="33:35"><expr pos:start="33:28" pos:end="33:35"><name pos:start="33:28" pos:end="33:35"><name pos:start="33:28" pos:end="33:30">ctx</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:35">buf</name></name></expr></argument>, <argument pos:start="33:38" pos:end="33:44"><expr pos:start="33:38" pos:end="33:44"><name pos:start="33:38" pos:end="33:44">cmp_buf</name></expr></argument>, <argument pos:start="33:47" pos:end="33:60"><expr pos:start="33:47" pos:end="33:60"><name pos:start="33:47" pos:end="33:60"><name pos:start="33:47" pos:end="33:49">ctx</name><operator pos:start="33:50" pos:end="33:51">-&gt;</operator><name pos:start="33:52" pos:end="33:55">qiov</name><operator pos:start="33:56" pos:end="33:56">.</operator><name pos:start="33:57" pos:end="33:60">size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:64" pos:end="41:17">{<block_content pos:start="35:25" pos:end="39:73">

			<expr_stmt pos:start="35:25" pos:end="39:73"><expr pos:start="35:25" pos:end="39:72"><call pos:start="35:25" pos:end="39:72"><name pos:start="35:25" pos:end="35:30">printf</name><argument_list pos:start="35:31" pos:end="39:72">(<argument pos:start="35:32" pos:end="37:45"><expr pos:start="35:32" pos:end="37:45"><literal type="string" pos:start="35:32" pos:end="35:77">"Pattern verification failed at offset %lld, "</literal>

				<literal type="string" pos:start="37:33" pos:end="37:45">"%zd bytes\n"</literal></expr></argument>,

				<argument pos:start="39:33" pos:end="39:55"><expr pos:start="39:33" pos:end="39:55"><operator pos:start="39:33" pos:end="39:33">(</operator><name pos:start="39:34" pos:end="39:37">long</name> <name pos:start="39:39" pos:end="39:42">long</name><operator pos:start="39:43" pos:end="39:43">)</operator> <name pos:start="39:45" pos:end="39:55"><name pos:start="39:45" pos:end="39:47">ctx</name><operator pos:start="39:48" pos:end="39:49">-&gt;</operator><name pos:start="39:50" pos:end="39:55">offset</name></name></expr></argument>, <argument pos:start="39:58" pos:end="39:71"><expr pos:start="39:58" pos:end="39:71"><name pos:start="39:58" pos:end="39:71"><name pos:start="39:58" pos:end="39:60">ctx</name><operator pos:start="39:61" pos:end="39:62">-&gt;</operator><name pos:start="39:63" pos:end="39:66">qiov</name><operator pos:start="39:67" pos:end="39:67">.</operator><name pos:start="39:68" pos:end="39:71">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="43:17" pos:end="43:30"><expr pos:start="43:17" pos:end="43:29"><call pos:start="43:17" pos:end="43:29"><name pos:start="43:17" pos:end="43:20">free</name><argument_list pos:start="43:21" pos:end="43:29">(<argument pos:start="43:22" pos:end="43:28"><expr pos:start="43:22" pos:end="43:28"><name pos:start="43:22" pos:end="43:28">cmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:23">(<expr pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:15">ctx</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:22">qflag</name></name></expr>)</condition> <block pos:start="49:25" pos:end="53:9">{<block_content pos:start="51:17" pos:end="51:23">

		<return pos:start="51:17" pos:end="51:23">return;</return>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:23">(<expr pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:15">ctx</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:22">vflag</name></name></expr>)</condition> <block pos:start="57:25" pos:end="61:9">{<block_content pos:start="59:17" pos:end="59:67">

		<expr_stmt pos:start="59:17" pos:end="59:67"><expr pos:start="59:17" pos:end="59:66"><call pos:start="59:17" pos:end="59:66"><name pos:start="59:17" pos:end="59:27">dump_buffer</name><argument_list pos:start="59:28" pos:end="59:66">(<argument pos:start="59:29" pos:end="59:36"><expr pos:start="59:29" pos:end="59:36"><name pos:start="59:29" pos:end="59:36"><name pos:start="59:29" pos:end="59:31">ctx</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:36">buf</name></name></expr></argument>, <argument pos:start="59:39" pos:end="59:49"><expr pos:start="59:39" pos:end="59:49"><name pos:start="59:39" pos:end="59:49"><name pos:start="59:39" pos:end="59:41">ctx</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:49">offset</name></name></expr></argument>, <argument pos:start="59:52" pos:end="59:65"><expr pos:start="59:52" pos:end="59:65"><name pos:start="59:52" pos:end="59:65"><name pos:start="59:52" pos:end="59:54">ctx</name><operator pos:start="59:55" pos:end="59:56">-&gt;</operator><name pos:start="59:57" pos:end="59:60">qiov</name><operator pos:start="59:61" pos:end="59:61">.</operator><name pos:start="59:62" pos:end="59:65">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="65:9" pos:end="65:64">/* Finally, report back -- -C gives a parsable format */</comment>

	<expr_stmt pos:start="67:9" pos:end="67:31"><expr pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:10">t2</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:30"><name pos:start="67:14" pos:end="67:17">tsub</name><argument_list pos:start="67:18" pos:end="67:30">(<argument pos:start="67:19" pos:end="67:20"><expr pos:start="67:19" pos:end="67:20"><name pos:start="67:19" pos:end="67:20">t2</name></expr></argument>, <argument pos:start="67:23" pos:end="67:29"><expr pos:start="67:23" pos:end="67:29"><name pos:start="67:23" pos:end="67:29"><name pos:start="67:23" pos:end="67:25">ctx</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:29">t1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="69:9" pos:end="71:52"><expr pos:start="69:9" pos:end="71:51"><call pos:start="69:9" pos:end="71:51"><name pos:start="69:9" pos:end="69:20">print_report</name><argument_list pos:start="69:21" pos:end="71:51">(<argument pos:start="69:22" pos:end="69:27"><expr pos:start="69:22" pos:end="69:27"><literal type="string" pos:start="69:22" pos:end="69:27">"read"</literal></expr></argument>, <argument pos:start="69:30" pos:end="69:32"><expr pos:start="69:30" pos:end="69:32"><operator pos:start="69:30" pos:end="69:30">&amp;</operator><name pos:start="69:31" pos:end="69:32">t2</name></expr></argument>, <argument pos:start="69:35" pos:end="69:45"><expr pos:start="69:35" pos:end="69:45"><name pos:start="69:35" pos:end="69:45"><name pos:start="69:35" pos:end="69:37">ctx</name><operator pos:start="69:38" pos:end="69:39">-&gt;</operator><name pos:start="69:40" pos:end="69:45">offset</name></name></expr></argument>, <argument pos:start="69:48" pos:end="69:61"><expr pos:start="69:48" pos:end="69:61"><name pos:start="69:48" pos:end="69:61"><name pos:start="69:48" pos:end="69:50">ctx</name><operator pos:start="69:51" pos:end="69:52">-&gt;</operator><name pos:start="69:53" pos:end="69:56">qiov</name><operator pos:start="69:57" pos:end="69:57">.</operator><name pos:start="69:58" pos:end="69:61">size</name></name></expr></argument>,

		     <argument pos:start="71:22" pos:end="71:35"><expr pos:start="71:22" pos:end="71:35"><name pos:start="71:22" pos:end="71:35"><name pos:start="71:22" pos:end="71:24">ctx</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:30">qiov</name><operator pos:start="71:31" pos:end="71:31">.</operator><name pos:start="71:32" pos:end="71:35">size</name></name></expr></argument>, <argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">1</literal></expr></argument>, <argument pos:start="71:41" pos:end="71:50"><expr pos:start="71:41" pos:end="71:50"><name pos:start="71:41" pos:end="71:50"><name pos:start="71:41" pos:end="71:43">ctx</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:50">Cflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="75:9" pos:end="75:31"><expr pos:start="75:9" pos:end="75:30"><call pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:20">qemu_io_free</name><argument_list pos:start="75:21" pos:end="75:30">(<argument pos:start="75:22" pos:end="75:29"><expr pos:start="75:22" pos:end="75:29"><name pos:start="75:22" pos:end="75:29"><name pos:start="75:22" pos:end="75:24">ctx</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:29">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="77:9" pos:end="77:18"><expr pos:start="77:9" pos:end="77:17"><call pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:12">free</name><argument_list pos:start="77:13" pos:end="77:17">(<argument pos:start="77:14" pos:end="77:16"><expr pos:start="77:14" pos:end="77:16"><name pos:start="77:14" pos:end="77:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
