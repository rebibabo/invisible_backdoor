<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26329.c" pos:tabs="8"><function pos:start="1:1" pos:end="98:57"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">rm_read_audio_stream_info</name><parameter_list pos:start="1:38" pos:end="2:51">(<parameter pos:start="1:39" pos:end="1:56"><decl pos:start="1:39" pos:end="1:56"><type pos:start="1:39" pos:end="1:56"><name pos:start="1:39" pos:end="1:53">AVFormatContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:66">AVStream</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:70">st</name></decl></parameter>,
                                      <parameter pos:start="2:39" pos:end="2:50"><decl pos:start="2:39" pos:end="2:50"><type pos:start="2:39" pos:end="2:50"><name pos:start="2:39" pos:end="2:41">int</name></type> <name pos:start="2:43" pos:end="2:50">read_all</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="98:57">{<block_content pos:start="4:5" pos:end="98:57">
    <decl_stmt pos:start="4:5" pos:end="4:33"><decl pos:start="4:5" pos:end="4:32"><type pos:start="4:5" pos:end="4:15"><name pos:start="4:5" pos:end="4:13">RMContext</name> <modifier pos:start="4:15" pos:end="4:15">*</modifier></type><name pos:start="4:16" pos:end="4:17">rm</name> <init pos:start="4:19" pos:end="4:32">= <expr pos:start="4:21" pos:end="4:32"><name pos:start="4:21" pos:end="4:32"><name pos:start="4:21" pos:end="4:21">s</name><operator pos:start="4:22" pos:end="4:23">-&gt;</operator><name pos:start="4:24" pos:end="4:32">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">ByteIOContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">pb</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:30"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:30">pb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:18"><decl pos:start="6:5" pos:end="6:17"><type pos:start="6:5" pos:end="6:8"><name pos:start="6:5" pos:end="6:8">char</name></type> <name pos:start="6:10" pos:end="6:17"><name pos:start="6:10" pos:end="6:12">buf</name><index pos:start="6:13" pos:end="6:17">[<expr pos:start="6:14" pos:end="6:16"><literal type="number" pos:start="6:14" pos:end="6:16">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:20">version</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:10"><decl pos:start="8:5" pos:end="8:9"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:9">i</name></decl>;</decl_stmt>
    <comment type="block" pos:start="9:5" pos:end="9:24">/* ra type header */</comment>
    <expr_stmt pos:start="10:5" pos:end="10:27"><expr pos:start="10:5" pos:end="10:26"><name pos:start="10:5" pos:end="10:11">version</name> <operator pos:start="10:13" pos:end="10:13">=</operator> <call pos:start="10:15" pos:end="10:26"><name pos:start="10:15" pos:end="10:22">get_be32</name><argument_list pos:start="10:23" pos:end="10:26">(<argument pos:start="10:24" pos:end="10:25"><expr pos:start="10:24" pos:end="10:25"><name pos:start="10:24" pos:end="10:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="10:29" pos:end="10:41">/* version */</comment>
    <if_stmt pos:start="11:5" pos:end="98:57"><if pos:start="11:5" pos:end="98:57">if <condition pos:start="11:8" pos:end="11:38">(<expr pos:start="11:9" pos:end="11:37"><operator pos:start="11:9" pos:end="11:9">(</operator><operator pos:start="11:10" pos:end="11:10">(</operator><name pos:start="11:11" pos:end="11:17">version</name> <operator pos:start="11:19" pos:end="11:20">&gt;&gt;</operator> <literal type="number" pos:start="11:22" pos:end="11:23">16</literal><operator pos:start="11:24" pos:end="11:24">)</operator> <operator pos:start="11:26" pos:end="11:26">&amp;</operator> <literal type="number" pos:start="11:28" pos:end="11:31">0xff</literal><operator pos:start="11:32" pos:end="11:32">)</operator> <operator pos:start="11:34" pos:end="11:35">==</operator> <literal type="number" pos:start="11:37" pos:end="11:37">3</literal></expr>)</condition> <block pos:start="11:40" pos:end="98:57">{<block_content pos:start="12:9" pos:end="98:57">
        <decl_stmt pos:start="12:9" pos:end="12:41"><decl pos:start="12:9" pos:end="12:40"><type pos:start="12:9" pos:end="12:15"><name pos:start="12:9" pos:end="12:15">int64_t</name></type> <name pos:start="12:17" pos:end="12:24">startpos</name> <init pos:start="12:26" pos:end="12:40">= <expr pos:start="12:28" pos:end="12:40"><call pos:start="12:28" pos:end="12:40"><name pos:start="12:28" pos:end="12:36">url_ftell</name><argument_list pos:start="12:37" pos:end="12:40">(<argument pos:start="12:38" pos:end="12:39"><expr pos:start="12:38" pos:end="12:39"><name pos:start="12:38" pos:end="12:39">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="13:9" pos:end="13:30">/* very old version */</comment>
        <for pos:start="14:9" pos:end="15:25">for<control pos:start="14:12" pos:end="14:31">(<init pos:start="14:13" pos:end="14:18"><expr pos:start="14:13" pos:end="14:17"><name pos:start="14:13" pos:end="14:13">i</name> <operator pos:start="14:15" pos:end="14:15">=</operator> <literal type="number" pos:start="14:17" pos:end="14:17">0</literal></expr>;</init> <condition pos:start="14:20" pos:end="14:26"><expr pos:start="14:20" pos:end="14:25"><name pos:start="14:20" pos:end="14:20">i</name> <operator pos:start="14:22" pos:end="14:22">&lt;</operator> <literal type="number" pos:start="14:24" pos:end="14:25">14</literal></expr>;</condition> <incr pos:start="14:28" pos:end="14:30"><expr pos:start="14:28" pos:end="14:30"><name pos:start="14:28" pos:end="14:28">i</name><operator pos:start="14:29" pos:end="14:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="15:13" pos:end="15:25"><block_content pos:start="15:13" pos:end="15:25">
            <expr_stmt pos:start="15:13" pos:end="15:25"><expr pos:start="15:13" pos:end="15:24"><call pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:20">get_byte</name><argument_list pos:start="15:21" pos:end="15:24">(<argument pos:start="15:22" pos:end="15:23"><expr pos:start="15:22" pos:end="15:23"><name pos:start="15:22" pos:end="15:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt pos:start="16:9" pos:end="16:49"><expr pos:start="16:9" pos:end="16:48"><call pos:start="16:9" pos:end="16:48"><name pos:start="16:9" pos:end="16:16">get_str8</name><argument_list pos:start="16:17" pos:end="16:48">(<argument pos:start="16:18" pos:end="16:19"><expr pos:start="16:18" pos:end="16:19"><name pos:start="16:18" pos:end="16:19">pb</name></expr></argument>, <argument pos:start="16:22" pos:end="16:29"><expr pos:start="16:22" pos:end="16:29"><name pos:start="16:22" pos:end="16:29"><name pos:start="16:22" pos:end="16:22">s</name><operator pos:start="16:23" pos:end="16:24">-&gt;</operator><name pos:start="16:25" pos:end="16:29">title</name></name></expr></argument>, <argument pos:start="16:32" pos:end="16:47"><expr pos:start="16:32" pos:end="16:47"><sizeof pos:start="16:32" pos:end="16:47">sizeof<argument_list pos:start="16:38" pos:end="16:47">(<argument pos:start="16:39" pos:end="16:46"><expr pos:start="16:39" pos:end="16:46"><name pos:start="16:39" pos:end="16:46"><name pos:start="16:39" pos:end="16:39">s</name><operator pos:start="16:40" pos:end="16:41">-&gt;</operator><name pos:start="16:42" pos:end="16:46">title</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:51"><expr pos:start="17:9" pos:end="17:50"><call pos:start="17:9" pos:end="17:50"><name pos:start="17:9" pos:end="17:16">get_str8</name><argument_list pos:start="17:17" pos:end="17:50">(<argument pos:start="17:18" pos:end="17:19"><expr pos:start="17:18" pos:end="17:19"><name pos:start="17:18" pos:end="17:19">pb</name></expr></argument>, <argument pos:start="17:22" pos:end="17:30"><expr pos:start="17:22" pos:end="17:30"><name pos:start="17:22" pos:end="17:30"><name pos:start="17:22" pos:end="17:22">s</name><operator pos:start="17:23" pos:end="17:24">-&gt;</operator><name pos:start="17:25" pos:end="17:30">author</name></name></expr></argument>, <argument pos:start="17:33" pos:end="17:49"><expr pos:start="17:33" pos:end="17:49"><sizeof pos:start="17:33" pos:end="17:49">sizeof<argument_list pos:start="17:39" pos:end="17:49">(<argument pos:start="17:40" pos:end="17:48"><expr pos:start="17:40" pos:end="17:48"><name pos:start="17:40" pos:end="17:48"><name pos:start="17:40" pos:end="17:40">s</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:48">author</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="18:9" pos:end="18:57"><expr pos:start="18:9" pos:end="18:56"><call pos:start="18:9" pos:end="18:56"><name pos:start="18:9" pos:end="18:16">get_str8</name><argument_list pos:start="18:17" pos:end="18:56">(<argument pos:start="18:18" pos:end="18:19"><expr pos:start="18:18" pos:end="18:19"><name pos:start="18:18" pos:end="18:19">pb</name></expr></argument>, <argument pos:start="18:22" pos:end="18:33"><expr pos:start="18:22" pos:end="18:33"><name pos:start="18:22" pos:end="18:33"><name pos:start="18:22" pos:end="18:22">s</name><operator pos:start="18:23" pos:end="18:24">-&gt;</operator><name pos:start="18:25" pos:end="18:33">copyright</name></name></expr></argument>, <argument pos:start="18:36" pos:end="18:55"><expr pos:start="18:36" pos:end="18:55"><sizeof pos:start="18:36" pos:end="18:55">sizeof<argument_list pos:start="18:42" pos:end="18:55">(<argument pos:start="18:43" pos:end="18:54"><expr pos:start="18:43" pos:end="18:54"><name pos:start="18:43" pos:end="18:54"><name pos:start="18:43" pos:end="18:43">s</name><operator pos:start="18:44" pos:end="18:45">-&gt;</operator><name pos:start="18:46" pos:end="18:54">copyright</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="19:9" pos:end="19:53"><expr pos:start="19:9" pos:end="19:52"><call pos:start="19:9" pos:end="19:52"><name pos:start="19:9" pos:end="19:16">get_str8</name><argument_list pos:start="19:17" pos:end="19:52">(<argument pos:start="19:18" pos:end="19:19"><expr pos:start="19:18" pos:end="19:19"><name pos:start="19:18" pos:end="19:19">pb</name></expr></argument>, <argument pos:start="19:22" pos:end="19:31"><expr pos:start="19:22" pos:end="19:31"><name pos:start="19:22" pos:end="19:31"><name pos:start="19:22" pos:end="19:22">s</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:31">comment</name></name></expr></argument>, <argument pos:start="19:34" pos:end="19:51"><expr pos:start="19:34" pos:end="19:51"><sizeof pos:start="19:34" pos:end="19:51">sizeof<argument_list pos:start="19:40" pos:end="19:51">(<argument pos:start="19:41" pos:end="19:50"><expr pos:start="19:41" pos:end="19:50"><name pos:start="19:41" pos:end="19:50"><name pos:start="19:41" pos:end="19:41">s</name><operator pos:start="19:42" pos:end="19:43">-&gt;</operator><name pos:start="19:44" pos:end="19:50">comment</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="20:9" pos:end="98:57"><if pos:start="20:9" pos:end="31:5">if <condition pos:start="20:12" pos:end="20:65">(<expr pos:start="20:13" pos:end="20:64"><operator pos:start="20:13" pos:end="20:13">(</operator><name pos:start="20:14" pos:end="20:21">startpos</name> <operator pos:start="20:23" pos:end="20:23">+</operator> <operator pos:start="20:25" pos:end="20:25">(</operator><name pos:start="20:26" pos:end="20:32">version</name> <operator pos:start="20:34" pos:end="20:34">&amp;</operator> <literal type="number" pos:start="20:36" pos:end="20:41">0xffff</literal><operator pos:start="20:42" pos:end="20:42">)</operator><operator pos:start="20:43" pos:end="20:43">)</operator> <operator pos:start="20:45" pos:end="20:46">&gt;=</operator> <call pos:start="20:48" pos:end="20:60"><name pos:start="20:48" pos:end="20:56">url_ftell</name><argument_list pos:start="20:57" pos:end="20:60">(<argument pos:start="20:58" pos:end="20:59"><expr pos:start="20:58" pos:end="20:59"><name pos:start="20:58" pos:end="20:59">pb</name></expr></argument>)</argument_list></call> <operator pos:start="20:62" pos:end="20:62">+</operator> <literal type="number" pos:start="20:64" pos:end="20:64">2</literal></expr>)</condition> <block pos:start="20:67" pos:end="31:5">{<block_content pos:start="22:9" pos:end="30:46">
        <comment type="line" pos:start="21:9" pos:end="21:43">// fourcc (should always be "lpcJ")</comment>
        <expr_stmt pos:start="22:9" pos:end="22:21"><expr pos:start="22:9" pos:end="22:20"><call pos:start="22:9" pos:end="22:20"><name pos:start="22:9" pos:end="22:16">get_byte</name><argument_list pos:start="22:17" pos:end="22:20">(<argument pos:start="22:18" pos:end="22:19"><expr pos:start="22:18" pos:end="22:19"><name pos:start="22:18" pos:end="22:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><call pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:16">get_str8</name><argument_list pos:start="23:17" pos:end="23:38">(<argument pos:start="23:18" pos:end="23:19"><expr pos:start="23:18" pos:end="23:19"><name pos:start="23:18" pos:end="23:19">pb</name></expr></argument>, <argument pos:start="23:22" pos:end="23:24"><expr pos:start="23:22" pos:end="23:24"><name pos:start="23:22" pos:end="23:24">buf</name></expr></argument>, <argument pos:start="23:27" pos:end="23:37"><expr pos:start="23:27" pos:end="23:37"><sizeof pos:start="23:27" pos:end="23:37">sizeof<argument_list pos:start="23:33" pos:end="23:37">(<argument pos:start="23:34" pos:end="23:36"><expr pos:start="23:34" pos:end="23:36"><name pos:start="23:34" pos:end="23:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:start="24:9" pos:end="24:60">// Skip extra header crap (this should never happen)</comment>
        <if_stmt pos:start="25:9" pos:end="26:73"><if pos:start="25:9" pos:end="26:73">if <condition pos:start="25:12" pos:end="25:60">(<expr pos:start="25:13" pos:end="25:59"><operator pos:start="25:13" pos:end="25:13">(</operator><name pos:start="25:14" pos:end="25:21">startpos</name> <operator pos:start="25:23" pos:end="25:23">+</operator> <operator pos:start="25:25" pos:end="25:25">(</operator><name pos:start="25:26" pos:end="25:32">version</name> <operator pos:start="25:34" pos:end="25:34">&amp;</operator> <literal type="number" pos:start="25:36" pos:end="25:41">0xffff</literal><operator pos:start="25:42" pos:end="25:42">)</operator><operator pos:start="25:43" pos:end="25:43">)</operator> <operator pos:start="25:45" pos:end="25:45">&gt;</operator> <call pos:start="25:47" pos:end="25:59"><name pos:start="25:47" pos:end="25:55">url_ftell</name><argument_list pos:start="25:56" pos:end="25:59">(<argument pos:start="25:57" pos:end="25:58"><expr pos:start="25:57" pos:end="25:58"><name pos:start="25:57" pos:end="25:58">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="26:13" pos:end="26:73"><block_content pos:start="26:13" pos:end="26:73">
            <expr_stmt pos:start="26:13" pos:end="26:73"><expr pos:start="26:13" pos:end="26:72"><call pos:start="26:13" pos:end="26:72"><name pos:start="26:13" pos:end="26:21">url_fskip</name><argument_list pos:start="26:22" pos:end="26:72">(<argument pos:start="26:23" pos:end="26:24"><expr pos:start="26:23" pos:end="26:24"><name pos:start="26:23" pos:end="26:24">pb</name></expr></argument>, <argument pos:start="26:27" pos:end="26:71"><expr pos:start="26:27" pos:end="26:71"><operator pos:start="26:27" pos:end="26:27">(</operator><name pos:start="26:28" pos:end="26:34">version</name> <operator pos:start="26:36" pos:end="26:36">&amp;</operator> <literal type="number" pos:start="26:38" pos:end="26:43">0xffff</literal><operator pos:start="26:44" pos:end="26:44">)</operator> <operator pos:start="26:46" pos:end="26:46">+</operator> <name pos:start="26:48" pos:end="26:55">startpos</name> <operator pos:start="26:57" pos:end="26:57">-</operator> <call pos:start="26:59" pos:end="26:71"><name pos:start="26:59" pos:end="26:67">url_ftell</name><argument_list pos:start="26:68" pos:end="26:71">(<argument pos:start="26:69" pos:end="26:70"><expr pos:start="26:69" pos:end="26:70"><name pos:start="26:69" pos:end="26:70">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:38"><expr pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:10">st</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:17">codec</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:30">sample_rate</name></name> <operator pos:start="27:32" pos:end="27:32">=</operator> <literal type="number" pos:start="27:34" pos:end="27:37">8000</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:32"><expr pos:start="28:9" pos:end="28:31"><name pos:start="28:9" pos:end="28:27"><name pos:start="28:9" pos:end="28:10">st</name><operator pos:start="28:11" pos:end="28:12">-&gt;</operator><name pos:start="28:13" pos:end="28:17">codec</name><operator pos:start="28:18" pos:end="28:19">-&gt;</operator><name pos:start="28:20" pos:end="28:27">channels</name></name> <operator pos:start="28:29" pos:end="28:29">=</operator> <literal type="number" pos:start="28:31" pos:end="28:31">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:49"><expr pos:start="29:9" pos:end="29:48"><name pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:10">st</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:17">codec</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:29">codec_type</name></name> <operator pos:start="29:31" pos:end="29:31">=</operator> <name pos:start="29:33" pos:end="29:48">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:46"><expr pos:start="30:9" pos:end="30:45"><name pos:start="30:9" pos:end="30:27"><name pos:start="30:9" pos:end="30:10">st</name><operator pos:start="30:11" pos:end="30:12">-&gt;</operator><name pos:start="30:13" pos:end="30:17">codec</name><operator pos:start="30:18" pos:end="30:19">-&gt;</operator><name pos:start="30:20" pos:end="30:27">codec_id</name></name> <operator pos:start="30:29" pos:end="30:29">=</operator> <name pos:start="30:31" pos:end="30:45">CODEC_ID_RA_144</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="31:7" pos:end="98:57">else <block pos:start="31:12" pos:end="98:57">{<block_content pos:start="32:9" pos:end="98:57">
        <decl_stmt pos:start="32:9" pos:end="32:67"><decl pos:start="32:9" pos:end="32:18"><type pos:start="32:9" pos:end="32:11"><name pos:start="32:9" pos:end="32:11">int</name></type> <name pos:start="32:13" pos:end="32:18">flavor</name></decl>, <decl pos:start="32:21" pos:end="32:32"><type ref="prev" pos:start="32:9" pos:end="32:11"/><name pos:start="32:21" pos:end="32:32">sub_packet_h</name></decl>, <decl pos:start="32:35" pos:end="32:49"><type ref="prev" pos:start="32:9" pos:end="32:11"/><name pos:start="32:35" pos:end="32:49">coded_framesize</name></decl>, <decl pos:start="32:52" pos:end="32:66"><type ref="prev" pos:start="32:9" pos:end="32:11"/><name pos:start="32:52" pos:end="32:66">sub_packet_size</name></decl>;</decl_stmt>
        <comment type="block" pos:start="33:9" pos:end="33:29">/* old version (4) */</comment>
        <expr_stmt pos:start="34:9" pos:end="34:21"><expr pos:start="34:9" pos:end="34:20"><call pos:start="34:9" pos:end="34:20"><name pos:start="34:9" pos:end="34:16">get_be32</name><argument_list pos:start="34:17" pos:end="34:20">(<argument pos:start="34:18" pos:end="34:19"><expr pos:start="34:18" pos:end="34:19"><name pos:start="34:18" pos:end="34:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="34:23" pos:end="34:32">/* .ra4 */</comment>
        <expr_stmt pos:start="35:9" pos:end="35:21"><expr pos:start="35:9" pos:end="35:20"><call pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:16">get_be32</name><argument_list pos:start="35:17" pos:end="35:20">(<argument pos:start="35:18" pos:end="35:19"><expr pos:start="35:18" pos:end="35:19"><name pos:start="35:18" pos:end="35:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="35:23" pos:end="35:37">/* data size */</comment>
        <expr_stmt pos:start="36:9" pos:end="36:21"><expr pos:start="36:9" pos:end="36:20"><call pos:start="36:9" pos:end="36:20"><name pos:start="36:9" pos:end="36:16">get_be16</name><argument_list pos:start="36:17" pos:end="36:20">(<argument pos:start="36:18" pos:end="36:19"><expr pos:start="36:18" pos:end="36:19"><name pos:start="36:18" pos:end="36:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="36:23" pos:end="36:36">/* version2 */</comment>
        <expr_stmt pos:start="37:9" pos:end="37:21"><expr pos:start="37:9" pos:end="37:20"><call pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:16">get_be32</name><argument_list pos:start="37:17" pos:end="37:20">(<argument pos:start="37:18" pos:end="37:19"><expr pos:start="37:18" pos:end="37:19"><name pos:start="37:18" pos:end="37:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="37:23" pos:end="37:39">/* header size */</comment>
        <expr_stmt pos:start="38:9" pos:end="38:29"><expr pos:start="38:9" pos:end="38:28"><name pos:start="38:9" pos:end="38:14">flavor</name><operator pos:start="38:15" pos:end="38:15">=</operator> <call pos:start="38:17" pos:end="38:28"><name pos:start="38:17" pos:end="38:24">get_be16</name><argument_list pos:start="38:25" pos:end="38:28">(<argument pos:start="38:26" pos:end="38:27"><expr pos:start="38:26" pos:end="38:27"><name pos:start="38:26" pos:end="38:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="38:31" pos:end="38:59">/* add codec info / flavor */</comment>
        <expr_stmt pos:start="39:9" pos:end="39:61"><expr pos:start="39:9" pos:end="39:60"><name pos:start="39:9" pos:end="39:27"><name pos:start="39:9" pos:end="39:10">rm</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:27">coded_framesize</name></name> <operator pos:start="39:29" pos:end="39:29">=</operator> <name pos:start="39:31" pos:end="39:45">coded_framesize</name> <operator pos:start="39:47" pos:end="39:47">=</operator> <call pos:start="39:49" pos:end="39:60"><name pos:start="39:49" pos:end="39:56">get_be32</name><argument_list pos:start="39:57" pos:end="39:60">(<argument pos:start="39:58" pos:end="39:59"><expr pos:start="39:58" pos:end="39:59"><name pos:start="39:58" pos:end="39:59">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="39:63" pos:end="39:84">/* coded frame size */</comment>
        <expr_stmt pos:start="40:9" pos:end="40:21"><expr pos:start="40:9" pos:end="40:20"><call pos:start="40:9" pos:end="40:20"><name pos:start="40:9" pos:end="40:16">get_be32</name><argument_list pos:start="40:17" pos:end="40:20">(<argument pos:start="40:18" pos:end="40:19"><expr pos:start="40:18" pos:end="40:19"><name pos:start="40:18" pos:end="40:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="40:23" pos:end="40:31">/* ??? */</comment>
        <expr_stmt pos:start="41:9" pos:end="41:21"><expr pos:start="41:9" pos:end="41:20"><call pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:16">get_be32</name><argument_list pos:start="41:17" pos:end="41:20">(<argument pos:start="41:18" pos:end="41:19"><expr pos:start="41:18" pos:end="41:19"><name pos:start="41:18" pos:end="41:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="41:23" pos:end="41:31">/* ??? */</comment>
        <expr_stmt pos:start="42:9" pos:end="42:21"><expr pos:start="42:9" pos:end="42:20"><call pos:start="42:9" pos:end="42:20"><name pos:start="42:9" pos:end="42:16">get_be32</name><argument_list pos:start="42:17" pos:end="42:20">(<argument pos:start="42:18" pos:end="42:19"><expr pos:start="42:18" pos:end="42:19"><name pos:start="42:18" pos:end="42:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="42:23" pos:end="42:31">/* ??? */</comment>
        <expr_stmt pos:start="43:9" pos:end="43:55"><expr pos:start="43:9" pos:end="43:54"><name pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:10">rm</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:24">sub_packet_h</name></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:39">sub_packet_h</name> <operator pos:start="43:41" pos:end="43:41">=</operator> <call pos:start="43:43" pos:end="43:54"><name pos:start="43:43" pos:end="43:50">get_be16</name><argument_list pos:start="43:51" pos:end="43:54">(<argument pos:start="43:52" pos:end="43:53"><expr pos:start="43:52" pos:end="43:53"><name pos:start="43:52" pos:end="43:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="43:57" pos:end="43:63">/* 1 */</comment>
        <expr_stmt pos:start="44:9" pos:end="44:45"><expr pos:start="44:9" pos:end="44:44"><name pos:start="44:9" pos:end="44:30"><name pos:start="44:9" pos:end="44:10">st</name><operator pos:start="44:11" pos:end="44:12">-&gt;</operator><name pos:start="44:13" pos:end="44:17">codec</name><operator pos:start="44:18" pos:end="44:19">-&gt;</operator><name pos:start="44:20" pos:end="44:30">block_align</name></name><operator pos:start="44:31" pos:end="44:31">=</operator> <call pos:start="44:33" pos:end="44:44"><name pos:start="44:33" pos:end="44:40">get_be16</name><argument_list pos:start="44:41" pos:end="44:44">(<argument pos:start="44:42" pos:end="44:43"><expr pos:start="44:42" pos:end="44:43"><name pos:start="44:42" pos:end="44:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="44:47" pos:end="44:62">/* frame size */</comment>
        <expr_stmt pos:start="45:9" pos:end="45:61"><expr pos:start="45:9" pos:end="45:60"><name pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:10">rm</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:27">sub_packet_size</name></name> <operator pos:start="45:29" pos:end="45:29">=</operator> <name pos:start="45:31" pos:end="45:45">sub_packet_size</name> <operator pos:start="45:47" pos:end="45:47">=</operator> <call pos:start="45:49" pos:end="45:60"><name pos:start="45:49" pos:end="45:56">get_be16</name><argument_list pos:start="45:57" pos:end="45:60">(<argument pos:start="45:58" pos:end="45:59"><expr pos:start="45:58" pos:end="45:59"><name pos:start="45:58" pos:end="45:59">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="45:63" pos:end="45:83">/* sub packet size */</comment>
        <expr_stmt pos:start="46:9" pos:end="46:21"><expr pos:start="46:9" pos:end="46:20"><call pos:start="46:9" pos:end="46:20"><name pos:start="46:9" pos:end="46:16">get_be16</name><argument_list pos:start="46:17" pos:end="46:20">(<argument pos:start="46:18" pos:end="46:19"><expr pos:start="46:18" pos:end="46:19"><name pos:start="46:18" pos:end="46:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="46:23" pos:end="46:31">/* ??? */</comment>
        <if_stmt pos:start="47:9" pos:end="48:55"><if pos:start="47:9" pos:end="48:55">if <condition pos:start="47:12" pos:end="47:42">(<expr pos:start="47:13" pos:end="47:41"><operator pos:start="47:13" pos:end="47:13">(</operator><operator pos:start="47:14" pos:end="47:14">(</operator><name pos:start="47:15" pos:end="47:21">version</name> <operator pos:start="47:23" pos:end="47:24">&gt;&gt;</operator> <literal type="number" pos:start="47:26" pos:end="47:27">16</literal><operator pos:start="47:28" pos:end="47:28">)</operator> <operator pos:start="47:30" pos:end="47:30">&amp;</operator> <literal type="number" pos:start="47:32" pos:end="47:35">0xff</literal><operator pos:start="47:36" pos:end="47:36">)</operator> <operator pos:start="47:38" pos:end="47:39">==</operator> <literal type="number" pos:start="47:41" pos:end="47:41">5</literal></expr>)</condition> <block pos:start="47:44" pos:end="48:55">{<block_content pos:start="48:13" pos:end="48:53">
            <expr_stmt pos:start="48:13" pos:end="48:25"><expr pos:start="48:13" pos:end="48:24"><call pos:start="48:13" pos:end="48:24"><name pos:start="48:13" pos:end="48:20">get_be16</name><argument_list pos:start="48:21" pos:end="48:24">(<argument pos:start="48:22" pos:end="48:23"><expr pos:start="48:22" pos:end="48:23"><name pos:start="48:22" pos:end="48:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="48:27" pos:end="48:39"><expr pos:start="48:27" pos:end="48:38"><call pos:start="48:27" pos:end="48:38"><name pos:start="48:27" pos:end="48:34">get_be16</name><argument_list pos:start="48:35" pos:end="48:38">(<argument pos:start="48:36" pos:end="48:37"><expr pos:start="48:36" pos:end="48:37"><name pos:start="48:36" pos:end="48:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="48:41" pos:end="48:53"><expr pos:start="48:41" pos:end="48:52"><call pos:start="48:41" pos:end="48:52"><name pos:start="48:41" pos:end="48:48">get_be16</name><argument_list pos:start="48:49" pos:end="48:52">(<argument pos:start="48:50" pos:end="48:51"><expr pos:start="48:50" pos:end="48:51"><name pos:start="48:50" pos:end="48:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:10">st</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:17">codec</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:30">sample_rate</name></name> <operator pos:start="49:32" pos:end="49:32">=</operator> <call pos:start="49:34" pos:end="49:45"><name pos:start="49:34" pos:end="49:41">get_be16</name><argument_list pos:start="49:42" pos:end="49:45">(<argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><name pos:start="49:43" pos:end="49:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="50:9" pos:end="50:21"><expr pos:start="50:9" pos:end="50:20"><call pos:start="50:9" pos:end="50:20"><name pos:start="50:9" pos:end="50:16">get_be32</name><argument_list pos:start="50:17" pos:end="50:20">(<argument pos:start="50:18" pos:end="50:19"><expr pos:start="50:18" pos:end="50:19"><name pos:start="50:18" pos:end="50:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:43"><expr pos:start="51:9" pos:end="51:42"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:10">st</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:17">codec</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:27">channels</name></name> <operator pos:start="51:29" pos:end="51:29">=</operator> <call pos:start="51:31" pos:end="51:42"><name pos:start="51:31" pos:end="51:38">get_be16</name><argument_list pos:start="51:39" pos:end="51:42">(<argument pos:start="51:40" pos:end="51:41"><expr pos:start="51:40" pos:end="51:41"><name pos:start="51:40" pos:end="51:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="52:9" pos:end="98:57"><if pos:start="52:9" pos:end="59:9">if <condition pos:start="52:12" pos:end="52:42">(<expr pos:start="52:13" pos:end="52:41"><operator pos:start="52:13" pos:end="52:13">(</operator><operator pos:start="52:14" pos:end="52:14">(</operator><name pos:start="52:15" pos:end="52:21">version</name> <operator pos:start="52:23" pos:end="52:24">&gt;&gt;</operator> <literal type="number" pos:start="52:26" pos:end="52:27">16</literal><operator pos:start="52:28" pos:end="52:28">)</operator> <operator pos:start="52:30" pos:end="52:30">&amp;</operator> <literal type="number" pos:start="52:32" pos:end="52:35">0xff</literal><operator pos:start="52:36" pos:end="52:36">)</operator> <operator pos:start="52:38" pos:end="52:39">==</operator> <literal type="number" pos:start="52:41" pos:end="52:41">5</literal></expr>)</condition> <block pos:start="52:44" pos:end="59:9">{<block_content pos:start="53:13" pos:end="58:23">
            <expr_stmt pos:start="53:13" pos:end="53:25"><expr pos:start="53:13" pos:end="53:24"><call pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:20">get_be32</name><argument_list pos:start="53:21" pos:end="53:24">(<argument pos:start="53:22" pos:end="53:23"><expr pos:start="53:22" pos:end="53:23"><name pos:start="53:22" pos:end="53:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="54:13" pos:end="54:34"><expr pos:start="54:13" pos:end="54:33"><name pos:start="54:13" pos:end="54:18"><name pos:start="54:13" pos:end="54:15">buf</name><index pos:start="54:16" pos:end="54:18">[<expr pos:start="54:17" pos:end="54:17"><literal type="number" pos:start="54:17" pos:end="54:17">0</literal></expr>]</index></name> <operator pos:start="54:20" pos:end="54:20">=</operator> <call pos:start="54:22" pos:end="54:33"><name pos:start="54:22" pos:end="54:29">get_byte</name><argument_list pos:start="54:30" pos:end="54:33">(<argument pos:start="54:31" pos:end="54:32"><expr pos:start="54:31" pos:end="54:32"><name pos:start="54:31" pos:end="54:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="55:13" pos:end="55:34"><expr pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:18"><name pos:start="55:13" pos:end="55:15">buf</name><index pos:start="55:16" pos:end="55:18">[<expr pos:start="55:17" pos:end="55:17"><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>]</index></name> <operator pos:start="55:20" pos:end="55:20">=</operator> <call pos:start="55:22" pos:end="55:33"><name pos:start="55:22" pos:end="55:29">get_byte</name><argument_list pos:start="55:30" pos:end="55:33">(<argument pos:start="55:31" pos:end="55:32"><expr pos:start="55:31" pos:end="55:32"><name pos:start="55:31" pos:end="55:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="56:13" pos:end="56:34"><expr pos:start="56:13" pos:end="56:33"><name pos:start="56:13" pos:end="56:18"><name pos:start="56:13" pos:end="56:15">buf</name><index pos:start="56:16" pos:end="56:18">[<expr pos:start="56:17" pos:end="56:17"><literal type="number" pos:start="56:17" pos:end="56:17">2</literal></expr>]</index></name> <operator pos:start="56:20" pos:end="56:20">=</operator> <call pos:start="56:22" pos:end="56:33"><name pos:start="56:22" pos:end="56:29">get_byte</name><argument_list pos:start="56:30" pos:end="56:33">(<argument pos:start="56:31" pos:end="56:32"><expr pos:start="56:31" pos:end="56:32"><name pos:start="56:31" pos:end="56:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="57:13" pos:end="57:34"><expr pos:start="57:13" pos:end="57:33"><name pos:start="57:13" pos:end="57:18"><name pos:start="57:13" pos:end="57:15">buf</name><index pos:start="57:16" pos:end="57:18">[<expr pos:start="57:17" pos:end="57:17"><literal type="number" pos:start="57:17" pos:end="57:17">3</literal></expr>]</index></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <call pos:start="57:22" pos:end="57:33"><name pos:start="57:22" pos:end="57:29">get_byte</name><argument_list pos:start="57:30" pos:end="57:33">(<argument pos:start="57:31" pos:end="57:32"><expr pos:start="57:31" pos:end="57:32"><name pos:start="57:31" pos:end="57:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="58:13" pos:end="58:23"><expr pos:start="58:13" pos:end="58:22"><name pos:start="58:13" pos:end="58:18"><name pos:start="58:13" pos:end="58:15">buf</name><index pos:start="58:16" pos:end="58:18">[<expr pos:start="58:17" pos:end="58:17"><literal type="number" pos:start="58:17" pos:end="58:17">4</literal></expr>]</index></name> <operator pos:start="58:20" pos:end="58:20">=</operator> <literal type="number" pos:start="58:22" pos:end="58:22">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="59:11" pos:end="98:57">else <block pos:start="59:16" pos:end="98:57">{<block_content pos:start="60:9" pos:end="98:57">
        <expr_stmt pos:start="60:9" pos:end="60:39"><expr pos:start="60:9" pos:end="60:38"><call pos:start="60:9" pos:end="60:38"><name pos:start="60:9" pos:end="60:16">get_str8</name><argument_list pos:start="60:17" pos:end="60:38">(<argument pos:start="60:18" pos:end="60:19"><expr pos:start="60:18" pos:end="60:19"><name pos:start="60:18" pos:end="60:19">pb</name></expr></argument>, <argument pos:start="60:22" pos:end="60:24"><expr pos:start="60:22" pos:end="60:24"><name pos:start="60:22" pos:end="60:24">buf</name></expr></argument>, <argument pos:start="60:27" pos:end="60:37"><expr pos:start="60:27" pos:end="60:37"><sizeof pos:start="60:27" pos:end="60:37">sizeof<argument_list pos:start="60:33" pos:end="60:37">(<argument pos:start="60:34" pos:end="60:36"><expr pos:start="60:34" pos:end="60:36"><name pos:start="60:34" pos:end="60:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="60:41" pos:end="60:50">/* desc */</comment>
        <expr_stmt pos:start="61:9" pos:end="61:39"><expr pos:start="61:9" pos:end="61:38"><call pos:start="61:9" pos:end="61:38"><name pos:start="61:9" pos:end="61:16">get_str8</name><argument_list pos:start="61:17" pos:end="61:38">(<argument pos:start="61:18" pos:end="61:19"><expr pos:start="61:18" pos:end="61:19"><name pos:start="61:18" pos:end="61:19">pb</name></expr></argument>, <argument pos:start="61:22" pos:end="61:24"><expr pos:start="61:22" pos:end="61:24"><name pos:start="61:22" pos:end="61:24">buf</name></expr></argument>, <argument pos:start="61:27" pos:end="61:37"><expr pos:start="61:27" pos:end="61:37"><sizeof pos:start="61:27" pos:end="61:37">sizeof<argument_list pos:start="61:33" pos:end="61:37">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="61:41" pos:end="61:50">/* desc */</comment>
        <expr_stmt pos:start="62:9" pos:end="62:49"><expr pos:start="62:9" pos:end="62:48"><name pos:start="62:9" pos:end="62:29"><name pos:start="62:9" pos:end="62:10">st</name><operator pos:start="62:11" pos:end="62:12">-&gt;</operator><name pos:start="62:13" pos:end="62:17">codec</name><operator pos:start="62:18" pos:end="62:19">-&gt;</operator><name pos:start="62:20" pos:end="62:29">codec_type</name></name> <operator pos:start="62:31" pos:end="62:31">=</operator> <name pos:start="62:33" pos:end="62:48">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt>
        <if_stmt pos:start="63:9" pos:end="98:57"><if pos:start="63:9" pos:end="65:9">if <condition pos:start="63:12" pos:end="63:33">(<expr pos:start="63:13" pos:end="63:32"><operator pos:start="63:13" pos:end="63:13">!</operator><call pos:start="63:14" pos:end="63:32"><name pos:start="63:14" pos:end="63:19">strcmp</name><argument_list pos:start="63:20" pos:end="63:32">(<argument pos:start="63:21" pos:end="63:23"><expr pos:start="63:21" pos:end="63:23"><name pos:start="63:21" pos:end="63:23">buf</name></expr></argument>, <argument pos:start="63:26" pos:end="63:31"><expr pos:start="63:26" pos:end="63:31"><literal type="string" pos:start="63:26" pos:end="63:31">"dnet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:35" pos:end="65:9">{<block_content pos:start="64:13" pos:end="64:47">
            <expr_stmt pos:start="64:13" pos:end="64:47"><expr pos:start="64:13" pos:end="64:46"><name pos:start="64:13" pos:end="64:31"><name pos:start="64:13" pos:end="64:14">st</name><operator pos:start="64:15" pos:end="64:16">-&gt;</operator><name pos:start="64:17" pos:end="64:21">codec</name><operator pos:start="64:22" pos:end="64:23">-&gt;</operator><name pos:start="64:24" pos:end="64:31">codec_id</name></name> <operator pos:start="64:33" pos:end="64:33">=</operator> <name pos:start="64:35" pos:end="64:46">CODEC_ID_AC3</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="71:9">else if <condition pos:start="65:19" pos:end="65:40">(<expr pos:start="65:20" pos:end="65:39"><operator pos:start="65:20" pos:end="65:20">!</operator><call pos:start="65:21" pos:end="65:39"><name pos:start="65:21" pos:end="65:26">strcmp</name><argument_list pos:start="65:27" pos:end="65:39">(<argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">buf</name></expr></argument>, <argument pos:start="65:33" pos:end="65:38"><expr pos:start="65:33" pos:end="65:38"><literal type="string" pos:start="65:33" pos:end="65:38">"28_8"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:42" pos:end="71:9">{<block_content pos:start="66:13" pos:end="70:73">
            <expr_stmt pos:start="66:13" pos:end="66:50"><expr pos:start="66:13" pos:end="66:49"><name pos:start="66:13" pos:end="66:31"><name pos:start="66:13" pos:end="66:14">st</name><operator pos:start="66:15" pos:end="66:16">-&gt;</operator><name pos:start="66:17" pos:end="66:21">codec</name><operator pos:start="66:22" pos:end="66:23">-&gt;</operator><name pos:start="66:24" pos:end="66:31">codec_id</name></name> <operator pos:start="66:33" pos:end="66:33">=</operator> <name pos:start="66:35" pos:end="66:49">CODEC_ID_RA_288</name></expr>;</expr_stmt>
            <expr_stmt pos:start="67:13" pos:end="67:41"><expr pos:start="67:13" pos:end="67:40"><name pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:14">st</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:21">codec</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:37">extradata_size</name></name><operator pos:start="67:38" pos:end="67:38">=</operator> <literal type="number" pos:start="67:40" pos:end="67:40">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:57"><expr pos:start="68:13" pos:end="68:56"><name pos:start="68:13" pos:end="68:31"><name pos:start="68:13" pos:end="68:14">rm</name><operator pos:start="68:15" pos:end="68:16">-&gt;</operator><name pos:start="68:17" pos:end="68:31">audio_framesize</name></name> <operator pos:start="68:33" pos:end="68:33">=</operator> <name pos:start="68:35" pos:end="68:56"><name pos:start="68:35" pos:end="68:36">st</name><operator pos:start="68:37" pos:end="68:38">-&gt;</operator><name pos:start="68:39" pos:end="68:43">codec</name><operator pos:start="68:44" pos:end="68:45">-&gt;</operator><name pos:start="68:46" pos:end="68:56">block_align</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:53"><expr pos:start="69:13" pos:end="69:52"><name pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:14">st</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:21">codec</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:34">block_align</name></name> <operator pos:start="69:36" pos:end="69:36">=</operator> <name pos:start="69:38" pos:end="69:52">coded_framesize</name></expr>;</expr_stmt>
            <expr_stmt pos:start="70:13" pos:end="70:73"><expr pos:start="70:13" pos:end="70:72"><name pos:start="70:13" pos:end="70:24"><name pos:start="70:13" pos:end="70:14">rm</name><operator pos:start="70:15" pos:end="70:16">-&gt;</operator><name pos:start="70:17" pos:end="70:24">audiobuf</name></name> <operator pos:start="70:26" pos:end="70:26">=</operator> <call pos:start="70:28" pos:end="70:72"><name pos:start="70:28" pos:end="70:36">av_malloc</name><argument_list pos:start="70:37" pos:end="70:72">(<argument pos:start="70:38" pos:end="70:71"><expr pos:start="70:38" pos:end="70:71"><name pos:start="70:38" pos:end="70:56"><name pos:start="70:38" pos:end="70:39">rm</name><operator pos:start="70:40" pos:end="70:41">-&gt;</operator><name pos:start="70:42" pos:end="70:56">audio_framesize</name></name> <operator pos:start="70:58" pos:end="70:58">*</operator> <name pos:start="70:60" pos:end="70:71">sub_packet_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="71:11" pos:end="98:57">else if <condition pos:start="71:19" pos:end="71:40">(<expr pos:start="71:20" pos:end="71:39"><operator pos:start="71:20" pos:end="71:20">!</operator><call pos:start="71:21" pos:end="71:39"><name pos:start="71:21" pos:end="71:26">strcmp</name><argument_list pos:start="71:27" pos:end="71:39">(<argument pos:start="71:28" pos:end="71:30"><expr pos:start="71:28" pos:end="71:30"><name pos:start="71:28" pos:end="71:30">buf</name></expr></argument>, <argument pos:start="71:33" pos:end="71:38"><expr pos:start="71:33" pos:end="71:38"><literal type="string" pos:start="71:33" pos:end="71:38">"cook"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:42" pos:end="98:57">{<block_content pos:start="72:13" pos:end="98:57">
            <decl_stmt pos:start="72:13" pos:end="72:36"><decl pos:start="72:13" pos:end="72:32"><type pos:start="72:13" pos:end="72:15"><name pos:start="72:13" pos:end="72:15">int</name></type> <name pos:start="72:17" pos:end="72:32">codecdata_length</name></decl>, <decl pos:start="72:35" pos:end="72:35"><type ref="prev" pos:start="72:13" pos:end="72:15"/><name pos:start="72:35" pos:end="72:35">i</name></decl>;</decl_stmt>
            <expr_stmt pos:start="73:13" pos:end="73:25"><expr pos:start="73:13" pos:end="73:24"><call pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:20">get_be16</name><argument_list pos:start="73:21" pos:end="73:24">(<argument pos:start="73:22" pos:end="73:23"><expr pos:start="73:22" pos:end="73:23"><name pos:start="73:22" pos:end="73:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="73:27" pos:end="73:39"><expr pos:start="73:27" pos:end="73:38"><call pos:start="73:27" pos:end="73:38"><name pos:start="73:27" pos:end="73:34">get_byte</name><argument_list pos:start="73:35" pos:end="73:38">(<argument pos:start="73:36" pos:end="73:37"><expr pos:start="73:36" pos:end="73:37"><name pos:start="73:36" pos:end="73:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="74:13" pos:end="75:29"><if pos:start="74:13" pos:end="75:29">if <condition pos:start="74:16" pos:end="74:46">(<expr pos:start="74:17" pos:end="74:45"><operator pos:start="74:17" pos:end="74:17">(</operator><operator pos:start="74:18" pos:end="74:18">(</operator><name pos:start="74:19" pos:end="74:25">version</name> <operator pos:start="74:27" pos:end="74:28">&gt;&gt;</operator> <literal type="number" pos:start="74:30" pos:end="74:31">16</literal><operator pos:start="74:32" pos:end="74:32">)</operator> <operator pos:start="74:34" pos:end="74:34">&amp;</operator> <literal type="number" pos:start="74:36" pos:end="74:39">0xff</literal><operator pos:start="74:40" pos:end="74:40">)</operator> <operator pos:start="74:42" pos:end="74:43">==</operator> <literal type="number" pos:start="74:45" pos:end="74:45">5</literal></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:29"><block_content pos:start="75:17" pos:end="75:29">
                <expr_stmt pos:start="75:17" pos:end="75:29"><expr pos:start="75:17" pos:end="75:28"><call pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:24">get_byte</name><argument_list pos:start="75:25" pos:end="75:28">(<argument pos:start="75:26" pos:end="75:27"><expr pos:start="75:26" pos:end="75:27"><name pos:start="75:26" pos:end="75:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="76:13" pos:end="76:44"><expr pos:start="76:13" pos:end="76:43"><name pos:start="76:13" pos:end="76:28">codecdata_length</name> <operator pos:start="76:30" pos:end="76:30">=</operator> <call pos:start="76:32" pos:end="76:43"><name pos:start="76:32" pos:end="76:39">get_be32</name><argument_list pos:start="76:40" pos:end="76:43">(<argument pos:start="76:41" pos:end="76:42"><expr pos:start="76:41" pos:end="76:42"><name pos:start="76:41" pos:end="76:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="77:13" pos:end="98:57"><if pos:start="77:13" pos:end="87:9">if<condition pos:start="77:15" pos:end="77:93">(<expr pos:start="77:16" pos:end="77:92"><name pos:start="77:16" pos:end="77:31">codecdata_length</name> <operator pos:start="77:33" pos:end="77:33">+</operator> <name pos:start="77:35" pos:end="77:62">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="77:64" pos:end="77:65">&lt;=</operator> <operator pos:start="77:67" pos:end="77:67">(</operator><name pos:start="77:68" pos:end="77:75">unsigned</name><operator pos:start="77:76" pos:end="77:76">)</operator><name pos:start="77:77" pos:end="77:92">codecdata_length</name></expr>)</condition><block pos:start="77:94" pos:end="87:9">{<block_content pos:start="78:17" pos:end="86:73">
                <expr_stmt pos:start="78:17" pos:end="78:72"><expr pos:start="78:17" pos:end="78:71"><call pos:start="78:17" pos:end="78:71"><name pos:start="78:17" pos:end="78:22">av_log</name><argument_list pos:start="78:23" pos:end="78:71">(<argument pos:start="78:24" pos:end="78:24"><expr pos:start="78:24" pos:end="78:24"><name pos:start="78:24" pos:end="78:24">s</name></expr></argument>, <argument pos:start="78:27" pos:end="78:38"><expr pos:start="78:27" pos:end="78:38"><name pos:start="78:27" pos:end="78:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="78:41" pos:end="78:70"><expr pos:start="78:41" pos:end="78:70"><literal type="string" pos:start="78:41" pos:end="78:70">"codecdata_length too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="79:13" pos:end="79:48"><expr pos:start="79:13" pos:end="79:47"><name pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:14">st</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:21">codec</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:31">codec_id</name></name> <operator pos:start="79:33" pos:end="79:33">=</operator> <name pos:start="79:35" pos:end="79:47">CODEC_ID_COOK</name></expr>;</expr_stmt>
            <expr_stmt pos:start="80:13" pos:end="80:56"><expr pos:start="80:13" pos:end="80:55"><name pos:start="80:13" pos:end="80:37"><name pos:start="80:13" pos:end="80:14">st</name><operator pos:start="80:15" pos:end="80:16">-&gt;</operator><name pos:start="80:17" pos:end="80:21">codec</name><operator pos:start="80:22" pos:end="80:23">-&gt;</operator><name pos:start="80:24" pos:end="80:37">extradata_size</name></name><operator pos:start="80:38" pos:end="80:38">=</operator> <name pos:start="80:40" pos:end="80:55">codecdata_length</name></expr>;</expr_stmt>
            <expr_stmt pos:start="81:13" pos:end="81:103"><expr pos:start="81:13" pos:end="81:102"><name pos:start="81:13" pos:end="81:32"><name pos:start="81:13" pos:end="81:14">st</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:21">codec</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:32">extradata</name></name><operator pos:start="81:33" pos:end="81:33">=</operator> <call pos:start="81:35" pos:end="81:102"><name pos:start="81:35" pos:end="81:44">av_mallocz</name><argument_list pos:start="81:45" pos:end="81:102">(<argument pos:start="81:46" pos:end="81:101"><expr pos:start="81:46" pos:end="81:101"><name pos:start="81:46" pos:end="81:70"><name pos:start="81:46" pos:end="81:47">st</name><operator pos:start="81:48" pos:end="81:49">-&gt;</operator><name pos:start="81:50" pos:end="81:54">codec</name><operator pos:start="81:55" pos:end="81:56">-&gt;</operator><name pos:start="81:57" pos:end="81:70">extradata_size</name></name> <operator pos:start="81:72" pos:end="81:72">+</operator> <name pos:start="81:74" pos:end="81:101">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:start="82:13" pos:end="83:67">for<control pos:start="82:16" pos:end="82:49">(<init pos:start="82:17" pos:end="82:22"><expr pos:start="82:17" pos:end="82:21"><name pos:start="82:17" pos:end="82:17">i</name> <operator pos:start="82:19" pos:end="82:19">=</operator> <literal type="number" pos:start="82:21" pos:end="82:21">0</literal></expr>;</init> <condition pos:start="82:24" pos:end="82:44"><expr pos:start="82:24" pos:end="82:43"><name pos:start="82:24" pos:end="82:24">i</name> <operator pos:start="82:26" pos:end="82:26">&lt;</operator> <name pos:start="82:28" pos:end="82:43">codecdata_length</name></expr>;</condition> <incr pos:start="82:46" pos:end="82:48"><expr pos:start="82:46" pos:end="82:48"><name pos:start="82:46" pos:end="82:46">i</name><operator pos:start="82:47" pos:end="82:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="83:17" pos:end="83:67"><block_content pos:start="83:17" pos:end="83:67">
                <expr_stmt pos:start="83:17" pos:end="83:67"><expr pos:start="83:17" pos:end="83:66"><operator pos:start="83:17" pos:end="83:17">(</operator><operator pos:start="83:18" pos:end="83:18">(</operator><name pos:start="83:19" pos:end="83:25">uint8_t</name><operator pos:start="83:26" pos:end="83:26">*</operator><operator pos:start="83:27" pos:end="83:27">)</operator><name pos:start="83:28" pos:end="83:47"><name pos:start="83:28" pos:end="83:29">st</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:36">codec</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:47">extradata</name></name><operator pos:start="83:48" pos:end="83:48">)</operator><index pos:start="83:49" pos:end="83:51">[<expr pos:start="83:50" pos:end="83:50"><name pos:start="83:50" pos:end="83:50">i</name></expr>]</index> <operator pos:start="83:53" pos:end="83:53">=</operator> <call pos:start="83:55" pos:end="83:66"><name pos:start="83:55" pos:end="83:62">get_byte</name><argument_list pos:start="83:63" pos:end="83:66">(<argument pos:start="83:64" pos:end="83:65"><expr pos:start="83:64" pos:end="83:65"><name pos:start="83:64" pos:end="83:65">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt pos:start="84:13" pos:end="84:57"><expr pos:start="84:13" pos:end="84:56"><name pos:start="84:13" pos:end="84:31"><name pos:start="84:13" pos:end="84:14">rm</name><operator pos:start="84:15" pos:end="84:16">-&gt;</operator><name pos:start="84:17" pos:end="84:31">audio_framesize</name></name> <operator pos:start="84:33" pos:end="84:33">=</operator> <name pos:start="84:35" pos:end="84:56"><name pos:start="84:35" pos:end="84:36">st</name><operator pos:start="84:37" pos:end="84:38">-&gt;</operator><name pos:start="84:39" pos:end="84:43">codec</name><operator pos:start="84:44" pos:end="84:45">-&gt;</operator><name pos:start="84:46" pos:end="84:56">block_align</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="85:13" pos:end="85:57"><expr pos:start="85:13" pos:end="85:56"><name pos:start="85:13" pos:end="85:34"><name pos:start="85:13" pos:end="85:14">st</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:21">codec</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:34">block_align</name></name> <operator pos:start="85:36" pos:end="85:36">=</operator> <name pos:start="85:38" pos:end="85:56"><name pos:start="85:38" pos:end="85:39">rm</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:56">sub_packet_size</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="86:13" pos:end="86:73"><expr pos:start="86:13" pos:end="86:72"><name pos:start="86:13" pos:end="86:24"><name pos:start="86:13" pos:end="86:14">rm</name><operator pos:start="86:15" pos:end="86:16">-&gt;</operator><name pos:start="86:17" pos:end="86:24">audiobuf</name></name> <operator pos:start="86:26" pos:end="86:26">=</operator> <call pos:start="86:28" pos:end="86:72"><name pos:start="86:28" pos:end="86:36">av_malloc</name><argument_list pos:start="86:37" pos:end="86:72">(<argument pos:start="86:38" pos:end="86:71"><expr pos:start="86:38" pos:end="86:71"><name pos:start="86:38" pos:end="86:56"><name pos:start="86:38" pos:end="86:39">rm</name><operator pos:start="86:40" pos:end="86:41">-&gt;</operator><name pos:start="86:42" pos:end="86:56">audio_framesize</name></name> <operator pos:start="86:58" pos:end="86:58">*</operator> <name pos:start="86:60" pos:end="86:71">sub_packet_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="87:11" pos:end="98:57">else <block pos:start="87:16" pos:end="98:57">{<block_content pos:start="88:13" pos:end="98:57">
            <expr_stmt pos:start="88:13" pos:end="88:48"><expr pos:start="88:13" pos:end="88:47"><name pos:start="88:13" pos:end="88:31"><name pos:start="88:13" pos:end="88:14">st</name><operator pos:start="88:15" pos:end="88:16">-&gt;</operator><name pos:start="88:17" pos:end="88:21">codec</name><operator pos:start="88:22" pos:end="88:23">-&gt;</operator><name pos:start="88:24" pos:end="88:31">codec_id</name></name> <operator pos:start="88:33" pos:end="88:33">=</operator> <name pos:start="88:35" pos:end="88:47">CODEC_ID_NONE</name></expr>;</expr_stmt>
            <expr_stmt pos:start="89:13" pos:end="90:25"><expr pos:start="89:13" pos:end="90:24"><call pos:start="89:13" pos:end="90:24"><name pos:start="89:13" pos:end="89:19">pstrcpy</name><argument_list pos:start="89:20" pos:end="90:24">(<argument pos:start="89:21" pos:end="89:41"><expr pos:start="89:21" pos:end="89:41"><name pos:start="89:21" pos:end="89:41"><name pos:start="89:21" pos:end="89:22">st</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:29">codec</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:41">codec_name</name></name></expr></argument>, <argument pos:start="89:44" pos:end="89:72"><expr pos:start="89:44" pos:end="89:72"><sizeof pos:start="89:44" pos:end="89:72">sizeof<argument_list pos:start="89:50" pos:end="89:72">(<argument pos:start="89:51" pos:end="89:71"><expr pos:start="89:51" pos:end="89:71"><name pos:start="89:51" pos:end="89:71"><name pos:start="89:51" pos:end="89:52">st</name><operator pos:start="89:53" pos:end="89:54">-&gt;</operator><name pos:start="89:55" pos:end="89:59">codec</name><operator pos:start="89:60" pos:end="89:61">-&gt;</operator><name pos:start="89:62" pos:end="89:71">codec_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                    <argument pos:start="90:21" pos:end="90:23"><expr pos:start="90:21" pos:end="90:23"><name pos:start="90:21" pos:end="90:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="91:9" pos:end="98:57"><if pos:start="91:9" pos:end="98:57">if <condition pos:start="91:12" pos:end="91:21">(<expr pos:start="91:13" pos:end="91:20"><name pos:start="91:13" pos:end="91:20">read_all</name></expr>)</condition> <block pos:start="91:23" pos:end="98:57">{<block_content pos:start="92:13" pos:end="98:57">
            <expr_stmt pos:start="92:13" pos:end="92:25"><expr pos:start="92:13" pos:end="92:24"><call pos:start="92:13" pos:end="92:24"><name pos:start="92:13" pos:end="92:20">get_byte</name><argument_list pos:start="92:21" pos:end="92:24">(<argument pos:start="92:22" pos:end="92:23"><expr pos:start="92:22" pos:end="92:23"><name pos:start="92:22" pos:end="92:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="93:13" pos:end="93:25"><expr pos:start="93:13" pos:end="93:24"><call pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:20">get_byte</name><argument_list pos:start="93:21" pos:end="93:24">(<argument pos:start="93:22" pos:end="93:23"><expr pos:start="93:22" pos:end="93:23"><name pos:start="93:22" pos:end="93:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="94:13" pos:end="94:25"><expr pos:start="94:13" pos:end="94:24"><call pos:start="94:13" pos:end="94:24"><name pos:start="94:13" pos:end="94:20">get_byte</name><argument_list pos:start="94:21" pos:end="94:24">(<argument pos:start="94:22" pos:end="94:23"><expr pos:start="94:22" pos:end="94:23"><name pos:start="94:22" pos:end="94:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="95:13" pos:end="95:53"><expr pos:start="95:13" pos:end="95:52"><call pos:start="95:13" pos:end="95:52"><name pos:start="95:13" pos:end="95:20">get_str8</name><argument_list pos:start="95:21" pos:end="95:52">(<argument pos:start="95:22" pos:end="95:23"><expr pos:start="95:22" pos:end="95:23"><name pos:start="95:22" pos:end="95:23">pb</name></expr></argument>, <argument pos:start="95:26" pos:end="95:33"><expr pos:start="95:26" pos:end="95:33"><name pos:start="95:26" pos:end="95:33"><name pos:start="95:26" pos:end="95:26">s</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:33">title</name></name></expr></argument>, <argument pos:start="95:36" pos:end="95:51"><expr pos:start="95:36" pos:end="95:51"><sizeof pos:start="95:36" pos:end="95:51">sizeof<argument_list pos:start="95:42" pos:end="95:51">(<argument pos:start="95:43" pos:end="95:50"><expr pos:start="95:43" pos:end="95:50"><name pos:start="95:43" pos:end="95:50"><name pos:start="95:43" pos:end="95:43">s</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:50">title</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="96:13" pos:end="96:55"><expr pos:start="96:13" pos:end="96:54"><call pos:start="96:13" pos:end="96:54"><name pos:start="96:13" pos:end="96:20">get_str8</name><argument_list pos:start="96:21" pos:end="96:54">(<argument pos:start="96:22" pos:end="96:23"><expr pos:start="96:22" pos:end="96:23"><name pos:start="96:22" pos:end="96:23">pb</name></expr></argument>, <argument pos:start="96:26" pos:end="96:34"><expr pos:start="96:26" pos:end="96:34"><name pos:start="96:26" pos:end="96:34"><name pos:start="96:26" pos:end="96:26">s</name><operator pos:start="96:27" pos:end="96:28">-&gt;</operator><name pos:start="96:29" pos:end="96:34">author</name></name></expr></argument>, <argument pos:start="96:37" pos:end="96:53"><expr pos:start="96:37" pos:end="96:53"><sizeof pos:start="96:37" pos:end="96:53">sizeof<argument_list pos:start="96:43" pos:end="96:53">(<argument pos:start="96:44" pos:end="96:52"><expr pos:start="96:44" pos:end="96:52"><name pos:start="96:44" pos:end="96:52"><name pos:start="96:44" pos:end="96:44">s</name><operator pos:start="96:45" pos:end="96:46">-&gt;</operator><name pos:start="96:47" pos:end="96:52">author</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="97:13" pos:end="97:61"><expr pos:start="97:13" pos:end="97:60"><call pos:start="97:13" pos:end="97:60"><name pos:start="97:13" pos:end="97:20">get_str8</name><argument_list pos:start="97:21" pos:end="97:60">(<argument pos:start="97:22" pos:end="97:23"><expr pos:start="97:22" pos:end="97:23"><name pos:start="97:22" pos:end="97:23">pb</name></expr></argument>, <argument pos:start="97:26" pos:end="97:37"><expr pos:start="97:26" pos:end="97:37"><name pos:start="97:26" pos:end="97:37"><name pos:start="97:26" pos:end="97:26">s</name><operator pos:start="97:27" pos:end="97:28">-&gt;</operator><name pos:start="97:29" pos:end="97:37">copyright</name></name></expr></argument>, <argument pos:start="97:40" pos:end="97:59"><expr pos:start="97:40" pos:end="97:59"><sizeof pos:start="97:40" pos:end="97:59">sizeof<argument_list pos:start="97:46" pos:end="97:59">(<argument pos:start="97:47" pos:end="97:58"><expr pos:start="97:47" pos:end="97:58"><name pos:start="97:47" pos:end="97:58"><name pos:start="97:47" pos:end="97:47">s</name><operator pos:start="97:48" pos:end="97:49">-&gt;</operator><name pos:start="97:50" pos:end="97:58">copyright</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="98:13" pos:end="98:57"><expr pos:start="98:13" pos:end="98:56"><call pos:start="98:13" pos:end="98:56"><name pos:start="98:13" pos:end="98:20">get_str8</name><argument_list pos:start="98:21" pos:end="98:56">(<argument pos:start="98:22" pos:end="98:23"><expr pos:start="98:22" pos:end="98:23"><name pos:start="98:22" pos:end="98:23">pb</name></expr></argument>, <argument pos:start="98:26" pos:end="98:35"><expr pos:start="98:26" pos:end="98:35"><name pos:start="98:26" pos:end="98:35"><name pos:start="98:26" pos:end="98:26">s</name><operator pos:start="98:27" pos:end="98:28">-&gt;</operator><name pos:start="98:29" pos:end="98:35">comment</name></name></expr></argument>, <argument pos:start="98:38" pos:end="98:55"><expr pos:start="98:38" pos:end="98:55"><sizeof pos:start="98:38" pos:end="98:55">sizeof<argument_list pos:start="98:44" pos:end="98:55">(<argument pos:start="98:45" pos:end="98:54"><expr pos:start="98:45" pos:end="98:54"><name pos:start="98:45" pos:end="98:54"><name pos:start="98:45" pos:end="98:45">s</name><operator pos:start="98:46" pos:end="98:47">-&gt;</operator><name pos:start="98:48" pos:end="98:54">comment</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
