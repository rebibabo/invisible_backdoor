<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8508.c" pos:tabs="8"><function pos:start="1:1" pos:end="189:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">rtp_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="189:1">{<block_content pos:start="5:5" pos:end="187:15">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:42"><name pos:start="5:13" pos:end="5:19">recvbuf</name><index pos:start="5:20" pos:end="5:42">[<expr pos:start="5:21" pos:end="5:41"><name pos:start="5:21" pos:end="5:41">RTP_MAX_PACKET_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:18"><name pos:start="7:10" pos:end="7:13">host</name><index pos:start="7:14" pos:end="7:18">[<expr pos:start="7:15" pos:end="7:17"><literal type="number" pos:start="7:15" pos:end="7:17">500</literal></expr>]</index></name></decl>, <decl pos:start="7:21" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:21" pos:end="7:28"><name pos:start="7:21" pos:end="7:23">sdp</name><index pos:start="7:24" pos:end="7:28">[<expr pos:start="7:25" pos:end="7:27"><literal type="number" pos:start="7:25" pos:end="7:27">500</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:17">port</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:14">URLContext</name><modifier pos:start="11:15" pos:end="11:15">*</modifier></type> <name pos:start="11:17" pos:end="11:18">in</name> <init pos:start="11:20" pos:end="11:25">= <expr pos:start="11:22" pos:end="11:25"><name pos:start="11:22" pos:end="11:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">payload_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18">AVCodecContext</name></type> <name pos:start="15:20" pos:end="15:24">codec</name> <init pos:start="15:26" pos:end="15:32">= <expr pos:start="15:28" pos:end="15:32"><block pos:start="15:28" pos:end="15:32">{ <expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:27">sockaddr_storage</name></name></type> <name pos:start="17:29" pos:end="17:32">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:15">AVIOContext</name></type> <name pos:start="19:17" pos:end="19:18">pb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:37"><decl pos:start="21:5" pos:end="21:36"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">socklen_t</name></type> <name pos:start="21:15" pos:end="21:21">addrlen</name> <init pos:start="21:23" pos:end="21:36">= <expr pos:start="21:25" pos:end="21:36"><sizeof pos:start="21:25" pos:end="21:36">sizeof<argument_list pos:start="21:31" pos:end="21:36">(<argument pos:start="21:32" pos:end="21:35"><expr pos:start="21:32" pos:end="21:35"><name pos:start="21:32" pos:end="21:35">addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:33"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:13">RTSPState</name> <modifier pos:start="23:15" pos:end="23:15">*</modifier></type><name pos:start="23:16" pos:end="23:17">rt</name> <init pos:start="23:19" pos:end="23:32">= <expr pos:start="23:21" pos:end="23:32"><name pos:start="23:21" pos:end="23:32"><name pos:start="23:21" pos:end="23:21">s</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:32">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:28"><if pos:start="27:5" pos:end="29:28">if <condition pos:start="27:8" pos:end="27:27">(<expr pos:start="27:9" pos:end="27:26"><operator pos:start="27:9" pos:end="27:9">!</operator><call pos:start="27:10" pos:end="27:26"><name pos:start="27:10" pos:end="27:24">ff_network_init</name><argument_list pos:start="27:25" pos:end="27:26">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:28"><block_content pos:start="29:9" pos:end="29:28">

        <return pos:start="29:9" pos:end="29:28">return <expr pos:start="29:16" pos:end="29:27"><call pos:start="29:16" pos:end="29:27"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:27">(<argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:23">(<expr pos:start="33:9" pos:end="33:22"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:22"><name pos:start="33:10" pos:end="33:11">rt</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:22">protocols</name></name></expr>)</condition> <block pos:start="33:25" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:35">

        <expr_stmt pos:start="35:9" pos:end="35:56"><expr pos:start="35:9" pos:end="35:55"><name pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:10">rt</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:21">protocols</name></name> <operator pos:start="35:23" pos:end="35:23">=</operator> <call pos:start="35:25" pos:end="35:55"><name pos:start="35:25" pos:end="35:43">ffurl_get_protocols</name><argument_list pos:start="35:44" pos:end="35:55">(<argument pos:start="35:45" pos:end="35:48"><expr pos:start="35:45" pos:end="35:48"><name pos:start="35:45" pos:end="35:48">NULL</name></expr></argument>, <argument pos:start="35:51" pos:end="35:54"><expr pos:start="35:51" pos:end="35:54"><name pos:start="35:51" pos:end="35:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:35"><if pos:start="37:9" pos:end="39:35">if <condition pos:start="37:12" pos:end="37:27">(<expr pos:start="37:13" pos:end="37:26"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:26"><name pos:start="37:14" pos:end="37:15">rt</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:26">protocols</name></name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:35"><block_content pos:start="39:13" pos:end="39:35">

            <return pos:start="39:13" pos:end="39:35">return <expr pos:start="39:20" pos:end="39:34"><call pos:start="39:20" pos:end="39:34"><name pos:start="39:20" pos:end="39:26">AVERROR</name><argument_list pos:start="39:27" pos:end="39:34">(<argument pos:start="39:28" pos:end="39:33"><expr pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="47:66"><expr pos:start="45:5" pos:end="47:65"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="47:65"><name pos:start="45:11" pos:end="45:20">ffurl_open</name><argument_list pos:start="45:21" pos:end="47:65">(<argument pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><operator pos:start="45:22" pos:end="45:22">&amp;</operator><name pos:start="45:23" pos:end="45:24">in</name></expr></argument>, <argument pos:start="45:27" pos:end="45:37"><expr pos:start="45:27" pos:end="45:37"><name pos:start="45:27" pos:end="45:37"><name pos:start="45:27" pos:end="45:27">s</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:37">filename</name></name></expr></argument>, <argument pos:start="45:40" pos:end="45:53"><expr pos:start="45:40" pos:end="45:53"><name pos:start="45:40" pos:end="45:53">AVIO_FLAG_READ</name></expr></argument>,

                     <argument pos:start="47:22" pos:end="47:43"><expr pos:start="47:22" pos:end="47:43"><operator pos:start="47:22" pos:end="47:22">&amp;</operator><name pos:start="47:23" pos:end="47:43"><name pos:start="47:23" pos:end="47:23">s</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:43">interrupt_callback</name></name></expr></argument>, <argument pos:start="47:46" pos:end="47:49"><expr pos:start="47:46" pos:end="47:49"><name pos:start="47:46" pos:end="47:49">NULL</name></expr></argument>, <argument pos:start="47:52" pos:end="47:64"><expr pos:start="47:52" pos:end="47:64"><name pos:start="47:52" pos:end="47:64"><name pos:start="47:52" pos:end="47:53">rt</name><operator pos:start="47:54" pos:end="47:55">-&gt;</operator><name pos:start="47:56" pos:end="47:64">protocols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="51:18"><if pos:start="49:5" pos:end="51:18">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">ret</name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:18"><block_content pos:start="51:9" pos:end="51:18">

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <while pos:start="55:5" pos:end="99:5">while <condition pos:start="55:11" pos:end="55:13">(<expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">1</literal></expr>)</condition> <block pos:start="55:15" pos:end="99:5">{<block_content pos:start="57:9" pos:end="97:14">

        <expr_stmt pos:start="57:9" pos:end="57:55"><expr pos:start="57:9" pos:end="57:54"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:54"><name pos:start="57:15" pos:end="57:24">ffurl_read</name><argument_list pos:start="57:25" pos:end="57:54">(<argument pos:start="57:26" pos:end="57:27"><expr pos:start="57:26" pos:end="57:27"><name pos:start="57:26" pos:end="57:27">in</name></expr></argument>, <argument pos:start="57:30" pos:end="57:36"><expr pos:start="57:30" pos:end="57:36"><name pos:start="57:30" pos:end="57:36">recvbuf</name></expr></argument>, <argument pos:start="57:39" pos:end="57:53"><expr pos:start="57:39" pos:end="57:53"><sizeof pos:start="57:39" pos:end="57:53">sizeof<argument_list pos:start="57:45" pos:end="57:53">(<argument pos:start="57:46" pos:end="57:52"><expr pos:start="57:46" pos:end="57:52"><name pos:start="57:46" pos:end="57:52">recvbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="61:21"><if pos:start="59:9" pos:end="61:21">if <condition pos:start="59:12" pos:end="59:35">(<expr pos:start="59:13" pos:end="59:34"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:18">==</operator> <call pos:start="59:20" pos:end="59:34"><name pos:start="59:20" pos:end="59:26">AVERROR</name><argument_list pos:start="59:27" pos:end="59:34">(<argument pos:start="59:28" pos:end="59:33"><expr pos:start="59:28" pos:end="59:33"><name pos:start="59:28" pos:end="59:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:21"><block_content pos:start="61:13" pos:end="61:21">

            <continue pos:start="61:13" pos:end="61:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="65:22"><if pos:start="63:9" pos:end="65:22">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:22"><block_content pos:start="65:13" pos:end="65:22">

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:21">(<expr pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">&lt;</operator> <literal type="number" pos:start="67:19" pos:end="67:20">12</literal></expr>)</condition> <block pos:start="67:23" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:21">

            <expr_stmt pos:start="69:13" pos:end="69:69"><expr pos:start="69:13" pos:end="69:68"><call pos:start="69:13" pos:end="69:68"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="69:68">(<argument pos:start="69:20" pos:end="69:20"><expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">s</name></expr></argument>, <argument pos:start="69:23" pos:end="69:36"><expr pos:start="69:23" pos:end="69:36"><name pos:start="69:23" pos:end="69:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="69:39" pos:end="69:67"><expr pos:start="69:39" pos:end="69:67"><literal type="string" pos:start="69:39" pos:end="69:67">"Received too short packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="71:13" pos:end="71:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="77:9" pos:end="85:9"><if pos:start="77:9" pos:end="85:9">if <condition pos:start="77:12" pos:end="77:40">(<expr pos:start="77:13" pos:end="77:39"><operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:23"><name pos:start="77:14" pos:end="77:20">recvbuf</name><index pos:start="77:21" pos:end="77:23">[<expr pos:start="77:22" pos:end="77:22"><literal type="number" pos:start="77:22" pos:end="77:22">0</literal></expr>]</index></name> <operator pos:start="77:25" pos:end="77:25">&amp;</operator> <literal type="number" pos:start="77:27" pos:end="77:30">0xc0</literal><operator pos:start="77:31" pos:end="77:31">)</operator> <operator pos:start="77:33" pos:end="77:34">!=</operator> <literal type="number" pos:start="77:36" pos:end="77:39">0x80</literal></expr>)</condition> <block pos:start="77:42" pos:end="85:9">{<block_content pos:start="79:13" pos:end="83:21">

            <expr_stmt pos:start="79:13" pos:end="81:52"><expr pos:start="79:13" pos:end="81:51"><call pos:start="79:13" pos:end="81:51"><name pos:start="79:13" pos:end="79:18">av_log</name><argument_list pos:start="79:19" pos:end="81:51">(<argument pos:start="79:20" pos:end="79:20"><expr pos:start="79:20" pos:end="79:20"><name pos:start="79:20" pos:end="79:20">s</name></expr></argument>, <argument pos:start="79:23" pos:end="79:36"><expr pos:start="79:23" pos:end="79:36"><name pos:start="79:23" pos:end="79:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="79:39" pos:end="81:50"><expr pos:start="79:39" pos:end="81:50"><literal type="string" pos:start="79:39" pos:end="79:71">"Unsupported RTP version packet "</literal>

                                      <literal type="string" pos:start="81:39" pos:end="81:50">"received\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="83:13" pos:end="83:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="89:9" pos:end="91:21"><if pos:start="89:9" pos:end="91:21">if <condition pos:start="89:12" pos:end="89:39">(<expr pos:start="89:13" pos:end="89:38"><call pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:26">RTP_PT_IS_RTCP</name><argument_list pos:start="89:27" pos:end="89:38">(<argument pos:start="89:28" pos:end="89:37"><expr pos:start="89:28" pos:end="89:37"><name pos:start="89:28" pos:end="89:37"><name pos:start="89:28" pos:end="89:34">recvbuf</name><index pos:start="89:35" pos:end="89:37">[<expr pos:start="89:36" pos:end="89:36"><literal type="number" pos:start="89:36" pos:end="89:36">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:21"><block_content pos:start="91:13" pos:end="91:21">

            <continue pos:start="91:13" pos:end="91:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:41"><expr pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:20">payload_type</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <name pos:start="95:24" pos:end="95:33"><name pos:start="95:24" pos:end="95:30">recvbuf</name><index pos:start="95:31" pos:end="95:33">[<expr pos:start="95:32" pos:end="95:32"><literal type="number" pos:start="95:32" pos:end="95:32">1</literal></expr>]</index></name> <operator pos:start="95:35" pos:end="95:35">&amp;</operator> <literal type="number" pos:start="95:37" pos:end="95:40">0x7f</literal></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    </block_content>}</block></while>

    <expr_stmt pos:start="101:5" pos:end="101:79"><expr pos:start="101:5" pos:end="101:78"><call pos:start="101:5" pos:end="101:78"><name pos:start="101:5" pos:end="101:15">getsockname</name><argument_list pos:start="101:16" pos:end="101:78">(<argument pos:start="101:17" pos:end="101:41"><expr pos:start="101:17" pos:end="101:41"><call pos:start="101:17" pos:end="101:41"><name pos:start="101:17" pos:end="101:37">ffurl_get_file_handle</name><argument_list pos:start="101:38" pos:end="101:41">(<argument pos:start="101:39" pos:end="101:40"><expr pos:start="101:39" pos:end="101:40"><name pos:start="101:39" pos:end="101:40">in</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="101:44" pos:end="101:67"><expr pos:start="101:44" pos:end="101:67"><operator pos:start="101:44" pos:end="101:44">(</operator>struct <name pos:start="101:52" pos:end="101:59">sockaddr</name><operator pos:start="101:60" pos:end="101:60">*</operator><operator pos:start="101:61" pos:end="101:61">)</operator> <operator pos:start="101:63" pos:end="101:63">&amp;</operator><name pos:start="101:64" pos:end="101:67">addr</name></expr></argument>, <argument pos:start="101:70" pos:end="101:77"><expr pos:start="101:70" pos:end="101:77"><operator pos:start="101:70" pos:end="101:70">&amp;</operator><name pos:start="101:71" pos:end="101:77">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:20"><expr pos:start="103:5" pos:end="103:19"><call pos:start="103:5" pos:end="103:19"><name pos:start="103:5" pos:end="103:15">ffurl_close</name><argument_list pos:start="103:16" pos:end="103:19">(<argument pos:start="103:17" pos:end="103:18"><expr pos:start="103:17" pos:end="103:18"><name pos:start="103:17" pos:end="103:18">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:14"><expr pos:start="105:5" pos:end="105:13"><name pos:start="105:5" pos:end="105:6">in</name> <operator pos:start="105:8" pos:end="105:8">=</operator> <name pos:start="105:10" pos:end="105:13">NULL</name></expr>;</expr_stmt>



    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:52">(<expr pos:start="109:9" pos:end="109:51"><call pos:start="109:9" pos:end="109:51"><name pos:start="109:9" pos:end="109:29">ff_rtp_get_codec_info</name><argument_list pos:start="109:30" pos:end="109:51">(<argument pos:start="109:31" pos:end="109:36"><expr pos:start="109:31" pos:end="109:36"><operator pos:start="109:31" pos:end="109:31">&amp;</operator><name pos:start="109:32" pos:end="109:36">codec</name></expr></argument>, <argument pos:start="109:39" pos:end="109:50"><expr pos:start="109:39" pos:end="109:50"><name pos:start="109:39" pos:end="109:50">payload_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:54" pos:end="119:5">{<block_content pos:start="111:9" pos:end="117:18">

        <expr_stmt pos:start="111:9" pos:end="115:47"><expr pos:start="111:9" pos:end="115:46"><call pos:start="111:9" pos:end="115:46"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="115:46">(<argument pos:start="111:16" pos:end="111:16"><expr pos:start="111:16" pos:end="111:16"><name pos:start="111:16" pos:end="111:16">s</name></expr></argument>, <argument pos:start="111:19" pos:end="111:30"><expr pos:start="111:19" pos:end="111:30"><name pos:start="111:19" pos:end="111:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:33" pos:end="113:69"><expr pos:start="111:33" pos:end="113:69"><literal type="string" pos:start="111:33" pos:end="111:72">"Unable to receive RTP payload type %d "</literal>

                                <literal type="string" pos:start="113:33" pos:end="113:69">"without an SDP file describing it\n"</literal></expr></argument>,

                                 <argument pos:start="115:34" pos:end="115:45"><expr pos:start="115:34" pos:end="115:45"><name pos:start="115:34" pos:end="115:45">payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="117:9" pos:end="117:18">goto <name pos:start="117:14" pos:end="117:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="121:5" pos:end="129:5"><if pos:start="121:5" pos:end="129:5">if <condition pos:start="121:8" pos:end="121:46">(<expr pos:start="121:9" pos:end="121:45"><name pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:13">codec</name><operator pos:start="121:14" pos:end="121:14">.</operator><name pos:start="121:15" pos:end="121:24">codec_type</name></name> <operator pos:start="121:26" pos:end="121:27">!=</operator> <name pos:start="121:29" pos:end="121:45">AVMEDIA_TYPE_DATA</name></expr>)</condition> <block pos:start="121:48" pos:end="129:5">{<block_content pos:start="123:9" pos:end="127:53">

        <expr_stmt pos:start="123:9" pos:end="127:53"><expr pos:start="123:9" pos:end="127:52"><call pos:start="123:9" pos:end="127:52"><name pos:start="123:9" pos:end="123:14">av_log</name><argument_list pos:start="123:15" pos:end="127:52">(<argument pos:start="123:16" pos:end="123:16"><expr pos:start="123:16" pos:end="123:16"><name pos:start="123:16" pos:end="123:16">s</name></expr></argument>, <argument pos:start="123:19" pos:end="123:32"><expr pos:start="123:19" pos:end="123:32"><name pos:start="123:19" pos:end="123:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="123:35" pos:end="127:51"><expr pos:start="123:35" pos:end="127:51"><literal type="string" pos:start="123:35" pos:end="123:78">"Guessing on RTP content - if not received "</literal>

                                  <literal type="string" pos:start="125:35" pos:end="125:66">"properly you need an SDP file "</literal>

                                  <literal type="string" pos:start="127:35" pos:end="127:51">"describing it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="135:39"><expr pos:start="133:5" pos:end="135:38"><call pos:start="133:5" pos:end="135:38"><name pos:start="133:5" pos:end="133:16">av_url_split</name><argument_list pos:start="133:17" pos:end="135:38">(<argument pos:start="133:18" pos:end="133:21"><expr pos:start="133:18" pos:end="133:21"><name pos:start="133:18" pos:end="133:21">NULL</name></expr></argument>, <argument pos:start="133:24" pos:end="133:24"><expr pos:start="133:24" pos:end="133:24"><literal type="number" pos:start="133:24" pos:end="133:24">0</literal></expr></argument>, <argument pos:start="133:27" pos:end="133:30"><expr pos:start="133:27" pos:end="133:30"><name pos:start="133:27" pos:end="133:30">NULL</name></expr></argument>, <argument pos:start="133:33" pos:end="133:33"><expr pos:start="133:33" pos:end="133:33"><literal type="number" pos:start="133:33" pos:end="133:33">0</literal></expr></argument>, <argument pos:start="133:36" pos:end="133:39"><expr pos:start="133:36" pos:end="133:39"><name pos:start="133:36" pos:end="133:39">host</name></expr></argument>, <argument pos:start="133:42" pos:end="133:53"><expr pos:start="133:42" pos:end="133:53"><sizeof pos:start="133:42" pos:end="133:53">sizeof<argument_list pos:start="133:48" pos:end="133:53">(<argument pos:start="133:49" pos:end="133:52"><expr pos:start="133:49" pos:end="133:52"><name pos:start="133:49" pos:end="133:52">host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="133:56" pos:end="133:60"><expr pos:start="133:56" pos:end="133:60"><operator pos:start="133:56" pos:end="133:56">&amp;</operator><name pos:start="133:57" pos:end="133:60">port</name></expr></argument>,

                 <argument pos:start="135:18" pos:end="135:21"><expr pos:start="135:18" pos:end="135:21"><name pos:start="135:18" pos:end="135:21">NULL</name></expr></argument>, <argument pos:start="135:24" pos:end="135:24"><expr pos:start="135:24" pos:end="135:24"><literal type="number" pos:start="135:24" pos:end="135:24">0</literal></expr></argument>, <argument pos:start="135:27" pos:end="135:37"><expr pos:start="135:27" pos:end="135:37"><name pos:start="135:27" pos:end="135:37"><name pos:start="135:27" pos:end="135:27">s</name><operator pos:start="135:28" pos:end="135:29">-&gt;</operator><name pos:start="135:30" pos:end="135:37">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="149:33"><expr pos:start="139:5" pos:end="149:32"><call pos:start="139:5" pos:end="149:32"><name pos:start="139:5" pos:end="139:12">snprintf</name><argument_list pos:start="139:13" pos:end="149:32">(<argument pos:start="139:14" pos:end="139:16"><expr pos:start="139:14" pos:end="139:16"><name pos:start="139:14" pos:end="139:16">sdp</name></expr></argument>, <argument pos:start="139:19" pos:end="139:29"><expr pos:start="139:19" pos:end="139:29"><sizeof pos:start="139:19" pos:end="139:29">sizeof<argument_list pos:start="139:25" pos:end="139:29">(<argument pos:start="139:26" pos:end="139:28"><expr pos:start="139:26" pos:end="139:28"><name pos:start="139:26" pos:end="139:28">sdp</name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="141:14" pos:end="141:60"><expr pos:start="141:14" pos:end="141:60"><literal type="string" pos:start="141:14" pos:end="141:60">"v=0\r\nc=IN IP%d %s\r\nm=%s %d RTP/AVP %d\r\n"</literal></expr></argument>,

             <argument pos:start="143:14" pos:end="143:46"><expr pos:start="143:14" pos:end="143:46"><ternary pos:start="143:14" pos:end="143:46"><condition pos:start="143:14" pos:end="143:40"><expr pos:start="143:14" pos:end="143:38"><name pos:start="143:14" pos:end="143:27"><name pos:start="143:14" pos:end="143:17">addr</name><operator pos:start="143:18" pos:end="143:18">.</operator><name pos:start="143:19" pos:end="143:27">ss_family</name></name> <operator pos:start="143:29" pos:end="143:30">==</operator> <name pos:start="143:32" pos:end="143:38">AF_INET</name></expr> ?</condition><then pos:start="143:42" pos:end="143:42"> <expr pos:start="143:42" pos:end="143:42"><literal type="number" pos:start="143:42" pos:end="143:42">4</literal></expr> </then><else pos:start="143:44" pos:end="143:46">: <expr pos:start="143:46" pos:end="143:46"><literal type="number" pos:start="143:46" pos:end="143:46">6</literal></expr></else></ternary></expr></argument>, <argument pos:start="143:49" pos:end="143:52"><expr pos:start="143:49" pos:end="143:52"><name pos:start="143:49" pos:end="143:52">host</name></expr></argument>,

             <argument pos:start="145:14" pos:end="147:71"><expr pos:start="145:14" pos:end="147:71"><ternary pos:start="145:14" pos:end="147:71"><condition pos:start="145:14" pos:end="145:53"><expr pos:start="145:14" pos:end="145:50"><name pos:start="145:14" pos:end="145:29"><name pos:start="145:14" pos:end="145:18">codec</name><operator pos:start="145:19" pos:end="145:19">.</operator><name pos:start="145:20" pos:end="145:29">codec_type</name></name> <operator pos:start="145:31" pos:end="145:32">==</operator> <name pos:start="145:34" pos:end="145:50">AVMEDIA_TYPE_DATA</name></expr>  ?</condition><then pos:start="145:55" pos:end="145:67"> <expr pos:start="145:55" pos:end="145:67"><literal type="string" pos:start="145:55" pos:end="145:67">"application"</literal></expr> </then><else pos:start="145:69" pos:end="147:71">:

             <expr pos:start="147:14" pos:end="147:71"><ternary pos:start="147:14" pos:end="147:71"><condition pos:start="147:14" pos:end="147:53"><expr pos:start="147:14" pos:end="147:51"><name pos:start="147:14" pos:end="147:29"><name pos:start="147:14" pos:end="147:18">codec</name><operator pos:start="147:19" pos:end="147:19">.</operator><name pos:start="147:20" pos:end="147:29">codec_type</name></name> <operator pos:start="147:31" pos:end="147:32">==</operator> <name pos:start="147:34" pos:end="147:51">AVMEDIA_TYPE_VIDEO</name></expr> ?</condition><then pos:start="147:55" pos:end="147:61"> <expr pos:start="147:55" pos:end="147:61"><literal type="string" pos:start="147:55" pos:end="147:61">"video"</literal></expr> </then><else pos:start="147:63" pos:end="147:71">: <expr pos:start="147:65" pos:end="147:71"><literal type="string" pos:start="147:65" pos:end="147:71">"audio"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,

             <argument pos:start="149:14" pos:end="149:17"><expr pos:start="149:14" pos:end="149:17"><name pos:start="149:14" pos:end="149:17">port</name></expr></argument>, <argument pos:start="149:20" pos:end="149:31"><expr pos:start="149:20" pos:end="149:31"><name pos:start="149:20" pos:end="149:31">payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:49"><expr pos:start="151:5" pos:end="151:48"><call pos:start="151:5" pos:end="151:48"><name pos:start="151:5" pos:end="151:10">av_log</name><argument_list pos:start="151:11" pos:end="151:48">(<argument pos:start="151:12" pos:end="151:12"><expr pos:start="151:12" pos:end="151:12"><name pos:start="151:12" pos:end="151:12">s</name></expr></argument>, <argument pos:start="151:15" pos:end="151:28"><expr pos:start="151:15" pos:end="151:28"><name pos:start="151:15" pos:end="151:28">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="151:31" pos:end="151:42"><expr pos:start="151:31" pos:end="151:42"><literal type="string" pos:start="151:31" pos:end="151:42">"SDP:\n%s\n"</literal></expr></argument>, <argument pos:start="151:45" pos:end="151:47"><expr pos:start="151:45" pos:end="151:47"><name pos:start="151:45" pos:end="151:47">sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:72"><expr pos:start="155:5" pos:end="155:71"><call pos:start="155:5" pos:end="155:71"><name pos:start="155:5" pos:end="155:21">ffio_init_context</name><argument_list pos:start="155:22" pos:end="155:71">(<argument pos:start="155:23" pos:end="155:25"><expr pos:start="155:23" pos:end="155:25"><operator pos:start="155:23" pos:end="155:23">&amp;</operator><name pos:start="155:24" pos:end="155:25">pb</name></expr></argument>, <argument pos:start="155:28" pos:end="155:30"><expr pos:start="155:28" pos:end="155:30"><name pos:start="155:28" pos:end="155:30">sdp</name></expr></argument>, <argument pos:start="155:33" pos:end="155:43"><expr pos:start="155:33" pos:end="155:43"><call pos:start="155:33" pos:end="155:43"><name pos:start="155:33" pos:end="155:38">strlen</name><argument_list pos:start="155:39" pos:end="155:43">(<argument pos:start="155:40" pos:end="155:42"><expr pos:start="155:40" pos:end="155:42"><name pos:start="155:40" pos:end="155:42">sdp</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="155:46" pos:end="155:46"><expr pos:start="155:46" pos:end="155:46"><literal type="number" pos:start="155:46" pos:end="155:46">0</literal></expr></argument>, <argument pos:start="155:49" pos:end="155:52"><expr pos:start="155:49" pos:end="155:52"><name pos:start="155:49" pos:end="155:52">NULL</name></expr></argument>, <argument pos:start="155:55" pos:end="155:58"><expr pos:start="155:55" pos:end="155:58"><name pos:start="155:55" pos:end="155:58">NULL</name></expr></argument>, <argument pos:start="155:61" pos:end="155:64"><expr pos:start="155:61" pos:end="155:64"><name pos:start="155:61" pos:end="155:64">NULL</name></expr></argument>, <argument pos:start="155:67" pos:end="155:70"><expr pos:start="155:67" pos:end="155:70"><name pos:start="155:67" pos:end="155:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:16"><expr pos:start="157:5" pos:end="157:15"><name pos:start="157:5" pos:end="157:9"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:9">pb</name></name> <operator pos:start="157:11" pos:end="157:11">=</operator> <operator pos:start="157:13" pos:end="157:13">&amp;</operator><name pos:start="157:14" pos:end="157:15">pb</name></expr>;</expr_stmt>



    <comment type="block" pos:start="161:5" pos:end="161:48">/* sdp_read_header initializes this again */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:23"><expr pos:start="163:5" pos:end="163:22"><call pos:start="163:5" pos:end="163:22"><name pos:start="163:5" pos:end="163:20">ff_network_close</name><argument_list pos:start="163:21" pos:end="163:22">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:59"><expr pos:start="167:5" pos:end="167:58"><name pos:start="167:5" pos:end="167:23"><name pos:start="167:5" pos:end="167:6">rt</name><operator pos:start="167:7" pos:end="167:8">-&gt;</operator><name pos:start="167:9" pos:end="167:23">media_type_mask</name></name> <operator pos:start="167:25" pos:end="167:25">=</operator> <operator pos:start="167:27" pos:end="167:27">(</operator><literal type="number" pos:start="167:28" pos:end="167:28">1</literal> <operator pos:start="167:30" pos:end="167:31">&lt;&lt;</operator> <operator pos:start="167:33" pos:end="167:33">(</operator><name pos:start="167:34" pos:end="167:50">AVMEDIA_TYPE_DATA</name><operator pos:start="167:51" pos:end="167:51">+</operator><literal type="number" pos:start="167:52" pos:end="167:52">1</literal><operator pos:start="167:53" pos:end="167:53">)</operator><operator pos:start="167:54" pos:end="167:54">)</operator> <operator pos:start="167:56" pos:end="167:56">-</operator> <literal type="number" pos:start="167:58" pos:end="167:58">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:29"><expr pos:start="171:5" pos:end="171:28"><name pos:start="171:5" pos:end="171:7">ret</name> <operator pos:start="171:9" pos:end="171:9">=</operator> <call pos:start="171:11" pos:end="171:28"><name pos:start="171:11" pos:end="171:25">sdp_read_header</name><argument_list pos:start="171:26" pos:end="171:28">(<argument pos:start="171:27" pos:end="171:27"><expr pos:start="171:27" pos:end="171:27"><name pos:start="171:27" pos:end="171:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:17"><expr pos:start="173:5" pos:end="173:16"><name pos:start="173:5" pos:end="173:9"><name pos:start="173:5" pos:end="173:5">s</name><operator pos:start="173:6" pos:end="173:7">-&gt;</operator><name pos:start="173:8" pos:end="173:9">pb</name></name> <operator pos:start="173:11" pos:end="173:11">=</operator> <name pos:start="173:13" pos:end="173:16">NULL</name></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:15">return <expr pos:start="175:12" pos:end="175:14"><name pos:start="175:12" pos:end="175:14">ret</name></expr>;</return>



<label pos:start="179:1" pos:end="179:5"><name pos:start="179:1" pos:end="179:4">fail</name>:</label>

    <if_stmt pos:start="181:5" pos:end="183:24"><if pos:start="181:5" pos:end="183:24">if <condition pos:start="181:8" pos:end="181:11">(<expr pos:start="181:9" pos:end="181:10"><name pos:start="181:9" pos:end="181:10">in</name></expr>)</condition><block type="pseudo" pos:start="183:9" pos:end="183:24"><block_content pos:start="183:9" pos:end="183:24">

        <expr_stmt pos:start="183:9" pos:end="183:24"><expr pos:start="183:9" pos:end="183:23"><call pos:start="183:9" pos:end="183:23"><name pos:start="183:9" pos:end="183:19">ffurl_close</name><argument_list pos:start="183:20" pos:end="183:23">(<argument pos:start="183:21" pos:end="183:22"><expr pos:start="183:21" pos:end="183:22"><name pos:start="183:21" pos:end="183:22">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:23"><expr pos:start="185:5" pos:end="185:22"><call pos:start="185:5" pos:end="185:22"><name pos:start="185:5" pos:end="185:20">ff_network_close</name><argument_list pos:start="185:21" pos:end="185:22">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="187:5" pos:end="187:15">return <expr pos:start="187:12" pos:end="187:14"><name pos:start="187:12" pos:end="187:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
