<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26324.c" pos:tabs="8"><function pos:start="1:1" pos:end="437:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">qcow2_open</name><parameter_list pos:start="1:22" pos:end="1:54">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:53"><decl pos:start="1:45" pos:end="1:53"><type pos:start="1:45" pos:end="1:53"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:53">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="437:1">{<block_content pos:start="5:5" pos:end="435:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">i</name></decl>, <decl pos:start="7:17" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:19">ret</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">QCowHeader</name></type> <name pos:start="9:16" pos:end="9:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:20">ext_end</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:59"><expr pos:start="15:5" pos:end="15:58"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:58"><name pos:start="15:11" pos:end="15:20">bdrv_pread</name><argument_list pos:start="15:21" pos:end="15:58">(<argument pos:start="15:22" pos:end="15:29"><expr pos:start="15:22" pos:end="15:29"><name pos:start="15:22" pos:end="15:29"><name pos:start="15:22" pos:end="15:23">bs</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:29">file</name></name></expr></argument>, <argument pos:start="15:32" pos:end="15:32"><expr pos:start="15:32" pos:end="15:32"><literal type="number" pos:start="15:32" pos:end="15:32">0</literal></expr></argument>, <argument pos:start="15:35" pos:end="15:41"><expr pos:start="15:35" pos:end="15:41"><operator pos:start="15:35" pos:end="15:35">&amp;</operator><name pos:start="15:36" pos:end="15:41">header</name></expr></argument>, <argument pos:start="15:44" pos:end="15:57"><expr pos:start="15:44" pos:end="15:57"><sizeof pos:start="15:44" pos:end="15:57">sizeof<argument_list pos:start="15:50" pos:end="15:57">(<argument pos:start="15:51" pos:end="15:56"><expr pos:start="15:51" pos:end="15:56"><name pos:start="15:51" pos:end="15:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:16">(<expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">&lt;</operator> <literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr>)</condition> <block pos:start="17:18" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:18">

        <goto pos:start="19:9" pos:end="19:18">goto <name pos:start="19:14" pos:end="19:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:32"><expr pos:start="23:5" pos:end="23:31"><call pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:16">be32_to_cpus</name><argument_list pos:start="23:17" pos:end="23:31">(<argument pos:start="23:18" pos:end="23:30"><expr pos:start="23:18" pos:end="23:30"><operator pos:start="23:18" pos:end="23:18">&amp;</operator><name pos:start="23:19" pos:end="23:30"><name pos:start="23:19" pos:end="23:24">header</name><operator pos:start="23:25" pos:end="23:25">.</operator><name pos:start="23:26" pos:end="23:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><call pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:16">be32_to_cpus</name><argument_list pos:start="25:17" pos:end="25:33">(<argument pos:start="25:18" pos:end="25:32"><expr pos:start="25:18" pos:end="25:32"><operator pos:start="25:18" pos:end="25:18">&amp;</operator><name pos:start="25:19" pos:end="25:32"><name pos:start="25:19" pos:end="25:24">header</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:46"><expr pos:start="27:5" pos:end="27:45"><call pos:start="27:5" pos:end="27:45"><name pos:start="27:5" pos:end="27:16">be64_to_cpus</name><argument_list pos:start="27:17" pos:end="27:45">(<argument pos:start="27:18" pos:end="27:44"><expr pos:start="27:18" pos:end="27:44"><operator pos:start="27:18" pos:end="27:18">&amp;</operator><name pos:start="27:19" pos:end="27:44"><name pos:start="27:19" pos:end="27:24">header</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><call pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:16">be32_to_cpus</name><argument_list pos:start="29:17" pos:end="29:43">(<argument pos:start="29:18" pos:end="29:42"><expr pos:start="29:18" pos:end="29:42"><operator pos:start="29:18" pos:end="29:18">&amp;</operator><name pos:start="29:19" pos:end="29:42"><name pos:start="29:19" pos:end="29:24">header</name><operator pos:start="29:25" pos:end="29:25">.</operator><name pos:start="29:26" pos:end="29:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><call pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:16">be64_to_cpus</name><argument_list pos:start="31:17" pos:end="31:30">(<argument pos:start="31:18" pos:end="31:29"><expr pos:start="31:18" pos:end="31:29"><operator pos:start="31:18" pos:end="31:18">&amp;</operator><name pos:start="31:19" pos:end="31:29"><name pos:start="31:19" pos:end="31:24">header</name><operator pos:start="31:25" pos:end="31:25">.</operator><name pos:start="31:26" pos:end="31:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><call pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:16">be32_to_cpus</name><argument_list pos:start="33:17" pos:end="33:38">(<argument pos:start="33:18" pos:end="33:37"><expr pos:start="33:18" pos:end="33:37"><operator pos:start="33:18" pos:end="33:18">&amp;</operator><name pos:start="33:19" pos:end="33:37"><name pos:start="33:19" pos:end="33:24">header</name><operator pos:start="33:25" pos:end="33:25">.</operator><name pos:start="33:26" pos:end="33:37">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><call pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:16">be32_to_cpus</name><argument_list pos:start="35:17" pos:end="35:38">(<argument pos:start="35:18" pos:end="35:37"><expr pos:start="35:18" pos:end="35:37"><operator pos:start="35:18" pos:end="35:18">&amp;</operator><name pos:start="35:19" pos:end="35:37"><name pos:start="35:19" pos:end="35:24">header</name><operator pos:start="35:25" pos:end="35:25">.</operator><name pos:start="35:26" pos:end="35:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><call pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:16">be64_to_cpus</name><argument_list pos:start="37:17" pos:end="37:41">(<argument pos:start="37:18" pos:end="37:40"><expr pos:start="37:18" pos:end="37:40"><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:40"><name pos:start="37:19" pos:end="37:24">header</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><call pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:16">be32_to_cpus</name><argument_list pos:start="39:17" pos:end="39:33">(<argument pos:start="39:18" pos:end="39:32"><expr pos:start="39:18" pos:end="39:32"><operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:32"><name pos:start="39:19" pos:end="39:24">header</name><operator pos:start="39:25" pos:end="39:25">.</operator><name pos:start="39:26" pos:end="39:32">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:48"><expr pos:start="41:5" pos:end="41:47"><call pos:start="41:5" pos:end="41:47"><name pos:start="41:5" pos:end="41:16">be64_to_cpus</name><argument_list pos:start="41:17" pos:end="41:47">(<argument pos:start="41:18" pos:end="41:46"><expr pos:start="41:18" pos:end="41:46"><operator pos:start="41:18" pos:end="41:18">&amp;</operator><name pos:start="41:19" pos:end="41:46"><name pos:start="41:19" pos:end="41:24">header</name><operator pos:start="41:25" pos:end="41:25">.</operator><name pos:start="41:26" pos:end="41:46">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><call pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:16">be32_to_cpus</name><argument_list pos:start="43:17" pos:end="43:49">(<argument pos:start="43:18" pos:end="43:48"><expr pos:start="43:18" pos:end="43:48"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:48"><name pos:start="43:19" pos:end="43:24">header</name><operator pos:start="43:25" pos:end="43:25">.</operator><name pos:start="43:26" pos:end="43:48">refcount_table_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><call pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:16">be64_to_cpus</name><argument_list pos:start="45:17" pos:end="45:42">(<argument pos:start="45:18" pos:end="45:41"><expr pos:start="45:18" pos:end="45:41"><operator pos:start="45:18" pos:end="45:18">&amp;</operator><name pos:start="45:19" pos:end="45:41"><name pos:start="45:19" pos:end="45:24">header</name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:41">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:39"><expr pos:start="47:5" pos:end="47:38"><call pos:start="47:5" pos:end="47:38"><name pos:start="47:5" pos:end="47:16">be32_to_cpus</name><argument_list pos:start="47:17" pos:end="47:38">(<argument pos:start="47:18" pos:end="47:37"><expr pos:start="47:18" pos:end="47:37"><operator pos:start="47:18" pos:end="47:18">&amp;</operator><name pos:start="47:19" pos:end="47:37"><name pos:start="47:19" pos:end="47:24">header</name><operator pos:start="47:25" pos:end="47:25">.</operator><name pos:start="47:26" pos:end="47:37">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:35">(<expr pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:14">header</name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:20">magic</name></name> <operator pos:start="51:22" pos:end="51:23">!=</operator> <name pos:start="51:25" pos:end="51:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="51:37" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">-</operator><name pos:start="53:16" pos:end="53:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:49">(<expr pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:14">header</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:22">version</name></name> <operator pos:start="59:24" pos:end="59:24">&lt;</operator> <literal type="number" pos:start="59:26" pos:end="59:26">2</literal> <operator pos:start="59:28" pos:end="59:29">||</operator> <name pos:start="59:31" pos:end="59:44"><name pos:start="59:31" pos:end="59:36">header</name><operator pos:start="59:37" pos:end="59:37">.</operator><name pos:start="59:38" pos:end="59:44">version</name></name> <operator pos:start="59:46" pos:end="59:46">&gt;</operator> <literal type="number" pos:start="59:48" pos:end="59:48">3</literal></expr>)</condition> <block pos:start="59:51" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:18">

        <expr_stmt pos:start="61:9" pos:end="61:66"><expr pos:start="61:9" pos:end="61:65"><call pos:start="61:9" pos:end="61:65"><name pos:start="61:9" pos:end="61:26">report_unsupported</name><argument_list pos:start="61:27" pos:end="61:65">(<argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">bs</name></expr></argument>, <argument pos:start="61:32" pos:end="61:48"><expr pos:start="61:32" pos:end="61:48"><literal type="string" pos:start="61:32" pos:end="61:48">"QCOW version %d"</literal></expr></argument>, <argument pos:start="61:51" pos:end="61:64"><expr pos:start="61:51" pos:end="61:64"><name pos:start="61:51" pos:end="61:64"><name pos:start="61:51" pos:end="61:56">header</name><operator pos:start="61:57" pos:end="61:57">.</operator><name pos:start="61:58" pos:end="61:64">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:23"><expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">-</operator><name pos:start="63:16" pos:end="63:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:37"><expr pos:start="71:5" pos:end="71:36"><name pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:19">qcow_version</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <name pos:start="71:23" pos:end="71:36"><name pos:start="71:23" pos:end="71:28">header</name><operator pos:start="71:29" pos:end="71:29">.</operator><name pos:start="71:30" pos:end="71:36">version</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:44">/* Initialise version 3 header fields */</comment>

    <if_stmt pos:start="77:5" pos:end="101:5"><if pos:start="77:5" pos:end="89:5">if <condition pos:start="77:8" pos:end="77:28">(<expr pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:14">header</name><operator pos:start="77:15" pos:end="77:15">.</operator><name pos:start="77:16" pos:end="77:22">version</name></name> <operator pos:start="77:24" pos:end="77:25">==</operator> <literal type="number" pos:start="77:27" pos:end="77:27">2</literal></expr>)</condition> <block pos:start="77:30" pos:end="89:5">{<block_content pos:start="79:9" pos:end="87:45">

        <expr_stmt pos:start="79:9" pos:end="79:44"><expr pos:start="79:9" pos:end="79:43"><name pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:14">header</name><operator pos:start="79:15" pos:end="79:15">.</operator><name pos:start="79:16" pos:end="79:36">incompatible_features</name></name>    <operator pos:start="79:41" pos:end="79:41">=</operator> <literal type="number" pos:start="79:43" pos:end="79:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:44"><expr pos:start="81:9" pos:end="81:43"><name pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:14">header</name><operator pos:start="81:15" pos:end="81:15">.</operator><name pos:start="81:16" pos:end="81:34">compatible_features</name></name>      <operator pos:start="81:41" pos:end="81:41">=</operator> <literal type="number" pos:start="81:43" pos:end="81:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:44"><expr pos:start="83:9" pos:end="83:43"><name pos:start="83:9" pos:end="83:33"><name pos:start="83:9" pos:end="83:14">header</name><operator pos:start="83:15" pos:end="83:15">.</operator><name pos:start="83:16" pos:end="83:33">autoclear_features</name></name>       <operator pos:start="83:41" pos:end="83:41">=</operator> <literal type="number" pos:start="83:43" pos:end="83:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:44"><expr pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:14">header</name><operator pos:start="85:15" pos:end="85:15">.</operator><name pos:start="85:16" pos:end="85:29">refcount_order</name></name>           <operator pos:start="85:41" pos:end="85:41">=</operator> <literal type="number" pos:start="85:43" pos:end="85:43">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:45"><expr pos:start="87:9" pos:end="87:44"><name pos:start="87:9" pos:end="87:28"><name pos:start="87:9" pos:end="87:14">header</name><operator pos:start="87:15" pos:end="87:15">.</operator><name pos:start="87:16" pos:end="87:28">header_length</name></name>            <operator pos:start="87:41" pos:end="87:41">=</operator> <literal type="number" pos:start="87:43" pos:end="87:44">72</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="101:5">else <block pos:start="89:12" pos:end="101:5">{<block_content pos:start="91:9" pos:end="99:44">

        <expr_stmt pos:start="91:9" pos:end="91:52"><expr pos:start="91:9" pos:end="91:51"><call pos:start="91:9" pos:end="91:51"><name pos:start="91:9" pos:end="91:20">be64_to_cpus</name><argument_list pos:start="91:21" pos:end="91:51">(<argument pos:start="91:22" pos:end="91:50"><expr pos:start="91:22" pos:end="91:50"><operator pos:start="91:22" pos:end="91:22">&amp;</operator><name pos:start="91:23" pos:end="91:50"><name pos:start="91:23" pos:end="91:28">header</name><operator pos:start="91:29" pos:end="91:29">.</operator><name pos:start="91:30" pos:end="91:50">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:50"><expr pos:start="93:9" pos:end="93:49"><call pos:start="93:9" pos:end="93:49"><name pos:start="93:9" pos:end="93:20">be64_to_cpus</name><argument_list pos:start="93:21" pos:end="93:49">(<argument pos:start="93:22" pos:end="93:48"><expr pos:start="93:22" pos:end="93:48"><operator pos:start="93:22" pos:end="93:22">&amp;</operator><name pos:start="93:23" pos:end="93:48"><name pos:start="93:23" pos:end="93:28">header</name><operator pos:start="93:29" pos:end="93:29">.</operator><name pos:start="93:30" pos:end="93:48">compatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:49"><expr pos:start="95:9" pos:end="95:48"><call pos:start="95:9" pos:end="95:48"><name pos:start="95:9" pos:end="95:20">be64_to_cpus</name><argument_list pos:start="95:21" pos:end="95:48">(<argument pos:start="95:22" pos:end="95:47"><expr pos:start="95:22" pos:end="95:47"><operator pos:start="95:22" pos:end="95:22">&amp;</operator><name pos:start="95:23" pos:end="95:47"><name pos:start="95:23" pos:end="95:28">header</name><operator pos:start="95:29" pos:end="95:29">.</operator><name pos:start="95:30" pos:end="95:47">autoclear_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:45"><expr pos:start="97:9" pos:end="97:44"><call pos:start="97:9" pos:end="97:44"><name pos:start="97:9" pos:end="97:20">be32_to_cpus</name><argument_list pos:start="97:21" pos:end="97:44">(<argument pos:start="97:22" pos:end="97:43"><expr pos:start="97:22" pos:end="97:43"><operator pos:start="97:22" pos:end="97:22">&amp;</operator><name pos:start="97:23" pos:end="97:43"><name pos:start="97:23" pos:end="97:28">header</name><operator pos:start="97:29" pos:end="97:29">.</operator><name pos:start="97:30" pos:end="97:43">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:44"><expr pos:start="99:9" pos:end="99:43"><call pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:20">be32_to_cpus</name><argument_list pos:start="99:21" pos:end="99:43">(<argument pos:start="99:22" pos:end="99:42"><expr pos:start="99:22" pos:end="99:42"><operator pos:start="99:22" pos:end="99:22">&amp;</operator><name pos:start="99:23" pos:end="99:42"><name pos:start="99:23" pos:end="99:28">header</name><operator pos:start="99:29" pos:end="99:29">.</operator><name pos:start="99:30" pos:end="99:42">header_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="105:5" pos:end="121:5"><if pos:start="105:5" pos:end="121:5">if <condition pos:start="105:8" pos:end="105:46">(<expr pos:start="105:9" pos:end="105:45"><name pos:start="105:9" pos:end="105:28"><name pos:start="105:9" pos:end="105:14">header</name><operator pos:start="105:15" pos:end="105:15">.</operator><name pos:start="105:16" pos:end="105:28">header_length</name></name> <operator pos:start="105:30" pos:end="105:30">&gt;</operator> <sizeof pos:start="105:32" pos:end="105:45">sizeof<argument_list pos:start="105:38" pos:end="105:45">(<argument pos:start="105:39" pos:end="105:44"><expr pos:start="105:39" pos:end="105:44"><name pos:start="105:39" pos:end="105:44">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="105:48" pos:end="121:5">{<block_content pos:start="107:9" pos:end="119:9">

        <expr_stmt pos:start="107:9" pos:end="107:78"><expr pos:start="107:9" pos:end="107:77"><name pos:start="107:9" pos:end="107:37"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:37">unknown_header_fields_size</name></name> <operator pos:start="107:39" pos:end="107:39">=</operator> <name pos:start="107:41" pos:end="107:60"><name pos:start="107:41" pos:end="107:46">header</name><operator pos:start="107:47" pos:end="107:47">.</operator><name pos:start="107:48" pos:end="107:60">header_length</name></name> <operator pos:start="107:62" pos:end="107:62">-</operator> <sizeof pos:start="107:64" pos:end="107:77">sizeof<argument_list pos:start="107:70" pos:end="107:77">(<argument pos:start="107:71" pos:end="107:76"><expr pos:start="107:71" pos:end="107:76"><name pos:start="107:71" pos:end="107:76">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:75"><expr pos:start="109:9" pos:end="109:74"><name pos:start="109:9" pos:end="109:32"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:32">unknown_header_fields</name></name> <operator pos:start="109:34" pos:end="109:34">=</operator> <call pos:start="109:36" pos:end="109:74"><name pos:start="109:36" pos:end="109:43">g_malloc</name><argument_list pos:start="109:44" pos:end="109:74">(<argument pos:start="109:45" pos:end="109:73"><expr pos:start="109:45" pos:end="109:73"><name pos:start="109:45" pos:end="109:73"><name pos:start="109:45" pos:end="109:45">s</name><operator pos:start="109:46" pos:end="109:47">-&gt;</operator><name pos:start="109:48" pos:end="109:73">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="113:56"><expr pos:start="111:9" pos:end="113:55"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="113:55"><name pos:start="111:15" pos:end="111:24">bdrv_pread</name><argument_list pos:start="111:25" pos:end="113:55">(<argument pos:start="111:26" pos:end="111:33"><expr pos:start="111:26" pos:end="111:33"><name pos:start="111:26" pos:end="111:33"><name pos:start="111:26" pos:end="111:27">bs</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:33">file</name></name></expr></argument>, <argument pos:start="111:36" pos:end="111:49"><expr pos:start="111:36" pos:end="111:49"><sizeof pos:start="111:36" pos:end="111:49">sizeof<argument_list pos:start="111:42" pos:end="111:49">(<argument pos:start="111:43" pos:end="111:48"><expr pos:start="111:43" pos:end="111:48"><name pos:start="111:43" pos:end="111:48">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="111:52" pos:end="111:75"><expr pos:start="111:52" pos:end="111:75"><name pos:start="111:52" pos:end="111:75"><name pos:start="111:52" pos:end="111:52">s</name><operator pos:start="111:53" pos:end="111:54">-&gt;</operator><name pos:start="111:55" pos:end="111:75">unknown_header_fields</name></name></expr></argument>,

                         <argument pos:start="113:26" pos:end="113:54"><expr pos:start="113:26" pos:end="113:54"><name pos:start="113:26" pos:end="113:54"><name pos:start="113:26" pos:end="113:26">s</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:54">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">&lt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition> <block pos:start="115:22" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:22">

            <goto pos:start="117:13" pos:end="117:22">goto <name pos:start="117:18" pos:end="117:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="133:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:35">(<expr pos:start="125:9" pos:end="125:34"><name pos:start="125:9" pos:end="125:34"><name pos:start="125:9" pos:end="125:14">header</name><operator pos:start="125:15" pos:end="125:15">.</operator><name pos:start="125:16" pos:end="125:34">backing_file_offset</name></name></expr>)</condition> <block pos:start="125:37" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:45">

        <expr_stmt pos:start="127:9" pos:end="127:45"><expr pos:start="127:9" pos:end="127:44"><name pos:start="127:9" pos:end="127:15">ext_end</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <name pos:start="127:19" pos:end="127:44"><name pos:start="127:19" pos:end="127:24">header</name><operator pos:start="127:25" pos:end="127:25">.</operator><name pos:start="127:26" pos:end="127:44">backing_file_offset</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="129:7" pos:end="133:5">else <block pos:start="129:12" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:43">

        <expr_stmt pos:start="131:9" pos:end="131:43"><expr pos:start="131:9" pos:end="131:42"><name pos:start="131:9" pos:end="131:15">ext_end</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <literal type="number" pos:start="131:19" pos:end="131:19">1</literal> <operator pos:start="131:21" pos:end="131:22">&lt;&lt;</operator> <name pos:start="131:24" pos:end="131:42"><name pos:start="131:24" pos:end="131:29">header</name><operator pos:start="131:30" pos:end="131:30">.</operator><name pos:start="131:31" pos:end="131:42">cluster_bits</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:29">/* Handle feature bits */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:63"><expr pos:start="139:5" pos:end="139:62"><name pos:start="139:5" pos:end="139:28"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:28">incompatible_features</name></name>    <operator pos:start="139:33" pos:end="139:33">=</operator> <name pos:start="139:35" pos:end="139:62"><name pos:start="139:35" pos:end="139:40">header</name><operator pos:start="139:41" pos:end="139:41">.</operator><name pos:start="139:42" pos:end="139:62">incompatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:61"><expr pos:start="141:5" pos:end="141:60"><name pos:start="141:5" pos:end="141:26"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:26">compatible_features</name></name>      <operator pos:start="141:33" pos:end="141:33">=</operator> <name pos:start="141:35" pos:end="141:60"><name pos:start="141:35" pos:end="141:40">header</name><operator pos:start="141:41" pos:end="141:41">.</operator><name pos:start="141:42" pos:end="141:60">compatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:60"><expr pos:start="143:5" pos:end="143:59"><name pos:start="143:5" pos:end="143:25"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:25">autoclear_features</name></name>       <operator pos:start="143:33" pos:end="143:33">=</operator> <name pos:start="143:35" pos:end="143:59"><name pos:start="143:35" pos:end="143:40">header</name><operator pos:start="143:41" pos:end="143:41">.</operator><name pos:start="143:42" pos:end="143:59">autoclear_features</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="163:5"><if pos:start="147:5" pos:end="163:5">if <condition pos:start="147:8" pos:end="147:38">(<expr pos:start="147:9" pos:end="147:37"><name pos:start="147:9" pos:end="147:32"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:32">incompatible_features</name></name> <operator pos:start="147:34" pos:end="147:35">!=</operator> <literal type="number" pos:start="147:37" pos:end="147:37">0</literal></expr>)</condition> <block pos:start="147:40" pos:end="163:5">{<block_content pos:start="149:9" pos:end="161:18">

        <decl_stmt pos:start="149:9" pos:end="149:35"><decl pos:start="149:9" pos:end="149:34"><type pos:start="149:9" pos:end="149:14"><name pos:start="149:9" pos:end="149:12">void</name> <modifier pos:start="149:14" pos:end="149:14">*</modifier></type><name pos:start="149:15" pos:end="149:27">feature_table</name> <init pos:start="149:29" pos:end="149:34">= <expr pos:start="149:31" pos:end="149:34"><name pos:start="149:31" pos:end="149:34">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="151:9" pos:end="153:46"><expr pos:start="151:9" pos:end="153:45"><call pos:start="151:9" pos:end="153:45"><name pos:start="151:9" pos:end="151:29">qcow2_read_extensions</name><argument_list pos:start="151:30" pos:end="153:45">(<argument pos:start="151:31" pos:end="151:32"><expr pos:start="151:31" pos:end="151:32"><name pos:start="151:31" pos:end="151:32">bs</name></expr></argument>, <argument pos:start="151:35" pos:end="151:54"><expr pos:start="151:35" pos:end="151:54"><name pos:start="151:35" pos:end="151:54"><name pos:start="151:35" pos:end="151:40">header</name><operator pos:start="151:41" pos:end="151:41">.</operator><name pos:start="151:42" pos:end="151:54">header_length</name></name></expr></argument>, <argument pos:start="151:57" pos:end="151:63"><expr pos:start="151:57" pos:end="151:63"><name pos:start="151:57" pos:end="151:63">ext_end</name></expr></argument>,

                              <argument pos:start="153:31" pos:end="153:44"><expr pos:start="153:31" pos:end="153:44"><operator pos:start="153:31" pos:end="153:31">&amp;</operator><name pos:start="153:32" pos:end="153:44">feature_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="157:61"><expr pos:start="155:9" pos:end="157:60"><call pos:start="155:9" pos:end="157:60"><name pos:start="155:9" pos:end="155:34">report_unsupported_feature</name><argument_list pos:start="155:35" pos:end="157:60">(<argument pos:start="155:36" pos:end="155:37"><expr pos:start="155:36" pos:end="155:37"><name pos:start="155:36" pos:end="155:37">bs</name></expr></argument>, <argument pos:start="155:40" pos:end="155:52"><expr pos:start="155:40" pos:end="155:52"><name pos:start="155:40" pos:end="155:52">feature_table</name></expr></argument>,

                                   <argument pos:start="157:36" pos:end="157:59"><expr pos:start="157:36" pos:end="157:59"><name pos:start="157:36" pos:end="157:59"><name pos:start="157:36" pos:end="157:36">s</name><operator pos:start="157:37" pos:end="157:38">-&gt;</operator><name pos:start="157:39" pos:end="157:59">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:23"><expr pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <operator pos:start="159:15" pos:end="159:15">-</operator><name pos:start="159:16" pos:end="159:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:18">goto <name pos:start="161:14" pos:end="161:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:49">/* Check support for various header values */</comment>

    <if_stmt pos:start="169:5" pos:end="179:5"><if pos:start="169:5" pos:end="179:5">if <condition pos:start="169:8" pos:end="169:35">(<expr pos:start="169:9" pos:end="169:34"><name pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:14">header</name><operator pos:start="169:15" pos:end="169:15">.</operator><name pos:start="169:16" pos:end="169:29">refcount_order</name></name> <operator pos:start="169:31" pos:end="169:32">!=</operator> <literal type="number" pos:start="169:34" pos:end="169:34">4</literal></expr>)</condition> <block pos:start="169:37" pos:end="179:5">{<block_content pos:start="171:9" pos:end="177:18">

        <expr_stmt pos:start="171:9" pos:end="173:55"><expr pos:start="171:9" pos:end="173:54"><call pos:start="171:9" pos:end="173:54"><name pos:start="171:9" pos:end="171:26">report_unsupported</name><argument_list pos:start="171:27" pos:end="173:54">(<argument pos:start="171:28" pos:end="171:29"><expr pos:start="171:28" pos:end="171:29"><name pos:start="171:28" pos:end="171:29">bs</name></expr></argument>, <argument pos:start="171:32" pos:end="171:56"><expr pos:start="171:32" pos:end="171:56"><literal type="string" pos:start="171:32" pos:end="171:56">"%d bit reference counts"</literal></expr></argument>,

                           <argument pos:start="173:28" pos:end="173:53"><expr pos:start="173:28" pos:end="173:53"><literal type="number" pos:start="173:28" pos:end="173:28">1</literal> <operator pos:start="173:30" pos:end="173:31">&lt;&lt;</operator> <name pos:start="173:33" pos:end="173:53"><name pos:start="173:33" pos:end="173:38">header</name><operator pos:start="173:39" pos:end="173:39">.</operator><name pos:start="173:40" pos:end="173:53">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:23"><expr pos:start="175:9" pos:end="175:22"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <operator pos:start="175:15" pos:end="175:15">-</operator><name pos:start="175:16" pos:end="175:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="177:9" pos:end="177:18">goto <name pos:start="177:14" pos:end="177:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="183:5" pos:end="191:5"><if pos:start="183:5" pos:end="191:5">if <condition pos:start="183:8" pos:end="185:47">(<expr pos:start="183:9" pos:end="185:46"><name pos:start="183:9" pos:end="183:27"><name pos:start="183:9" pos:end="183:14">header</name><operator pos:start="183:15" pos:end="183:15">.</operator><name pos:start="183:16" pos:end="183:27">cluster_bits</name></name> <operator pos:start="183:29" pos:end="183:29">&lt;</operator> <name pos:start="183:31" pos:end="183:46">MIN_CLUSTER_BITS</name> <operator pos:start="183:48" pos:end="183:49">||</operator>

        <name pos:start="185:9" pos:end="185:27"><name pos:start="185:9" pos:end="185:14">header</name><operator pos:start="185:15" pos:end="185:15">.</operator><name pos:start="185:16" pos:end="185:27">cluster_bits</name></name> <operator pos:start="185:29" pos:end="185:29">&gt;</operator> <name pos:start="185:31" pos:end="185:46">MAX_CLUSTER_BITS</name></expr>)</condition> <block pos:start="185:49" pos:end="191:5">{<block_content pos:start="187:9" pos:end="189:18">

        <expr_stmt pos:start="187:9" pos:end="187:22"><expr pos:start="187:9" pos:end="187:21"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <operator pos:start="187:15" pos:end="187:15">-</operator><name pos:start="187:16" pos:end="187:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="189:9" pos:end="189:18">goto <name pos:start="189:14" pos:end="189:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="193:5" pos:end="199:5"><if pos:start="193:5" pos:end="199:5">if <condition pos:start="193:8" pos:end="193:45">(<expr pos:start="193:9" pos:end="193:44"><name pos:start="193:9" pos:end="193:27"><name pos:start="193:9" pos:end="193:14">header</name><operator pos:start="193:15" pos:end="193:15">.</operator><name pos:start="193:16" pos:end="193:27">crypt_method</name></name> <operator pos:start="193:29" pos:end="193:29">&gt;</operator> <name pos:start="193:31" pos:end="193:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="193:47" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:18">

        <expr_stmt pos:start="195:9" pos:end="195:22"><expr pos:start="195:9" pos:end="195:21"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <operator pos:start="195:15" pos:end="195:15">-</operator><name pos:start="195:16" pos:end="195:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="197:9" pos:end="197:18">goto <name pos:start="197:14" pos:end="197:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:49"><expr pos:start="201:5" pos:end="201:48"><name pos:start="201:5" pos:end="201:26"><name pos:start="201:5" pos:end="201:5">s</name><operator pos:start="201:6" pos:end="201:7">-&gt;</operator><name pos:start="201:8" pos:end="201:26">crypt_method_header</name></name> <operator pos:start="201:28" pos:end="201:28">=</operator> <name pos:start="201:30" pos:end="201:48"><name pos:start="201:30" pos:end="201:35">header</name><operator pos:start="201:36" pos:end="201:36">.</operator><name pos:start="201:37" pos:end="201:48">crypt_method</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="207:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:31">(<expr pos:start="203:9" pos:end="203:30"><name pos:start="203:9" pos:end="203:30"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="203:33" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:26">

        <expr_stmt pos:start="205:9" pos:end="205:26"><expr pos:start="205:9" pos:end="205:25"><name pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:10">bs</name><operator pos:start="205:11" pos:end="205:12">-&gt;</operator><name pos:start="205:13" pos:end="205:21">encrypted</name></name> <operator pos:start="205:23" pos:end="205:23">=</operator> <literal type="number" pos:start="205:25" pos:end="205:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:42"><expr pos:start="209:5" pos:end="209:41"><name pos:start="209:5" pos:end="209:19"><name pos:start="209:5" pos:end="209:5">s</name><operator pos:start="209:6" pos:end="209:7">-&gt;</operator><name pos:start="209:8" pos:end="209:19">cluster_bits</name></name> <operator pos:start="209:21" pos:end="209:21">=</operator> <name pos:start="209:23" pos:end="209:41"><name pos:start="209:23" pos:end="209:28">header</name><operator pos:start="209:29" pos:end="209:29">.</operator><name pos:start="209:30" pos:end="209:41">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:43"><expr pos:start="211:5" pos:end="211:42"><name pos:start="211:5" pos:end="211:19"><name pos:start="211:5" pos:end="211:5">s</name><operator pos:start="211:6" pos:end="211:7">-&gt;</operator><name pos:start="211:8" pos:end="211:19">cluster_size</name></name> <operator pos:start="211:21" pos:end="211:21">=</operator> <literal type="number" pos:start="211:23" pos:end="211:23">1</literal> <operator pos:start="211:25" pos:end="211:26">&lt;&lt;</operator> <name pos:start="211:28" pos:end="211:42"><name pos:start="211:28" pos:end="211:28">s</name><operator pos:start="211:29" pos:end="211:30">-&gt;</operator><name pos:start="211:31" pos:end="211:42">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:52"><expr pos:start="213:5" pos:end="213:51"><name pos:start="213:5" pos:end="213:22"><name pos:start="213:5" pos:end="213:5">s</name><operator pos:start="213:6" pos:end="213:7">-&gt;</operator><name pos:start="213:8" pos:end="213:22">cluster_sectors</name></name> <operator pos:start="213:24" pos:end="213:24">=</operator> <literal type="number" pos:start="213:26" pos:end="213:26">1</literal> <operator pos:start="213:28" pos:end="213:29">&lt;&lt;</operator> <operator pos:start="213:31" pos:end="213:31">(</operator><name pos:start="213:32" pos:end="213:46"><name pos:start="213:32" pos:end="213:32">s</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:46">cluster_bits</name></name> <operator pos:start="213:48" pos:end="213:48">-</operator> <literal type="number" pos:start="213:50" pos:end="213:50">9</literal><operator pos:start="213:51" pos:end="213:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:37"><expr pos:start="215:5" pos:end="215:36"><name pos:start="215:5" pos:end="215:14"><name pos:start="215:5" pos:end="215:5">s</name><operator pos:start="215:6" pos:end="215:7">-&gt;</operator><name pos:start="215:8" pos:end="215:14">l2_bits</name></name> <operator pos:start="215:16" pos:end="215:16">=</operator> <name pos:start="215:18" pos:end="215:32"><name pos:start="215:18" pos:end="215:18">s</name><operator pos:start="215:19" pos:end="215:20">-&gt;</operator><name pos:start="215:21" pos:end="215:32">cluster_bits</name></name> <operator pos:start="215:34" pos:end="215:34">-</operator> <literal type="number" pos:start="215:36" pos:end="215:36">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="215:39" pos:end="215:68">/* L2 is always one cluster */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:33"><expr pos:start="217:5" pos:end="217:32"><name pos:start="217:5" pos:end="217:14"><name pos:start="217:5" pos:end="217:5">s</name><operator pos:start="217:6" pos:end="217:7">-&gt;</operator><name pos:start="217:8" pos:end="217:14">l2_size</name></name> <operator pos:start="217:16" pos:end="217:16">=</operator> <literal type="number" pos:start="217:18" pos:end="217:18">1</literal> <operator pos:start="217:20" pos:end="217:21">&lt;&lt;</operator> <name pos:start="217:23" pos:end="217:32"><name pos:start="217:23" pos:end="217:23">s</name><operator pos:start="217:24" pos:end="217:25">-&gt;</operator><name pos:start="217:26" pos:end="217:32">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:42"><expr pos:start="219:5" pos:end="219:41"><name pos:start="219:5" pos:end="219:21"><name pos:start="219:5" pos:end="219:6">bs</name><operator pos:start="219:7" pos:end="219:8">-&gt;</operator><name pos:start="219:9" pos:end="219:21">total_sectors</name></name> <operator pos:start="219:23" pos:end="219:23">=</operator> <name pos:start="219:25" pos:end="219:35"><name pos:start="219:25" pos:end="219:30">header</name><operator pos:start="219:31" pos:end="219:31">.</operator><name pos:start="219:32" pos:end="219:35">size</name></name> <operator pos:start="219:37" pos:end="219:37">/</operator> <literal type="number" pos:start="219:39" pos:end="219:41">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:50"><expr pos:start="221:5" pos:end="221:49"><name pos:start="221:5" pos:end="221:18"><name pos:start="221:5" pos:end="221:5">s</name><operator pos:start="221:6" pos:end="221:7">-&gt;</operator><name pos:start="221:8" pos:end="221:18">csize_shift</name></name> <operator pos:start="221:20" pos:end="221:20">=</operator> <operator pos:start="221:22" pos:end="221:22">(</operator><literal type="number" pos:start="221:23" pos:end="221:26">62</literal> <operator pos:start="221:26" pos:end="221:26">-</operator> <operator pos:start="221:28" pos:end="221:28">(</operator><name pos:start="221:29" pos:end="221:43"><name pos:start="221:29" pos:end="221:29">s</name><operator pos:start="221:30" pos:end="221:31">-&gt;</operator><name pos:start="221:32" pos:end="221:43">cluster_bits</name></name> <operator pos:start="221:45" pos:end="221:45">-</operator> <literal type="number" pos:start="221:47" pos:end="221:47">8</literal><operator pos:start="221:48" pos:end="221:48">)</operator><operator pos:start="221:49" pos:end="221:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:53"><expr pos:start="223:5" pos:end="223:52"><name pos:start="223:5" pos:end="223:17"><name pos:start="223:5" pos:end="223:5">s</name><operator pos:start="223:6" pos:end="223:7">-&gt;</operator><name pos:start="223:8" pos:end="223:17">csize_mask</name></name> <operator pos:start="223:19" pos:end="223:19">=</operator> <operator pos:start="223:21" pos:end="223:21">(</operator><literal type="number" pos:start="223:22" pos:end="223:22">1</literal> <operator pos:start="223:24" pos:end="223:25">&lt;&lt;</operator> <operator pos:start="223:27" pos:end="223:27">(</operator><name pos:start="223:28" pos:end="223:42"><name pos:start="223:28" pos:end="223:28">s</name><operator pos:start="223:29" pos:end="223:30">-&gt;</operator><name pos:start="223:31" pos:end="223:42">cluster_bits</name></name> <operator pos:start="223:44" pos:end="223:44">-</operator> <literal type="number" pos:start="223:46" pos:end="223:46">8</literal><operator pos:start="223:47" pos:end="223:47">)</operator><operator pos:start="223:48" pos:end="223:48">)</operator> <operator pos:start="223:50" pos:end="223:50">-</operator> <literal type="number" pos:start="223:52" pos:end="223:52">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:57"><expr pos:start="225:5" pos:end="225:56"><name pos:start="225:5" pos:end="225:26"><name pos:start="225:5" pos:end="225:5">s</name><operator pos:start="225:6" pos:end="225:7">-&gt;</operator><name pos:start="225:8" pos:end="225:26">cluster_offset_mask</name></name> <operator pos:start="225:28" pos:end="225:28">=</operator> <operator pos:start="225:30" pos:end="225:30">(</operator><literal type="number" pos:start="225:31" pos:end="225:33">1LL</literal> <operator pos:start="225:35" pos:end="225:36">&lt;&lt;</operator> <name pos:start="225:38" pos:end="225:51"><name pos:start="225:38" pos:end="225:38">s</name><operator pos:start="225:39" pos:end="225:40">-&gt;</operator><name pos:start="225:41" pos:end="225:51">csize_shift</name></name><operator pos:start="225:52" pos:end="225:52">)</operator> <operator pos:start="225:54" pos:end="225:54">-</operator> <literal type="number" pos:start="225:56" pos:end="225:56">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:60"><expr pos:start="227:5" pos:end="227:59"><name pos:start="227:5" pos:end="227:28"><name pos:start="227:5" pos:end="227:5">s</name><operator pos:start="227:6" pos:end="227:7">-&gt;</operator><name pos:start="227:8" pos:end="227:28">refcount_table_offset</name></name> <operator pos:start="227:30" pos:end="227:30">=</operator> <name pos:start="227:32" pos:end="227:59"><name pos:start="227:32" pos:end="227:37">header</name><operator pos:start="227:38" pos:end="227:38">.</operator><name pos:start="227:39" pos:end="227:59">refcount_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="231:64"><expr pos:start="229:5" pos:end="231:63"><name pos:start="229:5" pos:end="229:26"><name pos:start="229:5" pos:end="229:5">s</name><operator pos:start="229:6" pos:end="229:7">-&gt;</operator><name pos:start="229:8" pos:end="229:26">refcount_table_size</name></name> <operator pos:start="229:28" pos:end="229:28">=</operator>

        <name pos:start="231:9" pos:end="231:38"><name pos:start="231:9" pos:end="231:14">header</name><operator pos:start="231:15" pos:end="231:15">.</operator><name pos:start="231:16" pos:end="231:38">refcount_table_clusters</name></name> <operator pos:start="231:40" pos:end="231:41">&lt;&lt;</operator> <operator pos:start="231:43" pos:end="231:43">(</operator><name pos:start="231:44" pos:end="231:58"><name pos:start="231:44" pos:end="231:44">s</name><operator pos:start="231:45" pos:end="231:46">-&gt;</operator><name pos:start="231:47" pos:end="231:58">cluster_bits</name></name> <operator pos:start="231:60" pos:end="231:60">-</operator> <literal type="number" pos:start="231:62" pos:end="231:62">3</literal><operator pos:start="231:63" pos:end="231:63">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:50"><expr pos:start="235:5" pos:end="235:49"><name pos:start="235:5" pos:end="235:23"><name pos:start="235:5" pos:end="235:5">s</name><operator pos:start="235:6" pos:end="235:7">-&gt;</operator><name pos:start="235:8" pos:end="235:23">snapshots_offset</name></name> <operator pos:start="235:25" pos:end="235:25">=</operator> <name pos:start="235:27" pos:end="235:49"><name pos:start="235:27" pos:end="235:32">header</name><operator pos:start="235:33" pos:end="235:33">.</operator><name pos:start="235:34" pos:end="235:49">snapshots_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:42"><expr pos:start="237:5" pos:end="237:41"><name pos:start="237:5" pos:end="237:19"><name pos:start="237:5" pos:end="237:5">s</name><operator pos:start="237:6" pos:end="237:7">-&gt;</operator><name pos:start="237:8" pos:end="237:19">nb_snapshots</name></name> <operator pos:start="237:21" pos:end="237:21">=</operator> <name pos:start="237:23" pos:end="237:41"><name pos:start="237:23" pos:end="237:28">header</name><operator pos:start="237:29" pos:end="237:29">.</operator><name pos:start="237:30" pos:end="237:41">nb_snapshots</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:32">/* read the level 1 table */</comment>

    <expr_stmt pos:start="243:5" pos:end="243:32"><expr pos:start="243:5" pos:end="243:31"><name pos:start="243:5" pos:end="243:14"><name pos:start="243:5" pos:end="243:5">s</name><operator pos:start="243:6" pos:end="243:7">-&gt;</operator><name pos:start="243:8" pos:end="243:14">l1_size</name></name> <operator pos:start="243:16" pos:end="243:16">=</operator> <name pos:start="243:18" pos:end="243:31"><name pos:start="243:18" pos:end="243:23">header</name><operator pos:start="243:24" pos:end="243:24">.</operator><name pos:start="243:25" pos:end="243:31">l1_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:54"><expr pos:start="245:5" pos:end="245:53"><name pos:start="245:5" pos:end="245:24"><name pos:start="245:5" pos:end="245:5">s</name><operator pos:start="245:6" pos:end="245:7">-&gt;</operator><name pos:start="245:8" pos:end="245:24">l1_vm_state_index</name></name> <operator pos:start="245:26" pos:end="245:26">=</operator> <call pos:start="245:28" pos:end="245:53"><name pos:start="245:28" pos:end="245:37">size_to_l1</name><argument_list pos:start="245:38" pos:end="245:53">(<argument pos:start="245:39" pos:end="245:39"><expr pos:start="245:39" pos:end="245:39"><name pos:start="245:39" pos:end="245:39">s</name></expr></argument>, <argument pos:start="245:42" pos:end="245:52"><expr pos:start="245:42" pos:end="245:52"><name pos:start="245:42" pos:end="245:52"><name pos:start="245:42" pos:end="245:47">header</name><operator pos:start="245:48" pos:end="245:48">.</operator><name pos:start="245:49" pos:end="245:52">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="247:5" pos:end="249:27">/* the L1 table must contain at least enough entries to put

       header.size bytes */</comment>

    <if_stmt pos:start="251:5" pos:end="257:5"><if pos:start="251:5" pos:end="257:5">if <condition pos:start="251:8" pos:end="251:42">(<expr pos:start="251:9" pos:end="251:41"><name pos:start="251:9" pos:end="251:18"><name pos:start="251:9" pos:end="251:9">s</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:18">l1_size</name></name> <operator pos:start="251:20" pos:end="251:20">&lt;</operator> <name pos:start="251:22" pos:end="251:41"><name pos:start="251:22" pos:end="251:22">s</name><operator pos:start="251:23" pos:end="251:24">-&gt;</operator><name pos:start="251:25" pos:end="251:41">l1_vm_state_index</name></name></expr>)</condition> <block pos:start="251:44" pos:end="257:5">{<block_content pos:start="253:9" pos:end="255:18">

        <expr_stmt pos:start="253:9" pos:end="253:22"><expr pos:start="253:9" pos:end="253:21"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <operator pos:start="253:15" pos:end="253:15">-</operator><name pos:start="253:16" pos:end="253:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="255:9" pos:end="255:18">goto <name pos:start="255:14" pos:end="255:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:48"><expr pos:start="259:5" pos:end="259:47"><name pos:start="259:5" pos:end="259:22"><name pos:start="259:5" pos:end="259:5">s</name><operator pos:start="259:6" pos:end="259:7">-&gt;</operator><name pos:start="259:8" pos:end="259:22">l1_table_offset</name></name> <operator pos:start="259:24" pos:end="259:24">=</operator> <name pos:start="259:26" pos:end="259:47"><name pos:start="259:26" pos:end="259:31">header</name><operator pos:start="259:32" pos:end="259:32">.</operator><name pos:start="259:33" pos:end="259:47">l1_table_offset</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="261:5" pos:end="283:5"><if pos:start="261:5" pos:end="283:5">if <condition pos:start="261:8" pos:end="261:23">(<expr pos:start="261:9" pos:end="261:22"><name pos:start="261:9" pos:end="261:18"><name pos:start="261:9" pos:end="261:9">s</name><operator pos:start="261:10" pos:end="261:11">-&gt;</operator><name pos:start="261:12" pos:end="261:18">l1_size</name></name> <operator pos:start="261:20" pos:end="261:20">&gt;</operator> <literal type="number" pos:start="261:22" pos:end="261:22">0</literal></expr>)</condition> <block pos:start="261:25" pos:end="283:5">{<block_content pos:start="263:9" pos:end="281:9">

        <expr_stmt pos:start="263:9" pos:end="265:62"><expr pos:start="263:9" pos:end="265:61"><name pos:start="263:9" pos:end="263:19"><name pos:start="263:9" pos:end="263:9">s</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:19">l1_table</name></name> <operator pos:start="263:21" pos:end="263:21">=</operator> <call pos:start="263:23" pos:end="265:61"><name pos:start="263:23" pos:end="263:31">g_malloc0</name><argument_list pos:start="263:32" pos:end="265:61">(

            <argument pos:start="265:13" pos:end="265:60"><expr pos:start="265:13" pos:end="265:60"><call pos:start="265:13" pos:end="265:60"><name pos:start="265:13" pos:end="265:24">align_offset</name><argument_list pos:start="265:25" pos:end="265:60">(<argument pos:start="265:26" pos:end="265:54"><expr pos:start="265:26" pos:end="265:54"><name pos:start="265:26" pos:end="265:35"><name pos:start="265:26" pos:end="265:26">s</name><operator pos:start="265:27" pos:end="265:28">-&gt;</operator><name pos:start="265:29" pos:end="265:35">l1_size</name></name> <operator pos:start="265:37" pos:end="265:37">*</operator> <sizeof pos:start="265:39" pos:end="265:54">sizeof<argument_list pos:start="265:45" pos:end="265:54">(<argument pos:start="265:46" pos:end="265:53"><expr pos:start="265:46" pos:end="265:53"><name pos:start="265:46" pos:end="265:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="265:57" pos:end="265:59"><expr pos:start="265:57" pos:end="265:59"><literal type="number" pos:start="265:57" pos:end="265:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="269:56"><expr pos:start="267:9" pos:end="269:55"><name pos:start="267:9" pos:end="267:11">ret</name> <operator pos:start="267:13" pos:end="267:13">=</operator> <call pos:start="267:15" pos:end="269:55"><name pos:start="267:15" pos:end="267:24">bdrv_pread</name><argument_list pos:start="267:25" pos:end="269:55">(<argument pos:start="267:26" pos:end="267:33"><expr pos:start="267:26" pos:end="267:33"><name pos:start="267:26" pos:end="267:33"><name pos:start="267:26" pos:end="267:27">bs</name><operator pos:start="267:28" pos:end="267:29">-&gt;</operator><name pos:start="267:30" pos:end="267:33">file</name></name></expr></argument>, <argument pos:start="267:36" pos:end="267:53"><expr pos:start="267:36" pos:end="267:53"><name pos:start="267:36" pos:end="267:53"><name pos:start="267:36" pos:end="267:36">s</name><operator pos:start="267:37" pos:end="267:38">-&gt;</operator><name pos:start="267:39" pos:end="267:53">l1_table_offset</name></name></expr></argument>, <argument pos:start="267:56" pos:end="267:66"><expr pos:start="267:56" pos:end="267:66"><name pos:start="267:56" pos:end="267:66"><name pos:start="267:56" pos:end="267:56">s</name><operator pos:start="267:57" pos:end="267:58">-&gt;</operator><name pos:start="267:59" pos:end="267:66">l1_table</name></name></expr></argument>,

                         <argument pos:start="269:26" pos:end="269:54"><expr pos:start="269:26" pos:end="269:54"><name pos:start="269:26" pos:end="269:35"><name pos:start="269:26" pos:end="269:26">s</name><operator pos:start="269:27" pos:end="269:28">-&gt;</operator><name pos:start="269:29" pos:end="269:35">l1_size</name></name> <operator pos:start="269:37" pos:end="269:37">*</operator> <sizeof pos:start="269:39" pos:end="269:54">sizeof<argument_list pos:start="269:45" pos:end="269:54">(<argument pos:start="269:46" pos:end="269:53"><expr pos:start="269:46" pos:end="269:53"><name pos:start="269:46" pos:end="269:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="271:9" pos:end="275:9"><if pos:start="271:9" pos:end="275:9">if <condition pos:start="271:12" pos:end="271:20">(<expr pos:start="271:13" pos:end="271:19"><name pos:start="271:13" pos:end="271:15">ret</name> <operator pos:start="271:17" pos:end="271:17">&lt;</operator> <literal type="number" pos:start="271:19" pos:end="271:19">0</literal></expr>)</condition> <block pos:start="271:22" pos:end="275:9">{<block_content pos:start="273:13" pos:end="273:22">

            <goto pos:start="273:13" pos:end="273:22">goto <name pos:start="273:18" pos:end="273:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <for pos:start="277:9" pos:end="281:9">for<control pos:start="277:12" pos:end="277:38">(<init pos:start="277:13" pos:end="277:18"><expr pos:start="277:13" pos:end="277:17"><name pos:start="277:13" pos:end="277:13">i</name> <operator pos:start="277:15" pos:end="277:15">=</operator> <literal type="number" pos:start="277:17" pos:end="277:17">0</literal></expr>;</init><condition pos:start="277:19" pos:end="277:33"><expr pos:start="277:19" pos:end="277:32"><name pos:start="277:19" pos:end="277:19">i</name> <operator pos:start="277:21" pos:end="277:21">&lt;</operator> <name pos:start="277:23" pos:end="277:32"><name pos:start="277:23" pos:end="277:23">s</name><operator pos:start="277:24" pos:end="277:25">-&gt;</operator><name pos:start="277:26" pos:end="277:32">l1_size</name></name></expr>;</condition> <incr pos:start="277:35" pos:end="277:37"><expr pos:start="277:35" pos:end="277:37"><name pos:start="277:35" pos:end="277:35">i</name><operator pos:start="277:36" pos:end="277:37">++</operator></expr></incr>)</control> <block pos:start="277:40" pos:end="281:9">{<block_content pos:start="279:13" pos:end="279:42">

            <expr_stmt pos:start="279:13" pos:end="279:42"><expr pos:start="279:13" pos:end="279:41"><call pos:start="279:13" pos:end="279:41"><name pos:start="279:13" pos:end="279:24">be64_to_cpus</name><argument_list pos:start="279:25" pos:end="279:41">(<argument pos:start="279:26" pos:end="279:40"><expr pos:start="279:26" pos:end="279:40"><operator pos:start="279:26" pos:end="279:26">&amp;</operator><name pos:start="279:27" pos:end="279:40"><name pos:start="279:27" pos:end="279:27">s</name><operator pos:start="279:28" pos:end="279:29">-&gt;</operator><name pos:start="279:30" pos:end="279:37">l1_table</name><index pos:start="279:38" pos:end="279:40">[<expr pos:start="279:39" pos:end="279:39"><name pos:start="279:39" pos:end="279:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="287:5" pos:end="287:45">/* alloc L2 table/refcount block cache */</comment>

    <expr_stmt pos:start="289:5" pos:end="289:62"><expr pos:start="289:5" pos:end="289:61"><name pos:start="289:5" pos:end="289:21"><name pos:start="289:5" pos:end="289:5">s</name><operator pos:start="289:6" pos:end="289:7">-&gt;</operator><name pos:start="289:8" pos:end="289:21">l2_table_cache</name></name> <operator pos:start="289:23" pos:end="289:23">=</operator> <call pos:start="289:25" pos:end="289:61"><name pos:start="289:25" pos:end="289:42">qcow2_cache_create</name><argument_list pos:start="289:43" pos:end="289:61">(<argument pos:start="289:44" pos:end="289:45"><expr pos:start="289:44" pos:end="289:45"><name pos:start="289:44" pos:end="289:45">bs</name></expr></argument>, <argument pos:start="289:48" pos:end="289:60"><expr pos:start="289:48" pos:end="289:60"><name pos:start="289:48" pos:end="289:60">L2_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:74"><expr pos:start="291:5" pos:end="291:73"><name pos:start="291:5" pos:end="291:27"><name pos:start="291:5" pos:end="291:5">s</name><operator pos:start="291:6" pos:end="291:7">-&gt;</operator><name pos:start="291:8" pos:end="291:27">refcount_block_cache</name></name> <operator pos:start="291:29" pos:end="291:29">=</operator> <call pos:start="291:31" pos:end="291:73"><name pos:start="291:31" pos:end="291:48">qcow2_cache_create</name><argument_list pos:start="291:49" pos:end="291:73">(<argument pos:start="291:50" pos:end="291:51"><expr pos:start="291:50" pos:end="291:51"><name pos:start="291:50" pos:end="291:51">bs</name></expr></argument>, <argument pos:start="291:54" pos:end="291:72"><expr pos:start="291:54" pos:end="291:72"><name pos:start="291:54" pos:end="291:72">REFCOUNT_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="295:5" pos:end="295:49"><expr pos:start="295:5" pos:end="295:48"><name pos:start="295:5" pos:end="295:20"><name pos:start="295:5" pos:end="295:5">s</name><operator pos:start="295:6" pos:end="295:7">-&gt;</operator><name pos:start="295:8" pos:end="295:20">cluster_cache</name></name> <operator pos:start="295:22" pos:end="295:22">=</operator> <call pos:start="295:24" pos:end="295:48"><name pos:start="295:24" pos:end="295:31">g_malloc</name><argument_list pos:start="295:32" pos:end="295:48">(<argument pos:start="295:33" pos:end="295:47"><expr pos:start="295:33" pos:end="295:47"><name pos:start="295:33" pos:end="295:47"><name pos:start="295:33" pos:end="295:33">s</name><operator pos:start="295:34" pos:end="295:35">-&gt;</operator><name pos:start="295:36" pos:end="295:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="297:5" pos:end="297:57">/* one more sector for decompressed data alignment */</comment>

    <expr_stmt pos:start="299:5" pos:end="301:41"><expr pos:start="299:5" pos:end="301:40"><name pos:start="299:5" pos:end="299:19"><name pos:start="299:5" pos:end="299:5">s</name><operator pos:start="299:6" pos:end="299:7">-&gt;</operator><name pos:start="299:8" pos:end="299:19">cluster_data</name></name> <operator pos:start="299:21" pos:end="299:21">=</operator> <call pos:start="299:23" pos:end="301:40"><name pos:start="299:23" pos:end="299:37">qemu_blockalign</name><argument_list pos:start="299:38" pos:end="301:40">(<argument pos:start="299:39" pos:end="299:40"><expr pos:start="299:39" pos:end="299:40"><name pos:start="299:39" pos:end="299:40">bs</name></expr></argument>, <argument pos:start="299:43" pos:end="301:39"><expr pos:start="299:43" pos:end="301:39"><name pos:start="299:43" pos:end="299:65">QCOW_MAX_CRYPT_CLUSTERS</name> <operator pos:start="299:67" pos:end="299:67">*</operator> <name pos:start="299:69" pos:end="299:83"><name pos:start="299:69" pos:end="299:69">s</name><operator pos:start="299:70" pos:end="299:71">-&gt;</operator><name pos:start="299:72" pos:end="299:83">cluster_size</name></name>

                                  <operator pos:start="301:35" pos:end="301:35">+</operator> <literal type="number" pos:start="301:37" pos:end="301:39">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:33"><expr pos:start="303:5" pos:end="303:32"><name pos:start="303:5" pos:end="303:27"><name pos:start="303:5" pos:end="303:5">s</name><operator pos:start="303:6" pos:end="303:7">-&gt;</operator><name pos:start="303:8" pos:end="303:27">cluster_cache_offset</name></name> <operator pos:start="303:29" pos:end="303:29">=</operator> <operator pos:start="303:31" pos:end="303:31">-</operator><literal type="number" pos:start="303:32" pos:end="303:32">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="305:21"><expr pos:start="305:5" pos:end="305:20"><name pos:start="305:5" pos:end="305:12"><name pos:start="305:5" pos:end="305:5">s</name><operator pos:start="305:6" pos:end="305:7">-&gt;</operator><name pos:start="305:8" pos:end="305:12">flags</name></name> <operator pos:start="305:14" pos:end="305:14">=</operator> <name pos:start="305:16" pos:end="305:20">flags</name></expr>;</expr_stmt>



    <expr_stmt pos:start="309:5" pos:end="309:34"><expr pos:start="309:5" pos:end="309:33"><name pos:start="309:5" pos:end="309:7">ret</name> <operator pos:start="309:9" pos:end="309:9">=</operator> <call pos:start="309:11" pos:end="309:33"><name pos:start="309:11" pos:end="309:29">qcow2_refcount_init</name><argument_list pos:start="309:30" pos:end="309:33">(<argument pos:start="309:31" pos:end="309:32"><expr pos:start="309:31" pos:end="309:32"><name pos:start="309:31" pos:end="309:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="311:5" pos:end="315:5"><if pos:start="311:5" pos:end="315:5">if <condition pos:start="311:8" pos:end="311:17">(<expr pos:start="311:9" pos:end="311:16"><name pos:start="311:9" pos:end="311:11">ret</name> <operator pos:start="311:13" pos:end="311:14">!=</operator> <literal type="number" pos:start="311:16" pos:end="311:16">0</literal></expr>)</condition> <block pos:start="311:19" pos:end="315:5">{<block_content pos:start="313:9" pos:end="313:18">

        <goto pos:start="313:9" pos:end="313:18">goto <name pos:start="313:14" pos:end="313:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="319:5" pos:end="319:35"><expr pos:start="319:5" pos:end="319:34"><call pos:start="319:5" pos:end="319:34"><name pos:start="319:5" pos:end="319:14">QLIST_INIT</name><argument_list pos:start="319:15" pos:end="319:34">(<argument pos:start="319:16" pos:end="319:33"><expr pos:start="319:16" pos:end="319:33"><operator pos:start="319:16" pos:end="319:16">&amp;</operator><name pos:start="319:17" pos:end="319:33"><name pos:start="319:17" pos:end="319:17">s</name><operator pos:start="319:18" pos:end="319:19">-&gt;</operator><name pos:start="319:20" pos:end="319:33">cluster_allocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="323:5" pos:end="323:31">/* read qcow2 extensions */</comment>

    <if_stmt pos:start="325:5" pos:end="331:5"><if pos:start="325:5" pos:end="331:5">if <condition pos:start="325:8" pos:end="325:71">(<expr pos:start="325:9" pos:end="325:70"><call pos:start="325:9" pos:end="325:70"><name pos:start="325:9" pos:end="325:29">qcow2_read_extensions</name><argument_list pos:start="325:30" pos:end="325:70">(<argument pos:start="325:31" pos:end="325:32"><expr pos:start="325:31" pos:end="325:32"><name pos:start="325:31" pos:end="325:32">bs</name></expr></argument>, <argument pos:start="325:35" pos:end="325:54"><expr pos:start="325:35" pos:end="325:54"><name pos:start="325:35" pos:end="325:54"><name pos:start="325:35" pos:end="325:40">header</name><operator pos:start="325:41" pos:end="325:41">.</operator><name pos:start="325:42" pos:end="325:54">header_length</name></name></expr></argument>, <argument pos:start="325:57" pos:end="325:63"><expr pos:start="325:57" pos:end="325:63"><name pos:start="325:57" pos:end="325:63">ext_end</name></expr></argument>, <argument pos:start="325:66" pos:end="325:69"><expr pos:start="325:66" pos:end="325:69"><name pos:start="325:66" pos:end="325:69">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="325:73" pos:end="331:5">{<block_content pos:start="327:9" pos:end="329:18">

        <expr_stmt pos:start="327:9" pos:end="327:22"><expr pos:start="327:9" pos:end="327:21"><name pos:start="327:9" pos:end="327:11">ret</name> <operator pos:start="327:13" pos:end="327:13">=</operator> <operator pos:start="327:15" pos:end="327:15">-</operator><name pos:start="327:16" pos:end="327:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="329:9" pos:end="329:18">goto <name pos:start="329:14" pos:end="329:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="335:5" pos:end="335:36">/* read the backing file name */</comment>

    <if_stmt pos:start="337:5" pos:end="359:5"><if pos:start="337:5" pos:end="359:5">if <condition pos:start="337:8" pos:end="337:40">(<expr pos:start="337:9" pos:end="337:39"><name pos:start="337:9" pos:end="337:34"><name pos:start="337:9" pos:end="337:14">header</name><operator pos:start="337:15" pos:end="337:15">.</operator><name pos:start="337:16" pos:end="337:34">backing_file_offset</name></name> <operator pos:start="337:36" pos:end="337:37">!=</operator> <literal type="number" pos:start="337:39" pos:end="337:39">0</literal></expr>)</condition> <block pos:start="337:42" pos:end="359:5">{<block_content pos:start="339:9" pos:end="357:37">

        <expr_stmt pos:start="339:9" pos:end="339:39"><expr pos:start="339:9" pos:end="339:38"><name pos:start="339:9" pos:end="339:11">len</name> <operator pos:start="339:13" pos:end="339:13">=</operator> <name pos:start="339:15" pos:end="339:38"><name pos:start="339:15" pos:end="339:20">header</name><operator pos:start="339:21" pos:end="339:21">.</operator><name pos:start="339:22" pos:end="339:38">backing_file_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="341:9" pos:end="345:9"><if pos:start="341:9" pos:end="345:9">if <condition pos:start="341:12" pos:end="341:23">(<expr pos:start="341:13" pos:end="341:22"><name pos:start="341:13" pos:end="341:15">len</name> <operator pos:start="341:17" pos:end="341:17">&gt;</operator> <literal type="number" pos:start="341:19" pos:end="341:22">1023</literal></expr>)</condition> <block pos:start="341:25" pos:end="345:9">{<block_content pos:start="343:13" pos:end="343:23">

            <expr_stmt pos:start="343:13" pos:end="343:23"><expr pos:start="343:13" pos:end="343:22"><name pos:start="343:13" pos:end="343:15">len</name> <operator pos:start="343:17" pos:end="343:17">=</operator> <literal type="number" pos:start="343:19" pos:end="343:22">1023</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="347:9" pos:end="349:48"><expr pos:start="347:9" pos:end="349:47"><name pos:start="347:9" pos:end="347:11">ret</name> <operator pos:start="347:13" pos:end="347:13">=</operator> <call pos:start="347:15" pos:end="349:47"><name pos:start="347:15" pos:end="347:24">bdrv_pread</name><argument_list pos:start="347:25" pos:end="349:47">(<argument pos:start="347:26" pos:end="347:33"><expr pos:start="347:26" pos:end="347:33"><name pos:start="347:26" pos:end="347:33"><name pos:start="347:26" pos:end="347:27">bs</name><operator pos:start="347:28" pos:end="347:29">-&gt;</operator><name pos:start="347:30" pos:end="347:33">file</name></name></expr></argument>, <argument pos:start="347:36" pos:end="347:61"><expr pos:start="347:36" pos:end="347:61"><name pos:start="347:36" pos:end="347:61"><name pos:start="347:36" pos:end="347:41">header</name><operator pos:start="347:42" pos:end="347:42">.</operator><name pos:start="347:43" pos:end="347:61">backing_file_offset</name></name></expr></argument>,

                         <argument pos:start="349:26" pos:end="349:41"><expr pos:start="349:26" pos:end="349:41"><name pos:start="349:26" pos:end="349:41"><name pos:start="349:26" pos:end="349:27">bs</name><operator pos:start="349:28" pos:end="349:29">-&gt;</operator><name pos:start="349:30" pos:end="349:41">backing_file</name></name></expr></argument>, <argument pos:start="349:44" pos:end="349:46"><expr pos:start="349:44" pos:end="349:46"><name pos:start="349:44" pos:end="349:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="351:9" pos:end="355:9"><if pos:start="351:9" pos:end="355:9">if <condition pos:start="351:12" pos:end="351:20">(<expr pos:start="351:13" pos:end="351:19"><name pos:start="351:13" pos:end="351:15">ret</name> <operator pos:start="351:17" pos:end="351:17">&lt;</operator> <literal type="number" pos:start="351:19" pos:end="351:19">0</literal></expr>)</condition> <block pos:start="351:22" pos:end="355:9">{<block_content pos:start="353:13" pos:end="353:22">

            <goto pos:start="353:13" pos:end="353:22">goto <name pos:start="353:18" pos:end="353:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:37"><expr pos:start="357:9" pos:end="357:36"><name pos:start="357:9" pos:end="357:29"><name pos:start="357:9" pos:end="357:10">bs</name><operator pos:start="357:11" pos:end="357:12">-&gt;</operator><name pos:start="357:13" pos:end="357:24">backing_file</name><index pos:start="357:25" pos:end="357:29">[<expr pos:start="357:26" pos:end="357:28"><name pos:start="357:26" pos:end="357:28">len</name></expr>]</index></name> <operator pos:start="357:31" pos:end="357:31">=</operator> <literal type="char" pos:start="357:33" pos:end="357:36">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="363:5" pos:end="363:35"><expr pos:start="363:5" pos:end="363:34"><name pos:start="363:5" pos:end="363:7">ret</name> <operator pos:start="363:9" pos:end="363:9">=</operator> <call pos:start="363:11" pos:end="363:34"><name pos:start="363:11" pos:end="363:30">qcow2_read_snapshots</name><argument_list pos:start="363:31" pos:end="363:34">(<argument pos:start="363:32" pos:end="363:33"><expr pos:start="363:32" pos:end="363:33"><name pos:start="363:32" pos:end="363:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="365:5" pos:end="369:5"><if pos:start="365:5" pos:end="369:5">if <condition pos:start="365:8" pos:end="365:16">(<expr pos:start="365:9" pos:end="365:15"><name pos:start="365:9" pos:end="365:11">ret</name> <operator pos:start="365:13" pos:end="365:13">&lt;</operator> <literal type="number" pos:start="365:15" pos:end="365:15">0</literal></expr>)</condition> <block pos:start="365:18" pos:end="369:5">{<block_content pos:start="367:9" pos:end="367:18">

        <goto pos:start="367:9" pos:end="367:18">goto <name pos:start="367:14" pos:end="367:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="373:5" pos:end="373:46">/* Clear unknown autoclear feature bits */</comment>

    <if_stmt pos:start="375:5" pos:end="387:5"><if pos:start="375:5" pos:end="387:5">if <condition pos:start="375:8" pos:end="375:53">(<expr pos:start="375:9" pos:end="375:52"><operator pos:start="375:9" pos:end="375:9">!</operator><name pos:start="375:10" pos:end="375:22"><name pos:start="375:10" pos:end="375:11">bs</name><operator pos:start="375:12" pos:end="375:13">-&gt;</operator><name pos:start="375:14" pos:end="375:22">read_only</name></name> <operator pos:start="375:24" pos:end="375:25">&amp;&amp;</operator> <name pos:start="375:27" pos:end="375:47"><name pos:start="375:27" pos:end="375:27">s</name><operator pos:start="375:28" pos:end="375:29">-&gt;</operator><name pos:start="375:30" pos:end="375:47">autoclear_features</name></name> <operator pos:start="375:49" pos:end="375:50">!=</operator> <literal type="number" pos:start="375:52" pos:end="375:52">0</literal></expr>)</condition> <block pos:start="375:55" pos:end="387:5">{<block_content pos:start="377:9" pos:end="385:9">

        <expr_stmt pos:start="377:9" pos:end="377:34"><expr pos:start="377:9" pos:end="377:33"><name pos:start="377:9" pos:end="377:29"><name pos:start="377:9" pos:end="377:9">s</name><operator pos:start="377:10" pos:end="377:11">-&gt;</operator><name pos:start="377:12" pos:end="377:29">autoclear_features</name></name> <operator pos:start="377:31" pos:end="377:31">=</operator> <literal type="number" pos:start="377:33" pos:end="377:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:38"><expr pos:start="379:9" pos:end="379:37"><name pos:start="379:9" pos:end="379:11">ret</name> <operator pos:start="379:13" pos:end="379:13">=</operator> <call pos:start="379:15" pos:end="379:37"><name pos:start="379:15" pos:end="379:33">qcow2_update_header</name><argument_list pos:start="379:34" pos:end="379:37">(<argument pos:start="379:35" pos:end="379:36"><expr pos:start="379:35" pos:end="379:36"><name pos:start="379:35" pos:end="379:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="381:9" pos:end="385:9"><if pos:start="381:9" pos:end="385:9">if <condition pos:start="381:12" pos:end="381:20">(<expr pos:start="381:13" pos:end="381:19"><name pos:start="381:13" pos:end="381:15">ret</name> <operator pos:start="381:17" pos:end="381:17">&lt;</operator> <literal type="number" pos:start="381:19" pos:end="381:19">0</literal></expr>)</condition> <block pos:start="381:22" pos:end="385:9">{<block_content pos:start="383:13" pos:end="383:22">

            <goto pos:start="383:13" pos:end="383:22">goto <name pos:start="383:18" pos:end="383:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="391:5" pos:end="391:26">/* Initialise locks */</comment>

    <expr_stmt pos:start="393:5" pos:end="398:0"><expr pos:start="393:5" pos:end="393:32"><call pos:start="393:5" pos:end="393:32"><name pos:start="393:5" pos:end="393:22">qemu_co_mutex_init</name><argument_list pos:start="393:23" pos:end="393:32">(<argument pos:start="393:24" pos:end="393:31"><expr pos:start="393:24" pos:end="393:31"><operator pos:start="393:24" pos:end="393:24">&amp;</operator><name pos:start="393:25" pos:end="393:31"><name pos:start="393:25" pos:end="393:25">s</name><operator pos:start="393:26" pos:end="393:27">-&gt;</operator><name pos:start="393:28" pos:end="393:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="397:1" pos:end="397:18">#<cpp:directive pos:start="397:2" pos:end="397:6">ifdef</cpp:directive> <name pos:start="397:8" pos:end="397:18">DEBUG_ALLOC</name></cpp:ifdef>

    <block pos:start="399:5" pos:end="408:0">{<block_content pos:start="401:9" pos:end="403:43">

        <decl_stmt pos:start="401:9" pos:end="401:37"><decl pos:start="401:9" pos:end="401:36"><type pos:start="401:9" pos:end="401:23"><name pos:start="401:9" pos:end="401:23">BdrvCheckResult</name></type> <name pos:start="401:25" pos:end="401:30">result</name> <init pos:start="401:32" pos:end="401:36">= <expr pos:start="401:34" pos:end="401:36"><block pos:start="401:34" pos:end="401:36">{<expr pos:start="401:35" pos:end="401:35"><literal type="number" pos:start="401:35" pos:end="401:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:43"><expr pos:start="403:9" pos:end="403:42"><call pos:start="403:9" pos:end="403:42"><name pos:start="403:9" pos:end="403:29">qcow2_check_refcounts</name><argument_list pos:start="403:30" pos:end="403:42">(<argument pos:start="403:31" pos:end="403:32"><expr pos:start="403:31" pos:end="403:32"><name pos:start="403:31" pos:end="403:32">bs</name></expr></argument>, <argument pos:start="403:35" pos:end="403:41"><expr pos:start="403:35" pos:end="403:41"><operator pos:start="403:35" pos:end="403:35">&amp;</operator><name pos:start="403:36" pos:end="403:41">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="407:1" pos:end="407:6">#<cpp:directive pos:start="407:2" pos:end="407:6">endif</cpp:directive></cpp:endif>

    <return pos:start="409:5" pos:end="409:15">return <expr pos:start="409:12" pos:end="409:14"><name pos:start="409:12" pos:end="409:14">ret</name></expr>;</return>



 <label pos:start="413:2" pos:end="413:6"><name pos:start="413:2" pos:end="413:5">fail</name>:</label>

    <expr_stmt pos:start="415:5" pos:end="415:37"><expr pos:start="415:5" pos:end="415:36"><call pos:start="415:5" pos:end="415:36"><name pos:start="415:5" pos:end="415:10">g_free</name><argument_list pos:start="415:11" pos:end="415:36">(<argument pos:start="415:12" pos:end="415:35"><expr pos:start="415:12" pos:end="415:35"><name pos:start="415:12" pos:end="415:35"><name pos:start="415:12" pos:end="415:12">s</name><operator pos:start="415:13" pos:end="415:14">-&gt;</operator><name pos:start="415:15" pos:end="415:35">unknown_header_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="417:5" pos:end="417:35"><expr pos:start="417:5" pos:end="417:34"><call pos:start="417:5" pos:end="417:34"><name pos:start="417:5" pos:end="417:30">cleanup_unknown_header_ext</name><argument_list pos:start="417:31" pos:end="417:34">(<argument pos:start="417:32" pos:end="417:33"><expr pos:start="417:32" pos:end="417:33"><name pos:start="417:32" pos:end="417:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="419:5" pos:end="419:29"><expr pos:start="419:5" pos:end="419:28"><call pos:start="419:5" pos:end="419:28"><name pos:start="419:5" pos:end="419:24">qcow2_free_snapshots</name><argument_list pos:start="419:25" pos:end="419:28">(<argument pos:start="419:26" pos:end="419:27"><expr pos:start="419:26" pos:end="419:27"><name pos:start="419:26" pos:end="419:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="421:5" pos:end="421:29"><expr pos:start="421:5" pos:end="421:28"><call pos:start="421:5" pos:end="421:28"><name pos:start="421:5" pos:end="421:24">qcow2_refcount_close</name><argument_list pos:start="421:25" pos:end="421:28">(<argument pos:start="421:26" pos:end="421:27"><expr pos:start="421:26" pos:end="421:27"><name pos:start="421:26" pos:end="421:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:24"><expr pos:start="423:5" pos:end="423:23"><call pos:start="423:5" pos:end="423:23"><name pos:start="423:5" pos:end="423:10">g_free</name><argument_list pos:start="423:11" pos:end="423:23">(<argument pos:start="423:12" pos:end="423:22"><expr pos:start="423:12" pos:end="423:22"><name pos:start="423:12" pos:end="423:22"><name pos:start="423:12" pos:end="423:12">s</name><operator pos:start="423:13" pos:end="423:14">-&gt;</operator><name pos:start="423:15" pos:end="423:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="425:5" pos:end="429:5"><if pos:start="425:5" pos:end="429:5">if <condition pos:start="425:8" pos:end="425:26">(<expr pos:start="425:9" pos:end="425:25"><name pos:start="425:9" pos:end="425:25"><name pos:start="425:9" pos:end="425:9">s</name><operator pos:start="425:10" pos:end="425:11">-&gt;</operator><name pos:start="425:12" pos:end="425:25">l2_table_cache</name></name></expr>)</condition> <block pos:start="425:28" pos:end="429:5">{<block_content pos:start="427:9" pos:end="427:51">

        <expr_stmt pos:start="427:9" pos:end="427:51"><expr pos:start="427:9" pos:end="427:50"><call pos:start="427:9" pos:end="427:50"><name pos:start="427:9" pos:end="427:27">qcow2_cache_destroy</name><argument_list pos:start="427:28" pos:end="427:50">(<argument pos:start="427:29" pos:end="427:30"><expr pos:start="427:29" pos:end="427:30"><name pos:start="427:29" pos:end="427:30">bs</name></expr></argument>, <argument pos:start="427:33" pos:end="427:49"><expr pos:start="427:33" pos:end="427:49"><name pos:start="427:33" pos:end="427:49"><name pos:start="427:33" pos:end="427:33">s</name><operator pos:start="427:34" pos:end="427:35">-&gt;</operator><name pos:start="427:36" pos:end="427:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:29"><expr pos:start="431:5" pos:end="431:28"><call pos:start="431:5" pos:end="431:28"><name pos:start="431:5" pos:end="431:10">g_free</name><argument_list pos:start="431:11" pos:end="431:28">(<argument pos:start="431:12" pos:end="431:27"><expr pos:start="431:12" pos:end="431:27"><name pos:start="431:12" pos:end="431:27"><name pos:start="431:12" pos:end="431:12">s</name><operator pos:start="431:13" pos:end="431:14">-&gt;</operator><name pos:start="431:15" pos:end="431:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:32"><expr pos:start="433:5" pos:end="433:31"><call pos:start="433:5" pos:end="433:31"><name pos:start="433:5" pos:end="433:14">qemu_vfree</name><argument_list pos:start="433:15" pos:end="433:31">(<argument pos:start="433:16" pos:end="433:30"><expr pos:start="433:16" pos:end="433:30"><name pos:start="433:16" pos:end="433:30"><name pos:start="433:16" pos:end="433:16">s</name><operator pos:start="433:17" pos:end="433:18">-&gt;</operator><name pos:start="433:19" pos:end="433:30">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="435:5" pos:end="435:15">return <expr pos:start="435:12" pos:end="435:14"><name pos:start="435:12" pos:end="435:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
