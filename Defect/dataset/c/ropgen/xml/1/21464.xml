<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21464.c" pos:tabs="8"><function pos:start="1:1" pos:end="3541:14"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">abi_long</name></type> <name pos:start="1:10" pos:end="1:19">do_syscall</name><parameter_list pos:start="1:20" pos:end="4:34">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:24">void</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:33">cpu_env</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:42"><decl pos:start="1:36" pos:end="1:42"><type pos:start="1:36" pos:end="1:42"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:42">num</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:57"><decl pos:start="1:45" pos:end="1:57"><type pos:start="1:45" pos:end="1:57"><name pos:start="1:45" pos:end="1:52">abi_long</name></type> <name pos:start="1:54" pos:end="1:57">arg1</name></decl></parameter>,
                    <parameter pos:start="2:21" pos:end="2:33"><decl pos:start="2:21" pos:end="2:33"><type pos:start="2:21" pos:end="2:33"><name pos:start="2:21" pos:end="2:28">abi_long</name></type> <name pos:start="2:30" pos:end="2:33">arg2</name></decl></parameter>, <parameter pos:start="2:36" pos:end="2:48"><decl pos:start="2:36" pos:end="2:48"><type pos:start="2:36" pos:end="2:48"><name pos:start="2:36" pos:end="2:43">abi_long</name></type> <name pos:start="2:45" pos:end="2:48">arg3</name></decl></parameter>, <parameter pos:start="2:51" pos:end="2:63"><decl pos:start="2:51" pos:end="2:63"><type pos:start="2:51" pos:end="2:63"><name pos:start="2:51" pos:end="2:58">abi_long</name></type> <name pos:start="2:60" pos:end="2:63">arg4</name></decl></parameter>,
                    <parameter pos:start="3:21" pos:end="3:33"><decl pos:start="3:21" pos:end="3:33"><type pos:start="3:21" pos:end="3:33"><name pos:start="3:21" pos:end="3:28">abi_long</name></type> <name pos:start="3:30" pos:end="3:33">arg5</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:48"><decl pos:start="3:36" pos:end="3:48"><type pos:start="3:36" pos:end="3:48"><name pos:start="3:36" pos:end="3:43">abi_long</name></type> <name pos:start="3:45" pos:end="3:48">arg6</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:63"><decl pos:start="3:51" pos:end="3:63"><type pos:start="3:51" pos:end="3:63"><name pos:start="3:51" pos:end="3:58">abi_long</name></type> <name pos:start="3:60" pos:end="3:63">arg7</name></decl></parameter>,
                    <parameter pos:start="4:21" pos:end="4:33"><decl pos:start="4:21" pos:end="4:33"><type pos:start="4:21" pos:end="4:33"><name pos:start="4:21" pos:end="4:28">abi_long</name></type> <name pos:start="4:30" pos:end="4:33">arg8</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="3541:14">{<block_content pos:start="6:5" pos:end="3541:14">
    <decl_stmt pos:start="6:5" pos:end="6:41"><decl pos:start="6:5" pos:end="6:40"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">CPUState</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:17">cpu</name> <init pos:start="6:19" pos:end="6:40">= <expr pos:start="6:21" pos:end="6:40"><call pos:start="6:21" pos:end="6:40"><name pos:start="6:21" pos:end="6:31">ENV_GET_CPU</name><argument_list pos:start="6:32" pos:end="6:40">(<argument pos:start="6:33" pos:end="6:39"><expr pos:start="6:33" pos:end="6:39"><name pos:start="6:33" pos:end="6:39">cpu_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">abi_long</name></type> <name pos:start="7:14" pos:end="7:16">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:19"><decl pos:start="8:5" pos:end="8:18"><type pos:start="8:5" pos:end="8:15"><name pos:start="8:5" pos:end="8:15"><name pos:start="8:5" pos:end="8:10">struct</name> <name pos:start="8:12" pos:end="8:15">stat</name></name></type> <name pos:start="8:17" pos:end="8:18">st</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">statfs</name></name></type> <name pos:start="9:19" pos:end="9:22">stfs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="12:0"><decl pos:start="10:5" pos:end="10:11"><type pos:start="10:5" pos:end="10:10"><name pos:start="10:5" pos:end="10:8">void</name> <modifier pos:start="10:10" pos:end="10:10">*</modifier></type><name pos:start="10:11" pos:end="10:11">p</name></decl>;</decl_stmt>
<cpp:if pos:start="11:1" pos:end="11:30">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:30"><call pos:start="11:5" pos:end="11:30"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:30">(<argument pos:start="11:13" pos:end="11:29"><expr pos:start="11:13" pos:end="11:29"><name pos:start="11:13" pos:end="11:29">DEBUG_ERESTARTSYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block" pos:start="12:5" pos:end="15:7">/* Debug-only code for exercising the syscall-restart code paths
     * in the per-architecture cpu main loops: restart every syscall
     * the guest makes once before letting it through.
     */</comment>
    <block pos:start="16:5" pos:end="3541:14">{<block_content pos:start="17:9" pos:end="3541:14">
        <decl_stmt pos:start="17:9" pos:end="17:24"><decl pos:start="17:9" pos:end="17:23"><type pos:start="17:9" pos:end="17:18"><specifier pos:start="17:9" pos:end="17:14">static</specifier> <name pos:start="17:16" pos:end="17:18">int</name></type> <name pos:start="17:20" pos:end="17:23">flag</name></decl>;</decl_stmt>
        <expr_stmt pos:start="18:9" pos:end="18:21"><expr pos:start="18:9" pos:end="18:20"><name pos:start="18:9" pos:end="18:12">flag</name> <operator pos:start="18:14" pos:end="18:14">=</operator> <operator pos:start="18:16" pos:end="18:16">!</operator><name pos:start="18:17" pos:end="18:20">flag</name></expr>;</expr_stmt>
        <if_stmt pos:start="19:9" pos:end="3541:14"><if pos:start="19:9" pos:end="3541:14">if <condition pos:start="19:12" pos:end="19:17">(<expr pos:start="19:13" pos:end="19:16"><name pos:start="19:13" pos:end="19:16">flag</name></expr>)</condition> <block pos:start="19:19" pos:end="3541:14">{<block_content pos:start="20:13" pos:end="3541:14">
            <return pos:start="20:13" pos:end="23:0">return <expr pos:start="20:20" pos:end="20:38"><operator pos:start="20:20" pos:end="20:20">-</operator><name pos:start="20:21" pos:end="20:38">TARGET_ERESTARTSYS</name></expr>;</return>
<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="22:1" pos:end="22:12">#<cpp:directive pos:start="22:2" pos:end="22:6">ifdef</cpp:directive> <name pos:start="22:8" pos:end="22:12">DEBUG</name></cpp:ifdef>
    <expr_stmt pos:start="23:5" pos:end="25:0"><expr pos:start="23:5" pos:end="23:31"><call pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:12">gemu_log</name><argument_list pos:start="23:13" pos:end="23:31">(<argument pos:start="23:14" pos:end="23:25"><expr pos:start="23:14" pos:end="23:25"><literal type="string" pos:start="23:14" pos:end="23:25">"syscall %d"</literal></expr></argument>, <argument pos:start="23:28" pos:end="23:30"><expr pos:start="23:28" pos:end="23:30"><name pos:start="23:28" pos:end="23:30">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="25:5" pos:end="25:87"><expr pos:start="25:5" pos:end="25:86"><call pos:start="25:5" pos:end="25:86"><name pos:start="25:5" pos:end="25:28">trace_guest_user_syscall</name><argument_list pos:start="25:29" pos:end="25:86">(<argument pos:start="25:30" pos:end="25:32"><expr pos:start="25:30" pos:end="25:32"><name pos:start="25:30" pos:end="25:32">cpu</name></expr></argument>, <argument pos:start="25:35" pos:end="25:37"><expr pos:start="25:35" pos:end="25:37"><name pos:start="25:35" pos:end="25:37">num</name></expr></argument>, <argument pos:start="25:40" pos:end="25:43"><expr pos:start="25:40" pos:end="25:43"><name pos:start="25:40" pos:end="25:43">arg1</name></expr></argument>, <argument pos:start="25:46" pos:end="25:49"><expr pos:start="25:46" pos:end="25:49"><name pos:start="25:46" pos:end="25:49">arg2</name></expr></argument>, <argument pos:start="25:52" pos:end="25:55"><expr pos:start="25:52" pos:end="25:55"><name pos:start="25:52" pos:end="25:55">arg3</name></expr></argument>, <argument pos:start="25:58" pos:end="25:61"><expr pos:start="25:58" pos:end="25:61"><name pos:start="25:58" pos:end="25:61">arg4</name></expr></argument>, <argument pos:start="25:64" pos:end="25:67"><expr pos:start="25:64" pos:end="25:67"><name pos:start="25:64" pos:end="25:67">arg5</name></expr></argument>, <argument pos:start="25:70" pos:end="25:73"><expr pos:start="25:70" pos:end="25:73"><name pos:start="25:70" pos:end="25:73">arg6</name></expr></argument>, <argument pos:start="25:76" pos:end="25:79"><expr pos:start="25:76" pos:end="25:79"><name pos:start="25:76" pos:end="25:79">arg7</name></expr></argument>, <argument pos:start="25:82" pos:end="25:85"><expr pos:start="25:82" pos:end="25:85"><name pos:start="25:82" pos:end="25:85">arg8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="26:5" pos:end="27:63"><if pos:start="26:5" pos:end="27:63">if<condition pos:start="26:7" pos:end="26:17">(<expr pos:start="26:8" pos:end="26:16"><name pos:start="26:8" pos:end="26:16">do_strace</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:63"><block_content pos:start="27:9" pos:end="27:63">
        <expr_stmt pos:start="27:9" pos:end="27:63"><expr pos:start="27:9" pos:end="27:62"><call pos:start="27:9" pos:end="27:62"><name pos:start="27:9" pos:end="27:21">print_syscall</name><argument_list pos:start="27:22" pos:end="27:62">(<argument pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:25">num</name></expr></argument>, <argument pos:start="27:28" pos:end="27:31"><expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:31">arg1</name></expr></argument>, <argument pos:start="27:34" pos:end="27:37"><expr pos:start="27:34" pos:end="27:37"><name pos:start="27:34" pos:end="27:37">arg2</name></expr></argument>, <argument pos:start="27:40" pos:end="27:43"><expr pos:start="27:40" pos:end="27:43"><name pos:start="27:40" pos:end="27:43">arg3</name></expr></argument>, <argument pos:start="27:46" pos:end="27:49"><expr pos:start="27:46" pos:end="27:49"><name pos:start="27:46" pos:end="27:49">arg4</name></expr></argument>, <argument pos:start="27:52" pos:end="27:55"><expr pos:start="27:52" pos:end="27:55"><name pos:start="27:52" pos:end="27:55">arg5</name></expr></argument>, <argument pos:start="27:58" pos:end="27:61"><expr pos:start="27:58" pos:end="27:61"><name pos:start="27:58" pos:end="27:61">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <switch pos:start="28:5" pos:end="3541:14">switch<condition pos:start="28:11" pos:end="28:15">(<expr pos:start="28:12" pos:end="28:14"><name pos:start="28:12" pos:end="28:14">num</name></expr>)</condition> <block pos:start="28:17" pos:end="3541:14">{<block_content pos:start="29:5" pos:end="3541:14">
    <case pos:start="29:5" pos:end="29:24">case <expr pos:start="29:10" pos:end="29:23"><name pos:start="29:10" pos:end="29:23">TARGET_NR_exit</name></expr>:</case>
        <comment type="block" pos:start="30:9" pos:end="33:69">/* In old applications this may be used to implement _exit(2).
           However in threaded applictions it is used for thread termination,
           and _exit_group is used for application termination.
           Do thread termination if we have more then one thread.  */</comment>
        <if_stmt pos:start="34:9" pos:end="3541:14"><if pos:start="34:9" pos:end="3541:14">if <condition pos:start="34:12" pos:end="34:28">(<expr pos:start="34:13" pos:end="34:27"><call pos:start="34:13" pos:end="34:27"><name pos:start="34:13" pos:end="34:25">block_signals</name><argument_list pos:start="34:26" pos:end="34:27">()</argument_list></call></expr>)</condition> <block pos:start="34:30" pos:end="3541:14">{<block_content pos:start="35:13" pos:end="3541:14">
            <expr_stmt pos:start="35:13" pos:end="35:38"><expr pos:start="35:13" pos:end="35:37"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <operator pos:start="35:19" pos:end="35:19">-</operator><name pos:start="35:20" pos:end="35:37">TARGET_ERESTARTSYS</name></expr>;</expr_stmt>
        <if_stmt pos:start="36:9" pos:end="3541:14"><if pos:start="36:9" pos:end="3541:14">if <condition pos:start="36:12" pos:end="36:32">(<expr pos:start="36:13" pos:end="36:31"><call pos:start="36:13" pos:end="36:31"><name pos:start="36:13" pos:end="36:20">CPU_NEXT</name><argument_list pos:start="36:21" pos:end="36:31">(<argument pos:start="36:22" pos:end="36:30"><expr pos:start="36:22" pos:end="36:30"><name pos:start="36:22" pos:end="36:30">first_cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="36:34" pos:end="3541:14">{<block_content pos:start="37:13" pos:end="3541:14">
            <decl_stmt pos:start="37:13" pos:end="37:26"><decl pos:start="37:13" pos:end="37:25"><type pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:21">TaskState</name> <modifier pos:start="37:23" pos:end="37:23">*</modifier></type><name pos:start="37:24" pos:end="37:25">ts</name></decl>;</decl_stmt>
            <expr_stmt pos:start="38:13" pos:end="38:28"><expr pos:start="38:13" pos:end="38:27"><call pos:start="38:13" pos:end="38:27"><name pos:start="38:13" pos:end="38:25">cpu_list_lock</name><argument_list pos:start="38:26" pos:end="38:27">()</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="39:13" pos:end="39:48">/* Remove the CPU from the list.  */</comment>
            <expr_stmt pos:start="40:13" pos:end="40:44"><expr pos:start="40:13" pos:end="40:43"><call pos:start="40:13" pos:end="40:43"><name pos:start="40:13" pos:end="40:25">QTAILQ_REMOVE</name><argument_list pos:start="40:26" pos:end="40:43">(<argument pos:start="40:27" pos:end="40:31"><expr pos:start="40:27" pos:end="40:31"><operator pos:start="40:27" pos:end="40:27">&amp;</operator><name pos:start="40:28" pos:end="40:31">cpus</name></expr></argument>, <argument pos:start="40:34" pos:end="40:36"><expr pos:start="40:34" pos:end="40:36"><name pos:start="40:34" pos:end="40:36">cpu</name></expr></argument>, <argument pos:start="40:39" pos:end="40:42"><expr pos:start="40:39" pos:end="40:42"><name pos:start="40:39" pos:end="40:42">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="41:13" pos:end="41:30"><expr pos:start="41:13" pos:end="41:29"><call pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:27">cpu_list_unlock</name><argument_list pos:start="41:28" pos:end="41:29">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="42:13" pos:end="42:29"><expr pos:start="42:13" pos:end="42:28"><name pos:start="42:13" pos:end="42:14">ts</name> <operator pos:start="42:16" pos:end="42:16">=</operator> <name pos:start="42:18" pos:end="42:28"><name pos:start="42:18" pos:end="42:20">cpu</name><operator pos:start="42:21" pos:end="42:22">-&gt;</operator><name pos:start="42:23" pos:end="42:28">opaque</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="43:13" pos:end="3541:14"><if pos:start="43:13" pos:end="3541:14">if <condition pos:start="43:16" pos:end="43:33">(<expr pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:18">ts</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:32">child_tidptr</name></name></expr>)</condition> <block pos:start="43:35" pos:end="3541:14">{<block_content pos:start="44:17" pos:end="3541:14">
                <expr_stmt pos:start="44:17" pos:end="44:50"><expr pos:start="44:17" pos:end="44:49"><call pos:start="44:17" pos:end="44:49"><name pos:start="44:17" pos:end="44:28">put_user_u32</name><argument_list pos:start="44:29" pos:end="44:49">(<argument pos:start="44:30" pos:end="44:30"><expr pos:start="44:30" pos:end="44:30"><literal type="number" pos:start="44:30" pos:end="44:30">0</literal></expr></argument>, <argument pos:start="44:33" pos:end="44:48"><expr pos:start="44:33" pos:end="44:48"><name pos:start="44:33" pos:end="44:48"><name pos:start="44:33" pos:end="44:34">ts</name><operator pos:start="44:35" pos:end="44:36">-&gt;</operator><name pos:start="44:37" pos:end="44:48">child_tidptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="45:17" pos:end="46:41"><expr pos:start="45:17" pos:end="46:40"><call pos:start="45:17" pos:end="46:40"><name pos:start="45:17" pos:end="45:25">sys_futex</name><argument_list pos:start="45:26" pos:end="46:40">(<argument pos:start="45:27" pos:end="45:47"><expr pos:start="45:27" pos:end="45:47"><call pos:start="45:27" pos:end="45:47"><name pos:start="45:27" pos:end="45:29">g2h</name><argument_list pos:start="45:30" pos:end="45:47">(<argument pos:start="45:31" pos:end="45:46"><expr pos:start="45:31" pos:end="45:46"><name pos:start="45:31" pos:end="45:46"><name pos:start="45:31" pos:end="45:32">ts</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:46">child_tidptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="45:50" pos:end="45:59"><expr pos:start="45:50" pos:end="45:59"><name pos:start="45:50" pos:end="45:59">FUTEX_WAKE</name></expr></argument>, <argument pos:start="45:62" pos:end="45:68"><expr pos:start="45:62" pos:end="45:68"><name pos:start="45:62" pos:end="45:68">INT_MAX</name></expr></argument>,
                          <argument pos:start="46:27" pos:end="46:30"><expr pos:start="46:27" pos:end="46:30"><name pos:start="46:27" pos:end="46:30">NULL</name></expr></argument>, <argument pos:start="46:33" pos:end="46:36"><expr pos:start="46:33" pos:end="46:36"><name pos:start="46:33" pos:end="46:36">NULL</name></expr></argument>, <argument pos:start="46:39" pos:end="46:39"><expr pos:start="46:39" pos:end="46:39"><literal type="number" pos:start="46:39" pos:end="46:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="47:13" pos:end="47:30"><expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:22">thread_cpu</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:29">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="48:13" pos:end="48:38"><expr pos:start="48:13" pos:end="48:37"><call pos:start="48:13" pos:end="48:37"><name pos:start="48:13" pos:end="48:24">object_unref</name><argument_list pos:start="48:25" pos:end="48:37">(<argument pos:start="48:26" pos:end="48:36"><expr pos:start="48:26" pos:end="48:36"><call pos:start="48:26" pos:end="48:36"><name pos:start="48:26" pos:end="48:31">OBJECT</name><argument_list pos:start="48:32" pos:end="48:36">(<argument pos:start="48:33" pos:end="48:35"><expr pos:start="48:33" pos:end="48:35"><name pos:start="48:33" pos:end="48:35">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="49:13" pos:end="49:23"><expr pos:start="49:13" pos:end="49:22"><call pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:18">g_free</name><argument_list pos:start="49:19" pos:end="49:22">(<argument pos:start="49:20" pos:end="49:21"><expr pos:start="49:20" pos:end="49:21"><name pos:start="49:20" pos:end="49:21">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="50:13" pos:end="50:36"><expr pos:start="50:13" pos:end="50:35"><call pos:start="50:13" pos:end="50:35"><name pos:start="50:13" pos:end="50:33">rcu_unregister_thread</name><argument_list pos:start="50:34" pos:end="50:35">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="51:13" pos:end="53:0"><expr pos:start="51:13" pos:end="51:30"><call pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:24">pthread_exit</name><argument_list pos:start="51:25" pos:end="51:30">(<argument pos:start="51:26" pos:end="51:29"><expr pos:start="51:26" pos:end="51:29"><name pos:start="51:26" pos:end="51:29">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="52:1" pos:end="52:19">#<cpp:directive pos:start="52:2" pos:end="52:6">ifdef</cpp:directive> <name pos:start="52:8" pos:end="52:19">TARGET_GPROF</name></cpp:ifdef>
        <expr_stmt pos:start="53:9" pos:end="55:0"><expr pos:start="53:9" pos:end="53:19"><call pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:17">_mcleanup</name><argument_list pos:start="53:18" pos:end="53:19">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="54:1" pos:end="54:6">#<cpp:directive pos:start="54:2" pos:end="54:6">endif</cpp:directive></cpp:endif>
        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><call pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:16">gdb_exit</name><argument_list pos:start="55:17" pos:end="55:31">(<argument pos:start="55:18" pos:end="55:24"><expr pos:start="55:18" pos:end="55:24"><name pos:start="55:18" pos:end="55:24">cpu_env</name></expr></argument>, <argument pos:start="55:27" pos:end="55:30"><expr pos:start="55:27" pos:end="55:30"><name pos:start="55:27" pos:end="55:30">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="56:9" pos:end="56:20"><expr pos:start="56:9" pos:end="56:19"><call pos:start="56:9" pos:end="56:19"><name pos:start="56:9" pos:end="56:13">_exit</name><argument_list pos:start="56:14" pos:end="56:19">(<argument pos:start="56:15" pos:end="56:18"><expr pos:start="56:15" pos:end="56:18"><name pos:start="56:15" pos:end="56:18">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="57:18" pos:end="57:36">/* avoid warning */</comment>
    <case pos:start="58:5" pos:end="58:24">case <expr pos:start="58:10" pos:end="58:23"><name pos:start="58:10" pos:end="58:23">TARGET_NR_read</name></expr>:</case>
        <if_stmt pos:start="59:9" pos:end="3541:14"><if pos:start="59:9" pos:end="60:20">if <condition pos:start="59:12" pos:end="59:22">(<expr pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:16">arg3</name> <operator pos:start="59:18" pos:end="59:19">==</operator> <literal type="number" pos:start="59:21" pos:end="59:21">0</literal></expr>)</condition><block type="pseudo" pos:start="60:13" pos:end="60:20"><block_content pos:start="60:13" pos:end="60:20">
            <expr_stmt pos:start="60:13" pos:end="60:20"><expr pos:start="60:13" pos:end="60:19"><name pos:start="60:13" pos:end="60:15">ret</name> <operator pos:start="60:17" pos:end="60:17">=</operator> <literal type="number" pos:start="60:19" pos:end="60:19">0</literal></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="61:9" pos:end="3541:14">else <block pos:start="61:14" pos:end="3541:14">{<block_content pos:start="62:13" pos:end="3541:14">
            <if_stmt pos:start="62:13" pos:end="63:28"><if pos:start="62:13" pos:end="63:28">if <condition pos:start="62:16" pos:end="62:62">(<expr pos:start="62:17" pos:end="62:61"><operator pos:start="62:17" pos:end="62:17">!</operator><operator pos:start="62:18" pos:end="62:18">(</operator><name pos:start="62:19" pos:end="62:19">p</name> <operator pos:start="62:21" pos:end="62:21">=</operator> <call pos:start="62:23" pos:end="62:60"><name pos:start="62:23" pos:end="62:31">lock_user</name><argument_list pos:start="62:32" pos:end="62:60">(<argument pos:start="62:33" pos:end="62:44"><expr pos:start="62:33" pos:end="62:44"><name pos:start="62:33" pos:end="62:44">VERIFY_WRITE</name></expr></argument>, <argument pos:start="62:47" pos:end="62:50"><expr pos:start="62:47" pos:end="62:50"><name pos:start="62:47" pos:end="62:50">arg2</name></expr></argument>, <argument pos:start="62:53" pos:end="62:56"><expr pos:start="62:53" pos:end="62:56"><name pos:start="62:53" pos:end="62:56">arg3</name></expr></argument>, <argument pos:start="62:59" pos:end="62:59"><expr pos:start="62:59" pos:end="62:59"><literal type="number" pos:start="62:59" pos:end="62:59">0</literal></expr></argument>)</argument_list></call><operator pos:start="62:61" pos:end="62:61">)</operator></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:28"><block_content pos:start="63:17" pos:end="63:28">
                <goto pos:start="63:17" pos:end="63:28">goto <name pos:start="63:22" pos:end="63:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="64:13" pos:end="64:54"><expr pos:start="64:13" pos:end="64:53"><name pos:start="64:13" pos:end="64:15">ret</name> <operator pos:start="64:17" pos:end="64:17">=</operator> <call pos:start="64:19" pos:end="64:53"><name pos:start="64:19" pos:end="64:27">get_errno</name><argument_list pos:start="64:28" pos:end="64:53">(<argument pos:start="64:29" pos:end="64:52"><expr pos:start="64:29" pos:end="64:52"><call pos:start="64:29" pos:end="64:52"><name pos:start="64:29" pos:end="64:37">safe_read</name><argument_list pos:start="64:38" pos:end="64:52">(<argument pos:start="64:39" pos:end="64:42"><expr pos:start="64:39" pos:end="64:42"><name pos:start="64:39" pos:end="64:42">arg1</name></expr></argument>, <argument pos:start="64:45" pos:end="64:45"><expr pos:start="64:45" pos:end="64:45"><name pos:start="64:45" pos:end="64:45">p</name></expr></argument>, <argument pos:start="64:48" pos:end="64:51"><expr pos:start="64:48" pos:end="64:51"><name pos:start="64:48" pos:end="64:51">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="65:13" pos:end="3541:14"><if pos:start="65:13" pos:end="3541:14">if <condition pos:start="65:16" pos:end="66:51">(<expr pos:start="65:17" pos:end="66:50"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:22">&gt;=</operator> <literal type="number" pos:start="65:24" pos:end="65:24">0</literal> <operator pos:start="65:26" pos:end="65:27">&amp;&amp;</operator>
                <call pos:start="66:17" pos:end="66:50"><name pos:start="66:17" pos:end="66:44">fd_trans_host_to_target_data</name><argument_list pos:start="66:45" pos:end="66:50">(<argument pos:start="66:46" pos:end="66:49"><expr pos:start="66:46" pos:end="66:49"><name pos:start="66:46" pos:end="66:49">arg1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="66:53" pos:end="3541:14">{<block_content pos:start="67:17" pos:end="3541:14">
                <expr_stmt pos:start="67:17" pos:end="67:65"><expr pos:start="67:17" pos:end="67:64"><name pos:start="67:17" pos:end="67:19">ret</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:64"><call pos:start="67:23" pos:end="67:56"><name pos:start="67:23" pos:end="67:50">fd_trans_host_to_target_data</name><argument_list pos:start="67:51" pos:end="67:56">(<argument pos:start="67:52" pos:end="67:55"><expr pos:start="67:52" pos:end="67:55"><name pos:start="67:52" pos:end="67:55">arg1</name></expr></argument>)</argument_list></call><argument_list pos:start="67:57" pos:end="67:64">(<argument pos:start="67:58" pos:end="67:58"><expr pos:start="67:58" pos:end="67:58"><name pos:start="67:58" pos:end="67:58">p</name></expr></argument>, <argument pos:start="67:61" pos:end="67:63"><expr pos:start="67:61" pos:end="67:63"><name pos:start="67:61" pos:end="67:63">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:38"><expr pos:start="68:13" pos:end="68:37"><call pos:start="68:13" pos:end="68:37"><name pos:start="68:13" pos:end="68:23">unlock_user</name><argument_list pos:start="68:24" pos:end="68:37">(<argument pos:start="68:25" pos:end="68:25"><expr pos:start="68:25" pos:end="68:25"><name pos:start="68:25" pos:end="68:25">p</name></expr></argument>, <argument pos:start="68:28" pos:end="68:31"><expr pos:start="68:28" pos:end="68:31"><name pos:start="68:28" pos:end="68:31">arg2</name></expr></argument>, <argument pos:start="68:34" pos:end="68:36"><expr pos:start="68:34" pos:end="68:36"><name pos:start="68:34" pos:end="68:36">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="69:5" pos:end="69:25">case <expr pos:start="69:10" pos:end="69:24"><name pos:start="69:10" pos:end="69:24">TARGET_NR_write</name></expr>:</case>
        <if_stmt pos:start="70:9" pos:end="71:24"><if pos:start="70:9" pos:end="71:24">if <condition pos:start="70:12" pos:end="70:57">(<expr pos:start="70:13" pos:end="70:56"><operator pos:start="70:13" pos:end="70:13">!</operator><operator pos:start="70:14" pos:end="70:14">(</operator><name pos:start="70:15" pos:end="70:15">p</name> <operator pos:start="70:17" pos:end="70:17">=</operator> <call pos:start="70:19" pos:end="70:55"><name pos:start="70:19" pos:end="70:27">lock_user</name><argument_list pos:start="70:28" pos:end="70:55">(<argument pos:start="70:29" pos:end="70:39"><expr pos:start="70:29" pos:end="70:39"><name pos:start="70:29" pos:end="70:39">VERIFY_READ</name></expr></argument>, <argument pos:start="70:42" pos:end="70:45"><expr pos:start="70:42" pos:end="70:45"><name pos:start="70:42" pos:end="70:45">arg2</name></expr></argument>, <argument pos:start="70:48" pos:end="70:51"><expr pos:start="70:48" pos:end="70:51"><name pos:start="70:48" pos:end="70:51">arg3</name></expr></argument>, <argument pos:start="70:54" pos:end="70:54"><expr pos:start="70:54" pos:end="70:54"><literal type="number" pos:start="70:54" pos:end="70:54">1</literal></expr></argument>)</argument_list></call><operator pos:start="70:56" pos:end="70:56">)</operator></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:24"><block_content pos:start="71:13" pos:end="71:24">
            <goto pos:start="71:13" pos:end="71:24">goto <name pos:start="71:18" pos:end="71:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="72:9" pos:end="72:51"><expr pos:start="72:9" pos:end="72:50"><name pos:start="72:9" pos:end="72:11">ret</name> <operator pos:start="72:13" pos:end="72:13">=</operator> <call pos:start="72:15" pos:end="72:50"><name pos:start="72:15" pos:end="72:23">get_errno</name><argument_list pos:start="72:24" pos:end="72:50">(<argument pos:start="72:25" pos:end="72:49"><expr pos:start="72:25" pos:end="72:49"><call pos:start="72:25" pos:end="72:49"><name pos:start="72:25" pos:end="72:34">safe_write</name><argument_list pos:start="72:35" pos:end="72:49">(<argument pos:start="72:36" pos:end="72:39"><expr pos:start="72:36" pos:end="72:39"><name pos:start="72:36" pos:end="72:39">arg1</name></expr></argument>, <argument pos:start="72:42" pos:end="72:42"><expr pos:start="72:42" pos:end="72:42"><name pos:start="72:42" pos:end="72:42">p</name></expr></argument>, <argument pos:start="72:45" pos:end="72:48"><expr pos:start="72:45" pos:end="72:48"><name pos:start="72:45" pos:end="72:48">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="73:9" pos:end="75:0"><expr pos:start="73:9" pos:end="73:31"><call pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:19">unlock_user</name><argument_list pos:start="73:20" pos:end="73:31">(<argument pos:start="73:21" pos:end="73:21"><expr pos:start="73:21" pos:end="73:21"><name pos:start="73:21" pos:end="73:21">p</name></expr></argument>, <argument pos:start="73:24" pos:end="73:27"><expr pos:start="73:24" pos:end="73:27"><name pos:start="73:24" pos:end="73:27">arg2</name></expr></argument>, <argument pos:start="73:30" pos:end="73:30"><expr pos:start="73:30" pos:end="73:30"><literal type="number" pos:start="73:30" pos:end="73:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="74:1" pos:end="74:21">#<cpp:directive pos:start="74:2" pos:end="74:6">ifdef</cpp:directive> <name pos:start="74:8" pos:end="74:21">TARGET_NR_open</name></cpp:ifdef>
    <case pos:start="75:5" pos:end="75:24">case <expr pos:start="75:10" pos:end="75:23"><name pos:start="75:10" pos:end="75:23">TARGET_NR_open</name></expr>:</case>
        <if_stmt pos:start="76:9" pos:end="77:24"><if pos:start="76:9" pos:end="77:24">if <condition pos:start="76:12" pos:end="76:42">(<expr pos:start="76:13" pos:end="76:41"><operator pos:start="76:13" pos:end="76:13">!</operator><operator pos:start="76:14" pos:end="76:14">(</operator><name pos:start="76:15" pos:end="76:15">p</name> <operator pos:start="76:17" pos:end="76:17">=</operator> <call pos:start="76:19" pos:end="76:40"><name pos:start="76:19" pos:end="76:34">lock_user_string</name><argument_list pos:start="76:35" pos:end="76:40">(<argument pos:start="76:36" pos:end="76:39"><expr pos:start="76:36" pos:end="76:39"><name pos:start="76:36" pos:end="76:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="76:41" pos:end="76:41">)</operator></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:24"><block_content pos:start="77:13" pos:end="77:24">
            <goto pos:start="77:13" pos:end="77:24">goto <name pos:start="77:18" pos:end="77:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="78:9" pos:end="80:41"><expr pos:start="78:9" pos:end="80:40"><name pos:start="78:9" pos:end="78:11">ret</name> <operator pos:start="78:13" pos:end="78:13">=</operator> <call pos:start="78:15" pos:end="80:40"><name pos:start="78:15" pos:end="78:23">get_errno</name><argument_list pos:start="78:24" pos:end="80:40">(<argument pos:start="78:25" pos:end="80:39"><expr pos:start="78:25" pos:end="80:39"><call pos:start="78:25" pos:end="80:39"><name pos:start="78:25" pos:end="78:33">do_openat</name><argument_list pos:start="78:34" pos:end="80:39">(<argument pos:start="78:35" pos:end="78:41"><expr pos:start="78:35" pos:end="78:41"><name pos:start="78:35" pos:end="78:41">cpu_env</name></expr></argument>, <argument pos:start="78:44" pos:end="78:51"><expr pos:start="78:44" pos:end="78:51"><name pos:start="78:44" pos:end="78:51">AT_FDCWD</name></expr></argument>, <argument pos:start="78:54" pos:end="78:54"><expr pos:start="78:54" pos:end="78:54"><name pos:start="78:54" pos:end="78:54">p</name></expr></argument>,
                                  <argument pos:start="79:35" pos:end="79:79"><expr pos:start="79:35" pos:end="79:79"><call pos:start="79:35" pos:end="79:79"><name pos:start="79:35" pos:end="79:56">target_to_host_bitmask</name><argument_list pos:start="79:57" pos:end="79:79">(<argument pos:start="79:58" pos:end="79:61"><expr pos:start="79:58" pos:end="79:61"><name pos:start="79:58" pos:end="79:61">arg2</name></expr></argument>, <argument pos:start="79:64" pos:end="79:78"><expr pos:start="79:64" pos:end="79:78"><name pos:start="79:64" pos:end="79:78">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument pos:start="80:35" pos:end="80:38"><expr pos:start="80:35" pos:end="80:38"><name pos:start="80:35" pos:end="80:38">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="81:9" pos:end="81:33"><expr pos:start="81:9" pos:end="81:32"><call pos:start="81:9" pos:end="81:32"><name pos:start="81:9" pos:end="81:27">fd_trans_unregister</name><argument_list pos:start="81:28" pos:end="81:32">(<argument pos:start="81:29" pos:end="81:31"><expr pos:start="81:29" pos:end="81:31"><name pos:start="81:29" pos:end="81:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="82:9" pos:end="84:0"><expr pos:start="82:9" pos:end="82:31"><call pos:start="82:9" pos:end="82:31"><name pos:start="82:9" pos:end="82:19">unlock_user</name><argument_list pos:start="82:20" pos:end="82:31">(<argument pos:start="82:21" pos:end="82:21"><expr pos:start="82:21" pos:end="82:21"><name pos:start="82:21" pos:end="82:21">p</name></expr></argument>, <argument pos:start="82:24" pos:end="82:27"><expr pos:start="82:24" pos:end="82:27"><name pos:start="82:24" pos:end="82:27">arg1</name></expr></argument>, <argument pos:start="82:30" pos:end="82:30"><expr pos:start="82:30" pos:end="82:30"><literal type="number" pos:start="82:30" pos:end="82:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>
    <case pos:start="84:5" pos:end="84:26">case <expr pos:start="84:10" pos:end="84:25"><name pos:start="84:10" pos:end="84:25">TARGET_NR_openat</name></expr>:</case>
        <if_stmt pos:start="85:9" pos:end="86:24"><if pos:start="85:9" pos:end="86:24">if <condition pos:start="85:12" pos:end="85:42">(<expr pos:start="85:13" pos:end="85:41"><operator pos:start="85:13" pos:end="85:13">!</operator><operator pos:start="85:14" pos:end="85:14">(</operator><name pos:start="85:15" pos:end="85:15">p</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:40"><name pos:start="85:19" pos:end="85:34">lock_user_string</name><argument_list pos:start="85:35" pos:end="85:40">(<argument pos:start="85:36" pos:end="85:39"><expr pos:start="85:36" pos:end="85:39"><name pos:start="85:36" pos:end="85:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="85:41" pos:end="85:41">)</operator></expr>)</condition><block type="pseudo" pos:start="86:13" pos:end="86:24"><block_content pos:start="86:13" pos:end="86:24">
            <goto pos:start="86:13" pos:end="86:24">goto <name pos:start="86:18" pos:end="86:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="87:9" pos:end="89:41"><expr pos:start="87:9" pos:end="89:40"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="89:40"><name pos:start="87:15" pos:end="87:23">get_errno</name><argument_list pos:start="87:24" pos:end="89:40">(<argument pos:start="87:25" pos:end="89:39"><expr pos:start="87:25" pos:end="89:39"><call pos:start="87:25" pos:end="89:39"><name pos:start="87:25" pos:end="87:33">do_openat</name><argument_list pos:start="87:34" pos:end="89:39">(<argument pos:start="87:35" pos:end="87:41"><expr pos:start="87:35" pos:end="87:41"><name pos:start="87:35" pos:end="87:41">cpu_env</name></expr></argument>, <argument pos:start="87:44" pos:end="87:47"><expr pos:start="87:44" pos:end="87:47"><name pos:start="87:44" pos:end="87:47">arg1</name></expr></argument>, <argument pos:start="87:50" pos:end="87:50"><expr pos:start="87:50" pos:end="87:50"><name pos:start="87:50" pos:end="87:50">p</name></expr></argument>,
                                  <argument pos:start="88:35" pos:end="88:79"><expr pos:start="88:35" pos:end="88:79"><call pos:start="88:35" pos:end="88:79"><name pos:start="88:35" pos:end="88:56">target_to_host_bitmask</name><argument_list pos:start="88:57" pos:end="88:79">(<argument pos:start="88:58" pos:end="88:61"><expr pos:start="88:58" pos:end="88:61"><name pos:start="88:58" pos:end="88:61">arg3</name></expr></argument>, <argument pos:start="88:64" pos:end="88:78"><expr pos:start="88:64" pos:end="88:78"><name pos:start="88:64" pos:end="88:78">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument pos:start="89:35" pos:end="89:38"><expr pos:start="89:35" pos:end="89:38"><name pos:start="89:35" pos:end="89:38">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="90:9" pos:end="90:33"><expr pos:start="90:9" pos:end="90:32"><call pos:start="90:9" pos:end="90:32"><name pos:start="90:9" pos:end="90:27">fd_trans_unregister</name><argument_list pos:start="90:28" pos:end="90:32">(<argument pos:start="90:29" pos:end="90:31"><expr pos:start="90:29" pos:end="90:31"><name pos:start="90:29" pos:end="90:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="91:9" pos:end="93:0"><expr pos:start="91:9" pos:end="91:31"><call pos:start="91:9" pos:end="91:31"><name pos:start="91:9" pos:end="91:19">unlock_user</name><argument_list pos:start="91:20" pos:end="91:31">(<argument pos:start="91:21" pos:end="91:21"><expr pos:start="91:21" pos:end="91:21"><name pos:start="91:21" pos:end="91:21">p</name></expr></argument>, <argument pos:start="91:24" pos:end="91:27"><expr pos:start="91:24" pos:end="91:27"><name pos:start="91:24" pos:end="91:27">arg2</name></expr></argument>, <argument pos:start="91:30" pos:end="91:30"><expr pos:start="91:30" pos:end="91:30"><literal type="number" pos:start="91:30" pos:end="91:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="92:1" pos:end="92:74">#<cpp:directive pos:start="92:2" pos:end="92:3">if</cpp:directive> <expr pos:start="92:5" pos:end="92:74"><call pos:start="92:5" pos:end="92:40"><name pos:start="92:5" pos:end="92:11">defined</name><argument_list pos:start="92:12" pos:end="92:40">(<argument pos:start="92:13" pos:end="92:39"><expr pos:start="92:13" pos:end="92:39"><name pos:start="92:13" pos:end="92:39">TARGET_NR_name_to_handle_at</name></expr></argument>)</argument_list></call> <operator pos:start="92:42" pos:end="92:43">&amp;&amp;</operator> <call pos:start="92:45" pos:end="92:74"><name pos:start="92:45" pos:end="92:51">defined</name><argument_list pos:start="92:52" pos:end="92:74">(<argument pos:start="92:53" pos:end="92:73"><expr pos:start="92:53" pos:end="92:73"><name pos:start="92:53" pos:end="92:73">CONFIG_OPEN_BY_HANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="93:5" pos:end="93:37">case <expr pos:start="93:10" pos:end="93:36"><name pos:start="93:10" pos:end="93:36">TARGET_NR_name_to_handle_at</name></expr>:</case>
        <expr_stmt pos:start="94:9" pos:end="97:0"><expr pos:start="94:9" pos:end="94:64"><name pos:start="94:9" pos:end="94:11">ret</name> <operator pos:start="94:13" pos:end="94:13">=</operator> <call pos:start="94:15" pos:end="94:64"><name pos:start="94:15" pos:end="94:34">do_name_to_handle_at</name><argument_list pos:start="94:35" pos:end="94:64">(<argument pos:start="94:36" pos:end="94:39"><expr pos:start="94:36" pos:end="94:39"><name pos:start="94:36" pos:end="94:39">arg1</name></expr></argument>, <argument pos:start="94:42" pos:end="94:45"><expr pos:start="94:42" pos:end="94:45"><name pos:start="94:42" pos:end="94:45">arg2</name></expr></argument>, <argument pos:start="94:48" pos:end="94:51"><expr pos:start="94:48" pos:end="94:51"><name pos:start="94:48" pos:end="94:51">arg3</name></expr></argument>, <argument pos:start="94:54" pos:end="94:57"><expr pos:start="94:54" pos:end="94:57"><name pos:start="94:54" pos:end="94:57">arg4</name></expr></argument>, <argument pos:start="94:60" pos:end="94:63"><expr pos:start="94:60" pos:end="94:63"><name pos:start="94:60" pos:end="94:63">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="96:1" pos:end="96:74">#<cpp:directive pos:start="96:2" pos:end="96:3">if</cpp:directive> <expr pos:start="96:5" pos:end="96:74"><call pos:start="96:5" pos:end="96:40"><name pos:start="96:5" pos:end="96:11">defined</name><argument_list pos:start="96:12" pos:end="96:40">(<argument pos:start="96:13" pos:end="96:39"><expr pos:start="96:13" pos:end="96:39"><name pos:start="96:13" pos:end="96:39">TARGET_NR_open_by_handle_at</name></expr></argument>)</argument_list></call> <operator pos:start="96:42" pos:end="96:43">&amp;&amp;</operator> <call pos:start="96:45" pos:end="96:74"><name pos:start="96:45" pos:end="96:51">defined</name><argument_list pos:start="96:52" pos:end="96:74">(<argument pos:start="96:53" pos:end="96:73"><expr pos:start="96:53" pos:end="96:73"><name pos:start="96:53" pos:end="96:73">CONFIG_OPEN_BY_HANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="97:5" pos:end="97:37">case <expr pos:start="97:10" pos:end="97:36"><name pos:start="97:10" pos:end="97:36">TARGET_NR_open_by_handle_at</name></expr>:</case>
        <expr_stmt pos:start="98:9" pos:end="98:53"><expr pos:start="98:9" pos:end="98:52"><name pos:start="98:9" pos:end="98:11">ret</name> <operator pos:start="98:13" pos:end="98:13">=</operator> <call pos:start="98:15" pos:end="98:52"><name pos:start="98:15" pos:end="98:34">do_open_by_handle_at</name><argument_list pos:start="98:35" pos:end="98:52">(<argument pos:start="98:36" pos:end="98:39"><expr pos:start="98:36" pos:end="98:39"><name pos:start="98:36" pos:end="98:39">arg1</name></expr></argument>, <argument pos:start="98:42" pos:end="98:45"><expr pos:start="98:42" pos:end="98:45"><name pos:start="98:42" pos:end="98:45">arg2</name></expr></argument>, <argument pos:start="98:48" pos:end="98:51"><expr pos:start="98:48" pos:end="98:51"><name pos:start="98:48" pos:end="98:51">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="99:9" pos:end="101:0"><expr pos:start="99:9" pos:end="99:32"><call pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:27">fd_trans_unregister</name><argument_list pos:start="99:28" pos:end="99:32">(<argument pos:start="99:29" pos:end="99:31"><expr pos:start="99:29" pos:end="99:31"><name pos:start="99:29" pos:end="99:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="100:1" pos:end="100:6">#<cpp:directive pos:start="100:2" pos:end="100:6">endif</cpp:directive></cpp:endif>
    <case pos:start="101:5" pos:end="101:25">case <expr pos:start="101:10" pos:end="101:24"><name pos:start="101:10" pos:end="101:24">TARGET_NR_close</name></expr>:</case>
        <expr_stmt pos:start="102:9" pos:end="102:34"><expr pos:start="102:9" pos:end="102:33"><call pos:start="102:9" pos:end="102:33"><name pos:start="102:9" pos:end="102:27">fd_trans_unregister</name><argument_list pos:start="102:28" pos:end="102:33">(<argument pos:start="102:29" pos:end="102:32"><expr pos:start="102:29" pos:end="102:32"><name pos:start="102:29" pos:end="102:32">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="103:9" pos:end="103:37"><expr pos:start="103:9" pos:end="103:36"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:36"><name pos:start="103:15" pos:end="103:23">get_errno</name><argument_list pos:start="103:24" pos:end="103:36">(<argument pos:start="103:25" pos:end="103:35"><expr pos:start="103:25" pos:end="103:35"><call pos:start="103:25" pos:end="103:35"><name pos:start="103:25" pos:end="103:29">close</name><argument_list pos:start="103:30" pos:end="103:35">(<argument pos:start="103:31" pos:end="103:34"><expr pos:start="103:31" pos:end="103:34"><name pos:start="103:31" pos:end="103:34">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="104:5" pos:end="104:23">case <expr pos:start="104:10" pos:end="104:22"><name pos:start="104:10" pos:end="104:22">TARGET_NR_brk</name></expr>:</case>
        <expr_stmt pos:start="105:9" pos:end="107:0"><expr pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:26"><name pos:start="105:15" pos:end="105:20">do_brk</name><argument_list pos:start="105:21" pos:end="105:26">(<argument pos:start="105:22" pos:end="105:25"><expr pos:start="105:22" pos:end="105:25"><name pos:start="105:22" pos:end="105:25">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="106:1" pos:end="106:21">#<cpp:directive pos:start="106:2" pos:end="106:6">ifdef</cpp:directive> <name pos:start="106:8" pos:end="106:21">TARGET_NR_fork</name></cpp:ifdef>
    <case pos:start="107:5" pos:end="107:24">case <expr pos:start="107:10" pos:end="107:23"><name pos:start="107:10" pos:end="107:23">TARGET_NR_fork</name></expr>:</case>
        <expr_stmt pos:start="108:9" pos:end="111:0"><expr pos:start="108:9" pos:end="108:62"><name pos:start="108:9" pos:end="108:11">ret</name> <operator pos:start="108:13" pos:end="108:13">=</operator> <call pos:start="108:15" pos:end="108:62"><name pos:start="108:15" pos:end="108:23">get_errno</name><argument_list pos:start="108:24" pos:end="108:62">(<argument pos:start="108:25" pos:end="108:61"><expr pos:start="108:25" pos:end="108:61"><call pos:start="108:25" pos:end="108:61"><name pos:start="108:25" pos:end="108:31">do_fork</name><argument_list pos:start="108:32" pos:end="108:61">(<argument pos:start="108:33" pos:end="108:39"><expr pos:start="108:33" pos:end="108:39"><name pos:start="108:33" pos:end="108:39">cpu_env</name></expr></argument>, <argument pos:start="108:42" pos:end="108:48"><expr pos:start="108:42" pos:end="108:48"><name pos:start="108:42" pos:end="108:48">SIGCHLD</name></expr></argument>, <argument pos:start="108:51" pos:end="108:51"><expr pos:start="108:51" pos:end="108:51"><literal type="number" pos:start="108:51" pos:end="108:51">0</literal></expr></argument>, <argument pos:start="108:54" pos:end="108:54"><expr pos:start="108:54" pos:end="108:54"><literal type="number" pos:start="108:54" pos:end="108:54">0</literal></expr></argument>, <argument pos:start="108:57" pos:end="108:57"><expr pos:start="108:57" pos:end="108:57"><literal type="number" pos:start="108:57" pos:end="108:57">0</literal></expr></argument>, <argument pos:start="108:60" pos:end="108:60"><expr pos:start="108:60" pos:end="108:60"><literal type="number" pos:start="108:60" pos:end="108:60">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="110:1" pos:end="110:24">#<cpp:directive pos:start="110:2" pos:end="110:6">ifdef</cpp:directive> <name pos:start="110:8" pos:end="110:24">TARGET_NR_waitpid</name></cpp:ifdef>
    <case pos:start="111:5" pos:end="111:27">case <expr pos:start="111:10" pos:end="111:26"><name pos:start="111:10" pos:end="111:26">TARGET_NR_waitpid</name></expr>:</case>
        <block pos:start="112:9" pos:end="3541:14">{<block_content pos:start="113:13" pos:end="3541:14">
            <decl_stmt pos:start="113:13" pos:end="113:23"><decl pos:start="113:13" pos:end="113:22"><type pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">int</name></type> <name pos:start="113:17" pos:end="113:22">status</name></decl>;</decl_stmt>
            <expr_stmt pos:start="114:13" pos:end="114:64"><expr pos:start="114:13" pos:end="114:63"><name pos:start="114:13" pos:end="114:15">ret</name> <operator pos:start="114:17" pos:end="114:17">=</operator> <call pos:start="114:19" pos:end="114:63"><name pos:start="114:19" pos:end="114:27">get_errno</name><argument_list pos:start="114:28" pos:end="114:63">(<argument pos:start="114:29" pos:end="114:62"><expr pos:start="114:29" pos:end="114:62"><call pos:start="114:29" pos:end="114:62"><name pos:start="114:29" pos:end="114:38">safe_wait4</name><argument_list pos:start="114:39" pos:end="114:62">(<argument pos:start="114:40" pos:end="114:43"><expr pos:start="114:40" pos:end="114:43"><name pos:start="114:40" pos:end="114:43">arg1</name></expr></argument>, <argument pos:start="114:46" pos:end="114:52"><expr pos:start="114:46" pos:end="114:52"><operator pos:start="114:46" pos:end="114:46">&amp;</operator><name pos:start="114:47" pos:end="114:52">status</name></expr></argument>, <argument pos:start="114:55" pos:end="114:58"><expr pos:start="114:55" pos:end="114:58"><name pos:start="114:55" pos:end="114:58">arg3</name></expr></argument>, <argument pos:start="114:61" pos:end="114:61"><expr pos:start="114:61" pos:end="114:61"><literal type="number" pos:start="114:61" pos:end="114:61">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="115:13" pos:end="120:0"><if pos:start="115:13" pos:end="120:0">if <condition pos:start="115:16" pos:end="116:73">(<expr pos:start="115:17" pos:end="116:72"><operator pos:start="115:17" pos:end="115:17">!</operator><call pos:start="115:18" pos:end="115:30"><name pos:start="115:18" pos:end="115:25">is_error</name><argument_list pos:start="115:26" pos:end="115:30">(<argument pos:start="115:27" pos:end="115:29"><expr pos:start="115:27" pos:end="115:29"><name pos:start="115:27" pos:end="115:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="115:32" pos:end="115:33">&amp;&amp;</operator> <name pos:start="115:35" pos:end="115:38">arg2</name> <operator pos:start="115:40" pos:end="115:41">&amp;&amp;</operator> <name pos:start="115:43" pos:end="115:45">ret</name>
                <operator pos:start="116:17" pos:end="116:18">&amp;&amp;</operator> <call pos:start="116:20" pos:end="116:72"><name pos:start="116:20" pos:end="116:31">put_user_s32</name><argument_list pos:start="116:32" pos:end="116:72">(<argument pos:start="116:33" pos:end="116:65"><expr pos:start="116:33" pos:end="116:65"><call pos:start="116:33" pos:end="116:65"><name pos:start="116:33" pos:end="116:57">host_to_target_waitstatus</name><argument_list pos:start="116:58" pos:end="116:65">(<argument pos:start="116:59" pos:end="116:64"><expr pos:start="116:59" pos:end="116:64"><name pos:start="116:59" pos:end="116:64">status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="116:68" pos:end="116:71"><expr pos:start="116:68" pos:end="116:71"><name pos:start="116:68" pos:end="116:71">arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="120:0"><block_content pos:start="117:17" pos:end="120:0">
                <goto pos:start="117:17" pos:end="120:0">goto <name pos:start="117:22" pos:end="117:27">efault</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif pos:start="118:1" pos:end="118:6">#<cpp:directive pos:start="118:2" pos:end="118:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="119:1" pos:end="119:23">#<cpp:directive pos:start="119:2" pos:end="119:6">ifdef</cpp:directive> <name pos:start="119:8" pos:end="119:23">TARGET_NR_waitid</name></cpp:ifdef>
    <case pos:start="120:5" pos:end="120:26">case <expr pos:start="120:10" pos:end="120:25"><name pos:start="120:10" pos:end="120:25">TARGET_NR_waitid</name></expr>:</case>
        <block pos:start="121:9" pos:end="3541:14">{<block_content pos:start="122:13" pos:end="3541:14">
            <decl_stmt pos:start="122:13" pos:end="122:27"><decl pos:start="122:13" pos:end="122:26"><type pos:start="122:13" pos:end="122:21"><name pos:start="122:13" pos:end="122:21">siginfo_t</name></type> <name pos:start="122:23" pos:end="122:26">info</name></decl>;</decl_stmt>
            <expr_stmt pos:start="123:13" pos:end="123:28"><expr pos:start="123:13" pos:end="123:27"><name pos:start="123:13" pos:end="123:23"><name pos:start="123:13" pos:end="123:16">info</name><operator pos:start="123:17" pos:end="123:17">.</operator><name pos:start="123:18" pos:end="123:23">si_pid</name></name> <operator pos:start="123:25" pos:end="123:25">=</operator> <literal type="number" pos:start="123:27" pos:end="123:27">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="124:13" pos:end="124:72"><expr pos:start="124:13" pos:end="124:71"><name pos:start="124:13" pos:end="124:15">ret</name> <operator pos:start="124:17" pos:end="124:17">=</operator> <call pos:start="124:19" pos:end="124:71"><name pos:start="124:19" pos:end="124:27">get_errno</name><argument_list pos:start="124:28" pos:end="124:71">(<argument pos:start="124:29" pos:end="124:70"><expr pos:start="124:29" pos:end="124:70"><call pos:start="124:29" pos:end="124:70"><name pos:start="124:29" pos:end="124:39">safe_waitid</name><argument_list pos:start="124:40" pos:end="124:70">(<argument pos:start="124:41" pos:end="124:44"><expr pos:start="124:41" pos:end="124:44"><name pos:start="124:41" pos:end="124:44">arg1</name></expr></argument>, <argument pos:start="124:47" pos:end="124:50"><expr pos:start="124:47" pos:end="124:50"><name pos:start="124:47" pos:end="124:50">arg2</name></expr></argument>, <argument pos:start="124:53" pos:end="124:57"><expr pos:start="124:53" pos:end="124:57"><operator pos:start="124:53" pos:end="124:53">&amp;</operator><name pos:start="124:54" pos:end="124:57">info</name></expr></argument>, <argument pos:start="124:60" pos:end="124:63"><expr pos:start="124:60" pos:end="124:63"><name pos:start="124:60" pos:end="124:63">arg4</name></expr></argument>, <argument pos:start="124:66" pos:end="124:69"><expr pos:start="124:66" pos:end="124:69"><name pos:start="124:66" pos:end="124:69">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="125:13" pos:end="3541:14"><if pos:start="125:13" pos:end="3541:14">if <condition pos:start="125:16" pos:end="125:59">(<expr pos:start="125:17" pos:end="125:58"><operator pos:start="125:17" pos:end="125:17">!</operator><call pos:start="125:18" pos:end="125:30"><name pos:start="125:18" pos:end="125:25">is_error</name><argument_list pos:start="125:26" pos:end="125:30">(<argument pos:start="125:27" pos:end="125:29"><expr pos:start="125:27" pos:end="125:29"><name pos:start="125:27" pos:end="125:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="125:32" pos:end="125:33">&amp;&amp;</operator> <name pos:start="125:35" pos:end="125:38">arg3</name> <operator pos:start="125:40" pos:end="125:41">&amp;&amp;</operator> <name pos:start="125:43" pos:end="125:53"><name pos:start="125:43" pos:end="125:46">info</name><operator pos:start="125:47" pos:end="125:47">.</operator><name pos:start="125:48" pos:end="125:53">si_pid</name></name> <operator pos:start="125:55" pos:end="125:56">!=</operator> <literal type="number" pos:start="125:58" pos:end="125:58">0</literal></expr>)</condition> <block pos:start="125:61" pos:end="3541:14">{<block_content pos:start="126:17" pos:end="3541:14">
                <if_stmt pos:start="126:17" pos:end="127:32"><if pos:start="126:17" pos:end="127:32">if <condition pos:start="126:20" pos:end="126:86">(<expr pos:start="126:21" pos:end="126:85"><operator pos:start="126:21" pos:end="126:21">!</operator><operator pos:start="126:22" pos:end="126:22">(</operator><name pos:start="126:23" pos:end="126:23">p</name> <operator pos:start="126:25" pos:end="126:25">=</operator> <call pos:start="126:27" pos:end="126:84"><name pos:start="126:27" pos:end="126:35">lock_user</name><argument_list pos:start="126:36" pos:end="126:84">(<argument pos:start="126:37" pos:end="126:48"><expr pos:start="126:37" pos:end="126:48"><name pos:start="126:37" pos:end="126:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="126:51" pos:end="126:54"><expr pos:start="126:51" pos:end="126:54"><name pos:start="126:51" pos:end="126:54">arg3</name></expr></argument>, <argument pos:start="126:57" pos:end="126:80"><expr pos:start="126:57" pos:end="126:80"><sizeof pos:start="126:57" pos:end="126:80">sizeof<argument_list pos:start="126:63" pos:end="126:80">(<argument pos:start="126:64" pos:end="126:79"><expr pos:start="126:64" pos:end="126:79"><name pos:start="126:64" pos:end="126:79">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="126:83" pos:end="126:83"><expr pos:start="126:83" pos:end="126:83"><literal type="number" pos:start="126:83" pos:end="126:83">0</literal></expr></argument>)</argument_list></call><operator pos:start="126:85" pos:end="126:85">)</operator></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="127:32"><block_content pos:start="127:21" pos:end="127:32">
                    <goto pos:start="127:21" pos:end="127:32">goto <name pos:start="127:26" pos:end="127:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="128:17" pos:end="128:49"><expr pos:start="128:17" pos:end="128:48"><call pos:start="128:17" pos:end="128:48"><name pos:start="128:17" pos:end="128:38">host_to_target_siginfo</name><argument_list pos:start="128:39" pos:end="128:48">(<argument pos:start="128:40" pos:end="128:40"><expr pos:start="128:40" pos:end="128:40"><name pos:start="128:40" pos:end="128:40">p</name></expr></argument>, <argument pos:start="128:43" pos:end="128:47"><expr pos:start="128:43" pos:end="128:47"><operator pos:start="128:43" pos:end="128:43">&amp;</operator><name pos:start="128:44" pos:end="128:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="129:17" pos:end="132:0"><expr pos:start="129:17" pos:end="129:62"><call pos:start="129:17" pos:end="129:62"><name pos:start="129:17" pos:end="129:27">unlock_user</name><argument_list pos:start="129:28" pos:end="129:62">(<argument pos:start="129:29" pos:end="129:29"><expr pos:start="129:29" pos:end="129:29"><name pos:start="129:29" pos:end="129:29">p</name></expr></argument>, <argument pos:start="129:32" pos:end="129:35"><expr pos:start="129:32" pos:end="129:35"><name pos:start="129:32" pos:end="129:35">arg3</name></expr></argument>, <argument pos:start="129:38" pos:end="129:61"><expr pos:start="129:38" pos:end="129:61"><sizeof pos:start="129:38" pos:end="129:61">sizeof<argument_list pos:start="129:44" pos:end="129:61">(<argument pos:start="129:45" pos:end="129:60"><expr pos:start="129:45" pos:end="129:60"><name pos:start="129:45" pos:end="129:60">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="130:1" pos:end="130:6">#<cpp:directive pos:start="130:2" pos:end="130:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="131:1" pos:end="131:22">#<cpp:directive pos:start="131:2" pos:end="131:6">ifdef</cpp:directive> <name pos:start="131:8" pos:end="131:22">TARGET_NR_creat</name></cpp:ifdef> <comment type="block" pos:start="131:24" pos:end="131:41">/* not on alpha */</comment>
    <case pos:start="132:5" pos:end="132:25">case <expr pos:start="132:10" pos:end="132:24"><name pos:start="132:10" pos:end="132:24">TARGET_NR_creat</name></expr>:</case>
        <if_stmt pos:start="133:9" pos:end="134:24"><if pos:start="133:9" pos:end="134:24">if <condition pos:start="133:12" pos:end="133:42">(<expr pos:start="133:13" pos:end="133:41"><operator pos:start="133:13" pos:end="133:13">!</operator><operator pos:start="133:14" pos:end="133:14">(</operator><name pos:start="133:15" pos:end="133:15">p</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <call pos:start="133:19" pos:end="133:40"><name pos:start="133:19" pos:end="133:34">lock_user_string</name><argument_list pos:start="133:35" pos:end="133:40">(<argument pos:start="133:36" pos:end="133:39"><expr pos:start="133:36" pos:end="133:39"><name pos:start="133:36" pos:end="133:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="133:41" pos:end="133:41">)</operator></expr>)</condition><block type="pseudo" pos:start="134:13" pos:end="134:24"><block_content pos:start="134:13" pos:end="134:24">
            <goto pos:start="134:13" pos:end="134:24">goto <name pos:start="134:18" pos:end="134:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="135:9" pos:end="135:40"><expr pos:start="135:9" pos:end="135:39"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="135:39"><name pos:start="135:15" pos:end="135:23">get_errno</name><argument_list pos:start="135:24" pos:end="135:39">(<argument pos:start="135:25" pos:end="135:38"><expr pos:start="135:25" pos:end="135:38"><call pos:start="135:25" pos:end="135:38"><name pos:start="135:25" pos:end="135:29">creat</name><argument_list pos:start="135:30" pos:end="135:38">(<argument pos:start="135:31" pos:end="135:31"><expr pos:start="135:31" pos:end="135:31"><name pos:start="135:31" pos:end="135:31">p</name></expr></argument>, <argument pos:start="135:34" pos:end="135:37"><expr pos:start="135:34" pos:end="135:37"><name pos:start="135:34" pos:end="135:37">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="136:9" pos:end="136:33"><expr pos:start="136:9" pos:end="136:32"><call pos:start="136:9" pos:end="136:32"><name pos:start="136:9" pos:end="136:27">fd_trans_unregister</name><argument_list pos:start="136:28" pos:end="136:32">(<argument pos:start="136:29" pos:end="136:31"><expr pos:start="136:29" pos:end="136:31"><name pos:start="136:29" pos:end="136:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="137:9" pos:end="140:0"><expr pos:start="137:9" pos:end="137:31"><call pos:start="137:9" pos:end="137:31"><name pos:start="137:9" pos:end="137:19">unlock_user</name><argument_list pos:start="137:20" pos:end="137:31">(<argument pos:start="137:21" pos:end="137:21"><expr pos:start="137:21" pos:end="137:21"><name pos:start="137:21" pos:end="137:21">p</name></expr></argument>, <argument pos:start="137:24" pos:end="137:27"><expr pos:start="137:24" pos:end="137:27"><name pos:start="137:24" pos:end="137:27">arg1</name></expr></argument>, <argument pos:start="137:30" pos:end="137:30"><expr pos:start="137:30" pos:end="137:30"><literal type="number" pos:start="137:30" pos:end="137:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="138:1" pos:end="138:6">#<cpp:directive pos:start="138:2" pos:end="138:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="139:1" pos:end="139:21">#<cpp:directive pos:start="139:2" pos:end="139:6">ifdef</cpp:directive> <name pos:start="139:8" pos:end="139:21">TARGET_NR_link</name></cpp:ifdef>
    <case pos:start="140:5" pos:end="140:24">case <expr pos:start="140:10" pos:end="140:23"><name pos:start="140:10" pos:end="140:23">TARGET_NR_link</name></expr>:</case>
        <block pos:start="141:9" pos:end="3541:14">{<block_content pos:start="142:13" pos:end="3541:14">
            <decl_stmt pos:start="142:13" pos:end="142:22"><decl pos:start="142:13" pos:end="142:21"><type pos:start="142:13" pos:end="142:18"><name pos:start="142:13" pos:end="142:16">void</name> <modifier pos:start="142:18" pos:end="142:18">*</modifier></type> <name pos:start="142:20" pos:end="142:21">p2</name></decl>;</decl_stmt>
            <expr_stmt pos:start="143:13" pos:end="143:39"><expr pos:start="143:13" pos:end="143:38"><name pos:start="143:13" pos:end="143:13">p</name> <operator pos:start="143:15" pos:end="143:15">=</operator> <call pos:start="143:17" pos:end="143:38"><name pos:start="143:17" pos:end="143:32">lock_user_string</name><argument_list pos:start="143:33" pos:end="143:38">(<argument pos:start="143:34" pos:end="143:37"><expr pos:start="143:34" pos:end="143:37"><name pos:start="143:34" pos:end="143:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="144:13" pos:end="144:40"><expr pos:start="144:13" pos:end="144:39"><name pos:start="144:13" pos:end="144:14">p2</name> <operator pos:start="144:16" pos:end="144:16">=</operator> <call pos:start="144:18" pos:end="144:39"><name pos:start="144:18" pos:end="144:33">lock_user_string</name><argument_list pos:start="144:34" pos:end="144:39">(<argument pos:start="144:35" pos:end="144:38"><expr pos:start="144:35" pos:end="144:38"><name pos:start="144:35" pos:end="144:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="145:13" pos:end="148:45"><if pos:start="145:13" pos:end="146:37">if <condition pos:start="145:16" pos:end="145:26">(<expr pos:start="145:17" pos:end="145:25"><operator pos:start="145:17" pos:end="145:17">!</operator><name pos:start="145:18" pos:end="145:18">p</name> <operator pos:start="145:20" pos:end="145:21">||</operator> <operator pos:start="145:23" pos:end="145:23">!</operator><name pos:start="145:24" pos:end="145:25">p2</name></expr>)</condition><block type="pseudo" pos:start="146:17" pos:end="146:37"><block_content pos:start="146:17" pos:end="146:37">
                <expr_stmt pos:start="146:17" pos:end="146:37"><expr pos:start="146:17" pos:end="146:36"><name pos:start="146:17" pos:end="146:19">ret</name> <operator pos:start="146:21" pos:end="146:21">=</operator> <operator pos:start="146:23" pos:end="146:23">-</operator><name pos:start="146:24" pos:end="146:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="147:13" pos:end="148:45">else<block type="pseudo" pos:start="148:17" pos:end="148:45"><block_content pos:start="148:17" pos:end="148:45">
                <expr_stmt pos:start="148:17" pos:end="148:45"><expr pos:start="148:17" pos:end="148:44"><name pos:start="148:17" pos:end="148:19">ret</name> <operator pos:start="148:21" pos:end="148:21">=</operator> <call pos:start="148:23" pos:end="148:44"><name pos:start="148:23" pos:end="148:31">get_errno</name><argument_list pos:start="148:32" pos:end="148:44">(<argument pos:start="148:33" pos:end="148:43"><expr pos:start="148:33" pos:end="148:43"><call pos:start="148:33" pos:end="148:43"><name pos:start="148:33" pos:end="148:36">link</name><argument_list pos:start="148:37" pos:end="148:43">(<argument pos:start="148:38" pos:end="148:38"><expr pos:start="148:38" pos:end="148:38"><name pos:start="148:38" pos:end="148:38">p</name></expr></argument>, <argument pos:start="148:41" pos:end="148:42"><expr pos:start="148:41" pos:end="148:42"><name pos:start="148:41" pos:end="148:42">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="149:13" pos:end="149:37"><expr pos:start="149:13" pos:end="149:36"><call pos:start="149:13" pos:end="149:36"><name pos:start="149:13" pos:end="149:23">unlock_user</name><argument_list pos:start="149:24" pos:end="149:36">(<argument pos:start="149:25" pos:end="149:26"><expr pos:start="149:25" pos:end="149:26"><name pos:start="149:25" pos:end="149:26">p2</name></expr></argument>, <argument pos:start="149:29" pos:end="149:32"><expr pos:start="149:29" pos:end="149:32"><name pos:start="149:29" pos:end="149:32">arg2</name></expr></argument>, <argument pos:start="149:35" pos:end="149:35"><expr pos:start="149:35" pos:end="149:35"><literal type="number" pos:start="149:35" pos:end="149:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="150:13" pos:end="153:0"><expr pos:start="150:13" pos:end="150:35"><call pos:start="150:13" pos:end="150:35"><name pos:start="150:13" pos:end="150:23">unlock_user</name><argument_list pos:start="150:24" pos:end="150:35">(<argument pos:start="150:25" pos:end="150:25"><expr pos:start="150:25" pos:end="150:25"><name pos:start="150:25" pos:end="150:25">p</name></expr></argument>, <argument pos:start="150:28" pos:end="150:31"><expr pos:start="150:28" pos:end="150:31"><name pos:start="150:28" pos:end="150:31">arg1</name></expr></argument>, <argument pos:start="150:34" pos:end="150:34"><expr pos:start="150:34" pos:end="150:34"><literal type="number" pos:start="150:34" pos:end="150:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="151:1" pos:end="151:6">#<cpp:directive pos:start="151:2" pos:end="151:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="152:1" pos:end="152:29">#<cpp:directive pos:start="152:2" pos:end="152:3">if</cpp:directive> <expr pos:start="152:5" pos:end="152:29"><call pos:start="152:5" pos:end="152:29"><name pos:start="152:5" pos:end="152:11">defined</name><argument_list pos:start="152:12" pos:end="152:29">(<argument pos:start="152:13" pos:end="152:28"><expr pos:start="152:13" pos:end="152:28"><name pos:start="152:13" pos:end="152:28">TARGET_NR_linkat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="153:5" pos:end="153:26">case <expr pos:start="153:10" pos:end="153:25"><name pos:start="153:10" pos:end="153:25">TARGET_NR_linkat</name></expr>:</case>
        <block pos:start="154:9" pos:end="3541:14">{<block_content pos:start="155:13" pos:end="3541:14">
            <decl_stmt pos:start="155:13" pos:end="155:29"><decl pos:start="155:13" pos:end="155:28"><type pos:start="155:13" pos:end="155:18"><name pos:start="155:13" pos:end="155:16">void</name> <modifier pos:start="155:18" pos:end="155:18">*</modifier></type> <name pos:start="155:20" pos:end="155:21">p2</name> <init pos:start="155:23" pos:end="155:28">= <expr pos:start="155:25" pos:end="155:28"><name pos:start="155:25" pos:end="155:28">NULL</name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="156:13" pos:end="157:28"><if pos:start="156:13" pos:end="157:28">if <condition pos:start="156:16" pos:end="156:31">(<expr pos:start="156:17" pos:end="156:30"><operator pos:start="156:17" pos:end="156:17">!</operator><name pos:start="156:18" pos:end="156:21">arg2</name> <operator pos:start="156:23" pos:end="156:24">||</operator> <operator pos:start="156:26" pos:end="156:26">!</operator><name pos:start="156:27" pos:end="156:30">arg4</name></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:28"><block_content pos:start="157:17" pos:end="157:28">
                <goto pos:start="157:17" pos:end="157:28">goto <name pos:start="157:22" pos:end="157:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="158:13" pos:end="158:40"><expr pos:start="158:13" pos:end="158:39"><name pos:start="158:13" pos:end="158:13">p</name>  <operator pos:start="158:16" pos:end="158:16">=</operator> <call pos:start="158:18" pos:end="158:39"><name pos:start="158:18" pos:end="158:33">lock_user_string</name><argument_list pos:start="158:34" pos:end="158:39">(<argument pos:start="158:35" pos:end="158:38"><expr pos:start="158:35" pos:end="158:38"><name pos:start="158:35" pos:end="158:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="159:13" pos:end="159:40"><expr pos:start="159:13" pos:end="159:39"><name pos:start="159:13" pos:end="159:14">p2</name> <operator pos:start="159:16" pos:end="159:16">=</operator> <call pos:start="159:18" pos:end="159:39"><name pos:start="159:18" pos:end="159:33">lock_user_string</name><argument_list pos:start="159:34" pos:end="159:39">(<argument pos:start="159:35" pos:end="159:38"><expr pos:start="159:35" pos:end="159:38"><name pos:start="159:35" pos:end="159:38">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="160:13" pos:end="163:65"><if pos:start="160:13" pos:end="161:37">if <condition pos:start="160:16" pos:end="160:26">(<expr pos:start="160:17" pos:end="160:25"><operator pos:start="160:17" pos:end="160:17">!</operator><name pos:start="160:18" pos:end="160:18">p</name> <operator pos:start="160:20" pos:end="160:21">||</operator> <operator pos:start="160:23" pos:end="160:23">!</operator><name pos:start="160:24" pos:end="160:25">p2</name></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:37"><block_content pos:start="161:17" pos:end="161:37">
                <expr_stmt pos:start="161:17" pos:end="161:37"><expr pos:start="161:17" pos:end="161:36"><name pos:start="161:17" pos:end="161:19">ret</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <operator pos:start="161:23" pos:end="161:23">-</operator><name pos:start="161:24" pos:end="161:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="162:13" pos:end="163:65">else<block type="pseudo" pos:start="163:17" pos:end="163:65"><block_content pos:start="163:17" pos:end="163:65">
                <expr_stmt pos:start="163:17" pos:end="163:65"><expr pos:start="163:17" pos:end="163:64"><name pos:start="163:17" pos:end="163:19">ret</name> <operator pos:start="163:21" pos:end="163:21">=</operator> <call pos:start="163:23" pos:end="163:64"><name pos:start="163:23" pos:end="163:31">get_errno</name><argument_list pos:start="163:32" pos:end="163:64">(<argument pos:start="163:33" pos:end="163:63"><expr pos:start="163:33" pos:end="163:63"><call pos:start="163:33" pos:end="163:63"><name pos:start="163:33" pos:end="163:38">linkat</name><argument_list pos:start="163:39" pos:end="163:63">(<argument pos:start="163:40" pos:end="163:43"><expr pos:start="163:40" pos:end="163:43"><name pos:start="163:40" pos:end="163:43">arg1</name></expr></argument>, <argument pos:start="163:46" pos:end="163:46"><expr pos:start="163:46" pos:end="163:46"><name pos:start="163:46" pos:end="163:46">p</name></expr></argument>, <argument pos:start="163:49" pos:end="163:52"><expr pos:start="163:49" pos:end="163:52"><name pos:start="163:49" pos:end="163:52">arg3</name></expr></argument>, <argument pos:start="163:55" pos:end="163:56"><expr pos:start="163:55" pos:end="163:56"><name pos:start="163:55" pos:end="163:56">p2</name></expr></argument>, <argument pos:start="163:59" pos:end="163:62"><expr pos:start="163:59" pos:end="163:62"><name pos:start="163:59" pos:end="163:62">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="164:13" pos:end="164:36"><expr pos:start="164:13" pos:end="164:35"><call pos:start="164:13" pos:end="164:35"><name pos:start="164:13" pos:end="164:23">unlock_user</name><argument_list pos:start="164:24" pos:end="164:35">(<argument pos:start="164:25" pos:end="164:25"><expr pos:start="164:25" pos:end="164:25"><name pos:start="164:25" pos:end="164:25">p</name></expr></argument>, <argument pos:start="164:28" pos:end="164:31"><expr pos:start="164:28" pos:end="164:31"><name pos:start="164:28" pos:end="164:31">arg2</name></expr></argument>, <argument pos:start="164:34" pos:end="164:34"><expr pos:start="164:34" pos:end="164:34"><literal type="number" pos:start="164:34" pos:end="164:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="165:13" pos:end="168:0"><expr pos:start="165:13" pos:end="165:36"><call pos:start="165:13" pos:end="165:36"><name pos:start="165:13" pos:end="165:23">unlock_user</name><argument_list pos:start="165:24" pos:end="165:36">(<argument pos:start="165:25" pos:end="165:26"><expr pos:start="165:25" pos:end="165:26"><name pos:start="165:25" pos:end="165:26">p2</name></expr></argument>, <argument pos:start="165:29" pos:end="165:32"><expr pos:start="165:29" pos:end="165:32"><name pos:start="165:29" pos:end="165:32">arg4</name></expr></argument>, <argument pos:start="165:35" pos:end="165:35"><expr pos:start="165:35" pos:end="165:35"><literal type="number" pos:start="165:35" pos:end="165:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="166:1" pos:end="166:6">#<cpp:directive pos:start="166:2" pos:end="166:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="167:1" pos:end="167:23">#<cpp:directive pos:start="167:2" pos:end="167:6">ifdef</cpp:directive> <name pos:start="167:8" pos:end="167:23">TARGET_NR_unlink</name></cpp:ifdef>
    <case pos:start="168:5" pos:end="168:26">case <expr pos:start="168:10" pos:end="168:25"><name pos:start="168:10" pos:end="168:25">TARGET_NR_unlink</name></expr>:</case>
        <if_stmt pos:start="169:9" pos:end="170:24"><if pos:start="169:9" pos:end="170:24">if <condition pos:start="169:12" pos:end="169:42">(<expr pos:start="169:13" pos:end="169:41"><operator pos:start="169:13" pos:end="169:13">!</operator><operator pos:start="169:14" pos:end="169:14">(</operator><name pos:start="169:15" pos:end="169:15">p</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="169:40"><name pos:start="169:19" pos:end="169:34">lock_user_string</name><argument_list pos:start="169:35" pos:end="169:40">(<argument pos:start="169:36" pos:end="169:39"><expr pos:start="169:36" pos:end="169:39"><name pos:start="169:36" pos:end="169:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="169:41" pos:end="169:41">)</operator></expr>)</condition><block type="pseudo" pos:start="170:13" pos:end="170:24"><block_content pos:start="170:13" pos:end="170:24">
            <goto pos:start="170:13" pos:end="170:24">goto <name pos:start="170:18" pos:end="170:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="171:9" pos:end="171:35"><expr pos:start="171:9" pos:end="171:34"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <call pos:start="171:15" pos:end="171:34"><name pos:start="171:15" pos:end="171:23">get_errno</name><argument_list pos:start="171:24" pos:end="171:34">(<argument pos:start="171:25" pos:end="171:33"><expr pos:start="171:25" pos:end="171:33"><call pos:start="171:25" pos:end="171:33"><name pos:start="171:25" pos:end="171:30">unlink</name><argument_list pos:start="171:31" pos:end="171:33">(<argument pos:start="171:32" pos:end="171:32"><expr pos:start="171:32" pos:end="171:32"><name pos:start="171:32" pos:end="171:32">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="172:9" pos:end="175:0"><expr pos:start="172:9" pos:end="172:31"><call pos:start="172:9" pos:end="172:31"><name pos:start="172:9" pos:end="172:19">unlock_user</name><argument_list pos:start="172:20" pos:end="172:31">(<argument pos:start="172:21" pos:end="172:21"><expr pos:start="172:21" pos:end="172:21"><name pos:start="172:21" pos:end="172:21">p</name></expr></argument>, <argument pos:start="172:24" pos:end="172:27"><expr pos:start="172:24" pos:end="172:27"><name pos:start="172:24" pos:end="172:27">arg1</name></expr></argument>, <argument pos:start="172:30" pos:end="172:30"><expr pos:start="172:30" pos:end="172:30"><literal type="number" pos:start="172:30" pos:end="172:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="173:1" pos:end="173:6">#<cpp:directive pos:start="173:2" pos:end="173:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="174:1" pos:end="174:31">#<cpp:directive pos:start="174:2" pos:end="174:3">if</cpp:directive> <expr pos:start="174:5" pos:end="174:31"><call pos:start="174:5" pos:end="174:31"><name pos:start="174:5" pos:end="174:11">defined</name><argument_list pos:start="174:12" pos:end="174:31">(<argument pos:start="174:13" pos:end="174:30"><expr pos:start="174:13" pos:end="174:30"><name pos:start="174:13" pos:end="174:30">TARGET_NR_unlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="175:5" pos:end="175:28">case <expr pos:start="175:10" pos:end="175:27"><name pos:start="175:10" pos:end="175:27">TARGET_NR_unlinkat</name></expr>:</case>
        <if_stmt pos:start="176:9" pos:end="177:24"><if pos:start="176:9" pos:end="177:24">if <condition pos:start="176:12" pos:end="176:42">(<expr pos:start="176:13" pos:end="176:41"><operator pos:start="176:13" pos:end="176:13">!</operator><operator pos:start="176:14" pos:end="176:14">(</operator><name pos:start="176:15" pos:end="176:15">p</name> <operator pos:start="176:17" pos:end="176:17">=</operator> <call pos:start="176:19" pos:end="176:40"><name pos:start="176:19" pos:end="176:34">lock_user_string</name><argument_list pos:start="176:35" pos:end="176:40">(<argument pos:start="176:36" pos:end="176:39"><expr pos:start="176:36" pos:end="176:39"><name pos:start="176:36" pos:end="176:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="176:41" pos:end="176:41">)</operator></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:24"><block_content pos:start="177:13" pos:end="177:24">
            <goto pos:start="177:13" pos:end="177:24">goto <name pos:start="177:18" pos:end="177:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="178:9" pos:end="178:49"><expr pos:start="178:9" pos:end="178:48"><name pos:start="178:9" pos:end="178:11">ret</name> <operator pos:start="178:13" pos:end="178:13">=</operator> <call pos:start="178:15" pos:end="178:48"><name pos:start="178:15" pos:end="178:23">get_errno</name><argument_list pos:start="178:24" pos:end="178:48">(<argument pos:start="178:25" pos:end="178:47"><expr pos:start="178:25" pos:end="178:47"><call pos:start="178:25" pos:end="178:47"><name pos:start="178:25" pos:end="178:32">unlinkat</name><argument_list pos:start="178:33" pos:end="178:47">(<argument pos:start="178:34" pos:end="178:37"><expr pos:start="178:34" pos:end="178:37"><name pos:start="178:34" pos:end="178:37">arg1</name></expr></argument>, <argument pos:start="178:40" pos:end="178:40"><expr pos:start="178:40" pos:end="178:40"><name pos:start="178:40" pos:end="178:40">p</name></expr></argument>, <argument pos:start="178:43" pos:end="178:46"><expr pos:start="178:43" pos:end="178:46"><name pos:start="178:43" pos:end="178:46">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="179:9" pos:end="181:0"><expr pos:start="179:9" pos:end="179:31"><call pos:start="179:9" pos:end="179:31"><name pos:start="179:9" pos:end="179:19">unlock_user</name><argument_list pos:start="179:20" pos:end="179:31">(<argument pos:start="179:21" pos:end="179:21"><expr pos:start="179:21" pos:end="179:21"><name pos:start="179:21" pos:end="179:21">p</name></expr></argument>, <argument pos:start="179:24" pos:end="179:27"><expr pos:start="179:24" pos:end="179:27"><name pos:start="179:24" pos:end="179:27">arg2</name></expr></argument>, <argument pos:start="179:30" pos:end="179:30"><expr pos:start="179:30" pos:end="179:30"><literal type="number" pos:start="179:30" pos:end="179:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="180:1" pos:end="180:6">#<cpp:directive pos:start="180:2" pos:end="180:6">endif</cpp:directive></cpp:endif>
    <case pos:start="181:5" pos:end="181:26">case <expr pos:start="181:10" pos:end="181:25"><name pos:start="181:10" pos:end="181:25">TARGET_NR_execve</name></expr>:</case>
        <block pos:start="182:9" pos:end="3541:14">{<block_content pos:start="183:13" pos:end="3541:14">
            <decl_stmt pos:start="183:13" pos:end="183:32"><decl pos:start="183:13" pos:end="183:23"><type pos:start="183:13" pos:end="183:19"><name pos:start="183:13" pos:end="183:16">char</name> <modifier pos:start="183:18" pos:end="183:18">*</modifier><modifier pos:start="183:19" pos:end="183:19">*</modifier></type><name pos:start="183:20" pos:end="183:23">argp</name></decl>, <decl pos:start="183:26" pos:end="183:31"><type ref="prev" pos:start="183:13" pos:end="183:19"><modifier pos:start="183:26" pos:end="183:26">*</modifier><modifier pos:start="183:27" pos:end="183:27">*</modifier></type><name pos:start="183:28" pos:end="183:31">envp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="184:13" pos:end="184:27"><decl pos:start="184:13" pos:end="184:20"><type pos:start="184:13" pos:end="184:15"><name pos:start="184:13" pos:end="184:15">int</name></type> <name pos:start="184:17" pos:end="184:20">argc</name></decl>, <decl pos:start="184:23" pos:end="184:26"><type ref="prev" pos:start="184:13" pos:end="184:15"/><name pos:start="184:23" pos:end="184:26">envc</name></decl>;</decl_stmt>
            <decl_stmt pos:start="185:13" pos:end="185:25"><decl pos:start="185:13" pos:end="185:24"><type pos:start="185:13" pos:end="185:21"><name pos:start="185:13" pos:end="185:21">abi_ulong</name></type> <name pos:start="185:23" pos:end="185:24">gp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="186:13" pos:end="186:33"><decl pos:start="186:13" pos:end="186:32"><type pos:start="186:13" pos:end="186:21"><name pos:start="186:13" pos:end="186:21">abi_ulong</name></type> <name pos:start="186:23" pos:end="186:32">guest_argp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="187:13" pos:end="187:33"><decl pos:start="187:13" pos:end="187:32"><type pos:start="187:13" pos:end="187:21"><name pos:start="187:13" pos:end="187:21">abi_ulong</name></type> <name pos:start="187:23" pos:end="187:32">guest_envp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="188:13" pos:end="188:27"><decl pos:start="188:13" pos:end="188:26"><type pos:start="188:13" pos:end="188:21"><name pos:start="188:13" pos:end="188:21">abi_ulong</name></type> <name pos:start="188:23" pos:end="188:26">addr</name></decl>;</decl_stmt>
            <decl_stmt pos:start="189:13" pos:end="189:21"><decl pos:start="189:13" pos:end="189:20"><type pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:16">char</name> <modifier pos:start="189:18" pos:end="189:18">*</modifier><modifier pos:start="189:19" pos:end="189:19">*</modifier></type><name pos:start="189:20" pos:end="189:20">q</name></decl>;</decl_stmt>
            <decl_stmt pos:start="190:13" pos:end="190:31"><decl pos:start="190:13" pos:end="190:30"><type pos:start="190:13" pos:end="190:15"><name pos:start="190:13" pos:end="190:15">int</name></type> <name pos:start="190:17" pos:end="190:26">total_size</name> <init pos:start="190:28" pos:end="190:30">= <expr pos:start="190:30" pos:end="190:30"><literal type="number" pos:start="190:30" pos:end="190:30">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="191:13" pos:end="191:21"><expr pos:start="191:13" pos:end="191:20"><name pos:start="191:13" pos:end="191:16">argc</name> <operator pos:start="191:18" pos:end="191:18">=</operator> <literal type="number" pos:start="191:20" pos:end="191:20">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="192:13" pos:end="192:30"><expr pos:start="192:13" pos:end="192:29"><name pos:start="192:13" pos:end="192:22">guest_argp</name> <operator pos:start="192:24" pos:end="192:24">=</operator> <name pos:start="192:26" pos:end="192:29">arg2</name></expr>;</expr_stmt>
            <for pos:start="193:13" pos:end="3541:14">for <control pos:start="193:17" pos:end="193:62">(<init pos:start="193:18" pos:end="193:33"><expr pos:start="193:18" pos:end="193:32"><name pos:start="193:18" pos:end="193:19">gp</name> <operator pos:start="193:21" pos:end="193:21">=</operator> <name pos:start="193:23" pos:end="193:32">guest_argp</name></expr>;</init> <condition pos:start="193:35" pos:end="193:37"><expr pos:start="193:35" pos:end="193:36"><name pos:start="193:35" pos:end="193:36">gp</name></expr>;</condition> <incr pos:start="193:39" pos:end="193:61"><expr pos:start="193:39" pos:end="193:61"><name pos:start="193:39" pos:end="193:40">gp</name> <operator pos:start="193:42" pos:end="193:43">+=</operator> <sizeof pos:start="193:45" pos:end="193:61">sizeof<argument_list pos:start="193:51" pos:end="193:61">(<argument pos:start="193:52" pos:end="193:60"><expr pos:start="193:52" pos:end="193:60"><name pos:start="193:52" pos:end="193:60">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block pos:start="193:64" pos:end="3541:14">{<block_content pos:start="194:17" pos:end="3541:14">
                <if_stmt pos:start="194:17" pos:end="195:32"><if pos:start="194:17" pos:end="195:32">if <condition pos:start="194:20" pos:end="194:43">(<expr pos:start="194:21" pos:end="194:42"><call pos:start="194:21" pos:end="194:42"><name pos:start="194:21" pos:end="194:32">get_user_ual</name><argument_list pos:start="194:33" pos:end="194:42">(<argument pos:start="194:34" pos:end="194:37"><expr pos:start="194:34" pos:end="194:37"><name pos:start="194:34" pos:end="194:37">addr</name></expr></argument>, <argument pos:start="194:40" pos:end="194:41"><expr pos:start="194:40" pos:end="194:41"><name pos:start="194:40" pos:end="194:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="195:21" pos:end="195:32"><block_content pos:start="195:21" pos:end="195:32">
                    <goto pos:start="195:21" pos:end="195:32">goto <name pos:start="195:26" pos:end="195:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="196:17" pos:end="197:23"><if pos:start="196:17" pos:end="197:23">if <condition pos:start="196:20" pos:end="196:26">(<expr pos:start="196:21" pos:end="196:25"><operator pos:start="196:21" pos:end="196:21">!</operator><name pos:start="196:22" pos:end="196:25">addr</name></expr>)</condition><block type="pseudo" pos:start="197:17" pos:end="197:23"><block_content pos:start="197:17" pos:end="197:23">
                <expr_stmt pos:start="197:17" pos:end="197:23"><expr pos:start="197:17" pos:end="197:22"><name pos:start="197:17" pos:end="197:20">argc</name><operator pos:start="197:21" pos:end="197:22">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="198:13" pos:end="198:21"><expr pos:start="198:13" pos:end="198:20"><name pos:start="198:13" pos:end="198:16">envc</name> <operator pos:start="198:18" pos:end="198:18">=</operator> <literal type="number" pos:start="198:20" pos:end="198:20">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="199:13" pos:end="199:30"><expr pos:start="199:13" pos:end="199:29"><name pos:start="199:13" pos:end="199:22">guest_envp</name> <operator pos:start="199:24" pos:end="199:24">=</operator> <name pos:start="199:26" pos:end="199:29">arg3</name></expr>;</expr_stmt>
            <for pos:start="200:13" pos:end="3541:14">for <control pos:start="200:17" pos:end="200:62">(<init pos:start="200:18" pos:end="200:33"><expr pos:start="200:18" pos:end="200:32"><name pos:start="200:18" pos:end="200:19">gp</name> <operator pos:start="200:21" pos:end="200:21">=</operator> <name pos:start="200:23" pos:end="200:32">guest_envp</name></expr>;</init> <condition pos:start="200:35" pos:end="200:37"><expr pos:start="200:35" pos:end="200:36"><name pos:start="200:35" pos:end="200:36">gp</name></expr>;</condition> <incr pos:start="200:39" pos:end="200:61"><expr pos:start="200:39" pos:end="200:61"><name pos:start="200:39" pos:end="200:40">gp</name> <operator pos:start="200:42" pos:end="200:43">+=</operator> <sizeof pos:start="200:45" pos:end="200:61">sizeof<argument_list pos:start="200:51" pos:end="200:61">(<argument pos:start="200:52" pos:end="200:60"><expr pos:start="200:52" pos:end="200:60"><name pos:start="200:52" pos:end="200:60">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block pos:start="200:64" pos:end="3541:14">{<block_content pos:start="201:17" pos:end="3541:14">
                <if_stmt pos:start="201:17" pos:end="202:32"><if pos:start="201:17" pos:end="202:32">if <condition pos:start="201:20" pos:end="201:43">(<expr pos:start="201:21" pos:end="201:42"><call pos:start="201:21" pos:end="201:42"><name pos:start="201:21" pos:end="201:32">get_user_ual</name><argument_list pos:start="201:33" pos:end="201:42">(<argument pos:start="201:34" pos:end="201:37"><expr pos:start="201:34" pos:end="201:37"><name pos:start="201:34" pos:end="201:37">addr</name></expr></argument>, <argument pos:start="201:40" pos:end="201:41"><expr pos:start="201:40" pos:end="201:41"><name pos:start="201:40" pos:end="201:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="202:21" pos:end="202:32"><block_content pos:start="202:21" pos:end="202:32">
                    <goto pos:start="202:21" pos:end="202:32">goto <name pos:start="202:26" pos:end="202:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="203:17" pos:end="204:23"><if pos:start="203:17" pos:end="204:23">if <condition pos:start="203:20" pos:end="203:26">(<expr pos:start="203:21" pos:end="203:25"><operator pos:start="203:21" pos:end="203:21">!</operator><name pos:start="203:22" pos:end="203:25">addr</name></expr>)</condition><block type="pseudo" pos:start="204:17" pos:end="204:23"><block_content pos:start="204:17" pos:end="204:23">
                <expr_stmt pos:start="204:17" pos:end="204:23"><expr pos:start="204:17" pos:end="204:22"><name pos:start="204:17" pos:end="204:20">envc</name><operator pos:start="204:21" pos:end="204:22">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="205:13" pos:end="205:55"><expr pos:start="205:13" pos:end="205:54"><name pos:start="205:13" pos:end="205:16">argp</name> <operator pos:start="205:18" pos:end="205:18">=</operator> <call pos:start="205:20" pos:end="205:54"><name pos:start="205:20" pos:end="205:25">alloca</name><argument_list pos:start="205:26" pos:end="205:54">(<argument pos:start="205:27" pos:end="205:53"><expr pos:start="205:27" pos:end="205:53"><operator pos:start="205:27" pos:end="205:27">(</operator><name pos:start="205:28" pos:end="205:31">argc</name> <operator pos:start="205:33" pos:end="205:33">+</operator> <literal type="number" pos:start="205:35" pos:end="205:35">1</literal><operator pos:start="205:36" pos:end="205:36">)</operator> <operator pos:start="205:38" pos:end="205:38">*</operator> <sizeof pos:start="205:40" pos:end="205:53">sizeof<argument_list pos:start="205:46" pos:end="205:53">(<argument pos:start="205:47" pos:end="205:52"><expr pos:start="205:47" pos:end="205:52"><name pos:start="205:47" pos:end="205:50">void</name> <operator pos:start="205:52" pos:end="205:52">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="206:13" pos:end="206:55"><expr pos:start="206:13" pos:end="206:54"><name pos:start="206:13" pos:end="206:16">envp</name> <operator pos:start="206:18" pos:end="206:18">=</operator> <call pos:start="206:20" pos:end="206:54"><name pos:start="206:20" pos:end="206:25">alloca</name><argument_list pos:start="206:26" pos:end="206:54">(<argument pos:start="206:27" pos:end="206:53"><expr pos:start="206:27" pos:end="206:53"><operator pos:start="206:27" pos:end="206:27">(</operator><name pos:start="206:28" pos:end="206:31">envc</name> <operator pos:start="206:33" pos:end="206:33">+</operator> <literal type="number" pos:start="206:35" pos:end="206:35">1</literal><operator pos:start="206:36" pos:end="206:36">)</operator> <operator pos:start="206:38" pos:end="206:38">*</operator> <sizeof pos:start="206:40" pos:end="206:53">sizeof<argument_list pos:start="206:46" pos:end="206:53">(<argument pos:start="206:47" pos:end="206:52"><expr pos:start="206:47" pos:end="206:52"><name pos:start="206:47" pos:end="206:50">void</name> <operator pos:start="206:52" pos:end="206:52">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:start="207:13" pos:end="3541:14">for <control pos:start="207:17" pos:end="208:47">(<init pos:start="207:18" pos:end="207:43"><expr pos:start="207:18" pos:end="207:32"><name pos:start="207:18" pos:end="207:19">gp</name> <operator pos:start="207:21" pos:end="207:21">=</operator> <name pos:start="207:23" pos:end="207:32">guest_argp</name></expr><operator pos:start="207:33" pos:end="207:33">,</operator> <expr pos:start="207:35" pos:end="207:42"><name pos:start="207:35" pos:end="207:35">q</name> <operator pos:start="207:37" pos:end="207:37">=</operator> <name pos:start="207:39" pos:end="207:42">argp</name></expr>;</init> <condition pos:start="207:45" pos:end="207:47"><expr pos:start="207:45" pos:end="207:46"><name pos:start="207:45" pos:end="207:46">gp</name></expr>;</condition>
                  <incr pos:start="208:19" pos:end="208:46"><expr pos:start="208:19" pos:end="208:41"><name pos:start="208:19" pos:end="208:20">gp</name> <operator pos:start="208:22" pos:end="208:23">+=</operator> <sizeof pos:start="208:25" pos:end="208:41">sizeof<argument_list pos:start="208:31" pos:end="208:41">(<argument pos:start="208:32" pos:end="208:40"><expr pos:start="208:32" pos:end="208:40"><name pos:start="208:32" pos:end="208:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="208:42" pos:end="208:42">,</operator> <expr pos:start="208:44" pos:end="208:46"><name pos:start="208:44" pos:end="208:44">q</name><operator pos:start="208:45" pos:end="208:46">++</operator></expr></incr>)</control> <block pos:start="208:49" pos:end="3541:14">{<block_content pos:start="209:17" pos:end="3541:14">
                <if_stmt pos:start="209:17" pos:end="210:39"><if pos:start="209:17" pos:end="210:39">if <condition pos:start="209:20" pos:end="209:43">(<expr pos:start="209:21" pos:end="209:42"><call pos:start="209:21" pos:end="209:42"><name pos:start="209:21" pos:end="209:32">get_user_ual</name><argument_list pos:start="209:33" pos:end="209:42">(<argument pos:start="209:34" pos:end="209:37"><expr pos:start="209:34" pos:end="209:37"><name pos:start="209:34" pos:end="209:37">addr</name></expr></argument>, <argument pos:start="209:40" pos:end="209:41"><expr pos:start="209:40" pos:end="209:41"><name pos:start="209:40" pos:end="209:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="210:21" pos:end="210:39"><block_content pos:start="210:21" pos:end="210:39">
                    <goto pos:start="210:21" pos:end="210:39">goto <name pos:start="210:26" pos:end="210:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="211:17" pos:end="213:39"><if pos:start="211:17" pos:end="213:39">if <condition pos:start="211:20" pos:end="211:26">(<expr pos:start="211:21" pos:end="211:25"><operator pos:start="211:21" pos:end="211:21">!</operator><name pos:start="211:22" pos:end="211:25">addr</name></expr>)</condition><block type="pseudo" pos:start="212:17" pos:end="213:39"><block_content pos:start="212:17" pos:end="213:39">
                <if_stmt pos:start="212:17" pos:end="213:39"><if pos:start="212:17" pos:end="213:39">if <condition pos:start="212:20" pos:end="212:51">(<expr pos:start="212:21" pos:end="212:50"><operator pos:start="212:21" pos:end="212:21">!</operator><operator pos:start="212:22" pos:end="212:22">(</operator><operator pos:start="212:23" pos:end="212:23">*</operator><name pos:start="212:24" pos:end="212:24">q</name> <operator pos:start="212:26" pos:end="212:26">=</operator> <call pos:start="212:28" pos:end="212:49"><name pos:start="212:28" pos:end="212:43">lock_user_string</name><argument_list pos:start="212:44" pos:end="212:49">(<argument pos:start="212:45" pos:end="212:48"><expr pos:start="212:45" pos:end="212:48"><name pos:start="212:45" pos:end="212:48">addr</name></expr></argument>)</argument_list></call><operator pos:start="212:50" pos:end="212:50">)</operator></expr>)</condition><block type="pseudo" pos:start="213:21" pos:end="213:39"><block_content pos:start="213:21" pos:end="213:39">
                    <goto pos:start="213:21" pos:end="213:39">goto <name pos:start="213:26" pos:end="213:38">execve_efault</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="214:17" pos:end="214:45"><expr pos:start="214:17" pos:end="214:44"><name pos:start="214:17" pos:end="214:26">total_size</name> <operator pos:start="214:28" pos:end="214:29">+=</operator> <call pos:start="214:31" pos:end="214:40"><name pos:start="214:31" pos:end="214:36">strlen</name><argument_list pos:start="214:37" pos:end="214:40">(<argument pos:start="214:38" pos:end="214:39"><expr pos:start="214:38" pos:end="214:39"><operator pos:start="214:38" pos:end="214:38">*</operator><name pos:start="214:39" pos:end="214:39">q</name></expr></argument>)</argument_list></call> <operator pos:start="214:42" pos:end="214:42">+</operator> <literal type="number" pos:start="214:44" pos:end="214:44">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="215:13" pos:end="215:22"><expr pos:start="215:13" pos:end="215:21"><operator pos:start="215:13" pos:end="215:13">*</operator><name pos:start="215:14" pos:end="215:14">q</name> <operator pos:start="215:16" pos:end="215:16">=</operator> <name pos:start="215:18" pos:end="215:21">NULL</name></expr>;</expr_stmt>
            <for pos:start="216:13" pos:end="3541:14">for <control pos:start="216:17" pos:end="217:47">(<init pos:start="216:18" pos:end="216:43"><expr pos:start="216:18" pos:end="216:32"><name pos:start="216:18" pos:end="216:19">gp</name> <operator pos:start="216:21" pos:end="216:21">=</operator> <name pos:start="216:23" pos:end="216:32">guest_envp</name></expr><operator pos:start="216:33" pos:end="216:33">,</operator> <expr pos:start="216:35" pos:end="216:42"><name pos:start="216:35" pos:end="216:35">q</name> <operator pos:start="216:37" pos:end="216:37">=</operator> <name pos:start="216:39" pos:end="216:42">envp</name></expr>;</init> <condition pos:start="216:45" pos:end="216:47"><expr pos:start="216:45" pos:end="216:46"><name pos:start="216:45" pos:end="216:46">gp</name></expr>;</condition>
                  <incr pos:start="217:19" pos:end="217:46"><expr pos:start="217:19" pos:end="217:41"><name pos:start="217:19" pos:end="217:20">gp</name> <operator pos:start="217:22" pos:end="217:23">+=</operator> <sizeof pos:start="217:25" pos:end="217:41">sizeof<argument_list pos:start="217:31" pos:end="217:41">(<argument pos:start="217:32" pos:end="217:40"><expr pos:start="217:32" pos:end="217:40"><name pos:start="217:32" pos:end="217:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="217:42" pos:end="217:42">,</operator> <expr pos:start="217:44" pos:end="217:46"><name pos:start="217:44" pos:end="217:44">q</name><operator pos:start="217:45" pos:end="217:46">++</operator></expr></incr>)</control> <block pos:start="217:49" pos:end="3541:14">{<block_content pos:start="218:17" pos:end="3541:14">
                <if_stmt pos:start="218:17" pos:end="219:39"><if pos:start="218:17" pos:end="219:39">if <condition pos:start="218:20" pos:end="218:43">(<expr pos:start="218:21" pos:end="218:42"><call pos:start="218:21" pos:end="218:42"><name pos:start="218:21" pos:end="218:32">get_user_ual</name><argument_list pos:start="218:33" pos:end="218:42">(<argument pos:start="218:34" pos:end="218:37"><expr pos:start="218:34" pos:end="218:37"><name pos:start="218:34" pos:end="218:37">addr</name></expr></argument>, <argument pos:start="218:40" pos:end="218:41"><expr pos:start="218:40" pos:end="218:41"><name pos:start="218:40" pos:end="218:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="219:21" pos:end="219:39"><block_content pos:start="219:21" pos:end="219:39">
                    <goto pos:start="219:21" pos:end="219:39">goto <name pos:start="219:26" pos:end="219:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="220:17" pos:end="222:39"><if pos:start="220:17" pos:end="222:39">if <condition pos:start="220:20" pos:end="220:26">(<expr pos:start="220:21" pos:end="220:25"><operator pos:start="220:21" pos:end="220:21">!</operator><name pos:start="220:22" pos:end="220:25">addr</name></expr>)</condition><block type="pseudo" pos:start="221:17" pos:end="222:39"><block_content pos:start="221:17" pos:end="222:39">
                <if_stmt pos:start="221:17" pos:end="222:39"><if pos:start="221:17" pos:end="222:39">if <condition pos:start="221:20" pos:end="221:51">(<expr pos:start="221:21" pos:end="221:50"><operator pos:start="221:21" pos:end="221:21">!</operator><operator pos:start="221:22" pos:end="221:22">(</operator><operator pos:start="221:23" pos:end="221:23">*</operator><name pos:start="221:24" pos:end="221:24">q</name> <operator pos:start="221:26" pos:end="221:26">=</operator> <call pos:start="221:28" pos:end="221:49"><name pos:start="221:28" pos:end="221:43">lock_user_string</name><argument_list pos:start="221:44" pos:end="221:49">(<argument pos:start="221:45" pos:end="221:48"><expr pos:start="221:45" pos:end="221:48"><name pos:start="221:45" pos:end="221:48">addr</name></expr></argument>)</argument_list></call><operator pos:start="221:50" pos:end="221:50">)</operator></expr>)</condition><block type="pseudo" pos:start="222:21" pos:end="222:39"><block_content pos:start="222:21" pos:end="222:39">
                    <goto pos:start="222:21" pos:end="222:39">goto <name pos:start="222:26" pos:end="222:38">execve_efault</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="223:17" pos:end="223:45"><expr pos:start="223:17" pos:end="223:44"><name pos:start="223:17" pos:end="223:26">total_size</name> <operator pos:start="223:28" pos:end="223:29">+=</operator> <call pos:start="223:31" pos:end="223:40"><name pos:start="223:31" pos:end="223:36">strlen</name><argument_list pos:start="223:37" pos:end="223:40">(<argument pos:start="223:38" pos:end="223:39"><expr pos:start="223:38" pos:end="223:39"><operator pos:start="223:38" pos:end="223:38">*</operator><name pos:start="223:39" pos:end="223:39">q</name></expr></argument>)</argument_list></call> <operator pos:start="223:42" pos:end="223:42">+</operator> <literal type="number" pos:start="223:44" pos:end="223:44">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="224:13" pos:end="224:22"><expr pos:start="224:13" pos:end="224:21"><operator pos:start="224:13" pos:end="224:13">*</operator><name pos:start="224:14" pos:end="224:14">q</name> <operator pos:start="224:16" pos:end="224:16">=</operator> <name pos:start="224:18" pos:end="224:21">NULL</name></expr>;</expr_stmt>
            <if_stmt pos:start="225:13" pos:end="226:35"><if pos:start="225:13" pos:end="226:35">if <condition pos:start="225:16" pos:end="225:46">(<expr pos:start="225:17" pos:end="225:45"><operator pos:start="225:17" pos:end="225:17">!</operator><operator pos:start="225:18" pos:end="225:18">(</operator><name pos:start="225:19" pos:end="225:19">p</name> <operator pos:start="225:21" pos:end="225:21">=</operator> <call pos:start="225:23" pos:end="225:44"><name pos:start="225:23" pos:end="225:38">lock_user_string</name><argument_list pos:start="225:39" pos:end="225:44">(<argument pos:start="225:40" pos:end="225:43"><expr pos:start="225:40" pos:end="225:43"><name pos:start="225:40" pos:end="225:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="225:45" pos:end="225:45">)</operator></expr>)</condition><block type="pseudo" pos:start="226:17" pos:end="226:35"><block_content pos:start="226:17" pos:end="226:35">
                <goto pos:start="226:17" pos:end="226:35">goto <name pos:start="226:22" pos:end="226:34">execve_efault</name>;</goto></block_content></block></if></if_stmt>
            <comment type="block" pos:start="227:13" pos:end="236:15">/* Although execve() is not an interruptible syscall it is
             * a special case where we must use the safe_syscall wrapper:
             * if we allow a signal to happen before we make the host
             * syscall then we will 'lose' it, because at the point of
             * execve the process leaves QEMU's control. So we use the
             * safe syscall wrapper to ensure that we either take the
             * signal as a guest signal, or else it does not happen
             * before the execve completes and makes it the other
             * program's problem.
             */</comment>
            <expr_stmt pos:start="237:13" pos:end="237:56"><expr pos:start="237:13" pos:end="237:55"><name pos:start="237:13" pos:end="237:15">ret</name> <operator pos:start="237:17" pos:end="237:17">=</operator> <call pos:start="237:19" pos:end="237:55"><name pos:start="237:19" pos:end="237:27">get_errno</name><argument_list pos:start="237:28" pos:end="237:55">(<argument pos:start="237:29" pos:end="237:54"><expr pos:start="237:29" pos:end="237:54"><call pos:start="237:29" pos:end="237:54"><name pos:start="237:29" pos:end="237:39">safe_execve</name><argument_list pos:start="237:40" pos:end="237:54">(<argument pos:start="237:41" pos:end="237:41"><expr pos:start="237:41" pos:end="237:41"><name pos:start="237:41" pos:end="237:41">p</name></expr></argument>, <argument pos:start="237:44" pos:end="237:47"><expr pos:start="237:44" pos:end="237:47"><name pos:start="237:44" pos:end="237:47">argp</name></expr></argument>, <argument pos:start="237:50" pos:end="237:53"><expr pos:start="237:50" pos:end="237:53"><name pos:start="237:50" pos:end="237:53">envp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="238:13" pos:end="238:36"><expr pos:start="238:13" pos:end="238:35"><call pos:start="238:13" pos:end="238:35"><name pos:start="238:13" pos:end="238:23">unlock_user</name><argument_list pos:start="238:24" pos:end="238:35">(<argument pos:start="238:25" pos:end="238:25"><expr pos:start="238:25" pos:end="238:25"><name pos:start="238:25" pos:end="238:25">p</name></expr></argument>, <argument pos:start="238:28" pos:end="238:31"><expr pos:start="238:28" pos:end="238:31"><name pos:start="238:28" pos:end="238:31">arg1</name></expr></argument>, <argument pos:start="238:34" pos:end="238:34"><expr pos:start="238:34" pos:end="238:34"><literal type="number" pos:start="238:34" pos:end="238:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="239:13" pos:end="239:28">goto <name pos:start="239:18" pos:end="239:27">execve_end</name>;</goto>
        <label pos:start="240:9" pos:end="240:22"><name pos:start="240:9" pos:end="240:21">execve_efault</name>:</label>
            <expr_stmt pos:start="241:13" pos:end="241:33"><expr pos:start="241:13" pos:end="241:32"><name pos:start="241:13" pos:end="241:15">ret</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <operator pos:start="241:19" pos:end="241:19">-</operator><name pos:start="241:20" pos:end="241:32">TARGET_EFAULT</name></expr>;</expr_stmt>
        <label pos:start="242:9" pos:end="242:19"><name pos:start="242:9" pos:end="242:18">execve_end</name>:</label>
            <for pos:start="243:13" pos:end="3541:14">for <control pos:start="243:17" pos:end="244:47">(<init pos:start="243:18" pos:end="243:43"><expr pos:start="243:18" pos:end="243:32"><name pos:start="243:18" pos:end="243:19">gp</name> <operator pos:start="243:21" pos:end="243:21">=</operator> <name pos:start="243:23" pos:end="243:32">guest_argp</name></expr><operator pos:start="243:33" pos:end="243:33">,</operator> <expr pos:start="243:35" pos:end="243:42"><name pos:start="243:35" pos:end="243:35">q</name> <operator pos:start="243:37" pos:end="243:37">=</operator> <name pos:start="243:39" pos:end="243:42">argp</name></expr>;</init> <condition pos:start="243:45" pos:end="243:47"><expr pos:start="243:45" pos:end="243:46"><operator pos:start="243:45" pos:end="243:45">*</operator><name pos:start="243:46" pos:end="243:46">q</name></expr>;</condition>
                  <incr pos:start="244:19" pos:end="244:46"><expr pos:start="244:19" pos:end="244:41"><name pos:start="244:19" pos:end="244:20">gp</name> <operator pos:start="244:22" pos:end="244:23">+=</operator> <sizeof pos:start="244:25" pos:end="244:41">sizeof<argument_list pos:start="244:31" pos:end="244:41">(<argument pos:start="244:32" pos:end="244:40"><expr pos:start="244:32" pos:end="244:40"><name pos:start="244:32" pos:end="244:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="244:42" pos:end="244:42">,</operator> <expr pos:start="244:44" pos:end="244:46"><name pos:start="244:44" pos:end="244:44">q</name><operator pos:start="244:45" pos:end="244:46">++</operator></expr></incr>)</control> <block pos:start="244:49" pos:end="3541:14">{<block_content pos:start="245:17" pos:end="3541:14">
                <if_stmt pos:start="245:17" pos:end="247:41"><if pos:start="245:17" pos:end="247:41">if <condition pos:start="245:20" pos:end="246:29">(<expr pos:start="245:21" pos:end="246:28"><call pos:start="245:21" pos:end="245:42"><name pos:start="245:21" pos:end="245:32">get_user_ual</name><argument_list pos:start="245:33" pos:end="245:42">(<argument pos:start="245:34" pos:end="245:37"><expr pos:start="245:34" pos:end="245:37"><name pos:start="245:34" pos:end="245:37">addr</name></expr></argument>, <argument pos:start="245:40" pos:end="245:41"><expr pos:start="245:40" pos:end="245:41"><name pos:start="245:40" pos:end="245:41">gp</name></expr></argument>)</argument_list></call>
                    <operator pos:start="246:21" pos:end="246:22">||</operator> <operator pos:start="246:24" pos:end="246:24">!</operator><name pos:start="246:25" pos:end="246:28">addr</name></expr>)</condition><block type="pseudo" pos:start="247:17" pos:end="247:41"><block_content pos:start="247:17" pos:end="247:41">
                <expr_stmt pos:start="247:17" pos:end="247:41"><expr pos:start="247:17" pos:end="247:40"><call pos:start="247:17" pos:end="247:40"><name pos:start="247:17" pos:end="247:27">unlock_user</name><argument_list pos:start="247:28" pos:end="247:40">(<argument pos:start="247:29" pos:end="247:30"><expr pos:start="247:29" pos:end="247:30"><operator pos:start="247:29" pos:end="247:29">*</operator><name pos:start="247:30" pos:end="247:30">q</name></expr></argument>, <argument pos:start="247:33" pos:end="247:36"><expr pos:start="247:33" pos:end="247:36"><name pos:start="247:33" pos:end="247:36">addr</name></expr></argument>, <argument pos:start="247:39" pos:end="247:39"><expr pos:start="247:39" pos:end="247:39"><literal type="number" pos:start="247:39" pos:end="247:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <for pos:start="248:13" pos:end="3541:14">for <control pos:start="248:17" pos:end="249:47">(<init pos:start="248:18" pos:end="248:43"><expr pos:start="248:18" pos:end="248:32"><name pos:start="248:18" pos:end="248:19">gp</name> <operator pos:start="248:21" pos:end="248:21">=</operator> <name pos:start="248:23" pos:end="248:32">guest_envp</name></expr><operator pos:start="248:33" pos:end="248:33">,</operator> <expr pos:start="248:35" pos:end="248:42"><name pos:start="248:35" pos:end="248:35">q</name> <operator pos:start="248:37" pos:end="248:37">=</operator> <name pos:start="248:39" pos:end="248:42">envp</name></expr>;</init> <condition pos:start="248:45" pos:end="248:47"><expr pos:start="248:45" pos:end="248:46"><operator pos:start="248:45" pos:end="248:45">*</operator><name pos:start="248:46" pos:end="248:46">q</name></expr>;</condition>
                  <incr pos:start="249:19" pos:end="249:46"><expr pos:start="249:19" pos:end="249:41"><name pos:start="249:19" pos:end="249:20">gp</name> <operator pos:start="249:22" pos:end="249:23">+=</operator> <sizeof pos:start="249:25" pos:end="249:41">sizeof<argument_list pos:start="249:31" pos:end="249:41">(<argument pos:start="249:32" pos:end="249:40"><expr pos:start="249:32" pos:end="249:40"><name pos:start="249:32" pos:end="249:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="249:42" pos:end="249:42">,</operator> <expr pos:start="249:44" pos:end="249:46"><name pos:start="249:44" pos:end="249:44">q</name><operator pos:start="249:45" pos:end="249:46">++</operator></expr></incr>)</control> <block pos:start="249:49" pos:end="3541:14">{<block_content pos:start="250:17" pos:end="3541:14">
                <if_stmt pos:start="250:17" pos:end="252:41"><if pos:start="250:17" pos:end="252:41">if <condition pos:start="250:20" pos:end="251:29">(<expr pos:start="250:21" pos:end="251:28"><call pos:start="250:21" pos:end="250:42"><name pos:start="250:21" pos:end="250:32">get_user_ual</name><argument_list pos:start="250:33" pos:end="250:42">(<argument pos:start="250:34" pos:end="250:37"><expr pos:start="250:34" pos:end="250:37"><name pos:start="250:34" pos:end="250:37">addr</name></expr></argument>, <argument pos:start="250:40" pos:end="250:41"><expr pos:start="250:40" pos:end="250:41"><name pos:start="250:40" pos:end="250:41">gp</name></expr></argument>)</argument_list></call>
                    <operator pos:start="251:21" pos:end="251:22">||</operator> <operator pos:start="251:24" pos:end="251:24">!</operator><name pos:start="251:25" pos:end="251:28">addr</name></expr>)</condition><block type="pseudo" pos:start="252:17" pos:end="252:41"><block_content pos:start="252:17" pos:end="252:41">
                <expr_stmt pos:start="252:17" pos:end="252:41"><expr pos:start="252:17" pos:end="252:40"><call pos:start="252:17" pos:end="252:40"><name pos:start="252:17" pos:end="252:27">unlock_user</name><argument_list pos:start="252:28" pos:end="252:40">(<argument pos:start="252:29" pos:end="252:30"><expr pos:start="252:29" pos:end="252:30"><operator pos:start="252:29" pos:end="252:29">*</operator><name pos:start="252:30" pos:end="252:30">q</name></expr></argument>, <argument pos:start="252:33" pos:end="252:36"><expr pos:start="252:33" pos:end="252:36"><name pos:start="252:33" pos:end="252:36">addr</name></expr></argument>, <argument pos:start="252:39" pos:end="252:39"><expr pos:start="252:39" pos:end="252:39"><literal type="number" pos:start="252:39" pos:end="252:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <case pos:start="253:5" pos:end="253:25">case <expr pos:start="253:10" pos:end="253:24"><name pos:start="253:10" pos:end="253:24">TARGET_NR_chdir</name></expr>:</case>
        <if_stmt pos:start="254:9" pos:end="255:24"><if pos:start="254:9" pos:end="255:24">if <condition pos:start="254:12" pos:end="254:42">(<expr pos:start="254:13" pos:end="254:41"><operator pos:start="254:13" pos:end="254:13">!</operator><operator pos:start="254:14" pos:end="254:14">(</operator><name pos:start="254:15" pos:end="254:15">p</name> <operator pos:start="254:17" pos:end="254:17">=</operator> <call pos:start="254:19" pos:end="254:40"><name pos:start="254:19" pos:end="254:34">lock_user_string</name><argument_list pos:start="254:35" pos:end="254:40">(<argument pos:start="254:36" pos:end="254:39"><expr pos:start="254:36" pos:end="254:39"><name pos:start="254:36" pos:end="254:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="254:41" pos:end="254:41">)</operator></expr>)</condition><block type="pseudo" pos:start="255:13" pos:end="255:24"><block_content pos:start="255:13" pos:end="255:24">
            <goto pos:start="255:13" pos:end="255:24">goto <name pos:start="255:18" pos:end="255:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="256:9" pos:end="256:34"><expr pos:start="256:9" pos:end="256:33"><name pos:start="256:9" pos:end="256:11">ret</name> <operator pos:start="256:13" pos:end="256:13">=</operator> <call pos:start="256:15" pos:end="256:33"><name pos:start="256:15" pos:end="256:23">get_errno</name><argument_list pos:start="256:24" pos:end="256:33">(<argument pos:start="256:25" pos:end="256:32"><expr pos:start="256:25" pos:end="256:32"><call pos:start="256:25" pos:end="256:32"><name pos:start="256:25" pos:end="256:29">chdir</name><argument_list pos:start="256:30" pos:end="256:32">(<argument pos:start="256:31" pos:end="256:31"><expr pos:start="256:31" pos:end="256:31"><name pos:start="256:31" pos:end="256:31">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="257:9" pos:end="259:0"><expr pos:start="257:9" pos:end="257:31"><call pos:start="257:9" pos:end="257:31"><name pos:start="257:9" pos:end="257:19">unlock_user</name><argument_list pos:start="257:20" pos:end="257:31">(<argument pos:start="257:21" pos:end="257:21"><expr pos:start="257:21" pos:end="257:21"><name pos:start="257:21" pos:end="257:21">p</name></expr></argument>, <argument pos:start="257:24" pos:end="257:27"><expr pos:start="257:24" pos:end="257:27"><name pos:start="257:24" pos:end="257:27">arg1</name></expr></argument>, <argument pos:start="257:30" pos:end="257:30"><expr pos:start="257:30" pos:end="257:30"><literal type="number" pos:start="257:30" pos:end="257:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="258:1" pos:end="258:21">#<cpp:directive pos:start="258:2" pos:end="258:6">ifdef</cpp:directive> <name pos:start="258:8" pos:end="258:21">TARGET_NR_time</name></cpp:ifdef>
    <case pos:start="259:5" pos:end="259:24">case <expr pos:start="259:10" pos:end="259:23"><name pos:start="259:10" pos:end="259:23">TARGET_NR_time</name></expr>:</case>
        <block pos:start="260:9" pos:end="3541:14">{<block_content pos:start="261:13" pos:end="3541:14">
            <decl_stmt pos:start="261:13" pos:end="261:29"><decl pos:start="261:13" pos:end="261:28"><type pos:start="261:13" pos:end="261:18"><name pos:start="261:13" pos:end="261:18">time_t</name></type> <name pos:start="261:20" pos:end="261:28">host_time</name></decl>;</decl_stmt>
            <expr_stmt pos:start="262:13" pos:end="262:46"><expr pos:start="262:13" pos:end="262:45"><name pos:start="262:13" pos:end="262:15">ret</name> <operator pos:start="262:17" pos:end="262:17">=</operator> <call pos:start="262:19" pos:end="262:45"><name pos:start="262:19" pos:end="262:27">get_errno</name><argument_list pos:start="262:28" pos:end="262:45">(<argument pos:start="262:29" pos:end="262:44"><expr pos:start="262:29" pos:end="262:44"><call pos:start="262:29" pos:end="262:44"><name pos:start="262:29" pos:end="262:32">time</name><argument_list pos:start="262:33" pos:end="262:44">(<argument pos:start="262:34" pos:end="262:43"><expr pos:start="262:34" pos:end="262:43"><operator pos:start="262:34" pos:end="262:34">&amp;</operator><name pos:start="262:35" pos:end="262:43">host_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="263:13" pos:end="269:0"><if pos:start="263:13" pos:end="269:0">if <condition pos:start="263:16" pos:end="265:49">(<expr pos:start="263:17" pos:end="265:48"><operator pos:start="263:17" pos:end="263:17">!</operator><call pos:start="263:18" pos:end="263:30"><name pos:start="263:18" pos:end="263:25">is_error</name><argument_list pos:start="263:26" pos:end="263:30">(<argument pos:start="263:27" pos:end="263:29"><expr pos:start="263:27" pos:end="263:29"><name pos:start="263:27" pos:end="263:29">ret</name></expr></argument>)</argument_list></call>
                <operator pos:start="264:17" pos:end="264:18">&amp;&amp;</operator> <name pos:start="264:20" pos:end="264:23">arg1</name>
                <operator pos:start="265:17" pos:end="265:18">&amp;&amp;</operator> <call pos:start="265:20" pos:end="265:48"><name pos:start="265:20" pos:end="265:31">put_user_sal</name><argument_list pos:start="265:32" pos:end="265:48">(<argument pos:start="265:33" pos:end="265:41"><expr pos:start="265:33" pos:end="265:41"><name pos:start="265:33" pos:end="265:41">host_time</name></expr></argument>, <argument pos:start="265:44" pos:end="265:47"><expr pos:start="265:44" pos:end="265:47"><name pos:start="265:44" pos:end="265:47">arg1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="266:17" pos:end="269:0"><block_content pos:start="266:17" pos:end="269:0">
                <goto pos:start="266:17" pos:end="269:0">goto <name pos:start="266:22" pos:end="266:27">efault</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif pos:start="267:1" pos:end="267:6">#<cpp:directive pos:start="267:2" pos:end="267:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="268:1" pos:end="268:22">#<cpp:directive pos:start="268:2" pos:end="268:6">ifdef</cpp:directive> <name pos:start="268:8" pos:end="268:22">TARGET_NR_mknod</name></cpp:ifdef>
    <case pos:start="269:5" pos:end="269:25">case <expr pos:start="269:10" pos:end="269:24"><name pos:start="269:10" pos:end="269:24">TARGET_NR_mknod</name></expr>:</case>
        <if_stmt pos:start="270:9" pos:end="271:24"><if pos:start="270:9" pos:end="271:24">if <condition pos:start="270:12" pos:end="270:42">(<expr pos:start="270:13" pos:end="270:41"><operator pos:start="270:13" pos:end="270:13">!</operator><operator pos:start="270:14" pos:end="270:14">(</operator><name pos:start="270:15" pos:end="270:15">p</name> <operator pos:start="270:17" pos:end="270:17">=</operator> <call pos:start="270:19" pos:end="270:40"><name pos:start="270:19" pos:end="270:34">lock_user_string</name><argument_list pos:start="270:35" pos:end="270:40">(<argument pos:start="270:36" pos:end="270:39"><expr pos:start="270:36" pos:end="270:39"><name pos:start="270:36" pos:end="270:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="270:41" pos:end="270:41">)</operator></expr>)</condition><block type="pseudo" pos:start="271:13" pos:end="271:24"><block_content pos:start="271:13" pos:end="271:24">
            <goto pos:start="271:13" pos:end="271:24">goto <name pos:start="271:18" pos:end="271:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="272:9" pos:end="272:46"><expr pos:start="272:9" pos:end="272:45"><name pos:start="272:9" pos:end="272:11">ret</name> <operator pos:start="272:13" pos:end="272:13">=</operator> <call pos:start="272:15" pos:end="272:45"><name pos:start="272:15" pos:end="272:23">get_errno</name><argument_list pos:start="272:24" pos:end="272:45">(<argument pos:start="272:25" pos:end="272:44"><expr pos:start="272:25" pos:end="272:44"><call pos:start="272:25" pos:end="272:44"><name pos:start="272:25" pos:end="272:29">mknod</name><argument_list pos:start="272:30" pos:end="272:44">(<argument pos:start="272:31" pos:end="272:31"><expr pos:start="272:31" pos:end="272:31"><name pos:start="272:31" pos:end="272:31">p</name></expr></argument>, <argument pos:start="272:34" pos:end="272:37"><expr pos:start="272:34" pos:end="272:37"><name pos:start="272:34" pos:end="272:37">arg2</name></expr></argument>, <argument pos:start="272:40" pos:end="272:43"><expr pos:start="272:40" pos:end="272:43"><name pos:start="272:40" pos:end="272:43">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="273:9" pos:end="276:0"><expr pos:start="273:9" pos:end="273:31"><call pos:start="273:9" pos:end="273:31"><name pos:start="273:9" pos:end="273:19">unlock_user</name><argument_list pos:start="273:20" pos:end="273:31">(<argument pos:start="273:21" pos:end="273:21"><expr pos:start="273:21" pos:end="273:21"><name pos:start="273:21" pos:end="273:21">p</name></expr></argument>, <argument pos:start="273:24" pos:end="273:27"><expr pos:start="273:24" pos:end="273:27"><name pos:start="273:24" pos:end="273:27">arg1</name></expr></argument>, <argument pos:start="273:30" pos:end="273:30"><expr pos:start="273:30" pos:end="273:30"><literal type="number" pos:start="273:30" pos:end="273:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="274:1" pos:end="274:6">#<cpp:directive pos:start="274:2" pos:end="274:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="275:1" pos:end="275:30">#<cpp:directive pos:start="275:2" pos:end="275:3">if</cpp:directive> <expr pos:start="275:5" pos:end="275:30"><call pos:start="275:5" pos:end="275:30"><name pos:start="275:5" pos:end="275:11">defined</name><argument_list pos:start="275:12" pos:end="275:30">(<argument pos:start="275:13" pos:end="275:29"><expr pos:start="275:13" pos:end="275:29"><name pos:start="275:13" pos:end="275:29">TARGET_NR_mknodat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="276:5" pos:end="276:27">case <expr pos:start="276:10" pos:end="276:26"><name pos:start="276:10" pos:end="276:26">TARGET_NR_mknodat</name></expr>:</case>
        <if_stmt pos:start="277:9" pos:end="278:24"><if pos:start="277:9" pos:end="278:24">if <condition pos:start="277:12" pos:end="277:42">(<expr pos:start="277:13" pos:end="277:41"><operator pos:start="277:13" pos:end="277:13">!</operator><operator pos:start="277:14" pos:end="277:14">(</operator><name pos:start="277:15" pos:end="277:15">p</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <call pos:start="277:19" pos:end="277:40"><name pos:start="277:19" pos:end="277:34">lock_user_string</name><argument_list pos:start="277:35" pos:end="277:40">(<argument pos:start="277:36" pos:end="277:39"><expr pos:start="277:36" pos:end="277:39"><name pos:start="277:36" pos:end="277:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="277:41" pos:end="277:41">)</operator></expr>)</condition><block type="pseudo" pos:start="278:13" pos:end="278:24"><block_content pos:start="278:13" pos:end="278:24">
            <goto pos:start="278:13" pos:end="278:24">goto <name pos:start="278:18" pos:end="278:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="279:9" pos:end="279:54"><expr pos:start="279:9" pos:end="279:53"><name pos:start="279:9" pos:end="279:11">ret</name> <operator pos:start="279:13" pos:end="279:13">=</operator> <call pos:start="279:15" pos:end="279:53"><name pos:start="279:15" pos:end="279:23">get_errno</name><argument_list pos:start="279:24" pos:end="279:53">(<argument pos:start="279:25" pos:end="279:52"><expr pos:start="279:25" pos:end="279:52"><call pos:start="279:25" pos:end="279:52"><name pos:start="279:25" pos:end="279:31">mknodat</name><argument_list pos:start="279:32" pos:end="279:52">(<argument pos:start="279:33" pos:end="279:36"><expr pos:start="279:33" pos:end="279:36"><name pos:start="279:33" pos:end="279:36">arg1</name></expr></argument>, <argument pos:start="279:39" pos:end="279:39"><expr pos:start="279:39" pos:end="279:39"><name pos:start="279:39" pos:end="279:39">p</name></expr></argument>, <argument pos:start="279:42" pos:end="279:45"><expr pos:start="279:42" pos:end="279:45"><name pos:start="279:42" pos:end="279:45">arg3</name></expr></argument>, <argument pos:start="279:48" pos:end="279:51"><expr pos:start="279:48" pos:end="279:51"><name pos:start="279:48" pos:end="279:51">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="280:9" pos:end="283:0"><expr pos:start="280:9" pos:end="280:31"><call pos:start="280:9" pos:end="280:31"><name pos:start="280:9" pos:end="280:19">unlock_user</name><argument_list pos:start="280:20" pos:end="280:31">(<argument pos:start="280:21" pos:end="280:21"><expr pos:start="280:21" pos:end="280:21"><name pos:start="280:21" pos:end="280:21">p</name></expr></argument>, <argument pos:start="280:24" pos:end="280:27"><expr pos:start="280:24" pos:end="280:27"><name pos:start="280:24" pos:end="280:27">arg2</name></expr></argument>, <argument pos:start="280:30" pos:end="280:30"><expr pos:start="280:30" pos:end="280:30"><literal type="number" pos:start="280:30" pos:end="280:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="281:1" pos:end="281:6">#<cpp:directive pos:start="281:2" pos:end="281:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="282:1" pos:end="282:22">#<cpp:directive pos:start="282:2" pos:end="282:6">ifdef</cpp:directive> <name pos:start="282:8" pos:end="282:22">TARGET_NR_chmod</name></cpp:ifdef>
    <case pos:start="283:5" pos:end="283:25">case <expr pos:start="283:10" pos:end="283:24"><name pos:start="283:10" pos:end="283:24">TARGET_NR_chmod</name></expr>:</case>
        <if_stmt pos:start="284:9" pos:end="285:24"><if pos:start="284:9" pos:end="285:24">if <condition pos:start="284:12" pos:end="284:42">(<expr pos:start="284:13" pos:end="284:41"><operator pos:start="284:13" pos:end="284:13">!</operator><operator pos:start="284:14" pos:end="284:14">(</operator><name pos:start="284:15" pos:end="284:15">p</name> <operator pos:start="284:17" pos:end="284:17">=</operator> <call pos:start="284:19" pos:end="284:40"><name pos:start="284:19" pos:end="284:34">lock_user_string</name><argument_list pos:start="284:35" pos:end="284:40">(<argument pos:start="284:36" pos:end="284:39"><expr pos:start="284:36" pos:end="284:39"><name pos:start="284:36" pos:end="284:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="284:41" pos:end="284:41">)</operator></expr>)</condition><block type="pseudo" pos:start="285:13" pos:end="285:24"><block_content pos:start="285:13" pos:end="285:24">
            <goto pos:start="285:13" pos:end="285:24">goto <name pos:start="285:18" pos:end="285:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="286:9" pos:end="286:40"><expr pos:start="286:9" pos:end="286:39"><name pos:start="286:9" pos:end="286:11">ret</name> <operator pos:start="286:13" pos:end="286:13">=</operator> <call pos:start="286:15" pos:end="286:39"><name pos:start="286:15" pos:end="286:23">get_errno</name><argument_list pos:start="286:24" pos:end="286:39">(<argument pos:start="286:25" pos:end="286:38"><expr pos:start="286:25" pos:end="286:38"><call pos:start="286:25" pos:end="286:38"><name pos:start="286:25" pos:end="286:29">chmod</name><argument_list pos:start="286:30" pos:end="286:38">(<argument pos:start="286:31" pos:end="286:31"><expr pos:start="286:31" pos:end="286:31"><name pos:start="286:31" pos:end="286:31">p</name></expr></argument>, <argument pos:start="286:34" pos:end="286:37"><expr pos:start="286:34" pos:end="286:37"><name pos:start="286:34" pos:end="286:37">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="287:9" pos:end="290:0"><expr pos:start="287:9" pos:end="287:31"><call pos:start="287:9" pos:end="287:31"><name pos:start="287:9" pos:end="287:19">unlock_user</name><argument_list pos:start="287:20" pos:end="287:31">(<argument pos:start="287:21" pos:end="287:21"><expr pos:start="287:21" pos:end="287:21"><name pos:start="287:21" pos:end="287:21">p</name></expr></argument>, <argument pos:start="287:24" pos:end="287:27"><expr pos:start="287:24" pos:end="287:27"><name pos:start="287:24" pos:end="287:27">arg1</name></expr></argument>, <argument pos:start="287:30" pos:end="287:30"><expr pos:start="287:30" pos:end="287:30"><literal type="number" pos:start="287:30" pos:end="287:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="288:1" pos:end="288:6">#<cpp:directive pos:start="288:2" pos:end="288:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="289:1" pos:end="289:22">#<cpp:directive pos:start="289:2" pos:end="289:6">ifdef</cpp:directive> <name pos:start="289:8" pos:end="289:22">TARGET_NR_break</name></cpp:ifdef>
    <case pos:start="290:5" pos:end="290:25">case <expr pos:start="290:10" pos:end="290:24"><name pos:start="290:10" pos:end="290:24">TARGET_NR_break</name></expr>:</case>
        <goto pos:start="291:9" pos:end="294:0">goto <name pos:start="291:14" pos:end="291:26">unimplemented</name>;</goto>
<cpp:endif pos:start="292:1" pos:end="292:6">#<cpp:directive pos:start="292:2" pos:end="292:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="293:1" pos:end="293:24">#<cpp:directive pos:start="293:2" pos:end="293:6">ifdef</cpp:directive> <name pos:start="293:8" pos:end="293:24">TARGET_NR_oldstat</name></cpp:ifdef>
    <case pos:start="294:5" pos:end="294:27">case <expr pos:start="294:10" pos:end="294:26"><name pos:start="294:10" pos:end="294:26">TARGET_NR_oldstat</name></expr>:</case>
        <goto pos:start="295:9" pos:end="297:0">goto <name pos:start="295:14" pos:end="295:26">unimplemented</name>;</goto>
<cpp:endif pos:start="296:1" pos:end="296:6">#<cpp:directive pos:start="296:2" pos:end="296:6">endif</cpp:directive></cpp:endif>
    <case pos:start="297:5" pos:end="297:25">case <expr pos:start="297:10" pos:end="297:24"><name pos:start="297:10" pos:end="297:24">TARGET_NR_lseek</name></expr>:</case>
        <expr_stmt pos:start="298:9" pos:end="300:0"><expr pos:start="298:9" pos:end="298:48"><name pos:start="298:9" pos:end="298:11">ret</name> <operator pos:start="298:13" pos:end="298:13">=</operator> <call pos:start="298:15" pos:end="298:48"><name pos:start="298:15" pos:end="298:23">get_errno</name><argument_list pos:start="298:24" pos:end="298:48">(<argument pos:start="298:25" pos:end="298:47"><expr pos:start="298:25" pos:end="298:47"><call pos:start="298:25" pos:end="298:47"><name pos:start="298:25" pos:end="298:29">lseek</name><argument_list pos:start="298:30" pos:end="298:47">(<argument pos:start="298:31" pos:end="298:34"><expr pos:start="298:31" pos:end="298:34"><name pos:start="298:31" pos:end="298:34">arg1</name></expr></argument>, <argument pos:start="298:37" pos:end="298:40"><expr pos:start="298:37" pos:end="298:40"><name pos:start="298:37" pos:end="298:40">arg2</name></expr></argument>, <argument pos:start="298:43" pos:end="298:46"><expr pos:start="298:43" pos:end="298:46"><name pos:start="298:43" pos:end="298:46">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="299:1" pos:end="299:55">#<cpp:directive pos:start="299:2" pos:end="299:3">if</cpp:directive> <expr pos:start="299:5" pos:end="299:55"><call pos:start="299:5" pos:end="299:30"><name pos:start="299:5" pos:end="299:11">defined</name><argument_list pos:start="299:12" pos:end="299:30">(<argument pos:start="299:13" pos:end="299:29"><expr pos:start="299:13" pos:end="299:29"><name pos:start="299:13" pos:end="299:29">TARGET_NR_getxpid</name></expr></argument>)</argument_list></call> <operator pos:start="299:32" pos:end="299:33">&amp;&amp;</operator> <call pos:start="299:35" pos:end="299:55"><name pos:start="299:35" pos:end="299:41">defined</name><argument_list pos:start="299:42" pos:end="299:55">(<argument pos:start="299:43" pos:end="299:54"><expr pos:start="299:43" pos:end="299:54"><name pos:start="299:43" pos:end="299:54">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block" pos:start="300:5" pos:end="300:24">/* Alpha specific */</comment>
    <case pos:start="301:5" pos:end="301:27">case <expr pos:start="301:10" pos:end="301:26"><name pos:start="301:10" pos:end="301:26">TARGET_NR_getxpid</name></expr>:</case>
        <expr_stmt pos:start="302:9" pos:end="302:58"><expr pos:start="302:9" pos:end="302:57"><operator pos:start="302:9" pos:end="302:9">(</operator><operator pos:start="302:10" pos:end="302:10">(</operator><name pos:start="302:11" pos:end="302:23">CPUAlphaState</name> <operator pos:start="302:25" pos:end="302:25">*</operator><operator pos:start="302:26" pos:end="302:26">)</operator><name pos:start="302:27" pos:end="302:33">cpu_env</name><operator pos:start="302:34" pos:end="302:34">)</operator><operator pos:start="302:35" pos:end="302:36">-&gt;</operator><name pos:start="302:37" pos:end="302:45"><name pos:start="302:37" pos:end="302:38">ir</name><index pos:start="302:39" pos:end="302:45">[<expr pos:start="302:40" pos:end="302:44"><name pos:start="302:40" pos:end="302:44">IR_A4</name></expr>]</index></name> <operator pos:start="302:47" pos:end="302:47">=</operator> <call pos:start="302:49" pos:end="302:57"><name pos:start="302:49" pos:end="302:55">getppid</name><argument_list pos:start="302:56" pos:end="302:57">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="303:9" pos:end="306:0"><expr pos:start="303:9" pos:end="303:33"><name pos:start="303:9" pos:end="303:11">ret</name> <operator pos:start="303:13" pos:end="303:13">=</operator> <call pos:start="303:15" pos:end="303:33"><name pos:start="303:15" pos:end="303:23">get_errno</name><argument_list pos:start="303:24" pos:end="303:33">(<argument pos:start="303:25" pos:end="303:32"><expr pos:start="303:25" pos:end="303:32"><call pos:start="303:25" pos:end="303:32"><name pos:start="303:25" pos:end="303:30">getpid</name><argument_list pos:start="303:31" pos:end="303:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="304:1" pos:end="304:6">#<cpp:directive pos:start="304:2" pos:end="304:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="305:1" pos:end="305:23">#<cpp:directive pos:start="305:2" pos:end="305:6">ifdef</cpp:directive> <name pos:start="305:8" pos:end="305:23">TARGET_NR_getpid</name></cpp:ifdef>
    <case pos:start="306:5" pos:end="306:26">case <expr pos:start="306:10" pos:end="306:25"><name pos:start="306:10" pos:end="306:25">TARGET_NR_getpid</name></expr>:</case>
        <expr_stmt pos:start="307:9" pos:end="309:0"><expr pos:start="307:9" pos:end="307:33"><name pos:start="307:9" pos:end="307:11">ret</name> <operator pos:start="307:13" pos:end="307:13">=</operator> <call pos:start="307:15" pos:end="307:33"><name pos:start="307:15" pos:end="307:23">get_errno</name><argument_list pos:start="307:24" pos:end="307:33">(<argument pos:start="307:25" pos:end="307:32"><expr pos:start="307:25" pos:end="307:32"><call pos:start="307:25" pos:end="307:32"><name pos:start="307:25" pos:end="307:30">getpid</name><argument_list pos:start="307:31" pos:end="307:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="308:1" pos:end="308:6">#<cpp:directive pos:start="308:2" pos:end="308:6">endif</cpp:directive></cpp:endif>
    <case pos:start="309:5" pos:end="309:25">case <expr pos:start="309:10" pos:end="309:24"><name pos:start="309:10" pos:end="309:24">TARGET_NR_mount</name></expr>:</case>
        <block pos:start="310:9" pos:end="3541:14">{<block_content pos:start="312:13" pos:end="3541:14">
            <comment type="block" pos:start="311:13" pos:end="311:48">/* need to look at the data field */</comment>
            <decl_stmt pos:start="312:13" pos:end="312:26"><decl pos:start="312:13" pos:end="312:20"><type pos:start="312:13" pos:end="312:18"><name pos:start="312:13" pos:end="312:16">void</name> <modifier pos:start="312:18" pos:end="312:18">*</modifier></type><name pos:start="312:19" pos:end="312:20">p2</name></decl>, <decl pos:start="312:23" pos:end="312:25"><type ref="prev" pos:start="312:13" pos:end="312:18"><modifier pos:start="312:23" pos:end="312:23">*</modifier></type><name pos:start="312:24" pos:end="312:25">p3</name></decl>;</decl_stmt>
            <if_stmt pos:start="313:13" pos:end="3541:14"><if pos:start="313:13" pos:end="3541:14">if <condition pos:start="313:16" pos:end="313:21">(<expr pos:start="313:17" pos:end="313:20"><name pos:start="313:17" pos:end="313:20">arg1</name></expr>)</condition> <block pos:start="313:23" pos:end="3541:14">{<block_content pos:start="314:17" pos:end="3541:14">
                <expr_stmt pos:start="314:17" pos:end="314:43"><expr pos:start="314:17" pos:end="314:42"><name pos:start="314:17" pos:end="314:17">p</name> <operator pos:start="314:19" pos:end="314:19">=</operator> <call pos:start="314:21" pos:end="314:42"><name pos:start="314:21" pos:end="314:36">lock_user_string</name><argument_list pos:start="314:37" pos:end="314:42">(<argument pos:start="314:38" pos:end="314:41"><expr pos:start="314:38" pos:end="314:41"><name pos:start="314:38" pos:end="314:41">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="315:17" pos:end="3541:14"><if pos:start="315:17" pos:end="317:13">if <condition pos:start="315:20" pos:end="315:23">(<expr pos:start="315:21" pos:end="315:22"><operator pos:start="315:21" pos:end="315:21">!</operator><name pos:start="315:22" pos:end="315:22">p</name></expr>)</condition> <block pos:start="315:25" pos:end="317:13">{<block_content pos:start="316:21" pos:end="316:32">
                    <goto pos:start="316:21" pos:end="316:32">goto <name pos:start="316:26" pos:end="316:31">efault</name>;</goto>
            </block_content>}</block></if> <else pos:start="317:15" pos:end="3541:14">else <block pos:start="317:20" pos:end="3541:14">{<block_content pos:start="318:17" pos:end="3541:14">
                <expr_stmt pos:start="318:17" pos:end="318:25"><expr pos:start="318:17" pos:end="318:24"><name pos:start="318:17" pos:end="318:17">p</name> <operator pos:start="318:19" pos:end="318:19">=</operator> <name pos:start="318:21" pos:end="318:24">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="319:13" pos:end="319:40"><expr pos:start="319:13" pos:end="319:39"><name pos:start="319:13" pos:end="319:14">p2</name> <operator pos:start="319:16" pos:end="319:16">=</operator> <call pos:start="319:18" pos:end="319:39"><name pos:start="319:18" pos:end="319:33">lock_user_string</name><argument_list pos:start="319:34" pos:end="319:39">(<argument pos:start="319:35" pos:end="319:38"><expr pos:start="319:35" pos:end="319:38"><name pos:start="319:35" pos:end="319:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="320:13" pos:end="3541:14"><if pos:start="320:13" pos:end="3541:14">if <condition pos:start="320:16" pos:end="320:20">(<expr pos:start="320:17" pos:end="320:19"><operator pos:start="320:17" pos:end="320:17">!</operator><name pos:start="320:18" pos:end="320:19">p2</name></expr>)</condition> <block pos:start="320:22" pos:end="3541:14">{<block_content pos:start="321:17" pos:end="3541:14">
                <if_stmt pos:start="321:17" pos:end="3541:14"><if pos:start="321:17" pos:end="3541:14">if <condition pos:start="321:20" pos:end="321:25">(<expr pos:start="321:21" pos:end="321:24"><name pos:start="321:21" pos:end="321:24">arg1</name></expr>)</condition> <block pos:start="321:27" pos:end="3541:14">{<block_content pos:start="322:21" pos:end="3541:14">
                    <expr_stmt pos:start="322:21" pos:end="322:44"><expr pos:start="322:21" pos:end="322:43"><call pos:start="322:21" pos:end="322:43"><name pos:start="322:21" pos:end="322:31">unlock_user</name><argument_list pos:start="322:32" pos:end="322:43">(<argument pos:start="322:33" pos:end="322:33"><expr pos:start="322:33" pos:end="322:33"><name pos:start="322:33" pos:end="322:33">p</name></expr></argument>, <argument pos:start="322:36" pos:end="322:39"><expr pos:start="322:36" pos:end="322:39"><name pos:start="322:36" pos:end="322:39">arg1</name></expr></argument>, <argument pos:start="322:42" pos:end="322:42"><expr pos:start="322:42" pos:end="322:42"><literal type="number" pos:start="322:42" pos:end="322:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="323:17" pos:end="323:28">goto <name pos:start="323:22" pos:end="323:27">efault</name>;</goto>
            <if_stmt pos:start="324:13" pos:end="3541:14"><if pos:start="324:13" pos:end="3541:14">if <condition pos:start="324:16" pos:end="324:21">(<expr pos:start="324:17" pos:end="324:20"><name pos:start="324:17" pos:end="324:20">arg3</name></expr>)</condition> <block pos:start="324:23" pos:end="3541:14">{<block_content pos:start="325:17" pos:end="3541:14">
                <expr_stmt pos:start="325:17" pos:end="325:44"><expr pos:start="325:17" pos:end="325:43"><name pos:start="325:17" pos:end="325:18">p3</name> <operator pos:start="325:20" pos:end="325:20">=</operator> <call pos:start="325:22" pos:end="325:43"><name pos:start="325:22" pos:end="325:37">lock_user_string</name><argument_list pos:start="325:38" pos:end="325:43">(<argument pos:start="325:39" pos:end="325:42"><expr pos:start="325:39" pos:end="325:42"><name pos:start="325:39" pos:end="325:42">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="326:17" pos:end="3541:14"><if pos:start="326:17" pos:end="3541:14">if <condition pos:start="326:20" pos:end="326:24">(<expr pos:start="326:21" pos:end="326:23"><operator pos:start="326:21" pos:end="326:21">!</operator><name pos:start="326:22" pos:end="326:23">p3</name></expr>)</condition> <block pos:start="326:26" pos:end="3541:14">{<block_content pos:start="327:21" pos:end="3541:14">
                    <if_stmt pos:start="327:21" pos:end="3541:14"><if pos:start="327:21" pos:end="331:13">if <condition pos:start="327:24" pos:end="327:29">(<expr pos:start="327:25" pos:end="327:28"><name pos:start="327:25" pos:end="327:28">arg1</name></expr>)</condition> <block pos:start="327:31" pos:end="331:13">{<block_content pos:start="328:25" pos:end="330:32">
                        <expr_stmt pos:start="328:25" pos:end="328:48"><expr pos:start="328:25" pos:end="328:47"><call pos:start="328:25" pos:end="328:47"><name pos:start="328:25" pos:end="328:35">unlock_user</name><argument_list pos:start="328:36" pos:end="328:47">(<argument pos:start="328:37" pos:end="328:37"><expr pos:start="328:37" pos:end="328:37"><name pos:start="328:37" pos:end="328:37">p</name></expr></argument>, <argument pos:start="328:40" pos:end="328:43"><expr pos:start="328:40" pos:end="328:43"><name pos:start="328:40" pos:end="328:43">arg1</name></expr></argument>, <argument pos:start="328:46" pos:end="328:46"><expr pos:start="328:46" pos:end="328:46"><literal type="number" pos:start="328:46" pos:end="328:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="329:21" pos:end="329:45"><expr pos:start="329:21" pos:end="329:44"><call pos:start="329:21" pos:end="329:44"><name pos:start="329:21" pos:end="329:31">unlock_user</name><argument_list pos:start="329:32" pos:end="329:44">(<argument pos:start="329:33" pos:end="329:34"><expr pos:start="329:33" pos:end="329:34"><name pos:start="329:33" pos:end="329:34">p2</name></expr></argument>, <argument pos:start="329:37" pos:end="329:40"><expr pos:start="329:37" pos:end="329:40"><name pos:start="329:37" pos:end="329:40">arg2</name></expr></argument>, <argument pos:start="329:43" pos:end="329:43"><expr pos:start="329:43" pos:end="329:43"><literal type="number" pos:start="329:43" pos:end="329:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto pos:start="330:21" pos:end="330:32">goto <name pos:start="330:26" pos:end="330:31">efault</name>;</goto>
            </block_content>}</block></if> <else pos:start="331:15" pos:end="3541:14">else <block pos:start="331:20" pos:end="3541:14">{<block_content pos:start="332:17" pos:end="3541:14">
                <expr_stmt pos:start="332:17" pos:end="332:26"><expr pos:start="332:17" pos:end="332:25"><name pos:start="332:17" pos:end="332:18">p3</name> <operator pos:start="332:20" pos:end="332:20">=</operator> <name pos:start="332:22" pos:end="332:25">NULL</name></expr>;</expr_stmt>
            <comment type="block" pos:start="333:13" pos:end="336:15">/* FIXME - arg5 should be locked, but it isn't clear how to
             * do that since it's not guaranteed to be a NULL-terminated
             * string.
             */</comment>
            <if_stmt pos:start="337:13" pos:end="3541:14"><if pos:start="337:13" pos:end="339:13">if <condition pos:start="337:16" pos:end="337:22">(<expr pos:start="337:17" pos:end="337:21"><operator pos:start="337:17" pos:end="337:17">!</operator><name pos:start="337:18" pos:end="337:21">arg5</name></expr>)</condition> <block pos:start="337:24" pos:end="339:13">{<block_content pos:start="338:17" pos:end="338:66">
                <expr_stmt pos:start="338:17" pos:end="338:66"><expr pos:start="338:17" pos:end="338:65"><name pos:start="338:17" pos:end="338:19">ret</name> <operator pos:start="338:21" pos:end="338:21">=</operator> <call pos:start="338:23" pos:end="338:65"><name pos:start="338:23" pos:end="338:27">mount</name><argument_list pos:start="338:28" pos:end="338:65">(<argument pos:start="338:29" pos:end="338:29"><expr pos:start="338:29" pos:end="338:29"><name pos:start="338:29" pos:end="338:29">p</name></expr></argument>, <argument pos:start="338:32" pos:end="338:33"><expr pos:start="338:32" pos:end="338:33"><name pos:start="338:32" pos:end="338:33">p2</name></expr></argument>, <argument pos:start="338:36" pos:end="338:37"><expr pos:start="338:36" pos:end="338:37"><name pos:start="338:36" pos:end="338:37">p3</name></expr></argument>, <argument pos:start="338:40" pos:end="338:58"><expr pos:start="338:40" pos:end="338:58"><operator pos:start="338:40" pos:end="338:40">(</operator><name pos:start="338:41" pos:end="338:48">unsigned</name> <name pos:start="338:50" pos:end="338:53">long</name><operator pos:start="338:54" pos:end="338:54">)</operator><name pos:start="338:55" pos:end="338:58">arg4</name></expr></argument>, <argument pos:start="338:61" pos:end="338:64"><expr pos:start="338:61" pos:end="338:64"><name pos:start="338:61" pos:end="338:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="339:15" pos:end="3541:14">else <block pos:start="339:20" pos:end="3541:14">{<block_content pos:start="340:17" pos:end="3541:14">
                <expr_stmt pos:start="340:17" pos:end="340:71"><expr pos:start="340:17" pos:end="340:70"><name pos:start="340:17" pos:end="340:19">ret</name> <operator pos:start="340:21" pos:end="340:21">=</operator> <call pos:start="340:23" pos:end="340:70"><name pos:start="340:23" pos:end="340:27">mount</name><argument_list pos:start="340:28" pos:end="340:70">(<argument pos:start="340:29" pos:end="340:29"><expr pos:start="340:29" pos:end="340:29"><name pos:start="340:29" pos:end="340:29">p</name></expr></argument>, <argument pos:start="340:32" pos:end="340:33"><expr pos:start="340:32" pos:end="340:33"><name pos:start="340:32" pos:end="340:33">p2</name></expr></argument>, <argument pos:start="340:36" pos:end="340:37"><expr pos:start="340:36" pos:end="340:37"><name pos:start="340:36" pos:end="340:37">p3</name></expr></argument>, <argument pos:start="340:40" pos:end="340:58"><expr pos:start="340:40" pos:end="340:58"><operator pos:start="340:40" pos:end="340:40">(</operator><name pos:start="340:41" pos:end="340:48">unsigned</name> <name pos:start="340:50" pos:end="340:53">long</name><operator pos:start="340:54" pos:end="340:54">)</operator><name pos:start="340:55" pos:end="340:58">arg4</name></expr></argument>, <argument pos:start="340:61" pos:end="340:69"><expr pos:start="340:61" pos:end="340:69"><call pos:start="340:61" pos:end="340:69"><name pos:start="340:61" pos:end="340:63">g2h</name><argument_list pos:start="340:64" pos:end="340:69">(<argument pos:start="340:65" pos:end="340:68"><expr pos:start="340:65" pos:end="340:68"><name pos:start="340:65" pos:end="340:68">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="341:13" pos:end="341:33"><expr pos:start="341:13" pos:end="341:32"><name pos:start="341:13" pos:end="341:15">ret</name> <operator pos:start="341:17" pos:end="341:17">=</operator> <call pos:start="341:19" pos:end="341:32"><name pos:start="341:19" pos:end="341:27">get_errno</name><argument_list pos:start="341:28" pos:end="341:32">(<argument pos:start="341:29" pos:end="341:31"><expr pos:start="341:29" pos:end="341:31"><name pos:start="341:29" pos:end="341:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="342:13" pos:end="3541:14"><if pos:start="342:13" pos:end="3541:14">if <condition pos:start="342:16" pos:end="342:21">(<expr pos:start="342:17" pos:end="342:20"><name pos:start="342:17" pos:end="342:20">arg1</name></expr>)</condition> <block pos:start="342:23" pos:end="3541:14">{<block_content pos:start="343:17" pos:end="3541:14">
                <expr_stmt pos:start="343:17" pos:end="343:40"><expr pos:start="343:17" pos:end="343:39"><call pos:start="343:17" pos:end="343:39"><name pos:start="343:17" pos:end="343:27">unlock_user</name><argument_list pos:start="343:28" pos:end="343:39">(<argument pos:start="343:29" pos:end="343:29"><expr pos:start="343:29" pos:end="343:29"><name pos:start="343:29" pos:end="343:29">p</name></expr></argument>, <argument pos:start="343:32" pos:end="343:35"><expr pos:start="343:32" pos:end="343:35"><name pos:start="343:32" pos:end="343:35">arg1</name></expr></argument>, <argument pos:start="343:38" pos:end="343:38"><expr pos:start="343:38" pos:end="343:38"><literal type="number" pos:start="343:38" pos:end="343:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="344:13" pos:end="344:37"><expr pos:start="344:13" pos:end="344:36"><call pos:start="344:13" pos:end="344:36"><name pos:start="344:13" pos:end="344:23">unlock_user</name><argument_list pos:start="344:24" pos:end="344:36">(<argument pos:start="344:25" pos:end="344:26"><expr pos:start="344:25" pos:end="344:26"><name pos:start="344:25" pos:end="344:26">p2</name></expr></argument>, <argument pos:start="344:29" pos:end="344:32"><expr pos:start="344:29" pos:end="344:32"><name pos:start="344:29" pos:end="344:32">arg2</name></expr></argument>, <argument pos:start="344:35" pos:end="344:35"><expr pos:start="344:35" pos:end="344:35"><literal type="number" pos:start="344:35" pos:end="344:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="345:13" pos:end="3541:14"><if pos:start="345:13" pos:end="3541:14">if <condition pos:start="345:16" pos:end="345:21">(<expr pos:start="345:17" pos:end="345:20"><name pos:start="345:17" pos:end="345:20">arg3</name></expr>)</condition> <block pos:start="345:23" pos:end="3541:14">{<block_content pos:start="346:17" pos:end="3541:14">
                <expr_stmt pos:start="346:17" pos:end="348:0"><expr pos:start="346:17" pos:end="346:40"><call pos:start="346:17" pos:end="346:40"><name pos:start="346:17" pos:end="346:27">unlock_user</name><argument_list pos:start="346:28" pos:end="346:40">(<argument pos:start="346:29" pos:end="346:30"><expr pos:start="346:29" pos:end="346:30"><name pos:start="346:29" pos:end="346:30">p3</name></expr></argument>, <argument pos:start="346:33" pos:end="346:36"><expr pos:start="346:33" pos:end="346:36"><name pos:start="346:33" pos:end="346:36">arg3</name></expr></argument>, <argument pos:start="346:39" pos:end="346:39"><expr pos:start="346:39" pos:end="346:39"><literal type="number" pos:start="346:39" pos:end="346:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="347:1" pos:end="347:23">#<cpp:directive pos:start="347:2" pos:end="347:6">ifdef</cpp:directive> <name pos:start="347:8" pos:end="347:23">TARGET_NR_umount</name></cpp:ifdef>
    <case pos:start="348:5" pos:end="348:26">case <expr pos:start="348:10" pos:end="348:25"><name pos:start="348:10" pos:end="348:25">TARGET_NR_umount</name></expr>:</case>
        <if_stmt pos:start="349:9" pos:end="350:24"><if pos:start="349:9" pos:end="350:24">if <condition pos:start="349:12" pos:end="349:42">(<expr pos:start="349:13" pos:end="349:41"><operator pos:start="349:13" pos:end="349:13">!</operator><operator pos:start="349:14" pos:end="349:14">(</operator><name pos:start="349:15" pos:end="349:15">p</name> <operator pos:start="349:17" pos:end="349:17">=</operator> <call pos:start="349:19" pos:end="349:40"><name pos:start="349:19" pos:end="349:34">lock_user_string</name><argument_list pos:start="349:35" pos:end="349:40">(<argument pos:start="349:36" pos:end="349:39"><expr pos:start="349:36" pos:end="349:39"><name pos:start="349:36" pos:end="349:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="349:41" pos:end="349:41">)</operator></expr>)</condition><block type="pseudo" pos:start="350:13" pos:end="350:24"><block_content pos:start="350:13" pos:end="350:24">
            <goto pos:start="350:13" pos:end="350:24">goto <name pos:start="350:18" pos:end="350:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="351:9" pos:end="351:35"><expr pos:start="351:9" pos:end="351:34"><name pos:start="351:9" pos:end="351:11">ret</name> <operator pos:start="351:13" pos:end="351:13">=</operator> <call pos:start="351:15" pos:end="351:34"><name pos:start="351:15" pos:end="351:23">get_errno</name><argument_list pos:start="351:24" pos:end="351:34">(<argument pos:start="351:25" pos:end="351:33"><expr pos:start="351:25" pos:end="351:33"><call pos:start="351:25" pos:end="351:33"><name pos:start="351:25" pos:end="351:30">umount</name><argument_list pos:start="351:31" pos:end="351:33">(<argument pos:start="351:32" pos:end="351:32"><expr pos:start="351:32" pos:end="351:32"><name pos:start="351:32" pos:end="351:32">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="352:9" pos:end="355:0"><expr pos:start="352:9" pos:end="352:31"><call pos:start="352:9" pos:end="352:31"><name pos:start="352:9" pos:end="352:19">unlock_user</name><argument_list pos:start="352:20" pos:end="352:31">(<argument pos:start="352:21" pos:end="352:21"><expr pos:start="352:21" pos:end="352:21"><name pos:start="352:21" pos:end="352:21">p</name></expr></argument>, <argument pos:start="352:24" pos:end="352:27"><expr pos:start="352:24" pos:end="352:27"><name pos:start="352:24" pos:end="352:27">arg1</name></expr></argument>, <argument pos:start="352:30" pos:end="352:30"><expr pos:start="352:30" pos:end="352:30"><literal type="number" pos:start="352:30" pos:end="352:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="353:1" pos:end="353:6">#<cpp:directive pos:start="353:2" pos:end="353:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="354:1" pos:end="354:22">#<cpp:directive pos:start="354:2" pos:end="354:6">ifdef</cpp:directive> <name pos:start="354:8" pos:end="354:22">TARGET_NR_stime</name></cpp:ifdef> <comment type="block" pos:start="354:24" pos:end="354:41">/* not on alpha */</comment>
    <case pos:start="355:5" pos:end="355:25">case <expr pos:start="355:10" pos:end="355:24"><name pos:start="355:10" pos:end="355:24">TARGET_NR_stime</name></expr>:</case>
        <block pos:start="356:9" pos:end="3541:14">{<block_content pos:start="357:13" pos:end="3541:14">
            <decl_stmt pos:start="357:13" pos:end="357:29"><decl pos:start="357:13" pos:end="357:28"><type pos:start="357:13" pos:end="357:18"><name pos:start="357:13" pos:end="357:18">time_t</name></type> <name pos:start="357:20" pos:end="357:28">host_time</name></decl>;</decl_stmt>
            <if_stmt pos:start="358:13" pos:end="359:28"><if pos:start="358:13" pos:end="359:28">if <condition pos:start="358:16" pos:end="358:46">(<expr pos:start="358:17" pos:end="358:45"><call pos:start="358:17" pos:end="358:45"><name pos:start="358:17" pos:end="358:28">get_user_sal</name><argument_list pos:start="358:29" pos:end="358:45">(<argument pos:start="358:30" pos:end="358:38"><expr pos:start="358:30" pos:end="358:38"><name pos:start="358:30" pos:end="358:38">host_time</name></expr></argument>, <argument pos:start="358:41" pos:end="358:44"><expr pos:start="358:41" pos:end="358:44"><name pos:start="358:41" pos:end="358:44">arg1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="359:17" pos:end="359:28"><block_content pos:start="359:17" pos:end="359:28">
                <goto pos:start="359:17" pos:end="359:28">goto <name pos:start="359:22" pos:end="359:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="360:13" pos:end="362:0"><expr pos:start="360:13" pos:end="360:46"><name pos:start="360:13" pos:end="360:15">ret</name> <operator pos:start="360:17" pos:end="360:17">=</operator> <call pos:start="360:19" pos:end="360:46"><name pos:start="360:19" pos:end="360:27">get_errno</name><argument_list pos:start="360:28" pos:end="360:46">(<argument pos:start="360:29" pos:end="360:45"><expr pos:start="360:29" pos:end="360:45"><call pos:start="360:29" pos:end="360:45"><name pos:start="360:29" pos:end="360:33">stime</name><argument_list pos:start="360:34" pos:end="360:45">(<argument pos:start="360:35" pos:end="360:44"><expr pos:start="360:35" pos:end="360:44"><operator pos:start="360:35" pos:end="360:35">&amp;</operator><name pos:start="360:36" pos:end="360:44">host_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="361:1" pos:end="361:6">#<cpp:directive pos:start="361:2" pos:end="361:6">endif</cpp:directive></cpp:endif>
    <case pos:start="362:5" pos:end="362:26">case <expr pos:start="362:10" pos:end="362:25"><name pos:start="362:10" pos:end="362:25">TARGET_NR_ptrace</name></expr>:</case>
        <goto pos:start="363:9" pos:end="365:0">goto <name pos:start="363:14" pos:end="363:26">unimplemented</name>;</goto>
<cpp:ifdef pos:start="364:1" pos:end="364:22">#<cpp:directive pos:start="364:2" pos:end="364:6">ifdef</cpp:directive> <name pos:start="364:8" pos:end="364:22">TARGET_NR_alarm</name></cpp:ifdef> <comment type="block" pos:start="364:24" pos:end="364:41">/* not on alpha */</comment>
    <case pos:start="365:5" pos:end="365:25">case <expr pos:start="365:10" pos:end="365:24"><name pos:start="365:10" pos:end="365:24">TARGET_NR_alarm</name></expr>:</case>
        <expr_stmt pos:start="366:9" pos:end="369:0"><expr pos:start="366:9" pos:end="366:25"><name pos:start="366:9" pos:end="366:11">ret</name> <operator pos:start="366:13" pos:end="366:13">=</operator> <call pos:start="366:15" pos:end="366:25"><name pos:start="366:15" pos:end="366:19">alarm</name><argument_list pos:start="366:20" pos:end="366:25">(<argument pos:start="366:21" pos:end="366:24"><expr pos:start="366:21" pos:end="366:24"><name pos:start="366:21" pos:end="366:24">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="367:1" pos:end="367:6">#<cpp:directive pos:start="367:2" pos:end="367:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="368:1" pos:end="368:25">#<cpp:directive pos:start="368:2" pos:end="368:6">ifdef</cpp:directive> <name pos:start="368:8" pos:end="368:25">TARGET_NR_oldfstat</name></cpp:ifdef>
    <case pos:start="369:5" pos:end="369:28">case <expr pos:start="369:10" pos:end="369:27"><name pos:start="369:10" pos:end="369:27">TARGET_NR_oldfstat</name></expr>:</case>
        <goto pos:start="370:9" pos:end="373:0">goto <name pos:start="370:14" pos:end="370:26">unimplemented</name>;</goto>
<cpp:endif pos:start="371:1" pos:end="371:6">#<cpp:directive pos:start="371:2" pos:end="371:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="372:1" pos:end="372:22">#<cpp:directive pos:start="372:2" pos:end="372:6">ifdef</cpp:directive> <name pos:start="372:8" pos:end="372:22">TARGET_NR_pause</name></cpp:ifdef> <comment type="block" pos:start="372:24" pos:end="372:41">/* not on alpha */</comment>
    <case pos:start="373:5" pos:end="373:25">case <expr pos:start="373:10" pos:end="373:24"><name pos:start="373:10" pos:end="373:24">TARGET_NR_pause</name></expr>:</case>
        <if_stmt pos:start="374:9" pos:end="3541:14"><if pos:start="374:9" pos:end="3541:14">if <condition pos:start="374:12" pos:end="374:29">(<expr pos:start="374:13" pos:end="374:28"><operator pos:start="374:13" pos:end="374:13">!</operator><call pos:start="374:14" pos:end="374:28"><name pos:start="374:14" pos:end="374:26">block_signals</name><argument_list pos:start="374:27" pos:end="374:28">()</argument_list></call></expr>)</condition> <block pos:start="374:31" pos:end="3541:14">{<block_content pos:start="375:13" pos:end="3541:14">
            <expr_stmt pos:start="375:13" pos:end="375:65"><expr pos:start="375:13" pos:end="375:64"><call pos:start="375:13" pos:end="375:64"><name pos:start="375:13" pos:end="375:22">sigsuspend</name><argument_list pos:start="375:23" pos:end="375:64">(<argument pos:start="375:24" pos:end="375:63"><expr pos:start="375:24" pos:end="375:63"><operator pos:start="375:24" pos:end="375:24">&amp;</operator><operator pos:start="375:25" pos:end="375:25">(</operator><operator pos:start="375:26" pos:end="375:26">(</operator><name pos:start="375:27" pos:end="375:35">TaskState</name> <operator pos:start="375:37" pos:end="375:37">*</operator><operator pos:start="375:38" pos:end="375:38">)</operator><name pos:start="375:39" pos:end="375:49"><name pos:start="375:39" pos:end="375:41">cpu</name><operator pos:start="375:42" pos:end="375:43">-&gt;</operator><name pos:start="375:44" pos:end="375:49">opaque</name></name><operator pos:start="375:50" pos:end="375:50">)</operator><operator pos:start="375:51" pos:end="375:52">-&gt;</operator><name pos:start="375:53" pos:end="375:63">signal_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="376:9" pos:end="379:0"><expr pos:start="376:9" pos:end="376:27"><name pos:start="376:9" pos:end="376:11">ret</name> <operator pos:start="376:13" pos:end="376:13">=</operator> <operator pos:start="376:15" pos:end="376:15">-</operator><name pos:start="376:16" pos:end="376:27">TARGET_EINTR</name></expr>;</expr_stmt>
<cpp:endif pos:start="377:1" pos:end="377:6">#<cpp:directive pos:start="377:2" pos:end="377:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="378:1" pos:end="378:22">#<cpp:directive pos:start="378:2" pos:end="378:6">ifdef</cpp:directive> <name pos:start="378:8" pos:end="378:22">TARGET_NR_utime</name></cpp:ifdef>
    <case pos:start="379:5" pos:end="379:25">case <expr pos:start="379:10" pos:end="379:24"><name pos:start="379:10" pos:end="379:24">TARGET_NR_utime</name></expr>:</case>
        <block pos:start="380:9" pos:end="3541:14">{<block_content pos:start="381:13" pos:end="3541:14">
            <decl_stmt pos:start="381:13" pos:end="381:44"><decl pos:start="381:13" pos:end="381:31"><type pos:start="381:13" pos:end="381:26"><name pos:start="381:13" pos:end="381:26"><name pos:start="381:13" pos:end="381:18">struct</name> <name pos:start="381:20" pos:end="381:26">utimbuf</name></name></type> <name pos:start="381:28" pos:end="381:31">tbuf</name></decl>, <decl pos:start="381:34" pos:end="381:43"><type ref="prev" pos:start="381:13" pos:end="381:26"><modifier pos:start="381:34" pos:end="381:34">*</modifier></type><name pos:start="381:35" pos:end="381:43">host_tbuf</name></decl>;</decl_stmt>
            <decl_stmt pos:start="382:13" pos:end="382:47"><decl pos:start="382:13" pos:end="382:46"><type pos:start="382:13" pos:end="382:35"><name pos:start="382:13" pos:end="382:33"><name pos:start="382:13" pos:end="382:18">struct</name> <name pos:start="382:20" pos:end="382:33">target_utimbuf</name></name> <modifier pos:start="382:35" pos:end="382:35">*</modifier></type><name pos:start="382:36" pos:end="382:46">target_tbuf</name></decl>;</decl_stmt>
            <if_stmt pos:start="383:13" pos:end="3541:14"><if pos:start="383:13" pos:end="390:13">if <condition pos:start="383:16" pos:end="383:21">(<expr pos:start="383:17" pos:end="383:20"><name pos:start="383:17" pos:end="383:20">arg2</name></expr>)</condition> <block pos:start="383:23" pos:end="390:13">{<block_content pos:start="384:17" pos:end="389:34">
                <if_stmt pos:start="384:17" pos:end="385:32"><if pos:start="384:17" pos:end="385:32">if <condition pos:start="384:20" pos:end="384:73">(<expr pos:start="384:21" pos:end="384:72"><operator pos:start="384:21" pos:end="384:21">!</operator><call pos:start="384:22" pos:end="384:72"><name pos:start="384:22" pos:end="384:37">lock_user_struct</name><argument_list pos:start="384:38" pos:end="384:72">(<argument pos:start="384:39" pos:end="384:49"><expr pos:start="384:39" pos:end="384:49"><name pos:start="384:39" pos:end="384:49">VERIFY_READ</name></expr></argument>, <argument pos:start="384:52" pos:end="384:62"><expr pos:start="384:52" pos:end="384:62"><name pos:start="384:52" pos:end="384:62">target_tbuf</name></expr></argument>, <argument pos:start="384:65" pos:end="384:68"><expr pos:start="384:65" pos:end="384:68"><name pos:start="384:65" pos:end="384:68">arg2</name></expr></argument>, <argument pos:start="384:71" pos:end="384:71"><expr pos:start="384:71" pos:end="384:71"><literal type="number" pos:start="384:71" pos:end="384:71">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="385:21" pos:end="385:32"><block_content pos:start="385:21" pos:end="385:32">
                    <goto pos:start="385:21" pos:end="385:32">goto <name pos:start="385:26" pos:end="385:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="386:17" pos:end="386:59"><expr pos:start="386:17" pos:end="386:58"><name pos:start="386:17" pos:end="386:27"><name pos:start="386:17" pos:end="386:20">tbuf</name><operator pos:start="386:21" pos:end="386:21">.</operator><name pos:start="386:22" pos:end="386:27">actime</name></name> <operator pos:start="386:29" pos:end="386:29">=</operator> <call pos:start="386:31" pos:end="386:58"><name pos:start="386:31" pos:end="386:37">tswapal</name><argument_list pos:start="386:38" pos:end="386:58">(<argument pos:start="386:39" pos:end="386:57"><expr pos:start="386:39" pos:end="386:57"><name pos:start="386:39" pos:end="386:57"><name pos:start="386:39" pos:end="386:49">target_tbuf</name><operator pos:start="386:50" pos:end="386:51">-&gt;</operator><name pos:start="386:52" pos:end="386:57">actime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="387:17" pos:end="387:61"><expr pos:start="387:17" pos:end="387:60"><name pos:start="387:17" pos:end="387:28"><name pos:start="387:17" pos:end="387:20">tbuf</name><operator pos:start="387:21" pos:end="387:21">.</operator><name pos:start="387:22" pos:end="387:28">modtime</name></name> <operator pos:start="387:30" pos:end="387:30">=</operator> <call pos:start="387:32" pos:end="387:60"><name pos:start="387:32" pos:end="387:38">tswapal</name><argument_list pos:start="387:39" pos:end="387:60">(<argument pos:start="387:40" pos:end="387:59"><expr pos:start="387:40" pos:end="387:59"><name pos:start="387:40" pos:end="387:59"><name pos:start="387:40" pos:end="387:50">target_tbuf</name><operator pos:start="387:51" pos:end="387:52">-&gt;</operator><name pos:start="387:53" pos:end="387:59">modtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="388:17" pos:end="388:57"><expr pos:start="388:17" pos:end="388:56"><call pos:start="388:17" pos:end="388:56"><name pos:start="388:17" pos:end="388:34">unlock_user_struct</name><argument_list pos:start="388:35" pos:end="388:56">(<argument pos:start="388:36" pos:end="388:46"><expr pos:start="388:36" pos:end="388:46"><name pos:start="388:36" pos:end="388:46">target_tbuf</name></expr></argument>, <argument pos:start="388:49" pos:end="388:52"><expr pos:start="388:49" pos:end="388:52"><name pos:start="388:49" pos:end="388:52">arg2</name></expr></argument>, <argument pos:start="388:55" pos:end="388:55"><expr pos:start="388:55" pos:end="388:55"><literal type="number" pos:start="388:55" pos:end="388:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="389:17" pos:end="389:34"><expr pos:start="389:17" pos:end="389:33"><name pos:start="389:17" pos:end="389:25">host_tbuf</name> <operator pos:start="389:27" pos:end="389:27">=</operator> <operator pos:start="389:29" pos:end="389:29">&amp;</operator><name pos:start="389:30" pos:end="389:33">tbuf</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="390:15" pos:end="3541:14">else <block pos:start="390:20" pos:end="3541:14">{<block_content pos:start="391:17" pos:end="3541:14">
                <expr_stmt pos:start="391:17" pos:end="391:33"><expr pos:start="391:17" pos:end="391:32"><name pos:start="391:17" pos:end="391:25">host_tbuf</name> <operator pos:start="391:27" pos:end="391:27">=</operator> <name pos:start="391:29" pos:end="391:32">NULL</name></expr>;</expr_stmt>
            <if_stmt pos:start="392:13" pos:end="393:28"><if pos:start="392:13" pos:end="393:28">if <condition pos:start="392:16" pos:end="392:46">(<expr pos:start="392:17" pos:end="392:45"><operator pos:start="392:17" pos:end="392:17">!</operator><operator pos:start="392:18" pos:end="392:18">(</operator><name pos:start="392:19" pos:end="392:19">p</name> <operator pos:start="392:21" pos:end="392:21">=</operator> <call pos:start="392:23" pos:end="392:44"><name pos:start="392:23" pos:end="392:38">lock_user_string</name><argument_list pos:start="392:39" pos:end="392:44">(<argument pos:start="392:40" pos:end="392:43"><expr pos:start="392:40" pos:end="392:43"><name pos:start="392:40" pos:end="392:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="392:45" pos:end="392:45">)</operator></expr>)</condition><block type="pseudo" pos:start="393:17" pos:end="393:28"><block_content pos:start="393:17" pos:end="393:28">
                <goto pos:start="393:17" pos:end="393:28">goto <name pos:start="393:22" pos:end="393:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="394:13" pos:end="394:49"><expr pos:start="394:13" pos:end="394:48"><name pos:start="394:13" pos:end="394:15">ret</name> <operator pos:start="394:17" pos:end="394:17">=</operator> <call pos:start="394:19" pos:end="394:48"><name pos:start="394:19" pos:end="394:27">get_errno</name><argument_list pos:start="394:28" pos:end="394:48">(<argument pos:start="394:29" pos:end="394:47"><expr pos:start="394:29" pos:end="394:47"><call pos:start="394:29" pos:end="394:47"><name pos:start="394:29" pos:end="394:33">utime</name><argument_list pos:start="394:34" pos:end="394:47">(<argument pos:start="394:35" pos:end="394:35"><expr pos:start="394:35" pos:end="394:35"><name pos:start="394:35" pos:end="394:35">p</name></expr></argument>, <argument pos:start="394:38" pos:end="394:46"><expr pos:start="394:38" pos:end="394:46"><name pos:start="394:38" pos:end="394:46">host_tbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="395:13" pos:end="398:0"><expr pos:start="395:13" pos:end="395:35"><call pos:start="395:13" pos:end="395:35"><name pos:start="395:13" pos:end="395:23">unlock_user</name><argument_list pos:start="395:24" pos:end="395:35">(<argument pos:start="395:25" pos:end="395:25"><expr pos:start="395:25" pos:end="395:25"><name pos:start="395:25" pos:end="395:25">p</name></expr></argument>, <argument pos:start="395:28" pos:end="395:31"><expr pos:start="395:28" pos:end="395:31"><name pos:start="395:28" pos:end="395:31">arg1</name></expr></argument>, <argument pos:start="395:34" pos:end="395:34"><expr pos:start="395:34" pos:end="395:34"><literal type="number" pos:start="395:34" pos:end="395:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="396:1" pos:end="396:6">#<cpp:directive pos:start="396:2" pos:end="396:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="397:1" pos:end="397:23">#<cpp:directive pos:start="397:2" pos:end="397:6">ifdef</cpp:directive> <name pos:start="397:8" pos:end="397:23">TARGET_NR_utimes</name></cpp:ifdef>
    <case pos:start="398:5" pos:end="398:26">case <expr pos:start="398:10" pos:end="398:25"><name pos:start="398:10" pos:end="398:25">TARGET_NR_utimes</name></expr>:</case>
        <block pos:start="399:9" pos:end="3541:14">{<block_content pos:start="400:13" pos:end="3541:14">
            <decl_stmt pos:start="400:13" pos:end="400:39"><decl pos:start="400:13" pos:end="400:31"><type pos:start="400:13" pos:end="400:28"><name pos:start="400:13" pos:end="400:26"><name pos:start="400:13" pos:end="400:18">struct</name> <name pos:start="400:20" pos:end="400:26">timeval</name></name> <modifier pos:start="400:28" pos:end="400:28">*</modifier></type><name pos:start="400:29" pos:end="400:31">tvp</name></decl>, <decl pos:start="400:34" pos:end="400:38"><type ref="prev" pos:start="400:13" pos:end="400:28"/><name pos:start="400:34" pos:end="400:38"><name pos:start="400:34" pos:end="400:35">tv</name><index pos:start="400:36" pos:end="400:38">[<expr pos:start="400:37" pos:end="400:37"><literal type="number" pos:start="400:37" pos:end="400:37">2</literal></expr>]</index></name></decl>;</decl_stmt>
            <if_stmt pos:start="401:13" pos:end="3541:14"><if pos:start="401:13" pos:end="407:13">if <condition pos:start="401:16" pos:end="401:21">(<expr pos:start="401:17" pos:end="401:20"><name pos:start="401:17" pos:end="401:20">arg2</name></expr>)</condition> <block pos:start="401:23" pos:end="407:13">{<block_content pos:start="402:17" pos:end="406:25">
                <if_stmt pos:start="402:17" pos:end="405:32"><if pos:start="402:17" pos:end="405:32">if <condition pos:start="402:20" pos:end="404:84">(<expr pos:start="402:21" pos:end="404:83"><call pos:start="402:21" pos:end="402:56"><name pos:start="402:21" pos:end="402:42">copy_from_user_timeval</name><argument_list pos:start="402:43" pos:end="402:56">(<argument pos:start="402:44" pos:end="402:49"><expr pos:start="402:44" pos:end="402:49"><operator pos:start="402:44" pos:end="402:44">&amp;</operator><name pos:start="402:45" pos:end="402:49"><name pos:start="402:45" pos:end="402:46">tv</name><index pos:start="402:47" pos:end="402:49">[<expr pos:start="402:48" pos:end="402:48"><literal type="number" pos:start="402:48" pos:end="402:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="402:52" pos:end="402:55"><expr pos:start="402:52" pos:end="402:55"><name pos:start="402:52" pos:end="402:55">arg2</name></expr></argument>)</argument_list></call>
                    <operator pos:start="403:21" pos:end="403:22">||</operator> <call pos:start="403:24" pos:end="404:83"><name pos:start="403:24" pos:end="403:45">copy_from_user_timeval</name><argument_list pos:start="403:46" pos:end="404:83">(<argument pos:start="403:47" pos:end="403:52"><expr pos:start="403:47" pos:end="403:52"><operator pos:start="403:47" pos:end="403:47">&amp;</operator><name pos:start="403:48" pos:end="403:52"><name pos:start="403:48" pos:end="403:49">tv</name><index pos:start="403:50" pos:end="403:52">[<expr pos:start="403:51" pos:end="403:51"><literal type="number" pos:start="403:51" pos:end="403:51">1</literal></expr>]</index></name></expr></argument>,
                                              <argument pos:start="404:47" pos:end="404:82"><expr pos:start="404:47" pos:end="404:82"><name pos:start="404:47" pos:end="404:50">arg2</name> <operator pos:start="404:52" pos:end="404:52">+</operator> <sizeof pos:start="404:54" pos:end="404:82">sizeof<argument_list pos:start="404:60" pos:end="404:82">(<argument pos:start="404:61" pos:end="404:81"><expr pos:start="404:61" pos:end="404:81">struct <name pos:start="404:68" pos:end="404:81">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="405:21" pos:end="405:32"><block_content pos:start="405:21" pos:end="405:32">
                    <goto pos:start="405:21" pos:end="405:32">goto <name pos:start="405:26" pos:end="405:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="406:17" pos:end="406:25"><expr pos:start="406:17" pos:end="406:24"><name pos:start="406:17" pos:end="406:19">tvp</name> <operator pos:start="406:21" pos:end="406:21">=</operator> <name pos:start="406:23" pos:end="406:24">tv</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="407:15" pos:end="3541:14">else <block pos:start="407:20" pos:end="3541:14">{<block_content pos:start="408:17" pos:end="3541:14">
                <expr_stmt pos:start="408:17" pos:end="408:27"><expr pos:start="408:17" pos:end="408:26"><name pos:start="408:17" pos:end="408:19">tvp</name> <operator pos:start="408:21" pos:end="408:21">=</operator> <name pos:start="408:23" pos:end="408:26">NULL</name></expr>;</expr_stmt>
            <if_stmt pos:start="409:13" pos:end="410:28"><if pos:start="409:13" pos:end="410:28">if <condition pos:start="409:16" pos:end="409:46">(<expr pos:start="409:17" pos:end="409:45"><operator pos:start="409:17" pos:end="409:17">!</operator><operator pos:start="409:18" pos:end="409:18">(</operator><name pos:start="409:19" pos:end="409:19">p</name> <operator pos:start="409:21" pos:end="409:21">=</operator> <call pos:start="409:23" pos:end="409:44"><name pos:start="409:23" pos:end="409:38">lock_user_string</name><argument_list pos:start="409:39" pos:end="409:44">(<argument pos:start="409:40" pos:end="409:43"><expr pos:start="409:40" pos:end="409:43"><name pos:start="409:40" pos:end="409:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="409:45" pos:end="409:45">)</operator></expr>)</condition><block type="pseudo" pos:start="410:17" pos:end="410:28"><block_content pos:start="410:17" pos:end="410:28">
                <goto pos:start="410:17" pos:end="410:28">goto <name pos:start="410:22" pos:end="410:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="411:13" pos:end="411:44"><expr pos:start="411:13" pos:end="411:43"><name pos:start="411:13" pos:end="411:15">ret</name> <operator pos:start="411:17" pos:end="411:17">=</operator> <call pos:start="411:19" pos:end="411:43"><name pos:start="411:19" pos:end="411:27">get_errno</name><argument_list pos:start="411:28" pos:end="411:43">(<argument pos:start="411:29" pos:end="411:42"><expr pos:start="411:29" pos:end="411:42"><call pos:start="411:29" pos:end="411:42"><name pos:start="411:29" pos:end="411:34">utimes</name><argument_list pos:start="411:35" pos:end="411:42">(<argument pos:start="411:36" pos:end="411:36"><expr pos:start="411:36" pos:end="411:36"><name pos:start="411:36" pos:end="411:36">p</name></expr></argument>, <argument pos:start="411:39" pos:end="411:41"><expr pos:start="411:39" pos:end="411:41"><name pos:start="411:39" pos:end="411:41">tvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="412:13" pos:end="415:0"><expr pos:start="412:13" pos:end="412:35"><call pos:start="412:13" pos:end="412:35"><name pos:start="412:13" pos:end="412:23">unlock_user</name><argument_list pos:start="412:24" pos:end="412:35">(<argument pos:start="412:25" pos:end="412:25"><expr pos:start="412:25" pos:end="412:25"><name pos:start="412:25" pos:end="412:25">p</name></expr></argument>, <argument pos:start="412:28" pos:end="412:31"><expr pos:start="412:28" pos:end="412:31"><name pos:start="412:28" pos:end="412:31">arg1</name></expr></argument>, <argument pos:start="412:34" pos:end="412:34"><expr pos:start="412:34" pos:end="412:34"><literal type="number" pos:start="412:34" pos:end="412:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="413:1" pos:end="413:6">#<cpp:directive pos:start="413:2" pos:end="413:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="414:1" pos:end="414:32">#<cpp:directive pos:start="414:2" pos:end="414:3">if</cpp:directive> <expr pos:start="414:5" pos:end="414:32"><call pos:start="414:5" pos:end="414:32"><name pos:start="414:5" pos:end="414:11">defined</name><argument_list pos:start="414:12" pos:end="414:32">(<argument pos:start="414:13" pos:end="414:31"><expr pos:start="414:13" pos:end="414:31"><name pos:start="414:13" pos:end="414:31">TARGET_NR_futimesat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="415:5" pos:end="415:29">case <expr pos:start="415:10" pos:end="415:28"><name pos:start="415:10" pos:end="415:28">TARGET_NR_futimesat</name></expr>:</case>
        <block pos:start="416:9" pos:end="3541:14">{<block_content pos:start="417:13" pos:end="3541:14">
            <decl_stmt pos:start="417:13" pos:end="417:39"><decl pos:start="417:13" pos:end="417:31"><type pos:start="417:13" pos:end="417:28"><name pos:start="417:13" pos:end="417:26"><name pos:start="417:13" pos:end="417:18">struct</name> <name pos:start="417:20" pos:end="417:26">timeval</name></name> <modifier pos:start="417:28" pos:end="417:28">*</modifier></type><name pos:start="417:29" pos:end="417:31">tvp</name></decl>, <decl pos:start="417:34" pos:end="417:38"><type ref="prev" pos:start="417:13" pos:end="417:28"/><name pos:start="417:34" pos:end="417:38"><name pos:start="417:34" pos:end="417:35">tv</name><index pos:start="417:36" pos:end="417:38">[<expr pos:start="417:37" pos:end="417:37"><literal type="number" pos:start="417:37" pos:end="417:37">2</literal></expr>]</index></name></decl>;</decl_stmt>
            <if_stmt pos:start="418:13" pos:end="3541:14"><if pos:start="418:13" pos:end="424:13">if <condition pos:start="418:16" pos:end="418:21">(<expr pos:start="418:17" pos:end="418:20"><name pos:start="418:17" pos:end="418:20">arg3</name></expr>)</condition> <block pos:start="418:23" pos:end="424:13">{<block_content pos:start="419:17" pos:end="423:25">
                <if_stmt pos:start="419:17" pos:end="422:32"><if pos:start="419:17" pos:end="422:32">if <condition pos:start="419:20" pos:end="421:84">(<expr pos:start="419:21" pos:end="421:83"><call pos:start="419:21" pos:end="419:56"><name pos:start="419:21" pos:end="419:42">copy_from_user_timeval</name><argument_list pos:start="419:43" pos:end="419:56">(<argument pos:start="419:44" pos:end="419:49"><expr pos:start="419:44" pos:end="419:49"><operator pos:start="419:44" pos:end="419:44">&amp;</operator><name pos:start="419:45" pos:end="419:49"><name pos:start="419:45" pos:end="419:46">tv</name><index pos:start="419:47" pos:end="419:49">[<expr pos:start="419:48" pos:end="419:48"><literal type="number" pos:start="419:48" pos:end="419:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="419:52" pos:end="419:55"><expr pos:start="419:52" pos:end="419:55"><name pos:start="419:52" pos:end="419:55">arg3</name></expr></argument>)</argument_list></call>
                    <operator pos:start="420:21" pos:end="420:22">||</operator> <call pos:start="420:24" pos:end="421:83"><name pos:start="420:24" pos:end="420:45">copy_from_user_timeval</name><argument_list pos:start="420:46" pos:end="421:83">(<argument pos:start="420:47" pos:end="420:52"><expr pos:start="420:47" pos:end="420:52"><operator pos:start="420:47" pos:end="420:47">&amp;</operator><name pos:start="420:48" pos:end="420:52"><name pos:start="420:48" pos:end="420:49">tv</name><index pos:start="420:50" pos:end="420:52">[<expr pos:start="420:51" pos:end="420:51"><literal type="number" pos:start="420:51" pos:end="420:51">1</literal></expr>]</index></name></expr></argument>,
                                              <argument pos:start="421:47" pos:end="421:82"><expr pos:start="421:47" pos:end="421:82"><name pos:start="421:47" pos:end="421:50">arg3</name> <operator pos:start="421:52" pos:end="421:52">+</operator> <sizeof pos:start="421:54" pos:end="421:82">sizeof<argument_list pos:start="421:60" pos:end="421:82">(<argument pos:start="421:61" pos:end="421:81"><expr pos:start="421:61" pos:end="421:81">struct <name pos:start="421:68" pos:end="421:81">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="422:21" pos:end="422:32"><block_content pos:start="422:21" pos:end="422:32">
                    <goto pos:start="422:21" pos:end="422:32">goto <name pos:start="422:26" pos:end="422:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="423:17" pos:end="423:25"><expr pos:start="423:17" pos:end="423:24"><name pos:start="423:17" pos:end="423:19">tvp</name> <operator pos:start="423:21" pos:end="423:21">=</operator> <name pos:start="423:23" pos:end="423:24">tv</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="424:15" pos:end="3541:14">else <block pos:start="424:20" pos:end="3541:14">{<block_content pos:start="425:17" pos:end="3541:14">
                <expr_stmt pos:start="425:17" pos:end="425:27"><expr pos:start="425:17" pos:end="425:26"><name pos:start="425:17" pos:end="425:19">tvp</name> <operator pos:start="425:21" pos:end="425:21">=</operator> <name pos:start="425:23" pos:end="425:26">NULL</name></expr>;</expr_stmt>
            <if_stmt pos:start="426:13" pos:end="427:28"><if pos:start="426:13" pos:end="427:28">if <condition pos:start="426:16" pos:end="426:46">(<expr pos:start="426:17" pos:end="426:45"><operator pos:start="426:17" pos:end="426:17">!</operator><operator pos:start="426:18" pos:end="426:18">(</operator><name pos:start="426:19" pos:end="426:19">p</name> <operator pos:start="426:21" pos:end="426:21">=</operator> <call pos:start="426:23" pos:end="426:44"><name pos:start="426:23" pos:end="426:38">lock_user_string</name><argument_list pos:start="426:39" pos:end="426:44">(<argument pos:start="426:40" pos:end="426:43"><expr pos:start="426:40" pos:end="426:43"><name pos:start="426:40" pos:end="426:43">arg2</name></expr></argument>)</argument_list></call><operator pos:start="426:45" pos:end="426:45">)</operator></expr>)</condition><block type="pseudo" pos:start="427:17" pos:end="427:28"><block_content pos:start="427:17" pos:end="427:28">
                <goto pos:start="427:17" pos:end="427:28">goto <name pos:start="427:22" pos:end="427:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="428:13" pos:end="428:59"><expr pos:start="428:13" pos:end="428:58"><name pos:start="428:13" pos:end="428:15">ret</name> <operator pos:start="428:17" pos:end="428:17">=</operator> <call pos:start="428:19" pos:end="428:58"><name pos:start="428:19" pos:end="428:27">get_errno</name><argument_list pos:start="428:28" pos:end="428:58">(<argument pos:start="428:29" pos:end="428:57"><expr pos:start="428:29" pos:end="428:57"><call pos:start="428:29" pos:end="428:57"><name pos:start="428:29" pos:end="428:37">futimesat</name><argument_list pos:start="428:38" pos:end="428:57">(<argument pos:start="428:39" pos:end="428:42"><expr pos:start="428:39" pos:end="428:42"><name pos:start="428:39" pos:end="428:42">arg1</name></expr></argument>, <argument pos:start="428:45" pos:end="428:51"><expr pos:start="428:45" pos:end="428:51"><call pos:start="428:45" pos:end="428:51"><name pos:start="428:45" pos:end="428:48">path</name><argument_list pos:start="428:49" pos:end="428:51">(<argument pos:start="428:50" pos:end="428:50"><expr pos:start="428:50" pos:end="428:50"><name pos:start="428:50" pos:end="428:50">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="428:54" pos:end="428:56"><expr pos:start="428:54" pos:end="428:56"><name pos:start="428:54" pos:end="428:56">tvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="429:13" pos:end="432:0"><expr pos:start="429:13" pos:end="429:35"><call pos:start="429:13" pos:end="429:35"><name pos:start="429:13" pos:end="429:23">unlock_user</name><argument_list pos:start="429:24" pos:end="429:35">(<argument pos:start="429:25" pos:end="429:25"><expr pos:start="429:25" pos:end="429:25"><name pos:start="429:25" pos:end="429:25">p</name></expr></argument>, <argument pos:start="429:28" pos:end="429:31"><expr pos:start="429:28" pos:end="429:31"><name pos:start="429:28" pos:end="429:31">arg2</name></expr></argument>, <argument pos:start="429:34" pos:end="429:34"><expr pos:start="429:34" pos:end="429:34"><literal type="number" pos:start="429:34" pos:end="429:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="430:1" pos:end="430:6">#<cpp:directive pos:start="430:2" pos:end="430:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="431:1" pos:end="431:21">#<cpp:directive pos:start="431:2" pos:end="431:6">ifdef</cpp:directive> <name pos:start="431:8" pos:end="431:21">TARGET_NR_stty</name></cpp:ifdef>
    <case pos:start="432:5" pos:end="432:24">case <expr pos:start="432:10" pos:end="432:23"><name pos:start="432:10" pos:end="432:23">TARGET_NR_stty</name></expr>:</case>
        <goto pos:start="433:9" pos:end="436:0">goto <name pos:start="433:14" pos:end="433:26">unimplemented</name>;</goto>
<cpp:endif pos:start="434:1" pos:end="434:6">#<cpp:directive pos:start="434:2" pos:end="434:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="435:1" pos:end="435:21">#<cpp:directive pos:start="435:2" pos:end="435:6">ifdef</cpp:directive> <name pos:start="435:8" pos:end="435:21">TARGET_NR_gtty</name></cpp:ifdef>
    <case pos:start="436:5" pos:end="436:24">case <expr pos:start="436:10" pos:end="436:23"><name pos:start="436:10" pos:end="436:23">TARGET_NR_gtty</name></expr>:</case>
        <goto pos:start="437:9" pos:end="440:0">goto <name pos:start="437:14" pos:end="437:26">unimplemented</name>;</goto>
<cpp:endif pos:start="438:1" pos:end="438:6">#<cpp:directive pos:start="438:2" pos:end="438:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="439:1" pos:end="439:23">#<cpp:directive pos:start="439:2" pos:end="439:6">ifdef</cpp:directive> <name pos:start="439:8" pos:end="439:23">TARGET_NR_access</name></cpp:ifdef>
    <case pos:start="440:5" pos:end="440:26">case <expr pos:start="440:10" pos:end="440:25"><name pos:start="440:10" pos:end="440:25">TARGET_NR_access</name></expr>:</case>
        <if_stmt pos:start="441:9" pos:end="442:24"><if pos:start="441:9" pos:end="442:24">if <condition pos:start="441:12" pos:end="441:42">(<expr pos:start="441:13" pos:end="441:41"><operator pos:start="441:13" pos:end="441:13">!</operator><operator pos:start="441:14" pos:end="441:14">(</operator><name pos:start="441:15" pos:end="441:15">p</name> <operator pos:start="441:17" pos:end="441:17">=</operator> <call pos:start="441:19" pos:end="441:40"><name pos:start="441:19" pos:end="441:34">lock_user_string</name><argument_list pos:start="441:35" pos:end="441:40">(<argument pos:start="441:36" pos:end="441:39"><expr pos:start="441:36" pos:end="441:39"><name pos:start="441:36" pos:end="441:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="441:41" pos:end="441:41">)</operator></expr>)</condition><block type="pseudo" pos:start="442:13" pos:end="442:24"><block_content pos:start="442:13" pos:end="442:24">
            <goto pos:start="442:13" pos:end="442:24">goto <name pos:start="442:18" pos:end="442:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="443:9" pos:end="443:47"><expr pos:start="443:9" pos:end="443:46"><name pos:start="443:9" pos:end="443:11">ret</name> <operator pos:start="443:13" pos:end="443:13">=</operator> <call pos:start="443:15" pos:end="443:46"><name pos:start="443:15" pos:end="443:23">get_errno</name><argument_list pos:start="443:24" pos:end="443:46">(<argument pos:start="443:25" pos:end="443:45"><expr pos:start="443:25" pos:end="443:45"><call pos:start="443:25" pos:end="443:45"><name pos:start="443:25" pos:end="443:30">access</name><argument_list pos:start="443:31" pos:end="443:45">(<argument pos:start="443:32" pos:end="443:38"><expr pos:start="443:32" pos:end="443:38"><call pos:start="443:32" pos:end="443:38"><name pos:start="443:32" pos:end="443:35">path</name><argument_list pos:start="443:36" pos:end="443:38">(<argument pos:start="443:37" pos:end="443:37"><expr pos:start="443:37" pos:end="443:37"><name pos:start="443:37" pos:end="443:37">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="443:41" pos:end="443:44"><expr pos:start="443:41" pos:end="443:44"><name pos:start="443:41" pos:end="443:44">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="444:9" pos:end="447:0"><expr pos:start="444:9" pos:end="444:31"><call pos:start="444:9" pos:end="444:31"><name pos:start="444:9" pos:end="444:19">unlock_user</name><argument_list pos:start="444:20" pos:end="444:31">(<argument pos:start="444:21" pos:end="444:21"><expr pos:start="444:21" pos:end="444:21"><name pos:start="444:21" pos:end="444:21">p</name></expr></argument>, <argument pos:start="444:24" pos:end="444:27"><expr pos:start="444:24" pos:end="444:27"><name pos:start="444:24" pos:end="444:27">arg1</name></expr></argument>, <argument pos:start="444:30" pos:end="444:30"><expr pos:start="444:30" pos:end="444:30"><literal type="number" pos:start="444:30" pos:end="444:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="445:1" pos:end="445:6">#<cpp:directive pos:start="445:2" pos:end="445:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="446:1" pos:end="446:59">#<cpp:directive pos:start="446:2" pos:end="446:3">if</cpp:directive> <expr pos:start="446:5" pos:end="446:59"><call pos:start="446:5" pos:end="446:32"><name pos:start="446:5" pos:end="446:11">defined</name><argument_list pos:start="446:12" pos:end="446:32">(<argument pos:start="446:13" pos:end="446:31"><expr pos:start="446:13" pos:end="446:31"><name pos:start="446:13" pos:end="446:31">TARGET_NR_faccessat</name></expr></argument>)</argument_list></call> <operator pos:start="446:34" pos:end="446:35">&amp;&amp;</operator> <call pos:start="446:37" pos:end="446:59"><name pos:start="446:37" pos:end="446:43">defined</name><argument_list pos:start="446:44" pos:end="446:59">(<argument pos:start="446:45" pos:end="446:58"><expr pos:start="446:45" pos:end="446:58"><name pos:start="446:45" pos:end="446:58">__NR_faccessat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="447:5" pos:end="447:29">case <expr pos:start="447:10" pos:end="447:28"><name pos:start="447:10" pos:end="447:28">TARGET_NR_faccessat</name></expr>:</case>
        <if_stmt pos:start="448:9" pos:end="449:24"><if pos:start="448:9" pos:end="449:24">if <condition pos:start="448:12" pos:end="448:42">(<expr pos:start="448:13" pos:end="448:41"><operator pos:start="448:13" pos:end="448:13">!</operator><operator pos:start="448:14" pos:end="448:14">(</operator><name pos:start="448:15" pos:end="448:15">p</name> <operator pos:start="448:17" pos:end="448:17">=</operator> <call pos:start="448:19" pos:end="448:40"><name pos:start="448:19" pos:end="448:34">lock_user_string</name><argument_list pos:start="448:35" pos:end="448:40">(<argument pos:start="448:36" pos:end="448:39"><expr pos:start="448:36" pos:end="448:39"><name pos:start="448:36" pos:end="448:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="448:41" pos:end="448:41">)</operator></expr>)</condition><block type="pseudo" pos:start="449:13" pos:end="449:24"><block_content pos:start="449:13" pos:end="449:24">
            <goto pos:start="449:13" pos:end="449:24">goto <name pos:start="449:18" pos:end="449:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="450:9" pos:end="450:53"><expr pos:start="450:9" pos:end="450:52"><name pos:start="450:9" pos:end="450:11">ret</name> <operator pos:start="450:13" pos:end="450:13">=</operator> <call pos:start="450:15" pos:end="450:52"><name pos:start="450:15" pos:end="450:23">get_errno</name><argument_list pos:start="450:24" pos:end="450:52">(<argument pos:start="450:25" pos:end="450:51"><expr pos:start="450:25" pos:end="450:51"><call pos:start="450:25" pos:end="450:51"><name pos:start="450:25" pos:end="450:33">faccessat</name><argument_list pos:start="450:34" pos:end="450:51">(<argument pos:start="450:35" pos:end="450:38"><expr pos:start="450:35" pos:end="450:38"><name pos:start="450:35" pos:end="450:38">arg1</name></expr></argument>, <argument pos:start="450:41" pos:end="450:41"><expr pos:start="450:41" pos:end="450:41"><name pos:start="450:41" pos:end="450:41">p</name></expr></argument>, <argument pos:start="450:44" pos:end="450:47"><expr pos:start="450:44" pos:end="450:47"><name pos:start="450:44" pos:end="450:47">arg3</name></expr></argument>, <argument pos:start="450:50" pos:end="450:50"><expr pos:start="450:50" pos:end="450:50"><literal type="number" pos:start="450:50" pos:end="450:50">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="451:9" pos:end="454:0"><expr pos:start="451:9" pos:end="451:31"><call pos:start="451:9" pos:end="451:31"><name pos:start="451:9" pos:end="451:19">unlock_user</name><argument_list pos:start="451:20" pos:end="451:31">(<argument pos:start="451:21" pos:end="451:21"><expr pos:start="451:21" pos:end="451:21"><name pos:start="451:21" pos:end="451:21">p</name></expr></argument>, <argument pos:start="451:24" pos:end="451:27"><expr pos:start="451:24" pos:end="451:27"><name pos:start="451:24" pos:end="451:27">arg2</name></expr></argument>, <argument pos:start="451:30" pos:end="451:30"><expr pos:start="451:30" pos:end="451:30"><literal type="number" pos:start="451:30" pos:end="451:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="452:1" pos:end="452:6">#<cpp:directive pos:start="452:2" pos:end="452:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="453:1" pos:end="453:21">#<cpp:directive pos:start="453:2" pos:end="453:6">ifdef</cpp:directive> <name pos:start="453:8" pos:end="453:21">TARGET_NR_nice</name></cpp:ifdef> <comment type="block" pos:start="453:23" pos:end="453:40">/* not on alpha */</comment>
    <case pos:start="454:5" pos:end="454:24">case <expr pos:start="454:10" pos:end="454:23"><name pos:start="454:10" pos:end="454:23">TARGET_NR_nice</name></expr>:</case>
        <expr_stmt pos:start="455:9" pos:end="458:0"><expr pos:start="455:9" pos:end="455:35"><name pos:start="455:9" pos:end="455:11">ret</name> <operator pos:start="455:13" pos:end="455:13">=</operator> <call pos:start="455:15" pos:end="455:35"><name pos:start="455:15" pos:end="455:23">get_errno</name><argument_list pos:start="455:24" pos:end="455:35">(<argument pos:start="455:25" pos:end="455:34"><expr pos:start="455:25" pos:end="455:34"><call pos:start="455:25" pos:end="455:34"><name pos:start="455:25" pos:end="455:28">nice</name><argument_list pos:start="455:29" pos:end="455:34">(<argument pos:start="455:30" pos:end="455:33"><expr pos:start="455:30" pos:end="455:33"><name pos:start="455:30" pos:end="455:33">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="456:1" pos:end="456:6">#<cpp:directive pos:start="456:2" pos:end="456:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="457:1" pos:end="457:22">#<cpp:directive pos:start="457:2" pos:end="457:6">ifdef</cpp:directive> <name pos:start="457:8" pos:end="457:22">TARGET_NR_ftime</name></cpp:ifdef>
    <case pos:start="458:5" pos:end="458:25">case <expr pos:start="458:10" pos:end="458:24"><name pos:start="458:10" pos:end="458:24">TARGET_NR_ftime</name></expr>:</case>
        <goto pos:start="459:9" pos:end="461:0">goto <name pos:start="459:14" pos:end="459:26">unimplemented</name>;</goto>
<cpp:endif pos:start="460:1" pos:end="460:6">#<cpp:directive pos:start="460:2" pos:end="460:6">endif</cpp:directive></cpp:endif>
    <case pos:start="461:5" pos:end="461:24">case <expr pos:start="461:10" pos:end="461:23"><name pos:start="461:10" pos:end="461:23">TARGET_NR_sync</name></expr>:</case>
        <expr_stmt pos:start="462:9" pos:end="462:15"><expr pos:start="462:9" pos:end="462:14"><call pos:start="462:9" pos:end="462:14"><name pos:start="462:9" pos:end="462:12">sync</name><argument_list pos:start="462:13" pos:end="462:14">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="463:9" pos:end="463:16"><expr pos:start="463:9" pos:end="463:15"><name pos:start="463:9" pos:end="463:11">ret</name> <operator pos:start="463:13" pos:end="463:13">=</operator> <literal type="number" pos:start="463:15" pos:end="463:15">0</literal></expr>;</expr_stmt>
    <case pos:start="464:5" pos:end="464:24">case <expr pos:start="464:10" pos:end="464:23"><name pos:start="464:10" pos:end="464:23">TARGET_NR_kill</name></expr>:</case>
        <expr_stmt pos:start="465:9" pos:end="467:0"><expr pos:start="465:9" pos:end="465:69"><name pos:start="465:9" pos:end="465:11">ret</name> <operator pos:start="465:13" pos:end="465:13">=</operator> <call pos:start="465:15" pos:end="465:69"><name pos:start="465:15" pos:end="465:23">get_errno</name><argument_list pos:start="465:24" pos:end="465:69">(<argument pos:start="465:25" pos:end="465:68"><expr pos:start="465:25" pos:end="465:68"><call pos:start="465:25" pos:end="465:68"><name pos:start="465:25" pos:end="465:33">safe_kill</name><argument_list pos:start="465:34" pos:end="465:68">(<argument pos:start="465:35" pos:end="465:38"><expr pos:start="465:35" pos:end="465:38"><name pos:start="465:35" pos:end="465:38">arg1</name></expr></argument>, <argument pos:start="465:41" pos:end="465:67"><expr pos:start="465:41" pos:end="465:67"><call pos:start="465:41" pos:end="465:67"><name pos:start="465:41" pos:end="465:61">target_to_host_signal</name><argument_list pos:start="465:62" pos:end="465:67">(<argument pos:start="465:63" pos:end="465:66"><expr pos:start="465:63" pos:end="465:66"><name pos:start="465:63" pos:end="465:66">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="466:1" pos:end="466:23">#<cpp:directive pos:start="466:2" pos:end="466:6">ifdef</cpp:directive> <name pos:start="466:8" pos:end="466:23">TARGET_NR_rename</name></cpp:ifdef>
    <case pos:start="467:5" pos:end="467:26">case <expr pos:start="467:10" pos:end="467:25"><name pos:start="467:10" pos:end="467:25">TARGET_NR_rename</name></expr>:</case>
        <block pos:start="468:9" pos:end="3541:14">{<block_content pos:start="469:13" pos:end="3541:14">
            <decl_stmt pos:start="469:13" pos:end="469:21"><decl pos:start="469:13" pos:end="469:20"><type pos:start="469:13" pos:end="469:18"><name pos:start="469:13" pos:end="469:16">void</name> <modifier pos:start="469:18" pos:end="469:18">*</modifier></type><name pos:start="469:19" pos:end="469:20">p2</name></decl>;</decl_stmt>
            <expr_stmt pos:start="470:13" pos:end="470:39"><expr pos:start="470:13" pos:end="470:38"><name pos:start="470:13" pos:end="470:13">p</name> <operator pos:start="470:15" pos:end="470:15">=</operator> <call pos:start="470:17" pos:end="470:38"><name pos:start="470:17" pos:end="470:32">lock_user_string</name><argument_list pos:start="470:33" pos:end="470:38">(<argument pos:start="470:34" pos:end="470:37"><expr pos:start="470:34" pos:end="470:37"><name pos:start="470:34" pos:end="470:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="471:13" pos:end="471:40"><expr pos:start="471:13" pos:end="471:39"><name pos:start="471:13" pos:end="471:14">p2</name> <operator pos:start="471:16" pos:end="471:16">=</operator> <call pos:start="471:18" pos:end="471:39"><name pos:start="471:18" pos:end="471:33">lock_user_string</name><argument_list pos:start="471:34" pos:end="471:39">(<argument pos:start="471:35" pos:end="471:38"><expr pos:start="471:35" pos:end="471:38"><name pos:start="471:35" pos:end="471:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="472:13" pos:end="475:47"><if pos:start="472:13" pos:end="473:37">if <condition pos:start="472:16" pos:end="472:26">(<expr pos:start="472:17" pos:end="472:25"><operator pos:start="472:17" pos:end="472:17">!</operator><name pos:start="472:18" pos:end="472:18">p</name> <operator pos:start="472:20" pos:end="472:21">||</operator> <operator pos:start="472:23" pos:end="472:23">!</operator><name pos:start="472:24" pos:end="472:25">p2</name></expr>)</condition><block type="pseudo" pos:start="473:17" pos:end="473:37"><block_content pos:start="473:17" pos:end="473:37">
                <expr_stmt pos:start="473:17" pos:end="473:37"><expr pos:start="473:17" pos:end="473:36"><name pos:start="473:17" pos:end="473:19">ret</name> <operator pos:start="473:21" pos:end="473:21">=</operator> <operator pos:start="473:23" pos:end="473:23">-</operator><name pos:start="473:24" pos:end="473:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="474:13" pos:end="475:47">else<block type="pseudo" pos:start="475:17" pos:end="475:47"><block_content pos:start="475:17" pos:end="475:47">
                <expr_stmt pos:start="475:17" pos:end="475:47"><expr pos:start="475:17" pos:end="475:46"><name pos:start="475:17" pos:end="475:19">ret</name> <operator pos:start="475:21" pos:end="475:21">=</operator> <call pos:start="475:23" pos:end="475:46"><name pos:start="475:23" pos:end="475:31">get_errno</name><argument_list pos:start="475:32" pos:end="475:46">(<argument pos:start="475:33" pos:end="475:45"><expr pos:start="475:33" pos:end="475:45"><call pos:start="475:33" pos:end="475:45"><name pos:start="475:33" pos:end="475:38">rename</name><argument_list pos:start="475:39" pos:end="475:45">(<argument pos:start="475:40" pos:end="475:40"><expr pos:start="475:40" pos:end="475:40"><name pos:start="475:40" pos:end="475:40">p</name></expr></argument>, <argument pos:start="475:43" pos:end="475:44"><expr pos:start="475:43" pos:end="475:44"><name pos:start="475:43" pos:end="475:44">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="476:13" pos:end="476:37"><expr pos:start="476:13" pos:end="476:36"><call pos:start="476:13" pos:end="476:36"><name pos:start="476:13" pos:end="476:23">unlock_user</name><argument_list pos:start="476:24" pos:end="476:36">(<argument pos:start="476:25" pos:end="476:26"><expr pos:start="476:25" pos:end="476:26"><name pos:start="476:25" pos:end="476:26">p2</name></expr></argument>, <argument pos:start="476:29" pos:end="476:32"><expr pos:start="476:29" pos:end="476:32"><name pos:start="476:29" pos:end="476:32">arg2</name></expr></argument>, <argument pos:start="476:35" pos:end="476:35"><expr pos:start="476:35" pos:end="476:35"><literal type="number" pos:start="476:35" pos:end="476:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="477:13" pos:end="480:0"><expr pos:start="477:13" pos:end="477:35"><call pos:start="477:13" pos:end="477:35"><name pos:start="477:13" pos:end="477:23">unlock_user</name><argument_list pos:start="477:24" pos:end="477:35">(<argument pos:start="477:25" pos:end="477:25"><expr pos:start="477:25" pos:end="477:25"><name pos:start="477:25" pos:end="477:25">p</name></expr></argument>, <argument pos:start="477:28" pos:end="477:31"><expr pos:start="477:28" pos:end="477:31"><name pos:start="477:28" pos:end="477:31">arg1</name></expr></argument>, <argument pos:start="477:34" pos:end="477:34"><expr pos:start="477:34" pos:end="477:34"><literal type="number" pos:start="477:34" pos:end="477:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="478:1" pos:end="478:6">#<cpp:directive pos:start="478:2" pos:end="478:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="479:1" pos:end="479:31">#<cpp:directive pos:start="479:2" pos:end="479:3">if</cpp:directive> <expr pos:start="479:5" pos:end="479:31"><call pos:start="479:5" pos:end="479:31"><name pos:start="479:5" pos:end="479:11">defined</name><argument_list pos:start="479:12" pos:end="479:31">(<argument pos:start="479:13" pos:end="479:30"><expr pos:start="479:13" pos:end="479:30"><name pos:start="479:13" pos:end="479:30">TARGET_NR_renameat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="480:5" pos:end="480:28">case <expr pos:start="480:10" pos:end="480:27"><name pos:start="480:10" pos:end="480:27">TARGET_NR_renameat</name></expr>:</case>
        <block pos:start="481:9" pos:end="3541:14">{<block_content pos:start="482:13" pos:end="3541:14">
            <decl_stmt pos:start="482:13" pos:end="482:21"><decl pos:start="482:13" pos:end="482:20"><type pos:start="482:13" pos:end="482:18"><name pos:start="482:13" pos:end="482:16">void</name> <modifier pos:start="482:18" pos:end="482:18">*</modifier></type><name pos:start="482:19" pos:end="482:20">p2</name></decl>;</decl_stmt>
            <expr_stmt pos:start="483:13" pos:end="483:40"><expr pos:start="483:13" pos:end="483:39"><name pos:start="483:13" pos:end="483:13">p</name>  <operator pos:start="483:16" pos:end="483:16">=</operator> <call pos:start="483:18" pos:end="483:39"><name pos:start="483:18" pos:end="483:33">lock_user_string</name><argument_list pos:start="483:34" pos:end="483:39">(<argument pos:start="483:35" pos:end="483:38"><expr pos:start="483:35" pos:end="483:38"><name pos:start="483:35" pos:end="483:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="484:13" pos:end="484:40"><expr pos:start="484:13" pos:end="484:39"><name pos:start="484:13" pos:end="484:14">p2</name> <operator pos:start="484:16" pos:end="484:16">=</operator> <call pos:start="484:18" pos:end="484:39"><name pos:start="484:18" pos:end="484:33">lock_user_string</name><argument_list pos:start="484:34" pos:end="484:39">(<argument pos:start="484:35" pos:end="484:38"><expr pos:start="484:35" pos:end="484:38"><name pos:start="484:35" pos:end="484:38">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="485:13" pos:end="488:61"><if pos:start="485:13" pos:end="486:37">if <condition pos:start="485:16" pos:end="485:26">(<expr pos:start="485:17" pos:end="485:25"><operator pos:start="485:17" pos:end="485:17">!</operator><name pos:start="485:18" pos:end="485:18">p</name> <operator pos:start="485:20" pos:end="485:21">||</operator> <operator pos:start="485:23" pos:end="485:23">!</operator><name pos:start="485:24" pos:end="485:25">p2</name></expr>)</condition><block type="pseudo" pos:start="486:17" pos:end="486:37"><block_content pos:start="486:17" pos:end="486:37">
                <expr_stmt pos:start="486:17" pos:end="486:37"><expr pos:start="486:17" pos:end="486:36"><name pos:start="486:17" pos:end="486:19">ret</name> <operator pos:start="486:21" pos:end="486:21">=</operator> <operator pos:start="486:23" pos:end="486:23">-</operator><name pos:start="486:24" pos:end="486:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="487:13" pos:end="488:61">else<block type="pseudo" pos:start="488:17" pos:end="488:61"><block_content pos:start="488:17" pos:end="488:61">
                <expr_stmt pos:start="488:17" pos:end="488:61"><expr pos:start="488:17" pos:end="488:60"><name pos:start="488:17" pos:end="488:19">ret</name> <operator pos:start="488:21" pos:end="488:21">=</operator> <call pos:start="488:23" pos:end="488:60"><name pos:start="488:23" pos:end="488:31">get_errno</name><argument_list pos:start="488:32" pos:end="488:60">(<argument pos:start="488:33" pos:end="488:59"><expr pos:start="488:33" pos:end="488:59"><call pos:start="488:33" pos:end="488:59"><name pos:start="488:33" pos:end="488:40">renameat</name><argument_list pos:start="488:41" pos:end="488:59">(<argument pos:start="488:42" pos:end="488:45"><expr pos:start="488:42" pos:end="488:45"><name pos:start="488:42" pos:end="488:45">arg1</name></expr></argument>, <argument pos:start="488:48" pos:end="488:48"><expr pos:start="488:48" pos:end="488:48"><name pos:start="488:48" pos:end="488:48">p</name></expr></argument>, <argument pos:start="488:51" pos:end="488:54"><expr pos:start="488:51" pos:end="488:54"><name pos:start="488:51" pos:end="488:54">arg3</name></expr></argument>, <argument pos:start="488:57" pos:end="488:58"><expr pos:start="488:57" pos:end="488:58"><name pos:start="488:57" pos:end="488:58">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="489:13" pos:end="489:37"><expr pos:start="489:13" pos:end="489:36"><call pos:start="489:13" pos:end="489:36"><name pos:start="489:13" pos:end="489:23">unlock_user</name><argument_list pos:start="489:24" pos:end="489:36">(<argument pos:start="489:25" pos:end="489:26"><expr pos:start="489:25" pos:end="489:26"><name pos:start="489:25" pos:end="489:26">p2</name></expr></argument>, <argument pos:start="489:29" pos:end="489:32"><expr pos:start="489:29" pos:end="489:32"><name pos:start="489:29" pos:end="489:32">arg4</name></expr></argument>, <argument pos:start="489:35" pos:end="489:35"><expr pos:start="489:35" pos:end="489:35"><literal type="number" pos:start="489:35" pos:end="489:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="490:13" pos:end="493:0"><expr pos:start="490:13" pos:end="490:35"><call pos:start="490:13" pos:end="490:35"><name pos:start="490:13" pos:end="490:23">unlock_user</name><argument_list pos:start="490:24" pos:end="490:35">(<argument pos:start="490:25" pos:end="490:25"><expr pos:start="490:25" pos:end="490:25"><name pos:start="490:25" pos:end="490:25">p</name></expr></argument>, <argument pos:start="490:28" pos:end="490:31"><expr pos:start="490:28" pos:end="490:31"><name pos:start="490:28" pos:end="490:31">arg2</name></expr></argument>, <argument pos:start="490:34" pos:end="490:34"><expr pos:start="490:34" pos:end="490:34"><literal type="number" pos:start="490:34" pos:end="490:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="491:1" pos:end="491:6">#<cpp:directive pos:start="491:2" pos:end="491:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="492:1" pos:end="492:22">#<cpp:directive pos:start="492:2" pos:end="492:6">ifdef</cpp:directive> <name pos:start="492:8" pos:end="492:22">TARGET_NR_mkdir</name></cpp:ifdef>
    <case pos:start="493:5" pos:end="493:25">case <expr pos:start="493:10" pos:end="493:24"><name pos:start="493:10" pos:end="493:24">TARGET_NR_mkdir</name></expr>:</case>
        <if_stmt pos:start="494:9" pos:end="495:24"><if pos:start="494:9" pos:end="495:24">if <condition pos:start="494:12" pos:end="494:42">(<expr pos:start="494:13" pos:end="494:41"><operator pos:start="494:13" pos:end="494:13">!</operator><operator pos:start="494:14" pos:end="494:14">(</operator><name pos:start="494:15" pos:end="494:15">p</name> <operator pos:start="494:17" pos:end="494:17">=</operator> <call pos:start="494:19" pos:end="494:40"><name pos:start="494:19" pos:end="494:34">lock_user_string</name><argument_list pos:start="494:35" pos:end="494:40">(<argument pos:start="494:36" pos:end="494:39"><expr pos:start="494:36" pos:end="494:39"><name pos:start="494:36" pos:end="494:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="494:41" pos:end="494:41">)</operator></expr>)</condition><block type="pseudo" pos:start="495:13" pos:end="495:24"><block_content pos:start="495:13" pos:end="495:24">
            <goto pos:start="495:13" pos:end="495:24">goto <name pos:start="495:18" pos:end="495:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="496:9" pos:end="496:40"><expr pos:start="496:9" pos:end="496:39"><name pos:start="496:9" pos:end="496:11">ret</name> <operator pos:start="496:13" pos:end="496:13">=</operator> <call pos:start="496:15" pos:end="496:39"><name pos:start="496:15" pos:end="496:23">get_errno</name><argument_list pos:start="496:24" pos:end="496:39">(<argument pos:start="496:25" pos:end="496:38"><expr pos:start="496:25" pos:end="496:38"><call pos:start="496:25" pos:end="496:38"><name pos:start="496:25" pos:end="496:29">mkdir</name><argument_list pos:start="496:30" pos:end="496:38">(<argument pos:start="496:31" pos:end="496:31"><expr pos:start="496:31" pos:end="496:31"><name pos:start="496:31" pos:end="496:31">p</name></expr></argument>, <argument pos:start="496:34" pos:end="496:37"><expr pos:start="496:34" pos:end="496:37"><name pos:start="496:34" pos:end="496:37">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="497:9" pos:end="500:0"><expr pos:start="497:9" pos:end="497:31"><call pos:start="497:9" pos:end="497:31"><name pos:start="497:9" pos:end="497:19">unlock_user</name><argument_list pos:start="497:20" pos:end="497:31">(<argument pos:start="497:21" pos:end="497:21"><expr pos:start="497:21" pos:end="497:21"><name pos:start="497:21" pos:end="497:21">p</name></expr></argument>, <argument pos:start="497:24" pos:end="497:27"><expr pos:start="497:24" pos:end="497:27"><name pos:start="497:24" pos:end="497:27">arg1</name></expr></argument>, <argument pos:start="497:30" pos:end="497:30"><expr pos:start="497:30" pos:end="497:30"><literal type="number" pos:start="497:30" pos:end="497:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="498:1" pos:end="498:6">#<cpp:directive pos:start="498:2" pos:end="498:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="499:1" pos:end="499:30">#<cpp:directive pos:start="499:2" pos:end="499:3">if</cpp:directive> <expr pos:start="499:5" pos:end="499:30"><call pos:start="499:5" pos:end="499:30"><name pos:start="499:5" pos:end="499:11">defined</name><argument_list pos:start="499:12" pos:end="499:30">(<argument pos:start="499:13" pos:end="499:29"><expr pos:start="499:13" pos:end="499:29"><name pos:start="499:13" pos:end="499:29">TARGET_NR_mkdirat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="500:5" pos:end="500:27">case <expr pos:start="500:10" pos:end="500:26"><name pos:start="500:10" pos:end="500:26">TARGET_NR_mkdirat</name></expr>:</case>
        <if_stmt pos:start="501:9" pos:end="502:24"><if pos:start="501:9" pos:end="502:24">if <condition pos:start="501:12" pos:end="501:42">(<expr pos:start="501:13" pos:end="501:41"><operator pos:start="501:13" pos:end="501:13">!</operator><operator pos:start="501:14" pos:end="501:14">(</operator><name pos:start="501:15" pos:end="501:15">p</name> <operator pos:start="501:17" pos:end="501:17">=</operator> <call pos:start="501:19" pos:end="501:40"><name pos:start="501:19" pos:end="501:34">lock_user_string</name><argument_list pos:start="501:35" pos:end="501:40">(<argument pos:start="501:36" pos:end="501:39"><expr pos:start="501:36" pos:end="501:39"><name pos:start="501:36" pos:end="501:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="501:41" pos:end="501:41">)</operator></expr>)</condition><block type="pseudo" pos:start="502:13" pos:end="502:24"><block_content pos:start="502:13" pos:end="502:24">
            <goto pos:start="502:13" pos:end="502:24">goto <name pos:start="502:18" pos:end="502:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="503:9" pos:end="503:48"><expr pos:start="503:9" pos:end="503:47"><name pos:start="503:9" pos:end="503:11">ret</name> <operator pos:start="503:13" pos:end="503:13">=</operator> <call pos:start="503:15" pos:end="503:47"><name pos:start="503:15" pos:end="503:23">get_errno</name><argument_list pos:start="503:24" pos:end="503:47">(<argument pos:start="503:25" pos:end="503:46"><expr pos:start="503:25" pos:end="503:46"><call pos:start="503:25" pos:end="503:46"><name pos:start="503:25" pos:end="503:31">mkdirat</name><argument_list pos:start="503:32" pos:end="503:46">(<argument pos:start="503:33" pos:end="503:36"><expr pos:start="503:33" pos:end="503:36"><name pos:start="503:33" pos:end="503:36">arg1</name></expr></argument>, <argument pos:start="503:39" pos:end="503:39"><expr pos:start="503:39" pos:end="503:39"><name pos:start="503:39" pos:end="503:39">p</name></expr></argument>, <argument pos:start="503:42" pos:end="503:45"><expr pos:start="503:42" pos:end="503:45"><name pos:start="503:42" pos:end="503:45">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="504:9" pos:end="507:0"><expr pos:start="504:9" pos:end="504:31"><call pos:start="504:9" pos:end="504:31"><name pos:start="504:9" pos:end="504:19">unlock_user</name><argument_list pos:start="504:20" pos:end="504:31">(<argument pos:start="504:21" pos:end="504:21"><expr pos:start="504:21" pos:end="504:21"><name pos:start="504:21" pos:end="504:21">p</name></expr></argument>, <argument pos:start="504:24" pos:end="504:27"><expr pos:start="504:24" pos:end="504:27"><name pos:start="504:24" pos:end="504:27">arg2</name></expr></argument>, <argument pos:start="504:30" pos:end="504:30"><expr pos:start="504:30" pos:end="504:30"><literal type="number" pos:start="504:30" pos:end="504:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="505:1" pos:end="505:6">#<cpp:directive pos:start="505:2" pos:end="505:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="506:1" pos:end="506:22">#<cpp:directive pos:start="506:2" pos:end="506:6">ifdef</cpp:directive> <name pos:start="506:8" pos:end="506:22">TARGET_NR_rmdir</name></cpp:ifdef>
    <case pos:start="507:5" pos:end="507:25">case <expr pos:start="507:10" pos:end="507:24"><name pos:start="507:10" pos:end="507:24">TARGET_NR_rmdir</name></expr>:</case>
        <if_stmt pos:start="508:9" pos:end="509:24"><if pos:start="508:9" pos:end="509:24">if <condition pos:start="508:12" pos:end="508:42">(<expr pos:start="508:13" pos:end="508:41"><operator pos:start="508:13" pos:end="508:13">!</operator><operator pos:start="508:14" pos:end="508:14">(</operator><name pos:start="508:15" pos:end="508:15">p</name> <operator pos:start="508:17" pos:end="508:17">=</operator> <call pos:start="508:19" pos:end="508:40"><name pos:start="508:19" pos:end="508:34">lock_user_string</name><argument_list pos:start="508:35" pos:end="508:40">(<argument pos:start="508:36" pos:end="508:39"><expr pos:start="508:36" pos:end="508:39"><name pos:start="508:36" pos:end="508:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="508:41" pos:end="508:41">)</operator></expr>)</condition><block type="pseudo" pos:start="509:13" pos:end="509:24"><block_content pos:start="509:13" pos:end="509:24">
            <goto pos:start="509:13" pos:end="509:24">goto <name pos:start="509:18" pos:end="509:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="510:9" pos:end="510:34"><expr pos:start="510:9" pos:end="510:33"><name pos:start="510:9" pos:end="510:11">ret</name> <operator pos:start="510:13" pos:end="510:13">=</operator> <call pos:start="510:15" pos:end="510:33"><name pos:start="510:15" pos:end="510:23">get_errno</name><argument_list pos:start="510:24" pos:end="510:33">(<argument pos:start="510:25" pos:end="510:32"><expr pos:start="510:25" pos:end="510:32"><call pos:start="510:25" pos:end="510:32"><name pos:start="510:25" pos:end="510:29">rmdir</name><argument_list pos:start="510:30" pos:end="510:32">(<argument pos:start="510:31" pos:end="510:31"><expr pos:start="510:31" pos:end="510:31"><name pos:start="510:31" pos:end="510:31">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="511:9" pos:end="513:0"><expr pos:start="511:9" pos:end="511:31"><call pos:start="511:9" pos:end="511:31"><name pos:start="511:9" pos:end="511:19">unlock_user</name><argument_list pos:start="511:20" pos:end="511:31">(<argument pos:start="511:21" pos:end="511:21"><expr pos:start="511:21" pos:end="511:21"><name pos:start="511:21" pos:end="511:21">p</name></expr></argument>, <argument pos:start="511:24" pos:end="511:27"><expr pos:start="511:24" pos:end="511:27"><name pos:start="511:24" pos:end="511:27">arg1</name></expr></argument>, <argument pos:start="511:30" pos:end="511:30"><expr pos:start="511:30" pos:end="511:30"><literal type="number" pos:start="511:30" pos:end="511:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="512:1" pos:end="512:6">#<cpp:directive pos:start="512:2" pos:end="512:6">endif</cpp:directive></cpp:endif>
    <case pos:start="513:5" pos:end="513:23">case <expr pos:start="513:10" pos:end="513:22"><name pos:start="513:10" pos:end="513:22">TARGET_NR_dup</name></expr>:</case>
        <expr_stmt pos:start="514:9" pos:end="514:35"><expr pos:start="514:9" pos:end="514:34"><name pos:start="514:9" pos:end="514:11">ret</name> <operator pos:start="514:13" pos:end="514:13">=</operator> <call pos:start="514:15" pos:end="514:34"><name pos:start="514:15" pos:end="514:23">get_errno</name><argument_list pos:start="514:24" pos:end="514:34">(<argument pos:start="514:25" pos:end="514:33"><expr pos:start="514:25" pos:end="514:33"><call pos:start="514:25" pos:end="514:33"><name pos:start="514:25" pos:end="514:27">dup</name><argument_list pos:start="514:28" pos:end="514:33">(<argument pos:start="514:29" pos:end="514:32"><expr pos:start="514:29" pos:end="514:32"><name pos:start="514:29" pos:end="514:32">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="515:9" pos:end="3541:14"><if pos:start="515:9" pos:end="3541:14">if <condition pos:start="515:12" pos:end="515:21">(<expr pos:start="515:13" pos:end="515:20"><name pos:start="515:13" pos:end="515:15">ret</name> <operator pos:start="515:17" pos:end="515:18">&gt;=</operator> <literal type="number" pos:start="515:20" pos:end="515:20">0</literal></expr>)</condition> <block pos:start="515:23" pos:end="3541:14">{<block_content pos:start="516:13" pos:end="3541:14">
            <expr_stmt pos:start="516:13" pos:end="518:0"><expr pos:start="516:13" pos:end="516:35"><call pos:start="516:13" pos:end="516:35"><name pos:start="516:13" pos:end="516:24">fd_trans_dup</name><argument_list pos:start="516:25" pos:end="516:35">(<argument pos:start="516:26" pos:end="516:29"><expr pos:start="516:26" pos:end="516:29"><name pos:start="516:26" pos:end="516:29">arg1</name></expr></argument>, <argument pos:start="516:32" pos:end="516:34"><expr pos:start="516:32" pos:end="516:34"><name pos:start="516:32" pos:end="516:34">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="517:1" pos:end="517:21">#<cpp:directive pos:start="517:2" pos:end="517:6">ifdef</cpp:directive> <name pos:start="517:8" pos:end="517:21">TARGET_NR_pipe</name></cpp:ifdef>
    <case pos:start="518:5" pos:end="518:24">case <expr pos:start="518:10" pos:end="518:23"><name pos:start="518:10" pos:end="518:23">TARGET_NR_pipe</name></expr>:</case>
        <expr_stmt pos:start="519:9" pos:end="522:0"><expr pos:start="519:9" pos:end="519:42"><name pos:start="519:9" pos:end="519:11">ret</name> <operator pos:start="519:13" pos:end="519:13">=</operator> <call pos:start="519:15" pos:end="519:42"><name pos:start="519:15" pos:end="519:21">do_pipe</name><argument_list pos:start="519:22" pos:end="519:42">(<argument pos:start="519:23" pos:end="519:29"><expr pos:start="519:23" pos:end="519:29"><name pos:start="519:23" pos:end="519:29">cpu_env</name></expr></argument>, <argument pos:start="519:32" pos:end="519:35"><expr pos:start="519:32" pos:end="519:35"><name pos:start="519:32" pos:end="519:35">arg1</name></expr></argument>, <argument pos:start="519:38" pos:end="519:38"><expr pos:start="519:38" pos:end="519:38"><literal type="number" pos:start="519:38" pos:end="519:38">0</literal></expr></argument>, <argument pos:start="519:41" pos:end="519:41"><expr pos:start="519:41" pos:end="519:41"><literal type="number" pos:start="519:41" pos:end="519:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="520:1" pos:end="520:6">#<cpp:directive pos:start="520:2" pos:end="520:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="521:1" pos:end="521:22">#<cpp:directive pos:start="521:2" pos:end="521:6">ifdef</cpp:directive> <name pos:start="521:8" pos:end="521:22">TARGET_NR_pipe2</name></cpp:ifdef>
    <case pos:start="522:5" pos:end="522:25">case <expr pos:start="522:10" pos:end="522:24"><name pos:start="522:10" pos:end="522:24">TARGET_NR_pipe2</name></expr>:</case>
        <expr_stmt pos:start="523:9" pos:end="526:0"><expr pos:start="523:9" pos:end="524:71"><name pos:start="523:9" pos:end="523:11">ret</name> <operator pos:start="523:13" pos:end="523:13">=</operator> <call pos:start="523:15" pos:end="524:71"><name pos:start="523:15" pos:end="523:21">do_pipe</name><argument_list pos:start="523:22" pos:end="524:71">(<argument pos:start="523:23" pos:end="523:29"><expr pos:start="523:23" pos:end="523:29"><name pos:start="523:23" pos:end="523:29">cpu_env</name></expr></argument>, <argument pos:start="523:32" pos:end="523:35"><expr pos:start="523:32" pos:end="523:35"><name pos:start="523:32" pos:end="523:35">arg1</name></expr></argument>,
                      <argument pos:start="524:23" pos:end="524:67"><expr pos:start="524:23" pos:end="524:67"><call pos:start="524:23" pos:end="524:67"><name pos:start="524:23" pos:end="524:44">target_to_host_bitmask</name><argument_list pos:start="524:45" pos:end="524:67">(<argument pos:start="524:46" pos:end="524:49"><expr pos:start="524:46" pos:end="524:49"><name pos:start="524:46" pos:end="524:49">arg2</name></expr></argument>, <argument pos:start="524:52" pos:end="524:66"><expr pos:start="524:52" pos:end="524:66"><name pos:start="524:52" pos:end="524:66">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="524:70" pos:end="524:70"><expr pos:start="524:70" pos:end="524:70"><literal type="number" pos:start="524:70" pos:end="524:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="525:1" pos:end="525:6">#<cpp:directive pos:start="525:2" pos:end="525:6">endif</cpp:directive></cpp:endif>
    <case pos:start="526:5" pos:end="526:25">case <expr pos:start="526:10" pos:end="526:24"><name pos:start="526:10" pos:end="526:24">TARGET_NR_times</name></expr>:</case>
        <block pos:start="527:9" pos:end="3541:14">{<block_content pos:start="528:13" pos:end="3541:14">
            <decl_stmt pos:start="528:13" pos:end="528:36"><decl pos:start="528:13" pos:end="528:35"><type pos:start="528:13" pos:end="528:31"><name pos:start="528:13" pos:end="528:29"><name pos:start="528:13" pos:end="528:18">struct</name> <name pos:start="528:20" pos:end="528:29">target_tms</name></name> <modifier pos:start="528:31" pos:end="528:31">*</modifier></type><name pos:start="528:32" pos:end="528:35">tmsp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="529:13" pos:end="529:27"><decl pos:start="529:13" pos:end="529:26"><type pos:start="529:13" pos:end="529:22"><name pos:start="529:13" pos:end="529:22"><name pos:start="529:13" pos:end="529:18">struct</name> <name pos:start="529:20" pos:end="529:22">tms</name></name></type> <name pos:start="529:24" pos:end="529:26">tms</name></decl>;</decl_stmt>
            <expr_stmt pos:start="530:13" pos:end="530:41"><expr pos:start="530:13" pos:end="530:40"><name pos:start="530:13" pos:end="530:15">ret</name> <operator pos:start="530:17" pos:end="530:17">=</operator> <call pos:start="530:19" pos:end="530:40"><name pos:start="530:19" pos:end="530:27">get_errno</name><argument_list pos:start="530:28" pos:end="530:40">(<argument pos:start="530:29" pos:end="530:39"><expr pos:start="530:29" pos:end="530:39"><call pos:start="530:29" pos:end="530:39"><name pos:start="530:29" pos:end="530:33">times</name><argument_list pos:start="530:34" pos:end="530:39">(<argument pos:start="530:35" pos:end="530:38"><expr pos:start="530:35" pos:end="530:38"><operator pos:start="530:35" pos:end="530:35">&amp;</operator><name pos:start="530:36" pos:end="530:38">tms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="531:13" pos:end="3541:14"><if pos:start="531:13" pos:end="3541:14">if <condition pos:start="531:16" pos:end="531:21">(<expr pos:start="531:17" pos:end="531:20"><name pos:start="531:17" pos:end="531:20">arg1</name></expr>)</condition> <block pos:start="531:23" pos:end="3541:14">{<block_content pos:start="532:17" pos:end="3541:14">
                <expr_stmt pos:start="532:17" pos:end="532:83"><expr pos:start="532:17" pos:end="532:82"><name pos:start="532:17" pos:end="532:20">tmsp</name> <operator pos:start="532:22" pos:end="532:22">=</operator> <call pos:start="532:24" pos:end="532:82"><name pos:start="532:24" pos:end="532:32">lock_user</name><argument_list pos:start="532:33" pos:end="532:82">(<argument pos:start="532:34" pos:end="532:45"><expr pos:start="532:34" pos:end="532:45"><name pos:start="532:34" pos:end="532:45">VERIFY_WRITE</name></expr></argument>, <argument pos:start="532:48" pos:end="532:51"><expr pos:start="532:48" pos:end="532:51"><name pos:start="532:48" pos:end="532:51">arg1</name></expr></argument>, <argument pos:start="532:54" pos:end="532:78"><expr pos:start="532:54" pos:end="532:78"><sizeof pos:start="532:54" pos:end="532:78">sizeof<argument_list pos:start="532:60" pos:end="532:78">(<argument pos:start="532:61" pos:end="532:77"><expr pos:start="532:61" pos:end="532:77">struct <name pos:start="532:68" pos:end="532:77">target_tms</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="532:81" pos:end="532:81"><expr pos:start="532:81" pos:end="532:81"><literal type="number" pos:start="532:81" pos:end="532:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="533:17" pos:end="534:32"><if pos:start="533:17" pos:end="534:32">if <condition pos:start="533:20" pos:end="533:26">(<expr pos:start="533:21" pos:end="533:25"><operator pos:start="533:21" pos:end="533:21">!</operator><name pos:start="533:22" pos:end="533:25">tmsp</name></expr>)</condition><block type="pseudo" pos:start="534:21" pos:end="534:32"><block_content pos:start="534:21" pos:end="534:32">
                    <goto pos:start="534:21" pos:end="534:32">goto <name pos:start="534:26" pos:end="534:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="535:17" pos:end="535:81"><expr pos:start="535:17" pos:end="535:80"><name pos:start="535:17" pos:end="535:31"><name pos:start="535:17" pos:end="535:20">tmsp</name><operator pos:start="535:21" pos:end="535:22">-&gt;</operator><name pos:start="535:23" pos:end="535:31">tms_utime</name></name> <operator pos:start="535:33" pos:end="535:33">=</operator> <call pos:start="535:35" pos:end="535:80"><name pos:start="535:35" pos:end="535:41">tswapal</name><argument_list pos:start="535:42" pos:end="535:80">(<argument pos:start="535:43" pos:end="535:79"><expr pos:start="535:43" pos:end="535:79"><call pos:start="535:43" pos:end="535:79"><name pos:start="535:43" pos:end="535:64">host_to_target_clock_t</name><argument_list pos:start="535:65" pos:end="535:79">(<argument pos:start="535:66" pos:end="535:78"><expr pos:start="535:66" pos:end="535:78"><name pos:start="535:66" pos:end="535:78"><name pos:start="535:66" pos:end="535:68">tms</name><operator pos:start="535:69" pos:end="535:69">.</operator><name pos:start="535:70" pos:end="535:78">tms_utime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="536:17" pos:end="536:81"><expr pos:start="536:17" pos:end="536:80"><name pos:start="536:17" pos:end="536:31"><name pos:start="536:17" pos:end="536:20">tmsp</name><operator pos:start="536:21" pos:end="536:22">-&gt;</operator><name pos:start="536:23" pos:end="536:31">tms_stime</name></name> <operator pos:start="536:33" pos:end="536:33">=</operator> <call pos:start="536:35" pos:end="536:80"><name pos:start="536:35" pos:end="536:41">tswapal</name><argument_list pos:start="536:42" pos:end="536:80">(<argument pos:start="536:43" pos:end="536:79"><expr pos:start="536:43" pos:end="536:79"><call pos:start="536:43" pos:end="536:79"><name pos:start="536:43" pos:end="536:64">host_to_target_clock_t</name><argument_list pos:start="536:65" pos:end="536:79">(<argument pos:start="536:66" pos:end="536:78"><expr pos:start="536:66" pos:end="536:78"><name pos:start="536:66" pos:end="536:78"><name pos:start="536:66" pos:end="536:68">tms</name><operator pos:start="536:69" pos:end="536:69">.</operator><name pos:start="536:70" pos:end="536:78">tms_stime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="537:17" pos:end="537:83"><expr pos:start="537:17" pos:end="537:82"><name pos:start="537:17" pos:end="537:32"><name pos:start="537:17" pos:end="537:20">tmsp</name><operator pos:start="537:21" pos:end="537:22">-&gt;</operator><name pos:start="537:23" pos:end="537:32">tms_cutime</name></name> <operator pos:start="537:34" pos:end="537:34">=</operator> <call pos:start="537:36" pos:end="537:82"><name pos:start="537:36" pos:end="537:42">tswapal</name><argument_list pos:start="537:43" pos:end="537:82">(<argument pos:start="537:44" pos:end="537:81"><expr pos:start="537:44" pos:end="537:81"><call pos:start="537:44" pos:end="537:81"><name pos:start="537:44" pos:end="537:65">host_to_target_clock_t</name><argument_list pos:start="537:66" pos:end="537:81">(<argument pos:start="537:67" pos:end="537:80"><expr pos:start="537:67" pos:end="537:80"><name pos:start="537:67" pos:end="537:80"><name pos:start="537:67" pos:end="537:69">tms</name><operator pos:start="537:70" pos:end="537:70">.</operator><name pos:start="537:71" pos:end="537:80">tms_cutime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="538:17" pos:end="538:83"><expr pos:start="538:17" pos:end="538:82"><name pos:start="538:17" pos:end="538:32"><name pos:start="538:17" pos:end="538:20">tmsp</name><operator pos:start="538:21" pos:end="538:22">-&gt;</operator><name pos:start="538:23" pos:end="538:32">tms_cstime</name></name> <operator pos:start="538:34" pos:end="538:34">=</operator> <call pos:start="538:36" pos:end="538:82"><name pos:start="538:36" pos:end="538:42">tswapal</name><argument_list pos:start="538:43" pos:end="538:82">(<argument pos:start="538:44" pos:end="538:81"><expr pos:start="538:44" pos:end="538:81"><call pos:start="538:44" pos:end="538:81"><name pos:start="538:44" pos:end="538:65">host_to_target_clock_t</name><argument_list pos:start="538:66" pos:end="538:81">(<argument pos:start="538:67" pos:end="538:80"><expr pos:start="538:67" pos:end="538:80"><name pos:start="538:67" pos:end="538:80"><name pos:start="538:67" pos:end="538:69">tms</name><operator pos:start="538:70" pos:end="538:70">.</operator><name pos:start="538:71" pos:end="538:80">tms_cstime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="539:13" pos:end="542:0"><if pos:start="539:13" pos:end="542:0">if <condition pos:start="539:16" pos:end="539:31">(<expr pos:start="539:17" pos:end="539:30"><operator pos:start="539:17" pos:end="539:17">!</operator><call pos:start="539:18" pos:end="539:30"><name pos:start="539:18" pos:end="539:25">is_error</name><argument_list pos:start="539:26" pos:end="539:30">(<argument pos:start="539:27" pos:end="539:29"><expr pos:start="539:27" pos:end="539:29"><name pos:start="539:27" pos:end="539:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="540:17" pos:end="542:0"><block_content pos:start="540:17" pos:end="542:0">
                <expr_stmt pos:start="540:17" pos:end="542:0"><expr pos:start="540:17" pos:end="540:49"><name pos:start="540:17" pos:end="540:19">ret</name> <operator pos:start="540:21" pos:end="540:21">=</operator> <call pos:start="540:23" pos:end="540:49"><name pos:start="540:23" pos:end="540:44">host_to_target_clock_t</name><argument_list pos:start="540:45" pos:end="540:49">(<argument pos:start="540:46" pos:end="540:48"><expr pos:start="540:46" pos:end="540:48"><name pos:start="540:46" pos:end="540:48">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef pos:start="541:1" pos:end="541:21">#<cpp:directive pos:start="541:2" pos:end="541:6">ifdef</cpp:directive> <name pos:start="541:8" pos:end="541:21">TARGET_NR_prof</name></cpp:ifdef>
    <case pos:start="542:5" pos:end="542:24">case <expr pos:start="542:10" pos:end="542:23"><name pos:start="542:10" pos:end="542:23">TARGET_NR_prof</name></expr>:</case>
        <goto pos:start="543:9" pos:end="546:0">goto <name pos:start="543:14" pos:end="543:26">unimplemented</name>;</goto>
<cpp:endif pos:start="544:1" pos:end="544:6">#<cpp:directive pos:start="544:2" pos:end="544:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="545:1" pos:end="545:23">#<cpp:directive pos:start="545:2" pos:end="545:6">ifdef</cpp:directive> <name pos:start="545:8" pos:end="545:23">TARGET_NR_signal</name></cpp:ifdef>
    <case pos:start="546:5" pos:end="546:26">case <expr pos:start="546:10" pos:end="546:25"><name pos:start="546:10" pos:end="546:25">TARGET_NR_signal</name></expr>:</case>
        <goto pos:start="547:9" pos:end="549:0">goto <name pos:start="547:14" pos:end="547:26">unimplemented</name>;</goto>
<cpp:endif pos:start="548:1" pos:end="548:6">#<cpp:directive pos:start="548:2" pos:end="548:6">endif</cpp:directive></cpp:endif>
    <case pos:start="549:5" pos:end="549:24">case <expr pos:start="549:10" pos:end="549:23"><name pos:start="549:10" pos:end="549:23">TARGET_NR_acct</name></expr>:</case>
        <if_stmt pos:start="550:9" pos:end="3541:14"><if pos:start="550:9" pos:end="552:9">if <condition pos:start="550:12" pos:end="550:22">(<expr pos:start="550:13" pos:end="550:21"><name pos:start="550:13" pos:end="550:16">arg1</name> <operator pos:start="550:18" pos:end="550:19">==</operator> <literal type="number" pos:start="550:21" pos:end="550:21">0</literal></expr>)</condition> <block pos:start="550:24" pos:end="552:9">{<block_content pos:start="551:13" pos:end="551:40">
            <expr_stmt pos:start="551:13" pos:end="551:40"><expr pos:start="551:13" pos:end="551:39"><name pos:start="551:13" pos:end="551:15">ret</name> <operator pos:start="551:17" pos:end="551:17">=</operator> <call pos:start="551:19" pos:end="551:39"><name pos:start="551:19" pos:end="551:27">get_errno</name><argument_list pos:start="551:28" pos:end="551:39">(<argument pos:start="551:29" pos:end="551:38"><expr pos:start="551:29" pos:end="551:38"><call pos:start="551:29" pos:end="551:38"><name pos:start="551:29" pos:end="551:32">acct</name><argument_list pos:start="551:33" pos:end="551:38">(<argument pos:start="551:34" pos:end="551:37"><expr pos:start="551:34" pos:end="551:37"><name pos:start="551:34" pos:end="551:37">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="552:11" pos:end="3541:14">else <block pos:start="552:16" pos:end="3541:14">{<block_content pos:start="553:13" pos:end="3541:14">
            <if_stmt pos:start="553:13" pos:end="554:28"><if pos:start="553:13" pos:end="554:28">if <condition pos:start="553:16" pos:end="553:46">(<expr pos:start="553:17" pos:end="553:45"><operator pos:start="553:17" pos:end="553:17">!</operator><operator pos:start="553:18" pos:end="553:18">(</operator><name pos:start="553:19" pos:end="553:19">p</name> <operator pos:start="553:21" pos:end="553:21">=</operator> <call pos:start="553:23" pos:end="553:44"><name pos:start="553:23" pos:end="553:38">lock_user_string</name><argument_list pos:start="553:39" pos:end="553:44">(<argument pos:start="553:40" pos:end="553:43"><expr pos:start="553:40" pos:end="553:43"><name pos:start="553:40" pos:end="553:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="553:45" pos:end="553:45">)</operator></expr>)</condition><block type="pseudo" pos:start="554:17" pos:end="554:28"><block_content pos:start="554:17" pos:end="554:28">
                <goto pos:start="554:17" pos:end="554:28">goto <name pos:start="554:22" pos:end="554:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="555:13" pos:end="555:43"><expr pos:start="555:13" pos:end="555:42"><name pos:start="555:13" pos:end="555:15">ret</name> <operator pos:start="555:17" pos:end="555:17">=</operator> <call pos:start="555:19" pos:end="555:42"><name pos:start="555:19" pos:end="555:27">get_errno</name><argument_list pos:start="555:28" pos:end="555:42">(<argument pos:start="555:29" pos:end="555:41"><expr pos:start="555:29" pos:end="555:41"><call pos:start="555:29" pos:end="555:41"><name pos:start="555:29" pos:end="555:32">acct</name><argument_list pos:start="555:33" pos:end="555:41">(<argument pos:start="555:34" pos:end="555:40"><expr pos:start="555:34" pos:end="555:40"><call pos:start="555:34" pos:end="555:40"><name pos:start="555:34" pos:end="555:37">path</name><argument_list pos:start="555:38" pos:end="555:40">(<argument pos:start="555:39" pos:end="555:39"><expr pos:start="555:39" pos:end="555:39"><name pos:start="555:39" pos:end="555:39">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="556:13" pos:end="558:0"><expr pos:start="556:13" pos:end="556:35"><call pos:start="556:13" pos:end="556:35"><name pos:start="556:13" pos:end="556:23">unlock_user</name><argument_list pos:start="556:24" pos:end="556:35">(<argument pos:start="556:25" pos:end="556:25"><expr pos:start="556:25" pos:end="556:25"><name pos:start="556:25" pos:end="556:25">p</name></expr></argument>, <argument pos:start="556:28" pos:end="556:31"><expr pos:start="556:28" pos:end="556:31"><name pos:start="556:28" pos:end="556:31">arg1</name></expr></argument>, <argument pos:start="556:34" pos:end="556:34"><expr pos:start="556:34" pos:end="556:34"><literal type="number" pos:start="556:34" pos:end="556:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="557:1" pos:end="557:24">#<cpp:directive pos:start="557:2" pos:end="557:6">ifdef</cpp:directive> <name pos:start="557:8" pos:end="557:24">TARGET_NR_umount2</name></cpp:ifdef>
    <case pos:start="558:5" pos:end="558:27">case <expr pos:start="558:10" pos:end="558:26"><name pos:start="558:10" pos:end="558:26">TARGET_NR_umount2</name></expr>:</case>
        <if_stmt pos:start="559:9" pos:end="560:24"><if pos:start="559:9" pos:end="560:24">if <condition pos:start="559:12" pos:end="559:42">(<expr pos:start="559:13" pos:end="559:41"><operator pos:start="559:13" pos:end="559:13">!</operator><operator pos:start="559:14" pos:end="559:14">(</operator><name pos:start="559:15" pos:end="559:15">p</name> <operator pos:start="559:17" pos:end="559:17">=</operator> <call pos:start="559:19" pos:end="559:40"><name pos:start="559:19" pos:end="559:34">lock_user_string</name><argument_list pos:start="559:35" pos:end="559:40">(<argument pos:start="559:36" pos:end="559:39"><expr pos:start="559:36" pos:end="559:39"><name pos:start="559:36" pos:end="559:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="559:41" pos:end="559:41">)</operator></expr>)</condition><block type="pseudo" pos:start="560:13" pos:end="560:24"><block_content pos:start="560:13" pos:end="560:24">
            <goto pos:start="560:13" pos:end="560:24">goto <name pos:start="560:18" pos:end="560:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="561:9" pos:end="561:42"><expr pos:start="561:9" pos:end="561:41"><name pos:start="561:9" pos:end="561:11">ret</name> <operator pos:start="561:13" pos:end="561:13">=</operator> <call pos:start="561:15" pos:end="561:41"><name pos:start="561:15" pos:end="561:23">get_errno</name><argument_list pos:start="561:24" pos:end="561:41">(<argument pos:start="561:25" pos:end="561:40"><expr pos:start="561:25" pos:end="561:40"><call pos:start="561:25" pos:end="561:40"><name pos:start="561:25" pos:end="561:31">umount2</name><argument_list pos:start="561:32" pos:end="561:40">(<argument pos:start="561:33" pos:end="561:33"><expr pos:start="561:33" pos:end="561:33"><name pos:start="561:33" pos:end="561:33">p</name></expr></argument>, <argument pos:start="561:36" pos:end="561:39"><expr pos:start="561:36" pos:end="561:39"><name pos:start="561:36" pos:end="561:39">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="562:9" pos:end="565:0"><expr pos:start="562:9" pos:end="562:31"><call pos:start="562:9" pos:end="562:31"><name pos:start="562:9" pos:end="562:19">unlock_user</name><argument_list pos:start="562:20" pos:end="562:31">(<argument pos:start="562:21" pos:end="562:21"><expr pos:start="562:21" pos:end="562:21"><name pos:start="562:21" pos:end="562:21">p</name></expr></argument>, <argument pos:start="562:24" pos:end="562:27"><expr pos:start="562:24" pos:end="562:27"><name pos:start="562:24" pos:end="562:27">arg1</name></expr></argument>, <argument pos:start="562:30" pos:end="562:30"><expr pos:start="562:30" pos:end="562:30"><literal type="number" pos:start="562:30" pos:end="562:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="563:1" pos:end="563:6">#<cpp:directive pos:start="563:2" pos:end="563:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="564:1" pos:end="564:21">#<cpp:directive pos:start="564:2" pos:end="564:6">ifdef</cpp:directive> <name pos:start="564:8" pos:end="564:21">TARGET_NR_lock</name></cpp:ifdef>
    <case pos:start="565:5" pos:end="565:24">case <expr pos:start="565:10" pos:end="565:23"><name pos:start="565:10" pos:end="565:23">TARGET_NR_lock</name></expr>:</case>
        <goto pos:start="566:9" pos:end="568:0">goto <name pos:start="566:14" pos:end="566:26">unimplemented</name>;</goto>
<cpp:endif pos:start="567:1" pos:end="567:6">#<cpp:directive pos:start="567:2" pos:end="567:6">endif</cpp:directive></cpp:endif>
    <case pos:start="568:5" pos:end="568:25">case <expr pos:start="568:10" pos:end="568:24"><name pos:start="568:10" pos:end="568:24">TARGET_NR_ioctl</name></expr>:</case>
        <expr_stmt pos:start="569:9" pos:end="569:41"><expr pos:start="569:9" pos:end="569:40"><name pos:start="569:9" pos:end="569:11">ret</name> <operator pos:start="569:13" pos:end="569:13">=</operator> <call pos:start="569:15" pos:end="569:40"><name pos:start="569:15" pos:end="569:22">do_ioctl</name><argument_list pos:start="569:23" pos:end="569:40">(<argument pos:start="569:24" pos:end="569:27"><expr pos:start="569:24" pos:end="569:27"><name pos:start="569:24" pos:end="569:27">arg1</name></expr></argument>, <argument pos:start="569:30" pos:end="569:33"><expr pos:start="569:30" pos:end="569:33"><name pos:start="569:30" pos:end="569:33">arg2</name></expr></argument>, <argument pos:start="569:36" pos:end="569:39"><expr pos:start="569:36" pos:end="569:39"><name pos:start="569:36" pos:end="569:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="570:5" pos:end="570:25">case <expr pos:start="570:10" pos:end="570:24"><name pos:start="570:10" pos:end="570:24">TARGET_NR_fcntl</name></expr>:</case>
        <expr_stmt pos:start="571:9" pos:end="573:0"><expr pos:start="571:9" pos:end="571:40"><name pos:start="571:9" pos:end="571:11">ret</name> <operator pos:start="571:13" pos:end="571:13">=</operator> <call pos:start="571:15" pos:end="571:40"><name pos:start="571:15" pos:end="571:22">do_fcntl</name><argument_list pos:start="571:23" pos:end="571:40">(<argument pos:start="571:24" pos:end="571:27"><expr pos:start="571:24" pos:end="571:27"><name pos:start="571:24" pos:end="571:27">arg1</name></expr></argument>, <argument pos:start="571:30" pos:end="571:33"><expr pos:start="571:30" pos:end="571:33"><name pos:start="571:30" pos:end="571:33">arg2</name></expr></argument>, <argument pos:start="571:36" pos:end="571:39"><expr pos:start="571:36" pos:end="571:39"><name pos:start="571:36" pos:end="571:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="572:1" pos:end="572:20">#<cpp:directive pos:start="572:2" pos:end="572:6">ifdef</cpp:directive> <name pos:start="572:8" pos:end="572:20">TARGET_NR_mpx</name></cpp:ifdef>
    <case pos:start="573:5" pos:end="573:23">case <expr pos:start="573:10" pos:end="573:22"><name pos:start="573:10" pos:end="573:22">TARGET_NR_mpx</name></expr>:</case>
        <goto pos:start="574:9" pos:end="576:0">goto <name pos:start="574:14" pos:end="574:26">unimplemented</name>;</goto>
<cpp:endif pos:start="575:1" pos:end="575:6">#<cpp:directive pos:start="575:2" pos:end="575:6">endif</cpp:directive></cpp:endif>
    <case pos:start="576:5" pos:end="576:27">case <expr pos:start="576:10" pos:end="576:26"><name pos:start="576:10" pos:end="576:26">TARGET_NR_setpgid</name></expr>:</case>
        <expr_stmt pos:start="577:9" pos:end="579:0"><expr pos:start="577:9" pos:end="577:44"><name pos:start="577:9" pos:end="577:11">ret</name> <operator pos:start="577:13" pos:end="577:13">=</operator> <call pos:start="577:15" pos:end="577:44"><name pos:start="577:15" pos:end="577:23">get_errno</name><argument_list pos:start="577:24" pos:end="577:44">(<argument pos:start="577:25" pos:end="577:43"><expr pos:start="577:25" pos:end="577:43"><call pos:start="577:25" pos:end="577:43"><name pos:start="577:25" pos:end="577:31">setpgid</name><argument_list pos:start="577:32" pos:end="577:43">(<argument pos:start="577:33" pos:end="577:36"><expr pos:start="577:33" pos:end="577:36"><name pos:start="577:33" pos:end="577:36">arg1</name></expr></argument>, <argument pos:start="577:39" pos:end="577:42"><expr pos:start="577:39" pos:end="577:42"><name pos:start="577:39" pos:end="577:42">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="578:1" pos:end="578:23">#<cpp:directive pos:start="578:2" pos:end="578:6">ifdef</cpp:directive> <name pos:start="578:8" pos:end="578:23">TARGET_NR_ulimit</name></cpp:ifdef>
    <case pos:start="579:5" pos:end="579:26">case <expr pos:start="579:10" pos:end="579:25"><name pos:start="579:10" pos:end="579:25">TARGET_NR_ulimit</name></expr>:</case>
        <goto pos:start="580:9" pos:end="583:0">goto <name pos:start="580:14" pos:end="580:26">unimplemented</name>;</goto>
<cpp:endif pos:start="581:1" pos:end="581:6">#<cpp:directive pos:start="581:2" pos:end="581:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="582:1" pos:end="582:28">#<cpp:directive pos:start="582:2" pos:end="582:6">ifdef</cpp:directive> <name pos:start="582:8" pos:end="582:28">TARGET_NR_oldolduname</name></cpp:ifdef>
    <case pos:start="583:5" pos:end="583:31">case <expr pos:start="583:10" pos:end="583:30"><name pos:start="583:10" pos:end="583:30">TARGET_NR_oldolduname</name></expr>:</case>
        <goto pos:start="584:9" pos:end="586:0">goto <name pos:start="584:14" pos:end="584:26">unimplemented</name>;</goto>
<cpp:endif pos:start="585:1" pos:end="585:6">#<cpp:directive pos:start="585:2" pos:end="585:6">endif</cpp:directive></cpp:endif>
    <case pos:start="586:5" pos:end="586:25">case <expr pos:start="586:10" pos:end="586:24"><name pos:start="586:10" pos:end="586:24">TARGET_NR_umask</name></expr>:</case>
        <expr_stmt pos:start="587:9" pos:end="587:37"><expr pos:start="587:9" pos:end="587:36"><name pos:start="587:9" pos:end="587:11">ret</name> <operator pos:start="587:13" pos:end="587:13">=</operator> <call pos:start="587:15" pos:end="587:36"><name pos:start="587:15" pos:end="587:23">get_errno</name><argument_list pos:start="587:24" pos:end="587:36">(<argument pos:start="587:25" pos:end="587:35"><expr pos:start="587:25" pos:end="587:35"><call pos:start="587:25" pos:end="587:35"><name pos:start="587:25" pos:end="587:29">umask</name><argument_list pos:start="587:30" pos:end="587:35">(<argument pos:start="587:31" pos:end="587:34"><expr pos:start="587:31" pos:end="587:34"><name pos:start="587:31" pos:end="587:34">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="588:5" pos:end="588:26">case <expr pos:start="588:10" pos:end="588:25"><name pos:start="588:10" pos:end="588:25">TARGET_NR_chroot</name></expr>:</case>
        <if_stmt pos:start="589:9" pos:end="590:24"><if pos:start="589:9" pos:end="590:24">if <condition pos:start="589:12" pos:end="589:42">(<expr pos:start="589:13" pos:end="589:41"><operator pos:start="589:13" pos:end="589:13">!</operator><operator pos:start="589:14" pos:end="589:14">(</operator><name pos:start="589:15" pos:end="589:15">p</name> <operator pos:start="589:17" pos:end="589:17">=</operator> <call pos:start="589:19" pos:end="589:40"><name pos:start="589:19" pos:end="589:34">lock_user_string</name><argument_list pos:start="589:35" pos:end="589:40">(<argument pos:start="589:36" pos:end="589:39"><expr pos:start="589:36" pos:end="589:39"><name pos:start="589:36" pos:end="589:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="589:41" pos:end="589:41">)</operator></expr>)</condition><block type="pseudo" pos:start="590:13" pos:end="590:24"><block_content pos:start="590:13" pos:end="590:24">
            <goto pos:start="590:13" pos:end="590:24">goto <name pos:start="590:18" pos:end="590:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="591:9" pos:end="591:35"><expr pos:start="591:9" pos:end="591:34"><name pos:start="591:9" pos:end="591:11">ret</name> <operator pos:start="591:13" pos:end="591:13">=</operator> <call pos:start="591:15" pos:end="591:34"><name pos:start="591:15" pos:end="591:23">get_errno</name><argument_list pos:start="591:24" pos:end="591:34">(<argument pos:start="591:25" pos:end="591:33"><expr pos:start="591:25" pos:end="591:33"><call pos:start="591:25" pos:end="591:33"><name pos:start="591:25" pos:end="591:30">chroot</name><argument_list pos:start="591:31" pos:end="591:33">(<argument pos:start="591:32" pos:end="591:32"><expr pos:start="591:32" pos:end="591:32"><name pos:start="591:32" pos:end="591:32">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="592:9" pos:end="594:0"><expr pos:start="592:9" pos:end="592:31"><call pos:start="592:9" pos:end="592:31"><name pos:start="592:9" pos:end="592:19">unlock_user</name><argument_list pos:start="592:20" pos:end="592:31">(<argument pos:start="592:21" pos:end="592:21"><expr pos:start="592:21" pos:end="592:21"><name pos:start="592:21" pos:end="592:21">p</name></expr></argument>, <argument pos:start="592:24" pos:end="592:27"><expr pos:start="592:24" pos:end="592:27"><name pos:start="592:24" pos:end="592:27">arg1</name></expr></argument>, <argument pos:start="592:30" pos:end="592:30"><expr pos:start="592:30" pos:end="592:30"><literal type="number" pos:start="592:30" pos:end="592:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="593:1" pos:end="593:22">#<cpp:directive pos:start="593:2" pos:end="593:6">ifdef</cpp:directive> <name pos:start="593:8" pos:end="593:22">TARGET_NR_ustat</name></cpp:ifdef>
    <case pos:start="594:5" pos:end="594:25">case <expr pos:start="594:10" pos:end="594:24"><name pos:start="594:10" pos:end="594:24">TARGET_NR_ustat</name></expr>:</case>
        <goto pos:start="595:9" pos:end="598:0">goto <name pos:start="595:14" pos:end="595:26">unimplemented</name>;</goto>
<cpp:endif pos:start="596:1" pos:end="596:6">#<cpp:directive pos:start="596:2" pos:end="596:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="597:1" pos:end="597:21">#<cpp:directive pos:start="597:2" pos:end="597:6">ifdef</cpp:directive> <name pos:start="597:8" pos:end="597:21">TARGET_NR_dup2</name></cpp:ifdef>
    <case pos:start="598:5" pos:end="598:24">case <expr pos:start="598:10" pos:end="598:23"><name pos:start="598:10" pos:end="598:23">TARGET_NR_dup2</name></expr>:</case>
        <expr_stmt pos:start="599:9" pos:end="599:42"><expr pos:start="599:9" pos:end="599:41"><name pos:start="599:9" pos:end="599:11">ret</name> <operator pos:start="599:13" pos:end="599:13">=</operator> <call pos:start="599:15" pos:end="599:41"><name pos:start="599:15" pos:end="599:23">get_errno</name><argument_list pos:start="599:24" pos:end="599:41">(<argument pos:start="599:25" pos:end="599:40"><expr pos:start="599:25" pos:end="599:40"><call pos:start="599:25" pos:end="599:40"><name pos:start="599:25" pos:end="599:28">dup2</name><argument_list pos:start="599:29" pos:end="599:40">(<argument pos:start="599:30" pos:end="599:33"><expr pos:start="599:30" pos:end="599:33"><name pos:start="599:30" pos:end="599:33">arg1</name></expr></argument>, <argument pos:start="599:36" pos:end="599:39"><expr pos:start="599:36" pos:end="599:39"><name pos:start="599:36" pos:end="599:39">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="600:9" pos:end="3541:14"><if pos:start="600:9" pos:end="3541:14">if <condition pos:start="600:12" pos:end="600:21">(<expr pos:start="600:13" pos:end="600:20"><name pos:start="600:13" pos:end="600:15">ret</name> <operator pos:start="600:17" pos:end="600:18">&gt;=</operator> <literal type="number" pos:start="600:20" pos:end="600:20">0</literal></expr>)</condition> <block pos:start="600:23" pos:end="3541:14">{<block_content pos:start="601:13" pos:end="3541:14">
            <expr_stmt pos:start="601:13" pos:end="604:0"><expr pos:start="601:13" pos:end="601:36"><call pos:start="601:13" pos:end="601:36"><name pos:start="601:13" pos:end="601:24">fd_trans_dup</name><argument_list pos:start="601:25" pos:end="601:36">(<argument pos:start="601:26" pos:end="601:29"><expr pos:start="601:26" pos:end="601:29"><name pos:start="601:26" pos:end="601:29">arg1</name></expr></argument>, <argument pos:start="601:32" pos:end="601:35"><expr pos:start="601:32" pos:end="601:35"><name pos:start="601:32" pos:end="601:35">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="602:1" pos:end="602:6">#<cpp:directive pos:start="602:2" pos:end="602:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="603:1" pos:end="603:51">#<cpp:directive pos:start="603:2" pos:end="603:3">if</cpp:directive> <expr pos:start="603:5" pos:end="603:51"><call pos:start="603:5" pos:end="603:24"><name pos:start="603:5" pos:end="603:11">defined</name><argument_list pos:start="603:12" pos:end="603:24">(<argument pos:start="603:13" pos:end="603:23"><expr pos:start="603:13" pos:end="603:23"><name pos:start="603:13" pos:end="603:23">CONFIG_DUP3</name></expr></argument>)</argument_list></call> <operator pos:start="603:26" pos:end="603:27">&amp;&amp;</operator> <call pos:start="603:29" pos:end="603:51"><name pos:start="603:29" pos:end="603:35">defined</name><argument_list pos:start="603:36" pos:end="603:51">(<argument pos:start="603:37" pos:end="603:50"><expr pos:start="603:37" pos:end="603:50"><name pos:start="603:37" pos:end="603:50">TARGET_NR_dup3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="604:5" pos:end="604:24">case <expr pos:start="604:10" pos:end="604:23"><name pos:start="604:10" pos:end="604:23">TARGET_NR_dup3</name></expr>:</case>
        <expr_stmt pos:start="605:9" pos:end="605:48"><expr pos:start="605:9" pos:end="605:47"><name pos:start="605:9" pos:end="605:11">ret</name> <operator pos:start="605:13" pos:end="605:13">=</operator> <call pos:start="605:15" pos:end="605:47"><name pos:start="605:15" pos:end="605:23">get_errno</name><argument_list pos:start="605:24" pos:end="605:47">(<argument pos:start="605:25" pos:end="605:46"><expr pos:start="605:25" pos:end="605:46"><call pos:start="605:25" pos:end="605:46"><name pos:start="605:25" pos:end="605:28">dup3</name><argument_list pos:start="605:29" pos:end="605:46">(<argument pos:start="605:30" pos:end="605:33"><expr pos:start="605:30" pos:end="605:33"><name pos:start="605:30" pos:end="605:33">arg1</name></expr></argument>, <argument pos:start="605:36" pos:end="605:39"><expr pos:start="605:36" pos:end="605:39"><name pos:start="605:36" pos:end="605:39">arg2</name></expr></argument>, <argument pos:start="605:42" pos:end="605:45"><expr pos:start="605:42" pos:end="605:45"><name pos:start="605:42" pos:end="605:45">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="606:9" pos:end="3541:14"><if pos:start="606:9" pos:end="3541:14">if <condition pos:start="606:12" pos:end="606:21">(<expr pos:start="606:13" pos:end="606:20"><name pos:start="606:13" pos:end="606:15">ret</name> <operator pos:start="606:17" pos:end="606:18">&gt;=</operator> <literal type="number" pos:start="606:20" pos:end="606:20">0</literal></expr>)</condition> <block pos:start="606:23" pos:end="3541:14">{<block_content pos:start="607:13" pos:end="3541:14">
            <expr_stmt pos:start="607:13" pos:end="610:0"><expr pos:start="607:13" pos:end="607:36"><call pos:start="607:13" pos:end="607:36"><name pos:start="607:13" pos:end="607:24">fd_trans_dup</name><argument_list pos:start="607:25" pos:end="607:36">(<argument pos:start="607:26" pos:end="607:29"><expr pos:start="607:26" pos:end="607:29"><name pos:start="607:26" pos:end="607:29">arg1</name></expr></argument>, <argument pos:start="607:32" pos:end="607:35"><expr pos:start="607:32" pos:end="607:35"><name pos:start="607:32" pos:end="607:35">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="608:1" pos:end="608:6">#<cpp:directive pos:start="608:2" pos:end="608:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="609:1" pos:end="609:24">#<cpp:directive pos:start="609:2" pos:end="609:6">ifdef</cpp:directive> <name pos:start="609:8" pos:end="609:24">TARGET_NR_getppid</name></cpp:ifdef> <comment type="block" pos:start="609:26" pos:end="609:43">/* not on alpha */</comment>
    <case pos:start="610:5" pos:end="610:27">case <expr pos:start="610:10" pos:end="610:26"><name pos:start="610:10" pos:end="610:26">TARGET_NR_getppid</name></expr>:</case>
        <expr_stmt pos:start="611:9" pos:end="614:0"><expr pos:start="611:9" pos:end="611:34"><name pos:start="611:9" pos:end="611:11">ret</name> <operator pos:start="611:13" pos:end="611:13">=</operator> <call pos:start="611:15" pos:end="611:34"><name pos:start="611:15" pos:end="611:23">get_errno</name><argument_list pos:start="611:24" pos:end="611:34">(<argument pos:start="611:25" pos:end="611:33"><expr pos:start="611:25" pos:end="611:33"><call pos:start="611:25" pos:end="611:33"><name pos:start="611:25" pos:end="611:31">getppid</name><argument_list pos:start="611:32" pos:end="611:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="612:1" pos:end="612:6">#<cpp:directive pos:start="612:2" pos:end="612:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="613:1" pos:end="613:24">#<cpp:directive pos:start="613:2" pos:end="613:6">ifdef</cpp:directive> <name pos:start="613:8" pos:end="613:24">TARGET_NR_getpgrp</name></cpp:ifdef>
    <case pos:start="614:5" pos:end="614:27">case <expr pos:start="614:10" pos:end="614:26"><name pos:start="614:10" pos:end="614:26">TARGET_NR_getpgrp</name></expr>:</case>
        <expr_stmt pos:start="615:9" pos:end="617:0"><expr pos:start="615:9" pos:end="615:34"><name pos:start="615:9" pos:end="615:11">ret</name> <operator pos:start="615:13" pos:end="615:13">=</operator> <call pos:start="615:15" pos:end="615:34"><name pos:start="615:15" pos:end="615:23">get_errno</name><argument_list pos:start="615:24" pos:end="615:34">(<argument pos:start="615:25" pos:end="615:33"><expr pos:start="615:25" pos:end="615:33"><call pos:start="615:25" pos:end="615:33"><name pos:start="615:25" pos:end="615:31">getpgrp</name><argument_list pos:start="615:32" pos:end="615:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="616:1" pos:end="616:6">#<cpp:directive pos:start="616:2" pos:end="616:6">endif</cpp:directive></cpp:endif>
    <case pos:start="617:5" pos:end="617:26">case <expr pos:start="617:10" pos:end="617:25"><name pos:start="617:10" pos:end="617:25">TARGET_NR_setsid</name></expr>:</case>
        <expr_stmt pos:start="618:9" pos:end="620:0"><expr pos:start="618:9" pos:end="618:33"><name pos:start="618:9" pos:end="618:11">ret</name> <operator pos:start="618:13" pos:end="618:13">=</operator> <call pos:start="618:15" pos:end="618:33"><name pos:start="618:15" pos:end="618:23">get_errno</name><argument_list pos:start="618:24" pos:end="618:33">(<argument pos:start="618:25" pos:end="618:32"><expr pos:start="618:25" pos:end="618:32"><call pos:start="618:25" pos:end="618:32"><name pos:start="618:25" pos:end="618:30">setsid</name><argument_list pos:start="618:31" pos:end="618:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="619:1" pos:end="619:26">#<cpp:directive pos:start="619:2" pos:end="619:6">ifdef</cpp:directive> <name pos:start="619:8" pos:end="619:26">TARGET_NR_sigaction</name></cpp:ifdef>
    <case pos:start="620:5" pos:end="620:29">case <expr pos:start="620:10" pos:end="620:28"><name pos:start="620:10" pos:end="620:28">TARGET_NR_sigaction</name></expr>:</case>
        <block pos:start="621:9" pos:end="3541:14">{<block_content pos:start="623:13" pos:end="3541:14">
<cpp:if pos:start="622:1" pos:end="622:25">#<cpp:directive pos:start="622:2" pos:end="622:3">if</cpp:directive> <expr pos:start="622:5" pos:end="622:25"><call pos:start="622:5" pos:end="622:25"><name pos:start="622:5" pos:end="622:11">defined</name><argument_list pos:start="622:12" pos:end="622:25">(<argument pos:start="622:13" pos:end="622:24"><expr pos:start="622:13" pos:end="622:24"><name pos:start="622:13" pos:end="622:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <decl_stmt pos:start="623:13" pos:end="623:57"><decl pos:start="623:13" pos:end="623:39"><type pos:start="623:13" pos:end="623:35"><name pos:start="623:13" pos:end="623:35"><name pos:start="623:13" pos:end="623:18">struct</name> <name pos:start="623:20" pos:end="623:35">target_sigaction</name></name></type> <name pos:start="623:37" pos:end="623:39">act</name></decl>, <decl pos:start="623:42" pos:end="623:45"><type ref="prev" pos:start="623:13" pos:end="623:35"/><name pos:start="623:42" pos:end="623:45">oact</name></decl>, <decl pos:start="623:48" pos:end="623:56"><type ref="prev" pos:start="623:13" pos:end="623:35"><modifier pos:start="623:48" pos:end="623:48">*</modifier></type><name pos:start="623:49" pos:end="623:52">pact</name> <init pos:start="623:54" pos:end="623:56">= <expr pos:start="623:56" pos:end="623:56"><literal type="number" pos:start="623:56" pos:end="623:56">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="624:13" pos:end="624:49"><decl pos:start="624:13" pos:end="624:48"><type pos:start="624:13" pos:end="624:41"><name pos:start="624:13" pos:end="624:39"><name pos:start="624:13" pos:end="624:18">struct</name> <name pos:start="624:20" pos:end="624:39">target_old_sigaction</name></name> <modifier pos:start="624:41" pos:end="624:41">*</modifier></type><name pos:start="624:42" pos:end="624:48">old_act</name></decl>;</decl_stmt>
            <if_stmt pos:start="625:13" pos:end="3541:14"><if pos:start="625:13" pos:end="3541:14">if <condition pos:start="625:16" pos:end="625:21">(<expr pos:start="625:17" pos:end="625:20"><name pos:start="625:17" pos:end="625:20">arg2</name></expr>)</condition> <block pos:start="625:23" pos:end="3541:14">{<block_content pos:start="626:17" pos:end="3541:14">
                <if_stmt pos:start="626:17" pos:end="627:32"><if pos:start="626:17" pos:end="627:32">if <condition pos:start="626:20" pos:end="626:69">(<expr pos:start="626:21" pos:end="626:68"><operator pos:start="626:21" pos:end="626:21">!</operator><call pos:start="626:22" pos:end="626:68"><name pos:start="626:22" pos:end="626:37">lock_user_struct</name><argument_list pos:start="626:38" pos:end="626:68">(<argument pos:start="626:39" pos:end="626:49"><expr pos:start="626:39" pos:end="626:49"><name pos:start="626:39" pos:end="626:49">VERIFY_READ</name></expr></argument>, <argument pos:start="626:52" pos:end="626:58"><expr pos:start="626:52" pos:end="626:58"><name pos:start="626:52" pos:end="626:58">old_act</name></expr></argument>, <argument pos:start="626:61" pos:end="626:64"><expr pos:start="626:61" pos:end="626:64"><name pos:start="626:61" pos:end="626:64">arg2</name></expr></argument>, <argument pos:start="626:67" pos:end="626:67"><expr pos:start="626:67" pos:end="626:67"><literal type="number" pos:start="626:67" pos:end="626:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="627:21" pos:end="627:32"><block_content pos:start="627:21" pos:end="627:32">
                    <goto pos:start="627:21" pos:end="627:32">goto <name pos:start="627:26" pos:end="627:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="628:17" pos:end="628:55"><expr pos:start="628:17" pos:end="628:54"><name pos:start="628:17" pos:end="628:31"><name pos:start="628:17" pos:end="628:19">act</name><operator pos:start="628:20" pos:end="628:20">.</operator><name pos:start="628:21" pos:end="628:31">_sa_handler</name></name> <operator pos:start="628:33" pos:end="628:33">=</operator> <name pos:start="628:35" pos:end="628:54"><name pos:start="628:35" pos:end="628:41">old_act</name><operator pos:start="628:42" pos:end="628:43">-&gt;</operator><name pos:start="628:44" pos:end="628:54">_sa_handler</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="629:17" pos:end="629:66"><expr pos:start="629:17" pos:end="629:65"><call pos:start="629:17" pos:end="629:65"><name pos:start="629:17" pos:end="629:33">target_siginitset</name><argument_list pos:start="629:34" pos:end="629:65">(<argument pos:start="629:35" pos:end="629:46"><expr pos:start="629:35" pos:end="629:46"><operator pos:start="629:35" pos:end="629:35">&amp;</operator><name pos:start="629:36" pos:end="629:46"><name pos:start="629:36" pos:end="629:38">act</name><operator pos:start="629:39" pos:end="629:39">.</operator><name pos:start="629:40" pos:end="629:46">sa_mask</name></name></expr></argument>, <argument pos:start="629:49" pos:end="629:64"><expr pos:start="629:49" pos:end="629:64"><name pos:start="629:49" pos:end="629:64"><name pos:start="629:49" pos:end="629:55">old_act</name><operator pos:start="629:56" pos:end="629:57">-&gt;</operator><name pos:start="629:58" pos:end="629:64">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="630:17" pos:end="630:49"><expr pos:start="630:17" pos:end="630:48"><name pos:start="630:17" pos:end="630:28"><name pos:start="630:17" pos:end="630:19">act</name><operator pos:start="630:20" pos:end="630:20">.</operator><name pos:start="630:21" pos:end="630:28">sa_flags</name></name> <operator pos:start="630:30" pos:end="630:30">=</operator> <name pos:start="630:32" pos:end="630:48"><name pos:start="630:32" pos:end="630:38">old_act</name><operator pos:start="630:39" pos:end="630:40">-&gt;</operator><name pos:start="630:41" pos:end="630:48">sa_flags</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="631:17" pos:end="631:36"><expr pos:start="631:17" pos:end="631:35"><name pos:start="631:17" pos:end="631:31"><name pos:start="631:17" pos:end="631:19">act</name><operator pos:start="631:20" pos:end="631:20">.</operator><name pos:start="631:21" pos:end="631:31">sa_restorer</name></name> <operator pos:start="631:33" pos:end="631:33">=</operator> <literal type="number" pos:start="631:35" pos:end="631:35">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="632:17" pos:end="632:53"><expr pos:start="632:17" pos:end="632:52"><call pos:start="632:17" pos:end="632:52"><name pos:start="632:17" pos:end="632:34">unlock_user_struct</name><argument_list pos:start="632:35" pos:end="632:52">(<argument pos:start="632:36" pos:end="632:42"><expr pos:start="632:36" pos:end="632:42"><name pos:start="632:36" pos:end="632:42">old_act</name></expr></argument>, <argument pos:start="632:45" pos:end="632:48"><expr pos:start="632:45" pos:end="632:48"><name pos:start="632:45" pos:end="632:48">arg2</name></expr></argument>, <argument pos:start="632:51" pos:end="632:51"><expr pos:start="632:51" pos:end="632:51"><literal type="number" pos:start="632:51" pos:end="632:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="633:17" pos:end="633:28"><expr pos:start="633:17" pos:end="633:27"><name pos:start="633:17" pos:end="633:20">pact</name> <operator pos:start="633:22" pos:end="633:22">=</operator> <operator pos:start="633:24" pos:end="633:24">&amp;</operator><name pos:start="633:25" pos:end="633:27">act</name></expr>;</expr_stmt>
            <expr_stmt pos:start="634:13" pos:end="634:61"><expr pos:start="634:13" pos:end="634:60"><name pos:start="634:13" pos:end="634:15">ret</name> <operator pos:start="634:17" pos:end="634:17">=</operator> <call pos:start="634:19" pos:end="634:60"><name pos:start="634:19" pos:end="634:27">get_errno</name><argument_list pos:start="634:28" pos:end="634:60">(<argument pos:start="634:29" pos:end="634:59"><expr pos:start="634:29" pos:end="634:59"><call pos:start="634:29" pos:end="634:59"><name pos:start="634:29" pos:end="634:40">do_sigaction</name><argument_list pos:start="634:41" pos:end="634:59">(<argument pos:start="634:42" pos:end="634:45"><expr pos:start="634:42" pos:end="634:45"><name pos:start="634:42" pos:end="634:45">arg1</name></expr></argument>, <argument pos:start="634:48" pos:end="634:51"><expr pos:start="634:48" pos:end="634:51"><name pos:start="634:48" pos:end="634:51">pact</name></expr></argument>, <argument pos:start="634:54" pos:end="634:58"><expr pos:start="634:54" pos:end="634:58"><operator pos:start="634:54" pos:end="634:54">&amp;</operator><name pos:start="634:55" pos:end="634:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="635:13" pos:end="3541:14"><if pos:start="635:13" pos:end="3541:14">if <condition pos:start="635:16" pos:end="635:39">(<expr pos:start="635:17" pos:end="635:38"><operator pos:start="635:17" pos:end="635:17">!</operator><call pos:start="635:18" pos:end="635:30"><name pos:start="635:18" pos:end="635:25">is_error</name><argument_list pos:start="635:26" pos:end="635:30">(<argument pos:start="635:27" pos:end="635:29"><expr pos:start="635:27" pos:end="635:29"><name pos:start="635:27" pos:end="635:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="635:32" pos:end="635:33">&amp;&amp;</operator> <name pos:start="635:35" pos:end="635:38">arg3</name></expr>)</condition> <block pos:start="635:41" pos:end="3541:14">{<block_content pos:start="636:17" pos:end="3541:14">
                <if_stmt pos:start="636:17" pos:end="637:32"><if pos:start="636:17" pos:end="637:32">if <condition pos:start="636:20" pos:end="636:70">(<expr pos:start="636:21" pos:end="636:69"><operator pos:start="636:21" pos:end="636:21">!</operator><call pos:start="636:22" pos:end="636:69"><name pos:start="636:22" pos:end="636:37">lock_user_struct</name><argument_list pos:start="636:38" pos:end="636:69">(<argument pos:start="636:39" pos:end="636:50"><expr pos:start="636:39" pos:end="636:50"><name pos:start="636:39" pos:end="636:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="636:53" pos:end="636:59"><expr pos:start="636:53" pos:end="636:59"><name pos:start="636:53" pos:end="636:59">old_act</name></expr></argument>, <argument pos:start="636:62" pos:end="636:65"><expr pos:start="636:62" pos:end="636:65"><name pos:start="636:62" pos:end="636:65">arg3</name></expr></argument>, <argument pos:start="636:68" pos:end="636:68"><expr pos:start="636:68" pos:end="636:68"><literal type="number" pos:start="636:68" pos:end="636:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="637:21" pos:end="637:32"><block_content pos:start="637:21" pos:end="637:32">
                    <goto pos:start="637:21" pos:end="637:32">goto <name pos:start="637:26" pos:end="637:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="638:17" pos:end="638:56"><expr pos:start="638:17" pos:end="638:55"><name pos:start="638:17" pos:end="638:36"><name pos:start="638:17" pos:end="638:23">old_act</name><operator pos:start="638:24" pos:end="638:25">-&gt;</operator><name pos:start="638:26" pos:end="638:36">_sa_handler</name></name> <operator pos:start="638:38" pos:end="638:38">=</operator> <name pos:start="638:40" pos:end="638:55"><name pos:start="638:40" pos:end="638:43">oact</name><operator pos:start="638:44" pos:end="638:44">.</operator><name pos:start="638:45" pos:end="638:55">_sa_handler</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="639:17" pos:end="639:55"><expr pos:start="639:17" pos:end="639:54"><name pos:start="639:17" pos:end="639:32"><name pos:start="639:17" pos:end="639:23">old_act</name><operator pos:start="639:24" pos:end="639:25">-&gt;</operator><name pos:start="639:26" pos:end="639:32">sa_mask</name></name> <operator pos:start="639:34" pos:end="639:34">=</operator> <name pos:start="639:36" pos:end="639:54"><name pos:start="639:36" pos:end="639:39">oact</name><operator pos:start="639:40" pos:end="639:40">.</operator><name pos:start="639:41" pos:end="639:47">sa_mask</name><operator pos:start="639:48" pos:end="639:48">.</operator><name pos:start="639:49" pos:end="639:51">sig</name><index pos:start="639:52" pos:end="639:54">[<expr pos:start="639:53" pos:end="639:53"><literal type="number" pos:start="639:53" pos:end="639:53">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt pos:start="640:17" pos:end="640:50"><expr pos:start="640:17" pos:end="640:49"><name pos:start="640:17" pos:end="640:33"><name pos:start="640:17" pos:end="640:23">old_act</name><operator pos:start="640:24" pos:end="640:25">-&gt;</operator><name pos:start="640:26" pos:end="640:33">sa_flags</name></name> <operator pos:start="640:35" pos:end="640:35">=</operator> <name pos:start="640:37" pos:end="640:49"><name pos:start="640:37" pos:end="640:40">oact</name><operator pos:start="640:41" pos:end="640:41">.</operator><name pos:start="640:42" pos:end="640:49">sa_flags</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="641:17" pos:end="643:0"><expr pos:start="641:17" pos:end="641:52"><call pos:start="641:17" pos:end="641:52"><name pos:start="641:17" pos:end="641:34">unlock_user_struct</name><argument_list pos:start="641:35" pos:end="641:52">(<argument pos:start="641:36" pos:end="641:42"><expr pos:start="641:36" pos:end="641:42"><name pos:start="641:36" pos:end="641:42">old_act</name></expr></argument>, <argument pos:start="641:45" pos:end="641:48"><expr pos:start="641:45" pos:end="641:48"><name pos:start="641:45" pos:end="641:48">arg3</name></expr></argument>, <argument pos:start="641:51" pos:end="641:51"><expr pos:start="641:51" pos:end="641:51"><literal type="number" pos:start="641:51" pos:end="641:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif pos:start="642:1" pos:end="642:26">#<cpp:directive pos:start="642:2" pos:end="642:5">elif</cpp:directive> <expr pos:start="642:7" pos:end="642:26"><call pos:start="642:7" pos:end="642:26"><name pos:start="642:7" pos:end="642:13">defined</name><argument_list pos:start="642:14" pos:end="642:26">(<argument pos:start="642:15" pos:end="642:25"><expr pos:start="642:15" pos:end="642:25"><name pos:start="642:15" pos:end="642:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	    <decl_stmt pos:start="643:13" pos:end="643:63"><decl pos:start="643:13" pos:end="643:39"><type pos:start="643:13" pos:end="643:35"><name pos:start="643:13" pos:end="643:35"><name pos:start="643:13" pos:end="643:18">struct</name> <name pos:start="643:20" pos:end="643:35">target_sigaction</name></name></type> <name pos:start="643:37" pos:end="643:39">act</name></decl>, <decl pos:start="643:42" pos:end="643:45"><type ref="prev" pos:start="643:13" pos:end="643:35"/><name pos:start="643:42" pos:end="643:45">oact</name></decl>, <decl pos:start="643:48" pos:end="643:52"><type ref="prev" pos:start="643:13" pos:end="643:35"><modifier pos:start="643:48" pos:end="643:48">*</modifier></type><name pos:start="643:49" pos:end="643:52">pact</name></decl>, <decl pos:start="643:55" pos:end="643:62"><type ref="prev" pos:start="643:13" pos:end="643:35"><modifier pos:start="643:55" pos:end="643:55">*</modifier></type><name pos:start="643:56" pos:end="643:62">old_act</name></decl>;</decl_stmt>
	    <if_stmt pos:start="644:13" pos:end="3541:14"><if pos:start="644:13" pos:end="652:13">if <condition pos:start="644:16" pos:end="644:21">(<expr pos:start="644:17" pos:end="644:20"><name pos:start="644:17" pos:end="644:20">arg2</name></expr>)</condition> <block pos:start="644:23" pos:end="652:13">{<block_content pos:start="645:17" pos:end="651:28">
                <if_stmt pos:start="645:17" pos:end="646:32"><if pos:start="645:17" pos:end="646:32">if <condition pos:start="645:20" pos:end="645:69">(<expr pos:start="645:21" pos:end="645:68"><operator pos:start="645:21" pos:end="645:21">!</operator><call pos:start="645:22" pos:end="645:68"><name pos:start="645:22" pos:end="645:37">lock_user_struct</name><argument_list pos:start="645:38" pos:end="645:68">(<argument pos:start="645:39" pos:end="645:49"><expr pos:start="645:39" pos:end="645:49"><name pos:start="645:39" pos:end="645:49">VERIFY_READ</name></expr></argument>, <argument pos:start="645:52" pos:end="645:58"><expr pos:start="645:52" pos:end="645:58"><name pos:start="645:52" pos:end="645:58">old_act</name></expr></argument>, <argument pos:start="645:61" pos:end="645:64"><expr pos:start="645:61" pos:end="645:64"><name pos:start="645:61" pos:end="645:64">arg2</name></expr></argument>, <argument pos:start="645:67" pos:end="645:67"><expr pos:start="645:67" pos:end="645:67"><literal type="number" pos:start="645:67" pos:end="645:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="646:21" pos:end="646:32"><block_content pos:start="646:21" pos:end="646:32">
                    <goto pos:start="646:21" pos:end="646:32">goto <name pos:start="646:26" pos:end="646:31">efault</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt pos:start="647:17" pos:end="647:55"><expr pos:start="647:17" pos:end="647:54"><name pos:start="647:17" pos:end="647:31"><name pos:start="647:17" pos:end="647:19">act</name><operator pos:start="647:20" pos:end="647:20">.</operator><name pos:start="647:21" pos:end="647:31">_sa_handler</name></name> <operator pos:start="647:33" pos:end="647:33">=</operator> <name pos:start="647:35" pos:end="647:54"><name pos:start="647:35" pos:end="647:41">old_act</name><operator pos:start="647:42" pos:end="647:43">-&gt;</operator><name pos:start="647:44" pos:end="647:54">_sa_handler</name></name></expr>;</expr_stmt>
		<expr_stmt pos:start="648:17" pos:end="648:73"><expr pos:start="648:17" pos:end="648:72"><call pos:start="648:17" pos:end="648:72"><name pos:start="648:17" pos:end="648:33">target_siginitset</name><argument_list pos:start="648:34" pos:end="648:72">(<argument pos:start="648:35" pos:end="648:46"><expr pos:start="648:35" pos:end="648:46"><operator pos:start="648:35" pos:end="648:35">&amp;</operator><name pos:start="648:36" pos:end="648:46"><name pos:start="648:36" pos:end="648:38">act</name><operator pos:start="648:39" pos:end="648:39">.</operator><name pos:start="648:40" pos:end="648:46">sa_mask</name></name></expr></argument>, <argument pos:start="648:49" pos:end="648:71"><expr pos:start="648:49" pos:end="648:71"><name pos:start="648:49" pos:end="648:71"><name pos:start="648:49" pos:end="648:55">old_act</name><operator pos:start="648:56" pos:end="648:57">-&gt;</operator><name pos:start="648:58" pos:end="648:64">sa_mask</name><operator pos:start="648:65" pos:end="648:65">.</operator><name pos:start="648:66" pos:end="648:68">sig</name><index pos:start="648:69" pos:end="648:71">[<expr pos:start="648:70" pos:end="648:70"><literal type="number" pos:start="648:70" pos:end="648:70">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="649:17" pos:end="649:49"><expr pos:start="649:17" pos:end="649:48"><name pos:start="649:17" pos:end="649:28"><name pos:start="649:17" pos:end="649:19">act</name><operator pos:start="649:20" pos:end="649:20">.</operator><name pos:start="649:21" pos:end="649:28">sa_flags</name></name> <operator pos:start="649:30" pos:end="649:30">=</operator> <name pos:start="649:32" pos:end="649:48"><name pos:start="649:32" pos:end="649:38">old_act</name><operator pos:start="649:39" pos:end="649:40">-&gt;</operator><name pos:start="649:41" pos:end="649:48">sa_flags</name></name></expr>;</expr_stmt>
		<expr_stmt pos:start="650:17" pos:end="650:53"><expr pos:start="650:17" pos:end="650:52"><call pos:start="650:17" pos:end="650:52"><name pos:start="650:17" pos:end="650:34">unlock_user_struct</name><argument_list pos:start="650:35" pos:end="650:52">(<argument pos:start="650:36" pos:end="650:42"><expr pos:start="650:36" pos:end="650:42"><name pos:start="650:36" pos:end="650:42">old_act</name></expr></argument>, <argument pos:start="650:45" pos:end="650:48"><expr pos:start="650:45" pos:end="650:48"><name pos:start="650:45" pos:end="650:48">arg2</name></expr></argument>, <argument pos:start="650:51" pos:end="650:51"><expr pos:start="650:51" pos:end="650:51"><literal type="number" pos:start="650:51" pos:end="650:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="651:17" pos:end="651:28"><expr pos:start="651:17" pos:end="651:27"><name pos:start="651:17" pos:end="651:20">pact</name> <operator pos:start="651:22" pos:end="651:22">=</operator> <operator pos:start="651:24" pos:end="651:24">&amp;</operator><name pos:start="651:25" pos:end="651:27">act</name></expr>;</expr_stmt>
	    </block_content>}</block></if> <else pos:start="652:15" pos:end="3541:14">else <block pos:start="652:20" pos:end="3541:14">{<block_content pos:start="653:17" pos:end="3541:14">
		<expr_stmt pos:start="653:17" pos:end="653:28"><expr pos:start="653:17" pos:end="653:27"><name pos:start="653:17" pos:end="653:20">pact</name> <operator pos:start="653:22" pos:end="653:22">=</operator> <name pos:start="653:24" pos:end="653:27">NULL</name></expr>;</expr_stmt>
	    <expr_stmt pos:start="654:13" pos:end="654:61"><expr pos:start="654:13" pos:end="654:60"><name pos:start="654:13" pos:end="654:15">ret</name> <operator pos:start="654:17" pos:end="654:17">=</operator> <call pos:start="654:19" pos:end="654:60"><name pos:start="654:19" pos:end="654:27">get_errno</name><argument_list pos:start="654:28" pos:end="654:60">(<argument pos:start="654:29" pos:end="654:59"><expr pos:start="654:29" pos:end="654:59"><call pos:start="654:29" pos:end="654:59"><name pos:start="654:29" pos:end="654:40">do_sigaction</name><argument_list pos:start="654:41" pos:end="654:59">(<argument pos:start="654:42" pos:end="654:45"><expr pos:start="654:42" pos:end="654:45"><name pos:start="654:42" pos:end="654:45">arg1</name></expr></argument>, <argument pos:start="654:48" pos:end="654:51"><expr pos:start="654:48" pos:end="654:51"><name pos:start="654:48" pos:end="654:51">pact</name></expr></argument>, <argument pos:start="654:54" pos:end="654:58"><expr pos:start="654:54" pos:end="654:58"><operator pos:start="654:54" pos:end="654:54">&amp;</operator><name pos:start="654:55" pos:end="654:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="655:13" pos:end="3541:14"><if pos:start="655:13" pos:end="3541:14">if <condition pos:start="655:16" pos:end="655:39">(<expr pos:start="655:17" pos:end="655:38"><operator pos:start="655:17" pos:end="655:17">!</operator><call pos:start="655:18" pos:end="655:30"><name pos:start="655:18" pos:end="655:25">is_error</name><argument_list pos:start="655:26" pos:end="655:30">(<argument pos:start="655:27" pos:end="655:29"><expr pos:start="655:27" pos:end="655:29"><name pos:start="655:27" pos:end="655:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="655:32" pos:end="655:33">&amp;&amp;</operator> <name pos:start="655:35" pos:end="655:38">arg3</name></expr>)</condition> <block pos:start="655:41" pos:end="3541:14">{<block_content pos:start="656:17" pos:end="3541:14">
                <if_stmt pos:start="656:17" pos:end="657:32"><if pos:start="656:17" pos:end="657:32">if <condition pos:start="656:20" pos:end="656:70">(<expr pos:start="656:21" pos:end="656:69"><operator pos:start="656:21" pos:end="656:21">!</operator><call pos:start="656:22" pos:end="656:69"><name pos:start="656:22" pos:end="656:37">lock_user_struct</name><argument_list pos:start="656:38" pos:end="656:69">(<argument pos:start="656:39" pos:end="656:50"><expr pos:start="656:39" pos:end="656:50"><name pos:start="656:39" pos:end="656:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="656:53" pos:end="656:59"><expr pos:start="656:53" pos:end="656:59"><name pos:start="656:53" pos:end="656:59">old_act</name></expr></argument>, <argument pos:start="656:62" pos:end="656:65"><expr pos:start="656:62" pos:end="656:65"><name pos:start="656:62" pos:end="656:65">arg3</name></expr></argument>, <argument pos:start="656:68" pos:end="656:68"><expr pos:start="656:68" pos:end="656:68"><literal type="number" pos:start="656:68" pos:end="656:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="657:21" pos:end="657:32"><block_content pos:start="657:21" pos:end="657:32">
                    <goto pos:start="657:21" pos:end="657:32">goto <name pos:start="657:26" pos:end="657:31">efault</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt pos:start="658:17" pos:end="658:56"><expr pos:start="658:17" pos:end="658:55"><name pos:start="658:17" pos:end="658:36"><name pos:start="658:17" pos:end="658:23">old_act</name><operator pos:start="658:24" pos:end="658:25">-&gt;</operator><name pos:start="658:26" pos:end="658:36">_sa_handler</name></name> <operator pos:start="658:38" pos:end="658:38">=</operator> <name pos:start="658:40" pos:end="658:55"><name pos:start="658:40" pos:end="658:43">oact</name><operator pos:start="658:44" pos:end="658:44">.</operator><name pos:start="658:45" pos:end="658:55">_sa_handler</name></name></expr>;</expr_stmt>
		<expr_stmt pos:start="659:17" pos:end="659:50"><expr pos:start="659:17" pos:end="659:49"><name pos:start="659:17" pos:end="659:33"><name pos:start="659:17" pos:end="659:23">old_act</name><operator pos:start="659:24" pos:end="659:25">-&gt;</operator><name pos:start="659:26" pos:end="659:33">sa_flags</name></name> <operator pos:start="659:35" pos:end="659:35">=</operator> <name pos:start="659:37" pos:end="659:49"><name pos:start="659:37" pos:end="659:40">oact</name><operator pos:start="659:41" pos:end="659:41">.</operator><name pos:start="659:42" pos:end="659:49">sa_flags</name></name></expr>;</expr_stmt>
		<expr_stmt pos:start="660:17" pos:end="660:62"><expr pos:start="660:17" pos:end="660:61"><name pos:start="660:17" pos:end="660:39"><name pos:start="660:17" pos:end="660:23">old_act</name><operator pos:start="660:24" pos:end="660:25">-&gt;</operator><name pos:start="660:26" pos:end="660:32">sa_mask</name><operator pos:start="660:33" pos:end="660:33">.</operator><name pos:start="660:34" pos:end="660:36">sig</name><index pos:start="660:37" pos:end="660:39">[<expr pos:start="660:38" pos:end="660:38"><literal type="number" pos:start="660:38" pos:end="660:38">0</literal></expr>]</index></name> <operator pos:start="660:41" pos:end="660:41">=</operator> <name pos:start="660:43" pos:end="660:61"><name pos:start="660:43" pos:end="660:46">oact</name><operator pos:start="660:47" pos:end="660:47">.</operator><name pos:start="660:48" pos:end="660:54">sa_mask</name><operator pos:start="660:55" pos:end="660:55">.</operator><name pos:start="660:56" pos:end="660:58">sig</name><index pos:start="660:59" pos:end="660:61">[<expr pos:start="660:60" pos:end="660:60"><literal type="number" pos:start="660:60" pos:end="660:60">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt pos:start="661:17" pos:end="661:44"><expr pos:start="661:17" pos:end="661:43"><name pos:start="661:17" pos:end="661:39"><name pos:start="661:17" pos:end="661:23">old_act</name><operator pos:start="661:24" pos:end="661:25">-&gt;</operator><name pos:start="661:26" pos:end="661:32">sa_mask</name><operator pos:start="661:33" pos:end="661:33">.</operator><name pos:start="661:34" pos:end="661:36">sig</name><index pos:start="661:37" pos:end="661:39">[<expr pos:start="661:38" pos:end="661:38"><literal type="number" pos:start="661:38" pos:end="661:38">1</literal></expr>]</index></name> <operator pos:start="661:41" pos:end="661:41">=</operator> <literal type="number" pos:start="661:43" pos:end="661:43">0</literal></expr>;</expr_stmt>
		<expr_stmt pos:start="662:17" pos:end="662:44"><expr pos:start="662:17" pos:end="662:43"><name pos:start="662:17" pos:end="662:39"><name pos:start="662:17" pos:end="662:23">old_act</name><operator pos:start="662:24" pos:end="662:25">-&gt;</operator><name pos:start="662:26" pos:end="662:32">sa_mask</name><operator pos:start="662:33" pos:end="662:33">.</operator><name pos:start="662:34" pos:end="662:36">sig</name><index pos:start="662:37" pos:end="662:39">[<expr pos:start="662:38" pos:end="662:38"><literal type="number" pos:start="662:38" pos:end="662:38">2</literal></expr>]</index></name> <operator pos:start="662:41" pos:end="662:41">=</operator> <literal type="number" pos:start="662:43" pos:end="662:43">0</literal></expr>;</expr_stmt>
		<expr_stmt pos:start="663:17" pos:end="663:44"><expr pos:start="663:17" pos:end="663:43"><name pos:start="663:17" pos:end="663:39"><name pos:start="663:17" pos:end="663:23">old_act</name><operator pos:start="663:24" pos:end="663:25">-&gt;</operator><name pos:start="663:26" pos:end="663:32">sa_mask</name><operator pos:start="663:33" pos:end="663:33">.</operator><name pos:start="663:34" pos:end="663:36">sig</name><index pos:start="663:37" pos:end="663:39">[<expr pos:start="663:38" pos:end="663:38"><literal type="number" pos:start="663:38" pos:end="663:38">3</literal></expr>]</index></name> <operator pos:start="663:41" pos:end="663:41">=</operator> <literal type="number" pos:start="663:43" pos:end="663:43">0</literal></expr>;</expr_stmt>
		<expr_stmt pos:start="664:17" pos:end="666:0"><expr pos:start="664:17" pos:end="664:52"><call pos:start="664:17" pos:end="664:52"><name pos:start="664:17" pos:end="664:34">unlock_user_struct</name><argument_list pos:start="664:35" pos:end="664:52">(<argument pos:start="664:36" pos:end="664:42"><expr pos:start="664:36" pos:end="664:42"><name pos:start="664:36" pos:end="664:42">old_act</name></expr></argument>, <argument pos:start="664:45" pos:end="664:48"><expr pos:start="664:45" pos:end="664:48"><name pos:start="664:45" pos:end="664:48">arg3</name></expr></argument>, <argument pos:start="664:51" pos:end="664:51"><expr pos:start="664:51" pos:end="664:51"><literal type="number" pos:start="664:51" pos:end="664:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="665:1" pos:end="665:5">#<cpp:directive pos:start="665:2" pos:end="665:5">else</cpp:directive></cpp:else>
            <decl_stmt pos:start="666:13" pos:end="666:49"><decl pos:start="666:13" pos:end="666:48"><type pos:start="666:13" pos:end="666:41"><name pos:start="666:13" pos:end="666:39"><name pos:start="666:13" pos:end="666:18">struct</name> <name pos:start="666:20" pos:end="666:39">target_old_sigaction</name></name> <modifier pos:start="666:41" pos:end="666:41">*</modifier></type><name pos:start="666:42" pos:end="666:48">old_act</name></decl>;</decl_stmt>
            <decl_stmt pos:start="667:13" pos:end="667:53"><decl pos:start="667:13" pos:end="667:39"><type pos:start="667:13" pos:end="667:35"><name pos:start="667:13" pos:end="667:35"><name pos:start="667:13" pos:end="667:18">struct</name> <name pos:start="667:20" pos:end="667:35">target_sigaction</name></name></type> <name pos:start="667:37" pos:end="667:39">act</name></decl>, <decl pos:start="667:42" pos:end="667:45"><type ref="prev" pos:start="667:13" pos:end="667:35"/><name pos:start="667:42" pos:end="667:45">oact</name></decl>, <decl pos:start="667:48" pos:end="667:52"><type ref="prev" pos:start="667:13" pos:end="667:35"><modifier pos:start="667:48" pos:end="667:48">*</modifier></type><name pos:start="667:49" pos:end="667:52">pact</name></decl>;</decl_stmt>
            <if_stmt pos:start="668:13" pos:end="3541:14"><if pos:start="668:13" pos:end="677:13">if <condition pos:start="668:16" pos:end="668:21">(<expr pos:start="668:17" pos:end="668:20"><name pos:start="668:17" pos:end="668:20">arg2</name></expr>)</condition> <block pos:start="668:23" pos:end="677:13">{<block_content pos:start="669:17" pos:end="676:28">
                <if_stmt pos:start="669:17" pos:end="670:32"><if pos:start="669:17" pos:end="670:32">if <condition pos:start="669:20" pos:end="669:69">(<expr pos:start="669:21" pos:end="669:68"><operator pos:start="669:21" pos:end="669:21">!</operator><call pos:start="669:22" pos:end="669:68"><name pos:start="669:22" pos:end="669:37">lock_user_struct</name><argument_list pos:start="669:38" pos:end="669:68">(<argument pos:start="669:39" pos:end="669:49"><expr pos:start="669:39" pos:end="669:49"><name pos:start="669:39" pos:end="669:49">VERIFY_READ</name></expr></argument>, <argument pos:start="669:52" pos:end="669:58"><expr pos:start="669:52" pos:end="669:58"><name pos:start="669:52" pos:end="669:58">old_act</name></expr></argument>, <argument pos:start="669:61" pos:end="669:64"><expr pos:start="669:61" pos:end="669:64"><name pos:start="669:61" pos:end="669:64">arg2</name></expr></argument>, <argument pos:start="669:67" pos:end="669:67"><expr pos:start="669:67" pos:end="669:67"><literal type="number" pos:start="669:67" pos:end="669:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="670:21" pos:end="670:32"><block_content pos:start="670:21" pos:end="670:32">
                    <goto pos:start="670:21" pos:end="670:32">goto <name pos:start="670:26" pos:end="670:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="671:17" pos:end="671:55"><expr pos:start="671:17" pos:end="671:54"><name pos:start="671:17" pos:end="671:31"><name pos:start="671:17" pos:end="671:19">act</name><operator pos:start="671:20" pos:end="671:20">.</operator><name pos:start="671:21" pos:end="671:31">_sa_handler</name></name> <operator pos:start="671:33" pos:end="671:33">=</operator> <name pos:start="671:35" pos:end="671:54"><name pos:start="671:35" pos:end="671:41">old_act</name><operator pos:start="671:42" pos:end="671:43">-&gt;</operator><name pos:start="671:44" pos:end="671:54">_sa_handler</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="672:17" pos:end="672:66"><expr pos:start="672:17" pos:end="672:65"><call pos:start="672:17" pos:end="672:65"><name pos:start="672:17" pos:end="672:33">target_siginitset</name><argument_list pos:start="672:34" pos:end="672:65">(<argument pos:start="672:35" pos:end="672:46"><expr pos:start="672:35" pos:end="672:46"><operator pos:start="672:35" pos:end="672:35">&amp;</operator><name pos:start="672:36" pos:end="672:46"><name pos:start="672:36" pos:end="672:38">act</name><operator pos:start="672:39" pos:end="672:39">.</operator><name pos:start="672:40" pos:end="672:46">sa_mask</name></name></expr></argument>, <argument pos:start="672:49" pos:end="672:64"><expr pos:start="672:49" pos:end="672:64"><name pos:start="672:49" pos:end="672:64"><name pos:start="672:49" pos:end="672:55">old_act</name><operator pos:start="672:56" pos:end="672:57">-&gt;</operator><name pos:start="672:58" pos:end="672:64">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="673:17" pos:end="673:49"><expr pos:start="673:17" pos:end="673:48"><name pos:start="673:17" pos:end="673:28"><name pos:start="673:17" pos:end="673:19">act</name><operator pos:start="673:20" pos:end="673:20">.</operator><name pos:start="673:21" pos:end="673:28">sa_flags</name></name> <operator pos:start="673:30" pos:end="673:30">=</operator> <name pos:start="673:32" pos:end="673:48"><name pos:start="673:32" pos:end="673:38">old_act</name><operator pos:start="673:39" pos:end="673:40">-&gt;</operator><name pos:start="673:41" pos:end="673:48">sa_flags</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="674:17" pos:end="674:55"><expr pos:start="674:17" pos:end="674:54"><name pos:start="674:17" pos:end="674:31"><name pos:start="674:17" pos:end="674:19">act</name><operator pos:start="674:20" pos:end="674:20">.</operator><name pos:start="674:21" pos:end="674:31">sa_restorer</name></name> <operator pos:start="674:33" pos:end="674:33">=</operator> <name pos:start="674:35" pos:end="674:54"><name pos:start="674:35" pos:end="674:41">old_act</name><operator pos:start="674:42" pos:end="674:43">-&gt;</operator><name pos:start="674:44" pos:end="674:54">sa_restorer</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="675:17" pos:end="675:53"><expr pos:start="675:17" pos:end="675:52"><call pos:start="675:17" pos:end="675:52"><name pos:start="675:17" pos:end="675:34">unlock_user_struct</name><argument_list pos:start="675:35" pos:end="675:52">(<argument pos:start="675:36" pos:end="675:42"><expr pos:start="675:36" pos:end="675:42"><name pos:start="675:36" pos:end="675:42">old_act</name></expr></argument>, <argument pos:start="675:45" pos:end="675:48"><expr pos:start="675:45" pos:end="675:48"><name pos:start="675:45" pos:end="675:48">arg2</name></expr></argument>, <argument pos:start="675:51" pos:end="675:51"><expr pos:start="675:51" pos:end="675:51"><literal type="number" pos:start="675:51" pos:end="675:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="676:17" pos:end="676:28"><expr pos:start="676:17" pos:end="676:27"><name pos:start="676:17" pos:end="676:20">pact</name> <operator pos:start="676:22" pos:end="676:22">=</operator> <operator pos:start="676:24" pos:end="676:24">&amp;</operator><name pos:start="676:25" pos:end="676:27">act</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="677:15" pos:end="3541:14">else <block pos:start="677:20" pos:end="3541:14">{<block_content pos:start="678:17" pos:end="3541:14">
                <expr_stmt pos:start="678:17" pos:end="678:28"><expr pos:start="678:17" pos:end="678:27"><name pos:start="678:17" pos:end="678:20">pact</name> <operator pos:start="678:22" pos:end="678:22">=</operator> <name pos:start="678:24" pos:end="678:27">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="679:13" pos:end="679:61"><expr pos:start="679:13" pos:end="679:60"><name pos:start="679:13" pos:end="679:15">ret</name> <operator pos:start="679:17" pos:end="679:17">=</operator> <call pos:start="679:19" pos:end="679:60"><name pos:start="679:19" pos:end="679:27">get_errno</name><argument_list pos:start="679:28" pos:end="679:60">(<argument pos:start="679:29" pos:end="679:59"><expr pos:start="679:29" pos:end="679:59"><call pos:start="679:29" pos:end="679:59"><name pos:start="679:29" pos:end="679:40">do_sigaction</name><argument_list pos:start="679:41" pos:end="679:59">(<argument pos:start="679:42" pos:end="679:45"><expr pos:start="679:42" pos:end="679:45"><name pos:start="679:42" pos:end="679:45">arg1</name></expr></argument>, <argument pos:start="679:48" pos:end="679:51"><expr pos:start="679:48" pos:end="679:51"><name pos:start="679:48" pos:end="679:51">pact</name></expr></argument>, <argument pos:start="679:54" pos:end="679:58"><expr pos:start="679:54" pos:end="679:58"><operator pos:start="679:54" pos:end="679:54">&amp;</operator><name pos:start="679:55" pos:end="679:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="680:13" pos:end="3541:14"><if pos:start="680:13" pos:end="3541:14">if <condition pos:start="680:16" pos:end="680:39">(<expr pos:start="680:17" pos:end="680:38"><operator pos:start="680:17" pos:end="680:17">!</operator><call pos:start="680:18" pos:end="680:30"><name pos:start="680:18" pos:end="680:25">is_error</name><argument_list pos:start="680:26" pos:end="680:30">(<argument pos:start="680:27" pos:end="680:29"><expr pos:start="680:27" pos:end="680:29"><name pos:start="680:27" pos:end="680:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="680:32" pos:end="680:33">&amp;&amp;</operator> <name pos:start="680:35" pos:end="680:38">arg3</name></expr>)</condition> <block pos:start="680:41" pos:end="3541:14">{<block_content pos:start="681:17" pos:end="3541:14">
                <if_stmt pos:start="681:17" pos:end="682:32"><if pos:start="681:17" pos:end="682:32">if <condition pos:start="681:20" pos:end="681:70">(<expr pos:start="681:21" pos:end="681:69"><operator pos:start="681:21" pos:end="681:21">!</operator><call pos:start="681:22" pos:end="681:69"><name pos:start="681:22" pos:end="681:37">lock_user_struct</name><argument_list pos:start="681:38" pos:end="681:69">(<argument pos:start="681:39" pos:end="681:50"><expr pos:start="681:39" pos:end="681:50"><name pos:start="681:39" pos:end="681:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="681:53" pos:end="681:59"><expr pos:start="681:53" pos:end="681:59"><name pos:start="681:53" pos:end="681:59">old_act</name></expr></argument>, <argument pos:start="681:62" pos:end="681:65"><expr pos:start="681:62" pos:end="681:65"><name pos:start="681:62" pos:end="681:65">arg3</name></expr></argument>, <argument pos:start="681:68" pos:end="681:68"><expr pos:start="681:68" pos:end="681:68"><literal type="number" pos:start="681:68" pos:end="681:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="682:21" pos:end="682:32"><block_content pos:start="682:21" pos:end="682:32">
                    <goto pos:start="682:21" pos:end="682:32">goto <name pos:start="682:26" pos:end="682:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="683:17" pos:end="683:56"><expr pos:start="683:17" pos:end="683:55"><name pos:start="683:17" pos:end="683:36"><name pos:start="683:17" pos:end="683:23">old_act</name><operator pos:start="683:24" pos:end="683:25">-&gt;</operator><name pos:start="683:26" pos:end="683:36">_sa_handler</name></name> <operator pos:start="683:38" pos:end="683:38">=</operator> <name pos:start="683:40" pos:end="683:55"><name pos:start="683:40" pos:end="683:43">oact</name><operator pos:start="683:44" pos:end="683:44">.</operator><name pos:start="683:45" pos:end="683:55">_sa_handler</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="684:17" pos:end="684:55"><expr pos:start="684:17" pos:end="684:54"><name pos:start="684:17" pos:end="684:32"><name pos:start="684:17" pos:end="684:23">old_act</name><operator pos:start="684:24" pos:end="684:25">-&gt;</operator><name pos:start="684:26" pos:end="684:32">sa_mask</name></name> <operator pos:start="684:34" pos:end="684:34">=</operator> <name pos:start="684:36" pos:end="684:54"><name pos:start="684:36" pos:end="684:39">oact</name><operator pos:start="684:40" pos:end="684:40">.</operator><name pos:start="684:41" pos:end="684:47">sa_mask</name><operator pos:start="684:48" pos:end="684:48">.</operator><name pos:start="684:49" pos:end="684:51">sig</name><index pos:start="684:52" pos:end="684:54">[<expr pos:start="684:53" pos:end="684:53"><literal type="number" pos:start="684:53" pos:end="684:53">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt pos:start="685:17" pos:end="685:50"><expr pos:start="685:17" pos:end="685:49"><name pos:start="685:17" pos:end="685:33"><name pos:start="685:17" pos:end="685:23">old_act</name><operator pos:start="685:24" pos:end="685:25">-&gt;</operator><name pos:start="685:26" pos:end="685:33">sa_flags</name></name> <operator pos:start="685:35" pos:end="685:35">=</operator> <name pos:start="685:37" pos:end="685:49"><name pos:start="685:37" pos:end="685:40">oact</name><operator pos:start="685:41" pos:end="685:41">.</operator><name pos:start="685:42" pos:end="685:49">sa_flags</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="686:17" pos:end="686:56"><expr pos:start="686:17" pos:end="686:55"><name pos:start="686:17" pos:end="686:36"><name pos:start="686:17" pos:end="686:23">old_act</name><operator pos:start="686:24" pos:end="686:25">-&gt;</operator><name pos:start="686:26" pos:end="686:36">sa_restorer</name></name> <operator pos:start="686:38" pos:end="686:38">=</operator> <name pos:start="686:40" pos:end="686:55"><name pos:start="686:40" pos:end="686:43">oact</name><operator pos:start="686:44" pos:end="686:44">.</operator><name pos:start="686:45" pos:end="686:55">sa_restorer</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="687:17" pos:end="690:0"><expr pos:start="687:17" pos:end="687:52"><call pos:start="687:17" pos:end="687:52"><name pos:start="687:17" pos:end="687:34">unlock_user_struct</name><argument_list pos:start="687:35" pos:end="687:52">(<argument pos:start="687:36" pos:end="687:42"><expr pos:start="687:36" pos:end="687:42"><name pos:start="687:36" pos:end="687:42">old_act</name></expr></argument>, <argument pos:start="687:45" pos:end="687:48"><expr pos:start="687:45" pos:end="687:48"><name pos:start="687:45" pos:end="687:48">arg3</name></expr></argument>, <argument pos:start="687:51" pos:end="687:51"><expr pos:start="687:51" pos:end="687:51"><literal type="number" pos:start="687:51" pos:end="687:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="688:1" pos:end="688:6">#<cpp:directive pos:start="688:2" pos:end="688:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="689:1" pos:end="689:6">#<cpp:directive pos:start="689:2" pos:end="689:6">endif</cpp:directive></cpp:endif>
    <case pos:start="690:5" pos:end="690:32">case <expr pos:start="690:10" pos:end="690:31"><name pos:start="690:10" pos:end="690:31">TARGET_NR_rt_sigaction</name></expr>:</case>
        <block pos:start="691:9" pos:end="3541:14">{<block_content pos:start="693:13" pos:end="3541:14">
<cpp:if pos:start="692:1" pos:end="692:25">#<cpp:directive pos:start="692:2" pos:end="692:3">if</cpp:directive> <expr pos:start="692:5" pos:end="692:25"><call pos:start="692:5" pos:end="692:25"><name pos:start="692:5" pos:end="692:11">defined</name><argument_list pos:start="692:12" pos:end="692:25">(<argument pos:start="692:13" pos:end="692:24"><expr pos:start="692:13" pos:end="692:24"><name pos:start="692:13" pos:end="692:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <decl_stmt pos:start="693:13" pos:end="693:57"><decl pos:start="693:13" pos:end="693:39"><type pos:start="693:13" pos:end="693:35"><name pos:start="693:13" pos:end="693:35"><name pos:start="693:13" pos:end="693:18">struct</name> <name pos:start="693:20" pos:end="693:35">target_sigaction</name></name></type> <name pos:start="693:37" pos:end="693:39">act</name></decl>, <decl pos:start="693:42" pos:end="693:45"><type ref="prev" pos:start="693:13" pos:end="693:35"/><name pos:start="693:42" pos:end="693:45">oact</name></decl>, <decl pos:start="693:48" pos:end="693:56"><type ref="prev" pos:start="693:13" pos:end="693:35"><modifier pos:start="693:48" pos:end="693:48">*</modifier></type><name pos:start="693:49" pos:end="693:52">pact</name> <init pos:start="693:54" pos:end="693:56">= <expr pos:start="693:56" pos:end="693:56"><literal type="number" pos:start="693:56" pos:end="693:56">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="694:13" pos:end="694:47"><decl pos:start="694:13" pos:end="694:46"><type pos:start="694:13" pos:end="694:40"><name pos:start="694:13" pos:end="694:38"><name pos:start="694:13" pos:end="694:18">struct</name> <name pos:start="694:20" pos:end="694:38">target_rt_sigaction</name></name> <modifier pos:start="694:40" pos:end="694:40">*</modifier></type><name pos:start="694:41" pos:end="694:46">rt_act</name></decl>;</decl_stmt>
            <if_stmt pos:start="695:13" pos:end="3541:14"><if pos:start="695:13" pos:end="3541:14">if <condition pos:start="695:16" pos:end="695:48">(<expr pos:start="695:17" pos:end="695:47"><name pos:start="695:17" pos:end="695:20">arg4</name> <operator pos:start="695:22" pos:end="695:23">!=</operator> <sizeof pos:start="695:25" pos:end="695:47">sizeof<argument_list pos:start="695:31" pos:end="695:47">(<argument pos:start="695:32" pos:end="695:46"><expr pos:start="695:32" pos:end="695:46"><name pos:start="695:32" pos:end="695:46">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="695:50" pos:end="3541:14">{<block_content pos:start="696:13" pos:end="3541:14">
            <if_stmt pos:start="696:13" pos:end="3541:14"><if pos:start="696:13" pos:end="3541:14">if <condition pos:start="696:16" pos:end="696:21">(<expr pos:start="696:17" pos:end="696:20"><name pos:start="696:17" pos:end="696:20">arg2</name></expr>)</condition> <block pos:start="696:23" pos:end="3541:14">{<block_content pos:start="697:17" pos:end="3541:14">
                <if_stmt pos:start="697:17" pos:end="698:32"><if pos:start="697:17" pos:end="698:32">if <condition pos:start="697:20" pos:end="697:68">(<expr pos:start="697:21" pos:end="697:67"><operator pos:start="697:21" pos:end="697:21">!</operator><call pos:start="697:22" pos:end="697:67"><name pos:start="697:22" pos:end="697:37">lock_user_struct</name><argument_list pos:start="697:38" pos:end="697:67">(<argument pos:start="697:39" pos:end="697:49"><expr pos:start="697:39" pos:end="697:49"><name pos:start="697:39" pos:end="697:49">VERIFY_READ</name></expr></argument>, <argument pos:start="697:52" pos:end="697:57"><expr pos:start="697:52" pos:end="697:57"><name pos:start="697:52" pos:end="697:57">rt_act</name></expr></argument>, <argument pos:start="697:60" pos:end="697:63"><expr pos:start="697:60" pos:end="697:63"><name pos:start="697:60" pos:end="697:63">arg2</name></expr></argument>, <argument pos:start="697:66" pos:end="697:66"><expr pos:start="697:66" pos:end="697:66"><literal type="number" pos:start="697:66" pos:end="697:66">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="698:21" pos:end="698:32"><block_content pos:start="698:21" pos:end="698:32">
                    <goto pos:start="698:21" pos:end="698:32">goto <name pos:start="698:26" pos:end="698:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="699:17" pos:end="699:54"><expr pos:start="699:17" pos:end="699:53"><name pos:start="699:17" pos:end="699:31"><name pos:start="699:17" pos:end="699:19">act</name><operator pos:start="699:20" pos:end="699:20">.</operator><name pos:start="699:21" pos:end="699:31">_sa_handler</name></name> <operator pos:start="699:33" pos:end="699:33">=</operator> <name pos:start="699:35" pos:end="699:53"><name pos:start="699:35" pos:end="699:40">rt_act</name><operator pos:start="699:41" pos:end="699:42">-&gt;</operator><name pos:start="699:43" pos:end="699:53">_sa_handler</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="700:17" pos:end="700:46"><expr pos:start="700:17" pos:end="700:45"><name pos:start="700:17" pos:end="700:27"><name pos:start="700:17" pos:end="700:19">act</name><operator pos:start="700:20" pos:end="700:20">.</operator><name pos:start="700:21" pos:end="700:27">sa_mask</name></name> <operator pos:start="700:29" pos:end="700:29">=</operator> <name pos:start="700:31" pos:end="700:45"><name pos:start="700:31" pos:end="700:36">rt_act</name><operator pos:start="700:37" pos:end="700:38">-&gt;</operator><name pos:start="700:39" pos:end="700:45">sa_mask</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="701:17" pos:end="701:48"><expr pos:start="701:17" pos:end="701:47"><name pos:start="701:17" pos:end="701:28"><name pos:start="701:17" pos:end="701:19">act</name><operator pos:start="701:20" pos:end="701:20">.</operator><name pos:start="701:21" pos:end="701:28">sa_flags</name></name> <operator pos:start="701:30" pos:end="701:30">=</operator> <name pos:start="701:32" pos:end="701:47"><name pos:start="701:32" pos:end="701:37">rt_act</name><operator pos:start="701:38" pos:end="701:39">-&gt;</operator><name pos:start="701:40" pos:end="701:47">sa_flags</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="702:17" pos:end="702:39"><expr pos:start="702:17" pos:end="702:38"><name pos:start="702:17" pos:end="702:31"><name pos:start="702:17" pos:end="702:19">act</name><operator pos:start="702:20" pos:end="702:20">.</operator><name pos:start="702:21" pos:end="702:31">sa_restorer</name></name> <operator pos:start="702:33" pos:end="702:33">=</operator> <name pos:start="702:35" pos:end="702:38">arg5</name></expr>;</expr_stmt>
                <expr_stmt pos:start="703:17" pos:end="703:52"><expr pos:start="703:17" pos:end="703:51"><call pos:start="703:17" pos:end="703:51"><name pos:start="703:17" pos:end="703:34">unlock_user_struct</name><argument_list pos:start="703:35" pos:end="703:51">(<argument pos:start="703:36" pos:end="703:41"><expr pos:start="703:36" pos:end="703:41"><name pos:start="703:36" pos:end="703:41">rt_act</name></expr></argument>, <argument pos:start="703:44" pos:end="703:47"><expr pos:start="703:44" pos:end="703:47"><name pos:start="703:44" pos:end="703:47">arg2</name></expr></argument>, <argument pos:start="703:50" pos:end="703:50"><expr pos:start="703:50" pos:end="703:50"><literal type="number" pos:start="703:50" pos:end="703:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="704:17" pos:end="704:28"><expr pos:start="704:17" pos:end="704:27"><name pos:start="704:17" pos:end="704:20">pact</name> <operator pos:start="704:22" pos:end="704:22">=</operator> <operator pos:start="704:24" pos:end="704:24">&amp;</operator><name pos:start="704:25" pos:end="704:27">act</name></expr>;</expr_stmt>
            <expr_stmt pos:start="705:13" pos:end="705:61"><expr pos:start="705:13" pos:end="705:60"><name pos:start="705:13" pos:end="705:15">ret</name> <operator pos:start="705:17" pos:end="705:17">=</operator> <call pos:start="705:19" pos:end="705:60"><name pos:start="705:19" pos:end="705:27">get_errno</name><argument_list pos:start="705:28" pos:end="705:60">(<argument pos:start="705:29" pos:end="705:59"><expr pos:start="705:29" pos:end="705:59"><call pos:start="705:29" pos:end="705:59"><name pos:start="705:29" pos:end="705:40">do_sigaction</name><argument_list pos:start="705:41" pos:end="705:59">(<argument pos:start="705:42" pos:end="705:45"><expr pos:start="705:42" pos:end="705:45"><name pos:start="705:42" pos:end="705:45">arg1</name></expr></argument>, <argument pos:start="705:48" pos:end="705:51"><expr pos:start="705:48" pos:end="705:51"><name pos:start="705:48" pos:end="705:51">pact</name></expr></argument>, <argument pos:start="705:54" pos:end="705:58"><expr pos:start="705:54" pos:end="705:58"><operator pos:start="705:54" pos:end="705:54">&amp;</operator><name pos:start="705:55" pos:end="705:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="706:13" pos:end="3541:14"><if pos:start="706:13" pos:end="3541:14">if <condition pos:start="706:16" pos:end="706:39">(<expr pos:start="706:17" pos:end="706:38"><operator pos:start="706:17" pos:end="706:17">!</operator><call pos:start="706:18" pos:end="706:30"><name pos:start="706:18" pos:end="706:25">is_error</name><argument_list pos:start="706:26" pos:end="706:30">(<argument pos:start="706:27" pos:end="706:29"><expr pos:start="706:27" pos:end="706:29"><name pos:start="706:27" pos:end="706:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="706:32" pos:end="706:33">&amp;&amp;</operator> <name pos:start="706:35" pos:end="706:38">arg3</name></expr>)</condition> <block pos:start="706:41" pos:end="3541:14">{<block_content pos:start="707:17" pos:end="3541:14">
                <if_stmt pos:start="707:17" pos:end="708:32"><if pos:start="707:17" pos:end="708:32">if <condition pos:start="707:20" pos:end="707:69">(<expr pos:start="707:21" pos:end="707:68"><operator pos:start="707:21" pos:end="707:21">!</operator><call pos:start="707:22" pos:end="707:68"><name pos:start="707:22" pos:end="707:37">lock_user_struct</name><argument_list pos:start="707:38" pos:end="707:68">(<argument pos:start="707:39" pos:end="707:50"><expr pos:start="707:39" pos:end="707:50"><name pos:start="707:39" pos:end="707:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="707:53" pos:end="707:58"><expr pos:start="707:53" pos:end="707:58"><name pos:start="707:53" pos:end="707:58">rt_act</name></expr></argument>, <argument pos:start="707:61" pos:end="707:64"><expr pos:start="707:61" pos:end="707:64"><name pos:start="707:61" pos:end="707:64">arg3</name></expr></argument>, <argument pos:start="707:67" pos:end="707:67"><expr pos:start="707:67" pos:end="707:67"><literal type="number" pos:start="707:67" pos:end="707:67">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="708:21" pos:end="708:32"><block_content pos:start="708:21" pos:end="708:32">
                    <goto pos:start="708:21" pos:end="708:32">goto <name pos:start="708:26" pos:end="708:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="709:17" pos:end="709:55"><expr pos:start="709:17" pos:end="709:54"><name pos:start="709:17" pos:end="709:35"><name pos:start="709:17" pos:end="709:22">rt_act</name><operator pos:start="709:23" pos:end="709:24">-&gt;</operator><name pos:start="709:25" pos:end="709:35">_sa_handler</name></name> <operator pos:start="709:37" pos:end="709:37">=</operator> <name pos:start="709:39" pos:end="709:54"><name pos:start="709:39" pos:end="709:42">oact</name><operator pos:start="709:43" pos:end="709:43">.</operator><name pos:start="709:44" pos:end="709:54">_sa_handler</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="710:17" pos:end="710:47"><expr pos:start="710:17" pos:end="710:46"><name pos:start="710:17" pos:end="710:31"><name pos:start="710:17" pos:end="710:22">rt_act</name><operator pos:start="710:23" pos:end="710:24">-&gt;</operator><name pos:start="710:25" pos:end="710:31">sa_mask</name></name> <operator pos:start="710:33" pos:end="710:33">=</operator> <name pos:start="710:35" pos:end="710:46"><name pos:start="710:35" pos:end="710:38">oact</name><operator pos:start="710:39" pos:end="710:39">.</operator><name pos:start="710:40" pos:end="710:46">sa_mask</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="711:17" pos:end="711:49"><expr pos:start="711:17" pos:end="711:48"><name pos:start="711:17" pos:end="711:32"><name pos:start="711:17" pos:end="711:22">rt_act</name><operator pos:start="711:23" pos:end="711:24">-&gt;</operator><name pos:start="711:25" pos:end="711:32">sa_flags</name></name> <operator pos:start="711:34" pos:end="711:34">=</operator> <name pos:start="711:36" pos:end="711:48"><name pos:start="711:36" pos:end="711:39">oact</name><operator pos:start="711:40" pos:end="711:40">.</operator><name pos:start="711:41" pos:end="711:48">sa_flags</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="712:17" pos:end="714:0"><expr pos:start="712:17" pos:end="712:51"><call pos:start="712:17" pos:end="712:51"><name pos:start="712:17" pos:end="712:34">unlock_user_struct</name><argument_list pos:start="712:35" pos:end="712:51">(<argument pos:start="712:36" pos:end="712:41"><expr pos:start="712:36" pos:end="712:41"><name pos:start="712:36" pos:end="712:41">rt_act</name></expr></argument>, <argument pos:start="712:44" pos:end="712:47"><expr pos:start="712:44" pos:end="712:47"><name pos:start="712:44" pos:end="712:47">arg3</name></expr></argument>, <argument pos:start="712:50" pos:end="712:50"><expr pos:start="712:50" pos:end="712:50"><literal type="number" pos:start="712:50" pos:end="712:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="713:1" pos:end="713:5">#<cpp:directive pos:start="713:2" pos:end="713:5">else</cpp:directive></cpp:else>
            <decl_stmt pos:start="714:13" pos:end="714:41"><decl pos:start="714:13" pos:end="714:40"><type pos:start="714:13" pos:end="714:37"><name pos:start="714:13" pos:end="714:35"><name pos:start="714:13" pos:end="714:18">struct</name> <name pos:start="714:20" pos:end="714:35">target_sigaction</name></name> <modifier pos:start="714:37" pos:end="714:37">*</modifier></type><name pos:start="714:38" pos:end="714:40">act</name></decl>;</decl_stmt>
            <decl_stmt pos:start="715:13" pos:end="715:42"><decl pos:start="715:13" pos:end="715:41"><type pos:start="715:13" pos:end="715:37"><name pos:start="715:13" pos:end="715:35"><name pos:start="715:13" pos:end="715:18">struct</name> <name pos:start="715:20" pos:end="715:35">target_sigaction</name></name> <modifier pos:start="715:37" pos:end="715:37">*</modifier></type><name pos:start="715:38" pos:end="715:41">oact</name></decl>;</decl_stmt>
            <if_stmt pos:start="716:13" pos:end="3541:14"><if pos:start="716:13" pos:end="3541:14">if <condition pos:start="716:16" pos:end="716:48">(<expr pos:start="716:17" pos:end="716:47"><name pos:start="716:17" pos:end="716:20">arg4</name> <operator pos:start="716:22" pos:end="716:23">!=</operator> <sizeof pos:start="716:25" pos:end="716:47">sizeof<argument_list pos:start="716:31" pos:end="716:47">(<argument pos:start="716:32" pos:end="716:46"><expr pos:start="716:32" pos:end="716:46"><name pos:start="716:32" pos:end="716:46">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="716:50" pos:end="3541:14">{<block_content pos:start="717:13" pos:end="3541:14">
            <if_stmt pos:start="717:13" pos:end="721:27"><if pos:start="717:13" pos:end="720:13">if <condition pos:start="717:16" pos:end="717:21">(<expr pos:start="717:17" pos:end="717:20"><name pos:start="717:17" pos:end="717:20">arg2</name></expr>)</condition> <block pos:start="717:23" pos:end="720:13">{<block_content pos:start="718:17" pos:end="719:32">
                <if_stmt pos:start="718:17" pos:end="719:32"><if pos:start="718:17" pos:end="719:32">if <condition pos:start="718:20" pos:end="718:65">(<expr pos:start="718:21" pos:end="718:64"><operator pos:start="718:21" pos:end="718:21">!</operator><call pos:start="718:22" pos:end="718:64"><name pos:start="718:22" pos:end="718:37">lock_user_struct</name><argument_list pos:start="718:38" pos:end="718:64">(<argument pos:start="718:39" pos:end="718:49"><expr pos:start="718:39" pos:end="718:49"><name pos:start="718:39" pos:end="718:49">VERIFY_READ</name></expr></argument>, <argument pos:start="718:52" pos:end="718:54"><expr pos:start="718:52" pos:end="718:54"><name pos:start="718:52" pos:end="718:54">act</name></expr></argument>, <argument pos:start="718:57" pos:end="718:60"><expr pos:start="718:57" pos:end="718:60"><name pos:start="718:57" pos:end="718:60">arg2</name></expr></argument>, <argument pos:start="718:63" pos:end="718:63"><expr pos:start="718:63" pos:end="718:63"><literal type="number" pos:start="718:63" pos:end="718:63">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="719:21" pos:end="719:32"><block_content pos:start="719:21" pos:end="719:32">
                    <goto pos:start="719:21" pos:end="719:32">goto <name pos:start="719:26" pos:end="719:31">efault</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else pos:start="720:15" pos:end="721:27">else<block type="pseudo" pos:start="721:17" pos:end="721:27"><block_content pos:start="721:17" pos:end="721:27">
                <expr_stmt pos:start="721:17" pos:end="721:27"><expr pos:start="721:17" pos:end="721:26"><name pos:start="721:17" pos:end="721:19">act</name> <operator pos:start="721:21" pos:end="721:21">=</operator> <name pos:start="721:23" pos:end="721:26">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <if_stmt pos:start="722:13" pos:end="3541:14"><if pos:start="722:13" pos:end="3541:14">if <condition pos:start="722:16" pos:end="722:21">(<expr pos:start="722:17" pos:end="722:20"><name pos:start="722:17" pos:end="722:20">arg3</name></expr>)</condition> <block pos:start="722:23" pos:end="3541:14">{<block_content pos:start="723:17" pos:end="3541:14">
                <if_stmt pos:start="723:17" pos:end="727:28"><if pos:start="723:17" pos:end="726:13">if <condition pos:start="723:20" pos:end="723:67">(<expr pos:start="723:21" pos:end="723:66"><operator pos:start="723:21" pos:end="723:21">!</operator><call pos:start="723:22" pos:end="723:66"><name pos:start="723:22" pos:end="723:37">lock_user_struct</name><argument_list pos:start="723:38" pos:end="723:66">(<argument pos:start="723:39" pos:end="723:50"><expr pos:start="723:39" pos:end="723:50"><name pos:start="723:39" pos:end="723:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="723:53" pos:end="723:56"><expr pos:start="723:53" pos:end="723:56"><name pos:start="723:53" pos:end="723:56">oact</name></expr></argument>, <argument pos:start="723:59" pos:end="723:62"><expr pos:start="723:59" pos:end="723:62"><name pos:start="723:59" pos:end="723:62">arg3</name></expr></argument>, <argument pos:start="723:65" pos:end="723:65"><expr pos:start="723:65" pos:end="723:65"><literal type="number" pos:start="723:65" pos:end="723:65">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="723:69" pos:end="726:13">{<block_content pos:start="724:21" pos:end="725:43">
                    <expr_stmt pos:start="724:21" pos:end="724:41"><expr pos:start="724:21" pos:end="724:40"><name pos:start="724:21" pos:end="724:23">ret</name> <operator pos:start="724:25" pos:end="724:25">=</operator> <operator pos:start="724:27" pos:end="724:27">-</operator><name pos:start="724:28" pos:end="724:40">TARGET_EFAULT</name></expr>;</expr_stmt>
                    <goto pos:start="725:21" pos:end="725:43">goto <name pos:start="725:26" pos:end="725:42">rt_sigaction_fail</name>;</goto>
            </block_content>}</block></if> <else pos:start="726:15" pos:end="727:28">else<block type="pseudo" pos:start="727:17" pos:end="727:28"><block_content pos:start="727:17" pos:end="727:28">
                <expr_stmt pos:start="727:17" pos:end="727:28"><expr pos:start="727:17" pos:end="727:27"><name pos:start="727:17" pos:end="727:20">oact</name> <operator pos:start="727:22" pos:end="727:22">=</operator> <name pos:start="727:24" pos:end="727:27">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="728:13" pos:end="728:59"><expr pos:start="728:13" pos:end="728:58"><name pos:start="728:13" pos:end="728:15">ret</name> <operator pos:start="728:17" pos:end="728:17">=</operator> <call pos:start="728:19" pos:end="728:58"><name pos:start="728:19" pos:end="728:27">get_errno</name><argument_list pos:start="728:28" pos:end="728:58">(<argument pos:start="728:29" pos:end="728:57"><expr pos:start="728:29" pos:end="728:57"><call pos:start="728:29" pos:end="728:57"><name pos:start="728:29" pos:end="728:40">do_sigaction</name><argument_list pos:start="728:41" pos:end="728:57">(<argument pos:start="728:42" pos:end="728:45"><expr pos:start="728:42" pos:end="728:45"><name pos:start="728:42" pos:end="728:45">arg1</name></expr></argument>, <argument pos:start="728:48" pos:end="728:50"><expr pos:start="728:48" pos:end="728:50"><name pos:start="728:48" pos:end="728:50">act</name></expr></argument>, <argument pos:start="728:53" pos:end="728:56"><expr pos:start="728:53" pos:end="728:56"><name pos:start="728:53" pos:end="728:56">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<label pos:start="729:9" pos:end="729:26"><name pos:start="729:9" pos:end="729:25">rt_sigaction_fail</name>:</label>
            <if_stmt pos:start="730:13" pos:end="731:49"><if pos:start="730:13" pos:end="731:49">if <condition pos:start="730:16" pos:end="730:20">(<expr pos:start="730:17" pos:end="730:19"><name pos:start="730:17" pos:end="730:19">act</name></expr>)</condition><block type="pseudo" pos:start="731:17" pos:end="731:49"><block_content pos:start="731:17" pos:end="731:49">
                <expr_stmt pos:start="731:17" pos:end="731:49"><expr pos:start="731:17" pos:end="731:48"><call pos:start="731:17" pos:end="731:48"><name pos:start="731:17" pos:end="731:34">unlock_user_struct</name><argument_list pos:start="731:35" pos:end="731:48">(<argument pos:start="731:36" pos:end="731:38"><expr pos:start="731:36" pos:end="731:38"><name pos:start="731:36" pos:end="731:38">act</name></expr></argument>, <argument pos:start="731:41" pos:end="731:44"><expr pos:start="731:41" pos:end="731:44"><name pos:start="731:41" pos:end="731:44">arg2</name></expr></argument>, <argument pos:start="731:47" pos:end="731:47"><expr pos:start="731:47" pos:end="731:47"><literal type="number" pos:start="731:47" pos:end="731:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="732:13" pos:end="736:0"><if pos:start="732:13" pos:end="736:0">if <condition pos:start="732:16" pos:end="732:21">(<expr pos:start="732:17" pos:end="732:20"><name pos:start="732:17" pos:end="732:20">oact</name></expr>)</condition><block type="pseudo" pos:start="733:17" pos:end="736:0"><block_content pos:start="733:17" pos:end="736:0">
                <expr_stmt pos:start="733:17" pos:end="736:0"><expr pos:start="733:17" pos:end="733:49"><call pos:start="733:17" pos:end="733:49"><name pos:start="733:17" pos:end="733:34">unlock_user_struct</name><argument_list pos:start="733:35" pos:end="733:49">(<argument pos:start="733:36" pos:end="733:39"><expr pos:start="733:36" pos:end="733:39"><name pos:start="733:36" pos:end="733:39">oact</name></expr></argument>, <argument pos:start="733:42" pos:end="733:45"><expr pos:start="733:42" pos:end="733:45"><name pos:start="733:42" pos:end="733:45">arg3</name></expr></argument>, <argument pos:start="733:48" pos:end="733:48"><expr pos:start="733:48" pos:end="733:48"><literal type="number" pos:start="733:48" pos:end="733:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="734:1" pos:end="734:6">#<cpp:directive pos:start="734:2" pos:end="734:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="735:1" pos:end="735:25">#<cpp:directive pos:start="735:2" pos:end="735:6">ifdef</cpp:directive> <name pos:start="735:8" pos:end="735:25">TARGET_NR_sgetmask</name></cpp:ifdef> <comment type="block" pos:start="735:27" pos:end="735:44">/* not on alpha */</comment>
    <case pos:start="736:5" pos:end="736:28">case <expr pos:start="736:10" pos:end="736:27"><name pos:start="736:10" pos:end="736:27">TARGET_NR_sgetmask</name></expr>:</case>
        <block pos:start="737:9" pos:end="3541:14">{<block_content pos:start="738:13" pos:end="3541:14">
            <decl_stmt pos:start="738:13" pos:end="738:29"><decl pos:start="738:13" pos:end="738:28"><type pos:start="738:13" pos:end="738:20"><name pos:start="738:13" pos:end="738:20">sigset_t</name></type> <name pos:start="738:22" pos:end="738:28">cur_set</name></decl>;</decl_stmt>
            <decl_stmt pos:start="739:13" pos:end="739:33"><decl pos:start="739:13" pos:end="739:32"><type pos:start="739:13" pos:end="739:21"><name pos:start="739:13" pos:end="739:21">abi_ulong</name></type> <name pos:start="739:23" pos:end="739:32">target_set</name></decl>;</decl_stmt>
            <expr_stmt pos:start="740:13" pos:end="740:52"><expr pos:start="740:13" pos:end="740:51"><name pos:start="740:13" pos:end="740:15">ret</name> <operator pos:start="740:17" pos:end="740:17">=</operator> <call pos:start="740:19" pos:end="740:51"><name pos:start="740:19" pos:end="740:32">do_sigprocmask</name><argument_list pos:start="740:33" pos:end="740:51">(<argument pos:start="740:34" pos:end="740:34"><expr pos:start="740:34" pos:end="740:34"><literal type="number" pos:start="740:34" pos:end="740:34">0</literal></expr></argument>, <argument pos:start="740:37" pos:end="740:40"><expr pos:start="740:37" pos:end="740:40"><name pos:start="740:37" pos:end="740:40">NULL</name></expr></argument>, <argument pos:start="740:43" pos:end="740:50"><expr pos:start="740:43" pos:end="740:50"><operator pos:start="740:43" pos:end="740:43">&amp;</operator><name pos:start="740:44" pos:end="740:50">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="741:13" pos:end="3541:14"><if pos:start="741:13" pos:end="3541:14">if <condition pos:start="741:16" pos:end="741:21">(<expr pos:start="741:17" pos:end="741:20"><operator pos:start="741:17" pos:end="741:17">!</operator><name pos:start="741:18" pos:end="741:20">ret</name></expr>)</condition> <block pos:start="741:23" pos:end="3541:14">{<block_content pos:start="742:17" pos:end="3541:14">
                <expr_stmt pos:start="742:17" pos:end="742:65"><expr pos:start="742:17" pos:end="742:64"><call pos:start="742:17" pos:end="742:64"><name pos:start="742:17" pos:end="742:41">host_to_target_old_sigset</name><argument_list pos:start="742:42" pos:end="742:64">(<argument pos:start="742:43" pos:end="742:53"><expr pos:start="742:43" pos:end="742:53"><operator pos:start="742:43" pos:end="742:43">&amp;</operator><name pos:start="742:44" pos:end="742:53">target_set</name></expr></argument>, <argument pos:start="742:56" pos:end="742:63"><expr pos:start="742:56" pos:end="742:63"><operator pos:start="742:56" pos:end="742:56">&amp;</operator><name pos:start="742:57" pos:end="742:63">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="743:17" pos:end="746:0"><expr pos:start="743:17" pos:end="743:32"><name pos:start="743:17" pos:end="743:19">ret</name> <operator pos:start="743:21" pos:end="743:21">=</operator> <name pos:start="743:23" pos:end="743:32">target_set</name></expr>;</expr_stmt>
<cpp:endif pos:start="744:1" pos:end="744:6">#<cpp:directive pos:start="744:2" pos:end="744:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="745:1" pos:end="745:25">#<cpp:directive pos:start="745:2" pos:end="745:6">ifdef</cpp:directive> <name pos:start="745:8" pos:end="745:25">TARGET_NR_ssetmask</name></cpp:ifdef> <comment type="block" pos:start="745:27" pos:end="745:44">/* not on alpha */</comment>
    <case pos:start="746:5" pos:end="746:28">case <expr pos:start="746:10" pos:end="746:27"><name pos:start="746:10" pos:end="746:27">TARGET_NR_ssetmask</name></expr>:</case>
        <block pos:start="747:9" pos:end="3541:14">{<block_content pos:start="748:13" pos:end="3541:14">
            <decl_stmt pos:start="748:13" pos:end="748:40"><decl pos:start="748:13" pos:end="748:24"><type pos:start="748:13" pos:end="748:20"><name pos:start="748:13" pos:end="748:20">sigset_t</name></type> <name pos:start="748:22" pos:end="748:24">set</name></decl>, <decl pos:start="748:27" pos:end="748:30"><type ref="prev" pos:start="748:13" pos:end="748:20"/><name pos:start="748:27" pos:end="748:30">oset</name></decl>, <decl pos:start="748:33" pos:end="748:39"><type ref="prev" pos:start="748:13" pos:end="748:20"/><name pos:start="748:33" pos:end="748:39">cur_set</name></decl>;</decl_stmt>
            <decl_stmt pos:start="749:13" pos:end="749:40"><decl pos:start="749:13" pos:end="749:39"><type pos:start="749:13" pos:end="749:21"><name pos:start="749:13" pos:end="749:21">abi_ulong</name></type> <name pos:start="749:23" pos:end="749:32">target_set</name> <init pos:start="749:34" pos:end="749:39">= <expr pos:start="749:36" pos:end="749:39"><name pos:start="749:36" pos:end="749:39">arg1</name></expr></init></decl>;</decl_stmt>
            <comment type="block" pos:start="750:13" pos:end="754:15">/* We only have one word of the new mask so we must read
             * the rest of it with do_sigprocmask() and OR in this word.
             * We are guaranteed that a do_sigprocmask() that only queries
             * the signal mask will not fail.
             */</comment>
            <expr_stmt pos:start="755:13" pos:end="755:52"><expr pos:start="755:13" pos:end="755:51"><name pos:start="755:13" pos:end="755:15">ret</name> <operator pos:start="755:17" pos:end="755:17">=</operator> <call pos:start="755:19" pos:end="755:51"><name pos:start="755:19" pos:end="755:32">do_sigprocmask</name><argument_list pos:start="755:33" pos:end="755:51">(<argument pos:start="755:34" pos:end="755:34"><expr pos:start="755:34" pos:end="755:34"><literal type="number" pos:start="755:34" pos:end="755:34">0</literal></expr></argument>, <argument pos:start="755:37" pos:end="755:40"><expr pos:start="755:37" pos:end="755:40"><name pos:start="755:37" pos:end="755:40">NULL</name></expr></argument>, <argument pos:start="755:43" pos:end="755:50"><expr pos:start="755:43" pos:end="755:50"><operator pos:start="755:43" pos:end="755:43">&amp;</operator><name pos:start="755:44" pos:end="755:50">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="756:13" pos:end="756:25"><expr pos:start="756:13" pos:end="756:24"><call pos:start="756:13" pos:end="756:24"><name pos:start="756:13" pos:end="756:18">assert</name><argument_list pos:start="756:19" pos:end="756:24">(<argument pos:start="756:20" pos:end="756:23"><expr pos:start="756:20" pos:end="756:23"><operator pos:start="756:20" pos:end="756:20">!</operator><name pos:start="756:21" pos:end="756:23">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="757:13" pos:end="757:57"><expr pos:start="757:13" pos:end="757:56"><call pos:start="757:13" pos:end="757:56"><name pos:start="757:13" pos:end="757:37">target_to_host_old_sigset</name><argument_list pos:start="757:38" pos:end="757:56">(<argument pos:start="757:39" pos:end="757:42"><expr pos:start="757:39" pos:end="757:42"><operator pos:start="757:39" pos:end="757:39">&amp;</operator><name pos:start="757:40" pos:end="757:42">set</name></expr></argument>, <argument pos:start="757:45" pos:end="757:55"><expr pos:start="757:45" pos:end="757:55"><operator pos:start="757:45" pos:end="757:45">&amp;</operator><name pos:start="757:46" pos:end="757:55">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="758:13" pos:end="758:43"><expr pos:start="758:13" pos:end="758:42"><call pos:start="758:13" pos:end="758:42"><name pos:start="758:13" pos:end="758:20">sigorset</name><argument_list pos:start="758:21" pos:end="758:42">(<argument pos:start="758:22" pos:end="758:25"><expr pos:start="758:22" pos:end="758:25"><operator pos:start="758:22" pos:end="758:22">&amp;</operator><name pos:start="758:23" pos:end="758:25">set</name></expr></argument>, <argument pos:start="758:28" pos:end="758:31"><expr pos:start="758:28" pos:end="758:31"><operator pos:start="758:28" pos:end="758:28">&amp;</operator><name pos:start="758:29" pos:end="758:31">set</name></expr></argument>, <argument pos:start="758:34" pos:end="758:41"><expr pos:start="758:34" pos:end="758:41"><operator pos:start="758:34" pos:end="758:34">&amp;</operator><name pos:start="758:35" pos:end="758:41">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="759:13" pos:end="759:59"><expr pos:start="759:13" pos:end="759:58"><name pos:start="759:13" pos:end="759:15">ret</name> <operator pos:start="759:17" pos:end="759:17">=</operator> <call pos:start="759:19" pos:end="759:58"><name pos:start="759:19" pos:end="759:32">do_sigprocmask</name><argument_list pos:start="759:33" pos:end="759:58">(<argument pos:start="759:34" pos:end="759:44"><expr pos:start="759:34" pos:end="759:44"><name pos:start="759:34" pos:end="759:44">SIG_SETMASK</name></expr></argument>, <argument pos:start="759:47" pos:end="759:50"><expr pos:start="759:47" pos:end="759:50"><operator pos:start="759:47" pos:end="759:47">&amp;</operator><name pos:start="759:48" pos:end="759:50">set</name></expr></argument>, <argument pos:start="759:53" pos:end="759:57"><expr pos:start="759:53" pos:end="759:57"><operator pos:start="759:53" pos:end="759:53">&amp;</operator><name pos:start="759:54" pos:end="759:57">oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="760:13" pos:end="3541:14"><if pos:start="760:13" pos:end="3541:14">if <condition pos:start="760:16" pos:end="760:21">(<expr pos:start="760:17" pos:end="760:20"><operator pos:start="760:17" pos:end="760:17">!</operator><name pos:start="760:18" pos:end="760:20">ret</name></expr>)</condition> <block pos:start="760:23" pos:end="3541:14">{<block_content pos:start="761:17" pos:end="3541:14">
                <expr_stmt pos:start="761:17" pos:end="761:62"><expr pos:start="761:17" pos:end="761:61"><call pos:start="761:17" pos:end="761:61"><name pos:start="761:17" pos:end="761:41">host_to_target_old_sigset</name><argument_list pos:start="761:42" pos:end="761:61">(<argument pos:start="761:43" pos:end="761:53"><expr pos:start="761:43" pos:end="761:53"><operator pos:start="761:43" pos:end="761:43">&amp;</operator><name pos:start="761:44" pos:end="761:53">target_set</name></expr></argument>, <argument pos:start="761:56" pos:end="761:60"><expr pos:start="761:56" pos:end="761:60"><operator pos:start="761:56" pos:end="761:56">&amp;</operator><name pos:start="761:57" pos:end="761:60">oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="762:17" pos:end="765:0"><expr pos:start="762:17" pos:end="762:32"><name pos:start="762:17" pos:end="762:19">ret</name> <operator pos:start="762:21" pos:end="762:21">=</operator> <name pos:start="762:23" pos:end="762:32">target_set</name></expr>;</expr_stmt>
<cpp:endif pos:start="763:1" pos:end="763:6">#<cpp:directive pos:start="763:2" pos:end="763:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="764:1" pos:end="764:28">#<cpp:directive pos:start="764:2" pos:end="764:6">ifdef</cpp:directive> <name pos:start="764:8" pos:end="764:28">TARGET_NR_sigprocmask</name></cpp:ifdef>
    <case pos:start="765:5" pos:end="765:31">case <expr pos:start="765:10" pos:end="765:30"><name pos:start="765:10" pos:end="765:30">TARGET_NR_sigprocmask</name></expr>:</case>
        <block pos:start="766:9" pos:end="3541:14">{<block_content pos:start="768:13" pos:end="3541:14">
<cpp:if pos:start="767:1" pos:end="767:25">#<cpp:directive pos:start="767:2" pos:end="767:3">if</cpp:directive> <expr pos:start="767:5" pos:end="767:25"><call pos:start="767:5" pos:end="767:25"><name pos:start="767:5" pos:end="767:11">defined</name><argument_list pos:start="767:12" pos:end="767:25">(<argument pos:start="767:13" pos:end="767:24"><expr pos:start="767:13" pos:end="767:24"><name pos:start="767:13" pos:end="767:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <decl_stmt pos:start="768:13" pos:end="768:33"><decl pos:start="768:13" pos:end="768:24"><type pos:start="768:13" pos:end="768:20"><name pos:start="768:13" pos:end="768:20">sigset_t</name></type> <name pos:start="768:22" pos:end="768:24">set</name></decl>, <decl pos:start="768:27" pos:end="768:32"><type ref="prev" pos:start="768:13" pos:end="768:20"/><name pos:start="768:27" pos:end="768:32">oldset</name></decl>;</decl_stmt>
            <decl_stmt pos:start="769:13" pos:end="769:27"><decl pos:start="769:13" pos:end="769:26"><type pos:start="769:13" pos:end="769:21"><name pos:start="769:13" pos:end="769:21">abi_ulong</name></type> <name pos:start="769:23" pos:end="769:26">mask</name></decl>;</decl_stmt>
            <decl_stmt pos:start="770:13" pos:end="770:20"><decl pos:start="770:13" pos:end="770:19"><type pos:start="770:13" pos:end="770:15"><name pos:start="770:13" pos:end="770:15">int</name></type> <name pos:start="770:17" pos:end="770:19">how</name></decl>;</decl_stmt>
            <switch pos:start="771:13" pos:end="3541:14">switch <condition pos:start="771:20" pos:end="771:25">(<expr pos:start="771:21" pos:end="771:24"><name pos:start="771:21" pos:end="771:24">arg1</name></expr>)</condition> <block pos:start="771:27" pos:end="3541:14">{<block_content pos:start="772:13" pos:end="3541:14">
            <case pos:start="772:13" pos:end="772:34">case <expr pos:start="772:18" pos:end="772:33"><name pos:start="772:18" pos:end="772:33">TARGET_SIG_BLOCK</name></expr>:</case>
                <expr_stmt pos:start="773:17" pos:end="773:32"><expr pos:start="773:17" pos:end="773:31"><name pos:start="773:17" pos:end="773:19">how</name> <operator pos:start="773:21" pos:end="773:21">=</operator> <name pos:start="773:23" pos:end="773:31">SIG_BLOCK</name></expr>;</expr_stmt>
            <case pos:start="774:13" pos:end="774:36">case <expr pos:start="774:18" pos:end="774:35"><name pos:start="774:18" pos:end="774:35">TARGET_SIG_UNBLOCK</name></expr>:</case>
                <expr_stmt pos:start="775:17" pos:end="775:34"><expr pos:start="775:17" pos:end="775:33"><name pos:start="775:17" pos:end="775:19">how</name> <operator pos:start="775:21" pos:end="775:21">=</operator> <name pos:start="775:23" pos:end="775:33">SIG_UNBLOCK</name></expr>;</expr_stmt>
            <case pos:start="776:13" pos:end="776:36">case <expr pos:start="776:18" pos:end="776:35"><name pos:start="776:18" pos:end="776:35">TARGET_SIG_SETMASK</name></expr>:</case>
                <expr_stmt pos:start="777:17" pos:end="777:34"><expr pos:start="777:17" pos:end="777:33"><name pos:start="777:17" pos:end="777:19">how</name> <operator pos:start="777:21" pos:end="777:21">=</operator> <name pos:start="777:23" pos:end="777:33">SIG_SETMASK</name></expr>;</expr_stmt>
            <default pos:start="778:13" pos:end="778:20">default:</default>
                <goto pos:start="779:17" pos:end="779:26">goto <name pos:start="779:22" pos:end="779:25">fail</name>;</goto>
            <expr_stmt pos:start="780:13" pos:end="780:24"><expr pos:start="780:13" pos:end="780:23"><name pos:start="780:13" pos:end="780:16">mask</name> <operator pos:start="780:18" pos:end="780:18">=</operator> <name pos:start="780:20" pos:end="780:23">arg2</name></expr>;</expr_stmt>
            <expr_stmt pos:start="781:13" pos:end="781:51"><expr pos:start="781:13" pos:end="781:50"><call pos:start="781:13" pos:end="781:50"><name pos:start="781:13" pos:end="781:37">target_to_host_old_sigset</name><argument_list pos:start="781:38" pos:end="781:50">(<argument pos:start="781:39" pos:end="781:42"><expr pos:start="781:39" pos:end="781:42"><operator pos:start="781:39" pos:end="781:39">&amp;</operator><name pos:start="781:40" pos:end="781:42">set</name></expr></argument>, <argument pos:start="781:45" pos:end="781:49"><expr pos:start="781:45" pos:end="781:49"><operator pos:start="781:45" pos:end="781:45">&amp;</operator><name pos:start="781:46" pos:end="781:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="782:13" pos:end="782:53"><expr pos:start="782:13" pos:end="782:52"><name pos:start="782:13" pos:end="782:15">ret</name> <operator pos:start="782:17" pos:end="782:17">=</operator> <call pos:start="782:19" pos:end="782:52"><name pos:start="782:19" pos:end="782:32">do_sigprocmask</name><argument_list pos:start="782:33" pos:end="782:52">(<argument pos:start="782:34" pos:end="782:36"><expr pos:start="782:34" pos:end="782:36"><name pos:start="782:34" pos:end="782:36">how</name></expr></argument>, <argument pos:start="782:39" pos:end="782:42"><expr pos:start="782:39" pos:end="782:42"><operator pos:start="782:39" pos:end="782:39">&amp;</operator><name pos:start="782:40" pos:end="782:42">set</name></expr></argument>, <argument pos:start="782:45" pos:end="782:51"><expr pos:start="782:45" pos:end="782:51"><operator pos:start="782:45" pos:end="782:45">&amp;</operator><name pos:start="782:46" pos:end="782:51">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="783:13" pos:end="3541:14"><if pos:start="783:13" pos:end="3541:14">if <condition pos:start="783:16" pos:end="783:31">(<expr pos:start="783:17" pos:end="783:30"><operator pos:start="783:17" pos:end="783:17">!</operator><call pos:start="783:18" pos:end="783:30"><name pos:start="783:18" pos:end="783:25">is_error</name><argument_list pos:start="783:26" pos:end="783:30">(<argument pos:start="783:27" pos:end="783:29"><expr pos:start="783:27" pos:end="783:29"><name pos:start="783:27" pos:end="783:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="783:33" pos:end="3541:14">{<block_content pos:start="784:17" pos:end="3541:14">
                <expr_stmt pos:start="784:17" pos:end="784:58"><expr pos:start="784:17" pos:end="784:57"><call pos:start="784:17" pos:end="784:57"><name pos:start="784:17" pos:end="784:41">host_to_target_old_sigset</name><argument_list pos:start="784:42" pos:end="784:57">(<argument pos:start="784:43" pos:end="784:47"><expr pos:start="784:43" pos:end="784:47"><operator pos:start="784:43" pos:end="784:43">&amp;</operator><name pos:start="784:44" pos:end="784:47">mask</name></expr></argument>, <argument pos:start="784:50" pos:end="784:56"><expr pos:start="784:50" pos:end="784:56"><operator pos:start="784:50" pos:end="784:50">&amp;</operator><name pos:start="784:51" pos:end="784:56">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="785:17" pos:end="785:27"><expr pos:start="785:17" pos:end="785:26"><name pos:start="785:17" pos:end="785:19">ret</name> <operator pos:start="785:21" pos:end="785:21">=</operator> <name pos:start="785:23" pos:end="785:26">mask</name></expr>;</expr_stmt>
                <expr_stmt pos:start="786:17" pos:end="788:0"><expr pos:start="786:17" pos:end="786:57"><operator pos:start="786:17" pos:end="786:17">(</operator><operator pos:start="786:18" pos:end="786:18">(</operator><name pos:start="786:19" pos:end="786:31">CPUAlphaState</name> <operator pos:start="786:33" pos:end="786:33">*</operator><operator pos:start="786:34" pos:end="786:34">)</operator><name pos:start="786:35" pos:end="786:41">cpu_env</name><operator pos:start="786:42" pos:end="786:42">)</operator><operator pos:start="786:43" pos:end="786:44">-&gt;</operator><name pos:start="786:45" pos:end="786:53"><name pos:start="786:45" pos:end="786:46">ir</name><index pos:start="786:47" pos:end="786:53">[<expr pos:start="786:48" pos:end="786:52"><name pos:start="786:48" pos:end="786:52">IR_V0</name></expr>]</index></name> <operator pos:start="786:55" pos:end="786:55">=</operator> <literal type="number" pos:start="786:57" pos:end="786:57">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="786:60" pos:end="786:79">/* force no error */</comment>
<cpp:else pos:start="787:1" pos:end="787:5">#<cpp:directive pos:start="787:2" pos:end="787:5">else</cpp:directive></cpp:else>
            <decl_stmt pos:start="788:13" pos:end="788:43"><decl pos:start="788:13" pos:end="788:24"><type pos:start="788:13" pos:end="788:20"><name pos:start="788:13" pos:end="788:20">sigset_t</name></type> <name pos:start="788:22" pos:end="788:24">set</name></decl>, <decl pos:start="788:27" pos:end="788:32"><type ref="prev" pos:start="788:13" pos:end="788:20"/><name pos:start="788:27" pos:end="788:32">oldset</name></decl>, <decl pos:start="788:35" pos:end="788:42"><type ref="prev" pos:start="788:13" pos:end="788:20"><modifier pos:start="788:35" pos:end="788:35">*</modifier></type><name pos:start="788:36" pos:end="788:42">set_ptr</name></decl>;</decl_stmt>
            <decl_stmt pos:start="789:13" pos:end="789:20"><decl pos:start="789:13" pos:end="789:19"><type pos:start="789:13" pos:end="789:15"><name pos:start="789:13" pos:end="789:15">int</name></type> <name pos:start="789:17" pos:end="789:19">how</name></decl>;</decl_stmt>
            <if_stmt pos:start="790:13" pos:end="3541:14"><if pos:start="790:13" pos:end="3541:14">if <condition pos:start="790:16" pos:end="790:21">(<expr pos:start="790:17" pos:end="790:20"><name pos:start="790:17" pos:end="790:20">arg2</name></expr>)</condition> <block pos:start="790:23" pos:end="3541:14">{<block_content pos:start="791:17" pos:end="3541:14">
                <switch pos:start="791:17" pos:end="805:13">switch <condition pos:start="791:24" pos:end="791:29">(<expr pos:start="791:25" pos:end="791:28"><name pos:start="791:25" pos:end="791:28">arg1</name></expr>)</condition> <block pos:start="791:31" pos:end="805:13">{<block_content pos:start="792:17" pos:end="804:31">
                <case pos:start="792:17" pos:end="792:38">case <expr pos:start="792:22" pos:end="792:37"><name pos:start="792:22" pos:end="792:37">TARGET_SIG_BLOCK</name></expr>:</case>
                    <expr_stmt pos:start="793:21" pos:end="793:36"><expr pos:start="793:21" pos:end="793:35"><name pos:start="793:21" pos:end="793:23">how</name> <operator pos:start="793:25" pos:end="793:25">=</operator> <name pos:start="793:27" pos:end="793:35">SIG_BLOCK</name></expr>;</expr_stmt>
                <case pos:start="794:17" pos:end="794:40">case <expr pos:start="794:22" pos:end="794:39"><name pos:start="794:22" pos:end="794:39">TARGET_SIG_UNBLOCK</name></expr>:</case>
                    <expr_stmt pos:start="795:21" pos:end="795:38"><expr pos:start="795:21" pos:end="795:37"><name pos:start="795:21" pos:end="795:23">how</name> <operator pos:start="795:25" pos:end="795:25">=</operator> <name pos:start="795:27" pos:end="795:37">SIG_UNBLOCK</name></expr>;</expr_stmt>
                <case pos:start="796:17" pos:end="796:40">case <expr pos:start="796:22" pos:end="796:39"><name pos:start="796:22" pos:end="796:39">TARGET_SIG_SETMASK</name></expr>:</case>
                    <expr_stmt pos:start="797:21" pos:end="797:38"><expr pos:start="797:21" pos:end="797:37"><name pos:start="797:21" pos:end="797:23">how</name> <operator pos:start="797:25" pos:end="797:25">=</operator> <name pos:start="797:27" pos:end="797:37">SIG_SETMASK</name></expr>;</expr_stmt>
                <default pos:start="798:17" pos:end="798:24">default:</default>
                    <goto pos:start="799:21" pos:end="799:30">goto <name pos:start="799:26" pos:end="799:29">fail</name>;</goto>
                <if_stmt pos:start="800:17" pos:end="801:32"><if pos:start="800:17" pos:end="801:32">if <condition pos:start="800:20" pos:end="800:84">(<expr pos:start="800:21" pos:end="800:83"><operator pos:start="800:21" pos:end="800:21">!</operator><operator pos:start="800:22" pos:end="800:22">(</operator><name pos:start="800:23" pos:end="800:23">p</name> <operator pos:start="800:25" pos:end="800:25">=</operator> <call pos:start="800:27" pos:end="800:82"><name pos:start="800:27" pos:end="800:35">lock_user</name><argument_list pos:start="800:36" pos:end="800:82">(<argument pos:start="800:37" pos:end="800:47"><expr pos:start="800:37" pos:end="800:47"><name pos:start="800:37" pos:end="800:47">VERIFY_READ</name></expr></argument>, <argument pos:start="800:50" pos:end="800:53"><expr pos:start="800:50" pos:end="800:53"><name pos:start="800:50" pos:end="800:53">arg2</name></expr></argument>, <argument pos:start="800:56" pos:end="800:78"><expr pos:start="800:56" pos:end="800:78"><sizeof pos:start="800:56" pos:end="800:78">sizeof<argument_list pos:start="800:62" pos:end="800:78">(<argument pos:start="800:63" pos:end="800:77"><expr pos:start="800:63" pos:end="800:77"><name pos:start="800:63" pos:end="800:77">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="800:81" pos:end="800:81"><expr pos:start="800:81" pos:end="800:81"><literal type="number" pos:start="800:81" pos:end="800:81">1</literal></expr></argument>)</argument_list></call><operator pos:start="800:83" pos:end="800:83">)</operator></expr>)</condition><block type="pseudo" pos:start="801:21" pos:end="801:32"><block_content pos:start="801:21" pos:end="801:32">
                    <goto pos:start="801:21" pos:end="801:32">goto <name pos:start="801:26" pos:end="801:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="802:17" pos:end="802:51"><expr pos:start="802:17" pos:end="802:50"><call pos:start="802:17" pos:end="802:50"><name pos:start="802:17" pos:end="802:41">target_to_host_old_sigset</name><argument_list pos:start="802:42" pos:end="802:50">(<argument pos:start="802:43" pos:end="802:46"><expr pos:start="802:43" pos:end="802:46"><operator pos:start="802:43" pos:end="802:43">&amp;</operator><name pos:start="802:44" pos:end="802:46">set</name></expr></argument>, <argument pos:start="802:49" pos:end="802:49"><expr pos:start="802:49" pos:end="802:49"><name pos:start="802:49" pos:end="802:49">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="803:17" pos:end="803:40"><expr pos:start="803:17" pos:end="803:39"><call pos:start="803:17" pos:end="803:39"><name pos:start="803:17" pos:end="803:27">unlock_user</name><argument_list pos:start="803:28" pos:end="803:39">(<argument pos:start="803:29" pos:end="803:29"><expr pos:start="803:29" pos:end="803:29"><name pos:start="803:29" pos:end="803:29">p</name></expr></argument>, <argument pos:start="803:32" pos:end="803:35"><expr pos:start="803:32" pos:end="803:35"><name pos:start="803:32" pos:end="803:35">arg2</name></expr></argument>, <argument pos:start="803:38" pos:end="803:38"><expr pos:start="803:38" pos:end="803:38"><literal type="number" pos:start="803:38" pos:end="803:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="804:17" pos:end="804:31"><expr pos:start="804:17" pos:end="804:30"><name pos:start="804:17" pos:end="804:23">set_ptr</name> <operator pos:start="804:25" pos:end="804:25">=</operator> <operator pos:start="804:27" pos:end="804:27">&amp;</operator><name pos:start="804:28" pos:end="804:30">set</name></expr>;</expr_stmt>
            </block_content>}</block></switch> <if_stmt pos:start="805:15" pos:end="3541:14"><else pos:start="805:15" pos:end="3541:14">else <block pos:start="805:20" pos:end="3541:14">{<block_content pos:start="806:17" pos:end="3541:14">
                <expr_stmt pos:start="806:17" pos:end="806:24"><expr pos:start="806:17" pos:end="806:23"><name pos:start="806:17" pos:end="806:19">how</name> <operator pos:start="806:21" pos:end="806:21">=</operator> <literal type="number" pos:start="806:23" pos:end="806:23">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="807:17" pos:end="807:31"><expr pos:start="807:17" pos:end="807:30"><name pos:start="807:17" pos:end="807:23">set_ptr</name> <operator pos:start="807:25" pos:end="807:25">=</operator> <name pos:start="807:27" pos:end="807:30">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="808:13" pos:end="808:56"><expr pos:start="808:13" pos:end="808:55"><name pos:start="808:13" pos:end="808:15">ret</name> <operator pos:start="808:17" pos:end="808:17">=</operator> <call pos:start="808:19" pos:end="808:55"><name pos:start="808:19" pos:end="808:32">do_sigprocmask</name><argument_list pos:start="808:33" pos:end="808:55">(<argument pos:start="808:34" pos:end="808:36"><expr pos:start="808:34" pos:end="808:36"><name pos:start="808:34" pos:end="808:36">how</name></expr></argument>, <argument pos:start="808:39" pos:end="808:45"><expr pos:start="808:39" pos:end="808:45"><name pos:start="808:39" pos:end="808:45">set_ptr</name></expr></argument>, <argument pos:start="808:48" pos:end="808:54"><expr pos:start="808:48" pos:end="808:54"><operator pos:start="808:48" pos:end="808:48">&amp;</operator><name pos:start="808:49" pos:end="808:54">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="809:13" pos:end="3541:14"><if pos:start="809:13" pos:end="3541:14">if <condition pos:start="809:16" pos:end="809:39">(<expr pos:start="809:17" pos:end="809:38"><operator pos:start="809:17" pos:end="809:17">!</operator><call pos:start="809:18" pos:end="809:30"><name pos:start="809:18" pos:end="809:25">is_error</name><argument_list pos:start="809:26" pos:end="809:30">(<argument pos:start="809:27" pos:end="809:29"><expr pos:start="809:27" pos:end="809:29"><name pos:start="809:27" pos:end="809:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="809:32" pos:end="809:33">&amp;&amp;</operator> <name pos:start="809:35" pos:end="809:38">arg3</name></expr>)</condition> <block pos:start="809:41" pos:end="3541:14">{<block_content pos:start="810:17" pos:end="3541:14">
                <if_stmt pos:start="810:17" pos:end="811:32"><if pos:start="810:17" pos:end="811:32">if <condition pos:start="810:20" pos:end="810:85">(<expr pos:start="810:21" pos:end="810:84"><operator pos:start="810:21" pos:end="810:21">!</operator><operator pos:start="810:22" pos:end="810:22">(</operator><name pos:start="810:23" pos:end="810:23">p</name> <operator pos:start="810:25" pos:end="810:25">=</operator> <call pos:start="810:27" pos:end="810:83"><name pos:start="810:27" pos:end="810:35">lock_user</name><argument_list pos:start="810:36" pos:end="810:83">(<argument pos:start="810:37" pos:end="810:48"><expr pos:start="810:37" pos:end="810:48"><name pos:start="810:37" pos:end="810:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="810:51" pos:end="810:54"><expr pos:start="810:51" pos:end="810:54"><name pos:start="810:51" pos:end="810:54">arg3</name></expr></argument>, <argument pos:start="810:57" pos:end="810:79"><expr pos:start="810:57" pos:end="810:79"><sizeof pos:start="810:57" pos:end="810:79">sizeof<argument_list pos:start="810:63" pos:end="810:79">(<argument pos:start="810:64" pos:end="810:78"><expr pos:start="810:64" pos:end="810:78"><name pos:start="810:64" pos:end="810:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="810:82" pos:end="810:82"><expr pos:start="810:82" pos:end="810:82"><literal type="number" pos:start="810:82" pos:end="810:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="810:84" pos:end="810:84">)</operator></expr>)</condition><block type="pseudo" pos:start="811:21" pos:end="811:32"><block_content pos:start="811:21" pos:end="811:32">
                    <goto pos:start="811:21" pos:end="811:32">goto <name pos:start="811:26" pos:end="811:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="812:17" pos:end="812:54"><expr pos:start="812:17" pos:end="812:53"><call pos:start="812:17" pos:end="812:53"><name pos:start="812:17" pos:end="812:41">host_to_target_old_sigset</name><argument_list pos:start="812:42" pos:end="812:53">(<argument pos:start="812:43" pos:end="812:43"><expr pos:start="812:43" pos:end="812:43"><name pos:start="812:43" pos:end="812:43">p</name></expr></argument>, <argument pos:start="812:46" pos:end="812:52"><expr pos:start="812:46" pos:end="812:52"><operator pos:start="812:46" pos:end="812:46">&amp;</operator><name pos:start="812:47" pos:end="812:52">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="813:17" pos:end="816:0"><expr pos:start="813:17" pos:end="813:61"><call pos:start="813:17" pos:end="813:61"><name pos:start="813:17" pos:end="813:27">unlock_user</name><argument_list pos:start="813:28" pos:end="813:61">(<argument pos:start="813:29" pos:end="813:29"><expr pos:start="813:29" pos:end="813:29"><name pos:start="813:29" pos:end="813:29">p</name></expr></argument>, <argument pos:start="813:32" pos:end="813:35"><expr pos:start="813:32" pos:end="813:35"><name pos:start="813:32" pos:end="813:35">arg3</name></expr></argument>, <argument pos:start="813:38" pos:end="813:60"><expr pos:start="813:38" pos:end="813:60"><sizeof pos:start="813:38" pos:end="813:60">sizeof<argument_list pos:start="813:44" pos:end="813:60">(<argument pos:start="813:45" pos:end="813:59"><expr pos:start="813:45" pos:end="813:59"><name pos:start="813:45" pos:end="813:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="814:1" pos:end="814:6">#<cpp:directive pos:start="814:2" pos:end="814:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="815:1" pos:end="815:6">#<cpp:directive pos:start="815:2" pos:end="815:6">endif</cpp:directive></cpp:endif>
    <case pos:start="816:5" pos:end="816:34">case <expr pos:start="816:10" pos:end="816:33"><name pos:start="816:10" pos:end="816:33">TARGET_NR_rt_sigprocmask</name></expr>:</case>
        <block pos:start="817:9" pos:end="3541:14">{<block_content pos:start="818:13" pos:end="3541:14">
            <decl_stmt pos:start="818:13" pos:end="818:27"><decl pos:start="818:13" pos:end="818:26"><type pos:start="818:13" pos:end="818:15"><name pos:start="818:13" pos:end="818:15">int</name></type> <name pos:start="818:17" pos:end="818:19">how</name> <init pos:start="818:21" pos:end="818:26">= <expr pos:start="818:23" pos:end="818:26"><name pos:start="818:23" pos:end="818:26">arg1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="819:13" pos:end="819:43"><decl pos:start="819:13" pos:end="819:24"><type pos:start="819:13" pos:end="819:20"><name pos:start="819:13" pos:end="819:20">sigset_t</name></type> <name pos:start="819:22" pos:end="819:24">set</name></decl>, <decl pos:start="819:27" pos:end="819:32"><type ref="prev" pos:start="819:13" pos:end="819:20"/><name pos:start="819:27" pos:end="819:32">oldset</name></decl>, <decl pos:start="819:35" pos:end="819:42"><type ref="prev" pos:start="819:13" pos:end="819:20"><modifier pos:start="819:35" pos:end="819:35">*</modifier></type><name pos:start="819:36" pos:end="819:42">set_ptr</name></decl>;</decl_stmt>
            <if_stmt pos:start="820:13" pos:end="3541:14"><if pos:start="820:13" pos:end="3541:14">if <condition pos:start="820:16" pos:end="820:48">(<expr pos:start="820:17" pos:end="820:47"><name pos:start="820:17" pos:end="820:20">arg4</name> <operator pos:start="820:22" pos:end="820:23">!=</operator> <sizeof pos:start="820:25" pos:end="820:47">sizeof<argument_list pos:start="820:31" pos:end="820:47">(<argument pos:start="820:32" pos:end="820:46"><expr pos:start="820:32" pos:end="820:46"><name pos:start="820:32" pos:end="820:46">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="820:50" pos:end="3541:14">{<block_content pos:start="821:13" pos:end="3541:14">
            <if_stmt pos:start="821:13" pos:end="3541:14"><if pos:start="821:13" pos:end="3541:14">if <condition pos:start="821:16" pos:end="821:21">(<expr pos:start="821:17" pos:end="821:20"><name pos:start="821:17" pos:end="821:20">arg2</name></expr>)</condition> <block pos:start="821:23" pos:end="3541:14">{<block_content pos:start="822:17" pos:end="3541:14">
                <switch pos:start="822:17" pos:end="836:13">switch<condition pos:start="822:23" pos:end="822:27">(<expr pos:start="822:24" pos:end="822:26"><name pos:start="822:24" pos:end="822:26">how</name></expr>)</condition> <block pos:start="822:29" pos:end="836:13">{<block_content pos:start="823:17" pos:end="835:31">
                <case pos:start="823:17" pos:end="823:38">case <expr pos:start="823:22" pos:end="823:37"><name pos:start="823:22" pos:end="823:37">TARGET_SIG_BLOCK</name></expr>:</case>
                    <expr_stmt pos:start="824:21" pos:end="824:36"><expr pos:start="824:21" pos:end="824:35"><name pos:start="824:21" pos:end="824:23">how</name> <operator pos:start="824:25" pos:end="824:25">=</operator> <name pos:start="824:27" pos:end="824:35">SIG_BLOCK</name></expr>;</expr_stmt>
                <case pos:start="825:17" pos:end="825:40">case <expr pos:start="825:22" pos:end="825:39"><name pos:start="825:22" pos:end="825:39">TARGET_SIG_UNBLOCK</name></expr>:</case>
                    <expr_stmt pos:start="826:21" pos:end="826:38"><expr pos:start="826:21" pos:end="826:37"><name pos:start="826:21" pos:end="826:23">how</name> <operator pos:start="826:25" pos:end="826:25">=</operator> <name pos:start="826:27" pos:end="826:37">SIG_UNBLOCK</name></expr>;</expr_stmt>
                <case pos:start="827:17" pos:end="827:40">case <expr pos:start="827:22" pos:end="827:39"><name pos:start="827:22" pos:end="827:39">TARGET_SIG_SETMASK</name></expr>:</case>
                    <expr_stmt pos:start="828:21" pos:end="828:38"><expr pos:start="828:21" pos:end="828:37"><name pos:start="828:21" pos:end="828:23">how</name> <operator pos:start="828:25" pos:end="828:25">=</operator> <name pos:start="828:27" pos:end="828:37">SIG_SETMASK</name></expr>;</expr_stmt>
                <default pos:start="829:17" pos:end="829:24">default:</default>
                    <goto pos:start="830:21" pos:end="830:30">goto <name pos:start="830:26" pos:end="830:29">fail</name>;</goto>
                <if_stmt pos:start="831:17" pos:end="832:32"><if pos:start="831:17" pos:end="832:32">if <condition pos:start="831:20" pos:end="831:84">(<expr pos:start="831:21" pos:end="831:83"><operator pos:start="831:21" pos:end="831:21">!</operator><operator pos:start="831:22" pos:end="831:22">(</operator><name pos:start="831:23" pos:end="831:23">p</name> <operator pos:start="831:25" pos:end="831:25">=</operator> <call pos:start="831:27" pos:end="831:82"><name pos:start="831:27" pos:end="831:35">lock_user</name><argument_list pos:start="831:36" pos:end="831:82">(<argument pos:start="831:37" pos:end="831:47"><expr pos:start="831:37" pos:end="831:47"><name pos:start="831:37" pos:end="831:47">VERIFY_READ</name></expr></argument>, <argument pos:start="831:50" pos:end="831:53"><expr pos:start="831:50" pos:end="831:53"><name pos:start="831:50" pos:end="831:53">arg2</name></expr></argument>, <argument pos:start="831:56" pos:end="831:78"><expr pos:start="831:56" pos:end="831:78"><sizeof pos:start="831:56" pos:end="831:78">sizeof<argument_list pos:start="831:62" pos:end="831:78">(<argument pos:start="831:63" pos:end="831:77"><expr pos:start="831:63" pos:end="831:77"><name pos:start="831:63" pos:end="831:77">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="831:81" pos:end="831:81"><expr pos:start="831:81" pos:end="831:81"><literal type="number" pos:start="831:81" pos:end="831:81">1</literal></expr></argument>)</argument_list></call><operator pos:start="831:83" pos:end="831:83">)</operator></expr>)</condition><block type="pseudo" pos:start="832:21" pos:end="832:32"><block_content pos:start="832:21" pos:end="832:32">
                    <goto pos:start="832:21" pos:end="832:32">goto <name pos:start="832:26" pos:end="832:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="833:17" pos:end="833:47"><expr pos:start="833:17" pos:end="833:46"><call pos:start="833:17" pos:end="833:46"><name pos:start="833:17" pos:end="833:37">target_to_host_sigset</name><argument_list pos:start="833:38" pos:end="833:46">(<argument pos:start="833:39" pos:end="833:42"><expr pos:start="833:39" pos:end="833:42"><operator pos:start="833:39" pos:end="833:39">&amp;</operator><name pos:start="833:40" pos:end="833:42">set</name></expr></argument>, <argument pos:start="833:45" pos:end="833:45"><expr pos:start="833:45" pos:end="833:45"><name pos:start="833:45" pos:end="833:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="834:17" pos:end="834:40"><expr pos:start="834:17" pos:end="834:39"><call pos:start="834:17" pos:end="834:39"><name pos:start="834:17" pos:end="834:27">unlock_user</name><argument_list pos:start="834:28" pos:end="834:39">(<argument pos:start="834:29" pos:end="834:29"><expr pos:start="834:29" pos:end="834:29"><name pos:start="834:29" pos:end="834:29">p</name></expr></argument>, <argument pos:start="834:32" pos:end="834:35"><expr pos:start="834:32" pos:end="834:35"><name pos:start="834:32" pos:end="834:35">arg2</name></expr></argument>, <argument pos:start="834:38" pos:end="834:38"><expr pos:start="834:38" pos:end="834:38"><literal type="number" pos:start="834:38" pos:end="834:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="835:17" pos:end="835:31"><expr pos:start="835:17" pos:end="835:30"><name pos:start="835:17" pos:end="835:23">set_ptr</name> <operator pos:start="835:25" pos:end="835:25">=</operator> <operator pos:start="835:27" pos:end="835:27">&amp;</operator><name pos:start="835:28" pos:end="835:30">set</name></expr>;</expr_stmt>
            </block_content>}</block></switch> <if_stmt pos:start="836:15" pos:end="3541:14"><else pos:start="836:15" pos:end="3541:14">else <block pos:start="836:20" pos:end="3541:14">{<block_content pos:start="837:17" pos:end="3541:14">
                <expr_stmt pos:start="837:17" pos:end="837:24"><expr pos:start="837:17" pos:end="837:23"><name pos:start="837:17" pos:end="837:19">how</name> <operator pos:start="837:21" pos:end="837:21">=</operator> <literal type="number" pos:start="837:23" pos:end="837:23">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="838:17" pos:end="838:31"><expr pos:start="838:17" pos:end="838:30"><name pos:start="838:17" pos:end="838:23">set_ptr</name> <operator pos:start="838:25" pos:end="838:25">=</operator> <name pos:start="838:27" pos:end="838:30">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="839:13" pos:end="839:56"><expr pos:start="839:13" pos:end="839:55"><name pos:start="839:13" pos:end="839:15">ret</name> <operator pos:start="839:17" pos:end="839:17">=</operator> <call pos:start="839:19" pos:end="839:55"><name pos:start="839:19" pos:end="839:32">do_sigprocmask</name><argument_list pos:start="839:33" pos:end="839:55">(<argument pos:start="839:34" pos:end="839:36"><expr pos:start="839:34" pos:end="839:36"><name pos:start="839:34" pos:end="839:36">how</name></expr></argument>, <argument pos:start="839:39" pos:end="839:45"><expr pos:start="839:39" pos:end="839:45"><name pos:start="839:39" pos:end="839:45">set_ptr</name></expr></argument>, <argument pos:start="839:48" pos:end="839:54"><expr pos:start="839:48" pos:end="839:54"><operator pos:start="839:48" pos:end="839:48">&amp;</operator><name pos:start="839:49" pos:end="839:54">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="840:13" pos:end="3541:14"><if pos:start="840:13" pos:end="3541:14">if <condition pos:start="840:16" pos:end="840:39">(<expr pos:start="840:17" pos:end="840:38"><operator pos:start="840:17" pos:end="840:17">!</operator><call pos:start="840:18" pos:end="840:30"><name pos:start="840:18" pos:end="840:25">is_error</name><argument_list pos:start="840:26" pos:end="840:30">(<argument pos:start="840:27" pos:end="840:29"><expr pos:start="840:27" pos:end="840:29"><name pos:start="840:27" pos:end="840:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="840:32" pos:end="840:33">&amp;&amp;</operator> <name pos:start="840:35" pos:end="840:38">arg3</name></expr>)</condition> <block pos:start="840:41" pos:end="3541:14">{<block_content pos:start="841:17" pos:end="3541:14">
                <if_stmt pos:start="841:17" pos:end="842:32"><if pos:start="841:17" pos:end="842:32">if <condition pos:start="841:20" pos:end="841:85">(<expr pos:start="841:21" pos:end="841:84"><operator pos:start="841:21" pos:end="841:21">!</operator><operator pos:start="841:22" pos:end="841:22">(</operator><name pos:start="841:23" pos:end="841:23">p</name> <operator pos:start="841:25" pos:end="841:25">=</operator> <call pos:start="841:27" pos:end="841:83"><name pos:start="841:27" pos:end="841:35">lock_user</name><argument_list pos:start="841:36" pos:end="841:83">(<argument pos:start="841:37" pos:end="841:48"><expr pos:start="841:37" pos:end="841:48"><name pos:start="841:37" pos:end="841:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="841:51" pos:end="841:54"><expr pos:start="841:51" pos:end="841:54"><name pos:start="841:51" pos:end="841:54">arg3</name></expr></argument>, <argument pos:start="841:57" pos:end="841:79"><expr pos:start="841:57" pos:end="841:79"><sizeof pos:start="841:57" pos:end="841:79">sizeof<argument_list pos:start="841:63" pos:end="841:79">(<argument pos:start="841:64" pos:end="841:78"><expr pos:start="841:64" pos:end="841:78"><name pos:start="841:64" pos:end="841:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="841:82" pos:end="841:82"><expr pos:start="841:82" pos:end="841:82"><literal type="number" pos:start="841:82" pos:end="841:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="841:84" pos:end="841:84">)</operator></expr>)</condition><block type="pseudo" pos:start="842:21" pos:end="842:32"><block_content pos:start="842:21" pos:end="842:32">
                    <goto pos:start="842:21" pos:end="842:32">goto <name pos:start="842:26" pos:end="842:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="843:17" pos:end="843:50"><expr pos:start="843:17" pos:end="843:49"><call pos:start="843:17" pos:end="843:49"><name pos:start="843:17" pos:end="843:37">host_to_target_sigset</name><argument_list pos:start="843:38" pos:end="843:49">(<argument pos:start="843:39" pos:end="843:39"><expr pos:start="843:39" pos:end="843:39"><name pos:start="843:39" pos:end="843:39">p</name></expr></argument>, <argument pos:start="843:42" pos:end="843:48"><expr pos:start="843:42" pos:end="843:48"><operator pos:start="843:42" pos:end="843:42">&amp;</operator><name pos:start="843:43" pos:end="843:48">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="844:17" pos:end="846:0"><expr pos:start="844:17" pos:end="844:61"><call pos:start="844:17" pos:end="844:61"><name pos:start="844:17" pos:end="844:27">unlock_user</name><argument_list pos:start="844:28" pos:end="844:61">(<argument pos:start="844:29" pos:end="844:29"><expr pos:start="844:29" pos:end="844:29"><name pos:start="844:29" pos:end="844:29">p</name></expr></argument>, <argument pos:start="844:32" pos:end="844:35"><expr pos:start="844:32" pos:end="844:35"><name pos:start="844:32" pos:end="844:35">arg3</name></expr></argument>, <argument pos:start="844:38" pos:end="844:60"><expr pos:start="844:38" pos:end="844:60"><sizeof pos:start="844:38" pos:end="844:60">sizeof<argument_list pos:start="844:44" pos:end="844:60">(<argument pos:start="844:45" pos:end="844:59"><expr pos:start="844:45" pos:end="844:59"><name pos:start="844:45" pos:end="844:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="845:1" pos:end="845:27">#<cpp:directive pos:start="845:2" pos:end="845:6">ifdef</cpp:directive> <name pos:start="845:8" pos:end="845:27">TARGET_NR_sigpending</name></cpp:ifdef>
    <case pos:start="846:5" pos:end="846:30">case <expr pos:start="846:10" pos:end="846:29"><name pos:start="846:10" pos:end="846:29">TARGET_NR_sigpending</name></expr>:</case>
        <block pos:start="847:9" pos:end="3541:14">{<block_content pos:start="848:13" pos:end="3541:14">
            <decl_stmt pos:start="848:13" pos:end="848:25"><decl pos:start="848:13" pos:end="848:24"><type pos:start="848:13" pos:end="848:20"><name pos:start="848:13" pos:end="848:20">sigset_t</name></type> <name pos:start="848:22" pos:end="848:24">set</name></decl>;</decl_stmt>
            <expr_stmt pos:start="849:13" pos:end="849:46"><expr pos:start="849:13" pos:end="849:45"><name pos:start="849:13" pos:end="849:15">ret</name> <operator pos:start="849:17" pos:end="849:17">=</operator> <call pos:start="849:19" pos:end="849:45"><name pos:start="849:19" pos:end="849:27">get_errno</name><argument_list pos:start="849:28" pos:end="849:45">(<argument pos:start="849:29" pos:end="849:44"><expr pos:start="849:29" pos:end="849:44"><call pos:start="849:29" pos:end="849:44"><name pos:start="849:29" pos:end="849:38">sigpending</name><argument_list pos:start="849:39" pos:end="849:44">(<argument pos:start="849:40" pos:end="849:43"><expr pos:start="849:40" pos:end="849:43"><operator pos:start="849:40" pos:end="849:40">&amp;</operator><name pos:start="849:41" pos:end="849:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="850:13" pos:end="3541:14"><if pos:start="850:13" pos:end="3541:14">if <condition pos:start="850:16" pos:end="850:31">(<expr pos:start="850:17" pos:end="850:30"><operator pos:start="850:17" pos:end="850:17">!</operator><call pos:start="850:18" pos:end="850:30"><name pos:start="850:18" pos:end="850:25">is_error</name><argument_list pos:start="850:26" pos:end="850:30">(<argument pos:start="850:27" pos:end="850:29"><expr pos:start="850:27" pos:end="850:29"><name pos:start="850:27" pos:end="850:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="850:33" pos:end="3541:14">{<block_content pos:start="851:17" pos:end="3541:14">
                <if_stmt pos:start="851:17" pos:end="852:32"><if pos:start="851:17" pos:end="852:32">if <condition pos:start="851:20" pos:end="851:85">(<expr pos:start="851:21" pos:end="851:84"><operator pos:start="851:21" pos:end="851:21">!</operator><operator pos:start="851:22" pos:end="851:22">(</operator><name pos:start="851:23" pos:end="851:23">p</name> <operator pos:start="851:25" pos:end="851:25">=</operator> <call pos:start="851:27" pos:end="851:83"><name pos:start="851:27" pos:end="851:35">lock_user</name><argument_list pos:start="851:36" pos:end="851:83">(<argument pos:start="851:37" pos:end="851:48"><expr pos:start="851:37" pos:end="851:48"><name pos:start="851:37" pos:end="851:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="851:51" pos:end="851:54"><expr pos:start="851:51" pos:end="851:54"><name pos:start="851:51" pos:end="851:54">arg1</name></expr></argument>, <argument pos:start="851:57" pos:end="851:79"><expr pos:start="851:57" pos:end="851:79"><sizeof pos:start="851:57" pos:end="851:79">sizeof<argument_list pos:start="851:63" pos:end="851:79">(<argument pos:start="851:64" pos:end="851:78"><expr pos:start="851:64" pos:end="851:78"><name pos:start="851:64" pos:end="851:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="851:82" pos:end="851:82"><expr pos:start="851:82" pos:end="851:82"><literal type="number" pos:start="851:82" pos:end="851:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="851:84" pos:end="851:84">)</operator></expr>)</condition><block type="pseudo" pos:start="852:21" pos:end="852:32"><block_content pos:start="852:21" pos:end="852:32">
                    <goto pos:start="852:21" pos:end="852:32">goto <name pos:start="852:26" pos:end="852:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="853:17" pos:end="853:51"><expr pos:start="853:17" pos:end="853:50"><call pos:start="853:17" pos:end="853:50"><name pos:start="853:17" pos:end="853:41">host_to_target_old_sigset</name><argument_list pos:start="853:42" pos:end="853:50">(<argument pos:start="853:43" pos:end="853:43"><expr pos:start="853:43" pos:end="853:43"><name pos:start="853:43" pos:end="853:43">p</name></expr></argument>, <argument pos:start="853:46" pos:end="853:49"><expr pos:start="853:46" pos:end="853:49"><operator pos:start="853:46" pos:end="853:46">&amp;</operator><name pos:start="853:47" pos:end="853:49">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="854:17" pos:end="856:0"><expr pos:start="854:17" pos:end="854:61"><call pos:start="854:17" pos:end="854:61"><name pos:start="854:17" pos:end="854:27">unlock_user</name><argument_list pos:start="854:28" pos:end="854:61">(<argument pos:start="854:29" pos:end="854:29"><expr pos:start="854:29" pos:end="854:29"><name pos:start="854:29" pos:end="854:29">p</name></expr></argument>, <argument pos:start="854:32" pos:end="854:35"><expr pos:start="854:32" pos:end="854:35"><name pos:start="854:32" pos:end="854:35">arg1</name></expr></argument>, <argument pos:start="854:38" pos:end="854:60"><expr pos:start="854:38" pos:end="854:60"><sizeof pos:start="854:38" pos:end="854:60">sizeof<argument_list pos:start="854:44" pos:end="854:60">(<argument pos:start="854:45" pos:end="854:59"><expr pos:start="854:45" pos:end="854:59"><name pos:start="854:45" pos:end="854:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="855:1" pos:end="855:6">#<cpp:directive pos:start="855:2" pos:end="855:6">endif</cpp:directive></cpp:endif>
    <case pos:start="856:5" pos:end="856:33">case <expr pos:start="856:10" pos:end="856:32"><name pos:start="856:10" pos:end="856:32">TARGET_NR_rt_sigpending</name></expr>:</case>
        <block pos:start="857:9" pos:end="3541:14">{<block_content pos:start="858:13" pos:end="3541:14">
            <decl_stmt pos:start="858:13" pos:end="858:25"><decl pos:start="858:13" pos:end="858:24"><type pos:start="858:13" pos:end="858:20"><name pos:start="858:13" pos:end="858:20">sigset_t</name></type> <name pos:start="858:22" pos:end="858:24">set</name></decl>;</decl_stmt>
            <comment type="block" pos:start="859:13" pos:end="863:15">/* Yes, this check is &gt;, not != like most. We follow the kernel's
             * logic and it does it like this because it implements
             * NR_sigpending through the same code path, and in that case
             * the old_sigset_t is smaller in size.
             */</comment>
            <if_stmt pos:start="864:13" pos:end="3541:14"><if pos:start="864:13" pos:end="3541:14">if <condition pos:start="864:16" pos:end="864:47">(<expr pos:start="864:17" pos:end="864:46"><name pos:start="864:17" pos:end="864:20">arg2</name> <operator pos:start="864:22" pos:end="864:22">&gt;</operator> <sizeof pos:start="864:24" pos:end="864:46">sizeof<argument_list pos:start="864:30" pos:end="864:46">(<argument pos:start="864:31" pos:end="864:45"><expr pos:start="864:31" pos:end="864:45"><name pos:start="864:31" pos:end="864:45">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="864:49" pos:end="3541:14">{<block_content pos:start="865:13" pos:end="3541:14">
            <expr_stmt pos:start="865:13" pos:end="865:46"><expr pos:start="865:13" pos:end="865:45"><name pos:start="865:13" pos:end="865:15">ret</name> <operator pos:start="865:17" pos:end="865:17">=</operator> <call pos:start="865:19" pos:end="865:45"><name pos:start="865:19" pos:end="865:27">get_errno</name><argument_list pos:start="865:28" pos:end="865:45">(<argument pos:start="865:29" pos:end="865:44"><expr pos:start="865:29" pos:end="865:44"><call pos:start="865:29" pos:end="865:44"><name pos:start="865:29" pos:end="865:38">sigpending</name><argument_list pos:start="865:39" pos:end="865:44">(<argument pos:start="865:40" pos:end="865:43"><expr pos:start="865:40" pos:end="865:43"><operator pos:start="865:40" pos:end="865:40">&amp;</operator><name pos:start="865:41" pos:end="865:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="866:13" pos:end="3541:14"><if pos:start="866:13" pos:end="3541:14">if <condition pos:start="866:16" pos:end="866:31">(<expr pos:start="866:17" pos:end="866:30"><operator pos:start="866:17" pos:end="866:17">!</operator><call pos:start="866:18" pos:end="866:30"><name pos:start="866:18" pos:end="866:25">is_error</name><argument_list pos:start="866:26" pos:end="866:30">(<argument pos:start="866:27" pos:end="866:29"><expr pos:start="866:27" pos:end="866:29"><name pos:start="866:27" pos:end="866:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="866:33" pos:end="3541:14">{<block_content pos:start="867:17" pos:end="3541:14">
                <if_stmt pos:start="867:17" pos:end="868:32"><if pos:start="867:17" pos:end="868:32">if <condition pos:start="867:20" pos:end="867:85">(<expr pos:start="867:21" pos:end="867:84"><operator pos:start="867:21" pos:end="867:21">!</operator><operator pos:start="867:22" pos:end="867:22">(</operator><name pos:start="867:23" pos:end="867:23">p</name> <operator pos:start="867:25" pos:end="867:25">=</operator> <call pos:start="867:27" pos:end="867:83"><name pos:start="867:27" pos:end="867:35">lock_user</name><argument_list pos:start="867:36" pos:end="867:83">(<argument pos:start="867:37" pos:end="867:48"><expr pos:start="867:37" pos:end="867:48"><name pos:start="867:37" pos:end="867:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="867:51" pos:end="867:54"><expr pos:start="867:51" pos:end="867:54"><name pos:start="867:51" pos:end="867:54">arg1</name></expr></argument>, <argument pos:start="867:57" pos:end="867:79"><expr pos:start="867:57" pos:end="867:79"><sizeof pos:start="867:57" pos:end="867:79">sizeof<argument_list pos:start="867:63" pos:end="867:79">(<argument pos:start="867:64" pos:end="867:78"><expr pos:start="867:64" pos:end="867:78"><name pos:start="867:64" pos:end="867:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="867:82" pos:end="867:82"><expr pos:start="867:82" pos:end="867:82"><literal type="number" pos:start="867:82" pos:end="867:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="867:84" pos:end="867:84">)</operator></expr>)</condition><block type="pseudo" pos:start="868:21" pos:end="868:32"><block_content pos:start="868:21" pos:end="868:32">
                    <goto pos:start="868:21" pos:end="868:32">goto <name pos:start="868:26" pos:end="868:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="869:17" pos:end="869:47"><expr pos:start="869:17" pos:end="869:46"><call pos:start="869:17" pos:end="869:46"><name pos:start="869:17" pos:end="869:37">host_to_target_sigset</name><argument_list pos:start="869:38" pos:end="869:46">(<argument pos:start="869:39" pos:end="869:39"><expr pos:start="869:39" pos:end="869:39"><name pos:start="869:39" pos:end="869:39">p</name></expr></argument>, <argument pos:start="869:42" pos:end="869:45"><expr pos:start="869:42" pos:end="869:45"><operator pos:start="869:42" pos:end="869:42">&amp;</operator><name pos:start="869:43" pos:end="869:45">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="870:17" pos:end="872:0"><expr pos:start="870:17" pos:end="870:61"><call pos:start="870:17" pos:end="870:61"><name pos:start="870:17" pos:end="870:27">unlock_user</name><argument_list pos:start="870:28" pos:end="870:61">(<argument pos:start="870:29" pos:end="870:29"><expr pos:start="870:29" pos:end="870:29"><name pos:start="870:29" pos:end="870:29">p</name></expr></argument>, <argument pos:start="870:32" pos:end="870:35"><expr pos:start="870:32" pos:end="870:35"><name pos:start="870:32" pos:end="870:35">arg1</name></expr></argument>, <argument pos:start="870:38" pos:end="870:60"><expr pos:start="870:38" pos:end="870:60"><sizeof pos:start="870:38" pos:end="870:60">sizeof<argument_list pos:start="870:44" pos:end="870:60">(<argument pos:start="870:45" pos:end="870:59"><expr pos:start="870:45" pos:end="870:59"><name pos:start="870:45" pos:end="870:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="871:1" pos:end="871:27">#<cpp:directive pos:start="871:2" pos:end="871:6">ifdef</cpp:directive> <name pos:start="871:8" pos:end="871:27">TARGET_NR_sigsuspend</name></cpp:ifdef>
    <case pos:start="872:5" pos:end="872:30">case <expr pos:start="872:10" pos:end="872:29"><name pos:start="872:10" pos:end="872:29">TARGET_NR_sigsuspend</name></expr>:</case>
        <block pos:start="873:9" pos:end="3541:14">{<block_content pos:start="874:13" pos:end="3541:14">
            <decl_stmt pos:start="874:13" pos:end="876:0"><decl pos:start="874:13" pos:end="874:39"><type pos:start="874:13" pos:end="874:23"><name pos:start="874:13" pos:end="874:21">TaskState</name> <modifier pos:start="874:23" pos:end="874:23">*</modifier></type><name pos:start="874:24" pos:end="874:25">ts</name> <init pos:start="874:27" pos:end="874:39">= <expr pos:start="874:29" pos:end="874:39"><name pos:start="874:29" pos:end="874:39"><name pos:start="874:29" pos:end="874:31">cpu</name><operator pos:start="874:32" pos:end="874:33">-&gt;</operator><name pos:start="874:34" pos:end="874:39">opaque</name></name></expr></init></decl>;</decl_stmt>
<cpp:if pos:start="875:1" pos:end="875:25">#<cpp:directive pos:start="875:2" pos:end="875:3">if</cpp:directive> <expr pos:start="875:5" pos:end="875:25"><call pos:start="875:5" pos:end="875:25"><name pos:start="875:5" pos:end="875:11">defined</name><argument_list pos:start="875:12" pos:end="875:25">(<argument pos:start="875:13" pos:end="875:24"><expr pos:start="875:13" pos:end="875:24"><name pos:start="875:13" pos:end="875:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <decl_stmt pos:start="876:13" pos:end="876:34"><decl pos:start="876:13" pos:end="876:33"><type pos:start="876:13" pos:end="876:21"><name pos:start="876:13" pos:end="876:21">abi_ulong</name></type> <name pos:start="876:23" pos:end="876:26">mask</name> <init pos:start="876:28" pos:end="876:33">= <expr pos:start="876:30" pos:end="876:33"><name pos:start="876:30" pos:end="876:33">arg1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="877:13" pos:end="879:0"><expr pos:start="877:13" pos:end="877:66"><call pos:start="877:13" pos:end="877:66"><name pos:start="877:13" pos:end="877:37">target_to_host_old_sigset</name><argument_list pos:start="877:38" pos:end="877:66">(<argument pos:start="877:39" pos:end="877:58"><expr pos:start="877:39" pos:end="877:58"><operator pos:start="877:39" pos:end="877:39">&amp;</operator><name pos:start="877:40" pos:end="877:58"><name pos:start="877:40" pos:end="877:41">ts</name><operator pos:start="877:42" pos:end="877:43">-&gt;</operator><name pos:start="877:44" pos:end="877:58">sigsuspend_mask</name></name></expr></argument>, <argument pos:start="877:61" pos:end="877:65"><expr pos:start="877:61" pos:end="877:65"><operator pos:start="877:61" pos:end="877:61">&amp;</operator><name pos:start="877:62" pos:end="877:65">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="878:1" pos:end="878:5">#<cpp:directive pos:start="878:2" pos:end="878:5">else</cpp:directive></cpp:else>
            <if_stmt pos:start="879:13" pos:end="880:28"><if pos:start="879:13" pos:end="880:28">if <condition pos:start="879:16" pos:end="879:80">(<expr pos:start="879:17" pos:end="879:79"><operator pos:start="879:17" pos:end="879:17">!</operator><operator pos:start="879:18" pos:end="879:18">(</operator><name pos:start="879:19" pos:end="879:19">p</name> <operator pos:start="879:21" pos:end="879:21">=</operator> <call pos:start="879:23" pos:end="879:78"><name pos:start="879:23" pos:end="879:31">lock_user</name><argument_list pos:start="879:32" pos:end="879:78">(<argument pos:start="879:33" pos:end="879:43"><expr pos:start="879:33" pos:end="879:43"><name pos:start="879:33" pos:end="879:43">VERIFY_READ</name></expr></argument>, <argument pos:start="879:46" pos:end="879:49"><expr pos:start="879:46" pos:end="879:49"><name pos:start="879:46" pos:end="879:49">arg1</name></expr></argument>, <argument pos:start="879:52" pos:end="879:74"><expr pos:start="879:52" pos:end="879:74"><sizeof pos:start="879:52" pos:end="879:74">sizeof<argument_list pos:start="879:58" pos:end="879:74">(<argument pos:start="879:59" pos:end="879:73"><expr pos:start="879:59" pos:end="879:73"><name pos:start="879:59" pos:end="879:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="879:77" pos:end="879:77"><expr pos:start="879:77" pos:end="879:77"><literal type="number" pos:start="879:77" pos:end="879:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="879:79" pos:end="879:79">)</operator></expr>)</condition><block type="pseudo" pos:start="880:17" pos:end="880:28"><block_content pos:start="880:17" pos:end="880:28">
                <goto pos:start="880:17" pos:end="880:28">goto <name pos:start="880:22" pos:end="880:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="881:13" pos:end="881:63"><expr pos:start="881:13" pos:end="881:62"><call pos:start="881:13" pos:end="881:62"><name pos:start="881:13" pos:end="881:37">target_to_host_old_sigset</name><argument_list pos:start="881:38" pos:end="881:62">(<argument pos:start="881:39" pos:end="881:58"><expr pos:start="881:39" pos:end="881:58"><operator pos:start="881:39" pos:end="881:39">&amp;</operator><name pos:start="881:40" pos:end="881:58"><name pos:start="881:40" pos:end="881:41">ts</name><operator pos:start="881:42" pos:end="881:43">-&gt;</operator><name pos:start="881:44" pos:end="881:58">sigsuspend_mask</name></name></expr></argument>, <argument pos:start="881:61" pos:end="881:61"><expr pos:start="881:61" pos:end="881:61"><name pos:start="881:61" pos:end="881:61">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="882:13" pos:end="884:0"><expr pos:start="882:13" pos:end="882:35"><call pos:start="882:13" pos:end="882:35"><name pos:start="882:13" pos:end="882:23">unlock_user</name><argument_list pos:start="882:24" pos:end="882:35">(<argument pos:start="882:25" pos:end="882:25"><expr pos:start="882:25" pos:end="882:25"><name pos:start="882:25" pos:end="882:25">p</name></expr></argument>, <argument pos:start="882:28" pos:end="882:31"><expr pos:start="882:28" pos:end="882:31"><name pos:start="882:28" pos:end="882:31">arg1</name></expr></argument>, <argument pos:start="882:34" pos:end="882:34"><expr pos:start="882:34" pos:end="882:34"><literal type="number" pos:start="882:34" pos:end="882:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="883:1" pos:end="883:6">#<cpp:directive pos:start="883:2" pos:end="883:6">endif</cpp:directive></cpp:endif>
            <expr_stmt pos:start="884:13" pos:end="885:63"><expr pos:start="884:13" pos:end="885:62"><name pos:start="884:13" pos:end="884:15">ret</name> <operator pos:start="884:17" pos:end="884:17">=</operator> <call pos:start="884:19" pos:end="885:62"><name pos:start="884:19" pos:end="884:27">get_errno</name><argument_list pos:start="884:28" pos:end="885:62">(<argument pos:start="884:29" pos:end="885:61"><expr pos:start="884:29" pos:end="885:61"><call pos:start="884:29" pos:end="885:61"><name pos:start="884:29" pos:end="884:46">safe_rt_sigsuspend</name><argument_list pos:start="884:47" pos:end="885:61">(<argument pos:start="884:48" pos:end="884:67"><expr pos:start="884:48" pos:end="884:67"><operator pos:start="884:48" pos:end="884:48">&amp;</operator><name pos:start="884:49" pos:end="884:67"><name pos:start="884:49" pos:end="884:50">ts</name><operator pos:start="884:51" pos:end="884:52">-&gt;</operator><name pos:start="884:53" pos:end="884:67">sigsuspend_mask</name></name></expr></argument>,
                                               <argument pos:start="885:48" pos:end="885:60"><expr pos:start="885:48" pos:end="885:60"><name pos:start="885:48" pos:end="885:60">SIGSET_T_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="886:13" pos:end="3541:14"><if pos:start="886:13" pos:end="3541:14">if <condition pos:start="886:16" pos:end="886:43">(<expr pos:start="886:17" pos:end="886:42"><name pos:start="886:17" pos:end="886:19">ret</name> <operator pos:start="886:21" pos:end="886:22">!=</operator> <operator pos:start="886:24" pos:end="886:24">-</operator><name pos:start="886:25" pos:end="886:42">TARGET_ERESTARTSYS</name></expr>)</condition> <block pos:start="886:45" pos:end="3541:14">{<block_content pos:start="887:17" pos:end="3541:14">
                <expr_stmt pos:start="887:17" pos:end="889:0"><expr pos:start="887:17" pos:end="887:37"><name pos:start="887:17" pos:end="887:33"><name pos:start="887:17" pos:end="887:18">ts</name><operator pos:start="887:19" pos:end="887:20">-&gt;</operator><name pos:start="887:21" pos:end="887:33">in_sigsuspend</name></name> <operator pos:start="887:35" pos:end="887:35">=</operator> <literal type="number" pos:start="887:37" pos:end="887:37">1</literal></expr>;</expr_stmt>
<cpp:endif pos:start="888:1" pos:end="888:6">#<cpp:directive pos:start="888:2" pos:end="888:6">endif</cpp:directive></cpp:endif>
    <case pos:start="889:5" pos:end="889:33">case <expr pos:start="889:10" pos:end="889:32"><name pos:start="889:10" pos:end="889:32">TARGET_NR_rt_sigsuspend</name></expr>:</case>
        <block pos:start="890:9" pos:end="3541:14">{<block_content pos:start="891:13" pos:end="3541:14">
            <decl_stmt pos:start="891:13" pos:end="891:40"><decl pos:start="891:13" pos:end="891:39"><type pos:start="891:13" pos:end="891:23"><name pos:start="891:13" pos:end="891:21">TaskState</name> <modifier pos:start="891:23" pos:end="891:23">*</modifier></type><name pos:start="891:24" pos:end="891:25">ts</name> <init pos:start="891:27" pos:end="891:39">= <expr pos:start="891:29" pos:end="891:39"><name pos:start="891:29" pos:end="891:39"><name pos:start="891:29" pos:end="891:31">cpu</name><operator pos:start="891:32" pos:end="891:33">-&gt;</operator><name pos:start="891:34" pos:end="891:39">opaque</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="892:13" pos:end="3541:14"><if pos:start="892:13" pos:end="3541:14">if <condition pos:start="892:16" pos:end="892:48">(<expr pos:start="892:17" pos:end="892:47"><name pos:start="892:17" pos:end="892:20">arg2</name> <operator pos:start="892:22" pos:end="892:23">!=</operator> <sizeof pos:start="892:25" pos:end="892:47">sizeof<argument_list pos:start="892:31" pos:end="892:47">(<argument pos:start="892:32" pos:end="892:46"><expr pos:start="892:32" pos:end="892:46"><name pos:start="892:32" pos:end="892:46">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="892:50" pos:end="3541:14">{<block_content pos:start="893:13" pos:end="3541:14">
            <if_stmt pos:start="893:13" pos:end="894:28"><if pos:start="893:13" pos:end="894:28">if <condition pos:start="893:16" pos:end="893:80">(<expr pos:start="893:17" pos:end="893:79"><operator pos:start="893:17" pos:end="893:17">!</operator><operator pos:start="893:18" pos:end="893:18">(</operator><name pos:start="893:19" pos:end="893:19">p</name> <operator pos:start="893:21" pos:end="893:21">=</operator> <call pos:start="893:23" pos:end="893:78"><name pos:start="893:23" pos:end="893:31">lock_user</name><argument_list pos:start="893:32" pos:end="893:78">(<argument pos:start="893:33" pos:end="893:43"><expr pos:start="893:33" pos:end="893:43"><name pos:start="893:33" pos:end="893:43">VERIFY_READ</name></expr></argument>, <argument pos:start="893:46" pos:end="893:49"><expr pos:start="893:46" pos:end="893:49"><name pos:start="893:46" pos:end="893:49">arg1</name></expr></argument>, <argument pos:start="893:52" pos:end="893:74"><expr pos:start="893:52" pos:end="893:74"><sizeof pos:start="893:52" pos:end="893:74">sizeof<argument_list pos:start="893:58" pos:end="893:74">(<argument pos:start="893:59" pos:end="893:73"><expr pos:start="893:59" pos:end="893:73"><name pos:start="893:59" pos:end="893:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="893:77" pos:end="893:77"><expr pos:start="893:77" pos:end="893:77"><literal type="number" pos:start="893:77" pos:end="893:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="893:79" pos:end="893:79">)</operator></expr>)</condition><block type="pseudo" pos:start="894:17" pos:end="894:28"><block_content pos:start="894:17" pos:end="894:28">
                <goto pos:start="894:17" pos:end="894:28">goto <name pos:start="894:22" pos:end="894:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="895:13" pos:end="895:59"><expr pos:start="895:13" pos:end="895:58"><call pos:start="895:13" pos:end="895:58"><name pos:start="895:13" pos:end="895:33">target_to_host_sigset</name><argument_list pos:start="895:34" pos:end="895:58">(<argument pos:start="895:35" pos:end="895:54"><expr pos:start="895:35" pos:end="895:54"><operator pos:start="895:35" pos:end="895:35">&amp;</operator><name pos:start="895:36" pos:end="895:54"><name pos:start="895:36" pos:end="895:37">ts</name><operator pos:start="895:38" pos:end="895:39">-&gt;</operator><name pos:start="895:40" pos:end="895:54">sigsuspend_mask</name></name></expr></argument>, <argument pos:start="895:57" pos:end="895:57"><expr pos:start="895:57" pos:end="895:57"><name pos:start="895:57" pos:end="895:57">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="896:13" pos:end="896:36"><expr pos:start="896:13" pos:end="896:35"><call pos:start="896:13" pos:end="896:35"><name pos:start="896:13" pos:end="896:23">unlock_user</name><argument_list pos:start="896:24" pos:end="896:35">(<argument pos:start="896:25" pos:end="896:25"><expr pos:start="896:25" pos:end="896:25"><name pos:start="896:25" pos:end="896:25">p</name></expr></argument>, <argument pos:start="896:28" pos:end="896:31"><expr pos:start="896:28" pos:end="896:31"><name pos:start="896:28" pos:end="896:31">arg1</name></expr></argument>, <argument pos:start="896:34" pos:end="896:34"><expr pos:start="896:34" pos:end="896:34"><literal type="number" pos:start="896:34" pos:end="896:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="897:13" pos:end="898:63"><expr pos:start="897:13" pos:end="898:62"><name pos:start="897:13" pos:end="897:15">ret</name> <operator pos:start="897:17" pos:end="897:17">=</operator> <call pos:start="897:19" pos:end="898:62"><name pos:start="897:19" pos:end="897:27">get_errno</name><argument_list pos:start="897:28" pos:end="898:62">(<argument pos:start="897:29" pos:end="898:61"><expr pos:start="897:29" pos:end="898:61"><call pos:start="897:29" pos:end="898:61"><name pos:start="897:29" pos:end="897:46">safe_rt_sigsuspend</name><argument_list pos:start="897:47" pos:end="898:61">(<argument pos:start="897:48" pos:end="897:67"><expr pos:start="897:48" pos:end="897:67"><operator pos:start="897:48" pos:end="897:48">&amp;</operator><name pos:start="897:49" pos:end="897:67"><name pos:start="897:49" pos:end="897:50">ts</name><operator pos:start="897:51" pos:end="897:52">-&gt;</operator><name pos:start="897:53" pos:end="897:67">sigsuspend_mask</name></name></expr></argument>,
                                               <argument pos:start="898:48" pos:end="898:60"><expr pos:start="898:48" pos:end="898:60"><name pos:start="898:48" pos:end="898:60">SIGSET_T_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="899:13" pos:end="3541:14"><if pos:start="899:13" pos:end="3541:14">if <condition pos:start="899:16" pos:end="899:43">(<expr pos:start="899:17" pos:end="899:42"><name pos:start="899:17" pos:end="899:19">ret</name> <operator pos:start="899:21" pos:end="899:22">!=</operator> <operator pos:start="899:24" pos:end="899:24">-</operator><name pos:start="899:25" pos:end="899:42">TARGET_ERESTARTSYS</name></expr>)</condition> <block pos:start="899:45" pos:end="3541:14">{<block_content pos:start="900:17" pos:end="3541:14">
                <expr_stmt pos:start="900:17" pos:end="900:38"><expr pos:start="900:17" pos:end="900:37"><name pos:start="900:17" pos:end="900:33"><name pos:start="900:17" pos:end="900:18">ts</name><operator pos:start="900:19" pos:end="900:20">-&gt;</operator><name pos:start="900:21" pos:end="900:33">in_sigsuspend</name></name> <operator pos:start="900:35" pos:end="900:35">=</operator> <literal type="number" pos:start="900:37" pos:end="900:37">1</literal></expr>;</expr_stmt>
    <case pos:start="901:5" pos:end="901:35">case <expr pos:start="901:10" pos:end="901:34"><name pos:start="901:10" pos:end="901:34">TARGET_NR_rt_sigtimedwait</name></expr>:</case>
        <block pos:start="902:9" pos:end="3541:14">{<block_content pos:start="903:13" pos:end="3541:14">
            <decl_stmt pos:start="903:13" pos:end="903:25"><decl pos:start="903:13" pos:end="903:24"><type pos:start="903:13" pos:end="903:20"><name pos:start="903:13" pos:end="903:20">sigset_t</name></type> <name pos:start="903:22" pos:end="903:24">set</name></decl>;</decl_stmt>
            <decl_stmt pos:start="904:13" pos:end="904:39"><decl pos:start="904:13" pos:end="904:31"><type pos:start="904:13" pos:end="904:27"><name pos:start="904:13" pos:end="904:27"><name pos:start="904:13" pos:end="904:18">struct</name> <name pos:start="904:20" pos:end="904:27">timespec</name></name></type> <name pos:start="904:29" pos:end="904:31">uts</name></decl>, <decl pos:start="904:34" pos:end="904:38"><type ref="prev" pos:start="904:13" pos:end="904:27"><modifier pos:start="904:34" pos:end="904:34">*</modifier></type><name pos:start="904:35" pos:end="904:38">puts</name></decl>;</decl_stmt>
            <decl_stmt pos:start="905:13" pos:end="905:28"><decl pos:start="905:13" pos:end="905:27"><type pos:start="905:13" pos:end="905:21"><name pos:start="905:13" pos:end="905:21">siginfo_t</name></type> <name pos:start="905:23" pos:end="905:27">uinfo</name></decl>;</decl_stmt>
            <if_stmt pos:start="906:13" pos:end="3541:14"><if pos:start="906:13" pos:end="3541:14">if <condition pos:start="906:16" pos:end="906:48">(<expr pos:start="906:17" pos:end="906:47"><name pos:start="906:17" pos:end="906:20">arg4</name> <operator pos:start="906:22" pos:end="906:23">!=</operator> <sizeof pos:start="906:25" pos:end="906:47">sizeof<argument_list pos:start="906:31" pos:end="906:47">(<argument pos:start="906:32" pos:end="906:46"><expr pos:start="906:32" pos:end="906:46"><name pos:start="906:32" pos:end="906:46">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="906:50" pos:end="3541:14">{<block_content pos:start="907:13" pos:end="3541:14">
            <if_stmt pos:start="907:13" pos:end="908:28"><if pos:start="907:13" pos:end="908:28">if <condition pos:start="907:16" pos:end="907:80">(<expr pos:start="907:17" pos:end="907:79"><operator pos:start="907:17" pos:end="907:17">!</operator><operator pos:start="907:18" pos:end="907:18">(</operator><name pos:start="907:19" pos:end="907:19">p</name> <operator pos:start="907:21" pos:end="907:21">=</operator> <call pos:start="907:23" pos:end="907:78"><name pos:start="907:23" pos:end="907:31">lock_user</name><argument_list pos:start="907:32" pos:end="907:78">(<argument pos:start="907:33" pos:end="907:43"><expr pos:start="907:33" pos:end="907:43"><name pos:start="907:33" pos:end="907:43">VERIFY_READ</name></expr></argument>, <argument pos:start="907:46" pos:end="907:49"><expr pos:start="907:46" pos:end="907:49"><name pos:start="907:46" pos:end="907:49">arg1</name></expr></argument>, <argument pos:start="907:52" pos:end="907:74"><expr pos:start="907:52" pos:end="907:74"><sizeof pos:start="907:52" pos:end="907:74">sizeof<argument_list pos:start="907:58" pos:end="907:74">(<argument pos:start="907:59" pos:end="907:73"><expr pos:start="907:59" pos:end="907:73"><name pos:start="907:59" pos:end="907:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="907:77" pos:end="907:77"><expr pos:start="907:77" pos:end="907:77"><literal type="number" pos:start="907:77" pos:end="907:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="907:79" pos:end="907:79">)</operator></expr>)</condition><block type="pseudo" pos:start="908:17" pos:end="908:28"><block_content pos:start="908:17" pos:end="908:28">
                <goto pos:start="908:17" pos:end="908:28">goto <name pos:start="908:22" pos:end="908:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="909:13" pos:end="909:43"><expr pos:start="909:13" pos:end="909:42"><call pos:start="909:13" pos:end="909:42"><name pos:start="909:13" pos:end="909:33">target_to_host_sigset</name><argument_list pos:start="909:34" pos:end="909:42">(<argument pos:start="909:35" pos:end="909:38"><expr pos:start="909:35" pos:end="909:38"><operator pos:start="909:35" pos:end="909:35">&amp;</operator><name pos:start="909:36" pos:end="909:38">set</name></expr></argument>, <argument pos:start="909:41" pos:end="909:41"><expr pos:start="909:41" pos:end="909:41"><name pos:start="909:41" pos:end="909:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="910:13" pos:end="910:36"><expr pos:start="910:13" pos:end="910:35"><call pos:start="910:13" pos:end="910:35"><name pos:start="910:13" pos:end="910:23">unlock_user</name><argument_list pos:start="910:24" pos:end="910:35">(<argument pos:start="910:25" pos:end="910:25"><expr pos:start="910:25" pos:end="910:25"><name pos:start="910:25" pos:end="910:25">p</name></expr></argument>, <argument pos:start="910:28" pos:end="910:31"><expr pos:start="910:28" pos:end="910:31"><name pos:start="910:28" pos:end="910:31">arg1</name></expr></argument>, <argument pos:start="910:34" pos:end="910:34"><expr pos:start="910:34" pos:end="910:34"><literal type="number" pos:start="910:34" pos:end="910:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="911:13" pos:end="3541:14"><if pos:start="911:13" pos:end="914:13">if <condition pos:start="911:16" pos:end="911:21">(<expr pos:start="911:17" pos:end="911:20"><name pos:start="911:17" pos:end="911:20">arg3</name></expr>)</condition> <block pos:start="911:23" pos:end="914:13">{<block_content pos:start="912:17" pos:end="913:52">
                <expr_stmt pos:start="912:17" pos:end="912:28"><expr pos:start="912:17" pos:end="912:27"><name pos:start="912:17" pos:end="912:20">puts</name> <operator pos:start="912:22" pos:end="912:22">=</operator> <operator pos:start="912:24" pos:end="912:24">&amp;</operator><name pos:start="912:25" pos:end="912:27">uts</name></expr>;</expr_stmt>
                <expr_stmt pos:start="913:17" pos:end="913:52"><expr pos:start="913:17" pos:end="913:51"><call pos:start="913:17" pos:end="913:51"><name pos:start="913:17" pos:end="913:39">target_to_host_timespec</name><argument_list pos:start="913:40" pos:end="913:51">(<argument pos:start="913:41" pos:end="913:44"><expr pos:start="913:41" pos:end="913:44"><name pos:start="913:41" pos:end="913:44">puts</name></expr></argument>, <argument pos:start="913:47" pos:end="913:50"><expr pos:start="913:47" pos:end="913:50"><name pos:start="913:47" pos:end="913:50">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="914:15" pos:end="3541:14">else <block pos:start="914:20" pos:end="3541:14">{<block_content pos:start="915:17" pos:end="3541:14">
                <expr_stmt pos:start="915:17" pos:end="915:28"><expr pos:start="915:17" pos:end="915:27"><name pos:start="915:17" pos:end="915:20">puts</name> <operator pos:start="915:22" pos:end="915:22">=</operator> <name pos:start="915:24" pos:end="915:27">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="916:13" pos:end="917:65"><expr pos:start="916:13" pos:end="917:64"><name pos:start="916:13" pos:end="916:15">ret</name> <operator pos:start="916:17" pos:end="916:17">=</operator> <call pos:start="916:19" pos:end="917:64"><name pos:start="916:19" pos:end="916:27">get_errno</name><argument_list pos:start="916:28" pos:end="917:64">(<argument pos:start="916:29" pos:end="917:63"><expr pos:start="916:29" pos:end="917:63"><call pos:start="916:29" pos:end="917:63"><name pos:start="916:29" pos:end="916:48">safe_rt_sigtimedwait</name><argument_list pos:start="916:49" pos:end="917:63">(<argument pos:start="916:50" pos:end="916:53"><expr pos:start="916:50" pos:end="916:53"><operator pos:start="916:50" pos:end="916:50">&amp;</operator><name pos:start="916:51" pos:end="916:53">set</name></expr></argument>, <argument pos:start="916:56" pos:end="916:61"><expr pos:start="916:56" pos:end="916:61"><operator pos:start="916:56" pos:end="916:56">&amp;</operator><name pos:start="916:57" pos:end="916:61">uinfo</name></expr></argument>, <argument pos:start="916:64" pos:end="916:67"><expr pos:start="916:64" pos:end="916:67"><name pos:start="916:64" pos:end="916:67">puts</name></expr></argument>,
                                                 <argument pos:start="917:50" pos:end="917:62"><expr pos:start="917:50" pos:end="917:62"><name pos:start="917:50" pos:end="917:62">SIGSET_T_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="918:13" pos:end="3541:14"><if pos:start="918:13" pos:end="3541:14">if <condition pos:start="918:16" pos:end="918:31">(<expr pos:start="918:17" pos:end="918:30"><operator pos:start="918:17" pos:end="918:17">!</operator><call pos:start="918:18" pos:end="918:30"><name pos:start="918:18" pos:end="918:25">is_error</name><argument_list pos:start="918:26" pos:end="918:30">(<argument pos:start="918:27" pos:end="918:29"><expr pos:start="918:27" pos:end="918:29"><name pos:start="918:27" pos:end="918:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="918:33" pos:end="3541:14">{<block_content pos:start="919:17" pos:end="3541:14">
                <if_stmt pos:start="919:17" pos:end="3541:14"><if pos:start="919:17" pos:end="3541:14">if <condition pos:start="919:20" pos:end="919:25">(<expr pos:start="919:21" pos:end="919:24"><name pos:start="919:21" pos:end="919:24">arg2</name></expr>)</condition> <block pos:start="919:27" pos:end="3541:14">{<block_content pos:start="920:21" pos:end="3541:14">
                    <expr_stmt pos:start="920:21" pos:end="921:37"><expr pos:start="920:21" pos:end="921:36"><name pos:start="920:21" pos:end="920:21">p</name> <operator pos:start="920:23" pos:end="920:23">=</operator> <call pos:start="920:25" pos:end="921:36"><name pos:start="920:25" pos:end="920:33">lock_user</name><argument_list pos:start="920:34" pos:end="921:36">(<argument pos:start="920:35" pos:end="920:46"><expr pos:start="920:35" pos:end="920:46"><name pos:start="920:35" pos:end="920:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="920:49" pos:end="920:52"><expr pos:start="920:49" pos:end="920:52"><name pos:start="920:49" pos:end="920:52">arg2</name></expr></argument>, <argument pos:start="920:55" pos:end="920:78"><expr pos:start="920:55" pos:end="920:78"><sizeof pos:start="920:55" pos:end="920:78">sizeof<argument_list pos:start="920:61" pos:end="920:78">(<argument pos:start="920:62" pos:end="920:77"><expr pos:start="920:62" pos:end="920:77"><name pos:start="920:62" pos:end="920:77">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                  <argument pos:start="921:35" pos:end="921:35"><expr pos:start="921:35" pos:end="921:35"><literal type="number" pos:start="921:35" pos:end="921:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="922:21" pos:end="3541:14"><if pos:start="922:21" pos:end="3541:14">if <condition pos:start="922:24" pos:end="922:27">(<expr pos:start="922:25" pos:end="922:26"><operator pos:start="922:25" pos:end="922:25">!</operator><name pos:start="922:26" pos:end="922:26">p</name></expr>)</condition> <block pos:start="922:29" pos:end="3541:14">{<block_content pos:start="923:25" pos:end="3541:14">
                        <goto pos:start="923:25" pos:end="923:36">goto <name pos:start="923:30" pos:end="923:35">efault</name>;</goto>
                    <expr_stmt pos:start="924:21" pos:end="924:54"><expr pos:start="924:21" pos:end="924:53"><call pos:start="924:21" pos:end="924:53"><name pos:start="924:21" pos:end="924:42">host_to_target_siginfo</name><argument_list pos:start="924:43" pos:end="924:53">(<argument pos:start="924:44" pos:end="924:44"><expr pos:start="924:44" pos:end="924:44"><name pos:start="924:44" pos:end="924:44">p</name></expr></argument>, <argument pos:start="924:47" pos:end="924:52"><expr pos:start="924:47" pos:end="924:52"><operator pos:start="924:47" pos:end="924:47">&amp;</operator><name pos:start="924:48" pos:end="924:52">uinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="925:21" pos:end="925:67"><expr pos:start="925:21" pos:end="925:66"><call pos:start="925:21" pos:end="925:66"><name pos:start="925:21" pos:end="925:31">unlock_user</name><argument_list pos:start="925:32" pos:end="925:66">(<argument pos:start="925:33" pos:end="925:33"><expr pos:start="925:33" pos:end="925:33"><name pos:start="925:33" pos:end="925:33">p</name></expr></argument>, <argument pos:start="925:36" pos:end="925:39"><expr pos:start="925:36" pos:end="925:39"><name pos:start="925:36" pos:end="925:39">arg2</name></expr></argument>, <argument pos:start="925:42" pos:end="925:65"><expr pos:start="925:42" pos:end="925:65"><sizeof pos:start="925:42" pos:end="925:65">sizeof<argument_list pos:start="925:48" pos:end="925:65">(<argument pos:start="925:49" pos:end="925:64"><expr pos:start="925:49" pos:end="925:64"><name pos:start="925:49" pos:end="925:64">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="926:17" pos:end="926:49"><expr pos:start="926:17" pos:end="926:48"><name pos:start="926:17" pos:end="926:19">ret</name> <operator pos:start="926:21" pos:end="926:21">=</operator> <call pos:start="926:23" pos:end="926:48"><name pos:start="926:23" pos:end="926:43">host_to_target_signal</name><argument_list pos:start="926:44" pos:end="926:48">(<argument pos:start="926:45" pos:end="926:47"><expr pos:start="926:45" pos:end="926:47"><name pos:start="926:45" pos:end="926:47">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="927:5" pos:end="927:35">case <expr pos:start="927:10" pos:end="927:34"><name pos:start="927:10" pos:end="927:34">TARGET_NR_rt_sigqueueinfo</name></expr>:</case>
        <block pos:start="928:9" pos:end="3541:14">{<block_content pos:start="929:13" pos:end="3541:14">
            <decl_stmt pos:start="929:13" pos:end="929:28"><decl pos:start="929:13" pos:end="929:27"><type pos:start="929:13" pos:end="929:21"><name pos:start="929:13" pos:end="929:21">siginfo_t</name></type> <name pos:start="929:23" pos:end="929:27">uinfo</name></decl>;</decl_stmt>
            <expr_stmt pos:start="930:13" pos:end="930:74"><expr pos:start="930:13" pos:end="930:73"><name pos:start="930:13" pos:end="930:13">p</name> <operator pos:start="930:15" pos:end="930:15">=</operator> <call pos:start="930:17" pos:end="930:73"><name pos:start="930:17" pos:end="930:25">lock_user</name><argument_list pos:start="930:26" pos:end="930:73">(<argument pos:start="930:27" pos:end="930:37"><expr pos:start="930:27" pos:end="930:37"><name pos:start="930:27" pos:end="930:37">VERIFY_READ</name></expr></argument>, <argument pos:start="930:40" pos:end="930:43"><expr pos:start="930:40" pos:end="930:43"><name pos:start="930:40" pos:end="930:43">arg3</name></expr></argument>, <argument pos:start="930:46" pos:end="930:69"><expr pos:start="930:46" pos:end="930:69"><sizeof pos:start="930:46" pos:end="930:69">sizeof<argument_list pos:start="930:52" pos:end="930:69">(<argument pos:start="930:53" pos:end="930:68"><expr pos:start="930:53" pos:end="930:68"><name pos:start="930:53" pos:end="930:68">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="930:72" pos:end="930:72"><expr pos:start="930:72" pos:end="930:72"><literal type="number" pos:start="930:72" pos:end="930:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="931:13" pos:end="3541:14"><if pos:start="931:13" pos:end="3541:14">if <condition pos:start="931:16" pos:end="931:19">(<expr pos:start="931:17" pos:end="931:18"><operator pos:start="931:17" pos:end="931:17">!</operator><name pos:start="931:18" pos:end="931:18">p</name></expr>)</condition> <block pos:start="931:21" pos:end="3541:14">{<block_content pos:start="932:17" pos:end="3541:14">
                <goto pos:start="932:17" pos:end="932:28">goto <name pos:start="932:22" pos:end="932:27">efault</name>;</goto>
            <expr_stmt pos:start="933:13" pos:end="933:46"><expr pos:start="933:13" pos:end="933:45"><call pos:start="933:13" pos:end="933:45"><name pos:start="933:13" pos:end="933:34">target_to_host_siginfo</name><argument_list pos:start="933:35" pos:end="933:45">(<argument pos:start="933:36" pos:end="933:41"><expr pos:start="933:36" pos:end="933:41"><operator pos:start="933:36" pos:end="933:36">&amp;</operator><name pos:start="933:37" pos:end="933:41">uinfo</name></expr></argument>, <argument pos:start="933:44" pos:end="933:44"><expr pos:start="933:44" pos:end="933:44"><name pos:start="933:44" pos:end="933:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="934:13" pos:end="934:36"><expr pos:start="934:13" pos:end="934:35"><call pos:start="934:13" pos:end="934:35"><name pos:start="934:13" pos:end="934:23">unlock_user</name><argument_list pos:start="934:24" pos:end="934:35">(<argument pos:start="934:25" pos:end="934:25"><expr pos:start="934:25" pos:end="934:25"><name pos:start="934:25" pos:end="934:25">p</name></expr></argument>, <argument pos:start="934:28" pos:end="934:31"><expr pos:start="934:28" pos:end="934:31"><name pos:start="934:28" pos:end="934:31">arg1</name></expr></argument>, <argument pos:start="934:34" pos:end="934:34"><expr pos:start="934:34" pos:end="934:34"><literal type="number" pos:start="934:34" pos:end="934:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="935:13" pos:end="937:0"><expr pos:start="935:13" pos:end="935:68"><name pos:start="935:13" pos:end="935:15">ret</name> <operator pos:start="935:17" pos:end="935:17">=</operator> <call pos:start="935:19" pos:end="935:68"><name pos:start="935:19" pos:end="935:27">get_errno</name><argument_list pos:start="935:28" pos:end="935:68">(<argument pos:start="935:29" pos:end="935:67"><expr pos:start="935:29" pos:end="935:67"><call pos:start="935:29" pos:end="935:67"><name pos:start="935:29" pos:end="935:47">sys_rt_sigqueueinfo</name><argument_list pos:start="935:48" pos:end="935:67">(<argument pos:start="935:49" pos:end="935:52"><expr pos:start="935:49" pos:end="935:52"><name pos:start="935:49" pos:end="935:52">arg1</name></expr></argument>, <argument pos:start="935:55" pos:end="935:58"><expr pos:start="935:55" pos:end="935:58"><name pos:start="935:55" pos:end="935:58">arg2</name></expr></argument>, <argument pos:start="935:61" pos:end="935:66"><expr pos:start="935:61" pos:end="935:66"><operator pos:start="935:61" pos:end="935:61">&amp;</operator><name pos:start="935:62" pos:end="935:66">uinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="936:1" pos:end="936:26">#<cpp:directive pos:start="936:2" pos:end="936:6">ifdef</cpp:directive> <name pos:start="936:8" pos:end="936:26">TARGET_NR_sigreturn</name></cpp:ifdef>
    <case pos:start="937:5" pos:end="937:29">case <expr pos:start="937:10" pos:end="937:28"><name pos:start="937:10" pos:end="937:28">TARGET_NR_sigreturn</name></expr>:</case>
        <if_stmt pos:start="938:9" pos:end="3541:14"><if pos:start="938:9" pos:end="940:9">if <condition pos:start="938:12" pos:end="938:28">(<expr pos:start="938:13" pos:end="938:27"><call pos:start="938:13" pos:end="938:27"><name pos:start="938:13" pos:end="938:25">block_signals</name><argument_list pos:start="938:26" pos:end="938:27">()</argument_list></call></expr>)</condition> <block pos:start="938:30" pos:end="940:9">{<block_content pos:start="939:13" pos:end="939:38">
            <expr_stmt pos:start="939:13" pos:end="939:38"><expr pos:start="939:13" pos:end="939:37"><name pos:start="939:13" pos:end="939:15">ret</name> <operator pos:start="939:17" pos:end="939:17">=</operator> <operator pos:start="939:19" pos:end="939:19">-</operator><name pos:start="939:20" pos:end="939:37">TARGET_ERESTARTSYS</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="940:11" pos:end="3541:14">else <block pos:start="940:16" pos:end="3541:14">{<block_content pos:start="941:13" pos:end="3541:14">
            <expr_stmt pos:start="941:13" pos:end="943:0"><expr pos:start="941:13" pos:end="941:39"><name pos:start="941:13" pos:end="941:15">ret</name> <operator pos:start="941:17" pos:end="941:17">=</operator> <call pos:start="941:19" pos:end="941:39"><name pos:start="941:19" pos:end="941:30">do_sigreturn</name><argument_list pos:start="941:31" pos:end="941:39">(<argument pos:start="941:32" pos:end="941:38"><expr pos:start="941:32" pos:end="941:38"><name pos:start="941:32" pos:end="941:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="942:1" pos:end="942:6">#<cpp:directive pos:start="942:2" pos:end="942:6">endif</cpp:directive></cpp:endif>
    <case pos:start="943:5" pos:end="943:32">case <expr pos:start="943:10" pos:end="943:31"><name pos:start="943:10" pos:end="943:31">TARGET_NR_rt_sigreturn</name></expr>:</case>
        <if_stmt pos:start="944:9" pos:end="3541:14"><if pos:start="944:9" pos:end="946:9">if <condition pos:start="944:12" pos:end="944:28">(<expr pos:start="944:13" pos:end="944:27"><call pos:start="944:13" pos:end="944:27"><name pos:start="944:13" pos:end="944:25">block_signals</name><argument_list pos:start="944:26" pos:end="944:27">()</argument_list></call></expr>)</condition> <block pos:start="944:30" pos:end="946:9">{<block_content pos:start="945:13" pos:end="945:38">
            <expr_stmt pos:start="945:13" pos:end="945:38"><expr pos:start="945:13" pos:end="945:37"><name pos:start="945:13" pos:end="945:15">ret</name> <operator pos:start="945:17" pos:end="945:17">=</operator> <operator pos:start="945:19" pos:end="945:19">-</operator><name pos:start="945:20" pos:end="945:37">TARGET_ERESTARTSYS</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="946:11" pos:end="3541:14">else <block pos:start="946:16" pos:end="3541:14">{<block_content pos:start="947:13" pos:end="3541:14">
            <expr_stmt pos:start="947:13" pos:end="947:43"><expr pos:start="947:13" pos:end="947:42"><name pos:start="947:13" pos:end="947:15">ret</name> <operator pos:start="947:17" pos:end="947:17">=</operator> <call pos:start="947:19" pos:end="947:42"><name pos:start="947:19" pos:end="947:33">do_rt_sigreturn</name><argument_list pos:start="947:34" pos:end="947:42">(<argument pos:start="947:35" pos:end="947:41"><expr pos:start="947:35" pos:end="947:41"><name pos:start="947:35" pos:end="947:41">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="948:5" pos:end="948:31">case <expr pos:start="948:10" pos:end="948:30"><name pos:start="948:10" pos:end="948:30">TARGET_NR_sethostname</name></expr>:</case>
        <if_stmt pos:start="949:9" pos:end="950:24"><if pos:start="949:9" pos:end="950:24">if <condition pos:start="949:12" pos:end="949:42">(<expr pos:start="949:13" pos:end="949:41"><operator pos:start="949:13" pos:end="949:13">!</operator><operator pos:start="949:14" pos:end="949:14">(</operator><name pos:start="949:15" pos:end="949:15">p</name> <operator pos:start="949:17" pos:end="949:17">=</operator> <call pos:start="949:19" pos:end="949:40"><name pos:start="949:19" pos:end="949:34">lock_user_string</name><argument_list pos:start="949:35" pos:end="949:40">(<argument pos:start="949:36" pos:end="949:39"><expr pos:start="949:36" pos:end="949:39"><name pos:start="949:36" pos:end="949:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="949:41" pos:end="949:41">)</operator></expr>)</condition><block type="pseudo" pos:start="950:13" pos:end="950:24"><block_content pos:start="950:13" pos:end="950:24">
            <goto pos:start="950:13" pos:end="950:24">goto <name pos:start="950:18" pos:end="950:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="951:9" pos:end="951:46"><expr pos:start="951:9" pos:end="951:45"><name pos:start="951:9" pos:end="951:11">ret</name> <operator pos:start="951:13" pos:end="951:13">=</operator> <call pos:start="951:15" pos:end="951:45"><name pos:start="951:15" pos:end="951:23">get_errno</name><argument_list pos:start="951:24" pos:end="951:45">(<argument pos:start="951:25" pos:end="951:44"><expr pos:start="951:25" pos:end="951:44"><call pos:start="951:25" pos:end="951:44"><name pos:start="951:25" pos:end="951:35">sethostname</name><argument_list pos:start="951:36" pos:end="951:44">(<argument pos:start="951:37" pos:end="951:37"><expr pos:start="951:37" pos:end="951:37"><name pos:start="951:37" pos:end="951:37">p</name></expr></argument>, <argument pos:start="951:40" pos:end="951:43"><expr pos:start="951:40" pos:end="951:43"><name pos:start="951:40" pos:end="951:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="952:9" pos:end="952:32"><expr pos:start="952:9" pos:end="952:31"><call pos:start="952:9" pos:end="952:31"><name pos:start="952:9" pos:end="952:19">unlock_user</name><argument_list pos:start="952:20" pos:end="952:31">(<argument pos:start="952:21" pos:end="952:21"><expr pos:start="952:21" pos:end="952:21"><name pos:start="952:21" pos:end="952:21">p</name></expr></argument>, <argument pos:start="952:24" pos:end="952:27"><expr pos:start="952:24" pos:end="952:27"><name pos:start="952:24" pos:end="952:27">arg1</name></expr></argument>, <argument pos:start="952:30" pos:end="952:30"><expr pos:start="952:30" pos:end="952:30"><literal type="number" pos:start="952:30" pos:end="952:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="953:5" pos:end="953:29">case <expr pos:start="953:10" pos:end="953:28"><name pos:start="953:10" pos:end="953:28">TARGET_NR_setrlimit</name></expr>:</case>
        <block pos:start="954:9" pos:end="3541:14">{<block_content pos:start="955:13" pos:end="3541:14">
            <decl_stmt pos:start="955:13" pos:end="955:57"><decl pos:start="955:13" pos:end="955:56"><type pos:start="955:13" pos:end="955:15"><name pos:start="955:13" pos:end="955:15">int</name></type> <name pos:start="955:17" pos:end="955:24">resource</name> <init pos:start="955:26" pos:end="955:56">= <expr pos:start="955:28" pos:end="955:56"><call pos:start="955:28" pos:end="955:56"><name pos:start="955:28" pos:end="955:50">target_to_host_resource</name><argument_list pos:start="955:51" pos:end="955:56">(<argument pos:start="955:52" pos:end="955:55"><expr pos:start="955:52" pos:end="955:55"><name pos:start="955:52" pos:end="955:55">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="956:13" pos:end="956:46"><decl pos:start="956:13" pos:end="956:45"><type pos:start="956:13" pos:end="956:34"><name pos:start="956:13" pos:end="956:32"><name pos:start="956:13" pos:end="956:18">struct</name> <name pos:start="956:20" pos:end="956:32">target_rlimit</name></name> <modifier pos:start="956:34" pos:end="956:34">*</modifier></type><name pos:start="956:35" pos:end="956:45">target_rlim</name></decl>;</decl_stmt>
            <decl_stmt pos:start="957:13" pos:end="957:31"><decl pos:start="957:13" pos:end="957:30"><type pos:start="957:13" pos:end="957:25"><name pos:start="957:13" pos:end="957:25"><name pos:start="957:13" pos:end="957:18">struct</name> <name pos:start="957:20" pos:end="957:25">rlimit</name></name></type> <name pos:start="957:27" pos:end="957:30">rlim</name></decl>;</decl_stmt>
            <if_stmt pos:start="958:13" pos:end="959:28"><if pos:start="958:13" pos:end="959:28">if <condition pos:start="958:16" pos:end="958:69">(<expr pos:start="958:17" pos:end="958:68"><operator pos:start="958:17" pos:end="958:17">!</operator><call pos:start="958:18" pos:end="958:68"><name pos:start="958:18" pos:end="958:33">lock_user_struct</name><argument_list pos:start="958:34" pos:end="958:68">(<argument pos:start="958:35" pos:end="958:45"><expr pos:start="958:35" pos:end="958:45"><name pos:start="958:35" pos:end="958:45">VERIFY_READ</name></expr></argument>, <argument pos:start="958:48" pos:end="958:58"><expr pos:start="958:48" pos:end="958:58"><name pos:start="958:48" pos:end="958:58">target_rlim</name></expr></argument>, <argument pos:start="958:61" pos:end="958:64"><expr pos:start="958:61" pos:end="958:64"><name pos:start="958:61" pos:end="958:64">arg2</name></expr></argument>, <argument pos:start="958:67" pos:end="958:67"><expr pos:start="958:67" pos:end="958:67"><literal type="number" pos:start="958:67" pos:end="958:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="959:17" pos:end="959:28"><block_content pos:start="959:17" pos:end="959:28">
                <goto pos:start="959:17" pos:end="959:28">goto <name pos:start="959:22" pos:end="959:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="960:13" pos:end="960:71"><expr pos:start="960:13" pos:end="960:70"><name pos:start="960:13" pos:end="960:25"><name pos:start="960:13" pos:end="960:16">rlim</name><operator pos:start="960:17" pos:end="960:17">.</operator><name pos:start="960:18" pos:end="960:25">rlim_cur</name></name> <operator pos:start="960:27" pos:end="960:27">=</operator> <call pos:start="960:29" pos:end="960:70"><name pos:start="960:29" pos:end="960:47">target_to_host_rlim</name><argument_list pos:start="960:48" pos:end="960:70">(<argument pos:start="960:49" pos:end="960:69"><expr pos:start="960:49" pos:end="960:69"><name pos:start="960:49" pos:end="960:69"><name pos:start="960:49" pos:end="960:59">target_rlim</name><operator pos:start="960:60" pos:end="960:61">-&gt;</operator><name pos:start="960:62" pos:end="960:69">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="961:13" pos:end="961:71"><expr pos:start="961:13" pos:end="961:70"><name pos:start="961:13" pos:end="961:25"><name pos:start="961:13" pos:end="961:16">rlim</name><operator pos:start="961:17" pos:end="961:17">.</operator><name pos:start="961:18" pos:end="961:25">rlim_max</name></name> <operator pos:start="961:27" pos:end="961:27">=</operator> <call pos:start="961:29" pos:end="961:70"><name pos:start="961:29" pos:end="961:47">target_to_host_rlim</name><argument_list pos:start="961:48" pos:end="961:70">(<argument pos:start="961:49" pos:end="961:69"><expr pos:start="961:49" pos:end="961:69"><name pos:start="961:49" pos:end="961:69"><name pos:start="961:49" pos:end="961:59">target_rlim</name><operator pos:start="961:60" pos:end="961:61">-&gt;</operator><name pos:start="961:62" pos:end="961:69">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="962:13" pos:end="962:53"><expr pos:start="962:13" pos:end="962:52"><call pos:start="962:13" pos:end="962:52"><name pos:start="962:13" pos:end="962:30">unlock_user_struct</name><argument_list pos:start="962:31" pos:end="962:52">(<argument pos:start="962:32" pos:end="962:42"><expr pos:start="962:32" pos:end="962:42"><name pos:start="962:32" pos:end="962:42">target_rlim</name></expr></argument>, <argument pos:start="962:45" pos:end="962:48"><expr pos:start="962:45" pos:end="962:48"><name pos:start="962:45" pos:end="962:48">arg2</name></expr></argument>, <argument pos:start="962:51" pos:end="962:51"><expr pos:start="962:51" pos:end="962:51"><literal type="number" pos:start="962:51" pos:end="962:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="963:13" pos:end="963:56"><expr pos:start="963:13" pos:end="963:55"><name pos:start="963:13" pos:end="963:15">ret</name> <operator pos:start="963:17" pos:end="963:17">=</operator> <call pos:start="963:19" pos:end="963:55"><name pos:start="963:19" pos:end="963:27">get_errno</name><argument_list pos:start="963:28" pos:end="963:55">(<argument pos:start="963:29" pos:end="963:54"><expr pos:start="963:29" pos:end="963:54"><call pos:start="963:29" pos:end="963:54"><name pos:start="963:29" pos:end="963:37">setrlimit</name><argument_list pos:start="963:38" pos:end="963:54">(<argument pos:start="963:39" pos:end="963:46"><expr pos:start="963:39" pos:end="963:46"><name pos:start="963:39" pos:end="963:46">resource</name></expr></argument>, <argument pos:start="963:49" pos:end="963:53"><expr pos:start="963:49" pos:end="963:53"><operator pos:start="963:49" pos:end="963:49">&amp;</operator><name pos:start="963:50" pos:end="963:53">rlim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="964:5" pos:end="964:29">case <expr pos:start="964:10" pos:end="964:28"><name pos:start="964:10" pos:end="964:28">TARGET_NR_getrlimit</name></expr>:</case>
        <block pos:start="965:9" pos:end="3541:14">{<block_content pos:start="966:13" pos:end="3541:14">
            <decl_stmt pos:start="966:13" pos:end="966:57"><decl pos:start="966:13" pos:end="966:56"><type pos:start="966:13" pos:end="966:15"><name pos:start="966:13" pos:end="966:15">int</name></type> <name pos:start="966:17" pos:end="966:24">resource</name> <init pos:start="966:26" pos:end="966:56">= <expr pos:start="966:28" pos:end="966:56"><call pos:start="966:28" pos:end="966:56"><name pos:start="966:28" pos:end="966:50">target_to_host_resource</name><argument_list pos:start="966:51" pos:end="966:56">(<argument pos:start="966:52" pos:end="966:55"><expr pos:start="966:52" pos:end="966:55"><name pos:start="966:52" pos:end="966:55">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="967:13" pos:end="967:46"><decl pos:start="967:13" pos:end="967:45"><type pos:start="967:13" pos:end="967:34"><name pos:start="967:13" pos:end="967:32"><name pos:start="967:13" pos:end="967:18">struct</name> <name pos:start="967:20" pos:end="967:32">target_rlimit</name></name> <modifier pos:start="967:34" pos:end="967:34">*</modifier></type><name pos:start="967:35" pos:end="967:45">target_rlim</name></decl>;</decl_stmt>
            <decl_stmt pos:start="968:13" pos:end="968:31"><decl pos:start="968:13" pos:end="968:30"><type pos:start="968:13" pos:end="968:25"><name pos:start="968:13" pos:end="968:25"><name pos:start="968:13" pos:end="968:18">struct</name> <name pos:start="968:20" pos:end="968:25">rlimit</name></name></type> <name pos:start="968:27" pos:end="968:30">rlim</name></decl>;</decl_stmt>
            <expr_stmt pos:start="969:13" pos:end="969:56"><expr pos:start="969:13" pos:end="969:55"><name pos:start="969:13" pos:end="969:15">ret</name> <operator pos:start="969:17" pos:end="969:17">=</operator> <call pos:start="969:19" pos:end="969:55"><name pos:start="969:19" pos:end="969:27">get_errno</name><argument_list pos:start="969:28" pos:end="969:55">(<argument pos:start="969:29" pos:end="969:54"><expr pos:start="969:29" pos:end="969:54"><call pos:start="969:29" pos:end="969:54"><name pos:start="969:29" pos:end="969:37">getrlimit</name><argument_list pos:start="969:38" pos:end="969:54">(<argument pos:start="969:39" pos:end="969:46"><expr pos:start="969:39" pos:end="969:46"><name pos:start="969:39" pos:end="969:46">resource</name></expr></argument>, <argument pos:start="969:49" pos:end="969:53"><expr pos:start="969:49" pos:end="969:53"><operator pos:start="969:49" pos:end="969:49">&amp;</operator><name pos:start="969:50" pos:end="969:53">rlim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="970:13" pos:end="3541:14"><if pos:start="970:13" pos:end="3541:14">if <condition pos:start="970:16" pos:end="970:31">(<expr pos:start="970:17" pos:end="970:30"><operator pos:start="970:17" pos:end="970:17">!</operator><call pos:start="970:18" pos:end="970:30"><name pos:start="970:18" pos:end="970:25">is_error</name><argument_list pos:start="970:26" pos:end="970:30">(<argument pos:start="970:27" pos:end="970:29"><expr pos:start="970:27" pos:end="970:29"><name pos:start="970:27" pos:end="970:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="970:33" pos:end="3541:14">{<block_content pos:start="971:17" pos:end="3541:14">
                <if_stmt pos:start="971:17" pos:end="972:32"><if pos:start="971:17" pos:end="972:32">if <condition pos:start="971:20" pos:end="971:74">(<expr pos:start="971:21" pos:end="971:73"><operator pos:start="971:21" pos:end="971:21">!</operator><call pos:start="971:22" pos:end="971:73"><name pos:start="971:22" pos:end="971:37">lock_user_struct</name><argument_list pos:start="971:38" pos:end="971:73">(<argument pos:start="971:39" pos:end="971:50"><expr pos:start="971:39" pos:end="971:50"><name pos:start="971:39" pos:end="971:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="971:53" pos:end="971:63"><expr pos:start="971:53" pos:end="971:63"><name pos:start="971:53" pos:end="971:63">target_rlim</name></expr></argument>, <argument pos:start="971:66" pos:end="971:69"><expr pos:start="971:66" pos:end="971:69"><name pos:start="971:66" pos:end="971:69">arg2</name></expr></argument>, <argument pos:start="971:72" pos:end="971:72"><expr pos:start="971:72" pos:end="971:72"><literal type="number" pos:start="971:72" pos:end="971:72">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="972:21" pos:end="972:32"><block_content pos:start="972:21" pos:end="972:32">
                    <goto pos:start="972:21" pos:end="972:32">goto <name pos:start="972:26" pos:end="972:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="973:17" pos:end="973:75"><expr pos:start="973:17" pos:end="973:74"><name pos:start="973:17" pos:end="973:37"><name pos:start="973:17" pos:end="973:27">target_rlim</name><operator pos:start="973:28" pos:end="973:29">-&gt;</operator><name pos:start="973:30" pos:end="973:37">rlim_cur</name></name> <operator pos:start="973:39" pos:end="973:39">=</operator> <call pos:start="973:41" pos:end="973:74"><name pos:start="973:41" pos:end="973:59">host_to_target_rlim</name><argument_list pos:start="973:60" pos:end="973:74">(<argument pos:start="973:61" pos:end="973:73"><expr pos:start="973:61" pos:end="973:73"><name pos:start="973:61" pos:end="973:73"><name pos:start="973:61" pos:end="973:64">rlim</name><operator pos:start="973:65" pos:end="973:65">.</operator><name pos:start="973:66" pos:end="973:73">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="974:17" pos:end="974:75"><expr pos:start="974:17" pos:end="974:74"><name pos:start="974:17" pos:end="974:37"><name pos:start="974:17" pos:end="974:27">target_rlim</name><operator pos:start="974:28" pos:end="974:29">-&gt;</operator><name pos:start="974:30" pos:end="974:37">rlim_max</name></name> <operator pos:start="974:39" pos:end="974:39">=</operator> <call pos:start="974:41" pos:end="974:74"><name pos:start="974:41" pos:end="974:59">host_to_target_rlim</name><argument_list pos:start="974:60" pos:end="974:74">(<argument pos:start="974:61" pos:end="974:73"><expr pos:start="974:61" pos:end="974:73"><name pos:start="974:61" pos:end="974:73"><name pos:start="974:61" pos:end="974:64">rlim</name><operator pos:start="974:65" pos:end="974:65">.</operator><name pos:start="974:66" pos:end="974:73">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="975:17" pos:end="975:57"><expr pos:start="975:17" pos:end="975:56"><call pos:start="975:17" pos:end="975:56"><name pos:start="975:17" pos:end="975:34">unlock_user_struct</name><argument_list pos:start="975:35" pos:end="975:56">(<argument pos:start="975:36" pos:end="975:46"><expr pos:start="975:36" pos:end="975:46"><name pos:start="975:36" pos:end="975:46">target_rlim</name></expr></argument>, <argument pos:start="975:49" pos:end="975:52"><expr pos:start="975:49" pos:end="975:52"><name pos:start="975:49" pos:end="975:52">arg2</name></expr></argument>, <argument pos:start="975:55" pos:end="975:55"><expr pos:start="975:55" pos:end="975:55"><literal type="number" pos:start="975:55" pos:end="975:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="976:5" pos:end="976:29">case <expr pos:start="976:10" pos:end="976:28"><name pos:start="976:10" pos:end="976:28">TARGET_NR_getrusage</name></expr>:</case>
        <block pos:start="977:9" pos:end="3541:14">{<block_content pos:start="978:13" pos:end="3541:14">
            <decl_stmt pos:start="978:13" pos:end="978:33"><decl pos:start="978:13" pos:end="978:32"><type pos:start="978:13" pos:end="978:25"><name pos:start="978:13" pos:end="978:25"><name pos:start="978:13" pos:end="978:18">struct</name> <name pos:start="978:20" pos:end="978:25">rusage</name></name></type> <name pos:start="978:27" pos:end="978:32">rusage</name></decl>;</decl_stmt>
            <expr_stmt pos:start="979:13" pos:end="979:54"><expr pos:start="979:13" pos:end="979:53"><name pos:start="979:13" pos:end="979:15">ret</name> <operator pos:start="979:17" pos:end="979:17">=</operator> <call pos:start="979:19" pos:end="979:53"><name pos:start="979:19" pos:end="979:27">get_errno</name><argument_list pos:start="979:28" pos:end="979:53">(<argument pos:start="979:29" pos:end="979:52"><expr pos:start="979:29" pos:end="979:52"><call pos:start="979:29" pos:end="979:52"><name pos:start="979:29" pos:end="979:37">getrusage</name><argument_list pos:start="979:38" pos:end="979:52">(<argument pos:start="979:39" pos:end="979:42"><expr pos:start="979:39" pos:end="979:42"><name pos:start="979:39" pos:end="979:42">arg1</name></expr></argument>, <argument pos:start="979:45" pos:end="979:51"><expr pos:start="979:45" pos:end="979:51"><operator pos:start="979:45" pos:end="979:45">&amp;</operator><name pos:start="979:46" pos:end="979:51">rusage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="980:13" pos:end="3541:14"><if pos:start="980:13" pos:end="3541:14">if <condition pos:start="980:16" pos:end="980:31">(<expr pos:start="980:17" pos:end="980:30"><operator pos:start="980:17" pos:end="980:17">!</operator><call pos:start="980:18" pos:end="980:30"><name pos:start="980:18" pos:end="980:25">is_error</name><argument_list pos:start="980:26" pos:end="980:30">(<argument pos:start="980:27" pos:end="980:29"><expr pos:start="980:27" pos:end="980:29"><name pos:start="980:27" pos:end="980:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="980:33" pos:end="3541:14">{<block_content pos:start="981:17" pos:end="3541:14">
                <expr_stmt pos:start="981:17" pos:end="981:59"><expr pos:start="981:17" pos:end="981:58"><name pos:start="981:17" pos:end="981:19">ret</name> <operator pos:start="981:21" pos:end="981:21">=</operator> <call pos:start="981:23" pos:end="981:58"><name pos:start="981:23" pos:end="981:43">host_to_target_rusage</name><argument_list pos:start="981:44" pos:end="981:58">(<argument pos:start="981:45" pos:end="981:48"><expr pos:start="981:45" pos:end="981:48"><name pos:start="981:45" pos:end="981:48">arg2</name></expr></argument>, <argument pos:start="981:51" pos:end="981:57"><expr pos:start="981:51" pos:end="981:57"><operator pos:start="981:51" pos:end="981:51">&amp;</operator><name pos:start="981:52" pos:end="981:57">rusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="982:5" pos:end="982:32">case <expr pos:start="982:10" pos:end="982:31"><name pos:start="982:10" pos:end="982:31">TARGET_NR_gettimeofday</name></expr>:</case>
        <block pos:start="983:9" pos:end="3541:14">{<block_content pos:start="984:13" pos:end="3541:14">
            <decl_stmt pos:start="984:13" pos:end="984:30"><decl pos:start="984:13" pos:end="984:29"><type pos:start="984:13" pos:end="984:26"><name pos:start="984:13" pos:end="984:26"><name pos:start="984:13" pos:end="984:18">struct</name> <name pos:start="984:20" pos:end="984:26">timeval</name></name></type> <name pos:start="984:28" pos:end="984:29">tv</name></decl>;</decl_stmt>
            <expr_stmt pos:start="985:13" pos:end="985:53"><expr pos:start="985:13" pos:end="985:52"><name pos:start="985:13" pos:end="985:15">ret</name> <operator pos:start="985:17" pos:end="985:17">=</operator> <call pos:start="985:19" pos:end="985:52"><name pos:start="985:19" pos:end="985:27">get_errno</name><argument_list pos:start="985:28" pos:end="985:52">(<argument pos:start="985:29" pos:end="985:51"><expr pos:start="985:29" pos:end="985:51"><call pos:start="985:29" pos:end="985:51"><name pos:start="985:29" pos:end="985:40">gettimeofday</name><argument_list pos:start="985:41" pos:end="985:51">(<argument pos:start="985:42" pos:end="985:44"><expr pos:start="985:42" pos:end="985:44"><operator pos:start="985:42" pos:end="985:42">&amp;</operator><name pos:start="985:43" pos:end="985:44">tv</name></expr></argument>, <argument pos:start="985:47" pos:end="985:50"><expr pos:start="985:47" pos:end="985:50"><name pos:start="985:47" pos:end="985:50">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="986:13" pos:end="3541:14"><if pos:start="986:13" pos:end="3541:14">if <condition pos:start="986:16" pos:end="986:31">(<expr pos:start="986:17" pos:end="986:30"><operator pos:start="986:17" pos:end="986:17">!</operator><call pos:start="986:18" pos:end="986:30"><name pos:start="986:18" pos:end="986:25">is_error</name><argument_list pos:start="986:26" pos:end="986:30">(<argument pos:start="986:27" pos:end="986:29"><expr pos:start="986:27" pos:end="986:29"><name pos:start="986:27" pos:end="986:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="986:33" pos:end="3541:14">{<block_content pos:start="987:17" pos:end="3541:14">
                <if_stmt pos:start="987:17" pos:end="988:32"><if pos:start="987:17" pos:end="988:32">if <condition pos:start="987:20" pos:end="987:52">(<expr pos:start="987:21" pos:end="987:51"><call pos:start="987:21" pos:end="987:51"><name pos:start="987:21" pos:end="987:40">copy_to_user_timeval</name><argument_list pos:start="987:41" pos:end="987:51">(<argument pos:start="987:42" pos:end="987:45"><expr pos:start="987:42" pos:end="987:45"><name pos:start="987:42" pos:end="987:45">arg1</name></expr></argument>, <argument pos:start="987:48" pos:end="987:50"><expr pos:start="987:48" pos:end="987:50"><operator pos:start="987:48" pos:end="987:48">&amp;</operator><name pos:start="987:49" pos:end="987:50">tv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="988:21" pos:end="988:32"><block_content pos:start="988:21" pos:end="988:32">
                    <goto pos:start="988:21" pos:end="988:32">goto <name pos:start="988:26" pos:end="988:31">efault</name>;</goto></block_content></block></if></if_stmt>
    <case pos:start="989:5" pos:end="989:32">case <expr pos:start="989:10" pos:end="989:31"><name pos:start="989:10" pos:end="989:31">TARGET_NR_settimeofday</name></expr>:</case>
        <block pos:start="990:9" pos:end="3541:14">{<block_content pos:start="991:13" pos:end="3541:14">
            <decl_stmt pos:start="991:13" pos:end="991:43"><decl pos:start="991:13" pos:end="991:29"><type pos:start="991:13" pos:end="991:26"><name pos:start="991:13" pos:end="991:26"><name pos:start="991:13" pos:end="991:18">struct</name> <name pos:start="991:20" pos:end="991:26">timeval</name></name></type> <name pos:start="991:28" pos:end="991:29">tv</name></decl>, <decl pos:start="991:32" pos:end="991:42"><type ref="prev" pos:start="991:13" pos:end="991:26"><modifier pos:start="991:32" pos:end="991:32">*</modifier></type><name pos:start="991:33" pos:end="991:35">ptv</name> <init pos:start="991:37" pos:end="991:42">= <expr pos:start="991:39" pos:end="991:42"><name pos:start="991:39" pos:end="991:42">NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="992:13" pos:end="992:44"><decl pos:start="992:13" pos:end="992:30"><type pos:start="992:13" pos:end="992:27"><name pos:start="992:13" pos:end="992:27"><name pos:start="992:13" pos:end="992:18">struct</name> <name pos:start="992:20" pos:end="992:27">timezone</name></name></type> <name pos:start="992:29" pos:end="992:30">tz</name></decl>, <decl pos:start="992:33" pos:end="992:43"><type ref="prev" pos:start="992:13" pos:end="992:27"><modifier pos:start="992:33" pos:end="992:33">*</modifier></type><name pos:start="992:34" pos:end="992:36">ptz</name> <init pos:start="992:38" pos:end="992:43">= <expr pos:start="992:40" pos:end="992:43"><name pos:start="992:40" pos:end="992:43">NULL</name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="993:13" pos:end="3541:14"><if pos:start="993:13" pos:end="3541:14">if <condition pos:start="993:16" pos:end="993:21">(<expr pos:start="993:17" pos:end="993:20"><name pos:start="993:17" pos:end="993:20">arg1</name></expr>)</condition> <block pos:start="993:23" pos:end="3541:14">{<block_content pos:start="994:17" pos:end="3541:14">
                <if_stmt pos:start="994:17" pos:end="3541:14"><if pos:start="994:17" pos:end="3541:14">if <condition pos:start="994:20" pos:end="994:54">(<expr pos:start="994:21" pos:end="994:53"><call pos:start="994:21" pos:end="994:53"><name pos:start="994:21" pos:end="994:42">copy_from_user_timeval</name><argument_list pos:start="994:43" pos:end="994:53">(<argument pos:start="994:44" pos:end="994:46"><expr pos:start="994:44" pos:end="994:46"><operator pos:start="994:44" pos:end="994:44">&amp;</operator><name pos:start="994:45" pos:end="994:46">tv</name></expr></argument>, <argument pos:start="994:49" pos:end="994:52"><expr pos:start="994:49" pos:end="994:52"><name pos:start="994:49" pos:end="994:52">arg1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="994:56" pos:end="3541:14">{<block_content pos:start="995:21" pos:end="3541:14">
                    <goto pos:start="995:21" pos:end="995:32">goto <name pos:start="995:26" pos:end="995:31">efault</name>;</goto>
                <expr_stmt pos:start="996:17" pos:end="996:26"><expr pos:start="996:17" pos:end="996:25"><name pos:start="996:17" pos:end="996:19">ptv</name> <operator pos:start="996:21" pos:end="996:21">=</operator> <operator pos:start="996:23" pos:end="996:23">&amp;</operator><name pos:start="996:24" pos:end="996:25">tv</name></expr>;</expr_stmt>
            <if_stmt pos:start="997:13" pos:end="3541:14"><if pos:start="997:13" pos:end="3541:14">if <condition pos:start="997:16" pos:end="997:21">(<expr pos:start="997:17" pos:end="997:20"><name pos:start="997:17" pos:end="997:20">arg2</name></expr>)</condition> <block pos:start="997:23" pos:end="3541:14">{<block_content pos:start="998:17" pos:end="3541:14">
                <if_stmt pos:start="998:17" pos:end="3541:14"><if pos:start="998:17" pos:end="3541:14">if <condition pos:start="998:20" pos:end="998:55">(<expr pos:start="998:21" pos:end="998:54"><call pos:start="998:21" pos:end="998:54"><name pos:start="998:21" pos:end="998:43">copy_from_user_timezone</name><argument_list pos:start="998:44" pos:end="998:54">(<argument pos:start="998:45" pos:end="998:47"><expr pos:start="998:45" pos:end="998:47"><operator pos:start="998:45" pos:end="998:45">&amp;</operator><name pos:start="998:46" pos:end="998:47">tz</name></expr></argument>, <argument pos:start="998:50" pos:end="998:53"><expr pos:start="998:50" pos:end="998:53"><name pos:start="998:50" pos:end="998:53">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="998:57" pos:end="3541:14">{<block_content pos:start="999:21" pos:end="3541:14">
                    <goto pos:start="999:21" pos:end="999:32">goto <name pos:start="999:26" pos:end="999:31">efault</name>;</goto>
                <expr_stmt pos:start="1000:17" pos:end="1000:26"><expr pos:start="1000:17" pos:end="1000:25"><name pos:start="1000:17" pos:end="1000:19">ptz</name> <operator pos:start="1000:21" pos:end="1000:21">=</operator> <operator pos:start="1000:23" pos:end="1000:23">&amp;</operator><name pos:start="1000:24" pos:end="1000:25">tz</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1001:13" pos:end="1003:0"><expr pos:start="1001:13" pos:end="1001:51"><name pos:start="1001:13" pos:end="1001:15">ret</name> <operator pos:start="1001:17" pos:end="1001:17">=</operator> <call pos:start="1001:19" pos:end="1001:51"><name pos:start="1001:19" pos:end="1001:27">get_errno</name><argument_list pos:start="1001:28" pos:end="1001:51">(<argument pos:start="1001:29" pos:end="1001:50"><expr pos:start="1001:29" pos:end="1001:50"><call pos:start="1001:29" pos:end="1001:50"><name pos:start="1001:29" pos:end="1001:40">settimeofday</name><argument_list pos:start="1001:41" pos:end="1001:50">(<argument pos:start="1001:42" pos:end="1001:44"><expr pos:start="1001:42" pos:end="1001:44"><name pos:start="1001:42" pos:end="1001:44">ptv</name></expr></argument>, <argument pos:start="1001:47" pos:end="1001:49"><expr pos:start="1001:47" pos:end="1001:49"><name pos:start="1001:47" pos:end="1001:49">ptz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="1002:1" pos:end="1002:29">#<cpp:directive pos:start="1002:2" pos:end="1002:3">if</cpp:directive> <expr pos:start="1002:5" pos:end="1002:29"><call pos:start="1002:5" pos:end="1002:29"><name pos:start="1002:5" pos:end="1002:11">defined</name><argument_list pos:start="1002:12" pos:end="1002:29">(<argument pos:start="1002:13" pos:end="1002:28"><expr pos:start="1002:13" pos:end="1002:28"><name pos:start="1002:13" pos:end="1002:28">TARGET_NR_select</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="1003:5" pos:end="1005:0">case <expr pos:start="1003:10" pos:end="1003:25"><name pos:start="1003:10" pos:end="1003:25">TARGET_NR_select</name></expr>:</case>
<cpp:if pos:start="1004:1" pos:end="1004:50">#<cpp:directive pos:start="1004:2" pos:end="1004:3">if</cpp:directive> <expr pos:start="1004:5" pos:end="1004:50"><call pos:start="1004:5" pos:end="1004:25"><name pos:start="1004:5" pos:end="1004:11">defined</name><argument_list pos:start="1004:12" pos:end="1004:25">(<argument pos:start="1004:13" pos:end="1004:24"><expr pos:start="1004:13" pos:end="1004:24"><name pos:start="1004:13" pos:end="1004:24">TARGET_S390X</name></expr></argument>)</argument_list></call> <operator pos:start="1004:27" pos:end="1004:28">||</operator> <call pos:start="1004:30" pos:end="1004:50"><name pos:start="1004:30" pos:end="1004:36">defined</name><argument_list pos:start="1004:37" pos:end="1004:50">(<argument pos:start="1004:38" pos:end="1004:49"><expr pos:start="1004:38" pos:end="1004:49"><name pos:start="1004:38" pos:end="1004:49">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt pos:start="1005:9" pos:end="1007:0"><expr pos:start="1005:9" pos:end="1005:53"><name pos:start="1005:9" pos:end="1005:11">ret</name> <operator pos:start="1005:13" pos:end="1005:13">=</operator> <call pos:start="1005:15" pos:end="1005:53"><name pos:start="1005:15" pos:end="1005:23">do_select</name><argument_list pos:start="1005:24" pos:end="1005:53">(<argument pos:start="1005:25" pos:end="1005:28"><expr pos:start="1005:25" pos:end="1005:28"><name pos:start="1005:25" pos:end="1005:28">arg1</name></expr></argument>, <argument pos:start="1005:31" pos:end="1005:34"><expr pos:start="1005:31" pos:end="1005:34"><name pos:start="1005:31" pos:end="1005:34">arg2</name></expr></argument>, <argument pos:start="1005:37" pos:end="1005:40"><expr pos:start="1005:37" pos:end="1005:40"><name pos:start="1005:37" pos:end="1005:40">arg3</name></expr></argument>, <argument pos:start="1005:43" pos:end="1005:46"><expr pos:start="1005:43" pos:end="1005:46"><name pos:start="1005:43" pos:end="1005:46">arg4</name></expr></argument>, <argument pos:start="1005:49" pos:end="1005:52"><expr pos:start="1005:49" pos:end="1005:52"><name pos:start="1005:49" pos:end="1005:52">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="1006:1" pos:end="1006:5">#<cpp:directive pos:start="1006:2" pos:end="1006:5">else</cpp:directive></cpp:else>
        <block pos:start="1007:9" pos:end="3541:14">{<block_content pos:start="1008:13" pos:end="3541:14">
            <decl_stmt pos:start="1008:13" pos:end="1008:46"><decl pos:start="1008:13" pos:end="1008:45"><type pos:start="1008:13" pos:end="1008:42"><name pos:start="1008:13" pos:end="1008:40"><name pos:start="1008:13" pos:end="1008:18">struct</name> <name pos:start="1008:20" pos:end="1008:40">target_sel_arg_struct</name></name> <modifier pos:start="1008:42" pos:end="1008:42">*</modifier></type><name pos:start="1008:43" pos:end="1008:45">sel</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1009:13" pos:end="1009:42"><decl pos:start="1009:13" pos:end="1009:25"><type pos:start="1009:13" pos:end="1009:21"><name pos:start="1009:13" pos:end="1009:21">abi_ulong</name></type> <name pos:start="1009:23" pos:end="1009:25">inp</name></decl>, <decl pos:start="1009:28" pos:end="1009:31"><type ref="prev" pos:start="1009:13" pos:end="1009:21"/><name pos:start="1009:28" pos:end="1009:31">outp</name></decl>, <decl pos:start="1009:34" pos:end="1009:36"><type ref="prev" pos:start="1009:13" pos:end="1009:21"/><name pos:start="1009:34" pos:end="1009:36">exp</name></decl>, <decl pos:start="1009:39" pos:end="1009:41"><type ref="prev" pos:start="1009:13" pos:end="1009:21"/><name pos:start="1009:39" pos:end="1009:41">tvp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1010:13" pos:end="1010:22"><decl pos:start="1010:13" pos:end="1010:21"><type pos:start="1010:13" pos:end="1010:16"><name pos:start="1010:13" pos:end="1010:16">long</name></type> <name pos:start="1010:18" pos:end="1010:21">nsel</name></decl>;</decl_stmt>
            <if_stmt pos:start="1011:13" pos:end="1012:28"><if pos:start="1011:13" pos:end="1012:28">if <condition pos:start="1011:16" pos:end="1011:61">(<expr pos:start="1011:17" pos:end="1011:60"><operator pos:start="1011:17" pos:end="1011:17">!</operator><call pos:start="1011:18" pos:end="1011:60"><name pos:start="1011:18" pos:end="1011:33">lock_user_struct</name><argument_list pos:start="1011:34" pos:end="1011:60">(<argument pos:start="1011:35" pos:end="1011:45"><expr pos:start="1011:35" pos:end="1011:45"><name pos:start="1011:35" pos:end="1011:45">VERIFY_READ</name></expr></argument>, <argument pos:start="1011:48" pos:end="1011:50"><expr pos:start="1011:48" pos:end="1011:50"><name pos:start="1011:48" pos:end="1011:50">sel</name></expr></argument>, <argument pos:start="1011:53" pos:end="1011:56"><expr pos:start="1011:53" pos:end="1011:56"><name pos:start="1011:53" pos:end="1011:56">arg1</name></expr></argument>, <argument pos:start="1011:59" pos:end="1011:59"><expr pos:start="1011:59" pos:end="1011:59"><literal type="number" pos:start="1011:59" pos:end="1011:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1012:17" pos:end="1012:28"><block_content pos:start="1012:17" pos:end="1012:28">
                <goto pos:start="1012:17" pos:end="1012:28">goto <name pos:start="1012:22" pos:end="1012:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1013:13" pos:end="1013:35"><expr pos:start="1013:13" pos:end="1013:34"><name pos:start="1013:13" pos:end="1013:16">nsel</name> <operator pos:start="1013:18" pos:end="1013:18">=</operator> <call pos:start="1013:20" pos:end="1013:34"><name pos:start="1013:20" pos:end="1013:26">tswapal</name><argument_list pos:start="1013:27" pos:end="1013:34">(<argument pos:start="1013:28" pos:end="1013:33"><expr pos:start="1013:28" pos:end="1013:33"><name pos:start="1013:28" pos:end="1013:33"><name pos:start="1013:28" pos:end="1013:30">sel</name><operator pos:start="1013:31" pos:end="1013:32">-&gt;</operator><name pos:start="1013:33" pos:end="1013:33">n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1014:13" pos:end="1014:36"><expr pos:start="1014:13" pos:end="1014:35"><name pos:start="1014:13" pos:end="1014:15">inp</name> <operator pos:start="1014:17" pos:end="1014:17">=</operator> <call pos:start="1014:19" pos:end="1014:35"><name pos:start="1014:19" pos:end="1014:25">tswapal</name><argument_list pos:start="1014:26" pos:end="1014:35">(<argument pos:start="1014:27" pos:end="1014:34"><expr pos:start="1014:27" pos:end="1014:34"><name pos:start="1014:27" pos:end="1014:34"><name pos:start="1014:27" pos:end="1014:29">sel</name><operator pos:start="1014:30" pos:end="1014:31">-&gt;</operator><name pos:start="1014:32" pos:end="1014:34">inp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1015:13" pos:end="1015:38"><expr pos:start="1015:13" pos:end="1015:37"><name pos:start="1015:13" pos:end="1015:16">outp</name> <operator pos:start="1015:18" pos:end="1015:18">=</operator> <call pos:start="1015:20" pos:end="1015:37"><name pos:start="1015:20" pos:end="1015:26">tswapal</name><argument_list pos:start="1015:27" pos:end="1015:37">(<argument pos:start="1015:28" pos:end="1015:36"><expr pos:start="1015:28" pos:end="1015:36"><name pos:start="1015:28" pos:end="1015:36"><name pos:start="1015:28" pos:end="1015:30">sel</name><operator pos:start="1015:31" pos:end="1015:32">-&gt;</operator><name pos:start="1015:33" pos:end="1015:36">outp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1016:13" pos:end="1016:36"><expr pos:start="1016:13" pos:end="1016:35"><name pos:start="1016:13" pos:end="1016:15">exp</name> <operator pos:start="1016:17" pos:end="1016:17">=</operator> <call pos:start="1016:19" pos:end="1016:35"><name pos:start="1016:19" pos:end="1016:25">tswapal</name><argument_list pos:start="1016:26" pos:end="1016:35">(<argument pos:start="1016:27" pos:end="1016:34"><expr pos:start="1016:27" pos:end="1016:34"><name pos:start="1016:27" pos:end="1016:34"><name pos:start="1016:27" pos:end="1016:29">sel</name><operator pos:start="1016:30" pos:end="1016:31">-&gt;</operator><name pos:start="1016:32" pos:end="1016:34">exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1017:13" pos:end="1017:36"><expr pos:start="1017:13" pos:end="1017:35"><name pos:start="1017:13" pos:end="1017:15">tvp</name> <operator pos:start="1017:17" pos:end="1017:17">=</operator> <call pos:start="1017:19" pos:end="1017:35"><name pos:start="1017:19" pos:end="1017:25">tswapal</name><argument_list pos:start="1017:26" pos:end="1017:35">(<argument pos:start="1017:27" pos:end="1017:34"><expr pos:start="1017:27" pos:end="1017:34"><name pos:start="1017:27" pos:end="1017:34"><name pos:start="1017:27" pos:end="1017:29">sel</name><operator pos:start="1017:30" pos:end="1017:31">-&gt;</operator><name pos:start="1017:32" pos:end="1017:34">tvp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1018:13" pos:end="1018:45"><expr pos:start="1018:13" pos:end="1018:44"><call pos:start="1018:13" pos:end="1018:44"><name pos:start="1018:13" pos:end="1018:30">unlock_user_struct</name><argument_list pos:start="1018:31" pos:end="1018:44">(<argument pos:start="1018:32" pos:end="1018:34"><expr pos:start="1018:32" pos:end="1018:34"><name pos:start="1018:32" pos:end="1018:34">sel</name></expr></argument>, <argument pos:start="1018:37" pos:end="1018:40"><expr pos:start="1018:37" pos:end="1018:40"><name pos:start="1018:37" pos:end="1018:40">arg1</name></expr></argument>, <argument pos:start="1018:43" pos:end="1018:43"><expr pos:start="1018:43" pos:end="1018:43"><literal type="number" pos:start="1018:43" pos:end="1018:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1019:13" pos:end="1023:0"><expr pos:start="1019:13" pos:end="1019:54"><name pos:start="1019:13" pos:end="1019:15">ret</name> <operator pos:start="1019:17" pos:end="1019:17">=</operator> <call pos:start="1019:19" pos:end="1019:54"><name pos:start="1019:19" pos:end="1019:27">do_select</name><argument_list pos:start="1019:28" pos:end="1019:54">(<argument pos:start="1019:29" pos:end="1019:32"><expr pos:start="1019:29" pos:end="1019:32"><name pos:start="1019:29" pos:end="1019:32">nsel</name></expr></argument>, <argument pos:start="1019:35" pos:end="1019:37"><expr pos:start="1019:35" pos:end="1019:37"><name pos:start="1019:35" pos:end="1019:37">inp</name></expr></argument>, <argument pos:start="1019:40" pos:end="1019:43"><expr pos:start="1019:40" pos:end="1019:43"><name pos:start="1019:40" pos:end="1019:43">outp</name></expr></argument>, <argument pos:start="1019:46" pos:end="1019:48"><expr pos:start="1019:46" pos:end="1019:48"><name pos:start="1019:46" pos:end="1019:48">exp</name></expr></argument>, <argument pos:start="1019:51" pos:end="1019:53"><expr pos:start="1019:51" pos:end="1019:53"><name pos:start="1019:51" pos:end="1019:53">tvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1020:1" pos:end="1020:6">#<cpp:directive pos:start="1020:2" pos:end="1020:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="1021:1" pos:end="1021:6">#<cpp:directive pos:start="1021:2" pos:end="1021:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1022:1" pos:end="1022:25">#<cpp:directive pos:start="1022:2" pos:end="1022:6">ifdef</cpp:directive> <name pos:start="1022:8" pos:end="1022:25">TARGET_NR_pselect6</name></cpp:ifdef>
    <case pos:start="1023:5" pos:end="1023:28">case <expr pos:start="1023:10" pos:end="1023:27"><name pos:start="1023:10" pos:end="1023:27">TARGET_NR_pselect6</name></expr>:</case>
        <block pos:start="1024:9" pos:end="3541:14">{<block_content pos:start="1025:13" pos:end="3541:14">
            <decl_stmt pos:start="1025:13" pos:end="1025:62"><decl pos:start="1025:13" pos:end="1025:29"><type pos:start="1025:13" pos:end="1025:20"><name pos:start="1025:13" pos:end="1025:20">abi_long</name></type> <name pos:start="1025:22" pos:end="1025:29">rfd_addr</name></decl>, <decl pos:start="1025:32" pos:end="1025:39"><type ref="prev" pos:start="1025:13" pos:end="1025:20"/><name pos:start="1025:32" pos:end="1025:39">wfd_addr</name></decl>, <decl pos:start="1025:42" pos:end="1025:49"><type ref="prev" pos:start="1025:13" pos:end="1025:20"/><name pos:start="1025:42" pos:end="1025:49">efd_addr</name></decl>, <decl pos:start="1025:52" pos:end="1025:52"><type ref="prev" pos:start="1025:13" pos:end="1025:20"/><name pos:start="1025:52" pos:end="1025:52">n</name></decl>, <decl pos:start="1025:55" pos:end="1025:61"><type ref="prev" pos:start="1025:13" pos:end="1025:20"/><name pos:start="1025:55" pos:end="1025:61">ts_addr</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1026:13" pos:end="1026:36"><decl pos:start="1026:13" pos:end="1026:23"><type pos:start="1026:13" pos:end="1026:18"><name pos:start="1026:13" pos:end="1026:18">fd_set</name></type> <name pos:start="1026:20" pos:end="1026:23">rfds</name></decl>, <decl pos:start="1026:26" pos:end="1026:29"><type ref="prev" pos:start="1026:13" pos:end="1026:18"/><name pos:start="1026:26" pos:end="1026:29">wfds</name></decl>, <decl pos:start="1026:32" pos:end="1026:35"><type ref="prev" pos:start="1026:13" pos:end="1026:18"/><name pos:start="1026:32" pos:end="1026:35">efds</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1027:13" pos:end="1027:51"><decl pos:start="1027:13" pos:end="1027:28"><type pos:start="1027:13" pos:end="1027:20"><name pos:start="1027:13" pos:end="1027:18">fd_set</name> <modifier pos:start="1027:20" pos:end="1027:20">*</modifier></type><name pos:start="1027:21" pos:end="1027:28">rfds_ptr</name></decl>, <decl pos:start="1027:31" pos:end="1027:39"><type ref="prev" pos:start="1027:13" pos:end="1027:20"><modifier pos:start="1027:31" pos:end="1027:31">*</modifier></type><name pos:start="1027:32" pos:end="1027:39">wfds_ptr</name></decl>, <decl pos:start="1027:42" pos:end="1027:50"><type ref="prev" pos:start="1027:13" pos:end="1027:20"><modifier pos:start="1027:42" pos:end="1027:42">*</modifier></type><name pos:start="1027:43" pos:end="1027:50">efds_ptr</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1028:13" pos:end="1028:40"><decl pos:start="1028:13" pos:end="1028:30"><type pos:start="1028:13" pos:end="1028:27"><name pos:start="1028:13" pos:end="1028:27"><name pos:start="1028:13" pos:end="1028:18">struct</name> <name pos:start="1028:20" pos:end="1028:27">timespec</name></name></type> <name pos:start="1028:29" pos:end="1028:30">ts</name></decl>, <decl pos:start="1028:33" pos:end="1028:39"><type ref="prev" pos:start="1028:13" pos:end="1028:27"><modifier pos:start="1028:33" pos:end="1028:33">*</modifier></type><name pos:start="1028:34" pos:end="1028:39">ts_ptr</name></decl>;</decl_stmt>
            <comment type="block" pos:start="1029:13" pos:end="1032:15">/*
             * The 6th arg is actually two args smashed together,
             * so we cannot use the C library.
             */</comment>
            <decl_stmt pos:start="1033:13" pos:end="1033:25"><decl pos:start="1033:13" pos:end="1033:24"><type pos:start="1033:13" pos:end="1033:20"><name pos:start="1033:13" pos:end="1033:20">sigset_t</name></type> <name pos:start="1033:22" pos:end="1033:24">set</name></decl>;</decl_stmt>
            <struct pos:start="1034:13" pos:end="1037:28">struct <block pos:start="1034:20" pos:end="1037:13">{
                <decl_stmt pos:start="1035:17" pos:end="1035:30"><decl pos:start="1035:17" pos:end="1035:29"><type pos:start="1035:17" pos:end="1035:26"><name pos:start="1035:17" pos:end="1035:24">sigset_t</name> <modifier pos:start="1035:26" pos:end="1035:26">*</modifier></type><name pos:start="1035:27" pos:end="1035:29">set</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1036:17" pos:end="1036:28"><decl pos:start="1036:17" pos:end="1036:27"><type pos:start="1036:17" pos:end="1036:22"><name pos:start="1036:17" pos:end="1036:22">size_t</name></type> <name pos:start="1036:24" pos:end="1036:27">size</name></decl>;</decl_stmt>
            }</block> <decl pos:start="1037:15" pos:end="1037:17"><name pos:start="1037:15" pos:end="1037:17">sig</name></decl>, <decl pos:start="1037:20" pos:end="1037:27"><type ref="prev" pos:start="1036:17" pos:end="1036:22"><modifier pos:start="1037:20" pos:end="1037:20">*</modifier></type><name pos:start="1037:21" pos:end="1037:27">sig_ptr</name></decl>;</struct>
            <decl_stmt pos:start="1038:13" pos:end="1038:53"><decl pos:start="1038:13" pos:end="1038:32"><type pos:start="1038:13" pos:end="1038:21"><name pos:start="1038:13" pos:end="1038:21">abi_ulong</name></type> <name pos:start="1038:23" pos:end="1038:32">arg_sigset</name></decl>, <decl pos:start="1038:35" pos:end="1038:45"><type ref="prev" pos:start="1038:13" pos:end="1038:21"/><name pos:start="1038:35" pos:end="1038:45">arg_sigsize</name></decl>, <decl pos:start="1038:48" pos:end="1038:52"><type ref="prev" pos:start="1038:13" pos:end="1038:21"><modifier pos:start="1038:48" pos:end="1038:48">*</modifier></type><name pos:start="1038:49" pos:end="1038:52">arg7</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1039:13" pos:end="1039:43"><decl pos:start="1039:13" pos:end="1039:42"><type pos:start="1039:13" pos:end="1039:29"><name pos:start="1039:13" pos:end="1039:27">target_sigset_t</name> <modifier pos:start="1039:29" pos:end="1039:29">*</modifier></type><name pos:start="1039:30" pos:end="1039:42">target_sigset</name></decl>;</decl_stmt>
            <expr_stmt pos:start="1040:13" pos:end="1040:21"><expr pos:start="1040:13" pos:end="1040:20"><name pos:start="1040:13" pos:end="1040:13">n</name> <operator pos:start="1040:15" pos:end="1040:15">=</operator> <name pos:start="1040:17" pos:end="1040:20">arg1</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1041:13" pos:end="1041:28"><expr pos:start="1041:13" pos:end="1041:27"><name pos:start="1041:13" pos:end="1041:20">rfd_addr</name> <operator pos:start="1041:22" pos:end="1041:22">=</operator> <name pos:start="1041:24" pos:end="1041:27">arg2</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1042:13" pos:end="1042:28"><expr pos:start="1042:13" pos:end="1042:27"><name pos:start="1042:13" pos:end="1042:20">wfd_addr</name> <operator pos:start="1042:22" pos:end="1042:22">=</operator> <name pos:start="1042:24" pos:end="1042:27">arg3</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1043:13" pos:end="1043:28"><expr pos:start="1043:13" pos:end="1043:27"><name pos:start="1043:13" pos:end="1043:20">efd_addr</name> <operator pos:start="1043:22" pos:end="1043:22">=</operator> <name pos:start="1043:24" pos:end="1043:27">arg4</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1044:13" pos:end="1044:27"><expr pos:start="1044:13" pos:end="1044:26"><name pos:start="1044:13" pos:end="1044:19">ts_addr</name> <operator pos:start="1044:21" pos:end="1044:21">=</operator> <name pos:start="1044:23" pos:end="1044:26">arg5</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1045:13" pos:end="1045:74"><expr pos:start="1045:13" pos:end="1045:73"><name pos:start="1045:13" pos:end="1045:15">ret</name> <operator pos:start="1045:17" pos:end="1045:17">=</operator> <call pos:start="1045:19" pos:end="1045:73"><name pos:start="1045:19" pos:end="1045:42">copy_from_user_fdset_ptr</name><argument_list pos:start="1045:43" pos:end="1045:73">(<argument pos:start="1045:44" pos:end="1045:48"><expr pos:start="1045:44" pos:end="1045:48"><operator pos:start="1045:44" pos:end="1045:44">&amp;</operator><name pos:start="1045:45" pos:end="1045:48">rfds</name></expr></argument>, <argument pos:start="1045:51" pos:end="1045:59"><expr pos:start="1045:51" pos:end="1045:59"><operator pos:start="1045:51" pos:end="1045:51">&amp;</operator><name pos:start="1045:52" pos:end="1045:59">rfds_ptr</name></expr></argument>, <argument pos:start="1045:62" pos:end="1045:69"><expr pos:start="1045:62" pos:end="1045:69"><name pos:start="1045:62" pos:end="1045:69">rfd_addr</name></expr></argument>, <argument pos:start="1045:72" pos:end="1045:72"><expr pos:start="1045:72" pos:end="1045:72"><name pos:start="1045:72" pos:end="1045:72">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1046:13" pos:end="3541:14"><if pos:start="1046:13" pos:end="3541:14">if <condition pos:start="1046:16" pos:end="1046:20">(<expr pos:start="1046:17" pos:end="1046:19"><name pos:start="1046:17" pos:end="1046:19">ret</name></expr>)</condition> <block pos:start="1046:22" pos:end="3541:14">{<block_content pos:start="1047:17" pos:end="3541:14">
                <goto pos:start="1047:17" pos:end="1047:26">goto <name pos:start="1047:22" pos:end="1047:25">fail</name>;</goto>
            <expr_stmt pos:start="1048:13" pos:end="1048:74"><expr pos:start="1048:13" pos:end="1048:73"><name pos:start="1048:13" pos:end="1048:15">ret</name> <operator pos:start="1048:17" pos:end="1048:17">=</operator> <call pos:start="1048:19" pos:end="1048:73"><name pos:start="1048:19" pos:end="1048:42">copy_from_user_fdset_ptr</name><argument_list pos:start="1048:43" pos:end="1048:73">(<argument pos:start="1048:44" pos:end="1048:48"><expr pos:start="1048:44" pos:end="1048:48"><operator pos:start="1048:44" pos:end="1048:44">&amp;</operator><name pos:start="1048:45" pos:end="1048:48">wfds</name></expr></argument>, <argument pos:start="1048:51" pos:end="1048:59"><expr pos:start="1048:51" pos:end="1048:59"><operator pos:start="1048:51" pos:end="1048:51">&amp;</operator><name pos:start="1048:52" pos:end="1048:59">wfds_ptr</name></expr></argument>, <argument pos:start="1048:62" pos:end="1048:69"><expr pos:start="1048:62" pos:end="1048:69"><name pos:start="1048:62" pos:end="1048:69">wfd_addr</name></expr></argument>, <argument pos:start="1048:72" pos:end="1048:72"><expr pos:start="1048:72" pos:end="1048:72"><name pos:start="1048:72" pos:end="1048:72">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1049:13" pos:end="3541:14"><if pos:start="1049:13" pos:end="3541:14">if <condition pos:start="1049:16" pos:end="1049:20">(<expr pos:start="1049:17" pos:end="1049:19"><name pos:start="1049:17" pos:end="1049:19">ret</name></expr>)</condition> <block pos:start="1049:22" pos:end="3541:14">{<block_content pos:start="1050:17" pos:end="3541:14">
                <goto pos:start="1050:17" pos:end="1050:26">goto <name pos:start="1050:22" pos:end="1050:25">fail</name>;</goto>
            <expr_stmt pos:start="1051:13" pos:end="1051:74"><expr pos:start="1051:13" pos:end="1051:73"><name pos:start="1051:13" pos:end="1051:15">ret</name> <operator pos:start="1051:17" pos:end="1051:17">=</operator> <call pos:start="1051:19" pos:end="1051:73"><name pos:start="1051:19" pos:end="1051:42">copy_from_user_fdset_ptr</name><argument_list pos:start="1051:43" pos:end="1051:73">(<argument pos:start="1051:44" pos:end="1051:48"><expr pos:start="1051:44" pos:end="1051:48"><operator pos:start="1051:44" pos:end="1051:44">&amp;</operator><name pos:start="1051:45" pos:end="1051:48">efds</name></expr></argument>, <argument pos:start="1051:51" pos:end="1051:59"><expr pos:start="1051:51" pos:end="1051:59"><operator pos:start="1051:51" pos:end="1051:51">&amp;</operator><name pos:start="1051:52" pos:end="1051:59">efds_ptr</name></expr></argument>, <argument pos:start="1051:62" pos:end="1051:69"><expr pos:start="1051:62" pos:end="1051:69"><name pos:start="1051:62" pos:end="1051:69">efd_addr</name></expr></argument>, <argument pos:start="1051:72" pos:end="1051:72"><expr pos:start="1051:72" pos:end="1051:72"><name pos:start="1051:72" pos:end="1051:72">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1052:13" pos:end="3541:14"><if pos:start="1052:13" pos:end="3541:14">if <condition pos:start="1052:16" pos:end="1052:20">(<expr pos:start="1052:17" pos:end="1052:19"><name pos:start="1052:17" pos:end="1052:19">ret</name></expr>)</condition> <block pos:start="1052:22" pos:end="3541:14">{<block_content pos:start="1053:17" pos:end="3541:14">
                <goto pos:start="1053:17" pos:end="1053:26">goto <name pos:start="1053:22" pos:end="1053:25">fail</name>;</goto>
            <comment type="block" pos:start="1054:13" pos:end="1057:15">/*
             * This takes a timespec, and not a timeval, so we cannot
             * use the do_select() helper ...
             */</comment>
            <if_stmt pos:start="1058:13" pos:end="3541:14"><if pos:start="1058:13" pos:end="3541:14">if <condition pos:start="1058:16" pos:end="1058:24">(<expr pos:start="1058:17" pos:end="1058:23"><name pos:start="1058:17" pos:end="1058:23">ts_addr</name></expr>)</condition> <block pos:start="1058:26" pos:end="3541:14">{<block_content pos:start="1059:17" pos:end="3541:14">
                <if_stmt pos:start="1059:17" pos:end="3541:14"><if pos:start="1059:17" pos:end="1062:13">if <condition pos:start="1059:20" pos:end="1059:58">(<expr pos:start="1059:21" pos:end="1059:57"><call pos:start="1059:21" pos:end="1059:57"><name pos:start="1059:21" pos:end="1059:43">target_to_host_timespec</name><argument_list pos:start="1059:44" pos:end="1059:57">(<argument pos:start="1059:45" pos:end="1059:47"><expr pos:start="1059:45" pos:end="1059:47"><operator pos:start="1059:45" pos:end="1059:45">&amp;</operator><name pos:start="1059:46" pos:end="1059:47">ts</name></expr></argument>, <argument pos:start="1059:50" pos:end="1059:56"><expr pos:start="1059:50" pos:end="1059:56"><name pos:start="1059:50" pos:end="1059:56">ts_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1059:60" pos:end="1062:13">{<block_content pos:start="1060:21" pos:end="1061:29">
                    <goto pos:start="1060:21" pos:end="1060:32">goto <name pos:start="1060:26" pos:end="1060:31">efault</name>;</goto>
                <expr_stmt pos:start="1061:17" pos:end="1061:29"><expr pos:start="1061:17" pos:end="1061:28"><name pos:start="1061:17" pos:end="1061:22">ts_ptr</name> <operator pos:start="1061:24" pos:end="1061:24">=</operator> <operator pos:start="1061:26" pos:end="1061:26">&amp;</operator><name pos:start="1061:27" pos:end="1061:28">ts</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1062:15" pos:end="3541:14">else <block pos:start="1062:20" pos:end="3541:14">{<block_content pos:start="1063:17" pos:end="3541:14">
                <expr_stmt pos:start="1063:17" pos:end="1063:30"><expr pos:start="1063:17" pos:end="1063:29"><name pos:start="1063:17" pos:end="1063:22">ts_ptr</name> <operator pos:start="1063:24" pos:end="1063:24">=</operator> <name pos:start="1063:26" pos:end="1063:29">NULL</name></expr>;</expr_stmt>
            <comment type="block" pos:start="1064:13" pos:end="1064:60">/* Extract the two packed args for the sigset */</comment>
            <if_stmt pos:start="1065:13" pos:end="3541:14"><if pos:start="1065:13" pos:end="3541:14">if <condition pos:start="1065:16" pos:end="1065:21">(<expr pos:start="1065:17" pos:end="1065:20"><name pos:start="1065:17" pos:end="1065:20">arg6</name></expr>)</condition> <block pos:start="1065:23" pos:end="3541:14">{<block_content pos:start="1066:17" pos:end="3541:14">
                <expr_stmt pos:start="1066:17" pos:end="1066:31"><expr pos:start="1066:17" pos:end="1066:30"><name pos:start="1066:17" pos:end="1066:23">sig_ptr</name> <operator pos:start="1066:25" pos:end="1066:25">=</operator> <operator pos:start="1066:27" pos:end="1066:27">&amp;</operator><name pos:start="1066:28" pos:end="1066:30">sig</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1067:17" pos:end="1067:41"><expr pos:start="1067:17" pos:end="1067:40"><name pos:start="1067:17" pos:end="1067:24"><name pos:start="1067:17" pos:end="1067:19">sig</name><operator pos:start="1067:20" pos:end="1067:20">.</operator><name pos:start="1067:21" pos:end="1067:24">size</name></name> <operator pos:start="1067:26" pos:end="1067:26">=</operator> <name pos:start="1067:28" pos:end="1067:40">SIGSET_T_SIZE</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1068:17" pos:end="1068:74"><expr pos:start="1068:17" pos:end="1068:73"><name pos:start="1068:17" pos:end="1068:20">arg7</name> <operator pos:start="1068:22" pos:end="1068:22">=</operator> <call pos:start="1068:24" pos:end="1068:73"><name pos:start="1068:24" pos:end="1068:32">lock_user</name><argument_list pos:start="1068:33" pos:end="1068:73">(<argument pos:start="1068:34" pos:end="1068:44"><expr pos:start="1068:34" pos:end="1068:44"><name pos:start="1068:34" pos:end="1068:44">VERIFY_READ</name></expr></argument>, <argument pos:start="1068:47" pos:end="1068:50"><expr pos:start="1068:47" pos:end="1068:50"><name pos:start="1068:47" pos:end="1068:50">arg6</name></expr></argument>, <argument pos:start="1068:53" pos:end="1068:69"><expr pos:start="1068:53" pos:end="1068:69"><sizeof pos:start="1068:53" pos:end="1068:65">sizeof<argument_list pos:start="1068:59" pos:end="1068:65">(<argument pos:start="1068:60" pos:end="1068:64"><expr pos:start="1068:60" pos:end="1068:64"><operator pos:start="1068:60" pos:end="1068:60">*</operator><name pos:start="1068:61" pos:end="1068:64">arg7</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1068:67" pos:end="1068:67">*</operator> <literal type="number" pos:start="1068:69" pos:end="1068:69">2</literal></expr></argument>, <argument pos:start="1068:72" pos:end="1068:72"><expr pos:start="1068:72" pos:end="1068:72"><literal type="number" pos:start="1068:72" pos:end="1068:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1069:17" pos:end="3541:14"><if pos:start="1069:17" pos:end="3541:14">if <condition pos:start="1069:20" pos:end="1069:26">(<expr pos:start="1069:21" pos:end="1069:25"><operator pos:start="1069:21" pos:end="1069:21">!</operator><name pos:start="1069:22" pos:end="1069:25">arg7</name></expr>)</condition> <block pos:start="1069:28" pos:end="3541:14">{<block_content pos:start="1070:21" pos:end="3541:14">
                    <goto pos:start="1070:21" pos:end="1070:32">goto <name pos:start="1070:26" pos:end="1070:31">efault</name>;</goto>
                <expr_stmt pos:start="1071:17" pos:end="1071:46"><expr pos:start="1071:17" pos:end="1071:45"><name pos:start="1071:17" pos:end="1071:26">arg_sigset</name> <operator pos:start="1071:28" pos:end="1071:28">=</operator> <call pos:start="1071:30" pos:end="1071:45"><name pos:start="1071:30" pos:end="1071:36">tswapal</name><argument_list pos:start="1071:37" pos:end="1071:45">(<argument pos:start="1071:38" pos:end="1071:44"><expr pos:start="1071:38" pos:end="1071:44"><name pos:start="1071:38" pos:end="1071:44"><name pos:start="1071:38" pos:end="1071:41">arg7</name><index pos:start="1071:42" pos:end="1071:44">[<expr pos:start="1071:43" pos:end="1071:43"><literal type="number" pos:start="1071:43" pos:end="1071:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1072:17" pos:end="1072:47"><expr pos:start="1072:17" pos:end="1072:46"><name pos:start="1072:17" pos:end="1072:27">arg_sigsize</name> <operator pos:start="1072:29" pos:end="1072:29">=</operator> <call pos:start="1072:31" pos:end="1072:46"><name pos:start="1072:31" pos:end="1072:37">tswapal</name><argument_list pos:start="1072:38" pos:end="1072:46">(<argument pos:start="1072:39" pos:end="1072:45"><expr pos:start="1072:39" pos:end="1072:45"><name pos:start="1072:39" pos:end="1072:45"><name pos:start="1072:39" pos:end="1072:42">arg7</name><index pos:start="1072:43" pos:end="1072:45">[<expr pos:start="1072:44" pos:end="1072:44"><literal type="number" pos:start="1072:44" pos:end="1072:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1073:17" pos:end="1073:43"><expr pos:start="1073:17" pos:end="1073:42"><call pos:start="1073:17" pos:end="1073:42"><name pos:start="1073:17" pos:end="1073:27">unlock_user</name><argument_list pos:start="1073:28" pos:end="1073:42">(<argument pos:start="1073:29" pos:end="1073:32"><expr pos:start="1073:29" pos:end="1073:32"><name pos:start="1073:29" pos:end="1073:32">arg7</name></expr></argument>, <argument pos:start="1073:35" pos:end="1073:38"><expr pos:start="1073:35" pos:end="1073:38"><name pos:start="1073:35" pos:end="1073:38">arg6</name></expr></argument>, <argument pos:start="1073:41" pos:end="1073:41"><expr pos:start="1073:41" pos:end="1073:41"><literal type="number" pos:start="1073:41" pos:end="1073:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1074:17" pos:end="3541:14"><if pos:start="1074:17" pos:end="3541:14">if <condition pos:start="1074:20" pos:end="1074:31">(<expr pos:start="1074:21" pos:end="1074:30"><name pos:start="1074:21" pos:end="1074:30">arg_sigset</name></expr>)</condition> <block pos:start="1074:33" pos:end="3541:14">{<block_content pos:start="1075:21" pos:end="3541:14">
                    <expr_stmt pos:start="1075:21" pos:end="1075:35"><expr pos:start="1075:21" pos:end="1075:34"><name pos:start="1075:21" pos:end="1075:27"><name pos:start="1075:21" pos:end="1075:23">sig</name><operator pos:start="1075:24" pos:end="1075:24">.</operator><name pos:start="1075:25" pos:end="1075:27">set</name></name> <operator pos:start="1075:29" pos:end="1075:29">=</operator> <operator pos:start="1075:31" pos:end="1075:31">&amp;</operator><name pos:start="1075:32" pos:end="1075:34">set</name></expr>;</expr_stmt>
                    <if_stmt pos:start="1076:21" pos:end="3541:14"><if pos:start="1076:21" pos:end="3541:14">if <condition pos:start="1076:24" pos:end="1076:62">(<expr pos:start="1076:25" pos:end="1076:61"><name pos:start="1076:25" pos:end="1076:35">arg_sigsize</name> <operator pos:start="1076:37" pos:end="1076:38">!=</operator> <sizeof pos:start="1076:40" pos:end="1076:61">sizeof<argument_list pos:start="1076:46" pos:end="1076:61">(<argument pos:start="1076:47" pos:end="1076:60"><expr pos:start="1076:47" pos:end="1076:60"><operator pos:start="1076:47" pos:end="1076:47">*</operator><name pos:start="1076:48" pos:end="1076:60">target_sigset</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="1076:64" pos:end="3541:14">{<block_content pos:start="1078:25" pos:end="3541:14">
                        <comment type="block" pos:start="1077:25" pos:end="1077:78">/* Like the kernel, we enforce correct size sigsets */</comment>
                        <goto pos:start="1078:25" pos:end="1078:34">goto <name pos:start="1078:30" pos:end="1078:33">fail</name>;</goto>
                    <expr_stmt pos:start="1079:21" pos:end="1080:73"><expr pos:start="1079:21" pos:end="1080:72"><name pos:start="1079:21" pos:end="1079:33">target_sigset</name> <operator pos:start="1079:35" pos:end="1079:35">=</operator> <call pos:start="1079:37" pos:end="1080:72"><name pos:start="1079:37" pos:end="1079:45">lock_user</name><argument_list pos:start="1079:46" pos:end="1080:72">(<argument pos:start="1079:47" pos:end="1079:57"><expr pos:start="1079:47" pos:end="1079:57"><name pos:start="1079:47" pos:end="1079:57">VERIFY_READ</name></expr></argument>, <argument pos:start="1079:60" pos:end="1079:69"><expr pos:start="1079:60" pos:end="1079:69"><name pos:start="1079:60" pos:end="1079:69">arg_sigset</name></expr></argument>,
                                              <argument pos:start="1080:47" pos:end="1080:68"><expr pos:start="1080:47" pos:end="1080:68"><sizeof pos:start="1080:47" pos:end="1080:68">sizeof<argument_list pos:start="1080:53" pos:end="1080:68">(<argument pos:start="1080:54" pos:end="1080:67"><expr pos:start="1080:54" pos:end="1080:67"><operator pos:start="1080:54" pos:end="1080:54">*</operator><name pos:start="1080:55" pos:end="1080:67">target_sigset</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1080:71" pos:end="1080:71"><expr pos:start="1080:71" pos:end="1080:71"><literal type="number" pos:start="1080:71" pos:end="1080:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="1081:21" pos:end="1087:13"><if pos:start="1081:21" pos:end="1085:17">if <condition pos:start="1081:24" pos:end="1081:39">(<expr pos:start="1081:25" pos:end="1081:38"><operator pos:start="1081:25" pos:end="1081:25">!</operator><name pos:start="1081:26" pos:end="1081:38">target_sigset</name></expr>)</condition> <block pos:start="1081:41" pos:end="1085:17">{<block_content pos:start="1082:25" pos:end="1084:62">
                        <goto pos:start="1082:25" pos:end="1082:36">goto <name pos:start="1082:30" pos:end="1082:35">efault</name>;</goto>
                    <expr_stmt pos:start="1083:21" pos:end="1083:63"><expr pos:start="1083:21" pos:end="1083:62"><call pos:start="1083:21" pos:end="1083:62"><name pos:start="1083:21" pos:end="1083:41">target_to_host_sigset</name><argument_list pos:start="1083:42" pos:end="1083:62">(<argument pos:start="1083:43" pos:end="1083:46"><expr pos:start="1083:43" pos:end="1083:46"><operator pos:start="1083:43" pos:end="1083:43">&amp;</operator><name pos:start="1083:44" pos:end="1083:46">set</name></expr></argument>, <argument pos:start="1083:49" pos:end="1083:61"><expr pos:start="1083:49" pos:end="1083:61"><name pos:start="1083:49" pos:end="1083:61">target_sigset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1084:21" pos:end="1084:62"><expr pos:start="1084:21" pos:end="1084:61"><call pos:start="1084:21" pos:end="1084:61"><name pos:start="1084:21" pos:end="1084:31">unlock_user</name><argument_list pos:start="1084:32" pos:end="1084:61">(<argument pos:start="1084:33" pos:end="1084:45"><expr pos:start="1084:33" pos:end="1084:45"><name pos:start="1084:33" pos:end="1084:45">target_sigset</name></expr></argument>, <argument pos:start="1084:48" pos:end="1084:57"><expr pos:start="1084:48" pos:end="1084:57"><name pos:start="1084:48" pos:end="1084:57">arg_sigset</name></expr></argument>, <argument pos:start="1084:60" pos:end="1084:60"><expr pos:start="1084:60" pos:end="1084:60"><literal type="number" pos:start="1084:60" pos:end="1084:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="1085:19" pos:end="1087:13">else <block pos:start="1085:24" pos:end="1087:13">{<block_content pos:start="1086:21" pos:end="1086:35">
                    <expr_stmt pos:start="1086:21" pos:end="1086:35"><expr pos:start="1086:21" pos:end="1086:34"><name pos:start="1086:21" pos:end="1086:27"><name pos:start="1086:21" pos:end="1086:23">sig</name><operator pos:start="1086:24" pos:end="1086:24">.</operator><name pos:start="1086:25" pos:end="1086:27">set</name></name> <operator pos:start="1086:29" pos:end="1086:29">=</operator> <name pos:start="1086:31" pos:end="1086:34">NULL</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="1087:15" pos:end="3541:14"><else pos:start="1087:15" pos:end="3541:14">else <block pos:start="1087:20" pos:end="3541:14">{<block_content pos:start="1088:17" pos:end="3541:14">
                <expr_stmt pos:start="1088:17" pos:end="1088:31"><expr pos:start="1088:17" pos:end="1088:30"><name pos:start="1088:17" pos:end="1088:23">sig_ptr</name> <operator pos:start="1088:25" pos:end="1088:25">=</operator> <name pos:start="1088:27" pos:end="1088:30">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1089:13" pos:end="1090:60"><expr pos:start="1089:13" pos:end="1090:59"><name pos:start="1089:13" pos:end="1089:15">ret</name> <operator pos:start="1089:17" pos:end="1089:17">=</operator> <call pos:start="1089:19" pos:end="1090:59"><name pos:start="1089:19" pos:end="1089:27">get_errno</name><argument_list pos:start="1089:28" pos:end="1090:59">(<argument pos:start="1089:29" pos:end="1090:58"><expr pos:start="1089:29" pos:end="1090:58"><call pos:start="1089:29" pos:end="1090:58"><name pos:start="1089:29" pos:end="1089:41">safe_pselect6</name><argument_list pos:start="1089:42" pos:end="1090:58">(<argument pos:start="1089:43" pos:end="1089:43"><expr pos:start="1089:43" pos:end="1089:43"><name pos:start="1089:43" pos:end="1089:43">n</name></expr></argument>, <argument pos:start="1089:46" pos:end="1089:53"><expr pos:start="1089:46" pos:end="1089:53"><name pos:start="1089:46" pos:end="1089:53">rfds_ptr</name></expr></argument>, <argument pos:start="1089:56" pos:end="1089:63"><expr pos:start="1089:56" pos:end="1089:63"><name pos:start="1089:56" pos:end="1089:63">wfds_ptr</name></expr></argument>, <argument pos:start="1089:66" pos:end="1089:73"><expr pos:start="1089:66" pos:end="1089:73"><name pos:start="1089:66" pos:end="1089:73">efds_ptr</name></expr></argument>,
                                          <argument pos:start="1090:43" pos:end="1090:48"><expr pos:start="1090:43" pos:end="1090:48"><name pos:start="1090:43" pos:end="1090:48">ts_ptr</name></expr></argument>, <argument pos:start="1090:51" pos:end="1090:57"><expr pos:start="1090:51" pos:end="1090:57"><name pos:start="1090:51" pos:end="1090:57">sig_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1091:13" pos:end="3541:14"><if pos:start="1091:13" pos:end="3541:14">if <condition pos:start="1091:16" pos:end="1091:31">(<expr pos:start="1091:17" pos:end="1091:30"><operator pos:start="1091:17" pos:end="1091:17">!</operator><call pos:start="1091:18" pos:end="1091:30"><name pos:start="1091:18" pos:end="1091:25">is_error</name><argument_list pos:start="1091:26" pos:end="1091:30">(<argument pos:start="1091:27" pos:end="1091:29"><expr pos:start="1091:27" pos:end="1091:29"><name pos:start="1091:27" pos:end="1091:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1091:33" pos:end="3541:14">{<block_content pos:start="1092:17" pos:end="3541:14">
                <if_stmt pos:start="1092:17" pos:end="1093:32"><if pos:start="1092:17" pos:end="1093:32">if <condition pos:start="1092:20" pos:end="1092:71">(<expr pos:start="1092:21" pos:end="1092:70"><name pos:start="1092:21" pos:end="1092:28">rfd_addr</name> <operator pos:start="1092:30" pos:end="1092:31">&amp;&amp;</operator> <call pos:start="1092:33" pos:end="1092:70"><name pos:start="1092:33" pos:end="1092:50">copy_to_user_fdset</name><argument_list pos:start="1092:51" pos:end="1092:70">(<argument pos:start="1092:52" pos:end="1092:59"><expr pos:start="1092:52" pos:end="1092:59"><name pos:start="1092:52" pos:end="1092:59">rfd_addr</name></expr></argument>, <argument pos:start="1092:62" pos:end="1092:66"><expr pos:start="1092:62" pos:end="1092:66"><operator pos:start="1092:62" pos:end="1092:62">&amp;</operator><name pos:start="1092:63" pos:end="1092:66">rfds</name></expr></argument>, <argument pos:start="1092:69" pos:end="1092:69"><expr pos:start="1092:69" pos:end="1092:69"><name pos:start="1092:69" pos:end="1092:69">n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1093:21" pos:end="1093:32"><block_content pos:start="1093:21" pos:end="1093:32">
                    <goto pos:start="1093:21" pos:end="1093:32">goto <name pos:start="1093:26" pos:end="1093:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="1094:17" pos:end="1095:32"><if pos:start="1094:17" pos:end="1095:32">if <condition pos:start="1094:20" pos:end="1094:71">(<expr pos:start="1094:21" pos:end="1094:70"><name pos:start="1094:21" pos:end="1094:28">wfd_addr</name> <operator pos:start="1094:30" pos:end="1094:31">&amp;&amp;</operator> <call pos:start="1094:33" pos:end="1094:70"><name pos:start="1094:33" pos:end="1094:50">copy_to_user_fdset</name><argument_list pos:start="1094:51" pos:end="1094:70">(<argument pos:start="1094:52" pos:end="1094:59"><expr pos:start="1094:52" pos:end="1094:59"><name pos:start="1094:52" pos:end="1094:59">wfd_addr</name></expr></argument>, <argument pos:start="1094:62" pos:end="1094:66"><expr pos:start="1094:62" pos:end="1094:66"><operator pos:start="1094:62" pos:end="1094:62">&amp;</operator><name pos:start="1094:63" pos:end="1094:66">wfds</name></expr></argument>, <argument pos:start="1094:69" pos:end="1094:69"><expr pos:start="1094:69" pos:end="1094:69"><name pos:start="1094:69" pos:end="1094:69">n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1095:21" pos:end="1095:32"><block_content pos:start="1095:21" pos:end="1095:32">
                    <goto pos:start="1095:21" pos:end="1095:32">goto <name pos:start="1095:26" pos:end="1095:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="1096:17" pos:end="1097:32"><if pos:start="1096:17" pos:end="1097:32">if <condition pos:start="1096:20" pos:end="1096:71">(<expr pos:start="1096:21" pos:end="1096:70"><name pos:start="1096:21" pos:end="1096:28">efd_addr</name> <operator pos:start="1096:30" pos:end="1096:31">&amp;&amp;</operator> <call pos:start="1096:33" pos:end="1096:70"><name pos:start="1096:33" pos:end="1096:50">copy_to_user_fdset</name><argument_list pos:start="1096:51" pos:end="1096:70">(<argument pos:start="1096:52" pos:end="1096:59"><expr pos:start="1096:52" pos:end="1096:59"><name pos:start="1096:52" pos:end="1096:59">efd_addr</name></expr></argument>, <argument pos:start="1096:62" pos:end="1096:66"><expr pos:start="1096:62" pos:end="1096:66"><operator pos:start="1096:62" pos:end="1096:62">&amp;</operator><name pos:start="1096:63" pos:end="1096:66">efds</name></expr></argument>, <argument pos:start="1096:69" pos:end="1096:69"><expr pos:start="1096:69" pos:end="1096:69"><name pos:start="1096:69" pos:end="1096:69">n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1097:21" pos:end="1097:32"><block_content pos:start="1097:21" pos:end="1097:32">
                    <goto pos:start="1097:21" pos:end="1097:32">goto <name pos:start="1097:26" pos:end="1097:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="1098:17" pos:end="1102:0"><if pos:start="1098:17" pos:end="1102:0">if <condition pos:start="1098:20" pos:end="1098:69">(<expr pos:start="1098:21" pos:end="1098:68"><name pos:start="1098:21" pos:end="1098:27">ts_addr</name> <operator pos:start="1098:29" pos:end="1098:30">&amp;&amp;</operator> <call pos:start="1098:32" pos:end="1098:68"><name pos:start="1098:32" pos:end="1098:54">host_to_target_timespec</name><argument_list pos:start="1098:55" pos:end="1098:68">(<argument pos:start="1098:56" pos:end="1098:62"><expr pos:start="1098:56" pos:end="1098:62"><name pos:start="1098:56" pos:end="1098:62">ts_addr</name></expr></argument>, <argument pos:start="1098:65" pos:end="1098:67"><expr pos:start="1098:65" pos:end="1098:67"><operator pos:start="1098:65" pos:end="1098:65">&amp;</operator><name pos:start="1098:66" pos:end="1098:67">ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1099:21" pos:end="1102:0"><block_content pos:start="1099:21" pos:end="1102:0">
                    <goto pos:start="1099:21" pos:end="1102:0">goto <name pos:start="1099:26" pos:end="1099:31">efault</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif pos:start="1100:1" pos:end="1100:6">#<cpp:directive pos:start="1100:2" pos:end="1100:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1101:1" pos:end="1101:24">#<cpp:directive pos:start="1101:2" pos:end="1101:6">ifdef</cpp:directive> <name pos:start="1101:8" pos:end="1101:24">TARGET_NR_symlink</name></cpp:ifdef>
    <case pos:start="1102:5" pos:end="1102:27">case <expr pos:start="1102:10" pos:end="1102:26"><name pos:start="1102:10" pos:end="1102:26">TARGET_NR_symlink</name></expr>:</case>
        <block pos:start="1103:9" pos:end="3541:14">{<block_content pos:start="1104:13" pos:end="3541:14">
            <decl_stmt pos:start="1104:13" pos:end="1104:21"><decl pos:start="1104:13" pos:end="1104:20"><type pos:start="1104:13" pos:end="1104:18"><name pos:start="1104:13" pos:end="1104:16">void</name> <modifier pos:start="1104:18" pos:end="1104:18">*</modifier></type><name pos:start="1104:19" pos:end="1104:20">p2</name></decl>;</decl_stmt>
            <expr_stmt pos:start="1105:13" pos:end="1105:39"><expr pos:start="1105:13" pos:end="1105:38"><name pos:start="1105:13" pos:end="1105:13">p</name> <operator pos:start="1105:15" pos:end="1105:15">=</operator> <call pos:start="1105:17" pos:end="1105:38"><name pos:start="1105:17" pos:end="1105:32">lock_user_string</name><argument_list pos:start="1105:33" pos:end="1105:38">(<argument pos:start="1105:34" pos:end="1105:37"><expr pos:start="1105:34" pos:end="1105:37"><name pos:start="1105:34" pos:end="1105:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1106:13" pos:end="1106:40"><expr pos:start="1106:13" pos:end="1106:39"><name pos:start="1106:13" pos:end="1106:14">p2</name> <operator pos:start="1106:16" pos:end="1106:16">=</operator> <call pos:start="1106:18" pos:end="1106:39"><name pos:start="1106:18" pos:end="1106:33">lock_user_string</name><argument_list pos:start="1106:34" pos:end="1106:39">(<argument pos:start="1106:35" pos:end="1106:38"><expr pos:start="1106:35" pos:end="1106:38"><name pos:start="1106:35" pos:end="1106:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1107:13" pos:end="1110:48"><if pos:start="1107:13" pos:end="1108:37">if <condition pos:start="1107:16" pos:end="1107:26">(<expr pos:start="1107:17" pos:end="1107:25"><operator pos:start="1107:17" pos:end="1107:17">!</operator><name pos:start="1107:18" pos:end="1107:18">p</name> <operator pos:start="1107:20" pos:end="1107:21">||</operator> <operator pos:start="1107:23" pos:end="1107:23">!</operator><name pos:start="1107:24" pos:end="1107:25">p2</name></expr>)</condition><block type="pseudo" pos:start="1108:17" pos:end="1108:37"><block_content pos:start="1108:17" pos:end="1108:37">
                <expr_stmt pos:start="1108:17" pos:end="1108:37"><expr pos:start="1108:17" pos:end="1108:36"><name pos:start="1108:17" pos:end="1108:19">ret</name> <operator pos:start="1108:21" pos:end="1108:21">=</operator> <operator pos:start="1108:23" pos:end="1108:23">-</operator><name pos:start="1108:24" pos:end="1108:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1109:13" pos:end="1110:48">else<block type="pseudo" pos:start="1110:17" pos:end="1110:48"><block_content pos:start="1110:17" pos:end="1110:48">
                <expr_stmt pos:start="1110:17" pos:end="1110:48"><expr pos:start="1110:17" pos:end="1110:47"><name pos:start="1110:17" pos:end="1110:19">ret</name> <operator pos:start="1110:21" pos:end="1110:21">=</operator> <call pos:start="1110:23" pos:end="1110:47"><name pos:start="1110:23" pos:end="1110:31">get_errno</name><argument_list pos:start="1110:32" pos:end="1110:47">(<argument pos:start="1110:33" pos:end="1110:46"><expr pos:start="1110:33" pos:end="1110:46"><call pos:start="1110:33" pos:end="1110:46"><name pos:start="1110:33" pos:end="1110:39">symlink</name><argument_list pos:start="1110:40" pos:end="1110:46">(<argument pos:start="1110:41" pos:end="1110:41"><expr pos:start="1110:41" pos:end="1110:41"><name pos:start="1110:41" pos:end="1110:41">p</name></expr></argument>, <argument pos:start="1110:44" pos:end="1110:45"><expr pos:start="1110:44" pos:end="1110:45"><name pos:start="1110:44" pos:end="1110:45">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="1111:13" pos:end="1111:37"><expr pos:start="1111:13" pos:end="1111:36"><call pos:start="1111:13" pos:end="1111:36"><name pos:start="1111:13" pos:end="1111:23">unlock_user</name><argument_list pos:start="1111:24" pos:end="1111:36">(<argument pos:start="1111:25" pos:end="1111:26"><expr pos:start="1111:25" pos:end="1111:26"><name pos:start="1111:25" pos:end="1111:26">p2</name></expr></argument>, <argument pos:start="1111:29" pos:end="1111:32"><expr pos:start="1111:29" pos:end="1111:32"><name pos:start="1111:29" pos:end="1111:32">arg2</name></expr></argument>, <argument pos:start="1111:35" pos:end="1111:35"><expr pos:start="1111:35" pos:end="1111:35"><literal type="number" pos:start="1111:35" pos:end="1111:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1112:13" pos:end="1115:0"><expr pos:start="1112:13" pos:end="1112:35"><call pos:start="1112:13" pos:end="1112:35"><name pos:start="1112:13" pos:end="1112:23">unlock_user</name><argument_list pos:start="1112:24" pos:end="1112:35">(<argument pos:start="1112:25" pos:end="1112:25"><expr pos:start="1112:25" pos:end="1112:25"><name pos:start="1112:25" pos:end="1112:25">p</name></expr></argument>, <argument pos:start="1112:28" pos:end="1112:31"><expr pos:start="1112:28" pos:end="1112:31"><name pos:start="1112:28" pos:end="1112:31">arg1</name></expr></argument>, <argument pos:start="1112:34" pos:end="1112:34"><expr pos:start="1112:34" pos:end="1112:34"><literal type="number" pos:start="1112:34" pos:end="1112:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1113:1" pos:end="1113:6">#<cpp:directive pos:start="1113:2" pos:end="1113:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="1114:1" pos:end="1114:32">#<cpp:directive pos:start="1114:2" pos:end="1114:3">if</cpp:directive> <expr pos:start="1114:5" pos:end="1114:32"><call pos:start="1114:5" pos:end="1114:32"><name pos:start="1114:5" pos:end="1114:11">defined</name><argument_list pos:start="1114:12" pos:end="1114:32">(<argument pos:start="1114:13" pos:end="1114:31"><expr pos:start="1114:13" pos:end="1114:31"><name pos:start="1114:13" pos:end="1114:31">TARGET_NR_symlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="1115:5" pos:end="1115:29">case <expr pos:start="1115:10" pos:end="1115:28"><name pos:start="1115:10" pos:end="1115:28">TARGET_NR_symlinkat</name></expr>:</case>
        <block pos:start="1116:9" pos:end="3541:14">{<block_content pos:start="1117:13" pos:end="3541:14">
            <decl_stmt pos:start="1117:13" pos:end="1117:21"><decl pos:start="1117:13" pos:end="1117:20"><type pos:start="1117:13" pos:end="1117:18"><name pos:start="1117:13" pos:end="1117:16">void</name> <modifier pos:start="1117:18" pos:end="1117:18">*</modifier></type><name pos:start="1117:19" pos:end="1117:20">p2</name></decl>;</decl_stmt>
            <expr_stmt pos:start="1118:13" pos:end="1118:40"><expr pos:start="1118:13" pos:end="1118:39"><name pos:start="1118:13" pos:end="1118:13">p</name>  <operator pos:start="1118:16" pos:end="1118:16">=</operator> <call pos:start="1118:18" pos:end="1118:39"><name pos:start="1118:18" pos:end="1118:33">lock_user_string</name><argument_list pos:start="1118:34" pos:end="1118:39">(<argument pos:start="1118:35" pos:end="1118:38"><expr pos:start="1118:35" pos:end="1118:38"><name pos:start="1118:35" pos:end="1118:38">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1119:13" pos:end="1119:40"><expr pos:start="1119:13" pos:end="1119:39"><name pos:start="1119:13" pos:end="1119:14">p2</name> <operator pos:start="1119:16" pos:end="1119:16">=</operator> <call pos:start="1119:18" pos:end="1119:39"><name pos:start="1119:18" pos:end="1119:33">lock_user_string</name><argument_list pos:start="1119:34" pos:end="1119:39">(<argument pos:start="1119:35" pos:end="1119:38"><expr pos:start="1119:35" pos:end="1119:38"><name pos:start="1119:35" pos:end="1119:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1120:13" pos:end="1123:56"><if pos:start="1120:13" pos:end="1121:37">if <condition pos:start="1120:16" pos:end="1120:26">(<expr pos:start="1120:17" pos:end="1120:25"><operator pos:start="1120:17" pos:end="1120:17">!</operator><name pos:start="1120:18" pos:end="1120:18">p</name> <operator pos:start="1120:20" pos:end="1120:21">||</operator> <operator pos:start="1120:23" pos:end="1120:23">!</operator><name pos:start="1120:24" pos:end="1120:25">p2</name></expr>)</condition><block type="pseudo" pos:start="1121:17" pos:end="1121:37"><block_content pos:start="1121:17" pos:end="1121:37">
                <expr_stmt pos:start="1121:17" pos:end="1121:37"><expr pos:start="1121:17" pos:end="1121:36"><name pos:start="1121:17" pos:end="1121:19">ret</name> <operator pos:start="1121:21" pos:end="1121:21">=</operator> <operator pos:start="1121:23" pos:end="1121:23">-</operator><name pos:start="1121:24" pos:end="1121:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1122:13" pos:end="1123:56">else<block type="pseudo" pos:start="1123:17" pos:end="1123:56"><block_content pos:start="1123:17" pos:end="1123:56">
                <expr_stmt pos:start="1123:17" pos:end="1123:56"><expr pos:start="1123:17" pos:end="1123:55"><name pos:start="1123:17" pos:end="1123:19">ret</name> <operator pos:start="1123:21" pos:end="1123:21">=</operator> <call pos:start="1123:23" pos:end="1123:55"><name pos:start="1123:23" pos:end="1123:31">get_errno</name><argument_list pos:start="1123:32" pos:end="1123:55">(<argument pos:start="1123:33" pos:end="1123:54"><expr pos:start="1123:33" pos:end="1123:54"><call pos:start="1123:33" pos:end="1123:54"><name pos:start="1123:33" pos:end="1123:41">symlinkat</name><argument_list pos:start="1123:42" pos:end="1123:54">(<argument pos:start="1123:43" pos:end="1123:43"><expr pos:start="1123:43" pos:end="1123:43"><name pos:start="1123:43" pos:end="1123:43">p</name></expr></argument>, <argument pos:start="1123:46" pos:end="1123:49"><expr pos:start="1123:46" pos:end="1123:49"><name pos:start="1123:46" pos:end="1123:49">arg2</name></expr></argument>, <argument pos:start="1123:52" pos:end="1123:53"><expr pos:start="1123:52" pos:end="1123:53"><name pos:start="1123:52" pos:end="1123:53">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="1124:13" pos:end="1124:37"><expr pos:start="1124:13" pos:end="1124:36"><call pos:start="1124:13" pos:end="1124:36"><name pos:start="1124:13" pos:end="1124:23">unlock_user</name><argument_list pos:start="1124:24" pos:end="1124:36">(<argument pos:start="1124:25" pos:end="1124:26"><expr pos:start="1124:25" pos:end="1124:26"><name pos:start="1124:25" pos:end="1124:26">p2</name></expr></argument>, <argument pos:start="1124:29" pos:end="1124:32"><expr pos:start="1124:29" pos:end="1124:32"><name pos:start="1124:29" pos:end="1124:32">arg3</name></expr></argument>, <argument pos:start="1124:35" pos:end="1124:35"><expr pos:start="1124:35" pos:end="1124:35"><literal type="number" pos:start="1124:35" pos:end="1124:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1125:13" pos:end="1128:0"><expr pos:start="1125:13" pos:end="1125:35"><call pos:start="1125:13" pos:end="1125:35"><name pos:start="1125:13" pos:end="1125:23">unlock_user</name><argument_list pos:start="1125:24" pos:end="1125:35">(<argument pos:start="1125:25" pos:end="1125:25"><expr pos:start="1125:25" pos:end="1125:25"><name pos:start="1125:25" pos:end="1125:25">p</name></expr></argument>, <argument pos:start="1125:28" pos:end="1125:31"><expr pos:start="1125:28" pos:end="1125:31"><name pos:start="1125:28" pos:end="1125:31">arg1</name></expr></argument>, <argument pos:start="1125:34" pos:end="1125:34"><expr pos:start="1125:34" pos:end="1125:34"><literal type="number" pos:start="1125:34" pos:end="1125:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1126:1" pos:end="1126:6">#<cpp:directive pos:start="1126:2" pos:end="1126:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1127:1" pos:end="1127:25">#<cpp:directive pos:start="1127:2" pos:end="1127:6">ifdef</cpp:directive> <name pos:start="1127:8" pos:end="1127:25">TARGET_NR_oldlstat</name></cpp:ifdef>
    <case pos:start="1128:5" pos:end="1128:28">case <expr pos:start="1128:10" pos:end="1128:27"><name pos:start="1128:10" pos:end="1128:27">TARGET_NR_oldlstat</name></expr>:</case>
        <goto pos:start="1129:9" pos:end="1132:0">goto <name pos:start="1129:14" pos:end="1129:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1130:1" pos:end="1130:6">#<cpp:directive pos:start="1130:2" pos:end="1130:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1131:1" pos:end="1131:25">#<cpp:directive pos:start="1131:2" pos:end="1131:6">ifdef</cpp:directive> <name pos:start="1131:8" pos:end="1131:25">TARGET_NR_readlink</name></cpp:ifdef>
    <case pos:start="1132:5" pos:end="1132:28">case <expr pos:start="1132:10" pos:end="1132:27"><name pos:start="1132:10" pos:end="1132:27">TARGET_NR_readlink</name></expr>:</case>
        <block pos:start="1133:9" pos:end="3541:14">{<block_content pos:start="1134:13" pos:end="3541:14">
            <decl_stmt pos:start="1134:13" pos:end="1134:21"><decl pos:start="1134:13" pos:end="1134:20"><type pos:start="1134:13" pos:end="1134:18"><name pos:start="1134:13" pos:end="1134:16">void</name> <modifier pos:start="1134:18" pos:end="1134:18">*</modifier></type><name pos:start="1134:19" pos:end="1134:20">p2</name></decl>;</decl_stmt>
            <expr_stmt pos:start="1135:13" pos:end="1135:39"><expr pos:start="1135:13" pos:end="1135:38"><name pos:start="1135:13" pos:end="1135:13">p</name> <operator pos:start="1135:15" pos:end="1135:15">=</operator> <call pos:start="1135:17" pos:end="1135:38"><name pos:start="1135:17" pos:end="1135:32">lock_user_string</name><argument_list pos:start="1135:33" pos:end="1135:38">(<argument pos:start="1135:34" pos:end="1135:37"><expr pos:start="1135:34" pos:end="1135:37"><name pos:start="1135:34" pos:end="1135:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1136:13" pos:end="1136:56"><expr pos:start="1136:13" pos:end="1136:55"><name pos:start="1136:13" pos:end="1136:14">p2</name> <operator pos:start="1136:16" pos:end="1136:16">=</operator> <call pos:start="1136:18" pos:end="1136:55"><name pos:start="1136:18" pos:end="1136:26">lock_user</name><argument_list pos:start="1136:27" pos:end="1136:55">(<argument pos:start="1136:28" pos:end="1136:39"><expr pos:start="1136:28" pos:end="1136:39"><name pos:start="1136:28" pos:end="1136:39">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1136:42" pos:end="1136:45"><expr pos:start="1136:42" pos:end="1136:45"><name pos:start="1136:42" pos:end="1136:45">arg2</name></expr></argument>, <argument pos:start="1136:48" pos:end="1136:51"><expr pos:start="1136:48" pos:end="1136:51"><name pos:start="1136:48" pos:end="1136:51">arg3</name></expr></argument>, <argument pos:start="1136:54" pos:end="1136:54"><expr pos:start="1136:54" pos:end="1136:54"><literal type="number" pos:start="1136:54" pos:end="1136:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1137:13" pos:end="3541:14"><if pos:start="1137:13" pos:end="1139:13">if <condition pos:start="1137:16" pos:end="1137:26">(<expr pos:start="1137:17" pos:end="1137:25"><operator pos:start="1137:17" pos:end="1137:17">!</operator><name pos:start="1137:18" pos:end="1137:18">p</name> <operator pos:start="1137:20" pos:end="1137:21">||</operator> <operator pos:start="1137:23" pos:end="1137:23">!</operator><name pos:start="1137:24" pos:end="1137:25">p2</name></expr>)</condition> <block pos:start="1137:28" pos:end="1139:13">{<block_content pos:start="1138:17" pos:end="1138:37">
                <expr_stmt pos:start="1138:17" pos:end="1138:37"><expr pos:start="1138:17" pos:end="1138:36"><name pos:start="1138:17" pos:end="1138:19">ret</name> <operator pos:start="1138:21" pos:end="1138:21">=</operator> <operator pos:start="1138:23" pos:end="1138:23">-</operator><name pos:start="1138:24" pos:end="1138:36">TARGET_EFAULT</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="1139:15" pos:end="1141:13">else if <condition pos:start="1139:23" pos:end="1139:29">(<expr pos:start="1139:24" pos:end="1139:28"><operator pos:start="1139:24" pos:end="1139:24">!</operator><name pos:start="1139:25" pos:end="1139:28">arg3</name></expr>)</condition> <block pos:start="1139:31" pos:end="1141:13">{<block_content>
                <comment type="block" pos:start="1140:17" pos:end="1140:65">/* Short circuit this for the magic exe check. */</comment>
            </block_content>}</block></if> <if type="elseif" pos:start="1141:15" pos:end="3541:14">else if <condition pos:start="1141:23" pos:end="1141:62">(<expr pos:start="1141:24" pos:end="1141:61"><call pos:start="1141:24" pos:end="1141:61"><name pos:start="1141:24" pos:end="1141:37">is_proc_myself</name><argument_list pos:start="1141:38" pos:end="1141:61">(<argument pos:start="1141:39" pos:end="1141:53"><expr pos:start="1141:39" pos:end="1141:53"><operator pos:start="1141:39" pos:end="1141:39">(</operator><specifier pos:start="1141:40" pos:end="1141:44">const</specifier> <name pos:start="1141:46" pos:end="1141:49">char</name> <operator pos:start="1141:51" pos:end="1141:51">*</operator><operator pos:start="1141:52" pos:end="1141:52">)</operator><name pos:start="1141:53" pos:end="1141:53">p</name></expr></argument>, <argument pos:start="1141:56" pos:end="1141:60"><expr pos:start="1141:56" pos:end="1141:60"><literal type="string" pos:start="1141:56" pos:end="1141:60">"exe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1141:64" pos:end="3541:14">{<block_content pos:start="1142:17" pos:end="3541:14">
                <decl_stmt pos:start="1142:17" pos:end="1142:43"><decl pos:start="1142:17" pos:end="1142:35"><type pos:start="1142:17" pos:end="1142:20"><name pos:start="1142:17" pos:end="1142:20">char</name></type> <name pos:start="1142:22" pos:end="1142:35"><name pos:start="1142:22" pos:end="1142:25">real</name><index pos:start="1142:26" pos:end="1142:35">[<expr pos:start="1142:27" pos:end="1142:34"><name pos:start="1142:27" pos:end="1142:34">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="1142:38" pos:end="1142:42"><type ref="prev" pos:start="1142:17" pos:end="1142:20"><modifier pos:start="1142:38" pos:end="1142:38">*</modifier></type><name pos:start="1142:39" pos:end="1142:42">temp</name></decl>;</decl_stmt>
                <expr_stmt pos:start="1143:17" pos:end="1143:49"><expr pos:start="1143:17" pos:end="1143:48"><name pos:start="1143:17" pos:end="1143:20">temp</name> <operator pos:start="1143:22" pos:end="1143:22">=</operator> <call pos:start="1143:24" pos:end="1143:48"><name pos:start="1143:24" pos:end="1143:31">realpath</name><argument_list pos:start="1143:32" pos:end="1143:48">(<argument pos:start="1143:33" pos:end="1143:41"><expr pos:start="1143:33" pos:end="1143:41"><name pos:start="1143:33" pos:end="1143:41">exec_path</name></expr></argument>, <argument pos:start="1143:44" pos:end="1143:47"><expr pos:start="1143:44" pos:end="1143:47"><name pos:start="1143:44" pos:end="1143:47">real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="1144:17" pos:end="1144:77">/* Return value is # of bytes that we wrote to the buffer. */</comment>
                <if_stmt pos:start="1145:17" pos:end="1153:13"><if pos:start="1145:17" pos:end="1147:17">if <condition pos:start="1145:20" pos:end="1145:33">(<expr pos:start="1145:21" pos:end="1145:32"><name pos:start="1145:21" pos:end="1145:24">temp</name> <operator pos:start="1145:26" pos:end="1145:27">==</operator> <name pos:start="1145:29" pos:end="1145:32">NULL</name></expr>)</condition> <block pos:start="1145:35" pos:end="1147:17">{<block_content pos:start="1146:21" pos:end="1146:40">
                    <expr_stmt pos:start="1146:21" pos:end="1146:40"><expr pos:start="1146:21" pos:end="1146:39"><name pos:start="1146:21" pos:end="1146:23">ret</name> <operator pos:start="1146:25" pos:end="1146:25">=</operator> <call pos:start="1146:27" pos:end="1146:39"><name pos:start="1146:27" pos:end="1146:35">get_errno</name><argument_list pos:start="1146:36" pos:end="1146:39">(<argument pos:start="1146:37" pos:end="1146:38"><expr pos:start="1146:37" pos:end="1146:38"><operator pos:start="1146:37" pos:end="1146:37">-</operator><literal type="number" pos:start="1146:38" pos:end="1146:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="1147:19" pos:end="1153:13">else <block pos:start="1147:24" pos:end="1153:13">{<block_content pos:start="1150:21" pos:end="1152:42">
                    <comment type="block" pos:start="1148:21" pos:end="1149:70">/* Don't worry about sign mismatch as earlier mapping
                     * logic would have thrown a bad address error. */</comment>
                    <expr_stmt pos:start="1150:21" pos:end="1150:50"><expr pos:start="1150:21" pos:end="1150:49"><name pos:start="1150:21" pos:end="1150:23">ret</name> <operator pos:start="1150:25" pos:end="1150:25">=</operator> <call pos:start="1150:27" pos:end="1150:49"><name pos:start="1150:27" pos:end="1150:29">MIN</name><argument_list pos:start="1150:30" pos:end="1150:49">(<argument pos:start="1150:31" pos:end="1150:42"><expr pos:start="1150:31" pos:end="1150:42"><call pos:start="1150:31" pos:end="1150:42"><name pos:start="1150:31" pos:end="1150:36">strlen</name><argument_list pos:start="1150:37" pos:end="1150:42">(<argument pos:start="1150:38" pos:end="1150:41"><expr pos:start="1150:38" pos:end="1150:41"><name pos:start="1150:38" pos:end="1150:41">real</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1150:45" pos:end="1150:48"><expr pos:start="1150:45" pos:end="1150:48"><name pos:start="1150:45" pos:end="1150:48">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block" pos:start="1151:21" pos:end="1151:61">/* We cannot NUL terminate the string. */</comment>
                    <expr_stmt pos:start="1152:21" pos:end="1152:42"><expr pos:start="1152:21" pos:end="1152:41"><call pos:start="1152:21" pos:end="1152:41"><name pos:start="1152:21" pos:end="1152:26">memcpy</name><argument_list pos:start="1152:27" pos:end="1152:41">(<argument pos:start="1152:28" pos:end="1152:29"><expr pos:start="1152:28" pos:end="1152:29"><name pos:start="1152:28" pos:end="1152:29">p2</name></expr></argument>, <argument pos:start="1152:32" pos:end="1152:35"><expr pos:start="1152:32" pos:end="1152:35"><name pos:start="1152:32" pos:end="1152:35">real</name></expr></argument>, <argument pos:start="1152:38" pos:end="1152:40"><expr pos:start="1152:38" pos:end="1152:40"><name pos:start="1152:38" pos:end="1152:40">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="1153:15" pos:end="3541:14"><else pos:start="1153:15" pos:end="3541:14">else <block pos:start="1153:20" pos:end="3541:14">{<block_content pos:start="1154:17" pos:end="3541:14">
                <expr_stmt pos:start="1154:17" pos:end="1154:61"><expr pos:start="1154:17" pos:end="1154:60"><name pos:start="1154:17" pos:end="1154:19">ret</name> <operator pos:start="1154:21" pos:end="1154:21">=</operator> <call pos:start="1154:23" pos:end="1154:60"><name pos:start="1154:23" pos:end="1154:31">get_errno</name><argument_list pos:start="1154:32" pos:end="1154:60">(<argument pos:start="1154:33" pos:end="1154:59"><expr pos:start="1154:33" pos:end="1154:59"><call pos:start="1154:33" pos:end="1154:59"><name pos:start="1154:33" pos:end="1154:40">readlink</name><argument_list pos:start="1154:41" pos:end="1154:59">(<argument pos:start="1154:42" pos:end="1154:48"><expr pos:start="1154:42" pos:end="1154:48"><call pos:start="1154:42" pos:end="1154:48"><name pos:start="1154:42" pos:end="1154:45">path</name><argument_list pos:start="1154:46" pos:end="1154:48">(<argument pos:start="1154:47" pos:end="1154:47"><expr pos:start="1154:47" pos:end="1154:47"><name pos:start="1154:47" pos:end="1154:47">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1154:51" pos:end="1154:52"><expr pos:start="1154:51" pos:end="1154:52"><name pos:start="1154:51" pos:end="1154:52">p2</name></expr></argument>, <argument pos:start="1154:55" pos:end="1154:58"><expr pos:start="1154:55" pos:end="1154:58"><name pos:start="1154:55" pos:end="1154:58">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1155:13" pos:end="1155:39"><expr pos:start="1155:13" pos:end="1155:38"><call pos:start="1155:13" pos:end="1155:38"><name pos:start="1155:13" pos:end="1155:23">unlock_user</name><argument_list pos:start="1155:24" pos:end="1155:38">(<argument pos:start="1155:25" pos:end="1155:26"><expr pos:start="1155:25" pos:end="1155:26"><name pos:start="1155:25" pos:end="1155:26">p2</name></expr></argument>, <argument pos:start="1155:29" pos:end="1155:32"><expr pos:start="1155:29" pos:end="1155:32"><name pos:start="1155:29" pos:end="1155:32">arg2</name></expr></argument>, <argument pos:start="1155:35" pos:end="1155:37"><expr pos:start="1155:35" pos:end="1155:37"><name pos:start="1155:35" pos:end="1155:37">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1156:13" pos:end="1159:0"><expr pos:start="1156:13" pos:end="1156:35"><call pos:start="1156:13" pos:end="1156:35"><name pos:start="1156:13" pos:end="1156:23">unlock_user</name><argument_list pos:start="1156:24" pos:end="1156:35">(<argument pos:start="1156:25" pos:end="1156:25"><expr pos:start="1156:25" pos:end="1156:25"><name pos:start="1156:25" pos:end="1156:25">p</name></expr></argument>, <argument pos:start="1156:28" pos:end="1156:31"><expr pos:start="1156:28" pos:end="1156:31"><name pos:start="1156:28" pos:end="1156:31">arg1</name></expr></argument>, <argument pos:start="1156:34" pos:end="1156:34"><expr pos:start="1156:34" pos:end="1156:34"><literal type="number" pos:start="1156:34" pos:end="1156:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1157:1" pos:end="1157:6">#<cpp:directive pos:start="1157:2" pos:end="1157:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="1158:1" pos:end="1158:33">#<cpp:directive pos:start="1158:2" pos:end="1158:3">if</cpp:directive> <expr pos:start="1158:5" pos:end="1158:33"><call pos:start="1158:5" pos:end="1158:33"><name pos:start="1158:5" pos:end="1158:11">defined</name><argument_list pos:start="1158:12" pos:end="1158:33">(<argument pos:start="1158:13" pos:end="1158:32"><expr pos:start="1158:13" pos:end="1158:32"><name pos:start="1158:13" pos:end="1158:32">TARGET_NR_readlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="1159:5" pos:end="1159:30">case <expr pos:start="1159:10" pos:end="1159:29"><name pos:start="1159:10" pos:end="1159:29">TARGET_NR_readlinkat</name></expr>:</case>
        <block pos:start="1160:9" pos:end="3541:14">{<block_content pos:start="1161:13" pos:end="3541:14">
            <decl_stmt pos:start="1161:13" pos:end="1161:21"><decl pos:start="1161:13" pos:end="1161:20"><type pos:start="1161:13" pos:end="1161:18"><name pos:start="1161:13" pos:end="1161:16">void</name> <modifier pos:start="1161:18" pos:end="1161:18">*</modifier></type><name pos:start="1161:19" pos:end="1161:20">p2</name></decl>;</decl_stmt>
            <expr_stmt pos:start="1162:13" pos:end="1162:40"><expr pos:start="1162:13" pos:end="1162:39"><name pos:start="1162:13" pos:end="1162:13">p</name>  <operator pos:start="1162:16" pos:end="1162:16">=</operator> <call pos:start="1162:18" pos:end="1162:39"><name pos:start="1162:18" pos:end="1162:33">lock_user_string</name><argument_list pos:start="1162:34" pos:end="1162:39">(<argument pos:start="1162:35" pos:end="1162:38"><expr pos:start="1162:35" pos:end="1162:38"><name pos:start="1162:35" pos:end="1162:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1163:13" pos:end="1163:56"><expr pos:start="1163:13" pos:end="1163:55"><name pos:start="1163:13" pos:end="1163:14">p2</name> <operator pos:start="1163:16" pos:end="1163:16">=</operator> <call pos:start="1163:18" pos:end="1163:55"><name pos:start="1163:18" pos:end="1163:26">lock_user</name><argument_list pos:start="1163:27" pos:end="1163:55">(<argument pos:start="1163:28" pos:end="1163:39"><expr pos:start="1163:28" pos:end="1163:39"><name pos:start="1163:28" pos:end="1163:39">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1163:42" pos:end="1163:45"><expr pos:start="1163:42" pos:end="1163:45"><name pos:start="1163:42" pos:end="1163:45">arg3</name></expr></argument>, <argument pos:start="1163:48" pos:end="1163:51"><expr pos:start="1163:48" pos:end="1163:51"><name pos:start="1163:48" pos:end="1163:51">arg4</name></expr></argument>, <argument pos:start="1163:54" pos:end="1163:54"><expr pos:start="1163:54" pos:end="1163:54"><literal type="number" pos:start="1163:54" pos:end="1163:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1164:13" pos:end="3541:14"><if pos:start="1164:13" pos:end="1166:13">if <condition pos:start="1164:16" pos:end="1164:26">(<expr pos:start="1164:17" pos:end="1164:25"><operator pos:start="1164:17" pos:end="1164:17">!</operator><name pos:start="1164:18" pos:end="1164:18">p</name> <operator pos:start="1164:20" pos:end="1164:21">||</operator> <operator pos:start="1164:23" pos:end="1164:23">!</operator><name pos:start="1164:24" pos:end="1164:25">p2</name></expr>)</condition> <block pos:start="1164:28" pos:end="1166:13">{<block_content pos:start="1165:17" pos:end="1165:37">
                <expr_stmt pos:start="1165:17" pos:end="1165:37"><expr pos:start="1165:17" pos:end="1165:36"><name pos:start="1165:17" pos:end="1165:19">ret</name> <operator pos:start="1165:21" pos:end="1165:21">=</operator> <operator pos:start="1165:23" pos:end="1165:23">-</operator><name pos:start="1165:24" pos:end="1165:36">TARGET_EFAULT</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="1166:15" pos:end="1171:13">else if <condition pos:start="1166:23" pos:end="1166:62">(<expr pos:start="1166:24" pos:end="1166:61"><call pos:start="1166:24" pos:end="1166:61"><name pos:start="1166:24" pos:end="1166:37">is_proc_myself</name><argument_list pos:start="1166:38" pos:end="1166:61">(<argument pos:start="1166:39" pos:end="1166:53"><expr pos:start="1166:39" pos:end="1166:53"><operator pos:start="1166:39" pos:end="1166:39">(</operator><specifier pos:start="1166:40" pos:end="1166:44">const</specifier> <name pos:start="1166:46" pos:end="1166:49">char</name> <operator pos:start="1166:51" pos:end="1166:51">*</operator><operator pos:start="1166:52" pos:end="1166:52">)</operator><name pos:start="1166:53" pos:end="1166:53">p</name></expr></argument>, <argument pos:start="1166:56" pos:end="1166:60"><expr pos:start="1166:56" pos:end="1166:60"><literal type="string" pos:start="1166:56" pos:end="1166:60">"exe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1166:64" pos:end="1171:13">{<block_content pos:start="1167:17" pos:end="1170:55">
                <decl_stmt pos:start="1167:17" pos:end="1167:43"><decl pos:start="1167:17" pos:end="1167:35"><type pos:start="1167:17" pos:end="1167:20"><name pos:start="1167:17" pos:end="1167:20">char</name></type> <name pos:start="1167:22" pos:end="1167:35"><name pos:start="1167:22" pos:end="1167:25">real</name><index pos:start="1167:26" pos:end="1167:35">[<expr pos:start="1167:27" pos:end="1167:34"><name pos:start="1167:27" pos:end="1167:34">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="1167:38" pos:end="1167:42"><type ref="prev" pos:start="1167:17" pos:end="1167:20"><modifier pos:start="1167:38" pos:end="1167:38">*</modifier></type><name pos:start="1167:39" pos:end="1167:42">temp</name></decl>;</decl_stmt>
                <expr_stmt pos:start="1168:17" pos:end="1168:49"><expr pos:start="1168:17" pos:end="1168:48"><name pos:start="1168:17" pos:end="1168:20">temp</name> <operator pos:start="1168:22" pos:end="1168:22">=</operator> <call pos:start="1168:24" pos:end="1168:48"><name pos:start="1168:24" pos:end="1168:31">realpath</name><argument_list pos:start="1168:32" pos:end="1168:48">(<argument pos:start="1168:33" pos:end="1168:41"><expr pos:start="1168:33" pos:end="1168:41"><name pos:start="1168:33" pos:end="1168:41">exec_path</name></expr></argument>, <argument pos:start="1168:44" pos:end="1168:47"><expr pos:start="1168:44" pos:end="1168:47"><name pos:start="1168:44" pos:end="1168:47">real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1169:17" pos:end="1169:67"><expr pos:start="1169:17" pos:end="1169:65"><name pos:start="1169:17" pos:end="1169:19">ret</name> <operator pos:start="1169:21" pos:end="1169:21">=</operator> <ternary pos:start="1169:23" pos:end="1169:65"><condition pos:start="1169:23" pos:end="1169:36"><expr pos:start="1169:23" pos:end="1169:34"><name pos:start="1169:23" pos:end="1169:26">temp</name> <operator pos:start="1169:28" pos:end="1169:29">==</operator> <name pos:start="1169:31" pos:end="1169:34">NULL</name></expr> ?</condition><then pos:start="1169:38" pos:end="1169:50"> <expr pos:start="1169:38" pos:end="1169:50"><call pos:start="1169:38" pos:end="1169:50"><name pos:start="1169:38" pos:end="1169:46">get_errno</name><argument_list pos:start="1169:47" pos:end="1169:50">(<argument pos:start="1169:48" pos:end="1169:49"><expr pos:start="1169:48" pos:end="1169:49"><operator pos:start="1169:48" pos:end="1169:48">-</operator><literal type="number" pos:start="1169:49" pos:end="1169:49">1</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="1169:52" pos:end="1169:65">: <expr pos:start="1169:54" pos:end="1169:65"><call pos:start="1169:54" pos:end="1169:65"><name pos:start="1169:54" pos:end="1169:59">strlen</name><argument_list pos:start="1169:60" pos:end="1169:65">(<argument pos:start="1169:61" pos:end="1169:64"><expr pos:start="1169:61" pos:end="1169:64"><name pos:start="1169:61" pos:end="1169:64">real</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
                <expr_stmt pos:start="1170:17" pos:end="1170:55"><expr pos:start="1170:17" pos:end="1170:54"><call pos:start="1170:17" pos:end="1170:54"><name pos:start="1170:17" pos:end="1170:24">snprintf</name><argument_list pos:start="1170:25" pos:end="1170:54">(<argument pos:start="1170:26" pos:end="1170:35"><expr pos:start="1170:26" pos:end="1170:35"><operator pos:start="1170:26" pos:end="1170:26">(</operator><name pos:start="1170:27" pos:end="1170:30">char</name> <operator pos:start="1170:32" pos:end="1170:32">*</operator><operator pos:start="1170:33" pos:end="1170:33">)</operator><name pos:start="1170:34" pos:end="1170:35">p2</name></expr></argument>, <argument pos:start="1170:38" pos:end="1170:41"><expr pos:start="1170:38" pos:end="1170:41"><name pos:start="1170:38" pos:end="1170:41">arg4</name></expr></argument>, <argument pos:start="1170:44" pos:end="1170:47"><expr pos:start="1170:44" pos:end="1170:47"><literal type="string" pos:start="1170:44" pos:end="1170:47">"%s"</literal></expr></argument>, <argument pos:start="1170:50" pos:end="1170:53"><expr pos:start="1170:50" pos:end="1170:53"><name pos:start="1170:50" pos:end="1170:53">real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1171:15" pos:end="3541:14">else <block pos:start="1171:20" pos:end="3541:14">{<block_content pos:start="1172:17" pos:end="3541:14">
                <expr_stmt pos:start="1172:17" pos:end="1172:69"><expr pos:start="1172:17" pos:end="1172:68"><name pos:start="1172:17" pos:end="1172:19">ret</name> <operator pos:start="1172:21" pos:end="1172:21">=</operator> <call pos:start="1172:23" pos:end="1172:68"><name pos:start="1172:23" pos:end="1172:31">get_errno</name><argument_list pos:start="1172:32" pos:end="1172:68">(<argument pos:start="1172:33" pos:end="1172:67"><expr pos:start="1172:33" pos:end="1172:67"><call pos:start="1172:33" pos:end="1172:67"><name pos:start="1172:33" pos:end="1172:42">readlinkat</name><argument_list pos:start="1172:43" pos:end="1172:67">(<argument pos:start="1172:44" pos:end="1172:47"><expr pos:start="1172:44" pos:end="1172:47"><name pos:start="1172:44" pos:end="1172:47">arg1</name></expr></argument>, <argument pos:start="1172:50" pos:end="1172:56"><expr pos:start="1172:50" pos:end="1172:56"><call pos:start="1172:50" pos:end="1172:56"><name pos:start="1172:50" pos:end="1172:53">path</name><argument_list pos:start="1172:54" pos:end="1172:56">(<argument pos:start="1172:55" pos:end="1172:55"><expr pos:start="1172:55" pos:end="1172:55"><name pos:start="1172:55" pos:end="1172:55">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1172:59" pos:end="1172:60"><expr pos:start="1172:59" pos:end="1172:60"><name pos:start="1172:59" pos:end="1172:60">p2</name></expr></argument>, <argument pos:start="1172:63" pos:end="1172:66"><expr pos:start="1172:63" pos:end="1172:66"><name pos:start="1172:63" pos:end="1172:66">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1173:13" pos:end="1173:39"><expr pos:start="1173:13" pos:end="1173:38"><call pos:start="1173:13" pos:end="1173:38"><name pos:start="1173:13" pos:end="1173:23">unlock_user</name><argument_list pos:start="1173:24" pos:end="1173:38">(<argument pos:start="1173:25" pos:end="1173:26"><expr pos:start="1173:25" pos:end="1173:26"><name pos:start="1173:25" pos:end="1173:26">p2</name></expr></argument>, <argument pos:start="1173:29" pos:end="1173:32"><expr pos:start="1173:29" pos:end="1173:32"><name pos:start="1173:29" pos:end="1173:32">arg3</name></expr></argument>, <argument pos:start="1173:35" pos:end="1173:37"><expr pos:start="1173:35" pos:end="1173:37"><name pos:start="1173:35" pos:end="1173:37">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1174:13" pos:end="1177:0"><expr pos:start="1174:13" pos:end="1174:35"><call pos:start="1174:13" pos:end="1174:35"><name pos:start="1174:13" pos:end="1174:23">unlock_user</name><argument_list pos:start="1174:24" pos:end="1174:35">(<argument pos:start="1174:25" pos:end="1174:25"><expr pos:start="1174:25" pos:end="1174:25"><name pos:start="1174:25" pos:end="1174:25">p</name></expr></argument>, <argument pos:start="1174:28" pos:end="1174:31"><expr pos:start="1174:28" pos:end="1174:31"><name pos:start="1174:28" pos:end="1174:31">arg2</name></expr></argument>, <argument pos:start="1174:34" pos:end="1174:34"><expr pos:start="1174:34" pos:end="1174:34"><literal type="number" pos:start="1174:34" pos:end="1174:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1175:1" pos:end="1175:6">#<cpp:directive pos:start="1175:2" pos:end="1175:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1176:1" pos:end="1176:23">#<cpp:directive pos:start="1176:2" pos:end="1176:6">ifdef</cpp:directive> <name pos:start="1176:8" pos:end="1176:23">TARGET_NR_uselib</name></cpp:ifdef>
    <case pos:start="1177:5" pos:end="1177:26">case <expr pos:start="1177:10" pos:end="1177:25"><name pos:start="1177:10" pos:end="1177:25">TARGET_NR_uselib</name></expr>:</case>
        <goto pos:start="1178:9" pos:end="1181:0">goto <name pos:start="1178:14" pos:end="1178:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1179:1" pos:end="1179:6">#<cpp:directive pos:start="1179:2" pos:end="1179:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1180:1" pos:end="1180:23">#<cpp:directive pos:start="1180:2" pos:end="1180:6">ifdef</cpp:directive> <name pos:start="1180:8" pos:end="1180:23">TARGET_NR_swapon</name></cpp:ifdef>
    <case pos:start="1181:5" pos:end="1181:26">case <expr pos:start="1181:10" pos:end="1181:25"><name pos:start="1181:10" pos:end="1181:25">TARGET_NR_swapon</name></expr>:</case>
        <if_stmt pos:start="1182:9" pos:end="1183:24"><if pos:start="1182:9" pos:end="1183:24">if <condition pos:start="1182:12" pos:end="1182:42">(<expr pos:start="1182:13" pos:end="1182:41"><operator pos:start="1182:13" pos:end="1182:13">!</operator><operator pos:start="1182:14" pos:end="1182:14">(</operator><name pos:start="1182:15" pos:end="1182:15">p</name> <operator pos:start="1182:17" pos:end="1182:17">=</operator> <call pos:start="1182:19" pos:end="1182:40"><name pos:start="1182:19" pos:end="1182:34">lock_user_string</name><argument_list pos:start="1182:35" pos:end="1182:40">(<argument pos:start="1182:36" pos:end="1182:39"><expr pos:start="1182:36" pos:end="1182:39"><name pos:start="1182:36" pos:end="1182:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1182:41" pos:end="1182:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1183:13" pos:end="1183:24"><block_content pos:start="1183:13" pos:end="1183:24">
            <goto pos:start="1183:13" pos:end="1183:24">goto <name pos:start="1183:18" pos:end="1183:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1184:9" pos:end="1184:41"><expr pos:start="1184:9" pos:end="1184:40"><name pos:start="1184:9" pos:end="1184:11">ret</name> <operator pos:start="1184:13" pos:end="1184:13">=</operator> <call pos:start="1184:15" pos:end="1184:40"><name pos:start="1184:15" pos:end="1184:23">get_errno</name><argument_list pos:start="1184:24" pos:end="1184:40">(<argument pos:start="1184:25" pos:end="1184:39"><expr pos:start="1184:25" pos:end="1184:39"><call pos:start="1184:25" pos:end="1184:39"><name pos:start="1184:25" pos:end="1184:30">swapon</name><argument_list pos:start="1184:31" pos:end="1184:39">(<argument pos:start="1184:32" pos:end="1184:32"><expr pos:start="1184:32" pos:end="1184:32"><name pos:start="1184:32" pos:end="1184:32">p</name></expr></argument>, <argument pos:start="1184:35" pos:end="1184:38"><expr pos:start="1184:35" pos:end="1184:38"><name pos:start="1184:35" pos:end="1184:38">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1185:9" pos:end="1187:0"><expr pos:start="1185:9" pos:end="1185:31"><call pos:start="1185:9" pos:end="1185:31"><name pos:start="1185:9" pos:end="1185:19">unlock_user</name><argument_list pos:start="1185:20" pos:end="1185:31">(<argument pos:start="1185:21" pos:end="1185:21"><expr pos:start="1185:21" pos:end="1185:21"><name pos:start="1185:21" pos:end="1185:21">p</name></expr></argument>, <argument pos:start="1185:24" pos:end="1185:27"><expr pos:start="1185:24" pos:end="1185:27"><name pos:start="1185:24" pos:end="1185:27">arg1</name></expr></argument>, <argument pos:start="1185:30" pos:end="1185:30"><expr pos:start="1185:30" pos:end="1185:30"><literal type="number" pos:start="1185:30" pos:end="1185:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1186:1" pos:end="1186:6">#<cpp:directive pos:start="1186:2" pos:end="1186:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1187:5" pos:end="1187:26">case <expr pos:start="1187:10" pos:end="1187:25"><name pos:start="1187:10" pos:end="1187:25">TARGET_NR_reboot</name></expr>:</case>
        <if_stmt pos:start="1188:9" pos:end="3541:14"><if pos:start="1188:9" pos:end="3541:14">if <condition pos:start="1188:12" pos:end="1188:46">(<expr pos:start="1188:13" pos:end="1188:45"><name pos:start="1188:13" pos:end="1188:16">arg3</name> <operator pos:start="1188:18" pos:end="1188:19">==</operator> <name pos:start="1188:21" pos:end="1188:45">LINUX_REBOOT_CMD_RESTART2</name></expr>)</condition> <block pos:start="1188:48" pos:end="3541:14">{<block_content pos:start="1190:12" pos:end="3541:14">
           <comment type="block" pos:start="1189:12" pos:end="1189:56">/* arg4 must be ignored in all other cases */</comment>
           <expr_stmt pos:start="1190:12" pos:end="1190:38"><expr pos:start="1190:12" pos:end="1190:37"><name pos:start="1190:12" pos:end="1190:12">p</name> <operator pos:start="1190:14" pos:end="1190:14">=</operator> <call pos:start="1190:16" pos:end="1190:37"><name pos:start="1190:16" pos:end="1190:31">lock_user_string</name><argument_list pos:start="1190:32" pos:end="1190:37">(<argument pos:start="1190:33" pos:end="1190:36"><expr pos:start="1190:33" pos:end="1190:36"><name pos:start="1190:33" pos:end="1190:36">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt pos:start="1191:12" pos:end="3541:14"><if pos:start="1191:12" pos:end="1195:9">if <condition pos:start="1191:15" pos:end="1191:18">(<expr pos:start="1191:16" pos:end="1191:17"><operator pos:start="1191:16" pos:end="1191:16">!</operator><name pos:start="1191:17" pos:end="1191:17">p</name></expr>)</condition> <block pos:start="1191:20" pos:end="1195:9">{<block_content pos:start="1192:15" pos:end="1194:35">
              <goto pos:start="1192:15" pos:end="1192:26">goto <name pos:start="1192:20" pos:end="1192:25">efault</name>;</goto>
           <expr_stmt pos:start="1193:12" pos:end="1193:56"><expr pos:start="1193:12" pos:end="1193:55"><name pos:start="1193:12" pos:end="1193:14">ret</name> <operator pos:start="1193:16" pos:end="1193:16">=</operator> <call pos:start="1193:18" pos:end="1193:55"><name pos:start="1193:18" pos:end="1193:26">get_errno</name><argument_list pos:start="1193:27" pos:end="1193:55">(<argument pos:start="1193:28" pos:end="1193:54"><expr pos:start="1193:28" pos:end="1193:54"><call pos:start="1193:28" pos:end="1193:54"><name pos:start="1193:28" pos:end="1193:33">reboot</name><argument_list pos:start="1193:34" pos:end="1193:54">(<argument pos:start="1193:35" pos:end="1193:38"><expr pos:start="1193:35" pos:end="1193:38"><name pos:start="1193:35" pos:end="1193:38">arg1</name></expr></argument>, <argument pos:start="1193:41" pos:end="1193:44"><expr pos:start="1193:41" pos:end="1193:44"><name pos:start="1193:41" pos:end="1193:44">arg2</name></expr></argument>, <argument pos:start="1193:47" pos:end="1193:50"><expr pos:start="1193:47" pos:end="1193:50"><name pos:start="1193:47" pos:end="1193:50">arg3</name></expr></argument>, <argument pos:start="1193:53" pos:end="1193:53"><expr pos:start="1193:53" pos:end="1193:53"><name pos:start="1193:53" pos:end="1193:53">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt pos:start="1194:12" pos:end="1194:35"><expr pos:start="1194:12" pos:end="1194:34"><call pos:start="1194:12" pos:end="1194:34"><name pos:start="1194:12" pos:end="1194:22">unlock_user</name><argument_list pos:start="1194:23" pos:end="1194:34">(<argument pos:start="1194:24" pos:end="1194:24"><expr pos:start="1194:24" pos:end="1194:24"><name pos:start="1194:24" pos:end="1194:24">p</name></expr></argument>, <argument pos:start="1194:27" pos:end="1194:30"><expr pos:start="1194:27" pos:end="1194:30"><name pos:start="1194:27" pos:end="1194:30">arg4</name></expr></argument>, <argument pos:start="1194:33" pos:end="1194:33"><expr pos:start="1194:33" pos:end="1194:33"><literal type="number" pos:start="1194:33" pos:end="1194:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1195:11" pos:end="3541:14">else <block pos:start="1195:16" pos:end="3541:14">{<block_content pos:start="1196:12" pos:end="3541:14">
           <expr_stmt pos:start="1196:12" pos:end="1198:0"><expr pos:start="1196:12" pos:end="1196:58"><name pos:start="1196:12" pos:end="1196:14">ret</name> <operator pos:start="1196:16" pos:end="1196:16">=</operator> <call pos:start="1196:18" pos:end="1196:58"><name pos:start="1196:18" pos:end="1196:26">get_errno</name><argument_list pos:start="1196:27" pos:end="1196:58">(<argument pos:start="1196:28" pos:end="1196:57"><expr pos:start="1196:28" pos:end="1196:57"><call pos:start="1196:28" pos:end="1196:57"><name pos:start="1196:28" pos:end="1196:33">reboot</name><argument_list pos:start="1196:34" pos:end="1196:57">(<argument pos:start="1196:35" pos:end="1196:38"><expr pos:start="1196:35" pos:end="1196:38"><name pos:start="1196:35" pos:end="1196:38">arg1</name></expr></argument>, <argument pos:start="1196:41" pos:end="1196:44"><expr pos:start="1196:41" pos:end="1196:44"><name pos:start="1196:41" pos:end="1196:44">arg2</name></expr></argument>, <argument pos:start="1196:47" pos:end="1196:50"><expr pos:start="1196:47" pos:end="1196:50"><name pos:start="1196:47" pos:end="1196:50">arg3</name></expr></argument>, <argument pos:start="1196:53" pos:end="1196:56"><expr pos:start="1196:53" pos:end="1196:56"><name pos:start="1196:53" pos:end="1196:56">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1197:1" pos:end="1197:24">#<cpp:directive pos:start="1197:2" pos:end="1197:6">ifdef</cpp:directive> <name pos:start="1197:8" pos:end="1197:24">TARGET_NR_readdir</name></cpp:ifdef>
    <case pos:start="1198:5" pos:end="1198:27">case <expr pos:start="1198:10" pos:end="1198:26"><name pos:start="1198:10" pos:end="1198:26">TARGET_NR_readdir</name></expr>:</case>
        <goto pos:start="1199:9" pos:end="1202:0">goto <name pos:start="1199:14" pos:end="1199:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1200:1" pos:end="1200:6">#<cpp:directive pos:start="1200:2" pos:end="1200:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1201:1" pos:end="1201:21">#<cpp:directive pos:start="1201:2" pos:end="1201:6">ifdef</cpp:directive> <name pos:start="1201:8" pos:end="1201:21">TARGET_NR_mmap</name></cpp:ifdef>
    <case pos:start="1202:5" pos:end="1207:0">case <expr pos:start="1202:10" pos:end="1202:23"><name pos:start="1202:10" pos:end="1202:23">TARGET_NR_mmap</name></expr>:</case>
<cpp:if pos:start="1203:1" pos:end="1206:28">#<cpp:directive pos:start="1203:2" pos:end="1203:3">if</cpp:directive> <expr pos:start="1203:5" pos:end="1206:28"><operator pos:start="1203:5" pos:end="1203:5">(</operator><call pos:start="1203:6" pos:end="1203:25"><name pos:start="1203:6" pos:end="1203:12">defined</name><argument_list pos:start="1203:13" pos:end="1203:25">(<argument pos:start="1203:14" pos:end="1203:24"><expr pos:start="1203:14" pos:end="1203:24"><name pos:start="1203:14" pos:end="1203:24">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="1203:27" pos:end="1203:28">&amp;&amp;</operator> <call pos:start="1203:30" pos:end="1203:50"><name pos:start="1203:30" pos:end="1203:36">defined</name><argument_list pos:start="1203:37" pos:end="1203:50">(<argument pos:start="1203:38" pos:end="1203:49"><expr pos:start="1203:38" pos:end="1203:49"><name pos:start="1203:38" pos:end="1203:49">TARGET_ABI32</name></expr></argument>)</argument_list></call><operator pos:start="1203:51" pos:end="1203:51">)</operator> <operator pos:start="1203:53" pos:end="1203:54">||</operator> \
    <operator pos:start="1204:5" pos:end="1204:5">(</operator><call pos:start="1204:6" pos:end="1204:24"><name pos:start="1204:6" pos:end="1204:12">defined</name><argument_list pos:start="1204:13" pos:end="1204:24">(<argument pos:start="1204:14" pos:end="1204:23"><expr pos:start="1204:14" pos:end="1204:23"><name pos:start="1204:14" pos:end="1204:23">TARGET_ARM</name></expr></argument>)</argument_list></call> <operator pos:start="1204:26" pos:end="1204:27">&amp;&amp;</operator> <call pos:start="1204:29" pos:end="1204:49"><name pos:start="1204:29" pos:end="1204:35">defined</name><argument_list pos:start="1204:36" pos:end="1204:49">(<argument pos:start="1204:37" pos:end="1204:48"><expr pos:start="1204:37" pos:end="1204:48"><name pos:start="1204:37" pos:end="1204:48">TARGET_ABI32</name></expr></argument>)</argument_list></call><operator pos:start="1204:50" pos:end="1204:50">)</operator> <operator pos:start="1204:52" pos:end="1204:53">||</operator> \
    <call pos:start="1205:5" pos:end="1205:24"><name pos:start="1205:5" pos:end="1205:11">defined</name><argument_list pos:start="1205:12" pos:end="1205:24">(<argument pos:start="1205:13" pos:end="1205:23"><expr pos:start="1205:13" pos:end="1205:23"><name pos:start="1205:13" pos:end="1205:23">TARGET_M68K</name></expr></argument>)</argument_list></call> <operator pos:start="1205:26" pos:end="1205:27">||</operator> <call pos:start="1205:29" pos:end="1205:48"><name pos:start="1205:29" pos:end="1205:35">defined</name><argument_list pos:start="1205:36" pos:end="1205:48">(<argument pos:start="1205:37" pos:end="1205:47"><expr pos:start="1205:37" pos:end="1205:47"><name pos:start="1205:37" pos:end="1205:47">TARGET_CRIS</name></expr></argument>)</argument_list></call> <operator pos:start="1205:50" pos:end="1205:51">||</operator> <call pos:start="1205:53" pos:end="1205:78"><name pos:start="1205:53" pos:end="1205:59">defined</name><argument_list pos:start="1205:60" pos:end="1205:78">(<argument pos:start="1205:61" pos:end="1205:77"><expr pos:start="1205:61" pos:end="1205:77"><name pos:start="1205:61" pos:end="1205:77">TARGET_MICROBLAZE</name></expr></argument>)</argument_list></call> \
    <operator pos:start="1206:5" pos:end="1206:6">||</operator> <call pos:start="1206:8" pos:end="1206:28"><name pos:start="1206:8" pos:end="1206:14">defined</name><argument_list pos:start="1206:15" pos:end="1206:28">(<argument pos:start="1206:16" pos:end="1206:27"><expr pos:start="1206:16" pos:end="1206:27"><name pos:start="1206:16" pos:end="1206:27">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <block pos:start="1207:9" pos:end="3541:14">{<block_content pos:start="1208:13" pos:end="3541:14">
            <decl_stmt pos:start="1208:13" pos:end="1208:25"><decl pos:start="1208:13" pos:end="1208:24"><type pos:start="1208:13" pos:end="1208:23"><name pos:start="1208:13" pos:end="1208:21">abi_ulong</name> <modifier pos:start="1208:23" pos:end="1208:23">*</modifier></type><name pos:start="1208:24" pos:end="1208:24">v</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1209:13" pos:end="1209:45"><decl pos:start="1209:13" pos:end="1209:24"><type pos:start="1209:13" pos:end="1209:21"><name pos:start="1209:13" pos:end="1209:21">abi_ulong</name></type> <name pos:start="1209:23" pos:end="1209:24">v1</name></decl>, <decl pos:start="1209:27" pos:end="1209:28"><type ref="prev" pos:start="1209:13" pos:end="1209:21"/><name pos:start="1209:27" pos:end="1209:28">v2</name></decl>, <decl pos:start="1209:31" pos:end="1209:32"><type ref="prev" pos:start="1209:13" pos:end="1209:21"/><name pos:start="1209:31" pos:end="1209:32">v3</name></decl>, <decl pos:start="1209:35" pos:end="1209:36"><type ref="prev" pos:start="1209:13" pos:end="1209:21"/><name pos:start="1209:35" pos:end="1209:36">v4</name></decl>, <decl pos:start="1209:39" pos:end="1209:40"><type ref="prev" pos:start="1209:13" pos:end="1209:21"/><name pos:start="1209:39" pos:end="1209:40">v5</name></decl>, <decl pos:start="1209:43" pos:end="1209:44"><type ref="prev" pos:start="1209:13" pos:end="1209:21"/><name pos:start="1209:43" pos:end="1209:44">v6</name></decl>;</decl_stmt>
            <if_stmt pos:start="1210:13" pos:end="1211:28"><if pos:start="1210:13" pos:end="1211:28">if <condition pos:start="1210:16" pos:end="1210:78">(<expr pos:start="1210:17" pos:end="1210:77"><operator pos:start="1210:17" pos:end="1210:17">!</operator><operator pos:start="1210:18" pos:end="1210:18">(</operator><name pos:start="1210:19" pos:end="1210:19">v</name> <operator pos:start="1210:21" pos:end="1210:21">=</operator> <call pos:start="1210:23" pos:end="1210:76"><name pos:start="1210:23" pos:end="1210:31">lock_user</name><argument_list pos:start="1210:32" pos:end="1210:76">(<argument pos:start="1210:33" pos:end="1210:43"><expr pos:start="1210:33" pos:end="1210:43"><name pos:start="1210:33" pos:end="1210:43">VERIFY_READ</name></expr></argument>, <argument pos:start="1210:46" pos:end="1210:49"><expr pos:start="1210:46" pos:end="1210:49"><name pos:start="1210:46" pos:end="1210:49">arg1</name></expr></argument>, <argument pos:start="1210:52" pos:end="1210:72"><expr pos:start="1210:52" pos:end="1210:72"><literal type="number" pos:start="1210:52" pos:end="1210:52">6</literal> <operator pos:start="1210:54" pos:end="1210:54">*</operator> <sizeof pos:start="1210:56" pos:end="1210:72">sizeof<argument_list pos:start="1210:62" pos:end="1210:72">(<argument pos:start="1210:63" pos:end="1210:71"><expr pos:start="1210:63" pos:end="1210:71"><name pos:start="1210:63" pos:end="1210:71">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1210:75" pos:end="1210:75"><expr pos:start="1210:75" pos:end="1210:75"><literal type="number" pos:start="1210:75" pos:end="1210:75">1</literal></expr></argument>)</argument_list></call><operator pos:start="1210:77" pos:end="1210:77">)</operator></expr>)</condition><block type="pseudo" pos:start="1211:17" pos:end="1211:28"><block_content pos:start="1211:17" pos:end="1211:28">
                <goto pos:start="1211:17" pos:end="1211:28">goto <name pos:start="1211:22" pos:end="1211:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1212:13" pos:end="1212:31"><expr pos:start="1212:13" pos:end="1212:30"><name pos:start="1212:13" pos:end="1212:14">v1</name> <operator pos:start="1212:16" pos:end="1212:16">=</operator> <call pos:start="1212:18" pos:end="1212:30"><name pos:start="1212:18" pos:end="1212:24">tswapal</name><argument_list pos:start="1212:25" pos:end="1212:30">(<argument pos:start="1212:26" pos:end="1212:29"><expr pos:start="1212:26" pos:end="1212:29"><name pos:start="1212:26" pos:end="1212:29"><name pos:start="1212:26" pos:end="1212:26">v</name><index pos:start="1212:27" pos:end="1212:29">[<expr pos:start="1212:28" pos:end="1212:28"><literal type="number" pos:start="1212:28" pos:end="1212:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1213:13" pos:end="1213:31"><expr pos:start="1213:13" pos:end="1213:30"><name pos:start="1213:13" pos:end="1213:14">v2</name> <operator pos:start="1213:16" pos:end="1213:16">=</operator> <call pos:start="1213:18" pos:end="1213:30"><name pos:start="1213:18" pos:end="1213:24">tswapal</name><argument_list pos:start="1213:25" pos:end="1213:30">(<argument pos:start="1213:26" pos:end="1213:29"><expr pos:start="1213:26" pos:end="1213:29"><name pos:start="1213:26" pos:end="1213:29"><name pos:start="1213:26" pos:end="1213:26">v</name><index pos:start="1213:27" pos:end="1213:29">[<expr pos:start="1213:28" pos:end="1213:28"><literal type="number" pos:start="1213:28" pos:end="1213:28">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1214:13" pos:end="1214:31"><expr pos:start="1214:13" pos:end="1214:30"><name pos:start="1214:13" pos:end="1214:14">v3</name> <operator pos:start="1214:16" pos:end="1214:16">=</operator> <call pos:start="1214:18" pos:end="1214:30"><name pos:start="1214:18" pos:end="1214:24">tswapal</name><argument_list pos:start="1214:25" pos:end="1214:30">(<argument pos:start="1214:26" pos:end="1214:29"><expr pos:start="1214:26" pos:end="1214:29"><name pos:start="1214:26" pos:end="1214:29"><name pos:start="1214:26" pos:end="1214:26">v</name><index pos:start="1214:27" pos:end="1214:29">[<expr pos:start="1214:28" pos:end="1214:28"><literal type="number" pos:start="1214:28" pos:end="1214:28">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1215:13" pos:end="1215:31"><expr pos:start="1215:13" pos:end="1215:30"><name pos:start="1215:13" pos:end="1215:14">v4</name> <operator pos:start="1215:16" pos:end="1215:16">=</operator> <call pos:start="1215:18" pos:end="1215:30"><name pos:start="1215:18" pos:end="1215:24">tswapal</name><argument_list pos:start="1215:25" pos:end="1215:30">(<argument pos:start="1215:26" pos:end="1215:29"><expr pos:start="1215:26" pos:end="1215:29"><name pos:start="1215:26" pos:end="1215:29"><name pos:start="1215:26" pos:end="1215:26">v</name><index pos:start="1215:27" pos:end="1215:29">[<expr pos:start="1215:28" pos:end="1215:28"><literal type="number" pos:start="1215:28" pos:end="1215:28">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1216:13" pos:end="1216:31"><expr pos:start="1216:13" pos:end="1216:30"><name pos:start="1216:13" pos:end="1216:14">v5</name> <operator pos:start="1216:16" pos:end="1216:16">=</operator> <call pos:start="1216:18" pos:end="1216:30"><name pos:start="1216:18" pos:end="1216:24">tswapal</name><argument_list pos:start="1216:25" pos:end="1216:30">(<argument pos:start="1216:26" pos:end="1216:29"><expr pos:start="1216:26" pos:end="1216:29"><name pos:start="1216:26" pos:end="1216:29"><name pos:start="1216:26" pos:end="1216:26">v</name><index pos:start="1216:27" pos:end="1216:29">[<expr pos:start="1216:28" pos:end="1216:28"><literal type="number" pos:start="1216:28" pos:end="1216:28">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1217:13" pos:end="1217:31"><expr pos:start="1217:13" pos:end="1217:30"><name pos:start="1217:13" pos:end="1217:14">v6</name> <operator pos:start="1217:16" pos:end="1217:16">=</operator> <call pos:start="1217:18" pos:end="1217:30"><name pos:start="1217:18" pos:end="1217:24">tswapal</name><argument_list pos:start="1217:25" pos:end="1217:30">(<argument pos:start="1217:26" pos:end="1217:29"><expr pos:start="1217:26" pos:end="1217:29"><name pos:start="1217:26" pos:end="1217:29"><name pos:start="1217:26" pos:end="1217:26">v</name><index pos:start="1217:27" pos:end="1217:29">[<expr pos:start="1217:28" pos:end="1217:28"><literal type="number" pos:start="1217:28" pos:end="1217:28">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1218:13" pos:end="1218:36"><expr pos:start="1218:13" pos:end="1218:35"><call pos:start="1218:13" pos:end="1218:35"><name pos:start="1218:13" pos:end="1218:23">unlock_user</name><argument_list pos:start="1218:24" pos:end="1218:35">(<argument pos:start="1218:25" pos:end="1218:25"><expr pos:start="1218:25" pos:end="1218:25"><name pos:start="1218:25" pos:end="1218:25">v</name></expr></argument>, <argument pos:start="1218:28" pos:end="1218:31"><expr pos:start="1218:28" pos:end="1218:31"><name pos:start="1218:28" pos:end="1218:31">arg1</name></expr></argument>, <argument pos:start="1218:34" pos:end="1218:34"><expr pos:start="1218:34" pos:end="1218:34"><literal type="number" pos:start="1218:34" pos:end="1218:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1219:13" pos:end="1223:0"><expr pos:start="1219:13" pos:end="1221:48"><name pos:start="1219:13" pos:end="1219:15">ret</name> <operator pos:start="1219:17" pos:end="1219:17">=</operator> <call pos:start="1219:19" pos:end="1221:48"><name pos:start="1219:19" pos:end="1219:27">get_errno</name><argument_list pos:start="1219:28" pos:end="1221:48">(<argument pos:start="1219:29" pos:end="1221:47"><expr pos:start="1219:29" pos:end="1221:47"><call pos:start="1219:29" pos:end="1221:47"><name pos:start="1219:29" pos:end="1219:39">target_mmap</name><argument_list pos:start="1219:40" pos:end="1221:47">(<argument pos:start="1219:41" pos:end="1219:42"><expr pos:start="1219:41" pos:end="1219:42"><name pos:start="1219:41" pos:end="1219:42">v1</name></expr></argument>, <argument pos:start="1219:45" pos:end="1219:46"><expr pos:start="1219:45" pos:end="1219:46"><name pos:start="1219:45" pos:end="1219:46">v2</name></expr></argument>, <argument pos:start="1219:49" pos:end="1219:50"><expr pos:start="1219:49" pos:end="1219:50"><name pos:start="1219:49" pos:end="1219:50">v3</name></expr></argument>,
                                        <argument pos:start="1220:41" pos:end="1220:82"><expr pos:start="1220:41" pos:end="1220:82"><call pos:start="1220:41" pos:end="1220:82"><name pos:start="1220:41" pos:end="1220:62">target_to_host_bitmask</name><argument_list pos:start="1220:63" pos:end="1220:82">(<argument pos:start="1220:64" pos:end="1220:65"><expr pos:start="1220:64" pos:end="1220:65"><name pos:start="1220:64" pos:end="1220:65">v4</name></expr></argument>, <argument pos:start="1220:68" pos:end="1220:81"><expr pos:start="1220:68" pos:end="1220:81"><name pos:start="1220:68" pos:end="1220:81">mmap_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument pos:start="1221:41" pos:end="1221:42"><expr pos:start="1221:41" pos:end="1221:42"><name pos:start="1221:41" pos:end="1221:42">v5</name></expr></argument>, <argument pos:start="1221:45" pos:end="1221:46"><expr pos:start="1221:45" pos:end="1221:46"><name pos:start="1221:45" pos:end="1221:46">v6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="1222:1" pos:end="1222:5">#<cpp:directive pos:start="1222:2" pos:end="1222:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="1223:9" pos:end="1230:0"><expr pos:start="1223:9" pos:end="1226:42"><name pos:start="1223:9" pos:end="1223:11">ret</name> <operator pos:start="1223:13" pos:end="1223:13">=</operator> <call pos:start="1223:15" pos:end="1226:42"><name pos:start="1223:15" pos:end="1223:23">get_errno</name><argument_list pos:start="1223:24" pos:end="1226:42">(<argument pos:start="1223:25" pos:end="1226:41"><expr pos:start="1223:25" pos:end="1226:41"><call pos:start="1223:25" pos:end="1226:41"><name pos:start="1223:25" pos:end="1223:35">target_mmap</name><argument_list pos:start="1223:36" pos:end="1226:41">(<argument pos:start="1223:37" pos:end="1223:40"><expr pos:start="1223:37" pos:end="1223:40"><name pos:start="1223:37" pos:end="1223:40">arg1</name></expr></argument>, <argument pos:start="1223:43" pos:end="1223:46"><expr pos:start="1223:43" pos:end="1223:46"><name pos:start="1223:43" pos:end="1223:46">arg2</name></expr></argument>, <argument pos:start="1223:49" pos:end="1223:52"><expr pos:start="1223:49" pos:end="1223:52"><name pos:start="1223:49" pos:end="1223:52">arg3</name></expr></argument>,
                                    <argument pos:start="1224:37" pos:end="1224:80"><expr pos:start="1224:37" pos:end="1224:80"><call pos:start="1224:37" pos:end="1224:80"><name pos:start="1224:37" pos:end="1224:58">target_to_host_bitmask</name><argument_list pos:start="1224:59" pos:end="1224:80">(<argument pos:start="1224:60" pos:end="1224:63"><expr pos:start="1224:60" pos:end="1224:63"><name pos:start="1224:60" pos:end="1224:63">arg4</name></expr></argument>, <argument pos:start="1224:66" pos:end="1224:79"><expr pos:start="1224:66" pos:end="1224:79"><name pos:start="1224:66" pos:end="1224:79">mmap_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument pos:start="1225:37" pos:end="1225:40"><expr pos:start="1225:37" pos:end="1225:40"><name pos:start="1225:37" pos:end="1225:40">arg5</name></expr></argument>,
                                    <argument pos:start="1226:37" pos:end="1226:40"><expr pos:start="1226:37" pos:end="1226:40"><name pos:start="1226:37" pos:end="1226:40">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1227:1" pos:end="1227:6">#<cpp:directive pos:start="1227:2" pos:end="1227:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="1228:1" pos:end="1228:6">#<cpp:directive pos:start="1228:2" pos:end="1228:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1229:1" pos:end="1229:22">#<cpp:directive pos:start="1229:2" pos:end="1229:6">ifdef</cpp:directive> <name pos:start="1229:8" pos:end="1229:22">TARGET_NR_mmap2</name></cpp:ifdef>
    <case pos:start="1230:5" pos:end="1234:0">case <expr pos:start="1230:10" pos:end="1230:24"><name pos:start="1230:10" pos:end="1230:24">TARGET_NR_mmap2</name></expr>:</case>
<cpp:ifndef pos:start="1231:1" pos:end="1231:18">#<cpp:directive pos:start="1231:2" pos:end="1231:7">ifndef</cpp:directive> <name pos:start="1231:9" pos:end="1231:18">MMAP_SHIFT</name></cpp:ifndef>
<cpp:define pos:start="1232:1" pos:end="1232:21">#<cpp:directive pos:start="1232:2" pos:end="1232:7">define</cpp:directive> <cpp:macro pos:start="1232:9" pos:end="1232:18"><name pos:start="1232:9" pos:end="1232:18">MMAP_SHIFT</name></cpp:macro> <cpp:value pos:start="1232:20" pos:end="1232:21">12</cpp:value></cpp:define>
<cpp:endif pos:start="1233:1" pos:end="1233:6">#<cpp:directive pos:start="1233:2" pos:end="1233:6">endif</cpp:directive></cpp:endif>
        <expr_stmt pos:start="1234:9" pos:end="1239:0"><expr pos:start="1234:9" pos:end="1237:56"><name pos:start="1234:9" pos:end="1234:11">ret</name> <operator pos:start="1234:13" pos:end="1234:13">=</operator> <call pos:start="1234:15" pos:end="1237:56"><name pos:start="1234:15" pos:end="1234:23">get_errno</name><argument_list pos:start="1234:24" pos:end="1237:56">(<argument pos:start="1234:25" pos:end="1237:55"><expr pos:start="1234:25" pos:end="1237:55"><call pos:start="1234:25" pos:end="1237:55"><name pos:start="1234:25" pos:end="1234:35">target_mmap</name><argument_list pos:start="1234:36" pos:end="1237:55">(<argument pos:start="1234:37" pos:end="1234:40"><expr pos:start="1234:37" pos:end="1234:40"><name pos:start="1234:37" pos:end="1234:40">arg1</name></expr></argument>, <argument pos:start="1234:43" pos:end="1234:46"><expr pos:start="1234:43" pos:end="1234:46"><name pos:start="1234:43" pos:end="1234:46">arg2</name></expr></argument>, <argument pos:start="1234:49" pos:end="1234:52"><expr pos:start="1234:49" pos:end="1234:52"><name pos:start="1234:49" pos:end="1234:52">arg3</name></expr></argument>,
                                    <argument pos:start="1235:37" pos:end="1235:80"><expr pos:start="1235:37" pos:end="1235:80"><call pos:start="1235:37" pos:end="1235:80"><name pos:start="1235:37" pos:end="1235:58">target_to_host_bitmask</name><argument_list pos:start="1235:59" pos:end="1235:80">(<argument pos:start="1235:60" pos:end="1235:63"><expr pos:start="1235:60" pos:end="1235:63"><name pos:start="1235:60" pos:end="1235:63">arg4</name></expr></argument>, <argument pos:start="1235:66" pos:end="1235:79"><expr pos:start="1235:66" pos:end="1235:79"><name pos:start="1235:66" pos:end="1235:79">mmap_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument pos:start="1236:37" pos:end="1236:40"><expr pos:start="1236:37" pos:end="1236:40"><name pos:start="1236:37" pos:end="1236:40">arg5</name></expr></argument>,
                                    <argument pos:start="1237:37" pos:end="1237:54"><expr pos:start="1237:37" pos:end="1237:54"><name pos:start="1237:37" pos:end="1237:40">arg6</name> <operator pos:start="1237:42" pos:end="1237:43">&lt;&lt;</operator> <name pos:start="1237:45" pos:end="1237:54">MMAP_SHIFT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1238:1" pos:end="1238:6">#<cpp:directive pos:start="1238:2" pos:end="1238:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1239:5" pos:end="1239:26">case <expr pos:start="1239:10" pos:end="1239:25"><name pos:start="1239:10" pos:end="1239:25">TARGET_NR_munmap</name></expr>:</case>
        <expr_stmt pos:start="1240:9" pos:end="1240:51"><expr pos:start="1240:9" pos:end="1240:50"><name pos:start="1240:9" pos:end="1240:11">ret</name> <operator pos:start="1240:13" pos:end="1240:13">=</operator> <call pos:start="1240:15" pos:end="1240:50"><name pos:start="1240:15" pos:end="1240:23">get_errno</name><argument_list pos:start="1240:24" pos:end="1240:50">(<argument pos:start="1240:25" pos:end="1240:49"><expr pos:start="1240:25" pos:end="1240:49"><call pos:start="1240:25" pos:end="1240:49"><name pos:start="1240:25" pos:end="1240:37">target_munmap</name><argument_list pos:start="1240:38" pos:end="1240:49">(<argument pos:start="1240:39" pos:end="1240:42"><expr pos:start="1240:39" pos:end="1240:42"><name pos:start="1240:39" pos:end="1240:42">arg1</name></expr></argument>, <argument pos:start="1240:45" pos:end="1240:48"><expr pos:start="1240:45" pos:end="1240:48"><name pos:start="1240:45" pos:end="1240:48">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1241:5" pos:end="1241:28">case <expr pos:start="1241:10" pos:end="1241:27"><name pos:start="1241:10" pos:end="1241:27">TARGET_NR_mprotect</name></expr>:</case>
        <block pos:start="1242:9" pos:end="3541:14">{<block_content pos:start="1243:13" pos:end="3541:14">
            <decl_stmt pos:start="1243:13" pos:end="1243:40"><decl pos:start="1243:13" pos:end="1243:39"><type pos:start="1243:13" pos:end="1243:23"><name pos:start="1243:13" pos:end="1243:21">TaskState</name> <modifier pos:start="1243:23" pos:end="1243:23">*</modifier></type><name pos:start="1243:24" pos:end="1243:25">ts</name> <init pos:start="1243:27" pos:end="1243:39">= <expr pos:start="1243:29" pos:end="1243:39"><name pos:start="1243:29" pos:end="1243:39"><name pos:start="1243:29" pos:end="1243:31">cpu</name><operator pos:start="1243:32" pos:end="1243:33">-&gt;</operator><name pos:start="1243:34" pos:end="1243:39">opaque</name></name></expr></init></decl>;</decl_stmt>
            <comment type="block" pos:start="1244:13" pos:end="1244:75">/* Special hack to detect libc making the stack executable.  */</comment>
            <if_stmt pos:start="1245:13" pos:end="3541:14"><if pos:start="1245:13" pos:end="3541:14">if <condition pos:start="1245:16" pos:end="1247:49">(<expr pos:start="1245:17" pos:end="1247:48"><operator pos:start="1245:17" pos:end="1245:17">(</operator><name pos:start="1245:18" pos:end="1245:21">arg3</name> <operator pos:start="1245:23" pos:end="1245:23">&amp;</operator> <name pos:start="1245:25" pos:end="1245:38">PROT_GROWSDOWN</name><operator pos:start="1245:39" pos:end="1245:39">)</operator>
                <operator pos:start="1246:17" pos:end="1246:18">&amp;&amp;</operator> <name pos:start="1246:20" pos:end="1246:23">arg1</name> <operator pos:start="1246:25" pos:end="1246:26">&gt;=</operator> <name pos:start="1246:28" pos:end="1246:48"><name pos:start="1246:28" pos:end="1246:29">ts</name><operator pos:start="1246:30" pos:end="1246:31">-&gt;</operator><name pos:start="1246:32" pos:end="1246:35">info</name><operator pos:start="1246:36" pos:end="1246:37">-&gt;</operator><name pos:start="1246:38" pos:end="1246:48">stack_limit</name></name>
                <operator pos:start="1247:17" pos:end="1247:18">&amp;&amp;</operator> <name pos:start="1247:20" pos:end="1247:23">arg1</name> <operator pos:start="1247:25" pos:end="1247:26">&lt;=</operator> <name pos:start="1247:28" pos:end="1247:48"><name pos:start="1247:28" pos:end="1247:29">ts</name><operator pos:start="1247:30" pos:end="1247:31">-&gt;</operator><name pos:start="1247:32" pos:end="1247:35">info</name><operator pos:start="1247:36" pos:end="1247:37">-&gt;</operator><name pos:start="1247:38" pos:end="1247:48">start_stack</name></name></expr>)</condition> <block pos:start="1247:51" pos:end="3541:14">{<block_content pos:start="1248:17" pos:end="3541:14">
                <expr_stmt pos:start="1248:17" pos:end="1248:40"><expr pos:start="1248:17" pos:end="1248:39"><name pos:start="1248:17" pos:end="1248:20">arg3</name> <operator pos:start="1248:22" pos:end="1248:23">&amp;=</operator> <operator pos:start="1248:25" pos:end="1248:25">~</operator><name pos:start="1248:26" pos:end="1248:39">PROT_GROWSDOWN</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1249:17" pos:end="1249:59"><expr pos:start="1249:17" pos:end="1249:58"><name pos:start="1249:17" pos:end="1249:20">arg2</name> <operator pos:start="1249:22" pos:end="1249:22">=</operator> <name pos:start="1249:24" pos:end="1249:27">arg2</name> <operator pos:start="1249:29" pos:end="1249:29">+</operator> <name pos:start="1249:31" pos:end="1249:34">arg1</name> <operator pos:start="1249:36" pos:end="1249:36">-</operator> <name pos:start="1249:38" pos:end="1249:58"><name pos:start="1249:38" pos:end="1249:39">ts</name><operator pos:start="1249:40" pos:end="1249:41">-&gt;</operator><name pos:start="1249:42" pos:end="1249:45">info</name><operator pos:start="1249:46" pos:end="1249:47">-&gt;</operator><name pos:start="1249:48" pos:end="1249:58">stack_limit</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="1250:17" pos:end="1250:45"><expr pos:start="1250:17" pos:end="1250:44"><name pos:start="1250:17" pos:end="1250:20">arg1</name> <operator pos:start="1250:22" pos:end="1250:22">=</operator> <name pos:start="1250:24" pos:end="1250:44"><name pos:start="1250:24" pos:end="1250:25">ts</name><operator pos:start="1250:26" pos:end="1250:27">-&gt;</operator><name pos:start="1250:28" pos:end="1250:31">info</name><operator pos:start="1250:32" pos:end="1250:33">-&gt;</operator><name pos:start="1250:34" pos:end="1250:44">stack_limit</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1251:9" pos:end="1253:0"><expr pos:start="1251:9" pos:end="1251:58"><name pos:start="1251:9" pos:end="1251:11">ret</name> <operator pos:start="1251:13" pos:end="1251:13">=</operator> <call pos:start="1251:15" pos:end="1251:58"><name pos:start="1251:15" pos:end="1251:23">get_errno</name><argument_list pos:start="1251:24" pos:end="1251:58">(<argument pos:start="1251:25" pos:end="1251:57"><expr pos:start="1251:25" pos:end="1251:57"><call pos:start="1251:25" pos:end="1251:57"><name pos:start="1251:25" pos:end="1251:39">target_mprotect</name><argument_list pos:start="1251:40" pos:end="1251:57">(<argument pos:start="1251:41" pos:end="1251:44"><expr pos:start="1251:41" pos:end="1251:44"><name pos:start="1251:41" pos:end="1251:44">arg1</name></expr></argument>, <argument pos:start="1251:47" pos:end="1251:50"><expr pos:start="1251:47" pos:end="1251:50"><name pos:start="1251:47" pos:end="1251:50">arg2</name></expr></argument>, <argument pos:start="1251:53" pos:end="1251:56"><expr pos:start="1251:53" pos:end="1251:56"><name pos:start="1251:53" pos:end="1251:56">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1252:1" pos:end="1252:23">#<cpp:directive pos:start="1252:2" pos:end="1252:6">ifdef</cpp:directive> <name pos:start="1252:8" pos:end="1252:23">TARGET_NR_mremap</name></cpp:ifdef>
    <case pos:start="1253:5" pos:end="1253:26">case <expr pos:start="1253:10" pos:end="1253:25"><name pos:start="1253:10" pos:end="1253:25">TARGET_NR_mremap</name></expr>:</case>
        <expr_stmt pos:start="1254:9" pos:end="1258:0"><expr pos:start="1254:9" pos:end="1254:68"><name pos:start="1254:9" pos:end="1254:11">ret</name> <operator pos:start="1254:13" pos:end="1254:13">=</operator> <call pos:start="1254:15" pos:end="1254:68"><name pos:start="1254:15" pos:end="1254:23">get_errno</name><argument_list pos:start="1254:24" pos:end="1254:68">(<argument pos:start="1254:25" pos:end="1254:67"><expr pos:start="1254:25" pos:end="1254:67"><call pos:start="1254:25" pos:end="1254:67"><name pos:start="1254:25" pos:end="1254:37">target_mremap</name><argument_list pos:start="1254:38" pos:end="1254:67">(<argument pos:start="1254:39" pos:end="1254:42"><expr pos:start="1254:39" pos:end="1254:42"><name pos:start="1254:39" pos:end="1254:42">arg1</name></expr></argument>, <argument pos:start="1254:45" pos:end="1254:48"><expr pos:start="1254:45" pos:end="1254:48"><name pos:start="1254:45" pos:end="1254:48">arg2</name></expr></argument>, <argument pos:start="1254:51" pos:end="1254:54"><expr pos:start="1254:51" pos:end="1254:54"><name pos:start="1254:51" pos:end="1254:54">arg3</name></expr></argument>, <argument pos:start="1254:57" pos:end="1254:60"><expr pos:start="1254:57" pos:end="1254:60"><name pos:start="1254:57" pos:end="1254:60">arg4</name></expr></argument>, <argument pos:start="1254:63" pos:end="1254:66"><expr pos:start="1254:63" pos:end="1254:66"><name pos:start="1254:63" pos:end="1254:66">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1255:1" pos:end="1255:6">#<cpp:directive pos:start="1255:2" pos:end="1255:6">endif</cpp:directive></cpp:endif>
        <comment type="block" pos:start="1256:9" pos:end="1256:62">/* ??? msync/mlock/munlock are broken for softmmu.  */</comment>
<cpp:ifdef pos:start="1257:1" pos:end="1257:22">#<cpp:directive pos:start="1257:2" pos:end="1257:6">ifdef</cpp:directive> <name pos:start="1257:8" pos:end="1257:22">TARGET_NR_msync</name></cpp:ifdef>
    <case pos:start="1258:5" pos:end="1258:25">case <expr pos:start="1258:10" pos:end="1258:24"><name pos:start="1258:10" pos:end="1258:24">TARGET_NR_msync</name></expr>:</case>
        <expr_stmt pos:start="1259:9" pos:end="1262:0"><expr pos:start="1259:9" pos:end="1259:53"><name pos:start="1259:9" pos:end="1259:11">ret</name> <operator pos:start="1259:13" pos:end="1259:13">=</operator> <call pos:start="1259:15" pos:end="1259:53"><name pos:start="1259:15" pos:end="1259:23">get_errno</name><argument_list pos:start="1259:24" pos:end="1259:53">(<argument pos:start="1259:25" pos:end="1259:52"><expr pos:start="1259:25" pos:end="1259:52"><call pos:start="1259:25" pos:end="1259:52"><name pos:start="1259:25" pos:end="1259:29">msync</name><argument_list pos:start="1259:30" pos:end="1259:52">(<argument pos:start="1259:31" pos:end="1259:39"><expr pos:start="1259:31" pos:end="1259:39"><call pos:start="1259:31" pos:end="1259:39"><name pos:start="1259:31" pos:end="1259:33">g2h</name><argument_list pos:start="1259:34" pos:end="1259:39">(<argument pos:start="1259:35" pos:end="1259:38"><expr pos:start="1259:35" pos:end="1259:38"><name pos:start="1259:35" pos:end="1259:38">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1259:42" pos:end="1259:45"><expr pos:start="1259:42" pos:end="1259:45"><name pos:start="1259:42" pos:end="1259:45">arg2</name></expr></argument>, <argument pos:start="1259:48" pos:end="1259:51"><expr pos:start="1259:48" pos:end="1259:51"><name pos:start="1259:48" pos:end="1259:51">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1260:1" pos:end="1260:6">#<cpp:directive pos:start="1260:2" pos:end="1260:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1261:1" pos:end="1261:22">#<cpp:directive pos:start="1261:2" pos:end="1261:6">ifdef</cpp:directive> <name pos:start="1261:8" pos:end="1261:22">TARGET_NR_mlock</name></cpp:ifdef>
    <case pos:start="1262:5" pos:end="1262:25">case <expr pos:start="1262:10" pos:end="1262:24"><name pos:start="1262:10" pos:end="1262:24">TARGET_NR_mlock</name></expr>:</case>
        <expr_stmt pos:start="1263:9" pos:end="1266:0"><expr pos:start="1263:9" pos:end="1263:47"><name pos:start="1263:9" pos:end="1263:11">ret</name> <operator pos:start="1263:13" pos:end="1263:13">=</operator> <call pos:start="1263:15" pos:end="1263:47"><name pos:start="1263:15" pos:end="1263:23">get_errno</name><argument_list pos:start="1263:24" pos:end="1263:47">(<argument pos:start="1263:25" pos:end="1263:46"><expr pos:start="1263:25" pos:end="1263:46"><call pos:start="1263:25" pos:end="1263:46"><name pos:start="1263:25" pos:end="1263:29">mlock</name><argument_list pos:start="1263:30" pos:end="1263:46">(<argument pos:start="1263:31" pos:end="1263:39"><expr pos:start="1263:31" pos:end="1263:39"><call pos:start="1263:31" pos:end="1263:39"><name pos:start="1263:31" pos:end="1263:33">g2h</name><argument_list pos:start="1263:34" pos:end="1263:39">(<argument pos:start="1263:35" pos:end="1263:38"><expr pos:start="1263:35" pos:end="1263:38"><name pos:start="1263:35" pos:end="1263:38">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1263:42" pos:end="1263:45"><expr pos:start="1263:42" pos:end="1263:45"><name pos:start="1263:42" pos:end="1263:45">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1264:1" pos:end="1264:6">#<cpp:directive pos:start="1264:2" pos:end="1264:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1265:1" pos:end="1265:24">#<cpp:directive pos:start="1265:2" pos:end="1265:6">ifdef</cpp:directive> <name pos:start="1265:8" pos:end="1265:24">TARGET_NR_munlock</name></cpp:ifdef>
    <case pos:start="1266:5" pos:end="1266:27">case <expr pos:start="1266:10" pos:end="1266:26"><name pos:start="1266:10" pos:end="1266:26">TARGET_NR_munlock</name></expr>:</case>
        <expr_stmt pos:start="1267:9" pos:end="1270:0"><expr pos:start="1267:9" pos:end="1267:49"><name pos:start="1267:9" pos:end="1267:11">ret</name> <operator pos:start="1267:13" pos:end="1267:13">=</operator> <call pos:start="1267:15" pos:end="1267:49"><name pos:start="1267:15" pos:end="1267:23">get_errno</name><argument_list pos:start="1267:24" pos:end="1267:49">(<argument pos:start="1267:25" pos:end="1267:48"><expr pos:start="1267:25" pos:end="1267:48"><call pos:start="1267:25" pos:end="1267:48"><name pos:start="1267:25" pos:end="1267:31">munlock</name><argument_list pos:start="1267:32" pos:end="1267:48">(<argument pos:start="1267:33" pos:end="1267:41"><expr pos:start="1267:33" pos:end="1267:41"><call pos:start="1267:33" pos:end="1267:41"><name pos:start="1267:33" pos:end="1267:35">g2h</name><argument_list pos:start="1267:36" pos:end="1267:41">(<argument pos:start="1267:37" pos:end="1267:40"><expr pos:start="1267:37" pos:end="1267:40"><name pos:start="1267:37" pos:end="1267:40">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1267:44" pos:end="1267:47"><expr pos:start="1267:44" pos:end="1267:47"><name pos:start="1267:44" pos:end="1267:47">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1268:1" pos:end="1268:6">#<cpp:directive pos:start="1268:2" pos:end="1268:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1269:1" pos:end="1269:25">#<cpp:directive pos:start="1269:2" pos:end="1269:6">ifdef</cpp:directive> <name pos:start="1269:8" pos:end="1269:25">TARGET_NR_mlockall</name></cpp:ifdef>
    <case pos:start="1270:5" pos:end="1270:28">case <expr pos:start="1270:10" pos:end="1270:27"><name pos:start="1270:10" pos:end="1270:27">TARGET_NR_mlockall</name></expr>:</case>
        <expr_stmt pos:start="1271:9" pos:end="1274:0"><expr pos:start="1271:9" pos:end="1271:68"><name pos:start="1271:9" pos:end="1271:11">ret</name> <operator pos:start="1271:13" pos:end="1271:13">=</operator> <call pos:start="1271:15" pos:end="1271:68"><name pos:start="1271:15" pos:end="1271:23">get_errno</name><argument_list pos:start="1271:24" pos:end="1271:68">(<argument pos:start="1271:25" pos:end="1271:67"><expr pos:start="1271:25" pos:end="1271:67"><call pos:start="1271:25" pos:end="1271:67"><name pos:start="1271:25" pos:end="1271:32">mlockall</name><argument_list pos:start="1271:33" pos:end="1271:67">(<argument pos:start="1271:34" pos:end="1271:66"><expr pos:start="1271:34" pos:end="1271:66"><call pos:start="1271:34" pos:end="1271:66"><name pos:start="1271:34" pos:end="1271:60">target_to_host_mlockall_arg</name><argument_list pos:start="1271:61" pos:end="1271:66">(<argument pos:start="1271:62" pos:end="1271:65"><expr pos:start="1271:62" pos:end="1271:65"><name pos:start="1271:62" pos:end="1271:65">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1272:1" pos:end="1272:6">#<cpp:directive pos:start="1272:2" pos:end="1272:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1273:1" pos:end="1273:27">#<cpp:directive pos:start="1273:2" pos:end="1273:6">ifdef</cpp:directive> <name pos:start="1273:8" pos:end="1273:27">TARGET_NR_munlockall</name></cpp:ifdef>
    <case pos:start="1274:5" pos:end="1274:30">case <expr pos:start="1274:10" pos:end="1274:29"><name pos:start="1274:10" pos:end="1274:29">TARGET_NR_munlockall</name></expr>:</case>
        <expr_stmt pos:start="1275:9" pos:end="1277:0"><expr pos:start="1275:9" pos:end="1275:37"><name pos:start="1275:9" pos:end="1275:11">ret</name> <operator pos:start="1275:13" pos:end="1275:13">=</operator> <call pos:start="1275:15" pos:end="1275:37"><name pos:start="1275:15" pos:end="1275:23">get_errno</name><argument_list pos:start="1275:24" pos:end="1275:37">(<argument pos:start="1275:25" pos:end="1275:36"><expr pos:start="1275:25" pos:end="1275:36"><call pos:start="1275:25" pos:end="1275:36"><name pos:start="1275:25" pos:end="1275:34">munlockall</name><argument_list pos:start="1275:35" pos:end="1275:36">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1276:1" pos:end="1276:6">#<cpp:directive pos:start="1276:2" pos:end="1276:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1277:5" pos:end="1277:28">case <expr pos:start="1277:10" pos:end="1277:27"><name pos:start="1277:10" pos:end="1277:27">TARGET_NR_truncate</name></expr>:</case>
        <if_stmt pos:start="1278:9" pos:end="1279:24"><if pos:start="1278:9" pos:end="1279:24">if <condition pos:start="1278:12" pos:end="1278:42">(<expr pos:start="1278:13" pos:end="1278:41"><operator pos:start="1278:13" pos:end="1278:13">!</operator><operator pos:start="1278:14" pos:end="1278:14">(</operator><name pos:start="1278:15" pos:end="1278:15">p</name> <operator pos:start="1278:17" pos:end="1278:17">=</operator> <call pos:start="1278:19" pos:end="1278:40"><name pos:start="1278:19" pos:end="1278:34">lock_user_string</name><argument_list pos:start="1278:35" pos:end="1278:40">(<argument pos:start="1278:36" pos:end="1278:39"><expr pos:start="1278:36" pos:end="1278:39"><name pos:start="1278:36" pos:end="1278:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1278:41" pos:end="1278:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1279:13" pos:end="1279:24"><block_content pos:start="1279:13" pos:end="1279:24">
            <goto pos:start="1279:13" pos:end="1279:24">goto <name pos:start="1279:18" pos:end="1279:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1280:9" pos:end="1280:43"><expr pos:start="1280:9" pos:end="1280:42"><name pos:start="1280:9" pos:end="1280:11">ret</name> <operator pos:start="1280:13" pos:end="1280:13">=</operator> <call pos:start="1280:15" pos:end="1280:42"><name pos:start="1280:15" pos:end="1280:23">get_errno</name><argument_list pos:start="1280:24" pos:end="1280:42">(<argument pos:start="1280:25" pos:end="1280:41"><expr pos:start="1280:25" pos:end="1280:41"><call pos:start="1280:25" pos:end="1280:41"><name pos:start="1280:25" pos:end="1280:32">truncate</name><argument_list pos:start="1280:33" pos:end="1280:41">(<argument pos:start="1280:34" pos:end="1280:34"><expr pos:start="1280:34" pos:end="1280:34"><name pos:start="1280:34" pos:end="1280:34">p</name></expr></argument>, <argument pos:start="1280:37" pos:end="1280:40"><expr pos:start="1280:37" pos:end="1280:40"><name pos:start="1280:37" pos:end="1280:40">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1281:9" pos:end="1281:32"><expr pos:start="1281:9" pos:end="1281:31"><call pos:start="1281:9" pos:end="1281:31"><name pos:start="1281:9" pos:end="1281:19">unlock_user</name><argument_list pos:start="1281:20" pos:end="1281:31">(<argument pos:start="1281:21" pos:end="1281:21"><expr pos:start="1281:21" pos:end="1281:21"><name pos:start="1281:21" pos:end="1281:21">p</name></expr></argument>, <argument pos:start="1281:24" pos:end="1281:27"><expr pos:start="1281:24" pos:end="1281:27"><name pos:start="1281:24" pos:end="1281:27">arg1</name></expr></argument>, <argument pos:start="1281:30" pos:end="1281:30"><expr pos:start="1281:30" pos:end="1281:30"><literal type="number" pos:start="1281:30" pos:end="1281:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1282:5" pos:end="1282:29">case <expr pos:start="1282:10" pos:end="1282:28"><name pos:start="1282:10" pos:end="1282:28">TARGET_NR_ftruncate</name></expr>:</case>
        <expr_stmt pos:start="1283:9" pos:end="1283:47"><expr pos:start="1283:9" pos:end="1283:46"><name pos:start="1283:9" pos:end="1283:11">ret</name> <operator pos:start="1283:13" pos:end="1283:13">=</operator> <call pos:start="1283:15" pos:end="1283:46"><name pos:start="1283:15" pos:end="1283:23">get_errno</name><argument_list pos:start="1283:24" pos:end="1283:46">(<argument pos:start="1283:25" pos:end="1283:45"><expr pos:start="1283:25" pos:end="1283:45"><call pos:start="1283:25" pos:end="1283:45"><name pos:start="1283:25" pos:end="1283:33">ftruncate</name><argument_list pos:start="1283:34" pos:end="1283:45">(<argument pos:start="1283:35" pos:end="1283:38"><expr pos:start="1283:35" pos:end="1283:38"><name pos:start="1283:35" pos:end="1283:38">arg1</name></expr></argument>, <argument pos:start="1283:41" pos:end="1283:44"><expr pos:start="1283:41" pos:end="1283:44"><name pos:start="1283:41" pos:end="1283:44">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1284:5" pos:end="1284:26">case <expr pos:start="1284:10" pos:end="1284:25"><name pos:start="1284:10" pos:end="1284:25">TARGET_NR_fchmod</name></expr>:</case>
        <expr_stmt pos:start="1285:9" pos:end="1287:0"><expr pos:start="1285:9" pos:end="1285:43"><name pos:start="1285:9" pos:end="1285:11">ret</name> <operator pos:start="1285:13" pos:end="1285:13">=</operator> <call pos:start="1285:15" pos:end="1285:43"><name pos:start="1285:15" pos:end="1285:23">get_errno</name><argument_list pos:start="1285:24" pos:end="1285:43">(<argument pos:start="1285:25" pos:end="1285:42"><expr pos:start="1285:25" pos:end="1285:42"><call pos:start="1285:25" pos:end="1285:42"><name pos:start="1285:25" pos:end="1285:30">fchmod</name><argument_list pos:start="1285:31" pos:end="1285:42">(<argument pos:start="1285:32" pos:end="1285:35"><expr pos:start="1285:32" pos:end="1285:35"><name pos:start="1285:32" pos:end="1285:35">arg1</name></expr></argument>, <argument pos:start="1285:38" pos:end="1285:41"><expr pos:start="1285:38" pos:end="1285:41"><name pos:start="1285:38" pos:end="1285:41">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="1286:1" pos:end="1286:31">#<cpp:directive pos:start="1286:2" pos:end="1286:3">if</cpp:directive> <expr pos:start="1286:5" pos:end="1286:31"><call pos:start="1286:5" pos:end="1286:31"><name pos:start="1286:5" pos:end="1286:11">defined</name><argument_list pos:start="1286:12" pos:end="1286:31">(<argument pos:start="1286:13" pos:end="1286:30"><expr pos:start="1286:13" pos:end="1286:30"><name pos:start="1286:13" pos:end="1286:30">TARGET_NR_fchmodat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="1287:5" pos:end="1287:28">case <expr pos:start="1287:10" pos:end="1287:27"><name pos:start="1287:10" pos:end="1287:27">TARGET_NR_fchmodat</name></expr>:</case>
        <if_stmt pos:start="1288:9" pos:end="1289:24"><if pos:start="1288:9" pos:end="1289:24">if <condition pos:start="1288:12" pos:end="1288:42">(<expr pos:start="1288:13" pos:end="1288:41"><operator pos:start="1288:13" pos:end="1288:13">!</operator><operator pos:start="1288:14" pos:end="1288:14">(</operator><name pos:start="1288:15" pos:end="1288:15">p</name> <operator pos:start="1288:17" pos:end="1288:17">=</operator> <call pos:start="1288:19" pos:end="1288:40"><name pos:start="1288:19" pos:end="1288:34">lock_user_string</name><argument_list pos:start="1288:35" pos:end="1288:40">(<argument pos:start="1288:36" pos:end="1288:39"><expr pos:start="1288:36" pos:end="1288:39"><name pos:start="1288:36" pos:end="1288:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="1288:41" pos:end="1288:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1289:13" pos:end="1289:24"><block_content pos:start="1289:13" pos:end="1289:24">
            <goto pos:start="1289:13" pos:end="1289:24">goto <name pos:start="1289:18" pos:end="1289:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1290:9" pos:end="1290:52"><expr pos:start="1290:9" pos:end="1290:51"><name pos:start="1290:9" pos:end="1290:11">ret</name> <operator pos:start="1290:13" pos:end="1290:13">=</operator> <call pos:start="1290:15" pos:end="1290:51"><name pos:start="1290:15" pos:end="1290:23">get_errno</name><argument_list pos:start="1290:24" pos:end="1290:51">(<argument pos:start="1290:25" pos:end="1290:50"><expr pos:start="1290:25" pos:end="1290:50"><call pos:start="1290:25" pos:end="1290:50"><name pos:start="1290:25" pos:end="1290:32">fchmodat</name><argument_list pos:start="1290:33" pos:end="1290:50">(<argument pos:start="1290:34" pos:end="1290:37"><expr pos:start="1290:34" pos:end="1290:37"><name pos:start="1290:34" pos:end="1290:37">arg1</name></expr></argument>, <argument pos:start="1290:40" pos:end="1290:40"><expr pos:start="1290:40" pos:end="1290:40"><name pos:start="1290:40" pos:end="1290:40">p</name></expr></argument>, <argument pos:start="1290:43" pos:end="1290:46"><expr pos:start="1290:43" pos:end="1290:46"><name pos:start="1290:43" pos:end="1290:46">arg3</name></expr></argument>, <argument pos:start="1290:49" pos:end="1290:49"><expr pos:start="1290:49" pos:end="1290:49"><literal type="number" pos:start="1290:49" pos:end="1290:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1291:9" pos:end="1293:0"><expr pos:start="1291:9" pos:end="1291:31"><call pos:start="1291:9" pos:end="1291:31"><name pos:start="1291:9" pos:end="1291:19">unlock_user</name><argument_list pos:start="1291:20" pos:end="1291:31">(<argument pos:start="1291:21" pos:end="1291:21"><expr pos:start="1291:21" pos:end="1291:21"><name pos:start="1291:21" pos:end="1291:21">p</name></expr></argument>, <argument pos:start="1291:24" pos:end="1291:27"><expr pos:start="1291:24" pos:end="1291:27"><name pos:start="1291:24" pos:end="1291:27">arg2</name></expr></argument>, <argument pos:start="1291:30" pos:end="1291:30"><expr pos:start="1291:30" pos:end="1291:30"><literal type="number" pos:start="1291:30" pos:end="1291:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1292:1" pos:end="1292:6">#<cpp:directive pos:start="1292:2" pos:end="1292:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1293:5" pos:end="1293:31">case <expr pos:start="1293:10" pos:end="1293:30"><name pos:start="1293:10" pos:end="1293:30">TARGET_NR_getpriority</name></expr>:</case>
        <comment type="block" pos:start="1294:9" pos:end="1295:53">/* Note that negative values are valid for getpriority, so we must
           differentiate based on errno settings.  */</comment>
        <expr_stmt pos:start="1296:9" pos:end="1296:18"><expr pos:start="1296:9" pos:end="1296:17"><name pos:start="1296:9" pos:end="1296:13">errno</name> <operator pos:start="1296:15" pos:end="1296:15">=</operator> <literal type="number" pos:start="1296:17" pos:end="1296:17">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1297:9" pos:end="1297:38"><expr pos:start="1297:9" pos:end="1297:37"><name pos:start="1297:9" pos:end="1297:11">ret</name> <operator pos:start="1297:13" pos:end="1297:13">=</operator> <call pos:start="1297:15" pos:end="1297:37"><name pos:start="1297:15" pos:end="1297:25">getpriority</name><argument_list pos:start="1297:26" pos:end="1297:37">(<argument pos:start="1297:27" pos:end="1297:30"><expr pos:start="1297:27" pos:end="1297:30"><name pos:start="1297:27" pos:end="1297:30">arg1</name></expr></argument>, <argument pos:start="1297:33" pos:end="1297:36"><expr pos:start="1297:33" pos:end="1297:36"><name pos:start="1297:33" pos:end="1297:36">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1298:9" pos:end="3541:14"><if pos:start="1298:9" pos:end="3541:14">if <condition pos:start="1298:12" pos:end="1298:36">(<expr pos:start="1298:13" pos:end="1298:35"><name pos:start="1298:13" pos:end="1298:15">ret</name> <operator pos:start="1298:17" pos:end="1298:18">==</operator> <operator pos:start="1298:20" pos:end="1298:20">-</operator><literal type="number" pos:start="1298:21" pos:end="1298:21">1</literal> <operator pos:start="1298:23" pos:end="1298:24">&amp;&amp;</operator> <name pos:start="1298:26" pos:end="1298:30">errno</name> <operator pos:start="1298:32" pos:end="1298:33">!=</operator> <literal type="number" pos:start="1298:35" pos:end="1298:35">0</literal></expr>)</condition> <block pos:start="1298:38" pos:end="3541:14">{<block_content pos:start="1299:13" pos:end="3541:14">
            <expr_stmt pos:start="1299:13" pos:end="1301:0"><expr pos:start="1299:13" pos:end="1299:46"><name pos:start="1299:13" pos:end="1299:15">ret</name> <operator pos:start="1299:17" pos:end="1299:17">=</operator> <operator pos:start="1299:19" pos:end="1299:19">-</operator><call pos:start="1299:20" pos:end="1299:46"><name pos:start="1299:20" pos:end="1299:39">host_to_target_errno</name><argument_list pos:start="1299:40" pos:end="1299:46">(<argument pos:start="1299:41" pos:end="1299:45"><expr pos:start="1299:41" pos:end="1299:45"><name pos:start="1299:41" pos:end="1299:45">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1300:1" pos:end="1300:19">#<cpp:directive pos:start="1300:2" pos:end="1300:6">ifdef</cpp:directive> <name pos:start="1300:8" pos:end="1300:19">TARGET_ALPHA</name></cpp:ifdef>
        <comment type="block" pos:start="1301:9" pos:end="1301:71">/* Return value is the unbiased priority.  Signal no error.  */</comment>
        <expr_stmt pos:start="1302:9" pos:end="1304:0"><expr pos:start="1302:9" pos:end="1302:49"><operator pos:start="1302:9" pos:end="1302:9">(</operator><operator pos:start="1302:10" pos:end="1302:10">(</operator><name pos:start="1302:11" pos:end="1302:23">CPUAlphaState</name> <operator pos:start="1302:25" pos:end="1302:25">*</operator><operator pos:start="1302:26" pos:end="1302:26">)</operator><name pos:start="1302:27" pos:end="1302:33">cpu_env</name><operator pos:start="1302:34" pos:end="1302:34">)</operator><operator pos:start="1302:35" pos:end="1302:36">-&gt;</operator><name pos:start="1302:37" pos:end="1302:45"><name pos:start="1302:37" pos:end="1302:38">ir</name><index pos:start="1302:39" pos:end="1302:45">[<expr pos:start="1302:40" pos:end="1302:44"><name pos:start="1302:40" pos:end="1302:44">IR_V0</name></expr>]</index></name> <operator pos:start="1302:47" pos:end="1302:47">=</operator> <literal type="number" pos:start="1302:49" pos:end="1302:49">0</literal></expr>;</expr_stmt>
<cpp:else pos:start="1303:1" pos:end="1303:5">#<cpp:directive pos:start="1303:2" pos:end="1303:5">else</cpp:directive></cpp:else>
        <comment type="block" pos:start="1304:9" pos:end="1304:75">/* Return value is a biased priority to avoid negative numbers.  */</comment>
        <expr_stmt pos:start="1305:9" pos:end="1307:0"><expr pos:start="1305:9" pos:end="1305:22"><name pos:start="1305:9" pos:end="1305:11">ret</name> <operator pos:start="1305:13" pos:end="1305:13">=</operator> <literal type="number" pos:start="1305:15" pos:end="1305:18">20</literal> <operator pos:start="1305:18" pos:end="1305:18">-</operator> <name pos:start="1305:20" pos:end="1305:22">ret</name></expr>;</expr_stmt>
<cpp:endif pos:start="1306:1" pos:end="1306:6">#<cpp:directive pos:start="1306:2" pos:end="1306:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1307:5" pos:end="1307:31">case <expr pos:start="1307:10" pos:end="1307:30"><name pos:start="1307:10" pos:end="1307:30">TARGET_NR_setpriority</name></expr>:</case>
        <expr_stmt pos:start="1308:9" pos:end="1310:0"><expr pos:start="1308:9" pos:end="1308:54"><name pos:start="1308:9" pos:end="1308:11">ret</name> <operator pos:start="1308:13" pos:end="1308:13">=</operator> <call pos:start="1308:15" pos:end="1308:54"><name pos:start="1308:15" pos:end="1308:23">get_errno</name><argument_list pos:start="1308:24" pos:end="1308:54">(<argument pos:start="1308:25" pos:end="1308:53"><expr pos:start="1308:25" pos:end="1308:53"><call pos:start="1308:25" pos:end="1308:53"><name pos:start="1308:25" pos:end="1308:35">setpriority</name><argument_list pos:start="1308:36" pos:end="1308:53">(<argument pos:start="1308:37" pos:end="1308:40"><expr pos:start="1308:37" pos:end="1308:40"><name pos:start="1308:37" pos:end="1308:40">arg1</name></expr></argument>, <argument pos:start="1308:43" pos:end="1308:46"><expr pos:start="1308:43" pos:end="1308:46"><name pos:start="1308:43" pos:end="1308:46">arg2</name></expr></argument>, <argument pos:start="1308:49" pos:end="1308:52"><expr pos:start="1308:49" pos:end="1308:52"><name pos:start="1308:49" pos:end="1308:52">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1309:1" pos:end="1309:23">#<cpp:directive pos:start="1309:2" pos:end="1309:6">ifdef</cpp:directive> <name pos:start="1309:8" pos:end="1309:23">TARGET_NR_profil</name></cpp:ifdef>
    <case pos:start="1310:5" pos:end="1310:26">case <expr pos:start="1310:10" pos:end="1310:25"><name pos:start="1310:10" pos:end="1310:25">TARGET_NR_profil</name></expr>:</case>
        <goto pos:start="1311:9" pos:end="1313:0">goto <name pos:start="1311:14" pos:end="1311:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1312:1" pos:end="1312:6">#<cpp:directive pos:start="1312:2" pos:end="1312:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1313:5" pos:end="1313:26">case <expr pos:start="1313:10" pos:end="1313:25"><name pos:start="1313:10" pos:end="1313:25">TARGET_NR_statfs</name></expr>:</case>
        <if_stmt pos:start="1314:9" pos:end="1315:24"><if pos:start="1314:9" pos:end="1315:24">if <condition pos:start="1314:12" pos:end="1314:42">(<expr pos:start="1314:13" pos:end="1314:41"><operator pos:start="1314:13" pos:end="1314:13">!</operator><operator pos:start="1314:14" pos:end="1314:14">(</operator><name pos:start="1314:15" pos:end="1314:15">p</name> <operator pos:start="1314:17" pos:end="1314:17">=</operator> <call pos:start="1314:19" pos:end="1314:40"><name pos:start="1314:19" pos:end="1314:34">lock_user_string</name><argument_list pos:start="1314:35" pos:end="1314:40">(<argument pos:start="1314:36" pos:end="1314:39"><expr pos:start="1314:36" pos:end="1314:39"><name pos:start="1314:36" pos:end="1314:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1314:41" pos:end="1314:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1315:13" pos:end="1315:24"><block_content pos:start="1315:13" pos:end="1315:24">
            <goto pos:start="1315:13" pos:end="1315:24">goto <name pos:start="1315:18" pos:end="1315:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1316:9" pos:end="1316:48"><expr pos:start="1316:9" pos:end="1316:47"><name pos:start="1316:9" pos:end="1316:11">ret</name> <operator pos:start="1316:13" pos:end="1316:13">=</operator> <call pos:start="1316:15" pos:end="1316:47"><name pos:start="1316:15" pos:end="1316:23">get_errno</name><argument_list pos:start="1316:24" pos:end="1316:47">(<argument pos:start="1316:25" pos:end="1316:46"><expr pos:start="1316:25" pos:end="1316:46"><call pos:start="1316:25" pos:end="1316:46"><name pos:start="1316:25" pos:end="1316:30">statfs</name><argument_list pos:start="1316:31" pos:end="1316:46">(<argument pos:start="1316:32" pos:end="1316:38"><expr pos:start="1316:32" pos:end="1316:38"><call pos:start="1316:32" pos:end="1316:38"><name pos:start="1316:32" pos:end="1316:35">path</name><argument_list pos:start="1316:36" pos:end="1316:38">(<argument pos:start="1316:37" pos:end="1316:37"><expr pos:start="1316:37" pos:end="1316:37"><name pos:start="1316:37" pos:end="1316:37">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1316:41" pos:end="1316:45"><expr pos:start="1316:41" pos:end="1316:45"><operator pos:start="1316:41" pos:end="1316:41">&amp;</operator><name pos:start="1316:42" pos:end="1316:45">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1317:9" pos:end="1317:32"><expr pos:start="1317:9" pos:end="1317:31"><call pos:start="1317:9" pos:end="1317:31"><name pos:start="1317:9" pos:end="1317:19">unlock_user</name><argument_list pos:start="1317:20" pos:end="1317:31">(<argument pos:start="1317:21" pos:end="1317:21"><expr pos:start="1317:21" pos:end="1317:21"><name pos:start="1317:21" pos:end="1317:21">p</name></expr></argument>, <argument pos:start="1317:24" pos:end="1317:27"><expr pos:start="1317:24" pos:end="1317:27"><name pos:start="1317:24" pos:end="1317:27">arg1</name></expr></argument>, <argument pos:start="1317:30" pos:end="1317:30"><expr pos:start="1317:30" pos:end="1317:30"><literal type="number" pos:start="1317:30" pos:end="1317:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <label pos:start="1318:5" pos:end="1318:19"><name pos:start="1318:5" pos:end="1318:18">convert_statfs</name>:</label>
        <if_stmt pos:start="1319:9" pos:end="3541:14"><if pos:start="1319:9" pos:end="3541:14">if <condition pos:start="1319:12" pos:end="1319:27">(<expr pos:start="1319:13" pos:end="1319:26"><operator pos:start="1319:13" pos:end="1319:13">!</operator><call pos:start="1319:14" pos:end="1319:26"><name pos:start="1319:14" pos:end="1319:21">is_error</name><argument_list pos:start="1319:22" pos:end="1319:26">(<argument pos:start="1319:23" pos:end="1319:25"><expr pos:start="1319:23" pos:end="1319:25"><name pos:start="1319:23" pos:end="1319:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1319:29" pos:end="3541:14">{<block_content pos:start="1320:13" pos:end="3541:14">
            <decl_stmt pos:start="1320:13" pos:end="1320:46"><decl pos:start="1320:13" pos:end="1320:45"><type pos:start="1320:13" pos:end="1320:34"><name pos:start="1320:13" pos:end="1320:32"><name pos:start="1320:13" pos:end="1320:18">struct</name> <name pos:start="1320:20" pos:end="1320:32">target_statfs</name></name> <modifier pos:start="1320:34" pos:end="1320:34">*</modifier></type><name pos:start="1320:35" pos:end="1320:45">target_stfs</name></decl>;</decl_stmt>
            <if_stmt pos:start="1321:13" pos:end="1322:28"><if pos:start="1321:13" pos:end="1322:28">if <condition pos:start="1321:16" pos:end="1321:70">(<expr pos:start="1321:17" pos:end="1321:69"><operator pos:start="1321:17" pos:end="1321:17">!</operator><call pos:start="1321:18" pos:end="1321:69"><name pos:start="1321:18" pos:end="1321:33">lock_user_struct</name><argument_list pos:start="1321:34" pos:end="1321:69">(<argument pos:start="1321:35" pos:end="1321:46"><expr pos:start="1321:35" pos:end="1321:46"><name pos:start="1321:35" pos:end="1321:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1321:49" pos:end="1321:59"><expr pos:start="1321:49" pos:end="1321:59"><name pos:start="1321:49" pos:end="1321:59">target_stfs</name></expr></argument>, <argument pos:start="1321:62" pos:end="1321:65"><expr pos:start="1321:62" pos:end="1321:65"><name pos:start="1321:62" pos:end="1321:65">arg2</name></expr></argument>, <argument pos:start="1321:68" pos:end="1321:68"><expr pos:start="1321:68" pos:end="1321:68"><literal type="number" pos:start="1321:68" pos:end="1321:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1322:17" pos:end="1322:28"><block_content pos:start="1322:17" pos:end="1322:28">
                <goto pos:start="1322:17" pos:end="1322:28">goto <name pos:start="1322:22" pos:end="1322:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1323:13" pos:end="1323:58"><expr pos:start="1323:13" pos:end="1323:57"><call pos:start="1323:13" pos:end="1323:57"><name pos:start="1323:13" pos:end="1323:22">__put_user</name><argument_list pos:start="1323:23" pos:end="1323:57">(<argument pos:start="1323:24" pos:end="1323:34"><expr pos:start="1323:24" pos:end="1323:34"><name pos:start="1323:24" pos:end="1323:34"><name pos:start="1323:24" pos:end="1323:27">stfs</name><operator pos:start="1323:28" pos:end="1323:28">.</operator><name pos:start="1323:29" pos:end="1323:34">f_type</name></name></expr></argument>, <argument pos:start="1323:37" pos:end="1323:56"><expr pos:start="1323:37" pos:end="1323:56"><operator pos:start="1323:37" pos:end="1323:37">&amp;</operator><name pos:start="1323:38" pos:end="1323:56"><name pos:start="1323:38" pos:end="1323:48">target_stfs</name><operator pos:start="1323:49" pos:end="1323:50">-&gt;</operator><name pos:start="1323:51" pos:end="1323:56">f_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1324:13" pos:end="1324:60"><expr pos:start="1324:13" pos:end="1324:59"><call pos:start="1324:13" pos:end="1324:59"><name pos:start="1324:13" pos:end="1324:22">__put_user</name><argument_list pos:start="1324:23" pos:end="1324:59">(<argument pos:start="1324:24" pos:end="1324:35"><expr pos:start="1324:24" pos:end="1324:35"><name pos:start="1324:24" pos:end="1324:35"><name pos:start="1324:24" pos:end="1324:27">stfs</name><operator pos:start="1324:28" pos:end="1324:28">.</operator><name pos:start="1324:29" pos:end="1324:35">f_bsize</name></name></expr></argument>, <argument pos:start="1324:38" pos:end="1324:58"><expr pos:start="1324:38" pos:end="1324:58"><operator pos:start="1324:38" pos:end="1324:38">&amp;</operator><name pos:start="1324:39" pos:end="1324:58"><name pos:start="1324:39" pos:end="1324:49">target_stfs</name><operator pos:start="1324:50" pos:end="1324:51">-&gt;</operator><name pos:start="1324:52" pos:end="1324:58">f_bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1325:13" pos:end="1325:62"><expr pos:start="1325:13" pos:end="1325:61"><call pos:start="1325:13" pos:end="1325:61"><name pos:start="1325:13" pos:end="1325:22">__put_user</name><argument_list pos:start="1325:23" pos:end="1325:61">(<argument pos:start="1325:24" pos:end="1325:36"><expr pos:start="1325:24" pos:end="1325:36"><name pos:start="1325:24" pos:end="1325:36"><name pos:start="1325:24" pos:end="1325:27">stfs</name><operator pos:start="1325:28" pos:end="1325:28">.</operator><name pos:start="1325:29" pos:end="1325:36">f_blocks</name></name></expr></argument>, <argument pos:start="1325:39" pos:end="1325:60"><expr pos:start="1325:39" pos:end="1325:60"><operator pos:start="1325:39" pos:end="1325:39">&amp;</operator><name pos:start="1325:40" pos:end="1325:60"><name pos:start="1325:40" pos:end="1325:50">target_stfs</name><operator pos:start="1325:51" pos:end="1325:52">-&gt;</operator><name pos:start="1325:53" pos:end="1325:60">f_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1326:13" pos:end="1326:60"><expr pos:start="1326:13" pos:end="1326:59"><call pos:start="1326:13" pos:end="1326:59"><name pos:start="1326:13" pos:end="1326:22">__put_user</name><argument_list pos:start="1326:23" pos:end="1326:59">(<argument pos:start="1326:24" pos:end="1326:35"><expr pos:start="1326:24" pos:end="1326:35"><name pos:start="1326:24" pos:end="1326:35"><name pos:start="1326:24" pos:end="1326:27">stfs</name><operator pos:start="1326:28" pos:end="1326:28">.</operator><name pos:start="1326:29" pos:end="1326:35">f_bfree</name></name></expr></argument>, <argument pos:start="1326:38" pos:end="1326:58"><expr pos:start="1326:38" pos:end="1326:58"><operator pos:start="1326:38" pos:end="1326:38">&amp;</operator><name pos:start="1326:39" pos:end="1326:58"><name pos:start="1326:39" pos:end="1326:49">target_stfs</name><operator pos:start="1326:50" pos:end="1326:51">-&gt;</operator><name pos:start="1326:52" pos:end="1326:58">f_bfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1327:13" pos:end="1327:62"><expr pos:start="1327:13" pos:end="1327:61"><call pos:start="1327:13" pos:end="1327:61"><name pos:start="1327:13" pos:end="1327:22">__put_user</name><argument_list pos:start="1327:23" pos:end="1327:61">(<argument pos:start="1327:24" pos:end="1327:36"><expr pos:start="1327:24" pos:end="1327:36"><name pos:start="1327:24" pos:end="1327:36"><name pos:start="1327:24" pos:end="1327:27">stfs</name><operator pos:start="1327:28" pos:end="1327:28">.</operator><name pos:start="1327:29" pos:end="1327:36">f_bavail</name></name></expr></argument>, <argument pos:start="1327:39" pos:end="1327:60"><expr pos:start="1327:39" pos:end="1327:60"><operator pos:start="1327:39" pos:end="1327:39">&amp;</operator><name pos:start="1327:40" pos:end="1327:60"><name pos:start="1327:40" pos:end="1327:50">target_stfs</name><operator pos:start="1327:51" pos:end="1327:52">-&gt;</operator><name pos:start="1327:53" pos:end="1327:60">f_bavail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1328:13" pos:end="1328:60"><expr pos:start="1328:13" pos:end="1328:59"><call pos:start="1328:13" pos:end="1328:59"><name pos:start="1328:13" pos:end="1328:22">__put_user</name><argument_list pos:start="1328:23" pos:end="1328:59">(<argument pos:start="1328:24" pos:end="1328:35"><expr pos:start="1328:24" pos:end="1328:35"><name pos:start="1328:24" pos:end="1328:35"><name pos:start="1328:24" pos:end="1328:27">stfs</name><operator pos:start="1328:28" pos:end="1328:28">.</operator><name pos:start="1328:29" pos:end="1328:35">f_files</name></name></expr></argument>, <argument pos:start="1328:38" pos:end="1328:58"><expr pos:start="1328:38" pos:end="1328:58"><operator pos:start="1328:38" pos:end="1328:38">&amp;</operator><name pos:start="1328:39" pos:end="1328:58"><name pos:start="1328:39" pos:end="1328:49">target_stfs</name><operator pos:start="1328:50" pos:end="1328:51">-&gt;</operator><name pos:start="1328:52" pos:end="1328:58">f_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1329:13" pos:end="1329:60"><expr pos:start="1329:13" pos:end="1329:59"><call pos:start="1329:13" pos:end="1329:59"><name pos:start="1329:13" pos:end="1329:22">__put_user</name><argument_list pos:start="1329:23" pos:end="1329:59">(<argument pos:start="1329:24" pos:end="1329:35"><expr pos:start="1329:24" pos:end="1329:35"><name pos:start="1329:24" pos:end="1329:35"><name pos:start="1329:24" pos:end="1329:27">stfs</name><operator pos:start="1329:28" pos:end="1329:28">.</operator><name pos:start="1329:29" pos:end="1329:35">f_ffree</name></name></expr></argument>, <argument pos:start="1329:38" pos:end="1329:58"><expr pos:start="1329:38" pos:end="1329:58"><operator pos:start="1329:38" pos:end="1329:38">&amp;</operator><name pos:start="1329:39" pos:end="1329:58"><name pos:start="1329:39" pos:end="1329:49">target_stfs</name><operator pos:start="1329:50" pos:end="1329:51">-&gt;</operator><name pos:start="1329:52" pos:end="1329:58">f_ffree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1330:13" pos:end="1330:74"><expr pos:start="1330:13" pos:end="1330:73"><call pos:start="1330:13" pos:end="1330:73"><name pos:start="1330:13" pos:end="1330:22">__put_user</name><argument_list pos:start="1330:23" pos:end="1330:73">(<argument pos:start="1330:24" pos:end="1330:43"><expr pos:start="1330:24" pos:end="1330:43"><name pos:start="1330:24" pos:end="1330:43"><name pos:start="1330:24" pos:end="1330:27">stfs</name><operator pos:start="1330:28" pos:end="1330:28">.</operator><name pos:start="1330:29" pos:end="1330:34">f_fsid</name><operator pos:start="1330:35" pos:end="1330:35">.</operator><name pos:start="1330:36" pos:end="1330:40">__val</name><index pos:start="1330:41" pos:end="1330:43">[<expr pos:start="1330:42" pos:end="1330:42"><literal type="number" pos:start="1330:42" pos:end="1330:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1330:46" pos:end="1330:72"><expr pos:start="1330:46" pos:end="1330:72"><operator pos:start="1330:46" pos:end="1330:46">&amp;</operator><name pos:start="1330:47" pos:end="1330:72"><name pos:start="1330:47" pos:end="1330:57">target_stfs</name><operator pos:start="1330:58" pos:end="1330:59">-&gt;</operator><name pos:start="1330:60" pos:end="1330:65">f_fsid</name><operator pos:start="1330:66" pos:end="1330:66">.</operator><name pos:start="1330:67" pos:end="1330:69">val</name><index pos:start="1330:70" pos:end="1330:72">[<expr pos:start="1330:71" pos:end="1330:71"><literal type="number" pos:start="1330:71" pos:end="1330:71">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1331:13" pos:end="1331:74"><expr pos:start="1331:13" pos:end="1331:73"><call pos:start="1331:13" pos:end="1331:73"><name pos:start="1331:13" pos:end="1331:22">__put_user</name><argument_list pos:start="1331:23" pos:end="1331:73">(<argument pos:start="1331:24" pos:end="1331:43"><expr pos:start="1331:24" pos:end="1331:43"><name pos:start="1331:24" pos:end="1331:43"><name pos:start="1331:24" pos:end="1331:27">stfs</name><operator pos:start="1331:28" pos:end="1331:28">.</operator><name pos:start="1331:29" pos:end="1331:34">f_fsid</name><operator pos:start="1331:35" pos:end="1331:35">.</operator><name pos:start="1331:36" pos:end="1331:40">__val</name><index pos:start="1331:41" pos:end="1331:43">[<expr pos:start="1331:42" pos:end="1331:42"><literal type="number" pos:start="1331:42" pos:end="1331:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1331:46" pos:end="1331:72"><expr pos:start="1331:46" pos:end="1331:72"><operator pos:start="1331:46" pos:end="1331:46">&amp;</operator><name pos:start="1331:47" pos:end="1331:72"><name pos:start="1331:47" pos:end="1331:57">target_stfs</name><operator pos:start="1331:58" pos:end="1331:59">-&gt;</operator><name pos:start="1331:60" pos:end="1331:65">f_fsid</name><operator pos:start="1331:66" pos:end="1331:66">.</operator><name pos:start="1331:67" pos:end="1331:69">val</name><index pos:start="1331:70" pos:end="1331:72">[<expr pos:start="1331:71" pos:end="1331:71"><literal type="number" pos:start="1331:71" pos:end="1331:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1332:13" pos:end="1332:64"><expr pos:start="1332:13" pos:end="1332:63"><call pos:start="1332:13" pos:end="1332:63"><name pos:start="1332:13" pos:end="1332:22">__put_user</name><argument_list pos:start="1332:23" pos:end="1332:63">(<argument pos:start="1332:24" pos:end="1332:37"><expr pos:start="1332:24" pos:end="1332:37"><name pos:start="1332:24" pos:end="1332:37"><name pos:start="1332:24" pos:end="1332:27">stfs</name><operator pos:start="1332:28" pos:end="1332:28">.</operator><name pos:start="1332:29" pos:end="1332:37">f_namelen</name></name></expr></argument>, <argument pos:start="1332:40" pos:end="1332:62"><expr pos:start="1332:40" pos:end="1332:62"><operator pos:start="1332:40" pos:end="1332:40">&amp;</operator><name pos:start="1332:41" pos:end="1332:62"><name pos:start="1332:41" pos:end="1332:51">target_stfs</name><operator pos:start="1332:52" pos:end="1332:53">-&gt;</operator><name pos:start="1332:54" pos:end="1332:62">f_namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1333:13" pos:end="1333:62"><expr pos:start="1333:13" pos:end="1333:61"><call pos:start="1333:13" pos:end="1333:61"><name pos:start="1333:13" pos:end="1333:22">__put_user</name><argument_list pos:start="1333:23" pos:end="1333:61">(<argument pos:start="1333:24" pos:end="1333:36"><expr pos:start="1333:24" pos:end="1333:36"><name pos:start="1333:24" pos:end="1333:36"><name pos:start="1333:24" pos:end="1333:27">stfs</name><operator pos:start="1333:28" pos:end="1333:28">.</operator><name pos:start="1333:29" pos:end="1333:36">f_frsize</name></name></expr></argument>, <argument pos:start="1333:39" pos:end="1333:60"><expr pos:start="1333:39" pos:end="1333:60"><operator pos:start="1333:39" pos:end="1333:39">&amp;</operator><name pos:start="1333:40" pos:end="1333:60"><name pos:start="1333:40" pos:end="1333:50">target_stfs</name><operator pos:start="1333:51" pos:end="1333:52">-&gt;</operator><name pos:start="1333:53" pos:end="1333:60">f_frsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1334:13" pos:end="1334:74"><expr pos:start="1334:13" pos:end="1334:73"><call pos:start="1334:13" pos:end="1334:73"><name pos:start="1334:13" pos:end="1334:18">memset</name><argument_list pos:start="1334:19" pos:end="1334:73">(<argument pos:start="1334:20" pos:end="1334:39"><expr pos:start="1334:20" pos:end="1334:39"><name pos:start="1334:20" pos:end="1334:39"><name pos:start="1334:20" pos:end="1334:30">target_stfs</name><operator pos:start="1334:31" pos:end="1334:32">-&gt;</operator><name pos:start="1334:33" pos:end="1334:39">f_spare</name></name></expr></argument>, <argument pos:start="1334:42" pos:end="1334:42"><expr pos:start="1334:42" pos:end="1334:42"><literal type="number" pos:start="1334:42" pos:end="1334:42">0</literal></expr></argument>, <argument pos:start="1334:45" pos:end="1334:72"><expr pos:start="1334:45" pos:end="1334:72"><sizeof pos:start="1334:45" pos:end="1334:72">sizeof<argument_list pos:start="1334:51" pos:end="1334:72">(<argument pos:start="1334:52" pos:end="1334:71"><expr pos:start="1334:52" pos:end="1334:71"><name pos:start="1334:52" pos:end="1334:71"><name pos:start="1334:52" pos:end="1334:62">target_stfs</name><operator pos:start="1334:63" pos:end="1334:64">-&gt;</operator><name pos:start="1334:65" pos:end="1334:71">f_spare</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1335:13" pos:end="1335:53"><expr pos:start="1335:13" pos:end="1335:52"><call pos:start="1335:13" pos:end="1335:52"><name pos:start="1335:13" pos:end="1335:30">unlock_user_struct</name><argument_list pos:start="1335:31" pos:end="1335:52">(<argument pos:start="1335:32" pos:end="1335:42"><expr pos:start="1335:32" pos:end="1335:42"><name pos:start="1335:32" pos:end="1335:42">target_stfs</name></expr></argument>, <argument pos:start="1335:45" pos:end="1335:48"><expr pos:start="1335:45" pos:end="1335:48"><name pos:start="1335:45" pos:end="1335:48">arg2</name></expr></argument>, <argument pos:start="1335:51" pos:end="1335:51"><expr pos:start="1335:51" pos:end="1335:51"><literal type="number" pos:start="1335:51" pos:end="1335:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1336:5" pos:end="1336:27">case <expr pos:start="1336:10" pos:end="1336:26"><name pos:start="1336:10" pos:end="1336:26">TARGET_NR_fstatfs</name></expr>:</case>
        <expr_stmt pos:start="1337:9" pos:end="1337:46"><expr pos:start="1337:9" pos:end="1337:45"><name pos:start="1337:9" pos:end="1337:11">ret</name> <operator pos:start="1337:13" pos:end="1337:13">=</operator> <call pos:start="1337:15" pos:end="1337:45"><name pos:start="1337:15" pos:end="1337:23">get_errno</name><argument_list pos:start="1337:24" pos:end="1337:45">(<argument pos:start="1337:25" pos:end="1337:44"><expr pos:start="1337:25" pos:end="1337:44"><call pos:start="1337:25" pos:end="1337:44"><name pos:start="1337:25" pos:end="1337:31">fstatfs</name><argument_list pos:start="1337:32" pos:end="1337:44">(<argument pos:start="1337:33" pos:end="1337:36"><expr pos:start="1337:33" pos:end="1337:36"><name pos:start="1337:33" pos:end="1337:36">arg1</name></expr></argument>, <argument pos:start="1337:39" pos:end="1337:43"><expr pos:start="1337:39" pos:end="1337:43"><operator pos:start="1337:39" pos:end="1337:39">&amp;</operator><name pos:start="1337:40" pos:end="1337:43">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1338:9" pos:end="1340:0">goto <name pos:start="1338:14" pos:end="1338:27">convert_statfs</name>;</goto>
<cpp:ifdef pos:start="1339:1" pos:end="1339:25">#<cpp:directive pos:start="1339:2" pos:end="1339:6">ifdef</cpp:directive> <name pos:start="1339:8" pos:end="1339:25">TARGET_NR_statfs64</name></cpp:ifdef>
    <case pos:start="1340:5" pos:end="1340:28">case <expr pos:start="1340:10" pos:end="1340:27"><name pos:start="1340:10" pos:end="1340:27">TARGET_NR_statfs64</name></expr>:</case>
        <if_stmt pos:start="1341:9" pos:end="1342:24"><if pos:start="1341:9" pos:end="1342:24">if <condition pos:start="1341:12" pos:end="1341:42">(<expr pos:start="1341:13" pos:end="1341:41"><operator pos:start="1341:13" pos:end="1341:13">!</operator><operator pos:start="1341:14" pos:end="1341:14">(</operator><name pos:start="1341:15" pos:end="1341:15">p</name> <operator pos:start="1341:17" pos:end="1341:17">=</operator> <call pos:start="1341:19" pos:end="1341:40"><name pos:start="1341:19" pos:end="1341:34">lock_user_string</name><argument_list pos:start="1341:35" pos:end="1341:40">(<argument pos:start="1341:36" pos:end="1341:39"><expr pos:start="1341:36" pos:end="1341:39"><name pos:start="1341:36" pos:end="1341:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1341:41" pos:end="1341:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1342:13" pos:end="1342:24"><block_content pos:start="1342:13" pos:end="1342:24">
            <goto pos:start="1342:13" pos:end="1342:24">goto <name pos:start="1342:18" pos:end="1342:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1343:9" pos:end="1343:48"><expr pos:start="1343:9" pos:end="1343:47"><name pos:start="1343:9" pos:end="1343:11">ret</name> <operator pos:start="1343:13" pos:end="1343:13">=</operator> <call pos:start="1343:15" pos:end="1343:47"><name pos:start="1343:15" pos:end="1343:23">get_errno</name><argument_list pos:start="1343:24" pos:end="1343:47">(<argument pos:start="1343:25" pos:end="1343:46"><expr pos:start="1343:25" pos:end="1343:46"><call pos:start="1343:25" pos:end="1343:46"><name pos:start="1343:25" pos:end="1343:30">statfs</name><argument_list pos:start="1343:31" pos:end="1343:46">(<argument pos:start="1343:32" pos:end="1343:38"><expr pos:start="1343:32" pos:end="1343:38"><call pos:start="1343:32" pos:end="1343:38"><name pos:start="1343:32" pos:end="1343:35">path</name><argument_list pos:start="1343:36" pos:end="1343:38">(<argument pos:start="1343:37" pos:end="1343:37"><expr pos:start="1343:37" pos:end="1343:37"><name pos:start="1343:37" pos:end="1343:37">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1343:41" pos:end="1343:45"><expr pos:start="1343:41" pos:end="1343:45"><operator pos:start="1343:41" pos:end="1343:41">&amp;</operator><name pos:start="1343:42" pos:end="1343:45">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1344:9" pos:end="1344:32"><expr pos:start="1344:9" pos:end="1344:31"><call pos:start="1344:9" pos:end="1344:31"><name pos:start="1344:9" pos:end="1344:19">unlock_user</name><argument_list pos:start="1344:20" pos:end="1344:31">(<argument pos:start="1344:21" pos:end="1344:21"><expr pos:start="1344:21" pos:end="1344:21"><name pos:start="1344:21" pos:end="1344:21">p</name></expr></argument>, <argument pos:start="1344:24" pos:end="1344:27"><expr pos:start="1344:24" pos:end="1344:27"><name pos:start="1344:24" pos:end="1344:27">arg1</name></expr></argument>, <argument pos:start="1344:30" pos:end="1344:30"><expr pos:start="1344:30" pos:end="1344:30"><literal type="number" pos:start="1344:30" pos:end="1344:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <label pos:start="1345:5" pos:end="1345:21"><name pos:start="1345:5" pos:end="1345:20">convert_statfs64</name>:</label>
        <if_stmt pos:start="1346:9" pos:end="3541:14"><if pos:start="1346:9" pos:end="3541:14">if <condition pos:start="1346:12" pos:end="1346:27">(<expr pos:start="1346:13" pos:end="1346:26"><operator pos:start="1346:13" pos:end="1346:13">!</operator><call pos:start="1346:14" pos:end="1346:26"><name pos:start="1346:14" pos:end="1346:21">is_error</name><argument_list pos:start="1346:22" pos:end="1346:26">(<argument pos:start="1346:23" pos:end="1346:25"><expr pos:start="1346:23" pos:end="1346:25"><name pos:start="1346:23" pos:end="1346:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1346:29" pos:end="3541:14">{<block_content pos:start="1347:13" pos:end="3541:14">
            <decl_stmt pos:start="1347:13" pos:end="1347:48"><decl pos:start="1347:13" pos:end="1347:47"><type pos:start="1347:13" pos:end="1347:36"><name pos:start="1347:13" pos:end="1347:34"><name pos:start="1347:13" pos:end="1347:18">struct</name> <name pos:start="1347:20" pos:end="1347:34">target_statfs64</name></name> <modifier pos:start="1347:36" pos:end="1347:36">*</modifier></type><name pos:start="1347:37" pos:end="1347:47">target_stfs</name></decl>;</decl_stmt>
            <if_stmt pos:start="1348:13" pos:end="1349:28"><if pos:start="1348:13" pos:end="1349:28">if <condition pos:start="1348:16" pos:end="1348:70">(<expr pos:start="1348:17" pos:end="1348:69"><operator pos:start="1348:17" pos:end="1348:17">!</operator><call pos:start="1348:18" pos:end="1348:69"><name pos:start="1348:18" pos:end="1348:33">lock_user_struct</name><argument_list pos:start="1348:34" pos:end="1348:69">(<argument pos:start="1348:35" pos:end="1348:46"><expr pos:start="1348:35" pos:end="1348:46"><name pos:start="1348:35" pos:end="1348:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1348:49" pos:end="1348:59"><expr pos:start="1348:49" pos:end="1348:59"><name pos:start="1348:49" pos:end="1348:59">target_stfs</name></expr></argument>, <argument pos:start="1348:62" pos:end="1348:65"><expr pos:start="1348:62" pos:end="1348:65"><name pos:start="1348:62" pos:end="1348:65">arg3</name></expr></argument>, <argument pos:start="1348:68" pos:end="1348:68"><expr pos:start="1348:68" pos:end="1348:68"><literal type="number" pos:start="1348:68" pos:end="1348:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1349:17" pos:end="1349:28"><block_content pos:start="1349:17" pos:end="1349:28">
                <goto pos:start="1349:17" pos:end="1349:28">goto <name pos:start="1349:22" pos:end="1349:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1350:13" pos:end="1350:58"><expr pos:start="1350:13" pos:end="1350:57"><call pos:start="1350:13" pos:end="1350:57"><name pos:start="1350:13" pos:end="1350:22">__put_user</name><argument_list pos:start="1350:23" pos:end="1350:57">(<argument pos:start="1350:24" pos:end="1350:34"><expr pos:start="1350:24" pos:end="1350:34"><name pos:start="1350:24" pos:end="1350:34"><name pos:start="1350:24" pos:end="1350:27">stfs</name><operator pos:start="1350:28" pos:end="1350:28">.</operator><name pos:start="1350:29" pos:end="1350:34">f_type</name></name></expr></argument>, <argument pos:start="1350:37" pos:end="1350:56"><expr pos:start="1350:37" pos:end="1350:56"><operator pos:start="1350:37" pos:end="1350:37">&amp;</operator><name pos:start="1350:38" pos:end="1350:56"><name pos:start="1350:38" pos:end="1350:48">target_stfs</name><operator pos:start="1350:49" pos:end="1350:50">-&gt;</operator><name pos:start="1350:51" pos:end="1350:56">f_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1351:13" pos:end="1351:60"><expr pos:start="1351:13" pos:end="1351:59"><call pos:start="1351:13" pos:end="1351:59"><name pos:start="1351:13" pos:end="1351:22">__put_user</name><argument_list pos:start="1351:23" pos:end="1351:59">(<argument pos:start="1351:24" pos:end="1351:35"><expr pos:start="1351:24" pos:end="1351:35"><name pos:start="1351:24" pos:end="1351:35"><name pos:start="1351:24" pos:end="1351:27">stfs</name><operator pos:start="1351:28" pos:end="1351:28">.</operator><name pos:start="1351:29" pos:end="1351:35">f_bsize</name></name></expr></argument>, <argument pos:start="1351:38" pos:end="1351:58"><expr pos:start="1351:38" pos:end="1351:58"><operator pos:start="1351:38" pos:end="1351:38">&amp;</operator><name pos:start="1351:39" pos:end="1351:58"><name pos:start="1351:39" pos:end="1351:49">target_stfs</name><operator pos:start="1351:50" pos:end="1351:51">-&gt;</operator><name pos:start="1351:52" pos:end="1351:58">f_bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1352:13" pos:end="1352:62"><expr pos:start="1352:13" pos:end="1352:61"><call pos:start="1352:13" pos:end="1352:61"><name pos:start="1352:13" pos:end="1352:22">__put_user</name><argument_list pos:start="1352:23" pos:end="1352:61">(<argument pos:start="1352:24" pos:end="1352:36"><expr pos:start="1352:24" pos:end="1352:36"><name pos:start="1352:24" pos:end="1352:36"><name pos:start="1352:24" pos:end="1352:27">stfs</name><operator pos:start="1352:28" pos:end="1352:28">.</operator><name pos:start="1352:29" pos:end="1352:36">f_blocks</name></name></expr></argument>, <argument pos:start="1352:39" pos:end="1352:60"><expr pos:start="1352:39" pos:end="1352:60"><operator pos:start="1352:39" pos:end="1352:39">&amp;</operator><name pos:start="1352:40" pos:end="1352:60"><name pos:start="1352:40" pos:end="1352:50">target_stfs</name><operator pos:start="1352:51" pos:end="1352:52">-&gt;</operator><name pos:start="1352:53" pos:end="1352:60">f_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1353:13" pos:end="1353:60"><expr pos:start="1353:13" pos:end="1353:59"><call pos:start="1353:13" pos:end="1353:59"><name pos:start="1353:13" pos:end="1353:22">__put_user</name><argument_list pos:start="1353:23" pos:end="1353:59">(<argument pos:start="1353:24" pos:end="1353:35"><expr pos:start="1353:24" pos:end="1353:35"><name pos:start="1353:24" pos:end="1353:35"><name pos:start="1353:24" pos:end="1353:27">stfs</name><operator pos:start="1353:28" pos:end="1353:28">.</operator><name pos:start="1353:29" pos:end="1353:35">f_bfree</name></name></expr></argument>, <argument pos:start="1353:38" pos:end="1353:58"><expr pos:start="1353:38" pos:end="1353:58"><operator pos:start="1353:38" pos:end="1353:38">&amp;</operator><name pos:start="1353:39" pos:end="1353:58"><name pos:start="1353:39" pos:end="1353:49">target_stfs</name><operator pos:start="1353:50" pos:end="1353:51">-&gt;</operator><name pos:start="1353:52" pos:end="1353:58">f_bfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1354:13" pos:end="1354:62"><expr pos:start="1354:13" pos:end="1354:61"><call pos:start="1354:13" pos:end="1354:61"><name pos:start="1354:13" pos:end="1354:22">__put_user</name><argument_list pos:start="1354:23" pos:end="1354:61">(<argument pos:start="1354:24" pos:end="1354:36"><expr pos:start="1354:24" pos:end="1354:36"><name pos:start="1354:24" pos:end="1354:36"><name pos:start="1354:24" pos:end="1354:27">stfs</name><operator pos:start="1354:28" pos:end="1354:28">.</operator><name pos:start="1354:29" pos:end="1354:36">f_bavail</name></name></expr></argument>, <argument pos:start="1354:39" pos:end="1354:60"><expr pos:start="1354:39" pos:end="1354:60"><operator pos:start="1354:39" pos:end="1354:39">&amp;</operator><name pos:start="1354:40" pos:end="1354:60"><name pos:start="1354:40" pos:end="1354:50">target_stfs</name><operator pos:start="1354:51" pos:end="1354:52">-&gt;</operator><name pos:start="1354:53" pos:end="1354:60">f_bavail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1355:13" pos:end="1355:60"><expr pos:start="1355:13" pos:end="1355:59"><call pos:start="1355:13" pos:end="1355:59"><name pos:start="1355:13" pos:end="1355:22">__put_user</name><argument_list pos:start="1355:23" pos:end="1355:59">(<argument pos:start="1355:24" pos:end="1355:35"><expr pos:start="1355:24" pos:end="1355:35"><name pos:start="1355:24" pos:end="1355:35"><name pos:start="1355:24" pos:end="1355:27">stfs</name><operator pos:start="1355:28" pos:end="1355:28">.</operator><name pos:start="1355:29" pos:end="1355:35">f_files</name></name></expr></argument>, <argument pos:start="1355:38" pos:end="1355:58"><expr pos:start="1355:38" pos:end="1355:58"><operator pos:start="1355:38" pos:end="1355:38">&amp;</operator><name pos:start="1355:39" pos:end="1355:58"><name pos:start="1355:39" pos:end="1355:49">target_stfs</name><operator pos:start="1355:50" pos:end="1355:51">-&gt;</operator><name pos:start="1355:52" pos:end="1355:58">f_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1356:13" pos:end="1356:60"><expr pos:start="1356:13" pos:end="1356:59"><call pos:start="1356:13" pos:end="1356:59"><name pos:start="1356:13" pos:end="1356:22">__put_user</name><argument_list pos:start="1356:23" pos:end="1356:59">(<argument pos:start="1356:24" pos:end="1356:35"><expr pos:start="1356:24" pos:end="1356:35"><name pos:start="1356:24" pos:end="1356:35"><name pos:start="1356:24" pos:end="1356:27">stfs</name><operator pos:start="1356:28" pos:end="1356:28">.</operator><name pos:start="1356:29" pos:end="1356:35">f_ffree</name></name></expr></argument>, <argument pos:start="1356:38" pos:end="1356:58"><expr pos:start="1356:38" pos:end="1356:58"><operator pos:start="1356:38" pos:end="1356:38">&amp;</operator><name pos:start="1356:39" pos:end="1356:58"><name pos:start="1356:39" pos:end="1356:49">target_stfs</name><operator pos:start="1356:50" pos:end="1356:51">-&gt;</operator><name pos:start="1356:52" pos:end="1356:58">f_ffree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1357:13" pos:end="1357:74"><expr pos:start="1357:13" pos:end="1357:73"><call pos:start="1357:13" pos:end="1357:73"><name pos:start="1357:13" pos:end="1357:22">__put_user</name><argument_list pos:start="1357:23" pos:end="1357:73">(<argument pos:start="1357:24" pos:end="1357:43"><expr pos:start="1357:24" pos:end="1357:43"><name pos:start="1357:24" pos:end="1357:43"><name pos:start="1357:24" pos:end="1357:27">stfs</name><operator pos:start="1357:28" pos:end="1357:28">.</operator><name pos:start="1357:29" pos:end="1357:34">f_fsid</name><operator pos:start="1357:35" pos:end="1357:35">.</operator><name pos:start="1357:36" pos:end="1357:40">__val</name><index pos:start="1357:41" pos:end="1357:43">[<expr pos:start="1357:42" pos:end="1357:42"><literal type="number" pos:start="1357:42" pos:end="1357:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1357:46" pos:end="1357:72"><expr pos:start="1357:46" pos:end="1357:72"><operator pos:start="1357:46" pos:end="1357:46">&amp;</operator><name pos:start="1357:47" pos:end="1357:72"><name pos:start="1357:47" pos:end="1357:57">target_stfs</name><operator pos:start="1357:58" pos:end="1357:59">-&gt;</operator><name pos:start="1357:60" pos:end="1357:65">f_fsid</name><operator pos:start="1357:66" pos:end="1357:66">.</operator><name pos:start="1357:67" pos:end="1357:69">val</name><index pos:start="1357:70" pos:end="1357:72">[<expr pos:start="1357:71" pos:end="1357:71"><literal type="number" pos:start="1357:71" pos:end="1357:71">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1358:13" pos:end="1358:74"><expr pos:start="1358:13" pos:end="1358:73"><call pos:start="1358:13" pos:end="1358:73"><name pos:start="1358:13" pos:end="1358:22">__put_user</name><argument_list pos:start="1358:23" pos:end="1358:73">(<argument pos:start="1358:24" pos:end="1358:43"><expr pos:start="1358:24" pos:end="1358:43"><name pos:start="1358:24" pos:end="1358:43"><name pos:start="1358:24" pos:end="1358:27">stfs</name><operator pos:start="1358:28" pos:end="1358:28">.</operator><name pos:start="1358:29" pos:end="1358:34">f_fsid</name><operator pos:start="1358:35" pos:end="1358:35">.</operator><name pos:start="1358:36" pos:end="1358:40">__val</name><index pos:start="1358:41" pos:end="1358:43">[<expr pos:start="1358:42" pos:end="1358:42"><literal type="number" pos:start="1358:42" pos:end="1358:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1358:46" pos:end="1358:72"><expr pos:start="1358:46" pos:end="1358:72"><operator pos:start="1358:46" pos:end="1358:46">&amp;</operator><name pos:start="1358:47" pos:end="1358:72"><name pos:start="1358:47" pos:end="1358:57">target_stfs</name><operator pos:start="1358:58" pos:end="1358:59">-&gt;</operator><name pos:start="1358:60" pos:end="1358:65">f_fsid</name><operator pos:start="1358:66" pos:end="1358:66">.</operator><name pos:start="1358:67" pos:end="1358:69">val</name><index pos:start="1358:70" pos:end="1358:72">[<expr pos:start="1358:71" pos:end="1358:71"><literal type="number" pos:start="1358:71" pos:end="1358:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1359:13" pos:end="1359:64"><expr pos:start="1359:13" pos:end="1359:63"><call pos:start="1359:13" pos:end="1359:63"><name pos:start="1359:13" pos:end="1359:22">__put_user</name><argument_list pos:start="1359:23" pos:end="1359:63">(<argument pos:start="1359:24" pos:end="1359:37"><expr pos:start="1359:24" pos:end="1359:37"><name pos:start="1359:24" pos:end="1359:37"><name pos:start="1359:24" pos:end="1359:27">stfs</name><operator pos:start="1359:28" pos:end="1359:28">.</operator><name pos:start="1359:29" pos:end="1359:37">f_namelen</name></name></expr></argument>, <argument pos:start="1359:40" pos:end="1359:62"><expr pos:start="1359:40" pos:end="1359:62"><operator pos:start="1359:40" pos:end="1359:40">&amp;</operator><name pos:start="1359:41" pos:end="1359:62"><name pos:start="1359:41" pos:end="1359:51">target_stfs</name><operator pos:start="1359:52" pos:end="1359:53">-&gt;</operator><name pos:start="1359:54" pos:end="1359:62">f_namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1360:13" pos:end="1360:62"><expr pos:start="1360:13" pos:end="1360:61"><call pos:start="1360:13" pos:end="1360:61"><name pos:start="1360:13" pos:end="1360:22">__put_user</name><argument_list pos:start="1360:23" pos:end="1360:61">(<argument pos:start="1360:24" pos:end="1360:36"><expr pos:start="1360:24" pos:end="1360:36"><name pos:start="1360:24" pos:end="1360:36"><name pos:start="1360:24" pos:end="1360:27">stfs</name><operator pos:start="1360:28" pos:end="1360:28">.</operator><name pos:start="1360:29" pos:end="1360:36">f_frsize</name></name></expr></argument>, <argument pos:start="1360:39" pos:end="1360:60"><expr pos:start="1360:39" pos:end="1360:60"><operator pos:start="1360:39" pos:end="1360:39">&amp;</operator><name pos:start="1360:40" pos:end="1360:60"><name pos:start="1360:40" pos:end="1360:50">target_stfs</name><operator pos:start="1360:51" pos:end="1360:52">-&gt;</operator><name pos:start="1360:53" pos:end="1360:60">f_frsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1361:13" pos:end="1361:74"><expr pos:start="1361:13" pos:end="1361:73"><call pos:start="1361:13" pos:end="1361:73"><name pos:start="1361:13" pos:end="1361:18">memset</name><argument_list pos:start="1361:19" pos:end="1361:73">(<argument pos:start="1361:20" pos:end="1361:39"><expr pos:start="1361:20" pos:end="1361:39"><name pos:start="1361:20" pos:end="1361:39"><name pos:start="1361:20" pos:end="1361:30">target_stfs</name><operator pos:start="1361:31" pos:end="1361:32">-&gt;</operator><name pos:start="1361:33" pos:end="1361:39">f_spare</name></name></expr></argument>, <argument pos:start="1361:42" pos:end="1361:42"><expr pos:start="1361:42" pos:end="1361:42"><literal type="number" pos:start="1361:42" pos:end="1361:42">0</literal></expr></argument>, <argument pos:start="1361:45" pos:end="1361:72"><expr pos:start="1361:45" pos:end="1361:72"><sizeof pos:start="1361:45" pos:end="1361:72">sizeof<argument_list pos:start="1361:51" pos:end="1361:72">(<argument pos:start="1361:52" pos:end="1361:71"><expr pos:start="1361:52" pos:end="1361:71"><name pos:start="1361:52" pos:end="1361:71"><name pos:start="1361:52" pos:end="1361:62">target_stfs</name><operator pos:start="1361:63" pos:end="1361:64">-&gt;</operator><name pos:start="1361:65" pos:end="1361:71">f_spare</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1362:13" pos:end="1362:53"><expr pos:start="1362:13" pos:end="1362:52"><call pos:start="1362:13" pos:end="1362:52"><name pos:start="1362:13" pos:end="1362:30">unlock_user_struct</name><argument_list pos:start="1362:31" pos:end="1362:52">(<argument pos:start="1362:32" pos:end="1362:42"><expr pos:start="1362:32" pos:end="1362:42"><name pos:start="1362:32" pos:end="1362:42">target_stfs</name></expr></argument>, <argument pos:start="1362:45" pos:end="1362:48"><expr pos:start="1362:45" pos:end="1362:48"><name pos:start="1362:45" pos:end="1362:48">arg3</name></expr></argument>, <argument pos:start="1362:51" pos:end="1362:51"><expr pos:start="1362:51" pos:end="1362:51"><literal type="number" pos:start="1362:51" pos:end="1362:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1363:5" pos:end="1363:29">case <expr pos:start="1363:10" pos:end="1363:28"><name pos:start="1363:10" pos:end="1363:28">TARGET_NR_fstatfs64</name></expr>:</case>
        <expr_stmt pos:start="1364:9" pos:end="1364:46"><expr pos:start="1364:9" pos:end="1364:45"><name pos:start="1364:9" pos:end="1364:11">ret</name> <operator pos:start="1364:13" pos:end="1364:13">=</operator> <call pos:start="1364:15" pos:end="1364:45"><name pos:start="1364:15" pos:end="1364:23">get_errno</name><argument_list pos:start="1364:24" pos:end="1364:45">(<argument pos:start="1364:25" pos:end="1364:44"><expr pos:start="1364:25" pos:end="1364:44"><call pos:start="1364:25" pos:end="1364:44"><name pos:start="1364:25" pos:end="1364:31">fstatfs</name><argument_list pos:start="1364:32" pos:end="1364:44">(<argument pos:start="1364:33" pos:end="1364:36"><expr pos:start="1364:33" pos:end="1364:36"><name pos:start="1364:33" pos:end="1364:36">arg1</name></expr></argument>, <argument pos:start="1364:39" pos:end="1364:43"><expr pos:start="1364:39" pos:end="1364:43"><operator pos:start="1364:39" pos:end="1364:39">&amp;</operator><name pos:start="1364:40" pos:end="1364:43">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1365:9" pos:end="1368:0">goto <name pos:start="1365:14" pos:end="1365:29">convert_statfs64</name>;</goto>
<cpp:endif pos:start="1366:1" pos:end="1366:6">#<cpp:directive pos:start="1366:2" pos:end="1366:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1367:1" pos:end="1367:23">#<cpp:directive pos:start="1367:2" pos:end="1367:6">ifdef</cpp:directive> <name pos:start="1367:8" pos:end="1367:23">TARGET_NR_ioperm</name></cpp:ifdef>
    <case pos:start="1368:5" pos:end="1368:26">case <expr pos:start="1368:10" pos:end="1368:25"><name pos:start="1368:10" pos:end="1368:25">TARGET_NR_ioperm</name></expr>:</case>
        <goto pos:start="1369:9" pos:end="1372:0">goto <name pos:start="1369:14" pos:end="1369:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1370:1" pos:end="1370:6">#<cpp:directive pos:start="1370:2" pos:end="1370:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1371:1" pos:end="1371:27">#<cpp:directive pos:start="1371:2" pos:end="1371:6">ifdef</cpp:directive> <name pos:start="1371:8" pos:end="1371:27">TARGET_NR_socketcall</name></cpp:ifdef>
    <case pos:start="1372:5" pos:end="1372:30">case <expr pos:start="1372:10" pos:end="1372:29"><name pos:start="1372:10" pos:end="1372:29">TARGET_NR_socketcall</name></expr>:</case>
        <expr_stmt pos:start="1373:9" pos:end="1376:0"><expr pos:start="1373:9" pos:end="1373:39"><name pos:start="1373:9" pos:end="1373:11">ret</name> <operator pos:start="1373:13" pos:end="1373:13">=</operator> <call pos:start="1373:15" pos:end="1373:39"><name pos:start="1373:15" pos:end="1373:27">do_socketcall</name><argument_list pos:start="1373:28" pos:end="1373:39">(<argument pos:start="1373:29" pos:end="1373:32"><expr pos:start="1373:29" pos:end="1373:32"><name pos:start="1373:29" pos:end="1373:32">arg1</name></expr></argument>, <argument pos:start="1373:35" pos:end="1373:38"><expr pos:start="1373:35" pos:end="1373:38"><name pos:start="1373:35" pos:end="1373:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1374:1" pos:end="1374:6">#<cpp:directive pos:start="1374:2" pos:end="1374:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1375:1" pos:end="1375:23">#<cpp:directive pos:start="1375:2" pos:end="1375:6">ifdef</cpp:directive> <name pos:start="1375:8" pos:end="1375:23">TARGET_NR_accept</name></cpp:ifdef>
    <case pos:start="1376:5" pos:end="1376:26">case <expr pos:start="1376:10" pos:end="1376:25"><name pos:start="1376:10" pos:end="1376:25">TARGET_NR_accept</name></expr>:</case>
        <expr_stmt pos:start="1377:9" pos:end="1380:0"><expr pos:start="1377:9" pos:end="1377:45"><name pos:start="1377:9" pos:end="1377:11">ret</name> <operator pos:start="1377:13" pos:end="1377:13">=</operator> <call pos:start="1377:15" pos:end="1377:45"><name pos:start="1377:15" pos:end="1377:24">do_accept4</name><argument_list pos:start="1377:25" pos:end="1377:45">(<argument pos:start="1377:26" pos:end="1377:29"><expr pos:start="1377:26" pos:end="1377:29"><name pos:start="1377:26" pos:end="1377:29">arg1</name></expr></argument>, <argument pos:start="1377:32" pos:end="1377:35"><expr pos:start="1377:32" pos:end="1377:35"><name pos:start="1377:32" pos:end="1377:35">arg2</name></expr></argument>, <argument pos:start="1377:38" pos:end="1377:41"><expr pos:start="1377:38" pos:end="1377:41"><name pos:start="1377:38" pos:end="1377:41">arg3</name></expr></argument>, <argument pos:start="1377:44" pos:end="1377:44"><expr pos:start="1377:44" pos:end="1377:44"><literal type="number" pos:start="1377:44" pos:end="1377:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1378:1" pos:end="1378:6">#<cpp:directive pos:start="1378:2" pos:end="1378:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1379:1" pos:end="1379:24">#<cpp:directive pos:start="1379:2" pos:end="1379:6">ifdef</cpp:directive> <name pos:start="1379:8" pos:end="1379:24">TARGET_NR_accept4</name></cpp:ifdef>
    <case pos:start="1380:5" pos:end="1380:27">case <expr pos:start="1380:10" pos:end="1380:26"><name pos:start="1380:10" pos:end="1380:26">TARGET_NR_accept4</name></expr>:</case>
        <expr_stmt pos:start="1381:9" pos:end="1384:0"><expr pos:start="1381:9" pos:end="1381:48"><name pos:start="1381:9" pos:end="1381:11">ret</name> <operator pos:start="1381:13" pos:end="1381:13">=</operator> <call pos:start="1381:15" pos:end="1381:48"><name pos:start="1381:15" pos:end="1381:24">do_accept4</name><argument_list pos:start="1381:25" pos:end="1381:48">(<argument pos:start="1381:26" pos:end="1381:29"><expr pos:start="1381:26" pos:end="1381:29"><name pos:start="1381:26" pos:end="1381:29">arg1</name></expr></argument>, <argument pos:start="1381:32" pos:end="1381:35"><expr pos:start="1381:32" pos:end="1381:35"><name pos:start="1381:32" pos:end="1381:35">arg2</name></expr></argument>, <argument pos:start="1381:38" pos:end="1381:41"><expr pos:start="1381:38" pos:end="1381:41"><name pos:start="1381:38" pos:end="1381:41">arg3</name></expr></argument>, <argument pos:start="1381:44" pos:end="1381:47"><expr pos:start="1381:44" pos:end="1381:47"><name pos:start="1381:44" pos:end="1381:47">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1382:1" pos:end="1382:6">#<cpp:directive pos:start="1382:2" pos:end="1382:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1383:1" pos:end="1383:21">#<cpp:directive pos:start="1383:2" pos:end="1383:6">ifdef</cpp:directive> <name pos:start="1383:8" pos:end="1383:21">TARGET_NR_bind</name></cpp:ifdef>
    <case pos:start="1384:5" pos:end="1384:24">case <expr pos:start="1384:10" pos:end="1384:23"><name pos:start="1384:10" pos:end="1384:23">TARGET_NR_bind</name></expr>:</case>
        <expr_stmt pos:start="1385:9" pos:end="1388:0"><expr pos:start="1385:9" pos:end="1385:39"><name pos:start="1385:9" pos:end="1385:11">ret</name> <operator pos:start="1385:13" pos:end="1385:13">=</operator> <call pos:start="1385:15" pos:end="1385:39"><name pos:start="1385:15" pos:end="1385:21">do_bind</name><argument_list pos:start="1385:22" pos:end="1385:39">(<argument pos:start="1385:23" pos:end="1385:26"><expr pos:start="1385:23" pos:end="1385:26"><name pos:start="1385:23" pos:end="1385:26">arg1</name></expr></argument>, <argument pos:start="1385:29" pos:end="1385:32"><expr pos:start="1385:29" pos:end="1385:32"><name pos:start="1385:29" pos:end="1385:32">arg2</name></expr></argument>, <argument pos:start="1385:35" pos:end="1385:38"><expr pos:start="1385:35" pos:end="1385:38"><name pos:start="1385:35" pos:end="1385:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1386:1" pos:end="1386:6">#<cpp:directive pos:start="1386:2" pos:end="1386:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1387:1" pos:end="1387:24">#<cpp:directive pos:start="1387:2" pos:end="1387:6">ifdef</cpp:directive> <name pos:start="1387:8" pos:end="1387:24">TARGET_NR_connect</name></cpp:ifdef>
    <case pos:start="1388:5" pos:end="1388:27">case <expr pos:start="1388:10" pos:end="1388:26"><name pos:start="1388:10" pos:end="1388:26">TARGET_NR_connect</name></expr>:</case>
        <expr_stmt pos:start="1389:9" pos:end="1392:0"><expr pos:start="1389:9" pos:end="1389:42"><name pos:start="1389:9" pos:end="1389:11">ret</name> <operator pos:start="1389:13" pos:end="1389:13">=</operator> <call pos:start="1389:15" pos:end="1389:42"><name pos:start="1389:15" pos:end="1389:24">do_connect</name><argument_list pos:start="1389:25" pos:end="1389:42">(<argument pos:start="1389:26" pos:end="1389:29"><expr pos:start="1389:26" pos:end="1389:29"><name pos:start="1389:26" pos:end="1389:29">arg1</name></expr></argument>, <argument pos:start="1389:32" pos:end="1389:35"><expr pos:start="1389:32" pos:end="1389:35"><name pos:start="1389:32" pos:end="1389:35">arg2</name></expr></argument>, <argument pos:start="1389:38" pos:end="1389:41"><expr pos:start="1389:38" pos:end="1389:41"><name pos:start="1389:38" pos:end="1389:41">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1390:1" pos:end="1390:6">#<cpp:directive pos:start="1390:2" pos:end="1390:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1391:1" pos:end="1391:28">#<cpp:directive pos:start="1391:2" pos:end="1391:6">ifdef</cpp:directive> <name pos:start="1391:8" pos:end="1391:28">TARGET_NR_getpeername</name></cpp:ifdef>
    <case pos:start="1392:5" pos:end="1392:31">case <expr pos:start="1392:10" pos:end="1392:30"><name pos:start="1392:10" pos:end="1392:30">TARGET_NR_getpeername</name></expr>:</case>
        <expr_stmt pos:start="1393:9" pos:end="1396:0"><expr pos:start="1393:9" pos:end="1393:46"><name pos:start="1393:9" pos:end="1393:11">ret</name> <operator pos:start="1393:13" pos:end="1393:13">=</operator> <call pos:start="1393:15" pos:end="1393:46"><name pos:start="1393:15" pos:end="1393:28">do_getpeername</name><argument_list pos:start="1393:29" pos:end="1393:46">(<argument pos:start="1393:30" pos:end="1393:33"><expr pos:start="1393:30" pos:end="1393:33"><name pos:start="1393:30" pos:end="1393:33">arg1</name></expr></argument>, <argument pos:start="1393:36" pos:end="1393:39"><expr pos:start="1393:36" pos:end="1393:39"><name pos:start="1393:36" pos:end="1393:39">arg2</name></expr></argument>, <argument pos:start="1393:42" pos:end="1393:45"><expr pos:start="1393:42" pos:end="1393:45"><name pos:start="1393:42" pos:end="1393:45">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1394:1" pos:end="1394:6">#<cpp:directive pos:start="1394:2" pos:end="1394:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1395:1" pos:end="1395:28">#<cpp:directive pos:start="1395:2" pos:end="1395:6">ifdef</cpp:directive> <name pos:start="1395:8" pos:end="1395:28">TARGET_NR_getsockname</name></cpp:ifdef>
    <case pos:start="1396:5" pos:end="1396:31">case <expr pos:start="1396:10" pos:end="1396:30"><name pos:start="1396:10" pos:end="1396:30">TARGET_NR_getsockname</name></expr>:</case>
        <expr_stmt pos:start="1397:9" pos:end="1400:0"><expr pos:start="1397:9" pos:end="1397:46"><name pos:start="1397:9" pos:end="1397:11">ret</name> <operator pos:start="1397:13" pos:end="1397:13">=</operator> <call pos:start="1397:15" pos:end="1397:46"><name pos:start="1397:15" pos:end="1397:28">do_getsockname</name><argument_list pos:start="1397:29" pos:end="1397:46">(<argument pos:start="1397:30" pos:end="1397:33"><expr pos:start="1397:30" pos:end="1397:33"><name pos:start="1397:30" pos:end="1397:33">arg1</name></expr></argument>, <argument pos:start="1397:36" pos:end="1397:39"><expr pos:start="1397:36" pos:end="1397:39"><name pos:start="1397:36" pos:end="1397:39">arg2</name></expr></argument>, <argument pos:start="1397:42" pos:end="1397:45"><expr pos:start="1397:42" pos:end="1397:45"><name pos:start="1397:42" pos:end="1397:45">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1398:1" pos:end="1398:6">#<cpp:directive pos:start="1398:2" pos:end="1398:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1399:1" pos:end="1399:27">#<cpp:directive pos:start="1399:2" pos:end="1399:6">ifdef</cpp:directive> <name pos:start="1399:8" pos:end="1399:27">TARGET_NR_getsockopt</name></cpp:ifdef>
    <case pos:start="1400:5" pos:end="1400:30">case <expr pos:start="1400:10" pos:end="1400:29"><name pos:start="1400:10" pos:end="1400:29">TARGET_NR_getsockopt</name></expr>:</case>
        <expr_stmt pos:start="1401:9" pos:end="1404:0"><expr pos:start="1401:9" pos:end="1401:57"><name pos:start="1401:9" pos:end="1401:11">ret</name> <operator pos:start="1401:13" pos:end="1401:13">=</operator> <call pos:start="1401:15" pos:end="1401:57"><name pos:start="1401:15" pos:end="1401:27">do_getsockopt</name><argument_list pos:start="1401:28" pos:end="1401:57">(<argument pos:start="1401:29" pos:end="1401:32"><expr pos:start="1401:29" pos:end="1401:32"><name pos:start="1401:29" pos:end="1401:32">arg1</name></expr></argument>, <argument pos:start="1401:35" pos:end="1401:38"><expr pos:start="1401:35" pos:end="1401:38"><name pos:start="1401:35" pos:end="1401:38">arg2</name></expr></argument>, <argument pos:start="1401:41" pos:end="1401:44"><expr pos:start="1401:41" pos:end="1401:44"><name pos:start="1401:41" pos:end="1401:44">arg3</name></expr></argument>, <argument pos:start="1401:47" pos:end="1401:50"><expr pos:start="1401:47" pos:end="1401:50"><name pos:start="1401:47" pos:end="1401:50">arg4</name></expr></argument>, <argument pos:start="1401:53" pos:end="1401:56"><expr pos:start="1401:53" pos:end="1401:56"><name pos:start="1401:53" pos:end="1401:56">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1402:1" pos:end="1402:6">#<cpp:directive pos:start="1402:2" pos:end="1402:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1403:1" pos:end="1403:23">#<cpp:directive pos:start="1403:2" pos:end="1403:6">ifdef</cpp:directive> <name pos:start="1403:8" pos:end="1403:23">TARGET_NR_listen</name></cpp:ifdef>
    <case pos:start="1404:5" pos:end="1404:26">case <expr pos:start="1404:10" pos:end="1404:25"><name pos:start="1404:10" pos:end="1404:25">TARGET_NR_listen</name></expr>:</case>
        <expr_stmt pos:start="1405:9" pos:end="1408:0"><expr pos:start="1405:9" pos:end="1405:43"><name pos:start="1405:9" pos:end="1405:11">ret</name> <operator pos:start="1405:13" pos:end="1405:13">=</operator> <call pos:start="1405:15" pos:end="1405:43"><name pos:start="1405:15" pos:end="1405:23">get_errno</name><argument_list pos:start="1405:24" pos:end="1405:43">(<argument pos:start="1405:25" pos:end="1405:42"><expr pos:start="1405:25" pos:end="1405:42"><call pos:start="1405:25" pos:end="1405:42"><name pos:start="1405:25" pos:end="1405:30">listen</name><argument_list pos:start="1405:31" pos:end="1405:42">(<argument pos:start="1405:32" pos:end="1405:35"><expr pos:start="1405:32" pos:end="1405:35"><name pos:start="1405:32" pos:end="1405:35">arg1</name></expr></argument>, <argument pos:start="1405:38" pos:end="1405:41"><expr pos:start="1405:38" pos:end="1405:41"><name pos:start="1405:38" pos:end="1405:41">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1406:1" pos:end="1406:6">#<cpp:directive pos:start="1406:2" pos:end="1406:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1407:1" pos:end="1407:21">#<cpp:directive pos:start="1407:2" pos:end="1407:6">ifdef</cpp:directive> <name pos:start="1407:8" pos:end="1407:21">TARGET_NR_recv</name></cpp:ifdef>
    <case pos:start="1408:5" pos:end="1408:24">case <expr pos:start="1408:10" pos:end="1408:23"><name pos:start="1408:10" pos:end="1408:23">TARGET_NR_recv</name></expr>:</case>
        <expr_stmt pos:start="1409:9" pos:end="1412:0"><expr pos:start="1409:9" pos:end="1409:55"><name pos:start="1409:9" pos:end="1409:11">ret</name> <operator pos:start="1409:13" pos:end="1409:13">=</operator> <call pos:start="1409:15" pos:end="1409:55"><name pos:start="1409:15" pos:end="1409:25">do_recvfrom</name><argument_list pos:start="1409:26" pos:end="1409:55">(<argument pos:start="1409:27" pos:end="1409:30"><expr pos:start="1409:27" pos:end="1409:30"><name pos:start="1409:27" pos:end="1409:30">arg1</name></expr></argument>, <argument pos:start="1409:33" pos:end="1409:36"><expr pos:start="1409:33" pos:end="1409:36"><name pos:start="1409:33" pos:end="1409:36">arg2</name></expr></argument>, <argument pos:start="1409:39" pos:end="1409:42"><expr pos:start="1409:39" pos:end="1409:42"><name pos:start="1409:39" pos:end="1409:42">arg3</name></expr></argument>, <argument pos:start="1409:45" pos:end="1409:48"><expr pos:start="1409:45" pos:end="1409:48"><name pos:start="1409:45" pos:end="1409:48">arg4</name></expr></argument>, <argument pos:start="1409:51" pos:end="1409:51"><expr pos:start="1409:51" pos:end="1409:51"><literal type="number" pos:start="1409:51" pos:end="1409:51">0</literal></expr></argument>, <argument pos:start="1409:54" pos:end="1409:54"><expr pos:start="1409:54" pos:end="1409:54"><literal type="number" pos:start="1409:54" pos:end="1409:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1410:1" pos:end="1410:6">#<cpp:directive pos:start="1410:2" pos:end="1410:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1411:1" pos:end="1411:25">#<cpp:directive pos:start="1411:2" pos:end="1411:6">ifdef</cpp:directive> <name pos:start="1411:8" pos:end="1411:25">TARGET_NR_recvfrom</name></cpp:ifdef>
    <case pos:start="1412:5" pos:end="1412:28">case <expr pos:start="1412:10" pos:end="1412:27"><name pos:start="1412:10" pos:end="1412:27">TARGET_NR_recvfrom</name></expr>:</case>
        <expr_stmt pos:start="1413:9" pos:end="1416:0"><expr pos:start="1413:9" pos:end="1413:61"><name pos:start="1413:9" pos:end="1413:11">ret</name> <operator pos:start="1413:13" pos:end="1413:13">=</operator> <call pos:start="1413:15" pos:end="1413:61"><name pos:start="1413:15" pos:end="1413:25">do_recvfrom</name><argument_list pos:start="1413:26" pos:end="1413:61">(<argument pos:start="1413:27" pos:end="1413:30"><expr pos:start="1413:27" pos:end="1413:30"><name pos:start="1413:27" pos:end="1413:30">arg1</name></expr></argument>, <argument pos:start="1413:33" pos:end="1413:36"><expr pos:start="1413:33" pos:end="1413:36"><name pos:start="1413:33" pos:end="1413:36">arg2</name></expr></argument>, <argument pos:start="1413:39" pos:end="1413:42"><expr pos:start="1413:39" pos:end="1413:42"><name pos:start="1413:39" pos:end="1413:42">arg3</name></expr></argument>, <argument pos:start="1413:45" pos:end="1413:48"><expr pos:start="1413:45" pos:end="1413:48"><name pos:start="1413:45" pos:end="1413:48">arg4</name></expr></argument>, <argument pos:start="1413:51" pos:end="1413:54"><expr pos:start="1413:51" pos:end="1413:54"><name pos:start="1413:51" pos:end="1413:54">arg5</name></expr></argument>, <argument pos:start="1413:57" pos:end="1413:60"><expr pos:start="1413:57" pos:end="1413:60"><name pos:start="1413:57" pos:end="1413:60">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1414:1" pos:end="1414:6">#<cpp:directive pos:start="1414:2" pos:end="1414:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1415:1" pos:end="1415:24">#<cpp:directive pos:start="1415:2" pos:end="1415:6">ifdef</cpp:directive> <name pos:start="1415:8" pos:end="1415:24">TARGET_NR_recvmsg</name></cpp:ifdef>
    <case pos:start="1416:5" pos:end="1416:27">case <expr pos:start="1416:10" pos:end="1416:26"><name pos:start="1416:10" pos:end="1416:26">TARGET_NR_recvmsg</name></expr>:</case>
        <expr_stmt pos:start="1417:9" pos:end="1420:0"><expr pos:start="1417:9" pos:end="1417:49"><name pos:start="1417:9" pos:end="1417:11">ret</name> <operator pos:start="1417:13" pos:end="1417:13">=</operator> <call pos:start="1417:15" pos:end="1417:49"><name pos:start="1417:15" pos:end="1417:28">do_sendrecvmsg</name><argument_list pos:start="1417:29" pos:end="1417:49">(<argument pos:start="1417:30" pos:end="1417:33"><expr pos:start="1417:30" pos:end="1417:33"><name pos:start="1417:30" pos:end="1417:33">arg1</name></expr></argument>, <argument pos:start="1417:36" pos:end="1417:39"><expr pos:start="1417:36" pos:end="1417:39"><name pos:start="1417:36" pos:end="1417:39">arg2</name></expr></argument>, <argument pos:start="1417:42" pos:end="1417:45"><expr pos:start="1417:42" pos:end="1417:45"><name pos:start="1417:42" pos:end="1417:45">arg3</name></expr></argument>, <argument pos:start="1417:48" pos:end="1417:48"><expr pos:start="1417:48" pos:end="1417:48"><literal type="number" pos:start="1417:48" pos:end="1417:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1418:1" pos:end="1418:6">#<cpp:directive pos:start="1418:2" pos:end="1418:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1419:1" pos:end="1419:21">#<cpp:directive pos:start="1419:2" pos:end="1419:6">ifdef</cpp:directive> <name pos:start="1419:8" pos:end="1419:21">TARGET_NR_send</name></cpp:ifdef>
    <case pos:start="1420:5" pos:end="1420:24">case <expr pos:start="1420:10" pos:end="1420:23"><name pos:start="1420:10" pos:end="1420:23">TARGET_NR_send</name></expr>:</case>
        <expr_stmt pos:start="1421:9" pos:end="1424:0"><expr pos:start="1421:9" pos:end="1421:53"><name pos:start="1421:9" pos:end="1421:11">ret</name> <operator pos:start="1421:13" pos:end="1421:13">=</operator> <call pos:start="1421:15" pos:end="1421:53"><name pos:start="1421:15" pos:end="1421:23">do_sendto</name><argument_list pos:start="1421:24" pos:end="1421:53">(<argument pos:start="1421:25" pos:end="1421:28"><expr pos:start="1421:25" pos:end="1421:28"><name pos:start="1421:25" pos:end="1421:28">arg1</name></expr></argument>, <argument pos:start="1421:31" pos:end="1421:34"><expr pos:start="1421:31" pos:end="1421:34"><name pos:start="1421:31" pos:end="1421:34">arg2</name></expr></argument>, <argument pos:start="1421:37" pos:end="1421:40"><expr pos:start="1421:37" pos:end="1421:40"><name pos:start="1421:37" pos:end="1421:40">arg3</name></expr></argument>, <argument pos:start="1421:43" pos:end="1421:46"><expr pos:start="1421:43" pos:end="1421:46"><name pos:start="1421:43" pos:end="1421:46">arg4</name></expr></argument>, <argument pos:start="1421:49" pos:end="1421:49"><expr pos:start="1421:49" pos:end="1421:49"><literal type="number" pos:start="1421:49" pos:end="1421:49">0</literal></expr></argument>, <argument pos:start="1421:52" pos:end="1421:52"><expr pos:start="1421:52" pos:end="1421:52"><literal type="number" pos:start="1421:52" pos:end="1421:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1422:1" pos:end="1422:6">#<cpp:directive pos:start="1422:2" pos:end="1422:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1423:1" pos:end="1423:24">#<cpp:directive pos:start="1423:2" pos:end="1423:6">ifdef</cpp:directive> <name pos:start="1423:8" pos:end="1423:24">TARGET_NR_sendmsg</name></cpp:ifdef>
    <case pos:start="1424:5" pos:end="1424:27">case <expr pos:start="1424:10" pos:end="1424:26"><name pos:start="1424:10" pos:end="1424:26">TARGET_NR_sendmsg</name></expr>:</case>
        <expr_stmt pos:start="1425:9" pos:end="1428:0"><expr pos:start="1425:9" pos:end="1425:49"><name pos:start="1425:9" pos:end="1425:11">ret</name> <operator pos:start="1425:13" pos:end="1425:13">=</operator> <call pos:start="1425:15" pos:end="1425:49"><name pos:start="1425:15" pos:end="1425:28">do_sendrecvmsg</name><argument_list pos:start="1425:29" pos:end="1425:49">(<argument pos:start="1425:30" pos:end="1425:33"><expr pos:start="1425:30" pos:end="1425:33"><name pos:start="1425:30" pos:end="1425:33">arg1</name></expr></argument>, <argument pos:start="1425:36" pos:end="1425:39"><expr pos:start="1425:36" pos:end="1425:39"><name pos:start="1425:36" pos:end="1425:39">arg2</name></expr></argument>, <argument pos:start="1425:42" pos:end="1425:45"><expr pos:start="1425:42" pos:end="1425:45"><name pos:start="1425:42" pos:end="1425:45">arg3</name></expr></argument>, <argument pos:start="1425:48" pos:end="1425:48"><expr pos:start="1425:48" pos:end="1425:48"><literal type="number" pos:start="1425:48" pos:end="1425:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1426:1" pos:end="1426:6">#<cpp:directive pos:start="1426:2" pos:end="1426:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1427:1" pos:end="1427:25">#<cpp:directive pos:start="1427:2" pos:end="1427:6">ifdef</cpp:directive> <name pos:start="1427:8" pos:end="1427:25">TARGET_NR_sendmmsg</name></cpp:ifdef>
    <case pos:start="1428:5" pos:end="1428:28">case <expr pos:start="1428:10" pos:end="1428:27"><name pos:start="1428:10" pos:end="1428:27">TARGET_NR_sendmmsg</name></expr>:</case>
        <expr_stmt pos:start="1429:9" pos:end="1429:57"><expr pos:start="1429:9" pos:end="1429:56"><name pos:start="1429:9" pos:end="1429:11">ret</name> <operator pos:start="1429:13" pos:end="1429:13">=</operator> <call pos:start="1429:15" pos:end="1429:56"><name pos:start="1429:15" pos:end="1429:29">do_sendrecvmmsg</name><argument_list pos:start="1429:30" pos:end="1429:56">(<argument pos:start="1429:31" pos:end="1429:34"><expr pos:start="1429:31" pos:end="1429:34"><name pos:start="1429:31" pos:end="1429:34">arg1</name></expr></argument>, <argument pos:start="1429:37" pos:end="1429:40"><expr pos:start="1429:37" pos:end="1429:40"><name pos:start="1429:37" pos:end="1429:40">arg2</name></expr></argument>, <argument pos:start="1429:43" pos:end="1429:46"><expr pos:start="1429:43" pos:end="1429:46"><name pos:start="1429:43" pos:end="1429:46">arg3</name></expr></argument>, <argument pos:start="1429:49" pos:end="1429:52"><expr pos:start="1429:49" pos:end="1429:52"><name pos:start="1429:49" pos:end="1429:52">arg4</name></expr></argument>, <argument pos:start="1429:55" pos:end="1429:55"><expr pos:start="1429:55" pos:end="1429:55"><literal type="number" pos:start="1429:55" pos:end="1429:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1430:5" pos:end="1430:28">case <expr pos:start="1430:10" pos:end="1430:27"><name pos:start="1430:10" pos:end="1430:27">TARGET_NR_recvmmsg</name></expr>:</case>
        <expr_stmt pos:start="1431:9" pos:end="1434:0"><expr pos:start="1431:9" pos:end="1431:56"><name pos:start="1431:9" pos:end="1431:11">ret</name> <operator pos:start="1431:13" pos:end="1431:13">=</operator> <call pos:start="1431:15" pos:end="1431:56"><name pos:start="1431:15" pos:end="1431:29">do_sendrecvmmsg</name><argument_list pos:start="1431:30" pos:end="1431:56">(<argument pos:start="1431:31" pos:end="1431:34"><expr pos:start="1431:31" pos:end="1431:34"><name pos:start="1431:31" pos:end="1431:34">arg1</name></expr></argument>, <argument pos:start="1431:37" pos:end="1431:40"><expr pos:start="1431:37" pos:end="1431:40"><name pos:start="1431:37" pos:end="1431:40">arg2</name></expr></argument>, <argument pos:start="1431:43" pos:end="1431:46"><expr pos:start="1431:43" pos:end="1431:46"><name pos:start="1431:43" pos:end="1431:46">arg3</name></expr></argument>, <argument pos:start="1431:49" pos:end="1431:52"><expr pos:start="1431:49" pos:end="1431:52"><name pos:start="1431:49" pos:end="1431:52">arg4</name></expr></argument>, <argument pos:start="1431:55" pos:end="1431:55"><expr pos:start="1431:55" pos:end="1431:55"><literal type="number" pos:start="1431:55" pos:end="1431:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1432:1" pos:end="1432:6">#<cpp:directive pos:start="1432:2" pos:end="1432:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1433:1" pos:end="1433:23">#<cpp:directive pos:start="1433:2" pos:end="1433:6">ifdef</cpp:directive> <name pos:start="1433:8" pos:end="1433:23">TARGET_NR_sendto</name></cpp:ifdef>
    <case pos:start="1434:5" pos:end="1434:26">case <expr pos:start="1434:10" pos:end="1434:25"><name pos:start="1434:10" pos:end="1434:25">TARGET_NR_sendto</name></expr>:</case>
        <expr_stmt pos:start="1435:9" pos:end="1438:0"><expr pos:start="1435:9" pos:end="1435:59"><name pos:start="1435:9" pos:end="1435:11">ret</name> <operator pos:start="1435:13" pos:end="1435:13">=</operator> <call pos:start="1435:15" pos:end="1435:59"><name pos:start="1435:15" pos:end="1435:23">do_sendto</name><argument_list pos:start="1435:24" pos:end="1435:59">(<argument pos:start="1435:25" pos:end="1435:28"><expr pos:start="1435:25" pos:end="1435:28"><name pos:start="1435:25" pos:end="1435:28">arg1</name></expr></argument>, <argument pos:start="1435:31" pos:end="1435:34"><expr pos:start="1435:31" pos:end="1435:34"><name pos:start="1435:31" pos:end="1435:34">arg2</name></expr></argument>, <argument pos:start="1435:37" pos:end="1435:40"><expr pos:start="1435:37" pos:end="1435:40"><name pos:start="1435:37" pos:end="1435:40">arg3</name></expr></argument>, <argument pos:start="1435:43" pos:end="1435:46"><expr pos:start="1435:43" pos:end="1435:46"><name pos:start="1435:43" pos:end="1435:46">arg4</name></expr></argument>, <argument pos:start="1435:49" pos:end="1435:52"><expr pos:start="1435:49" pos:end="1435:52"><name pos:start="1435:49" pos:end="1435:52">arg5</name></expr></argument>, <argument pos:start="1435:55" pos:end="1435:58"><expr pos:start="1435:55" pos:end="1435:58"><name pos:start="1435:55" pos:end="1435:58">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1436:1" pos:end="1436:6">#<cpp:directive pos:start="1436:2" pos:end="1436:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1437:1" pos:end="1437:25">#<cpp:directive pos:start="1437:2" pos:end="1437:6">ifdef</cpp:directive> <name pos:start="1437:8" pos:end="1437:25">TARGET_NR_shutdown</name></cpp:ifdef>
    <case pos:start="1438:5" pos:end="1438:28">case <expr pos:start="1438:10" pos:end="1438:27"><name pos:start="1438:10" pos:end="1438:27">TARGET_NR_shutdown</name></expr>:</case>
        <expr_stmt pos:start="1439:9" pos:end="1442:0"><expr pos:start="1439:9" pos:end="1439:45"><name pos:start="1439:9" pos:end="1439:11">ret</name> <operator pos:start="1439:13" pos:end="1439:13">=</operator> <call pos:start="1439:15" pos:end="1439:45"><name pos:start="1439:15" pos:end="1439:23">get_errno</name><argument_list pos:start="1439:24" pos:end="1439:45">(<argument pos:start="1439:25" pos:end="1439:44"><expr pos:start="1439:25" pos:end="1439:44"><call pos:start="1439:25" pos:end="1439:44"><name pos:start="1439:25" pos:end="1439:32">shutdown</name><argument_list pos:start="1439:33" pos:end="1439:44">(<argument pos:start="1439:34" pos:end="1439:37"><expr pos:start="1439:34" pos:end="1439:37"><name pos:start="1439:34" pos:end="1439:37">arg1</name></expr></argument>, <argument pos:start="1439:40" pos:end="1439:43"><expr pos:start="1439:40" pos:end="1439:43"><name pos:start="1439:40" pos:end="1439:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1440:1" pos:end="1440:6">#<cpp:directive pos:start="1440:2" pos:end="1440:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="1441:1" pos:end="1441:59">#<cpp:directive pos:start="1441:2" pos:end="1441:3">if</cpp:directive> <expr pos:start="1441:5" pos:end="1441:59"><call pos:start="1441:5" pos:end="1441:32"><name pos:start="1441:5" pos:end="1441:11">defined</name><argument_list pos:start="1441:12" pos:end="1441:32">(<argument pos:start="1441:13" pos:end="1441:31"><expr pos:start="1441:13" pos:end="1441:31"><name pos:start="1441:13" pos:end="1441:31">TARGET_NR_getrandom</name></expr></argument>)</argument_list></call> <operator pos:start="1441:34" pos:end="1441:35">&amp;&amp;</operator> <call pos:start="1441:37" pos:end="1441:59"><name pos:start="1441:37" pos:end="1441:43">defined</name><argument_list pos:start="1441:44" pos:end="1441:59">(<argument pos:start="1441:45" pos:end="1441:58"><expr pos:start="1441:45" pos:end="1441:58"><name pos:start="1441:45" pos:end="1441:58">__NR_getrandom</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="1442:5" pos:end="1442:29">case <expr pos:start="1442:10" pos:end="1442:28"><name pos:start="1442:10" pos:end="1442:28">TARGET_NR_getrandom</name></expr>:</case>
        <expr_stmt pos:start="1443:9" pos:end="1443:51"><expr pos:start="1443:9" pos:end="1443:50"><name pos:start="1443:9" pos:end="1443:9">p</name> <operator pos:start="1443:11" pos:end="1443:11">=</operator> <call pos:start="1443:13" pos:end="1443:50"><name pos:start="1443:13" pos:end="1443:21">lock_user</name><argument_list pos:start="1443:22" pos:end="1443:50">(<argument pos:start="1443:23" pos:end="1443:34"><expr pos:start="1443:23" pos:end="1443:34"><name pos:start="1443:23" pos:end="1443:34">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1443:37" pos:end="1443:40"><expr pos:start="1443:37" pos:end="1443:40"><name pos:start="1443:37" pos:end="1443:40">arg1</name></expr></argument>, <argument pos:start="1443:43" pos:end="1443:46"><expr pos:start="1443:43" pos:end="1443:46"><name pos:start="1443:43" pos:end="1443:46">arg2</name></expr></argument>, <argument pos:start="1443:49" pos:end="1443:49"><expr pos:start="1443:49" pos:end="1443:49"><literal type="number" pos:start="1443:49" pos:end="1443:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1444:9" pos:end="3541:14"><if pos:start="1444:9" pos:end="3541:14">if <condition pos:start="1444:12" pos:end="1444:15">(<expr pos:start="1444:13" pos:end="1444:14"><operator pos:start="1444:13" pos:end="1444:13">!</operator><name pos:start="1444:14" pos:end="1444:14">p</name></expr>)</condition> <block pos:start="1444:17" pos:end="3541:14">{<block_content pos:start="1445:13" pos:end="3541:14">
            <goto pos:start="1445:13" pos:end="1445:24">goto <name pos:start="1445:18" pos:end="1445:23">efault</name>;</goto>
        <expr_stmt pos:start="1446:9" pos:end="1446:50"><expr pos:start="1446:9" pos:end="1446:49"><name pos:start="1446:9" pos:end="1446:11">ret</name> <operator pos:start="1446:13" pos:end="1446:13">=</operator> <call pos:start="1446:15" pos:end="1446:49"><name pos:start="1446:15" pos:end="1446:23">get_errno</name><argument_list pos:start="1446:24" pos:end="1446:49">(<argument pos:start="1446:25" pos:end="1446:48"><expr pos:start="1446:25" pos:end="1446:48"><call pos:start="1446:25" pos:end="1446:48"><name pos:start="1446:25" pos:end="1446:33">getrandom</name><argument_list pos:start="1446:34" pos:end="1446:48">(<argument pos:start="1446:35" pos:end="1446:35"><expr pos:start="1446:35" pos:end="1446:35"><name pos:start="1446:35" pos:end="1446:35">p</name></expr></argument>, <argument pos:start="1446:38" pos:end="1446:41"><expr pos:start="1446:38" pos:end="1446:41"><name pos:start="1446:38" pos:end="1446:41">arg2</name></expr></argument>, <argument pos:start="1446:44" pos:end="1446:47"><expr pos:start="1446:44" pos:end="1446:47"><name pos:start="1446:44" pos:end="1446:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1447:9" pos:end="1450:0"><expr pos:start="1447:9" pos:end="1447:33"><call pos:start="1447:9" pos:end="1447:33"><name pos:start="1447:9" pos:end="1447:19">unlock_user</name><argument_list pos:start="1447:20" pos:end="1447:33">(<argument pos:start="1447:21" pos:end="1447:21"><expr pos:start="1447:21" pos:end="1447:21"><name pos:start="1447:21" pos:end="1447:21">p</name></expr></argument>, <argument pos:start="1447:24" pos:end="1447:27"><expr pos:start="1447:24" pos:end="1447:27"><name pos:start="1447:24" pos:end="1447:27">arg1</name></expr></argument>, <argument pos:start="1447:30" pos:end="1447:32"><expr pos:start="1447:30" pos:end="1447:32"><name pos:start="1447:30" pos:end="1447:32">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1448:1" pos:end="1448:6">#<cpp:directive pos:start="1448:2" pos:end="1448:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1449:1" pos:end="1449:23">#<cpp:directive pos:start="1449:2" pos:end="1449:6">ifdef</cpp:directive> <name pos:start="1449:8" pos:end="1449:23">TARGET_NR_socket</name></cpp:ifdef>
    <case pos:start="1450:5" pos:end="1450:26">case <expr pos:start="1450:10" pos:end="1450:25"><name pos:start="1450:10" pos:end="1450:25">TARGET_NR_socket</name></expr>:</case>
        <expr_stmt pos:start="1451:9" pos:end="1451:42"><expr pos:start="1451:9" pos:end="1451:41"><name pos:start="1451:9" pos:end="1451:11">ret</name> <operator pos:start="1451:13" pos:end="1451:13">=</operator> <call pos:start="1451:15" pos:end="1451:41"><name pos:start="1451:15" pos:end="1451:23">do_socket</name><argument_list pos:start="1451:24" pos:end="1451:41">(<argument pos:start="1451:25" pos:end="1451:28"><expr pos:start="1451:25" pos:end="1451:28"><name pos:start="1451:25" pos:end="1451:28">arg1</name></expr></argument>, <argument pos:start="1451:31" pos:end="1451:34"><expr pos:start="1451:31" pos:end="1451:34"><name pos:start="1451:31" pos:end="1451:34">arg2</name></expr></argument>, <argument pos:start="1451:37" pos:end="1451:40"><expr pos:start="1451:37" pos:end="1451:40"><name pos:start="1451:37" pos:end="1451:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1452:9" pos:end="1455:0"><expr pos:start="1452:9" pos:end="1452:32"><call pos:start="1452:9" pos:end="1452:32"><name pos:start="1452:9" pos:end="1452:27">fd_trans_unregister</name><argument_list pos:start="1452:28" pos:end="1452:32">(<argument pos:start="1452:29" pos:end="1452:31"><expr pos:start="1452:29" pos:end="1452:31"><name pos:start="1452:29" pos:end="1452:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1453:1" pos:end="1453:6">#<cpp:directive pos:start="1453:2" pos:end="1453:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1454:1" pos:end="1454:27">#<cpp:directive pos:start="1454:2" pos:end="1454:6">ifdef</cpp:directive> <name pos:start="1454:8" pos:end="1454:27">TARGET_NR_socketpair</name></cpp:ifdef>
    <case pos:start="1455:5" pos:end="1455:30">case <expr pos:start="1455:10" pos:end="1455:29"><name pos:start="1455:10" pos:end="1455:29">TARGET_NR_socketpair</name></expr>:</case>
        <expr_stmt pos:start="1456:9" pos:end="1459:0"><expr pos:start="1456:9" pos:end="1456:51"><name pos:start="1456:9" pos:end="1456:11">ret</name> <operator pos:start="1456:13" pos:end="1456:13">=</operator> <call pos:start="1456:15" pos:end="1456:51"><name pos:start="1456:15" pos:end="1456:27">do_socketpair</name><argument_list pos:start="1456:28" pos:end="1456:51">(<argument pos:start="1456:29" pos:end="1456:32"><expr pos:start="1456:29" pos:end="1456:32"><name pos:start="1456:29" pos:end="1456:32">arg1</name></expr></argument>, <argument pos:start="1456:35" pos:end="1456:38"><expr pos:start="1456:35" pos:end="1456:38"><name pos:start="1456:35" pos:end="1456:38">arg2</name></expr></argument>, <argument pos:start="1456:41" pos:end="1456:44"><expr pos:start="1456:41" pos:end="1456:44"><name pos:start="1456:41" pos:end="1456:44">arg3</name></expr></argument>, <argument pos:start="1456:47" pos:end="1456:50"><expr pos:start="1456:47" pos:end="1456:50"><name pos:start="1456:47" pos:end="1456:50">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1457:1" pos:end="1457:6">#<cpp:directive pos:start="1457:2" pos:end="1457:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1458:1" pos:end="1458:27">#<cpp:directive pos:start="1458:2" pos:end="1458:6">ifdef</cpp:directive> <name pos:start="1458:8" pos:end="1458:27">TARGET_NR_setsockopt</name></cpp:ifdef>
    <case pos:start="1459:5" pos:end="1459:30">case <expr pos:start="1459:10" pos:end="1459:29"><name pos:start="1459:10" pos:end="1459:29">TARGET_NR_setsockopt</name></expr>:</case>
        <expr_stmt pos:start="1460:9" pos:end="1462:0"><expr pos:start="1460:9" pos:end="1460:69"><name pos:start="1460:9" pos:end="1460:11">ret</name> <operator pos:start="1460:13" pos:end="1460:13">=</operator> <call pos:start="1460:15" pos:end="1460:69"><name pos:start="1460:15" pos:end="1460:27">do_setsockopt</name><argument_list pos:start="1460:28" pos:end="1460:69">(<argument pos:start="1460:29" pos:end="1460:32"><expr pos:start="1460:29" pos:end="1460:32"><name pos:start="1460:29" pos:end="1460:32">arg1</name></expr></argument>, <argument pos:start="1460:35" pos:end="1460:38"><expr pos:start="1460:35" pos:end="1460:38"><name pos:start="1460:35" pos:end="1460:38">arg2</name></expr></argument>, <argument pos:start="1460:41" pos:end="1460:44"><expr pos:start="1460:41" pos:end="1460:44"><name pos:start="1460:41" pos:end="1460:44">arg3</name></expr></argument>, <argument pos:start="1460:47" pos:end="1460:50"><expr pos:start="1460:47" pos:end="1460:50"><name pos:start="1460:47" pos:end="1460:50">arg4</name></expr></argument>, <argument pos:start="1460:53" pos:end="1460:68"><expr pos:start="1460:53" pos:end="1460:68"><operator pos:start="1460:53" pos:end="1460:53">(</operator><name pos:start="1460:54" pos:end="1460:62">socklen_t</name><operator pos:start="1460:63" pos:end="1460:63">)</operator> <name pos:start="1460:65" pos:end="1460:68">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1461:1" pos:end="1461:6">#<cpp:directive pos:start="1461:2" pos:end="1461:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1462:5" pos:end="1462:26">case <expr pos:start="1462:10" pos:end="1462:25"><name pos:start="1462:10" pos:end="1462:25">TARGET_NR_syslog</name></expr>:</case>
        <if_stmt pos:start="1463:9" pos:end="1464:24"><if pos:start="1463:9" pos:end="1464:24">if <condition pos:start="1463:12" pos:end="1463:42">(<expr pos:start="1463:13" pos:end="1463:41"><operator pos:start="1463:13" pos:end="1463:13">!</operator><operator pos:start="1463:14" pos:end="1463:14">(</operator><name pos:start="1463:15" pos:end="1463:15">p</name> <operator pos:start="1463:17" pos:end="1463:17">=</operator> <call pos:start="1463:19" pos:end="1463:40"><name pos:start="1463:19" pos:end="1463:34">lock_user_string</name><argument_list pos:start="1463:35" pos:end="1463:40">(<argument pos:start="1463:36" pos:end="1463:39"><expr pos:start="1463:36" pos:end="1463:39"><name pos:start="1463:36" pos:end="1463:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="1463:41" pos:end="1463:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1464:13" pos:end="1464:24"><block_content pos:start="1464:13" pos:end="1464:24">
            <goto pos:start="1464:13" pos:end="1464:24">goto <name pos:start="1464:18" pos:end="1464:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1465:9" pos:end="1465:61"><expr pos:start="1465:9" pos:end="1465:60"><name pos:start="1465:9" pos:end="1465:11">ret</name> <operator pos:start="1465:13" pos:end="1465:13">=</operator> <call pos:start="1465:15" pos:end="1465:60"><name pos:start="1465:15" pos:end="1465:23">get_errno</name><argument_list pos:start="1465:24" pos:end="1465:60">(<argument pos:start="1465:25" pos:end="1465:59"><expr pos:start="1465:25" pos:end="1465:59"><call pos:start="1465:25" pos:end="1465:59"><name pos:start="1465:25" pos:end="1465:34">sys_syslog</name><argument_list pos:start="1465:35" pos:end="1465:59">(<argument pos:start="1465:36" pos:end="1465:44"><expr pos:start="1465:36" pos:end="1465:44"><operator pos:start="1465:36" pos:end="1465:36">(</operator><name pos:start="1465:37" pos:end="1465:39">int</name><operator pos:start="1465:40" pos:end="1465:40">)</operator><name pos:start="1465:41" pos:end="1465:44">arg1</name></expr></argument>, <argument pos:start="1465:47" pos:end="1465:47"><expr pos:start="1465:47" pos:end="1465:47"><name pos:start="1465:47" pos:end="1465:47">p</name></expr></argument>, <argument pos:start="1465:50" pos:end="1465:58"><expr pos:start="1465:50" pos:end="1465:58"><operator pos:start="1465:50" pos:end="1465:50">(</operator><name pos:start="1465:51" pos:end="1465:53">int</name><operator pos:start="1465:54" pos:end="1465:54">)</operator><name pos:start="1465:55" pos:end="1465:58">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1466:9" pos:end="1466:32"><expr pos:start="1466:9" pos:end="1466:31"><call pos:start="1466:9" pos:end="1466:31"><name pos:start="1466:9" pos:end="1466:19">unlock_user</name><argument_list pos:start="1466:20" pos:end="1466:31">(<argument pos:start="1466:21" pos:end="1466:21"><expr pos:start="1466:21" pos:end="1466:21"><name pos:start="1466:21" pos:end="1466:21">p</name></expr></argument>, <argument pos:start="1466:24" pos:end="1466:27"><expr pos:start="1466:24" pos:end="1466:27"><name pos:start="1466:24" pos:end="1466:27">arg2</name></expr></argument>, <argument pos:start="1466:30" pos:end="1466:30"><expr pos:start="1466:30" pos:end="1466:30"><literal type="number" pos:start="1466:30" pos:end="1466:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1467:5" pos:end="1467:29">case <expr pos:start="1467:10" pos:end="1467:28"><name pos:start="1467:10" pos:end="1467:28">TARGET_NR_setitimer</name></expr>:</case>
        <block pos:start="1468:9" pos:end="3541:14">{<block_content pos:start="1469:13" pos:end="3541:14">
            <decl_stmt pos:start="1469:13" pos:end="1469:52"><decl pos:start="1469:13" pos:end="1469:34"><type pos:start="1469:13" pos:end="1469:28"><name pos:start="1469:13" pos:end="1469:28"><name pos:start="1469:13" pos:end="1469:18">struct</name> <name pos:start="1469:20" pos:end="1469:28">itimerval</name></name></type> <name pos:start="1469:30" pos:end="1469:34">value</name></decl>, <decl pos:start="1469:37" pos:end="1469:42"><type ref="prev" pos:start="1469:13" pos:end="1469:28"/><name pos:start="1469:37" pos:end="1469:42">ovalue</name></decl>, <decl pos:start="1469:45" pos:end="1469:51"><type ref="prev" pos:start="1469:13" pos:end="1469:28"><modifier pos:start="1469:45" pos:end="1469:45">*</modifier></type><name pos:start="1469:46" pos:end="1469:51">pvalue</name></decl>;</decl_stmt>
            <if_stmt pos:start="1470:13" pos:end="3541:14"><if pos:start="1470:13" pos:end="1476:13">if <condition pos:start="1470:16" pos:end="1470:21">(<expr pos:start="1470:17" pos:end="1470:20"><name pos:start="1470:17" pos:end="1470:20">arg2</name></expr>)</condition> <block pos:start="1470:23" pos:end="1476:13">{<block_content pos:start="1471:17" pos:end="1475:32">
                <expr_stmt pos:start="1471:17" pos:end="1471:32"><expr pos:start="1471:17" pos:end="1471:31"><name pos:start="1471:17" pos:end="1471:22">pvalue</name> <operator pos:start="1471:24" pos:end="1471:24">=</operator> <operator pos:start="1471:26" pos:end="1471:26">&amp;</operator><name pos:start="1471:27" pos:end="1471:31">value</name></expr>;</expr_stmt>
                <if_stmt pos:start="1472:17" pos:end="1475:32"><if pos:start="1472:17" pos:end="1475:32">if <condition pos:start="1472:20" pos:end="1474:84">(<expr pos:start="1472:21" pos:end="1474:83"><call pos:start="1472:21" pos:end="1472:70"><name pos:start="1472:21" pos:end="1472:42">copy_from_user_timeval</name><argument_list pos:start="1472:43" pos:end="1472:70">(<argument pos:start="1472:44" pos:end="1472:63"><expr pos:start="1472:44" pos:end="1472:63"><operator pos:start="1472:44" pos:end="1472:44">&amp;</operator><name pos:start="1472:45" pos:end="1472:63"><name pos:start="1472:45" pos:end="1472:50">pvalue</name><operator pos:start="1472:51" pos:end="1472:52">-&gt;</operator><name pos:start="1472:53" pos:end="1472:63">it_interval</name></name></expr></argument>, <argument pos:start="1472:66" pos:end="1472:69"><expr pos:start="1472:66" pos:end="1472:69"><name pos:start="1472:66" pos:end="1472:69">arg2</name></expr></argument>)</argument_list></call>
                    <operator pos:start="1473:21" pos:end="1473:22">||</operator> <call pos:start="1473:24" pos:end="1474:83"><name pos:start="1473:24" pos:end="1473:45">copy_from_user_timeval</name><argument_list pos:start="1473:46" pos:end="1474:83">(<argument pos:start="1473:47" pos:end="1473:63"><expr pos:start="1473:47" pos:end="1473:63"><operator pos:start="1473:47" pos:end="1473:47">&amp;</operator><name pos:start="1473:48" pos:end="1473:63"><name pos:start="1473:48" pos:end="1473:53">pvalue</name><operator pos:start="1473:54" pos:end="1473:55">-&gt;</operator><name pos:start="1473:56" pos:end="1473:63">it_value</name></name></expr></argument>,
                                              <argument pos:start="1474:47" pos:end="1474:82"><expr pos:start="1474:47" pos:end="1474:82"><name pos:start="1474:47" pos:end="1474:50">arg2</name> <operator pos:start="1474:52" pos:end="1474:52">+</operator> <sizeof pos:start="1474:54" pos:end="1474:82">sizeof<argument_list pos:start="1474:60" pos:end="1474:82">(<argument pos:start="1474:61" pos:end="1474:81"><expr pos:start="1474:61" pos:end="1474:81">struct <name pos:start="1474:68" pos:end="1474:81">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1475:21" pos:end="1475:32"><block_content pos:start="1475:21" pos:end="1475:32">
                    <goto pos:start="1475:21" pos:end="1475:32">goto <name pos:start="1475:26" pos:end="1475:31">efault</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else pos:start="1476:15" pos:end="3541:14">else <block pos:start="1476:20" pos:end="3541:14">{<block_content pos:start="1477:17" pos:end="3541:14">
                <expr_stmt pos:start="1477:17" pos:end="1477:30"><expr pos:start="1477:17" pos:end="1477:29"><name pos:start="1477:17" pos:end="1477:22">pvalue</name> <operator pos:start="1477:24" pos:end="1477:24">=</operator> <name pos:start="1477:26" pos:end="1477:29">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1478:13" pos:end="1478:62"><expr pos:start="1478:13" pos:end="1478:61"><name pos:start="1478:13" pos:end="1478:15">ret</name> <operator pos:start="1478:17" pos:end="1478:17">=</operator> <call pos:start="1478:19" pos:end="1478:61"><name pos:start="1478:19" pos:end="1478:27">get_errno</name><argument_list pos:start="1478:28" pos:end="1478:61">(<argument pos:start="1478:29" pos:end="1478:60"><expr pos:start="1478:29" pos:end="1478:60"><call pos:start="1478:29" pos:end="1478:60"><name pos:start="1478:29" pos:end="1478:37">setitimer</name><argument_list pos:start="1478:38" pos:end="1478:60">(<argument pos:start="1478:39" pos:end="1478:42"><expr pos:start="1478:39" pos:end="1478:42"><name pos:start="1478:39" pos:end="1478:42">arg1</name></expr></argument>, <argument pos:start="1478:45" pos:end="1478:50"><expr pos:start="1478:45" pos:end="1478:50"><name pos:start="1478:45" pos:end="1478:50">pvalue</name></expr></argument>, <argument pos:start="1478:53" pos:end="1478:59"><expr pos:start="1478:53" pos:end="1478:59"><operator pos:start="1478:53" pos:end="1478:53">&amp;</operator><name pos:start="1478:54" pos:end="1478:59">ovalue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1479:13" pos:end="3541:14"><if pos:start="1479:13" pos:end="3541:14">if <condition pos:start="1479:16" pos:end="1479:39">(<expr pos:start="1479:17" pos:end="1479:38"><operator pos:start="1479:17" pos:end="1479:17">!</operator><call pos:start="1479:18" pos:end="1479:30"><name pos:start="1479:18" pos:end="1479:25">is_error</name><argument_list pos:start="1479:26" pos:end="1479:30">(<argument pos:start="1479:27" pos:end="1479:29"><expr pos:start="1479:27" pos:end="1479:29"><name pos:start="1479:27" pos:end="1479:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1479:32" pos:end="1479:33">&amp;&amp;</operator> <name pos:start="1479:35" pos:end="1479:38">arg3</name></expr>)</condition> <block pos:start="1479:41" pos:end="3541:14">{<block_content pos:start="1480:17" pos:end="3541:14">
                <if_stmt pos:start="1480:17" pos:end="1484:32"><if pos:start="1480:17" pos:end="1484:32">if <condition pos:start="1480:20" pos:end="1483:62">(<expr pos:start="1480:21" pos:end="1483:61"><call pos:start="1480:21" pos:end="1481:61"><name pos:start="1480:21" pos:end="1480:40">copy_to_user_timeval</name><argument_list pos:start="1480:41" pos:end="1481:61">(<argument pos:start="1480:42" pos:end="1480:45"><expr pos:start="1480:42" pos:end="1480:45"><name pos:start="1480:42" pos:end="1480:45">arg3</name></expr></argument>,
                                         <argument pos:start="1481:42" pos:end="1481:60"><expr pos:start="1481:42" pos:end="1481:60"><operator pos:start="1481:42" pos:end="1481:42">&amp;</operator><name pos:start="1481:43" pos:end="1481:60"><name pos:start="1481:43" pos:end="1481:48">ovalue</name><operator pos:start="1481:49" pos:end="1481:49">.</operator><name pos:start="1481:50" pos:end="1481:60">it_interval</name></name></expr></argument>)</argument_list></call>
                    <operator pos:start="1482:21" pos:end="1482:22">||</operator> <call pos:start="1482:24" pos:end="1483:61"><name pos:start="1482:24" pos:end="1482:43">copy_to_user_timeval</name><argument_list pos:start="1482:44" pos:end="1483:61">(<argument pos:start="1482:45" pos:end="1482:80"><expr pos:start="1482:45" pos:end="1482:80"><name pos:start="1482:45" pos:end="1482:48">arg3</name> <operator pos:start="1482:50" pos:end="1482:50">+</operator> <sizeof pos:start="1482:52" pos:end="1482:80">sizeof<argument_list pos:start="1482:58" pos:end="1482:80">(<argument pos:start="1482:59" pos:end="1482:79"><expr pos:start="1482:59" pos:end="1482:79">struct <name pos:start="1482:66" pos:end="1482:79">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                            <argument pos:start="1483:45" pos:end="1483:60"><expr pos:start="1483:45" pos:end="1483:60"><operator pos:start="1483:45" pos:end="1483:45">&amp;</operator><name pos:start="1483:46" pos:end="1483:60"><name pos:start="1483:46" pos:end="1483:51">ovalue</name><operator pos:start="1483:52" pos:end="1483:52">.</operator><name pos:start="1483:53" pos:end="1483:60">it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1484:21" pos:end="1484:32"><block_content pos:start="1484:21" pos:end="1484:32">
                    <goto pos:start="1484:21" pos:end="1484:32">goto <name pos:start="1484:26" pos:end="1484:31">efault</name>;</goto></block_content></block></if></if_stmt>
    <case pos:start="1485:5" pos:end="1485:29">case <expr pos:start="1485:10" pos:end="1485:28"><name pos:start="1485:10" pos:end="1485:28">TARGET_NR_getitimer</name></expr>:</case>
        <block pos:start="1486:9" pos:end="3541:14">{<block_content pos:start="1487:13" pos:end="3541:14">
            <decl_stmt pos:start="1487:13" pos:end="1487:35"><decl pos:start="1487:13" pos:end="1487:34"><type pos:start="1487:13" pos:end="1487:28"><name pos:start="1487:13" pos:end="1487:28"><name pos:start="1487:13" pos:end="1487:18">struct</name> <name pos:start="1487:20" pos:end="1487:28">itimerval</name></name></type> <name pos:start="1487:30" pos:end="1487:34">value</name></decl>;</decl_stmt>
            <expr_stmt pos:start="1488:13" pos:end="1488:53"><expr pos:start="1488:13" pos:end="1488:52"><name pos:start="1488:13" pos:end="1488:15">ret</name> <operator pos:start="1488:17" pos:end="1488:17">=</operator> <call pos:start="1488:19" pos:end="1488:52"><name pos:start="1488:19" pos:end="1488:27">get_errno</name><argument_list pos:start="1488:28" pos:end="1488:52">(<argument pos:start="1488:29" pos:end="1488:51"><expr pos:start="1488:29" pos:end="1488:51"><call pos:start="1488:29" pos:end="1488:51"><name pos:start="1488:29" pos:end="1488:37">getitimer</name><argument_list pos:start="1488:38" pos:end="1488:51">(<argument pos:start="1488:39" pos:end="1488:42"><expr pos:start="1488:39" pos:end="1488:42"><name pos:start="1488:39" pos:end="1488:42">arg1</name></expr></argument>, <argument pos:start="1488:45" pos:end="1488:50"><expr pos:start="1488:45" pos:end="1488:50"><operator pos:start="1488:45" pos:end="1488:45">&amp;</operator><name pos:start="1488:46" pos:end="1488:50">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1489:13" pos:end="3541:14"><if pos:start="1489:13" pos:end="3541:14">if <condition pos:start="1489:16" pos:end="1489:39">(<expr pos:start="1489:17" pos:end="1489:38"><operator pos:start="1489:17" pos:end="1489:17">!</operator><call pos:start="1489:18" pos:end="1489:30"><name pos:start="1489:18" pos:end="1489:25">is_error</name><argument_list pos:start="1489:26" pos:end="1489:30">(<argument pos:start="1489:27" pos:end="1489:29"><expr pos:start="1489:27" pos:end="1489:29"><name pos:start="1489:27" pos:end="1489:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1489:32" pos:end="1489:33">&amp;&amp;</operator> <name pos:start="1489:35" pos:end="1489:38">arg2</name></expr>)</condition> <block pos:start="1489:41" pos:end="3541:14">{<block_content pos:start="1490:17" pos:end="3541:14">
                <if_stmt pos:start="1490:17" pos:end="1496:0"><if pos:start="1490:17" pos:end="1496:0">if <condition pos:start="1490:20" pos:end="1493:61">(<expr pos:start="1490:21" pos:end="1493:60"><call pos:start="1490:21" pos:end="1491:60"><name pos:start="1490:21" pos:end="1490:40">copy_to_user_timeval</name><argument_list pos:start="1490:41" pos:end="1491:60">(<argument pos:start="1490:42" pos:end="1490:45"><expr pos:start="1490:42" pos:end="1490:45"><name pos:start="1490:42" pos:end="1490:45">arg2</name></expr></argument>,
                                         <argument pos:start="1491:42" pos:end="1491:59"><expr pos:start="1491:42" pos:end="1491:59"><operator pos:start="1491:42" pos:end="1491:42">&amp;</operator><name pos:start="1491:43" pos:end="1491:59"><name pos:start="1491:43" pos:end="1491:47">value</name><operator pos:start="1491:48" pos:end="1491:48">.</operator><name pos:start="1491:49" pos:end="1491:59">it_interval</name></name></expr></argument>)</argument_list></call>
                    <operator pos:start="1492:21" pos:end="1492:22">||</operator> <call pos:start="1492:24" pos:end="1493:60"><name pos:start="1492:24" pos:end="1492:43">copy_to_user_timeval</name><argument_list pos:start="1492:44" pos:end="1493:60">(<argument pos:start="1492:45" pos:end="1492:80"><expr pos:start="1492:45" pos:end="1492:80"><name pos:start="1492:45" pos:end="1492:48">arg2</name> <operator pos:start="1492:50" pos:end="1492:50">+</operator> <sizeof pos:start="1492:52" pos:end="1492:80">sizeof<argument_list pos:start="1492:58" pos:end="1492:80">(<argument pos:start="1492:59" pos:end="1492:79"><expr pos:start="1492:59" pos:end="1492:79">struct <name pos:start="1492:66" pos:end="1492:79">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                            <argument pos:start="1493:45" pos:end="1493:59"><expr pos:start="1493:45" pos:end="1493:59"><operator pos:start="1493:45" pos:end="1493:45">&amp;</operator><name pos:start="1493:46" pos:end="1493:59"><name pos:start="1493:46" pos:end="1493:50">value</name><operator pos:start="1493:51" pos:end="1493:51">.</operator><name pos:start="1493:52" pos:end="1493:59">it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1494:21" pos:end="1496:0"><block_content pos:start="1494:21" pos:end="1496:0">
                    <goto pos:start="1494:21" pos:end="1496:0">goto <name pos:start="1494:26" pos:end="1494:31">efault</name>;</goto></block_content></block></if></if_stmt>
<cpp:ifdef pos:start="1495:1" pos:end="1495:21">#<cpp:directive pos:start="1495:2" pos:end="1495:6">ifdef</cpp:directive> <name pos:start="1495:8" pos:end="1495:21">TARGET_NR_stat</name></cpp:ifdef>
    <case pos:start="1496:5" pos:end="1496:24">case <expr pos:start="1496:10" pos:end="1496:23"><name pos:start="1496:10" pos:end="1496:23">TARGET_NR_stat</name></expr>:</case>
        <if_stmt pos:start="1497:9" pos:end="1498:24"><if pos:start="1497:9" pos:end="1498:24">if <condition pos:start="1497:12" pos:end="1497:42">(<expr pos:start="1497:13" pos:end="1497:41"><operator pos:start="1497:13" pos:end="1497:13">!</operator><operator pos:start="1497:14" pos:end="1497:14">(</operator><name pos:start="1497:15" pos:end="1497:15">p</name> <operator pos:start="1497:17" pos:end="1497:17">=</operator> <call pos:start="1497:19" pos:end="1497:40"><name pos:start="1497:19" pos:end="1497:34">lock_user_string</name><argument_list pos:start="1497:35" pos:end="1497:40">(<argument pos:start="1497:36" pos:end="1497:39"><expr pos:start="1497:36" pos:end="1497:39"><name pos:start="1497:36" pos:end="1497:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1497:41" pos:end="1497:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1498:13" pos:end="1498:24"><block_content pos:start="1498:13" pos:end="1498:24">
            <goto pos:start="1498:13" pos:end="1498:24">goto <name pos:start="1498:18" pos:end="1498:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1499:9" pos:end="1499:44"><expr pos:start="1499:9" pos:end="1499:43"><name pos:start="1499:9" pos:end="1499:11">ret</name> <operator pos:start="1499:13" pos:end="1499:13">=</operator> <call pos:start="1499:15" pos:end="1499:43"><name pos:start="1499:15" pos:end="1499:23">get_errno</name><argument_list pos:start="1499:24" pos:end="1499:43">(<argument pos:start="1499:25" pos:end="1499:42"><expr pos:start="1499:25" pos:end="1499:42"><call pos:start="1499:25" pos:end="1499:42"><name pos:start="1499:25" pos:end="1499:28">stat</name><argument_list pos:start="1499:29" pos:end="1499:42">(<argument pos:start="1499:30" pos:end="1499:36"><expr pos:start="1499:30" pos:end="1499:36"><call pos:start="1499:30" pos:end="1499:36"><name pos:start="1499:30" pos:end="1499:33">path</name><argument_list pos:start="1499:34" pos:end="1499:36">(<argument pos:start="1499:35" pos:end="1499:35"><expr pos:start="1499:35" pos:end="1499:35"><name pos:start="1499:35" pos:end="1499:35">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1499:39" pos:end="1499:41"><expr pos:start="1499:39" pos:end="1499:41"><operator pos:start="1499:39" pos:end="1499:39">&amp;</operator><name pos:start="1499:40" pos:end="1499:41">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1500:9" pos:end="1500:32"><expr pos:start="1500:9" pos:end="1500:31"><call pos:start="1500:9" pos:end="1500:31"><name pos:start="1500:9" pos:end="1500:19">unlock_user</name><argument_list pos:start="1500:20" pos:end="1500:31">(<argument pos:start="1500:21" pos:end="1500:21"><expr pos:start="1500:21" pos:end="1500:21"><name pos:start="1500:21" pos:end="1500:21">p</name></expr></argument>, <argument pos:start="1500:24" pos:end="1500:27"><expr pos:start="1500:24" pos:end="1500:27"><name pos:start="1500:24" pos:end="1500:27">arg1</name></expr></argument>, <argument pos:start="1500:30" pos:end="1500:30"><expr pos:start="1500:30" pos:end="1500:30"><literal type="number" pos:start="1500:30" pos:end="1500:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1501:9" pos:end="1504:0">goto <name pos:start="1501:14" pos:end="1501:20">do_stat</name>;</goto>
<cpp:endif pos:start="1502:1" pos:end="1502:6">#<cpp:directive pos:start="1502:2" pos:end="1502:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1503:1" pos:end="1503:22">#<cpp:directive pos:start="1503:2" pos:end="1503:6">ifdef</cpp:directive> <name pos:start="1503:8" pos:end="1503:22">TARGET_NR_lstat</name></cpp:ifdef>
    <case pos:start="1504:5" pos:end="1504:25">case <expr pos:start="1504:10" pos:end="1504:24"><name pos:start="1504:10" pos:end="1504:24">TARGET_NR_lstat</name></expr>:</case>
        <if_stmt pos:start="1505:9" pos:end="1506:24"><if pos:start="1505:9" pos:end="1506:24">if <condition pos:start="1505:12" pos:end="1505:42">(<expr pos:start="1505:13" pos:end="1505:41"><operator pos:start="1505:13" pos:end="1505:13">!</operator><operator pos:start="1505:14" pos:end="1505:14">(</operator><name pos:start="1505:15" pos:end="1505:15">p</name> <operator pos:start="1505:17" pos:end="1505:17">=</operator> <call pos:start="1505:19" pos:end="1505:40"><name pos:start="1505:19" pos:end="1505:34">lock_user_string</name><argument_list pos:start="1505:35" pos:end="1505:40">(<argument pos:start="1505:36" pos:end="1505:39"><expr pos:start="1505:36" pos:end="1505:39"><name pos:start="1505:36" pos:end="1505:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1505:41" pos:end="1505:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1506:13" pos:end="1506:24"><block_content pos:start="1506:13" pos:end="1506:24">
            <goto pos:start="1506:13" pos:end="1506:24">goto <name pos:start="1506:18" pos:end="1506:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1507:9" pos:end="1507:45"><expr pos:start="1507:9" pos:end="1507:44"><name pos:start="1507:9" pos:end="1507:11">ret</name> <operator pos:start="1507:13" pos:end="1507:13">=</operator> <call pos:start="1507:15" pos:end="1507:44"><name pos:start="1507:15" pos:end="1507:23">get_errno</name><argument_list pos:start="1507:24" pos:end="1507:44">(<argument pos:start="1507:25" pos:end="1507:43"><expr pos:start="1507:25" pos:end="1507:43"><call pos:start="1507:25" pos:end="1507:43"><name pos:start="1507:25" pos:end="1507:29">lstat</name><argument_list pos:start="1507:30" pos:end="1507:43">(<argument pos:start="1507:31" pos:end="1507:37"><expr pos:start="1507:31" pos:end="1507:37"><call pos:start="1507:31" pos:end="1507:37"><name pos:start="1507:31" pos:end="1507:34">path</name><argument_list pos:start="1507:35" pos:end="1507:37">(<argument pos:start="1507:36" pos:end="1507:36"><expr pos:start="1507:36" pos:end="1507:36"><name pos:start="1507:36" pos:end="1507:36">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1507:40" pos:end="1507:42"><expr pos:start="1507:40" pos:end="1507:42"><operator pos:start="1507:40" pos:end="1507:40">&amp;</operator><name pos:start="1507:41" pos:end="1507:42">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1508:9" pos:end="1508:32"><expr pos:start="1508:9" pos:end="1508:31"><call pos:start="1508:9" pos:end="1508:31"><name pos:start="1508:9" pos:end="1508:19">unlock_user</name><argument_list pos:start="1508:20" pos:end="1508:31">(<argument pos:start="1508:21" pos:end="1508:21"><expr pos:start="1508:21" pos:end="1508:21"><name pos:start="1508:21" pos:end="1508:21">p</name></expr></argument>, <argument pos:start="1508:24" pos:end="1508:27"><expr pos:start="1508:24" pos:end="1508:27"><name pos:start="1508:24" pos:end="1508:27">arg1</name></expr></argument>, <argument pos:start="1508:30" pos:end="1508:30"><expr pos:start="1508:30" pos:end="1508:30"><literal type="number" pos:start="1508:30" pos:end="1508:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1509:9" pos:end="1511:0">goto <name pos:start="1509:14" pos:end="1509:20">do_stat</name>;</goto>
<cpp:endif pos:start="1510:1" pos:end="1510:6">#<cpp:directive pos:start="1510:2" pos:end="1510:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1511:5" pos:end="1511:25">case <expr pos:start="1511:10" pos:end="1511:24"><name pos:start="1511:10" pos:end="1511:24">TARGET_NR_fstat</name></expr>:</case>
        <block pos:start="1512:9" pos:end="3541:14">{<block_content pos:start="1513:13" pos:end="3541:14">
            <expr_stmt pos:start="1513:13" pos:end="1515:0"><expr pos:start="1513:13" pos:end="1513:45"><name pos:start="1513:13" pos:end="1513:15">ret</name> <operator pos:start="1513:17" pos:end="1513:17">=</operator> <call pos:start="1513:19" pos:end="1513:45"><name pos:start="1513:19" pos:end="1513:27">get_errno</name><argument_list pos:start="1513:28" pos:end="1513:45">(<argument pos:start="1513:29" pos:end="1513:44"><expr pos:start="1513:29" pos:end="1513:44"><call pos:start="1513:29" pos:end="1513:44"><name pos:start="1513:29" pos:end="1513:33">fstat</name><argument_list pos:start="1513:34" pos:end="1513:44">(<argument pos:start="1513:35" pos:end="1513:38"><expr pos:start="1513:35" pos:end="1513:38"><name pos:start="1513:35" pos:end="1513:38">arg1</name></expr></argument>, <argument pos:start="1513:41" pos:end="1513:43"><expr pos:start="1513:41" pos:end="1513:43"><operator pos:start="1513:41" pos:end="1513:41">&amp;</operator><name pos:start="1513:42" pos:end="1513:43">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="1514:1" pos:end="1514:55">#<cpp:directive pos:start="1514:2" pos:end="1514:3">if</cpp:directive> <expr pos:start="1514:5" pos:end="1514:55"><call pos:start="1514:5" pos:end="1514:27"><name pos:start="1514:5" pos:end="1514:11">defined</name><argument_list pos:start="1514:12" pos:end="1514:27">(<argument pos:start="1514:13" pos:end="1514:26"><expr pos:start="1514:13" pos:end="1514:26"><name pos:start="1514:13" pos:end="1514:26">TARGET_NR_stat</name></expr></argument>)</argument_list></call> <operator pos:start="1514:29" pos:end="1514:30">||</operator> <call pos:start="1514:32" pos:end="1514:55"><name pos:start="1514:32" pos:end="1514:38">defined</name><argument_list pos:start="1514:39" pos:end="1514:55">(<argument pos:start="1514:40" pos:end="1514:54"><expr pos:start="1514:40" pos:end="1514:54"><name pos:start="1514:40" pos:end="1514:54">TARGET_NR_lstat</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <label pos:start="1515:9" pos:end="1517:0"><name pos:start="1515:9" pos:end="1515:15">do_stat</name>:</label>
<cpp:endif pos:start="1516:1" pos:end="1516:6">#<cpp:directive pos:start="1516:2" pos:end="1516:6">endif</cpp:directive></cpp:endif>
            <if_stmt pos:start="1517:13" pos:end="3541:14"><if pos:start="1517:13" pos:end="3541:14">if <condition pos:start="1517:16" pos:end="1517:31">(<expr pos:start="1517:17" pos:end="1517:30"><operator pos:start="1517:17" pos:end="1517:17">!</operator><call pos:start="1517:18" pos:end="1517:30"><name pos:start="1517:18" pos:end="1517:25">is_error</name><argument_list pos:start="1517:26" pos:end="1517:30">(<argument pos:start="1517:27" pos:end="1517:29"><expr pos:start="1517:27" pos:end="1517:29"><name pos:start="1517:27" pos:end="1517:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1517:33" pos:end="3541:14">{<block_content pos:start="1518:17" pos:end="3541:14">
                <decl_stmt pos:start="1518:17" pos:end="1518:46"><decl pos:start="1518:17" pos:end="1518:45"><type pos:start="1518:17" pos:end="1518:36"><name pos:start="1518:17" pos:end="1518:34"><name pos:start="1518:17" pos:end="1518:22">struct</name> <name pos:start="1518:24" pos:end="1518:34">target_stat</name></name> <modifier pos:start="1518:36" pos:end="1518:36">*</modifier></type><name pos:start="1518:37" pos:end="1518:45">target_st</name></decl>;</decl_stmt>
                <if_stmt pos:start="1519:17" pos:end="1520:32"><if pos:start="1519:17" pos:end="1520:32">if <condition pos:start="1519:20" pos:end="1519:72">(<expr pos:start="1519:21" pos:end="1519:71"><operator pos:start="1519:21" pos:end="1519:21">!</operator><call pos:start="1519:22" pos:end="1519:71"><name pos:start="1519:22" pos:end="1519:37">lock_user_struct</name><argument_list pos:start="1519:38" pos:end="1519:71">(<argument pos:start="1519:39" pos:end="1519:50"><expr pos:start="1519:39" pos:end="1519:50"><name pos:start="1519:39" pos:end="1519:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1519:53" pos:end="1519:61"><expr pos:start="1519:53" pos:end="1519:61"><name pos:start="1519:53" pos:end="1519:61">target_st</name></expr></argument>, <argument pos:start="1519:64" pos:end="1519:67"><expr pos:start="1519:64" pos:end="1519:67"><name pos:start="1519:64" pos:end="1519:67">arg2</name></expr></argument>, <argument pos:start="1519:70" pos:end="1519:70"><expr pos:start="1519:70" pos:end="1519:70"><literal type="number" pos:start="1519:70" pos:end="1519:70">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1520:21" pos:end="1520:32"><block_content pos:start="1520:21" pos:end="1520:32">
                    <goto pos:start="1520:21" pos:end="1520:32">goto <name pos:start="1520:26" pos:end="1520:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="1521:17" pos:end="1521:57"><expr pos:start="1521:17" pos:end="1521:56"><call pos:start="1521:17" pos:end="1521:56"><name pos:start="1521:17" pos:end="1521:22">memset</name><argument_list pos:start="1521:23" pos:end="1521:56">(<argument pos:start="1521:24" pos:end="1521:32"><expr pos:start="1521:24" pos:end="1521:32"><name pos:start="1521:24" pos:end="1521:32">target_st</name></expr></argument>, <argument pos:start="1521:35" pos:end="1521:35"><expr pos:start="1521:35" pos:end="1521:35"><literal type="number" pos:start="1521:35" pos:end="1521:35">0</literal></expr></argument>, <argument pos:start="1521:38" pos:end="1521:55"><expr pos:start="1521:38" pos:end="1521:55"><sizeof pos:start="1521:38" pos:end="1521:55">sizeof<argument_list pos:start="1521:44" pos:end="1521:55">(<argument pos:start="1521:45" pos:end="1521:54"><expr pos:start="1521:45" pos:end="1521:54"><operator pos:start="1521:45" pos:end="1521:45">*</operator><name pos:start="1521:46" pos:end="1521:54">target_st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1522:17" pos:end="1522:58"><expr pos:start="1522:17" pos:end="1522:57"><call pos:start="1522:17" pos:end="1522:57"><name pos:start="1522:17" pos:end="1522:26">__put_user</name><argument_list pos:start="1522:27" pos:end="1522:57">(<argument pos:start="1522:28" pos:end="1522:36"><expr pos:start="1522:28" pos:end="1522:36"><name pos:start="1522:28" pos:end="1522:36"><name pos:start="1522:28" pos:end="1522:29">st</name><operator pos:start="1522:30" pos:end="1522:30">.</operator><name pos:start="1522:31" pos:end="1522:36">st_dev</name></name></expr></argument>, <argument pos:start="1522:39" pos:end="1522:56"><expr pos:start="1522:39" pos:end="1522:56"><operator pos:start="1522:39" pos:end="1522:39">&amp;</operator><name pos:start="1522:40" pos:end="1522:56"><name pos:start="1522:40" pos:end="1522:48">target_st</name><operator pos:start="1522:49" pos:end="1522:50">-&gt;</operator><name pos:start="1522:51" pos:end="1522:56">st_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1523:17" pos:end="1523:58"><expr pos:start="1523:17" pos:end="1523:57"><call pos:start="1523:17" pos:end="1523:57"><name pos:start="1523:17" pos:end="1523:26">__put_user</name><argument_list pos:start="1523:27" pos:end="1523:57">(<argument pos:start="1523:28" pos:end="1523:36"><expr pos:start="1523:28" pos:end="1523:36"><name pos:start="1523:28" pos:end="1523:36"><name pos:start="1523:28" pos:end="1523:29">st</name><operator pos:start="1523:30" pos:end="1523:30">.</operator><name pos:start="1523:31" pos:end="1523:36">st_ino</name></name></expr></argument>, <argument pos:start="1523:39" pos:end="1523:56"><expr pos:start="1523:39" pos:end="1523:56"><operator pos:start="1523:39" pos:end="1523:39">&amp;</operator><name pos:start="1523:40" pos:end="1523:56"><name pos:start="1523:40" pos:end="1523:48">target_st</name><operator pos:start="1523:49" pos:end="1523:50">-&gt;</operator><name pos:start="1523:51" pos:end="1523:56">st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1524:17" pos:end="1524:60"><expr pos:start="1524:17" pos:end="1524:59"><call pos:start="1524:17" pos:end="1524:59"><name pos:start="1524:17" pos:end="1524:26">__put_user</name><argument_list pos:start="1524:27" pos:end="1524:59">(<argument pos:start="1524:28" pos:end="1524:37"><expr pos:start="1524:28" pos:end="1524:37"><name pos:start="1524:28" pos:end="1524:37"><name pos:start="1524:28" pos:end="1524:29">st</name><operator pos:start="1524:30" pos:end="1524:30">.</operator><name pos:start="1524:31" pos:end="1524:37">st_mode</name></name></expr></argument>, <argument pos:start="1524:40" pos:end="1524:58"><expr pos:start="1524:40" pos:end="1524:58"><operator pos:start="1524:40" pos:end="1524:40">&amp;</operator><name pos:start="1524:41" pos:end="1524:58"><name pos:start="1524:41" pos:end="1524:49">target_st</name><operator pos:start="1524:50" pos:end="1524:51">-&gt;</operator><name pos:start="1524:52" pos:end="1524:58">st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1525:17" pos:end="1525:58"><expr pos:start="1525:17" pos:end="1525:57"><call pos:start="1525:17" pos:end="1525:57"><name pos:start="1525:17" pos:end="1525:26">__put_user</name><argument_list pos:start="1525:27" pos:end="1525:57">(<argument pos:start="1525:28" pos:end="1525:36"><expr pos:start="1525:28" pos:end="1525:36"><name pos:start="1525:28" pos:end="1525:36"><name pos:start="1525:28" pos:end="1525:29">st</name><operator pos:start="1525:30" pos:end="1525:30">.</operator><name pos:start="1525:31" pos:end="1525:36">st_uid</name></name></expr></argument>, <argument pos:start="1525:39" pos:end="1525:56"><expr pos:start="1525:39" pos:end="1525:56"><operator pos:start="1525:39" pos:end="1525:39">&amp;</operator><name pos:start="1525:40" pos:end="1525:56"><name pos:start="1525:40" pos:end="1525:48">target_st</name><operator pos:start="1525:49" pos:end="1525:50">-&gt;</operator><name pos:start="1525:51" pos:end="1525:56">st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1526:17" pos:end="1526:58"><expr pos:start="1526:17" pos:end="1526:57"><call pos:start="1526:17" pos:end="1526:57"><name pos:start="1526:17" pos:end="1526:26">__put_user</name><argument_list pos:start="1526:27" pos:end="1526:57">(<argument pos:start="1526:28" pos:end="1526:36"><expr pos:start="1526:28" pos:end="1526:36"><name pos:start="1526:28" pos:end="1526:36"><name pos:start="1526:28" pos:end="1526:29">st</name><operator pos:start="1526:30" pos:end="1526:30">.</operator><name pos:start="1526:31" pos:end="1526:36">st_gid</name></name></expr></argument>, <argument pos:start="1526:39" pos:end="1526:56"><expr pos:start="1526:39" pos:end="1526:56"><operator pos:start="1526:39" pos:end="1526:39">&amp;</operator><name pos:start="1526:40" pos:end="1526:56"><name pos:start="1526:40" pos:end="1526:48">target_st</name><operator pos:start="1526:49" pos:end="1526:50">-&gt;</operator><name pos:start="1526:51" pos:end="1526:56">st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1527:17" pos:end="1527:62"><expr pos:start="1527:17" pos:end="1527:61"><call pos:start="1527:17" pos:end="1527:61"><name pos:start="1527:17" pos:end="1527:26">__put_user</name><argument_list pos:start="1527:27" pos:end="1527:61">(<argument pos:start="1527:28" pos:end="1527:38"><expr pos:start="1527:28" pos:end="1527:38"><name pos:start="1527:28" pos:end="1527:38"><name pos:start="1527:28" pos:end="1527:29">st</name><operator pos:start="1527:30" pos:end="1527:30">.</operator><name pos:start="1527:31" pos:end="1527:38">st_nlink</name></name></expr></argument>, <argument pos:start="1527:41" pos:end="1527:60"><expr pos:start="1527:41" pos:end="1527:60"><operator pos:start="1527:41" pos:end="1527:41">&amp;</operator><name pos:start="1527:42" pos:end="1527:60"><name pos:start="1527:42" pos:end="1527:50">target_st</name><operator pos:start="1527:51" pos:end="1527:52">-&gt;</operator><name pos:start="1527:53" pos:end="1527:60">st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1528:17" pos:end="1528:60"><expr pos:start="1528:17" pos:end="1528:59"><call pos:start="1528:17" pos:end="1528:59"><name pos:start="1528:17" pos:end="1528:26">__put_user</name><argument_list pos:start="1528:27" pos:end="1528:59">(<argument pos:start="1528:28" pos:end="1528:37"><expr pos:start="1528:28" pos:end="1528:37"><name pos:start="1528:28" pos:end="1528:37"><name pos:start="1528:28" pos:end="1528:29">st</name><operator pos:start="1528:30" pos:end="1528:30">.</operator><name pos:start="1528:31" pos:end="1528:37">st_rdev</name></name></expr></argument>, <argument pos:start="1528:40" pos:end="1528:58"><expr pos:start="1528:40" pos:end="1528:58"><operator pos:start="1528:40" pos:end="1528:40">&amp;</operator><name pos:start="1528:41" pos:end="1528:58"><name pos:start="1528:41" pos:end="1528:49">target_st</name><operator pos:start="1528:50" pos:end="1528:51">-&gt;</operator><name pos:start="1528:52" pos:end="1528:58">st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1529:17" pos:end="1529:60"><expr pos:start="1529:17" pos:end="1529:59"><call pos:start="1529:17" pos:end="1529:59"><name pos:start="1529:17" pos:end="1529:26">__put_user</name><argument_list pos:start="1529:27" pos:end="1529:59">(<argument pos:start="1529:28" pos:end="1529:37"><expr pos:start="1529:28" pos:end="1529:37"><name pos:start="1529:28" pos:end="1529:37"><name pos:start="1529:28" pos:end="1529:29">st</name><operator pos:start="1529:30" pos:end="1529:30">.</operator><name pos:start="1529:31" pos:end="1529:37">st_size</name></name></expr></argument>, <argument pos:start="1529:40" pos:end="1529:58"><expr pos:start="1529:40" pos:end="1529:58"><operator pos:start="1529:40" pos:end="1529:40">&amp;</operator><name pos:start="1529:41" pos:end="1529:58"><name pos:start="1529:41" pos:end="1529:49">target_st</name><operator pos:start="1529:50" pos:end="1529:51">-&gt;</operator><name pos:start="1529:52" pos:end="1529:58">st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1530:17" pos:end="1530:66"><expr pos:start="1530:17" pos:end="1530:65"><call pos:start="1530:17" pos:end="1530:65"><name pos:start="1530:17" pos:end="1530:26">__put_user</name><argument_list pos:start="1530:27" pos:end="1530:65">(<argument pos:start="1530:28" pos:end="1530:40"><expr pos:start="1530:28" pos:end="1530:40"><name pos:start="1530:28" pos:end="1530:40"><name pos:start="1530:28" pos:end="1530:29">st</name><operator pos:start="1530:30" pos:end="1530:30">.</operator><name pos:start="1530:31" pos:end="1530:40">st_blksize</name></name></expr></argument>, <argument pos:start="1530:43" pos:end="1530:64"><expr pos:start="1530:43" pos:end="1530:64"><operator pos:start="1530:43" pos:end="1530:43">&amp;</operator><name pos:start="1530:44" pos:end="1530:64"><name pos:start="1530:44" pos:end="1530:52">target_st</name><operator pos:start="1530:53" pos:end="1530:54">-&gt;</operator><name pos:start="1530:55" pos:end="1530:64">st_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1531:17" pos:end="1531:64"><expr pos:start="1531:17" pos:end="1531:63"><call pos:start="1531:17" pos:end="1531:63"><name pos:start="1531:17" pos:end="1531:26">__put_user</name><argument_list pos:start="1531:27" pos:end="1531:63">(<argument pos:start="1531:28" pos:end="1531:39"><expr pos:start="1531:28" pos:end="1531:39"><name pos:start="1531:28" pos:end="1531:39"><name pos:start="1531:28" pos:end="1531:29">st</name><operator pos:start="1531:30" pos:end="1531:30">.</operator><name pos:start="1531:31" pos:end="1531:39">st_blocks</name></name></expr></argument>, <argument pos:start="1531:42" pos:end="1531:62"><expr pos:start="1531:42" pos:end="1531:62"><operator pos:start="1531:42" pos:end="1531:42">&amp;</operator><name pos:start="1531:43" pos:end="1531:62"><name pos:start="1531:43" pos:end="1531:51">target_st</name><operator pos:start="1531:52" pos:end="1531:53">-&gt;</operator><name pos:start="1531:54" pos:end="1531:62">st_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1532:17" pos:end="1532:69"><expr pos:start="1532:17" pos:end="1532:68"><call pos:start="1532:17" pos:end="1532:68"><name pos:start="1532:17" pos:end="1532:26">__put_user</name><argument_list pos:start="1532:27" pos:end="1532:68">(<argument pos:start="1532:28" pos:end="1532:38"><expr pos:start="1532:28" pos:end="1532:38"><name pos:start="1532:28" pos:end="1532:38"><name pos:start="1532:28" pos:end="1532:29">st</name><operator pos:start="1532:30" pos:end="1532:30">.</operator><name pos:start="1532:31" pos:end="1532:38">st_atime</name></name></expr></argument>, <argument pos:start="1532:41" pos:end="1532:67"><expr pos:start="1532:41" pos:end="1532:67"><operator pos:start="1532:41" pos:end="1532:41">&amp;</operator><name pos:start="1532:42" pos:end="1532:67"><name pos:start="1532:42" pos:end="1532:50">target_st</name><operator pos:start="1532:51" pos:end="1532:52">-&gt;</operator><name pos:start="1532:53" pos:end="1532:67">target_st_atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1533:17" pos:end="1533:69"><expr pos:start="1533:17" pos:end="1533:68"><call pos:start="1533:17" pos:end="1533:68"><name pos:start="1533:17" pos:end="1533:26">__put_user</name><argument_list pos:start="1533:27" pos:end="1533:68">(<argument pos:start="1533:28" pos:end="1533:38"><expr pos:start="1533:28" pos:end="1533:38"><name pos:start="1533:28" pos:end="1533:38"><name pos:start="1533:28" pos:end="1533:29">st</name><operator pos:start="1533:30" pos:end="1533:30">.</operator><name pos:start="1533:31" pos:end="1533:38">st_mtime</name></name></expr></argument>, <argument pos:start="1533:41" pos:end="1533:67"><expr pos:start="1533:41" pos:end="1533:67"><operator pos:start="1533:41" pos:end="1533:41">&amp;</operator><name pos:start="1533:42" pos:end="1533:67"><name pos:start="1533:42" pos:end="1533:50">target_st</name><operator pos:start="1533:51" pos:end="1533:52">-&gt;</operator><name pos:start="1533:53" pos:end="1533:67">target_st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1534:17" pos:end="1534:69"><expr pos:start="1534:17" pos:end="1534:68"><call pos:start="1534:17" pos:end="1534:68"><name pos:start="1534:17" pos:end="1534:26">__put_user</name><argument_list pos:start="1534:27" pos:end="1534:68">(<argument pos:start="1534:28" pos:end="1534:38"><expr pos:start="1534:28" pos:end="1534:38"><name pos:start="1534:28" pos:end="1534:38"><name pos:start="1534:28" pos:end="1534:29">st</name><operator pos:start="1534:30" pos:end="1534:30">.</operator><name pos:start="1534:31" pos:end="1534:38">st_ctime</name></name></expr></argument>, <argument pos:start="1534:41" pos:end="1534:67"><expr pos:start="1534:41" pos:end="1534:67"><operator pos:start="1534:41" pos:end="1534:41">&amp;</operator><name pos:start="1534:42" pos:end="1534:67"><name pos:start="1534:42" pos:end="1534:50">target_st</name><operator pos:start="1534:51" pos:end="1534:52">-&gt;</operator><name pos:start="1534:53" pos:end="1534:67">target_st_ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1535:17" pos:end="1537:0"><expr pos:start="1535:17" pos:end="1535:54"><call pos:start="1535:17" pos:end="1535:54"><name pos:start="1535:17" pos:end="1535:34">unlock_user_struct</name><argument_list pos:start="1535:35" pos:end="1535:54">(<argument pos:start="1535:36" pos:end="1535:44"><expr pos:start="1535:36" pos:end="1535:44"><name pos:start="1535:36" pos:end="1535:44">target_st</name></expr></argument>, <argument pos:start="1535:47" pos:end="1535:50"><expr pos:start="1535:47" pos:end="1535:50"><name pos:start="1535:47" pos:end="1535:50">arg2</name></expr></argument>, <argument pos:start="1535:53" pos:end="1535:53"><expr pos:start="1535:53" pos:end="1535:53"><literal type="number" pos:start="1535:53" pos:end="1535:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1536:1" pos:end="1536:25">#<cpp:directive pos:start="1536:2" pos:end="1536:6">ifdef</cpp:directive> <name pos:start="1536:8" pos:end="1536:25">TARGET_NR_olduname</name></cpp:ifdef>
    <case pos:start="1537:5" pos:end="1537:28">case <expr pos:start="1537:10" pos:end="1537:27"><name pos:start="1537:10" pos:end="1537:27">TARGET_NR_olduname</name></expr>:</case>
        <goto pos:start="1538:9" pos:end="1541:0">goto <name pos:start="1538:14" pos:end="1538:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1539:1" pos:end="1539:6">#<cpp:directive pos:start="1539:2" pos:end="1539:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1540:1" pos:end="1540:21">#<cpp:directive pos:start="1540:2" pos:end="1540:6">ifdef</cpp:directive> <name pos:start="1540:8" pos:end="1540:21">TARGET_NR_iopl</name></cpp:ifdef>
    <case pos:start="1541:5" pos:end="1541:24">case <expr pos:start="1541:10" pos:end="1541:23"><name pos:start="1541:10" pos:end="1541:23">TARGET_NR_iopl</name></expr>:</case>
        <goto pos:start="1542:9" pos:end="1544:0">goto <name pos:start="1542:14" pos:end="1542:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1543:1" pos:end="1543:6">#<cpp:directive pos:start="1543:2" pos:end="1543:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1544:5" pos:end="1544:27">case <expr pos:start="1544:10" pos:end="1544:26"><name pos:start="1544:10" pos:end="1544:26">TARGET_NR_vhangup</name></expr>:</case>
        <expr_stmt pos:start="1545:9" pos:end="1547:0"><expr pos:start="1545:9" pos:end="1545:34"><name pos:start="1545:9" pos:end="1545:11">ret</name> <operator pos:start="1545:13" pos:end="1545:13">=</operator> <call pos:start="1545:15" pos:end="1545:34"><name pos:start="1545:15" pos:end="1545:23">get_errno</name><argument_list pos:start="1545:24" pos:end="1545:34">(<argument pos:start="1545:25" pos:end="1545:33"><expr pos:start="1545:25" pos:end="1545:33"><call pos:start="1545:25" pos:end="1545:33"><name pos:start="1545:25" pos:end="1545:31">vhangup</name><argument_list pos:start="1545:32" pos:end="1545:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1546:1" pos:end="1546:21">#<cpp:directive pos:start="1546:2" pos:end="1546:6">ifdef</cpp:directive> <name pos:start="1546:8" pos:end="1546:21">TARGET_NR_idle</name></cpp:ifdef>
    <case pos:start="1547:5" pos:end="1547:24">case <expr pos:start="1547:10" pos:end="1547:23"><name pos:start="1547:10" pos:end="1547:23">TARGET_NR_idle</name></expr>:</case>
        <goto pos:start="1548:9" pos:end="1551:0">goto <name pos:start="1548:14" pos:end="1548:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1549:1" pos:end="1549:6">#<cpp:directive pos:start="1549:2" pos:end="1549:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1550:1" pos:end="1550:24">#<cpp:directive pos:start="1550:2" pos:end="1550:6">ifdef</cpp:directive> <name pos:start="1550:8" pos:end="1550:24">TARGET_NR_syscall</name></cpp:ifdef>
    <case pos:start="1551:5" pos:end="1551:27">case <expr pos:start="1551:10" pos:end="1551:26"><name pos:start="1551:10" pos:end="1551:26">TARGET_NR_syscall</name></expr>:</case>
        <expr_stmt pos:start="1552:9" pos:end="1555:0"><expr pos:start="1552:9" pos:end="1553:45"><name pos:start="1552:9" pos:end="1552:11">ret</name> <operator pos:start="1552:13" pos:end="1552:13">=</operator> <call pos:start="1552:15" pos:end="1553:45"><name pos:start="1552:15" pos:end="1552:24">do_syscall</name><argument_list pos:start="1552:25" pos:end="1553:45">(<argument pos:start="1552:26" pos:end="1552:32"><expr pos:start="1552:26" pos:end="1552:32"><name pos:start="1552:26" pos:end="1552:32">cpu_env</name></expr></argument>, <argument pos:start="1552:35" pos:end="1552:47"><expr pos:start="1552:35" pos:end="1552:47"><name pos:start="1552:35" pos:end="1552:38">arg1</name> <operator pos:start="1552:40" pos:end="1552:40">&amp;</operator> <literal type="number" pos:start="1552:42" pos:end="1552:47">0xffff</literal></expr></argument>, <argument pos:start="1552:50" pos:end="1552:53"><expr pos:start="1552:50" pos:end="1552:53"><name pos:start="1552:50" pos:end="1552:53">arg2</name></expr></argument>, <argument pos:start="1552:56" pos:end="1552:59"><expr pos:start="1552:56" pos:end="1552:59"><name pos:start="1552:56" pos:end="1552:59">arg3</name></expr></argument>, <argument pos:start="1552:62" pos:end="1552:65"><expr pos:start="1552:62" pos:end="1552:65"><name pos:start="1552:62" pos:end="1552:65">arg4</name></expr></argument>, <argument pos:start="1552:68" pos:end="1552:71"><expr pos:start="1552:68" pos:end="1552:71"><name pos:start="1552:68" pos:end="1552:71">arg5</name></expr></argument>,
                         <argument pos:start="1553:26" pos:end="1553:29"><expr pos:start="1553:26" pos:end="1553:29"><name pos:start="1553:26" pos:end="1553:29">arg6</name></expr></argument>, <argument pos:start="1553:32" pos:end="1553:35"><expr pos:start="1553:32" pos:end="1553:35"><name pos:start="1553:32" pos:end="1553:35">arg7</name></expr></argument>, <argument pos:start="1553:38" pos:end="1553:41"><expr pos:start="1553:38" pos:end="1553:41"><name pos:start="1553:38" pos:end="1553:41">arg8</name></expr></argument>, <argument pos:start="1553:44" pos:end="1553:44"><expr pos:start="1553:44" pos:end="1553:44"><literal type="number" pos:start="1553:44" pos:end="1553:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1554:1" pos:end="1554:6">#<cpp:directive pos:start="1554:2" pos:end="1554:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1555:5" pos:end="1555:25">case <expr pos:start="1555:10" pos:end="1555:24"><name pos:start="1555:10" pos:end="1555:24">TARGET_NR_wait4</name></expr>:</case>
        <block pos:start="1556:9" pos:end="3541:14">{<block_content pos:start="1557:13" pos:end="3541:14">
            <decl_stmt pos:start="1557:13" pos:end="1557:23"><decl pos:start="1557:13" pos:end="1557:22"><type pos:start="1557:13" pos:end="1557:15"><name pos:start="1557:13" pos:end="1557:15">int</name></type> <name pos:start="1557:17" pos:end="1557:22">status</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1558:13" pos:end="1558:39"><decl pos:start="1558:13" pos:end="1558:38"><type pos:start="1558:13" pos:end="1558:20"><name pos:start="1558:13" pos:end="1558:20">abi_long</name></type> <name pos:start="1558:22" pos:end="1558:31">status_ptr</name> <init pos:start="1558:33" pos:end="1558:38">= <expr pos:start="1558:35" pos:end="1558:38"><name pos:start="1558:35" pos:end="1558:38">arg2</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="1559:13" pos:end="1559:46"><decl pos:start="1559:13" pos:end="1559:32"><type pos:start="1559:13" pos:end="1559:25"><name pos:start="1559:13" pos:end="1559:25"><name pos:start="1559:13" pos:end="1559:18">struct</name> <name pos:start="1559:20" pos:end="1559:25">rusage</name></name></type> <name pos:start="1559:27" pos:end="1559:32">rusage</name></decl>, <decl pos:start="1559:35" pos:end="1559:45"><type ref="prev" pos:start="1559:13" pos:end="1559:25"><modifier pos:start="1559:35" pos:end="1559:35">*</modifier></type><name pos:start="1559:36" pos:end="1559:45">rusage_ptr</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1560:13" pos:end="1560:43"><decl pos:start="1560:13" pos:end="1560:42"><type pos:start="1560:13" pos:end="1560:21"><name pos:start="1560:13" pos:end="1560:21">abi_ulong</name></type> <name pos:start="1560:23" pos:end="1560:35">target_rusage</name> <init pos:start="1560:37" pos:end="1560:42">= <expr pos:start="1560:39" pos:end="1560:42"><name pos:start="1560:39" pos:end="1560:42">arg4</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="1561:13" pos:end="1561:32"><decl pos:start="1561:13" pos:end="1561:31"><type pos:start="1561:13" pos:end="1561:20"><name pos:start="1561:13" pos:end="1561:20">abi_long</name></type> <name pos:start="1561:22" pos:end="1561:31">rusage_err</name></decl>;</decl_stmt>
            <if_stmt pos:start="1562:13" pos:end="1565:34"><if pos:start="1562:13" pos:end="1563:37">if <condition pos:start="1562:16" pos:end="1562:30">(<expr pos:start="1562:17" pos:end="1562:29"><name pos:start="1562:17" pos:end="1562:29">target_rusage</name></expr>)</condition><block type="pseudo" pos:start="1563:17" pos:end="1563:37"><block_content pos:start="1563:17" pos:end="1563:37">
                <expr_stmt pos:start="1563:17" pos:end="1563:37"><expr pos:start="1563:17" pos:end="1563:36"><name pos:start="1563:17" pos:end="1563:26">rusage_ptr</name> <operator pos:start="1563:28" pos:end="1563:28">=</operator> <operator pos:start="1563:30" pos:end="1563:30">&amp;</operator><name pos:start="1563:31" pos:end="1563:36">rusage</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1564:13" pos:end="1565:34">else<block type="pseudo" pos:start="1565:17" pos:end="1565:34"><block_content pos:start="1565:17" pos:end="1565:34">
                <expr_stmt pos:start="1565:17" pos:end="1565:34"><expr pos:start="1565:17" pos:end="1565:33"><name pos:start="1565:17" pos:end="1565:26">rusage_ptr</name> <operator pos:start="1565:28" pos:end="1565:28">=</operator> <name pos:start="1565:30" pos:end="1565:33">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="1566:13" pos:end="1566:73"><expr pos:start="1566:13" pos:end="1566:72"><name pos:start="1566:13" pos:end="1566:15">ret</name> <operator pos:start="1566:17" pos:end="1566:17">=</operator> <call pos:start="1566:19" pos:end="1566:72"><name pos:start="1566:19" pos:end="1566:27">get_errno</name><argument_list pos:start="1566:28" pos:end="1566:72">(<argument pos:start="1566:29" pos:end="1566:71"><expr pos:start="1566:29" pos:end="1566:71"><call pos:start="1566:29" pos:end="1566:71"><name pos:start="1566:29" pos:end="1566:38">safe_wait4</name><argument_list pos:start="1566:39" pos:end="1566:71">(<argument pos:start="1566:40" pos:end="1566:43"><expr pos:start="1566:40" pos:end="1566:43"><name pos:start="1566:40" pos:end="1566:43">arg1</name></expr></argument>, <argument pos:start="1566:46" pos:end="1566:52"><expr pos:start="1566:46" pos:end="1566:52"><operator pos:start="1566:46" pos:end="1566:46">&amp;</operator><name pos:start="1566:47" pos:end="1566:52">status</name></expr></argument>, <argument pos:start="1566:55" pos:end="1566:58"><expr pos:start="1566:55" pos:end="1566:58"><name pos:start="1566:55" pos:end="1566:58">arg3</name></expr></argument>, <argument pos:start="1566:61" pos:end="1566:70"><expr pos:start="1566:61" pos:end="1566:70"><name pos:start="1566:61" pos:end="1566:70">rusage_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1567:13" pos:end="3541:14"><if pos:start="1567:13" pos:end="3541:14">if <condition pos:start="1567:16" pos:end="1567:31">(<expr pos:start="1567:17" pos:end="1567:30"><operator pos:start="1567:17" pos:end="1567:17">!</operator><call pos:start="1567:18" pos:end="1567:30"><name pos:start="1567:18" pos:end="1567:25">is_error</name><argument_list pos:start="1567:26" pos:end="1567:30">(<argument pos:start="1567:27" pos:end="1567:29"><expr pos:start="1567:27" pos:end="1567:29"><name pos:start="1567:27" pos:end="1567:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1567:33" pos:end="3541:14">{<block_content pos:start="1568:17" pos:end="3541:14">
                <if_stmt pos:start="1568:17" pos:end="3541:14"><if pos:start="1568:17" pos:end="3541:14">if <condition pos:start="1568:20" pos:end="1568:38">(<expr pos:start="1568:21" pos:end="1568:37"><name pos:start="1568:21" pos:end="1568:30">status_ptr</name> <operator pos:start="1568:32" pos:end="1568:33">&amp;&amp;</operator> <name pos:start="1568:35" pos:end="1568:37">ret</name></expr>)</condition> <block pos:start="1568:40" pos:end="3541:14">{<block_content pos:start="1569:21" pos:end="3541:14">
                    <expr_stmt pos:start="1569:21" pos:end="1569:63"><expr pos:start="1569:21" pos:end="1569:62"><name pos:start="1569:21" pos:end="1569:26">status</name> <operator pos:start="1569:28" pos:end="1569:28">=</operator> <call pos:start="1569:30" pos:end="1569:62"><name pos:start="1569:30" pos:end="1569:54">host_to_target_waitstatus</name><argument_list pos:start="1569:55" pos:end="1569:62">(<argument pos:start="1569:56" pos:end="1569:61"><expr pos:start="1569:56" pos:end="1569:61"><name pos:start="1569:56" pos:end="1569:61">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="1570:21" pos:end="1571:36"><if pos:start="1570:21" pos:end="1571:36">if <condition pos:start="1570:24" pos:end="1570:57">(<expr pos:start="1570:25" pos:end="1570:56"><call pos:start="1570:25" pos:end="1570:56"><name pos:start="1570:25" pos:end="1570:36">put_user_s32</name><argument_list pos:start="1570:37" pos:end="1570:56">(<argument pos:start="1570:38" pos:end="1570:43"><expr pos:start="1570:38" pos:end="1570:43"><name pos:start="1570:38" pos:end="1570:43">status</name></expr></argument>, <argument pos:start="1570:46" pos:end="1570:55"><expr pos:start="1570:46" pos:end="1570:55"><name pos:start="1570:46" pos:end="1570:55">status_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1571:25" pos:end="1571:36"><block_content pos:start="1571:25" pos:end="1571:36">
                        <goto pos:start="1571:25" pos:end="1571:36">goto <name pos:start="1571:30" pos:end="1571:35">efault</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="1572:17" pos:end="3541:14"><if pos:start="1572:17" pos:end="3541:14">if <condition pos:start="1572:20" pos:end="1572:34">(<expr pos:start="1572:21" pos:end="1572:33"><name pos:start="1572:21" pos:end="1572:33">target_rusage</name></expr>)</condition> <block pos:start="1572:36" pos:end="3541:14">{<block_content pos:start="1573:21" pos:end="3541:14">
                    <expr_stmt pos:start="1573:21" pos:end="1573:79"><expr pos:start="1573:21" pos:end="1573:78"><name pos:start="1573:21" pos:end="1573:30">rusage_err</name> <operator pos:start="1573:32" pos:end="1573:32">=</operator> <call pos:start="1573:34" pos:end="1573:78"><name pos:start="1573:34" pos:end="1573:54">host_to_target_rusage</name><argument_list pos:start="1573:55" pos:end="1573:78">(<argument pos:start="1573:56" pos:end="1573:68"><expr pos:start="1573:56" pos:end="1573:68"><name pos:start="1573:56" pos:end="1573:68">target_rusage</name></expr></argument>, <argument pos:start="1573:71" pos:end="1573:77"><expr pos:start="1573:71" pos:end="1573:77"><operator pos:start="1573:71" pos:end="1573:71">&amp;</operator><name pos:start="1573:72" pos:end="1573:77">rusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="1574:21" pos:end="3541:14"><if pos:start="1574:21" pos:end="3541:14">if <condition pos:start="1574:24" pos:end="1574:35">(<expr pos:start="1574:25" pos:end="1574:34"><name pos:start="1574:25" pos:end="1574:34">rusage_err</name></expr>)</condition> <block pos:start="1574:37" pos:end="3541:14">{<block_content pos:start="1575:25" pos:end="3541:14">
                        <expr_stmt pos:start="1575:25" pos:end="1577:0"><expr pos:start="1575:25" pos:end="1575:40"><name pos:start="1575:25" pos:end="1575:27">ret</name> <operator pos:start="1575:29" pos:end="1575:29">=</operator> <name pos:start="1575:31" pos:end="1575:40">rusage_err</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="1576:1" pos:end="1576:24">#<cpp:directive pos:start="1576:2" pos:end="1576:6">ifdef</cpp:directive> <name pos:start="1576:8" pos:end="1576:24">TARGET_NR_swapoff</name></cpp:ifdef>
    <case pos:start="1577:5" pos:end="1577:27">case <expr pos:start="1577:10" pos:end="1577:26"><name pos:start="1577:10" pos:end="1577:26">TARGET_NR_swapoff</name></expr>:</case>
        <if_stmt pos:start="1578:9" pos:end="1579:24"><if pos:start="1578:9" pos:end="1579:24">if <condition pos:start="1578:12" pos:end="1578:42">(<expr pos:start="1578:13" pos:end="1578:41"><operator pos:start="1578:13" pos:end="1578:13">!</operator><operator pos:start="1578:14" pos:end="1578:14">(</operator><name pos:start="1578:15" pos:end="1578:15">p</name> <operator pos:start="1578:17" pos:end="1578:17">=</operator> <call pos:start="1578:19" pos:end="1578:40"><name pos:start="1578:19" pos:end="1578:34">lock_user_string</name><argument_list pos:start="1578:35" pos:end="1578:40">(<argument pos:start="1578:36" pos:end="1578:39"><expr pos:start="1578:36" pos:end="1578:39"><name pos:start="1578:36" pos:end="1578:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1578:41" pos:end="1578:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1579:13" pos:end="1579:24"><block_content pos:start="1579:13" pos:end="1579:24">
            <goto pos:start="1579:13" pos:end="1579:24">goto <name pos:start="1579:18" pos:end="1579:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1580:9" pos:end="1580:36"><expr pos:start="1580:9" pos:end="1580:35"><name pos:start="1580:9" pos:end="1580:11">ret</name> <operator pos:start="1580:13" pos:end="1580:13">=</operator> <call pos:start="1580:15" pos:end="1580:35"><name pos:start="1580:15" pos:end="1580:23">get_errno</name><argument_list pos:start="1580:24" pos:end="1580:35">(<argument pos:start="1580:25" pos:end="1580:34"><expr pos:start="1580:25" pos:end="1580:34"><call pos:start="1580:25" pos:end="1580:34"><name pos:start="1580:25" pos:end="1580:31">swapoff</name><argument_list pos:start="1580:32" pos:end="1580:34">(<argument pos:start="1580:33" pos:end="1580:33"><expr pos:start="1580:33" pos:end="1580:33"><name pos:start="1580:33" pos:end="1580:33">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1581:9" pos:end="1583:0"><expr pos:start="1581:9" pos:end="1581:31"><call pos:start="1581:9" pos:end="1581:31"><name pos:start="1581:9" pos:end="1581:19">unlock_user</name><argument_list pos:start="1581:20" pos:end="1581:31">(<argument pos:start="1581:21" pos:end="1581:21"><expr pos:start="1581:21" pos:end="1581:21"><name pos:start="1581:21" pos:end="1581:21">p</name></expr></argument>, <argument pos:start="1581:24" pos:end="1581:27"><expr pos:start="1581:24" pos:end="1581:27"><name pos:start="1581:24" pos:end="1581:27">arg1</name></expr></argument>, <argument pos:start="1581:30" pos:end="1581:30"><expr pos:start="1581:30" pos:end="1581:30"><literal type="number" pos:start="1581:30" pos:end="1581:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1582:1" pos:end="1582:6">#<cpp:directive pos:start="1582:2" pos:end="1582:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1583:5" pos:end="1583:27">case <expr pos:start="1583:10" pos:end="1583:26"><name pos:start="1583:10" pos:end="1583:26">TARGET_NR_sysinfo</name></expr>:</case>
        <block pos:start="1584:9" pos:end="3541:14">{<block_content pos:start="1585:13" pos:end="3541:14">
            <decl_stmt pos:start="1585:13" pos:end="1585:48"><decl pos:start="1585:13" pos:end="1585:47"><type pos:start="1585:13" pos:end="1585:35"><name pos:start="1585:13" pos:end="1585:33"><name pos:start="1585:13" pos:end="1585:18">struct</name> <name pos:start="1585:20" pos:end="1585:33">target_sysinfo</name></name> <modifier pos:start="1585:35" pos:end="1585:35">*</modifier></type><name pos:start="1585:36" pos:end="1585:47">target_value</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1586:13" pos:end="1586:33"><decl pos:start="1586:13" pos:end="1586:32"><type pos:start="1586:13" pos:end="1586:26"><name pos:start="1586:13" pos:end="1586:26"><name pos:start="1586:13" pos:end="1586:18">struct</name> <name pos:start="1586:20" pos:end="1586:26">sysinfo</name></name></type> <name pos:start="1586:28" pos:end="1586:32">value</name></decl>;</decl_stmt>
            <expr_stmt pos:start="1587:13" pos:end="1587:45"><expr pos:start="1587:13" pos:end="1587:44"><name pos:start="1587:13" pos:end="1587:15">ret</name> <operator pos:start="1587:17" pos:end="1587:17">=</operator> <call pos:start="1587:19" pos:end="1587:44"><name pos:start="1587:19" pos:end="1587:27">get_errno</name><argument_list pos:start="1587:28" pos:end="1587:44">(<argument pos:start="1587:29" pos:end="1587:43"><expr pos:start="1587:29" pos:end="1587:43"><call pos:start="1587:29" pos:end="1587:43"><name pos:start="1587:29" pos:end="1587:35">sysinfo</name><argument_list pos:start="1587:36" pos:end="1587:43">(<argument pos:start="1587:37" pos:end="1587:42"><expr pos:start="1587:37" pos:end="1587:42"><operator pos:start="1587:37" pos:end="1587:37">&amp;</operator><name pos:start="1587:38" pos:end="1587:42">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1588:13" pos:end="3541:14"><if pos:start="1588:13" pos:end="3541:14">if <condition pos:start="1588:16" pos:end="1588:39">(<expr pos:start="1588:17" pos:end="1588:38"><operator pos:start="1588:17" pos:end="1588:17">!</operator><call pos:start="1588:18" pos:end="1588:30"><name pos:start="1588:18" pos:end="1588:25">is_error</name><argument_list pos:start="1588:26" pos:end="1588:30">(<argument pos:start="1588:27" pos:end="1588:29"><expr pos:start="1588:27" pos:end="1588:29"><name pos:start="1588:27" pos:end="1588:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1588:32" pos:end="1588:33">&amp;&amp;</operator> <name pos:start="1588:35" pos:end="1588:38">arg1</name></expr>)</condition>
            <block pos:start="1589:13" pos:end="3541:14">{<block_content pos:start="1590:17" pos:end="3541:14">
                <if_stmt pos:start="1590:17" pos:end="1591:32"><if pos:start="1590:17" pos:end="1591:32">if <condition pos:start="1590:20" pos:end="1590:75">(<expr pos:start="1590:21" pos:end="1590:74"><operator pos:start="1590:21" pos:end="1590:21">!</operator><call pos:start="1590:22" pos:end="1590:74"><name pos:start="1590:22" pos:end="1590:37">lock_user_struct</name><argument_list pos:start="1590:38" pos:end="1590:74">(<argument pos:start="1590:39" pos:end="1590:50"><expr pos:start="1590:39" pos:end="1590:50"><name pos:start="1590:39" pos:end="1590:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1590:53" pos:end="1590:64"><expr pos:start="1590:53" pos:end="1590:64"><name pos:start="1590:53" pos:end="1590:64">target_value</name></expr></argument>, <argument pos:start="1590:67" pos:end="1590:70"><expr pos:start="1590:67" pos:end="1590:70"><name pos:start="1590:67" pos:end="1590:70">arg1</name></expr></argument>, <argument pos:start="1590:73" pos:end="1590:73"><expr pos:start="1590:73" pos:end="1590:73"><literal type="number" pos:start="1590:73" pos:end="1590:73">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1591:21" pos:end="1591:32"><block_content pos:start="1591:21" pos:end="1591:32">
                    <goto pos:start="1591:21" pos:end="1591:32">goto <name pos:start="1591:26" pos:end="1591:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="1592:17" pos:end="1592:64"><expr pos:start="1592:17" pos:end="1592:63"><call pos:start="1592:17" pos:end="1592:63"><name pos:start="1592:17" pos:end="1592:26">__put_user</name><argument_list pos:start="1592:27" pos:end="1592:63">(<argument pos:start="1592:28" pos:end="1592:39"><expr pos:start="1592:28" pos:end="1592:39"><name pos:start="1592:28" pos:end="1592:39"><name pos:start="1592:28" pos:end="1592:32">value</name><operator pos:start="1592:33" pos:end="1592:33">.</operator><name pos:start="1592:34" pos:end="1592:39">uptime</name></name></expr></argument>, <argument pos:start="1592:42" pos:end="1592:62"><expr pos:start="1592:42" pos:end="1592:62"><operator pos:start="1592:42" pos:end="1592:42">&amp;</operator><name pos:start="1592:43" pos:end="1592:62"><name pos:start="1592:43" pos:end="1592:54">target_value</name><operator pos:start="1592:55" pos:end="1592:56">-&gt;</operator><name pos:start="1592:57" pos:end="1592:62">uptime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1593:17" pos:end="1593:68"><expr pos:start="1593:17" pos:end="1593:67"><call pos:start="1593:17" pos:end="1593:67"><name pos:start="1593:17" pos:end="1593:26">__put_user</name><argument_list pos:start="1593:27" pos:end="1593:67">(<argument pos:start="1593:28" pos:end="1593:41"><expr pos:start="1593:28" pos:end="1593:41"><name pos:start="1593:28" pos:end="1593:41"><name pos:start="1593:28" pos:end="1593:32">value</name><operator pos:start="1593:33" pos:end="1593:33">.</operator><name pos:start="1593:34" pos:end="1593:38">loads</name><index pos:start="1593:39" pos:end="1593:41">[<expr pos:start="1593:40" pos:end="1593:40"><literal type="number" pos:start="1593:40" pos:end="1593:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1593:44" pos:end="1593:66"><expr pos:start="1593:44" pos:end="1593:66"><operator pos:start="1593:44" pos:end="1593:44">&amp;</operator><name pos:start="1593:45" pos:end="1593:66"><name pos:start="1593:45" pos:end="1593:56">target_value</name><operator pos:start="1593:57" pos:end="1593:58">-&gt;</operator><name pos:start="1593:59" pos:end="1593:63">loads</name><index pos:start="1593:64" pos:end="1593:66">[<expr pos:start="1593:65" pos:end="1593:65"><literal type="number" pos:start="1593:65" pos:end="1593:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1594:17" pos:end="1594:68"><expr pos:start="1594:17" pos:end="1594:67"><call pos:start="1594:17" pos:end="1594:67"><name pos:start="1594:17" pos:end="1594:26">__put_user</name><argument_list pos:start="1594:27" pos:end="1594:67">(<argument pos:start="1594:28" pos:end="1594:41"><expr pos:start="1594:28" pos:end="1594:41"><name pos:start="1594:28" pos:end="1594:41"><name pos:start="1594:28" pos:end="1594:32">value</name><operator pos:start="1594:33" pos:end="1594:33">.</operator><name pos:start="1594:34" pos:end="1594:38">loads</name><index pos:start="1594:39" pos:end="1594:41">[<expr pos:start="1594:40" pos:end="1594:40"><literal type="number" pos:start="1594:40" pos:end="1594:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1594:44" pos:end="1594:66"><expr pos:start="1594:44" pos:end="1594:66"><operator pos:start="1594:44" pos:end="1594:44">&amp;</operator><name pos:start="1594:45" pos:end="1594:66"><name pos:start="1594:45" pos:end="1594:56">target_value</name><operator pos:start="1594:57" pos:end="1594:58">-&gt;</operator><name pos:start="1594:59" pos:end="1594:63">loads</name><index pos:start="1594:64" pos:end="1594:66">[<expr pos:start="1594:65" pos:end="1594:65"><literal type="number" pos:start="1594:65" pos:end="1594:65">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1595:17" pos:end="1595:68"><expr pos:start="1595:17" pos:end="1595:67"><call pos:start="1595:17" pos:end="1595:67"><name pos:start="1595:17" pos:end="1595:26">__put_user</name><argument_list pos:start="1595:27" pos:end="1595:67">(<argument pos:start="1595:28" pos:end="1595:41"><expr pos:start="1595:28" pos:end="1595:41"><name pos:start="1595:28" pos:end="1595:41"><name pos:start="1595:28" pos:end="1595:32">value</name><operator pos:start="1595:33" pos:end="1595:33">.</operator><name pos:start="1595:34" pos:end="1595:38">loads</name><index pos:start="1595:39" pos:end="1595:41">[<expr pos:start="1595:40" pos:end="1595:40"><literal type="number" pos:start="1595:40" pos:end="1595:40">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="1595:44" pos:end="1595:66"><expr pos:start="1595:44" pos:end="1595:66"><operator pos:start="1595:44" pos:end="1595:44">&amp;</operator><name pos:start="1595:45" pos:end="1595:66"><name pos:start="1595:45" pos:end="1595:56">target_value</name><operator pos:start="1595:57" pos:end="1595:58">-&gt;</operator><name pos:start="1595:59" pos:end="1595:63">loads</name><index pos:start="1595:64" pos:end="1595:66">[<expr pos:start="1595:65" pos:end="1595:65"><literal type="number" pos:start="1595:65" pos:end="1595:65">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1596:17" pos:end="1596:68"><expr pos:start="1596:17" pos:end="1596:67"><call pos:start="1596:17" pos:end="1596:67"><name pos:start="1596:17" pos:end="1596:26">__put_user</name><argument_list pos:start="1596:27" pos:end="1596:67">(<argument pos:start="1596:28" pos:end="1596:41"><expr pos:start="1596:28" pos:end="1596:41"><name pos:start="1596:28" pos:end="1596:41"><name pos:start="1596:28" pos:end="1596:32">value</name><operator pos:start="1596:33" pos:end="1596:33">.</operator><name pos:start="1596:34" pos:end="1596:41">totalram</name></name></expr></argument>, <argument pos:start="1596:44" pos:end="1596:66"><expr pos:start="1596:44" pos:end="1596:66"><operator pos:start="1596:44" pos:end="1596:44">&amp;</operator><name pos:start="1596:45" pos:end="1596:66"><name pos:start="1596:45" pos:end="1596:56">target_value</name><operator pos:start="1596:57" pos:end="1596:58">-&gt;</operator><name pos:start="1596:59" pos:end="1596:66">totalram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1597:17" pos:end="1597:66"><expr pos:start="1597:17" pos:end="1597:65"><call pos:start="1597:17" pos:end="1597:65"><name pos:start="1597:17" pos:end="1597:26">__put_user</name><argument_list pos:start="1597:27" pos:end="1597:65">(<argument pos:start="1597:28" pos:end="1597:40"><expr pos:start="1597:28" pos:end="1597:40"><name pos:start="1597:28" pos:end="1597:40"><name pos:start="1597:28" pos:end="1597:32">value</name><operator pos:start="1597:33" pos:end="1597:33">.</operator><name pos:start="1597:34" pos:end="1597:40">freeram</name></name></expr></argument>, <argument pos:start="1597:43" pos:end="1597:64"><expr pos:start="1597:43" pos:end="1597:64"><operator pos:start="1597:43" pos:end="1597:43">&amp;</operator><name pos:start="1597:44" pos:end="1597:64"><name pos:start="1597:44" pos:end="1597:55">target_value</name><operator pos:start="1597:56" pos:end="1597:57">-&gt;</operator><name pos:start="1597:58" pos:end="1597:64">freeram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1598:17" pos:end="1598:70"><expr pos:start="1598:17" pos:end="1598:69"><call pos:start="1598:17" pos:end="1598:69"><name pos:start="1598:17" pos:end="1598:26">__put_user</name><argument_list pos:start="1598:27" pos:end="1598:69">(<argument pos:start="1598:28" pos:end="1598:42"><expr pos:start="1598:28" pos:end="1598:42"><name pos:start="1598:28" pos:end="1598:42"><name pos:start="1598:28" pos:end="1598:32">value</name><operator pos:start="1598:33" pos:end="1598:33">.</operator><name pos:start="1598:34" pos:end="1598:42">sharedram</name></name></expr></argument>, <argument pos:start="1598:45" pos:end="1598:68"><expr pos:start="1598:45" pos:end="1598:68"><operator pos:start="1598:45" pos:end="1598:45">&amp;</operator><name pos:start="1598:46" pos:end="1598:68"><name pos:start="1598:46" pos:end="1598:57">target_value</name><operator pos:start="1598:58" pos:end="1598:59">-&gt;</operator><name pos:start="1598:60" pos:end="1598:68">sharedram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1599:17" pos:end="1599:70"><expr pos:start="1599:17" pos:end="1599:69"><call pos:start="1599:17" pos:end="1599:69"><name pos:start="1599:17" pos:end="1599:26">__put_user</name><argument_list pos:start="1599:27" pos:end="1599:69">(<argument pos:start="1599:28" pos:end="1599:42"><expr pos:start="1599:28" pos:end="1599:42"><name pos:start="1599:28" pos:end="1599:42"><name pos:start="1599:28" pos:end="1599:32">value</name><operator pos:start="1599:33" pos:end="1599:33">.</operator><name pos:start="1599:34" pos:end="1599:42">bufferram</name></name></expr></argument>, <argument pos:start="1599:45" pos:end="1599:68"><expr pos:start="1599:45" pos:end="1599:68"><operator pos:start="1599:45" pos:end="1599:45">&amp;</operator><name pos:start="1599:46" pos:end="1599:68"><name pos:start="1599:46" pos:end="1599:57">target_value</name><operator pos:start="1599:58" pos:end="1599:59">-&gt;</operator><name pos:start="1599:60" pos:end="1599:68">bufferram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1600:17" pos:end="1600:70"><expr pos:start="1600:17" pos:end="1600:69"><call pos:start="1600:17" pos:end="1600:69"><name pos:start="1600:17" pos:end="1600:26">__put_user</name><argument_list pos:start="1600:27" pos:end="1600:69">(<argument pos:start="1600:28" pos:end="1600:42"><expr pos:start="1600:28" pos:end="1600:42"><name pos:start="1600:28" pos:end="1600:42"><name pos:start="1600:28" pos:end="1600:32">value</name><operator pos:start="1600:33" pos:end="1600:33">.</operator><name pos:start="1600:34" pos:end="1600:42">totalswap</name></name></expr></argument>, <argument pos:start="1600:45" pos:end="1600:68"><expr pos:start="1600:45" pos:end="1600:68"><operator pos:start="1600:45" pos:end="1600:45">&amp;</operator><name pos:start="1600:46" pos:end="1600:68"><name pos:start="1600:46" pos:end="1600:57">target_value</name><operator pos:start="1600:58" pos:end="1600:59">-&gt;</operator><name pos:start="1600:60" pos:end="1600:68">totalswap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1601:17" pos:end="1601:68"><expr pos:start="1601:17" pos:end="1601:67"><call pos:start="1601:17" pos:end="1601:67"><name pos:start="1601:17" pos:end="1601:26">__put_user</name><argument_list pos:start="1601:27" pos:end="1601:67">(<argument pos:start="1601:28" pos:end="1601:41"><expr pos:start="1601:28" pos:end="1601:41"><name pos:start="1601:28" pos:end="1601:41"><name pos:start="1601:28" pos:end="1601:32">value</name><operator pos:start="1601:33" pos:end="1601:33">.</operator><name pos:start="1601:34" pos:end="1601:41">freeswap</name></name></expr></argument>, <argument pos:start="1601:44" pos:end="1601:66"><expr pos:start="1601:44" pos:end="1601:66"><operator pos:start="1601:44" pos:end="1601:44">&amp;</operator><name pos:start="1601:45" pos:end="1601:66"><name pos:start="1601:45" pos:end="1601:56">target_value</name><operator pos:start="1601:57" pos:end="1601:58">-&gt;</operator><name pos:start="1601:59" pos:end="1601:66">freeswap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1602:17" pos:end="1602:62"><expr pos:start="1602:17" pos:end="1602:61"><call pos:start="1602:17" pos:end="1602:61"><name pos:start="1602:17" pos:end="1602:26">__put_user</name><argument_list pos:start="1602:27" pos:end="1602:61">(<argument pos:start="1602:28" pos:end="1602:38"><expr pos:start="1602:28" pos:end="1602:38"><name pos:start="1602:28" pos:end="1602:38"><name pos:start="1602:28" pos:end="1602:32">value</name><operator pos:start="1602:33" pos:end="1602:33">.</operator><name pos:start="1602:34" pos:end="1602:38">procs</name></name></expr></argument>, <argument pos:start="1602:41" pos:end="1602:60"><expr pos:start="1602:41" pos:end="1602:60"><operator pos:start="1602:41" pos:end="1602:41">&amp;</operator><name pos:start="1602:42" pos:end="1602:60"><name pos:start="1602:42" pos:end="1602:53">target_value</name><operator pos:start="1602:54" pos:end="1602:55">-&gt;</operator><name pos:start="1602:56" pos:end="1602:60">procs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1603:17" pos:end="1603:70"><expr pos:start="1603:17" pos:end="1603:69"><call pos:start="1603:17" pos:end="1603:69"><name pos:start="1603:17" pos:end="1603:26">__put_user</name><argument_list pos:start="1603:27" pos:end="1603:69">(<argument pos:start="1603:28" pos:end="1603:42"><expr pos:start="1603:28" pos:end="1603:42"><name pos:start="1603:28" pos:end="1603:42"><name pos:start="1603:28" pos:end="1603:32">value</name><operator pos:start="1603:33" pos:end="1603:33">.</operator><name pos:start="1603:34" pos:end="1603:42">totalhigh</name></name></expr></argument>, <argument pos:start="1603:45" pos:end="1603:68"><expr pos:start="1603:45" pos:end="1603:68"><operator pos:start="1603:45" pos:end="1603:45">&amp;</operator><name pos:start="1603:46" pos:end="1603:68"><name pos:start="1603:46" pos:end="1603:57">target_value</name><operator pos:start="1603:58" pos:end="1603:59">-&gt;</operator><name pos:start="1603:60" pos:end="1603:68">totalhigh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1604:17" pos:end="1604:68"><expr pos:start="1604:17" pos:end="1604:67"><call pos:start="1604:17" pos:end="1604:67"><name pos:start="1604:17" pos:end="1604:26">__put_user</name><argument_list pos:start="1604:27" pos:end="1604:67">(<argument pos:start="1604:28" pos:end="1604:41"><expr pos:start="1604:28" pos:end="1604:41"><name pos:start="1604:28" pos:end="1604:41"><name pos:start="1604:28" pos:end="1604:32">value</name><operator pos:start="1604:33" pos:end="1604:33">.</operator><name pos:start="1604:34" pos:end="1604:41">freehigh</name></name></expr></argument>, <argument pos:start="1604:44" pos:end="1604:66"><expr pos:start="1604:44" pos:end="1604:66"><operator pos:start="1604:44" pos:end="1604:44">&amp;</operator><name pos:start="1604:45" pos:end="1604:66"><name pos:start="1604:45" pos:end="1604:56">target_value</name><operator pos:start="1604:57" pos:end="1604:58">-&gt;</operator><name pos:start="1604:59" pos:end="1604:66">freehigh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1605:17" pos:end="1605:68"><expr pos:start="1605:17" pos:end="1605:67"><call pos:start="1605:17" pos:end="1605:67"><name pos:start="1605:17" pos:end="1605:26">__put_user</name><argument_list pos:start="1605:27" pos:end="1605:67">(<argument pos:start="1605:28" pos:end="1605:41"><expr pos:start="1605:28" pos:end="1605:41"><name pos:start="1605:28" pos:end="1605:41"><name pos:start="1605:28" pos:end="1605:32">value</name><operator pos:start="1605:33" pos:end="1605:33">.</operator><name pos:start="1605:34" pos:end="1605:41">mem_unit</name></name></expr></argument>, <argument pos:start="1605:44" pos:end="1605:66"><expr pos:start="1605:44" pos:end="1605:66"><operator pos:start="1605:44" pos:end="1605:44">&amp;</operator><name pos:start="1605:45" pos:end="1605:66"><name pos:start="1605:45" pos:end="1605:56">target_value</name><operator pos:start="1605:57" pos:end="1605:58">-&gt;</operator><name pos:start="1605:59" pos:end="1605:66">mem_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1606:17" pos:end="1608:0"><expr pos:start="1606:17" pos:end="1606:57"><call pos:start="1606:17" pos:end="1606:57"><name pos:start="1606:17" pos:end="1606:34">unlock_user_struct</name><argument_list pos:start="1606:35" pos:end="1606:57">(<argument pos:start="1606:36" pos:end="1606:47"><expr pos:start="1606:36" pos:end="1606:47"><name pos:start="1606:36" pos:end="1606:47">target_value</name></expr></argument>, <argument pos:start="1606:50" pos:end="1606:53"><expr pos:start="1606:50" pos:end="1606:53"><name pos:start="1606:50" pos:end="1606:53">arg1</name></expr></argument>, <argument pos:start="1606:56" pos:end="1606:56"><expr pos:start="1606:56" pos:end="1606:56"><literal type="number" pos:start="1606:56" pos:end="1606:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1607:1" pos:end="1607:20">#<cpp:directive pos:start="1607:2" pos:end="1607:6">ifdef</cpp:directive> <name pos:start="1607:8" pos:end="1607:20">TARGET_NR_ipc</name></cpp:ifdef>
    <case pos:start="1608:5" pos:end="1608:23">case <expr pos:start="1608:10" pos:end="1608:22"><name pos:start="1608:10" pos:end="1608:22">TARGET_NR_ipc</name></expr>:</case>
	<expr_stmt pos:start="1609:9" pos:end="1612:0"><expr pos:start="1609:9" pos:end="1609:56"><name pos:start="1609:9" pos:end="1609:11">ret</name> <operator pos:start="1609:13" pos:end="1609:13">=</operator> <call pos:start="1609:15" pos:end="1609:56"><name pos:start="1609:15" pos:end="1609:20">do_ipc</name><argument_list pos:start="1609:21" pos:end="1609:56">(<argument pos:start="1609:22" pos:end="1609:25"><expr pos:start="1609:22" pos:end="1609:25"><name pos:start="1609:22" pos:end="1609:25">arg1</name></expr></argument>, <argument pos:start="1609:28" pos:end="1609:31"><expr pos:start="1609:28" pos:end="1609:31"><name pos:start="1609:28" pos:end="1609:31">arg2</name></expr></argument>, <argument pos:start="1609:34" pos:end="1609:37"><expr pos:start="1609:34" pos:end="1609:37"><name pos:start="1609:34" pos:end="1609:37">arg3</name></expr></argument>, <argument pos:start="1609:40" pos:end="1609:43"><expr pos:start="1609:40" pos:end="1609:43"><name pos:start="1609:40" pos:end="1609:43">arg4</name></expr></argument>, <argument pos:start="1609:46" pos:end="1609:49"><expr pos:start="1609:46" pos:end="1609:49"><name pos:start="1609:46" pos:end="1609:49">arg5</name></expr></argument>, <argument pos:start="1609:52" pos:end="1609:55"><expr pos:start="1609:52" pos:end="1609:55"><name pos:start="1609:52" pos:end="1609:55">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1610:1" pos:end="1610:6">#<cpp:directive pos:start="1610:2" pos:end="1610:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1611:1" pos:end="1611:23">#<cpp:directive pos:start="1611:2" pos:end="1611:6">ifdef</cpp:directive> <name pos:start="1611:8" pos:end="1611:23">TARGET_NR_semget</name></cpp:ifdef>
    <case pos:start="1612:5" pos:end="1612:26">case <expr pos:start="1612:10" pos:end="1612:25"><name pos:start="1612:10" pos:end="1612:25">TARGET_NR_semget</name></expr>:</case>
        <expr_stmt pos:start="1613:9" pos:end="1616:0"><expr pos:start="1613:9" pos:end="1613:49"><name pos:start="1613:9" pos:end="1613:11">ret</name> <operator pos:start="1613:13" pos:end="1613:13">=</operator> <call pos:start="1613:15" pos:end="1613:49"><name pos:start="1613:15" pos:end="1613:23">get_errno</name><argument_list pos:start="1613:24" pos:end="1613:49">(<argument pos:start="1613:25" pos:end="1613:48"><expr pos:start="1613:25" pos:end="1613:48"><call pos:start="1613:25" pos:end="1613:48"><name pos:start="1613:25" pos:end="1613:30">semget</name><argument_list pos:start="1613:31" pos:end="1613:48">(<argument pos:start="1613:32" pos:end="1613:35"><expr pos:start="1613:32" pos:end="1613:35"><name pos:start="1613:32" pos:end="1613:35">arg1</name></expr></argument>, <argument pos:start="1613:38" pos:end="1613:41"><expr pos:start="1613:38" pos:end="1613:41"><name pos:start="1613:38" pos:end="1613:41">arg2</name></expr></argument>, <argument pos:start="1613:44" pos:end="1613:47"><expr pos:start="1613:44" pos:end="1613:47"><name pos:start="1613:44" pos:end="1613:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1614:1" pos:end="1614:6">#<cpp:directive pos:start="1614:2" pos:end="1614:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1615:1" pos:end="1615:22">#<cpp:directive pos:start="1615:2" pos:end="1615:6">ifdef</cpp:directive> <name pos:start="1615:8" pos:end="1615:22">TARGET_NR_semop</name></cpp:ifdef>
    <case pos:start="1616:5" pos:end="1616:25">case <expr pos:start="1616:10" pos:end="1616:24"><name pos:start="1616:10" pos:end="1616:24">TARGET_NR_semop</name></expr>:</case>
        <expr_stmt pos:start="1617:9" pos:end="1620:0"><expr pos:start="1617:9" pos:end="1617:40"><name pos:start="1617:9" pos:end="1617:11">ret</name> <operator pos:start="1617:13" pos:end="1617:13">=</operator> <call pos:start="1617:15" pos:end="1617:40"><name pos:start="1617:15" pos:end="1617:22">do_semop</name><argument_list pos:start="1617:23" pos:end="1617:40">(<argument pos:start="1617:24" pos:end="1617:27"><expr pos:start="1617:24" pos:end="1617:27"><name pos:start="1617:24" pos:end="1617:27">arg1</name></expr></argument>, <argument pos:start="1617:30" pos:end="1617:33"><expr pos:start="1617:30" pos:end="1617:33"><name pos:start="1617:30" pos:end="1617:33">arg2</name></expr></argument>, <argument pos:start="1617:36" pos:end="1617:39"><expr pos:start="1617:36" pos:end="1617:39"><name pos:start="1617:36" pos:end="1617:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1618:1" pos:end="1618:6">#<cpp:directive pos:start="1618:2" pos:end="1618:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1619:1" pos:end="1619:23">#<cpp:directive pos:start="1619:2" pos:end="1619:6">ifdef</cpp:directive> <name pos:start="1619:8" pos:end="1619:23">TARGET_NR_semctl</name></cpp:ifdef>
    <case pos:start="1620:5" pos:end="1620:26">case <expr pos:start="1620:10" pos:end="1620:25"><name pos:start="1620:10" pos:end="1620:25">TARGET_NR_semctl</name></expr>:</case>
        <expr_stmt pos:start="1621:9" pos:end="1624:0"><expr pos:start="1621:9" pos:end="1621:47"><name pos:start="1621:9" pos:end="1621:11">ret</name> <operator pos:start="1621:13" pos:end="1621:13">=</operator> <call pos:start="1621:15" pos:end="1621:47"><name pos:start="1621:15" pos:end="1621:23">do_semctl</name><argument_list pos:start="1621:24" pos:end="1621:47">(<argument pos:start="1621:25" pos:end="1621:28"><expr pos:start="1621:25" pos:end="1621:28"><name pos:start="1621:25" pos:end="1621:28">arg1</name></expr></argument>, <argument pos:start="1621:31" pos:end="1621:34"><expr pos:start="1621:31" pos:end="1621:34"><name pos:start="1621:31" pos:end="1621:34">arg2</name></expr></argument>, <argument pos:start="1621:37" pos:end="1621:40"><expr pos:start="1621:37" pos:end="1621:40"><name pos:start="1621:37" pos:end="1621:40">arg3</name></expr></argument>, <argument pos:start="1621:43" pos:end="1621:46"><expr pos:start="1621:43" pos:end="1621:46"><name pos:start="1621:43" pos:end="1621:46">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1622:1" pos:end="1622:6">#<cpp:directive pos:start="1622:2" pos:end="1622:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1623:1" pos:end="1623:23">#<cpp:directive pos:start="1623:2" pos:end="1623:6">ifdef</cpp:directive> <name pos:start="1623:8" pos:end="1623:23">TARGET_NR_msgctl</name></cpp:ifdef>
    <case pos:start="1624:5" pos:end="1624:26">case <expr pos:start="1624:10" pos:end="1624:25"><name pos:start="1624:10" pos:end="1624:25">TARGET_NR_msgctl</name></expr>:</case>
        <expr_stmt pos:start="1625:9" pos:end="1628:0"><expr pos:start="1625:9" pos:end="1625:41"><name pos:start="1625:9" pos:end="1625:11">ret</name> <operator pos:start="1625:13" pos:end="1625:13">=</operator> <call pos:start="1625:15" pos:end="1625:41"><name pos:start="1625:15" pos:end="1625:23">do_msgctl</name><argument_list pos:start="1625:24" pos:end="1625:41">(<argument pos:start="1625:25" pos:end="1625:28"><expr pos:start="1625:25" pos:end="1625:28"><name pos:start="1625:25" pos:end="1625:28">arg1</name></expr></argument>, <argument pos:start="1625:31" pos:end="1625:34"><expr pos:start="1625:31" pos:end="1625:34"><name pos:start="1625:31" pos:end="1625:34">arg2</name></expr></argument>, <argument pos:start="1625:37" pos:end="1625:40"><expr pos:start="1625:37" pos:end="1625:40"><name pos:start="1625:37" pos:end="1625:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1626:1" pos:end="1626:6">#<cpp:directive pos:start="1626:2" pos:end="1626:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1627:1" pos:end="1627:23">#<cpp:directive pos:start="1627:2" pos:end="1627:6">ifdef</cpp:directive> <name pos:start="1627:8" pos:end="1627:23">TARGET_NR_msgget</name></cpp:ifdef>
    <case pos:start="1628:5" pos:end="1628:26">case <expr pos:start="1628:10" pos:end="1628:25"><name pos:start="1628:10" pos:end="1628:25">TARGET_NR_msgget</name></expr>:</case>
        <expr_stmt pos:start="1629:9" pos:end="1632:0"><expr pos:start="1629:9" pos:end="1629:43"><name pos:start="1629:9" pos:end="1629:11">ret</name> <operator pos:start="1629:13" pos:end="1629:13">=</operator> <call pos:start="1629:15" pos:end="1629:43"><name pos:start="1629:15" pos:end="1629:23">get_errno</name><argument_list pos:start="1629:24" pos:end="1629:43">(<argument pos:start="1629:25" pos:end="1629:42"><expr pos:start="1629:25" pos:end="1629:42"><call pos:start="1629:25" pos:end="1629:42"><name pos:start="1629:25" pos:end="1629:30">msgget</name><argument_list pos:start="1629:31" pos:end="1629:42">(<argument pos:start="1629:32" pos:end="1629:35"><expr pos:start="1629:32" pos:end="1629:35"><name pos:start="1629:32" pos:end="1629:35">arg1</name></expr></argument>, <argument pos:start="1629:38" pos:end="1629:41"><expr pos:start="1629:38" pos:end="1629:41"><name pos:start="1629:38" pos:end="1629:41">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1630:1" pos:end="1630:6">#<cpp:directive pos:start="1630:2" pos:end="1630:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1631:1" pos:end="1631:23">#<cpp:directive pos:start="1631:2" pos:end="1631:6">ifdef</cpp:directive> <name pos:start="1631:8" pos:end="1631:23">TARGET_NR_msgrcv</name></cpp:ifdef>
    <case pos:start="1632:5" pos:end="1632:26">case <expr pos:start="1632:10" pos:end="1632:25"><name pos:start="1632:10" pos:end="1632:25">TARGET_NR_msgrcv</name></expr>:</case>
        <expr_stmt pos:start="1633:9" pos:end="1636:0"><expr pos:start="1633:9" pos:end="1633:53"><name pos:start="1633:9" pos:end="1633:11">ret</name> <operator pos:start="1633:13" pos:end="1633:13">=</operator> <call pos:start="1633:15" pos:end="1633:53"><name pos:start="1633:15" pos:end="1633:23">do_msgrcv</name><argument_list pos:start="1633:24" pos:end="1633:53">(<argument pos:start="1633:25" pos:end="1633:28"><expr pos:start="1633:25" pos:end="1633:28"><name pos:start="1633:25" pos:end="1633:28">arg1</name></expr></argument>, <argument pos:start="1633:31" pos:end="1633:34"><expr pos:start="1633:31" pos:end="1633:34"><name pos:start="1633:31" pos:end="1633:34">arg2</name></expr></argument>, <argument pos:start="1633:37" pos:end="1633:40"><expr pos:start="1633:37" pos:end="1633:40"><name pos:start="1633:37" pos:end="1633:40">arg3</name></expr></argument>, <argument pos:start="1633:43" pos:end="1633:46"><expr pos:start="1633:43" pos:end="1633:46"><name pos:start="1633:43" pos:end="1633:46">arg4</name></expr></argument>, <argument pos:start="1633:49" pos:end="1633:52"><expr pos:start="1633:49" pos:end="1633:52"><name pos:start="1633:49" pos:end="1633:52">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1634:1" pos:end="1634:6">#<cpp:directive pos:start="1634:2" pos:end="1634:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1635:1" pos:end="1635:23">#<cpp:directive pos:start="1635:2" pos:end="1635:6">ifdef</cpp:directive> <name pos:start="1635:8" pos:end="1635:23">TARGET_NR_msgsnd</name></cpp:ifdef>
    <case pos:start="1636:5" pos:end="1636:26">case <expr pos:start="1636:10" pos:end="1636:25"><name pos:start="1636:10" pos:end="1636:25">TARGET_NR_msgsnd</name></expr>:</case>
        <expr_stmt pos:start="1637:9" pos:end="1640:0"><expr pos:start="1637:9" pos:end="1637:47"><name pos:start="1637:9" pos:end="1637:11">ret</name> <operator pos:start="1637:13" pos:end="1637:13">=</operator> <call pos:start="1637:15" pos:end="1637:47"><name pos:start="1637:15" pos:end="1637:23">do_msgsnd</name><argument_list pos:start="1637:24" pos:end="1637:47">(<argument pos:start="1637:25" pos:end="1637:28"><expr pos:start="1637:25" pos:end="1637:28"><name pos:start="1637:25" pos:end="1637:28">arg1</name></expr></argument>, <argument pos:start="1637:31" pos:end="1637:34"><expr pos:start="1637:31" pos:end="1637:34"><name pos:start="1637:31" pos:end="1637:34">arg2</name></expr></argument>, <argument pos:start="1637:37" pos:end="1637:40"><expr pos:start="1637:37" pos:end="1637:40"><name pos:start="1637:37" pos:end="1637:40">arg3</name></expr></argument>, <argument pos:start="1637:43" pos:end="1637:46"><expr pos:start="1637:43" pos:end="1637:46"><name pos:start="1637:43" pos:end="1637:46">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1638:1" pos:end="1638:6">#<cpp:directive pos:start="1638:2" pos:end="1638:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1639:1" pos:end="1639:23">#<cpp:directive pos:start="1639:2" pos:end="1639:6">ifdef</cpp:directive> <name pos:start="1639:8" pos:end="1639:23">TARGET_NR_shmget</name></cpp:ifdef>
    <case pos:start="1640:5" pos:end="1640:26">case <expr pos:start="1640:10" pos:end="1640:25"><name pos:start="1640:10" pos:end="1640:25">TARGET_NR_shmget</name></expr>:</case>
        <expr_stmt pos:start="1641:9" pos:end="1644:0"><expr pos:start="1641:9" pos:end="1641:49"><name pos:start="1641:9" pos:end="1641:11">ret</name> <operator pos:start="1641:13" pos:end="1641:13">=</operator> <call pos:start="1641:15" pos:end="1641:49"><name pos:start="1641:15" pos:end="1641:23">get_errno</name><argument_list pos:start="1641:24" pos:end="1641:49">(<argument pos:start="1641:25" pos:end="1641:48"><expr pos:start="1641:25" pos:end="1641:48"><call pos:start="1641:25" pos:end="1641:48"><name pos:start="1641:25" pos:end="1641:30">shmget</name><argument_list pos:start="1641:31" pos:end="1641:48">(<argument pos:start="1641:32" pos:end="1641:35"><expr pos:start="1641:32" pos:end="1641:35"><name pos:start="1641:32" pos:end="1641:35">arg1</name></expr></argument>, <argument pos:start="1641:38" pos:end="1641:41"><expr pos:start="1641:38" pos:end="1641:41"><name pos:start="1641:38" pos:end="1641:41">arg2</name></expr></argument>, <argument pos:start="1641:44" pos:end="1641:47"><expr pos:start="1641:44" pos:end="1641:47"><name pos:start="1641:44" pos:end="1641:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1642:1" pos:end="1642:6">#<cpp:directive pos:start="1642:2" pos:end="1642:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1643:1" pos:end="1643:23">#<cpp:directive pos:start="1643:2" pos:end="1643:6">ifdef</cpp:directive> <name pos:start="1643:8" pos:end="1643:23">TARGET_NR_shmctl</name></cpp:ifdef>
    <case pos:start="1644:5" pos:end="1644:26">case <expr pos:start="1644:10" pos:end="1644:25"><name pos:start="1644:10" pos:end="1644:25">TARGET_NR_shmctl</name></expr>:</case>
        <expr_stmt pos:start="1645:9" pos:end="1648:0"><expr pos:start="1645:9" pos:end="1645:41"><name pos:start="1645:9" pos:end="1645:11">ret</name> <operator pos:start="1645:13" pos:end="1645:13">=</operator> <call pos:start="1645:15" pos:end="1645:41"><name pos:start="1645:15" pos:end="1645:23">do_shmctl</name><argument_list pos:start="1645:24" pos:end="1645:41">(<argument pos:start="1645:25" pos:end="1645:28"><expr pos:start="1645:25" pos:end="1645:28"><name pos:start="1645:25" pos:end="1645:28">arg1</name></expr></argument>, <argument pos:start="1645:31" pos:end="1645:34"><expr pos:start="1645:31" pos:end="1645:34"><name pos:start="1645:31" pos:end="1645:34">arg2</name></expr></argument>, <argument pos:start="1645:37" pos:end="1645:40"><expr pos:start="1645:37" pos:end="1645:40"><name pos:start="1645:37" pos:end="1645:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1646:1" pos:end="1646:6">#<cpp:directive pos:start="1646:2" pos:end="1646:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1647:1" pos:end="1647:22">#<cpp:directive pos:start="1647:2" pos:end="1647:6">ifdef</cpp:directive> <name pos:start="1647:8" pos:end="1647:22">TARGET_NR_shmat</name></cpp:ifdef>
    <case pos:start="1648:5" pos:end="1648:25">case <expr pos:start="1648:10" pos:end="1648:24"><name pos:start="1648:10" pos:end="1648:24">TARGET_NR_shmat</name></expr>:</case>
        <expr_stmt pos:start="1649:9" pos:end="1652:0"><expr pos:start="1649:9" pos:end="1649:40"><name pos:start="1649:9" pos:end="1649:11">ret</name> <operator pos:start="1649:13" pos:end="1649:13">=</operator> <call pos:start="1649:15" pos:end="1649:40"><name pos:start="1649:15" pos:end="1649:22">do_shmat</name><argument_list pos:start="1649:23" pos:end="1649:40">(<argument pos:start="1649:24" pos:end="1649:27"><expr pos:start="1649:24" pos:end="1649:27"><name pos:start="1649:24" pos:end="1649:27">arg1</name></expr></argument>, <argument pos:start="1649:30" pos:end="1649:33"><expr pos:start="1649:30" pos:end="1649:33"><name pos:start="1649:30" pos:end="1649:33">arg2</name></expr></argument>, <argument pos:start="1649:36" pos:end="1649:39"><expr pos:start="1649:36" pos:end="1649:39"><name pos:start="1649:36" pos:end="1649:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1650:1" pos:end="1650:6">#<cpp:directive pos:start="1650:2" pos:end="1650:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1651:1" pos:end="1651:22">#<cpp:directive pos:start="1651:2" pos:end="1651:6">ifdef</cpp:directive> <name pos:start="1651:8" pos:end="1651:22">TARGET_NR_shmdt</name></cpp:ifdef>
    <case pos:start="1652:5" pos:end="1652:25">case <expr pos:start="1652:10" pos:end="1652:24"><name pos:start="1652:10" pos:end="1652:24">TARGET_NR_shmdt</name></expr>:</case>
        <expr_stmt pos:start="1653:9" pos:end="1655:0"><expr pos:start="1653:9" pos:end="1653:28"><name pos:start="1653:9" pos:end="1653:11">ret</name> <operator pos:start="1653:13" pos:end="1653:13">=</operator> <call pos:start="1653:15" pos:end="1653:28"><name pos:start="1653:15" pos:end="1653:22">do_shmdt</name><argument_list pos:start="1653:23" pos:end="1653:28">(<argument pos:start="1653:24" pos:end="1653:27"><expr pos:start="1653:24" pos:end="1653:27"><name pos:start="1653:24" pos:end="1653:27">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1654:1" pos:end="1654:6">#<cpp:directive pos:start="1654:2" pos:end="1654:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1655:5" pos:end="1655:25">case <expr pos:start="1655:10" pos:end="1655:24"><name pos:start="1655:10" pos:end="1655:24">TARGET_NR_fsync</name></expr>:</case>
        <expr_stmt pos:start="1656:9" pos:end="1656:37"><expr pos:start="1656:9" pos:end="1656:36"><name pos:start="1656:9" pos:end="1656:11">ret</name> <operator pos:start="1656:13" pos:end="1656:13">=</operator> <call pos:start="1656:15" pos:end="1656:36"><name pos:start="1656:15" pos:end="1656:23">get_errno</name><argument_list pos:start="1656:24" pos:end="1656:36">(<argument pos:start="1656:25" pos:end="1656:35"><expr pos:start="1656:25" pos:end="1656:35"><call pos:start="1656:25" pos:end="1656:35"><name pos:start="1656:25" pos:end="1656:29">fsync</name><argument_list pos:start="1656:30" pos:end="1656:35">(<argument pos:start="1656:31" pos:end="1656:34"><expr pos:start="1656:31" pos:end="1656:34"><name pos:start="1656:31" pos:end="1656:34">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1657:5" pos:end="1665:0">case <expr pos:start="1657:10" pos:end="1657:24"><name pos:start="1657:10" pos:end="1657:24">TARGET_NR_clone</name></expr>:</case>
        <comment type="block" pos:start="1658:9" pos:end="1663:11">/* Linux manages to have three different orderings for its
         * arguments to clone(); the BACKWARDS and BACKWARDS2 defines
         * match the kernel's CONFIG_CLONE_* settings.
         * Microblaze is further special in that it uses a sixth
         * implicit argument to clone for the TLS pointer.
         */</comment>
<cpp:if pos:start="1664:1" pos:end="1664:30">#<cpp:directive pos:start="1664:2" pos:end="1664:3">if</cpp:directive> <expr pos:start="1664:5" pos:end="1664:30"><call pos:start="1664:5" pos:end="1664:30"><name pos:start="1664:5" pos:end="1664:11">defined</name><argument_list pos:start="1664:12" pos:end="1664:30">(<argument pos:start="1664:13" pos:end="1664:29"><expr pos:start="1664:13" pos:end="1664:29"><name pos:start="1664:13" pos:end="1664:29">TARGET_MICROBLAZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt pos:start="1665:9" pos:end="1667:0"><expr pos:start="1665:9" pos:end="1665:71"><name pos:start="1665:9" pos:end="1665:11">ret</name> <operator pos:start="1665:13" pos:end="1665:13">=</operator> <call pos:start="1665:15" pos:end="1665:71"><name pos:start="1665:15" pos:end="1665:23">get_errno</name><argument_list pos:start="1665:24" pos:end="1665:71">(<argument pos:start="1665:25" pos:end="1665:70"><expr pos:start="1665:25" pos:end="1665:70"><call pos:start="1665:25" pos:end="1665:70"><name pos:start="1665:25" pos:end="1665:31">do_fork</name><argument_list pos:start="1665:32" pos:end="1665:70">(<argument pos:start="1665:33" pos:end="1665:39"><expr pos:start="1665:33" pos:end="1665:39"><name pos:start="1665:33" pos:end="1665:39">cpu_env</name></expr></argument>, <argument pos:start="1665:42" pos:end="1665:45"><expr pos:start="1665:42" pos:end="1665:45"><name pos:start="1665:42" pos:end="1665:45">arg1</name></expr></argument>, <argument pos:start="1665:48" pos:end="1665:51"><expr pos:start="1665:48" pos:end="1665:51"><name pos:start="1665:48" pos:end="1665:51">arg2</name></expr></argument>, <argument pos:start="1665:54" pos:end="1665:57"><expr pos:start="1665:54" pos:end="1665:57"><name pos:start="1665:54" pos:end="1665:57">arg4</name></expr></argument>, <argument pos:start="1665:60" pos:end="1665:63"><expr pos:start="1665:60" pos:end="1665:63"><name pos:start="1665:60" pos:end="1665:63">arg6</name></expr></argument>, <argument pos:start="1665:66" pos:end="1665:69"><expr pos:start="1665:66" pos:end="1665:69"><name pos:start="1665:66" pos:end="1665:69">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif pos:start="1666:1" pos:end="1666:37">#<cpp:directive pos:start="1666:2" pos:end="1666:5">elif</cpp:directive> <expr pos:start="1666:7" pos:end="1666:37"><call pos:start="1666:7" pos:end="1666:37"><name pos:start="1666:7" pos:end="1666:13">defined</name><argument_list pos:start="1666:14" pos:end="1666:37">(<argument pos:start="1666:15" pos:end="1666:36"><expr pos:start="1666:15" pos:end="1666:36"><name pos:start="1666:15" pos:end="1666:36">TARGET_CLONE_BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
        <expr_stmt pos:start="1667:9" pos:end="1669:0"><expr pos:start="1667:9" pos:end="1667:71"><name pos:start="1667:9" pos:end="1667:11">ret</name> <operator pos:start="1667:13" pos:end="1667:13">=</operator> <call pos:start="1667:15" pos:end="1667:71"><name pos:start="1667:15" pos:end="1667:23">get_errno</name><argument_list pos:start="1667:24" pos:end="1667:71">(<argument pos:start="1667:25" pos:end="1667:70"><expr pos:start="1667:25" pos:end="1667:70"><call pos:start="1667:25" pos:end="1667:70"><name pos:start="1667:25" pos:end="1667:31">do_fork</name><argument_list pos:start="1667:32" pos:end="1667:70">(<argument pos:start="1667:33" pos:end="1667:39"><expr pos:start="1667:33" pos:end="1667:39"><name pos:start="1667:33" pos:end="1667:39">cpu_env</name></expr></argument>, <argument pos:start="1667:42" pos:end="1667:45"><expr pos:start="1667:42" pos:end="1667:45"><name pos:start="1667:42" pos:end="1667:45">arg1</name></expr></argument>, <argument pos:start="1667:48" pos:end="1667:51"><expr pos:start="1667:48" pos:end="1667:51"><name pos:start="1667:48" pos:end="1667:51">arg2</name></expr></argument>, <argument pos:start="1667:54" pos:end="1667:57"><expr pos:start="1667:54" pos:end="1667:57"><name pos:start="1667:54" pos:end="1667:57">arg3</name></expr></argument>, <argument pos:start="1667:60" pos:end="1667:63"><expr pos:start="1667:60" pos:end="1667:63"><name pos:start="1667:60" pos:end="1667:63">arg4</name></expr></argument>, <argument pos:start="1667:66" pos:end="1667:69"><expr pos:start="1667:66" pos:end="1667:69"><name pos:start="1667:66" pos:end="1667:69">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif pos:start="1668:1" pos:end="1668:38">#<cpp:directive pos:start="1668:2" pos:end="1668:5">elif</cpp:directive> <expr pos:start="1668:7" pos:end="1668:38"><call pos:start="1668:7" pos:end="1668:38"><name pos:start="1668:7" pos:end="1668:13">defined</name><argument_list pos:start="1668:14" pos:end="1668:38">(<argument pos:start="1668:15" pos:end="1668:37"><expr pos:start="1668:15" pos:end="1668:37"><name pos:start="1668:15" pos:end="1668:37">TARGET_CLONE_BACKWARDS2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
        <expr_stmt pos:start="1669:9" pos:end="1671:0"><expr pos:start="1669:9" pos:end="1669:71"><name pos:start="1669:9" pos:end="1669:11">ret</name> <operator pos:start="1669:13" pos:end="1669:13">=</operator> <call pos:start="1669:15" pos:end="1669:71"><name pos:start="1669:15" pos:end="1669:23">get_errno</name><argument_list pos:start="1669:24" pos:end="1669:71">(<argument pos:start="1669:25" pos:end="1669:70"><expr pos:start="1669:25" pos:end="1669:70"><call pos:start="1669:25" pos:end="1669:70"><name pos:start="1669:25" pos:end="1669:31">do_fork</name><argument_list pos:start="1669:32" pos:end="1669:70">(<argument pos:start="1669:33" pos:end="1669:39"><expr pos:start="1669:33" pos:end="1669:39"><name pos:start="1669:33" pos:end="1669:39">cpu_env</name></expr></argument>, <argument pos:start="1669:42" pos:end="1669:45"><expr pos:start="1669:42" pos:end="1669:45"><name pos:start="1669:42" pos:end="1669:45">arg2</name></expr></argument>, <argument pos:start="1669:48" pos:end="1669:51"><expr pos:start="1669:48" pos:end="1669:51"><name pos:start="1669:48" pos:end="1669:51">arg1</name></expr></argument>, <argument pos:start="1669:54" pos:end="1669:57"><expr pos:start="1669:54" pos:end="1669:57"><name pos:start="1669:54" pos:end="1669:57">arg3</name></expr></argument>, <argument pos:start="1669:60" pos:end="1669:63"><expr pos:start="1669:60" pos:end="1669:63"><name pos:start="1669:60" pos:end="1669:63">arg5</name></expr></argument>, <argument pos:start="1669:66" pos:end="1669:69"><expr pos:start="1669:66" pos:end="1669:69"><name pos:start="1669:66" pos:end="1669:69">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="1670:1" pos:end="1670:5">#<cpp:directive pos:start="1670:2" pos:end="1670:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="1671:9" pos:end="1674:0"><expr pos:start="1671:9" pos:end="1671:71"><name pos:start="1671:9" pos:end="1671:11">ret</name> <operator pos:start="1671:13" pos:end="1671:13">=</operator> <call pos:start="1671:15" pos:end="1671:71"><name pos:start="1671:15" pos:end="1671:23">get_errno</name><argument_list pos:start="1671:24" pos:end="1671:71">(<argument pos:start="1671:25" pos:end="1671:70"><expr pos:start="1671:25" pos:end="1671:70"><call pos:start="1671:25" pos:end="1671:70"><name pos:start="1671:25" pos:end="1671:31">do_fork</name><argument_list pos:start="1671:32" pos:end="1671:70">(<argument pos:start="1671:33" pos:end="1671:39"><expr pos:start="1671:33" pos:end="1671:39"><name pos:start="1671:33" pos:end="1671:39">cpu_env</name></expr></argument>, <argument pos:start="1671:42" pos:end="1671:45"><expr pos:start="1671:42" pos:end="1671:45"><name pos:start="1671:42" pos:end="1671:45">arg1</name></expr></argument>, <argument pos:start="1671:48" pos:end="1671:51"><expr pos:start="1671:48" pos:end="1671:51"><name pos:start="1671:48" pos:end="1671:51">arg2</name></expr></argument>, <argument pos:start="1671:54" pos:end="1671:57"><expr pos:start="1671:54" pos:end="1671:57"><name pos:start="1671:54" pos:end="1671:57">arg3</name></expr></argument>, <argument pos:start="1671:60" pos:end="1671:63"><expr pos:start="1671:60" pos:end="1671:63"><name pos:start="1671:60" pos:end="1671:63">arg5</name></expr></argument>, <argument pos:start="1671:66" pos:end="1671:69"><expr pos:start="1671:66" pos:end="1671:69"><name pos:start="1671:66" pos:end="1671:69">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1672:1" pos:end="1672:6">#<cpp:directive pos:start="1672:2" pos:end="1672:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1673:1" pos:end="1673:22">#<cpp:directive pos:start="1673:2" pos:end="1673:6">ifdef</cpp:directive> <name pos:start="1673:8" pos:end="1673:22">__NR_exit_group</name></cpp:ifdef>
        <comment type="block" pos:start="1674:9" pos:end="1674:30">/* new thread calls */</comment>
    <case pos:start="1675:5" pos:end="1677:0">case <expr pos:start="1675:10" pos:end="1675:29"><name pos:start="1675:10" pos:end="1675:29">TARGET_NR_exit_group</name></expr>:</case>
<cpp:ifdef pos:start="1676:1" pos:end="1676:19">#<cpp:directive pos:start="1676:2" pos:end="1676:6">ifdef</cpp:directive> <name pos:start="1676:8" pos:end="1676:19">TARGET_GPROF</name></cpp:ifdef>
        <expr_stmt pos:start="1677:9" pos:end="1679:0"><expr pos:start="1677:9" pos:end="1677:19"><call pos:start="1677:9" pos:end="1677:19"><name pos:start="1677:9" pos:end="1677:17">_mcleanup</name><argument_list pos:start="1677:18" pos:end="1677:19">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1678:1" pos:end="1678:6">#<cpp:directive pos:start="1678:2" pos:end="1678:6">endif</cpp:directive></cpp:endif>
        <expr_stmt pos:start="1679:9" pos:end="1679:32"><expr pos:start="1679:9" pos:end="1679:31"><call pos:start="1679:9" pos:end="1679:31"><name pos:start="1679:9" pos:end="1679:16">gdb_exit</name><argument_list pos:start="1679:17" pos:end="1679:31">(<argument pos:start="1679:18" pos:end="1679:24"><expr pos:start="1679:18" pos:end="1679:24"><name pos:start="1679:18" pos:end="1679:24">cpu_env</name></expr></argument>, <argument pos:start="1679:27" pos:end="1679:30"><expr pos:start="1679:27" pos:end="1679:30"><name pos:start="1679:27" pos:end="1679:30">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1680:9" pos:end="1682:0"><expr pos:start="1680:9" pos:end="1680:41"><name pos:start="1680:9" pos:end="1680:11">ret</name> <operator pos:start="1680:13" pos:end="1680:13">=</operator> <call pos:start="1680:15" pos:end="1680:41"><name pos:start="1680:15" pos:end="1680:23">get_errno</name><argument_list pos:start="1680:24" pos:end="1680:41">(<argument pos:start="1680:25" pos:end="1680:40"><expr pos:start="1680:25" pos:end="1680:40"><call pos:start="1680:25" pos:end="1680:40"><name pos:start="1680:25" pos:end="1680:34">exit_group</name><argument_list pos:start="1680:35" pos:end="1680:40">(<argument pos:start="1680:36" pos:end="1680:39"><expr pos:start="1680:36" pos:end="1680:39"><name pos:start="1680:36" pos:end="1680:39">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1681:1" pos:end="1681:6">#<cpp:directive pos:start="1681:2" pos:end="1681:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1682:5" pos:end="1682:33">case <expr pos:start="1682:10" pos:end="1682:32"><name pos:start="1682:10" pos:end="1682:32">TARGET_NR_setdomainname</name></expr>:</case>
        <if_stmt pos:start="1683:9" pos:end="1684:24"><if pos:start="1683:9" pos:end="1684:24">if <condition pos:start="1683:12" pos:end="1683:42">(<expr pos:start="1683:13" pos:end="1683:41"><operator pos:start="1683:13" pos:end="1683:13">!</operator><operator pos:start="1683:14" pos:end="1683:14">(</operator><name pos:start="1683:15" pos:end="1683:15">p</name> <operator pos:start="1683:17" pos:end="1683:17">=</operator> <call pos:start="1683:19" pos:end="1683:40"><name pos:start="1683:19" pos:end="1683:34">lock_user_string</name><argument_list pos:start="1683:35" pos:end="1683:40">(<argument pos:start="1683:36" pos:end="1683:39"><expr pos:start="1683:36" pos:end="1683:39"><name pos:start="1683:36" pos:end="1683:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1683:41" pos:end="1683:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1684:13" pos:end="1684:24"><block_content pos:start="1684:13" pos:end="1684:24">
            <goto pos:start="1684:13" pos:end="1684:24">goto <name pos:start="1684:18" pos:end="1684:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1685:9" pos:end="1685:48"><expr pos:start="1685:9" pos:end="1685:47"><name pos:start="1685:9" pos:end="1685:11">ret</name> <operator pos:start="1685:13" pos:end="1685:13">=</operator> <call pos:start="1685:15" pos:end="1685:47"><name pos:start="1685:15" pos:end="1685:23">get_errno</name><argument_list pos:start="1685:24" pos:end="1685:47">(<argument pos:start="1685:25" pos:end="1685:46"><expr pos:start="1685:25" pos:end="1685:46"><call pos:start="1685:25" pos:end="1685:46"><name pos:start="1685:25" pos:end="1685:37">setdomainname</name><argument_list pos:start="1685:38" pos:end="1685:46">(<argument pos:start="1685:39" pos:end="1685:39"><expr pos:start="1685:39" pos:end="1685:39"><name pos:start="1685:39" pos:end="1685:39">p</name></expr></argument>, <argument pos:start="1685:42" pos:end="1685:45"><expr pos:start="1685:42" pos:end="1685:45"><name pos:start="1685:42" pos:end="1685:45">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1686:9" pos:end="1686:32"><expr pos:start="1686:9" pos:end="1686:31"><call pos:start="1686:9" pos:end="1686:31"><name pos:start="1686:9" pos:end="1686:19">unlock_user</name><argument_list pos:start="1686:20" pos:end="1686:31">(<argument pos:start="1686:21" pos:end="1686:21"><expr pos:start="1686:21" pos:end="1686:21"><name pos:start="1686:21" pos:end="1686:21">p</name></expr></argument>, <argument pos:start="1686:24" pos:end="1686:27"><expr pos:start="1686:24" pos:end="1686:27"><name pos:start="1686:24" pos:end="1686:27">arg1</name></expr></argument>, <argument pos:start="1686:30" pos:end="1686:30"><expr pos:start="1686:30" pos:end="1686:30"><literal type="number" pos:start="1686:30" pos:end="1686:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1687:5" pos:end="1687:25">case <expr pos:start="1687:10" pos:end="1687:24"><name pos:start="1687:10" pos:end="1687:24">TARGET_NR_uname</name></expr>:</case>
        <comment type="block" pos:start="1688:9" pos:end="1688:67">/* no need to transcode because we use the linux syscall */</comment>
        <block pos:start="1689:9" pos:end="3541:14">{<block_content pos:start="1690:13" pos:end="3541:14">
            <decl_stmt pos:start="1690:13" pos:end="1690:37"><decl pos:start="1690:13" pos:end="1690:36"><type pos:start="1690:13" pos:end="1690:32"><name pos:start="1690:13" pos:end="1690:30"><name pos:start="1690:13" pos:end="1690:18">struct</name> <name pos:start="1690:20" pos:end="1690:30">new_utsname</name></name> <modifier pos:start="1690:32" pos:end="1690:32">*</modifier></type> <name pos:start="1690:34" pos:end="1690:36">buf</name></decl>;</decl_stmt>
            <if_stmt pos:start="1691:13" pos:end="1692:28"><if pos:start="1691:13" pos:end="1692:28">if <condition pos:start="1691:16" pos:end="1691:62">(<expr pos:start="1691:17" pos:end="1691:61"><operator pos:start="1691:17" pos:end="1691:17">!</operator><call pos:start="1691:18" pos:end="1691:61"><name pos:start="1691:18" pos:end="1691:33">lock_user_struct</name><argument_list pos:start="1691:34" pos:end="1691:61">(<argument pos:start="1691:35" pos:end="1691:46"><expr pos:start="1691:35" pos:end="1691:46"><name pos:start="1691:35" pos:end="1691:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1691:49" pos:end="1691:51"><expr pos:start="1691:49" pos:end="1691:51"><name pos:start="1691:49" pos:end="1691:51">buf</name></expr></argument>, <argument pos:start="1691:54" pos:end="1691:57"><expr pos:start="1691:54" pos:end="1691:57"><name pos:start="1691:54" pos:end="1691:57">arg1</name></expr></argument>, <argument pos:start="1691:60" pos:end="1691:60"><expr pos:start="1691:60" pos:end="1691:60"><literal type="number" pos:start="1691:60" pos:end="1691:60">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1692:17" pos:end="1692:28"><block_content pos:start="1692:17" pos:end="1692:28">
                <goto pos:start="1692:17" pos:end="1692:28">goto <name pos:start="1692:22" pos:end="1692:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1693:13" pos:end="1693:44"><expr pos:start="1693:13" pos:end="1693:43"><name pos:start="1693:13" pos:end="1693:15">ret</name> <operator pos:start="1693:17" pos:end="1693:17">=</operator> <call pos:start="1693:19" pos:end="1693:43"><name pos:start="1693:19" pos:end="1693:27">get_errno</name><argument_list pos:start="1693:28" pos:end="1693:43">(<argument pos:start="1693:29" pos:end="1693:42"><expr pos:start="1693:29" pos:end="1693:42"><call pos:start="1693:29" pos:end="1693:42"><name pos:start="1693:29" pos:end="1693:37">sys_uname</name><argument_list pos:start="1693:38" pos:end="1693:42">(<argument pos:start="1693:39" pos:end="1693:41"><expr pos:start="1693:39" pos:end="1693:41"><name pos:start="1693:39" pos:end="1693:41">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1694:13" pos:end="3541:14"><if pos:start="1694:13" pos:end="3541:14">if <condition pos:start="1694:16" pos:end="1694:31">(<expr pos:start="1694:17" pos:end="1694:30"><operator pos:start="1694:17" pos:end="1694:17">!</operator><call pos:start="1694:18" pos:end="1694:30"><name pos:start="1694:18" pos:end="1694:25">is_error</name><argument_list pos:start="1694:26" pos:end="1694:30">(<argument pos:start="1694:27" pos:end="1694:29"><expr pos:start="1694:27" pos:end="1694:29"><name pos:start="1694:27" pos:end="1694:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1694:33" pos:end="3541:14">{<block_content pos:start="1697:17" pos:end="3541:14">
                <comment type="block" pos:start="1695:17" pos:end="1696:31">/* Overwrite the native machine name with whatever is being
                   emulated. */</comment>
                <expr_stmt pos:start="1697:17" pos:end="1697:69"><expr pos:start="1697:17" pos:end="1697:68"><call pos:start="1697:17" pos:end="1697:68"><name pos:start="1697:17" pos:end="1697:22">strcpy</name> <argument_list pos:start="1697:24" pos:end="1697:68">(<argument pos:start="1697:25" pos:end="1697:36"><expr pos:start="1697:25" pos:end="1697:36"><name pos:start="1697:25" pos:end="1697:36"><name pos:start="1697:25" pos:end="1697:27">buf</name><operator pos:start="1697:28" pos:end="1697:29">-&gt;</operator><name pos:start="1697:30" pos:end="1697:36">machine</name></name></expr></argument>, <argument pos:start="1697:39" pos:end="1697:67"><expr pos:start="1697:39" pos:end="1697:67"><call pos:start="1697:39" pos:end="1697:67"><name pos:start="1697:39" pos:end="1697:58">cpu_to_uname_machine</name><argument_list pos:start="1697:59" pos:end="1697:67">(<argument pos:start="1697:60" pos:end="1697:66"><expr pos:start="1697:60" pos:end="1697:66"><name pos:start="1697:60" pos:end="1697:66">cpu_env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="1698:17" pos:end="1698:71">/* Allow the user to override the reported release.  */</comment>
                <if_stmt pos:start="1699:17" pos:end="3541:14"><if pos:start="1699:17" pos:end="3541:14">if <condition pos:start="1699:20" pos:end="1699:62">(<expr pos:start="1699:21" pos:end="1699:61"><name pos:start="1699:21" pos:end="1699:38">qemu_uname_release</name> <operator pos:start="1699:40" pos:end="1699:41">&amp;&amp;</operator> <operator pos:start="1699:43" pos:end="1699:43">*</operator><name pos:start="1699:44" pos:end="1699:61">qemu_uname_release</name></expr>)</condition> <block pos:start="1699:64" pos:end="3541:14">{<block_content pos:start="1700:21" pos:end="3541:14">
                    <expr_stmt pos:start="1700:21" pos:end="1701:52"><expr pos:start="1700:21" pos:end="1701:51"><call pos:start="1700:21" pos:end="1701:51"><name pos:start="1700:21" pos:end="1700:29">g_strlcpy</name><argument_list pos:start="1700:30" pos:end="1701:51">(<argument pos:start="1700:31" pos:end="1700:42"><expr pos:start="1700:31" pos:end="1700:42"><name pos:start="1700:31" pos:end="1700:42"><name pos:start="1700:31" pos:end="1700:33">buf</name><operator pos:start="1700:34" pos:end="1700:35">-&gt;</operator><name pos:start="1700:36" pos:end="1700:42">release</name></name></expr></argument>, <argument pos:start="1700:45" pos:end="1700:62"><expr pos:start="1700:45" pos:end="1700:62"><name pos:start="1700:45" pos:end="1700:62">qemu_uname_release</name></expr></argument>,
                              <argument pos:start="1701:31" pos:end="1701:50"><expr pos:start="1701:31" pos:end="1701:50"><sizeof pos:start="1701:31" pos:end="1701:50">sizeof<argument_list pos:start="1701:37" pos:end="1701:50">(<argument pos:start="1701:38" pos:end="1701:49"><expr pos:start="1701:38" pos:end="1701:49"><name pos:start="1701:38" pos:end="1701:49"><name pos:start="1701:38" pos:end="1701:40">buf</name><operator pos:start="1701:41" pos:end="1701:42">-&gt;</operator><name pos:start="1701:43" pos:end="1701:49">release</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1702:13" pos:end="1704:0"><expr pos:start="1702:13" pos:end="1702:44"><call pos:start="1702:13" pos:end="1702:44"><name pos:start="1702:13" pos:end="1702:30">unlock_user_struct</name><argument_list pos:start="1702:31" pos:end="1702:44">(<argument pos:start="1702:32" pos:end="1702:34"><expr pos:start="1702:32" pos:end="1702:34"><name pos:start="1702:32" pos:end="1702:34">buf</name></expr></argument>, <argument pos:start="1702:37" pos:end="1702:40"><expr pos:start="1702:37" pos:end="1702:40"><name pos:start="1702:37" pos:end="1702:40">arg1</name></expr></argument>, <argument pos:start="1702:43" pos:end="1702:43"><expr pos:start="1702:43" pos:end="1702:43"><literal type="number" pos:start="1702:43" pos:end="1702:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1703:1" pos:end="1703:18">#<cpp:directive pos:start="1703:2" pos:end="1703:6">ifdef</cpp:directive> <name pos:start="1703:8" pos:end="1703:18">TARGET_I386</name></cpp:ifdef>
    <case pos:start="1704:5" pos:end="1704:30">case <expr pos:start="1704:10" pos:end="1704:29"><name pos:start="1704:10" pos:end="1704:29">TARGET_NR_modify_ldt</name></expr>:</case>
        <expr_stmt pos:start="1705:9" pos:end="1707:0"><expr pos:start="1705:9" pos:end="1705:54"><name pos:start="1705:9" pos:end="1705:11">ret</name> <operator pos:start="1705:13" pos:end="1705:13">=</operator> <call pos:start="1705:15" pos:end="1705:54"><name pos:start="1705:15" pos:end="1705:27">do_modify_ldt</name><argument_list pos:start="1705:28" pos:end="1705:54">(<argument pos:start="1705:29" pos:end="1705:35"><expr pos:start="1705:29" pos:end="1705:35"><name pos:start="1705:29" pos:end="1705:35">cpu_env</name></expr></argument>, <argument pos:start="1705:38" pos:end="1705:41"><expr pos:start="1705:38" pos:end="1705:41"><name pos:start="1705:38" pos:end="1705:41">arg1</name></expr></argument>, <argument pos:start="1705:44" pos:end="1705:47"><expr pos:start="1705:44" pos:end="1705:47"><name pos:start="1705:44" pos:end="1705:47">arg2</name></expr></argument>, <argument pos:start="1705:50" pos:end="1705:53"><expr pos:start="1705:50" pos:end="1705:53"><name pos:start="1705:50" pos:end="1705:53">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="1706:1" pos:end="1706:27">#<cpp:directive pos:start="1706:2" pos:end="1706:3">if</cpp:directive> <expr pos:start="1706:5" pos:end="1706:27"><operator pos:start="1706:5" pos:end="1706:5">!</operator><call pos:start="1706:6" pos:end="1706:27"><name pos:start="1706:6" pos:end="1706:12">defined</name><argument_list pos:start="1706:13" pos:end="1706:27">(<argument pos:start="1706:14" pos:end="1706:26"><expr pos:start="1706:14" pos:end="1706:26"><name pos:start="1706:14" pos:end="1706:26">TARGET_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="1707:5" pos:end="1707:27">case <expr pos:start="1707:10" pos:end="1707:26"><name pos:start="1707:10" pos:end="1707:26">TARGET_NR_vm86old</name></expr>:</case>
        <goto pos:start="1708:9" pos:end="1708:27">goto <name pos:start="1708:14" pos:end="1708:26">unimplemented</name>;</goto>
    <case pos:start="1709:5" pos:end="1709:24">case <expr pos:start="1709:10" pos:end="1709:23"><name pos:start="1709:10" pos:end="1709:23">TARGET_NR_vm86</name></expr>:</case>
        <expr_stmt pos:start="1710:9" pos:end="1713:0"><expr pos:start="1710:9" pos:end="1710:42"><name pos:start="1710:9" pos:end="1710:11">ret</name> <operator pos:start="1710:13" pos:end="1710:13">=</operator> <call pos:start="1710:15" pos:end="1710:42"><name pos:start="1710:15" pos:end="1710:21">do_vm86</name><argument_list pos:start="1710:22" pos:end="1710:42">(<argument pos:start="1710:23" pos:end="1710:29"><expr pos:start="1710:23" pos:end="1710:29"><name pos:start="1710:23" pos:end="1710:29">cpu_env</name></expr></argument>, <argument pos:start="1710:32" pos:end="1710:35"><expr pos:start="1710:32" pos:end="1710:35"><name pos:start="1710:32" pos:end="1710:35">arg1</name></expr></argument>, <argument pos:start="1710:38" pos:end="1710:41"><expr pos:start="1710:38" pos:end="1710:41"><name pos:start="1710:38" pos:end="1710:41">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1711:1" pos:end="1711:6">#<cpp:directive pos:start="1711:2" pos:end="1711:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="1712:1" pos:end="1712:6">#<cpp:directive pos:start="1712:2" pos:end="1712:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1713:5" pos:end="1713:28">case <expr pos:start="1713:10" pos:end="1713:27"><name pos:start="1713:10" pos:end="1713:27">TARGET_NR_adjtimex</name></expr>:</case>
        <goto pos:start="1714:9" pos:end="1716:0">goto <name pos:start="1714:14" pos:end="1714:26">unimplemented</name>;</goto>
<cpp:ifdef pos:start="1715:1" pos:end="1715:30">#<cpp:directive pos:start="1715:2" pos:end="1715:6">ifdef</cpp:directive> <name pos:start="1715:8" pos:end="1715:30">TARGET_NR_create_module</name></cpp:ifdef>
    <case pos:start="1716:5" pos:end="1718:0">case <expr pos:start="1716:10" pos:end="1716:32"><name pos:start="1716:10" pos:end="1716:32">TARGET_NR_create_module</name></expr>:</case>
<cpp:endif pos:start="1717:1" pos:end="1717:6">#<cpp:directive pos:start="1717:2" pos:end="1717:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1718:5" pos:end="1718:31">case <expr pos:start="1718:10" pos:end="1718:30"><name pos:start="1718:10" pos:end="1718:30">TARGET_NR_init_module</name></expr>:</case>
    <case pos:start="1719:5" pos:end="1721:0">case <expr pos:start="1719:10" pos:end="1719:32"><name pos:start="1719:10" pos:end="1719:32">TARGET_NR_delete_module</name></expr>:</case>
<cpp:ifdef pos:start="1720:1" pos:end="1720:32">#<cpp:directive pos:start="1720:2" pos:end="1720:6">ifdef</cpp:directive> <name pos:start="1720:8" pos:end="1720:32">TARGET_NR_get_kernel_syms</name></cpp:ifdef>
    <case pos:start="1721:5" pos:end="1723:0">case <expr pos:start="1721:10" pos:end="1721:34"><name pos:start="1721:10" pos:end="1721:34">TARGET_NR_get_kernel_syms</name></expr>:</case>
<cpp:endif pos:start="1722:1" pos:end="1722:6">#<cpp:directive pos:start="1722:2" pos:end="1722:6">endif</cpp:directive></cpp:endif>
        <goto pos:start="1723:9" pos:end="1723:27">goto <name pos:start="1723:14" pos:end="1723:26">unimplemented</name>;</goto>
    <case pos:start="1724:5" pos:end="1724:28">case <expr pos:start="1724:10" pos:end="1724:27"><name pos:start="1724:10" pos:end="1724:27">TARGET_NR_quotactl</name></expr>:</case>
        <goto pos:start="1725:9" pos:end="1725:27">goto <name pos:start="1725:14" pos:end="1725:26">unimplemented</name>;</goto>
    <case pos:start="1726:5" pos:end="1726:27">case <expr pos:start="1726:10" pos:end="1726:26"><name pos:start="1726:10" pos:end="1726:26">TARGET_NR_getpgid</name></expr>:</case>
        <expr_stmt pos:start="1727:9" pos:end="1727:39"><expr pos:start="1727:9" pos:end="1727:38"><name pos:start="1727:9" pos:end="1727:11">ret</name> <operator pos:start="1727:13" pos:end="1727:13">=</operator> <call pos:start="1727:15" pos:end="1727:38"><name pos:start="1727:15" pos:end="1727:23">get_errno</name><argument_list pos:start="1727:24" pos:end="1727:38">(<argument pos:start="1727:25" pos:end="1727:37"><expr pos:start="1727:25" pos:end="1727:37"><call pos:start="1727:25" pos:end="1727:37"><name pos:start="1727:25" pos:end="1727:31">getpgid</name><argument_list pos:start="1727:32" pos:end="1727:37">(<argument pos:start="1727:33" pos:end="1727:36"><expr pos:start="1727:33" pos:end="1727:36"><name pos:start="1727:33" pos:end="1727:36">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1728:5" pos:end="1728:26">case <expr pos:start="1728:10" pos:end="1728:25"><name pos:start="1728:10" pos:end="1728:25">TARGET_NR_fchdir</name></expr>:</case>
        <expr_stmt pos:start="1729:9" pos:end="1731:0"><expr pos:start="1729:9" pos:end="1729:37"><name pos:start="1729:9" pos:end="1729:11">ret</name> <operator pos:start="1729:13" pos:end="1729:13">=</operator> <call pos:start="1729:15" pos:end="1729:37"><name pos:start="1729:15" pos:end="1729:23">get_errno</name><argument_list pos:start="1729:24" pos:end="1729:37">(<argument pos:start="1729:25" pos:end="1729:36"><expr pos:start="1729:25" pos:end="1729:36"><call pos:start="1729:25" pos:end="1729:36"><name pos:start="1729:25" pos:end="1729:30">fchdir</name><argument_list pos:start="1729:31" pos:end="1729:36">(<argument pos:start="1729:32" pos:end="1729:35"><expr pos:start="1729:32" pos:end="1729:35"><name pos:start="1729:32" pos:end="1729:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1730:1" pos:end="1730:24">#<cpp:directive pos:start="1730:2" pos:end="1730:6">ifdef</cpp:directive> <name pos:start="1730:8" pos:end="1730:24">TARGET_NR_bdflush</name></cpp:ifdef> <comment type="block" pos:start="1730:26" pos:end="1730:44">/* not on x86_64 */</comment>
    <case pos:start="1731:5" pos:end="1731:27">case <expr pos:start="1731:10" pos:end="1731:26"><name pos:start="1731:10" pos:end="1731:26">TARGET_NR_bdflush</name></expr>:</case>
        <goto pos:start="1732:9" pos:end="1735:0">goto <name pos:start="1732:14" pos:end="1732:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1733:1" pos:end="1733:6">#<cpp:directive pos:start="1733:2" pos:end="1733:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1734:1" pos:end="1734:22">#<cpp:directive pos:start="1734:2" pos:end="1734:6">ifdef</cpp:directive> <name pos:start="1734:8" pos:end="1734:22">TARGET_NR_sysfs</name></cpp:ifdef>
    <case pos:start="1735:5" pos:end="1735:25">case <expr pos:start="1735:10" pos:end="1735:24"><name pos:start="1735:10" pos:end="1735:24">TARGET_NR_sysfs</name></expr>:</case>
        <goto pos:start="1736:9" pos:end="1738:0">goto <name pos:start="1736:14" pos:end="1736:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1737:1" pos:end="1737:6">#<cpp:directive pos:start="1737:2" pos:end="1737:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1738:5" pos:end="1738:31">case <expr pos:start="1738:10" pos:end="1738:30"><name pos:start="1738:10" pos:end="1738:30">TARGET_NR_personality</name></expr>:</case>
        <expr_stmt pos:start="1739:9" pos:end="1741:0"><expr pos:start="1739:9" pos:end="1739:42"><name pos:start="1739:9" pos:end="1739:11">ret</name> <operator pos:start="1739:13" pos:end="1739:13">=</operator> <call pos:start="1739:15" pos:end="1739:42"><name pos:start="1739:15" pos:end="1739:23">get_errno</name><argument_list pos:start="1739:24" pos:end="1739:42">(<argument pos:start="1739:25" pos:end="1739:41"><expr pos:start="1739:25" pos:end="1739:41"><call pos:start="1739:25" pos:end="1739:41"><name pos:start="1739:25" pos:end="1739:35">personality</name><argument_list pos:start="1739:36" pos:end="1739:41">(<argument pos:start="1739:37" pos:end="1739:40"><expr pos:start="1739:37" pos:end="1739:40"><name pos:start="1739:37" pos:end="1739:40">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1740:1" pos:end="1740:28">#<cpp:directive pos:start="1740:2" pos:end="1740:6">ifdef</cpp:directive> <name pos:start="1740:8" pos:end="1740:28">TARGET_NR_afs_syscall</name></cpp:ifdef>
    <case pos:start="1741:5" pos:end="1741:31">case <expr pos:start="1741:10" pos:end="1741:30"><name pos:start="1741:10" pos:end="1741:30">TARGET_NR_afs_syscall</name></expr>:</case>
        <goto pos:start="1742:9" pos:end="1745:0">goto <name pos:start="1742:14" pos:end="1742:26">unimplemented</name>;</goto>
<cpp:endif pos:start="1743:1" pos:end="1743:6">#<cpp:directive pos:start="1743:2" pos:end="1743:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1744:1" pos:end="1744:24">#<cpp:directive pos:start="1744:2" pos:end="1744:6">ifdef</cpp:directive> <name pos:start="1744:8" pos:end="1744:24">TARGET_NR__llseek</name></cpp:ifdef> <comment type="block" pos:start="1744:26" pos:end="1744:43">/* Not on alpha */</comment>
    <case pos:start="1745:5" pos:end="1745:27">case <expr pos:start="1745:10" pos:end="1745:26"><name pos:start="1745:10" pos:end="1745:26">TARGET_NR__llseek</name></expr>:</case>
        <block pos:start="1746:9" pos:end="3541:14">{<block_content pos:start="1747:13" pos:end="3541:14">
            <decl_stmt pos:start="1747:13" pos:end="1749:0"><decl pos:start="1747:13" pos:end="1747:23"><type pos:start="1747:13" pos:end="1747:19"><name pos:start="1747:13" pos:end="1747:19">int64_t</name></type> <name pos:start="1747:21" pos:end="1747:23">res</name></decl>;</decl_stmt>
<cpp:if pos:start="1748:1" pos:end="1748:25">#<cpp:directive pos:start="1748:2" pos:end="1748:3">if</cpp:directive> <expr pos:start="1748:5" pos:end="1748:25"><operator pos:start="1748:5" pos:end="1748:5">!</operator><call pos:start="1748:6" pos:end="1748:25"><name pos:start="1748:6" pos:end="1748:12">defined</name><argument_list pos:start="1748:13" pos:end="1748:25">(<argument pos:start="1748:14" pos:end="1748:24"><expr pos:start="1748:14" pos:end="1748:24"><name pos:start="1748:14" pos:end="1748:24">__NR_llseek</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt pos:start="1749:13" pos:end="1749:78"><expr pos:start="1749:13" pos:end="1749:77"><name pos:start="1749:13" pos:end="1749:15">res</name> <operator pos:start="1749:17" pos:end="1749:17">=</operator> <call pos:start="1749:19" pos:end="1749:77"><name pos:start="1749:19" pos:end="1749:23">lseek</name><argument_list pos:start="1749:24" pos:end="1749:77">(<argument pos:start="1749:25" pos:end="1749:28"><expr pos:start="1749:25" pos:end="1749:28"><name pos:start="1749:25" pos:end="1749:28">arg1</name></expr></argument>, <argument pos:start="1749:31" pos:end="1749:70"><expr pos:start="1749:31" pos:end="1749:70"><operator pos:start="1749:31" pos:end="1749:31">(</operator><operator pos:start="1749:32" pos:end="1749:32">(</operator><name pos:start="1749:33" pos:end="1749:40">uint64_t</name><operator pos:start="1749:41" pos:end="1749:41">)</operator><name pos:start="1749:42" pos:end="1749:45">arg2</name> <operator pos:start="1749:47" pos:end="1749:48">&lt;&lt;</operator> <literal type="number" pos:start="1749:50" pos:end="1749:51">32</literal><operator pos:start="1749:52" pos:end="1749:52">)</operator> <operator pos:start="1749:54" pos:end="1749:54">|</operator> <operator pos:start="1749:56" pos:end="1749:56">(</operator><name pos:start="1749:57" pos:end="1749:65">abi_ulong</name><operator pos:start="1749:66" pos:end="1749:66">)</operator><name pos:start="1749:67" pos:end="1749:70">arg3</name></expr></argument>, <argument pos:start="1749:73" pos:end="1749:76"><expr pos:start="1749:73" pos:end="1749:76"><name pos:start="1749:73" pos:end="1749:76">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1750:13" pos:end="3541:14"><if pos:start="1750:13" pos:end="1752:13">if <condition pos:start="1750:16" pos:end="1750:26">(<expr pos:start="1750:17" pos:end="1750:25"><name pos:start="1750:17" pos:end="1750:19">res</name> <operator pos:start="1750:21" pos:end="1750:22">==</operator> <operator pos:start="1750:24" pos:end="1750:24">-</operator><literal type="number" pos:start="1750:25" pos:end="1750:25">1</literal></expr>)</condition> <block pos:start="1750:28" pos:end="1752:13">{<block_content pos:start="1751:17" pos:end="1751:37">
                <expr_stmt pos:start="1751:17" pos:end="1751:37"><expr pos:start="1751:17" pos:end="1751:36"><name pos:start="1751:17" pos:end="1751:19">ret</name> <operator pos:start="1751:21" pos:end="1751:21">=</operator> <call pos:start="1751:23" pos:end="1751:36"><name pos:start="1751:23" pos:end="1751:31">get_errno</name><argument_list pos:start="1751:32" pos:end="1751:36">(<argument pos:start="1751:33" pos:end="1751:35"><expr pos:start="1751:33" pos:end="1751:35"><name pos:start="1751:33" pos:end="1751:35">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1752:15" pos:end="3541:14">else <block pos:start="1752:20" pos:end="3541:14">{<block_content pos:start="1753:17" pos:end="3541:14">
                <expr_stmt pos:start="1753:17" pos:end="1755:0"><expr pos:start="1753:17" pos:end="1753:23"><name pos:start="1753:17" pos:end="1753:19">ret</name> <operator pos:start="1753:21" pos:end="1753:21">=</operator> <literal type="number" pos:start="1753:23" pos:end="1753:23">0</literal></expr>;</expr_stmt>
<cpp:else pos:start="1754:1" pos:end="1754:5">#<cpp:directive pos:start="1754:2" pos:end="1754:5">else</cpp:directive></cpp:else>
            <expr_stmt pos:start="1755:13" pos:end="1757:0"><expr pos:start="1755:13" pos:end="1755:66"><name pos:start="1755:13" pos:end="1755:15">ret</name> <operator pos:start="1755:17" pos:end="1755:17">=</operator> <call pos:start="1755:19" pos:end="1755:66"><name pos:start="1755:19" pos:end="1755:27">get_errno</name><argument_list pos:start="1755:28" pos:end="1755:66">(<argument pos:start="1755:29" pos:end="1755:65"><expr pos:start="1755:29" pos:end="1755:65"><call pos:start="1755:29" pos:end="1755:65"><name pos:start="1755:29" pos:end="1755:35">_llseek</name><argument_list pos:start="1755:36" pos:end="1755:65">(<argument pos:start="1755:37" pos:end="1755:40"><expr pos:start="1755:37" pos:end="1755:40"><name pos:start="1755:37" pos:end="1755:40">arg1</name></expr></argument>, <argument pos:start="1755:43" pos:end="1755:46"><expr pos:start="1755:43" pos:end="1755:46"><name pos:start="1755:43" pos:end="1755:46">arg2</name></expr></argument>, <argument pos:start="1755:49" pos:end="1755:52"><expr pos:start="1755:49" pos:end="1755:52"><name pos:start="1755:49" pos:end="1755:52">arg3</name></expr></argument>, <argument pos:start="1755:55" pos:end="1755:58"><expr pos:start="1755:55" pos:end="1755:58"><operator pos:start="1755:55" pos:end="1755:55">&amp;</operator><name pos:start="1755:56" pos:end="1755:58">res</name></expr></argument>, <argument pos:start="1755:61" pos:end="1755:64"><expr pos:start="1755:61" pos:end="1755:64"><name pos:start="1755:61" pos:end="1755:64">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1756:1" pos:end="1756:6">#<cpp:directive pos:start="1756:2" pos:end="1756:6">endif</cpp:directive></cpp:endif>
            <if_stmt pos:start="1757:13" pos:end="3541:14"><if pos:start="1757:13" pos:end="3541:14">if <condition pos:start="1757:16" pos:end="1757:54">(<expr pos:start="1757:17" pos:end="1757:53"><operator pos:start="1757:17" pos:end="1757:17">(</operator><name pos:start="1757:18" pos:end="1757:20">ret</name> <operator pos:start="1757:22" pos:end="1757:23">==</operator> <literal type="number" pos:start="1757:25" pos:end="1757:25">0</literal><operator pos:start="1757:26" pos:end="1757:26">)</operator> <operator pos:start="1757:28" pos:end="1757:29">&amp;&amp;</operator> <call pos:start="1757:31" pos:end="1757:53"><name pos:start="1757:31" pos:end="1757:42">put_user_s64</name><argument_list pos:start="1757:43" pos:end="1757:53">(<argument pos:start="1757:44" pos:end="1757:46"><expr pos:start="1757:44" pos:end="1757:46"><name pos:start="1757:44" pos:end="1757:46">res</name></expr></argument>, <argument pos:start="1757:49" pos:end="1757:52"><expr pos:start="1757:49" pos:end="1757:52"><name pos:start="1757:49" pos:end="1757:52">arg4</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1757:56" pos:end="3541:14">{<block_content pos:start="1758:17" pos:end="3541:14">
                <goto pos:start="1758:17" pos:end="1761:0">goto <name pos:start="1758:22" pos:end="1758:27">efault</name>;</goto>
<cpp:endif pos:start="1759:1" pos:end="1759:6">#<cpp:directive pos:start="1759:2" pos:end="1759:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1760:1" pos:end="1760:25">#<cpp:directive pos:start="1760:2" pos:end="1760:6">ifdef</cpp:directive> <name pos:start="1760:8" pos:end="1760:25">TARGET_NR_getdents</name></cpp:ifdef>
    <case pos:start="1761:5" pos:end="1764:0">case <expr pos:start="1761:10" pos:end="1761:27"><name pos:start="1761:10" pos:end="1761:27">TARGET_NR_getdents</name></expr>:</case>
<cpp:ifdef pos:start="1762:1" pos:end="1762:20">#<cpp:directive pos:start="1762:2" pos:end="1762:6">ifdef</cpp:directive> <name pos:start="1762:8" pos:end="1762:20">__NR_getdents</name></cpp:ifdef>
<cpp:if pos:start="1763:1" pos:end="1763:49">#<cpp:directive pos:start="1763:2" pos:end="1763:3">if</cpp:directive> <expr pos:start="1763:5" pos:end="1763:49"><name pos:start="1763:5" pos:end="1763:19">TARGET_ABI_BITS</name> <operator pos:start="1763:21" pos:end="1763:22">==</operator> <literal type="number" pos:start="1763:24" pos:end="1763:25">32</literal> <operator pos:start="1763:27" pos:end="1763:28">&amp;&amp;</operator> <name pos:start="1763:30" pos:end="1763:43">HOST_LONG_BITS</name> <operator pos:start="1763:45" pos:end="1763:46">==</operator> <literal type="number" pos:start="1763:48" pos:end="1763:49">64</literal></expr></cpp:if>
        <block pos:start="1764:9" pos:end="3541:14">{<block_content pos:start="1765:13" pos:end="3541:14">
            <decl_stmt pos:start="1765:13" pos:end="1765:46"><decl pos:start="1765:13" pos:end="1765:45"><type pos:start="1765:13" pos:end="1765:34"><name pos:start="1765:13" pos:end="1765:32"><name pos:start="1765:13" pos:end="1765:18">struct</name> <name pos:start="1765:20" pos:end="1765:32">target_dirent</name></name> <modifier pos:start="1765:34" pos:end="1765:34">*</modifier></type><name pos:start="1765:35" pos:end="1765:45">target_dirp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1766:13" pos:end="1766:38"><decl pos:start="1766:13" pos:end="1766:37"><type pos:start="1766:13" pos:end="1766:33"><name pos:start="1766:13" pos:end="1766:31"><name pos:start="1766:13" pos:end="1766:18">struct</name> <name pos:start="1766:20" pos:end="1766:31">linux_dirent</name></name> <modifier pos:start="1766:33" pos:end="1766:33">*</modifier></type><name pos:start="1766:34" pos:end="1766:37">dirp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1767:13" pos:end="1767:34"><decl pos:start="1767:13" pos:end="1767:33"><type pos:start="1767:13" pos:end="1767:20"><name pos:start="1767:13" pos:end="1767:20">abi_long</name></type> <name pos:start="1767:22" pos:end="1767:26">count</name> <init pos:start="1767:28" pos:end="1767:33">= <expr pos:start="1767:30" pos:end="1767:33"><name pos:start="1767:30" pos:end="1767:33">arg3</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="1768:13" pos:end="1768:39"><expr pos:start="1768:13" pos:end="1768:38"><name pos:start="1768:13" pos:end="1768:16">dirp</name> <operator pos:start="1768:18" pos:end="1768:18">=</operator> <call pos:start="1768:20" pos:end="1768:38"><name pos:start="1768:20" pos:end="1768:31">g_try_malloc</name><argument_list pos:start="1768:32" pos:end="1768:38">(<argument pos:start="1768:33" pos:end="1768:37"><expr pos:start="1768:33" pos:end="1768:37"><name pos:start="1768:33" pos:end="1768:37">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1769:13" pos:end="3541:14"><if pos:start="1769:13" pos:end="3541:14">if <condition pos:start="1769:16" pos:end="1769:22">(<expr pos:start="1769:17" pos:end="1769:21"><operator pos:start="1769:17" pos:end="1769:17">!</operator><name pos:start="1769:18" pos:end="1769:21">dirp</name></expr>)</condition> <block pos:start="1769:24" pos:end="3541:14">{<block_content pos:start="1770:17" pos:end="3541:14">
                <expr_stmt pos:start="1770:17" pos:end="1770:37"><expr pos:start="1770:17" pos:end="1770:36"><name pos:start="1770:17" pos:end="1770:19">ret</name> <operator pos:start="1770:21" pos:end="1770:21">=</operator> <operator pos:start="1770:23" pos:end="1770:23">-</operator><name pos:start="1770:24" pos:end="1770:36">TARGET_ENOMEM</name></expr>;</expr_stmt>
                <goto pos:start="1771:17" pos:end="1771:26">goto <name pos:start="1771:22" pos:end="1771:25">fail</name>;</goto>
            <expr_stmt pos:start="1772:13" pos:end="1772:61"><expr pos:start="1772:13" pos:end="1772:60"><name pos:start="1772:13" pos:end="1772:15">ret</name> <operator pos:start="1772:17" pos:end="1772:17">=</operator> <call pos:start="1772:19" pos:end="1772:60"><name pos:start="1772:19" pos:end="1772:27">get_errno</name><argument_list pos:start="1772:28" pos:end="1772:60">(<argument pos:start="1772:29" pos:end="1772:59"><expr pos:start="1772:29" pos:end="1772:59"><call pos:start="1772:29" pos:end="1772:59"><name pos:start="1772:29" pos:end="1772:40">sys_getdents</name><argument_list pos:start="1772:41" pos:end="1772:59">(<argument pos:start="1772:42" pos:end="1772:45"><expr pos:start="1772:42" pos:end="1772:45"><name pos:start="1772:42" pos:end="1772:45">arg1</name></expr></argument>, <argument pos:start="1772:48" pos:end="1772:51"><expr pos:start="1772:48" pos:end="1772:51"><name pos:start="1772:48" pos:end="1772:51">dirp</name></expr></argument>, <argument pos:start="1772:54" pos:end="1772:58"><expr pos:start="1772:54" pos:end="1772:58"><name pos:start="1772:54" pos:end="1772:58">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1773:13" pos:end="3541:14"><if pos:start="1773:13" pos:end="3541:14">if <condition pos:start="1773:16" pos:end="1773:31">(<expr pos:start="1773:17" pos:end="1773:30"><operator pos:start="1773:17" pos:end="1773:17">!</operator><call pos:start="1773:18" pos:end="1773:30"><name pos:start="1773:18" pos:end="1773:25">is_error</name><argument_list pos:start="1773:26" pos:end="1773:30">(<argument pos:start="1773:27" pos:end="1773:29"><expr pos:start="1773:27" pos:end="1773:29"><name pos:start="1773:27" pos:end="1773:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1773:33" pos:end="3541:14">{<block_content pos:start="1774:17" pos:end="3541:14">
                <decl_stmt pos:start="1774:17" pos:end="1774:40"><decl pos:start="1774:17" pos:end="1774:39"><type pos:start="1774:17" pos:end="1774:37"><name pos:start="1774:17" pos:end="1774:35"><name pos:start="1774:17" pos:end="1774:22">struct</name> <name pos:start="1774:24" pos:end="1774:35">linux_dirent</name></name> <modifier pos:start="1774:37" pos:end="1774:37">*</modifier></type><name pos:start="1774:38" pos:end="1774:39">de</name></decl>;</decl_stmt>
		<decl_stmt pos:start="1775:17" pos:end="1775:42"><decl pos:start="1775:17" pos:end="1775:41"><type pos:start="1775:17" pos:end="1775:38"><name pos:start="1775:17" pos:end="1775:36"><name pos:start="1775:17" pos:end="1775:22">struct</name> <name pos:start="1775:24" pos:end="1775:36">target_dirent</name></name> <modifier pos:start="1775:38" pos:end="1775:38">*</modifier></type><name pos:start="1775:39" pos:end="1775:41">tde</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1776:17" pos:end="1776:30"><decl pos:start="1776:17" pos:end="1776:29"><type pos:start="1776:17" pos:end="1776:19"><name pos:start="1776:17" pos:end="1776:19">int</name></type> <name pos:start="1776:21" pos:end="1776:23">len</name> <init pos:start="1776:25" pos:end="1776:29">= <expr pos:start="1776:27" pos:end="1776:29"><name pos:start="1776:27" pos:end="1776:29">ret</name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="1777:17" pos:end="1777:36"><decl pos:start="1777:17" pos:end="1777:26"><type pos:start="1777:17" pos:end="1777:19"><name pos:start="1777:17" pos:end="1777:19">int</name></type> <name pos:start="1777:21" pos:end="1777:26">reclen</name></decl>, <decl pos:start="1777:29" pos:end="1777:35"><type ref="prev" pos:start="1777:17" pos:end="1777:19"/><name pos:start="1777:29" pos:end="1777:35">treclen</name></decl>;</decl_stmt>
		<decl_stmt pos:start="1778:17" pos:end="1778:37"><decl pos:start="1778:17" pos:end="1778:26"><type pos:start="1778:17" pos:end="1778:19"><name pos:start="1778:17" pos:end="1778:19">int</name></type> <name pos:start="1778:21" pos:end="1778:26">count1</name></decl>, <decl pos:start="1778:29" pos:end="1778:36"><type ref="prev" pos:start="1778:17" pos:end="1778:19"/><name pos:start="1778:29" pos:end="1778:36">tnamelen</name></decl>;</decl_stmt>
		<expr_stmt pos:start="1779:17" pos:end="1779:27"><expr pos:start="1779:17" pos:end="1779:26"><name pos:start="1779:17" pos:end="1779:22">count1</name> <operator pos:start="1779:24" pos:end="1779:24">=</operator> <literal type="number" pos:start="1779:26" pos:end="1779:26">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="1780:17" pos:end="1780:26"><expr pos:start="1780:17" pos:end="1780:25"><name pos:start="1780:17" pos:end="1780:18">de</name> <operator pos:start="1780:20" pos:end="1780:20">=</operator> <name pos:start="1780:22" pos:end="1780:25">dirp</name></expr>;</expr_stmt>
                <if_stmt pos:start="1781:17" pos:end="1782:32"><if pos:start="1781:17" pos:end="1782:32">if <condition pos:start="1781:20" pos:end="1781:77">(<expr pos:start="1781:21" pos:end="1781:76"><operator pos:start="1781:21" pos:end="1781:21">!</operator><operator pos:start="1781:22" pos:end="1781:22">(</operator><name pos:start="1781:23" pos:end="1781:33">target_dirp</name> <operator pos:start="1781:35" pos:end="1781:35">=</operator> <call pos:start="1781:37" pos:end="1781:75"><name pos:start="1781:37" pos:end="1781:45">lock_user</name><argument_list pos:start="1781:46" pos:end="1781:75">(<argument pos:start="1781:47" pos:end="1781:58"><expr pos:start="1781:47" pos:end="1781:58"><name pos:start="1781:47" pos:end="1781:58">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1781:61" pos:end="1781:64"><expr pos:start="1781:61" pos:end="1781:64"><name pos:start="1781:61" pos:end="1781:64">arg2</name></expr></argument>, <argument pos:start="1781:67" pos:end="1781:71"><expr pos:start="1781:67" pos:end="1781:71"><name pos:start="1781:67" pos:end="1781:71">count</name></expr></argument>, <argument pos:start="1781:74" pos:end="1781:74"><expr pos:start="1781:74" pos:end="1781:74"><literal type="number" pos:start="1781:74" pos:end="1781:74">0</literal></expr></argument>)</argument_list></call><operator pos:start="1781:76" pos:end="1781:76">)</operator></expr>)</condition><block type="pseudo" pos:start="1782:21" pos:end="1782:32"><block_content pos:start="1782:21" pos:end="1782:32">
                    <goto pos:start="1782:21" pos:end="1782:32">goto <name pos:start="1782:26" pos:end="1782:31">efault</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt pos:start="1783:17" pos:end="1783:34"><expr pos:start="1783:17" pos:end="1783:33"><name pos:start="1783:17" pos:end="1783:19">tde</name> <operator pos:start="1783:21" pos:end="1783:21">=</operator> <name pos:start="1783:23" pos:end="1783:33">target_dirp</name></expr>;</expr_stmt>
                <while pos:start="1784:17" pos:end="3541:14">while <condition pos:start="1784:23" pos:end="1784:31">(<expr pos:start="1784:24" pos:end="1784:30"><name pos:start="1784:24" pos:end="1784:26">len</name> <operator pos:start="1784:28" pos:end="1784:28">&gt;</operator> <literal type="number" pos:start="1784:30" pos:end="1784:30">0</literal></expr>)</condition> <block pos:start="1784:33" pos:end="3541:14">{<block_content pos:start="1785:21" pos:end="3541:14">
                    <expr_stmt pos:start="1785:21" pos:end="1785:42"><expr pos:start="1785:21" pos:end="1785:41"><name pos:start="1785:21" pos:end="1785:26">reclen</name> <operator pos:start="1785:28" pos:end="1785:28">=</operator> <name pos:start="1785:30" pos:end="1785:41"><name pos:start="1785:30" pos:end="1785:31">de</name><operator pos:start="1785:32" pos:end="1785:33">-&gt;</operator><name pos:start="1785:34" pos:end="1785:41">d_reclen</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1786:21" pos:end="1786:78"><expr pos:start="1786:21" pos:end="1786:77"><name pos:start="1786:21" pos:end="1786:28">tnamelen</name> <operator pos:start="1786:30" pos:end="1786:30">=</operator> <name pos:start="1786:32" pos:end="1786:37">reclen</name> <operator pos:start="1786:39" pos:end="1786:39">-</operator> <call pos:start="1786:41" pos:end="1786:77"><name pos:start="1786:41" pos:end="1786:48">offsetof</name><argument_list pos:start="1786:49" pos:end="1786:77">(<argument pos:start="1786:50" pos:end="1786:68"><expr pos:start="1786:50" pos:end="1786:68">struct <name pos:start="1786:57" pos:end="1786:68">linux_dirent</name></expr></argument>, <argument pos:start="1786:71" pos:end="1786:76"><expr pos:start="1786:71" pos:end="1786:76"><name pos:start="1786:71" pos:end="1786:76">d_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1787:21" pos:end="1787:42"><expr pos:start="1787:21" pos:end="1787:41"><call pos:start="1787:21" pos:end="1787:41"><name pos:start="1787:21" pos:end="1787:26">assert</name><argument_list pos:start="1787:27" pos:end="1787:41">(<argument pos:start="1787:28" pos:end="1787:40"><expr pos:start="1787:28" pos:end="1787:40"><name pos:start="1787:28" pos:end="1787:35">tnamelen</name> <operator pos:start="1787:37" pos:end="1787:38">&gt;=</operator> <literal type="number" pos:start="1787:40" pos:end="1787:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1788:21" pos:end="1788:80"><expr pos:start="1788:21" pos:end="1788:79"><name pos:start="1788:21" pos:end="1788:27">treclen</name> <operator pos:start="1788:29" pos:end="1788:29">=</operator> <name pos:start="1788:31" pos:end="1788:38">tnamelen</name> <operator pos:start="1788:40" pos:end="1788:40">+</operator> <call pos:start="1788:42" pos:end="1788:79"><name pos:start="1788:42" pos:end="1788:49">offsetof</name><argument_list pos:start="1788:50" pos:end="1788:79">(<argument pos:start="1788:51" pos:end="1788:70"><expr pos:start="1788:51" pos:end="1788:70">struct <name pos:start="1788:58" pos:end="1788:70">target_dirent</name></expr></argument>, <argument pos:start="1788:73" pos:end="1788:78"><expr pos:start="1788:73" pos:end="1788:78"><name pos:start="1788:73" pos:end="1788:78">d_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1789:21" pos:end="1789:54"><expr pos:start="1789:21" pos:end="1789:53"><call pos:start="1789:21" pos:end="1789:53"><name pos:start="1789:21" pos:end="1789:26">assert</name><argument_list pos:start="1789:27" pos:end="1789:53">(<argument pos:start="1789:28" pos:end="1789:52"><expr pos:start="1789:28" pos:end="1789:52"><name pos:start="1789:28" pos:end="1789:33">count1</name> <operator pos:start="1789:35" pos:end="1789:35">+</operator> <name pos:start="1789:37" pos:end="1789:43">treclen</name> <operator pos:start="1789:45" pos:end="1789:46">&lt;=</operator> <name pos:start="1789:48" pos:end="1789:52">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1790:21" pos:end="1790:53"><expr pos:start="1790:21" pos:end="1790:52"><name pos:start="1790:21" pos:end="1790:33"><name pos:start="1790:21" pos:end="1790:23">tde</name><operator pos:start="1790:24" pos:end="1790:25">-&gt;</operator><name pos:start="1790:26" pos:end="1790:33">d_reclen</name></name> <operator pos:start="1790:35" pos:end="1790:35">=</operator> <call pos:start="1790:37" pos:end="1790:52"><name pos:start="1790:37" pos:end="1790:43">tswap16</name><argument_list pos:start="1790:44" pos:end="1790:52">(<argument pos:start="1790:45" pos:end="1790:51"><expr pos:start="1790:45" pos:end="1790:51"><name pos:start="1790:45" pos:end="1790:51">treclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1791:21" pos:end="1791:52"><expr pos:start="1791:21" pos:end="1791:51"><name pos:start="1791:21" pos:end="1791:30"><name pos:start="1791:21" pos:end="1791:23">tde</name><operator pos:start="1791:24" pos:end="1791:25">-&gt;</operator><name pos:start="1791:26" pos:end="1791:30">d_ino</name></name> <operator pos:start="1791:32" pos:end="1791:32">=</operator> <call pos:start="1791:34" pos:end="1791:51"><name pos:start="1791:34" pos:end="1791:40">tswapal</name><argument_list pos:start="1791:41" pos:end="1791:51">(<argument pos:start="1791:42" pos:end="1791:50"><expr pos:start="1791:42" pos:end="1791:50"><name pos:start="1791:42" pos:end="1791:50"><name pos:start="1791:42" pos:end="1791:43">de</name><operator pos:start="1791:44" pos:end="1791:45">-&gt;</operator><name pos:start="1791:46" pos:end="1791:50">d_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1792:21" pos:end="1792:52"><expr pos:start="1792:21" pos:end="1792:51"><name pos:start="1792:21" pos:end="1792:30"><name pos:start="1792:21" pos:end="1792:23">tde</name><operator pos:start="1792:24" pos:end="1792:25">-&gt;</operator><name pos:start="1792:26" pos:end="1792:30">d_off</name></name> <operator pos:start="1792:32" pos:end="1792:32">=</operator> <call pos:start="1792:34" pos:end="1792:51"><name pos:start="1792:34" pos:end="1792:40">tswapal</name><argument_list pos:start="1792:41" pos:end="1792:51">(<argument pos:start="1792:42" pos:end="1792:50"><expr pos:start="1792:42" pos:end="1792:50"><name pos:start="1792:42" pos:end="1792:50"><name pos:start="1792:42" pos:end="1792:43">de</name><operator pos:start="1792:44" pos:end="1792:45">-&gt;</operator><name pos:start="1792:46" pos:end="1792:50">d_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1793:21" pos:end="1793:62"><expr pos:start="1793:21" pos:end="1793:61"><call pos:start="1793:21" pos:end="1793:61"><name pos:start="1793:21" pos:end="1793:26">memcpy</name><argument_list pos:start="1793:27" pos:end="1793:61">(<argument pos:start="1793:28" pos:end="1793:38"><expr pos:start="1793:28" pos:end="1793:38"><name pos:start="1793:28" pos:end="1793:38"><name pos:start="1793:28" pos:end="1793:30">tde</name><operator pos:start="1793:31" pos:end="1793:32">-&gt;</operator><name pos:start="1793:33" pos:end="1793:38">d_name</name></name></expr></argument>, <argument pos:start="1793:41" pos:end="1793:50"><expr pos:start="1793:41" pos:end="1793:50"><name pos:start="1793:41" pos:end="1793:50"><name pos:start="1793:41" pos:end="1793:42">de</name><operator pos:start="1793:43" pos:end="1793:44">-&gt;</operator><name pos:start="1793:45" pos:end="1793:50">d_name</name></name></expr></argument>, <argument pos:start="1793:53" pos:end="1793:60"><expr pos:start="1793:53" pos:end="1793:60"><name pos:start="1793:53" pos:end="1793:60">tnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1794:21" pos:end="1794:70"><expr pos:start="1794:21" pos:end="1794:69"><name pos:start="1794:21" pos:end="1794:22">de</name> <operator pos:start="1794:24" pos:end="1794:24">=</operator> <operator pos:start="1794:26" pos:end="1794:26">(</operator>struct <name pos:start="1794:34" pos:end="1794:45">linux_dirent</name> <operator pos:start="1794:47" pos:end="1794:47">*</operator><operator pos:start="1794:48" pos:end="1794:48">)</operator><operator pos:start="1794:49" pos:end="1794:49">(</operator><operator pos:start="1794:50" pos:end="1794:50">(</operator><name pos:start="1794:51" pos:end="1794:54">char</name> <operator pos:start="1794:56" pos:end="1794:56">*</operator><operator pos:start="1794:57" pos:end="1794:57">)</operator><name pos:start="1794:58" pos:end="1794:59">de</name> <operator pos:start="1794:61" pos:end="1794:61">+</operator> <name pos:start="1794:63" pos:end="1794:68">reclen</name><operator pos:start="1794:69" pos:end="1794:69">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="1795:21" pos:end="1795:34"><expr pos:start="1795:21" pos:end="1795:33"><name pos:start="1795:21" pos:end="1795:23">len</name> <operator pos:start="1795:25" pos:end="1795:26">-=</operator> <name pos:start="1795:28" pos:end="1795:33">reclen</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1796:21" pos:end="1796:74"><expr pos:start="1796:21" pos:end="1796:73"><name pos:start="1796:21" pos:end="1796:23">tde</name> <operator pos:start="1796:25" pos:end="1796:25">=</operator> <operator pos:start="1796:27" pos:end="1796:27">(</operator>struct <name pos:start="1796:35" pos:end="1796:47">target_dirent</name> <operator pos:start="1796:49" pos:end="1796:49">*</operator><operator pos:start="1796:50" pos:end="1796:50">)</operator><operator pos:start="1796:51" pos:end="1796:51">(</operator><operator pos:start="1796:52" pos:end="1796:52">(</operator><name pos:start="1796:53" pos:end="1796:56">char</name> <operator pos:start="1796:58" pos:end="1796:58">*</operator><operator pos:start="1796:59" pos:end="1796:59">)</operator><name pos:start="1796:60" pos:end="1796:62">tde</name> <operator pos:start="1796:64" pos:end="1796:64">+</operator> <name pos:start="1796:66" pos:end="1796:72">treclen</name><operator pos:start="1796:73" pos:end="1796:73">)</operator></expr>;</expr_stmt>
		    <expr_stmt pos:start="1797:21" pos:end="1797:38"><expr pos:start="1797:21" pos:end="1797:37"><name pos:start="1797:21" pos:end="1797:26">count1</name> <operator pos:start="1797:28" pos:end="1797:29">+=</operator> <name pos:start="1797:31" pos:end="1797:37">treclen</name></expr>;</expr_stmt>
		<expr_stmt pos:start="1798:17" pos:end="1798:29"><expr pos:start="1798:17" pos:end="1798:28"><name pos:start="1798:17" pos:end="1798:19">ret</name> <operator pos:start="1798:21" pos:end="1798:21">=</operator> <name pos:start="1798:23" pos:end="1798:28">count1</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1799:17" pos:end="1799:52"><expr pos:start="1799:17" pos:end="1799:51"><call pos:start="1799:17" pos:end="1799:51"><name pos:start="1799:17" pos:end="1799:27">unlock_user</name><argument_list pos:start="1799:28" pos:end="1799:51">(<argument pos:start="1799:29" pos:end="1799:39"><expr pos:start="1799:29" pos:end="1799:39"><name pos:start="1799:29" pos:end="1799:39">target_dirp</name></expr></argument>, <argument pos:start="1799:42" pos:end="1799:45"><expr pos:start="1799:42" pos:end="1799:45"><name pos:start="1799:42" pos:end="1799:45">arg2</name></expr></argument>, <argument pos:start="1799:48" pos:end="1799:50"><expr pos:start="1799:48" pos:end="1799:50"><name pos:start="1799:48" pos:end="1799:50">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1800:13" pos:end="1802:0"><expr pos:start="1800:13" pos:end="1800:24"><call pos:start="1800:13" pos:end="1800:24"><name pos:start="1800:13" pos:end="1800:18">g_free</name><argument_list pos:start="1800:19" pos:end="1800:24">(<argument pos:start="1800:20" pos:end="1800:23"><expr pos:start="1800:20" pos:end="1800:23"><name pos:start="1800:20" pos:end="1800:23">dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="1801:1" pos:end="1801:5">#<cpp:directive pos:start="1801:2" pos:end="1801:5">else</cpp:directive></cpp:else>
        <block pos:start="1802:9" pos:end="3541:14">{<block_content pos:start="1803:13" pos:end="3541:14">
            <decl_stmt pos:start="1803:13" pos:end="1803:38"><decl pos:start="1803:13" pos:end="1803:37"><type pos:start="1803:13" pos:end="1803:33"><name pos:start="1803:13" pos:end="1803:31"><name pos:start="1803:13" pos:end="1803:18">struct</name> <name pos:start="1803:20" pos:end="1803:31">linux_dirent</name></name> <modifier pos:start="1803:33" pos:end="1803:33">*</modifier></type><name pos:start="1803:34" pos:end="1803:37">dirp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1804:13" pos:end="1804:34"><decl pos:start="1804:13" pos:end="1804:33"><type pos:start="1804:13" pos:end="1804:20"><name pos:start="1804:13" pos:end="1804:20">abi_long</name></type> <name pos:start="1804:22" pos:end="1804:26">count</name> <init pos:start="1804:28" pos:end="1804:33">= <expr pos:start="1804:30" pos:end="1804:33"><name pos:start="1804:30" pos:end="1804:33">arg3</name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="1805:13" pos:end="1806:28"><if pos:start="1805:13" pos:end="1806:28">if <condition pos:start="1805:16" pos:end="1805:66">(<expr pos:start="1805:17" pos:end="1805:65"><operator pos:start="1805:17" pos:end="1805:17">!</operator><operator pos:start="1805:18" pos:end="1805:18">(</operator><name pos:start="1805:19" pos:end="1805:22">dirp</name> <operator pos:start="1805:24" pos:end="1805:24">=</operator> <call pos:start="1805:26" pos:end="1805:64"><name pos:start="1805:26" pos:end="1805:34">lock_user</name><argument_list pos:start="1805:35" pos:end="1805:64">(<argument pos:start="1805:36" pos:end="1805:47"><expr pos:start="1805:36" pos:end="1805:47"><name pos:start="1805:36" pos:end="1805:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1805:50" pos:end="1805:53"><expr pos:start="1805:50" pos:end="1805:53"><name pos:start="1805:50" pos:end="1805:53">arg2</name></expr></argument>, <argument pos:start="1805:56" pos:end="1805:60"><expr pos:start="1805:56" pos:end="1805:60"><name pos:start="1805:56" pos:end="1805:60">count</name></expr></argument>, <argument pos:start="1805:63" pos:end="1805:63"><expr pos:start="1805:63" pos:end="1805:63"><literal type="number" pos:start="1805:63" pos:end="1805:63">0</literal></expr></argument>)</argument_list></call><operator pos:start="1805:65" pos:end="1805:65">)</operator></expr>)</condition><block type="pseudo" pos:start="1806:17" pos:end="1806:28"><block_content pos:start="1806:17" pos:end="1806:28">
                <goto pos:start="1806:17" pos:end="1806:28">goto <name pos:start="1806:22" pos:end="1806:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1807:13" pos:end="1807:61"><expr pos:start="1807:13" pos:end="1807:60"><name pos:start="1807:13" pos:end="1807:15">ret</name> <operator pos:start="1807:17" pos:end="1807:17">=</operator> <call pos:start="1807:19" pos:end="1807:60"><name pos:start="1807:19" pos:end="1807:27">get_errno</name><argument_list pos:start="1807:28" pos:end="1807:60">(<argument pos:start="1807:29" pos:end="1807:59"><expr pos:start="1807:29" pos:end="1807:59"><call pos:start="1807:29" pos:end="1807:59"><name pos:start="1807:29" pos:end="1807:40">sys_getdents</name><argument_list pos:start="1807:41" pos:end="1807:59">(<argument pos:start="1807:42" pos:end="1807:45"><expr pos:start="1807:42" pos:end="1807:45"><name pos:start="1807:42" pos:end="1807:45">arg1</name></expr></argument>, <argument pos:start="1807:48" pos:end="1807:51"><expr pos:start="1807:48" pos:end="1807:51"><name pos:start="1807:48" pos:end="1807:51">dirp</name></expr></argument>, <argument pos:start="1807:54" pos:end="1807:58"><expr pos:start="1807:54" pos:end="1807:58"><name pos:start="1807:54" pos:end="1807:58">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1808:13" pos:end="3541:14"><if pos:start="1808:13" pos:end="3541:14">if <condition pos:start="1808:16" pos:end="1808:31">(<expr pos:start="1808:17" pos:end="1808:30"><operator pos:start="1808:17" pos:end="1808:17">!</operator><call pos:start="1808:18" pos:end="1808:30"><name pos:start="1808:18" pos:end="1808:25">is_error</name><argument_list pos:start="1808:26" pos:end="1808:30">(<argument pos:start="1808:27" pos:end="1808:29"><expr pos:start="1808:27" pos:end="1808:29"><name pos:start="1808:27" pos:end="1808:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1808:33" pos:end="3541:14">{<block_content pos:start="1809:17" pos:end="3541:14">
                <decl_stmt pos:start="1809:17" pos:end="1809:40"><decl pos:start="1809:17" pos:end="1809:39"><type pos:start="1809:17" pos:end="1809:37"><name pos:start="1809:17" pos:end="1809:35"><name pos:start="1809:17" pos:end="1809:22">struct</name> <name pos:start="1809:24" pos:end="1809:35">linux_dirent</name></name> <modifier pos:start="1809:37" pos:end="1809:37">*</modifier></type><name pos:start="1809:38" pos:end="1809:39">de</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1810:17" pos:end="1810:30"><decl pos:start="1810:17" pos:end="1810:29"><type pos:start="1810:17" pos:end="1810:19"><name pos:start="1810:17" pos:end="1810:19">int</name></type> <name pos:start="1810:21" pos:end="1810:23">len</name> <init pos:start="1810:25" pos:end="1810:29">= <expr pos:start="1810:27" pos:end="1810:29"><name pos:start="1810:27" pos:end="1810:29">ret</name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="1811:17" pos:end="1811:27"><decl pos:start="1811:17" pos:end="1811:26"><type pos:start="1811:17" pos:end="1811:19"><name pos:start="1811:17" pos:end="1811:19">int</name></type> <name pos:start="1811:21" pos:end="1811:26">reclen</name></decl>;</decl_stmt>
                <expr_stmt pos:start="1812:17" pos:end="1812:26"><expr pos:start="1812:17" pos:end="1812:25"><name pos:start="1812:17" pos:end="1812:18">de</name> <operator pos:start="1812:20" pos:end="1812:20">=</operator> <name pos:start="1812:22" pos:end="1812:25">dirp</name></expr>;</expr_stmt>
                <while pos:start="1813:17" pos:end="3541:14">while <condition pos:start="1813:23" pos:end="1813:31">(<expr pos:start="1813:24" pos:end="1813:30"><name pos:start="1813:24" pos:end="1813:26">len</name> <operator pos:start="1813:28" pos:end="1813:28">&gt;</operator> <literal type="number" pos:start="1813:30" pos:end="1813:30">0</literal></expr>)</condition> <block pos:start="1813:33" pos:end="3541:14">{<block_content pos:start="1814:21" pos:end="3541:14">
                    <expr_stmt pos:start="1814:21" pos:end="1814:42"><expr pos:start="1814:21" pos:end="1814:41"><name pos:start="1814:21" pos:end="1814:26">reclen</name> <operator pos:start="1814:28" pos:end="1814:28">=</operator> <name pos:start="1814:30" pos:end="1814:41"><name pos:start="1814:30" pos:end="1814:31">de</name><operator pos:start="1814:32" pos:end="1814:33">-&gt;</operator><name pos:start="1814:34" pos:end="1814:41">d_reclen</name></name></expr>;</expr_stmt>
                    <if_stmt pos:start="1815:21" pos:end="1816:51"><if pos:start="1815:21" pos:end="1816:51">if <condition pos:start="1815:24" pos:end="1815:37">(<expr pos:start="1815:25" pos:end="1815:36"><name pos:start="1815:25" pos:end="1815:30">reclen</name> <operator pos:start="1815:32" pos:end="1815:32">&gt;</operator> <name pos:start="1815:34" pos:end="1815:36">len</name></expr>)</condition><block type="pseudo" pos:start="1816:21" pos:end="1816:51"><block_content pos:start="1816:21" pos:end="1816:51">
                    <expr_stmt pos:start="1816:21" pos:end="1816:51"><expr pos:start="1816:21" pos:end="1816:50"><name pos:start="1816:21" pos:end="1816:32"><name pos:start="1816:21" pos:end="1816:22">de</name><operator pos:start="1816:23" pos:end="1816:24">-&gt;</operator><name pos:start="1816:25" pos:end="1816:32">d_reclen</name></name> <operator pos:start="1816:34" pos:end="1816:34">=</operator> <call pos:start="1816:36" pos:end="1816:50"><name pos:start="1816:36" pos:end="1816:42">tswap16</name><argument_list pos:start="1816:43" pos:end="1816:50">(<argument pos:start="1816:44" pos:end="1816:49"><expr pos:start="1816:44" pos:end="1816:49"><name pos:start="1816:44" pos:end="1816:49">reclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="1817:21" pos:end="1817:40"><expr pos:start="1817:21" pos:end="1817:39"><call pos:start="1817:21" pos:end="1817:39"><name pos:start="1817:21" pos:end="1817:27">tswapls</name><argument_list pos:start="1817:28" pos:end="1817:39">(<argument pos:start="1817:29" pos:end="1817:38"><expr pos:start="1817:29" pos:end="1817:38"><operator pos:start="1817:29" pos:end="1817:29">&amp;</operator><name pos:start="1817:30" pos:end="1817:38"><name pos:start="1817:30" pos:end="1817:31">de</name><operator pos:start="1817:32" pos:end="1817:33">-&gt;</operator><name pos:start="1817:34" pos:end="1817:38">d_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1818:21" pos:end="1818:40"><expr pos:start="1818:21" pos:end="1818:39"><call pos:start="1818:21" pos:end="1818:39"><name pos:start="1818:21" pos:end="1818:27">tswapls</name><argument_list pos:start="1818:28" pos:end="1818:39">(<argument pos:start="1818:29" pos:end="1818:38"><expr pos:start="1818:29" pos:end="1818:38"><operator pos:start="1818:29" pos:end="1818:29">&amp;</operator><name pos:start="1818:30" pos:end="1818:38"><name pos:start="1818:30" pos:end="1818:31">de</name><operator pos:start="1818:32" pos:end="1818:33">-&gt;</operator><name pos:start="1818:34" pos:end="1818:38">d_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1819:21" pos:end="1819:70"><expr pos:start="1819:21" pos:end="1819:69"><name pos:start="1819:21" pos:end="1819:22">de</name> <operator pos:start="1819:24" pos:end="1819:24">=</operator> <operator pos:start="1819:26" pos:end="1819:26">(</operator>struct <name pos:start="1819:34" pos:end="1819:45">linux_dirent</name> <operator pos:start="1819:47" pos:end="1819:47">*</operator><operator pos:start="1819:48" pos:end="1819:48">)</operator><operator pos:start="1819:49" pos:end="1819:49">(</operator><operator pos:start="1819:50" pos:end="1819:50">(</operator><name pos:start="1819:51" pos:end="1819:54">char</name> <operator pos:start="1819:56" pos:end="1819:56">*</operator><operator pos:start="1819:57" pos:end="1819:57">)</operator><name pos:start="1819:58" pos:end="1819:59">de</name> <operator pos:start="1819:61" pos:end="1819:61">+</operator> <name pos:start="1819:63" pos:end="1819:68">reclen</name><operator pos:start="1819:69" pos:end="1819:69">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="1820:21" pos:end="1820:34"><expr pos:start="1820:21" pos:end="1820:33"><name pos:start="1820:21" pos:end="1820:23">len</name> <operator pos:start="1820:25" pos:end="1820:26">-=</operator> <name pos:start="1820:28" pos:end="1820:33">reclen</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1821:13" pos:end="1824:0"><expr pos:start="1821:13" pos:end="1821:40"><call pos:start="1821:13" pos:end="1821:40"><name pos:start="1821:13" pos:end="1821:23">unlock_user</name><argument_list pos:start="1821:24" pos:end="1821:40">(<argument pos:start="1821:25" pos:end="1821:28"><expr pos:start="1821:25" pos:end="1821:28"><name pos:start="1821:25" pos:end="1821:28">dirp</name></expr></argument>, <argument pos:start="1821:31" pos:end="1821:34"><expr pos:start="1821:31" pos:end="1821:34"><name pos:start="1821:31" pos:end="1821:34">arg2</name></expr></argument>, <argument pos:start="1821:37" pos:end="1821:39"><expr pos:start="1821:37" pos:end="1821:39"><name pos:start="1821:37" pos:end="1821:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1822:1" pos:end="1822:6">#<cpp:directive pos:start="1822:2" pos:end="1822:6">endif</cpp:directive></cpp:endif>
<cpp:else pos:start="1823:1" pos:end="1823:5">#<cpp:directive pos:start="1823:2" pos:end="1823:5">else</cpp:directive></cpp:else>
        <comment type="block" pos:start="1824:9" pos:end="1824:55">/* Implement getdents in terms of getdents64 */</comment>
        <block pos:start="1825:9" pos:end="3541:14">{<block_content pos:start="1826:13" pos:end="3541:14">
            <decl_stmt pos:start="1826:13" pos:end="1826:40"><decl pos:start="1826:13" pos:end="1826:39"><type pos:start="1826:13" pos:end="1826:35"><name pos:start="1826:13" pos:end="1826:33"><name pos:start="1826:13" pos:end="1826:18">struct</name> <name pos:start="1826:20" pos:end="1826:33">linux_dirent64</name></name> <modifier pos:start="1826:35" pos:end="1826:35">*</modifier></type><name pos:start="1826:36" pos:end="1826:39">dirp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1827:13" pos:end="1827:34"><decl pos:start="1827:13" pos:end="1827:33"><type pos:start="1827:13" pos:end="1827:20"><name pos:start="1827:13" pos:end="1827:20">abi_long</name></type> <name pos:start="1827:22" pos:end="1827:26">count</name> <init pos:start="1827:28" pos:end="1827:33">= <expr pos:start="1827:30" pos:end="1827:33"><name pos:start="1827:30" pos:end="1827:33">arg3</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="1828:13" pos:end="1828:59"><expr pos:start="1828:13" pos:end="1828:58"><name pos:start="1828:13" pos:end="1828:16">dirp</name> <operator pos:start="1828:18" pos:end="1828:18">=</operator> <call pos:start="1828:20" pos:end="1828:58"><name pos:start="1828:20" pos:end="1828:28">lock_user</name><argument_list pos:start="1828:29" pos:end="1828:58">(<argument pos:start="1828:30" pos:end="1828:41"><expr pos:start="1828:30" pos:end="1828:41"><name pos:start="1828:30" pos:end="1828:41">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1828:44" pos:end="1828:47"><expr pos:start="1828:44" pos:end="1828:47"><name pos:start="1828:44" pos:end="1828:47">arg2</name></expr></argument>, <argument pos:start="1828:50" pos:end="1828:54"><expr pos:start="1828:50" pos:end="1828:54"><name pos:start="1828:50" pos:end="1828:54">count</name></expr></argument>, <argument pos:start="1828:57" pos:end="1828:57"><expr pos:start="1828:57" pos:end="1828:57"><literal type="number" pos:start="1828:57" pos:end="1828:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1829:13" pos:end="3541:14"><if pos:start="1829:13" pos:end="3541:14">if <condition pos:start="1829:16" pos:end="1829:22">(<expr pos:start="1829:17" pos:end="1829:21"><operator pos:start="1829:17" pos:end="1829:17">!</operator><name pos:start="1829:18" pos:end="1829:21">dirp</name></expr>)</condition> <block pos:start="1829:24" pos:end="3541:14">{<block_content pos:start="1830:17" pos:end="3541:14">
                <goto pos:start="1830:17" pos:end="1830:28">goto <name pos:start="1830:22" pos:end="1830:27">efault</name>;</goto>
            <expr_stmt pos:start="1831:13" pos:end="1831:63"><expr pos:start="1831:13" pos:end="1831:62"><name pos:start="1831:13" pos:end="1831:15">ret</name> <operator pos:start="1831:17" pos:end="1831:17">=</operator> <call pos:start="1831:19" pos:end="1831:62"><name pos:start="1831:19" pos:end="1831:27">get_errno</name><argument_list pos:start="1831:28" pos:end="1831:62">(<argument pos:start="1831:29" pos:end="1831:61"><expr pos:start="1831:29" pos:end="1831:61"><call pos:start="1831:29" pos:end="1831:61"><name pos:start="1831:29" pos:end="1831:42">sys_getdents64</name><argument_list pos:start="1831:43" pos:end="1831:61">(<argument pos:start="1831:44" pos:end="1831:47"><expr pos:start="1831:44" pos:end="1831:47"><name pos:start="1831:44" pos:end="1831:47">arg1</name></expr></argument>, <argument pos:start="1831:50" pos:end="1831:53"><expr pos:start="1831:50" pos:end="1831:53"><name pos:start="1831:50" pos:end="1831:53">dirp</name></expr></argument>, <argument pos:start="1831:56" pos:end="1831:60"><expr pos:start="1831:56" pos:end="1831:60"><name pos:start="1831:56" pos:end="1831:60">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1832:13" pos:end="3541:14"><if pos:start="1832:13" pos:end="3541:14">if <condition pos:start="1832:16" pos:end="1832:31">(<expr pos:start="1832:17" pos:end="1832:30"><operator pos:start="1832:17" pos:end="1832:17">!</operator><call pos:start="1832:18" pos:end="1832:30"><name pos:start="1832:18" pos:end="1832:25">is_error</name><argument_list pos:start="1832:26" pos:end="1832:30">(<argument pos:start="1832:27" pos:end="1832:29"><expr pos:start="1832:27" pos:end="1832:29"><name pos:start="1832:27" pos:end="1832:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1832:33" pos:end="3541:14">{<block_content pos:start="1838:17" pos:end="3541:14">
                <comment type="block" pos:start="1833:17" pos:end="1837:19">/* Convert the dirent64 structs to target dirent.  We do this
                 * in-place, since we can guarantee that a target_dirent is no
                 * larger than a dirent64; however this means we have to be
                 * careful to read everything before writing in the new format.
                 */</comment>
                <decl_stmt pos:start="1838:17" pos:end="1838:42"><decl pos:start="1838:17" pos:end="1838:41"><type pos:start="1838:17" pos:end="1838:39"><name pos:start="1838:17" pos:end="1838:37"><name pos:start="1838:17" pos:end="1838:22">struct</name> <name pos:start="1838:24" pos:end="1838:37">linux_dirent64</name></name> <modifier pos:start="1838:39" pos:end="1838:39">*</modifier></type><name pos:start="1838:40" pos:end="1838:41">de</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1839:17" pos:end="1839:42"><decl pos:start="1839:17" pos:end="1839:41"><type pos:start="1839:17" pos:end="1839:38"><name pos:start="1839:17" pos:end="1839:36"><name pos:start="1839:17" pos:end="1839:22">struct</name> <name pos:start="1839:24" pos:end="1839:36">target_dirent</name></name> <modifier pos:start="1839:38" pos:end="1839:38">*</modifier></type><name pos:start="1839:39" pos:end="1839:41">tde</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1840:17" pos:end="1840:30"><decl pos:start="1840:17" pos:end="1840:29"><type pos:start="1840:17" pos:end="1840:19"><name pos:start="1840:17" pos:end="1840:19">int</name></type> <name pos:start="1840:21" pos:end="1840:23">len</name> <init pos:start="1840:25" pos:end="1840:29">= <expr pos:start="1840:27" pos:end="1840:29"><name pos:start="1840:27" pos:end="1840:29">ret</name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="1841:17" pos:end="1841:29"><decl pos:start="1841:17" pos:end="1841:28"><type pos:start="1841:17" pos:end="1841:19"><name pos:start="1841:17" pos:end="1841:19">int</name></type> <name pos:start="1841:21" pos:end="1841:24">tlen</name> <init pos:start="1841:26" pos:end="1841:28">= <expr pos:start="1841:28" pos:end="1841:28"><literal type="number" pos:start="1841:28" pos:end="1841:28">0</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="1842:17" pos:end="1842:26"><expr pos:start="1842:17" pos:end="1842:25"><name pos:start="1842:17" pos:end="1842:18">de</name> <operator pos:start="1842:20" pos:end="1842:20">=</operator> <name pos:start="1842:22" pos:end="1842:25">dirp</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1843:17" pos:end="1843:51"><expr pos:start="1843:17" pos:end="1843:50"><name pos:start="1843:17" pos:end="1843:19">tde</name> <operator pos:start="1843:21" pos:end="1843:21">=</operator> <operator pos:start="1843:23" pos:end="1843:23">(</operator>struct <name pos:start="1843:31" pos:end="1843:43">target_dirent</name> <operator pos:start="1843:45" pos:end="1843:45">*</operator><operator pos:start="1843:46" pos:end="1843:46">)</operator><name pos:start="1843:47" pos:end="1843:50">dirp</name></expr>;</expr_stmt>
                <while pos:start="1844:17" pos:end="3541:14">while <condition pos:start="1844:23" pos:end="1844:31">(<expr pos:start="1844:24" pos:end="1844:30"><name pos:start="1844:24" pos:end="1844:26">len</name> <operator pos:start="1844:28" pos:end="1844:28">&gt;</operator> <literal type="number" pos:start="1844:30" pos:end="1844:30">0</literal></expr>)</condition> <block pos:start="1844:33" pos:end="3541:14">{<block_content pos:start="1845:21" pos:end="3541:14">
                    <decl_stmt pos:start="1845:21" pos:end="1845:41"><decl pos:start="1845:21" pos:end="1845:31"><type pos:start="1845:21" pos:end="1845:23"><name pos:start="1845:21" pos:end="1845:23">int</name></type> <name pos:start="1845:25" pos:end="1845:31">namelen</name></decl>, <decl pos:start="1845:34" pos:end="1845:40"><type ref="prev" pos:start="1845:21" pos:end="1845:23"/><name pos:start="1845:34" pos:end="1845:40">treclen</name></decl>;</decl_stmt>
                    <decl_stmt pos:start="1846:21" pos:end="1846:46"><decl pos:start="1846:21" pos:end="1846:45"><type pos:start="1846:21" pos:end="1846:23"><name pos:start="1846:21" pos:end="1846:23">int</name></type> <name pos:start="1846:25" pos:end="1846:30">reclen</name> <init pos:start="1846:32" pos:end="1846:45">= <expr pos:start="1846:34" pos:end="1846:45"><name pos:start="1846:34" pos:end="1846:45"><name pos:start="1846:34" pos:end="1846:35">de</name><operator pos:start="1846:36" pos:end="1846:37">-&gt;</operator><name pos:start="1846:38" pos:end="1846:45">d_reclen</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt pos:start="1847:21" pos:end="1847:45"><decl pos:start="1847:21" pos:end="1847:44"><type pos:start="1847:21" pos:end="1847:28"><name pos:start="1847:21" pos:end="1847:28">uint64_t</name></type> <name pos:start="1847:30" pos:end="1847:32">ino</name> <init pos:start="1847:34" pos:end="1847:44">= <expr pos:start="1847:36" pos:end="1847:44"><name pos:start="1847:36" pos:end="1847:44"><name pos:start="1847:36" pos:end="1847:37">de</name><operator pos:start="1847:38" pos:end="1847:39">-&gt;</operator><name pos:start="1847:40" pos:end="1847:44">d_ino</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt pos:start="1848:21" pos:end="1848:44"><decl pos:start="1848:21" pos:end="1848:43"><type pos:start="1848:21" pos:end="1848:27"><name pos:start="1848:21" pos:end="1848:27">int64_t</name></type> <name pos:start="1848:29" pos:end="1848:31">off</name> <init pos:start="1848:33" pos:end="1848:43">= <expr pos:start="1848:35" pos:end="1848:43"><name pos:start="1848:35" pos:end="1848:43"><name pos:start="1848:35" pos:end="1848:36">de</name><operator pos:start="1848:37" pos:end="1848:38">-&gt;</operator><name pos:start="1848:39" pos:end="1848:43">d_off</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt pos:start="1849:21" pos:end="1849:46"><decl pos:start="1849:21" pos:end="1849:45"><type pos:start="1849:21" pos:end="1849:27"><name pos:start="1849:21" pos:end="1849:27">uint8_t</name></type> <name pos:start="1849:29" pos:end="1849:32">type</name> <init pos:start="1849:34" pos:end="1849:45">= <expr pos:start="1849:36" pos:end="1849:45"><name pos:start="1849:36" pos:end="1849:45"><name pos:start="1849:36" pos:end="1849:37">de</name><operator pos:start="1849:38" pos:end="1849:39">-&gt;</operator><name pos:start="1849:40" pos:end="1849:45">d_type</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt pos:start="1850:21" pos:end="1850:49"><expr pos:start="1850:21" pos:end="1850:48"><name pos:start="1850:21" pos:end="1850:27">namelen</name> <operator pos:start="1850:29" pos:end="1850:29">=</operator> <call pos:start="1850:31" pos:end="1850:48"><name pos:start="1850:31" pos:end="1850:36">strlen</name><argument_list pos:start="1850:37" pos:end="1850:48">(<argument pos:start="1850:38" pos:end="1850:47"><expr pos:start="1850:38" pos:end="1850:47"><name pos:start="1850:38" pos:end="1850:47"><name pos:start="1850:38" pos:end="1850:39">de</name><operator pos:start="1850:40" pos:end="1850:41">-&gt;</operator><name pos:start="1850:42" pos:end="1850:47">d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1851:21" pos:end="1852:38"><expr pos:start="1851:21" pos:end="1852:37"><name pos:start="1851:21" pos:end="1851:27">treclen</name> <operator pos:start="1851:29" pos:end="1851:29">=</operator> <call pos:start="1851:31" pos:end="1851:68"><name pos:start="1851:31" pos:end="1851:38">offsetof</name><argument_list pos:start="1851:39" pos:end="1851:68">(<argument pos:start="1851:40" pos:end="1851:59"><expr pos:start="1851:40" pos:end="1851:59">struct <name pos:start="1851:47" pos:end="1851:59">target_dirent</name></expr></argument>, <argument pos:start="1851:62" pos:end="1851:67"><expr pos:start="1851:62" pos:end="1851:67"><name pos:start="1851:62" pos:end="1851:67">d_name</name></expr></argument>)</argument_list></call>
                        <operator pos:start="1852:25" pos:end="1852:25">+</operator> <name pos:start="1852:27" pos:end="1852:33">namelen</name> <operator pos:start="1852:35" pos:end="1852:35">+</operator> <literal type="number" pos:start="1852:37" pos:end="1852:37">2</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="1853:21" pos:end="1853:71"><expr pos:start="1853:21" pos:end="1853:70"><name pos:start="1853:21" pos:end="1853:27">treclen</name> <operator pos:start="1853:29" pos:end="1853:29">=</operator> <call pos:start="1853:31" pos:end="1853:70"><name pos:start="1853:31" pos:end="1853:43">QEMU_ALIGN_UP</name><argument_list pos:start="1853:44" pos:end="1853:70">(<argument pos:start="1853:45" pos:end="1853:51"><expr pos:start="1853:45" pos:end="1853:51"><name pos:start="1853:45" pos:end="1853:51">treclen</name></expr></argument>, <argument pos:start="1853:54" pos:end="1853:69"><expr pos:start="1853:54" pos:end="1853:69"><sizeof pos:start="1853:54" pos:end="1853:69">sizeof<argument_list pos:start="1853:60" pos:end="1853:69">(<argument pos:start="1853:61" pos:end="1853:68"><expr pos:start="1853:61" pos:end="1853:68"><name pos:start="1853:61" pos:end="1853:68">abi_long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1854:21" pos:end="1854:66"><expr pos:start="1854:21" pos:end="1854:65"><call pos:start="1854:21" pos:end="1854:65"><name pos:start="1854:21" pos:end="1854:27">memmove</name><argument_list pos:start="1854:28" pos:end="1854:65">(<argument pos:start="1854:29" pos:end="1854:39"><expr pos:start="1854:29" pos:end="1854:39"><name pos:start="1854:29" pos:end="1854:39"><name pos:start="1854:29" pos:end="1854:31">tde</name><operator pos:start="1854:32" pos:end="1854:33">-&gt;</operator><name pos:start="1854:34" pos:end="1854:39">d_name</name></name></expr></argument>, <argument pos:start="1854:42" pos:end="1854:51"><expr pos:start="1854:42" pos:end="1854:51"><name pos:start="1854:42" pos:end="1854:51"><name pos:start="1854:42" pos:end="1854:43">de</name><operator pos:start="1854:44" pos:end="1854:45">-&gt;</operator><name pos:start="1854:46" pos:end="1854:51">d_name</name></name></expr></argument>, <argument pos:start="1854:54" pos:end="1854:64"><expr pos:start="1854:54" pos:end="1854:64"><name pos:start="1854:54" pos:end="1854:60">namelen</name> <operator pos:start="1854:62" pos:end="1854:62">+</operator> <literal type="number" pos:start="1854:64" pos:end="1854:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1855:21" pos:end="1855:46"><expr pos:start="1855:21" pos:end="1855:45"><name pos:start="1855:21" pos:end="1855:30"><name pos:start="1855:21" pos:end="1855:23">tde</name><operator pos:start="1855:24" pos:end="1855:25">-&gt;</operator><name pos:start="1855:26" pos:end="1855:30">d_ino</name></name> <operator pos:start="1855:32" pos:end="1855:32">=</operator> <call pos:start="1855:34" pos:end="1855:45"><name pos:start="1855:34" pos:end="1855:40">tswapal</name><argument_list pos:start="1855:41" pos:end="1855:45">(<argument pos:start="1855:42" pos:end="1855:44"><expr pos:start="1855:42" pos:end="1855:44"><name pos:start="1855:42" pos:end="1855:44">ino</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1856:21" pos:end="1856:46"><expr pos:start="1856:21" pos:end="1856:45"><name pos:start="1856:21" pos:end="1856:30"><name pos:start="1856:21" pos:end="1856:23">tde</name><operator pos:start="1856:24" pos:end="1856:25">-&gt;</operator><name pos:start="1856:26" pos:end="1856:30">d_off</name></name> <operator pos:start="1856:32" pos:end="1856:32">=</operator> <call pos:start="1856:34" pos:end="1856:45"><name pos:start="1856:34" pos:end="1856:40">tswapal</name><argument_list pos:start="1856:41" pos:end="1856:45">(<argument pos:start="1856:42" pos:end="1856:44"><expr pos:start="1856:42" pos:end="1856:44"><name pos:start="1856:42" pos:end="1856:44">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1857:21" pos:end="1857:53"><expr pos:start="1857:21" pos:end="1857:52"><name pos:start="1857:21" pos:end="1857:33"><name pos:start="1857:21" pos:end="1857:23">tde</name><operator pos:start="1857:24" pos:end="1857:25">-&gt;</operator><name pos:start="1857:26" pos:end="1857:33">d_reclen</name></name> <operator pos:start="1857:35" pos:end="1857:35">=</operator> <call pos:start="1857:37" pos:end="1857:52"><name pos:start="1857:37" pos:end="1857:43">tswap16</name><argument_list pos:start="1857:44" pos:end="1857:52">(<argument pos:start="1857:45" pos:end="1857:51"><expr pos:start="1857:45" pos:end="1857:51"><name pos:start="1857:45" pos:end="1857:51">treclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block" pos:start="1858:21" pos:end="1860:23">/* The target_dirent type is in what was formerly a padding
                     * byte at the end of the structure:
                     */</comment>
                    <expr_stmt pos:start="1861:21" pos:end="1861:58"><expr pos:start="1861:21" pos:end="1861:57"><operator pos:start="1861:21" pos:end="1861:21">*</operator><operator pos:start="1861:22" pos:end="1861:22">(</operator><operator pos:start="1861:23" pos:end="1861:23">(</operator><operator pos:start="1861:24" pos:end="1861:24">(</operator><name pos:start="1861:25" pos:end="1861:28">char</name> <operator pos:start="1861:30" pos:end="1861:30">*</operator><operator pos:start="1861:31" pos:end="1861:31">)</operator><name pos:start="1861:32" pos:end="1861:34">tde</name><operator pos:start="1861:35" pos:end="1861:35">)</operator> <operator pos:start="1861:37" pos:end="1861:37">+</operator> <name pos:start="1861:39" pos:end="1861:45">treclen</name> <operator pos:start="1861:47" pos:end="1861:47">-</operator> <literal type="number" pos:start="1861:49" pos:end="1861:49">1</literal><operator pos:start="1861:50" pos:end="1861:50">)</operator> <operator pos:start="1861:52" pos:end="1861:52">=</operator> <name pos:start="1861:54" pos:end="1861:57">type</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1862:21" pos:end="1862:72"><expr pos:start="1862:21" pos:end="1862:71"><name pos:start="1862:21" pos:end="1862:22">de</name> <operator pos:start="1862:24" pos:end="1862:24">=</operator> <operator pos:start="1862:26" pos:end="1862:26">(</operator>struct <name pos:start="1862:34" pos:end="1862:47">linux_dirent64</name> <operator pos:start="1862:49" pos:end="1862:49">*</operator><operator pos:start="1862:50" pos:end="1862:50">)</operator><operator pos:start="1862:51" pos:end="1862:51">(</operator><operator pos:start="1862:52" pos:end="1862:52">(</operator><name pos:start="1862:53" pos:end="1862:56">char</name> <operator pos:start="1862:58" pos:end="1862:58">*</operator><operator pos:start="1862:59" pos:end="1862:59">)</operator><name pos:start="1862:60" pos:end="1862:61">de</name> <operator pos:start="1862:63" pos:end="1862:63">+</operator> <name pos:start="1862:65" pos:end="1862:70">reclen</name><operator pos:start="1862:71" pos:end="1862:71">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="1863:21" pos:end="1863:74"><expr pos:start="1863:21" pos:end="1863:73"><name pos:start="1863:21" pos:end="1863:23">tde</name> <operator pos:start="1863:25" pos:end="1863:25">=</operator> <operator pos:start="1863:27" pos:end="1863:27">(</operator>struct <name pos:start="1863:35" pos:end="1863:47">target_dirent</name> <operator pos:start="1863:49" pos:end="1863:49">*</operator><operator pos:start="1863:50" pos:end="1863:50">)</operator><operator pos:start="1863:51" pos:end="1863:51">(</operator><operator pos:start="1863:52" pos:end="1863:52">(</operator><name pos:start="1863:53" pos:end="1863:56">char</name> <operator pos:start="1863:58" pos:end="1863:58">*</operator><operator pos:start="1863:59" pos:end="1863:59">)</operator><name pos:start="1863:60" pos:end="1863:62">tde</name> <operator pos:start="1863:64" pos:end="1863:64">+</operator> <name pos:start="1863:66" pos:end="1863:72">treclen</name><operator pos:start="1863:73" pos:end="1863:73">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="1864:21" pos:end="1864:34"><expr pos:start="1864:21" pos:end="1864:33"><name pos:start="1864:21" pos:end="1864:23">len</name> <operator pos:start="1864:25" pos:end="1864:26">-=</operator> <name pos:start="1864:28" pos:end="1864:33">reclen</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1865:21" pos:end="1865:36"><expr pos:start="1865:21" pos:end="1865:35"><name pos:start="1865:21" pos:end="1865:24">tlen</name> <operator pos:start="1865:26" pos:end="1865:27">+=</operator> <name pos:start="1865:29" pos:end="1865:35">treclen</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1866:17" pos:end="1866:27"><expr pos:start="1866:17" pos:end="1866:26"><name pos:start="1866:17" pos:end="1866:19">ret</name> <operator pos:start="1866:21" pos:end="1866:21">=</operator> <name pos:start="1866:23" pos:end="1866:26">tlen</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1867:13" pos:end="1871:0"><expr pos:start="1867:13" pos:end="1867:40"><call pos:start="1867:13" pos:end="1867:40"><name pos:start="1867:13" pos:end="1867:23">unlock_user</name><argument_list pos:start="1867:24" pos:end="1867:40">(<argument pos:start="1867:25" pos:end="1867:28"><expr pos:start="1867:25" pos:end="1867:28"><name pos:start="1867:25" pos:end="1867:28">dirp</name></expr></argument>, <argument pos:start="1867:31" pos:end="1867:34"><expr pos:start="1867:31" pos:end="1867:34"><name pos:start="1867:31" pos:end="1867:34">arg2</name></expr></argument>, <argument pos:start="1867:37" pos:end="1867:39"><expr pos:start="1867:37" pos:end="1867:39"><name pos:start="1867:37" pos:end="1867:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1868:1" pos:end="1868:6">#<cpp:directive pos:start="1868:2" pos:end="1868:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="1869:1" pos:end="1869:6">#<cpp:directive pos:start="1869:2" pos:end="1869:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="1869:8" pos:end="1869:31">/* TARGET_NR_getdents */</comment>
<cpp:if pos:start="1870:1" pos:end="1870:61">#<cpp:directive pos:start="1870:2" pos:end="1870:3">if</cpp:directive> <expr pos:start="1870:5" pos:end="1870:61"><call pos:start="1870:5" pos:end="1870:33"><name pos:start="1870:5" pos:end="1870:11">defined</name><argument_list pos:start="1870:12" pos:end="1870:33">(<argument pos:start="1870:13" pos:end="1870:32"><expr pos:start="1870:13" pos:end="1870:32"><name pos:start="1870:13" pos:end="1870:32">TARGET_NR_getdents64</name></expr></argument>)</argument_list></call> <operator pos:start="1870:35" pos:end="1870:36">&amp;&amp;</operator> <call pos:start="1870:38" pos:end="1870:61"><name pos:start="1870:38" pos:end="1870:44">defined</name><argument_list pos:start="1870:45" pos:end="1870:61">(<argument pos:start="1870:46" pos:end="1870:60"><expr pos:start="1870:46" pos:end="1870:60"><name pos:start="1870:46" pos:end="1870:60">__NR_getdents64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="1871:5" pos:end="1871:30">case <expr pos:start="1871:10" pos:end="1871:29"><name pos:start="1871:10" pos:end="1871:29">TARGET_NR_getdents64</name></expr>:</case>
        <block pos:start="1872:9" pos:end="3541:14">{<block_content pos:start="1873:13" pos:end="3541:14">
            <decl_stmt pos:start="1873:13" pos:end="1873:40"><decl pos:start="1873:13" pos:end="1873:39"><type pos:start="1873:13" pos:end="1873:35"><name pos:start="1873:13" pos:end="1873:33"><name pos:start="1873:13" pos:end="1873:18">struct</name> <name pos:start="1873:20" pos:end="1873:33">linux_dirent64</name></name> <modifier pos:start="1873:35" pos:end="1873:35">*</modifier></type><name pos:start="1873:36" pos:end="1873:39">dirp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1874:13" pos:end="1874:34"><decl pos:start="1874:13" pos:end="1874:33"><type pos:start="1874:13" pos:end="1874:20"><name pos:start="1874:13" pos:end="1874:20">abi_long</name></type> <name pos:start="1874:22" pos:end="1874:26">count</name> <init pos:start="1874:28" pos:end="1874:33">= <expr pos:start="1874:30" pos:end="1874:33"><name pos:start="1874:30" pos:end="1874:33">arg3</name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="1875:13" pos:end="1876:28"><if pos:start="1875:13" pos:end="1876:28">if <condition pos:start="1875:16" pos:end="1875:66">(<expr pos:start="1875:17" pos:end="1875:65"><operator pos:start="1875:17" pos:end="1875:17">!</operator><operator pos:start="1875:18" pos:end="1875:18">(</operator><name pos:start="1875:19" pos:end="1875:22">dirp</name> <operator pos:start="1875:24" pos:end="1875:24">=</operator> <call pos:start="1875:26" pos:end="1875:64"><name pos:start="1875:26" pos:end="1875:34">lock_user</name><argument_list pos:start="1875:35" pos:end="1875:64">(<argument pos:start="1875:36" pos:end="1875:47"><expr pos:start="1875:36" pos:end="1875:47"><name pos:start="1875:36" pos:end="1875:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1875:50" pos:end="1875:53"><expr pos:start="1875:50" pos:end="1875:53"><name pos:start="1875:50" pos:end="1875:53">arg2</name></expr></argument>, <argument pos:start="1875:56" pos:end="1875:60"><expr pos:start="1875:56" pos:end="1875:60"><name pos:start="1875:56" pos:end="1875:60">count</name></expr></argument>, <argument pos:start="1875:63" pos:end="1875:63"><expr pos:start="1875:63" pos:end="1875:63"><literal type="number" pos:start="1875:63" pos:end="1875:63">0</literal></expr></argument>)</argument_list></call><operator pos:start="1875:65" pos:end="1875:65">)</operator></expr>)</condition><block type="pseudo" pos:start="1876:17" pos:end="1876:28"><block_content pos:start="1876:17" pos:end="1876:28">
                <goto pos:start="1876:17" pos:end="1876:28">goto <name pos:start="1876:22" pos:end="1876:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1877:13" pos:end="1877:63"><expr pos:start="1877:13" pos:end="1877:62"><name pos:start="1877:13" pos:end="1877:15">ret</name> <operator pos:start="1877:17" pos:end="1877:17">=</operator> <call pos:start="1877:19" pos:end="1877:62"><name pos:start="1877:19" pos:end="1877:27">get_errno</name><argument_list pos:start="1877:28" pos:end="1877:62">(<argument pos:start="1877:29" pos:end="1877:61"><expr pos:start="1877:29" pos:end="1877:61"><call pos:start="1877:29" pos:end="1877:61"><name pos:start="1877:29" pos:end="1877:42">sys_getdents64</name><argument_list pos:start="1877:43" pos:end="1877:61">(<argument pos:start="1877:44" pos:end="1877:47"><expr pos:start="1877:44" pos:end="1877:47"><name pos:start="1877:44" pos:end="1877:47">arg1</name></expr></argument>, <argument pos:start="1877:50" pos:end="1877:53"><expr pos:start="1877:50" pos:end="1877:53"><name pos:start="1877:50" pos:end="1877:53">dirp</name></expr></argument>, <argument pos:start="1877:56" pos:end="1877:60"><expr pos:start="1877:56" pos:end="1877:60"><name pos:start="1877:56" pos:end="1877:60">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1878:13" pos:end="3541:14"><if pos:start="1878:13" pos:end="3541:14">if <condition pos:start="1878:16" pos:end="1878:31">(<expr pos:start="1878:17" pos:end="1878:30"><operator pos:start="1878:17" pos:end="1878:17">!</operator><call pos:start="1878:18" pos:end="1878:30"><name pos:start="1878:18" pos:end="1878:25">is_error</name><argument_list pos:start="1878:26" pos:end="1878:30">(<argument pos:start="1878:27" pos:end="1878:29"><expr pos:start="1878:27" pos:end="1878:29"><name pos:start="1878:27" pos:end="1878:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1878:33" pos:end="3541:14">{<block_content pos:start="1879:17" pos:end="3541:14">
                <decl_stmt pos:start="1879:17" pos:end="1879:42"><decl pos:start="1879:17" pos:end="1879:41"><type pos:start="1879:17" pos:end="1879:39"><name pos:start="1879:17" pos:end="1879:37"><name pos:start="1879:17" pos:end="1879:22">struct</name> <name pos:start="1879:24" pos:end="1879:37">linux_dirent64</name></name> <modifier pos:start="1879:39" pos:end="1879:39">*</modifier></type><name pos:start="1879:40" pos:end="1879:41">de</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1880:17" pos:end="1880:30"><decl pos:start="1880:17" pos:end="1880:29"><type pos:start="1880:17" pos:end="1880:19"><name pos:start="1880:17" pos:end="1880:19">int</name></type> <name pos:start="1880:21" pos:end="1880:23">len</name> <init pos:start="1880:25" pos:end="1880:29">= <expr pos:start="1880:27" pos:end="1880:29"><name pos:start="1880:27" pos:end="1880:29">ret</name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="1881:17" pos:end="1881:27"><decl pos:start="1881:17" pos:end="1881:26"><type pos:start="1881:17" pos:end="1881:19"><name pos:start="1881:17" pos:end="1881:19">int</name></type> <name pos:start="1881:21" pos:end="1881:26">reclen</name></decl>;</decl_stmt>
                <expr_stmt pos:start="1882:17" pos:end="1882:26"><expr pos:start="1882:17" pos:end="1882:25"><name pos:start="1882:17" pos:end="1882:18">de</name> <operator pos:start="1882:20" pos:end="1882:20">=</operator> <name pos:start="1882:22" pos:end="1882:25">dirp</name></expr>;</expr_stmt>
                <while pos:start="1883:17" pos:end="3541:14">while <condition pos:start="1883:23" pos:end="1883:31">(<expr pos:start="1883:24" pos:end="1883:30"><name pos:start="1883:24" pos:end="1883:26">len</name> <operator pos:start="1883:28" pos:end="1883:28">&gt;</operator> <literal type="number" pos:start="1883:30" pos:end="1883:30">0</literal></expr>)</condition> <block pos:start="1883:33" pos:end="3541:14">{<block_content pos:start="1884:21" pos:end="3541:14">
                    <expr_stmt pos:start="1884:21" pos:end="1884:42"><expr pos:start="1884:21" pos:end="1884:41"><name pos:start="1884:21" pos:end="1884:26">reclen</name> <operator pos:start="1884:28" pos:end="1884:28">=</operator> <name pos:start="1884:30" pos:end="1884:41"><name pos:start="1884:30" pos:end="1884:31">de</name><operator pos:start="1884:32" pos:end="1884:33">-&gt;</operator><name pos:start="1884:34" pos:end="1884:41">d_reclen</name></name></expr>;</expr_stmt>
                    <if_stmt pos:start="1885:21" pos:end="1886:51"><if pos:start="1885:21" pos:end="1886:51">if <condition pos:start="1885:24" pos:end="1885:37">(<expr pos:start="1885:25" pos:end="1885:36"><name pos:start="1885:25" pos:end="1885:30">reclen</name> <operator pos:start="1885:32" pos:end="1885:32">&gt;</operator> <name pos:start="1885:34" pos:end="1885:36">len</name></expr>)</condition><block type="pseudo" pos:start="1886:21" pos:end="1886:51"><block_content pos:start="1886:21" pos:end="1886:51">
                    <expr_stmt pos:start="1886:21" pos:end="1886:51"><expr pos:start="1886:21" pos:end="1886:50"><name pos:start="1886:21" pos:end="1886:32"><name pos:start="1886:21" pos:end="1886:22">de</name><operator pos:start="1886:23" pos:end="1886:24">-&gt;</operator><name pos:start="1886:25" pos:end="1886:32">d_reclen</name></name> <operator pos:start="1886:34" pos:end="1886:34">=</operator> <call pos:start="1886:36" pos:end="1886:50"><name pos:start="1886:36" pos:end="1886:42">tswap16</name><argument_list pos:start="1886:43" pos:end="1886:50">(<argument pos:start="1886:44" pos:end="1886:49"><expr pos:start="1886:44" pos:end="1886:49"><name pos:start="1886:44" pos:end="1886:49">reclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="1887:21" pos:end="1887:53"><expr pos:start="1887:21" pos:end="1887:52"><call pos:start="1887:21" pos:end="1887:52"><name pos:start="1887:21" pos:end="1887:28">tswap64s</name><argument_list pos:start="1887:29" pos:end="1887:52">(<argument pos:start="1887:30" pos:end="1887:51"><expr pos:start="1887:30" pos:end="1887:51"><operator pos:start="1887:30" pos:end="1887:30">(</operator><name pos:start="1887:31" pos:end="1887:38">uint64_t</name> <operator pos:start="1887:40" pos:end="1887:40">*</operator><operator pos:start="1887:41" pos:end="1887:41">)</operator><operator pos:start="1887:42" pos:end="1887:42">&amp;</operator><name pos:start="1887:43" pos:end="1887:51"><name pos:start="1887:43" pos:end="1887:44">de</name><operator pos:start="1887:45" pos:end="1887:46">-&gt;</operator><name pos:start="1887:47" pos:end="1887:51">d_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1888:21" pos:end="1888:53"><expr pos:start="1888:21" pos:end="1888:52"><call pos:start="1888:21" pos:end="1888:52"><name pos:start="1888:21" pos:end="1888:28">tswap64s</name><argument_list pos:start="1888:29" pos:end="1888:52">(<argument pos:start="1888:30" pos:end="1888:51"><expr pos:start="1888:30" pos:end="1888:51"><operator pos:start="1888:30" pos:end="1888:30">(</operator><name pos:start="1888:31" pos:end="1888:38">uint64_t</name> <operator pos:start="1888:40" pos:end="1888:40">*</operator><operator pos:start="1888:41" pos:end="1888:41">)</operator><operator pos:start="1888:42" pos:end="1888:42">&amp;</operator><name pos:start="1888:43" pos:end="1888:51"><name pos:start="1888:43" pos:end="1888:44">de</name><operator pos:start="1888:45" pos:end="1888:46">-&gt;</operator><name pos:start="1888:47" pos:end="1888:51">d_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1889:21" pos:end="1889:72"><expr pos:start="1889:21" pos:end="1889:71"><name pos:start="1889:21" pos:end="1889:22">de</name> <operator pos:start="1889:24" pos:end="1889:24">=</operator> <operator pos:start="1889:26" pos:end="1889:26">(</operator>struct <name pos:start="1889:34" pos:end="1889:47">linux_dirent64</name> <operator pos:start="1889:49" pos:end="1889:49">*</operator><operator pos:start="1889:50" pos:end="1889:50">)</operator><operator pos:start="1889:51" pos:end="1889:51">(</operator><operator pos:start="1889:52" pos:end="1889:52">(</operator><name pos:start="1889:53" pos:end="1889:56">char</name> <operator pos:start="1889:58" pos:end="1889:58">*</operator><operator pos:start="1889:59" pos:end="1889:59">)</operator><name pos:start="1889:60" pos:end="1889:61">de</name> <operator pos:start="1889:63" pos:end="1889:63">+</operator> <name pos:start="1889:65" pos:end="1889:70">reclen</name><operator pos:start="1889:71" pos:end="1889:71">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="1890:21" pos:end="1890:34"><expr pos:start="1890:21" pos:end="1890:33"><name pos:start="1890:21" pos:end="1890:23">len</name> <operator pos:start="1890:25" pos:end="1890:26">-=</operator> <name pos:start="1890:28" pos:end="1890:33">reclen</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1891:13" pos:end="1894:0"><expr pos:start="1891:13" pos:end="1891:40"><call pos:start="1891:13" pos:end="1891:40"><name pos:start="1891:13" pos:end="1891:23">unlock_user</name><argument_list pos:start="1891:24" pos:end="1891:40">(<argument pos:start="1891:25" pos:end="1891:28"><expr pos:start="1891:25" pos:end="1891:28"><name pos:start="1891:25" pos:end="1891:28">dirp</name></expr></argument>, <argument pos:start="1891:31" pos:end="1891:34"><expr pos:start="1891:31" pos:end="1891:34"><name pos:start="1891:31" pos:end="1891:34">arg2</name></expr></argument>, <argument pos:start="1891:37" pos:end="1891:39"><expr pos:start="1891:37" pos:end="1891:39"><name pos:start="1891:37" pos:end="1891:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1892:1" pos:end="1892:6">#<cpp:directive pos:start="1892:2" pos:end="1892:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="1892:8" pos:end="1892:33">/* TARGET_NR_getdents64 */</comment>
<cpp:if pos:start="1893:1" pos:end="1893:33">#<cpp:directive pos:start="1893:2" pos:end="1893:3">if</cpp:directive> <expr pos:start="1893:5" pos:end="1893:33"><call pos:start="1893:5" pos:end="1893:33"><name pos:start="1893:5" pos:end="1893:11">defined</name><argument_list pos:start="1893:12" pos:end="1893:33">(<argument pos:start="1893:13" pos:end="1893:32"><expr pos:start="1893:13" pos:end="1893:32"><name pos:start="1893:13" pos:end="1893:32">TARGET_NR__newselect</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="1894:5" pos:end="1894:30">case <expr pos:start="1894:10" pos:end="1894:29"><name pos:start="1894:10" pos:end="1894:29">TARGET_NR__newselect</name></expr>:</case>
        <expr_stmt pos:start="1895:9" pos:end="1899:0"><expr pos:start="1895:9" pos:end="1895:53"><name pos:start="1895:9" pos:end="1895:11">ret</name> <operator pos:start="1895:13" pos:end="1895:13">=</operator> <call pos:start="1895:15" pos:end="1895:53"><name pos:start="1895:15" pos:end="1895:23">do_select</name><argument_list pos:start="1895:24" pos:end="1895:53">(<argument pos:start="1895:25" pos:end="1895:28"><expr pos:start="1895:25" pos:end="1895:28"><name pos:start="1895:25" pos:end="1895:28">arg1</name></expr></argument>, <argument pos:start="1895:31" pos:end="1895:34"><expr pos:start="1895:31" pos:end="1895:34"><name pos:start="1895:31" pos:end="1895:34">arg2</name></expr></argument>, <argument pos:start="1895:37" pos:end="1895:40"><expr pos:start="1895:37" pos:end="1895:40"><name pos:start="1895:37" pos:end="1895:40">arg3</name></expr></argument>, <argument pos:start="1895:43" pos:end="1895:46"><expr pos:start="1895:43" pos:end="1895:46"><name pos:start="1895:43" pos:end="1895:46">arg4</name></expr></argument>, <argument pos:start="1895:49" pos:end="1895:52"><expr pos:start="1895:49" pos:end="1895:52"><name pos:start="1895:49" pos:end="1895:52">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1896:1" pos:end="1896:6">#<cpp:directive pos:start="1896:2" pos:end="1896:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="1897:1" pos:end="1897:55">#<cpp:directive pos:start="1897:2" pos:end="1897:3">if</cpp:directive> <expr pos:start="1897:5" pos:end="1897:55"><call pos:start="1897:5" pos:end="1897:27"><name pos:start="1897:5" pos:end="1897:11">defined</name><argument_list pos:start="1897:12" pos:end="1897:27">(<argument pos:start="1897:13" pos:end="1897:26"><expr pos:start="1897:13" pos:end="1897:26"><name pos:start="1897:13" pos:end="1897:26">TARGET_NR_poll</name></expr></argument>)</argument_list></call> <operator pos:start="1897:29" pos:end="1897:30">||</operator> <call pos:start="1897:32" pos:end="1897:55"><name pos:start="1897:32" pos:end="1897:38">defined</name><argument_list pos:start="1897:39" pos:end="1897:55">(<argument pos:start="1897:40" pos:end="1897:54"><expr pos:start="1897:40" pos:end="1897:54"><name pos:start="1897:40" pos:end="1897:54">TARGET_NR_ppoll</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef pos:start="1898:1" pos:end="1898:22"># <cpp:directive pos:start="1898:3" pos:end="1898:7">ifdef</cpp:directive> <name pos:start="1898:9" pos:end="1898:22">TARGET_NR_poll</name></cpp:ifdef>
    <case pos:start="1899:5" pos:end="1902:0">case <expr pos:start="1899:10" pos:end="1899:23"><name pos:start="1899:10" pos:end="1899:23">TARGET_NR_poll</name></expr>:</case>
<cpp:endif pos:start="1900:1" pos:end="1900:7"># <cpp:directive pos:start="1900:3" pos:end="1900:7">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1901:1" pos:end="1901:23"># <cpp:directive pos:start="1901:3" pos:end="1901:7">ifdef</cpp:directive> <name pos:start="1901:9" pos:end="1901:23">TARGET_NR_ppoll</name></cpp:ifdef>
    <case pos:start="1902:5" pos:end="1904:0">case <expr pos:start="1902:10" pos:end="1902:24"><name pos:start="1902:10" pos:end="1902:24">TARGET_NR_ppoll</name></expr>:</case>
<cpp:endif pos:start="1903:1" pos:end="1903:7"># <cpp:directive pos:start="1903:3" pos:end="1903:7">endif</cpp:directive></cpp:endif>
        <block pos:start="1904:9" pos:end="3541:14">{<block_content pos:start="1905:13" pos:end="3541:14">
            <decl_stmt pos:start="1905:13" pos:end="1905:45"><decl pos:start="1905:13" pos:end="1905:44"><type pos:start="1905:13" pos:end="1905:34"><name pos:start="1905:13" pos:end="1905:32"><name pos:start="1905:13" pos:end="1905:18">struct</name> <name pos:start="1905:20" pos:end="1905:32">target_pollfd</name></name> <modifier pos:start="1905:34" pos:end="1905:34">*</modifier></type><name pos:start="1905:35" pos:end="1905:44">target_pfd</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1906:13" pos:end="1906:37"><decl pos:start="1906:13" pos:end="1906:36"><type pos:start="1906:13" pos:end="1906:24"><name pos:start="1906:13" pos:end="1906:20">unsigned</name> <name pos:start="1906:22" pos:end="1906:24">int</name></type> <name pos:start="1906:26" pos:end="1906:29">nfds</name> <init pos:start="1906:31" pos:end="1906:36">= <expr pos:start="1906:33" pos:end="1906:36"><name pos:start="1906:33" pos:end="1906:36">arg2</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="1907:13" pos:end="1907:31"><decl pos:start="1907:13" pos:end="1907:30"><type pos:start="1907:13" pos:end="1907:27"><name pos:start="1907:13" pos:end="1907:25"><name pos:start="1907:13" pos:end="1907:18">struct</name> <name pos:start="1907:20" pos:end="1907:25">pollfd</name></name> <modifier pos:start="1907:27" pos:end="1907:27">*</modifier></type><name pos:start="1907:28" pos:end="1907:30">pfd</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1908:13" pos:end="1908:27"><decl pos:start="1908:13" pos:end="1908:26"><type pos:start="1908:13" pos:end="1908:24"><name pos:start="1908:13" pos:end="1908:20">unsigned</name> <name pos:start="1908:22" pos:end="1908:24">int</name></type> <name pos:start="1908:26" pos:end="1908:26">i</name></decl>;</decl_stmt>
            <expr_stmt pos:start="1909:13" pos:end="1909:23"><expr pos:start="1909:13" pos:end="1909:22"><name pos:start="1909:13" pos:end="1909:15">pfd</name> <operator pos:start="1909:17" pos:end="1909:17">=</operator> <name pos:start="1909:19" pos:end="1909:22">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1910:13" pos:end="1910:30"><expr pos:start="1910:13" pos:end="1910:29"><name pos:start="1910:13" pos:end="1910:22">target_pfd</name> <operator pos:start="1910:24" pos:end="1910:24">=</operator> <name pos:start="1910:26" pos:end="1910:29">NULL</name></expr>;</expr_stmt>
            <if_stmt pos:start="1911:13" pos:end="3541:14"><if pos:start="1911:13" pos:end="3541:14">if <condition pos:start="1911:16" pos:end="1911:21">(<expr pos:start="1911:17" pos:end="1911:20"><name pos:start="1911:17" pos:end="1911:20">nfds</name></expr>)</condition> <block pos:start="1911:23" pos:end="3541:14">{<block_content pos:start="1912:17" pos:end="3541:14">
                <expr_stmt pos:start="1912:17" pos:end="1913:79"><expr pos:start="1912:17" pos:end="1913:78"><name pos:start="1912:17" pos:end="1912:26">target_pfd</name> <operator pos:start="1912:28" pos:end="1912:28">=</operator> <call pos:start="1912:30" pos:end="1913:78"><name pos:start="1912:30" pos:end="1912:38">lock_user</name><argument_list pos:start="1912:39" pos:end="1913:78">(<argument pos:start="1912:40" pos:end="1912:51"><expr pos:start="1912:40" pos:end="1912:51"><name pos:start="1912:40" pos:end="1912:51">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1912:54" pos:end="1912:57"><expr pos:start="1912:54" pos:end="1912:57"><name pos:start="1912:54" pos:end="1912:57">arg1</name></expr></argument>,
                                       <argument pos:start="1913:40" pos:end="1913:74"><expr pos:start="1913:40" pos:end="1913:74"><sizeof pos:start="1913:40" pos:end="1913:67">sizeof<argument_list pos:start="1913:46" pos:end="1913:67">(<argument pos:start="1913:47" pos:end="1913:66"><expr pos:start="1913:47" pos:end="1913:66">struct <name pos:start="1913:54" pos:end="1913:66">target_pollfd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1913:69" pos:end="1913:69">*</operator> <name pos:start="1913:71" pos:end="1913:74">nfds</name></expr></argument>, <argument pos:start="1913:77" pos:end="1913:77"><expr pos:start="1913:77" pos:end="1913:77"><literal type="number" pos:start="1913:77" pos:end="1913:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1914:17" pos:end="3541:14"><if pos:start="1914:17" pos:end="3541:14">if <condition pos:start="1914:20" pos:end="1914:32">(<expr pos:start="1914:21" pos:end="1914:31"><operator pos:start="1914:21" pos:end="1914:21">!</operator><name pos:start="1914:22" pos:end="1914:31">target_pfd</name></expr>)</condition> <block pos:start="1914:34" pos:end="3541:14">{<block_content pos:start="1915:21" pos:end="3541:14">
                    <goto pos:start="1915:21" pos:end="1915:32">goto <name pos:start="1915:26" pos:end="1915:31">efault</name>;</goto>
                <expr_stmt pos:start="1916:17" pos:end="1916:59"><expr pos:start="1916:17" pos:end="1916:58"><name pos:start="1916:17" pos:end="1916:19">pfd</name> <operator pos:start="1916:21" pos:end="1916:21">=</operator> <call pos:start="1916:23" pos:end="1916:58"><name pos:start="1916:23" pos:end="1916:28">alloca</name><argument_list pos:start="1916:29" pos:end="1916:58">(<argument pos:start="1916:30" pos:end="1916:57"><expr pos:start="1916:30" pos:end="1916:57"><sizeof pos:start="1916:30" pos:end="1916:50">sizeof<argument_list pos:start="1916:36" pos:end="1916:50">(<argument pos:start="1916:37" pos:end="1916:49"><expr pos:start="1916:37" pos:end="1916:49">struct <name pos:start="1916:44" pos:end="1916:49">pollfd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1916:52" pos:end="1916:52">*</operator> <name pos:start="1916:54" pos:end="1916:57">nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for pos:start="1917:17" pos:end="3541:14">for <control pos:start="1917:21" pos:end="1917:42">(<init pos:start="1917:22" pos:end="1917:27"><expr pos:start="1917:22" pos:end="1917:26"><name pos:start="1917:22" pos:end="1917:22">i</name> <operator pos:start="1917:24" pos:end="1917:24">=</operator> <literal type="number" pos:start="1917:26" pos:end="1917:26">0</literal></expr>;</init> <condition pos:start="1917:29" pos:end="1917:37"><expr pos:start="1917:29" pos:end="1917:36"><name pos:start="1917:29" pos:end="1917:29">i</name> <operator pos:start="1917:31" pos:end="1917:31">&lt;</operator> <name pos:start="1917:33" pos:end="1917:36">nfds</name></expr>;</condition> <incr pos:start="1917:39" pos:end="1917:41"><expr pos:start="1917:39" pos:end="1917:41"><name pos:start="1917:39" pos:end="1917:39">i</name><operator pos:start="1917:40" pos:end="1917:41">++</operator></expr></incr>)</control> <block pos:start="1917:44" pos:end="3541:14">{<block_content pos:start="1918:21" pos:end="3541:14">
                    <expr_stmt pos:start="1918:21" pos:end="1918:58"><expr pos:start="1918:21" pos:end="1918:57"><name pos:start="1918:21" pos:end="1918:26"><name pos:start="1918:21" pos:end="1918:23">pfd</name><index pos:start="1918:24" pos:end="1918:26">[<expr pos:start="1918:25" pos:end="1918:25"><name pos:start="1918:25" pos:end="1918:25">i</name></expr>]</index></name><operator pos:start="1918:27" pos:end="1918:27">.</operator><name pos:start="1918:28" pos:end="1918:29">fd</name> <operator pos:start="1918:31" pos:end="1918:31">=</operator> <call pos:start="1918:33" pos:end="1918:57"><name pos:start="1918:33" pos:end="1918:39">tswap32</name><argument_list pos:start="1918:40" pos:end="1918:57">(<argument pos:start="1918:41" pos:end="1918:56"><expr pos:start="1918:41" pos:end="1918:56"><name pos:start="1918:41" pos:end="1918:53"><name pos:start="1918:41" pos:end="1918:50">target_pfd</name><index pos:start="1918:51" pos:end="1918:53">[<expr pos:start="1918:52" pos:end="1918:52"><name pos:start="1918:52" pos:end="1918:52">i</name></expr>]</index></name><operator pos:start="1918:54" pos:end="1918:54">.</operator><name pos:start="1918:55" pos:end="1918:56">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1919:21" pos:end="1919:66"><expr pos:start="1919:21" pos:end="1919:65"><name pos:start="1919:21" pos:end="1919:26"><name pos:start="1919:21" pos:end="1919:23">pfd</name><index pos:start="1919:24" pos:end="1919:26">[<expr pos:start="1919:25" pos:end="1919:25"><name pos:start="1919:25" pos:end="1919:25">i</name></expr>]</index></name><operator pos:start="1919:27" pos:end="1919:27">.</operator><name pos:start="1919:28" pos:end="1919:33">events</name> <operator pos:start="1919:35" pos:end="1919:35">=</operator> <call pos:start="1919:37" pos:end="1919:65"><name pos:start="1919:37" pos:end="1919:43">tswap16</name><argument_list pos:start="1919:44" pos:end="1919:65">(<argument pos:start="1919:45" pos:end="1919:64"><expr pos:start="1919:45" pos:end="1919:64"><name pos:start="1919:45" pos:end="1919:57"><name pos:start="1919:45" pos:end="1919:54">target_pfd</name><index pos:start="1919:55" pos:end="1919:57">[<expr pos:start="1919:56" pos:end="1919:56"><name pos:start="1919:56" pos:end="1919:56">i</name></expr>]</index></name><operator pos:start="1919:58" pos:end="1919:58">.</operator><name pos:start="1919:59" pos:end="1919:64">events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="1920:13" pos:end="3541:14">switch <condition pos:start="1920:20" pos:end="1920:24">(<expr pos:start="1920:21" pos:end="1920:23"><name pos:start="1920:21" pos:end="1920:23">num</name></expr>)</condition> <block pos:start="1920:26" pos:end="3541:14">{<block_content pos:start="1922:13" pos:end="3541:14">
<cpp:ifdef pos:start="1921:1" pos:end="1921:23"># <cpp:directive pos:start="1921:3" pos:end="1921:7">ifdef</cpp:directive> <name pos:start="1921:9" pos:end="1921:23">TARGET_NR_ppoll</name></cpp:ifdef>
            <case pos:start="1922:13" pos:end="1922:33">case <expr pos:start="1922:18" pos:end="1922:32"><name pos:start="1922:18" pos:end="1922:32">TARGET_NR_ppoll</name></expr>:</case>
            <block pos:start="1923:13" pos:end="3541:14">{<block_content pos:start="1924:17" pos:end="3541:14">
                <decl_stmt pos:start="1924:17" pos:end="1924:72"><decl pos:start="1924:17" pos:end="1924:43"><type pos:start="1924:17" pos:end="1924:31"><name pos:start="1924:17" pos:end="1924:31"><name pos:start="1924:17" pos:end="1924:22">struct</name> <name pos:start="1924:24" pos:end="1924:31">timespec</name></name></type> <name pos:start="1924:33" pos:end="1924:43">_timeout_ts</name></decl>, <decl pos:start="1924:46" pos:end="1924:71"><type ref="prev" pos:start="1924:17" pos:end="1924:31"><modifier pos:start="1924:46" pos:end="1924:46">*</modifier></type><name pos:start="1924:47" pos:end="1924:56">timeout_ts</name> <init pos:start="1924:58" pos:end="1924:71">= <expr pos:start="1924:60" pos:end="1924:71"><operator pos:start="1924:60" pos:end="1924:60">&amp;</operator><name pos:start="1924:61" pos:end="1924:71">_timeout_ts</name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="1925:17" pos:end="1925:44"><decl pos:start="1925:17" pos:end="1925:43"><type pos:start="1925:17" pos:end="1925:33"><name pos:start="1925:17" pos:end="1925:31">target_sigset_t</name> <modifier pos:start="1925:33" pos:end="1925:33">*</modifier></type><name pos:start="1925:34" pos:end="1925:43">target_set</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1926:17" pos:end="1926:44"><decl pos:start="1926:17" pos:end="1926:29"><type pos:start="1926:17" pos:end="1926:24"><name pos:start="1926:17" pos:end="1926:24">sigset_t</name></type> <name pos:start="1926:26" pos:end="1926:29">_set</name></decl>, <decl pos:start="1926:32" pos:end="1926:43"><type ref="prev" pos:start="1926:17" pos:end="1926:24"><modifier pos:start="1926:32" pos:end="1926:32">*</modifier></type><name pos:start="1926:33" pos:end="1926:35">set</name> <init pos:start="1926:37" pos:end="1926:43">= <expr pos:start="1926:39" pos:end="1926:43"><operator pos:start="1926:39" pos:end="1926:39">&amp;</operator><name pos:start="1926:40" pos:end="1926:43">_set</name></expr></init></decl>;</decl_stmt>
                <if_stmt pos:start="1927:17" pos:end="3541:14"><if pos:start="1927:17" pos:end="3541:14">if <condition pos:start="1927:20" pos:end="1927:25">(<expr pos:start="1927:21" pos:end="1927:24"><name pos:start="1927:21" pos:end="1927:24">arg3</name></expr>)</condition> <block pos:start="1927:27" pos:end="3541:14">{<block_content pos:start="1928:21" pos:end="3541:14">
                    <if_stmt pos:start="1928:21" pos:end="3541:14"><if pos:start="1928:21" pos:end="1931:17">if <condition pos:start="1928:24" pos:end="1928:66">(<expr pos:start="1928:25" pos:end="1928:65"><call pos:start="1928:25" pos:end="1928:65"><name pos:start="1928:25" pos:end="1928:47">target_to_host_timespec</name><argument_list pos:start="1928:48" pos:end="1928:65">(<argument pos:start="1928:49" pos:end="1928:58"><expr pos:start="1928:49" pos:end="1928:58"><name pos:start="1928:49" pos:end="1928:58">timeout_ts</name></expr></argument>, <argument pos:start="1928:61" pos:end="1928:64"><expr pos:start="1928:61" pos:end="1928:64"><name pos:start="1928:61" pos:end="1928:64">arg3</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1928:68" pos:end="1931:17">{<block_content pos:start="1929:25" pos:end="1930:36">
                        <expr_stmt pos:start="1929:25" pos:end="1929:57"><expr pos:start="1929:25" pos:end="1929:56"><call pos:start="1929:25" pos:end="1929:56"><name pos:start="1929:25" pos:end="1929:35">unlock_user</name><argument_list pos:start="1929:36" pos:end="1929:56">(<argument pos:start="1929:37" pos:end="1929:46"><expr pos:start="1929:37" pos:end="1929:46"><name pos:start="1929:37" pos:end="1929:46">target_pfd</name></expr></argument>, <argument pos:start="1929:49" pos:end="1929:52"><expr pos:start="1929:49" pos:end="1929:52"><name pos:start="1929:49" pos:end="1929:52">arg1</name></expr></argument>, <argument pos:start="1929:55" pos:end="1929:55"><expr pos:start="1929:55" pos:end="1929:55"><literal type="number" pos:start="1929:55" pos:end="1929:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto pos:start="1930:25" pos:end="1930:36">goto <name pos:start="1930:30" pos:end="1930:35">efault</name>;</goto>
                </block_content>}</block></if> <else pos:start="1931:19" pos:end="3541:14">else <block pos:start="1931:24" pos:end="3541:14">{<block_content pos:start="1932:21" pos:end="3541:14">
                    <expr_stmt pos:start="1932:21" pos:end="1932:38"><expr pos:start="1932:21" pos:end="1932:37"><name pos:start="1932:21" pos:end="1932:30">timeout_ts</name> <operator pos:start="1932:32" pos:end="1932:32">=</operator> <name pos:start="1932:34" pos:end="1932:37">NULL</name></expr>;</expr_stmt>
                <if_stmt pos:start="1933:17" pos:end="3541:14"><if pos:start="1933:17" pos:end="3541:14">if <condition pos:start="1933:20" pos:end="1933:25">(<expr pos:start="1933:21" pos:end="1933:24"><name pos:start="1933:21" pos:end="1933:24">arg4</name></expr>)</condition> <block pos:start="1933:27" pos:end="3541:14">{<block_content pos:start="1934:21" pos:end="3541:14">
                    <if_stmt pos:start="1934:21" pos:end="3541:14"><if pos:start="1934:21" pos:end="3541:14">if <condition pos:start="1934:24" pos:end="1934:56">(<expr pos:start="1934:25" pos:end="1934:55"><name pos:start="1934:25" pos:end="1934:28">arg5</name> <operator pos:start="1934:30" pos:end="1934:31">!=</operator> <sizeof pos:start="1934:33" pos:end="1934:55">sizeof<argument_list pos:start="1934:39" pos:end="1934:55">(<argument pos:start="1934:40" pos:end="1934:54"><expr pos:start="1934:40" pos:end="1934:54"><name pos:start="1934:40" pos:end="1934:54">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="1934:58" pos:end="3541:14">{<block_content pos:start="1935:25" pos:end="3541:14">
                        <expr_stmt pos:start="1935:25" pos:end="1935:57"><expr pos:start="1935:25" pos:end="1935:56"><call pos:start="1935:25" pos:end="1935:56"><name pos:start="1935:25" pos:end="1935:35">unlock_user</name><argument_list pos:start="1935:36" pos:end="1935:56">(<argument pos:start="1935:37" pos:end="1935:46"><expr pos:start="1935:37" pos:end="1935:46"><name pos:start="1935:37" pos:end="1935:46">target_pfd</name></expr></argument>, <argument pos:start="1935:49" pos:end="1935:52"><expr pos:start="1935:49" pos:end="1935:52"><name pos:start="1935:49" pos:end="1935:52">arg1</name></expr></argument>, <argument pos:start="1935:55" pos:end="1935:55"><expr pos:start="1935:55" pos:end="1935:55"><literal type="number" pos:start="1935:55" pos:end="1935:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1936:21" pos:end="1936:90"><expr pos:start="1936:21" pos:end="1936:89"><name pos:start="1936:21" pos:end="1936:30">target_set</name> <operator pos:start="1936:32" pos:end="1936:32">=</operator> <call pos:start="1936:34" pos:end="1936:89"><name pos:start="1936:34" pos:end="1936:42">lock_user</name><argument_list pos:start="1936:43" pos:end="1936:89">(<argument pos:start="1936:44" pos:end="1936:54"><expr pos:start="1936:44" pos:end="1936:54"><name pos:start="1936:44" pos:end="1936:54">VERIFY_READ</name></expr></argument>, <argument pos:start="1936:57" pos:end="1936:60"><expr pos:start="1936:57" pos:end="1936:60"><name pos:start="1936:57" pos:end="1936:60">arg4</name></expr></argument>, <argument pos:start="1936:63" pos:end="1936:85"><expr pos:start="1936:63" pos:end="1936:85"><sizeof pos:start="1936:63" pos:end="1936:85">sizeof<argument_list pos:start="1936:69" pos:end="1936:85">(<argument pos:start="1936:70" pos:end="1936:84"><expr pos:start="1936:70" pos:end="1936:84"><name pos:start="1936:70" pos:end="1936:84">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1936:88" pos:end="1936:88"><expr pos:start="1936:88" pos:end="1936:88"><literal type="number" pos:start="1936:88" pos:end="1936:88">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="1937:21" pos:end="3541:14"><if pos:start="1937:21" pos:end="1941:17">if <condition pos:start="1937:24" pos:end="1937:36">(<expr pos:start="1937:25" pos:end="1937:35"><operator pos:start="1937:25" pos:end="1937:25">!</operator><name pos:start="1937:26" pos:end="1937:35">target_set</name></expr>)</condition> <block pos:start="1937:38" pos:end="1941:17">{<block_content pos:start="1938:25" pos:end="1940:59">
                        <expr_stmt pos:start="1938:25" pos:end="1938:57"><expr pos:start="1938:25" pos:end="1938:56"><call pos:start="1938:25" pos:end="1938:56"><name pos:start="1938:25" pos:end="1938:35">unlock_user</name><argument_list pos:start="1938:36" pos:end="1938:56">(<argument pos:start="1938:37" pos:end="1938:46"><expr pos:start="1938:37" pos:end="1938:46"><name pos:start="1938:37" pos:end="1938:46">target_pfd</name></expr></argument>, <argument pos:start="1938:49" pos:end="1938:52"><expr pos:start="1938:49" pos:end="1938:52"><name pos:start="1938:49" pos:end="1938:52">arg1</name></expr></argument>, <argument pos:start="1938:55" pos:end="1938:55"><expr pos:start="1938:55" pos:end="1938:55"><literal type="number" pos:start="1938:55" pos:end="1938:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto pos:start="1939:25" pos:end="1939:36">goto <name pos:start="1939:30" pos:end="1939:35">efault</name>;</goto>
                    <expr_stmt pos:start="1940:21" pos:end="1940:59"><expr pos:start="1940:21" pos:end="1940:58"><call pos:start="1940:21" pos:end="1940:58"><name pos:start="1940:21" pos:end="1940:41">target_to_host_sigset</name><argument_list pos:start="1940:42" pos:end="1940:58">(<argument pos:start="1940:43" pos:end="1940:45"><expr pos:start="1940:43" pos:end="1940:45"><name pos:start="1940:43" pos:end="1940:45">set</name></expr></argument>, <argument pos:start="1940:48" pos:end="1940:57"><expr pos:start="1940:48" pos:end="1940:57"><name pos:start="1940:48" pos:end="1940:57">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="1941:19" pos:end="3541:14">else <block pos:start="1941:24" pos:end="3541:14">{<block_content pos:start="1942:21" pos:end="3541:14">
                    <expr_stmt pos:start="1942:21" pos:end="1942:31"><expr pos:start="1942:21" pos:end="1942:30"><name pos:start="1942:21" pos:end="1942:23">set</name> <operator pos:start="1942:25" pos:end="1942:25">=</operator> <name pos:start="1942:27" pos:end="1942:30">NULL</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1943:17" pos:end="1944:64"><expr pos:start="1943:17" pos:end="1944:63"><name pos:start="1943:17" pos:end="1943:19">ret</name> <operator pos:start="1943:21" pos:end="1943:21">=</operator> <call pos:start="1943:23" pos:end="1944:63"><name pos:start="1943:23" pos:end="1943:31">get_errno</name><argument_list pos:start="1943:32" pos:end="1944:63">(<argument pos:start="1943:33" pos:end="1944:62"><expr pos:start="1943:33" pos:end="1944:62"><call pos:start="1943:33" pos:end="1944:62"><name pos:start="1943:33" pos:end="1943:42">safe_ppoll</name><argument_list pos:start="1943:43" pos:end="1944:62">(<argument pos:start="1943:44" pos:end="1943:46"><expr pos:start="1943:44" pos:end="1943:46"><name pos:start="1943:44" pos:end="1943:46">pfd</name></expr></argument>, <argument pos:start="1943:49" pos:end="1943:52"><expr pos:start="1943:49" pos:end="1943:52"><name pos:start="1943:49" pos:end="1943:52">nfds</name></expr></argument>, <argument pos:start="1943:55" pos:end="1943:64"><expr pos:start="1943:55" pos:end="1943:64"><name pos:start="1943:55" pos:end="1943:64">timeout_ts</name></expr></argument>,
                                           <argument pos:start="1944:44" pos:end="1944:46"><expr pos:start="1944:44" pos:end="1944:46"><name pos:start="1944:44" pos:end="1944:46">set</name></expr></argument>, <argument pos:start="1944:49" pos:end="1944:61"><expr pos:start="1944:49" pos:end="1944:61"><name pos:start="1944:49" pos:end="1944:61">SIGSET_T_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1945:17" pos:end="3541:14"><if pos:start="1945:17" pos:end="3541:14">if <condition pos:start="1945:20" pos:end="1945:43">(<expr pos:start="1945:21" pos:end="1945:42"><operator pos:start="1945:21" pos:end="1945:21">!</operator><call pos:start="1945:22" pos:end="1945:34"><name pos:start="1945:22" pos:end="1945:29">is_error</name><argument_list pos:start="1945:30" pos:end="1945:34">(<argument pos:start="1945:31" pos:end="1945:33"><expr pos:start="1945:31" pos:end="1945:33"><name pos:start="1945:31" pos:end="1945:33">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1945:36" pos:end="1945:37">&amp;&amp;</operator> <name pos:start="1945:39" pos:end="1945:42">arg3</name></expr>)</condition> <block pos:start="1945:45" pos:end="3541:14">{<block_content pos:start="1946:21" pos:end="3541:14">
                    <expr_stmt pos:start="1946:21" pos:end="1946:62"><expr pos:start="1946:21" pos:end="1946:61"><call pos:start="1946:21" pos:end="1946:61"><name pos:start="1946:21" pos:end="1946:43">host_to_target_timespec</name><argument_list pos:start="1946:44" pos:end="1946:61">(<argument pos:start="1946:45" pos:end="1946:48"><expr pos:start="1946:45" pos:end="1946:48"><name pos:start="1946:45" pos:end="1946:48">arg3</name></expr></argument>, <argument pos:start="1946:51" pos:end="1946:60"><expr pos:start="1946:51" pos:end="1946:60"><name pos:start="1946:51" pos:end="1946:60">timeout_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1947:17" pos:end="3541:14"><if pos:start="1947:17" pos:end="3541:14">if <condition pos:start="1947:20" pos:end="1947:25">(<expr pos:start="1947:21" pos:end="1947:24"><name pos:start="1947:21" pos:end="1947:24">arg4</name></expr>)</condition> <block pos:start="1947:27" pos:end="3541:14">{<block_content pos:start="1948:21" pos:end="3541:14">
                    <expr_stmt pos:start="1948:21" pos:end="1951:0"><expr pos:start="1948:21" pos:end="1948:52"><call pos:start="1948:21" pos:end="1948:52"><name pos:start="1948:21" pos:end="1948:31">unlock_user</name><argument_list pos:start="1948:32" pos:end="1948:52">(<argument pos:start="1948:33" pos:end="1948:42"><expr pos:start="1948:33" pos:end="1948:42"><name pos:start="1948:33" pos:end="1948:42">target_set</name></expr></argument>, <argument pos:start="1948:45" pos:end="1948:48"><expr pos:start="1948:45" pos:end="1948:48"><name pos:start="1948:45" pos:end="1948:48">arg4</name></expr></argument>, <argument pos:start="1948:51" pos:end="1948:51"><expr pos:start="1948:51" pos:end="1948:51"><literal type="number" pos:start="1948:51" pos:end="1948:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1949:1" pos:end="1949:7"># <cpp:directive pos:start="1949:3" pos:end="1949:7">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1950:1" pos:end="1950:22"># <cpp:directive pos:start="1950:3" pos:end="1950:7">ifdef</cpp:directive> <name pos:start="1950:9" pos:end="1950:22">TARGET_NR_poll</name></cpp:ifdef>
            <case pos:start="1951:13" pos:end="1951:32">case <expr pos:start="1951:18" pos:end="1951:31"><name pos:start="1951:18" pos:end="1951:31">TARGET_NR_poll</name></expr>:</case>
            <block pos:start="1952:13" pos:end="3541:14">{<block_content pos:start="1953:17" pos:end="3541:14">
                <decl_stmt pos:start="1953:17" pos:end="1953:41"><decl pos:start="1953:17" pos:end="1953:34"><type pos:start="1953:17" pos:end="1953:31"><name pos:start="1953:17" pos:end="1953:31"><name pos:start="1953:17" pos:end="1953:22">struct</name> <name pos:start="1953:24" pos:end="1953:31">timespec</name></name></type> <name pos:start="1953:33" pos:end="1953:34">ts</name></decl>, <decl pos:start="1953:37" pos:end="1953:40"><type ref="prev" pos:start="1953:17" pos:end="1953:31"><modifier pos:start="1953:37" pos:end="1953:37">*</modifier></type><name pos:start="1953:38" pos:end="1953:40">pts</name></decl>;</decl_stmt>
                <if_stmt pos:start="1954:17" pos:end="3541:14"><if pos:start="1954:17" pos:end="1959:17">if <condition pos:start="1954:20" pos:end="1954:30">(<expr pos:start="1954:21" pos:end="1954:29"><name pos:start="1954:21" pos:end="1954:24">arg3</name> <operator pos:start="1954:26" pos:end="1954:27">&gt;=</operator> <literal type="number" pos:start="1954:29" pos:end="1954:29">0</literal></expr>)</condition> <block pos:start="1954:32" pos:end="1959:17">{<block_content pos:start="1956:21" pos:end="1958:30">
                    <comment type="block" pos:start="1955:21" pos:end="1955:48">/* Convert ms to secs, ns */</comment>
                    <expr_stmt pos:start="1956:21" pos:end="1956:44"><expr pos:start="1956:21" pos:end="1956:43"><name pos:start="1956:21" pos:end="1956:29"><name pos:start="1956:21" pos:end="1956:22">ts</name><operator pos:start="1956:23" pos:end="1956:23">.</operator><name pos:start="1956:24" pos:end="1956:29">tv_sec</name></name> <operator pos:start="1956:31" pos:end="1956:31">=</operator> <name pos:start="1956:33" pos:end="1956:36">arg3</name> <operator pos:start="1956:38" pos:end="1956:38">/</operator> <literal type="number" pos:start="1956:40" pos:end="1956:43">1000</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="1957:21" pos:end="1957:59"><expr pos:start="1957:21" pos:end="1957:58"><name pos:start="1957:21" pos:end="1957:30"><name pos:start="1957:21" pos:end="1957:22">ts</name><operator pos:start="1957:23" pos:end="1957:23">.</operator><name pos:start="1957:24" pos:end="1957:30">tv_nsec</name></name> <operator pos:start="1957:32" pos:end="1957:32">=</operator> <operator pos:start="1957:34" pos:end="1957:34">(</operator><name pos:start="1957:35" pos:end="1957:38">arg3</name> <operator pos:start="1957:40" pos:end="1957:40">%</operator> <literal type="number" pos:start="1957:42" pos:end="1957:45">1000</literal><operator pos:start="1957:46" pos:end="1957:46">)</operator> <operator pos:start="1957:48" pos:end="1957:48">*</operator> <literal type="number" pos:start="1957:50" pos:end="1957:58">1000000LL</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="1958:21" pos:end="1958:30"><expr pos:start="1958:21" pos:end="1958:29"><name pos:start="1958:21" pos:end="1958:23">pts</name> <operator pos:start="1958:25" pos:end="1958:25">=</operator> <operator pos:start="1958:27" pos:end="1958:27">&amp;</operator><name pos:start="1958:28" pos:end="1958:29">ts</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="1959:19" pos:end="3541:14">else <block pos:start="1959:24" pos:end="3541:14">{<block_content pos:start="1961:21" pos:end="3541:14">
                    <comment type="block" pos:start="1960:21" pos:end="1960:61">/* -ve poll() timeout means "infinite" */</comment>
                    <expr_stmt pos:start="1961:21" pos:end="1961:31"><expr pos:start="1961:21" pos:end="1961:30"><name pos:start="1961:21" pos:end="1961:23">pts</name> <operator pos:start="1961:25" pos:end="1961:25">=</operator> <name pos:start="1961:27" pos:end="1961:30">NULL</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1962:17" pos:end="1964:0"><expr pos:start="1962:17" pos:end="1962:68"><name pos:start="1962:17" pos:end="1962:19">ret</name> <operator pos:start="1962:21" pos:end="1962:21">=</operator> <call pos:start="1962:23" pos:end="1962:68"><name pos:start="1962:23" pos:end="1962:31">get_errno</name><argument_list pos:start="1962:32" pos:end="1962:68">(<argument pos:start="1962:33" pos:end="1962:67"><expr pos:start="1962:33" pos:end="1962:67"><call pos:start="1962:33" pos:end="1962:67"><name pos:start="1962:33" pos:end="1962:42">safe_ppoll</name><argument_list pos:start="1962:43" pos:end="1962:67">(<argument pos:start="1962:44" pos:end="1962:46"><expr pos:start="1962:44" pos:end="1962:46"><name pos:start="1962:44" pos:end="1962:46">pfd</name></expr></argument>, <argument pos:start="1962:49" pos:end="1962:52"><expr pos:start="1962:49" pos:end="1962:52"><name pos:start="1962:49" pos:end="1962:52">nfds</name></expr></argument>, <argument pos:start="1962:55" pos:end="1962:57"><expr pos:start="1962:55" pos:end="1962:57"><name pos:start="1962:55" pos:end="1962:57">pts</name></expr></argument>, <argument pos:start="1962:60" pos:end="1962:63"><expr pos:start="1962:60" pos:end="1962:63"><name pos:start="1962:60" pos:end="1962:63">NULL</name></expr></argument>, <argument pos:start="1962:66" pos:end="1962:66"><expr pos:start="1962:66" pos:end="1962:66"><literal type="number" pos:start="1962:66" pos:end="1962:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1963:1" pos:end="1963:7"># <cpp:directive pos:start="1963:3" pos:end="1963:7">endif</cpp:directive></cpp:endif>
            <default pos:start="1964:13" pos:end="1964:20">default:</default>
                <expr_stmt pos:start="1965:17" pos:end="1965:39"><expr pos:start="1965:17" pos:end="1965:38"><call pos:start="1965:17" pos:end="1965:38"><name pos:start="1965:17" pos:end="1965:36">g_assert_not_reached</name><argument_list pos:start="1965:37" pos:end="1965:38">()</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1966:13" pos:end="3541:14"><if pos:start="1966:13" pos:end="3541:14">if <condition pos:start="1966:16" pos:end="1966:31">(<expr pos:start="1966:17" pos:end="1966:30"><operator pos:start="1966:17" pos:end="1966:17">!</operator><call pos:start="1966:18" pos:end="1966:30"><name pos:start="1966:18" pos:end="1966:25">is_error</name><argument_list pos:start="1966:26" pos:end="1966:30">(<argument pos:start="1966:27" pos:end="1966:29"><expr pos:start="1966:27" pos:end="1966:29"><name pos:start="1966:27" pos:end="1966:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1966:33" pos:end="3541:14">{<block_content pos:start="1967:17" pos:end="3541:14">
                <for pos:start="1967:17" pos:end="3541:14">for<control pos:start="1967:20" pos:end="1967:41">(<init pos:start="1967:21" pos:end="1967:26"><expr pos:start="1967:21" pos:end="1967:25"><name pos:start="1967:21" pos:end="1967:21">i</name> <operator pos:start="1967:23" pos:end="1967:23">=</operator> <literal type="number" pos:start="1967:25" pos:end="1967:25">0</literal></expr>;</init> <condition pos:start="1967:28" pos:end="1967:36"><expr pos:start="1967:28" pos:end="1967:35"><name pos:start="1967:28" pos:end="1967:28">i</name> <operator pos:start="1967:30" pos:end="1967:30">&lt;</operator> <name pos:start="1967:32" pos:end="1967:35">nfds</name></expr>;</condition> <incr pos:start="1967:38" pos:end="1967:40"><expr pos:start="1967:38" pos:end="1967:40"><name pos:start="1967:38" pos:end="1967:38">i</name><operator pos:start="1967:39" pos:end="1967:40">++</operator></expr></incr>)</control> <block pos:start="1967:43" pos:end="3541:14">{<block_content pos:start="1968:21" pos:end="3541:14">
                    <expr_stmt pos:start="1968:21" pos:end="1968:68"><expr pos:start="1968:21" pos:end="1968:67"><name pos:start="1968:21" pos:end="1968:33"><name pos:start="1968:21" pos:end="1968:30">target_pfd</name><index pos:start="1968:31" pos:end="1968:33">[<expr pos:start="1968:32" pos:end="1968:32"><name pos:start="1968:32" pos:end="1968:32">i</name></expr>]</index></name><operator pos:start="1968:34" pos:end="1968:34">.</operator><name pos:start="1968:35" pos:end="1968:41">revents</name> <operator pos:start="1968:43" pos:end="1968:43">=</operator> <call pos:start="1968:45" pos:end="1968:67"><name pos:start="1968:45" pos:end="1968:51">tswap16</name><argument_list pos:start="1968:52" pos:end="1968:67">(<argument pos:start="1968:53" pos:end="1968:66"><expr pos:start="1968:53" pos:end="1968:66"><name pos:start="1968:53" pos:end="1968:58"><name pos:start="1968:53" pos:end="1968:55">pfd</name><index pos:start="1968:56" pos:end="1968:58">[<expr pos:start="1968:57" pos:end="1968:57"><name pos:start="1968:57" pos:end="1968:57">i</name></expr>]</index></name><operator pos:start="1968:59" pos:end="1968:59">.</operator><name pos:start="1968:60" pos:end="1968:66">revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1969:13" pos:end="1971:0"><expr pos:start="1969:13" pos:end="1969:78"><call pos:start="1969:13" pos:end="1969:78"><name pos:start="1969:13" pos:end="1969:23">unlock_user</name><argument_list pos:start="1969:24" pos:end="1969:78">(<argument pos:start="1969:25" pos:end="1969:34"><expr pos:start="1969:25" pos:end="1969:34"><name pos:start="1969:25" pos:end="1969:34">target_pfd</name></expr></argument>, <argument pos:start="1969:37" pos:end="1969:40"><expr pos:start="1969:37" pos:end="1969:40"><name pos:start="1969:37" pos:end="1969:40">arg1</name></expr></argument>, <argument pos:start="1969:43" pos:end="1969:77"><expr pos:start="1969:43" pos:end="1969:77"><sizeof pos:start="1969:43" pos:end="1969:70">sizeof<argument_list pos:start="1969:49" pos:end="1969:70">(<argument pos:start="1969:50" pos:end="1969:69"><expr pos:start="1969:50" pos:end="1969:69">struct <name pos:start="1969:57" pos:end="1969:69">target_pollfd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1969:72" pos:end="1969:72">*</operator> <name pos:start="1969:74" pos:end="1969:77">nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1970:1" pos:end="1970:6">#<cpp:directive pos:start="1970:2" pos:end="1970:6">endif</cpp:directive></cpp:endif>
    <case pos:start="1971:5" pos:end="1971:25">case <expr pos:start="1971:10" pos:end="1971:24"><name pos:start="1971:10" pos:end="1971:24">TARGET_NR_flock</name></expr>:</case>
        <comment type="block" pos:start="1972:9" pos:end="1973:28">/* NOTE: the flock constant seems to be the same for every
           Linux platform */</comment>
        <expr_stmt pos:start="1974:9" pos:end="1974:48"><expr pos:start="1974:9" pos:end="1974:47"><name pos:start="1974:9" pos:end="1974:11">ret</name> <operator pos:start="1974:13" pos:end="1974:13">=</operator> <call pos:start="1974:15" pos:end="1974:47"><name pos:start="1974:15" pos:end="1974:23">get_errno</name><argument_list pos:start="1974:24" pos:end="1974:47">(<argument pos:start="1974:25" pos:end="1974:46"><expr pos:start="1974:25" pos:end="1974:46"><call pos:start="1974:25" pos:end="1974:46"><name pos:start="1974:25" pos:end="1974:34">safe_flock</name><argument_list pos:start="1974:35" pos:end="1974:46">(<argument pos:start="1974:36" pos:end="1974:39"><expr pos:start="1974:36" pos:end="1974:39"><name pos:start="1974:36" pos:end="1974:39">arg1</name></expr></argument>, <argument pos:start="1974:42" pos:end="1974:45"><expr pos:start="1974:42" pos:end="1974:45"><name pos:start="1974:42" pos:end="1974:45">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1975:5" pos:end="1975:25">case <expr pos:start="1975:10" pos:end="1975:24"><name pos:start="1975:10" pos:end="1975:24">TARGET_NR_readv</name></expr>:</case>
        <block pos:start="1976:9" pos:end="3541:14">{<block_content pos:start="1977:13" pos:end="3541:14">
            <decl_stmt pos:start="1977:13" pos:end="1977:72"><decl pos:start="1977:13" pos:end="1977:71"><type pos:start="1977:13" pos:end="1977:26"><name pos:start="1977:13" pos:end="1977:24"><name pos:start="1977:13" pos:end="1977:18">struct</name> <name pos:start="1977:20" pos:end="1977:24">iovec</name></name> <modifier pos:start="1977:26" pos:end="1977:26">*</modifier></type><name pos:start="1977:27" pos:end="1977:29">vec</name> <init pos:start="1977:31" pos:end="1977:71">= <expr pos:start="1977:33" pos:end="1977:71"><call pos:start="1977:33" pos:end="1977:71"><name pos:start="1977:33" pos:end="1977:42">lock_iovec</name><argument_list pos:start="1977:43" pos:end="1977:71">(<argument pos:start="1977:44" pos:end="1977:55"><expr pos:start="1977:44" pos:end="1977:55"><name pos:start="1977:44" pos:end="1977:55">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1977:58" pos:end="1977:61"><expr pos:start="1977:58" pos:end="1977:61"><name pos:start="1977:58" pos:end="1977:61">arg2</name></expr></argument>, <argument pos:start="1977:64" pos:end="1977:67"><expr pos:start="1977:64" pos:end="1977:67"><name pos:start="1977:64" pos:end="1977:67">arg3</name></expr></argument>, <argument pos:start="1977:70" pos:end="1977:70"><expr pos:start="1977:70" pos:end="1977:70"><literal type="number" pos:start="1977:70" pos:end="1977:70">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="1978:13" pos:end="3541:14"><if pos:start="1978:13" pos:end="1981:13">if <condition pos:start="1978:16" pos:end="1978:28">(<expr pos:start="1978:17" pos:end="1978:27"><name pos:start="1978:17" pos:end="1978:19">vec</name> <operator pos:start="1978:21" pos:end="1978:22">!=</operator> <name pos:start="1978:24" pos:end="1978:27">NULL</name></expr>)</condition> <block pos:start="1978:30" pos:end="1981:13">{<block_content pos:start="1979:17" pos:end="1980:49">
                <expr_stmt pos:start="1979:17" pos:end="1979:61"><expr pos:start="1979:17" pos:end="1979:60"><name pos:start="1979:17" pos:end="1979:19">ret</name> <operator pos:start="1979:21" pos:end="1979:21">=</operator> <call pos:start="1979:23" pos:end="1979:60"><name pos:start="1979:23" pos:end="1979:31">get_errno</name><argument_list pos:start="1979:32" pos:end="1979:60">(<argument pos:start="1979:33" pos:end="1979:59"><expr pos:start="1979:33" pos:end="1979:59"><call pos:start="1979:33" pos:end="1979:59"><name pos:start="1979:33" pos:end="1979:42">safe_readv</name><argument_list pos:start="1979:43" pos:end="1979:59">(<argument pos:start="1979:44" pos:end="1979:47"><expr pos:start="1979:44" pos:end="1979:47"><name pos:start="1979:44" pos:end="1979:47">arg1</name></expr></argument>, <argument pos:start="1979:50" pos:end="1979:52"><expr pos:start="1979:50" pos:end="1979:52"><name pos:start="1979:50" pos:end="1979:52">vec</name></expr></argument>, <argument pos:start="1979:55" pos:end="1979:58"><expr pos:start="1979:55" pos:end="1979:58"><name pos:start="1979:55" pos:end="1979:58">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1980:17" pos:end="1980:49"><expr pos:start="1980:17" pos:end="1980:48"><call pos:start="1980:17" pos:end="1980:48"><name pos:start="1980:17" pos:end="1980:28">unlock_iovec</name><argument_list pos:start="1980:29" pos:end="1980:48">(<argument pos:start="1980:30" pos:end="1980:32"><expr pos:start="1980:30" pos:end="1980:32"><name pos:start="1980:30" pos:end="1980:32">vec</name></expr></argument>, <argument pos:start="1980:35" pos:end="1980:38"><expr pos:start="1980:35" pos:end="1980:38"><name pos:start="1980:35" pos:end="1980:38">arg2</name></expr></argument>, <argument pos:start="1980:41" pos:end="1980:44"><expr pos:start="1980:41" pos:end="1980:44"><name pos:start="1980:41" pos:end="1980:44">arg3</name></expr></argument>, <argument pos:start="1980:47" pos:end="1980:47"><expr pos:start="1980:47" pos:end="1980:47"><literal type="number" pos:start="1980:47" pos:end="1980:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1981:15" pos:end="3541:14">else <block pos:start="1981:20" pos:end="3541:14">{<block_content pos:start="1982:17" pos:end="3541:14">
                <expr_stmt pos:start="1982:17" pos:end="1982:51"><expr pos:start="1982:17" pos:end="1982:50"><name pos:start="1982:17" pos:end="1982:19">ret</name> <operator pos:start="1982:21" pos:end="1982:21">=</operator> <operator pos:start="1982:23" pos:end="1982:23">-</operator><call pos:start="1982:24" pos:end="1982:50"><name pos:start="1982:24" pos:end="1982:43">host_to_target_errno</name><argument_list pos:start="1982:44" pos:end="1982:50">(<argument pos:start="1982:45" pos:end="1982:49"><expr pos:start="1982:45" pos:end="1982:49"><name pos:start="1982:45" pos:end="1982:49">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1983:5" pos:end="1983:26">case <expr pos:start="1983:10" pos:end="1983:25"><name pos:start="1983:10" pos:end="1983:25">TARGET_NR_writev</name></expr>:</case>
        <block pos:start="1984:9" pos:end="3541:14">{<block_content pos:start="1985:13" pos:end="3541:14">
            <decl_stmt pos:start="1985:13" pos:end="1985:71"><decl pos:start="1985:13" pos:end="1985:70"><type pos:start="1985:13" pos:end="1985:26"><name pos:start="1985:13" pos:end="1985:24"><name pos:start="1985:13" pos:end="1985:18">struct</name> <name pos:start="1985:20" pos:end="1985:24">iovec</name></name> <modifier pos:start="1985:26" pos:end="1985:26">*</modifier></type><name pos:start="1985:27" pos:end="1985:29">vec</name> <init pos:start="1985:31" pos:end="1985:70">= <expr pos:start="1985:33" pos:end="1985:70"><call pos:start="1985:33" pos:end="1985:70"><name pos:start="1985:33" pos:end="1985:42">lock_iovec</name><argument_list pos:start="1985:43" pos:end="1985:70">(<argument pos:start="1985:44" pos:end="1985:54"><expr pos:start="1985:44" pos:end="1985:54"><name pos:start="1985:44" pos:end="1985:54">VERIFY_READ</name></expr></argument>, <argument pos:start="1985:57" pos:end="1985:60"><expr pos:start="1985:57" pos:end="1985:60"><name pos:start="1985:57" pos:end="1985:60">arg2</name></expr></argument>, <argument pos:start="1985:63" pos:end="1985:66"><expr pos:start="1985:63" pos:end="1985:66"><name pos:start="1985:63" pos:end="1985:66">arg3</name></expr></argument>, <argument pos:start="1985:69" pos:end="1985:69"><expr pos:start="1985:69" pos:end="1985:69"><literal type="number" pos:start="1985:69" pos:end="1985:69">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="1986:13" pos:end="3541:14"><if pos:start="1986:13" pos:end="1989:13">if <condition pos:start="1986:16" pos:end="1986:28">(<expr pos:start="1986:17" pos:end="1986:27"><name pos:start="1986:17" pos:end="1986:19">vec</name> <operator pos:start="1986:21" pos:end="1986:22">!=</operator> <name pos:start="1986:24" pos:end="1986:27">NULL</name></expr>)</condition> <block pos:start="1986:30" pos:end="1989:13">{<block_content pos:start="1987:17" pos:end="1988:49">
                <expr_stmt pos:start="1987:17" pos:end="1987:62"><expr pos:start="1987:17" pos:end="1987:61"><name pos:start="1987:17" pos:end="1987:19">ret</name> <operator pos:start="1987:21" pos:end="1987:21">=</operator> <call pos:start="1987:23" pos:end="1987:61"><name pos:start="1987:23" pos:end="1987:31">get_errno</name><argument_list pos:start="1987:32" pos:end="1987:61">(<argument pos:start="1987:33" pos:end="1987:60"><expr pos:start="1987:33" pos:end="1987:60"><call pos:start="1987:33" pos:end="1987:60"><name pos:start="1987:33" pos:end="1987:43">safe_writev</name><argument_list pos:start="1987:44" pos:end="1987:60">(<argument pos:start="1987:45" pos:end="1987:48"><expr pos:start="1987:45" pos:end="1987:48"><name pos:start="1987:45" pos:end="1987:48">arg1</name></expr></argument>, <argument pos:start="1987:51" pos:end="1987:53"><expr pos:start="1987:51" pos:end="1987:53"><name pos:start="1987:51" pos:end="1987:53">vec</name></expr></argument>, <argument pos:start="1987:56" pos:end="1987:59"><expr pos:start="1987:56" pos:end="1987:59"><name pos:start="1987:56" pos:end="1987:59">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1988:17" pos:end="1988:49"><expr pos:start="1988:17" pos:end="1988:48"><call pos:start="1988:17" pos:end="1988:48"><name pos:start="1988:17" pos:end="1988:28">unlock_iovec</name><argument_list pos:start="1988:29" pos:end="1988:48">(<argument pos:start="1988:30" pos:end="1988:32"><expr pos:start="1988:30" pos:end="1988:32"><name pos:start="1988:30" pos:end="1988:32">vec</name></expr></argument>, <argument pos:start="1988:35" pos:end="1988:38"><expr pos:start="1988:35" pos:end="1988:38"><name pos:start="1988:35" pos:end="1988:38">arg2</name></expr></argument>, <argument pos:start="1988:41" pos:end="1988:44"><expr pos:start="1988:41" pos:end="1988:44"><name pos:start="1988:41" pos:end="1988:44">arg3</name></expr></argument>, <argument pos:start="1988:47" pos:end="1988:47"><expr pos:start="1988:47" pos:end="1988:47"><literal type="number" pos:start="1988:47" pos:end="1988:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1989:15" pos:end="3541:14">else <block pos:start="1989:20" pos:end="3541:14">{<block_content pos:start="1990:17" pos:end="3541:14">
                <expr_stmt pos:start="1990:17" pos:end="1990:51"><expr pos:start="1990:17" pos:end="1990:50"><name pos:start="1990:17" pos:end="1990:19">ret</name> <operator pos:start="1990:21" pos:end="1990:21">=</operator> <operator pos:start="1990:23" pos:end="1990:23">-</operator><call pos:start="1990:24" pos:end="1990:50"><name pos:start="1990:24" pos:end="1990:43">host_to_target_errno</name><argument_list pos:start="1990:44" pos:end="1990:50">(<argument pos:start="1990:45" pos:end="1990:49"><expr pos:start="1990:45" pos:end="1990:49"><name pos:start="1990:45" pos:end="1990:49">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1991:5" pos:end="1991:26">case <expr pos:start="1991:10" pos:end="1991:25"><name pos:start="1991:10" pos:end="1991:25">TARGET_NR_getsid</name></expr>:</case>
        <expr_stmt pos:start="1992:9" pos:end="1994:0"><expr pos:start="1992:9" pos:end="1992:37"><name pos:start="1992:9" pos:end="1992:11">ret</name> <operator pos:start="1992:13" pos:end="1992:13">=</operator> <call pos:start="1992:15" pos:end="1992:37"><name pos:start="1992:15" pos:end="1992:23">get_errno</name><argument_list pos:start="1992:24" pos:end="1992:37">(<argument pos:start="1992:25" pos:end="1992:36"><expr pos:start="1992:25" pos:end="1992:36"><call pos:start="1992:25" pos:end="1992:36"><name pos:start="1992:25" pos:end="1992:30">getsid</name><argument_list pos:start="1992:31" pos:end="1992:36">(<argument pos:start="1992:32" pos:end="1992:35"><expr pos:start="1992:32" pos:end="1992:35"><name pos:start="1992:32" pos:end="1992:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="1993:1" pos:end="1993:32">#<cpp:directive pos:start="1993:2" pos:end="1993:3">if</cpp:directive> <expr pos:start="1993:5" pos:end="1993:32"><call pos:start="1993:5" pos:end="1993:32"><name pos:start="1993:5" pos:end="1993:11">defined</name><argument_list pos:start="1993:12" pos:end="1993:32">(<argument pos:start="1993:13" pos:end="1993:31"><expr pos:start="1993:13" pos:end="1993:31"><name pos:start="1993:13" pos:end="1993:31">TARGET_NR_fdatasync</name></expr></argument>)</argument_list></call></expr></cpp:if> <comment type="block" pos:start="1993:34" pos:end="1993:68">/* Not on alpha (osf_datasync ?) */</comment>
    <case pos:start="1994:5" pos:end="1994:29">case <expr pos:start="1994:10" pos:end="1994:28"><name pos:start="1994:10" pos:end="1994:28">TARGET_NR_fdatasync</name></expr>:</case>
        <expr_stmt pos:start="1995:9" pos:end="1998:0"><expr pos:start="1995:9" pos:end="1995:40"><name pos:start="1995:9" pos:end="1995:11">ret</name> <operator pos:start="1995:13" pos:end="1995:13">=</operator> <call pos:start="1995:15" pos:end="1995:40"><name pos:start="1995:15" pos:end="1995:23">get_errno</name><argument_list pos:start="1995:24" pos:end="1995:40">(<argument pos:start="1995:25" pos:end="1995:39"><expr pos:start="1995:25" pos:end="1995:39"><call pos:start="1995:25" pos:end="1995:39"><name pos:start="1995:25" pos:end="1995:33">fdatasync</name><argument_list pos:start="1995:34" pos:end="1995:39">(<argument pos:start="1995:35" pos:end="1995:38"><expr pos:start="1995:35" pos:end="1995:38"><name pos:start="1995:35" pos:end="1995:38">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1996:1" pos:end="1996:6">#<cpp:directive pos:start="1996:2" pos:end="1996:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="1997:1" pos:end="1997:24">#<cpp:directive pos:start="1997:2" pos:end="1997:6">ifdef</cpp:directive> <name pos:start="1997:8" pos:end="1997:24">TARGET_NR__sysctl</name></cpp:ifdef>
    <case pos:start="1998:5" pos:end="1998:27">case <expr pos:start="1998:10" pos:end="1998:26"><name pos:start="1998:10" pos:end="1998:26">TARGET_NR__sysctl</name></expr>:</case>
        <comment type="block" pos:start="1999:9" pos:end="2000:27">/* We don't implement this, but ENOTDIR is always a safe
           return value. */</comment>
        <expr_stmt pos:start="2001:9" pos:end="2003:0"><expr pos:start="2001:9" pos:end="2001:29"><name pos:start="2001:9" pos:end="2001:11">ret</name> <operator pos:start="2001:13" pos:end="2001:13">=</operator> <operator pos:start="2001:15" pos:end="2001:15">-</operator><name pos:start="2001:16" pos:end="2001:29">TARGET_ENOTDIR</name></expr>;</expr_stmt>
<cpp:endif pos:start="2002:1" pos:end="2002:6">#<cpp:directive pos:start="2002:2" pos:end="2002:6">endif</cpp:directive></cpp:endif>
    <case pos:start="2003:5" pos:end="2003:37">case <expr pos:start="2003:10" pos:end="2003:36"><name pos:start="2003:10" pos:end="2003:36">TARGET_NR_sched_getaffinity</name></expr>:</case>
        <block pos:start="2004:9" pos:end="3541:14">{<block_content pos:start="2005:13" pos:end="3541:14">
            <decl_stmt pos:start="2005:13" pos:end="2005:35"><decl pos:start="2005:13" pos:end="2005:34"><type pos:start="2005:13" pos:end="2005:24"><name pos:start="2005:13" pos:end="2005:20">unsigned</name> <name pos:start="2005:22" pos:end="2005:24">int</name></type> <name pos:start="2005:26" pos:end="2005:34">mask_size</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2006:13" pos:end="2006:32"><decl pos:start="2006:13" pos:end="2006:31"><type pos:start="2006:13" pos:end="2006:27"><name pos:start="2006:13" pos:end="2006:20">unsigned</name> <name pos:start="2006:22" pos:end="2006:25">long</name> <modifier pos:start="2006:27" pos:end="2006:27">*</modifier></type><name pos:start="2006:28" pos:end="2006:31">mask</name></decl>;</decl_stmt>
            <comment type="block" pos:start="2007:13" pos:end="2010:15">/*
             * sched_getaffinity needs multiples of ulong, so need to take
             * care of mismatches between target ulong and host ulong sizes.
             */</comment>
            <if_stmt pos:start="2011:13" pos:end="3541:14"><if pos:start="2011:13" pos:end="3541:14">if <condition pos:start="2011:16" pos:end="2011:47">(<expr pos:start="2011:17" pos:end="2011:46"><name pos:start="2011:17" pos:end="2011:20">arg2</name> <operator pos:start="2011:22" pos:end="2011:22">&amp;</operator> <operator pos:start="2011:24" pos:end="2011:24">(</operator><sizeof pos:start="2011:25" pos:end="2011:41">sizeof<argument_list pos:start="2011:31" pos:end="2011:41">(<argument pos:start="2011:32" pos:end="2011:40"><expr pos:start="2011:32" pos:end="2011:40"><name pos:start="2011:32" pos:end="2011:40">abi_ulong</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2011:43" pos:end="2011:43">-</operator> <literal type="number" pos:start="2011:45" pos:end="2011:45">1</literal><operator pos:start="2011:46" pos:end="2011:46">)</operator></expr>)</condition> <block pos:start="2011:49" pos:end="3541:14">{<block_content pos:start="2012:13" pos:end="3541:14">
            <expr_stmt pos:start="2012:13" pos:end="2012:76"><expr pos:start="2012:13" pos:end="2012:75"><name pos:start="2012:13" pos:end="2012:21">mask_size</name> <operator pos:start="2012:23" pos:end="2012:23">=</operator> <operator pos:start="2012:25" pos:end="2012:25">(</operator><name pos:start="2012:26" pos:end="2012:29">arg2</name> <operator pos:start="2012:31" pos:end="2012:31">+</operator> <operator pos:start="2012:33" pos:end="2012:33">(</operator><sizeof pos:start="2012:34" pos:end="2012:46">sizeof<argument_list pos:start="2012:40" pos:end="2012:46">(<argument pos:start="2012:41" pos:end="2012:45"><expr pos:start="2012:41" pos:end="2012:45"><operator pos:start="2012:41" pos:end="2012:41">*</operator><name pos:start="2012:42" pos:end="2012:45">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2012:48" pos:end="2012:48">-</operator> <literal type="number" pos:start="2012:50" pos:end="2012:50">1</literal><operator pos:start="2012:51" pos:end="2012:51">)</operator><operator pos:start="2012:52" pos:end="2012:52">)</operator> <operator pos:start="2012:54" pos:end="2012:54">&amp;</operator> <operator pos:start="2012:56" pos:end="2012:56">~</operator><operator pos:start="2012:57" pos:end="2012:57">(</operator><sizeof pos:start="2012:58" pos:end="2012:70">sizeof<argument_list pos:start="2012:64" pos:end="2012:70">(<argument pos:start="2012:65" pos:end="2012:69"><expr pos:start="2012:65" pos:end="2012:69"><operator pos:start="2012:65" pos:end="2012:65">*</operator><name pos:start="2012:66" pos:end="2012:69">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2012:72" pos:end="2012:72">-</operator> <literal type="number" pos:start="2012:74" pos:end="2012:74">1</literal><operator pos:start="2012:75" pos:end="2012:75">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="2013:13" pos:end="2013:37"><expr pos:start="2013:13" pos:end="2013:36"><name pos:start="2013:13" pos:end="2013:16">mask</name> <operator pos:start="2013:18" pos:end="2013:18">=</operator> <call pos:start="2013:20" pos:end="2013:36"><name pos:start="2013:20" pos:end="2013:25">alloca</name><argument_list pos:start="2013:26" pos:end="2013:36">(<argument pos:start="2013:27" pos:end="2013:35"><expr pos:start="2013:27" pos:end="2013:35"><name pos:start="2013:27" pos:end="2013:35">mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2014:13" pos:end="2014:74"><expr pos:start="2014:13" pos:end="2014:73"><name pos:start="2014:13" pos:end="2014:15">ret</name> <operator pos:start="2014:17" pos:end="2014:17">=</operator> <call pos:start="2014:19" pos:end="2014:73"><name pos:start="2014:19" pos:end="2014:27">get_errno</name><argument_list pos:start="2014:28" pos:end="2014:73">(<argument pos:start="2014:29" pos:end="2014:72"><expr pos:start="2014:29" pos:end="2014:72"><call pos:start="2014:29" pos:end="2014:72"><name pos:start="2014:29" pos:end="2014:49">sys_sched_getaffinity</name><argument_list pos:start="2014:50" pos:end="2014:72">(<argument pos:start="2014:51" pos:end="2014:54"><expr pos:start="2014:51" pos:end="2014:54"><name pos:start="2014:51" pos:end="2014:54">arg1</name></expr></argument>, <argument pos:start="2014:57" pos:end="2014:65"><expr pos:start="2014:57" pos:end="2014:65"><name pos:start="2014:57" pos:end="2014:65">mask_size</name></expr></argument>, <argument pos:start="2014:68" pos:end="2014:71"><expr pos:start="2014:68" pos:end="2014:71"><name pos:start="2014:68" pos:end="2014:71">mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2015:13" pos:end="3541:14"><if pos:start="2015:13" pos:end="3541:14">if <condition pos:start="2015:16" pos:end="2015:31">(<expr pos:start="2015:17" pos:end="2015:30"><operator pos:start="2015:17" pos:end="2015:17">!</operator><call pos:start="2015:18" pos:end="2015:30"><name pos:start="2015:18" pos:end="2015:25">is_error</name><argument_list pos:start="2015:26" pos:end="2015:30">(<argument pos:start="2015:27" pos:end="2015:29"><expr pos:start="2015:27" pos:end="2015:29"><name pos:start="2015:27" pos:end="2015:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2015:33" pos:end="3541:14">{<block_content pos:start="2016:17" pos:end="3541:14">
                <if_stmt pos:start="2016:17" pos:end="3541:14"><if pos:start="2016:17" pos:end="3541:14">if <condition pos:start="2016:20" pos:end="2016:31">(<expr pos:start="2016:21" pos:end="2016:30"><name pos:start="2016:21" pos:end="2016:23">ret</name> <operator pos:start="2016:25" pos:end="2016:25">&gt;</operator> <name pos:start="2016:27" pos:end="2016:30">arg2</name></expr>)</condition> <block pos:start="2016:33" pos:end="3541:14">{<block_content pos:start="2024:21" pos:end="3541:14">
                    <comment type="block" pos:start="2017:21" pos:end="2023:23">/* More data returned than the caller's buffer will fit.
                     * This only happens if sizeof(abi_long) &lt; sizeof(long)
                     * and the caller passed us a buffer holding an odd number
                     * of abi_longs. If the host kernel is actually using the
                     * extra 4 bytes then fail EINVAL; otherwise we can just
                     * ignore them and only copy the interesting part.
                     */</comment>
                    <decl_stmt pos:start="2024:21" pos:end="2024:64"><decl pos:start="2024:21" pos:end="2024:63"><type pos:start="2024:21" pos:end="2024:23"><name pos:start="2024:21" pos:end="2024:23">int</name></type> <name pos:start="2024:25" pos:end="2024:31">numcpus</name> <init pos:start="2024:33" pos:end="2024:63">= <expr pos:start="2024:35" pos:end="2024:63"><call pos:start="2024:35" pos:end="2024:63"><name pos:start="2024:35" pos:end="2024:41">sysconf</name><argument_list pos:start="2024:42" pos:end="2024:63">(<argument pos:start="2024:43" pos:end="2024:62"><expr pos:start="2024:43" pos:end="2024:62"><name pos:start="2024:43" pos:end="2024:62">_SC_NPROCESSORS_CONF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt pos:start="2025:21" pos:end="3541:14"><if pos:start="2025:21" pos:end="3541:14">if <condition pos:start="2025:24" pos:end="2025:43">(<expr pos:start="2025:25" pos:end="2025:42"><name pos:start="2025:25" pos:end="2025:31">numcpus</name> <operator pos:start="2025:33" pos:end="2025:33">&gt;</operator> <name pos:start="2025:35" pos:end="2025:38">arg2</name> <operator pos:start="2025:40" pos:end="2025:40">*</operator> <literal type="number" pos:start="2025:42" pos:end="2025:42">8</literal></expr>)</condition> <block pos:start="2025:45" pos:end="3541:14">{<block_content pos:start="2026:21" pos:end="3541:14">
                    <expr_stmt pos:start="2026:21" pos:end="2026:31"><expr pos:start="2026:21" pos:end="2026:30"><name pos:start="2026:21" pos:end="2026:23">ret</name> <operator pos:start="2026:25" pos:end="2026:25">=</operator> <name pos:start="2026:27" pos:end="2026:30">arg2</name></expr>;</expr_stmt>
                <if_stmt pos:start="2027:17" pos:end="3541:14"><if pos:start="2027:17" pos:end="3541:14">if <condition pos:start="2027:20" pos:end="2027:50">(<expr pos:start="2027:21" pos:end="2027:49"><call pos:start="2027:21" pos:end="2027:49"><name pos:start="2027:21" pos:end="2027:32">copy_to_user</name><argument_list pos:start="2027:33" pos:end="2027:49">(<argument pos:start="2027:34" pos:end="2027:37"><expr pos:start="2027:34" pos:end="2027:37"><name pos:start="2027:34" pos:end="2027:37">arg3</name></expr></argument>, <argument pos:start="2027:40" pos:end="2027:43"><expr pos:start="2027:40" pos:end="2027:43"><name pos:start="2027:40" pos:end="2027:43">mask</name></expr></argument>, <argument pos:start="2027:46" pos:end="2027:48"><expr pos:start="2027:46" pos:end="2027:48"><name pos:start="2027:46" pos:end="2027:48">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2027:52" pos:end="3541:14">{<block_content pos:start="2028:21" pos:end="3541:14">
                    <goto pos:start="2028:21" pos:end="2028:32">goto <name pos:start="2028:26" pos:end="2028:31">efault</name>;</goto>
    <case pos:start="2029:5" pos:end="2029:37">case <expr pos:start="2029:10" pos:end="2029:36"><name pos:start="2029:10" pos:end="2029:36">TARGET_NR_sched_setaffinity</name></expr>:</case>
        <block pos:start="2030:9" pos:end="3541:14">{<block_content pos:start="2031:13" pos:end="3541:14">
            <decl_stmt pos:start="2031:13" pos:end="2031:35"><decl pos:start="2031:13" pos:end="2031:34"><type pos:start="2031:13" pos:end="2031:24"><name pos:start="2031:13" pos:end="2031:20">unsigned</name> <name pos:start="2031:22" pos:end="2031:24">int</name></type> <name pos:start="2031:26" pos:end="2031:34">mask_size</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2032:13" pos:end="2032:32"><decl pos:start="2032:13" pos:end="2032:31"><type pos:start="2032:13" pos:end="2032:27"><name pos:start="2032:13" pos:end="2032:20">unsigned</name> <name pos:start="2032:22" pos:end="2032:25">long</name> <modifier pos:start="2032:27" pos:end="2032:27">*</modifier></type><name pos:start="2032:28" pos:end="2032:31">mask</name></decl>;</decl_stmt>
            <comment type="block" pos:start="2033:13" pos:end="2036:15">/*
             * sched_setaffinity needs multiples of ulong, so need to take
             * care of mismatches between target ulong and host ulong sizes.
             */</comment>
            <if_stmt pos:start="2037:13" pos:end="3541:14"><if pos:start="2037:13" pos:end="3541:14">if <condition pos:start="2037:16" pos:end="2037:47">(<expr pos:start="2037:17" pos:end="2037:46"><name pos:start="2037:17" pos:end="2037:20">arg2</name> <operator pos:start="2037:22" pos:end="2037:22">&amp;</operator> <operator pos:start="2037:24" pos:end="2037:24">(</operator><sizeof pos:start="2037:25" pos:end="2037:41">sizeof<argument_list pos:start="2037:31" pos:end="2037:41">(<argument pos:start="2037:32" pos:end="2037:40"><expr pos:start="2037:32" pos:end="2037:40"><name pos:start="2037:32" pos:end="2037:40">abi_ulong</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2037:43" pos:end="2037:43">-</operator> <literal type="number" pos:start="2037:45" pos:end="2037:45">1</literal><operator pos:start="2037:46" pos:end="2037:46">)</operator></expr>)</condition> <block pos:start="2037:49" pos:end="3541:14">{<block_content pos:start="2038:13" pos:end="3541:14">
            <expr_stmt pos:start="2038:13" pos:end="2038:76"><expr pos:start="2038:13" pos:end="2038:75"><name pos:start="2038:13" pos:end="2038:21">mask_size</name> <operator pos:start="2038:23" pos:end="2038:23">=</operator> <operator pos:start="2038:25" pos:end="2038:25">(</operator><name pos:start="2038:26" pos:end="2038:29">arg2</name> <operator pos:start="2038:31" pos:end="2038:31">+</operator> <operator pos:start="2038:33" pos:end="2038:33">(</operator><sizeof pos:start="2038:34" pos:end="2038:46">sizeof<argument_list pos:start="2038:40" pos:end="2038:46">(<argument pos:start="2038:41" pos:end="2038:45"><expr pos:start="2038:41" pos:end="2038:45"><operator pos:start="2038:41" pos:end="2038:41">*</operator><name pos:start="2038:42" pos:end="2038:45">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2038:48" pos:end="2038:48">-</operator> <literal type="number" pos:start="2038:50" pos:end="2038:50">1</literal><operator pos:start="2038:51" pos:end="2038:51">)</operator><operator pos:start="2038:52" pos:end="2038:52">)</operator> <operator pos:start="2038:54" pos:end="2038:54">&amp;</operator> <operator pos:start="2038:56" pos:end="2038:56">~</operator><operator pos:start="2038:57" pos:end="2038:57">(</operator><sizeof pos:start="2038:58" pos:end="2038:70">sizeof<argument_list pos:start="2038:64" pos:end="2038:70">(<argument pos:start="2038:65" pos:end="2038:69"><expr pos:start="2038:65" pos:end="2038:69"><operator pos:start="2038:65" pos:end="2038:65">*</operator><name pos:start="2038:66" pos:end="2038:69">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2038:72" pos:end="2038:72">-</operator> <literal type="number" pos:start="2038:74" pos:end="2038:74">1</literal><operator pos:start="2038:75" pos:end="2038:75">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="2039:13" pos:end="2039:37"><expr pos:start="2039:13" pos:end="2039:36"><name pos:start="2039:13" pos:end="2039:16">mask</name> <operator pos:start="2039:18" pos:end="2039:18">=</operator> <call pos:start="2039:20" pos:end="2039:36"><name pos:start="2039:20" pos:end="2039:25">alloca</name><argument_list pos:start="2039:26" pos:end="2039:36">(<argument pos:start="2039:27" pos:end="2039:35"><expr pos:start="2039:27" pos:end="2039:35"><name pos:start="2039:27" pos:end="2039:35">mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2040:13" pos:end="3541:14"><if pos:start="2040:13" pos:end="3541:14">if <condition pos:start="2040:16" pos:end="2040:59">(<expr pos:start="2040:17" pos:end="2040:58"><operator pos:start="2040:17" pos:end="2040:17">!</operator><call pos:start="2040:18" pos:end="2040:58"><name pos:start="2040:18" pos:end="2040:33">lock_user_struct</name><argument_list pos:start="2040:34" pos:end="2040:58">(<argument pos:start="2040:35" pos:end="2040:45"><expr pos:start="2040:35" pos:end="2040:45"><name pos:start="2040:35" pos:end="2040:45">VERIFY_READ</name></expr></argument>, <argument pos:start="2040:48" pos:end="2040:48"><expr pos:start="2040:48" pos:end="2040:48"><name pos:start="2040:48" pos:end="2040:48">p</name></expr></argument>, <argument pos:start="2040:51" pos:end="2040:54"><expr pos:start="2040:51" pos:end="2040:54"><name pos:start="2040:51" pos:end="2040:54">arg3</name></expr></argument>, <argument pos:start="2040:57" pos:end="2040:57"><expr pos:start="2040:57" pos:end="2040:57"><literal type="number" pos:start="2040:57" pos:end="2040:57">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2040:61" pos:end="3541:14">{<block_content pos:start="2041:17" pos:end="3541:14">
                <goto pos:start="2041:17" pos:end="2041:28">goto <name pos:start="2041:22" pos:end="2041:27">efault</name>;</goto>
            <expr_stmt pos:start="2042:13" pos:end="2042:34"><expr pos:start="2042:13" pos:end="2042:33"><call pos:start="2042:13" pos:end="2042:33"><name pos:start="2042:13" pos:end="2042:18">memcpy</name><argument_list pos:start="2042:19" pos:end="2042:33">(<argument pos:start="2042:20" pos:end="2042:23"><expr pos:start="2042:20" pos:end="2042:23"><name pos:start="2042:20" pos:end="2042:23">mask</name></expr></argument>, <argument pos:start="2042:26" pos:end="2042:26"><expr pos:start="2042:26" pos:end="2042:26"><name pos:start="2042:26" pos:end="2042:26">p</name></expr></argument>, <argument pos:start="2042:29" pos:end="2042:32"><expr pos:start="2042:29" pos:end="2042:32"><name pos:start="2042:29" pos:end="2042:32">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2043:13" pos:end="2043:43"><expr pos:start="2043:13" pos:end="2043:42"><call pos:start="2043:13" pos:end="2043:42"><name pos:start="2043:13" pos:end="2043:30">unlock_user_struct</name><argument_list pos:start="2043:31" pos:end="2043:42">(<argument pos:start="2043:32" pos:end="2043:32"><expr pos:start="2043:32" pos:end="2043:32"><name pos:start="2043:32" pos:end="2043:32">p</name></expr></argument>, <argument pos:start="2043:35" pos:end="2043:38"><expr pos:start="2043:35" pos:end="2043:38"><name pos:start="2043:35" pos:end="2043:38">arg2</name></expr></argument>, <argument pos:start="2043:41" pos:end="2043:41"><expr pos:start="2043:41" pos:end="2043:41"><literal type="number" pos:start="2043:41" pos:end="2043:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2044:13" pos:end="2044:74"><expr pos:start="2044:13" pos:end="2044:73"><name pos:start="2044:13" pos:end="2044:15">ret</name> <operator pos:start="2044:17" pos:end="2044:17">=</operator> <call pos:start="2044:19" pos:end="2044:73"><name pos:start="2044:19" pos:end="2044:27">get_errno</name><argument_list pos:start="2044:28" pos:end="2044:73">(<argument pos:start="2044:29" pos:end="2044:72"><expr pos:start="2044:29" pos:end="2044:72"><call pos:start="2044:29" pos:end="2044:72"><name pos:start="2044:29" pos:end="2044:49">sys_sched_setaffinity</name><argument_list pos:start="2044:50" pos:end="2044:72">(<argument pos:start="2044:51" pos:end="2044:54"><expr pos:start="2044:51" pos:end="2044:54"><name pos:start="2044:51" pos:end="2044:54">arg1</name></expr></argument>, <argument pos:start="2044:57" pos:end="2044:65"><expr pos:start="2044:57" pos:end="2044:65"><name pos:start="2044:57" pos:end="2044:65">mask_size</name></expr></argument>, <argument pos:start="2044:68" pos:end="2044:71"><expr pos:start="2044:68" pos:end="2044:71"><name pos:start="2044:68" pos:end="2044:71">mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2045:5" pos:end="2045:34">case <expr pos:start="2045:10" pos:end="2045:33"><name pos:start="2045:10" pos:end="2045:33">TARGET_NR_sched_setparam</name></expr>:</case>
        <block pos:start="2046:9" pos:end="3541:14">{<block_content pos:start="2047:13" pos:end="3541:14">
            <decl_stmt pos:start="2047:13" pos:end="2047:44"><decl pos:start="2047:13" pos:end="2047:43"><type pos:start="2047:13" pos:end="2047:32"><name pos:start="2047:13" pos:end="2047:30"><name pos:start="2047:13" pos:end="2047:18">struct</name> <name pos:start="2047:20" pos:end="2047:30">sched_param</name></name> <modifier pos:start="2047:32" pos:end="2047:32">*</modifier></type><name pos:start="2047:33" pos:end="2047:43">target_schp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2048:13" pos:end="2048:36"><decl pos:start="2048:13" pos:end="2048:35"><type pos:start="2048:13" pos:end="2048:30"><name pos:start="2048:13" pos:end="2048:30"><name pos:start="2048:13" pos:end="2048:18">struct</name> <name pos:start="2048:20" pos:end="2048:30">sched_param</name></name></type> <name pos:start="2048:32" pos:end="2048:35">schp</name></decl>;</decl_stmt>
            <if_stmt pos:start="2049:13" pos:end="3541:14"><if pos:start="2049:13" pos:end="3541:14">if <condition pos:start="2049:16" pos:end="2049:26">(<expr pos:start="2049:17" pos:end="2049:25"><name pos:start="2049:17" pos:end="2049:20">arg2</name> <operator pos:start="2049:22" pos:end="2049:23">==</operator> <literal type="number" pos:start="2049:25" pos:end="2049:25">0</literal></expr>)</condition> <block pos:start="2049:28" pos:end="3541:14">{<block_content pos:start="2050:17" pos:end="3541:14">
                <return pos:start="2050:17" pos:end="2050:38">return <expr pos:start="2050:24" pos:end="2050:37"><operator pos:start="2050:24" pos:end="2050:24">-</operator><name pos:start="2050:25" pos:end="2050:37">TARGET_EINVAL</name></expr>;</return>
            <if_stmt pos:start="2051:13" pos:end="2052:28"><if pos:start="2051:13" pos:end="2052:28">if <condition pos:start="2051:16" pos:end="2051:69">(<expr pos:start="2051:17" pos:end="2051:68"><operator pos:start="2051:17" pos:end="2051:17">!</operator><call pos:start="2051:18" pos:end="2051:68"><name pos:start="2051:18" pos:end="2051:33">lock_user_struct</name><argument_list pos:start="2051:34" pos:end="2051:68">(<argument pos:start="2051:35" pos:end="2051:45"><expr pos:start="2051:35" pos:end="2051:45"><name pos:start="2051:35" pos:end="2051:45">VERIFY_READ</name></expr></argument>, <argument pos:start="2051:48" pos:end="2051:58"><expr pos:start="2051:48" pos:end="2051:58"><name pos:start="2051:48" pos:end="2051:58">target_schp</name></expr></argument>, <argument pos:start="2051:61" pos:end="2051:64"><expr pos:start="2051:61" pos:end="2051:64"><name pos:start="2051:61" pos:end="2051:64">arg2</name></expr></argument>, <argument pos:start="2051:67" pos:end="2051:67"><expr pos:start="2051:67" pos:end="2051:67"><literal type="number" pos:start="2051:67" pos:end="2051:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2052:17" pos:end="2052:28"><block_content pos:start="2052:17" pos:end="2052:28">
                <goto pos:start="2052:17" pos:end="2052:28">goto <name pos:start="2052:22" pos:end="2052:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2053:13" pos:end="2053:71"><expr pos:start="2053:13" pos:end="2053:70"><name pos:start="2053:13" pos:end="2053:31"><name pos:start="2053:13" pos:end="2053:16">schp</name><operator pos:start="2053:17" pos:end="2053:17">.</operator><name pos:start="2053:18" pos:end="2053:31">sched_priority</name></name> <operator pos:start="2053:33" pos:end="2053:33">=</operator> <call pos:start="2053:35" pos:end="2053:70"><name pos:start="2053:35" pos:end="2053:41">tswap32</name><argument_list pos:start="2053:42" pos:end="2053:70">(<argument pos:start="2053:43" pos:end="2053:69"><expr pos:start="2053:43" pos:end="2053:69"><name pos:start="2053:43" pos:end="2053:69"><name pos:start="2053:43" pos:end="2053:53">target_schp</name><operator pos:start="2053:54" pos:end="2053:55">-&gt;</operator><name pos:start="2053:56" pos:end="2053:69">sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2054:13" pos:end="2054:53"><expr pos:start="2054:13" pos:end="2054:52"><call pos:start="2054:13" pos:end="2054:52"><name pos:start="2054:13" pos:end="2054:30">unlock_user_struct</name><argument_list pos:start="2054:31" pos:end="2054:52">(<argument pos:start="2054:32" pos:end="2054:42"><expr pos:start="2054:32" pos:end="2054:42"><name pos:start="2054:32" pos:end="2054:42">target_schp</name></expr></argument>, <argument pos:start="2054:45" pos:end="2054:48"><expr pos:start="2054:45" pos:end="2054:48"><name pos:start="2054:45" pos:end="2054:48">arg2</name></expr></argument>, <argument pos:start="2054:51" pos:end="2054:51"><expr pos:start="2054:51" pos:end="2054:51"><literal type="number" pos:start="2054:51" pos:end="2054:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2055:13" pos:end="2055:57"><expr pos:start="2055:13" pos:end="2055:56"><name pos:start="2055:13" pos:end="2055:15">ret</name> <operator pos:start="2055:17" pos:end="2055:17">=</operator> <call pos:start="2055:19" pos:end="2055:56"><name pos:start="2055:19" pos:end="2055:27">get_errno</name><argument_list pos:start="2055:28" pos:end="2055:56">(<argument pos:start="2055:29" pos:end="2055:55"><expr pos:start="2055:29" pos:end="2055:55"><call pos:start="2055:29" pos:end="2055:55"><name pos:start="2055:29" pos:end="2055:42">sched_setparam</name><argument_list pos:start="2055:43" pos:end="2055:55">(<argument pos:start="2055:44" pos:end="2055:47"><expr pos:start="2055:44" pos:end="2055:47"><name pos:start="2055:44" pos:end="2055:47">arg1</name></expr></argument>, <argument pos:start="2055:50" pos:end="2055:54"><expr pos:start="2055:50" pos:end="2055:54"><operator pos:start="2055:50" pos:end="2055:50">&amp;</operator><name pos:start="2055:51" pos:end="2055:54">schp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2056:5" pos:end="2056:34">case <expr pos:start="2056:10" pos:end="2056:33"><name pos:start="2056:10" pos:end="2056:33">TARGET_NR_sched_getparam</name></expr>:</case>
        <block pos:start="2057:9" pos:end="3541:14">{<block_content pos:start="2058:13" pos:end="3541:14">
            <decl_stmt pos:start="2058:13" pos:end="2058:44"><decl pos:start="2058:13" pos:end="2058:43"><type pos:start="2058:13" pos:end="2058:32"><name pos:start="2058:13" pos:end="2058:30"><name pos:start="2058:13" pos:end="2058:18">struct</name> <name pos:start="2058:20" pos:end="2058:30">sched_param</name></name> <modifier pos:start="2058:32" pos:end="2058:32">*</modifier></type><name pos:start="2058:33" pos:end="2058:43">target_schp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2059:13" pos:end="2059:36"><decl pos:start="2059:13" pos:end="2059:35"><type pos:start="2059:13" pos:end="2059:30"><name pos:start="2059:13" pos:end="2059:30"><name pos:start="2059:13" pos:end="2059:18">struct</name> <name pos:start="2059:20" pos:end="2059:30">sched_param</name></name></type> <name pos:start="2059:32" pos:end="2059:35">schp</name></decl>;</decl_stmt>
            <if_stmt pos:start="2060:13" pos:end="3541:14"><if pos:start="2060:13" pos:end="3541:14">if <condition pos:start="2060:16" pos:end="2060:26">(<expr pos:start="2060:17" pos:end="2060:25"><name pos:start="2060:17" pos:end="2060:20">arg2</name> <operator pos:start="2060:22" pos:end="2060:23">==</operator> <literal type="number" pos:start="2060:25" pos:end="2060:25">0</literal></expr>)</condition> <block pos:start="2060:28" pos:end="3541:14">{<block_content pos:start="2061:17" pos:end="3541:14">
                <return pos:start="2061:17" pos:end="2061:38">return <expr pos:start="2061:24" pos:end="2061:37"><operator pos:start="2061:24" pos:end="2061:24">-</operator><name pos:start="2061:25" pos:end="2061:37">TARGET_EINVAL</name></expr>;</return>
            <expr_stmt pos:start="2062:13" pos:end="2062:57"><expr pos:start="2062:13" pos:end="2062:56"><name pos:start="2062:13" pos:end="2062:15">ret</name> <operator pos:start="2062:17" pos:end="2062:17">=</operator> <call pos:start="2062:19" pos:end="2062:56"><name pos:start="2062:19" pos:end="2062:27">get_errno</name><argument_list pos:start="2062:28" pos:end="2062:56">(<argument pos:start="2062:29" pos:end="2062:55"><expr pos:start="2062:29" pos:end="2062:55"><call pos:start="2062:29" pos:end="2062:55"><name pos:start="2062:29" pos:end="2062:42">sched_getparam</name><argument_list pos:start="2062:43" pos:end="2062:55">(<argument pos:start="2062:44" pos:end="2062:47"><expr pos:start="2062:44" pos:end="2062:47"><name pos:start="2062:44" pos:end="2062:47">arg1</name></expr></argument>, <argument pos:start="2062:50" pos:end="2062:54"><expr pos:start="2062:50" pos:end="2062:54"><operator pos:start="2062:50" pos:end="2062:50">&amp;</operator><name pos:start="2062:51" pos:end="2062:54">schp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2063:13" pos:end="3541:14"><if pos:start="2063:13" pos:end="3541:14">if <condition pos:start="2063:16" pos:end="2063:31">(<expr pos:start="2063:17" pos:end="2063:30"><operator pos:start="2063:17" pos:end="2063:17">!</operator><call pos:start="2063:18" pos:end="2063:30"><name pos:start="2063:18" pos:end="2063:25">is_error</name><argument_list pos:start="2063:26" pos:end="2063:30">(<argument pos:start="2063:27" pos:end="2063:29"><expr pos:start="2063:27" pos:end="2063:29"><name pos:start="2063:27" pos:end="2063:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2063:33" pos:end="3541:14">{<block_content pos:start="2064:17" pos:end="3541:14">
                <if_stmt pos:start="2064:17" pos:end="2065:32"><if pos:start="2064:17" pos:end="2065:32">if <condition pos:start="2064:20" pos:end="2064:74">(<expr pos:start="2064:21" pos:end="2064:73"><operator pos:start="2064:21" pos:end="2064:21">!</operator><call pos:start="2064:22" pos:end="2064:73"><name pos:start="2064:22" pos:end="2064:37">lock_user_struct</name><argument_list pos:start="2064:38" pos:end="2064:73">(<argument pos:start="2064:39" pos:end="2064:50"><expr pos:start="2064:39" pos:end="2064:50"><name pos:start="2064:39" pos:end="2064:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2064:53" pos:end="2064:63"><expr pos:start="2064:53" pos:end="2064:63"><name pos:start="2064:53" pos:end="2064:63">target_schp</name></expr></argument>, <argument pos:start="2064:66" pos:end="2064:69"><expr pos:start="2064:66" pos:end="2064:69"><name pos:start="2064:66" pos:end="2064:69">arg2</name></expr></argument>, <argument pos:start="2064:72" pos:end="2064:72"><expr pos:start="2064:72" pos:end="2064:72"><literal type="number" pos:start="2064:72" pos:end="2064:72">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2065:21" pos:end="2065:32"><block_content pos:start="2065:21" pos:end="2065:32">
                    <goto pos:start="2065:21" pos:end="2065:32">goto <name pos:start="2065:26" pos:end="2065:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="2066:17" pos:end="2066:75"><expr pos:start="2066:17" pos:end="2066:74"><name pos:start="2066:17" pos:end="2066:43"><name pos:start="2066:17" pos:end="2066:27">target_schp</name><operator pos:start="2066:28" pos:end="2066:29">-&gt;</operator><name pos:start="2066:30" pos:end="2066:43">sched_priority</name></name> <operator pos:start="2066:45" pos:end="2066:45">=</operator> <call pos:start="2066:47" pos:end="2066:74"><name pos:start="2066:47" pos:end="2066:53">tswap32</name><argument_list pos:start="2066:54" pos:end="2066:74">(<argument pos:start="2066:55" pos:end="2066:73"><expr pos:start="2066:55" pos:end="2066:73"><name pos:start="2066:55" pos:end="2066:73"><name pos:start="2066:55" pos:end="2066:58">schp</name><operator pos:start="2066:59" pos:end="2066:59">.</operator><name pos:start="2066:60" pos:end="2066:73">sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2067:17" pos:end="2067:57"><expr pos:start="2067:17" pos:end="2067:56"><call pos:start="2067:17" pos:end="2067:56"><name pos:start="2067:17" pos:end="2067:34">unlock_user_struct</name><argument_list pos:start="2067:35" pos:end="2067:56">(<argument pos:start="2067:36" pos:end="2067:46"><expr pos:start="2067:36" pos:end="2067:46"><name pos:start="2067:36" pos:end="2067:46">target_schp</name></expr></argument>, <argument pos:start="2067:49" pos:end="2067:52"><expr pos:start="2067:49" pos:end="2067:52"><name pos:start="2067:49" pos:end="2067:52">arg2</name></expr></argument>, <argument pos:start="2067:55" pos:end="2067:55"><expr pos:start="2067:55" pos:end="2067:55"><literal type="number" pos:start="2067:55" pos:end="2067:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2068:5" pos:end="2068:38">case <expr pos:start="2068:10" pos:end="2068:37"><name pos:start="2068:10" pos:end="2068:37">TARGET_NR_sched_setscheduler</name></expr>:</case>
        <block pos:start="2069:9" pos:end="3541:14">{<block_content pos:start="2070:13" pos:end="3541:14">
            <decl_stmt pos:start="2070:13" pos:end="2070:44"><decl pos:start="2070:13" pos:end="2070:43"><type pos:start="2070:13" pos:end="2070:32"><name pos:start="2070:13" pos:end="2070:30"><name pos:start="2070:13" pos:end="2070:18">struct</name> <name pos:start="2070:20" pos:end="2070:30">sched_param</name></name> <modifier pos:start="2070:32" pos:end="2070:32">*</modifier></type><name pos:start="2070:33" pos:end="2070:43">target_schp</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2071:13" pos:end="2071:36"><decl pos:start="2071:13" pos:end="2071:35"><type pos:start="2071:13" pos:end="2071:30"><name pos:start="2071:13" pos:end="2071:30"><name pos:start="2071:13" pos:end="2071:18">struct</name> <name pos:start="2071:20" pos:end="2071:30">sched_param</name></name></type> <name pos:start="2071:32" pos:end="2071:35">schp</name></decl>;</decl_stmt>
            <if_stmt pos:start="2072:13" pos:end="3541:14"><if pos:start="2072:13" pos:end="3541:14">if <condition pos:start="2072:16" pos:end="2072:26">(<expr pos:start="2072:17" pos:end="2072:25"><name pos:start="2072:17" pos:end="2072:20">arg3</name> <operator pos:start="2072:22" pos:end="2072:23">==</operator> <literal type="number" pos:start="2072:25" pos:end="2072:25">0</literal></expr>)</condition> <block pos:start="2072:28" pos:end="3541:14">{<block_content pos:start="2073:17" pos:end="3541:14">
                <return pos:start="2073:17" pos:end="2073:38">return <expr pos:start="2073:24" pos:end="2073:37"><operator pos:start="2073:24" pos:end="2073:24">-</operator><name pos:start="2073:25" pos:end="2073:37">TARGET_EINVAL</name></expr>;</return>
            <if_stmt pos:start="2074:13" pos:end="2075:28"><if pos:start="2074:13" pos:end="2075:28">if <condition pos:start="2074:16" pos:end="2074:69">(<expr pos:start="2074:17" pos:end="2074:68"><operator pos:start="2074:17" pos:end="2074:17">!</operator><call pos:start="2074:18" pos:end="2074:68"><name pos:start="2074:18" pos:end="2074:33">lock_user_struct</name><argument_list pos:start="2074:34" pos:end="2074:68">(<argument pos:start="2074:35" pos:end="2074:45"><expr pos:start="2074:35" pos:end="2074:45"><name pos:start="2074:35" pos:end="2074:45">VERIFY_READ</name></expr></argument>, <argument pos:start="2074:48" pos:end="2074:58"><expr pos:start="2074:48" pos:end="2074:58"><name pos:start="2074:48" pos:end="2074:58">target_schp</name></expr></argument>, <argument pos:start="2074:61" pos:end="2074:64"><expr pos:start="2074:61" pos:end="2074:64"><name pos:start="2074:61" pos:end="2074:64">arg3</name></expr></argument>, <argument pos:start="2074:67" pos:end="2074:67"><expr pos:start="2074:67" pos:end="2074:67"><literal type="number" pos:start="2074:67" pos:end="2074:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2075:17" pos:end="2075:28"><block_content pos:start="2075:17" pos:end="2075:28">
                <goto pos:start="2075:17" pos:end="2075:28">goto <name pos:start="2075:22" pos:end="2075:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2076:13" pos:end="2076:71"><expr pos:start="2076:13" pos:end="2076:70"><name pos:start="2076:13" pos:end="2076:31"><name pos:start="2076:13" pos:end="2076:16">schp</name><operator pos:start="2076:17" pos:end="2076:17">.</operator><name pos:start="2076:18" pos:end="2076:31">sched_priority</name></name> <operator pos:start="2076:33" pos:end="2076:33">=</operator> <call pos:start="2076:35" pos:end="2076:70"><name pos:start="2076:35" pos:end="2076:41">tswap32</name><argument_list pos:start="2076:42" pos:end="2076:70">(<argument pos:start="2076:43" pos:end="2076:69"><expr pos:start="2076:43" pos:end="2076:69"><name pos:start="2076:43" pos:end="2076:69"><name pos:start="2076:43" pos:end="2076:53">target_schp</name><operator pos:start="2076:54" pos:end="2076:55">-&gt;</operator><name pos:start="2076:56" pos:end="2076:69">sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2077:13" pos:end="2077:53"><expr pos:start="2077:13" pos:end="2077:52"><call pos:start="2077:13" pos:end="2077:52"><name pos:start="2077:13" pos:end="2077:30">unlock_user_struct</name><argument_list pos:start="2077:31" pos:end="2077:52">(<argument pos:start="2077:32" pos:end="2077:42"><expr pos:start="2077:32" pos:end="2077:42"><name pos:start="2077:32" pos:end="2077:42">target_schp</name></expr></argument>, <argument pos:start="2077:45" pos:end="2077:48"><expr pos:start="2077:45" pos:end="2077:48"><name pos:start="2077:45" pos:end="2077:48">arg3</name></expr></argument>, <argument pos:start="2077:51" pos:end="2077:51"><expr pos:start="2077:51" pos:end="2077:51"><literal type="number" pos:start="2077:51" pos:end="2077:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2078:13" pos:end="2078:67"><expr pos:start="2078:13" pos:end="2078:66"><name pos:start="2078:13" pos:end="2078:15">ret</name> <operator pos:start="2078:17" pos:end="2078:17">=</operator> <call pos:start="2078:19" pos:end="2078:66"><name pos:start="2078:19" pos:end="2078:27">get_errno</name><argument_list pos:start="2078:28" pos:end="2078:66">(<argument pos:start="2078:29" pos:end="2078:65"><expr pos:start="2078:29" pos:end="2078:65"><call pos:start="2078:29" pos:end="2078:65"><name pos:start="2078:29" pos:end="2078:46">sched_setscheduler</name><argument_list pos:start="2078:47" pos:end="2078:65">(<argument pos:start="2078:48" pos:end="2078:51"><expr pos:start="2078:48" pos:end="2078:51"><name pos:start="2078:48" pos:end="2078:51">arg1</name></expr></argument>, <argument pos:start="2078:54" pos:end="2078:57"><expr pos:start="2078:54" pos:end="2078:57"><name pos:start="2078:54" pos:end="2078:57">arg2</name></expr></argument>, <argument pos:start="2078:60" pos:end="2078:64"><expr pos:start="2078:60" pos:end="2078:64"><operator pos:start="2078:60" pos:end="2078:60">&amp;</operator><name pos:start="2078:61" pos:end="2078:64">schp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2079:5" pos:end="2079:38">case <expr pos:start="2079:10" pos:end="2079:37"><name pos:start="2079:10" pos:end="2079:37">TARGET_NR_sched_getscheduler</name></expr>:</case>
        <expr_stmt pos:start="2080:9" pos:end="2080:50"><expr pos:start="2080:9" pos:end="2080:49"><name pos:start="2080:9" pos:end="2080:11">ret</name> <operator pos:start="2080:13" pos:end="2080:13">=</operator> <call pos:start="2080:15" pos:end="2080:49"><name pos:start="2080:15" pos:end="2080:23">get_errno</name><argument_list pos:start="2080:24" pos:end="2080:49">(<argument pos:start="2080:25" pos:end="2080:48"><expr pos:start="2080:25" pos:end="2080:48"><call pos:start="2080:25" pos:end="2080:48"><name pos:start="2080:25" pos:end="2080:42">sched_getscheduler</name><argument_list pos:start="2080:43" pos:end="2080:48">(<argument pos:start="2080:44" pos:end="2080:47"><expr pos:start="2080:44" pos:end="2080:47"><name pos:start="2080:44" pos:end="2080:47">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2081:5" pos:end="2081:31">case <expr pos:start="2081:10" pos:end="2081:30"><name pos:start="2081:10" pos:end="2081:30">TARGET_NR_sched_yield</name></expr>:</case>
        <expr_stmt pos:start="2082:9" pos:end="2082:39"><expr pos:start="2082:9" pos:end="2082:38"><name pos:start="2082:9" pos:end="2082:11">ret</name> <operator pos:start="2082:13" pos:end="2082:13">=</operator> <call pos:start="2082:15" pos:end="2082:38"><name pos:start="2082:15" pos:end="2082:23">get_errno</name><argument_list pos:start="2082:24" pos:end="2082:38">(<argument pos:start="2082:25" pos:end="2082:37"><expr pos:start="2082:25" pos:end="2082:37"><call pos:start="2082:25" pos:end="2082:37"><name pos:start="2082:25" pos:end="2082:35">sched_yield</name><argument_list pos:start="2082:36" pos:end="2082:37">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2083:5" pos:end="2083:42">case <expr pos:start="2083:10" pos:end="2083:41"><name pos:start="2083:10" pos:end="2083:41">TARGET_NR_sched_get_priority_max</name></expr>:</case>
        <expr_stmt pos:start="2084:9" pos:end="2084:54"><expr pos:start="2084:9" pos:end="2084:53"><name pos:start="2084:9" pos:end="2084:11">ret</name> <operator pos:start="2084:13" pos:end="2084:13">=</operator> <call pos:start="2084:15" pos:end="2084:53"><name pos:start="2084:15" pos:end="2084:23">get_errno</name><argument_list pos:start="2084:24" pos:end="2084:53">(<argument pos:start="2084:25" pos:end="2084:52"><expr pos:start="2084:25" pos:end="2084:52"><call pos:start="2084:25" pos:end="2084:52"><name pos:start="2084:25" pos:end="2084:46">sched_get_priority_max</name><argument_list pos:start="2084:47" pos:end="2084:52">(<argument pos:start="2084:48" pos:end="2084:51"><expr pos:start="2084:48" pos:end="2084:51"><name pos:start="2084:48" pos:end="2084:51">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2085:5" pos:end="2085:42">case <expr pos:start="2085:10" pos:end="2085:41"><name pos:start="2085:10" pos:end="2085:41">TARGET_NR_sched_get_priority_min</name></expr>:</case>
        <expr_stmt pos:start="2086:9" pos:end="2086:54"><expr pos:start="2086:9" pos:end="2086:53"><name pos:start="2086:9" pos:end="2086:11">ret</name> <operator pos:start="2086:13" pos:end="2086:13">=</operator> <call pos:start="2086:15" pos:end="2086:53"><name pos:start="2086:15" pos:end="2086:23">get_errno</name><argument_list pos:start="2086:24" pos:end="2086:53">(<argument pos:start="2086:25" pos:end="2086:52"><expr pos:start="2086:25" pos:end="2086:52"><call pos:start="2086:25" pos:end="2086:52"><name pos:start="2086:25" pos:end="2086:46">sched_get_priority_min</name><argument_list pos:start="2086:47" pos:end="2086:52">(<argument pos:start="2086:48" pos:end="2086:51"><expr pos:start="2086:48" pos:end="2086:51"><name pos:start="2086:48" pos:end="2086:51">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2087:5" pos:end="2087:41">case <expr pos:start="2087:10" pos:end="2087:40"><name pos:start="2087:10" pos:end="2087:40">TARGET_NR_sched_rr_get_interval</name></expr>:</case>
        <block pos:start="2088:9" pos:end="3541:14">{<block_content pos:start="2089:13" pos:end="3541:14">
            <decl_stmt pos:start="2089:13" pos:end="2089:31"><decl pos:start="2089:13" pos:end="2089:30"><type pos:start="2089:13" pos:end="2089:27"><name pos:start="2089:13" pos:end="2089:27"><name pos:start="2089:13" pos:end="2089:18">struct</name> <name pos:start="2089:20" pos:end="2089:27">timespec</name></name></type> <name pos:start="2089:29" pos:end="2089:30">ts</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2090:13" pos:end="2090:62"><expr pos:start="2090:13" pos:end="2090:61"><name pos:start="2090:13" pos:end="2090:15">ret</name> <operator pos:start="2090:17" pos:end="2090:17">=</operator> <call pos:start="2090:19" pos:end="2090:61"><name pos:start="2090:19" pos:end="2090:27">get_errno</name><argument_list pos:start="2090:28" pos:end="2090:61">(<argument pos:start="2090:29" pos:end="2090:60"><expr pos:start="2090:29" pos:end="2090:60"><call pos:start="2090:29" pos:end="2090:60"><name pos:start="2090:29" pos:end="2090:49">sched_rr_get_interval</name><argument_list pos:start="2090:50" pos:end="2090:60">(<argument pos:start="2090:51" pos:end="2090:54"><expr pos:start="2090:51" pos:end="2090:54"><name pos:start="2090:51" pos:end="2090:54">arg1</name></expr></argument>, <argument pos:start="2090:57" pos:end="2090:59"><expr pos:start="2090:57" pos:end="2090:59"><operator pos:start="2090:57" pos:end="2090:57">&amp;</operator><name pos:start="2090:58" pos:end="2090:59">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2091:13" pos:end="3541:14"><if pos:start="2091:13" pos:end="3541:14">if <condition pos:start="2091:16" pos:end="2091:31">(<expr pos:start="2091:17" pos:end="2091:30"><operator pos:start="2091:17" pos:end="2091:17">!</operator><call pos:start="2091:18" pos:end="2091:30"><name pos:start="2091:18" pos:end="2091:25">is_error</name><argument_list pos:start="2091:26" pos:end="2091:30">(<argument pos:start="2091:27" pos:end="2091:29"><expr pos:start="2091:27" pos:end="2091:29"><name pos:start="2091:27" pos:end="2091:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2091:33" pos:end="3541:14">{<block_content pos:start="2092:17" pos:end="3541:14">
                <expr_stmt pos:start="2092:17" pos:end="2092:57"><expr pos:start="2092:17" pos:end="2092:56"><name pos:start="2092:17" pos:end="2092:19">ret</name> <operator pos:start="2092:21" pos:end="2092:21">=</operator> <call pos:start="2092:23" pos:end="2092:56"><name pos:start="2092:23" pos:end="2092:45">host_to_target_timespec</name><argument_list pos:start="2092:46" pos:end="2092:56">(<argument pos:start="2092:47" pos:end="2092:50"><expr pos:start="2092:47" pos:end="2092:50"><name pos:start="2092:47" pos:end="2092:50">arg2</name></expr></argument>, <argument pos:start="2092:53" pos:end="2092:55"><expr pos:start="2092:53" pos:end="2092:55"><operator pos:start="2092:53" pos:end="2092:53">&amp;</operator><name pos:start="2092:54" pos:end="2092:55">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2093:5" pos:end="2093:29">case <expr pos:start="2093:10" pos:end="2093:28"><name pos:start="2093:10" pos:end="2093:28">TARGET_NR_nanosleep</name></expr>:</case>
        <block pos:start="2094:9" pos:end="3541:14">{<block_content pos:start="2095:13" pos:end="3541:14">
            <decl_stmt pos:start="2095:13" pos:end="2095:37"><decl pos:start="2095:13" pos:end="2095:31"><type pos:start="2095:13" pos:end="2095:27"><name pos:start="2095:13" pos:end="2095:27"><name pos:start="2095:13" pos:end="2095:18">struct</name> <name pos:start="2095:20" pos:end="2095:27">timespec</name></name></type> <name pos:start="2095:29" pos:end="2095:31">req</name></decl>, <decl pos:start="2095:34" pos:end="2095:36"><type ref="prev" pos:start="2095:13" pos:end="2095:27"/><name pos:start="2095:34" pos:end="2095:36">rem</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2096:13" pos:end="2096:48"><expr pos:start="2096:13" pos:end="2096:47"><call pos:start="2096:13" pos:end="2096:47"><name pos:start="2096:13" pos:end="2096:35">target_to_host_timespec</name><argument_list pos:start="2096:36" pos:end="2096:47">(<argument pos:start="2096:37" pos:end="2096:40"><expr pos:start="2096:37" pos:end="2096:40"><operator pos:start="2096:37" pos:end="2096:37">&amp;</operator><name pos:start="2096:38" pos:end="2096:40">req</name></expr></argument>, <argument pos:start="2096:43" pos:end="2096:46"><expr pos:start="2096:43" pos:end="2096:46"><name pos:start="2096:43" pos:end="2096:46">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2097:13" pos:end="2097:56"><expr pos:start="2097:13" pos:end="2097:55"><name pos:start="2097:13" pos:end="2097:15">ret</name> <operator pos:start="2097:17" pos:end="2097:17">=</operator> <call pos:start="2097:19" pos:end="2097:55"><name pos:start="2097:19" pos:end="2097:27">get_errno</name><argument_list pos:start="2097:28" pos:end="2097:55">(<argument pos:start="2097:29" pos:end="2097:54"><expr pos:start="2097:29" pos:end="2097:54"><call pos:start="2097:29" pos:end="2097:54"><name pos:start="2097:29" pos:end="2097:42">safe_nanosleep</name><argument_list pos:start="2097:43" pos:end="2097:54">(<argument pos:start="2097:44" pos:end="2097:47"><expr pos:start="2097:44" pos:end="2097:47"><operator pos:start="2097:44" pos:end="2097:44">&amp;</operator><name pos:start="2097:45" pos:end="2097:47">req</name></expr></argument>, <argument pos:start="2097:50" pos:end="2097:53"><expr pos:start="2097:50" pos:end="2097:53"><operator pos:start="2097:50" pos:end="2097:50">&amp;</operator><name pos:start="2097:51" pos:end="2097:53">rem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2098:13" pos:end="3541:14"><if pos:start="2098:13" pos:end="3541:14">if <condition pos:start="2098:16" pos:end="2098:38">(<expr pos:start="2098:17" pos:end="2098:37"><call pos:start="2098:17" pos:end="2098:29"><name pos:start="2098:17" pos:end="2098:24">is_error</name><argument_list pos:start="2098:25" pos:end="2098:29">(<argument pos:start="2098:26" pos:end="2098:28"><expr pos:start="2098:26" pos:end="2098:28"><name pos:start="2098:26" pos:end="2098:28">ret</name></expr></argument>)</argument_list></call> <operator pos:start="2098:31" pos:end="2098:32">&amp;&amp;</operator> <name pos:start="2098:34" pos:end="2098:37">arg2</name></expr>)</condition> <block pos:start="2098:40" pos:end="3541:14">{<block_content pos:start="2099:17" pos:end="3541:14">
                <expr_stmt pos:start="2099:17" pos:end="2101:0"><expr pos:start="2099:17" pos:end="2099:51"><call pos:start="2099:17" pos:end="2099:51"><name pos:start="2099:17" pos:end="2099:39">host_to_target_timespec</name><argument_list pos:start="2099:40" pos:end="2099:51">(<argument pos:start="2099:41" pos:end="2099:44"><expr pos:start="2099:41" pos:end="2099:44"><name pos:start="2099:41" pos:end="2099:44">arg2</name></expr></argument>, <argument pos:start="2099:47" pos:end="2099:50"><expr pos:start="2099:47" pos:end="2099:50"><operator pos:start="2099:47" pos:end="2099:47">&amp;</operator><name pos:start="2099:48" pos:end="2099:50">rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="2100:1" pos:end="2100:29">#<cpp:directive pos:start="2100:2" pos:end="2100:6">ifdef</cpp:directive> <name pos:start="2100:8" pos:end="2100:29">TARGET_NR_query_module</name></cpp:ifdef>
    <case pos:start="2101:5" pos:end="2101:32">case <expr pos:start="2101:10" pos:end="2101:31"><name pos:start="2101:10" pos:end="2101:31">TARGET_NR_query_module</name></expr>:</case>
        <goto pos:start="2102:9" pos:end="2105:0">goto <name pos:start="2102:14" pos:end="2102:26">unimplemented</name>;</goto>
<cpp:endif pos:start="2103:1" pos:end="2103:6">#<cpp:directive pos:start="2103:2" pos:end="2103:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2104:1" pos:end="2104:27">#<cpp:directive pos:start="2104:2" pos:end="2104:6">ifdef</cpp:directive> <name pos:start="2104:8" pos:end="2104:27">TARGET_NR_nfsservctl</name></cpp:ifdef>
    <case pos:start="2105:5" pos:end="2105:30">case <expr pos:start="2105:10" pos:end="2105:29"><name pos:start="2105:10" pos:end="2105:29">TARGET_NR_nfsservctl</name></expr>:</case>
        <goto pos:start="2106:9" pos:end="2108:0">goto <name pos:start="2106:14" pos:end="2106:26">unimplemented</name>;</goto>
<cpp:endif pos:start="2107:1" pos:end="2107:6">#<cpp:directive pos:start="2107:2" pos:end="2107:6">endif</cpp:directive></cpp:endif>
    <case pos:start="2108:5" pos:end="2108:25">case <expr pos:start="2108:10" pos:end="2108:24"><name pos:start="2108:10" pos:end="2108:24">TARGET_NR_prctl</name></expr>:</case>
        <switch pos:start="2109:9" pos:end="3541:14">switch <condition pos:start="2109:16" pos:end="2109:21">(<expr pos:start="2109:17" pos:end="2109:20"><name pos:start="2109:17" pos:end="2109:20">arg1</name></expr>)</condition> <block pos:start="2109:23" pos:end="3541:14">{<block_content pos:start="2110:9" pos:end="3541:14">
        <case pos:start="2110:9" pos:end="2110:30">case <expr pos:start="2110:14" pos:end="2110:29"><name pos:start="2110:14" pos:end="2110:29">PR_GET_PDEATHSIG</name></expr>:</case>
        <block pos:start="2111:9" pos:end="3541:14">{<block_content pos:start="2112:13" pos:end="3541:14">
            <decl_stmt pos:start="2112:13" pos:end="2112:25"><decl pos:start="2112:13" pos:end="2112:24"><type pos:start="2112:13" pos:end="2112:15"><name pos:start="2112:13" pos:end="2112:15">int</name></type> <name pos:start="2112:17" pos:end="2112:24">deathsig</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2113:13" pos:end="2113:70"><expr pos:start="2113:13" pos:end="2113:69"><name pos:start="2113:13" pos:end="2113:15">ret</name> <operator pos:start="2113:17" pos:end="2113:17">=</operator> <call pos:start="2113:19" pos:end="2113:69"><name pos:start="2113:19" pos:end="2113:27">get_errno</name><argument_list pos:start="2113:28" pos:end="2113:69">(<argument pos:start="2113:29" pos:end="2113:68"><expr pos:start="2113:29" pos:end="2113:68"><call pos:start="2113:29" pos:end="2113:68"><name pos:start="2113:29" pos:end="2113:33">prctl</name><argument_list pos:start="2113:34" pos:end="2113:68">(<argument pos:start="2113:35" pos:end="2113:38"><expr pos:start="2113:35" pos:end="2113:38"><name pos:start="2113:35" pos:end="2113:38">arg1</name></expr></argument>, <argument pos:start="2113:41" pos:end="2113:49"><expr pos:start="2113:41" pos:end="2113:49"><operator pos:start="2113:41" pos:end="2113:41">&amp;</operator><name pos:start="2113:42" pos:end="2113:49">deathsig</name></expr></argument>, <argument pos:start="2113:52" pos:end="2113:55"><expr pos:start="2113:52" pos:end="2113:55"><name pos:start="2113:52" pos:end="2113:55">arg3</name></expr></argument>, <argument pos:start="2113:58" pos:end="2113:61"><expr pos:start="2113:58" pos:end="2113:61"><name pos:start="2113:58" pos:end="2113:61">arg4</name></expr></argument>, <argument pos:start="2113:64" pos:end="2113:67"><expr pos:start="2113:64" pos:end="2113:67"><name pos:start="2113:64" pos:end="2113:67">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2114:13" pos:end="3541:14"><if pos:start="2114:13" pos:end="3541:14">if <condition pos:start="2114:16" pos:end="2115:48">(<expr pos:start="2114:17" pos:end="2115:47"><operator pos:start="2114:17" pos:end="2114:17">!</operator><call pos:start="2114:18" pos:end="2114:30"><name pos:start="2114:18" pos:end="2114:25">is_error</name><argument_list pos:start="2114:26" pos:end="2114:30">(<argument pos:start="2114:27" pos:end="2114:29"><expr pos:start="2114:27" pos:end="2114:29"><name pos:start="2114:27" pos:end="2114:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="2114:32" pos:end="2114:33">&amp;&amp;</operator> <name pos:start="2114:35" pos:end="2114:38">arg2</name>
                <operator pos:start="2115:17" pos:end="2115:18">&amp;&amp;</operator> <call pos:start="2115:20" pos:end="2115:47"><name pos:start="2115:20" pos:end="2115:31">put_user_ual</name><argument_list pos:start="2115:32" pos:end="2115:47">(<argument pos:start="2115:33" pos:end="2115:40"><expr pos:start="2115:33" pos:end="2115:40"><name pos:start="2115:33" pos:end="2115:40">deathsig</name></expr></argument>, <argument pos:start="2115:43" pos:end="2115:46"><expr pos:start="2115:43" pos:end="2115:46"><name pos:start="2115:43" pos:end="2115:46">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2115:50" pos:end="3541:14">{<block_content pos:start="2116:17" pos:end="3541:14">
                <goto pos:start="2116:17" pos:end="2118:0">goto <name pos:start="2116:22" pos:end="2116:27">efault</name>;</goto>
<cpp:ifdef pos:start="2117:1" pos:end="2117:18">#<cpp:directive pos:start="2117:2" pos:end="2117:6">ifdef</cpp:directive> <name pos:start="2117:8" pos:end="2117:18">PR_GET_NAME</name></cpp:ifdef>
        <case pos:start="2118:9" pos:end="2118:25">case <expr pos:start="2118:14" pos:end="2118:24"><name pos:start="2118:14" pos:end="2118:24">PR_GET_NAME</name></expr>:</case>
        <block pos:start="2119:9" pos:end="3541:14">{<block_content pos:start="2120:13" pos:end="3541:14">
            <decl_stmt pos:start="2120:13" pos:end="2120:62"><decl pos:start="2120:13" pos:end="2120:61"><type pos:start="2120:13" pos:end="2120:18"><name pos:start="2120:13" pos:end="2120:16">void</name> <modifier pos:start="2120:18" pos:end="2120:18">*</modifier></type><name pos:start="2120:19" pos:end="2120:22">name</name> <init pos:start="2120:24" pos:end="2120:61">= <expr pos:start="2120:26" pos:end="2120:61"><call pos:start="2120:26" pos:end="2120:61"><name pos:start="2120:26" pos:end="2120:34">lock_user</name><argument_list pos:start="2120:35" pos:end="2120:61">(<argument pos:start="2120:36" pos:end="2120:47"><expr pos:start="2120:36" pos:end="2120:47"><name pos:start="2120:36" pos:end="2120:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2120:50" pos:end="2120:53"><expr pos:start="2120:50" pos:end="2120:53"><name pos:start="2120:50" pos:end="2120:53">arg2</name></expr></argument>, <argument pos:start="2120:56" pos:end="2120:57"><expr pos:start="2120:56" pos:end="2120:57"><literal type="number" pos:start="2120:56" pos:end="2120:57">16</literal></expr></argument>, <argument pos:start="2120:60" pos:end="2120:60"><expr pos:start="2120:60" pos:end="2120:60"><literal type="number" pos:start="2120:60" pos:end="2120:60">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2121:13" pos:end="3541:14"><if pos:start="2121:13" pos:end="3541:14">if <condition pos:start="2121:16" pos:end="2121:22">(<expr pos:start="2121:17" pos:end="2121:21"><operator pos:start="2121:17" pos:end="2121:17">!</operator><name pos:start="2121:18" pos:end="2121:21">name</name></expr>)</condition> <block pos:start="2121:24" pos:end="3541:14">{<block_content pos:start="2122:17" pos:end="3541:14">
                <goto pos:start="2122:17" pos:end="2122:28">goto <name pos:start="2122:22" pos:end="2122:27">efault</name>;</goto>
            <expr_stmt pos:start="2123:13" pos:end="2124:53"><expr pos:start="2123:13" pos:end="2124:52"><name pos:start="2123:13" pos:end="2123:15">ret</name> <operator pos:start="2123:17" pos:end="2123:17">=</operator> <call pos:start="2123:19" pos:end="2124:52"><name pos:start="2123:19" pos:end="2123:27">get_errno</name><argument_list pos:start="2123:28" pos:end="2124:52">(<argument pos:start="2123:29" pos:end="2124:51"><expr pos:start="2123:29" pos:end="2124:51"><call pos:start="2123:29" pos:end="2124:51"><name pos:start="2123:29" pos:end="2123:33">prctl</name><argument_list pos:start="2123:34" pos:end="2124:51">(<argument pos:start="2123:35" pos:end="2123:38"><expr pos:start="2123:35" pos:end="2123:38"><name pos:start="2123:35" pos:end="2123:38">arg1</name></expr></argument>, <argument pos:start="2123:41" pos:end="2123:59"><expr pos:start="2123:41" pos:end="2123:59"><operator pos:start="2123:41" pos:end="2123:41">(</operator><name pos:start="2123:42" pos:end="2123:49">unsigned</name> <name pos:start="2123:51" pos:end="2123:54">long</name><operator pos:start="2123:55" pos:end="2123:55">)</operator><name pos:start="2123:56" pos:end="2123:59">name</name></expr></argument>,
                                  <argument pos:start="2124:35" pos:end="2124:38"><expr pos:start="2124:35" pos:end="2124:38"><name pos:start="2124:35" pos:end="2124:38">arg3</name></expr></argument>, <argument pos:start="2124:41" pos:end="2124:44"><expr pos:start="2124:41" pos:end="2124:44"><name pos:start="2124:41" pos:end="2124:44">arg4</name></expr></argument>, <argument pos:start="2124:47" pos:end="2124:50"><expr pos:start="2124:47" pos:end="2124:50"><name pos:start="2124:47" pos:end="2124:50">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2125:13" pos:end="2125:40"><expr pos:start="2125:13" pos:end="2125:39"><call pos:start="2125:13" pos:end="2125:39"><name pos:start="2125:13" pos:end="2125:23">unlock_user</name><argument_list pos:start="2125:24" pos:end="2125:39">(<argument pos:start="2125:25" pos:end="2125:28"><expr pos:start="2125:25" pos:end="2125:28"><name pos:start="2125:25" pos:end="2125:28">name</name></expr></argument>, <argument pos:start="2125:31" pos:end="2125:34"><expr pos:start="2125:31" pos:end="2125:34"><name pos:start="2125:31" pos:end="2125:34">arg2</name></expr></argument>, <argument pos:start="2125:37" pos:end="2125:38"><expr pos:start="2125:37" pos:end="2125:38"><literal type="number" pos:start="2125:37" pos:end="2125:38">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <case pos:start="2126:9" pos:end="2126:25">case <expr pos:start="2126:14" pos:end="2126:24"><name pos:start="2126:14" pos:end="2126:24">PR_SET_NAME</name></expr>:</case>
        <block pos:start="2127:9" pos:end="3541:14">{<block_content pos:start="2128:13" pos:end="3541:14">
            <decl_stmt pos:start="2128:13" pos:end="2128:61"><decl pos:start="2128:13" pos:end="2128:60"><type pos:start="2128:13" pos:end="2128:18"><name pos:start="2128:13" pos:end="2128:16">void</name> <modifier pos:start="2128:18" pos:end="2128:18">*</modifier></type><name pos:start="2128:19" pos:end="2128:22">name</name> <init pos:start="2128:24" pos:end="2128:60">= <expr pos:start="2128:26" pos:end="2128:60"><call pos:start="2128:26" pos:end="2128:60"><name pos:start="2128:26" pos:end="2128:34">lock_user</name><argument_list pos:start="2128:35" pos:end="2128:60">(<argument pos:start="2128:36" pos:end="2128:46"><expr pos:start="2128:36" pos:end="2128:46"><name pos:start="2128:36" pos:end="2128:46">VERIFY_READ</name></expr></argument>, <argument pos:start="2128:49" pos:end="2128:52"><expr pos:start="2128:49" pos:end="2128:52"><name pos:start="2128:49" pos:end="2128:52">arg2</name></expr></argument>, <argument pos:start="2128:55" pos:end="2128:56"><expr pos:start="2128:55" pos:end="2128:56"><literal type="number" pos:start="2128:55" pos:end="2128:56">16</literal></expr></argument>, <argument pos:start="2128:59" pos:end="2128:59"><expr pos:start="2128:59" pos:end="2128:59"><literal type="number" pos:start="2128:59" pos:end="2128:59">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2129:13" pos:end="3541:14"><if pos:start="2129:13" pos:end="3541:14">if <condition pos:start="2129:16" pos:end="2129:22">(<expr pos:start="2129:17" pos:end="2129:21"><operator pos:start="2129:17" pos:end="2129:17">!</operator><name pos:start="2129:18" pos:end="2129:21">name</name></expr>)</condition> <block pos:start="2129:24" pos:end="3541:14">{<block_content pos:start="2130:17" pos:end="3541:14">
                <goto pos:start="2130:17" pos:end="2130:28">goto <name pos:start="2130:22" pos:end="2130:27">efault</name>;</goto>
            <expr_stmt pos:start="2131:13" pos:end="2132:53"><expr pos:start="2131:13" pos:end="2132:52"><name pos:start="2131:13" pos:end="2131:15">ret</name> <operator pos:start="2131:17" pos:end="2131:17">=</operator> <call pos:start="2131:19" pos:end="2132:52"><name pos:start="2131:19" pos:end="2131:27">get_errno</name><argument_list pos:start="2131:28" pos:end="2132:52">(<argument pos:start="2131:29" pos:end="2132:51"><expr pos:start="2131:29" pos:end="2132:51"><call pos:start="2131:29" pos:end="2132:51"><name pos:start="2131:29" pos:end="2131:33">prctl</name><argument_list pos:start="2131:34" pos:end="2132:51">(<argument pos:start="2131:35" pos:end="2131:38"><expr pos:start="2131:35" pos:end="2131:38"><name pos:start="2131:35" pos:end="2131:38">arg1</name></expr></argument>, <argument pos:start="2131:41" pos:end="2131:59"><expr pos:start="2131:41" pos:end="2131:59"><operator pos:start="2131:41" pos:end="2131:41">(</operator><name pos:start="2131:42" pos:end="2131:49">unsigned</name> <name pos:start="2131:51" pos:end="2131:54">long</name><operator pos:start="2131:55" pos:end="2131:55">)</operator><name pos:start="2131:56" pos:end="2131:59">name</name></expr></argument>,
                                  <argument pos:start="2132:35" pos:end="2132:38"><expr pos:start="2132:35" pos:end="2132:38"><name pos:start="2132:35" pos:end="2132:38">arg3</name></expr></argument>, <argument pos:start="2132:41" pos:end="2132:44"><expr pos:start="2132:41" pos:end="2132:44"><name pos:start="2132:41" pos:end="2132:44">arg4</name></expr></argument>, <argument pos:start="2132:47" pos:end="2132:50"><expr pos:start="2132:47" pos:end="2132:50"><name pos:start="2132:47" pos:end="2132:50">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2133:13" pos:end="2135:0"><expr pos:start="2133:13" pos:end="2133:38"><call pos:start="2133:13" pos:end="2133:38"><name pos:start="2133:13" pos:end="2133:23">unlock_user</name><argument_list pos:start="2133:24" pos:end="2133:38">(<argument pos:start="2133:25" pos:end="2133:28"><expr pos:start="2133:25" pos:end="2133:28"><name pos:start="2133:25" pos:end="2133:28">name</name></expr></argument>, <argument pos:start="2133:31" pos:end="2133:34"><expr pos:start="2133:31" pos:end="2133:34"><name pos:start="2133:31" pos:end="2133:34">arg2</name></expr></argument>, <argument pos:start="2133:37" pos:end="2133:37"><expr pos:start="2133:37" pos:end="2133:37"><literal type="number" pos:start="2133:37" pos:end="2133:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2134:1" pos:end="2134:6">#<cpp:directive pos:start="2134:2" pos:end="2134:6">endif</cpp:directive></cpp:endif>
        <default pos:start="2135:9" pos:end="2135:16">default:</default>
            <comment type="block" pos:start="2136:13" pos:end="2136:62">/* Most prctl options have no pointer arguments */</comment>
            <expr_stmt pos:start="2137:13" pos:end="2139:0"><expr pos:start="2137:13" pos:end="2137:64"><name pos:start="2137:13" pos:end="2137:15">ret</name> <operator pos:start="2137:17" pos:end="2137:17">=</operator> <call pos:start="2137:19" pos:end="2137:64"><name pos:start="2137:19" pos:end="2137:27">get_errno</name><argument_list pos:start="2137:28" pos:end="2137:64">(<argument pos:start="2137:29" pos:end="2137:63"><expr pos:start="2137:29" pos:end="2137:63"><call pos:start="2137:29" pos:end="2137:63"><name pos:start="2137:29" pos:end="2137:33">prctl</name><argument_list pos:start="2137:34" pos:end="2137:63">(<argument pos:start="2137:35" pos:end="2137:38"><expr pos:start="2137:35" pos:end="2137:38"><name pos:start="2137:35" pos:end="2137:38">arg1</name></expr></argument>, <argument pos:start="2137:41" pos:end="2137:44"><expr pos:start="2137:41" pos:end="2137:44"><name pos:start="2137:41" pos:end="2137:44">arg2</name></expr></argument>, <argument pos:start="2137:47" pos:end="2137:50"><expr pos:start="2137:47" pos:end="2137:50"><name pos:start="2137:47" pos:end="2137:50">arg3</name></expr></argument>, <argument pos:start="2137:53" pos:end="2137:56"><expr pos:start="2137:53" pos:end="2137:56"><name pos:start="2137:53" pos:end="2137:56">arg4</name></expr></argument>, <argument pos:start="2137:59" pos:end="2137:62"><expr pos:start="2137:59" pos:end="2137:62"><name pos:start="2137:59" pos:end="2137:62">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="2138:1" pos:end="2138:27">#<cpp:directive pos:start="2138:2" pos:end="2138:6">ifdef</cpp:directive> <name pos:start="2138:8" pos:end="2138:27">TARGET_NR_arch_prctl</name></cpp:ifdef>
    <case pos:start="2139:5" pos:end="2141:0">case <expr pos:start="2139:10" pos:end="2139:29"><name pos:start="2139:10" pos:end="2139:29">TARGET_NR_arch_prctl</name></expr>:</case>
<cpp:if pos:start="2140:1" pos:end="2140:50">#<cpp:directive pos:start="2140:2" pos:end="2140:3">if</cpp:directive> <expr pos:start="2140:5" pos:end="2140:50"><call pos:start="2140:5" pos:end="2140:24"><name pos:start="2140:5" pos:end="2140:11">defined</name><argument_list pos:start="2140:12" pos:end="2140:24">(<argument pos:start="2140:13" pos:end="2140:23"><expr pos:start="2140:13" pos:end="2140:23"><name pos:start="2140:13" pos:end="2140:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="2140:26" pos:end="2140:27">&amp;&amp;</operator> <operator pos:start="2140:29" pos:end="2140:29">!</operator><call pos:start="2140:30" pos:end="2140:50"><name pos:start="2140:30" pos:end="2140:36">defined</name><argument_list pos:start="2140:37" pos:end="2140:50">(<argument pos:start="2140:38" pos:end="2140:49"><expr pos:start="2140:38" pos:end="2140:49"><name pos:start="2140:38" pos:end="2140:49">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt pos:start="2141:9" pos:end="2143:0"><expr pos:start="2141:9" pos:end="2141:48"><name pos:start="2141:9" pos:end="2141:11">ret</name> <operator pos:start="2141:13" pos:end="2141:13">=</operator> <call pos:start="2141:15" pos:end="2141:48"><name pos:start="2141:15" pos:end="2141:27">do_arch_prctl</name><argument_list pos:start="2141:28" pos:end="2141:48">(<argument pos:start="2141:29" pos:end="2141:35"><expr pos:start="2141:29" pos:end="2141:35"><name pos:start="2141:29" pos:end="2141:35">cpu_env</name></expr></argument>, <argument pos:start="2141:38" pos:end="2141:41"><expr pos:start="2141:38" pos:end="2141:41"><name pos:start="2141:38" pos:end="2141:41">arg1</name></expr></argument>, <argument pos:start="2141:44" pos:end="2141:47"><expr pos:start="2141:44" pos:end="2141:47"><name pos:start="2141:44" pos:end="2141:47">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="2142:1" pos:end="2142:5">#<cpp:directive pos:start="2142:2" pos:end="2142:5">else</cpp:directive></cpp:else>
        <goto pos:start="2143:9" pos:end="2147:0">goto <name pos:start="2143:14" pos:end="2143:26">unimplemented</name>;</goto>
<cpp:endif pos:start="2144:1" pos:end="2144:6">#<cpp:directive pos:start="2144:2" pos:end="2144:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="2145:1" pos:end="2145:6">#<cpp:directive pos:start="2145:2" pos:end="2145:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2146:1" pos:end="2146:24">#<cpp:directive pos:start="2146:2" pos:end="2146:6">ifdef</cpp:directive> <name pos:start="2146:8" pos:end="2146:24">TARGET_NR_pread64</name></cpp:ifdef>
    <case pos:start="2147:5" pos:end="2147:27">case <expr pos:start="2147:10" pos:end="2147:26"><name pos:start="2147:10" pos:end="2147:26">TARGET_NR_pread64</name></expr>:</case>
        <if_stmt pos:start="2148:9" pos:end="3541:14"><if pos:start="2148:9" pos:end="3541:14">if <condition pos:start="2148:12" pos:end="2148:38">(<expr pos:start="2148:13" pos:end="2148:37"><call pos:start="2148:13" pos:end="2148:37"><name pos:start="2148:13" pos:end="2148:28">regpairs_aligned</name><argument_list pos:start="2148:29" pos:end="2148:37">(<argument pos:start="2148:30" pos:end="2148:36"><expr pos:start="2148:30" pos:end="2148:36"><name pos:start="2148:30" pos:end="2148:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2148:40" pos:end="3541:14">{<block_content pos:start="2149:13" pos:end="3541:14">
            <expr_stmt pos:start="2149:13" pos:end="2149:24"><expr pos:start="2149:13" pos:end="2149:23"><name pos:start="2149:13" pos:end="2149:16">arg4</name> <operator pos:start="2149:18" pos:end="2149:18">=</operator> <name pos:start="2149:20" pos:end="2149:23">arg5</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2150:13" pos:end="2150:24"><expr pos:start="2150:13" pos:end="2150:23"><name pos:start="2150:13" pos:end="2150:16">arg5</name> <operator pos:start="2150:18" pos:end="2150:18">=</operator> <name pos:start="2150:20" pos:end="2150:23">arg6</name></expr>;</expr_stmt>
        <if_stmt pos:start="2151:9" pos:end="2152:24"><if pos:start="2151:9" pos:end="2152:24">if <condition pos:start="2151:12" pos:end="2151:58">(<expr pos:start="2151:13" pos:end="2151:57"><operator pos:start="2151:13" pos:end="2151:13">!</operator><operator pos:start="2151:14" pos:end="2151:14">(</operator><name pos:start="2151:15" pos:end="2151:15">p</name> <operator pos:start="2151:17" pos:end="2151:17">=</operator> <call pos:start="2151:19" pos:end="2151:56"><name pos:start="2151:19" pos:end="2151:27">lock_user</name><argument_list pos:start="2151:28" pos:end="2151:56">(<argument pos:start="2151:29" pos:end="2151:40"><expr pos:start="2151:29" pos:end="2151:40"><name pos:start="2151:29" pos:end="2151:40">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2151:43" pos:end="2151:46"><expr pos:start="2151:43" pos:end="2151:46"><name pos:start="2151:43" pos:end="2151:46">arg2</name></expr></argument>, <argument pos:start="2151:49" pos:end="2151:52"><expr pos:start="2151:49" pos:end="2151:52"><name pos:start="2151:49" pos:end="2151:52">arg3</name></expr></argument>, <argument pos:start="2151:55" pos:end="2151:55"><expr pos:start="2151:55" pos:end="2151:55"><literal type="number" pos:start="2151:55" pos:end="2151:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="2151:57" pos:end="2151:57">)</operator></expr>)</condition><block type="pseudo" pos:start="2152:13" pos:end="2152:24"><block_content pos:start="2152:13" pos:end="2152:24">
            <goto pos:start="2152:13" pos:end="2152:24">goto <name pos:start="2152:18" pos:end="2152:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2153:9" pos:end="2153:77"><expr pos:start="2153:9" pos:end="2153:76"><name pos:start="2153:9" pos:end="2153:11">ret</name> <operator pos:start="2153:13" pos:end="2153:13">=</operator> <call pos:start="2153:15" pos:end="2153:76"><name pos:start="2153:15" pos:end="2153:23">get_errno</name><argument_list pos:start="2153:24" pos:end="2153:76">(<argument pos:start="2153:25" pos:end="2153:75"><expr pos:start="2153:25" pos:end="2153:75"><call pos:start="2153:25" pos:end="2153:75"><name pos:start="2153:25" pos:end="2153:31">pread64</name><argument_list pos:start="2153:32" pos:end="2153:75">(<argument pos:start="2153:33" pos:end="2153:36"><expr pos:start="2153:33" pos:end="2153:36"><name pos:start="2153:33" pos:end="2153:36">arg1</name></expr></argument>, <argument pos:start="2153:39" pos:end="2153:39"><expr pos:start="2153:39" pos:end="2153:39"><name pos:start="2153:39" pos:end="2153:39">p</name></expr></argument>, <argument pos:start="2153:42" pos:end="2153:45"><expr pos:start="2153:42" pos:end="2153:45"><name pos:start="2153:42" pos:end="2153:45">arg3</name></expr></argument>, <argument pos:start="2153:48" pos:end="2153:74"><expr pos:start="2153:48" pos:end="2153:74"><call pos:start="2153:48" pos:end="2153:74"><name pos:start="2153:48" pos:end="2153:62">target_offset64</name><argument_list pos:start="2153:63" pos:end="2153:74">(<argument pos:start="2153:64" pos:end="2153:67"><expr pos:start="2153:64" pos:end="2153:67"><name pos:start="2153:64" pos:end="2153:67">arg4</name></expr></argument>, <argument pos:start="2153:70" pos:end="2153:73"><expr pos:start="2153:70" pos:end="2153:73"><name pos:start="2153:70" pos:end="2153:73">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2154:9" pos:end="2154:34"><expr pos:start="2154:9" pos:end="2154:33"><call pos:start="2154:9" pos:end="2154:33"><name pos:start="2154:9" pos:end="2154:19">unlock_user</name><argument_list pos:start="2154:20" pos:end="2154:33">(<argument pos:start="2154:21" pos:end="2154:21"><expr pos:start="2154:21" pos:end="2154:21"><name pos:start="2154:21" pos:end="2154:21">p</name></expr></argument>, <argument pos:start="2154:24" pos:end="2154:27"><expr pos:start="2154:24" pos:end="2154:27"><name pos:start="2154:24" pos:end="2154:27">arg2</name></expr></argument>, <argument pos:start="2154:30" pos:end="2154:32"><expr pos:start="2154:30" pos:end="2154:32"><name pos:start="2154:30" pos:end="2154:32">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2155:5" pos:end="2155:28">case <expr pos:start="2155:10" pos:end="2155:27"><name pos:start="2155:10" pos:end="2155:27">TARGET_NR_pwrite64</name></expr>:</case>
        <if_stmt pos:start="2156:9" pos:end="3541:14"><if pos:start="2156:9" pos:end="3541:14">if <condition pos:start="2156:12" pos:end="2156:38">(<expr pos:start="2156:13" pos:end="2156:37"><call pos:start="2156:13" pos:end="2156:37"><name pos:start="2156:13" pos:end="2156:28">regpairs_aligned</name><argument_list pos:start="2156:29" pos:end="2156:37">(<argument pos:start="2156:30" pos:end="2156:36"><expr pos:start="2156:30" pos:end="2156:36"><name pos:start="2156:30" pos:end="2156:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2156:40" pos:end="3541:14">{<block_content pos:start="2157:13" pos:end="3541:14">
            <expr_stmt pos:start="2157:13" pos:end="2157:24"><expr pos:start="2157:13" pos:end="2157:23"><name pos:start="2157:13" pos:end="2157:16">arg4</name> <operator pos:start="2157:18" pos:end="2157:18">=</operator> <name pos:start="2157:20" pos:end="2157:23">arg5</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2158:13" pos:end="2158:24"><expr pos:start="2158:13" pos:end="2158:23"><name pos:start="2158:13" pos:end="2158:16">arg5</name> <operator pos:start="2158:18" pos:end="2158:18">=</operator> <name pos:start="2158:20" pos:end="2158:23">arg6</name></expr>;</expr_stmt>
        <if_stmt pos:start="2159:9" pos:end="2160:24"><if pos:start="2159:9" pos:end="2160:24">if <condition pos:start="2159:12" pos:end="2159:57">(<expr pos:start="2159:13" pos:end="2159:56"><operator pos:start="2159:13" pos:end="2159:13">!</operator><operator pos:start="2159:14" pos:end="2159:14">(</operator><name pos:start="2159:15" pos:end="2159:15">p</name> <operator pos:start="2159:17" pos:end="2159:17">=</operator> <call pos:start="2159:19" pos:end="2159:55"><name pos:start="2159:19" pos:end="2159:27">lock_user</name><argument_list pos:start="2159:28" pos:end="2159:55">(<argument pos:start="2159:29" pos:end="2159:39"><expr pos:start="2159:29" pos:end="2159:39"><name pos:start="2159:29" pos:end="2159:39">VERIFY_READ</name></expr></argument>, <argument pos:start="2159:42" pos:end="2159:45"><expr pos:start="2159:42" pos:end="2159:45"><name pos:start="2159:42" pos:end="2159:45">arg2</name></expr></argument>, <argument pos:start="2159:48" pos:end="2159:51"><expr pos:start="2159:48" pos:end="2159:51"><name pos:start="2159:48" pos:end="2159:51">arg3</name></expr></argument>, <argument pos:start="2159:54" pos:end="2159:54"><expr pos:start="2159:54" pos:end="2159:54"><literal type="number" pos:start="2159:54" pos:end="2159:54">1</literal></expr></argument>)</argument_list></call><operator pos:start="2159:56" pos:end="2159:56">)</operator></expr>)</condition><block type="pseudo" pos:start="2160:13" pos:end="2160:24"><block_content pos:start="2160:13" pos:end="2160:24">
            <goto pos:start="2160:13" pos:end="2160:24">goto <name pos:start="2160:18" pos:end="2160:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2161:9" pos:end="2161:78"><expr pos:start="2161:9" pos:end="2161:77"><name pos:start="2161:9" pos:end="2161:11">ret</name> <operator pos:start="2161:13" pos:end="2161:13">=</operator> <call pos:start="2161:15" pos:end="2161:77"><name pos:start="2161:15" pos:end="2161:23">get_errno</name><argument_list pos:start="2161:24" pos:end="2161:77">(<argument pos:start="2161:25" pos:end="2161:76"><expr pos:start="2161:25" pos:end="2161:76"><call pos:start="2161:25" pos:end="2161:76"><name pos:start="2161:25" pos:end="2161:32">pwrite64</name><argument_list pos:start="2161:33" pos:end="2161:76">(<argument pos:start="2161:34" pos:end="2161:37"><expr pos:start="2161:34" pos:end="2161:37"><name pos:start="2161:34" pos:end="2161:37">arg1</name></expr></argument>, <argument pos:start="2161:40" pos:end="2161:40"><expr pos:start="2161:40" pos:end="2161:40"><name pos:start="2161:40" pos:end="2161:40">p</name></expr></argument>, <argument pos:start="2161:43" pos:end="2161:46"><expr pos:start="2161:43" pos:end="2161:46"><name pos:start="2161:43" pos:end="2161:46">arg3</name></expr></argument>, <argument pos:start="2161:49" pos:end="2161:75"><expr pos:start="2161:49" pos:end="2161:75"><call pos:start="2161:49" pos:end="2161:75"><name pos:start="2161:49" pos:end="2161:63">target_offset64</name><argument_list pos:start="2161:64" pos:end="2161:75">(<argument pos:start="2161:65" pos:end="2161:68"><expr pos:start="2161:65" pos:end="2161:68"><name pos:start="2161:65" pos:end="2161:68">arg4</name></expr></argument>, <argument pos:start="2161:71" pos:end="2161:74"><expr pos:start="2161:71" pos:end="2161:74"><name pos:start="2161:71" pos:end="2161:74">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2162:9" pos:end="2164:0"><expr pos:start="2162:9" pos:end="2162:31"><call pos:start="2162:9" pos:end="2162:31"><name pos:start="2162:9" pos:end="2162:19">unlock_user</name><argument_list pos:start="2162:20" pos:end="2162:31">(<argument pos:start="2162:21" pos:end="2162:21"><expr pos:start="2162:21" pos:end="2162:21"><name pos:start="2162:21" pos:end="2162:21">p</name></expr></argument>, <argument pos:start="2162:24" pos:end="2162:27"><expr pos:start="2162:24" pos:end="2162:27"><name pos:start="2162:24" pos:end="2162:27">arg2</name></expr></argument>, <argument pos:start="2162:30" pos:end="2162:30"><expr pos:start="2162:30" pos:end="2162:30"><literal type="number" pos:start="2162:30" pos:end="2162:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2163:1" pos:end="2163:6">#<cpp:directive pos:start="2163:2" pos:end="2163:6">endif</cpp:directive></cpp:endif>
    <case pos:start="2164:5" pos:end="2164:26">case <expr pos:start="2164:10" pos:end="2164:25"><name pos:start="2164:10" pos:end="2164:25">TARGET_NR_getcwd</name></expr>:</case>
        <if_stmt pos:start="2165:9" pos:end="2166:24"><if pos:start="2165:9" pos:end="2166:24">if <condition pos:start="2165:12" pos:end="2165:58">(<expr pos:start="2165:13" pos:end="2165:57"><operator pos:start="2165:13" pos:end="2165:13">!</operator><operator pos:start="2165:14" pos:end="2165:14">(</operator><name pos:start="2165:15" pos:end="2165:15">p</name> <operator pos:start="2165:17" pos:end="2165:17">=</operator> <call pos:start="2165:19" pos:end="2165:56"><name pos:start="2165:19" pos:end="2165:27">lock_user</name><argument_list pos:start="2165:28" pos:end="2165:56">(<argument pos:start="2165:29" pos:end="2165:40"><expr pos:start="2165:29" pos:end="2165:40"><name pos:start="2165:29" pos:end="2165:40">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2165:43" pos:end="2165:46"><expr pos:start="2165:43" pos:end="2165:46"><name pos:start="2165:43" pos:end="2165:46">arg1</name></expr></argument>, <argument pos:start="2165:49" pos:end="2165:52"><expr pos:start="2165:49" pos:end="2165:52"><name pos:start="2165:49" pos:end="2165:52">arg2</name></expr></argument>, <argument pos:start="2165:55" pos:end="2165:55"><expr pos:start="2165:55" pos:end="2165:55"><literal type="number" pos:start="2165:55" pos:end="2165:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="2165:57" pos:end="2165:57">)</operator></expr>)</condition><block type="pseudo" pos:start="2166:13" pos:end="2166:24"><block_content pos:start="2166:13" pos:end="2166:24">
            <goto pos:start="2166:13" pos:end="2166:24">goto <name pos:start="2166:18" pos:end="2166:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2167:9" pos:end="2167:46"><expr pos:start="2167:9" pos:end="2167:45"><name pos:start="2167:9" pos:end="2167:11">ret</name> <operator pos:start="2167:13" pos:end="2167:13">=</operator> <call pos:start="2167:15" pos:end="2167:45"><name pos:start="2167:15" pos:end="2167:23">get_errno</name><argument_list pos:start="2167:24" pos:end="2167:45">(<argument pos:start="2167:25" pos:end="2167:44"><expr pos:start="2167:25" pos:end="2167:44"><call pos:start="2167:25" pos:end="2167:44"><name pos:start="2167:25" pos:end="2167:35">sys_getcwd1</name><argument_list pos:start="2167:36" pos:end="2167:44">(<argument pos:start="2167:37" pos:end="2167:37"><expr pos:start="2167:37" pos:end="2167:37"><name pos:start="2167:37" pos:end="2167:37">p</name></expr></argument>, <argument pos:start="2167:40" pos:end="2167:43"><expr pos:start="2167:40" pos:end="2167:43"><name pos:start="2167:40" pos:end="2167:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2168:9" pos:end="2168:34"><expr pos:start="2168:9" pos:end="2168:33"><call pos:start="2168:9" pos:end="2168:33"><name pos:start="2168:9" pos:end="2168:19">unlock_user</name><argument_list pos:start="2168:20" pos:end="2168:33">(<argument pos:start="2168:21" pos:end="2168:21"><expr pos:start="2168:21" pos:end="2168:21"><name pos:start="2168:21" pos:end="2168:21">p</name></expr></argument>, <argument pos:start="2168:24" pos:end="2168:27"><expr pos:start="2168:24" pos:end="2168:27"><name pos:start="2168:24" pos:end="2168:27">arg1</name></expr></argument>, <argument pos:start="2168:30" pos:end="2168:32"><expr pos:start="2168:30" pos:end="2168:32"><name pos:start="2168:30" pos:end="2168:32">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2169:5" pos:end="2169:26">case <expr pos:start="2169:10" pos:end="2169:25"><name pos:start="2169:10" pos:end="2169:25">TARGET_NR_capget</name></expr>:</case>
    <case pos:start="2170:5" pos:end="2170:26">case <expr pos:start="2170:10" pos:end="2170:25"><name pos:start="2170:10" pos:end="2170:25">TARGET_NR_capset</name></expr>:</case>
    <block pos:start="2171:5" pos:end="3541:14">{<block_content pos:start="2172:9" pos:end="3541:14">
        <decl_stmt pos:start="2172:9" pos:end="2172:53"><decl pos:start="2172:9" pos:end="2172:52"><type pos:start="2172:9" pos:end="2172:39"><name pos:start="2172:9" pos:end="2172:37"><name pos:start="2172:9" pos:end="2172:14">struct</name> <name pos:start="2172:16" pos:end="2172:37">target_user_cap_header</name></name> <modifier pos:start="2172:39" pos:end="2172:39">*</modifier></type><name pos:start="2172:40" pos:end="2172:52">target_header</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2173:9" pos:end="2173:56"><decl pos:start="2173:9" pos:end="2173:55"><type pos:start="2173:9" pos:end="2173:37"><name pos:start="2173:9" pos:end="2173:35"><name pos:start="2173:9" pos:end="2173:14">struct</name> <name pos:start="2173:16" pos:end="2173:35">target_user_cap_data</name></name> <modifier pos:start="2173:37" pos:end="2173:37">*</modifier></type><name pos:start="2173:38" pos:end="2173:48">target_data</name> <init pos:start="2173:50" pos:end="2173:55">= <expr pos:start="2173:52" pos:end="2173:55"><name pos:start="2173:52" pos:end="2173:55">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2174:9" pos:end="2174:47"><decl pos:start="2174:9" pos:end="2174:46"><type pos:start="2174:9" pos:end="2174:39"><name pos:start="2174:9" pos:end="2174:39"><name pos:start="2174:9" pos:end="2174:14">struct</name> <name pos:start="2174:16" pos:end="2174:39">__user_cap_header_struct</name></name></type> <name pos:start="2174:41" pos:end="2174:46">header</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2175:9" pos:end="2175:46"><decl pos:start="2175:9" pos:end="2175:45"><type pos:start="2175:9" pos:end="2175:37"><name pos:start="2175:9" pos:end="2175:37"><name pos:start="2175:9" pos:end="2175:14">struct</name> <name pos:start="2175:16" pos:end="2175:37">__user_cap_data_struct</name></name></type> <name pos:start="2175:39" pos:end="2175:45"><name pos:start="2175:39" pos:end="2175:42">data</name><index pos:start="2175:43" pos:end="2175:45">[<expr pos:start="2175:44" pos:end="2175:44"><literal type="number" pos:start="2175:44" pos:end="2175:44">2</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2176:9" pos:end="2176:54"><decl pos:start="2176:9" pos:end="2176:53"><type pos:start="2176:9" pos:end="2176:39"><name pos:start="2176:9" pos:end="2176:37"><name pos:start="2176:9" pos:end="2176:14">struct</name> <name pos:start="2176:16" pos:end="2176:37">__user_cap_data_struct</name></name> <modifier pos:start="2176:39" pos:end="2176:39">*</modifier></type><name pos:start="2176:40" pos:end="2176:46">dataptr</name> <init pos:start="2176:48" pos:end="2176:53">= <expr pos:start="2176:50" pos:end="2176:53"><name pos:start="2176:50" pos:end="2176:53">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2177:9" pos:end="2177:30"><decl pos:start="2177:9" pos:end="2177:13"><type pos:start="2177:9" pos:end="2177:11"><name pos:start="2177:9" pos:end="2177:11">int</name></type> <name pos:start="2177:13" pos:end="2177:13">i</name></decl>, <decl pos:start="2177:16" pos:end="2177:29"><type ref="prev" pos:start="2177:9" pos:end="2177:11"/><name pos:start="2177:16" pos:end="2177:29">target_datalen</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2178:9" pos:end="2178:27"><decl pos:start="2178:9" pos:end="2178:26"><type pos:start="2178:9" pos:end="2178:11"><name pos:start="2178:9" pos:end="2178:11">int</name></type> <name pos:start="2178:13" pos:end="2178:22">data_items</name> <init pos:start="2178:24" pos:end="2178:26">= <expr pos:start="2178:26" pos:end="2178:26"><literal type="number" pos:start="2178:26" pos:end="2178:26">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2179:9" pos:end="3541:14"><if pos:start="2179:9" pos:end="3541:14">if <condition pos:start="2179:12" pos:end="2179:68">(<expr pos:start="2179:13" pos:end="2179:67"><operator pos:start="2179:13" pos:end="2179:13">!</operator><call pos:start="2179:14" pos:end="2179:67"><name pos:start="2179:14" pos:end="2179:29">lock_user_struct</name><argument_list pos:start="2179:30" pos:end="2179:67">(<argument pos:start="2179:31" pos:end="2179:42"><expr pos:start="2179:31" pos:end="2179:42"><name pos:start="2179:31" pos:end="2179:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2179:45" pos:end="2179:57"><expr pos:start="2179:45" pos:end="2179:57"><name pos:start="2179:45" pos:end="2179:57">target_header</name></expr></argument>, <argument pos:start="2179:60" pos:end="2179:63"><expr pos:start="2179:60" pos:end="2179:63"><name pos:start="2179:60" pos:end="2179:63">arg1</name></expr></argument>, <argument pos:start="2179:66" pos:end="2179:66"><expr pos:start="2179:66" pos:end="2179:66"><literal type="number" pos:start="2179:66" pos:end="2179:66">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2179:70" pos:end="3541:14">{<block_content pos:start="2180:13" pos:end="3541:14">
            <goto pos:start="2180:13" pos:end="2180:24">goto <name pos:start="2180:18" pos:end="2180:23">efault</name>;</goto>
        <expr_stmt pos:start="2181:9" pos:end="2181:57"><expr pos:start="2181:9" pos:end="2181:56"><name pos:start="2181:9" pos:end="2181:22"><name pos:start="2181:9" pos:end="2181:14">header</name><operator pos:start="2181:15" pos:end="2181:15">.</operator><name pos:start="2181:16" pos:end="2181:22">version</name></name> <operator pos:start="2181:24" pos:end="2181:24">=</operator> <call pos:start="2181:26" pos:end="2181:56"><name pos:start="2181:26" pos:end="2181:32">tswap32</name><argument_list pos:start="2181:33" pos:end="2181:56">(<argument pos:start="2181:34" pos:end="2181:55"><expr pos:start="2181:34" pos:end="2181:55"><name pos:start="2181:34" pos:end="2181:55"><name pos:start="2181:34" pos:end="2181:46">target_header</name><operator pos:start="2181:47" pos:end="2181:48">-&gt;</operator><name pos:start="2181:49" pos:end="2181:55">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2182:9" pos:end="2182:49"><expr pos:start="2182:9" pos:end="2182:48"><name pos:start="2182:9" pos:end="2182:18"><name pos:start="2182:9" pos:end="2182:14">header</name><operator pos:start="2182:15" pos:end="2182:15">.</operator><name pos:start="2182:16" pos:end="2182:18">pid</name></name> <operator pos:start="2182:20" pos:end="2182:20">=</operator> <call pos:start="2182:22" pos:end="2182:48"><name pos:start="2182:22" pos:end="2182:28">tswap32</name><argument_list pos:start="2182:29" pos:end="2182:48">(<argument pos:start="2182:30" pos:end="2182:47"><expr pos:start="2182:30" pos:end="2182:47"><name pos:start="2182:30" pos:end="2182:47"><name pos:start="2182:30" pos:end="2182:42">target_header</name><operator pos:start="2182:43" pos:end="2182:44">-&gt;</operator><name pos:start="2182:45" pos:end="2182:47">pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2183:9" pos:end="3541:14"><if pos:start="2183:9" pos:end="3541:14">if <condition pos:start="2183:12" pos:end="2183:56">(<expr pos:start="2183:13" pos:end="2183:55"><name pos:start="2183:13" pos:end="2183:26"><name pos:start="2183:13" pos:end="2183:18">header</name><operator pos:start="2183:19" pos:end="2183:19">.</operator><name pos:start="2183:20" pos:end="2183:26">version</name></name> <operator pos:start="2183:28" pos:end="2183:29">!=</operator> <name pos:start="2183:31" pos:end="2183:55">_LINUX_CAPABILITY_VERSION</name></expr>)</condition> <block pos:start="2183:58" pos:end="3541:14">{<block_content pos:start="2185:13" pos:end="3541:14">
            <comment type="block" pos:start="2184:13" pos:end="2184:73">/* Version 2 and up takes pointer to two user_data structs */</comment>
            <expr_stmt pos:start="2185:13" pos:end="2185:27"><expr pos:start="2185:13" pos:end="2185:26"><name pos:start="2185:13" pos:end="2185:22">data_items</name> <operator pos:start="2185:24" pos:end="2185:24">=</operator> <literal type="number" pos:start="2185:26" pos:end="2185:26">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2186:9" pos:end="2186:59"><expr pos:start="2186:9" pos:end="2186:58"><name pos:start="2186:9" pos:end="2186:22">target_datalen</name> <operator pos:start="2186:24" pos:end="2186:24">=</operator> <sizeof pos:start="2186:26" pos:end="2186:45">sizeof<argument_list pos:start="2186:32" pos:end="2186:45">(<argument pos:start="2186:33" pos:end="2186:44"><expr pos:start="2186:33" pos:end="2186:44"><operator pos:start="2186:33" pos:end="2186:33">*</operator><name pos:start="2186:34" pos:end="2186:44">target_data</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2186:47" pos:end="2186:47">*</operator> <name pos:start="2186:49" pos:end="2186:58">data_items</name></expr>;</expr_stmt>
        <if_stmt pos:start="2187:9" pos:end="3541:14"><if pos:start="2187:9" pos:end="3541:14">if <condition pos:start="2187:12" pos:end="2187:17">(<expr pos:start="2187:13" pos:end="2187:16"><name pos:start="2187:13" pos:end="2187:16">arg2</name></expr>)</condition> <block pos:start="2187:19" pos:end="3541:14">{<block_content pos:start="2188:13" pos:end="3541:14">
            <if_stmt pos:start="2188:13" pos:end="3541:14"><if pos:start="2188:13" pos:end="2190:13">if <condition pos:start="2188:16" pos:end="2188:40">(<expr pos:start="2188:17" pos:end="2188:39"><name pos:start="2188:17" pos:end="2188:19">num</name> <operator pos:start="2188:21" pos:end="2188:22">==</operator> <name pos:start="2188:24" pos:end="2188:39">TARGET_NR_capget</name></expr>)</condition> <block pos:start="2188:42" pos:end="2190:13">{<block_content pos:start="2189:17" pos:end="2189:79">
                <expr_stmt pos:start="2189:17" pos:end="2189:79"><expr pos:start="2189:17" pos:end="2189:78"><name pos:start="2189:17" pos:end="2189:27">target_data</name> <operator pos:start="2189:29" pos:end="2189:29">=</operator> <call pos:start="2189:31" pos:end="2189:78"><name pos:start="2189:31" pos:end="2189:39">lock_user</name><argument_list pos:start="2189:40" pos:end="2189:78">(<argument pos:start="2189:41" pos:end="2189:52"><expr pos:start="2189:41" pos:end="2189:52"><name pos:start="2189:41" pos:end="2189:52">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2189:55" pos:end="2189:58"><expr pos:start="2189:55" pos:end="2189:58"><name pos:start="2189:55" pos:end="2189:58">arg2</name></expr></argument>, <argument pos:start="2189:61" pos:end="2189:74"><expr pos:start="2189:61" pos:end="2189:74"><name pos:start="2189:61" pos:end="2189:74">target_datalen</name></expr></argument>, <argument pos:start="2189:77" pos:end="2189:77"><expr pos:start="2189:77" pos:end="2189:77"><literal type="number" pos:start="2189:77" pos:end="2189:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2190:15" pos:end="3541:14">else <block pos:start="2190:20" pos:end="3541:14">{<block_content pos:start="2191:17" pos:end="3541:14">
                <expr_stmt pos:start="2191:17" pos:end="2191:78"><expr pos:start="2191:17" pos:end="2191:77"><name pos:start="2191:17" pos:end="2191:27">target_data</name> <operator pos:start="2191:29" pos:end="2191:29">=</operator> <call pos:start="2191:31" pos:end="2191:77"><name pos:start="2191:31" pos:end="2191:39">lock_user</name><argument_list pos:start="2191:40" pos:end="2191:77">(<argument pos:start="2191:41" pos:end="2191:51"><expr pos:start="2191:41" pos:end="2191:51"><name pos:start="2191:41" pos:end="2191:51">VERIFY_READ</name></expr></argument>, <argument pos:start="2191:54" pos:end="2191:57"><expr pos:start="2191:54" pos:end="2191:57"><name pos:start="2191:54" pos:end="2191:57">arg2</name></expr></argument>, <argument pos:start="2191:60" pos:end="2191:73"><expr pos:start="2191:60" pos:end="2191:73"><name pos:start="2191:60" pos:end="2191:73">target_datalen</name></expr></argument>, <argument pos:start="2191:76" pos:end="2191:76"><expr pos:start="2191:76" pos:end="2191:76"><literal type="number" pos:start="2191:76" pos:end="2191:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2192:13" pos:end="3541:14"><if pos:start="2192:13" pos:end="3541:14">if <condition pos:start="2192:16" pos:end="2192:29">(<expr pos:start="2192:17" pos:end="2192:28"><operator pos:start="2192:17" pos:end="2192:17">!</operator><name pos:start="2192:18" pos:end="2192:28">target_data</name></expr>)</condition> <block pos:start="2192:31" pos:end="3541:14">{<block_content pos:start="2193:17" pos:end="3541:14">
                <expr_stmt pos:start="2193:17" pos:end="2193:59"><expr pos:start="2193:17" pos:end="2193:58"><call pos:start="2193:17" pos:end="2193:58"><name pos:start="2193:17" pos:end="2193:34">unlock_user_struct</name><argument_list pos:start="2193:35" pos:end="2193:58">(<argument pos:start="2193:36" pos:end="2193:48"><expr pos:start="2193:36" pos:end="2193:48"><name pos:start="2193:36" pos:end="2193:48">target_header</name></expr></argument>, <argument pos:start="2193:51" pos:end="2193:54"><expr pos:start="2193:51" pos:end="2193:54"><name pos:start="2193:51" pos:end="2193:54">arg1</name></expr></argument>, <argument pos:start="2193:57" pos:end="2193:57"><expr pos:start="2193:57" pos:end="2193:57"><literal type="number" pos:start="2193:57" pos:end="2193:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="2194:17" pos:end="2194:28">goto <name pos:start="2194:22" pos:end="2194:27">efault</name>;</goto>
            <if_stmt pos:start="2195:13" pos:end="3541:14"><if pos:start="2195:13" pos:end="3541:14">if <condition pos:start="2195:16" pos:end="2195:40">(<expr pos:start="2195:17" pos:end="2195:39"><name pos:start="2195:17" pos:end="2195:19">num</name> <operator pos:start="2195:21" pos:end="2195:22">==</operator> <name pos:start="2195:24" pos:end="2195:39">TARGET_NR_capset</name></expr>)</condition> <block pos:start="2195:42" pos:end="3541:14">{<block_content pos:start="2196:17" pos:end="3541:14">
                <for pos:start="2196:17" pos:end="3541:14">for <control pos:start="2196:21" pos:end="2196:48">(<init pos:start="2196:22" pos:end="2196:27"><expr pos:start="2196:22" pos:end="2196:26"><name pos:start="2196:22" pos:end="2196:22">i</name> <operator pos:start="2196:24" pos:end="2196:24">=</operator> <literal type="number" pos:start="2196:26" pos:end="2196:26">0</literal></expr>;</init> <condition pos:start="2196:29" pos:end="2196:43"><expr pos:start="2196:29" pos:end="2196:42"><name pos:start="2196:29" pos:end="2196:29">i</name> <operator pos:start="2196:31" pos:end="2196:31">&lt;</operator> <name pos:start="2196:33" pos:end="2196:42">data_items</name></expr>;</condition> <incr pos:start="2196:45" pos:end="2196:47"><expr pos:start="2196:45" pos:end="2196:47"><name pos:start="2196:45" pos:end="2196:45">i</name><operator pos:start="2196:46" pos:end="2196:47">++</operator></expr></incr>)</control> <block pos:start="2196:50" pos:end="3541:14">{<block_content pos:start="2197:21" pos:end="3541:14">
                    <expr_stmt pos:start="2197:21" pos:end="2197:74"><expr pos:start="2197:21" pos:end="2197:73"><name pos:start="2197:21" pos:end="2197:27"><name pos:start="2197:21" pos:end="2197:24">data</name><index pos:start="2197:25" pos:end="2197:27">[<expr pos:start="2197:26" pos:end="2197:26"><name pos:start="2197:26" pos:end="2197:26">i</name></expr>]</index></name><operator pos:start="2197:28" pos:end="2197:28">.</operator><name pos:start="2197:29" pos:end="2197:37">effective</name> <operator pos:start="2197:39" pos:end="2197:39">=</operator> <call pos:start="2197:41" pos:end="2197:73"><name pos:start="2197:41" pos:end="2197:47">tswap32</name><argument_list pos:start="2197:48" pos:end="2197:73">(<argument pos:start="2197:49" pos:end="2197:72"><expr pos:start="2197:49" pos:end="2197:72"><name pos:start="2197:49" pos:end="2197:62"><name pos:start="2197:49" pos:end="2197:59">target_data</name><index pos:start="2197:60" pos:end="2197:62">[<expr pos:start="2197:61" pos:end="2197:61"><name pos:start="2197:61" pos:end="2197:61">i</name></expr>]</index></name><operator pos:start="2197:63" pos:end="2197:63">.</operator><name pos:start="2197:64" pos:end="2197:72">effective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2198:21" pos:end="2198:74"><expr pos:start="2198:21" pos:end="2198:73"><name pos:start="2198:21" pos:end="2198:27"><name pos:start="2198:21" pos:end="2198:24">data</name><index pos:start="2198:25" pos:end="2198:27">[<expr pos:start="2198:26" pos:end="2198:26"><name pos:start="2198:26" pos:end="2198:26">i</name></expr>]</index></name><operator pos:start="2198:28" pos:end="2198:28">.</operator><name pos:start="2198:29" pos:end="2198:37">permitted</name> <operator pos:start="2198:39" pos:end="2198:39">=</operator> <call pos:start="2198:41" pos:end="2198:73"><name pos:start="2198:41" pos:end="2198:47">tswap32</name><argument_list pos:start="2198:48" pos:end="2198:73">(<argument pos:start="2198:49" pos:end="2198:72"><expr pos:start="2198:49" pos:end="2198:72"><name pos:start="2198:49" pos:end="2198:62"><name pos:start="2198:49" pos:end="2198:59">target_data</name><index pos:start="2198:60" pos:end="2198:62">[<expr pos:start="2198:61" pos:end="2198:61"><name pos:start="2198:61" pos:end="2198:61">i</name></expr>]</index></name><operator pos:start="2198:63" pos:end="2198:63">.</operator><name pos:start="2198:64" pos:end="2198:72">permitted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2199:21" pos:end="2199:78"><expr pos:start="2199:21" pos:end="2199:77"><name pos:start="2199:21" pos:end="2199:27"><name pos:start="2199:21" pos:end="2199:24">data</name><index pos:start="2199:25" pos:end="2199:27">[<expr pos:start="2199:26" pos:end="2199:26"><name pos:start="2199:26" pos:end="2199:26">i</name></expr>]</index></name><operator pos:start="2199:28" pos:end="2199:28">.</operator><name pos:start="2199:29" pos:end="2199:39">inheritable</name> <operator pos:start="2199:41" pos:end="2199:41">=</operator> <call pos:start="2199:43" pos:end="2199:77"><name pos:start="2199:43" pos:end="2199:49">tswap32</name><argument_list pos:start="2199:50" pos:end="2199:77">(<argument pos:start="2199:51" pos:end="2199:76"><expr pos:start="2199:51" pos:end="2199:76"><name pos:start="2199:51" pos:end="2199:64"><name pos:start="2199:51" pos:end="2199:61">target_data</name><index pos:start="2199:62" pos:end="2199:64">[<expr pos:start="2199:63" pos:end="2199:63"><name pos:start="2199:63" pos:end="2199:63">i</name></expr>]</index></name><operator pos:start="2199:65" pos:end="2199:65">.</operator><name pos:start="2199:66" pos:end="2199:76">inheritable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2200:13" pos:end="2200:27"><expr pos:start="2200:13" pos:end="2200:26"><name pos:start="2200:13" pos:end="2200:19">dataptr</name> <operator pos:start="2200:21" pos:end="2200:21">=</operator> <name pos:start="2200:23" pos:end="2200:26">data</name></expr>;</expr_stmt>
        <if_stmt pos:start="2201:9" pos:end="3541:14"><if pos:start="2201:9" pos:end="2203:9">if <condition pos:start="2201:12" pos:end="2201:36">(<expr pos:start="2201:13" pos:end="2201:35"><name pos:start="2201:13" pos:end="2201:15">num</name> <operator pos:start="2201:17" pos:end="2201:18">==</operator> <name pos:start="2201:20" pos:end="2201:35">TARGET_NR_capget</name></expr>)</condition> <block pos:start="2201:38" pos:end="2203:9">{<block_content pos:start="2202:13" pos:end="2202:54">
            <expr_stmt pos:start="2202:13" pos:end="2202:54"><expr pos:start="2202:13" pos:end="2202:53"><name pos:start="2202:13" pos:end="2202:15">ret</name> <operator pos:start="2202:17" pos:end="2202:17">=</operator> <call pos:start="2202:19" pos:end="2202:53"><name pos:start="2202:19" pos:end="2202:27">get_errno</name><argument_list pos:start="2202:28" pos:end="2202:53">(<argument pos:start="2202:29" pos:end="2202:52"><expr pos:start="2202:29" pos:end="2202:52"><call pos:start="2202:29" pos:end="2202:52"><name pos:start="2202:29" pos:end="2202:34">capget</name><argument_list pos:start="2202:35" pos:end="2202:52">(<argument pos:start="2202:36" pos:end="2202:42"><expr pos:start="2202:36" pos:end="2202:42"><operator pos:start="2202:36" pos:end="2202:36">&amp;</operator><name pos:start="2202:37" pos:end="2202:42">header</name></expr></argument>, <argument pos:start="2202:45" pos:end="2202:51"><expr pos:start="2202:45" pos:end="2202:51"><name pos:start="2202:45" pos:end="2202:51">dataptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2203:11" pos:end="3541:14">else <block pos:start="2203:16" pos:end="3541:14">{<block_content pos:start="2204:13" pos:end="3541:14">
            <expr_stmt pos:start="2204:13" pos:end="2204:54"><expr pos:start="2204:13" pos:end="2204:53"><name pos:start="2204:13" pos:end="2204:15">ret</name> <operator pos:start="2204:17" pos:end="2204:17">=</operator> <call pos:start="2204:19" pos:end="2204:53"><name pos:start="2204:19" pos:end="2204:27">get_errno</name><argument_list pos:start="2204:28" pos:end="2204:53">(<argument pos:start="2204:29" pos:end="2204:52"><expr pos:start="2204:29" pos:end="2204:52"><call pos:start="2204:29" pos:end="2204:52"><name pos:start="2204:29" pos:end="2204:34">capset</name><argument_list pos:start="2204:35" pos:end="2204:52">(<argument pos:start="2204:36" pos:end="2204:42"><expr pos:start="2204:36" pos:end="2204:42"><operator pos:start="2204:36" pos:end="2204:36">&amp;</operator><name pos:start="2204:37" pos:end="2204:42">header</name></expr></argument>, <argument pos:start="2204:45" pos:end="2204:51"><expr pos:start="2204:45" pos:end="2204:51"><name pos:start="2204:45" pos:end="2204:51">dataptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="2205:9" pos:end="2205:74">/* The kernel always updates version for both capget and capset */</comment>
        <expr_stmt pos:start="2206:9" pos:end="2206:57"><expr pos:start="2206:9" pos:end="2206:56"><name pos:start="2206:9" pos:end="2206:30"><name pos:start="2206:9" pos:end="2206:21">target_header</name><operator pos:start="2206:22" pos:end="2206:23">-&gt;</operator><name pos:start="2206:24" pos:end="2206:30">version</name></name> <operator pos:start="2206:32" pos:end="2206:32">=</operator> <call pos:start="2206:34" pos:end="2206:56"><name pos:start="2206:34" pos:end="2206:40">tswap32</name><argument_list pos:start="2206:41" pos:end="2206:56">(<argument pos:start="2206:42" pos:end="2206:55"><expr pos:start="2206:42" pos:end="2206:55"><name pos:start="2206:42" pos:end="2206:55"><name pos:start="2206:42" pos:end="2206:47">header</name><operator pos:start="2206:48" pos:end="2206:48">.</operator><name pos:start="2206:49" pos:end="2206:55">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2207:9" pos:end="2207:51"><expr pos:start="2207:9" pos:end="2207:50"><call pos:start="2207:9" pos:end="2207:50"><name pos:start="2207:9" pos:end="2207:26">unlock_user_struct</name><argument_list pos:start="2207:27" pos:end="2207:50">(<argument pos:start="2207:28" pos:end="2207:40"><expr pos:start="2207:28" pos:end="2207:40"><name pos:start="2207:28" pos:end="2207:40">target_header</name></expr></argument>, <argument pos:start="2207:43" pos:end="2207:46"><expr pos:start="2207:43" pos:end="2207:46"><name pos:start="2207:43" pos:end="2207:46">arg1</name></expr></argument>, <argument pos:start="2207:49" pos:end="2207:49"><expr pos:start="2207:49" pos:end="2207:49"><literal type="number" pos:start="2207:49" pos:end="2207:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2208:9" pos:end="3541:14"><if pos:start="2208:9" pos:end="3541:14">if <condition pos:start="2208:12" pos:end="2208:17">(<expr pos:start="2208:13" pos:end="2208:16"><name pos:start="2208:13" pos:end="2208:16">arg2</name></expr>)</condition> <block pos:start="2208:19" pos:end="3541:14">{<block_content pos:start="2209:13" pos:end="3541:14">
            <if_stmt pos:start="2209:13" pos:end="3541:14"><if pos:start="2209:13" pos:end="3541:14">if <condition pos:start="2209:16" pos:end="2209:40">(<expr pos:start="2209:17" pos:end="2209:39"><name pos:start="2209:17" pos:end="2209:19">num</name> <operator pos:start="2209:21" pos:end="2209:22">==</operator> <name pos:start="2209:24" pos:end="2209:39">TARGET_NR_capget</name></expr>)</condition> <block pos:start="2209:42" pos:end="3541:14">{<block_content pos:start="2210:17" pos:end="3541:14">
                <for pos:start="2210:17" pos:end="2215:13">for <control pos:start="2210:21" pos:end="2210:48">(<init pos:start="2210:22" pos:end="2210:27"><expr pos:start="2210:22" pos:end="2210:26"><name pos:start="2210:22" pos:end="2210:22">i</name> <operator pos:start="2210:24" pos:end="2210:24">=</operator> <literal type="number" pos:start="2210:26" pos:end="2210:26">0</literal></expr>;</init> <condition pos:start="2210:29" pos:end="2210:43"><expr pos:start="2210:29" pos:end="2210:42"><name pos:start="2210:29" pos:end="2210:29">i</name> <operator pos:start="2210:31" pos:end="2210:31">&lt;</operator> <name pos:start="2210:33" pos:end="2210:42">data_items</name></expr>;</condition> <incr pos:start="2210:45" pos:end="2210:47"><expr pos:start="2210:45" pos:end="2210:47"><name pos:start="2210:45" pos:end="2210:45">i</name><operator pos:start="2210:46" pos:end="2210:47">++</operator></expr></incr>)</control> <block pos:start="2210:50" pos:end="2215:13">{<block_content pos:start="2211:21" pos:end="2214:63">
                    <expr_stmt pos:start="2211:21" pos:end="2211:74"><expr pos:start="2211:21" pos:end="2211:73"><name pos:start="2211:21" pos:end="2211:34"><name pos:start="2211:21" pos:end="2211:31">target_data</name><index pos:start="2211:32" pos:end="2211:34">[<expr pos:start="2211:33" pos:end="2211:33"><name pos:start="2211:33" pos:end="2211:33">i</name></expr>]</index></name><operator pos:start="2211:35" pos:end="2211:35">.</operator><name pos:start="2211:36" pos:end="2211:44">effective</name> <operator pos:start="2211:46" pos:end="2211:46">=</operator> <call pos:start="2211:48" pos:end="2211:73"><name pos:start="2211:48" pos:end="2211:54">tswap32</name><argument_list pos:start="2211:55" pos:end="2211:73">(<argument pos:start="2211:56" pos:end="2211:72"><expr pos:start="2211:56" pos:end="2211:72"><name pos:start="2211:56" pos:end="2211:62"><name pos:start="2211:56" pos:end="2211:59">data</name><index pos:start="2211:60" pos:end="2211:62">[<expr pos:start="2211:61" pos:end="2211:61"><name pos:start="2211:61" pos:end="2211:61">i</name></expr>]</index></name><operator pos:start="2211:63" pos:end="2211:63">.</operator><name pos:start="2211:64" pos:end="2211:72">effective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2212:21" pos:end="2212:74"><expr pos:start="2212:21" pos:end="2212:73"><name pos:start="2212:21" pos:end="2212:34"><name pos:start="2212:21" pos:end="2212:31">target_data</name><index pos:start="2212:32" pos:end="2212:34">[<expr pos:start="2212:33" pos:end="2212:33"><name pos:start="2212:33" pos:end="2212:33">i</name></expr>]</index></name><operator pos:start="2212:35" pos:end="2212:35">.</operator><name pos:start="2212:36" pos:end="2212:44">permitted</name> <operator pos:start="2212:46" pos:end="2212:46">=</operator> <call pos:start="2212:48" pos:end="2212:73"><name pos:start="2212:48" pos:end="2212:54">tswap32</name><argument_list pos:start="2212:55" pos:end="2212:73">(<argument pos:start="2212:56" pos:end="2212:72"><expr pos:start="2212:56" pos:end="2212:72"><name pos:start="2212:56" pos:end="2212:62"><name pos:start="2212:56" pos:end="2212:59">data</name><index pos:start="2212:60" pos:end="2212:62">[<expr pos:start="2212:61" pos:end="2212:61"><name pos:start="2212:61" pos:end="2212:61">i</name></expr>]</index></name><operator pos:start="2212:63" pos:end="2212:63">.</operator><name pos:start="2212:64" pos:end="2212:72">permitted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2213:21" pos:end="2213:78"><expr pos:start="2213:21" pos:end="2213:77"><name pos:start="2213:21" pos:end="2213:34"><name pos:start="2213:21" pos:end="2213:31">target_data</name><index pos:start="2213:32" pos:end="2213:34">[<expr pos:start="2213:33" pos:end="2213:33"><name pos:start="2213:33" pos:end="2213:33">i</name></expr>]</index></name><operator pos:start="2213:35" pos:end="2213:35">.</operator><name pos:start="2213:36" pos:end="2213:46">inheritable</name> <operator pos:start="2213:48" pos:end="2213:48">=</operator> <call pos:start="2213:50" pos:end="2213:77"><name pos:start="2213:50" pos:end="2213:56">tswap32</name><argument_list pos:start="2213:57" pos:end="2213:77">(<argument pos:start="2213:58" pos:end="2213:76"><expr pos:start="2213:58" pos:end="2213:76"><name pos:start="2213:58" pos:end="2213:64"><name pos:start="2213:58" pos:end="2213:61">data</name><index pos:start="2213:62" pos:end="2213:64">[<expr pos:start="2213:63" pos:end="2213:63"><name pos:start="2213:63" pos:end="2213:63">i</name></expr>]</index></name><operator pos:start="2213:65" pos:end="2213:65">.</operator><name pos:start="2213:66" pos:end="2213:76">inheritable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2214:17" pos:end="2214:63"><expr pos:start="2214:17" pos:end="2214:62"><call pos:start="2214:17" pos:end="2214:62"><name pos:start="2214:17" pos:end="2214:27">unlock_user</name><argument_list pos:start="2214:28" pos:end="2214:62">(<argument pos:start="2214:29" pos:end="2214:39"><expr pos:start="2214:29" pos:end="2214:39"><name pos:start="2214:29" pos:end="2214:39">target_data</name></expr></argument>, <argument pos:start="2214:42" pos:end="2214:45"><expr pos:start="2214:42" pos:end="2214:45"><name pos:start="2214:42" pos:end="2214:45">arg2</name></expr></argument>, <argument pos:start="2214:48" pos:end="2214:61"><expr pos:start="2214:48" pos:end="2214:61"><name pos:start="2214:48" pos:end="2214:61">target_datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for> <if_stmt pos:start="2215:15" pos:end="3541:14"><else pos:start="2215:15" pos:end="3541:14">else <block pos:start="2215:20" pos:end="3541:14">{<block_content pos:start="2216:17" pos:end="3541:14">
                <expr_stmt pos:start="2216:17" pos:end="2216:50"><expr pos:start="2216:17" pos:end="2216:49"><call pos:start="2216:17" pos:end="2216:49"><name pos:start="2216:17" pos:end="2216:27">unlock_user</name><argument_list pos:start="2216:28" pos:end="2216:49">(<argument pos:start="2216:29" pos:end="2216:39"><expr pos:start="2216:29" pos:end="2216:39"><name pos:start="2216:29" pos:end="2216:39">target_data</name></expr></argument>, <argument pos:start="2216:42" pos:end="2216:45"><expr pos:start="2216:42" pos:end="2216:45"><name pos:start="2216:42" pos:end="2216:45">arg2</name></expr></argument>, <argument pos:start="2216:48" pos:end="2216:48"><expr pos:start="2216:48" pos:end="2216:48"><literal type="number" pos:start="2216:48" pos:end="2216:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2217:5" pos:end="2217:31">case <expr pos:start="2217:10" pos:end="2217:30"><name pos:start="2217:10" pos:end="2217:30">TARGET_NR_sigaltstack</name></expr>:</case>
        <expr_stmt pos:start="2218:9" pos:end="2220:0"><expr pos:start="2218:9" pos:end="2218:87"><name pos:start="2218:9" pos:end="2218:11">ret</name> <operator pos:start="2218:13" pos:end="2218:13">=</operator> <call pos:start="2218:15" pos:end="2218:87"><name pos:start="2218:15" pos:end="2218:28">do_sigaltstack</name><argument_list pos:start="2218:29" pos:end="2218:87">(<argument pos:start="2218:30" pos:end="2218:33"><expr pos:start="2218:30" pos:end="2218:33"><name pos:start="2218:30" pos:end="2218:33">arg1</name></expr></argument>, <argument pos:start="2218:36" pos:end="2218:39"><expr pos:start="2218:36" pos:end="2218:39"><name pos:start="2218:36" pos:end="2218:39">arg2</name></expr></argument>, <argument pos:start="2218:42" pos:end="2218:86"><expr pos:start="2218:42" pos:end="2218:86"><call pos:start="2218:42" pos:end="2218:86"><name pos:start="2218:42" pos:end="2218:61">get_sp_from_cpustate</name><argument_list pos:start="2218:62" pos:end="2218:86">(<argument pos:start="2218:63" pos:end="2218:85"><expr pos:start="2218:63" pos:end="2218:85"><operator pos:start="2218:63" pos:end="2218:63">(</operator><name pos:start="2218:64" pos:end="2218:75">CPUArchState</name> <operator pos:start="2218:77" pos:end="2218:77">*</operator><operator pos:start="2218:78" pos:end="2218:78">)</operator><name pos:start="2218:79" pos:end="2218:85">cpu_env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="2219:1" pos:end="2219:22">#<cpp:directive pos:start="2219:2" pos:end="2219:6">ifdef</cpp:directive> <name pos:start="2219:8" pos:end="2219:22">CONFIG_SENDFILE</name></cpp:ifdef>
    <case pos:start="2220:5" pos:end="2220:28">case <expr pos:start="2220:10" pos:end="2220:27"><name pos:start="2220:10" pos:end="2220:27">TARGET_NR_sendfile</name></expr>:</case>
    <block pos:start="2221:5" pos:end="3541:14">{<block_content pos:start="2222:9" pos:end="3541:14">
        <decl_stmt pos:start="2222:9" pos:end="2222:27"><decl pos:start="2222:9" pos:end="2222:26"><type pos:start="2222:9" pos:end="2222:15"><name pos:start="2222:9" pos:end="2222:13">off_t</name> <modifier pos:start="2222:15" pos:end="2222:15">*</modifier></type><name pos:start="2222:16" pos:end="2222:19">offp</name> <init pos:start="2222:21" pos:end="2222:26">= <expr pos:start="2222:23" pos:end="2222:26"><name pos:start="2222:23" pos:end="2222:26">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2223:9" pos:end="2223:18"><decl pos:start="2223:9" pos:end="2223:17"><type pos:start="2223:9" pos:end="2223:13"><name pos:start="2223:9" pos:end="2223:13">off_t</name></type> <name pos:start="2223:15" pos:end="2223:17">off</name></decl>;</decl_stmt>
        <if_stmt pos:start="2224:9" pos:end="3541:14"><if pos:start="2224:9" pos:end="3541:14">if <condition pos:start="2224:12" pos:end="2224:17">(<expr pos:start="2224:13" pos:end="2224:16"><name pos:start="2224:13" pos:end="2224:16">arg3</name></expr>)</condition> <block pos:start="2224:19" pos:end="3541:14">{<block_content pos:start="2225:13" pos:end="3541:14">
            <expr_stmt pos:start="2225:13" pos:end="2225:42"><expr pos:start="2225:13" pos:end="2225:41"><name pos:start="2225:13" pos:end="2225:15">ret</name> <operator pos:start="2225:17" pos:end="2225:17">=</operator> <call pos:start="2225:19" pos:end="2225:41"><name pos:start="2225:19" pos:end="2225:30">get_user_sal</name><argument_list pos:start="2225:31" pos:end="2225:41">(<argument pos:start="2225:32" pos:end="2225:34"><expr pos:start="2225:32" pos:end="2225:34"><name pos:start="2225:32" pos:end="2225:34">off</name></expr></argument>, <argument pos:start="2225:37" pos:end="2225:40"><expr pos:start="2225:37" pos:end="2225:40"><name pos:start="2225:37" pos:end="2225:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2226:13" pos:end="3541:14"><if pos:start="2226:13" pos:end="3541:14">if <condition pos:start="2226:16" pos:end="2226:30">(<expr pos:start="2226:17" pos:end="2226:29"><call pos:start="2226:17" pos:end="2226:29"><name pos:start="2226:17" pos:end="2226:24">is_error</name><argument_list pos:start="2226:25" pos:end="2226:29">(<argument pos:start="2226:26" pos:end="2226:28"><expr pos:start="2226:26" pos:end="2226:28"><name pos:start="2226:26" pos:end="2226:28">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2226:32" pos:end="3541:14">{<block_content pos:start="2227:13" pos:end="3541:14">
            <expr_stmt pos:start="2227:13" pos:end="2227:24"><expr pos:start="2227:13" pos:end="2227:23"><name pos:start="2227:13" pos:end="2227:16">offp</name> <operator pos:start="2227:18" pos:end="2227:18">=</operator> <operator pos:start="2227:20" pos:end="2227:20">&amp;</operator><name pos:start="2227:21" pos:end="2227:23">off</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2228:9" pos:end="2228:58"><expr pos:start="2228:9" pos:end="2228:57"><name pos:start="2228:9" pos:end="2228:11">ret</name> <operator pos:start="2228:13" pos:end="2228:13">=</operator> <call pos:start="2228:15" pos:end="2228:57"><name pos:start="2228:15" pos:end="2228:23">get_errno</name><argument_list pos:start="2228:24" pos:end="2228:57">(<argument pos:start="2228:25" pos:end="2228:56"><expr pos:start="2228:25" pos:end="2228:56"><call pos:start="2228:25" pos:end="2228:56"><name pos:start="2228:25" pos:end="2228:32">sendfile</name><argument_list pos:start="2228:33" pos:end="2228:56">(<argument pos:start="2228:34" pos:end="2228:37"><expr pos:start="2228:34" pos:end="2228:37"><name pos:start="2228:34" pos:end="2228:37">arg1</name></expr></argument>, <argument pos:start="2228:40" pos:end="2228:43"><expr pos:start="2228:40" pos:end="2228:43"><name pos:start="2228:40" pos:end="2228:43">arg2</name></expr></argument>, <argument pos:start="2228:46" pos:end="2228:49"><expr pos:start="2228:46" pos:end="2228:49"><name pos:start="2228:46" pos:end="2228:49">offp</name></expr></argument>, <argument pos:start="2228:52" pos:end="2228:55"><expr pos:start="2228:52" pos:end="2228:55"><name pos:start="2228:52" pos:end="2228:55">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2229:9" pos:end="3541:14"><if pos:start="2229:9" pos:end="3541:14">if <condition pos:start="2229:12" pos:end="2229:35">(<expr pos:start="2229:13" pos:end="2229:34"><operator pos:start="2229:13" pos:end="2229:13">!</operator><call pos:start="2229:14" pos:end="2229:26"><name pos:start="2229:14" pos:end="2229:21">is_error</name><argument_list pos:start="2229:22" pos:end="2229:26">(<argument pos:start="2229:23" pos:end="2229:25"><expr pos:start="2229:23" pos:end="2229:25"><name pos:start="2229:23" pos:end="2229:25">ret</name></expr></argument>)</argument_list></call> <operator pos:start="2229:28" pos:end="2229:29">&amp;&amp;</operator> <name pos:start="2229:31" pos:end="2229:34">arg3</name></expr>)</condition> <block pos:start="2229:37" pos:end="3541:14">{<block_content pos:start="2230:13" pos:end="3541:14">
            <decl_stmt pos:start="2230:13" pos:end="2230:52"><decl pos:start="2230:13" pos:end="2230:51"><type pos:start="2230:13" pos:end="2230:20"><name pos:start="2230:13" pos:end="2230:20">abi_long</name></type> <name pos:start="2230:22" pos:end="2230:25">ret2</name> <init pos:start="2230:27" pos:end="2230:51">= <expr pos:start="2230:29" pos:end="2230:51"><call pos:start="2230:29" pos:end="2230:51"><name pos:start="2230:29" pos:end="2230:40">put_user_sal</name><argument_list pos:start="2230:41" pos:end="2230:51">(<argument pos:start="2230:42" pos:end="2230:44"><expr pos:start="2230:42" pos:end="2230:44"><name pos:start="2230:42" pos:end="2230:44">off</name></expr></argument>, <argument pos:start="2230:47" pos:end="2230:50"><expr pos:start="2230:47" pos:end="2230:50"><name pos:start="2230:47" pos:end="2230:50">arg3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2231:13" pos:end="3541:14"><if pos:start="2231:13" pos:end="3541:14">if <condition pos:start="2231:16" pos:end="2231:31">(<expr pos:start="2231:17" pos:end="2231:30"><call pos:start="2231:17" pos:end="2231:30"><name pos:start="2231:17" pos:end="2231:24">is_error</name><argument_list pos:start="2231:25" pos:end="2231:30">(<argument pos:start="2231:26" pos:end="2231:29"><expr pos:start="2231:26" pos:end="2231:29"><name pos:start="2231:26" pos:end="2231:29">ret2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2231:33" pos:end="3541:14">{<block_content pos:start="2232:17" pos:end="3541:14">
                <expr_stmt pos:start="2232:17" pos:end="2234:0"><expr pos:start="2232:17" pos:end="2232:26"><name pos:start="2232:17" pos:end="2232:19">ret</name> <operator pos:start="2232:21" pos:end="2232:21">=</operator> <name pos:start="2232:23" pos:end="2232:26">ret2</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="2233:1" pos:end="2233:27">#<cpp:directive pos:start="2233:2" pos:end="2233:6">ifdef</cpp:directive> <name pos:start="2233:8" pos:end="2233:27">TARGET_NR_sendfile64</name></cpp:ifdef>
    <case pos:start="2234:5" pos:end="2234:30">case <expr pos:start="2234:10" pos:end="2234:29"><name pos:start="2234:10" pos:end="2234:29">TARGET_NR_sendfile64</name></expr>:</case>
    <block pos:start="2235:5" pos:end="3541:14">{<block_content pos:start="2236:9" pos:end="3541:14">
        <decl_stmt pos:start="2236:9" pos:end="2236:27"><decl pos:start="2236:9" pos:end="2236:26"><type pos:start="2236:9" pos:end="2236:15"><name pos:start="2236:9" pos:end="2236:13">off_t</name> <modifier pos:start="2236:15" pos:end="2236:15">*</modifier></type><name pos:start="2236:16" pos:end="2236:19">offp</name> <init pos:start="2236:21" pos:end="2236:26">= <expr pos:start="2236:23" pos:end="2236:26"><name pos:start="2236:23" pos:end="2236:26">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2237:9" pos:end="2237:18"><decl pos:start="2237:9" pos:end="2237:17"><type pos:start="2237:9" pos:end="2237:13"><name pos:start="2237:9" pos:end="2237:13">off_t</name></type> <name pos:start="2237:15" pos:end="2237:17">off</name></decl>;</decl_stmt>
        <if_stmt pos:start="2238:9" pos:end="3541:14"><if pos:start="2238:9" pos:end="3541:14">if <condition pos:start="2238:12" pos:end="2238:17">(<expr pos:start="2238:13" pos:end="2238:16"><name pos:start="2238:13" pos:end="2238:16">arg3</name></expr>)</condition> <block pos:start="2238:19" pos:end="3541:14">{<block_content pos:start="2239:13" pos:end="3541:14">
            <expr_stmt pos:start="2239:13" pos:end="2239:42"><expr pos:start="2239:13" pos:end="2239:41"><name pos:start="2239:13" pos:end="2239:15">ret</name> <operator pos:start="2239:17" pos:end="2239:17">=</operator> <call pos:start="2239:19" pos:end="2239:41"><name pos:start="2239:19" pos:end="2239:30">get_user_s64</name><argument_list pos:start="2239:31" pos:end="2239:41">(<argument pos:start="2239:32" pos:end="2239:34"><expr pos:start="2239:32" pos:end="2239:34"><name pos:start="2239:32" pos:end="2239:34">off</name></expr></argument>, <argument pos:start="2239:37" pos:end="2239:40"><expr pos:start="2239:37" pos:end="2239:40"><name pos:start="2239:37" pos:end="2239:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2240:13" pos:end="3541:14"><if pos:start="2240:13" pos:end="3541:14">if <condition pos:start="2240:16" pos:end="2240:30">(<expr pos:start="2240:17" pos:end="2240:29"><call pos:start="2240:17" pos:end="2240:29"><name pos:start="2240:17" pos:end="2240:24">is_error</name><argument_list pos:start="2240:25" pos:end="2240:29">(<argument pos:start="2240:26" pos:end="2240:28"><expr pos:start="2240:26" pos:end="2240:28"><name pos:start="2240:26" pos:end="2240:28">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2240:32" pos:end="3541:14">{<block_content pos:start="2241:13" pos:end="3541:14">
            <expr_stmt pos:start="2241:13" pos:end="2241:24"><expr pos:start="2241:13" pos:end="2241:23"><name pos:start="2241:13" pos:end="2241:16">offp</name> <operator pos:start="2241:18" pos:end="2241:18">=</operator> <operator pos:start="2241:20" pos:end="2241:20">&amp;</operator><name pos:start="2241:21" pos:end="2241:23">off</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2242:9" pos:end="2242:58"><expr pos:start="2242:9" pos:end="2242:57"><name pos:start="2242:9" pos:end="2242:11">ret</name> <operator pos:start="2242:13" pos:end="2242:13">=</operator> <call pos:start="2242:15" pos:end="2242:57"><name pos:start="2242:15" pos:end="2242:23">get_errno</name><argument_list pos:start="2242:24" pos:end="2242:57">(<argument pos:start="2242:25" pos:end="2242:56"><expr pos:start="2242:25" pos:end="2242:56"><call pos:start="2242:25" pos:end="2242:56"><name pos:start="2242:25" pos:end="2242:32">sendfile</name><argument_list pos:start="2242:33" pos:end="2242:56">(<argument pos:start="2242:34" pos:end="2242:37"><expr pos:start="2242:34" pos:end="2242:37"><name pos:start="2242:34" pos:end="2242:37">arg1</name></expr></argument>, <argument pos:start="2242:40" pos:end="2242:43"><expr pos:start="2242:40" pos:end="2242:43"><name pos:start="2242:40" pos:end="2242:43">arg2</name></expr></argument>, <argument pos:start="2242:46" pos:end="2242:49"><expr pos:start="2242:46" pos:end="2242:49"><name pos:start="2242:46" pos:end="2242:49">offp</name></expr></argument>, <argument pos:start="2242:52" pos:end="2242:55"><expr pos:start="2242:52" pos:end="2242:55"><name pos:start="2242:52" pos:end="2242:55">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2243:9" pos:end="3541:14"><if pos:start="2243:9" pos:end="3541:14">if <condition pos:start="2243:12" pos:end="2243:35">(<expr pos:start="2243:13" pos:end="2243:34"><operator pos:start="2243:13" pos:end="2243:13">!</operator><call pos:start="2243:14" pos:end="2243:26"><name pos:start="2243:14" pos:end="2243:21">is_error</name><argument_list pos:start="2243:22" pos:end="2243:26">(<argument pos:start="2243:23" pos:end="2243:25"><expr pos:start="2243:23" pos:end="2243:25"><name pos:start="2243:23" pos:end="2243:25">ret</name></expr></argument>)</argument_list></call> <operator pos:start="2243:28" pos:end="2243:29">&amp;&amp;</operator> <name pos:start="2243:31" pos:end="2243:34">arg3</name></expr>)</condition> <block pos:start="2243:37" pos:end="3541:14">{<block_content pos:start="2244:13" pos:end="3541:14">
            <decl_stmt pos:start="2244:13" pos:end="2244:52"><decl pos:start="2244:13" pos:end="2244:51"><type pos:start="2244:13" pos:end="2244:20"><name pos:start="2244:13" pos:end="2244:20">abi_long</name></type> <name pos:start="2244:22" pos:end="2244:25">ret2</name> <init pos:start="2244:27" pos:end="2244:51">= <expr pos:start="2244:29" pos:end="2244:51"><call pos:start="2244:29" pos:end="2244:51"><name pos:start="2244:29" pos:end="2244:40">put_user_s64</name><argument_list pos:start="2244:41" pos:end="2244:51">(<argument pos:start="2244:42" pos:end="2244:44"><expr pos:start="2244:42" pos:end="2244:44"><name pos:start="2244:42" pos:end="2244:44">off</name></expr></argument>, <argument pos:start="2244:47" pos:end="2244:50"><expr pos:start="2244:47" pos:end="2244:50"><name pos:start="2244:47" pos:end="2244:50">arg3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2245:13" pos:end="3541:14"><if pos:start="2245:13" pos:end="3541:14">if <condition pos:start="2245:16" pos:end="2245:31">(<expr pos:start="2245:17" pos:end="2245:30"><call pos:start="2245:17" pos:end="2245:30"><name pos:start="2245:17" pos:end="2245:24">is_error</name><argument_list pos:start="2245:25" pos:end="2245:30">(<argument pos:start="2245:26" pos:end="2245:29"><expr pos:start="2245:26" pos:end="2245:29"><name pos:start="2245:26" pos:end="2245:29">ret2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2245:33" pos:end="3541:14">{<block_content pos:start="2246:17" pos:end="3541:14">
                <expr_stmt pos:start="2246:17" pos:end="2249:0"><expr pos:start="2246:17" pos:end="2246:26"><name pos:start="2246:17" pos:end="2246:19">ret</name> <operator pos:start="2246:21" pos:end="2246:21">=</operator> <name pos:start="2246:23" pos:end="2246:26">ret2</name></expr>;</expr_stmt>
<cpp:endif pos:start="2247:1" pos:end="2247:6">#<cpp:directive pos:start="2247:2" pos:end="2247:6">endif</cpp:directive></cpp:endif>
<cpp:else pos:start="2248:1" pos:end="2248:5">#<cpp:directive pos:start="2248:2" pos:end="2248:5">else</cpp:directive></cpp:else>
    <case pos:start="2249:5" pos:end="2251:0">case <expr pos:start="2249:10" pos:end="2249:27"><name pos:start="2249:10" pos:end="2249:27">TARGET_NR_sendfile</name></expr>:</case>
<cpp:ifdef pos:start="2250:1" pos:end="2250:27">#<cpp:directive pos:start="2250:2" pos:end="2250:6">ifdef</cpp:directive> <name pos:start="2250:8" pos:end="2250:27">TARGET_NR_sendfile64</name></cpp:ifdef>
    <case pos:start="2251:5" pos:end="2253:0">case <expr pos:start="2251:10" pos:end="2251:29"><name pos:start="2251:10" pos:end="2251:29">TARGET_NR_sendfile64</name></expr>:</case>
<cpp:endif pos:start="2252:1" pos:end="2252:6">#<cpp:directive pos:start="2252:2" pos:end="2252:6">endif</cpp:directive></cpp:endif>
        <goto pos:start="2253:9" pos:end="2256:0">goto <name pos:start="2253:14" pos:end="2253:26">unimplemented</name>;</goto>
<cpp:endif pos:start="2254:1" pos:end="2254:6">#<cpp:directive pos:start="2254:2" pos:end="2254:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2255:1" pos:end="2255:24">#<cpp:directive pos:start="2255:2" pos:end="2255:6">ifdef</cpp:directive> <name pos:start="2255:8" pos:end="2255:24">TARGET_NR_getpmsg</name></cpp:ifdef>
    <case pos:start="2256:5" pos:end="2256:27">case <expr pos:start="2256:10" pos:end="2256:26"><name pos:start="2256:10" pos:end="2256:26">TARGET_NR_getpmsg</name></expr>:</case>
        <goto pos:start="2257:9" pos:end="2260:0">goto <name pos:start="2257:14" pos:end="2257:26">unimplemented</name>;</goto>
<cpp:endif pos:start="2258:1" pos:end="2258:6">#<cpp:directive pos:start="2258:2" pos:end="2258:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2259:1" pos:end="2259:24">#<cpp:directive pos:start="2259:2" pos:end="2259:6">ifdef</cpp:directive> <name pos:start="2259:8" pos:end="2259:24">TARGET_NR_putpmsg</name></cpp:ifdef>
    <case pos:start="2260:5" pos:end="2260:27">case <expr pos:start="2260:10" pos:end="2260:26"><name pos:start="2260:10" pos:end="2260:26">TARGET_NR_putpmsg</name></expr>:</case>
        <goto pos:start="2261:9" pos:end="2264:0">goto <name pos:start="2261:14" pos:end="2261:26">unimplemented</name>;</goto>
<cpp:endif pos:start="2262:1" pos:end="2262:6">#<cpp:directive pos:start="2262:2" pos:end="2262:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2263:1" pos:end="2263:22">#<cpp:directive pos:start="2263:2" pos:end="2263:6">ifdef</cpp:directive> <name pos:start="2263:8" pos:end="2263:22">TARGET_NR_vfork</name></cpp:ifdef>
    <case pos:start="2264:5" pos:end="2264:25">case <expr pos:start="2264:10" pos:end="2264:24"><name pos:start="2264:10" pos:end="2264:24">TARGET_NR_vfork</name></expr>:</case>
        <expr_stmt pos:start="2265:9" pos:end="2269:0"><expr pos:start="2265:9" pos:end="2266:36"><name pos:start="2265:9" pos:end="2265:11">ret</name> <operator pos:start="2265:13" pos:end="2265:13">=</operator> <call pos:start="2265:15" pos:end="2266:36"><name pos:start="2265:15" pos:end="2265:23">get_errno</name><argument_list pos:start="2265:24" pos:end="2266:36">(<argument pos:start="2265:25" pos:end="2266:35"><expr pos:start="2265:25" pos:end="2266:35"><call pos:start="2265:25" pos:end="2266:35"><name pos:start="2265:25" pos:end="2265:31">do_fork</name><argument_list pos:start="2265:32" pos:end="2266:35">(<argument pos:start="2265:33" pos:end="2265:39"><expr pos:start="2265:33" pos:end="2265:39"><name pos:start="2265:33" pos:end="2265:39">cpu_env</name></expr></argument>, <argument pos:start="2265:42" pos:end="2265:73"><expr pos:start="2265:42" pos:end="2265:73"><name pos:start="2265:42" pos:end="2265:52">CLONE_VFORK</name> <operator pos:start="2265:54" pos:end="2265:54">|</operator> <name pos:start="2265:56" pos:end="2265:63">CLONE_VM</name> <operator pos:start="2265:65" pos:end="2265:65">|</operator> <name pos:start="2265:67" pos:end="2265:73">SIGCHLD</name></expr></argument>,
                        <argument pos:start="2266:25" pos:end="2266:25"><expr pos:start="2266:25" pos:end="2266:25"><literal type="number" pos:start="2266:25" pos:end="2266:25">0</literal></expr></argument>, <argument pos:start="2266:28" pos:end="2266:28"><expr pos:start="2266:28" pos:end="2266:28"><literal type="number" pos:start="2266:28" pos:end="2266:28">0</literal></expr></argument>, <argument pos:start="2266:31" pos:end="2266:31"><expr pos:start="2266:31" pos:end="2266:31"><literal type="number" pos:start="2266:31" pos:end="2266:31">0</literal></expr></argument>, <argument pos:start="2266:34" pos:end="2266:34"><expr pos:start="2266:34" pos:end="2266:34"><literal type="number" pos:start="2266:34" pos:end="2266:34">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2267:1" pos:end="2267:6">#<cpp:directive pos:start="2267:2" pos:end="2267:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2268:1" pos:end="2268:27">#<cpp:directive pos:start="2268:2" pos:end="2268:6">ifdef</cpp:directive> <name pos:start="2268:8" pos:end="2268:27">TARGET_NR_ugetrlimit</name></cpp:ifdef>
    <case pos:start="2269:5" pos:end="2269:30">case <expr pos:start="2269:10" pos:end="2269:29"><name pos:start="2269:10" pos:end="2269:29">TARGET_NR_ugetrlimit</name></expr>:</case>
    <block pos:start="2270:5" pos:end="3541:14">{<block_content pos:start="2271:9" pos:end="3541:14">
	<decl_stmt pos:start="2271:9" pos:end="2271:27"><decl pos:start="2271:9" pos:end="2271:26"><type pos:start="2271:9" pos:end="2271:21"><name pos:start="2271:9" pos:end="2271:21"><name pos:start="2271:9" pos:end="2271:14">struct</name> <name pos:start="2271:16" pos:end="2271:21">rlimit</name></name></type> <name pos:start="2271:23" pos:end="2271:26">rlim</name></decl>;</decl_stmt>
	<decl_stmt pos:start="2272:9" pos:end="2272:53"><decl pos:start="2272:9" pos:end="2272:52"><type pos:start="2272:9" pos:end="2272:11"><name pos:start="2272:9" pos:end="2272:11">int</name></type> <name pos:start="2272:13" pos:end="2272:20">resource</name> <init pos:start="2272:22" pos:end="2272:52">= <expr pos:start="2272:24" pos:end="2272:52"><call pos:start="2272:24" pos:end="2272:52"><name pos:start="2272:24" pos:end="2272:46">target_to_host_resource</name><argument_list pos:start="2272:47" pos:end="2272:52">(<argument pos:start="2272:48" pos:end="2272:51"><expr pos:start="2272:48" pos:end="2272:51"><name pos:start="2272:48" pos:end="2272:51">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt pos:start="2273:9" pos:end="2273:52"><expr pos:start="2273:9" pos:end="2273:51"><name pos:start="2273:9" pos:end="2273:11">ret</name> <operator pos:start="2273:13" pos:end="2273:13">=</operator> <call pos:start="2273:15" pos:end="2273:51"><name pos:start="2273:15" pos:end="2273:23">get_errno</name><argument_list pos:start="2273:24" pos:end="2273:51">(<argument pos:start="2273:25" pos:end="2273:50"><expr pos:start="2273:25" pos:end="2273:50"><call pos:start="2273:25" pos:end="2273:50"><name pos:start="2273:25" pos:end="2273:33">getrlimit</name><argument_list pos:start="2273:34" pos:end="2273:50">(<argument pos:start="2273:35" pos:end="2273:42"><expr pos:start="2273:35" pos:end="2273:42"><name pos:start="2273:35" pos:end="2273:42">resource</name></expr></argument>, <argument pos:start="2273:45" pos:end="2273:49"><expr pos:start="2273:45" pos:end="2273:49"><operator pos:start="2273:45" pos:end="2273:45">&amp;</operator><name pos:start="2273:46" pos:end="2273:49">rlim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="2274:9" pos:end="3541:14"><if pos:start="2274:9" pos:end="3541:14">if <condition pos:start="2274:12" pos:end="2274:27">(<expr pos:start="2274:13" pos:end="2274:26"><operator pos:start="2274:13" pos:end="2274:13">!</operator><call pos:start="2274:14" pos:end="2274:26"><name pos:start="2274:14" pos:end="2274:21">is_error</name><argument_list pos:start="2274:22" pos:end="2274:26">(<argument pos:start="2274:23" pos:end="2274:25"><expr pos:start="2274:23" pos:end="2274:25"><name pos:start="2274:23" pos:end="2274:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2274:29" pos:end="3541:14">{<block_content pos:start="2275:13" pos:end="3541:14">
	    <decl_stmt pos:start="2275:13" pos:end="2275:46"><decl pos:start="2275:13" pos:end="2275:45"><type pos:start="2275:13" pos:end="2275:34"><name pos:start="2275:13" pos:end="2275:32"><name pos:start="2275:13" pos:end="2275:18">struct</name> <name pos:start="2275:20" pos:end="2275:32">target_rlimit</name></name> <modifier pos:start="2275:34" pos:end="2275:34">*</modifier></type><name pos:start="2275:35" pos:end="2275:45">target_rlim</name></decl>;</decl_stmt>
            <if_stmt pos:start="2276:13" pos:end="2277:28"><if pos:start="2276:13" pos:end="2277:28">if <condition pos:start="2276:16" pos:end="2276:70">(<expr pos:start="2276:17" pos:end="2276:69"><operator pos:start="2276:17" pos:end="2276:17">!</operator><call pos:start="2276:18" pos:end="2276:69"><name pos:start="2276:18" pos:end="2276:33">lock_user_struct</name><argument_list pos:start="2276:34" pos:end="2276:69">(<argument pos:start="2276:35" pos:end="2276:46"><expr pos:start="2276:35" pos:end="2276:46"><name pos:start="2276:35" pos:end="2276:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2276:49" pos:end="2276:59"><expr pos:start="2276:49" pos:end="2276:59"><name pos:start="2276:49" pos:end="2276:59">target_rlim</name></expr></argument>, <argument pos:start="2276:62" pos:end="2276:65"><expr pos:start="2276:62" pos:end="2276:65"><name pos:start="2276:62" pos:end="2276:65">arg2</name></expr></argument>, <argument pos:start="2276:68" pos:end="2276:68"><expr pos:start="2276:68" pos:end="2276:68"><literal type="number" pos:start="2276:68" pos:end="2276:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2277:17" pos:end="2277:28"><block_content pos:start="2277:17" pos:end="2277:28">
                <goto pos:start="2277:17" pos:end="2277:28">goto <name pos:start="2277:22" pos:end="2277:27">efault</name>;</goto></block_content></block></if></if_stmt>
	    <expr_stmt pos:start="2278:13" pos:end="2278:71"><expr pos:start="2278:13" pos:end="2278:70"><name pos:start="2278:13" pos:end="2278:33"><name pos:start="2278:13" pos:end="2278:23">target_rlim</name><operator pos:start="2278:24" pos:end="2278:25">-&gt;</operator><name pos:start="2278:26" pos:end="2278:33">rlim_cur</name></name> <operator pos:start="2278:35" pos:end="2278:35">=</operator> <call pos:start="2278:37" pos:end="2278:70"><name pos:start="2278:37" pos:end="2278:55">host_to_target_rlim</name><argument_list pos:start="2278:56" pos:end="2278:70">(<argument pos:start="2278:57" pos:end="2278:69"><expr pos:start="2278:57" pos:end="2278:69"><name pos:start="2278:57" pos:end="2278:69"><name pos:start="2278:57" pos:end="2278:60">rlim</name><operator pos:start="2278:61" pos:end="2278:61">.</operator><name pos:start="2278:62" pos:end="2278:69">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="2279:13" pos:end="2279:71"><expr pos:start="2279:13" pos:end="2279:70"><name pos:start="2279:13" pos:end="2279:33"><name pos:start="2279:13" pos:end="2279:23">target_rlim</name><operator pos:start="2279:24" pos:end="2279:25">-&gt;</operator><name pos:start="2279:26" pos:end="2279:33">rlim_max</name></name> <operator pos:start="2279:35" pos:end="2279:35">=</operator> <call pos:start="2279:37" pos:end="2279:70"><name pos:start="2279:37" pos:end="2279:55">host_to_target_rlim</name><argument_list pos:start="2279:56" pos:end="2279:70">(<argument pos:start="2279:57" pos:end="2279:69"><expr pos:start="2279:57" pos:end="2279:69"><name pos:start="2279:57" pos:end="2279:69"><name pos:start="2279:57" pos:end="2279:60">rlim</name><operator pos:start="2279:61" pos:end="2279:61">.</operator><name pos:start="2279:62" pos:end="2279:69">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2280:13" pos:end="2283:0"><expr pos:start="2280:13" pos:end="2280:52"><call pos:start="2280:13" pos:end="2280:52"><name pos:start="2280:13" pos:end="2280:30">unlock_user_struct</name><argument_list pos:start="2280:31" pos:end="2280:52">(<argument pos:start="2280:32" pos:end="2280:42"><expr pos:start="2280:32" pos:end="2280:42"><name pos:start="2280:32" pos:end="2280:42">target_rlim</name></expr></argument>, <argument pos:start="2280:45" pos:end="2280:48"><expr pos:start="2280:45" pos:end="2280:48"><name pos:start="2280:45" pos:end="2280:48">arg2</name></expr></argument>, <argument pos:start="2280:51" pos:end="2280:51"><expr pos:start="2280:51" pos:end="2280:51"><literal type="number" pos:start="2280:51" pos:end="2280:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2281:1" pos:end="2281:6">#<cpp:directive pos:start="2281:2" pos:end="2281:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2282:1" pos:end="2282:27">#<cpp:directive pos:start="2282:2" pos:end="2282:6">ifdef</cpp:directive> <name pos:start="2282:8" pos:end="2282:27">TARGET_NR_truncate64</name></cpp:ifdef>
    <case pos:start="2283:5" pos:end="2283:30">case <expr pos:start="2283:10" pos:end="2283:29"><name pos:start="2283:10" pos:end="2283:29">TARGET_NR_truncate64</name></expr>:</case>
        <if_stmt pos:start="2284:9" pos:end="2285:24"><if pos:start="2284:9" pos:end="2285:24">if <condition pos:start="2284:12" pos:end="2284:42">(<expr pos:start="2284:13" pos:end="2284:41"><operator pos:start="2284:13" pos:end="2284:13">!</operator><operator pos:start="2284:14" pos:end="2284:14">(</operator><name pos:start="2284:15" pos:end="2284:15">p</name> <operator pos:start="2284:17" pos:end="2284:17">=</operator> <call pos:start="2284:19" pos:end="2284:40"><name pos:start="2284:19" pos:end="2284:34">lock_user_string</name><argument_list pos:start="2284:35" pos:end="2284:40">(<argument pos:start="2284:36" pos:end="2284:39"><expr pos:start="2284:36" pos:end="2284:39"><name pos:start="2284:36" pos:end="2284:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2284:41" pos:end="2284:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2285:13" pos:end="2285:24"><block_content pos:start="2285:13" pos:end="2285:24">
            <goto pos:start="2285:13" pos:end="2285:24">goto <name pos:start="2285:18" pos:end="2285:23">efault</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt pos:start="2286:9" pos:end="2286:62"><expr pos:start="2286:9" pos:end="2286:61"><name pos:start="2286:9" pos:end="2286:11">ret</name> <operator pos:start="2286:13" pos:end="2286:13">=</operator> <call pos:start="2286:15" pos:end="2286:61"><name pos:start="2286:15" pos:end="2286:31">target_truncate64</name><argument_list pos:start="2286:32" pos:end="2286:61">(<argument pos:start="2286:33" pos:end="2286:39"><expr pos:start="2286:33" pos:end="2286:39"><name pos:start="2286:33" pos:end="2286:39">cpu_env</name></expr></argument>, <argument pos:start="2286:42" pos:end="2286:42"><expr pos:start="2286:42" pos:end="2286:42"><name pos:start="2286:42" pos:end="2286:42">p</name></expr></argument>, <argument pos:start="2286:45" pos:end="2286:48"><expr pos:start="2286:45" pos:end="2286:48"><name pos:start="2286:45" pos:end="2286:48">arg2</name></expr></argument>, <argument pos:start="2286:51" pos:end="2286:54"><expr pos:start="2286:51" pos:end="2286:54"><name pos:start="2286:51" pos:end="2286:54">arg3</name></expr></argument>, <argument pos:start="2286:57" pos:end="2286:60"><expr pos:start="2286:57" pos:end="2286:60"><name pos:start="2286:57" pos:end="2286:60">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2287:9" pos:end="2290:0"><expr pos:start="2287:9" pos:end="2287:31"><call pos:start="2287:9" pos:end="2287:31"><name pos:start="2287:9" pos:end="2287:19">unlock_user</name><argument_list pos:start="2287:20" pos:end="2287:31">(<argument pos:start="2287:21" pos:end="2287:21"><expr pos:start="2287:21" pos:end="2287:21"><name pos:start="2287:21" pos:end="2287:21">p</name></expr></argument>, <argument pos:start="2287:24" pos:end="2287:27"><expr pos:start="2287:24" pos:end="2287:27"><name pos:start="2287:24" pos:end="2287:27">arg1</name></expr></argument>, <argument pos:start="2287:30" pos:end="2287:30"><expr pos:start="2287:30" pos:end="2287:30"><literal type="number" pos:start="2287:30" pos:end="2287:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2288:1" pos:end="2288:6">#<cpp:directive pos:start="2288:2" pos:end="2288:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2289:1" pos:end="2289:28">#<cpp:directive pos:start="2289:2" pos:end="2289:6">ifdef</cpp:directive> <name pos:start="2289:8" pos:end="2289:28">TARGET_NR_ftruncate64</name></cpp:ifdef>
    <case pos:start="2290:5" pos:end="2290:31">case <expr pos:start="2290:10" pos:end="2290:30"><name pos:start="2290:10" pos:end="2290:30">TARGET_NR_ftruncate64</name></expr>:</case>
	<expr_stmt pos:start="2291:9" pos:end="2294:0"><expr pos:start="2291:9" pos:end="2291:65"><name pos:start="2291:9" pos:end="2291:11">ret</name> <operator pos:start="2291:13" pos:end="2291:13">=</operator> <call pos:start="2291:15" pos:end="2291:65"><name pos:start="2291:15" pos:end="2291:32">target_ftruncate64</name><argument_list pos:start="2291:33" pos:end="2291:65">(<argument pos:start="2291:34" pos:end="2291:40"><expr pos:start="2291:34" pos:end="2291:40"><name pos:start="2291:34" pos:end="2291:40">cpu_env</name></expr></argument>, <argument pos:start="2291:43" pos:end="2291:46"><expr pos:start="2291:43" pos:end="2291:46"><name pos:start="2291:43" pos:end="2291:46">arg1</name></expr></argument>, <argument pos:start="2291:49" pos:end="2291:52"><expr pos:start="2291:49" pos:end="2291:52"><name pos:start="2291:49" pos:end="2291:52">arg2</name></expr></argument>, <argument pos:start="2291:55" pos:end="2291:58"><expr pos:start="2291:55" pos:end="2291:58"><name pos:start="2291:55" pos:end="2291:58">arg3</name></expr></argument>, <argument pos:start="2291:61" pos:end="2291:64"><expr pos:start="2291:61" pos:end="2291:64"><name pos:start="2291:61" pos:end="2291:64">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2292:1" pos:end="2292:6">#<cpp:directive pos:start="2292:2" pos:end="2292:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2293:1" pos:end="2293:23">#<cpp:directive pos:start="2293:2" pos:end="2293:6">ifdef</cpp:directive> <name pos:start="2293:8" pos:end="2293:23">TARGET_NR_stat64</name></cpp:ifdef>
    <case pos:start="2294:5" pos:end="2294:26">case <expr pos:start="2294:10" pos:end="2294:25"><name pos:start="2294:10" pos:end="2294:25">TARGET_NR_stat64</name></expr>:</case>
        <if_stmt pos:start="2295:9" pos:end="2296:24"><if pos:start="2295:9" pos:end="2296:24">if <condition pos:start="2295:12" pos:end="2295:42">(<expr pos:start="2295:13" pos:end="2295:41"><operator pos:start="2295:13" pos:end="2295:13">!</operator><operator pos:start="2295:14" pos:end="2295:14">(</operator><name pos:start="2295:15" pos:end="2295:15">p</name> <operator pos:start="2295:17" pos:end="2295:17">=</operator> <call pos:start="2295:19" pos:end="2295:40"><name pos:start="2295:19" pos:end="2295:34">lock_user_string</name><argument_list pos:start="2295:35" pos:end="2295:40">(<argument pos:start="2295:36" pos:end="2295:39"><expr pos:start="2295:36" pos:end="2295:39"><name pos:start="2295:36" pos:end="2295:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2295:41" pos:end="2295:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2296:13" pos:end="2296:24"><block_content pos:start="2296:13" pos:end="2296:24">
            <goto pos:start="2296:13" pos:end="2296:24">goto <name pos:start="2296:18" pos:end="2296:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2297:9" pos:end="2297:44"><expr pos:start="2297:9" pos:end="2297:43"><name pos:start="2297:9" pos:end="2297:11">ret</name> <operator pos:start="2297:13" pos:end="2297:13">=</operator> <call pos:start="2297:15" pos:end="2297:43"><name pos:start="2297:15" pos:end="2297:23">get_errno</name><argument_list pos:start="2297:24" pos:end="2297:43">(<argument pos:start="2297:25" pos:end="2297:42"><expr pos:start="2297:25" pos:end="2297:42"><call pos:start="2297:25" pos:end="2297:42"><name pos:start="2297:25" pos:end="2297:28">stat</name><argument_list pos:start="2297:29" pos:end="2297:42">(<argument pos:start="2297:30" pos:end="2297:36"><expr pos:start="2297:30" pos:end="2297:36"><call pos:start="2297:30" pos:end="2297:36"><name pos:start="2297:30" pos:end="2297:33">path</name><argument_list pos:start="2297:34" pos:end="2297:36">(<argument pos:start="2297:35" pos:end="2297:35"><expr pos:start="2297:35" pos:end="2297:35"><name pos:start="2297:35" pos:end="2297:35">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2297:39" pos:end="2297:41"><expr pos:start="2297:39" pos:end="2297:41"><operator pos:start="2297:39" pos:end="2297:39">&amp;</operator><name pos:start="2297:40" pos:end="2297:41">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2298:9" pos:end="2298:32"><expr pos:start="2298:9" pos:end="2298:31"><call pos:start="2298:9" pos:end="2298:31"><name pos:start="2298:9" pos:end="2298:19">unlock_user</name><argument_list pos:start="2298:20" pos:end="2298:31">(<argument pos:start="2298:21" pos:end="2298:21"><expr pos:start="2298:21" pos:end="2298:21"><name pos:start="2298:21" pos:end="2298:21">p</name></expr></argument>, <argument pos:start="2298:24" pos:end="2298:27"><expr pos:start="2298:24" pos:end="2298:27"><name pos:start="2298:24" pos:end="2298:27">arg1</name></expr></argument>, <argument pos:start="2298:30" pos:end="2298:30"><expr pos:start="2298:30" pos:end="2298:30"><literal type="number" pos:start="2298:30" pos:end="2298:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2299:9" pos:end="2303:0"><if pos:start="2299:9" pos:end="2303:0">if <condition pos:start="2299:12" pos:end="2299:27">(<expr pos:start="2299:13" pos:end="2299:26"><operator pos:start="2299:13" pos:end="2299:13">!</operator><call pos:start="2299:14" pos:end="2299:26"><name pos:start="2299:14" pos:end="2299:21">is_error</name><argument_list pos:start="2299:22" pos:end="2299:26">(<argument pos:start="2299:23" pos:end="2299:25"><expr pos:start="2299:23" pos:end="2299:25"><name pos:start="2299:23" pos:end="2299:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2300:13" pos:end="2303:0"><block_content pos:start="2300:13" pos:end="2303:0">
            <expr_stmt pos:start="2300:13" pos:end="2303:0"><expr pos:start="2300:13" pos:end="2300:59"><name pos:start="2300:13" pos:end="2300:15">ret</name> <operator pos:start="2300:17" pos:end="2300:17">=</operator> <call pos:start="2300:19" pos:end="2300:59"><name pos:start="2300:19" pos:end="2300:39">host_to_target_stat64</name><argument_list pos:start="2300:40" pos:end="2300:59">(<argument pos:start="2300:41" pos:end="2300:47"><expr pos:start="2300:41" pos:end="2300:47"><name pos:start="2300:41" pos:end="2300:47">cpu_env</name></expr></argument>, <argument pos:start="2300:50" pos:end="2300:53"><expr pos:start="2300:50" pos:end="2300:53"><name pos:start="2300:50" pos:end="2300:53">arg2</name></expr></argument>, <argument pos:start="2300:56" pos:end="2300:58"><expr pos:start="2300:56" pos:end="2300:58"><operator pos:start="2300:56" pos:end="2300:56">&amp;</operator><name pos:start="2300:57" pos:end="2300:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="2301:1" pos:end="2301:6">#<cpp:directive pos:start="2301:2" pos:end="2301:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2302:1" pos:end="2302:24">#<cpp:directive pos:start="2302:2" pos:end="2302:6">ifdef</cpp:directive> <name pos:start="2302:8" pos:end="2302:24">TARGET_NR_lstat64</name></cpp:ifdef>
    <case pos:start="2303:5" pos:end="2303:27">case <expr pos:start="2303:10" pos:end="2303:26"><name pos:start="2303:10" pos:end="2303:26">TARGET_NR_lstat64</name></expr>:</case>
        <if_stmt pos:start="2304:9" pos:end="2305:24"><if pos:start="2304:9" pos:end="2305:24">if <condition pos:start="2304:12" pos:end="2304:42">(<expr pos:start="2304:13" pos:end="2304:41"><operator pos:start="2304:13" pos:end="2304:13">!</operator><operator pos:start="2304:14" pos:end="2304:14">(</operator><name pos:start="2304:15" pos:end="2304:15">p</name> <operator pos:start="2304:17" pos:end="2304:17">=</operator> <call pos:start="2304:19" pos:end="2304:40"><name pos:start="2304:19" pos:end="2304:34">lock_user_string</name><argument_list pos:start="2304:35" pos:end="2304:40">(<argument pos:start="2304:36" pos:end="2304:39"><expr pos:start="2304:36" pos:end="2304:39"><name pos:start="2304:36" pos:end="2304:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2304:41" pos:end="2304:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2305:13" pos:end="2305:24"><block_content pos:start="2305:13" pos:end="2305:24">
            <goto pos:start="2305:13" pos:end="2305:24">goto <name pos:start="2305:18" pos:end="2305:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2306:9" pos:end="2306:45"><expr pos:start="2306:9" pos:end="2306:44"><name pos:start="2306:9" pos:end="2306:11">ret</name> <operator pos:start="2306:13" pos:end="2306:13">=</operator> <call pos:start="2306:15" pos:end="2306:44"><name pos:start="2306:15" pos:end="2306:23">get_errno</name><argument_list pos:start="2306:24" pos:end="2306:44">(<argument pos:start="2306:25" pos:end="2306:43"><expr pos:start="2306:25" pos:end="2306:43"><call pos:start="2306:25" pos:end="2306:43"><name pos:start="2306:25" pos:end="2306:29">lstat</name><argument_list pos:start="2306:30" pos:end="2306:43">(<argument pos:start="2306:31" pos:end="2306:37"><expr pos:start="2306:31" pos:end="2306:37"><call pos:start="2306:31" pos:end="2306:37"><name pos:start="2306:31" pos:end="2306:34">path</name><argument_list pos:start="2306:35" pos:end="2306:37">(<argument pos:start="2306:36" pos:end="2306:36"><expr pos:start="2306:36" pos:end="2306:36"><name pos:start="2306:36" pos:end="2306:36">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2306:40" pos:end="2306:42"><expr pos:start="2306:40" pos:end="2306:42"><operator pos:start="2306:40" pos:end="2306:40">&amp;</operator><name pos:start="2306:41" pos:end="2306:42">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2307:9" pos:end="2307:32"><expr pos:start="2307:9" pos:end="2307:31"><call pos:start="2307:9" pos:end="2307:31"><name pos:start="2307:9" pos:end="2307:19">unlock_user</name><argument_list pos:start="2307:20" pos:end="2307:31">(<argument pos:start="2307:21" pos:end="2307:21"><expr pos:start="2307:21" pos:end="2307:21"><name pos:start="2307:21" pos:end="2307:21">p</name></expr></argument>, <argument pos:start="2307:24" pos:end="2307:27"><expr pos:start="2307:24" pos:end="2307:27"><name pos:start="2307:24" pos:end="2307:27">arg1</name></expr></argument>, <argument pos:start="2307:30" pos:end="2307:30"><expr pos:start="2307:30" pos:end="2307:30"><literal type="number" pos:start="2307:30" pos:end="2307:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2308:9" pos:end="2312:0"><if pos:start="2308:9" pos:end="2312:0">if <condition pos:start="2308:12" pos:end="2308:27">(<expr pos:start="2308:13" pos:end="2308:26"><operator pos:start="2308:13" pos:end="2308:13">!</operator><call pos:start="2308:14" pos:end="2308:26"><name pos:start="2308:14" pos:end="2308:21">is_error</name><argument_list pos:start="2308:22" pos:end="2308:26">(<argument pos:start="2308:23" pos:end="2308:25"><expr pos:start="2308:23" pos:end="2308:25"><name pos:start="2308:23" pos:end="2308:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2309:13" pos:end="2312:0"><block_content pos:start="2309:13" pos:end="2312:0">
            <expr_stmt pos:start="2309:13" pos:end="2312:0"><expr pos:start="2309:13" pos:end="2309:59"><name pos:start="2309:13" pos:end="2309:15">ret</name> <operator pos:start="2309:17" pos:end="2309:17">=</operator> <call pos:start="2309:19" pos:end="2309:59"><name pos:start="2309:19" pos:end="2309:39">host_to_target_stat64</name><argument_list pos:start="2309:40" pos:end="2309:59">(<argument pos:start="2309:41" pos:end="2309:47"><expr pos:start="2309:41" pos:end="2309:47"><name pos:start="2309:41" pos:end="2309:47">cpu_env</name></expr></argument>, <argument pos:start="2309:50" pos:end="2309:53"><expr pos:start="2309:50" pos:end="2309:53"><name pos:start="2309:50" pos:end="2309:53">arg2</name></expr></argument>, <argument pos:start="2309:56" pos:end="2309:58"><expr pos:start="2309:56" pos:end="2309:58"><operator pos:start="2309:56" pos:end="2309:56">&amp;</operator><name pos:start="2309:57" pos:end="2309:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="2310:1" pos:end="2310:6">#<cpp:directive pos:start="2310:2" pos:end="2310:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2311:1" pos:end="2311:24">#<cpp:directive pos:start="2311:2" pos:end="2311:6">ifdef</cpp:directive> <name pos:start="2311:8" pos:end="2311:24">TARGET_NR_fstat64</name></cpp:ifdef>
    <case pos:start="2312:5" pos:end="2312:27">case <expr pos:start="2312:10" pos:end="2312:26"><name pos:start="2312:10" pos:end="2312:26">TARGET_NR_fstat64</name></expr>:</case>
        <expr_stmt pos:start="2313:9" pos:end="2313:42"><expr pos:start="2313:9" pos:end="2313:41"><name pos:start="2313:9" pos:end="2313:11">ret</name> <operator pos:start="2313:13" pos:end="2313:13">=</operator> <call pos:start="2313:15" pos:end="2313:41"><name pos:start="2313:15" pos:end="2313:23">get_errno</name><argument_list pos:start="2313:24" pos:end="2313:41">(<argument pos:start="2313:25" pos:end="2313:40"><expr pos:start="2313:25" pos:end="2313:40"><call pos:start="2313:25" pos:end="2313:40"><name pos:start="2313:25" pos:end="2313:29">fstat</name><argument_list pos:start="2313:30" pos:end="2313:40">(<argument pos:start="2313:31" pos:end="2313:34"><expr pos:start="2313:31" pos:end="2313:34"><name pos:start="2313:31" pos:end="2313:34">arg1</name></expr></argument>, <argument pos:start="2313:37" pos:end="2313:39"><expr pos:start="2313:37" pos:end="2313:39"><operator pos:start="2313:37" pos:end="2313:37">&amp;</operator><name pos:start="2313:38" pos:end="2313:39">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2314:9" pos:end="2319:0"><if pos:start="2314:9" pos:end="2319:0">if <condition pos:start="2314:12" pos:end="2314:27">(<expr pos:start="2314:13" pos:end="2314:26"><operator pos:start="2314:13" pos:end="2314:13">!</operator><call pos:start="2314:14" pos:end="2314:26"><name pos:start="2314:14" pos:end="2314:21">is_error</name><argument_list pos:start="2314:22" pos:end="2314:26">(<argument pos:start="2314:23" pos:end="2314:25"><expr pos:start="2314:23" pos:end="2314:25"><name pos:start="2314:23" pos:end="2314:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2315:13" pos:end="2319:0"><block_content pos:start="2315:13" pos:end="2319:0">
            <expr_stmt pos:start="2315:13" pos:end="2319:0"><expr pos:start="2315:13" pos:end="2315:59"><name pos:start="2315:13" pos:end="2315:15">ret</name> <operator pos:start="2315:17" pos:end="2315:17">=</operator> <call pos:start="2315:19" pos:end="2315:59"><name pos:start="2315:19" pos:end="2315:39">host_to_target_stat64</name><argument_list pos:start="2315:40" pos:end="2315:59">(<argument pos:start="2315:41" pos:end="2315:47"><expr pos:start="2315:41" pos:end="2315:47"><name pos:start="2315:41" pos:end="2315:47">cpu_env</name></expr></argument>, <argument pos:start="2315:50" pos:end="2315:53"><expr pos:start="2315:50" pos:end="2315:53"><name pos:start="2315:50" pos:end="2315:53">arg2</name></expr></argument>, <argument pos:start="2315:56" pos:end="2315:58"><expr pos:start="2315:56" pos:end="2315:58"><operator pos:start="2315:56" pos:end="2315:56">&amp;</operator><name pos:start="2315:57" pos:end="2315:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="2316:1" pos:end="2316:6">#<cpp:directive pos:start="2316:2" pos:end="2316:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="2317:1" pos:end="2317:67">#<cpp:directive pos:start="2317:2" pos:end="2317:3">if</cpp:directive> <expr pos:start="2317:5" pos:end="2317:67"><operator pos:start="2317:5" pos:end="2317:5">(</operator><call pos:start="2317:6" pos:end="2317:33"><name pos:start="2317:6" pos:end="2317:12">defined</name><argument_list pos:start="2317:13" pos:end="2317:33">(<argument pos:start="2317:14" pos:end="2317:32"><expr pos:start="2317:14" pos:end="2317:32"><name pos:start="2317:14" pos:end="2317:32">TARGET_NR_fstatat64</name></expr></argument>)</argument_list></call> <operator pos:start="2317:35" pos:end="2317:36">||</operator> <call pos:start="2317:38" pos:end="2317:66"><name pos:start="2317:38" pos:end="2317:44">defined</name><argument_list pos:start="2317:45" pos:end="2317:66">(<argument pos:start="2317:46" pos:end="2317:65"><expr pos:start="2317:46" pos:end="2317:65"><name pos:start="2317:46" pos:end="2317:65">TARGET_NR_newfstatat</name></expr></argument>)</argument_list></call><operator pos:start="2317:67" pos:end="2317:67">)</operator></expr></cpp:if>
<cpp:ifdef pos:start="2318:1" pos:end="2318:26">#<cpp:directive pos:start="2318:2" pos:end="2318:6">ifdef</cpp:directive> <name pos:start="2318:8" pos:end="2318:26">TARGET_NR_fstatat64</name></cpp:ifdef>
    <case pos:start="2319:5" pos:end="2322:0">case <expr pos:start="2319:10" pos:end="2319:28"><name pos:start="2319:10" pos:end="2319:28">TARGET_NR_fstatat64</name></expr>:</case>
<cpp:endif pos:start="2320:1" pos:end="2320:6">#<cpp:directive pos:start="2320:2" pos:end="2320:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2321:1" pos:end="2321:27">#<cpp:directive pos:start="2321:2" pos:end="2321:6">ifdef</cpp:directive> <name pos:start="2321:8" pos:end="2321:27">TARGET_NR_newfstatat</name></cpp:ifdef>
    <case pos:start="2322:5" pos:end="2324:0">case <expr pos:start="2322:10" pos:end="2322:29"><name pos:start="2322:10" pos:end="2322:29">TARGET_NR_newfstatat</name></expr>:</case>
<cpp:endif pos:start="2323:1" pos:end="2323:6">#<cpp:directive pos:start="2323:2" pos:end="2323:6">endif</cpp:directive></cpp:endif>
        <if_stmt pos:start="2324:9" pos:end="2325:24"><if pos:start="2324:9" pos:end="2325:24">if <condition pos:start="2324:12" pos:end="2324:42">(<expr pos:start="2324:13" pos:end="2324:41"><operator pos:start="2324:13" pos:end="2324:13">!</operator><operator pos:start="2324:14" pos:end="2324:14">(</operator><name pos:start="2324:15" pos:end="2324:15">p</name> <operator pos:start="2324:17" pos:end="2324:17">=</operator> <call pos:start="2324:19" pos:end="2324:40"><name pos:start="2324:19" pos:end="2324:34">lock_user_string</name><argument_list pos:start="2324:35" pos:end="2324:40">(<argument pos:start="2324:36" pos:end="2324:39"><expr pos:start="2324:36" pos:end="2324:39"><name pos:start="2324:36" pos:end="2324:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="2324:41" pos:end="2324:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2325:13" pos:end="2325:24"><block_content pos:start="2325:13" pos:end="2325:24">
            <goto pos:start="2325:13" pos:end="2325:24">goto <name pos:start="2325:18" pos:end="2325:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2326:9" pos:end="2326:59"><expr pos:start="2326:9" pos:end="2326:58"><name pos:start="2326:9" pos:end="2326:11">ret</name> <operator pos:start="2326:13" pos:end="2326:13">=</operator> <call pos:start="2326:15" pos:end="2326:58"><name pos:start="2326:15" pos:end="2326:23">get_errno</name><argument_list pos:start="2326:24" pos:end="2326:58">(<argument pos:start="2326:25" pos:end="2326:57"><expr pos:start="2326:25" pos:end="2326:57"><call pos:start="2326:25" pos:end="2326:57"><name pos:start="2326:25" pos:end="2326:31">fstatat</name><argument_list pos:start="2326:32" pos:end="2326:57">(<argument pos:start="2326:33" pos:end="2326:36"><expr pos:start="2326:33" pos:end="2326:36"><name pos:start="2326:33" pos:end="2326:36">arg1</name></expr></argument>, <argument pos:start="2326:39" pos:end="2326:45"><expr pos:start="2326:39" pos:end="2326:45"><call pos:start="2326:39" pos:end="2326:45"><name pos:start="2326:39" pos:end="2326:42">path</name><argument_list pos:start="2326:43" pos:end="2326:45">(<argument pos:start="2326:44" pos:end="2326:44"><expr pos:start="2326:44" pos:end="2326:44"><name pos:start="2326:44" pos:end="2326:44">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2326:48" pos:end="2326:50"><expr pos:start="2326:48" pos:end="2326:50"><operator pos:start="2326:48" pos:end="2326:48">&amp;</operator><name pos:start="2326:49" pos:end="2326:50">st</name></expr></argument>, <argument pos:start="2326:53" pos:end="2326:56"><expr pos:start="2326:53" pos:end="2326:56"><name pos:start="2326:53" pos:end="2326:56">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2327:9" pos:end="2331:0"><if pos:start="2327:9" pos:end="2331:0">if <condition pos:start="2327:12" pos:end="2327:27">(<expr pos:start="2327:13" pos:end="2327:26"><operator pos:start="2327:13" pos:end="2327:13">!</operator><call pos:start="2327:14" pos:end="2327:26"><name pos:start="2327:14" pos:end="2327:21">is_error</name><argument_list pos:start="2327:22" pos:end="2327:26">(<argument pos:start="2327:23" pos:end="2327:25"><expr pos:start="2327:23" pos:end="2327:25"><name pos:start="2327:23" pos:end="2327:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2328:13" pos:end="2331:0"><block_content pos:start="2328:13" pos:end="2331:0">
            <expr_stmt pos:start="2328:13" pos:end="2331:0"><expr pos:start="2328:13" pos:end="2328:59"><name pos:start="2328:13" pos:end="2328:15">ret</name> <operator pos:start="2328:17" pos:end="2328:17">=</operator> <call pos:start="2328:19" pos:end="2328:59"><name pos:start="2328:19" pos:end="2328:39">host_to_target_stat64</name><argument_list pos:start="2328:40" pos:end="2328:59">(<argument pos:start="2328:41" pos:end="2328:47"><expr pos:start="2328:41" pos:end="2328:47"><name pos:start="2328:41" pos:end="2328:47">cpu_env</name></expr></argument>, <argument pos:start="2328:50" pos:end="2328:53"><expr pos:start="2328:50" pos:end="2328:53"><name pos:start="2328:50" pos:end="2328:53">arg3</name></expr></argument>, <argument pos:start="2328:56" pos:end="2328:58"><expr pos:start="2328:56" pos:end="2328:58"><operator pos:start="2328:56" pos:end="2328:56">&amp;</operator><name pos:start="2328:57" pos:end="2328:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="2329:1" pos:end="2329:6">#<cpp:directive pos:start="2329:2" pos:end="2329:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2330:1" pos:end="2330:23">#<cpp:directive pos:start="2330:2" pos:end="2330:6">ifdef</cpp:directive> <name pos:start="2330:8" pos:end="2330:23">TARGET_NR_lchown</name></cpp:ifdef>
    <case pos:start="2331:5" pos:end="2331:26">case <expr pos:start="2331:10" pos:end="2331:25"><name pos:start="2331:10" pos:end="2331:25">TARGET_NR_lchown</name></expr>:</case>
        <if_stmt pos:start="2332:9" pos:end="2333:24"><if pos:start="2332:9" pos:end="2333:24">if <condition pos:start="2332:12" pos:end="2332:42">(<expr pos:start="2332:13" pos:end="2332:41"><operator pos:start="2332:13" pos:end="2332:13">!</operator><operator pos:start="2332:14" pos:end="2332:14">(</operator><name pos:start="2332:15" pos:end="2332:15">p</name> <operator pos:start="2332:17" pos:end="2332:17">=</operator> <call pos:start="2332:19" pos:end="2332:40"><name pos:start="2332:19" pos:end="2332:34">lock_user_string</name><argument_list pos:start="2332:35" pos:end="2332:40">(<argument pos:start="2332:36" pos:end="2332:39"><expr pos:start="2332:36" pos:end="2332:39"><name pos:start="2332:36" pos:end="2332:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2332:41" pos:end="2332:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2333:13" pos:end="2333:24"><block_content pos:start="2333:13" pos:end="2333:24">
            <goto pos:start="2333:13" pos:end="2333:24">goto <name pos:start="2333:18" pos:end="2333:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2334:9" pos:end="2334:73"><expr pos:start="2334:9" pos:end="2334:72"><name pos:start="2334:9" pos:end="2334:11">ret</name> <operator pos:start="2334:13" pos:end="2334:13">=</operator> <call pos:start="2334:15" pos:end="2334:72"><name pos:start="2334:15" pos:end="2334:23">get_errno</name><argument_list pos:start="2334:24" pos:end="2334:72">(<argument pos:start="2334:25" pos:end="2334:71"><expr pos:start="2334:25" pos:end="2334:71"><call pos:start="2334:25" pos:end="2334:71"><name pos:start="2334:25" pos:end="2334:30">lchown</name><argument_list pos:start="2334:31" pos:end="2334:71">(<argument pos:start="2334:32" pos:end="2334:32"><expr pos:start="2334:32" pos:end="2334:32"><name pos:start="2334:32" pos:end="2334:32">p</name></expr></argument>, <argument pos:start="2334:35" pos:end="2334:51"><expr pos:start="2334:35" pos:end="2334:51"><call pos:start="2334:35" pos:end="2334:51"><name pos:start="2334:35" pos:end="2334:45">low2highuid</name><argument_list pos:start="2334:46" pos:end="2334:51">(<argument pos:start="2334:47" pos:end="2334:50"><expr pos:start="2334:47" pos:end="2334:50"><name pos:start="2334:47" pos:end="2334:50">arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2334:54" pos:end="2334:70"><expr pos:start="2334:54" pos:end="2334:70"><call pos:start="2334:54" pos:end="2334:70"><name pos:start="2334:54" pos:end="2334:64">low2highgid</name><argument_list pos:start="2334:65" pos:end="2334:70">(<argument pos:start="2334:66" pos:end="2334:69"><expr pos:start="2334:66" pos:end="2334:69"><name pos:start="2334:66" pos:end="2334:69">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2335:9" pos:end="2338:0"><expr pos:start="2335:9" pos:end="2335:31"><call pos:start="2335:9" pos:end="2335:31"><name pos:start="2335:9" pos:end="2335:19">unlock_user</name><argument_list pos:start="2335:20" pos:end="2335:31">(<argument pos:start="2335:21" pos:end="2335:21"><expr pos:start="2335:21" pos:end="2335:21"><name pos:start="2335:21" pos:end="2335:21">p</name></expr></argument>, <argument pos:start="2335:24" pos:end="2335:27"><expr pos:start="2335:24" pos:end="2335:27"><name pos:start="2335:24" pos:end="2335:27">arg1</name></expr></argument>, <argument pos:start="2335:30" pos:end="2335:30"><expr pos:start="2335:30" pos:end="2335:30"><literal type="number" pos:start="2335:30" pos:end="2335:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2336:1" pos:end="2336:6">#<cpp:directive pos:start="2336:2" pos:end="2336:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2337:1" pos:end="2337:23">#<cpp:directive pos:start="2337:2" pos:end="2337:6">ifdef</cpp:directive> <name pos:start="2337:8" pos:end="2337:23">TARGET_NR_getuid</name></cpp:ifdef>
    <case pos:start="2338:5" pos:end="2338:26">case <expr pos:start="2338:10" pos:end="2338:25"><name pos:start="2338:10" pos:end="2338:25">TARGET_NR_getuid</name></expr>:</case>
        <expr_stmt pos:start="2339:9" pos:end="2342:0"><expr pos:start="2339:9" pos:end="2339:46"><name pos:start="2339:9" pos:end="2339:11">ret</name> <operator pos:start="2339:13" pos:end="2339:13">=</operator> <call pos:start="2339:15" pos:end="2339:46"><name pos:start="2339:15" pos:end="2339:23">get_errno</name><argument_list pos:start="2339:24" pos:end="2339:46">(<argument pos:start="2339:25" pos:end="2339:45"><expr pos:start="2339:25" pos:end="2339:45"><call pos:start="2339:25" pos:end="2339:45"><name pos:start="2339:25" pos:end="2339:35">high2lowuid</name><argument_list pos:start="2339:36" pos:end="2339:45">(<argument pos:start="2339:37" pos:end="2339:44"><expr pos:start="2339:37" pos:end="2339:44"><call pos:start="2339:37" pos:end="2339:44"><name pos:start="2339:37" pos:end="2339:42">getuid</name><argument_list pos:start="2339:43" pos:end="2339:44">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2340:1" pos:end="2340:6">#<cpp:directive pos:start="2340:2" pos:end="2340:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2341:1" pos:end="2341:23">#<cpp:directive pos:start="2341:2" pos:end="2341:6">ifdef</cpp:directive> <name pos:start="2341:8" pos:end="2341:23">TARGET_NR_getgid</name></cpp:ifdef>
    <case pos:start="2342:5" pos:end="2342:26">case <expr pos:start="2342:10" pos:end="2342:25"><name pos:start="2342:10" pos:end="2342:25">TARGET_NR_getgid</name></expr>:</case>
        <expr_stmt pos:start="2343:9" pos:end="2346:0"><expr pos:start="2343:9" pos:end="2343:46"><name pos:start="2343:9" pos:end="2343:11">ret</name> <operator pos:start="2343:13" pos:end="2343:13">=</operator> <call pos:start="2343:15" pos:end="2343:46"><name pos:start="2343:15" pos:end="2343:23">get_errno</name><argument_list pos:start="2343:24" pos:end="2343:46">(<argument pos:start="2343:25" pos:end="2343:45"><expr pos:start="2343:25" pos:end="2343:45"><call pos:start="2343:25" pos:end="2343:45"><name pos:start="2343:25" pos:end="2343:35">high2lowgid</name><argument_list pos:start="2343:36" pos:end="2343:45">(<argument pos:start="2343:37" pos:end="2343:44"><expr pos:start="2343:37" pos:end="2343:44"><call pos:start="2343:37" pos:end="2343:44"><name pos:start="2343:37" pos:end="2343:42">getgid</name><argument_list pos:start="2343:43" pos:end="2343:44">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2344:1" pos:end="2344:6">#<cpp:directive pos:start="2344:2" pos:end="2344:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2345:1" pos:end="2345:24">#<cpp:directive pos:start="2345:2" pos:end="2345:6">ifdef</cpp:directive> <name pos:start="2345:8" pos:end="2345:24">TARGET_NR_geteuid</name></cpp:ifdef>
    <case pos:start="2346:5" pos:end="2346:27">case <expr pos:start="2346:10" pos:end="2346:26"><name pos:start="2346:10" pos:end="2346:26">TARGET_NR_geteuid</name></expr>:</case>
        <expr_stmt pos:start="2347:9" pos:end="2350:0"><expr pos:start="2347:9" pos:end="2347:47"><name pos:start="2347:9" pos:end="2347:11">ret</name> <operator pos:start="2347:13" pos:end="2347:13">=</operator> <call pos:start="2347:15" pos:end="2347:47"><name pos:start="2347:15" pos:end="2347:23">get_errno</name><argument_list pos:start="2347:24" pos:end="2347:47">(<argument pos:start="2347:25" pos:end="2347:46"><expr pos:start="2347:25" pos:end="2347:46"><call pos:start="2347:25" pos:end="2347:46"><name pos:start="2347:25" pos:end="2347:35">high2lowuid</name><argument_list pos:start="2347:36" pos:end="2347:46">(<argument pos:start="2347:37" pos:end="2347:45"><expr pos:start="2347:37" pos:end="2347:45"><call pos:start="2347:37" pos:end="2347:45"><name pos:start="2347:37" pos:end="2347:43">geteuid</name><argument_list pos:start="2347:44" pos:end="2347:45">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2348:1" pos:end="2348:6">#<cpp:directive pos:start="2348:2" pos:end="2348:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2349:1" pos:end="2349:24">#<cpp:directive pos:start="2349:2" pos:end="2349:6">ifdef</cpp:directive> <name pos:start="2349:8" pos:end="2349:24">TARGET_NR_getegid</name></cpp:ifdef>
    <case pos:start="2350:5" pos:end="2350:27">case <expr pos:start="2350:10" pos:end="2350:26"><name pos:start="2350:10" pos:end="2350:26">TARGET_NR_getegid</name></expr>:</case>
        <expr_stmt pos:start="2351:9" pos:end="2353:0"><expr pos:start="2351:9" pos:end="2351:47"><name pos:start="2351:9" pos:end="2351:11">ret</name> <operator pos:start="2351:13" pos:end="2351:13">=</operator> <call pos:start="2351:15" pos:end="2351:47"><name pos:start="2351:15" pos:end="2351:23">get_errno</name><argument_list pos:start="2351:24" pos:end="2351:47">(<argument pos:start="2351:25" pos:end="2351:46"><expr pos:start="2351:25" pos:end="2351:46"><call pos:start="2351:25" pos:end="2351:46"><name pos:start="2351:25" pos:end="2351:35">high2lowgid</name><argument_list pos:start="2351:36" pos:end="2351:46">(<argument pos:start="2351:37" pos:end="2351:45"><expr pos:start="2351:37" pos:end="2351:45"><call pos:start="2351:37" pos:end="2351:45"><name pos:start="2351:37" pos:end="2351:43">getegid</name><argument_list pos:start="2351:44" pos:end="2351:45">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2352:1" pos:end="2352:6">#<cpp:directive pos:start="2352:2" pos:end="2352:6">endif</cpp:directive></cpp:endif>
    <case pos:start="2353:5" pos:end="2353:28">case <expr pos:start="2353:10" pos:end="2353:27"><name pos:start="2353:10" pos:end="2353:27">TARGET_NR_setreuid</name></expr>:</case>
        <expr_stmt pos:start="2354:9" pos:end="2354:72"><expr pos:start="2354:9" pos:end="2354:71"><name pos:start="2354:9" pos:end="2354:11">ret</name> <operator pos:start="2354:13" pos:end="2354:13">=</operator> <call pos:start="2354:15" pos:end="2354:71"><name pos:start="2354:15" pos:end="2354:23">get_errno</name><argument_list pos:start="2354:24" pos:end="2354:71">(<argument pos:start="2354:25" pos:end="2354:70"><expr pos:start="2354:25" pos:end="2354:70"><call pos:start="2354:25" pos:end="2354:70"><name pos:start="2354:25" pos:end="2354:32">setreuid</name><argument_list pos:start="2354:33" pos:end="2354:70">(<argument pos:start="2354:34" pos:end="2354:50"><expr pos:start="2354:34" pos:end="2354:50"><call pos:start="2354:34" pos:end="2354:50"><name pos:start="2354:34" pos:end="2354:44">low2highuid</name><argument_list pos:start="2354:45" pos:end="2354:50">(<argument pos:start="2354:46" pos:end="2354:49"><expr pos:start="2354:46" pos:end="2354:49"><name pos:start="2354:46" pos:end="2354:49">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2354:53" pos:end="2354:69"><expr pos:start="2354:53" pos:end="2354:69"><call pos:start="2354:53" pos:end="2354:69"><name pos:start="2354:53" pos:end="2354:63">low2highuid</name><argument_list pos:start="2354:64" pos:end="2354:69">(<argument pos:start="2354:65" pos:end="2354:68"><expr pos:start="2354:65" pos:end="2354:68"><name pos:start="2354:65" pos:end="2354:68">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2355:5" pos:end="2355:28">case <expr pos:start="2355:10" pos:end="2355:27"><name pos:start="2355:10" pos:end="2355:27">TARGET_NR_setregid</name></expr>:</case>
        <expr_stmt pos:start="2356:9" pos:end="2356:72"><expr pos:start="2356:9" pos:end="2356:71"><name pos:start="2356:9" pos:end="2356:11">ret</name> <operator pos:start="2356:13" pos:end="2356:13">=</operator> <call pos:start="2356:15" pos:end="2356:71"><name pos:start="2356:15" pos:end="2356:23">get_errno</name><argument_list pos:start="2356:24" pos:end="2356:71">(<argument pos:start="2356:25" pos:end="2356:70"><expr pos:start="2356:25" pos:end="2356:70"><call pos:start="2356:25" pos:end="2356:70"><name pos:start="2356:25" pos:end="2356:32">setregid</name><argument_list pos:start="2356:33" pos:end="2356:70">(<argument pos:start="2356:34" pos:end="2356:50"><expr pos:start="2356:34" pos:end="2356:50"><call pos:start="2356:34" pos:end="2356:50"><name pos:start="2356:34" pos:end="2356:44">low2highgid</name><argument_list pos:start="2356:45" pos:end="2356:50">(<argument pos:start="2356:46" pos:end="2356:49"><expr pos:start="2356:46" pos:end="2356:49"><name pos:start="2356:46" pos:end="2356:49">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2356:53" pos:end="2356:69"><expr pos:start="2356:53" pos:end="2356:69"><call pos:start="2356:53" pos:end="2356:69"><name pos:start="2356:53" pos:end="2356:63">low2highgid</name><argument_list pos:start="2356:64" pos:end="2356:69">(<argument pos:start="2356:65" pos:end="2356:68"><expr pos:start="2356:65" pos:end="2356:68"><name pos:start="2356:65" pos:end="2356:68">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2357:5" pos:end="2357:29">case <expr pos:start="2357:10" pos:end="2357:28"><name pos:start="2357:10" pos:end="2357:28">TARGET_NR_getgroups</name></expr>:</case>
        <block pos:start="2358:9" pos:end="3541:14">{<block_content pos:start="2359:13" pos:end="3541:14">
            <decl_stmt pos:start="2359:13" pos:end="2359:34"><decl pos:start="2359:13" pos:end="2359:33"><type pos:start="2359:13" pos:end="2359:15"><name pos:start="2359:13" pos:end="2359:15">int</name></type> <name pos:start="2359:17" pos:end="2359:26">gidsetsize</name> <init pos:start="2359:28" pos:end="2359:33">= <expr pos:start="2359:30" pos:end="2359:33"><name pos:start="2359:30" pos:end="2359:33">arg1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2360:13" pos:end="2360:40"><decl pos:start="2360:13" pos:end="2360:39"><type pos:start="2360:13" pos:end="2360:23"><name pos:start="2360:13" pos:end="2360:21">target_id</name> <modifier pos:start="2360:23" pos:end="2360:23">*</modifier></type><name pos:start="2360:24" pos:end="2360:39">target_grouplist</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2361:13" pos:end="2361:29"><decl pos:start="2361:13" pos:end="2361:28"><type pos:start="2361:13" pos:end="2361:19"><name pos:start="2361:13" pos:end="2361:17">gid_t</name> <modifier pos:start="2361:19" pos:end="2361:19">*</modifier></type><name pos:start="2361:20" pos:end="2361:28">grouplist</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2362:13" pos:end="2362:18"><decl pos:start="2362:13" pos:end="2362:17"><type pos:start="2362:13" pos:end="2362:15"><name pos:start="2362:13" pos:end="2362:15">int</name></type> <name pos:start="2362:17" pos:end="2362:17">i</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2363:13" pos:end="2363:59"><expr pos:start="2363:13" pos:end="2363:58"><name pos:start="2363:13" pos:end="2363:21">grouplist</name> <operator pos:start="2363:23" pos:end="2363:23">=</operator> <call pos:start="2363:25" pos:end="2363:58"><name pos:start="2363:25" pos:end="2363:30">alloca</name><argument_list pos:start="2363:31" pos:end="2363:58">(<argument pos:start="2363:32" pos:end="2363:57"><expr pos:start="2363:32" pos:end="2363:57"><name pos:start="2363:32" pos:end="2363:41">gidsetsize</name> <operator pos:start="2363:43" pos:end="2363:43">*</operator> <sizeof pos:start="2363:45" pos:end="2363:57">sizeof<argument_list pos:start="2363:51" pos:end="2363:57">(<argument pos:start="2363:52" pos:end="2363:56"><expr pos:start="2363:52" pos:end="2363:56"><name pos:start="2363:52" pos:end="2363:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2364:13" pos:end="2364:62"><expr pos:start="2364:13" pos:end="2364:61"><name pos:start="2364:13" pos:end="2364:15">ret</name> <operator pos:start="2364:17" pos:end="2364:17">=</operator> <call pos:start="2364:19" pos:end="2364:61"><name pos:start="2364:19" pos:end="2364:27">get_errno</name><argument_list pos:start="2364:28" pos:end="2364:61">(<argument pos:start="2364:29" pos:end="2364:60"><expr pos:start="2364:29" pos:end="2364:60"><call pos:start="2364:29" pos:end="2364:60"><name pos:start="2364:29" pos:end="2364:37">getgroups</name><argument_list pos:start="2364:38" pos:end="2364:60">(<argument pos:start="2364:39" pos:end="2364:48"><expr pos:start="2364:39" pos:end="2364:48"><name pos:start="2364:39" pos:end="2364:48">gidsetsize</name></expr></argument>, <argument pos:start="2364:51" pos:end="2364:59"><expr pos:start="2364:51" pos:end="2364:59"><name pos:start="2364:51" pos:end="2364:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2365:13" pos:end="3541:14"><if pos:start="2365:13" pos:end="3541:14">if <condition pos:start="2365:16" pos:end="2365:32">(<expr pos:start="2365:17" pos:end="2365:31"><name pos:start="2365:17" pos:end="2365:26">gidsetsize</name> <operator pos:start="2365:28" pos:end="2365:29">==</operator> <literal type="number" pos:start="2365:31" pos:end="2365:31">0</literal></expr>)</condition><block type="pseudo" pos:start="2366:13" pos:end="3541:14"><block_content pos:start="2366:13" pos:end="3541:14">
            <if_stmt pos:start="2366:13" pos:end="3541:14"><if pos:start="2366:13" pos:end="3541:14">if <condition pos:start="2366:16" pos:end="2366:31">(<expr pos:start="2366:17" pos:end="2366:30"><operator pos:start="2366:17" pos:end="2366:17">!</operator><call pos:start="2366:18" pos:end="2366:30"><name pos:start="2366:18" pos:end="2366:25">is_error</name><argument_list pos:start="2366:26" pos:end="2366:30">(<argument pos:start="2366:27" pos:end="2366:29"><expr pos:start="2366:27" pos:end="2366:29"><name pos:start="2366:27" pos:end="2366:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2366:33" pos:end="3541:14">{<block_content pos:start="2367:17" pos:end="3541:14">
                <expr_stmt pos:start="2367:17" pos:end="2367:100"><expr pos:start="2367:17" pos:end="2367:99"><name pos:start="2367:17" pos:end="2367:32">target_grouplist</name> <operator pos:start="2367:34" pos:end="2367:34">=</operator> <call pos:start="2367:36" pos:end="2367:99"><name pos:start="2367:36" pos:end="2367:44">lock_user</name><argument_list pos:start="2367:45" pos:end="2367:99">(<argument pos:start="2367:46" pos:end="2367:57"><expr pos:start="2367:46" pos:end="2367:57"><name pos:start="2367:46" pos:end="2367:57">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2367:60" pos:end="2367:63"><expr pos:start="2367:60" pos:end="2367:63"><name pos:start="2367:60" pos:end="2367:63">arg2</name></expr></argument>, <argument pos:start="2367:66" pos:end="2367:95"><expr pos:start="2367:66" pos:end="2367:95"><name pos:start="2367:66" pos:end="2367:75">gidsetsize</name> <operator pos:start="2367:77" pos:end="2367:77">*</operator> <sizeof pos:start="2367:79" pos:end="2367:95">sizeof<argument_list pos:start="2367:85" pos:end="2367:95">(<argument pos:start="2367:86" pos:end="2367:94"><expr pos:start="2367:86" pos:end="2367:94"><name pos:start="2367:86" pos:end="2367:94">target_id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2367:98" pos:end="2367:98"><expr pos:start="2367:98" pos:end="2367:98"><literal type="number" pos:start="2367:98" pos:end="2367:98">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2368:17" pos:end="2369:32"><if pos:start="2368:17" pos:end="2369:32">if <condition pos:start="2368:20" pos:end="2368:38">(<expr pos:start="2368:21" pos:end="2368:37"><operator pos:start="2368:21" pos:end="2368:21">!</operator><name pos:start="2368:22" pos:end="2368:37">target_grouplist</name></expr>)</condition><block type="pseudo" pos:start="2369:21" pos:end="2369:32"><block_content pos:start="2369:21" pos:end="2369:32">
                    <goto pos:start="2369:21" pos:end="2369:32">goto <name pos:start="2369:26" pos:end="2369:31">efault</name>;</goto></block_content></block></if></if_stmt>
                <for pos:start="2370:17" pos:end="2371:77">for<control pos:start="2370:20" pos:end="2370:39">(<init pos:start="2370:21" pos:end="2370:26"><expr pos:start="2370:21" pos:end="2370:25"><name pos:start="2370:21" pos:end="2370:21">i</name> <operator pos:start="2370:23" pos:end="2370:23">=</operator> <literal type="number" pos:start="2370:25" pos:end="2370:25">0</literal></expr>;</init><condition pos:start="2370:27" pos:end="2370:34"><expr pos:start="2370:27" pos:end="2370:33"><name pos:start="2370:27" pos:end="2370:27">i</name> <operator pos:start="2370:29" pos:end="2370:29">&lt;</operator> <name pos:start="2370:31" pos:end="2370:33">ret</name></expr>;</condition> <incr pos:start="2370:36" pos:end="2370:38"><expr pos:start="2370:36" pos:end="2370:38"><name pos:start="2370:36" pos:end="2370:36">i</name><operator pos:start="2370:37" pos:end="2370:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="2371:21" pos:end="2371:77"><block_content pos:start="2371:21" pos:end="2371:77">
                    <expr_stmt pos:start="2371:21" pos:end="2371:77"><expr pos:start="2371:21" pos:end="2371:76"><name pos:start="2371:21" pos:end="2371:39"><name pos:start="2371:21" pos:end="2371:36">target_grouplist</name><index pos:start="2371:37" pos:end="2371:39">[<expr pos:start="2371:38" pos:end="2371:38"><name pos:start="2371:38" pos:end="2371:38">i</name></expr>]</index></name> <operator pos:start="2371:41" pos:end="2371:41">=</operator> <call pos:start="2371:43" pos:end="2371:76"><name pos:start="2371:43" pos:end="2371:49">tswapid</name><argument_list pos:start="2371:50" pos:end="2371:76">(<argument pos:start="2371:51" pos:end="2371:75"><expr pos:start="2371:51" pos:end="2371:75"><call pos:start="2371:51" pos:end="2371:75"><name pos:start="2371:51" pos:end="2371:61">high2lowgid</name><argument_list pos:start="2371:62" pos:end="2371:75">(<argument pos:start="2371:63" pos:end="2371:74"><expr pos:start="2371:63" pos:end="2371:74"><name pos:start="2371:63" pos:end="2371:74"><name pos:start="2371:63" pos:end="2371:71">grouplist</name><index pos:start="2371:72" pos:end="2371:74">[<expr pos:start="2371:73" pos:end="2371:73"><name pos:start="2371:73" pos:end="2371:73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt pos:start="2372:17" pos:end="2372:84"><expr pos:start="2372:17" pos:end="2372:83"><call pos:start="2372:17" pos:end="2372:83"><name pos:start="2372:17" pos:end="2372:27">unlock_user</name><argument_list pos:start="2372:28" pos:end="2372:83">(<argument pos:start="2372:29" pos:end="2372:44"><expr pos:start="2372:29" pos:end="2372:44"><name pos:start="2372:29" pos:end="2372:44">target_grouplist</name></expr></argument>, <argument pos:start="2372:47" pos:end="2372:50"><expr pos:start="2372:47" pos:end="2372:50"><name pos:start="2372:47" pos:end="2372:50">arg2</name></expr></argument>, <argument pos:start="2372:53" pos:end="2372:82"><expr pos:start="2372:53" pos:end="2372:82"><name pos:start="2372:53" pos:end="2372:62">gidsetsize</name> <operator pos:start="2372:64" pos:end="2372:64">*</operator> <sizeof pos:start="2372:66" pos:end="2372:82">sizeof<argument_list pos:start="2372:72" pos:end="2372:82">(<argument pos:start="2372:73" pos:end="2372:81"><expr pos:start="2372:73" pos:end="2372:81"><name pos:start="2372:73" pos:end="2372:81">target_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2373:5" pos:end="2373:29">case <expr pos:start="2373:10" pos:end="2373:28"><name pos:start="2373:10" pos:end="2373:28">TARGET_NR_setgroups</name></expr>:</case>
        <block pos:start="2374:9" pos:end="3541:14">{<block_content pos:start="2375:13" pos:end="3541:14">
            <decl_stmt pos:start="2375:13" pos:end="2375:34"><decl pos:start="2375:13" pos:end="2375:33"><type pos:start="2375:13" pos:end="2375:15"><name pos:start="2375:13" pos:end="2375:15">int</name></type> <name pos:start="2375:17" pos:end="2375:26">gidsetsize</name> <init pos:start="2375:28" pos:end="2375:33">= <expr pos:start="2375:30" pos:end="2375:33"><name pos:start="2375:30" pos:end="2375:33">arg1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2376:13" pos:end="2376:40"><decl pos:start="2376:13" pos:end="2376:39"><type pos:start="2376:13" pos:end="2376:23"><name pos:start="2376:13" pos:end="2376:21">target_id</name> <modifier pos:start="2376:23" pos:end="2376:23">*</modifier></type><name pos:start="2376:24" pos:end="2376:39">target_grouplist</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2377:13" pos:end="2377:36"><decl pos:start="2377:13" pos:end="2377:35"><type pos:start="2377:13" pos:end="2377:19"><name pos:start="2377:13" pos:end="2377:17">gid_t</name> <modifier pos:start="2377:19" pos:end="2377:19">*</modifier></type><name pos:start="2377:20" pos:end="2377:28">grouplist</name> <init pos:start="2377:30" pos:end="2377:35">= <expr pos:start="2377:32" pos:end="2377:35"><name pos:start="2377:32" pos:end="2377:35">NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2378:13" pos:end="2378:18"><decl pos:start="2378:13" pos:end="2378:17"><type pos:start="2378:13" pos:end="2378:15"><name pos:start="2378:13" pos:end="2378:15">int</name></type> <name pos:start="2378:17" pos:end="2378:17">i</name></decl>;</decl_stmt>
            <if_stmt pos:start="2379:13" pos:end="3541:14"><if pos:start="2379:13" pos:end="3541:14">if <condition pos:start="2379:16" pos:end="2379:27">(<expr pos:start="2379:17" pos:end="2379:26"><name pos:start="2379:17" pos:end="2379:26">gidsetsize</name></expr>)</condition> <block pos:start="2379:29" pos:end="3541:14">{<block_content pos:start="2380:17" pos:end="3541:14">
                <expr_stmt pos:start="2380:17" pos:end="2380:63"><expr pos:start="2380:17" pos:end="2380:62"><name pos:start="2380:17" pos:end="2380:25">grouplist</name> <operator pos:start="2380:27" pos:end="2380:27">=</operator> <call pos:start="2380:29" pos:end="2380:62"><name pos:start="2380:29" pos:end="2380:34">alloca</name><argument_list pos:start="2380:35" pos:end="2380:62">(<argument pos:start="2380:36" pos:end="2380:61"><expr pos:start="2380:36" pos:end="2380:61"><name pos:start="2380:36" pos:end="2380:45">gidsetsize</name> <operator pos:start="2380:47" pos:end="2380:47">*</operator> <sizeof pos:start="2380:49" pos:end="2380:61">sizeof<argument_list pos:start="2380:55" pos:end="2380:61">(<argument pos:start="2380:56" pos:end="2380:60"><expr pos:start="2380:56" pos:end="2380:60"><name pos:start="2380:56" pos:end="2380:60">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2381:17" pos:end="2381:99"><expr pos:start="2381:17" pos:end="2381:98"><name pos:start="2381:17" pos:end="2381:32">target_grouplist</name> <operator pos:start="2381:34" pos:end="2381:34">=</operator> <call pos:start="2381:36" pos:end="2381:98"><name pos:start="2381:36" pos:end="2381:44">lock_user</name><argument_list pos:start="2381:45" pos:end="2381:98">(<argument pos:start="2381:46" pos:end="2381:56"><expr pos:start="2381:46" pos:end="2381:56"><name pos:start="2381:46" pos:end="2381:56">VERIFY_READ</name></expr></argument>, <argument pos:start="2381:59" pos:end="2381:62"><expr pos:start="2381:59" pos:end="2381:62"><name pos:start="2381:59" pos:end="2381:62">arg2</name></expr></argument>, <argument pos:start="2381:65" pos:end="2381:94"><expr pos:start="2381:65" pos:end="2381:94"><name pos:start="2381:65" pos:end="2381:74">gidsetsize</name> <operator pos:start="2381:76" pos:end="2381:76">*</operator> <sizeof pos:start="2381:78" pos:end="2381:94">sizeof<argument_list pos:start="2381:84" pos:end="2381:94">(<argument pos:start="2381:85" pos:end="2381:93"><expr pos:start="2381:85" pos:end="2381:93"><name pos:start="2381:85" pos:end="2381:93">target_id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2381:97" pos:end="2381:97"><expr pos:start="2381:97" pos:end="2381:97"><literal type="number" pos:start="2381:97" pos:end="2381:97">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2382:17" pos:end="3541:14"><if pos:start="2382:17" pos:end="3541:14">if <condition pos:start="2382:20" pos:end="2382:38">(<expr pos:start="2382:21" pos:end="2382:37"><operator pos:start="2382:21" pos:end="2382:21">!</operator><name pos:start="2382:22" pos:end="2382:37">target_grouplist</name></expr>)</condition> <block pos:start="2382:40" pos:end="3541:14">{<block_content pos:start="2383:21" pos:end="3541:14">
                    <expr_stmt pos:start="2383:21" pos:end="2383:41"><expr pos:start="2383:21" pos:end="2383:40"><name pos:start="2383:21" pos:end="2383:23">ret</name> <operator pos:start="2383:25" pos:end="2383:25">=</operator> <operator pos:start="2383:27" pos:end="2383:27">-</operator><name pos:start="2383:28" pos:end="2383:40">TARGET_EFAULT</name></expr>;</expr_stmt>
                    <goto pos:start="2384:21" pos:end="2384:30">goto <name pos:start="2384:26" pos:end="2384:29">fail</name>;</goto>
                <for pos:start="2385:17" pos:end="3541:14">for <control pos:start="2385:21" pos:end="2385:48">(<init pos:start="2385:22" pos:end="2385:27"><expr pos:start="2385:22" pos:end="2385:26"><name pos:start="2385:22" pos:end="2385:22">i</name> <operator pos:start="2385:24" pos:end="2385:24">=</operator> <literal type="number" pos:start="2385:26" pos:end="2385:26">0</literal></expr>;</init> <condition pos:start="2385:29" pos:end="2385:43"><expr pos:start="2385:29" pos:end="2385:42"><name pos:start="2385:29" pos:end="2385:29">i</name> <operator pos:start="2385:31" pos:end="2385:31">&lt;</operator> <name pos:start="2385:33" pos:end="2385:42">gidsetsize</name></expr>;</condition> <incr pos:start="2385:45" pos:end="2385:47"><expr pos:start="2385:45" pos:end="2385:47"><name pos:start="2385:45" pos:end="2385:45">i</name><operator pos:start="2385:46" pos:end="2385:47">++</operator></expr></incr>)</control> <block pos:start="2385:50" pos:end="3541:14">{<block_content pos:start="2386:21" pos:end="3541:14">
                    <expr_stmt pos:start="2386:21" pos:end="2386:77"><expr pos:start="2386:21" pos:end="2386:76"><name pos:start="2386:21" pos:end="2386:32"><name pos:start="2386:21" pos:end="2386:29">grouplist</name><index pos:start="2386:30" pos:end="2386:32">[<expr pos:start="2386:31" pos:end="2386:31"><name pos:start="2386:31" pos:end="2386:31">i</name></expr>]</index></name> <operator pos:start="2386:34" pos:end="2386:34">=</operator> <call pos:start="2386:36" pos:end="2386:76"><name pos:start="2386:36" pos:end="2386:46">low2highgid</name><argument_list pos:start="2386:47" pos:end="2386:76">(<argument pos:start="2386:48" pos:end="2386:75"><expr pos:start="2386:48" pos:end="2386:75"><call pos:start="2386:48" pos:end="2386:75"><name pos:start="2386:48" pos:end="2386:54">tswapid</name><argument_list pos:start="2386:55" pos:end="2386:75">(<argument pos:start="2386:56" pos:end="2386:74"><expr pos:start="2386:56" pos:end="2386:74"><name pos:start="2386:56" pos:end="2386:74"><name pos:start="2386:56" pos:end="2386:71">target_grouplist</name><index pos:start="2386:72" pos:end="2386:74">[<expr pos:start="2386:73" pos:end="2386:73"><name pos:start="2386:73" pos:end="2386:73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2387:17" pos:end="2387:55"><expr pos:start="2387:17" pos:end="2387:54"><call pos:start="2387:17" pos:end="2387:54"><name pos:start="2387:17" pos:end="2387:27">unlock_user</name><argument_list pos:start="2387:28" pos:end="2387:54">(<argument pos:start="2387:29" pos:end="2387:44"><expr pos:start="2387:29" pos:end="2387:44"><name pos:start="2387:29" pos:end="2387:44">target_grouplist</name></expr></argument>, <argument pos:start="2387:47" pos:end="2387:50"><expr pos:start="2387:47" pos:end="2387:50"><name pos:start="2387:47" pos:end="2387:50">arg2</name></expr></argument>, <argument pos:start="2387:53" pos:end="2387:53"><expr pos:start="2387:53" pos:end="2387:53"><literal type="number" pos:start="2387:53" pos:end="2387:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2388:13" pos:end="2388:62"><expr pos:start="2388:13" pos:end="2388:61"><name pos:start="2388:13" pos:end="2388:15">ret</name> <operator pos:start="2388:17" pos:end="2388:17">=</operator> <call pos:start="2388:19" pos:end="2388:61"><name pos:start="2388:19" pos:end="2388:27">get_errno</name><argument_list pos:start="2388:28" pos:end="2388:61">(<argument pos:start="2388:29" pos:end="2388:60"><expr pos:start="2388:29" pos:end="2388:60"><call pos:start="2388:29" pos:end="2388:60"><name pos:start="2388:29" pos:end="2388:37">setgroups</name><argument_list pos:start="2388:38" pos:end="2388:60">(<argument pos:start="2388:39" pos:end="2388:48"><expr pos:start="2388:39" pos:end="2388:48"><name pos:start="2388:39" pos:end="2388:48">gidsetsize</name></expr></argument>, <argument pos:start="2388:51" pos:end="2388:59"><expr pos:start="2388:51" pos:end="2388:59"><name pos:start="2388:51" pos:end="2388:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2389:5" pos:end="2389:26">case <expr pos:start="2389:10" pos:end="2389:25"><name pos:start="2389:10" pos:end="2389:25">TARGET_NR_fchown</name></expr>:</case>
        <expr_stmt pos:start="2390:9" pos:end="2392:0"><expr pos:start="2390:9" pos:end="2390:75"><name pos:start="2390:9" pos:end="2390:11">ret</name> <operator pos:start="2390:13" pos:end="2390:13">=</operator> <call pos:start="2390:15" pos:end="2390:75"><name pos:start="2390:15" pos:end="2390:23">get_errno</name><argument_list pos:start="2390:24" pos:end="2390:75">(<argument pos:start="2390:25" pos:end="2390:74"><expr pos:start="2390:25" pos:end="2390:74"><call pos:start="2390:25" pos:end="2390:74"><name pos:start="2390:25" pos:end="2390:30">fchown</name><argument_list pos:start="2390:31" pos:end="2390:74">(<argument pos:start="2390:32" pos:end="2390:35"><expr pos:start="2390:32" pos:end="2390:35"><name pos:start="2390:32" pos:end="2390:35">arg1</name></expr></argument>, <argument pos:start="2390:38" pos:end="2390:54"><expr pos:start="2390:38" pos:end="2390:54"><call pos:start="2390:38" pos:end="2390:54"><name pos:start="2390:38" pos:end="2390:48">low2highuid</name><argument_list pos:start="2390:49" pos:end="2390:54">(<argument pos:start="2390:50" pos:end="2390:53"><expr pos:start="2390:50" pos:end="2390:53"><name pos:start="2390:50" pos:end="2390:53">arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2390:57" pos:end="2390:73"><expr pos:start="2390:57" pos:end="2390:73"><call pos:start="2390:57" pos:end="2390:73"><name pos:start="2390:57" pos:end="2390:67">low2highgid</name><argument_list pos:start="2390:68" pos:end="2390:73">(<argument pos:start="2390:69" pos:end="2390:72"><expr pos:start="2390:69" pos:end="2390:72"><name pos:start="2390:69" pos:end="2390:72">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="2391:1" pos:end="2391:31">#<cpp:directive pos:start="2391:2" pos:end="2391:3">if</cpp:directive> <expr pos:start="2391:5" pos:end="2391:31"><call pos:start="2391:5" pos:end="2391:31"><name pos:start="2391:5" pos:end="2391:11">defined</name><argument_list pos:start="2391:12" pos:end="2391:31">(<argument pos:start="2391:13" pos:end="2391:30"><expr pos:start="2391:13" pos:end="2391:30"><name pos:start="2391:13" pos:end="2391:30">TARGET_NR_fchownat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="2392:5" pos:end="2392:28">case <expr pos:start="2392:10" pos:end="2392:27"><name pos:start="2392:10" pos:end="2392:27">TARGET_NR_fchownat</name></expr>:</case>
        <if_stmt pos:start="2393:9" pos:end="2394:24"><if pos:start="2393:9" pos:end="2394:24">if <condition pos:start="2393:12" pos:end="2393:42">(<expr pos:start="2393:13" pos:end="2393:41"><operator pos:start="2393:13" pos:end="2393:13">!</operator><operator pos:start="2393:14" pos:end="2393:14">(</operator><name pos:start="2393:15" pos:end="2393:15">p</name> <operator pos:start="2393:17" pos:end="2393:17">=</operator> <call pos:start="2393:19" pos:end="2393:40"><name pos:start="2393:19" pos:end="2393:34">lock_user_string</name><argument_list pos:start="2393:35" pos:end="2393:40">(<argument pos:start="2393:36" pos:end="2393:39"><expr pos:start="2393:36" pos:end="2393:39"><name pos:start="2393:36" pos:end="2393:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="2393:41" pos:end="2393:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2394:13" pos:end="2394:24"><block_content pos:start="2394:13" pos:end="2394:24"> 
            <goto pos:start="2394:13" pos:end="2394:24">goto <name pos:start="2394:18" pos:end="2394:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2395:9" pos:end="2396:59"><expr pos:start="2395:9" pos:end="2396:58"><name pos:start="2395:9" pos:end="2395:11">ret</name> <operator pos:start="2395:13" pos:end="2395:13">=</operator> <call pos:start="2395:15" pos:end="2396:58"><name pos:start="2395:15" pos:end="2395:23">get_errno</name><argument_list pos:start="2395:24" pos:end="2396:58">(<argument pos:start="2395:25" pos:end="2396:57"><expr pos:start="2395:25" pos:end="2396:57"><call pos:start="2395:25" pos:end="2396:57"><name pos:start="2395:25" pos:end="2395:32">fchownat</name><argument_list pos:start="2395:33" pos:end="2396:57">(<argument pos:start="2395:34" pos:end="2395:37"><expr pos:start="2395:34" pos:end="2395:37"><name pos:start="2395:34" pos:end="2395:37">arg1</name></expr></argument>, <argument pos:start="2395:40" pos:end="2395:40"><expr pos:start="2395:40" pos:end="2395:40"><name pos:start="2395:40" pos:end="2395:40">p</name></expr></argument>, <argument pos:start="2395:43" pos:end="2395:59"><expr pos:start="2395:43" pos:end="2395:59"><call pos:start="2395:43" pos:end="2395:59"><name pos:start="2395:43" pos:end="2395:53">low2highuid</name><argument_list pos:start="2395:54" pos:end="2395:59">(<argument pos:start="2395:55" pos:end="2395:58"><expr pos:start="2395:55" pos:end="2395:58"><name pos:start="2395:55" pos:end="2395:58">arg3</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument pos:start="2396:34" pos:end="2396:50"><expr pos:start="2396:34" pos:end="2396:50"><call pos:start="2396:34" pos:end="2396:50"><name pos:start="2396:34" pos:end="2396:44">low2highgid</name><argument_list pos:start="2396:45" pos:end="2396:50">(<argument pos:start="2396:46" pos:end="2396:49"><expr pos:start="2396:46" pos:end="2396:49"><name pos:start="2396:46" pos:end="2396:49">arg4</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2396:53" pos:end="2396:56"><expr pos:start="2396:53" pos:end="2396:56"><name pos:start="2396:53" pos:end="2396:56">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2397:9" pos:end="2400:0"><expr pos:start="2397:9" pos:end="2397:31"><call pos:start="2397:9" pos:end="2397:31"><name pos:start="2397:9" pos:end="2397:19">unlock_user</name><argument_list pos:start="2397:20" pos:end="2397:31">(<argument pos:start="2397:21" pos:end="2397:21"><expr pos:start="2397:21" pos:end="2397:21"><name pos:start="2397:21" pos:end="2397:21">p</name></expr></argument>, <argument pos:start="2397:24" pos:end="2397:27"><expr pos:start="2397:24" pos:end="2397:27"><name pos:start="2397:24" pos:end="2397:27">arg2</name></expr></argument>, <argument pos:start="2397:30" pos:end="2397:30"><expr pos:start="2397:30" pos:end="2397:30"><literal type="number" pos:start="2397:30" pos:end="2397:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2398:1" pos:end="2398:6">#<cpp:directive pos:start="2398:2" pos:end="2398:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2399:1" pos:end="2399:26">#<cpp:directive pos:start="2399:2" pos:end="2399:6">ifdef</cpp:directive> <name pos:start="2399:8" pos:end="2399:26">TARGET_NR_setresuid</name></cpp:ifdef>
    <case pos:start="2400:5" pos:end="2400:29">case <expr pos:start="2400:10" pos:end="2400:28"><name pos:start="2400:10" pos:end="2400:28">TARGET_NR_setresuid</name></expr>:</case>
        <expr_stmt pos:start="2401:9" pos:end="2406:0"><expr pos:start="2401:9" pos:end="2403:57"><name pos:start="2401:9" pos:end="2401:11">ret</name> <operator pos:start="2401:13" pos:end="2401:13">=</operator> <call pos:start="2401:15" pos:end="2403:57"><name pos:start="2401:15" pos:end="2401:23">get_errno</name><argument_list pos:start="2401:24" pos:end="2403:57">(<argument pos:start="2401:25" pos:end="2403:56"><expr pos:start="2401:25" pos:end="2403:56"><call pos:start="2401:25" pos:end="2403:56"><name pos:start="2401:25" pos:end="2401:37">sys_setresuid</name><argument_list pos:start="2401:38" pos:end="2403:56">(<argument pos:start="2401:39" pos:end="2401:55"><expr pos:start="2401:39" pos:end="2401:55"><call pos:start="2401:39" pos:end="2401:55"><name pos:start="2401:39" pos:end="2401:49">low2highuid</name><argument_list pos:start="2401:50" pos:end="2401:55">(<argument pos:start="2401:51" pos:end="2401:54"><expr pos:start="2401:51" pos:end="2401:54"><name pos:start="2401:51" pos:end="2401:54">arg1</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument pos:start="2402:39" pos:end="2402:55"><expr pos:start="2402:39" pos:end="2402:55"><call pos:start="2402:39" pos:end="2402:55"><name pos:start="2402:39" pos:end="2402:49">low2highuid</name><argument_list pos:start="2402:50" pos:end="2402:55">(<argument pos:start="2402:51" pos:end="2402:54"><expr pos:start="2402:51" pos:end="2402:54"><name pos:start="2402:51" pos:end="2402:54">arg2</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument pos:start="2403:39" pos:end="2403:55"><expr pos:start="2403:39" pos:end="2403:55"><call pos:start="2403:39" pos:end="2403:55"><name pos:start="2403:39" pos:end="2403:49">low2highuid</name><argument_list pos:start="2403:50" pos:end="2403:55">(<argument pos:start="2403:51" pos:end="2403:54"><expr pos:start="2403:51" pos:end="2403:54"><name pos:start="2403:51" pos:end="2403:54">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2404:1" pos:end="2404:6">#<cpp:directive pos:start="2404:2" pos:end="2404:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2405:1" pos:end="2405:26">#<cpp:directive pos:start="2405:2" pos:end="2405:6">ifdef</cpp:directive> <name pos:start="2405:8" pos:end="2405:26">TARGET_NR_getresuid</name></cpp:ifdef>
    <case pos:start="2406:5" pos:end="2406:29">case <expr pos:start="2406:10" pos:end="2406:28"><name pos:start="2406:10" pos:end="2406:28">TARGET_NR_getresuid</name></expr>:</case>
        <block pos:start="2407:9" pos:end="3541:14">{<block_content pos:start="2408:13" pos:end="3541:14">
            <decl_stmt pos:start="2408:13" pos:end="2408:35"><decl pos:start="2408:13" pos:end="2408:22"><type pos:start="2408:13" pos:end="2408:17"><name pos:start="2408:13" pos:end="2408:17">uid_t</name></type> <name pos:start="2408:19" pos:end="2408:22">ruid</name></decl>, <decl pos:start="2408:25" pos:end="2408:28"><type ref="prev" pos:start="2408:13" pos:end="2408:17"/><name pos:start="2408:25" pos:end="2408:28">euid</name></decl>, <decl pos:start="2408:31" pos:end="2408:34"><type ref="prev" pos:start="2408:13" pos:end="2408:17"/><name pos:start="2408:31" pos:end="2408:34">suid</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2409:13" pos:end="2409:60"><expr pos:start="2409:13" pos:end="2409:59"><name pos:start="2409:13" pos:end="2409:15">ret</name> <operator pos:start="2409:17" pos:end="2409:17">=</operator> <call pos:start="2409:19" pos:end="2409:59"><name pos:start="2409:19" pos:end="2409:27">get_errno</name><argument_list pos:start="2409:28" pos:end="2409:59">(<argument pos:start="2409:29" pos:end="2409:58"><expr pos:start="2409:29" pos:end="2409:58"><call pos:start="2409:29" pos:end="2409:58"><name pos:start="2409:29" pos:end="2409:37">getresuid</name><argument_list pos:start="2409:38" pos:end="2409:58">(<argument pos:start="2409:39" pos:end="2409:43"><expr pos:start="2409:39" pos:end="2409:43"><operator pos:start="2409:39" pos:end="2409:39">&amp;</operator><name pos:start="2409:40" pos:end="2409:43">ruid</name></expr></argument>, <argument pos:start="2409:46" pos:end="2409:50"><expr pos:start="2409:46" pos:end="2409:50"><operator pos:start="2409:46" pos:end="2409:46">&amp;</operator><name pos:start="2409:47" pos:end="2409:50">euid</name></expr></argument>, <argument pos:start="2409:53" pos:end="2409:57"><expr pos:start="2409:53" pos:end="2409:57"><operator pos:start="2409:53" pos:end="2409:53">&amp;</operator><name pos:start="2409:54" pos:end="2409:57">suid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2410:13" pos:end="3541:14"><if pos:start="2410:13" pos:end="3541:14">if <condition pos:start="2410:16" pos:end="2410:31">(<expr pos:start="2410:17" pos:end="2410:30"><operator pos:start="2410:17" pos:end="2410:17">!</operator><call pos:start="2410:18" pos:end="2410:30"><name pos:start="2410:18" pos:end="2410:25">is_error</name><argument_list pos:start="2410:26" pos:end="2410:30">(<argument pos:start="2410:27" pos:end="2410:29"><expr pos:start="2410:27" pos:end="2410:29"><name pos:start="2410:27" pos:end="2410:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2410:33" pos:end="3541:14">{<block_content pos:start="2411:17" pos:end="3541:14">
                <if_stmt pos:start="2411:17" pos:end="2417:0"><if pos:start="2411:17" pos:end="2417:0">if <condition pos:start="2411:20" pos:end="2413:60">(<expr pos:start="2411:21" pos:end="2413:59"><call pos:start="2411:21" pos:end="2411:56"><name pos:start="2411:21" pos:end="2411:31">put_user_id</name><argument_list pos:start="2411:32" pos:end="2411:56">(<argument pos:start="2411:33" pos:end="2411:49"><expr pos:start="2411:33" pos:end="2411:49"><call pos:start="2411:33" pos:end="2411:49"><name pos:start="2411:33" pos:end="2411:43">high2lowuid</name><argument_list pos:start="2411:44" pos:end="2411:49">(<argument pos:start="2411:45" pos:end="2411:48"><expr pos:start="2411:45" pos:end="2411:48"><name pos:start="2411:45" pos:end="2411:48">ruid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2411:52" pos:end="2411:55"><expr pos:start="2411:52" pos:end="2411:55"><name pos:start="2411:52" pos:end="2411:55">arg1</name></expr></argument>)</argument_list></call>
                    <operator pos:start="2412:21" pos:end="2412:22">||</operator> <call pos:start="2412:24" pos:end="2412:59"><name pos:start="2412:24" pos:end="2412:34">put_user_id</name><argument_list pos:start="2412:35" pos:end="2412:59">(<argument pos:start="2412:36" pos:end="2412:52"><expr pos:start="2412:36" pos:end="2412:52"><call pos:start="2412:36" pos:end="2412:52"><name pos:start="2412:36" pos:end="2412:46">high2lowuid</name><argument_list pos:start="2412:47" pos:end="2412:52">(<argument pos:start="2412:48" pos:end="2412:51"><expr pos:start="2412:48" pos:end="2412:51"><name pos:start="2412:48" pos:end="2412:51">euid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2412:55" pos:end="2412:58"><expr pos:start="2412:55" pos:end="2412:58"><name pos:start="2412:55" pos:end="2412:58">arg2</name></expr></argument>)</argument_list></call>
                    <operator pos:start="2413:21" pos:end="2413:22">||</operator> <call pos:start="2413:24" pos:end="2413:59"><name pos:start="2413:24" pos:end="2413:34">put_user_id</name><argument_list pos:start="2413:35" pos:end="2413:59">(<argument pos:start="2413:36" pos:end="2413:52"><expr pos:start="2413:36" pos:end="2413:52"><call pos:start="2413:36" pos:end="2413:52"><name pos:start="2413:36" pos:end="2413:46">high2lowuid</name><argument_list pos:start="2413:47" pos:end="2413:52">(<argument pos:start="2413:48" pos:end="2413:51"><expr pos:start="2413:48" pos:end="2413:51"><name pos:start="2413:48" pos:end="2413:51">suid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2413:55" pos:end="2413:58"><expr pos:start="2413:55" pos:end="2413:58"><name pos:start="2413:55" pos:end="2413:58">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2414:21" pos:end="2417:0"><block_content pos:start="2414:21" pos:end="2417:0">
                    <goto pos:start="2414:21" pos:end="2417:0">goto <name pos:start="2414:26" pos:end="2414:31">efault</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif pos:start="2415:1" pos:end="2415:6">#<cpp:directive pos:start="2415:2" pos:end="2415:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2416:1" pos:end="2416:26">#<cpp:directive pos:start="2416:2" pos:end="2416:6">ifdef</cpp:directive> <name pos:start="2416:8" pos:end="2416:26">TARGET_NR_getresgid</name></cpp:ifdef>
    <case pos:start="2417:5" pos:end="2417:29">case <expr pos:start="2417:10" pos:end="2417:28"><name pos:start="2417:10" pos:end="2417:28">TARGET_NR_setresgid</name></expr>:</case>
        <expr_stmt pos:start="2418:9" pos:end="2423:0"><expr pos:start="2418:9" pos:end="2420:57"><name pos:start="2418:9" pos:end="2418:11">ret</name> <operator pos:start="2418:13" pos:end="2418:13">=</operator> <call pos:start="2418:15" pos:end="2420:57"><name pos:start="2418:15" pos:end="2418:23">get_errno</name><argument_list pos:start="2418:24" pos:end="2420:57">(<argument pos:start="2418:25" pos:end="2420:56"><expr pos:start="2418:25" pos:end="2420:56"><call pos:start="2418:25" pos:end="2420:56"><name pos:start="2418:25" pos:end="2418:37">sys_setresgid</name><argument_list pos:start="2418:38" pos:end="2420:56">(<argument pos:start="2418:39" pos:end="2418:55"><expr pos:start="2418:39" pos:end="2418:55"><call pos:start="2418:39" pos:end="2418:55"><name pos:start="2418:39" pos:end="2418:49">low2highgid</name><argument_list pos:start="2418:50" pos:end="2418:55">(<argument pos:start="2418:51" pos:end="2418:54"><expr pos:start="2418:51" pos:end="2418:54"><name pos:start="2418:51" pos:end="2418:54">arg1</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument pos:start="2419:39" pos:end="2419:55"><expr pos:start="2419:39" pos:end="2419:55"><call pos:start="2419:39" pos:end="2419:55"><name pos:start="2419:39" pos:end="2419:49">low2highgid</name><argument_list pos:start="2419:50" pos:end="2419:55">(<argument pos:start="2419:51" pos:end="2419:54"><expr pos:start="2419:51" pos:end="2419:54"><name pos:start="2419:51" pos:end="2419:54">arg2</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument pos:start="2420:39" pos:end="2420:55"><expr pos:start="2420:39" pos:end="2420:55"><call pos:start="2420:39" pos:end="2420:55"><name pos:start="2420:39" pos:end="2420:49">low2highgid</name><argument_list pos:start="2420:50" pos:end="2420:55">(<argument pos:start="2420:51" pos:end="2420:54"><expr pos:start="2420:51" pos:end="2420:54"><name pos:start="2420:51" pos:end="2420:54">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2421:1" pos:end="2421:6">#<cpp:directive pos:start="2421:2" pos:end="2421:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2422:1" pos:end="2422:26">#<cpp:directive pos:start="2422:2" pos:end="2422:6">ifdef</cpp:directive> <name pos:start="2422:8" pos:end="2422:26">TARGET_NR_getresgid</name></cpp:ifdef>
    <case pos:start="2423:5" pos:end="2423:29">case <expr pos:start="2423:10" pos:end="2423:28"><name pos:start="2423:10" pos:end="2423:28">TARGET_NR_getresgid</name></expr>:</case>
        <block pos:start="2424:9" pos:end="3541:14">{<block_content pos:start="2425:13" pos:end="3541:14">
            <decl_stmt pos:start="2425:13" pos:end="2425:35"><decl pos:start="2425:13" pos:end="2425:22"><type pos:start="2425:13" pos:end="2425:17"><name pos:start="2425:13" pos:end="2425:17">gid_t</name></type> <name pos:start="2425:19" pos:end="2425:22">rgid</name></decl>, <decl pos:start="2425:25" pos:end="2425:28"><type ref="prev" pos:start="2425:13" pos:end="2425:17"/><name pos:start="2425:25" pos:end="2425:28">egid</name></decl>, <decl pos:start="2425:31" pos:end="2425:34"><type ref="prev" pos:start="2425:13" pos:end="2425:17"/><name pos:start="2425:31" pos:end="2425:34">sgid</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2426:13" pos:end="2426:60"><expr pos:start="2426:13" pos:end="2426:59"><name pos:start="2426:13" pos:end="2426:15">ret</name> <operator pos:start="2426:17" pos:end="2426:17">=</operator> <call pos:start="2426:19" pos:end="2426:59"><name pos:start="2426:19" pos:end="2426:27">get_errno</name><argument_list pos:start="2426:28" pos:end="2426:59">(<argument pos:start="2426:29" pos:end="2426:58"><expr pos:start="2426:29" pos:end="2426:58"><call pos:start="2426:29" pos:end="2426:58"><name pos:start="2426:29" pos:end="2426:37">getresgid</name><argument_list pos:start="2426:38" pos:end="2426:58">(<argument pos:start="2426:39" pos:end="2426:43"><expr pos:start="2426:39" pos:end="2426:43"><operator pos:start="2426:39" pos:end="2426:39">&amp;</operator><name pos:start="2426:40" pos:end="2426:43">rgid</name></expr></argument>, <argument pos:start="2426:46" pos:end="2426:50"><expr pos:start="2426:46" pos:end="2426:50"><operator pos:start="2426:46" pos:end="2426:46">&amp;</operator><name pos:start="2426:47" pos:end="2426:50">egid</name></expr></argument>, <argument pos:start="2426:53" pos:end="2426:57"><expr pos:start="2426:53" pos:end="2426:57"><operator pos:start="2426:53" pos:end="2426:53">&amp;</operator><name pos:start="2426:54" pos:end="2426:57">sgid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2427:13" pos:end="3541:14"><if pos:start="2427:13" pos:end="3541:14">if <condition pos:start="2427:16" pos:end="2427:31">(<expr pos:start="2427:17" pos:end="2427:30"><operator pos:start="2427:17" pos:end="2427:17">!</operator><call pos:start="2427:18" pos:end="2427:30"><name pos:start="2427:18" pos:end="2427:25">is_error</name><argument_list pos:start="2427:26" pos:end="2427:30">(<argument pos:start="2427:27" pos:end="2427:29"><expr pos:start="2427:27" pos:end="2427:29"><name pos:start="2427:27" pos:end="2427:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2427:33" pos:end="3541:14">{<block_content pos:start="2428:17" pos:end="3541:14">
                <if_stmt pos:start="2428:17" pos:end="2434:0"><if pos:start="2428:17" pos:end="2434:0">if <condition pos:start="2428:20" pos:end="2430:60">(<expr pos:start="2428:21" pos:end="2430:59"><call pos:start="2428:21" pos:end="2428:56"><name pos:start="2428:21" pos:end="2428:31">put_user_id</name><argument_list pos:start="2428:32" pos:end="2428:56">(<argument pos:start="2428:33" pos:end="2428:49"><expr pos:start="2428:33" pos:end="2428:49"><call pos:start="2428:33" pos:end="2428:49"><name pos:start="2428:33" pos:end="2428:43">high2lowgid</name><argument_list pos:start="2428:44" pos:end="2428:49">(<argument pos:start="2428:45" pos:end="2428:48"><expr pos:start="2428:45" pos:end="2428:48"><name pos:start="2428:45" pos:end="2428:48">rgid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2428:52" pos:end="2428:55"><expr pos:start="2428:52" pos:end="2428:55"><name pos:start="2428:52" pos:end="2428:55">arg1</name></expr></argument>)</argument_list></call>
                    <operator pos:start="2429:21" pos:end="2429:22">||</operator> <call pos:start="2429:24" pos:end="2429:59"><name pos:start="2429:24" pos:end="2429:34">put_user_id</name><argument_list pos:start="2429:35" pos:end="2429:59">(<argument pos:start="2429:36" pos:end="2429:52"><expr pos:start="2429:36" pos:end="2429:52"><call pos:start="2429:36" pos:end="2429:52"><name pos:start="2429:36" pos:end="2429:46">high2lowgid</name><argument_list pos:start="2429:47" pos:end="2429:52">(<argument pos:start="2429:48" pos:end="2429:51"><expr pos:start="2429:48" pos:end="2429:51"><name pos:start="2429:48" pos:end="2429:51">egid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2429:55" pos:end="2429:58"><expr pos:start="2429:55" pos:end="2429:58"><name pos:start="2429:55" pos:end="2429:58">arg2</name></expr></argument>)</argument_list></call>
                    <operator pos:start="2430:21" pos:end="2430:22">||</operator> <call pos:start="2430:24" pos:end="2430:59"><name pos:start="2430:24" pos:end="2430:34">put_user_id</name><argument_list pos:start="2430:35" pos:end="2430:59">(<argument pos:start="2430:36" pos:end="2430:52"><expr pos:start="2430:36" pos:end="2430:52"><call pos:start="2430:36" pos:end="2430:52"><name pos:start="2430:36" pos:end="2430:46">high2lowgid</name><argument_list pos:start="2430:47" pos:end="2430:52">(<argument pos:start="2430:48" pos:end="2430:51"><expr pos:start="2430:48" pos:end="2430:51"><name pos:start="2430:48" pos:end="2430:51">sgid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2430:55" pos:end="2430:58"><expr pos:start="2430:55" pos:end="2430:58"><name pos:start="2430:55" pos:end="2430:58">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2431:21" pos:end="2434:0"><block_content pos:start="2431:21" pos:end="2434:0">
                    <goto pos:start="2431:21" pos:end="2434:0">goto <name pos:start="2431:26" pos:end="2431:31">efault</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif pos:start="2432:1" pos:end="2432:6">#<cpp:directive pos:start="2432:2" pos:end="2432:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2433:1" pos:end="2433:22">#<cpp:directive pos:start="2433:2" pos:end="2433:6">ifdef</cpp:directive> <name pos:start="2433:8" pos:end="2433:22">TARGET_NR_chown</name></cpp:ifdef>
    <case pos:start="2434:5" pos:end="2434:25">case <expr pos:start="2434:10" pos:end="2434:24"><name pos:start="2434:10" pos:end="2434:24">TARGET_NR_chown</name></expr>:</case>
        <if_stmt pos:start="2435:9" pos:end="2436:24"><if pos:start="2435:9" pos:end="2436:24">if <condition pos:start="2435:12" pos:end="2435:42">(<expr pos:start="2435:13" pos:end="2435:41"><operator pos:start="2435:13" pos:end="2435:13">!</operator><operator pos:start="2435:14" pos:end="2435:14">(</operator><name pos:start="2435:15" pos:end="2435:15">p</name> <operator pos:start="2435:17" pos:end="2435:17">=</operator> <call pos:start="2435:19" pos:end="2435:40"><name pos:start="2435:19" pos:end="2435:34">lock_user_string</name><argument_list pos:start="2435:35" pos:end="2435:40">(<argument pos:start="2435:36" pos:end="2435:39"><expr pos:start="2435:36" pos:end="2435:39"><name pos:start="2435:36" pos:end="2435:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2435:41" pos:end="2435:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2436:13" pos:end="2436:24"><block_content pos:start="2436:13" pos:end="2436:24">
            <goto pos:start="2436:13" pos:end="2436:24">goto <name pos:start="2436:18" pos:end="2436:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2437:9" pos:end="2437:72"><expr pos:start="2437:9" pos:end="2437:71"><name pos:start="2437:9" pos:end="2437:11">ret</name> <operator pos:start="2437:13" pos:end="2437:13">=</operator> <call pos:start="2437:15" pos:end="2437:71"><name pos:start="2437:15" pos:end="2437:23">get_errno</name><argument_list pos:start="2437:24" pos:end="2437:71">(<argument pos:start="2437:25" pos:end="2437:70"><expr pos:start="2437:25" pos:end="2437:70"><call pos:start="2437:25" pos:end="2437:70"><name pos:start="2437:25" pos:end="2437:29">chown</name><argument_list pos:start="2437:30" pos:end="2437:70">(<argument pos:start="2437:31" pos:end="2437:31"><expr pos:start="2437:31" pos:end="2437:31"><name pos:start="2437:31" pos:end="2437:31">p</name></expr></argument>, <argument pos:start="2437:34" pos:end="2437:50"><expr pos:start="2437:34" pos:end="2437:50"><call pos:start="2437:34" pos:end="2437:50"><name pos:start="2437:34" pos:end="2437:44">low2highuid</name><argument_list pos:start="2437:45" pos:end="2437:50">(<argument pos:start="2437:46" pos:end="2437:49"><expr pos:start="2437:46" pos:end="2437:49"><name pos:start="2437:46" pos:end="2437:49">arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2437:53" pos:end="2437:69"><expr pos:start="2437:53" pos:end="2437:69"><call pos:start="2437:53" pos:end="2437:69"><name pos:start="2437:53" pos:end="2437:63">low2highgid</name><argument_list pos:start="2437:64" pos:end="2437:69">(<argument pos:start="2437:65" pos:end="2437:68"><expr pos:start="2437:65" pos:end="2437:68"><name pos:start="2437:65" pos:end="2437:68">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2438:9" pos:end="2440:0"><expr pos:start="2438:9" pos:end="2438:31"><call pos:start="2438:9" pos:end="2438:31"><name pos:start="2438:9" pos:end="2438:19">unlock_user</name><argument_list pos:start="2438:20" pos:end="2438:31">(<argument pos:start="2438:21" pos:end="2438:21"><expr pos:start="2438:21" pos:end="2438:21"><name pos:start="2438:21" pos:end="2438:21">p</name></expr></argument>, <argument pos:start="2438:24" pos:end="2438:27"><expr pos:start="2438:24" pos:end="2438:27"><name pos:start="2438:24" pos:end="2438:27">arg1</name></expr></argument>, <argument pos:start="2438:30" pos:end="2438:30"><expr pos:start="2438:30" pos:end="2438:30"><literal type="number" pos:start="2438:30" pos:end="2438:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2439:1" pos:end="2439:6">#<cpp:directive pos:start="2439:2" pos:end="2439:6">endif</cpp:directive></cpp:endif>
    <case pos:start="2440:5" pos:end="2440:26">case <expr pos:start="2440:10" pos:end="2440:25"><name pos:start="2440:10" pos:end="2440:25">TARGET_NR_setuid</name></expr>:</case>
        <expr_stmt pos:start="2441:9" pos:end="2441:55"><expr pos:start="2441:9" pos:end="2441:54"><name pos:start="2441:9" pos:end="2441:11">ret</name> <operator pos:start="2441:13" pos:end="2441:13">=</operator> <call pos:start="2441:15" pos:end="2441:54"><name pos:start="2441:15" pos:end="2441:23">get_errno</name><argument_list pos:start="2441:24" pos:end="2441:54">(<argument pos:start="2441:25" pos:end="2441:53"><expr pos:start="2441:25" pos:end="2441:53"><call pos:start="2441:25" pos:end="2441:53"><name pos:start="2441:25" pos:end="2441:34">sys_setuid</name><argument_list pos:start="2441:35" pos:end="2441:53">(<argument pos:start="2441:36" pos:end="2441:52"><expr pos:start="2441:36" pos:end="2441:52"><call pos:start="2441:36" pos:end="2441:52"><name pos:start="2441:36" pos:end="2441:46">low2highuid</name><argument_list pos:start="2441:47" pos:end="2441:52">(<argument pos:start="2441:48" pos:end="2441:51"><expr pos:start="2441:48" pos:end="2441:51"><name pos:start="2441:48" pos:end="2441:51">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2442:5" pos:end="2442:26">case <expr pos:start="2442:10" pos:end="2442:25"><name pos:start="2442:10" pos:end="2442:25">TARGET_NR_setgid</name></expr>:</case>
        <expr_stmt pos:start="2443:9" pos:end="2443:55"><expr pos:start="2443:9" pos:end="2443:54"><name pos:start="2443:9" pos:end="2443:11">ret</name> <operator pos:start="2443:13" pos:end="2443:13">=</operator> <call pos:start="2443:15" pos:end="2443:54"><name pos:start="2443:15" pos:end="2443:23">get_errno</name><argument_list pos:start="2443:24" pos:end="2443:54">(<argument pos:start="2443:25" pos:end="2443:53"><expr pos:start="2443:25" pos:end="2443:53"><call pos:start="2443:25" pos:end="2443:53"><name pos:start="2443:25" pos:end="2443:34">sys_setgid</name><argument_list pos:start="2443:35" pos:end="2443:53">(<argument pos:start="2443:36" pos:end="2443:52"><expr pos:start="2443:36" pos:end="2443:52"><call pos:start="2443:36" pos:end="2443:52"><name pos:start="2443:36" pos:end="2443:46">low2highgid</name><argument_list pos:start="2443:47" pos:end="2443:52">(<argument pos:start="2443:48" pos:end="2443:51"><expr pos:start="2443:48" pos:end="2443:51"><name pos:start="2443:48" pos:end="2443:51">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2444:5" pos:end="2444:28">case <expr pos:start="2444:10" pos:end="2444:27"><name pos:start="2444:10" pos:end="2444:27">TARGET_NR_setfsuid</name></expr>:</case>
        <expr_stmt pos:start="2445:9" pos:end="2445:40"><expr pos:start="2445:9" pos:end="2445:39"><name pos:start="2445:9" pos:end="2445:11">ret</name> <operator pos:start="2445:13" pos:end="2445:13">=</operator> <call pos:start="2445:15" pos:end="2445:39"><name pos:start="2445:15" pos:end="2445:23">get_errno</name><argument_list pos:start="2445:24" pos:end="2445:39">(<argument pos:start="2445:25" pos:end="2445:38"><expr pos:start="2445:25" pos:end="2445:38"><call pos:start="2445:25" pos:end="2445:38"><name pos:start="2445:25" pos:end="2445:32">setfsuid</name><argument_list pos:start="2445:33" pos:end="2445:38">(<argument pos:start="2445:34" pos:end="2445:37"><expr pos:start="2445:34" pos:end="2445:37"><name pos:start="2445:34" pos:end="2445:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2446:5" pos:end="2446:28">case <expr pos:start="2446:10" pos:end="2446:27"><name pos:start="2446:10" pos:end="2446:27">TARGET_NR_setfsgid</name></expr>:</case>
        <expr_stmt pos:start="2447:9" pos:end="2449:0"><expr pos:start="2447:9" pos:end="2447:39"><name pos:start="2447:9" pos:end="2447:11">ret</name> <operator pos:start="2447:13" pos:end="2447:13">=</operator> <call pos:start="2447:15" pos:end="2447:39"><name pos:start="2447:15" pos:end="2447:23">get_errno</name><argument_list pos:start="2447:24" pos:end="2447:39">(<argument pos:start="2447:25" pos:end="2447:38"><expr pos:start="2447:25" pos:end="2447:38"><call pos:start="2447:25" pos:end="2447:38"><name pos:start="2447:25" pos:end="2447:32">setfsgid</name><argument_list pos:start="2447:33" pos:end="2447:38">(<argument pos:start="2447:34" pos:end="2447:37"><expr pos:start="2447:34" pos:end="2447:37"><name pos:start="2447:34" pos:end="2447:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="2448:1" pos:end="2448:25">#<cpp:directive pos:start="2448:2" pos:end="2448:6">ifdef</cpp:directive> <name pos:start="2448:8" pos:end="2448:25">TARGET_NR_lchown32</name></cpp:ifdef>
    <case pos:start="2449:5" pos:end="2449:28">case <expr pos:start="2449:10" pos:end="2449:27"><name pos:start="2449:10" pos:end="2449:27">TARGET_NR_lchown32</name></expr>:</case>
        <if_stmt pos:start="2450:9" pos:end="2451:24"><if pos:start="2450:9" pos:end="2451:24">if <condition pos:start="2450:12" pos:end="2450:42">(<expr pos:start="2450:13" pos:end="2450:41"><operator pos:start="2450:13" pos:end="2450:13">!</operator><operator pos:start="2450:14" pos:end="2450:14">(</operator><name pos:start="2450:15" pos:end="2450:15">p</name> <operator pos:start="2450:17" pos:end="2450:17">=</operator> <call pos:start="2450:19" pos:end="2450:40"><name pos:start="2450:19" pos:end="2450:34">lock_user_string</name><argument_list pos:start="2450:35" pos:end="2450:40">(<argument pos:start="2450:36" pos:end="2450:39"><expr pos:start="2450:36" pos:end="2450:39"><name pos:start="2450:36" pos:end="2450:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2450:41" pos:end="2450:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2451:13" pos:end="2451:24"><block_content pos:start="2451:13" pos:end="2451:24">
            <goto pos:start="2451:13" pos:end="2451:24">goto <name pos:start="2451:18" pos:end="2451:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2452:9" pos:end="2452:47"><expr pos:start="2452:9" pos:end="2452:46"><name pos:start="2452:9" pos:end="2452:11">ret</name> <operator pos:start="2452:13" pos:end="2452:13">=</operator> <call pos:start="2452:15" pos:end="2452:46"><name pos:start="2452:15" pos:end="2452:23">get_errno</name><argument_list pos:start="2452:24" pos:end="2452:46">(<argument pos:start="2452:25" pos:end="2452:45"><expr pos:start="2452:25" pos:end="2452:45"><call pos:start="2452:25" pos:end="2452:45"><name pos:start="2452:25" pos:end="2452:30">lchown</name><argument_list pos:start="2452:31" pos:end="2452:45">(<argument pos:start="2452:32" pos:end="2452:32"><expr pos:start="2452:32" pos:end="2452:32"><name pos:start="2452:32" pos:end="2452:32">p</name></expr></argument>, <argument pos:start="2452:35" pos:end="2452:38"><expr pos:start="2452:35" pos:end="2452:38"><name pos:start="2452:35" pos:end="2452:38">arg2</name></expr></argument>, <argument pos:start="2452:41" pos:end="2452:44"><expr pos:start="2452:41" pos:end="2452:44"><name pos:start="2452:41" pos:end="2452:44">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2453:9" pos:end="2456:0"><expr pos:start="2453:9" pos:end="2453:31"><call pos:start="2453:9" pos:end="2453:31"><name pos:start="2453:9" pos:end="2453:19">unlock_user</name><argument_list pos:start="2453:20" pos:end="2453:31">(<argument pos:start="2453:21" pos:end="2453:21"><expr pos:start="2453:21" pos:end="2453:21"><name pos:start="2453:21" pos:end="2453:21">p</name></expr></argument>, <argument pos:start="2453:24" pos:end="2453:27"><expr pos:start="2453:24" pos:end="2453:27"><name pos:start="2453:24" pos:end="2453:27">arg1</name></expr></argument>, <argument pos:start="2453:30" pos:end="2453:30"><expr pos:start="2453:30" pos:end="2453:30"><literal type="number" pos:start="2453:30" pos:end="2453:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2454:1" pos:end="2454:6">#<cpp:directive pos:start="2454:2" pos:end="2454:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2455:1" pos:end="2455:25">#<cpp:directive pos:start="2455:2" pos:end="2455:6">ifdef</cpp:directive> <name pos:start="2455:8" pos:end="2455:25">TARGET_NR_getuid32</name></cpp:ifdef>
    <case pos:start="2456:5" pos:end="2456:28">case <expr pos:start="2456:10" pos:end="2456:27"><name pos:start="2456:10" pos:end="2456:27">TARGET_NR_getuid32</name></expr>:</case>
        <expr_stmt pos:start="2457:9" pos:end="2460:0"><expr pos:start="2457:9" pos:end="2457:33"><name pos:start="2457:9" pos:end="2457:11">ret</name> <operator pos:start="2457:13" pos:end="2457:13">=</operator> <call pos:start="2457:15" pos:end="2457:33"><name pos:start="2457:15" pos:end="2457:23">get_errno</name><argument_list pos:start="2457:24" pos:end="2457:33">(<argument pos:start="2457:25" pos:end="2457:32"><expr pos:start="2457:25" pos:end="2457:32"><call pos:start="2457:25" pos:end="2457:32"><name pos:start="2457:25" pos:end="2457:30">getuid</name><argument_list pos:start="2457:31" pos:end="2457:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2458:1" pos:end="2458:6">#<cpp:directive pos:start="2458:2" pos:end="2458:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="2459:1" pos:end="2459:55">#<cpp:directive pos:start="2459:2" pos:end="2459:3">if</cpp:directive> <expr pos:start="2459:5" pos:end="2459:55"><call pos:start="2459:5" pos:end="2459:30"><name pos:start="2459:5" pos:end="2459:11">defined</name><argument_list pos:start="2459:12" pos:end="2459:30">(<argument pos:start="2459:13" pos:end="2459:29"><expr pos:start="2459:13" pos:end="2459:29"><name pos:start="2459:13" pos:end="2459:29">TARGET_NR_getxuid</name></expr></argument>)</argument_list></call> <operator pos:start="2459:32" pos:end="2459:33">&amp;&amp;</operator> <call pos:start="2459:35" pos:end="2459:55"><name pos:start="2459:35" pos:end="2459:41">defined</name><argument_list pos:start="2459:42" pos:end="2459:55">(<argument pos:start="2459:43" pos:end="2459:54"><expr pos:start="2459:43" pos:end="2459:54"><name pos:start="2459:43" pos:end="2459:54">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <comment type="block" pos:start="2460:4" pos:end="2460:23">/* Alpha specific */</comment>
    <case pos:start="2461:5" pos:end="2461:27">case <expr pos:start="2461:10" pos:end="2461:26"><name pos:start="2461:10" pos:end="2461:26">TARGET_NR_getxuid</name></expr>:</case>
         <block pos:start="2462:10" pos:end="3541:14">{<block_content pos:start="2463:13" pos:end="3541:14">
            <decl_stmt pos:start="2463:13" pos:end="2463:23"><decl pos:start="2463:13" pos:end="2463:22"><type pos:start="2463:13" pos:end="2463:17"><name pos:start="2463:13" pos:end="2463:17">uid_t</name></type> <name pos:start="2463:19" pos:end="2463:22">euid</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2464:13" pos:end="2464:27"><expr pos:start="2464:13" pos:end="2464:26"><name pos:start="2464:13" pos:end="2464:16">euid</name><operator pos:start="2464:17" pos:end="2464:17">=</operator><call pos:start="2464:18" pos:end="2464:26"><name pos:start="2464:18" pos:end="2464:24">geteuid</name><argument_list pos:start="2464:25" pos:end="2464:26">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2465:13" pos:end="2465:55"><expr pos:start="2465:13" pos:end="2465:54"><operator pos:start="2465:13" pos:end="2465:13">(</operator><operator pos:start="2465:14" pos:end="2465:14">(</operator><name pos:start="2465:15" pos:end="2465:27">CPUAlphaState</name> <operator pos:start="2465:29" pos:end="2465:29">*</operator><operator pos:start="2465:30" pos:end="2465:30">)</operator><name pos:start="2465:31" pos:end="2465:37">cpu_env</name><operator pos:start="2465:38" pos:end="2465:38">)</operator><operator pos:start="2465:39" pos:end="2465:40">-&gt;</operator><name pos:start="2465:41" pos:end="2465:49"><name pos:start="2465:41" pos:end="2465:42">ir</name><index pos:start="2465:43" pos:end="2465:49">[<expr pos:start="2465:44" pos:end="2465:48"><name pos:start="2465:44" pos:end="2465:48">IR_A4</name></expr>]</index></name><operator pos:start="2465:50" pos:end="2465:50">=</operator><name pos:start="2465:51" pos:end="2465:54">euid</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2466:9" pos:end="2469:0"><expr pos:start="2466:9" pos:end="2466:33"><name pos:start="2466:9" pos:end="2466:11">ret</name> <operator pos:start="2466:13" pos:end="2466:13">=</operator> <call pos:start="2466:15" pos:end="2466:33"><name pos:start="2466:15" pos:end="2466:23">get_errno</name><argument_list pos:start="2466:24" pos:end="2466:33">(<argument pos:start="2466:25" pos:end="2466:32"><expr pos:start="2466:25" pos:end="2466:32"><call pos:start="2466:25" pos:end="2466:32"><name pos:start="2466:25" pos:end="2466:30">getuid</name><argument_list pos:start="2466:31" pos:end="2466:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2467:1" pos:end="2467:6">#<cpp:directive pos:start="2467:2" pos:end="2467:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="2468:1" pos:end="2468:55">#<cpp:directive pos:start="2468:2" pos:end="2468:3">if</cpp:directive> <expr pos:start="2468:5" pos:end="2468:55"><call pos:start="2468:5" pos:end="2468:30"><name pos:start="2468:5" pos:end="2468:11">defined</name><argument_list pos:start="2468:12" pos:end="2468:30">(<argument pos:start="2468:13" pos:end="2468:29"><expr pos:start="2468:13" pos:end="2468:29"><name pos:start="2468:13" pos:end="2468:29">TARGET_NR_getxgid</name></expr></argument>)</argument_list></call> <operator pos:start="2468:32" pos:end="2468:33">&amp;&amp;</operator> <call pos:start="2468:35" pos:end="2468:55"><name pos:start="2468:35" pos:end="2468:41">defined</name><argument_list pos:start="2468:42" pos:end="2468:55">(<argument pos:start="2468:43" pos:end="2468:54"><expr pos:start="2468:43" pos:end="2468:54"><name pos:start="2468:43" pos:end="2468:54">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <comment type="block" pos:start="2469:4" pos:end="2469:23">/* Alpha specific */</comment>
    <case pos:start="2470:5" pos:end="2470:27">case <expr pos:start="2470:10" pos:end="2470:26"><name pos:start="2470:10" pos:end="2470:26">TARGET_NR_getxgid</name></expr>:</case>
         <block pos:start="2471:10" pos:end="3541:14">{<block_content pos:start="2472:13" pos:end="3541:14">
            <decl_stmt pos:start="2472:13" pos:end="2472:23"><decl pos:start="2472:13" pos:end="2472:22"><type pos:start="2472:13" pos:end="2472:17"><name pos:start="2472:13" pos:end="2472:17">uid_t</name></type> <name pos:start="2472:19" pos:end="2472:22">egid</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2473:13" pos:end="2473:27"><expr pos:start="2473:13" pos:end="2473:26"><name pos:start="2473:13" pos:end="2473:16">egid</name><operator pos:start="2473:17" pos:end="2473:17">=</operator><call pos:start="2473:18" pos:end="2473:26"><name pos:start="2473:18" pos:end="2473:24">getegid</name><argument_list pos:start="2473:25" pos:end="2473:26">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2474:13" pos:end="2474:55"><expr pos:start="2474:13" pos:end="2474:54"><operator pos:start="2474:13" pos:end="2474:13">(</operator><operator pos:start="2474:14" pos:end="2474:14">(</operator><name pos:start="2474:15" pos:end="2474:27">CPUAlphaState</name> <operator pos:start="2474:29" pos:end="2474:29">*</operator><operator pos:start="2474:30" pos:end="2474:30">)</operator><name pos:start="2474:31" pos:end="2474:37">cpu_env</name><operator pos:start="2474:38" pos:end="2474:38">)</operator><operator pos:start="2474:39" pos:end="2474:40">-&gt;</operator><name pos:start="2474:41" pos:end="2474:49"><name pos:start="2474:41" pos:end="2474:42">ir</name><index pos:start="2474:43" pos:end="2474:49">[<expr pos:start="2474:44" pos:end="2474:48"><name pos:start="2474:44" pos:end="2474:48">IR_A4</name></expr>]</index></name><operator pos:start="2474:50" pos:end="2474:50">=</operator><name pos:start="2474:51" pos:end="2474:54">egid</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2475:9" pos:end="2478:0"><expr pos:start="2475:9" pos:end="2475:33"><name pos:start="2475:9" pos:end="2475:11">ret</name> <operator pos:start="2475:13" pos:end="2475:13">=</operator> <call pos:start="2475:15" pos:end="2475:33"><name pos:start="2475:15" pos:end="2475:23">get_errno</name><argument_list pos:start="2475:24" pos:end="2475:33">(<argument pos:start="2475:25" pos:end="2475:32"><expr pos:start="2475:25" pos:end="2475:32"><call pos:start="2475:25" pos:end="2475:32"><name pos:start="2475:25" pos:end="2475:30">getgid</name><argument_list pos:start="2475:31" pos:end="2475:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2476:1" pos:end="2476:6">#<cpp:directive pos:start="2476:2" pos:end="2476:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="2477:1" pos:end="2477:62">#<cpp:directive pos:start="2477:2" pos:end="2477:3">if</cpp:directive> <expr pos:start="2477:5" pos:end="2477:62"><call pos:start="2477:5" pos:end="2477:37"><name pos:start="2477:5" pos:end="2477:11">defined</name><argument_list pos:start="2477:12" pos:end="2477:37">(<argument pos:start="2477:13" pos:end="2477:36"><expr pos:start="2477:13" pos:end="2477:36"><name pos:start="2477:13" pos:end="2477:36">TARGET_NR_osf_getsysinfo</name></expr></argument>)</argument_list></call> <operator pos:start="2477:39" pos:end="2477:40">&amp;&amp;</operator> <call pos:start="2477:42" pos:end="2477:62"><name pos:start="2477:42" pos:end="2477:48">defined</name><argument_list pos:start="2477:49" pos:end="2477:62">(<argument pos:start="2477:50" pos:end="2477:61"><expr pos:start="2477:50" pos:end="2477:61"><name pos:start="2477:50" pos:end="2477:61">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block" pos:start="2478:5" pos:end="2478:24">/* Alpha specific */</comment>
    <case pos:start="2479:5" pos:end="2479:34">case <expr pos:start="2479:10" pos:end="2479:33"><name pos:start="2479:10" pos:end="2479:33">TARGET_NR_osf_getsysinfo</name></expr>:</case>
        <expr_stmt pos:start="2480:9" pos:end="2480:33"><expr pos:start="2480:9" pos:end="2480:32"><name pos:start="2480:9" pos:end="2480:11">ret</name> <operator pos:start="2480:13" pos:end="2480:13">=</operator> <operator pos:start="2480:15" pos:end="2480:15">-</operator><name pos:start="2480:16" pos:end="2480:32">TARGET_EOPNOTSUPP</name></expr>;</expr_stmt>
        <switch pos:start="2481:9" pos:end="3541:14">switch <condition pos:start="2481:16" pos:end="2481:21">(<expr pos:start="2481:17" pos:end="2481:20"><name pos:start="2481:17" pos:end="2481:20">arg1</name></expr>)</condition> <block pos:start="2481:23" pos:end="3541:14">{<block_content pos:start="2482:11" pos:end="3541:14">
          <case pos:start="2482:11" pos:end="2482:42">case <expr pos:start="2482:16" pos:end="2482:41"><name pos:start="2482:16" pos:end="2482:41">TARGET_GSI_IEEE_FP_CONTROL</name></expr>:</case>
            <block pos:start="2483:13" pos:end="3541:14">{<block_content pos:start="2484:17" pos:end="3541:14">
                <decl_stmt pos:start="2484:17" pos:end="2484:68"><decl pos:start="2484:17" pos:end="2484:29"><type pos:start="2484:17" pos:end="2484:24"><name pos:start="2484:17" pos:end="2484:24">uint64_t</name></type> <name pos:start="2484:26" pos:end="2484:29">swcr</name></decl>, <decl pos:start="2484:32" pos:end="2484:67"><type ref="prev" pos:start="2484:17" pos:end="2484:24"/><name pos:start="2484:32" pos:end="2484:35">fpcr</name> <init pos:start="2484:37" pos:end="2484:67">= <expr pos:start="2484:39" pos:end="2484:67"><call pos:start="2484:39" pos:end="2484:67"><name pos:start="2484:39" pos:end="2484:57">cpu_alpha_load_fpcr</name> <argument_list pos:start="2484:59" pos:end="2484:67">(<argument pos:start="2484:60" pos:end="2484:66"><expr pos:start="2484:60" pos:end="2484:66"><name pos:start="2484:60" pos:end="2484:66">cpu_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="block" pos:start="2485:17" pos:end="2485:59">/* Copied from linux ieee_fpcr_to_swcr.  */</comment>
                <expr_stmt pos:start="2486:17" pos:end="2486:55"><expr pos:start="2486:17" pos:end="2486:54"><name pos:start="2486:17" pos:end="2486:20">swcr</name> <operator pos:start="2486:22" pos:end="2486:22">=</operator> <operator pos:start="2486:24" pos:end="2486:24">(</operator><name pos:start="2486:25" pos:end="2486:28">fpcr</name> <operator pos:start="2486:30" pos:end="2486:31">&gt;&gt;</operator> <literal type="number" pos:start="2486:33" pos:end="2486:34">35</literal><operator pos:start="2486:35" pos:end="2486:35">)</operator> <operator pos:start="2486:37" pos:end="2486:37">&amp;</operator> <name pos:start="2486:39" pos:end="2486:54">SWCR_STATUS_MASK</name></expr>;</expr_stmt>
                <expr_stmt pos:start="2487:17" pos:end="2487:52"><expr pos:start="2487:17" pos:end="2487:51"><name pos:start="2487:17" pos:end="2487:20">swcr</name> <operator pos:start="2487:22" pos:end="2487:23">|=</operator> <operator pos:start="2487:25" pos:end="2487:25">(</operator><name pos:start="2487:26" pos:end="2487:29">fpcr</name> <operator pos:start="2487:31" pos:end="2487:32">&gt;&gt;</operator> <literal type="number" pos:start="2487:34" pos:end="2487:35">36</literal><operator pos:start="2487:36" pos:end="2487:36">)</operator> <operator pos:start="2487:38" pos:end="2487:38">&amp;</operator> <name pos:start="2487:40" pos:end="2487:51">SWCR_MAP_DMZ</name></expr>;</expr_stmt>
                <expr_stmt pos:start="2488:17" pos:end="2490:64"><expr pos:start="2488:17" pos:end="2490:63"><name pos:start="2488:17" pos:end="2488:20">swcr</name> <operator pos:start="2488:22" pos:end="2488:23">|=</operator> <operator pos:start="2488:25" pos:end="2488:25">(</operator><operator pos:start="2488:26" pos:end="2488:26">~</operator><name pos:start="2488:27" pos:end="2488:30">fpcr</name> <operator pos:start="2488:32" pos:end="2488:33">&gt;&gt;</operator> <literal type="number" pos:start="2488:35" pos:end="2488:36">48</literal><operator pos:start="2488:37" pos:end="2488:37">)</operator> <operator pos:start="2488:39" pos:end="2488:39">&amp;</operator> <operator pos:start="2488:41" pos:end="2488:41">(</operator><name pos:start="2488:42" pos:end="2488:61">SWCR_TRAP_ENABLE_INV</name>
                                        <operator pos:start="2489:41" pos:end="2489:41">|</operator> <name pos:start="2489:43" pos:end="2489:62">SWCR_TRAP_ENABLE_DZE</name>
                                        <operator pos:start="2490:41" pos:end="2490:41">|</operator> <name pos:start="2490:43" pos:end="2490:62">SWCR_TRAP_ENABLE_OVF</name><operator pos:start="2490:63" pos:end="2490:63">)</operator></expr>;</expr_stmt>
                <expr_stmt pos:start="2491:17" pos:end="2492:64"><expr pos:start="2491:17" pos:end="2492:63"><name pos:start="2491:17" pos:end="2491:20">swcr</name> <operator pos:start="2491:22" pos:end="2491:23">|=</operator> <operator pos:start="2491:25" pos:end="2491:25">(</operator><operator pos:start="2491:26" pos:end="2491:26">~</operator><name pos:start="2491:27" pos:end="2491:30">fpcr</name> <operator pos:start="2491:32" pos:end="2491:33">&gt;&gt;</operator> <literal type="number" pos:start="2491:35" pos:end="2491:36">57</literal><operator pos:start="2491:37" pos:end="2491:37">)</operator> <operator pos:start="2491:39" pos:end="2491:39">&amp;</operator> <operator pos:start="2491:41" pos:end="2491:41">(</operator><name pos:start="2491:42" pos:end="2491:61">SWCR_TRAP_ENABLE_UNF</name>
                                        <operator pos:start="2492:41" pos:end="2492:41">|</operator> <name pos:start="2492:43" pos:end="2492:62">SWCR_TRAP_ENABLE_INE</name><operator pos:start="2492:63" pos:end="2492:63">)</operator></expr>;</expr_stmt>
                <expr_stmt pos:start="2493:17" pos:end="2493:52"><expr pos:start="2493:17" pos:end="2493:51"><name pos:start="2493:17" pos:end="2493:20">swcr</name> <operator pos:start="2493:22" pos:end="2493:23">|=</operator> <operator pos:start="2493:25" pos:end="2493:25">(</operator><name pos:start="2493:26" pos:end="2493:29">fpcr</name> <operator pos:start="2493:31" pos:end="2493:32">&gt;&gt;</operator> <literal type="number" pos:start="2493:34" pos:end="2493:35">47</literal><operator pos:start="2493:36" pos:end="2493:36">)</operator> <operator pos:start="2493:38" pos:end="2493:38">&amp;</operator> <name pos:start="2493:40" pos:end="2493:51">SWCR_MAP_UMZ</name></expr>;</expr_stmt>
                <expr_stmt pos:start="2494:17" pos:end="2494:61"><expr pos:start="2494:17" pos:end="2494:60"><name pos:start="2494:17" pos:end="2494:20">swcr</name> <operator pos:start="2494:22" pos:end="2494:23">|=</operator> <operator pos:start="2494:25" pos:end="2494:25">(</operator><operator pos:start="2494:26" pos:end="2494:26">~</operator><name pos:start="2494:27" pos:end="2494:30">fpcr</name> <operator pos:start="2494:32" pos:end="2494:33">&gt;&gt;</operator> <literal type="number" pos:start="2494:35" pos:end="2494:36">41</literal><operator pos:start="2494:37" pos:end="2494:37">)</operator> <operator pos:start="2494:39" pos:end="2494:39">&amp;</operator> <name pos:start="2494:41" pos:end="2494:60">SWCR_TRAP_ENABLE_DNO</name></expr>;</expr_stmt>
                <if_stmt pos:start="2495:17" pos:end="2496:36"><if pos:start="2495:17" pos:end="2496:36">if <condition pos:start="2495:20" pos:end="2495:46">(<expr pos:start="2495:21" pos:end="2495:45"><call pos:start="2495:21" pos:end="2495:45"><name pos:start="2495:21" pos:end="2495:32">put_user_u64</name> <argument_list pos:start="2495:34" pos:end="2495:45">(<argument pos:start="2495:35" pos:end="2495:38"><expr pos:start="2495:35" pos:end="2495:38"><name pos:start="2495:35" pos:end="2495:38">swcr</name></expr></argument>, <argument pos:start="2495:41" pos:end="2495:44"><expr pos:start="2495:41" pos:end="2495:44"><name pos:start="2495:41" pos:end="2495:44">arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2496:25" pos:end="2496:36"><block_content pos:start="2496:25" pos:end="2496:36">
                        <goto pos:start="2496:25" pos:end="2496:36">goto <name pos:start="2496:30" pos:end="2496:35">efault</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="2497:17" pos:end="2509:0"><expr pos:start="2497:17" pos:end="2497:23"><name pos:start="2497:17" pos:end="2497:19">ret</name> <operator pos:start="2497:21" pos:end="2497:21">=</operator> <literal type="number" pos:start="2497:23" pos:end="2497:23">0</literal></expr>;</expr_stmt>
          <comment type="block" pos:start="2498:11" pos:end="2506:12">/* case GSI_IEEE_STATE_AT_SIGNAL:
             -- Not implemented in linux kernel.
             case GSI_UACPROC:
             -- Retrieves current unaligned access state; not much used.
             case GSI_PROC_TYPE:
             -- Retrieves implver information; surely not used.
             case GSI_GET_HWRPB:
             -- Grabs a copy of the HWRPB; surely not used.
          */</comment>
<cpp:endif pos:start="2507:1" pos:end="2507:6">#<cpp:directive pos:start="2507:2" pos:end="2507:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="2508:1" pos:end="2508:62">#<cpp:directive pos:start="2508:2" pos:end="2508:3">if</cpp:directive> <expr pos:start="2508:5" pos:end="2508:62"><call pos:start="2508:5" pos:end="2508:37"><name pos:start="2508:5" pos:end="2508:11">defined</name><argument_list pos:start="2508:12" pos:end="2508:37">(<argument pos:start="2508:13" pos:end="2508:36"><expr pos:start="2508:13" pos:end="2508:36"><name pos:start="2508:13" pos:end="2508:36">TARGET_NR_osf_setsysinfo</name></expr></argument>)</argument_list></call> <operator pos:start="2508:39" pos:end="2508:40">&amp;&amp;</operator> <call pos:start="2508:42" pos:end="2508:62"><name pos:start="2508:42" pos:end="2508:48">defined</name><argument_list pos:start="2508:49" pos:end="2508:62">(<argument pos:start="2508:50" pos:end="2508:61"><expr pos:start="2508:50" pos:end="2508:61"><name pos:start="2508:50" pos:end="2508:61">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block" pos:start="2509:5" pos:end="2509:24">/* Alpha specific */</comment>
    <case pos:start="2510:5" pos:end="2510:34">case <expr pos:start="2510:10" pos:end="2510:33"><name pos:start="2510:10" pos:end="2510:33">TARGET_NR_osf_setsysinfo</name></expr>:</case>
        <expr_stmt pos:start="2511:9" pos:end="2511:33"><expr pos:start="2511:9" pos:end="2511:32"><name pos:start="2511:9" pos:end="2511:11">ret</name> <operator pos:start="2511:13" pos:end="2511:13">=</operator> <operator pos:start="2511:15" pos:end="2511:15">-</operator><name pos:start="2511:16" pos:end="2511:32">TARGET_EOPNOTSUPP</name></expr>;</expr_stmt>
        <switch pos:start="2512:9" pos:end="3541:14">switch <condition pos:start="2512:16" pos:end="2512:21">(<expr pos:start="2512:17" pos:end="2512:20"><name pos:start="2512:17" pos:end="2512:20">arg1</name></expr>)</condition> <block pos:start="2512:23" pos:end="3541:14">{<block_content pos:start="2513:11" pos:end="3541:14">
          <case pos:start="2513:11" pos:end="2513:42">case <expr pos:start="2513:16" pos:end="2513:41"><name pos:start="2513:16" pos:end="2513:41">TARGET_SSI_IEEE_FP_CONTROL</name></expr>:</case>
            <block pos:start="2514:13" pos:end="3541:14">{<block_content pos:start="2515:17" pos:end="3541:14">
                <decl_stmt pos:start="2515:17" pos:end="2515:47"><decl pos:start="2515:17" pos:end="2515:29"><type pos:start="2515:17" pos:end="2515:24"><name pos:start="2515:17" pos:end="2515:24">uint64_t</name></type> <name pos:start="2515:26" pos:end="2515:29">swcr</name></decl>, <decl pos:start="2515:32" pos:end="2515:35"><type ref="prev" pos:start="2515:17" pos:end="2515:24"/><name pos:start="2515:32" pos:end="2515:35">fpcr</name></decl>, <decl pos:start="2515:38" pos:end="2515:46"><type ref="prev" pos:start="2515:17" pos:end="2515:24"/><name pos:start="2515:38" pos:end="2515:46">orig_fpcr</name></decl>;</decl_stmt>
                <if_stmt pos:start="2516:17" pos:end="3541:14"><if pos:start="2516:17" pos:end="3541:14">if <condition pos:start="2516:20" pos:end="2516:46">(<expr pos:start="2516:21" pos:end="2516:45"><call pos:start="2516:21" pos:end="2516:45"><name pos:start="2516:21" pos:end="2516:32">get_user_u64</name> <argument_list pos:start="2516:34" pos:end="2516:45">(<argument pos:start="2516:35" pos:end="2516:38"><expr pos:start="2516:35" pos:end="2516:38"><name pos:start="2516:35" pos:end="2516:38">swcr</name></expr></argument>, <argument pos:start="2516:41" pos:end="2516:44"><expr pos:start="2516:41" pos:end="2516:44"><name pos:start="2516:41" pos:end="2516:44">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2516:48" pos:end="3541:14">{<block_content pos:start="2517:21" pos:end="3541:14">
                    <goto pos:start="2517:21" pos:end="2517:32">goto <name pos:start="2517:26" pos:end="2517:31">efault</name>;</goto>
                <expr_stmt pos:start="2518:17" pos:end="2518:57"><expr pos:start="2518:17" pos:end="2518:56"><name pos:start="2518:17" pos:end="2518:25">orig_fpcr</name> <operator pos:start="2518:27" pos:end="2518:27">=</operator> <call pos:start="2518:29" pos:end="2518:56"><name pos:start="2518:29" pos:end="2518:47">cpu_alpha_load_fpcr</name><argument_list pos:start="2518:48" pos:end="2518:56">(<argument pos:start="2518:49" pos:end="2518:55"><expr pos:start="2518:49" pos:end="2518:55"><name pos:start="2518:49" pos:end="2518:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2519:17" pos:end="2519:49"><expr pos:start="2519:17" pos:end="2519:48"><name pos:start="2519:17" pos:end="2519:20">fpcr</name> <operator pos:start="2519:22" pos:end="2519:22">=</operator> <name pos:start="2519:24" pos:end="2519:32">orig_fpcr</name> <operator pos:start="2519:34" pos:end="2519:34">&amp;</operator> <name pos:start="2519:36" pos:end="2519:48">FPCR_DYN_MASK</name></expr>;</expr_stmt>
                <comment type="block" pos:start="2520:17" pos:end="2520:59">/* Copied from linux ieee_swcr_to_fpcr.  */</comment>
                <expr_stmt pos:start="2521:17" pos:end="2521:56"><expr pos:start="2521:17" pos:end="2521:55"><name pos:start="2521:17" pos:end="2521:20">fpcr</name> <operator pos:start="2521:22" pos:end="2521:23">|=</operator> <operator pos:start="2521:25" pos:end="2521:25">(</operator><name pos:start="2521:26" pos:end="2521:29">swcr</name> <operator pos:start="2521:31" pos:end="2521:31">&amp;</operator> <name pos:start="2521:33" pos:end="2521:48">SWCR_STATUS_MASK</name><operator pos:start="2521:49" pos:end="2521:49">)</operator> <operator pos:start="2521:51" pos:end="2521:52">&lt;&lt;</operator> <literal type="number" pos:start="2521:54" pos:end="2521:55">35</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="2522:17" pos:end="2522:52"><expr pos:start="2522:17" pos:end="2522:51"><name pos:start="2522:17" pos:end="2522:20">fpcr</name> <operator pos:start="2522:22" pos:end="2522:23">|=</operator> <operator pos:start="2522:25" pos:end="2522:25">(</operator><name pos:start="2522:26" pos:end="2522:29">swcr</name> <operator pos:start="2522:31" pos:end="2522:31">&amp;</operator> <name pos:start="2522:33" pos:end="2522:44">SWCR_MAP_DMZ</name><operator pos:start="2522:45" pos:end="2522:45">)</operator> <operator pos:start="2522:47" pos:end="2522:48">&lt;&lt;</operator> <literal type="number" pos:start="2522:50" pos:end="2522:51">36</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="2523:17" pos:end="2525:65"><expr pos:start="2523:17" pos:end="2525:64"><name pos:start="2523:17" pos:end="2523:20">fpcr</name> <operator pos:start="2523:22" pos:end="2523:23">|=</operator> <operator pos:start="2523:25" pos:end="2523:25">(</operator><operator pos:start="2523:26" pos:end="2523:26">~</operator><name pos:start="2523:27" pos:end="2523:30">swcr</name> <operator pos:start="2523:32" pos:end="2523:32">&amp;</operator> <operator pos:start="2523:34" pos:end="2523:34">(</operator><name pos:start="2523:35" pos:end="2523:54">SWCR_TRAP_ENABLE_INV</name>
                                  <operator pos:start="2524:35" pos:end="2524:35">|</operator> <name pos:start="2524:37" pos:end="2524:56">SWCR_TRAP_ENABLE_DZE</name>
                                  <operator pos:start="2525:35" pos:end="2525:35">|</operator> <name pos:start="2525:37" pos:end="2525:56">SWCR_TRAP_ENABLE_OVF</name><operator pos:start="2525:57" pos:end="2525:57">)</operator><operator pos:start="2525:58" pos:end="2525:58">)</operator> <operator pos:start="2525:60" pos:end="2525:61">&lt;&lt;</operator> <literal type="number" pos:start="2525:63" pos:end="2525:64">48</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="2526:17" pos:end="2527:65"><expr pos:start="2526:17" pos:end="2527:64"><name pos:start="2526:17" pos:end="2526:20">fpcr</name> <operator pos:start="2526:22" pos:end="2526:23">|=</operator> <operator pos:start="2526:25" pos:end="2526:25">(</operator><operator pos:start="2526:26" pos:end="2526:26">~</operator><name pos:start="2526:27" pos:end="2526:30">swcr</name> <operator pos:start="2526:32" pos:end="2526:32">&amp;</operator> <operator pos:start="2526:34" pos:end="2526:34">(</operator><name pos:start="2526:35" pos:end="2526:54">SWCR_TRAP_ENABLE_UNF</name>
                                  <operator pos:start="2527:35" pos:end="2527:35">|</operator> <name pos:start="2527:37" pos:end="2527:56">SWCR_TRAP_ENABLE_INE</name><operator pos:start="2527:57" pos:end="2527:57">)</operator><operator pos:start="2527:58" pos:end="2527:58">)</operator> <operator pos:start="2527:60" pos:end="2527:61">&lt;&lt;</operator> <literal type="number" pos:start="2527:63" pos:end="2527:64">57</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="2528:17" pos:end="2528:74"><expr pos:start="2528:17" pos:end="2528:73"><name pos:start="2528:17" pos:end="2528:20">fpcr</name> <operator pos:start="2528:22" pos:end="2528:23">|=</operator> <operator pos:start="2528:25" pos:end="2528:25">(</operator><ternary pos:start="2528:26" pos:end="2528:72"><condition pos:start="2528:26" pos:end="2528:46"><expr pos:start="2528:26" pos:end="2528:44"><name pos:start="2528:26" pos:end="2528:29">swcr</name> <operator pos:start="2528:31" pos:end="2528:31">&amp;</operator> <name pos:start="2528:33" pos:end="2528:44">SWCR_MAP_UMZ</name></expr> ?</condition><then pos:start="2528:48" pos:end="2528:68"> <expr pos:start="2528:48" pos:end="2528:68"><name pos:start="2528:48" pos:end="2528:56">FPCR_UNDZ</name> <operator pos:start="2528:58" pos:end="2528:58">|</operator> <name pos:start="2528:60" pos:end="2528:68">FPCR_UNFD</name></expr> </then><else pos:start="2528:70" pos:end="2528:72">: <expr pos:start="2528:72" pos:end="2528:72"><literal type="number" pos:start="2528:72" pos:end="2528:72">0</literal></expr></else></ternary><operator pos:start="2528:73" pos:end="2528:73">)</operator></expr>;</expr_stmt>
                <expr_stmt pos:start="2529:17" pos:end="2529:61"><expr pos:start="2529:17" pos:end="2529:60"><name pos:start="2529:17" pos:end="2529:20">fpcr</name> <operator pos:start="2529:22" pos:end="2529:23">|=</operator> <operator pos:start="2529:25" pos:end="2529:25">(</operator><operator pos:start="2529:26" pos:end="2529:26">~</operator><name pos:start="2529:27" pos:end="2529:30">swcr</name> <operator pos:start="2529:32" pos:end="2529:32">&amp;</operator> <name pos:start="2529:34" pos:end="2529:53">SWCR_TRAP_ENABLE_DNO</name><operator pos:start="2529:54" pos:end="2529:54">)</operator> <operator pos:start="2529:56" pos:end="2529:57">&lt;&lt;</operator> <literal type="number" pos:start="2529:59" pos:end="2529:60">41</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="2530:17" pos:end="2530:52"><expr pos:start="2530:17" pos:end="2530:51"><call pos:start="2530:17" pos:end="2530:51"><name pos:start="2530:17" pos:end="2530:36">cpu_alpha_store_fpcr</name><argument_list pos:start="2530:37" pos:end="2530:51">(<argument pos:start="2530:38" pos:end="2530:44"><expr pos:start="2530:38" pos:end="2530:44"><name pos:start="2530:38" pos:end="2530:44">cpu_env</name></expr></argument>, <argument pos:start="2530:47" pos:end="2530:50"><expr pos:start="2530:47" pos:end="2530:50"><name pos:start="2530:47" pos:end="2530:50">fpcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2531:17" pos:end="2531:24"><expr pos:start="2531:17" pos:end="2531:23"><name pos:start="2531:17" pos:end="2531:19">ret</name> <operator pos:start="2531:21" pos:end="2531:21">=</operator> <literal type="number" pos:start="2531:23" pos:end="2531:23">0</literal></expr>;</expr_stmt>
          <case pos:start="2532:11" pos:end="2532:47">case <expr pos:start="2532:16" pos:end="2532:46"><name pos:start="2532:16" pos:end="2532:46">TARGET_SSI_IEEE_RAISE_EXCEPTION</name></expr>:</case>
            <block pos:start="2533:13" pos:end="3541:14">{<block_content pos:start="2534:17" pos:end="3541:14">
                <decl_stmt pos:start="2534:17" pos:end="2534:46"><decl pos:start="2534:17" pos:end="2534:28"><type pos:start="2534:17" pos:end="2534:24"><name pos:start="2534:17" pos:end="2534:24">uint64_t</name></type> <name pos:start="2534:26" pos:end="2534:28">exc</name></decl>, <decl pos:start="2534:31" pos:end="2534:34"><type ref="prev" pos:start="2534:17" pos:end="2534:24"/><name pos:start="2534:31" pos:end="2534:34">fpcr</name></decl>, <decl pos:start="2534:37" pos:end="2534:45"><type ref="prev" pos:start="2534:17" pos:end="2534:24"/><name pos:start="2534:37" pos:end="2534:45">orig_fpcr</name></decl>;</decl_stmt>
                <decl_stmt pos:start="2535:17" pos:end="2535:28"><decl pos:start="2535:17" pos:end="2535:27"><type pos:start="2535:17" pos:end="2535:19"><name pos:start="2535:17" pos:end="2535:19">int</name></type> <name pos:start="2535:21" pos:end="2535:27">si_code</name></decl>;</decl_stmt>
                <if_stmt pos:start="2536:17" pos:end="3541:14"><if pos:start="2536:17" pos:end="3541:14">if <condition pos:start="2536:20" pos:end="2536:44">(<expr pos:start="2536:21" pos:end="2536:43"><call pos:start="2536:21" pos:end="2536:43"><name pos:start="2536:21" pos:end="2536:32">get_user_u64</name><argument_list pos:start="2536:33" pos:end="2536:43">(<argument pos:start="2536:34" pos:end="2536:36"><expr pos:start="2536:34" pos:end="2536:36"><name pos:start="2536:34" pos:end="2536:36">exc</name></expr></argument>, <argument pos:start="2536:39" pos:end="2536:42"><expr pos:start="2536:39" pos:end="2536:42"><name pos:start="2536:39" pos:end="2536:42">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2536:46" pos:end="3541:14">{<block_content pos:start="2537:21" pos:end="3541:14">
                    <goto pos:start="2537:21" pos:end="2537:32">goto <name pos:start="2537:26" pos:end="2537:31">efault</name>;</goto>
                <expr_stmt pos:start="2538:17" pos:end="2538:57"><expr pos:start="2538:17" pos:end="2538:56"><name pos:start="2538:17" pos:end="2538:25">orig_fpcr</name> <operator pos:start="2538:27" pos:end="2538:27">=</operator> <call pos:start="2538:29" pos:end="2538:56"><name pos:start="2538:29" pos:end="2538:47">cpu_alpha_load_fpcr</name><argument_list pos:start="2538:48" pos:end="2538:56">(<argument pos:start="2538:49" pos:end="2538:55"><expr pos:start="2538:49" pos:end="2538:55"><name pos:start="2538:49" pos:end="2538:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="2539:17" pos:end="2539:64">/* We only add to the exception status here.  */</comment>
                <expr_stmt pos:start="2540:17" pos:end="2540:68"><expr pos:start="2540:17" pos:end="2540:67"><name pos:start="2540:17" pos:end="2540:20">fpcr</name> <operator pos:start="2540:22" pos:end="2540:22">=</operator> <name pos:start="2540:24" pos:end="2540:32">orig_fpcr</name> <operator pos:start="2540:34" pos:end="2540:34">|</operator> <operator pos:start="2540:36" pos:end="2540:36">(</operator><operator pos:start="2540:37" pos:end="2540:37">(</operator><name pos:start="2540:38" pos:end="2540:40">exc</name> <operator pos:start="2540:42" pos:end="2540:42">&amp;</operator> <name pos:start="2540:44" pos:end="2540:59">SWCR_STATUS_MASK</name><operator pos:start="2540:60" pos:end="2540:60">)</operator> <operator pos:start="2540:62" pos:end="2540:63">&lt;&lt;</operator> <literal type="number" pos:start="2540:65" pos:end="2540:66">35</literal><operator pos:start="2540:67" pos:end="2540:67">)</operator></expr>;</expr_stmt>
                <expr_stmt pos:start="2541:17" pos:end="2541:52"><expr pos:start="2541:17" pos:end="2541:51"><call pos:start="2541:17" pos:end="2541:51"><name pos:start="2541:17" pos:end="2541:36">cpu_alpha_store_fpcr</name><argument_list pos:start="2541:37" pos:end="2541:51">(<argument pos:start="2541:38" pos:end="2541:44"><expr pos:start="2541:38" pos:end="2541:44"><name pos:start="2541:38" pos:end="2541:44">cpu_env</name></expr></argument>, <argument pos:start="2541:47" pos:end="2541:50"><expr pos:start="2541:47" pos:end="2541:50"><name pos:start="2541:47" pos:end="2541:50">fpcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2542:17" pos:end="2542:24"><expr pos:start="2542:17" pos:end="2542:23"><name pos:start="2542:17" pos:end="2542:19">ret</name> <operator pos:start="2542:21" pos:end="2542:21">=</operator> <literal type="number" pos:start="2542:23" pos:end="2542:23">0</literal></expr>;</expr_stmt>
                <comment type="block" pos:start="2543:17" pos:end="2543:55">/* Old exceptions are not signaled.  */</comment>
                <expr_stmt pos:start="2544:17" pos:end="2544:56"><expr pos:start="2544:17" pos:end="2544:55"><name pos:start="2544:17" pos:end="2544:20">fpcr</name> <operator pos:start="2544:22" pos:end="2544:23">&amp;=</operator> <operator pos:start="2544:25" pos:end="2544:25">~</operator><operator pos:start="2544:26" pos:end="2544:26">(</operator><name pos:start="2544:27" pos:end="2544:35">orig_fpcr</name> <operator pos:start="2544:37" pos:end="2544:37">&amp;</operator> <name pos:start="2544:39" pos:end="2544:54">FPCR_STATUS_MASK</name><operator pos:start="2544:55" pos:end="2544:55">)</operator></expr>;</expr_stmt>
                <comment type="block" pos:start="2545:17" pos:end="2546:55">/* If any exceptions set by this call,
                   and are unmasked, send a signal.  */</comment>
                <expr_stmt pos:start="2547:17" pos:end="2547:28"><expr pos:start="2547:17" pos:end="2547:27"><name pos:start="2547:17" pos:end="2547:23">si_code</name> <operator pos:start="2547:25" pos:end="2547:25">=</operator> <literal type="number" pos:start="2547:27" pos:end="2547:27">0</literal></expr>;</expr_stmt>
                <if_stmt pos:start="2548:17" pos:end="3541:14"><if pos:start="2548:17" pos:end="3541:14">if <condition pos:start="2548:20" pos:end="2548:64">(<expr pos:start="2548:21" pos:end="2548:63"><operator pos:start="2548:21" pos:end="2548:21">(</operator><name pos:start="2548:22" pos:end="2548:25">fpcr</name> <operator pos:start="2548:27" pos:end="2548:27">&amp;</operator> <operator pos:start="2548:29" pos:end="2548:29">(</operator><name pos:start="2548:30" pos:end="2548:37">FPCR_INE</name> <operator pos:start="2548:39" pos:end="2548:39">|</operator> <name pos:start="2548:41" pos:end="2548:49">FPCR_INED</name><operator pos:start="2548:50" pos:end="2548:50">)</operator><operator pos:start="2548:51" pos:end="2548:51">)</operator> <operator pos:start="2548:53" pos:end="2548:54">==</operator> <name pos:start="2548:56" pos:end="2548:63">FPCR_INE</name></expr>)</condition> <block pos:start="2548:66" pos:end="3541:14">{<block_content pos:start="2549:21" pos:end="3541:14">
                    <expr_stmt pos:start="2549:21" pos:end="2549:48"><expr pos:start="2549:21" pos:end="2549:47"><name pos:start="2549:21" pos:end="2549:27">si_code</name> <operator pos:start="2549:29" pos:end="2549:29">=</operator> <name pos:start="2549:31" pos:end="2549:47">TARGET_FPE_FLTRES</name></expr>;</expr_stmt>
                <if_stmt pos:start="2550:17" pos:end="3541:14"><if pos:start="2550:17" pos:end="3541:14">if <condition pos:start="2550:20" pos:end="2550:64">(<expr pos:start="2550:21" pos:end="2550:63"><operator pos:start="2550:21" pos:end="2550:21">(</operator><name pos:start="2550:22" pos:end="2550:25">fpcr</name> <operator pos:start="2550:27" pos:end="2550:27">&amp;</operator> <operator pos:start="2550:29" pos:end="2550:29">(</operator><name pos:start="2550:30" pos:end="2550:37">FPCR_UNF</name> <operator pos:start="2550:39" pos:end="2550:39">|</operator> <name pos:start="2550:41" pos:end="2550:49">FPCR_UNFD</name><operator pos:start="2550:50" pos:end="2550:50">)</operator><operator pos:start="2550:51" pos:end="2550:51">)</operator> <operator pos:start="2550:53" pos:end="2550:54">==</operator> <name pos:start="2550:56" pos:end="2550:63">FPCR_UNF</name></expr>)</condition> <block pos:start="2550:66" pos:end="3541:14">{<block_content pos:start="2551:21" pos:end="3541:14">
                    <expr_stmt pos:start="2551:21" pos:end="2551:48"><expr pos:start="2551:21" pos:end="2551:47"><name pos:start="2551:21" pos:end="2551:27">si_code</name> <operator pos:start="2551:29" pos:end="2551:29">=</operator> <name pos:start="2551:31" pos:end="2551:47">TARGET_FPE_FLTUND</name></expr>;</expr_stmt>
                <if_stmt pos:start="2552:17" pos:end="3541:14"><if pos:start="2552:17" pos:end="3541:14">if <condition pos:start="2552:20" pos:end="2552:64">(<expr pos:start="2552:21" pos:end="2552:63"><operator pos:start="2552:21" pos:end="2552:21">(</operator><name pos:start="2552:22" pos:end="2552:25">fpcr</name> <operator pos:start="2552:27" pos:end="2552:27">&amp;</operator> <operator pos:start="2552:29" pos:end="2552:29">(</operator><name pos:start="2552:30" pos:end="2552:37">FPCR_OVF</name> <operator pos:start="2552:39" pos:end="2552:39">|</operator> <name pos:start="2552:41" pos:end="2552:49">FPCR_OVFD</name><operator pos:start="2552:50" pos:end="2552:50">)</operator><operator pos:start="2552:51" pos:end="2552:51">)</operator> <operator pos:start="2552:53" pos:end="2552:54">==</operator> <name pos:start="2552:56" pos:end="2552:63">FPCR_OVF</name></expr>)</condition> <block pos:start="2552:66" pos:end="3541:14">{<block_content pos:start="2553:21" pos:end="3541:14">
                    <expr_stmt pos:start="2553:21" pos:end="2553:48"><expr pos:start="2553:21" pos:end="2553:47"><name pos:start="2553:21" pos:end="2553:27">si_code</name> <operator pos:start="2553:29" pos:end="2553:29">=</operator> <name pos:start="2553:31" pos:end="2553:47">TARGET_FPE_FLTOVF</name></expr>;</expr_stmt>
                <if_stmt pos:start="2554:17" pos:end="3541:14"><if pos:start="2554:17" pos:end="3541:14">if <condition pos:start="2554:20" pos:end="2554:64">(<expr pos:start="2554:21" pos:end="2554:63"><operator pos:start="2554:21" pos:end="2554:21">(</operator><name pos:start="2554:22" pos:end="2554:25">fpcr</name> <operator pos:start="2554:27" pos:end="2554:27">&amp;</operator> <operator pos:start="2554:29" pos:end="2554:29">(</operator><name pos:start="2554:30" pos:end="2554:37">FPCR_DZE</name> <operator pos:start="2554:39" pos:end="2554:39">|</operator> <name pos:start="2554:41" pos:end="2554:49">FPCR_DZED</name><operator pos:start="2554:50" pos:end="2554:50">)</operator><operator pos:start="2554:51" pos:end="2554:51">)</operator> <operator pos:start="2554:53" pos:end="2554:54">==</operator> <name pos:start="2554:56" pos:end="2554:63">FPCR_DZE</name></expr>)</condition> <block pos:start="2554:66" pos:end="3541:14">{<block_content pos:start="2555:21" pos:end="3541:14">
                    <expr_stmt pos:start="2555:21" pos:end="2555:48"><expr pos:start="2555:21" pos:end="2555:47"><name pos:start="2555:21" pos:end="2555:27">si_code</name> <operator pos:start="2555:29" pos:end="2555:29">=</operator> <name pos:start="2555:31" pos:end="2555:47">TARGET_FPE_FLTDIV</name></expr>;</expr_stmt>
                <if_stmt pos:start="2556:17" pos:end="3541:14"><if pos:start="2556:17" pos:end="3541:14">if <condition pos:start="2556:20" pos:end="2556:64">(<expr pos:start="2556:21" pos:end="2556:63"><operator pos:start="2556:21" pos:end="2556:21">(</operator><name pos:start="2556:22" pos:end="2556:25">fpcr</name> <operator pos:start="2556:27" pos:end="2556:27">&amp;</operator> <operator pos:start="2556:29" pos:end="2556:29">(</operator><name pos:start="2556:30" pos:end="2556:37">FPCR_INV</name> <operator pos:start="2556:39" pos:end="2556:39">|</operator> <name pos:start="2556:41" pos:end="2556:49">FPCR_INVD</name><operator pos:start="2556:50" pos:end="2556:50">)</operator><operator pos:start="2556:51" pos:end="2556:51">)</operator> <operator pos:start="2556:53" pos:end="2556:54">==</operator> <name pos:start="2556:56" pos:end="2556:63">FPCR_INV</name></expr>)</condition> <block pos:start="2556:66" pos:end="3541:14">{<block_content pos:start="2557:21" pos:end="3541:14">
                    <expr_stmt pos:start="2557:21" pos:end="2557:48"><expr pos:start="2557:21" pos:end="2557:47"><name pos:start="2557:21" pos:end="2557:27">si_code</name> <operator pos:start="2557:29" pos:end="2557:29">=</operator> <name pos:start="2557:31" pos:end="2557:47">TARGET_FPE_FLTINV</name></expr>;</expr_stmt>
                <if_stmt pos:start="2558:17" pos:end="3541:14"><if pos:start="2558:17" pos:end="3541:14">if <condition pos:start="2558:20" pos:end="2558:33">(<expr pos:start="2558:21" pos:end="2558:32"><name pos:start="2558:21" pos:end="2558:27">si_code</name> <operator pos:start="2558:29" pos:end="2558:30">!=</operator> <literal type="number" pos:start="2558:32" pos:end="2558:32">0</literal></expr>)</condition> <block pos:start="2558:35" pos:end="3541:14">{<block_content pos:start="2559:21" pos:end="3541:14">
                    <decl_stmt pos:start="2559:21" pos:end="2559:42"><decl pos:start="2559:21" pos:end="2559:41"><type pos:start="2559:21" pos:end="2559:36"><name pos:start="2559:21" pos:end="2559:36">target_siginfo_t</name></type> <name pos:start="2559:38" pos:end="2559:41">info</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="2560:21" pos:end="2560:43"><expr pos:start="2560:21" pos:end="2560:42"><name pos:start="2560:21" pos:end="2560:33"><name pos:start="2560:21" pos:end="2560:24">info</name><operator pos:start="2560:25" pos:end="2560:25">.</operator><name pos:start="2560:26" pos:end="2560:33">si_signo</name></name> <operator pos:start="2560:35" pos:end="2560:35">=</operator> <name pos:start="2560:37" pos:end="2560:42">SIGFPE</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2561:21" pos:end="2561:38"><expr pos:start="2561:21" pos:end="2561:37"><name pos:start="2561:21" pos:end="2561:33"><name pos:start="2561:21" pos:end="2561:24">info</name><operator pos:start="2561:25" pos:end="2561:25">.</operator><name pos:start="2561:26" pos:end="2561:33">si_errno</name></name> <operator pos:start="2561:35" pos:end="2561:35">=</operator> <literal type="number" pos:start="2561:37" pos:end="2561:37">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="2562:21" pos:end="2562:43"><expr pos:start="2562:21" pos:end="2562:42"><name pos:start="2562:21" pos:end="2562:32"><name pos:start="2562:21" pos:end="2562:24">info</name><operator pos:start="2562:25" pos:end="2562:25">.</operator><name pos:start="2562:26" pos:end="2562:32">si_code</name></name> <operator pos:start="2562:34" pos:end="2562:34">=</operator> <name pos:start="2562:36" pos:end="2562:42">si_code</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2563:21" pos:end="2564:56"><expr pos:start="2563:21" pos:end="2564:55"><name pos:start="2563:21" pos:end="2563:50"><name pos:start="2563:21" pos:end="2563:24">info</name><operator pos:start="2563:25" pos:end="2563:25">.</operator><name pos:start="2563:26" pos:end="2563:34">_sifields</name><operator pos:start="2563:35" pos:end="2563:35">.</operator><name pos:start="2563:36" pos:end="2563:44">_sigfault</name><operator pos:start="2563:45" pos:end="2563:45">.</operator><name pos:start="2563:46" pos:end="2563:50">_addr</name></name>
                        <operator pos:start="2564:25" pos:end="2564:25">=</operator> <operator pos:start="2564:27" pos:end="2564:27">(</operator><operator pos:start="2564:28" pos:end="2564:28">(</operator><name pos:start="2564:29" pos:end="2564:40">CPUArchState</name> <operator pos:start="2564:42" pos:end="2564:42">*</operator><operator pos:start="2564:43" pos:end="2564:43">)</operator><name pos:start="2564:44" pos:end="2564:50">cpu_env</name><operator pos:start="2564:51" pos:end="2564:51">)</operator><operator pos:start="2564:52" pos:end="2564:53">-&gt;</operator><name pos:start="2564:54" pos:end="2564:55">pc</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2565:21" pos:end="2574:0"><expr pos:start="2565:21" pos:end="2565:79"><call pos:start="2565:21" pos:end="2565:79"><name pos:start="2565:21" pos:end="2565:32">queue_signal</name><argument_list pos:start="2565:33" pos:end="2565:79">(<argument pos:start="2565:34" pos:end="2565:56"><expr pos:start="2565:34" pos:end="2565:56"><operator pos:start="2565:34" pos:end="2565:34">(</operator><name pos:start="2565:35" pos:end="2565:46">CPUArchState</name> <operator pos:start="2565:48" pos:end="2565:48">*</operator><operator pos:start="2565:49" pos:end="2565:49">)</operator><name pos:start="2565:50" pos:end="2565:56">cpu_env</name></expr></argument>, <argument pos:start="2565:59" pos:end="2565:71"><expr pos:start="2565:59" pos:end="2565:71"><name pos:start="2565:59" pos:end="2565:71"><name pos:start="2565:59" pos:end="2565:62">info</name><operator pos:start="2565:63" pos:end="2565:63">.</operator><name pos:start="2565:64" pos:end="2565:71">si_signo</name></name></expr></argument>, <argument pos:start="2565:74" pos:end="2565:78"><expr pos:start="2565:74" pos:end="2565:78"><operator pos:start="2565:74" pos:end="2565:74">&amp;</operator><name pos:start="2565:75" pos:end="2565:78">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block" pos:start="2566:11" pos:end="2571:12">/* case SSI_NVPAIRS:
             -- Used with SSIN_UACPROC to enable unaligned accesses.
             case SSI_IEEE_STATE_AT_SIGNAL:
             case SSI_IEEE_IGNORE_STATE_AT_SIGNAL:
             -- Not implemented in linux kernel
          */</comment>
<cpp:endif pos:start="2572:1" pos:end="2572:6">#<cpp:directive pos:start="2572:2" pos:end="2572:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2573:1" pos:end="2573:32">#<cpp:directive pos:start="2573:2" pos:end="2573:6">ifdef</cpp:directive> <name pos:start="2573:8" pos:end="2573:32">TARGET_NR_osf_sigprocmask</name></cpp:ifdef>
    <comment type="block" pos:start="2574:5" pos:end="2574:26">/* Alpha specific.  */</comment>
    <case pos:start="2575:5" pos:end="2575:35">case <expr pos:start="2575:10" pos:end="2575:34"><name pos:start="2575:10" pos:end="2575:34">TARGET_NR_osf_sigprocmask</name></expr>:</case>
        <block pos:start="2576:9" pos:end="3541:14">{<block_content pos:start="2577:13" pos:end="3541:14">
            <decl_stmt pos:start="2577:13" pos:end="2577:27"><decl pos:start="2577:13" pos:end="2577:26"><type pos:start="2577:13" pos:end="2577:21"><name pos:start="2577:13" pos:end="2577:21">abi_ulong</name></type> <name pos:start="2577:23" pos:end="2577:26">mask</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2578:13" pos:end="2578:20"><decl pos:start="2578:13" pos:end="2578:19"><type pos:start="2578:13" pos:end="2578:15"><name pos:start="2578:13" pos:end="2578:15">int</name></type> <name pos:start="2578:17" pos:end="2578:19">how</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2579:13" pos:end="2579:33"><decl pos:start="2579:13" pos:end="2579:24"><type pos:start="2579:13" pos:end="2579:20"><name pos:start="2579:13" pos:end="2579:20">sigset_t</name></type> <name pos:start="2579:22" pos:end="2579:24">set</name></decl>, <decl pos:start="2579:27" pos:end="2579:32"><type ref="prev" pos:start="2579:13" pos:end="2579:20"/><name pos:start="2579:27" pos:end="2579:32">oldset</name></decl>;</decl_stmt>
            <switch pos:start="2580:13" pos:end="3541:14">switch<condition pos:start="2580:19" pos:end="2580:24">(<expr pos:start="2580:20" pos:end="2580:23"><name pos:start="2580:20" pos:end="2580:23">arg1</name></expr>)</condition> <block pos:start="2580:26" pos:end="3541:14">{<block_content pos:start="2581:13" pos:end="3541:14">
            <case pos:start="2581:13" pos:end="2581:34">case <expr pos:start="2581:18" pos:end="2581:33"><name pos:start="2581:18" pos:end="2581:33">TARGET_SIG_BLOCK</name></expr>:</case>
                <expr_stmt pos:start="2582:17" pos:end="2582:32"><expr pos:start="2582:17" pos:end="2582:31"><name pos:start="2582:17" pos:end="2582:19">how</name> <operator pos:start="2582:21" pos:end="2582:21">=</operator> <name pos:start="2582:23" pos:end="2582:31">SIG_BLOCK</name></expr>;</expr_stmt>
            <case pos:start="2583:13" pos:end="2583:36">case <expr pos:start="2583:18" pos:end="2583:35"><name pos:start="2583:18" pos:end="2583:35">TARGET_SIG_UNBLOCK</name></expr>:</case>
                <expr_stmt pos:start="2584:17" pos:end="2584:34"><expr pos:start="2584:17" pos:end="2584:33"><name pos:start="2584:17" pos:end="2584:19">how</name> <operator pos:start="2584:21" pos:end="2584:21">=</operator> <name pos:start="2584:23" pos:end="2584:33">SIG_UNBLOCK</name></expr>;</expr_stmt>
            <case pos:start="2585:13" pos:end="2585:36">case <expr pos:start="2585:18" pos:end="2585:35"><name pos:start="2585:18" pos:end="2585:35">TARGET_SIG_SETMASK</name></expr>:</case>
                <expr_stmt pos:start="2586:17" pos:end="2586:34"><expr pos:start="2586:17" pos:end="2586:33"><name pos:start="2586:17" pos:end="2586:19">how</name> <operator pos:start="2586:21" pos:end="2586:21">=</operator> <name pos:start="2586:23" pos:end="2586:33">SIG_SETMASK</name></expr>;</expr_stmt>
            <default pos:start="2587:13" pos:end="2587:20">default:</default>
                <goto pos:start="2588:17" pos:end="2588:26">goto <name pos:start="2588:22" pos:end="2588:25">fail</name>;</goto>
            <expr_stmt pos:start="2589:13" pos:end="2589:24"><expr pos:start="2589:13" pos:end="2589:23"><name pos:start="2589:13" pos:end="2589:16">mask</name> <operator pos:start="2589:18" pos:end="2589:18">=</operator> <name pos:start="2589:20" pos:end="2589:23">arg2</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2590:13" pos:end="2590:51"><expr pos:start="2590:13" pos:end="2590:50"><call pos:start="2590:13" pos:end="2590:50"><name pos:start="2590:13" pos:end="2590:37">target_to_host_old_sigset</name><argument_list pos:start="2590:38" pos:end="2590:50">(<argument pos:start="2590:39" pos:end="2590:42"><expr pos:start="2590:39" pos:end="2590:42"><operator pos:start="2590:39" pos:end="2590:39">&amp;</operator><name pos:start="2590:40" pos:end="2590:42">set</name></expr></argument>, <argument pos:start="2590:45" pos:end="2590:49"><expr pos:start="2590:45" pos:end="2590:49"><operator pos:start="2590:45" pos:end="2590:45">&amp;</operator><name pos:start="2590:46" pos:end="2590:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2591:13" pos:end="2591:53"><expr pos:start="2591:13" pos:end="2591:52"><name pos:start="2591:13" pos:end="2591:15">ret</name> <operator pos:start="2591:17" pos:end="2591:17">=</operator> <call pos:start="2591:19" pos:end="2591:52"><name pos:start="2591:19" pos:end="2591:32">do_sigprocmask</name><argument_list pos:start="2591:33" pos:end="2591:52">(<argument pos:start="2591:34" pos:end="2591:36"><expr pos:start="2591:34" pos:end="2591:36"><name pos:start="2591:34" pos:end="2591:36">how</name></expr></argument>, <argument pos:start="2591:39" pos:end="2591:42"><expr pos:start="2591:39" pos:end="2591:42"><operator pos:start="2591:39" pos:end="2591:39">&amp;</operator><name pos:start="2591:40" pos:end="2591:42">set</name></expr></argument>, <argument pos:start="2591:45" pos:end="2591:51"><expr pos:start="2591:45" pos:end="2591:51"><operator pos:start="2591:45" pos:end="2591:45">&amp;</operator><name pos:start="2591:46" pos:end="2591:51">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2592:13" pos:end="3541:14"><if pos:start="2592:13" pos:end="3541:14">if <condition pos:start="2592:16" pos:end="2592:21">(<expr pos:start="2592:17" pos:end="2592:20"><operator pos:start="2592:17" pos:end="2592:17">!</operator><name pos:start="2592:18" pos:end="2592:20">ret</name></expr>)</condition> <block pos:start="2592:23" pos:end="3541:14">{<block_content pos:start="2593:17" pos:end="3541:14">
                <expr_stmt pos:start="2593:17" pos:end="2593:58"><expr pos:start="2593:17" pos:end="2593:57"><call pos:start="2593:17" pos:end="2593:57"><name pos:start="2593:17" pos:end="2593:41">host_to_target_old_sigset</name><argument_list pos:start="2593:42" pos:end="2593:57">(<argument pos:start="2593:43" pos:end="2593:47"><expr pos:start="2593:43" pos:end="2593:47"><operator pos:start="2593:43" pos:end="2593:43">&amp;</operator><name pos:start="2593:44" pos:end="2593:47">mask</name></expr></argument>, <argument pos:start="2593:50" pos:end="2593:56"><expr pos:start="2593:50" pos:end="2593:56"><operator pos:start="2593:50" pos:end="2593:50">&amp;</operator><name pos:start="2593:51" pos:end="2593:56">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2594:17" pos:end="2597:0"><expr pos:start="2594:17" pos:end="2594:26"><name pos:start="2594:17" pos:end="2594:19">ret</name> <operator pos:start="2594:21" pos:end="2594:21">=</operator> <name pos:start="2594:23" pos:end="2594:26">mask</name></expr>;</expr_stmt>
<cpp:endif pos:start="2595:1" pos:end="2595:6">#<cpp:directive pos:start="2595:2" pos:end="2595:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2596:1" pos:end="2596:25">#<cpp:directive pos:start="2596:2" pos:end="2596:6">ifdef</cpp:directive> <name pos:start="2596:8" pos:end="2596:25">TARGET_NR_getgid32</name></cpp:ifdef>
    <case pos:start="2597:5" pos:end="2597:28">case <expr pos:start="2597:10" pos:end="2597:27"><name pos:start="2597:10" pos:end="2597:27">TARGET_NR_getgid32</name></expr>:</case>
        <expr_stmt pos:start="2598:9" pos:end="2601:0"><expr pos:start="2598:9" pos:end="2598:33"><name pos:start="2598:9" pos:end="2598:11">ret</name> <operator pos:start="2598:13" pos:end="2598:13">=</operator> <call pos:start="2598:15" pos:end="2598:33"><name pos:start="2598:15" pos:end="2598:23">get_errno</name><argument_list pos:start="2598:24" pos:end="2598:33">(<argument pos:start="2598:25" pos:end="2598:32"><expr pos:start="2598:25" pos:end="2598:32"><call pos:start="2598:25" pos:end="2598:32"><name pos:start="2598:25" pos:end="2598:30">getgid</name><argument_list pos:start="2598:31" pos:end="2598:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2599:1" pos:end="2599:6">#<cpp:directive pos:start="2599:2" pos:end="2599:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2600:1" pos:end="2600:26">#<cpp:directive pos:start="2600:2" pos:end="2600:6">ifdef</cpp:directive> <name pos:start="2600:8" pos:end="2600:26">TARGET_NR_geteuid32</name></cpp:ifdef>
    <case pos:start="2601:5" pos:end="2601:29">case <expr pos:start="2601:10" pos:end="2601:28"><name pos:start="2601:10" pos:end="2601:28">TARGET_NR_geteuid32</name></expr>:</case>
        <expr_stmt pos:start="2602:9" pos:end="2605:0"><expr pos:start="2602:9" pos:end="2602:34"><name pos:start="2602:9" pos:end="2602:11">ret</name> <operator pos:start="2602:13" pos:end="2602:13">=</operator> <call pos:start="2602:15" pos:end="2602:34"><name pos:start="2602:15" pos:end="2602:23">get_errno</name><argument_list pos:start="2602:24" pos:end="2602:34">(<argument pos:start="2602:25" pos:end="2602:33"><expr pos:start="2602:25" pos:end="2602:33"><call pos:start="2602:25" pos:end="2602:33"><name pos:start="2602:25" pos:end="2602:31">geteuid</name><argument_list pos:start="2602:32" pos:end="2602:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2603:1" pos:end="2603:6">#<cpp:directive pos:start="2603:2" pos:end="2603:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2604:1" pos:end="2604:26">#<cpp:directive pos:start="2604:2" pos:end="2604:6">ifdef</cpp:directive> <name pos:start="2604:8" pos:end="2604:26">TARGET_NR_getegid32</name></cpp:ifdef>
    <case pos:start="2605:5" pos:end="2605:29">case <expr pos:start="2605:10" pos:end="2605:28"><name pos:start="2605:10" pos:end="2605:28">TARGET_NR_getegid32</name></expr>:</case>
        <expr_stmt pos:start="2606:9" pos:end="2609:0"><expr pos:start="2606:9" pos:end="2606:34"><name pos:start="2606:9" pos:end="2606:11">ret</name> <operator pos:start="2606:13" pos:end="2606:13">=</operator> <call pos:start="2606:15" pos:end="2606:34"><name pos:start="2606:15" pos:end="2606:23">get_errno</name><argument_list pos:start="2606:24" pos:end="2606:34">(<argument pos:start="2606:25" pos:end="2606:33"><expr pos:start="2606:25" pos:end="2606:33"><call pos:start="2606:25" pos:end="2606:33"><name pos:start="2606:25" pos:end="2606:31">getegid</name><argument_list pos:start="2606:32" pos:end="2606:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2607:1" pos:end="2607:6">#<cpp:directive pos:start="2607:2" pos:end="2607:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2608:1" pos:end="2608:27">#<cpp:directive pos:start="2608:2" pos:end="2608:6">ifdef</cpp:directive> <name pos:start="2608:8" pos:end="2608:27">TARGET_NR_setreuid32</name></cpp:ifdef>
    <case pos:start="2609:5" pos:end="2609:30">case <expr pos:start="2609:10" pos:end="2609:29"><name pos:start="2609:10" pos:end="2609:29">TARGET_NR_setreuid32</name></expr>:</case>
        <expr_stmt pos:start="2610:9" pos:end="2613:0"><expr pos:start="2610:9" pos:end="2610:45"><name pos:start="2610:9" pos:end="2610:11">ret</name> <operator pos:start="2610:13" pos:end="2610:13">=</operator> <call pos:start="2610:15" pos:end="2610:45"><name pos:start="2610:15" pos:end="2610:23">get_errno</name><argument_list pos:start="2610:24" pos:end="2610:45">(<argument pos:start="2610:25" pos:end="2610:44"><expr pos:start="2610:25" pos:end="2610:44"><call pos:start="2610:25" pos:end="2610:44"><name pos:start="2610:25" pos:end="2610:32">setreuid</name><argument_list pos:start="2610:33" pos:end="2610:44">(<argument pos:start="2610:34" pos:end="2610:37"><expr pos:start="2610:34" pos:end="2610:37"><name pos:start="2610:34" pos:end="2610:37">arg1</name></expr></argument>, <argument pos:start="2610:40" pos:end="2610:43"><expr pos:start="2610:40" pos:end="2610:43"><name pos:start="2610:40" pos:end="2610:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2611:1" pos:end="2611:6">#<cpp:directive pos:start="2611:2" pos:end="2611:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2612:1" pos:end="2612:27">#<cpp:directive pos:start="2612:2" pos:end="2612:6">ifdef</cpp:directive> <name pos:start="2612:8" pos:end="2612:27">TARGET_NR_setregid32</name></cpp:ifdef>
    <case pos:start="2613:5" pos:end="2613:30">case <expr pos:start="2613:10" pos:end="2613:29"><name pos:start="2613:10" pos:end="2613:29">TARGET_NR_setregid32</name></expr>:</case>
        <expr_stmt pos:start="2614:9" pos:end="2617:0"><expr pos:start="2614:9" pos:end="2614:45"><name pos:start="2614:9" pos:end="2614:11">ret</name> <operator pos:start="2614:13" pos:end="2614:13">=</operator> <call pos:start="2614:15" pos:end="2614:45"><name pos:start="2614:15" pos:end="2614:23">get_errno</name><argument_list pos:start="2614:24" pos:end="2614:45">(<argument pos:start="2614:25" pos:end="2614:44"><expr pos:start="2614:25" pos:end="2614:44"><call pos:start="2614:25" pos:end="2614:44"><name pos:start="2614:25" pos:end="2614:32">setregid</name><argument_list pos:start="2614:33" pos:end="2614:44">(<argument pos:start="2614:34" pos:end="2614:37"><expr pos:start="2614:34" pos:end="2614:37"><name pos:start="2614:34" pos:end="2614:37">arg1</name></expr></argument>, <argument pos:start="2614:40" pos:end="2614:43"><expr pos:start="2614:40" pos:end="2614:43"><name pos:start="2614:40" pos:end="2614:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2615:1" pos:end="2615:6">#<cpp:directive pos:start="2615:2" pos:end="2615:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2616:1" pos:end="2616:28">#<cpp:directive pos:start="2616:2" pos:end="2616:6">ifdef</cpp:directive> <name pos:start="2616:8" pos:end="2616:28">TARGET_NR_getgroups32</name></cpp:ifdef>
    <case pos:start="2617:5" pos:end="2617:31">case <expr pos:start="2617:10" pos:end="2617:30"><name pos:start="2617:10" pos:end="2617:30">TARGET_NR_getgroups32</name></expr>:</case>
        <block pos:start="2618:9" pos:end="3541:14">{<block_content pos:start="2619:13" pos:end="3541:14">
            <decl_stmt pos:start="2619:13" pos:end="2619:34"><decl pos:start="2619:13" pos:end="2619:33"><type pos:start="2619:13" pos:end="2619:15"><name pos:start="2619:13" pos:end="2619:15">int</name></type> <name pos:start="2619:17" pos:end="2619:26">gidsetsize</name> <init pos:start="2619:28" pos:end="2619:33">= <expr pos:start="2619:30" pos:end="2619:33"><name pos:start="2619:30" pos:end="2619:33">arg1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2620:13" pos:end="2620:39"><decl pos:start="2620:13" pos:end="2620:38"><type pos:start="2620:13" pos:end="2620:22"><name pos:start="2620:13" pos:end="2620:20">uint32_t</name> <modifier pos:start="2620:22" pos:end="2620:22">*</modifier></type><name pos:start="2620:23" pos:end="2620:38">target_grouplist</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2621:13" pos:end="2621:29"><decl pos:start="2621:13" pos:end="2621:28"><type pos:start="2621:13" pos:end="2621:19"><name pos:start="2621:13" pos:end="2621:17">gid_t</name> <modifier pos:start="2621:19" pos:end="2621:19">*</modifier></type><name pos:start="2621:20" pos:end="2621:28">grouplist</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2622:13" pos:end="2622:18"><decl pos:start="2622:13" pos:end="2622:17"><type pos:start="2622:13" pos:end="2622:15"><name pos:start="2622:13" pos:end="2622:15">int</name></type> <name pos:start="2622:17" pos:end="2622:17">i</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2623:13" pos:end="2623:59"><expr pos:start="2623:13" pos:end="2623:58"><name pos:start="2623:13" pos:end="2623:21">grouplist</name> <operator pos:start="2623:23" pos:end="2623:23">=</operator> <call pos:start="2623:25" pos:end="2623:58"><name pos:start="2623:25" pos:end="2623:30">alloca</name><argument_list pos:start="2623:31" pos:end="2623:58">(<argument pos:start="2623:32" pos:end="2623:57"><expr pos:start="2623:32" pos:end="2623:57"><name pos:start="2623:32" pos:end="2623:41">gidsetsize</name> <operator pos:start="2623:43" pos:end="2623:43">*</operator> <sizeof pos:start="2623:45" pos:end="2623:57">sizeof<argument_list pos:start="2623:51" pos:end="2623:57">(<argument pos:start="2623:52" pos:end="2623:56"><expr pos:start="2623:52" pos:end="2623:56"><name pos:start="2623:52" pos:end="2623:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2624:13" pos:end="2624:62"><expr pos:start="2624:13" pos:end="2624:61"><name pos:start="2624:13" pos:end="2624:15">ret</name> <operator pos:start="2624:17" pos:end="2624:17">=</operator> <call pos:start="2624:19" pos:end="2624:61"><name pos:start="2624:19" pos:end="2624:27">get_errno</name><argument_list pos:start="2624:28" pos:end="2624:61">(<argument pos:start="2624:29" pos:end="2624:60"><expr pos:start="2624:29" pos:end="2624:60"><call pos:start="2624:29" pos:end="2624:60"><name pos:start="2624:29" pos:end="2624:37">getgroups</name><argument_list pos:start="2624:38" pos:end="2624:60">(<argument pos:start="2624:39" pos:end="2624:48"><expr pos:start="2624:39" pos:end="2624:48"><name pos:start="2624:39" pos:end="2624:48">gidsetsize</name></expr></argument>, <argument pos:start="2624:51" pos:end="2624:59"><expr pos:start="2624:51" pos:end="2624:59"><name pos:start="2624:51" pos:end="2624:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2625:13" pos:end="3541:14"><if pos:start="2625:13" pos:end="3541:14">if <condition pos:start="2625:16" pos:end="2625:32">(<expr pos:start="2625:17" pos:end="2625:31"><name pos:start="2625:17" pos:end="2625:26">gidsetsize</name> <operator pos:start="2625:28" pos:end="2625:29">==</operator> <literal type="number" pos:start="2625:31" pos:end="2625:31">0</literal></expr>)</condition><block type="pseudo" pos:start="2626:13" pos:end="3541:14"><block_content pos:start="2626:13" pos:end="3541:14">
            <if_stmt pos:start="2626:13" pos:end="3541:14"><if pos:start="2626:13" pos:end="3541:14">if <condition pos:start="2626:16" pos:end="2626:31">(<expr pos:start="2626:17" pos:end="2626:30"><operator pos:start="2626:17" pos:end="2626:17">!</operator><call pos:start="2626:18" pos:end="2626:30"><name pos:start="2626:18" pos:end="2626:25">is_error</name><argument_list pos:start="2626:26" pos:end="2626:30">(<argument pos:start="2626:27" pos:end="2626:29"><expr pos:start="2626:27" pos:end="2626:29"><name pos:start="2626:27" pos:end="2626:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2626:33" pos:end="3541:14">{<block_content pos:start="2627:17" pos:end="3541:14">
                <expr_stmt pos:start="2627:17" pos:end="2627:84"><expr pos:start="2627:17" pos:end="2627:83"><name pos:start="2627:17" pos:end="2627:32">target_grouplist</name> <operator pos:start="2627:34" pos:end="2627:34">=</operator> <call pos:start="2627:36" pos:end="2627:83"><name pos:start="2627:36" pos:end="2627:44">lock_user</name><argument_list pos:start="2627:45" pos:end="2627:83">(<argument pos:start="2627:46" pos:end="2627:57"><expr pos:start="2627:46" pos:end="2627:57"><name pos:start="2627:46" pos:end="2627:57">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2627:60" pos:end="2627:63"><expr pos:start="2627:60" pos:end="2627:63"><name pos:start="2627:60" pos:end="2627:63">arg2</name></expr></argument>, <argument pos:start="2627:66" pos:end="2627:79"><expr pos:start="2627:66" pos:end="2627:79"><name pos:start="2627:66" pos:end="2627:75">gidsetsize</name> <operator pos:start="2627:77" pos:end="2627:77">*</operator> <literal type="number" pos:start="2627:79" pos:end="2627:79">4</literal></expr></argument>, <argument pos:start="2627:82" pos:end="2627:82"><expr pos:start="2627:82" pos:end="2627:82"><literal type="number" pos:start="2627:82" pos:end="2627:82">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2628:17" pos:end="3541:14"><if pos:start="2628:17" pos:end="3541:14">if <condition pos:start="2628:20" pos:end="2628:38">(<expr pos:start="2628:21" pos:end="2628:37"><operator pos:start="2628:21" pos:end="2628:21">!</operator><name pos:start="2628:22" pos:end="2628:37">target_grouplist</name></expr>)</condition> <block pos:start="2628:40" pos:end="3541:14">{<block_content pos:start="2629:21" pos:end="3541:14">
                    <expr_stmt pos:start="2629:21" pos:end="2629:41"><expr pos:start="2629:21" pos:end="2629:40"><name pos:start="2629:21" pos:end="2629:23">ret</name> <operator pos:start="2629:25" pos:end="2629:25">=</operator> <operator pos:start="2629:27" pos:end="2629:27">-</operator><name pos:start="2629:28" pos:end="2629:40">TARGET_EFAULT</name></expr>;</expr_stmt>
                    <goto pos:start="2630:21" pos:end="2630:30">goto <name pos:start="2630:26" pos:end="2630:29">fail</name>;</goto>
                <for pos:start="2631:17" pos:end="2632:64">for<control pos:start="2631:20" pos:end="2631:39">(<init pos:start="2631:21" pos:end="2631:26"><expr pos:start="2631:21" pos:end="2631:25"><name pos:start="2631:21" pos:end="2631:21">i</name> <operator pos:start="2631:23" pos:end="2631:23">=</operator> <literal type="number" pos:start="2631:25" pos:end="2631:25">0</literal></expr>;</init><condition pos:start="2631:27" pos:end="2631:34"><expr pos:start="2631:27" pos:end="2631:33"><name pos:start="2631:27" pos:end="2631:27">i</name> <operator pos:start="2631:29" pos:end="2631:29">&lt;</operator> <name pos:start="2631:31" pos:end="2631:33">ret</name></expr>;</condition> <incr pos:start="2631:36" pos:end="2631:38"><expr pos:start="2631:36" pos:end="2631:38"><name pos:start="2631:36" pos:end="2631:36">i</name><operator pos:start="2631:37" pos:end="2631:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="2632:21" pos:end="2632:64"><block_content pos:start="2632:21" pos:end="2632:64">
                    <expr_stmt pos:start="2632:21" pos:end="2632:64"><expr pos:start="2632:21" pos:end="2632:63"><name pos:start="2632:21" pos:end="2632:39"><name pos:start="2632:21" pos:end="2632:36">target_grouplist</name><index pos:start="2632:37" pos:end="2632:39">[<expr pos:start="2632:38" pos:end="2632:38"><name pos:start="2632:38" pos:end="2632:38">i</name></expr>]</index></name> <operator pos:start="2632:41" pos:end="2632:41">=</operator> <call pos:start="2632:43" pos:end="2632:63"><name pos:start="2632:43" pos:end="2632:49">tswap32</name><argument_list pos:start="2632:50" pos:end="2632:63">(<argument pos:start="2632:51" pos:end="2632:62"><expr pos:start="2632:51" pos:end="2632:62"><name pos:start="2632:51" pos:end="2632:62"><name pos:start="2632:51" pos:end="2632:59">grouplist</name><index pos:start="2632:60" pos:end="2632:62">[<expr pos:start="2632:61" pos:end="2632:61"><name pos:start="2632:61" pos:end="2632:61">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt pos:start="2633:17" pos:end="2636:0"><expr pos:start="2633:17" pos:end="2633:67"><call pos:start="2633:17" pos:end="2633:67"><name pos:start="2633:17" pos:end="2633:27">unlock_user</name><argument_list pos:start="2633:28" pos:end="2633:67">(<argument pos:start="2633:29" pos:end="2633:44"><expr pos:start="2633:29" pos:end="2633:44"><name pos:start="2633:29" pos:end="2633:44">target_grouplist</name></expr></argument>, <argument pos:start="2633:47" pos:end="2633:50"><expr pos:start="2633:47" pos:end="2633:50"><name pos:start="2633:47" pos:end="2633:50">arg2</name></expr></argument>, <argument pos:start="2633:53" pos:end="2633:66"><expr pos:start="2633:53" pos:end="2633:66"><name pos:start="2633:53" pos:end="2633:62">gidsetsize</name> <operator pos:start="2633:64" pos:end="2633:64">*</operator> <literal type="number" pos:start="2633:66" pos:end="2633:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2634:1" pos:end="2634:6">#<cpp:directive pos:start="2634:2" pos:end="2634:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2635:1" pos:end="2635:28">#<cpp:directive pos:start="2635:2" pos:end="2635:6">ifdef</cpp:directive> <name pos:start="2635:8" pos:end="2635:28">TARGET_NR_setgroups32</name></cpp:ifdef>
    <case pos:start="2636:5" pos:end="2636:31">case <expr pos:start="2636:10" pos:end="2636:30"><name pos:start="2636:10" pos:end="2636:30">TARGET_NR_setgroups32</name></expr>:</case>
        <block pos:start="2637:9" pos:end="3541:14">{<block_content pos:start="2638:13" pos:end="3541:14">
            <decl_stmt pos:start="2638:13" pos:end="2638:34"><decl pos:start="2638:13" pos:end="2638:33"><type pos:start="2638:13" pos:end="2638:15"><name pos:start="2638:13" pos:end="2638:15">int</name></type> <name pos:start="2638:17" pos:end="2638:26">gidsetsize</name> <init pos:start="2638:28" pos:end="2638:33">= <expr pos:start="2638:30" pos:end="2638:33"><name pos:start="2638:30" pos:end="2638:33">arg1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2639:13" pos:end="2639:39"><decl pos:start="2639:13" pos:end="2639:38"><type pos:start="2639:13" pos:end="2639:22"><name pos:start="2639:13" pos:end="2639:20">uint32_t</name> <modifier pos:start="2639:22" pos:end="2639:22">*</modifier></type><name pos:start="2639:23" pos:end="2639:38">target_grouplist</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2640:13" pos:end="2640:29"><decl pos:start="2640:13" pos:end="2640:28"><type pos:start="2640:13" pos:end="2640:19"><name pos:start="2640:13" pos:end="2640:17">gid_t</name> <modifier pos:start="2640:19" pos:end="2640:19">*</modifier></type><name pos:start="2640:20" pos:end="2640:28">grouplist</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2641:13" pos:end="2641:18"><decl pos:start="2641:13" pos:end="2641:17"><type pos:start="2641:13" pos:end="2641:15"><name pos:start="2641:13" pos:end="2641:15">int</name></type> <name pos:start="2641:17" pos:end="2641:17">i</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2642:13" pos:end="2642:59"><expr pos:start="2642:13" pos:end="2642:58"><name pos:start="2642:13" pos:end="2642:21">grouplist</name> <operator pos:start="2642:23" pos:end="2642:23">=</operator> <call pos:start="2642:25" pos:end="2642:58"><name pos:start="2642:25" pos:end="2642:30">alloca</name><argument_list pos:start="2642:31" pos:end="2642:58">(<argument pos:start="2642:32" pos:end="2642:57"><expr pos:start="2642:32" pos:end="2642:57"><name pos:start="2642:32" pos:end="2642:41">gidsetsize</name> <operator pos:start="2642:43" pos:end="2642:43">*</operator> <sizeof pos:start="2642:45" pos:end="2642:57">sizeof<argument_list pos:start="2642:51" pos:end="2642:57">(<argument pos:start="2642:52" pos:end="2642:56"><expr pos:start="2642:52" pos:end="2642:56"><name pos:start="2642:52" pos:end="2642:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2643:13" pos:end="2643:79"><expr pos:start="2643:13" pos:end="2643:78"><name pos:start="2643:13" pos:end="2643:28">target_grouplist</name> <operator pos:start="2643:30" pos:end="2643:30">=</operator> <call pos:start="2643:32" pos:end="2643:78"><name pos:start="2643:32" pos:end="2643:40">lock_user</name><argument_list pos:start="2643:41" pos:end="2643:78">(<argument pos:start="2643:42" pos:end="2643:52"><expr pos:start="2643:42" pos:end="2643:52"><name pos:start="2643:42" pos:end="2643:52">VERIFY_READ</name></expr></argument>, <argument pos:start="2643:55" pos:end="2643:58"><expr pos:start="2643:55" pos:end="2643:58"><name pos:start="2643:55" pos:end="2643:58">arg2</name></expr></argument>, <argument pos:start="2643:61" pos:end="2643:74"><expr pos:start="2643:61" pos:end="2643:74"><name pos:start="2643:61" pos:end="2643:70">gidsetsize</name> <operator pos:start="2643:72" pos:end="2643:72">*</operator> <literal type="number" pos:start="2643:74" pos:end="2643:74">4</literal></expr></argument>, <argument pos:start="2643:77" pos:end="2643:77"><expr pos:start="2643:77" pos:end="2643:77"><literal type="number" pos:start="2643:77" pos:end="2643:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2644:13" pos:end="3541:14"><if pos:start="2644:13" pos:end="3541:14">if <condition pos:start="2644:16" pos:end="2644:34">(<expr pos:start="2644:17" pos:end="2644:33"><operator pos:start="2644:17" pos:end="2644:17">!</operator><name pos:start="2644:18" pos:end="2644:33">target_grouplist</name></expr>)</condition> <block pos:start="2644:36" pos:end="3541:14">{<block_content pos:start="2645:17" pos:end="3541:14">
                <expr_stmt pos:start="2645:17" pos:end="2645:37"><expr pos:start="2645:17" pos:end="2645:36"><name pos:start="2645:17" pos:end="2645:19">ret</name> <operator pos:start="2645:21" pos:end="2645:21">=</operator> <operator pos:start="2645:23" pos:end="2645:23">-</operator><name pos:start="2645:24" pos:end="2645:36">TARGET_EFAULT</name></expr>;</expr_stmt>
                <goto pos:start="2646:17" pos:end="2646:26">goto <name pos:start="2646:22" pos:end="2646:25">fail</name>;</goto>
            <for pos:start="2647:13" pos:end="2648:60">for<control pos:start="2647:16" pos:end="2647:42">(<init pos:start="2647:17" pos:end="2647:22"><expr pos:start="2647:17" pos:end="2647:21"><name pos:start="2647:17" pos:end="2647:17">i</name> <operator pos:start="2647:19" pos:end="2647:19">=</operator> <literal type="number" pos:start="2647:21" pos:end="2647:21">0</literal></expr>;</init><condition pos:start="2647:23" pos:end="2647:37"><expr pos:start="2647:23" pos:end="2647:36"><name pos:start="2647:23" pos:end="2647:23">i</name> <operator pos:start="2647:25" pos:end="2647:25">&lt;</operator> <name pos:start="2647:27" pos:end="2647:36">gidsetsize</name></expr>;</condition> <incr pos:start="2647:39" pos:end="2647:41"><expr pos:start="2647:39" pos:end="2647:41"><name pos:start="2647:39" pos:end="2647:39">i</name><operator pos:start="2647:40" pos:end="2647:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="2648:17" pos:end="2648:60"><block_content pos:start="2648:17" pos:end="2648:60">
                <expr_stmt pos:start="2648:17" pos:end="2648:60"><expr pos:start="2648:17" pos:end="2648:59"><name pos:start="2648:17" pos:end="2648:28"><name pos:start="2648:17" pos:end="2648:25">grouplist</name><index pos:start="2648:26" pos:end="2648:28">[<expr pos:start="2648:27" pos:end="2648:27"><name pos:start="2648:27" pos:end="2648:27">i</name></expr>]</index></name> <operator pos:start="2648:30" pos:end="2648:30">=</operator> <call pos:start="2648:32" pos:end="2648:59"><name pos:start="2648:32" pos:end="2648:38">tswap32</name><argument_list pos:start="2648:39" pos:end="2648:59">(<argument pos:start="2648:40" pos:end="2648:58"><expr pos:start="2648:40" pos:end="2648:58"><name pos:start="2648:40" pos:end="2648:58"><name pos:start="2648:40" pos:end="2648:55">target_grouplist</name><index pos:start="2648:56" pos:end="2648:58">[<expr pos:start="2648:57" pos:end="2648:57"><name pos:start="2648:57" pos:end="2648:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt pos:start="2649:13" pos:end="2649:51"><expr pos:start="2649:13" pos:end="2649:50"><call pos:start="2649:13" pos:end="2649:50"><name pos:start="2649:13" pos:end="2649:23">unlock_user</name><argument_list pos:start="2649:24" pos:end="2649:50">(<argument pos:start="2649:25" pos:end="2649:40"><expr pos:start="2649:25" pos:end="2649:40"><name pos:start="2649:25" pos:end="2649:40">target_grouplist</name></expr></argument>, <argument pos:start="2649:43" pos:end="2649:46"><expr pos:start="2649:43" pos:end="2649:46"><name pos:start="2649:43" pos:end="2649:46">arg2</name></expr></argument>, <argument pos:start="2649:49" pos:end="2649:49"><expr pos:start="2649:49" pos:end="2649:49"><literal type="number" pos:start="2649:49" pos:end="2649:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2650:13" pos:end="2653:0"><expr pos:start="2650:13" pos:end="2650:61"><name pos:start="2650:13" pos:end="2650:15">ret</name> <operator pos:start="2650:17" pos:end="2650:17">=</operator> <call pos:start="2650:19" pos:end="2650:61"><name pos:start="2650:19" pos:end="2650:27">get_errno</name><argument_list pos:start="2650:28" pos:end="2650:61">(<argument pos:start="2650:29" pos:end="2650:60"><expr pos:start="2650:29" pos:end="2650:60"><call pos:start="2650:29" pos:end="2650:60"><name pos:start="2650:29" pos:end="2650:37">setgroups</name><argument_list pos:start="2650:38" pos:end="2650:60">(<argument pos:start="2650:39" pos:end="2650:48"><expr pos:start="2650:39" pos:end="2650:48"><name pos:start="2650:39" pos:end="2650:48">gidsetsize</name></expr></argument>, <argument pos:start="2650:51" pos:end="2650:59"><expr pos:start="2650:51" pos:end="2650:59"><name pos:start="2650:51" pos:end="2650:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2651:1" pos:end="2651:6">#<cpp:directive pos:start="2651:2" pos:end="2651:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2652:1" pos:end="2652:25">#<cpp:directive pos:start="2652:2" pos:end="2652:6">ifdef</cpp:directive> <name pos:start="2652:8" pos:end="2652:25">TARGET_NR_fchown32</name></cpp:ifdef>
    <case pos:start="2653:5" pos:end="2653:28">case <expr pos:start="2653:10" pos:end="2653:27"><name pos:start="2653:10" pos:end="2653:27">TARGET_NR_fchown32</name></expr>:</case>
        <expr_stmt pos:start="2654:9" pos:end="2657:0"><expr pos:start="2654:9" pos:end="2654:49"><name pos:start="2654:9" pos:end="2654:11">ret</name> <operator pos:start="2654:13" pos:end="2654:13">=</operator> <call pos:start="2654:15" pos:end="2654:49"><name pos:start="2654:15" pos:end="2654:23">get_errno</name><argument_list pos:start="2654:24" pos:end="2654:49">(<argument pos:start="2654:25" pos:end="2654:48"><expr pos:start="2654:25" pos:end="2654:48"><call pos:start="2654:25" pos:end="2654:48"><name pos:start="2654:25" pos:end="2654:30">fchown</name><argument_list pos:start="2654:31" pos:end="2654:48">(<argument pos:start="2654:32" pos:end="2654:35"><expr pos:start="2654:32" pos:end="2654:35"><name pos:start="2654:32" pos:end="2654:35">arg1</name></expr></argument>, <argument pos:start="2654:38" pos:end="2654:41"><expr pos:start="2654:38" pos:end="2654:41"><name pos:start="2654:38" pos:end="2654:41">arg2</name></expr></argument>, <argument pos:start="2654:44" pos:end="2654:47"><expr pos:start="2654:44" pos:end="2654:47"><name pos:start="2654:44" pos:end="2654:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2655:1" pos:end="2655:6">#<cpp:directive pos:start="2655:2" pos:end="2655:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2656:1" pos:end="2656:28">#<cpp:directive pos:start="2656:2" pos:end="2656:6">ifdef</cpp:directive> <name pos:start="2656:8" pos:end="2656:28">TARGET_NR_setresuid32</name></cpp:ifdef>
    <case pos:start="2657:5" pos:end="2657:31">case <expr pos:start="2657:10" pos:end="2657:30"><name pos:start="2657:10" pos:end="2657:30">TARGET_NR_setresuid32</name></expr>:</case>
        <expr_stmt pos:start="2658:9" pos:end="2661:0"><expr pos:start="2658:9" pos:end="2658:56"><name pos:start="2658:9" pos:end="2658:11">ret</name> <operator pos:start="2658:13" pos:end="2658:13">=</operator> <call pos:start="2658:15" pos:end="2658:56"><name pos:start="2658:15" pos:end="2658:23">get_errno</name><argument_list pos:start="2658:24" pos:end="2658:56">(<argument pos:start="2658:25" pos:end="2658:55"><expr pos:start="2658:25" pos:end="2658:55"><call pos:start="2658:25" pos:end="2658:55"><name pos:start="2658:25" pos:end="2658:37">sys_setresuid</name><argument_list pos:start="2658:38" pos:end="2658:55">(<argument pos:start="2658:39" pos:end="2658:42"><expr pos:start="2658:39" pos:end="2658:42"><name pos:start="2658:39" pos:end="2658:42">arg1</name></expr></argument>, <argument pos:start="2658:45" pos:end="2658:48"><expr pos:start="2658:45" pos:end="2658:48"><name pos:start="2658:45" pos:end="2658:48">arg2</name></expr></argument>, <argument pos:start="2658:51" pos:end="2658:54"><expr pos:start="2658:51" pos:end="2658:54"><name pos:start="2658:51" pos:end="2658:54">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2659:1" pos:end="2659:6">#<cpp:directive pos:start="2659:2" pos:end="2659:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2660:1" pos:end="2660:28">#<cpp:directive pos:start="2660:2" pos:end="2660:6">ifdef</cpp:directive> <name pos:start="2660:8" pos:end="2660:28">TARGET_NR_getresuid32</name></cpp:ifdef>
    <case pos:start="2661:5" pos:end="2661:31">case <expr pos:start="2661:10" pos:end="2661:30"><name pos:start="2661:10" pos:end="2661:30">TARGET_NR_getresuid32</name></expr>:</case>
        <block pos:start="2662:9" pos:end="3541:14">{<block_content pos:start="2663:13" pos:end="3541:14">
            <decl_stmt pos:start="2663:13" pos:end="2663:35"><decl pos:start="2663:13" pos:end="2663:22"><type pos:start="2663:13" pos:end="2663:17"><name pos:start="2663:13" pos:end="2663:17">uid_t</name></type> <name pos:start="2663:19" pos:end="2663:22">ruid</name></decl>, <decl pos:start="2663:25" pos:end="2663:28"><type ref="prev" pos:start="2663:13" pos:end="2663:17"/><name pos:start="2663:25" pos:end="2663:28">euid</name></decl>, <decl pos:start="2663:31" pos:end="2663:34"><type ref="prev" pos:start="2663:13" pos:end="2663:17"/><name pos:start="2663:31" pos:end="2663:34">suid</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2664:13" pos:end="2664:60"><expr pos:start="2664:13" pos:end="2664:59"><name pos:start="2664:13" pos:end="2664:15">ret</name> <operator pos:start="2664:17" pos:end="2664:17">=</operator> <call pos:start="2664:19" pos:end="2664:59"><name pos:start="2664:19" pos:end="2664:27">get_errno</name><argument_list pos:start="2664:28" pos:end="2664:59">(<argument pos:start="2664:29" pos:end="2664:58"><expr pos:start="2664:29" pos:end="2664:58"><call pos:start="2664:29" pos:end="2664:58"><name pos:start="2664:29" pos:end="2664:37">getresuid</name><argument_list pos:start="2664:38" pos:end="2664:58">(<argument pos:start="2664:39" pos:end="2664:43"><expr pos:start="2664:39" pos:end="2664:43"><operator pos:start="2664:39" pos:end="2664:39">&amp;</operator><name pos:start="2664:40" pos:end="2664:43">ruid</name></expr></argument>, <argument pos:start="2664:46" pos:end="2664:50"><expr pos:start="2664:46" pos:end="2664:50"><operator pos:start="2664:46" pos:end="2664:46">&amp;</operator><name pos:start="2664:47" pos:end="2664:50">euid</name></expr></argument>, <argument pos:start="2664:53" pos:end="2664:57"><expr pos:start="2664:53" pos:end="2664:57"><operator pos:start="2664:53" pos:end="2664:53">&amp;</operator><name pos:start="2664:54" pos:end="2664:57">suid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2665:13" pos:end="3541:14"><if pos:start="2665:13" pos:end="3541:14">if <condition pos:start="2665:16" pos:end="2665:31">(<expr pos:start="2665:17" pos:end="2665:30"><operator pos:start="2665:17" pos:end="2665:17">!</operator><call pos:start="2665:18" pos:end="2665:30"><name pos:start="2665:18" pos:end="2665:25">is_error</name><argument_list pos:start="2665:26" pos:end="2665:30">(<argument pos:start="2665:27" pos:end="2665:29"><expr pos:start="2665:27" pos:end="2665:29"><name pos:start="2665:27" pos:end="2665:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2665:33" pos:end="3541:14">{<block_content pos:start="2666:17" pos:end="3541:14">
                <if_stmt pos:start="2666:17" pos:end="2672:0"><if pos:start="2666:17" pos:end="2672:0">if <condition pos:start="2666:20" pos:end="2668:48">(<expr pos:start="2666:21" pos:end="2668:47"><call pos:start="2666:21" pos:end="2666:44"><name pos:start="2666:21" pos:end="2666:32">put_user_u32</name><argument_list pos:start="2666:33" pos:end="2666:44">(<argument pos:start="2666:34" pos:end="2666:37"><expr pos:start="2666:34" pos:end="2666:37"><name pos:start="2666:34" pos:end="2666:37">ruid</name></expr></argument>, <argument pos:start="2666:40" pos:end="2666:43"><expr pos:start="2666:40" pos:end="2666:43"><name pos:start="2666:40" pos:end="2666:43">arg1</name></expr></argument>)</argument_list></call>
                    <operator pos:start="2667:21" pos:end="2667:22">||</operator> <call pos:start="2667:24" pos:end="2667:47"><name pos:start="2667:24" pos:end="2667:35">put_user_u32</name><argument_list pos:start="2667:36" pos:end="2667:47">(<argument pos:start="2667:37" pos:end="2667:40"><expr pos:start="2667:37" pos:end="2667:40"><name pos:start="2667:37" pos:end="2667:40">euid</name></expr></argument>, <argument pos:start="2667:43" pos:end="2667:46"><expr pos:start="2667:43" pos:end="2667:46"><name pos:start="2667:43" pos:end="2667:46">arg2</name></expr></argument>)</argument_list></call>
                    <operator pos:start="2668:21" pos:end="2668:22">||</operator> <call pos:start="2668:24" pos:end="2668:47"><name pos:start="2668:24" pos:end="2668:35">put_user_u32</name><argument_list pos:start="2668:36" pos:end="2668:47">(<argument pos:start="2668:37" pos:end="2668:40"><expr pos:start="2668:37" pos:end="2668:40"><name pos:start="2668:37" pos:end="2668:40">suid</name></expr></argument>, <argument pos:start="2668:43" pos:end="2668:46"><expr pos:start="2668:43" pos:end="2668:46"><name pos:start="2668:43" pos:end="2668:46">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2669:21" pos:end="2672:0"><block_content pos:start="2669:21" pos:end="2672:0">
                    <goto pos:start="2669:21" pos:end="2672:0">goto <name pos:start="2669:26" pos:end="2669:31">efault</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif pos:start="2670:1" pos:end="2670:6">#<cpp:directive pos:start="2670:2" pos:end="2670:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2671:1" pos:end="2671:28">#<cpp:directive pos:start="2671:2" pos:end="2671:6">ifdef</cpp:directive> <name pos:start="2671:8" pos:end="2671:28">TARGET_NR_setresgid32</name></cpp:ifdef>
    <case pos:start="2672:5" pos:end="2672:31">case <expr pos:start="2672:10" pos:end="2672:30"><name pos:start="2672:10" pos:end="2672:30">TARGET_NR_setresgid32</name></expr>:</case>
        <expr_stmt pos:start="2673:9" pos:end="2676:0"><expr pos:start="2673:9" pos:end="2673:56"><name pos:start="2673:9" pos:end="2673:11">ret</name> <operator pos:start="2673:13" pos:end="2673:13">=</operator> <call pos:start="2673:15" pos:end="2673:56"><name pos:start="2673:15" pos:end="2673:23">get_errno</name><argument_list pos:start="2673:24" pos:end="2673:56">(<argument pos:start="2673:25" pos:end="2673:55"><expr pos:start="2673:25" pos:end="2673:55"><call pos:start="2673:25" pos:end="2673:55"><name pos:start="2673:25" pos:end="2673:37">sys_setresgid</name><argument_list pos:start="2673:38" pos:end="2673:55">(<argument pos:start="2673:39" pos:end="2673:42"><expr pos:start="2673:39" pos:end="2673:42"><name pos:start="2673:39" pos:end="2673:42">arg1</name></expr></argument>, <argument pos:start="2673:45" pos:end="2673:48"><expr pos:start="2673:45" pos:end="2673:48"><name pos:start="2673:45" pos:end="2673:48">arg2</name></expr></argument>, <argument pos:start="2673:51" pos:end="2673:54"><expr pos:start="2673:51" pos:end="2673:54"><name pos:start="2673:51" pos:end="2673:54">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2674:1" pos:end="2674:6">#<cpp:directive pos:start="2674:2" pos:end="2674:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2675:1" pos:end="2675:28">#<cpp:directive pos:start="2675:2" pos:end="2675:6">ifdef</cpp:directive> <name pos:start="2675:8" pos:end="2675:28">TARGET_NR_getresgid32</name></cpp:ifdef>
    <case pos:start="2676:5" pos:end="2676:31">case <expr pos:start="2676:10" pos:end="2676:30"><name pos:start="2676:10" pos:end="2676:30">TARGET_NR_getresgid32</name></expr>:</case>
        <block pos:start="2677:9" pos:end="3541:14">{<block_content pos:start="2678:13" pos:end="3541:14">
            <decl_stmt pos:start="2678:13" pos:end="2678:35"><decl pos:start="2678:13" pos:end="2678:22"><type pos:start="2678:13" pos:end="2678:17"><name pos:start="2678:13" pos:end="2678:17">gid_t</name></type> <name pos:start="2678:19" pos:end="2678:22">rgid</name></decl>, <decl pos:start="2678:25" pos:end="2678:28"><type ref="prev" pos:start="2678:13" pos:end="2678:17"/><name pos:start="2678:25" pos:end="2678:28">egid</name></decl>, <decl pos:start="2678:31" pos:end="2678:34"><type ref="prev" pos:start="2678:13" pos:end="2678:17"/><name pos:start="2678:31" pos:end="2678:34">sgid</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2679:13" pos:end="2679:60"><expr pos:start="2679:13" pos:end="2679:59"><name pos:start="2679:13" pos:end="2679:15">ret</name> <operator pos:start="2679:17" pos:end="2679:17">=</operator> <call pos:start="2679:19" pos:end="2679:59"><name pos:start="2679:19" pos:end="2679:27">get_errno</name><argument_list pos:start="2679:28" pos:end="2679:59">(<argument pos:start="2679:29" pos:end="2679:58"><expr pos:start="2679:29" pos:end="2679:58"><call pos:start="2679:29" pos:end="2679:58"><name pos:start="2679:29" pos:end="2679:37">getresgid</name><argument_list pos:start="2679:38" pos:end="2679:58">(<argument pos:start="2679:39" pos:end="2679:43"><expr pos:start="2679:39" pos:end="2679:43"><operator pos:start="2679:39" pos:end="2679:39">&amp;</operator><name pos:start="2679:40" pos:end="2679:43">rgid</name></expr></argument>, <argument pos:start="2679:46" pos:end="2679:50"><expr pos:start="2679:46" pos:end="2679:50"><operator pos:start="2679:46" pos:end="2679:46">&amp;</operator><name pos:start="2679:47" pos:end="2679:50">egid</name></expr></argument>, <argument pos:start="2679:53" pos:end="2679:57"><expr pos:start="2679:53" pos:end="2679:57"><operator pos:start="2679:53" pos:end="2679:53">&amp;</operator><name pos:start="2679:54" pos:end="2679:57">sgid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2680:13" pos:end="3541:14"><if pos:start="2680:13" pos:end="3541:14">if <condition pos:start="2680:16" pos:end="2680:31">(<expr pos:start="2680:17" pos:end="2680:30"><operator pos:start="2680:17" pos:end="2680:17">!</operator><call pos:start="2680:18" pos:end="2680:30"><name pos:start="2680:18" pos:end="2680:25">is_error</name><argument_list pos:start="2680:26" pos:end="2680:30">(<argument pos:start="2680:27" pos:end="2680:29"><expr pos:start="2680:27" pos:end="2680:29"><name pos:start="2680:27" pos:end="2680:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2680:33" pos:end="3541:14">{<block_content pos:start="2681:17" pos:end="3541:14">
                <if_stmt pos:start="2681:17" pos:end="2687:0"><if pos:start="2681:17" pos:end="2687:0">if <condition pos:start="2681:20" pos:end="2683:48">(<expr pos:start="2681:21" pos:end="2683:47"><call pos:start="2681:21" pos:end="2681:44"><name pos:start="2681:21" pos:end="2681:32">put_user_u32</name><argument_list pos:start="2681:33" pos:end="2681:44">(<argument pos:start="2681:34" pos:end="2681:37"><expr pos:start="2681:34" pos:end="2681:37"><name pos:start="2681:34" pos:end="2681:37">rgid</name></expr></argument>, <argument pos:start="2681:40" pos:end="2681:43"><expr pos:start="2681:40" pos:end="2681:43"><name pos:start="2681:40" pos:end="2681:43">arg1</name></expr></argument>)</argument_list></call>
                    <operator pos:start="2682:21" pos:end="2682:22">||</operator> <call pos:start="2682:24" pos:end="2682:47"><name pos:start="2682:24" pos:end="2682:35">put_user_u32</name><argument_list pos:start="2682:36" pos:end="2682:47">(<argument pos:start="2682:37" pos:end="2682:40"><expr pos:start="2682:37" pos:end="2682:40"><name pos:start="2682:37" pos:end="2682:40">egid</name></expr></argument>, <argument pos:start="2682:43" pos:end="2682:46"><expr pos:start="2682:43" pos:end="2682:46"><name pos:start="2682:43" pos:end="2682:46">arg2</name></expr></argument>)</argument_list></call>
                    <operator pos:start="2683:21" pos:end="2683:22">||</operator> <call pos:start="2683:24" pos:end="2683:47"><name pos:start="2683:24" pos:end="2683:35">put_user_u32</name><argument_list pos:start="2683:36" pos:end="2683:47">(<argument pos:start="2683:37" pos:end="2683:40"><expr pos:start="2683:37" pos:end="2683:40"><name pos:start="2683:37" pos:end="2683:40">sgid</name></expr></argument>, <argument pos:start="2683:43" pos:end="2683:46"><expr pos:start="2683:43" pos:end="2683:46"><name pos:start="2683:43" pos:end="2683:46">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2684:21" pos:end="2687:0"><block_content pos:start="2684:21" pos:end="2687:0">
                    <goto pos:start="2684:21" pos:end="2687:0">goto <name pos:start="2684:26" pos:end="2684:31">efault</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif pos:start="2685:1" pos:end="2685:6">#<cpp:directive pos:start="2685:2" pos:end="2685:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2686:1" pos:end="2686:24">#<cpp:directive pos:start="2686:2" pos:end="2686:6">ifdef</cpp:directive> <name pos:start="2686:8" pos:end="2686:24">TARGET_NR_chown32</name></cpp:ifdef>
    <case pos:start="2687:5" pos:end="2687:27">case <expr pos:start="2687:10" pos:end="2687:26"><name pos:start="2687:10" pos:end="2687:26">TARGET_NR_chown32</name></expr>:</case>
        <if_stmt pos:start="2688:9" pos:end="2689:24"><if pos:start="2688:9" pos:end="2689:24">if <condition pos:start="2688:12" pos:end="2688:42">(<expr pos:start="2688:13" pos:end="2688:41"><operator pos:start="2688:13" pos:end="2688:13">!</operator><operator pos:start="2688:14" pos:end="2688:14">(</operator><name pos:start="2688:15" pos:end="2688:15">p</name> <operator pos:start="2688:17" pos:end="2688:17">=</operator> <call pos:start="2688:19" pos:end="2688:40"><name pos:start="2688:19" pos:end="2688:34">lock_user_string</name><argument_list pos:start="2688:35" pos:end="2688:40">(<argument pos:start="2688:36" pos:end="2688:39"><expr pos:start="2688:36" pos:end="2688:39"><name pos:start="2688:36" pos:end="2688:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2688:41" pos:end="2688:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2689:13" pos:end="2689:24"><block_content pos:start="2689:13" pos:end="2689:24">
            <goto pos:start="2689:13" pos:end="2689:24">goto <name pos:start="2689:18" pos:end="2689:23">efault</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2690:9" pos:end="2690:46"><expr pos:start="2690:9" pos:end="2690:45"><name pos:start="2690:9" pos:end="2690:11">ret</name> <operator pos:start="2690:13" pos:end="2690:13">=</operator> <call pos:start="2690:15" pos:end="2690:45"><name pos:start="2690:15" pos:end="2690:23">get_errno</name><argument_list pos:start="2690:24" pos:end="2690:45">(<argument pos:start="2690:25" pos:end="2690:44"><expr pos:start="2690:25" pos:end="2690:44"><call pos:start="2690:25" pos:end="2690:44"><name pos:start="2690:25" pos:end="2690:29">chown</name><argument_list pos:start="2690:30" pos:end="2690:44">(<argument pos:start="2690:31" pos:end="2690:31"><expr pos:start="2690:31" pos:end="2690:31"><name pos:start="2690:31" pos:end="2690:31">p</name></expr></argument>, <argument pos:start="2690:34" pos:end="2690:37"><expr pos:start="2690:34" pos:end="2690:37"><name pos:start="2690:34" pos:end="2690:37">arg2</name></expr></argument>, <argument pos:start="2690:40" pos:end="2690:43"><expr pos:start="2690:40" pos:end="2690:43"><name pos:start="2690:40" pos:end="2690:43">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2691:9" pos:end="2694:0"><expr pos:start="2691:9" pos:end="2691:31"><call pos:start="2691:9" pos:end="2691:31"><name pos:start="2691:9" pos:end="2691:19">unlock_user</name><argument_list pos:start="2691:20" pos:end="2691:31">(<argument pos:start="2691:21" pos:end="2691:21"><expr pos:start="2691:21" pos:end="2691:21"><name pos:start="2691:21" pos:end="2691:21">p</name></expr></argument>, <argument pos:start="2691:24" pos:end="2691:27"><expr pos:start="2691:24" pos:end="2691:27"><name pos:start="2691:24" pos:end="2691:27">arg1</name></expr></argument>, <argument pos:start="2691:30" pos:end="2691:30"><expr pos:start="2691:30" pos:end="2691:30"><literal type="number" pos:start="2691:30" pos:end="2691:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2692:1" pos:end="2692:6">#<cpp:directive pos:start="2692:2" pos:end="2692:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2693:1" pos:end="2693:25">#<cpp:directive pos:start="2693:2" pos:end="2693:6">ifdef</cpp:directive> <name pos:start="2693:8" pos:end="2693:25">TARGET_NR_setuid32</name></cpp:ifdef>
    <case pos:start="2694:5" pos:end="2694:28">case <expr pos:start="2694:10" pos:end="2694:27"><name pos:start="2694:10" pos:end="2694:27">TARGET_NR_setuid32</name></expr>:</case>
        <expr_stmt pos:start="2695:9" pos:end="2698:0"><expr pos:start="2695:9" pos:end="2695:41"><name pos:start="2695:9" pos:end="2695:11">ret</name> <operator pos:start="2695:13" pos:end="2695:13">=</operator> <call pos:start="2695:15" pos:end="2695:41"><name pos:start="2695:15" pos:end="2695:23">get_errno</name><argument_list pos:start="2695:24" pos:end="2695:41">(<argument pos:start="2695:25" pos:end="2695:40"><expr pos:start="2695:25" pos:end="2695:40"><call pos:start="2695:25" pos:end="2695:40"><name pos:start="2695:25" pos:end="2695:34">sys_setuid</name><argument_list pos:start="2695:35" pos:end="2695:40">(<argument pos:start="2695:36" pos:end="2695:39"><expr pos:start="2695:36" pos:end="2695:39"><name pos:start="2695:36" pos:end="2695:39">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2696:1" pos:end="2696:6">#<cpp:directive pos:start="2696:2" pos:end="2696:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2697:1" pos:end="2697:25">#<cpp:directive pos:start="2697:2" pos:end="2697:6">ifdef</cpp:directive> <name pos:start="2697:8" pos:end="2697:25">TARGET_NR_setgid32</name></cpp:ifdef>
    <case pos:start="2698:5" pos:end="2698:28">case <expr pos:start="2698:10" pos:end="2698:27"><name pos:start="2698:10" pos:end="2698:27">TARGET_NR_setgid32</name></expr>:</case>
        <expr_stmt pos:start="2699:9" pos:end="2702:0"><expr pos:start="2699:9" pos:end="2699:41"><name pos:start="2699:9" pos:end="2699:11">ret</name> <operator pos:start="2699:13" pos:end="2699:13">=</operator> <call pos:start="2699:15" pos:end="2699:41"><name pos:start="2699:15" pos:end="2699:23">get_errno</name><argument_list pos:start="2699:24" pos:end="2699:41">(<argument pos:start="2699:25" pos:end="2699:40"><expr pos:start="2699:25" pos:end="2699:40"><call pos:start="2699:25" pos:end="2699:40"><name pos:start="2699:25" pos:end="2699:34">sys_setgid</name><argument_list pos:start="2699:35" pos:end="2699:40">(<argument pos:start="2699:36" pos:end="2699:39"><expr pos:start="2699:36" pos:end="2699:39"><name pos:start="2699:36" pos:end="2699:39">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2700:1" pos:end="2700:6">#<cpp:directive pos:start="2700:2" pos:end="2700:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2701:1" pos:end="2701:27">#<cpp:directive pos:start="2701:2" pos:end="2701:6">ifdef</cpp:directive> <name pos:start="2701:8" pos:end="2701:27">TARGET_NR_setfsuid32</name></cpp:ifdef>
    <case pos:start="2702:5" pos:end="2702:30">case <expr pos:start="2702:10" pos:end="2702:29"><name pos:start="2702:10" pos:end="2702:29">TARGET_NR_setfsuid32</name></expr>:</case>
        <expr_stmt pos:start="2703:9" pos:end="2706:0"><expr pos:start="2703:9" pos:end="2703:39"><name pos:start="2703:9" pos:end="2703:11">ret</name> <operator pos:start="2703:13" pos:end="2703:13">=</operator> <call pos:start="2703:15" pos:end="2703:39"><name pos:start="2703:15" pos:end="2703:23">get_errno</name><argument_list pos:start="2703:24" pos:end="2703:39">(<argument pos:start="2703:25" pos:end="2703:38"><expr pos:start="2703:25" pos:end="2703:38"><call pos:start="2703:25" pos:end="2703:38"><name pos:start="2703:25" pos:end="2703:32">setfsuid</name><argument_list pos:start="2703:33" pos:end="2703:38">(<argument pos:start="2703:34" pos:end="2703:37"><expr pos:start="2703:34" pos:end="2703:37"><name pos:start="2703:34" pos:end="2703:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2704:1" pos:end="2704:6">#<cpp:directive pos:start="2704:2" pos:end="2704:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2705:1" pos:end="2705:27">#<cpp:directive pos:start="2705:2" pos:end="2705:6">ifdef</cpp:directive> <name pos:start="2705:8" pos:end="2705:27">TARGET_NR_setfsgid32</name></cpp:ifdef>
    <case pos:start="2706:5" pos:end="2706:30">case <expr pos:start="2706:10" pos:end="2706:29"><name pos:start="2706:10" pos:end="2706:29">TARGET_NR_setfsgid32</name></expr>:</case>
        <expr_stmt pos:start="2707:9" pos:end="2709:0"><expr pos:start="2707:9" pos:end="2707:39"><name pos:start="2707:9" pos:end="2707:11">ret</name> <operator pos:start="2707:13" pos:end="2707:13">=</operator> <call pos:start="2707:15" pos:end="2707:39"><name pos:start="2707:15" pos:end="2707:23">get_errno</name><argument_list pos:start="2707:24" pos:end="2707:39">(<argument pos:start="2707:25" pos:end="2707:38"><expr pos:start="2707:25" pos:end="2707:38"><call pos:start="2707:25" pos:end="2707:38"><name pos:start="2707:25" pos:end="2707:32">setfsgid</name><argument_list pos:start="2707:33" pos:end="2707:38">(<argument pos:start="2707:34" pos:end="2707:37"><expr pos:start="2707:34" pos:end="2707:37"><name pos:start="2707:34" pos:end="2707:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2708:1" pos:end="2708:6">#<cpp:directive pos:start="2708:2" pos:end="2708:6">endif</cpp:directive></cpp:endif>
    <case pos:start="2709:5" pos:end="2709:30">case <expr pos:start="2709:10" pos:end="2709:29"><name pos:start="2709:10" pos:end="2709:29">TARGET_NR_pivot_root</name></expr>:</case>
        <goto pos:start="2710:9" pos:end="2712:0">goto <name pos:start="2710:14" pos:end="2710:26">unimplemented</name>;</goto>
<cpp:ifdef pos:start="2711:1" pos:end="2711:24">#<cpp:directive pos:start="2711:2" pos:end="2711:6">ifdef</cpp:directive> <name pos:start="2711:8" pos:end="2711:24">TARGET_NR_mincore</name></cpp:ifdef>
    <case pos:start="2712:5" pos:end="2712:27">case <expr pos:start="2712:10" pos:end="2712:26"><name pos:start="2712:10" pos:end="2712:26">TARGET_NR_mincore</name></expr>:</case>
        <block pos:start="2713:9" pos:end="3541:14">{<block_content pos:start="2714:13" pos:end="3541:14">
            <decl_stmt pos:start="2714:13" pos:end="2714:20"><decl pos:start="2714:13" pos:end="2714:19"><type pos:start="2714:13" pos:end="2714:18"><name pos:start="2714:13" pos:end="2714:16">void</name> <modifier pos:start="2714:18" pos:end="2714:18">*</modifier></type><name pos:start="2714:19" pos:end="2714:19">a</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2715:13" pos:end="2715:33"><expr pos:start="2715:13" pos:end="2715:32"><name pos:start="2715:13" pos:end="2715:15">ret</name> <operator pos:start="2715:17" pos:end="2715:17">=</operator> <operator pos:start="2715:19" pos:end="2715:19">-</operator><name pos:start="2715:20" pos:end="2715:32">TARGET_EFAULT</name></expr>;</expr_stmt>
            <if_stmt pos:start="2716:13" pos:end="2717:28"><if pos:start="2716:13" pos:end="2717:28">if <condition pos:start="2716:16" pos:end="2716:60">(<expr pos:start="2716:17" pos:end="2716:59"><operator pos:start="2716:17" pos:end="2716:17">!</operator><operator pos:start="2716:18" pos:end="2716:18">(</operator><name pos:start="2716:19" pos:end="2716:19">a</name> <operator pos:start="2716:21" pos:end="2716:21">=</operator> <call pos:start="2716:23" pos:end="2716:58"><name pos:start="2716:23" pos:end="2716:31">lock_user</name><argument_list pos:start="2716:32" pos:end="2716:58">(<argument pos:start="2716:33" pos:end="2716:43"><expr pos:start="2716:33" pos:end="2716:43"><name pos:start="2716:33" pos:end="2716:43">VERIFY_READ</name></expr></argument>, <argument pos:start="2716:46" pos:end="2716:49"><expr pos:start="2716:46" pos:end="2716:49"><name pos:start="2716:46" pos:end="2716:49">arg1</name></expr></argument>,<argument pos:start="2716:51" pos:end="2716:54"><expr pos:start="2716:51" pos:end="2716:54"><name pos:start="2716:51" pos:end="2716:54">arg2</name></expr></argument>, <argument pos:start="2716:57" pos:end="2716:57"><expr pos:start="2716:57" pos:end="2716:57"><literal type="number" pos:start="2716:57" pos:end="2716:57">0</literal></expr></argument>)</argument_list></call><operator pos:start="2716:59" pos:end="2716:59">)</operator></expr>)</condition><block type="pseudo" pos:start="2717:17" pos:end="2717:28"><block_content pos:start="2717:17" pos:end="2717:28">
                <goto pos:start="2717:17" pos:end="2717:28">goto <name pos:start="2717:22" pos:end="2717:27">efault</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt pos:start="2718:13" pos:end="2719:34"><if pos:start="2718:13" pos:end="2719:34">if <condition pos:start="2718:16" pos:end="2718:46">(<expr pos:start="2718:17" pos:end="2718:45"><operator pos:start="2718:17" pos:end="2718:17">!</operator><operator pos:start="2718:18" pos:end="2718:18">(</operator><name pos:start="2718:19" pos:end="2718:19">p</name> <operator pos:start="2718:21" pos:end="2718:21">=</operator> <call pos:start="2718:23" pos:end="2718:44"><name pos:start="2718:23" pos:end="2718:38">lock_user_string</name><argument_list pos:start="2718:39" pos:end="2718:44">(<argument pos:start="2718:40" pos:end="2718:43"><expr pos:start="2718:40" pos:end="2718:43"><name pos:start="2718:40" pos:end="2718:43">arg3</name></expr></argument>)</argument_list></call><operator pos:start="2718:45" pos:end="2718:45">)</operator></expr>)</condition><block type="pseudo" pos:start="2719:17" pos:end="2719:34"><block_content pos:start="2719:17" pos:end="2719:34">
                <goto pos:start="2719:17" pos:end="2719:34">goto <name pos:start="2719:22" pos:end="2719:33">mincore_fail</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2720:13" pos:end="2720:49"><expr pos:start="2720:13" pos:end="2720:48"><name pos:start="2720:13" pos:end="2720:15">ret</name> <operator pos:start="2720:17" pos:end="2720:17">=</operator> <call pos:start="2720:19" pos:end="2720:48"><name pos:start="2720:19" pos:end="2720:27">get_errno</name><argument_list pos:start="2720:28" pos:end="2720:48">(<argument pos:start="2720:29" pos:end="2720:47"><expr pos:start="2720:29" pos:end="2720:47"><call pos:start="2720:29" pos:end="2720:47"><name pos:start="2720:29" pos:end="2720:35">mincore</name><argument_list pos:start="2720:36" pos:end="2720:47">(<argument pos:start="2720:37" pos:end="2720:37"><expr pos:start="2720:37" pos:end="2720:37"><name pos:start="2720:37" pos:end="2720:37">a</name></expr></argument>, <argument pos:start="2720:40" pos:end="2720:43"><expr pos:start="2720:40" pos:end="2720:43"><name pos:start="2720:40" pos:end="2720:43">arg2</name></expr></argument>, <argument pos:start="2720:46" pos:end="2720:46"><expr pos:start="2720:46" pos:end="2720:46"><name pos:start="2720:46" pos:end="2720:46">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2721:13" pos:end="2721:38"><expr pos:start="2721:13" pos:end="2721:37"><call pos:start="2721:13" pos:end="2721:37"><name pos:start="2721:13" pos:end="2721:23">unlock_user</name><argument_list pos:start="2721:24" pos:end="2721:37">(<argument pos:start="2721:25" pos:end="2721:25"><expr pos:start="2721:25" pos:end="2721:25"><name pos:start="2721:25" pos:end="2721:25">p</name></expr></argument>, <argument pos:start="2721:28" pos:end="2721:31"><expr pos:start="2721:28" pos:end="2721:31"><name pos:start="2721:28" pos:end="2721:31">arg3</name></expr></argument>, <argument pos:start="2721:34" pos:end="2721:36"><expr pos:start="2721:34" pos:end="2721:36"><name pos:start="2721:34" pos:end="2721:36">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <label pos:start="2722:13" pos:end="2722:25"><name pos:start="2722:13" pos:end="2722:24">mincore_fail</name>:</label>
            <expr_stmt pos:start="2723:13" pos:end="2726:0"><expr pos:start="2723:13" pos:end="2723:35"><call pos:start="2723:13" pos:end="2723:35"><name pos:start="2723:13" pos:end="2723:23">unlock_user</name><argument_list pos:start="2723:24" pos:end="2723:35">(<argument pos:start="2723:25" pos:end="2723:25"><expr pos:start="2723:25" pos:end="2723:25"><name pos:start="2723:25" pos:end="2723:25">a</name></expr></argument>, <argument pos:start="2723:28" pos:end="2723:31"><expr pos:start="2723:28" pos:end="2723:31"><name pos:start="2723:28" pos:end="2723:31">arg1</name></expr></argument>, <argument pos:start="2723:34" pos:end="2723:34"><expr pos:start="2723:34" pos:end="2723:34"><literal type="number" pos:start="2723:34" pos:end="2723:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2724:1" pos:end="2724:6">#<cpp:directive pos:start="2724:2" pos:end="2724:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2725:1" pos:end="2725:33">#<cpp:directive pos:start="2725:2" pos:end="2725:6">ifdef</cpp:directive> <name pos:start="2725:8" pos:end="2725:33">TARGET_NR_arm_fadvise64_64</name></cpp:ifdef>
    <case pos:start="2726:5" pos:end="2726:36">case <expr pos:start="2726:10" pos:end="2726:35"><name pos:start="2726:10" pos:end="2726:35">TARGET_NR_arm_fadvise64_64</name></expr>:</case>
        <comment type="block" pos:start="2727:9" pos:end="2732:11">/* arm_fadvise64_64 looks like fadvise64_64 but
         * with different argument order: fd, advice, offset, len
         * rather than the usual fd, offset, len, advice.
         * Note that offset and len are both 64-bit so appear as
         * pairs of 32-bit registers.
         */</comment>
        <expr_stmt pos:start="2733:9" pos:end="2734:63"><expr pos:start="2733:9" pos:end="2734:62"><name pos:start="2733:9" pos:end="2733:11">ret</name> <operator pos:start="2733:13" pos:end="2733:13">=</operator> <call pos:start="2733:15" pos:end="2734:62"><name pos:start="2733:15" pos:end="2733:27">posix_fadvise</name><argument_list pos:start="2733:28" pos:end="2734:62">(<argument pos:start="2733:29" pos:end="2733:32"><expr pos:start="2733:29" pos:end="2733:32"><name pos:start="2733:29" pos:end="2733:32">arg1</name></expr></argument>, <argument pos:start="2733:35" pos:end="2733:61"><expr pos:start="2733:35" pos:end="2733:61"><call pos:start="2733:35" pos:end="2733:61"><name pos:start="2733:35" pos:end="2733:49">target_offset64</name><argument_list pos:start="2733:50" pos:end="2733:61">(<argument pos:start="2733:51" pos:end="2733:54"><expr pos:start="2733:51" pos:end="2733:54"><name pos:start="2733:51" pos:end="2733:54">arg3</name></expr></argument>, <argument pos:start="2733:57" pos:end="2733:60"><expr pos:start="2733:57" pos:end="2733:60"><name pos:start="2733:57" pos:end="2733:60">arg4</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument pos:start="2734:29" pos:end="2734:55"><expr pos:start="2734:29" pos:end="2734:55"><call pos:start="2734:29" pos:end="2734:55"><name pos:start="2734:29" pos:end="2734:43">target_offset64</name><argument_list pos:start="2734:44" pos:end="2734:55">(<argument pos:start="2734:45" pos:end="2734:48"><expr pos:start="2734:45" pos:end="2734:48"><name pos:start="2734:45" pos:end="2734:48">arg5</name></expr></argument>, <argument pos:start="2734:51" pos:end="2734:54"><expr pos:start="2734:51" pos:end="2734:54"><name pos:start="2734:51" pos:end="2734:54">arg6</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2734:58" pos:end="2734:61"><expr pos:start="2734:58" pos:end="2734:61"><name pos:start="2734:58" pos:end="2734:61">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2735:9" pos:end="2739:0"><expr pos:start="2735:9" pos:end="2735:40"><name pos:start="2735:9" pos:end="2735:11">ret</name> <operator pos:start="2735:13" pos:end="2735:13">=</operator> <operator pos:start="2735:15" pos:end="2735:15">-</operator><call pos:start="2735:16" pos:end="2735:40"><name pos:start="2735:16" pos:end="2735:35">host_to_target_errno</name><argument_list pos:start="2735:36" pos:end="2735:40">(<argument pos:start="2735:37" pos:end="2735:39"><expr pos:start="2735:37" pos:end="2735:39"><name pos:start="2735:37" pos:end="2735:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2736:1" pos:end="2736:6">#<cpp:directive pos:start="2736:2" pos:end="2736:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="2737:1" pos:end="2737:25">#<cpp:directive pos:start="2737:2" pos:end="2737:3">if</cpp:directive> <expr pos:start="2737:5" pos:end="2737:25"><name pos:start="2737:5" pos:end="2737:19">TARGET_ABI_BITS</name> <operator pos:start="2737:21" pos:end="2737:22">==</operator> <literal type="number" pos:start="2737:24" pos:end="2737:25">32</literal></expr></cpp:if>
<cpp:ifdef pos:start="2738:1" pos:end="2738:29">#<cpp:directive pos:start="2738:2" pos:end="2738:6">ifdef</cpp:directive> <name pos:start="2738:8" pos:end="2738:29">TARGET_NR_fadvise64_64</name></cpp:ifdef>
    <case pos:start="2739:5" pos:end="2739:32">case <expr pos:start="2739:10" pos:end="2739:31"><name pos:start="2739:10" pos:end="2739:31">TARGET_NR_fadvise64_64</name></expr>:</case>
        <comment type="block" pos:start="2740:9" pos:end="2740:69">/* 6 args: fd, offset (high, low), len (high, low), advice */</comment>
        <if_stmt pos:start="2741:9" pos:end="3541:14"><if pos:start="2741:9" pos:end="3541:14">if <condition pos:start="2741:12" pos:end="2741:38">(<expr pos:start="2741:13" pos:end="2741:37"><call pos:start="2741:13" pos:end="2741:37"><name pos:start="2741:13" pos:end="2741:28">regpairs_aligned</name><argument_list pos:start="2741:29" pos:end="2741:37">(<argument pos:start="2741:30" pos:end="2741:36"><expr pos:start="2741:30" pos:end="2741:36"><name pos:start="2741:30" pos:end="2741:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2741:40" pos:end="3541:14">{<block_content pos:start="2743:13" pos:end="3541:14">
            <comment type="block" pos:start="2742:13" pos:end="2742:66">/* offset is in (3,4), len in (5,6) and advice in 7 */</comment>
            <expr_stmt pos:start="2743:13" pos:end="2743:24"><expr pos:start="2743:13" pos:end="2743:23"><name pos:start="2743:13" pos:end="2743:16">arg2</name> <operator pos:start="2743:18" pos:end="2743:18">=</operator> <name pos:start="2743:20" pos:end="2743:23">arg3</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2744:13" pos:end="2744:24"><expr pos:start="2744:13" pos:end="2744:23"><name pos:start="2744:13" pos:end="2744:16">arg3</name> <operator pos:start="2744:18" pos:end="2744:18">=</operator> <name pos:start="2744:20" pos:end="2744:23">arg4</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2745:13" pos:end="2745:24"><expr pos:start="2745:13" pos:end="2745:23"><name pos:start="2745:13" pos:end="2745:16">arg4</name> <operator pos:start="2745:18" pos:end="2745:18">=</operator> <name pos:start="2745:20" pos:end="2745:23">arg5</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2746:13" pos:end="2746:24"><expr pos:start="2746:13" pos:end="2746:23"><name pos:start="2746:13" pos:end="2746:16">arg5</name> <operator pos:start="2746:18" pos:end="2746:18">=</operator> <name pos:start="2746:20" pos:end="2746:23">arg6</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2747:13" pos:end="2747:24"><expr pos:start="2747:13" pos:end="2747:23"><name pos:start="2747:13" pos:end="2747:16">arg6</name> <operator pos:start="2747:18" pos:end="2747:18">=</operator> <name pos:start="2747:20" pos:end="2747:23">arg7</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2748:9" pos:end="2754:0"><expr pos:start="2748:9" pos:end="2751:56"><name pos:start="2748:9" pos:end="2748:11">ret</name> <operator pos:start="2748:13" pos:end="2748:13">=</operator> <operator pos:start="2748:15" pos:end="2748:15">-</operator><call pos:start="2748:16" pos:end="2751:56"><name pos:start="2748:16" pos:end="2748:35">host_to_target_errno</name><argument_list pos:start="2748:36" pos:end="2751:56">(<argument pos:start="2748:37" pos:end="2751:55"><expr pos:start="2748:37" pos:end="2751:55"><call pos:start="2748:37" pos:end="2751:55"><name pos:start="2748:37" pos:end="2748:49">posix_fadvise</name><argument_list pos:start="2748:50" pos:end="2751:55">(<argument pos:start="2748:51" pos:end="2748:54"><expr pos:start="2748:51" pos:end="2748:54"><name pos:start="2748:51" pos:end="2748:54">arg1</name></expr></argument>,
                                                  <argument pos:start="2749:51" pos:end="2749:77"><expr pos:start="2749:51" pos:end="2749:77"><call pos:start="2749:51" pos:end="2749:77"><name pos:start="2749:51" pos:end="2749:65">target_offset64</name><argument_list pos:start="2749:66" pos:end="2749:77">(<argument pos:start="2749:67" pos:end="2749:70"><expr pos:start="2749:67" pos:end="2749:70"><name pos:start="2749:67" pos:end="2749:70">arg2</name></expr></argument>, <argument pos:start="2749:73" pos:end="2749:76"><expr pos:start="2749:73" pos:end="2749:76"><name pos:start="2749:73" pos:end="2749:76">arg3</name></expr></argument>)</argument_list></call></expr></argument>,
                                                  <argument pos:start="2750:51" pos:end="2750:77"><expr pos:start="2750:51" pos:end="2750:77"><call pos:start="2750:51" pos:end="2750:77"><name pos:start="2750:51" pos:end="2750:65">target_offset64</name><argument_list pos:start="2750:66" pos:end="2750:77">(<argument pos:start="2750:67" pos:end="2750:70"><expr pos:start="2750:67" pos:end="2750:70"><name pos:start="2750:67" pos:end="2750:70">arg4</name></expr></argument>, <argument pos:start="2750:73" pos:end="2750:76"><expr pos:start="2750:73" pos:end="2750:76"><name pos:start="2750:73" pos:end="2750:76">arg5</name></expr></argument>)</argument_list></call></expr></argument>,
                                                  <argument pos:start="2751:51" pos:end="2751:54"><expr pos:start="2751:51" pos:end="2751:54"><name pos:start="2751:51" pos:end="2751:54">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2752:1" pos:end="2752:6">#<cpp:directive pos:start="2752:2" pos:end="2752:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2753:1" pos:end="2753:26">#<cpp:directive pos:start="2753:2" pos:end="2753:6">ifdef</cpp:directive> <name pos:start="2753:8" pos:end="2753:26">TARGET_NR_fadvise64</name></cpp:ifdef>
    <case pos:start="2754:5" pos:end="2754:29">case <expr pos:start="2754:10" pos:end="2754:28"><name pos:start="2754:10" pos:end="2754:28">TARGET_NR_fadvise64</name></expr>:</case>
        <comment type="block" pos:start="2755:9" pos:end="2755:57">/* 5 args: fd, offset (high, low), len, advice */</comment>
        <if_stmt pos:start="2756:9" pos:end="3541:14"><if pos:start="2756:9" pos:end="3541:14">if <condition pos:start="2756:12" pos:end="2756:38">(<expr pos:start="2756:13" pos:end="2756:37"><call pos:start="2756:13" pos:end="2756:37"><name pos:start="2756:13" pos:end="2756:28">regpairs_aligned</name><argument_list pos:start="2756:29" pos:end="2756:37">(<argument pos:start="2756:30" pos:end="2756:36"><expr pos:start="2756:30" pos:end="2756:36"><name pos:start="2756:30" pos:end="2756:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2756:40" pos:end="3541:14">{<block_content pos:start="2758:13" pos:end="3541:14">
            <comment type="block" pos:start="2757:13" pos:end="2757:62">/* offset is in (3,4), len in 5 and advice in 6 */</comment>
            <expr_stmt pos:start="2758:13" pos:end="2758:24"><expr pos:start="2758:13" pos:end="2758:23"><name pos:start="2758:13" pos:end="2758:16">arg2</name> <operator pos:start="2758:18" pos:end="2758:18">=</operator> <name pos:start="2758:20" pos:end="2758:23">arg3</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2759:13" pos:end="2759:24"><expr pos:start="2759:13" pos:end="2759:23"><name pos:start="2759:13" pos:end="2759:16">arg3</name> <operator pos:start="2759:18" pos:end="2759:18">=</operator> <name pos:start="2759:20" pos:end="2759:23">arg4</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2760:13" pos:end="2760:24"><expr pos:start="2760:13" pos:end="2760:23"><name pos:start="2760:13" pos:end="2760:16">arg4</name> <operator pos:start="2760:18" pos:end="2760:18">=</operator> <name pos:start="2760:20" pos:end="2760:23">arg5</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2761:13" pos:end="2761:24"><expr pos:start="2761:13" pos:end="2761:23"><name pos:start="2761:13" pos:end="2761:16">arg5</name> <operator pos:start="2761:18" pos:end="2761:18">=</operator> <name pos:start="2761:20" pos:end="2761:23">arg6</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2762:9" pos:end="2769:0"><expr pos:start="2762:9" pos:end="2764:62"><name pos:start="2762:9" pos:end="2762:11">ret</name> <operator pos:start="2762:13" pos:end="2762:13">=</operator> <operator pos:start="2762:15" pos:end="2762:15">-</operator><call pos:start="2762:16" pos:end="2764:62"><name pos:start="2762:16" pos:end="2762:35">host_to_target_errno</name><argument_list pos:start="2762:36" pos:end="2764:62">(<argument pos:start="2762:37" pos:end="2764:61"><expr pos:start="2762:37" pos:end="2764:61"><call pos:start="2762:37" pos:end="2764:61"><name pos:start="2762:37" pos:end="2762:49">posix_fadvise</name><argument_list pos:start="2762:50" pos:end="2764:61">(<argument pos:start="2762:51" pos:end="2762:54"><expr pos:start="2762:51" pos:end="2762:54"><name pos:start="2762:51" pos:end="2762:54">arg1</name></expr></argument>,
                                                  <argument pos:start="2763:51" pos:end="2763:77"><expr pos:start="2763:51" pos:end="2763:77"><call pos:start="2763:51" pos:end="2763:77"><name pos:start="2763:51" pos:end="2763:65">target_offset64</name><argument_list pos:start="2763:66" pos:end="2763:77">(<argument pos:start="2763:67" pos:end="2763:70"><expr pos:start="2763:67" pos:end="2763:70"><name pos:start="2763:67" pos:end="2763:70">arg2</name></expr></argument>, <argument pos:start="2763:73" pos:end="2763:76"><expr pos:start="2763:73" pos:end="2763:76"><name pos:start="2763:73" pos:end="2763:76">arg3</name></expr></argument>)</argument_list></call></expr></argument>,
                                                  <argument pos:start="2764:51" pos:end="2764:54"><expr pos:start="2764:51" pos:end="2764:54"><name pos:start="2764:51" pos:end="2764:54">arg4</name></expr></argument>, <argument pos:start="2764:57" pos:end="2764:60"><expr pos:start="2764:57" pos:end="2764:60"><name pos:start="2764:57" pos:end="2764:60">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2765:1" pos:end="2765:6">#<cpp:directive pos:start="2765:2" pos:end="2765:6">endif</cpp:directive></cpp:endif>
<cpp:else pos:start="2766:1" pos:end="2766:5">#<cpp:directive pos:start="2766:2" pos:end="2766:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="2766:7" pos:end="2766:28">/* not a 32-bit ABI */</comment>
<cpp:if pos:start="2767:1" pos:end="2767:67">#<cpp:directive pos:start="2767:2" pos:end="2767:3">if</cpp:directive> <expr pos:start="2767:5" pos:end="2767:67"><call pos:start="2767:5" pos:end="2767:35"><name pos:start="2767:5" pos:end="2767:11">defined</name><argument_list pos:start="2767:12" pos:end="2767:35">(<argument pos:start="2767:13" pos:end="2767:34"><expr pos:start="2767:13" pos:end="2767:34"><name pos:start="2767:13" pos:end="2767:34">TARGET_NR_fadvise64_64</name></expr></argument>)</argument_list></call> <operator pos:start="2767:37" pos:end="2767:38">||</operator> <call pos:start="2767:40" pos:end="2767:67"><name pos:start="2767:40" pos:end="2767:46">defined</name><argument_list pos:start="2767:47" pos:end="2767:67">(<argument pos:start="2767:48" pos:end="2767:66"><expr pos:start="2767:48" pos:end="2767:66"><name pos:start="2767:48" pos:end="2767:66">TARGET_NR_fadvise64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef pos:start="2768:1" pos:end="2768:29">#<cpp:directive pos:start="2768:2" pos:end="2768:6">ifdef</cpp:directive> <name pos:start="2768:8" pos:end="2768:29">TARGET_NR_fadvise64_64</name></cpp:ifdef>
    <case pos:start="2769:5" pos:end="2772:0">case <expr pos:start="2769:10" pos:end="2769:31"><name pos:start="2769:10" pos:end="2769:31">TARGET_NR_fadvise64_64</name></expr>:</case>
<cpp:endif pos:start="2770:1" pos:end="2770:6">#<cpp:directive pos:start="2770:2" pos:end="2770:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2771:1" pos:end="2771:26">#<cpp:directive pos:start="2771:2" pos:end="2771:6">ifdef</cpp:directive> <name pos:start="2771:8" pos:end="2771:26">TARGET_NR_fadvise64</name></cpp:ifdef>
    <case pos:start="2772:5" pos:end="2775:0">case <expr pos:start="2772:10" pos:end="2772:28"><name pos:start="2772:10" pos:end="2772:28">TARGET_NR_fadvise64</name></expr>:</case>
<cpp:endif pos:start="2773:1" pos:end="2773:6">#<cpp:directive pos:start="2773:2" pos:end="2773:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2774:1" pos:end="2774:19">#<cpp:directive pos:start="2774:2" pos:end="2774:6">ifdef</cpp:directive> <name pos:start="2774:8" pos:end="2774:19">TARGET_S390X</name></cpp:ifdef>
        <switch pos:start="2775:9" pos:end="3541:14">switch <condition pos:start="2775:16" pos:end="2775:21">(<expr pos:start="2775:17" pos:end="2775:20"><name pos:start="2775:17" pos:end="2775:20">arg4</name></expr>)</condition> <block pos:start="2775:23" pos:end="3541:14">{<block_content pos:start="2776:9" pos:end="3541:14">
        <case pos:start="2776:9" pos:end="2776:15">case <expr pos:start="2776:14" pos:end="2776:14"><literal type="number" pos:start="2776:14" pos:end="2776:14">4</literal></expr>:</case> <expr_stmt pos:start="2776:17" pos:end="2776:46"><expr pos:start="2776:17" pos:end="2776:45"><name pos:start="2776:17" pos:end="2776:20">arg4</name> <operator pos:start="2776:22" pos:end="2776:22">=</operator> <name pos:start="2776:24" pos:end="2776:41">POSIX_FADV_NOREUSE</name> <operator pos:start="2776:43" pos:end="2776:43">+</operator> <literal type="number" pos:start="2776:45" pos:end="2776:45">1</literal></expr>;</expr_stmt> <break pos:start="2776:48" pos:end="2776:53">break;</break> <comment type="block" pos:start="2776:55" pos:end="2776:91">/* make sure it's an invalid value */</comment>
        <case pos:start="2777:9" pos:end="2777:15">case <expr pos:start="2777:14" pos:end="2777:14"><literal type="number" pos:start="2777:14" pos:end="2777:14">5</literal></expr>:</case> <expr_stmt pos:start="2777:17" pos:end="2777:46"><expr pos:start="2777:17" pos:end="2777:45"><name pos:start="2777:17" pos:end="2777:20">arg4</name> <operator pos:start="2777:22" pos:end="2777:22">=</operator> <name pos:start="2777:24" pos:end="2777:41">POSIX_FADV_NOREUSE</name> <operator pos:start="2777:43" pos:end="2777:43">+</operator> <literal type="number" pos:start="2777:45" pos:end="2777:45">2</literal></expr>;</expr_stmt> <break pos:start="2777:48" pos:end="2777:53">break;</break> <comment type="block" pos:start="2777:55" pos:end="2777:65">/* ditto */</comment>
        <case pos:start="2778:9" pos:end="2778:15">case <expr pos:start="2778:14" pos:end="2778:14"><literal type="number" pos:start="2778:14" pos:end="2778:14">6</literal></expr>:</case> <expr_stmt pos:start="2778:17" pos:end="2778:43"><expr pos:start="2778:17" pos:end="2778:42"><name pos:start="2778:17" pos:end="2778:20">arg4</name> <operator pos:start="2778:22" pos:end="2778:22">=</operator> <name pos:start="2778:24" pos:end="2778:42">POSIX_FADV_DONTNEED</name></expr>;</expr_stmt> <break pos:start="2778:45" pos:end="2778:50">break;</break>
        <case pos:start="2779:9" pos:end="2779:15">case <expr pos:start="2779:14" pos:end="2779:14"><literal type="number" pos:start="2779:14" pos:end="2779:14">7</literal></expr>:</case> <expr_stmt pos:start="2779:17" pos:end="2779:42"><expr pos:start="2779:17" pos:end="2779:41"><name pos:start="2779:17" pos:end="2779:20">arg4</name> <operator pos:start="2779:22" pos:end="2779:22">=</operator> <name pos:start="2779:24" pos:end="2779:41">POSIX_FADV_NOREUSE</name></expr>;</expr_stmt> <break pos:start="2779:44" pos:end="2779:49">break;</break>
        <default pos:start="2780:9" pos:end="2780:16">default:</default> <break pos:start="2780:18" pos:end="2782:0">break;</break>
<cpp:endif pos:start="2781:1" pos:end="2781:6">#<cpp:directive pos:start="2781:2" pos:end="2781:6">endif</cpp:directive></cpp:endif>
        <expr_stmt pos:start="2782:9" pos:end="2786:0"><expr pos:start="2782:9" pos:end="2782:74"><name pos:start="2782:9" pos:end="2782:11">ret</name> <operator pos:start="2782:13" pos:end="2782:13">=</operator> <operator pos:start="2782:15" pos:end="2782:15">-</operator><call pos:start="2782:16" pos:end="2782:74"><name pos:start="2782:16" pos:end="2782:35">host_to_target_errno</name><argument_list pos:start="2782:36" pos:end="2782:74">(<argument pos:start="2782:37" pos:end="2782:73"><expr pos:start="2782:37" pos:end="2782:73"><call pos:start="2782:37" pos:end="2782:73"><name pos:start="2782:37" pos:end="2782:49">posix_fadvise</name><argument_list pos:start="2782:50" pos:end="2782:73">(<argument pos:start="2782:51" pos:end="2782:54"><expr pos:start="2782:51" pos:end="2782:54"><name pos:start="2782:51" pos:end="2782:54">arg1</name></expr></argument>, <argument pos:start="2782:57" pos:end="2782:60"><expr pos:start="2782:57" pos:end="2782:60"><name pos:start="2782:57" pos:end="2782:60">arg2</name></expr></argument>, <argument pos:start="2782:63" pos:end="2782:66"><expr pos:start="2782:63" pos:end="2782:66"><name pos:start="2782:63" pos:end="2782:66">arg3</name></expr></argument>, <argument pos:start="2782:69" pos:end="2782:72"><expr pos:start="2782:69" pos:end="2782:72"><name pos:start="2782:69" pos:end="2782:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2783:1" pos:end="2783:6">#<cpp:directive pos:start="2783:2" pos:end="2783:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="2784:1" pos:end="2784:6">#<cpp:directive pos:start="2784:2" pos:end="2784:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="2784:8" pos:end="2784:47">/* end of 64-bit ABI fadvise handling */</comment>
<cpp:ifdef pos:start="2785:1" pos:end="2785:24">#<cpp:directive pos:start="2785:2" pos:end="2785:6">ifdef</cpp:directive> <name pos:start="2785:8" pos:end="2785:24">TARGET_NR_madvise</name></cpp:ifdef>
    <case pos:start="2786:5" pos:end="2786:27">case <expr pos:start="2786:10" pos:end="2786:26"><name pos:start="2786:10" pos:end="2786:26">TARGET_NR_madvise</name></expr>:</case>
        <comment type="block" pos:start="2787:9" pos:end="2790:71">/* A straight passthrough may not be safe because qemu sometimes
           turns private file-backed mappings into anonymous mappings.
           This will break MADV_DONTNEED.
           This is a hint, so ignoring and returning success is ok.  */</comment>
        <expr_stmt pos:start="2791:9" pos:end="2794:0"><expr pos:start="2791:9" pos:end="2791:26"><name pos:start="2791:9" pos:end="2791:11">ret</name> <operator pos:start="2791:13" pos:end="2791:13">=</operator> <call pos:start="2791:15" pos:end="2791:26"><name pos:start="2791:15" pos:end="2791:23">get_errno</name><argument_list pos:start="2791:24" pos:end="2791:26">(<argument pos:start="2791:25" pos:end="2791:25"><expr pos:start="2791:25" pos:end="2791:25"><literal type="number" pos:start="2791:25" pos:end="2791:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2792:1" pos:end="2792:6">#<cpp:directive pos:start="2792:2" pos:end="2792:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="2793:1" pos:end="2793:25">#<cpp:directive pos:start="2793:2" pos:end="2793:3">if</cpp:directive> <expr pos:start="2793:5" pos:end="2793:25"><name pos:start="2793:5" pos:end="2793:19">TARGET_ABI_BITS</name> <operator pos:start="2793:21" pos:end="2793:22">==</operator> <literal type="number" pos:start="2793:24" pos:end="2793:25">32</literal></expr></cpp:if>
    <case pos:start="2794:5" pos:end="2794:27">case <expr pos:start="2794:10" pos:end="2794:26"><name pos:start="2794:10" pos:end="2794:26">TARGET_NR_fcntl64</name></expr>:</case>
    <block pos:start="2795:5" pos:end="3541:14">{<block_content pos:start="2796:9" pos:end="3541:14">
	<decl_stmt pos:start="2796:9" pos:end="2796:16"><decl pos:start="2796:9" pos:end="2796:15"><type pos:start="2796:9" pos:end="2796:11"><name pos:start="2796:9" pos:end="2796:11">int</name></type> <name pos:start="2796:13" pos:end="2796:15">cmd</name></decl>;</decl_stmt>
	<decl_stmt pos:start="2797:9" pos:end="2797:26"><decl pos:start="2797:9" pos:end="2797:25"><type pos:start="2797:9" pos:end="2797:22"><name pos:start="2797:9" pos:end="2797:22"><name pos:start="2797:9" pos:end="2797:14">struct</name> <name pos:start="2797:16" pos:end="2797:22">flock64</name></name></type> <name pos:start="2797:24" pos:end="2797:25">fl</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2798:9" pos:end="2798:59"><decl pos:start="2798:9" pos:end="2798:58"><type pos:start="2798:9" pos:end="2798:25"><name pos:start="2798:9" pos:end="2798:23">from_flock64_fn</name> <modifier pos:start="2798:25" pos:end="2798:25">*</modifier></type><name pos:start="2798:26" pos:end="2798:33">copyfrom</name> <init pos:start="2798:35" pos:end="2798:58">= <expr pos:start="2798:37" pos:end="2798:58"><name pos:start="2798:37" pos:end="2798:58">copy_from_user_flock64</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2799:9" pos:end="2801:0"><decl pos:start="2799:9" pos:end="2799:52"><type pos:start="2799:9" pos:end="2799:23"><name pos:start="2799:9" pos:end="2799:21">to_flock64_fn</name> <modifier pos:start="2799:23" pos:end="2799:23">*</modifier></type><name pos:start="2799:24" pos:end="2799:29">copyto</name> <init pos:start="2799:31" pos:end="2799:52">= <expr pos:start="2799:33" pos:end="2799:52"><name pos:start="2799:33" pos:end="2799:52">copy_to_user_flock64</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef pos:start="2800:1" pos:end="2800:17">#<cpp:directive pos:start="2800:2" pos:end="2800:6">ifdef</cpp:directive> <name pos:start="2800:8" pos:end="2800:17">TARGET_ARM</name></cpp:ifdef>
        <if_stmt pos:start="2801:9" pos:end="3541:14"><if pos:start="2801:9" pos:end="3541:14">if <condition pos:start="2801:12" pos:end="2801:43">(<expr pos:start="2801:13" pos:end="2801:42"><operator pos:start="2801:13" pos:end="2801:13">(</operator><operator pos:start="2801:14" pos:end="2801:14">(</operator><name pos:start="2801:15" pos:end="2801:25">CPUARMState</name> <operator pos:start="2801:27" pos:end="2801:27">*</operator><operator pos:start="2801:28" pos:end="2801:28">)</operator><name pos:start="2801:29" pos:end="2801:35">cpu_env</name><operator pos:start="2801:36" pos:end="2801:36">)</operator><operator pos:start="2801:37" pos:end="2801:38">-&gt;</operator><name pos:start="2801:39" pos:end="2801:42">eabi</name></expr>)</condition> <block pos:start="2801:45" pos:end="3541:14">{<block_content pos:start="2802:13" pos:end="3541:14">
            <expr_stmt pos:start="2802:13" pos:end="2802:51"><expr pos:start="2802:13" pos:end="2802:50"><name pos:start="2802:13" pos:end="2802:20">copyfrom</name> <operator pos:start="2802:22" pos:end="2802:22">=</operator> <name pos:start="2802:24" pos:end="2802:50">copy_from_user_eabi_flock64</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2803:13" pos:end="2805:0"><expr pos:start="2803:13" pos:end="2803:46"><name pos:start="2803:13" pos:end="2803:18">copyto</name> <operator pos:start="2803:20" pos:end="2803:20">=</operator> <name pos:start="2803:22" pos:end="2803:46">copy_to_user_eabi_flock64</name></expr>;</expr_stmt>
<cpp:endif pos:start="2804:1" pos:end="2804:6">#<cpp:directive pos:start="2804:2" pos:end="2804:6">endif</cpp:directive></cpp:endif>
	<expr_stmt pos:start="2805:9" pos:end="2805:45"><expr pos:start="2805:9" pos:end="2805:44"><name pos:start="2805:9" pos:end="2805:11">cmd</name> <operator pos:start="2805:13" pos:end="2805:13">=</operator> <call pos:start="2805:15" pos:end="2805:44"><name pos:start="2805:15" pos:end="2805:38">target_to_host_fcntl_cmd</name><argument_list pos:start="2805:39" pos:end="2805:44">(<argument pos:start="2805:40" pos:end="2805:43"><expr pos:start="2805:40" pos:end="2805:43"><name pos:start="2805:40" pos:end="2805:43">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2806:9" pos:end="3541:14"><if pos:start="2806:9" pos:end="3541:14">if <condition pos:start="2806:12" pos:end="2806:34">(<expr pos:start="2806:13" pos:end="2806:33"><name pos:start="2806:13" pos:end="2806:15">cmd</name> <operator pos:start="2806:17" pos:end="2806:18">==</operator> <operator pos:start="2806:20" pos:end="2806:20">-</operator><name pos:start="2806:21" pos:end="2806:33">TARGET_EINVAL</name></expr>)</condition> <block pos:start="2806:36" pos:end="3541:14">{<block_content pos:start="2807:13" pos:end="3541:14">
            <expr_stmt pos:start="2807:13" pos:end="2807:22"><expr pos:start="2807:13" pos:end="2807:21"><name pos:start="2807:13" pos:end="2807:15">ret</name> <operator pos:start="2807:17" pos:end="2807:17">=</operator> <name pos:start="2807:19" pos:end="2807:21">cmd</name></expr>;</expr_stmt>
        <switch pos:start="2808:9" pos:end="3541:14">switch<condition pos:start="2808:15" pos:end="2808:20">(<expr pos:start="2808:16" pos:end="2808:19"><name pos:start="2808:16" pos:end="2808:19">arg2</name></expr>)</condition> <block pos:start="2808:22" pos:end="3541:14">{<block_content pos:start="2809:9" pos:end="3541:14">
        <case pos:start="2809:9" pos:end="2809:30">case <expr pos:start="2809:14" pos:end="2809:29"><name pos:start="2809:14" pos:end="2809:29">TARGET_F_GETLK64</name></expr>:</case>
            <expr_stmt pos:start="2810:13" pos:end="2810:38"><expr pos:start="2810:13" pos:end="2810:37"><name pos:start="2810:13" pos:end="2810:15">ret</name> <operator pos:start="2810:17" pos:end="2810:17">=</operator> <call pos:start="2810:19" pos:end="2810:37"><name pos:start="2810:19" pos:end="2810:26">copyfrom</name><argument_list pos:start="2810:27" pos:end="2810:37">(<argument pos:start="2810:28" pos:end="2810:30"><expr pos:start="2810:28" pos:end="2810:30"><operator pos:start="2810:28" pos:end="2810:28">&amp;</operator><name pos:start="2810:29" pos:end="2810:30">fl</name></expr></argument>, <argument pos:start="2810:33" pos:end="2810:36"><expr pos:start="2810:33" pos:end="2810:36"><name pos:start="2810:33" pos:end="2810:36">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2811:13" pos:end="3541:14"><if pos:start="2811:13" pos:end="3541:14">if <condition pos:start="2811:16" pos:end="2811:20">(<expr pos:start="2811:17" pos:end="2811:19"><name pos:start="2811:17" pos:end="2811:19">ret</name></expr>)</condition> <block pos:start="2811:22" pos:end="3541:14">{<block_content pos:start="2812:13" pos:end="3541:14">
            <expr_stmt pos:start="2812:13" pos:end="2812:51"><expr pos:start="2812:13" pos:end="2812:50"><name pos:start="2812:13" pos:end="2812:15">ret</name> <operator pos:start="2812:17" pos:end="2812:17">=</operator> <call pos:start="2812:19" pos:end="2812:50"><name pos:start="2812:19" pos:end="2812:27">get_errno</name><argument_list pos:start="2812:28" pos:end="2812:50">(<argument pos:start="2812:29" pos:end="2812:49"><expr pos:start="2812:29" pos:end="2812:49"><call pos:start="2812:29" pos:end="2812:49"><name pos:start="2812:29" pos:end="2812:33">fcntl</name><argument_list pos:start="2812:34" pos:end="2812:49">(<argument pos:start="2812:35" pos:end="2812:38"><expr pos:start="2812:35" pos:end="2812:38"><name pos:start="2812:35" pos:end="2812:38">arg1</name></expr></argument>, <argument pos:start="2812:41" pos:end="2812:43"><expr pos:start="2812:41" pos:end="2812:43"><name pos:start="2812:41" pos:end="2812:43">cmd</name></expr></argument>, <argument pos:start="2812:46" pos:end="2812:48"><expr pos:start="2812:46" pos:end="2812:48"><operator pos:start="2812:46" pos:end="2812:46">&amp;</operator><name pos:start="2812:47" pos:end="2812:48">fl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2813:13" pos:end="3541:14"><if pos:start="2813:13" pos:end="3541:14">if <condition pos:start="2813:16" pos:end="2813:25">(<expr pos:start="2813:17" pos:end="2813:24"><name pos:start="2813:17" pos:end="2813:19">ret</name> <operator pos:start="2813:21" pos:end="2813:22">==</operator> <literal type="number" pos:start="2813:24" pos:end="2813:24">0</literal></expr>)</condition> <block pos:start="2813:27" pos:end="3541:14">{<block_content pos:start="2814:17" pos:end="3541:14">
                <expr_stmt pos:start="2814:17" pos:end="2814:40"><expr pos:start="2814:17" pos:end="2814:39"><name pos:start="2814:17" pos:end="2814:19">ret</name> <operator pos:start="2814:21" pos:end="2814:21">=</operator> <call pos:start="2814:23" pos:end="2814:39"><name pos:start="2814:23" pos:end="2814:28">copyto</name><argument_list pos:start="2814:29" pos:end="2814:39">(<argument pos:start="2814:30" pos:end="2814:33"><expr pos:start="2814:30" pos:end="2814:33"><name pos:start="2814:30" pos:end="2814:33">arg3</name></expr></argument>, <argument pos:start="2814:36" pos:end="2814:38"><expr pos:start="2814:36" pos:end="2814:38"><operator pos:start="2814:36" pos:end="2814:36">&amp;</operator><name pos:start="2814:37" pos:end="2814:38">fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <case pos:start="2815:9" pos:end="2815:30">case <expr pos:start="2815:14" pos:end="2815:29"><name pos:start="2815:14" pos:end="2815:29">TARGET_F_SETLK64</name></expr>:</case>
        <case pos:start="2816:9" pos:end="2816:31">case <expr pos:start="2816:14" pos:end="2816:30"><name pos:start="2816:14" pos:end="2816:30">TARGET_F_SETLKW64</name></expr>:</case>
            <expr_stmt pos:start="2817:13" pos:end="2817:38"><expr pos:start="2817:13" pos:end="2817:37"><name pos:start="2817:13" pos:end="2817:15">ret</name> <operator pos:start="2817:17" pos:end="2817:17">=</operator> <call pos:start="2817:19" pos:end="2817:37"><name pos:start="2817:19" pos:end="2817:26">copyfrom</name><argument_list pos:start="2817:27" pos:end="2817:37">(<argument pos:start="2817:28" pos:end="2817:30"><expr pos:start="2817:28" pos:end="2817:30"><operator pos:start="2817:28" pos:end="2817:28">&amp;</operator><name pos:start="2817:29" pos:end="2817:30">fl</name></expr></argument>, <argument pos:start="2817:33" pos:end="2817:36"><expr pos:start="2817:33" pos:end="2817:36"><name pos:start="2817:33" pos:end="2817:36">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2818:13" pos:end="3541:14"><if pos:start="2818:13" pos:end="3541:14">if <condition pos:start="2818:16" pos:end="2818:20">(<expr pos:start="2818:17" pos:end="2818:19"><name pos:start="2818:17" pos:end="2818:19">ret</name></expr>)</condition> <block pos:start="2818:22" pos:end="3541:14">{<block_content pos:start="2819:13" pos:end="3541:14">
            <expr_stmt pos:start="2819:13" pos:end="2819:56"><expr pos:start="2819:13" pos:end="2819:55"><name pos:start="2819:13" pos:end="2819:15">ret</name> <operator pos:start="2819:17" pos:end="2819:17">=</operator> <call pos:start="2819:19" pos:end="2819:55"><name pos:start="2819:19" pos:end="2819:27">get_errno</name><argument_list pos:start="2819:28" pos:end="2819:55">(<argument pos:start="2819:29" pos:end="2819:54"><expr pos:start="2819:29" pos:end="2819:54"><call pos:start="2819:29" pos:end="2819:54"><name pos:start="2819:29" pos:end="2819:38">safe_fcntl</name><argument_list pos:start="2819:39" pos:end="2819:54">(<argument pos:start="2819:40" pos:end="2819:43"><expr pos:start="2819:40" pos:end="2819:43"><name pos:start="2819:40" pos:end="2819:43">arg1</name></expr></argument>, <argument pos:start="2819:46" pos:end="2819:48"><expr pos:start="2819:46" pos:end="2819:48"><name pos:start="2819:46" pos:end="2819:48">cmd</name></expr></argument>, <argument pos:start="2819:51" pos:end="2819:53"><expr pos:start="2819:51" pos:end="2819:53"><operator pos:start="2819:51" pos:end="2819:51">&amp;</operator><name pos:start="2819:52" pos:end="2819:53">fl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <default pos:start="2820:9" pos:end="2820:16">default:</default>
            <expr_stmt pos:start="2821:13" pos:end="2824:0"><expr pos:start="2821:13" pos:end="2821:44"><name pos:start="2821:13" pos:end="2821:15">ret</name> <operator pos:start="2821:17" pos:end="2821:17">=</operator> <call pos:start="2821:19" pos:end="2821:44"><name pos:start="2821:19" pos:end="2821:26">do_fcntl</name><argument_list pos:start="2821:27" pos:end="2821:44">(<argument pos:start="2821:28" pos:end="2821:31"><expr pos:start="2821:28" pos:end="2821:31"><name pos:start="2821:28" pos:end="2821:31">arg1</name></expr></argument>, <argument pos:start="2821:34" pos:end="2821:37"><expr pos:start="2821:34" pos:end="2821:37"><name pos:start="2821:34" pos:end="2821:37">arg2</name></expr></argument>, <argument pos:start="2821:40" pos:end="2821:43"><expr pos:start="2821:40" pos:end="2821:43"><name pos:start="2821:40" pos:end="2821:43">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2822:1" pos:end="2822:6">#<cpp:directive pos:start="2822:2" pos:end="2822:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2823:1" pos:end="2823:27">#<cpp:directive pos:start="2823:2" pos:end="2823:6">ifdef</cpp:directive> <name pos:start="2823:8" pos:end="2823:27">TARGET_NR_cacheflush</name></cpp:ifdef>
    <case pos:start="2824:5" pos:end="2824:30">case <expr pos:start="2824:10" pos:end="2824:29"><name pos:start="2824:10" pos:end="2824:29">TARGET_NR_cacheflush</name></expr>:</case>
        <comment type="block" pos:start="2825:9" pos:end="2825:77">/* self-modifying code is handled automatically, so nothing needed */</comment>
        <expr_stmt pos:start="2826:9" pos:end="2829:0"><expr pos:start="2826:9" pos:end="2826:15"><name pos:start="2826:9" pos:end="2826:11">ret</name> <operator pos:start="2826:13" pos:end="2826:13">=</operator> <literal type="number" pos:start="2826:15" pos:end="2826:15">0</literal></expr>;</expr_stmt>
<cpp:endif pos:start="2827:1" pos:end="2827:6">#<cpp:directive pos:start="2827:2" pos:end="2827:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2828:1" pos:end="2828:25">#<cpp:directive pos:start="2828:2" pos:end="2828:6">ifdef</cpp:directive> <name pos:start="2828:8" pos:end="2828:25">TARGET_NR_security</name></cpp:ifdef>
    <case pos:start="2829:5" pos:end="2829:28">case <expr pos:start="2829:10" pos:end="2829:27"><name pos:start="2829:10" pos:end="2829:27">TARGET_NR_security</name></expr>:</case>
        <goto pos:start="2830:9" pos:end="2833:0">goto <name pos:start="2830:14" pos:end="2830:26">unimplemented</name>;</goto>
<cpp:endif pos:start="2831:1" pos:end="2831:6">#<cpp:directive pos:start="2831:2" pos:end="2831:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2832:1" pos:end="2832:28">#<cpp:directive pos:start="2832:2" pos:end="2832:6">ifdef</cpp:directive> <name pos:start="2832:8" pos:end="2832:28">TARGET_NR_getpagesize</name></cpp:ifdef>
    <case pos:start="2833:5" pos:end="2833:31">case <expr pos:start="2833:10" pos:end="2833:30"><name pos:start="2833:10" pos:end="2833:30">TARGET_NR_getpagesize</name></expr>:</case>
        <expr_stmt pos:start="2834:9" pos:end="2836:0"><expr pos:start="2834:9" pos:end="2834:30"><name pos:start="2834:9" pos:end="2834:11">ret</name> <operator pos:start="2834:13" pos:end="2834:13">=</operator> <name pos:start="2834:15" pos:end="2834:30">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>
<cpp:endif pos:start="2835:1" pos:end="2835:6">#<cpp:directive pos:start="2835:2" pos:end="2835:6">endif</cpp:directive></cpp:endif>
    <case pos:start="2836:5" pos:end="2836:26">case <expr pos:start="2836:10" pos:end="2836:25"><name pos:start="2836:10" pos:end="2836:25">TARGET_NR_gettid</name></expr>:</case>
        <expr_stmt pos:start="2837:9" pos:end="2839:0"><expr pos:start="2837:9" pos:end="2837:33"><name pos:start="2837:9" pos:end="2837:11">ret</name> <operator pos:start="2837:13" pos:end="2837:13">=</operator> <call pos:start="2837:15" pos:end="2837:33"><name pos:start="2837:15" pos:end="2837:23">get_errno</name><argument_list pos:start="2837:24" pos:end="2837:33">(<argument pos:start="2837:25" pos:end="2837:32"><expr pos:start="2837:25" pos:end="2837:32"><call pos:start="2837:25" pos:end="2837:32"><name pos:start="2837:25" pos:end="2837:30">gettid</name><argument_list pos:start="2837:31" pos:end="2837:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="2838:1" pos:end="2838:26">#<cpp:directive pos:start="2838:2" pos:end="2838:6">ifdef</cpp:directive> <name pos:start="2838:8" pos:end="2838:26">TARGET_NR_readahead</name></cpp:ifdef>
    <case pos:start="2839:5" pos:end="2841:0">case <expr pos:start="2839:10" pos:end="2839:28"><name pos:start="2839:10" pos:end="2839:28">TARGET_NR_readahead</name></expr>:</case>
<cpp:if pos:start="2840:1" pos:end="2840:25">#<cpp:directive pos:start="2840:2" pos:end="2840:3">if</cpp:directive> <expr pos:start="2840:5" pos:end="2840:25"><name pos:start="2840:5" pos:end="2840:19">TARGET_ABI_BITS</name> <operator pos:start="2840:21" pos:end="2840:22">==</operator> <literal type="number" pos:start="2840:24" pos:end="2840:25">32</literal></expr></cpp:if>
        <if_stmt pos:start="2841:9" pos:end="3541:14"><if pos:start="2841:9" pos:end="3541:14">if <condition pos:start="2841:12" pos:end="2841:38">(<expr pos:start="2841:13" pos:end="2841:37"><call pos:start="2841:13" pos:end="2841:37"><name pos:start="2841:13" pos:end="2841:28">regpairs_aligned</name><argument_list pos:start="2841:29" pos:end="2841:37">(<argument pos:start="2841:30" pos:end="2841:36"><expr pos:start="2841:30" pos:end="2841:36"><name pos:start="2841:30" pos:end="2841:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2841:40" pos:end="3541:14">{<block_content pos:start="2842:13" pos:end="3541:14">
            <expr_stmt pos:start="2842:13" pos:end="2842:24"><expr pos:start="2842:13" pos:end="2842:23"><name pos:start="2842:13" pos:end="2842:16">arg2</name> <operator pos:start="2842:18" pos:end="2842:18">=</operator> <name pos:start="2842:20" pos:end="2842:23">arg3</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2843:13" pos:end="2843:24"><expr pos:start="2843:13" pos:end="2843:23"><name pos:start="2843:13" pos:end="2843:16">arg3</name> <operator pos:start="2843:18" pos:end="2843:18">=</operator> <name pos:start="2843:20" pos:end="2843:23">arg4</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2844:13" pos:end="2844:24"><expr pos:start="2844:13" pos:end="2844:23"><name pos:start="2844:13" pos:end="2844:16">arg4</name> <operator pos:start="2844:18" pos:end="2844:18">=</operator> <name pos:start="2844:20" pos:end="2844:23">arg5</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2845:9" pos:end="2847:0"><expr pos:start="2845:9" pos:end="2845:76"><name pos:start="2845:9" pos:end="2845:11">ret</name> <operator pos:start="2845:13" pos:end="2845:13">=</operator> <call pos:start="2845:15" pos:end="2845:76"><name pos:start="2845:15" pos:end="2845:23">get_errno</name><argument_list pos:start="2845:24" pos:end="2845:76">(<argument pos:start="2845:25" pos:end="2845:75"><expr pos:start="2845:25" pos:end="2845:75"><call pos:start="2845:25" pos:end="2845:75"><name pos:start="2845:25" pos:end="2845:33">readahead</name><argument_list pos:start="2845:34" pos:end="2845:75">(<argument pos:start="2845:35" pos:end="2845:38"><expr pos:start="2845:35" pos:end="2845:38"><name pos:start="2845:35" pos:end="2845:38">arg1</name></expr></argument>, <argument pos:start="2845:41" pos:end="2845:68"><expr pos:start="2845:41" pos:end="2845:68"><operator pos:start="2845:41" pos:end="2845:41">(</operator><operator pos:start="2845:42" pos:end="2845:42">(</operator><name pos:start="2845:43" pos:end="2845:49">off64_t</name><operator pos:start="2845:50" pos:end="2845:50">)</operator><name pos:start="2845:51" pos:end="2845:54">arg3</name> <operator pos:start="2845:56" pos:end="2845:57">&lt;&lt;</operator> <literal type="number" pos:start="2845:59" pos:end="2845:60">32</literal><operator pos:start="2845:61" pos:end="2845:61">)</operator> <operator pos:start="2845:63" pos:end="2845:63">|</operator> <name pos:start="2845:65" pos:end="2845:68">arg2</name></expr></argument>, <argument pos:start="2845:71" pos:end="2845:74"><expr pos:start="2845:71" pos:end="2845:74"><name pos:start="2845:71" pos:end="2845:74">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="2846:1" pos:end="2846:5">#<cpp:directive pos:start="2846:2" pos:end="2846:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="2847:9" pos:end="2852:0"><expr pos:start="2847:9" pos:end="2847:52"><name pos:start="2847:9" pos:end="2847:11">ret</name> <operator pos:start="2847:13" pos:end="2847:13">=</operator> <call pos:start="2847:15" pos:end="2847:52"><name pos:start="2847:15" pos:end="2847:23">get_errno</name><argument_list pos:start="2847:24" pos:end="2847:52">(<argument pos:start="2847:25" pos:end="2847:51"><expr pos:start="2847:25" pos:end="2847:51"><call pos:start="2847:25" pos:end="2847:51"><name pos:start="2847:25" pos:end="2847:33">readahead</name><argument_list pos:start="2847:34" pos:end="2847:51">(<argument pos:start="2847:35" pos:end="2847:38"><expr pos:start="2847:35" pos:end="2847:38"><name pos:start="2847:35" pos:end="2847:38">arg1</name></expr></argument>, <argument pos:start="2847:41" pos:end="2847:44"><expr pos:start="2847:41" pos:end="2847:44"><name pos:start="2847:41" pos:end="2847:44">arg2</name></expr></argument>, <argument pos:start="2847:47" pos:end="2847:50"><expr pos:start="2847:47" pos:end="2847:50"><name pos:start="2847:47" pos:end="2847:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2848:1" pos:end="2848:6">#<cpp:directive pos:start="2848:2" pos:end="2848:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="2849:1" pos:end="2849:6">#<cpp:directive pos:start="2849:2" pos:end="2849:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2850:1" pos:end="2850:18">#<cpp:directive pos:start="2850:2" pos:end="2850:6">ifdef</cpp:directive> <name pos:start="2850:8" pos:end="2850:18">CONFIG_ATTR</name></cpp:ifdef>
<cpp:ifdef pos:start="2851:1" pos:end="2851:25">#<cpp:directive pos:start="2851:2" pos:end="2851:6">ifdef</cpp:directive> <name pos:start="2851:8" pos:end="2851:25">TARGET_NR_setxattr</name></cpp:ifdef>
    <case pos:start="2852:5" pos:end="2852:29">case <expr pos:start="2852:10" pos:end="2852:28"><name pos:start="2852:10" pos:end="2852:28">TARGET_NR_listxattr</name></expr>:</case>
    <case pos:start="2853:5" pos:end="2853:30">case <expr pos:start="2853:10" pos:end="2853:29"><name pos:start="2853:10" pos:end="2853:29">TARGET_NR_llistxattr</name></expr>:</case>
    <block pos:start="2854:5" pos:end="3541:14">{<block_content pos:start="2855:9" pos:end="3541:14">
        <decl_stmt pos:start="2855:9" pos:end="2855:24"><decl pos:start="2855:9" pos:end="2855:15"><type pos:start="2855:9" pos:end="2855:14"><name pos:start="2855:9" pos:end="2855:12">void</name> <modifier pos:start="2855:14" pos:end="2855:14">*</modifier></type><name pos:start="2855:15" pos:end="2855:15">p</name></decl>, <decl pos:start="2855:18" pos:end="2855:23"><type ref="prev" pos:start="2855:9" pos:end="2855:14"><modifier pos:start="2855:18" pos:end="2855:18">*</modifier></type><name pos:start="2855:19" pos:end="2855:19">b</name> <init pos:start="2855:21" pos:end="2855:23">= <expr pos:start="2855:23" pos:end="2855:23"><literal type="number" pos:start="2855:23" pos:end="2855:23">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2856:9" pos:end="3541:14"><if pos:start="2856:9" pos:end="3541:14">if <condition pos:start="2856:12" pos:end="2856:17">(<expr pos:start="2856:13" pos:end="2856:16"><name pos:start="2856:13" pos:end="2856:16">arg2</name></expr>)</condition> <block pos:start="2856:19" pos:end="3541:14">{<block_content pos:start="2857:13" pos:end="3541:14">
            <expr_stmt pos:start="2857:13" pos:end="2857:55"><expr pos:start="2857:13" pos:end="2857:54"><name pos:start="2857:13" pos:end="2857:13">b</name> <operator pos:start="2857:15" pos:end="2857:15">=</operator> <call pos:start="2857:17" pos:end="2857:54"><name pos:start="2857:17" pos:end="2857:25">lock_user</name><argument_list pos:start="2857:26" pos:end="2857:54">(<argument pos:start="2857:27" pos:end="2857:38"><expr pos:start="2857:27" pos:end="2857:38"><name pos:start="2857:27" pos:end="2857:38">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2857:41" pos:end="2857:44"><expr pos:start="2857:41" pos:end="2857:44"><name pos:start="2857:41" pos:end="2857:44">arg2</name></expr></argument>, <argument pos:start="2857:47" pos:end="2857:50"><expr pos:start="2857:47" pos:end="2857:50"><name pos:start="2857:47" pos:end="2857:50">arg3</name></expr></argument>, <argument pos:start="2857:53" pos:end="2857:53"><expr pos:start="2857:53" pos:end="2857:53"><literal type="number" pos:start="2857:53" pos:end="2857:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2858:13" pos:end="3541:14"><if pos:start="2858:13" pos:end="3541:14">if <condition pos:start="2858:16" pos:end="2858:19">(<expr pos:start="2858:17" pos:end="2858:18"><operator pos:start="2858:17" pos:end="2858:17">!</operator><name pos:start="2858:18" pos:end="2858:18">b</name></expr>)</condition> <block pos:start="2858:21" pos:end="3541:14">{<block_content pos:start="2859:17" pos:end="3541:14">
                <expr_stmt pos:start="2859:17" pos:end="2859:37"><expr pos:start="2859:17" pos:end="2859:36"><name pos:start="2859:17" pos:end="2859:19">ret</name> <operator pos:start="2859:21" pos:end="2859:21">=</operator> <operator pos:start="2859:23" pos:end="2859:23">-</operator><name pos:start="2859:24" pos:end="2859:36">TARGET_EFAULT</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2860:9" pos:end="2860:35"><expr pos:start="2860:9" pos:end="2860:34"><name pos:start="2860:9" pos:end="2860:9">p</name> <operator pos:start="2860:11" pos:end="2860:11">=</operator> <call pos:start="2860:13" pos:end="2860:34"><name pos:start="2860:13" pos:end="2860:28">lock_user_string</name><argument_list pos:start="2860:29" pos:end="2860:34">(<argument pos:start="2860:30" pos:end="2860:33"><expr pos:start="2860:30" pos:end="2860:33"><name pos:start="2860:30" pos:end="2860:33">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2861:9" pos:end="3541:14"><if pos:start="2861:9" pos:end="3541:14">if <condition pos:start="2861:12" pos:end="2861:14">(<expr pos:start="2861:13" pos:end="2861:13"><name pos:start="2861:13" pos:end="2861:13">p</name></expr>)</condition> <block pos:start="2861:16" pos:end="3541:14">{<block_content pos:start="2862:13" pos:end="3541:14">
            <if_stmt pos:start="2862:13" pos:end="2866:9"><if pos:start="2862:13" pos:end="2864:13">if <condition pos:start="2862:16" pos:end="2862:43">(<expr pos:start="2862:17" pos:end="2862:42"><name pos:start="2862:17" pos:end="2862:19">num</name> <operator pos:start="2862:21" pos:end="2862:22">==</operator> <name pos:start="2862:24" pos:end="2862:42">TARGET_NR_listxattr</name></expr>)</condition> <block pos:start="2862:45" pos:end="2864:13">{<block_content pos:start="2863:17" pos:end="2863:55">
                <expr_stmt pos:start="2863:17" pos:end="2863:55"><expr pos:start="2863:17" pos:end="2863:54"><name pos:start="2863:17" pos:end="2863:19">ret</name> <operator pos:start="2863:21" pos:end="2863:21">=</operator> <call pos:start="2863:23" pos:end="2863:54"><name pos:start="2863:23" pos:end="2863:31">get_errno</name><argument_list pos:start="2863:32" pos:end="2863:54">(<argument pos:start="2863:33" pos:end="2863:53"><expr pos:start="2863:33" pos:end="2863:53"><call pos:start="2863:33" pos:end="2863:53"><name pos:start="2863:33" pos:end="2863:41">listxattr</name><argument_list pos:start="2863:42" pos:end="2863:53">(<argument pos:start="2863:43" pos:end="2863:43"><expr pos:start="2863:43" pos:end="2863:43"><name pos:start="2863:43" pos:end="2863:43">p</name></expr></argument>, <argument pos:start="2863:46" pos:end="2863:46"><expr pos:start="2863:46" pos:end="2863:46"><name pos:start="2863:46" pos:end="2863:46">b</name></expr></argument>, <argument pos:start="2863:49" pos:end="2863:52"><expr pos:start="2863:49" pos:end="2863:52"><name pos:start="2863:49" pos:end="2863:52">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2864:15" pos:end="2866:9">else <block pos:start="2864:20" pos:end="2866:9">{<block_content pos:start="2865:17" pos:end="2865:56">
                <expr_stmt pos:start="2865:17" pos:end="2865:56"><expr pos:start="2865:17" pos:end="2865:55"><name pos:start="2865:17" pos:end="2865:19">ret</name> <operator pos:start="2865:21" pos:end="2865:21">=</operator> <call pos:start="2865:23" pos:end="2865:55"><name pos:start="2865:23" pos:end="2865:31">get_errno</name><argument_list pos:start="2865:32" pos:end="2865:55">(<argument pos:start="2865:33" pos:end="2865:54"><expr pos:start="2865:33" pos:end="2865:54"><call pos:start="2865:33" pos:end="2865:54"><name pos:start="2865:33" pos:end="2865:42">llistxattr</name><argument_list pos:start="2865:43" pos:end="2865:54">(<argument pos:start="2865:44" pos:end="2865:44"><expr pos:start="2865:44" pos:end="2865:44"><name pos:start="2865:44" pos:end="2865:44">p</name></expr></argument>, <argument pos:start="2865:47" pos:end="2865:47"><expr pos:start="2865:47" pos:end="2865:47"><name pos:start="2865:47" pos:end="2865:47">b</name></expr></argument>, <argument pos:start="2865:50" pos:end="2865:53"><expr pos:start="2865:50" pos:end="2865:53"><name pos:start="2865:50" pos:end="2865:53">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> <if_stmt pos:start="2866:11" pos:end="3541:14"><else pos:start="2866:11" pos:end="3541:14">else <block pos:start="2866:16" pos:end="3541:14">{<block_content pos:start="2867:13" pos:end="3541:14">
            <expr_stmt pos:start="2867:13" pos:end="2867:33"><expr pos:start="2867:13" pos:end="2867:32"><name pos:start="2867:13" pos:end="2867:15">ret</name> <operator pos:start="2867:17" pos:end="2867:17">=</operator> <operator pos:start="2867:19" pos:end="2867:19">-</operator><name pos:start="2867:20" pos:end="2867:32">TARGET_EFAULT</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2868:9" pos:end="2868:32"><expr pos:start="2868:9" pos:end="2868:31"><call pos:start="2868:9" pos:end="2868:31"><name pos:start="2868:9" pos:end="2868:19">unlock_user</name><argument_list pos:start="2868:20" pos:end="2868:31">(<argument pos:start="2868:21" pos:end="2868:21"><expr pos:start="2868:21" pos:end="2868:21"><name pos:start="2868:21" pos:end="2868:21">p</name></expr></argument>, <argument pos:start="2868:24" pos:end="2868:27"><expr pos:start="2868:24" pos:end="2868:27"><name pos:start="2868:24" pos:end="2868:27">arg1</name></expr></argument>, <argument pos:start="2868:30" pos:end="2868:30"><expr pos:start="2868:30" pos:end="2868:30"><literal type="number" pos:start="2868:30" pos:end="2868:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2869:9" pos:end="2869:35"><expr pos:start="2869:9" pos:end="2869:34"><call pos:start="2869:9" pos:end="2869:34"><name pos:start="2869:9" pos:end="2869:19">unlock_user</name><argument_list pos:start="2869:20" pos:end="2869:34">(<argument pos:start="2869:21" pos:end="2869:21"><expr pos:start="2869:21" pos:end="2869:21"><name pos:start="2869:21" pos:end="2869:21">b</name></expr></argument>, <argument pos:start="2869:24" pos:end="2869:27"><expr pos:start="2869:24" pos:end="2869:27"><name pos:start="2869:24" pos:end="2869:27">arg2</name></expr></argument>, <argument pos:start="2869:30" pos:end="2869:33"><expr pos:start="2869:30" pos:end="2869:33"><name pos:start="2869:30" pos:end="2869:33">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2870:5" pos:end="2870:30">case <expr pos:start="2870:10" pos:end="2870:29"><name pos:start="2870:10" pos:end="2870:29">TARGET_NR_flistxattr</name></expr>:</case>
    <block pos:start="2871:5" pos:end="3541:14">{<block_content pos:start="2872:9" pos:end="3541:14">
        <decl_stmt pos:start="2872:9" pos:end="2872:20"><decl pos:start="2872:9" pos:end="2872:19"><type pos:start="2872:9" pos:end="2872:14"><name pos:start="2872:9" pos:end="2872:12">void</name> <modifier pos:start="2872:14" pos:end="2872:14">*</modifier></type><name pos:start="2872:15" pos:end="2872:15">b</name> <init pos:start="2872:17" pos:end="2872:19">= <expr pos:start="2872:19" pos:end="2872:19"><literal type="number" pos:start="2872:19" pos:end="2872:19">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2873:9" pos:end="3541:14"><if pos:start="2873:9" pos:end="3541:14">if <condition pos:start="2873:12" pos:end="2873:17">(<expr pos:start="2873:13" pos:end="2873:16"><name pos:start="2873:13" pos:end="2873:16">arg2</name></expr>)</condition> <block pos:start="2873:19" pos:end="3541:14">{<block_content pos:start="2874:13" pos:end="3541:14">
            <expr_stmt pos:start="2874:13" pos:end="2874:55"><expr pos:start="2874:13" pos:end="2874:54"><name pos:start="2874:13" pos:end="2874:13">b</name> <operator pos:start="2874:15" pos:end="2874:15">=</operator> <call pos:start="2874:17" pos:end="2874:54"><name pos:start="2874:17" pos:end="2874:25">lock_user</name><argument_list pos:start="2874:26" pos:end="2874:54">(<argument pos:start="2874:27" pos:end="2874:38"><expr pos:start="2874:27" pos:end="2874:38"><name pos:start="2874:27" pos:end="2874:38">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2874:41" pos:end="2874:44"><expr pos:start="2874:41" pos:end="2874:44"><name pos:start="2874:41" pos:end="2874:44">arg2</name></expr></argument>, <argument pos:start="2874:47" pos:end="2874:50"><expr pos:start="2874:47" pos:end="2874:50"><name pos:start="2874:47" pos:end="2874:50">arg3</name></expr></argument>, <argument pos:start="2874:53" pos:end="2874:53"><expr pos:start="2874:53" pos:end="2874:53"><literal type="number" pos:start="2874:53" pos:end="2874:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2875:13" pos:end="3541:14"><if pos:start="2875:13" pos:end="3541:14">if <condition pos:start="2875:16" pos:end="2875:19">(<expr pos:start="2875:17" pos:end="2875:18"><operator pos:start="2875:17" pos:end="2875:17">!</operator><name pos:start="2875:18" pos:end="2875:18">b</name></expr>)</condition> <block pos:start="2875:21" pos:end="3541:14">{<block_content pos:start="2876:17" pos:end="3541:14">
                <expr_stmt pos:start="2876:17" pos:end="2876:37"><expr pos:start="2876:17" pos:end="2876:36"><name pos:start="2876:17" pos:end="2876:19">ret</name> <operator pos:start="2876:21" pos:end="2876:21">=</operator> <operator pos:start="2876:23" pos:end="2876:23">-</operator><name pos:start="2876:24" pos:end="2876:36">TARGET_EFAULT</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2877:9" pos:end="2877:51"><expr pos:start="2877:9" pos:end="2877:50"><name pos:start="2877:9" pos:end="2877:11">ret</name> <operator pos:start="2877:13" pos:end="2877:13">=</operator> <call pos:start="2877:15" pos:end="2877:50"><name pos:start="2877:15" pos:end="2877:23">get_errno</name><argument_list pos:start="2877:24" pos:end="2877:50">(<argument pos:start="2877:25" pos:end="2877:49"><expr pos:start="2877:25" pos:end="2877:49"><call pos:start="2877:25" pos:end="2877:49"><name pos:start="2877:25" pos:end="2877:34">flistxattr</name><argument_list pos:start="2877:35" pos:end="2877:49">(<argument pos:start="2877:36" pos:end="2877:39"><expr pos:start="2877:36" pos:end="2877:39"><name pos:start="2877:36" pos:end="2877:39">arg1</name></expr></argument>, <argument pos:start="2877:42" pos:end="2877:42"><expr pos:start="2877:42" pos:end="2877:42"><name pos:start="2877:42" pos:end="2877:42">b</name></expr></argument>, <argument pos:start="2877:45" pos:end="2877:48"><expr pos:start="2877:45" pos:end="2877:48"><name pos:start="2877:45" pos:end="2877:48">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2878:9" pos:end="2878:35"><expr pos:start="2878:9" pos:end="2878:34"><call pos:start="2878:9" pos:end="2878:34"><name pos:start="2878:9" pos:end="2878:19">unlock_user</name><argument_list pos:start="2878:20" pos:end="2878:34">(<argument pos:start="2878:21" pos:end="2878:21"><expr pos:start="2878:21" pos:end="2878:21"><name pos:start="2878:21" pos:end="2878:21">b</name></expr></argument>, <argument pos:start="2878:24" pos:end="2878:27"><expr pos:start="2878:24" pos:end="2878:27"><name pos:start="2878:24" pos:end="2878:27">arg2</name></expr></argument>, <argument pos:start="2878:30" pos:end="2878:33"><expr pos:start="2878:30" pos:end="2878:33"><name pos:start="2878:30" pos:end="2878:33">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2879:5" pos:end="2879:28">case <expr pos:start="2879:10" pos:end="2879:27"><name pos:start="2879:10" pos:end="2879:27">TARGET_NR_setxattr</name></expr>:</case>
    <case pos:start="2880:5" pos:end="2880:29">case <expr pos:start="2880:10" pos:end="2880:28"><name pos:start="2880:10" pos:end="2880:28">TARGET_NR_lsetxattr</name></expr>:</case>
        <block pos:start="2881:9" pos:end="3541:14">{<block_content pos:start="2882:13" pos:end="3541:14">
            <decl_stmt pos:start="2882:13" pos:end="2882:32"><decl pos:start="2882:13" pos:end="2882:19"><type pos:start="2882:13" pos:end="2882:18"><name pos:start="2882:13" pos:end="2882:16">void</name> <modifier pos:start="2882:18" pos:end="2882:18">*</modifier></type><name pos:start="2882:19" pos:end="2882:19">p</name></decl>, <decl pos:start="2882:22" pos:end="2882:23"><type ref="prev" pos:start="2882:13" pos:end="2882:18"><modifier pos:start="2882:22" pos:end="2882:22">*</modifier></type><name pos:start="2882:23" pos:end="2882:23">n</name></decl>, <decl pos:start="2882:26" pos:end="2882:31"><type ref="prev" pos:start="2882:13" pos:end="2882:18"><modifier pos:start="2882:26" pos:end="2882:26">*</modifier></type><name pos:start="2882:27" pos:end="2882:27">v</name> <init pos:start="2882:29" pos:end="2882:31">= <expr pos:start="2882:31" pos:end="2882:31"><literal type="number" pos:start="2882:31" pos:end="2882:31">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2883:13" pos:end="3541:14"><if pos:start="2883:13" pos:end="3541:14">if <condition pos:start="2883:16" pos:end="2883:21">(<expr pos:start="2883:17" pos:end="2883:20"><name pos:start="2883:17" pos:end="2883:20">arg3</name></expr>)</condition> <block pos:start="2883:23" pos:end="3541:14">{<block_content pos:start="2884:17" pos:end="3541:14">
                <expr_stmt pos:start="2884:17" pos:end="2884:58"><expr pos:start="2884:17" pos:end="2884:57"><name pos:start="2884:17" pos:end="2884:17">v</name> <operator pos:start="2884:19" pos:end="2884:19">=</operator> <call pos:start="2884:21" pos:end="2884:57"><name pos:start="2884:21" pos:end="2884:29">lock_user</name><argument_list pos:start="2884:30" pos:end="2884:57">(<argument pos:start="2884:31" pos:end="2884:41"><expr pos:start="2884:31" pos:end="2884:41"><name pos:start="2884:31" pos:end="2884:41">VERIFY_READ</name></expr></argument>, <argument pos:start="2884:44" pos:end="2884:47"><expr pos:start="2884:44" pos:end="2884:47"><name pos:start="2884:44" pos:end="2884:47">arg3</name></expr></argument>, <argument pos:start="2884:50" pos:end="2884:53"><expr pos:start="2884:50" pos:end="2884:53"><name pos:start="2884:50" pos:end="2884:53">arg4</name></expr></argument>, <argument pos:start="2884:56" pos:end="2884:56"><expr pos:start="2884:56" pos:end="2884:56"><literal type="number" pos:start="2884:56" pos:end="2884:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2885:17" pos:end="3541:14"><if pos:start="2885:17" pos:end="3541:14">if <condition pos:start="2885:20" pos:end="2885:23">(<expr pos:start="2885:21" pos:end="2885:22"><operator pos:start="2885:21" pos:end="2885:21">!</operator><name pos:start="2885:22" pos:end="2885:22">v</name></expr>)</condition> <block pos:start="2885:25" pos:end="3541:14">{<block_content pos:start="2886:21" pos:end="3541:14">
                    <expr_stmt pos:start="2886:21" pos:end="2886:41"><expr pos:start="2886:21" pos:end="2886:40"><name pos:start="2886:21" pos:end="2886:23">ret</name> <operator pos:start="2886:25" pos:end="2886:25">=</operator> <operator pos:start="2886:27" pos:end="2886:27">-</operator><name pos:start="2886:28" pos:end="2886:40">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2887:13" pos:end="2887:39"><expr pos:start="2887:13" pos:end="2887:38"><name pos:start="2887:13" pos:end="2887:13">p</name> <operator pos:start="2887:15" pos:end="2887:15">=</operator> <call pos:start="2887:17" pos:end="2887:38"><name pos:start="2887:17" pos:end="2887:32">lock_user_string</name><argument_list pos:start="2887:33" pos:end="2887:38">(<argument pos:start="2887:34" pos:end="2887:37"><expr pos:start="2887:34" pos:end="2887:37"><name pos:start="2887:34" pos:end="2887:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2888:13" pos:end="2888:39"><expr pos:start="2888:13" pos:end="2888:38"><name pos:start="2888:13" pos:end="2888:13">n</name> <operator pos:start="2888:15" pos:end="2888:15">=</operator> <call pos:start="2888:17" pos:end="2888:38"><name pos:start="2888:17" pos:end="2888:32">lock_user_string</name><argument_list pos:start="2888:33" pos:end="2888:38">(<argument pos:start="2888:34" pos:end="2888:37"><expr pos:start="2888:34" pos:end="2888:37"><name pos:start="2888:34" pos:end="2888:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2889:13" pos:end="3541:14"><if pos:start="2889:13" pos:end="3541:14">if <condition pos:start="2889:16" pos:end="2889:23">(<expr pos:start="2889:17" pos:end="2889:22"><name pos:start="2889:17" pos:end="2889:17">p</name> <operator pos:start="2889:19" pos:end="2889:20">&amp;&amp;</operator> <name pos:start="2889:22" pos:end="2889:22">n</name></expr>)</condition> <block pos:start="2889:25" pos:end="3541:14">{<block_content pos:start="2890:17" pos:end="3541:14">
                <if_stmt pos:start="2890:17" pos:end="2894:13"><if pos:start="2890:17" pos:end="2892:17">if <condition pos:start="2890:20" pos:end="2890:46">(<expr pos:start="2890:21" pos:end="2890:45"><name pos:start="2890:21" pos:end="2890:23">num</name> <operator pos:start="2890:25" pos:end="2890:26">==</operator> <name pos:start="2890:28" pos:end="2890:45">TARGET_NR_setxattr</name></expr>)</condition> <block pos:start="2890:48" pos:end="2892:17">{<block_content pos:start="2891:21" pos:end="2891:67">
                    <expr_stmt pos:start="2891:21" pos:end="2891:67"><expr pos:start="2891:21" pos:end="2891:66"><name pos:start="2891:21" pos:end="2891:23">ret</name> <operator pos:start="2891:25" pos:end="2891:25">=</operator> <call pos:start="2891:27" pos:end="2891:66"><name pos:start="2891:27" pos:end="2891:35">get_errno</name><argument_list pos:start="2891:36" pos:end="2891:66">(<argument pos:start="2891:37" pos:end="2891:65"><expr pos:start="2891:37" pos:end="2891:65"><call pos:start="2891:37" pos:end="2891:65"><name pos:start="2891:37" pos:end="2891:44">setxattr</name><argument_list pos:start="2891:45" pos:end="2891:65">(<argument pos:start="2891:46" pos:end="2891:46"><expr pos:start="2891:46" pos:end="2891:46"><name pos:start="2891:46" pos:end="2891:46">p</name></expr></argument>, <argument pos:start="2891:49" pos:end="2891:49"><expr pos:start="2891:49" pos:end="2891:49"><name pos:start="2891:49" pos:end="2891:49">n</name></expr></argument>, <argument pos:start="2891:52" pos:end="2891:52"><expr pos:start="2891:52" pos:end="2891:52"><name pos:start="2891:52" pos:end="2891:52">v</name></expr></argument>, <argument pos:start="2891:55" pos:end="2891:58"><expr pos:start="2891:55" pos:end="2891:58"><name pos:start="2891:55" pos:end="2891:58">arg4</name></expr></argument>, <argument pos:start="2891:61" pos:end="2891:64"><expr pos:start="2891:61" pos:end="2891:64"><name pos:start="2891:61" pos:end="2891:64">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="2892:19" pos:end="2894:13">else <block pos:start="2892:24" pos:end="2894:13">{<block_content pos:start="2893:21" pos:end="2893:68">
                    <expr_stmt pos:start="2893:21" pos:end="2893:68"><expr pos:start="2893:21" pos:end="2893:67"><name pos:start="2893:21" pos:end="2893:23">ret</name> <operator pos:start="2893:25" pos:end="2893:25">=</operator> <call pos:start="2893:27" pos:end="2893:67"><name pos:start="2893:27" pos:end="2893:35">get_errno</name><argument_list pos:start="2893:36" pos:end="2893:67">(<argument pos:start="2893:37" pos:end="2893:66"><expr pos:start="2893:37" pos:end="2893:66"><call pos:start="2893:37" pos:end="2893:66"><name pos:start="2893:37" pos:end="2893:45">lsetxattr</name><argument_list pos:start="2893:46" pos:end="2893:66">(<argument pos:start="2893:47" pos:end="2893:47"><expr pos:start="2893:47" pos:end="2893:47"><name pos:start="2893:47" pos:end="2893:47">p</name></expr></argument>, <argument pos:start="2893:50" pos:end="2893:50"><expr pos:start="2893:50" pos:end="2893:50"><name pos:start="2893:50" pos:end="2893:50">n</name></expr></argument>, <argument pos:start="2893:53" pos:end="2893:53"><expr pos:start="2893:53" pos:end="2893:53"><name pos:start="2893:53" pos:end="2893:53">v</name></expr></argument>, <argument pos:start="2893:56" pos:end="2893:59"><expr pos:start="2893:56" pos:end="2893:59"><name pos:start="2893:56" pos:end="2893:59">arg4</name></expr></argument>, <argument pos:start="2893:62" pos:end="2893:65"><expr pos:start="2893:62" pos:end="2893:65"><name pos:start="2893:62" pos:end="2893:65">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="2894:15" pos:end="3541:14"><else pos:start="2894:15" pos:end="3541:14">else <block pos:start="2894:20" pos:end="3541:14">{<block_content pos:start="2895:17" pos:end="3541:14">
                <expr_stmt pos:start="2895:17" pos:end="2895:37"><expr pos:start="2895:17" pos:end="2895:36"><name pos:start="2895:17" pos:end="2895:19">ret</name> <operator pos:start="2895:21" pos:end="2895:21">=</operator> <operator pos:start="2895:23" pos:end="2895:23">-</operator><name pos:start="2895:24" pos:end="2895:36">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2896:13" pos:end="2896:36"><expr pos:start="2896:13" pos:end="2896:35"><call pos:start="2896:13" pos:end="2896:35"><name pos:start="2896:13" pos:end="2896:23">unlock_user</name><argument_list pos:start="2896:24" pos:end="2896:35">(<argument pos:start="2896:25" pos:end="2896:25"><expr pos:start="2896:25" pos:end="2896:25"><name pos:start="2896:25" pos:end="2896:25">p</name></expr></argument>, <argument pos:start="2896:28" pos:end="2896:31"><expr pos:start="2896:28" pos:end="2896:31"><name pos:start="2896:28" pos:end="2896:31">arg1</name></expr></argument>, <argument pos:start="2896:34" pos:end="2896:34"><expr pos:start="2896:34" pos:end="2896:34"><literal type="number" pos:start="2896:34" pos:end="2896:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2897:13" pos:end="2897:36"><expr pos:start="2897:13" pos:end="2897:35"><call pos:start="2897:13" pos:end="2897:35"><name pos:start="2897:13" pos:end="2897:23">unlock_user</name><argument_list pos:start="2897:24" pos:end="2897:35">(<argument pos:start="2897:25" pos:end="2897:25"><expr pos:start="2897:25" pos:end="2897:25"><name pos:start="2897:25" pos:end="2897:25">n</name></expr></argument>, <argument pos:start="2897:28" pos:end="2897:31"><expr pos:start="2897:28" pos:end="2897:31"><name pos:start="2897:28" pos:end="2897:31">arg2</name></expr></argument>, <argument pos:start="2897:34" pos:end="2897:34"><expr pos:start="2897:34" pos:end="2897:34"><literal type="number" pos:start="2897:34" pos:end="2897:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2898:13" pos:end="2898:36"><expr pos:start="2898:13" pos:end="2898:35"><call pos:start="2898:13" pos:end="2898:35"><name pos:start="2898:13" pos:end="2898:23">unlock_user</name><argument_list pos:start="2898:24" pos:end="2898:35">(<argument pos:start="2898:25" pos:end="2898:25"><expr pos:start="2898:25" pos:end="2898:25"><name pos:start="2898:25" pos:end="2898:25">v</name></expr></argument>, <argument pos:start="2898:28" pos:end="2898:31"><expr pos:start="2898:28" pos:end="2898:31"><name pos:start="2898:28" pos:end="2898:31">arg3</name></expr></argument>, <argument pos:start="2898:34" pos:end="2898:34"><expr pos:start="2898:34" pos:end="2898:34"><literal type="number" pos:start="2898:34" pos:end="2898:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2899:5" pos:end="2899:29">case <expr pos:start="2899:10" pos:end="2899:28"><name pos:start="2899:10" pos:end="2899:28">TARGET_NR_fsetxattr</name></expr>:</case>
        <block pos:start="2900:9" pos:end="3541:14">{<block_content pos:start="2901:13" pos:end="3541:14">
            <decl_stmt pos:start="2901:13" pos:end="2901:28"><decl pos:start="2901:13" pos:end="2901:19"><type pos:start="2901:13" pos:end="2901:18"><name pos:start="2901:13" pos:end="2901:16">void</name> <modifier pos:start="2901:18" pos:end="2901:18">*</modifier></type><name pos:start="2901:19" pos:end="2901:19">n</name></decl>, <decl pos:start="2901:22" pos:end="2901:27"><type ref="prev" pos:start="2901:13" pos:end="2901:18"><modifier pos:start="2901:22" pos:end="2901:22">*</modifier></type><name pos:start="2901:23" pos:end="2901:23">v</name> <init pos:start="2901:25" pos:end="2901:27">= <expr pos:start="2901:27" pos:end="2901:27"><literal type="number" pos:start="2901:27" pos:end="2901:27">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2902:13" pos:end="3541:14"><if pos:start="2902:13" pos:end="3541:14">if <condition pos:start="2902:16" pos:end="2902:21">(<expr pos:start="2902:17" pos:end="2902:20"><name pos:start="2902:17" pos:end="2902:20">arg3</name></expr>)</condition> <block pos:start="2902:23" pos:end="3541:14">{<block_content pos:start="2903:17" pos:end="3541:14">
                <expr_stmt pos:start="2903:17" pos:end="2903:58"><expr pos:start="2903:17" pos:end="2903:57"><name pos:start="2903:17" pos:end="2903:17">v</name> <operator pos:start="2903:19" pos:end="2903:19">=</operator> <call pos:start="2903:21" pos:end="2903:57"><name pos:start="2903:21" pos:end="2903:29">lock_user</name><argument_list pos:start="2903:30" pos:end="2903:57">(<argument pos:start="2903:31" pos:end="2903:41"><expr pos:start="2903:31" pos:end="2903:41"><name pos:start="2903:31" pos:end="2903:41">VERIFY_READ</name></expr></argument>, <argument pos:start="2903:44" pos:end="2903:47"><expr pos:start="2903:44" pos:end="2903:47"><name pos:start="2903:44" pos:end="2903:47">arg3</name></expr></argument>, <argument pos:start="2903:50" pos:end="2903:53"><expr pos:start="2903:50" pos:end="2903:53"><name pos:start="2903:50" pos:end="2903:53">arg4</name></expr></argument>, <argument pos:start="2903:56" pos:end="2903:56"><expr pos:start="2903:56" pos:end="2903:56"><literal type="number" pos:start="2903:56" pos:end="2903:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2904:17" pos:end="3541:14"><if pos:start="2904:17" pos:end="3541:14">if <condition pos:start="2904:20" pos:end="2904:23">(<expr pos:start="2904:21" pos:end="2904:22"><operator pos:start="2904:21" pos:end="2904:21">!</operator><name pos:start="2904:22" pos:end="2904:22">v</name></expr>)</condition> <block pos:start="2904:25" pos:end="3541:14">{<block_content pos:start="2905:21" pos:end="3541:14">
                    <expr_stmt pos:start="2905:21" pos:end="2905:41"><expr pos:start="2905:21" pos:end="2905:40"><name pos:start="2905:21" pos:end="2905:23">ret</name> <operator pos:start="2905:25" pos:end="2905:25">=</operator> <operator pos:start="2905:27" pos:end="2905:27">-</operator><name pos:start="2905:28" pos:end="2905:40">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2906:13" pos:end="2906:39"><expr pos:start="2906:13" pos:end="2906:38"><name pos:start="2906:13" pos:end="2906:13">n</name> <operator pos:start="2906:15" pos:end="2906:15">=</operator> <call pos:start="2906:17" pos:end="2906:38"><name pos:start="2906:17" pos:end="2906:32">lock_user_string</name><argument_list pos:start="2906:33" pos:end="2906:38">(<argument pos:start="2906:34" pos:end="2906:37"><expr pos:start="2906:34" pos:end="2906:37"><name pos:start="2906:34" pos:end="2906:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2907:13" pos:end="3541:14"><if pos:start="2907:13" pos:end="2909:13">if <condition pos:start="2907:16" pos:end="2907:18">(<expr pos:start="2907:17" pos:end="2907:17"><name pos:start="2907:17" pos:end="2907:17">n</name></expr>)</condition> <block pos:start="2907:20" pos:end="2909:13">{<block_content pos:start="2908:17" pos:end="2908:67">
                <expr_stmt pos:start="2908:17" pos:end="2908:67"><expr pos:start="2908:17" pos:end="2908:66"><name pos:start="2908:17" pos:end="2908:19">ret</name> <operator pos:start="2908:21" pos:end="2908:21">=</operator> <call pos:start="2908:23" pos:end="2908:66"><name pos:start="2908:23" pos:end="2908:31">get_errno</name><argument_list pos:start="2908:32" pos:end="2908:66">(<argument pos:start="2908:33" pos:end="2908:65"><expr pos:start="2908:33" pos:end="2908:65"><call pos:start="2908:33" pos:end="2908:65"><name pos:start="2908:33" pos:end="2908:41">fsetxattr</name><argument_list pos:start="2908:42" pos:end="2908:65">(<argument pos:start="2908:43" pos:end="2908:46"><expr pos:start="2908:43" pos:end="2908:46"><name pos:start="2908:43" pos:end="2908:46">arg1</name></expr></argument>, <argument pos:start="2908:49" pos:end="2908:49"><expr pos:start="2908:49" pos:end="2908:49"><name pos:start="2908:49" pos:end="2908:49">n</name></expr></argument>, <argument pos:start="2908:52" pos:end="2908:52"><expr pos:start="2908:52" pos:end="2908:52"><name pos:start="2908:52" pos:end="2908:52">v</name></expr></argument>, <argument pos:start="2908:55" pos:end="2908:58"><expr pos:start="2908:55" pos:end="2908:58"><name pos:start="2908:55" pos:end="2908:58">arg4</name></expr></argument>, <argument pos:start="2908:61" pos:end="2908:64"><expr pos:start="2908:61" pos:end="2908:64"><name pos:start="2908:61" pos:end="2908:64">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2909:15" pos:end="3541:14">else <block pos:start="2909:20" pos:end="3541:14">{<block_content pos:start="2910:17" pos:end="3541:14">
                <expr_stmt pos:start="2910:17" pos:end="2910:37"><expr pos:start="2910:17" pos:end="2910:36"><name pos:start="2910:17" pos:end="2910:19">ret</name> <operator pos:start="2910:21" pos:end="2910:21">=</operator> <operator pos:start="2910:23" pos:end="2910:23">-</operator><name pos:start="2910:24" pos:end="2910:36">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2911:13" pos:end="2911:36"><expr pos:start="2911:13" pos:end="2911:35"><call pos:start="2911:13" pos:end="2911:35"><name pos:start="2911:13" pos:end="2911:23">unlock_user</name><argument_list pos:start="2911:24" pos:end="2911:35">(<argument pos:start="2911:25" pos:end="2911:25"><expr pos:start="2911:25" pos:end="2911:25"><name pos:start="2911:25" pos:end="2911:25">n</name></expr></argument>, <argument pos:start="2911:28" pos:end="2911:31"><expr pos:start="2911:28" pos:end="2911:31"><name pos:start="2911:28" pos:end="2911:31">arg2</name></expr></argument>, <argument pos:start="2911:34" pos:end="2911:34"><expr pos:start="2911:34" pos:end="2911:34"><literal type="number" pos:start="2911:34" pos:end="2911:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2912:13" pos:end="2912:36"><expr pos:start="2912:13" pos:end="2912:35"><call pos:start="2912:13" pos:end="2912:35"><name pos:start="2912:13" pos:end="2912:23">unlock_user</name><argument_list pos:start="2912:24" pos:end="2912:35">(<argument pos:start="2912:25" pos:end="2912:25"><expr pos:start="2912:25" pos:end="2912:25"><name pos:start="2912:25" pos:end="2912:25">v</name></expr></argument>, <argument pos:start="2912:28" pos:end="2912:31"><expr pos:start="2912:28" pos:end="2912:31"><name pos:start="2912:28" pos:end="2912:31">arg3</name></expr></argument>, <argument pos:start="2912:34" pos:end="2912:34"><expr pos:start="2912:34" pos:end="2912:34"><literal type="number" pos:start="2912:34" pos:end="2912:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2913:5" pos:end="2913:28">case <expr pos:start="2913:10" pos:end="2913:27"><name pos:start="2913:10" pos:end="2913:27">TARGET_NR_getxattr</name></expr>:</case>
    <case pos:start="2914:5" pos:end="2914:29">case <expr pos:start="2914:10" pos:end="2914:28"><name pos:start="2914:10" pos:end="2914:28">TARGET_NR_lgetxattr</name></expr>:</case>
        <block pos:start="2915:9" pos:end="3541:14">{<block_content pos:start="2916:13" pos:end="3541:14">
            <decl_stmt pos:start="2916:13" pos:end="2916:32"><decl pos:start="2916:13" pos:end="2916:19"><type pos:start="2916:13" pos:end="2916:18"><name pos:start="2916:13" pos:end="2916:16">void</name> <modifier pos:start="2916:18" pos:end="2916:18">*</modifier></type><name pos:start="2916:19" pos:end="2916:19">p</name></decl>, <decl pos:start="2916:22" pos:end="2916:23"><type ref="prev" pos:start="2916:13" pos:end="2916:18"><modifier pos:start="2916:22" pos:end="2916:22">*</modifier></type><name pos:start="2916:23" pos:end="2916:23">n</name></decl>, <decl pos:start="2916:26" pos:end="2916:31"><type ref="prev" pos:start="2916:13" pos:end="2916:18"><modifier pos:start="2916:26" pos:end="2916:26">*</modifier></type><name pos:start="2916:27" pos:end="2916:27">v</name> <init pos:start="2916:29" pos:end="2916:31">= <expr pos:start="2916:31" pos:end="2916:31"><literal type="number" pos:start="2916:31" pos:end="2916:31">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2917:13" pos:end="3541:14"><if pos:start="2917:13" pos:end="3541:14">if <condition pos:start="2917:16" pos:end="2917:21">(<expr pos:start="2917:17" pos:end="2917:20"><name pos:start="2917:17" pos:end="2917:20">arg3</name></expr>)</condition> <block pos:start="2917:23" pos:end="3541:14">{<block_content pos:start="2918:17" pos:end="3541:14">
                <expr_stmt pos:start="2918:17" pos:end="2918:59"><expr pos:start="2918:17" pos:end="2918:58"><name pos:start="2918:17" pos:end="2918:17">v</name> <operator pos:start="2918:19" pos:end="2918:19">=</operator> <call pos:start="2918:21" pos:end="2918:58"><name pos:start="2918:21" pos:end="2918:29">lock_user</name><argument_list pos:start="2918:30" pos:end="2918:58">(<argument pos:start="2918:31" pos:end="2918:42"><expr pos:start="2918:31" pos:end="2918:42"><name pos:start="2918:31" pos:end="2918:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2918:45" pos:end="2918:48"><expr pos:start="2918:45" pos:end="2918:48"><name pos:start="2918:45" pos:end="2918:48">arg3</name></expr></argument>, <argument pos:start="2918:51" pos:end="2918:54"><expr pos:start="2918:51" pos:end="2918:54"><name pos:start="2918:51" pos:end="2918:54">arg4</name></expr></argument>, <argument pos:start="2918:57" pos:end="2918:57"><expr pos:start="2918:57" pos:end="2918:57"><literal type="number" pos:start="2918:57" pos:end="2918:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2919:17" pos:end="3541:14"><if pos:start="2919:17" pos:end="3541:14">if <condition pos:start="2919:20" pos:end="2919:23">(<expr pos:start="2919:21" pos:end="2919:22"><operator pos:start="2919:21" pos:end="2919:21">!</operator><name pos:start="2919:22" pos:end="2919:22">v</name></expr>)</condition> <block pos:start="2919:25" pos:end="3541:14">{<block_content pos:start="2920:21" pos:end="3541:14">
                    <expr_stmt pos:start="2920:21" pos:end="2920:41"><expr pos:start="2920:21" pos:end="2920:40"><name pos:start="2920:21" pos:end="2920:23">ret</name> <operator pos:start="2920:25" pos:end="2920:25">=</operator> <operator pos:start="2920:27" pos:end="2920:27">-</operator><name pos:start="2920:28" pos:end="2920:40">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2921:13" pos:end="2921:39"><expr pos:start="2921:13" pos:end="2921:38"><name pos:start="2921:13" pos:end="2921:13">p</name> <operator pos:start="2921:15" pos:end="2921:15">=</operator> <call pos:start="2921:17" pos:end="2921:38"><name pos:start="2921:17" pos:end="2921:32">lock_user_string</name><argument_list pos:start="2921:33" pos:end="2921:38">(<argument pos:start="2921:34" pos:end="2921:37"><expr pos:start="2921:34" pos:end="2921:37"><name pos:start="2921:34" pos:end="2921:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2922:13" pos:end="2922:39"><expr pos:start="2922:13" pos:end="2922:38"><name pos:start="2922:13" pos:end="2922:13">n</name> <operator pos:start="2922:15" pos:end="2922:15">=</operator> <call pos:start="2922:17" pos:end="2922:38"><name pos:start="2922:17" pos:end="2922:32">lock_user_string</name><argument_list pos:start="2922:33" pos:end="2922:38">(<argument pos:start="2922:34" pos:end="2922:37"><expr pos:start="2922:34" pos:end="2922:37"><name pos:start="2922:34" pos:end="2922:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2923:13" pos:end="3541:14"><if pos:start="2923:13" pos:end="3541:14">if <condition pos:start="2923:16" pos:end="2923:23">(<expr pos:start="2923:17" pos:end="2923:22"><name pos:start="2923:17" pos:end="2923:17">p</name> <operator pos:start="2923:19" pos:end="2923:20">&amp;&amp;</operator> <name pos:start="2923:22" pos:end="2923:22">n</name></expr>)</condition> <block pos:start="2923:25" pos:end="3541:14">{<block_content pos:start="2924:17" pos:end="3541:14">
                <if_stmt pos:start="2924:17" pos:end="2928:13"><if pos:start="2924:17" pos:end="2926:17">if <condition pos:start="2924:20" pos:end="2924:46">(<expr pos:start="2924:21" pos:end="2924:45"><name pos:start="2924:21" pos:end="2924:23">num</name> <operator pos:start="2924:25" pos:end="2924:26">==</operator> <name pos:start="2924:28" pos:end="2924:45">TARGET_NR_getxattr</name></expr>)</condition> <block pos:start="2924:48" pos:end="2926:17">{<block_content pos:start="2925:21" pos:end="2925:61">
                    <expr_stmt pos:start="2925:21" pos:end="2925:61"><expr pos:start="2925:21" pos:end="2925:60"><name pos:start="2925:21" pos:end="2925:23">ret</name> <operator pos:start="2925:25" pos:end="2925:25">=</operator> <call pos:start="2925:27" pos:end="2925:60"><name pos:start="2925:27" pos:end="2925:35">get_errno</name><argument_list pos:start="2925:36" pos:end="2925:60">(<argument pos:start="2925:37" pos:end="2925:59"><expr pos:start="2925:37" pos:end="2925:59"><call pos:start="2925:37" pos:end="2925:59"><name pos:start="2925:37" pos:end="2925:44">getxattr</name><argument_list pos:start="2925:45" pos:end="2925:59">(<argument pos:start="2925:46" pos:end="2925:46"><expr pos:start="2925:46" pos:end="2925:46"><name pos:start="2925:46" pos:end="2925:46">p</name></expr></argument>, <argument pos:start="2925:49" pos:end="2925:49"><expr pos:start="2925:49" pos:end="2925:49"><name pos:start="2925:49" pos:end="2925:49">n</name></expr></argument>, <argument pos:start="2925:52" pos:end="2925:52"><expr pos:start="2925:52" pos:end="2925:52"><name pos:start="2925:52" pos:end="2925:52">v</name></expr></argument>, <argument pos:start="2925:55" pos:end="2925:58"><expr pos:start="2925:55" pos:end="2925:58"><name pos:start="2925:55" pos:end="2925:58">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="2926:19" pos:end="2928:13">else <block pos:start="2926:24" pos:end="2928:13">{<block_content pos:start="2927:21" pos:end="2927:62">
                    <expr_stmt pos:start="2927:21" pos:end="2927:62"><expr pos:start="2927:21" pos:end="2927:61"><name pos:start="2927:21" pos:end="2927:23">ret</name> <operator pos:start="2927:25" pos:end="2927:25">=</operator> <call pos:start="2927:27" pos:end="2927:61"><name pos:start="2927:27" pos:end="2927:35">get_errno</name><argument_list pos:start="2927:36" pos:end="2927:61">(<argument pos:start="2927:37" pos:end="2927:60"><expr pos:start="2927:37" pos:end="2927:60"><call pos:start="2927:37" pos:end="2927:60"><name pos:start="2927:37" pos:end="2927:45">lgetxattr</name><argument_list pos:start="2927:46" pos:end="2927:60">(<argument pos:start="2927:47" pos:end="2927:47"><expr pos:start="2927:47" pos:end="2927:47"><name pos:start="2927:47" pos:end="2927:47">p</name></expr></argument>, <argument pos:start="2927:50" pos:end="2927:50"><expr pos:start="2927:50" pos:end="2927:50"><name pos:start="2927:50" pos:end="2927:50">n</name></expr></argument>, <argument pos:start="2927:53" pos:end="2927:53"><expr pos:start="2927:53" pos:end="2927:53"><name pos:start="2927:53" pos:end="2927:53">v</name></expr></argument>, <argument pos:start="2927:56" pos:end="2927:59"><expr pos:start="2927:56" pos:end="2927:59"><name pos:start="2927:56" pos:end="2927:59">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="2928:15" pos:end="3541:14"><else pos:start="2928:15" pos:end="3541:14">else <block pos:start="2928:20" pos:end="3541:14">{<block_content pos:start="2929:17" pos:end="3541:14">
                <expr_stmt pos:start="2929:17" pos:end="2929:37"><expr pos:start="2929:17" pos:end="2929:36"><name pos:start="2929:17" pos:end="2929:19">ret</name> <operator pos:start="2929:21" pos:end="2929:21">=</operator> <operator pos:start="2929:23" pos:end="2929:23">-</operator><name pos:start="2929:24" pos:end="2929:36">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2930:13" pos:end="2930:36"><expr pos:start="2930:13" pos:end="2930:35"><call pos:start="2930:13" pos:end="2930:35"><name pos:start="2930:13" pos:end="2930:23">unlock_user</name><argument_list pos:start="2930:24" pos:end="2930:35">(<argument pos:start="2930:25" pos:end="2930:25"><expr pos:start="2930:25" pos:end="2930:25"><name pos:start="2930:25" pos:end="2930:25">p</name></expr></argument>, <argument pos:start="2930:28" pos:end="2930:31"><expr pos:start="2930:28" pos:end="2930:31"><name pos:start="2930:28" pos:end="2930:31">arg1</name></expr></argument>, <argument pos:start="2930:34" pos:end="2930:34"><expr pos:start="2930:34" pos:end="2930:34"><literal type="number" pos:start="2930:34" pos:end="2930:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2931:13" pos:end="2931:36"><expr pos:start="2931:13" pos:end="2931:35"><call pos:start="2931:13" pos:end="2931:35"><name pos:start="2931:13" pos:end="2931:23">unlock_user</name><argument_list pos:start="2931:24" pos:end="2931:35">(<argument pos:start="2931:25" pos:end="2931:25"><expr pos:start="2931:25" pos:end="2931:25"><name pos:start="2931:25" pos:end="2931:25">n</name></expr></argument>, <argument pos:start="2931:28" pos:end="2931:31"><expr pos:start="2931:28" pos:end="2931:31"><name pos:start="2931:28" pos:end="2931:31">arg2</name></expr></argument>, <argument pos:start="2931:34" pos:end="2931:34"><expr pos:start="2931:34" pos:end="2931:34"><literal type="number" pos:start="2931:34" pos:end="2931:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2932:13" pos:end="2932:39"><expr pos:start="2932:13" pos:end="2932:38"><call pos:start="2932:13" pos:end="2932:38"><name pos:start="2932:13" pos:end="2932:23">unlock_user</name><argument_list pos:start="2932:24" pos:end="2932:38">(<argument pos:start="2932:25" pos:end="2932:25"><expr pos:start="2932:25" pos:end="2932:25"><name pos:start="2932:25" pos:end="2932:25">v</name></expr></argument>, <argument pos:start="2932:28" pos:end="2932:31"><expr pos:start="2932:28" pos:end="2932:31"><name pos:start="2932:28" pos:end="2932:31">arg3</name></expr></argument>, <argument pos:start="2932:34" pos:end="2932:37"><expr pos:start="2932:34" pos:end="2932:37"><name pos:start="2932:34" pos:end="2932:37">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2933:5" pos:end="2933:29">case <expr pos:start="2933:10" pos:end="2933:28"><name pos:start="2933:10" pos:end="2933:28">TARGET_NR_fgetxattr</name></expr>:</case>
        <block pos:start="2934:9" pos:end="3541:14">{<block_content pos:start="2935:13" pos:end="3541:14">
            <decl_stmt pos:start="2935:13" pos:end="2935:28"><decl pos:start="2935:13" pos:end="2935:19"><type pos:start="2935:13" pos:end="2935:18"><name pos:start="2935:13" pos:end="2935:16">void</name> <modifier pos:start="2935:18" pos:end="2935:18">*</modifier></type><name pos:start="2935:19" pos:end="2935:19">n</name></decl>, <decl pos:start="2935:22" pos:end="2935:27"><type ref="prev" pos:start="2935:13" pos:end="2935:18"><modifier pos:start="2935:22" pos:end="2935:22">*</modifier></type><name pos:start="2935:23" pos:end="2935:23">v</name> <init pos:start="2935:25" pos:end="2935:27">= <expr pos:start="2935:27" pos:end="2935:27"><literal type="number" pos:start="2935:27" pos:end="2935:27">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2936:13" pos:end="3541:14"><if pos:start="2936:13" pos:end="3541:14">if <condition pos:start="2936:16" pos:end="2936:21">(<expr pos:start="2936:17" pos:end="2936:20"><name pos:start="2936:17" pos:end="2936:20">arg3</name></expr>)</condition> <block pos:start="2936:23" pos:end="3541:14">{<block_content pos:start="2937:17" pos:end="3541:14">
                <expr_stmt pos:start="2937:17" pos:end="2937:59"><expr pos:start="2937:17" pos:end="2937:58"><name pos:start="2937:17" pos:end="2937:17">v</name> <operator pos:start="2937:19" pos:end="2937:19">=</operator> <call pos:start="2937:21" pos:end="2937:58"><name pos:start="2937:21" pos:end="2937:29">lock_user</name><argument_list pos:start="2937:30" pos:end="2937:58">(<argument pos:start="2937:31" pos:end="2937:42"><expr pos:start="2937:31" pos:end="2937:42"><name pos:start="2937:31" pos:end="2937:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2937:45" pos:end="2937:48"><expr pos:start="2937:45" pos:end="2937:48"><name pos:start="2937:45" pos:end="2937:48">arg3</name></expr></argument>, <argument pos:start="2937:51" pos:end="2937:54"><expr pos:start="2937:51" pos:end="2937:54"><name pos:start="2937:51" pos:end="2937:54">arg4</name></expr></argument>, <argument pos:start="2937:57" pos:end="2937:57"><expr pos:start="2937:57" pos:end="2937:57"><literal type="number" pos:start="2937:57" pos:end="2937:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2938:17" pos:end="3541:14"><if pos:start="2938:17" pos:end="3541:14">if <condition pos:start="2938:20" pos:end="2938:23">(<expr pos:start="2938:21" pos:end="2938:22"><operator pos:start="2938:21" pos:end="2938:21">!</operator><name pos:start="2938:22" pos:end="2938:22">v</name></expr>)</condition> <block pos:start="2938:25" pos:end="3541:14">{<block_content pos:start="2939:21" pos:end="3541:14">
                    <expr_stmt pos:start="2939:21" pos:end="2939:41"><expr pos:start="2939:21" pos:end="2939:40"><name pos:start="2939:21" pos:end="2939:23">ret</name> <operator pos:start="2939:25" pos:end="2939:25">=</operator> <operator pos:start="2939:27" pos:end="2939:27">-</operator><name pos:start="2939:28" pos:end="2939:40">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2940:13" pos:end="2940:39"><expr pos:start="2940:13" pos:end="2940:38"><name pos:start="2940:13" pos:end="2940:13">n</name> <operator pos:start="2940:15" pos:end="2940:15">=</operator> <call pos:start="2940:17" pos:end="2940:38"><name pos:start="2940:17" pos:end="2940:32">lock_user_string</name><argument_list pos:start="2940:33" pos:end="2940:38">(<argument pos:start="2940:34" pos:end="2940:37"><expr pos:start="2940:34" pos:end="2940:37"><name pos:start="2940:34" pos:end="2940:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2941:13" pos:end="3541:14"><if pos:start="2941:13" pos:end="2943:13">if <condition pos:start="2941:16" pos:end="2941:18">(<expr pos:start="2941:17" pos:end="2941:17"><name pos:start="2941:17" pos:end="2941:17">n</name></expr>)</condition> <block pos:start="2941:20" pos:end="2943:13">{<block_content pos:start="2942:17" pos:end="2942:61">
                <expr_stmt pos:start="2942:17" pos:end="2942:61"><expr pos:start="2942:17" pos:end="2942:60"><name pos:start="2942:17" pos:end="2942:19">ret</name> <operator pos:start="2942:21" pos:end="2942:21">=</operator> <call pos:start="2942:23" pos:end="2942:60"><name pos:start="2942:23" pos:end="2942:31">get_errno</name><argument_list pos:start="2942:32" pos:end="2942:60">(<argument pos:start="2942:33" pos:end="2942:59"><expr pos:start="2942:33" pos:end="2942:59"><call pos:start="2942:33" pos:end="2942:59"><name pos:start="2942:33" pos:end="2942:41">fgetxattr</name><argument_list pos:start="2942:42" pos:end="2942:59">(<argument pos:start="2942:43" pos:end="2942:46"><expr pos:start="2942:43" pos:end="2942:46"><name pos:start="2942:43" pos:end="2942:46">arg1</name></expr></argument>, <argument pos:start="2942:49" pos:end="2942:49"><expr pos:start="2942:49" pos:end="2942:49"><name pos:start="2942:49" pos:end="2942:49">n</name></expr></argument>, <argument pos:start="2942:52" pos:end="2942:52"><expr pos:start="2942:52" pos:end="2942:52"><name pos:start="2942:52" pos:end="2942:52">v</name></expr></argument>, <argument pos:start="2942:55" pos:end="2942:58"><expr pos:start="2942:55" pos:end="2942:58"><name pos:start="2942:55" pos:end="2942:58">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2943:15" pos:end="3541:14">else <block pos:start="2943:20" pos:end="3541:14">{<block_content pos:start="2944:17" pos:end="3541:14">
                <expr_stmt pos:start="2944:17" pos:end="2944:37"><expr pos:start="2944:17" pos:end="2944:36"><name pos:start="2944:17" pos:end="2944:19">ret</name> <operator pos:start="2944:21" pos:end="2944:21">=</operator> <operator pos:start="2944:23" pos:end="2944:23">-</operator><name pos:start="2944:24" pos:end="2944:36">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2945:13" pos:end="2945:36"><expr pos:start="2945:13" pos:end="2945:35"><call pos:start="2945:13" pos:end="2945:35"><name pos:start="2945:13" pos:end="2945:23">unlock_user</name><argument_list pos:start="2945:24" pos:end="2945:35">(<argument pos:start="2945:25" pos:end="2945:25"><expr pos:start="2945:25" pos:end="2945:25"><name pos:start="2945:25" pos:end="2945:25">n</name></expr></argument>, <argument pos:start="2945:28" pos:end="2945:31"><expr pos:start="2945:28" pos:end="2945:31"><name pos:start="2945:28" pos:end="2945:31">arg2</name></expr></argument>, <argument pos:start="2945:34" pos:end="2945:34"><expr pos:start="2945:34" pos:end="2945:34"><literal type="number" pos:start="2945:34" pos:end="2945:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2946:13" pos:end="2946:39"><expr pos:start="2946:13" pos:end="2946:38"><call pos:start="2946:13" pos:end="2946:38"><name pos:start="2946:13" pos:end="2946:23">unlock_user</name><argument_list pos:start="2946:24" pos:end="2946:38">(<argument pos:start="2946:25" pos:end="2946:25"><expr pos:start="2946:25" pos:end="2946:25"><name pos:start="2946:25" pos:end="2946:25">v</name></expr></argument>, <argument pos:start="2946:28" pos:end="2946:31"><expr pos:start="2946:28" pos:end="2946:31"><name pos:start="2946:28" pos:end="2946:31">arg3</name></expr></argument>, <argument pos:start="2946:34" pos:end="2946:37"><expr pos:start="2946:34" pos:end="2946:37"><name pos:start="2946:34" pos:end="2946:37">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2947:5" pos:end="2947:31">case <expr pos:start="2947:10" pos:end="2947:30"><name pos:start="2947:10" pos:end="2947:30">TARGET_NR_removexattr</name></expr>:</case>
    <case pos:start="2948:5" pos:end="2948:32">case <expr pos:start="2948:10" pos:end="2948:31"><name pos:start="2948:10" pos:end="2948:31">TARGET_NR_lremovexattr</name></expr>:</case>
        <block pos:start="2949:9" pos:end="3541:14">{<block_content pos:start="2950:13" pos:end="3541:14">
            <decl_stmt pos:start="2950:13" pos:end="2950:24"><decl pos:start="2950:13" pos:end="2950:19"><type pos:start="2950:13" pos:end="2950:18"><name pos:start="2950:13" pos:end="2950:16">void</name> <modifier pos:start="2950:18" pos:end="2950:18">*</modifier></type><name pos:start="2950:19" pos:end="2950:19">p</name></decl>, <decl pos:start="2950:22" pos:end="2950:23"><type ref="prev" pos:start="2950:13" pos:end="2950:18"><modifier pos:start="2950:22" pos:end="2950:22">*</modifier></type><name pos:start="2950:23" pos:end="2950:23">n</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2951:13" pos:end="2951:39"><expr pos:start="2951:13" pos:end="2951:38"><name pos:start="2951:13" pos:end="2951:13">p</name> <operator pos:start="2951:15" pos:end="2951:15">=</operator> <call pos:start="2951:17" pos:end="2951:38"><name pos:start="2951:17" pos:end="2951:32">lock_user_string</name><argument_list pos:start="2951:33" pos:end="2951:38">(<argument pos:start="2951:34" pos:end="2951:37"><expr pos:start="2951:34" pos:end="2951:37"><name pos:start="2951:34" pos:end="2951:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2952:13" pos:end="2952:39"><expr pos:start="2952:13" pos:end="2952:38"><name pos:start="2952:13" pos:end="2952:13">n</name> <operator pos:start="2952:15" pos:end="2952:15">=</operator> <call pos:start="2952:17" pos:end="2952:38"><name pos:start="2952:17" pos:end="2952:32">lock_user_string</name><argument_list pos:start="2952:33" pos:end="2952:38">(<argument pos:start="2952:34" pos:end="2952:37"><expr pos:start="2952:34" pos:end="2952:37"><name pos:start="2952:34" pos:end="2952:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2953:13" pos:end="3541:14"><if pos:start="2953:13" pos:end="3541:14">if <condition pos:start="2953:16" pos:end="2953:23">(<expr pos:start="2953:17" pos:end="2953:22"><name pos:start="2953:17" pos:end="2953:17">p</name> <operator pos:start="2953:19" pos:end="2953:20">&amp;&amp;</operator> <name pos:start="2953:22" pos:end="2953:22">n</name></expr>)</condition> <block pos:start="2953:25" pos:end="3541:14">{<block_content pos:start="2954:17" pos:end="3541:14">
                <if_stmt pos:start="2954:17" pos:end="2958:13"><if pos:start="2954:17" pos:end="2956:17">if <condition pos:start="2954:20" pos:end="2954:49">(<expr pos:start="2954:21" pos:end="2954:48"><name pos:start="2954:21" pos:end="2954:23">num</name> <operator pos:start="2954:25" pos:end="2954:26">==</operator> <name pos:start="2954:28" pos:end="2954:48">TARGET_NR_removexattr</name></expr>)</condition> <block pos:start="2954:51" pos:end="2956:17">{<block_content pos:start="2955:21" pos:end="2955:55">
                    <expr_stmt pos:start="2955:21" pos:end="2955:55"><expr pos:start="2955:21" pos:end="2955:54"><name pos:start="2955:21" pos:end="2955:23">ret</name> <operator pos:start="2955:25" pos:end="2955:25">=</operator> <call pos:start="2955:27" pos:end="2955:54"><name pos:start="2955:27" pos:end="2955:35">get_errno</name><argument_list pos:start="2955:36" pos:end="2955:54">(<argument pos:start="2955:37" pos:end="2955:53"><expr pos:start="2955:37" pos:end="2955:53"><call pos:start="2955:37" pos:end="2955:53"><name pos:start="2955:37" pos:end="2955:47">removexattr</name><argument_list pos:start="2955:48" pos:end="2955:53">(<argument pos:start="2955:49" pos:end="2955:49"><expr pos:start="2955:49" pos:end="2955:49"><name pos:start="2955:49" pos:end="2955:49">p</name></expr></argument>, <argument pos:start="2955:52" pos:end="2955:52"><expr pos:start="2955:52" pos:end="2955:52"><name pos:start="2955:52" pos:end="2955:52">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="2956:19" pos:end="2958:13">else <block pos:start="2956:24" pos:end="2958:13">{<block_content pos:start="2957:21" pos:end="2957:56">
                    <expr_stmt pos:start="2957:21" pos:end="2957:56"><expr pos:start="2957:21" pos:end="2957:55"><name pos:start="2957:21" pos:end="2957:23">ret</name> <operator pos:start="2957:25" pos:end="2957:25">=</operator> <call pos:start="2957:27" pos:end="2957:55"><name pos:start="2957:27" pos:end="2957:35">get_errno</name><argument_list pos:start="2957:36" pos:end="2957:55">(<argument pos:start="2957:37" pos:end="2957:54"><expr pos:start="2957:37" pos:end="2957:54"><call pos:start="2957:37" pos:end="2957:54"><name pos:start="2957:37" pos:end="2957:48">lremovexattr</name><argument_list pos:start="2957:49" pos:end="2957:54">(<argument pos:start="2957:50" pos:end="2957:50"><expr pos:start="2957:50" pos:end="2957:50"><name pos:start="2957:50" pos:end="2957:50">p</name></expr></argument>, <argument pos:start="2957:53" pos:end="2957:53"><expr pos:start="2957:53" pos:end="2957:53"><name pos:start="2957:53" pos:end="2957:53">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="2958:15" pos:end="3541:14"><else pos:start="2958:15" pos:end="3541:14">else <block pos:start="2958:20" pos:end="3541:14">{<block_content pos:start="2959:17" pos:end="3541:14">
                <expr_stmt pos:start="2959:17" pos:end="2959:37"><expr pos:start="2959:17" pos:end="2959:36"><name pos:start="2959:17" pos:end="2959:19">ret</name> <operator pos:start="2959:21" pos:end="2959:21">=</operator> <operator pos:start="2959:23" pos:end="2959:23">-</operator><name pos:start="2959:24" pos:end="2959:36">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2960:13" pos:end="2960:36"><expr pos:start="2960:13" pos:end="2960:35"><call pos:start="2960:13" pos:end="2960:35"><name pos:start="2960:13" pos:end="2960:23">unlock_user</name><argument_list pos:start="2960:24" pos:end="2960:35">(<argument pos:start="2960:25" pos:end="2960:25"><expr pos:start="2960:25" pos:end="2960:25"><name pos:start="2960:25" pos:end="2960:25">p</name></expr></argument>, <argument pos:start="2960:28" pos:end="2960:31"><expr pos:start="2960:28" pos:end="2960:31"><name pos:start="2960:28" pos:end="2960:31">arg1</name></expr></argument>, <argument pos:start="2960:34" pos:end="2960:34"><expr pos:start="2960:34" pos:end="2960:34"><literal type="number" pos:start="2960:34" pos:end="2960:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2961:13" pos:end="2961:36"><expr pos:start="2961:13" pos:end="2961:35"><call pos:start="2961:13" pos:end="2961:35"><name pos:start="2961:13" pos:end="2961:23">unlock_user</name><argument_list pos:start="2961:24" pos:end="2961:35">(<argument pos:start="2961:25" pos:end="2961:25"><expr pos:start="2961:25" pos:end="2961:25"><name pos:start="2961:25" pos:end="2961:25">n</name></expr></argument>, <argument pos:start="2961:28" pos:end="2961:31"><expr pos:start="2961:28" pos:end="2961:31"><name pos:start="2961:28" pos:end="2961:31">arg2</name></expr></argument>, <argument pos:start="2961:34" pos:end="2961:34"><expr pos:start="2961:34" pos:end="2961:34"><literal type="number" pos:start="2961:34" pos:end="2961:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="2962:5" pos:end="2962:32">case <expr pos:start="2962:10" pos:end="2962:31"><name pos:start="2962:10" pos:end="2962:31">TARGET_NR_fremovexattr</name></expr>:</case>
        <block pos:start="2963:9" pos:end="3541:14">{<block_content pos:start="2964:13" pos:end="3541:14">
            <decl_stmt pos:start="2964:13" pos:end="2964:20"><decl pos:start="2964:13" pos:end="2964:19"><type pos:start="2964:13" pos:end="2964:18"><name pos:start="2964:13" pos:end="2964:16">void</name> <modifier pos:start="2964:18" pos:end="2964:18">*</modifier></type><name pos:start="2964:19" pos:end="2964:19">n</name></decl>;</decl_stmt>
            <expr_stmt pos:start="2965:13" pos:end="2965:39"><expr pos:start="2965:13" pos:end="2965:38"><name pos:start="2965:13" pos:end="2965:13">n</name> <operator pos:start="2965:15" pos:end="2965:15">=</operator> <call pos:start="2965:17" pos:end="2965:38"><name pos:start="2965:17" pos:end="2965:32">lock_user_string</name><argument_list pos:start="2965:33" pos:end="2965:38">(<argument pos:start="2965:34" pos:end="2965:37"><expr pos:start="2965:34" pos:end="2965:37"><name pos:start="2965:34" pos:end="2965:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2966:13" pos:end="3541:14"><if pos:start="2966:13" pos:end="2968:13">if <condition pos:start="2966:16" pos:end="2966:18">(<expr pos:start="2966:17" pos:end="2966:17"><name pos:start="2966:17" pos:end="2966:17">n</name></expr>)</condition> <block pos:start="2966:20" pos:end="2968:13">{<block_content pos:start="2967:17" pos:end="2967:55">
                <expr_stmt pos:start="2967:17" pos:end="2967:55"><expr pos:start="2967:17" pos:end="2967:54"><name pos:start="2967:17" pos:end="2967:19">ret</name> <operator pos:start="2967:21" pos:end="2967:21">=</operator> <call pos:start="2967:23" pos:end="2967:54"><name pos:start="2967:23" pos:end="2967:31">get_errno</name><argument_list pos:start="2967:32" pos:end="2967:54">(<argument pos:start="2967:33" pos:end="2967:53"><expr pos:start="2967:33" pos:end="2967:53"><call pos:start="2967:33" pos:end="2967:53"><name pos:start="2967:33" pos:end="2967:44">fremovexattr</name><argument_list pos:start="2967:45" pos:end="2967:53">(<argument pos:start="2967:46" pos:end="2967:49"><expr pos:start="2967:46" pos:end="2967:49"><name pos:start="2967:46" pos:end="2967:49">arg1</name></expr></argument>, <argument pos:start="2967:52" pos:end="2967:52"><expr pos:start="2967:52" pos:end="2967:52"><name pos:start="2967:52" pos:end="2967:52">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="2968:15" pos:end="3541:14">else <block pos:start="2968:20" pos:end="3541:14">{<block_content pos:start="2969:17" pos:end="3541:14">
                <expr_stmt pos:start="2969:17" pos:end="2969:37"><expr pos:start="2969:17" pos:end="2969:36"><name pos:start="2969:17" pos:end="2969:19">ret</name> <operator pos:start="2969:21" pos:end="2969:21">=</operator> <operator pos:start="2969:23" pos:end="2969:23">-</operator><name pos:start="2969:24" pos:end="2969:36">TARGET_EFAULT</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2970:13" pos:end="2974:0"><expr pos:start="2970:13" pos:end="2970:35"><call pos:start="2970:13" pos:end="2970:35"><name pos:start="2970:13" pos:end="2970:23">unlock_user</name><argument_list pos:start="2970:24" pos:end="2970:35">(<argument pos:start="2970:25" pos:end="2970:25"><expr pos:start="2970:25" pos:end="2970:25"><name pos:start="2970:25" pos:end="2970:25">n</name></expr></argument>, <argument pos:start="2970:28" pos:end="2970:31"><expr pos:start="2970:28" pos:end="2970:31"><name pos:start="2970:28" pos:end="2970:31">arg2</name></expr></argument>, <argument pos:start="2970:34" pos:end="2970:34"><expr pos:start="2970:34" pos:end="2970:34"><literal type="number" pos:start="2970:34" pos:end="2970:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="2971:1" pos:end="2971:6">#<cpp:directive pos:start="2971:2" pos:end="2971:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="2972:1" pos:end="2972:6">#<cpp:directive pos:start="2972:2" pos:end="2972:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="2972:8" pos:end="2972:24">/* CONFIG_ATTR */</comment>
<cpp:ifdef pos:start="2973:1" pos:end="2973:32">#<cpp:directive pos:start="2973:2" pos:end="2973:6">ifdef</cpp:directive> <name pos:start="2973:8" pos:end="2973:32">TARGET_NR_set_thread_area</name></cpp:ifdef>
    <case pos:start="2974:5" pos:end="2976:0">case <expr pos:start="2974:10" pos:end="2974:34"><name pos:start="2974:10" pos:end="2974:34">TARGET_NR_set_thread_area</name></expr>:</case>
<cpp:if pos:start="2975:1" pos:end="2975:24">#<cpp:directive pos:start="2975:2" pos:end="2975:3">if</cpp:directive> <expr pos:start="2975:5" pos:end="2975:24"><call pos:start="2975:5" pos:end="2975:24"><name pos:start="2975:5" pos:end="2975:11">defined</name><argument_list pos:start="2975:12" pos:end="2975:24">(<argument pos:start="2975:13" pos:end="2975:23"><expr pos:start="2975:13" pos:end="2975:23"><name pos:start="2975:13" pos:end="2975:23">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr_stmt pos:start="2976:7" pos:end="2976:65"><expr pos:start="2976:7" pos:end="2976:64"><operator pos:start="2976:7" pos:end="2976:7">(</operator><operator pos:start="2976:8" pos:end="2976:8">(</operator><name pos:start="2976:9" pos:end="2976:20">CPUMIPSState</name> <operator pos:start="2976:22" pos:end="2976:22">*</operator><operator pos:start="2976:23" pos:end="2976:23">)</operator> <name pos:start="2976:25" pos:end="2976:31">cpu_env</name><operator pos:start="2976:32" pos:end="2976:32">)</operator><operator pos:start="2976:33" pos:end="2976:34">-&gt;</operator><name pos:start="2976:35" pos:end="2976:57"><name pos:start="2976:35" pos:end="2976:43">active_tc</name><operator pos:start="2976:44" pos:end="2976:44">.</operator><name pos:start="2976:45" pos:end="2976:57">CP0_UserLocal</name></name> <operator pos:start="2976:59" pos:end="2976:59">=</operator> <name pos:start="2976:61" pos:end="2976:64">arg1</name></expr>;</expr_stmt>
      <expr_stmt pos:start="2977:7" pos:end="2979:0"><expr pos:start="2977:7" pos:end="2977:13"><name pos:start="2977:7" pos:end="2977:9">ret</name> <operator pos:start="2977:11" pos:end="2977:11">=</operator> <literal type="number" pos:start="2977:13" pos:end="2977:13">0</literal></expr>;</expr_stmt>
<cpp:elif pos:start="2978:1" pos:end="2978:26">#<cpp:directive pos:start="2978:2" pos:end="2978:5">elif</cpp:directive> <expr pos:start="2978:7" pos:end="2978:26"><call pos:start="2978:7" pos:end="2978:26"><name pos:start="2978:7" pos:end="2978:13">defined</name><argument_list pos:start="2978:14" pos:end="2978:26">(<argument pos:start="2978:15" pos:end="2978:25"><expr pos:start="2978:15" pos:end="2978:25"><name pos:start="2978:15" pos:end="2978:25">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <if_stmt pos:start="2979:7" pos:end="3541:14"><if pos:start="2979:7" pos:end="3541:14">if <condition pos:start="2979:10" pos:end="2979:22">(<expr pos:start="2979:11" pos:end="2979:21"><name pos:start="2979:11" pos:end="2979:14">arg1</name> <operator pos:start="2979:16" pos:end="2979:16">&amp;</operator> <literal type="number" pos:start="2979:18" pos:end="2979:21">0xff</literal></expr>)</condition><block type="pseudo" pos:start="2980:7" pos:end="3541:14"><block_content pos:start="2980:7" pos:end="3541:14">
      <if_stmt pos:start="2980:7" pos:end="3541:14"><else pos:start="2980:7" pos:end="3541:14">else <block pos:start="2980:12" pos:end="3541:14">{<block_content pos:start="2981:11" pos:end="3541:14">
          <expr_stmt pos:start="2981:11" pos:end="2981:59"><expr pos:start="2981:11" pos:end="2981:58"><operator pos:start="2981:11" pos:end="2981:11">(</operator><operator pos:start="2981:12" pos:end="2981:12">(</operator><name pos:start="2981:13" pos:end="2981:24">CPUCRISState</name> <operator pos:start="2981:26" pos:end="2981:26">*</operator><operator pos:start="2981:27" pos:end="2981:27">)</operator> <name pos:start="2981:29" pos:end="2981:35">cpu_env</name><operator pos:start="2981:36" pos:end="2981:36">)</operator><operator pos:start="2981:37" pos:end="2981:38">-&gt;</operator><name pos:start="2981:39" pos:end="2981:51"><name pos:start="2981:39" pos:end="2981:43">pregs</name><index pos:start="2981:44" pos:end="2981:51">[<expr pos:start="2981:45" pos:end="2981:50"><name pos:start="2981:45" pos:end="2981:50">PR_PID</name></expr>]</index></name> <operator pos:start="2981:53" pos:end="2981:53">=</operator> <name pos:start="2981:55" pos:end="2981:58">arg1</name></expr>;</expr_stmt>
          <expr_stmt pos:start="2982:11" pos:end="2984:0"><expr pos:start="2982:11" pos:end="2982:17"><name pos:start="2982:11" pos:end="2982:13">ret</name> <operator pos:start="2982:15" pos:end="2982:15">=</operator> <literal type="number" pos:start="2982:17" pos:end="2982:17">0</literal></expr>;</expr_stmt>
<cpp:elif pos:start="2983:1" pos:end="2983:51">#<cpp:directive pos:start="2983:2" pos:end="2983:5">elif</cpp:directive> <expr pos:start="2983:7" pos:end="2983:51"><call pos:start="2983:7" pos:end="2983:26"><name pos:start="2983:7" pos:end="2983:13">defined</name><argument_list pos:start="2983:14" pos:end="2983:26">(<argument pos:start="2983:15" pos:end="2983:25"><expr pos:start="2983:15" pos:end="2983:25"><name pos:start="2983:15" pos:end="2983:25">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="2983:28" pos:end="2983:29">&amp;&amp;</operator> <call pos:start="2983:31" pos:end="2983:51"><name pos:start="2983:31" pos:end="2983:37">defined</name><argument_list pos:start="2983:38" pos:end="2983:51">(<argument pos:start="2983:39" pos:end="2983:50"><expr pos:start="2983:39" pos:end="2983:50"><name pos:start="2983:39" pos:end="2983:50">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt pos:start="2984:7" pos:end="2986:0"><expr pos:start="2984:7" pos:end="2984:45"><name pos:start="2984:7" pos:end="2984:9">ret</name> <operator pos:start="2984:11" pos:end="2984:11">=</operator> <call pos:start="2984:13" pos:end="2984:45"><name pos:start="2984:13" pos:end="2984:30">do_set_thread_area</name><argument_list pos:start="2984:31" pos:end="2984:45">(<argument pos:start="2984:32" pos:end="2984:38"><expr pos:start="2984:32" pos:end="2984:38"><name pos:start="2984:32" pos:end="2984:38">cpu_env</name></expr></argument>, <argument pos:start="2984:41" pos:end="2984:44"><expr pos:start="2984:41" pos:end="2984:44"><name pos:start="2984:41" pos:end="2984:44">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif pos:start="2985:1" pos:end="2985:26">#<cpp:directive pos:start="2985:2" pos:end="2985:5">elif</cpp:directive> <expr pos:start="2985:7" pos:end="2985:26"><call pos:start="2985:7" pos:end="2985:26"><name pos:start="2985:7" pos:end="2985:13">defined</name><argument_list pos:start="2985:14" pos:end="2985:26">(<argument pos:start="2985:15" pos:end="2985:25"><expr pos:start="2985:15" pos:end="2985:25"><name pos:start="2985:15" pos:end="2985:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <block pos:start="2986:7" pos:end="3541:14">{<block_content pos:start="2987:11" pos:end="3541:14">
          <decl_stmt pos:start="2987:11" pos:end="2987:38"><decl pos:start="2987:11" pos:end="2987:37"><type pos:start="2987:11" pos:end="2987:21"><name pos:start="2987:11" pos:end="2987:19">TaskState</name> <modifier pos:start="2987:21" pos:end="2987:21">*</modifier></type><name pos:start="2987:22" pos:end="2987:23">ts</name> <init pos:start="2987:25" pos:end="2987:37">= <expr pos:start="2987:27" pos:end="2987:37"><name pos:start="2987:27" pos:end="2987:37"><name pos:start="2987:27" pos:end="2987:29">cpu</name><operator pos:start="2987:30" pos:end="2987:31">-&gt;</operator><name pos:start="2987:32" pos:end="2987:37">opaque</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt pos:start="2988:11" pos:end="2988:30"><expr pos:start="2988:11" pos:end="2988:29"><name pos:start="2988:11" pos:end="2988:22"><name pos:start="2988:11" pos:end="2988:12">ts</name><operator pos:start="2988:13" pos:end="2988:14">-&gt;</operator><name pos:start="2988:15" pos:end="2988:22">tp_value</name></name> <operator pos:start="2988:24" pos:end="2988:24">=</operator> <name pos:start="2988:26" pos:end="2988:29">arg1</name></expr>;</expr_stmt>
          <expr_stmt pos:start="2989:11" pos:end="2991:0"><expr pos:start="2989:11" pos:end="2989:17"><name pos:start="2989:11" pos:end="2989:13">ret</name> <operator pos:start="2989:15" pos:end="2989:15">=</operator> <literal type="number" pos:start="2989:17" pos:end="2989:17">0</literal></expr>;</expr_stmt>
<cpp:else pos:start="2990:1" pos:end="2990:5">#<cpp:directive pos:start="2990:2" pos:end="2990:5">else</cpp:directive></cpp:else>
      <goto pos:start="2991:7" pos:end="2995:0">goto <name pos:start="2991:12" pos:end="2991:31">unimplemented_nowarn</name>;</goto>
<cpp:endif pos:start="2992:1" pos:end="2992:6">#<cpp:directive pos:start="2992:2" pos:end="2992:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="2993:1" pos:end="2993:6">#<cpp:directive pos:start="2993:2" pos:end="2993:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="2994:1" pos:end="2994:32">#<cpp:directive pos:start="2994:2" pos:end="2994:6">ifdef</cpp:directive> <name pos:start="2994:8" pos:end="2994:32">TARGET_NR_get_thread_area</name></cpp:ifdef>
    <case pos:start="2995:5" pos:end="2997:0">case <expr pos:start="2995:10" pos:end="2995:34"><name pos:start="2995:10" pos:end="2995:34">TARGET_NR_get_thread_area</name></expr>:</case>
<cpp:if pos:start="2996:1" pos:end="2996:49">#<cpp:directive pos:start="2996:2" pos:end="2996:3">if</cpp:directive> <expr pos:start="2996:5" pos:end="2996:49"><call pos:start="2996:5" pos:end="2996:24"><name pos:start="2996:5" pos:end="2996:11">defined</name><argument_list pos:start="2996:12" pos:end="2996:24">(<argument pos:start="2996:13" pos:end="2996:23"><expr pos:start="2996:13" pos:end="2996:23"><name pos:start="2996:13" pos:end="2996:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="2996:26" pos:end="2996:27">&amp;&amp;</operator> <call pos:start="2996:29" pos:end="2996:49"><name pos:start="2996:29" pos:end="2996:35">defined</name><argument_list pos:start="2996:36" pos:end="2996:49">(<argument pos:start="2996:37" pos:end="2996:48"><expr pos:start="2996:37" pos:end="2996:48"><name pos:start="2996:37" pos:end="2996:48">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt pos:start="2997:9" pos:end="2999:0"><expr pos:start="2997:9" pos:end="2997:47"><name pos:start="2997:9" pos:end="2997:11">ret</name> <operator pos:start="2997:13" pos:end="2997:13">=</operator> <call pos:start="2997:15" pos:end="2997:47"><name pos:start="2997:15" pos:end="2997:32">do_get_thread_area</name><argument_list pos:start="2997:33" pos:end="2997:47">(<argument pos:start="2997:34" pos:end="2997:40"><expr pos:start="2997:34" pos:end="2997:40"><name pos:start="2997:34" pos:end="2997:40">cpu_env</name></expr></argument>, <argument pos:start="2997:43" pos:end="2997:46"><expr pos:start="2997:43" pos:end="2997:46"><name pos:start="2997:43" pos:end="2997:46">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif pos:start="2998:1" pos:end="2998:26">#<cpp:directive pos:start="2998:2" pos:end="2998:5">elif</cpp:directive> <expr pos:start="2998:7" pos:end="2998:26"><call pos:start="2998:7" pos:end="2998:26"><name pos:start="2998:7" pos:end="2998:13">defined</name><argument_list pos:start="2998:14" pos:end="2998:26">(<argument pos:start="2998:15" pos:end="2998:25"><expr pos:start="2998:15" pos:end="2998:25"><name pos:start="2998:15" pos:end="2998:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>
        <block pos:start="2999:9" pos:end="3541:14">{<block_content pos:start="3000:13" pos:end="3541:14">
            <decl_stmt pos:start="3000:13" pos:end="3000:40"><decl pos:start="3000:13" pos:end="3000:39"><type pos:start="3000:13" pos:end="3000:23"><name pos:start="3000:13" pos:end="3000:21">TaskState</name> <modifier pos:start="3000:23" pos:end="3000:23">*</modifier></type><name pos:start="3000:24" pos:end="3000:25">ts</name> <init pos:start="3000:27" pos:end="3000:39">= <expr pos:start="3000:29" pos:end="3000:39"><name pos:start="3000:29" pos:end="3000:39"><name pos:start="3000:29" pos:end="3000:31">cpu</name><operator pos:start="3000:32" pos:end="3000:33">-&gt;</operator><name pos:start="3000:34" pos:end="3000:39">opaque</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="3001:13" pos:end="3003:0"><expr pos:start="3001:13" pos:end="3001:30"><name pos:start="3001:13" pos:end="3001:15">ret</name> <operator pos:start="3001:17" pos:end="3001:17">=</operator> <name pos:start="3001:19" pos:end="3001:30"><name pos:start="3001:19" pos:end="3001:20">ts</name><operator pos:start="3001:21" pos:end="3001:22">-&gt;</operator><name pos:start="3001:23" pos:end="3001:30">tp_value</name></name></expr>;</expr_stmt>
<cpp:else pos:start="3002:1" pos:end="3002:5">#<cpp:directive pos:start="3002:2" pos:end="3002:5">else</cpp:directive></cpp:else>
        <goto pos:start="3003:9" pos:end="3007:0">goto <name pos:start="3003:14" pos:end="3003:33">unimplemented_nowarn</name>;</goto>
<cpp:endif pos:start="3004:1" pos:end="3004:6">#<cpp:directive pos:start="3004:2" pos:end="3004:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3005:1" pos:end="3005:6">#<cpp:directive pos:start="3005:2" pos:end="3005:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3006:1" pos:end="3006:30">#<cpp:directive pos:start="3006:2" pos:end="3006:6">ifdef</cpp:directive> <name pos:start="3006:8" pos:end="3006:30">TARGET_NR_getdomainname</name></cpp:ifdef>
    <case pos:start="3007:5" pos:end="3007:33">case <expr pos:start="3007:10" pos:end="3007:32"><name pos:start="3007:10" pos:end="3007:32">TARGET_NR_getdomainname</name></expr>:</case>
        <goto pos:start="3008:9" pos:end="3011:0">goto <name pos:start="3008:14" pos:end="3008:33">unimplemented_nowarn</name>;</goto>
<cpp:endif pos:start="3009:1" pos:end="3009:6">#<cpp:directive pos:start="3009:2" pos:end="3009:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3010:1" pos:end="3010:30">#<cpp:directive pos:start="3010:2" pos:end="3010:6">ifdef</cpp:directive> <name pos:start="3010:8" pos:end="3010:30">TARGET_NR_clock_gettime</name></cpp:ifdef>
    <case pos:start="3011:5" pos:end="3011:33">case <expr pos:start="3011:10" pos:end="3011:32"><name pos:start="3011:10" pos:end="3011:32">TARGET_NR_clock_gettime</name></expr>:</case>
    <block pos:start="3012:5" pos:end="3541:14">{<block_content pos:start="3013:9" pos:end="3541:14">
        <decl_stmt pos:start="3013:9" pos:end="3013:27"><decl pos:start="3013:9" pos:end="3013:26"><type pos:start="3013:9" pos:end="3013:23"><name pos:start="3013:9" pos:end="3013:23"><name pos:start="3013:9" pos:end="3013:14">struct</name> <name pos:start="3013:16" pos:end="3013:23">timespec</name></name></type> <name pos:start="3013:25" pos:end="3013:26">ts</name></decl>;</decl_stmt>
        <expr_stmt pos:start="3014:9" pos:end="3014:50"><expr pos:start="3014:9" pos:end="3014:49"><name pos:start="3014:9" pos:end="3014:11">ret</name> <operator pos:start="3014:13" pos:end="3014:13">=</operator> <call pos:start="3014:15" pos:end="3014:49"><name pos:start="3014:15" pos:end="3014:23">get_errno</name><argument_list pos:start="3014:24" pos:end="3014:49">(<argument pos:start="3014:25" pos:end="3014:48"><expr pos:start="3014:25" pos:end="3014:48"><call pos:start="3014:25" pos:end="3014:48"><name pos:start="3014:25" pos:end="3014:37">clock_gettime</name><argument_list pos:start="3014:38" pos:end="3014:48">(<argument pos:start="3014:39" pos:end="3014:42"><expr pos:start="3014:39" pos:end="3014:42"><name pos:start="3014:39" pos:end="3014:42">arg1</name></expr></argument>, <argument pos:start="3014:45" pos:end="3014:47"><expr pos:start="3014:45" pos:end="3014:47"><operator pos:start="3014:45" pos:end="3014:45">&amp;</operator><name pos:start="3014:46" pos:end="3014:47">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3015:9" pos:end="3541:14"><if pos:start="3015:9" pos:end="3541:14">if <condition pos:start="3015:12" pos:end="3015:27">(<expr pos:start="3015:13" pos:end="3015:26"><operator pos:start="3015:13" pos:end="3015:13">!</operator><call pos:start="3015:14" pos:end="3015:26"><name pos:start="3015:14" pos:end="3015:21">is_error</name><argument_list pos:start="3015:22" pos:end="3015:26">(<argument pos:start="3015:23" pos:end="3015:25"><expr pos:start="3015:23" pos:end="3015:25"><name pos:start="3015:23" pos:end="3015:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3015:29" pos:end="3541:14">{<block_content pos:start="3016:13" pos:end="3541:14">
            <expr_stmt pos:start="3016:13" pos:end="3019:0"><expr pos:start="3016:13" pos:end="3016:46"><call pos:start="3016:13" pos:end="3016:46"><name pos:start="3016:13" pos:end="3016:35">host_to_target_timespec</name><argument_list pos:start="3016:36" pos:end="3016:46">(<argument pos:start="3016:37" pos:end="3016:40"><expr pos:start="3016:37" pos:end="3016:40"><name pos:start="3016:37" pos:end="3016:40">arg2</name></expr></argument>, <argument pos:start="3016:43" pos:end="3016:45"><expr pos:start="3016:43" pos:end="3016:45"><operator pos:start="3016:43" pos:end="3016:43">&amp;</operator><name pos:start="3016:44" pos:end="3016:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3017:1" pos:end="3017:6">#<cpp:directive pos:start="3017:2" pos:end="3017:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3018:1" pos:end="3018:29">#<cpp:directive pos:start="3018:2" pos:end="3018:6">ifdef</cpp:directive> <name pos:start="3018:8" pos:end="3018:29">TARGET_NR_clock_getres</name></cpp:ifdef>
    <case pos:start="3019:5" pos:end="3019:32">case <expr pos:start="3019:10" pos:end="3019:31"><name pos:start="3019:10" pos:end="3019:31">TARGET_NR_clock_getres</name></expr>:</case>
    <block pos:start="3020:5" pos:end="3541:14">{<block_content pos:start="3021:9" pos:end="3541:14">
        <decl_stmt pos:start="3021:9" pos:end="3021:27"><decl pos:start="3021:9" pos:end="3021:26"><type pos:start="3021:9" pos:end="3021:23"><name pos:start="3021:9" pos:end="3021:23"><name pos:start="3021:9" pos:end="3021:14">struct</name> <name pos:start="3021:16" pos:end="3021:23">timespec</name></name></type> <name pos:start="3021:25" pos:end="3021:26">ts</name></decl>;</decl_stmt>
        <expr_stmt pos:start="3022:9" pos:end="3022:49"><expr pos:start="3022:9" pos:end="3022:48"><name pos:start="3022:9" pos:end="3022:11">ret</name> <operator pos:start="3022:13" pos:end="3022:13">=</operator> <call pos:start="3022:15" pos:end="3022:48"><name pos:start="3022:15" pos:end="3022:23">get_errno</name><argument_list pos:start="3022:24" pos:end="3022:48">(<argument pos:start="3022:25" pos:end="3022:47"><expr pos:start="3022:25" pos:end="3022:47"><call pos:start="3022:25" pos:end="3022:47"><name pos:start="3022:25" pos:end="3022:36">clock_getres</name><argument_list pos:start="3022:37" pos:end="3022:47">(<argument pos:start="3022:38" pos:end="3022:41"><expr pos:start="3022:38" pos:end="3022:41"><name pos:start="3022:38" pos:end="3022:41">arg1</name></expr></argument>, <argument pos:start="3022:44" pos:end="3022:46"><expr pos:start="3022:44" pos:end="3022:46"><operator pos:start="3022:44" pos:end="3022:44">&amp;</operator><name pos:start="3022:45" pos:end="3022:46">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3023:9" pos:end="3541:14"><if pos:start="3023:9" pos:end="3541:14">if <condition pos:start="3023:12" pos:end="3023:27">(<expr pos:start="3023:13" pos:end="3023:26"><operator pos:start="3023:13" pos:end="3023:13">!</operator><call pos:start="3023:14" pos:end="3023:26"><name pos:start="3023:14" pos:end="3023:21">is_error</name><argument_list pos:start="3023:22" pos:end="3023:26">(<argument pos:start="3023:23" pos:end="3023:25"><expr pos:start="3023:23" pos:end="3023:25"><name pos:start="3023:23" pos:end="3023:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3023:29" pos:end="3541:14">{<block_content pos:start="3024:13" pos:end="3541:14">
            <expr_stmt pos:start="3024:13" pos:end="3027:0"><expr pos:start="3024:13" pos:end="3024:46"><call pos:start="3024:13" pos:end="3024:46"><name pos:start="3024:13" pos:end="3024:35">host_to_target_timespec</name><argument_list pos:start="3024:36" pos:end="3024:46">(<argument pos:start="3024:37" pos:end="3024:40"><expr pos:start="3024:37" pos:end="3024:40"><name pos:start="3024:37" pos:end="3024:40">arg2</name></expr></argument>, <argument pos:start="3024:43" pos:end="3024:45"><expr pos:start="3024:43" pos:end="3024:45"><operator pos:start="3024:43" pos:end="3024:43">&amp;</operator><name pos:start="3024:44" pos:end="3024:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3025:1" pos:end="3025:6">#<cpp:directive pos:start="3025:2" pos:end="3025:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3026:1" pos:end="3026:32">#<cpp:directive pos:start="3026:2" pos:end="3026:6">ifdef</cpp:directive> <name pos:start="3026:8" pos:end="3026:32">TARGET_NR_clock_nanosleep</name></cpp:ifdef>
    <case pos:start="3027:5" pos:end="3027:35">case <expr pos:start="3027:10" pos:end="3027:34"><name pos:start="3027:10" pos:end="3027:34">TARGET_NR_clock_nanosleep</name></expr>:</case>
    <block pos:start="3028:5" pos:end="3541:14">{<block_content pos:start="3029:9" pos:end="3541:14">
        <decl_stmt pos:start="3029:9" pos:end="3029:27"><decl pos:start="3029:9" pos:end="3029:26"><type pos:start="3029:9" pos:end="3029:23"><name pos:start="3029:9" pos:end="3029:23"><name pos:start="3029:9" pos:end="3029:14">struct</name> <name pos:start="3029:16" pos:end="3029:23">timespec</name></name></type> <name pos:start="3029:25" pos:end="3029:26">ts</name></decl>;</decl_stmt>
        <expr_stmt pos:start="3030:9" pos:end="3030:43"><expr pos:start="3030:9" pos:end="3030:42"><call pos:start="3030:9" pos:end="3030:42"><name pos:start="3030:9" pos:end="3030:31">target_to_host_timespec</name><argument_list pos:start="3030:32" pos:end="3030:42">(<argument pos:start="3030:33" pos:end="3030:35"><expr pos:start="3030:33" pos:end="3030:35"><operator pos:start="3030:33" pos:end="3030:33">&amp;</operator><name pos:start="3030:34" pos:end="3030:35">ts</name></expr></argument>, <argument pos:start="3030:38" pos:end="3030:41"><expr pos:start="3030:38" pos:end="3030:41"><name pos:start="3030:38" pos:end="3030:41">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3031:9" pos:end="3032:70"><expr pos:start="3031:9" pos:end="3032:69"><name pos:start="3031:9" pos:end="3031:11">ret</name> <operator pos:start="3031:13" pos:end="3031:13">=</operator> <call pos:start="3031:15" pos:end="3032:69"><name pos:start="3031:15" pos:end="3031:23">get_errno</name><argument_list pos:start="3031:24" pos:end="3032:69">(<argument pos:start="3031:25" pos:end="3032:68"><expr pos:start="3031:25" pos:end="3032:68"><call pos:start="3031:25" pos:end="3032:68"><name pos:start="3031:25" pos:end="3031:44">safe_clock_nanosleep</name><argument_list pos:start="3031:45" pos:end="3032:68">(<argument pos:start="3031:46" pos:end="3031:49"><expr pos:start="3031:46" pos:end="3031:49"><name pos:start="3031:46" pos:end="3031:49">arg1</name></expr></argument>, <argument pos:start="3031:52" pos:end="3031:55"><expr pos:start="3031:52" pos:end="3031:55"><name pos:start="3031:52" pos:end="3031:55">arg2</name></expr></argument>,
                                             <argument pos:start="3032:46" pos:end="3032:48"><expr pos:start="3032:46" pos:end="3032:48"><operator pos:start="3032:46" pos:end="3032:46">&amp;</operator><name pos:start="3032:47" pos:end="3032:48">ts</name></expr></argument>, <argument pos:start="3032:51" pos:end="3032:67"><expr pos:start="3032:51" pos:end="3032:67"><ternary pos:start="3032:51" pos:end="3032:67"><condition pos:start="3032:51" pos:end="3032:56"><expr pos:start="3032:51" pos:end="3032:54"><name pos:start="3032:51" pos:end="3032:54">arg4</name></expr> ?</condition><then pos:start="3032:58" pos:end="3032:60"> <expr pos:start="3032:58" pos:end="3032:60"><operator pos:start="3032:58" pos:end="3032:58">&amp;</operator><name pos:start="3032:59" pos:end="3032:60">ts</name></expr> </then><else pos:start="3032:62" pos:end="3032:67">: <expr pos:start="3032:64" pos:end="3032:67"><name pos:start="3032:64" pos:end="3032:67">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3033:9" pos:end="3036:0"><if pos:start="3033:9" pos:end="3036:0">if <condition pos:start="3033:12" pos:end="3033:17">(<expr pos:start="3033:13" pos:end="3033:16"><name pos:start="3033:13" pos:end="3033:16">arg4</name></expr>)</condition><block type="pseudo" pos:start="3034:13" pos:end="3036:0"><block_content pos:start="3034:13" pos:end="3036:0">
            <expr_stmt pos:start="3034:13" pos:end="3036:0"><expr pos:start="3034:13" pos:end="3034:46"><call pos:start="3034:13" pos:end="3034:46"><name pos:start="3034:13" pos:end="3034:35">host_to_target_timespec</name><argument_list pos:start="3034:36" pos:end="3034:46">(<argument pos:start="3034:37" pos:end="3034:40"><expr pos:start="3034:37" pos:end="3034:40"><name pos:start="3034:37" pos:end="3034:40">arg4</name></expr></argument>, <argument pos:start="3034:43" pos:end="3034:45"><expr pos:start="3034:43" pos:end="3034:45"><operator pos:start="3034:43" pos:end="3034:43">&amp;</operator><name pos:start="3034:44" pos:end="3034:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if pos:start="3035:1" pos:end="3035:23">#<cpp:directive pos:start="3035:2" pos:end="3035:3">if</cpp:directive> <expr pos:start="3035:5" pos:end="3035:23"><call pos:start="3035:5" pos:end="3035:23"><name pos:start="3035:5" pos:end="3035:11">defined</name><argument_list pos:start="3035:12" pos:end="3035:23">(<argument pos:start="3035:13" pos:end="3035:22"><expr pos:start="3035:13" pos:end="3035:22"><name pos:start="3035:13" pos:end="3035:22">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block" pos:start="3036:9" pos:end="3037:66">/* clock_nanosleep is odd in that it returns positive errno values.
         * On PPC, CR0 bit 3 should be set in such a situation. */</comment>
        <if_stmt pos:start="3038:9" pos:end="3541:14"><if pos:start="3038:9" pos:end="3541:14">if <condition pos:start="3038:12" pos:end="3038:46">(<expr pos:start="3038:13" pos:end="3038:45"><name pos:start="3038:13" pos:end="3038:15">ret</name> <operator pos:start="3038:17" pos:end="3038:18">&amp;&amp;</operator> <name pos:start="3038:20" pos:end="3038:22">ret</name> <operator pos:start="3038:24" pos:end="3038:25">!=</operator> <operator pos:start="3038:27" pos:end="3038:27">-</operator><name pos:start="3038:28" pos:end="3038:45">TARGET_ERESTARTSYS</name></expr>)</condition> <block pos:start="3038:48" pos:end="3541:14">{<block_content pos:start="3039:13" pos:end="3541:14">
            <expr_stmt pos:start="3039:13" pos:end="3043:0"><expr pos:start="3039:13" pos:end="3039:49"><operator pos:start="3039:13" pos:end="3039:13">(</operator><operator pos:start="3039:14" pos:end="3039:14">(</operator><name pos:start="3039:15" pos:end="3039:25">CPUPPCState</name> <operator pos:start="3039:27" pos:end="3039:27">*</operator><operator pos:start="3039:28" pos:end="3039:28">)</operator><name pos:start="3039:29" pos:end="3039:35">cpu_env</name><operator pos:start="3039:36" pos:end="3039:36">)</operator><operator pos:start="3039:37" pos:end="3039:38">-&gt;</operator><name pos:start="3039:39" pos:end="3039:44"><name pos:start="3039:39" pos:end="3039:41">crf</name><index pos:start="3039:42" pos:end="3039:44">[<expr pos:start="3039:43" pos:end="3039:43"><literal type="number" pos:start="3039:43" pos:end="3039:43">0</literal></expr>]</index></name> <operator pos:start="3039:46" pos:end="3039:47">|=</operator> <literal type="number" pos:start="3039:49" pos:end="3039:49">1</literal></expr>;</expr_stmt>
<cpp:endif pos:start="3040:1" pos:end="3040:6">#<cpp:directive pos:start="3040:2" pos:end="3040:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3041:1" pos:end="3041:6">#<cpp:directive pos:start="3041:2" pos:end="3041:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3042:1" pos:end="3042:71">#<cpp:directive pos:start="3042:2" pos:end="3042:3">if</cpp:directive> <expr pos:start="3042:5" pos:end="3042:71"><call pos:start="3042:5" pos:end="3042:38"><name pos:start="3042:5" pos:end="3042:11">defined</name><argument_list pos:start="3042:12" pos:end="3042:38">(<argument pos:start="3042:13" pos:end="3042:37"><expr pos:start="3042:13" pos:end="3042:37"><name pos:start="3042:13" pos:end="3042:37">TARGET_NR_set_tid_address</name></expr></argument>)</argument_list></call> <operator pos:start="3042:40" pos:end="3042:41">&amp;&amp;</operator> <call pos:start="3042:43" pos:end="3042:71"><name pos:start="3042:43" pos:end="3042:49">defined</name><argument_list pos:start="3042:50" pos:end="3042:71">(<argument pos:start="3042:51" pos:end="3042:70"><expr pos:start="3042:51" pos:end="3042:70"><name pos:start="3042:51" pos:end="3042:70">__NR_set_tid_address</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3043:5" pos:end="3043:35">case <expr pos:start="3043:10" pos:end="3043:34"><name pos:start="3043:10" pos:end="3043:34">TARGET_NR_set_tid_address</name></expr>:</case>
        <expr_stmt pos:start="3044:9" pos:end="3046:0"><expr pos:start="3044:9" pos:end="3044:58"><name pos:start="3044:9" pos:end="3044:11">ret</name> <operator pos:start="3044:13" pos:end="3044:13">=</operator> <call pos:start="3044:15" pos:end="3044:58"><name pos:start="3044:15" pos:end="3044:23">get_errno</name><argument_list pos:start="3044:24" pos:end="3044:58">(<argument pos:start="3044:25" pos:end="3044:57"><expr pos:start="3044:25" pos:end="3044:57"><call pos:start="3044:25" pos:end="3044:57"><name pos:start="3044:25" pos:end="3044:39">set_tid_address</name><argument_list pos:start="3044:40" pos:end="3044:57">(<argument pos:start="3044:41" pos:end="3044:56"><expr pos:start="3044:41" pos:end="3044:56"><operator pos:start="3044:41" pos:end="3044:41">(</operator><name pos:start="3044:42" pos:end="3044:44">int</name> <operator pos:start="3044:46" pos:end="3044:46">*</operator><operator pos:start="3044:47" pos:end="3044:47">)</operator><call pos:start="3044:48" pos:end="3044:56"><name pos:start="3044:48" pos:end="3044:50">g2h</name><argument_list pos:start="3044:51" pos:end="3044:56">(<argument pos:start="3044:52" pos:end="3044:55"><expr pos:start="3044:52" pos:end="3044:55"><name pos:start="3044:52" pos:end="3044:55">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3045:1" pos:end="3045:6">#<cpp:directive pos:start="3045:2" pos:end="3045:6">endif</cpp:directive></cpp:endif>
    <case pos:start="3046:5" pos:end="3046:25">case <expr pos:start="3046:10" pos:end="3046:24"><name pos:start="3046:10" pos:end="3046:24">TARGET_NR_tkill</name></expr>:</case>
        <expr_stmt pos:start="3047:9" pos:end="3047:76"><expr pos:start="3047:9" pos:end="3047:75"><name pos:start="3047:9" pos:end="3047:11">ret</name> <operator pos:start="3047:13" pos:end="3047:13">=</operator> <call pos:start="3047:15" pos:end="3047:75"><name pos:start="3047:15" pos:end="3047:23">get_errno</name><argument_list pos:start="3047:24" pos:end="3047:75">(<argument pos:start="3047:25" pos:end="3047:74"><expr pos:start="3047:25" pos:end="3047:74"><call pos:start="3047:25" pos:end="3047:74"><name pos:start="3047:25" pos:end="3047:34">safe_tkill</name><argument_list pos:start="3047:35" pos:end="3047:74">(<argument pos:start="3047:36" pos:end="3047:44"><expr pos:start="3047:36" pos:end="3047:44"><operator pos:start="3047:36" pos:end="3047:36">(</operator><name pos:start="3047:37" pos:end="3047:39">int</name><operator pos:start="3047:40" pos:end="3047:40">)</operator><name pos:start="3047:41" pos:end="3047:44">arg1</name></expr></argument>, <argument pos:start="3047:47" pos:end="3047:73"><expr pos:start="3047:47" pos:end="3047:73"><call pos:start="3047:47" pos:end="3047:73"><name pos:start="3047:47" pos:end="3047:67">target_to_host_signal</name><argument_list pos:start="3047:68" pos:end="3047:73">(<argument pos:start="3047:69" pos:end="3047:72"><expr pos:start="3047:69" pos:end="3047:72"><name pos:start="3047:69" pos:end="3047:72">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="3048:5" pos:end="3048:26">case <expr pos:start="3048:10" pos:end="3048:25"><name pos:start="3048:10" pos:end="3048:25">TARGET_NR_tgkill</name></expr>:</case>
        <expr_stmt pos:start="3049:9" pos:end="3052:0"><expr pos:start="3049:9" pos:end="3050:53"><name pos:start="3049:9" pos:end="3049:11">ret</name> <operator pos:start="3049:13" pos:end="3049:13">=</operator> <call pos:start="3049:15" pos:end="3050:53"><name pos:start="3049:15" pos:end="3049:23">get_errno</name><argument_list pos:start="3049:24" pos:end="3050:53">(<argument pos:start="3049:25" pos:end="3050:52"><expr pos:start="3049:25" pos:end="3050:52"><call pos:start="3049:25" pos:end="3050:52"><name pos:start="3049:25" pos:end="3049:35">safe_tgkill</name><argument_list pos:start="3049:36" pos:end="3050:52">(<argument pos:start="3049:37" pos:end="3049:45"><expr pos:start="3049:37" pos:end="3049:45"><operator pos:start="3049:37" pos:end="3049:37">(</operator><name pos:start="3049:38" pos:end="3049:40">int</name><operator pos:start="3049:41" pos:end="3049:41">)</operator><name pos:start="3049:42" pos:end="3049:45">arg1</name></expr></argument>, <argument pos:start="3049:48" pos:end="3049:56"><expr pos:start="3049:48" pos:end="3049:56"><operator pos:start="3049:48" pos:end="3049:48">(</operator><name pos:start="3049:49" pos:end="3049:51">int</name><operator pos:start="3049:52" pos:end="3049:52">)</operator><name pos:start="3049:53" pos:end="3049:56">arg2</name></expr></argument>,
                        <argument pos:start="3050:25" pos:end="3050:51"><expr pos:start="3050:25" pos:end="3050:51"><call pos:start="3050:25" pos:end="3050:51"><name pos:start="3050:25" pos:end="3050:45">target_to_host_signal</name><argument_list pos:start="3050:46" pos:end="3050:51">(<argument pos:start="3050:47" pos:end="3050:50"><expr pos:start="3050:47" pos:end="3050:50"><name pos:start="3050:47" pos:end="3050:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="3051:1" pos:end="3051:32">#<cpp:directive pos:start="3051:2" pos:end="3051:6">ifdef</cpp:directive> <name pos:start="3051:8" pos:end="3051:32">TARGET_NR_set_robust_list</name></cpp:ifdef>
    <case pos:start="3052:5" pos:end="3052:35">case <expr pos:start="3052:10" pos:end="3052:34"><name pos:start="3052:10" pos:end="3052:34">TARGET_NR_set_robust_list</name></expr>:</case>
    <case pos:start="3053:5" pos:end="3053:35">case <expr pos:start="3053:10" pos:end="3053:34"><name pos:start="3053:10" pos:end="3053:34">TARGET_NR_get_robust_list</name></expr>:</case>
        <comment type="block" pos:start="3054:9" pos:end="3065:11">/* The ABI for supporting robust futexes has userspace pass
         * the kernel a pointer to a linked list which is updated by
         * userspace after the syscall; the list is walked by the kernel
         * when the thread exits. Since the linked list in QEMU guest
         * memory isn't a valid linked list for the host and we have
         * no way to reliably intercept the thread-death event, we can't
         * support these. Silently return ENOSYS so that guest userspace
         * falls back to a non-robust futex implementation (which should
         * be OK except in the corner case of the guest crashing while
         * holding a mutex that is shared with another process via
         * shared memory).
         */</comment>
        <goto pos:start="3066:9" pos:end="3069:0">goto <name pos:start="3066:14" pos:end="3066:33">unimplemented_nowarn</name>;</goto>
<cpp:endif pos:start="3067:1" pos:end="3067:6">#<cpp:directive pos:start="3067:2" pos:end="3067:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3068:1" pos:end="3068:32">#<cpp:directive pos:start="3068:2" pos:end="3068:3">if</cpp:directive> <expr pos:start="3068:5" pos:end="3068:32"><call pos:start="3068:5" pos:end="3068:32"><name pos:start="3068:5" pos:end="3068:11">defined</name><argument_list pos:start="3068:12" pos:end="3068:32">(<argument pos:start="3068:13" pos:end="3068:31"><expr pos:start="3068:13" pos:end="3068:31"><name pos:start="3068:13" pos:end="3068:31">TARGET_NR_utimensat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3069:5" pos:end="3069:29">case <expr pos:start="3069:10" pos:end="3069:28"><name pos:start="3069:10" pos:end="3069:28">TARGET_NR_utimensat</name></expr>:</case>
        <block pos:start="3070:9" pos:end="3541:14">{<block_content pos:start="3071:13" pos:end="3541:14">
            <decl_stmt pos:start="3071:13" pos:end="3071:40"><decl pos:start="3071:13" pos:end="3071:32"><type pos:start="3071:13" pos:end="3071:29"><name pos:start="3071:13" pos:end="3071:27"><name pos:start="3071:13" pos:end="3071:18">struct</name> <name pos:start="3071:20" pos:end="3071:27">timespec</name></name> <modifier pos:start="3071:29" pos:end="3071:29">*</modifier></type><name pos:start="3071:30" pos:end="3071:32">tsp</name></decl>, <decl pos:start="3071:35" pos:end="3071:39"><type ref="prev" pos:start="3071:13" pos:end="3071:29"/><name pos:start="3071:35" pos:end="3071:39"><name pos:start="3071:35" pos:end="3071:36">ts</name><index pos:start="3071:37" pos:end="3071:39">[<expr pos:start="3071:38" pos:end="3071:38"><literal type="number" pos:start="3071:38" pos:end="3071:38">2</literal></expr>]</index></name></decl>;</decl_stmt>
            <if_stmt pos:start="3072:13" pos:end="3541:14"><if pos:start="3072:13" pos:end="3074:13">if <condition pos:start="3072:16" pos:end="3072:22">(<expr pos:start="3072:17" pos:end="3072:21"><operator pos:start="3072:17" pos:end="3072:17">!</operator><name pos:start="3072:18" pos:end="3072:21">arg3</name></expr>)</condition> <block pos:start="3072:24" pos:end="3074:13">{<block_content pos:start="3073:17" pos:end="3073:27">
                <expr_stmt pos:start="3073:17" pos:end="3073:27"><expr pos:start="3073:17" pos:end="3073:26"><name pos:start="3073:17" pos:end="3073:19">tsp</name> <operator pos:start="3073:21" pos:end="3073:21">=</operator> <name pos:start="3073:23" pos:end="3073:26">NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3074:15" pos:end="3541:14">else <block pos:start="3074:20" pos:end="3541:14">{<block_content pos:start="3075:17" pos:end="3541:14">
                <expr_stmt pos:start="3075:17" pos:end="3075:50"><expr pos:start="3075:17" pos:end="3075:49"><call pos:start="3075:17" pos:end="3075:49"><name pos:start="3075:17" pos:end="3075:39">target_to_host_timespec</name><argument_list pos:start="3075:40" pos:end="3075:49">(<argument pos:start="3075:41" pos:end="3075:42"><expr pos:start="3075:41" pos:end="3075:42"><name pos:start="3075:41" pos:end="3075:42">ts</name></expr></argument>, <argument pos:start="3075:45" pos:end="3075:48"><expr pos:start="3075:45" pos:end="3075:48"><name pos:start="3075:45" pos:end="3075:48">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3076:17" pos:end="3076:83"><expr pos:start="3076:17" pos:end="3076:82"><call pos:start="3076:17" pos:end="3076:82"><name pos:start="3076:17" pos:end="3076:39">target_to_host_timespec</name><argument_list pos:start="3076:40" pos:end="3076:82">(<argument pos:start="3076:41" pos:end="3076:44"><expr pos:start="3076:41" pos:end="3076:44"><name pos:start="3076:41" pos:end="3076:42">ts</name><operator pos:start="3076:43" pos:end="3076:43">+</operator><literal type="number" pos:start="3076:44" pos:end="3076:44">1</literal></expr></argument>, <argument pos:start="3076:47" pos:end="3076:81"><expr pos:start="3076:47" pos:end="3076:81"><name pos:start="3076:47" pos:end="3076:50">arg3</name><operator pos:start="3076:51" pos:end="3076:51">+</operator><sizeof pos:start="3076:52" pos:end="3076:81">sizeof<argument_list pos:start="3076:58" pos:end="3076:81">(<argument pos:start="3076:59" pos:end="3076:80"><expr pos:start="3076:59" pos:end="3076:80">struct <name pos:start="3076:66" pos:end="3076:80">target_timespec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3077:17" pos:end="3077:25"><expr pos:start="3077:17" pos:end="3077:24"><name pos:start="3077:17" pos:end="3077:19">tsp</name> <operator pos:start="3077:21" pos:end="3077:21">=</operator> <name pos:start="3077:23" pos:end="3077:24">ts</name></expr>;</expr_stmt>
            <if_stmt pos:start="3078:13" pos:end="3541:14"><if pos:start="3078:13" pos:end="3079:70">if <condition pos:start="3078:16" pos:end="3078:22">(<expr pos:start="3078:17" pos:end="3078:21"><operator pos:start="3078:17" pos:end="3078:17">!</operator><name pos:start="3078:18" pos:end="3078:21">arg2</name></expr>)</condition><block type="pseudo" pos:start="3079:17" pos:end="3079:70"><block_content pos:start="3079:17" pos:end="3079:70">
                <expr_stmt pos:start="3079:17" pos:end="3079:70"><expr pos:start="3079:17" pos:end="3079:69"><name pos:start="3079:17" pos:end="3079:19">ret</name> <operator pos:start="3079:21" pos:end="3079:21">=</operator> <call pos:start="3079:23" pos:end="3079:69"><name pos:start="3079:23" pos:end="3079:31">get_errno</name><argument_list pos:start="3079:32" pos:end="3079:69">(<argument pos:start="3079:33" pos:end="3079:68"><expr pos:start="3079:33" pos:end="3079:68"><call pos:start="3079:33" pos:end="3079:68"><name pos:start="3079:33" pos:end="3079:45">sys_utimensat</name><argument_list pos:start="3079:46" pos:end="3079:68">(<argument pos:start="3079:47" pos:end="3079:50"><expr pos:start="3079:47" pos:end="3079:50"><name pos:start="3079:47" pos:end="3079:50">arg1</name></expr></argument>, <argument pos:start="3079:53" pos:end="3079:56"><expr pos:start="3079:53" pos:end="3079:56"><name pos:start="3079:53" pos:end="3079:56">NULL</name></expr></argument>, <argument pos:start="3079:59" pos:end="3079:61"><expr pos:start="3079:59" pos:end="3079:61"><name pos:start="3079:59" pos:end="3079:61">tsp</name></expr></argument>, <argument pos:start="3079:64" pos:end="3079:67"><expr pos:start="3079:64" pos:end="3079:67"><name pos:start="3079:64" pos:end="3079:67">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="3080:13" pos:end="3541:14">else <block pos:start="3080:18" pos:end="3541:14">{<block_content pos:start="3081:17" pos:end="3541:14">
                <if_stmt pos:start="3081:17" pos:end="3541:14"><if pos:start="3081:17" pos:end="3541:14">if <condition pos:start="3081:20" pos:end="3081:50">(<expr pos:start="3081:21" pos:end="3081:49"><operator pos:start="3081:21" pos:end="3081:21">!</operator><operator pos:start="3081:22" pos:end="3081:22">(</operator><name pos:start="3081:23" pos:end="3081:23">p</name> <operator pos:start="3081:25" pos:end="3081:25">=</operator> <call pos:start="3081:27" pos:end="3081:48"><name pos:start="3081:27" pos:end="3081:42">lock_user_string</name><argument_list pos:start="3081:43" pos:end="3081:48">(<argument pos:start="3081:44" pos:end="3081:47"><expr pos:start="3081:44" pos:end="3081:47"><name pos:start="3081:44" pos:end="3081:47">arg2</name></expr></argument>)</argument_list></call><operator pos:start="3081:49" pos:end="3081:49">)</operator></expr>)</condition> <block pos:start="3081:52" pos:end="3541:14">{<block_content pos:start="3082:21" pos:end="3541:14">
                    <expr_stmt pos:start="3082:21" pos:end="3082:41"><expr pos:start="3082:21" pos:end="3082:40"><name pos:start="3082:21" pos:end="3082:23">ret</name> <operator pos:start="3082:25" pos:end="3082:25">=</operator> <operator pos:start="3082:27" pos:end="3082:27">-</operator><name pos:start="3082:28" pos:end="3082:40">TARGET_EFAULT</name></expr>;</expr_stmt>
                    <goto pos:start="3083:21" pos:end="3083:30">goto <name pos:start="3083:26" pos:end="3083:29">fail</name>;</goto>
                <expr_stmt pos:start="3084:17" pos:end="3084:73"><expr pos:start="3084:17" pos:end="3084:72"><name pos:start="3084:17" pos:end="3084:19">ret</name> <operator pos:start="3084:21" pos:end="3084:21">=</operator> <call pos:start="3084:23" pos:end="3084:72"><name pos:start="3084:23" pos:end="3084:31">get_errno</name><argument_list pos:start="3084:32" pos:end="3084:72">(<argument pos:start="3084:33" pos:end="3084:71"><expr pos:start="3084:33" pos:end="3084:71"><call pos:start="3084:33" pos:end="3084:71"><name pos:start="3084:33" pos:end="3084:45">sys_utimensat</name><argument_list pos:start="3084:46" pos:end="3084:71">(<argument pos:start="3084:47" pos:end="3084:50"><expr pos:start="3084:47" pos:end="3084:50"><name pos:start="3084:47" pos:end="3084:50">arg1</name></expr></argument>, <argument pos:start="3084:53" pos:end="3084:59"><expr pos:start="3084:53" pos:end="3084:59"><call pos:start="3084:53" pos:end="3084:59"><name pos:start="3084:53" pos:end="3084:56">path</name><argument_list pos:start="3084:57" pos:end="3084:59">(<argument pos:start="3084:58" pos:end="3084:58"><expr pos:start="3084:58" pos:end="3084:58"><name pos:start="3084:58" pos:end="3084:58">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3084:62" pos:end="3084:64"><expr pos:start="3084:62" pos:end="3084:64"><name pos:start="3084:62" pos:end="3084:64">tsp</name></expr></argument>, <argument pos:start="3084:67" pos:end="3084:70"><expr pos:start="3084:67" pos:end="3084:70"><name pos:start="3084:67" pos:end="3084:70">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3085:17" pos:end="3087:0"><expr pos:start="3085:17" pos:end="3085:39"><call pos:start="3085:17" pos:end="3085:39"><name pos:start="3085:17" pos:end="3085:27">unlock_user</name><argument_list pos:start="3085:28" pos:end="3085:39">(<argument pos:start="3085:29" pos:end="3085:29"><expr pos:start="3085:29" pos:end="3085:29"><name pos:start="3085:29" pos:end="3085:29">p</name></expr></argument>, <argument pos:start="3085:32" pos:end="3085:35"><expr pos:start="3085:32" pos:end="3085:35"><name pos:start="3085:32" pos:end="3085:35">arg2</name></expr></argument>, <argument pos:start="3085:38" pos:end="3085:38"><expr pos:start="3085:38" pos:end="3085:38"><literal type="number" pos:start="3085:38" pos:end="3085:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3086:1" pos:end="3086:6">#<cpp:directive pos:start="3086:2" pos:end="3086:6">endif</cpp:directive></cpp:endif>
    <case pos:start="3087:5" pos:end="3087:25">case <expr pos:start="3087:10" pos:end="3087:24"><name pos:start="3087:10" pos:end="3087:24">TARGET_NR_futex</name></expr>:</case>
        <expr_stmt pos:start="3088:9" pos:end="3090:0"><expr pos:start="3088:9" pos:end="3088:58"><name pos:start="3088:9" pos:end="3088:11">ret</name> <operator pos:start="3088:13" pos:end="3088:13">=</operator> <call pos:start="3088:15" pos:end="3088:58"><name pos:start="3088:15" pos:end="3088:22">do_futex</name><argument_list pos:start="3088:23" pos:end="3088:58">(<argument pos:start="3088:24" pos:end="3088:27"><expr pos:start="3088:24" pos:end="3088:27"><name pos:start="3088:24" pos:end="3088:27">arg1</name></expr></argument>, <argument pos:start="3088:30" pos:end="3088:33"><expr pos:start="3088:30" pos:end="3088:33"><name pos:start="3088:30" pos:end="3088:33">arg2</name></expr></argument>, <argument pos:start="3088:36" pos:end="3088:39"><expr pos:start="3088:36" pos:end="3088:39"><name pos:start="3088:36" pos:end="3088:39">arg3</name></expr></argument>, <argument pos:start="3088:42" pos:end="3088:45"><expr pos:start="3088:42" pos:end="3088:45"><name pos:start="3088:42" pos:end="3088:45">arg4</name></expr></argument>, <argument pos:start="3088:48" pos:end="3088:51"><expr pos:start="3088:48" pos:end="3088:51"><name pos:start="3088:48" pos:end="3088:51">arg5</name></expr></argument>, <argument pos:start="3088:54" pos:end="3088:57"><expr pos:start="3088:54" pos:end="3088:57"><name pos:start="3088:54" pos:end="3088:57">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="3089:1" pos:end="3089:65">#<cpp:directive pos:start="3089:2" pos:end="3089:3">if</cpp:directive> <expr pos:start="3089:5" pos:end="3089:65"><call pos:start="3089:5" pos:end="3089:35"><name pos:start="3089:5" pos:end="3089:11">defined</name><argument_list pos:start="3089:12" pos:end="3089:35">(<argument pos:start="3089:13" pos:end="3089:34"><expr pos:start="3089:13" pos:end="3089:34"><name pos:start="3089:13" pos:end="3089:34">TARGET_NR_inotify_init</name></expr></argument>)</argument_list></call> <operator pos:start="3089:37" pos:end="3089:38">&amp;&amp;</operator> <call pos:start="3089:40" pos:end="3089:65"><name pos:start="3089:40" pos:end="3089:46">defined</name><argument_list pos:start="3089:47" pos:end="3089:65">(<argument pos:start="3089:48" pos:end="3089:64"><expr pos:start="3089:48" pos:end="3089:64"><name pos:start="3089:48" pos:end="3089:64">__NR_inotify_init</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3090:5" pos:end="3090:32">case <expr pos:start="3090:10" pos:end="3090:31"><name pos:start="3090:10" pos:end="3090:31">TARGET_NR_inotify_init</name></expr>:</case>
        <expr_stmt pos:start="3091:9" pos:end="3095:0"><expr pos:start="3091:9" pos:end="3091:43"><name pos:start="3091:9" pos:end="3091:11">ret</name> <operator pos:start="3091:13" pos:end="3091:13">=</operator> <call pos:start="3091:15" pos:end="3091:43"><name pos:start="3091:15" pos:end="3091:23">get_errno</name><argument_list pos:start="3091:24" pos:end="3091:43">(<argument pos:start="3091:25" pos:end="3091:42"><expr pos:start="3091:25" pos:end="3091:42"><call pos:start="3091:25" pos:end="3091:42"><name pos:start="3091:25" pos:end="3091:40">sys_inotify_init</name><argument_list pos:start="3091:41" pos:end="3091:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3092:1" pos:end="3092:6">#<cpp:directive pos:start="3092:2" pos:end="3092:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3093:1" pos:end="3093:22">#<cpp:directive pos:start="3093:2" pos:end="3093:6">ifdef</cpp:directive> <name pos:start="3093:8" pos:end="3093:22">CONFIG_INOTIFY1</name></cpp:ifdef>
<cpp:if pos:start="3094:1" pos:end="3094:67">#<cpp:directive pos:start="3094:2" pos:end="3094:3">if</cpp:directive> <expr pos:start="3094:5" pos:end="3094:67"><call pos:start="3094:5" pos:end="3094:36"><name pos:start="3094:5" pos:end="3094:11">defined</name><argument_list pos:start="3094:12" pos:end="3094:36">(<argument pos:start="3094:13" pos:end="3094:35"><expr pos:start="3094:13" pos:end="3094:35"><name pos:start="3094:13" pos:end="3094:35">TARGET_NR_inotify_init1</name></expr></argument>)</argument_list></call> <operator pos:start="3094:38" pos:end="3094:39">&amp;&amp;</operator> <call pos:start="3094:41" pos:end="3094:67"><name pos:start="3094:41" pos:end="3094:47">defined</name><argument_list pos:start="3094:48" pos:end="3094:67">(<argument pos:start="3094:49" pos:end="3094:66"><expr pos:start="3094:49" pos:end="3094:66"><name pos:start="3094:49" pos:end="3094:66">__NR_inotify_init1</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3095:5" pos:end="3095:33">case <expr pos:start="3095:10" pos:end="3095:32"><name pos:start="3095:10" pos:end="3095:32">TARGET_NR_inotify_init1</name></expr>:</case>
        <expr_stmt pos:start="3096:9" pos:end="3100:0"><expr pos:start="3096:9" pos:end="3096:48"><name pos:start="3096:9" pos:end="3096:11">ret</name> <operator pos:start="3096:13" pos:end="3096:13">=</operator> <call pos:start="3096:15" pos:end="3096:48"><name pos:start="3096:15" pos:end="3096:23">get_errno</name><argument_list pos:start="3096:24" pos:end="3096:48">(<argument pos:start="3096:25" pos:end="3096:47"><expr pos:start="3096:25" pos:end="3096:47"><call pos:start="3096:25" pos:end="3096:47"><name pos:start="3096:25" pos:end="3096:41">sys_inotify_init1</name><argument_list pos:start="3096:42" pos:end="3096:47">(<argument pos:start="3096:43" pos:end="3096:46"><expr pos:start="3096:43" pos:end="3096:46"><name pos:start="3096:43" pos:end="3096:46">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3097:1" pos:end="3097:6">#<cpp:directive pos:start="3097:2" pos:end="3097:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3098:1" pos:end="3098:6">#<cpp:directive pos:start="3098:2" pos:end="3098:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3099:1" pos:end="3099:75">#<cpp:directive pos:start="3099:2" pos:end="3099:3">if</cpp:directive> <expr pos:start="3099:5" pos:end="3099:75"><call pos:start="3099:5" pos:end="3099:40"><name pos:start="3099:5" pos:end="3099:11">defined</name><argument_list pos:start="3099:12" pos:end="3099:40">(<argument pos:start="3099:13" pos:end="3099:39"><expr pos:start="3099:13" pos:end="3099:39"><name pos:start="3099:13" pos:end="3099:39">TARGET_NR_inotify_add_watch</name></expr></argument>)</argument_list></call> <operator pos:start="3099:42" pos:end="3099:43">&amp;&amp;</operator> <call pos:start="3099:45" pos:end="3099:75"><name pos:start="3099:45" pos:end="3099:51">defined</name><argument_list pos:start="3099:52" pos:end="3099:75">(<argument pos:start="3099:53" pos:end="3099:74"><expr pos:start="3099:53" pos:end="3099:74"><name pos:start="3099:53" pos:end="3099:74">__NR_inotify_add_watch</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3100:5" pos:end="3100:37">case <expr pos:start="3100:10" pos:end="3100:36"><name pos:start="3100:10" pos:end="3100:36">TARGET_NR_inotify_add_watch</name></expr>:</case>
        <expr_stmt pos:start="3101:9" pos:end="3101:35"><expr pos:start="3101:9" pos:end="3101:34"><name pos:start="3101:9" pos:end="3101:9">p</name> <operator pos:start="3101:11" pos:end="3101:11">=</operator> <call pos:start="3101:13" pos:end="3101:34"><name pos:start="3101:13" pos:end="3101:28">lock_user_string</name><argument_list pos:start="3101:29" pos:end="3101:34">(<argument pos:start="3101:30" pos:end="3101:33"><expr pos:start="3101:30" pos:end="3101:33"><name pos:start="3101:30" pos:end="3101:33">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3102:9" pos:end="3102:68"><expr pos:start="3102:9" pos:end="3102:67"><name pos:start="3102:9" pos:end="3102:11">ret</name> <operator pos:start="3102:13" pos:end="3102:13">=</operator> <call pos:start="3102:15" pos:end="3102:67"><name pos:start="3102:15" pos:end="3102:23">get_errno</name><argument_list pos:start="3102:24" pos:end="3102:67">(<argument pos:start="3102:25" pos:end="3102:66"><expr pos:start="3102:25" pos:end="3102:66"><call pos:start="3102:25" pos:end="3102:66"><name pos:start="3102:25" pos:end="3102:45">sys_inotify_add_watch</name><argument_list pos:start="3102:46" pos:end="3102:66">(<argument pos:start="3102:47" pos:end="3102:50"><expr pos:start="3102:47" pos:end="3102:50"><name pos:start="3102:47" pos:end="3102:50">arg1</name></expr></argument>, <argument pos:start="3102:53" pos:end="3102:59"><expr pos:start="3102:53" pos:end="3102:59"><call pos:start="3102:53" pos:end="3102:59"><name pos:start="3102:53" pos:end="3102:56">path</name><argument_list pos:start="3102:57" pos:end="3102:59">(<argument pos:start="3102:58" pos:end="3102:58"><expr pos:start="3102:58" pos:end="3102:58"><name pos:start="3102:58" pos:end="3102:58">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3102:62" pos:end="3102:65"><expr pos:start="3102:62" pos:end="3102:65"><name pos:start="3102:62" pos:end="3102:65">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3103:9" pos:end="3106:0"><expr pos:start="3103:9" pos:end="3103:31"><call pos:start="3103:9" pos:end="3103:31"><name pos:start="3103:9" pos:end="3103:19">unlock_user</name><argument_list pos:start="3103:20" pos:end="3103:31">(<argument pos:start="3103:21" pos:end="3103:21"><expr pos:start="3103:21" pos:end="3103:21"><name pos:start="3103:21" pos:end="3103:21">p</name></expr></argument>, <argument pos:start="3103:24" pos:end="3103:27"><expr pos:start="3103:24" pos:end="3103:27"><name pos:start="3103:24" pos:end="3103:27">arg2</name></expr></argument>, <argument pos:start="3103:30" pos:end="3103:30"><expr pos:start="3103:30" pos:end="3103:30"><literal type="number" pos:start="3103:30" pos:end="3103:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3104:1" pos:end="3104:6">#<cpp:directive pos:start="3104:2" pos:end="3104:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3105:1" pos:end="3105:73">#<cpp:directive pos:start="3105:2" pos:end="3105:3">if</cpp:directive> <expr pos:start="3105:5" pos:end="3105:73"><call pos:start="3105:5" pos:end="3105:39"><name pos:start="3105:5" pos:end="3105:11">defined</name><argument_list pos:start="3105:12" pos:end="3105:39">(<argument pos:start="3105:13" pos:end="3105:38"><expr pos:start="3105:13" pos:end="3105:38"><name pos:start="3105:13" pos:end="3105:38">TARGET_NR_inotify_rm_watch</name></expr></argument>)</argument_list></call> <operator pos:start="3105:41" pos:end="3105:42">&amp;&amp;</operator> <call pos:start="3105:44" pos:end="3105:73"><name pos:start="3105:44" pos:end="3105:50">defined</name><argument_list pos:start="3105:51" pos:end="3105:73">(<argument pos:start="3105:52" pos:end="3105:72"><expr pos:start="3105:52" pos:end="3105:72"><name pos:start="3105:52" pos:end="3105:72">__NR_inotify_rm_watch</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3106:5" pos:end="3106:36">case <expr pos:start="3106:10" pos:end="3106:35"><name pos:start="3106:10" pos:end="3106:35">TARGET_NR_inotify_rm_watch</name></expr>:</case>
        <expr_stmt pos:start="3107:9" pos:end="3110:0"><expr pos:start="3107:9" pos:end="3107:57"><name pos:start="3107:9" pos:end="3107:11">ret</name> <operator pos:start="3107:13" pos:end="3107:13">=</operator> <call pos:start="3107:15" pos:end="3107:57"><name pos:start="3107:15" pos:end="3107:23">get_errno</name><argument_list pos:start="3107:24" pos:end="3107:57">(<argument pos:start="3107:25" pos:end="3107:56"><expr pos:start="3107:25" pos:end="3107:56"><call pos:start="3107:25" pos:end="3107:56"><name pos:start="3107:25" pos:end="3107:44">sys_inotify_rm_watch</name><argument_list pos:start="3107:45" pos:end="3107:56">(<argument pos:start="3107:46" pos:end="3107:49"><expr pos:start="3107:46" pos:end="3107:49"><name pos:start="3107:46" pos:end="3107:49">arg1</name></expr></argument>, <argument pos:start="3107:52" pos:end="3107:55"><expr pos:start="3107:52" pos:end="3107:55"><name pos:start="3107:52" pos:end="3107:55">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3108:1" pos:end="3108:6">#<cpp:directive pos:start="3108:2" pos:end="3108:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3109:1" pos:end="3109:55">#<cpp:directive pos:start="3109:2" pos:end="3109:3">if</cpp:directive> <expr pos:start="3109:5" pos:end="3109:55"><call pos:start="3109:5" pos:end="3109:30"><name pos:start="3109:5" pos:end="3109:11">defined</name><argument_list pos:start="3109:12" pos:end="3109:30">(<argument pos:start="3109:13" pos:end="3109:29"><expr pos:start="3109:13" pos:end="3109:29"><name pos:start="3109:13" pos:end="3109:29">TARGET_NR_mq_open</name></expr></argument>)</argument_list></call> <operator pos:start="3109:32" pos:end="3109:33">&amp;&amp;</operator> <call pos:start="3109:35" pos:end="3109:55"><name pos:start="3109:35" pos:end="3109:41">defined</name><argument_list pos:start="3109:42" pos:end="3109:55">(<argument pos:start="3109:43" pos:end="3109:54"><expr pos:start="3109:43" pos:end="3109:54"><name pos:start="3109:43" pos:end="3109:54">__NR_mq_open</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3110:5" pos:end="3110:27">case <expr pos:start="3110:10" pos:end="3110:26"><name pos:start="3110:10" pos:end="3110:26">TARGET_NR_mq_open</name></expr>:</case>
        <block pos:start="3111:9" pos:end="3541:14">{<block_content pos:start="3112:13" pos:end="3541:14">
            <decl_stmt pos:start="3112:13" pos:end="3112:49"><decl pos:start="3112:13" pos:end="3112:40"><type pos:start="3112:13" pos:end="3112:26"><name pos:start="3112:13" pos:end="3112:26"><name pos:start="3112:13" pos:end="3112:18">struct</name> <name pos:start="3112:20" pos:end="3112:26">mq_attr</name></name></type> <name pos:start="3112:28" pos:end="3112:40">posix_mq_attr</name></decl>, <decl pos:start="3112:43" pos:end="3112:48"><type ref="prev" pos:start="3112:13" pos:end="3112:26"><modifier pos:start="3112:43" pos:end="3112:43">*</modifier></type><name pos:start="3112:44" pos:end="3112:48">attrp</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3113:13" pos:end="3113:43"><expr pos:start="3113:13" pos:end="3113:42"><name pos:start="3113:13" pos:end="3113:13">p</name> <operator pos:start="3113:15" pos:end="3113:15">=</operator> <call pos:start="3113:17" pos:end="3113:42"><name pos:start="3113:17" pos:end="3113:32">lock_user_string</name><argument_list pos:start="3113:33" pos:end="3113:42">(<argument pos:start="3113:34" pos:end="3113:41"><expr pos:start="3113:34" pos:end="3113:41"><name pos:start="3113:34" pos:end="3113:37">arg1</name> <operator pos:start="3113:39" pos:end="3113:39">-</operator> <literal type="number" pos:start="3113:41" pos:end="3113:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3114:13" pos:end="3541:14"><if pos:start="3114:13" pos:end="3117:13">if <condition pos:start="3114:16" pos:end="3114:26">(<expr pos:start="3114:17" pos:end="3114:25"><name pos:start="3114:17" pos:end="3114:20">arg4</name> <operator pos:start="3114:22" pos:end="3114:23">!=</operator> <literal type="number" pos:start="3114:25" pos:end="3114:25">0</literal></expr>)</condition> <block pos:start="3114:28" pos:end="3117:13">{<block_content pos:start="3115:17" pos:end="3116:39">
                <expr_stmt pos:start="3115:17" pos:end="3115:62"><expr pos:start="3115:17" pos:end="3115:61"><call pos:start="3115:17" pos:end="3115:61"><name pos:start="3115:17" pos:end="3115:38">copy_from_user_mq_attr</name> <argument_list pos:start="3115:40" pos:end="3115:61">(<argument pos:start="3115:41" pos:end="3115:54"><expr pos:start="3115:41" pos:end="3115:54"><operator pos:start="3115:41" pos:end="3115:41">&amp;</operator><name pos:start="3115:42" pos:end="3115:54">posix_mq_attr</name></expr></argument>, <argument pos:start="3115:57" pos:end="3115:60"><expr pos:start="3115:57" pos:end="3115:60"><name pos:start="3115:57" pos:end="3115:60">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3116:17" pos:end="3116:39"><expr pos:start="3116:17" pos:end="3116:38"><name pos:start="3116:17" pos:end="3116:21">attrp</name> <operator pos:start="3116:23" pos:end="3116:23">=</operator> <operator pos:start="3116:25" pos:end="3116:25">&amp;</operator><name pos:start="3116:26" pos:end="3116:38">posix_mq_attr</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3117:15" pos:end="3541:14">else <block pos:start="3117:20" pos:end="3541:14">{<block_content pos:start="3118:17" pos:end="3541:14">
                <expr_stmt pos:start="3118:17" pos:end="3118:26"><expr pos:start="3118:17" pos:end="3118:25"><name pos:start="3118:17" pos:end="3118:21">attrp</name> <operator pos:start="3118:23" pos:end="3118:23">=</operator> <literal type="number" pos:start="3118:25" pos:end="3118:25">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3119:13" pos:end="3119:59"><expr pos:start="3119:13" pos:end="3119:58"><name pos:start="3119:13" pos:end="3119:15">ret</name> <operator pos:start="3119:17" pos:end="3119:17">=</operator> <call pos:start="3119:19" pos:end="3119:58"><name pos:start="3119:19" pos:end="3119:27">get_errno</name><argument_list pos:start="3119:28" pos:end="3119:58">(<argument pos:start="3119:29" pos:end="3119:57"><expr pos:start="3119:29" pos:end="3119:57"><call pos:start="3119:29" pos:end="3119:57"><name pos:start="3119:29" pos:end="3119:35">mq_open</name><argument_list pos:start="3119:36" pos:end="3119:57">(<argument pos:start="3119:37" pos:end="3119:37"><expr pos:start="3119:37" pos:end="3119:37"><name pos:start="3119:37" pos:end="3119:37">p</name></expr></argument>, <argument pos:start="3119:40" pos:end="3119:43"><expr pos:start="3119:40" pos:end="3119:43"><name pos:start="3119:40" pos:end="3119:43">arg2</name></expr></argument>, <argument pos:start="3119:46" pos:end="3119:49"><expr pos:start="3119:46" pos:end="3119:49"><name pos:start="3119:46" pos:end="3119:49">arg3</name></expr></argument>, <argument pos:start="3119:52" pos:end="3119:56"><expr pos:start="3119:52" pos:end="3119:56"><name pos:start="3119:52" pos:end="3119:56">attrp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3120:13" pos:end="3120:37"><expr pos:start="3120:13" pos:end="3120:36"><call pos:start="3120:13" pos:end="3120:36"><name pos:start="3120:13" pos:end="3120:23">unlock_user</name> <argument_list pos:start="3120:25" pos:end="3120:36">(<argument pos:start="3120:26" pos:end="3120:26"><expr pos:start="3120:26" pos:end="3120:26"><name pos:start="3120:26" pos:end="3120:26">p</name></expr></argument>, <argument pos:start="3120:29" pos:end="3120:32"><expr pos:start="3120:29" pos:end="3120:32"><name pos:start="3120:29" pos:end="3120:32">arg1</name></expr></argument>, <argument pos:start="3120:35" pos:end="3120:35"><expr pos:start="3120:35" pos:end="3120:35"><literal type="number" pos:start="3120:35" pos:end="3120:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="3121:5" pos:end="3121:29">case <expr pos:start="3121:10" pos:end="3121:28"><name pos:start="3121:10" pos:end="3121:28">TARGET_NR_mq_unlink</name></expr>:</case>
        <expr_stmt pos:start="3122:9" pos:end="3122:39"><expr pos:start="3122:9" pos:end="3122:38"><name pos:start="3122:9" pos:end="3122:9">p</name> <operator pos:start="3122:11" pos:end="3122:11">=</operator> <call pos:start="3122:13" pos:end="3122:38"><name pos:start="3122:13" pos:end="3122:28">lock_user_string</name><argument_list pos:start="3122:29" pos:end="3122:38">(<argument pos:start="3122:30" pos:end="3122:37"><expr pos:start="3122:30" pos:end="3122:37"><name pos:start="3122:30" pos:end="3122:33">arg1</name> <operator pos:start="3122:35" pos:end="3122:35">-</operator> <literal type="number" pos:start="3122:37" pos:end="3122:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3123:9" pos:end="3123:38"><expr pos:start="3123:9" pos:end="3123:37"><name pos:start="3123:9" pos:end="3123:11">ret</name> <operator pos:start="3123:13" pos:end="3123:13">=</operator> <call pos:start="3123:15" pos:end="3123:37"><name pos:start="3123:15" pos:end="3123:23">get_errno</name><argument_list pos:start="3123:24" pos:end="3123:37">(<argument pos:start="3123:25" pos:end="3123:36"><expr pos:start="3123:25" pos:end="3123:36"><call pos:start="3123:25" pos:end="3123:36"><name pos:start="3123:25" pos:end="3123:33">mq_unlink</name><argument_list pos:start="3123:34" pos:end="3123:36">(<argument pos:start="3123:35" pos:end="3123:35"><expr pos:start="3123:35" pos:end="3123:35"><name pos:start="3123:35" pos:end="3123:35">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3124:9" pos:end="3124:33"><expr pos:start="3124:9" pos:end="3124:32"><call pos:start="3124:9" pos:end="3124:32"><name pos:start="3124:9" pos:end="3124:19">unlock_user</name> <argument_list pos:start="3124:21" pos:end="3124:32">(<argument pos:start="3124:22" pos:end="3124:22"><expr pos:start="3124:22" pos:end="3124:22"><name pos:start="3124:22" pos:end="3124:22">p</name></expr></argument>, <argument pos:start="3124:25" pos:end="3124:28"><expr pos:start="3124:25" pos:end="3124:28"><name pos:start="3124:25" pos:end="3124:28">arg1</name></expr></argument>, <argument pos:start="3124:31" pos:end="3124:31"><expr pos:start="3124:31" pos:end="3124:31"><literal type="number" pos:start="3124:31" pos:end="3124:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="3125:5" pos:end="3125:32">case <expr pos:start="3125:10" pos:end="3125:31"><name pos:start="3125:10" pos:end="3125:31">TARGET_NR_mq_timedsend</name></expr>:</case>
        <block pos:start="3126:9" pos:end="3541:14">{<block_content pos:start="3127:13" pos:end="3541:14">
            <decl_stmt pos:start="3127:13" pos:end="3127:31"><decl pos:start="3127:13" pos:end="3127:30"><type pos:start="3127:13" pos:end="3127:27"><name pos:start="3127:13" pos:end="3127:27"><name pos:start="3127:13" pos:end="3127:18">struct</name> <name pos:start="3127:20" pos:end="3127:27">timespec</name></name></type> <name pos:start="3127:29" pos:end="3127:30">ts</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3128:13" pos:end="3128:55"><expr pos:start="3128:13" pos:end="3128:54"><name pos:start="3128:13" pos:end="3128:13">p</name> <operator pos:start="3128:15" pos:end="3128:15">=</operator> <call pos:start="3128:17" pos:end="3128:54"><name pos:start="3128:17" pos:end="3128:25">lock_user</name> <argument_list pos:start="3128:27" pos:end="3128:54">(<argument pos:start="3128:28" pos:end="3128:38"><expr pos:start="3128:28" pos:end="3128:38"><name pos:start="3128:28" pos:end="3128:38">VERIFY_READ</name></expr></argument>, <argument pos:start="3128:41" pos:end="3128:44"><expr pos:start="3128:41" pos:end="3128:44"><name pos:start="3128:41" pos:end="3128:44">arg2</name></expr></argument>, <argument pos:start="3128:47" pos:end="3128:50"><expr pos:start="3128:47" pos:end="3128:50"><name pos:start="3128:47" pos:end="3128:50">arg3</name></expr></argument>, <argument pos:start="3128:53" pos:end="3128:53"><expr pos:start="3128:53" pos:end="3128:53"><literal type="number" pos:start="3128:53" pos:end="3128:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3129:13" pos:end="3541:14"><if pos:start="3129:13" pos:end="3133:13">if <condition pos:start="3129:16" pos:end="3129:26">(<expr pos:start="3129:17" pos:end="3129:25"><name pos:start="3129:17" pos:end="3129:20">arg5</name> <operator pos:start="3129:22" pos:end="3129:23">!=</operator> <literal type="number" pos:start="3129:25" pos:end="3129:25">0</literal></expr>)</condition> <block pos:start="3129:28" pos:end="3133:13">{<block_content pos:start="3130:17" pos:end="3132:51">
                <expr_stmt pos:start="3130:17" pos:end="3130:51"><expr pos:start="3130:17" pos:end="3130:50"><call pos:start="3130:17" pos:end="3130:50"><name pos:start="3130:17" pos:end="3130:39">target_to_host_timespec</name><argument_list pos:start="3130:40" pos:end="3130:50">(<argument pos:start="3130:41" pos:end="3130:43"><expr pos:start="3130:41" pos:end="3130:43"><operator pos:start="3130:41" pos:end="3130:41">&amp;</operator><name pos:start="3130:42" pos:end="3130:43">ts</name></expr></argument>, <argument pos:start="3130:46" pos:end="3130:49"><expr pos:start="3130:46" pos:end="3130:49"><name pos:start="3130:46" pos:end="3130:49">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3131:17" pos:end="3131:77"><expr pos:start="3131:17" pos:end="3131:76"><name pos:start="3131:17" pos:end="3131:19">ret</name> <operator pos:start="3131:21" pos:end="3131:21">=</operator> <call pos:start="3131:23" pos:end="3131:76"><name pos:start="3131:23" pos:end="3131:31">get_errno</name><argument_list pos:start="3131:32" pos:end="3131:76">(<argument pos:start="3131:33" pos:end="3131:75"><expr pos:start="3131:33" pos:end="3131:75"><call pos:start="3131:33" pos:end="3131:75"><name pos:start="3131:33" pos:end="3131:49">safe_mq_timedsend</name><argument_list pos:start="3131:50" pos:end="3131:75">(<argument pos:start="3131:51" pos:end="3131:54"><expr pos:start="3131:51" pos:end="3131:54"><name pos:start="3131:51" pos:end="3131:54">arg1</name></expr></argument>, <argument pos:start="3131:57" pos:end="3131:57"><expr pos:start="3131:57" pos:end="3131:57"><name pos:start="3131:57" pos:end="3131:57">p</name></expr></argument>, <argument pos:start="3131:60" pos:end="3131:63"><expr pos:start="3131:60" pos:end="3131:63"><name pos:start="3131:60" pos:end="3131:63">arg3</name></expr></argument>, <argument pos:start="3131:66" pos:end="3131:69"><expr pos:start="3131:66" pos:end="3131:69"><name pos:start="3131:66" pos:end="3131:69">arg4</name></expr></argument>, <argument pos:start="3131:72" pos:end="3131:74"><expr pos:start="3131:72" pos:end="3131:74"><operator pos:start="3131:72" pos:end="3131:72">&amp;</operator><name pos:start="3131:73" pos:end="3131:74">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3132:17" pos:end="3132:51"><expr pos:start="3132:17" pos:end="3132:50"><call pos:start="3132:17" pos:end="3132:50"><name pos:start="3132:17" pos:end="3132:39">host_to_target_timespec</name><argument_list pos:start="3132:40" pos:end="3132:50">(<argument pos:start="3132:41" pos:end="3132:44"><expr pos:start="3132:41" pos:end="3132:44"><name pos:start="3132:41" pos:end="3132:44">arg5</name></expr></argument>, <argument pos:start="3132:47" pos:end="3132:49"><expr pos:start="3132:47" pos:end="3132:49"><operator pos:start="3132:47" pos:end="3132:47">&amp;</operator><name pos:start="3132:48" pos:end="3132:49">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3133:15" pos:end="3541:14">else <block pos:start="3133:20" pos:end="3541:14">{<block_content pos:start="3134:17" pos:end="3541:14">
                <expr_stmt pos:start="3134:17" pos:end="3134:78"><expr pos:start="3134:17" pos:end="3134:77"><name pos:start="3134:17" pos:end="3134:19">ret</name> <operator pos:start="3134:21" pos:end="3134:21">=</operator> <call pos:start="3134:23" pos:end="3134:77"><name pos:start="3134:23" pos:end="3134:31">get_errno</name><argument_list pos:start="3134:32" pos:end="3134:77">(<argument pos:start="3134:33" pos:end="3134:76"><expr pos:start="3134:33" pos:end="3134:76"><call pos:start="3134:33" pos:end="3134:76"><name pos:start="3134:33" pos:end="3134:49">safe_mq_timedsend</name><argument_list pos:start="3134:50" pos:end="3134:76">(<argument pos:start="3134:51" pos:end="3134:54"><expr pos:start="3134:51" pos:end="3134:54"><name pos:start="3134:51" pos:end="3134:54">arg1</name></expr></argument>, <argument pos:start="3134:57" pos:end="3134:57"><expr pos:start="3134:57" pos:end="3134:57"><name pos:start="3134:57" pos:end="3134:57">p</name></expr></argument>, <argument pos:start="3134:60" pos:end="3134:63"><expr pos:start="3134:60" pos:end="3134:63"><name pos:start="3134:60" pos:end="3134:63">arg3</name></expr></argument>, <argument pos:start="3134:66" pos:end="3134:69"><expr pos:start="3134:66" pos:end="3134:69"><name pos:start="3134:66" pos:end="3134:69">arg4</name></expr></argument>, <argument pos:start="3134:72" pos:end="3134:75"><expr pos:start="3134:72" pos:end="3134:75"><name pos:start="3134:72" pos:end="3134:75">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3135:13" pos:end="3135:40"><expr pos:start="3135:13" pos:end="3135:39"><call pos:start="3135:13" pos:end="3135:39"><name pos:start="3135:13" pos:end="3135:23">unlock_user</name> <argument_list pos:start="3135:25" pos:end="3135:39">(<argument pos:start="3135:26" pos:end="3135:26"><expr pos:start="3135:26" pos:end="3135:26"><name pos:start="3135:26" pos:end="3135:26">p</name></expr></argument>, <argument pos:start="3135:29" pos:end="3135:32"><expr pos:start="3135:29" pos:end="3135:32"><name pos:start="3135:29" pos:end="3135:32">arg2</name></expr></argument>, <argument pos:start="3135:35" pos:end="3135:38"><expr pos:start="3135:35" pos:end="3135:38"><name pos:start="3135:35" pos:end="3135:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="3136:5" pos:end="3136:35">case <expr pos:start="3136:10" pos:end="3136:34"><name pos:start="3136:10" pos:end="3136:34">TARGET_NR_mq_timedreceive</name></expr>:</case>
        <block pos:start="3137:9" pos:end="3541:14">{<block_content pos:start="3138:13" pos:end="3541:14">
            <decl_stmt pos:start="3138:13" pos:end="3138:31"><decl pos:start="3138:13" pos:end="3138:30"><type pos:start="3138:13" pos:end="3138:27"><name pos:start="3138:13" pos:end="3138:27"><name pos:start="3138:13" pos:end="3138:18">struct</name> <name pos:start="3138:20" pos:end="3138:27">timespec</name></name></type> <name pos:start="3138:29" pos:end="3138:30">ts</name></decl>;</decl_stmt>
            <decl_stmt pos:start="3139:13" pos:end="3139:30"><decl pos:start="3139:13" pos:end="3139:29"><type pos:start="3139:13" pos:end="3139:24"><name pos:start="3139:13" pos:end="3139:20">unsigned</name> <name pos:start="3139:22" pos:end="3139:24">int</name></type> <name pos:start="3139:26" pos:end="3139:29">prio</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3140:13" pos:end="3140:55"><expr pos:start="3140:13" pos:end="3140:54"><name pos:start="3140:13" pos:end="3140:13">p</name> <operator pos:start="3140:15" pos:end="3140:15">=</operator> <call pos:start="3140:17" pos:end="3140:54"><name pos:start="3140:17" pos:end="3140:25">lock_user</name> <argument_list pos:start="3140:27" pos:end="3140:54">(<argument pos:start="3140:28" pos:end="3140:38"><expr pos:start="3140:28" pos:end="3140:38"><name pos:start="3140:28" pos:end="3140:38">VERIFY_READ</name></expr></argument>, <argument pos:start="3140:41" pos:end="3140:44"><expr pos:start="3140:41" pos:end="3140:44"><name pos:start="3140:41" pos:end="3140:44">arg2</name></expr></argument>, <argument pos:start="3140:47" pos:end="3140:50"><expr pos:start="3140:47" pos:end="3140:50"><name pos:start="3140:47" pos:end="3140:50">arg3</name></expr></argument>, <argument pos:start="3140:53" pos:end="3140:53"><expr pos:start="3140:53" pos:end="3140:53"><literal type="number" pos:start="3140:53" pos:end="3140:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3141:13" pos:end="3541:14"><if pos:start="3141:13" pos:end="3146:13">if <condition pos:start="3141:16" pos:end="3141:26">(<expr pos:start="3141:17" pos:end="3141:25"><name pos:start="3141:17" pos:end="3141:20">arg5</name> <operator pos:start="3141:22" pos:end="3141:23">!=</operator> <literal type="number" pos:start="3141:25" pos:end="3141:25">0</literal></expr>)</condition> <block pos:start="3141:28" pos:end="3146:13">{<block_content pos:start="3142:17" pos:end="3145:51">
                <expr_stmt pos:start="3142:17" pos:end="3142:51"><expr pos:start="3142:17" pos:end="3142:50"><call pos:start="3142:17" pos:end="3142:50"><name pos:start="3142:17" pos:end="3142:39">target_to_host_timespec</name><argument_list pos:start="3142:40" pos:end="3142:50">(<argument pos:start="3142:41" pos:end="3142:43"><expr pos:start="3142:41" pos:end="3142:43"><operator pos:start="3142:41" pos:end="3142:41">&amp;</operator><name pos:start="3142:42" pos:end="3142:43">ts</name></expr></argument>, <argument pos:start="3142:46" pos:end="3142:49"><expr pos:start="3142:46" pos:end="3142:49"><name pos:start="3142:46" pos:end="3142:49">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3143:17" pos:end="3144:66"><expr pos:start="3143:17" pos:end="3144:65"><name pos:start="3143:17" pos:end="3143:19">ret</name> <operator pos:start="3143:21" pos:end="3143:21">=</operator> <call pos:start="3143:23" pos:end="3144:65"><name pos:start="3143:23" pos:end="3143:31">get_errno</name><argument_list pos:start="3143:32" pos:end="3144:65">(<argument pos:start="3143:33" pos:end="3144:64"><expr pos:start="3143:33" pos:end="3144:64"><call pos:start="3143:33" pos:end="3144:64"><name pos:start="3143:33" pos:end="3143:52">safe_mq_timedreceive</name><argument_list pos:start="3143:53" pos:end="3144:64">(<argument pos:start="3143:54" pos:end="3143:57"><expr pos:start="3143:54" pos:end="3143:57"><name pos:start="3143:54" pos:end="3143:57">arg1</name></expr></argument>, <argument pos:start="3143:60" pos:end="3143:60"><expr pos:start="3143:60" pos:end="3143:60"><name pos:start="3143:60" pos:end="3143:60">p</name></expr></argument>, <argument pos:start="3143:63" pos:end="3143:66"><expr pos:start="3143:63" pos:end="3143:66"><name pos:start="3143:63" pos:end="3143:66">arg3</name></expr></argument>,
                                                     <argument pos:start="3144:54" pos:end="3144:58"><expr pos:start="3144:54" pos:end="3144:58"><operator pos:start="3144:54" pos:end="3144:54">&amp;</operator><name pos:start="3144:55" pos:end="3144:58">prio</name></expr></argument>, <argument pos:start="3144:61" pos:end="3144:63"><expr pos:start="3144:61" pos:end="3144:63"><operator pos:start="3144:61" pos:end="3144:61">&amp;</operator><name pos:start="3144:62" pos:end="3144:63">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3145:17" pos:end="3145:51"><expr pos:start="3145:17" pos:end="3145:50"><call pos:start="3145:17" pos:end="3145:50"><name pos:start="3145:17" pos:end="3145:39">host_to_target_timespec</name><argument_list pos:start="3145:40" pos:end="3145:50">(<argument pos:start="3145:41" pos:end="3145:44"><expr pos:start="3145:41" pos:end="3145:44"><name pos:start="3145:41" pos:end="3145:44">arg5</name></expr></argument>, <argument pos:start="3145:47" pos:end="3145:49"><expr pos:start="3145:47" pos:end="3145:49"><operator pos:start="3145:47" pos:end="3145:47">&amp;</operator><name pos:start="3145:48" pos:end="3145:49">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3146:15" pos:end="3541:14">else <block pos:start="3146:20" pos:end="3541:14">{<block_content pos:start="3147:17" pos:end="3541:14">
                <expr_stmt pos:start="3147:17" pos:end="3148:67"><expr pos:start="3147:17" pos:end="3148:66"><name pos:start="3147:17" pos:end="3147:19">ret</name> <operator pos:start="3147:21" pos:end="3147:21">=</operator> <call pos:start="3147:23" pos:end="3148:66"><name pos:start="3147:23" pos:end="3147:31">get_errno</name><argument_list pos:start="3147:32" pos:end="3148:66">(<argument pos:start="3147:33" pos:end="3148:65"><expr pos:start="3147:33" pos:end="3148:65"><call pos:start="3147:33" pos:end="3148:65"><name pos:start="3147:33" pos:end="3147:52">safe_mq_timedreceive</name><argument_list pos:start="3147:53" pos:end="3148:65">(<argument pos:start="3147:54" pos:end="3147:57"><expr pos:start="3147:54" pos:end="3147:57"><name pos:start="3147:54" pos:end="3147:57">arg1</name></expr></argument>, <argument pos:start="3147:60" pos:end="3147:60"><expr pos:start="3147:60" pos:end="3147:60"><name pos:start="3147:60" pos:end="3147:60">p</name></expr></argument>, <argument pos:start="3147:63" pos:end="3147:66"><expr pos:start="3147:63" pos:end="3147:66"><name pos:start="3147:63" pos:end="3147:66">arg3</name></expr></argument>,
                                                     <argument pos:start="3148:54" pos:end="3148:58"><expr pos:start="3148:54" pos:end="3148:58"><operator pos:start="3148:54" pos:end="3148:54">&amp;</operator><name pos:start="3148:55" pos:end="3148:58">prio</name></expr></argument>, <argument pos:start="3148:61" pos:end="3148:64"><expr pos:start="3148:61" pos:end="3148:64"><name pos:start="3148:61" pos:end="3148:64">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3149:13" pos:end="3149:40"><expr pos:start="3149:13" pos:end="3149:39"><call pos:start="3149:13" pos:end="3149:39"><name pos:start="3149:13" pos:end="3149:23">unlock_user</name> <argument_list pos:start="3149:25" pos:end="3149:39">(<argument pos:start="3149:26" pos:end="3149:26"><expr pos:start="3149:26" pos:end="3149:26"><name pos:start="3149:26" pos:end="3149:26">p</name></expr></argument>, <argument pos:start="3149:29" pos:end="3149:32"><expr pos:start="3149:29" pos:end="3149:32"><name pos:start="3149:29" pos:end="3149:32">arg2</name></expr></argument>, <argument pos:start="3149:35" pos:end="3149:38"><expr pos:start="3149:35" pos:end="3149:38"><name pos:start="3149:35" pos:end="3149:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3150:13" pos:end="3151:41"><if pos:start="3150:13" pos:end="3151:41">if <condition pos:start="3150:16" pos:end="3150:26">(<expr pos:start="3150:17" pos:end="3150:25"><name pos:start="3150:17" pos:end="3150:20">arg4</name> <operator pos:start="3150:22" pos:end="3150:23">!=</operator> <literal type="number" pos:start="3150:25" pos:end="3150:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3151:17" pos:end="3151:41"><block_content pos:start="3151:17" pos:end="3151:41">
                <expr_stmt pos:start="3151:17" pos:end="3151:41"><expr pos:start="3151:17" pos:end="3151:40"><call pos:start="3151:17" pos:end="3151:40"><name pos:start="3151:17" pos:end="3151:28">put_user_u32</name><argument_list pos:start="3151:29" pos:end="3151:40">(<argument pos:start="3151:30" pos:end="3151:33"><expr pos:start="3151:30" pos:end="3151:33"><name pos:start="3151:30" pos:end="3151:33">prio</name></expr></argument>, <argument pos:start="3151:36" pos:end="3151:39"><expr pos:start="3151:36" pos:end="3151:39"><name pos:start="3151:36" pos:end="3151:39">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="3152:5" pos:end="3152:36">/* Not implemented for now... */</comment>
<comment type="block" pos:start="3153:1" pos:end="3153:35">/*     case TARGET_NR_mq_notify: */</comment>
<comment type="block" pos:start="3154:1" pos:end="3154:20">/*         break; */</comment>
    <case pos:start="3155:5" pos:end="3155:33">case <expr pos:start="3155:10" pos:end="3155:32"><name pos:start="3155:10" pos:end="3155:32">TARGET_NR_mq_getsetattr</name></expr>:</case>
        <block pos:start="3156:9" pos:end="3541:14">{<block_content pos:start="3157:13" pos:end="3541:14">
            <decl_stmt pos:start="3157:13" pos:end="3157:63"><decl pos:start="3157:13" pos:end="3157:43"><type pos:start="3157:13" pos:end="3157:26"><name pos:start="3157:13" pos:end="3157:26"><name pos:start="3157:13" pos:end="3157:18">struct</name> <name pos:start="3157:20" pos:end="3157:26">mq_attr</name></name></type> <name pos:start="3157:28" pos:end="3157:43">posix_mq_attr_in</name></decl>, <decl pos:start="3157:46" pos:end="3157:62"><type ref="prev" pos:start="3157:13" pos:end="3157:26"/><name pos:start="3157:46" pos:end="3157:62">posix_mq_attr_out</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3158:13" pos:end="3158:20"><expr pos:start="3158:13" pos:end="3158:19"><name pos:start="3158:13" pos:end="3158:15">ret</name> <operator pos:start="3158:17" pos:end="3158:17">=</operator> <literal type="number" pos:start="3158:19" pos:end="3158:19">0</literal></expr>;</expr_stmt>
            <if_stmt pos:start="3159:13" pos:end="3541:14"><if pos:start="3159:13" pos:end="3541:14">if <condition pos:start="3159:16" pos:end="3159:26">(<expr pos:start="3159:17" pos:end="3159:25"><name pos:start="3159:17" pos:end="3159:20">arg3</name> <operator pos:start="3159:22" pos:end="3159:23">!=</operator> <literal type="number" pos:start="3159:25" pos:end="3159:25">0</literal></expr>)</condition> <block pos:start="3159:28" pos:end="3541:14">{<block_content pos:start="3160:17" pos:end="3541:14">
                <expr_stmt pos:start="3160:17" pos:end="3160:59"><expr pos:start="3160:17" pos:end="3160:58"><name pos:start="3160:17" pos:end="3160:19">ret</name> <operator pos:start="3160:21" pos:end="3160:21">=</operator> <call pos:start="3160:23" pos:end="3160:58"><name pos:start="3160:23" pos:end="3160:32">mq_getattr</name><argument_list pos:start="3160:33" pos:end="3160:58">(<argument pos:start="3160:34" pos:end="3160:37"><expr pos:start="3160:34" pos:end="3160:37"><name pos:start="3160:34" pos:end="3160:37">arg1</name></expr></argument>, <argument pos:start="3160:40" pos:end="3160:57"><expr pos:start="3160:40" pos:end="3160:57"><operator pos:start="3160:40" pos:end="3160:40">&amp;</operator><name pos:start="3160:41" pos:end="3160:57">posix_mq_attr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3161:17" pos:end="3161:63"><expr pos:start="3161:17" pos:end="3161:62"><call pos:start="3161:17" pos:end="3161:62"><name pos:start="3161:17" pos:end="3161:36">copy_to_user_mq_attr</name><argument_list pos:start="3161:37" pos:end="3161:62">(<argument pos:start="3161:38" pos:end="3161:41"><expr pos:start="3161:38" pos:end="3161:41"><name pos:start="3161:38" pos:end="3161:41">arg3</name></expr></argument>, <argument pos:start="3161:44" pos:end="3161:61"><expr pos:start="3161:44" pos:end="3161:61"><operator pos:start="3161:44" pos:end="3161:44">&amp;</operator><name pos:start="3161:45" pos:end="3161:61">posix_mq_attr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3162:13" pos:end="3541:14"><if pos:start="3162:13" pos:end="3541:14">if <condition pos:start="3162:16" pos:end="3162:26">(<expr pos:start="3162:17" pos:end="3162:25"><name pos:start="3162:17" pos:end="3162:20">arg2</name> <operator pos:start="3162:22" pos:end="3162:23">!=</operator> <literal type="number" pos:start="3162:25" pos:end="3162:25">0</literal></expr>)</condition> <block pos:start="3162:28" pos:end="3541:14">{<block_content pos:start="3163:17" pos:end="3541:14">
                <expr_stmt pos:start="3163:17" pos:end="3163:64"><expr pos:start="3163:17" pos:end="3163:63"><call pos:start="3163:17" pos:end="3163:63"><name pos:start="3163:17" pos:end="3163:38">copy_from_user_mq_attr</name><argument_list pos:start="3163:39" pos:end="3163:63">(<argument pos:start="3163:40" pos:end="3163:56"><expr pos:start="3163:40" pos:end="3163:56"><operator pos:start="3163:40" pos:end="3163:40">&amp;</operator><name pos:start="3163:41" pos:end="3163:56">posix_mq_attr_in</name></expr></argument>, <argument pos:start="3163:59" pos:end="3163:62"><expr pos:start="3163:59" pos:end="3163:62"><name pos:start="3163:59" pos:end="3163:62">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3164:17" pos:end="3168:0"><expr pos:start="3164:17" pos:end="3164:78"><name pos:start="3164:17" pos:end="3164:19">ret</name> <operator pos:start="3164:21" pos:end="3164:22">|=</operator> <call pos:start="3164:24" pos:end="3164:78"><name pos:start="3164:24" pos:end="3164:33">mq_setattr</name><argument_list pos:start="3164:34" pos:end="3164:78">(<argument pos:start="3164:35" pos:end="3164:38"><expr pos:start="3164:35" pos:end="3164:38"><name pos:start="3164:35" pos:end="3164:38">arg1</name></expr></argument>, <argument pos:start="3164:41" pos:end="3164:57"><expr pos:start="3164:41" pos:end="3164:57"><operator pos:start="3164:41" pos:end="3164:41">&amp;</operator><name pos:start="3164:42" pos:end="3164:57">posix_mq_attr_in</name></expr></argument>, <argument pos:start="3164:60" pos:end="3164:77"><expr pos:start="3164:60" pos:end="3164:77"><operator pos:start="3164:60" pos:end="3164:60">&amp;</operator><name pos:start="3164:61" pos:end="3164:77">posix_mq_attr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3165:1" pos:end="3165:6">#<cpp:directive pos:start="3165:2" pos:end="3165:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3166:1" pos:end="3166:20">#<cpp:directive pos:start="3166:2" pos:end="3166:6">ifdef</cpp:directive> <name pos:start="3166:8" pos:end="3166:20">CONFIG_SPLICE</name></cpp:ifdef>
<cpp:ifdef pos:start="3167:1" pos:end="3167:20">#<cpp:directive pos:start="3167:2" pos:end="3167:6">ifdef</cpp:directive> <name pos:start="3167:8" pos:end="3167:20">TARGET_NR_tee</name></cpp:ifdef>
    <case pos:start="3168:5" pos:end="3168:23">case <expr pos:start="3168:10" pos:end="3168:22"><name pos:start="3168:10" pos:end="3168:22">TARGET_NR_tee</name></expr>:</case>
        <block pos:start="3169:9" pos:end="3541:14">{<block_content pos:start="3170:13" pos:end="3541:14">
            <expr_stmt pos:start="3170:13" pos:end="3173:0"><expr pos:start="3170:13" pos:end="3170:53"><name pos:start="3170:13" pos:end="3170:15">ret</name> <operator pos:start="3170:17" pos:end="3170:17">=</operator> <call pos:start="3170:19" pos:end="3170:53"><name pos:start="3170:19" pos:end="3170:27">get_errno</name><argument_list pos:start="3170:28" pos:end="3170:53">(<argument pos:start="3170:29" pos:end="3170:52"><expr pos:start="3170:29" pos:end="3170:52"><call pos:start="3170:29" pos:end="3170:52"><name pos:start="3170:29" pos:end="3170:31">tee</name><argument_list pos:start="3170:32" pos:end="3170:52">(<argument pos:start="3170:33" pos:end="3170:36"><expr pos:start="3170:33" pos:end="3170:36"><name pos:start="3170:33" pos:end="3170:36">arg1</name></expr></argument>,<argument pos:start="3170:38" pos:end="3170:41"><expr pos:start="3170:38" pos:end="3170:41"><name pos:start="3170:38" pos:end="3170:41">arg2</name></expr></argument>,<argument pos:start="3170:43" pos:end="3170:46"><expr pos:start="3170:43" pos:end="3170:46"><name pos:start="3170:43" pos:end="3170:46">arg3</name></expr></argument>,<argument pos:start="3170:48" pos:end="3170:51"><expr pos:start="3170:48" pos:end="3170:51"><name pos:start="3170:48" pos:end="3170:51">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3171:1" pos:end="3171:6">#<cpp:directive pos:start="3171:2" pos:end="3171:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3172:1" pos:end="3172:23">#<cpp:directive pos:start="3172:2" pos:end="3172:6">ifdef</cpp:directive> <name pos:start="3172:8" pos:end="3172:23">TARGET_NR_splice</name></cpp:ifdef>
    <case pos:start="3173:5" pos:end="3173:26">case <expr pos:start="3173:10" pos:end="3173:25"><name pos:start="3173:10" pos:end="3173:25">TARGET_NR_splice</name></expr>:</case>
        <block pos:start="3174:9" pos:end="3541:14">{<block_content pos:start="3175:13" pos:end="3541:14">
            <decl_stmt pos:start="3175:13" pos:end="3175:37"><decl pos:start="3175:13" pos:end="3175:26"><type pos:start="3175:13" pos:end="3175:18"><name pos:start="3175:13" pos:end="3175:18">loff_t</name></type> <name pos:start="3175:20" pos:end="3175:26">loff_in</name></decl>, <decl pos:start="3175:29" pos:end="3175:36"><type ref="prev" pos:start="3175:13" pos:end="3175:18"/><name pos:start="3175:29" pos:end="3175:36">loff_out</name></decl>;</decl_stmt>
            <decl_stmt pos:start="3176:13" pos:end="3176:55"><decl pos:start="3176:13" pos:end="3176:35"><type pos:start="3176:13" pos:end="3176:20"><name pos:start="3176:13" pos:end="3176:18">loff_t</name> <modifier pos:start="3176:20" pos:end="3176:20">*</modifier></type><name pos:start="3176:21" pos:end="3176:28">ploff_in</name> <init pos:start="3176:30" pos:end="3176:35">= <expr pos:start="3176:32" pos:end="3176:35"><name pos:start="3176:32" pos:end="3176:35">NULL</name></expr></init></decl>, <decl pos:start="3176:38" pos:end="3176:54"><type ref="prev" pos:start="3176:13" pos:end="3176:20"><modifier pos:start="3176:38" pos:end="3176:38">*</modifier></type><name pos:start="3176:39" pos:end="3176:47">ploff_out</name> <init pos:start="3176:49" pos:end="3176:54">= <expr pos:start="3176:51" pos:end="3176:54"><name pos:start="3176:51" pos:end="3176:54">NULL</name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="3177:13" pos:end="3541:14"><if pos:start="3177:13" pos:end="3541:14">if <condition pos:start="3177:16" pos:end="3177:21">(<expr pos:start="3177:17" pos:end="3177:20"><name pos:start="3177:17" pos:end="3177:20">arg2</name></expr>)</condition> <block pos:start="3177:23" pos:end="3541:14">{<block_content pos:start="3178:17" pos:end="3541:14">
                <if_stmt pos:start="3178:17" pos:end="3541:14"><if pos:start="3178:17" pos:end="3541:14">if <condition pos:start="3178:20" pos:end="3178:48">(<expr pos:start="3178:21" pos:end="3178:47"><call pos:start="3178:21" pos:end="3178:47"><name pos:start="3178:21" pos:end="3178:32">get_user_u64</name><argument_list pos:start="3178:33" pos:end="3178:47">(<argument pos:start="3178:34" pos:end="3178:40"><expr pos:start="3178:34" pos:end="3178:40"><name pos:start="3178:34" pos:end="3178:40">loff_in</name></expr></argument>, <argument pos:start="3178:43" pos:end="3178:46"><expr pos:start="3178:43" pos:end="3178:46"><name pos:start="3178:43" pos:end="3178:46">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3178:50" pos:end="3541:14">{<block_content pos:start="3179:21" pos:end="3541:14">
                    <goto pos:start="3179:21" pos:end="3179:32">goto <name pos:start="3179:26" pos:end="3179:31">efault</name>;</goto>
                <expr_stmt pos:start="3180:17" pos:end="3180:36"><expr pos:start="3180:17" pos:end="3180:35"><name pos:start="3180:17" pos:end="3180:24">ploff_in</name> <operator pos:start="3180:26" pos:end="3180:26">=</operator> <operator pos:start="3180:28" pos:end="3180:28">&amp;</operator><name pos:start="3180:29" pos:end="3180:35">loff_in</name></expr>;</expr_stmt>
            <if_stmt pos:start="3181:13" pos:end="3541:14"><if pos:start="3181:13" pos:end="3541:14">if <condition pos:start="3181:16" pos:end="3181:21">(<expr pos:start="3181:17" pos:end="3181:20"><name pos:start="3181:17" pos:end="3181:20">arg4</name></expr>)</condition> <block pos:start="3181:23" pos:end="3541:14">{<block_content pos:start="3182:17" pos:end="3541:14">
                <if_stmt pos:start="3182:17" pos:end="3541:14"><if pos:start="3182:17" pos:end="3541:14">if <condition pos:start="3182:20" pos:end="3182:49">(<expr pos:start="3182:21" pos:end="3182:48"><call pos:start="3182:21" pos:end="3182:48"><name pos:start="3182:21" pos:end="3182:32">get_user_u64</name><argument_list pos:start="3182:33" pos:end="3182:48">(<argument pos:start="3182:34" pos:end="3182:41"><expr pos:start="3182:34" pos:end="3182:41"><name pos:start="3182:34" pos:end="3182:41">loff_out</name></expr></argument>, <argument pos:start="3182:44" pos:end="3182:47"><expr pos:start="3182:44" pos:end="3182:47"><name pos:start="3182:44" pos:end="3182:47">arg4</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3182:51" pos:end="3541:14">{<block_content pos:start="3183:21" pos:end="3541:14">
                    <goto pos:start="3183:21" pos:end="3183:32">goto <name pos:start="3183:26" pos:end="3183:31">efault</name>;</goto>
                <expr_stmt pos:start="3184:17" pos:end="3184:38"><expr pos:start="3184:17" pos:end="3184:37"><name pos:start="3184:17" pos:end="3184:25">ploff_out</name> <operator pos:start="3184:27" pos:end="3184:27">=</operator> <operator pos:start="3184:29" pos:end="3184:29">&amp;</operator><name pos:start="3184:30" pos:end="3184:37">loff_out</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3185:13" pos:end="3185:81"><expr pos:start="3185:13" pos:end="3185:80"><name pos:start="3185:13" pos:end="3185:15">ret</name> <operator pos:start="3185:17" pos:end="3185:17">=</operator> <call pos:start="3185:19" pos:end="3185:80"><name pos:start="3185:19" pos:end="3185:27">get_errno</name><argument_list pos:start="3185:28" pos:end="3185:80">(<argument pos:start="3185:29" pos:end="3185:79"><expr pos:start="3185:29" pos:end="3185:79"><call pos:start="3185:29" pos:end="3185:79"><name pos:start="3185:29" pos:end="3185:34">splice</name><argument_list pos:start="3185:35" pos:end="3185:79">(<argument pos:start="3185:36" pos:end="3185:39"><expr pos:start="3185:36" pos:end="3185:39"><name pos:start="3185:36" pos:end="3185:39">arg1</name></expr></argument>, <argument pos:start="3185:42" pos:end="3185:49"><expr pos:start="3185:42" pos:end="3185:49"><name pos:start="3185:42" pos:end="3185:49">ploff_in</name></expr></argument>, <argument pos:start="3185:52" pos:end="3185:55"><expr pos:start="3185:52" pos:end="3185:55"><name pos:start="3185:52" pos:end="3185:55">arg3</name></expr></argument>, <argument pos:start="3185:58" pos:end="3185:66"><expr pos:start="3185:58" pos:end="3185:66"><name pos:start="3185:58" pos:end="3185:66">ploff_out</name></expr></argument>, <argument pos:start="3185:69" pos:end="3185:72"><expr pos:start="3185:69" pos:end="3185:72"><name pos:start="3185:69" pos:end="3185:72">arg5</name></expr></argument>, <argument pos:start="3185:75" pos:end="3185:78"><expr pos:start="3185:75" pos:end="3185:78"><name pos:start="3185:75" pos:end="3185:78">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3186:13" pos:end="3541:14"><if pos:start="3186:13" pos:end="3541:14">if <condition pos:start="3186:16" pos:end="3186:21">(<expr pos:start="3186:17" pos:end="3186:20"><name pos:start="3186:17" pos:end="3186:20">arg2</name></expr>)</condition> <block pos:start="3186:23" pos:end="3541:14">{<block_content pos:start="3187:17" pos:end="3541:14">
                <if_stmt pos:start="3187:17" pos:end="3541:14"><if pos:start="3187:17" pos:end="3541:14">if <condition pos:start="3187:20" pos:end="3187:48">(<expr pos:start="3187:21" pos:end="3187:47"><call pos:start="3187:21" pos:end="3187:47"><name pos:start="3187:21" pos:end="3187:32">put_user_u64</name><argument_list pos:start="3187:33" pos:end="3187:47">(<argument pos:start="3187:34" pos:end="3187:40"><expr pos:start="3187:34" pos:end="3187:40"><name pos:start="3187:34" pos:end="3187:40">loff_in</name></expr></argument>, <argument pos:start="3187:43" pos:end="3187:46"><expr pos:start="3187:43" pos:end="3187:46"><name pos:start="3187:43" pos:end="3187:46">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3187:50" pos:end="3541:14">{<block_content pos:start="3188:21" pos:end="3541:14">
                    <goto pos:start="3188:21" pos:end="3188:32">goto <name pos:start="3188:26" pos:end="3188:31">efault</name>;</goto>
            <if_stmt pos:start="3189:13" pos:end="3541:14"><if pos:start="3189:13" pos:end="3541:14">if <condition pos:start="3189:16" pos:end="3189:21">(<expr pos:start="3189:17" pos:end="3189:20"><name pos:start="3189:17" pos:end="3189:20">arg4</name></expr>)</condition> <block pos:start="3189:23" pos:end="3541:14">{<block_content pos:start="3190:17" pos:end="3541:14">
                <if_stmt pos:start="3190:17" pos:end="3541:14"><if pos:start="3190:17" pos:end="3541:14">if <condition pos:start="3190:20" pos:end="3190:49">(<expr pos:start="3190:21" pos:end="3190:48"><call pos:start="3190:21" pos:end="3190:48"><name pos:start="3190:21" pos:end="3190:32">put_user_u64</name><argument_list pos:start="3190:33" pos:end="3190:48">(<argument pos:start="3190:34" pos:end="3190:41"><expr pos:start="3190:34" pos:end="3190:41"><name pos:start="3190:34" pos:end="3190:41">loff_out</name></expr></argument>, <argument pos:start="3190:44" pos:end="3190:47"><expr pos:start="3190:44" pos:end="3190:47"><name pos:start="3190:44" pos:end="3190:47">arg4</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3190:51" pos:end="3541:14">{<block_content pos:start="3191:21" pos:end="3541:14">
                    <goto pos:start="3191:21" pos:end="3194:0">goto <name pos:start="3191:26" pos:end="3191:31">efault</name>;</goto>
<cpp:endif pos:start="3192:1" pos:end="3192:6">#<cpp:directive pos:start="3192:2" pos:end="3192:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3193:1" pos:end="3193:25">#<cpp:directive pos:start="3193:2" pos:end="3193:6">ifdef</cpp:directive> <name pos:start="3193:8" pos:end="3193:25">TARGET_NR_vmsplice</name></cpp:ifdef>
	<case pos:start="3194:9" pos:end="3194:32">case <expr pos:start="3194:14" pos:end="3194:31"><name pos:start="3194:14" pos:end="3194:31">TARGET_NR_vmsplice</name></expr>:</case>
        <block pos:start="3195:9" pos:end="3541:14">{<block_content pos:start="3196:13" pos:end="3541:14">
            <decl_stmt pos:start="3196:13" pos:end="3196:71"><decl pos:start="3196:13" pos:end="3196:70"><type pos:start="3196:13" pos:end="3196:26"><name pos:start="3196:13" pos:end="3196:24"><name pos:start="3196:13" pos:end="3196:18">struct</name> <name pos:start="3196:20" pos:end="3196:24">iovec</name></name> <modifier pos:start="3196:26" pos:end="3196:26">*</modifier></type><name pos:start="3196:27" pos:end="3196:29">vec</name> <init pos:start="3196:31" pos:end="3196:70">= <expr pos:start="3196:33" pos:end="3196:70"><call pos:start="3196:33" pos:end="3196:70"><name pos:start="3196:33" pos:end="3196:42">lock_iovec</name><argument_list pos:start="3196:43" pos:end="3196:70">(<argument pos:start="3196:44" pos:end="3196:54"><expr pos:start="3196:44" pos:end="3196:54"><name pos:start="3196:44" pos:end="3196:54">VERIFY_READ</name></expr></argument>, <argument pos:start="3196:57" pos:end="3196:60"><expr pos:start="3196:57" pos:end="3196:60"><name pos:start="3196:57" pos:end="3196:60">arg2</name></expr></argument>, <argument pos:start="3196:63" pos:end="3196:66"><expr pos:start="3196:63" pos:end="3196:66"><name pos:start="3196:63" pos:end="3196:66">arg3</name></expr></argument>, <argument pos:start="3196:69" pos:end="3196:69"><expr pos:start="3196:69" pos:end="3196:69"><literal type="number" pos:start="3196:69" pos:end="3196:69">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="3197:13" pos:end="3541:14"><if pos:start="3197:13" pos:end="3200:13">if <condition pos:start="3197:16" pos:end="3197:28">(<expr pos:start="3197:17" pos:end="3197:27"><name pos:start="3197:17" pos:end="3197:19">vec</name> <operator pos:start="3197:21" pos:end="3197:22">!=</operator> <name pos:start="3197:24" pos:end="3197:27">NULL</name></expr>)</condition> <block pos:start="3197:30" pos:end="3200:13">{<block_content pos:start="3198:17" pos:end="3199:49">
                <expr_stmt pos:start="3198:17" pos:end="3198:65"><expr pos:start="3198:17" pos:end="3198:64"><name pos:start="3198:17" pos:end="3198:19">ret</name> <operator pos:start="3198:21" pos:end="3198:21">=</operator> <call pos:start="3198:23" pos:end="3198:64"><name pos:start="3198:23" pos:end="3198:31">get_errno</name><argument_list pos:start="3198:32" pos:end="3198:64">(<argument pos:start="3198:33" pos:end="3198:63"><expr pos:start="3198:33" pos:end="3198:63"><call pos:start="3198:33" pos:end="3198:63"><name pos:start="3198:33" pos:end="3198:40">vmsplice</name><argument_list pos:start="3198:41" pos:end="3198:63">(<argument pos:start="3198:42" pos:end="3198:45"><expr pos:start="3198:42" pos:end="3198:45"><name pos:start="3198:42" pos:end="3198:45">arg1</name></expr></argument>, <argument pos:start="3198:48" pos:end="3198:50"><expr pos:start="3198:48" pos:end="3198:50"><name pos:start="3198:48" pos:end="3198:50">vec</name></expr></argument>, <argument pos:start="3198:53" pos:end="3198:56"><expr pos:start="3198:53" pos:end="3198:56"><name pos:start="3198:53" pos:end="3198:56">arg3</name></expr></argument>, <argument pos:start="3198:59" pos:end="3198:62"><expr pos:start="3198:59" pos:end="3198:62"><name pos:start="3198:59" pos:end="3198:62">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3199:17" pos:end="3199:49"><expr pos:start="3199:17" pos:end="3199:48"><call pos:start="3199:17" pos:end="3199:48"><name pos:start="3199:17" pos:end="3199:28">unlock_iovec</name><argument_list pos:start="3199:29" pos:end="3199:48">(<argument pos:start="3199:30" pos:end="3199:32"><expr pos:start="3199:30" pos:end="3199:32"><name pos:start="3199:30" pos:end="3199:32">vec</name></expr></argument>, <argument pos:start="3199:35" pos:end="3199:38"><expr pos:start="3199:35" pos:end="3199:38"><name pos:start="3199:35" pos:end="3199:38">arg2</name></expr></argument>, <argument pos:start="3199:41" pos:end="3199:44"><expr pos:start="3199:41" pos:end="3199:44"><name pos:start="3199:41" pos:end="3199:44">arg3</name></expr></argument>, <argument pos:start="3199:47" pos:end="3199:47"><expr pos:start="3199:47" pos:end="3199:47"><literal type="number" pos:start="3199:47" pos:end="3199:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3200:15" pos:end="3541:14">else <block pos:start="3200:20" pos:end="3541:14">{<block_content pos:start="3201:17" pos:end="3541:14">
                <expr_stmt pos:start="3201:17" pos:end="3206:0"><expr pos:start="3201:17" pos:end="3201:50"><name pos:start="3201:17" pos:end="3201:19">ret</name> <operator pos:start="3201:21" pos:end="3201:21">=</operator> <operator pos:start="3201:23" pos:end="3201:23">-</operator><call pos:start="3201:24" pos:end="3201:50"><name pos:start="3201:24" pos:end="3201:43">host_to_target_errno</name><argument_list pos:start="3201:44" pos:end="3201:50">(<argument pos:start="3201:45" pos:end="3201:49"><expr pos:start="3201:45" pos:end="3201:49"><name pos:start="3201:45" pos:end="3201:49">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3202:1" pos:end="3202:6">#<cpp:directive pos:start="3202:2" pos:end="3202:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3203:1" pos:end="3203:6">#<cpp:directive pos:start="3203:2" pos:end="3203:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="3203:8" pos:end="3203:26">/* CONFIG_SPLICE */</comment>
<cpp:ifdef pos:start="3204:1" pos:end="3204:21">#<cpp:directive pos:start="3204:2" pos:end="3204:6">ifdef</cpp:directive> <name pos:start="3204:8" pos:end="3204:21">CONFIG_EVENTFD</name></cpp:ifdef>
<cpp:if pos:start="3205:1" pos:end="3205:30">#<cpp:directive pos:start="3205:2" pos:end="3205:3">if</cpp:directive> <expr pos:start="3205:5" pos:end="3205:30"><call pos:start="3205:5" pos:end="3205:30"><name pos:start="3205:5" pos:end="3205:11">defined</name><argument_list pos:start="3205:12" pos:end="3205:30">(<argument pos:start="3205:13" pos:end="3205:29"><expr pos:start="3205:13" pos:end="3205:29"><name pos:start="3205:13" pos:end="3205:29">TARGET_NR_eventfd</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3206:5" pos:end="3206:27">case <expr pos:start="3206:10" pos:end="3206:26"><name pos:start="3206:10" pos:end="3206:26">TARGET_NR_eventfd</name></expr>:</case>
        <expr_stmt pos:start="3207:9" pos:end="3207:42"><expr pos:start="3207:9" pos:end="3207:41"><name pos:start="3207:9" pos:end="3207:11">ret</name> <operator pos:start="3207:13" pos:end="3207:13">=</operator> <call pos:start="3207:15" pos:end="3207:41"><name pos:start="3207:15" pos:end="3207:23">get_errno</name><argument_list pos:start="3207:24" pos:end="3207:41">(<argument pos:start="3207:25" pos:end="3207:40"><expr pos:start="3207:25" pos:end="3207:40"><call pos:start="3207:25" pos:end="3207:40"><name pos:start="3207:25" pos:end="3207:31">eventfd</name><argument_list pos:start="3207:32" pos:end="3207:40">(<argument pos:start="3207:33" pos:end="3207:36"><expr pos:start="3207:33" pos:end="3207:36"><name pos:start="3207:33" pos:end="3207:36">arg1</name></expr></argument>, <argument pos:start="3207:39" pos:end="3207:39"><expr pos:start="3207:39" pos:end="3207:39"><literal type="number" pos:start="3207:39" pos:end="3207:39">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3208:9" pos:end="3211:0"><expr pos:start="3208:9" pos:end="3208:32"><call pos:start="3208:9" pos:end="3208:32"><name pos:start="3208:9" pos:end="3208:27">fd_trans_unregister</name><argument_list pos:start="3208:28" pos:end="3208:32">(<argument pos:start="3208:29" pos:end="3208:31"><expr pos:start="3208:29" pos:end="3208:31"><name pos:start="3208:29" pos:end="3208:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3209:1" pos:end="3209:6">#<cpp:directive pos:start="3209:2" pos:end="3209:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3210:1" pos:end="3210:31">#<cpp:directive pos:start="3210:2" pos:end="3210:3">if</cpp:directive> <expr pos:start="3210:5" pos:end="3210:31"><call pos:start="3210:5" pos:end="3210:31"><name pos:start="3210:5" pos:end="3210:11">defined</name><argument_list pos:start="3210:12" pos:end="3210:31">(<argument pos:start="3210:13" pos:end="3210:30"><expr pos:start="3210:13" pos:end="3210:30"><name pos:start="3210:13" pos:end="3210:30">TARGET_NR_eventfd2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3211:5" pos:end="3211:28">case <expr pos:start="3211:10" pos:end="3211:27"><name pos:start="3211:10" pos:end="3211:27">TARGET_NR_eventfd2</name></expr>:</case>
    <block pos:start="3212:5" pos:end="3541:14">{<block_content pos:start="3213:9" pos:end="3541:14">
        <decl_stmt pos:start="3213:9" pos:end="3213:74"><decl pos:start="3213:9" pos:end="3213:73"><type pos:start="3213:9" pos:end="3213:11"><name pos:start="3213:9" pos:end="3213:11">int</name></type> <name pos:start="3213:13" pos:end="3213:22">host_flags</name> <init pos:start="3213:24" pos:end="3213:73">= <expr pos:start="3213:26" pos:end="3213:73"><name pos:start="3213:26" pos:end="3213:29">arg2</name> <operator pos:start="3213:31" pos:end="3213:31">&amp;</operator> <operator pos:start="3213:33" pos:end="3213:33">(</operator><operator pos:start="3213:34" pos:end="3213:34">~</operator><operator pos:start="3213:35" pos:end="3213:35">(</operator><name pos:start="3213:36" pos:end="3213:52">TARGET_O_NONBLOCK</name> <operator pos:start="3213:54" pos:end="3213:54">|</operator> <name pos:start="3213:56" pos:end="3213:71">TARGET_O_CLOEXEC</name><operator pos:start="3213:72" pos:end="3213:72">)</operator><operator pos:start="3213:73" pos:end="3213:73">)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3214:9" pos:end="3541:14"><if pos:start="3214:9" pos:end="3541:14">if <condition pos:start="3214:12" pos:end="3214:37">(<expr pos:start="3214:13" pos:end="3214:36"><name pos:start="3214:13" pos:end="3214:16">arg2</name> <operator pos:start="3214:18" pos:end="3214:18">&amp;</operator> <name pos:start="3214:20" pos:end="3214:36">TARGET_O_NONBLOCK</name></expr>)</condition> <block pos:start="3214:39" pos:end="3541:14">{<block_content pos:start="3215:13" pos:end="3541:14">
            <expr_stmt pos:start="3215:13" pos:end="3215:37"><expr pos:start="3215:13" pos:end="3215:36"><name pos:start="3215:13" pos:end="3215:22">host_flags</name> <operator pos:start="3215:24" pos:end="3215:25">|=</operator> <name pos:start="3215:27" pos:end="3215:36">O_NONBLOCK</name></expr>;</expr_stmt>
        <if_stmt pos:start="3216:9" pos:end="3541:14"><if pos:start="3216:9" pos:end="3541:14">if <condition pos:start="3216:12" pos:end="3216:36">(<expr pos:start="3216:13" pos:end="3216:35"><name pos:start="3216:13" pos:end="3216:16">arg2</name> <operator pos:start="3216:18" pos:end="3216:18">&amp;</operator> <name pos:start="3216:20" pos:end="3216:35">TARGET_O_CLOEXEC</name></expr>)</condition> <block pos:start="3216:38" pos:end="3541:14">{<block_content pos:start="3217:13" pos:end="3541:14">
            <expr_stmt pos:start="3217:13" pos:end="3217:36"><expr pos:start="3217:13" pos:end="3217:35"><name pos:start="3217:13" pos:end="3217:22">host_flags</name> <operator pos:start="3217:24" pos:end="3217:25">|=</operator> <name pos:start="3217:27" pos:end="3217:35">O_CLOEXEC</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3218:9" pos:end="3218:51"><expr pos:start="3218:9" pos:end="3218:50"><name pos:start="3218:9" pos:end="3218:11">ret</name> <operator pos:start="3218:13" pos:end="3218:13">=</operator> <call pos:start="3218:15" pos:end="3218:50"><name pos:start="3218:15" pos:end="3218:23">get_errno</name><argument_list pos:start="3218:24" pos:end="3218:50">(<argument pos:start="3218:25" pos:end="3218:49"><expr pos:start="3218:25" pos:end="3218:49"><call pos:start="3218:25" pos:end="3218:49"><name pos:start="3218:25" pos:end="3218:31">eventfd</name><argument_list pos:start="3218:32" pos:end="3218:49">(<argument pos:start="3218:33" pos:end="3218:36"><expr pos:start="3218:33" pos:end="3218:36"><name pos:start="3218:33" pos:end="3218:36">arg1</name></expr></argument>, <argument pos:start="3218:39" pos:end="3218:48"><expr pos:start="3218:39" pos:end="3218:48"><name pos:start="3218:39" pos:end="3218:48">host_flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3219:9" pos:end="3223:0"><expr pos:start="3219:9" pos:end="3219:32"><call pos:start="3219:9" pos:end="3219:32"><name pos:start="3219:9" pos:end="3219:27">fd_trans_unregister</name><argument_list pos:start="3219:28" pos:end="3219:32">(<argument pos:start="3219:29" pos:end="3219:31"><expr pos:start="3219:29" pos:end="3219:31"><name pos:start="3219:29" pos:end="3219:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3220:1" pos:end="3220:6">#<cpp:directive pos:start="3220:2" pos:end="3220:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3221:1" pos:end="3221:6">#<cpp:directive pos:start="3221:2" pos:end="3221:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="3221:8" pos:end="3221:28">/* CONFIG_EVENTFD  */</comment>
<cpp:if pos:start="3222:1" pos:end="3222:61">#<cpp:directive pos:start="3222:2" pos:end="3222:3">if</cpp:directive> <expr pos:start="3222:5" pos:end="3222:61"><call pos:start="3222:5" pos:end="3222:29"><name pos:start="3222:5" pos:end="3222:11">defined</name><argument_list pos:start="3222:12" pos:end="3222:29">(<argument pos:start="3222:13" pos:end="3222:28"><expr pos:start="3222:13" pos:end="3222:28"><name pos:start="3222:13" pos:end="3222:28">CONFIG_FALLOCATE</name></expr></argument>)</argument_list></call> <operator pos:start="3222:31" pos:end="3222:32">&amp;&amp;</operator> <call pos:start="3222:34" pos:end="3222:61"><name pos:start="3222:34" pos:end="3222:40">defined</name><argument_list pos:start="3222:41" pos:end="3222:61">(<argument pos:start="3222:42" pos:end="3222:60"><expr pos:start="3222:42" pos:end="3222:60"><name pos:start="3222:42" pos:end="3222:60">TARGET_NR_fallocate</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3223:5" pos:end="3225:0">case <expr pos:start="3223:10" pos:end="3223:28"><name pos:start="3223:10" pos:end="3223:28">TARGET_NR_fallocate</name></expr>:</case>
<cpp:if pos:start="3224:1" pos:end="3224:25">#<cpp:directive pos:start="3224:2" pos:end="3224:3">if</cpp:directive> <expr pos:start="3224:5" pos:end="3224:25"><name pos:start="3224:5" pos:end="3224:19">TARGET_ABI_BITS</name> <operator pos:start="3224:21" pos:end="3224:22">==</operator> <literal type="number" pos:start="3224:24" pos:end="3224:25">32</literal></expr></cpp:if>
        <expr_stmt pos:start="3225:9" pos:end="3228:0"><expr pos:start="3225:9" pos:end="3226:63"><name pos:start="3225:9" pos:end="3225:11">ret</name> <operator pos:start="3225:13" pos:end="3225:13">=</operator> <call pos:start="3225:15" pos:end="3226:63"><name pos:start="3225:15" pos:end="3225:23">get_errno</name><argument_list pos:start="3225:24" pos:end="3226:63">(<argument pos:start="3225:25" pos:end="3226:62"><expr pos:start="3225:25" pos:end="3226:62"><call pos:start="3225:25" pos:end="3226:62"><name pos:start="3225:25" pos:end="3225:33">fallocate</name><argument_list pos:start="3225:34" pos:end="3226:62">(<argument pos:start="3225:35" pos:end="3225:38"><expr pos:start="3225:35" pos:end="3225:38"><name pos:start="3225:35" pos:end="3225:38">arg1</name></expr></argument>, <argument pos:start="3225:41" pos:end="3225:44"><expr pos:start="3225:41" pos:end="3225:44"><name pos:start="3225:41" pos:end="3225:44">arg2</name></expr></argument>, <argument pos:start="3225:47" pos:end="3225:73"><expr pos:start="3225:47" pos:end="3225:73"><call pos:start="3225:47" pos:end="3225:73"><name pos:start="3225:47" pos:end="3225:61">target_offset64</name><argument_list pos:start="3225:62" pos:end="3225:73">(<argument pos:start="3225:63" pos:end="3225:66"><expr pos:start="3225:63" pos:end="3225:66"><name pos:start="3225:63" pos:end="3225:66">arg3</name></expr></argument>, <argument pos:start="3225:69" pos:end="3225:72"><expr pos:start="3225:69" pos:end="3225:72"><name pos:start="3225:69" pos:end="3225:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument pos:start="3226:35" pos:end="3226:61"><expr pos:start="3226:35" pos:end="3226:61"><call pos:start="3226:35" pos:end="3226:61"><name pos:start="3226:35" pos:end="3226:49">target_offset64</name><argument_list pos:start="3226:50" pos:end="3226:61">(<argument pos:start="3226:51" pos:end="3226:54"><expr pos:start="3226:51" pos:end="3226:54"><name pos:start="3226:51" pos:end="3226:54">arg5</name></expr></argument>, <argument pos:start="3226:57" pos:end="3226:60"><expr pos:start="3226:57" pos:end="3226:60"><name pos:start="3226:57" pos:end="3226:60">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="3227:1" pos:end="3227:5">#<cpp:directive pos:start="3227:2" pos:end="3227:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="3228:9" pos:end="3233:0"><expr pos:start="3228:9" pos:end="3228:58"><name pos:start="3228:9" pos:end="3228:11">ret</name> <operator pos:start="3228:13" pos:end="3228:13">=</operator> <call pos:start="3228:15" pos:end="3228:58"><name pos:start="3228:15" pos:end="3228:23">get_errno</name><argument_list pos:start="3228:24" pos:end="3228:58">(<argument pos:start="3228:25" pos:end="3228:57"><expr pos:start="3228:25" pos:end="3228:57"><call pos:start="3228:25" pos:end="3228:57"><name pos:start="3228:25" pos:end="3228:33">fallocate</name><argument_list pos:start="3228:34" pos:end="3228:57">(<argument pos:start="3228:35" pos:end="3228:38"><expr pos:start="3228:35" pos:end="3228:38"><name pos:start="3228:35" pos:end="3228:38">arg1</name></expr></argument>, <argument pos:start="3228:41" pos:end="3228:44"><expr pos:start="3228:41" pos:end="3228:44"><name pos:start="3228:41" pos:end="3228:44">arg2</name></expr></argument>, <argument pos:start="3228:47" pos:end="3228:50"><expr pos:start="3228:47" pos:end="3228:50"><name pos:start="3228:47" pos:end="3228:50">arg3</name></expr></argument>, <argument pos:start="3228:53" pos:end="3228:56"><expr pos:start="3228:53" pos:end="3228:56"><name pos:start="3228:53" pos:end="3228:56">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3229:1" pos:end="3229:6">#<cpp:directive pos:start="3229:2" pos:end="3229:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3230:1" pos:end="3230:6">#<cpp:directive pos:start="3230:2" pos:end="3230:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3231:1" pos:end="3231:35">#<cpp:directive pos:start="3231:2" pos:end="3231:3">if</cpp:directive> <expr pos:start="3231:5" pos:end="3231:35"><call pos:start="3231:5" pos:end="3231:35"><name pos:start="3231:5" pos:end="3231:11">defined</name><argument_list pos:start="3231:12" pos:end="3231:35">(<argument pos:start="3231:13" pos:end="3231:34"><expr pos:start="3231:13" pos:end="3231:34"><name pos:start="3231:13" pos:end="3231:34">CONFIG_SYNC_FILE_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if pos:start="3232:1" pos:end="3232:38">#<cpp:directive pos:start="3232:2" pos:end="3232:3">if</cpp:directive> <expr pos:start="3232:5" pos:end="3232:38"><call pos:start="3232:5" pos:end="3232:38"><name pos:start="3232:5" pos:end="3232:11">defined</name><argument_list pos:start="3232:12" pos:end="3232:38">(<argument pos:start="3232:13" pos:end="3232:37"><expr pos:start="3232:13" pos:end="3232:37"><name pos:start="3232:13" pos:end="3232:37">TARGET_NR_sync_file_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3233:5" pos:end="3236:0">case <expr pos:start="3233:10" pos:end="3233:34"><name pos:start="3233:10" pos:end="3233:34">TARGET_NR_sync_file_range</name></expr>:</case>
<cpp:if pos:start="3234:1" pos:end="3234:25">#<cpp:directive pos:start="3234:2" pos:end="3234:3">if</cpp:directive> <expr pos:start="3234:5" pos:end="3234:25"><name pos:start="3234:5" pos:end="3234:19">TARGET_ABI_BITS</name> <operator pos:start="3234:21" pos:end="3234:22">==</operator> <literal type="number" pos:start="3234:24" pos:end="3234:25">32</literal></expr></cpp:if>
<cpp:if pos:start="3235:1" pos:end="3235:24">#<cpp:directive pos:start="3235:2" pos:end="3235:3">if</cpp:directive> <expr pos:start="3235:5" pos:end="3235:24"><call pos:start="3235:5" pos:end="3235:24"><name pos:start="3235:5" pos:end="3235:11">defined</name><argument_list pos:start="3235:12" pos:end="3235:24">(<argument pos:start="3235:13" pos:end="3235:23"><expr pos:start="3235:13" pos:end="3235:23"><name pos:start="3235:13" pos:end="3235:23">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt pos:start="3236:9" pos:end="3239:0"><expr pos:start="3236:9" pos:end="3237:75"><name pos:start="3236:9" pos:end="3236:11">ret</name> <operator pos:start="3236:13" pos:end="3236:13">=</operator> <call pos:start="3236:15" pos:end="3237:75"><name pos:start="3236:15" pos:end="3236:23">get_errno</name><argument_list pos:start="3236:24" pos:end="3237:75">(<argument pos:start="3236:25" pos:end="3237:74"><expr pos:start="3236:25" pos:end="3237:74"><call pos:start="3236:25" pos:end="3237:74"><name pos:start="3236:25" pos:end="3236:39">sync_file_range</name><argument_list pos:start="3236:40" pos:end="3237:74">(<argument pos:start="3236:41" pos:end="3236:44"><expr pos:start="3236:41" pos:end="3236:44"><name pos:start="3236:41" pos:end="3236:44">arg1</name></expr></argument>, <argument pos:start="3236:47" pos:end="3236:73"><expr pos:start="3236:47" pos:end="3236:73"><call pos:start="3236:47" pos:end="3236:73"><name pos:start="3236:47" pos:end="3236:61">target_offset64</name><argument_list pos:start="3236:62" pos:end="3236:73">(<argument pos:start="3236:63" pos:end="3236:66"><expr pos:start="3236:63" pos:end="3236:66"><name pos:start="3236:63" pos:end="3236:66">arg3</name></expr></argument>, <argument pos:start="3236:69" pos:end="3236:72"><expr pos:start="3236:69" pos:end="3236:72"><name pos:start="3236:69" pos:end="3236:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument pos:start="3237:41" pos:end="3237:67"><expr pos:start="3237:41" pos:end="3237:67"><call pos:start="3237:41" pos:end="3237:67"><name pos:start="3237:41" pos:end="3237:55">target_offset64</name><argument_list pos:start="3237:56" pos:end="3237:67">(<argument pos:start="3237:57" pos:end="3237:60"><expr pos:start="3237:57" pos:end="3237:60"><name pos:start="3237:57" pos:end="3237:60">arg5</name></expr></argument>, <argument pos:start="3237:63" pos:end="3237:66"><expr pos:start="3237:63" pos:end="3237:66"><name pos:start="3237:63" pos:end="3237:66">arg6</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3237:70" pos:end="3237:73"><expr pos:start="3237:70" pos:end="3237:73"><name pos:start="3237:70" pos:end="3237:73">arg7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="3238:1" pos:end="3238:5">#<cpp:directive pos:start="3238:2" pos:end="3238:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="3239:9" pos:end="3243:0"><expr pos:start="3239:9" pos:end="3240:75"><name pos:start="3239:9" pos:end="3239:11">ret</name> <operator pos:start="3239:13" pos:end="3239:13">=</operator> <call pos:start="3239:15" pos:end="3240:75"><name pos:start="3239:15" pos:end="3239:23">get_errno</name><argument_list pos:start="3239:24" pos:end="3240:75">(<argument pos:start="3239:25" pos:end="3240:74"><expr pos:start="3239:25" pos:end="3240:74"><call pos:start="3239:25" pos:end="3240:74"><name pos:start="3239:25" pos:end="3239:39">sync_file_range</name><argument_list pos:start="3239:40" pos:end="3240:74">(<argument pos:start="3239:41" pos:end="3239:44"><expr pos:start="3239:41" pos:end="3239:44"><name pos:start="3239:41" pos:end="3239:44">arg1</name></expr></argument>, <argument pos:start="3239:47" pos:end="3239:73"><expr pos:start="3239:47" pos:end="3239:73"><call pos:start="3239:47" pos:end="3239:73"><name pos:start="3239:47" pos:end="3239:61">target_offset64</name><argument_list pos:start="3239:62" pos:end="3239:73">(<argument pos:start="3239:63" pos:end="3239:66"><expr pos:start="3239:63" pos:end="3239:66"><name pos:start="3239:63" pos:end="3239:66">arg2</name></expr></argument>, <argument pos:start="3239:69" pos:end="3239:72"><expr pos:start="3239:69" pos:end="3239:72"><name pos:start="3239:69" pos:end="3239:72">arg3</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument pos:start="3240:41" pos:end="3240:67"><expr pos:start="3240:41" pos:end="3240:67"><call pos:start="3240:41" pos:end="3240:67"><name pos:start="3240:41" pos:end="3240:55">target_offset64</name><argument_list pos:start="3240:56" pos:end="3240:67">(<argument pos:start="3240:57" pos:end="3240:60"><expr pos:start="3240:57" pos:end="3240:60"><name pos:start="3240:57" pos:end="3240:60">arg4</name></expr></argument>, <argument pos:start="3240:63" pos:end="3240:66"><expr pos:start="3240:63" pos:end="3240:66"><name pos:start="3240:63" pos:end="3240:66">arg5</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3240:70" pos:end="3240:73"><expr pos:start="3240:70" pos:end="3240:73"><name pos:start="3240:70" pos:end="3240:73">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3241:1" pos:end="3241:6">#<cpp:directive pos:start="3241:2" pos:end="3241:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="3241:8" pos:end="3241:25">/* !TARGET_MIPS */</comment>
<cpp:else pos:start="3242:1" pos:end="3242:5">#<cpp:directive pos:start="3242:2" pos:end="3242:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="3243:9" pos:end="3247:0"><expr pos:start="3243:9" pos:end="3243:64"><name pos:start="3243:9" pos:end="3243:11">ret</name> <operator pos:start="3243:13" pos:end="3243:13">=</operator> <call pos:start="3243:15" pos:end="3243:64"><name pos:start="3243:15" pos:end="3243:23">get_errno</name><argument_list pos:start="3243:24" pos:end="3243:64">(<argument pos:start="3243:25" pos:end="3243:63"><expr pos:start="3243:25" pos:end="3243:63"><call pos:start="3243:25" pos:end="3243:63"><name pos:start="3243:25" pos:end="3243:39">sync_file_range</name><argument_list pos:start="3243:40" pos:end="3243:63">(<argument pos:start="3243:41" pos:end="3243:44"><expr pos:start="3243:41" pos:end="3243:44"><name pos:start="3243:41" pos:end="3243:44">arg1</name></expr></argument>, <argument pos:start="3243:47" pos:end="3243:50"><expr pos:start="3243:47" pos:end="3243:50"><name pos:start="3243:47" pos:end="3243:50">arg2</name></expr></argument>, <argument pos:start="3243:53" pos:end="3243:56"><expr pos:start="3243:53" pos:end="3243:56"><name pos:start="3243:53" pos:end="3243:56">arg3</name></expr></argument>, <argument pos:start="3243:59" pos:end="3243:62"><expr pos:start="3243:59" pos:end="3243:62"><name pos:start="3243:59" pos:end="3243:62">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3244:1" pos:end="3244:6">#<cpp:directive pos:start="3244:2" pos:end="3244:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3245:1" pos:end="3245:6">#<cpp:directive pos:start="3245:2" pos:end="3245:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3246:1" pos:end="3246:39">#<cpp:directive pos:start="3246:2" pos:end="3246:3">if</cpp:directive> <expr pos:start="3246:5" pos:end="3246:39"><call pos:start="3246:5" pos:end="3246:39"><name pos:start="3246:5" pos:end="3246:11">defined</name><argument_list pos:start="3246:12" pos:end="3246:39">(<argument pos:start="3246:13" pos:end="3246:38"><expr pos:start="3246:13" pos:end="3246:38"><name pos:start="3246:13" pos:end="3246:38">TARGET_NR_sync_file_range2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3247:5" pos:end="3250:0">case <expr pos:start="3247:10" pos:end="3247:35"><name pos:start="3247:10" pos:end="3247:35">TARGET_NR_sync_file_range2</name></expr>:</case>
        <comment type="block" pos:start="3248:9" pos:end="3248:74">/* This is like sync_file_range but the arguments are reordered */</comment>
<cpp:if pos:start="3249:1" pos:end="3249:25">#<cpp:directive pos:start="3249:2" pos:end="3249:3">if</cpp:directive> <expr pos:start="3249:5" pos:end="3249:25"><name pos:start="3249:5" pos:end="3249:19">TARGET_ABI_BITS</name> <operator pos:start="3249:21" pos:end="3249:22">==</operator> <literal type="number" pos:start="3249:24" pos:end="3249:25">32</literal></expr></cpp:if>
        <expr_stmt pos:start="3250:9" pos:end="3253:0"><expr pos:start="3250:9" pos:end="3251:75"><name pos:start="3250:9" pos:end="3250:11">ret</name> <operator pos:start="3250:13" pos:end="3250:13">=</operator> <call pos:start="3250:15" pos:end="3251:75"><name pos:start="3250:15" pos:end="3250:23">get_errno</name><argument_list pos:start="3250:24" pos:end="3251:75">(<argument pos:start="3250:25" pos:end="3251:74"><expr pos:start="3250:25" pos:end="3251:74"><call pos:start="3250:25" pos:end="3251:74"><name pos:start="3250:25" pos:end="3250:39">sync_file_range</name><argument_list pos:start="3250:40" pos:end="3251:74">(<argument pos:start="3250:41" pos:end="3250:44"><expr pos:start="3250:41" pos:end="3250:44"><name pos:start="3250:41" pos:end="3250:44">arg1</name></expr></argument>, <argument pos:start="3250:47" pos:end="3250:73"><expr pos:start="3250:47" pos:end="3250:73"><call pos:start="3250:47" pos:end="3250:73"><name pos:start="3250:47" pos:end="3250:61">target_offset64</name><argument_list pos:start="3250:62" pos:end="3250:73">(<argument pos:start="3250:63" pos:end="3250:66"><expr pos:start="3250:63" pos:end="3250:66"><name pos:start="3250:63" pos:end="3250:66">arg3</name></expr></argument>, <argument pos:start="3250:69" pos:end="3250:72"><expr pos:start="3250:69" pos:end="3250:72"><name pos:start="3250:69" pos:end="3250:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument pos:start="3251:41" pos:end="3251:67"><expr pos:start="3251:41" pos:end="3251:67"><call pos:start="3251:41" pos:end="3251:67"><name pos:start="3251:41" pos:end="3251:55">target_offset64</name><argument_list pos:start="3251:56" pos:end="3251:67">(<argument pos:start="3251:57" pos:end="3251:60"><expr pos:start="3251:57" pos:end="3251:60"><name pos:start="3251:57" pos:end="3251:60">arg5</name></expr></argument>, <argument pos:start="3251:63" pos:end="3251:66"><expr pos:start="3251:63" pos:end="3251:66"><name pos:start="3251:63" pos:end="3251:66">arg6</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3251:70" pos:end="3251:73"><expr pos:start="3251:70" pos:end="3251:73"><name pos:start="3251:70" pos:end="3251:73">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="3252:1" pos:end="3252:5">#<cpp:directive pos:start="3252:2" pos:end="3252:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="3253:9" pos:end="3258:0"><expr pos:start="3253:9" pos:end="3253:64"><name pos:start="3253:9" pos:end="3253:11">ret</name> <operator pos:start="3253:13" pos:end="3253:13">=</operator> <call pos:start="3253:15" pos:end="3253:64"><name pos:start="3253:15" pos:end="3253:23">get_errno</name><argument_list pos:start="3253:24" pos:end="3253:64">(<argument pos:start="3253:25" pos:end="3253:63"><expr pos:start="3253:25" pos:end="3253:63"><call pos:start="3253:25" pos:end="3253:63"><name pos:start="3253:25" pos:end="3253:39">sync_file_range</name><argument_list pos:start="3253:40" pos:end="3253:63">(<argument pos:start="3253:41" pos:end="3253:44"><expr pos:start="3253:41" pos:end="3253:44"><name pos:start="3253:41" pos:end="3253:44">arg1</name></expr></argument>, <argument pos:start="3253:47" pos:end="3253:50"><expr pos:start="3253:47" pos:end="3253:50"><name pos:start="3253:47" pos:end="3253:50">arg3</name></expr></argument>, <argument pos:start="3253:53" pos:end="3253:56"><expr pos:start="3253:53" pos:end="3253:56"><name pos:start="3253:53" pos:end="3253:56">arg4</name></expr></argument>, <argument pos:start="3253:59" pos:end="3253:62"><expr pos:start="3253:59" pos:end="3253:62"><name pos:start="3253:59" pos:end="3253:62">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3254:1" pos:end="3254:6">#<cpp:directive pos:start="3254:2" pos:end="3254:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3255:1" pos:end="3255:6">#<cpp:directive pos:start="3255:2" pos:end="3255:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3256:1" pos:end="3256:6">#<cpp:directive pos:start="3256:2" pos:end="3256:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3257:1" pos:end="3257:32">#<cpp:directive pos:start="3257:2" pos:end="3257:3">if</cpp:directive> <expr pos:start="3257:5" pos:end="3257:32"><call pos:start="3257:5" pos:end="3257:32"><name pos:start="3257:5" pos:end="3257:11">defined</name><argument_list pos:start="3257:12" pos:end="3257:32">(<argument pos:start="3257:13" pos:end="3257:31"><expr pos:start="3257:13" pos:end="3257:31"><name pos:start="3257:13" pos:end="3257:31">TARGET_NR_signalfd4</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3258:5" pos:end="3258:29">case <expr pos:start="3258:10" pos:end="3258:28"><name pos:start="3258:10" pos:end="3258:28">TARGET_NR_signalfd4</name></expr>:</case>
        <expr_stmt pos:start="3259:9" pos:end="3262:0"><expr pos:start="3259:9" pos:end="3259:44"><name pos:start="3259:9" pos:end="3259:11">ret</name> <operator pos:start="3259:13" pos:end="3259:13">=</operator> <call pos:start="3259:15" pos:end="3259:44"><name pos:start="3259:15" pos:end="3259:26">do_signalfd4</name><argument_list pos:start="3259:27" pos:end="3259:44">(<argument pos:start="3259:28" pos:end="3259:31"><expr pos:start="3259:28" pos:end="3259:31"><name pos:start="3259:28" pos:end="3259:31">arg1</name></expr></argument>, <argument pos:start="3259:34" pos:end="3259:37"><expr pos:start="3259:34" pos:end="3259:37"><name pos:start="3259:34" pos:end="3259:37">arg2</name></expr></argument>, <argument pos:start="3259:40" pos:end="3259:43"><expr pos:start="3259:40" pos:end="3259:43"><name pos:start="3259:40" pos:end="3259:43">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3260:1" pos:end="3260:6">#<cpp:directive pos:start="3260:2" pos:end="3260:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3261:1" pos:end="3261:31">#<cpp:directive pos:start="3261:2" pos:end="3261:3">if</cpp:directive> <expr pos:start="3261:5" pos:end="3261:31"><call pos:start="3261:5" pos:end="3261:31"><name pos:start="3261:5" pos:end="3261:11">defined</name><argument_list pos:start="3261:12" pos:end="3261:31">(<argument pos:start="3261:13" pos:end="3261:30"><expr pos:start="3261:13" pos:end="3261:30"><name pos:start="3261:13" pos:end="3261:30">TARGET_NR_signalfd</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3262:5" pos:end="3262:28">case <expr pos:start="3262:10" pos:end="3262:27"><name pos:start="3262:10" pos:end="3262:27">TARGET_NR_signalfd</name></expr>:</case>
        <expr_stmt pos:start="3263:9" pos:end="3267:0"><expr pos:start="3263:9" pos:end="3263:41"><name pos:start="3263:9" pos:end="3263:11">ret</name> <operator pos:start="3263:13" pos:end="3263:13">=</operator> <call pos:start="3263:15" pos:end="3263:41"><name pos:start="3263:15" pos:end="3263:26">do_signalfd4</name><argument_list pos:start="3263:27" pos:end="3263:41">(<argument pos:start="3263:28" pos:end="3263:31"><expr pos:start="3263:28" pos:end="3263:31"><name pos:start="3263:28" pos:end="3263:31">arg1</name></expr></argument>, <argument pos:start="3263:34" pos:end="3263:37"><expr pos:start="3263:34" pos:end="3263:37"><name pos:start="3263:34" pos:end="3263:37">arg2</name></expr></argument>, <argument pos:start="3263:40" pos:end="3263:40"><expr pos:start="3263:40" pos:end="3263:40"><literal type="number" pos:start="3263:40" pos:end="3263:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3264:1" pos:end="3264:6">#<cpp:directive pos:start="3264:2" pos:end="3264:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3265:1" pos:end="3265:25">#<cpp:directive pos:start="3265:2" pos:end="3265:3">if</cpp:directive> <expr pos:start="3265:5" pos:end="3265:25"><call pos:start="3265:5" pos:end="3265:25"><name pos:start="3265:5" pos:end="3265:11">defined</name><argument_list pos:start="3265:12" pos:end="3265:25">(<argument pos:start="3265:13" pos:end="3265:24"><expr pos:start="3265:13" pos:end="3265:24"><name pos:start="3265:13" pos:end="3265:24">CONFIG_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if pos:start="3266:1" pos:end="3266:35">#<cpp:directive pos:start="3266:2" pos:end="3266:3">if</cpp:directive> <expr pos:start="3266:5" pos:end="3266:35"><call pos:start="3266:5" pos:end="3266:35"><name pos:start="3266:5" pos:end="3266:11">defined</name><argument_list pos:start="3266:12" pos:end="3266:35">(<argument pos:start="3266:13" pos:end="3266:34"><expr pos:start="3266:13" pos:end="3266:34"><name pos:start="3266:13" pos:end="3266:34">TARGET_NR_epoll_create</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3267:5" pos:end="3267:32">case <expr pos:start="3267:10" pos:end="3267:31"><name pos:start="3267:10" pos:end="3267:31">TARGET_NR_epoll_create</name></expr>:</case>
        <expr_stmt pos:start="3268:9" pos:end="3271:0"><expr pos:start="3268:9" pos:end="3268:43"><name pos:start="3268:9" pos:end="3268:11">ret</name> <operator pos:start="3268:13" pos:end="3268:13">=</operator> <call pos:start="3268:15" pos:end="3268:43"><name pos:start="3268:15" pos:end="3268:23">get_errno</name><argument_list pos:start="3268:24" pos:end="3268:43">(<argument pos:start="3268:25" pos:end="3268:42"><expr pos:start="3268:25" pos:end="3268:42"><call pos:start="3268:25" pos:end="3268:42"><name pos:start="3268:25" pos:end="3268:36">epoll_create</name><argument_list pos:start="3268:37" pos:end="3268:42">(<argument pos:start="3268:38" pos:end="3268:41"><expr pos:start="3268:38" pos:end="3268:41"><name pos:start="3268:38" pos:end="3268:41">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3269:1" pos:end="3269:6">#<cpp:directive pos:start="3269:2" pos:end="3269:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3270:1" pos:end="3270:69">#<cpp:directive pos:start="3270:2" pos:end="3270:3">if</cpp:directive> <expr pos:start="3270:5" pos:end="3270:69"><call pos:start="3270:5" pos:end="3270:36"><name pos:start="3270:5" pos:end="3270:11">defined</name><argument_list pos:start="3270:12" pos:end="3270:36">(<argument pos:start="3270:13" pos:end="3270:35"><expr pos:start="3270:13" pos:end="3270:35"><name pos:start="3270:13" pos:end="3270:35">TARGET_NR_epoll_create1</name></expr></argument>)</argument_list></call> <operator pos:start="3270:38" pos:end="3270:39">&amp;&amp;</operator> <call pos:start="3270:41" pos:end="3270:69"><name pos:start="3270:41" pos:end="3270:47">defined</name><argument_list pos:start="3270:48" pos:end="3270:69">(<argument pos:start="3270:49" pos:end="3270:68"><expr pos:start="3270:49" pos:end="3270:68"><name pos:start="3270:49" pos:end="3270:68">CONFIG_EPOLL_CREATE1</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3271:5" pos:end="3271:33">case <expr pos:start="3271:10" pos:end="3271:32"><name pos:start="3271:10" pos:end="3271:32">TARGET_NR_epoll_create1</name></expr>:</case>
        <expr_stmt pos:start="3272:9" pos:end="3275:0"><expr pos:start="3272:9" pos:end="3272:44"><name pos:start="3272:9" pos:end="3272:11">ret</name> <operator pos:start="3272:13" pos:end="3272:13">=</operator> <call pos:start="3272:15" pos:end="3272:44"><name pos:start="3272:15" pos:end="3272:23">get_errno</name><argument_list pos:start="3272:24" pos:end="3272:44">(<argument pos:start="3272:25" pos:end="3272:43"><expr pos:start="3272:25" pos:end="3272:43"><call pos:start="3272:25" pos:end="3272:43"><name pos:start="3272:25" pos:end="3272:37">epoll_create1</name><argument_list pos:start="3272:38" pos:end="3272:43">(<argument pos:start="3272:39" pos:end="3272:42"><expr pos:start="3272:39" pos:end="3272:42"><name pos:start="3272:39" pos:end="3272:42">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3273:1" pos:end="3273:6">#<cpp:directive pos:start="3273:2" pos:end="3273:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3274:1" pos:end="3274:32">#<cpp:directive pos:start="3274:2" pos:end="3274:3">if</cpp:directive> <expr pos:start="3274:5" pos:end="3274:32"><call pos:start="3274:5" pos:end="3274:32"><name pos:start="3274:5" pos:end="3274:11">defined</name><argument_list pos:start="3274:12" pos:end="3274:32">(<argument pos:start="3274:13" pos:end="3274:31"><expr pos:start="3274:13" pos:end="3274:31"><name pos:start="3274:13" pos:end="3274:31">TARGET_NR_epoll_ctl</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3275:5" pos:end="3275:29">case <expr pos:start="3275:10" pos:end="3275:28"><name pos:start="3275:10" pos:end="3275:28">TARGET_NR_epoll_ctl</name></expr>:</case>
    <block pos:start="3276:5" pos:end="3541:14">{<block_content pos:start="3277:9" pos:end="3541:14">
        <decl_stmt pos:start="3277:9" pos:end="3277:30"><decl pos:start="3277:9" pos:end="3277:29"><type pos:start="3277:9" pos:end="3277:26"><name pos:start="3277:9" pos:end="3277:26"><name pos:start="3277:9" pos:end="3277:14">struct</name> <name pos:start="3277:16" pos:end="3277:26">epoll_event</name></name></type> <name pos:start="3277:28" pos:end="3277:29">ep</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3278:9" pos:end="3278:36"><decl pos:start="3278:9" pos:end="3278:35"><type pos:start="3278:9" pos:end="3278:28"><name pos:start="3278:9" pos:end="3278:26"><name pos:start="3278:9" pos:end="3278:14">struct</name> <name pos:start="3278:16" pos:end="3278:26">epoll_event</name></name> <modifier pos:start="3278:28" pos:end="3278:28">*</modifier></type><name pos:start="3278:29" pos:end="3278:31">epp</name> <init pos:start="3278:33" pos:end="3278:35">= <expr pos:start="3278:35" pos:end="3278:35"><literal type="number" pos:start="3278:35" pos:end="3278:35">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3279:9" pos:end="3541:14"><if pos:start="3279:9" pos:end="3541:14">if <condition pos:start="3279:12" pos:end="3279:17">(<expr pos:start="3279:13" pos:end="3279:16"><name pos:start="3279:13" pos:end="3279:16">arg4</name></expr>)</condition> <block pos:start="3279:19" pos:end="3541:14">{<block_content pos:start="3280:13" pos:end="3541:14">
            <decl_stmt pos:start="3280:13" pos:end="3280:49"><decl pos:start="3280:13" pos:end="3280:48"><type pos:start="3280:13" pos:end="3280:39"><name pos:start="3280:13" pos:end="3280:37"><name pos:start="3280:13" pos:end="3280:18">struct</name> <name pos:start="3280:20" pos:end="3280:37">target_epoll_event</name></name> <modifier pos:start="3280:39" pos:end="3280:39">*</modifier></type><name pos:start="3280:40" pos:end="3280:48">target_ep</name></decl>;</decl_stmt>
            <if_stmt pos:start="3281:13" pos:end="3541:14"><if pos:start="3281:13" pos:end="3541:14">if <condition pos:start="3281:16" pos:end="3281:67">(<expr pos:start="3281:17" pos:end="3281:66"><operator pos:start="3281:17" pos:end="3281:17">!</operator><call pos:start="3281:18" pos:end="3281:66"><name pos:start="3281:18" pos:end="3281:33">lock_user_struct</name><argument_list pos:start="3281:34" pos:end="3281:66">(<argument pos:start="3281:35" pos:end="3281:45"><expr pos:start="3281:35" pos:end="3281:45"><name pos:start="3281:35" pos:end="3281:45">VERIFY_READ</name></expr></argument>, <argument pos:start="3281:48" pos:end="3281:56"><expr pos:start="3281:48" pos:end="3281:56"><name pos:start="3281:48" pos:end="3281:56">target_ep</name></expr></argument>, <argument pos:start="3281:59" pos:end="3281:62"><expr pos:start="3281:59" pos:end="3281:62"><name pos:start="3281:59" pos:end="3281:62">arg4</name></expr></argument>, <argument pos:start="3281:65" pos:end="3281:65"><expr pos:start="3281:65" pos:end="3281:65"><literal type="number" pos:start="3281:65" pos:end="3281:65">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3281:69" pos:end="3541:14">{<block_content pos:start="3282:17" pos:end="3541:14">
                <goto pos:start="3282:17" pos:end="3282:28">goto <name pos:start="3282:22" pos:end="3282:27">efault</name>;</goto>
            <expr_stmt pos:start="3283:13" pos:end="3283:51"><expr pos:start="3283:13" pos:end="3283:50"><name pos:start="3283:13" pos:end="3283:21"><name pos:start="3283:13" pos:end="3283:14">ep</name><operator pos:start="3283:15" pos:end="3283:15">.</operator><name pos:start="3283:16" pos:end="3283:21">events</name></name> <operator pos:start="3283:23" pos:end="3283:23">=</operator> <call pos:start="3283:25" pos:end="3283:50"><name pos:start="3283:25" pos:end="3283:31">tswap32</name><argument_list pos:start="3283:32" pos:end="3283:50">(<argument pos:start="3283:33" pos:end="3283:49"><expr pos:start="3283:33" pos:end="3283:49"><name pos:start="3283:33" pos:end="3283:49"><name pos:start="3283:33" pos:end="3283:41">target_ep</name><operator pos:start="3283:42" pos:end="3283:43">-&gt;</operator><name pos:start="3283:44" pos:end="3283:49">events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="3284:13" pos:end="3287:15">/* The epoll_data_t union is just opaque data to the kernel,
             * so we transfer all 64 bits across and need not worry what
             * actual data type it is.
             */</comment>
            <expr_stmt pos:start="3288:13" pos:end="3288:55"><expr pos:start="3288:13" pos:end="3288:54"><name pos:start="3288:13" pos:end="3288:23"><name pos:start="3288:13" pos:end="3288:14">ep</name><operator pos:start="3288:15" pos:end="3288:15">.</operator><name pos:start="3288:16" pos:end="3288:19">data</name><operator pos:start="3288:20" pos:end="3288:20">.</operator><name pos:start="3288:21" pos:end="3288:23">u64</name></name> <operator pos:start="3288:25" pos:end="3288:25">=</operator> <call pos:start="3288:27" pos:end="3288:54"><name pos:start="3288:27" pos:end="3288:33">tswap64</name><argument_list pos:start="3288:34" pos:end="3288:54">(<argument pos:start="3288:35" pos:end="3288:53"><expr pos:start="3288:35" pos:end="3288:53"><name pos:start="3288:35" pos:end="3288:53"><name pos:start="3288:35" pos:end="3288:43">target_ep</name><operator pos:start="3288:44" pos:end="3288:45">-&gt;</operator><name pos:start="3288:46" pos:end="3288:49">data</name><operator pos:start="3288:50" pos:end="3288:50">.</operator><name pos:start="3288:51" pos:end="3288:53">u64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3289:13" pos:end="3289:51"><expr pos:start="3289:13" pos:end="3289:50"><call pos:start="3289:13" pos:end="3289:50"><name pos:start="3289:13" pos:end="3289:30">unlock_user_struct</name><argument_list pos:start="3289:31" pos:end="3289:50">(<argument pos:start="3289:32" pos:end="3289:40"><expr pos:start="3289:32" pos:end="3289:40"><name pos:start="3289:32" pos:end="3289:40">target_ep</name></expr></argument>, <argument pos:start="3289:43" pos:end="3289:46"><expr pos:start="3289:43" pos:end="3289:46"><name pos:start="3289:43" pos:end="3289:46">arg4</name></expr></argument>, <argument pos:start="3289:49" pos:end="3289:49"><expr pos:start="3289:49" pos:end="3289:49"><literal type="number" pos:start="3289:49" pos:end="3289:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3290:13" pos:end="3290:22"><expr pos:start="3290:13" pos:end="3290:21"><name pos:start="3290:13" pos:end="3290:15">epp</name> <operator pos:start="3290:17" pos:end="3290:17">=</operator> <operator pos:start="3290:19" pos:end="3290:19">&amp;</operator><name pos:start="3290:20" pos:end="3290:21">ep</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3291:9" pos:end="3295:0"><expr pos:start="3291:9" pos:end="3291:57"><name pos:start="3291:9" pos:end="3291:11">ret</name> <operator pos:start="3291:13" pos:end="3291:13">=</operator> <call pos:start="3291:15" pos:end="3291:57"><name pos:start="3291:15" pos:end="3291:23">get_errno</name><argument_list pos:start="3291:24" pos:end="3291:57">(<argument pos:start="3291:25" pos:end="3291:56"><expr pos:start="3291:25" pos:end="3291:56"><call pos:start="3291:25" pos:end="3291:56"><name pos:start="3291:25" pos:end="3291:33">epoll_ctl</name><argument_list pos:start="3291:34" pos:end="3291:56">(<argument pos:start="3291:35" pos:end="3291:38"><expr pos:start="3291:35" pos:end="3291:38"><name pos:start="3291:35" pos:end="3291:38">arg1</name></expr></argument>, <argument pos:start="3291:41" pos:end="3291:44"><expr pos:start="3291:41" pos:end="3291:44"><name pos:start="3291:41" pos:end="3291:44">arg2</name></expr></argument>, <argument pos:start="3291:47" pos:end="3291:50"><expr pos:start="3291:47" pos:end="3291:50"><name pos:start="3291:47" pos:end="3291:50">arg3</name></expr></argument>, <argument pos:start="3291:53" pos:end="3291:55"><expr pos:start="3291:53" pos:end="3291:55"><name pos:start="3291:53" pos:end="3291:55">epp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3292:1" pos:end="3292:6">#<cpp:directive pos:start="3292:2" pos:end="3292:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3293:1" pos:end="3293:67">#<cpp:directive pos:start="3293:2" pos:end="3293:3">if</cpp:directive> <expr pos:start="3293:5" pos:end="3293:67"><call pos:start="3293:5" pos:end="3293:33"><name pos:start="3293:5" pos:end="3293:11">defined</name><argument_list pos:start="3293:12" pos:end="3293:33">(<argument pos:start="3293:13" pos:end="3293:32"><expr pos:start="3293:13" pos:end="3293:32"><name pos:start="3293:13" pos:end="3293:32">TARGET_NR_epoll_wait</name></expr></argument>)</argument_list></call> <operator pos:start="3293:35" pos:end="3293:36">||</operator> <call pos:start="3293:38" pos:end="3293:67"><name pos:start="3293:38" pos:end="3293:44">defined</name><argument_list pos:start="3293:45" pos:end="3293:67">(<argument pos:start="3293:46" pos:end="3293:66"><expr pos:start="3293:46" pos:end="3293:66"><name pos:start="3293:46" pos:end="3293:66">TARGET_NR_epoll_pwait</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if pos:start="3294:1" pos:end="3294:33">#<cpp:directive pos:start="3294:2" pos:end="3294:3">if</cpp:directive> <expr pos:start="3294:5" pos:end="3294:33"><call pos:start="3294:5" pos:end="3294:33"><name pos:start="3294:5" pos:end="3294:11">defined</name><argument_list pos:start="3294:12" pos:end="3294:33">(<argument pos:start="3294:13" pos:end="3294:32"><expr pos:start="3294:13" pos:end="3294:32"><name pos:start="3294:13" pos:end="3294:32">TARGET_NR_epoll_wait</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3295:5" pos:end="3298:0">case <expr pos:start="3295:10" pos:end="3295:29"><name pos:start="3295:10" pos:end="3295:29">TARGET_NR_epoll_wait</name></expr>:</case>
<cpp:endif pos:start="3296:1" pos:end="3296:6">#<cpp:directive pos:start="3296:2" pos:end="3296:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3297:1" pos:end="3297:34">#<cpp:directive pos:start="3297:2" pos:end="3297:3">if</cpp:directive> <expr pos:start="3297:5" pos:end="3297:34"><call pos:start="3297:5" pos:end="3297:34"><name pos:start="3297:5" pos:end="3297:11">defined</name><argument_list pos:start="3297:12" pos:end="3297:34">(<argument pos:start="3297:13" pos:end="3297:33"><expr pos:start="3297:13" pos:end="3297:33"><name pos:start="3297:13" pos:end="3297:33">TARGET_NR_epoll_pwait</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3298:5" pos:end="3300:0">case <expr pos:start="3298:10" pos:end="3298:30"><name pos:start="3298:10" pos:end="3298:30">TARGET_NR_epoll_pwait</name></expr>:</case>
<cpp:endif pos:start="3299:1" pos:end="3299:6">#<cpp:directive pos:start="3299:2" pos:end="3299:6">endif</cpp:directive></cpp:endif>
    <block pos:start="3300:5" pos:end="3541:14">{<block_content pos:start="3301:9" pos:end="3541:14">
        <decl_stmt pos:start="3301:9" pos:end="3301:45"><decl pos:start="3301:9" pos:end="3301:44"><type pos:start="3301:9" pos:end="3301:35"><name pos:start="3301:9" pos:end="3301:33"><name pos:start="3301:9" pos:end="3301:14">struct</name> <name pos:start="3301:16" pos:end="3301:33">target_epoll_event</name></name> <modifier pos:start="3301:35" pos:end="3301:35">*</modifier></type><name pos:start="3301:36" pos:end="3301:44">target_ep</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3302:9" pos:end="3302:31"><decl pos:start="3302:9" pos:end="3302:30"><type pos:start="3302:9" pos:end="3302:28"><name pos:start="3302:9" pos:end="3302:26"><name pos:start="3302:9" pos:end="3302:14">struct</name> <name pos:start="3302:16" pos:end="3302:26">epoll_event</name></name> <modifier pos:start="3302:28" pos:end="3302:28">*</modifier></type><name pos:start="3302:29" pos:end="3302:30">ep</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3303:9" pos:end="3303:24"><decl pos:start="3303:9" pos:end="3303:23"><type pos:start="3303:9" pos:end="3303:11"><name pos:start="3303:9" pos:end="3303:11">int</name></type> <name pos:start="3303:13" pos:end="3303:16">epfd</name> <init pos:start="3303:18" pos:end="3303:23">= <expr pos:start="3303:20" pos:end="3303:23"><name pos:start="3303:20" pos:end="3303:23">arg1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3304:9" pos:end="3304:29"><decl pos:start="3304:9" pos:end="3304:28"><type pos:start="3304:9" pos:end="3304:11"><name pos:start="3304:9" pos:end="3304:11">int</name></type> <name pos:start="3304:13" pos:end="3304:21">maxevents</name> <init pos:start="3304:23" pos:end="3304:28">= <expr pos:start="3304:25" pos:end="3304:28"><name pos:start="3304:25" pos:end="3304:28">arg3</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3305:9" pos:end="3305:27"><decl pos:start="3305:9" pos:end="3305:26"><type pos:start="3305:9" pos:end="3305:11"><name pos:start="3305:9" pos:end="3305:11">int</name></type> <name pos:start="3305:13" pos:end="3305:19">timeout</name> <init pos:start="3305:21" pos:end="3305:26">= <expr pos:start="3305:23" pos:end="3305:26"><name pos:start="3305:23" pos:end="3305:26">arg4</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3306:9" pos:end="3541:14"><if pos:start="3306:9" pos:end="3541:14">if <condition pos:start="3306:12" pos:end="3306:63">(<expr pos:start="3306:13" pos:end="3306:62"><name pos:start="3306:13" pos:end="3306:21">maxevents</name> <operator pos:start="3306:23" pos:end="3306:24">&lt;=</operator> <literal type="number" pos:start="3306:26" pos:end="3306:26">0</literal> <operator pos:start="3306:28" pos:end="3306:29">||</operator> <name pos:start="3306:31" pos:end="3306:39">maxevents</name> <operator pos:start="3306:41" pos:end="3306:41">&gt;</operator> <name pos:start="3306:43" pos:end="3306:62">TARGET_EP_MAX_EVENTS</name></expr>)</condition> <block pos:start="3306:65" pos:end="3541:14">{<block_content pos:start="3307:9" pos:end="3541:14">
        <expr_stmt pos:start="3307:9" pos:end="3308:80"><expr pos:start="3307:9" pos:end="3308:79"><name pos:start="3307:9" pos:end="3307:17">target_ep</name> <operator pos:start="3307:19" pos:end="3307:19">=</operator> <call pos:start="3307:21" pos:end="3308:79"><name pos:start="3307:21" pos:end="3307:29">lock_user</name><argument_list pos:start="3307:30" pos:end="3308:79">(<argument pos:start="3307:31" pos:end="3307:42"><expr pos:start="3307:31" pos:end="3307:42"><name pos:start="3307:31" pos:end="3307:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3307:45" pos:end="3307:48"><expr pos:start="3307:45" pos:end="3307:48"><name pos:start="3307:45" pos:end="3307:48">arg2</name></expr></argument>,
                              <argument pos:start="3308:31" pos:end="3308:75"><expr pos:start="3308:31" pos:end="3308:75"><name pos:start="3308:31" pos:end="3308:39">maxevents</name> <operator pos:start="3308:41" pos:end="3308:41">*</operator> <sizeof pos:start="3308:43" pos:end="3308:75">sizeof<argument_list pos:start="3308:49" pos:end="3308:75">(<argument pos:start="3308:50" pos:end="3308:74"><expr pos:start="3308:50" pos:end="3308:74">struct <name pos:start="3308:57" pos:end="3308:74">target_epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3308:78" pos:end="3308:78"><expr pos:start="3308:78" pos:end="3308:78"><literal type="number" pos:start="3308:78" pos:end="3308:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3309:9" pos:end="3541:14"><if pos:start="3309:9" pos:end="3541:14">if <condition pos:start="3309:12" pos:end="3309:23">(<expr pos:start="3309:13" pos:end="3309:22"><operator pos:start="3309:13" pos:end="3309:13">!</operator><name pos:start="3309:14" pos:end="3309:22">target_ep</name></expr>)</condition> <block pos:start="3309:25" pos:end="3541:14">{<block_content pos:start="3310:13" pos:end="3541:14">
            <goto pos:start="3310:13" pos:end="3310:24">goto <name pos:start="3310:18" pos:end="3310:23">efault</name>;</goto>
        <expr_stmt pos:start="3311:9" pos:end="3311:60"><expr pos:start="3311:9" pos:end="3311:59"><name pos:start="3311:9" pos:end="3311:10">ep</name> <operator pos:start="3311:12" pos:end="3311:12">=</operator> <call pos:start="3311:14" pos:end="3311:59"><name pos:start="3311:14" pos:end="3311:19">alloca</name><argument_list pos:start="3311:20" pos:end="3311:59">(<argument pos:start="3311:21" pos:end="3311:58"><expr pos:start="3311:21" pos:end="3311:58"><name pos:start="3311:21" pos:end="3311:29">maxevents</name> <operator pos:start="3311:31" pos:end="3311:31">*</operator> <sizeof pos:start="3311:33" pos:end="3311:58">sizeof<argument_list pos:start="3311:39" pos:end="3311:58">(<argument pos:start="3311:40" pos:end="3311:57"><expr pos:start="3311:40" pos:end="3311:57">struct <name pos:start="3311:47" pos:end="3311:57">epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="3312:9" pos:end="3541:14">switch <condition pos:start="3312:16" pos:end="3312:20">(<expr pos:start="3312:17" pos:end="3312:19"><name pos:start="3312:17" pos:end="3312:19">num</name></expr>)</condition> <block pos:start="3312:22" pos:end="3541:14">{<block_content pos:start="3314:9" pos:end="3541:14">
<cpp:if pos:start="3313:1" pos:end="3313:34">#<cpp:directive pos:start="3313:2" pos:end="3313:3">if</cpp:directive> <expr pos:start="3313:5" pos:end="3313:34"><call pos:start="3313:5" pos:end="3313:34"><name pos:start="3313:5" pos:end="3313:11">defined</name><argument_list pos:start="3313:12" pos:end="3313:34">(<argument pos:start="3313:13" pos:end="3313:33"><expr pos:start="3313:13" pos:end="3313:33"><name pos:start="3313:13" pos:end="3313:33">TARGET_NR_epoll_pwait</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case pos:start="3314:9" pos:end="3314:35">case <expr pos:start="3314:14" pos:end="3314:34"><name pos:start="3314:14" pos:end="3314:34">TARGET_NR_epoll_pwait</name></expr>:</case>
        <block pos:start="3315:9" pos:end="3541:14">{<block_content pos:start="3316:13" pos:end="3541:14">
            <decl_stmt pos:start="3316:13" pos:end="3316:40"><decl pos:start="3316:13" pos:end="3316:39"><type pos:start="3316:13" pos:end="3316:29"><name pos:start="3316:13" pos:end="3316:27">target_sigset_t</name> <modifier pos:start="3316:29" pos:end="3316:29">*</modifier></type><name pos:start="3316:30" pos:end="3316:39">target_set</name></decl>;</decl_stmt>
            <decl_stmt pos:start="3317:13" pos:end="3317:40"><decl pos:start="3317:13" pos:end="3317:25"><type pos:start="3317:13" pos:end="3317:20"><name pos:start="3317:13" pos:end="3317:20">sigset_t</name></type> <name pos:start="3317:22" pos:end="3317:25">_set</name></decl>, <decl pos:start="3317:28" pos:end="3317:39"><type ref="prev" pos:start="3317:13" pos:end="3317:20"><modifier pos:start="3317:28" pos:end="3317:28">*</modifier></type><name pos:start="3317:29" pos:end="3317:31">set</name> <init pos:start="3317:33" pos:end="3317:39">= <expr pos:start="3317:35" pos:end="3317:39"><operator pos:start="3317:35" pos:end="3317:35">&amp;</operator><name pos:start="3317:36" pos:end="3317:39">_set</name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="3318:13" pos:end="3541:14"><if pos:start="3318:13" pos:end="3541:14">if <condition pos:start="3318:16" pos:end="3318:21">(<expr pos:start="3318:17" pos:end="3318:20"><name pos:start="3318:17" pos:end="3318:20">arg5</name></expr>)</condition> <block pos:start="3318:23" pos:end="3541:14">{<block_content pos:start="3319:17" pos:end="3541:14">
                <if_stmt pos:start="3319:17" pos:end="3541:14"><if pos:start="3319:17" pos:end="3541:14">if <condition pos:start="3319:20" pos:end="3319:52">(<expr pos:start="3319:21" pos:end="3319:51"><name pos:start="3319:21" pos:end="3319:24">arg6</name> <operator pos:start="3319:26" pos:end="3319:27">!=</operator> <sizeof pos:start="3319:29" pos:end="3319:51">sizeof<argument_list pos:start="3319:35" pos:end="3319:51">(<argument pos:start="3319:36" pos:end="3319:50"><expr pos:start="3319:36" pos:end="3319:50"><name pos:start="3319:36" pos:end="3319:50">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="3319:54" pos:end="3541:14">{<block_content pos:start="3320:17" pos:end="3541:14">
                <expr_stmt pos:start="3320:17" pos:end="3321:67"><expr pos:start="3320:17" pos:end="3321:66"><name pos:start="3320:17" pos:end="3320:26">target_set</name> <operator pos:start="3320:28" pos:end="3320:28">=</operator> <call pos:start="3320:30" pos:end="3321:66"><name pos:start="3320:30" pos:end="3320:38">lock_user</name><argument_list pos:start="3320:39" pos:end="3321:66">(<argument pos:start="3320:40" pos:end="3320:50"><expr pos:start="3320:40" pos:end="3320:50"><name pos:start="3320:40" pos:end="3320:50">VERIFY_READ</name></expr></argument>, <argument pos:start="3320:53" pos:end="3320:56"><expr pos:start="3320:53" pos:end="3320:56"><name pos:start="3320:53" pos:end="3320:56">arg5</name></expr></argument>,
                                       <argument pos:start="3321:40" pos:end="3321:62"><expr pos:start="3321:40" pos:end="3321:62"><sizeof pos:start="3321:40" pos:end="3321:62">sizeof<argument_list pos:start="3321:46" pos:end="3321:62">(<argument pos:start="3321:47" pos:end="3321:61"><expr pos:start="3321:47" pos:end="3321:61"><name pos:start="3321:47" pos:end="3321:61">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3321:65" pos:end="3321:65"><expr pos:start="3321:65" pos:end="3321:65"><literal type="number" pos:start="3321:65" pos:end="3321:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="3322:17" pos:end="3541:14"><if pos:start="3322:17" pos:end="3327:13">if <condition pos:start="3322:20" pos:end="3322:32">(<expr pos:start="3322:21" pos:end="3322:31"><operator pos:start="3322:21" pos:end="3322:21">!</operator><name pos:start="3322:22" pos:end="3322:31">target_set</name></expr>)</condition> <block pos:start="3322:34" pos:end="3327:13">{<block_content pos:start="3323:21" pos:end="3326:49">
                    <expr_stmt pos:start="3323:21" pos:end="3323:52"><expr pos:start="3323:21" pos:end="3323:51"><call pos:start="3323:21" pos:end="3323:51"><name pos:start="3323:21" pos:end="3323:31">unlock_user</name><argument_list pos:start="3323:32" pos:end="3323:51">(<argument pos:start="3323:33" pos:end="3323:41"><expr pos:start="3323:33" pos:end="3323:41"><name pos:start="3323:33" pos:end="3323:41">target_ep</name></expr></argument>, <argument pos:start="3323:44" pos:end="3323:47"><expr pos:start="3323:44" pos:end="3323:47"><name pos:start="3323:44" pos:end="3323:47">arg2</name></expr></argument>, <argument pos:start="3323:50" pos:end="3323:50"><expr pos:start="3323:50" pos:end="3323:50"><literal type="number" pos:start="3323:50" pos:end="3323:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto pos:start="3324:21" pos:end="3324:32">goto <name pos:start="3324:26" pos:end="3324:31">efault</name>;</goto>
                <expr_stmt pos:start="3325:17" pos:end="3325:55"><expr pos:start="3325:17" pos:end="3325:54"><call pos:start="3325:17" pos:end="3325:54"><name pos:start="3325:17" pos:end="3325:37">target_to_host_sigset</name><argument_list pos:start="3325:38" pos:end="3325:54">(<argument pos:start="3325:39" pos:end="3325:41"><expr pos:start="3325:39" pos:end="3325:41"><name pos:start="3325:39" pos:end="3325:41">set</name></expr></argument>, <argument pos:start="3325:44" pos:end="3325:53"><expr pos:start="3325:44" pos:end="3325:53"><name pos:start="3325:44" pos:end="3325:53">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3326:17" pos:end="3326:49"><expr pos:start="3326:17" pos:end="3326:48"><call pos:start="3326:17" pos:end="3326:48"><name pos:start="3326:17" pos:end="3326:27">unlock_user</name><argument_list pos:start="3326:28" pos:end="3326:48">(<argument pos:start="3326:29" pos:end="3326:38"><expr pos:start="3326:29" pos:end="3326:38"><name pos:start="3326:29" pos:end="3326:38">target_set</name></expr></argument>, <argument pos:start="3326:41" pos:end="3326:44"><expr pos:start="3326:41" pos:end="3326:44"><name pos:start="3326:41" pos:end="3326:44">arg5</name></expr></argument>, <argument pos:start="3326:47" pos:end="3326:47"><expr pos:start="3326:47" pos:end="3326:47"><literal type="number" pos:start="3326:47" pos:end="3326:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3327:15" pos:end="3541:14">else <block pos:start="3327:20" pos:end="3541:14">{<block_content pos:start="3328:17" pos:end="3541:14">
                <expr_stmt pos:start="3328:17" pos:end="3328:27"><expr pos:start="3328:17" pos:end="3328:26"><name pos:start="3328:17" pos:end="3328:19">set</name> <operator pos:start="3328:21" pos:end="3328:21">=</operator> <name pos:start="3328:23" pos:end="3328:26">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3329:13" pos:end="3333:0"><expr pos:start="3329:13" pos:end="3330:65"><name pos:start="3329:13" pos:end="3329:15">ret</name> <operator pos:start="3329:17" pos:end="3329:17">=</operator> <call pos:start="3329:19" pos:end="3330:65"><name pos:start="3329:19" pos:end="3329:27">get_errno</name><argument_list pos:start="3329:28" pos:end="3330:65">(<argument pos:start="3329:29" pos:end="3330:64"><expr pos:start="3329:29" pos:end="3330:64"><call pos:start="3329:29" pos:end="3330:64"><name pos:start="3329:29" pos:end="3329:44">safe_epoll_pwait</name><argument_list pos:start="3329:45" pos:end="3330:64">(<argument pos:start="3329:46" pos:end="3329:49"><expr pos:start="3329:46" pos:end="3329:49"><name pos:start="3329:46" pos:end="3329:49">epfd</name></expr></argument>, <argument pos:start="3329:52" pos:end="3329:53"><expr pos:start="3329:52" pos:end="3329:53"><name pos:start="3329:52" pos:end="3329:53">ep</name></expr></argument>, <argument pos:start="3329:56" pos:end="3329:64"><expr pos:start="3329:56" pos:end="3329:64"><name pos:start="3329:56" pos:end="3329:64">maxevents</name></expr></argument>, <argument pos:start="3329:67" pos:end="3329:73"><expr pos:start="3329:67" pos:end="3329:73"><name pos:start="3329:67" pos:end="3329:73">timeout</name></expr></argument>,
                                             <argument pos:start="3330:46" pos:end="3330:48"><expr pos:start="3330:46" pos:end="3330:48"><name pos:start="3330:46" pos:end="3330:48">set</name></expr></argument>, <argument pos:start="3330:51" pos:end="3330:63"><expr pos:start="3330:51" pos:end="3330:63"><name pos:start="3330:51" pos:end="3330:63">SIGSET_T_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3331:1" pos:end="3331:6">#<cpp:directive pos:start="3331:2" pos:end="3331:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3332:1" pos:end="3332:33">#<cpp:directive pos:start="3332:2" pos:end="3332:3">if</cpp:directive> <expr pos:start="3332:5" pos:end="3332:33"><call pos:start="3332:5" pos:end="3332:33"><name pos:start="3332:5" pos:end="3332:11">defined</name><argument_list pos:start="3332:12" pos:end="3332:33">(<argument pos:start="3332:13" pos:end="3332:32"><expr pos:start="3332:13" pos:end="3332:32"><name pos:start="3332:13" pos:end="3332:32">TARGET_NR_epoll_wait</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case pos:start="3333:9" pos:end="3333:34">case <expr pos:start="3333:14" pos:end="3333:33"><name pos:start="3333:14" pos:end="3333:33">TARGET_NR_epoll_wait</name></expr>:</case>
            <expr_stmt pos:start="3334:13" pos:end="3337:0"><expr pos:start="3334:13" pos:end="3335:54"><name pos:start="3334:13" pos:end="3334:15">ret</name> <operator pos:start="3334:17" pos:end="3334:17">=</operator> <call pos:start="3334:19" pos:end="3335:54"><name pos:start="3334:19" pos:end="3334:27">get_errno</name><argument_list pos:start="3334:28" pos:end="3335:54">(<argument pos:start="3334:29" pos:end="3335:53"><expr pos:start="3334:29" pos:end="3335:53"><call pos:start="3334:29" pos:end="3335:53"><name pos:start="3334:29" pos:end="3334:44">safe_epoll_pwait</name><argument_list pos:start="3334:45" pos:end="3335:53">(<argument pos:start="3334:46" pos:end="3334:49"><expr pos:start="3334:46" pos:end="3334:49"><name pos:start="3334:46" pos:end="3334:49">epfd</name></expr></argument>, <argument pos:start="3334:52" pos:end="3334:53"><expr pos:start="3334:52" pos:end="3334:53"><name pos:start="3334:52" pos:end="3334:53">ep</name></expr></argument>, <argument pos:start="3334:56" pos:end="3334:64"><expr pos:start="3334:56" pos:end="3334:64"><name pos:start="3334:56" pos:end="3334:64">maxevents</name></expr></argument>, <argument pos:start="3334:67" pos:end="3334:73"><expr pos:start="3334:67" pos:end="3334:73"><name pos:start="3334:67" pos:end="3334:73">timeout</name></expr></argument>,
                                             <argument pos:start="3335:46" pos:end="3335:49"><expr pos:start="3335:46" pos:end="3335:49"><name pos:start="3335:46" pos:end="3335:49">NULL</name></expr></argument>, <argument pos:start="3335:52" pos:end="3335:52"><expr pos:start="3335:52" pos:end="3335:52"><literal type="number" pos:start="3335:52" pos:end="3335:52">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3336:1" pos:end="3336:6">#<cpp:directive pos:start="3336:2" pos:end="3336:6">endif</cpp:directive></cpp:endif>
        <default pos:start="3337:9" pos:end="3337:16">default:</default>
            <expr_stmt pos:start="3338:13" pos:end="3338:33"><expr pos:start="3338:13" pos:end="3338:32"><name pos:start="3338:13" pos:end="3338:15">ret</name> <operator pos:start="3338:17" pos:end="3338:17">=</operator> <operator pos:start="3338:19" pos:end="3338:19">-</operator><name pos:start="3338:20" pos:end="3338:32">TARGET_ENOSYS</name></expr>;</expr_stmt>
        <if_stmt pos:start="3339:9" pos:end="3541:14"><if pos:start="3339:9" pos:end="3541:14">if <condition pos:start="3339:12" pos:end="3339:27">(<expr pos:start="3339:13" pos:end="3339:26"><operator pos:start="3339:13" pos:end="3339:13">!</operator><call pos:start="3339:14" pos:end="3339:26"><name pos:start="3339:14" pos:end="3339:21">is_error</name><argument_list pos:start="3339:22" pos:end="3339:26">(<argument pos:start="3339:23" pos:end="3339:25"><expr pos:start="3339:23" pos:end="3339:25"><name pos:start="3339:23" pos:end="3339:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3339:29" pos:end="3541:14">{<block_content pos:start="3340:13" pos:end="3541:14">
            <decl_stmt pos:start="3340:13" pos:end="3340:18"><decl pos:start="3340:13" pos:end="3340:17"><type pos:start="3340:13" pos:end="3340:15"><name pos:start="3340:13" pos:end="3340:15">int</name></type> <name pos:start="3340:17" pos:end="3340:17">i</name></decl>;</decl_stmt>
            <for pos:start="3341:13" pos:end="3541:14">for <control pos:start="3341:17" pos:end="3341:37">(<init pos:start="3341:18" pos:end="3341:23"><expr pos:start="3341:18" pos:end="3341:22"><name pos:start="3341:18" pos:end="3341:18">i</name> <operator pos:start="3341:20" pos:end="3341:20">=</operator> <literal type="number" pos:start="3341:22" pos:end="3341:22">0</literal></expr>;</init> <condition pos:start="3341:25" pos:end="3341:32"><expr pos:start="3341:25" pos:end="3341:31"><name pos:start="3341:25" pos:end="3341:25">i</name> <operator pos:start="3341:27" pos:end="3341:27">&lt;</operator> <name pos:start="3341:29" pos:end="3341:31">ret</name></expr>;</condition> <incr pos:start="3341:34" pos:end="3341:36"><expr pos:start="3341:34" pos:end="3341:36"><name pos:start="3341:34" pos:end="3341:34">i</name><operator pos:start="3341:35" pos:end="3341:36">++</operator></expr></incr>)</control> <block pos:start="3341:39" pos:end="3541:14">{<block_content pos:start="3342:17" pos:end="3541:14">
                <expr_stmt pos:start="3342:17" pos:end="3342:60"><expr pos:start="3342:17" pos:end="3342:59"><name pos:start="3342:17" pos:end="3342:28"><name pos:start="3342:17" pos:end="3342:25">target_ep</name><index pos:start="3342:26" pos:end="3342:28">[<expr pos:start="3342:27" pos:end="3342:27"><name pos:start="3342:27" pos:end="3342:27">i</name></expr>]</index></name><operator pos:start="3342:29" pos:end="3342:29">.</operator><name pos:start="3342:30" pos:end="3342:35">events</name> <operator pos:start="3342:37" pos:end="3342:37">=</operator> <call pos:start="3342:39" pos:end="3342:59"><name pos:start="3342:39" pos:end="3342:45">tswap32</name><argument_list pos:start="3342:46" pos:end="3342:59">(<argument pos:start="3342:47" pos:end="3342:58"><expr pos:start="3342:47" pos:end="3342:58"><name pos:start="3342:47" pos:end="3342:51"><name pos:start="3342:47" pos:end="3342:48">ep</name><index pos:start="3342:49" pos:end="3342:51">[<expr pos:start="3342:50" pos:end="3342:50"><name pos:start="3342:50" pos:end="3342:50">i</name></expr>]</index></name><operator pos:start="3342:52" pos:end="3342:52">.</operator><name pos:start="3342:53" pos:end="3342:58">events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3343:17" pos:end="3343:64"><expr pos:start="3343:17" pos:end="3343:63"><name pos:start="3343:17" pos:end="3343:28"><name pos:start="3343:17" pos:end="3343:25">target_ep</name><index pos:start="3343:26" pos:end="3343:28">[<expr pos:start="3343:27" pos:end="3343:27"><name pos:start="3343:27" pos:end="3343:27">i</name></expr>]</index></name><operator pos:start="3343:29" pos:end="3343:29">.</operator><name pos:start="3343:30" pos:end="3343:37"><name pos:start="3343:30" pos:end="3343:33">data</name><operator pos:start="3343:34" pos:end="3343:34">.</operator><name pos:start="3343:35" pos:end="3343:37">u64</name></name> <operator pos:start="3343:39" pos:end="3343:39">=</operator> <call pos:start="3343:41" pos:end="3343:63"><name pos:start="3343:41" pos:end="3343:47">tswap64</name><argument_list pos:start="3343:48" pos:end="3343:63">(<argument pos:start="3343:49" pos:end="3343:62"><expr pos:start="3343:49" pos:end="3343:62"><name pos:start="3343:49" pos:end="3343:53"><name pos:start="3343:49" pos:end="3343:50">ep</name><index pos:start="3343:51" pos:end="3343:53">[<expr pos:start="3343:52" pos:end="3343:52"><name pos:start="3343:52" pos:end="3343:52">i</name></expr>]</index></name><operator pos:start="3343:54" pos:end="3343:54">.</operator><name pos:start="3343:55" pos:end="3343:62"><name pos:start="3343:55" pos:end="3343:58">data</name><operator pos:start="3343:59" pos:end="3343:59">.</operator><name pos:start="3343:60" pos:end="3343:62">u64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3344:9" pos:end="3348:0"><expr pos:start="3344:9" pos:end="3344:77"><call pos:start="3344:9" pos:end="3344:77"><name pos:start="3344:9" pos:end="3344:19">unlock_user</name><argument_list pos:start="3344:20" pos:end="3344:77">(<argument pos:start="3344:21" pos:end="3344:29"><expr pos:start="3344:21" pos:end="3344:29"><name pos:start="3344:21" pos:end="3344:29">target_ep</name></expr></argument>, <argument pos:start="3344:32" pos:end="3344:35"><expr pos:start="3344:32" pos:end="3344:35"><name pos:start="3344:32" pos:end="3344:35">arg2</name></expr></argument>, <argument pos:start="3344:38" pos:end="3344:76"><expr pos:start="3344:38" pos:end="3344:76"><name pos:start="3344:38" pos:end="3344:40">ret</name> <operator pos:start="3344:42" pos:end="3344:42">*</operator> <sizeof pos:start="3344:44" pos:end="3344:76">sizeof<argument_list pos:start="3344:50" pos:end="3344:76">(<argument pos:start="3344:51" pos:end="3344:75"><expr pos:start="3344:51" pos:end="3344:75">struct <name pos:start="3344:58" pos:end="3344:75">target_epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3345:1" pos:end="3345:6">#<cpp:directive pos:start="3345:2" pos:end="3345:6">endif</cpp:directive></cpp:endif>
<cpp:endif pos:start="3346:1" pos:end="3346:6">#<cpp:directive pos:start="3346:2" pos:end="3346:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3347:1" pos:end="3347:26">#<cpp:directive pos:start="3347:2" pos:end="3347:6">ifdef</cpp:directive> <name pos:start="3347:8" pos:end="3347:26">TARGET_NR_prlimit64</name></cpp:ifdef>
    <case pos:start="3348:5" pos:end="3348:29">case <expr pos:start="3348:10" pos:end="3348:28"><name pos:start="3348:10" pos:end="3348:28">TARGET_NR_prlimit64</name></expr>:</case>
    <block pos:start="3349:5" pos:end="3541:14">{<block_content pos:start="3351:9" pos:end="3541:14">
        <comment type="block" pos:start="3350:9" pos:end="3350:78">/* args: pid, resource number, ptr to new rlimit, ptr to old rlimit */</comment>
        <decl_stmt pos:start="3351:9" pos:end="3351:58"><decl pos:start="3351:9" pos:end="3351:43"><type pos:start="3351:9" pos:end="3351:32"><name pos:start="3351:9" pos:end="3351:30"><name pos:start="3351:9" pos:end="3351:14">struct</name> <name pos:start="3351:16" pos:end="3351:30">target_rlimit64</name></name> <modifier pos:start="3351:32" pos:end="3351:32">*</modifier></type><name pos:start="3351:33" pos:end="3351:43">target_rnew</name></decl>, <decl pos:start="3351:46" pos:end="3351:57"><type ref="prev" pos:start="3351:9" pos:end="3351:32"><modifier pos:start="3351:46" pos:end="3351:46">*</modifier></type><name pos:start="3351:47" pos:end="3351:57">target_rold</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3352:9" pos:end="3352:52"><decl pos:start="3352:9" pos:end="3352:33"><type pos:start="3352:9" pos:end="3352:28"><name pos:start="3352:9" pos:end="3352:28"><name pos:start="3352:9" pos:end="3352:14">struct</name> <name pos:start="3352:16" pos:end="3352:28">host_rlimit64</name></name></type> <name pos:start="3352:30" pos:end="3352:33">rnew</name></decl>, <decl pos:start="3352:36" pos:end="3352:39"><type ref="prev" pos:start="3352:9" pos:end="3352:28"/><name pos:start="3352:36" pos:end="3352:39">rold</name></decl>, <decl pos:start="3352:42" pos:end="3352:51"><type ref="prev" pos:start="3352:9" pos:end="3352:28"><modifier pos:start="3352:42" pos:end="3352:42">*</modifier></type><name pos:start="3352:43" pos:end="3352:47">rnewp</name> <init pos:start="3352:49" pos:end="3352:51">= <expr pos:start="3352:51" pos:end="3352:51"><literal type="number" pos:start="3352:51" pos:end="3352:51">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3353:9" pos:end="3353:53"><decl pos:start="3353:9" pos:end="3353:52"><type pos:start="3353:9" pos:end="3353:11"><name pos:start="3353:9" pos:end="3353:11">int</name></type> <name pos:start="3353:13" pos:end="3353:20">resource</name> <init pos:start="3353:22" pos:end="3353:52">= <expr pos:start="3353:24" pos:end="3353:52"><call pos:start="3353:24" pos:end="3353:52"><name pos:start="3353:24" pos:end="3353:46">target_to_host_resource</name><argument_list pos:start="3353:47" pos:end="3353:52">(<argument pos:start="3353:48" pos:end="3353:51"><expr pos:start="3353:48" pos:end="3353:51"><name pos:start="3353:48" pos:end="3353:51">arg2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3354:9" pos:end="3541:14"><if pos:start="3354:9" pos:end="3541:14">if <condition pos:start="3354:12" pos:end="3354:17">(<expr pos:start="3354:13" pos:end="3354:16"><name pos:start="3354:13" pos:end="3354:16">arg3</name></expr>)</condition> <block pos:start="3354:19" pos:end="3541:14">{<block_content pos:start="3355:13" pos:end="3541:14">
            <if_stmt pos:start="3355:13" pos:end="3541:14"><if pos:start="3355:13" pos:end="3541:14">if <condition pos:start="3355:16" pos:end="3355:69">(<expr pos:start="3355:17" pos:end="3355:68"><operator pos:start="3355:17" pos:end="3355:17">!</operator><call pos:start="3355:18" pos:end="3355:68"><name pos:start="3355:18" pos:end="3355:33">lock_user_struct</name><argument_list pos:start="3355:34" pos:end="3355:68">(<argument pos:start="3355:35" pos:end="3355:45"><expr pos:start="3355:35" pos:end="3355:45"><name pos:start="3355:35" pos:end="3355:45">VERIFY_READ</name></expr></argument>, <argument pos:start="3355:48" pos:end="3355:58"><expr pos:start="3355:48" pos:end="3355:58"><name pos:start="3355:48" pos:end="3355:58">target_rnew</name></expr></argument>, <argument pos:start="3355:61" pos:end="3355:64"><expr pos:start="3355:61" pos:end="3355:64"><name pos:start="3355:61" pos:end="3355:64">arg3</name></expr></argument>, <argument pos:start="3355:67" pos:end="3355:67"><expr pos:start="3355:67" pos:end="3355:67"><literal type="number" pos:start="3355:67" pos:end="3355:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3355:71" pos:end="3541:14">{<block_content pos:start="3356:17" pos:end="3541:14">
                <goto pos:start="3356:17" pos:end="3356:28">goto <name pos:start="3356:22" pos:end="3356:27">efault</name>;</goto>
            <expr_stmt pos:start="3357:13" pos:end="3357:59"><expr pos:start="3357:13" pos:end="3357:58"><name pos:start="3357:13" pos:end="3357:25"><name pos:start="3357:13" pos:end="3357:16">rnew</name><operator pos:start="3357:17" pos:end="3357:17">.</operator><name pos:start="3357:18" pos:end="3357:25">rlim_cur</name></name> <operator pos:start="3357:27" pos:end="3357:27">=</operator> <call pos:start="3357:29" pos:end="3357:58"><name pos:start="3357:29" pos:end="3357:35">tswap64</name><argument_list pos:start="3357:36" pos:end="3357:58">(<argument pos:start="3357:37" pos:end="3357:57"><expr pos:start="3357:37" pos:end="3357:57"><name pos:start="3357:37" pos:end="3357:57"><name pos:start="3357:37" pos:end="3357:47">target_rnew</name><operator pos:start="3357:48" pos:end="3357:49">-&gt;</operator><name pos:start="3357:50" pos:end="3357:57">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3358:13" pos:end="3358:59"><expr pos:start="3358:13" pos:end="3358:58"><name pos:start="3358:13" pos:end="3358:25"><name pos:start="3358:13" pos:end="3358:16">rnew</name><operator pos:start="3358:17" pos:end="3358:17">.</operator><name pos:start="3358:18" pos:end="3358:25">rlim_max</name></name> <operator pos:start="3358:27" pos:end="3358:27">=</operator> <call pos:start="3358:29" pos:end="3358:58"><name pos:start="3358:29" pos:end="3358:35">tswap64</name><argument_list pos:start="3358:36" pos:end="3358:58">(<argument pos:start="3358:37" pos:end="3358:57"><expr pos:start="3358:37" pos:end="3358:57"><name pos:start="3358:37" pos:end="3358:57"><name pos:start="3358:37" pos:end="3358:47">target_rnew</name><operator pos:start="3358:48" pos:end="3358:49">-&gt;</operator><name pos:start="3358:50" pos:end="3358:57">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3359:13" pos:end="3359:53"><expr pos:start="3359:13" pos:end="3359:52"><call pos:start="3359:13" pos:end="3359:52"><name pos:start="3359:13" pos:end="3359:30">unlock_user_struct</name><argument_list pos:start="3359:31" pos:end="3359:52">(<argument pos:start="3359:32" pos:end="3359:42"><expr pos:start="3359:32" pos:end="3359:42"><name pos:start="3359:32" pos:end="3359:42">target_rnew</name></expr></argument>, <argument pos:start="3359:45" pos:end="3359:48"><expr pos:start="3359:45" pos:end="3359:48"><name pos:start="3359:45" pos:end="3359:48">arg3</name></expr></argument>, <argument pos:start="3359:51" pos:end="3359:51"><expr pos:start="3359:51" pos:end="3359:51"><literal type="number" pos:start="3359:51" pos:end="3359:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3360:13" pos:end="3360:26"><expr pos:start="3360:13" pos:end="3360:25"><name pos:start="3360:13" pos:end="3360:17">rnewp</name> <operator pos:start="3360:19" pos:end="3360:19">=</operator> <operator pos:start="3360:21" pos:end="3360:21">&amp;</operator><name pos:start="3360:22" pos:end="3360:25">rnew</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3361:9" pos:end="3361:80"><expr pos:start="3361:9" pos:end="3361:79"><name pos:start="3361:9" pos:end="3361:11">ret</name> <operator pos:start="3361:13" pos:end="3361:13">=</operator> <call pos:start="3361:15" pos:end="3361:79"><name pos:start="3361:15" pos:end="3361:23">get_errno</name><argument_list pos:start="3361:24" pos:end="3361:79">(<argument pos:start="3361:25" pos:end="3361:78"><expr pos:start="3361:25" pos:end="3361:78"><call pos:start="3361:25" pos:end="3361:78"><name pos:start="3361:25" pos:end="3361:37">sys_prlimit64</name><argument_list pos:start="3361:38" pos:end="3361:78">(<argument pos:start="3361:39" pos:end="3361:42"><expr pos:start="3361:39" pos:end="3361:42"><name pos:start="3361:39" pos:end="3361:42">arg1</name></expr></argument>, <argument pos:start="3361:45" pos:end="3361:52"><expr pos:start="3361:45" pos:end="3361:52"><name pos:start="3361:45" pos:end="3361:52">resource</name></expr></argument>, <argument pos:start="3361:55" pos:end="3361:59"><expr pos:start="3361:55" pos:end="3361:59"><name pos:start="3361:55" pos:end="3361:59">rnewp</name></expr></argument>, <argument pos:start="3361:62" pos:end="3361:77"><expr pos:start="3361:62" pos:end="3361:77"><ternary pos:start="3361:62" pos:end="3361:77"><condition pos:start="3361:62" pos:end="3361:67"><expr pos:start="3361:62" pos:end="3361:65"><name pos:start="3361:62" pos:end="3361:65">arg4</name></expr> ?</condition><then pos:start="3361:69" pos:end="3361:73"> <expr pos:start="3361:69" pos:end="3361:73"><operator pos:start="3361:69" pos:end="3361:69">&amp;</operator><name pos:start="3361:70" pos:end="3361:73">rold</name></expr> </then><else pos:start="3361:75" pos:end="3361:77">: <expr pos:start="3361:77" pos:end="3361:77"><literal type="number" pos:start="3361:77" pos:end="3361:77">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3362:9" pos:end="3541:14"><if pos:start="3362:9" pos:end="3541:14">if <condition pos:start="3362:12" pos:end="3362:35">(<expr pos:start="3362:13" pos:end="3362:34"><operator pos:start="3362:13" pos:end="3362:13">!</operator><call pos:start="3362:14" pos:end="3362:26"><name pos:start="3362:14" pos:end="3362:21">is_error</name><argument_list pos:start="3362:22" pos:end="3362:26">(<argument pos:start="3362:23" pos:end="3362:25"><expr pos:start="3362:23" pos:end="3362:25"><name pos:start="3362:23" pos:end="3362:25">ret</name></expr></argument>)</argument_list></call> <operator pos:start="3362:28" pos:end="3362:29">&amp;&amp;</operator> <name pos:start="3362:31" pos:end="3362:34">arg4</name></expr>)</condition> <block pos:start="3362:37" pos:end="3541:14">{<block_content pos:start="3363:13" pos:end="3541:14">
            <if_stmt pos:start="3363:13" pos:end="3541:14"><if pos:start="3363:13" pos:end="3541:14">if <condition pos:start="3363:16" pos:end="3363:70">(<expr pos:start="3363:17" pos:end="3363:69"><operator pos:start="3363:17" pos:end="3363:17">!</operator><call pos:start="3363:18" pos:end="3363:69"><name pos:start="3363:18" pos:end="3363:33">lock_user_struct</name><argument_list pos:start="3363:34" pos:end="3363:69">(<argument pos:start="3363:35" pos:end="3363:46"><expr pos:start="3363:35" pos:end="3363:46"><name pos:start="3363:35" pos:end="3363:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3363:49" pos:end="3363:59"><expr pos:start="3363:49" pos:end="3363:59"><name pos:start="3363:49" pos:end="3363:59">target_rold</name></expr></argument>, <argument pos:start="3363:62" pos:end="3363:65"><expr pos:start="3363:62" pos:end="3363:65"><name pos:start="3363:62" pos:end="3363:65">arg4</name></expr></argument>, <argument pos:start="3363:68" pos:end="3363:68"><expr pos:start="3363:68" pos:end="3363:68"><literal type="number" pos:start="3363:68" pos:end="3363:68">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3363:72" pos:end="3541:14">{<block_content pos:start="3364:17" pos:end="3541:14">
                <goto pos:start="3364:17" pos:end="3364:28">goto <name pos:start="3364:22" pos:end="3364:27">efault</name>;</goto>
            <expr_stmt pos:start="3365:13" pos:end="3365:59"><expr pos:start="3365:13" pos:end="3365:58"><name pos:start="3365:13" pos:end="3365:33"><name pos:start="3365:13" pos:end="3365:23">target_rold</name><operator pos:start="3365:24" pos:end="3365:25">-&gt;</operator><name pos:start="3365:26" pos:end="3365:33">rlim_cur</name></name> <operator pos:start="3365:35" pos:end="3365:35">=</operator> <call pos:start="3365:37" pos:end="3365:58"><name pos:start="3365:37" pos:end="3365:43">tswap64</name><argument_list pos:start="3365:44" pos:end="3365:58">(<argument pos:start="3365:45" pos:end="3365:57"><expr pos:start="3365:45" pos:end="3365:57"><name pos:start="3365:45" pos:end="3365:57"><name pos:start="3365:45" pos:end="3365:48">rold</name><operator pos:start="3365:49" pos:end="3365:49">.</operator><name pos:start="3365:50" pos:end="3365:57">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3366:13" pos:end="3366:59"><expr pos:start="3366:13" pos:end="3366:58"><name pos:start="3366:13" pos:end="3366:33"><name pos:start="3366:13" pos:end="3366:23">target_rold</name><operator pos:start="3366:24" pos:end="3366:25">-&gt;</operator><name pos:start="3366:26" pos:end="3366:33">rlim_max</name></name> <operator pos:start="3366:35" pos:end="3366:35">=</operator> <call pos:start="3366:37" pos:end="3366:58"><name pos:start="3366:37" pos:end="3366:43">tswap64</name><argument_list pos:start="3366:44" pos:end="3366:58">(<argument pos:start="3366:45" pos:end="3366:57"><expr pos:start="3366:45" pos:end="3366:57"><name pos:start="3366:45" pos:end="3366:57"><name pos:start="3366:45" pos:end="3366:48">rold</name><operator pos:start="3366:49" pos:end="3366:49">.</operator><name pos:start="3366:50" pos:end="3366:57">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3367:13" pos:end="3370:0"><expr pos:start="3367:13" pos:end="3367:52"><call pos:start="3367:13" pos:end="3367:52"><name pos:start="3367:13" pos:end="3367:30">unlock_user_struct</name><argument_list pos:start="3367:31" pos:end="3367:52">(<argument pos:start="3367:32" pos:end="3367:42"><expr pos:start="3367:32" pos:end="3367:42"><name pos:start="3367:32" pos:end="3367:42">target_rold</name></expr></argument>, <argument pos:start="3367:45" pos:end="3367:48"><expr pos:start="3367:45" pos:end="3367:48"><name pos:start="3367:45" pos:end="3367:48">arg4</name></expr></argument>, <argument pos:start="3367:51" pos:end="3367:51"><expr pos:start="3367:51" pos:end="3367:51"><literal type="number" pos:start="3367:51" pos:end="3367:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3368:1" pos:end="3368:6">#<cpp:directive pos:start="3368:2" pos:end="3368:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3369:1" pos:end="3369:28">#<cpp:directive pos:start="3369:2" pos:end="3369:6">ifdef</cpp:directive> <name pos:start="3369:8" pos:end="3369:28">TARGET_NR_gethostname</name></cpp:ifdef>
    <case pos:start="3370:5" pos:end="3370:31">case <expr pos:start="3370:10" pos:end="3370:30"><name pos:start="3370:10" pos:end="3370:30">TARGET_NR_gethostname</name></expr>:</case>
    <block pos:start="3371:5" pos:end="3541:14">{<block_content pos:start="3372:9" pos:end="3541:14">
        <decl_stmt pos:start="3372:9" pos:end="3372:60"><decl pos:start="3372:9" pos:end="3372:59"><type pos:start="3372:9" pos:end="3372:14"><name pos:start="3372:9" pos:end="3372:12">char</name> <modifier pos:start="3372:14" pos:end="3372:14">*</modifier></type><name pos:start="3372:15" pos:end="3372:18">name</name> <init pos:start="3372:20" pos:end="3372:59">= <expr pos:start="3372:22" pos:end="3372:59"><call pos:start="3372:22" pos:end="3372:59"><name pos:start="3372:22" pos:end="3372:30">lock_user</name><argument_list pos:start="3372:31" pos:end="3372:59">(<argument pos:start="3372:32" pos:end="3372:43"><expr pos:start="3372:32" pos:end="3372:43"><name pos:start="3372:32" pos:end="3372:43">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3372:46" pos:end="3372:49"><expr pos:start="3372:46" pos:end="3372:49"><name pos:start="3372:46" pos:end="3372:49">arg1</name></expr></argument>, <argument pos:start="3372:52" pos:end="3372:55"><expr pos:start="3372:52" pos:end="3372:55"><name pos:start="3372:52" pos:end="3372:55">arg2</name></expr></argument>, <argument pos:start="3372:58" pos:end="3372:58"><expr pos:start="3372:58" pos:end="3372:58"><literal type="number" pos:start="3372:58" pos:end="3372:58">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3373:9" pos:end="3541:14"><if pos:start="3373:9" pos:end="3376:9">if <condition pos:start="3373:12" pos:end="3373:17">(<expr pos:start="3373:13" pos:end="3373:16"><name pos:start="3373:13" pos:end="3373:16">name</name></expr>)</condition> <block pos:start="3373:19" pos:end="3376:9">{<block_content pos:start="3374:13" pos:end="3375:42">
            <expr_stmt pos:start="3374:13" pos:end="3374:53"><expr pos:start="3374:13" pos:end="3374:52"><name pos:start="3374:13" pos:end="3374:15">ret</name> <operator pos:start="3374:17" pos:end="3374:17">=</operator> <call pos:start="3374:19" pos:end="3374:52"><name pos:start="3374:19" pos:end="3374:27">get_errno</name><argument_list pos:start="3374:28" pos:end="3374:52">(<argument pos:start="3374:29" pos:end="3374:51"><expr pos:start="3374:29" pos:end="3374:51"><call pos:start="3374:29" pos:end="3374:51"><name pos:start="3374:29" pos:end="3374:39">gethostname</name><argument_list pos:start="3374:40" pos:end="3374:51">(<argument pos:start="3374:41" pos:end="3374:44"><expr pos:start="3374:41" pos:end="3374:44"><name pos:start="3374:41" pos:end="3374:44">name</name></expr></argument>, <argument pos:start="3374:47" pos:end="3374:50"><expr pos:start="3374:47" pos:end="3374:50"><name pos:start="3374:47" pos:end="3374:50">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3375:13" pos:end="3375:42"><expr pos:start="3375:13" pos:end="3375:41"><call pos:start="3375:13" pos:end="3375:41"><name pos:start="3375:13" pos:end="3375:23">unlock_user</name><argument_list pos:start="3375:24" pos:end="3375:41">(<argument pos:start="3375:25" pos:end="3375:28"><expr pos:start="3375:25" pos:end="3375:28"><name pos:start="3375:25" pos:end="3375:28">name</name></expr></argument>, <argument pos:start="3375:31" pos:end="3375:34"><expr pos:start="3375:31" pos:end="3375:34"><name pos:start="3375:31" pos:end="3375:34">arg1</name></expr></argument>, <argument pos:start="3375:37" pos:end="3375:40"><expr pos:start="3375:37" pos:end="3375:40"><name pos:start="3375:37" pos:end="3375:40">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3376:11" pos:end="3541:14">else <block pos:start="3376:16" pos:end="3541:14">{<block_content pos:start="3377:13" pos:end="3541:14">
            <expr_stmt pos:start="3377:13" pos:end="3380:0"><expr pos:start="3377:13" pos:end="3377:32"><name pos:start="3377:13" pos:end="3377:15">ret</name> <operator pos:start="3377:17" pos:end="3377:17">=</operator> <operator pos:start="3377:19" pos:end="3377:19">-</operator><name pos:start="3377:20" pos:end="3377:32">TARGET_EFAULT</name></expr>;</expr_stmt>
<cpp:endif pos:start="3378:1" pos:end="3378:6">#<cpp:directive pos:start="3378:2" pos:end="3378:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3379:1" pos:end="3379:34">#<cpp:directive pos:start="3379:2" pos:end="3379:6">ifdef</cpp:directive> <name pos:start="3379:8" pos:end="3379:34">TARGET_NR_atomic_cmpxchg_32</name></cpp:ifdef>
    <case pos:start="3380:5" pos:end="3380:37">case <expr pos:start="3380:10" pos:end="3380:36"><name pos:start="3380:10" pos:end="3380:36">TARGET_NR_atomic_cmpxchg_32</name></expr>:</case>
    <block pos:start="3381:5" pos:end="3541:14">{<block_content pos:start="3383:9" pos:end="3541:14">
        <comment type="block" pos:start="3382:9" pos:end="3382:52">/* should use start_exclusive from main.c */</comment>
        <decl_stmt pos:start="3383:9" pos:end="3383:28"><decl pos:start="3383:9" pos:end="3383:27"><type pos:start="3383:9" pos:end="3383:17"><name pos:start="3383:9" pos:end="3383:17">abi_ulong</name></type> <name pos:start="3383:19" pos:end="3383:27">mem_value</name></decl>;</decl_stmt>
        <if_stmt pos:start="3384:9" pos:end="3541:14"><if pos:start="3384:9" pos:end="3541:14">if <condition pos:start="3384:12" pos:end="3384:42">(<expr pos:start="3384:13" pos:end="3384:41"><call pos:start="3384:13" pos:end="3384:41"><name pos:start="3384:13" pos:end="3384:24">get_user_u32</name><argument_list pos:start="3384:25" pos:end="3384:41">(<argument pos:start="3384:26" pos:end="3384:34"><expr pos:start="3384:26" pos:end="3384:34"><name pos:start="3384:26" pos:end="3384:34">mem_value</name></expr></argument>, <argument pos:start="3384:37" pos:end="3384:40"><expr pos:start="3384:37" pos:end="3384:40"><name pos:start="3384:37" pos:end="3384:40">arg6</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3384:44" pos:end="3541:14">{<block_content pos:start="3385:13" pos:end="3541:14">
            <decl_stmt pos:start="3385:13" pos:end="3385:34"><decl pos:start="3385:13" pos:end="3385:33"><type pos:start="3385:13" pos:end="3385:28"><name pos:start="3385:13" pos:end="3385:28">target_siginfo_t</name></type> <name pos:start="3385:30" pos:end="3385:33">info</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3386:13" pos:end="3386:36"><expr pos:start="3386:13" pos:end="3386:35"><name pos:start="3386:13" pos:end="3386:25"><name pos:start="3386:13" pos:end="3386:16">info</name><operator pos:start="3386:17" pos:end="3386:17">.</operator><name pos:start="3386:18" pos:end="3386:25">si_signo</name></name> <operator pos:start="3386:27" pos:end="3386:27">=</operator> <name pos:start="3386:29" pos:end="3386:35">SIGSEGV</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3387:13" pos:end="3387:30"><expr pos:start="3387:13" pos:end="3387:29"><name pos:start="3387:13" pos:end="3387:25"><name pos:start="3387:13" pos:end="3387:16">info</name><operator pos:start="3387:17" pos:end="3387:17">.</operator><name pos:start="3387:18" pos:end="3387:25">si_errno</name></name> <operator pos:start="3387:27" pos:end="3387:27">=</operator> <literal type="number" pos:start="3387:29" pos:end="3387:29">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3388:13" pos:end="3388:46"><expr pos:start="3388:13" pos:end="3388:45"><name pos:start="3388:13" pos:end="3388:24"><name pos:start="3388:13" pos:end="3388:16">info</name><operator pos:start="3388:17" pos:end="3388:17">.</operator><name pos:start="3388:18" pos:end="3388:24">si_code</name></name> <operator pos:start="3388:26" pos:end="3388:26">=</operator> <name pos:start="3388:28" pos:end="3388:45">TARGET_SEGV_MAPERR</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3389:13" pos:end="3389:50"><expr pos:start="3389:13" pos:end="3389:49"><name pos:start="3389:13" pos:end="3389:42"><name pos:start="3389:13" pos:end="3389:16">info</name><operator pos:start="3389:17" pos:end="3389:17">.</operator><name pos:start="3389:18" pos:end="3389:26">_sifields</name><operator pos:start="3389:27" pos:end="3389:27">.</operator><name pos:start="3389:28" pos:end="3389:36">_sigfault</name><operator pos:start="3389:37" pos:end="3389:37">.</operator><name pos:start="3389:38" pos:end="3389:42">_addr</name></name> <operator pos:start="3389:44" pos:end="3389:44">=</operator> <name pos:start="3389:46" pos:end="3389:49">arg6</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3390:13" pos:end="3390:72"><expr pos:start="3390:13" pos:end="3390:71"><call pos:start="3390:13" pos:end="3390:71"><name pos:start="3390:13" pos:end="3390:24">queue_signal</name><argument_list pos:start="3390:25" pos:end="3390:71">(<argument pos:start="3390:26" pos:end="3390:48"><expr pos:start="3390:26" pos:end="3390:48"><operator pos:start="3390:26" pos:end="3390:26">(</operator><name pos:start="3390:27" pos:end="3390:38">CPUArchState</name> <operator pos:start="3390:40" pos:end="3390:40">*</operator><operator pos:start="3390:41" pos:end="3390:41">)</operator><name pos:start="3390:42" pos:end="3390:48">cpu_env</name></expr></argument>, <argument pos:start="3390:51" pos:end="3390:63"><expr pos:start="3390:51" pos:end="3390:63"><name pos:start="3390:51" pos:end="3390:63"><name pos:start="3390:51" pos:end="3390:54">info</name><operator pos:start="3390:55" pos:end="3390:55">.</operator><name pos:start="3390:56" pos:end="3390:63">si_signo</name></name></expr></argument>, <argument pos:start="3390:66" pos:end="3390:70"><expr pos:start="3390:66" pos:end="3390:70"><operator pos:start="3390:66" pos:end="3390:66">&amp;</operator><name pos:start="3390:67" pos:end="3390:70">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3391:13" pos:end="3391:29"><expr pos:start="3391:13" pos:end="3391:28"><name pos:start="3391:13" pos:end="3391:15">ret</name> <operator pos:start="3391:17" pos:end="3391:17">=</operator> <literal type="number" pos:start="3391:19" pos:end="3391:28">0xdeadbeef</literal></expr>;</expr_stmt>
        <if_stmt pos:start="3392:9" pos:end="3393:37"><if pos:start="3392:9" pos:end="3393:37">if <condition pos:start="3392:12" pos:end="3392:30">(<expr pos:start="3392:13" pos:end="3392:29"><name pos:start="3392:13" pos:end="3392:21">mem_value</name> <operator pos:start="3392:23" pos:end="3392:24">==</operator> <name pos:start="3392:26" pos:end="3392:29">arg2</name></expr>)</condition><block type="pseudo" pos:start="3393:13" pos:end="3393:37"><block_content pos:start="3393:13" pos:end="3393:37">
            <expr_stmt pos:start="3393:13" pos:end="3393:37"><expr pos:start="3393:13" pos:end="3393:36"><call pos:start="3393:13" pos:end="3393:36"><name pos:start="3393:13" pos:end="3393:24">put_user_u32</name><argument_list pos:start="3393:25" pos:end="3393:36">(<argument pos:start="3393:26" pos:end="3393:29"><expr pos:start="3393:26" pos:end="3393:29"><name pos:start="3393:26" pos:end="3393:29">arg1</name></expr></argument>, <argument pos:start="3393:32" pos:end="3393:35"><expr pos:start="3393:32" pos:end="3393:35"><name pos:start="3393:32" pos:end="3393:35">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3394:9" pos:end="3397:0"><expr pos:start="3394:9" pos:end="3394:23"><name pos:start="3394:9" pos:end="3394:11">ret</name> <operator pos:start="3394:13" pos:end="3394:13">=</operator> <name pos:start="3394:15" pos:end="3394:23">mem_value</name></expr>;</expr_stmt>
<cpp:endif pos:start="3395:1" pos:end="3395:6">#<cpp:directive pos:start="3395:2" pos:end="3395:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3396:1" pos:end="3396:31">#<cpp:directive pos:start="3396:2" pos:end="3396:6">ifdef</cpp:directive> <name pos:start="3396:8" pos:end="3396:31">TARGET_NR_atomic_barrier</name></cpp:ifdef>
    <case pos:start="3397:5" pos:end="3397:34">case <expr pos:start="3397:10" pos:end="3397:33"><name pos:start="3397:10" pos:end="3397:33">TARGET_NR_atomic_barrier</name></expr>:</case>
    <block pos:start="3398:5" pos:end="3541:14">{<block_content pos:start="3400:9" pos:end="3541:14">
        <comment type="block" pos:start="3399:9" pos:end="3399:82">/* Like the kernel implementation and the qemu arm barrier, no-op this? */</comment>
        <expr_stmt pos:start="3400:9" pos:end="3403:0"><expr pos:start="3400:9" pos:end="3400:15"><name pos:start="3400:9" pos:end="3400:11">ret</name> <operator pos:start="3400:13" pos:end="3400:13">=</operator> <literal type="number" pos:start="3400:15" pos:end="3400:15">0</literal></expr>;</expr_stmt>
<cpp:endif pos:start="3401:1" pos:end="3401:6">#<cpp:directive pos:start="3401:2" pos:end="3401:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3402:1" pos:end="3402:29">#<cpp:directive pos:start="3402:2" pos:end="3402:6">ifdef</cpp:directive> <name pos:start="3402:8" pos:end="3402:29">TARGET_NR_timer_create</name></cpp:ifdef>
    <case pos:start="3403:5" pos:end="3403:32">case <expr pos:start="3403:10" pos:end="3403:31"><name pos:start="3403:10" pos:end="3403:31">TARGET_NR_timer_create</name></expr>:</case>
    <block pos:start="3404:5" pos:end="3541:14">{<block_content pos:start="3406:9" pos:end="3541:14">
        <comment type="block" pos:start="3405:9" pos:end="3405:78">/* args: clockid_t clockid, struct sigevent *sevp, timer_t *timerid */</comment>
        <decl_stmt pos:start="3406:9" pos:end="3406:65"><decl pos:start="3406:9" pos:end="3406:44"><type pos:start="3406:9" pos:end="3406:23"><name pos:start="3406:9" pos:end="3406:23"><name pos:start="3406:9" pos:end="3406:14">struct</name> <name pos:start="3406:16" pos:end="3406:23">sigevent</name></name></type> <name pos:start="3406:25" pos:end="3406:33">host_sevp</name> <init pos:start="3406:35" pos:end="3406:44">= <expr pos:start="3406:37" pos:end="3406:44"><block pos:start="3406:37" pos:end="3406:44">{ <expr pos:start="3406:39" pos:end="3406:41"><block pos:start="3406:39" pos:end="3406:41">{<expr pos:start="3406:40" pos:end="3406:40"><literal type="number" pos:start="3406:40" pos:end="3406:40">0</literal></expr>}</block></expr>, }</block></expr></init></decl>, <decl pos:start="3406:47" pos:end="3406:64"><type ref="prev" pos:start="3406:9" pos:end="3406:23"><modifier pos:start="3406:47" pos:end="3406:47">*</modifier></type><name pos:start="3406:48" pos:end="3406:57">phost_sevp</name> <init pos:start="3406:59" pos:end="3406:64">= <expr pos:start="3406:61" pos:end="3406:64"><name pos:start="3406:61" pos:end="3406:64">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3407:9" pos:end="3407:25"><decl pos:start="3407:9" pos:end="3407:24"><type pos:start="3407:9" pos:end="3407:11"><name pos:start="3407:9" pos:end="3407:11">int</name></type> <name pos:start="3407:13" pos:end="3407:17">clkid</name> <init pos:start="3407:19" pos:end="3407:24">= <expr pos:start="3407:21" pos:end="3407:24"><name pos:start="3407:21" pos:end="3407:24">arg1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3408:9" pos:end="3408:49"><decl pos:start="3408:9" pos:end="3408:48"><type pos:start="3408:9" pos:end="3408:11"><name pos:start="3408:9" pos:end="3408:11">int</name></type> <name pos:start="3408:13" pos:end="3408:23">timer_index</name> <init pos:start="3408:25" pos:end="3408:48">= <expr pos:start="3408:27" pos:end="3408:48"><call pos:start="3408:27" pos:end="3408:48"><name pos:start="3408:27" pos:end="3408:46">next_free_host_timer</name><argument_list pos:start="3408:47" pos:end="3408:48">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3409:9" pos:end="3541:14"><if pos:start="3409:9" pos:end="3411:9">if <condition pos:start="3409:12" pos:end="3409:28">(<expr pos:start="3409:13" pos:end="3409:27"><name pos:start="3409:13" pos:end="3409:23">timer_index</name> <operator pos:start="3409:25" pos:end="3409:25">&lt;</operator> <literal type="number" pos:start="3409:27" pos:end="3409:27">0</literal></expr>)</condition> <block pos:start="3409:30" pos:end="3411:9">{<block_content pos:start="3410:13" pos:end="3410:33">
            <expr_stmt pos:start="3410:13" pos:end="3410:33"><expr pos:start="3410:13" pos:end="3410:32"><name pos:start="3410:13" pos:end="3410:15">ret</name> <operator pos:start="3410:17" pos:end="3410:17">=</operator> <operator pos:start="3410:19" pos:end="3410:19">-</operator><name pos:start="3410:20" pos:end="3410:32">TARGET_EAGAIN</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3411:11" pos:end="3541:14">else <block pos:start="3411:16" pos:end="3541:14">{<block_content pos:start="3412:13" pos:end="3541:14">
            <decl_stmt pos:start="3412:13" pos:end="3412:61"><decl pos:start="3412:13" pos:end="3412:60"><type pos:start="3412:13" pos:end="3412:21"><name pos:start="3412:13" pos:end="3412:19">timer_t</name> <modifier pos:start="3412:21" pos:end="3412:21">*</modifier></type><name pos:start="3412:22" pos:end="3412:28">phtimer</name> <init pos:start="3412:30" pos:end="3412:60">= <expr pos:start="3412:32" pos:end="3412:60"><name pos:start="3412:32" pos:end="3412:45">g_posix_timers</name>  <operator pos:start="3412:48" pos:end="3412:48">+</operator> <name pos:start="3412:50" pos:end="3412:60">timer_index</name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="3413:13" pos:end="3541:14"><if pos:start="3413:13" pos:end="3541:14">if <condition pos:start="3413:16" pos:end="3413:21">(<expr pos:start="3413:17" pos:end="3413:20"><name pos:start="3413:17" pos:end="3413:20">arg2</name></expr>)</condition> <block pos:start="3413:23" pos:end="3541:14">{<block_content pos:start="3414:17" pos:end="3541:14">
                <expr_stmt pos:start="3414:17" pos:end="3414:40"><expr pos:start="3414:17" pos:end="3414:39"><name pos:start="3414:17" pos:end="3414:26">phost_sevp</name> <operator pos:start="3414:28" pos:end="3414:28">=</operator> <operator pos:start="3414:30" pos:end="3414:30">&amp;</operator><name pos:start="3414:31" pos:end="3414:39">host_sevp</name></expr>;</expr_stmt>
                <expr_stmt pos:start="3415:17" pos:end="3415:64"><expr pos:start="3415:17" pos:end="3415:63"><name pos:start="3415:17" pos:end="3415:19">ret</name> <operator pos:start="3415:21" pos:end="3415:21">=</operator> <call pos:start="3415:23" pos:end="3415:63"><name pos:start="3415:23" pos:end="3415:45">target_to_host_sigevent</name><argument_list pos:start="3415:46" pos:end="3415:63">(<argument pos:start="3415:47" pos:end="3415:56"><expr pos:start="3415:47" pos:end="3415:56"><name pos:start="3415:47" pos:end="3415:56">phost_sevp</name></expr></argument>, <argument pos:start="3415:59" pos:end="3415:62"><expr pos:start="3415:59" pos:end="3415:62"><name pos:start="3415:59" pos:end="3415:62">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="3416:17" pos:end="3541:14"><if pos:start="3416:17" pos:end="3541:14">if <condition pos:start="3416:20" pos:end="3416:29">(<expr pos:start="3416:21" pos:end="3416:28"><name pos:start="3416:21" pos:end="3416:23">ret</name> <operator pos:start="3416:25" pos:end="3416:26">!=</operator> <literal type="number" pos:start="3416:28" pos:end="3416:28">0</literal></expr>)</condition> <block pos:start="3416:31" pos:end="3541:14">{<block_content pos:start="3417:13" pos:end="3541:14">
            <expr_stmt pos:start="3417:13" pos:end="3417:70"><expr pos:start="3417:13" pos:end="3417:69"><name pos:start="3417:13" pos:end="3417:15">ret</name> <operator pos:start="3417:17" pos:end="3417:17">=</operator> <call pos:start="3417:19" pos:end="3417:69"><name pos:start="3417:19" pos:end="3417:27">get_errno</name><argument_list pos:start="3417:28" pos:end="3417:69">(<argument pos:start="3417:29" pos:end="3417:68"><expr pos:start="3417:29" pos:end="3417:68"><call pos:start="3417:29" pos:end="3417:68"><name pos:start="3417:29" pos:end="3417:40">timer_create</name><argument_list pos:start="3417:41" pos:end="3417:68">(<argument pos:start="3417:42" pos:end="3417:46"><expr pos:start="3417:42" pos:end="3417:46"><name pos:start="3417:42" pos:end="3417:46">clkid</name></expr></argument>, <argument pos:start="3417:49" pos:end="3417:58"><expr pos:start="3417:49" pos:end="3417:58"><name pos:start="3417:49" pos:end="3417:58">phost_sevp</name></expr></argument>, <argument pos:start="3417:61" pos:end="3417:67"><expr pos:start="3417:61" pos:end="3417:67"><name pos:start="3417:61" pos:end="3417:67">phtimer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3418:13" pos:end="3541:14"><if pos:start="3418:13" pos:end="3420:13">if <condition pos:start="3418:16" pos:end="3418:20">(<expr pos:start="3418:17" pos:end="3418:19"><name pos:start="3418:17" pos:end="3418:19">ret</name></expr>)</condition> <block pos:start="3418:22" pos:end="3420:13">{<block_content pos:start="3419:17" pos:end="3419:31">
                <expr_stmt pos:start="3419:17" pos:end="3419:31"><expr pos:start="3419:17" pos:end="3419:30"><name pos:start="3419:17" pos:end="3419:23">phtimer</name> <operator pos:start="3419:25" pos:end="3419:25">=</operator> <name pos:start="3419:27" pos:end="3419:30">NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3420:15" pos:end="3541:14">else <block pos:start="3420:20" pos:end="3541:14">{<block_content pos:start="3421:17" pos:end="3541:14">
                <if_stmt pos:start="3421:17" pos:end="3541:14"><if pos:start="3421:17" pos:end="3541:14">if <condition pos:start="3421:20" pos:end="3421:78">(<expr pos:start="3421:21" pos:end="3421:77"><call pos:start="3421:21" pos:end="3421:77"><name pos:start="3421:21" pos:end="3421:28">put_user</name><argument_list pos:start="3421:29" pos:end="3421:77">(<argument pos:start="3421:30" pos:end="3421:54"><expr pos:start="3421:30" pos:end="3421:54"><name pos:start="3421:30" pos:end="3421:40">TIMER_MAGIC</name> <operator pos:start="3421:42" pos:end="3421:42">|</operator> <name pos:start="3421:44" pos:end="3421:54">timer_index</name></expr></argument>, <argument pos:start="3421:57" pos:end="3421:60"><expr pos:start="3421:57" pos:end="3421:60"><name pos:start="3421:57" pos:end="3421:60">arg3</name></expr></argument>, <argument pos:start="3421:63" pos:end="3421:76"><expr pos:start="3421:63" pos:end="3421:76"><name pos:start="3421:63" pos:end="3421:76">target_timer_t</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3421:80" pos:end="3541:14">{<block_content pos:start="3422:21" pos:end="3541:14">
                    <goto pos:start="3422:21" pos:end="3425:0">goto <name pos:start="3422:26" pos:end="3422:31">efault</name>;</goto>
<cpp:endif pos:start="3423:1" pos:end="3423:6">#<cpp:directive pos:start="3423:2" pos:end="3423:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3424:1" pos:end="3424:30">#<cpp:directive pos:start="3424:2" pos:end="3424:6">ifdef</cpp:directive> <name pos:start="3424:8" pos:end="3424:30">TARGET_NR_timer_settime</name></cpp:ifdef>
    <case pos:start="3425:5" pos:end="3425:33">case <expr pos:start="3425:10" pos:end="3425:32"><name pos:start="3425:10" pos:end="3425:32">TARGET_NR_timer_settime</name></expr>:</case>
    <block pos:start="3426:5" pos:end="3541:14">{<block_content pos:start="3429:9" pos:end="3541:14">
        <comment type="block" pos:start="3427:9" pos:end="3428:43">/* args: timer_t timerid, int flags, const struct itimerspec *new_value,
         * struct itimerspec * old_value */</comment>
        <decl_stmt pos:start="3429:9" pos:end="3429:52"><decl pos:start="3429:9" pos:end="3429:51"><type pos:start="3429:9" pos:end="3429:22"><name pos:start="3429:9" pos:end="3429:22">target_timer_t</name></type> <name pos:start="3429:24" pos:end="3429:30">timerid</name> <init pos:start="3429:32" pos:end="3429:51">= <expr pos:start="3429:34" pos:end="3429:51"><call pos:start="3429:34" pos:end="3429:51"><name pos:start="3429:34" pos:end="3429:45">get_timer_id</name><argument_list pos:start="3429:46" pos:end="3429:51">(<argument pos:start="3429:47" pos:end="3429:50"><expr pos:start="3429:47" pos:end="3429:50"><name pos:start="3429:47" pos:end="3429:50">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3430:9" pos:end="3541:14"><if pos:start="3430:9" pos:end="3432:9">if <condition pos:start="3430:12" pos:end="3430:24">(<expr pos:start="3430:13" pos:end="3430:23"><name pos:start="3430:13" pos:end="3430:19">timerid</name> <operator pos:start="3430:21" pos:end="3430:21">&lt;</operator> <literal type="number" pos:start="3430:23" pos:end="3430:23">0</literal></expr>)</condition> <block pos:start="3430:26" pos:end="3432:9">{<block_content pos:start="3431:13" pos:end="3431:26">
            <expr_stmt pos:start="3431:13" pos:end="3431:26"><expr pos:start="3431:13" pos:end="3431:25"><name pos:start="3431:13" pos:end="3431:15">ret</name> <operator pos:start="3431:17" pos:end="3431:17">=</operator> <name pos:start="3431:19" pos:end="3431:25">timerid</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="3432:11" pos:end="3433:9">else if <condition pos:start="3432:19" pos:end="3432:29">(<expr pos:start="3432:20" pos:end="3432:28"><name pos:start="3432:20" pos:end="3432:23">arg3</name> <operator pos:start="3432:25" pos:end="3432:26">==</operator> <literal type="number" pos:start="3432:28" pos:end="3432:28">0</literal></expr>)</condition> <block pos:start="3432:31" pos:end="3433:9">{<block_content>
        </block_content>}</block></if> <else pos:start="3433:11" pos:end="3541:14">else <block pos:start="3433:16" pos:end="3541:14">{<block_content pos:start="3434:13" pos:end="3541:14">
            <decl_stmt pos:start="3434:13" pos:end="3434:53"><decl pos:start="3434:13" pos:end="3434:52"><type pos:start="3434:13" pos:end="3434:19"><name pos:start="3434:13" pos:end="3434:19">timer_t</name></type> <name pos:start="3434:21" pos:end="3434:26">htimer</name> <init pos:start="3434:28" pos:end="3434:52">= <expr pos:start="3434:30" pos:end="3434:52"><name pos:start="3434:30" pos:end="3434:52"><name pos:start="3434:30" pos:end="3434:43">g_posix_timers</name><index pos:start="3434:44" pos:end="3434:52">[<expr pos:start="3434:45" pos:end="3434:51"><name pos:start="3434:45" pos:end="3434:51">timerid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="3435:13" pos:end="3435:69"><decl pos:start="3435:13" pos:end="3435:48"><type pos:start="3435:13" pos:end="3435:29"><name pos:start="3435:13" pos:end="3435:29"><name pos:start="3435:13" pos:end="3435:18">struct</name> <name pos:start="3435:20" pos:end="3435:29">itimerspec</name></name></type> <name pos:start="3435:31" pos:end="3435:39">hspec_new</name> <init pos:start="3435:41" pos:end="3435:48">= <expr pos:start="3435:43" pos:end="3435:48"><block pos:start="3435:43" pos:end="3435:48">{<expr pos:start="3435:44" pos:end="3435:46"><block pos:start="3435:44" pos:end="3435:46">{<expr pos:start="3435:45" pos:end="3435:45"><literal type="number" pos:start="3435:45" pos:end="3435:45">0</literal></expr>}</block></expr>,}</block></expr></init></decl>, <decl pos:start="3435:51" pos:end="3435:68"><type ref="prev" pos:start="3435:13" pos:end="3435:29"/><name pos:start="3435:51" pos:end="3435:59">hspec_old</name> <init pos:start="3435:61" pos:end="3435:68">= <expr pos:start="3435:63" pos:end="3435:68"><block pos:start="3435:63" pos:end="3435:68">{<expr pos:start="3435:64" pos:end="3435:66"><block pos:start="3435:64" pos:end="3435:66">{<expr pos:start="3435:65" pos:end="3435:65"><literal type="number" pos:start="3435:65" pos:end="3435:65">0</literal></expr>}</block></expr>,}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="3436:13" pos:end="3436:56"><expr pos:start="3436:13" pos:end="3436:55"><call pos:start="3436:13" pos:end="3436:55"><name pos:start="3436:13" pos:end="3436:37">target_to_host_itimerspec</name><argument_list pos:start="3436:38" pos:end="3436:55">(<argument pos:start="3436:39" pos:end="3436:48"><expr pos:start="3436:39" pos:end="3436:48"><operator pos:start="3436:39" pos:end="3436:39">&amp;</operator><name pos:start="3436:40" pos:end="3436:48">hspec_new</name></expr></argument>, <argument pos:start="3436:51" pos:end="3436:54"><expr pos:start="3436:51" pos:end="3436:54"><name pos:start="3436:51" pos:end="3436:54">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3437:13" pos:end="3438:79"><expr pos:start="3437:13" pos:end="3438:78"><name pos:start="3437:13" pos:end="3437:15">ret</name> <operator pos:start="3437:17" pos:end="3437:17">=</operator> <call pos:start="3437:19" pos:end="3438:78"><name pos:start="3437:19" pos:end="3437:27">get_errno</name><argument_list pos:start="3437:28" pos:end="3438:78">(
                          <argument pos:start="3438:27" pos:end="3438:77"><expr pos:start="3438:27" pos:end="3438:77"><call pos:start="3438:27" pos:end="3438:77"><name pos:start="3438:27" pos:end="3438:39">timer_settime</name><argument_list pos:start="3438:40" pos:end="3438:77">(<argument pos:start="3438:41" pos:end="3438:46"><expr pos:start="3438:41" pos:end="3438:46"><name pos:start="3438:41" pos:end="3438:46">htimer</name></expr></argument>, <argument pos:start="3438:49" pos:end="3438:52"><expr pos:start="3438:49" pos:end="3438:52"><name pos:start="3438:49" pos:end="3438:52">arg2</name></expr></argument>, <argument pos:start="3438:55" pos:end="3438:64"><expr pos:start="3438:55" pos:end="3438:64"><operator pos:start="3438:55" pos:end="3438:55">&amp;</operator><name pos:start="3438:56" pos:end="3438:64">hspec_new</name></expr></argument>, <argument pos:start="3438:67" pos:end="3438:76"><expr pos:start="3438:67" pos:end="3438:76"><operator pos:start="3438:67" pos:end="3438:67">&amp;</operator><name pos:start="3438:68" pos:end="3438:76">hspec_old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3439:13" pos:end="3442:0"><expr pos:start="3439:13" pos:end="3439:55"><call pos:start="3439:13" pos:end="3439:55"><name pos:start="3439:13" pos:end="3439:37">host_to_target_itimerspec</name><argument_list pos:start="3439:38" pos:end="3439:55">(<argument pos:start="3439:39" pos:end="3439:42"><expr pos:start="3439:39" pos:end="3439:42"><name pos:start="3439:39" pos:end="3439:42">arg2</name></expr></argument>, <argument pos:start="3439:45" pos:end="3439:54"><expr pos:start="3439:45" pos:end="3439:54"><operator pos:start="3439:45" pos:end="3439:45">&amp;</operator><name pos:start="3439:46" pos:end="3439:54">hspec_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3440:1" pos:end="3440:6">#<cpp:directive pos:start="3440:2" pos:end="3440:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3441:1" pos:end="3441:30">#<cpp:directive pos:start="3441:2" pos:end="3441:6">ifdef</cpp:directive> <name pos:start="3441:8" pos:end="3441:30">TARGET_NR_timer_gettime</name></cpp:ifdef>
    <case pos:start="3442:5" pos:end="3442:33">case <expr pos:start="3442:10" pos:end="3442:32"><name pos:start="3442:10" pos:end="3442:32">TARGET_NR_timer_gettime</name></expr>:</case>
    <block pos:start="3443:5" pos:end="3541:14">{<block_content pos:start="3445:9" pos:end="3541:14">
        <comment type="block" pos:start="3444:9" pos:end="3444:66">/* args: timer_t timerid, struct itimerspec *curr_value */</comment>
        <decl_stmt pos:start="3445:9" pos:end="3445:52"><decl pos:start="3445:9" pos:end="3445:51"><type pos:start="3445:9" pos:end="3445:22"><name pos:start="3445:9" pos:end="3445:22">target_timer_t</name></type> <name pos:start="3445:24" pos:end="3445:30">timerid</name> <init pos:start="3445:32" pos:end="3445:51">= <expr pos:start="3445:34" pos:end="3445:51"><call pos:start="3445:34" pos:end="3445:51"><name pos:start="3445:34" pos:end="3445:45">get_timer_id</name><argument_list pos:start="3445:46" pos:end="3445:51">(<argument pos:start="3445:47" pos:end="3445:50"><expr pos:start="3445:47" pos:end="3445:50"><name pos:start="3445:47" pos:end="3445:50">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3446:9" pos:end="3541:14"><if pos:start="3446:9" pos:end="3448:9">if <condition pos:start="3446:12" pos:end="3446:24">(<expr pos:start="3446:13" pos:end="3446:23"><name pos:start="3446:13" pos:end="3446:19">timerid</name> <operator pos:start="3446:21" pos:end="3446:21">&lt;</operator> <literal type="number" pos:start="3446:23" pos:end="3446:23">0</literal></expr>)</condition> <block pos:start="3446:26" pos:end="3448:9">{<block_content pos:start="3447:13" pos:end="3447:26">
            <expr_stmt pos:start="3447:13" pos:end="3447:26"><expr pos:start="3447:13" pos:end="3447:25"><name pos:start="3447:13" pos:end="3447:15">ret</name> <operator pos:start="3447:17" pos:end="3447:17">=</operator> <name pos:start="3447:19" pos:end="3447:25">timerid</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="3448:11" pos:end="3450:9">else if <condition pos:start="3448:19" pos:end="3448:25">(<expr pos:start="3448:20" pos:end="3448:24"><operator pos:start="3448:20" pos:end="3448:20">!</operator><name pos:start="3448:21" pos:end="3448:24">arg2</name></expr>)</condition> <block pos:start="3448:27" pos:end="3450:9">{<block_content pos:start="3449:13" pos:end="3449:33">
            <expr_stmt pos:start="3449:13" pos:end="3449:33"><expr pos:start="3449:13" pos:end="3449:32"><name pos:start="3449:13" pos:end="3449:15">ret</name> <operator pos:start="3449:17" pos:end="3449:17">=</operator> <operator pos:start="3449:19" pos:end="3449:19">-</operator><name pos:start="3449:20" pos:end="3449:32">TARGET_EFAULT</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3450:11" pos:end="3541:14">else <block pos:start="3450:16" pos:end="3541:14">{<block_content pos:start="3451:13" pos:end="3541:14">
            <decl_stmt pos:start="3451:13" pos:end="3451:53"><decl pos:start="3451:13" pos:end="3451:52"><type pos:start="3451:13" pos:end="3451:19"><name pos:start="3451:13" pos:end="3451:19">timer_t</name></type> <name pos:start="3451:21" pos:end="3451:26">htimer</name> <init pos:start="3451:28" pos:end="3451:52">= <expr pos:start="3451:30" pos:end="3451:52"><name pos:start="3451:30" pos:end="3451:52"><name pos:start="3451:30" pos:end="3451:43">g_posix_timers</name><index pos:start="3451:44" pos:end="3451:52">[<expr pos:start="3451:45" pos:end="3451:51"><name pos:start="3451:45" pos:end="3451:51">timerid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="3452:13" pos:end="3452:36"><decl pos:start="3452:13" pos:end="3452:35"><type pos:start="3452:13" pos:end="3452:29"><name pos:start="3452:13" pos:end="3452:29"><name pos:start="3452:13" pos:end="3452:18">struct</name> <name pos:start="3452:20" pos:end="3452:29">itimerspec</name></name></type> <name pos:start="3452:31" pos:end="3452:35">hspec</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3453:13" pos:end="3453:59"><expr pos:start="3453:13" pos:end="3453:58"><name pos:start="3453:13" pos:end="3453:15">ret</name> <operator pos:start="3453:17" pos:end="3453:17">=</operator> <call pos:start="3453:19" pos:end="3453:58"><name pos:start="3453:19" pos:end="3453:27">get_errno</name><argument_list pos:start="3453:28" pos:end="3453:58">(<argument pos:start="3453:29" pos:end="3453:57"><expr pos:start="3453:29" pos:end="3453:57"><call pos:start="3453:29" pos:end="3453:57"><name pos:start="3453:29" pos:end="3453:41">timer_gettime</name><argument_list pos:start="3453:42" pos:end="3453:57">(<argument pos:start="3453:43" pos:end="3453:48"><expr pos:start="3453:43" pos:end="3453:48"><name pos:start="3453:43" pos:end="3453:48">htimer</name></expr></argument>, <argument pos:start="3453:51" pos:end="3453:56"><expr pos:start="3453:51" pos:end="3453:56"><operator pos:start="3453:51" pos:end="3453:51">&amp;</operator><name pos:start="3453:52" pos:end="3453:56">hspec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3454:13" pos:end="3541:14"><if pos:start="3454:13" pos:end="3541:14">if <condition pos:start="3454:16" pos:end="3454:56">(<expr pos:start="3454:17" pos:end="3454:55"><call pos:start="3454:17" pos:end="3454:55"><name pos:start="3454:17" pos:end="3454:41">host_to_target_itimerspec</name><argument_list pos:start="3454:42" pos:end="3454:55">(<argument pos:start="3454:43" pos:end="3454:46"><expr pos:start="3454:43" pos:end="3454:46"><name pos:start="3454:43" pos:end="3454:46">arg2</name></expr></argument>, <argument pos:start="3454:49" pos:end="3454:54"><expr pos:start="3454:49" pos:end="3454:54"><operator pos:start="3454:49" pos:end="3454:49">&amp;</operator><name pos:start="3454:50" pos:end="3454:54">hspec</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3454:58" pos:end="3541:14">{<block_content pos:start="3455:17" pos:end="3541:14">
                <expr_stmt pos:start="3455:17" pos:end="3458:0"><expr pos:start="3455:17" pos:end="3455:36"><name pos:start="3455:17" pos:end="3455:19">ret</name> <operator pos:start="3455:21" pos:end="3455:21">=</operator> <operator pos:start="3455:23" pos:end="3455:23">-</operator><name pos:start="3455:24" pos:end="3455:36">TARGET_EFAULT</name></expr>;</expr_stmt>
<cpp:endif pos:start="3456:1" pos:end="3456:6">#<cpp:directive pos:start="3456:2" pos:end="3456:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3457:1" pos:end="3457:33">#<cpp:directive pos:start="3457:2" pos:end="3457:6">ifdef</cpp:directive> <name pos:start="3457:8" pos:end="3457:33">TARGET_NR_timer_getoverrun</name></cpp:ifdef>
    <case pos:start="3458:5" pos:end="3458:36">case <expr pos:start="3458:10" pos:end="3458:35"><name pos:start="3458:10" pos:end="3458:35">TARGET_NR_timer_getoverrun</name></expr>:</case>
    <block pos:start="3459:5" pos:end="3541:14">{<block_content pos:start="3461:9" pos:end="3541:14">
        <comment type="block" pos:start="3460:9" pos:end="3460:35">/* args: timer_t timerid */</comment>
        <decl_stmt pos:start="3461:9" pos:end="3461:52"><decl pos:start="3461:9" pos:end="3461:51"><type pos:start="3461:9" pos:end="3461:22"><name pos:start="3461:9" pos:end="3461:22">target_timer_t</name></type> <name pos:start="3461:24" pos:end="3461:30">timerid</name> <init pos:start="3461:32" pos:end="3461:51">= <expr pos:start="3461:34" pos:end="3461:51"><call pos:start="3461:34" pos:end="3461:51"><name pos:start="3461:34" pos:end="3461:45">get_timer_id</name><argument_list pos:start="3461:46" pos:end="3461:51">(<argument pos:start="3461:47" pos:end="3461:50"><expr pos:start="3461:47" pos:end="3461:50"><name pos:start="3461:47" pos:end="3461:50">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3462:9" pos:end="3541:14"><if pos:start="3462:9" pos:end="3464:9">if <condition pos:start="3462:12" pos:end="3462:24">(<expr pos:start="3462:13" pos:end="3462:23"><name pos:start="3462:13" pos:end="3462:19">timerid</name> <operator pos:start="3462:21" pos:end="3462:21">&lt;</operator> <literal type="number" pos:start="3462:23" pos:end="3462:23">0</literal></expr>)</condition> <block pos:start="3462:26" pos:end="3464:9">{<block_content pos:start="3463:13" pos:end="3463:26">
            <expr_stmt pos:start="3463:13" pos:end="3463:26"><expr pos:start="3463:13" pos:end="3463:25"><name pos:start="3463:13" pos:end="3463:15">ret</name> <operator pos:start="3463:17" pos:end="3463:17">=</operator> <name pos:start="3463:19" pos:end="3463:25">timerid</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3464:11" pos:end="3541:14">else <block pos:start="3464:16" pos:end="3541:14">{<block_content pos:start="3465:13" pos:end="3541:14">
            <decl_stmt pos:start="3465:13" pos:end="3465:53"><decl pos:start="3465:13" pos:end="3465:52"><type pos:start="3465:13" pos:end="3465:19"><name pos:start="3465:13" pos:end="3465:19">timer_t</name></type> <name pos:start="3465:21" pos:end="3465:26">htimer</name> <init pos:start="3465:28" pos:end="3465:52">= <expr pos:start="3465:30" pos:end="3465:52"><name pos:start="3465:30" pos:end="3465:52"><name pos:start="3465:30" pos:end="3465:43">g_posix_timers</name><index pos:start="3465:44" pos:end="3465:52">[<expr pos:start="3465:45" pos:end="3465:51"><name pos:start="3465:45" pos:end="3465:51">timerid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="3466:13" pos:end="3466:54"><expr pos:start="3466:13" pos:end="3466:53"><name pos:start="3466:13" pos:end="3466:15">ret</name> <operator pos:start="3466:17" pos:end="3466:17">=</operator> <call pos:start="3466:19" pos:end="3466:53"><name pos:start="3466:19" pos:end="3466:27">get_errno</name><argument_list pos:start="3466:28" pos:end="3466:53">(<argument pos:start="3466:29" pos:end="3466:52"><expr pos:start="3466:29" pos:end="3466:52"><call pos:start="3466:29" pos:end="3466:52"><name pos:start="3466:29" pos:end="3466:44">timer_getoverrun</name><argument_list pos:start="3466:45" pos:end="3466:52">(<argument pos:start="3466:46" pos:end="3466:51"><expr pos:start="3466:46" pos:end="3466:51"><name pos:start="3466:46" pos:end="3466:51">htimer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3467:9" pos:end="3470:0"><expr pos:start="3467:9" pos:end="3467:32"><call pos:start="3467:9" pos:end="3467:32"><name pos:start="3467:9" pos:end="3467:27">fd_trans_unregister</name><argument_list pos:start="3467:28" pos:end="3467:32">(<argument pos:start="3467:29" pos:end="3467:31"><expr pos:start="3467:29" pos:end="3467:31"><name pos:start="3467:29" pos:end="3467:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3468:1" pos:end="3468:6">#<cpp:directive pos:start="3468:2" pos:end="3468:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="3469:1" pos:end="3469:29">#<cpp:directive pos:start="3469:2" pos:end="3469:6">ifdef</cpp:directive> <name pos:start="3469:8" pos:end="3469:29">TARGET_NR_timer_delete</name></cpp:ifdef>
    <case pos:start="3470:5" pos:end="3470:32">case <expr pos:start="3470:10" pos:end="3470:31"><name pos:start="3470:10" pos:end="3470:31">TARGET_NR_timer_delete</name></expr>:</case>
    <block pos:start="3471:5" pos:end="3541:14">{<block_content pos:start="3473:9" pos:end="3541:14">
        <comment type="block" pos:start="3472:9" pos:end="3472:35">/* args: timer_t timerid */</comment>
        <decl_stmt pos:start="3473:9" pos:end="3473:52"><decl pos:start="3473:9" pos:end="3473:51"><type pos:start="3473:9" pos:end="3473:22"><name pos:start="3473:9" pos:end="3473:22">target_timer_t</name></type> <name pos:start="3473:24" pos:end="3473:30">timerid</name> <init pos:start="3473:32" pos:end="3473:51">= <expr pos:start="3473:34" pos:end="3473:51"><call pos:start="3473:34" pos:end="3473:51"><name pos:start="3473:34" pos:end="3473:45">get_timer_id</name><argument_list pos:start="3473:46" pos:end="3473:51">(<argument pos:start="3473:47" pos:end="3473:50"><expr pos:start="3473:47" pos:end="3473:50"><name pos:start="3473:47" pos:end="3473:50">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3474:9" pos:end="3541:14"><if pos:start="3474:9" pos:end="3476:9">if <condition pos:start="3474:12" pos:end="3474:24">(<expr pos:start="3474:13" pos:end="3474:23"><name pos:start="3474:13" pos:end="3474:19">timerid</name> <operator pos:start="3474:21" pos:end="3474:21">&lt;</operator> <literal type="number" pos:start="3474:23" pos:end="3474:23">0</literal></expr>)</condition> <block pos:start="3474:26" pos:end="3476:9">{<block_content pos:start="3475:13" pos:end="3475:26">
            <expr_stmt pos:start="3475:13" pos:end="3475:26"><expr pos:start="3475:13" pos:end="3475:25"><name pos:start="3475:13" pos:end="3475:15">ret</name> <operator pos:start="3475:17" pos:end="3475:17">=</operator> <name pos:start="3475:19" pos:end="3475:25">timerid</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3476:11" pos:end="3541:14">else <block pos:start="3476:16" pos:end="3541:14">{<block_content pos:start="3477:13" pos:end="3541:14">
            <decl_stmt pos:start="3477:13" pos:end="3477:53"><decl pos:start="3477:13" pos:end="3477:52"><type pos:start="3477:13" pos:end="3477:19"><name pos:start="3477:13" pos:end="3477:19">timer_t</name></type> <name pos:start="3477:21" pos:end="3477:26">htimer</name> <init pos:start="3477:28" pos:end="3477:52">= <expr pos:start="3477:30" pos:end="3477:52"><name pos:start="3477:30" pos:end="3477:52"><name pos:start="3477:30" pos:end="3477:43">g_posix_timers</name><index pos:start="3477:44" pos:end="3477:52">[<expr pos:start="3477:45" pos:end="3477:51"><name pos:start="3477:45" pos:end="3477:51">timerid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="3478:13" pos:end="3478:50"><expr pos:start="3478:13" pos:end="3478:49"><name pos:start="3478:13" pos:end="3478:15">ret</name> <operator pos:start="3478:17" pos:end="3478:17">=</operator> <call pos:start="3478:19" pos:end="3478:49"><name pos:start="3478:19" pos:end="3478:27">get_errno</name><argument_list pos:start="3478:28" pos:end="3478:49">(<argument pos:start="3478:29" pos:end="3478:48"><expr pos:start="3478:29" pos:end="3478:48"><call pos:start="3478:29" pos:end="3478:48"><name pos:start="3478:29" pos:end="3478:40">timer_delete</name><argument_list pos:start="3478:41" pos:end="3478:48">(<argument pos:start="3478:42" pos:end="3478:47"><expr pos:start="3478:42" pos:end="3478:47"><name pos:start="3478:42" pos:end="3478:47">htimer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3479:13" pos:end="3482:0"><expr pos:start="3479:13" pos:end="3479:39"><name pos:start="3479:13" pos:end="3479:35"><name pos:start="3479:13" pos:end="3479:26">g_posix_timers</name><index pos:start="3479:27" pos:end="3479:35">[<expr pos:start="3479:28" pos:end="3479:34"><name pos:start="3479:28" pos:end="3479:34">timerid</name></expr>]</index></name> <operator pos:start="3479:37" pos:end="3479:37">=</operator> <literal type="number" pos:start="3479:39" pos:end="3479:39">0</literal></expr>;</expr_stmt>
<cpp:endif pos:start="3480:1" pos:end="3480:6">#<cpp:directive pos:start="3480:2" pos:end="3480:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3481:1" pos:end="3481:64">#<cpp:directive pos:start="3481:2" pos:end="3481:3">if</cpp:directive> <expr pos:start="3481:5" pos:end="3481:64"><call pos:start="3481:5" pos:end="3481:37"><name pos:start="3481:5" pos:end="3481:11">defined</name><argument_list pos:start="3481:12" pos:end="3481:37">(<argument pos:start="3481:13" pos:end="3481:36"><expr pos:start="3481:13" pos:end="3481:36"><name pos:start="3481:13" pos:end="3481:36">TARGET_NR_timerfd_create</name></expr></argument>)</argument_list></call> <operator pos:start="3481:39" pos:end="3481:40">&amp;&amp;</operator> <call pos:start="3481:42" pos:end="3481:64"><name pos:start="3481:42" pos:end="3481:48">defined</name><argument_list pos:start="3481:49" pos:end="3481:64">(<argument pos:start="3481:50" pos:end="3481:63"><expr pos:start="3481:50" pos:end="3481:63"><name pos:start="3481:50" pos:end="3481:63">CONFIG_TIMERFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3482:5" pos:end="3482:34">case <expr pos:start="3482:10" pos:end="3482:33"><name pos:start="3482:10" pos:end="3482:33">TARGET_NR_timerfd_create</name></expr>:</case>
        <expr_stmt pos:start="3483:9" pos:end="3487:0"><expr pos:start="3483:9" pos:end="3484:63"><name pos:start="3483:9" pos:end="3483:11">ret</name> <operator pos:start="3483:13" pos:end="3483:13">=</operator> <call pos:start="3483:15" pos:end="3484:63"><name pos:start="3483:15" pos:end="3483:23">get_errno</name><argument_list pos:start="3483:24" pos:end="3484:63">(<argument pos:start="3483:25" pos:end="3484:62"><expr pos:start="3483:25" pos:end="3484:62"><call pos:start="3483:25" pos:end="3484:62"><name pos:start="3483:25" pos:end="3483:38">timerfd_create</name><argument_list pos:start="3483:39" pos:end="3484:62">(<argument pos:start="3483:40" pos:end="3483:43"><expr pos:start="3483:40" pos:end="3483:43"><name pos:start="3483:40" pos:end="3483:43">arg1</name></expr></argument>,
                <argument pos:start="3484:17" pos:end="3484:61"><expr pos:start="3484:17" pos:end="3484:61"><call pos:start="3484:17" pos:end="3484:61"><name pos:start="3484:17" pos:end="3484:38">target_to_host_bitmask</name><argument_list pos:start="3484:39" pos:end="3484:61">(<argument pos:start="3484:40" pos:end="3484:43"><expr pos:start="3484:40" pos:end="3484:43"><name pos:start="3484:40" pos:end="3484:43">arg2</name></expr></argument>, <argument pos:start="3484:46" pos:end="3484:60"><expr pos:start="3484:46" pos:end="3484:60"><name pos:start="3484:46" pos:end="3484:60">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3485:1" pos:end="3485:6">#<cpp:directive pos:start="3485:2" pos:end="3485:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3486:1" pos:end="3486:65">#<cpp:directive pos:start="3486:2" pos:end="3486:3">if</cpp:directive> <expr pos:start="3486:5" pos:end="3486:65"><call pos:start="3486:5" pos:end="3486:38"><name pos:start="3486:5" pos:end="3486:11">defined</name><argument_list pos:start="3486:12" pos:end="3486:38">(<argument pos:start="3486:13" pos:end="3486:37"><expr pos:start="3486:13" pos:end="3486:37"><name pos:start="3486:13" pos:end="3486:37">TARGET_NR_timerfd_gettime</name></expr></argument>)</argument_list></call> <operator pos:start="3486:40" pos:end="3486:41">&amp;&amp;</operator> <call pos:start="3486:43" pos:end="3486:65"><name pos:start="3486:43" pos:end="3486:49">defined</name><argument_list pos:start="3486:50" pos:end="3486:65">(<argument pos:start="3486:51" pos:end="3486:64"><expr pos:start="3486:51" pos:end="3486:64"><name pos:start="3486:51" pos:end="3486:64">CONFIG_TIMERFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3487:5" pos:end="3487:35">case <expr pos:start="3487:10" pos:end="3487:34"><name pos:start="3487:10" pos:end="3487:34">TARGET_NR_timerfd_gettime</name></expr>:</case>
        <block pos:start="3488:9" pos:end="3541:14">{<block_content pos:start="3489:13" pos:end="3541:14">
            <decl_stmt pos:start="3489:13" pos:end="3489:39"><decl pos:start="3489:13" pos:end="3489:38"><type pos:start="3489:13" pos:end="3489:29"><name pos:start="3489:13" pos:end="3489:29"><name pos:start="3489:13" pos:end="3489:18">struct</name> <name pos:start="3489:20" pos:end="3489:29">itimerspec</name></name></type> <name pos:start="3489:31" pos:end="3489:38">its_curr</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3490:13" pos:end="3490:62"><expr pos:start="3490:13" pos:end="3490:61"><name pos:start="3490:13" pos:end="3490:15">ret</name> <operator pos:start="3490:17" pos:end="3490:17">=</operator> <call pos:start="3490:19" pos:end="3490:61"><name pos:start="3490:19" pos:end="3490:27">get_errno</name><argument_list pos:start="3490:28" pos:end="3490:61">(<argument pos:start="3490:29" pos:end="3490:60"><expr pos:start="3490:29" pos:end="3490:60"><call pos:start="3490:29" pos:end="3490:60"><name pos:start="3490:29" pos:end="3490:43">timerfd_gettime</name><argument_list pos:start="3490:44" pos:end="3490:60">(<argument pos:start="3490:45" pos:end="3490:48"><expr pos:start="3490:45" pos:end="3490:48"><name pos:start="3490:45" pos:end="3490:48">arg1</name></expr></argument>, <argument pos:start="3490:51" pos:end="3490:59"><expr pos:start="3490:51" pos:end="3490:59"><operator pos:start="3490:51" pos:end="3490:51">&amp;</operator><name pos:start="3490:52" pos:end="3490:59">its_curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3491:13" pos:end="3541:14"><if pos:start="3491:13" pos:end="3541:14">if <condition pos:start="3491:16" pos:end="3491:67">(<expr pos:start="3491:17" pos:end="3491:66"><name pos:start="3491:17" pos:end="3491:20">arg2</name> <operator pos:start="3491:22" pos:end="3491:23">&amp;&amp;</operator> <call pos:start="3491:25" pos:end="3491:66"><name pos:start="3491:25" pos:end="3491:49">host_to_target_itimerspec</name><argument_list pos:start="3491:50" pos:end="3491:66">(<argument pos:start="3491:51" pos:end="3491:54"><expr pos:start="3491:51" pos:end="3491:54"><name pos:start="3491:51" pos:end="3491:54">arg2</name></expr></argument>, <argument pos:start="3491:57" pos:end="3491:65"><expr pos:start="3491:57" pos:end="3491:65"><operator pos:start="3491:57" pos:end="3491:57">&amp;</operator><name pos:start="3491:58" pos:end="3491:65">its_curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3491:69" pos:end="3541:14">{<block_content pos:start="3492:17" pos:end="3541:14">
                <goto pos:start="3492:17" pos:end="3495:0">goto <name pos:start="3492:22" pos:end="3492:27">efault</name>;</goto>
<cpp:endif pos:start="3493:1" pos:end="3493:6">#<cpp:directive pos:start="3493:2" pos:end="3493:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3494:1" pos:end="3494:65">#<cpp:directive pos:start="3494:2" pos:end="3494:3">if</cpp:directive> <expr pos:start="3494:5" pos:end="3494:65"><call pos:start="3494:5" pos:end="3494:38"><name pos:start="3494:5" pos:end="3494:11">defined</name><argument_list pos:start="3494:12" pos:end="3494:38">(<argument pos:start="3494:13" pos:end="3494:37"><expr pos:start="3494:13" pos:end="3494:37"><name pos:start="3494:13" pos:end="3494:37">TARGET_NR_timerfd_settime</name></expr></argument>)</argument_list></call> <operator pos:start="3494:40" pos:end="3494:41">&amp;&amp;</operator> <call pos:start="3494:43" pos:end="3494:65"><name pos:start="3494:43" pos:end="3494:49">defined</name><argument_list pos:start="3494:50" pos:end="3494:65">(<argument pos:start="3494:51" pos:end="3494:64"><expr pos:start="3494:51" pos:end="3494:64"><name pos:start="3494:51" pos:end="3494:64">CONFIG_TIMERFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3495:5" pos:end="3495:35">case <expr pos:start="3495:10" pos:end="3495:34"><name pos:start="3495:10" pos:end="3495:34">TARGET_NR_timerfd_settime</name></expr>:</case>
        <block pos:start="3496:9" pos:end="3541:14">{<block_content pos:start="3497:13" pos:end="3541:14">
            <decl_stmt pos:start="3497:13" pos:end="3497:55"><decl pos:start="3497:13" pos:end="3497:37"><type pos:start="3497:13" pos:end="3497:29"><name pos:start="3497:13" pos:end="3497:29"><name pos:start="3497:13" pos:end="3497:18">struct</name> <name pos:start="3497:20" pos:end="3497:29">itimerspec</name></name></type> <name pos:start="3497:31" pos:end="3497:37">its_new</name></decl>, <decl pos:start="3497:40" pos:end="3497:46"><type ref="prev" pos:start="3497:13" pos:end="3497:29"/><name pos:start="3497:40" pos:end="3497:46">its_old</name></decl>, <decl pos:start="3497:49" pos:end="3497:54"><type ref="prev" pos:start="3497:13" pos:end="3497:29"><modifier pos:start="3497:49" pos:end="3497:49">*</modifier></type><name pos:start="3497:50" pos:end="3497:54">p_new</name></decl>;</decl_stmt>
            <if_stmt pos:start="3498:13" pos:end="3541:14"><if pos:start="3498:13" pos:end="3541:14">if <condition pos:start="3498:16" pos:end="3498:21">(<expr pos:start="3498:17" pos:end="3498:20"><name pos:start="3498:17" pos:end="3498:20">arg3</name></expr>)</condition> <block pos:start="3498:23" pos:end="3541:14">{<block_content pos:start="3499:17" pos:end="3541:14">
                <if_stmt pos:start="3499:17" pos:end="3541:14"><if pos:start="3499:17" pos:end="3502:13">if <condition pos:start="3499:20" pos:end="3499:62">(<expr pos:start="3499:21" pos:end="3499:61"><call pos:start="3499:21" pos:end="3499:61"><name pos:start="3499:21" pos:end="3499:45">target_to_host_itimerspec</name><argument_list pos:start="3499:46" pos:end="3499:61">(<argument pos:start="3499:47" pos:end="3499:54"><expr pos:start="3499:47" pos:end="3499:54"><operator pos:start="3499:47" pos:end="3499:47">&amp;</operator><name pos:start="3499:48" pos:end="3499:54">its_new</name></expr></argument>, <argument pos:start="3499:57" pos:end="3499:60"><expr pos:start="3499:57" pos:end="3499:60"><name pos:start="3499:57" pos:end="3499:60">arg3</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3499:64" pos:end="3502:13">{<block_content pos:start="3500:21" pos:end="3501:33">
                    <goto pos:start="3500:21" pos:end="3500:32">goto <name pos:start="3500:26" pos:end="3500:31">efault</name>;</goto>
                <expr_stmt pos:start="3501:17" pos:end="3501:33"><expr pos:start="3501:17" pos:end="3501:32"><name pos:start="3501:17" pos:end="3501:21">p_new</name> <operator pos:start="3501:23" pos:end="3501:23">=</operator> <operator pos:start="3501:25" pos:end="3501:25">&amp;</operator><name pos:start="3501:26" pos:end="3501:32">its_new</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="3502:15" pos:end="3541:14">else <block pos:start="3502:20" pos:end="3541:14">{<block_content pos:start="3503:17" pos:end="3541:14">
                <expr_stmt pos:start="3503:17" pos:end="3503:29"><expr pos:start="3503:17" pos:end="3503:28"><name pos:start="3503:17" pos:end="3503:21">p_new</name> <operator pos:start="3503:23" pos:end="3503:23">=</operator> <name pos:start="3503:25" pos:end="3503:28">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3504:13" pos:end="3504:74"><expr pos:start="3504:13" pos:end="3504:73"><name pos:start="3504:13" pos:end="3504:15">ret</name> <operator pos:start="3504:17" pos:end="3504:17">=</operator> <call pos:start="3504:19" pos:end="3504:73"><name pos:start="3504:19" pos:end="3504:27">get_errno</name><argument_list pos:start="3504:28" pos:end="3504:73">(<argument pos:start="3504:29" pos:end="3504:72"><expr pos:start="3504:29" pos:end="3504:72"><call pos:start="3504:29" pos:end="3504:72"><name pos:start="3504:29" pos:end="3504:43">timerfd_settime</name><argument_list pos:start="3504:44" pos:end="3504:72">(<argument pos:start="3504:45" pos:end="3504:48"><expr pos:start="3504:45" pos:end="3504:48"><name pos:start="3504:45" pos:end="3504:48">arg1</name></expr></argument>, <argument pos:start="3504:51" pos:end="3504:54"><expr pos:start="3504:51" pos:end="3504:54"><name pos:start="3504:51" pos:end="3504:54">arg2</name></expr></argument>, <argument pos:start="3504:57" pos:end="3504:61"><expr pos:start="3504:57" pos:end="3504:61"><name pos:start="3504:57" pos:end="3504:61">p_new</name></expr></argument>, <argument pos:start="3504:64" pos:end="3504:71"><expr pos:start="3504:64" pos:end="3504:71"><operator pos:start="3504:64" pos:end="3504:64">&amp;</operator><name pos:start="3504:65" pos:end="3504:71">its_old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3505:13" pos:end="3541:14"><if pos:start="3505:13" pos:end="3541:14">if <condition pos:start="3505:16" pos:end="3505:66">(<expr pos:start="3505:17" pos:end="3505:65"><name pos:start="3505:17" pos:end="3505:20">arg4</name> <operator pos:start="3505:22" pos:end="3505:23">&amp;&amp;</operator> <call pos:start="3505:25" pos:end="3505:65"><name pos:start="3505:25" pos:end="3505:49">host_to_target_itimerspec</name><argument_list pos:start="3505:50" pos:end="3505:65">(<argument pos:start="3505:51" pos:end="3505:54"><expr pos:start="3505:51" pos:end="3505:54"><name pos:start="3505:51" pos:end="3505:54">arg4</name></expr></argument>, <argument pos:start="3505:57" pos:end="3505:64"><expr pos:start="3505:57" pos:end="3505:64"><operator pos:start="3505:57" pos:end="3505:57">&amp;</operator><name pos:start="3505:58" pos:end="3505:64">its_old</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3505:68" pos:end="3541:14">{<block_content pos:start="3506:17" pos:end="3541:14">
                <goto pos:start="3506:17" pos:end="3509:0">goto <name pos:start="3506:22" pos:end="3506:27">efault</name>;</goto>
<cpp:endif pos:start="3507:1" pos:end="3507:6">#<cpp:directive pos:start="3507:2" pos:end="3507:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3508:1" pos:end="3508:61">#<cpp:directive pos:start="3508:2" pos:end="3508:3">if</cpp:directive> <expr pos:start="3508:5" pos:end="3508:61"><call pos:start="3508:5" pos:end="3508:33"><name pos:start="3508:5" pos:end="3508:11">defined</name><argument_list pos:start="3508:12" pos:end="3508:33">(<argument pos:start="3508:13" pos:end="3508:32"><expr pos:start="3508:13" pos:end="3508:32"><name pos:start="3508:13" pos:end="3508:32">TARGET_NR_ioprio_get</name></expr></argument>)</argument_list></call> <operator pos:start="3508:35" pos:end="3508:36">&amp;&amp;</operator> <call pos:start="3508:38" pos:end="3508:61"><name pos:start="3508:38" pos:end="3508:44">defined</name><argument_list pos:start="3508:45" pos:end="3508:61">(<argument pos:start="3508:46" pos:end="3508:60"><expr pos:start="3508:46" pos:end="3508:60"><name pos:start="3508:46" pos:end="3508:60">__NR_ioprio_get</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3509:5" pos:end="3509:30">case <expr pos:start="3509:10" pos:end="3509:29"><name pos:start="3509:10" pos:end="3509:29">TARGET_NR_ioprio_get</name></expr>:</case>
        <expr_stmt pos:start="3510:9" pos:end="3513:0"><expr pos:start="3510:9" pos:end="3510:47"><name pos:start="3510:9" pos:end="3510:11">ret</name> <operator pos:start="3510:13" pos:end="3510:13">=</operator> <call pos:start="3510:15" pos:end="3510:47"><name pos:start="3510:15" pos:end="3510:23">get_errno</name><argument_list pos:start="3510:24" pos:end="3510:47">(<argument pos:start="3510:25" pos:end="3510:46"><expr pos:start="3510:25" pos:end="3510:46"><call pos:start="3510:25" pos:end="3510:46"><name pos:start="3510:25" pos:end="3510:34">ioprio_get</name><argument_list pos:start="3510:35" pos:end="3510:46">(<argument pos:start="3510:36" pos:end="3510:39"><expr pos:start="3510:36" pos:end="3510:39"><name pos:start="3510:36" pos:end="3510:39">arg1</name></expr></argument>, <argument pos:start="3510:42" pos:end="3510:45"><expr pos:start="3510:42" pos:end="3510:45"><name pos:start="3510:42" pos:end="3510:45">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3511:1" pos:end="3511:6">#<cpp:directive pos:start="3511:2" pos:end="3511:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3512:1" pos:end="3512:61">#<cpp:directive pos:start="3512:2" pos:end="3512:3">if</cpp:directive> <expr pos:start="3512:5" pos:end="3512:61"><call pos:start="3512:5" pos:end="3512:33"><name pos:start="3512:5" pos:end="3512:11">defined</name><argument_list pos:start="3512:12" pos:end="3512:33">(<argument pos:start="3512:13" pos:end="3512:32"><expr pos:start="3512:13" pos:end="3512:32"><name pos:start="3512:13" pos:end="3512:32">TARGET_NR_ioprio_set</name></expr></argument>)</argument_list></call> <operator pos:start="3512:35" pos:end="3512:36">&amp;&amp;</operator> <call pos:start="3512:38" pos:end="3512:61"><name pos:start="3512:38" pos:end="3512:44">defined</name><argument_list pos:start="3512:45" pos:end="3512:61">(<argument pos:start="3512:46" pos:end="3512:60"><expr pos:start="3512:46" pos:end="3512:60"><name pos:start="3512:46" pos:end="3512:60">__NR_ioprio_set</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3513:5" pos:end="3513:30">case <expr pos:start="3513:10" pos:end="3513:29"><name pos:start="3513:10" pos:end="3513:29">TARGET_NR_ioprio_set</name></expr>:</case>
        <expr_stmt pos:start="3514:9" pos:end="3517:0"><expr pos:start="3514:9" pos:end="3514:53"><name pos:start="3514:9" pos:end="3514:11">ret</name> <operator pos:start="3514:13" pos:end="3514:13">=</operator> <call pos:start="3514:15" pos:end="3514:53"><name pos:start="3514:15" pos:end="3514:23">get_errno</name><argument_list pos:start="3514:24" pos:end="3514:53">(<argument pos:start="3514:25" pos:end="3514:52"><expr pos:start="3514:25" pos:end="3514:52"><call pos:start="3514:25" pos:end="3514:52"><name pos:start="3514:25" pos:end="3514:34">ioprio_set</name><argument_list pos:start="3514:35" pos:end="3514:52">(<argument pos:start="3514:36" pos:end="3514:39"><expr pos:start="3514:36" pos:end="3514:39"><name pos:start="3514:36" pos:end="3514:39">arg1</name></expr></argument>, <argument pos:start="3514:42" pos:end="3514:45"><expr pos:start="3514:42" pos:end="3514:45"><name pos:start="3514:42" pos:end="3514:45">arg2</name></expr></argument>, <argument pos:start="3514:48" pos:end="3514:51"><expr pos:start="3514:48" pos:end="3514:51"><name pos:start="3514:48" pos:end="3514:51">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3515:1" pos:end="3515:6">#<cpp:directive pos:start="3515:2" pos:end="3515:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3516:1" pos:end="3516:53">#<cpp:directive pos:start="3516:2" pos:end="3516:3">if</cpp:directive> <expr pos:start="3516:5" pos:end="3516:53"><call pos:start="3516:5" pos:end="3516:28"><name pos:start="3516:5" pos:end="3516:11">defined</name><argument_list pos:start="3516:12" pos:end="3516:28">(<argument pos:start="3516:13" pos:end="3516:27"><expr pos:start="3516:13" pos:end="3516:27"><name pos:start="3516:13" pos:end="3516:27">TARGET_NR_setns</name></expr></argument>)</argument_list></call> <operator pos:start="3516:30" pos:end="3516:31">&amp;&amp;</operator> <call pos:start="3516:33" pos:end="3516:53"><name pos:start="3516:33" pos:end="3516:39">defined</name><argument_list pos:start="3516:40" pos:end="3516:53">(<argument pos:start="3516:41" pos:end="3516:52"><expr pos:start="3516:41" pos:end="3516:52"><name pos:start="3516:41" pos:end="3516:52">CONFIG_SETNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3517:5" pos:end="3517:25">case <expr pos:start="3517:10" pos:end="3517:24"><name pos:start="3517:10" pos:end="3517:24">TARGET_NR_setns</name></expr>:</case>
        <expr_stmt pos:start="3518:9" pos:end="3521:0"><expr pos:start="3518:9" pos:end="3518:42"><name pos:start="3518:9" pos:end="3518:11">ret</name> <operator pos:start="3518:13" pos:end="3518:13">=</operator> <call pos:start="3518:15" pos:end="3518:42"><name pos:start="3518:15" pos:end="3518:23">get_errno</name><argument_list pos:start="3518:24" pos:end="3518:42">(<argument pos:start="3518:25" pos:end="3518:41"><expr pos:start="3518:25" pos:end="3518:41"><call pos:start="3518:25" pos:end="3518:41"><name pos:start="3518:25" pos:end="3518:29">setns</name><argument_list pos:start="3518:30" pos:end="3518:41">(<argument pos:start="3518:31" pos:end="3518:34"><expr pos:start="3518:31" pos:end="3518:34"><name pos:start="3518:31" pos:end="3518:34">arg1</name></expr></argument>, <argument pos:start="3518:37" pos:end="3518:40"><expr pos:start="3518:37" pos:end="3518:40"><name pos:start="3518:37" pos:end="3518:40">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3519:1" pos:end="3519:6">#<cpp:directive pos:start="3519:2" pos:end="3519:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="3520:1" pos:end="3520:55">#<cpp:directive pos:start="3520:2" pos:end="3520:3">if</cpp:directive> <expr pos:start="3520:5" pos:end="3520:55"><call pos:start="3520:5" pos:end="3520:30"><name pos:start="3520:5" pos:end="3520:11">defined</name><argument_list pos:start="3520:12" pos:end="3520:30">(<argument pos:start="3520:13" pos:end="3520:29"><expr pos:start="3520:13" pos:end="3520:29"><name pos:start="3520:13" pos:end="3520:29">TARGET_NR_unshare</name></expr></argument>)</argument_list></call> <operator pos:start="3520:32" pos:end="3520:33">&amp;&amp;</operator> <call pos:start="3520:35" pos:end="3520:55"><name pos:start="3520:35" pos:end="3520:41">defined</name><argument_list pos:start="3520:42" pos:end="3520:55">(<argument pos:start="3520:43" pos:end="3520:54"><expr pos:start="3520:43" pos:end="3520:54"><name pos:start="3520:43" pos:end="3520:54">CONFIG_SETNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="3521:5" pos:end="3521:27">case <expr pos:start="3521:10" pos:end="3521:26"><name pos:start="3521:10" pos:end="3521:26">TARGET_NR_unshare</name></expr>:</case>
        <expr_stmt pos:start="3522:9" pos:end="3524:0"><expr pos:start="3522:9" pos:end="3522:38"><name pos:start="3522:9" pos:end="3522:11">ret</name> <operator pos:start="3522:13" pos:end="3522:13">=</operator> <call pos:start="3522:15" pos:end="3522:38"><name pos:start="3522:15" pos:end="3522:23">get_errno</name><argument_list pos:start="3522:24" pos:end="3522:38">(<argument pos:start="3522:25" pos:end="3522:37"><expr pos:start="3522:25" pos:end="3522:37"><call pos:start="3522:25" pos:end="3522:37"><name pos:start="3522:25" pos:end="3522:31">unshare</name><argument_list pos:start="3522:32" pos:end="3522:37">(<argument pos:start="3522:33" pos:end="3522:36"><expr pos:start="3522:33" pos:end="3522:36"><name pos:start="3522:33" pos:end="3522:36">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3523:1" pos:end="3523:6">#<cpp:directive pos:start="3523:2" pos:end="3523:6">endif</cpp:directive></cpp:endif>
    <default pos:start="3524:5" pos:end="3524:12">default:</default>
    <label pos:start="3525:5" pos:end="3525:18"><name pos:start="3525:5" pos:end="3525:17">unimplemented</name>:</label>
        <expr_stmt pos:start="3526:9" pos:end="3528:0"><expr pos:start="3526:9" pos:end="3526:56"><call pos:start="3526:9" pos:end="3526:56"><name pos:start="3526:9" pos:end="3526:16">gemu_log</name><argument_list pos:start="3526:17" pos:end="3526:56">(<argument pos:start="3526:18" pos:end="3526:50"><expr pos:start="3526:18" pos:end="3526:50"><literal type="string" pos:start="3526:18" pos:end="3526:50">"qemu: Unsupported syscall: %d\n"</literal></expr></argument>, <argument pos:start="3526:53" pos:end="3526:55"><expr pos:start="3526:53" pos:end="3526:55"><name pos:start="3526:53" pos:end="3526:55">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="3527:1" pos:end="3527:143">#<cpp:directive pos:start="3527:2" pos:end="3527:3">if</cpp:directive> <expr pos:start="3527:5" pos:end="3527:143"><call pos:start="3527:5" pos:end="3527:31"><name pos:start="3527:5" pos:end="3527:11">defined</name><argument_list pos:start="3527:12" pos:end="3527:31">(<argument pos:start="3527:13" pos:end="3527:30"><expr pos:start="3527:13" pos:end="3527:30"><name pos:start="3527:13" pos:end="3527:30">TARGET_NR_setxattr</name></expr></argument>)</argument_list></call> <operator pos:start="3527:33" pos:end="3527:34">||</operator> <call pos:start="3527:36" pos:end="3527:69"><name pos:start="3527:36" pos:end="3527:42">defined</name><argument_list pos:start="3527:43" pos:end="3527:69">(<argument pos:start="3527:44" pos:end="3527:68"><expr pos:start="3527:44" pos:end="3527:68"><name pos:start="3527:44" pos:end="3527:68">TARGET_NR_get_thread_area</name></expr></argument>)</argument_list></call> <operator pos:start="3527:71" pos:end="3527:72">||</operator> <call pos:start="3527:74" pos:end="3527:105"><name pos:start="3527:74" pos:end="3527:80">defined</name><argument_list pos:start="3527:81" pos:end="3527:105">(<argument pos:start="3527:82" pos:end="3527:104"><expr pos:start="3527:82" pos:end="3527:104"><name pos:start="3527:82" pos:end="3527:104">TARGET_NR_getdomainname</name></expr></argument>)</argument_list></call> <operator pos:start="3527:107" pos:end="3527:108">||</operator> <call pos:start="3527:110" pos:end="3527:143"><name pos:start="3527:110" pos:end="3527:116">defined</name><argument_list pos:start="3527:117" pos:end="3527:143">(<argument pos:start="3527:118" pos:end="3527:142"><expr pos:start="3527:118" pos:end="3527:142"><name pos:start="3527:118" pos:end="3527:142">TARGET_NR_set_robust_list</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <label pos:start="3528:5" pos:end="3530:0"><name pos:start="3528:5" pos:end="3528:24">unimplemented_nowarn</name>:</label>
<cpp:endif pos:start="3529:1" pos:end="3529:6">#<cpp:directive pos:start="3529:2" pos:end="3529:6">endif</cpp:directive></cpp:endif>
        <expr_stmt pos:start="3530:9" pos:end="3530:29"><expr pos:start="3530:9" pos:end="3530:28"><name pos:start="3530:9" pos:end="3530:11">ret</name> <operator pos:start="3530:13" pos:end="3530:13">=</operator> <operator pos:start="3530:15" pos:end="3530:15">-</operator><name pos:start="3530:16" pos:end="3530:28">TARGET_ENOSYS</name></expr>;</expr_stmt>
<label pos:start="3531:1" pos:end="3533:0"><name pos:start="3531:1" pos:end="3531:4">fail</name>:</label>
<cpp:ifdef pos:start="3532:1" pos:end="3532:12">#<cpp:directive pos:start="3532:2" pos:end="3532:6">ifdef</cpp:directive> <name pos:start="3532:8" pos:end="3532:12">DEBUG</name></cpp:ifdef>
    <expr_stmt pos:start="3533:5" pos:end="3535:0"><expr pos:start="3533:5" pos:end="3533:47"><call pos:start="3533:5" pos:end="3533:47"><name pos:start="3533:5" pos:end="3533:12">gemu_log</name><argument_list pos:start="3533:13" pos:end="3533:47">(<argument pos:start="3533:14" pos:end="3533:41"><expr pos:start="3533:14" pos:end="3533:41"><literal type="string" pos:start="3533:14" pos:end="3533:18">" = "</literal> <name pos:start="3533:20" pos:end="3533:36">TARGET_ABI_FMT_ld</name> <literal type="string" pos:start="3533:38" pos:end="3533:41">"\n"</literal></expr></argument>, <argument pos:start="3533:44" pos:end="3533:46"><expr pos:start="3533:44" pos:end="3533:46"><name pos:start="3533:44" pos:end="3533:46">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="3534:1" pos:end="3534:6">#<cpp:directive pos:start="3534:2" pos:end="3534:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="3535:5" pos:end="3536:36"><if pos:start="3535:5" pos:end="3536:36">if<condition pos:start="3535:7" pos:end="3535:17">(<expr pos:start="3535:8" pos:end="3535:16"><name pos:start="3535:8" pos:end="3535:16">do_strace</name></expr>)</condition><block type="pseudo" pos:start="3536:9" pos:end="3536:36"><block_content pos:start="3536:9" pos:end="3536:36">
        <expr_stmt pos:start="3536:9" pos:end="3536:36"><expr pos:start="3536:9" pos:end="3536:35"><call pos:start="3536:9" pos:end="3536:35"><name pos:start="3536:9" pos:end="3536:25">print_syscall_ret</name><argument_list pos:start="3536:26" pos:end="3536:35">(<argument pos:start="3536:27" pos:end="3536:29"><expr pos:start="3536:27" pos:end="3536:29"><name pos:start="3536:27" pos:end="3536:29">num</name></expr></argument>, <argument pos:start="3536:32" pos:end="3536:34"><expr pos:start="3536:32" pos:end="3536:34"><name pos:start="3536:32" pos:end="3536:34">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="3537:5" pos:end="3537:48"><expr pos:start="3537:5" pos:end="3537:47"><call pos:start="3537:5" pos:end="3537:47"><name pos:start="3537:5" pos:end="3537:32">trace_guest_user_syscall_ret</name><argument_list pos:start="3537:33" pos:end="3537:47">(<argument pos:start="3537:34" pos:end="3537:36"><expr pos:start="3537:34" pos:end="3537:36"><name pos:start="3537:34" pos:end="3537:36">cpu</name></expr></argument>, <argument pos:start="3537:39" pos:end="3537:41"><expr pos:start="3537:39" pos:end="3537:41"><name pos:start="3537:39" pos:end="3537:41">num</name></expr></argument>, <argument pos:start="3537:44" pos:end="3537:46"><expr pos:start="3537:44" pos:end="3537:46"><name pos:start="3537:44" pos:end="3537:46">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="3538:5" pos:end="3538:15">return <expr pos:start="3538:12" pos:end="3538:14"><name pos:start="3538:12" pos:end="3538:14">ret</name></expr>;</return>
<label pos:start="3539:1" pos:end="3539:7"><name pos:start="3539:1" pos:end="3539:6">efault</name>:</label>
    <expr_stmt pos:start="3540:5" pos:end="3540:25"><expr pos:start="3540:5" pos:end="3540:24"><name pos:start="3540:5" pos:end="3540:7">ret</name> <operator pos:start="3540:9" pos:end="3540:9">=</operator> <operator pos:start="3540:11" pos:end="3540:11">-</operator><name pos:start="3540:12" pos:end="3540:24">TARGET_EFAULT</name></expr>;</expr_stmt>
    <goto pos:start="3541:5" pos:end="3541:14">goto <name pos:start="3541:10" pos:end="3541:13">fail</name>;</goto></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></for></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></switch></block_content></block></block_content></block></switch></block_content></block></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></for></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></switch></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></while></block_content></block></if></if_stmt></block_content></block></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></while></block_content></block></if></if_stmt></block_content></block></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></block_content></block></block_content></block></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></block_content></block></function></unit>
