<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8090.c" pos:tabs="8"><function pos:start="1:1" pos:end="270:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">kvm_cpu_exec</name><parameter_list pos:start="1:17" pos:end="1:31">(<parameter pos:start="1:18" pos:end="1:30"><decl pos:start="1:18" pos:end="1:30"><type pos:start="1:18" pos:end="1:27"><name pos:start="1:18" pos:end="1:25">CPUState</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:30">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="270:1">{<block_content pos:start="5:5" pos:end="268:15">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">kvm_run</name></name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">run</name> <init pos:start="5:25" pos:end="5:38">= <expr pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:29">cpu</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:38">kvm_run</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:20">run_ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:32"><expr pos:start="11:5" pos:end="11:31"><call pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:11">DPRINTF</name><argument_list pos:start="11:12" pos:end="11:31">(<argument pos:start="11:13" pos:end="11:30"><expr pos:start="11:13" pos:end="11:30"><literal type="string" pos:start="11:13" pos:end="11:30">"kvm_cpu_exec()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:43">(<expr pos:start="15:9" pos:end="15:42"><call pos:start="15:9" pos:end="15:42"><name pos:start="15:9" pos:end="15:37">kvm_arch_process_async_events</name><argument_list pos:start="15:38" pos:end="15:42">(<argument pos:start="15:39" pos:end="15:41"><expr pos:start="15:39" pos:end="15:41"><name pos:start="15:39" pos:end="15:41">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:45" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:24">

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:11">cpu</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:25">exit_request</name></name> <operator pos:start="17:27" pos:end="17:27">=</operator> <literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:24">return <expr pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:23">EXCP_HLT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><call pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:30">qemu_mutex_unlock_iothread</name><argument_list pos:start="25:31" pos:end="25:32">()</argument_list></call></expr>;</expr_stmt>



    <do pos:start="29:5" pos:end="248:23">do <block pos:start="29:8" pos:end="248:5">{<block_content pos:start="31:9" pos:end="246:9">

        <decl_stmt pos:start="31:9" pos:end="31:25"><decl pos:start="31:9" pos:end="31:24"><type pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:18">MemTxAttrs</name></type> <name pos:start="31:20" pos:end="31:24">attrs</name></decl>;</decl_stmt>



        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:32">(<expr pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:15">cpu</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:31">kvm_vcpu_dirty</name></name></expr>)</condition> <block pos:start="35:34" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:40">

            <expr_stmt pos:start="37:13" pos:end="37:63"><expr pos:start="37:13" pos:end="37:62"><call pos:start="37:13" pos:end="37:62"><name pos:start="37:13" pos:end="37:34">kvm_arch_put_registers</name><argument_list pos:start="37:35" pos:end="37:62">(<argument pos:start="37:36" pos:end="37:38"><expr pos:start="37:36" pos:end="37:38"><name pos:start="37:36" pos:end="37:38">cpu</name></expr></argument>, <argument pos:start="37:41" pos:end="37:61"><expr pos:start="37:41" pos:end="37:61"><name pos:start="37:41" pos:end="37:61">KVM_PUT_RUNTIME_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:40"><expr pos:start="39:13" pos:end="39:39"><name pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:15">cpu</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:31">kvm_vcpu_dirty</name></name> <operator pos:start="39:33" pos:end="39:33">=</operator> <name pos:start="39:35" pos:end="39:39">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><call pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:24">kvm_arch_pre_run</name><argument_list pos:start="45:25" pos:end="45:34">(<argument pos:start="45:26" pos:end="45:28"><expr pos:start="45:26" pos:end="45:28"><name pos:start="45:26" pos:end="45:28">cpu</name></expr></argument>, <argument pos:start="45:31" pos:end="45:33"><expr pos:start="45:31" pos:end="45:33"><name pos:start="45:31" pos:end="45:33">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="63:9"><if pos:start="47:9" pos:end="63:9">if <condition pos:start="47:12" pos:end="47:30">(<expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:15">cpu</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:29">exit_request</name></name></expr>)</condition> <block pos:start="47:32" pos:end="63:9">{<block_content pos:start="49:13" pos:end="61:33">

            <expr_stmt pos:start="49:13" pos:end="49:50"><expr pos:start="49:13" pos:end="49:49"><call pos:start="49:13" pos:end="49:49"><name pos:start="49:13" pos:end="49:19">DPRINTF</name><argument_list pos:start="49:20" pos:end="49:49">(<argument pos:start="49:21" pos:end="49:48"><expr pos:start="49:21" pos:end="49:48"><literal type="string" pos:start="49:21" pos:end="49:48">"interrupt exit requested\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="51:13" pos:end="59:15">/*

             * KVM requires us to reenter the kernel after IO exits to complete

             * instruction emulation. This self-signal will ensure that we

             * leave ASAP again.

             */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:33"><expr pos:start="61:13" pos:end="61:32"><call pos:start="61:13" pos:end="61:32"><name pos:start="61:13" pos:end="61:30">qemu_cpu_kick_self</name><argument_list pos:start="61:31" pos:end="61:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:50"><expr pos:start="67:9" pos:end="67:49"><name pos:start="67:9" pos:end="67:15">run_ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:49"><name pos:start="67:19" pos:end="67:32">kvm_vcpu_ioctl</name><argument_list pos:start="67:33" pos:end="67:49">(<argument pos:start="67:34" pos:end="67:36"><expr pos:start="67:34" pos:end="67:36"><name pos:start="67:34" pos:end="67:36">cpu</name></expr></argument>, <argument pos:start="67:39" pos:end="67:45"><expr pos:start="67:39" pos:end="67:45"><name pos:start="67:39" pos:end="67:45">KVM_RUN</name></expr></argument>, <argument pos:start="67:48" pos:end="67:48"><expr pos:start="67:48" pos:end="67:48"><literal type="number" pos:start="67:48" pos:end="67:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:44"><expr pos:start="71:9" pos:end="71:43"><name pos:start="71:9" pos:end="71:13">attrs</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:43"><name pos:start="71:17" pos:end="71:33">kvm_arch_post_run</name><argument_list pos:start="71:34" pos:end="71:43">(<argument pos:start="71:35" pos:end="71:37"><expr pos:start="71:35" pos:end="71:37"><name pos:start="71:35" pos:end="71:37">cpu</name></expr></argument>, <argument pos:start="71:40" pos:end="71:42"><expr pos:start="71:40" pos:end="71:42"><name pos:start="71:40" pos:end="71:42">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="75:9" pos:end="111:9"><if pos:start="75:9" pos:end="111:9">if <condition pos:start="75:12" pos:end="75:24">(<expr pos:start="75:13" pos:end="75:23"><name pos:start="75:13" pos:end="75:19">run_ret</name> <operator pos:start="75:21" pos:end="75:21">&lt;</operator> <literal type="number" pos:start="75:23" pos:end="75:23">0</literal></expr>)</condition> <block pos:start="75:26" pos:end="111:9">{<block_content pos:start="77:13" pos:end="109:18">

            <if_stmt pos:start="77:13" pos:end="85:13"><if pos:start="77:13" pos:end="85:13">if <condition pos:start="77:16" pos:end="77:56">(<expr pos:start="77:17" pos:end="77:55"><name pos:start="77:17" pos:end="77:23">run_ret</name> <operator pos:start="77:25" pos:end="77:26">==</operator> <operator pos:start="77:28" pos:end="77:28">-</operator><name pos:start="77:29" pos:end="77:33">EINTR</name> <operator pos:start="77:35" pos:end="77:36">||</operator> <name pos:start="77:38" pos:end="77:44">run_ret</name> <operator pos:start="77:46" pos:end="77:47">==</operator> <operator pos:start="77:49" pos:end="77:49">-</operator><name pos:start="77:50" pos:end="77:55">EAGAIN</name></expr>)</condition> <block pos:start="77:58" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:22">

                <expr_stmt pos:start="79:17" pos:end="79:44"><expr pos:start="79:17" pos:end="79:43"><call pos:start="79:17" pos:end="79:43"><name pos:start="79:17" pos:end="79:23">DPRINTF</name><argument_list pos:start="79:24" pos:end="79:43">(<argument pos:start="79:25" pos:end="79:42"><expr pos:start="79:25" pos:end="79:42"><literal type="string" pos:start="79:25" pos:end="79:42">"io window exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:37"><expr pos:start="81:17" pos:end="81:36"><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <name pos:start="81:23" pos:end="81:36">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                <break pos:start="83:17" pos:end="83:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="92:0"><expr pos:start="87:13" pos:end="89:39"><call pos:start="87:13" pos:end="89:39"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="89:39">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:56"><expr pos:start="87:29" pos:end="87:56"><literal type="string" pos:start="87:29" pos:end="87:56">"error: kvm run failed %s\n"</literal></expr></argument>,

                    <argument pos:start="89:21" pos:end="89:38"><expr pos:start="89:21" pos:end="89:38"><call pos:start="89:21" pos:end="89:38"><name pos:start="89:21" pos:end="89:28">strerror</name><argument_list pos:start="89:29" pos:end="89:38">(<argument pos:start="89:30" pos:end="89:37"><expr pos:start="89:30" pos:end="89:37"><operator pos:start="89:30" pos:end="89:30">-</operator><name pos:start="89:31" pos:end="89:37">run_ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="91:1" pos:end="91:17">#<cpp:directive pos:start="91:2" pos:end="91:6">ifdef</cpp:directive> <name pos:start="91:8" pos:end="91:17">TARGET_PPC</name></cpp:ifdef>

            <if_stmt pos:start="93:13" pos:end="106:0"><if pos:start="93:13" pos:end="106:0">if <condition pos:start="93:16" pos:end="93:34">(<expr pos:start="93:17" pos:end="93:33"><name pos:start="93:17" pos:end="93:23">run_ret</name> <operator pos:start="93:25" pos:end="93:26">==</operator> <operator pos:start="93:28" pos:end="93:28">-</operator><name pos:start="93:29" pos:end="93:33">EBUSY</name></expr>)</condition> <block pos:start="93:36" pos:end="106:0">{<block_content pos:start="95:17" pos:end="101:56">

                <expr_stmt pos:start="95:17" pos:end="101:56"><expr pos:start="95:17" pos:end="101:55"><call pos:start="95:17" pos:end="101:55"><name pos:start="95:17" pos:end="95:23">fprintf</name><argument_list pos:start="95:24" pos:end="101:55">(<argument pos:start="95:25" pos:end="95:30"><expr pos:start="95:25" pos:end="95:30"><name pos:start="95:25" pos:end="95:30">stderr</name></expr></argument>,

                        <argument pos:start="97:25" pos:end="101:54"><expr pos:start="97:25" pos:end="101:54"><literal type="string" pos:start="97:25" pos:end="97:73">"This is probably because your SMT is enabled.\n"</literal>

                        <literal type="string" pos:start="99:25" pos:end="99:72">"VCPU can only run on primary threads with all "</literal>

                        <literal type="string" pos:start="101:25" pos:end="101:54">"secondary threads offline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="107:13" pos:end="107:21"><expr pos:start="107:13" pos:end="107:20"><name pos:start="107:13" pos:end="107:15">ret</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <operator pos:start="107:19" pos:end="107:19">-</operator><literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:61"><expr pos:start="115:9" pos:end="115:60"><call pos:start="115:9" pos:end="115:60"><name pos:start="115:9" pos:end="115:26">trace_kvm_run_exit</name><argument_list pos:start="115:27" pos:end="115:60">(<argument pos:start="115:28" pos:end="115:41"><expr pos:start="115:28" pos:end="115:41"><name pos:start="115:28" pos:end="115:41"><name pos:start="115:28" pos:end="115:30">cpu</name><operator pos:start="115:31" pos:end="115:32">-&gt;</operator><name pos:start="115:33" pos:end="115:41">cpu_index</name></name></expr></argument>, <argument pos:start="115:44" pos:end="115:59"><expr pos:start="115:44" pos:end="115:59"><name pos:start="115:44" pos:end="115:59"><name pos:start="115:44" pos:end="115:46">run</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:59">exit_reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="117:9" pos:end="246:9">switch <condition pos:start="117:16" pos:end="117:33">(<expr pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:19">run</name><operator pos:start="117:20" pos:end="117:21">-&gt;</operator><name pos:start="117:22" pos:end="117:32">exit_reason</name></name></expr>)</condition> <block pos:start="117:35" pos:end="246:9">{<block_content pos:start="119:9" pos:end="244:18">

        <case pos:start="119:9" pos:end="119:25">case <expr pos:start="119:14" pos:end="119:24"><name pos:start="119:14" pos:end="119:24">KVM_EXIT_IO</name></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:35"><expr pos:start="121:13" pos:end="121:34"><call pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:19">DPRINTF</name><argument_list pos:start="121:20" pos:end="121:34">(<argument pos:start="121:21" pos:end="121:33"><expr pos:start="121:21" pos:end="121:33"><literal type="string" pos:start="121:21" pos:end="121:33">"handle_io\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="123:13" pos:end="123:36">/* Called outside BQL */</comment>

            <expr_stmt pos:start="125:13" pos:end="133:41"><expr pos:start="125:13" pos:end="133:40"><call pos:start="125:13" pos:end="133:40"><name pos:start="125:13" pos:end="125:25">kvm_handle_io</name><argument_list pos:start="125:26" pos:end="133:40">(<argument pos:start="125:27" pos:end="125:38"><expr pos:start="125:27" pos:end="125:38"><name pos:start="125:27" pos:end="125:38"><name pos:start="125:27" pos:end="125:29">run</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:33">io</name><operator pos:start="125:34" pos:end="125:34">.</operator><name pos:start="125:35" pos:end="125:38">port</name></name></expr></argument>, <argument pos:start="125:41" pos:end="125:45"><expr pos:start="125:41" pos:end="125:45"><name pos:start="125:41" pos:end="125:45">attrs</name></expr></argument>,

                          <argument pos:start="127:27" pos:end="127:62"><expr pos:start="127:27" pos:end="127:62"><operator pos:start="127:27" pos:end="127:27">(</operator><name pos:start="127:28" pos:end="127:34">uint8_t</name> <operator pos:start="127:36" pos:end="127:36">*</operator><operator pos:start="127:37" pos:end="127:37">)</operator><name pos:start="127:38" pos:end="127:40">run</name> <operator pos:start="127:42" pos:end="127:42">+</operator> <name pos:start="127:44" pos:end="127:62"><name pos:start="127:44" pos:end="127:46">run</name><operator pos:start="127:47" pos:end="127:48">-&gt;</operator><name pos:start="127:49" pos:end="127:50">io</name><operator pos:start="127:51" pos:end="127:51">.</operator><name pos:start="127:52" pos:end="127:62">data_offset</name></name></expr></argument>,

                          <argument pos:start="129:27" pos:end="129:43"><expr pos:start="129:27" pos:end="129:43"><name pos:start="129:27" pos:end="129:43"><name pos:start="129:27" pos:end="129:29">run</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:33">io</name><operator pos:start="129:34" pos:end="129:34">.</operator><name pos:start="129:35" pos:end="129:43">direction</name></name></expr></argument>,

                          <argument pos:start="131:27" pos:end="131:38"><expr pos:start="131:27" pos:end="131:38"><name pos:start="131:27" pos:end="131:38"><name pos:start="131:27" pos:end="131:29">run</name><operator pos:start="131:30" pos:end="131:31">-&gt;</operator><name pos:start="131:32" pos:end="131:33">io</name><operator pos:start="131:34" pos:end="131:34">.</operator><name pos:start="131:35" pos:end="131:38">size</name></name></expr></argument>,

                          <argument pos:start="133:27" pos:end="133:39"><expr pos:start="133:27" pos:end="133:39"><name pos:start="133:27" pos:end="133:39"><name pos:start="133:27" pos:end="133:29">run</name><operator pos:start="133:30" pos:end="133:31">-&gt;</operator><name pos:start="133:32" pos:end="133:33">io</name><operator pos:start="133:34" pos:end="133:34">.</operator><name pos:start="133:35" pos:end="133:39">count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:20"><expr pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:15">ret</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <case pos:start="139:9" pos:end="139:27">case <expr pos:start="139:14" pos:end="139:26"><name pos:start="139:14" pos:end="139:26">KVM_EXIT_MMIO</name></expr>:</case>

            <expr_stmt pos:start="141:13" pos:end="141:37"><expr pos:start="141:13" pos:end="141:36"><call pos:start="141:13" pos:end="141:36"><name pos:start="141:13" pos:end="141:19">DPRINTF</name><argument_list pos:start="141:20" pos:end="141:36">(<argument pos:start="141:21" pos:end="141:35"><expr pos:start="141:21" pos:end="141:35"><literal type="string" pos:start="141:21" pos:end="141:35">"handle_mmio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="143:13" pos:end="143:36">/* Called outside BQL */</comment>

            <expr_stmt pos:start="145:13" pos:end="153:49"><expr pos:start="145:13" pos:end="153:48"><call pos:start="145:13" pos:end="153:48"><name pos:start="145:13" pos:end="145:28">address_space_rw</name><argument_list pos:start="145:29" pos:end="153:48">(<argument pos:start="145:30" pos:end="145:50"><expr pos:start="145:30" pos:end="145:50"><operator pos:start="145:30" pos:end="145:30">&amp;</operator><name pos:start="145:31" pos:end="145:50">address_space_memory</name></expr></argument>,

                             <argument pos:start="147:30" pos:end="147:48"><expr pos:start="147:30" pos:end="147:48"><name pos:start="147:30" pos:end="147:48"><name pos:start="147:30" pos:end="147:32">run</name><operator pos:start="147:33" pos:end="147:34">-&gt;</operator><name pos:start="147:35" pos:end="147:38">mmio</name><operator pos:start="147:39" pos:end="147:39">.</operator><name pos:start="147:40" pos:end="147:48">phys_addr</name></name></expr></argument>, <argument pos:start="147:51" pos:end="147:55"><expr pos:start="147:51" pos:end="147:55"><name pos:start="147:51" pos:end="147:55">attrs</name></expr></argument>,

                             <argument pos:start="149:30" pos:end="149:43"><expr pos:start="149:30" pos:end="149:43"><name pos:start="149:30" pos:end="149:43"><name pos:start="149:30" pos:end="149:32">run</name><operator pos:start="149:33" pos:end="149:34">-&gt;</operator><name pos:start="149:35" pos:end="149:38">mmio</name><operator pos:start="149:39" pos:end="149:39">.</operator><name pos:start="149:40" pos:end="149:43">data</name></name></expr></argument>,

                             <argument pos:start="151:30" pos:end="151:42"><expr pos:start="151:30" pos:end="151:42"><name pos:start="151:30" pos:end="151:42"><name pos:start="151:30" pos:end="151:32">run</name><operator pos:start="151:33" pos:end="151:34">-&gt;</operator><name pos:start="151:35" pos:end="151:38">mmio</name><operator pos:start="151:39" pos:end="151:39">.</operator><name pos:start="151:40" pos:end="151:42">len</name></name></expr></argument>,

                             <argument pos:start="153:30" pos:end="153:47"><expr pos:start="153:30" pos:end="153:47"><name pos:start="153:30" pos:end="153:47"><name pos:start="153:30" pos:end="153:32">run</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:38">mmio</name><operator pos:start="153:39" pos:end="153:39">.</operator><name pos:start="153:40" pos:end="153:47">is_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:20"><expr pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <literal type="number" pos:start="155:19" pos:end="155:19">0</literal></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        <case pos:start="159:9" pos:end="159:38">case <expr pos:start="159:14" pos:end="159:37"><name pos:start="159:14" pos:end="159:37">KVM_EXIT_IRQ_WINDOW_OPEN</name></expr>:</case>

            <expr_stmt pos:start="161:13" pos:end="161:41"><expr pos:start="161:13" pos:end="161:40"><call pos:start="161:13" pos:end="161:40"><name pos:start="161:13" pos:end="161:19">DPRINTF</name><argument_list pos:start="161:20" pos:end="161:40">(<argument pos:start="161:21" pos:end="161:39"><expr pos:start="161:21" pos:end="161:39"><literal type="string" pos:start="161:21" pos:end="161:39">"irq_window_open\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:33"><expr pos:start="163:13" pos:end="163:32"><name pos:start="163:13" pos:end="163:15">ret</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <name pos:start="163:19" pos:end="163:32">EXCP_INTERRUPT</name></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <case pos:start="167:9" pos:end="167:31">case <expr pos:start="167:14" pos:end="167:30"><name pos:start="167:14" pos:end="167:30">KVM_EXIT_SHUTDOWN</name></expr>:</case>

            <expr_stmt pos:start="169:13" pos:end="169:34"><expr pos:start="169:13" pos:end="169:33"><call pos:start="169:13" pos:end="169:33"><name pos:start="169:13" pos:end="169:19">DPRINTF</name><argument_list pos:start="169:20" pos:end="169:33">(<argument pos:start="169:21" pos:end="169:32"><expr pos:start="169:21" pos:end="169:32"><literal type="string" pos:start="169:21" pos:end="169:32">"shutdown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:40"><expr pos:start="171:13" pos:end="171:39"><call pos:start="171:13" pos:end="171:39"><name pos:start="171:13" pos:end="171:37">qemu_system_reset_request</name><argument_list pos:start="171:38" pos:end="171:39">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:33"><expr pos:start="173:13" pos:end="173:32"><name pos:start="173:13" pos:end="173:15">ret</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <name pos:start="173:19" pos:end="173:32">EXCP_INTERRUPT</name></expr>;</expr_stmt>

            <break pos:start="175:13" pos:end="175:18">break;</break>

        <case pos:start="177:9" pos:end="177:30">case <expr pos:start="177:14" pos:end="177:29"><name pos:start="177:14" pos:end="177:29">KVM_EXIT_UNKNOWN</name></expr>:</case>

            <expr_stmt pos:start="179:13" pos:end="181:60"><expr pos:start="179:13" pos:end="181:59"><call pos:start="179:13" pos:end="181:59"><name pos:start="179:13" pos:end="179:19">fprintf</name><argument_list pos:start="179:20" pos:end="181:59">(<argument pos:start="179:21" pos:end="179:26"><expr pos:start="179:21" pos:end="179:26"><name pos:start="179:21" pos:end="179:26">stderr</name></expr></argument>, <argument pos:start="179:29" pos:end="179:78"><expr pos:start="179:29" pos:end="179:78"><literal type="string" pos:start="179:29" pos:end="179:66">"KVM: unknown exit, hardware reason %"</literal> <name pos:start="179:68" pos:end="179:73">PRIx64</name> <literal type="string" pos:start="179:75" pos:end="179:78">"\n"</literal></expr></argument>,

                    <argument pos:start="181:21" pos:end="181:58"><expr pos:start="181:21" pos:end="181:58"><operator pos:start="181:21" pos:end="181:21">(</operator><name pos:start="181:22" pos:end="181:29">uint64_t</name><operator pos:start="181:30" pos:end="181:30">)</operator><name pos:start="181:31" pos:end="181:58"><name pos:start="181:31" pos:end="181:33">run</name><operator pos:start="181:34" pos:end="181:35">-&gt;</operator><name pos:start="181:36" pos:end="181:37">hw</name><operator pos:start="181:38" pos:end="181:38">.</operator><name pos:start="181:39" pos:end="181:58">hardware_exit_reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:21"><expr pos:start="183:13" pos:end="183:20"><name pos:start="183:13" pos:end="183:15">ret</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <operator pos:start="183:19" pos:end="183:19">-</operator><literal type="number" pos:start="183:20" pos:end="183:20">1</literal></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        <case pos:start="187:9" pos:end="187:37">case <expr pos:start="187:14" pos:end="187:36"><name pos:start="187:14" pos:end="187:36">KVM_EXIT_INTERNAL_ERROR</name></expr>:</case>

            <expr_stmt pos:start="189:13" pos:end="189:54"><expr pos:start="189:13" pos:end="189:53"><name pos:start="189:13" pos:end="189:15">ret</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:53"><name pos:start="189:19" pos:end="189:43">kvm_handle_internal_error</name><argument_list pos:start="189:44" pos:end="189:53">(<argument pos:start="189:45" pos:end="189:47"><expr pos:start="189:45" pos:end="189:47"><name pos:start="189:45" pos:end="189:47">cpu</name></expr></argument>, <argument pos:start="189:50" pos:end="189:52"><expr pos:start="189:50" pos:end="189:52"><name pos:start="189:50" pos:end="189:52">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="191:13" pos:end="191:18">break;</break>

        <case pos:start="193:9" pos:end="193:35">case <expr pos:start="193:14" pos:end="193:34"><name pos:start="193:14" pos:end="193:34">KVM_EXIT_SYSTEM_EVENT</name></expr>:</case>

            <switch pos:start="195:13" pos:end="234:13">switch <condition pos:start="195:20" pos:end="195:43">(<expr pos:start="195:21" pos:end="195:42"><name pos:start="195:21" pos:end="195:42"><name pos:start="195:21" pos:end="195:23">run</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:37">system_event</name><operator pos:start="195:38" pos:end="195:38">.</operator><name pos:start="195:39" pos:end="195:42">type</name></name></expr>)</condition> <block pos:start="195:45" pos:end="234:13">{<block_content pos:start="197:13" pos:end="232:22">

            <case pos:start="197:13" pos:end="197:43">case <expr pos:start="197:18" pos:end="197:42"><name pos:start="197:18" pos:end="197:42">KVM_SYSTEM_EVENT_SHUTDOWN</name></expr>:</case>

                <expr_stmt pos:start="199:17" pos:end="199:47"><expr pos:start="199:17" pos:end="199:46"><call pos:start="199:17" pos:end="199:46"><name pos:start="199:17" pos:end="199:44">qemu_system_shutdown_request</name><argument_list pos:start="199:45" pos:end="199:46">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:37"><expr pos:start="201:17" pos:end="201:36"><name pos:start="201:17" pos:end="201:19">ret</name> <operator pos:start="201:21" pos:end="201:21">=</operator> <name pos:start="201:23" pos:end="201:36">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                <break pos:start="203:17" pos:end="203:22">break;</break>

            <case pos:start="205:13" pos:end="205:40">case <expr pos:start="205:18" pos:end="205:39"><name pos:start="205:18" pos:end="205:39">KVM_SYSTEM_EVENT_RESET</name></expr>:</case>

                <expr_stmt pos:start="207:17" pos:end="207:44"><expr pos:start="207:17" pos:end="207:43"><call pos:start="207:17" pos:end="207:43"><name pos:start="207:17" pos:end="207:41">qemu_system_reset_request</name><argument_list pos:start="207:42" pos:end="207:43">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:37"><expr pos:start="209:17" pos:end="209:36"><name pos:start="209:17" pos:end="209:19">ret</name> <operator pos:start="209:21" pos:end="209:21">=</operator> <name pos:start="209:23" pos:end="209:36">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                <break pos:start="211:17" pos:end="211:22">break;</break>

            <case pos:start="213:13" pos:end="213:40">case <expr pos:start="213:18" pos:end="213:39"><name pos:start="213:18" pos:end="213:39">KVM_SYSTEM_EVENT_CRASH</name></expr>:</case>


                <expr_stmt pos:start="216:17" pos:end="216:43"><expr pos:start="216:17" pos:end="216:42"><call pos:start="216:17" pos:end="216:42"><name pos:start="216:17" pos:end="216:40">qemu_mutex_lock_iothread</name><argument_list pos:start="216:41" pos:end="216:42">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="218:17" pos:end="218:45"><expr pos:start="218:17" pos:end="218:44"><call pos:start="218:17" pos:end="218:44"><name pos:start="218:17" pos:end="218:42">qemu_system_guest_panicked</name><argument_list pos:start="218:43" pos:end="218:44">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="220:17" pos:end="220:45"><expr pos:start="220:17" pos:end="220:44"><call pos:start="220:17" pos:end="220:44"><name pos:start="220:17" pos:end="220:42">qemu_mutex_unlock_iothread</name><argument_list pos:start="220:43" pos:end="220:44">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="222:17" pos:end="222:24"><expr pos:start="222:17" pos:end="222:23"><name pos:start="222:17" pos:end="222:19">ret</name> <operator pos:start="222:21" pos:end="222:21">=</operator> <literal type="number" pos:start="222:23" pos:end="222:23">0</literal></expr>;</expr_stmt>

                <break pos:start="224:17" pos:end="224:22">break;</break>

            <default pos:start="226:13" pos:end="226:20">default:</default>

                <expr_stmt pos:start="228:17" pos:end="228:50"><expr pos:start="228:17" pos:end="228:49"><call pos:start="228:17" pos:end="228:49"><name pos:start="228:17" pos:end="228:23">DPRINTF</name><argument_list pos:start="228:24" pos:end="228:49">(<argument pos:start="228:25" pos:end="228:48"><expr pos:start="228:25" pos:end="228:48"><literal type="string" pos:start="228:25" pos:end="228:48">"kvm_arch_handle_exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="230:17" pos:end="230:53"><expr pos:start="230:17" pos:end="230:52"><name pos:start="230:17" pos:end="230:19">ret</name> <operator pos:start="230:21" pos:end="230:21">=</operator> <call pos:start="230:23" pos:end="230:52"><name pos:start="230:23" pos:end="230:42">kvm_arch_handle_exit</name><argument_list pos:start="230:43" pos:end="230:52">(<argument pos:start="230:44" pos:end="230:46"><expr pos:start="230:44" pos:end="230:46"><name pos:start="230:44" pos:end="230:46">cpu</name></expr></argument>, <argument pos:start="230:49" pos:end="230:51"><expr pos:start="230:49" pos:end="230:51"><name pos:start="230:49" pos:end="230:51">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="232:17" pos:end="232:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="236:13" pos:end="236:18">break;</break>

        <default pos:start="238:9" pos:end="238:16">default:</default>

            <expr_stmt pos:start="240:13" pos:end="240:46"><expr pos:start="240:13" pos:end="240:45"><call pos:start="240:13" pos:end="240:45"><name pos:start="240:13" pos:end="240:19">DPRINTF</name><argument_list pos:start="240:20" pos:end="240:45">(<argument pos:start="240:21" pos:end="240:44"><expr pos:start="240:21" pos:end="240:44"><literal type="string" pos:start="240:21" pos:end="240:44">"kvm_arch_handle_exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="242:13" pos:end="242:49"><expr pos:start="242:13" pos:end="242:48"><name pos:start="242:13" pos:end="242:15">ret</name> <operator pos:start="242:17" pos:end="242:17">=</operator> <call pos:start="242:19" pos:end="242:48"><name pos:start="242:19" pos:end="242:38">kvm_arch_handle_exit</name><argument_list pos:start="242:39" pos:end="242:48">(<argument pos:start="242:40" pos:end="242:42"><expr pos:start="242:40" pos:end="242:42"><name pos:start="242:40" pos:end="242:42">cpu</name></expr></argument>, <argument pos:start="242:45" pos:end="242:47"><expr pos:start="242:45" pos:end="242:47"><name pos:start="242:45" pos:end="242:47">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="244:13" pos:end="244:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block> while <condition pos:start="248:13" pos:end="248:22">(<expr pos:start="248:14" pos:end="248:21"><name pos:start="248:14" pos:end="248:16">ret</name> <operator pos:start="248:18" pos:end="248:19">==</operator> <literal type="number" pos:start="248:21" pos:end="248:21">0</literal></expr>)</condition>;</do>



    <expr_stmt pos:start="252:5" pos:end="252:31"><expr pos:start="252:5" pos:end="252:30"><call pos:start="252:5" pos:end="252:30"><name pos:start="252:5" pos:end="252:28">qemu_mutex_lock_iothread</name><argument_list pos:start="252:29" pos:end="252:30">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="256:5" pos:end="262:5"><if pos:start="256:5" pos:end="262:5">if <condition pos:start="256:8" pos:end="256:16">(<expr pos:start="256:9" pos:end="256:15"><name pos:start="256:9" pos:end="256:11">ret</name> <operator pos:start="256:13" pos:end="256:13">&lt;</operator> <literal type="number" pos:start="256:15" pos:end="256:15">0</literal></expr>)</condition> <block pos:start="256:18" pos:end="262:5">{<block_content pos:start="258:9" pos:end="260:42">

        <expr_stmt pos:start="258:9" pos:end="258:60"><expr pos:start="258:9" pos:end="258:59"><call pos:start="258:9" pos:end="258:59"><name pos:start="258:9" pos:end="258:22">cpu_dump_state</name><argument_list pos:start="258:23" pos:end="258:59">(<argument pos:start="258:24" pos:end="258:26"><expr pos:start="258:24" pos:end="258:26"><name pos:start="258:24" pos:end="258:26">cpu</name></expr></argument>, <argument pos:start="258:29" pos:end="258:34"><expr pos:start="258:29" pos:end="258:34"><name pos:start="258:29" pos:end="258:34">stderr</name></expr></argument>, <argument pos:start="258:37" pos:end="258:43"><expr pos:start="258:37" pos:end="258:43"><name pos:start="258:37" pos:end="258:43">fprintf</name></expr></argument>, <argument pos:start="258:46" pos:end="258:58"><expr pos:start="258:46" pos:end="258:58"><name pos:start="258:46" pos:end="258:58">CPU_DUMP_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="260:9" pos:end="260:42"><expr pos:start="260:9" pos:end="260:41"><call pos:start="260:9" pos:end="260:41"><name pos:start="260:9" pos:end="260:15">vm_stop</name><argument_list pos:start="260:16" pos:end="260:41">(<argument pos:start="260:17" pos:end="260:40"><expr pos:start="260:17" pos:end="260:40"><name pos:start="260:17" pos:end="260:40">RUN_STATE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="266:5" pos:end="266:26"><expr pos:start="266:5" pos:end="266:25"><name pos:start="266:5" pos:end="266:21"><name pos:start="266:5" pos:end="266:7">cpu</name><operator pos:start="266:8" pos:end="266:9">-&gt;</operator><name pos:start="266:10" pos:end="266:21">exit_request</name></name> <operator pos:start="266:23" pos:end="266:23">=</operator> <literal type="number" pos:start="266:25" pos:end="266:25">0</literal></expr>;</expr_stmt>

    <return pos:start="268:5" pos:end="268:15">return <expr pos:start="268:12" pos:end="268:14"><name pos:start="268:12" pos:end="268:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
