<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21396.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">do_tb_flush</name><parameter_list pos:start="1:24" pos:end="1:70">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:32">CPUState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">cpu</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:69"><decl pos:start="1:40" pos:end="1:69"><type pos:start="1:40" pos:end="1:69"><name pos:start="1:40" pos:end="1:54">run_on_cpu_data</name></type> <name pos:start="1:56" pos:end="1:69">tb_flush_count</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:16">

    <expr_stmt pos:start="5:5" pos:end="5:14"><expr pos:start="5:5" pos:end="5:13"><call pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">tb_lock</name><argument_list pos:start="5:12" pos:end="5:13">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="9:5" pos:end="13:7">/* If it is already been done on request of another CPU,

     * just retry.

     */</comment>

    <if_stmt pos:start="15:5" pos:end="24:0"><if pos:start="15:5" pos:end="24:0">if <condition pos:start="15:8" pos:end="15:65">(<expr pos:start="15:9" pos:end="15:64"><name pos:start="15:9" pos:end="15:37"><name pos:start="15:9" pos:end="15:15">tcg_ctx</name><operator pos:start="15:16" pos:end="15:16">.</operator><name pos:start="15:17" pos:end="15:22">tb_ctx</name><operator pos:start="15:23" pos:end="15:23">.</operator><name pos:start="15:24" pos:end="15:37">tb_flush_count</name></name> <operator pos:start="15:39" pos:end="15:40">!=</operator> <name pos:start="15:42" pos:end="15:64"><name pos:start="15:42" pos:end="15:55">tb_flush_count</name><operator pos:start="15:56" pos:end="15:56">.</operator><name pos:start="15:57" pos:end="15:64">host_int</name></name></expr>)</condition> <block pos:start="15:67" pos:end="24:0">{<block_content pos:start="17:9" pos:end="17:18">

        <goto pos:start="17:9" pos:end="17:18">goto <name pos:start="17:14" pos:end="17:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="23:1" pos:end="23:27">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:27"><call pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:11">defined</name><argument_list pos:start="23:12" pos:end="23:27">(<argument pos:start="23:13" pos:end="23:26"><expr pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:26">DEBUG_TB_FLUSH</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="25:5" pos:end="36:0"><expr pos:start="25:5" pos:end="33:37"><call pos:start="25:5" pos:end="33:37"><name pos:start="25:5" pos:end="25:10">printf</name><argument_list pos:start="25:11" pos:end="33:37">(<argument pos:start="25:12" pos:end="25:66"><expr pos:start="25:12" pos:end="25:66"><literal type="string" pos:start="25:12" pos:end="25:66">"qemu: flush code_size=%ld nb_tbs=%d avg_tb_size=%ld\n"</literal></expr></argument>,

           <argument pos:start="27:12" pos:end="27:74"><expr pos:start="27:12" pos:end="27:74"><operator pos:start="27:12" pos:end="27:12">(</operator><name pos:start="27:13" pos:end="27:20">unsigned</name> <name pos:start="27:22" pos:end="27:25">long</name><operator pos:start="27:26" pos:end="27:26">)</operator><operator pos:start="27:27" pos:end="27:27">(</operator><name pos:start="27:28" pos:end="27:47"><name pos:start="27:28" pos:end="27:34">tcg_ctx</name><operator pos:start="27:35" pos:end="27:35">.</operator><name pos:start="27:36" pos:end="27:47">code_gen_ptr</name></name> <operator pos:start="27:49" pos:end="27:49">-</operator> <name pos:start="27:51" pos:end="27:73"><name pos:start="27:51" pos:end="27:57">tcg_ctx</name><operator pos:start="27:58" pos:end="27:58">.</operator><name pos:start="27:59" pos:end="27:73">code_gen_buffer</name></name><operator pos:start="27:74" pos:end="27:74">)</operator></expr></argument>,

           <argument pos:start="29:12" pos:end="29:32"><expr pos:start="29:12" pos:end="29:32"><name pos:start="29:12" pos:end="29:32"><name pos:start="29:12" pos:end="29:18">tcg_ctx</name><operator pos:start="29:19" pos:end="29:19">.</operator><name pos:start="29:20" pos:end="29:25">tb_ctx</name><operator pos:start="29:26" pos:end="29:26">.</operator><name pos:start="29:27" pos:end="29:32">nb_tbs</name></name></expr></argument>, <argument pos:start="29:35" pos:end="33:36"><expr pos:start="29:35" pos:end="33:36"><ternary pos:start="29:35" pos:end="33:36"><condition pos:start="29:35" pos:end="29:61"><expr pos:start="29:35" pos:end="29:59"><name pos:start="29:35" pos:end="29:55"><name pos:start="29:35" pos:end="29:41">tcg_ctx</name><operator pos:start="29:42" pos:end="29:42">.</operator><name pos:start="29:43" pos:end="29:48">tb_ctx</name><operator pos:start="29:49" pos:end="29:49">.</operator><name pos:start="29:50" pos:end="29:55">nb_tbs</name></name> <operator pos:start="29:57" pos:end="29:57">&gt;</operator> <literal type="number" pos:start="29:59" pos:end="29:59">0</literal></expr> ?</condition><then pos:start="31:12" pos:end="33:32">

           <expr pos:start="31:12" pos:end="33:32"><operator pos:start="31:12" pos:end="31:12">(</operator><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:21">unsigned</name> <name pos:start="31:23" pos:end="31:26">long</name><operator pos:start="31:27" pos:end="31:27">)</operator><operator pos:start="31:28" pos:end="31:28">(</operator><name pos:start="31:29" pos:end="31:48"><name pos:start="31:29" pos:end="31:35">tcg_ctx</name><operator pos:start="31:36" pos:end="31:36">.</operator><name pos:start="31:37" pos:end="31:48">code_gen_ptr</name></name> <operator pos:start="31:50" pos:end="31:50">-</operator> <name pos:start="31:52" pos:end="31:74"><name pos:start="31:52" pos:end="31:58">tcg_ctx</name><operator pos:start="31:59" pos:end="31:59">.</operator><name pos:start="31:60" pos:end="31:74">code_gen_buffer</name></name><operator pos:start="31:75" pos:end="31:75">)</operator><operator pos:start="31:76" pos:end="31:76">)</operator> <operator pos:start="31:78" pos:end="31:78">/</operator>

           <name pos:start="33:12" pos:end="33:32"><name pos:start="33:12" pos:end="33:18">tcg_ctx</name><operator pos:start="33:19" pos:end="33:19">.</operator><name pos:start="33:20" pos:end="33:25">tb_ctx</name><operator pos:start="33:26" pos:end="33:26">.</operator><name pos:start="33:27" pos:end="33:32">nb_tbs</name></name></expr> </then><else pos:start="33:34" pos:end="33:36">: <expr pos:start="33:36" pos:end="33:36"><literal type="number" pos:start="33:36" pos:end="33:36">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="39:39">(<expr pos:start="37:9" pos:end="39:38"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:17">unsigned</name> <name pos:start="37:19" pos:end="37:22">long</name><operator pos:start="37:23" pos:end="37:23">)</operator><operator pos:start="37:24" pos:end="37:24">(</operator><name pos:start="37:25" pos:end="37:44"><name pos:start="37:25" pos:end="37:31">tcg_ctx</name><operator pos:start="37:32" pos:end="37:32">.</operator><name pos:start="37:33" pos:end="37:44">code_gen_ptr</name></name> <operator pos:start="37:46" pos:end="37:46">-</operator> <name pos:start="37:48" pos:end="37:70"><name pos:start="37:48" pos:end="37:54">tcg_ctx</name><operator pos:start="37:55" pos:end="37:55">.</operator><name pos:start="37:56" pos:end="37:70">code_gen_buffer</name></name><operator pos:start="37:71" pos:end="37:71">)</operator>

        <operator pos:start="39:9" pos:end="39:9">&gt;</operator> <name pos:start="39:11" pos:end="39:38"><name pos:start="39:11" pos:end="39:17">tcg_ctx</name><operator pos:start="39:18" pos:end="39:18">.</operator><name pos:start="39:19" pos:end="39:38">code_gen_buffer_size</name></name></expr>)</condition> <block pos:start="39:41" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:65">

        <expr_stmt pos:start="41:9" pos:end="41:65"><expr pos:start="41:9" pos:end="41:64"><call pos:start="41:9" pos:end="41:64"><name pos:start="41:9" pos:end="41:17">cpu_abort</name><argument_list pos:start="41:18" pos:end="41:64">(<argument pos:start="41:19" pos:end="41:21"><expr pos:start="41:19" pos:end="41:21"><name pos:start="41:19" pos:end="41:21">cpu</name></expr></argument>, <argument pos:start="41:24" pos:end="41:63"><expr pos:start="41:24" pos:end="41:63"><literal type="string" pos:start="41:24" pos:end="41:63">"Internal error: code buffer overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:15">CPU_FOREACH</name><argument_list pos:start="47:16" pos:end="47:20">(<argument pos:start="47:17" pos:end="47:19">cpu</argument>)</argument_list></macro> <block pos:start="47:22" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:9">

        <decl_stmt pos:start="49:9" pos:end="49:14"><decl pos:start="49:9" pos:end="49:13"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:13">i</name></decl>;</decl_stmt>



        <for pos:start="53:9" pos:end="57:9">for <control pos:start="53:13" pos:end="53:47">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:42"><expr pos:start="53:21" pos:end="53:41"><name pos:start="53:21" pos:end="53:21">i</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <name pos:start="53:25" pos:end="53:41">TB_JMP_CACHE_SIZE</name></expr>;</condition> <incr pos:start="53:44" pos:end="53:46"><expr pos:start="53:44" pos:end="53:46"><operator pos:start="53:44" pos:end="53:45">++</operator><name pos:start="53:46" pos:end="53:46">i</name></expr></incr>)</control> <block pos:start="53:49" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:52">

            <expr_stmt pos:start="55:13" pos:end="55:52"><expr pos:start="55:13" pos:end="55:51"><call pos:start="55:13" pos:end="55:51"><name pos:start="55:13" pos:end="55:22">atomic_set</name><argument_list pos:start="55:23" pos:end="55:51">(<argument pos:start="55:24" pos:end="55:44"><expr pos:start="55:24" pos:end="55:44"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:44"><name pos:start="55:25" pos:end="55:27">cpu</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:41">tb_jmp_cache</name><index pos:start="55:42" pos:end="55:44">[<expr pos:start="55:43" pos:end="55:43"><name pos:start="55:43" pos:end="55:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="55:47" pos:end="55:50"><expr pos:start="55:47" pos:end="55:50"><name pos:start="55:47" pos:end="55:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <expr_stmt pos:start="63:5" pos:end="63:30"><expr pos:start="63:5" pos:end="63:29"><name pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:11">tcg_ctx</name><operator pos:start="63:12" pos:end="63:12">.</operator><name pos:start="63:13" pos:end="63:18">tb_ctx</name><operator pos:start="63:19" pos:end="63:19">.</operator><name pos:start="63:20" pos:end="63:25">nb_tbs</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <literal type="number" pos:start="63:29" pos:end="63:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:65"><expr pos:start="65:5" pos:end="65:64"><call pos:start="65:5" pos:end="65:64"><name pos:start="65:5" pos:end="65:18">qht_reset_size</name><argument_list pos:start="65:19" pos:end="65:64">(<argument pos:start="65:20" pos:end="65:41"><expr pos:start="65:20" pos:end="65:41"><operator pos:start="65:20" pos:end="65:20">&amp;</operator><name pos:start="65:21" pos:end="65:41"><name pos:start="65:21" pos:end="65:27">tcg_ctx</name><operator pos:start="65:28" pos:end="65:28">.</operator><name pos:start="65:29" pos:end="65:34">tb_ctx</name><operator pos:start="65:35" pos:end="65:35">.</operator><name pos:start="65:36" pos:end="65:41">htable</name></name></expr></argument>, <argument pos:start="65:44" pos:end="65:63"><expr pos:start="65:44" pos:end="65:63"><name pos:start="65:44" pos:end="65:63">CODE_GEN_HTABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:20"><expr pos:start="67:5" pos:end="67:19"><call pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:17">page_flush_tb</name><argument_list pos:start="67:18" pos:end="67:19">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:51"><expr pos:start="71:5" pos:end="71:50"><name pos:start="71:5" pos:end="71:24"><name pos:start="71:5" pos:end="71:11">tcg_ctx</name><operator pos:start="71:12" pos:end="71:12">.</operator><name pos:start="71:13" pos:end="71:24">code_gen_ptr</name></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <name pos:start="71:28" pos:end="71:50"><name pos:start="71:28" pos:end="71:34">tcg_ctx</name><operator pos:start="71:35" pos:end="71:35">.</operator><name pos:start="71:36" pos:end="71:50">code_gen_buffer</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="73:5" pos:end="75:19">/* XXX: flush processor icache at this point if cache flush is

       expensive */</comment>

    <expr_stmt pos:start="77:5" pos:end="79:53"><expr pos:start="77:5" pos:end="79:52"><call pos:start="77:5" pos:end="79:52"><name pos:start="77:5" pos:end="77:17">atomic_mb_set</name><argument_list pos:start="77:18" pos:end="79:52">(<argument pos:start="77:19" pos:end="77:48"><expr pos:start="77:19" pos:end="77:48"><operator pos:start="77:19" pos:end="77:19">&amp;</operator><name pos:start="77:20" pos:end="77:48"><name pos:start="77:20" pos:end="77:26">tcg_ctx</name><operator pos:start="77:27" pos:end="77:27">.</operator><name pos:start="77:28" pos:end="77:33">tb_ctx</name><operator pos:start="77:34" pos:end="77:34">.</operator><name pos:start="77:35" pos:end="77:48">tb_flush_count</name></name></expr></argument>,

                  <argument pos:start="79:19" pos:end="79:51"><expr pos:start="79:19" pos:end="79:51"><name pos:start="79:19" pos:end="79:47"><name pos:start="79:19" pos:end="79:25">tcg_ctx</name><operator pos:start="79:26" pos:end="79:26">.</operator><name pos:start="79:27" pos:end="79:32">tb_ctx</name><operator pos:start="79:33" pos:end="79:33">.</operator><name pos:start="79:34" pos:end="79:47">tb_flush_count</name></name> <operator pos:start="79:49" pos:end="79:49">+</operator> <literal type="number" pos:start="79:51" pos:end="79:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="83:1" pos:end="83:5"><name pos:start="83:1" pos:end="83:4">done</name>:</label>

    <expr_stmt pos:start="85:5" pos:end="85:16"><expr pos:start="85:5" pos:end="85:15"><call pos:start="85:5" pos:end="85:15"><name pos:start="85:5" pos:end="85:13">tb_unlock</name><argument_list pos:start="85:14" pos:end="85:15">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
