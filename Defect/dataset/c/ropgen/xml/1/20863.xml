<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20863.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">vfio_setup_pcie_cap</name><parameter_list pos:start="1:31" pos:end="2:44">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:44">VFIOPCIDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">vdev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:59"><decl pos:start="1:53" pos:end="1:59"><type pos:start="1:53" pos:end="1:59"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:59">pos</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:68">uint8_t</name></type> <name pos:start="1:70" pos:end="1:73">size</name></decl></parameter>,
                               <parameter pos:start="2:32" pos:end="2:43"><decl pos:start="2:32" pos:end="2:43"><type pos:start="2:32" pos:end="2:43"><name pos:start="2:32" pos:end="2:36">Error</name> <modifier pos:start="2:38" pos:end="2:38">*</modifier><modifier pos:start="2:39" pos:end="2:39">*</modifier></type><name pos:start="2:40" pos:end="2:43">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="85:15">{<block_content pos:start="4:5" pos:end="85:15">
    <decl_stmt pos:start="4:5" pos:end="4:19"><decl pos:start="4:5" pos:end="4:18"><type pos:start="4:5" pos:end="4:12"><name pos:start="4:5" pos:end="4:12">uint16_t</name></type> <name pos:start="4:14" pos:end="4:18">flags</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:16">type</name></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:66"><expr pos:start="6:5" pos:end="6:65"><name pos:start="6:5" pos:end="6:9">flags</name> <operator pos:start="6:11" pos:end="6:11">=</operator> <call pos:start="6:13" pos:end="6:65"><name pos:start="6:13" pos:end="6:24">pci_get_word</name><argument_list pos:start="6:25" pos:end="6:65">(<argument pos:start="6:26" pos:end="6:64"><expr pos:start="6:26" pos:end="6:64"><name pos:start="6:26" pos:end="6:42"><name pos:start="6:26" pos:end="6:29">vdev</name><operator pos:start="6:30" pos:end="6:31">-&gt;</operator><name pos:start="6:32" pos:end="6:35">pdev</name><operator pos:start="6:36" pos:end="6:36">.</operator><name pos:start="6:37" pos:end="6:42">config</name></name> <operator pos:start="6:44" pos:end="6:44">+</operator> <name pos:start="6:46" pos:end="6:48">pos</name> <operator pos:start="6:50" pos:end="6:50">+</operator> <name pos:start="6:52" pos:end="6:64">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:45"><expr pos:start="7:5" pos:end="7:44"><name pos:start="7:5" pos:end="7:8">type</name> <operator pos:start="7:10" pos:end="7:10">=</operator> <operator pos:start="7:12" pos:end="7:12">(</operator><name pos:start="7:13" pos:end="7:17">flags</name> <operator pos:start="7:19" pos:end="7:19">&amp;</operator> <name pos:start="7:21" pos:end="7:38">PCI_EXP_FLAGS_TYPE</name><operator pos:start="7:39" pos:end="7:39">)</operator> <operator pos:start="7:41" pos:end="7:42">&gt;&gt;</operator> <literal type="number" pos:start="7:44" pos:end="7:44">4</literal></expr>;</expr_stmt>
    <if_stmt pos:start="8:5" pos:end="85:15"><if pos:start="8:5" pos:end="85:15">if <condition pos:start="8:8" pos:end="10:36">(<expr pos:start="8:9" pos:end="10:35"><name pos:start="8:9" pos:end="8:12">type</name> <operator pos:start="8:14" pos:end="8:15">!=</operator> <name pos:start="8:17" pos:end="8:37">PCI_EXP_TYPE_ENDPOINT</name> <operator pos:start="8:39" pos:end="8:40">&amp;&amp;</operator>
        <name pos:start="9:9" pos:end="9:12">type</name> <operator pos:start="9:14" pos:end="9:15">!=</operator> <name pos:start="9:17" pos:end="9:36">PCI_EXP_TYPE_LEG_END</name> <operator pos:start="9:38" pos:end="9:39">&amp;&amp;</operator>
        <name pos:start="10:9" pos:end="10:12">type</name> <operator pos:start="10:14" pos:end="10:15">!=</operator> <name pos:start="10:17" pos:end="10:35">PCI_EXP_TYPE_RC_END</name></expr>)</condition> <block pos:start="10:38" pos:end="85:15">{<block_content pos:start="11:9" pos:end="85:15">
        <expr_stmt pos:start="11:9" pos:end="12:63"><expr pos:start="11:9" pos:end="12:62"><call pos:start="11:9" pos:end="12:62"><name pos:start="11:9" pos:end="11:18">error_setg</name><argument_list pos:start="11:19" pos:end="12:62">(<argument pos:start="11:20" pos:end="11:23"><expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">errp</name></expr></argument>, <argument pos:start="11:26" pos:end="12:55"><expr pos:start="11:26" pos:end="12:55"><literal type="string" pos:start="11:26" pos:end="11:56">"assignment of PCIe type 0x%x "</literal>
                   <literal type="string" pos:start="12:20" pos:end="12:55">"devices is not currently supported"</literal></expr></argument>, <argument pos:start="12:58" pos:end="12:61"><expr pos:start="12:58" pos:end="12:61"><name pos:start="12:58" pos:end="12:61">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="13:9" pos:end="13:23">return <expr pos:start="13:16" pos:end="13:22"><operator pos:start="13:16" pos:end="13:16">-</operator><name pos:start="13:17" pos:end="13:22">EINVAL</name></expr>;</return>
    <if_stmt pos:start="14:5" pos:end="85:15"><if pos:start="14:5" pos:end="85:15">if <condition pos:start="14:8" pos:end="14:44">(<expr pos:start="14:9" pos:end="14:43"><operator pos:start="14:9" pos:end="14:9">!</operator><call pos:start="14:10" pos:end="14:43"><name pos:start="14:10" pos:end="14:27">pci_bus_is_express</name><argument_list pos:start="14:28" pos:end="14:43">(<argument pos:start="14:29" pos:end="14:42"><expr pos:start="14:29" pos:end="14:42"><name pos:start="14:29" pos:end="14:42"><name pos:start="14:29" pos:end="14:32">vdev</name><operator pos:start="14:33" pos:end="14:34">-&gt;</operator><name pos:start="14:35" pos:end="14:38">pdev</name><operator pos:start="14:39" pos:end="14:39">.</operator><name pos:start="14:40" pos:end="14:42">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="14:46" pos:end="85:15">{<block_content pos:start="15:9" pos:end="85:15">
        <decl_stmt pos:start="15:9" pos:end="15:37"><decl pos:start="15:9" pos:end="15:36"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:14">PCIBus</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">bus</name> <init pos:start="15:21" pos:end="15:36">= <expr pos:start="15:23" pos:end="15:36"><name pos:start="15:23" pos:end="15:36"><name pos:start="15:23" pos:end="15:26">vdev</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:32">pdev</name><operator pos:start="15:33" pos:end="15:33">.</operator><name pos:start="15:34" pos:end="15:36">bus</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="16:9" pos:end="16:26"><decl pos:start="16:9" pos:end="16:25"><type pos:start="16:9" pos:end="16:19"><name pos:start="16:9" pos:end="16:17">PCIDevice</name> <modifier pos:start="16:19" pos:end="16:19">*</modifier></type><name pos:start="16:20" pos:end="16:25">bridge</name></decl>;</decl_stmt>
         <expr_stmt pos:start="17:10" pos:end="21:51"><expr pos:start="17:10" pos:end="20:54"><operator pos:start="17:10" pos:end="17:10">*</operator> <name pos:start="17:12" pos:end="17:24">Traditionally</name> <name pos:start="17:26" pos:end="17:28">PCI</name> <name pos:start="17:30" pos:end="17:35">device</name> <name pos:start="17:37" pos:end="17:46">assignment</name> <name pos:start="17:48" pos:end="17:54">exposes</name> <name pos:start="17:56" pos:end="17:58">the</name> <name pos:start="17:60" pos:end="17:63">PCIe</name> <name pos:start="17:65" pos:end="17:74">capability</name>
         <operator pos:start="18:10" pos:end="18:10">*</operator> <name pos:start="18:12" pos:end="18:13">as</name><operator pos:start="18:14" pos:end="18:14">-</operator><name pos:start="18:15" pos:end="18:16">is</name> <name pos:start="18:18" pos:end="18:19">on</name> <name pos:start="18:21" pos:end="18:23">non</name><operator pos:start="18:24" pos:end="18:24">-</operator><name pos:start="18:25" pos:end="18:31">express</name> <name pos:start="18:33" pos:end="18:43"><name pos:start="18:33" pos:end="18:37">buses</name><operator pos:start="18:38" pos:end="18:38">.</operator>  <name pos:start="18:41" pos:end="18:43">The</name></name> <name pos:start="18:45" pos:end="18:50">reason</name> <name pos:start="18:52" pos:end="18:56">being</name> <name pos:start="18:58" pos:end="18:61">that</name> <name pos:start="18:63" pos:end="18:66">some</name> <name pos:start="18:68" pos:end="18:74">drivers</name>
         <operator pos:start="19:10" pos:end="19:10">*</operator> <name pos:start="19:12" pos:end="19:17">simply</name> <name pos:start="19:19" pos:end="19:24">assume</name> <name pos:start="19:26" pos:end="19:29">that</name> <name pos:start="19:31" pos:end="19:32">it</name><literal type="char" pos:start="19:33" pos:end="20:14">'s there, for example tg3.  However when
         * we'</literal><name pos:start="20:15" pos:end="20:16">re</name> <name pos:start="20:18" pos:end="20:24">running</name> <name pos:start="20:26" pos:end="20:27">on</name> <name pos:start="20:29" pos:end="20:29">a</name> <name pos:start="20:31" pos:end="20:36">native</name> <name pos:start="20:38" pos:end="20:41">PCIe</name> <name pos:start="20:43" pos:end="20:49">machine</name> <name pos:start="20:51" pos:end="20:54">type</name></expr><operator pos:start="20:55" pos:end="20:55">,</operator> <expr pos:start="20:57" pos:end="20:64"><name pos:start="20:57" pos:end="20:60">like</name> <name pos:start="20:62" pos:end="20:64">Q35</name></expr><operator pos:start="20:65" pos:end="20:65">,</operator> <expr pos:start="20:67" pos:end="21:51"><name pos:start="20:67" pos:end="20:68">we</name> <name pos:start="20:70" pos:end="20:73">need</name>
         <operator pos:start="21:10" pos:end="21:10">*</operator> <name pos:start="21:12" pos:end="21:13">to</name> <name pos:start="21:15" pos:end="21:18">hide</name> <name pos:start="21:20" pos:end="21:22">the</name> <name pos:start="21:24" pos:end="21:27">PCIe</name> <name pos:start="21:29" pos:end="21:44"><name pos:start="21:29" pos:end="21:38">capability</name><operator pos:start="21:39" pos:end="21:39">.</operator>  <name pos:start="21:42" pos:end="21:44">The</name></name> <name pos:start="21:46" pos:end="21:51">reason</name></expr></expr_stmt> <for pos:start="21:53" pos:end="21:72">for this is twofold<empty_stmt pos:start="21:72" pos:end="21:72">;</empty_stmt></for>
         <expr_stmt pos:start="22:10" pos:end="37:30"><expr pos:start="22:10" pos:end="25:17"><operator pos:start="22:10" pos:end="22:10">*</operator> <name pos:start="22:12" pos:end="22:16">first</name> <name pos:start="22:18" pos:end="22:24">Windows</name> <name pos:start="22:26" pos:end="22:31">guests</name> <name pos:start="22:33" pos:end="22:35">get</name> <name pos:start="22:37" pos:end="22:37">a</name> <name pos:start="22:39" pos:end="22:42">Code</name> <literal type="number" pos:start="22:44" pos:end="22:45">10</literal> <name pos:start="22:47" pos:end="22:51">error</name> <name pos:start="22:53" pos:end="22:56">when</name> <name pos:start="22:58" pos:end="22:60">the</name> <name pos:start="22:62" pos:end="22:65">PCIe</name> <name pos:start="22:67" pos:end="22:76">capability</name>
         <operator pos:start="23:10" pos:end="23:10">*</operator> <name pos:start="23:12" pos:end="23:13">is</name> <name pos:start="23:15" pos:end="23:21">exposed</name> <name pos:start="23:23" pos:end="23:24">in</name> <name pos:start="23:26" pos:end="23:29">this</name> <name pos:start="23:31" pos:end="23:55"><name pos:start="23:31" pos:end="23:43">configuration</name><operator pos:start="23:44" pos:end="23:44">.</operator>  <name pos:start="23:47" pos:end="23:55">Therefore</name></name> <name pos:start="23:57" pos:end="23:63">express</name> <name pos:start="23:65" pos:end="23:71">devices</name> <name pos:start="23:73" pos:end="23:75">won</name><literal type="char" pos:start="23:76" pos:end="24:35">'t
         * work at all unless they'</literal><name pos:start="24:36" pos:end="24:37">re</name> <name pos:start="24:39" pos:end="24:46">attached</name> <name pos:start="24:48" pos:end="24:49">to</name> <name pos:start="24:51" pos:end="24:57">express</name> <name pos:start="24:59" pos:end="24:63">buses</name> <name pos:start="24:65" pos:end="24:66">in</name> <name pos:start="24:68" pos:end="24:70">the</name> <name pos:start="24:72" pos:end="25:17"><name pos:start="24:72" pos:end="24:73">VM</name><operator pos:start="24:74" pos:end="24:74">.</operator>
         <modifier pos:start="25:10" pos:end="25:10">*</modifier> <name pos:start="25:12" pos:end="25:17">Second</name></name></expr><operator pos:start="25:18" pos:end="25:18">,</operator> <expr pos:start="25:20" pos:end="27:66"><name pos:start="25:20" pos:end="25:20">a</name> <name pos:start="25:22" pos:end="25:27">native</name> <name pos:start="25:29" pos:end="25:32">PCIe</name> <name pos:start="25:34" pos:end="25:40">machine</name> <name pos:start="25:42" pos:end="25:51">introduces</name> <name pos:start="25:53" pos:end="25:55">the</name> <name pos:start="25:57" pos:end="25:67">possibility</name> <name pos:start="25:69" pos:end="25:70">of</name> <name pos:start="25:72" pos:end="25:75">fine</name>
         <operator pos:start="26:10" pos:end="26:10">*</operator> <name pos:start="26:12" pos:end="26:22">granularity</name> <name pos:start="26:24" pos:end="26:29">IOMMUs</name> <name pos:start="26:31" pos:end="26:40">supporting</name> <name pos:start="26:42" pos:end="26:45">both</name> <name pos:start="26:47" pos:end="26:57">translation</name> <name pos:start="26:59" pos:end="26:61">and</name> <name pos:start="26:63" pos:end="27:16"><name pos:start="26:63" pos:end="26:71">isolation</name><operator pos:start="26:72" pos:end="26:72">.</operator>
         <modifier pos:start="27:10" pos:end="27:10">*</modifier> <name pos:start="27:12" pos:end="27:16">Guest</name></name> <name pos:start="27:18" pos:end="27:21">code</name> <name pos:start="27:23" pos:end="27:24">to</name> <name pos:start="27:26" pos:end="27:33">discover</name> <name pos:start="27:35" pos:end="27:37">the</name> <name pos:start="27:39" pos:end="27:43">IOMMU</name> <name pos:start="27:45" pos:end="27:54">visibility</name> <name pos:start="27:56" pos:end="27:57">of</name> <name pos:start="27:59" pos:end="27:59">a</name> <name pos:start="27:61" pos:end="27:66">device</name></expr><operator pos:start="27:67" pos:end="27:67">,</operator> <expr pos:start="27:69" pos:end="28:39"><name pos:start="27:69" pos:end="27:72">such</name> <name pos:start="27:74" pos:end="27:75">as</name>
         <operator pos:start="28:10" pos:end="28:10">*</operator> <name pos:start="28:12" pos:end="28:16">IOMMU</name> <name pos:start="28:18" pos:end="28:25">grouping</name> <name pos:start="28:27" pos:end="28:30">code</name> <name pos:start="28:32" pos:end="28:33">on</name> <name pos:start="28:35" pos:end="28:39">Linux</name></expr><operator pos:start="28:40" pos:end="28:40">,</operator> <expr pos:start="28:42" pos:end="37:29"><name pos:start="28:42" pos:end="28:43">is</name> <name pos:start="28:45" pos:end="28:48">very</name> <name pos:start="28:50" pos:end="28:54">aware</name> <name pos:start="28:56" pos:end="28:57">of</name> <name pos:start="28:59" pos:end="28:64">device</name> <name pos:start="28:66" pos:end="28:70">types</name> <name pos:start="28:72" pos:end="28:74">and</name>
         <operator pos:start="29:10" pos:end="29:10">*</operator> <name pos:start="29:12" pos:end="29:16">valid</name> <name pos:start="29:18" pos:end="29:28">transitions</name> <name pos:start="29:30" pos:end="29:36">between</name> <name pos:start="29:38" pos:end="29:40">bus</name> <name pos:start="29:42" pos:end="29:51"><name pos:start="29:42" pos:end="29:46">types</name><operator pos:start="29:47" pos:end="29:47">.</operator>  <name pos:start="29:50" pos:end="29:51">An</name></name> <name pos:start="29:53" pos:end="29:59">express</name> <name pos:start="29:61" pos:end="29:66">device</name> <name pos:start="29:68" pos:end="29:69">on</name> <name pos:start="29:71" pos:end="29:71">a</name> <name pos:start="29:73" pos:end="29:75">non</name><operator pos:start="29:76" pos:end="29:76">-</operator>
         <operator pos:start="30:10" pos:end="30:10">*</operator> <name pos:start="30:12" pos:end="30:18">express</name> <name pos:start="30:20" pos:end="30:22">bus</name> <name pos:start="30:24" pos:end="30:25">is</name> <name pos:start="30:27" pos:end="30:29">not</name> <name pos:start="30:31" pos:end="30:31">a</name> <name pos:start="30:33" pos:end="30:37">valid</name> <name pos:start="30:39" pos:end="30:49">combination</name> <name pos:start="30:51" pos:end="30:52">on</name> <name pos:start="30:54" pos:end="30:57">bare</name> <name pos:start="30:59" pos:end="30:63">metal</name> <name pos:start="30:65" pos:end="32:18"><name pos:start="30:65" pos:end="30:71">systems</name><operator pos:start="30:72" pos:end="30:72">.</operator>
         <modifier pos:start="31:10" pos:end="31:10">*</modifier>
         <modifier pos:start="32:10" pos:end="32:10">*</modifier> <name pos:start="32:12" pos:end="32:18">Drivers</name></name> <name pos:start="32:20" pos:end="32:23">that</name> <name pos:start="32:25" pos:end="32:31">require</name> <name pos:start="32:33" pos:end="32:33">a</name> <name pos:start="32:35" pos:end="32:38">PCIe</name> <name pos:start="32:40" pos:end="32:49">capability</name> <name pos:start="32:51" pos:end="32:52">to</name> <name pos:start="32:54" pos:end="32:57">make</name> <name pos:start="32:59" pos:end="32:61">the</name> <name pos:start="32:63" pos:end="32:68">device</name>
         <operator pos:start="33:10" pos:end="33:10">*</operator> <name pos:start="33:12" pos:end="33:21">functional</name> <name pos:start="33:23" pos:end="33:25">are</name> <name pos:start="33:27" pos:end="33:32">simply</name> <name pos:start="33:34" pos:end="33:38">going</name> <name pos:start="33:40" pos:end="33:41">to</name> <name pos:start="33:43" pos:end="33:46">need</name> <name pos:start="33:48" pos:end="33:49">to</name> <name pos:start="33:51" pos:end="33:54">have</name> <name pos:start="33:56" pos:end="33:60">their</name> <name pos:start="33:62" pos:end="33:68">devices</name> <name pos:start="33:70" pos:end="33:75">placed</name>
         <operator pos:start="34:10" pos:end="34:10">*</operator> <name pos:start="34:12" pos:end="34:13">on</name> <name pos:start="34:15" pos:end="34:15">a</name> <name pos:start="34:17" pos:end="34:20">PCIe</name> <name pos:start="34:22" pos:end="34:24">bus</name> <name pos:start="34:26" pos:end="34:27">in</name> <name pos:start="34:29" pos:end="34:31">the</name> <name pos:start="34:33" pos:end="34:35"><name pos:start="34:33" pos:end="34:34">VM</name><operator pos:start="34:35" pos:end="34:35">.</operator>
        <name/></name>while <operator pos:start="35:15" pos:end="35:15">(</operator><operator pos:start="35:16" pos:end="35:16">!</operator><call pos:start="35:17" pos:end="35:36"><name pos:start="35:17" pos:end="35:31">pci_bus_is_root</name><argument_list pos:start="35:32" pos:end="35:36">(<argument pos:start="35:33" pos:end="35:35"><expr pos:start="35:33" pos:end="35:35"><name pos:start="35:33" pos:end="35:35">bus</name></expr></argument>)</argument_list></call><operator pos:start="35:37" pos:end="35:37">)</operator> <block pos:start="35:39" pos:end="37:29">{
            <expr pos:start="36:13" pos:end="36:47"><name pos:start="36:13" pos:end="36:18">bridge</name> <operator pos:start="36:20" pos:end="36:20">=</operator> <call pos:start="36:22" pos:end="36:47"><name pos:start="36:22" pos:end="36:42">pci_bridge_get_device</name><argument_list pos:start="36:43" pos:end="36:47">(<argument pos:start="36:44" pos:end="36:46"><expr pos:start="36:44" pos:end="36:46"><name pos:start="36:44" pos:end="36:46">bus</name></expr></argument>)</argument_list></call></expr>;
            <name pos:start="37:13" pos:end="37:15">bus</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:29"><name pos:start="37:19" pos:end="37:24">bridge</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:29">bus</name></name></block></expr>;</expr_stmt>
        <if_stmt pos:start="38:9" pos:end="85:15"><if pos:start="38:9" pos:end="40:5">if <condition pos:start="38:12" pos:end="38:36">(<expr pos:start="38:13" pos:end="38:35"><call pos:start="38:13" pos:end="38:35"><name pos:start="38:13" pos:end="38:30">pci_bus_is_express</name><argument_list pos:start="38:31" pos:end="38:35">(<argument pos:start="38:32" pos:end="38:34"><expr pos:start="38:32" pos:end="38:34"><name pos:start="38:32" pos:end="38:34">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="38:38" pos:end="40:5">{<block_content pos:start="39:13" pos:end="39:21">
            <return pos:start="39:13" pos:end="39:21">return <expr pos:start="39:20" pos:end="39:20"><literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="40:7" pos:end="85:15">else if <condition pos:start="40:15" pos:end="40:47">(<expr pos:start="40:16" pos:end="40:46"><call pos:start="40:16" pos:end="40:46"><name pos:start="40:16" pos:end="40:30">pci_bus_is_root</name><argument_list pos:start="40:31" pos:end="40:46">(<argument pos:start="40:32" pos:end="40:45"><expr pos:start="40:32" pos:end="40:45"><name pos:start="40:32" pos:end="40:45"><name pos:start="40:32" pos:end="40:35">vdev</name><operator pos:start="40:36" pos:end="40:37">-&gt;</operator><name pos:start="40:38" pos:end="40:41">pdev</name><operator pos:start="40:42" pos:end="40:42">.</operator><name pos:start="40:43" pos:end="40:45">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="40:49" pos:end="85:15">{<block_content pos:start="41:10" pos:end="85:15">
         <expr_stmt pos:start="41:10" pos:end="45:55"><expr pos:start="41:10" pos:end="42:20"><operator pos:start="41:10" pos:end="41:10">*</operator> <name pos:start="41:12" pos:end="41:13">On</name> <name pos:start="41:15" pos:end="41:15">a</name> <name pos:start="41:17" pos:end="41:20">Root</name> <name pos:start="41:22" pos:end="41:28">Complex</name> <name pos:start="41:30" pos:end="41:32">bus</name> <name pos:start="41:34" pos:end="41:42">Endpoints</name> <name pos:start="41:44" pos:end="41:49">become</name> <name pos:start="41:51" pos:end="41:54">Root</name> <name pos:start="41:56" pos:end="41:62">Complex</name> <name pos:start="41:64" pos:end="41:73">Integrated</name>
         <operator pos:start="42:10" pos:end="42:10">*</operator> <name pos:start="42:12" pos:end="42:20">Endpoints</name></expr><operator pos:start="42:21" pos:end="42:21">,</operator> <expr pos:start="42:23" pos:end="45:54"><name pos:start="42:23" pos:end="42:27">which</name> <name pos:start="42:29" pos:end="42:35">changes</name> <name pos:start="42:37" pos:end="42:39">the</name> <name pos:start="42:41" pos:end="42:44">type</name> <name pos:start="42:46" pos:end="42:48">and</name> <name pos:start="42:50" pos:end="42:55">clears</name> <name pos:start="42:57" pos:end="42:59">the</name> <name pos:start="42:61" pos:end="42:63">LNK</name> <operator pos:start="42:65" pos:end="42:65">&amp;</operator> <name pos:start="42:67" pos:end="42:70">LNK2</name> <name pos:start="42:72" pos:end="42:78"><name pos:start="42:72" pos:end="42:77">fields</name><operator pos:start="42:78" pos:end="42:78">.</operator>
        <name/></name>if <operator pos:start="43:12" pos:end="43:12">(</operator><name pos:start="43:13" pos:end="43:16">type</name> <operator pos:start="43:18" pos:end="43:19">==</operator> <name pos:start="43:21" pos:end="43:41">PCI_EXP_TYPE_ENDPOINT</name><operator pos:start="43:42" pos:end="43:42">)</operator> <block pos:start="43:44" pos:end="45:54">{
                                   <expr pos:start="44:36" pos:end="44:59"><name pos:start="44:36" pos:end="44:54">PCI_EXP_TYPE_RC_END</name> <operator pos:start="44:56" pos:end="44:57">&lt;&lt;</operator> <literal type="number" pos:start="44:59" pos:end="44:59">4</literal></expr>,
                                   <expr pos:start="45:36" pos:end="45:53"><name pos:start="45:36" pos:end="45:53">PCI_EXP_FLAGS_TYPE</name></expr>)</block></expr>;</expr_stmt>
            <comment type="block" pos:start="46:13" pos:end="46:66">/* Link Capabilities, Status, and Control goes away */</comment>
            <if_stmt pos:start="47:13" pos:end="85:15"><if pos:start="47:13" pos:end="85:15">if <condition pos:start="47:16" pos:end="47:38">(<expr pos:start="47:17" pos:end="47:37"><name pos:start="47:17" pos:end="47:20">size</name> <operator pos:start="47:22" pos:end="47:22">&gt;</operator> <name pos:start="47:24" pos:end="47:37">PCI_EXP_LNKCTL</name></expr>)</condition> <block pos:start="47:40" pos:end="85:15">{<block_content pos:start="48:17" pos:end="85:15">
                <expr_stmt pos:start="48:17" pos:end="48:74"><expr pos:start="48:17" pos:end="48:73"><call pos:start="48:17" pos:end="48:73"><name pos:start="48:17" pos:end="48:38">vfio_add_emulated_long</name><argument_list pos:start="48:39" pos:end="48:73">(<argument pos:start="48:40" pos:end="48:43"><expr pos:start="48:40" pos:end="48:43"><name pos:start="48:40" pos:end="48:43">vdev</name></expr></argument>, <argument pos:start="48:46" pos:end="48:65"><expr pos:start="48:46" pos:end="48:65"><name pos:start="48:46" pos:end="48:48">pos</name> <operator pos:start="48:50" pos:end="48:50">+</operator> <name pos:start="48:52" pos:end="48:65">PCI_EXP_LNKCAP</name></expr></argument>, <argument pos:start="48:68" pos:end="48:68"><expr pos:start="48:68" pos:end="48:68"><literal type="number" pos:start="48:68" pos:end="48:68">0</literal></expr></argument>, <argument pos:start="48:71" pos:end="48:72"><expr pos:start="48:71" pos:end="48:72"><operator pos:start="48:71" pos:end="48:71">~</operator><literal type="number" pos:start="48:72" pos:end="48:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="49:17" pos:end="49:74"><expr pos:start="49:17" pos:end="49:73"><call pos:start="49:17" pos:end="49:73"><name pos:start="49:17" pos:end="49:38">vfio_add_emulated_word</name><argument_list pos:start="49:39" pos:end="49:73">(<argument pos:start="49:40" pos:end="49:43"><expr pos:start="49:40" pos:end="49:43"><name pos:start="49:40" pos:end="49:43">vdev</name></expr></argument>, <argument pos:start="49:46" pos:end="49:65"><expr pos:start="49:46" pos:end="49:65"><name pos:start="49:46" pos:end="49:48">pos</name> <operator pos:start="49:50" pos:end="49:50">+</operator> <name pos:start="49:52" pos:end="49:65">PCI_EXP_LNKCTL</name></expr></argument>, <argument pos:start="49:68" pos:end="49:68"><expr pos:start="49:68" pos:end="49:68"><literal type="number" pos:start="49:68" pos:end="49:68">0</literal></expr></argument>, <argument pos:start="49:71" pos:end="49:72"><expr pos:start="49:71" pos:end="49:72"><operator pos:start="49:71" pos:end="49:71">~</operator><literal type="number" pos:start="49:72" pos:end="49:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="50:17" pos:end="57:0"><expr pos:start="50:17" pos:end="50:73"><call pos:start="50:17" pos:end="50:73"><name pos:start="50:17" pos:end="50:38">vfio_add_emulated_word</name><argument_list pos:start="50:39" pos:end="50:73">(<argument pos:start="50:40" pos:end="50:43"><expr pos:start="50:40" pos:end="50:43"><name pos:start="50:40" pos:end="50:43">vdev</name></expr></argument>, <argument pos:start="50:46" pos:end="50:65"><expr pos:start="50:46" pos:end="50:65"><name pos:start="50:46" pos:end="50:48">pos</name> <operator pos:start="50:50" pos:end="50:50">+</operator> <name pos:start="50:52" pos:end="50:65">PCI_EXP_LNKSTA</name></expr></argument>, <argument pos:start="50:68" pos:end="50:68"><expr pos:start="50:68" pos:end="50:68"><literal type="number" pos:start="50:68" pos:end="50:68">0</literal></expr></argument>, <argument pos:start="50:71" pos:end="50:72"><expr pos:start="50:71" pos:end="50:72"><operator pos:start="50:71" pos:end="50:71">~</operator><literal type="number" pos:start="50:72" pos:end="50:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef pos:start="51:1" pos:end="51:23">#<cpp:directive pos:start="51:2" pos:end="51:7">ifndef</cpp:directive> <name pos:start="51:9" pos:end="51:23">PCI_EXP_LNKCAP2</name></cpp:ifndef>
<cpp:define pos:start="52:1" pos:end="52:26">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:23"><name pos:start="52:9" pos:end="52:23">PCI_EXP_LNKCAP2</name></cpp:macro> <cpp:value pos:start="52:25" pos:end="52:26">44</cpp:value></cpp:define>
<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>
<cpp:ifndef pos:start="54:1" pos:end="54:23">#<cpp:directive pos:start="54:2" pos:end="54:7">ifndef</cpp:directive> <name pos:start="54:9" pos:end="54:23">PCI_EXP_LNKSTA2</name></cpp:ifndef>
<cpp:define pos:start="55:1" pos:end="55:26">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:23">PCI_EXP_LNKSTA2</name></cpp:macro> <cpp:value pos:start="55:25" pos:end="55:26">50</cpp:value></cpp:define>
<cpp:endif pos:start="56:1" pos:end="56:6">#<cpp:directive pos:start="56:2" pos:end="56:6">endif</cpp:directive></cpp:endif>
                <comment type="block" pos:start="57:17" pos:end="57:72">/* Link 2 Capabilities, Status, and Control goes away */</comment>
                <if_stmt pos:start="58:17" pos:end="85:15"><if pos:start="58:17" pos:end="62:9">if <condition pos:start="58:20" pos:end="58:43">(<expr pos:start="58:21" pos:end="58:42"><name pos:start="58:21" pos:end="58:24">size</name> <operator pos:start="58:26" pos:end="58:26">&gt;</operator> <name pos:start="58:28" pos:end="58:42">PCI_EXP_LNKCAP2</name></expr>)</condition> <block pos:start="58:45" pos:end="62:9">{<block_content pos:start="59:21" pos:end="61:79">
                    <expr_stmt pos:start="59:21" pos:end="59:79"><expr pos:start="59:21" pos:end="59:78"><call pos:start="59:21" pos:end="59:78"><name pos:start="59:21" pos:end="59:42">vfio_add_emulated_long</name><argument_list pos:start="59:43" pos:end="59:78">(<argument pos:start="59:44" pos:end="59:47"><expr pos:start="59:44" pos:end="59:47"><name pos:start="59:44" pos:end="59:47">vdev</name></expr></argument>, <argument pos:start="59:50" pos:end="59:70"><expr pos:start="59:50" pos:end="59:70"><name pos:start="59:50" pos:end="59:52">pos</name> <operator pos:start="59:54" pos:end="59:54">+</operator> <name pos:start="59:56" pos:end="59:70">PCI_EXP_LNKCAP2</name></expr></argument>, <argument pos:start="59:73" pos:end="59:73"><expr pos:start="59:73" pos:end="59:73"><literal type="number" pos:start="59:73" pos:end="59:73">0</literal></expr></argument>, <argument pos:start="59:76" pos:end="59:77"><expr pos:start="59:76" pos:end="59:77"><operator pos:start="59:76" pos:end="59:76">~</operator><literal type="number" pos:start="59:77" pos:end="59:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="60:21" pos:end="60:79"><expr pos:start="60:21" pos:end="60:78"><call pos:start="60:21" pos:end="60:78"><name pos:start="60:21" pos:end="60:42">vfio_add_emulated_word</name><argument_list pos:start="60:43" pos:end="60:78">(<argument pos:start="60:44" pos:end="60:47"><expr pos:start="60:44" pos:end="60:47"><name pos:start="60:44" pos:end="60:47">vdev</name></expr></argument>, <argument pos:start="60:50" pos:end="60:70"><expr pos:start="60:50" pos:end="60:70"><name pos:start="60:50" pos:end="60:52">pos</name> <operator pos:start="60:54" pos:end="60:54">+</operator> <name pos:start="60:56" pos:end="60:70">PCI_EXP_LNKCTL2</name></expr></argument>, <argument pos:start="60:73" pos:end="60:73"><expr pos:start="60:73" pos:end="60:73"><literal type="number" pos:start="60:73" pos:end="60:73">0</literal></expr></argument>, <argument pos:start="60:76" pos:end="60:77"><expr pos:start="60:76" pos:end="60:77"><operator pos:start="60:76" pos:end="60:76">~</operator><literal type="number" pos:start="60:77" pos:end="60:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="61:21" pos:end="61:79"><expr pos:start="61:21" pos:end="61:78"><call pos:start="61:21" pos:end="61:78"><name pos:start="61:21" pos:end="61:42">vfio_add_emulated_word</name><argument_list pos:start="61:43" pos:end="61:78">(<argument pos:start="61:44" pos:end="61:47"><expr pos:start="61:44" pos:end="61:47"><name pos:start="61:44" pos:end="61:47">vdev</name></expr></argument>, <argument pos:start="61:50" pos:end="61:70"><expr pos:start="61:50" pos:end="61:70"><name pos:start="61:50" pos:end="61:52">pos</name> <operator pos:start="61:54" pos:end="61:54">+</operator> <name pos:start="61:56" pos:end="61:70">PCI_EXP_LNKSTA2</name></expr></argument>, <argument pos:start="61:73" pos:end="61:73"><expr pos:start="61:73" pos:end="61:73"><literal type="number" pos:start="61:73" pos:end="61:73">0</literal></expr></argument>, <argument pos:start="61:76" pos:end="61:77"><expr pos:start="61:76" pos:end="61:77"><operator pos:start="61:76" pos:end="61:76">~</operator><literal type="number" pos:start="61:77" pos:end="61:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="62:11" pos:end="85:15">else if <condition pos:start="62:19" pos:end="62:48">(<expr pos:start="62:20" pos:end="62:47"><name pos:start="62:20" pos:end="62:23">type</name> <operator pos:start="62:25" pos:end="62:26">==</operator> <name pos:start="62:28" pos:end="62:47">PCI_EXP_TYPE_LEG_END</name></expr>)</condition> <block pos:start="62:50" pos:end="85:15">{<block_content pos:start="63:14" pos:end="85:15">
             <expr_stmt pos:start="63:14" pos:end="71:55"><expr pos:start="63:14" pos:end="68:60"><operator pos:start="63:14" pos:end="63:14">*</operator> <name pos:start="63:16" pos:end="63:21">Legacy</name> <name pos:start="63:23" pos:end="63:31">endpoints</name> <name pos:start="63:33" pos:end="63:35">don</name><literal type="char" pos:start="63:36" pos:end="68:29">'t belong on the root complex.  Windows
             * seems to be happier with devices if we skip the capability.
            return 0;
    } else {
         * Convert Root Complex Integrated Endpoints to regular endpoints.
         * These devices don'</literal><name pos:start="68:30" pos:end="68:30">t</name> <name pos:start="68:32" pos:end="68:38">support</name> <name pos:start="68:40" pos:end="68:42">LNK</name><operator pos:start="68:43" pos:end="68:43">/</operator><name pos:start="68:44" pos:end="68:47">LNK2</name> <name pos:start="68:49" pos:end="68:60">capabilities</name></expr><operator pos:start="68:61" pos:end="68:61">,</operator> <expr pos:start="68:63" pos:end="71:54"><name pos:start="68:63" pos:end="68:64">so</name> <name pos:start="68:66" pos:end="68:69">make</name> <name pos:start="68:71" pos:end="68:74">them</name> <name pos:start="68:76" pos:end="68:78"><name pos:start="68:76" pos:end="68:77">up</name><operator pos:start="68:78" pos:end="68:78">.</operator>
        <name/></name>if <operator pos:start="69:12" pos:end="69:12">(</operator><name pos:start="69:13" pos:end="69:16">type</name> <operator pos:start="69:18" pos:end="69:19">==</operator> <name pos:start="69:21" pos:end="69:39">PCI_EXP_TYPE_RC_END</name><operator pos:start="69:40" pos:end="69:40">)</operator> <block pos:start="69:42" pos:end="71:54">{
                                   <expr pos:start="70:36" pos:end="70:61"><name pos:start="70:36" pos:end="70:56">PCI_EXP_TYPE_ENDPOINT</name> <operator pos:start="70:58" pos:end="70:59">&lt;&lt;</operator> <literal type="number" pos:start="70:61" pos:end="70:61">4</literal></expr>,
                                   <expr pos:start="71:36" pos:end="71:53"><name pos:start="71:36" pos:end="71:53">PCI_EXP_FLAGS_TYPE</name></expr>)</block></expr>;</expr_stmt>
            <expr_stmt pos:start="72:13" pos:end="73:78"><expr pos:start="72:13" pos:end="73:77"><call pos:start="72:13" pos:end="73:77"><name pos:start="72:13" pos:end="72:34">vfio_add_emulated_long</name><argument_list pos:start="72:35" pos:end="73:77">(<argument pos:start="72:36" pos:end="72:39"><expr pos:start="72:36" pos:end="72:39"><name pos:start="72:36" pos:end="72:39">vdev</name></expr></argument>, <argument pos:start="72:42" pos:end="72:61"><expr pos:start="72:42" pos:end="72:61"><name pos:start="72:42" pos:end="72:44">pos</name> <operator pos:start="72:46" pos:end="72:46">+</operator> <name pos:start="72:48" pos:end="72:61">PCI_EXP_LNKCAP</name></expr></argument>,
                                   <argument pos:start="73:36" pos:end="73:72"><expr pos:start="73:36" pos:end="73:72"><name pos:start="73:36" pos:end="73:52">PCI_EXP_LNK_MLW_1</name> <operator pos:start="73:54" pos:end="73:54">|</operator> <name pos:start="73:56" pos:end="73:72">PCI_EXP_LNK_LS_25</name></expr></argument>, <argument pos:start="73:75" pos:end="73:76"><expr pos:start="73:75" pos:end="73:76"><operator pos:start="73:75" pos:end="73:75">~</operator><literal type="number" pos:start="73:76" pos:end="73:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="74:13" pos:end="74:70"><expr pos:start="74:13" pos:end="74:69"><call pos:start="74:13" pos:end="74:69"><name pos:start="74:13" pos:end="74:34">vfio_add_emulated_word</name><argument_list pos:start="74:35" pos:end="74:69">(<argument pos:start="74:36" pos:end="74:39"><expr pos:start="74:36" pos:end="74:39"><name pos:start="74:36" pos:end="74:39">vdev</name></expr></argument>, <argument pos:start="74:42" pos:end="74:61"><expr pos:start="74:42" pos:end="74:61"><name pos:start="74:42" pos:end="74:44">pos</name> <operator pos:start="74:46" pos:end="74:46">+</operator> <name pos:start="74:48" pos:end="74:61">PCI_EXP_LNKCTL</name></expr></argument>, <argument pos:start="74:64" pos:end="74:64"><expr pos:start="74:64" pos:end="74:64"><literal type="number" pos:start="74:64" pos:end="74:64">0</literal></expr></argument>, <argument pos:start="74:67" pos:end="74:68"><expr pos:start="74:67" pos:end="74:68"><operator pos:start="74:67" pos:end="74:67">~</operator><literal type="number" pos:start="74:68" pos:end="74:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="75:9" pos:end="75:80">/* Mark the Link Status bits as emulated to allow virtual negotiation */</comment>
        <expr_stmt pos:start="76:9" pos:end="79:72"><expr pos:start="76:9" pos:end="79:71"><call pos:start="76:9" pos:end="79:71"><name pos:start="76:9" pos:end="76:30">vfio_add_emulated_word</name><argument_list pos:start="76:31" pos:end="79:71">(<argument pos:start="76:32" pos:end="76:35"><expr pos:start="76:32" pos:end="76:35"><name pos:start="76:32" pos:end="76:35">vdev</name></expr></argument>, <argument pos:start="76:38" pos:end="76:57"><expr pos:start="76:38" pos:end="76:57"><name pos:start="76:38" pos:end="76:40">pos</name> <operator pos:start="76:42" pos:end="76:42">+</operator> <name pos:start="76:44" pos:end="76:57">PCI_EXP_LNKSTA</name></expr></argument>,
                               <argument pos:start="77:32" pos:end="78:59"><expr pos:start="77:32" pos:end="78:59"><call pos:start="77:32" pos:end="78:59"><name pos:start="77:32" pos:end="77:43">pci_get_word</name><argument_list pos:start="77:44" pos:end="78:59">(<argument pos:start="77:45" pos:end="78:58"><expr pos:start="77:45" pos:end="78:58"><name pos:start="77:45" pos:end="77:61"><name pos:start="77:45" pos:end="77:48">vdev</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:54">pdev</name><operator pos:start="77:55" pos:end="77:55">.</operator><name pos:start="77:56" pos:end="77:61">config</name></name> <operator pos:start="77:63" pos:end="77:63">+</operator> <name pos:start="77:65" pos:end="77:67">pos</name> <operator pos:start="77:69" pos:end="77:69">+</operator>
                                            <name pos:start="78:45" pos:end="78:58">PCI_EXP_LNKSTA</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument pos:start="79:32" pos:end="79:70"><expr pos:start="79:32" pos:end="79:70"><name pos:start="79:32" pos:end="79:49">PCI_EXP_LNKCAP_MLW</name> <operator pos:start="79:51" pos:end="79:51">|</operator> <name pos:start="79:53" pos:end="79:70">PCI_EXP_LNKCAP_SLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="80:5" pos:end="81:35"><expr pos:start="80:5" pos:end="81:34"><name pos:start="80:5" pos:end="80:7">pos</name> <operator pos:start="80:9" pos:end="80:9">=</operator> <call pos:start="80:11" pos:end="81:34"><name pos:start="80:11" pos:end="80:28">pci_add_capability</name><argument_list pos:start="80:29" pos:end="81:34">(<argument pos:start="80:30" pos:end="80:40"><expr pos:start="80:30" pos:end="80:40"><operator pos:start="80:30" pos:end="80:30">&amp;</operator><name pos:start="80:31" pos:end="80:40"><name pos:start="80:31" pos:end="80:34">vdev</name><operator pos:start="80:35" pos:end="80:36">-&gt;</operator><name pos:start="80:37" pos:end="80:40">pdev</name></name></expr></argument>, <argument pos:start="80:43" pos:end="80:56"><expr pos:start="80:43" pos:end="80:56"><name pos:start="80:43" pos:end="80:56">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="80:59" pos:end="80:61"><expr pos:start="80:59" pos:end="80:61"><name pos:start="80:59" pos:end="80:61">pos</name></expr></argument>, <argument pos:start="80:64" pos:end="80:67"><expr pos:start="80:64" pos:end="80:67"><name pos:start="80:64" pos:end="80:67">size</name></expr></argument>,
                             <argument pos:start="81:30" pos:end="81:33"><expr pos:start="81:30" pos:end="81:33"><name pos:start="81:30" pos:end="81:33">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="82:5" pos:end="85:15"><if pos:start="82:5" pos:end="85:15">if <condition pos:start="82:8" pos:end="82:16">(<expr pos:start="82:9" pos:end="82:15"><name pos:start="82:9" pos:end="82:11">pos</name> <operator pos:start="82:13" pos:end="82:13">&lt;</operator> <literal type="number" pos:start="82:15" pos:end="82:15">0</literal></expr>)</condition> <block pos:start="82:18" pos:end="85:15">{<block_content pos:start="83:9" pos:end="85:15">
        <return pos:start="83:9" pos:end="83:19">return <expr pos:start="83:16" pos:end="83:18"><name pos:start="83:16" pos:end="83:18">pos</name></expr>;</return>
    <expr_stmt pos:start="84:5" pos:end="84:33"><expr pos:start="84:5" pos:end="84:32"><name pos:start="84:5" pos:end="84:26"><name pos:start="84:5" pos:end="84:8">vdev</name><operator pos:start="84:9" pos:end="84:10">-&gt;</operator><name pos:start="84:11" pos:end="84:14">pdev</name><operator pos:start="84:15" pos:end="84:15">.</operator><name pos:start="84:16" pos:end="84:18">exp</name><operator pos:start="84:19" pos:end="84:19">.</operator><name pos:start="84:20" pos:end="84:26">exp_cap</name></name> <operator pos:start="84:28" pos:end="84:28">=</operator> <name pos:start="84:30" pos:end="84:32">pos</name></expr>;</expr_stmt>
    <return pos:start="85:5" pos:end="85:15">return <expr pos:start="85:12" pos:end="85:14"><name pos:start="85:12" pos:end="85:14">pos</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
