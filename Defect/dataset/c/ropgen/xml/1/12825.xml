<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12825.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">write_bootloader</name><parameter_list pos:start="1:29" pos:end="3:50">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:36">uint8_t</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">base</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:51">int64_t</name></type> <name pos:start="1:53" pos:end="1:60">run_addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:49"><decl pos:start="3:30" pos:end="3:49"><type pos:start="3:30" pos:end="3:49"><name pos:start="3:30" pos:end="3:36">int64_t</name></type> <name pos:start="3:38" pos:end="3:49">kernel_entry</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="293:1">{<block_content pos:start="7:5" pos:end="289:27">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">uint32_t</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">p</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:26">/* Small bootloader */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:25"><expr pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:5">p</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:17">uint32_t</name> <operator pos:start="13:19" pos:end="13:19">*</operator><operator pos:start="13:20" pos:end="13:20">)</operator><name pos:start="13:21" pos:end="13:24">base</name></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:57"><expr pos:start="17:5" pos:end="19:56"><call pos:start="17:5" pos:end="19:56"><name pos:start="17:5" pos:end="17:9">stl_p</name><argument_list pos:start="17:10" pos:end="19:56">(<argument pos:start="17:11" pos:end="17:13"><expr pos:start="17:11" pos:end="17:13"><name pos:start="17:11" pos:end="17:11">p</name><operator pos:start="17:12" pos:end="17:13">++</operator></expr></argument>, <argument pos:start="17:16" pos:end="19:55"><expr pos:start="17:16" pos:end="19:55"><literal type="number" pos:start="17:16" pos:end="17:25">0x08000000</literal> <operator pos:start="17:27" pos:end="17:27">|</operator>                                      <comment type="block" pos:start="17:66" pos:end="17:83">/* j 0x1fc00580 */</comment>

                 <operator pos:start="19:18" pos:end="19:18">(</operator><operator pos:start="19:19" pos:end="19:19">(</operator><name pos:start="19:20" pos:end="19:27">run_addr</name> <operator pos:start="19:29" pos:end="19:29">+</operator> <literal type="number" pos:start="19:31" pos:end="19:35">0x580</literal><operator pos:start="19:36" pos:end="19:36">)</operator> <operator pos:start="19:38" pos:end="19:38">&amp;</operator> <literal type="number" pos:start="19:40" pos:end="19:49">0x0fffffff</literal><operator pos:start="19:50" pos:end="19:50">)</operator> <operator pos:start="19:52" pos:end="19:53">&gt;&gt;</operator> <literal type="number" pos:start="19:55" pos:end="19:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><call pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:9">stl_p</name><argument_list pos:start="21:10" pos:end="21:26">(<argument pos:start="21:11" pos:end="21:13"><expr pos:start="21:11" pos:end="21:13"><name pos:start="21:11" pos:end="21:11">p</name><operator pos:start="21:12" pos:end="21:13">++</operator></expr></argument>, <argument pos:start="21:16" pos:end="21:25"><expr pos:start="21:16" pos:end="21:25"><literal type="number" pos:start="21:16" pos:end="21:25">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="21:66" pos:end="21:74">/* nop */</comment>



    <comment type="block" pos:start="25:5" pos:end="25:30">/* YAMON service vector */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:43"><expr pos:start="27:5" pos:end="27:42"><call pos:start="27:5" pos:end="27:42"><name pos:start="27:5" pos:end="27:9">stl_p</name><argument_list pos:start="27:10" pos:end="27:42">(<argument pos:start="27:11" pos:end="27:22"><expr pos:start="27:11" pos:end="27:22"><name pos:start="27:11" pos:end="27:14">base</name> <operator pos:start="27:16" pos:end="27:16">+</operator> <literal type="number" pos:start="27:18" pos:end="27:22">0x500</literal></expr></argument>, <argument pos:start="27:25" pos:end="27:41"><expr pos:start="27:25" pos:end="27:41"><name pos:start="27:25" pos:end="27:32">run_addr</name> <operator pos:start="27:34" pos:end="27:34">+</operator> <literal type="number" pos:start="27:36" pos:end="27:41">0x0580</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="27:50" pos:end="27:61">/* start: */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:43"><expr pos:start="29:5" pos:end="29:42"><call pos:start="29:5" pos:end="29:42"><name pos:start="29:5" pos:end="29:9">stl_p</name><argument_list pos:start="29:10" pos:end="29:42">(<argument pos:start="29:11" pos:end="29:22"><expr pos:start="29:11" pos:end="29:22"><name pos:start="29:11" pos:end="29:14">base</name> <operator pos:start="29:16" pos:end="29:16">+</operator> <literal type="number" pos:start="29:18" pos:end="29:22">0x504</literal></expr></argument>, <argument pos:start="29:25" pos:end="29:41"><expr pos:start="29:25" pos:end="29:41"><name pos:start="29:25" pos:end="29:32">run_addr</name> <operator pos:start="29:34" pos:end="29:34">+</operator> <literal type="number" pos:start="29:36" pos:end="29:41">0x083c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="29:50" pos:end="29:67">/* print_count: */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:43"><expr pos:start="31:5" pos:end="31:42"><call pos:start="31:5" pos:end="31:42"><name pos:start="31:5" pos:end="31:9">stl_p</name><argument_list pos:start="31:10" pos:end="31:42">(<argument pos:start="31:11" pos:end="31:22"><expr pos:start="31:11" pos:end="31:22"><name pos:start="31:11" pos:end="31:14">base</name> <operator pos:start="31:16" pos:end="31:16">+</operator> <literal type="number" pos:start="31:18" pos:end="31:22">0x520</literal></expr></argument>, <argument pos:start="31:25" pos:end="31:41"><expr pos:start="31:25" pos:end="31:41"><name pos:start="31:25" pos:end="31:32">run_addr</name> <operator pos:start="31:34" pos:end="31:34">+</operator> <literal type="number" pos:start="31:36" pos:end="31:41">0x0580</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="31:50" pos:end="31:61">/* start: */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><call pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:9">stl_p</name><argument_list pos:start="33:10" pos:end="33:42">(<argument pos:start="33:11" pos:end="33:22"><expr pos:start="33:11" pos:end="33:22"><name pos:start="33:11" pos:end="33:14">base</name> <operator pos:start="33:16" pos:end="33:16">+</operator> <literal type="number" pos:start="33:18" pos:end="33:22">0x52c</literal></expr></argument>, <argument pos:start="33:25" pos:end="33:41"><expr pos:start="33:25" pos:end="33:41"><name pos:start="33:25" pos:end="33:32">run_addr</name> <operator pos:start="33:34" pos:end="33:34">+</operator> <literal type="number" pos:start="33:36" pos:end="33:41">0x0800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="33:50" pos:end="33:67">/* flush_cache: */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><call pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:9">stl_p</name><argument_list pos:start="35:10" pos:end="35:42">(<argument pos:start="35:11" pos:end="35:22"><expr pos:start="35:11" pos:end="35:22"><name pos:start="35:11" pos:end="35:14">base</name> <operator pos:start="35:16" pos:end="35:16">+</operator> <literal type="number" pos:start="35:18" pos:end="35:22">0x534</literal></expr></argument>, <argument pos:start="35:25" pos:end="35:41"><expr pos:start="35:25" pos:end="35:41"><name pos:start="35:25" pos:end="35:32">run_addr</name> <operator pos:start="35:34" pos:end="35:34">+</operator> <literal type="number" pos:start="35:36" pos:end="35:41">0x0808</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="35:50" pos:end="35:61">/* print: */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:43"><expr pos:start="37:5" pos:end="37:42"><call pos:start="37:5" pos:end="37:42"><name pos:start="37:5" pos:end="37:9">stl_p</name><argument_list pos:start="37:10" pos:end="37:42">(<argument pos:start="37:11" pos:end="37:22"><expr pos:start="37:11" pos:end="37:22"><name pos:start="37:11" pos:end="37:14">base</name> <operator pos:start="37:16" pos:end="37:16">+</operator> <literal type="number" pos:start="37:18" pos:end="37:22">0x538</literal></expr></argument>, <argument pos:start="37:25" pos:end="37:41"><expr pos:start="37:25" pos:end="37:41"><name pos:start="37:25" pos:end="37:32">run_addr</name> <operator pos:start="37:34" pos:end="37:34">+</operator> <literal type="number" pos:start="37:36" pos:end="37:41">0x0800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="37:50" pos:end="37:67">/* reg_cpu_isr: */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:43"><expr pos:start="39:5" pos:end="39:42"><call pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:9">stl_p</name><argument_list pos:start="39:10" pos:end="39:42">(<argument pos:start="39:11" pos:end="39:22"><expr pos:start="39:11" pos:end="39:22"><name pos:start="39:11" pos:end="39:14">base</name> <operator pos:start="39:16" pos:end="39:16">+</operator> <literal type="number" pos:start="39:18" pos:end="39:22">0x53c</literal></expr></argument>, <argument pos:start="39:25" pos:end="39:41"><expr pos:start="39:25" pos:end="39:41"><name pos:start="39:25" pos:end="39:32">run_addr</name> <operator pos:start="39:34" pos:end="39:34">+</operator> <literal type="number" pos:start="39:36" pos:end="39:41">0x0800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="39:50" pos:end="39:69">/* unred_cpu_isr: */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:43"><expr pos:start="41:5" pos:end="41:42"><call pos:start="41:5" pos:end="41:42"><name pos:start="41:5" pos:end="41:9">stl_p</name><argument_list pos:start="41:10" pos:end="41:42">(<argument pos:start="41:11" pos:end="41:22"><expr pos:start="41:11" pos:end="41:22"><name pos:start="41:11" pos:end="41:14">base</name> <operator pos:start="41:16" pos:end="41:16">+</operator> <literal type="number" pos:start="41:18" pos:end="41:22">0x540</literal></expr></argument>, <argument pos:start="41:25" pos:end="41:41"><expr pos:start="41:25" pos:end="41:41"><name pos:start="41:25" pos:end="41:32">run_addr</name> <operator pos:start="41:34" pos:end="41:34">+</operator> <literal type="number" pos:start="41:36" pos:end="41:41">0x0800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="41:50" pos:end="41:66">/* reg_ic_isr: */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:43"><expr pos:start="43:5" pos:end="43:42"><call pos:start="43:5" pos:end="43:42"><name pos:start="43:5" pos:end="43:9">stl_p</name><argument_list pos:start="43:10" pos:end="43:42">(<argument pos:start="43:11" pos:end="43:22"><expr pos:start="43:11" pos:end="43:22"><name pos:start="43:11" pos:end="43:14">base</name> <operator pos:start="43:16" pos:end="43:16">+</operator> <literal type="number" pos:start="43:18" pos:end="43:22">0x544</literal></expr></argument>, <argument pos:start="43:25" pos:end="43:41"><expr pos:start="43:25" pos:end="43:41"><name pos:start="43:25" pos:end="43:32">run_addr</name> <operator pos:start="43:34" pos:end="43:34">+</operator> <literal type="number" pos:start="43:36" pos:end="43:41">0x0800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="43:50" pos:end="43:68">/* unred_ic_isr: */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><call pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:9">stl_p</name><argument_list pos:start="45:10" pos:end="45:42">(<argument pos:start="45:11" pos:end="45:22"><expr pos:start="45:11" pos:end="45:22"><name pos:start="45:11" pos:end="45:14">base</name> <operator pos:start="45:16" pos:end="45:16">+</operator> <literal type="number" pos:start="45:18" pos:end="45:22">0x548</literal></expr></argument>, <argument pos:start="45:25" pos:end="45:41"><expr pos:start="45:25" pos:end="45:41"><name pos:start="45:25" pos:end="45:32">run_addr</name> <operator pos:start="45:34" pos:end="45:34">+</operator> <literal type="number" pos:start="45:36" pos:end="45:41">0x0800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="45:50" pos:end="45:63">/* reg_esr: */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><call pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:9">stl_p</name><argument_list pos:start="47:10" pos:end="47:42">(<argument pos:start="47:11" pos:end="47:22"><expr pos:start="47:11" pos:end="47:22"><name pos:start="47:11" pos:end="47:14">base</name> <operator pos:start="47:16" pos:end="47:16">+</operator> <literal type="number" pos:start="47:18" pos:end="47:22">0x54c</literal></expr></argument>, <argument pos:start="47:25" pos:end="47:41"><expr pos:start="47:25" pos:end="47:41"><name pos:start="47:25" pos:end="47:32">run_addr</name> <operator pos:start="47:34" pos:end="47:34">+</operator> <literal type="number" pos:start="47:36" pos:end="47:41">0x0800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="47:50" pos:end="47:65">/* unreg_esr: */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><call pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:9">stl_p</name><argument_list pos:start="49:10" pos:end="49:42">(<argument pos:start="49:11" pos:end="49:22"><expr pos:start="49:11" pos:end="49:22"><name pos:start="49:11" pos:end="49:14">base</name> <operator pos:start="49:16" pos:end="49:16">+</operator> <literal type="number" pos:start="49:18" pos:end="49:22">0x550</literal></expr></argument>, <argument pos:start="49:25" pos:end="49:41"><expr pos:start="49:25" pos:end="49:41"><name pos:start="49:25" pos:end="49:32">run_addr</name> <operator pos:start="49:34" pos:end="49:34">+</operator> <literal type="number" pos:start="49:36" pos:end="49:41">0x0800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="49:50" pos:end="49:63">/* getchar: */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><call pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:9">stl_p</name><argument_list pos:start="51:10" pos:end="51:42">(<argument pos:start="51:11" pos:end="51:22"><expr pos:start="51:11" pos:end="51:22"><name pos:start="51:11" pos:end="51:14">base</name> <operator pos:start="51:16" pos:end="51:16">+</operator> <literal type="number" pos:start="51:18" pos:end="51:22">0x554</literal></expr></argument>, <argument pos:start="51:25" pos:end="51:41"><expr pos:start="51:25" pos:end="51:41"><name pos:start="51:25" pos:end="51:32">run_addr</name> <operator pos:start="51:34" pos:end="51:34">+</operator> <literal type="number" pos:start="51:36" pos:end="51:41">0x0800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="51:50" pos:end="51:67">/* syscon_read: */</comment>





    <comment type="block" pos:start="57:5" pos:end="57:39">/* Second part of the bootloader */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:36"><expr pos:start="59:5" pos:end="59:35"><name pos:start="59:5" pos:end="59:5">p</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:17">uint32_t</name> <operator pos:start="59:19" pos:end="59:19">*</operator><operator pos:start="59:20" pos:end="59:20">)</operator> <operator pos:start="59:22" pos:end="59:22">(</operator><name pos:start="59:23" pos:end="59:26">base</name> <operator pos:start="59:28" pos:end="59:28">+</operator> <literal type="number" pos:start="59:30" pos:end="59:34">0x580</literal><operator pos:start="59:35" pos:end="59:35">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:31">(<expr pos:start="63:9" pos:end="63:30"><call pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:28">semihosting_get_argc</name><argument_list pos:start="63:29" pos:end="63:30">()</argument_list></call></expr>)</condition> <block pos:start="63:33" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:31">

        <comment type="block" pos:start="65:9" pos:end="65:63">/* Preserve a0 content as arguments have been passed */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:31"><expr pos:start="67:9" pos:end="67:30"><call pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:13">stl_p</name><argument_list pos:start="67:14" pos:end="67:30">(<argument pos:start="67:15" pos:end="67:17"><expr pos:start="67:15" pos:end="67:17"><name pos:start="67:15" pos:end="67:15">p</name><operator pos:start="67:16" pos:end="67:17">++</operator></expr></argument>, <argument pos:start="67:20" pos:end="67:29"><expr pos:start="67:20" pos:end="67:29"><literal type="number" pos:start="67:20" pos:end="67:29">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                         <comment type="block" pos:start="67:57" pos:end="67:65">/* nop */</comment>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:31">

        <expr_stmt pos:start="71:9" pos:end="71:31"><expr pos:start="71:9" pos:end="71:30"><call pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:13">stl_p</name><argument_list pos:start="71:14" pos:end="71:30">(<argument pos:start="71:15" pos:end="71:17"><expr pos:start="71:15" pos:end="71:17"><name pos:start="71:15" pos:end="71:15">p</name><operator pos:start="71:16" pos:end="71:17">++</operator></expr></argument>, <argument pos:start="71:20" pos:end="71:29"><expr pos:start="71:20" pos:end="71:29"><literal type="number" pos:start="71:20" pos:end="71:29">0x24040002</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                         <comment type="block" pos:start="71:57" pos:end="71:79">/* addiu a0, zero, 2 */</comment>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:65"><expr pos:start="75:5" pos:end="75:64"><call pos:start="75:5" pos:end="75:64"><name pos:start="75:5" pos:end="75:9">stl_p</name><argument_list pos:start="75:10" pos:end="75:64">(<argument pos:start="75:11" pos:end="75:13"><expr pos:start="75:11" pos:end="75:13"><name pos:start="75:11" pos:end="75:11">p</name><operator pos:start="75:12" pos:end="75:13">++</operator></expr></argument>, <argument pos:start="75:16" pos:end="75:63"><expr pos:start="75:16" pos:end="75:63"><literal type="number" pos:start="75:16" pos:end="75:25">0x3c1d0000</literal> <operator pos:start="75:27" pos:end="75:27">|</operator> <operator pos:start="75:29" pos:end="75:29">(</operator><operator pos:start="75:30" pos:end="75:30">(</operator><operator pos:start="75:31" pos:end="75:31">(</operator><name pos:start="75:32" pos:end="75:40">ENVP_ADDR</name> <operator pos:start="75:42" pos:end="75:42">-</operator> <literal type="number" pos:start="75:44" pos:end="75:45">64</literal><operator pos:start="75:46" pos:end="75:46">)</operator> <operator pos:start="75:48" pos:end="75:49">&gt;&gt;</operator> <literal type="number" pos:start="75:51" pos:end="75:52">16</literal><operator pos:start="75:53" pos:end="75:53">)</operator> <operator pos:start="75:55" pos:end="75:55">&amp;</operator> <literal type="number" pos:start="75:57" pos:end="75:62">0xffff</literal><operator pos:start="75:63" pos:end="75:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="75:67" pos:end="75:95">/* lui sp, high(ENVP_ADDR) */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:57"><expr pos:start="77:5" pos:end="77:56"><call pos:start="77:5" pos:end="77:56"><name pos:start="77:5" pos:end="77:9">stl_p</name><argument_list pos:start="77:10" pos:end="77:56">(<argument pos:start="77:11" pos:end="77:13"><expr pos:start="77:11" pos:end="77:13"><name pos:start="77:11" pos:end="77:11">p</name><operator pos:start="77:12" pos:end="77:13">++</operator></expr></argument>, <argument pos:start="77:16" pos:end="77:55"><expr pos:start="77:16" pos:end="77:55"><literal type="number" pos:start="77:16" pos:end="77:25">0x37bd0000</literal> <operator pos:start="77:27" pos:end="77:27">|</operator> <operator pos:start="77:29" pos:end="77:29">(</operator><operator pos:start="77:30" pos:end="77:30">(</operator><name pos:start="77:31" pos:end="77:39">ENVP_ADDR</name> <operator pos:start="77:41" pos:end="77:41">-</operator> <literal type="number" pos:start="77:43" pos:end="77:44">64</literal><operator pos:start="77:45" pos:end="77:45">)</operator> <operator pos:start="77:47" pos:end="77:47">&amp;</operator> <literal type="number" pos:start="77:49" pos:end="77:54">0xffff</literal><operator pos:start="77:55" pos:end="77:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block" pos:start="77:66" pos:end="77:97">/* ori sp, sp, low(ENVP_ADDR) */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:58"><expr pos:start="79:5" pos:end="79:57"><call pos:start="79:5" pos:end="79:57"><name pos:start="79:5" pos:end="79:9">stl_p</name><argument_list pos:start="79:10" pos:end="79:57">(<argument pos:start="79:11" pos:end="79:13"><expr pos:start="79:11" pos:end="79:13"><name pos:start="79:11" pos:end="79:11">p</name><operator pos:start="79:12" pos:end="79:13">++</operator></expr></argument>, <argument pos:start="79:16" pos:end="79:56"><expr pos:start="79:16" pos:end="79:56"><literal type="number" pos:start="79:16" pos:end="79:25">0x3c050000</literal> <operator pos:start="79:27" pos:end="79:27">|</operator> <operator pos:start="79:29" pos:end="79:29">(</operator><operator pos:start="79:30" pos:end="79:30">(</operator><name pos:start="79:31" pos:end="79:39">ENVP_ADDR</name> <operator pos:start="79:41" pos:end="79:42">&gt;&gt;</operator> <literal type="number" pos:start="79:44" pos:end="79:45">16</literal><operator pos:start="79:46" pos:end="79:46">)</operator> <operator pos:start="79:48" pos:end="79:48">&amp;</operator> <literal type="number" pos:start="79:50" pos:end="79:55">0xffff</literal><operator pos:start="79:56" pos:end="79:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block" pos:start="79:66" pos:end="79:94">/* lui a1, high(ENVP_ADDR) */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:50"><expr pos:start="81:5" pos:end="81:49"><call pos:start="81:5" pos:end="81:49"><name pos:start="81:5" pos:end="81:9">stl_p</name><argument_list pos:start="81:10" pos:end="81:49">(<argument pos:start="81:11" pos:end="81:13"><expr pos:start="81:11" pos:end="81:13"><name pos:start="81:11" pos:end="81:11">p</name><operator pos:start="81:12" pos:end="81:13">++</operator></expr></argument>, <argument pos:start="81:16" pos:end="81:48"><expr pos:start="81:16" pos:end="81:48"><literal type="number" pos:start="81:16" pos:end="81:25">0x34a50000</literal> <operator pos:start="81:27" pos:end="81:27">|</operator> <operator pos:start="81:29" pos:end="81:29">(</operator><name pos:start="81:30" pos:end="81:38">ENVP_ADDR</name> <operator pos:start="81:40" pos:end="81:40">&amp;</operator> <literal type="number" pos:start="81:42" pos:end="81:47">0xffff</literal><operator pos:start="81:48" pos:end="81:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block" pos:start="81:66" pos:end="81:97">/* ori a1, a1, low(ENVP_ADDR) */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:64"><expr pos:start="83:5" pos:end="83:63"><call pos:start="83:5" pos:end="83:63"><name pos:start="83:5" pos:end="83:9">stl_p</name><argument_list pos:start="83:10" pos:end="83:63">(<argument pos:start="83:11" pos:end="83:13"><expr pos:start="83:11" pos:end="83:13"><name pos:start="83:11" pos:end="83:11">p</name><operator pos:start="83:12" pos:end="83:13">++</operator></expr></argument>, <argument pos:start="83:16" pos:end="83:62"><expr pos:start="83:16" pos:end="83:62"><literal type="number" pos:start="83:16" pos:end="83:25">0x3c060000</literal> <operator pos:start="83:27" pos:end="83:27">|</operator> <operator pos:start="83:29" pos:end="83:29">(</operator><operator pos:start="83:30" pos:end="83:30">(</operator><operator pos:start="83:31" pos:end="83:31">(</operator><name pos:start="83:32" pos:end="83:40">ENVP_ADDR</name> <operator pos:start="83:42" pos:end="83:42">+</operator> <literal type="number" pos:start="83:44" pos:end="83:44">8</literal><operator pos:start="83:45" pos:end="83:45">)</operator> <operator pos:start="83:47" pos:end="83:48">&gt;&gt;</operator> <literal type="number" pos:start="83:50" pos:end="83:51">16</literal><operator pos:start="83:52" pos:end="83:52">)</operator> <operator pos:start="83:54" pos:end="83:54">&amp;</operator> <literal type="number" pos:start="83:56" pos:end="83:61">0xffff</literal><operator pos:start="83:62" pos:end="83:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="83:66" pos:end="83:98">/* lui a2, high(ENVP_ADDR + 8) */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:56"><expr pos:start="85:5" pos:end="85:55"><call pos:start="85:5" pos:end="85:55"><name pos:start="85:5" pos:end="85:9">stl_p</name><argument_list pos:start="85:10" pos:end="85:55">(<argument pos:start="85:11" pos:end="85:13"><expr pos:start="85:11" pos:end="85:13"><name pos:start="85:11" pos:end="85:11">p</name><operator pos:start="85:12" pos:end="85:13">++</operator></expr></argument>, <argument pos:start="85:16" pos:end="85:54"><expr pos:start="85:16" pos:end="85:54"><literal type="number" pos:start="85:16" pos:end="85:25">0x34c60000</literal> <operator pos:start="85:27" pos:end="85:27">|</operator> <operator pos:start="85:29" pos:end="85:29">(</operator><operator pos:start="85:30" pos:end="85:30">(</operator><name pos:start="85:31" pos:end="85:39">ENVP_ADDR</name> <operator pos:start="85:41" pos:end="85:41">+</operator> <literal type="number" pos:start="85:43" pos:end="85:43">8</literal><operator pos:start="85:44" pos:end="85:44">)</operator> <operator pos:start="85:46" pos:end="85:46">&amp;</operator> <literal type="number" pos:start="85:48" pos:end="85:53">0xffff</literal><operator pos:start="85:54" pos:end="85:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block" pos:start="85:66" pos:end="85:101">/* ori a2, a2, low(ENVP_ADDR + 8) */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:63"><expr pos:start="87:5" pos:end="87:62"><call pos:start="87:5" pos:end="87:62"><name pos:start="87:5" pos:end="87:9">stl_p</name><argument_list pos:start="87:10" pos:end="87:62">(<argument pos:start="87:11" pos:end="87:13"><expr pos:start="87:11" pos:end="87:13"><name pos:start="87:11" pos:end="87:11">p</name><operator pos:start="87:12" pos:end="87:13">++</operator></expr></argument>, <argument pos:start="87:16" pos:end="87:61"><expr pos:start="87:16" pos:end="87:61"><literal type="number" pos:start="87:16" pos:end="87:25">0x3c070000</literal> <operator pos:start="87:27" pos:end="87:27">|</operator> <operator pos:start="87:29" pos:end="87:29">(</operator><name pos:start="87:30" pos:end="87:54"><name pos:start="87:30" pos:end="87:41">loaderparams</name><operator pos:start="87:42" pos:end="87:42">.</operator><name pos:start="87:43" pos:end="87:54">ram_low_size</name></name> <operator pos:start="87:56" pos:end="87:57">&gt;&gt;</operator> <literal type="number" pos:start="87:59" pos:end="87:60">16</literal><operator pos:start="87:61" pos:end="87:61">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="87:69" pos:end="87:100">/* lui a3, high(ram_low_size) */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:66"><expr pos:start="89:5" pos:end="89:65"><call pos:start="89:5" pos:end="89:65"><name pos:start="89:5" pos:end="89:9">stl_p</name><argument_list pos:start="89:10" pos:end="89:65">(<argument pos:start="89:11" pos:end="89:13"><expr pos:start="89:11" pos:end="89:13"><name pos:start="89:11" pos:end="89:11">p</name><operator pos:start="89:12" pos:end="89:13">++</operator></expr></argument>, <argument pos:start="89:16" pos:end="89:64"><expr pos:start="89:16" pos:end="89:64"><literal type="number" pos:start="89:16" pos:end="89:25">0x34e70000</literal> <operator pos:start="89:27" pos:end="89:27">|</operator> <operator pos:start="89:29" pos:end="89:29">(</operator><name pos:start="89:30" pos:end="89:54"><name pos:start="89:30" pos:end="89:41">loaderparams</name><operator pos:start="89:42" pos:end="89:42">.</operator><name pos:start="89:43" pos:end="89:54">ram_low_size</name></name> <operator pos:start="89:56" pos:end="89:56">&amp;</operator> <literal type="number" pos:start="89:58" pos:end="89:63">0xffff</literal><operator pos:start="89:64" pos:end="89:64">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="89:69" pos:end="89:103">/* ori a3, a3, low(ram_low_size) */</comment>



    <comment type="block" pos:start="93:5" pos:end="93:45">/* Load BAR registers as done by YAMON */</comment>

    <expr_stmt pos:start="95:5" pos:end="100:0"><expr pos:start="95:5" pos:end="95:26"><call pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:9">stl_p</name><argument_list pos:start="95:10" pos:end="95:26">(<argument pos:start="95:11" pos:end="95:13"><expr pos:start="95:11" pos:end="95:13"><name pos:start="95:11" pos:end="95:11">p</name><operator pos:start="95:12" pos:end="95:13">++</operator></expr></argument>, <argument pos:start="95:16" pos:end="95:25"><expr pos:start="95:16" pos:end="95:25"><literal type="number" pos:start="95:16" pos:end="95:25">0x3c09b400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="95:66" pos:end="95:85">/* lui t1, 0xb400 */</comment>



<cpp:ifdef pos:start="99:1" pos:end="99:29">#<cpp:directive pos:start="99:2" pos:end="99:6">ifdef</cpp:directive> <name pos:start="99:8" pos:end="99:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="101:5" pos:end="104:0"><expr pos:start="101:5" pos:end="101:26"><call pos:start="101:5" pos:end="101:26"><name pos:start="101:5" pos:end="101:9">stl_p</name><argument_list pos:start="101:10" pos:end="101:26">(<argument pos:start="101:11" pos:end="101:13"><expr pos:start="101:11" pos:end="101:13"><name pos:start="101:11" pos:end="101:11">p</name><operator pos:start="101:12" pos:end="101:13">++</operator></expr></argument>, <argument pos:start="101:16" pos:end="101:25"><expr pos:start="101:16" pos:end="101:25"><literal type="number" pos:start="101:16" pos:end="101:25">0x3c08df00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="101:66" pos:end="101:85">/* lui t0, 0xdf00 */</comment>

<cpp:else pos:start="103:1" pos:end="103:5">#<cpp:directive pos:start="103:2" pos:end="103:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="105:5" pos:end="108:0"><expr pos:start="105:5" pos:end="105:26"><call pos:start="105:5" pos:end="105:26"><name pos:start="105:5" pos:end="105:9">stl_p</name><argument_list pos:start="105:10" pos:end="105:26">(<argument pos:start="105:11" pos:end="105:13"><expr pos:start="105:11" pos:end="105:13"><name pos:start="105:11" pos:end="105:11">p</name><operator pos:start="105:12" pos:end="105:13">++</operator></expr></argument>, <argument pos:start="105:16" pos:end="105:25"><expr pos:start="105:16" pos:end="105:25"><literal type="number" pos:start="105:16" pos:end="105:25">0x340800df</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="105:66" pos:end="105:89">/* ori t0, r0, 0x00df */</comment>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="109:5" pos:end="109:27"><expr pos:start="109:5" pos:end="109:26"><call pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:9">stl_p</name><argument_list pos:start="109:10" pos:end="109:26">(<argument pos:start="109:11" pos:end="109:13"><expr pos:start="109:11" pos:end="109:13"><name pos:start="109:11" pos:end="109:11">p</name><operator pos:start="109:12" pos:end="109:13">++</operator></expr></argument>, <argument pos:start="109:16" pos:end="109:25"><expr pos:start="109:16" pos:end="109:25"><literal type="number" pos:start="109:16" pos:end="109:25">0xad280068</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="109:66" pos:end="109:88">/* sw t0, 0x0068(t1) */</comment>



    <expr_stmt pos:start="113:5" pos:end="118:0"><expr pos:start="113:5" pos:end="113:26"><call pos:start="113:5" pos:end="113:26"><name pos:start="113:5" pos:end="113:9">stl_p</name><argument_list pos:start="113:10" pos:end="113:26">(<argument pos:start="113:11" pos:end="113:13"><expr pos:start="113:11" pos:end="113:13"><name pos:start="113:11" pos:end="113:11">p</name><operator pos:start="113:12" pos:end="113:13">++</operator></expr></argument>, <argument pos:start="113:16" pos:end="113:25"><expr pos:start="113:16" pos:end="113:25"><literal type="number" pos:start="113:16" pos:end="113:25">0x3c09bbe0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="113:66" pos:end="113:85">/* lui t1, 0xbbe0 */</comment>



<cpp:ifdef pos:start="117:1" pos:end="117:29">#<cpp:directive pos:start="117:2" pos:end="117:6">ifdef</cpp:directive> <name pos:start="117:8" pos:end="117:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="119:5" pos:end="122:0"><expr pos:start="119:5" pos:end="119:26"><call pos:start="119:5" pos:end="119:26"><name pos:start="119:5" pos:end="119:9">stl_p</name><argument_list pos:start="119:10" pos:end="119:26">(<argument pos:start="119:11" pos:end="119:13"><expr pos:start="119:11" pos:end="119:13"><name pos:start="119:11" pos:end="119:11">p</name><operator pos:start="119:12" pos:end="119:13">++</operator></expr></argument>, <argument pos:start="119:16" pos:end="119:25"><expr pos:start="119:16" pos:end="119:25"><literal type="number" pos:start="119:16" pos:end="119:25">0x3c08c000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="119:66" pos:end="119:85">/* lui t0, 0xc000 */</comment>

<cpp:else pos:start="121:1" pos:end="121:5">#<cpp:directive pos:start="121:2" pos:end="121:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="123:5" pos:end="126:0"><expr pos:start="123:5" pos:end="123:26"><call pos:start="123:5" pos:end="123:26"><name pos:start="123:5" pos:end="123:9">stl_p</name><argument_list pos:start="123:10" pos:end="123:26">(<argument pos:start="123:11" pos:end="123:13"><expr pos:start="123:11" pos:end="123:13"><name pos:start="123:11" pos:end="123:11">p</name><operator pos:start="123:12" pos:end="123:13">++</operator></expr></argument>, <argument pos:start="123:16" pos:end="123:25"><expr pos:start="123:16" pos:end="123:25"><literal type="number" pos:start="123:16" pos:end="123:25">0x340800c0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="123:66" pos:end="123:89">/* ori t0, r0, 0x00c0 */</comment>

<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="127:5" pos:end="130:0"><expr pos:start="127:5" pos:end="127:26"><call pos:start="127:5" pos:end="127:26"><name pos:start="127:5" pos:end="127:9">stl_p</name><argument_list pos:start="127:10" pos:end="127:26">(<argument pos:start="127:11" pos:end="127:13"><expr pos:start="127:11" pos:end="127:13"><name pos:start="127:11" pos:end="127:11">p</name><operator pos:start="127:12" pos:end="127:13">++</operator></expr></argument>, <argument pos:start="127:16" pos:end="127:25"><expr pos:start="127:16" pos:end="127:25"><literal type="number" pos:start="127:16" pos:end="127:25">0xad280048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="127:66" pos:end="127:88">/* sw t0, 0x0048(t1) */</comment>

<cpp:ifdef pos:start="129:1" pos:end="129:29">#<cpp:directive pos:start="129:2" pos:end="129:6">ifdef</cpp:directive> <name pos:start="129:8" pos:end="129:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="131:5" pos:end="134:0"><expr pos:start="131:5" pos:end="131:26"><call pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:9">stl_p</name><argument_list pos:start="131:10" pos:end="131:26">(<argument pos:start="131:11" pos:end="131:13"><expr pos:start="131:11" pos:end="131:13"><name pos:start="131:11" pos:end="131:11">p</name><operator pos:start="131:12" pos:end="131:13">++</operator></expr></argument>, <argument pos:start="131:16" pos:end="131:25"><expr pos:start="131:16" pos:end="131:25"><literal type="number" pos:start="131:16" pos:end="131:25">0x3c084000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="131:66" pos:end="131:85">/* lui t0, 0x4000 */</comment>

<cpp:else pos:start="133:1" pos:end="133:5">#<cpp:directive pos:start="133:2" pos:end="133:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="135:5" pos:end="138:0"><expr pos:start="135:5" pos:end="135:26"><call pos:start="135:5" pos:end="135:26"><name pos:start="135:5" pos:end="135:9">stl_p</name><argument_list pos:start="135:10" pos:end="135:26">(<argument pos:start="135:11" pos:end="135:13"><expr pos:start="135:11" pos:end="135:13"><name pos:start="135:11" pos:end="135:11">p</name><operator pos:start="135:12" pos:end="135:13">++</operator></expr></argument>, <argument pos:start="135:16" pos:end="135:25"><expr pos:start="135:16" pos:end="135:25"><literal type="number" pos:start="135:16" pos:end="135:25">0x34080040</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="135:66" pos:end="135:89">/* ori t0, r0, 0x0040 */</comment>

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="139:5" pos:end="144:0"><expr pos:start="139:5" pos:end="139:26"><call pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:9">stl_p</name><argument_list pos:start="139:10" pos:end="139:26">(<argument pos:start="139:11" pos:end="139:13"><expr pos:start="139:11" pos:end="139:13"><name pos:start="139:11" pos:end="139:11">p</name><operator pos:start="139:12" pos:end="139:13">++</operator></expr></argument>, <argument pos:start="139:16" pos:end="139:25"><expr pos:start="139:16" pos:end="139:25"><literal type="number" pos:start="139:16" pos:end="139:25">0xad280050</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="139:66" pos:end="139:88">/* sw t0, 0x0050(t1) */</comment>



<cpp:ifdef pos:start="143:1" pos:end="143:29">#<cpp:directive pos:start="143:2" pos:end="143:6">ifdef</cpp:directive> <name pos:start="143:8" pos:end="143:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="145:5" pos:end="148:0"><expr pos:start="145:5" pos:end="145:26"><call pos:start="145:5" pos:end="145:26"><name pos:start="145:5" pos:end="145:9">stl_p</name><argument_list pos:start="145:10" pos:end="145:26">(<argument pos:start="145:11" pos:end="145:13"><expr pos:start="145:11" pos:end="145:13"><name pos:start="145:11" pos:end="145:11">p</name><operator pos:start="145:12" pos:end="145:13">++</operator></expr></argument>, <argument pos:start="145:16" pos:end="145:25"><expr pos:start="145:16" pos:end="145:25"><literal type="number" pos:start="145:16" pos:end="145:25">0x3c088000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="145:66" pos:end="145:85">/* lui t0, 0x8000 */</comment>

<cpp:else pos:start="147:1" pos:end="147:5">#<cpp:directive pos:start="147:2" pos:end="147:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="149:5" pos:end="152:0"><expr pos:start="149:5" pos:end="149:26"><call pos:start="149:5" pos:end="149:26"><name pos:start="149:5" pos:end="149:9">stl_p</name><argument_list pos:start="149:10" pos:end="149:26">(<argument pos:start="149:11" pos:end="149:13"><expr pos:start="149:11" pos:end="149:13"><name pos:start="149:11" pos:end="149:11">p</name><operator pos:start="149:12" pos:end="149:13">++</operator></expr></argument>, <argument pos:start="149:16" pos:end="149:25"><expr pos:start="149:16" pos:end="149:25"><literal type="number" pos:start="149:16" pos:end="149:25">0x34080080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="149:66" pos:end="149:89">/* ori t0, r0, 0x0080 */</comment>

<cpp:endif pos:start="151:1" pos:end="151:6">#<cpp:directive pos:start="151:2" pos:end="151:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="153:5" pos:end="156:0"><expr pos:start="153:5" pos:end="153:26"><call pos:start="153:5" pos:end="153:26"><name pos:start="153:5" pos:end="153:9">stl_p</name><argument_list pos:start="153:10" pos:end="153:26">(<argument pos:start="153:11" pos:end="153:13"><expr pos:start="153:11" pos:end="153:13"><name pos:start="153:11" pos:end="153:11">p</name><operator pos:start="153:12" pos:end="153:13">++</operator></expr></argument>, <argument pos:start="153:16" pos:end="153:25"><expr pos:start="153:16" pos:end="153:25"><literal type="number" pos:start="153:16" pos:end="153:25">0xad280058</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="153:66" pos:end="153:88">/* sw t0, 0x0058(t1) */</comment>

<cpp:ifdef pos:start="155:1" pos:end="155:29">#<cpp:directive pos:start="155:2" pos:end="155:6">ifdef</cpp:directive> <name pos:start="155:8" pos:end="155:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="157:5" pos:end="160:0"><expr pos:start="157:5" pos:end="157:26"><call pos:start="157:5" pos:end="157:26"><name pos:start="157:5" pos:end="157:9">stl_p</name><argument_list pos:start="157:10" pos:end="157:26">(<argument pos:start="157:11" pos:end="157:13"><expr pos:start="157:11" pos:end="157:13"><name pos:start="157:11" pos:end="157:11">p</name><operator pos:start="157:12" pos:end="157:13">++</operator></expr></argument>, <argument pos:start="157:16" pos:end="157:25"><expr pos:start="157:16" pos:end="157:25"><literal type="number" pos:start="157:16" pos:end="157:25">0x3c083f00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="157:66" pos:end="157:85">/* lui t0, 0x3f00 */</comment>

<cpp:else pos:start="159:1" pos:end="159:5">#<cpp:directive pos:start="159:2" pos:end="159:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="161:5" pos:end="164:0"><expr pos:start="161:5" pos:end="161:26"><call pos:start="161:5" pos:end="161:26"><name pos:start="161:5" pos:end="161:9">stl_p</name><argument_list pos:start="161:10" pos:end="161:26">(<argument pos:start="161:11" pos:end="161:13"><expr pos:start="161:11" pos:end="161:13"><name pos:start="161:11" pos:end="161:11">p</name><operator pos:start="161:12" pos:end="161:13">++</operator></expr></argument>, <argument pos:start="161:16" pos:end="161:25"><expr pos:start="161:16" pos:end="161:25"><literal type="number" pos:start="161:16" pos:end="161:25">0x3408003f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="161:66" pos:end="161:89">/* ori t0, r0, 0x003f */</comment>

<cpp:endif pos:start="163:1" pos:end="163:6">#<cpp:directive pos:start="163:2" pos:end="163:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="165:5" pos:end="170:0"><expr pos:start="165:5" pos:end="165:26"><call pos:start="165:5" pos:end="165:26"><name pos:start="165:5" pos:end="165:9">stl_p</name><argument_list pos:start="165:10" pos:end="165:26">(<argument pos:start="165:11" pos:end="165:13"><expr pos:start="165:11" pos:end="165:13"><name pos:start="165:11" pos:end="165:11">p</name><operator pos:start="165:12" pos:end="165:13">++</operator></expr></argument>, <argument pos:start="165:16" pos:end="165:25"><expr pos:start="165:16" pos:end="165:25"><literal type="number" pos:start="165:16" pos:end="165:25">0xad280060</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="165:66" pos:end="165:88">/* sw t0, 0x0060(t1) */</comment>



<cpp:ifdef pos:start="169:1" pos:end="169:29">#<cpp:directive pos:start="169:2" pos:end="169:6">ifdef</cpp:directive> <name pos:start="169:8" pos:end="169:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="171:5" pos:end="174:0"><expr pos:start="171:5" pos:end="171:26"><call pos:start="171:5" pos:end="171:26"><name pos:start="171:5" pos:end="171:9">stl_p</name><argument_list pos:start="171:10" pos:end="171:26">(<argument pos:start="171:11" pos:end="171:13"><expr pos:start="171:11" pos:end="171:13"><name pos:start="171:11" pos:end="171:11">p</name><operator pos:start="171:12" pos:end="171:13">++</operator></expr></argument>, <argument pos:start="171:16" pos:end="171:25"><expr pos:start="171:16" pos:end="171:25"><literal type="number" pos:start="171:16" pos:end="171:25">0x3c08c100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="171:66" pos:end="171:85">/* lui t0, 0xc100 */</comment>

<cpp:else pos:start="173:1" pos:end="173:5">#<cpp:directive pos:start="173:2" pos:end="173:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="175:5" pos:end="178:0"><expr pos:start="175:5" pos:end="175:26"><call pos:start="175:5" pos:end="175:26"><name pos:start="175:5" pos:end="175:9">stl_p</name><argument_list pos:start="175:10" pos:end="175:26">(<argument pos:start="175:11" pos:end="175:13"><expr pos:start="175:11" pos:end="175:13"><name pos:start="175:11" pos:end="175:11">p</name><operator pos:start="175:12" pos:end="175:13">++</operator></expr></argument>, <argument pos:start="175:16" pos:end="175:25"><expr pos:start="175:16" pos:end="175:25"><literal type="number" pos:start="175:16" pos:end="175:25">0x340800c1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="175:66" pos:end="175:89">/* ori t0, r0, 0x00c1 */</comment>

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="179:5" pos:end="182:0"><expr pos:start="179:5" pos:end="179:26"><call pos:start="179:5" pos:end="179:26"><name pos:start="179:5" pos:end="179:9">stl_p</name><argument_list pos:start="179:10" pos:end="179:26">(<argument pos:start="179:11" pos:end="179:13"><expr pos:start="179:11" pos:end="179:13"><name pos:start="179:11" pos:end="179:11">p</name><operator pos:start="179:12" pos:end="179:13">++</operator></expr></argument>, <argument pos:start="179:16" pos:end="179:25"><expr pos:start="179:16" pos:end="179:25"><literal type="number" pos:start="179:16" pos:end="179:25">0xad280080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="179:66" pos:end="179:88">/* sw t0, 0x0080(t1) */</comment>

<cpp:ifdef pos:start="181:1" pos:end="181:29">#<cpp:directive pos:start="181:2" pos:end="181:6">ifdef</cpp:directive> <name pos:start="181:8" pos:end="181:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="183:5" pos:end="186:0"><expr pos:start="183:5" pos:end="183:26"><call pos:start="183:5" pos:end="183:26"><name pos:start="183:5" pos:end="183:9">stl_p</name><argument_list pos:start="183:10" pos:end="183:26">(<argument pos:start="183:11" pos:end="183:13"><expr pos:start="183:11" pos:end="183:13"><name pos:start="183:11" pos:end="183:11">p</name><operator pos:start="183:12" pos:end="183:13">++</operator></expr></argument>, <argument pos:start="183:16" pos:end="183:25"><expr pos:start="183:16" pos:end="183:25"><literal type="number" pos:start="183:16" pos:end="183:25">0x3c085e00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="183:66" pos:end="183:85">/* lui t0, 0x5e00 */</comment>

<cpp:else pos:start="185:1" pos:end="185:5">#<cpp:directive pos:start="185:2" pos:end="185:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="187:5" pos:end="190:0"><expr pos:start="187:5" pos:end="187:26"><call pos:start="187:5" pos:end="187:26"><name pos:start="187:5" pos:end="187:9">stl_p</name><argument_list pos:start="187:10" pos:end="187:26">(<argument pos:start="187:11" pos:end="187:13"><expr pos:start="187:11" pos:end="187:13"><name pos:start="187:11" pos:end="187:11">p</name><operator pos:start="187:12" pos:end="187:13">++</operator></expr></argument>, <argument pos:start="187:16" pos:end="187:25"><expr pos:start="187:16" pos:end="187:25"><literal type="number" pos:start="187:16" pos:end="187:25">0x3408005e</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="187:66" pos:end="187:89">/* ori t0, r0, 0x005e */</comment>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="191:5" pos:end="191:27"><expr pos:start="191:5" pos:end="191:26"><call pos:start="191:5" pos:end="191:26"><name pos:start="191:5" pos:end="191:9">stl_p</name><argument_list pos:start="191:10" pos:end="191:26">(<argument pos:start="191:11" pos:end="191:13"><expr pos:start="191:11" pos:end="191:13"><name pos:start="191:11" pos:end="191:11">p</name><operator pos:start="191:12" pos:end="191:13">++</operator></expr></argument>, <argument pos:start="191:16" pos:end="191:25"><expr pos:start="191:16" pos:end="191:25"><literal type="number" pos:start="191:16" pos:end="191:25">0xad280088</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="191:66" pos:end="191:88">/* sw t0, 0x0088(t1) */</comment>



    <comment type="block" pos:start="195:5" pos:end="195:29">/* Jump to kernel code */</comment>

    <expr_stmt pos:start="197:5" pos:end="197:61"><expr pos:start="197:5" pos:end="197:60"><call pos:start="197:5" pos:end="197:60"><name pos:start="197:5" pos:end="197:9">stl_p</name><argument_list pos:start="197:10" pos:end="197:60">(<argument pos:start="197:11" pos:end="197:13"><expr pos:start="197:11" pos:end="197:13"><name pos:start="197:11" pos:end="197:11">p</name><operator pos:start="197:12" pos:end="197:13">++</operator></expr></argument>, <argument pos:start="197:16" pos:end="197:59"><expr pos:start="197:16" pos:end="197:59"><literal type="number" pos:start="197:16" pos:end="197:25">0x3c1f0000</literal> <operator pos:start="197:27" pos:end="197:27">|</operator> <operator pos:start="197:29" pos:end="197:29">(</operator><operator pos:start="197:30" pos:end="197:30">(</operator><name pos:start="197:31" pos:end="197:42">kernel_entry</name> <operator pos:start="197:44" pos:end="197:45">&gt;&gt;</operator> <literal type="number" pos:start="197:47" pos:end="197:48">16</literal><operator pos:start="197:49" pos:end="197:49">)</operator> <operator pos:start="197:51" pos:end="197:51">&amp;</operator> <literal type="number" pos:start="197:53" pos:end="197:58">0xffff</literal><operator pos:start="197:59" pos:end="197:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="197:66" pos:end="197:97">/* lui ra, high(kernel_entry) */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:53"><expr pos:start="199:5" pos:end="199:52"><call pos:start="199:5" pos:end="199:52"><name pos:start="199:5" pos:end="199:9">stl_p</name><argument_list pos:start="199:10" pos:end="199:52">(<argument pos:start="199:11" pos:end="199:13"><expr pos:start="199:11" pos:end="199:13"><name pos:start="199:11" pos:end="199:11">p</name><operator pos:start="199:12" pos:end="199:13">++</operator></expr></argument>, <argument pos:start="199:16" pos:end="199:51"><expr pos:start="199:16" pos:end="199:51"><literal type="number" pos:start="199:16" pos:end="199:25">0x37ff0000</literal> <operator pos:start="199:27" pos:end="199:27">|</operator> <operator pos:start="199:29" pos:end="199:29">(</operator><name pos:start="199:30" pos:end="199:41">kernel_entry</name> <operator pos:start="199:43" pos:end="199:43">&amp;</operator> <literal type="number" pos:start="199:45" pos:end="199:50">0xffff</literal><operator pos:start="199:51" pos:end="199:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="block" pos:start="199:66" pos:end="199:100">/* ori ra, ra, low(kernel_entry) */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:27"><expr pos:start="201:5" pos:end="201:26"><call pos:start="201:5" pos:end="201:26"><name pos:start="201:5" pos:end="201:9">stl_p</name><argument_list pos:start="201:10" pos:end="201:26">(<argument pos:start="201:11" pos:end="201:13"><expr pos:start="201:11" pos:end="201:13"><name pos:start="201:11" pos:end="201:11">p</name><operator pos:start="201:12" pos:end="201:13">++</operator></expr></argument>, <argument pos:start="201:16" pos:end="201:25"><expr pos:start="201:16" pos:end="201:25"><literal type="number" pos:start="201:16" pos:end="201:25">0x03e00009</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="201:66" pos:end="201:78">/* jalr ra */</comment>

    <expr_stmt pos:start="203:5" pos:end="203:27"><expr pos:start="203:5" pos:end="203:26"><call pos:start="203:5" pos:end="203:26"><name pos:start="203:5" pos:end="203:9">stl_p</name><argument_list pos:start="203:10" pos:end="203:26">(<argument pos:start="203:11" pos:end="203:13"><expr pos:start="203:11" pos:end="203:13"><name pos:start="203:11" pos:end="203:11">p</name><operator pos:start="203:12" pos:end="203:13">++</operator></expr></argument>, <argument pos:start="203:16" pos:end="203:25"><expr pos:start="203:16" pos:end="203:25"><literal type="number" pos:start="203:16" pos:end="203:25">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                      <comment type="block" pos:start="203:66" pos:end="203:74">/* nop */</comment>



    <comment type="block" pos:start="207:5" pos:end="207:27">/* YAMON subroutines */</comment>

    <expr_stmt pos:start="209:5" pos:end="209:36"><expr pos:start="209:5" pos:end="209:35"><name pos:start="209:5" pos:end="209:5">p</name> <operator pos:start="209:7" pos:end="209:7">=</operator> <operator pos:start="209:9" pos:end="209:9">(</operator><name pos:start="209:10" pos:end="209:17">uint32_t</name> <operator pos:start="209:19" pos:end="209:19">*</operator><operator pos:start="209:20" pos:end="209:20">)</operator> <operator pos:start="209:22" pos:end="209:22">(</operator><name pos:start="209:23" pos:end="209:26">base</name> <operator pos:start="209:28" pos:end="209:28">+</operator> <literal type="number" pos:start="209:30" pos:end="209:34">0x800</literal><operator pos:start="209:35" pos:end="209:35">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:27"><expr pos:start="211:5" pos:end="211:26"><call pos:start="211:5" pos:end="211:26"><name pos:start="211:5" pos:end="211:9">stl_p</name><argument_list pos:start="211:10" pos:end="211:26">(<argument pos:start="211:11" pos:end="211:13"><expr pos:start="211:11" pos:end="211:13"><name pos:start="211:11" pos:end="211:11">p</name><operator pos:start="211:12" pos:end="211:13">++</operator></expr></argument>, <argument pos:start="211:16" pos:end="211:25"><expr pos:start="211:16" pos:end="211:25"><literal type="number" pos:start="211:16" pos:end="211:25">0x03e00009</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="211:65" pos:end="211:77">/* jalr ra */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:27"><expr pos:start="213:5" pos:end="213:26"><call pos:start="213:5" pos:end="213:26"><name pos:start="213:5" pos:end="213:9">stl_p</name><argument_list pos:start="213:10" pos:end="213:26">(<argument pos:start="213:11" pos:end="213:13"><expr pos:start="213:11" pos:end="213:13"><name pos:start="213:11" pos:end="213:11">p</name><operator pos:start="213:12" pos:end="213:13">++</operator></expr></argument>, <argument pos:start="213:16" pos:end="213:25"><expr pos:start="213:16" pos:end="213:25"><literal type="number" pos:start="213:16" pos:end="213:25">0x24020000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="213:65" pos:end="213:77">/* li v0,0 */</comment>

    <comment type="block" pos:start="215:5" pos:end="215:25">/* 808 YAMON print */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:27"><expr pos:start="217:5" pos:end="217:26"><call pos:start="217:5" pos:end="217:26"><name pos:start="217:5" pos:end="217:9">stl_p</name><argument_list pos:start="217:10" pos:end="217:26">(<argument pos:start="217:11" pos:end="217:13"><expr pos:start="217:11" pos:end="217:13"><name pos:start="217:11" pos:end="217:11">p</name><operator pos:start="217:12" pos:end="217:13">++</operator></expr></argument>, <argument pos:start="217:16" pos:end="217:25"><expr pos:start="217:16" pos:end="217:25"><literal type="number" pos:start="217:16" pos:end="217:25">0x03e06821</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="217:65" pos:end="217:80">/* move t5,ra */</comment>

    <expr_stmt pos:start="219:5" pos:end="219:27"><expr pos:start="219:5" pos:end="219:26"><call pos:start="219:5" pos:end="219:26"><name pos:start="219:5" pos:end="219:9">stl_p</name><argument_list pos:start="219:10" pos:end="219:26">(<argument pos:start="219:11" pos:end="219:13"><expr pos:start="219:11" pos:end="219:13"><name pos:start="219:11" pos:end="219:11">p</name><operator pos:start="219:12" pos:end="219:13">++</operator></expr></argument>, <argument pos:start="219:16" pos:end="219:25"><expr pos:start="219:16" pos:end="219:25"><literal type="number" pos:start="219:16" pos:end="219:25">0x00805821</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="219:65" pos:end="219:80">/* move t3,a0 */</comment>

    <expr_stmt pos:start="221:5" pos:end="221:27"><expr pos:start="221:5" pos:end="221:26"><call pos:start="221:5" pos:end="221:26"><name pos:start="221:5" pos:end="221:9">stl_p</name><argument_list pos:start="221:10" pos:end="221:26">(<argument pos:start="221:11" pos:end="221:13"><expr pos:start="221:11" pos:end="221:13"><name pos:start="221:11" pos:end="221:11">p</name><operator pos:start="221:12" pos:end="221:13">++</operator></expr></argument>, <argument pos:start="221:16" pos:end="221:25"><expr pos:start="221:16" pos:end="221:25"><literal type="number" pos:start="221:16" pos:end="221:25">0x00a05021</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="221:65" pos:end="221:80">/* move t2,a1 */</comment>

    <expr_stmt pos:start="223:5" pos:end="223:27"><expr pos:start="223:5" pos:end="223:26"><call pos:start="223:5" pos:end="223:26"><name pos:start="223:5" pos:end="223:9">stl_p</name><argument_list pos:start="223:10" pos:end="223:26">(<argument pos:start="223:11" pos:end="223:13"><expr pos:start="223:11" pos:end="223:13"><name pos:start="223:11" pos:end="223:11">p</name><operator pos:start="223:12" pos:end="223:13">++</operator></expr></argument>, <argument pos:start="223:16" pos:end="223:25"><expr pos:start="223:16" pos:end="223:25"><literal type="number" pos:start="223:16" pos:end="223:25">0x91440000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="223:65" pos:end="223:82">/* lbu a0,0(t2) */</comment>

    <expr_stmt pos:start="225:5" pos:end="225:27"><expr pos:start="225:5" pos:end="225:26"><call pos:start="225:5" pos:end="225:26"><name pos:start="225:5" pos:end="225:9">stl_p</name><argument_list pos:start="225:10" pos:end="225:26">(<argument pos:start="225:11" pos:end="225:13"><expr pos:start="225:11" pos:end="225:13"><name pos:start="225:11" pos:end="225:11">p</name><operator pos:start="225:12" pos:end="225:13">++</operator></expr></argument>, <argument pos:start="225:16" pos:end="225:25"><expr pos:start="225:16" pos:end="225:25"><literal type="number" pos:start="225:16" pos:end="225:25">0x254a0001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="225:65" pos:end="225:83">/* addiu t2,t2,1 */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:27"><expr pos:start="227:5" pos:end="227:26"><call pos:start="227:5" pos:end="227:26"><name pos:start="227:5" pos:end="227:9">stl_p</name><argument_list pos:start="227:10" pos:end="227:26">(<argument pos:start="227:11" pos:end="227:13"><expr pos:start="227:11" pos:end="227:13"><name pos:start="227:11" pos:end="227:11">p</name><operator pos:start="227:12" pos:end="227:13">++</operator></expr></argument>, <argument pos:start="227:16" pos:end="227:25"><expr pos:start="227:16" pos:end="227:25"><literal type="number" pos:start="227:16" pos:end="227:25">0x10800005</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="227:65" pos:end="227:81">/* beqz a0,834 */</comment>

    <expr_stmt pos:start="229:5" pos:end="229:27"><expr pos:start="229:5" pos:end="229:26"><call pos:start="229:5" pos:end="229:26"><name pos:start="229:5" pos:end="229:9">stl_p</name><argument_list pos:start="229:10" pos:end="229:26">(<argument pos:start="229:11" pos:end="229:13"><expr pos:start="229:11" pos:end="229:13"><name pos:start="229:11" pos:end="229:11">p</name><operator pos:start="229:12" pos:end="229:13">++</operator></expr></argument>, <argument pos:start="229:16" pos:end="229:25"><expr pos:start="229:16" pos:end="229:25"><literal type="number" pos:start="229:16" pos:end="229:25">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="229:65" pos:end="229:73">/* nop */</comment>

    <expr_stmt pos:start="231:5" pos:end="231:27"><expr pos:start="231:5" pos:end="231:26"><call pos:start="231:5" pos:end="231:26"><name pos:start="231:5" pos:end="231:9">stl_p</name><argument_list pos:start="231:10" pos:end="231:26">(<argument pos:start="231:11" pos:end="231:13"><expr pos:start="231:11" pos:end="231:13"><name pos:start="231:11" pos:end="231:11">p</name><operator pos:start="231:12" pos:end="231:13">++</operator></expr></argument>, <argument pos:start="231:16" pos:end="231:25"><expr pos:start="231:16" pos:end="231:25"><literal type="number" pos:start="231:16" pos:end="231:25">0x0ff0021c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="231:65" pos:end="231:77">/* jal 870 */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:27"><expr pos:start="233:5" pos:end="233:26"><call pos:start="233:5" pos:end="233:26"><name pos:start="233:5" pos:end="233:9">stl_p</name><argument_list pos:start="233:10" pos:end="233:26">(<argument pos:start="233:11" pos:end="233:13"><expr pos:start="233:11" pos:end="233:13"><name pos:start="233:11" pos:end="233:11">p</name><operator pos:start="233:12" pos:end="233:13">++</operator></expr></argument>, <argument pos:start="233:16" pos:end="233:25"><expr pos:start="233:16" pos:end="233:25"><literal type="number" pos:start="233:16" pos:end="233:25">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="233:65" pos:end="233:73">/* nop */</comment>

    <expr_stmt pos:start="235:5" pos:end="235:27"><expr pos:start="235:5" pos:end="235:26"><call pos:start="235:5" pos:end="235:26"><name pos:start="235:5" pos:end="235:9">stl_p</name><argument_list pos:start="235:10" pos:end="235:26">(<argument pos:start="235:11" pos:end="235:13"><expr pos:start="235:11" pos:end="235:13"><name pos:start="235:11" pos:end="235:11">p</name><operator pos:start="235:12" pos:end="235:13">++</operator></expr></argument>, <argument pos:start="235:16" pos:end="235:25"><expr pos:start="235:16" pos:end="235:25"><literal type="number" pos:start="235:16" pos:end="235:25">0x08000205</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="235:65" pos:end="235:75">/* j 814 */</comment>

    <expr_stmt pos:start="237:5" pos:end="237:27"><expr pos:start="237:5" pos:end="237:26"><call pos:start="237:5" pos:end="237:26"><name pos:start="237:5" pos:end="237:9">stl_p</name><argument_list pos:start="237:10" pos:end="237:26">(<argument pos:start="237:11" pos:end="237:13"><expr pos:start="237:11" pos:end="237:13"><name pos:start="237:11" pos:end="237:11">p</name><operator pos:start="237:12" pos:end="237:13">++</operator></expr></argument>, <argument pos:start="237:16" pos:end="237:25"><expr pos:start="237:16" pos:end="237:25"><literal type="number" pos:start="237:16" pos:end="237:25">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="237:65" pos:end="237:73">/* nop */</comment>

    <expr_stmt pos:start="239:5" pos:end="239:27"><expr pos:start="239:5" pos:end="239:26"><call pos:start="239:5" pos:end="239:26"><name pos:start="239:5" pos:end="239:9">stl_p</name><argument_list pos:start="239:10" pos:end="239:26">(<argument pos:start="239:11" pos:end="239:13"><expr pos:start="239:11" pos:end="239:13"><name pos:start="239:11" pos:end="239:11">p</name><operator pos:start="239:12" pos:end="239:13">++</operator></expr></argument>, <argument pos:start="239:16" pos:end="239:25"><expr pos:start="239:16" pos:end="239:25"><literal type="number" pos:start="239:16" pos:end="239:25">0x01a00009</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="239:65" pos:end="239:77">/* jalr t5 */</comment>

    <expr_stmt pos:start="241:5" pos:end="241:27"><expr pos:start="241:5" pos:end="241:26"><call pos:start="241:5" pos:end="241:26"><name pos:start="241:5" pos:end="241:9">stl_p</name><argument_list pos:start="241:10" pos:end="241:26">(<argument pos:start="241:11" pos:end="241:13"><expr pos:start="241:11" pos:end="241:13"><name pos:start="241:11" pos:end="241:11">p</name><operator pos:start="241:12" pos:end="241:13">++</operator></expr></argument>, <argument pos:start="241:16" pos:end="241:25"><expr pos:start="241:16" pos:end="241:25"><literal type="number" pos:start="241:16" pos:end="241:25">0x01602021</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="241:65" pos:end="241:80">/* move a0,t3 */</comment>

    <comment type="block" pos:start="243:5" pos:end="243:33">/* 0x83c YAMON print_count */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:27"><expr pos:start="245:5" pos:end="245:26"><call pos:start="245:5" pos:end="245:26"><name pos:start="245:5" pos:end="245:9">stl_p</name><argument_list pos:start="245:10" pos:end="245:26">(<argument pos:start="245:11" pos:end="245:13"><expr pos:start="245:11" pos:end="245:13"><name pos:start="245:11" pos:end="245:11">p</name><operator pos:start="245:12" pos:end="245:13">++</operator></expr></argument>, <argument pos:start="245:16" pos:end="245:25"><expr pos:start="245:16" pos:end="245:25"><literal type="number" pos:start="245:16" pos:end="245:25">0x03e06821</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="245:65" pos:end="245:80">/* move t5,ra */</comment>

    <expr_stmt pos:start="247:5" pos:end="247:27"><expr pos:start="247:5" pos:end="247:26"><call pos:start="247:5" pos:end="247:26"><name pos:start="247:5" pos:end="247:9">stl_p</name><argument_list pos:start="247:10" pos:end="247:26">(<argument pos:start="247:11" pos:end="247:13"><expr pos:start="247:11" pos:end="247:13"><name pos:start="247:11" pos:end="247:11">p</name><operator pos:start="247:12" pos:end="247:13">++</operator></expr></argument>, <argument pos:start="247:16" pos:end="247:25"><expr pos:start="247:16" pos:end="247:25"><literal type="number" pos:start="247:16" pos:end="247:25">0x00805821</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="247:65" pos:end="247:80">/* move t3,a0 */</comment>

    <expr_stmt pos:start="249:5" pos:end="249:27"><expr pos:start="249:5" pos:end="249:26"><call pos:start="249:5" pos:end="249:26"><name pos:start="249:5" pos:end="249:9">stl_p</name><argument_list pos:start="249:10" pos:end="249:26">(<argument pos:start="249:11" pos:end="249:13"><expr pos:start="249:11" pos:end="249:13"><name pos:start="249:11" pos:end="249:11">p</name><operator pos:start="249:12" pos:end="249:13">++</operator></expr></argument>, <argument pos:start="249:16" pos:end="249:25"><expr pos:start="249:16" pos:end="249:25"><literal type="number" pos:start="249:16" pos:end="249:25">0x00a05021</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="249:65" pos:end="249:80">/* move t2,a1 */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:27"><expr pos:start="251:5" pos:end="251:26"><call pos:start="251:5" pos:end="251:26"><name pos:start="251:5" pos:end="251:9">stl_p</name><argument_list pos:start="251:10" pos:end="251:26">(<argument pos:start="251:11" pos:end="251:13"><expr pos:start="251:11" pos:end="251:13"><name pos:start="251:11" pos:end="251:11">p</name><operator pos:start="251:12" pos:end="251:13">++</operator></expr></argument>, <argument pos:start="251:16" pos:end="251:25"><expr pos:start="251:16" pos:end="251:25"><literal type="number" pos:start="251:16" pos:end="251:25">0x00c06021</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="251:65" pos:end="251:80">/* move t4,a2 */</comment>

    <expr_stmt pos:start="253:5" pos:end="253:27"><expr pos:start="253:5" pos:end="253:26"><call pos:start="253:5" pos:end="253:26"><name pos:start="253:5" pos:end="253:9">stl_p</name><argument_list pos:start="253:10" pos:end="253:26">(<argument pos:start="253:11" pos:end="253:13"><expr pos:start="253:11" pos:end="253:13"><name pos:start="253:11" pos:end="253:11">p</name><operator pos:start="253:12" pos:end="253:13">++</operator></expr></argument>, <argument pos:start="253:16" pos:end="253:25"><expr pos:start="253:16" pos:end="253:25"><literal type="number" pos:start="253:16" pos:end="253:25">0x91440000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="253:65" pos:end="253:82">/* lbu a0,0(t2) */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:27"><expr pos:start="255:5" pos:end="255:26"><call pos:start="255:5" pos:end="255:26"><name pos:start="255:5" pos:end="255:9">stl_p</name><argument_list pos:start="255:10" pos:end="255:26">(<argument pos:start="255:11" pos:end="255:13"><expr pos:start="255:11" pos:end="255:13"><name pos:start="255:11" pos:end="255:11">p</name><operator pos:start="255:12" pos:end="255:13">++</operator></expr></argument>, <argument pos:start="255:16" pos:end="255:25"><expr pos:start="255:16" pos:end="255:25"><literal type="number" pos:start="255:16" pos:end="255:25">0x0ff0021c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="255:65" pos:end="255:77">/* jal 870 */</comment>

    <expr_stmt pos:start="257:5" pos:end="257:27"><expr pos:start="257:5" pos:end="257:26"><call pos:start="257:5" pos:end="257:26"><name pos:start="257:5" pos:end="257:9">stl_p</name><argument_list pos:start="257:10" pos:end="257:26">(<argument pos:start="257:11" pos:end="257:13"><expr pos:start="257:11" pos:end="257:13"><name pos:start="257:11" pos:end="257:11">p</name><operator pos:start="257:12" pos:end="257:13">++</operator></expr></argument>, <argument pos:start="257:16" pos:end="257:25"><expr pos:start="257:16" pos:end="257:25"><literal type="number" pos:start="257:16" pos:end="257:25">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="257:65" pos:end="257:73">/* nop */</comment>

    <expr_stmt pos:start="259:5" pos:end="259:27"><expr pos:start="259:5" pos:end="259:26"><call pos:start="259:5" pos:end="259:26"><name pos:start="259:5" pos:end="259:9">stl_p</name><argument_list pos:start="259:10" pos:end="259:26">(<argument pos:start="259:11" pos:end="259:13"><expr pos:start="259:11" pos:end="259:13"><name pos:start="259:11" pos:end="259:11">p</name><operator pos:start="259:12" pos:end="259:13">++</operator></expr></argument>, <argument pos:start="259:16" pos:end="259:25"><expr pos:start="259:16" pos:end="259:25"><literal type="number" pos:start="259:16" pos:end="259:25">0x254a0001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="259:65" pos:end="259:83">/* addiu t2,t2,1 */</comment>

    <expr_stmt pos:start="261:5" pos:end="261:27"><expr pos:start="261:5" pos:end="261:26"><call pos:start="261:5" pos:end="261:26"><name pos:start="261:5" pos:end="261:9">stl_p</name><argument_list pos:start="261:10" pos:end="261:26">(<argument pos:start="261:11" pos:end="261:13"><expr pos:start="261:11" pos:end="261:13"><name pos:start="261:11" pos:end="261:11">p</name><operator pos:start="261:12" pos:end="261:13">++</operator></expr></argument>, <argument pos:start="261:16" pos:end="261:25"><expr pos:start="261:16" pos:end="261:25"><literal type="number" pos:start="261:16" pos:end="261:25">0x258cffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="261:65" pos:end="261:84">/* addiu t4,t4,-1 */</comment>

    <expr_stmt pos:start="263:5" pos:end="263:27"><expr pos:start="263:5" pos:end="263:26"><call pos:start="263:5" pos:end="263:26"><name pos:start="263:5" pos:end="263:9">stl_p</name><argument_list pos:start="263:10" pos:end="263:26">(<argument pos:start="263:11" pos:end="263:13"><expr pos:start="263:11" pos:end="263:13"><name pos:start="263:11" pos:end="263:11">p</name><operator pos:start="263:12" pos:end="263:13">++</operator></expr></argument>, <argument pos:start="263:16" pos:end="263:25"><expr pos:start="263:16" pos:end="263:25"><literal type="number" pos:start="263:16" pos:end="263:25">0x1580fffa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="263:65" pos:end="263:81">/* bnez t4,84c */</comment>

    <expr_stmt pos:start="265:5" pos:end="265:27"><expr pos:start="265:5" pos:end="265:26"><call pos:start="265:5" pos:end="265:26"><name pos:start="265:5" pos:end="265:9">stl_p</name><argument_list pos:start="265:10" pos:end="265:26">(<argument pos:start="265:11" pos:end="265:13"><expr pos:start="265:11" pos:end="265:13"><name pos:start="265:11" pos:end="265:11">p</name><operator pos:start="265:12" pos:end="265:13">++</operator></expr></argument>, <argument pos:start="265:16" pos:end="265:25"><expr pos:start="265:16" pos:end="265:25"><literal type="number" pos:start="265:16" pos:end="265:25">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="265:65" pos:end="265:73">/* nop */</comment>

    <expr_stmt pos:start="267:5" pos:end="267:27"><expr pos:start="267:5" pos:end="267:26"><call pos:start="267:5" pos:end="267:26"><name pos:start="267:5" pos:end="267:9">stl_p</name><argument_list pos:start="267:10" pos:end="267:26">(<argument pos:start="267:11" pos:end="267:13"><expr pos:start="267:11" pos:end="267:13"><name pos:start="267:11" pos:end="267:11">p</name><operator pos:start="267:12" pos:end="267:13">++</operator></expr></argument>, <argument pos:start="267:16" pos:end="267:25"><expr pos:start="267:16" pos:end="267:25"><literal type="number" pos:start="267:16" pos:end="267:25">0x01a00009</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="267:65" pos:end="267:77">/* jalr t5 */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:27"><expr pos:start="269:5" pos:end="269:26"><call pos:start="269:5" pos:end="269:26"><name pos:start="269:5" pos:end="269:9">stl_p</name><argument_list pos:start="269:10" pos:end="269:26">(<argument pos:start="269:11" pos:end="269:13"><expr pos:start="269:11" pos:end="269:13"><name pos:start="269:11" pos:end="269:11">p</name><operator pos:start="269:12" pos:end="269:13">++</operator></expr></argument>, <argument pos:start="269:16" pos:end="269:25"><expr pos:start="269:16" pos:end="269:25"><literal type="number" pos:start="269:16" pos:end="269:25">0x01602021</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="269:65" pos:end="269:80">/* move a0,t3 */</comment>

    <comment type="block" pos:start="271:5" pos:end="271:15">/* 0x870 */</comment>

    <expr_stmt pos:start="273:5" pos:end="273:27"><expr pos:start="273:5" pos:end="273:26"><call pos:start="273:5" pos:end="273:26"><name pos:start="273:5" pos:end="273:9">stl_p</name><argument_list pos:start="273:10" pos:end="273:26">(<argument pos:start="273:11" pos:end="273:13"><expr pos:start="273:11" pos:end="273:13"><name pos:start="273:11" pos:end="273:11">p</name><operator pos:start="273:12" pos:end="273:13">++</operator></expr></argument>, <argument pos:start="273:16" pos:end="273:25"><expr pos:start="273:16" pos:end="273:25"><literal type="number" pos:start="273:16" pos:end="273:25">0x3c08b800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="273:65" pos:end="273:83">/* lui t0,0xb400 */</comment>

    <expr_stmt pos:start="275:5" pos:end="275:27"><expr pos:start="275:5" pos:end="275:26"><call pos:start="275:5" pos:end="275:26"><name pos:start="275:5" pos:end="275:9">stl_p</name><argument_list pos:start="275:10" pos:end="275:26">(<argument pos:start="275:11" pos:end="275:13"><expr pos:start="275:11" pos:end="275:13"><name pos:start="275:11" pos:end="275:11">p</name><operator pos:start="275:12" pos:end="275:13">++</operator></expr></argument>, <argument pos:start="275:16" pos:end="275:25"><expr pos:start="275:16" pos:end="275:25"><literal type="number" pos:start="275:16" pos:end="275:25">0x350803f8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="275:65" pos:end="275:85">/* ori t0,t0,0x3f8 */</comment>

    <expr_stmt pos:start="277:5" pos:end="277:27"><expr pos:start="277:5" pos:end="277:26"><call pos:start="277:5" pos:end="277:26"><name pos:start="277:5" pos:end="277:9">stl_p</name><argument_list pos:start="277:10" pos:end="277:26">(<argument pos:start="277:11" pos:end="277:13"><expr pos:start="277:11" pos:end="277:13"><name pos:start="277:11" pos:end="277:11">p</name><operator pos:start="277:12" pos:end="277:13">++</operator></expr></argument>, <argument pos:start="277:16" pos:end="277:25"><expr pos:start="277:16" pos:end="277:25"><literal type="number" pos:start="277:16" pos:end="277:25">0x91090005</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="277:65" pos:end="277:82">/* lbu t1,5(t0) */</comment>

    <expr_stmt pos:start="279:5" pos:end="279:27"><expr pos:start="279:5" pos:end="279:26"><call pos:start="279:5" pos:end="279:26"><name pos:start="279:5" pos:end="279:9">stl_p</name><argument_list pos:start="279:10" pos:end="279:26">(<argument pos:start="279:11" pos:end="279:13"><expr pos:start="279:11" pos:end="279:13"><name pos:start="279:11" pos:end="279:11">p</name><operator pos:start="279:12" pos:end="279:13">++</operator></expr></argument>, <argument pos:start="279:16" pos:end="279:25"><expr pos:start="279:16" pos:end="279:25"><literal type="number" pos:start="279:16" pos:end="279:25">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="279:65" pos:end="279:73">/* nop */</comment>

    <expr_stmt pos:start="281:5" pos:end="281:27"><expr pos:start="281:5" pos:end="281:26"><call pos:start="281:5" pos:end="281:26"><name pos:start="281:5" pos:end="281:9">stl_p</name><argument_list pos:start="281:10" pos:end="281:26">(<argument pos:start="281:11" pos:end="281:13"><expr pos:start="281:11" pos:end="281:13"><name pos:start="281:11" pos:end="281:11">p</name><operator pos:start="281:12" pos:end="281:13">++</operator></expr></argument>, <argument pos:start="281:16" pos:end="281:25"><expr pos:start="281:16" pos:end="281:25"><literal type="number" pos:start="281:16" pos:end="281:25">0x31290040</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="281:65" pos:end="281:85">/* andi t1,t1,0x40 */</comment>

    <expr_stmt pos:start="283:5" pos:end="283:27"><expr pos:start="283:5" pos:end="283:26"><call pos:start="283:5" pos:end="283:26"><name pos:start="283:5" pos:end="283:9">stl_p</name><argument_list pos:start="283:10" pos:end="283:26">(<argument pos:start="283:11" pos:end="283:13"><expr pos:start="283:11" pos:end="283:13"><name pos:start="283:11" pos:end="283:11">p</name><operator pos:start="283:12" pos:end="283:13">++</operator></expr></argument>, <argument pos:start="283:16" pos:end="283:25"><expr pos:start="283:16" pos:end="283:25"><literal type="number" pos:start="283:16" pos:end="283:25">0x1120fffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="283:65" pos:end="283:93">/* beqz t1,878 &lt;outch+0x8&gt; */</comment>

    <expr_stmt pos:start="285:5" pos:end="285:27"><expr pos:start="285:5" pos:end="285:26"><call pos:start="285:5" pos:end="285:26"><name pos:start="285:5" pos:end="285:9">stl_p</name><argument_list pos:start="285:10" pos:end="285:26">(<argument pos:start="285:11" pos:end="285:13"><expr pos:start="285:11" pos:end="285:13"><name pos:start="285:11" pos:end="285:11">p</name><operator pos:start="285:12" pos:end="285:13">++</operator></expr></argument>, <argument pos:start="285:16" pos:end="285:25"><expr pos:start="285:16" pos:end="285:25"><literal type="number" pos:start="285:16" pos:end="285:25">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="285:65" pos:end="285:73">/* nop */</comment>

    <expr_stmt pos:start="287:5" pos:end="287:27"><expr pos:start="287:5" pos:end="287:26"><call pos:start="287:5" pos:end="287:26"><name pos:start="287:5" pos:end="287:9">stl_p</name><argument_list pos:start="287:10" pos:end="287:26">(<argument pos:start="287:11" pos:end="287:13"><expr pos:start="287:11" pos:end="287:13"><name pos:start="287:11" pos:end="287:11">p</name><operator pos:start="287:12" pos:end="287:13">++</operator></expr></argument>, <argument pos:start="287:16" pos:end="287:25"><expr pos:start="287:16" pos:end="287:25"><literal type="number" pos:start="287:16" pos:end="287:25">0x03e00009</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="287:65" pos:end="287:77">/* jalr ra */</comment>

    <expr_stmt pos:start="289:5" pos:end="289:27"><expr pos:start="289:5" pos:end="289:26"><call pos:start="289:5" pos:end="289:26"><name pos:start="289:5" pos:end="289:9">stl_p</name><argument_list pos:start="289:10" pos:end="289:26">(<argument pos:start="289:11" pos:end="289:13"><expr pos:start="289:11" pos:end="289:13"><name pos:start="289:11" pos:end="289:11">p</name><operator pos:start="289:12" pos:end="289:13">++</operator></expr></argument>, <argument pos:start="289:16" pos:end="289:25"><expr pos:start="289:16" pos:end="289:25"><literal type="number" pos:start="289:16" pos:end="289:25">0xa1040000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                     <comment type="block" pos:start="289:65" pos:end="289:81">/* sb a0,0(t0) */</comment>



</block_content>}</block></function>
</unit>
