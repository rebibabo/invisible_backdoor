<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26386.c" pos:tabs="8"><function pos:start="1:1" pos:end="789:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">wavpack_decode_block</name><parameter_list pos:start="1:32" pos:end="5:65">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:67">block_no</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:42"><decl pos:start="3:33" pos:end="3:42"><type pos:start="3:33" pos:end="3:42"><name pos:start="3:33" pos:end="3:36">void</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">data</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:62"><decl pos:start="3:45" pos:end="3:62"><type pos:start="3:45" pos:end="3:62"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:62">got_frame_ptr</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:50"><decl pos:start="5:33" pos:end="5:50"><type pos:start="5:33" pos:end="5:50"><specifier pos:start="5:33" pos:end="5:37">const</specifier> <name pos:start="5:39" pos:end="5:45">uint8_t</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:50">buf</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:64"><decl pos:start="5:53" pos:end="5:64"><type pos:start="5:53" pos:end="5:64"><name pos:start="5:53" pos:end="5:55">int</name></type> <name pos:start="5:57" pos:end="5:64">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="789:1">{<block_content pos:start="9:5" pos:end="787:29">

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">WavpackContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:22">wc</name> <init pos:start="9:24" pos:end="9:41">= <expr pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:30">avctx</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23">WavpackFrameContext</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:26">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:17">samples</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">samplecount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:100"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">got_terms</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>, <decl pos:start="17:24" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:24" pos:end="17:34">got_weights</name> <init pos:start="17:36" pos:end="17:38">= <expr pos:start="17:38" pos:end="17:38"><literal type="number" pos:start="17:38" pos:end="17:38">0</literal></expr></init></decl>, <decl pos:start="17:41" pos:end="17:55"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:41" pos:end="17:51">got_samples</name> <init pos:start="17:53" pos:end="17:55">= <expr pos:start="17:55" pos:end="17:55"><literal type="number" pos:start="17:55" pos:end="17:55">0</literal></expr></init></decl>, <decl pos:start="17:58" pos:end="17:72"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:58" pos:end="17:68">got_entropy</name> <init pos:start="17:70" pos:end="17:72">= <expr pos:start="17:72" pos:end="17:72"><literal type="number" pos:start="17:72" pos:end="17:72">0</literal></expr></init></decl>, <decl pos:start="17:75" pos:end="17:84"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:75" pos:end="17:80">got_bs</name> <init pos:start="17:82" pos:end="17:84">= <expr pos:start="17:84" pos:end="17:84"><literal type="number" pos:start="17:84" pos:end="17:84">0</literal></expr></init></decl>, <decl pos:start="17:87" pos:end="17:99"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:87" pos:end="17:95">got_float</name> <init pos:start="17:97" pos:end="17:99">= <expr pos:start="17:99" pos:end="17:99"><literal type="number" pos:start="17:99" pos:end="17:99">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">got_hybrid</name> <init pos:start="19:20" pos:end="19:22">= <expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:18"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:17">uint8_t</name><modifier pos:start="21:18" pos:end="21:18">*</modifier></type> <name pos:start="21:20" pos:end="21:27">orig_buf</name> <init pos:start="21:29" pos:end="21:33">= <expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:44"><decl pos:start="23:5" pos:end="23:43"><type pos:start="23:5" pos:end="23:18"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:17">uint8_t</name><modifier pos:start="23:18" pos:end="23:18">*</modifier></type> <name pos:start="23:20" pos:end="23:26">buf_end</name> <init pos:start="23:28" pos:end="23:43">= <expr pos:start="23:30" pos:end="23:43"><name pos:start="23:30" pos:end="23:32">buf</name> <operator pos:start="23:34" pos:end="23:34">+</operator> <name pos:start="23:36" pos:end="23:43">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:42"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>, <decl pos:start="25:12" pos:end="25:12"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:12" pos:end="25:12">j</name></decl>, <decl pos:start="25:15" pos:end="25:16"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:15" pos:end="25:16">id</name></decl>, <decl pos:start="25:19" pos:end="25:22"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:19" pos:end="25:22">size</name></decl>, <decl pos:start="25:25" pos:end="25:29"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:25" pos:end="25:29">ssize</name></decl>, <decl pos:start="25:32" pos:end="25:38"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:32" pos:end="25:38">weights</name></decl>, <decl pos:start="25:41" pos:end="25:41"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:41" pos:end="25:41">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:11"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">bpp</name></decl>, <decl pos:start="27:14" pos:end="27:17"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:14" pos:end="27:17">chan</name></decl>, <decl pos:start="27:20" pos:end="27:25"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:20" pos:end="27:25">chmask</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:16">buf_size</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr>)</condition><block pos:start="31:23" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:27"><expr pos:start="33:9" pos:end="33:26"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:22">got_frame_ptr</name> <operator pos:start="33:24" pos:end="33:24">=</operator> <literal type="number" pos:start="33:26" pos:end="33:26">0</literal></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if<condition pos:start="41:7" pos:end="41:66">(<expr pos:start="41:8" pos:end="41:65"><name pos:start="41:8" pos:end="41:15">block_no</name> <operator pos:start="41:17" pos:end="41:18">&gt;=</operator> <name pos:start="41:20" pos:end="41:31"><name pos:start="41:20" pos:end="41:21">wc</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:31">fdec_num</name></name> <operator pos:start="41:33" pos:end="41:34">&amp;&amp;</operator> <call pos:start="41:36" pos:end="41:61"><name pos:start="41:36" pos:end="41:57">wv_alloc_frame_context</name><argument_list pos:start="41:58" pos:end="41:61">(<argument pos:start="41:59" pos:end="41:60"><expr pos:start="41:59" pos:end="41:60"><name pos:start="41:59" pos:end="41:60">wc</name></expr></argument>)</argument_list></call> <operator pos:start="41:63" pos:end="41:63">&lt;</operator> <literal type="number" pos:start="41:65" pos:end="41:65">0</literal></expr>)</condition><block pos:start="41:67" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:77"><expr pos:start="43:9" pos:end="43:76"><call pos:start="43:9" pos:end="43:76"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:76">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:75"><expr pos:start="43:37" pos:end="43:75"><literal type="string" pos:start="43:37" pos:end="43:75">"Error creating frame decode context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:5">s</name> <operator pos:start="51:7" pos:end="51:7">=</operator> <name pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:10">wc</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:16">fdec</name><index pos:start="51:17" pos:end="51:26">[<expr pos:start="51:18" pos:end="51:25"><name pos:start="51:18" pos:end="51:25">block_no</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if<condition pos:start="53:7" pos:end="53:10">(<expr pos:start="53:8" pos:end="53:9"><operator pos:start="53:8" pos:end="53:8">!</operator><name pos:start="53:9" pos:end="53:9">s</name></expr>)</condition><block pos:start="53:11" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <expr_stmt pos:start="55:9" pos:end="55:87"><expr pos:start="55:9" pos:end="55:86"><call pos:start="55:9" pos:end="55:86"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:86">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:37" pos:end="55:75"><expr pos:start="55:37" pos:end="55:75"><literal type="string" pos:start="55:37" pos:end="55:75">"Context for block %d is not present\n"</literal></expr></argument>, <argument pos:start="55:78" pos:end="55:85"><expr pos:start="55:78" pos:end="55:85"><name pos:start="55:78" pos:end="55:85">block_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:57"><expr pos:start="63:9" pos:end="63:56"><call pos:start="63:9" pos:end="63:56"><name pos:start="63:9" pos:end="63:14">memset</name><argument_list pos:start="63:15" pos:end="63:56">(<argument pos:start="63:16" pos:end="63:24"><expr pos:start="63:16" pos:end="63:24"><name pos:start="63:16" pos:end="63:24"><name pos:start="63:16" pos:end="63:16">s</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:24">decorr</name></name></expr></argument>, <argument pos:start="63:27" pos:end="63:27"><expr pos:start="63:27" pos:end="63:27"><literal type="number" pos:start="63:27" pos:end="63:27">0</literal></expr></argument>, <argument pos:start="63:30" pos:end="63:55"><expr pos:start="63:30" pos:end="63:55"><name pos:start="63:30" pos:end="63:38">MAX_TERMS</name> <operator pos:start="63:40" pos:end="63:40">*</operator> <sizeof pos:start="63:42" pos:end="63:55">sizeof<argument_list pos:start="63:48" pos:end="63:55">(<argument pos:start="63:49" pos:end="63:54"><expr pos:start="63:49" pos:end="63:54"><name pos:start="63:49" pos:end="63:54">Decorr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><call pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:14">memset</name><argument_list pos:start="65:15" pos:end="65:39">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:16">s</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:20">ch</name></name></expr></argument>, <argument pos:start="65:23" pos:end="65:23"><expr pos:start="65:23" pos:end="65:23"><literal type="number" pos:start="65:23" pos:end="65:23">0</literal></expr></argument>, <argument pos:start="65:26" pos:end="65:38"><expr pos:start="65:26" pos:end="65:38"><sizeof pos:start="65:26" pos:end="65:38">sizeof<argument_list pos:start="65:32" pos:end="65:38">(<argument pos:start="65:33" pos:end="65:37"><expr pos:start="65:33" pos:end="65:37"><name pos:start="65:33" pos:end="65:37"><name pos:start="65:33" pos:end="65:33">s</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:37">ch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:26"><expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:21">extra_bits</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <literal type="number" pos:start="67:25" pos:end="67:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:38"><expr pos:start="69:9" pos:end="69:37"><name pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:14">and</name></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <name pos:start="69:18" pos:end="69:22"><name pos:start="69:18" pos:end="69:18">s</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:22">or</name></name> <operator pos:start="69:24" pos:end="69:24">=</operator> <name pos:start="69:26" pos:end="69:33"><name pos:start="69:26" pos:end="69:26">s</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:33">shift</name></name> <operator pos:start="69:35" pos:end="69:35">=</operator> <literal type="number" pos:start="69:37" pos:end="69:37">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:25">got_extra_bits</name></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <literal type="number" pos:start="71:29" pos:end="71:29">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="91:5"><if pos:start="75:5" pos:end="87:5">if<condition pos:start="75:7" pos:end="75:21">(<expr pos:start="75:8" pos:end="75:20"><operator pos:start="75:8" pos:end="75:8">!</operator><name pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:10">wc</name><operator pos:start="75:11" pos:end="75:12">-&gt;</operator><name pos:start="75:13" pos:end="75:20">mkv_mode</name></name></expr>)</condition><block pos:start="75:22" pos:end="87:5">{<block_content pos:start="77:9" pos:end="85:9">

        <expr_stmt pos:start="77:9" pos:end="77:34"><expr pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:18">samples</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <call pos:start="77:22" pos:end="77:33"><name pos:start="77:22" pos:end="77:28">AV_RL32</name><argument_list pos:start="77:29" pos:end="77:33">(<argument pos:start="77:30" pos:end="77:32"><expr pos:start="77:30" pos:end="77:32"><name pos:start="77:30" pos:end="77:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="77:36" pos:end="77:44"><expr pos:start="77:36" pos:end="77:43"><name pos:start="77:36" pos:end="77:38">buf</name> <operator pos:start="77:40" pos:end="77:41">+=</operator> <literal type="number" pos:start="77:43" pos:end="77:43">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if<condition pos:start="79:11" pos:end="79:23">(<expr pos:start="79:12" pos:end="79:22"><operator pos:start="79:12" pos:end="79:12">!</operator><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:22">samples</name></name></expr>)</condition><block pos:start="79:24" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:21">

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><operator pos:start="81:13" pos:end="81:13">*</operator><name pos:start="81:14" pos:end="81:26">got_frame_ptr</name> <operator pos:start="81:28" pos:end="81:28">=</operator> <literal type="number" pos:start="81:30" pos:end="81:30">0</literal></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:21">return <expr pos:start="83:20" pos:end="83:20"><literal type="number" pos:start="83:20" pos:end="83:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if><else pos:start="87:6" pos:end="91:5">else<block pos:start="87:10" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:33">

        <expr_stmt pos:start="89:9" pos:end="89:33"><expr pos:start="89:9" pos:end="89:32"><name pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:18">samples</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:32"><name pos:start="89:22" pos:end="89:23">wc</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:32">samples</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:34"><expr pos:start="93:5" pos:end="93:33"><name pos:start="93:5" pos:end="93:18"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:18">frame_flags</name></name> <operator pos:start="93:20" pos:end="93:20">=</operator> <call pos:start="93:22" pos:end="93:33"><name pos:start="93:22" pos:end="93:28">AV_RL32</name><argument_list pos:start="93:29" pos:end="93:33">(<argument pos:start="93:30" pos:end="93:32"><expr pos:start="93:30" pos:end="93:32"><name pos:start="93:30" pos:end="93:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="93:36" pos:end="93:44"><expr pos:start="93:36" pos:end="93:43"><name pos:start="93:36" pos:end="93:38">buf</name> <operator pos:start="93:40" pos:end="93:41">+=</operator> <literal type="number" pos:start="93:43" pos:end="93:43">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="107:5"><if pos:start="95:5" pos:end="99:5">if<condition pos:start="95:7" pos:end="95:27">(<expr pos:start="95:8" pos:end="95:26"><name pos:start="95:8" pos:end="95:21"><name pos:start="95:8" pos:end="95:8">s</name><operator pos:start="95:9" pos:end="95:10">-&gt;</operator><name pos:start="95:11" pos:end="95:21">frame_flags</name></name><operator pos:start="95:22" pos:end="95:22">&amp;</operator><literal type="number" pos:start="95:23" pos:end="95:26">0x80</literal></expr>)</condition><block pos:start="95:28" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:46">

        <expr_stmt pos:start="97:9" pos:end="97:46"><expr pos:start="97:9" pos:end="97:45"><name pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:13">avctx</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:25">sample_fmt</name></name> <operator pos:start="97:27" pos:end="97:27">=</operator> <name pos:start="97:29" pos:end="97:45">AV_SAMPLE_FMT_FLT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="99:7" pos:end="103:5">else if<condition pos:start="99:14" pos:end="99:41">(<expr pos:start="99:15" pos:end="99:40"><operator pos:start="99:15" pos:end="99:15">(</operator><name pos:start="99:16" pos:end="99:29"><name pos:start="99:16" pos:end="99:16">s</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:29">frame_flags</name></name><operator pos:start="99:30" pos:end="99:30">&amp;</operator><literal type="number" pos:start="99:31" pos:end="99:34">0x03</literal><operator pos:start="99:35" pos:end="99:35">)</operator> <operator pos:start="99:37" pos:end="99:38">&lt;=</operator> <literal type="number" pos:start="99:40" pos:end="99:40">1</literal></expr>)</condition><block pos:start="99:42" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:46">

        <expr_stmt pos:start="101:9" pos:end="101:46"><expr pos:start="101:9" pos:end="101:45"><name pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:13">avctx</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:25">sample_fmt</name></name> <operator pos:start="101:27" pos:end="101:27">=</operator> <name pos:start="101:29" pos:end="101:45">AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="107:5">else <block pos:start="103:12" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:46">

        <expr_stmt pos:start="105:9" pos:end="105:46"><expr pos:start="105:9" pos:end="105:45"><name pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:13">avctx</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:25">sample_fmt</name></name> <operator pos:start="105:27" pos:end="105:27">=</operator> <name pos:start="105:29" pos:end="105:45">AV_SAMPLE_FMT_S32</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:53"><expr pos:start="109:5" pos:end="109:52"><name pos:start="109:5" pos:end="109:7">bpp</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:52"><name pos:start="109:11" pos:end="109:33">av_get_bytes_per_sample</name><argument_list pos:start="109:34" pos:end="109:52">(<argument pos:start="109:35" pos:end="109:51"><expr pos:start="109:35" pos:end="109:51"><name pos:start="109:35" pos:end="109:51"><name pos:start="109:35" pos:end="109:39">avctx</name><operator pos:start="109:40" pos:end="109:41">-&gt;</operator><name pos:start="109:42" pos:end="109:51">sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:54"><expr pos:start="111:5" pos:end="111:53"><name pos:start="111:5" pos:end="111:11">samples</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <operator pos:start="111:15" pos:end="111:15">(</operator><name pos:start="111:16" pos:end="111:22">uint8_t</name><operator pos:start="111:23" pos:end="111:23">*</operator><operator pos:start="111:24" pos:end="111:24">)</operator><name pos:start="111:25" pos:end="111:31">samples</name> <operator pos:start="111:33" pos:end="111:33">+</operator> <name pos:start="111:35" pos:end="111:37">bpp</name> <operator pos:start="111:39" pos:end="111:39">*</operator> <name pos:start="111:41" pos:end="111:53"><name pos:start="111:41" pos:end="111:42">wc</name><operator pos:start="111:43" pos:end="111:44">-&gt;</operator><name pos:start="111:45" pos:end="111:53">ch_offset</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:44"><expr pos:start="115:5" pos:end="115:43"><name pos:start="115:5" pos:end="115:13"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:13">stereo</name></name> <operator pos:start="115:15" pos:end="115:15">=</operator> <operator pos:start="115:17" pos:end="115:17">!</operator><operator pos:start="115:18" pos:end="115:18">(</operator><name pos:start="115:19" pos:end="115:32"><name pos:start="115:19" pos:end="115:19">s</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:32">frame_flags</name></name> <operator pos:start="115:34" pos:end="115:34">&amp;</operator> <name pos:start="115:36" pos:end="115:42">WV_MONO</name><operator pos:start="115:43" pos:end="115:43">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:70"><expr pos:start="117:5" pos:end="117:69"><name pos:start="117:5" pos:end="117:16"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:16">stereo_in</name></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <ternary pos:start="117:20" pos:end="117:69"><condition pos:start="117:20" pos:end="117:55"><expr pos:start="117:20" pos:end="117:53"><operator pos:start="117:20" pos:end="117:20">(</operator><name pos:start="117:21" pos:end="117:34"><name pos:start="117:21" pos:end="117:21">s</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:34">frame_flags</name></name> <operator pos:start="117:36" pos:end="117:36">&amp;</operator> <name pos:start="117:38" pos:end="117:52">WV_FALSE_STEREO</name><operator pos:start="117:53" pos:end="117:53">)</operator></expr> ?</condition><then pos:start="117:57" pos:end="117:57"> <expr pos:start="117:57" pos:end="117:57"><literal type="number" pos:start="117:57" pos:end="117:57">0</literal></expr> </then><else pos:start="117:59" pos:end="117:69">: <expr pos:start="117:61" pos:end="117:69"><name pos:start="117:61" pos:end="117:69"><name pos:start="117:61" pos:end="117:61">s</name><operator pos:start="117:62" pos:end="117:63">-&gt;</operator><name pos:start="117:64" pos:end="117:69">stereo</name></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:48"><expr pos:start="119:5" pos:end="119:47"><name pos:start="119:5" pos:end="119:12"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:12">joint</name></name> <operator pos:start="119:14" pos:end="119:14">=</operator> <name pos:start="119:16" pos:end="119:29"><name pos:start="119:16" pos:end="119:16">s</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:29">frame_flags</name></name> <operator pos:start="119:31" pos:end="119:31">&amp;</operator> <name pos:start="119:33" pos:end="119:47">WV_JOINT_STEREO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:48"><expr pos:start="121:5" pos:end="121:47"><name pos:start="121:5" pos:end="121:13"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:13">hybrid</name></name> <operator pos:start="121:15" pos:end="121:15">=</operator> <name pos:start="121:17" pos:end="121:30"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:30">frame_flags</name></name> <operator pos:start="121:32" pos:end="121:32">&amp;</operator> <name pos:start="121:34" pos:end="121:47">WV_HYBRID_MODE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:59"><expr pos:start="123:5" pos:end="123:58"><name pos:start="123:5" pos:end="123:21"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:21">hybrid_bitrate</name></name> <operator pos:start="123:23" pos:end="123:23">=</operator> <name pos:start="123:25" pos:end="123:38"><name pos:start="123:25" pos:end="123:25">s</name><operator pos:start="123:26" pos:end="123:27">-&gt;</operator><name pos:start="123:28" pos:end="123:38">frame_flags</name></name> <operator pos:start="123:40" pos:end="123:40">&amp;</operator> <name pos:start="123:42" pos:end="123:58">WV_HYBRID_BITRATE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:72"><expr pos:start="125:5" pos:end="125:71"><name pos:start="125:5" pos:end="125:21"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:21">hybrid_maxclip</name></name> <operator pos:start="125:23" pos:end="125:23">=</operator> <literal type="number" pos:start="125:25" pos:end="125:25">1</literal> <operator pos:start="125:27" pos:end="125:28">&lt;&lt;</operator> <operator pos:start="125:30" pos:end="125:30">(</operator><operator pos:start="125:31" pos:end="125:31">(</operator><operator pos:start="125:32" pos:end="125:32">(</operator><operator pos:start="125:33" pos:end="125:33">(</operator><name pos:start="125:34" pos:end="125:47"><name pos:start="125:34" pos:end="125:34">s</name><operator pos:start="125:35" pos:end="125:36">-&gt;</operator><name pos:start="125:37" pos:end="125:47">frame_flags</name></name> <operator pos:start="125:49" pos:end="125:49">&amp;</operator> <literal type="number" pos:start="125:51" pos:end="125:54">0x03</literal><operator pos:start="125:55" pos:end="125:55">)</operator> <operator pos:start="125:57" pos:end="125:57">+</operator> <literal type="number" pos:start="125:59" pos:end="125:59">1</literal><operator pos:start="125:60" pos:end="125:60">)</operator> <operator pos:start="125:62" pos:end="125:63">&lt;&lt;</operator> <literal type="number" pos:start="125:65" pos:end="125:65">3</literal><operator pos:start="125:66" pos:end="125:66">)</operator> <operator pos:start="125:68" pos:end="125:68">-</operator> <literal type="number" pos:start="125:70" pos:end="125:70">1</literal><operator pos:start="125:71" pos:end="125:71">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:88"><expr pos:start="127:5" pos:end="127:87"><name pos:start="127:5" pos:end="127:17"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:17">post_shift</name></name> <operator pos:start="127:19" pos:end="127:19">=</operator> <literal type="number" pos:start="127:21" pos:end="127:21">8</literal> <operator pos:start="127:23" pos:end="127:23">*</operator> <operator pos:start="127:25" pos:end="127:25">(</operator><name pos:start="127:26" pos:end="127:28">bpp</name><operator pos:start="127:29" pos:end="127:29">-</operator><literal type="number" pos:start="127:30" pos:end="127:31">1</literal><operator pos:start="127:31" pos:end="127:31">-</operator><operator pos:start="127:32" pos:end="127:32">(</operator><name pos:start="127:33" pos:end="127:46"><name pos:start="127:33" pos:end="127:33">s</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:46">frame_flags</name></name><operator pos:start="127:47" pos:end="127:47">&amp;</operator><literal type="number" pos:start="127:48" pos:end="127:51">0x03</literal><operator pos:start="127:52" pos:end="127:52">)</operator><operator pos:start="127:53" pos:end="127:53">)</operator> <operator pos:start="127:55" pos:end="127:55">+</operator> <operator pos:start="127:57" pos:end="127:57">(</operator><operator pos:start="127:58" pos:end="127:58">(</operator><name pos:start="127:59" pos:end="127:72"><name pos:start="127:59" pos:end="127:59">s</name><operator pos:start="127:60" pos:end="127:61">-&gt;</operator><name pos:start="127:62" pos:end="127:72">frame_flags</name></name> <operator pos:start="127:74" pos:end="127:75">&gt;&gt;</operator> <literal type="number" pos:start="127:77" pos:end="127:78">13</literal><operator pos:start="127:79" pos:end="127:79">)</operator> <operator pos:start="127:81" pos:end="127:81">&amp;</operator> <literal type="number" pos:start="127:83" pos:end="127:86">0x1f</literal><operator pos:start="127:87" pos:end="127:87">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:26"><expr pos:start="129:5" pos:end="129:25"><name pos:start="129:5" pos:end="129:10"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:10">CRC</name></name> <operator pos:start="129:12" pos:end="129:12">=</operator> <call pos:start="129:14" pos:end="129:25"><name pos:start="129:14" pos:end="129:20">AV_RL32</name><argument_list pos:start="129:21" pos:end="129:25">(<argument pos:start="129:22" pos:end="129:24"><expr pos:start="129:22" pos:end="129:24"><name pos:start="129:22" pos:end="129:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="129:28" pos:end="129:36"><expr pos:start="129:28" pos:end="129:35"><name pos:start="129:28" pos:end="129:30">buf</name> <operator pos:start="129:32" pos:end="129:33">+=</operator> <literal type="number" pos:start="129:35" pos:end="129:35">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="133:17"><if pos:start="131:5" pos:end="133:17">if<condition pos:start="131:7" pos:end="131:20">(<expr pos:start="131:8" pos:end="131:19"><name pos:start="131:8" pos:end="131:19"><name pos:start="131:8" pos:end="131:9">wc</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:19">mkv_mode</name></name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:17"><block_content pos:start="133:9" pos:end="133:17">

        <expr_stmt pos:start="133:9" pos:end="133:17"><expr pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:11">buf</name> <operator pos:start="133:13" pos:end="133:14">+=</operator> <literal type="number" pos:start="133:16" pos:end="133:16">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="133:19" pos:end="133:36">//skip block size;</comment>



    <expr_stmt pos:start="137:5" pos:end="137:35"><expr pos:start="137:5" pos:end="137:34"><name pos:start="137:5" pos:end="137:17"><name pos:start="137:5" pos:end="137:6">wc</name><operator pos:start="137:7" pos:end="137:8">-&gt;</operator><name pos:start="137:9" pos:end="137:17">ch_offset</name></name> <operator pos:start="137:19" pos:end="137:20">+=</operator> <literal type="number" pos:start="137:22" pos:end="137:24">1</literal> <operator pos:start="137:24" pos:end="137:24">+</operator> <name pos:start="137:26" pos:end="137:34"><name pos:start="137:26" pos:end="137:26">s</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:34">stereo</name></name></expr>;</expr_stmt>



    <comment type="line" pos:start="141:5" pos:end="141:28">// parse metadata blocks</comment>

    <while pos:start="143:5" pos:end="595:5">while<condition pos:start="143:10" pos:end="143:24">(<expr pos:start="143:11" pos:end="143:23"><name pos:start="143:11" pos:end="143:13">buf</name> <operator pos:start="143:15" pos:end="143:15">&lt;</operator> <name pos:start="143:17" pos:end="143:23">buf_end</name></expr>)</condition><block pos:start="143:25" pos:end="595:5">{<block_content pos:start="145:9" pos:end="593:34">

        <expr_stmt pos:start="145:9" pos:end="145:20"><expr pos:start="145:9" pos:end="145:19"><name pos:start="145:9" pos:end="145:10">id</name> <operator pos:start="145:12" pos:end="145:12">=</operator> <operator pos:start="145:14" pos:end="145:14">*</operator><name pos:start="145:15" pos:end="145:17">buf</name><operator pos:start="145:18" pos:end="145:19">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:22"><expr pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:12">size</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <operator pos:start="147:16" pos:end="147:16">*</operator><name pos:start="147:17" pos:end="147:19">buf</name><operator pos:start="147:20" pos:end="147:21">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if<condition pos:start="149:11" pos:end="149:28">(<expr pos:start="149:12" pos:end="149:27"><name pos:start="149:12" pos:end="149:13">id</name> <operator pos:start="149:15" pos:end="149:15">&amp;</operator> <name pos:start="149:17" pos:end="149:27">WP_IDF_LONG</name></expr>)</condition> <block pos:start="149:30" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:35">

            <expr_stmt pos:start="151:13" pos:end="151:34"><expr pos:start="151:13" pos:end="151:33"><name pos:start="151:13" pos:end="151:16">size</name> <operator pos:start="151:18" pos:end="151:19">|=</operator> <operator pos:start="151:21" pos:end="151:21">(</operator><operator pos:start="151:22" pos:end="151:22">*</operator><name pos:start="151:23" pos:end="151:25">buf</name><operator pos:start="151:26" pos:end="151:27">++</operator><operator pos:start="151:28" pos:end="151:28">)</operator> <operator pos:start="151:30" pos:end="151:31">&lt;&lt;</operator> <literal type="number" pos:start="151:33" pos:end="151:33">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:35"><expr pos:start="153:13" pos:end="153:34"><name pos:start="153:13" pos:end="153:16">size</name> <operator pos:start="153:18" pos:end="153:19">|=</operator> <operator pos:start="153:21" pos:end="153:21">(</operator><operator pos:start="153:22" pos:end="153:22">*</operator><name pos:start="153:23" pos:end="153:25">buf</name><operator pos:start="153:26" pos:end="153:27">++</operator><operator pos:start="153:28" pos:end="153:28">)</operator> <operator pos:start="153:30" pos:end="153:31">&lt;&lt;</operator> <literal type="number" pos:start="153:33" pos:end="153:34">16</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:19"><expr pos:start="157:9" pos:end="157:18"><name pos:start="157:9" pos:end="157:12">size</name> <operator pos:start="157:14" pos:end="157:16">&lt;&lt;=</operator> <literal type="number" pos:start="157:18" pos:end="157:18">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="157:21" pos:end="157:49">// size is specified in words</comment>

        <expr_stmt pos:start="159:9" pos:end="159:21"><expr pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:13">ssize</name> <operator pos:start="159:15" pos:end="159:15">=</operator> <name pos:start="159:17" pos:end="159:20">size</name></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="161:35"><if pos:start="161:9" pos:end="161:35">if<condition pos:start="161:11" pos:end="161:27">(<expr pos:start="161:12" pos:end="161:26"><name pos:start="161:12" pos:end="161:13">id</name> <operator pos:start="161:15" pos:end="161:15">&amp;</operator> <name pos:start="161:17" pos:end="161:26">WP_IDF_ODD</name></expr>)</condition><block type="pseudo" pos:start="161:29" pos:end="161:35"><block_content pos:start="161:29" pos:end="161:35"> <expr_stmt pos:start="161:29" pos:end="161:35"><expr pos:start="161:29" pos:end="161:34"><name pos:start="161:29" pos:end="161:32">size</name><operator pos:start="161:33" pos:end="161:34">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="163:9" pos:end="169:9"><if pos:start="163:9" pos:end="169:9">if<condition pos:start="163:11" pos:end="163:20">(<expr pos:start="163:12" pos:end="163:19"><name pos:start="163:12" pos:end="163:15">size</name> <operator pos:start="163:17" pos:end="163:17">&lt;</operator> <literal type="number" pos:start="163:19" pos:end="163:19">0</literal></expr>)</condition><block pos:start="163:21" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:18">

            <expr_stmt pos:start="165:13" pos:end="165:93"><expr pos:start="165:13" pos:end="165:92"><call pos:start="165:13" pos:end="165:92"><name pos:start="165:13" pos:end="165:18">av_log</name><argument_list pos:start="165:19" pos:end="165:92">(<argument pos:start="165:20" pos:end="165:24"><expr pos:start="165:20" pos:end="165:24"><name pos:start="165:20" pos:end="165:24">avctx</name></expr></argument>, <argument pos:start="165:27" pos:end="165:38"><expr pos:start="165:27" pos:end="165:38"><name pos:start="165:27" pos:end="165:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:41" pos:end="165:81"><expr pos:start="165:41" pos:end="165:81"><literal type="string" pos:start="165:41" pos:end="165:81">"Got incorrect block %02X with size %i\n"</literal></expr></argument>, <argument pos:start="165:84" pos:end="165:85"><expr pos:start="165:84" pos:end="165:85"><name pos:start="165:84" pos:end="165:85">id</name></expr></argument>, <argument pos:start="165:88" pos:end="165:91"><expr pos:start="165:88" pos:end="165:91"><name pos:start="165:88" pos:end="165:91">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="167:13" pos:end="167:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="171:9" pos:end="177:9"><if pos:start="171:9" pos:end="177:9">if<condition pos:start="171:11" pos:end="171:33">(<expr pos:start="171:12" pos:end="171:32"><name pos:start="171:12" pos:end="171:14">buf</name> <operator pos:start="171:16" pos:end="171:16">+</operator> <name pos:start="171:18" pos:end="171:22">ssize</name> <operator pos:start="171:24" pos:end="171:24">&gt;</operator> <name pos:start="171:26" pos:end="171:32">buf_end</name></expr>)</condition><block pos:start="171:34" pos:end="177:9">{<block_content pos:start="173:13" pos:end="175:18">

            <expr_stmt pos:start="173:13" pos:end="173:82"><expr pos:start="173:13" pos:end="173:81"><call pos:start="173:13" pos:end="173:81"><name pos:start="173:13" pos:end="173:18">av_log</name><argument_list pos:start="173:19" pos:end="173:81">(<argument pos:start="173:20" pos:end="173:24"><expr pos:start="173:20" pos:end="173:24"><name pos:start="173:20" pos:end="173:24">avctx</name></expr></argument>, <argument pos:start="173:27" pos:end="173:38"><expr pos:start="173:27" pos:end="173:38"><name pos:start="173:27" pos:end="173:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="173:41" pos:end="173:74"><expr pos:start="173:41" pos:end="173:74"><literal type="string" pos:start="173:41" pos:end="173:74">"Block size %i is out of bounds\n"</literal></expr></argument>, <argument pos:start="173:77" pos:end="173:80"><expr pos:start="173:77" pos:end="173:80"><name pos:start="173:77" pos:end="173:80">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="175:13" pos:end="175:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="179:9" pos:end="185:9"><if pos:start="179:9" pos:end="185:9">if<condition pos:start="179:11" pos:end="179:30">(<expr pos:start="179:12" pos:end="179:29"><name pos:start="179:12" pos:end="179:13">id</name> <operator pos:start="179:15" pos:end="179:15">&amp;</operator> <name pos:start="179:17" pos:end="179:29">WP_IDF_IGNORE</name></expr>)</condition><block pos:start="179:31" pos:end="185:9">{<block_content pos:start="181:13" pos:end="183:21">

            <expr_stmt pos:start="181:13" pos:end="181:25"><expr pos:start="181:13" pos:end="181:24"><name pos:start="181:13" pos:end="181:15">buf</name> <operator pos:start="181:17" pos:end="181:18">+=</operator> <name pos:start="181:20" pos:end="181:24">ssize</name></expr>;</expr_stmt>

            <continue pos:start="183:13" pos:end="183:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="187:9" pos:end="591:9">switch<condition pos:start="187:15" pos:end="187:32">(<expr pos:start="187:16" pos:end="187:31"><name pos:start="187:16" pos:end="187:17">id</name> <operator pos:start="187:19" pos:end="187:19">&amp;</operator> <name pos:start="187:21" pos:end="187:31">WP_IDF_MASK</name></expr>)</condition><block pos:start="187:33" pos:end="591:9">{<block_content pos:start="189:9" pos:end="589:24">

        <case pos:start="189:9" pos:end="189:28">case <expr pos:start="189:14" pos:end="189:27"><name pos:start="189:14" pos:end="189:27">WP_ID_DECTERMS</name></expr>:</case>

            <if_stmt pos:start="191:13" pos:end="201:13"><if pos:start="191:13" pos:end="201:13">if<condition pos:start="191:15" pos:end="191:32">(<expr pos:start="191:16" pos:end="191:31"><name pos:start="191:16" pos:end="191:19">size</name> <operator pos:start="191:21" pos:end="191:21">&gt;</operator> <name pos:start="191:23" pos:end="191:31">MAX_TERMS</name></expr>)</condition><block pos:start="191:33" pos:end="201:13">{<block_content pos:start="193:17" pos:end="199:25">

                <expr_stmt pos:start="193:17" pos:end="193:78"><expr pos:start="193:17" pos:end="193:77"><call pos:start="193:17" pos:end="193:77"><name pos:start="193:17" pos:end="193:22">av_log</name><argument_list pos:start="193:23" pos:end="193:77">(<argument pos:start="193:24" pos:end="193:28"><expr pos:start="193:24" pos:end="193:28"><name pos:start="193:24" pos:end="193:28">avctx</name></expr></argument>, <argument pos:start="193:31" pos:end="193:42"><expr pos:start="193:31" pos:end="193:42"><name pos:start="193:31" pos:end="193:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:45" pos:end="193:76"><expr pos:start="193:45" pos:end="193:76"><literal type="string" pos:start="193:45" pos:end="193:76">"Too many decorrelation terms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:29"><expr pos:start="195:17" pos:end="195:28"><name pos:start="195:17" pos:end="195:24"><name pos:start="195:17" pos:end="195:17">s</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:24">terms</name></name> <operator pos:start="195:26" pos:end="195:26">=</operator> <literal type="number" pos:start="195:28" pos:end="195:28">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:29"><expr pos:start="197:17" pos:end="197:28"><name pos:start="197:17" pos:end="197:19">buf</name> <operator pos:start="197:21" pos:end="197:22">+=</operator> <name pos:start="197:24" pos:end="197:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="199:17" pos:end="199:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:28"><expr pos:start="203:13" pos:end="203:27"><name pos:start="203:13" pos:end="203:20"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:20">terms</name></name> <operator pos:start="203:22" pos:end="203:22">=</operator> <name pos:start="203:24" pos:end="203:27">size</name></expr>;</expr_stmt>

            <for pos:start="205:13" pos:end="213:13">for<control pos:start="205:16" pos:end="205:41">(<init pos:start="205:17" pos:end="205:22"><expr pos:start="205:17" pos:end="205:21"><name pos:start="205:17" pos:end="205:17">i</name> <operator pos:start="205:19" pos:end="205:19">=</operator> <literal type="number" pos:start="205:21" pos:end="205:21">0</literal></expr>;</init> <condition pos:start="205:24" pos:end="205:36"><expr pos:start="205:24" pos:end="205:35"><name pos:start="205:24" pos:end="205:24">i</name> <operator pos:start="205:26" pos:end="205:26">&lt;</operator> <name pos:start="205:28" pos:end="205:35"><name pos:start="205:28" pos:end="205:28">s</name><operator pos:start="205:29" pos:end="205:30">-&gt;</operator><name pos:start="205:31" pos:end="205:35">terms</name></name></expr>;</condition> <incr pos:start="205:38" pos:end="205:40"><expr pos:start="205:38" pos:end="205:40"><name pos:start="205:38" pos:end="205:38">i</name><operator pos:start="205:39" pos:end="205:40">++</operator></expr></incr>)</control> <block pos:start="205:43" pos:end="213:13">{<block_content pos:start="207:17" pos:end="211:22">

                <expr_stmt pos:start="207:17" pos:end="207:70"><expr pos:start="207:17" pos:end="207:69"><name pos:start="207:17" pos:end="207:43"><name pos:start="207:17" pos:end="207:17">s</name><operator pos:start="207:18" pos:end="207:19">-&gt;</operator><name pos:start="207:20" pos:end="207:25">decorr</name><index pos:start="207:26" pos:end="207:43">[<expr pos:start="207:27" pos:end="207:42"><name pos:start="207:27" pos:end="207:34"><name pos:start="207:27" pos:end="207:27">s</name><operator pos:start="207:28" pos:end="207:29">-&gt;</operator><name pos:start="207:30" pos:end="207:34">terms</name></name> <operator pos:start="207:36" pos:end="207:36">-</operator> <name pos:start="207:38" pos:end="207:38">i</name> <operator pos:start="207:40" pos:end="207:40">-</operator> <literal type="number" pos:start="207:42" pos:end="207:42">1</literal></expr>]</index></name><operator pos:start="207:44" pos:end="207:44">.</operator><name pos:start="207:45" pos:end="207:49">value</name> <operator pos:start="207:51" pos:end="207:51">=</operator> <operator pos:start="207:53" pos:end="207:53">(</operator><operator pos:start="207:54" pos:end="207:54">*</operator><name pos:start="207:55" pos:end="207:57">buf</name> <operator pos:start="207:59" pos:end="207:59">&amp;</operator> <literal type="number" pos:start="207:61" pos:end="207:64">0x1F</literal><operator pos:start="207:65" pos:end="207:65">)</operator> <operator pos:start="207:67" pos:end="207:67">-</operator> <literal type="number" pos:start="207:69" pos:end="207:69">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:62"><expr pos:start="209:17" pos:end="209:61"><name pos:start="209:17" pos:end="209:43"><name pos:start="209:17" pos:end="209:17">s</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:25">decorr</name><index pos:start="209:26" pos:end="209:43">[<expr pos:start="209:27" pos:end="209:42"><name pos:start="209:27" pos:end="209:34"><name pos:start="209:27" pos:end="209:27">s</name><operator pos:start="209:28" pos:end="209:29">-&gt;</operator><name pos:start="209:30" pos:end="209:34">terms</name></name> <operator pos:start="209:36" pos:end="209:36">-</operator> <name pos:start="209:38" pos:end="209:38">i</name> <operator pos:start="209:40" pos:end="209:40">-</operator> <literal type="number" pos:start="209:42" pos:end="209:42">1</literal></expr>]</index></name><operator pos:start="209:44" pos:end="209:44">.</operator><name pos:start="209:45" pos:end="209:49">delta</name> <operator pos:start="209:51" pos:end="209:51">=</operator> <operator pos:start="209:53" pos:end="209:53">*</operator><name pos:start="209:54" pos:end="209:56">buf</name> <operator pos:start="209:58" pos:end="209:59">&gt;&gt;</operator> <literal type="number" pos:start="209:61" pos:end="209:61">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:22"><expr pos:start="211:17" pos:end="211:21"><name pos:start="211:17" pos:end="211:19">buf</name><operator pos:start="211:20" pos:end="211:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="215:13" pos:end="215:26"><expr pos:start="215:13" pos:end="215:25"><name pos:start="215:13" pos:end="215:21">got_terms</name> <operator pos:start="215:23" pos:end="215:23">=</operator> <literal type="number" pos:start="215:25" pos:end="215:25">1</literal></expr>;</expr_stmt>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        <case pos:start="219:9" pos:end="219:30">case <expr pos:start="219:14" pos:end="219:29"><name pos:start="219:14" pos:end="219:29">WP_ID_DECWEIGHTS</name></expr>:</case>

            <if_stmt pos:start="221:13" pos:end="227:13"><if pos:start="221:13" pos:end="227:13">if<condition pos:start="221:15" pos:end="221:26">(<expr pos:start="221:16" pos:end="221:25"><operator pos:start="221:16" pos:end="221:16">!</operator><name pos:start="221:17" pos:end="221:25">got_terms</name></expr>)</condition><block pos:start="221:27" pos:end="227:13">{<block_content pos:start="223:17" pos:end="225:25">

                <expr_stmt pos:start="223:17" pos:end="223:76"><expr pos:start="223:17" pos:end="223:75"><call pos:start="223:17" pos:end="223:75"><name pos:start="223:17" pos:end="223:22">av_log</name><argument_list pos:start="223:23" pos:end="223:75">(<argument pos:start="223:24" pos:end="223:28"><expr pos:start="223:24" pos:end="223:28"><name pos:start="223:24" pos:end="223:28">avctx</name></expr></argument>, <argument pos:start="223:31" pos:end="223:42"><expr pos:start="223:31" pos:end="223:42"><name pos:start="223:31" pos:end="223:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="223:45" pos:end="223:74"><expr pos:start="223:45" pos:end="223:74"><literal type="string" pos:start="223:45" pos:end="223:74">"No decorrelation terms met\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="225:17" pos:end="225:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:43"><expr pos:start="229:13" pos:end="229:42"><name pos:start="229:13" pos:end="229:19">weights</name> <operator pos:start="229:21" pos:end="229:21">=</operator> <name pos:start="229:23" pos:end="229:26">size</name> <operator pos:start="229:28" pos:end="229:29">&gt;&gt;</operator> <name pos:start="229:31" pos:end="229:42"><name pos:start="229:31" pos:end="229:31">s</name><operator pos:start="229:32" pos:end="229:33">-&gt;</operator><name pos:start="229:34" pos:end="229:42">stereo_in</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="239:13"><if pos:start="231:13" pos:end="239:13">if<condition pos:start="231:15" pos:end="231:57">(<expr pos:start="231:16" pos:end="231:56"><name pos:start="231:16" pos:end="231:22">weights</name> <operator pos:start="231:24" pos:end="231:24">&gt;</operator> <name pos:start="231:26" pos:end="231:34">MAX_TERMS</name> <operator pos:start="231:36" pos:end="231:37">||</operator> <name pos:start="231:39" pos:end="231:45">weights</name> <operator pos:start="231:47" pos:end="231:47">&gt;</operator> <name pos:start="231:49" pos:end="231:56"><name pos:start="231:49" pos:end="231:49">s</name><operator pos:start="231:50" pos:end="231:51">-&gt;</operator><name pos:start="231:52" pos:end="231:56">terms</name></name></expr>)</condition><block pos:start="231:58" pos:end="239:13">{<block_content pos:start="233:17" pos:end="237:25">

                <expr_stmt pos:start="233:17" pos:end="233:80"><expr pos:start="233:17" pos:end="233:79"><call pos:start="233:17" pos:end="233:79"><name pos:start="233:17" pos:end="233:22">av_log</name><argument_list pos:start="233:23" pos:end="233:79">(<argument pos:start="233:24" pos:end="233:28"><expr pos:start="233:24" pos:end="233:28"><name pos:start="233:24" pos:end="233:28">avctx</name></expr></argument>, <argument pos:start="233:31" pos:end="233:42"><expr pos:start="233:31" pos:end="233:42"><name pos:start="233:31" pos:end="233:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:45" pos:end="233:78"><expr pos:start="233:45" pos:end="233:78"><literal type="string" pos:start="233:45" pos:end="233:78">"Too many decorrelation weights\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:29"><expr pos:start="235:17" pos:end="235:28"><name pos:start="235:17" pos:end="235:19">buf</name> <operator pos:start="235:21" pos:end="235:22">+=</operator> <name pos:start="235:24" pos:end="235:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="237:17" pos:end="237:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <for pos:start="241:13" pos:end="263:13">for<control pos:start="241:16" pos:end="241:40">(<init pos:start="241:17" pos:end="241:22"><expr pos:start="241:17" pos:end="241:21"><name pos:start="241:17" pos:end="241:17">i</name> <operator pos:start="241:19" pos:end="241:19">=</operator> <literal type="number" pos:start="241:21" pos:end="241:21">0</literal></expr>;</init> <condition pos:start="241:24" pos:end="241:35"><expr pos:start="241:24" pos:end="241:34"><name pos:start="241:24" pos:end="241:24">i</name> <operator pos:start="241:26" pos:end="241:26">&lt;</operator> <name pos:start="241:28" pos:end="241:34">weights</name></expr>;</condition> <incr pos:start="241:37" pos:end="241:39"><expr pos:start="241:37" pos:end="241:39"><name pos:start="241:37" pos:end="241:37">i</name><operator pos:start="241:38" pos:end="241:39">++</operator></expr></incr>)</control> <block pos:start="241:42" pos:end="263:13">{<block_content pos:start="243:17" pos:end="261:17">

                <expr_stmt pos:start="243:17" pos:end="243:37"><expr pos:start="243:17" pos:end="243:36"><name pos:start="243:17" pos:end="243:17">t</name> <operator pos:start="243:19" pos:end="243:19">=</operator> <operator pos:start="243:21" pos:end="243:21">(</operator><name pos:start="243:22" pos:end="243:27">int8_t</name><operator pos:start="243:28" pos:end="243:28">)</operator><operator pos:start="243:29" pos:end="243:29">(</operator><operator pos:start="243:30" pos:end="243:30">*</operator><name pos:start="243:31" pos:end="243:33">buf</name><operator pos:start="243:34" pos:end="243:35">++</operator><operator pos:start="243:36" pos:end="243:36">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:61"><expr pos:start="245:17" pos:end="245:60"><name pos:start="245:17" pos:end="245:43"><name pos:start="245:17" pos:end="245:17">s</name><operator pos:start="245:18" pos:end="245:19">-&gt;</operator><name pos:start="245:20" pos:end="245:25">decorr</name><index pos:start="245:26" pos:end="245:43">[<expr pos:start="245:27" pos:end="245:42"><name pos:start="245:27" pos:end="245:34"><name pos:start="245:27" pos:end="245:27">s</name><operator pos:start="245:28" pos:end="245:29">-&gt;</operator><name pos:start="245:30" pos:end="245:34">terms</name></name> <operator pos:start="245:36" pos:end="245:36">-</operator> <name pos:start="245:38" pos:end="245:38">i</name> <operator pos:start="245:40" pos:end="245:40">-</operator> <literal type="number" pos:start="245:42" pos:end="245:42">1</literal></expr>]</index></name><operator pos:start="245:44" pos:end="245:44">.</operator><name pos:start="245:45" pos:end="245:51">weightA</name> <operator pos:start="245:53" pos:end="245:53">=</operator> <name pos:start="245:55" pos:end="245:55">t</name> <operator pos:start="245:57" pos:end="245:58">&lt;&lt;</operator> <literal type="number" pos:start="245:60" pos:end="245:60">3</literal></expr>;</expr_stmt>

                <if_stmt pos:start="247:17" pos:end="249:107"><if pos:start="247:17" pos:end="249:107">if<condition pos:start="247:19" pos:end="247:59">(<expr pos:start="247:20" pos:end="247:58"><name pos:start="247:20" pos:end="247:46"><name pos:start="247:20" pos:end="247:20">s</name><operator pos:start="247:21" pos:end="247:22">-&gt;</operator><name pos:start="247:23" pos:end="247:28">decorr</name><index pos:start="247:29" pos:end="247:46">[<expr pos:start="247:30" pos:end="247:45"><name pos:start="247:30" pos:end="247:37"><name pos:start="247:30" pos:end="247:30">s</name><operator pos:start="247:31" pos:end="247:32">-&gt;</operator><name pos:start="247:33" pos:end="247:37">terms</name></name> <operator pos:start="247:39" pos:end="247:39">-</operator> <name pos:start="247:41" pos:end="247:41">i</name> <operator pos:start="247:43" pos:end="247:43">-</operator> <literal type="number" pos:start="247:45" pos:end="247:45">1</literal></expr>]</index></name><operator pos:start="247:47" pos:end="247:47">.</operator><name pos:start="247:48" pos:end="247:54">weightA</name> <operator pos:start="247:56" pos:end="247:56">&gt;</operator> <literal type="number" pos:start="247:58" pos:end="247:58">0</literal></expr>)</condition><block type="pseudo" pos:start="249:21" pos:end="249:107"><block_content pos:start="249:21" pos:end="249:107">

                    <expr_stmt pos:start="249:21" pos:end="249:107"><expr pos:start="249:21" pos:end="249:106"><name pos:start="249:21" pos:end="249:47"><name pos:start="249:21" pos:end="249:21">s</name><operator pos:start="249:22" pos:end="249:23">-&gt;</operator><name pos:start="249:24" pos:end="249:29">decorr</name><index pos:start="249:30" pos:end="249:47">[<expr pos:start="249:31" pos:end="249:46"><name pos:start="249:31" pos:end="249:38"><name pos:start="249:31" pos:end="249:31">s</name><operator pos:start="249:32" pos:end="249:33">-&gt;</operator><name pos:start="249:34" pos:end="249:38">terms</name></name> <operator pos:start="249:40" pos:end="249:40">-</operator> <name pos:start="249:42" pos:end="249:42">i</name> <operator pos:start="249:44" pos:end="249:44">-</operator> <literal type="number" pos:start="249:46" pos:end="249:46">1</literal></expr>]</index></name><operator pos:start="249:48" pos:end="249:48">.</operator><name pos:start="249:49" pos:end="249:55">weightA</name> <operator pos:start="249:57" pos:end="249:58">+=</operator> <operator pos:start="249:60" pos:end="249:60">(</operator><name pos:start="249:61" pos:end="249:87"><name pos:start="249:61" pos:end="249:61">s</name><operator pos:start="249:62" pos:end="249:63">-&gt;</operator><name pos:start="249:64" pos:end="249:69">decorr</name><index pos:start="249:70" pos:end="249:87">[<expr pos:start="249:71" pos:end="249:86"><name pos:start="249:71" pos:end="249:78"><name pos:start="249:71" pos:end="249:71">s</name><operator pos:start="249:72" pos:end="249:73">-&gt;</operator><name pos:start="249:74" pos:end="249:78">terms</name></name> <operator pos:start="249:80" pos:end="249:80">-</operator> <name pos:start="249:82" pos:end="249:82">i</name> <operator pos:start="249:84" pos:end="249:84">-</operator> <literal type="number" pos:start="249:86" pos:end="249:86">1</literal></expr>]</index></name><operator pos:start="249:88" pos:end="249:88">.</operator><name pos:start="249:89" pos:end="249:95">weightA</name> <operator pos:start="249:97" pos:end="249:97">+</operator> <literal type="number" pos:start="249:99" pos:end="249:100">64</literal><operator pos:start="249:101" pos:end="249:101">)</operator> <operator pos:start="249:103" pos:end="249:104">&gt;&gt;</operator> <literal type="number" pos:start="249:106" pos:end="249:106">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="251:17" pos:end="261:17"><if pos:start="251:17" pos:end="261:17">if<condition pos:start="251:19" pos:end="251:32">(<expr pos:start="251:20" pos:end="251:31"><name pos:start="251:20" pos:end="251:31"><name pos:start="251:20" pos:end="251:20">s</name><operator pos:start="251:21" pos:end="251:22">-&gt;</operator><name pos:start="251:23" pos:end="251:31">stereo_in</name></name></expr>)</condition><block pos:start="251:33" pos:end="261:17">{<block_content pos:start="253:21" pos:end="259:111">

                    <expr_stmt pos:start="253:21" pos:end="253:41"><expr pos:start="253:21" pos:end="253:40"><name pos:start="253:21" pos:end="253:21">t</name> <operator pos:start="253:23" pos:end="253:23">=</operator> <operator pos:start="253:25" pos:end="253:25">(</operator><name pos:start="253:26" pos:end="253:31">int8_t</name><operator pos:start="253:32" pos:end="253:32">)</operator><operator pos:start="253:33" pos:end="253:33">(</operator><operator pos:start="253:34" pos:end="253:34">*</operator><name pos:start="253:35" pos:end="253:37">buf</name><operator pos:start="253:38" pos:end="253:39">++</operator><operator pos:start="253:40" pos:end="253:40">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="255:21" pos:end="255:65"><expr pos:start="255:21" pos:end="255:64"><name pos:start="255:21" pos:end="255:47"><name pos:start="255:21" pos:end="255:21">s</name><operator pos:start="255:22" pos:end="255:23">-&gt;</operator><name pos:start="255:24" pos:end="255:29">decorr</name><index pos:start="255:30" pos:end="255:47">[<expr pos:start="255:31" pos:end="255:46"><name pos:start="255:31" pos:end="255:38"><name pos:start="255:31" pos:end="255:31">s</name><operator pos:start="255:32" pos:end="255:33">-&gt;</operator><name pos:start="255:34" pos:end="255:38">terms</name></name> <operator pos:start="255:40" pos:end="255:40">-</operator> <name pos:start="255:42" pos:end="255:42">i</name> <operator pos:start="255:44" pos:end="255:44">-</operator> <literal type="number" pos:start="255:46" pos:end="255:46">1</literal></expr>]</index></name><operator pos:start="255:48" pos:end="255:48">.</operator><name pos:start="255:49" pos:end="255:55">weightB</name> <operator pos:start="255:57" pos:end="255:57">=</operator> <name pos:start="255:59" pos:end="255:59">t</name> <operator pos:start="255:61" pos:end="255:62">&lt;&lt;</operator> <literal type="number" pos:start="255:64" pos:end="255:64">3</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="257:21" pos:end="259:111"><if pos:start="257:21" pos:end="259:111">if<condition pos:start="257:23" pos:end="257:63">(<expr pos:start="257:24" pos:end="257:62"><name pos:start="257:24" pos:end="257:50"><name pos:start="257:24" pos:end="257:24">s</name><operator pos:start="257:25" pos:end="257:26">-&gt;</operator><name pos:start="257:27" pos:end="257:32">decorr</name><index pos:start="257:33" pos:end="257:50">[<expr pos:start="257:34" pos:end="257:49"><name pos:start="257:34" pos:end="257:41"><name pos:start="257:34" pos:end="257:34">s</name><operator pos:start="257:35" pos:end="257:36">-&gt;</operator><name pos:start="257:37" pos:end="257:41">terms</name></name> <operator pos:start="257:43" pos:end="257:43">-</operator> <name pos:start="257:45" pos:end="257:45">i</name> <operator pos:start="257:47" pos:end="257:47">-</operator> <literal type="number" pos:start="257:49" pos:end="257:49">1</literal></expr>]</index></name><operator pos:start="257:51" pos:end="257:51">.</operator><name pos:start="257:52" pos:end="257:58">weightB</name> <operator pos:start="257:60" pos:end="257:60">&gt;</operator> <literal type="number" pos:start="257:62" pos:end="257:62">0</literal></expr>)</condition><block type="pseudo" pos:start="259:25" pos:end="259:111"><block_content pos:start="259:25" pos:end="259:111">

                        <expr_stmt pos:start="259:25" pos:end="259:111"><expr pos:start="259:25" pos:end="259:110"><name pos:start="259:25" pos:end="259:51"><name pos:start="259:25" pos:end="259:25">s</name><operator pos:start="259:26" pos:end="259:27">-&gt;</operator><name pos:start="259:28" pos:end="259:33">decorr</name><index pos:start="259:34" pos:end="259:51">[<expr pos:start="259:35" pos:end="259:50"><name pos:start="259:35" pos:end="259:42"><name pos:start="259:35" pos:end="259:35">s</name><operator pos:start="259:36" pos:end="259:37">-&gt;</operator><name pos:start="259:38" pos:end="259:42">terms</name></name> <operator pos:start="259:44" pos:end="259:44">-</operator> <name pos:start="259:46" pos:end="259:46">i</name> <operator pos:start="259:48" pos:end="259:48">-</operator> <literal type="number" pos:start="259:50" pos:end="259:50">1</literal></expr>]</index></name><operator pos:start="259:52" pos:end="259:52">.</operator><name pos:start="259:53" pos:end="259:59">weightB</name> <operator pos:start="259:61" pos:end="259:62">+=</operator> <operator pos:start="259:64" pos:end="259:64">(</operator><name pos:start="259:65" pos:end="259:91"><name pos:start="259:65" pos:end="259:65">s</name><operator pos:start="259:66" pos:end="259:67">-&gt;</operator><name pos:start="259:68" pos:end="259:73">decorr</name><index pos:start="259:74" pos:end="259:91">[<expr pos:start="259:75" pos:end="259:90"><name pos:start="259:75" pos:end="259:82"><name pos:start="259:75" pos:end="259:75">s</name><operator pos:start="259:76" pos:end="259:77">-&gt;</operator><name pos:start="259:78" pos:end="259:82">terms</name></name> <operator pos:start="259:84" pos:end="259:84">-</operator> <name pos:start="259:86" pos:end="259:86">i</name> <operator pos:start="259:88" pos:end="259:88">-</operator> <literal type="number" pos:start="259:90" pos:end="259:90">1</literal></expr>]</index></name><operator pos:start="259:92" pos:end="259:92">.</operator><name pos:start="259:93" pos:end="259:99">weightB</name> <operator pos:start="259:101" pos:end="259:101">+</operator> <literal type="number" pos:start="259:103" pos:end="259:104">64</literal><operator pos:start="259:105" pos:end="259:105">)</operator> <operator pos:start="259:107" pos:end="259:108">&gt;&gt;</operator> <literal type="number" pos:start="259:110" pos:end="259:110">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="265:13" pos:end="265:28"><expr pos:start="265:13" pos:end="265:27"><name pos:start="265:13" pos:end="265:23">got_weights</name> <operator pos:start="265:25" pos:end="265:25">=</operator> <literal type="number" pos:start="265:27" pos:end="265:27">1</literal></expr>;</expr_stmt>

            <break pos:start="267:13" pos:end="267:18">break;</break>

        <case pos:start="269:9" pos:end="269:30">case <expr pos:start="269:14" pos:end="269:29"><name pos:start="269:14" pos:end="269:29">WP_ID_DECSAMPLES</name></expr>:</case>

            <if_stmt pos:start="271:13" pos:end="277:13"><if pos:start="271:13" pos:end="277:13">if<condition pos:start="271:15" pos:end="271:26">(<expr pos:start="271:16" pos:end="271:25"><operator pos:start="271:16" pos:end="271:16">!</operator><name pos:start="271:17" pos:end="271:25">got_terms</name></expr>)</condition><block pos:start="271:27" pos:end="277:13">{<block_content pos:start="273:17" pos:end="275:25">

                <expr_stmt pos:start="273:17" pos:end="273:76"><expr pos:start="273:17" pos:end="273:75"><call pos:start="273:17" pos:end="273:75"><name pos:start="273:17" pos:end="273:22">av_log</name><argument_list pos:start="273:23" pos:end="273:75">(<argument pos:start="273:24" pos:end="273:28"><expr pos:start="273:24" pos:end="273:28"><name pos:start="273:24" pos:end="273:28">avctx</name></expr></argument>, <argument pos:start="273:31" pos:end="273:42"><expr pos:start="273:31" pos:end="273:42"><name pos:start="273:31" pos:end="273:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:45" pos:end="273:74"><expr pos:start="273:45" pos:end="273:74"><literal type="string" pos:start="273:45" pos:end="273:74">"No decorrelation terms met\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="275:17" pos:end="275:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:18"><expr pos:start="279:13" pos:end="279:17"><name pos:start="279:13" pos:end="279:13">t</name> <operator pos:start="279:15" pos:end="279:15">=</operator> <literal type="number" pos:start="279:17" pos:end="279:17">0</literal></expr>;</expr_stmt>

            <for pos:start="281:13" pos:end="327:13">for<control pos:start="281:16" pos:end="281:62">(<init pos:start="281:17" pos:end="281:33"><expr pos:start="281:17" pos:end="281:32"><name pos:start="281:17" pos:end="281:17">i</name> <operator pos:start="281:19" pos:end="281:19">=</operator> <name pos:start="281:21" pos:end="281:28"><name pos:start="281:21" pos:end="281:21">s</name><operator pos:start="281:22" pos:end="281:23">-&gt;</operator><name pos:start="281:24" pos:end="281:28">terms</name></name> <operator pos:start="281:30" pos:end="281:30">-</operator> <literal type="number" pos:start="281:32" pos:end="281:32">1</literal></expr>;</init> <condition pos:start="281:35" pos:end="281:57"><expr pos:start="281:35" pos:end="281:56"><operator pos:start="281:35" pos:end="281:35">(</operator><name pos:start="281:36" pos:end="281:36">i</name> <operator pos:start="281:38" pos:end="281:39">&gt;=</operator> <literal type="number" pos:start="281:41" pos:end="281:41">0</literal><operator pos:start="281:42" pos:end="281:42">)</operator> <operator pos:start="281:44" pos:end="281:45">&amp;&amp;</operator> <operator pos:start="281:47" pos:end="281:47">(</operator><name pos:start="281:48" pos:end="281:48">t</name> <operator pos:start="281:50" pos:end="281:50">&lt;</operator> <name pos:start="281:52" pos:end="281:55">size</name><operator pos:start="281:56" pos:end="281:56">)</operator></expr>;</condition> <incr pos:start="281:59" pos:end="281:61"><expr pos:start="281:59" pos:end="281:61"><name pos:start="281:59" pos:end="281:59">i</name><operator pos:start="281:60" pos:end="281:61">--</operator></expr></incr>)</control> <block pos:start="281:64" pos:end="327:13">{<block_content pos:start="283:17" pos:end="325:17">

                <if_stmt pos:start="283:17" pos:end="325:17"><if pos:start="283:17" pos:end="301:17">if<condition pos:start="283:19" pos:end="283:42">(<expr pos:start="283:20" pos:end="283:41"><name pos:start="283:20" pos:end="283:31"><name pos:start="283:20" pos:end="283:20">s</name><operator pos:start="283:21" pos:end="283:22">-&gt;</operator><name pos:start="283:23" pos:end="283:28">decorr</name><index pos:start="283:29" pos:end="283:31">[<expr pos:start="283:30" pos:end="283:30"><name pos:start="283:30" pos:end="283:30">i</name></expr>]</index></name><operator pos:start="283:32" pos:end="283:32">.</operator><name pos:start="283:33" pos:end="283:37">value</name> <operator pos:start="283:39" pos:end="283:39">&gt;</operator> <literal type="number" pos:start="283:41" pos:end="283:41">8</literal></expr>)</condition><block pos:start="283:43" pos:end="301:17">{<block_content pos:start="285:21" pos:end="299:27">

                    <expr_stmt pos:start="285:21" pos:end="285:69"><expr pos:start="285:21" pos:end="285:68"><name pos:start="285:21" pos:end="285:32"><name pos:start="285:21" pos:end="285:21">s</name><operator pos:start="285:22" pos:end="285:23">-&gt;</operator><name pos:start="285:24" pos:end="285:29">decorr</name><index pos:start="285:30" pos:end="285:32">[<expr pos:start="285:31" pos:end="285:31"><name pos:start="285:31" pos:end="285:31">i</name></expr>]</index></name><operator pos:start="285:33" pos:end="285:33">.</operator><name pos:start="285:34" pos:end="285:44"><name pos:start="285:34" pos:end="285:41">samplesA</name><index pos:start="285:42" pos:end="285:44">[<expr pos:start="285:43" pos:end="285:43"><literal type="number" pos:start="285:43" pos:end="285:43">0</literal></expr>]</index></name> <operator pos:start="285:46" pos:end="285:46">=</operator> <call pos:start="285:48" pos:end="285:68"><name pos:start="285:48" pos:end="285:54">wp_exp2</name><argument_list pos:start="285:55" pos:end="285:68">(<argument pos:start="285:56" pos:end="285:67"><expr pos:start="285:56" pos:end="285:67"><call pos:start="285:56" pos:end="285:67"><name pos:start="285:56" pos:end="285:62">AV_RL16</name><argument_list pos:start="285:63" pos:end="285:67">(<argument pos:start="285:64" pos:end="285:66"><expr pos:start="285:64" pos:end="285:66"><name pos:start="285:64" pos:end="285:66">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="285:71" pos:end="285:79"><expr pos:start="285:71" pos:end="285:78"><name pos:start="285:71" pos:end="285:73">buf</name> <operator pos:start="285:75" pos:end="285:76">+=</operator> <literal type="number" pos:start="285:78" pos:end="285:78">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="287:21" pos:end="287:69"><expr pos:start="287:21" pos:end="287:68"><name pos:start="287:21" pos:end="287:32"><name pos:start="287:21" pos:end="287:21">s</name><operator pos:start="287:22" pos:end="287:23">-&gt;</operator><name pos:start="287:24" pos:end="287:29">decorr</name><index pos:start="287:30" pos:end="287:32">[<expr pos:start="287:31" pos:end="287:31"><name pos:start="287:31" pos:end="287:31">i</name></expr>]</index></name><operator pos:start="287:33" pos:end="287:33">.</operator><name pos:start="287:34" pos:end="287:44"><name pos:start="287:34" pos:end="287:41">samplesA</name><index pos:start="287:42" pos:end="287:44">[<expr pos:start="287:43" pos:end="287:43"><literal type="number" pos:start="287:43" pos:end="287:43">1</literal></expr>]</index></name> <operator pos:start="287:46" pos:end="287:46">=</operator> <call pos:start="287:48" pos:end="287:68"><name pos:start="287:48" pos:end="287:54">wp_exp2</name><argument_list pos:start="287:55" pos:end="287:68">(<argument pos:start="287:56" pos:end="287:67"><expr pos:start="287:56" pos:end="287:67"><call pos:start="287:56" pos:end="287:67"><name pos:start="287:56" pos:end="287:62">AV_RL16</name><argument_list pos:start="287:63" pos:end="287:67">(<argument pos:start="287:64" pos:end="287:66"><expr pos:start="287:64" pos:end="287:66"><name pos:start="287:64" pos:end="287:66">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="287:71" pos:end="287:79"><expr pos:start="287:71" pos:end="287:78"><name pos:start="287:71" pos:end="287:73">buf</name> <operator pos:start="287:75" pos:end="287:76">+=</operator> <literal type="number" pos:start="287:78" pos:end="287:78">2</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="289:21" pos:end="297:21"><if pos:start="289:21" pos:end="297:21">if<condition pos:start="289:23" pos:end="289:36">(<expr pos:start="289:24" pos:end="289:35"><name pos:start="289:24" pos:end="289:35"><name pos:start="289:24" pos:end="289:24">s</name><operator pos:start="289:25" pos:end="289:26">-&gt;</operator><name pos:start="289:27" pos:end="289:35">stereo_in</name></name></expr>)</condition><block pos:start="289:37" pos:end="297:21">{<block_content pos:start="291:25" pos:end="295:31">

                        <expr_stmt pos:start="291:25" pos:end="291:73"><expr pos:start="291:25" pos:end="291:72"><name pos:start="291:25" pos:end="291:36"><name pos:start="291:25" pos:end="291:25">s</name><operator pos:start="291:26" pos:end="291:27">-&gt;</operator><name pos:start="291:28" pos:end="291:33">decorr</name><index pos:start="291:34" pos:end="291:36">[<expr pos:start="291:35" pos:end="291:35"><name pos:start="291:35" pos:end="291:35">i</name></expr>]</index></name><operator pos:start="291:37" pos:end="291:37">.</operator><name pos:start="291:38" pos:end="291:48"><name pos:start="291:38" pos:end="291:45">samplesB</name><index pos:start="291:46" pos:end="291:48">[<expr pos:start="291:47" pos:end="291:47"><literal type="number" pos:start="291:47" pos:end="291:47">0</literal></expr>]</index></name> <operator pos:start="291:50" pos:end="291:50">=</operator> <call pos:start="291:52" pos:end="291:72"><name pos:start="291:52" pos:end="291:58">wp_exp2</name><argument_list pos:start="291:59" pos:end="291:72">(<argument pos:start="291:60" pos:end="291:71"><expr pos:start="291:60" pos:end="291:71"><call pos:start="291:60" pos:end="291:71"><name pos:start="291:60" pos:end="291:66">AV_RL16</name><argument_list pos:start="291:67" pos:end="291:71">(<argument pos:start="291:68" pos:end="291:70"><expr pos:start="291:68" pos:end="291:70"><name pos:start="291:68" pos:end="291:70">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="291:75" pos:end="291:83"><expr pos:start="291:75" pos:end="291:82"><name pos:start="291:75" pos:end="291:77">buf</name> <operator pos:start="291:79" pos:end="291:80">+=</operator> <literal type="number" pos:start="291:82" pos:end="291:82">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="293:25" pos:end="293:73"><expr pos:start="293:25" pos:end="293:72"><name pos:start="293:25" pos:end="293:36"><name pos:start="293:25" pos:end="293:25">s</name><operator pos:start="293:26" pos:end="293:27">-&gt;</operator><name pos:start="293:28" pos:end="293:33">decorr</name><index pos:start="293:34" pos:end="293:36">[<expr pos:start="293:35" pos:end="293:35"><name pos:start="293:35" pos:end="293:35">i</name></expr>]</index></name><operator pos:start="293:37" pos:end="293:37">.</operator><name pos:start="293:38" pos:end="293:48"><name pos:start="293:38" pos:end="293:45">samplesB</name><index pos:start="293:46" pos:end="293:48">[<expr pos:start="293:47" pos:end="293:47"><literal type="number" pos:start="293:47" pos:end="293:47">1</literal></expr>]</index></name> <operator pos:start="293:50" pos:end="293:50">=</operator> <call pos:start="293:52" pos:end="293:72"><name pos:start="293:52" pos:end="293:58">wp_exp2</name><argument_list pos:start="293:59" pos:end="293:72">(<argument pos:start="293:60" pos:end="293:71"><expr pos:start="293:60" pos:end="293:71"><call pos:start="293:60" pos:end="293:71"><name pos:start="293:60" pos:end="293:66">AV_RL16</name><argument_list pos:start="293:67" pos:end="293:71">(<argument pos:start="293:68" pos:end="293:70"><expr pos:start="293:68" pos:end="293:70"><name pos:start="293:68" pos:end="293:70">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="293:75" pos:end="293:83"><expr pos:start="293:75" pos:end="293:82"><name pos:start="293:75" pos:end="293:77">buf</name> <operator pos:start="293:79" pos:end="293:80">+=</operator> <literal type="number" pos:start="293:82" pos:end="293:82">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="295:25" pos:end="295:31"><expr pos:start="295:25" pos:end="295:30"><name pos:start="295:25" pos:end="295:25">t</name> <operator pos:start="295:27" pos:end="295:28">+=</operator> <literal type="number" pos:start="295:30" pos:end="295:30">4</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="299:21" pos:end="299:27"><expr pos:start="299:21" pos:end="299:26"><name pos:start="299:21" pos:end="299:21">t</name> <operator pos:start="299:23" pos:end="299:24">+=</operator> <literal type="number" pos:start="299:26" pos:end="299:26">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="301:18" pos:end="309:17">else if<condition pos:start="301:25" pos:end="301:48">(<expr pos:start="301:26" pos:end="301:47"><name pos:start="301:26" pos:end="301:37"><name pos:start="301:26" pos:end="301:26">s</name><operator pos:start="301:27" pos:end="301:28">-&gt;</operator><name pos:start="301:29" pos:end="301:34">decorr</name><index pos:start="301:35" pos:end="301:37">[<expr pos:start="301:36" pos:end="301:36"><name pos:start="301:36" pos:end="301:36">i</name></expr>]</index></name><operator pos:start="301:38" pos:end="301:38">.</operator><name pos:start="301:39" pos:end="301:43">value</name> <operator pos:start="301:45" pos:end="301:45">&lt;</operator> <literal type="number" pos:start="301:47" pos:end="301:47">0</literal></expr>)</condition><block pos:start="301:49" pos:end="309:17">{<block_content pos:start="303:21" pos:end="307:27">

                    <expr_stmt pos:start="303:21" pos:end="303:69"><expr pos:start="303:21" pos:end="303:68"><name pos:start="303:21" pos:end="303:32"><name pos:start="303:21" pos:end="303:21">s</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:29">decorr</name><index pos:start="303:30" pos:end="303:32">[<expr pos:start="303:31" pos:end="303:31"><name pos:start="303:31" pos:end="303:31">i</name></expr>]</index></name><operator pos:start="303:33" pos:end="303:33">.</operator><name pos:start="303:34" pos:end="303:44"><name pos:start="303:34" pos:end="303:41">samplesA</name><index pos:start="303:42" pos:end="303:44">[<expr pos:start="303:43" pos:end="303:43"><literal type="number" pos:start="303:43" pos:end="303:43">0</literal></expr>]</index></name> <operator pos:start="303:46" pos:end="303:46">=</operator> <call pos:start="303:48" pos:end="303:68"><name pos:start="303:48" pos:end="303:54">wp_exp2</name><argument_list pos:start="303:55" pos:end="303:68">(<argument pos:start="303:56" pos:end="303:67"><expr pos:start="303:56" pos:end="303:67"><call pos:start="303:56" pos:end="303:67"><name pos:start="303:56" pos:end="303:62">AV_RL16</name><argument_list pos:start="303:63" pos:end="303:67">(<argument pos:start="303:64" pos:end="303:66"><expr pos:start="303:64" pos:end="303:66"><name pos:start="303:64" pos:end="303:66">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="303:71" pos:end="303:79"><expr pos:start="303:71" pos:end="303:78"><name pos:start="303:71" pos:end="303:73">buf</name> <operator pos:start="303:75" pos:end="303:76">+=</operator> <literal type="number" pos:start="303:78" pos:end="303:78">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="305:21" pos:end="305:69"><expr pos:start="305:21" pos:end="305:68"><name pos:start="305:21" pos:end="305:32"><name pos:start="305:21" pos:end="305:21">s</name><operator pos:start="305:22" pos:end="305:23">-&gt;</operator><name pos:start="305:24" pos:end="305:29">decorr</name><index pos:start="305:30" pos:end="305:32">[<expr pos:start="305:31" pos:end="305:31"><name pos:start="305:31" pos:end="305:31">i</name></expr>]</index></name><operator pos:start="305:33" pos:end="305:33">.</operator><name pos:start="305:34" pos:end="305:44"><name pos:start="305:34" pos:end="305:41">samplesB</name><index pos:start="305:42" pos:end="305:44">[<expr pos:start="305:43" pos:end="305:43"><literal type="number" pos:start="305:43" pos:end="305:43">0</literal></expr>]</index></name> <operator pos:start="305:46" pos:end="305:46">=</operator> <call pos:start="305:48" pos:end="305:68"><name pos:start="305:48" pos:end="305:54">wp_exp2</name><argument_list pos:start="305:55" pos:end="305:68">(<argument pos:start="305:56" pos:end="305:67"><expr pos:start="305:56" pos:end="305:67"><call pos:start="305:56" pos:end="305:67"><name pos:start="305:56" pos:end="305:62">AV_RL16</name><argument_list pos:start="305:63" pos:end="305:67">(<argument pos:start="305:64" pos:end="305:66"><expr pos:start="305:64" pos:end="305:66"><name pos:start="305:64" pos:end="305:66">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="305:71" pos:end="305:79"><expr pos:start="305:71" pos:end="305:78"><name pos:start="305:71" pos:end="305:73">buf</name> <operator pos:start="305:75" pos:end="305:76">+=</operator> <literal type="number" pos:start="305:78" pos:end="305:78">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="307:21" pos:end="307:27"><expr pos:start="307:21" pos:end="307:26"><name pos:start="307:21" pos:end="307:21">t</name> <operator pos:start="307:23" pos:end="307:24">+=</operator> <literal type="number" pos:start="307:26" pos:end="307:26">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="309:18" pos:end="325:17">else<block pos:start="309:22" pos:end="325:17">{<block_content pos:start="311:21" pos:end="323:69">

                    <for pos:start="311:21" pos:end="321:21">for<control pos:start="311:24" pos:end="311:59">(<init pos:start="311:25" pos:end="311:30"><expr pos:start="311:25" pos:end="311:29"><name pos:start="311:25" pos:end="311:25">j</name> <operator pos:start="311:27" pos:end="311:27">=</operator> <literal type="number" pos:start="311:29" pos:end="311:29">0</literal></expr>;</init> <condition pos:start="311:32" pos:end="311:54"><expr pos:start="311:32" pos:end="311:53"><name pos:start="311:32" pos:end="311:32">j</name> <operator pos:start="311:34" pos:end="311:34">&lt;</operator> <name pos:start="311:36" pos:end="311:47"><name pos:start="311:36" pos:end="311:36">s</name><operator pos:start="311:37" pos:end="311:38">-&gt;</operator><name pos:start="311:39" pos:end="311:44">decorr</name><index pos:start="311:45" pos:end="311:47">[<expr pos:start="311:46" pos:end="311:46"><name pos:start="311:46" pos:end="311:46">i</name></expr>]</index></name><operator pos:start="311:48" pos:end="311:48">.</operator><name pos:start="311:49" pos:end="311:53">value</name></expr>;</condition> <incr pos:start="311:56" pos:end="311:58"><expr pos:start="311:56" pos:end="311:58"><name pos:start="311:56" pos:end="311:56">j</name><operator pos:start="311:57" pos:end="311:58">++</operator></expr></incr>)</control><block pos:start="311:60" pos:end="321:21">{<block_content pos:start="313:25" pos:end="319:25">

                        <expr_stmt pos:start="313:25" pos:end="313:73"><expr pos:start="313:25" pos:end="313:72"><name pos:start="313:25" pos:end="313:36"><name pos:start="313:25" pos:end="313:25">s</name><operator pos:start="313:26" pos:end="313:27">-&gt;</operator><name pos:start="313:28" pos:end="313:33">decorr</name><index pos:start="313:34" pos:end="313:36">[<expr pos:start="313:35" pos:end="313:35"><name pos:start="313:35" pos:end="313:35">i</name></expr>]</index></name><operator pos:start="313:37" pos:end="313:37">.</operator><name pos:start="313:38" pos:end="313:48"><name pos:start="313:38" pos:end="313:45">samplesA</name><index pos:start="313:46" pos:end="313:48">[<expr pos:start="313:47" pos:end="313:47"><name pos:start="313:47" pos:end="313:47">j</name></expr>]</index></name> <operator pos:start="313:50" pos:end="313:50">=</operator> <call pos:start="313:52" pos:end="313:72"><name pos:start="313:52" pos:end="313:58">wp_exp2</name><argument_list pos:start="313:59" pos:end="313:72">(<argument pos:start="313:60" pos:end="313:71"><expr pos:start="313:60" pos:end="313:71"><call pos:start="313:60" pos:end="313:71"><name pos:start="313:60" pos:end="313:66">AV_RL16</name><argument_list pos:start="313:67" pos:end="313:71">(<argument pos:start="313:68" pos:end="313:70"><expr pos:start="313:68" pos:end="313:70"><name pos:start="313:68" pos:end="313:70">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="313:75" pos:end="313:83"><expr pos:start="313:75" pos:end="313:82"><name pos:start="313:75" pos:end="313:77">buf</name> <operator pos:start="313:79" pos:end="313:80">+=</operator> <literal type="number" pos:start="313:82" pos:end="313:82">2</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="315:25" pos:end="319:25"><if pos:start="315:25" pos:end="319:25">if<condition pos:start="315:27" pos:end="315:40">(<expr pos:start="315:28" pos:end="315:39"><name pos:start="315:28" pos:end="315:39"><name pos:start="315:28" pos:end="315:28">s</name><operator pos:start="315:29" pos:end="315:30">-&gt;</operator><name pos:start="315:31" pos:end="315:39">stereo_in</name></name></expr>)</condition><block pos:start="315:41" pos:end="319:25">{<block_content pos:start="317:29" pos:end="317:87">

                            <expr_stmt pos:start="317:29" pos:end="317:77"><expr pos:start="317:29" pos:end="317:76"><name pos:start="317:29" pos:end="317:40"><name pos:start="317:29" pos:end="317:29">s</name><operator pos:start="317:30" pos:end="317:31">-&gt;</operator><name pos:start="317:32" pos:end="317:37">decorr</name><index pos:start="317:38" pos:end="317:40">[<expr pos:start="317:39" pos:end="317:39"><name pos:start="317:39" pos:end="317:39">i</name></expr>]</index></name><operator pos:start="317:41" pos:end="317:41">.</operator><name pos:start="317:42" pos:end="317:52"><name pos:start="317:42" pos:end="317:49">samplesB</name><index pos:start="317:50" pos:end="317:52">[<expr pos:start="317:51" pos:end="317:51"><name pos:start="317:51" pos:end="317:51">j</name></expr>]</index></name> <operator pos:start="317:54" pos:end="317:54">=</operator> <call pos:start="317:56" pos:end="317:76"><name pos:start="317:56" pos:end="317:62">wp_exp2</name><argument_list pos:start="317:63" pos:end="317:76">(<argument pos:start="317:64" pos:end="317:75"><expr pos:start="317:64" pos:end="317:75"><call pos:start="317:64" pos:end="317:75"><name pos:start="317:64" pos:end="317:70">AV_RL16</name><argument_list pos:start="317:71" pos:end="317:75">(<argument pos:start="317:72" pos:end="317:74"><expr pos:start="317:72" pos:end="317:74"><name pos:start="317:72" pos:end="317:74">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="317:79" pos:end="317:87"><expr pos:start="317:79" pos:end="317:86"><name pos:start="317:79" pos:end="317:81">buf</name> <operator pos:start="317:83" pos:end="317:84">+=</operator> <literal type="number" pos:start="317:86" pos:end="317:86">2</literal></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="323:21" pos:end="323:69"><expr pos:start="323:21" pos:end="323:68"><name pos:start="323:21" pos:end="323:21">t</name> <operator pos:start="323:23" pos:end="323:24">+=</operator> <name pos:start="323:26" pos:end="323:37"><name pos:start="323:26" pos:end="323:26">s</name><operator pos:start="323:27" pos:end="323:28">-&gt;</operator><name pos:start="323:29" pos:end="323:34">decorr</name><index pos:start="323:35" pos:end="323:37">[<expr pos:start="323:36" pos:end="323:36"><name pos:start="323:36" pos:end="323:36">i</name></expr>]</index></name><operator pos:start="323:38" pos:end="323:38">.</operator><name pos:start="323:39" pos:end="323:43">value</name> <operator pos:start="323:45" pos:end="323:45">*</operator> <literal type="number" pos:start="323:47" pos:end="323:47">2</literal> <operator pos:start="323:49" pos:end="323:49">*</operator> <operator pos:start="323:51" pos:end="323:51">(</operator><name pos:start="323:52" pos:end="323:63"><name pos:start="323:52" pos:end="323:52">s</name><operator pos:start="323:53" pos:end="323:54">-&gt;</operator><name pos:start="323:55" pos:end="323:63">stereo_in</name></name> <operator pos:start="323:65" pos:end="323:65">+</operator> <literal type="number" pos:start="323:67" pos:end="323:67">1</literal><operator pos:start="323:68" pos:end="323:68">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="329:13" pos:end="329:28"><expr pos:start="329:13" pos:end="329:27"><name pos:start="329:13" pos:end="329:23">got_samples</name> <operator pos:start="329:25" pos:end="329:25">=</operator> <literal type="number" pos:start="329:27" pos:end="329:27">1</literal></expr>;</expr_stmt>

            <break pos:start="331:13" pos:end="331:18">break;</break>

        <case pos:start="333:9" pos:end="333:27">case <expr pos:start="333:14" pos:end="333:26"><name pos:start="333:14" pos:end="333:26">WP_ID_ENTROPY</name></expr>:</case>

            <if_stmt pos:start="335:13" pos:end="343:13"><if pos:start="335:13" pos:end="343:13">if<condition pos:start="335:15" pos:end="335:46">(<expr pos:start="335:16" pos:end="335:45"><name pos:start="335:16" pos:end="335:19">size</name> <operator pos:start="335:21" pos:end="335:22">!=</operator> <literal type="number" pos:start="335:24" pos:end="335:24">6</literal> <operator pos:start="335:26" pos:end="335:26">*</operator> <operator pos:start="335:28" pos:end="335:28">(</operator><name pos:start="335:29" pos:end="335:40"><name pos:start="335:29" pos:end="335:29">s</name><operator pos:start="335:30" pos:end="335:31">-&gt;</operator><name pos:start="335:32" pos:end="335:40">stereo_in</name></name> <operator pos:start="335:42" pos:end="335:42">+</operator> <literal type="number" pos:start="335:44" pos:end="335:44">1</literal><operator pos:start="335:45" pos:end="335:45">)</operator></expr>)</condition><block pos:start="335:47" pos:end="343:13">{<block_content pos:start="337:17" pos:end="341:25">

                <expr_stmt pos:start="337:17" pos:end="337:116"><expr pos:start="337:17" pos:end="337:115"><call pos:start="337:17" pos:end="337:115"><name pos:start="337:17" pos:end="337:22">av_log</name><argument_list pos:start="337:23" pos:end="337:115">(<argument pos:start="337:24" pos:end="337:28"><expr pos:start="337:24" pos:end="337:28"><name pos:start="337:24" pos:end="337:28">avctx</name></expr></argument>, <argument pos:start="337:31" pos:end="337:42"><expr pos:start="337:31" pos:end="337:42"><name pos:start="337:31" pos:end="337:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="337:45" pos:end="337:84"><expr pos:start="337:45" pos:end="337:84"><literal type="string" pos:start="337:45" pos:end="337:84">"Entropy vars size should be %i, got %i"</literal></expr></argument>, <argument pos:start="337:87" pos:end="337:108"><expr pos:start="337:87" pos:end="337:108"><literal type="number" pos:start="337:87" pos:end="337:87">6</literal> <operator pos:start="337:89" pos:end="337:89">*</operator> <operator pos:start="337:91" pos:end="337:91">(</operator><name pos:start="337:92" pos:end="337:103"><name pos:start="337:92" pos:end="337:92">s</name><operator pos:start="337:93" pos:end="337:94">-&gt;</operator><name pos:start="337:95" pos:end="337:103">stereo_in</name></name> <operator pos:start="337:105" pos:end="337:105">+</operator> <literal type="number" pos:start="337:107" pos:end="337:107">1</literal><operator pos:start="337:108" pos:end="337:108">)</operator></expr></argument>, <argument pos:start="337:111" pos:end="337:114"><expr pos:start="337:111" pos:end="337:114"><name pos:start="337:111" pos:end="337:114">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="339:29"><expr pos:start="339:17" pos:end="339:28"><name pos:start="339:17" pos:end="339:19">buf</name> <operator pos:start="339:21" pos:end="339:22">+=</operator> <name pos:start="339:24" pos:end="339:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="341:17" pos:end="341:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <for pos:start="345:13" pos:end="355:13">for<control pos:start="345:16" pos:end="345:46">(<init pos:start="345:17" pos:end="345:22"><expr pos:start="345:17" pos:end="345:21"><name pos:start="345:17" pos:end="345:17">j</name> <operator pos:start="345:19" pos:end="345:19">=</operator> <literal type="number" pos:start="345:21" pos:end="345:21">0</literal></expr>;</init> <condition pos:start="345:24" pos:end="345:41"><expr pos:start="345:24" pos:end="345:40"><name pos:start="345:24" pos:end="345:24">j</name> <operator pos:start="345:26" pos:end="345:27">&lt;=</operator> <name pos:start="345:29" pos:end="345:40"><name pos:start="345:29" pos:end="345:29">s</name><operator pos:start="345:30" pos:end="345:31">-&gt;</operator><name pos:start="345:32" pos:end="345:40">stereo_in</name></name></expr>;</condition> <incr pos:start="345:43" pos:end="345:45"><expr pos:start="345:43" pos:end="345:45"><name pos:start="345:43" pos:end="345:43">j</name><operator pos:start="345:44" pos:end="345:45">++</operator></expr></incr>)</control><block pos:start="345:47" pos:end="355:13">{<block_content pos:start="347:17" pos:end="353:17">

                <for pos:start="347:17" pos:end="353:17">for<control pos:start="347:20" pos:end="347:38">(<init pos:start="347:21" pos:end="347:26"><expr pos:start="347:21" pos:end="347:25"><name pos:start="347:21" pos:end="347:21">i</name> <operator pos:start="347:23" pos:end="347:23">=</operator> <literal type="number" pos:start="347:25" pos:end="347:25">0</literal></expr>;</init> <condition pos:start="347:28" pos:end="347:33"><expr pos:start="347:28" pos:end="347:32"><name pos:start="347:28" pos:end="347:28">i</name> <operator pos:start="347:30" pos:end="347:30">&lt;</operator> <literal type="number" pos:start="347:32" pos:end="347:32">3</literal></expr>;</condition> <incr pos:start="347:35" pos:end="347:37"><expr pos:start="347:35" pos:end="347:37"><name pos:start="347:35" pos:end="347:35">i</name><operator pos:start="347:36" pos:end="347:37">++</operator></expr></incr>)</control><block pos:start="347:39" pos:end="353:17">{<block_content pos:start="349:21" pos:end="351:29">

                    <expr_stmt pos:start="349:21" pos:end="349:63"><expr pos:start="349:21" pos:end="349:62"><name pos:start="349:21" pos:end="349:28"><name pos:start="349:21" pos:end="349:21">s</name><operator pos:start="349:22" pos:end="349:23">-&gt;</operator><name pos:start="349:24" pos:end="349:25">ch</name><index pos:start="349:26" pos:end="349:28">[<expr pos:start="349:27" pos:end="349:27"><name pos:start="349:27" pos:end="349:27">j</name></expr>]</index></name><operator pos:start="349:29" pos:end="349:29">.</operator><name pos:start="349:30" pos:end="349:38"><name pos:start="349:30" pos:end="349:35">median</name><index pos:start="349:36" pos:end="349:38">[<expr pos:start="349:37" pos:end="349:37"><name pos:start="349:37" pos:end="349:37">i</name></expr>]</index></name> <operator pos:start="349:40" pos:end="349:40">=</operator> <call pos:start="349:42" pos:end="349:62"><name pos:start="349:42" pos:end="349:48">wp_exp2</name><argument_list pos:start="349:49" pos:end="349:62">(<argument pos:start="349:50" pos:end="349:61"><expr pos:start="349:50" pos:end="349:61"><call pos:start="349:50" pos:end="349:61"><name pos:start="349:50" pos:end="349:56">AV_RL16</name><argument_list pos:start="349:57" pos:end="349:61">(<argument pos:start="349:58" pos:end="349:60"><expr pos:start="349:58" pos:end="349:60"><name pos:start="349:58" pos:end="349:60">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="351:21" pos:end="351:29"><expr pos:start="351:21" pos:end="351:28"><name pos:start="351:21" pos:end="351:23">buf</name> <operator pos:start="351:25" pos:end="351:26">+=</operator> <literal type="number" pos:start="351:28" pos:end="351:28">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

            <expr_stmt pos:start="357:13" pos:end="357:28"><expr pos:start="357:13" pos:end="357:27"><name pos:start="357:13" pos:end="357:23">got_entropy</name> <operator pos:start="357:25" pos:end="357:25">=</operator> <literal type="number" pos:start="357:27" pos:end="357:27">1</literal></expr>;</expr_stmt>

            <break pos:start="359:13" pos:end="359:18">break;</break>

        <case pos:start="361:9" pos:end="361:26">case <expr pos:start="361:14" pos:end="361:25"><name pos:start="361:14" pos:end="361:25">WP_ID_HYBRID</name></expr>:</case>

            <if_stmt pos:start="363:13" pos:end="375:13"><if pos:start="363:13" pos:end="375:13">if<condition pos:start="363:15" pos:end="363:33">(<expr pos:start="363:16" pos:end="363:32"><name pos:start="363:16" pos:end="363:32"><name pos:start="363:16" pos:end="363:16">s</name><operator pos:start="363:17" pos:end="363:18">-&gt;</operator><name pos:start="363:19" pos:end="363:32">hybrid_bitrate</name></name></expr>)</condition><block pos:start="363:34" pos:end="375:13">{<block_content pos:start="365:17" pos:end="373:17">

                <for pos:start="365:17" pos:end="373:17">for<control pos:start="365:20" pos:end="365:50">(<init pos:start="365:21" pos:end="365:26"><expr pos:start="365:21" pos:end="365:25"><name pos:start="365:21" pos:end="365:21">i</name> <operator pos:start="365:23" pos:end="365:23">=</operator> <literal type="number" pos:start="365:25" pos:end="365:25">0</literal></expr>;</init> <condition pos:start="365:28" pos:end="365:45"><expr pos:start="365:28" pos:end="365:44"><name pos:start="365:28" pos:end="365:28">i</name> <operator pos:start="365:30" pos:end="365:31">&lt;=</operator> <name pos:start="365:33" pos:end="365:44"><name pos:start="365:33" pos:end="365:33">s</name><operator pos:start="365:34" pos:end="365:35">-&gt;</operator><name pos:start="365:36" pos:end="365:44">stereo_in</name></name></expr>;</condition> <incr pos:start="365:47" pos:end="365:49"><expr pos:start="365:47" pos:end="365:49"><name pos:start="365:47" pos:end="365:47">i</name><operator pos:start="365:48" pos:end="365:49">++</operator></expr></incr>)</control><block pos:start="365:51" pos:end="373:17">{<block_content pos:start="367:21" pos:end="371:30">

                    <expr_stmt pos:start="367:21" pos:end="367:64"><expr pos:start="367:21" pos:end="367:63"><name pos:start="367:21" pos:end="367:28"><name pos:start="367:21" pos:end="367:21">s</name><operator pos:start="367:22" pos:end="367:23">-&gt;</operator><name pos:start="367:24" pos:end="367:25">ch</name><index pos:start="367:26" pos:end="367:28">[<expr pos:start="367:27" pos:end="367:27"><name pos:start="367:27" pos:end="367:27">i</name></expr>]</index></name><operator pos:start="367:29" pos:end="367:29">.</operator><name pos:start="367:30" pos:end="367:39">slow_level</name> <operator pos:start="367:41" pos:end="367:41">=</operator> <call pos:start="367:43" pos:end="367:63"><name pos:start="367:43" pos:end="367:49">wp_exp2</name><argument_list pos:start="367:50" pos:end="367:63">(<argument pos:start="367:51" pos:end="367:62"><expr pos:start="367:51" pos:end="367:62"><call pos:start="367:51" pos:end="367:62"><name pos:start="367:51" pos:end="367:57">AV_RL16</name><argument_list pos:start="367:58" pos:end="367:62">(<argument pos:start="367:59" pos:end="367:61"><expr pos:start="367:59" pos:end="367:61"><name pos:start="367:59" pos:end="367:61">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="369:29"><expr pos:start="369:21" pos:end="369:28"><name pos:start="369:21" pos:end="369:23">buf</name> <operator pos:start="369:25" pos:end="369:26">+=</operator> <literal type="number" pos:start="369:28" pos:end="369:28">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="371:21" pos:end="371:30"><expr pos:start="371:21" pos:end="371:29"><name pos:start="371:21" pos:end="371:24">size</name> <operator pos:start="371:26" pos:end="371:27">-=</operator> <literal type="number" pos:start="371:29" pos:end="371:29">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <for pos:start="377:13" pos:end="385:13">for<control pos:start="377:16" pos:end="377:51">(<init pos:start="377:17" pos:end="377:22"><expr pos:start="377:17" pos:end="377:21"><name pos:start="377:17" pos:end="377:17">i</name> <operator pos:start="377:19" pos:end="377:19">=</operator> <literal type="number" pos:start="377:21" pos:end="377:21">0</literal></expr>;</init> <condition pos:start="377:24" pos:end="377:46"><expr pos:start="377:24" pos:end="377:45"><name pos:start="377:24" pos:end="377:24">i</name> <operator pos:start="377:26" pos:end="377:26">&lt;</operator> <operator pos:start="377:28" pos:end="377:28">(</operator><name pos:start="377:29" pos:end="377:40"><name pos:start="377:29" pos:end="377:29">s</name><operator pos:start="377:30" pos:end="377:31">-&gt;</operator><name pos:start="377:32" pos:end="377:40">stereo_in</name></name> <operator pos:start="377:42" pos:end="377:42">+</operator> <literal type="number" pos:start="377:44" pos:end="377:44">1</literal><operator pos:start="377:45" pos:end="377:45">)</operator></expr>;</condition> <incr pos:start="377:48" pos:end="377:50"><expr pos:start="377:48" pos:end="377:50"><name pos:start="377:48" pos:end="377:48">i</name><operator pos:start="377:49" pos:end="377:50">++</operator></expr></incr>)</control><block pos:start="377:52" pos:end="385:13">{<block_content pos:start="379:17" pos:end="383:26">

                <expr_stmt pos:start="379:17" pos:end="379:58"><expr pos:start="379:17" pos:end="379:57"><name pos:start="379:17" pos:end="379:24"><name pos:start="379:17" pos:end="379:17">s</name><operator pos:start="379:18" pos:end="379:19">-&gt;</operator><name pos:start="379:20" pos:end="379:21">ch</name><index pos:start="379:22" pos:end="379:24">[<expr pos:start="379:23" pos:end="379:23"><name pos:start="379:23" pos:end="379:23">i</name></expr>]</index></name><operator pos:start="379:25" pos:end="379:25">.</operator><name pos:start="379:26" pos:end="379:36">bitrate_acc</name> <operator pos:start="379:38" pos:end="379:38">=</operator> <call pos:start="379:40" pos:end="379:51"><name pos:start="379:40" pos:end="379:46">AV_RL16</name><argument_list pos:start="379:47" pos:end="379:51">(<argument pos:start="379:48" pos:end="379:50"><expr pos:start="379:48" pos:end="379:50"><name pos:start="379:48" pos:end="379:50">buf</name></expr></argument>)</argument_list></call> <operator pos:start="379:53" pos:end="379:54">&lt;&lt;</operator> <literal type="number" pos:start="379:56" pos:end="379:57">16</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:25"><expr pos:start="381:17" pos:end="381:24"><name pos:start="381:17" pos:end="381:19">buf</name> <operator pos:start="381:21" pos:end="381:22">+=</operator> <literal type="number" pos:start="381:24" pos:end="381:24">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:26"><expr pos:start="383:17" pos:end="383:25"><name pos:start="383:17" pos:end="383:20">size</name> <operator pos:start="383:22" pos:end="383:23">-=</operator> <literal type="number" pos:start="383:25" pos:end="383:25">2</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="387:13" pos:end="403:13"><if pos:start="387:13" pos:end="397:13">if<condition pos:start="387:15" pos:end="387:24">(<expr pos:start="387:16" pos:end="387:23"><name pos:start="387:16" pos:end="387:19">size</name> <operator pos:start="387:21" pos:end="387:21">&gt;</operator> <literal type="number" pos:start="387:23" pos:end="387:23">0</literal></expr>)</condition><block pos:start="387:25" pos:end="397:13">{<block_content pos:start="389:17" pos:end="395:17">

                <for pos:start="389:17" pos:end="395:17">for<control pos:start="389:20" pos:end="389:55">(<init pos:start="389:21" pos:end="389:26"><expr pos:start="389:21" pos:end="389:25"><name pos:start="389:21" pos:end="389:21">i</name> <operator pos:start="389:23" pos:end="389:23">=</operator> <literal type="number" pos:start="389:25" pos:end="389:25">0</literal></expr>;</init> <condition pos:start="389:28" pos:end="389:50"><expr pos:start="389:28" pos:end="389:49"><name pos:start="389:28" pos:end="389:28">i</name> <operator pos:start="389:30" pos:end="389:30">&lt;</operator> <operator pos:start="389:32" pos:end="389:32">(</operator><name pos:start="389:33" pos:end="389:44"><name pos:start="389:33" pos:end="389:33">s</name><operator pos:start="389:34" pos:end="389:35">-&gt;</operator><name pos:start="389:36" pos:end="389:44">stereo_in</name></name> <operator pos:start="389:46" pos:end="389:46">+</operator> <literal type="number" pos:start="389:48" pos:end="389:48">1</literal><operator pos:start="389:49" pos:end="389:49">)</operator></expr>;</condition> <incr pos:start="389:52" pos:end="389:54"><expr pos:start="389:52" pos:end="389:54"><name pos:start="389:52" pos:end="389:52">i</name><operator pos:start="389:53" pos:end="389:54">++</operator></expr></incr>)</control><block pos:start="389:56" pos:end="395:17">{<block_content pos:start="391:21" pos:end="393:29">

                    <expr_stmt pos:start="391:21" pos:end="391:76"><expr pos:start="391:21" pos:end="391:75"><name pos:start="391:21" pos:end="391:28"><name pos:start="391:21" pos:end="391:21">s</name><operator pos:start="391:22" pos:end="391:23">-&gt;</operator><name pos:start="391:24" pos:end="391:25">ch</name><index pos:start="391:26" pos:end="391:28">[<expr pos:start="391:27" pos:end="391:27"><name pos:start="391:27" pos:end="391:27">i</name></expr>]</index></name><operator pos:start="391:29" pos:end="391:29">.</operator><name pos:start="391:30" pos:end="391:42">bitrate_delta</name> <operator pos:start="391:44" pos:end="391:44">=</operator> <call pos:start="391:46" pos:end="391:75"><name pos:start="391:46" pos:end="391:52">wp_exp2</name><argument_list pos:start="391:53" pos:end="391:75">(<argument pos:start="391:54" pos:end="391:74"><expr pos:start="391:54" pos:end="391:74"><operator pos:start="391:54" pos:end="391:54">(</operator><name pos:start="391:55" pos:end="391:61">int16_t</name><operator pos:start="391:62" pos:end="391:62">)</operator><call pos:start="391:63" pos:end="391:74"><name pos:start="391:63" pos:end="391:69">AV_RL16</name><argument_list pos:start="391:70" pos:end="391:74">(<argument pos:start="391:71" pos:end="391:73"><expr pos:start="391:71" pos:end="391:73"><name pos:start="391:71" pos:end="391:73">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="393:21" pos:end="393:29"><expr pos:start="393:21" pos:end="393:28"><name pos:start="393:21" pos:end="393:23">buf</name> <operator pos:start="393:25" pos:end="393:26">+=</operator> <literal type="number" pos:start="393:28" pos:end="393:28">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if><else pos:start="397:14" pos:end="403:13">else<block pos:start="397:18" pos:end="403:13">{<block_content pos:start="399:17" pos:end="401:47">

                <for pos:start="399:17" pos:end="401:47">for<control pos:start="399:20" pos:end="399:55">(<init pos:start="399:21" pos:end="399:26"><expr pos:start="399:21" pos:end="399:25"><name pos:start="399:21" pos:end="399:21">i</name> <operator pos:start="399:23" pos:end="399:23">=</operator> <literal type="number" pos:start="399:25" pos:end="399:25">0</literal></expr>;</init> <condition pos:start="399:28" pos:end="399:50"><expr pos:start="399:28" pos:end="399:49"><name pos:start="399:28" pos:end="399:28">i</name> <operator pos:start="399:30" pos:end="399:30">&lt;</operator> <operator pos:start="399:32" pos:end="399:32">(</operator><name pos:start="399:33" pos:end="399:44"><name pos:start="399:33" pos:end="399:33">s</name><operator pos:start="399:34" pos:end="399:35">-&gt;</operator><name pos:start="399:36" pos:end="399:44">stereo_in</name></name> <operator pos:start="399:46" pos:end="399:46">+</operator> <literal type="number" pos:start="399:48" pos:end="399:48">1</literal><operator pos:start="399:49" pos:end="399:49">)</operator></expr>;</condition> <incr pos:start="399:52" pos:end="399:54"><expr pos:start="399:52" pos:end="399:54"><name pos:start="399:52" pos:end="399:52">i</name><operator pos:start="399:53" pos:end="399:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="401:21" pos:end="401:47"><block_content pos:start="401:21" pos:end="401:47">

                    <expr_stmt pos:start="401:21" pos:end="401:47"><expr pos:start="401:21" pos:end="401:46"><name pos:start="401:21" pos:end="401:28"><name pos:start="401:21" pos:end="401:21">s</name><operator pos:start="401:22" pos:end="401:23">-&gt;</operator><name pos:start="401:24" pos:end="401:25">ch</name><index pos:start="401:26" pos:end="401:28">[<expr pos:start="401:27" pos:end="401:27"><name pos:start="401:27" pos:end="401:27">i</name></expr>]</index></name><operator pos:start="401:29" pos:end="401:29">.</operator><name pos:start="401:30" pos:end="401:42">bitrate_delta</name> <operator pos:start="401:44" pos:end="401:44">=</operator> <literal type="number" pos:start="401:46" pos:end="401:46">0</literal></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="405:13" pos:end="405:27"><expr pos:start="405:13" pos:end="405:26"><name pos:start="405:13" pos:end="405:22">got_hybrid</name> <operator pos:start="405:24" pos:end="405:24">=</operator> <literal type="number" pos:start="405:26" pos:end="405:26">1</literal></expr>;</expr_stmt>

            <break pos:start="407:13" pos:end="407:18">break;</break>

        <case pos:start="409:9" pos:end="409:29">case <expr pos:start="409:14" pos:end="409:28"><name pos:start="409:14" pos:end="409:28">WP_ID_INT32INFO</name></expr>:</case>

            <if_stmt pos:start="411:13" pos:end="419:13"><if pos:start="411:13" pos:end="419:13">if<condition pos:start="411:15" pos:end="411:25">(<expr pos:start="411:16" pos:end="411:24"><name pos:start="411:16" pos:end="411:19">size</name> <operator pos:start="411:21" pos:end="411:22">!=</operator> <literal type="number" pos:start="411:24" pos:end="411:24">4</literal></expr>)</condition><block pos:start="411:26" pos:end="419:13">{<block_content pos:start="413:17" pos:end="417:25">

                <expr_stmt pos:start="413:17" pos:end="413:106"><expr pos:start="413:17" pos:end="413:105"><call pos:start="413:17" pos:end="413:105"><name pos:start="413:17" pos:end="413:22">av_log</name><argument_list pos:start="413:23" pos:end="413:105">(<argument pos:start="413:24" pos:end="413:28"><expr pos:start="413:24" pos:end="413:28"><name pos:start="413:24" pos:end="413:28">avctx</name></expr></argument>, <argument pos:start="413:31" pos:end="413:42"><expr pos:start="413:31" pos:end="413:42"><name pos:start="413:31" pos:end="413:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="413:45" pos:end="413:92"><expr pos:start="413:45" pos:end="413:92"><literal type="string" pos:start="413:45" pos:end="413:92">"Invalid INT32INFO, size = %i, sent_bits = %i\n"</literal></expr></argument>, <argument pos:start="413:95" pos:end="413:98"><expr pos:start="413:95" pos:end="413:98"><name pos:start="413:95" pos:end="413:98">size</name></expr></argument>, <argument pos:start="413:101" pos:end="413:104"><expr pos:start="413:101" pos:end="413:104"><operator pos:start="413:101" pos:end="413:101">*</operator><name pos:start="413:102" pos:end="413:104">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="415:17" pos:end="415:29"><expr pos:start="415:17" pos:end="415:28"><name pos:start="415:17" pos:end="415:19">buf</name> <operator pos:start="415:21" pos:end="415:22">+=</operator> <name pos:start="415:24" pos:end="415:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="417:17" pos:end="417:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="421:13" pos:end="441:13"><if pos:start="421:13" pos:end="423:39">if<condition pos:start="421:15" pos:end="421:22">(<expr pos:start="421:16" pos:end="421:21"><name pos:start="421:16" pos:end="421:21"><name pos:start="421:16" pos:end="421:18">buf</name><index pos:start="421:19" pos:end="421:21">[<expr pos:start="421:20" pos:end="421:20"><literal type="number" pos:start="421:20" pos:end="421:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="423:17" pos:end="423:39"><block_content pos:start="423:17" pos:end="423:39">

                <expr_stmt pos:start="423:17" pos:end="423:39"><expr pos:start="423:17" pos:end="423:38"><name pos:start="423:17" pos:end="423:29"><name pos:start="423:17" pos:end="423:17">s</name><operator pos:start="423:18" pos:end="423:19">-&gt;</operator><name pos:start="423:20" pos:end="423:29">extra_bits</name></name> <operator pos:start="423:31" pos:end="423:31">=</operator> <name pos:start="423:33" pos:end="423:38"><name pos:start="423:33" pos:end="423:35">buf</name><index pos:start="423:36" pos:end="423:38">[<expr pos:start="423:37" pos:end="423:37"><literal type="number" pos:start="423:37" pos:end="423:37">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="425:13" pos:end="427:34">else if<condition pos:start="425:20" pos:end="425:27">(<expr pos:start="425:21" pos:end="425:26"><name pos:start="425:21" pos:end="425:26"><name pos:start="425:21" pos:end="425:23">buf</name><index pos:start="425:24" pos:end="425:26">[<expr pos:start="425:25" pos:end="425:25"><literal type="number" pos:start="425:25" pos:end="425:25">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="427:17" pos:end="427:34"><block_content pos:start="427:17" pos:end="427:34">

                <expr_stmt pos:start="427:17" pos:end="427:34"><expr pos:start="427:17" pos:end="427:33"><name pos:start="427:17" pos:end="427:24"><name pos:start="427:17" pos:end="427:17">s</name><operator pos:start="427:18" pos:end="427:19">-&gt;</operator><name pos:start="427:20" pos:end="427:24">shift</name></name> <operator pos:start="427:26" pos:end="427:26">=</operator> <name pos:start="427:28" pos:end="427:33"><name pos:start="427:28" pos:end="427:30">buf</name><index pos:start="427:31" pos:end="427:33">[<expr pos:start="427:32" pos:end="427:32"><literal type="number" pos:start="427:32" pos:end="427:32">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="429:13" pos:end="435:13">else if<condition pos:start="429:20" pos:end="429:27">(<expr pos:start="429:21" pos:end="429:26"><name pos:start="429:21" pos:end="429:26"><name pos:start="429:21" pos:end="429:23">buf</name><index pos:start="429:24" pos:end="429:26">[<expr pos:start="429:25" pos:end="429:25"><literal type="number" pos:start="429:25" pos:end="429:25">2</literal></expr>]</index></name></expr>)</condition><block pos:start="429:28" pos:end="435:13">{<block_content pos:start="431:17" pos:end="433:34">

                <expr_stmt pos:start="431:17" pos:end="431:35"><expr pos:start="431:17" pos:end="431:34"><name pos:start="431:17" pos:end="431:22"><name pos:start="431:17" pos:end="431:17">s</name><operator pos:start="431:18" pos:end="431:19">-&gt;</operator><name pos:start="431:20" pos:end="431:22">and</name></name> <operator pos:start="431:24" pos:end="431:24">=</operator> <name pos:start="431:26" pos:end="431:30"><name pos:start="431:26" pos:end="431:26">s</name><operator pos:start="431:27" pos:end="431:28">-&gt;</operator><name pos:start="431:29" pos:end="431:30">or</name></name> <operator pos:start="431:32" pos:end="431:32">=</operator> <literal type="number" pos:start="431:34" pos:end="431:34">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="433:34"><expr pos:start="433:17" pos:end="433:33"><name pos:start="433:17" pos:end="433:24"><name pos:start="433:17" pos:end="433:17">s</name><operator pos:start="433:18" pos:end="433:19">-&gt;</operator><name pos:start="433:20" pos:end="433:24">shift</name></name> <operator pos:start="433:26" pos:end="433:26">=</operator> <name pos:start="433:28" pos:end="433:33"><name pos:start="433:28" pos:end="433:30">buf</name><index pos:start="433:31" pos:end="433:33">[<expr pos:start="433:32" pos:end="433:32"><literal type="number" pos:start="433:32" pos:end="433:32">2</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if><if type="elseif" pos:start="435:14" pos:end="441:13">else if<condition pos:start="435:21" pos:end="435:28">(<expr pos:start="435:22" pos:end="435:27"><name pos:start="435:22" pos:end="435:27"><name pos:start="435:22" pos:end="435:24">buf</name><index pos:start="435:25" pos:end="435:27">[<expr pos:start="435:26" pos:end="435:26"><literal type="number" pos:start="435:26" pos:end="435:26">3</literal></expr>]</index></name></expr>)</condition><block pos:start="435:29" pos:end="441:13">{<block_content pos:start="437:17" pos:end="439:34">

                <expr_stmt pos:start="437:17" pos:end="437:27"><expr pos:start="437:17" pos:end="437:26"><name pos:start="437:17" pos:end="437:22"><name pos:start="437:17" pos:end="437:17">s</name><operator pos:start="437:18" pos:end="437:19">-&gt;</operator><name pos:start="437:20" pos:end="437:22">and</name></name> <operator pos:start="437:24" pos:end="437:24">=</operator> <literal type="number" pos:start="437:26" pos:end="437:26">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="439:17" pos:end="439:34"><expr pos:start="439:17" pos:end="439:33"><name pos:start="439:17" pos:end="439:24"><name pos:start="439:17" pos:end="439:17">s</name><operator pos:start="439:18" pos:end="439:19">-&gt;</operator><name pos:start="439:20" pos:end="439:24">shift</name></name> <operator pos:start="439:26" pos:end="439:26">=</operator> <name pos:start="439:28" pos:end="439:33"><name pos:start="439:28" pos:end="439:30">buf</name><index pos:start="439:31" pos:end="439:33">[<expr pos:start="439:32" pos:end="439:32"><literal type="number" pos:start="439:32" pos:end="439:32">3</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="443:13" pos:end="443:21"><expr pos:start="443:13" pos:end="443:20"><name pos:start="443:13" pos:end="443:15">buf</name> <operator pos:start="443:17" pos:end="443:18">+=</operator> <literal type="number" pos:start="443:20" pos:end="443:20">4</literal></expr>;</expr_stmt>

            <break pos:start="445:13" pos:end="445:18">break;</break>

        <case pos:start="447:9" pos:end="447:29">case <expr pos:start="447:14" pos:end="447:28"><name pos:start="447:14" pos:end="447:28">WP_ID_FLOATINFO</name></expr>:</case>

            <if_stmt pos:start="449:13" pos:end="457:13"><if pos:start="449:13" pos:end="457:13">if<condition pos:start="449:15" pos:end="449:25">(<expr pos:start="449:16" pos:end="449:24"><name pos:start="449:16" pos:end="449:19">size</name> <operator pos:start="449:21" pos:end="449:22">!=</operator> <literal type="number" pos:start="449:24" pos:end="449:24">4</literal></expr>)</condition><block pos:start="449:26" pos:end="457:13">{<block_content pos:start="451:17" pos:end="455:25">

                <expr_stmt pos:start="451:17" pos:end="451:84"><expr pos:start="451:17" pos:end="451:83"><call pos:start="451:17" pos:end="451:83"><name pos:start="451:17" pos:end="451:22">av_log</name><argument_list pos:start="451:23" pos:end="451:83">(<argument pos:start="451:24" pos:end="451:28"><expr pos:start="451:24" pos:end="451:28"><name pos:start="451:24" pos:end="451:28">avctx</name></expr></argument>, <argument pos:start="451:31" pos:end="451:42"><expr pos:start="451:31" pos:end="451:42"><name pos:start="451:31" pos:end="451:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="451:45" pos:end="451:76"><expr pos:start="451:45" pos:end="451:76"><literal type="string" pos:start="451:45" pos:end="451:76">"Invalid FLOATINFO, size = %i\n"</literal></expr></argument>, <argument pos:start="451:79" pos:end="451:82"><expr pos:start="451:79" pos:end="451:82"><name pos:start="451:79" pos:end="451:82">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="453:17" pos:end="453:29"><expr pos:start="453:17" pos:end="453:28"><name pos:start="453:17" pos:end="453:19">buf</name> <operator pos:start="453:21" pos:end="453:22">+=</operator> <name pos:start="453:24" pos:end="453:28">ssize</name></expr>;</expr_stmt>

                <continue pos:start="455:17" pos:end="455:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:35"><expr pos:start="459:13" pos:end="459:34"><name pos:start="459:13" pos:end="459:25"><name pos:start="459:13" pos:end="459:13">s</name><operator pos:start="459:14" pos:end="459:15">-&gt;</operator><name pos:start="459:16" pos:end="459:25">float_flag</name></name> <operator pos:start="459:27" pos:end="459:27">=</operator> <name pos:start="459:29" pos:end="459:34"><name pos:start="459:29" pos:end="459:31">buf</name><index pos:start="459:32" pos:end="459:34">[<expr pos:start="459:33" pos:end="459:33"><literal type="number" pos:start="459:33" pos:end="459:33">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="461:13" pos:end="461:36"><expr pos:start="461:13" pos:end="461:35"><name pos:start="461:13" pos:end="461:26"><name pos:start="461:13" pos:end="461:13">s</name><operator pos:start="461:14" pos:end="461:15">-&gt;</operator><name pos:start="461:16" pos:end="461:26">float_shift</name></name> <operator pos:start="461:28" pos:end="461:28">=</operator> <name pos:start="461:30" pos:end="461:35"><name pos:start="461:30" pos:end="461:32">buf</name><index pos:start="461:33" pos:end="461:35">[<expr pos:start="461:34" pos:end="461:34"><literal type="number" pos:start="461:34" pos:end="461:34">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="463:13" pos:end="463:38"><expr pos:start="463:13" pos:end="463:37"><name pos:start="463:13" pos:end="463:28"><name pos:start="463:13" pos:end="463:13">s</name><operator pos:start="463:14" pos:end="463:15">-&gt;</operator><name pos:start="463:16" pos:end="463:28">float_max_exp</name></name> <operator pos:start="463:30" pos:end="463:30">=</operator> <name pos:start="463:32" pos:end="463:37"><name pos:start="463:32" pos:end="463:34">buf</name><index pos:start="463:35" pos:end="463:37">[<expr pos:start="463:36" pos:end="463:36"><literal type="number" pos:start="463:36" pos:end="463:36">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="465:13" pos:end="465:21"><expr pos:start="465:13" pos:end="465:20"><name pos:start="465:13" pos:end="465:15">buf</name> <operator pos:start="465:17" pos:end="465:18">+=</operator> <literal type="number" pos:start="465:20" pos:end="465:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="467:13" pos:end="467:26"><expr pos:start="467:13" pos:end="467:25"><name pos:start="467:13" pos:end="467:21">got_float</name> <operator pos:start="467:23" pos:end="467:23">=</operator> <literal type="number" pos:start="467:25" pos:end="467:25">1</literal></expr>;</expr_stmt>

            <break pos:start="469:13" pos:end="469:18">break;</break>

        <case pos:start="471:9" pos:end="471:24">case <expr pos:start="471:14" pos:end="471:23"><name pos:start="471:14" pos:end="471:23">WP_ID_DATA</name></expr>:</case>

            <expr_stmt pos:start="473:13" pos:end="473:42"><expr pos:start="473:13" pos:end="473:41"><name pos:start="473:13" pos:end="473:24"><name pos:start="473:13" pos:end="473:13">s</name><operator pos:start="473:14" pos:end="473:15">-&gt;</operator><name pos:start="473:16" pos:end="473:17">sc</name><operator pos:start="473:18" pos:end="473:18">.</operator><name pos:start="473:19" pos:end="473:24">offset</name></name> <operator pos:start="473:26" pos:end="473:26">=</operator> <name pos:start="473:28" pos:end="473:30">buf</name> <operator pos:start="473:32" pos:end="473:32">-</operator> <name pos:start="473:34" pos:end="473:41">orig_buf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="475:13" pos:end="475:36"><expr pos:start="475:13" pos:end="475:35"><name pos:start="475:13" pos:end="475:22"><name pos:start="475:13" pos:end="475:13">s</name><operator pos:start="475:14" pos:end="475:15">-&gt;</operator><name pos:start="475:16" pos:end="475:17">sc</name><operator pos:start="475:18" pos:end="475:18">.</operator><name pos:start="475:19" pos:end="475:22">size</name></name>   <operator pos:start="475:26" pos:end="475:26">=</operator> <name pos:start="475:28" pos:end="475:31">size</name> <operator pos:start="475:33" pos:end="475:33">*</operator> <literal type="number" pos:start="475:35" pos:end="475:35">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="477:13" pos:end="477:49"><expr pos:start="477:13" pos:end="477:48"><call pos:start="477:13" pos:end="477:48"><name pos:start="477:13" pos:end="477:25">init_get_bits</name><argument_list pos:start="477:26" pos:end="477:48">(<argument pos:start="477:27" pos:end="477:32"><expr pos:start="477:27" pos:end="477:32"><operator pos:start="477:27" pos:end="477:27">&amp;</operator><name pos:start="477:28" pos:end="477:32"><name pos:start="477:28" pos:end="477:28">s</name><operator pos:start="477:29" pos:end="477:30">-&gt;</operator><name pos:start="477:31" pos:end="477:32">gb</name></name></expr></argument>, <argument pos:start="477:35" pos:end="477:37"><expr pos:start="477:35" pos:end="477:37"><name pos:start="477:35" pos:end="477:37">buf</name></expr></argument>, <argument pos:start="477:40" pos:end="477:47"><expr pos:start="477:40" pos:end="477:47"><name pos:start="477:40" pos:end="477:43">size</name> <operator pos:start="477:45" pos:end="477:45">*</operator> <literal type="number" pos:start="477:47" pos:end="477:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="479:13" pos:end="479:36"><expr pos:start="479:13" pos:end="479:35"><name pos:start="479:13" pos:end="479:24"><name pos:start="479:13" pos:end="479:13">s</name><operator pos:start="479:14" pos:end="479:15">-&gt;</operator><name pos:start="479:16" pos:end="479:24">data_size</name></name> <operator pos:start="479:26" pos:end="479:26">=</operator> <name pos:start="479:28" pos:end="479:31">size</name> <operator pos:start="479:33" pos:end="479:33">*</operator> <literal type="number" pos:start="479:35" pos:end="479:35">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:24"><expr pos:start="481:13" pos:end="481:23"><name pos:start="481:13" pos:end="481:15">buf</name> <operator pos:start="481:17" pos:end="481:18">+=</operator> <name pos:start="481:20" pos:end="481:23">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:23"><expr pos:start="483:13" pos:end="483:22"><name pos:start="483:13" pos:end="483:18">got_bs</name> <operator pos:start="483:20" pos:end="483:20">=</operator> <literal type="number" pos:start="483:22" pos:end="483:22">1</literal></expr>;</expr_stmt>

            <break pos:start="485:13" pos:end="485:18">break;</break>

        <case pos:start="487:9" pos:end="487:29">case <expr pos:start="487:14" pos:end="487:28"><name pos:start="487:14" pos:end="487:28">WP_ID_EXTRABITS</name></expr>:</case>

            <if_stmt pos:start="489:13" pos:end="497:13"><if pos:start="489:13" pos:end="497:13">if<condition pos:start="489:15" pos:end="489:25">(<expr pos:start="489:16" pos:end="489:24"><name pos:start="489:16" pos:end="489:19">size</name> <operator pos:start="489:21" pos:end="489:22">&lt;=</operator> <literal type="number" pos:start="489:24" pos:end="489:24">4</literal></expr>)</condition><block pos:start="489:26" pos:end="497:13">{<block_content pos:start="491:17" pos:end="495:25">

                <expr_stmt pos:start="491:17" pos:end="491:84"><expr pos:start="491:17" pos:end="491:83"><call pos:start="491:17" pos:end="491:83"><name pos:start="491:17" pos:end="491:22">av_log</name><argument_list pos:start="491:23" pos:end="491:83">(<argument pos:start="491:24" pos:end="491:28"><expr pos:start="491:24" pos:end="491:28"><name pos:start="491:24" pos:end="491:28">avctx</name></expr></argument>, <argument pos:start="491:31" pos:end="491:42"><expr pos:start="491:31" pos:end="491:42"><name pos:start="491:31" pos:end="491:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="491:45" pos:end="491:76"><expr pos:start="491:45" pos:end="491:76"><literal type="string" pos:start="491:45" pos:end="491:76">"Invalid EXTRABITS, size = %i\n"</literal></expr></argument>, <argument pos:start="491:79" pos:end="491:82"><expr pos:start="491:79" pos:end="491:82"><name pos:start="491:79" pos:end="491:82">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="493:17" pos:end="493:28"><expr pos:start="493:17" pos:end="493:27"><name pos:start="493:17" pos:end="493:19">buf</name> <operator pos:start="493:21" pos:end="493:22">+=</operator> <name pos:start="493:24" pos:end="493:27">size</name></expr>;</expr_stmt>

                <continue pos:start="495:17" pos:end="495:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="499:13" pos:end="499:48"><expr pos:start="499:13" pos:end="499:47"><name pos:start="499:13" pos:end="499:30"><name pos:start="499:13" pos:end="499:13">s</name><operator pos:start="499:14" pos:end="499:15">-&gt;</operator><name pos:start="499:16" pos:end="499:23">extra_sc</name><operator pos:start="499:24" pos:end="499:24">.</operator><name pos:start="499:25" pos:end="499:30">offset</name></name> <operator pos:start="499:32" pos:end="499:32">=</operator> <name pos:start="499:34" pos:end="499:36">buf</name> <operator pos:start="499:38" pos:end="499:38">-</operator> <name pos:start="499:40" pos:end="499:47">orig_buf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:42"><expr pos:start="501:13" pos:end="501:41"><name pos:start="501:13" pos:end="501:28"><name pos:start="501:13" pos:end="501:13">s</name><operator pos:start="501:14" pos:end="501:15">-&gt;</operator><name pos:start="501:16" pos:end="501:23">extra_sc</name><operator pos:start="501:24" pos:end="501:24">.</operator><name pos:start="501:25" pos:end="501:28">size</name></name>   <operator pos:start="501:32" pos:end="501:32">=</operator> <name pos:start="501:34" pos:end="501:37">size</name> <operator pos:start="501:39" pos:end="501:39">*</operator> <literal type="number" pos:start="501:41" pos:end="501:41">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:60"><expr pos:start="503:13" pos:end="503:59"><call pos:start="503:13" pos:end="503:59"><name pos:start="503:13" pos:end="503:25">init_get_bits</name><argument_list pos:start="503:26" pos:end="503:59">(<argument pos:start="503:27" pos:end="503:43"><expr pos:start="503:27" pos:end="503:43"><operator pos:start="503:27" pos:end="503:27">&amp;</operator><name pos:start="503:28" pos:end="503:43"><name pos:start="503:28" pos:end="503:28">s</name><operator pos:start="503:29" pos:end="503:30">-&gt;</operator><name pos:start="503:31" pos:end="503:43">gb_extra_bits</name></name></expr></argument>, <argument pos:start="503:46" pos:end="503:48"><expr pos:start="503:46" pos:end="503:48"><name pos:start="503:46" pos:end="503:48">buf</name></expr></argument>, <argument pos:start="503:51" pos:end="503:58"><expr pos:start="503:51" pos:end="503:58"><name pos:start="503:51" pos:end="503:54">size</name> <operator pos:start="503:56" pos:end="503:56">*</operator> <literal type="number" pos:start="503:58" pos:end="503:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="505:13" pos:end="505:69"><expr pos:start="505:13" pos:end="505:68"><name pos:start="505:13" pos:end="505:29"><name pos:start="505:13" pos:end="505:13">s</name><operator pos:start="505:14" pos:end="505:15">-&gt;</operator><name pos:start="505:16" pos:end="505:29">crc_extra_bits</name></name> <operator pos:start="505:31" pos:end="505:31">=</operator> <call pos:start="505:33" pos:end="505:68"><name pos:start="505:33" pos:end="505:45">get_bits_long</name><argument_list pos:start="505:46" pos:end="505:68">(<argument pos:start="505:47" pos:end="505:63"><expr pos:start="505:47" pos:end="505:63"><operator pos:start="505:47" pos:end="505:47">&amp;</operator><name pos:start="505:48" pos:end="505:63"><name pos:start="505:48" pos:end="505:48">s</name><operator pos:start="505:49" pos:end="505:50">-&gt;</operator><name pos:start="505:51" pos:end="505:63">gb_extra_bits</name></name></expr></argument>, <argument pos:start="505:66" pos:end="505:67"><expr pos:start="505:66" pos:end="505:67"><literal type="number" pos:start="505:66" pos:end="505:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:24"><expr pos:start="507:13" pos:end="507:23"><name pos:start="507:13" pos:end="507:15">buf</name> <operator pos:start="507:17" pos:end="507:18">+=</operator> <name pos:start="507:20" pos:end="507:23">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:34"><expr pos:start="509:13" pos:end="509:33"><name pos:start="509:13" pos:end="509:29"><name pos:start="509:13" pos:end="509:13">s</name><operator pos:start="509:14" pos:end="509:15">-&gt;</operator><name pos:start="509:16" pos:end="509:29">got_extra_bits</name></name> <operator pos:start="509:31" pos:end="509:31">=</operator> <literal type="number" pos:start="509:33" pos:end="509:33">1</literal></expr>;</expr_stmt>

            <break pos:start="511:13" pos:end="511:18">break;</break>

        <case pos:start="513:9" pos:end="513:28">case <expr pos:start="513:14" pos:end="513:27"><name pos:start="513:14" pos:end="513:27">WP_ID_CHANINFO</name></expr>:</case>

            <if_stmt pos:start="515:13" pos:end="521:13"><if pos:start="515:13" pos:end="521:13">if<condition pos:start="515:15" pos:end="515:25">(<expr pos:start="515:16" pos:end="515:24"><name pos:start="515:16" pos:end="515:19">size</name> <operator pos:start="515:21" pos:end="515:22">&lt;=</operator> <literal type="number" pos:start="515:24" pos:end="515:24">1</literal></expr>)</condition><block pos:start="515:26" pos:end="521:13">{<block_content pos:start="517:17" pos:end="519:26">

                <expr_stmt pos:start="517:17" pos:end="517:82"><expr pos:start="517:17" pos:end="517:81"><call pos:start="517:17" pos:end="517:81"><name pos:start="517:17" pos:end="517:22">av_log</name><argument_list pos:start="517:23" pos:end="517:81">(<argument pos:start="517:24" pos:end="517:28"><expr pos:start="517:24" pos:end="517:28"><name pos:start="517:24" pos:end="517:28">avctx</name></expr></argument>, <argument pos:start="517:31" pos:end="517:42"><expr pos:start="517:31" pos:end="517:42"><name pos:start="517:31" pos:end="517:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="517:45" pos:end="517:80"><expr pos:start="517:45" pos:end="517:80"><literal type="string" pos:start="517:45" pos:end="517:80">"Insufficient channel information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="519:17" pos:end="519:26">return <expr pos:start="519:24" pos:end="519:25"><operator pos:start="519:24" pos:end="519:24">-</operator><literal type="number" pos:start="519:25" pos:end="519:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="523:13" pos:end="523:26"><expr pos:start="523:13" pos:end="523:25"><name pos:start="523:13" pos:end="523:16">chan</name> <operator pos:start="523:18" pos:end="523:18">=</operator> <operator pos:start="523:20" pos:end="523:20">*</operator><name pos:start="523:21" pos:end="523:23">buf</name><operator pos:start="523:24" pos:end="523:25">++</operator></expr>;</expr_stmt>

            <switch pos:start="525:13" pos:end="567:13">switch<condition pos:start="525:19" pos:end="525:28">(<expr pos:start="525:20" pos:end="525:27"><name pos:start="525:20" pos:end="525:23">size</name> <operator pos:start="525:25" pos:end="525:25">-</operator> <literal type="number" pos:start="525:27" pos:end="525:27">2</literal></expr>)</condition><block pos:start="525:29" pos:end="567:13">{<block_content pos:start="527:13" pos:end="565:47">

            <case pos:start="527:13" pos:end="527:19">case <expr pos:start="527:18" pos:end="527:18"><literal type="number" pos:start="527:18" pos:end="527:18">0</literal></expr>:</case>

                <expr_stmt pos:start="529:17" pos:end="529:30"><expr pos:start="529:17" pos:end="529:29"><name pos:start="529:17" pos:end="529:22">chmask</name> <operator pos:start="529:24" pos:end="529:24">=</operator> <operator pos:start="529:26" pos:end="529:26">*</operator><name pos:start="529:27" pos:end="529:29">buf</name></expr>;</expr_stmt>

                <break pos:start="531:17" pos:end="531:22">break;</break>

            <case pos:start="533:13" pos:end="533:19">case <expr pos:start="533:18" pos:end="533:18"><literal type="number" pos:start="533:18" pos:end="533:18">1</literal></expr>:</case>

                <expr_stmt pos:start="535:17" pos:end="535:38"><expr pos:start="535:17" pos:end="535:37"><name pos:start="535:17" pos:end="535:22">chmask</name> <operator pos:start="535:24" pos:end="535:24">=</operator> <call pos:start="535:26" pos:end="535:37"><name pos:start="535:26" pos:end="535:32">AV_RL16</name><argument_list pos:start="535:33" pos:end="535:37">(<argument pos:start="535:34" pos:end="535:36"><expr pos:start="535:34" pos:end="535:36"><name pos:start="535:34" pos:end="535:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="537:17" pos:end="537:22">break;</break>

            <case pos:start="539:13" pos:end="539:19">case <expr pos:start="539:18" pos:end="539:18"><literal type="number" pos:start="539:18" pos:end="539:18">2</literal></expr>:</case>

                <expr_stmt pos:start="541:17" pos:end="541:38"><expr pos:start="541:17" pos:end="541:37"><name pos:start="541:17" pos:end="541:22">chmask</name> <operator pos:start="541:24" pos:end="541:24">=</operator> <call pos:start="541:26" pos:end="541:37"><name pos:start="541:26" pos:end="541:32">AV_RL24</name><argument_list pos:start="541:33" pos:end="541:37">(<argument pos:start="541:34" pos:end="541:36"><expr pos:start="541:34" pos:end="541:36"><name pos:start="541:34" pos:end="541:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="543:17" pos:end="543:22">break;</break>

            <case pos:start="545:13" pos:end="545:19">case <expr pos:start="545:18" pos:end="545:18"><literal type="number" pos:start="545:18" pos:end="545:18">3</literal></expr>:</case>

                <expr_stmt pos:start="547:17" pos:end="547:38"><expr pos:start="547:17" pos:end="547:37"><name pos:start="547:17" pos:end="547:22">chmask</name> <operator pos:start="547:24" pos:end="547:24">=</operator> <call pos:start="547:26" pos:end="547:37"><name pos:start="547:26" pos:end="547:32">AV_RL32</name><argument_list pos:start="547:33" pos:end="547:37">(<argument pos:start="547:34" pos:end="547:36"><expr pos:start="547:34" pos:end="547:36"><name pos:start="547:34" pos:end="547:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="549:17" pos:end="549:22">break;</break>

            <case pos:start="551:13" pos:end="551:19">case <expr pos:start="551:18" pos:end="551:18"><literal type="number" pos:start="551:18" pos:end="551:18">5</literal></expr>:</case>

                <expr_stmt pos:start="553:17" pos:end="553:44"><expr pos:start="553:17" pos:end="553:43"><name pos:start="553:17" pos:end="553:20">chan</name> <operator pos:start="553:22" pos:end="553:23">|=</operator> <operator pos:start="553:25" pos:end="553:25">(</operator><name pos:start="553:26" pos:end="553:31"><name pos:start="553:26" pos:end="553:28">buf</name><index pos:start="553:29" pos:end="553:31">[<expr pos:start="553:30" pos:end="553:30"><literal type="number" pos:start="553:30" pos:end="553:30">1</literal></expr>]</index></name> <operator pos:start="553:33" pos:end="553:33">&amp;</operator> <literal type="number" pos:start="553:35" pos:end="553:37">0xF</literal><operator pos:start="553:38" pos:end="553:38">)</operator> <operator pos:start="553:40" pos:end="553:41">&lt;&lt;</operator> <literal type="number" pos:start="553:43" pos:end="553:43">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="555:17" pos:end="555:42"><expr pos:start="555:17" pos:end="555:41"><name pos:start="555:17" pos:end="555:22">chmask</name> <operator pos:start="555:24" pos:end="555:24">=</operator> <call pos:start="555:26" pos:end="555:41"><name pos:start="555:26" pos:end="555:32">AV_RL24</name><argument_list pos:start="555:33" pos:end="555:41">(<argument pos:start="555:34" pos:end="555:40"><expr pos:start="555:34" pos:end="555:40"><name pos:start="555:34" pos:end="555:36">buf</name> <operator pos:start="555:38" pos:end="555:38">+</operator> <literal type="number" pos:start="555:40" pos:end="555:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="557:17" pos:end="557:22">break;</break>

            <default pos:start="559:13" pos:end="559:20">default:</default>

                <expr_stmt pos:start="561:17" pos:end="561:84"><expr pos:start="561:17" pos:end="561:83"><call pos:start="561:17" pos:end="561:83"><name pos:start="561:17" pos:end="561:22">av_log</name><argument_list pos:start="561:23" pos:end="561:83">(<argument pos:start="561:24" pos:end="561:28"><expr pos:start="561:24" pos:end="561:28"><name pos:start="561:24" pos:end="561:28">avctx</name></expr></argument>, <argument pos:start="561:31" pos:end="561:42"><expr pos:start="561:31" pos:end="561:42"><name pos:start="561:31" pos:end="561:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="561:45" pos:end="561:76"><expr pos:start="561:45" pos:end="561:76"><literal type="string" pos:start="561:45" pos:end="561:76">"Invalid channel info size %d\n"</literal></expr></argument>, <argument pos:start="561:79" pos:end="561:82"><expr pos:start="561:79" pos:end="561:82"><name pos:start="561:79" pos:end="561:82">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="563:17" pos:end="563:39"><expr pos:start="563:17" pos:end="563:38"><name pos:start="563:17" pos:end="563:20">chan</name> <operator pos:start="563:22" pos:end="563:22">=</operator> <name pos:start="563:24" pos:end="563:38"><name pos:start="563:24" pos:end="563:28">avctx</name><operator pos:start="563:29" pos:end="563:30">-&gt;</operator><name pos:start="563:31" pos:end="563:38">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="565:17" pos:end="565:47"><expr pos:start="565:17" pos:end="565:46"><name pos:start="565:17" pos:end="565:22">chmask</name> <operator pos:start="565:24" pos:end="565:24">=</operator> <name pos:start="565:26" pos:end="565:46"><name pos:start="565:26" pos:end="565:30">avctx</name><operator pos:start="565:31" pos:end="565:32">-&gt;</operator><name pos:start="565:33" pos:end="565:46">channel_layout</name></name></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <if_stmt pos:start="569:13" pos:end="577:13"><if pos:start="569:13" pos:end="577:13">if<condition pos:start="569:15" pos:end="569:39">(<expr pos:start="569:16" pos:end="569:38"><name pos:start="569:16" pos:end="569:19">chan</name> <operator pos:start="569:21" pos:end="569:22">!=</operator> <name pos:start="569:24" pos:end="569:38"><name pos:start="569:24" pos:end="569:28">avctx</name><operator pos:start="569:29" pos:end="569:30">-&gt;</operator><name pos:start="569:31" pos:end="569:38">channels</name></name></expr>)</condition><block pos:start="569:40" pos:end="577:13">{<block_content pos:start="571:17" pos:end="575:26">

                <expr_stmt pos:start="571:17" pos:end="573:46"><expr pos:start="571:17" pos:end="573:45"><call pos:start="571:17" pos:end="573:45"><name pos:start="571:17" pos:end="571:22">av_log</name><argument_list pos:start="571:23" pos:end="573:45">(<argument pos:start="571:24" pos:end="571:28"><expr pos:start="571:24" pos:end="571:28"><name pos:start="571:24" pos:end="571:28">avctx</name></expr></argument>, <argument pos:start="571:31" pos:end="571:42"><expr pos:start="571:31" pos:end="571:42"><name pos:start="571:31" pos:end="571:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="571:45" pos:end="571:114"><expr pos:start="571:45" pos:end="571:114"><literal type="string" pos:start="571:45" pos:end="571:114">"Block reports total %d channels, decoder believes it's %d channels\n"</literal></expr></argument>,

                       <argument pos:start="573:24" pos:end="573:27"><expr pos:start="573:24" pos:end="573:27"><name pos:start="573:24" pos:end="573:27">chan</name></expr></argument>, <argument pos:start="573:30" pos:end="573:44"><expr pos:start="573:30" pos:end="573:44"><name pos:start="573:30" pos:end="573:44"><name pos:start="573:30" pos:end="573:34">avctx</name><operator pos:start="573:35" pos:end="573:36">-&gt;</operator><name pos:start="573:37" pos:end="573:44">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="575:17" pos:end="575:26">return <expr pos:start="575:24" pos:end="575:25"><operator pos:start="575:24" pos:end="575:24">-</operator><literal type="number" pos:start="575:25" pos:end="575:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="579:13" pos:end="581:47"><if pos:start="579:13" pos:end="581:47">if<condition pos:start="579:15" pos:end="579:38">(<expr pos:start="579:16" pos:end="579:37"><operator pos:start="579:16" pos:end="579:16">!</operator><name pos:start="579:17" pos:end="579:37"><name pos:start="579:17" pos:end="579:21">avctx</name><operator pos:start="579:22" pos:end="579:23">-&gt;</operator><name pos:start="579:24" pos:end="579:37">channel_layout</name></name></expr>)</condition><block type="pseudo" pos:start="581:17" pos:end="581:47"><block_content pos:start="581:17" pos:end="581:47">

                <expr_stmt pos:start="581:17" pos:end="581:47"><expr pos:start="581:17" pos:end="581:46"><name pos:start="581:17" pos:end="581:37"><name pos:start="581:17" pos:end="581:21">avctx</name><operator pos:start="581:22" pos:end="581:23">-&gt;</operator><name pos:start="581:24" pos:end="581:37">channel_layout</name></name> <operator pos:start="581:39" pos:end="581:39">=</operator> <name pos:start="581:41" pos:end="581:46">chmask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:28"><expr pos:start="583:13" pos:end="583:27"><name pos:start="583:13" pos:end="583:15">buf</name> <operator pos:start="583:17" pos:end="583:18">+=</operator> <name pos:start="583:20" pos:end="583:23">size</name> <operator pos:start="583:25" pos:end="583:25">-</operator> <literal type="number" pos:start="583:27" pos:end="583:27">1</literal></expr>;</expr_stmt>

            <break pos:start="585:13" pos:end="585:18">break;</break>

        <default pos:start="587:9" pos:end="587:16">default:</default>

            <expr_stmt pos:start="589:13" pos:end="589:24"><expr pos:start="589:13" pos:end="589:23"><name pos:start="589:13" pos:end="589:15">buf</name> <operator pos:start="589:17" pos:end="589:18">+=</operator> <name pos:start="589:20" pos:end="589:23">size</name></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="593:9" pos:end="593:34"><if pos:start="593:9" pos:end="593:34">if<condition pos:start="593:11" pos:end="593:27">(<expr pos:start="593:12" pos:end="593:26"><name pos:start="593:12" pos:end="593:13">id</name> <operator pos:start="593:15" pos:end="593:15">&amp;</operator> <name pos:start="593:17" pos:end="593:26">WP_IDF_ODD</name></expr>)</condition><block type="pseudo" pos:start="593:29" pos:end="593:34"><block_content pos:start="593:29" pos:end="593:34"> <expr_stmt pos:start="593:29" pos:end="593:34"><expr pos:start="593:29" pos:end="593:33"><name pos:start="593:29" pos:end="593:31">buf</name><operator pos:start="593:32" pos:end="593:33">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>



        <if_stmt pos:start="599:9" pos:end="605:9"><if pos:start="599:9" pos:end="605:9">if<condition pos:start="599:11" pos:end="599:22">(<expr pos:start="599:12" pos:end="599:21"><operator pos:start="599:12" pos:end="599:12">!</operator><name pos:start="599:13" pos:end="599:21">got_terms</name></expr>)</condition><block pos:start="599:23" pos:end="605:9">{<block_content pos:start="601:13" pos:end="603:22">

            <expr_stmt pos:start="601:13" pos:end="601:79"><expr pos:start="601:13" pos:end="601:78"><call pos:start="601:13" pos:end="601:78"><name pos:start="601:13" pos:end="601:18">av_log</name><argument_list pos:start="601:19" pos:end="601:78">(<argument pos:start="601:20" pos:end="601:24"><expr pos:start="601:20" pos:end="601:24"><name pos:start="601:20" pos:end="601:24">avctx</name></expr></argument>, <argument pos:start="601:27" pos:end="601:38"><expr pos:start="601:27" pos:end="601:38"><name pos:start="601:27" pos:end="601:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="601:41" pos:end="601:77"><expr pos:start="601:41" pos:end="601:77"><literal type="string" pos:start="601:41" pos:end="601:77">"No block with decorrelation terms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="603:13" pos:end="603:22">return <expr pos:start="603:20" pos:end="603:21"><operator pos:start="603:20" pos:end="603:20">-</operator><literal type="number" pos:start="603:21" pos:end="603:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="607:9" pos:end="613:9"><if pos:start="607:9" pos:end="613:9">if<condition pos:start="607:11" pos:end="607:24">(<expr pos:start="607:12" pos:end="607:23"><operator pos:start="607:12" pos:end="607:12">!</operator><name pos:start="607:13" pos:end="607:23">got_weights</name></expr>)</condition><block pos:start="607:25" pos:end="613:9">{<block_content pos:start="609:13" pos:end="611:22">

            <expr_stmt pos:start="609:13" pos:end="609:81"><expr pos:start="609:13" pos:end="609:80"><call pos:start="609:13" pos:end="609:80"><name pos:start="609:13" pos:end="609:18">av_log</name><argument_list pos:start="609:19" pos:end="609:80">(<argument pos:start="609:20" pos:end="609:24"><expr pos:start="609:20" pos:end="609:24"><name pos:start="609:20" pos:end="609:24">avctx</name></expr></argument>, <argument pos:start="609:27" pos:end="609:38"><expr pos:start="609:27" pos:end="609:38"><name pos:start="609:27" pos:end="609:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="609:41" pos:end="609:79"><expr pos:start="609:41" pos:end="609:79"><literal type="string" pos:start="609:41" pos:end="609:79">"No block with decorrelation weights\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="611:13" pos:end="611:22">return <expr pos:start="611:20" pos:end="611:21"><operator pos:start="611:20" pos:end="611:20">-</operator><literal type="number" pos:start="611:21" pos:end="611:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="615:9" pos:end="621:9"><if pos:start="615:9" pos:end="621:9">if<condition pos:start="615:11" pos:end="615:24">(<expr pos:start="615:12" pos:end="615:23"><operator pos:start="615:12" pos:end="615:12">!</operator><name pos:start="615:13" pos:end="615:23">got_samples</name></expr>)</condition><block pos:start="615:25" pos:end="621:9">{<block_content pos:start="617:13" pos:end="619:22">

            <expr_stmt pos:start="617:13" pos:end="617:81"><expr pos:start="617:13" pos:end="617:80"><call pos:start="617:13" pos:end="617:80"><name pos:start="617:13" pos:end="617:18">av_log</name><argument_list pos:start="617:19" pos:end="617:80">(<argument pos:start="617:20" pos:end="617:24"><expr pos:start="617:20" pos:end="617:24"><name pos:start="617:20" pos:end="617:24">avctx</name></expr></argument>, <argument pos:start="617:27" pos:end="617:38"><expr pos:start="617:27" pos:end="617:38"><name pos:start="617:27" pos:end="617:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="617:41" pos:end="617:79"><expr pos:start="617:41" pos:end="617:79"><literal type="string" pos:start="617:41" pos:end="617:79">"No block with decorrelation samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="619:13" pos:end="619:22">return <expr pos:start="619:20" pos:end="619:21"><operator pos:start="619:20" pos:end="619:20">-</operator><literal type="number" pos:start="619:21" pos:end="619:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="623:9" pos:end="629:9"><if pos:start="623:9" pos:end="629:9">if<condition pos:start="623:11" pos:end="623:24">(<expr pos:start="623:12" pos:end="623:23"><operator pos:start="623:12" pos:end="623:12">!</operator><name pos:start="623:13" pos:end="623:23">got_entropy</name></expr>)</condition><block pos:start="623:25" pos:end="629:9">{<block_content pos:start="625:13" pos:end="627:22">

            <expr_stmt pos:start="625:13" pos:end="625:72"><expr pos:start="625:13" pos:end="625:71"><call pos:start="625:13" pos:end="625:71"><name pos:start="625:13" pos:end="625:18">av_log</name><argument_list pos:start="625:19" pos:end="625:71">(<argument pos:start="625:20" pos:end="625:24"><expr pos:start="625:20" pos:end="625:24"><name pos:start="625:20" pos:end="625:24">avctx</name></expr></argument>, <argument pos:start="625:27" pos:end="625:38"><expr pos:start="625:27" pos:end="625:38"><name pos:start="625:27" pos:end="625:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="625:41" pos:end="625:70"><expr pos:start="625:41" pos:end="625:70"><literal type="string" pos:start="625:41" pos:end="625:70">"No block with entropy info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="627:13" pos:end="627:22">return <expr pos:start="627:20" pos:end="627:21"><operator pos:start="627:20" pos:end="627:20">-</operator><literal type="number" pos:start="627:21" pos:end="627:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="631:9" pos:end="637:9"><if pos:start="631:9" pos:end="637:9">if<condition pos:start="631:11" pos:end="631:36">(<expr pos:start="631:12" pos:end="631:35"><name pos:start="631:12" pos:end="631:20"><name pos:start="631:12" pos:end="631:12">s</name><operator pos:start="631:13" pos:end="631:14">-&gt;</operator><name pos:start="631:15" pos:end="631:20">hybrid</name></name> <operator pos:start="631:22" pos:end="631:23">&amp;&amp;</operator> <operator pos:start="631:25" pos:end="631:25">!</operator><name pos:start="631:26" pos:end="631:35">got_hybrid</name></expr>)</condition><block pos:start="631:37" pos:end="637:9">{<block_content pos:start="633:13" pos:end="635:22">

            <expr_stmt pos:start="633:13" pos:end="633:69"><expr pos:start="633:13" pos:end="633:68"><call pos:start="633:13" pos:end="633:68"><name pos:start="633:13" pos:end="633:18">av_log</name><argument_list pos:start="633:19" pos:end="633:68">(<argument pos:start="633:20" pos:end="633:24"><expr pos:start="633:20" pos:end="633:24"><name pos:start="633:20" pos:end="633:24">avctx</name></expr></argument>, <argument pos:start="633:27" pos:end="633:38"><expr pos:start="633:27" pos:end="633:38"><name pos:start="633:27" pos:end="633:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="633:41" pos:end="633:67"><expr pos:start="633:41" pos:end="633:67"><literal type="string" pos:start="633:41" pos:end="633:67">"Hybrid config not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="635:13" pos:end="635:22">return <expr pos:start="635:20" pos:end="635:21"><operator pos:start="635:20" pos:end="635:20">-</operator><literal type="number" pos:start="635:21" pos:end="635:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="639:9" pos:end="645:9"><if pos:start="639:9" pos:end="645:9">if<condition pos:start="639:11" pos:end="639:19">(<expr pos:start="639:12" pos:end="639:18"><operator pos:start="639:12" pos:end="639:12">!</operator><name pos:start="639:13" pos:end="639:18">got_bs</name></expr>)</condition><block pos:start="639:20" pos:end="645:9">{<block_content pos:start="641:13" pos:end="643:22">

            <expr_stmt pos:start="641:13" pos:end="641:70"><expr pos:start="641:13" pos:end="641:69"><call pos:start="641:13" pos:end="641:69"><name pos:start="641:13" pos:end="641:18">av_log</name><argument_list pos:start="641:19" pos:end="641:69">(<argument pos:start="641:20" pos:end="641:24"><expr pos:start="641:20" pos:end="641:24"><name pos:start="641:20" pos:end="641:24">avctx</name></expr></argument>, <argument pos:start="641:27" pos:end="641:38"><expr pos:start="641:27" pos:end="641:38"><name pos:start="641:27" pos:end="641:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="641:41" pos:end="641:68"><expr pos:start="641:41" pos:end="641:68"><literal type="string" pos:start="641:41" pos:end="641:68">"Packed samples not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="643:13" pos:end="643:22">return <expr pos:start="643:20" pos:end="643:21"><operator pos:start="643:20" pos:end="643:20">-</operator><literal type="number" pos:start="643:21" pos:end="643:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="647:9" pos:end="653:9"><if pos:start="647:9" pos:end="653:9">if<condition pos:start="647:11" pos:end="647:64">(<expr pos:start="647:12" pos:end="647:63"><operator pos:start="647:12" pos:end="647:12">!</operator><name pos:start="647:13" pos:end="647:21">got_float</name> <operator pos:start="647:23" pos:end="647:24">&amp;&amp;</operator> <name pos:start="647:26" pos:end="647:42"><name pos:start="647:26" pos:end="647:30">avctx</name><operator pos:start="647:31" pos:end="647:32">-&gt;</operator><name pos:start="647:33" pos:end="647:42">sample_fmt</name></name> <operator pos:start="647:44" pos:end="647:45">==</operator> <name pos:start="647:47" pos:end="647:63">AV_SAMPLE_FMT_FLT</name></expr>)</condition><block pos:start="647:65" pos:end="653:9">{<block_content pos:start="649:13" pos:end="651:22">

            <expr_stmt pos:start="649:13" pos:end="649:73"><expr pos:start="649:13" pos:end="649:72"><call pos:start="649:13" pos:end="649:72"><name pos:start="649:13" pos:end="649:18">av_log</name><argument_list pos:start="649:19" pos:end="649:72">(<argument pos:start="649:20" pos:end="649:24"><expr pos:start="649:20" pos:end="649:24"><name pos:start="649:20" pos:end="649:24">avctx</name></expr></argument>, <argument pos:start="649:27" pos:end="649:38"><expr pos:start="649:27" pos:end="649:38"><name pos:start="649:27" pos:end="649:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="649:41" pos:end="649:71"><expr pos:start="649:41" pos:end="649:71"><literal type="string" pos:start="649:41" pos:end="649:71">"Float information not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="651:13" pos:end="651:22">return <expr pos:start="651:20" pos:end="651:21"><operator pos:start="651:20" pos:end="651:20">-</operator><literal type="number" pos:start="651:21" pos:end="651:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="655:9" pos:end="669:9"><if pos:start="655:9" pos:end="669:9">if<condition pos:start="655:11" pos:end="655:71">(<expr pos:start="655:12" pos:end="655:70"><name pos:start="655:12" pos:end="655:28"><name pos:start="655:12" pos:end="655:12">s</name><operator pos:start="655:13" pos:end="655:14">-&gt;</operator><name pos:start="655:15" pos:end="655:28">got_extra_bits</name></name> <operator pos:start="655:30" pos:end="655:31">&amp;&amp;</operator> <name pos:start="655:33" pos:end="655:49"><name pos:start="655:33" pos:end="655:37">avctx</name><operator pos:start="655:38" pos:end="655:39">-&gt;</operator><name pos:start="655:40" pos:end="655:49">sample_fmt</name></name> <operator pos:start="655:51" pos:end="655:52">!=</operator> <name pos:start="655:54" pos:end="655:70">AV_SAMPLE_FMT_FLT</name></expr>)</condition><block pos:start="655:72" pos:end="669:9">{<block_content pos:start="657:13" pos:end="667:13">

            <decl_stmt pos:start="657:13" pos:end="657:62"><decl pos:start="657:13" pos:end="657:61"><type pos:start="657:13" pos:end="657:21"><specifier pos:start="657:13" pos:end="657:17">const</specifier> <name pos:start="657:19" pos:end="657:21">int</name></type> <name pos:start="657:23" pos:end="657:26">size</name> <init pos:start="657:28" pos:end="657:61">= <expr pos:start="657:30" pos:end="657:61"><call pos:start="657:30" pos:end="657:61"><name pos:start="657:30" pos:end="657:42">get_bits_left</name><argument_list pos:start="657:43" pos:end="657:61">(<argument pos:start="657:44" pos:end="657:60"><expr pos:start="657:44" pos:end="657:60"><operator pos:start="657:44" pos:end="657:44">&amp;</operator><name pos:start="657:45" pos:end="657:60"><name pos:start="657:45" pos:end="657:45">s</name><operator pos:start="657:46" pos:end="657:47">-&gt;</operator><name pos:start="657:48" pos:end="657:60">gb_extra_bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="659:13" pos:end="659:74"><decl pos:start="659:13" pos:end="659:73"><type pos:start="659:13" pos:end="659:21"><specifier pos:start="659:13" pos:end="659:17">const</specifier> <name pos:start="659:19" pos:end="659:21">int</name></type> <name pos:start="659:23" pos:end="659:28">wanted</name> <init pos:start="659:30" pos:end="659:73">= <expr pos:start="659:32" pos:end="659:73"><name pos:start="659:32" pos:end="659:41"><name pos:start="659:32" pos:end="659:32">s</name><operator pos:start="659:33" pos:end="659:34">-&gt;</operator><name pos:start="659:35" pos:end="659:41">samples</name></name> <operator pos:start="659:43" pos:end="659:43">*</operator> <name pos:start="659:45" pos:end="659:57"><name pos:start="659:45" pos:end="659:45">s</name><operator pos:start="659:46" pos:end="659:47">-&gt;</operator><name pos:start="659:48" pos:end="659:57">extra_bits</name></name> <operator pos:start="659:59" pos:end="659:60">&lt;&lt;</operator> <name pos:start="659:62" pos:end="659:73"><name pos:start="659:62" pos:end="659:62">s</name><operator pos:start="659:63" pos:end="659:64">-&gt;</operator><name pos:start="659:65" pos:end="659:73">stereo_in</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="661:13" pos:end="667:13"><if pos:start="661:13" pos:end="667:13">if<condition pos:start="661:15" pos:end="661:29">(<expr pos:start="661:16" pos:end="661:28"><name pos:start="661:16" pos:end="661:19">size</name> <operator pos:start="661:21" pos:end="661:21">&lt;</operator> <name pos:start="661:23" pos:end="661:28">wanted</name></expr>)</condition><block pos:start="661:30" pos:end="667:13">{<block_content pos:start="663:17" pos:end="665:38">

                <expr_stmt pos:start="663:17" pos:end="663:69"><expr pos:start="663:17" pos:end="663:68"><call pos:start="663:17" pos:end="663:68"><name pos:start="663:17" pos:end="663:22">av_log</name><argument_list pos:start="663:23" pos:end="663:68">(<argument pos:start="663:24" pos:end="663:28"><expr pos:start="663:24" pos:end="663:28"><name pos:start="663:24" pos:end="663:28">avctx</name></expr></argument>, <argument pos:start="663:31" pos:end="663:42"><expr pos:start="663:31" pos:end="663:42"><name pos:start="663:31" pos:end="663:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="663:45" pos:end="663:67"><expr pos:start="663:45" pos:end="663:67"><literal type="string" pos:start="663:45" pos:end="663:67">"Too small EXTRABITS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="665:17" pos:end="665:38"><expr pos:start="665:17" pos:end="665:37"><name pos:start="665:17" pos:end="665:33"><name pos:start="665:17" pos:end="665:17">s</name><operator pos:start="665:18" pos:end="665:19">-&gt;</operator><name pos:start="665:20" pos:end="665:33">got_extra_bits</name></name> <operator pos:start="665:35" pos:end="665:35">=</operator> <literal type="number" pos:start="665:37" pos:end="665:37">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="673:5" pos:end="779:5"><if pos:start="673:5" pos:end="697:5">if<condition pos:start="673:7" pos:end="673:20">(<expr pos:start="673:8" pos:end="673:19"><name pos:start="673:8" pos:end="673:19"><name pos:start="673:8" pos:end="673:8">s</name><operator pos:start="673:9" pos:end="673:10">-&gt;</operator><name pos:start="673:11" pos:end="673:19">stereo_in</name></name></expr>)</condition><block pos:start="673:21" pos:end="697:5">{<block_content pos:start="675:9" pos:end="695:26">

        <if_stmt pos:start="675:9" pos:end="685:82"><if pos:start="675:9" pos:end="677:82">if<condition pos:start="675:11" pos:end="675:50">(<expr pos:start="675:12" pos:end="675:49"><name pos:start="675:12" pos:end="675:28"><name pos:start="675:12" pos:end="675:16">avctx</name><operator pos:start="675:17" pos:end="675:18">-&gt;</operator><name pos:start="675:19" pos:end="675:28">sample_fmt</name></name> <operator pos:start="675:30" pos:end="675:31">==</operator> <name pos:start="675:33" pos:end="675:49">AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo" pos:start="677:13" pos:end="677:82"><block_content pos:start="677:13" pos:end="677:82">

            <expr_stmt pos:start="677:13" pos:end="677:82"><expr pos:start="677:13" pos:end="677:81"><name pos:start="677:13" pos:end="677:23">samplecount</name> <operator pos:start="677:25" pos:end="677:25">=</operator> <call pos:start="677:27" pos:end="677:81"><name pos:start="677:27" pos:end="677:42">wv_unpack_stereo</name><argument_list pos:start="677:43" pos:end="677:81">(<argument pos:start="677:44" pos:end="677:44"><expr pos:start="677:44" pos:end="677:44"><name pos:start="677:44" pos:end="677:44">s</name></expr></argument>, <argument pos:start="677:47" pos:end="677:52"><expr pos:start="677:47" pos:end="677:52"><operator pos:start="677:47" pos:end="677:47">&amp;</operator><name pos:start="677:48" pos:end="677:52"><name pos:start="677:48" pos:end="677:48">s</name><operator pos:start="677:49" pos:end="677:50">-&gt;</operator><name pos:start="677:51" pos:end="677:52">gb</name></name></expr></argument>, <argument pos:start="677:55" pos:end="677:61"><expr pos:start="677:55" pos:end="677:61"><name pos:start="677:55" pos:end="677:61">samples</name></expr></argument>, <argument pos:start="677:64" pos:end="677:80"><expr pos:start="677:64" pos:end="677:80"><name pos:start="677:64" pos:end="677:80">AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="679:9" pos:end="681:82">else if<condition pos:start="679:16" pos:end="679:55">(<expr pos:start="679:17" pos:end="679:54"><name pos:start="679:17" pos:end="679:33"><name pos:start="679:17" pos:end="679:21">avctx</name><operator pos:start="679:22" pos:end="679:23">-&gt;</operator><name pos:start="679:24" pos:end="679:33">sample_fmt</name></name> <operator pos:start="679:35" pos:end="679:36">==</operator> <name pos:start="679:38" pos:end="679:54">AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo" pos:start="681:13" pos:end="681:82"><block_content pos:start="681:13" pos:end="681:82">

            <expr_stmt pos:start="681:13" pos:end="681:82"><expr pos:start="681:13" pos:end="681:81"><name pos:start="681:13" pos:end="681:23">samplecount</name> <operator pos:start="681:25" pos:end="681:25">=</operator> <call pos:start="681:27" pos:end="681:81"><name pos:start="681:27" pos:end="681:42">wv_unpack_stereo</name><argument_list pos:start="681:43" pos:end="681:81">(<argument pos:start="681:44" pos:end="681:44"><expr pos:start="681:44" pos:end="681:44"><name pos:start="681:44" pos:end="681:44">s</name></expr></argument>, <argument pos:start="681:47" pos:end="681:52"><expr pos:start="681:47" pos:end="681:52"><operator pos:start="681:47" pos:end="681:47">&amp;</operator><name pos:start="681:48" pos:end="681:52"><name pos:start="681:48" pos:end="681:48">s</name><operator pos:start="681:49" pos:end="681:50">-&gt;</operator><name pos:start="681:51" pos:end="681:52">gb</name></name></expr></argument>, <argument pos:start="681:55" pos:end="681:61"><expr pos:start="681:55" pos:end="681:61"><name pos:start="681:55" pos:end="681:61">samples</name></expr></argument>, <argument pos:start="681:64" pos:end="681:80"><expr pos:start="681:64" pos:end="681:80"><name pos:start="681:64" pos:end="681:80">AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="683:9" pos:end="685:82">else<block type="pseudo" pos:start="685:13" pos:end="685:82"><block_content pos:start="685:13" pos:end="685:82">

            <expr_stmt pos:start="685:13" pos:end="685:82"><expr pos:start="685:13" pos:end="685:81"><name pos:start="685:13" pos:end="685:23">samplecount</name> <operator pos:start="685:25" pos:end="685:25">=</operator> <call pos:start="685:27" pos:end="685:81"><name pos:start="685:27" pos:end="685:42">wv_unpack_stereo</name><argument_list pos:start="685:43" pos:end="685:81">(<argument pos:start="685:44" pos:end="685:44"><expr pos:start="685:44" pos:end="685:44"><name pos:start="685:44" pos:end="685:44">s</name></expr></argument>, <argument pos:start="685:47" pos:end="685:52"><expr pos:start="685:47" pos:end="685:52"><operator pos:start="685:47" pos:end="685:47">&amp;</operator><name pos:start="685:48" pos:end="685:52"><name pos:start="685:48" pos:end="685:48">s</name><operator pos:start="685:49" pos:end="685:50">-&gt;</operator><name pos:start="685:51" pos:end="685:52">gb</name></name></expr></argument>, <argument pos:start="685:55" pos:end="685:61"><expr pos:start="685:55" pos:end="685:61"><name pos:start="685:55" pos:end="685:61">samples</name></expr></argument>, <argument pos:start="685:64" pos:end="685:80"><expr pos:start="685:64" pos:end="685:80"><name pos:start="685:64" pos:end="685:80">AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="689:9" pos:end="691:22"><if pos:start="689:9" pos:end="691:22">if <condition pos:start="689:12" pos:end="689:28">(<expr pos:start="689:13" pos:end="689:27"><name pos:start="689:13" pos:end="689:23">samplecount</name> <operator pos:start="689:25" pos:end="689:25">&lt;</operator> <literal type="number" pos:start="689:27" pos:end="689:27">0</literal></expr>)</condition><block type="pseudo" pos:start="691:13" pos:end="691:22"><block_content pos:start="691:13" pos:end="691:22">

            <return pos:start="691:13" pos:end="691:22">return <expr pos:start="691:20" pos:end="691:21"><operator pos:start="691:20" pos:end="691:20">-</operator><literal type="number" pos:start="691:21" pos:end="691:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="695:9" pos:end="695:26"><expr pos:start="695:9" pos:end="695:25"><name pos:start="695:9" pos:end="695:19">samplecount</name> <operator pos:start="695:21" pos:end="695:23">&gt;&gt;=</operator> <literal type="number" pos:start="695:25" pos:end="695:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="697:6" pos:end="779:5">else<block pos:start="697:10" pos:end="779:5">{<block_content pos:start="699:9" pos:end="777:9">

        <decl_stmt pos:start="699:9" pos:end="699:51"><decl pos:start="699:9" pos:end="699:50"><type pos:start="699:9" pos:end="699:17"><specifier pos:start="699:9" pos:end="699:13">const</specifier> <name pos:start="699:15" pos:end="699:17">int</name></type> <name pos:start="699:19" pos:end="699:32">channel_stride</name> <init pos:start="699:34" pos:end="699:50">= <expr pos:start="699:36" pos:end="699:50"><name pos:start="699:36" pos:end="699:50"><name pos:start="699:36" pos:end="699:40">avctx</name><operator pos:start="699:41" pos:end="699:42">-&gt;</operator><name pos:start="699:43" pos:end="699:50">channels</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="703:9" pos:end="713:80"><if pos:start="703:9" pos:end="705:80">if<condition pos:start="703:11" pos:end="703:50">(<expr pos:start="703:12" pos:end="703:49"><name pos:start="703:12" pos:end="703:28"><name pos:start="703:12" pos:end="703:16">avctx</name><operator pos:start="703:17" pos:end="703:18">-&gt;</operator><name pos:start="703:19" pos:end="703:28">sample_fmt</name></name> <operator pos:start="703:30" pos:end="703:31">==</operator> <name pos:start="703:33" pos:end="703:49">AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo" pos:start="705:13" pos:end="705:80"><block_content pos:start="705:13" pos:end="705:80">

            <expr_stmt pos:start="705:13" pos:end="705:80"><expr pos:start="705:13" pos:end="705:79"><name pos:start="705:13" pos:end="705:23">samplecount</name> <operator pos:start="705:25" pos:end="705:25">=</operator> <call pos:start="705:27" pos:end="705:79"><name pos:start="705:27" pos:end="705:40">wv_unpack_mono</name><argument_list pos:start="705:41" pos:end="705:79">(<argument pos:start="705:42" pos:end="705:42"><expr pos:start="705:42" pos:end="705:42"><name pos:start="705:42" pos:end="705:42">s</name></expr></argument>, <argument pos:start="705:45" pos:end="705:50"><expr pos:start="705:45" pos:end="705:50"><operator pos:start="705:45" pos:end="705:45">&amp;</operator><name pos:start="705:46" pos:end="705:50"><name pos:start="705:46" pos:end="705:46">s</name><operator pos:start="705:47" pos:end="705:48">-&gt;</operator><name pos:start="705:49" pos:end="705:50">gb</name></name></expr></argument>, <argument pos:start="705:53" pos:end="705:59"><expr pos:start="705:53" pos:end="705:59"><name pos:start="705:53" pos:end="705:59">samples</name></expr></argument>, <argument pos:start="705:62" pos:end="705:78"><expr pos:start="705:62" pos:end="705:78"><name pos:start="705:62" pos:end="705:78">AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="707:9" pos:end="709:80">else if<condition pos:start="707:16" pos:end="707:55">(<expr pos:start="707:17" pos:end="707:54"><name pos:start="707:17" pos:end="707:33"><name pos:start="707:17" pos:end="707:21">avctx</name><operator pos:start="707:22" pos:end="707:23">-&gt;</operator><name pos:start="707:24" pos:end="707:33">sample_fmt</name></name> <operator pos:start="707:35" pos:end="707:36">==</operator> <name pos:start="707:38" pos:end="707:54">AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo" pos:start="709:13" pos:end="709:80"><block_content pos:start="709:13" pos:end="709:80">

            <expr_stmt pos:start="709:13" pos:end="709:80"><expr pos:start="709:13" pos:end="709:79"><name pos:start="709:13" pos:end="709:23">samplecount</name> <operator pos:start="709:25" pos:end="709:25">=</operator> <call pos:start="709:27" pos:end="709:79"><name pos:start="709:27" pos:end="709:40">wv_unpack_mono</name><argument_list pos:start="709:41" pos:end="709:79">(<argument pos:start="709:42" pos:end="709:42"><expr pos:start="709:42" pos:end="709:42"><name pos:start="709:42" pos:end="709:42">s</name></expr></argument>, <argument pos:start="709:45" pos:end="709:50"><expr pos:start="709:45" pos:end="709:50"><operator pos:start="709:45" pos:end="709:45">&amp;</operator><name pos:start="709:46" pos:end="709:50"><name pos:start="709:46" pos:end="709:46">s</name><operator pos:start="709:47" pos:end="709:48">-&gt;</operator><name pos:start="709:49" pos:end="709:50">gb</name></name></expr></argument>, <argument pos:start="709:53" pos:end="709:59"><expr pos:start="709:53" pos:end="709:59"><name pos:start="709:53" pos:end="709:59">samples</name></expr></argument>, <argument pos:start="709:62" pos:end="709:78"><expr pos:start="709:62" pos:end="709:78"><name pos:start="709:62" pos:end="709:78">AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="711:9" pos:end="713:80">else<block type="pseudo" pos:start="713:13" pos:end="713:80"><block_content pos:start="713:13" pos:end="713:80">

            <expr_stmt pos:start="713:13" pos:end="713:80"><expr pos:start="713:13" pos:end="713:79"><name pos:start="713:13" pos:end="713:23">samplecount</name> <operator pos:start="713:25" pos:end="713:25">=</operator> <call pos:start="713:27" pos:end="713:79"><name pos:start="713:27" pos:end="713:40">wv_unpack_mono</name><argument_list pos:start="713:41" pos:end="713:79">(<argument pos:start="713:42" pos:end="713:42"><expr pos:start="713:42" pos:end="713:42"><name pos:start="713:42" pos:end="713:42">s</name></expr></argument>, <argument pos:start="713:45" pos:end="713:50"><expr pos:start="713:45" pos:end="713:50"><operator pos:start="713:45" pos:end="713:45">&amp;</operator><name pos:start="713:46" pos:end="713:50"><name pos:start="713:46" pos:end="713:46">s</name><operator pos:start="713:47" pos:end="713:48">-&gt;</operator><name pos:start="713:49" pos:end="713:50">gb</name></name></expr></argument>, <argument pos:start="713:53" pos:end="713:59"><expr pos:start="713:53" pos:end="713:59"><name pos:start="713:53" pos:end="713:59">samples</name></expr></argument>, <argument pos:start="713:62" pos:end="713:78"><expr pos:start="713:62" pos:end="713:78"><name pos:start="713:62" pos:end="713:78">AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="717:9" pos:end="719:22"><if pos:start="717:9" pos:end="719:22">if <condition pos:start="717:12" pos:end="717:28">(<expr pos:start="717:13" pos:end="717:27"><name pos:start="717:13" pos:end="717:23">samplecount</name> <operator pos:start="717:25" pos:end="717:25">&lt;</operator> <literal type="number" pos:start="717:27" pos:end="717:27">0</literal></expr>)</condition><block type="pseudo" pos:start="719:13" pos:end="719:22"><block_content pos:start="719:13" pos:end="719:22">

            <return pos:start="719:13" pos:end="719:22">return <expr pos:start="719:20" pos:end="719:21"><operator pos:start="719:20" pos:end="719:20">-</operator><literal type="number" pos:start="719:21" pos:end="719:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="723:9" pos:end="777:9"><if pos:start="723:9" pos:end="741:9">if<condition pos:start="723:11" pos:end="723:63">(<expr pos:start="723:12" pos:end="723:62"><name pos:start="723:12" pos:end="723:20"><name pos:start="723:12" pos:end="723:12">s</name><operator pos:start="723:13" pos:end="723:14">-&gt;</operator><name pos:start="723:15" pos:end="723:20">stereo</name></name> <operator pos:start="723:22" pos:end="723:23">&amp;&amp;</operator> <name pos:start="723:25" pos:end="723:41"><name pos:start="723:25" pos:end="723:29">avctx</name><operator pos:start="723:30" pos:end="723:31">-&gt;</operator><name pos:start="723:32" pos:end="723:41">sample_fmt</name></name> <operator pos:start="723:43" pos:end="723:44">==</operator> <name pos:start="723:46" pos:end="723:62">AV_SAMPLE_FMT_S16</name></expr>)</condition><block pos:start="723:64" pos:end="741:9">{<block_content pos:start="725:13" pos:end="739:13">

            <decl_stmt pos:start="725:13" pos:end="725:49"><decl pos:start="725:13" pos:end="725:48"><type pos:start="725:13" pos:end="725:21"><name pos:start="725:13" pos:end="725:19">int16_t</name> <modifier pos:start="725:21" pos:end="725:21">*</modifier></type><name pos:start="725:22" pos:end="725:24">dst</name> <init pos:start="725:26" pos:end="725:48">= <expr pos:start="725:28" pos:end="725:48"><operator pos:start="725:28" pos:end="725:28">(</operator><name pos:start="725:29" pos:end="725:35">int16_t</name><operator pos:start="725:36" pos:end="725:36">*</operator><operator pos:start="725:37" pos:end="725:37">)</operator><name pos:start="725:38" pos:end="725:44">samples</name> <operator pos:start="725:46" pos:end="725:46">+</operator> <literal type="number" pos:start="725:48" pos:end="725:48">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="727:13" pos:end="727:45"><decl pos:start="727:13" pos:end="727:44"><type pos:start="727:13" pos:end="727:21"><name pos:start="727:13" pos:end="727:19">int16_t</name> <modifier pos:start="727:21" pos:end="727:21">*</modifier></type><name pos:start="727:22" pos:end="727:24">src</name> <init pos:start="727:26" pos:end="727:44">= <expr pos:start="727:28" pos:end="727:44"><operator pos:start="727:28" pos:end="727:28">(</operator><name pos:start="727:29" pos:end="727:35">int16_t</name><operator pos:start="727:36" pos:end="727:36">*</operator><operator pos:start="727:37" pos:end="727:37">)</operator><name pos:start="727:38" pos:end="727:44">samples</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="729:13" pos:end="729:34"><decl pos:start="729:13" pos:end="729:33"><type pos:start="729:13" pos:end="729:15"><name pos:start="729:13" pos:end="729:15">int</name></type> <name pos:start="729:17" pos:end="729:19">cnt</name> <init pos:start="729:21" pos:end="729:33">= <expr pos:start="729:23" pos:end="729:33"><name pos:start="729:23" pos:end="729:33">samplecount</name></expr></init></decl>;</decl_stmt>

            <while pos:start="731:13" pos:end="739:13">while<condition pos:start="731:18" pos:end="731:24">(<expr pos:start="731:19" pos:end="731:23"><name pos:start="731:19" pos:end="731:21">cnt</name><operator pos:start="731:22" pos:end="731:23">--</operator></expr>)</condition><block pos:start="731:25" pos:end="739:13">{<block_content pos:start="733:17" pos:end="737:38">

                <expr_stmt pos:start="733:17" pos:end="733:28"><expr pos:start="733:17" pos:end="733:27"><operator pos:start="733:17" pos:end="733:17">*</operator><name pos:start="733:18" pos:end="733:20">dst</name> <operator pos:start="733:22" pos:end="733:22">=</operator> <operator pos:start="733:24" pos:end="733:24">*</operator><name pos:start="733:25" pos:end="733:27">src</name></expr>;</expr_stmt>

                <expr_stmt pos:start="735:17" pos:end="735:38"><expr pos:start="735:17" pos:end="735:37"><name pos:start="735:17" pos:end="735:19">src</name> <operator pos:start="735:21" pos:end="735:22">+=</operator> <name pos:start="735:24" pos:end="735:37">channel_stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="737:17" pos:end="737:38"><expr pos:start="737:17" pos:end="737:37"><name pos:start="737:17" pos:end="737:19">dst</name> <operator pos:start="737:21" pos:end="737:22">+=</operator> <name pos:start="737:24" pos:end="737:37">channel_stride</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if><if type="elseif" pos:start="741:10" pos:end="759:9">else if<condition pos:start="741:17" pos:end="741:69">(<expr pos:start="741:18" pos:end="741:68"><name pos:start="741:18" pos:end="741:26"><name pos:start="741:18" pos:end="741:18">s</name><operator pos:start="741:19" pos:end="741:20">-&gt;</operator><name pos:start="741:21" pos:end="741:26">stereo</name></name> <operator pos:start="741:28" pos:end="741:29">&amp;&amp;</operator> <name pos:start="741:31" pos:end="741:47"><name pos:start="741:31" pos:end="741:35">avctx</name><operator pos:start="741:36" pos:end="741:37">-&gt;</operator><name pos:start="741:38" pos:end="741:47">sample_fmt</name></name> <operator pos:start="741:49" pos:end="741:50">==</operator> <name pos:start="741:52" pos:end="741:68">AV_SAMPLE_FMT_S32</name></expr>)</condition><block pos:start="741:70" pos:end="759:9">{<block_content pos:start="743:13" pos:end="757:13">

            <decl_stmt pos:start="743:13" pos:end="743:49"><decl pos:start="743:13" pos:end="743:48"><type pos:start="743:13" pos:end="743:21"><name pos:start="743:13" pos:end="743:19">int32_t</name> <modifier pos:start="743:21" pos:end="743:21">*</modifier></type><name pos:start="743:22" pos:end="743:24">dst</name> <init pos:start="743:26" pos:end="743:48">= <expr pos:start="743:28" pos:end="743:48"><operator pos:start="743:28" pos:end="743:28">(</operator><name pos:start="743:29" pos:end="743:35">int32_t</name><operator pos:start="743:36" pos:end="743:36">*</operator><operator pos:start="743:37" pos:end="743:37">)</operator><name pos:start="743:38" pos:end="743:44">samples</name> <operator pos:start="743:46" pos:end="743:46">+</operator> <literal type="number" pos:start="743:48" pos:end="743:48">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="745:13" pos:end="745:45"><decl pos:start="745:13" pos:end="745:44"><type pos:start="745:13" pos:end="745:21"><name pos:start="745:13" pos:end="745:19">int32_t</name> <modifier pos:start="745:21" pos:end="745:21">*</modifier></type><name pos:start="745:22" pos:end="745:24">src</name> <init pos:start="745:26" pos:end="745:44">= <expr pos:start="745:28" pos:end="745:44"><operator pos:start="745:28" pos:end="745:28">(</operator><name pos:start="745:29" pos:end="745:35">int32_t</name><operator pos:start="745:36" pos:end="745:36">*</operator><operator pos:start="745:37" pos:end="745:37">)</operator><name pos:start="745:38" pos:end="745:44">samples</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="747:13" pos:end="747:34"><decl pos:start="747:13" pos:end="747:33"><type pos:start="747:13" pos:end="747:15"><name pos:start="747:13" pos:end="747:15">int</name></type> <name pos:start="747:17" pos:end="747:19">cnt</name> <init pos:start="747:21" pos:end="747:33">= <expr pos:start="747:23" pos:end="747:33"><name pos:start="747:23" pos:end="747:33">samplecount</name></expr></init></decl>;</decl_stmt>

            <while pos:start="749:13" pos:end="757:13">while<condition pos:start="749:18" pos:end="749:24">(<expr pos:start="749:19" pos:end="749:23"><name pos:start="749:19" pos:end="749:21">cnt</name><operator pos:start="749:22" pos:end="749:23">--</operator></expr>)</condition><block pos:start="749:25" pos:end="757:13">{<block_content pos:start="751:17" pos:end="755:38">

                <expr_stmt pos:start="751:17" pos:end="751:28"><expr pos:start="751:17" pos:end="751:27"><operator pos:start="751:17" pos:end="751:17">*</operator><name pos:start="751:18" pos:end="751:20">dst</name> <operator pos:start="751:22" pos:end="751:22">=</operator> <operator pos:start="751:24" pos:end="751:24">*</operator><name pos:start="751:25" pos:end="751:27">src</name></expr>;</expr_stmt>

                <expr_stmt pos:start="753:17" pos:end="753:38"><expr pos:start="753:17" pos:end="753:37"><name pos:start="753:17" pos:end="753:19">src</name> <operator pos:start="753:21" pos:end="753:22">+=</operator> <name pos:start="753:24" pos:end="753:37">channel_stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="755:17" pos:end="755:38"><expr pos:start="755:17" pos:end="755:37"><name pos:start="755:17" pos:end="755:19">dst</name> <operator pos:start="755:21" pos:end="755:22">+=</operator> <name pos:start="755:24" pos:end="755:37">channel_stride</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if><if type="elseif" pos:start="759:10" pos:end="777:9">else if<condition pos:start="759:17" pos:end="759:27">(<expr pos:start="759:18" pos:end="759:26"><name pos:start="759:18" pos:end="759:26"><name pos:start="759:18" pos:end="759:18">s</name><operator pos:start="759:19" pos:end="759:20">-&gt;</operator><name pos:start="759:21" pos:end="759:26">stereo</name></name></expr>)</condition><block pos:start="759:28" pos:end="777:9">{<block_content pos:start="761:13" pos:end="775:13">

            <decl_stmt pos:start="761:13" pos:end="761:45"><decl pos:start="761:13" pos:end="761:44"><type pos:start="761:13" pos:end="761:19"><name pos:start="761:13" pos:end="761:17">float</name> <modifier pos:start="761:19" pos:end="761:19">*</modifier></type><name pos:start="761:20" pos:end="761:22">dst</name> <init pos:start="761:24" pos:end="761:44">= <expr pos:start="761:26" pos:end="761:44"><operator pos:start="761:26" pos:end="761:26">(</operator><name pos:start="761:27" pos:end="761:31">float</name><operator pos:start="761:32" pos:end="761:32">*</operator><operator pos:start="761:33" pos:end="761:33">)</operator><name pos:start="761:34" pos:end="761:40">samples</name> <operator pos:start="761:42" pos:end="761:42">+</operator> <literal type="number" pos:start="761:44" pos:end="761:44">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="763:13" pos:end="763:41"><decl pos:start="763:13" pos:end="763:40"><type pos:start="763:13" pos:end="763:19"><name pos:start="763:13" pos:end="763:17">float</name> <modifier pos:start="763:19" pos:end="763:19">*</modifier></type><name pos:start="763:20" pos:end="763:22">src</name> <init pos:start="763:24" pos:end="763:40">= <expr pos:start="763:26" pos:end="763:40"><operator pos:start="763:26" pos:end="763:26">(</operator><name pos:start="763:27" pos:end="763:31">float</name><operator pos:start="763:32" pos:end="763:32">*</operator><operator pos:start="763:33" pos:end="763:33">)</operator><name pos:start="763:34" pos:end="763:40">samples</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="765:13" pos:end="765:34"><decl pos:start="765:13" pos:end="765:33"><type pos:start="765:13" pos:end="765:15"><name pos:start="765:13" pos:end="765:15">int</name></type> <name pos:start="765:17" pos:end="765:19">cnt</name> <init pos:start="765:21" pos:end="765:33">= <expr pos:start="765:23" pos:end="765:33"><name pos:start="765:23" pos:end="765:33">samplecount</name></expr></init></decl>;</decl_stmt>

            <while pos:start="767:13" pos:end="775:13">while<condition pos:start="767:18" pos:end="767:24">(<expr pos:start="767:19" pos:end="767:23"><name pos:start="767:19" pos:end="767:21">cnt</name><operator pos:start="767:22" pos:end="767:23">--</operator></expr>)</condition><block pos:start="767:25" pos:end="775:13">{<block_content pos:start="769:17" pos:end="773:38">

                <expr_stmt pos:start="769:17" pos:end="769:28"><expr pos:start="769:17" pos:end="769:27"><operator pos:start="769:17" pos:end="769:17">*</operator><name pos:start="769:18" pos:end="769:20">dst</name> <operator pos:start="769:22" pos:end="769:22">=</operator> <operator pos:start="769:24" pos:end="769:24">*</operator><name pos:start="769:25" pos:end="769:27">src</name></expr>;</expr_stmt>

                <expr_stmt pos:start="771:17" pos:end="771:38"><expr pos:start="771:17" pos:end="771:37"><name pos:start="771:17" pos:end="771:19">src</name> <operator pos:start="771:21" pos:end="771:22">+=</operator> <name pos:start="771:24" pos:end="771:37">channel_stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="773:17" pos:end="773:38"><expr pos:start="773:17" pos:end="773:37"><name pos:start="773:17" pos:end="773:19">dst</name> <operator pos:start="773:21" pos:end="773:22">+=</operator> <name pos:start="773:24" pos:end="773:37">channel_stride</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="783:5" pos:end="783:23"><expr pos:start="783:5" pos:end="783:22"><operator pos:start="783:5" pos:end="783:5">*</operator><name pos:start="783:6" pos:end="783:18">got_frame_ptr</name> <operator pos:start="783:20" pos:end="783:20">=</operator> <literal type="number" pos:start="783:22" pos:end="783:22">1</literal></expr>;</expr_stmt>



    <return pos:start="787:5" pos:end="787:29">return <expr pos:start="787:12" pos:end="787:28"><name pos:start="787:12" pos:end="787:22">samplecount</name> <operator pos:start="787:24" pos:end="787:24">*</operator> <name pos:start="787:26" pos:end="787:28">bpp</name></expr>;</return>

</block_content>}</block></function>
</unit>
