<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2215.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">qemu_acl_insert</name><parameter_list pos:start="1:20" pos:end="7:30">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:28">qemu_acl</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">acl</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:28"><decl pos:start="3:21" pos:end="3:28"><type pos:start="3:21" pos:end="3:28"><name pos:start="3:21" pos:end="3:23">int</name></type> <name pos:start="3:25" pos:end="3:28">deny</name></decl></parameter>,

                    <parameter pos:start="5:21" pos:end="5:37"><decl pos:start="5:21" pos:end="5:37"><type pos:start="5:21" pos:end="5:37"><specifier pos:start="5:21" pos:end="5:25">const</specifier> <name pos:start="5:27" pos:end="5:30">char</name> <modifier pos:start="5:32" pos:end="5:32">*</modifier></type><name pos:start="5:33" pos:end="5:37">match</name></decl></parameter>,

                    <parameter pos:start="7:21" pos:end="7:29"><decl pos:start="7:21" pos:end="7:29"><type pos:start="7:21" pos:end="7:29"><name pos:start="7:21" pos:end="7:23">int</name></type> <name pos:start="7:25" pos:end="7:29">index</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="59:1">{<block_content pos:start="11:5" pos:end="57:13">

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">qemu_acl_entry</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:25">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">qemu_acl_entry</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:23">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name> <init pos:start="15:11" pos:end="15:13">= <expr pos:start="15:13" pos:end="15:13"><literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:18"><if pos:start="19:5" pos:end="21:18">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:13">index</name> <operator pos:start="19:15" pos:end="19:16">&lt;=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:18"><block_content pos:start="21:9" pos:end="21:18">

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:13">index</name> <operator pos:start="23:15" pos:end="23:15">&gt;</operator> <name pos:start="23:17" pos:end="23:29"><name pos:start="23:17" pos:end="23:19">acl</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:29">nentries</name></name></expr>)</condition> <block pos:start="23:32" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:49">

        <return pos:start="25:9" pos:end="25:49">return <expr pos:start="25:16" pos:end="25:48"><call pos:start="25:16" pos:end="25:48"><name pos:start="25:16" pos:end="25:30">qemu_acl_append</name><argument_list pos:start="25:31" pos:end="25:48">(<argument pos:start="25:32" pos:end="25:34"><expr pos:start="25:32" pos:end="25:34"><name pos:start="25:32" pos:end="25:34">acl</name></expr></argument>, <argument pos:start="25:37" pos:end="25:40"><expr pos:start="25:37" pos:end="25:40"><name pos:start="25:37" pos:end="25:40">deny</name></expr></argument>, <argument pos:start="25:43" pos:end="25:47"><expr pos:start="25:43" pos:end="25:47"><name pos:start="25:43" pos:end="25:47">match</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:9">entry</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <call pos:start="31:13" pos:end="31:36"><name pos:start="31:13" pos:end="31:20">g_malloc</name><argument_list pos:start="31:21" pos:end="31:36">(<argument pos:start="31:22" pos:end="31:35"><expr pos:start="31:22" pos:end="31:35"><sizeof pos:start="31:22" pos:end="31:35">sizeof<argument_list pos:start="31:28" pos:end="31:35">(<argument pos:start="31:29" pos:end="31:34"><expr pos:start="31:29" pos:end="31:34"><operator pos:start="31:29" pos:end="31:29">*</operator><name pos:start="31:30" pos:end="31:34">entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:9">entry</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:16">match</name></name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:34"><name pos:start="33:20" pos:end="33:27">g_strdup</name><argument_list pos:start="33:28" pos:end="33:34">(<argument pos:start="33:29" pos:end="33:33"><expr pos:start="33:29" pos:end="33:33"><name pos:start="33:29" pos:end="33:33">match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:23"><expr pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:9">entry</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:15">deny</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:22">deny</name></expr>;</expr_stmt>



    <macro pos:start="39:5" pos:end="39:44"><name pos:start="39:5" pos:end="39:18">QTAILQ_FOREACH</name><argument_list pos:start="39:19" pos:end="39:44">(<argument pos:start="39:20" pos:end="39:22">tmp</argument>, <argument pos:start="39:25" pos:end="39:37">&amp;acl-&gt;entries</argument>, <argument pos:start="39:40" pos:end="39:43">next</argument>)</argument_list></macro> <block pos:start="39:46" pos:end="53:5">{<block_content pos:start="41:9" pos:end="51:9">

        <expr_stmt pos:start="41:9" pos:end="41:12"><expr pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:9">i</name><operator pos:start="41:10" pos:end="41:11">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:23">(<expr pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:13">i</name> <operator pos:start="43:15" pos:end="43:16">==</operator> <name pos:start="43:18" pos:end="43:22">index</name></expr>)</condition> <block pos:start="43:25" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:18">

            <expr_stmt pos:start="45:13" pos:end="45:51"><expr pos:start="45:13" pos:end="45:50"><call pos:start="45:13" pos:end="45:50"><name pos:start="45:13" pos:end="45:32">QTAILQ_INSERT_BEFORE</name><argument_list pos:start="45:33" pos:end="45:50">(<argument pos:start="45:34" pos:end="45:36"><expr pos:start="45:34" pos:end="45:36"><name pos:start="45:34" pos:end="45:36">tmp</name></expr></argument>, <argument pos:start="45:39" pos:end="45:43"><expr pos:start="45:39" pos:end="45:43"><name pos:start="45:39" pos:end="45:43">entry</name></expr></argument>, <argument pos:start="45:46" pos:end="45:49"><expr pos:start="45:46" pos:end="45:49"><name pos:start="45:46" pos:end="45:49">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:28"><expr pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:25"><name pos:start="47:13" pos:end="47:15">acl</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:25">nentries</name></name><operator pos:start="47:26" pos:end="47:27">++</operator></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><name pos:start="57:12" pos:end="57:12">i</name></expr>;</return>

</block_content>}</block></function>
</unit>
