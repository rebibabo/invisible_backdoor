<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8768.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:43"><name pos:start="1:1" pos:end="1:29">qio_channel_command_new_spawn</name><argument_list pos:start="1:30" pos:end="5:43">(<argument pos:start="1:31" pos:end="1:54">const char *const argv[]</argument>,

                              <argument pos:start="3:31" pos:end="3:39">int flags</argument>,

                              <argument pos:start="5:31" pos:end="5:42">Error **errp</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="173:1">{<block_content pos:start="9:5" pos:end="171:16">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">pid_t</name></type> <name pos:start="9:11" pos:end="9:13">pid</name> <init pos:start="9:15" pos:end="9:18">= <expr pos:start="9:17" pos:end="9:18"><operator pos:start="9:17" pos:end="9:17">-</operator><literal type="number" pos:start="9:18" pos:end="9:18">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:15">stdinfd</name><index pos:start="11:16" pos:end="11:18">[<expr pos:start="11:17" pos:end="11:17"><literal type="number" pos:start="11:17" pos:end="11:17">2</literal></expr>]</index></name> <init pos:start="11:20" pos:end="11:31">= <expr pos:start="11:22" pos:end="11:31"><block pos:start="11:22" pos:end="11:31">{ <expr pos:start="11:24" pos:end="11:25"><operator pos:start="11:24" pos:end="11:24">-</operator><literal type="number" pos:start="11:25" pos:end="11:25">1</literal></expr>, <expr pos:start="11:28" pos:end="11:29"><operator pos:start="11:28" pos:end="11:28">-</operator><literal type="number" pos:start="11:29" pos:end="11:29">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:16">stdoutfd</name><index pos:start="13:17" pos:end="13:19">[<expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">2</literal></expr>]</index></name> <init pos:start="13:21" pos:end="13:32">= <expr pos:start="13:23" pos:end="13:32"><block pos:start="13:23" pos:end="13:32">{ <expr pos:start="13:25" pos:end="13:26"><operator pos:start="13:25" pos:end="13:25">-</operator><literal type="number" pos:start="13:26" pos:end="13:26">1</literal></expr>, <expr pos:start="13:29" pos:end="13:30"><operator pos:start="13:29" pos:end="13:29">-</operator><literal type="number" pos:start="13:30" pos:end="13:30">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">devnull</name> <init pos:start="15:17" pos:end="15:20">= <expr pos:start="15:19" pos:end="15:20"><operator pos:start="15:19" pos:end="15:19">-</operator><literal type="number" pos:start="15:20" pos:end="15:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:18">stdinnull</name> <init pos:start="17:20" pos:end="17:26">= <expr pos:start="17:22" pos:end="17:26"><name pos:start="17:22" pos:end="17:26">false</name></expr></init></decl>, <decl pos:start="17:29" pos:end="17:46"><type ref="prev" pos:start="17:5" pos:end="17:8"/><name pos:start="17:29" pos:end="17:38">stdoutnull</name> <init pos:start="17:40" pos:end="17:46">= <expr pos:start="17:42" pos:end="17:46"><name pos:start="17:42" pos:end="17:46">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:21">QIOChannelCommand</name> <modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:26">ioc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:9">flags</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <name pos:start="23:13" pos:end="23:17">flags</name> <operator pos:start="23:19" pos:end="23:19">&amp;</operator> <name pos:start="23:21" pos:end="23:29">O_ACCMODE</name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:26">(<expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:13">flags</name> <operator pos:start="27:15" pos:end="27:16">==</operator> <name pos:start="27:18" pos:end="27:25">O_RDONLY</name></expr>)</condition> <block pos:start="27:28" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:25">

        <expr_stmt pos:start="29:9" pos:end="29:25"><expr pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:17">stdinnull</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <name pos:start="29:21" pos:end="29:24">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:13">flags</name> <operator pos:start="33:15" pos:end="33:16">==</operator> <name pos:start="33:18" pos:end="33:25">O_WRONLY</name></expr>)</condition> <block pos:start="33:28" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:26">

        <expr_stmt pos:start="35:9" pos:end="35:26"><expr pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:18">stdoutnull</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:25">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="55:5"><if pos:start="41:5" pos:end="55:5">if <condition pos:start="41:8" pos:end="41:32">(<expr pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:17">stdinnull</name> <operator pos:start="41:19" pos:end="41:20">||</operator> <name pos:start="41:22" pos:end="41:31">stdoutnull</name></expr>)</condition> <block pos:start="41:34" pos:end="55:5">{<block_content pos:start="43:9" pos:end="53:9">

        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:15">devnull</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:43"><name pos:start="43:19" pos:end="43:22">open</name><argument_list pos:start="43:23" pos:end="43:43">(<argument pos:start="43:24" pos:end="43:34"><expr pos:start="43:24" pos:end="43:34"><literal type="string" pos:start="43:24" pos:end="43:34">"/dev/null"</literal></expr></argument>, <argument pos:start="43:37" pos:end="43:42"><expr pos:start="43:37" pos:end="43:42"><name pos:start="43:37" pos:end="43:42">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:21">(<expr pos:start="45:13" pos:end="45:20"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:20">devnull</name></expr>)</condition> <block pos:start="45:23" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:23">

            <expr_stmt pos:start="47:13" pos:end="49:57"><expr pos:start="47:13" pos:end="49:56"><call pos:start="47:13" pos:end="49:56"><name pos:start="47:13" pos:end="47:28">error_setg_errno</name><argument_list pos:start="47:29" pos:end="49:56">(<argument pos:start="47:30" pos:end="47:33"><expr pos:start="47:30" pos:end="47:33"><name pos:start="47:30" pos:end="47:33">errp</name></expr></argument>, <argument pos:start="47:36" pos:end="47:40"><expr pos:start="47:36" pos:end="47:40"><name pos:start="47:36" pos:end="47:40">errno</name></expr></argument>,

                             <argument pos:start="49:30" pos:end="49:55"><expr pos:start="49:30" pos:end="49:55"><literal type="string" pos:start="49:30" pos:end="49:55">"Unable to open /dev/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="51:13" pos:end="51:23">goto <name pos:start="51:18" pos:end="51:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="69:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="61:44">(<expr pos:start="59:9" pos:end="61:43"><operator pos:start="59:9" pos:end="59:9">(</operator><operator pos:start="59:10" pos:end="59:10">!</operator><name pos:start="59:11" pos:end="59:19">stdinnull</name> <operator pos:start="59:21" pos:end="59:22">&amp;&amp;</operator> <call pos:start="59:24" pos:end="59:36"><name pos:start="59:24" pos:end="59:27">pipe</name><argument_list pos:start="59:28" pos:end="59:36">(<argument pos:start="59:29" pos:end="59:35"><expr pos:start="59:29" pos:end="59:35"><name pos:start="59:29" pos:end="59:35">stdinfd</name></expr></argument>)</argument_list></call> <operator pos:start="59:38" pos:end="59:38">&lt;</operator> <literal type="number" pos:start="59:40" pos:end="59:40">0</literal><operator pos:start="59:41" pos:end="59:41">)</operator> <operator pos:start="59:43" pos:end="59:44">||</operator>

        <operator pos:start="61:9" pos:end="61:9">(</operator><operator pos:start="61:10" pos:end="61:10">!</operator><name pos:start="61:11" pos:end="61:20">stdoutnull</name> <operator pos:start="61:22" pos:end="61:23">&amp;&amp;</operator> <call pos:start="61:25" pos:end="61:38"><name pos:start="61:25" pos:end="61:28">pipe</name><argument_list pos:start="61:29" pos:end="61:38">(<argument pos:start="61:30" pos:end="61:37"><expr pos:start="61:30" pos:end="61:37"><name pos:start="61:30" pos:end="61:37">stdoutfd</name></expr></argument>)</argument_list></call> <operator pos:start="61:40" pos:end="61:40">&lt;</operator> <literal type="number" pos:start="61:42" pos:end="61:42">0</literal><operator pos:start="61:43" pos:end="61:43">)</operator></expr>)</condition> <block pos:start="61:46" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:19">

        <expr_stmt pos:start="63:9" pos:end="65:48"><expr pos:start="63:9" pos:end="65:47"><call pos:start="63:9" pos:end="65:47"><name pos:start="63:9" pos:end="63:24">error_setg_errno</name><argument_list pos:start="63:25" pos:end="65:47">(<argument pos:start="63:26" pos:end="63:29"><expr pos:start="63:26" pos:end="63:29"><name pos:start="63:26" pos:end="63:29">errp</name></expr></argument>, <argument pos:start="63:32" pos:end="63:36"><expr pos:start="63:32" pos:end="63:36"><name pos:start="63:32" pos:end="63:36">errno</name></expr></argument>,

                         <argument pos:start="65:26" pos:end="65:46"><expr pos:start="65:26" pos:end="65:46"><literal type="string" pos:start="65:26" pos:end="65:46">"Unable to open pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:19">goto <name pos:start="67:14" pos:end="67:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:7">pid</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:25"><name pos:start="73:11" pos:end="73:19">qemu_fork</name><argument_list pos:start="73:20" pos:end="73:25">(<argument pos:start="73:21" pos:end="73:24"><expr pos:start="73:21" pos:end="73:24"><name pos:start="73:21" pos:end="73:24">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:16">(<expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">pid</name> <operator pos:start="75:13" pos:end="75:13">&lt;</operator> <literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>)</condition> <block pos:start="75:18" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:19">

        <goto pos:start="77:9" pos:end="77:19">goto <name pos:start="77:14" pos:end="77:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="115:5"><if pos:start="83:5" pos:end="115:5">if <condition pos:start="83:8" pos:end="83:17">(<expr pos:start="83:9" pos:end="83:16"><name pos:start="83:9" pos:end="83:11">pid</name> <operator pos:start="83:13" pos:end="83:14">==</operator> <literal type="number" pos:start="83:16" pos:end="83:16">0</literal></expr>)</condition> <block pos:start="83:19" pos:end="115:5">{<block_content pos:start="85:9" pos:end="113:17"> <comment type="block" pos:start="83:21" pos:end="83:31">/* child */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:61"><expr pos:start="85:9" pos:end="85:60"><call pos:start="85:9" pos:end="85:60"><name pos:start="85:9" pos:end="85:12">dup2</name><argument_list pos:start="85:13" pos:end="85:60">(<argument pos:start="85:14" pos:end="85:45"><expr pos:start="85:14" pos:end="85:45"><ternary pos:start="85:14" pos:end="85:45"><condition pos:start="85:14" pos:end="85:24"><expr pos:start="85:14" pos:end="85:22"><name pos:start="85:14" pos:end="85:22">stdinnull</name></expr> ?</condition><then pos:start="85:26" pos:end="85:32"> <expr pos:start="85:26" pos:end="85:32"><name pos:start="85:26" pos:end="85:32">devnull</name></expr> </then><else pos:start="85:34" pos:end="85:45">: <expr pos:start="85:36" pos:end="85:45"><name pos:start="85:36" pos:end="85:45"><name pos:start="85:36" pos:end="85:42">stdinfd</name><index pos:start="85:43" pos:end="85:45">[<expr pos:start="85:44" pos:end="85:44"><literal type="number" pos:start="85:44" pos:end="85:44">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>, <argument pos:start="85:48" pos:end="85:59"><expr pos:start="85:48" pos:end="85:59"><name pos:start="85:48" pos:end="85:59">STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:64"><expr pos:start="87:9" pos:end="87:63"><call pos:start="87:9" pos:end="87:63"><name pos:start="87:9" pos:end="87:12">dup2</name><argument_list pos:start="87:13" pos:end="87:63">(<argument pos:start="87:14" pos:end="87:47"><expr pos:start="87:14" pos:end="87:47"><ternary pos:start="87:14" pos:end="87:47"><condition pos:start="87:14" pos:end="87:25"><expr pos:start="87:14" pos:end="87:23"><name pos:start="87:14" pos:end="87:23">stdoutnull</name></expr> ?</condition><then pos:start="87:27" pos:end="87:33"> <expr pos:start="87:27" pos:end="87:33"><name pos:start="87:27" pos:end="87:33">devnull</name></expr> </then><else pos:start="87:35" pos:end="87:47">: <expr pos:start="87:37" pos:end="87:47"><name pos:start="87:37" pos:end="87:47"><name pos:start="87:37" pos:end="87:44">stdoutfd</name><index pos:start="87:45" pos:end="87:47">[<expr pos:start="87:46" pos:end="87:46"><literal type="number" pos:start="87:46" pos:end="87:46">1</literal></expr>]</index></name></expr></else></ternary></expr></argument>, <argument pos:start="87:50" pos:end="87:62"><expr pos:start="87:50" pos:end="87:62"><name pos:start="87:50" pos:end="87:62">STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="89:9" pos:end="89:53">/* Leave stderr connected to qemu's stderr */</comment>



        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:23">(<expr pos:start="93:13" pos:end="93:22"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:22">stdinnull</name></expr>)</condition> <block pos:start="93:25" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:30">

            <expr_stmt pos:start="95:13" pos:end="95:30"><expr pos:start="95:13" pos:end="95:29"><call pos:start="95:13" pos:end="95:29"><name pos:start="95:13" pos:end="95:17">close</name><argument_list pos:start="95:18" pos:end="95:29">(<argument pos:start="95:19" pos:end="95:28"><expr pos:start="95:19" pos:end="95:28"><name pos:start="95:19" pos:end="95:28"><name pos:start="95:19" pos:end="95:25">stdinfd</name><index pos:start="95:26" pos:end="95:28">[<expr pos:start="95:27" pos:end="95:27"><literal type="number" pos:start="95:27" pos:end="95:27">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:30"><expr pos:start="97:13" pos:end="97:29"><call pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:17">close</name><argument_list pos:start="97:18" pos:end="97:29">(<argument pos:start="97:19" pos:end="97:28"><expr pos:start="97:19" pos:end="97:28"><name pos:start="97:19" pos:end="97:28"><name pos:start="97:19" pos:end="97:25">stdinfd</name><index pos:start="97:26" pos:end="97:28">[<expr pos:start="97:27" pos:end="97:27"><literal type="number" pos:start="97:27" pos:end="97:27">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:24">(<expr pos:start="101:13" pos:end="101:23"><operator pos:start="101:13" pos:end="101:13">!</operator><name pos:start="101:14" pos:end="101:23">stdoutnull</name></expr>)</condition> <block pos:start="101:26" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:31">

            <expr_stmt pos:start="103:13" pos:end="103:31"><expr pos:start="103:13" pos:end="103:30"><call pos:start="103:13" pos:end="103:30"><name pos:start="103:13" pos:end="103:17">close</name><argument_list pos:start="103:18" pos:end="103:30">(<argument pos:start="103:19" pos:end="103:29"><expr pos:start="103:19" pos:end="103:29"><name pos:start="103:19" pos:end="103:29"><name pos:start="103:19" pos:end="103:26">stdoutfd</name><index pos:start="103:27" pos:end="103:29">[<expr pos:start="103:28" pos:end="103:28"><literal type="number" pos:start="103:28" pos:end="103:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:31"><expr pos:start="105:13" pos:end="105:30"><call pos:start="105:13" pos:end="105:30"><name pos:start="105:13" pos:end="105:17">close</name><argument_list pos:start="105:18" pos:end="105:30">(<argument pos:start="105:19" pos:end="105:29"><expr pos:start="105:19" pos:end="105:29"><name pos:start="105:19" pos:end="105:29"><name pos:start="105:19" pos:end="105:26">stdoutfd</name><index pos:start="105:27" pos:end="105:29">[<expr pos:start="105:28" pos:end="105:28"><literal type="number" pos:start="105:28" pos:end="105:28">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:45"><expr pos:start="111:9" pos:end="111:44"><call pos:start="111:9" pos:end="111:44"><name pos:start="111:9" pos:end="111:13">execv</name><argument_list pos:start="111:14" pos:end="111:44">(<argument pos:start="111:15" pos:end="111:21"><expr pos:start="111:15" pos:end="111:21"><name pos:start="111:15" pos:end="111:21"><name pos:start="111:15" pos:end="111:18">argv</name><index pos:start="111:19" pos:end="111:21">[<expr pos:start="111:20" pos:end="111:20"><literal type="number" pos:start="111:20" pos:end="111:20">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="111:24" pos:end="111:43"><expr pos:start="111:24" pos:end="111:43"><operator pos:start="111:24" pos:end="111:24">(</operator><name pos:start="111:25" pos:end="111:28">char</name> <operator pos:start="111:30" pos:end="111:30">*</operator> <specifier pos:start="111:32" pos:end="111:36">const</specifier> <operator pos:start="111:38" pos:end="111:38">*</operator><operator pos:start="111:39" pos:end="111:39">)</operator><name pos:start="111:40" pos:end="111:43">argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:17"><expr pos:start="113:9" pos:end="113:16"><call pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:13">_exit</name><argument_list pos:start="113:14" pos:end="113:16">(<argument pos:start="113:15" pos:end="113:15"><expr pos:start="113:15" pos:end="113:15"><literal type="number" pos:start="113:15" pos:end="113:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:19">(<expr pos:start="119:9" pos:end="119:18"><operator pos:start="119:9" pos:end="119:9">!</operator><name pos:start="119:10" pos:end="119:18">stdinnull</name></expr>)</condition> <block pos:start="119:21" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:26">

        <expr_stmt pos:start="121:9" pos:end="121:26"><expr pos:start="121:9" pos:end="121:25"><call pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:13">close</name><argument_list pos:start="121:14" pos:end="121:25">(<argument pos:start="121:15" pos:end="121:24"><expr pos:start="121:15" pos:end="121:24"><name pos:start="121:15" pos:end="121:24"><name pos:start="121:15" pos:end="121:21">stdinfd</name><index pos:start="121:22" pos:end="121:24">[<expr pos:start="121:23" pos:end="121:23"><literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:20">(<expr pos:start="125:9" pos:end="125:19"><operator pos:start="125:9" pos:end="125:9">!</operator><name pos:start="125:10" pos:end="125:19">stdoutnull</name></expr>)</condition> <block pos:start="125:22" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:27">

        <expr_stmt pos:start="127:9" pos:end="127:27"><expr pos:start="127:9" pos:end="127:26"><call pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:13">close</name><argument_list pos:start="127:14" pos:end="127:26">(<argument pos:start="127:15" pos:end="127:25"><expr pos:start="127:15" pos:end="127:25"><name pos:start="127:15" pos:end="127:25"><name pos:start="127:15" pos:end="127:22">stdoutfd</name><index pos:start="127:23" pos:end="127:25">[<expr pos:start="127:24" pos:end="127:24"><literal type="number" pos:start="127:24" pos:end="127:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="137:43"><expr pos:start="133:5" pos:end="137:42"><name pos:start="133:5" pos:end="133:7">ioc</name> <operator pos:start="133:9" pos:end="133:9">=</operator> <call pos:start="133:11" pos:end="137:42"><name pos:start="133:11" pos:end="133:37">qio_channel_command_new_pid</name><argument_list pos:start="133:38" pos:end="137:42">(<argument pos:start="133:39" pos:end="133:70"><expr pos:start="133:39" pos:end="133:70"><ternary pos:start="133:39" pos:end="133:70"><condition pos:start="133:39" pos:end="133:49"><expr pos:start="133:39" pos:end="133:47"><name pos:start="133:39" pos:end="133:47">stdinnull</name></expr> ?</condition><then pos:start="133:51" pos:end="133:57"> <expr pos:start="133:51" pos:end="133:57"><name pos:start="133:51" pos:end="133:57">devnull</name></expr> </then><else pos:start="133:59" pos:end="133:70">: <expr pos:start="133:61" pos:end="133:70"><name pos:start="133:61" pos:end="133:70"><name pos:start="133:61" pos:end="133:67">stdinfd</name><index pos:start="133:68" pos:end="133:70">[<expr pos:start="133:69" pos:end="133:69"><literal type="number" pos:start="133:69" pos:end="133:69">1</literal></expr>]</index></name></expr></else></ternary></expr></argument>,

                                      <argument pos:start="135:39" pos:end="135:72"><expr pos:start="135:39" pos:end="135:72"><ternary pos:start="135:39" pos:end="135:72"><condition pos:start="135:39" pos:end="135:50"><expr pos:start="135:39" pos:end="135:48"><name pos:start="135:39" pos:end="135:48">stdoutnull</name></expr> ?</condition><then pos:start="135:52" pos:end="135:58"> <expr pos:start="135:52" pos:end="135:58"><name pos:start="135:52" pos:end="135:58">devnull</name></expr> </then><else pos:start="135:60" pos:end="135:72">: <expr pos:start="135:62" pos:end="135:72"><name pos:start="135:62" pos:end="135:72"><name pos:start="135:62" pos:end="135:69">stdoutfd</name><index pos:start="135:70" pos:end="135:72">[<expr pos:start="135:71" pos:end="135:71"><literal type="number" pos:start="135:71" pos:end="135:71">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>,

                                      <argument pos:start="137:39" pos:end="137:41"><expr pos:start="137:39" pos:end="137:41"><name pos:start="137:39" pos:end="137:41">pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:61"><expr pos:start="139:5" pos:end="139:60"><call pos:start="139:5" pos:end="139:60"><name pos:start="139:5" pos:end="139:39">trace_qio_channel_command_new_spawn</name><argument_list pos:start="139:40" pos:end="139:60">(<argument pos:start="139:41" pos:end="139:43"><expr pos:start="139:41" pos:end="139:43"><name pos:start="139:41" pos:end="139:43">ioc</name></expr></argument>, <argument pos:start="139:46" pos:end="139:52"><expr pos:start="139:46" pos:end="139:52"><name pos:start="139:46" pos:end="139:52"><name pos:start="139:46" pos:end="139:49">argv</name><index pos:start="139:50" pos:end="139:52">[<expr pos:start="139:51" pos:end="139:51"><literal type="number" pos:start="139:51" pos:end="139:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="139:55" pos:end="139:59"><expr pos:start="139:55" pos:end="139:59"><name pos:start="139:55" pos:end="139:59">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="141:5" pos:end="141:15">return <expr pos:start="141:12" pos:end="141:14"><name pos:start="141:12" pos:end="141:14">ioc</name></expr>;</return>



 <label pos:start="145:2" pos:end="145:7"><name pos:start="145:2" pos:end="145:6">error</name>:</label>

    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:25">(<expr pos:start="147:9" pos:end="147:24"><name pos:start="147:9" pos:end="147:18"><name pos:start="147:9" pos:end="147:15">stdinfd</name><index pos:start="147:16" pos:end="147:18">[<expr pos:start="147:17" pos:end="147:17"><literal type="number" pos:start="147:17" pos:end="147:17">0</literal></expr>]</index></name> <operator pos:start="147:20" pos:end="147:21">!=</operator> <operator pos:start="147:23" pos:end="147:23">-</operator><literal type="number" pos:start="147:24" pos:end="147:24">1</literal></expr>)</condition> <block pos:start="147:27" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:26">

        <expr_stmt pos:start="149:9" pos:end="149:26"><expr pos:start="149:9" pos:end="149:25"><call pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:13">close</name><argument_list pos:start="149:14" pos:end="149:25">(<argument pos:start="149:15" pos:end="149:24"><expr pos:start="149:15" pos:end="149:24"><name pos:start="149:15" pos:end="149:24"><name pos:start="149:15" pos:end="149:21">stdinfd</name><index pos:start="149:22" pos:end="149:24">[<expr pos:start="149:23" pos:end="149:23"><literal type="number" pos:start="149:23" pos:end="149:23">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="153:5" pos:end="157:5"><if pos:start="153:5" pos:end="157:5">if <condition pos:start="153:8" pos:end="153:25">(<expr pos:start="153:9" pos:end="153:24"><name pos:start="153:9" pos:end="153:18"><name pos:start="153:9" pos:end="153:15">stdinfd</name><index pos:start="153:16" pos:end="153:18">[<expr pos:start="153:17" pos:end="153:17"><literal type="number" pos:start="153:17" pos:end="153:17">1</literal></expr>]</index></name> <operator pos:start="153:20" pos:end="153:21">!=</operator> <operator pos:start="153:23" pos:end="153:23">-</operator><literal type="number" pos:start="153:24" pos:end="153:24">1</literal></expr>)</condition> <block pos:start="153:27" pos:end="157:5">{<block_content pos:start="155:9" pos:end="155:26">

        <expr_stmt pos:start="155:9" pos:end="155:26"><expr pos:start="155:9" pos:end="155:25"><call pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:13">close</name><argument_list pos:start="155:14" pos:end="155:25">(<argument pos:start="155:15" pos:end="155:24"><expr pos:start="155:15" pos:end="155:24"><name pos:start="155:15" pos:end="155:24"><name pos:start="155:15" pos:end="155:21">stdinfd</name><index pos:start="155:22" pos:end="155:24">[<expr pos:start="155:23" pos:end="155:23"><literal type="number" pos:start="155:23" pos:end="155:23">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="159:5" pos:end="163:5"><if pos:start="159:5" pos:end="163:5">if <condition pos:start="159:8" pos:end="159:26">(<expr pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:19"><name pos:start="159:9" pos:end="159:16">stdoutfd</name><index pos:start="159:17" pos:end="159:19">[<expr pos:start="159:18" pos:end="159:18"><literal type="number" pos:start="159:18" pos:end="159:18">0</literal></expr>]</index></name> <operator pos:start="159:21" pos:end="159:22">!=</operator> <operator pos:start="159:24" pos:end="159:24">-</operator><literal type="number" pos:start="159:25" pos:end="159:25">1</literal></expr>)</condition> <block pos:start="159:28" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:27">

        <expr_stmt pos:start="161:9" pos:end="161:27"><expr pos:start="161:9" pos:end="161:26"><call pos:start="161:9" pos:end="161:26"><name pos:start="161:9" pos:end="161:13">close</name><argument_list pos:start="161:14" pos:end="161:26">(<argument pos:start="161:15" pos:end="161:25"><expr pos:start="161:15" pos:end="161:25"><name pos:start="161:15" pos:end="161:25"><name pos:start="161:15" pos:end="161:22">stdoutfd</name><index pos:start="161:23" pos:end="161:25">[<expr pos:start="161:24" pos:end="161:24"><literal type="number" pos:start="161:24" pos:end="161:24">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="165:5" pos:end="169:5"><if pos:start="165:5" pos:end="169:5">if <condition pos:start="165:8" pos:end="165:26">(<expr pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:19"><name pos:start="165:9" pos:end="165:16">stdoutfd</name><index pos:start="165:17" pos:end="165:19">[<expr pos:start="165:18" pos:end="165:18"><literal type="number" pos:start="165:18" pos:end="165:18">1</literal></expr>]</index></name> <operator pos:start="165:21" pos:end="165:22">!=</operator> <operator pos:start="165:24" pos:end="165:24">-</operator><literal type="number" pos:start="165:25" pos:end="165:25">1</literal></expr>)</condition> <block pos:start="165:28" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:27">

        <expr_stmt pos:start="167:9" pos:end="167:27"><expr pos:start="167:9" pos:end="167:26"><call pos:start="167:9" pos:end="167:26"><name pos:start="167:9" pos:end="167:13">close</name><argument_list pos:start="167:14" pos:end="167:26">(<argument pos:start="167:15" pos:end="167:25"><expr pos:start="167:15" pos:end="167:25"><name pos:start="167:15" pos:end="167:25"><name pos:start="167:15" pos:end="167:22">stdoutfd</name><index pos:start="167:23" pos:end="167:25">[<expr pos:start="167:24" pos:end="167:24"><literal type="number" pos:start="167:24" pos:end="167:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="171:5" pos:end="171:16">return <expr pos:start="171:12" pos:end="171:15"><name pos:start="171:12" pos:end="171:15">NULL</name></expr>;</return>

</block_content>}</block>
</unit>
