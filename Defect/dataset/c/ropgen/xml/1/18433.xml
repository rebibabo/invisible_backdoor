<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18433.c" pos:tabs="8"><function pos:start="1:1" pos:end="72:1"><type pos:start="1:1" pos:end="1:22"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:22">abi_long</name></type> <name pos:start="1:24" pos:end="1:46">host_to_target_sockaddr</name><parameter_list pos:start="1:47" pos:end="5:61">(<parameter pos:start="1:48" pos:end="1:68"><decl pos:start="1:48" pos:end="1:68"><type pos:start="1:48" pos:end="1:68"><name pos:start="1:48" pos:end="1:56">abi_ulong</name></type> <name pos:start="1:58" pos:end="1:68">target_addr</name></decl></parameter>,

                                               <parameter pos:start="3:48" pos:end="3:68"><decl pos:start="3:48" pos:end="3:68"><type pos:start="3:48" pos:end="3:68"><name pos:start="3:48" pos:end="3:62"><name pos:start="3:48" pos:end="3:53">struct</name> <name pos:start="3:55" pos:end="3:62">sockaddr</name></name> <modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:68">addr</name></decl></parameter>,

                                               <parameter pos:start="5:48" pos:end="5:60"><decl pos:start="5:48" pos:end="5:60"><type pos:start="5:48" pos:end="5:60"><name pos:start="5:48" pos:end="5:56">socklen_t</name></type> <name pos:start="5:58" pos:end="5:60">len</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="72:1">{<block_content pos:start="9:5" pos:end="70:13">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:26">target_sockaddr</name></name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:40">target_saddr</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:11">len</name> <operator pos:start="13:13" pos:end="13:14">==</operator> <literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>)</condition> <block pos:start="13:19" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>




    <expr_stmt pos:start="22:5" pos:end="22:64"><expr pos:start="22:5" pos:end="22:63"><name pos:start="22:5" pos:end="22:16">target_saddr</name> <operator pos:start="22:18" pos:end="22:18">=</operator> <call pos:start="22:20" pos:end="22:63"><name pos:start="22:20" pos:end="22:28">lock_user</name><argument_list pos:start="22:29" pos:end="22:63">(<argument pos:start="22:30" pos:end="22:41"><expr pos:start="22:30" pos:end="22:41"><name pos:start="22:30" pos:end="22:41">VERIFY_WRITE</name></expr></argument>, <argument pos:start="22:44" pos:end="22:54"><expr pos:start="22:44" pos:end="22:54"><name pos:start="22:44" pos:end="22:54">target_addr</name></expr></argument>, <argument pos:start="22:57" pos:end="22:59"><expr pos:start="22:57" pos:end="22:59"><name pos:start="22:57" pos:end="22:59">len</name></expr></argument>, <argument pos:start="22:62" pos:end="22:62"><expr pos:start="22:62" pos:end="22:62"><literal type="number" pos:start="22:62" pos:end="22:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="24:5" pos:end="26:30"><if pos:start="24:5" pos:end="26:30">if <condition pos:start="24:8" pos:end="24:22">(<expr pos:start="24:9" pos:end="24:21"><operator pos:start="24:9" pos:end="24:9">!</operator><name pos:start="24:10" pos:end="24:21">target_saddr</name></expr>)</condition><block type="pseudo" pos:start="26:9" pos:end="26:30"><block_content pos:start="26:9" pos:end="26:30">

        <return pos:start="26:9" pos:end="26:30">return <expr pos:start="26:16" pos:end="26:29"><operator pos:start="26:16" pos:end="26:16">-</operator><name pos:start="26:17" pos:end="26:29">TARGET_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="28:5" pos:end="28:36"><expr pos:start="28:5" pos:end="28:35"><call pos:start="28:5" pos:end="28:35"><name pos:start="28:5" pos:end="28:10">memcpy</name><argument_list pos:start="28:11" pos:end="28:35">(<argument pos:start="28:12" pos:end="28:23"><expr pos:start="28:12" pos:end="28:23"><name pos:start="28:12" pos:end="28:23">target_saddr</name></expr></argument>, <argument pos:start="28:26" pos:end="28:29"><expr pos:start="28:26" pos:end="28:29"><name pos:start="28:26" pos:end="28:29">addr</name></expr></argument>, <argument pos:start="28:32" pos:end="28:34"><expr pos:start="28:32" pos:end="28:34"><name pos:start="28:32" pos:end="28:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="30:5" pos:end="36:5"><if pos:start="30:5" pos:end="36:5">if <condition pos:start="30:8" pos:end="32:40">(<expr pos:start="30:9" pos:end="32:39"><name pos:start="30:9" pos:end="30:11">len</name> <operator pos:start="30:13" pos:end="30:14">&gt;=</operator> <call pos:start="30:16" pos:end="30:58"><name pos:start="30:16" pos:end="30:23">offsetof</name><argument_list pos:start="30:24" pos:end="30:58">(<argument pos:start="30:25" pos:end="30:46"><expr pos:start="30:25" pos:end="30:46">struct <name pos:start="30:32" pos:end="30:46">target_sockaddr</name></expr></argument>, <argument pos:start="30:49" pos:end="30:57"><expr pos:start="30:49" pos:end="30:57"><name pos:start="30:49" pos:end="30:57">sa_family</name></expr></argument>)</argument_list></call> <operator pos:start="30:60" pos:end="30:60">+</operator>

        <sizeof pos:start="32:9" pos:end="32:39">sizeof<argument_list pos:start="32:15" pos:end="32:39">(<argument pos:start="32:16" pos:end="32:38"><expr pos:start="32:16" pos:end="32:38"><name pos:start="32:16" pos:end="32:38"><name pos:start="32:16" pos:end="32:27">target_saddr</name><operator pos:start="32:28" pos:end="32:29">-&gt;</operator><name pos:start="32:30" pos:end="32:38">sa_family</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="32:42" pos:end="36:5">{<block_content pos:start="34:9" pos:end="34:59">

        <expr_stmt pos:start="34:9" pos:end="34:59"><expr pos:start="34:9" pos:end="34:58"><name pos:start="34:9" pos:end="34:31"><name pos:start="34:9" pos:end="34:20">target_saddr</name><operator pos:start="34:21" pos:end="34:22">-&gt;</operator><name pos:start="34:23" pos:end="34:31">sa_family</name></name> <operator pos:start="34:33" pos:end="34:33">=</operator> <call pos:start="34:35" pos:end="34:58"><name pos:start="34:35" pos:end="34:41">tswap16</name><argument_list pos:start="34:42" pos:end="34:58">(<argument pos:start="34:43" pos:end="34:57"><expr pos:start="34:43" pos:end="34:57"><name pos:start="34:43" pos:end="34:57"><name pos:start="34:43" pos:end="34:46">addr</name><operator pos:start="34:47" pos:end="34:48">-&gt;</operator><name pos:start="34:49" pos:end="34:57">sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="38:5" pos:end="64:5"><if pos:start="38:5" pos:end="46:5">if <condition pos:start="38:8" pos:end="38:75">(<expr pos:start="38:9" pos:end="38:74"><name pos:start="38:9" pos:end="38:23"><name pos:start="38:9" pos:end="38:12">addr</name><operator pos:start="38:13" pos:end="38:14">-&gt;</operator><name pos:start="38:15" pos:end="38:23">sa_family</name></name> <operator pos:start="38:25" pos:end="38:26">==</operator> <name pos:start="38:28" pos:end="38:37">AF_NETLINK</name> <operator pos:start="38:39" pos:end="38:40">&amp;&amp;</operator> <name pos:start="38:42" pos:end="38:44">len</name> <operator pos:start="38:46" pos:end="38:47">&gt;=</operator> <sizeof pos:start="38:49" pos:end="38:74">sizeof<argument_list pos:start="38:55" pos:end="38:74">(<argument pos:start="38:56" pos:end="38:73"><expr pos:start="38:56" pos:end="38:73">struct <name pos:start="38:63" pos:end="38:73">sockaddr_nl</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="38:77" pos:end="46:5">{<block_content pos:start="40:9" pos:end="44:61">

        <decl_stmt pos:start="40:9" pos:end="40:75"><decl pos:start="40:9" pos:end="40:74"><type pos:start="40:9" pos:end="40:28"><name pos:start="40:9" pos:end="40:26"><name pos:start="40:9" pos:end="40:14">struct</name> <name pos:start="40:16" pos:end="40:26">sockaddr_nl</name></name> <modifier pos:start="40:28" pos:end="40:28">*</modifier></type><name pos:start="40:29" pos:end="40:37">target_nl</name> <init pos:start="40:39" pos:end="40:74">= <expr pos:start="40:41" pos:end="40:74"><operator pos:start="40:41" pos:end="40:41">(</operator>struct <name pos:start="40:49" pos:end="40:59">sockaddr_nl</name> <operator pos:start="40:61" pos:end="40:61">*</operator><operator pos:start="40:62" pos:end="40:62">)</operator><name pos:start="40:63" pos:end="40:74">target_saddr</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="42:9" pos:end="42:55"><expr pos:start="42:9" pos:end="42:54"><name pos:start="42:9" pos:end="42:25"><name pos:start="42:9" pos:end="42:17">target_nl</name><operator pos:start="42:18" pos:end="42:19">-&gt;</operator><name pos:start="42:20" pos:end="42:25">nl_pid</name></name> <operator pos:start="42:27" pos:end="42:27">=</operator> <call pos:start="42:29" pos:end="42:54"><name pos:start="42:29" pos:end="42:35">tswap32</name><argument_list pos:start="42:36" pos:end="42:54">(<argument pos:start="42:37" pos:end="42:53"><expr pos:start="42:37" pos:end="42:53"><name pos:start="42:37" pos:end="42:53"><name pos:start="42:37" pos:end="42:45">target_nl</name><operator pos:start="42:46" pos:end="42:47">-&gt;</operator><name pos:start="42:48" pos:end="42:53">nl_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="44:9" pos:end="44:61"><expr pos:start="44:9" pos:end="44:60"><name pos:start="44:9" pos:end="44:28"><name pos:start="44:9" pos:end="44:17">target_nl</name><operator pos:start="44:18" pos:end="44:19">-&gt;</operator><name pos:start="44:20" pos:end="44:28">nl_groups</name></name> <operator pos:start="44:30" pos:end="44:30">=</operator> <call pos:start="44:32" pos:end="44:60"><name pos:start="44:32" pos:end="44:38">tswap32</name><argument_list pos:start="44:39" pos:end="44:60">(<argument pos:start="44:40" pos:end="44:59"><expr pos:start="44:40" pos:end="44:59"><name pos:start="44:40" pos:end="44:59"><name pos:start="44:40" pos:end="44:48">target_nl</name><operator pos:start="44:49" pos:end="44:50">-&gt;</operator><name pos:start="44:51" pos:end="44:59">nl_groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="46:7" pos:end="54:5">else if <condition pos:start="46:15" pos:end="46:44">(<expr pos:start="46:16" pos:end="46:43"><name pos:start="46:16" pos:end="46:30"><name pos:start="46:16" pos:end="46:19">addr</name><operator pos:start="46:20" pos:end="46:21">-&gt;</operator><name pos:start="46:22" pos:end="46:30">sa_family</name></name> <operator pos:start="46:32" pos:end="46:33">==</operator> <name pos:start="46:35" pos:end="46:43">AF_PACKET</name></expr>)</condition> <block pos:start="46:46" pos:end="54:5">{<block_content pos:start="48:9" pos:end="52:63">

        <decl_stmt pos:start="48:9" pos:end="48:75"><decl pos:start="48:9" pos:end="48:74"><type pos:start="48:9" pos:end="48:28"><name pos:start="48:9" pos:end="48:26"><name pos:start="48:9" pos:end="48:14">struct</name> <name pos:start="48:16" pos:end="48:26">sockaddr_ll</name></name> <modifier pos:start="48:28" pos:end="48:28">*</modifier></type><name pos:start="48:29" pos:end="48:37">target_ll</name> <init pos:start="48:39" pos:end="48:74">= <expr pos:start="48:41" pos:end="48:74"><operator pos:start="48:41" pos:end="48:41">(</operator>struct <name pos:start="48:49" pos:end="48:59">sockaddr_ll</name> <operator pos:start="48:61" pos:end="48:61">*</operator><operator pos:start="48:62" pos:end="48:62">)</operator><name pos:start="48:63" pos:end="48:74">target_saddr</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="50:9" pos:end="50:65"><expr pos:start="50:9" pos:end="50:64"><name pos:start="50:9" pos:end="50:30"><name pos:start="50:9" pos:end="50:17">target_ll</name><operator pos:start="50:18" pos:end="50:19">-&gt;</operator><name pos:start="50:20" pos:end="50:30">sll_ifindex</name></name> <operator pos:start="50:32" pos:end="50:32">=</operator> <call pos:start="50:34" pos:end="50:64"><name pos:start="50:34" pos:end="50:40">tswap32</name><argument_list pos:start="50:41" pos:end="50:64">(<argument pos:start="50:42" pos:end="50:63"><expr pos:start="50:42" pos:end="50:63"><name pos:start="50:42" pos:end="50:63"><name pos:start="50:42" pos:end="50:50">target_ll</name><operator pos:start="50:51" pos:end="50:52">-&gt;</operator><name pos:start="50:53" pos:end="50:63">sll_ifindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="52:9" pos:end="52:63"><expr pos:start="52:9" pos:end="52:62"><name pos:start="52:9" pos:end="52:29"><name pos:start="52:9" pos:end="52:17">target_ll</name><operator pos:start="52:18" pos:end="52:19">-&gt;</operator><name pos:start="52:20" pos:end="52:29">sll_hatype</name></name> <operator pos:start="52:31" pos:end="52:31">=</operator> <call pos:start="52:33" pos:end="52:62"><name pos:start="52:33" pos:end="52:39">tswap16</name><argument_list pos:start="52:40" pos:end="52:62">(<argument pos:start="52:41" pos:end="52:61"><expr pos:start="52:41" pos:end="52:61"><name pos:start="52:41" pos:end="52:61"><name pos:start="52:41" pos:end="52:49">target_ll</name><operator pos:start="52:50" pos:end="52:51">-&gt;</operator><name pos:start="52:52" pos:end="52:61">sll_hatype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="54:7" pos:end="64:5">else if <condition pos:start="54:15" pos:end="56:57">(<expr pos:start="54:16" pos:end="56:56"><name pos:start="54:16" pos:end="54:30"><name pos:start="54:16" pos:end="54:19">addr</name><operator pos:start="54:20" pos:end="54:21">-&gt;</operator><name pos:start="54:22" pos:end="54:30">sa_family</name></name> <operator pos:start="54:32" pos:end="54:33">==</operator> <name pos:start="54:35" pos:end="54:42">AF_INET6</name> <operator pos:start="54:44" pos:end="54:45">&amp;&amp;</operator>

               <name pos:start="56:16" pos:end="56:18">len</name> <operator pos:start="56:20" pos:end="56:21">&gt;=</operator> <sizeof pos:start="56:23" pos:end="56:56">sizeof<argument_list pos:start="56:29" pos:end="56:56">(<argument pos:start="56:30" pos:end="56:55"><expr pos:start="56:30" pos:end="56:55">struct <name pos:start="56:37" pos:end="56:55">target_sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="56:59" pos:end="64:5">{<block_content pos:start="58:9" pos:end="62:71">

        <decl_stmt pos:start="58:9" pos:end="60:58"><decl pos:start="58:9" pos:end="60:57"><type pos:start="58:9" pos:end="58:36"><name pos:start="58:9" pos:end="58:34"><name pos:start="58:9" pos:end="58:14">struct</name> <name pos:start="58:16" pos:end="58:34">target_sockaddr_in6</name></name> <modifier pos:start="58:36" pos:end="58:36">*</modifier></type><name pos:start="58:37" pos:end="58:46">target_in6</name> <init pos:start="58:48" pos:end="60:57">=

               <expr pos:start="60:16" pos:end="60:57"><operator pos:start="60:16" pos:end="60:16">(</operator>struct <name pos:start="60:24" pos:end="60:42">target_sockaddr_in6</name> <operator pos:start="60:44" pos:end="60:44">*</operator><operator pos:start="60:45" pos:end="60:45">)</operator><name pos:start="60:46" pos:end="60:57">target_saddr</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="62:9" pos:end="62:71"><expr pos:start="62:9" pos:end="62:70"><name pos:start="62:9" pos:end="62:33"><name pos:start="62:9" pos:end="62:18">target_in6</name><operator pos:start="62:19" pos:end="62:20">-&gt;</operator><name pos:start="62:21" pos:end="62:33">sin6_scope_id</name></name> <operator pos:start="62:35" pos:end="62:35">=</operator> <call pos:start="62:37" pos:end="62:70"><name pos:start="62:37" pos:end="62:43">tswap16</name><argument_list pos:start="62:44" pos:end="62:70">(<argument pos:start="62:45" pos:end="62:69"><expr pos:start="62:45" pos:end="62:69"><name pos:start="62:45" pos:end="62:69"><name pos:start="62:45" pos:end="62:54">target_in6</name><operator pos:start="62:55" pos:end="62:56">-&gt;</operator><name pos:start="62:57" pos:end="62:69">sin6_scope_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="66:5" pos:end="66:48"><expr pos:start="66:5" pos:end="66:47"><call pos:start="66:5" pos:end="66:47"><name pos:start="66:5" pos:end="66:15">unlock_user</name><argument_list pos:start="66:16" pos:end="66:47">(<argument pos:start="66:17" pos:end="66:28"><expr pos:start="66:17" pos:end="66:28"><name pos:start="66:17" pos:end="66:28">target_saddr</name></expr></argument>, <argument pos:start="66:31" pos:end="66:41"><expr pos:start="66:31" pos:end="66:41"><name pos:start="66:31" pos:end="66:41">target_addr</name></expr></argument>, <argument pos:start="66:44" pos:end="66:46"><expr pos:start="66:44" pos:end="66:46"><name pos:start="66:44" pos:end="66:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="70:5" pos:end="70:13">return <expr pos:start="70:12" pos:end="70:12"><literal type="number" pos:start="70:12" pos:end="70:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
