<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2020.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">mxf_read_generic_descriptor</name><parameter_list pos:start="1:39" pos:end="1:112">(<parameter pos:start="1:40" pos:end="1:64"><decl pos:start="1:40" pos:end="1:64"><type pos:start="1:40" pos:end="1:64"><name pos:start="1:40" pos:end="1:52">MXFDescriptor</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:64">descriptor</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:83"><decl pos:start="1:67" pos:end="1:83"><type pos:start="1:67" pos:end="1:83"><name pos:start="1:67" pos:end="1:79">ByteIOContext</name> <modifier pos:start="1:81" pos:end="1:81">*</modifier></type><name pos:start="1:82" pos:end="1:83">pb</name></decl></parameter>, <parameter pos:start="1:86" pos:end="1:92"><decl pos:start="1:86" pos:end="1:92"><type pos:start="1:86" pos:end="1:92"><name pos:start="1:86" pos:end="1:88">int</name></type> <name pos:start="1:90" pos:end="1:92">tag</name></decl></parameter>, <parameter pos:start="1:95" pos:end="1:102"><decl pos:start="1:95" pos:end="1:102"><type pos:start="1:95" pos:end="1:102"><name pos:start="1:95" pos:end="1:97">int</name></type> <name pos:start="1:99" pos:end="1:102">size</name></decl></parameter>, <parameter pos:start="1:105" pos:end="1:111"><decl pos:start="1:105" pos:end="1:111"><type pos:start="1:105" pos:end="1:111"><name pos:start="1:105" pos:end="1:107">UID</name></type> <name pos:start="1:109" pos:end="1:111">uid</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:13">

    <switch pos:start="5:5" pos:end="117:5">switch<condition pos:start="5:11" pos:end="5:15">(<expr pos:start="5:12" pos:end="5:14"><name pos:start="5:12" pos:end="5:14">tag</name></expr>)</condition> <block pos:start="5:17" pos:end="117:5">{<block_content pos:start="7:5" pos:end="115:14">

    <case pos:start="7:5" pos:end="7:16">case <expr pos:start="7:10" pos:end="7:15"><literal type="number" pos:start="7:10" pos:end="7:15">0x3F01</literal></expr>:</case>

        <expr_stmt pos:start="9:9" pos:end="9:57"><expr pos:start="9:9" pos:end="9:56"><name pos:start="9:9" pos:end="9:41"><name pos:start="9:9" pos:end="9:18">descriptor</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:41">sub_descriptors_count</name></name> <operator pos:start="9:43" pos:end="9:43">=</operator> <call pos:start="9:45" pos:end="9:56"><name pos:start="9:45" pos:end="9:52">get_be32</name><argument_list pos:start="9:53" pos:end="9:56">(<argument pos:start="9:54" pos:end="9:55"><expr pos:start="9:54" pos:end="9:55"><name pos:start="9:54" pos:end="9:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="11:9" pos:end="13:22"><if pos:start="11:9" pos:end="13:22">if <condition pos:start="11:12" pos:end="11:72">(<expr pos:start="11:13" pos:end="11:71"><name pos:start="11:13" pos:end="11:45"><name pos:start="11:13" pos:end="11:22">descriptor</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:45">sub_descriptors_count</name></name> <operator pos:start="11:47" pos:end="11:48">&gt;=</operator> <name pos:start="11:50" pos:end="11:57">UINT_MAX</name> <operator pos:start="11:59" pos:end="11:59">/</operator> <sizeof pos:start="11:61" pos:end="11:71">sizeof<argument_list pos:start="11:67" pos:end="11:71">(<argument pos:start="11:68" pos:end="11:70"><expr pos:start="11:68" pos:end="11:70"><name pos:start="11:68" pos:end="11:70">UID</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="13:13" pos:end="13:22"><block_content pos:start="13:13" pos:end="13:22">

            <return pos:start="13:13" pos:end="13:22">return <expr pos:start="13:20" pos:end="13:21"><operator pos:start="13:20" pos:end="13:20">-</operator><literal type="number" pos:start="13:21" pos:end="13:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:102"><expr pos:start="15:9" pos:end="15:101"><name pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:18">descriptor</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:40">sub_descriptors_refs</name></name> <operator pos:start="15:42" pos:end="15:42">=</operator> <call pos:start="15:44" pos:end="15:101"><name pos:start="15:44" pos:end="15:52">av_malloc</name><argument_list pos:start="15:53" pos:end="15:101">(<argument pos:start="15:54" pos:end="15:100"><expr pos:start="15:54" pos:end="15:100"><name pos:start="15:54" pos:end="15:86"><name pos:start="15:54" pos:end="15:63">descriptor</name><operator pos:start="15:64" pos:end="15:65">-&gt;</operator><name pos:start="15:66" pos:end="15:86">sub_descriptors_count</name></name> <operator pos:start="15:88" pos:end="15:88">*</operator> <sizeof pos:start="15:90" pos:end="15:100">sizeof<argument_list pos:start="15:96" pos:end="15:100">(<argument pos:start="15:97" pos:end="15:99"><expr pos:start="15:97" pos:end="15:99"><name pos:start="15:97" pos:end="15:99">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="19:22"><if pos:start="17:9" pos:end="19:22">if <condition pos:start="17:12" pos:end="17:46">(<expr pos:start="17:13" pos:end="17:45"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:45"><name pos:start="17:14" pos:end="17:23">descriptor</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:45">sub_descriptors_refs</name></name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:22"><block_content pos:start="19:13" pos:end="19:22">

            <return pos:start="19:13" pos:end="19:22">return <expr pos:start="19:20" pos:end="19:21"><operator pos:start="19:20" pos:end="19:20">-</operator><literal type="number" pos:start="19:21" pos:end="19:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:25"><expr pos:start="21:9" pos:end="21:24"><call pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:17">url_fskip</name><argument_list pos:start="21:18" pos:end="21:24">(<argument pos:start="21:19" pos:end="21:20"><expr pos:start="21:19" pos:end="21:20"><name pos:start="21:19" pos:end="21:20">pb</name></expr></argument>, <argument pos:start="21:23" pos:end="21:23"><expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="21:27" pos:end="21:85">/* useless size of objects, always 16 according to specs */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:117"><expr pos:start="23:9" pos:end="23:116"><call pos:start="23:9" pos:end="23:116"><name pos:start="23:9" pos:end="23:18">get_buffer</name><argument_list pos:start="23:19" pos:end="23:116">(<argument pos:start="23:20" pos:end="23:21"><expr pos:start="23:20" pos:end="23:21"><name pos:start="23:20" pos:end="23:21">pb</name></expr></argument>, <argument pos:start="23:24" pos:end="23:66"><expr pos:start="23:24" pos:end="23:66"><operator pos:start="23:24" pos:end="23:24">(</operator><name pos:start="23:25" pos:end="23:31">uint8_t</name> <operator pos:start="23:33" pos:end="23:33">*</operator><operator pos:start="23:34" pos:end="23:34">)</operator><name pos:start="23:35" pos:end="23:66"><name pos:start="23:35" pos:end="23:44">descriptor</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:66">sub_descriptors_refs</name></name></expr></argument>, <argument pos:start="23:69" pos:end="23:115"><expr pos:start="23:69" pos:end="23:115"><name pos:start="23:69" pos:end="23:101"><name pos:start="23:69" pos:end="23:78">descriptor</name><operator pos:start="23:79" pos:end="23:80">-&gt;</operator><name pos:start="23:81" pos:end="23:101">sub_descriptors_count</name></name> <operator pos:start="23:103" pos:end="23:103">*</operator> <sizeof pos:start="23:105" pos:end="23:115">sizeof<argument_list pos:start="23:111" pos:end="23:115">(<argument pos:start="23:112" pos:end="23:114"><expr pos:start="23:112" pos:end="23:114"><name pos:start="23:112" pos:end="23:114">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:16">case <expr pos:start="27:10" pos:end="27:15"><literal type="number" pos:start="27:10" pos:end="27:15">0x3004</literal></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:61"><expr pos:start="29:9" pos:end="29:60"><call pos:start="29:9" pos:end="29:60"><name pos:start="29:9" pos:end="29:18">get_buffer</name><argument_list pos:start="29:19" pos:end="29:60">(<argument pos:start="29:20" pos:end="29:21"><expr pos:start="29:20" pos:end="29:21"><name pos:start="29:20" pos:end="29:21">pb</name></expr></argument>, <argument pos:start="29:24" pos:end="29:55"><expr pos:start="29:24" pos:end="29:55"><name pos:start="29:24" pos:end="29:55"><name pos:start="29:24" pos:end="29:33">descriptor</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:55">essence_container_ul</name></name></expr></argument>, <argument pos:start="29:58" pos:end="29:59"><expr pos:start="29:58" pos:end="29:59"><literal type="number" pos:start="29:58" pos:end="29:59">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:16">case <expr pos:start="33:10" pos:end="33:15"><literal type="number" pos:start="33:10" pos:end="33:15">0x3006</literal></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:51"><expr pos:start="35:9" pos:end="35:50"><name pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:18">descriptor</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:35">linked_track_id</name></name> <operator pos:start="35:37" pos:end="35:37">=</operator> <call pos:start="35:39" pos:end="35:50"><name pos:start="35:39" pos:end="35:46">get_be32</name><argument_list pos:start="35:47" pos:end="35:50">(<argument pos:start="35:48" pos:end="35:49"><expr pos:start="35:48" pos:end="35:49"><name pos:start="35:48" pos:end="35:49">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:16">case <expr pos:start="39:10" pos:end="39:15"><literal type="number" pos:start="39:10" pos:end="39:15">0x3201</literal></expr>:</case> <comment type="block" pos:start="39:18" pos:end="39:43">/* PictureEssenceCoding */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:57"><expr pos:start="41:9" pos:end="41:56"><call pos:start="41:9" pos:end="41:56"><name pos:start="41:9" pos:end="41:18">get_buffer</name><argument_list pos:start="41:19" pos:end="41:56">(<argument pos:start="41:20" pos:end="41:21"><expr pos:start="41:20" pos:end="41:21"><name pos:start="41:20" pos:end="41:21">pb</name></expr></argument>, <argument pos:start="41:24" pos:end="41:51"><expr pos:start="41:24" pos:end="41:51"><name pos:start="41:24" pos:end="41:51"><name pos:start="41:24" pos:end="41:33">descriptor</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:51">essence_codec_ul</name></name></expr></argument>, <argument pos:start="41:54" pos:end="41:55"><expr pos:start="41:54" pos:end="41:55"><literal type="number" pos:start="41:54" pos:end="41:55">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:16">case <expr pos:start="45:10" pos:end="45:15"><literal type="number" pos:start="45:10" pos:end="45:15">0x3203</literal></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:41"><expr pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:18">descriptor</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:25">width</name></name> <operator pos:start="47:27" pos:end="47:27">=</operator> <call pos:start="47:29" pos:end="47:40"><name pos:start="47:29" pos:end="47:36">get_be32</name><argument_list pos:start="47:37" pos:end="47:40">(<argument pos:start="47:38" pos:end="47:39"><expr pos:start="47:38" pos:end="47:39"><name pos:start="47:38" pos:end="47:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:16">case <expr pos:start="51:10" pos:end="51:15"><literal type="number" pos:start="51:10" pos:end="51:15">0x3202</literal></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:18">descriptor</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:26">height</name></name> <operator pos:start="53:28" pos:end="53:28">=</operator> <call pos:start="53:30" pos:end="53:41"><name pos:start="53:30" pos:end="53:37">get_be32</name><argument_list pos:start="53:38" pos:end="53:41">(<argument pos:start="53:39" pos:end="53:40"><expr pos:start="53:39" pos:end="53:40"><name pos:start="53:39" pos:end="53:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:16">case <expr pos:start="57:10" pos:end="57:15"><literal type="number" pos:start="57:10" pos:end="57:15">0x320E</literal></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:52"><expr pos:start="59:9" pos:end="59:51"><name pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:18">descriptor</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:32">aspect_ratio</name><operator pos:start="59:33" pos:end="59:33">.</operator><name pos:start="59:34" pos:end="59:36">num</name></name> <operator pos:start="59:38" pos:end="59:38">=</operator> <call pos:start="59:40" pos:end="59:51"><name pos:start="59:40" pos:end="59:47">get_be32</name><argument_list pos:start="59:48" pos:end="59:51">(<argument pos:start="59:49" pos:end="59:50"><expr pos:start="59:49" pos:end="59:50"><name pos:start="59:49" pos:end="59:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:52"><expr pos:start="61:9" pos:end="61:51"><name pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:18">descriptor</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:32">aspect_ratio</name><operator pos:start="61:33" pos:end="61:33">.</operator><name pos:start="61:34" pos:end="61:36">den</name></name> <operator pos:start="61:38" pos:end="61:38">=</operator> <call pos:start="61:40" pos:end="61:51"><name pos:start="61:40" pos:end="61:47">get_be32</name><argument_list pos:start="61:48" pos:end="61:51">(<argument pos:start="61:49" pos:end="61:50"><expr pos:start="61:49" pos:end="61:50"><name pos:start="61:49" pos:end="61:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:16">case <expr pos:start="65:10" pos:end="65:15"><literal type="number" pos:start="65:10" pos:end="65:15">0x3D03</literal></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:18">descriptor</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:31">sample_rate</name><operator pos:start="67:32" pos:end="67:32">.</operator><name pos:start="67:33" pos:end="67:35">num</name></name> <operator pos:start="67:37" pos:end="67:37">=</operator> <call pos:start="67:39" pos:end="67:50"><name pos:start="67:39" pos:end="67:46">get_be32</name><argument_list pos:start="67:47" pos:end="67:50">(<argument pos:start="67:48" pos:end="67:49"><expr pos:start="67:48" pos:end="67:49"><name pos:start="67:48" pos:end="67:49">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:18">descriptor</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:31">sample_rate</name><operator pos:start="69:32" pos:end="69:32">.</operator><name pos:start="69:33" pos:end="69:35">den</name></name> <operator pos:start="69:37" pos:end="69:37">=</operator> <call pos:start="69:39" pos:end="69:50"><name pos:start="69:39" pos:end="69:46">get_be32</name><argument_list pos:start="69:47" pos:end="69:50">(<argument pos:start="69:48" pos:end="69:49"><expr pos:start="69:48" pos:end="69:49"><name pos:start="69:48" pos:end="69:49">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:16">case <expr pos:start="73:10" pos:end="73:15"><literal type="number" pos:start="73:10" pos:end="73:15">0x3D06</literal></expr>:</case> <comment type="block" pos:start="73:18" pos:end="73:46">/* SoundEssenceCompression */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:57"><expr pos:start="75:9" pos:end="75:56"><call pos:start="75:9" pos:end="75:56"><name pos:start="75:9" pos:end="75:18">get_buffer</name><argument_list pos:start="75:19" pos:end="75:56">(<argument pos:start="75:20" pos:end="75:21"><expr pos:start="75:20" pos:end="75:21"><name pos:start="75:20" pos:end="75:21">pb</name></expr></argument>, <argument pos:start="75:24" pos:end="75:51"><expr pos:start="75:24" pos:end="75:51"><name pos:start="75:24" pos:end="75:51"><name pos:start="75:24" pos:end="75:33">descriptor</name><operator pos:start="75:34" pos:end="75:35">-&gt;</operator><name pos:start="75:36" pos:end="75:51">essence_codec_ul</name></name></expr></argument>, <argument pos:start="75:54" pos:end="75:55"><expr pos:start="75:54" pos:end="75:55"><literal type="number" pos:start="75:54" pos:end="75:55">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:16">case <expr pos:start="79:10" pos:end="79:15"><literal type="number" pos:start="79:10" pos:end="79:15">0x3D07</literal></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:44"><expr pos:start="81:9" pos:end="81:43"><name pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:18">descriptor</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:28">channels</name></name> <operator pos:start="81:30" pos:end="81:30">=</operator> <call pos:start="81:32" pos:end="81:43"><name pos:start="81:32" pos:end="81:39">get_be32</name><argument_list pos:start="81:40" pos:end="81:43">(<argument pos:start="81:41" pos:end="81:42"><expr pos:start="81:41" pos:end="81:42"><name pos:start="81:41" pos:end="81:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:16">case <expr pos:start="85:10" pos:end="85:15"><literal type="number" pos:start="85:10" pos:end="85:15">0x3D01</literal></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:51"><expr pos:start="87:9" pos:end="87:50"><name pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:18">descriptor</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:35">bits_per_sample</name></name> <operator pos:start="87:37" pos:end="87:37">=</operator> <call pos:start="87:39" pos:end="87:50"><name pos:start="87:39" pos:end="87:46">get_be32</name><argument_list pos:start="87:47" pos:end="87:50">(<argument pos:start="87:48" pos:end="87:49"><expr pos:start="87:48" pos:end="87:49"><name pos:start="87:48" pos:end="87:49">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:16">case <expr pos:start="91:10" pos:end="91:15"><literal type="number" pos:start="91:10" pos:end="91:15">0x3401</literal></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:46"><expr pos:start="93:9" pos:end="93:45"><call pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:29">mxf_read_pixel_layout</name><argument_list pos:start="93:30" pos:end="93:45">(<argument pos:start="93:31" pos:end="93:32"><expr pos:start="93:31" pos:end="93:32"><name pos:start="93:31" pos:end="93:32">pb</name></expr></argument>, <argument pos:start="93:35" pos:end="93:44"><expr pos:start="93:35" pos:end="93:44"><name pos:start="93:35" pos:end="93:44">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <default pos:start="97:5" pos:end="97:12">default:</default>

        <comment type="block" pos:start="99:9" pos:end="99:51">/* Private uid used by SONY C0023S01.mxf */</comment>

        <if_stmt pos:start="101:9" pos:end="113:9"><if pos:start="101:9" pos:end="113:9">if <condition pos:start="101:12" pos:end="101:54">(<expr pos:start="101:13" pos:end="101:53"><call pos:start="101:13" pos:end="101:53"><name pos:start="101:13" pos:end="101:22">IS_KLV_KEY</name><argument_list pos:start="101:23" pos:end="101:53">(<argument pos:start="101:24" pos:end="101:26"><expr pos:start="101:24" pos:end="101:26"><name pos:start="101:24" pos:end="101:26">uid</name></expr></argument>, <argument pos:start="101:29" pos:end="101:52"><expr pos:start="101:29" pos:end="101:52"><name pos:start="101:29" pos:end="101:52">mxf_sony_mpeg4_extradata</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:56" pos:end="113:9">{<block_content pos:start="103:13" pos:end="111:56">

            <expr_stmt pos:start="103:13" pos:end="103:52"><expr pos:start="103:13" pos:end="103:51"><name pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:22">descriptor</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:33">extradata</name></name> <operator pos:start="103:35" pos:end="103:35">=</operator> <call pos:start="103:37" pos:end="103:51"><name pos:start="103:37" pos:end="103:45">av_malloc</name><argument_list pos:start="103:46" pos:end="103:51">(<argument pos:start="103:47" pos:end="103:50"><expr pos:start="103:47" pos:end="103:50"><name pos:start="103:47" pos:end="103:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="107:26"><if pos:start="105:13" pos:end="107:26">if <condition pos:start="105:16" pos:end="105:39">(<expr pos:start="105:17" pos:end="105:38"><operator pos:start="105:17" pos:end="105:17">!</operator><name pos:start="105:18" pos:end="105:38"><name pos:start="105:18" pos:end="105:27">descriptor</name><operator pos:start="105:28" pos:end="105:29">-&gt;</operator><name pos:start="105:30" pos:end="105:38">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:26"><block_content pos:start="107:17" pos:end="107:26">

                <return pos:start="107:17" pos:end="107:26">return <expr pos:start="107:24" pos:end="107:25"><operator pos:start="107:24" pos:end="107:24">-</operator><literal type="number" pos:start="107:25" pos:end="107:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:46"><expr pos:start="109:13" pos:end="109:45"><name pos:start="109:13" pos:end="109:38"><name pos:start="109:13" pos:end="109:22">descriptor</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:38">extradata_size</name></name> <operator pos:start="109:40" pos:end="109:40">=</operator> <name pos:start="109:42" pos:end="109:45">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:56"><expr pos:start="111:13" pos:end="111:55"><call pos:start="111:13" pos:end="111:55"><name pos:start="111:13" pos:end="111:22">get_buffer</name><argument_list pos:start="111:23" pos:end="111:55">(<argument pos:start="111:24" pos:end="111:25"><expr pos:start="111:24" pos:end="111:25"><name pos:start="111:24" pos:end="111:25">pb</name></expr></argument>, <argument pos:start="111:28" pos:end="111:48"><expr pos:start="111:28" pos:end="111:48"><name pos:start="111:28" pos:end="111:48"><name pos:start="111:28" pos:end="111:37">descriptor</name><operator pos:start="111:38" pos:end="111:39">-&gt;</operator><name pos:start="111:40" pos:end="111:48">extradata</name></name></expr></argument>, <argument pos:start="111:51" pos:end="111:54"><expr pos:start="111:51" pos:end="111:54"><name pos:start="111:51" pos:end="111:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="119:5" pos:end="119:13">return <expr pos:start="119:12" pos:end="119:12"><literal type="number" pos:start="119:12" pos:end="119:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
