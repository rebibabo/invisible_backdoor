<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22053.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">tcg_add_target_add_op_defs</name><parameter_list pos:start="1:32" pos:end="1:60">(<parameter pos:start="1:33" pos:end="1:59"><decl pos:start="1:33" pos:end="1:59"><type pos:start="1:33" pos:end="1:54"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:52">TCGTargetOpDef</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">tdefs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="201:1">{<block_content pos:start="5:5" pos:end="200:0">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">TCGOpcode</name></type> <name pos:start="5:15" pos:end="5:16">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">TCGOpDef</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">def</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">ct_str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:18">nb_args</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="156:0">for<control pos:start="15:8" pos:end="15:11">(<init pos:start="15:9" pos:end="15:9">;</init><condition pos:start="15:10" pos:end="15:10">;</condition><incr/>)</control> <block pos:start="15:13" pos:end="156:0">{<block_content pos:start="17:9" pos:end="149:16">

        <if_stmt pos:start="17:9" pos:end="19:18"><if pos:start="17:9" pos:end="19:18">if <condition pos:start="17:12" pos:end="17:39">(<expr pos:start="17:13" pos:end="17:38"><name pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:17">tdefs</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:21">op</name></name> <operator pos:start="17:23" pos:end="17:24">==</operator> <operator pos:start="17:26" pos:end="17:26">(</operator><name pos:start="17:27" pos:end="17:35">TCGOpcode</name><operator pos:start="17:36" pos:end="17:36">)</operator><operator pos:start="17:37" pos:end="17:37">-</operator><literal type="number" pos:start="17:38" pos:end="17:38">1</literal></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:18"><block_content pos:start="19:13" pos:end="19:18">

            <break pos:start="19:13" pos:end="19:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:10">op</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:22"><name pos:start="21:14" pos:end="21:18">tdefs</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:22">op</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><call pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:14">assert</name><argument_list pos:start="23:15" pos:end="23:38">(<argument pos:start="23:16" pos:end="23:37"><expr pos:start="23:16" pos:end="23:37"><name pos:start="23:16" pos:end="23:17">op</name> <operator pos:start="23:19" pos:end="23:20">&gt;=</operator> <literal type="number" pos:start="23:22" pos:end="23:22">0</literal> <operator pos:start="23:24" pos:end="23:25">&amp;&amp;</operator> <name pos:start="23:27" pos:end="23:28">op</name> <operator pos:start="23:30" pos:end="23:30">&lt;</operator> <name pos:start="23:32" pos:end="23:37">NB_OPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="28:0"><expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:11">def</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <operator pos:start="25:15" pos:end="25:15">&amp;</operator><name pos:start="25:16" pos:end="25:30"><name pos:start="25:16" pos:end="25:26">tcg_op_defs</name><index pos:start="25:27" pos:end="25:30">[<expr pos:start="25:28" pos:end="25:29"><name pos:start="25:28" pos:end="25:29">op</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if pos:start="27:1" pos:end="27:29">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:29"><call pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:11">defined</name><argument_list pos:start="27:12" pos:end="27:29">(<argument pos:start="27:13" pos:end="27:28"><expr pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:28">CONFIG_DEBUG_TCG</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="29:9" pos:end="29:48">/* Duplicate entry in op definitions? */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:27"><expr pos:start="31:9" pos:end="31:26"><call pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:14">assert</name><argument_list pos:start="31:15" pos:end="31:26">(<argument pos:start="31:16" pos:end="31:25"><expr pos:start="31:16" pos:end="31:25"><operator pos:start="31:16" pos:end="31:16">!</operator><name pos:start="31:17" pos:end="31:25"><name pos:start="31:17" pos:end="31:19">def</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:25">used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="36:0"><expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:11">def</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:17">used</name></name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="37:9" pos:end="37:48"><expr pos:start="37:9" pos:end="37:47"><name pos:start="37:9" pos:end="37:15">nb_args</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:31"><name pos:start="37:19" pos:end="37:21">def</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:31">nb_iargs</name></name> <operator pos:start="37:33" pos:end="37:33">+</operator> <name pos:start="37:35" pos:end="37:47"><name pos:start="37:35" pos:end="37:37">def</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:47">nb_oargs</name></name></expr>;</expr_stmt>

        <for pos:start="39:9" pos:end="111:9">for<control pos:start="39:12" pos:end="39:36">(<init pos:start="39:13" pos:end="39:18"><expr pos:start="39:13" pos:end="39:17"><name pos:start="39:13" pos:end="39:13">i</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</init> <condition pos:start="39:20" pos:end="39:31"><expr pos:start="39:20" pos:end="39:30"><name pos:start="39:20" pos:end="39:20">i</name> <operator pos:start="39:22" pos:end="39:22">&lt;</operator> <name pos:start="39:24" pos:end="39:30">nb_args</name></expr>;</condition> <incr pos:start="39:33" pos:end="39:35"><expr pos:start="39:33" pos:end="39:35"><name pos:start="39:33" pos:end="39:33">i</name><operator pos:start="39:34" pos:end="39:35">++</operator></expr></incr>)</control> <block pos:start="39:38" pos:end="111:9">{<block_content pos:start="41:13" pos:end="109:13">

            <expr_stmt pos:start="41:13" pos:end="41:43"><expr pos:start="41:13" pos:end="41:42"><name pos:start="41:13" pos:end="41:18">ct_str</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:42"><name pos:start="41:22" pos:end="41:26">tdefs</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:39">args_ct_str</name><index pos:start="41:40" pos:end="41:42">[<expr pos:start="41:41" pos:end="41:41"><name pos:start="41:41" pos:end="41:41">i</name></expr>]</index></name></expr>;</expr_stmt>

            <comment type="block" pos:start="43:13" pos:end="43:50">/* Incomplete TCGTargetOpDef entry? */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:35"><expr pos:start="45:13" pos:end="45:34"><call pos:start="45:13" pos:end="45:34"><name pos:start="45:13" pos:end="45:18">assert</name><argument_list pos:start="45:19" pos:end="45:34">(<argument pos:start="45:20" pos:end="45:33"><expr pos:start="45:20" pos:end="45:33"><name pos:start="45:20" pos:end="45:25">ct_str</name> <operator pos:start="45:27" pos:end="45:28">!=</operator> <name pos:start="45:30" pos:end="45:33">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:53"><expr pos:start="47:13" pos:end="47:52"><call pos:start="47:13" pos:end="47:52"><name pos:start="47:13" pos:end="47:28">tcg_regset_clear</name><argument_list pos:start="47:29" pos:end="47:52">(<argument pos:start="47:30" pos:end="47:51"><expr pos:start="47:30" pos:end="47:51"><name pos:start="47:30" pos:end="47:44"><name pos:start="47:30" pos:end="47:32">def</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:41">args_ct</name><index pos:start="47:42" pos:end="47:44">[<expr pos:start="47:43" pos:end="47:43"><name pos:start="47:43" pos:end="47:43">i</name></expr>]</index></name><operator pos:start="47:45" pos:end="47:45">.</operator><name pos:start="47:46" pos:end="47:51"><name pos:start="47:46" pos:end="47:46">u</name><operator pos:start="47:47" pos:end="47:47">.</operator><name pos:start="47:48" pos:end="47:51">regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:35"><expr pos:start="49:13" pos:end="49:34"><name pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:15">def</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:24">args_ct</name><index pos:start="49:25" pos:end="49:27">[<expr pos:start="49:26" pos:end="49:26"><name pos:start="49:26" pos:end="49:26">i</name></expr>]</index></name><operator pos:start="49:28" pos:end="49:28">.</operator><name pos:start="49:29" pos:end="49:30">ct</name> <operator pos:start="49:32" pos:end="49:32">=</operator> <literal type="number" pos:start="49:34" pos:end="49:34">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="109:13"><if pos:start="51:13" pos:end="75:13">if <condition pos:start="51:16" pos:end="51:53">(<expr pos:start="51:17" pos:end="51:52"><name pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:22">ct_str</name><index pos:start="51:23" pos:end="51:25">[<expr pos:start="51:24" pos:end="51:24"><literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>]</index></name> <operator pos:start="51:27" pos:end="51:28">&gt;=</operator> <literal type="char" pos:start="51:30" pos:end="51:32">'0'</literal> <operator pos:start="51:34" pos:end="51:35">&amp;&amp;</operator> <name pos:start="51:37" pos:end="51:45"><name pos:start="51:37" pos:end="51:42">ct_str</name><index pos:start="51:43" pos:end="51:45">[<expr pos:start="51:44" pos:end="51:44"><literal type="number" pos:start="51:44" pos:end="51:44">0</literal></expr>]</index></name> <operator pos:start="51:47" pos:end="51:48">&lt;=</operator> <literal type="char" pos:start="51:50" pos:end="51:52">'9'</literal></expr>)</condition> <block pos:start="51:55" pos:end="75:13">{<block_content pos:start="53:17" pos:end="73:51">

                <decl_stmt pos:start="53:17" pos:end="53:25"><decl pos:start="53:17" pos:end="53:24"><type pos:start="53:17" pos:end="53:19"><name pos:start="53:17" pos:end="53:19">int</name></type> <name pos:start="53:21" pos:end="53:24">oarg</name></decl>;</decl_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:39"><expr pos:start="55:17" pos:end="55:38"><name pos:start="55:17" pos:end="55:20">oarg</name> <operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:32"><name pos:start="55:24" pos:end="55:29">ct_str</name><index pos:start="55:30" pos:end="55:32">[<expr pos:start="55:31" pos:end="55:31"><literal type="number" pos:start="55:31" pos:end="55:31">0</literal></expr>]</index></name> <operator pos:start="55:34" pos:end="55:34">-</operator> <literal type="char" pos:start="55:36" pos:end="55:38">'0'</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:45"><expr pos:start="57:17" pos:end="57:44"><call pos:start="57:17" pos:end="57:44"><name pos:start="57:17" pos:end="57:22">assert</name><argument_list pos:start="57:23" pos:end="57:44">(<argument pos:start="57:24" pos:end="57:43"><expr pos:start="57:24" pos:end="57:43"><name pos:start="57:24" pos:end="57:27">oarg</name> <operator pos:start="57:29" pos:end="57:29">&lt;</operator> <name pos:start="57:31" pos:end="57:43"><name pos:start="57:31" pos:end="57:33">def</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:43">nb_oargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:59"><expr pos:start="59:17" pos:end="59:58"><call pos:start="59:17" pos:end="59:58"><name pos:start="59:17" pos:end="59:22">assert</name><argument_list pos:start="59:23" pos:end="59:58">(<argument pos:start="59:24" pos:end="59:57"><expr pos:start="59:24" pos:end="59:57"><name pos:start="59:24" pos:end="59:41"><name pos:start="59:24" pos:end="59:26">def</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:35">args_ct</name><index pos:start="59:36" pos:end="59:41">[<expr pos:start="59:37" pos:end="59:40"><name pos:start="59:37" pos:end="59:40">oarg</name></expr>]</index></name><operator pos:start="59:42" pos:end="59:42">.</operator><name pos:start="59:43" pos:end="59:44">ct</name> <operator pos:start="59:46" pos:end="59:46">&amp;</operator> <name pos:start="59:48" pos:end="59:57">TCG_CT_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="61:17" pos:end="63:60">/* TCG_CT_ALIAS is for the output arguments. The input

                   argument is tagged with TCG_CT_IALIAS. */</comment>

                <expr_stmt pos:start="65:17" pos:end="65:53"><expr pos:start="65:17" pos:end="65:52"><name pos:start="65:17" pos:end="65:31"><name pos:start="65:17" pos:end="65:19">def</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:28">args_ct</name><index pos:start="65:29" pos:end="65:31">[<expr pos:start="65:30" pos:end="65:30"><name pos:start="65:30" pos:end="65:30">i</name></expr>]</index></name> <operator pos:start="65:33" pos:end="65:33">=</operator> <name pos:start="65:35" pos:end="65:52"><name pos:start="65:35" pos:end="65:37">def</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:46">args_ct</name><index pos:start="65:47" pos:end="65:52">[<expr pos:start="65:48" pos:end="65:51"><name pos:start="65:48" pos:end="65:51">oarg</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:53"><expr pos:start="67:17" pos:end="67:52"><name pos:start="67:17" pos:end="67:34"><name pos:start="67:17" pos:end="67:19">def</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:28">args_ct</name><index pos:start="67:29" pos:end="67:34">[<expr pos:start="67:30" pos:end="67:33"><name pos:start="67:30" pos:end="67:33">oarg</name></expr>]</index></name><operator pos:start="67:35" pos:end="67:35">.</operator><name pos:start="67:36" pos:end="67:37">ct</name> <operator pos:start="67:39" pos:end="67:39">=</operator> <name pos:start="67:41" pos:end="67:52">TCG_CT_ALIAS</name></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:51"><expr pos:start="69:17" pos:end="69:50"><name pos:start="69:17" pos:end="69:34"><name pos:start="69:17" pos:end="69:19">def</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:28">args_ct</name><index pos:start="69:29" pos:end="69:34">[<expr pos:start="69:30" pos:end="69:33"><name pos:start="69:30" pos:end="69:33">oarg</name></expr>]</index></name><operator pos:start="69:35" pos:end="69:35">.</operator><name pos:start="69:36" pos:end="69:46">alias_index</name> <operator pos:start="69:48" pos:end="69:48">=</operator> <name pos:start="69:50" pos:end="69:50">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:52"><expr pos:start="71:17" pos:end="71:51"><name pos:start="71:17" pos:end="71:31"><name pos:start="71:17" pos:end="71:19">def</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:28">args_ct</name><index pos:start="71:29" pos:end="71:31">[<expr pos:start="71:30" pos:end="71:30"><name pos:start="71:30" pos:end="71:30">i</name></expr>]</index></name><operator pos:start="71:32" pos:end="71:32">.</operator><name pos:start="71:33" pos:end="71:34">ct</name> <operator pos:start="71:36" pos:end="71:37">|=</operator> <name pos:start="71:39" pos:end="71:51">TCG_CT_IALIAS</name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:51"><expr pos:start="73:17" pos:end="73:50"><name pos:start="73:17" pos:end="73:31"><name pos:start="73:17" pos:end="73:19">def</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:28">args_ct</name><index pos:start="73:29" pos:end="73:31">[<expr pos:start="73:30" pos:end="73:30"><name pos:start="73:30" pos:end="73:30">i</name></expr>]</index></name><operator pos:start="73:32" pos:end="73:32">.</operator><name pos:start="73:33" pos:end="73:43">alias_index</name> <operator pos:start="73:45" pos:end="73:45">=</operator> <name pos:start="73:47" pos:end="73:50">oarg</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="75:15" pos:end="109:13">else <block pos:start="75:20" pos:end="109:13">{<block_content pos:start="77:17" pos:end="107:17">

                <for pos:start="77:17" pos:end="107:17">for<control pos:start="77:20" pos:end="77:23">(<init pos:start="77:21" pos:end="77:21">;</init><condition pos:start="77:22" pos:end="77:22">;</condition><incr/>)</control> <block pos:start="77:25" pos:end="107:17">{<block_content pos:start="79:21" pos:end="105:21">

                    <if_stmt pos:start="79:21" pos:end="81:30"><if pos:start="79:21" pos:end="81:30">if <condition pos:start="79:24" pos:end="79:40">(<expr pos:start="79:25" pos:end="79:39"><operator pos:start="79:25" pos:end="79:25">*</operator><name pos:start="79:26" pos:end="79:31">ct_str</name> <operator pos:start="79:33" pos:end="79:34">==</operator> <literal type="char" pos:start="79:36" pos:end="79:39">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="81:25" pos:end="81:30"><block_content pos:start="81:25" pos:end="81:30">

                        <break pos:start="81:25" pos:end="81:30">break;</break></block_content></block></if></if_stmt>

                    <switch pos:start="83:21" pos:end="105:21">switch<condition pos:start="83:27" pos:end="83:35">(<expr pos:start="83:28" pos:end="83:34"><operator pos:start="83:28" pos:end="83:28">*</operator><name pos:start="83:29" pos:end="83:34">ct_str</name></expr>)</condition> <block pos:start="83:37" pos:end="105:21">{<block_content pos:start="85:21" pos:end="103:25">

                    <case pos:start="85:21" pos:end="85:29">case <expr pos:start="85:26" pos:end="85:28"><literal type="char" pos:start="85:26" pos:end="85:28">'i'</literal></expr>:</case>

                        <expr_stmt pos:start="87:25" pos:end="87:59"><expr pos:start="87:25" pos:end="87:58"><name pos:start="87:25" pos:end="87:39"><name pos:start="87:25" pos:end="87:27">def</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:36">args_ct</name><index pos:start="87:37" pos:end="87:39">[<expr pos:start="87:38" pos:end="87:38"><name pos:start="87:38" pos:end="87:38">i</name></expr>]</index></name><operator pos:start="87:40" pos:end="87:40">.</operator><name pos:start="87:41" pos:end="87:42">ct</name> <operator pos:start="87:44" pos:end="87:45">|=</operator> <name pos:start="87:47" pos:end="87:58">TCG_CT_CONST</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="89:25" pos:end="89:33"><expr pos:start="89:25" pos:end="89:32"><name pos:start="89:25" pos:end="89:30">ct_str</name><operator pos:start="89:31" pos:end="89:32">++</operator></expr>;</expr_stmt>

                        <break pos:start="91:25" pos:end="91:30">break;</break>

                    <default pos:start="93:21" pos:end="93:28">default:</default>

                        <if_stmt pos:start="95:25" pos:end="103:25"><if pos:start="95:25" pos:end="103:25">if <condition pos:start="95:28" pos:end="95:83">(<expr pos:start="95:29" pos:end="95:82"><call pos:start="95:29" pos:end="95:78"><name pos:start="95:29" pos:end="95:51">target_parse_constraint</name><argument_list pos:start="95:52" pos:end="95:78">(<argument pos:start="95:53" pos:end="95:68"><expr pos:start="95:53" pos:end="95:68"><operator pos:start="95:53" pos:end="95:53">&amp;</operator><name pos:start="95:54" pos:end="95:68"><name pos:start="95:54" pos:end="95:56">def</name><operator pos:start="95:57" pos:end="95:58">-&gt;</operator><name pos:start="95:59" pos:end="95:65">args_ct</name><index pos:start="95:66" pos:end="95:68">[<expr pos:start="95:67" pos:end="95:67"><name pos:start="95:67" pos:end="95:67">i</name></expr>]</index></name></expr></argument>, <argument pos:start="95:71" pos:end="95:77"><expr pos:start="95:71" pos:end="95:77"><operator pos:start="95:71" pos:end="95:71">&amp;</operator><name pos:start="95:72" pos:end="95:77">ct_str</name></expr></argument>)</argument_list></call> <operator pos:start="95:80" pos:end="95:80">&lt;</operator> <literal type="number" pos:start="95:82" pos:end="95:82">0</literal></expr>)</condition> <block pos:start="95:85" pos:end="103:25">{<block_content pos:start="97:29" pos:end="101:36">

                            <expr_stmt pos:start="97:29" pos:end="99:58"><expr pos:start="97:29" pos:end="99:57"><call pos:start="97:29" pos:end="99:57"><name pos:start="97:29" pos:end="97:35">fprintf</name><argument_list pos:start="97:36" pos:end="99:57">(<argument pos:start="97:37" pos:end="97:42"><expr pos:start="97:37" pos:end="97:42"><name pos:start="97:37" pos:end="97:42">stderr</name></expr></argument>, <argument pos:start="97:45" pos:end="97:100"><expr pos:start="97:45" pos:end="97:100"><literal type="string" pos:start="97:45" pos:end="97:100">"Invalid constraint '%s' for arg %d of operation '%s'\n"</literal></expr></argument>,

                                    <argument pos:start="99:37" pos:end="99:42"><expr pos:start="99:37" pos:end="99:42"><name pos:start="99:37" pos:end="99:42">ct_str</name></expr></argument>, <argument pos:start="99:45" pos:end="99:45"><expr pos:start="99:45" pos:end="99:45"><name pos:start="99:45" pos:end="99:45">i</name></expr></argument>, <argument pos:start="99:48" pos:end="99:56"><expr pos:start="99:48" pos:end="99:56"><name pos:start="99:48" pos:end="99:56"><name pos:start="99:48" pos:end="99:50">def</name><operator pos:start="99:51" pos:end="99:52">-&gt;</operator><name pos:start="99:53" pos:end="99:56">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="101:29" pos:end="101:36"><expr pos:start="101:29" pos:end="101:35"><call pos:start="101:29" pos:end="101:35"><name pos:start="101:29" pos:end="101:32">exit</name><argument_list pos:start="101:33" pos:end="101:35">(<argument pos:start="101:34" pos:end="101:34"><expr pos:start="101:34" pos:end="101:34"><literal type="number" pos:start="101:34" pos:end="101:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></switch>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="115:9" pos:end="115:61">/* TCGTargetOpDef entry with too much information? */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:70"><expr pos:start="117:9" pos:end="117:69"><call pos:start="117:9" pos:end="117:69"><name pos:start="117:9" pos:end="117:14">assert</name><argument_list pos:start="117:15" pos:end="117:69">(<argument pos:start="117:16" pos:end="117:68"><expr pos:start="117:16" pos:end="117:68"><name pos:start="117:16" pos:end="117:16">i</name> <operator pos:start="117:18" pos:end="117:19">==</operator> <name pos:start="117:21" pos:end="117:35">TCG_MAX_OP_ARGS</name> <operator pos:start="117:37" pos:end="117:38">||</operator> <name pos:start="117:40" pos:end="117:60"><name pos:start="117:40" pos:end="117:44">tdefs</name><operator pos:start="117:45" pos:end="117:46">-&gt;</operator><name pos:start="117:47" pos:end="117:57">args_ct_str</name><index pos:start="117:58" pos:end="117:60">[<expr pos:start="117:59" pos:end="117:59"><name pos:start="117:59" pos:end="117:59">i</name></expr>]</index></name> <operator pos:start="117:62" pos:end="117:63">==</operator> <name pos:start="117:65" pos:end="117:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:67">/* sort the constraints (XXX: this is just an heuristic) */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:48"><expr pos:start="123:9" pos:end="123:47"><call pos:start="123:9" pos:end="123:47"><name pos:start="123:9" pos:end="123:24">sort_constraints</name><argument_list pos:start="123:25" pos:end="123:47">(<argument pos:start="123:26" pos:end="123:28"><expr pos:start="123:26" pos:end="123:28"><name pos:start="123:26" pos:end="123:28">def</name></expr></argument>, <argument pos:start="123:31" pos:end="123:31"><expr pos:start="123:31" pos:end="123:31"><literal type="number" pos:start="123:31" pos:end="123:31">0</literal></expr></argument>, <argument pos:start="123:34" pos:end="123:46"><expr pos:start="123:34" pos:end="123:46"><name pos:start="123:34" pos:end="123:46"><name pos:start="123:34" pos:end="123:36">def</name><operator pos:start="123:37" pos:end="123:38">-&gt;</operator><name pos:start="123:39" pos:end="123:46">nb_oargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="148:0"><expr pos:start="125:9" pos:end="125:59"><call pos:start="125:9" pos:end="125:59"><name pos:start="125:9" pos:end="125:24">sort_constraints</name><argument_list pos:start="125:25" pos:end="125:59">(<argument pos:start="125:26" pos:end="125:28"><expr pos:start="125:26" pos:end="125:28"><name pos:start="125:26" pos:end="125:28">def</name></expr></argument>, <argument pos:start="125:31" pos:end="125:43"><expr pos:start="125:31" pos:end="125:43"><name pos:start="125:31" pos:end="125:43"><name pos:start="125:31" pos:end="125:33">def</name><operator pos:start="125:34" pos:end="125:35">-&gt;</operator><name pos:start="125:36" pos:end="125:43">nb_oargs</name></name></expr></argument>, <argument pos:start="125:46" pos:end="125:58"><expr pos:start="125:46" pos:end="125:58"><name pos:start="125:46" pos:end="125:58"><name pos:start="125:46" pos:end="125:48">def</name><operator pos:start="125:49" pos:end="125:50">-&gt;</operator><name pos:start="125:51" pos:end="125:58">nb_iargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="129:1" pos:end="129:5">#<cpp:directive pos:start="129:2" pos:end="129:3">if</cpp:directive> <expr pos:start="129:5" pos:end="129:5"><literal type="number" pos:start="129:5" pos:end="129:5">0</literal></expr></cpp:if>

        {

            int i;



            printf("%s: sorted=", def-&gt;name);

            for(i = 0; i &lt; def-&gt;nb_oargs + def-&gt;nb_iargs; i++)

                printf(" %d", def-&gt;sorted_args[i]);

            printf("\n");

        }

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="149:9" pos:end="149:16"><expr pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:13">tdefs</name><operator pos:start="149:14" pos:end="149:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



<cpp:if pos:start="155:1" pos:end="155:29">#<cpp:directive pos:start="155:2" pos:end="155:3">if</cpp:directive> <expr pos:start="155:5" pos:end="155:29"><call pos:start="155:5" pos:end="155:29"><name pos:start="155:5" pos:end="155:11">defined</name><argument_list pos:start="155:12" pos:end="155:29">(<argument pos:start="155:13" pos:end="155:28"><expr pos:start="155:13" pos:end="155:28"><name pos:start="155:13" pos:end="155:28">CONFIG_DEBUG_TCG</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="157:5" pos:end="157:10"><expr pos:start="157:5" pos:end="157:9"><name pos:start="157:5" pos:end="157:5">i</name> <operator pos:start="157:7" pos:end="157:7">=</operator> <literal type="number" pos:start="157:9" pos:end="157:9">0</literal></expr>;</expr_stmt>

    <for pos:start="159:5" pos:end="191:5">for <control pos:start="159:9" pos:end="159:52">(<init pos:start="159:10" pos:end="159:16"><expr pos:start="159:10" pos:end="159:15"><name pos:start="159:10" pos:end="159:11">op</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <literal type="number" pos:start="159:15" pos:end="159:15">0</literal></expr>;</init> <condition pos:start="159:18" pos:end="159:46"><expr pos:start="159:18" pos:end="159:45"><name pos:start="159:18" pos:end="159:19">op</name> <operator pos:start="159:21" pos:end="159:21">&lt;</operator> <call pos:start="159:23" pos:end="159:45"><name pos:start="159:23" pos:end="159:32">ARRAY_SIZE</name><argument_list pos:start="159:33" pos:end="159:45">(<argument pos:start="159:34" pos:end="159:44"><expr pos:start="159:34" pos:end="159:44"><name pos:start="159:34" pos:end="159:44">tcg_op_defs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="159:48" pos:end="159:51"><expr pos:start="159:48" pos:end="159:51"><name pos:start="159:48" pos:end="159:49">op</name><operator pos:start="159:50" pos:end="159:51">++</operator></expr></incr>)</control> <block pos:start="159:54" pos:end="191:5">{<block_content pos:start="161:9" pos:end="189:9">

        <if_stmt pos:start="161:9" pos:end="189:9"><if pos:start="161:9" pos:end="175:9">if <condition pos:start="161:12" pos:end="161:66">(<expr pos:start="161:13" pos:end="161:65"><name pos:start="161:13" pos:end="161:14">op</name> <operator pos:start="161:16" pos:end="161:16">&lt;</operator> <name pos:start="161:18" pos:end="161:30">INDEX_op_call</name> <operator pos:start="161:32" pos:end="161:33">||</operator> <name pos:start="161:35" pos:end="161:36">op</name> <operator pos:start="161:38" pos:end="161:39">==</operator> <name pos:start="161:41" pos:end="161:65">INDEX_op_debug_insn_start</name></expr>)</condition> <block pos:start="161:68" pos:end="175:9">{<block_content pos:start="165:13" pos:end="173:13">

            <comment type="block" pos:start="163:13" pos:end="163:48">/* Wrong entry in op definitions? */</comment>

            <if_stmt pos:start="165:13" pos:end="173:13"><if pos:start="165:13" pos:end="173:13">if <condition pos:start="165:16" pos:end="165:37">(<expr pos:start="165:17" pos:end="165:36"><name pos:start="165:17" pos:end="165:31"><name pos:start="165:17" pos:end="165:27">tcg_op_defs</name><index pos:start="165:28" pos:end="165:31">[<expr pos:start="165:29" pos:end="165:30"><name pos:start="165:29" pos:end="165:30">op</name></expr>]</index></name><operator pos:start="165:32" pos:end="165:32">.</operator><name pos:start="165:33" pos:end="165:36">used</name></expr>)</condition> <block pos:start="165:39" pos:end="173:13">{<block_content pos:start="167:17" pos:end="171:22">

                <expr_stmt pos:start="167:17" pos:end="169:46"><expr pos:start="167:17" pos:end="169:45"><call pos:start="167:17" pos:end="169:45"><name pos:start="167:17" pos:end="167:23">fprintf</name><argument_list pos:start="167:24" pos:end="169:45">(<argument pos:start="167:25" pos:end="167:30"><expr pos:start="167:25" pos:end="167:30"><name pos:start="167:25" pos:end="167:30">stderr</name></expr></argument>, <argument pos:start="167:33" pos:end="167:64"><expr pos:start="167:33" pos:end="167:64"><literal type="string" pos:start="167:33" pos:end="167:64">"Invalid op definition for %s\n"</literal></expr></argument>,

                        <argument pos:start="169:25" pos:end="169:44"><expr pos:start="169:25" pos:end="169:44"><name pos:start="169:25" pos:end="169:39"><name pos:start="169:25" pos:end="169:35">tcg_op_defs</name><index pos:start="169:36" pos:end="169:39">[<expr pos:start="169:37" pos:end="169:38"><name pos:start="169:37" pos:end="169:38">op</name></expr>]</index></name><operator pos:start="169:40" pos:end="169:40">.</operator><name pos:start="169:41" pos:end="169:44">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:22"><expr pos:start="171:17" pos:end="171:21"><name pos:start="171:17" pos:end="171:17">i</name> <operator pos:start="171:19" pos:end="171:19">=</operator> <literal type="number" pos:start="171:21" pos:end="171:21">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="175:11" pos:end="189:9">else <block pos:start="175:16" pos:end="189:9">{<block_content pos:start="179:13" pos:end="187:13">

            <comment type="block" pos:start="177:13" pos:end="177:50">/* Missing entry in op definitions? */</comment>

            <if_stmt pos:start="179:13" pos:end="187:13"><if pos:start="179:13" pos:end="187:13">if <condition pos:start="179:16" pos:end="179:38">(<expr pos:start="179:17" pos:end="179:37"><operator pos:start="179:17" pos:end="179:17">!</operator><name pos:start="179:18" pos:end="179:32"><name pos:start="179:18" pos:end="179:28">tcg_op_defs</name><index pos:start="179:29" pos:end="179:32">[<expr pos:start="179:30" pos:end="179:31"><name pos:start="179:30" pos:end="179:31">op</name></expr>]</index></name><operator pos:start="179:33" pos:end="179:33">.</operator><name pos:start="179:34" pos:end="179:37">used</name></expr>)</condition> <block pos:start="179:40" pos:end="187:13">{<block_content pos:start="181:17" pos:end="185:22">

                <expr_stmt pos:start="181:17" pos:end="183:46"><expr pos:start="181:17" pos:end="183:45"><call pos:start="181:17" pos:end="183:45"><name pos:start="181:17" pos:end="181:23">fprintf</name><argument_list pos:start="181:24" pos:end="183:45">(<argument pos:start="181:25" pos:end="181:30"><expr pos:start="181:25" pos:end="181:30"><name pos:start="181:25" pos:end="181:30">stderr</name></expr></argument>, <argument pos:start="181:33" pos:end="181:64"><expr pos:start="181:33" pos:end="181:64"><literal type="string" pos:start="181:33" pos:end="181:64">"Missing op definition for %s\n"</literal></expr></argument>,

                        <argument pos:start="183:25" pos:end="183:44"><expr pos:start="183:25" pos:end="183:44"><name pos:start="183:25" pos:end="183:39"><name pos:start="183:25" pos:end="183:35">tcg_op_defs</name><index pos:start="183:36" pos:end="183:39">[<expr pos:start="183:37" pos:end="183:38"><name pos:start="183:37" pos:end="183:38">op</name></expr>]</index></name><operator pos:start="183:40" pos:end="183:40">.</operator><name pos:start="183:41" pos:end="183:44">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:22"><expr pos:start="185:17" pos:end="185:21"><name pos:start="185:17" pos:end="185:17">i</name> <operator pos:start="185:19" pos:end="185:19">=</operator> <literal type="number" pos:start="185:21" pos:end="185:21">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="193:5" pos:end="200:0"><if pos:start="193:5" pos:end="200:0">if <condition pos:start="193:8" pos:end="193:15">(<expr pos:start="193:9" pos:end="193:14"><name pos:start="193:9" pos:end="193:9">i</name> <operator pos:start="193:11" pos:end="193:12">==</operator> <literal type="number" pos:start="193:14" pos:end="193:14">1</literal></expr>)</condition> <block pos:start="193:17" pos:end="200:0">{<block_content pos:start="195:9" pos:end="195:20">

        <expr_stmt pos:start="195:9" pos:end="195:20"><expr pos:start="195:9" pos:end="195:19"><call pos:start="195:9" pos:end="195:19"><name pos:start="195:9" pos:end="195:17">tcg_abort</name><argument_list pos:start="195:18" pos:end="195:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="199:1" pos:end="199:6">#<cpp:directive pos:start="199:2" pos:end="199:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
