<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14047.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:50">rtas_ibm_query_interrupt_source_number</name><parameter_list pos:start="1:51" pos:end="13:69">(<parameter pos:start="1:52" pos:end="1:66"><decl pos:start="1:52" pos:end="1:66"><type pos:start="1:52" pos:end="1:66"><name pos:start="1:52" pos:end="1:61">PowerPCCPU</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">cpu</name></decl></parameter>,

                                                   <parameter pos:start="3:52" pos:end="3:74"><decl pos:start="3:52" pos:end="3:74"><type pos:start="3:52" pos:end="3:74"><name pos:start="3:52" pos:end="3:67">sPAPREnvironment</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:74">spapr</name></decl></parameter>,

                                                   <parameter pos:start="5:52" pos:end="5:65"><decl pos:start="5:52" pos:end="5:65"><type pos:start="5:52" pos:end="5:65"><name pos:start="5:52" pos:end="5:59">uint32_t</name></type> <name pos:start="5:61" pos:end="5:65">token</name></decl></parameter>,

                                                   <parameter pos:start="7:52" pos:end="7:65"><decl pos:start="7:52" pos:end="7:65"><type pos:start="7:52" pos:end="7:65"><name pos:start="7:52" pos:end="7:59">uint32_t</name></type> <name pos:start="7:61" pos:end="7:65">nargs</name></decl></parameter>,

                                                   <parameter pos:start="9:52" pos:end="9:68"><decl pos:start="9:52" pos:end="9:68"><type pos:start="9:52" pos:end="9:68"><name pos:start="9:52" pos:end="9:63">target_ulong</name></type> <name pos:start="9:65" pos:end="9:68">args</name></decl></parameter>,

                                                   <parameter pos:start="11:52" pos:end="11:64"><decl pos:start="11:52" pos:end="11:64"><type pos:start="11:52" pos:end="11:64"><name pos:start="11:52" pos:end="11:59">uint32_t</name></type> <name pos:start="11:61" pos:end="11:64">nret</name></decl></parameter>,

                                                   <parameter pos:start="13:52" pos:end="13:68"><decl pos:start="13:52" pos:end="13:68"><type pos:start="13:52" pos:end="13:68"><name pos:start="13:52" pos:end="13:63">target_ulong</name></type> <name pos:start="13:65" pos:end="13:68">rets</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="73:1">{<block_content pos:start="17:5" pos:end="71:24">

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:43"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:24">config_addr</name> <init pos:start="17:26" pos:end="17:43">= <expr pos:start="17:28" pos:end="17:43"><call pos:start="17:28" pos:end="17:43"><name pos:start="17:28" pos:end="17:34">rtas_ld</name><argument_list pos:start="17:35" pos:end="17:43">(<argument pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><name pos:start="17:36" pos:end="17:39">args</name></expr></argument>, <argument pos:start="17:42" pos:end="17:42"><expr pos:start="17:42" pos:end="17:42"><literal type="number" pos:start="17:42" pos:end="17:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:74"><decl pos:start="19:5" pos:end="19:73"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:17">buid</name> <init pos:start="19:19" pos:end="19:73">= <expr pos:start="19:21" pos:end="19:73"><operator pos:start="19:21" pos:end="19:21">(</operator><operator pos:start="19:22" pos:end="19:22">(</operator><name pos:start="19:23" pos:end="19:30">uint64_t</name><operator pos:start="19:31" pos:end="19:31">)</operator><call pos:start="19:32" pos:end="19:47"><name pos:start="19:32" pos:end="19:38">rtas_ld</name><argument_list pos:start="19:39" pos:end="19:47">(<argument pos:start="19:40" pos:end="19:43"><expr pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:43">args</name></expr></argument>, <argument pos:start="19:46" pos:end="19:46"><expr pos:start="19:46" pos:end="19:46"><literal type="number" pos:start="19:46" pos:end="19:46">1</literal></expr></argument>)</argument_list></call> <operator pos:start="19:49" pos:end="19:50">&lt;&lt;</operator> <literal type="number" pos:start="19:52" pos:end="19:53">32</literal><operator pos:start="19:54" pos:end="19:54">)</operator> <operator pos:start="19:56" pos:end="19:56">|</operator> <call pos:start="19:58" pos:end="19:73"><name pos:start="19:58" pos:end="19:64">rtas_ld</name><argument_list pos:start="19:65" pos:end="19:73">(<argument pos:start="19:66" pos:end="19:69"><expr pos:start="19:66" pos:end="19:69"><name pos:start="19:66" pos:end="19:69">args</name></expr></argument>, <argument pos:start="19:72" pos:end="19:72"><expr pos:start="19:72" pos:end="19:72"><literal type="number" pos:start="19:72" pos:end="19:72">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:68"><decl pos:start="21:5" pos:end="21:34"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:29">intr_src_num</name> <init pos:start="21:31" pos:end="21:34">= <expr pos:start="21:33" pos:end="21:34"><operator pos:start="21:33" pos:end="21:33">-</operator><literal type="number" pos:start="21:34" pos:end="21:34">1</literal></expr></init></decl>, <decl pos:start="21:37" pos:end="21:67"><type ref="prev" pos:start="21:5" pos:end="21:16"/><name pos:start="21:37" pos:end="21:48">ioa_intr_num</name> <init pos:start="21:50" pos:end="21:67">= <expr pos:start="21:52" pos:end="21:67"><call pos:start="21:52" pos:end="21:67"><name pos:start="21:52" pos:end="21:58">rtas_ld</name><argument_list pos:start="21:59" pos:end="21:67">(<argument pos:start="21:60" pos:end="21:63"><expr pos:start="21:60" pos:end="21:63"><name pos:start="21:60" pos:end="21:63">args</name></expr></argument>, <argument pos:start="21:66" pos:end="21:66"><expr pos:start="21:66" pos:end="21:66"><literal type="number" pos:start="21:66" pos:end="21:66">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:13"><decl pos:start="23:5" pos:end="23:12"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">ndev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:17">sPAPRPHBState</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:22">phb</name> <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:28">/* Fins sPAPRPHBState */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:32"><expr pos:start="31:5" pos:end="31:31"><name pos:start="31:5" pos:end="31:7">phb</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:31"><name pos:start="31:11" pos:end="31:18">find_phb</name><argument_list pos:start="31:19" pos:end="31:31">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:24">spapr</name></expr></argument>, <argument pos:start="31:27" pos:end="31:30"><expr pos:start="31:27" pos:end="31:30"><name pos:start="31:27" pos:end="31:30">buid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:12">phb</name></expr>)</condition> <block pos:start="33:15" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:47"><expr pos:start="35:9" pos:end="35:46"><call pos:start="35:9" pos:end="35:46"><name pos:start="35:9" pos:end="35:15">rtas_st</name><argument_list pos:start="35:16" pos:end="35:46">(<argument pos:start="35:17" pos:end="35:20"><expr pos:start="35:17" pos:end="35:20"><name pos:start="35:17" pos:end="35:20">rets</name></expr></argument>, <argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr></argument>, <argument pos:start="35:26" pos:end="35:45"><expr pos:start="35:26" pos:end="35:45"><name pos:start="35:26" pos:end="35:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:46">/* Find device descriptor and start IRQ */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:54"><expr pos:start="45:5" pos:end="45:53"><name pos:start="45:5" pos:end="45:8">ndev</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:53"><name pos:start="45:12" pos:end="45:28">spapr_msicfg_find</name><argument_list pos:start="45:29" pos:end="45:53">(<argument pos:start="45:30" pos:end="45:32"><expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:32">phb</name></expr></argument>, <argument pos:start="45:35" pos:end="45:45"><expr pos:start="45:35" pos:end="45:45"><name pos:start="45:35" pos:end="45:45">config_addr</name></expr></argument>, <argument pos:start="45:48" pos:end="45:52"><expr pos:start="45:48" pos:end="45:52"><name pos:start="45:48" pos:end="45:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:12">ndev</name> <operator pos:start="47:14" pos:end="47:14">&lt;</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>)</condition> <block pos:start="47:19" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:15">

        <expr_stmt pos:start="49:9" pos:end="49:73"><expr pos:start="49:9" pos:end="49:72"><call pos:start="49:9" pos:end="49:72"><name pos:start="49:9" pos:end="49:27">trace_spapr_pci_msi</name><argument_list pos:start="49:28" pos:end="49:72">(<argument pos:start="49:29" pos:end="49:54"><expr pos:start="49:29" pos:end="49:54"><literal type="string" pos:start="49:29" pos:end="49:54">"MSI has not been enabled"</literal></expr></argument>, <argument pos:start="49:57" pos:end="49:58"><expr pos:start="49:57" pos:end="49:58"><operator pos:start="49:57" pos:end="49:57">-</operator><literal type="number" pos:start="49:58" pos:end="49:58">1</literal></expr></argument>, <argument pos:start="49:61" pos:end="49:71"><expr pos:start="49:61" pos:end="49:71"><name pos:start="49:61" pos:end="49:71">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:44"><expr pos:start="51:9" pos:end="51:43"><call pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:15">rtas_st</name><argument_list pos:start="51:16" pos:end="51:43">(<argument pos:start="51:17" pos:end="51:20"><expr pos:start="51:17" pos:end="51:20"><name pos:start="51:17" pos:end="51:20">rets</name></expr></argument>, <argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr></argument>, <argument pos:start="51:26" pos:end="51:42"><expr pos:start="51:26" pos:end="51:42"><name pos:start="51:26" pos:end="51:42">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:59"><expr pos:start="59:5" pos:end="59:58"><name pos:start="59:5" pos:end="59:16">intr_src_num</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:39"><name pos:start="59:20" pos:end="59:22">phb</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:33">msi_table</name><index pos:start="59:34" pos:end="59:39">[<expr pos:start="59:35" pos:end="59:38"><name pos:start="59:35" pos:end="59:38">ndev</name></expr>]</index></name><operator pos:start="59:40" pos:end="59:40">.</operator><name pos:start="59:41" pos:end="59:43">irq</name> <operator pos:start="59:45" pos:end="59:45">+</operator> <name pos:start="59:47" pos:end="59:58">ioa_intr_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:73"><expr pos:start="61:5" pos:end="63:72"><call pos:start="61:5" pos:end="63:72"><name pos:start="61:5" pos:end="61:58">trace_spapr_pci_rtas_ibm_query_interrupt_source_number</name><argument_list pos:start="61:59" pos:end="63:72">(<argument pos:start="61:60" pos:end="61:71"><expr pos:start="61:60" pos:end="61:71"><name pos:start="61:60" pos:end="61:71">ioa_intr_num</name></expr></argument>,

                                                           <argument pos:start="63:60" pos:end="63:71"><expr pos:start="63:60" pos:end="63:71"><name pos:start="63:60" pos:end="63:71">intr_src_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:39"><expr pos:start="67:5" pos:end="67:38"><call pos:start="67:5" pos:end="67:38"><name pos:start="67:5" pos:end="67:11">rtas_st</name><argument_list pos:start="67:12" pos:end="67:38">(<argument pos:start="67:13" pos:end="67:16"><expr pos:start="67:13" pos:end="67:16"><name pos:start="67:13" pos:end="67:16">rets</name></expr></argument>, <argument pos:start="67:19" pos:end="67:19"><expr pos:start="67:19" pos:end="67:19"><literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr></argument>, <argument pos:start="67:22" pos:end="67:37"><expr pos:start="67:22" pos:end="67:37"><name pos:start="67:22" pos:end="67:37">RTAS_OUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:35"><expr pos:start="69:5" pos:end="69:34"><call pos:start="69:5" pos:end="69:34"><name pos:start="69:5" pos:end="69:11">rtas_st</name><argument_list pos:start="69:12" pos:end="69:34">(<argument pos:start="69:13" pos:end="69:16"><expr pos:start="69:13" pos:end="69:16"><name pos:start="69:13" pos:end="69:16">rets</name></expr></argument>, <argument pos:start="69:19" pos:end="69:19"><expr pos:start="69:19" pos:end="69:19"><literal type="number" pos:start="69:19" pos:end="69:19">1</literal></expr></argument>, <argument pos:start="69:22" pos:end="69:33"><expr pos:start="69:22" pos:end="69:33"><name pos:start="69:22" pos:end="69:33">intr_src_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:24"><expr pos:start="71:5" pos:end="71:23"><call pos:start="71:5" pos:end="71:23"><name pos:start="71:5" pos:end="71:11">rtas_st</name><argument_list pos:start="71:12" pos:end="71:23">(<argument pos:start="71:13" pos:end="71:16"><expr pos:start="71:13" pos:end="71:16"><name pos:start="71:13" pos:end="71:16">rets</name></expr></argument>, <argument pos:start="71:19" pos:end="71:19"><expr pos:start="71:19" pos:end="71:19"><literal type="number" pos:start="71:19" pos:end="71:19">2</literal></expr></argument>, <argument pos:start="71:22" pos:end="71:22"><expr pos:start="71:22" pos:end="71:22"><literal type="number" pos:start="71:22" pos:end="71:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="block" pos:start="71:25" pos:end="71:51">/* 0 == level; 1 == edge */</comment>

</block_content>}</block></function>
</unit>
