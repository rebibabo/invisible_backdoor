<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4384.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">get_cod</name><parameter_list pos:start="1:19" pos:end="1:80">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:36">J2kDecoderContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:58"><decl pos:start="1:42" pos:end="1:58"><type pos:start="1:42" pos:end="1:58"><name pos:start="1:42" pos:end="1:55">J2kCodingStyle</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:58">c</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:79"><decl pos:start="1:61" pos:end="1:79"><type pos:start="1:61" pos:end="1:79"><name pos:start="1:61" pos:end="1:67">uint8_t</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:79">properties</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:13">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18">J2kCodingStyle</name></type> <name pos:start="5:20" pos:end="5:22">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">compno</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:31"><if pos:start="11:5" pos:end="13:31">if <condition pos:start="11:8" pos:end="11:32">(<expr pos:start="11:9" pos:end="11:31"><name pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:18">buf_end</name></name> <operator pos:start="11:20" pos:end="11:20">-</operator> <name pos:start="11:22" pos:end="11:27"><name pos:start="11:22" pos:end="11:22">s</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:27">buf</name></name> <operator pos:start="11:29" pos:end="11:29">&lt;</operator> <literal type="number" pos:start="11:31" pos:end="11:31">5</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:31"><block_content pos:start="13:9" pos:end="13:31">

        <return pos:start="13:9" pos:end="13:31">return <expr pos:start="13:16" pos:end="13:30"><call pos:start="13:16" pos:end="13:30"><name pos:start="13:16" pos:end="13:22">AVERROR</name><argument_list pos:start="13:23" pos:end="13:30">(<argument pos:start="13:24" pos:end="13:29"><expr pos:start="13:24" pos:end="13:29"><name pos:start="13:24" pos:end="13:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:30"><expr pos:start="17:5" pos:end="19:29"><name pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:7">tmp</name><operator pos:start="17:8" pos:end="17:8">.</operator><name pos:start="17:9" pos:end="17:23">log2_prec_width</name></name>  <operator pos:start="17:26" pos:end="17:26">=</operator>

    <name pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:7">tmp</name><operator pos:start="19:8" pos:end="19:8">.</operator><name pos:start="19:9" pos:end="19:24">log2_prec_height</name></name> <operator pos:start="19:26" pos:end="19:26">=</operator> <literal type="number" pos:start="19:28" pos:end="19:29">15</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:7">tmp</name><operator pos:start="23:8" pos:end="23:8">.</operator><name pos:start="23:9" pos:end="23:12">csty</name></name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:43"><name pos:start="23:16" pos:end="23:34">bytestream_get_byte</name><argument_list pos:start="23:35" pos:end="23:43">(<argument pos:start="23:36" pos:end="23:42"><expr pos:start="23:36" pos:end="23:42"><operator pos:start="23:36" pos:end="23:36">&amp;</operator><name pos:start="23:37" pos:end="23:42"><name pos:start="23:37" pos:end="23:37">s</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:42">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:37">(<expr pos:start="27:9" pos:end="27:36"><call pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:27">bytestream_get_byte</name><argument_list pos:start="27:28" pos:end="27:36">(<argument pos:start="27:29" pos:end="27:35"><expr pos:start="27:29" pos:end="27:35"><operator pos:start="27:29" pos:end="27:29">&amp;</operator><name pos:start="27:30" pos:end="27:35"><name pos:start="27:30" pos:end="27:30">s</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:35">buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="27:38" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18"> <comment type="line" pos:start="27:40" pos:end="27:59">// progression level</comment>

        <expr_stmt pos:start="29:9" pos:end="29:76"><expr pos:start="29:9" pos:end="29:75"><call pos:start="29:9" pos:end="29:75"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:75">(<argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:16">s</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:23">avctx</name></name></expr></argument>, <argument pos:start="29:26" pos:end="29:37"><expr pos:start="29:26" pos:end="29:37"><name pos:start="29:26" pos:end="29:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:40" pos:end="29:74"><expr pos:start="29:40" pos:end="29:74"><literal type="string" pos:start="29:40" pos:end="29:74">"only LRCP progression supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:47"><expr pos:start="37:5" pos:end="37:46"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:7">tmp</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:15">nlayers</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:46"><name pos:start="37:19" pos:end="37:37">bytestream_get_be16</name><argument_list pos:start="37:38" pos:end="37:46">(<argument pos:start="37:39" pos:end="37:45"><expr pos:start="37:39" pos:end="37:45"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:45"><name pos:start="37:40" pos:end="37:40">s</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:45">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">tmp</name><operator pos:start="39:12" pos:end="39:12">.</operator><name pos:start="39:13" pos:end="39:15">mct</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:46"><name pos:start="39:19" pos:end="39:37">bytestream_get_byte</name><argument_list pos:start="39:38" pos:end="39:46">(<argument pos:start="39:39" pos:end="39:45"><expr pos:start="39:39" pos:end="39:45"><operator pos:start="39:39" pos:end="39:39">&amp;</operator><name pos:start="39:40" pos:end="39:45"><name pos:start="39:40" pos:end="39:40">s</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:45">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="39:49" pos:end="39:84">// multiple component transformation</comment>



    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><call pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:11">get_cox</name><argument_list pos:start="43:12" pos:end="43:20">(<argument pos:start="43:13" pos:end="43:13"><expr pos:start="43:13" pos:end="43:13"><name pos:start="43:13" pos:end="43:13">s</name></expr></argument>, <argument pos:start="43:16" pos:end="43:19"><expr pos:start="43:16" pos:end="43:19"><operator pos:start="43:16" pos:end="43:16">&amp;</operator><name pos:start="43:17" pos:end="43:19">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="45:5" pos:end="51:5">for <control pos:start="45:9" pos:end="45:55">(<init pos:start="45:10" pos:end="45:20"><expr pos:start="45:10" pos:end="45:19"><name pos:start="45:10" pos:end="45:15">compno</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>;</init> <condition pos:start="45:22" pos:end="45:45"><expr pos:start="45:22" pos:end="45:44"><name pos:start="45:22" pos:end="45:27">compno</name> <operator pos:start="45:29" pos:end="45:29">&lt;</operator> <name pos:start="45:31" pos:end="45:44"><name pos:start="45:31" pos:end="45:31">s</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:44">ncomponents</name></name></expr>;</condition> <incr pos:start="45:47" pos:end="45:54"><expr pos:start="45:47" pos:end="45:54"><name pos:start="45:47" pos:end="45:52">compno</name><operator pos:start="45:53" pos:end="45:54">++</operator></expr></incr>)</control><block pos:start="45:56" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:61">

        <if_stmt pos:start="47:9" pos:end="49:61"><if pos:start="47:9" pos:end="49:61">if <condition pos:start="47:12" pos:end="47:44">(<expr pos:start="47:13" pos:end="47:43"><operator pos:start="47:13" pos:end="47:13">!</operator><operator pos:start="47:14" pos:end="47:14">(</operator><name pos:start="47:15" pos:end="47:32"><name pos:start="47:15" pos:end="47:24">properties</name><index pos:start="47:25" pos:end="47:32">[<expr pos:start="47:26" pos:end="47:31"><name pos:start="47:26" pos:end="47:31">compno</name></expr>]</index></name> <operator pos:start="47:34" pos:end="47:34">&amp;</operator> <name pos:start="47:36" pos:end="47:42">HAD_COC</name><operator pos:start="47:43" pos:end="47:43">)</operator></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:61"><block_content pos:start="49:13" pos:end="49:61">

            <expr_stmt pos:start="49:13" pos:end="49:61"><expr pos:start="49:13" pos:end="49:60"><call pos:start="49:13" pos:end="49:60"><name pos:start="49:13" pos:end="49:18">memcpy</name><argument_list pos:start="49:19" pos:end="49:60">(<argument pos:start="49:20" pos:end="49:29"><expr pos:start="49:20" pos:end="49:29"><name pos:start="49:20" pos:end="49:20">c</name> <operator pos:start="49:22" pos:end="49:22">+</operator> <name pos:start="49:24" pos:end="49:29">compno</name></expr></argument>, <argument pos:start="49:32" pos:end="49:35"><expr pos:start="49:32" pos:end="49:35"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:35">tmp</name></expr></argument>, <argument pos:start="49:38" pos:end="49:59"><expr pos:start="49:38" pos:end="49:59"><sizeof pos:start="49:38" pos:end="49:59">sizeof<argument_list pos:start="49:44" pos:end="49:59">(<argument pos:start="49:45" pos:end="49:58"><expr pos:start="49:45" pos:end="49:58"><name pos:start="49:45" pos:end="49:58">J2kCodingStyle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
