<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4236.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">arm_set_cpu_on</name><parameter_list pos:start="1:19" pos:end="3:56">(<parameter pos:start="1:20" pos:end="1:33"><decl pos:start="1:20" pos:end="1:33"><type pos:start="1:20" pos:end="1:33"><name pos:start="1:20" pos:end="1:27">uint64_t</name></type> <name pos:start="1:29" pos:end="1:33">cpuid</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:43">uint64_t</name></type> <name pos:start="1:45" pos:end="1:49">entry</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:70"><decl pos:start="1:52" pos:end="1:70"><type pos:start="1:52" pos:end="1:70"><name pos:start="1:52" pos:end="1:59">uint64_t</name></type> <name pos:start="1:61" pos:end="1:70">context_id</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:37"><decl pos:start="3:20" pos:end="3:37"><type pos:start="3:20" pos:end="3:37"><name pos:start="3:20" pos:end="3:27">uint32_t</name></type> <name pos:start="3:29" pos:end="3:37">target_el</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:55"><decl pos:start="3:40" pos:end="3:55"><type pos:start="3:40" pos:end="3:55"><name pos:start="3:40" pos:end="3:43">bool</name></type> <name pos:start="3:45" pos:end="3:55">target_aa64</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="245:1">{<block_content pos:start="7:5" pos:end="243:41">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:30">target_cpu_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">ARMCPU</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:22">target_cpu</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="17:24"><expr pos:start="13:5" pos:end="17:23"><call pos:start="13:5" pos:end="17:23"><name pos:start="13:5" pos:end="13:11">DPRINTF</name><argument_list pos:start="13:12" pos:end="17:23">(<argument pos:start="13:13" pos:end="15:16"><expr pos:start="13:13" pos:end="15:16"><literal type="string" pos:start="13:13" pos:end="13:19">"cpu %"</literal> <name pos:start="13:21" pos:end="13:26">PRId64</name> <literal type="string" pos:start="13:28" pos:end="13:47">" (EL %d, %s) @ 0x%"</literal> <name pos:start="13:49" pos:end="13:54">PRIx64</name> <literal type="string" pos:start="13:56" pos:end="13:71">" with R0 = 0x%"</literal> <name pos:start="13:73" pos:end="13:78">PRIx64</name>

            <literal type="string" pos:start="15:13" pos:end="15:16">"\n"</literal></expr></argument>, <argument pos:start="15:19" pos:end="15:23"><expr pos:start="15:19" pos:end="15:23"><name pos:start="15:19" pos:end="15:23">cpuid</name></expr></argument>, <argument pos:start="15:26" pos:end="15:34"><expr pos:start="15:26" pos:end="15:34"><name pos:start="15:26" pos:end="15:34">target_el</name></expr></argument>, <argument pos:start="15:37" pos:end="15:71"><expr pos:start="15:37" pos:end="15:71"><ternary pos:start="15:37" pos:end="15:71"><condition pos:start="15:37" pos:end="15:49"><expr pos:start="15:37" pos:end="15:47"><name pos:start="15:37" pos:end="15:47">target_aa64</name></expr> ?</condition><then pos:start="15:51" pos:end="15:59"> <expr pos:start="15:51" pos:end="15:59"><literal type="string" pos:start="15:51" pos:end="15:59">"aarch64"</literal></expr> </then><else pos:start="15:61" pos:end="15:71">: <expr pos:start="15:63" pos:end="15:71"><literal type="string" pos:start="15:63" pos:end="15:71">"aarch32"</literal></expr></else></ternary></expr></argument>, <argument pos:start="15:74" pos:end="15:78"><expr pos:start="15:74" pos:end="15:78"><name pos:start="15:74" pos:end="15:78">entry</name></expr></argument>,

            <argument pos:start="17:13" pos:end="17:22"><expr pos:start="17:13" pos:end="17:22"><name pos:start="17:13" pos:end="17:22">context_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:59">/* requested EL level need to be in the 1 to 3 range */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><call pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:46">(<argument pos:start="23:12" pos:end="23:45"><expr pos:start="23:12" pos:end="23:45"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:21">target_el</name> <operator pos:start="23:23" pos:end="23:23">&gt;</operator> <literal type="number" pos:start="23:25" pos:end="23:25">0</literal><operator pos:start="23:26" pos:end="23:26">)</operator> <operator pos:start="23:28" pos:end="23:29">&amp;&amp;</operator> <operator pos:start="23:31" pos:end="23:31">(</operator><name pos:start="23:32" pos:end="23:40">target_el</name> <operator pos:start="23:42" pos:end="23:42">&lt;</operator> <literal type="number" pos:start="23:44" pos:end="23:44">4</literal><operator pos:start="23:45" pos:end="23:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="39:5">if <condition pos:start="27:8" pos:end="27:35">(<expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:19">target_aa64</name> <operator pos:start="27:21" pos:end="27:22">&amp;&amp;</operator> <operator pos:start="27:24" pos:end="27:24">(</operator><name pos:start="27:25" pos:end="27:29">entry</name> <operator pos:start="27:31" pos:end="27:31">&amp;</operator> <literal type="number" pos:start="27:33" pos:end="27:33">3</literal><operator pos:start="27:34" pos:end="27:34">)</operator></expr>)</condition> <block pos:start="27:37" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:47">

        <comment type="block" pos:start="29:9" pos:end="35:11">/*

         * if we are booting in AArch64 mode then "entry" needs to be 4 bytes

         * aligned.

         */</comment>

        <return pos:start="37:9" pos:end="37:47">return <expr pos:start="37:16" pos:end="37:46"><name pos:start="37:16" pos:end="37:46">QEMU_ARM_POWERCTL_INVALID_PARAM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:45">/* Retrieve the cpu we are powering up */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:48"><expr pos:start="45:5" pos:end="45:47"><name pos:start="45:5" pos:end="45:20">target_cpu_state</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <call pos:start="45:24" pos:end="45:47"><name pos:start="45:24" pos:end="45:40">arm_get_cpu_by_id</name><argument_list pos:start="45:41" pos:end="45:47">(<argument pos:start="45:42" pos:end="45:46"><expr pos:start="45:42" pos:end="45:46"><name pos:start="45:42" pos:end="45:46">cpuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:26">(<expr pos:start="47:9" pos:end="47:25"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:25">target_cpu_state</name></expr>)</condition> <block pos:start="47:28" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:47">

        <comment type="block" pos:start="49:9" pos:end="49:35">/* The cpu was not found */</comment>

        <return pos:start="51:9" pos:end="51:47">return <expr pos:start="51:16" pos:end="51:46"><name pos:start="51:16" pos:end="51:46">QEMU_ARM_POWERCTL_INVALID_PARAM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:14">target_cpu</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:42"><name pos:start="57:18" pos:end="57:24">ARM_CPU</name><argument_list pos:start="57:25" pos:end="57:42">(<argument pos:start="57:26" pos:end="57:41"><expr pos:start="57:26" pos:end="57:41"><name pos:start="57:26" pos:end="57:41">target_cpu_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="69:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:33">(<expr pos:start="59:9" pos:end="59:32"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:32"><name pos:start="59:10" pos:end="59:19">target_cpu</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:32">powered_off</name></name></expr>)</condition> <block pos:start="59:35" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:44">

        <expr_stmt pos:start="61:9" pos:end="65:39"><expr pos:start="61:9" pos:end="65:38"><call pos:start="61:9" pos:end="65:38"><name pos:start="61:9" pos:end="61:21">qemu_log_mask</name><argument_list pos:start="61:22" pos:end="65:38">(<argument pos:start="61:23" pos:end="61:37"><expr pos:start="61:23" pos:end="61:37"><name pos:start="61:23" pos:end="61:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="63:23" pos:end="63:64"><expr pos:start="63:23" pos:end="63:64"><literal type="string" pos:start="63:23" pos:end="63:38">"[ARM]%s: CPU %"</literal> <name pos:start="63:40" pos:end="63:45">PRId64</name> <literal type="string" pos:start="63:47" pos:end="63:64">" is already on\n"</literal></expr></argument>,

                      <argument pos:start="65:23" pos:end="65:30"><expr pos:start="65:23" pos:end="65:30"><name pos:start="65:23" pos:end="65:30">__func__</name></expr></argument>, <argument pos:start="65:33" pos:end="65:37"><expr pos:start="65:33" pos:end="65:37"><name pos:start="65:33" pos:end="65:37">cpuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:44">return <expr pos:start="67:16" pos:end="67:43"><name pos:start="67:16" pos:end="67:43">QEMU_ARM_POWERCTL_ALREADY_ON</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="79:7">/*

     * The newly brought CPU is requested to enter the exception level

     * "target_el" and be in the requested mode (AArch64 or AArch32).

     */</comment>



    <if_stmt pos:start="83:5" pos:end="95:5"><if pos:start="83:5" pos:end="95:5">if <condition pos:start="83:8" pos:end="85:78">(<expr pos:start="83:9" pos:end="85:77"><operator pos:start="83:9" pos:end="83:9">(</operator><operator pos:start="83:10" pos:end="83:10">(</operator><name pos:start="83:11" pos:end="83:19">target_el</name> <operator pos:start="83:21" pos:end="83:22">==</operator> <literal type="number" pos:start="83:24" pos:end="83:24">3</literal><operator pos:start="83:25" pos:end="83:25">)</operator> <operator pos:start="83:27" pos:end="83:28">&amp;&amp;</operator> <operator pos:start="83:30" pos:end="83:30">!</operator><call pos:start="83:31" pos:end="83:76"><name pos:start="83:31" pos:end="83:41">arm_feature</name><argument_list pos:start="83:42" pos:end="83:76">(<argument pos:start="83:43" pos:end="83:58"><expr pos:start="83:43" pos:end="83:58"><operator pos:start="83:43" pos:end="83:43">&amp;</operator><name pos:start="83:44" pos:end="83:58"><name pos:start="83:44" pos:end="83:53">target_cpu</name><operator pos:start="83:54" pos:end="83:55">-&gt;</operator><name pos:start="83:56" pos:end="83:58">env</name></name></expr></argument>, <argument pos:start="83:61" pos:end="83:75"><expr pos:start="83:61" pos:end="83:75"><name pos:start="83:61" pos:end="83:75">ARM_FEATURE_EL3</name></expr></argument>)</argument_list></call><operator pos:start="83:77" pos:end="83:77">)</operator> <operator pos:start="83:79" pos:end="83:80">||</operator>

        <operator pos:start="85:9" pos:end="85:9">(</operator><operator pos:start="85:10" pos:end="85:10">(</operator><name pos:start="85:11" pos:end="85:19">target_el</name> <operator pos:start="85:21" pos:end="85:22">==</operator> <literal type="number" pos:start="85:24" pos:end="85:24">2</literal><operator pos:start="85:25" pos:end="85:25">)</operator> <operator pos:start="85:27" pos:end="85:28">&amp;&amp;</operator> <operator pos:start="85:30" pos:end="85:30">!</operator><call pos:start="85:31" pos:end="85:76"><name pos:start="85:31" pos:end="85:41">arm_feature</name><argument_list pos:start="85:42" pos:end="85:76">(<argument pos:start="85:43" pos:end="85:58"><expr pos:start="85:43" pos:end="85:58"><operator pos:start="85:43" pos:end="85:43">&amp;</operator><name pos:start="85:44" pos:end="85:58"><name pos:start="85:44" pos:end="85:53">target_cpu</name><operator pos:start="85:54" pos:end="85:55">-&gt;</operator><name pos:start="85:56" pos:end="85:58">env</name></name></expr></argument>, <argument pos:start="85:61" pos:end="85:75"><expr pos:start="85:61" pos:end="85:75"><name pos:start="85:61" pos:end="85:75">ARM_FEATURE_EL2</name></expr></argument>)</argument_list></call><operator pos:start="85:77" pos:end="85:77">)</operator></expr>)</condition> <block pos:start="85:80" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:47">

        <comment type="block" pos:start="87:9" pos:end="91:11">/*

         * The CPU does not support requested level

         */</comment>

        <return pos:start="93:9" pos:end="93:47">return <expr pos:start="93:16" pos:end="93:46"><name pos:start="93:16" pos:end="93:46">QEMU_ARM_POWERCTL_INVALID_PARAM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="119:5"><if pos:start="99:5" pos:end="119:5">if <condition pos:start="99:8" pos:end="99:75">(<expr pos:start="99:9" pos:end="99:74"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:20">target_aa64</name> <operator pos:start="99:22" pos:end="99:23">&amp;&amp;</operator> <call pos:start="99:25" pos:end="99:74"><name pos:start="99:25" pos:end="99:35">arm_feature</name><argument_list pos:start="99:36" pos:end="99:74">(<argument pos:start="99:37" pos:end="99:52"><expr pos:start="99:37" pos:end="99:52"><operator pos:start="99:37" pos:end="99:37">&amp;</operator><name pos:start="99:38" pos:end="99:52"><name pos:start="99:38" pos:end="99:47">target_cpu</name><operator pos:start="99:48" pos:end="99:49">-&gt;</operator><name pos:start="99:50" pos:end="99:52">env</name></name></expr></argument>, <argument pos:start="99:55" pos:end="99:73"><expr pos:start="99:55" pos:end="99:73"><name pos:start="99:55" pos:end="99:73">ARM_FEATURE_AARCH64</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:77" pos:end="119:5">{<block_content pos:start="109:9" pos:end="117:47">

        <comment type="block" pos:start="101:9" pos:end="107:11">/*

         * For now we don't support booting an AArch64 CPU in AArch32 mode

         * TODO: We should add this support later

         */</comment>

        <expr_stmt pos:start="109:9" pos:end="115:39"><expr pos:start="109:9" pos:end="115:38"><call pos:start="109:9" pos:end="115:38"><name pos:start="109:9" pos:end="109:21">qemu_log_mask</name><argument_list pos:start="109:22" pos:end="115:38">(<argument pos:start="109:23" pos:end="109:31"><expr pos:start="109:23" pos:end="109:31"><name pos:start="109:23" pos:end="109:31">LOG_UNIMP</name></expr></argument>,

                      <argument pos:start="111:23" pos:end="113:63"><expr pos:start="111:23" pos:end="113:63"><literal type="string" pos:start="111:23" pos:end="111:55">"[ARM]%s: Starting AArch64 CPU %"</literal> <name pos:start="111:57" pos:end="111:62">PRId64</name>

                      <literal type="string" pos:start="113:23" pos:end="113:63">" in AArch32 mode is not supported yet\n"</literal></expr></argument>,

                      <argument pos:start="115:23" pos:end="115:30"><expr pos:start="115:23" pos:end="115:30"><name pos:start="115:23" pos:end="115:30">__func__</name></expr></argument>, <argument pos:start="115:33" pos:end="115:37"><expr pos:start="115:33" pos:end="115:37"><name pos:start="115:33" pos:end="115:37">cpuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:47">return <expr pos:start="117:16" pos:end="117:46"><name pos:start="117:16" pos:end="117:46">QEMU_ARM_POWERCTL_INVALID_PARAM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:46">/* Initialize the cpu we are turning on */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:32"><expr pos:start="125:5" pos:end="125:31"><call pos:start="125:5" pos:end="125:31"><name pos:start="125:5" pos:end="125:13">cpu_reset</name><argument_list pos:start="125:14" pos:end="125:31">(<argument pos:start="125:15" pos:end="125:30"><expr pos:start="125:15" pos:end="125:30"><name pos:start="125:15" pos:end="125:30">target_cpu_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:36"><expr pos:start="127:5" pos:end="127:35"><name pos:start="127:5" pos:end="127:27"><name pos:start="127:5" pos:end="127:14">target_cpu</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:27">powered_off</name></name> <operator pos:start="127:29" pos:end="127:29">=</operator> <name pos:start="127:31" pos:end="127:35">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:33"><expr pos:start="129:5" pos:end="129:32"><name pos:start="129:5" pos:end="129:28"><name pos:start="129:5" pos:end="129:20">target_cpu_state</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:28">halted</name></name> <operator pos:start="129:30" pos:end="129:30">=</operator> <literal type="number" pos:start="129:32" pos:end="129:32">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="187:5"><if pos:start="133:5" pos:end="169:5">if <condition pos:start="133:8" pos:end="133:20">(<expr pos:start="133:9" pos:end="133:19"><name pos:start="133:9" pos:end="133:19">target_aa64</name></expr>)</condition> <block pos:start="133:22" pos:end="169:5">{<block_content pos:start="135:9" pos:end="167:70">

        <if_stmt pos:start="135:9" pos:end="147:9"><if pos:start="135:9" pos:end="147:9">if <condition pos:start="135:12" pos:end="135:78">(<expr pos:start="135:13" pos:end="135:77"><operator pos:start="135:13" pos:end="135:13">(</operator><name pos:start="135:14" pos:end="135:22">target_el</name> <operator pos:start="135:24" pos:end="135:24">&lt;</operator> <literal type="number" pos:start="135:26" pos:end="135:26">3</literal><operator pos:start="135:27" pos:end="135:27">)</operator> <operator pos:start="135:29" pos:end="135:30">&amp;&amp;</operator> <call pos:start="135:32" pos:end="135:77"><name pos:start="135:32" pos:end="135:42">arm_feature</name><argument_list pos:start="135:43" pos:end="135:77">(<argument pos:start="135:44" pos:end="135:59"><expr pos:start="135:44" pos:end="135:59"><operator pos:start="135:44" pos:end="135:44">&amp;</operator><name pos:start="135:45" pos:end="135:59"><name pos:start="135:45" pos:end="135:54">target_cpu</name><operator pos:start="135:55" pos:end="135:56">-&gt;</operator><name pos:start="135:57" pos:end="135:59">env</name></name></expr></argument>, <argument pos:start="135:62" pos:end="135:76"><expr pos:start="135:62" pos:end="135:76"><name pos:start="135:62" pos:end="135:76">ARM_FEATURE_EL3</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:80" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:51">

            <comment type="block" pos:start="137:13" pos:end="143:15">/*

             * As target mode is AArch64, we need to set lower

             * exception level (the requested level 2) to AArch64

             */</comment>

            <expr_stmt pos:start="145:13" pos:end="145:51"><expr pos:start="145:13" pos:end="145:50"><name pos:start="145:13" pos:end="145:40"><name pos:start="145:13" pos:end="145:22">target_cpu</name><operator pos:start="145:23" pos:end="145:24">-&gt;</operator><name pos:start="145:25" pos:end="145:27">env</name><operator pos:start="145:28" pos:end="145:28">.</operator><name pos:start="145:29" pos:end="145:32">cp15</name><operator pos:start="145:33" pos:end="145:33">.</operator><name pos:start="145:34" pos:end="145:40">scr_el3</name></name> <operator pos:start="145:42" pos:end="145:43">|=</operator> <name pos:start="145:45" pos:end="145:50">SCR_RW</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="151:9" pos:end="163:9"><if pos:start="151:9" pos:end="163:9">if <condition pos:start="151:12" pos:end="151:78">(<expr pos:start="151:13" pos:end="151:77"><operator pos:start="151:13" pos:end="151:13">(</operator><name pos:start="151:14" pos:end="151:22">target_el</name> <operator pos:start="151:24" pos:end="151:24">&lt;</operator> <literal type="number" pos:start="151:26" pos:end="151:26">2</literal><operator pos:start="151:27" pos:end="151:27">)</operator> <operator pos:start="151:29" pos:end="151:30">&amp;&amp;</operator> <call pos:start="151:32" pos:end="151:77"><name pos:start="151:32" pos:end="151:42">arm_feature</name><argument_list pos:start="151:43" pos:end="151:77">(<argument pos:start="151:44" pos:end="151:59"><expr pos:start="151:44" pos:end="151:59"><operator pos:start="151:44" pos:end="151:44">&amp;</operator><name pos:start="151:45" pos:end="151:59"><name pos:start="151:45" pos:end="151:54">target_cpu</name><operator pos:start="151:55" pos:end="151:56">-&gt;</operator><name pos:start="151:57" pos:end="151:59">env</name></name></expr></argument>, <argument pos:start="151:62" pos:end="151:76"><expr pos:start="151:62" pos:end="151:76"><name pos:start="151:62" pos:end="151:76">ARM_FEATURE_EL2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:80" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:51">

            <comment type="block" pos:start="153:13" pos:end="159:15">/*

             * As target mode is AArch64, we need to set lower

             * exception level (the requested level 1) to AArch64

             */</comment>

            <expr_stmt pos:start="161:13" pos:end="161:51"><expr pos:start="161:13" pos:end="161:50"><name pos:start="161:13" pos:end="161:40"><name pos:start="161:13" pos:end="161:22">target_cpu</name><operator pos:start="161:23" pos:end="161:24">-&gt;</operator><name pos:start="161:25" pos:end="161:27">env</name><operator pos:start="161:28" pos:end="161:28">.</operator><name pos:start="161:29" pos:end="161:32">cp15</name><operator pos:start="161:33" pos:end="161:33">.</operator><name pos:start="161:34" pos:end="161:40">hcr_el2</name></name> <operator pos:start="161:42" pos:end="161:43">|=</operator> <name pos:start="161:45" pos:end="161:50">HCR_RW</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:70"><expr pos:start="167:9" pos:end="167:69"><name pos:start="167:9" pos:end="167:30"><name pos:start="167:9" pos:end="167:18">target_cpu</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:23">env</name><operator pos:start="167:24" pos:end="167:24">.</operator><name pos:start="167:25" pos:end="167:30">pstate</name></name> <operator pos:start="167:32" pos:end="167:32">=</operator> <call pos:start="167:34" pos:end="167:69"><name pos:start="167:34" pos:end="167:52">aarch64_pstate_mode</name><argument_list pos:start="167:53" pos:end="167:69">(<argument pos:start="167:54" pos:end="167:62"><expr pos:start="167:54" pos:end="167:62"><name pos:start="167:54" pos:end="167:62">target_el</name></expr></argument>, <argument pos:start="167:65" pos:end="167:68"><expr pos:start="167:65" pos:end="167:68"><name pos:start="167:65" pos:end="167:68">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="169:7" pos:end="187:5">else <block pos:start="169:12" pos:end="187:5">{<block_content pos:start="173:9" pos:end="185:33">

        <comment type="block" pos:start="171:9" pos:end="171:54">/* We are requested to boot in AArch32 mode */</comment>

        <decl_stmt pos:start="173:9" pos:end="179:61"><decl pos:start="173:9" pos:end="179:60"><type pos:start="173:9" pos:end="173:23"><specifier pos:start="173:9" pos:end="173:14">static</specifier> <name pos:start="173:16" pos:end="173:23">uint32_t</name></type> <name pos:start="173:25" pos:end="173:37"><name pos:start="173:25" pos:end="173:35">mode_for_el</name><index pos:start="173:36" pos:end="173:37">[]</index></name> <init pos:start="173:39" pos:end="179:60">= <expr pos:start="173:41" pos:end="179:60"><block pos:start="173:41" pos:end="179:60">{ <expr pos:start="173:43" pos:end="173:43"><literal type="number" pos:start="173:43" pos:end="173:43">0</literal></expr>,

                                          <expr pos:start="175:43" pos:end="175:58"><name pos:start="175:43" pos:end="175:58">ARM_CPU_MODE_SVC</name></expr>,

                                          <expr pos:start="177:43" pos:end="177:58"><name pos:start="177:43" pos:end="177:58">ARM_CPU_MODE_HYP</name></expr>,

                                          <expr pos:start="179:43" pos:end="179:58"><name pos:start="179:43" pos:end="179:58">ARM_CPU_MODE_SVC</name></expr> }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="183:9" pos:end="185:33"><expr pos:start="183:9" pos:end="185:32"><call pos:start="183:9" pos:end="185:32"><name pos:start="183:9" pos:end="183:18">cpsr_write</name><argument_list pos:start="183:19" pos:end="185:32">(<argument pos:start="183:20" pos:end="183:35"><expr pos:start="183:20" pos:end="183:35"><operator pos:start="183:20" pos:end="183:20">&amp;</operator><name pos:start="183:21" pos:end="183:35"><name pos:start="183:21" pos:end="183:30">target_cpu</name><operator pos:start="183:31" pos:end="183:32">-&gt;</operator><name pos:start="183:33" pos:end="183:35">env</name></name></expr></argument>, <argument pos:start="183:38" pos:end="183:59"><expr pos:start="183:38" pos:end="183:59"><name pos:start="183:38" pos:end="183:59"><name pos:start="183:38" pos:end="183:48">mode_for_el</name><index pos:start="183:49" pos:end="183:59">[<expr pos:start="183:50" pos:end="183:58"><name pos:start="183:50" pos:end="183:58">target_el</name></expr>]</index></name></expr></argument>, <argument pos:start="183:62" pos:end="183:67"><expr pos:start="183:62" pos:end="183:67"><name pos:start="183:62" pos:end="183:67">CPSR_M</name></expr></argument>,

                   <argument pos:start="185:20" pos:end="185:31"><expr pos:start="185:20" pos:end="185:31"><name pos:start="185:20" pos:end="185:31">CPSRWriteRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="191:5" pos:end="203:5"><if pos:start="191:5" pos:end="197:5">if <condition pos:start="191:8" pos:end="191:23">(<expr pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:17">target_el</name> <operator pos:start="191:19" pos:end="191:20">==</operator> <literal type="number" pos:start="191:22" pos:end="191:22">3</literal></expr>)</condition> <block pos:start="191:25" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:48">

        <comment type="block" pos:start="193:9" pos:end="193:41">/* Processor is in secure mode */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:48"><expr pos:start="195:9" pos:end="195:47"><name pos:start="195:9" pos:end="195:36"><name pos:start="195:9" pos:end="195:18">target_cpu</name><operator pos:start="195:19" pos:end="195:20">-&gt;</operator><name pos:start="195:21" pos:end="195:23">env</name><operator pos:start="195:24" pos:end="195:24">.</operator><name pos:start="195:25" pos:end="195:28">cp15</name><operator pos:start="195:29" pos:end="195:29">.</operator><name pos:start="195:30" pos:end="195:36">scr_el3</name></name> <operator pos:start="195:38" pos:end="195:39">&amp;=</operator> <operator pos:start="195:41" pos:end="195:41">~</operator><name pos:start="195:42" pos:end="195:47">SCR_NS</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="197:7" pos:end="203:5">else <block pos:start="197:12" pos:end="203:5">{<block_content pos:start="201:9" pos:end="201:47">

        <comment type="block" pos:start="199:9" pos:end="199:45">/* Processor is not in secure mode */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:47"><expr pos:start="201:9" pos:end="201:46"><name pos:start="201:9" pos:end="201:36"><name pos:start="201:9" pos:end="201:18">target_cpu</name><operator pos:start="201:19" pos:end="201:20">-&gt;</operator><name pos:start="201:21" pos:end="201:23">env</name><operator pos:start="201:24" pos:end="201:24">.</operator><name pos:start="201:25" pos:end="201:28">cp15</name><operator pos:start="201:29" pos:end="201:29">.</operator><name pos:start="201:30" pos:end="201:36">scr_el3</name></name> <operator pos:start="201:38" pos:end="201:39">|=</operator> <name pos:start="201:41" pos:end="201:46">SCR_NS</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:65">/* We check if the started CPU is now at the correct level */</comment>

    <expr_stmt pos:start="209:5" pos:end="209:58"><expr pos:start="209:5" pos:end="209:57"><call pos:start="209:5" pos:end="209:57"><name pos:start="209:5" pos:end="209:10">assert</name><argument_list pos:start="209:11" pos:end="209:57">(<argument pos:start="209:12" pos:end="209:56"><expr pos:start="209:12" pos:end="209:56"><name pos:start="209:12" pos:end="209:20">target_el</name> <operator pos:start="209:22" pos:end="209:23">==</operator> <call pos:start="209:25" pos:end="209:56"><name pos:start="209:25" pos:end="209:38">arm_current_el</name><argument_list pos:start="209:39" pos:end="209:56">(<argument pos:start="209:40" pos:end="209:55"><expr pos:start="209:40" pos:end="209:55"><operator pos:start="209:40" pos:end="209:40">&amp;</operator><name pos:start="209:41" pos:end="209:55"><name pos:start="209:41" pos:end="209:50">target_cpu</name><operator pos:start="209:51" pos:end="209:52">-&gt;</operator><name pos:start="209:53" pos:end="209:55">env</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="213:5" pos:end="227:5"><if pos:start="213:5" pos:end="219:5">if <condition pos:start="213:8" pos:end="213:20">(<expr pos:start="213:9" pos:end="213:19"><name pos:start="213:9" pos:end="213:19">target_aa64</name></expr>)</condition> <block pos:start="213:22" pos:end="219:5">{<block_content pos:start="215:9" pos:end="217:38">

        <expr_stmt pos:start="215:9" pos:end="215:46"><expr pos:start="215:9" pos:end="215:45"><name pos:start="215:9" pos:end="215:32"><name pos:start="215:9" pos:end="215:18">target_cpu</name><operator pos:start="215:19" pos:end="215:20">-&gt;</operator><name pos:start="215:21" pos:end="215:23">env</name><operator pos:start="215:24" pos:end="215:24">.</operator><name pos:start="215:25" pos:end="215:29">xregs</name><index pos:start="215:30" pos:end="215:32">[<expr pos:start="215:31" pos:end="215:31"><literal type="number" pos:start="215:31" pos:end="215:31">0</literal></expr>]</index></name> <operator pos:start="215:34" pos:end="215:34">=</operator> <name pos:start="215:36" pos:end="215:45">context_id</name></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:38"><expr pos:start="217:9" pos:end="217:37"><name pos:start="217:9" pos:end="217:29"><name pos:start="217:9" pos:end="217:18">target_cpu</name><operator pos:start="217:19" pos:end="217:20">-&gt;</operator><name pos:start="217:21" pos:end="217:23">env</name><operator pos:start="217:24" pos:end="217:24">.</operator><name pos:start="217:25" pos:end="217:29">thumb</name></name> <operator pos:start="217:31" pos:end="217:31">=</operator> <name pos:start="217:33" pos:end="217:37">false</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="219:7" pos:end="227:5">else <block pos:start="219:12" pos:end="227:5">{<block_content pos:start="221:9" pos:end="225:28">

        <expr_stmt pos:start="221:9" pos:end="221:45"><expr pos:start="221:9" pos:end="221:44"><name pos:start="221:9" pos:end="221:31"><name pos:start="221:9" pos:end="221:18">target_cpu</name><operator pos:start="221:19" pos:end="221:20">-&gt;</operator><name pos:start="221:21" pos:end="221:23">env</name><operator pos:start="221:24" pos:end="221:24">.</operator><name pos:start="221:25" pos:end="221:28">regs</name><index pos:start="221:29" pos:end="221:31">[<expr pos:start="221:30" pos:end="221:30"><literal type="number" pos:start="221:30" pos:end="221:30">0</literal></expr>]</index></name> <operator pos:start="221:33" pos:end="221:33">=</operator> <name pos:start="221:35" pos:end="221:44">context_id</name></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:42"><expr pos:start="223:9" pos:end="223:41"><name pos:start="223:9" pos:end="223:29"><name pos:start="223:9" pos:end="223:18">target_cpu</name><operator pos:start="223:19" pos:end="223:20">-&gt;</operator><name pos:start="223:21" pos:end="223:23">env</name><operator pos:start="223:24" pos:end="223:24">.</operator><name pos:start="223:25" pos:end="223:29">thumb</name></name> <operator pos:start="223:31" pos:end="223:31">=</operator> <name pos:start="223:33" pos:end="223:37">entry</name> <operator pos:start="223:39" pos:end="223:39">&amp;</operator> <literal type="number" pos:start="223:41" pos:end="223:41">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:28"><expr pos:start="225:9" pos:end="225:27"><name pos:start="225:9" pos:end="225:13">entry</name> <operator pos:start="225:15" pos:end="225:16">&amp;=</operator> <literal type="number" pos:start="225:18" pos:end="225:27">0xfffffffe</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:52">/* Start the new CPU at the requested address */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:40"><expr pos:start="233:5" pos:end="233:39"><call pos:start="233:5" pos:end="233:39"><name pos:start="233:5" pos:end="233:14">cpu_set_pc</name><argument_list pos:start="233:15" pos:end="233:39">(<argument pos:start="233:16" pos:end="233:31"><expr pos:start="233:16" pos:end="233:31"><name pos:start="233:16" pos:end="233:31">target_cpu_state</name></expr></argument>, <argument pos:start="233:34" pos:end="233:38"><expr pos:start="233:34" pos:end="233:38"><name pos:start="233:34" pos:end="233:38">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="237:5" pos:end="237:36"><expr pos:start="237:5" pos:end="237:35"><call pos:start="237:5" pos:end="237:35"><name pos:start="237:5" pos:end="237:17">qemu_cpu_kick</name><argument_list pos:start="237:18" pos:end="237:35">(<argument pos:start="237:19" pos:end="237:34"><expr pos:start="237:19" pos:end="237:34"><name pos:start="237:19" pos:end="237:34">target_cpu_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:27">/* We are good to go */</comment>

    <return pos:start="243:5" pos:end="243:41">return <expr pos:start="243:12" pos:end="243:40"><name pos:start="243:12" pos:end="243:40">QEMU_ARM_POWERCTL_RET_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
