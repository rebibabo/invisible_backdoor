<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2102.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:39"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">process_incoming_migration_bh</name><parameter_list pos:start="1:42" pos:end="1:55">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:48"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="37:39">{<block_content pos:start="3:5" pos:end="37:39">
    <decl_stmt pos:start="3:5" pos:end="3:28"><decl pos:start="3:5" pos:end="3:27"><type pos:start="3:5" pos:end="3:11"><name pos:start="3:5" pos:end="3:9">Error</name> <modifier pos:start="3:11" pos:end="3:11">*</modifier></type><name pos:start="3:12" pos:end="3:20">local_err</name> <init pos:start="3:22" pos:end="3:27">= <expr pos:start="3:24" pos:end="3:27"><name pos:start="3:24" pos:end="3:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:41"><decl pos:start="4:5" pos:end="4:40"><type pos:start="4:5" pos:end="4:28"><name pos:start="4:5" pos:end="4:26">MigrationIncomingState</name> <modifier pos:start="4:28" pos:end="4:28">*</modifier></type><name pos:start="4:29" pos:end="4:31">mis</name> <init pos:start="4:33" pos:end="4:40">= <expr pos:start="4:35" pos:end="4:40"><name pos:start="4:35" pos:end="4:40">opaque</name></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="5:5" pos:end="5:65">/* Make sure all file formats flush their mutable metadata */</comment>
    <expr_stmt pos:start="6:5" pos:end="6:42"><expr pos:start="6:5" pos:end="6:41"><call pos:start="6:5" pos:end="6:41"><name pos:start="6:5" pos:end="6:29">bdrv_invalidate_cache_all</name><argument_list pos:start="6:30" pos:end="6:41">(<argument pos:start="6:31" pos:end="6:40"><expr pos:start="6:31" pos:end="6:40"><operator pos:start="6:31" pos:end="6:31">&amp;</operator><name pos:start="6:32" pos:end="6:40">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="7:9" pos:end="8:51"><expr pos:start="7:9" pos:end="8:50"><call pos:start="7:9" pos:end="8:50"><name pos:start="7:9" pos:end="7:25">migrate_set_state</name><argument_list pos:start="7:26" pos:end="8:50">(<argument pos:start="7:27" pos:end="7:37"><expr pos:start="7:27" pos:end="7:37"><operator pos:start="7:27" pos:end="7:27">&amp;</operator><name pos:start="7:28" pos:end="7:37"><name pos:start="7:28" pos:end="7:30">mis</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:37">state</name></name></expr></argument>, <argument pos:start="7:40" pos:end="7:62"><expr pos:start="7:40" pos:end="7:62"><name pos:start="7:40" pos:end="7:62">MIGRATION_STATUS_ACTIVE</name></expr></argument>,
                          <argument pos:start="8:27" pos:end="8:49"><expr pos:start="8:27" pos:end="8:49"><name pos:start="8:27" pos:end="8:49">MIGRATION_STATUS_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="9:9" pos:end="9:36"><expr pos:start="9:9" pos:end="9:35"><call pos:start="9:9" pos:end="9:35"><name pos:start="9:9" pos:end="9:24">error_report_err</name><argument_list pos:start="9:25" pos:end="9:35">(<argument pos:start="9:26" pos:end="9:34"><expr pos:start="9:26" pos:end="9:34"><name pos:start="9:26" pos:end="9:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="10:9" pos:end="10:42"><expr pos:start="10:9" pos:end="10:41"><call pos:start="10:9" pos:end="10:41"><name pos:start="10:9" pos:end="10:39">migrate_decompress_threads_join</name><argument_list pos:start="10:40" pos:end="10:41">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="11:9" pos:end="11:27"><expr pos:start="11:9" pos:end="11:26"><call pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:12">exit</name><argument_list pos:start="11:13" pos:end="11:26">(<argument pos:start="11:14" pos:end="11:25"><expr pos:start="11:14" pos:end="11:25"><name pos:start="11:14" pos:end="11:25">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="12:5" pos:end="15:7">/*
     * This must happen after all error conditions are dealt with and
     * we're sure the VM is going to be running on this host.
     */</comment>
    <expr_stmt pos:start="16:5" pos:end="16:25"><expr pos:start="16:5" pos:end="16:24"><call pos:start="16:5" pos:end="16:24"><name pos:start="16:5" pos:end="16:22">qemu_announce_self</name><argument_list pos:start="16:23" pos:end="16:24">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="17:5" pos:end="19:23">/* If global state section was not received or we are in running
       state, we need to obey autostart. Any other state is set with
       runstate_set. */</comment>
    <if_stmt pos:start="20:5" pos:end="37:39"><if pos:start="20:5" pos:end="37:39">if <condition pos:start="20:8" pos:end="21:57">(<expr pos:start="20:9" pos:end="21:56"><operator pos:start="20:9" pos:end="20:9">!</operator><call pos:start="20:10" pos:end="20:32"><name pos:start="20:10" pos:end="20:30">global_state_received</name><argument_list pos:start="20:31" pos:end="20:32">()</argument_list></call> <operator pos:start="20:34" pos:end="20:35">||</operator>
        <call pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:33">global_state_get_runstate</name><argument_list pos:start="21:34" pos:end="21:35">()</argument_list></call> <operator pos:start="21:37" pos:end="21:38">==</operator> <name pos:start="21:40" pos:end="21:56">RUN_STATE_RUNNING</name></expr>)</condition> <block pos:start="21:59" pos:end="37:39">{<block_content pos:start="22:9" pos:end="37:39">
        <if_stmt pos:start="22:9" pos:end="26:5"><if pos:start="22:9" pos:end="24:9">if <condition pos:start="22:12" pos:end="22:22">(<expr pos:start="22:13" pos:end="22:21"><name pos:start="22:13" pos:end="22:21">autostart</name></expr>)</condition> <block pos:start="22:24" pos:end="24:9">{<block_content pos:start="23:13" pos:end="23:23">
            <expr_stmt pos:start="23:13" pos:end="23:23"><expr pos:start="23:13" pos:end="23:22"><call pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:20">vm_start</name><argument_list pos:start="23:21" pos:end="23:22">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="24:11" pos:end="26:5">else <block pos:start="24:16" pos:end="26:5">{<block_content pos:start="25:13" pos:end="25:43">
            <expr_stmt pos:start="25:13" pos:end="25:43"><expr pos:start="25:13" pos:end="25:42"><call pos:start="25:13" pos:end="25:42"><name pos:start="25:13" pos:end="25:24">runstate_set</name><argument_list pos:start="25:25" pos:end="25:42">(<argument pos:start="25:26" pos:end="25:41"><expr pos:start="25:26" pos:end="25:41"><name pos:start="25:26" pos:end="25:41">RUN_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> <if_stmt pos:start="26:7" pos:end="37:39"><else pos:start="26:7" pos:end="37:39">else <block pos:start="26:12" pos:end="37:39">{<block_content pos:start="27:9" pos:end="37:39">
        <expr_stmt pos:start="27:9" pos:end="27:50"><expr pos:start="27:9" pos:end="27:49"><call pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:20">runstate_set</name><argument_list pos:start="27:21" pos:end="27:49">(<argument pos:start="27:22" pos:end="27:48"><expr pos:start="27:22" pos:end="27:48"><call pos:start="27:22" pos:end="27:48"><name pos:start="27:22" pos:end="27:46">global_state_get_runstate</name><argument_list pos:start="27:47" pos:end="27:48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:38"><expr pos:start="28:5" pos:end="28:37"><call pos:start="28:5" pos:end="28:37"><name pos:start="28:5" pos:end="28:35">migrate_decompress_threads_join</name><argument_list pos:start="28:36" pos:end="28:37">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="29:5" pos:end="33:7">/*
     * This must happen after any state changes since as soon as an external
     * observer sees this event they might start to prod at the VM assuming
     * it's ready to use.
     */</comment>
    <expr_stmt pos:start="34:5" pos:end="35:50"><expr pos:start="34:5" pos:end="35:49"><call pos:start="34:5" pos:end="35:49"><name pos:start="34:5" pos:end="34:21">migrate_set_state</name><argument_list pos:start="34:22" pos:end="35:49">(<argument pos:start="34:23" pos:end="34:33"><expr pos:start="34:23" pos:end="34:33"><operator pos:start="34:23" pos:end="34:23">&amp;</operator><name pos:start="34:24" pos:end="34:33"><name pos:start="34:24" pos:end="34:26">mis</name><operator pos:start="34:27" pos:end="34:28">-&gt;</operator><name pos:start="34:29" pos:end="34:33">state</name></name></expr></argument>, <argument pos:start="34:36" pos:end="34:58"><expr pos:start="34:36" pos:end="34:58"><name pos:start="34:36" pos:end="34:58">MIGRATION_STATUS_ACTIVE</name></expr></argument>,
                      <argument pos:start="35:23" pos:end="35:48"><expr pos:start="35:23" pos:end="35:48"><name pos:start="35:23" pos:end="35:48">MIGRATION_STATUS_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:28"><expr pos:start="36:5" pos:end="36:27"><call pos:start="36:5" pos:end="36:27"><name pos:start="36:5" pos:end="36:18">qemu_bh_delete</name><argument_list pos:start="36:19" pos:end="36:27">(<argument pos:start="36:20" pos:end="36:26"><expr pos:start="36:20" pos:end="36:26"><name pos:start="36:20" pos:end="36:26"><name pos:start="36:20" pos:end="36:22">mis</name><operator pos:start="36:23" pos:end="36:24">-&gt;</operator><name pos:start="36:25" pos:end="36:26">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:39"><expr pos:start="37:5" pos:end="37:38"><call pos:start="37:5" pos:end="37:38"><name pos:start="37:5" pos:end="37:36">migration_incoming_state_destroy</name><argument_list pos:start="37:37" pos:end="37:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
