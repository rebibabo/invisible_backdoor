<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20760.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">create_dynamic_disk</name><parameter_list pos:start="1:31" pos:end="3:53">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:43">BlockBackend</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">blk</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:52"><decl pos:start="3:32" pos:end="3:52"><type pos:start="3:32" pos:end="3:52"><name pos:start="3:32" pos:end="3:38">int64_t</name></type> <name pos:start="3:40" pos:end="3:52">total_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="129:1">{<block_content pos:start="7:5" pos:end="127:15">

    <decl_stmt pos:start="7:5" pos:end="9:33"><decl pos:start="7:5" pos:end="9:32"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">VHDDynDiskHeader</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:36">dyndisk_header</name> <init pos:start="7:38" pos:end="9:32">=

        <expr pos:start="9:9" pos:end="9:32"><operator pos:start="9:9" pos:end="9:9">(</operator><name pos:start="9:10" pos:end="9:25">VHDDynDiskHeader</name> <operator pos:start="9:27" pos:end="9:27">*</operator><operator pos:start="9:28" pos:end="9:28">)</operator> <name pos:start="9:30" pos:end="9:32">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:21">block_size</name></decl>, <decl pos:start="11:24" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:24" pos:end="11:38">num_bat_entries</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:18">offset</name> <init pos:start="17:20" pos:end="17:22">= <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="21:5" pos:end="21:64">// Write the footer (twice: at the beginning and at the end)</comment>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:14">block_size</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <literal type="number" pos:start="23:18" pos:end="23:25">0x200000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:78"><expr pos:start="25:5" pos:end="25:77"><name pos:start="25:5" pos:end="25:19">num_bat_entries</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <operator pos:start="25:23" pos:end="25:23">(</operator><name pos:start="25:24" pos:end="25:36">total_sectors</name> <operator pos:start="25:38" pos:end="25:38">+</operator> <name pos:start="25:40" pos:end="25:49">block_size</name> <operator pos:start="25:51" pos:end="25:51">/</operator> <literal type="number" pos:start="25:53" pos:end="25:55">512</literal><operator pos:start="25:56" pos:end="25:56">)</operator> <operator pos:start="25:58" pos:end="25:58">/</operator> <operator pos:start="25:60" pos:end="25:60">(</operator><name pos:start="25:61" pos:end="25:70">block_size</name> <operator pos:start="25:72" pos:end="25:72">/</operator> <literal type="number" pos:start="25:74" pos:end="25:76">512</literal><operator pos:start="25:77" pos:end="25:77">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:51"><name pos:start="29:11" pos:end="29:20">blk_pwrite</name><argument_list pos:start="29:21" pos:end="29:51">(<argument pos:start="29:22" pos:end="29:24"><expr pos:start="29:22" pos:end="29:24"><name pos:start="29:22" pos:end="29:24">blk</name></expr></argument>, <argument pos:start="29:27" pos:end="29:32"><expr pos:start="29:27" pos:end="29:32"><name pos:start="29:27" pos:end="29:32">offset</name></expr></argument>, <argument pos:start="29:35" pos:end="29:37"><expr pos:start="29:35" pos:end="29:37"><name pos:start="29:35" pos:end="29:37">buf</name></expr></argument>, <argument pos:start="29:40" pos:end="29:50"><expr pos:start="29:40" pos:end="29:50"><name pos:start="29:40" pos:end="29:50">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:12">(<expr pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">ret</name></expr>)</condition> <block pos:start="31:14" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:18">

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:57"><expr pos:start="39:5" pos:end="39:56"><name pos:start="39:5" pos:end="39:10">offset</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:19">1536</literal> <operator pos:start="39:19" pos:end="39:19">+</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><operator pos:start="39:22" pos:end="39:22">(</operator><name pos:start="39:23" pos:end="39:37">num_bat_entries</name> <operator pos:start="39:39" pos:end="39:39">*</operator> <literal type="number" pos:start="39:41" pos:end="39:43">4</literal> <operator pos:start="39:43" pos:end="39:43">+</operator> <literal type="number" pos:start="39:45" pos:end="39:47">511</literal><operator pos:start="39:48" pos:end="39:48">)</operator> <operator pos:start="39:50" pos:end="39:50">&amp;</operator> <operator pos:start="39:52" pos:end="39:52">~</operator><literal type="number" pos:start="39:53" pos:end="39:55">511</literal><operator pos:start="39:56" pos:end="39:56">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:52"><expr pos:start="41:5" pos:end="41:51"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:51"><name pos:start="41:11" pos:end="41:20">blk_pwrite</name><argument_list pos:start="41:21" pos:end="41:51">(<argument pos:start="41:22" pos:end="41:24"><expr pos:start="41:22" pos:end="41:24"><name pos:start="41:22" pos:end="41:24">blk</name></expr></argument>, <argument pos:start="41:27" pos:end="41:32"><expr pos:start="41:27" pos:end="41:32"><name pos:start="41:27" pos:end="41:32">offset</name></expr></argument>, <argument pos:start="41:35" pos:end="41:37"><expr pos:start="41:35" pos:end="41:37"><name pos:start="41:35" pos:end="41:37">buf</name></expr></argument>, <argument pos:start="41:40" pos:end="41:50"><expr pos:start="41:40" pos:end="41:50"><name pos:start="41:40" pos:end="41:50">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:18">

        <goto pos:start="45:9" pos:end="45:18">goto <name pos:start="45:14" pos:end="45:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="51:5" pos:end="51:28">// Write the initial BAT</comment>

    <expr_stmt pos:start="53:5" pos:end="53:21"><expr pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:10">offset</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">3</literal> <operator pos:start="53:16" pos:end="53:16">*</operator> <literal type="number" pos:start="53:18" pos:end="53:20">512</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:27"><expr pos:start="57:5" pos:end="57:26"><call pos:start="57:5" pos:end="57:26"><name pos:start="57:5" pos:end="57:10">memset</name><argument_list pos:start="57:11" pos:end="57:26">(<argument pos:start="57:12" pos:end="57:14"><expr pos:start="57:12" pos:end="57:14"><name pos:start="57:12" pos:end="57:14">buf</name></expr></argument>, <argument pos:start="57:17" pos:end="57:20"><expr pos:start="57:17" pos:end="57:20"><literal type="number" pos:start="57:17" pos:end="57:20">0xFF</literal></expr></argument>, <argument pos:start="57:23" pos:end="57:25"><expr pos:start="57:23" pos:end="57:25"><literal type="number" pos:start="57:23" pos:end="57:25">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="59:5" pos:end="71:5">for <control pos:start="59:9" pos:end="59:59">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:54"><expr pos:start="59:17" pos:end="59:53"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <operator pos:start="59:21" pos:end="59:21">(</operator><name pos:start="59:22" pos:end="59:36">num_bat_entries</name> <operator pos:start="59:38" pos:end="59:38">*</operator> <literal type="number" pos:start="59:40" pos:end="59:42">4</literal> <operator pos:start="59:42" pos:end="59:42">+</operator> <literal type="number" pos:start="59:44" pos:end="59:46">511</literal><operator pos:start="59:47" pos:end="59:47">)</operator> <operator pos:start="59:49" pos:end="59:49">/</operator> <literal type="number" pos:start="59:51" pos:end="59:53">512</literal></expr>;</condition> <incr pos:start="59:56" pos:end="59:58"><expr pos:start="59:56" pos:end="59:58"><name pos:start="59:56" pos:end="59:56">i</name><operator pos:start="59:57" pos:end="59:58">++</operator></expr></incr>)</control> <block pos:start="59:61" pos:end="71:5">{<block_content pos:start="61:9" pos:end="69:22">

        <expr_stmt pos:start="61:9" pos:end="61:48"><expr pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:47"><name pos:start="61:15" pos:end="61:24">blk_pwrite</name><argument_list pos:start="61:25" pos:end="61:47">(<argument pos:start="61:26" pos:end="61:28"><expr pos:start="61:26" pos:end="61:28"><name pos:start="61:26" pos:end="61:28">blk</name></expr></argument>, <argument pos:start="61:31" pos:end="61:36"><expr pos:start="61:31" pos:end="61:36"><name pos:start="61:31" pos:end="61:36">offset</name></expr></argument>, <argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><name pos:start="61:39" pos:end="61:41">buf</name></expr></argument>, <argument pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><literal type="number" pos:start="61:44" pos:end="61:46">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition> <block pos:start="63:22" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:22">

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:14">offset</name> <operator pos:start="69:16" pos:end="69:17">+=</operator> <literal type="number" pos:start="69:19" pos:end="69:21">512</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="line" pos:start="75:5" pos:end="75:38">// Prepare the Dynamic Disk Header</comment>

    <expr_stmt pos:start="77:5" pos:end="77:25"><expr pos:start="77:5" pos:end="77:24"><call pos:start="77:5" pos:end="77:24"><name pos:start="77:5" pos:end="77:10">memset</name><argument_list pos:start="77:11" pos:end="77:24">(<argument pos:start="77:12" pos:end="77:14"><expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">buf</name></expr></argument>, <argument pos:start="77:17" pos:end="77:17"><expr pos:start="77:17" pos:end="77:17"><literal type="number" pos:start="77:17" pos:end="77:17">0</literal></expr></argument>, <argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><literal type="number" pos:start="77:20" pos:end="77:23">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:49"><expr pos:start="81:5" pos:end="81:48"><call pos:start="81:5" pos:end="81:48"><name pos:start="81:5" pos:end="81:10">memcpy</name><argument_list pos:start="81:11" pos:end="81:48">(<argument pos:start="81:12" pos:end="81:32"><expr pos:start="81:12" pos:end="81:32"><name pos:start="81:12" pos:end="81:32"><name pos:start="81:12" pos:end="81:25">dyndisk_header</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:32">magic</name></name></expr></argument>, <argument pos:start="81:35" pos:end="81:44"><expr pos:start="81:35" pos:end="81:44"><literal type="string" pos:start="81:35" pos:end="81:44">"cxsparse"</literal></expr></argument>, <argument pos:start="81:47" pos:end="81:47"><expr pos:start="81:47" pos:end="81:47"><literal type="number" pos:start="81:47" pos:end="81:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="91:7">/*

     * Note: The spec is actually wrong here for data_offset, it says

     * 0xFFFFFFFF, but MS tools expect all 64 bits to be set.

     */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:69"><expr pos:start="93:5" pos:end="93:68"><name pos:start="93:5" pos:end="93:31"><name pos:start="93:5" pos:end="93:18">dyndisk_header</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:31">data_offset</name></name> <operator pos:start="93:33" pos:end="93:33">=</operator> <call pos:start="93:35" pos:end="93:68"><name pos:start="93:35" pos:end="93:45">cpu_to_be64</name><argument_list pos:start="93:46" pos:end="93:68">(<argument pos:start="93:47" pos:end="93:67"><expr pos:start="93:47" pos:end="93:67"><literal type="number" pos:start="93:47" pos:end="93:67">0xFFFFFFFFFFFFFFFFULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:56"><expr pos:start="95:5" pos:end="95:55"><name pos:start="95:5" pos:end="95:32"><name pos:start="95:5" pos:end="95:18">dyndisk_header</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:32">table_offset</name></name> <operator pos:start="95:34" pos:end="95:34">=</operator> <call pos:start="95:36" pos:end="95:55"><name pos:start="95:36" pos:end="95:46">cpu_to_be64</name><argument_list pos:start="95:47" pos:end="95:55">(<argument pos:start="95:48" pos:end="95:54"><expr pos:start="95:48" pos:end="95:54"><literal type="number" pos:start="95:48" pos:end="95:48">3</literal> <operator pos:start="95:50" pos:end="95:50">*</operator> <literal type="number" pos:start="95:52" pos:end="95:54">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:54"><expr pos:start="97:5" pos:end="97:53"><name pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:18">dyndisk_header</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:27">version</name></name> <operator pos:start="97:29" pos:end="97:29">=</operator> <call pos:start="97:31" pos:end="97:53"><name pos:start="97:31" pos:end="97:41">cpu_to_be32</name><argument_list pos:start="97:42" pos:end="97:53">(<argument pos:start="97:43" pos:end="97:52"><expr pos:start="97:43" pos:end="97:52"><literal type="number" pos:start="97:43" pos:end="97:52">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:57"><expr pos:start="99:5" pos:end="99:56"><name pos:start="99:5" pos:end="99:30"><name pos:start="99:5" pos:end="99:18">dyndisk_header</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:30">block_size</name></name> <operator pos:start="99:32" pos:end="99:32">=</operator> <call pos:start="99:34" pos:end="99:56"><name pos:start="99:34" pos:end="99:44">cpu_to_be32</name><argument_list pos:start="99:45" pos:end="99:56">(<argument pos:start="99:46" pos:end="99:55"><expr pos:start="99:46" pos:end="99:55"><name pos:start="99:46" pos:end="99:55">block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:69"><expr pos:start="101:5" pos:end="101:68"><name pos:start="101:5" pos:end="101:37"><name pos:start="101:5" pos:end="101:18">dyndisk_header</name><operator pos:start="101:19" pos:end="101:20">-&gt;</operator><name pos:start="101:21" pos:end="101:37">max_table_entries</name></name> <operator pos:start="101:39" pos:end="101:39">=</operator> <call pos:start="101:41" pos:end="101:68"><name pos:start="101:41" pos:end="101:51">cpu_to_be32</name><argument_list pos:start="101:52" pos:end="101:68">(<argument pos:start="101:53" pos:end="101:67"><expr pos:start="101:53" pos:end="101:67"><name pos:start="101:53" pos:end="101:67">num_bat_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:68"><expr pos:start="105:5" pos:end="105:67"><name pos:start="105:5" pos:end="105:28"><name pos:start="105:5" pos:end="105:18">dyndisk_header</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:28">checksum</name></name> <operator pos:start="105:30" pos:end="105:30">=</operator> <call pos:start="105:32" pos:end="105:67"><name pos:start="105:32" pos:end="105:42">cpu_to_be32</name><argument_list pos:start="105:43" pos:end="105:67">(<argument pos:start="105:44" pos:end="105:66"><expr pos:start="105:44" pos:end="105:66"><call pos:start="105:44" pos:end="105:66"><name pos:start="105:44" pos:end="105:55">vpc_checksum</name><argument_list pos:start="105:56" pos:end="105:66">(<argument pos:start="105:57" pos:end="105:59"><expr pos:start="105:57" pos:end="105:59"><name pos:start="105:57" pos:end="105:59">buf</name></expr></argument>, <argument pos:start="105:62" pos:end="105:65"><expr pos:start="105:62" pos:end="105:65"><literal type="number" pos:start="105:62" pos:end="105:65">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="109:5" pos:end="109:23">// Write the header</comment>

    <expr_stmt pos:start="111:5" pos:end="111:17"><expr pos:start="111:5" pos:end="111:16"><name pos:start="111:5" pos:end="111:10">offset</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <literal type="number" pos:start="111:14" pos:end="111:16">512</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:45"><expr pos:start="115:5" pos:end="115:44"><name pos:start="115:5" pos:end="115:7">ret</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <call pos:start="115:11" pos:end="115:44"><name pos:start="115:11" pos:end="115:20">blk_pwrite</name><argument_list pos:start="115:21" pos:end="115:44">(<argument pos:start="115:22" pos:end="115:24"><expr pos:start="115:22" pos:end="115:24"><name pos:start="115:22" pos:end="115:24">blk</name></expr></argument>, <argument pos:start="115:27" pos:end="115:32"><expr pos:start="115:27" pos:end="115:32"><name pos:start="115:27" pos:end="115:32">offset</name></expr></argument>, <argument pos:start="115:35" pos:end="115:37"><expr pos:start="115:35" pos:end="115:37"><name pos:start="115:35" pos:end="115:37">buf</name></expr></argument>, <argument pos:start="115:40" pos:end="115:43"><expr pos:start="115:40" pos:end="115:43"><literal type="number" pos:start="115:40" pos:end="115:43">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:16">(<expr pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">&lt;</operator> <literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr>)</condition> <block pos:start="117:18" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:18">

        <goto pos:start="119:9" pos:end="119:18">goto <name pos:start="119:14" pos:end="119:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



 <label pos:start="125:2" pos:end="125:6"><name pos:start="125:2" pos:end="125:5">fail</name>:</label>

    <return pos:start="127:5" pos:end="127:15">return <expr pos:start="127:12" pos:end="127:14"><name pos:start="127:12" pos:end="127:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
