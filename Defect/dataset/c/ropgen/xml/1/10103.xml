<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10103.c" pos:tabs="8"><function pos:start="1:1" pos:end="317:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vc1_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:61">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:46"><decl pos:start="5:29" pos:end="5:46"><type pos:start="5:29" pos:end="5:46"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:41">uint8_t</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:46">buf</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:60"><decl pos:start="5:49" pos:end="5:60"><type pos:start="5:49" pos:end="5:60"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:60">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="317:1">{<block_content pos:start="9:5" pos:end="315:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">VC1Context</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">v</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:29">= <expr pos:start="11:25" pos:end="11:29"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:26">v</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:17">buf2</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="21:5" pos:end="41:5"><if pos:start="21:5" pos:end="41:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:16">buf_size</name> <operator pos:start="21:18" pos:end="21:19">==</operator> <literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr>)</condition> <block pos:start="21:24" pos:end="41:5">{<block_content pos:start="25:9" pos:end="39:17">

        <comment type="block" pos:start="23:9" pos:end="23:43">/* special case for last picture */</comment>

        <if_stmt pos:start="25:9" pos:end="35:9"><if pos:start="25:9" pos:end="35:9">if <condition pos:start="25:12" pos:end="25:51">(<expr pos:start="25:13" pos:end="25:50"><name pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:24">low_delay</name></name><operator pos:start="25:25" pos:end="25:26">==</operator><literal type="number" pos:start="25:27" pos:end="25:27">0</literal> <operator pos:start="25:29" pos:end="25:30">&amp;&amp;</operator> <name pos:start="25:32" pos:end="25:50"><name pos:start="25:32" pos:end="25:32">s</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:50">next_picture_ptr</name></name></expr>)</condition> <block pos:start="25:53" pos:end="35:9">{<block_content pos:start="27:13" pos:end="33:41">

            <expr_stmt pos:start="27:13" pos:end="27:50"><expr pos:start="27:13" pos:end="27:49"><operator pos:start="27:13" pos:end="27:13">*</operator><name pos:start="27:14" pos:end="27:17">pict</name><operator pos:start="27:18" pos:end="27:18">=</operator> <operator pos:start="27:20" pos:end="27:20">*</operator><operator pos:start="27:21" pos:end="27:21">(</operator><name pos:start="27:22" pos:end="27:28">AVFrame</name><operator pos:start="27:29" pos:end="27:29">*</operator><operator pos:start="27:30" pos:end="27:30">)</operator><name pos:start="27:31" pos:end="27:49"><name pos:start="27:31" pos:end="27:31">s</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:49">next_picture_ptr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:38"><expr pos:start="29:13" pos:end="29:37"><name pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:31">next_picture_ptr</name></name><operator pos:start="29:32" pos:end="29:32">=</operator> <name pos:start="29:34" pos:end="29:37">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="33:13" pos:end="33:41"><expr pos:start="33:13" pos:end="33:40"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:22">data_size</name> <operator pos:start="33:24" pos:end="33:24">=</operator> <sizeof pos:start="33:26" pos:end="33:40">sizeof<argument_list pos:start="33:32" pos:end="33:40">(<argument pos:start="33:33" pos:end="33:39"><expr pos:start="33:33" pos:end="33:39"><name pos:start="33:33" pos:end="33:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="47:54">/* We need to set current_picture_ptr before reading the header,

     * otherwise we cannot store anything in there. */</comment>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if<condition pos:start="49:7" pos:end="49:71">(<expr pos:start="49:8" pos:end="49:70"><name pos:start="49:8" pos:end="49:29"><name pos:start="49:8" pos:end="49:8">s</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:29">current_picture_ptr</name></name><operator pos:start="49:30" pos:end="49:31">==</operator><name pos:start="49:32" pos:end="49:35">NULL</name> <operator pos:start="49:37" pos:end="49:38">||</operator> <name pos:start="49:40" pos:end="49:70"><name pos:start="49:40" pos:end="49:40">s</name><operator pos:start="49:41" pos:end="49:42">-&gt;</operator><name pos:start="49:43" pos:end="49:61">current_picture_ptr</name><operator pos:start="49:62" pos:end="49:63">-&gt;</operator><name pos:start="49:64" pos:end="49:67">data</name><index pos:start="49:68" pos:end="49:70">[<expr pos:start="49:69" pos:end="49:69"><literal type="number" pos:start="49:69" pos:end="49:69">0</literal></expr>]</index></name></expr>)</condition><block pos:start="49:72" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:47">

        <decl_stmt pos:start="51:9" pos:end="51:44"><decl pos:start="51:9" pos:end="51:43"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:13">i</name><init pos:start="51:14" pos:end="51:43">= <expr pos:start="51:16" pos:end="51:43"><call pos:start="51:16" pos:end="51:43"><name pos:start="51:16" pos:end="51:37">ff_find_unused_picture</name><argument_list pos:start="51:38" pos:end="51:43">(<argument pos:start="51:39" pos:end="51:39"><expr pos:start="51:39" pos:end="51:39"><name pos:start="51:39" pos:end="51:39">s</name></expr></argument>, <argument pos:start="51:42" pos:end="51:42"><expr pos:start="51:42" pos:end="51:42"><literal type="number" pos:start="51:42" pos:end="51:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:47"><expr pos:start="53:9" pos:end="53:46"><name pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:30">current_picture_ptr</name></name><operator pos:start="53:31" pos:end="53:31">=</operator> <operator pos:start="53:33" pos:end="53:33">&amp;</operator><name pos:start="53:34" pos:end="53:46"><name pos:start="53:34" pos:end="53:34">s</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:43">picture</name><index pos:start="53:44" pos:end="53:46">[<expr pos:start="53:45" pos:end="53:45"><name pos:start="53:45" pos:end="53:45">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="59:5" pos:end="59:65">//for advanced profile we may need to parse and unescape data</comment>

    <if_stmt pos:start="61:5" pos:end="151:47"><if pos:start="61:5" pos:end="149:5">if <condition pos:start="61:8" pos:end="61:40">(<expr pos:start="61:9" pos:end="61:39"><name pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:13">avctx</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:23">codec_id</name></name> <operator pos:start="61:25" pos:end="61:26">==</operator> <name pos:start="61:28" pos:end="61:39">CODEC_ID_VC1</name></expr>)</condition> <block pos:start="61:42" pos:end="149:5">{<block_content pos:start="63:9" pos:end="147:49">

        <decl_stmt pos:start="63:9" pos:end="63:26"><decl pos:start="63:9" pos:end="63:25"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:21">buf_size2</name> <init pos:start="63:23" pos:end="63:25">= <expr pos:start="63:25" pos:end="63:25"><literal type="number" pos:start="63:25" pos:end="63:25">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:67"><expr pos:start="65:9" pos:end="65:66"><name pos:start="65:9" pos:end="65:12">buf2</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:66"><name pos:start="65:16" pos:end="65:25">av_mallocz</name><argument_list pos:start="65:26" pos:end="65:66">(<argument pos:start="65:27" pos:end="65:65"><expr pos:start="65:27" pos:end="65:65"><name pos:start="65:27" pos:end="65:34">buf_size</name> <operator pos:start="65:36" pos:end="65:36">+</operator> <name pos:start="65:38" pos:end="65:65">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="69:9" pos:end="145:9"><if pos:start="69:9" pos:end="116:9">if<condition pos:start="69:11" pos:end="69:35">(<expr pos:start="69:12" pos:end="69:34"><call pos:start="69:12" pos:end="69:34"><name pos:start="69:12" pos:end="69:20">IS_MARKER</name><argument_list pos:start="69:21" pos:end="69:34">(<argument pos:start="69:22" pos:end="69:33"><expr pos:start="69:22" pos:end="69:33"><call pos:start="69:22" pos:end="69:33"><name pos:start="69:22" pos:end="69:28">AV_RB32</name><argument_list pos:start="69:29" pos:end="69:33">(<argument pos:start="69:30" pos:end="69:32"><expr pos:start="69:30" pos:end="69:32"><name pos:start="69:30" pos:end="69:32">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="69:36" pos:end="116:9">{<block_content pos:start="71:13" pos:end="114:13"> <comment type="block" pos:start="69:38" pos:end="69:90">/* frame starts with marker and needs to be parsed */</comment>

            <decl_stmt pos:start="71:13" pos:end="71:46"><decl pos:start="71:13" pos:end="71:32"><type pos:start="71:13" pos:end="71:27"><specifier pos:start="71:13" pos:end="71:17">const</specifier> <name pos:start="71:19" pos:end="71:25">uint8_t</name> <modifier pos:start="71:27" pos:end="71:27">*</modifier></type><name pos:start="71:28" pos:end="71:32">start</name></decl>, <decl pos:start="71:35" pos:end="71:38"><type ref="prev" pos:start="71:13" pos:end="71:27"><modifier pos:start="71:35" pos:end="71:35">*</modifier></type><name pos:start="71:36" pos:end="71:38">end</name></decl>, <decl pos:start="71:41" pos:end="71:45"><type ref="prev" pos:start="71:13" pos:end="71:27"><modifier pos:start="71:41" pos:end="71:41">*</modifier></type><name pos:start="71:42" pos:end="71:45">next</name></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="73:21"><decl pos:start="73:13" pos:end="73:20"><type pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">int</name></type> <name pos:start="73:17" pos:end="73:20">size</name></decl>;</decl_stmt>



            <expr_stmt pos:start="77:13" pos:end="77:23"><expr pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:16">next</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <name pos:start="77:20" pos:end="77:22">buf</name></expr>;</expr_stmt>

            <for pos:start="79:13" pos:end="114:13">for<control pos:start="79:16" pos:end="79:76">(<init pos:start="79:17" pos:end="79:50"><expr pos:start="79:17" pos:end="79:27"><name pos:start="79:17" pos:end="79:21">start</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:27">buf</name></expr><operator pos:start="79:28" pos:end="79:28">,</operator> <expr pos:start="79:30" pos:end="79:49"><name pos:start="79:30" pos:end="79:32">end</name> <operator pos:start="79:34" pos:end="79:34">=</operator> <name pos:start="79:36" pos:end="79:38">buf</name> <operator pos:start="79:40" pos:end="79:40">+</operator> <name pos:start="79:42" pos:end="79:49">buf_size</name></expr>;</init> <condition pos:start="79:52" pos:end="79:62"><expr pos:start="79:52" pos:end="79:61"><name pos:start="79:52" pos:end="79:55">next</name> <operator pos:start="79:57" pos:end="79:57">&lt;</operator> <name pos:start="79:59" pos:end="79:61">end</name></expr>;</condition> <incr pos:start="79:64" pos:end="79:75"><expr pos:start="79:64" pos:end="79:75"><name pos:start="79:64" pos:end="79:68">start</name> <operator pos:start="79:70" pos:end="79:70">=</operator> <name pos:start="79:72" pos:end="79:75">next</name></expr></incr>)</control><block pos:start="79:77" pos:end="114:13">{<block_content pos:start="81:17" pos:end="112:17">

                <expr_stmt pos:start="81:17" pos:end="81:56"><expr pos:start="81:17" pos:end="81:55"><name pos:start="81:17" pos:end="81:20">next</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <call pos:start="81:24" pos:end="81:55"><name pos:start="81:24" pos:end="81:39">find_next_marker</name><argument_list pos:start="81:40" pos:end="81:55">(<argument pos:start="81:41" pos:end="81:49"><expr pos:start="81:41" pos:end="81:49"><name pos:start="81:41" pos:end="81:45">start</name> <operator pos:start="81:47" pos:end="81:47">+</operator> <literal type="number" pos:start="81:49" pos:end="81:49">4</literal></expr></argument>, <argument pos:start="81:52" pos:end="81:54"><expr pos:start="81:52" pos:end="81:54"><name pos:start="81:52" pos:end="81:54">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:40"><expr pos:start="83:17" pos:end="83:39"><name pos:start="83:17" pos:end="83:20">size</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:27">next</name> <operator pos:start="83:29" pos:end="83:29">-</operator> <name pos:start="83:31" pos:end="83:35">start</name> <operator pos:start="83:37" pos:end="83:37">-</operator> <literal type="number" pos:start="83:39" pos:end="83:39">4</literal></expr>;</expr_stmt>

                <if_stmt pos:start="85:17" pos:end="85:39"><if pos:start="85:17" pos:end="85:39">if<condition pos:start="85:19" pos:end="85:29">(<expr pos:start="85:20" pos:end="85:28"><name pos:start="85:20" pos:end="85:23">size</name> <operator pos:start="85:25" pos:end="85:26">&lt;=</operator> <literal type="number" pos:start="85:28" pos:end="85:28">0</literal></expr>)</condition><block type="pseudo" pos:start="85:31" pos:end="85:39"><block_content pos:start="85:31" pos:end="85:39"> <continue pos:start="85:31" pos:end="85:39">continue;</continue></block_content></block></if></if_stmt>

                <switch pos:start="87:17" pos:end="112:17">switch<condition pos:start="87:23" pos:end="87:38">(<expr pos:start="87:24" pos:end="87:37"><call pos:start="87:24" pos:end="87:37"><name pos:start="87:24" pos:end="87:30">AV_RB32</name><argument_list pos:start="87:31" pos:end="87:37">(<argument pos:start="87:32" pos:end="87:36"><expr pos:start="87:32" pos:end="87:36"><name pos:start="87:32" pos:end="87:36">start</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="87:39" pos:end="112:17">{<block_content pos:start="89:17" pos:end="110:30">

                <case pos:start="89:17" pos:end="89:36">case <expr pos:start="89:22" pos:end="89:35"><name pos:start="89:22" pos:end="89:35">VC1_CODE_FRAME</name></expr>:</case>

                    <expr_stmt pos:start="91:21" pos:end="91:75"><expr pos:start="91:21" pos:end="91:74"><name pos:start="91:21" pos:end="91:29">buf_size2</name> <operator pos:start="91:31" pos:end="91:31">=</operator> <call pos:start="91:33" pos:end="91:74"><name pos:start="91:33" pos:end="91:51">vc1_unescape_buffer</name><argument_list pos:start="91:52" pos:end="91:74">(<argument pos:start="91:53" pos:end="91:61"><expr pos:start="91:53" pos:end="91:61"><name pos:start="91:53" pos:end="91:57">start</name> <operator pos:start="91:59" pos:end="91:59">+</operator> <literal type="number" pos:start="91:61" pos:end="91:61">4</literal></expr></argument>, <argument pos:start="91:64" pos:end="91:67"><expr pos:start="91:64" pos:end="91:67"><name pos:start="91:64" pos:end="91:67">size</name></expr></argument>, <argument pos:start="91:70" pos:end="91:73"><expr pos:start="91:70" pos:end="91:73"><name pos:start="91:70" pos:end="91:73">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="93:21" pos:end="93:26">break;</break>

                <case pos:start="95:17" pos:end="95:41">case <expr pos:start="95:22" pos:end="95:40"><name pos:start="95:22" pos:end="95:40">VC1_CODE_ENTRYPOINT</name></expr>:</case> <comment type="block" pos:start="95:43" pos:end="95:78">/* it should be before frame data */</comment>

                    <expr_stmt pos:start="97:21" pos:end="97:75"><expr pos:start="97:21" pos:end="97:74"><name pos:start="97:21" pos:end="97:29">buf_size2</name> <operator pos:start="97:31" pos:end="97:31">=</operator> <call pos:start="97:33" pos:end="97:74"><name pos:start="97:33" pos:end="97:51">vc1_unescape_buffer</name><argument_list pos:start="97:52" pos:end="97:74">(<argument pos:start="97:53" pos:end="97:61"><expr pos:start="97:53" pos:end="97:61"><name pos:start="97:53" pos:end="97:57">start</name> <operator pos:start="97:59" pos:end="97:59">+</operator> <literal type="number" pos:start="97:61" pos:end="97:61">4</literal></expr></argument>, <argument pos:start="97:64" pos:end="97:67"><expr pos:start="97:64" pos:end="97:67"><name pos:start="97:64" pos:end="97:67">size</name></expr></argument>, <argument pos:start="97:70" pos:end="97:73"><expr pos:start="97:70" pos:end="97:73"><name pos:start="97:70" pos:end="97:73">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:61"><expr pos:start="99:21" pos:end="99:60"><call pos:start="99:21" pos:end="99:60"><name pos:start="99:21" pos:end="99:33">init_get_bits</name><argument_list pos:start="99:34" pos:end="99:60">(<argument pos:start="99:35" pos:end="99:40"><expr pos:start="99:35" pos:end="99:40"><operator pos:start="99:35" pos:end="99:35">&amp;</operator><name pos:start="99:36" pos:end="99:40"><name pos:start="99:36" pos:end="99:36">s</name><operator pos:start="99:37" pos:end="99:38">-&gt;</operator><name pos:start="99:39" pos:end="99:40">gb</name></name></expr></argument>, <argument pos:start="99:43" pos:end="99:46"><expr pos:start="99:43" pos:end="99:46"><name pos:start="99:43" pos:end="99:46">buf2</name></expr></argument>, <argument pos:start="99:49" pos:end="99:59"><expr pos:start="99:49" pos:end="99:59"><name pos:start="99:49" pos:end="99:57">buf_size2</name><operator pos:start="99:58" pos:end="99:58">*</operator><literal type="number" pos:start="99:59" pos:end="99:59">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:54"><expr pos:start="101:21" pos:end="101:53"><call pos:start="101:21" pos:end="101:53"><name pos:start="101:21" pos:end="101:38">decode_entry_point</name><argument_list pos:start="101:39" pos:end="101:53">(<argument pos:start="101:40" pos:end="101:44"><expr pos:start="101:40" pos:end="101:44"><name pos:start="101:40" pos:end="101:44">avctx</name></expr></argument>, <argument pos:start="101:47" pos:end="101:52"><expr pos:start="101:47" pos:end="101:52"><operator pos:start="101:47" pos:end="101:47">&amp;</operator><name pos:start="101:48" pos:end="101:52"><name pos:start="101:48" pos:end="101:48">s</name><operator pos:start="101:49" pos:end="101:50">-&gt;</operator><name pos:start="101:51" pos:end="101:52">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="103:21" pos:end="103:26">break;</break>

                <case pos:start="105:17" pos:end="105:36">case <expr pos:start="105:22" pos:end="105:35"><name pos:start="105:22" pos:end="105:35">VC1_CODE_SLICE</name></expr>:</case>

                    <expr_stmt pos:start="107:21" pos:end="107:94"><expr pos:start="107:21" pos:end="107:93"><call pos:start="107:21" pos:end="107:93"><name pos:start="107:21" pos:end="107:26">av_log</name><argument_list pos:start="107:27" pos:end="107:93">(<argument pos:start="107:28" pos:end="107:32"><expr pos:start="107:28" pos:end="107:32"><name pos:start="107:28" pos:end="107:32">avctx</name></expr></argument>, <argument pos:start="107:35" pos:end="107:46"><expr pos:start="107:35" pos:end="107:46"><name pos:start="107:35" pos:end="107:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:49" pos:end="107:92"><expr pos:start="107:49" pos:end="107:92"><literal type="string" pos:start="107:49" pos:end="107:92">"Sliced decoding is not implemented (yet)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                    <return pos:start="110:21" pos:end="110:30">return <expr pos:start="110:28" pos:end="110:29"><operator pos:start="110:28" pos:end="110:28">-</operator><literal type="number" pos:start="110:29" pos:end="110:29">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></for>

        </block_content>}</block></if><if type="elseif" pos:start="116:10" pos:end="141:9">else if<condition pos:start="116:17" pos:end="116:59">(<expr pos:start="116:18" pos:end="116:58"><name pos:start="116:18" pos:end="116:29"><name pos:start="116:18" pos:end="116:18">v</name><operator pos:start="116:19" pos:end="116:20">-&gt;</operator><name pos:start="116:21" pos:end="116:29">interlace</name></name> <operator pos:start="116:31" pos:end="116:32">&amp;&amp;</operator> <operator pos:start="116:34" pos:end="116:34">(</operator><operator pos:start="116:35" pos:end="116:35">(</operator><name pos:start="116:36" pos:end="116:41"><name pos:start="116:36" pos:end="116:38">buf</name><index pos:start="116:39" pos:end="116:41">[<expr pos:start="116:40" pos:end="116:40"><literal type="number" pos:start="116:40" pos:end="116:40">0</literal></expr>]</index></name> <operator pos:start="116:43" pos:end="116:43">&amp;</operator> <literal type="number" pos:start="116:45" pos:end="116:48">0xC0</literal><operator pos:start="116:49" pos:end="116:49">)</operator> <operator pos:start="116:51" pos:end="116:52">==</operator> <literal type="number" pos:start="116:54" pos:end="116:57">0xC0</literal><operator pos:start="116:58" pos:end="116:58">)</operator></expr>)</condition><block pos:start="116:60" pos:end="141:9">{<block_content pos:start="118:13" pos:end="139:36"> <comment type="block" pos:start="116:62" pos:end="116:119">/* WVC1 interlaced stores both fields divided by marker */</comment>

            <decl_stmt pos:start="118:13" pos:end="118:35"><decl pos:start="118:13" pos:end="118:34"><type pos:start="118:13" pos:end="118:27"><specifier pos:start="118:13" pos:end="118:17">const</specifier> <name pos:start="118:19" pos:end="118:25">uint8_t</name> <modifier pos:start="118:27" pos:end="118:27">*</modifier></type><name pos:start="118:28" pos:end="118:34">divider</name></decl>;</decl_stmt>



            <expr_stmt pos:start="122:13" pos:end="122:60"><expr pos:start="122:13" pos:end="122:59"><name pos:start="122:13" pos:end="122:19">divider</name> <operator pos:start="122:21" pos:end="122:21">=</operator> <call pos:start="122:23" pos:end="122:59"><name pos:start="122:23" pos:end="122:38">find_next_marker</name><argument_list pos:start="122:39" pos:end="122:59">(<argument pos:start="122:40" pos:end="122:42"><expr pos:start="122:40" pos:end="122:42"><name pos:start="122:40" pos:end="122:42">buf</name></expr></argument>, <argument pos:start="122:45" pos:end="122:58"><expr pos:start="122:45" pos:end="122:58"><name pos:start="122:45" pos:end="122:47">buf</name> <operator pos:start="122:49" pos:end="122:49">+</operator> <name pos:start="122:51" pos:end="122:58">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="124:13" pos:end="131:13"><if pos:start="124:13" pos:end="131:13">if<condition pos:start="124:15" pos:end="124:83">(<expr pos:start="124:16" pos:end="124:82"><operator pos:start="124:16" pos:end="124:16">(</operator><name pos:start="124:17" pos:end="124:23">divider</name> <operator pos:start="124:25" pos:end="124:26">==</operator> <operator pos:start="124:28" pos:end="124:28">(</operator><name pos:start="124:29" pos:end="124:31">buf</name> <operator pos:start="124:33" pos:end="124:33">+</operator> <name pos:start="124:35" pos:end="124:42">buf_size</name><operator pos:start="124:43" pos:end="124:43">)</operator><operator pos:start="124:44" pos:end="124:44">)</operator> <operator pos:start="124:46" pos:end="124:47">||</operator> <call pos:start="124:49" pos:end="124:64"><name pos:start="124:49" pos:end="124:55">AV_RB32</name><argument_list pos:start="124:56" pos:end="124:64">(<argument pos:start="124:57" pos:end="124:63"><expr pos:start="124:57" pos:end="124:63"><name pos:start="124:57" pos:end="124:63">divider</name></expr></argument>)</argument_list></call> <operator pos:start="124:66" pos:end="124:67">!=</operator> <name pos:start="124:69" pos:end="124:82">VC1_CODE_FIELD</name></expr>)</condition><block pos:start="124:84" pos:end="131:13">{<block_content pos:start="126:17" pos:end="129:26">

                <expr_stmt pos:start="126:17" pos:end="126:80"><expr pos:start="126:17" pos:end="126:79"><call pos:start="126:17" pos:end="126:79"><name pos:start="126:17" pos:end="126:22">av_log</name><argument_list pos:start="126:23" pos:end="126:79">(<argument pos:start="126:24" pos:end="126:28"><expr pos:start="126:24" pos:end="126:28"><name pos:start="126:24" pos:end="126:28">avctx</name></expr></argument>, <argument pos:start="126:31" pos:end="126:42"><expr pos:start="126:31" pos:end="126:42"><name pos:start="126:31" pos:end="126:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="126:45" pos:end="126:78"><expr pos:start="126:45" pos:end="126:78"><literal type="string" pos:start="126:45" pos:end="126:78">"Error in WVC1 interlaced frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <return pos:start="129:17" pos:end="129:26">return <expr pos:start="129:24" pos:end="129:25"><operator pos:start="129:24" pos:end="129:24">-</operator><literal type="number" pos:start="129:25" pos:end="129:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="135:13" pos:end="135:70"><expr pos:start="135:13" pos:end="135:69"><name pos:start="135:13" pos:end="135:21">buf_size2</name> <operator pos:start="135:23" pos:end="135:23">=</operator> <call pos:start="135:25" pos:end="135:69"><name pos:start="135:25" pos:end="135:43">vc1_unescape_buffer</name><argument_list pos:start="135:44" pos:end="135:69">(<argument pos:start="135:45" pos:end="135:47"><expr pos:start="135:45" pos:end="135:47"><name pos:start="135:45" pos:end="135:47">buf</name></expr></argument>, <argument pos:start="135:50" pos:end="135:62"><expr pos:start="135:50" pos:end="135:62"><name pos:start="135:50" pos:end="135:56">divider</name> <operator pos:start="135:58" pos:end="135:58">-</operator> <name pos:start="135:60" pos:end="135:62">buf</name></expr></argument>, <argument pos:start="135:65" pos:end="135:68"><expr pos:start="135:65" pos:end="135:68"><name pos:start="135:65" pos:end="135:68">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="137:13" pos:end="137:19">// TODO</comment>

            <expr_stmt pos:start="139:13" pos:end="139:26"><expr pos:start="139:13" pos:end="139:25"><call pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:19">av_free</name><argument_list pos:start="139:20" pos:end="139:25">(<argument pos:start="139:21" pos:end="139:24"><expr pos:start="139:21" pos:end="139:24"><name pos:start="139:21" pos:end="139:24">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return pos:start="139:27" pos:end="139:36">return <expr pos:start="139:34" pos:end="139:35"><operator pos:start="139:34" pos:end="139:34">-</operator><literal type="number" pos:start="139:35" pos:end="139:35">1</literal></expr>;</return>

        </block_content>}</block></if><else pos:start="141:10" pos:end="145:9">else<block pos:start="141:14" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:65">

            <expr_stmt pos:start="143:13" pos:end="143:65"><expr pos:start="143:13" pos:end="143:64"><name pos:start="143:13" pos:end="143:21">buf_size2</name> <operator pos:start="143:23" pos:end="143:23">=</operator> <call pos:start="143:25" pos:end="143:64"><name pos:start="143:25" pos:end="143:43">vc1_unescape_buffer</name><argument_list pos:start="143:44" pos:end="143:64">(<argument pos:start="143:45" pos:end="143:47"><expr pos:start="143:45" pos:end="143:47"><name pos:start="143:45" pos:end="143:47">buf</name></expr></argument>, <argument pos:start="143:50" pos:end="143:57"><expr pos:start="143:50" pos:end="143:57"><name pos:start="143:50" pos:end="143:57">buf_size</name></expr></argument>, <argument pos:start="143:60" pos:end="143:63"><expr pos:start="143:60" pos:end="143:63"><name pos:start="143:60" pos:end="143:63">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:49"><expr pos:start="147:9" pos:end="147:48"><call pos:start="147:9" pos:end="147:48"><name pos:start="147:9" pos:end="147:21">init_get_bits</name><argument_list pos:start="147:22" pos:end="147:48">(<argument pos:start="147:23" pos:end="147:28"><expr pos:start="147:23" pos:end="147:28"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:28"><name pos:start="147:24" pos:end="147:24">s</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:28">gb</name></name></expr></argument>, <argument pos:start="147:31" pos:end="147:34"><expr pos:start="147:31" pos:end="147:34"><name pos:start="147:31" pos:end="147:34">buf2</name></expr></argument>, <argument pos:start="147:37" pos:end="147:47"><expr pos:start="147:37" pos:end="147:47"><name pos:start="147:37" pos:end="147:45">buf_size2</name><operator pos:start="147:46" pos:end="147:46">*</operator><literal type="number" pos:start="147:47" pos:end="147:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="149:7" pos:end="151:47">else<block type="pseudo" pos:start="151:9" pos:end="151:47"><block_content pos:start="151:9" pos:end="151:47">

        <expr_stmt pos:start="151:9" pos:end="151:47"><expr pos:start="151:9" pos:end="151:46"><call pos:start="151:9" pos:end="151:46"><name pos:start="151:9" pos:end="151:21">init_get_bits</name><argument_list pos:start="151:22" pos:end="151:46">(<argument pos:start="151:23" pos:end="151:28"><expr pos:start="151:23" pos:end="151:28"><operator pos:start="151:23" pos:end="151:23">&amp;</operator><name pos:start="151:24" pos:end="151:28"><name pos:start="151:24" pos:end="151:24">s</name><operator pos:start="151:25" pos:end="151:26">-&gt;</operator><name pos:start="151:27" pos:end="151:28">gb</name></name></expr></argument>, <argument pos:start="151:31" pos:end="151:33"><expr pos:start="151:31" pos:end="151:33"><name pos:start="151:31" pos:end="151:33">buf</name></expr></argument>, <argument pos:start="151:36" pos:end="151:45"><expr pos:start="151:36" pos:end="151:45"><name pos:start="151:36" pos:end="151:43">buf_size</name><operator pos:start="151:44" pos:end="151:44">*</operator><literal type="number" pos:start="151:45" pos:end="151:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line" pos:start="153:5" pos:end="153:28">// do parse frame header</comment>

    <if_stmt pos:start="155:5" pos:end="173:5"><if pos:start="155:5" pos:end="164:5">if<condition pos:start="155:7" pos:end="155:37">(<expr pos:start="155:8" pos:end="155:36"><name pos:start="155:8" pos:end="155:17"><name pos:start="155:8" pos:end="155:8">v</name><operator pos:start="155:9" pos:end="155:10">-&gt;</operator><name pos:start="155:11" pos:end="155:17">profile</name></name> <operator pos:start="155:19" pos:end="155:19">&lt;</operator> <name pos:start="155:21" pos:end="155:36">PROFILE_ADVANCED</name></expr>)</condition> <block pos:start="155:39" pos:end="164:5">{<block_content pos:start="157:9" pos:end="162:9">

        <if_stmt pos:start="157:9" pos:end="162:9"><if pos:start="157:9" pos:end="162:9">if<condition pos:start="157:11" pos:end="157:51">(<expr pos:start="157:12" pos:end="157:50"><call pos:start="157:12" pos:end="157:44"><name pos:start="157:12" pos:end="157:33">vc1_parse_frame_header</name><argument_list pos:start="157:34" pos:end="157:44">(<argument pos:start="157:35" pos:end="157:35"><expr pos:start="157:35" pos:end="157:35"><name pos:start="157:35" pos:end="157:35">v</name></expr></argument>, <argument pos:start="157:38" pos:end="157:43"><expr pos:start="157:38" pos:end="157:43"><operator pos:start="157:38" pos:end="157:38">&amp;</operator><name pos:start="157:39" pos:end="157:43"><name pos:start="157:39" pos:end="157:39">s</name><operator pos:start="157:40" pos:end="157:41">-&gt;</operator><name pos:start="157:42" pos:end="157:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="157:46" pos:end="157:47">==</operator> <operator pos:start="157:49" pos:end="157:49">-</operator><literal type="number" pos:start="157:50" pos:end="157:50">1</literal></expr>)</condition> <block pos:start="157:53" pos:end="162:9">{<block_content pos:start="160:13" pos:end="160:22">


            <return pos:start="160:13" pos:end="160:22">return <expr pos:start="160:20" pos:end="160:21"><operator pos:start="160:20" pos:end="160:20">-</operator><literal type="number" pos:start="160:21" pos:end="160:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="164:7" pos:end="173:5">else <block pos:start="164:12" pos:end="173:5">{<block_content pos:start="166:9" pos:end="171:9">

        <if_stmt pos:start="166:9" pos:end="171:9"><if pos:start="166:9" pos:end="171:9">if<condition pos:start="166:11" pos:end="166:55">(<expr pos:start="166:12" pos:end="166:54"><call pos:start="166:12" pos:end="166:48"><name pos:start="166:12" pos:end="166:37">vc1_parse_frame_header_adv</name><argument_list pos:start="166:38" pos:end="166:48">(<argument pos:start="166:39" pos:end="166:39"><expr pos:start="166:39" pos:end="166:39"><name pos:start="166:39" pos:end="166:39">v</name></expr></argument>, <argument pos:start="166:42" pos:end="166:47"><expr pos:start="166:42" pos:end="166:47"><operator pos:start="166:42" pos:end="166:42">&amp;</operator><name pos:start="166:43" pos:end="166:47"><name pos:start="166:43" pos:end="166:43">s</name><operator pos:start="166:44" pos:end="166:45">-&gt;</operator><name pos:start="166:46" pos:end="166:47">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="166:50" pos:end="166:51">==</operator> <operator pos:start="166:53" pos:end="166:53">-</operator><literal type="number" pos:start="166:54" pos:end="166:54">1</literal></expr>)</condition> <block pos:start="166:57" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:22">


            <return pos:start="169:13" pos:end="169:22">return <expr pos:start="169:20" pos:end="169:21"><operator pos:start="169:20" pos:end="169:20">-</operator><literal type="number" pos:start="169:21" pos:end="169:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="177:5" pos:end="182:5"><if pos:start="177:5" pos:end="182:5">if<condition pos:start="177:7" pos:end="177:53">(<expr pos:start="177:8" pos:end="177:52"><name pos:start="177:8" pos:end="177:19"><name pos:start="177:8" pos:end="177:8">s</name><operator pos:start="177:9" pos:end="177:10">-&gt;</operator><name pos:start="177:11" pos:end="177:19">pict_type</name></name> <operator pos:start="177:21" pos:end="177:22">!=</operator> <name pos:start="177:24" pos:end="177:32">FF_I_TYPE</name> <operator pos:start="177:34" pos:end="177:35">&amp;&amp;</operator> <operator pos:start="177:37" pos:end="177:37">!</operator><name pos:start="177:38" pos:end="177:52"><name pos:start="177:38" pos:end="177:38">v</name><operator pos:start="177:39" pos:end="177:40">-&gt;</operator><name pos:start="177:41" pos:end="177:52">res_rtm_flag</name></name></expr>)</condition><block pos:start="177:54" pos:end="182:5">{<block_content pos:start="180:9" pos:end="180:18">


        <return pos:start="180:9" pos:end="180:18">return <expr pos:start="180:16" pos:end="180:17"><operator pos:start="180:16" pos:end="180:16">-</operator><literal type="number" pos:start="180:17" pos:end="180:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="186:5" pos:end="186:22">// for hurry_up==5</comment>

    <expr_stmt pos:start="188:5" pos:end="188:47"><expr pos:start="188:5" pos:end="188:46"><name pos:start="188:5" pos:end="188:32"><name pos:start="188:5" pos:end="188:5">s</name><operator pos:start="188:6" pos:end="188:7">-&gt;</operator><name pos:start="188:8" pos:end="188:22">current_picture</name><operator pos:start="188:23" pos:end="188:23">.</operator><name pos:start="188:24" pos:end="188:32">pict_type</name></name><operator pos:start="188:33" pos:end="188:33">=</operator> <name pos:start="188:35" pos:end="188:46"><name pos:start="188:35" pos:end="188:35">s</name><operator pos:start="188:36" pos:end="188:37">-&gt;</operator><name pos:start="188:38" pos:end="188:46">pict_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="190:5" pos:end="190:60"><expr pos:start="190:5" pos:end="190:59"><name pos:start="190:5" pos:end="190:32"><name pos:start="190:5" pos:end="190:5">s</name><operator pos:start="190:6" pos:end="190:7">-&gt;</operator><name pos:start="190:8" pos:end="190:22">current_picture</name><operator pos:start="190:23" pos:end="190:23">.</operator><name pos:start="190:24" pos:end="190:32">key_frame</name></name><operator pos:start="190:33" pos:end="190:33">=</operator> <name pos:start="190:35" pos:end="190:46"><name pos:start="190:35" pos:end="190:35">s</name><operator pos:start="190:36" pos:end="190:37">-&gt;</operator><name pos:start="190:38" pos:end="190:46">pict_type</name></name> <operator pos:start="190:48" pos:end="190:49">==</operator> <name pos:start="190:51" pos:end="190:59">FF_I_TYPE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="194:5" pos:end="194:57">/* skip B-frames if we don't have reference frames */</comment>

    <if_stmt pos:start="196:5" pos:end="201:5"><if pos:start="196:5" pos:end="201:5">if<condition pos:start="196:7" pos:end="196:77">(<expr pos:start="196:8" pos:end="196:76"><name pos:start="196:8" pos:end="196:26"><name pos:start="196:8" pos:end="196:8">s</name><operator pos:start="196:9" pos:end="196:10">-&gt;</operator><name pos:start="196:11" pos:end="196:26">last_picture_ptr</name></name><operator pos:start="196:27" pos:end="196:28">==</operator><name pos:start="196:29" pos:end="196:32">NULL</name> <operator pos:start="196:34" pos:end="196:35">&amp;&amp;</operator> <operator pos:start="196:37" pos:end="196:37">(</operator><name pos:start="196:38" pos:end="196:49"><name pos:start="196:38" pos:end="196:38">s</name><operator pos:start="196:39" pos:end="196:40">-&gt;</operator><name pos:start="196:41" pos:end="196:49">pict_type</name></name><operator pos:start="196:50" pos:end="196:51">==</operator><name pos:start="196:52" pos:end="196:60">FF_B_TYPE</name> <operator pos:start="196:62" pos:end="196:63">||</operator> <name pos:start="196:65" pos:end="196:75"><name pos:start="196:65" pos:end="196:65">s</name><operator pos:start="196:66" pos:end="196:67">-&gt;</operator><name pos:start="196:68" pos:end="196:75">dropable</name></name><operator pos:start="196:76" pos:end="196:76">)</operator></expr>)</condition><block pos:start="196:78" pos:end="201:5">{<block_content pos:start="199:9" pos:end="199:18">


        <return pos:start="199:9" pos:end="199:18">return <expr pos:start="199:16" pos:end="199:17"><operator pos:start="199:16" pos:end="199:16">-</operator><literal type="number" pos:start="199:17" pos:end="199:17">1</literal></expr>;</return><comment type="line" pos:start="199:19" pos:end="199:29">//buf_size;</comment>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="203:5" pos:end="203:44">/* skip b frames if we are in a hurry */</comment>

    <if_stmt pos:start="205:5" pos:end="205:61"><if pos:start="205:5" pos:end="205:61">if<condition pos:start="205:7" pos:end="205:50">(<expr pos:start="205:8" pos:end="205:49"><name pos:start="205:8" pos:end="205:22"><name pos:start="205:8" pos:end="205:12">avctx</name><operator pos:start="205:13" pos:end="205:14">-&gt;</operator><name pos:start="205:15" pos:end="205:22">hurry_up</name></name> <operator pos:start="205:24" pos:end="205:25">&amp;&amp;</operator> <name pos:start="205:27" pos:end="205:38"><name pos:start="205:27" pos:end="205:27">s</name><operator pos:start="205:28" pos:end="205:29">-&gt;</operator><name pos:start="205:30" pos:end="205:38">pict_type</name></name><operator pos:start="205:39" pos:end="205:40">==</operator><name pos:start="205:41" pos:end="205:49">FF_B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="205:52" pos:end="205:61"><block_content pos:start="205:52" pos:end="205:61"> <return pos:start="205:52" pos:end="205:61">return <expr pos:start="205:59" pos:end="205:60"><operator pos:start="205:59" pos:end="205:59">-</operator><literal type="number" pos:start="205:60" pos:end="205:60">1</literal></expr>;</return></block_content></block></if></if_stmt><comment type="line" pos:start="205:62" pos:end="205:72">//buf_size;</comment>

    <if_stmt pos:start="207:5" pos:end="216:5"><if pos:start="207:5" pos:end="216:5">if<condition pos:start="207:7" pos:end="211:46">(   <expr pos:start="207:11" pos:end="211:45"><operator pos:start="207:11" pos:end="207:11">(</operator><name pos:start="207:12" pos:end="207:28"><name pos:start="207:12" pos:end="207:16">avctx</name><operator pos:start="207:17" pos:end="207:18">-&gt;</operator><name pos:start="207:19" pos:end="207:28">skip_frame</name></name> <operator pos:start="207:30" pos:end="207:31">&gt;=</operator> <name pos:start="207:33" pos:end="207:48">AVDISCARD_NONREF</name> <operator pos:start="207:50" pos:end="207:51">&amp;&amp;</operator> <name pos:start="207:53" pos:end="207:64"><name pos:start="207:53" pos:end="207:53">s</name><operator pos:start="207:54" pos:end="207:55">-&gt;</operator><name pos:start="207:56" pos:end="207:64">pict_type</name></name><operator pos:start="207:65" pos:end="207:66">==</operator><name pos:start="207:67" pos:end="207:75">FF_B_TYPE</name><operator pos:start="207:76" pos:end="207:76">)</operator>

       <operator pos:start="209:8" pos:end="209:9">||</operator> <operator pos:start="209:11" pos:end="209:11">(</operator><name pos:start="209:12" pos:end="209:28"><name pos:start="209:12" pos:end="209:16">avctx</name><operator pos:start="209:17" pos:end="209:18">-&gt;</operator><name pos:start="209:19" pos:end="209:28">skip_frame</name></name> <operator pos:start="209:30" pos:end="209:31">&gt;=</operator> <name pos:start="209:33" pos:end="209:48">AVDISCARD_NONKEY</name> <operator pos:start="209:50" pos:end="209:51">&amp;&amp;</operator> <name pos:start="209:53" pos:end="209:64"><name pos:start="209:53" pos:end="209:53">s</name><operator pos:start="209:54" pos:end="209:55">-&gt;</operator><name pos:start="209:56" pos:end="209:64">pict_type</name></name><operator pos:start="209:65" pos:end="209:66">!=</operator><name pos:start="209:67" pos:end="209:75">FF_I_TYPE</name><operator pos:start="209:76" pos:end="209:76">)</operator>

       <operator pos:start="211:8" pos:end="211:9">||</operator>  <name pos:start="211:12" pos:end="211:28"><name pos:start="211:12" pos:end="211:16">avctx</name><operator pos:start="211:17" pos:end="211:18">-&gt;</operator><name pos:start="211:19" pos:end="211:28">skip_frame</name></name> <operator pos:start="211:30" pos:end="211:31">&gt;=</operator> <name pos:start="211:33" pos:end="211:45">AVDISCARD_ALL</name></expr>)</condition> <block pos:start="211:48" pos:end="216:5">{<block_content pos:start="214:9" pos:end="214:24">


        <return pos:start="214:9" pos:end="214:24">return <expr pos:start="214:16" pos:end="214:23"><name pos:start="214:16" pos:end="214:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="218:5" pos:end="218:49">/* skip everything if we are in a hurry&gt;=5 */</comment>

    <if_stmt pos:start="220:5" pos:end="225:5"><if pos:start="220:5" pos:end="225:5">if<condition pos:start="220:7" pos:end="220:26">(<expr pos:start="220:8" pos:end="220:25"><name pos:start="220:8" pos:end="220:22"><name pos:start="220:8" pos:end="220:12">avctx</name><operator pos:start="220:13" pos:end="220:14">-&gt;</operator><name pos:start="220:15" pos:end="220:22">hurry_up</name></name><operator pos:start="220:23" pos:end="220:24">&gt;=</operator><literal type="number" pos:start="220:25" pos:end="220:25">5</literal></expr>)</condition> <block pos:start="220:28" pos:end="225:5">{<block_content pos:start="223:9" pos:end="223:18">


        <return pos:start="223:9" pos:end="223:18">return <expr pos:start="223:16" pos:end="223:17"><operator pos:start="223:16" pos:end="223:16">-</operator><literal type="number" pos:start="223:17" pos:end="223:17">1</literal></expr>;</return><comment type="line" pos:start="223:19" pos:end="223:29">//buf_size;</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="229:5" pos:end="239:5"><if pos:start="229:5" pos:end="239:5">if<condition pos:start="229:7" pos:end="229:31">(<expr pos:start="229:8" pos:end="229:30"><name pos:start="229:8" pos:end="229:30"><name pos:start="229:8" pos:end="229:8">s</name><operator pos:start="229:9" pos:end="229:10">-&gt;</operator><name pos:start="229:11" pos:end="229:30">next_p_frame_damaged</name></name></expr>)</condition><block pos:start="229:32" pos:end="239:5">{<block_content pos:start="231:9" pos:end="237:38">

        <if_stmt pos:start="231:9" pos:end="237:38"><if pos:start="231:9" pos:end="233:28">if<condition pos:start="231:11" pos:end="231:35">(<expr pos:start="231:12" pos:end="231:34"><name pos:start="231:12" pos:end="231:23"><name pos:start="231:12" pos:end="231:12">s</name><operator pos:start="231:13" pos:end="231:14">-&gt;</operator><name pos:start="231:15" pos:end="231:23">pict_type</name></name><operator pos:start="231:24" pos:end="231:25">==</operator><name pos:start="231:26" pos:end="231:34">FF_B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="233:13" pos:end="233:28"><block_content pos:start="233:13" pos:end="233:28">

            <return pos:start="233:13" pos:end="233:28">return <expr pos:start="233:20" pos:end="233:27"><name pos:start="233:20" pos:end="233:27">buf_size</name></expr>;</return></block_content></block></if>

        <else pos:start="235:9" pos:end="237:38">else<block type="pseudo" pos:start="237:13" pos:end="237:38"><block_content pos:start="237:13" pos:end="237:38">

            <expr_stmt pos:start="237:13" pos:end="237:38"><expr pos:start="237:13" pos:end="237:37"><name pos:start="237:13" pos:end="237:35"><name pos:start="237:13" pos:end="237:13">s</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:35">next_p_frame_damaged</name></name><operator pos:start="237:36" pos:end="237:36">=</operator><literal type="number" pos:start="237:37" pos:end="237:37">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="243:5" pos:end="248:5"><if pos:start="243:5" pos:end="248:5">if<condition pos:start="243:7" pos:end="243:37">(<expr pos:start="243:8" pos:end="243:36"><call pos:start="243:8" pos:end="243:32"><name pos:start="243:8" pos:end="243:22">MPV_frame_start</name><argument_list pos:start="243:23" pos:end="243:32">(<argument pos:start="243:24" pos:end="243:24"><expr pos:start="243:24" pos:end="243:24"><name pos:start="243:24" pos:end="243:24">s</name></expr></argument>, <argument pos:start="243:27" pos:end="243:31"><expr pos:start="243:27" pos:end="243:31"><name pos:start="243:27" pos:end="243:31">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="243:34" pos:end="243:34">&lt;</operator> <literal type="number" pos:start="243:36" pos:end="243:36">0</literal></expr>)</condition> <block pos:start="243:39" pos:end="248:5">{<block_content pos:start="246:9" pos:end="246:18">


        <return pos:start="246:9" pos:end="246:18">return <expr pos:start="246:16" pos:end="246:17"><operator pos:start="246:16" pos:end="246:16">-</operator><literal type="number" pos:start="246:17" pos:end="246:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="252:5" pos:end="252:47"><expr pos:start="252:5" pos:end="252:46"><name pos:start="252:5" pos:end="252:18"><name pos:start="252:5" pos:end="252:5">s</name><operator pos:start="252:6" pos:end="252:7">-&gt;</operator><name pos:start="252:8" pos:end="252:9">me</name><operator pos:start="252:10" pos:end="252:10">.</operator><name pos:start="252:11" pos:end="252:18">qpel_put</name></name><operator pos:start="252:19" pos:end="252:19">=</operator> <name pos:start="252:21" pos:end="252:46"><name pos:start="252:21" pos:end="252:21">s</name><operator pos:start="252:22" pos:end="252:23">-&gt;</operator><name pos:start="252:24" pos:end="252:26">dsp</name><operator pos:start="252:27" pos:end="252:27">.</operator><name pos:start="252:28" pos:end="252:46">put_qpel_pixels_tab</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="254:5" pos:end="254:47"><expr pos:start="254:5" pos:end="254:46"><name pos:start="254:5" pos:end="254:18"><name pos:start="254:5" pos:end="254:5">s</name><operator pos:start="254:6" pos:end="254:7">-&gt;</operator><name pos:start="254:8" pos:end="254:9">me</name><operator pos:start="254:10" pos:end="254:10">.</operator><name pos:start="254:11" pos:end="254:18">qpel_avg</name></name><operator pos:start="254:19" pos:end="254:19">=</operator> <name pos:start="254:21" pos:end="254:46"><name pos:start="254:21" pos:end="254:21">s</name><operator pos:start="254:22" pos:end="254:23">-&gt;</operator><name pos:start="254:24" pos:end="254:26">dsp</name><operator pos:start="254:27" pos:end="254:27">.</operator><name pos:start="254:28" pos:end="254:46">avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="258:5" pos:end="258:25"><expr pos:start="258:5" pos:end="258:24"><call pos:start="258:5" pos:end="258:24"><name pos:start="258:5" pos:end="258:21">ff_er_frame_start</name><argument_list pos:start="258:22" pos:end="258:24">(<argument pos:start="258:23" pos:end="258:23"><expr pos:start="258:23" pos:end="258:23"><name pos:start="258:23" pos:end="258:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="262:5" pos:end="262:27"><expr pos:start="262:5" pos:end="262:26"><name pos:start="262:5" pos:end="262:11"><name pos:start="262:5" pos:end="262:5">v</name><operator pos:start="262:6" pos:end="262:7">-&gt;</operator><name pos:start="262:8" pos:end="262:11">bits</name></name> <operator pos:start="262:13" pos:end="262:13">=</operator> <name pos:start="262:15" pos:end="262:22">buf_size</name> <operator pos:start="262:24" pos:end="262:24">*</operator> <literal type="number" pos:start="262:26" pos:end="262:26">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="264:5" pos:end="264:25"><expr pos:start="264:5" pos:end="264:24"><call pos:start="264:5" pos:end="264:24"><name pos:start="264:5" pos:end="264:21">vc1_decode_blocks</name><argument_list pos:start="264:22" pos:end="264:24">(<argument pos:start="264:23" pos:end="264:23"><expr pos:start="264:23" pos:end="264:23"><name pos:start="264:23" pos:end="264:23">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="266:1" pos:end="266:93">//av_log(s-&gt;avctx, AV_LOG_INFO, "Consumed %i/%i bits\n", get_bits_count(&amp;s-&gt;gb), buf_size*8);</comment>

<comment type="line" pos:start="268:1" pos:end="268:45">//  if(get_bits_count(&amp;s-&gt;gb) &gt; buf_size * 8)</comment>

<comment type="line" pos:start="270:1" pos:end="270:18">//      return -1;</comment>

    <expr_stmt pos:start="272:5" pos:end="272:23"><expr pos:start="272:5" pos:end="272:22"><call pos:start="272:5" pos:end="272:22"><name pos:start="272:5" pos:end="272:19">ff_er_frame_end</name><argument_list pos:start="272:20" pos:end="272:22">(<argument pos:start="272:21" pos:end="272:21"><expr pos:start="272:21" pos:end="272:21"><name pos:start="272:21" pos:end="272:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="276:5" pos:end="276:21"><expr pos:start="276:5" pos:end="276:20"><call pos:start="276:5" pos:end="276:20"><name pos:start="276:5" pos:end="276:17">MPV_frame_end</name><argument_list pos:start="276:18" pos:end="276:20">(<argument pos:start="276:19" pos:end="276:19"><expr pos:start="276:19" pos:end="276:19"><name pos:start="276:19" pos:end="276:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt pos:start="280:1" pos:end="280:74"><expr pos:start="280:1" pos:end="280:73"><call pos:start="280:1" pos:end="280:73"><name pos:start="280:1" pos:end="280:6">assert</name><argument_list pos:start="280:7" pos:end="280:73">(<argument pos:start="280:8" pos:end="280:72"><expr pos:start="280:8" pos:end="280:72"><name pos:start="280:8" pos:end="280:35"><name pos:start="280:8" pos:end="280:8">s</name><operator pos:start="280:9" pos:end="280:10">-&gt;</operator><name pos:start="280:11" pos:end="280:25">current_picture</name><operator pos:start="280:26" pos:end="280:26">.</operator><name pos:start="280:27" pos:end="280:35">pict_type</name></name> <operator pos:start="280:37" pos:end="280:38">==</operator> <name pos:start="280:40" pos:end="280:72"><name pos:start="280:40" pos:end="280:40">s</name><operator pos:start="280:41" pos:end="280:42">-&gt;</operator><name pos:start="280:43" pos:end="280:61">current_picture_ptr</name><operator pos:start="280:62" pos:end="280:63">-&gt;</operator><name pos:start="280:64" pos:end="280:72">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt pos:start="282:1" pos:end="282:53"><expr pos:start="282:1" pos:end="282:52"><call pos:start="282:1" pos:end="282:52"><name pos:start="282:1" pos:end="282:6">assert</name><argument_list pos:start="282:7" pos:end="282:52">(<argument pos:start="282:8" pos:end="282:51"><expr pos:start="282:8" pos:end="282:51"><name pos:start="282:8" pos:end="282:35"><name pos:start="282:8" pos:end="282:8">s</name><operator pos:start="282:9" pos:end="282:10">-&gt;</operator><name pos:start="282:11" pos:end="282:25">current_picture</name><operator pos:start="282:26" pos:end="282:26">.</operator><name pos:start="282:27" pos:end="282:35">pict_type</name></name> <operator pos:start="282:37" pos:end="282:38">==</operator> <name pos:start="282:40" pos:end="282:51"><name pos:start="282:40" pos:end="282:40">s</name><operator pos:start="282:41" pos:end="282:42">-&gt;</operator><name pos:start="282:43" pos:end="282:51">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="284:5" pos:end="292:5"><if pos:start="284:5" pos:end="288:5">if <condition pos:start="284:8" pos:end="284:50">(<expr pos:start="284:9" pos:end="284:49"><name pos:start="284:9" pos:end="284:20"><name pos:start="284:9" pos:end="284:9">s</name><operator pos:start="284:10" pos:end="284:11">-&gt;</operator><name pos:start="284:12" pos:end="284:20">pict_type</name></name> <operator pos:start="284:22" pos:end="284:23">==</operator> <name pos:start="284:25" pos:end="284:33">FF_B_TYPE</name> <operator pos:start="284:35" pos:end="284:36">||</operator> <name pos:start="284:38" pos:end="284:49"><name pos:start="284:38" pos:end="284:38">s</name><operator pos:start="284:39" pos:end="284:40">-&gt;</operator><name pos:start="284:41" pos:end="284:49">low_delay</name></name></expr>)</condition> <block pos:start="284:52" pos:end="288:5">{<block_content pos:start="286:9" pos:end="286:49">

        <expr_stmt pos:start="286:9" pos:end="286:49"><expr pos:start="286:9" pos:end="286:48"><operator pos:start="286:9" pos:end="286:9">*</operator><name pos:start="286:10" pos:end="286:13">pict</name><operator pos:start="286:14" pos:end="286:14">=</operator> <operator pos:start="286:16" pos:end="286:16">*</operator><operator pos:start="286:17" pos:end="286:17">(</operator><name pos:start="286:18" pos:end="286:24">AVFrame</name><operator pos:start="286:25" pos:end="286:25">*</operator><operator pos:start="286:26" pos:end="286:26">)</operator><name pos:start="286:27" pos:end="286:48"><name pos:start="286:27" pos:end="286:27">s</name><operator pos:start="286:28" pos:end="286:29">-&gt;</operator><name pos:start="286:30" pos:end="286:48">current_picture_ptr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="288:7" pos:end="292:5">else if <condition pos:start="288:15" pos:end="288:43">(<expr pos:start="288:16" pos:end="288:42"><name pos:start="288:16" pos:end="288:34"><name pos:start="288:16" pos:end="288:16">s</name><operator pos:start="288:17" pos:end="288:18">-&gt;</operator><name pos:start="288:19" pos:end="288:34">last_picture_ptr</name></name> <operator pos:start="288:36" pos:end="288:37">!=</operator> <name pos:start="288:39" pos:end="288:42">NULL</name></expr>)</condition> <block pos:start="288:45" pos:end="292:5">{<block_content pos:start="290:9" pos:end="290:46">

        <expr_stmt pos:start="290:9" pos:end="290:46"><expr pos:start="290:9" pos:end="290:45"><operator pos:start="290:9" pos:end="290:9">*</operator><name pos:start="290:10" pos:end="290:13">pict</name><operator pos:start="290:14" pos:end="290:14">=</operator> <operator pos:start="290:16" pos:end="290:16">*</operator><operator pos:start="290:17" pos:end="290:17">(</operator><name pos:start="290:18" pos:end="290:24">AVFrame</name><operator pos:start="290:25" pos:end="290:25">*</operator><operator pos:start="290:26" pos:end="290:26">)</operator><name pos:start="290:27" pos:end="290:45"><name pos:start="290:27" pos:end="290:27">s</name><operator pos:start="290:28" pos:end="290:29">-&gt;</operator><name pos:start="290:30" pos:end="290:45">last_picture_ptr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="296:5" pos:end="302:5"><if pos:start="296:5" pos:end="302:5">if<condition pos:start="296:7" pos:end="296:43">(<expr pos:start="296:8" pos:end="296:42"><name pos:start="296:8" pos:end="296:26"><name pos:start="296:8" pos:end="296:8">s</name><operator pos:start="296:9" pos:end="296:10">-&gt;</operator><name pos:start="296:11" pos:end="296:26">last_picture_ptr</name></name> <operator pos:start="296:28" pos:end="296:29">||</operator> <name pos:start="296:31" pos:end="296:42"><name pos:start="296:31" pos:end="296:31">s</name><operator pos:start="296:32" pos:end="296:33">-&gt;</operator><name pos:start="296:34" pos:end="296:42">low_delay</name></name></expr>)</condition><block pos:start="296:44" pos:end="302:5">{<block_content pos:start="298:9" pos:end="300:37">

        <expr_stmt pos:start="298:9" pos:end="298:37"><expr pos:start="298:9" pos:end="298:36"><operator pos:start="298:9" pos:end="298:9">*</operator><name pos:start="298:10" pos:end="298:18">data_size</name> <operator pos:start="298:20" pos:end="298:20">=</operator> <sizeof pos:start="298:22" pos:end="298:36">sizeof<argument_list pos:start="298:28" pos:end="298:36">(<argument pos:start="298:29" pos:end="298:35"><expr pos:start="298:29" pos:end="298:35"><name pos:start="298:29" pos:end="298:35">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="300:9" pos:end="300:37"><expr pos:start="300:9" pos:end="300:36"><call pos:start="300:9" pos:end="300:36"><name pos:start="300:9" pos:end="300:27">ff_print_debug_info</name><argument_list pos:start="300:28" pos:end="300:36">(<argument pos:start="300:29" pos:end="300:29"><expr pos:start="300:29" pos:end="300:29"><name pos:start="300:29" pos:end="300:29">s</name></expr></argument>, <argument pos:start="300:32" pos:end="300:35"><expr pos:start="300:32" pos:end="300:35"><name pos:start="300:32" pos:end="300:35">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="306:5" pos:end="306:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="308:5" pos:end="308:58">/* we subtract 1 because it is added on utils.c     */</comment>

    <expr_stmt pos:start="310:5" pos:end="310:48"><expr pos:start="310:5" pos:end="310:47"><name pos:start="310:5" pos:end="310:23"><name pos:start="310:5" pos:end="310:9">avctx</name><operator pos:start="310:10" pos:end="310:11">-&gt;</operator><name pos:start="310:12" pos:end="310:23">frame_number</name></name> <operator pos:start="310:25" pos:end="310:25">=</operator> <name pos:start="310:27" pos:end="310:43"><name pos:start="310:27" pos:end="310:27">s</name><operator pos:start="310:28" pos:end="310:29">-&gt;</operator><name pos:start="310:30" pos:end="310:43">picture_number</name></name> <operator pos:start="310:45" pos:end="310:45">-</operator> <literal type="number" pos:start="310:47" pos:end="310:47">1</literal></expr>;</expr_stmt>




    <return pos:start="315:5" pos:end="315:20">return <expr pos:start="315:12" pos:end="315:19"><name pos:start="315:12" pos:end="315:19">buf_size</name></expr>;</return>

</block_content>}</block></function></unit>
