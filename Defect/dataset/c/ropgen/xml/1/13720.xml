<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13720.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">cpu_sparc_find_by_name</name><parameter_list pos:start="1:34" pos:end="1:78">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:45">sparc_def_t</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:54">cpu_def</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:77"><decl pos:start="1:57" pos:end="1:77"><type pos:start="1:57" pos:end="1:77"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:66">char</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="205:1">{<block_content pos:start="5:5" pos:end="203:14">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:23"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:21">sparc_def_t</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:26">def</name> <init pos:start="7:28" pos:end="7:33">= <expr pos:start="7:30" pos:end="7:33"><name pos:start="7:30" pos:end="7:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:11">s</name> <init pos:start="9:13" pos:end="9:31">= <expr pos:start="9:15" pos:end="9:31"><call pos:start="9:15" pos:end="9:31"><name pos:start="9:15" pos:end="9:20">strdup</name><argument_list pos:start="9:21" pos:end="9:31">(<argument pos:start="9:22" pos:end="9:30"><expr pos:start="9:22" pos:end="9:30"><name pos:start="9:22" pos:end="9:30">cpu_model</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:20">featurestr</name></decl>, <decl pos:start="11:23" pos:end="11:44"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:27">name</name> <init pos:start="11:29" pos:end="11:44">= <expr pos:start="11:31" pos:end="11:44"><call pos:start="11:31" pos:end="11:44"><name pos:start="11:31" pos:end="11:36">strtok</name><argument_list pos:start="11:37" pos:end="11:44">(<argument pos:start="11:38" pos:end="11:38"><expr pos:start="11:38" pos:end="11:38"><name pos:start="11:38" pos:end="11:38">s</name></expr></argument>, <argument pos:start="11:41" pos:end="11:43"><expr pos:start="11:41" pos:end="11:43"><literal type="string" pos:start="11:41" pos:end="11:43">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:26">plus_features</name> <init pos:start="13:28" pos:end="13:30">= <expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:27">minus_features</name> <init pos:start="15:29" pos:end="15:31">= <expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:23">iu_version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:48"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:24">fpu_version</name></decl>, <decl pos:start="19:27" pos:end="19:37"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:27" pos:end="19:37">mmu_version</name></decl>, <decl pos:start="19:40" pos:end="19:47"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:40" pos:end="19:47">nwindows</name></decl>;</decl_stmt>



    <for pos:start="23:5" pos:end="31:5">for <control pos:start="23:9" pos:end="23:48">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:43"><expr pos:start="23:17" pos:end="23:42"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <call pos:start="23:21" pos:end="23:42"><name pos:start="23:21" pos:end="23:30">ARRAY_SIZE</name><argument_list pos:start="23:31" pos:end="23:42">(<argument pos:start="23:32" pos:end="23:41"><expr pos:start="23:32" pos:end="23:41"><name pos:start="23:32" pos:end="23:41">sparc_defs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="23:45" pos:end="23:47"><expr pos:start="23:45" pos:end="23:47"><name pos:start="23:45" pos:end="23:45">i</name><operator pos:start="23:46" pos:end="23:47">++</operator></expr></incr>)</control> <block pos:start="23:50" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:9">

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:54">(<expr pos:start="25:13" pos:end="25:53"><call pos:start="25:13" pos:end="25:48"><name pos:start="25:13" pos:end="25:22">strcasecmp</name><argument_list pos:start="25:23" pos:end="25:48">(<argument pos:start="25:24" pos:end="25:27"><expr pos:start="25:24" pos:end="25:27"><name pos:start="25:24" pos:end="25:27">name</name></expr></argument>, <argument pos:start="25:30" pos:end="25:47"><expr pos:start="25:30" pos:end="25:47"><name pos:start="25:30" pos:end="25:42"><name pos:start="25:30" pos:end="25:39">sparc_defs</name><index pos:start="25:40" pos:end="25:42">[<expr pos:start="25:41" pos:end="25:41"><name pos:start="25:41" pos:end="25:41">i</name></expr>]</index></name><operator pos:start="25:43" pos:end="25:43">.</operator><name pos:start="25:44" pos:end="25:47">name</name></expr></argument>)</argument_list></call> <operator pos:start="25:50" pos:end="25:51">==</operator> <literal type="number" pos:start="25:53" pos:end="25:53">0</literal></expr>)</condition> <block pos:start="25:56" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:33">

            <expr_stmt pos:start="27:13" pos:end="27:33"><expr pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:15">def</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <operator pos:start="27:19" pos:end="27:19">&amp;</operator><name pos:start="27:20" pos:end="27:32"><name pos:start="27:20" pos:end="27:29">sparc_defs</name><index pos:start="27:30" pos:end="27:32">[<expr pos:start="27:31" pos:end="27:31"><name pos:start="27:31" pos:end="27:31">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:12">def</name></expr>)</condition> <block pos:start="33:15" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:19">

        <goto pos:start="35:9" pos:end="35:19">goto <name pos:start="35:14" pos:end="35:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:39"><expr pos:start="39:5" pos:end="39:38"><call pos:start="39:5" pos:end="39:38"><name pos:start="39:5" pos:end="39:10">memcpy</name><argument_list pos:start="39:11" pos:end="39:38">(<argument pos:start="39:12" pos:end="39:18"><expr pos:start="39:12" pos:end="39:18"><name pos:start="39:12" pos:end="39:18">cpu_def</name></expr></argument>, <argument pos:start="39:21" pos:end="39:23"><expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">def</name></expr></argument>, <argument pos:start="39:26" pos:end="39:37"><expr pos:start="39:26" pos:end="39:37"><sizeof pos:start="39:26" pos:end="39:37">sizeof<argument_list pos:start="39:32" pos:end="39:37">(<argument pos:start="39:33" pos:end="39:36"><expr pos:start="39:33" pos:end="39:36"><operator pos:start="39:33" pos:end="39:33">*</operator><name pos:start="39:34" pos:end="39:36">def</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:35"><expr pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:14">featurestr</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="43:34"><name pos:start="43:18" pos:end="43:23">strtok</name><argument_list pos:start="43:24" pos:end="43:34">(<argument pos:start="43:25" pos:end="43:28"><expr pos:start="43:25" pos:end="43:28"><name pos:start="43:25" pos:end="43:28">NULL</name></expr></argument>, <argument pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><literal type="string" pos:start="43:31" pos:end="43:33">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="45:5" pos:end="181:5">while <condition pos:start="45:11" pos:end="45:22">(<expr pos:start="45:12" pos:end="45:21"><name pos:start="45:12" pos:end="45:21">featurestr</name></expr>)</condition> <block pos:start="45:24" pos:end="181:5">{<block_content pos:start="47:9" pos:end="179:39">

        <decl_stmt pos:start="47:9" pos:end="47:18"><decl pos:start="47:9" pos:end="47:17"><type pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:12">char</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:17">val</name></decl>;</decl_stmt>



        <if_stmt pos:start="51:9" pos:end="177:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:33">(<expr pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:22">featurestr</name><index pos:start="51:23" pos:end="51:25">[<expr pos:start="51:24" pos:end="51:24"><literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>]</index></name> <operator pos:start="51:27" pos:end="51:28">==</operator> <literal type="char" pos:start="51:30" pos:end="51:32">'+'</literal></expr>)</condition> <block pos:start="51:35" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:68">

            <expr_stmt pos:start="53:13" pos:end="53:68"><expr pos:start="53:13" pos:end="53:67"><call pos:start="53:13" pos:end="53:67"><name pos:start="53:13" pos:end="53:35">add_flagname_to_bitmaps</name><argument_list pos:start="53:36" pos:end="53:67">(<argument pos:start="53:37" pos:end="53:50"><expr pos:start="53:37" pos:end="53:50"><name pos:start="53:37" pos:end="53:46">featurestr</name> <operator pos:start="53:48" pos:end="53:48">+</operator> <literal type="number" pos:start="53:50" pos:end="53:50">1</literal></expr></argument>, <argument pos:start="53:53" pos:end="53:66"><expr pos:start="53:53" pos:end="53:66"><operator pos:start="53:53" pos:end="53:53">&amp;</operator><name pos:start="53:54" pos:end="53:66">plus_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="55:11" pos:end="59:9">else if <condition pos:start="55:19" pos:end="55:40">(<expr pos:start="55:20" pos:end="55:39"><name pos:start="55:20" pos:end="55:32"><name pos:start="55:20" pos:end="55:29">featurestr</name><index pos:start="55:30" pos:end="55:32">[<expr pos:start="55:31" pos:end="55:31"><literal type="number" pos:start="55:31" pos:end="55:31">0</literal></expr>]</index></name> <operator pos:start="55:34" pos:end="55:35">==</operator> <literal type="char" pos:start="55:37" pos:end="55:39">'-'</literal></expr>)</condition> <block pos:start="55:42" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:69">

            <expr_stmt pos:start="57:13" pos:end="57:69"><expr pos:start="57:13" pos:end="57:68"><call pos:start="57:13" pos:end="57:68"><name pos:start="57:13" pos:end="57:35">add_flagname_to_bitmaps</name><argument_list pos:start="57:36" pos:end="57:68">(<argument pos:start="57:37" pos:end="57:50"><expr pos:start="57:37" pos:end="57:50"><name pos:start="57:37" pos:end="57:46">featurestr</name> <operator pos:start="57:48" pos:end="57:48">+</operator> <literal type="number" pos:start="57:50" pos:end="57:50">1</literal></expr></argument>, <argument pos:start="57:53" pos:end="57:67"><expr pos:start="57:53" pos:end="57:67"><operator pos:start="57:53" pos:end="57:53">&amp;</operator><name pos:start="57:54" pos:end="57:67">minus_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="59:11" pos:end="169:9">else if <condition pos:start="59:19" pos:end="59:51">(<expr pos:start="59:20" pos:end="59:50"><operator pos:start="59:20" pos:end="59:20">(</operator><name pos:start="59:21" pos:end="59:23">val</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <call pos:start="59:27" pos:end="59:49"><name pos:start="59:27" pos:end="59:32">strchr</name><argument_list pos:start="59:33" pos:end="59:49">(<argument pos:start="59:34" pos:end="59:43"><expr pos:start="59:34" pos:end="59:43"><name pos:start="59:34" pos:end="59:43">featurestr</name></expr></argument>, <argument pos:start="59:46" pos:end="59:48"><expr pos:start="59:46" pos:end="59:48"><literal type="char" pos:start="59:46" pos:end="59:48">'='</literal></expr></argument>)</argument_list></call><operator pos:start="59:50" pos:end="59:50">)</operator></expr>)</condition> <block pos:start="59:53" pos:end="169:9">{<block_content pos:start="61:13" pos:end="167:13">

            <expr_stmt pos:start="61:13" pos:end="61:21"><expr pos:start="61:13" pos:end="61:20"><operator pos:start="61:13" pos:end="61:13">*</operator><name pos:start="61:14" pos:end="61:16">val</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <literal type="number" pos:start="61:20" pos:end="61:20">0</literal></expr>;</expr_stmt> <expr_stmt pos:start="61:23" pos:end="61:28"><expr pos:start="61:23" pos:end="61:27"><name pos:start="61:23" pos:end="61:25">val</name><operator pos:start="61:26" pos:end="61:27">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="167:13"><if pos:start="63:13" pos:end="87:13">if <condition pos:start="63:16" pos:end="63:50">(<expr pos:start="63:17" pos:end="63:49"><operator pos:start="63:17" pos:end="63:17">!</operator><call pos:start="63:18" pos:end="63:49"><name pos:start="63:18" pos:end="63:23">strcmp</name><argument_list pos:start="63:24" pos:end="63:49">(<argument pos:start="63:25" pos:end="63:34"><expr pos:start="63:25" pos:end="63:34"><name pos:start="63:25" pos:end="63:34">featurestr</name></expr></argument>, <argument pos:start="63:37" pos:end="63:48"><expr pos:start="63:37" pos:end="63:48"><literal type="string" pos:start="63:37" pos:end="63:48">"iu_version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:52" pos:end="87:13">{<block_content pos:start="65:17" pos:end="86:0">

                <decl_stmt pos:start="65:17" pos:end="65:26"><decl pos:start="65:17" pos:end="65:25"><type pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:20">char</name> <modifier pos:start="65:22" pos:end="65:22">*</modifier></type><name pos:start="65:23" pos:end="65:25">err</name></decl>;</decl_stmt>



                <expr_stmt pos:start="69:17" pos:end="69:51"><expr pos:start="69:17" pos:end="69:50"><name pos:start="69:17" pos:end="69:26">iu_version</name> <operator pos:start="69:28" pos:end="69:28">=</operator> <call pos:start="69:30" pos:end="69:50"><name pos:start="69:30" pos:end="69:36">strtoll</name><argument_list pos:start="69:37" pos:end="69:50">(<argument pos:start="69:38" pos:end="69:40"><expr pos:start="69:38" pos:end="69:40"><name pos:start="69:38" pos:end="69:40">val</name></expr></argument>, <argument pos:start="69:43" pos:end="69:46"><expr pos:start="69:43" pos:end="69:46"><operator pos:start="69:43" pos:end="69:43">&amp;</operator><name pos:start="69:44" pos:end="69:46">err</name></expr></argument>, <argument pos:start="69:49" pos:end="69:49"><expr pos:start="69:49" pos:end="69:49"><literal type="number" pos:start="69:49" pos:end="69:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="71:17" pos:end="77:17"><if pos:start="71:17" pos:end="77:17">if <condition pos:start="71:20" pos:end="71:34">(<expr pos:start="71:21" pos:end="71:33"><operator pos:start="71:21" pos:end="71:21">!</operator><operator pos:start="71:22" pos:end="71:22">*</operator><name pos:start="71:23" pos:end="71:25">val</name> <operator pos:start="71:27" pos:end="71:28">||</operator> <operator pos:start="71:30" pos:end="71:30">*</operator><name pos:start="71:31" pos:end="71:33">err</name></expr>)</condition> <block pos:start="71:36" pos:end="77:17">{<block_content pos:start="73:21" pos:end="75:31">

                    <expr_stmt pos:start="73:21" pos:end="73:69"><expr pos:start="73:21" pos:end="73:68"><call pos:start="73:21" pos:end="73:68"><name pos:start="73:21" pos:end="73:27">fprintf</name><argument_list pos:start="73:28" pos:end="73:68">(<argument pos:start="73:29" pos:end="73:34"><expr pos:start="73:29" pos:end="73:34"><name pos:start="73:29" pos:end="73:34">stderr</name></expr></argument>, <argument pos:start="73:37" pos:end="73:62"><expr pos:start="73:37" pos:end="73:62"><literal type="string" pos:start="73:37" pos:end="73:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="73:65" pos:end="73:67"><expr pos:start="73:65" pos:end="73:67"><name pos:start="73:65" pos:end="73:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="75:21" pos:end="75:31">goto <name pos:start="75:26" pos:end="75:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="79:17" pos:end="82:0"><expr pos:start="79:17" pos:end="79:48"><name pos:start="79:17" pos:end="79:35"><name pos:start="79:17" pos:end="79:23">cpu_def</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:35">iu_version</name></name> <operator pos:start="79:37" pos:end="79:37">=</operator> <name pos:start="79:39" pos:end="79:48">iu_version</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="81:1" pos:end="81:21">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:21">DEBUG_FEATURES</name></cpp:ifdef>

                <expr_stmt pos:start="83:17" pos:end="86:0"><expr pos:start="83:17" pos:end="83:71"><call pos:start="83:17" pos:end="83:71"><name pos:start="83:17" pos:end="83:23">fprintf</name><argument_list pos:start="83:24" pos:end="83:71">(<argument pos:start="83:25" pos:end="83:30"><expr pos:start="83:25" pos:end="83:30"><name pos:start="83:25" pos:end="83:30">stderr</name></expr></argument>, <argument pos:start="83:33" pos:end="83:58"><expr pos:start="83:33" pos:end="83:58"><literal type="string" pos:start="83:33" pos:end="83:46">"iu_version %"</literal> <name pos:start="83:48" pos:end="83:53">PRIx64</name> <literal type="string" pos:start="83:55" pos:end="83:58">"\n"</literal></expr></argument>, <argument pos:start="83:61" pos:end="83:70"><expr pos:start="83:61" pos:end="83:70"><name pos:start="83:61" pos:end="83:70">iu_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="87:15" pos:end="111:13">else if <condition pos:start="87:23" pos:end="87:58">(<expr pos:start="87:24" pos:end="87:57"><operator pos:start="87:24" pos:end="87:24">!</operator><call pos:start="87:25" pos:end="87:57"><name pos:start="87:25" pos:end="87:30">strcmp</name><argument_list pos:start="87:31" pos:end="87:57">(<argument pos:start="87:32" pos:end="87:41"><expr pos:start="87:32" pos:end="87:41"><name pos:start="87:32" pos:end="87:41">featurestr</name></expr></argument>, <argument pos:start="87:44" pos:end="87:56"><expr pos:start="87:44" pos:end="87:56"><literal type="string" pos:start="87:44" pos:end="87:56">"fpu_version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:60" pos:end="111:13">{<block_content pos:start="89:17" pos:end="110:0">

                <decl_stmt pos:start="89:17" pos:end="89:26"><decl pos:start="89:17" pos:end="89:25"><type pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:20">char</name> <modifier pos:start="89:22" pos:end="89:22">*</modifier></type><name pos:start="89:23" pos:end="89:25">err</name></decl>;</decl_stmt>



                <expr_stmt pos:start="93:17" pos:end="93:51"><expr pos:start="93:17" pos:end="93:50"><name pos:start="93:17" pos:end="93:27">fpu_version</name> <operator pos:start="93:29" pos:end="93:29">=</operator> <call pos:start="93:31" pos:end="93:50"><name pos:start="93:31" pos:end="93:36">strtol</name><argument_list pos:start="93:37" pos:end="93:50">(<argument pos:start="93:38" pos:end="93:40"><expr pos:start="93:38" pos:end="93:40"><name pos:start="93:38" pos:end="93:40">val</name></expr></argument>, <argument pos:start="93:43" pos:end="93:46"><expr pos:start="93:43" pos:end="93:46"><operator pos:start="93:43" pos:end="93:43">&amp;</operator><name pos:start="93:44" pos:end="93:46">err</name></expr></argument>, <argument pos:start="93:49" pos:end="93:49"><expr pos:start="93:49" pos:end="93:49"><literal type="number" pos:start="93:49" pos:end="93:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="95:17" pos:end="101:17"><if pos:start="95:17" pos:end="101:17">if <condition pos:start="95:20" pos:end="95:34">(<expr pos:start="95:21" pos:end="95:33"><operator pos:start="95:21" pos:end="95:21">!</operator><operator pos:start="95:22" pos:end="95:22">*</operator><name pos:start="95:23" pos:end="95:25">val</name> <operator pos:start="95:27" pos:end="95:28">||</operator> <operator pos:start="95:30" pos:end="95:30">*</operator><name pos:start="95:31" pos:end="95:33">err</name></expr>)</condition> <block pos:start="95:36" pos:end="101:17">{<block_content pos:start="97:21" pos:end="99:31">

                    <expr_stmt pos:start="97:21" pos:end="97:69"><expr pos:start="97:21" pos:end="97:68"><call pos:start="97:21" pos:end="97:68"><name pos:start="97:21" pos:end="97:27">fprintf</name><argument_list pos:start="97:28" pos:end="97:68">(<argument pos:start="97:29" pos:end="97:34"><expr pos:start="97:29" pos:end="97:34"><name pos:start="97:29" pos:end="97:34">stderr</name></expr></argument>, <argument pos:start="97:37" pos:end="97:62"><expr pos:start="97:37" pos:end="97:62"><literal type="string" pos:start="97:37" pos:end="97:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="97:65" pos:end="97:67"><expr pos:start="97:65" pos:end="97:67"><name pos:start="97:65" pos:end="97:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="99:21" pos:end="99:31">goto <name pos:start="99:26" pos:end="99:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="103:17" pos:end="106:0"><expr pos:start="103:17" pos:end="103:50"><name pos:start="103:17" pos:end="103:36"><name pos:start="103:17" pos:end="103:23">cpu_def</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:36">fpu_version</name></name> <operator pos:start="103:38" pos:end="103:38">=</operator> <name pos:start="103:40" pos:end="103:50">fpu_version</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="105:1" pos:end="105:21">#<cpp:directive pos:start="105:2" pos:end="105:6">ifdef</cpp:directive> <name pos:start="105:8" pos:end="105:21">DEBUG_FEATURES</name></cpp:ifdef>

                <expr_stmt pos:start="107:17" pos:end="110:0"><expr pos:start="107:17" pos:end="107:64"><call pos:start="107:17" pos:end="107:64"><name pos:start="107:17" pos:end="107:23">fprintf</name><argument_list pos:start="107:24" pos:end="107:64">(<argument pos:start="107:25" pos:end="107:30"><expr pos:start="107:25" pos:end="107:30"><name pos:start="107:25" pos:end="107:30">stderr</name></expr></argument>, <argument pos:start="107:33" pos:end="107:50"><expr pos:start="107:33" pos:end="107:50"><literal type="string" pos:start="107:33" pos:end="107:50">"fpu_version %x\n"</literal></expr></argument>, <argument pos:start="107:53" pos:end="107:63"><expr pos:start="107:53" pos:end="107:63"><name pos:start="107:53" pos:end="107:63">fpu_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="111:15" pos:end="135:13">else if <condition pos:start="111:23" pos:end="111:58">(<expr pos:start="111:24" pos:end="111:57"><operator pos:start="111:24" pos:end="111:24">!</operator><call pos:start="111:25" pos:end="111:57"><name pos:start="111:25" pos:end="111:30">strcmp</name><argument_list pos:start="111:31" pos:end="111:57">(<argument pos:start="111:32" pos:end="111:41"><expr pos:start="111:32" pos:end="111:41"><name pos:start="111:32" pos:end="111:41">featurestr</name></expr></argument>, <argument pos:start="111:44" pos:end="111:56"><expr pos:start="111:44" pos:end="111:56"><literal type="string" pos:start="111:44" pos:end="111:56">"mmu_version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:60" pos:end="135:13">{<block_content pos:start="113:17" pos:end="134:0">

                <decl_stmt pos:start="113:17" pos:end="113:26"><decl pos:start="113:17" pos:end="113:25"><type pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:20">char</name> <modifier pos:start="113:22" pos:end="113:22">*</modifier></type><name pos:start="113:23" pos:end="113:25">err</name></decl>;</decl_stmt>



                <expr_stmt pos:start="117:17" pos:end="117:51"><expr pos:start="117:17" pos:end="117:50"><name pos:start="117:17" pos:end="117:27">mmu_version</name> <operator pos:start="117:29" pos:end="117:29">=</operator> <call pos:start="117:31" pos:end="117:50"><name pos:start="117:31" pos:end="117:36">strtol</name><argument_list pos:start="117:37" pos:end="117:50">(<argument pos:start="117:38" pos:end="117:40"><expr pos:start="117:38" pos:end="117:40"><name pos:start="117:38" pos:end="117:40">val</name></expr></argument>, <argument pos:start="117:43" pos:end="117:46"><expr pos:start="117:43" pos:end="117:46"><operator pos:start="117:43" pos:end="117:43">&amp;</operator><name pos:start="117:44" pos:end="117:46">err</name></expr></argument>, <argument pos:start="117:49" pos:end="117:49"><expr pos:start="117:49" pos:end="117:49"><literal type="number" pos:start="117:49" pos:end="117:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="119:17" pos:end="125:17"><if pos:start="119:17" pos:end="125:17">if <condition pos:start="119:20" pos:end="119:34">(<expr pos:start="119:21" pos:end="119:33"><operator pos:start="119:21" pos:end="119:21">!</operator><operator pos:start="119:22" pos:end="119:22">*</operator><name pos:start="119:23" pos:end="119:25">val</name> <operator pos:start="119:27" pos:end="119:28">||</operator> <operator pos:start="119:30" pos:end="119:30">*</operator><name pos:start="119:31" pos:end="119:33">err</name></expr>)</condition> <block pos:start="119:36" pos:end="125:17">{<block_content pos:start="121:21" pos:end="123:31">

                    <expr_stmt pos:start="121:21" pos:end="121:69"><expr pos:start="121:21" pos:end="121:68"><call pos:start="121:21" pos:end="121:68"><name pos:start="121:21" pos:end="121:27">fprintf</name><argument_list pos:start="121:28" pos:end="121:68">(<argument pos:start="121:29" pos:end="121:34"><expr pos:start="121:29" pos:end="121:34"><name pos:start="121:29" pos:end="121:34">stderr</name></expr></argument>, <argument pos:start="121:37" pos:end="121:62"><expr pos:start="121:37" pos:end="121:62"><literal type="string" pos:start="121:37" pos:end="121:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="121:65" pos:end="121:67"><expr pos:start="121:65" pos:end="121:67"><name pos:start="121:65" pos:end="121:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="123:21" pos:end="123:31">goto <name pos:start="123:26" pos:end="123:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="127:17" pos:end="130:0"><expr pos:start="127:17" pos:end="127:50"><name pos:start="127:17" pos:end="127:36"><name pos:start="127:17" pos:end="127:23">cpu_def</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:36">mmu_version</name></name> <operator pos:start="127:38" pos:end="127:38">=</operator> <name pos:start="127:40" pos:end="127:50">mmu_version</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="129:1" pos:end="129:21">#<cpp:directive pos:start="129:2" pos:end="129:6">ifdef</cpp:directive> <name pos:start="129:8" pos:end="129:21">DEBUG_FEATURES</name></cpp:ifdef>

                <expr_stmt pos:start="131:17" pos:end="134:0"><expr pos:start="131:17" pos:end="131:64"><call pos:start="131:17" pos:end="131:64"><name pos:start="131:17" pos:end="131:23">fprintf</name><argument_list pos:start="131:24" pos:end="131:64">(<argument pos:start="131:25" pos:end="131:30"><expr pos:start="131:25" pos:end="131:30"><name pos:start="131:25" pos:end="131:30">stderr</name></expr></argument>, <argument pos:start="131:33" pos:end="131:50"><expr pos:start="131:33" pos:end="131:50"><literal type="string" pos:start="131:33" pos:end="131:50">"mmu_version %x\n"</literal></expr></argument>, <argument pos:start="131:53" pos:end="131:63"><expr pos:start="131:53" pos:end="131:63"><name pos:start="131:53" pos:end="131:63">mmu_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="135:15" pos:end="161:13">else if <condition pos:start="135:23" pos:end="135:55">(<expr pos:start="135:24" pos:end="135:54"><operator pos:start="135:24" pos:end="135:24">!</operator><call pos:start="135:25" pos:end="135:54"><name pos:start="135:25" pos:end="135:30">strcmp</name><argument_list pos:start="135:31" pos:end="135:54">(<argument pos:start="135:32" pos:end="135:41"><expr pos:start="135:32" pos:end="135:41"><name pos:start="135:32" pos:end="135:41">featurestr</name></expr></argument>, <argument pos:start="135:44" pos:end="135:53"><expr pos:start="135:44" pos:end="135:53"><literal type="string" pos:start="135:44" pos:end="135:53">"nwindows"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:57" pos:end="161:13">{<block_content pos:start="137:17" pos:end="160:0">

                <decl_stmt pos:start="137:17" pos:end="137:26"><decl pos:start="137:17" pos:end="137:25"><type pos:start="137:17" pos:end="137:22"><name pos:start="137:17" pos:end="137:20">char</name> <modifier pos:start="137:22" pos:end="137:22">*</modifier></type><name pos:start="137:23" pos:end="137:25">err</name></decl>;</decl_stmt>



                <expr_stmt pos:start="141:17" pos:end="141:48"><expr pos:start="141:17" pos:end="141:47"><name pos:start="141:17" pos:end="141:24">nwindows</name> <operator pos:start="141:26" pos:end="141:26">=</operator> <call pos:start="141:28" pos:end="141:47"><name pos:start="141:28" pos:end="141:33">strtol</name><argument_list pos:start="141:34" pos:end="141:47">(<argument pos:start="141:35" pos:end="141:37"><expr pos:start="141:35" pos:end="141:37"><name pos:start="141:35" pos:end="141:37">val</name></expr></argument>, <argument pos:start="141:40" pos:end="141:43"><expr pos:start="141:40" pos:end="141:43"><operator pos:start="141:40" pos:end="141:40">&amp;</operator><name pos:start="141:41" pos:end="141:43">err</name></expr></argument>, <argument pos:start="141:46" pos:end="141:46"><expr pos:start="141:46" pos:end="141:46"><literal type="number" pos:start="141:46" pos:end="141:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="143:17" pos:end="151:17"><if pos:start="143:17" pos:end="151:17">if <condition pos:start="143:20" pos:end="145:44">(<expr pos:start="143:21" pos:end="145:43"><operator pos:start="143:21" pos:end="143:21">!</operator><operator pos:start="143:22" pos:end="143:22">*</operator><name pos:start="143:23" pos:end="143:25">val</name> <operator pos:start="143:27" pos:end="143:28">||</operator> <operator pos:start="143:30" pos:end="143:30">*</operator><name pos:start="143:31" pos:end="143:33">err</name> <operator pos:start="143:35" pos:end="143:36">||</operator> <name pos:start="143:38" pos:end="143:45">nwindows</name> <operator pos:start="143:47" pos:end="143:47">&gt;</operator> <name pos:start="143:49" pos:end="143:60">MAX_NWINDOWS</name> <operator pos:start="143:62" pos:end="143:63">||</operator>

                    <name pos:start="145:21" pos:end="145:28">nwindows</name> <operator pos:start="145:30" pos:end="145:30">&lt;</operator> <name pos:start="145:32" pos:end="145:43">MIN_NWINDOWS</name></expr>)</condition> <block pos:start="145:46" pos:end="151:17">{<block_content pos:start="147:21" pos:end="149:31">

                    <expr_stmt pos:start="147:21" pos:end="147:69"><expr pos:start="147:21" pos:end="147:68"><call pos:start="147:21" pos:end="147:68"><name pos:start="147:21" pos:end="147:27">fprintf</name><argument_list pos:start="147:28" pos:end="147:68">(<argument pos:start="147:29" pos:end="147:34"><expr pos:start="147:29" pos:end="147:34"><name pos:start="147:29" pos:end="147:34">stderr</name></expr></argument>, <argument pos:start="147:37" pos:end="147:62"><expr pos:start="147:37" pos:end="147:62"><literal type="string" pos:start="147:37" pos:end="147:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="147:65" pos:end="147:67"><expr pos:start="147:65" pos:end="147:67"><name pos:start="147:65" pos:end="147:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="149:21" pos:end="149:31">goto <name pos:start="149:26" pos:end="149:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="153:17" pos:end="156:0"><expr pos:start="153:17" pos:end="153:44"><name pos:start="153:17" pos:end="153:33"><name pos:start="153:17" pos:end="153:23">cpu_def</name><operator pos:start="153:24" pos:end="153:25">-&gt;</operator><name pos:start="153:26" pos:end="153:33">nwindows</name></name> <operator pos:start="153:35" pos:end="153:35">=</operator> <name pos:start="153:37" pos:end="153:44">nwindows</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="155:1" pos:end="155:21">#<cpp:directive pos:start="155:2" pos:end="155:6">ifdef</cpp:directive> <name pos:start="155:8" pos:end="155:21">DEBUG_FEATURES</name></cpp:ifdef>

                <expr_stmt pos:start="157:17" pos:end="160:0"><expr pos:start="157:17" pos:end="157:58"><call pos:start="157:17" pos:end="157:58"><name pos:start="157:17" pos:end="157:23">fprintf</name><argument_list pos:start="157:24" pos:end="157:58">(<argument pos:start="157:25" pos:end="157:30"><expr pos:start="157:25" pos:end="157:30"><name pos:start="157:25" pos:end="157:30">stderr</name></expr></argument>, <argument pos:start="157:33" pos:end="157:47"><expr pos:start="157:33" pos:end="157:47"><literal type="string" pos:start="157:33" pos:end="157:47">"nwindows %d\n"</literal></expr></argument>, <argument pos:start="157:50" pos:end="157:57"><expr pos:start="157:50" pos:end="157:57"><name pos:start="157:50" pos:end="157:57">nwindows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="161:15" pos:end="167:13">else <block pos:start="161:20" pos:end="167:13">{<block_content pos:start="163:17" pos:end="165:27">

                <expr_stmt pos:start="163:17" pos:end="163:73"><expr pos:start="163:17" pos:end="163:72"><call pos:start="163:17" pos:end="163:72"><name pos:start="163:17" pos:end="163:23">fprintf</name><argument_list pos:start="163:24" pos:end="163:72">(<argument pos:start="163:25" pos:end="163:30"><expr pos:start="163:25" pos:end="163:30"><name pos:start="163:25" pos:end="163:30">stderr</name></expr></argument>, <argument pos:start="163:33" pos:end="163:59"><expr pos:start="163:33" pos:end="163:59"><literal type="string" pos:start="163:33" pos:end="163:59">"unrecognized feature %s\n"</literal></expr></argument>, <argument pos:start="163:62" pos:end="163:71"><expr pos:start="163:62" pos:end="163:71"><name pos:start="163:62" pos:end="163:71">featurestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="165:17" pos:end="165:27">goto <name pos:start="165:22" pos:end="165:26">error</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="169:11" pos:end="177:9">else <block pos:start="169:16" pos:end="177:9">{<block_content pos:start="171:13" pos:end="175:23">

            <expr_stmt pos:start="171:13" pos:end="173:69"><expr pos:start="171:13" pos:end="173:68"><call pos:start="171:13" pos:end="173:68"><name pos:start="171:13" pos:end="171:19">fprintf</name><argument_list pos:start="171:20" pos:end="173:68">(<argument pos:start="171:21" pos:end="171:26"><expr pos:start="171:21" pos:end="171:26"><name pos:start="171:21" pos:end="171:26">stderr</name></expr></argument>, <argument pos:start="171:29" pos:end="173:55"><expr pos:start="171:29" pos:end="173:55"><literal type="string" pos:start="171:29" pos:end="171:64">"feature string `%s' not in format "</literal>

                    <literal type="string" pos:start="173:21" pos:end="173:55">"(+feature|-feature|feature=xyz)\n"</literal></expr></argument>, <argument pos:start="173:58" pos:end="173:67"><expr pos:start="173:58" pos:end="173:67"><name pos:start="173:58" pos:end="173:67">featurestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="175:13" pos:end="175:23">goto <name pos:start="175:18" pos:end="175:22">error</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:39"><expr pos:start="179:9" pos:end="179:38"><name pos:start="179:9" pos:end="179:18">featurestr</name> <operator pos:start="179:20" pos:end="179:20">=</operator> <call pos:start="179:22" pos:end="179:38"><name pos:start="179:22" pos:end="179:27">strtok</name><argument_list pos:start="179:28" pos:end="179:38">(<argument pos:start="179:29" pos:end="179:32"><expr pos:start="179:29" pos:end="179:32"><name pos:start="179:29" pos:end="179:32">NULL</name></expr></argument>, <argument pos:start="179:35" pos:end="179:37"><expr pos:start="179:35" pos:end="179:37"><literal type="string" pos:start="179:35" pos:end="179:37">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="183:5" pos:end="183:39"><expr pos:start="183:5" pos:end="183:38"><name pos:start="183:5" pos:end="183:21"><name pos:start="183:5" pos:end="183:11">cpu_def</name><operator pos:start="183:12" pos:end="183:13">-&gt;</operator><name pos:start="183:14" pos:end="183:21">features</name></name> <operator pos:start="183:23" pos:end="183:24">|=</operator> <name pos:start="183:26" pos:end="183:38">plus_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="188:0"><expr pos:start="185:5" pos:end="185:40"><name pos:start="185:5" pos:end="185:21"><name pos:start="185:5" pos:end="185:11">cpu_def</name><operator pos:start="185:12" pos:end="185:13">-&gt;</operator><name pos:start="185:14" pos:end="185:21">features</name></name> <operator pos:start="185:23" pos:end="185:24">&amp;=</operator> <operator pos:start="185:26" pos:end="185:26">~</operator><name pos:start="185:27" pos:end="185:40">minus_features</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="187:1" pos:end="187:21">#<cpp:directive pos:start="187:2" pos:end="187:6">ifdef</cpp:directive> <name pos:start="187:8" pos:end="187:21">DEBUG_FEATURES</name></cpp:ifdef>

    <expr_stmt pos:start="189:5" pos:end="192:0"><expr pos:start="189:5" pos:end="189:60"><call pos:start="189:5" pos:end="189:60"><name pos:start="189:5" pos:end="189:18">print_features</name><argument_list pos:start="189:19" pos:end="189:60">(<argument pos:start="189:20" pos:end="189:25"><expr pos:start="189:20" pos:end="189:25"><name pos:start="189:20" pos:end="189:25">stderr</name></expr></argument>, <argument pos:start="189:28" pos:end="189:34"><expr pos:start="189:28" pos:end="189:34"><name pos:start="189:28" pos:end="189:34">fprintf</name></expr></argument>, <argument pos:start="189:37" pos:end="189:53"><expr pos:start="189:37" pos:end="189:53"><name pos:start="189:37" pos:end="189:53"><name pos:start="189:37" pos:end="189:43">cpu_def</name><operator pos:start="189:44" pos:end="189:45">-&gt;</operator><name pos:start="189:46" pos:end="189:53">features</name></name></expr></argument>, <argument pos:start="189:56" pos:end="189:59"><expr pos:start="189:56" pos:end="189:59"><name pos:start="189:56" pos:end="189:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="193:5" pos:end="193:12"><expr pos:start="193:5" pos:end="193:11"><call pos:start="193:5" pos:end="193:11"><name pos:start="193:5" pos:end="193:8">free</name><argument_list pos:start="193:9" pos:end="193:11">(<argument pos:start="193:10" pos:end="193:10"><expr pos:start="193:10" pos:end="193:10"><name pos:start="193:10" pos:end="193:10">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="195:5" pos:end="195:13">return <expr pos:start="195:12" pos:end="195:12"><literal type="number" pos:start="195:12" pos:end="195:12">0</literal></expr>;</return>



 <label pos:start="199:2" pos:end="199:7"><name pos:start="199:2" pos:end="199:6">error</name>:</label>

    <expr_stmt pos:start="201:5" pos:end="201:12"><expr pos:start="201:5" pos:end="201:11"><call pos:start="201:5" pos:end="201:11"><name pos:start="201:5" pos:end="201:8">free</name><argument_list pos:start="201:9" pos:end="201:11">(<argument pos:start="201:10" pos:end="201:10"><expr pos:start="201:10" pos:end="201:10"><name pos:start="201:10" pos:end="201:10">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="203:5" pos:end="203:14">return <expr pos:start="203:12" pos:end="203:13"><operator pos:start="203:12" pos:end="203:12">-</operator><literal type="number" pos:start="203:13" pos:end="203:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
