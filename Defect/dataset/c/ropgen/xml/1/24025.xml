<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24025.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:35"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">chr_read</name><parameter_list pos:start="1:21" pos:end="1:64">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:25">void</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:33">opaque</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:53"><decl pos:start="1:36" pos:end="1:53"><type pos:start="1:36" pos:end="1:53"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:48">uint8_t</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">buf</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:63"><decl pos:start="1:56" pos:end="1:63"><type pos:start="1:56" pos:end="1:63"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:63">size</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="87:35">{<block_content pos:start="3:5" pos:end="87:35">
    <decl_stmt pos:start="3:5" pos:end="3:27"><decl pos:start="3:5" pos:end="3:26"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:14">TestServer</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:17">s</name> <init pos:start="3:19" pos:end="3:26">= <expr pos:start="3:21" pos:end="3:26"><name pos:start="3:21" pos:end="3:26">opaque</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:34"><decl pos:start="4:5" pos:end="4:33"><type pos:start="4:5" pos:end="4:21"><name pos:start="4:5" pos:end="4:19">CharDriverState</name> <modifier pos:start="4:21" pos:end="4:21">*</modifier></type><name pos:start="4:22" pos:end="4:24">chr</name> <init pos:start="4:26" pos:end="4:33">= <expr pos:start="4:28" pos:end="4:33"><name pos:start="4:28" pos:end="4:33"><name pos:start="4:28" pos:end="4:28">s</name><operator pos:start="4:29" pos:end="4:30">-&gt;</operator><name pos:start="4:31" pos:end="4:33">chr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">VhostUserMsg</name></type> <name pos:start="5:18" pos:end="5:20">msg</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:34"><decl pos:start="6:5" pos:end="6:33"><type pos:start="6:5" pos:end="6:13"><name pos:start="6:5" pos:end="6:11">uint8_t</name> <modifier pos:start="6:13" pos:end="6:13">*</modifier></type><name pos:start="6:14" pos:end="6:14">p</name> <init pos:start="6:16" pos:end="6:33">= <expr pos:start="6:18" pos:end="6:33"><operator pos:start="6:18" pos:end="6:18">(</operator><name pos:start="6:19" pos:end="6:25">uint8_t</name> <operator pos:start="6:27" pos:end="6:27">*</operator><operator pos:start="6:28" pos:end="6:28">)</operator> <operator pos:start="6:30" pos:end="6:30">&amp;</operator><name pos:start="6:31" pos:end="6:33">msg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>;</decl_stmt>
    <if_stmt pos:start="8:5" pos:end="87:35"><if pos:start="8:5" pos:end="87:35">if <condition pos:start="8:8" pos:end="8:36">(<expr pos:start="8:9" pos:end="8:35"><name pos:start="8:9" pos:end="8:12">size</name> <operator pos:start="8:14" pos:end="8:15">!=</operator> <name pos:start="8:17" pos:end="8:35">VHOST_USER_HDR_SIZE</name></expr>)</condition> <block pos:start="8:38" pos:end="87:35">{<block_content pos:start="9:9" pos:end="87:35">
        <expr_stmt pos:start="9:9" pos:end="9:65"><expr pos:start="9:9" pos:end="9:64"><call pos:start="9:9" pos:end="9:64"><name pos:start="9:9" pos:end="9:22">g_test_message</name><argument_list pos:start="9:23" pos:end="9:64">(<argument pos:start="9:24" pos:end="9:57"><expr pos:start="9:24" pos:end="9:57"><literal type="string" pos:start="9:24" pos:end="9:57">"Wrong message size received %d\n"</literal></expr></argument>, <argument pos:start="9:60" pos:end="9:63"><expr pos:start="9:60" pos:end="9:63"><name pos:start="9:60" pos:end="9:63">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="10:9" pos:end="10:15">return;</return>
    <expr_stmt pos:start="11:5" pos:end="11:33"><expr pos:start="11:5" pos:end="11:32"><call pos:start="11:5" pos:end="11:32"><name pos:start="11:5" pos:end="11:16">g_mutex_lock</name><argument_list pos:start="11:17" pos:end="11:32">(<argument pos:start="11:18" pos:end="11:31"><expr pos:start="11:18" pos:end="11:31"><operator pos:start="11:18" pos:end="11:18">&amp;</operator><name pos:start="11:19" pos:end="11:31"><name pos:start="11:19" pos:end="11:19">s</name><operator pos:start="11:20" pos:end="11:21">-&gt;</operator><name pos:start="11:22" pos:end="11:31">data_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:40"><expr pos:start="12:5" pos:end="12:39"><call pos:start="12:5" pos:end="12:39"><name pos:start="12:5" pos:end="12:10">memcpy</name><argument_list pos:start="12:11" pos:end="12:39">(<argument pos:start="12:12" pos:end="12:12"><expr pos:start="12:12" pos:end="12:12"><name pos:start="12:12" pos:end="12:12">p</name></expr></argument>, <argument pos:start="12:15" pos:end="12:17"><expr pos:start="12:15" pos:end="12:17"><name pos:start="12:15" pos:end="12:17">buf</name></expr></argument>, <argument pos:start="12:20" pos:end="12:38"><expr pos:start="12:20" pos:end="12:38"><name pos:start="12:20" pos:end="12:38">VHOST_USER_HDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="13:5" pos:end="87:35"><if pos:start="13:5" pos:end="87:35">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:11">msg</name><operator pos:start="13:12" pos:end="13:12">.</operator><name pos:start="13:13" pos:end="13:16">size</name></name></expr>)</condition> <block pos:start="13:19" pos:end="87:35">{<block_content pos:start="14:9" pos:end="87:35">
        <expr_stmt pos:start="14:9" pos:end="14:33"><expr pos:start="14:9" pos:end="14:32"><name pos:start="14:9" pos:end="14:9">p</name> <operator pos:start="14:11" pos:end="14:12">+=</operator> <name pos:start="14:14" pos:end="14:32">VHOST_USER_HDR_SIZE</name></expr>;</expr_stmt>
        <expr_stmt pos:start="15:9" pos:end="15:54"><expr pos:start="15:9" pos:end="15:53"><name pos:start="15:9" pos:end="15:12">size</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:53"><name pos:start="15:16" pos:end="15:35">qemu_chr_fe_read_all</name><argument_list pos:start="15:36" pos:end="15:53">(<argument pos:start="15:37" pos:end="15:39"><expr pos:start="15:37" pos:end="15:39"><name pos:start="15:37" pos:end="15:39">chr</name></expr></argument>, <argument pos:start="15:42" pos:end="15:42"><expr pos:start="15:42" pos:end="15:42"><name pos:start="15:42" pos:end="15:42">p</name></expr></argument>, <argument pos:start="15:45" pos:end="15:52"><expr pos:start="15:45" pos:end="15:52"><name pos:start="15:45" pos:end="15:52"><name pos:start="15:45" pos:end="15:47">msg</name><operator pos:start="15:48" pos:end="15:48">.</operator><name pos:start="15:49" pos:end="15:52">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="16:9" pos:end="87:35"><if pos:start="16:9" pos:end="87:35">if <condition pos:start="16:12" pos:end="16:29">(<expr pos:start="16:13" pos:end="16:28"><name pos:start="16:13" pos:end="16:16">size</name> <operator pos:start="16:18" pos:end="16:19">!=</operator> <name pos:start="16:21" pos:end="16:28"><name pos:start="16:21" pos:end="16:23">msg</name><operator pos:start="16:24" pos:end="16:24">.</operator><name pos:start="16:25" pos:end="16:28">size</name></name></expr>)</condition> <block pos:start="16:31" pos:end="87:35">{<block_content pos:start="17:13" pos:end="87:35">
            <expr_stmt pos:start="17:13" pos:end="18:43"><expr pos:start="17:13" pos:end="18:42"><call pos:start="17:13" pos:end="18:42"><name pos:start="17:13" pos:end="17:26">g_test_message</name><argument_list pos:start="17:27" pos:end="18:42">(<argument pos:start="17:28" pos:end="17:67"><expr pos:start="17:28" pos:end="17:67"><literal type="string" pos:start="17:28" pos:end="17:67">"Wrong message size received %d != %d\n"</literal></expr></argument>,
                           <argument pos:start="18:28" pos:end="18:31"><expr pos:start="18:28" pos:end="18:31"><name pos:start="18:28" pos:end="18:31">size</name></expr></argument>, <argument pos:start="18:34" pos:end="18:41"><expr pos:start="18:34" pos:end="18:41"><name pos:start="18:34" pos:end="18:41"><name pos:start="18:34" pos:end="18:36">msg</name><operator pos:start="18:37" pos:end="18:37">.</operator><name pos:start="18:38" pos:end="18:41">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="19:13" pos:end="19:19">return;</return>
    <switch pos:start="20:5" pos:end="87:35">switch <condition pos:start="20:12" pos:end="20:24">(<expr pos:start="20:13" pos:end="20:23"><name pos:start="20:13" pos:end="20:23"><name pos:start="20:13" pos:end="20:15">msg</name><operator pos:start="20:16" pos:end="20:16">.</operator><name pos:start="20:17" pos:end="20:23">request</name></name></expr>)</condition> <block pos:start="20:26" pos:end="87:35">{<block_content pos:start="21:5" pos:end="87:35">
    <case pos:start="21:5" pos:end="21:33">case <expr pos:start="21:10" pos:end="21:32"><name pos:start="21:10" pos:end="21:32">VHOST_USER_GET_FEATURES</name></expr>:</case>
        <comment type="block" pos:start="22:9" pos:end="22:40">/* send back features to qemu */</comment>
        <expr_stmt pos:start="23:9" pos:end="23:43"><expr pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:11">msg</name><operator pos:start="23:12" pos:end="23:12">.</operator><name pos:start="23:13" pos:end="23:17">flags</name></name> <operator pos:start="23:19" pos:end="23:20">|=</operator> <name pos:start="23:22" pos:end="23:42">VHOST_USER_REPLY_MASK</name></expr>;</expr_stmt>
        <expr_stmt pos:start="24:9" pos:end="24:41"><expr pos:start="24:9" pos:end="24:40"><name pos:start="24:9" pos:end="24:16"><name pos:start="24:9" pos:end="24:11">msg</name><operator pos:start="24:12" pos:end="24:12">.</operator><name pos:start="24:13" pos:end="24:16">size</name></name> <operator pos:start="24:18" pos:end="24:18">=</operator> <sizeof pos:start="24:20" pos:end="24:40">sizeof<argument_list pos:start="24:26" pos:end="24:40">(<argument pos:start="24:27" pos:end="24:39"><expr pos:start="24:27" pos:end="24:39"><name pos:start="24:27" pos:end="24:39"><name pos:start="24:27" pos:end="24:27">m</name><operator pos:start="24:28" pos:end="24:28">.</operator><name pos:start="24:29" pos:end="24:35">payload</name><operator pos:start="24:36" pos:end="24:36">.</operator><name pos:start="24:37" pos:end="24:39">u64</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt pos:start="25:9" pos:end="26:53"><expr pos:start="25:9" pos:end="26:52"><name pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:11">msg</name><operator pos:start="25:12" pos:end="25:12">.</operator><name pos:start="25:13" pos:end="25:19">payload</name><operator pos:start="25:20" pos:end="25:20">.</operator><name pos:start="25:21" pos:end="25:23">u64</name></name> <operator pos:start="25:25" pos:end="25:25">=</operator> <literal type="number" pos:start="25:27" pos:end="25:32">0x1ULL</literal> <operator pos:start="25:34" pos:end="25:35">&lt;&lt;</operator> <name pos:start="25:37" pos:end="25:51">VHOST_F_LOG_ALL</name> <operator pos:start="25:53" pos:end="25:53">|</operator>
            <literal type="number" pos:start="26:13" pos:end="26:18">0x1ULL</literal> <operator pos:start="26:20" pos:end="26:21">&lt;&lt;</operator> <name pos:start="26:23" pos:end="26:52">VHOST_USER_F_PROTOCOL_FEATURES</name></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:29"><expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:9">p</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:20">uint8_t</name> <operator pos:start="27:22" pos:end="27:22">*</operator><operator pos:start="27:23" pos:end="27:23">)</operator> <operator pos:start="27:25" pos:end="27:25">&amp;</operator><name pos:start="27:26" pos:end="27:28">msg</name></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:70"><expr pos:start="28:9" pos:end="28:69"><call pos:start="28:9" pos:end="28:69"><name pos:start="28:9" pos:end="28:29">qemu_chr_fe_write_all</name><argument_list pos:start="28:30" pos:end="28:69">(<argument pos:start="28:31" pos:end="28:33"><expr pos:start="28:31" pos:end="28:33"><name pos:start="28:31" pos:end="28:33">chr</name></expr></argument>, <argument pos:start="28:36" pos:end="28:36"><expr pos:start="28:36" pos:end="28:36"><name pos:start="28:36" pos:end="28:36">p</name></expr></argument>, <argument pos:start="28:39" pos:end="28:68"><expr pos:start="28:39" pos:end="28:68"><name pos:start="28:39" pos:end="28:57">VHOST_USER_HDR_SIZE</name> <operator pos:start="28:59" pos:end="28:59">+</operator> <name pos:start="28:61" pos:end="28:68"><name pos:start="28:61" pos:end="28:63">msg</name><operator pos:start="28:64" pos:end="28:64">.</operator><name pos:start="28:65" pos:end="28:68">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="29:9" pos:end="29:14">break;</break>
    <case pos:start="30:5" pos:end="30:33">case <expr pos:start="30:10" pos:end="30:32"><name pos:start="30:10" pos:end="30:32">VHOST_USER_SET_FEATURES</name></expr>:</case>
	<expr_stmt pos:start="31:9" pos:end="32:34"><expr pos:start="31:9" pos:end="32:33"><call pos:start="31:9" pos:end="32:33"><name pos:start="31:9" pos:end="31:23">g_assert_cmpint</name><argument_list pos:start="31:24" pos:end="32:33">(<argument pos:start="31:25" pos:end="31:84"><expr pos:start="31:25" pos:end="31:84"><name pos:start="31:25" pos:end="31:39"><name pos:start="31:25" pos:end="31:27">msg</name><operator pos:start="31:28" pos:end="31:28">.</operator><name pos:start="31:29" pos:end="31:35">payload</name><operator pos:start="31:36" pos:end="31:36">.</operator><name pos:start="31:37" pos:end="31:39">u64</name></name> <operator pos:start="31:41" pos:end="31:41">&amp;</operator> <operator pos:start="31:43" pos:end="31:43">(</operator><literal type="number" pos:start="31:44" pos:end="31:49">0x1ULL</literal> <operator pos:start="31:51" pos:end="31:52">&lt;&lt;</operator> <name pos:start="31:54" pos:end="31:83">VHOST_USER_F_PROTOCOL_FEATURES</name><operator pos:start="31:84" pos:end="31:84">)</operator></expr></argument>,
			<argument pos:start="32:25" pos:end="32:26"><expr pos:start="32:25" pos:end="32:26"><operator pos:start="32:25" pos:end="32:26">!=</operator></expr></argument>, <argument pos:start="32:29" pos:end="32:32"><expr pos:start="32:29" pos:end="32:32"><literal type="number" pos:start="32:29" pos:end="32:32">0ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="33:9" pos:end="33:14">break;</break>
    <case pos:start="34:5" pos:end="34:42">case <expr pos:start="34:10" pos:end="34:41"><name pos:start="34:10" pos:end="34:41">VHOST_USER_GET_PROTOCOL_FEATURES</name></expr>:</case>
        <comment type="block" pos:start="35:9" pos:end="35:40">/* send back features to qemu */</comment>
        <expr_stmt pos:start="36:9" pos:end="36:43"><expr pos:start="36:9" pos:end="36:42"><name pos:start="36:9" pos:end="36:17"><name pos:start="36:9" pos:end="36:11">msg</name><operator pos:start="36:12" pos:end="36:12">.</operator><name pos:start="36:13" pos:end="36:17">flags</name></name> <operator pos:start="36:19" pos:end="36:20">|=</operator> <name pos:start="36:22" pos:end="36:42">VHOST_USER_REPLY_MASK</name></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:11">msg</name><operator pos:start="37:12" pos:end="37:12">.</operator><name pos:start="37:13" pos:end="37:16">size</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <sizeof pos:start="37:20" pos:end="37:40">sizeof<argument_list pos:start="37:26" pos:end="37:40">(<argument pos:start="37:27" pos:end="37:39"><expr pos:start="37:27" pos:end="37:39"><name pos:start="37:27" pos:end="37:39"><name pos:start="37:27" pos:end="37:27">m</name><operator pos:start="37:28" pos:end="37:28">.</operator><name pos:start="37:29" pos:end="37:35">payload</name><operator pos:start="37:36" pos:end="37:36">.</operator><name pos:start="37:37" pos:end="37:39">u64</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt pos:start="38:9" pos:end="38:63"><expr pos:start="38:9" pos:end="38:62"><name pos:start="38:9" pos:end="38:23"><name pos:start="38:9" pos:end="38:11">msg</name><operator pos:start="38:12" pos:end="38:12">.</operator><name pos:start="38:13" pos:end="38:19">payload</name><operator pos:start="38:20" pos:end="38:20">.</operator><name pos:start="38:21" pos:end="38:23">u64</name></name> <operator pos:start="38:25" pos:end="38:25">=</operator> <literal type="number" pos:start="38:27" pos:end="38:27">1</literal> <operator pos:start="38:29" pos:end="38:30">&lt;&lt;</operator> <name pos:start="38:32" pos:end="38:62">VHOST_USER_PROTOCOL_F_LOG_SHMFD</name></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:9">p</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:20">uint8_t</name> <operator pos:start="39:22" pos:end="39:22">*</operator><operator pos:start="39:23" pos:end="39:23">)</operator> <operator pos:start="39:25" pos:end="39:25">&amp;</operator><name pos:start="39:26" pos:end="39:28">msg</name></expr>;</expr_stmt>
        <expr_stmt pos:start="40:9" pos:end="40:70"><expr pos:start="40:9" pos:end="40:69"><call pos:start="40:9" pos:end="40:69"><name pos:start="40:9" pos:end="40:29">qemu_chr_fe_write_all</name><argument_list pos:start="40:30" pos:end="40:69">(<argument pos:start="40:31" pos:end="40:33"><expr pos:start="40:31" pos:end="40:33"><name pos:start="40:31" pos:end="40:33">chr</name></expr></argument>, <argument pos:start="40:36" pos:end="40:36"><expr pos:start="40:36" pos:end="40:36"><name pos:start="40:36" pos:end="40:36">p</name></expr></argument>, <argument pos:start="40:39" pos:end="40:68"><expr pos:start="40:39" pos:end="40:68"><name pos:start="40:39" pos:end="40:57">VHOST_USER_HDR_SIZE</name> <operator pos:start="40:59" pos:end="40:59">+</operator> <name pos:start="40:61" pos:end="40:68"><name pos:start="40:61" pos:end="40:63">msg</name><operator pos:start="40:64" pos:end="40:64">.</operator><name pos:start="40:65" pos:end="40:68">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="41:9" pos:end="41:14">break;</break>
    <case pos:start="42:5" pos:end="42:35">case <expr pos:start="42:10" pos:end="42:34"><name pos:start="42:10" pos:end="42:34">VHOST_USER_GET_VRING_BASE</name></expr>:</case>
        <comment type="block" pos:start="43:9" pos:end="43:42">/* send back vring base to qemu */</comment>
        <expr_stmt pos:start="44:9" pos:end="44:43"><expr pos:start="44:9" pos:end="44:42"><name pos:start="44:9" pos:end="44:17"><name pos:start="44:9" pos:end="44:11">msg</name><operator pos:start="44:12" pos:end="44:12">.</operator><name pos:start="44:13" pos:end="44:17">flags</name></name> <operator pos:start="44:19" pos:end="44:20">|=</operator> <name pos:start="44:22" pos:end="44:42">VHOST_USER_REPLY_MASK</name></expr>;</expr_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:43"><expr pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:11">msg</name><operator pos:start="45:12" pos:end="45:12">.</operator><name pos:start="45:13" pos:end="45:16">size</name></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <sizeof pos:start="45:20" pos:end="45:42">sizeof<argument_list pos:start="45:26" pos:end="45:42">(<argument pos:start="45:27" pos:end="45:41"><expr pos:start="45:27" pos:end="45:41"><name pos:start="45:27" pos:end="45:41"><name pos:start="45:27" pos:end="45:27">m</name><operator pos:start="45:28" pos:end="45:28">.</operator><name pos:start="45:29" pos:end="45:35">payload</name><operator pos:start="45:36" pos:end="45:36">.</operator><name pos:start="45:37" pos:end="45:41">state</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:34"><expr pos:start="46:9" pos:end="46:33"><name pos:start="46:9" pos:end="46:29"><name pos:start="46:9" pos:end="46:11">msg</name><operator pos:start="46:12" pos:end="46:12">.</operator><name pos:start="46:13" pos:end="46:19">payload</name><operator pos:start="46:20" pos:end="46:20">.</operator><name pos:start="46:21" pos:end="46:25">state</name><operator pos:start="46:26" pos:end="46:26">.</operator><name pos:start="46:27" pos:end="46:29">num</name></name> <operator pos:start="46:31" pos:end="46:31">=</operator> <literal type="number" pos:start="46:33" pos:end="46:33">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:9">p</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:20">uint8_t</name> <operator pos:start="47:22" pos:end="47:22">*</operator><operator pos:start="47:23" pos:end="47:23">)</operator> <operator pos:start="47:25" pos:end="47:25">&amp;</operator><name pos:start="47:26" pos:end="47:28">msg</name></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:70"><expr pos:start="48:9" pos:end="48:69"><call pos:start="48:9" pos:end="48:69"><name pos:start="48:9" pos:end="48:29">qemu_chr_fe_write_all</name><argument_list pos:start="48:30" pos:end="48:69">(<argument pos:start="48:31" pos:end="48:33"><expr pos:start="48:31" pos:end="48:33"><name pos:start="48:31" pos:end="48:33">chr</name></expr></argument>, <argument pos:start="48:36" pos:end="48:36"><expr pos:start="48:36" pos:end="48:36"><name pos:start="48:36" pos:end="48:36">p</name></expr></argument>, <argument pos:start="48:39" pos:end="48:68"><expr pos:start="48:39" pos:end="48:68"><name pos:start="48:39" pos:end="48:57">VHOST_USER_HDR_SIZE</name> <operator pos:start="48:59" pos:end="48:59">+</operator> <name pos:start="48:61" pos:end="48:68"><name pos:start="48:61" pos:end="48:63">msg</name><operator pos:start="48:64" pos:end="48:64">.</operator><name pos:start="48:65" pos:end="48:68">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="49:9" pos:end="49:44"><expr pos:start="49:9" pos:end="49:43"><call pos:start="49:9" pos:end="49:43"><name pos:start="49:9" pos:end="49:14">assert</name><argument_list pos:start="49:15" pos:end="49:43">(<argument pos:start="49:16" pos:end="49:42"><expr pos:start="49:16" pos:end="49:42"><name pos:start="49:16" pos:end="49:38"><name pos:start="49:16" pos:end="49:18">msg</name><operator pos:start="49:19" pos:end="49:19">.</operator><name pos:start="49:20" pos:end="49:26">payload</name><operator pos:start="49:27" pos:end="49:27">.</operator><name pos:start="49:28" pos:end="49:32">state</name><operator pos:start="49:33" pos:end="49:33">.</operator><name pos:start="49:34" pos:end="49:38">index</name></name> <operator pos:start="49:40" pos:end="49:40">&lt;</operator> <literal type="number" pos:start="49:42" pos:end="49:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="50:9" pos:end="50:57"><expr pos:start="50:9" pos:end="50:56"><name pos:start="50:9" pos:end="50:16"><name pos:start="50:9" pos:end="50:9">s</name><operator pos:start="50:10" pos:end="50:11">-&gt;</operator><name pos:start="50:12" pos:end="50:16">rings</name></name> <operator pos:start="50:18" pos:end="50:19">&amp;=</operator> <operator pos:start="50:21" pos:end="50:21">~</operator><operator pos:start="50:22" pos:end="50:22">(</operator><literal type="number" pos:start="50:23" pos:end="50:28">0x1ULL</literal> <operator pos:start="50:30" pos:end="50:31">&lt;&lt;</operator> <name pos:start="50:33" pos:end="50:55"><name pos:start="50:33" pos:end="50:35">msg</name><operator pos:start="50:36" pos:end="50:36">.</operator><name pos:start="50:37" pos:end="50:43">payload</name><operator pos:start="50:44" pos:end="50:44">.</operator><name pos:start="50:45" pos:end="50:49">state</name><operator pos:start="50:50" pos:end="50:50">.</operator><name pos:start="50:51" pos:end="50:55">index</name></name><operator pos:start="50:56" pos:end="50:56">)</operator></expr>;</expr_stmt>
        <break pos:start="51:9" pos:end="51:14">break;</break>
    <case pos:start="52:5" pos:end="52:34">case <expr pos:start="52:10" pos:end="52:33"><name pos:start="52:10" pos:end="52:33">VHOST_USER_SET_MEM_TABLE</name></expr>:</case>
        <comment type="block" pos:start="53:9" pos:end="53:36">/* received the mem table */</comment>
        <expr_stmt pos:start="54:9" pos:end="54:76"><expr pos:start="54:9" pos:end="54:75"><call pos:start="54:9" pos:end="54:75"><name pos:start="54:9" pos:end="54:14">memcpy</name><argument_list pos:start="54:15" pos:end="54:75">(<argument pos:start="54:16" pos:end="54:25"><expr pos:start="54:16" pos:end="54:25"><operator pos:start="54:16" pos:end="54:16">&amp;</operator><name pos:start="54:17" pos:end="54:25"><name pos:start="54:17" pos:end="54:17">s</name><operator pos:start="54:18" pos:end="54:19">-&gt;</operator><name pos:start="54:20" pos:end="54:25">memory</name></name></expr></argument>, <argument pos:start="54:28" pos:end="54:46"><expr pos:start="54:28" pos:end="54:46"><operator pos:start="54:28" pos:end="54:28">&amp;</operator><name pos:start="54:29" pos:end="54:46"><name pos:start="54:29" pos:end="54:31">msg</name><operator pos:start="54:32" pos:end="54:32">.</operator><name pos:start="54:33" pos:end="54:39">payload</name><operator pos:start="54:40" pos:end="54:40">.</operator><name pos:start="54:41" pos:end="54:46">memory</name></name></expr></argument>, <argument pos:start="54:49" pos:end="54:74"><expr pos:start="54:49" pos:end="54:74"><sizeof pos:start="54:49" pos:end="54:74">sizeof<argument_list pos:start="54:55" pos:end="54:74">(<argument pos:start="54:56" pos:end="54:73"><expr pos:start="54:56" pos:end="54:73"><name pos:start="54:56" pos:end="54:73"><name pos:start="54:56" pos:end="54:58">msg</name><operator pos:start="54:59" pos:end="54:59">.</operator><name pos:start="54:60" pos:end="54:66">payload</name><operator pos:start="54:67" pos:end="54:67">.</operator><name pos:start="54:68" pos:end="54:73">memory</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="55:9" pos:end="55:79"><expr pos:start="55:9" pos:end="55:78"><name pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:18">fds_num</name></name> <operator pos:start="55:20" pos:end="55:20">=</operator> <call pos:start="55:22" pos:end="55:78"><name pos:start="55:22" pos:end="55:43">qemu_chr_fe_get_msgfds</name><argument_list pos:start="55:44" pos:end="55:78">(<argument pos:start="55:45" pos:end="55:47"><expr pos:start="55:45" pos:end="55:47"><name pos:start="55:45" pos:end="55:47">chr</name></expr></argument>, <argument pos:start="55:50" pos:end="55:55"><expr pos:start="55:50" pos:end="55:55"><name pos:start="55:50" pos:end="55:55"><name pos:start="55:50" pos:end="55:50">s</name><operator pos:start="55:51" pos:end="55:52">-&gt;</operator><name pos:start="55:53" pos:end="55:55">fds</name></name></expr></argument>, <argument pos:start="55:58" pos:end="55:77"><expr pos:start="55:58" pos:end="55:77"><call pos:start="55:58" pos:end="55:77"><name pos:start="55:58" pos:end="55:69">G_N_ELEMENTS</name><argument_list pos:start="55:70" pos:end="55:77">(<argument pos:start="55:71" pos:end="55:76"><expr pos:start="55:71" pos:end="55:76"><name pos:start="55:71" pos:end="55:76"><name pos:start="55:71" pos:end="55:71">s</name><operator pos:start="55:72" pos:end="55:73">-&gt;</operator><name pos:start="55:74" pos:end="55:76">fds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="56:9" pos:end="56:50">/* signal the test that it can continue */</comment>
        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><call pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:21">g_cond_signal</name><argument_list pos:start="57:22" pos:end="57:36">(<argument pos:start="57:23" pos:end="57:35"><expr pos:start="57:23" pos:end="57:35"><operator pos:start="57:23" pos:end="57:23">&amp;</operator><name pos:start="57:24" pos:end="57:35"><name pos:start="57:24" pos:end="57:24">s</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:35">data_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="58:9" pos:end="58:14">break;</break>
    <case pos:start="59:5" pos:end="59:35">case <expr pos:start="59:10" pos:end="59:34"><name pos:start="59:10" pos:end="59:34">VHOST_USER_SET_VRING_KICK</name></expr>:</case>
    <case pos:start="60:5" pos:end="60:35">case <expr pos:start="60:10" pos:end="60:34"><name pos:start="60:10" pos:end="60:34">VHOST_USER_SET_VRING_CALL</name></expr>:</case>
        <comment type="block" pos:start="61:9" pos:end="61:28">/* consume the fd */</comment>
        <expr_stmt pos:start="62:9" pos:end="62:44"><expr pos:start="62:9" pos:end="62:43"><call pos:start="62:9" pos:end="62:43"><name pos:start="62:9" pos:end="62:30">qemu_chr_fe_get_msgfds</name><argument_list pos:start="62:31" pos:end="62:43">(<argument pos:start="62:32" pos:end="62:34"><expr pos:start="62:32" pos:end="62:34"><name pos:start="62:32" pos:end="62:34">chr</name></expr></argument>, <argument pos:start="62:37" pos:end="62:39"><expr pos:start="62:37" pos:end="62:39"><operator pos:start="62:37" pos:end="62:37">&amp;</operator><name pos:start="62:38" pos:end="62:39">fd</name></expr></argument>, <argument pos:start="62:42" pos:end="62:42"><expr pos:start="62:42" pos:end="62:42"><literal type="number" pos:start="62:42" pos:end="62:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="63:9" pos:end="67:11">/*
         * This is a non-blocking eventfd.
         * The receive function forces it to be blocking,
         * so revert it back to non-blocking.
         */</comment>
        <expr_stmt pos:start="68:9" pos:end="68:30"><expr pos:start="68:9" pos:end="68:29"><call pos:start="68:9" pos:end="68:29"><name pos:start="68:9" pos:end="68:25">qemu_set_nonblock</name><argument_list pos:start="68:26" pos:end="68:29">(<argument pos:start="68:27" pos:end="68:28"><expr pos:start="68:27" pos:end="68:28"><name pos:start="68:27" pos:end="68:28">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="69:9" pos:end="69:14">break;</break>
    <case pos:start="70:5" pos:end="70:33">case <expr pos:start="70:10" pos:end="70:32"><name pos:start="70:10" pos:end="70:32">VHOST_USER_SET_LOG_BASE</name></expr>:</case>
        <if_stmt pos:start="71:9" pos:end="87:35"><if pos:start="71:9" pos:end="87:35">if <condition pos:start="71:12" pos:end="71:28">(<expr pos:start="71:13" pos:end="71:27"><name pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:21">log_fd</name></name> <operator pos:start="71:23" pos:end="71:24">!=</operator> <operator pos:start="71:26" pos:end="71:26">-</operator><literal type="number" pos:start="71:27" pos:end="71:27">1</literal></expr>)</condition> <block pos:start="71:30" pos:end="87:35">{<block_content pos:start="72:13" pos:end="87:35">
            <expr_stmt pos:start="72:13" pos:end="72:29"><expr pos:start="72:13" pos:end="72:28"><call pos:start="72:13" pos:end="72:28"><name pos:start="72:13" pos:end="72:17">close</name><argument_list pos:start="72:18" pos:end="72:28">(<argument pos:start="72:19" pos:end="72:27"><expr pos:start="72:19" pos:end="72:27"><name pos:start="72:19" pos:end="72:27"><name pos:start="72:19" pos:end="72:19">s</name><operator pos:start="72:20" pos:end="72:21">-&gt;</operator><name pos:start="72:22" pos:end="72:27">log_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="73:13" pos:end="73:27"><expr pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:21">log_fd</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <operator pos:start="73:25" pos:end="73:25">-</operator><literal type="number" pos:start="73:26" pos:end="73:26">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="74:9" pos:end="74:51"><expr pos:start="74:9" pos:end="74:50"><call pos:start="74:9" pos:end="74:50"><name pos:start="74:9" pos:end="74:30">qemu_chr_fe_get_msgfds</name><argument_list pos:start="74:31" pos:end="74:50">(<argument pos:start="74:32" pos:end="74:34"><expr pos:start="74:32" pos:end="74:34"><name pos:start="74:32" pos:end="74:34">chr</name></expr></argument>, <argument pos:start="74:37" pos:end="74:46"><expr pos:start="74:37" pos:end="74:46"><operator pos:start="74:37" pos:end="74:37">&amp;</operator><name pos:start="74:38" pos:end="74:46"><name pos:start="74:38" pos:end="74:38">s</name><operator pos:start="74:39" pos:end="74:40">-&gt;</operator><name pos:start="74:41" pos:end="74:46">log_fd</name></name></expr></argument>, <argument pos:start="74:49" pos:end="74:49"><expr pos:start="74:49" pos:end="74:49"><literal type="number" pos:start="74:49" pos:end="74:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="75:9" pos:end="75:43"><expr pos:start="75:9" pos:end="75:42"><name pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:11">msg</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:17">flags</name></name> <operator pos:start="75:19" pos:end="75:20">|=</operator> <name pos:start="75:22" pos:end="75:42">VHOST_USER_REPLY_MASK</name></expr>;</expr_stmt>
        <expr_stmt pos:start="76:9" pos:end="76:21"><expr pos:start="76:9" pos:end="76:20"><name pos:start="76:9" pos:end="76:16"><name pos:start="76:9" pos:end="76:11">msg</name><operator pos:start="76:12" pos:end="76:12">.</operator><name pos:start="76:13" pos:end="76:16">size</name></name> <operator pos:start="76:18" pos:end="76:18">=</operator> <literal type="number" pos:start="76:20" pos:end="76:20">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="77:9" pos:end="77:29"><expr pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:9">p</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:20">uint8_t</name> <operator pos:start="77:22" pos:end="77:22">*</operator><operator pos:start="77:23" pos:end="77:23">)</operator> <operator pos:start="77:25" pos:end="77:25">&amp;</operator><name pos:start="77:26" pos:end="77:28">msg</name></expr>;</expr_stmt>
        <expr_stmt pos:start="78:9" pos:end="78:59"><expr pos:start="78:9" pos:end="78:58"><call pos:start="78:9" pos:end="78:58"><name pos:start="78:9" pos:end="78:29">qemu_chr_fe_write_all</name><argument_list pos:start="78:30" pos:end="78:58">(<argument pos:start="78:31" pos:end="78:33"><expr pos:start="78:31" pos:end="78:33"><name pos:start="78:31" pos:end="78:33">chr</name></expr></argument>, <argument pos:start="78:36" pos:end="78:36"><expr pos:start="78:36" pos:end="78:36"><name pos:start="78:36" pos:end="78:36">p</name></expr></argument>, <argument pos:start="78:39" pos:end="78:57"><expr pos:start="78:39" pos:end="78:57"><name pos:start="78:39" pos:end="78:57">VHOST_USER_HDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><call pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:21">g_cond_signal</name><argument_list pos:start="79:22" pos:end="79:36">(<argument pos:start="79:23" pos:end="79:35"><expr pos:start="79:23" pos:end="79:35"><operator pos:start="79:23" pos:end="79:23">&amp;</operator><name pos:start="79:24" pos:end="79:35"><name pos:start="79:24" pos:end="79:24">s</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:35">data_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="80:9" pos:end="80:14">break;</break>
    <case pos:start="81:5" pos:end="81:35">case <expr pos:start="81:10" pos:end="81:34"><name pos:start="81:10" pos:end="81:34">VHOST_USER_SET_VRING_BASE</name></expr>:</case>
        <expr_stmt pos:start="82:9" pos:end="82:44"><expr pos:start="82:9" pos:end="82:43"><call pos:start="82:9" pos:end="82:43"><name pos:start="82:9" pos:end="82:14">assert</name><argument_list pos:start="82:15" pos:end="82:43">(<argument pos:start="82:16" pos:end="82:42"><expr pos:start="82:16" pos:end="82:42"><name pos:start="82:16" pos:end="82:38"><name pos:start="82:16" pos:end="82:18">msg</name><operator pos:start="82:19" pos:end="82:19">.</operator><name pos:start="82:20" pos:end="82:26">payload</name><operator pos:start="82:27" pos:end="82:27">.</operator><name pos:start="82:28" pos:end="82:32">state</name><operator pos:start="82:33" pos:end="82:33">.</operator><name pos:start="82:34" pos:end="82:38">index</name></name> <operator pos:start="82:40" pos:end="82:40">&lt;</operator> <literal type="number" pos:start="82:42" pos:end="82:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="83:9" pos:end="83:54"><expr pos:start="83:9" pos:end="83:53"><name pos:start="83:9" pos:end="83:16"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:16">rings</name></name> <operator pos:start="83:18" pos:end="83:19">|=</operator> <literal type="number" pos:start="83:21" pos:end="83:26">0x1ULL</literal> <operator pos:start="83:28" pos:end="83:29">&lt;&lt;</operator> <name pos:start="83:31" pos:end="83:53"><name pos:start="83:31" pos:end="83:33">msg</name><operator pos:start="83:34" pos:end="83:34">.</operator><name pos:start="83:35" pos:end="83:41">payload</name><operator pos:start="83:42" pos:end="83:42">.</operator><name pos:start="83:43" pos:end="83:47">state</name><operator pos:start="83:48" pos:end="83:48">.</operator><name pos:start="83:49" pos:end="83:53">index</name></name></expr>;</expr_stmt>
        <break pos:start="84:9" pos:end="84:14">break;</break>
    <default pos:start="85:5" pos:end="85:12">default:</default>
        <break pos:start="86:9" pos:end="86:14">break;</break>
    <expr_stmt pos:start="87:5" pos:end="87:35"><expr pos:start="87:5" pos:end="87:34"><call pos:start="87:5" pos:end="87:34"><name pos:start="87:5" pos:end="87:18">g_mutex_unlock</name><argument_list pos:start="87:19" pos:end="87:34">(<argument pos:start="87:20" pos:end="87:33"><expr pos:start="87:20" pos:end="87:33"><operator pos:start="87:20" pos:end="87:20">&amp;</operator><name pos:start="87:21" pos:end="87:33"><name pos:start="87:21" pos:end="87:21">s</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:33">data_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
