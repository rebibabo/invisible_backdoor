<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4865.c" pos:tabs="8"><function pos:start="1:1" pos:end="625:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:37">yuv2packed2</name>)<parameter_list pos:start="1:39" pos:end="3:84">(<parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:49">SwsContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">c</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:62">uint16_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">buf0</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:84"><decl pos:start="1:71" pos:end="1:84"><type pos:start="1:71" pos:end="1:84"><name pos:start="1:71" pos:end="1:78">uint16_t</name> <modifier pos:start="1:80" pos:end="1:80">*</modifier></type><name pos:start="1:81" pos:end="1:84">buf1</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:102"><decl pos:start="1:87" pos:end="1:102"><type pos:start="1:87" pos:end="1:102"><name pos:start="1:87" pos:end="1:94">uint16_t</name> <modifier pos:start="1:96" pos:end="1:96">*</modifier></type><name pos:start="1:97" pos:end="1:102">uvbuf0</name></decl></parameter>, <parameter pos:start="1:105" pos:end="1:120"><decl pos:start="1:105" pos:end="1:120"><type pos:start="1:105" pos:end="1:120"><name pos:start="1:105" pos:end="1:112">uint16_t</name> <modifier pos:start="1:114" pos:end="1:114">*</modifier></type><name pos:start="1:115" pos:end="1:120">uvbuf1</name></decl></parameter>,

			    <parameter pos:start="3:29" pos:end="3:41"><decl pos:start="3:29" pos:end="3:41"><type pos:start="3:29" pos:end="3:41"><name pos:start="3:29" pos:end="3:35">uint8_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:41">dest</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:51"><decl pos:start="3:44" pos:end="3:51"><type pos:start="3:44" pos:end="3:51"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:51">dstW</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:63"><decl pos:start="3:54" pos:end="3:63"><type pos:start="3:54" pos:end="3:63"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:63">yalpha</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:76"><decl pos:start="3:66" pos:end="3:76"><type pos:start="3:66" pos:end="3:76"><name pos:start="3:66" pos:end="3:68">int</name></type> <name pos:start="3:70" pos:end="3:76">uvalpha</name></decl></parameter>, <parameter pos:start="3:79" pos:end="3:83"><decl pos:start="3:79" pos:end="3:83"><type pos:start="3:79" pos:end="3:83"><name pos:start="3:79" pos:end="3:81">int</name></type> <name pos:start="3:83" pos:end="3:83">y</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="625:1">{<block_content pos:start="7:9" pos:end="623:66">

	<decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:19">yalpha1</name><init pos:start="7:20" pos:end="7:31">=<expr pos:start="7:21" pos:end="7:31"><name pos:start="7:21" pos:end="7:26">yalpha</name><operator pos:start="7:27" pos:end="7:27">^</operator><literal type="number" pos:start="7:28" pos:end="7:31">4095</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:34"><decl pos:start="9:9" pos:end="9:33"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:20">uvalpha1</name><init pos:start="9:21" pos:end="9:33">=<expr pos:start="9:22" pos:end="9:33"><name pos:start="9:22" pos:end="9:28">uvalpha</name><operator pos:start="9:29" pos:end="9:29">^</operator><literal type="number" pos:start="9:30" pos:end="9:33">4095</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="448:0"><decl pos:start="11:9" pos:end="11:13"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">i</name></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:5">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:5"><literal type="number" pos:start="15:5" pos:end="15:5">0</literal></expr></cpp:if> <comment type="line" pos:start="15:7" pos:end="15:18">//isn't used</comment>

	if(flags&amp;SWS_FULL_CHR_H_INT)

	{

		switch(dstFormat)

		{

<cpp:ifdef pos:start="25:1" pos:end="25:15">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:15">HAVE_MMX</name></cpp:ifdef>

		case PIX_FMT_RGB32:

			asm volatile(





FULL_YSCALEYUV2RGB

			"punpcklbw %%mm1, %%mm3		\n\t" <comment type="line" pos:start="37:63" pos:end="37:73">// BGBGBGBG</comment>

			"punpcklbw %%mm7, %%mm0		\n\t" <comment type="line" pos:start="39:63" pos:end="39:73">// R0R0R0R0</comment>



			"movq %%mm3, %%mm1		\n\t"

			"punpcklwd %%mm0, %%mm3		\n\t" <comment type="line" pos:start="45:63" pos:end="45:73">// BGR0BGR0</comment>

			"punpckhwd %%mm0, %%mm1		\n\t" <comment type="line" pos:start="47:63" pos:end="47:73">// BGR0BGR0</comment>



			MOVNTQ(%%mm3, (%4, %%REGa, 4))

			MOVNTQ(%%mm1, 8(%4, %%REGa, 4))



			"add $4, %%"REG_a"		\n\t"

			"cmp %5, %%"REG_a"		\n\t"

			" jb 1b				\n\t"





			:: "r" (buf0), "r" (buf1), "r" (uvbuf0), "r" (uvbuf1), "r" (dest), "m" ((long)dstW),

			"m" (yalpha1), "m" (uvalpha1)

			: "%"REG_a

			);

			break;

		case PIX_FMT_BGR24:

			asm volatile(



FULL_YSCALEYUV2RGB



								<comment type="line" pos:start="87:65" pos:end="87:78">// lsb ... msb</comment>

			"punpcklbw %%mm1, %%mm3		\n\t" <comment type="line" pos:start="89:63" pos:end="89:73">// BGBGBGBG</comment>

			"punpcklbw %%mm7, %%mm0		\n\t" <comment type="line" pos:start="91:63" pos:end="91:73">// R0R0R0R0</comment>



			"movq %%mm3, %%mm1		\n\t"

			"punpcklwd %%mm0, %%mm3		\n\t" <comment type="line" pos:start="97:63" pos:end="97:73">// BGR0BGR0</comment>

			"punpckhwd %%mm0, %%mm1		\n\t" <comment type="line" pos:start="99:63" pos:end="99:73">// BGR0BGR0</comment>



			"movq %%mm3, %%mm2		\n\t" <comment type="line" pos:start="103:63" pos:end="103:73">// BGR0BGR0</comment>

			"psrlq $8, %%mm3		\n\t" <comment type="line" pos:start="105:63" pos:end="105:73">// GR0BGR00</comment>

			"pand "MANGLE(bm00000111)", %%mm2\n\t" <comment type="line" pos:start="107:64" pos:end="107:74">// BGR00000</comment>

			"pand "MANGLE(bm11111000)", %%mm3\n\t" <comment type="line" pos:start="109:64" pos:end="109:74">// 000BGR00</comment>

			"por %%mm2, %%mm3		\n\t" <comment type="line" pos:start="111:63" pos:end="111:73">// BGRBGR00</comment>

			"movq %%mm1, %%mm2		\n\t"

			"psllq $48, %%mm1		\n\t" <comment type="line" pos:start="115:63" pos:end="115:73">// 000000BG</comment>

			"por %%mm1, %%mm3		\n\t" <comment type="line" pos:start="117:63" pos:end="117:73">// BGRBGRBG</comment>



			"movq %%mm2, %%mm1		\n\t" <comment type="line" pos:start="121:63" pos:end="121:73">// BGR0BGR0</comment>

			"psrld $16, %%mm2		\n\t" <comment type="line" pos:start="123:63" pos:end="123:73">// R000R000</comment>

			"psrlq $24, %%mm1		\n\t" <comment type="line" pos:start="125:63" pos:end="125:73">// 0BGR0000</comment>

			"por %%mm2, %%mm1		\n\t" <comment type="line" pos:start="127:63" pos:end="127:73">// RBGRR000</comment>



			"mov %4, %%"REG_b"		\n\t"

			"add %%"REG_a", %%"REG_b"	\n\t"



<cpp:ifdef pos:start="137:1" pos:end="137:16">#<cpp:directive pos:start="137:2" pos:end="137:6">ifdef</cpp:directive> <name pos:start="137:8" pos:end="137:16">HAVE_MMX2</name></cpp:ifdef>

			<comment type="line" pos:start="139:25" pos:end="139:41">//FIXME Alignment</comment>

			"movntq %%mm3, (%%"REG_b", %%"REG_a", 2)\n\t"

			"movntq %%mm1, 8(%%"REG_b", %%"REG_a", 2)\n\t"

<cpp:else pos:start="145:1" pos:end="145:5">#<cpp:directive pos:start="145:2" pos:end="145:5">else</cpp:directive></cpp:else>

			"movd %%mm3, (%%"REG_b", %%"REG_a", 2)	\n\t"

			"psrlq $32, %%mm3		\n\t"

			"movd %%mm3, 4(%%"REG_b", %%"REG_a", 2)	\n\t"

			"movd %%mm1, 8(%%"REG_b", %%"REG_a", 2)	\n\t"

<cpp:endif pos:start="155:1" pos:end="155:6">#<cpp:directive pos:start="155:2" pos:end="155:6">endif</cpp:directive></cpp:endif>

			"add $4, %%"REG_a"		\n\t"

			"cmp %5, %%"REG_a"		\n\t"

			" jb 1b				\n\t"



			:: "r" (buf0), "r" (buf1), "r" (uvbuf0), "r" (uvbuf1), "m" (dest), "m" (dstW),

			"m" (yalpha1), "m" (uvalpha1)

			: "%"REG_a, "%"REG_b

			);

			break;

		case PIX_FMT_BGR555:

			asm volatile(



FULL_YSCALEYUV2RGB

<cpp:ifdef pos:start="183:1" pos:end="183:18">#<cpp:directive pos:start="183:2" pos:end="183:6">ifdef</cpp:directive> <name pos:start="183:8" pos:end="183:18">DITHER1XBPP</name></cpp:ifdef>

			"paddusb "MANGLE(g5Dither)", %%mm1\n\t"

			"paddusb "MANGLE(r5Dither)", %%mm0\n\t"

			"paddusb "MANGLE(b5Dither)", %%mm3\n\t"

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>

			"punpcklbw %%mm7, %%mm1		\n\t" <comment type="line" pos:start="193:63" pos:end="193:73">// 0G0G0G0G</comment>

			"punpcklbw %%mm7, %%mm3		\n\t" <comment type="line" pos:start="195:63" pos:end="195:73">// 0B0B0B0B</comment>

			"punpcklbw %%mm7, %%mm0		\n\t" <comment type="line" pos:start="197:63" pos:end="197:73">// 0R0R0R0R</comment>



			"psrlw $3, %%mm3		\n\t"

			"psllw $2, %%mm1		\n\t"

			"psllw $7, %%mm0		\n\t"

			"pand "MANGLE(g15Mask)", %%mm1	\n\t"

			"pand "MANGLE(r15Mask)", %%mm0	\n\t"



			"por %%mm3, %%mm1		\n\t"

			"por %%mm1, %%mm0		\n\t"



			MOVNTQ(%%mm0, (%4, %%REGa, 2))



			"add $4, %%"REG_a"		\n\t"

			"cmp %5, %%"REG_a"		\n\t"

			" jb 1b				\n\t"



			:: "r" (buf0), "r" (buf1), "r" (uvbuf0), "r" (uvbuf1), "r" (dest), "m" (dstW),

			"m" (yalpha1), "m" (uvalpha1)

			: "%"REG_a

			);

			break;

		case PIX_FMT_BGR565:

			asm volatile(



FULL_YSCALEYUV2RGB

<cpp:ifdef pos:start="249:1" pos:end="249:18">#<cpp:directive pos:start="249:2" pos:end="249:6">ifdef</cpp:directive> <name pos:start="249:8" pos:end="249:18">DITHER1XBPP</name></cpp:ifdef>

			"paddusb "MANGLE(g6Dither)", %%mm1\n\t"

			"paddusb "MANGLE(r5Dither)", %%mm0\n\t"

			"paddusb "MANGLE(b5Dither)", %%mm3\n\t"

<cpp:endif pos:start="257:1" pos:end="257:6">#<cpp:directive pos:start="257:2" pos:end="257:6">endif</cpp:directive></cpp:endif>

			"punpcklbw %%mm7, %%mm1		\n\t" <comment type="line" pos:start="259:63" pos:end="259:73">// 0G0G0G0G</comment>

			"punpcklbw %%mm7, %%mm3		\n\t" <comment type="line" pos:start="261:63" pos:end="261:73">// 0B0B0B0B</comment>

			"punpcklbw %%mm7, %%mm0		\n\t" <comment type="line" pos:start="263:63" pos:end="263:73">// 0R0R0R0R</comment>



			"psrlw $3, %%mm3		\n\t"

			"psllw $3, %%mm1		\n\t"

			"psllw $8, %%mm0		\n\t"

			"pand "MANGLE(g16Mask)", %%mm1	\n\t"

			"pand "MANGLE(r16Mask)", %%mm0	\n\t"



			"por %%mm3, %%mm1		\n\t"

			"por %%mm1, %%mm0		\n\t"



			MOVNTQ(%%mm0, (%4, %%REGa, 2))



			"add $4, %%"REG_a"		\n\t"

			"cmp %5, %%"REG_a"		\n\t"

			" jb 1b				\n\t"



			:: "r" (buf0), "r" (buf1), "r" (uvbuf0), "r" (uvbuf1), "r" (dest), "m" (dstW),

			"m" (yalpha1), "m" (uvalpha1)

			: "%"REG_a

			);

		break;

<cpp:endif pos:start="307:1" pos:end="307:6">#<cpp:directive pos:start="307:2" pos:end="307:6">endif</cpp:directive></cpp:endif>

		case PIX_FMT_BGR32:

<cpp:ifndef pos:start="311:1" pos:end="311:16">#<cpp:directive pos:start="311:2" pos:end="311:7">ifndef</cpp:directive> <name pos:start="311:9" pos:end="311:16">HAVE_MMX</name></cpp:ifndef>

		case PIX_FMT_RGB32:

<cpp:endif pos:start="315:1" pos:end="315:6">#<cpp:directive pos:start="315:2" pos:end="315:6">endif</cpp:directive></cpp:endif>

		if(dstFormat==PIX_FMT_RGB32)

		{

			int i;

<cpp:ifdef pos:start="323:1" pos:end="323:22">#<cpp:directive pos:start="323:2" pos:end="323:6">ifdef</cpp:directive> <name pos:start="323:8" pos:end="323:22">WORDS_BIGENDIAN</name></cpp:ifdef>

			dest++;

<cpp:endif pos:start="327:1" pos:end="327:6">#<cpp:directive pos:start="327:2" pos:end="327:6">endif</cpp:directive></cpp:endif>

			for(i=0;i&lt;dstW;i++){

				<comment type="line" pos:start="331:33" pos:end="331:93">// vertical linear interpolation &amp;&amp; yuv2rgb in a single step:</comment>

				int Y=yuvtab_2568[((buf0[i]*yalpha1+buf1[i]*yalpha)&gt;&gt;19)];

				int U=((uvbuf0[i]*uvalpha1+uvbuf1[i]*uvalpha)&gt;&gt;19);

				int V=((uvbuf0[i+2048]*uvalpha1+uvbuf1[i+2048]*uvalpha)&gt;&gt;19);

				dest[0]=clip_table[((Y + yuvtab_40cf[U]) &gt;&gt;13)];

				dest[1]=clip_table[((Y + yuvtab_1a1e[V] + yuvtab_0c92[U]) &gt;&gt;13)];

				dest[2]=clip_table[((Y + yuvtab_3343[V]) &gt;&gt;13)];

				dest+= 4;

			}

		}

		else if(dstFormat==PIX_FMT_BGR24)

		{

			int i;

			for(i=0;i&lt;dstW;i++){

				<comment type="line" pos:start="359:33" pos:end="359:93">// vertical linear interpolation &amp;&amp; yuv2rgb in a single step:</comment>

				int Y=yuvtab_2568[((buf0[i]*yalpha1+buf1[i]*yalpha)&gt;&gt;19)];

				int U=((uvbuf0[i]*uvalpha1+uvbuf1[i]*uvalpha)&gt;&gt;19);

				int V=((uvbuf0[i+2048]*uvalpha1+uvbuf1[i+2048]*uvalpha)&gt;&gt;19);

				dest[0]=clip_table[((Y + yuvtab_40cf[U]) &gt;&gt;13)];

				dest[1]=clip_table[((Y + yuvtab_1a1e[V] + yuvtab_0c92[U]) &gt;&gt;13)];

				dest[2]=clip_table[((Y + yuvtab_3343[V]) &gt;&gt;13)];

				dest+= 3;

			}

		}

		else if(dstFormat==PIX_FMT_BGR565)

		{

			int i;

			for(i=0;i&lt;dstW;i++){

				<comment type="line" pos:start="387:33" pos:end="387:93">// vertical linear interpolation &amp;&amp; yuv2rgb in a single step:</comment>

				int Y=yuvtab_2568[((buf0[i]*yalpha1+buf1[i]*yalpha)&gt;&gt;19)];

				int U=((uvbuf0[i]*uvalpha1+uvbuf1[i]*uvalpha)&gt;&gt;19);

				int V=((uvbuf0[i+2048]*uvalpha1+uvbuf1[i+2048]*uvalpha)&gt;&gt;19);



				((uint16_t*)dest)[i] =

					clip_table16b[(Y + yuvtab_40cf[U]) &gt;&gt;13] |

					clip_table16g[(Y + yuvtab_1a1e[V] + yuvtab_0c92[U]) &gt;&gt;13] |

					clip_table16r[(Y + yuvtab_3343[V]) &gt;&gt;13];

			}

		}

		else if(dstFormat==PIX_FMT_BGR555)

		{

			int i;

			for(i=0;i&lt;dstW;i++){

				<comment type="line" pos:start="417:33" pos:end="417:93">// vertical linear interpolation &amp;&amp; yuv2rgb in a single step:</comment>

				int Y=yuvtab_2568[((buf0[i]*yalpha1+buf1[i]*yalpha)&gt;&gt;19)];

				int U=((uvbuf0[i]*uvalpha1+uvbuf1[i]*uvalpha)&gt;&gt;19);

				int V=((uvbuf0[i+2048]*uvalpha1+uvbuf1[i+2048]*uvalpha)&gt;&gt;19);



				((uint16_t*)dest)[i] =

					clip_table15b[(Y + yuvtab_40cf[U]) &gt;&gt;13] |

					clip_table15g[(Y + yuvtab_1a1e[V] + yuvtab_0c92[U]) &gt;&gt;13] |

					clip_table15r[(Y + yuvtab_3343[V]) &gt;&gt;13];

			}

		}

	}<comment type="line" pos:start="439:10" pos:end="439:23">//FULL_UV_IPOL</comment>

	else

	{

<cpp:endif pos:start="445:1" pos:end="445:6">#<cpp:directive pos:start="445:2" pos:end="445:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="445:8" pos:end="445:14">// if 0</comment>

<cpp:ifdef pos:start="447:1" pos:end="447:15">#<cpp:directive pos:start="447:2" pos:end="447:6">ifdef</cpp:directive> <name pos:start="447:8" pos:end="447:15">HAVE_MMX</name></cpp:ifdef>

	<switch pos:start="449:9" pos:end="622:0">switch<condition pos:start="449:15" pos:end="449:28">(<expr pos:start="449:16" pos:end="449:27"><name pos:start="449:16" pos:end="449:27"><name pos:start="449:16" pos:end="449:16">c</name><operator pos:start="449:17" pos:end="449:18">-&gt;</operator><name pos:start="449:19" pos:end="449:27">dstFormat</name></name></expr>)</condition>

	<block pos:start="451:9" pos:end="622:0">{<block_content pos:start="455:9" pos:end="617:23">

<comment type="line" pos:start="453:1" pos:end="453:74">//Note 8280 == DSTW_OFFSET but the preprocessor can't handle that there :(</comment>

	<case pos:start="455:9" pos:end="455:27">case <expr pos:start="455:14" pos:end="455:26"><name pos:start="455:14" pos:end="455:26">PIX_FMT_RGB32</name></expr>:</case>

			<asm pos:start="457:25" pos:end="479:26">asm <specifier pos:start="457:29" pos:end="457:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB(%%REGBP, %5)

				WRITEBGR32(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="481:25" pos:end="481:31">return;</return>

	<case pos:start="483:9" pos:end="483:27">case <expr pos:start="483:14" pos:end="483:26"><name pos:start="483:14" pos:end="483:26">PIX_FMT_BGR24</name></expr>:</case>

			<asm pos:start="485:25" pos:end="505:26">asm <specifier pos:start="485:29" pos:end="485:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB(%%REGBP, %5)

				WRITEBGR24(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"

			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="507:25" pos:end="507:31">return;</return>

	<case pos:start="509:9" pos:end="509:28">case <expr pos:start="509:14" pos:end="509:27"><name pos:start="509:14" pos:end="509:27">PIX_FMT_BGR555</name></expr>:</case>

			<asm pos:start="511:25" pos:end="547:26">asm <specifier pos:start="511:29" pos:end="511:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB(%%REGBP, %5)

		<comment type="block" pos:start="521:17" pos:end="521:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="523:1" pos:end="523:18">#<cpp:directive pos:start="523:2" pos:end="523:6">ifdef</cpp:directive> <name pos:start="523:8" pos:end="523:18">DITHER1XBPP</name></cpp:ifdef>

				"paddusb "MANGLE(b5Dither)", %%mm2\n\t"

				"paddusb "MANGLE(g5Dither)", %%mm4\n\t"

				"paddusb "MANGLE(r5Dither)", %%mm5\n\t"

<cpp:endif pos:start="531:1" pos:end="531:6">#<cpp:directive pos:start="531:2" pos:end="531:6">endif</cpp:directive></cpp:endif>



				WRITEBGR15(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"



			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="549:25" pos:end="549:31">return;</return>

	<case pos:start="551:9" pos:end="551:28">case <expr pos:start="551:14" pos:end="551:27"><name pos:start="551:14" pos:end="551:27">PIX_FMT_BGR565</name></expr>:</case>

			<asm pos:start="553:25" pos:end="587:26">asm <specifier pos:start="553:29" pos:end="553:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2RGB(%%REGBP, %5)

		<comment type="block" pos:start="563:17" pos:end="563:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="565:1" pos:end="565:18">#<cpp:directive pos:start="565:2" pos:end="565:6">ifdef</cpp:directive> <name pos:start="565:8" pos:end="565:18">DITHER1XBPP</name></cpp:ifdef>

				"paddusb "MANGLE(b5Dither)", %%mm2\n\t"

				"paddusb "MANGLE(g6Dither)", %%mm4\n\t"

				"paddusb "MANGLE(r5Dither)", %%mm5\n\t"

<cpp:endif pos:start="573:1" pos:end="573:6">#<cpp:directive pos:start="573:2" pos:end="573:6">endif</cpp:directive></cpp:endif>



				WRITEBGR16(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"

			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="589:25" pos:end="589:31">return;</return>

	<case pos:start="591:9" pos:end="591:29">case <expr pos:start="591:14" pos:end="591:28"><name pos:start="591:14" pos:end="591:28">PIX_FMT_YUYV422</name></expr>:</case>

			<asm pos:start="593:25" pos:end="613:26">asm <specifier pos:start="593:29" pos:end="593:36">volatile</specifier>(

				"mov %%"REG_b", "ESP_OFFSET"(%5)	\n\t"

				"mov %4, %%"REG_b"			\n\t"

                                "push %%"REG_BP"                        \n\t"

				YSCALEYUV2PACKED(%%REGBP, %5)

				WRITEYUY2(%%REGb, 8280(%5), %%REGBP)

                                "pop %%"REG_BP"                         \n\t"

				"mov "ESP_OFFSET"(%5), %%"REG_b"	\n\t"

			:: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

			"a" (&amp;c-&gt;redDither)

			);</asm>

			<return pos:start="615:25" pos:end="615:31">return;</return>

	<default pos:start="617:9" pos:end="617:16">default:</default> <break pos:start="617:18" pos:end="617:23">break;</break>

	</block_content>}</block></switch>

<cpp:endif pos:start="621:1" pos:end="621:6">#<cpp:directive pos:start="621:2" pos:end="621:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="621:8" pos:end="621:17">//HAVE_MMX</comment>

<macro pos:start="623:1" pos:end="623:66"><name pos:start="623:1" pos:end="623:21">YSCALE_YUV_2_ANYRGB_C</name><argument_list pos:start="623:22" pos:end="623:66">(<argument pos:start="623:23" pos:end="623:41">YSCALE_YUV_2_RGB2_C</argument>, <argument pos:start="623:44" pos:end="623:65">YSCALE_YUV_2_PACKED2_C</argument>)</argument_list></macro>

</block_content>}</block></function>
</unit>
