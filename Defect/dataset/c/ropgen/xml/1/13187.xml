<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13187.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">net_init_socket</name><parameter_list pos:start="1:20" pos:end="3:55">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><specifier pos:start="1:21" pos:end="1:25">const</specifier> <name pos:start="1:27" pos:end="1:32">Netdev</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">netdev</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:58"><decl pos:start="1:43" pos:end="1:58"><type pos:start="1:43" pos:end="1:58"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">name</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:40"><decl pos:start="3:21" pos:end="3:40"><type pos:start="3:21" pos:end="3:40"><name pos:start="3:21" pos:end="3:34">NetClientState</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">peer</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:54"><decl pos:start="3:43" pos:end="3:54"><type pos:start="3:43" pos:end="3:54"><name pos:start="3:43" pos:end="3:47">Error</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier><modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:54">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="145:1">{<block_content pos:start="9:5" pos:end="143:13">

    <comment type="block" pos:start="7:5" pos:end="7:48">/* FIXME error_setg(errp, ...) on failure */</comment>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:31"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:29">NetdevSocketOptions</name> <modifier pos:start="11:31" pos:end="11:31">*</modifier></type><name pos:start="11:32" pos:end="11:35">sock</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:53"><expr pos:start="15:5" pos:end="15:52"><call pos:start="15:5" pos:end="15:52"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:52">(<argument pos:start="15:12" pos:end="15:51"><expr pos:start="15:12" pos:end="15:51"><name pos:start="15:12" pos:end="15:23"><name pos:start="15:12" pos:end="15:17">netdev</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:23">type</name></name> <operator pos:start="15:25" pos:end="15:26">==</operator> <name pos:start="15:28" pos:end="15:51">NET_CLIENT_DRIVER_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:29"><expr pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:8">sock</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <operator pos:start="17:12" pos:end="17:12">&amp;</operator><name pos:start="17:13" pos:end="17:28"><name pos:start="17:13" pos:end="17:18">netdev</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:21">u</name><operator pos:start="17:22" pos:end="17:22">.</operator><name pos:start="17:23" pos:end="17:28">socket</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="23:27">(<expr pos:start="21:9" pos:end="23:26"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:12">sock</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:20">has_fd</name></name> <operator pos:start="21:22" pos:end="21:22">+</operator> <name pos:start="21:24" pos:end="21:39"><name pos:start="21:24" pos:end="21:27">sock</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:39">has_listen</name></name> <operator pos:start="21:41" pos:end="21:41">+</operator> <name pos:start="21:43" pos:end="21:59"><name pos:start="21:43" pos:end="21:46">sock</name><operator pos:start="21:47" pos:end="21:48">-&gt;</operator><name pos:start="21:49" pos:end="21:59">has_connect</name></name> <operator pos:start="21:61" pos:end="21:61">+</operator> <name pos:start="21:63" pos:end="21:77"><name pos:start="21:63" pos:end="21:66">sock</name><operator pos:start="21:67" pos:end="21:68">-&gt;</operator><name pos:start="21:69" pos:end="21:77">has_mcast</name></name> <operator pos:start="21:79" pos:end="21:79">+</operator>

        <name pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:12">sock</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:21">has_udp</name></name> <operator pos:start="23:23" pos:end="23:24">!=</operator> <literal type="number" pos:start="23:26" pos:end="23:26">1</literal></expr>)</condition> <block pos:start="23:29" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:18">

        <expr_stmt pos:start="25:9" pos:end="27:37"><expr pos:start="25:9" pos:end="27:36"><call pos:start="25:9" pos:end="27:36"><name pos:start="25:9" pos:end="25:20">error_report</name><argument_list pos:start="25:21" pos:end="27:36">(<argument pos:start="25:22" pos:end="27:35"><expr pos:start="25:22" pos:end="27:35"><literal type="string" pos:start="25:22" pos:end="25:76">"exactly one of fd=, listen=, connect=, mcast= or udp="</literal>

                     <literal type="string" pos:start="27:22" pos:end="27:35">" is required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:66">(<expr pos:start="35:9" pos:end="35:65"><name pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:12">sock</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:27">has_localaddr</name></name> <operator pos:start="35:29" pos:end="35:30">&amp;&amp;</operator> <operator pos:start="35:32" pos:end="35:32">!</operator><name pos:start="35:33" pos:end="35:47"><name pos:start="35:33" pos:end="35:36">sock</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:47">has_mcast</name></name> <operator pos:start="35:49" pos:end="35:50">&amp;&amp;</operator> <operator pos:start="35:52" pos:end="35:52">!</operator><name pos:start="35:53" pos:end="35:65"><name pos:start="35:53" pos:end="35:56">sock</name><operator pos:start="35:57" pos:end="35:58">-&gt;</operator><name pos:start="35:59" pos:end="35:65">has_udp</name></name></expr>)</condition> <block pos:start="35:68" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:69"><expr pos:start="37:9" pos:end="37:68"><call pos:start="37:9" pos:end="37:68"><name pos:start="37:9" pos:end="37:20">error_report</name><argument_list pos:start="37:21" pos:end="37:68">(<argument pos:start="37:22" pos:end="37:67"><expr pos:start="37:22" pos:end="37:67"><literal type="string" pos:start="37:22" pos:end="37:67">"localaddr= is only valid with mcast= or udp="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="71:5"><if pos:start="45:5" pos:end="71:5">if <condition pos:start="45:8" pos:end="45:21">(<expr pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:12">sock</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:20">has_fd</name></name></expr>)</condition> <block pos:start="45:23" pos:end="71:5">{<block_content pos:start="47:9" pos:end="69:17">

        <decl_stmt pos:start="47:9" pos:end="47:15"><decl pos:start="47:9" pos:end="47:14"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:14">fd</name></decl>;</decl_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:55"><expr pos:start="51:9" pos:end="51:54"><name pos:start="51:9" pos:end="51:10">fd</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <call pos:start="51:14" pos:end="51:54"><name pos:start="51:14" pos:end="51:29">monitor_fd_param</name><argument_list pos:start="51:30" pos:end="51:54">(<argument pos:start="51:31" pos:end="51:37"><expr pos:start="51:31" pos:end="51:37"><name pos:start="51:31" pos:end="51:37">cur_mon</name></expr></argument>, <argument pos:start="51:40" pos:end="51:47"><expr pos:start="51:40" pos:end="51:47"><name pos:start="51:40" pos:end="51:47"><name pos:start="51:40" pos:end="51:43">sock</name><operator pos:start="51:44" pos:end="51:45">-&gt;</operator><name pos:start="51:46" pos:end="51:47">fd</name></name></expr></argument>, <argument pos:start="51:50" pos:end="51:53"><expr pos:start="51:50" pos:end="51:53"><operator pos:start="51:50" pos:end="51:50">&amp;</operator><name pos:start="51:51" pos:end="51:53">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:21">(<expr pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:14">fd</name> <operator pos:start="53:16" pos:end="53:17">==</operator> <operator pos:start="53:19" pos:end="53:19">-</operator><literal type="number" pos:start="53:20" pos:end="53:20">1</literal></expr>)</condition> <block pos:start="53:23" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:22">

            <expr_stmt pos:start="55:13" pos:end="55:34"><expr pos:start="55:13" pos:end="55:33"><call pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:28">error_report_err</name><argument_list pos:start="55:29" pos:end="55:33">(<argument pos:start="55:30" pos:end="55:32"><expr pos:start="55:30" pos:end="55:32"><name pos:start="55:30" pos:end="55:32">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:22">return <expr pos:start="57:20" pos:end="57:21"><operator pos:start="57:20" pos:end="57:20">-</operator><literal type="number" pos:start="57:21" pos:end="57:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><call pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:25">qemu_set_nonblock</name><argument_list pos:start="61:26" pos:end="61:29">(<argument pos:start="61:27" pos:end="61:28"><expr pos:start="61:27" pos:end="61:28"><name pos:start="61:27" pos:end="61:28">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:61">(<expr pos:start="63:13" pos:end="63:60"><operator pos:start="63:13" pos:end="63:13">!</operator><call pos:start="63:14" pos:end="63:60"><name pos:start="63:14" pos:end="63:31">net_socket_fd_init</name><argument_list pos:start="63:32" pos:end="63:60">(<argument pos:start="63:33" pos:end="63:36"><expr pos:start="63:33" pos:end="63:36"><name pos:start="63:33" pos:end="63:36">peer</name></expr></argument>, <argument pos:start="63:39" pos:end="63:46"><expr pos:start="63:39" pos:end="63:46"><literal type="string" pos:start="63:39" pos:end="63:46">"socket"</literal></expr></argument>, <argument pos:start="63:49" pos:end="63:52"><expr pos:start="63:49" pos:end="63:52"><name pos:start="63:49" pos:end="63:52">name</name></expr></argument>, <argument pos:start="63:55" pos:end="63:56"><expr pos:start="63:55" pos:end="63:56"><name pos:start="63:55" pos:end="63:56">fd</name></expr></argument>, <argument pos:start="63:59" pos:end="63:59"><expr pos:start="63:59" pos:end="63:59"><literal type="number" pos:start="63:59" pos:end="63:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:63" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:22">

            <return pos:start="65:13" pos:end="65:22">return <expr pos:start="65:20" pos:end="65:21"><operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="85:5"><if pos:start="75:5" pos:end="85:5">if <condition pos:start="75:8" pos:end="75:25">(<expr pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:12">sock</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:24">has_listen</name></name></expr>)</condition> <block pos:start="75:27" pos:end="85:5">{<block_content pos:start="77:9" pos:end="83:17">

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:77">(<expr pos:start="77:13" pos:end="77:76"><call pos:start="77:13" pos:end="77:70"><name pos:start="77:13" pos:end="77:34">net_socket_listen_init</name><argument_list pos:start="77:35" pos:end="77:70">(<argument pos:start="77:36" pos:end="77:39"><expr pos:start="77:36" pos:end="77:39"><name pos:start="77:36" pos:end="77:39">peer</name></expr></argument>, <argument pos:start="77:42" pos:end="77:49"><expr pos:start="77:42" pos:end="77:49"><literal type="string" pos:start="77:42" pos:end="77:49">"socket"</literal></expr></argument>, <argument pos:start="77:52" pos:end="77:55"><expr pos:start="77:52" pos:end="77:55"><name pos:start="77:52" pos:end="77:55">name</name></expr></argument>, <argument pos:start="77:58" pos:end="77:69"><expr pos:start="77:58" pos:end="77:69"><name pos:start="77:58" pos:end="77:69"><name pos:start="77:58" pos:end="77:61">sock</name><operator pos:start="77:62" pos:end="77:63">-&gt;</operator><name pos:start="77:64" pos:end="77:69">listen</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:72" pos:end="77:73">==</operator> <operator pos:start="77:75" pos:end="77:75">-</operator><literal type="number" pos:start="77:76" pos:end="77:76">1</literal></expr>)</condition> <block pos:start="77:79" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:22">

            <return pos:start="79:13" pos:end="79:22">return <expr pos:start="79:20" pos:end="79:21"><operator pos:start="79:20" pos:end="79:20">-</operator><literal type="number" pos:start="79:21" pos:end="79:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="83:9" pos:end="83:17">return <expr pos:start="83:16" pos:end="83:16"><literal type="number" pos:start="83:16" pos:end="83:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="101:5"><if pos:start="89:5" pos:end="101:5">if <condition pos:start="89:8" pos:end="89:26">(<expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:12">sock</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:25">has_connect</name></name></expr>)</condition> <block pos:start="89:28" pos:end="101:5">{<block_content pos:start="91:9" pos:end="99:17">

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="93:15">(<expr pos:start="91:13" pos:end="93:14"><call pos:start="91:13" pos:end="91:72"><name pos:start="91:13" pos:end="91:35">net_socket_connect_init</name><argument_list pos:start="91:36" pos:end="91:72">(<argument pos:start="91:37" pos:end="91:40"><expr pos:start="91:37" pos:end="91:40"><name pos:start="91:37" pos:end="91:40">peer</name></expr></argument>, <argument pos:start="91:43" pos:end="91:50"><expr pos:start="91:43" pos:end="91:50"><literal type="string" pos:start="91:43" pos:end="91:50">"socket"</literal></expr></argument>, <argument pos:start="91:53" pos:end="91:56"><expr pos:start="91:53" pos:end="91:56"><name pos:start="91:53" pos:end="91:56">name</name></expr></argument>, <argument pos:start="91:59" pos:end="91:71"><expr pos:start="91:59" pos:end="91:71"><name pos:start="91:59" pos:end="91:71"><name pos:start="91:59" pos:end="91:62">sock</name><operator pos:start="91:63" pos:end="91:64">-&gt;</operator><name pos:start="91:65" pos:end="91:71">connect</name></name></expr></argument>)</argument_list></call> <operator pos:start="91:74" pos:end="91:75">==</operator>

            <operator pos:start="93:13" pos:end="93:13">-</operator><literal type="number" pos:start="93:14" pos:end="93:14">1</literal></expr>)</condition> <block pos:start="93:17" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:22">

            <return pos:start="95:13" pos:end="95:22">return <expr pos:start="95:20" pos:end="95:21"><operator pos:start="95:20" pos:end="95:20">-</operator><literal type="number" pos:start="95:21" pos:end="95:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="99:9" pos:end="99:17">return <expr pos:start="99:16" pos:end="99:16"><literal type="number" pos:start="99:16" pos:end="99:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="121:5"><if pos:start="105:5" pos:end="121:5">if <condition pos:start="105:8" pos:end="105:24">(<expr pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:12">sock</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:23">has_mcast</name></name></expr>)</condition> <block pos:start="105:26" pos:end="121:5">{<block_content pos:start="111:9" pos:end="119:17">

        <comment type="block" pos:start="107:9" pos:end="109:19">/* if sock-&gt;localaddr is missing, it has been initialized to "all bits

         * zero" */</comment>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="113:35">(<expr pos:start="111:13" pos:end="113:34"><call pos:start="111:13" pos:end="113:28"><name pos:start="111:13" pos:end="111:33">net_socket_mcast_init</name><argument_list pos:start="111:34" pos:end="113:28">(<argument pos:start="111:35" pos:end="111:38"><expr pos:start="111:35" pos:end="111:38"><name pos:start="111:35" pos:end="111:38">peer</name></expr></argument>, <argument pos:start="111:41" pos:end="111:48"><expr pos:start="111:41" pos:end="111:48"><literal type="string" pos:start="111:41" pos:end="111:48">"socket"</literal></expr></argument>, <argument pos:start="111:51" pos:end="111:54"><expr pos:start="111:51" pos:end="111:54"><name pos:start="111:51" pos:end="111:54">name</name></expr></argument>, <argument pos:start="111:57" pos:end="111:67"><expr pos:start="111:57" pos:end="111:67"><name pos:start="111:57" pos:end="111:67"><name pos:start="111:57" pos:end="111:60">sock</name><operator pos:start="111:61" pos:end="111:62">-&gt;</operator><name pos:start="111:63" pos:end="111:67">mcast</name></name></expr></argument>,

            <argument pos:start="113:13" pos:end="113:27"><expr pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:16">sock</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:27">localaddr</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:30" pos:end="113:31">==</operator> <operator pos:start="113:33" pos:end="113:33">-</operator><literal type="number" pos:start="113:34" pos:end="113:34">1</literal></expr>)</condition> <block pos:start="113:37" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:22">

            <return pos:start="115:13" pos:end="115:22">return <expr pos:start="115:20" pos:end="115:21"><operator pos:start="115:20" pos:end="115:20">-</operator><literal type="number" pos:start="115:21" pos:end="115:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="119:9" pos:end="119:17">return <expr pos:start="119:16" pos:end="119:16"><literal type="number" pos:start="119:16" pos:end="119:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:26"><expr pos:start="125:5" pos:end="125:25"><call pos:start="125:5" pos:end="125:25"><name pos:start="125:5" pos:end="125:10">assert</name><argument_list pos:start="125:11" pos:end="125:25">(<argument pos:start="125:12" pos:end="125:24"><expr pos:start="125:12" pos:end="125:24"><name pos:start="125:12" pos:end="125:24"><name pos:start="125:12" pos:end="125:15">sock</name><operator pos:start="125:16" pos:end="125:17">-&gt;</operator><name pos:start="125:18" pos:end="125:24">has_udp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:29">(<expr pos:start="127:9" pos:end="127:28"><operator pos:start="127:9" pos:end="127:9">!</operator><name pos:start="127:10" pos:end="127:28"><name pos:start="127:10" pos:end="127:13">sock</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:28">has_localaddr</name></name></expr>)</condition> <block pos:start="127:31" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:18">

        <expr_stmt pos:start="129:9" pos:end="129:58"><expr pos:start="129:9" pos:end="129:57"><call pos:start="129:9" pos:end="129:57"><name pos:start="129:9" pos:end="129:20">error_report</name><argument_list pos:start="129:21" pos:end="129:57">(<argument pos:start="129:22" pos:end="129:56"><expr pos:start="129:22" pos:end="129:56"><literal type="string" pos:start="129:22" pos:end="129:56">"localaddr= is mandatory with udp="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:18">return <expr pos:start="131:16" pos:end="131:17"><operator pos:start="131:16" pos:end="131:16">-</operator><literal type="number" pos:start="131:17" pos:end="131:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="137:11">(<expr pos:start="135:9" pos:end="137:10"><call pos:start="135:9" pos:end="135:77"><name pos:start="135:9" pos:end="135:27">net_socket_udp_init</name><argument_list pos:start="135:28" pos:end="135:77">(<argument pos:start="135:29" pos:end="135:32"><expr pos:start="135:29" pos:end="135:32"><name pos:start="135:29" pos:end="135:32">peer</name></expr></argument>, <argument pos:start="135:35" pos:end="135:42"><expr pos:start="135:35" pos:end="135:42"><literal type="string" pos:start="135:35" pos:end="135:42">"socket"</literal></expr></argument>, <argument pos:start="135:45" pos:end="135:48"><expr pos:start="135:45" pos:end="135:48"><name pos:start="135:45" pos:end="135:48">name</name></expr></argument>, <argument pos:start="135:51" pos:end="135:59"><expr pos:start="135:51" pos:end="135:59"><name pos:start="135:51" pos:end="135:59"><name pos:start="135:51" pos:end="135:54">sock</name><operator pos:start="135:55" pos:end="135:56">-&gt;</operator><name pos:start="135:57" pos:end="135:59">udp</name></name></expr></argument>, <argument pos:start="135:62" pos:end="135:76"><expr pos:start="135:62" pos:end="135:76"><name pos:start="135:62" pos:end="135:76"><name pos:start="135:62" pos:end="135:65">sock</name><operator pos:start="135:66" pos:end="135:67">-&gt;</operator><name pos:start="135:68" pos:end="135:76">localaddr</name></name></expr></argument>)</argument_list></call> <operator pos:start="135:79" pos:end="135:80">==</operator>

        <operator pos:start="137:9" pos:end="137:9">-</operator><literal type="number" pos:start="137:10" pos:end="137:10">1</literal></expr>)</condition> <block pos:start="137:13" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:18">

        <return pos:start="139:9" pos:end="139:18">return <expr pos:start="139:16" pos:end="139:17"><operator pos:start="139:16" pos:end="139:16">-</operator><literal type="number" pos:start="139:17" pos:end="139:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="143:5" pos:end="143:13">return <expr pos:start="143:12" pos:end="143:12"><literal type="number" pos:start="143:12" pos:end="143:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
