<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22446.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:16">helper_ldqf</name><parameter_list pos:start="1:17" pos:end="1:68">(<parameter pos:start="1:18" pos:end="1:35"><decl pos:start="1:18" pos:end="1:35"><type pos:start="1:18" pos:end="1:35"><name pos:start="1:18" pos:end="1:30">CPUSPARCState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">env</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:49">target_ulong</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:67"><decl pos:start="1:57" pos:end="1:67"><type pos:start="1:57" pos:end="1:67"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:67">mem_idx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="68:0">

    <comment type="block" pos:start="5:5" pos:end="5:30">/* XXX add 128 bit load */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">CPU_QuadU</name></type> <name pos:start="7:15" pos:end="7:15">u</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="14:0"><expr pos:start="11:5" pos:end="11:36"><call pos:start="11:5" pos:end="11:36"><name pos:start="11:5" pos:end="11:22">helper_check_align</name><argument_list pos:start="11:23" pos:end="11:36">(<argument pos:start="11:24" pos:end="11:26"><expr pos:start="11:24" pos:end="11:26"><name pos:start="11:24" pos:end="11:26">env</name></expr></argument>, <argument pos:start="11:29" pos:end="11:32"><expr pos:start="11:29" pos:end="11:32"><name pos:start="11:29" pos:end="11:32">addr</name></expr></argument>, <argument pos:start="11:35" pos:end="11:35"><expr pos:start="11:35" pos:end="11:35"><literal type="number" pos:start="11:35" pos:end="11:35">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="13:1" pos:end="13:30">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:30"><operator pos:start="13:5" pos:end="13:5">!</operator><call pos:start="13:6" pos:end="13:30"><name pos:start="13:6" pos:end="13:12">defined</name><argument_list pos:start="13:13" pos:end="13:30">(<argument pos:start="13:14" pos:end="13:29"><expr pos:start="13:14" pos:end="13:29"><name pos:start="13:14" pos:end="13:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <switch pos:start="15:5" pos:end="60:0">switch <condition pos:start="15:12" pos:end="15:20">(<expr pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:19">mem_idx</name></expr>)</condition> <block pos:start="15:22" pos:end="60:0">{<block_content pos:start="17:5" pos:end="55:14">

    <case pos:start="17:5" pos:end="17:22">case <expr pos:start="17:10" pos:end="17:21"><name pos:start="17:10" pos:end="17:21">MMU_USER_IDX</name></expr>:</case>

        <expr_stmt pos:start="19:9" pos:end="19:45"><expr pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:9">u</name><operator pos:start="19:10" pos:end="19:10">.</operator><name pos:start="19:11" pos:end="19:12">ll</name><operator pos:start="19:13" pos:end="19:13">.</operator><name pos:start="19:14" pos:end="19:18">upper</name></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <call pos:start="19:22" pos:end="19:44"><name pos:start="19:22" pos:end="19:33">cpu_ldq_user</name><argument_list pos:start="19:34" pos:end="19:44">(<argument pos:start="19:35" pos:end="19:37"><expr pos:start="19:35" pos:end="19:37"><name pos:start="19:35" pos:end="19:37">env</name></expr></argument>, <argument pos:start="19:40" pos:end="19:43"><expr pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:43">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:9">u</name><operator pos:start="21:10" pos:end="21:10">.</operator><name pos:start="21:11" pos:end="21:12">ll</name><operator pos:start="21:13" pos:end="21:13">.</operator><name pos:start="21:14" pos:end="21:18">lower</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <call pos:start="21:22" pos:end="21:48"><name pos:start="21:22" pos:end="21:33">cpu_ldq_user</name><argument_list pos:start="21:34" pos:end="21:48">(<argument pos:start="21:35" pos:end="21:37"><expr pos:start="21:35" pos:end="21:37"><name pos:start="21:35" pos:end="21:37">env</name></expr></argument>, <argument pos:start="21:40" pos:end="21:47"><expr pos:start="21:40" pos:end="21:47"><name pos:start="21:40" pos:end="21:43">addr</name> <operator pos:start="21:45" pos:end="21:45">+</operator> <literal type="number" pos:start="21:47" pos:end="21:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:18"><expr pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:11">QT0</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:17"><name pos:start="23:15" pos:end="23:15">u</name><operator pos:start="23:16" pos:end="23:16">.</operator><name pos:start="23:17" pos:end="23:17">q</name></name></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:24">case <expr pos:start="27:10" pos:end="27:23"><name pos:start="27:10" pos:end="27:23">MMU_KERNEL_IDX</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:47"><expr pos:start="29:9" pos:end="29:46"><name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:9">u</name><operator pos:start="29:10" pos:end="29:10">.</operator><name pos:start="29:11" pos:end="29:12">ll</name><operator pos:start="29:13" pos:end="29:13">.</operator><name pos:start="29:14" pos:end="29:18">upper</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <call pos:start="29:22" pos:end="29:46"><name pos:start="29:22" pos:end="29:35">cpu_ldq_kernel</name><argument_list pos:start="29:36" pos:end="29:46">(<argument pos:start="29:37" pos:end="29:39"><expr pos:start="29:37" pos:end="29:39"><name pos:start="29:37" pos:end="29:39">env</name></expr></argument>, <argument pos:start="29:42" pos:end="29:45"><expr pos:start="29:42" pos:end="29:45"><name pos:start="29:42" pos:end="29:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:51"><expr pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:9">u</name><operator pos:start="31:10" pos:end="31:10">.</operator><name pos:start="31:11" pos:end="31:12">ll</name><operator pos:start="31:13" pos:end="31:13">.</operator><name pos:start="31:14" pos:end="31:18">lower</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <call pos:start="31:22" pos:end="31:50"><name pos:start="31:22" pos:end="31:35">cpu_ldq_kernel</name><argument_list pos:start="31:36" pos:end="31:50">(<argument pos:start="31:37" pos:end="31:39"><expr pos:start="31:37" pos:end="31:39"><name pos:start="31:37" pos:end="31:39">env</name></expr></argument>, <argument pos:start="31:42" pos:end="31:49"><expr pos:start="31:42" pos:end="31:49"><name pos:start="31:42" pos:end="31:45">addr</name> <operator pos:start="31:47" pos:end="31:47">+</operator> <literal type="number" pos:start="31:49" pos:end="31:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:18"><expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:11">QT0</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:17"><name pos:start="33:15" pos:end="33:15">u</name><operator pos:start="33:16" pos:end="33:16">.</operator><name pos:start="33:17" pos:end="33:17">q</name></name></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="38:0">break;</break>

<cpp:ifdef pos:start="37:1" pos:end="37:21">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:21">TARGET_SPARC64</name></cpp:ifdef>

    <case pos:start="39:5" pos:end="39:22">case <expr pos:start="39:10" pos:end="39:21"><name pos:start="39:10" pos:end="39:21">MMU_HYPV_IDX</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:45"><expr pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:9">u</name><operator pos:start="41:10" pos:end="41:10">.</operator><name pos:start="41:11" pos:end="41:12">ll</name><operator pos:start="41:13" pos:end="41:13">.</operator><name pos:start="41:14" pos:end="41:18">upper</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:44"><name pos:start="41:22" pos:end="41:33">cpu_ldq_hypv</name><argument_list pos:start="41:34" pos:end="41:44">(<argument pos:start="41:35" pos:end="41:37"><expr pos:start="41:35" pos:end="41:37"><name pos:start="41:35" pos:end="41:37">env</name></expr></argument>, <argument pos:start="41:40" pos:end="41:43"><expr pos:start="41:40" pos:end="41:43"><name pos:start="41:40" pos:end="41:43">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:49"><expr pos:start="43:9" pos:end="43:48"><name pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:9">u</name><operator pos:start="43:10" pos:end="43:10">.</operator><name pos:start="43:11" pos:end="43:12">ll</name><operator pos:start="43:13" pos:end="43:13">.</operator><name pos:start="43:14" pos:end="43:18">lower</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:48"><name pos:start="43:22" pos:end="43:33">cpu_ldq_hypv</name><argument_list pos:start="43:34" pos:end="43:48">(<argument pos:start="43:35" pos:end="43:37"><expr pos:start="43:35" pos:end="43:37"><name pos:start="43:35" pos:end="43:37">env</name></expr></argument>, <argument pos:start="43:40" pos:end="43:47"><expr pos:start="43:40" pos:end="43:47"><name pos:start="43:40" pos:end="43:43">addr</name> <operator pos:start="43:45" pos:end="43:45">+</operator> <literal type="number" pos:start="43:47" pos:end="43:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:18"><expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:11">QT0</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:17"><name pos:start="45:15" pos:end="45:15">u</name><operator pos:start="45:16" pos:end="45:16">.</operator><name pos:start="45:17" pos:end="45:17">q</name></name></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="50:0">break;</break>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

    <default pos:start="51:5" pos:end="51:12">default:</default>

        <expr_stmt pos:start="53:9" pos:end="53:72"><expr pos:start="53:9" pos:end="53:71"><call pos:start="53:9" pos:end="53:71"><name pos:start="53:9" pos:end="53:19">DPRINTF_MMU</name><argument_list pos:start="53:20" pos:end="53:71">(<argument pos:start="53:21" pos:end="53:61"><expr pos:start="53:21" pos:end="53:61"><literal type="string" pos:start="53:21" pos:end="53:61">"helper_ldqf: need to check MMU idx %d\n"</literal></expr></argument>, <argument pos:start="53:64" pos:end="53:70"><expr pos:start="53:64" pos:end="53:70"><name pos:start="53:64" pos:end="53:70">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    </block_content>}</block></switch>

<cpp:else pos:start="59:1" pos:end="59:5">#<cpp:directive pos:start="59:2" pos:end="59:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="61:5" pos:end="61:50"><expr pos:start="61:5" pos:end="61:49"><name pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:5">u</name><operator pos:start="61:6" pos:end="61:6">.</operator><name pos:start="61:7" pos:end="61:8">ll</name><operator pos:start="61:9" pos:end="61:9">.</operator><name pos:start="61:10" pos:end="61:14">upper</name></name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:49"><name pos:start="61:18" pos:end="61:24">ldq_raw</name><argument_list pos:start="61:25" pos:end="61:49">(<argument pos:start="61:26" pos:end="61:48"><expr pos:start="61:26" pos:end="61:48"><call pos:start="61:26" pos:end="61:48"><name pos:start="61:26" pos:end="61:37">address_mask</name><argument_list pos:start="61:38" pos:end="61:48">(<argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><name pos:start="61:39" pos:end="61:41">env</name></expr></argument>, <argument pos:start="61:44" pos:end="61:47"><expr pos:start="61:44" pos:end="61:47"><name pos:start="61:44" pos:end="61:47">addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:54"><expr pos:start="63:5" pos:end="63:53"><name pos:start="63:5" pos:end="63:14"><name pos:start="63:5" pos:end="63:5">u</name><operator pos:start="63:6" pos:end="63:6">.</operator><name pos:start="63:7" pos:end="63:8">ll</name><operator pos:start="63:9" pos:end="63:9">.</operator><name pos:start="63:10" pos:end="63:14">lower</name></name> <operator pos:start="63:16" pos:end="63:16">=</operator> <call pos:start="63:18" pos:end="63:53"><name pos:start="63:18" pos:end="63:24">ldq_raw</name><argument_list pos:start="63:25" pos:end="63:53">(<argument pos:start="63:26" pos:end="63:52"><expr pos:start="63:26" pos:end="63:52"><call pos:start="63:26" pos:end="63:52"><name pos:start="63:26" pos:end="63:37">address_mask</name><argument_list pos:start="63:38" pos:end="63:52">(<argument pos:start="63:39" pos:end="63:41"><expr pos:start="63:39" pos:end="63:41"><name pos:start="63:39" pos:end="63:41">env</name></expr></argument>, <argument pos:start="63:44" pos:end="63:51"><expr pos:start="63:44" pos:end="63:51"><name pos:start="63:44" pos:end="63:47">addr</name> <operator pos:start="63:49" pos:end="63:49">+</operator> <literal type="number" pos:start="63:51" pos:end="63:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="68:0"><expr pos:start="65:5" pos:end="65:13"><name pos:start="65:5" pos:end="65:7">QT0</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <name pos:start="65:11" pos:end="65:13"><name pos:start="65:11" pos:end="65:11">u</name><operator pos:start="65:12" pos:end="65:12">.</operator><name pos:start="65:13" pos:end="65:13">q</name></name></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
