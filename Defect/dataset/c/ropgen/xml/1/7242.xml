<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7242.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:23">address_space_map</name><parameter_list pos:start="1:24" pos:end="7:38">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:36">AddressSpace</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">as</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:35"><decl pos:start="3:25" pos:end="3:35"><type pos:start="3:25" pos:end="3:35"><name pos:start="3:25" pos:end="3:30">hwaddr</name></type> <name pos:start="3:32" pos:end="3:35">addr</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:36"><decl pos:start="5:25" pos:end="5:36"><type pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:30">hwaddr</name> <modifier pos:start="5:32" pos:end="5:32">*</modifier></type><name pos:start="5:33" pos:end="5:36">plen</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:37"><decl pos:start="7:25" pos:end="7:37"><type pos:start="7:25" pos:end="7:37"><name pos:start="7:25" pos:end="7:28">bool</name></type> <name pos:start="7:30" pos:end="7:37">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="117:1">{<block_content pos:start="11:5" pos:end="115:51">

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:14">len</name> <init pos:start="11:16" pos:end="11:22">= <expr pos:start="11:18" pos:end="11:22"><operator pos:start="11:18" pos:end="11:18">*</operator><name pos:start="11:19" pos:end="11:22">plen</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:15">done</name> <init pos:start="13:17" pos:end="13:19">= <expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">hwaddr</name></type> <name pos:start="15:12" pos:end="15:12">l</name></decl>, <decl pos:start="15:15" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:15" pos:end="15:18">xlat</name></decl>, <decl pos:start="15:21" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:21" pos:end="15:24">base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:20">mr</name></decl>, <decl pos:start="17:23" pos:end="17:30"><type ref="prev" pos:start="17:5" pos:end="17:18"><modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:30">this_mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:14">ram_addr_t</name></type> <name pos:start="19:16" pos:end="19:20">raddr</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:17">(<expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:11">len</name> <operator pos:start="23:13" pos:end="23:14">==</operator> <literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>)</condition> <block pos:start="23:19" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:20">

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:12"><expr pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:5">l</name> <operator pos:start="31:7" pos:end="31:7">=</operator> <name pos:start="31:9" pos:end="31:11">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:64"><expr pos:start="33:5" pos:end="33:63"><name pos:start="33:5" pos:end="33:6">mr</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:63"><name pos:start="33:10" pos:end="33:32">address_space_translate</name><argument_list pos:start="33:33" pos:end="33:63">(<argument pos:start="33:34" pos:end="33:35"><expr pos:start="33:34" pos:end="33:35"><name pos:start="33:34" pos:end="33:35">as</name></expr></argument>, <argument pos:start="33:38" pos:end="33:41"><expr pos:start="33:38" pos:end="33:41"><name pos:start="33:38" pos:end="33:41">addr</name></expr></argument>, <argument pos:start="33:44" pos:end="33:48"><expr pos:start="33:44" pos:end="33:48"><operator pos:start="33:44" pos:end="33:44">&amp;</operator><name pos:start="33:45" pos:end="33:48">xlat</name></expr></argument>, <argument pos:start="33:51" pos:end="33:52"><expr pos:start="33:51" pos:end="33:52"><operator pos:start="33:51" pos:end="33:51">&amp;</operator><name pos:start="33:52" pos:end="33:52">l</name></expr></argument>, <argument pos:start="33:55" pos:end="33:62"><expr pos:start="33:55" pos:end="33:62"><name pos:start="33:55" pos:end="33:62">is_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="71:5"><if pos:start="35:5" pos:end="71:5">if <condition pos:start="35:8" pos:end="35:47">(<expr pos:start="35:9" pos:end="35:46"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:46"><name pos:start="35:10" pos:end="35:32">memory_access_is_direct</name><argument_list pos:start="35:33" pos:end="35:46">(<argument pos:start="35:34" pos:end="35:35"><expr pos:start="35:34" pos:end="35:35"><name pos:start="35:34" pos:end="35:35">mr</name></expr></argument>, <argument pos:start="35:38" pos:end="35:45"><expr pos:start="35:38" pos:end="35:45"><name pos:start="35:38" pos:end="35:45">is_write</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:49" pos:end="71:5">{<block_content pos:start="37:9" pos:end="69:29">

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:26">(<expr pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:18">bounce</name><operator pos:start="37:19" pos:end="37:19">.</operator><name pos:start="37:20" pos:end="37:25">buffer</name></name></expr>)</condition> <block pos:start="37:28" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:24">

            <return pos:start="39:13" pos:end="39:24">return <expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="43:9" pos:end="43:41">/* Avoid unbounded allocations */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:9">l</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:36"><name pos:start="45:13" pos:end="45:15">MIN</name><argument_list pos:start="45:16" pos:end="45:36">(<argument pos:start="45:17" pos:end="45:17"><expr pos:start="45:17" pos:end="45:17"><name pos:start="45:17" pos:end="45:17">l</name></expr></argument>, <argument pos:start="45:20" pos:end="45:35"><expr pos:start="45:20" pos:end="45:35"><name pos:start="45:20" pos:end="45:35">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:59"><expr pos:start="47:9" pos:end="47:58"><name pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:14">bounce</name><operator pos:start="47:15" pos:end="47:15">.</operator><name pos:start="47:16" pos:end="47:21">buffer</name></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <call pos:start="47:25" pos:end="47:58"><name pos:start="47:25" pos:end="47:37">qemu_memalign</name><argument_list pos:start="47:38" pos:end="47:58">(<argument pos:start="47:39" pos:end="47:54"><expr pos:start="47:39" pos:end="47:54"><name pos:start="47:39" pos:end="47:54">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="47:57" pos:end="47:57"><expr pos:start="47:57" pos:end="47:57"><name pos:start="47:57" pos:end="47:57">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:27"><expr pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:14">bounce</name><operator pos:start="49:15" pos:end="49:15">.</operator><name pos:start="49:16" pos:end="49:19">addr</name></name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:26">addr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:23"><expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:14">bounce</name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:18">len</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:22">l</name></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><call pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:25">memory_region_ref</name><argument_list pos:start="55:26" pos:end="55:29">(<argument pos:start="55:27" pos:end="55:28"><expr pos:start="55:27" pos:end="55:28"><name pos:start="55:27" pos:end="55:28">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:14">bounce</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:17">mr</name></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:22">mr</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:22">(<expr pos:start="59:13" pos:end="59:21"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:21">is_write</name></expr>)</condition> <block pos:start="59:24" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:59">

            <expr_stmt pos:start="61:13" pos:end="61:59"><expr pos:start="61:13" pos:end="61:58"><call pos:start="61:13" pos:end="61:58"><name pos:start="61:13" pos:end="61:30">address_space_read</name><argument_list pos:start="61:31" pos:end="61:58">(<argument pos:start="61:32" pos:end="61:33"><expr pos:start="61:32" pos:end="61:33"><name pos:start="61:32" pos:end="61:33">as</name></expr></argument>, <argument pos:start="61:36" pos:end="61:39"><expr pos:start="61:36" pos:end="61:39"><name pos:start="61:36" pos:end="61:39">addr</name></expr></argument>, <argument pos:start="61:42" pos:end="61:54"><expr pos:start="61:42" pos:end="61:54"><name pos:start="61:42" pos:end="61:54"><name pos:start="61:42" pos:end="61:47">bounce</name><operator pos:start="61:48" pos:end="61:48">.</operator><name pos:start="61:49" pos:end="61:54">buffer</name></name></expr></argument>, <argument pos:start="61:57" pos:end="61:57"><expr pos:start="61:57" pos:end="61:57"><name pos:start="61:57" pos:end="61:57">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><operator pos:start="67:9" pos:end="67:9">*</operator><name pos:start="67:10" pos:end="67:13">plen</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:17">l</name></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:29">return <expr pos:start="69:16" pos:end="69:28"><name pos:start="69:16" pos:end="69:28"><name pos:start="69:16" pos:end="69:21">bounce</name><operator pos:start="69:22" pos:end="69:22">.</operator><name pos:start="69:23" pos:end="69:28">buffer</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:16"><expr pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:8">base</name> <operator pos:start="75:10" pos:end="75:10">=</operator> <name pos:start="75:12" pos:end="75:15">xlat</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:43"><expr pos:start="77:5" pos:end="77:42"><name pos:start="77:5" pos:end="77:9">raddr</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <call pos:start="77:13" pos:end="77:42"><name pos:start="77:13" pos:end="77:38">memory_region_get_ram_addr</name><argument_list pos:start="77:39" pos:end="77:42">(<argument pos:start="77:40" pos:end="77:41"><expr pos:start="77:40" pos:end="77:41"><name pos:start="77:40" pos:end="77:41">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="81:5" pos:end="107:5">for <control pos:start="81:9" pos:end="81:12">(<init pos:start="81:10" pos:end="81:10">;</init><condition pos:start="81:11" pos:end="81:11">;</condition><incr/>)</control> <block pos:start="81:14" pos:end="107:5">{<block_content pos:start="83:9" pos:end="105:9">

        <expr_stmt pos:start="83:9" pos:end="83:17"><expr pos:start="83:9" pos:end="83:16"><name pos:start="83:9" pos:end="83:11">len</name> <operator pos:start="83:13" pos:end="83:14">-=</operator> <name pos:start="83:16" pos:end="83:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:18"><expr pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:12">addr</name> <operator pos:start="85:14" pos:end="85:15">+=</operator> <name pos:start="85:17" pos:end="85:17">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:18"><expr pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:12">done</name> <operator pos:start="87:14" pos:end="87:15">+=</operator> <name pos:start="87:17" pos:end="87:17">l</name></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:21">(<expr pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:15">len</name> <operator pos:start="89:17" pos:end="89:18">==</operator> <literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr>)</condition> <block pos:start="89:23" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:18">

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:16"><expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:9">l</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <name pos:start="97:13" pos:end="97:15">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:73"><expr pos:start="99:9" pos:end="99:72"><name pos:start="99:9" pos:end="99:15">this_mr</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:72"><name pos:start="99:19" pos:end="99:41">address_space_translate</name><argument_list pos:start="99:42" pos:end="99:72">(<argument pos:start="99:43" pos:end="99:44"><expr pos:start="99:43" pos:end="99:44"><name pos:start="99:43" pos:end="99:44">as</name></expr></argument>, <argument pos:start="99:47" pos:end="99:50"><expr pos:start="99:47" pos:end="99:50"><name pos:start="99:47" pos:end="99:50">addr</name></expr></argument>, <argument pos:start="99:53" pos:end="99:57"><expr pos:start="99:53" pos:end="99:57"><operator pos:start="99:53" pos:end="99:53">&amp;</operator><name pos:start="99:54" pos:end="99:57">xlat</name></expr></argument>, <argument pos:start="99:60" pos:end="99:61"><expr pos:start="99:60" pos:end="99:61"><operator pos:start="99:60" pos:end="99:60">&amp;</operator><name pos:start="99:61" pos:end="99:61">l</name></expr></argument>, <argument pos:start="99:64" pos:end="99:71"><expr pos:start="99:64" pos:end="99:71"><name pos:start="99:64" pos:end="99:71">is_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:49">(<expr pos:start="101:13" pos:end="101:48"><name pos:start="101:13" pos:end="101:19">this_mr</name> <operator pos:start="101:21" pos:end="101:22">!=</operator> <name pos:start="101:24" pos:end="101:25">mr</name> <operator pos:start="101:27" pos:end="101:28">||</operator> <name pos:start="101:30" pos:end="101:33">xlat</name> <operator pos:start="101:35" pos:end="101:36">!=</operator> <name pos:start="101:38" pos:end="101:41">base</name> <operator pos:start="101:43" pos:end="101:43">+</operator> <name pos:start="101:45" pos:end="101:48">done</name></expr>)</condition> <block pos:start="101:51" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:18">

            <break pos:start="103:13" pos:end="103:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="111:5" pos:end="111:26"><expr pos:start="111:5" pos:end="111:25"><call pos:start="111:5" pos:end="111:25"><name pos:start="111:5" pos:end="111:21">memory_region_ref</name><argument_list pos:start="111:22" pos:end="111:25">(<argument pos:start="111:23" pos:end="111:24"><expr pos:start="111:23" pos:end="111:24"><name pos:start="111:23" pos:end="111:24">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:17"><expr pos:start="113:5" pos:end="113:16"><operator pos:start="113:5" pos:end="113:5">*</operator><name pos:start="113:6" pos:end="113:9">plen</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <name pos:start="113:13" pos:end="113:16">done</name></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:51">return <expr pos:start="115:12" pos:end="115:50"><call pos:start="115:12" pos:end="115:50"><name pos:start="115:12" pos:end="115:30">qemu_ram_ptr_length</name><argument_list pos:start="115:31" pos:end="115:50">(<argument pos:start="115:32" pos:end="115:43"><expr pos:start="115:32" pos:end="115:43"><name pos:start="115:32" pos:end="115:36">raddr</name> <operator pos:start="115:38" pos:end="115:38">+</operator> <name pos:start="115:40" pos:end="115:43">base</name></expr></argument>, <argument pos:start="115:46" pos:end="115:49"><expr pos:start="115:46" pos:end="115:49"><name pos:start="115:46" pos:end="115:49">plen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
