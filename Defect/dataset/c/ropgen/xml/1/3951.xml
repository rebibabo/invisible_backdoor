<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3951.c" pos:tabs="8"><function pos:start="1:1" pos:end="309:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">qcow_create</name><parameter_list pos:start="1:23" pos:end="1:74">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:43">filename</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:59"><decl pos:start="1:46" pos:end="1:59"><type pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:53">QemuOpts</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">opts</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:66">Error</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier><modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="309:1">{<block_content pos:start="5:5" pos:end="307:15">

    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">header_size</name></decl>, <decl pos:start="5:22" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:41">backing_filename_len</name></decl>, <decl pos:start="5:44" pos:end="5:50"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:44" pos:end="5:50">l1_size</name></decl>, <decl pos:start="5:53" pos:end="5:57"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:53" pos:end="5:57">shift</name></decl>, <decl pos:start="5:60" pos:end="5:60"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:60" pos:end="5:60">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">QCowHeader</name></type> <name pos:start="7:16" pos:end="7:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:22">total_size</name> <init pos:start="11:24" pos:end="11:26">= <expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:22">backing_file</name> <init pos:start="13:24" pos:end="13:29">= <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">BlockBackend</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:26">qcow_blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:26">encryptfmt</name> <init pos:start="21:28" pos:end="21:33">= <expr pos:start="21:30" pos:end="21:33"><name pos:start="21:30" pos:end="21:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">QDict</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:18">options</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:9">QDict</name> <modifier pos:start="25:11" pos:end="25:11">*</modifier></type><name pos:start="25:12" pos:end="25:22">encryptopts</name> <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:50"><decl pos:start="27:5" pos:end="27:49"><type pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:29">QCryptoBlockCreateOptions</name> <modifier pos:start="27:31" pos:end="27:31">*</modifier></type><name pos:start="27:32" pos:end="27:42">crypto_opts</name> <init pos:start="27:44" pos:end="27:49">= <expr pos:start="27:46" pos:end="27:49"><name pos:start="27:46" pos:end="27:49">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">QCryptoBlock</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:24">crypto</name> <init pos:start="29:26" pos:end="29:31">= <expr pos:start="29:28" pos:end="29:31"><name pos:start="29:28" pos:end="29:31">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:26">/* Read out options */</comment>

    <expr_stmt pos:start="35:5" pos:end="37:44"><expr pos:start="35:5" pos:end="37:43"><name pos:start="35:5" pos:end="35:14">total_size</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="37:43"><name pos:start="35:18" pos:end="35:25">ROUND_UP</name><argument_list pos:start="35:26" pos:end="37:43">(<argument pos:start="35:27" pos:end="35:72"><expr pos:start="35:27" pos:end="35:72"><call pos:start="35:27" pos:end="35:72"><name pos:start="35:27" pos:end="35:47">qemu_opt_get_size_del</name><argument_list pos:start="35:48" pos:end="35:72">(<argument pos:start="35:49" pos:end="35:52"><expr pos:start="35:49" pos:end="35:52"><name pos:start="35:49" pos:end="35:52">opts</name></expr></argument>, <argument pos:start="35:55" pos:end="35:68"><expr pos:start="35:55" pos:end="35:68"><name pos:start="35:55" pos:end="35:68">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="35:71" pos:end="35:71"><expr pos:start="35:71" pos:end="35:71"><literal type="number" pos:start="35:71" pos:end="35:71">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="37:27" pos:end="37:42"><expr pos:start="37:27" pos:end="37:42"><name pos:start="37:27" pos:end="37:42">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:24">(<expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:18">total_size</name> <operator pos:start="39:20" pos:end="39:21">==</operator> <literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr>)</condition> <block pos:start="39:26" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:21">

        <expr_stmt pos:start="41:9" pos:end="41:75"><expr pos:start="41:9" pos:end="41:74"><call pos:start="41:9" pos:end="41:74"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="41:74">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="41:73"><expr pos:start="41:26" pos:end="41:73"><literal type="string" pos:start="41:26" pos:end="41:73">"Image size is too small, cannot be zero length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <operator pos:start="43:15" pos:end="43:15">-</operator><name pos:start="43:16" pos:end="43:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:21">goto <name pos:start="45:14" pos:end="45:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:66"><expr pos:start="51:5" pos:end="51:65"><name pos:start="51:5" pos:end="51:16">backing_file</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:65"><name pos:start="51:20" pos:end="51:35">qemu_opt_get_del</name><argument_list pos:start="51:36" pos:end="51:65">(<argument pos:start="51:37" pos:end="51:40"><expr pos:start="51:37" pos:end="51:40"><name pos:start="51:37" pos:end="51:40">opts</name></expr></argument>, <argument pos:start="51:43" pos:end="51:64"><expr pos:start="51:43" pos:end="51:64"><name pos:start="51:43" pos:end="51:64">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:66"><expr pos:start="53:5" pos:end="53:65"><name pos:start="53:5" pos:end="53:14">encryptfmt</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:65"><name pos:start="53:18" pos:end="53:33">qemu_opt_get_del</name><argument_list pos:start="53:34" pos:end="53:65">(<argument pos:start="53:35" pos:end="53:38"><expr pos:start="53:35" pos:end="53:38"><name pos:start="53:35" pos:end="53:38">opts</name></expr></argument>, <argument pos:start="53:41" pos:end="53:64"><expr pos:start="53:41" pos:end="53:64"><name pos:start="53:41" pos:end="53:64">BLOCK_OPT_ENCRYPT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="73:5"><if pos:start="55:5" pos:end="69:5">if <condition pos:start="55:8" pos:end="55:19">(<expr pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:18">encryptfmt</name></expr>)</condition> <block pos:start="55:21" pos:end="69:5">{<block_content pos:start="57:9" pos:end="67:9">

        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="67:9">if <condition pos:start="57:12" pos:end="57:50">(<expr pos:start="57:13" pos:end="57:49"><call pos:start="57:13" pos:end="57:49"><name pos:start="57:13" pos:end="57:24">qemu_opt_get</name><argument_list pos:start="57:25" pos:end="57:49">(<argument pos:start="57:26" pos:end="57:29"><expr pos:start="57:26" pos:end="57:29"><name pos:start="57:26" pos:end="57:29">opts</name></expr></argument>, <argument pos:start="57:32" pos:end="57:48"><expr pos:start="57:32" pos:end="57:48"><name pos:start="57:32" pos:end="57:48">BLOCK_OPT_ENCRYPT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:52" pos:end="67:9">{<block_content pos:start="59:13" pos:end="65:25">

            <expr_stmt pos:start="59:13" pos:end="61:75"><expr pos:start="59:13" pos:end="61:74"><call pos:start="59:13" pos:end="61:74"><name pos:start="59:13" pos:end="59:22">error_setg</name><argument_list pos:start="59:23" pos:end="61:74">(<argument pos:start="59:24" pos:end="59:27"><expr pos:start="59:24" pos:end="59:27"><name pos:start="59:24" pos:end="59:27">errp</name></expr></argument>, <argument pos:start="59:30" pos:end="61:73"><expr pos:start="59:30" pos:end="61:73"><literal type="string" pos:start="59:30" pos:end="59:39">"Options "</literal> <name pos:start="59:41" pos:end="59:57">BLOCK_OPT_ENCRYPT</name> <literal type="string" pos:start="59:59" pos:end="59:65">" and "</literal>

                       <name pos:start="61:24" pos:end="61:47">BLOCK_OPT_ENCRYPT_FORMAT</name> <literal type="string" pos:start="61:49" pos:end="61:73">" are mutually exclusive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:26"><expr pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <operator pos:start="63:19" pos:end="63:19">-</operator><name pos:start="63:20" pos:end="63:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:25">goto <name pos:start="65:18" pos:end="65:24">cleanup</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="73:5">else if <condition pos:start="69:15" pos:end="69:69">(<expr pos:start="69:16" pos:end="69:68"><call pos:start="69:16" pos:end="69:68"><name pos:start="69:16" pos:end="69:36">qemu_opt_get_bool_del</name><argument_list pos:start="69:37" pos:end="69:68">(<argument pos:start="69:38" pos:end="69:41"><expr pos:start="69:38" pos:end="69:41"><name pos:start="69:38" pos:end="69:41">opts</name></expr></argument>, <argument pos:start="69:44" pos:end="69:60"><expr pos:start="69:44" pos:end="69:60"><name pos:start="69:44" pos:end="69:60">BLOCK_OPT_ENCRYPT</name></expr></argument>, <argument pos:start="69:63" pos:end="69:67"><expr pos:start="69:63" pos:end="69:67"><name pos:start="69:63" pos:end="69:67">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:71" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:27">

        <expr_stmt pos:start="71:9" pos:end="71:27"><expr pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:18">encryptfmt</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <literal type="string" pos:start="71:22" pos:end="71:26">"aes"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:55"><expr pos:start="77:5" pos:end="77:54"><name pos:start="77:5" pos:end="77:7">ret</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:54"><name pos:start="77:11" pos:end="77:26">bdrv_create_file</name><argument_list pos:start="77:27" pos:end="77:54">(<argument pos:start="77:28" pos:end="77:35"><expr pos:start="77:28" pos:end="77:35"><name pos:start="77:28" pos:end="77:35">filename</name></expr></argument>, <argument pos:start="77:38" pos:end="77:41"><expr pos:start="77:38" pos:end="77:41"><name pos:start="77:38" pos:end="77:41">opts</name></expr></argument>, <argument pos:start="77:44" pos:end="77:53"><expr pos:start="77:44" pos:end="77:53"><operator pos:start="77:44" pos:end="77:44">&amp;</operator><name pos:start="77:45" pos:end="77:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">&lt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal></expr>)</condition> <block pos:start="79:18" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:21">

        <expr_stmt pos:start="81:9" pos:end="81:41"><expr pos:start="81:9" pos:end="81:40"><call pos:start="81:9" pos:end="81:40"><name pos:start="81:9" pos:end="81:23">error_propagate</name><argument_list pos:start="81:24" pos:end="81:40">(<argument pos:start="81:25" pos:end="81:28"><expr pos:start="81:25" pos:end="81:28"><name pos:start="81:25" pos:end="81:28">errp</name></expr></argument>, <argument pos:start="81:31" pos:end="81:39"><expr pos:start="81:31" pos:end="81:39"><name pos:start="81:31" pos:end="81:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:21">goto <name pos:start="83:14" pos:end="83:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="93:40"><expr pos:start="89:5" pos:end="93:39"><name pos:start="89:5" pos:end="89:12">qcow_blk</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <call pos:start="89:16" pos:end="93:39"><name pos:start="89:16" pos:end="89:27">blk_new_open</name><argument_list pos:start="89:28" pos:end="93:39">(<argument pos:start="89:29" pos:end="89:36"><expr pos:start="89:29" pos:end="89:36"><name pos:start="89:29" pos:end="89:36">filename</name></expr></argument>, <argument pos:start="89:39" pos:end="89:42"><expr pos:start="89:39" pos:end="89:42"><name pos:start="89:39" pos:end="89:42">NULL</name></expr></argument>, <argument pos:start="89:45" pos:end="89:48"><expr pos:start="89:45" pos:end="89:48"><name pos:start="89:45" pos:end="89:48">NULL</name></expr></argument>,

                            <argument pos:start="91:29" pos:end="91:73"><expr pos:start="91:29" pos:end="91:73"><name pos:start="91:29" pos:end="91:39">BDRV_O_RDWR</name> <operator pos:start="91:41" pos:end="91:41">|</operator> <name pos:start="91:43" pos:end="91:55">BDRV_O_RESIZE</name> <operator pos:start="91:57" pos:end="91:57">|</operator> <name pos:start="91:59" pos:end="91:73">BDRV_O_PROTOCOL</name></expr></argument>,

                            <argument pos:start="93:29" pos:end="93:38"><expr pos:start="93:29" pos:end="93:38"><operator pos:start="93:29" pos:end="93:29">&amp;</operator><name pos:start="93:30" pos:end="93:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:25">(<expr pos:start="95:9" pos:end="95:24"><name pos:start="95:9" pos:end="95:16">qcow_blk</name> <operator pos:start="95:18" pos:end="95:19">==</operator> <name pos:start="95:21" pos:end="95:24">NULL</name></expr>)</condition> <block pos:start="95:27" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:21">

        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><call pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:23">error_propagate</name><argument_list pos:start="97:24" pos:end="97:40">(<argument pos:start="97:25" pos:end="97:28"><expr pos:start="97:25" pos:end="97:28"><name pos:start="97:25" pos:end="97:28">errp</name></expr></argument>, <argument pos:start="97:31" pos:end="97:39"><expr pos:start="97:31" pos:end="97:39"><name pos:start="97:31" pos:end="97:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:19"><expr pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <operator pos:start="99:15" pos:end="99:15">-</operator><name pos:start="99:16" pos:end="99:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:21">goto <name pos:start="101:14" pos:end="101:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:51"><expr pos:start="107:5" pos:end="107:50"><call pos:start="107:5" pos:end="107:50"><name pos:start="107:5" pos:end="107:34">blk_set_allow_write_beyond_eof</name><argument_list pos:start="107:35" pos:end="107:50">(<argument pos:start="107:36" pos:end="107:43"><expr pos:start="107:36" pos:end="107:43"><name pos:start="107:36" pos:end="107:43">qcow_blk</name></expr></argument>, <argument pos:start="107:46" pos:end="107:49"><expr pos:start="107:46" pos:end="107:49"><name pos:start="107:46" pos:end="107:49">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:61"><expr pos:start="111:5" pos:end="111:60"><name pos:start="111:5" pos:end="111:7">ret</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <call pos:start="111:11" pos:end="111:60"><name pos:start="111:11" pos:end="111:22">blk_truncate</name><argument_list pos:start="111:23" pos:end="111:60">(<argument pos:start="111:24" pos:end="111:31"><expr pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:31">qcow_blk</name></expr></argument>, <argument pos:start="111:34" pos:end="111:34"><expr pos:start="111:34" pos:end="111:34"><literal type="number" pos:start="111:34" pos:end="111:34">0</literal></expr></argument>, <argument pos:start="111:37" pos:end="111:53"><expr pos:start="111:37" pos:end="111:53"><name pos:start="111:37" pos:end="111:53">PREALLOC_MODE_OFF</name></expr></argument>, <argument pos:start="111:56" pos:end="111:59"><expr pos:start="111:56" pos:end="111:59"><name pos:start="111:56" pos:end="111:59">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="117:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:16">(<expr pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">&lt;</operator> <literal type="number" pos:start="113:15" pos:end="113:15">0</literal></expr>)</condition> <block pos:start="113:18" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:18">

        <goto pos:start="115:9" pos:end="115:18">goto <name pos:start="115:14" pos:end="115:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:39"><expr pos:start="121:5" pos:end="121:38"><call pos:start="121:5" pos:end="121:38"><name pos:start="121:5" pos:end="121:10">memset</name><argument_list pos:start="121:11" pos:end="121:38">(<argument pos:start="121:12" pos:end="121:18"><expr pos:start="121:12" pos:end="121:18"><operator pos:start="121:12" pos:end="121:12">&amp;</operator><name pos:start="121:13" pos:end="121:18">header</name></expr></argument>, <argument pos:start="121:21" pos:end="121:21"><expr pos:start="121:21" pos:end="121:21"><literal type="number" pos:start="121:21" pos:end="121:21">0</literal></expr></argument>, <argument pos:start="121:24" pos:end="121:37"><expr pos:start="121:24" pos:end="121:37"><sizeof pos:start="121:24" pos:end="121:37">sizeof<argument_list pos:start="121:30" pos:end="121:37">(<argument pos:start="121:31" pos:end="121:36"><expr pos:start="121:31" pos:end="121:36"><name pos:start="121:31" pos:end="121:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:43"><expr pos:start="123:5" pos:end="123:42"><name pos:start="123:5" pos:end="123:16"><name pos:start="123:5" pos:end="123:10">header</name><operator pos:start="123:11" pos:end="123:11">.</operator><name pos:start="123:12" pos:end="123:16">magic</name></name> <operator pos:start="123:18" pos:end="123:18">=</operator> <call pos:start="123:20" pos:end="123:42"><name pos:start="123:20" pos:end="123:30">cpu_to_be32</name><argument_list pos:start="123:31" pos:end="123:42">(<argument pos:start="123:32" pos:end="123:41"><expr pos:start="123:32" pos:end="123:41"><name pos:start="123:32" pos:end="123:41">QCOW_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:47"><expr pos:start="125:5" pos:end="125:46"><name pos:start="125:5" pos:end="125:18"><name pos:start="125:5" pos:end="125:10">header</name><operator pos:start="125:11" pos:end="125:11">.</operator><name pos:start="125:12" pos:end="125:18">version</name></name> <operator pos:start="125:20" pos:end="125:20">=</operator> <call pos:start="125:22" pos:end="125:46"><name pos:start="125:22" pos:end="125:32">cpu_to_be32</name><argument_list pos:start="125:33" pos:end="125:46">(<argument pos:start="125:34" pos:end="125:45"><expr pos:start="125:34" pos:end="125:45"><name pos:start="125:34" pos:end="125:45">QCOW_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:42"><expr pos:start="127:5" pos:end="127:41"><name pos:start="127:5" pos:end="127:15"><name pos:start="127:5" pos:end="127:10">header</name><operator pos:start="127:11" pos:end="127:11">.</operator><name pos:start="127:12" pos:end="127:15">size</name></name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="127:41"><name pos:start="127:19" pos:end="127:29">cpu_to_be64</name><argument_list pos:start="127:30" pos:end="127:41">(<argument pos:start="127:31" pos:end="127:40"><expr pos:start="127:31" pos:end="127:40"><name pos:start="127:31" pos:end="127:40">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:33"><expr pos:start="129:5" pos:end="129:32"><name pos:start="129:5" pos:end="129:15">header_size</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <sizeof pos:start="129:19" pos:end="129:32">sizeof<argument_list pos:start="129:25" pos:end="129:32">(<argument pos:start="129:26" pos:end="129:31"><expr pos:start="129:26" pos:end="129:31"><name pos:start="129:26" pos:end="129:31">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:29"><expr pos:start="131:5" pos:end="131:28"><name pos:start="131:5" pos:end="131:24">backing_filename_len</name> <operator pos:start="131:26" pos:end="131:26">=</operator> <literal type="number" pos:start="131:28" pos:end="131:28">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="167:5"><if pos:start="133:5" pos:end="161:5">if <condition pos:start="133:8" pos:end="133:21">(<expr pos:start="133:9" pos:end="133:20"><name pos:start="133:9" pos:end="133:20">backing_file</name></expr>)</condition> <block pos:start="133:23" pos:end="161:5">{<block_content pos:start="135:9" pos:end="159:28">

        <if_stmt pos:start="135:9" pos:end="153:9"><if pos:start="135:9" pos:end="145:9">if <condition pos:start="135:12" pos:end="135:41">(<expr pos:start="135:13" pos:end="135:40"><call pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:18">strcmp</name><argument_list pos:start="135:19" pos:end="135:40">(<argument pos:start="135:20" pos:end="135:31"><expr pos:start="135:20" pos:end="135:31"><name pos:start="135:20" pos:end="135:31">backing_file</name></expr></argument>, <argument pos:start="135:34" pos:end="135:39"><expr pos:start="135:34" pos:end="135:39"><literal type="string" pos:start="135:34" pos:end="135:39">"fat:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:43" pos:end="145:9">{<block_content pos:start="137:13" pos:end="143:48">

            <expr_stmt pos:start="137:13" pos:end="137:66"><expr pos:start="137:13" pos:end="137:65"><name pos:start="137:13" pos:end="137:38"><name pos:start="137:13" pos:end="137:18">header</name><operator pos:start="137:19" pos:end="137:19">.</operator><name pos:start="137:20" pos:end="137:38">backing_file_offset</name></name> <operator pos:start="137:40" pos:end="137:40">=</operator> <call pos:start="137:42" pos:end="137:65"><name pos:start="137:42" pos:end="137:52">cpu_to_be64</name><argument_list pos:start="137:53" pos:end="137:65">(<argument pos:start="137:54" pos:end="137:64"><expr pos:start="137:54" pos:end="137:64"><name pos:start="137:54" pos:end="137:64">header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:56"><expr pos:start="139:13" pos:end="139:55"><name pos:start="139:13" pos:end="139:32">backing_filename_len</name> <operator pos:start="139:34" pos:end="139:34">=</operator> <call pos:start="139:36" pos:end="139:55"><name pos:start="139:36" pos:end="139:41">strlen</name><argument_list pos:start="139:42" pos:end="139:55">(<argument pos:start="139:43" pos:end="139:54"><expr pos:start="139:43" pos:end="139:54"><name pos:start="139:43" pos:end="139:54">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:73"><expr pos:start="141:13" pos:end="141:72"><name pos:start="141:13" pos:end="141:36"><name pos:start="141:13" pos:end="141:18">header</name><operator pos:start="141:19" pos:end="141:19">.</operator><name pos:start="141:20" pos:end="141:36">backing_file_size</name></name> <operator pos:start="141:38" pos:end="141:38">=</operator> <call pos:start="141:40" pos:end="141:72"><name pos:start="141:40" pos:end="141:50">cpu_to_be32</name><argument_list pos:start="141:51" pos:end="141:72">(<argument pos:start="141:52" pos:end="141:71"><expr pos:start="141:52" pos:end="141:71"><name pos:start="141:52" pos:end="141:71">backing_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:48"><expr pos:start="143:13" pos:end="143:47"><name pos:start="143:13" pos:end="143:23">header_size</name> <operator pos:start="143:25" pos:end="143:26">+=</operator> <name pos:start="143:28" pos:end="143:47">backing_filename_len</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="145:11" pos:end="153:9">else <block pos:start="145:16" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:32">

            <comment type="block" pos:start="147:13" pos:end="147:48">/* special backing file for vvfat */</comment>

            <expr_stmt pos:start="149:13" pos:end="149:33"><expr pos:start="149:13" pos:end="149:32"><call pos:start="149:13" pos:end="149:32"><name pos:start="149:13" pos:end="149:18">g_free</name><argument_list pos:start="149:19" pos:end="149:32">(<argument pos:start="149:20" pos:end="149:31"><expr pos:start="149:20" pos:end="149:31"><name pos:start="149:20" pos:end="149:31">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:32"><expr pos:start="151:13" pos:end="151:31"><name pos:start="151:13" pos:end="151:24">backing_file</name> <operator pos:start="151:26" pos:end="151:26">=</operator> <name pos:start="151:28" pos:end="151:31">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:32"><expr pos:start="155:9" pos:end="155:31"><name pos:start="155:9" pos:end="155:27"><name pos:start="155:9" pos:end="155:14">header</name><operator pos:start="155:15" pos:end="155:15">.</operator><name pos:start="155:16" pos:end="155:27">cluster_bits</name></name> <operator pos:start="155:29" pos:end="155:29">=</operator> <literal type="number" pos:start="155:31" pos:end="155:31">9</literal></expr>;</expr_stmt> <comment type="block" pos:start="155:34" pos:end="157:57">/* 512 byte cluster to avoid copying

                                    unmodified sectors */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:28"><expr pos:start="159:9" pos:end="159:27"><name pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:14">header</name><operator pos:start="159:15" pos:end="159:15">.</operator><name pos:start="159:16" pos:end="159:22">l2_bits</name></name> <operator pos:start="159:24" pos:end="159:24">=</operator> <literal type="number" pos:start="159:26" pos:end="159:27">12</literal></expr>;</expr_stmt> <comment type="block" pos:start="159:30" pos:end="159:50">/* 32 KB L2 tables */</comment>

    </block_content>}</block></if> <else pos:start="161:7" pos:end="167:5">else <block pos:start="161:12" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:27">

        <expr_stmt pos:start="163:9" pos:end="163:33"><expr pos:start="163:9" pos:end="163:32"><name pos:start="163:9" pos:end="163:27"><name pos:start="163:9" pos:end="163:14">header</name><operator pos:start="163:15" pos:end="163:15">.</operator><name pos:start="163:16" pos:end="163:27">cluster_bits</name></name> <operator pos:start="163:29" pos:end="163:29">=</operator> <literal type="number" pos:start="163:31" pos:end="163:32">12</literal></expr>;</expr_stmt> <comment type="block" pos:start="163:35" pos:end="163:53">/* 4 KB clusters */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:27"><expr pos:start="165:9" pos:end="165:26"><name pos:start="165:9" pos:end="165:22"><name pos:start="165:9" pos:end="165:14">header</name><operator pos:start="165:15" pos:end="165:15">.</operator><name pos:start="165:16" pos:end="165:22">l2_bits</name></name> <operator pos:start="165:24" pos:end="165:24">=</operator> <literal type="number" pos:start="165:26" pos:end="165:26">9</literal></expr>;</expr_stmt> <comment type="block" pos:start="165:29" pos:end="165:48">/* 4 KB L2 tables */</comment>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:41"><expr pos:start="169:5" pos:end="169:40"><name pos:start="169:5" pos:end="169:15">header_size</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <operator pos:start="169:19" pos:end="169:19">(</operator><name pos:start="169:20" pos:end="169:30">header_size</name> <operator pos:start="169:32" pos:end="169:32">+</operator> <literal type="number" pos:start="169:34" pos:end="169:34">7</literal><operator pos:start="169:35" pos:end="169:35">)</operator> <operator pos:start="169:37" pos:end="169:37">&amp;</operator> <operator pos:start="169:39" pos:end="169:39">~</operator><literal type="number" pos:start="169:40" pos:end="169:40">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:49"><expr pos:start="171:5" pos:end="171:48"><name pos:start="171:5" pos:end="171:9">shift</name> <operator pos:start="171:11" pos:end="171:11">=</operator> <name pos:start="171:13" pos:end="171:31"><name pos:start="171:13" pos:end="171:18">header</name><operator pos:start="171:19" pos:end="171:19">.</operator><name pos:start="171:20" pos:end="171:31">cluster_bits</name></name> <operator pos:start="171:33" pos:end="171:33">+</operator> <name pos:start="171:35" pos:end="171:48"><name pos:start="171:35" pos:end="171:40">header</name><operator pos:start="171:41" pos:end="171:41">.</operator><name pos:start="171:42" pos:end="171:48">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:57"><expr pos:start="173:5" pos:end="173:56"><name pos:start="173:5" pos:end="173:11">l1_size</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <operator pos:start="173:15" pos:end="173:15">(</operator><name pos:start="173:16" pos:end="173:25">total_size</name> <operator pos:start="173:27" pos:end="173:27">+</operator> <operator pos:start="173:29" pos:end="173:29">(</operator><literal type="number" pos:start="173:30" pos:end="173:32">1LL</literal> <operator pos:start="173:34" pos:end="173:35">&lt;&lt;</operator> <name pos:start="173:37" pos:end="173:41">shift</name><operator pos:start="173:42" pos:end="173:42">)</operator> <operator pos:start="173:44" pos:end="173:44">-</operator> <literal type="number" pos:start="173:46" pos:end="173:46">1</literal><operator pos:start="173:47" pos:end="173:47">)</operator> <operator pos:start="173:49" pos:end="173:50">&gt;&gt;</operator> <name pos:start="173:52" pos:end="173:56">shift</name></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:54"><expr pos:start="177:5" pos:end="177:53"><name pos:start="177:5" pos:end="177:26"><name pos:start="177:5" pos:end="177:10">header</name><operator pos:start="177:11" pos:end="177:11">.</operator><name pos:start="177:12" pos:end="177:26">l1_table_offset</name></name> <operator pos:start="177:28" pos:end="177:28">=</operator> <call pos:start="177:30" pos:end="177:53"><name pos:start="177:30" pos:end="177:40">cpu_to_be64</name><argument_list pos:start="177:41" pos:end="177:53">(<argument pos:start="177:42" pos:end="177:52"><expr pos:start="177:42" pos:end="177:52"><name pos:start="177:42" pos:end="177:52">header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:45"><expr pos:start="181:5" pos:end="181:44"><name pos:start="181:5" pos:end="181:11">options</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <call pos:start="181:15" pos:end="181:44"><name pos:start="181:15" pos:end="181:32">qemu_opts_to_qdict</name><argument_list pos:start="181:33" pos:end="181:44">(<argument pos:start="181:34" pos:end="181:37"><expr pos:start="181:34" pos:end="181:37"><name pos:start="181:34" pos:end="181:37">opts</name></expr></argument>, <argument pos:start="181:40" pos:end="181:43"><expr pos:start="181:40" pos:end="181:43"><name pos:start="181:40" pos:end="181:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:62"><expr pos:start="183:5" pos:end="183:61"><call pos:start="183:5" pos:end="183:61"><name pos:start="183:5" pos:end="183:26">qdict_extract_subqdict</name><argument_list pos:start="183:27" pos:end="183:61">(<argument pos:start="183:28" pos:end="183:34"><expr pos:start="183:28" pos:end="183:34"><name pos:start="183:28" pos:end="183:34">options</name></expr></argument>, <argument pos:start="183:37" pos:end="183:48"><expr pos:start="183:37" pos:end="183:48"><operator pos:start="183:37" pos:end="183:37">&amp;</operator><name pos:start="183:38" pos:end="183:48">encryptopts</name></expr></argument>, <argument pos:start="183:51" pos:end="183:60"><expr pos:start="183:51" pos:end="183:60"><literal type="string" pos:start="183:51" pos:end="183:60">"encrypt."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:21"><expr pos:start="185:5" pos:end="185:20"><call pos:start="185:5" pos:end="185:20"><name pos:start="185:5" pos:end="185:11">QDECREF</name><argument_list pos:start="185:12" pos:end="185:20">(<argument pos:start="185:13" pos:end="185:19"><expr pos:start="185:13" pos:end="185:19"><name pos:start="185:13" pos:end="185:19">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="235:5"><if pos:start="187:5" pos:end="231:5">if <condition pos:start="187:8" pos:end="187:19">(<expr pos:start="187:9" pos:end="187:18"><name pos:start="187:9" pos:end="187:18">encryptfmt</name></expr>)</condition> <block pos:start="187:21" pos:end="231:5">{<block_content pos:start="189:9" pos:end="229:9">

        <if_stmt pos:start="189:9" pos:end="199:9"><if pos:start="189:9" pos:end="199:9">if <condition pos:start="189:12" pos:end="189:44">(<expr pos:start="189:13" pos:end="189:43"><operator pos:start="189:13" pos:end="189:13">!</operator><call pos:start="189:14" pos:end="189:43"><name pos:start="189:14" pos:end="189:24">g_str_equal</name><argument_list pos:start="189:25" pos:end="189:43">(<argument pos:start="189:26" pos:end="189:35"><expr pos:start="189:26" pos:end="189:35"><name pos:start="189:26" pos:end="189:35">encryptfmt</name></expr></argument>, <argument pos:start="189:38" pos:end="189:42"><expr pos:start="189:38" pos:end="189:42"><literal type="string" pos:start="189:38" pos:end="189:42">"aes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:46" pos:end="199:9">{<block_content pos:start="191:13" pos:end="197:22">

            <expr_stmt pos:start="191:13" pos:end="193:35"><expr pos:start="191:13" pos:end="193:34"><call pos:start="191:13" pos:end="193:34"><name pos:start="191:13" pos:end="191:22">error_setg</name><argument_list pos:start="191:23" pos:end="193:34">(<argument pos:start="191:24" pos:end="191:27"><expr pos:start="191:24" pos:end="191:27"><name pos:start="191:24" pos:end="191:27">errp</name></expr></argument>, <argument pos:start="191:30" pos:end="191:77"><expr pos:start="191:30" pos:end="191:77"><literal type="string" pos:start="191:30" pos:end="191:77">"Unknown encryption format '%s', expected 'aes'"</literal></expr></argument>,

                       <argument pos:start="193:24" pos:end="193:33"><expr pos:start="193:24" pos:end="193:33"><name pos:start="193:24" pos:end="193:33">encryptfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:26"><expr pos:start="195:13" pos:end="195:25"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <operator pos:start="195:19" pos:end="195:19">-</operator><name pos:start="195:20" pos:end="195:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="197:13" pos:end="197:22">goto <name pos:start="197:18" pos:end="197:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:58"><expr pos:start="201:9" pos:end="201:57"><name pos:start="201:9" pos:end="201:27"><name pos:start="201:9" pos:end="201:14">header</name><operator pos:start="201:15" pos:end="201:15">.</operator><name pos:start="201:16" pos:end="201:27">crypt_method</name></name> <operator pos:start="201:29" pos:end="201:29">=</operator> <call pos:start="201:31" pos:end="201:57"><name pos:start="201:31" pos:end="201:41">cpu_to_be32</name><argument_list pos:start="201:42" pos:end="201:57">(<argument pos:start="201:43" pos:end="201:56"><expr pos:start="201:43" pos:end="201:56"><name pos:start="201:43" pos:end="201:56">QCOW_CRYPT_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="205:9" pos:end="207:59"><expr pos:start="205:9" pos:end="207:58"><name pos:start="205:9" pos:end="205:19">crypto_opts</name> <operator pos:start="205:21" pos:end="205:21">=</operator> <call pos:start="205:23" pos:end="207:58"><name pos:start="205:23" pos:end="205:51">block_crypto_create_opts_init</name><argument_list pos:start="205:52" pos:end="207:58">(

            <argument pos:start="207:13" pos:end="207:38"><expr pos:start="207:13" pos:end="207:38"><name pos:start="207:13" pos:end="207:38">Q_CRYPTO_BLOCK_FORMAT_QCOW</name></expr></argument>, <argument pos:start="207:41" pos:end="207:51"><expr pos:start="207:41" pos:end="207:51"><name pos:start="207:41" pos:end="207:51">encryptopts</name></expr></argument>, <argument pos:start="207:54" pos:end="207:57"><expr pos:start="207:54" pos:end="207:57"><name pos:start="207:54" pos:end="207:57">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="209:9" pos:end="215:9"><if pos:start="209:9" pos:end="215:9">if <condition pos:start="209:12" pos:end="209:25">(<expr pos:start="209:13" pos:end="209:24"><operator pos:start="209:13" pos:end="209:13">!</operator><name pos:start="209:14" pos:end="209:24">crypto_opts</name></expr>)</condition> <block pos:start="209:27" pos:end="215:9">{<block_content pos:start="211:13" pos:end="213:22">

            <expr_stmt pos:start="211:13" pos:end="211:26"><expr pos:start="211:13" pos:end="211:25"><name pos:start="211:13" pos:end="211:15">ret</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <operator pos:start="211:19" pos:end="211:19">-</operator><name pos:start="211:20" pos:end="211:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="213:13" pos:end="213:22">goto <name pos:start="213:18" pos:end="213:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="219:9" pos:end="221:62"><expr pos:start="219:9" pos:end="221:61"><name pos:start="219:9" pos:end="219:14">crypto</name> <operator pos:start="219:16" pos:end="219:16">=</operator> <call pos:start="219:18" pos:end="221:61"><name pos:start="219:18" pos:end="219:37">qcrypto_block_create</name><argument_list pos:start="219:38" pos:end="221:61">(<argument pos:start="219:39" pos:end="219:49"><expr pos:start="219:39" pos:end="219:49"><name pos:start="219:39" pos:end="219:49">crypto_opts</name></expr></argument>, <argument pos:start="219:52" pos:end="219:61"><expr pos:start="219:52" pos:end="219:61"><literal type="string" pos:start="219:52" pos:end="219:61">"encrypt."</literal></expr></argument>,

                                      <argument pos:start="221:39" pos:end="221:42"><expr pos:start="221:39" pos:end="221:42"><name pos:start="221:39" pos:end="221:42">NULL</name></expr></argument>, <argument pos:start="221:45" pos:end="221:48"><expr pos:start="221:45" pos:end="221:48"><name pos:start="221:45" pos:end="221:48">NULL</name></expr></argument>, <argument pos:start="221:51" pos:end="221:54"><expr pos:start="221:51" pos:end="221:54"><name pos:start="221:51" pos:end="221:54">NULL</name></expr></argument>, <argument pos:start="221:57" pos:end="221:60"><expr pos:start="221:57" pos:end="221:60"><name pos:start="221:57" pos:end="221:60">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="223:9" pos:end="229:9"><if pos:start="223:9" pos:end="229:9">if <condition pos:start="223:12" pos:end="223:20">(<expr pos:start="223:13" pos:end="223:19"><operator pos:start="223:13" pos:end="223:13">!</operator><name pos:start="223:14" pos:end="223:19">crypto</name></expr>)</condition> <block pos:start="223:22" pos:end="229:9">{<block_content pos:start="225:13" pos:end="227:22">

            <expr_stmt pos:start="225:13" pos:end="225:26"><expr pos:start="225:13" pos:end="225:25"><name pos:start="225:13" pos:end="225:15">ret</name> <operator pos:start="225:17" pos:end="225:17">=</operator> <operator pos:start="225:19" pos:end="225:19">-</operator><name pos:start="225:20" pos:end="225:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="227:13" pos:end="227:22">goto <name pos:start="227:18" pos:end="227:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="231:7" pos:end="235:5">else <block pos:start="231:12" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:59">

        <expr_stmt pos:start="233:9" pos:end="233:59"><expr pos:start="233:9" pos:end="233:58"><name pos:start="233:9" pos:end="233:27"><name pos:start="233:9" pos:end="233:14">header</name><operator pos:start="233:15" pos:end="233:15">.</operator><name pos:start="233:16" pos:end="233:27">crypt_method</name></name> <operator pos:start="233:29" pos:end="233:29">=</operator> <call pos:start="233:31" pos:end="233:58"><name pos:start="233:31" pos:end="233:41">cpu_to_be32</name><argument_list pos:start="233:42" pos:end="233:58">(<argument pos:start="233:43" pos:end="233:57"><expr pos:start="233:43" pos:end="233:57"><name pos:start="233:43" pos:end="233:57">QCOW_CRYPT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:28">/* write all the data */</comment>

    <expr_stmt pos:start="241:5" pos:end="241:62"><expr pos:start="241:5" pos:end="241:61"><name pos:start="241:5" pos:end="241:7">ret</name> <operator pos:start="241:9" pos:end="241:9">=</operator> <call pos:start="241:11" pos:end="241:61"><name pos:start="241:11" pos:end="241:20">blk_pwrite</name><argument_list pos:start="241:21" pos:end="241:61">(<argument pos:start="241:22" pos:end="241:29"><expr pos:start="241:22" pos:end="241:29"><name pos:start="241:22" pos:end="241:29">qcow_blk</name></expr></argument>, <argument pos:start="241:32" pos:end="241:32"><expr pos:start="241:32" pos:end="241:32"><literal type="number" pos:start="241:32" pos:end="241:32">0</literal></expr></argument>, <argument pos:start="241:35" pos:end="241:41"><expr pos:start="241:35" pos:end="241:41"><operator pos:start="241:35" pos:end="241:35">&amp;</operator><name pos:start="241:36" pos:end="241:41">header</name></expr></argument>, <argument pos:start="241:44" pos:end="241:57"><expr pos:start="241:44" pos:end="241:57"><sizeof pos:start="241:44" pos:end="241:57">sizeof<argument_list pos:start="241:50" pos:end="241:57">(<argument pos:start="241:51" pos:end="241:56"><expr pos:start="241:51" pos:end="241:56"><name pos:start="241:51" pos:end="241:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="241:60" pos:end="241:60"><expr pos:start="241:60" pos:end="241:60"><literal type="number" pos:start="241:60" pos:end="241:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="247:5"><if pos:start="243:5" pos:end="247:5">if <condition pos:start="243:8" pos:end="243:30">(<expr pos:start="243:9" pos:end="243:29"><name pos:start="243:9" pos:end="243:11">ret</name> <operator pos:start="243:13" pos:end="243:14">!=</operator> <sizeof pos:start="243:16" pos:end="243:29">sizeof<argument_list pos:start="243:22" pos:end="243:29">(<argument pos:start="243:23" pos:end="243:28"><expr pos:start="243:23" pos:end="243:28"><name pos:start="243:23" pos:end="243:28">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="243:32" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:18">

        <goto pos:start="245:9" pos:end="245:18">goto <name pos:start="245:14" pos:end="245:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="251:5" pos:end="263:5"><if pos:start="251:5" pos:end="263:5">if <condition pos:start="251:8" pos:end="251:21">(<expr pos:start="251:9" pos:end="251:20"><name pos:start="251:9" pos:end="251:20">backing_file</name></expr>)</condition> <block pos:start="251:23" pos:end="263:5">{<block_content pos:start="253:9" pos:end="261:9">

        <expr_stmt pos:start="253:9" pos:end="255:64"><expr pos:start="253:9" pos:end="255:63"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <call pos:start="253:15" pos:end="255:63"><name pos:start="253:15" pos:end="253:24">blk_pwrite</name><argument_list pos:start="253:25" pos:end="255:63">(<argument pos:start="253:26" pos:end="253:33"><expr pos:start="253:26" pos:end="253:33"><name pos:start="253:26" pos:end="253:33">qcow_blk</name></expr></argument>, <argument pos:start="253:36" pos:end="253:49"><expr pos:start="253:36" pos:end="253:49"><sizeof pos:start="253:36" pos:end="253:49">sizeof<argument_list pos:start="253:42" pos:end="253:49">(<argument pos:start="253:43" pos:end="253:48"><expr pos:start="253:43" pos:end="253:48"><name pos:start="253:43" pos:end="253:48">header</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="255:26" pos:end="255:37"><expr pos:start="255:26" pos:end="255:37"><name pos:start="255:26" pos:end="255:37">backing_file</name></expr></argument>, <argument pos:start="255:40" pos:end="255:59"><expr pos:start="255:40" pos:end="255:59"><name pos:start="255:40" pos:end="255:59">backing_filename_len</name></expr></argument>, <argument pos:start="255:62" pos:end="255:62"><expr pos:start="255:62" pos:end="255:62"><literal type="number" pos:start="255:62" pos:end="255:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="257:9" pos:end="261:9"><if pos:start="257:9" pos:end="261:9">if <condition pos:start="257:12" pos:end="257:40">(<expr pos:start="257:13" pos:end="257:39"><name pos:start="257:13" pos:end="257:15">ret</name> <operator pos:start="257:17" pos:end="257:18">!=</operator> <name pos:start="257:20" pos:end="257:39">backing_filename_len</name></expr>)</condition> <block pos:start="257:42" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:22">

            <goto pos:start="259:13" pos:end="259:22">goto <name pos:start="259:18" pos:end="259:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:38"><expr pos:start="267:5" pos:end="267:37"><name pos:start="267:5" pos:end="267:7">tmp</name> <operator pos:start="267:9" pos:end="267:9">=</operator> <call pos:start="267:11" pos:end="267:37"><name pos:start="267:11" pos:end="267:19">g_malloc0</name><argument_list pos:start="267:20" pos:end="267:37">(<argument pos:start="267:21" pos:end="267:36"><expr pos:start="267:21" pos:end="267:36"><name pos:start="267:21" pos:end="267:36">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="269:5" pos:end="285:5">for <control pos:start="269:9" pos:end="271:13">(<init pos:start="269:10" pos:end="269:15"><expr pos:start="269:10" pos:end="269:14"><name pos:start="269:10" pos:end="269:10">i</name> <operator pos:start="269:12" pos:end="269:12">=</operator> <literal type="number" pos:start="269:14" pos:end="269:14">0</literal></expr>;</init> <condition pos:start="269:17" pos:end="269:79"><expr pos:start="269:17" pos:end="269:78"><name pos:start="269:17" pos:end="269:17">i</name> <operator pos:start="269:19" pos:end="269:19">&lt;</operator> <call pos:start="269:21" pos:end="269:78"><name pos:start="269:21" pos:end="269:32">DIV_ROUND_UP</name><argument_list pos:start="269:33" pos:end="269:78">(<argument pos:start="269:34" pos:end="269:59"><expr pos:start="269:34" pos:end="269:59"><sizeof pos:start="269:34" pos:end="269:49">sizeof<argument_list pos:start="269:40" pos:end="269:49">(<argument pos:start="269:41" pos:end="269:48"><expr pos:start="269:41" pos:end="269:48"><name pos:start="269:41" pos:end="269:48">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="269:51" pos:end="269:51">*</operator> <name pos:start="269:53" pos:end="269:59">l1_size</name></expr></argument>, <argument pos:start="269:62" pos:end="269:77"><expr pos:start="269:62" pos:end="269:77"><name pos:start="269:62" pos:end="269:77">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</condition>

         <incr pos:start="271:10" pos:end="271:12"><expr pos:start="271:10" pos:end="271:12"><name pos:start="271:10" pos:end="271:10">i</name><operator pos:start="271:11" pos:end="271:12">++</operator></expr></incr>)</control> <block pos:start="271:15" pos:end="285:5">{<block_content pos:start="273:9" pos:end="283:9">

        <expr_stmt pos:start="273:9" pos:end="275:51"><expr pos:start="273:9" pos:end="275:50"><name pos:start="273:9" pos:end="273:11">ret</name> <operator pos:start="273:13" pos:end="273:13">=</operator> <call pos:start="273:15" pos:end="275:50"><name pos:start="273:15" pos:end="273:24">blk_pwrite</name><argument_list pos:start="273:25" pos:end="275:50">(<argument pos:start="273:26" pos:end="273:33"><expr pos:start="273:26" pos:end="273:33"><name pos:start="273:26" pos:end="273:33">qcow_blk</name></expr></argument>, <argument pos:start="273:36" pos:end="273:69"><expr pos:start="273:36" pos:end="273:69"><name pos:start="273:36" pos:end="273:46">header_size</name> <operator pos:start="273:48" pos:end="273:48">+</operator> <name pos:start="273:50" pos:end="273:65">BDRV_SECTOR_SIZE</name> <operator pos:start="273:67" pos:end="273:67">*</operator> <name pos:start="273:69" pos:end="273:69">i</name></expr></argument>,

                         <argument pos:start="275:26" pos:end="275:28"><expr pos:start="275:26" pos:end="275:28"><name pos:start="275:26" pos:end="275:28">tmp</name></expr></argument>, <argument pos:start="275:31" pos:end="275:46"><expr pos:start="275:31" pos:end="275:46"><name pos:start="275:31" pos:end="275:46">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="275:49" pos:end="275:49"><expr pos:start="275:49" pos:end="275:49"><literal type="number" pos:start="275:49" pos:end="275:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="277:9" pos:end="283:9"><if pos:start="277:9" pos:end="283:9">if <condition pos:start="277:12" pos:end="277:36">(<expr pos:start="277:13" pos:end="277:35"><name pos:start="277:13" pos:end="277:15">ret</name> <operator pos:start="277:17" pos:end="277:18">!=</operator> <name pos:start="277:20" pos:end="277:35">BDRV_SECTOR_SIZE</name></expr>)</condition> <block pos:start="277:38" pos:end="283:9">{<block_content pos:start="279:13" pos:end="281:22">

            <expr_stmt pos:start="279:13" pos:end="279:24"><expr pos:start="279:13" pos:end="279:23"><call pos:start="279:13" pos:end="279:23"><name pos:start="279:13" pos:end="279:18">g_free</name><argument_list pos:start="279:19" pos:end="279:23">(<argument pos:start="279:20" pos:end="279:22"><expr pos:start="279:20" pos:end="279:22"><name pos:start="279:20" pos:end="279:22">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="281:13" pos:end="281:22">goto <name pos:start="281:18" pos:end="281:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="289:5" pos:end="289:16"><expr pos:start="289:5" pos:end="289:15"><call pos:start="289:5" pos:end="289:15"><name pos:start="289:5" pos:end="289:10">g_free</name><argument_list pos:start="289:11" pos:end="289:15">(<argument pos:start="289:12" pos:end="289:14"><expr pos:start="289:12" pos:end="289:14"><name pos:start="289:12" pos:end="289:14">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:12"><expr pos:start="291:5" pos:end="291:11"><name pos:start="291:5" pos:end="291:7">ret</name> <operator pos:start="291:9" pos:end="291:9">=</operator> <literal type="number" pos:start="291:11" pos:end="291:11">0</literal></expr>;</expr_stmt>

<label pos:start="293:1" pos:end="293:5"><name pos:start="293:1" pos:end="293:4">exit</name>:</label>

    <expr_stmt pos:start="295:5" pos:end="295:24"><expr pos:start="295:5" pos:end="295:23"><call pos:start="295:5" pos:end="295:23"><name pos:start="295:5" pos:end="295:13">blk_unref</name><argument_list pos:start="295:14" pos:end="295:23">(<argument pos:start="295:15" pos:end="295:22"><expr pos:start="295:15" pos:end="295:22"><name pos:start="295:15" pos:end="295:22">qcow_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="297:1" pos:end="297:8"><name pos:start="297:1" pos:end="297:7">cleanup</name>:</label>

    <expr_stmt pos:start="299:5" pos:end="299:25"><expr pos:start="299:5" pos:end="299:24"><call pos:start="299:5" pos:end="299:24"><name pos:start="299:5" pos:end="299:11">QDECREF</name><argument_list pos:start="299:12" pos:end="299:24">(<argument pos:start="299:13" pos:end="299:23"><expr pos:start="299:13" pos:end="299:23"><name pos:start="299:13" pos:end="299:23">encryptopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:31"><expr pos:start="301:5" pos:end="301:30"><call pos:start="301:5" pos:end="301:30"><name pos:start="301:5" pos:end="301:22">qcrypto_block_free</name><argument_list pos:start="301:23" pos:end="301:30">(<argument pos:start="301:24" pos:end="301:29"><expr pos:start="301:24" pos:end="301:29"><name pos:start="301:24" pos:end="301:29">crypto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:53"><expr pos:start="303:5" pos:end="303:52"><call pos:start="303:5" pos:end="303:52"><name pos:start="303:5" pos:end="303:39">qapi_free_QCryptoBlockCreateOptions</name><argument_list pos:start="303:40" pos:end="303:52">(<argument pos:start="303:41" pos:end="303:51"><expr pos:start="303:41" pos:end="303:51"><name pos:start="303:41" pos:end="303:51">crypto_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="305:25"><expr pos:start="305:5" pos:end="305:24"><call pos:start="305:5" pos:end="305:24"><name pos:start="305:5" pos:end="305:10">g_free</name><argument_list pos:start="305:11" pos:end="305:24">(<argument pos:start="305:12" pos:end="305:23"><expr pos:start="305:12" pos:end="305:23"><name pos:start="305:12" pos:end="305:23">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="307:5" pos:end="307:15">return <expr pos:start="307:12" pos:end="307:14"><name pos:start="307:12" pos:end="307:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
