<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13985.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">qemu_tcg_wait_io_event</name><parameter_list pos:start="1:35" pos:end="1:40">(<parameter pos:start="1:36" pos:end="1:39"><decl pos:start="1:36" pos:end="1:39"><type pos:start="1:36" pos:end="1:39"><name pos:start="1:36" pos:end="1:39">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:5">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">env</name></decl>;</decl_stmt>



    <while pos:start="9:5" pos:end="19:5">while <condition pos:start="9:11" pos:end="9:34">(<expr pos:start="9:12" pos:end="9:33"><call pos:start="9:12" pos:end="9:33"><name pos:start="9:12" pos:end="9:31">all_cpu_threads_idle</name><argument_list pos:start="9:32" pos:end="9:33">()</argument_list></call></expr>)</condition> <block pos:start="9:36" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:58">

       <comment type="block" pos:start="11:8" pos:end="13:23">/* Start accounting real time to the virtual clock if the CPUs

          are idle.  */</comment>

        <expr_stmt pos:start="15:9" pos:end="15:34"><expr pos:start="15:9" pos:end="15:33"><call pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:23">qemu_clock_warp</name><argument_list pos:start="15:24" pos:end="15:33">(<argument pos:start="15:25" pos:end="15:32"><expr pos:start="15:25" pos:end="15:32"><name pos:start="15:25" pos:end="15:32">vm_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:58"><expr pos:start="17:9" pos:end="17:57"><call pos:start="17:9" pos:end="17:57"><name pos:start="17:9" pos:end="17:22">qemu_cond_wait</name><argument_list pos:start="17:23" pos:end="17:57">(<argument pos:start="17:24" pos:end="17:36"><expr pos:start="17:24" pos:end="17:36"><name pos:start="17:24" pos:end="17:36">tcg_halt_cond</name></expr></argument>, <argument pos:start="17:39" pos:end="17:56"><expr pos:start="17:39" pos:end="17:56"><operator pos:start="17:39" pos:end="17:39">&amp;</operator><name pos:start="17:40" pos:end="17:56">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><call pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:21">qemu_mutex_unlock</name><argument_list pos:start="23:22" pos:end="23:41">(<argument pos:start="23:23" pos:end="23:40"><expr pos:start="23:23" pos:end="23:40"><operator pos:start="23:23" pos:end="23:23">&amp;</operator><name pos:start="23:24" pos:end="23:40">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="35:7">/*

     * Users of qemu_global_mutex can be starved, having no chance

     * to acquire it since this path will get to it first.

     * So use another lock to provide fairness.

     */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><call pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:19">qemu_mutex_lock</name><argument_list pos:start="37:20" pos:end="37:37">(<argument pos:start="37:21" pos:end="37:36"><expr pos:start="37:21" pos:end="37:36"><operator pos:start="37:21" pos:end="37:21">&amp;</operator><name pos:start="37:22" pos:end="37:36">qemu_fair_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:40"><expr pos:start="39:5" pos:end="39:39"><call pos:start="39:5" pos:end="39:39"><name pos:start="39:5" pos:end="39:21">qemu_mutex_unlock</name><argument_list pos:start="39:22" pos:end="39:39">(<argument pos:start="39:23" pos:end="39:38"><expr pos:start="39:23" pos:end="39:38"><operator pos:start="39:23" pos:end="39:23">&amp;</operator><name pos:start="39:24" pos:end="39:38">qemu_fair_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:40"><expr pos:start="43:5" pos:end="43:39"><call pos:start="43:5" pos:end="43:39"><name pos:start="43:5" pos:end="43:19">qemu_mutex_lock</name><argument_list pos:start="43:20" pos:end="43:39">(<argument pos:start="43:21" pos:end="43:38"><expr pos:start="43:21" pos:end="43:38"><operator pos:start="43:21" pos:end="43:21">&amp;</operator><name pos:start="43:22" pos:end="43:38">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="47:5" pos:end="51:5">for <control pos:start="47:9" pos:end="47:59">(<init pos:start="47:10" pos:end="47:25"><expr pos:start="47:10" pos:end="47:24"><name pos:start="47:10" pos:end="47:12">env</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:24">first_cpu</name></expr>;</init> <condition pos:start="47:27" pos:end="47:38"><expr pos:start="47:27" pos:end="47:37"><name pos:start="47:27" pos:end="47:29">env</name> <operator pos:start="47:31" pos:end="47:32">!=</operator> <name pos:start="47:34" pos:end="47:37">NULL</name></expr>;</condition> <incr pos:start="47:40" pos:end="47:58"><expr pos:start="47:40" pos:end="47:58"><name pos:start="47:40" pos:end="47:42">env</name> <operator pos:start="47:44" pos:end="47:44">=</operator> <name pos:start="47:46" pos:end="47:58"><name pos:start="47:46" pos:end="47:48">env</name><operator pos:start="47:49" pos:end="47:50">-&gt;</operator><name pos:start="47:51" pos:end="47:58">next_cpu</name></name></expr></incr>)</control> <block pos:start="47:61" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:39">

        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><call pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:33">qemu_wait_io_event_common</name><argument_list pos:start="49:34" pos:end="49:38">(<argument pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
