<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18288.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vhdx_log_read_desc</name><parameter_list pos:start="1:30" pos:end="5:50">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:68"><decl pos:start="1:53" pos:end="1:68"><type pos:start="1:53" pos:end="1:68"><name pos:start="1:53" pos:end="1:65">BDRVVHDXState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:68">s</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:49"><decl pos:start="3:31" pos:end="3:49"><type pos:start="3:31" pos:end="3:49"><name pos:start="3:31" pos:end="3:44">VHDXLogEntries</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:49">log</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:78"><decl pos:start="3:52" pos:end="3:78"><type pos:start="3:52" pos:end="3:78"><name pos:start="3:52" pos:end="3:69">VHDXLogDescEntries</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier><modifier pos:start="3:72" pos:end="3:72">*</modifier></type><name pos:start="3:73" pos:end="3:78">buffer</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:49"><decl pos:start="5:31" pos:end="5:49"><type pos:start="5:31" pos:end="5:49"><name pos:start="5:31" pos:end="5:34">bool</name></type> <name pos:start="5:36" pos:end="5:49">convert_endian</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="121:1">{<block_content pos:start="9:5" pos:end="119:15">

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:25">desc_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:25">sectors_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">VHDXLogEntryHeader</name></type> <name pos:start="15:24" pos:end="15:26">hdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:43"><type pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:22">VHDXLogDescEntries</name> <modifier pos:start="17:24" pos:end="17:24">*</modifier></type><name pos:start="17:25" pos:end="17:36">desc_entries</name> <init pos:start="17:38" pos:end="17:43">= <expr pos:start="17:40" pos:end="17:43"><name pos:start="17:40" pos:end="17:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:21">VHDXLogDescriptor</name></type> <name pos:start="19:23" pos:end="19:26">desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:28"><expr pos:start="25:5" pos:end="25:27"><call pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:27">(<argument pos:start="25:12" pos:end="25:26"><expr pos:start="25:12" pos:end="25:26"><operator pos:start="25:12" pos:end="25:12">*</operator><name pos:start="25:13" pos:end="25:18">buffer</name> <operator pos:start="25:20" pos:end="25:21">==</operator> <name pos:start="25:23" pos:end="25:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:43"><expr pos:start="29:5" pos:end="29:42"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:42"><name pos:start="29:11" pos:end="29:27">vhdx_log_peek_hdr</name><argument_list pos:start="29:28" pos:end="29:42">(<argument pos:start="29:29" pos:end="29:30"><expr pos:start="29:29" pos:end="29:30"><name pos:start="29:29" pos:end="29:30">bs</name></expr></argument>, <argument pos:start="29:33" pos:end="29:35"><expr pos:start="29:33" pos:end="29:35"><name pos:start="29:33" pos:end="29:35">log</name></expr></argument>, <argument pos:start="29:38" pos:end="29:41"><expr pos:start="29:38" pos:end="29:41"><operator pos:start="29:38" pos:end="29:38">&amp;</operator><name pos:start="29:39" pos:end="29:41">hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition> <block pos:start="31:18" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:18">

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:53">(<expr pos:start="39:9" pos:end="39:52"><call pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:29">vhdx_log_hdr_is_valid</name><argument_list pos:start="39:30" pos:end="39:43">(<argument pos:start="39:31" pos:end="39:33"><expr pos:start="39:31" pos:end="39:33"><name pos:start="39:31" pos:end="39:33">log</name></expr></argument>, <argument pos:start="39:36" pos:end="39:39"><expr pos:start="39:36" pos:end="39:39"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:39">hdr</name></expr></argument>, <argument pos:start="39:42" pos:end="39:42"><expr pos:start="39:42" pos:end="39:42"><name pos:start="39:42" pos:end="39:42">s</name></expr></argument>)</argument_list></call> <operator pos:start="39:45" pos:end="39:46">==</operator> <name pos:start="39:48" pos:end="39:52">false</name></expr>)</condition> <block pos:start="39:55" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">-</operator><name pos:start="41:16" pos:end="41:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:67"><expr pos:start="49:5" pos:end="49:66"><name pos:start="49:5" pos:end="49:16">desc_sectors</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <call pos:start="49:20" pos:end="49:66"><name pos:start="49:20" pos:end="49:44">vhdx_compute_desc_sectors</name><argument_list pos:start="49:45" pos:end="49:66">(<argument pos:start="49:46" pos:end="49:65"><expr pos:start="49:46" pos:end="49:65"><name pos:start="49:46" pos:end="49:65"><name pos:start="49:46" pos:end="49:48">hdr</name><operator pos:start="49:49" pos:end="49:49">.</operator><name pos:start="49:50" pos:end="49:65">descriptor_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:76"><expr pos:start="51:5" pos:end="51:75"><name pos:start="51:5" pos:end="51:16">desc_entries</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:75"><name pos:start="51:20" pos:end="51:34">qemu_blockalign</name><argument_list pos:start="51:35" pos:end="51:75">(<argument pos:start="51:36" pos:end="51:37"><expr pos:start="51:36" pos:end="51:37"><name pos:start="51:36" pos:end="51:37">bs</name></expr></argument>, <argument pos:start="51:40" pos:end="51:74"><expr pos:start="51:40" pos:end="51:74"><name pos:start="51:40" pos:end="51:51">desc_sectors</name> <operator pos:start="51:53" pos:end="51:53">*</operator> <name pos:start="51:55" pos:end="51:74">VHDX_LOG_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:53"><expr pos:start="55:5" pos:end="57:52"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="57:52"><name pos:start="55:11" pos:end="55:31">vhdx_log_read_sectors</name><argument_list pos:start="55:32" pos:end="57:52">(<argument pos:start="55:33" pos:end="55:34"><expr pos:start="55:33" pos:end="55:34"><name pos:start="55:33" pos:end="55:34">bs</name></expr></argument>, <argument pos:start="55:37" pos:end="55:39"><expr pos:start="55:37" pos:end="55:39"><name pos:start="55:37" pos:end="55:39">log</name></expr></argument>, <argument pos:start="55:42" pos:end="55:54"><expr pos:start="55:42" pos:end="55:54"><operator pos:start="55:42" pos:end="55:42">&amp;</operator><name pos:start="55:43" pos:end="55:54">sectors_read</name></expr></argument>, <argument pos:start="55:57" pos:end="55:68"><expr pos:start="55:57" pos:end="55:68"><name pos:start="55:57" pos:end="55:68">desc_entries</name></expr></argument>,

                                <argument pos:start="57:33" pos:end="57:44"><expr pos:start="57:33" pos:end="57:44"><name pos:start="57:33" pos:end="57:44">desc_sectors</name></expr></argument>, <argument pos:start="57:47" pos:end="57:51"><expr pos:start="57:47" pos:end="57:51"><name pos:start="57:47" pos:end="57:51">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:16">(<expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">&lt;</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>)</condition> <block pos:start="59:18" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:27">

        <goto pos:start="61:9" pos:end="61:27">goto <name pos:start="61:14" pos:end="61:26">free_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:37">(<expr pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:20">sectors_read</name> <operator pos:start="65:22" pos:end="65:23">!=</operator> <name pos:start="65:25" pos:end="65:36">desc_sectors</name></expr>)</condition> <block pos:start="65:39" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:27">

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <operator pos:start="67:15" pos:end="67:15">-</operator><name pos:start="67:16" pos:end="67:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:27">goto <name pos:start="69:14" pos:end="69:26">free_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:58">/* put in proper endianness, and validate each desc */</comment>

    <for pos:start="77:5" pos:end="97:5">for <control pos:start="77:9" pos:end="77:46">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:41"><expr pos:start="77:17" pos:end="77:40"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <name pos:start="77:21" pos:end="77:40"><name pos:start="77:21" pos:end="77:23">hdr</name><operator pos:start="77:24" pos:end="77:24">.</operator><name pos:start="77:25" pos:end="77:40">descriptor_count</name></name></expr>;</condition> <incr pos:start="77:43" pos:end="77:45"><expr pos:start="77:43" pos:end="77:45"><name pos:start="77:43" pos:end="77:43">i</name><operator pos:start="77:44" pos:end="77:45">++</operator></expr></incr>)</control> <block pos:start="77:48" pos:end="97:5">{<block_content pos:start="79:9" pos:end="95:9">

        <expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:12">desc</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <name pos:start="79:16" pos:end="79:36"><name pos:start="79:16" pos:end="79:27">desc_entries</name><operator pos:start="79:28" pos:end="79:29">-&gt;</operator><name pos:start="79:30" pos:end="79:33">desc</name><index pos:start="79:34" pos:end="79:36">[<expr pos:start="79:35" pos:end="79:35"><name pos:start="79:35" pos:end="79:35">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:39"><expr pos:start="81:9" pos:end="81:38"><call pos:start="81:9" pos:end="81:38"><name pos:start="81:9" pos:end="81:31">vhdx_log_desc_le_import</name><argument_list pos:start="81:32" pos:end="81:38">(<argument pos:start="81:33" pos:end="81:37"><expr pos:start="81:33" pos:end="81:37"><operator pos:start="81:33" pos:end="81:33">&amp;</operator><name pos:start="81:34" pos:end="81:37">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:27">(<expr pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:26">convert_endian</name></expr>)</condition> <block pos:start="83:29" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:41">

            <expr_stmt pos:start="85:13" pos:end="85:41"><expr pos:start="85:13" pos:end="85:40"><name pos:start="85:13" pos:end="85:33"><name pos:start="85:13" pos:end="85:24">desc_entries</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:30">desc</name><index pos:start="85:31" pos:end="85:33">[<expr pos:start="85:32" pos:end="85:32"><name pos:start="85:32" pos:end="85:32">i</name></expr>]</index></name> <operator pos:start="85:35" pos:end="85:35">=</operator> <name pos:start="85:37" pos:end="85:40">desc</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:57">(<expr pos:start="89:13" pos:end="89:56"><call pos:start="89:13" pos:end="89:47"><name pos:start="89:13" pos:end="89:34">vhdx_log_desc_is_valid</name><argument_list pos:start="89:35" pos:end="89:47">(<argument pos:start="89:36" pos:end="89:40"><expr pos:start="89:36" pos:end="89:40"><operator pos:start="89:36" pos:end="89:36">&amp;</operator><name pos:start="89:37" pos:end="89:40">desc</name></expr></argument>, <argument pos:start="89:43" pos:end="89:46"><expr pos:start="89:43" pos:end="89:46"><operator pos:start="89:43" pos:end="89:43">&amp;</operator><name pos:start="89:44" pos:end="89:46">hdr</name></expr></argument>)</argument_list></call> <operator pos:start="89:49" pos:end="89:50">==</operator> <name pos:start="89:52" pos:end="89:56">false</name></expr>)</condition> <block pos:start="89:59" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:31">

            <expr_stmt pos:start="91:13" pos:end="91:26"><expr pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:15">ret</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <operator pos:start="91:19" pos:end="91:19">-</operator><name pos:start="91:20" pos:end="91:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="93:13" pos:end="93:31">goto <name pos:start="93:18" pos:end="93:30">free_and_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:23">(<expr pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:22">convert_endian</name></expr>)</condition> <block pos:start="99:25" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:32">

        <expr_stmt pos:start="101:9" pos:end="101:32"><expr pos:start="101:9" pos:end="101:31"><name pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:20">desc_entries</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:25">hdr</name></name> <operator pos:start="101:27" pos:end="101:27">=</operator> <name pos:start="101:29" pos:end="101:31">hdr</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:27"><expr pos:start="107:5" pos:end="107:26"><operator pos:start="107:5" pos:end="107:5">*</operator><name pos:start="107:6" pos:end="107:11">buffer</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <name pos:start="107:15" pos:end="107:26">desc_entries</name></expr>;</expr_stmt>

    <goto pos:start="109:5" pos:end="109:14">goto <name pos:start="109:10" pos:end="109:13">exit</name>;</goto>



<label pos:start="113:1" pos:end="113:14"><name pos:start="113:1" pos:end="113:13">free_and_exit</name>:</label>

    <expr_stmt pos:start="115:5" pos:end="115:29"><expr pos:start="115:5" pos:end="115:28"><call pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:14">qemu_vfree</name><argument_list pos:start="115:15" pos:end="115:28">(<argument pos:start="115:16" pos:end="115:27"><expr pos:start="115:16" pos:end="115:27"><name pos:start="115:16" pos:end="115:27">desc_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="117:1" pos:end="117:5"><name pos:start="117:1" pos:end="117:4">exit</name>:</label>

    <return pos:start="119:5" pos:end="119:15">return <expr pos:start="119:12" pos:end="119:14"><name pos:start="119:12" pos:end="119:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
