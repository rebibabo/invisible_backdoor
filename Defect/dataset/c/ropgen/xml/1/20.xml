<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">qcow2_create</name><parameter_list pos:start="1:24" pos:end="1:75">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:44">filename</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:60"><decl pos:start="1:47" pos:end="1:60"><type pos:start="1:47" pos:end="1:60"><name pos:start="1:47" pos:end="1:54">QemuOpts</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">opts</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:67">Error</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier><modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:15">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:22">backing_file</name> <init pos:start="5:24" pos:end="5:29">= <expr pos:start="5:26" pos:end="5:29"><name pos:start="5:26" pos:end="5:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:21">backing_fmt</name> <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">buf</name> <init pos:start="9:15" pos:end="9:20">= <expr pos:start="9:17" pos:end="9:20"><name pos:start="9:17" pos:end="9:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">size</name> <init pos:start="11:19" pos:end="11:21">= <expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">flags</name> <init pos:start="13:15" pos:end="13:17">= <expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">size_t</name></type> <name pos:start="15:12" pos:end="15:23">cluster_size</name> <init pos:start="15:25" pos:end="15:46">= <expr pos:start="15:27" pos:end="15:46"><name pos:start="15:27" pos:end="15:46">DEFAULT_CLUSTER_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">PreallocMode</name></type> <name pos:start="17:18" pos:end="17:25">prealloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:26">refcount_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:22">refcount_order</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:34"><decl pos:start="25:5" pos:end="25:33"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:26">encryptfmt</name> <init pos:start="25:28" pos:end="25:33">= <expr pos:start="25:30" pos:end="25:33"><name pos:start="25:30" pos:end="25:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:9">Error</name> <modifier pos:start="27:11" pos:end="27:11">*</modifier></type><name pos:start="27:12" pos:end="27:20">local_err</name> <init pos:start="27:22" pos:end="27:27">= <expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:26">/* Read out options */</comment>

    <expr_stmt pos:start="35:5" pos:end="37:38"><expr pos:start="35:5" pos:end="37:37"><name pos:start="35:5" pos:end="35:8">size</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <call pos:start="35:12" pos:end="37:37"><name pos:start="35:12" pos:end="35:19">ROUND_UP</name><argument_list pos:start="35:20" pos:end="37:37">(<argument pos:start="35:21" pos:end="35:66"><expr pos:start="35:21" pos:end="35:66"><call pos:start="35:21" pos:end="35:66"><name pos:start="35:21" pos:end="35:41">qemu_opt_get_size_del</name><argument_list pos:start="35:42" pos:end="35:66">(<argument pos:start="35:43" pos:end="35:46"><expr pos:start="35:43" pos:end="35:46"><name pos:start="35:43" pos:end="35:46">opts</name></expr></argument>, <argument pos:start="35:49" pos:end="35:62"><expr pos:start="35:49" pos:end="35:62"><name pos:start="35:49" pos:end="35:62">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="35:65" pos:end="35:65"><expr pos:start="35:65" pos:end="35:65"><literal type="number" pos:start="35:65" pos:end="35:65">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="37:21" pos:end="37:36"><expr pos:start="37:21" pos:end="37:36"><name pos:start="37:21" pos:end="37:36">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:66"><expr pos:start="39:5" pos:end="39:65"><name pos:start="39:5" pos:end="39:16">backing_file</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:65"><name pos:start="39:20" pos:end="39:35">qemu_opt_get_del</name><argument_list pos:start="39:36" pos:end="39:65">(<argument pos:start="39:37" pos:end="39:40"><expr pos:start="39:37" pos:end="39:40"><name pos:start="39:37" pos:end="39:40">opts</name></expr></argument>, <argument pos:start="39:43" pos:end="39:64"><expr pos:start="39:43" pos:end="39:64"><name pos:start="39:43" pos:end="39:64">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:64"><expr pos:start="41:5" pos:end="41:63"><name pos:start="41:5" pos:end="41:15">backing_fmt</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:63"><name pos:start="41:19" pos:end="41:34">qemu_opt_get_del</name><argument_list pos:start="41:35" pos:end="41:63">(<argument pos:start="41:36" pos:end="41:39"><expr pos:start="41:36" pos:end="41:39"><name pos:start="41:36" pos:end="41:39">opts</name></expr></argument>, <argument pos:start="41:42" pos:end="41:62"><expr pos:start="41:42" pos:end="41:62"><name pos:start="41:42" pos:end="41:62">BLOCK_OPT_BACKING_FMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:66"><expr pos:start="43:5" pos:end="43:65"><name pos:start="43:5" pos:end="43:14">encryptfmt</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="43:65"><name pos:start="43:18" pos:end="43:33">qemu_opt_get_del</name><argument_list pos:start="43:34" pos:end="43:65">(<argument pos:start="43:35" pos:end="43:38"><expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">opts</name></expr></argument>, <argument pos:start="43:41" pos:end="43:64"><expr pos:start="43:41" pos:end="43:64"><name pos:start="43:41" pos:end="43:64">BLOCK_OPT_ENCRYPT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="63:5"><if pos:start="45:5" pos:end="59:5">if <condition pos:start="45:8" pos:end="45:19">(<expr pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:18">encryptfmt</name></expr>)</condition> <block pos:start="45:21" pos:end="59:5">{<block_content pos:start="47:9" pos:end="57:9">

        <if_stmt pos:start="47:9" pos:end="57:9"><if pos:start="47:9" pos:end="57:9">if <condition pos:start="47:12" pos:end="47:54">(<expr pos:start="47:13" pos:end="47:53"><call pos:start="47:13" pos:end="47:53"><name pos:start="47:13" pos:end="47:28">qemu_opt_get_del</name><argument_list pos:start="47:29" pos:end="47:53">(<argument pos:start="47:30" pos:end="47:33"><expr pos:start="47:30" pos:end="47:33"><name pos:start="47:30" pos:end="47:33">opts</name></expr></argument>, <argument pos:start="47:36" pos:end="47:52"><expr pos:start="47:36" pos:end="47:52"><name pos:start="47:36" pos:end="47:52">BLOCK_OPT_ENCRYPT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:56" pos:end="57:9">{<block_content pos:start="49:13" pos:end="55:24">

            <expr_stmt pos:start="49:13" pos:end="51:75"><expr pos:start="49:13" pos:end="51:74"><call pos:start="49:13" pos:end="51:74"><name pos:start="49:13" pos:end="49:22">error_setg</name><argument_list pos:start="49:23" pos:end="51:74">(<argument pos:start="49:24" pos:end="49:27"><expr pos:start="49:24" pos:end="49:27"><name pos:start="49:24" pos:end="49:27">errp</name></expr></argument>, <argument pos:start="49:30" pos:end="51:73"><expr pos:start="49:30" pos:end="51:73"><literal type="string" pos:start="49:30" pos:end="49:39">"Options "</literal> <name pos:start="49:41" pos:end="49:57">BLOCK_OPT_ENCRYPT</name> <literal type="string" pos:start="49:59" pos:end="49:65">" and "</literal>

                       <name pos:start="51:24" pos:end="51:47">BLOCK_OPT_ENCRYPT_FORMAT</name> <literal type="string" pos:start="51:49" pos:end="51:73">" are mutually exclusive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:26"><expr pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <operator pos:start="53:19" pos:end="53:19">-</operator><name pos:start="53:20" pos:end="53:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="55:13" pos:end="55:24">goto <name pos:start="55:18" pos:end="55:23">finish</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="63:5">else if <condition pos:start="59:15" pos:end="59:69">(<expr pos:start="59:16" pos:end="59:68"><call pos:start="59:16" pos:end="59:68"><name pos:start="59:16" pos:end="59:36">qemu_opt_get_bool_del</name><argument_list pos:start="59:37" pos:end="59:68">(<argument pos:start="59:38" pos:end="59:41"><expr pos:start="59:38" pos:end="59:41"><name pos:start="59:38" pos:end="59:41">opts</name></expr></argument>, <argument pos:start="59:44" pos:end="59:60"><expr pos:start="59:44" pos:end="59:60"><name pos:start="59:44" pos:end="59:60">BLOCK_OPT_ENCRYPT</name></expr></argument>, <argument pos:start="59:63" pos:end="59:67"><expr pos:start="59:63" pos:end="59:67"><name pos:start="59:63" pos:end="59:67">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:71" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:27">

        <expr_stmt pos:start="61:9" pos:end="61:27"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:18">encryptfmt</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <literal type="string" pos:start="61:22" pos:end="61:26">"aes"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:68"><expr pos:start="65:5" pos:end="65:67"><name pos:start="65:5" pos:end="65:16">cluster_size</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:67"><name pos:start="65:20" pos:end="65:49">qcow2_opt_get_cluster_size_del</name><argument_list pos:start="65:50" pos:end="65:67">(<argument pos:start="65:51" pos:end="65:54"><expr pos:start="65:51" pos:end="65:54"><name pos:start="65:51" pos:end="65:54">opts</name></expr></argument>, <argument pos:start="65:57" pos:end="65:66"><expr pos:start="65:57" pos:end="65:66"><operator pos:start="65:57" pos:end="65:57">&amp;</operator><name pos:start="65:58" pos:end="65:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:18">(<expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:17">local_err</name></expr>)</condition> <block pos:start="67:20" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:20">

        <expr_stmt pos:start="69:9" pos:end="69:41"><expr pos:start="69:9" pos:end="69:40"><call pos:start="69:9" pos:end="69:40"><name pos:start="69:9" pos:end="69:23">error_propagate</name><argument_list pos:start="69:24" pos:end="69:40">(<argument pos:start="69:25" pos:end="69:28"><expr pos:start="69:25" pos:end="69:28"><name pos:start="69:25" pos:end="69:28">errp</name></expr></argument>, <argument pos:start="69:31" pos:end="69:39"><expr pos:start="69:31" pos:end="69:39"><name pos:start="69:31" pos:end="69:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><name pos:start="71:16" pos:end="71:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:20">goto <name pos:start="73:14" pos:end="73:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:53"><expr pos:start="77:5" pos:end="77:52"><name pos:start="77:5" pos:end="77:7">buf</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:52"><name pos:start="77:11" pos:end="77:26">qemu_opt_get_del</name><argument_list pos:start="77:27" pos:end="77:52">(<argument pos:start="77:28" pos:end="77:31"><expr pos:start="77:28" pos:end="77:31"><name pos:start="77:28" pos:end="77:31">opts</name></expr></argument>, <argument pos:start="77:34" pos:end="77:51"><expr pos:start="77:34" pos:end="77:51"><name pos:start="77:34" pos:end="77:51">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="83:43"><expr pos:start="79:5" pos:end="83:42"><name pos:start="79:5" pos:end="79:12">prealloc</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <call pos:start="79:16" pos:end="83:42"><name pos:start="79:16" pos:end="79:30">qapi_enum_parse</name><argument_list pos:start="79:31" pos:end="83:42">(<argument pos:start="79:32" pos:end="79:50"><expr pos:start="79:32" pos:end="79:50"><name pos:start="79:32" pos:end="79:50">PreallocMode_lookup</name></expr></argument>, <argument pos:start="79:53" pos:end="79:55"><expr pos:start="79:53" pos:end="79:55"><name pos:start="79:53" pos:end="79:55">buf</name></expr></argument>,

                               <argument pos:start="81:32" pos:end="81:49"><expr pos:start="81:32" pos:end="81:49"><name pos:start="81:32" pos:end="81:49">PREALLOC_MODE__MAX</name></expr></argument>, <argument pos:start="81:52" pos:end="81:68"><expr pos:start="81:52" pos:end="81:68"><name pos:start="81:52" pos:end="81:68">PREALLOC_MODE_OFF</name></expr></argument>,

                               <argument pos:start="83:32" pos:end="83:41"><expr pos:start="83:32" pos:end="83:41"><operator pos:start="83:32" pos:end="83:32">&amp;</operator><name pos:start="83:33" pos:end="83:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if <condition pos:start="85:8" pos:end="85:18">(<expr pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:17">local_err</name></expr>)</condition> <block pos:start="85:20" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:20">

        <expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><call pos:start="87:9" pos:end="87:40"><name pos:start="87:9" pos:end="87:23">error_propagate</name><argument_list pos:start="87:24" pos:end="87:40">(<argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><name pos:start="87:25" pos:end="87:28">errp</name></expr></argument>, <argument pos:start="87:31" pos:end="87:39"><expr pos:start="87:31" pos:end="87:39"><name pos:start="87:31" pos:end="87:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:22"><expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <operator pos:start="89:15" pos:end="89:15">-</operator><name pos:start="89:16" pos:end="89:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:20">goto <name pos:start="91:14" pos:end="91:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:58"><expr pos:start="97:5" pos:end="97:57"><name pos:start="97:5" pos:end="97:11">version</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:57"><name pos:start="97:15" pos:end="97:39">qcow2_opt_get_version_del</name><argument_list pos:start="97:40" pos:end="97:57">(<argument pos:start="97:41" pos:end="97:44"><expr pos:start="97:41" pos:end="97:44"><name pos:start="97:41" pos:end="97:44">opts</name></expr></argument>, <argument pos:start="97:47" pos:end="97:56"><expr pos:start="97:47" pos:end="97:56"><operator pos:start="97:47" pos:end="97:47">&amp;</operator><name pos:start="97:48" pos:end="97:56">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="107:5"><if pos:start="99:5" pos:end="107:5">if <condition pos:start="99:8" pos:end="99:18">(<expr pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:17">local_err</name></expr>)</condition> <block pos:start="99:20" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:20">

        <expr_stmt pos:start="101:9" pos:end="101:41"><expr pos:start="101:9" pos:end="101:40"><call pos:start="101:9" pos:end="101:40"><name pos:start="101:9" pos:end="101:23">error_propagate</name><argument_list pos:start="101:24" pos:end="101:40">(<argument pos:start="101:25" pos:end="101:28"><expr pos:start="101:25" pos:end="101:28"><name pos:start="101:25" pos:end="101:28">errp</name></expr></argument>, <argument pos:start="101:31" pos:end="101:39"><expr pos:start="101:31" pos:end="101:39"><name pos:start="101:31" pos:end="101:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:22"><expr pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <operator pos:start="103:15" pos:end="103:15">-</operator><name pos:start="103:16" pos:end="103:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:20">goto <name pos:start="105:14" pos:end="105:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:69">(<expr pos:start="111:9" pos:end="111:68"><call pos:start="111:9" pos:end="111:68"><name pos:start="111:9" pos:end="111:29">qemu_opt_get_bool_del</name><argument_list pos:start="111:30" pos:end="111:68">(<argument pos:start="111:31" pos:end="111:34"><expr pos:start="111:31" pos:end="111:34"><name pos:start="111:31" pos:end="111:34">opts</name></expr></argument>, <argument pos:start="111:37" pos:end="111:60"><expr pos:start="111:37" pos:end="111:60"><name pos:start="111:37" pos:end="111:60">BLOCK_OPT_LAZY_REFCOUNTS</name></expr></argument>, <argument pos:start="111:63" pos:end="111:67"><expr pos:start="111:63" pos:end="111:67"><name pos:start="111:63" pos:end="111:67">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:71" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:43">

        <expr_stmt pos:start="113:9" pos:end="113:43"><expr pos:start="113:9" pos:end="113:42"><name pos:start="113:9" pos:end="113:13">flags</name> <operator pos:start="113:15" pos:end="113:16">|=</operator> <name pos:start="113:18" pos:end="113:42">BLOCK_FLAG_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="129:5"><if pos:start="119:5" pos:end="129:5">if <condition pos:start="119:8" pos:end="119:54">(<expr pos:start="119:9" pos:end="119:53"><name pos:start="119:9" pos:end="119:20">backing_file</name> <operator pos:start="119:22" pos:end="119:23">&amp;&amp;</operator> <name pos:start="119:25" pos:end="119:32">prealloc</name> <operator pos:start="119:34" pos:end="119:35">!=</operator> <name pos:start="119:37" pos:end="119:53">PREALLOC_MODE_OFF</name></expr>)</condition> <block pos:start="119:56" pos:end="129:5">{<block_content pos:start="121:9" pos:end="127:20">

        <expr_stmt pos:start="121:9" pos:end="123:36"><expr pos:start="121:9" pos:end="123:35"><call pos:start="121:9" pos:end="123:35"><name pos:start="121:9" pos:end="121:18">error_setg</name><argument_list pos:start="121:19" pos:end="123:35">(<argument pos:start="121:20" pos:end="121:23"><expr pos:start="121:20" pos:end="121:23"><name pos:start="121:20" pos:end="121:23">errp</name></expr></argument>, <argument pos:start="121:26" pos:end="123:34"><expr pos:start="121:26" pos:end="123:34"><literal type="string" pos:start="121:26" pos:end="121:76">"Backing file and preallocation cannot be used at "</literal>

                   <literal type="string" pos:start="123:20" pos:end="123:34">"the same time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:22"><expr pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <operator pos:start="125:15" pos:end="125:15">-</operator><name pos:start="125:16" pos:end="125:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="127:9" pos:end="127:20">goto <name pos:start="127:14" pos:end="127:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="143:5"><if pos:start="133:5" pos:end="143:5">if <condition pos:start="133:8" pos:end="133:59">(<expr pos:start="133:9" pos:end="133:58"><name pos:start="133:9" pos:end="133:15">version</name> <operator pos:start="133:17" pos:end="133:17">&lt;</operator> <literal type="number" pos:start="133:19" pos:end="133:19">3</literal> <operator pos:start="133:21" pos:end="133:22">&amp;&amp;</operator> <operator pos:start="133:24" pos:end="133:24">(</operator><name pos:start="133:25" pos:end="133:29">flags</name> <operator pos:start="133:31" pos:end="133:31">&amp;</operator> <name pos:start="133:33" pos:end="133:57">BLOCK_FLAG_LAZY_REFCOUNTS</name><operator pos:start="133:58" pos:end="133:58">)</operator></expr>)</condition> <block pos:start="133:61" pos:end="143:5">{<block_content pos:start="135:9" pos:end="141:20">

        <expr_stmt pos:start="135:9" pos:end="137:70"><expr pos:start="135:9" pos:end="137:69"><call pos:start="135:9" pos:end="137:69"><name pos:start="135:9" pos:end="135:18">error_setg</name><argument_list pos:start="135:19" pos:end="137:69">(<argument pos:start="135:20" pos:end="135:23"><expr pos:start="135:20" pos:end="135:23"><name pos:start="135:20" pos:end="135:23">errp</name></expr></argument>, <argument pos:start="135:26" pos:end="137:68"><expr pos:start="135:26" pos:end="137:68"><literal type="string" pos:start="135:26" pos:end="135:76">"Lazy refcounts only supported with compatibility "</literal>

                   <literal type="string" pos:start="137:20" pos:end="137:68">"level 1.1 and above (use compat=1.1 or greater)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:22"><expr pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <operator pos:start="139:15" pos:end="139:15">-</operator><name pos:start="139:16" pos:end="139:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="141:9" pos:end="141:20">goto <name pos:start="141:14" pos:end="141:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:79"><expr pos:start="147:5" pos:end="147:78"><name pos:start="147:5" pos:end="147:17">refcount_bits</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <call pos:start="147:21" pos:end="147:78"><name pos:start="147:21" pos:end="147:51">qcow2_opt_get_refcount_bits_del</name><argument_list pos:start="147:52" pos:end="147:78">(<argument pos:start="147:53" pos:end="147:56"><expr pos:start="147:53" pos:end="147:56"><name pos:start="147:53" pos:end="147:56">opts</name></expr></argument>, <argument pos:start="147:59" pos:end="147:65"><expr pos:start="147:59" pos:end="147:65"><name pos:start="147:59" pos:end="147:65">version</name></expr></argument>, <argument pos:start="147:68" pos:end="147:77"><expr pos:start="147:68" pos:end="147:77"><operator pos:start="147:68" pos:end="147:68">&amp;</operator><name pos:start="147:69" pos:end="147:77">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="157:5"><if pos:start="149:5" pos:end="157:5">if <condition pos:start="149:8" pos:end="149:18">(<expr pos:start="149:9" pos:end="149:17"><name pos:start="149:9" pos:end="149:17">local_err</name></expr>)</condition> <block pos:start="149:20" pos:end="157:5">{<block_content pos:start="151:9" pos:end="155:20">

        <expr_stmt pos:start="151:9" pos:end="151:41"><expr pos:start="151:9" pos:end="151:40"><call pos:start="151:9" pos:end="151:40"><name pos:start="151:9" pos:end="151:23">error_propagate</name><argument_list pos:start="151:24" pos:end="151:40">(<argument pos:start="151:25" pos:end="151:28"><expr pos:start="151:25" pos:end="151:28"><name pos:start="151:25" pos:end="151:28">errp</name></expr></argument>, <argument pos:start="151:31" pos:end="151:39"><expr pos:start="151:31" pos:end="151:39"><name pos:start="151:31" pos:end="151:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:22"><expr pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <operator pos:start="153:15" pos:end="153:15">-</operator><name pos:start="153:16" pos:end="153:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="155:9" pos:end="155:20">goto <name pos:start="155:14" pos:end="155:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:42"><expr pos:start="161:5" pos:end="161:41"><name pos:start="161:5" pos:end="161:18">refcount_order</name> <operator pos:start="161:20" pos:end="161:20">=</operator> <call pos:start="161:22" pos:end="161:41"><name pos:start="161:22" pos:end="161:26">ctz32</name><argument_list pos:start="161:27" pos:end="161:41">(<argument pos:start="161:28" pos:end="161:40"><expr pos:start="161:28" pos:end="161:40"><name pos:start="161:28" pos:end="161:40">refcount_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="165:5" pos:end="169:48"><expr pos:start="165:5" pos:end="169:47"><name pos:start="165:5" pos:end="165:7">ret</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="169:47"><name pos:start="165:11" pos:end="165:23">qcow2_create2</name><argument_list pos:start="165:24" pos:end="169:47">(<argument pos:start="165:25" pos:end="165:32"><expr pos:start="165:25" pos:end="165:32"><name pos:start="165:25" pos:end="165:32">filename</name></expr></argument>, <argument pos:start="165:35" pos:end="165:38"><expr pos:start="165:35" pos:end="165:38"><name pos:start="165:35" pos:end="165:38">size</name></expr></argument>, <argument pos:start="165:41" pos:end="165:52"><expr pos:start="165:41" pos:end="165:52"><name pos:start="165:41" pos:end="165:52">backing_file</name></expr></argument>, <argument pos:start="165:55" pos:end="165:65"><expr pos:start="165:55" pos:end="165:65"><name pos:start="165:55" pos:end="165:65">backing_fmt</name></expr></argument>, <argument pos:start="165:68" pos:end="165:72"><expr pos:start="165:68" pos:end="165:72"><name pos:start="165:68" pos:end="165:72">flags</name></expr></argument>,

                        <argument pos:start="167:25" pos:end="167:36"><expr pos:start="167:25" pos:end="167:36"><name pos:start="167:25" pos:end="167:36">cluster_size</name></expr></argument>, <argument pos:start="167:39" pos:end="167:46"><expr pos:start="167:39" pos:end="167:46"><name pos:start="167:39" pos:end="167:46">prealloc</name></expr></argument>, <argument pos:start="167:49" pos:end="167:52"><expr pos:start="167:49" pos:end="167:52"><name pos:start="167:49" pos:end="167:52">opts</name></expr></argument>, <argument pos:start="167:55" pos:end="167:61"><expr pos:start="167:55" pos:end="167:61"><name pos:start="167:55" pos:end="167:61">version</name></expr></argument>, <argument pos:start="167:64" pos:end="167:77"><expr pos:start="167:64" pos:end="167:77"><name pos:start="167:64" pos:end="167:77">refcount_order</name></expr></argument>,

                        <argument pos:start="169:25" pos:end="169:34"><expr pos:start="169:25" pos:end="169:34"><name pos:start="169:25" pos:end="169:34">encryptfmt</name></expr></argument>, <argument pos:start="169:37" pos:end="169:46"><expr pos:start="169:37" pos:end="169:46"><operator pos:start="169:37" pos:end="169:37">&amp;</operator><name pos:start="169:38" pos:end="169:46">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:37"><expr pos:start="171:5" pos:end="171:36"><call pos:start="171:5" pos:end="171:36"><name pos:start="171:5" pos:end="171:19">error_propagate</name><argument_list pos:start="171:20" pos:end="171:36">(<argument pos:start="171:21" pos:end="171:24"><expr pos:start="171:21" pos:end="171:24"><name pos:start="171:21" pos:end="171:24">errp</name></expr></argument>, <argument pos:start="171:27" pos:end="171:35"><expr pos:start="171:27" pos:end="171:35"><name pos:start="171:27" pos:end="171:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="175:1" pos:end="175:7"><name pos:start="175:1" pos:end="175:6">finish</name>:</label>

    <expr_stmt pos:start="177:5" pos:end="177:25"><expr pos:start="177:5" pos:end="177:24"><call pos:start="177:5" pos:end="177:24"><name pos:start="177:5" pos:end="177:10">g_free</name><argument_list pos:start="177:11" pos:end="177:24">(<argument pos:start="177:12" pos:end="177:23"><expr pos:start="177:12" pos:end="177:23"><name pos:start="177:12" pos:end="177:23">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:24"><expr pos:start="179:5" pos:end="179:23"><call pos:start="179:5" pos:end="179:23"><name pos:start="179:5" pos:end="179:10">g_free</name><argument_list pos:start="179:11" pos:end="179:23">(<argument pos:start="179:12" pos:end="179:22"><expr pos:start="179:12" pos:end="179:22"><name pos:start="179:12" pos:end="179:22">backing_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:16"><expr pos:start="181:5" pos:end="181:15"><call pos:start="181:5" pos:end="181:15"><name pos:start="181:5" pos:end="181:10">g_free</name><argument_list pos:start="181:11" pos:end="181:15">(<argument pos:start="181:12" pos:end="181:14"><expr pos:start="181:12" pos:end="181:14"><name pos:start="181:12" pos:end="181:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="183:5" pos:end="183:15">return <expr pos:start="183:12" pos:end="183:14"><name pos:start="183:12" pos:end="183:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
