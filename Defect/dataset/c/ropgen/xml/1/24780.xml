<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24780.c" pos:tabs="8"><function pos:start="1:1" pos:end="1889:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">disas_xtensa_insn</name><parameter_list pos:start="1:30" pos:end="1:47">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:42">DisasContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">dc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1889:1">{<block_content pos:start="155:5" pos:end="1888:0">

<cpp:define pos:start="5:1" pos:end="17:15">#<cpp:directive pos:start="5:2" pos:end="5:7">define</cpp:directive> <cpp:macro pos:start="5:9" pos:end="5:23"><name pos:start="5:9" pos:end="5:18">HAS_OPTION</name><parameter_list pos:start="5:19" pos:end="5:23">(<parameter pos:start="5:20" pos:end="5:22"><type pos:start="5:20" pos:end="5:22"><name pos:start="5:20" pos:end="5:22">opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="5:25" pos:end="17:15">do { \

        if (!option_enabled(dc, opt)) { \

            qemu_log("Option %d is not enabled %s:%d\n", \

                    (opt), __FILE__, __LINE__); \

            goto invalid_opcode; \

        } \

    } while (0)</cpp:value></cpp:define>



<cpp:ifdef pos:start="21:1" pos:end="21:29">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="23:1" pos:end="23:32">#<cpp:directive pos:start="23:2" pos:end="23:7">define</cpp:directive> <cpp:macro pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">OP0</name></cpp:macro> <cpp:value pos:start="23:13" pos:end="23:32">(((b0) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="25:1" pos:end="25:32">#<cpp:directive pos:start="25:2" pos:end="25:7">define</cpp:directive> <cpp:macro pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">OP1</name></cpp:macro> <cpp:value pos:start="25:13" pos:end="25:32">(((b2) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="27:1" pos:end="27:24">#<cpp:directive pos:start="27:2" pos:end="27:7">define</cpp:directive> <cpp:macro pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">OP2</name></cpp:macro> <cpp:value pos:start="27:13" pos:end="27:24">((b2) &amp; 0xf)</cpp:value></cpp:define>

<cpp:define pos:start="29:1" pos:end="29:26">#<cpp:directive pos:start="29:2" pos:end="29:7">define</cpp:directive> <cpp:macro pos:start="29:9" pos:end="29:13"><name pos:start="29:9" pos:end="29:13">RRR_R</name></cpp:macro> <cpp:value pos:start="29:15" pos:end="29:26">((b1) &amp; 0xf)</cpp:value></cpp:define>

<cpp:define pos:start="31:1" pos:end="31:34">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:13"><name pos:start="31:9" pos:end="31:13">RRR_S</name></cpp:macro> <cpp:value pos:start="31:15" pos:end="31:34">(((b1) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="33:1" pos:end="33:26">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:13">RRR_T</name></cpp:macro> <cpp:value pos:start="33:15" pos:end="33:26">((b0) &amp; 0xf)</cpp:value></cpp:define>

<cpp:else pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="37:1" pos:end="37:26">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">OP0</name></cpp:macro> <cpp:value pos:start="37:13" pos:end="37:26">(((b0) &amp; 0xf))</cpp:value></cpp:define>

<cpp:define pos:start="39:1" pos:end="39:26">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">OP1</name></cpp:macro> <cpp:value pos:start="39:13" pos:end="39:26">(((b2) &amp; 0xf))</cpp:value></cpp:define>

<cpp:define pos:start="41:1" pos:end="41:32">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">OP2</name></cpp:macro> <cpp:value pos:start="41:13" pos:end="41:32">(((b2) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="43:1" pos:end="43:34">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:13">RRR_R</name></cpp:macro> <cpp:value pos:start="43:15" pos:end="43:34">(((b1) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="45:1" pos:end="45:28">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:13">RRR_S</name></cpp:macro> <cpp:value pos:start="45:15" pos:end="45:28">(((b1) &amp; 0xf))</cpp:value></cpp:define>

<cpp:define pos:start="47:1" pos:end="47:34">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:13"><name pos:start="47:9" pos:end="47:13">RRR_T</name></cpp:macro> <cpp:value pos:start="47:15" pos:end="47:34">(((b0) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>



<cpp:define pos:start="53:1" pos:end="53:20">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:14">RRRN_R</name></cpp:macro> <cpp:value pos:start="53:16" pos:end="53:20">RRR_R</cpp:value></cpp:define>

<cpp:define pos:start="55:1" pos:end="55:20">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:14">RRRN_S</name></cpp:macro> <cpp:value pos:start="55:16" pos:end="55:20">RRR_S</cpp:value></cpp:define>

<cpp:define pos:start="57:1" pos:end="57:20">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:14">RRRN_T</name></cpp:macro> <cpp:value pos:start="57:16" pos:end="57:20">RRR_T</cpp:value></cpp:define>



<cpp:define pos:start="61:1" pos:end="61:20">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:14">RRI8_R</name></cpp:macro> <cpp:value pos:start="61:16" pos:end="61:20">RRR_R</cpp:value></cpp:define>

<cpp:define pos:start="63:1" pos:end="63:20">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:14">RRI8_S</name></cpp:macro> <cpp:value pos:start="63:16" pos:end="63:20">RRR_S</cpp:value></cpp:define>

<cpp:define pos:start="65:1" pos:end="65:20">#<cpp:directive pos:start="65:2" pos:end="65:7">define</cpp:directive> <cpp:macro pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:14">RRI8_T</name></cpp:macro> <cpp:value pos:start="65:16" pos:end="65:20">RRR_T</cpp:value></cpp:define>

<cpp:define pos:start="67:1" pos:end="67:22">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:17">RRI8_IMM8</name></cpp:macro> <cpp:value pos:start="67:19" pos:end="67:22">(b2)</cpp:value></cpp:define>

<cpp:define pos:start="69:1" pos:end="69:67">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:20">RRI8_IMM8_SE</name></cpp:macro> <cpp:value pos:start="69:22" pos:end="69:67">((((b2) &amp; 0x80) ? 0xffffff00 : 0) | RRI8_IMM8)</cpp:value></cpp:define>



<cpp:ifdef pos:start="73:1" pos:end="73:29">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="75:1" pos:end="75:39">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive> <cpp:macro pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:18">RI16_IMM16</name></cpp:macro> <cpp:value pos:start="75:20" pos:end="75:39">(((b1) &lt;&lt; 8) | (b2))</cpp:value></cpp:define>

<cpp:else pos:start="77:1" pos:end="77:5">#<cpp:directive pos:start="77:2" pos:end="77:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="79:1" pos:end="79:39">#<cpp:directive pos:start="79:2" pos:end="79:7">define</cpp:directive> <cpp:macro pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:18">RI16_IMM16</name></cpp:macro> <cpp:value pos:start="79:20" pos:end="79:39">(((b2) &lt;&lt; 8) | (b1))</cpp:value></cpp:define>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="85:1" pos:end="85:29">#<cpp:directive pos:start="85:2" pos:end="85:6">ifdef</cpp:directive> <name pos:start="85:8" pos:end="85:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="87:1" pos:end="87:34">#<cpp:directive pos:start="87:2" pos:end="87:7">define</cpp:directive> <cpp:macro pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:14">CALL_N</name></cpp:macro> <cpp:value pos:start="87:16" pos:end="87:34">(((b0) &amp; 0xc) &gt;&gt; 2)</cpp:value></cpp:define>

<cpp:define pos:start="89:1" pos:end="89:63">#<cpp:directive pos:start="89:2" pos:end="89:7">define</cpp:directive> <cpp:macro pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:19">CALL_OFFSET</name></cpp:macro> <cpp:value pos:start="89:21" pos:end="89:63">((((b0) &amp; 0x3) &lt;&lt; 16) | ((b1) &lt;&lt; 8) | (b2))</cpp:value></cpp:define>

<cpp:else pos:start="91:1" pos:end="91:5">#<cpp:directive pos:start="91:2" pos:end="91:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="93:1" pos:end="93:35">#<cpp:directive pos:start="93:2" pos:end="93:7">define</cpp:directive> <cpp:macro pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:14">CALL_N</name></cpp:macro> <cpp:value pos:start="93:16" pos:end="93:35">(((b0) &amp; 0x30) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="95:1" pos:end="95:71">#<cpp:directive pos:start="95:2" pos:end="95:7">define</cpp:directive> <cpp:macro pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:19">CALL_OFFSET</name></cpp:macro> <cpp:value pos:start="95:21" pos:end="95:71">((((b0) &amp; 0xc0) &gt;&gt; 6) | ((b1) &lt;&lt; 2) | ((b2) &lt;&lt; 10))</cpp:value></cpp:define>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="99:1" pos:end="101:62">#<cpp:directive pos:start="99:2" pos:end="99:7">define</cpp:directive> <cpp:macro pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:22">CALL_OFFSET_SE</name></cpp:macro> \

    <cpp:value pos:start="101:5" pos:end="101:62">(((CALL_OFFSET &amp; 0x20000) ? 0xfffc0000 : 0) | CALL_OFFSET)</cpp:value></cpp:define>



<cpp:define pos:start="105:1" pos:end="105:22">#<cpp:directive pos:start="105:2" pos:end="105:7">define</cpp:directive> <cpp:macro pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:15">CALLX_N</name></cpp:macro> <cpp:value pos:start="105:17" pos:end="105:22">CALL_N</cpp:value></cpp:define>

<cpp:ifdef pos:start="107:1" pos:end="107:29">#<cpp:directive pos:start="107:2" pos:end="107:6">ifdef</cpp:directive> <name pos:start="107:8" pos:end="107:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="109:1" pos:end="109:28">#<cpp:directive pos:start="109:2" pos:end="109:7">define</cpp:directive> <cpp:macro pos:start="109:9" pos:end="109:15"><name pos:start="109:9" pos:end="109:15">CALLX_M</name></cpp:macro> <cpp:value pos:start="109:17" pos:end="109:28">((b0) &amp; 0x3)</cpp:value></cpp:define>

<cpp:else pos:start="111:1" pos:end="111:5">#<cpp:directive pos:start="111:2" pos:end="111:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="113:1" pos:end="113:36">#<cpp:directive pos:start="113:2" pos:end="113:7">define</cpp:directive> <cpp:macro pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:15">CALLX_M</name></cpp:macro> <cpp:value pos:start="113:17" pos:end="113:36">(((b0) &amp; 0xc0) &gt;&gt; 6)</cpp:value></cpp:define>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="117:1" pos:end="117:21">#<cpp:directive pos:start="117:2" pos:end="117:7">define</cpp:directive> <cpp:macro pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:15">CALLX_S</name></cpp:macro> <cpp:value pos:start="117:17" pos:end="117:21">RRR_S</cpp:value></cpp:define>



<cpp:define pos:start="121:1" pos:end="121:23">#<cpp:directive pos:start="121:2" pos:end="121:7">define</cpp:directive> <cpp:macro pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:15">BRI12_M</name></cpp:macro> <cpp:value pos:start="121:17" pos:end="121:23">CALLX_M</cpp:value></cpp:define>

<cpp:define pos:start="123:1" pos:end="123:21">#<cpp:directive pos:start="123:2" pos:end="123:7">define</cpp:directive> <cpp:macro pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:15">BRI12_S</name></cpp:macro> <cpp:value pos:start="123:17" pos:end="123:21">RRR_S</cpp:value></cpp:define>

<cpp:ifdef pos:start="125:1" pos:end="125:29">#<cpp:directive pos:start="125:2" pos:end="125:6">ifdef</cpp:directive> <name pos:start="125:8" pos:end="125:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="127:1" pos:end="127:48">#<cpp:directive pos:start="127:2" pos:end="127:7">define</cpp:directive> <cpp:macro pos:start="127:9" pos:end="127:19"><name pos:start="127:9" pos:end="127:19">BRI12_IMM12</name></cpp:macro> <cpp:value pos:start="127:21" pos:end="127:48">((((b1) &amp; 0xf) &lt;&lt; 8) | (b2))</cpp:value></cpp:define>

<cpp:else pos:start="129:1" pos:end="129:5">#<cpp:directive pos:start="129:2" pos:end="129:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="131:1" pos:end="131:56">#<cpp:directive pos:start="131:2" pos:end="131:7">define</cpp:directive> <cpp:macro pos:start="131:9" pos:end="131:19"><name pos:start="131:9" pos:end="131:19">BRI12_IMM12</name></cpp:macro> <cpp:value pos:start="131:21" pos:end="131:56">((((b1) &amp; 0xf0) &gt;&gt; 4) | ((b2) &lt;&lt; 4))</cpp:value></cpp:define>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="135:1" pos:end="135:79">#<cpp:directive pos:start="135:2" pos:end="135:7">define</cpp:directive> <cpp:macro pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:22">BRI12_IMM12_SE</name></cpp:macro> <cpp:value pos:start="135:24" pos:end="135:79">(((BRI12_IMM12 &amp; 0x800) ? 0xfffff000 : 0) | BRI12_IMM12)</cpp:value></cpp:define>



<cpp:define pos:start="139:1" pos:end="139:22">#<cpp:directive pos:start="139:2" pos:end="139:7">define</cpp:directive> <cpp:macro pos:start="139:9" pos:end="139:14"><name pos:start="139:9" pos:end="139:14">BRI8_M</name></cpp:macro> <cpp:value pos:start="139:16" pos:end="139:22">BRI12_M</cpp:value></cpp:define>

<cpp:define pos:start="141:1" pos:end="141:21">#<cpp:directive pos:start="141:2" pos:end="141:7">define</cpp:directive> <cpp:macro pos:start="141:9" pos:end="141:14"><name pos:start="141:9" pos:end="141:14">BRI8_R</name></cpp:macro> <cpp:value pos:start="141:16" pos:end="141:21">RRI8_R</cpp:value></cpp:define>

<cpp:define pos:start="143:1" pos:end="143:21">#<cpp:directive pos:start="143:2" pos:end="143:7">define</cpp:directive> <cpp:macro pos:start="143:9" pos:end="143:14"><name pos:start="143:9" pos:end="143:14">BRI8_S</name></cpp:macro> <cpp:value pos:start="143:16" pos:end="143:21">RRI8_S</cpp:value></cpp:define>

<cpp:define pos:start="145:1" pos:end="145:27">#<cpp:directive pos:start="145:2" pos:end="145:7">define</cpp:directive> <cpp:macro pos:start="145:9" pos:end="145:17"><name pos:start="145:9" pos:end="145:17">BRI8_IMM8</name></cpp:macro> <cpp:value pos:start="145:19" pos:end="145:27">RRI8_IMM8</cpp:value></cpp:define>

<cpp:define pos:start="147:1" pos:end="147:33">#<cpp:directive pos:start="147:2" pos:end="147:7">define</cpp:directive> <cpp:macro pos:start="147:9" pos:end="147:20"><name pos:start="147:9" pos:end="147:20">BRI8_IMM8_SE</name></cpp:macro> <cpp:value pos:start="147:22" pos:end="147:33">RRI8_IMM8_SE</cpp:value></cpp:define>



<cpp:define pos:start="151:1" pos:end="151:19">#<cpp:directive pos:start="151:2" pos:end="151:7">define</cpp:directive> <cpp:macro pos:start="151:9" pos:end="151:14"><name pos:start="151:9" pos:end="151:14">RSR_SR</name></cpp:macro> <cpp:value pos:start="151:16" pos:end="151:19">(b1)</cpp:value></cpp:define>



    <decl_stmt pos:start="155:5" pos:end="155:35"><decl pos:start="155:5" pos:end="155:34"><type pos:start="155:5" pos:end="155:11"><name pos:start="155:5" pos:end="155:11">uint8_t</name></type> <name pos:start="155:13" pos:end="155:14">b0</name> <init pos:start="155:16" pos:end="155:34">= <expr pos:start="155:18" pos:end="155:34"><call pos:start="155:18" pos:end="155:34"><name pos:start="155:18" pos:end="155:26">ldub_code</name><argument_list pos:start="155:27" pos:end="155:34">(<argument pos:start="155:28" pos:end="155:33"><expr pos:start="155:28" pos:end="155:33"><name pos:start="155:28" pos:end="155:33"><name pos:start="155:28" pos:end="155:29">dc</name><operator pos:start="155:30" pos:end="155:31">-&gt;</operator><name pos:start="155:32" pos:end="155:33">pc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="157:5" pos:end="157:39"><decl pos:start="157:5" pos:end="157:38"><type pos:start="157:5" pos:end="157:11"><name pos:start="157:5" pos:end="157:11">uint8_t</name></type> <name pos:start="157:13" pos:end="157:14">b1</name> <init pos:start="157:16" pos:end="157:38">= <expr pos:start="157:18" pos:end="157:38"><call pos:start="157:18" pos:end="157:38"><name pos:start="157:18" pos:end="157:26">ldub_code</name><argument_list pos:start="157:27" pos:end="157:38">(<argument pos:start="157:28" pos:end="157:37"><expr pos:start="157:28" pos:end="157:37"><name pos:start="157:28" pos:end="157:33"><name pos:start="157:28" pos:end="157:29">dc</name><operator pos:start="157:30" pos:end="157:31">-&gt;</operator><name pos:start="157:32" pos:end="157:33">pc</name></name> <operator pos:start="157:35" pos:end="157:35">+</operator> <literal type="number" pos:start="157:37" pos:end="157:37">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="159:5" pos:end="159:39"><decl pos:start="159:5" pos:end="159:38"><type pos:start="159:5" pos:end="159:11"><name pos:start="159:5" pos:end="159:11">uint8_t</name></type> <name pos:start="159:13" pos:end="159:14">b2</name> <init pos:start="159:16" pos:end="159:38">= <expr pos:start="159:18" pos:end="159:38"><call pos:start="159:18" pos:end="159:38"><name pos:start="159:18" pos:end="159:26">ldub_code</name><argument_list pos:start="159:27" pos:end="159:38">(<argument pos:start="159:28" pos:end="159:37"><expr pos:start="159:28" pos:end="159:37"><name pos:start="159:28" pos:end="159:33"><name pos:start="159:28" pos:end="159:29">dc</name><operator pos:start="159:30" pos:end="159:31">-&gt;</operator><name pos:start="159:32" pos:end="159:33">pc</name></name> <operator pos:start="159:35" pos:end="159:35">+</operator> <literal type="number" pos:start="159:37" pos:end="159:37">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="163:5" pos:end="167:6"><decl pos:start="163:5" pos:end="167:5"><type pos:start="163:5" pos:end="163:25"><specifier pos:start="163:5" pos:end="163:10">static</specifier> <specifier pos:start="163:12" pos:end="163:16">const</specifier> <name pos:start="163:18" pos:end="163:25">uint32_t</name></type> <name pos:start="163:27" pos:end="163:35"><name pos:start="163:27" pos:end="163:33">B4CONST</name><index pos:start="163:34" pos:end="163:35">[]</index></name> <init pos:start="163:37" pos:end="167:5">= <expr pos:start="163:39" pos:end="167:5"><block pos:start="163:39" pos:end="167:5">{

        <expr pos:start="165:9" pos:end="165:18"><literal type="number" pos:start="165:9" pos:end="165:18">0xffffffff</literal></expr>, <expr pos:start="165:21" pos:end="165:21"><literal type="number" pos:start="165:21" pos:end="165:21">1</literal></expr>, <expr pos:start="165:24" pos:end="165:24"><literal type="number" pos:start="165:24" pos:end="165:24">2</literal></expr>, <expr pos:start="165:27" pos:end="165:27"><literal type="number" pos:start="165:27" pos:end="165:27">3</literal></expr>, <expr pos:start="165:30" pos:end="165:30"><literal type="number" pos:start="165:30" pos:end="165:30">4</literal></expr>, <expr pos:start="165:33" pos:end="165:33"><literal type="number" pos:start="165:33" pos:end="165:33">5</literal></expr>, <expr pos:start="165:36" pos:end="165:36"><literal type="number" pos:start="165:36" pos:end="165:36">6</literal></expr>, <expr pos:start="165:39" pos:end="165:39"><literal type="number" pos:start="165:39" pos:end="165:39">7</literal></expr>, <expr pos:start="165:42" pos:end="165:42"><literal type="number" pos:start="165:42" pos:end="165:42">8</literal></expr>, <expr pos:start="165:45" pos:end="165:46"><literal type="number" pos:start="165:45" pos:end="165:46">10</literal></expr>, <expr pos:start="165:49" pos:end="165:50"><literal type="number" pos:start="165:49" pos:end="165:50">12</literal></expr>, <expr pos:start="165:53" pos:end="165:54"><literal type="number" pos:start="165:53" pos:end="165:54">16</literal></expr>, <expr pos:start="165:57" pos:end="165:58"><literal type="number" pos:start="165:57" pos:end="165:58">32</literal></expr>, <expr pos:start="165:61" pos:end="165:62"><literal type="number" pos:start="165:61" pos:end="165:62">64</literal></expr>, <expr pos:start="165:65" pos:end="165:67"><literal type="number" pos:start="165:65" pos:end="165:67">128</literal></expr>, <expr pos:start="165:70" pos:end="165:72"><literal type="number" pos:start="165:70" pos:end="165:72">256</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="171:5" pos:end="175:6"><decl pos:start="171:5" pos:end="175:5"><type pos:start="171:5" pos:end="171:25"><specifier pos:start="171:5" pos:end="171:10">static</specifier> <specifier pos:start="171:12" pos:end="171:16">const</specifier> <name pos:start="171:18" pos:end="171:25">uint32_t</name></type> <name pos:start="171:27" pos:end="171:36"><name pos:start="171:27" pos:end="171:34">B4CONSTU</name><index pos:start="171:35" pos:end="171:36">[]</index></name> <init pos:start="171:38" pos:end="175:5">= <expr pos:start="171:40" pos:end="175:5"><block pos:start="171:40" pos:end="175:5">{

        <expr pos:start="173:9" pos:end="173:13"><literal type="number" pos:start="173:9" pos:end="173:13">32768</literal></expr>, <expr pos:start="173:16" pos:end="173:20"><literal type="number" pos:start="173:16" pos:end="173:20">65536</literal></expr>, <expr pos:start="173:23" pos:end="173:23"><literal type="number" pos:start="173:23" pos:end="173:23">2</literal></expr>, <expr pos:start="173:26" pos:end="173:26"><literal type="number" pos:start="173:26" pos:end="173:26">3</literal></expr>, <expr pos:start="173:29" pos:end="173:29"><literal type="number" pos:start="173:29" pos:end="173:29">4</literal></expr>, <expr pos:start="173:32" pos:end="173:32"><literal type="number" pos:start="173:32" pos:end="173:32">5</literal></expr>, <expr pos:start="173:35" pos:end="173:35"><literal type="number" pos:start="173:35" pos:end="173:35">6</literal></expr>, <expr pos:start="173:38" pos:end="173:38"><literal type="number" pos:start="173:38" pos:end="173:38">7</literal></expr>, <expr pos:start="173:41" pos:end="173:41"><literal type="number" pos:start="173:41" pos:end="173:41">8</literal></expr>, <expr pos:start="173:44" pos:end="173:45"><literal type="number" pos:start="173:44" pos:end="173:45">10</literal></expr>, <expr pos:start="173:48" pos:end="173:49"><literal type="number" pos:start="173:48" pos:end="173:49">12</literal></expr>, <expr pos:start="173:52" pos:end="173:53"><literal type="number" pos:start="173:52" pos:end="173:53">16</literal></expr>, <expr pos:start="173:56" pos:end="173:57"><literal type="number" pos:start="173:56" pos:end="173:57">32</literal></expr>, <expr pos:start="173:60" pos:end="173:61"><literal type="number" pos:start="173:60" pos:end="173:61">64</literal></expr>, <expr pos:start="173:64" pos:end="173:66"><literal type="number" pos:start="173:64" pos:end="173:66">128</literal></expr>, <expr pos:start="173:69" pos:end="173:71"><literal type="number" pos:start="173:69" pos:end="173:71">256</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="179:5" pos:end="189:5"><if pos:start="179:5" pos:end="185:5">if <condition pos:start="179:8" pos:end="179:17">(<expr pos:start="179:9" pos:end="179:16"><name pos:start="179:9" pos:end="179:11">OP0</name> <operator pos:start="179:13" pos:end="179:14">&gt;=</operator> <literal type="number" pos:start="179:16" pos:end="179:16">8</literal></expr>)</condition> <block pos:start="179:19" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:47">

        <expr_stmt pos:start="181:9" pos:end="181:33"><expr pos:start="181:9" pos:end="181:32"><name pos:start="181:9" pos:end="181:19"><name pos:start="181:9" pos:end="181:10">dc</name><operator pos:start="181:11" pos:end="181:12">-&gt;</operator><name pos:start="181:13" pos:end="181:19">next_pc</name></name> <operator pos:start="181:21" pos:end="181:21">=</operator> <name pos:start="181:23" pos:end="181:28"><name pos:start="181:23" pos:end="181:24">dc</name><operator pos:start="181:25" pos:end="181:26">-&gt;</operator><name pos:start="181:27" pos:end="181:28">pc</name></name> <operator pos:start="181:30" pos:end="181:30">+</operator> <literal type="number" pos:start="181:32" pos:end="181:32">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:47"><expr pos:start="183:9" pos:end="183:46"><call pos:start="183:9" pos:end="183:46"><name pos:start="183:9" pos:end="183:18">HAS_OPTION</name><argument_list pos:start="183:19" pos:end="183:46">(<argument pos:start="183:20" pos:end="183:45"><expr pos:start="183:20" pos:end="183:45"><name pos:start="183:20" pos:end="183:45">XTENSA_OPTION_CODE_DENSITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="189:5">else <block pos:start="185:12" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:33">

        <expr_stmt pos:start="187:9" pos:end="187:33"><expr pos:start="187:9" pos:end="187:32"><name pos:start="187:9" pos:end="187:19"><name pos:start="187:9" pos:end="187:10">dc</name><operator pos:start="187:11" pos:end="187:12">-&gt;</operator><name pos:start="187:13" pos:end="187:19">next_pc</name></name> <operator pos:start="187:21" pos:end="187:21">=</operator> <name pos:start="187:23" pos:end="187:28"><name pos:start="187:23" pos:end="187:24">dc</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:28">pc</name></name> <operator pos:start="187:30" pos:end="187:30">+</operator> <literal type="number" pos:start="187:32" pos:end="187:32">3</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="193:5" pos:end="1871:5">switch <condition pos:start="193:12" pos:end="193:16">(<expr pos:start="193:13" pos:end="193:15"><name pos:start="193:13" pos:end="193:15">OP0</name></expr>)</condition> <block pos:start="193:18" pos:end="1871:5">{<block_content pos:start="195:5" pos:end="1869:14">

    <case pos:start="195:5" pos:end="195:11">case <expr pos:start="195:10" pos:end="195:10"><literal type="number" pos:start="195:10" pos:end="195:10">0</literal></expr>:</case> <comment type="block" pos:start="195:13" pos:end="195:20">/*QRST*/</comment>

        <switch pos:start="197:9" pos:end="1175:9">switch <condition pos:start="197:16" pos:end="197:20">(<expr pos:start="197:17" pos:end="197:19"><name pos:start="197:17" pos:end="197:19">OP1</name></expr>)</condition> <block pos:start="197:22" pos:end="1175:9">{<block_content pos:start="199:9" pos:end="1173:18">

        <case pos:start="199:9" pos:end="199:15">case <expr pos:start="199:14" pos:end="199:14"><literal type="number" pos:start="199:14" pos:end="199:14">0</literal></expr>:</case> <comment type="block" pos:start="199:17" pos:end="199:24">/*RST0*/</comment>

            <switch pos:start="201:13" pos:end="595:13">switch <condition pos:start="201:20" pos:end="201:24">(<expr pos:start="201:21" pos:end="201:23"><name pos:start="201:21" pos:end="201:23">OP2</name></expr>)</condition> <block pos:start="201:26" pos:end="595:13">{<block_content pos:start="203:13" pos:end="593:22">

            <case pos:start="203:13" pos:end="203:19">case <expr pos:start="203:18" pos:end="203:18"><literal type="number" pos:start="203:18" pos:end="203:18">0</literal></expr>:</case> <comment type="block" pos:start="203:21" pos:end="203:27">/*ST0*/</comment>

                <if_stmt pos:start="205:17" pos:end="209:17"><if pos:start="205:17" pos:end="209:17">if <condition pos:start="205:20" pos:end="205:41">(<expr pos:start="205:21" pos:end="205:40"><operator pos:start="205:21" pos:end="205:21">(</operator><name pos:start="205:22" pos:end="205:26">RRR_R</name> <operator pos:start="205:28" pos:end="205:28">&amp;</operator> <literal type="number" pos:start="205:30" pos:end="205:32">0xc</literal><operator pos:start="205:33" pos:end="205:33">)</operator> <operator pos:start="205:35" pos:end="205:36">==</operator> <literal type="number" pos:start="205:38" pos:end="205:40">0x8</literal></expr>)</condition> <block pos:start="205:43" pos:end="209:17">{<block_content pos:start="207:21" pos:end="207:54">

                    <expr_stmt pos:start="207:21" pos:end="207:54"><expr pos:start="207:21" pos:end="207:53"><call pos:start="207:21" pos:end="207:53"><name pos:start="207:21" pos:end="207:30">HAS_OPTION</name><argument_list pos:start="207:31" pos:end="207:53">(<argument pos:start="207:32" pos:end="207:52"><expr pos:start="207:32" pos:end="207:52"><name pos:start="207:32" pos:end="207:52">XTENSA_OPTION_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <switch pos:start="213:17" pos:end="327:17">switch <condition pos:start="213:24" pos:end="213:30">(<expr pos:start="213:25" pos:end="213:29"><name pos:start="213:25" pos:end="213:29">RRR_R</name></expr>)</condition> <block pos:start="213:32" pos:end="327:17">{<block_content pos:start="215:17" pos:end="323:26">

                <case pos:start="215:17" pos:end="215:23">case <expr pos:start="215:22" pos:end="215:22"><literal type="number" pos:start="215:22" pos:end="215:22">0</literal></expr>:</case> <comment type="block" pos:start="215:25" pos:end="215:32">/*SNM0*/</comment>

                    <switch pos:start="217:21" pos:end="301:21">switch <condition pos:start="217:28" pos:end="217:36">(<expr pos:start="217:29" pos:end="217:35"><name pos:start="217:29" pos:end="217:35">CALLX_M</name></expr>)</condition> <block pos:start="217:38" pos:end="301:21">{<block_content pos:start="219:21" pos:end="299:30">

                    <case pos:start="219:21" pos:end="219:27">case <expr pos:start="219:26" pos:end="219:26"><literal type="number" pos:start="219:26" pos:end="219:26">0</literal></expr>:</case> <comment type="block" pos:start="219:29" pos:end="219:35">/*ILL*/</comment>

                        <break pos:start="221:25" pos:end="221:30">break;</break>



                    <case pos:start="225:21" pos:end="225:27">case <expr pos:start="225:26" pos:end="225:26"><literal type="number" pos:start="225:26" pos:end="225:26">1</literal></expr>:</case> <comment type="block" pos:start="225:29" pos:end="225:40">/*reserved*/</comment>

                        <break pos:start="227:25" pos:end="227:30">break;</break>



                    <case pos:start="231:21" pos:end="231:27">case <expr pos:start="231:26" pos:end="231:26"><literal type="number" pos:start="231:26" pos:end="231:26">2</literal></expr>:</case> <comment type="block" pos:start="231:29" pos:end="231:34">/*JR*/</comment>

                        <switch pos:start="233:25" pos:end="257:25">switch <condition pos:start="233:32" pos:end="233:40">(<expr pos:start="233:33" pos:end="233:39"><name pos:start="233:33" pos:end="233:39">CALLX_N</name></expr>)</condition> <block pos:start="233:42" pos:end="257:25">{<block_content pos:start="235:25" pos:end="255:34">

                        <case pos:start="235:25" pos:end="235:31">case <expr pos:start="235:30" pos:end="235:30"><literal type="number" pos:start="235:30" pos:end="235:30">0</literal></expr>:</case> <comment type="block" pos:start="235:33" pos:end="235:39">/*RET*/</comment>

                        <case pos:start="237:25" pos:end="237:31">case <expr pos:start="237:30" pos:end="237:30"><literal type="number" pos:start="237:30" pos:end="237:30">2</literal></expr>:</case> <comment type="block" pos:start="237:33" pos:end="237:38">/*JX*/</comment>

                            <expr_stmt pos:start="239:29" pos:end="239:57"><expr pos:start="239:29" pos:end="239:56"><call pos:start="239:29" pos:end="239:56"><name pos:start="239:29" pos:end="239:36">gen_jump</name><argument_list pos:start="239:37" pos:end="239:56">(<argument pos:start="239:38" pos:end="239:39"><expr pos:start="239:38" pos:end="239:39"><name pos:start="239:38" pos:end="239:39">dc</name></expr></argument>, <argument pos:start="239:42" pos:end="239:55"><expr pos:start="239:42" pos:end="239:55"><name pos:start="239:42" pos:end="239:55"><name pos:start="239:42" pos:end="239:46">cpu_R</name><index pos:start="239:47" pos:end="239:55">[<expr pos:start="239:48" pos:end="239:54"><name pos:start="239:48" pos:end="239:54">CALLX_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="241:29" pos:end="241:34">break;</break>



                        <case pos:start="245:25" pos:end="245:31">case <expr pos:start="245:30" pos:end="245:30"><literal type="number" pos:start="245:30" pos:end="245:30">1</literal></expr>:</case> <comment type="block" pos:start="245:33" pos:end="245:41">/*RETWw*/</comment>

                            <expr_stmt pos:start="247:29" pos:end="247:72"><expr pos:start="247:29" pos:end="247:71"><call pos:start="247:29" pos:end="247:71"><name pos:start="247:29" pos:end="247:38">HAS_OPTION</name><argument_list pos:start="247:39" pos:end="247:71">(<argument pos:start="247:40" pos:end="247:70"><expr pos:start="247:40" pos:end="247:70"><name pos:start="247:40" pos:end="247:70">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="249:29" pos:end="249:34">break;</break>



                        <case pos:start="253:25" pos:end="253:31">case <expr pos:start="253:30" pos:end="253:30"><literal type="number" pos:start="253:30" pos:end="253:30">3</literal></expr>:</case> <comment type="block" pos:start="253:33" pos:end="253:44">/*reserved*/</comment>

                            <break pos:start="255:29" pos:end="255:34">break;</break>

                        </block_content>}</block></switch>

                        <break pos:start="259:25" pos:end="259:30">break;</break>



                    <case pos:start="263:21" pos:end="263:27">case <expr pos:start="263:26" pos:end="263:26"><literal type="number" pos:start="263:26" pos:end="263:26">3</literal></expr>:</case> <comment type="block" pos:start="263:29" pos:end="263:37">/*CALLX*/</comment>

                        <switch pos:start="265:25" pos:end="297:25">switch <condition pos:start="265:32" pos:end="265:40">(<expr pos:start="265:33" pos:end="265:39"><name pos:start="265:33" pos:end="265:39">CALLX_N</name></expr>)</condition> <block pos:start="265:42" pos:end="297:25">{<block_content pos:start="267:25" pos:end="295:34">

                        <case pos:start="267:25" pos:end="267:31">case <expr pos:start="267:30" pos:end="267:30"><literal type="number" pos:start="267:30" pos:end="267:30">0</literal></expr>:</case> <comment type="block" pos:start="267:33" pos:end="267:42">/*CALLX0*/</comment>

                            <block pos:start="269:29" pos:end="281:29">{<block_content pos:start="271:33" pos:end="279:51">

                                <decl_stmt pos:start="271:33" pos:end="271:66"><decl pos:start="271:33" pos:end="271:65"><type pos:start="271:33" pos:end="271:40"><name pos:start="271:33" pos:end="271:40">TCGv_i32</name></type> <name pos:start="271:42" pos:end="271:44">tmp</name> <init pos:start="271:46" pos:end="271:65">= <expr pos:start="271:48" pos:end="271:65"><call pos:start="271:48" pos:end="271:65"><name pos:start="271:48" pos:end="271:63">tcg_temp_new_i32</name><argument_list pos:start="271:64" pos:end="271:65">()</argument_list></call></expr></init></decl>;</decl_stmt>

                                <expr_stmt pos:start="273:33" pos:end="273:69"><expr pos:start="273:33" pos:end="273:68"><call pos:start="273:33" pos:end="273:68"><name pos:start="273:33" pos:end="273:47">tcg_gen_mov_i32</name><argument_list pos:start="273:48" pos:end="273:68">(<argument pos:start="273:49" pos:end="273:51"><expr pos:start="273:49" pos:end="273:51"><name pos:start="273:49" pos:end="273:51">tmp</name></expr></argument>, <argument pos:start="273:54" pos:end="273:67"><expr pos:start="273:54" pos:end="273:67"><name pos:start="273:54" pos:end="273:67"><name pos:start="273:54" pos:end="273:58">cpu_R</name><index pos:start="273:59" pos:end="273:67">[<expr pos:start="273:60" pos:end="273:66"><name pos:start="273:60" pos:end="273:66">CALLX_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="275:33" pos:end="275:72"><expr pos:start="275:33" pos:end="275:71"><call pos:start="275:33" pos:end="275:71"><name pos:start="275:33" pos:end="275:48">tcg_gen_movi_i32</name><argument_list pos:start="275:49" pos:end="275:71">(<argument pos:start="275:50" pos:end="275:57"><expr pos:start="275:50" pos:end="275:57"><name pos:start="275:50" pos:end="275:57"><name pos:start="275:50" pos:end="275:54">cpu_R</name><index pos:start="275:55" pos:end="275:57">[<expr pos:start="275:56" pos:end="275:56"><literal type="number" pos:start="275:56" pos:end="275:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="275:60" pos:end="275:70"><expr pos:start="275:60" pos:end="275:70"><name pos:start="275:60" pos:end="275:70"><name pos:start="275:60" pos:end="275:61">dc</name><operator pos:start="275:62" pos:end="275:63">-&gt;</operator><name pos:start="275:64" pos:end="275:70">next_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="277:33" pos:end="277:50"><expr pos:start="277:33" pos:end="277:49"><call pos:start="277:33" pos:end="277:49"><name pos:start="277:33" pos:end="277:40">gen_jump</name><argument_list pos:start="277:41" pos:end="277:49">(<argument pos:start="277:42" pos:end="277:43"><expr pos:start="277:42" pos:end="277:43"><name pos:start="277:42" pos:end="277:43">dc</name></expr></argument>, <argument pos:start="277:46" pos:end="277:48"><expr pos:start="277:46" pos:end="277:48"><name pos:start="277:46" pos:end="277:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="279:33" pos:end="279:51"><expr pos:start="279:33" pos:end="279:50"><call pos:start="279:33" pos:end="279:50"><name pos:start="279:33" pos:end="279:45">tcg_temp_free</name><argument_list pos:start="279:46" pos:end="279:50">(<argument pos:start="279:47" pos:end="279:49"><expr pos:start="279:47" pos:end="279:49"><name pos:start="279:47" pos:end="279:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block>

                            <break pos:start="283:29" pos:end="283:34">break;</break>



                        <case pos:start="287:25" pos:end="287:31">case <expr pos:start="287:30" pos:end="287:30"><literal type="number" pos:start="287:30" pos:end="287:30">1</literal></expr>:</case> <comment type="block" pos:start="287:33" pos:end="287:43">/*CALLX4w*/</comment>

                        <case pos:start="289:25" pos:end="289:31">case <expr pos:start="289:30" pos:end="289:30"><literal type="number" pos:start="289:30" pos:end="289:30">2</literal></expr>:</case> <comment type="block" pos:start="289:33" pos:end="289:43">/*CALLX8w*/</comment>

                        <case pos:start="291:25" pos:end="291:31">case <expr pos:start="291:30" pos:end="291:30"><literal type="number" pos:start="291:30" pos:end="291:30">3</literal></expr>:</case> <comment type="block" pos:start="291:33" pos:end="291:44">/*CALLX12w*/</comment>

                            <expr_stmt pos:start="293:29" pos:end="293:72"><expr pos:start="293:29" pos:end="293:71"><call pos:start="293:29" pos:end="293:71"><name pos:start="293:29" pos:end="293:38">HAS_OPTION</name><argument_list pos:start="293:39" pos:end="293:71">(<argument pos:start="293:40" pos:end="293:70"><expr pos:start="293:40" pos:end="293:70"><name pos:start="293:40" pos:end="293:70">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="295:29" pos:end="295:34">break;</break>

                        </block_content>}</block></switch>

                        <break pos:start="299:25" pos:end="299:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="303:21" pos:end="303:26">break;</break>



                <case pos:start="307:17" pos:end="307:23">case <expr pos:start="307:22" pos:end="307:22"><literal type="number" pos:start="307:22" pos:end="307:22">1</literal></expr>:</case> <comment type="block" pos:start="307:25" pos:end="307:34">/*MOVSPw*/</comment>

                    <expr_stmt pos:start="309:21" pos:end="309:64"><expr pos:start="309:21" pos:end="309:63"><call pos:start="309:21" pos:end="309:63"><name pos:start="309:21" pos:end="309:30">HAS_OPTION</name><argument_list pos:start="309:31" pos:end="309:63">(<argument pos:start="309:32" pos:end="309:62"><expr pos:start="309:32" pos:end="309:62"><name pos:start="309:32" pos:end="309:62">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="311:21" pos:end="311:26">break;</break>



                <case pos:start="315:17" pos:end="315:23">case <expr pos:start="315:22" pos:end="315:22"><literal type="number" pos:start="315:22" pos:end="315:22">2</literal></expr>:</case> <comment type="block" pos:start="315:25" pos:end="315:32">/*SYNC*/</comment>

                    <break pos:start="317:21" pos:end="317:26">break;</break>



                <case pos:start="321:17" pos:end="321:23">case <expr pos:start="321:22" pos:end="321:22"><literal type="number" pos:start="321:22" pos:end="321:22">3</literal></expr>:</case>

                    <break pos:start="323:21" pos:end="323:26">break;</break>



                </block_content>}</block></switch>

                <break pos:start="329:17" pos:end="329:22">break;</break>



            <case pos:start="333:13" pos:end="333:19">case <expr pos:start="333:18" pos:end="333:18"><literal type="number" pos:start="333:18" pos:end="333:18">1</literal></expr>:</case> <comment type="block" pos:start="333:21" pos:end="333:27">/*AND*/</comment>

                <expr_stmt pos:start="335:17" pos:end="335:74"><expr pos:start="335:17" pos:end="335:73"><call pos:start="335:17" pos:end="335:73"><name pos:start="335:17" pos:end="335:31">tcg_gen_and_i32</name><argument_list pos:start="335:32" pos:end="335:73">(<argument pos:start="335:33" pos:end="335:44"><expr pos:start="335:33" pos:end="335:44"><name pos:start="335:33" pos:end="335:44"><name pos:start="335:33" pos:end="335:37">cpu_R</name><index pos:start="335:38" pos:end="335:44">[<expr pos:start="335:39" pos:end="335:43"><name pos:start="335:39" pos:end="335:43">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="335:47" pos:end="335:58"><expr pos:start="335:47" pos:end="335:58"><name pos:start="335:47" pos:end="335:58"><name pos:start="335:47" pos:end="335:51">cpu_R</name><index pos:start="335:52" pos:end="335:58">[<expr pos:start="335:53" pos:end="335:57"><name pos:start="335:53" pos:end="335:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="335:61" pos:end="335:72"><expr pos:start="335:61" pos:end="335:72"><name pos:start="335:61" pos:end="335:72"><name pos:start="335:61" pos:end="335:65">cpu_R</name><index pos:start="335:66" pos:end="335:72">[<expr pos:start="335:67" pos:end="335:71"><name pos:start="335:67" pos:end="335:71">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="337:17" pos:end="337:22">break;</break>



            <case pos:start="341:13" pos:end="341:19">case <expr pos:start="341:18" pos:end="341:18"><literal type="number" pos:start="341:18" pos:end="341:18">2</literal></expr>:</case> <comment type="block" pos:start="341:21" pos:end="341:26">/*OR*/</comment>

                <expr_stmt pos:start="343:17" pos:end="343:73"><expr pos:start="343:17" pos:end="343:72"><call pos:start="343:17" pos:end="343:72"><name pos:start="343:17" pos:end="343:30">tcg_gen_or_i32</name><argument_list pos:start="343:31" pos:end="343:72">(<argument pos:start="343:32" pos:end="343:43"><expr pos:start="343:32" pos:end="343:43"><name pos:start="343:32" pos:end="343:43"><name pos:start="343:32" pos:end="343:36">cpu_R</name><index pos:start="343:37" pos:end="343:43">[<expr pos:start="343:38" pos:end="343:42"><name pos:start="343:38" pos:end="343:42">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="343:46" pos:end="343:57"><expr pos:start="343:46" pos:end="343:57"><name pos:start="343:46" pos:end="343:57"><name pos:start="343:46" pos:end="343:50">cpu_R</name><index pos:start="343:51" pos:end="343:57">[<expr pos:start="343:52" pos:end="343:56"><name pos:start="343:52" pos:end="343:56">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="343:60" pos:end="343:71"><expr pos:start="343:60" pos:end="343:71"><name pos:start="343:60" pos:end="343:71"><name pos:start="343:60" pos:end="343:64">cpu_R</name><index pos:start="343:65" pos:end="343:71">[<expr pos:start="343:66" pos:end="343:70"><name pos:start="343:66" pos:end="343:70">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="345:17" pos:end="345:22">break;</break>



            <case pos:start="349:13" pos:end="349:19">case <expr pos:start="349:18" pos:end="349:18"><literal type="number" pos:start="349:18" pos:end="349:18">3</literal></expr>:</case> <comment type="block" pos:start="349:21" pos:end="349:27">/*XOR*/</comment>

                <expr_stmt pos:start="351:17" pos:end="351:74"><expr pos:start="351:17" pos:end="351:73"><call pos:start="351:17" pos:end="351:73"><name pos:start="351:17" pos:end="351:31">tcg_gen_xor_i32</name><argument_list pos:start="351:32" pos:end="351:73">(<argument pos:start="351:33" pos:end="351:44"><expr pos:start="351:33" pos:end="351:44"><name pos:start="351:33" pos:end="351:44"><name pos:start="351:33" pos:end="351:37">cpu_R</name><index pos:start="351:38" pos:end="351:44">[<expr pos:start="351:39" pos:end="351:43"><name pos:start="351:39" pos:end="351:43">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="351:47" pos:end="351:58"><expr pos:start="351:47" pos:end="351:58"><name pos:start="351:47" pos:end="351:58"><name pos:start="351:47" pos:end="351:51">cpu_R</name><index pos:start="351:52" pos:end="351:58">[<expr pos:start="351:53" pos:end="351:57"><name pos:start="351:53" pos:end="351:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="351:61" pos:end="351:72"><expr pos:start="351:61" pos:end="351:72"><name pos:start="351:61" pos:end="351:72"><name pos:start="351:61" pos:end="351:65">cpu_R</name><index pos:start="351:66" pos:end="351:72">[<expr pos:start="351:67" pos:end="351:71"><name pos:start="351:67" pos:end="351:71">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="353:17" pos:end="353:22">break;</break>



            <case pos:start="357:13" pos:end="357:19">case <expr pos:start="357:18" pos:end="357:18"><literal type="number" pos:start="357:18" pos:end="357:18">4</literal></expr>:</case> <comment type="block" pos:start="357:21" pos:end="357:27">/*ST1*/</comment>

                <switch pos:start="359:17" pos:end="475:17">switch <condition pos:start="359:24" pos:end="359:30">(<expr pos:start="359:25" pos:end="359:29"><name pos:start="359:25" pos:end="359:29">RRR_R</name></expr>)</condition> <block pos:start="359:32" pos:end="475:17">{<block_content pos:start="361:17" pos:end="473:26">

                <case pos:start="361:17" pos:end="361:23">case <expr pos:start="361:22" pos:end="361:22"><literal type="number" pos:start="361:22" pos:end="361:22">0</literal></expr>:</case> <comment type="block" pos:start="361:25" pos:end="361:31">/*SSR*/</comment>

                    <expr_stmt pos:start="363:21" pos:end="363:58"><expr pos:start="363:21" pos:end="363:57"><call pos:start="363:21" pos:end="363:57"><name pos:start="363:21" pos:end="363:39">gen_right_shift_sar</name><argument_list pos:start="363:40" pos:end="363:57">(<argument pos:start="363:41" pos:end="363:42"><expr pos:start="363:41" pos:end="363:42"><name pos:start="363:41" pos:end="363:42">dc</name></expr></argument>, <argument pos:start="363:45" pos:end="363:56"><expr pos:start="363:45" pos:end="363:56"><name pos:start="363:45" pos:end="363:56"><name pos:start="363:45" pos:end="363:49">cpu_R</name><index pos:start="363:50" pos:end="363:56">[<expr pos:start="363:51" pos:end="363:55"><name pos:start="363:51" pos:end="363:55">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="365:21" pos:end="365:26">break;</break>



                <case pos:start="369:17" pos:end="369:23">case <expr pos:start="369:22" pos:end="369:22"><literal type="number" pos:start="369:22" pos:end="369:22">1</literal></expr>:</case> <comment type="block" pos:start="369:25" pos:end="369:31">/*SSL*/</comment>

                    <expr_stmt pos:start="371:21" pos:end="371:57"><expr pos:start="371:21" pos:end="371:56"><call pos:start="371:21" pos:end="371:56"><name pos:start="371:21" pos:end="371:38">gen_left_shift_sar</name><argument_list pos:start="371:39" pos:end="371:56">(<argument pos:start="371:40" pos:end="371:41"><expr pos:start="371:40" pos:end="371:41"><name pos:start="371:40" pos:end="371:41">dc</name></expr></argument>, <argument pos:start="371:44" pos:end="371:55"><expr pos:start="371:44" pos:end="371:55"><name pos:start="371:44" pos:end="371:55"><name pos:start="371:44" pos:end="371:48">cpu_R</name><index pos:start="371:49" pos:end="371:55">[<expr pos:start="371:50" pos:end="371:54"><name pos:start="371:50" pos:end="371:54">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="373:21" pos:end="373:26">break;</break>



                <case pos:start="377:17" pos:end="377:23">case <expr pos:start="377:22" pos:end="377:22"><literal type="number" pos:start="377:22" pos:end="377:22">2</literal></expr>:</case> <comment type="block" pos:start="377:25" pos:end="377:33">/*SSA8L*/</comment>

                    <block pos:start="379:21" pos:end="389:21">{<block_content pos:start="381:25" pos:end="387:43">

                        <decl_stmt pos:start="381:25" pos:end="381:58"><decl pos:start="381:25" pos:end="381:57"><type pos:start="381:25" pos:end="381:32"><name pos:start="381:25" pos:end="381:32">TCGv_i32</name></type> <name pos:start="381:34" pos:end="381:36">tmp</name> <init pos:start="381:38" pos:end="381:57">= <expr pos:start="381:40" pos:end="381:57"><call pos:start="381:40" pos:end="381:57"><name pos:start="381:40" pos:end="381:55">tcg_temp_new_i32</name><argument_list pos:start="381:56" pos:end="381:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="383:25" pos:end="383:63"><expr pos:start="383:25" pos:end="383:62"><call pos:start="383:25" pos:end="383:62"><name pos:start="383:25" pos:end="383:40">tcg_gen_shli_i32</name><argument_list pos:start="383:41" pos:end="383:62">(<argument pos:start="383:42" pos:end="383:44"><expr pos:start="383:42" pos:end="383:44"><name pos:start="383:42" pos:end="383:44">tmp</name></expr></argument>, <argument pos:start="383:47" pos:end="383:58"><expr pos:start="383:47" pos:end="383:58"><name pos:start="383:47" pos:end="383:58"><name pos:start="383:47" pos:end="383:51">cpu_R</name><index pos:start="383:52" pos:end="383:58">[<expr pos:start="383:53" pos:end="383:57"><name pos:start="383:53" pos:end="383:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="383:61" pos:end="383:61"><expr pos:start="383:61" pos:end="383:61"><literal type="number" pos:start="383:61" pos:end="383:61">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="385:25" pos:end="385:53"><expr pos:start="385:25" pos:end="385:52"><call pos:start="385:25" pos:end="385:52"><name pos:start="385:25" pos:end="385:43">gen_right_shift_sar</name><argument_list pos:start="385:44" pos:end="385:52">(<argument pos:start="385:45" pos:end="385:46"><expr pos:start="385:45" pos:end="385:46"><name pos:start="385:45" pos:end="385:46">dc</name></expr></argument>, <argument pos:start="385:49" pos:end="385:51"><expr pos:start="385:49" pos:end="385:51"><name pos:start="385:49" pos:end="385:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="387:25" pos:end="387:43"><expr pos:start="387:25" pos:end="387:42"><call pos:start="387:25" pos:end="387:42"><name pos:start="387:25" pos:end="387:37">tcg_temp_free</name><argument_list pos:start="387:38" pos:end="387:42">(<argument pos:start="387:39" pos:end="387:41"><expr pos:start="387:39" pos:end="387:41"><name pos:start="387:39" pos:end="387:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="391:21" pos:end="391:26">break;</break>



                <case pos:start="395:17" pos:end="395:23">case <expr pos:start="395:22" pos:end="395:22"><literal type="number" pos:start="395:22" pos:end="395:22">3</literal></expr>:</case> <comment type="block" pos:start="395:25" pos:end="395:33">/*SSA8B*/</comment>

                    <block pos:start="397:21" pos:end="407:21">{<block_content pos:start="399:25" pos:end="405:43">

                        <decl_stmt pos:start="399:25" pos:end="399:58"><decl pos:start="399:25" pos:end="399:57"><type pos:start="399:25" pos:end="399:32"><name pos:start="399:25" pos:end="399:32">TCGv_i32</name></type> <name pos:start="399:34" pos:end="399:36">tmp</name> <init pos:start="399:38" pos:end="399:57">= <expr pos:start="399:40" pos:end="399:57"><call pos:start="399:40" pos:end="399:57"><name pos:start="399:40" pos:end="399:55">tcg_temp_new_i32</name><argument_list pos:start="399:56" pos:end="399:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="401:25" pos:end="401:63"><expr pos:start="401:25" pos:end="401:62"><call pos:start="401:25" pos:end="401:62"><name pos:start="401:25" pos:end="401:40">tcg_gen_shli_i32</name><argument_list pos:start="401:41" pos:end="401:62">(<argument pos:start="401:42" pos:end="401:44"><expr pos:start="401:42" pos:end="401:44"><name pos:start="401:42" pos:end="401:44">tmp</name></expr></argument>, <argument pos:start="401:47" pos:end="401:58"><expr pos:start="401:47" pos:end="401:58"><name pos:start="401:47" pos:end="401:58"><name pos:start="401:47" pos:end="401:51">cpu_R</name><index pos:start="401:52" pos:end="401:58">[<expr pos:start="401:53" pos:end="401:57"><name pos:start="401:53" pos:end="401:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="401:61" pos:end="401:61"><expr pos:start="401:61" pos:end="401:61"><literal type="number" pos:start="401:61" pos:end="401:61">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="403:25" pos:end="403:52"><expr pos:start="403:25" pos:end="403:51"><call pos:start="403:25" pos:end="403:51"><name pos:start="403:25" pos:end="403:42">gen_left_shift_sar</name><argument_list pos:start="403:43" pos:end="403:51">(<argument pos:start="403:44" pos:end="403:45"><expr pos:start="403:44" pos:end="403:45"><name pos:start="403:44" pos:end="403:45">dc</name></expr></argument>, <argument pos:start="403:48" pos:end="403:50"><expr pos:start="403:48" pos:end="403:50"><name pos:start="403:48" pos:end="403:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="405:25" pos:end="405:43"><expr pos:start="405:25" pos:end="405:42"><call pos:start="405:25" pos:end="405:42"><name pos:start="405:25" pos:end="405:37">tcg_temp_free</name><argument_list pos:start="405:38" pos:end="405:42">(<argument pos:start="405:39" pos:end="405:41"><expr pos:start="405:39" pos:end="405:41"><name pos:start="405:39" pos:end="405:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="409:21" pos:end="409:26">break;</break>



                <case pos:start="413:17" pos:end="413:23">case <expr pos:start="413:22" pos:end="413:22"><literal type="number" pos:start="413:22" pos:end="413:22">4</literal></expr>:</case> <comment type="block" pos:start="413:25" pos:end="413:32">/*SSAI*/</comment>

                    <block pos:start="415:21" pos:end="425:21">{<block_content pos:start="417:25" pos:end="423:43">

                        <decl_stmt pos:start="417:25" pos:end="419:60"><decl pos:start="417:25" pos:end="419:59"><type pos:start="417:25" pos:end="417:32"><name pos:start="417:25" pos:end="417:32">TCGv_i32</name></type> <name pos:start="417:34" pos:end="417:36">tmp</name> <init pos:start="417:38" pos:end="419:59">= <expr pos:start="417:40" pos:end="419:59"><call pos:start="417:40" pos:end="419:59"><name pos:start="417:40" pos:end="417:52">tcg_const_i32</name><argument_list pos:start="417:53" pos:end="419:59">(

                                <argument pos:start="419:33" pos:end="419:58"><expr pos:start="419:33" pos:end="419:58"><name pos:start="419:33" pos:end="419:37">RRR_S</name> <operator pos:start="419:39" pos:end="419:39">|</operator> <operator pos:start="419:41" pos:end="419:41">(</operator><operator pos:start="419:42" pos:end="419:42">(</operator><name pos:start="419:43" pos:end="419:47">RRR_T</name> <operator pos:start="419:49" pos:end="419:49">&amp;</operator> <literal type="number" pos:start="419:51" pos:end="419:51">1</literal><operator pos:start="419:52" pos:end="419:52">)</operator> <operator pos:start="419:54" pos:end="419:55">&lt;&lt;</operator> <literal type="number" pos:start="419:57" pos:end="419:57">4</literal><operator pos:start="419:58" pos:end="419:58">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="421:25" pos:end="421:53"><expr pos:start="421:25" pos:end="421:52"><call pos:start="421:25" pos:end="421:52"><name pos:start="421:25" pos:end="421:43">gen_right_shift_sar</name><argument_list pos:start="421:44" pos:end="421:52">(<argument pos:start="421:45" pos:end="421:46"><expr pos:start="421:45" pos:end="421:46"><name pos:start="421:45" pos:end="421:46">dc</name></expr></argument>, <argument pos:start="421:49" pos:end="421:51"><expr pos:start="421:49" pos:end="421:51"><name pos:start="421:49" pos:end="421:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="423:25" pos:end="423:43"><expr pos:start="423:25" pos:end="423:42"><call pos:start="423:25" pos:end="423:42"><name pos:start="423:25" pos:end="423:37">tcg_temp_free</name><argument_list pos:start="423:38" pos:end="423:42">(<argument pos:start="423:39" pos:end="423:41"><expr pos:start="423:39" pos:end="423:41"><name pos:start="423:39" pos:end="423:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="427:21" pos:end="427:26">break;</break>



                <case pos:start="431:17" pos:end="431:23">case <expr pos:start="431:22" pos:end="431:22"><literal type="number" pos:start="431:22" pos:end="431:22">6</literal></expr>:</case> <comment type="block" pos:start="431:25" pos:end="431:31">/*RER*/</comment>

                    <break pos:start="433:21" pos:end="433:26">break;</break>



                <case pos:start="437:17" pos:end="437:23">case <expr pos:start="437:22" pos:end="437:22"><literal type="number" pos:start="437:22" pos:end="437:22">7</literal></expr>:</case> <comment type="block" pos:start="437:25" pos:end="437:31">/*WER*/</comment>

                    <break pos:start="439:21" pos:end="439:26">break;</break>



                <case pos:start="443:17" pos:end="443:23">case <expr pos:start="443:22" pos:end="443:22"><literal type="number" pos:start="443:22" pos:end="443:22">8</literal></expr>:</case> <comment type="block" pos:start="443:25" pos:end="443:33">/*ROTWw*/</comment>

                    <expr_stmt pos:start="445:21" pos:end="445:64"><expr pos:start="445:21" pos:end="445:63"><call pos:start="445:21" pos:end="445:63"><name pos:start="445:21" pos:end="445:30">HAS_OPTION</name><argument_list pos:start="445:31" pos:end="445:63">(<argument pos:start="445:32" pos:end="445:62"><expr pos:start="445:32" pos:end="445:62"><name pos:start="445:32" pos:end="445:62">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="447:21" pos:end="447:26">break;</break>



                <case pos:start="451:17" pos:end="451:24">case <expr pos:start="451:22" pos:end="451:23"><literal type="number" pos:start="451:22" pos:end="451:23">14</literal></expr>:</case> <comment type="block" pos:start="451:26" pos:end="451:33">/*NSAu*/</comment>

                    <expr_stmt pos:start="453:21" pos:end="453:54"><expr pos:start="453:21" pos:end="453:53"><call pos:start="453:21" pos:end="453:53"><name pos:start="453:21" pos:end="453:30">HAS_OPTION</name><argument_list pos:start="453:31" pos:end="453:53">(<argument pos:start="453:32" pos:end="453:52"><expr pos:start="453:32" pos:end="453:52"><name pos:start="453:32" pos:end="453:52">XTENSA_OPTION_MISC_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="455:21" pos:end="455:63"><expr pos:start="455:21" pos:end="455:62"><call pos:start="455:21" pos:end="455:62"><name pos:start="455:21" pos:end="455:34">gen_helper_nsa</name><argument_list pos:start="455:35" pos:end="455:62">(<argument pos:start="455:36" pos:end="455:47"><expr pos:start="455:36" pos:end="455:47"><name pos:start="455:36" pos:end="455:47"><name pos:start="455:36" pos:end="455:40">cpu_R</name><index pos:start="455:41" pos:end="455:47">[<expr pos:start="455:42" pos:end="455:46"><name pos:start="455:42" pos:end="455:46">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="455:50" pos:end="455:61"><expr pos:start="455:50" pos:end="455:61"><name pos:start="455:50" pos:end="455:61"><name pos:start="455:50" pos:end="455:54">cpu_R</name><index pos:start="455:55" pos:end="455:61">[<expr pos:start="455:56" pos:end="455:60"><name pos:start="455:56" pos:end="455:60">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="457:21" pos:end="457:26">break;</break>



                <case pos:start="461:17" pos:end="461:24">case <expr pos:start="461:22" pos:end="461:23"><literal type="number" pos:start="461:22" pos:end="461:23">15</literal></expr>:</case> <comment type="block" pos:start="461:26" pos:end="461:34">/*NSAUu*/</comment>

                    <expr_stmt pos:start="463:21" pos:end="463:54"><expr pos:start="463:21" pos:end="463:53"><call pos:start="463:21" pos:end="463:53"><name pos:start="463:21" pos:end="463:30">HAS_OPTION</name><argument_list pos:start="463:31" pos:end="463:53">(<argument pos:start="463:32" pos:end="463:52"><expr pos:start="463:32" pos:end="463:52"><name pos:start="463:32" pos:end="463:52">XTENSA_OPTION_MISC_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="465:21" pos:end="465:64"><expr pos:start="465:21" pos:end="465:63"><call pos:start="465:21" pos:end="465:63"><name pos:start="465:21" pos:end="465:35">gen_helper_nsau</name><argument_list pos:start="465:36" pos:end="465:63">(<argument pos:start="465:37" pos:end="465:48"><expr pos:start="465:37" pos:end="465:48"><name pos:start="465:37" pos:end="465:48"><name pos:start="465:37" pos:end="465:41">cpu_R</name><index pos:start="465:42" pos:end="465:48">[<expr pos:start="465:43" pos:end="465:47"><name pos:start="465:43" pos:end="465:47">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="465:51" pos:end="465:62"><expr pos:start="465:51" pos:end="465:62"><name pos:start="465:51" pos:end="465:62"><name pos:start="465:51" pos:end="465:55">cpu_R</name><index pos:start="465:56" pos:end="465:62">[<expr pos:start="465:57" pos:end="465:61"><name pos:start="465:57" pos:end="465:61">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="467:21" pos:end="467:26">break;</break>



                <default pos:start="471:17" pos:end="471:24">default:</default> <comment type="block" pos:start="471:26" pos:end="471:37">/*reserved*/</comment>

                    <break pos:start="473:21" pos:end="473:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="477:17" pos:end="477:22">break;</break>



            <case pos:start="481:13" pos:end="481:19">case <expr pos:start="481:18" pos:end="481:18"><literal type="number" pos:start="481:18" pos:end="481:18">5</literal></expr>:</case> <comment type="block" pos:start="481:21" pos:end="481:27">/*TLB*/</comment>

                <break pos:start="483:17" pos:end="483:22">break;</break>



            <case pos:start="487:13" pos:end="487:19">case <expr pos:start="487:18" pos:end="487:18"><literal type="number" pos:start="487:18" pos:end="487:18">6</literal></expr>:</case> <comment type="block" pos:start="487:21" pos:end="487:27">/*RT0*/</comment>

                <switch pos:start="489:17" pos:end="525:17">switch <condition pos:start="489:24" pos:end="489:30">(<expr pos:start="489:25" pos:end="489:29"><name pos:start="489:25" pos:end="489:29">RRR_S</name></expr>)</condition> <block pos:start="489:32" pos:end="525:17">{<block_content pos:start="491:17" pos:end="523:26">

                <case pos:start="491:17" pos:end="491:23">case <expr pos:start="491:22" pos:end="491:22"><literal type="number" pos:start="491:22" pos:end="491:22">0</literal></expr>:</case> <comment type="block" pos:start="491:25" pos:end="491:31">/*NEG*/</comment>

                    <expr_stmt pos:start="493:21" pos:end="493:64"><expr pos:start="493:21" pos:end="493:63"><call pos:start="493:21" pos:end="493:63"><name pos:start="493:21" pos:end="493:35">tcg_gen_neg_i32</name><argument_list pos:start="493:36" pos:end="493:63">(<argument pos:start="493:37" pos:end="493:48"><expr pos:start="493:37" pos:end="493:48"><name pos:start="493:37" pos:end="493:48"><name pos:start="493:37" pos:end="493:41">cpu_R</name><index pos:start="493:42" pos:end="493:48">[<expr pos:start="493:43" pos:end="493:47"><name pos:start="493:43" pos:end="493:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="493:51" pos:end="493:62"><expr pos:start="493:51" pos:end="493:62"><name pos:start="493:51" pos:end="493:62"><name pos:start="493:51" pos:end="493:55">cpu_R</name><index pos:start="493:56" pos:end="493:62">[<expr pos:start="493:57" pos:end="493:61"><name pos:start="493:57" pos:end="493:61">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="495:21" pos:end="495:26">break;</break>



                <case pos:start="499:17" pos:end="499:23">case <expr pos:start="499:22" pos:end="499:22"><literal type="number" pos:start="499:22" pos:end="499:22">1</literal></expr>:</case> <comment type="block" pos:start="499:25" pos:end="499:31">/*ABS*/</comment>

                    <block pos:start="501:21" pos:end="515:21">{<block_content pos:start="503:25" pos:end="513:45">

                        <decl_stmt pos:start="503:25" pos:end="503:52"><decl pos:start="503:25" pos:end="503:51"><type pos:start="503:25" pos:end="503:27"><name pos:start="503:25" pos:end="503:27">int</name></type> <name pos:start="503:29" pos:end="503:33">label</name> <init pos:start="503:35" pos:end="503:51">= <expr pos:start="503:37" pos:end="503:51"><call pos:start="503:37" pos:end="503:51"><name pos:start="503:37" pos:end="503:49">gen_new_label</name><argument_list pos:start="503:50" pos:end="503:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="505:25" pos:end="505:68"><expr pos:start="505:25" pos:end="505:67"><call pos:start="505:25" pos:end="505:67"><name pos:start="505:25" pos:end="505:39">tcg_gen_mov_i32</name><argument_list pos:start="505:40" pos:end="505:67">(<argument pos:start="505:41" pos:end="505:52"><expr pos:start="505:41" pos:end="505:52"><name pos:start="505:41" pos:end="505:52"><name pos:start="505:41" pos:end="505:45">cpu_R</name><index pos:start="505:46" pos:end="505:52">[<expr pos:start="505:47" pos:end="505:51"><name pos:start="505:47" pos:end="505:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="505:55" pos:end="505:66"><expr pos:start="505:55" pos:end="505:66"><name pos:start="505:55" pos:end="505:66"><name pos:start="505:55" pos:end="505:59">cpu_R</name><index pos:start="505:60" pos:end="505:66">[<expr pos:start="505:61" pos:end="505:65"><name pos:start="505:61" pos:end="505:65">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="507:25" pos:end="509:69"><expr pos:start="507:25" pos:end="509:68"><call pos:start="507:25" pos:end="509:68"><name pos:start="507:25" pos:end="507:43">tcg_gen_brcondi_i32</name><argument_list pos:start="507:44" pos:end="509:68">(

                                <argument pos:start="509:33" pos:end="509:43"><expr pos:start="509:33" pos:end="509:43"><name pos:start="509:33" pos:end="509:43">TCG_COND_GE</name></expr></argument>, <argument pos:start="509:46" pos:end="509:57"><expr pos:start="509:46" pos:end="509:57"><name pos:start="509:46" pos:end="509:57"><name pos:start="509:46" pos:end="509:50">cpu_R</name><index pos:start="509:51" pos:end="509:57">[<expr pos:start="509:52" pos:end="509:56"><name pos:start="509:52" pos:end="509:56">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="509:60" pos:end="509:60"><expr pos:start="509:60" pos:end="509:60"><literal type="number" pos:start="509:60" pos:end="509:60">0</literal></expr></argument>, <argument pos:start="509:63" pos:end="509:67"><expr pos:start="509:63" pos:end="509:67"><name pos:start="509:63" pos:end="509:67">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="511:25" pos:end="511:68"><expr pos:start="511:25" pos:end="511:67"><call pos:start="511:25" pos:end="511:67"><name pos:start="511:25" pos:end="511:39">tcg_gen_neg_i32</name><argument_list pos:start="511:40" pos:end="511:67">(<argument pos:start="511:41" pos:end="511:52"><expr pos:start="511:41" pos:end="511:52"><name pos:start="511:41" pos:end="511:52"><name pos:start="511:41" pos:end="511:45">cpu_R</name><index pos:start="511:46" pos:end="511:52">[<expr pos:start="511:47" pos:end="511:51"><name pos:start="511:47" pos:end="511:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="511:55" pos:end="511:66"><expr pos:start="511:55" pos:end="511:66"><name pos:start="511:55" pos:end="511:66"><name pos:start="511:55" pos:end="511:59">cpu_R</name><index pos:start="511:60" pos:end="511:66">[<expr pos:start="511:61" pos:end="511:65"><name pos:start="511:61" pos:end="511:65">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="513:25" pos:end="513:45"><expr pos:start="513:25" pos:end="513:44"><call pos:start="513:25" pos:end="513:44"><name pos:start="513:25" pos:end="513:37">gen_set_label</name><argument_list pos:start="513:38" pos:end="513:44">(<argument pos:start="513:39" pos:end="513:43"><expr pos:start="513:39" pos:end="513:43"><name pos:start="513:39" pos:end="513:43">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="517:21" pos:end="517:26">break;</break>



                <default pos:start="521:17" pos:end="521:24">default:</default> <comment type="block" pos:start="521:26" pos:end="521:37">/*reserved*/</comment>

                    <break pos:start="523:21" pos:end="523:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="527:17" pos:end="527:22">break;</break>



            <case pos:start="531:13" pos:end="531:19">case <expr pos:start="531:18" pos:end="531:18"><literal type="number" pos:start="531:18" pos:end="531:18">7</literal></expr>:</case> <comment type="block" pos:start="531:21" pos:end="531:32">/*reserved*/</comment>

                <break pos:start="533:17" pos:end="533:22">break;</break>



            <case pos:start="537:13" pos:end="537:19">case <expr pos:start="537:18" pos:end="537:18"><literal type="number" pos:start="537:18" pos:end="537:18">8</literal></expr>:</case> <comment type="block" pos:start="537:21" pos:end="537:27">/*ADD*/</comment>

                <expr_stmt pos:start="539:17" pos:end="539:74"><expr pos:start="539:17" pos:end="539:73"><call pos:start="539:17" pos:end="539:73"><name pos:start="539:17" pos:end="539:31">tcg_gen_add_i32</name><argument_list pos:start="539:32" pos:end="539:73">(<argument pos:start="539:33" pos:end="539:44"><expr pos:start="539:33" pos:end="539:44"><name pos:start="539:33" pos:end="539:44"><name pos:start="539:33" pos:end="539:37">cpu_R</name><index pos:start="539:38" pos:end="539:44">[<expr pos:start="539:39" pos:end="539:43"><name pos:start="539:39" pos:end="539:43">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="539:47" pos:end="539:58"><expr pos:start="539:47" pos:end="539:58"><name pos:start="539:47" pos:end="539:58"><name pos:start="539:47" pos:end="539:51">cpu_R</name><index pos:start="539:52" pos:end="539:58">[<expr pos:start="539:53" pos:end="539:57"><name pos:start="539:53" pos:end="539:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="539:61" pos:end="539:72"><expr pos:start="539:61" pos:end="539:72"><name pos:start="539:61" pos:end="539:72"><name pos:start="539:61" pos:end="539:65">cpu_R</name><index pos:start="539:66" pos:end="539:72">[<expr pos:start="539:67" pos:end="539:71"><name pos:start="539:67" pos:end="539:71">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="541:17" pos:end="541:22">break;</break>



            <case pos:start="545:13" pos:end="545:19">case <expr pos:start="545:18" pos:end="545:18"><literal type="number" pos:start="545:18" pos:end="545:18">9</literal></expr>:</case> <comment type="block" pos:start="545:21" pos:end="545:28">/*ADD**/</comment>

            <case pos:start="547:13" pos:end="547:20">case <expr pos:start="547:18" pos:end="547:19"><literal type="number" pos:start="547:18" pos:end="547:19">10</literal></expr>:</case>

            <case pos:start="549:13" pos:end="549:20">case <expr pos:start="549:18" pos:end="549:19"><literal type="number" pos:start="549:18" pos:end="549:19">11</literal></expr>:</case>

                <block pos:start="551:17" pos:end="561:17">{<block_content pos:start="553:21" pos:end="559:39">

                    <decl_stmt pos:start="553:21" pos:end="553:54"><decl pos:start="553:21" pos:end="553:53"><type pos:start="553:21" pos:end="553:28"><name pos:start="553:21" pos:end="553:28">TCGv_i32</name></type> <name pos:start="553:30" pos:end="553:32">tmp</name> <init pos:start="553:34" pos:end="553:53">= <expr pos:start="553:36" pos:end="553:53"><call pos:start="553:36" pos:end="553:53"><name pos:start="553:36" pos:end="553:51">tcg_temp_new_i32</name><argument_list pos:start="553:52" pos:end="553:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="555:21" pos:end="555:65"><expr pos:start="555:21" pos:end="555:64"><call pos:start="555:21" pos:end="555:64"><name pos:start="555:21" pos:end="555:36">tcg_gen_shli_i32</name><argument_list pos:start="555:37" pos:end="555:64">(<argument pos:start="555:38" pos:end="555:40"><expr pos:start="555:38" pos:end="555:40"><name pos:start="555:38" pos:end="555:40">tmp</name></expr></argument>, <argument pos:start="555:43" pos:end="555:54"><expr pos:start="555:43" pos:end="555:54"><name pos:start="555:43" pos:end="555:54"><name pos:start="555:43" pos:end="555:47">cpu_R</name><index pos:start="555:48" pos:end="555:54">[<expr pos:start="555:49" pos:end="555:53"><name pos:start="555:49" pos:end="555:53">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="555:57" pos:end="555:63"><expr pos:start="555:57" pos:end="555:63"><name pos:start="555:57" pos:end="555:59">OP2</name> <operator pos:start="555:61" pos:end="555:61">-</operator> <literal type="number" pos:start="555:63" pos:end="555:63">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="557:21" pos:end="557:69"><expr pos:start="557:21" pos:end="557:68"><call pos:start="557:21" pos:end="557:68"><name pos:start="557:21" pos:end="557:35">tcg_gen_add_i32</name><argument_list pos:start="557:36" pos:end="557:68">(<argument pos:start="557:37" pos:end="557:48"><expr pos:start="557:37" pos:end="557:48"><name pos:start="557:37" pos:end="557:48"><name pos:start="557:37" pos:end="557:41">cpu_R</name><index pos:start="557:42" pos:end="557:48">[<expr pos:start="557:43" pos:end="557:47"><name pos:start="557:43" pos:end="557:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="557:51" pos:end="557:53"><expr pos:start="557:51" pos:end="557:53"><name pos:start="557:51" pos:end="557:53">tmp</name></expr></argument>, <argument pos:start="557:56" pos:end="557:67"><expr pos:start="557:56" pos:end="557:67"><name pos:start="557:56" pos:end="557:67"><name pos:start="557:56" pos:end="557:60">cpu_R</name><index pos:start="557:61" pos:end="557:67">[<expr pos:start="557:62" pos:end="557:66"><name pos:start="557:62" pos:end="557:66">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="559:21" pos:end="559:39"><expr pos:start="559:21" pos:end="559:38"><call pos:start="559:21" pos:end="559:38"><name pos:start="559:21" pos:end="559:33">tcg_temp_free</name><argument_list pos:start="559:34" pos:end="559:38">(<argument pos:start="559:35" pos:end="559:37"><expr pos:start="559:35" pos:end="559:37"><name pos:start="559:35" pos:end="559:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="563:17" pos:end="563:22">break;</break>



            <case pos:start="567:13" pos:end="567:20">case <expr pos:start="567:18" pos:end="567:19"><literal type="number" pos:start="567:18" pos:end="567:19">12</literal></expr>:</case> <comment type="block" pos:start="567:22" pos:end="567:28">/*SUB*/</comment>

                <expr_stmt pos:start="569:17" pos:end="569:74"><expr pos:start="569:17" pos:end="569:73"><call pos:start="569:17" pos:end="569:73"><name pos:start="569:17" pos:end="569:31">tcg_gen_sub_i32</name><argument_list pos:start="569:32" pos:end="569:73">(<argument pos:start="569:33" pos:end="569:44"><expr pos:start="569:33" pos:end="569:44"><name pos:start="569:33" pos:end="569:44"><name pos:start="569:33" pos:end="569:37">cpu_R</name><index pos:start="569:38" pos:end="569:44">[<expr pos:start="569:39" pos:end="569:43"><name pos:start="569:39" pos:end="569:43">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="569:47" pos:end="569:58"><expr pos:start="569:47" pos:end="569:58"><name pos:start="569:47" pos:end="569:58"><name pos:start="569:47" pos:end="569:51">cpu_R</name><index pos:start="569:52" pos:end="569:58">[<expr pos:start="569:53" pos:end="569:57"><name pos:start="569:53" pos:end="569:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="569:61" pos:end="569:72"><expr pos:start="569:61" pos:end="569:72"><name pos:start="569:61" pos:end="569:72"><name pos:start="569:61" pos:end="569:65">cpu_R</name><index pos:start="569:66" pos:end="569:72">[<expr pos:start="569:67" pos:end="569:71"><name pos:start="569:67" pos:end="569:71">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="571:17" pos:end="571:22">break;</break>



            <case pos:start="575:13" pos:end="575:20">case <expr pos:start="575:18" pos:end="575:19"><literal type="number" pos:start="575:18" pos:end="575:19">13</literal></expr>:</case> <comment type="block" pos:start="575:22" pos:end="575:29">/*SUB**/</comment>

            <case pos:start="577:13" pos:end="577:20">case <expr pos:start="577:18" pos:end="577:19"><literal type="number" pos:start="577:18" pos:end="577:19">14</literal></expr>:</case>

            <case pos:start="579:13" pos:end="579:20">case <expr pos:start="579:18" pos:end="579:19"><literal type="number" pos:start="579:18" pos:end="579:19">15</literal></expr>:</case>

                <block pos:start="581:17" pos:end="591:17">{<block_content pos:start="583:21" pos:end="589:39">

                    <decl_stmt pos:start="583:21" pos:end="583:54"><decl pos:start="583:21" pos:end="583:53"><type pos:start="583:21" pos:end="583:28"><name pos:start="583:21" pos:end="583:28">TCGv_i32</name></type> <name pos:start="583:30" pos:end="583:32">tmp</name> <init pos:start="583:34" pos:end="583:53">= <expr pos:start="583:36" pos:end="583:53"><call pos:start="583:36" pos:end="583:53"><name pos:start="583:36" pos:end="583:51">tcg_temp_new_i32</name><argument_list pos:start="583:52" pos:end="583:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="585:21" pos:end="585:66"><expr pos:start="585:21" pos:end="585:65"><call pos:start="585:21" pos:end="585:65"><name pos:start="585:21" pos:end="585:36">tcg_gen_shli_i32</name><argument_list pos:start="585:37" pos:end="585:65">(<argument pos:start="585:38" pos:end="585:40"><expr pos:start="585:38" pos:end="585:40"><name pos:start="585:38" pos:end="585:40">tmp</name></expr></argument>, <argument pos:start="585:43" pos:end="585:54"><expr pos:start="585:43" pos:end="585:54"><name pos:start="585:43" pos:end="585:54"><name pos:start="585:43" pos:end="585:47">cpu_R</name><index pos:start="585:48" pos:end="585:54">[<expr pos:start="585:49" pos:end="585:53"><name pos:start="585:49" pos:end="585:53">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="585:57" pos:end="585:64"><expr pos:start="585:57" pos:end="585:64"><name pos:start="585:57" pos:end="585:59">OP2</name> <operator pos:start="585:61" pos:end="585:61">-</operator> <literal type="number" pos:start="585:63" pos:end="585:64">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="587:21" pos:end="587:69"><expr pos:start="587:21" pos:end="587:68"><call pos:start="587:21" pos:end="587:68"><name pos:start="587:21" pos:end="587:35">tcg_gen_sub_i32</name><argument_list pos:start="587:36" pos:end="587:68">(<argument pos:start="587:37" pos:end="587:48"><expr pos:start="587:37" pos:end="587:48"><name pos:start="587:37" pos:end="587:48"><name pos:start="587:37" pos:end="587:41">cpu_R</name><index pos:start="587:42" pos:end="587:48">[<expr pos:start="587:43" pos:end="587:47"><name pos:start="587:43" pos:end="587:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="587:51" pos:end="587:53"><expr pos:start="587:51" pos:end="587:53"><name pos:start="587:51" pos:end="587:53">tmp</name></expr></argument>, <argument pos:start="587:56" pos:end="587:67"><expr pos:start="587:56" pos:end="587:67"><name pos:start="587:56" pos:end="587:67"><name pos:start="587:56" pos:end="587:60">cpu_R</name><index pos:start="587:61" pos:end="587:67">[<expr pos:start="587:62" pos:end="587:66"><name pos:start="587:62" pos:end="587:66">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="589:21" pos:end="589:39"><expr pos:start="589:21" pos:end="589:38"><call pos:start="589:21" pos:end="589:38"><name pos:start="589:21" pos:end="589:33">tcg_temp_free</name><argument_list pos:start="589:34" pos:end="589:38">(<argument pos:start="589:35" pos:end="589:37"><expr pos:start="589:35" pos:end="589:37"><name pos:start="589:35" pos:end="589:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="593:17" pos:end="593:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="597:13" pos:end="597:18">break;</break>



        <case pos:start="601:9" pos:end="601:15">case <expr pos:start="601:14" pos:end="601:14"><literal type="number" pos:start="601:14" pos:end="601:14">1</literal></expr>:</case> <comment type="block" pos:start="601:17" pos:end="601:24">/*RST1*/</comment>

            <switch pos:start="603:13" pos:end="831:13">switch <condition pos:start="603:20" pos:end="603:24">(<expr pos:start="603:21" pos:end="603:23"><name pos:start="603:21" pos:end="603:23">OP2</name></expr>)</condition> <block pos:start="603:26" pos:end="831:13">{<block_content pos:start="605:13" pos:end="829:22">

            <case pos:start="605:13" pos:end="605:19">case <expr pos:start="605:18" pos:end="605:18"><literal type="number" pos:start="605:18" pos:end="605:18">0</literal></expr>:</case> <comment type="block" pos:start="605:21" pos:end="605:28">/*SLLI*/</comment>

            <case pos:start="607:13" pos:end="607:19">case <expr pos:start="607:18" pos:end="607:18"><literal type="number" pos:start="607:18" pos:end="607:18">1</literal></expr>:</case>

                <expr_stmt pos:start="609:17" pos:end="611:57"><expr pos:start="609:17" pos:end="611:56"><call pos:start="609:17" pos:end="611:56"><name pos:start="609:17" pos:end="609:32">tcg_gen_shli_i32</name><argument_list pos:start="609:33" pos:end="611:56">(<argument pos:start="609:34" pos:end="609:45"><expr pos:start="609:34" pos:end="609:45"><name pos:start="609:34" pos:end="609:45"><name pos:start="609:34" pos:end="609:38">cpu_R</name><index pos:start="609:39" pos:end="609:45">[<expr pos:start="609:40" pos:end="609:44"><name pos:start="609:40" pos:end="609:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="609:48" pos:end="609:59"><expr pos:start="609:48" pos:end="609:59"><name pos:start="609:48" pos:end="609:59"><name pos:start="609:48" pos:end="609:52">cpu_R</name><index pos:start="609:53" pos:end="609:59">[<expr pos:start="609:54" pos:end="609:58"><name pos:start="609:54" pos:end="609:58">RRR_S</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="611:25" pos:end="611:55"><expr pos:start="611:25" pos:end="611:55"><literal type="number" pos:start="611:25" pos:end="611:28">32</literal> <operator pos:start="611:28" pos:end="611:28">-</operator> <operator pos:start="611:30" pos:end="611:30">(</operator><name pos:start="611:31" pos:end="611:35">RRR_T</name> <operator pos:start="611:37" pos:end="611:37">|</operator> <operator pos:start="611:39" pos:end="611:39">(</operator><operator pos:start="611:40" pos:end="611:40">(</operator><name pos:start="611:41" pos:end="611:43">OP2</name> <operator pos:start="611:45" pos:end="611:45">&amp;</operator> <literal type="number" pos:start="611:47" pos:end="611:47">1</literal><operator pos:start="611:48" pos:end="611:48">)</operator> <operator pos:start="611:50" pos:end="611:51">&lt;&lt;</operator> <literal type="number" pos:start="611:53" pos:end="611:53">4</literal><operator pos:start="611:54" pos:end="611:54">)</operator><operator pos:start="611:55" pos:end="611:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="613:17" pos:end="613:22">break;</break>



            <case pos:start="617:13" pos:end="617:19">case <expr pos:start="617:18" pos:end="617:18"><literal type="number" pos:start="617:18" pos:end="617:18">2</literal></expr>:</case> <comment type="block" pos:start="617:21" pos:end="617:28">/*SRAI*/</comment>

            <case pos:start="619:13" pos:end="619:19">case <expr pos:start="619:18" pos:end="619:18"><literal type="number" pos:start="619:18" pos:end="619:18">3</literal></expr>:</case>

                <expr_stmt pos:start="621:17" pos:end="623:50"><expr pos:start="621:17" pos:end="623:49"><call pos:start="621:17" pos:end="623:49"><name pos:start="621:17" pos:end="621:32">tcg_gen_sari_i32</name><argument_list pos:start="621:33" pos:end="623:49">(<argument pos:start="621:34" pos:end="621:45"><expr pos:start="621:34" pos:end="621:45"><name pos:start="621:34" pos:end="621:45"><name pos:start="621:34" pos:end="621:38">cpu_R</name><index pos:start="621:39" pos:end="621:45">[<expr pos:start="621:40" pos:end="621:44"><name pos:start="621:40" pos:end="621:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="621:48" pos:end="621:59"><expr pos:start="621:48" pos:end="621:59"><name pos:start="621:48" pos:end="621:59"><name pos:start="621:48" pos:end="621:52">cpu_R</name><index pos:start="621:53" pos:end="621:59">[<expr pos:start="621:54" pos:end="621:58"><name pos:start="621:54" pos:end="621:58">RRR_T</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="623:25" pos:end="623:48"><expr pos:start="623:25" pos:end="623:48"><name pos:start="623:25" pos:end="623:29">RRR_S</name> <operator pos:start="623:31" pos:end="623:31">|</operator> <operator pos:start="623:33" pos:end="623:33">(</operator><operator pos:start="623:34" pos:end="623:34">(</operator><name pos:start="623:35" pos:end="623:37">OP2</name> <operator pos:start="623:39" pos:end="623:39">&amp;</operator> <literal type="number" pos:start="623:41" pos:end="623:41">1</literal><operator pos:start="623:42" pos:end="623:42">)</operator> <operator pos:start="623:44" pos:end="623:45">&lt;&lt;</operator> <literal type="number" pos:start="623:47" pos:end="623:47">4</literal><operator pos:start="623:48" pos:end="623:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="625:17" pos:end="625:22">break;</break>



            <case pos:start="629:13" pos:end="629:19">case <expr pos:start="629:18" pos:end="629:18"><literal type="number" pos:start="629:18" pos:end="629:18">4</literal></expr>:</case> <comment type="block" pos:start="629:21" pos:end="629:28">/*SRLI*/</comment>

                <expr_stmt pos:start="631:17" pos:end="631:68"><expr pos:start="631:17" pos:end="631:67"><call pos:start="631:17" pos:end="631:67"><name pos:start="631:17" pos:end="631:32">tcg_gen_shri_i32</name><argument_list pos:start="631:33" pos:end="631:67">(<argument pos:start="631:34" pos:end="631:45"><expr pos:start="631:34" pos:end="631:45"><name pos:start="631:34" pos:end="631:45"><name pos:start="631:34" pos:end="631:38">cpu_R</name><index pos:start="631:39" pos:end="631:45">[<expr pos:start="631:40" pos:end="631:44"><name pos:start="631:40" pos:end="631:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="631:48" pos:end="631:59"><expr pos:start="631:48" pos:end="631:59"><name pos:start="631:48" pos:end="631:59"><name pos:start="631:48" pos:end="631:52">cpu_R</name><index pos:start="631:53" pos:end="631:59">[<expr pos:start="631:54" pos:end="631:58"><name pos:start="631:54" pos:end="631:58">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="631:62" pos:end="631:66"><expr pos:start="631:62" pos:end="631:66"><name pos:start="631:62" pos:end="631:66">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="633:17" pos:end="633:22">break;</break>



            <case pos:start="637:13" pos:end="637:19">case <expr pos:start="637:18" pos:end="637:18"><literal type="number" pos:start="637:18" pos:end="637:18">6</literal></expr>:</case> <comment type="block" pos:start="637:21" pos:end="637:27">/*XSR*/</comment>

                <block pos:start="639:17" pos:end="651:17">{<block_content pos:start="641:21" pos:end="649:39">

                    <decl_stmt pos:start="641:21" pos:end="641:54"><decl pos:start="641:21" pos:end="641:53"><type pos:start="641:21" pos:end="641:28"><name pos:start="641:21" pos:end="641:28">TCGv_i32</name></type> <name pos:start="641:30" pos:end="641:32">tmp</name> <init pos:start="641:34" pos:end="641:53">= <expr pos:start="641:36" pos:end="641:53"><call pos:start="641:36" pos:end="641:53"><name pos:start="641:36" pos:end="641:51">tcg_temp_new_i32</name><argument_list pos:start="641:52" pos:end="641:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="643:21" pos:end="643:55"><expr pos:start="643:21" pos:end="643:54"><call pos:start="643:21" pos:end="643:54"><name pos:start="643:21" pos:end="643:35">tcg_gen_mov_i32</name><argument_list pos:start="643:36" pos:end="643:54">(<argument pos:start="643:37" pos:end="643:39"><expr pos:start="643:37" pos:end="643:39"><name pos:start="643:37" pos:end="643:39">tmp</name></expr></argument>, <argument pos:start="643:42" pos:end="643:53"><expr pos:start="643:42" pos:end="643:53"><name pos:start="643:42" pos:end="643:53"><name pos:start="643:42" pos:end="643:46">cpu_R</name><index pos:start="643:47" pos:end="643:53">[<expr pos:start="643:48" pos:end="643:52"><name pos:start="643:48" pos:end="643:52">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="645:21" pos:end="645:54"><expr pos:start="645:21" pos:end="645:53"><call pos:start="645:21" pos:end="645:53"><name pos:start="645:21" pos:end="645:27">gen_rsr</name><argument_list pos:start="645:28" pos:end="645:53">(<argument pos:start="645:29" pos:end="645:30"><expr pos:start="645:29" pos:end="645:30"><name pos:start="645:29" pos:end="645:30">dc</name></expr></argument>, <argument pos:start="645:33" pos:end="645:44"><expr pos:start="645:33" pos:end="645:44"><name pos:start="645:33" pos:end="645:44"><name pos:start="645:33" pos:end="645:37">cpu_R</name><index pos:start="645:38" pos:end="645:44">[<expr pos:start="645:39" pos:end="645:43"><name pos:start="645:39" pos:end="645:43">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="645:47" pos:end="645:52"><expr pos:start="645:47" pos:end="645:52"><name pos:start="645:47" pos:end="645:52">RSR_SR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="647:21" pos:end="647:45"><expr pos:start="647:21" pos:end="647:44"><call pos:start="647:21" pos:end="647:44"><name pos:start="647:21" pos:end="647:27">gen_wsr</name><argument_list pos:start="647:28" pos:end="647:44">(<argument pos:start="647:29" pos:end="647:30"><expr pos:start="647:29" pos:end="647:30"><name pos:start="647:29" pos:end="647:30">dc</name></expr></argument>, <argument pos:start="647:33" pos:end="647:38"><expr pos:start="647:33" pos:end="647:38"><name pos:start="647:33" pos:end="647:38">RSR_SR</name></expr></argument>, <argument pos:start="647:41" pos:end="647:43"><expr pos:start="647:41" pos:end="647:43"><name pos:start="647:41" pos:end="647:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="649:21" pos:end="649:39"><expr pos:start="649:21" pos:end="649:38"><call pos:start="649:21" pos:end="649:38"><name pos:start="649:21" pos:end="649:33">tcg_temp_free</name><argument_list pos:start="649:34" pos:end="649:38">(<argument pos:start="649:35" pos:end="649:37"><expr pos:start="649:35" pos:end="649:37"><name pos:start="649:35" pos:end="649:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="653:17" pos:end="684:0">break;</break>



                <comment type="block" pos:start="657:17" pos:end="663:19">/*

                 * Note: 64 bit ops are used here solely because SAR values

                 * have range 0..63

                 */</comment>

<cpp:define pos:start="665:1" pos:end="679:27">#<cpp:directive pos:start="665:2" pos:end="665:7">define</cpp:directive> <cpp:macro pos:start="665:9" pos:end="665:31"><name pos:start="665:9" pos:end="665:21">gen_shift_reg</name><parameter_list pos:start="665:22" pos:end="665:31">(<parameter pos:start="665:23" pos:end="665:25"><type pos:start="665:23" pos:end="665:25"><name pos:start="665:23" pos:end="665:25">cmd</name></type></parameter>, <parameter pos:start="665:28" pos:end="665:30"><type pos:start="665:28" pos:end="665:30"><name pos:start="665:28" pos:end="665:30">reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="665:33" pos:end="679:27">do { \

                    TCGv_i64 tmp = tcg_temp_new_i64(); \

                    tcg_gen_extu_i32_i64(tmp, reg); \

                    tcg_gen_##cmd##_i64(v, v, tmp); \

                    tcg_gen_trunc_i64_i32(cpu_R[RRR_R], v); \

                    tcg_temp_free_i64(v); \

                    tcg_temp_free_i64(tmp); \

                } while (0)</cpp:value></cpp:define>



<cpp:define pos:start="683:1" pos:end="683:54">#<cpp:directive pos:start="683:2" pos:end="683:7">define</cpp:directive> <cpp:macro pos:start="683:9" pos:end="683:22"><name pos:start="683:9" pos:end="683:17">gen_shift</name><parameter_list pos:start="683:18" pos:end="683:22">(<parameter pos:start="683:19" pos:end="683:21"><type pos:start="683:19" pos:end="683:21"><name pos:start="683:19" pos:end="683:21">cmd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="683:24" pos:end="683:54">gen_shift_reg(cmd, cpu_SR[SAR])</cpp:value></cpp:define>



            <case pos:start="687:13" pos:end="687:19">case <expr pos:start="687:18" pos:end="687:18"><literal type="number" pos:start="687:18" pos:end="687:18">8</literal></expr>:</case> <comment type="block" pos:start="687:21" pos:end="687:27">/*SRC*/</comment>

                <block pos:start="689:17" pos:end="697:17">{<block_content pos:start="691:21" pos:end="695:35">

                    <decl_stmt pos:start="691:21" pos:end="691:52"><decl pos:start="691:21" pos:end="691:51"><type pos:start="691:21" pos:end="691:28"><name pos:start="691:21" pos:end="691:28">TCGv_i64</name></type> <name pos:start="691:30" pos:end="691:30">v</name> <init pos:start="691:32" pos:end="691:51">= <expr pos:start="691:34" pos:end="691:51"><call pos:start="691:34" pos:end="691:51"><name pos:start="691:34" pos:end="691:49">tcg_temp_new_i64</name><argument_list pos:start="691:50" pos:end="691:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="693:21" pos:end="693:74"><expr pos:start="693:21" pos:end="693:73"><call pos:start="693:21" pos:end="693:73"><name pos:start="693:21" pos:end="693:42">tcg_gen_concat_i32_i64</name><argument_list pos:start="693:43" pos:end="693:73">(<argument pos:start="693:44" pos:end="693:44"><expr pos:start="693:44" pos:end="693:44"><name pos:start="693:44" pos:end="693:44">v</name></expr></argument>, <argument pos:start="693:47" pos:end="693:58"><expr pos:start="693:47" pos:end="693:58"><name pos:start="693:47" pos:end="693:58"><name pos:start="693:47" pos:end="693:51">cpu_R</name><index pos:start="693:52" pos:end="693:58">[<expr pos:start="693:53" pos:end="693:57"><name pos:start="693:53" pos:end="693:57">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="693:61" pos:end="693:72"><expr pos:start="693:61" pos:end="693:72"><name pos:start="693:61" pos:end="693:72"><name pos:start="693:61" pos:end="693:65">cpu_R</name><index pos:start="693:66" pos:end="693:72">[<expr pos:start="693:67" pos:end="693:71"><name pos:start="693:67" pos:end="693:71">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="695:21" pos:end="695:35"><expr pos:start="695:21" pos:end="695:34"><call pos:start="695:21" pos:end="695:34"><name pos:start="695:21" pos:end="695:29">gen_shift</name><argument_list pos:start="695:30" pos:end="695:34">(<argument pos:start="695:31" pos:end="695:33"><expr pos:start="695:31" pos:end="695:33"><name pos:start="695:31" pos:end="695:33">shr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="699:17" pos:end="699:22">break;</break>



            <case pos:start="703:13" pos:end="703:19">case <expr pos:start="703:18" pos:end="703:18"><literal type="number" pos:start="703:18" pos:end="703:18">9</literal></expr>:</case> <comment type="block" pos:start="703:21" pos:end="703:27">/*SRL*/</comment>

                <if_stmt pos:start="705:17" pos:end="717:17"><if pos:start="705:17" pos:end="709:17">if <condition pos:start="705:20" pos:end="705:33">(<expr pos:start="705:21" pos:end="705:32"><name pos:start="705:21" pos:end="705:32"><name pos:start="705:21" pos:end="705:22">dc</name><operator pos:start="705:23" pos:end="705:24">-&gt;</operator><name pos:start="705:25" pos:end="705:32">sar_5bit</name></name></expr>)</condition> <block pos:start="705:35" pos:end="709:17">{<block_content pos:start="707:21" pos:end="707:77">

                    <expr_stmt pos:start="707:21" pos:end="707:77"><expr pos:start="707:21" pos:end="707:76"><call pos:start="707:21" pos:end="707:76"><name pos:start="707:21" pos:end="707:35">tcg_gen_shr_i32</name><argument_list pos:start="707:36" pos:end="707:76">(<argument pos:start="707:37" pos:end="707:48"><expr pos:start="707:37" pos:end="707:48"><name pos:start="707:37" pos:end="707:48"><name pos:start="707:37" pos:end="707:41">cpu_R</name><index pos:start="707:42" pos:end="707:48">[<expr pos:start="707:43" pos:end="707:47"><name pos:start="707:43" pos:end="707:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="707:51" pos:end="707:62"><expr pos:start="707:51" pos:end="707:62"><name pos:start="707:51" pos:end="707:62"><name pos:start="707:51" pos:end="707:55">cpu_R</name><index pos:start="707:56" pos:end="707:62">[<expr pos:start="707:57" pos:end="707:61"><name pos:start="707:57" pos:end="707:61">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="707:65" pos:end="707:75"><expr pos:start="707:65" pos:end="707:75"><name pos:start="707:65" pos:end="707:75"><name pos:start="707:65" pos:end="707:70">cpu_SR</name><index pos:start="707:71" pos:end="707:75">[<expr pos:start="707:72" pos:end="707:74"><name pos:start="707:72" pos:end="707:74">SAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="709:19" pos:end="717:17">else <block pos:start="709:24" pos:end="717:17">{<block_content pos:start="711:21" pos:end="715:35">

                    <decl_stmt pos:start="711:21" pos:end="711:52"><decl pos:start="711:21" pos:end="711:51"><type pos:start="711:21" pos:end="711:28"><name pos:start="711:21" pos:end="711:28">TCGv_i64</name></type> <name pos:start="711:30" pos:end="711:30">v</name> <init pos:start="711:32" pos:end="711:51">= <expr pos:start="711:34" pos:end="711:51"><call pos:start="711:34" pos:end="711:51"><name pos:start="711:34" pos:end="711:49">tcg_temp_new_i64</name><argument_list pos:start="711:50" pos:end="711:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="713:21" pos:end="713:58"><expr pos:start="713:21" pos:end="713:57"><call pos:start="713:21" pos:end="713:57"><name pos:start="713:21" pos:end="713:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="713:41" pos:end="713:57">(<argument pos:start="713:42" pos:end="713:42"><expr pos:start="713:42" pos:end="713:42"><name pos:start="713:42" pos:end="713:42">v</name></expr></argument>, <argument pos:start="713:45" pos:end="713:56"><expr pos:start="713:45" pos:end="713:56"><name pos:start="713:45" pos:end="713:56"><name pos:start="713:45" pos:end="713:49">cpu_R</name><index pos:start="713:50" pos:end="713:56">[<expr pos:start="713:51" pos:end="713:55"><name pos:start="713:51" pos:end="713:55">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="715:21" pos:end="715:35"><expr pos:start="715:21" pos:end="715:34"><call pos:start="715:21" pos:end="715:34"><name pos:start="715:21" pos:end="715:29">gen_shift</name><argument_list pos:start="715:30" pos:end="715:34">(<argument pos:start="715:31" pos:end="715:33"><expr pos:start="715:31" pos:end="715:33"><name pos:start="715:31" pos:end="715:33">shr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="719:17" pos:end="719:22">break;</break>



            <case pos:start="723:13" pos:end="723:20">case <expr pos:start="723:18" pos:end="723:19"><literal type="number" pos:start="723:18" pos:end="723:19">10</literal></expr>:</case> <comment type="block" pos:start="723:22" pos:end="723:28">/*SLL*/</comment>

                <if_stmt pos:start="725:17" pos:end="745:17"><if pos:start="725:17" pos:end="729:17">if <condition pos:start="725:20" pos:end="725:37">(<expr pos:start="725:21" pos:end="725:36"><name pos:start="725:21" pos:end="725:36"><name pos:start="725:21" pos:end="725:22">dc</name><operator pos:start="725:23" pos:end="725:24">-&gt;</operator><name pos:start="725:25" pos:end="725:36">sar_m32_5bit</name></name></expr>)</condition> <block pos:start="725:39" pos:end="729:17">{<block_content pos:start="727:21" pos:end="727:77">

                    <expr_stmt pos:start="727:21" pos:end="727:77"><expr pos:start="727:21" pos:end="727:76"><call pos:start="727:21" pos:end="727:76"><name pos:start="727:21" pos:end="727:35">tcg_gen_shl_i32</name><argument_list pos:start="727:36" pos:end="727:76">(<argument pos:start="727:37" pos:end="727:48"><expr pos:start="727:37" pos:end="727:48"><name pos:start="727:37" pos:end="727:48"><name pos:start="727:37" pos:end="727:41">cpu_R</name><index pos:start="727:42" pos:end="727:48">[<expr pos:start="727:43" pos:end="727:47"><name pos:start="727:43" pos:end="727:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="727:51" pos:end="727:62"><expr pos:start="727:51" pos:end="727:62"><name pos:start="727:51" pos:end="727:62"><name pos:start="727:51" pos:end="727:55">cpu_R</name><index pos:start="727:56" pos:end="727:62">[<expr pos:start="727:57" pos:end="727:61"><name pos:start="727:57" pos:end="727:61">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="727:65" pos:end="727:75"><expr pos:start="727:65" pos:end="727:75"><name pos:start="727:65" pos:end="727:75"><name pos:start="727:65" pos:end="727:66">dc</name><operator pos:start="727:67" pos:end="727:68">-&gt;</operator><name pos:start="727:69" pos:end="727:75">sar_m32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="729:19" pos:end="745:17">else <block pos:start="729:24" pos:end="745:17">{<block_content pos:start="731:21" pos:end="743:37">

                    <decl_stmt pos:start="731:21" pos:end="731:52"><decl pos:start="731:21" pos:end="731:51"><type pos:start="731:21" pos:end="731:28"><name pos:start="731:21" pos:end="731:28">TCGv_i64</name></type> <name pos:start="731:30" pos:end="731:30">v</name> <init pos:start="731:32" pos:end="731:51">= <expr pos:start="731:34" pos:end="731:51"><call pos:start="731:34" pos:end="731:51"><name pos:start="731:34" pos:end="731:49">tcg_temp_new_i64</name><argument_list pos:start="731:50" pos:end="731:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="733:21" pos:end="733:51"><decl pos:start="733:21" pos:end="733:50"><type pos:start="733:21" pos:end="733:28"><name pos:start="733:21" pos:end="733:28">TCGv_i32</name></type> <name pos:start="733:30" pos:end="733:30">s</name> <init pos:start="733:32" pos:end="733:50">= <expr pos:start="733:34" pos:end="733:50"><call pos:start="733:34" pos:end="733:50"><name pos:start="733:34" pos:end="733:46">tcg_const_i32</name><argument_list pos:start="733:47" pos:end="733:50">(<argument pos:start="733:48" pos:end="733:49"><expr pos:start="733:48" pos:end="733:49"><literal type="number" pos:start="733:48" pos:end="733:49">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="735:21" pos:end="735:55"><expr pos:start="735:21" pos:end="735:54"><call pos:start="735:21" pos:end="735:54"><name pos:start="735:21" pos:end="735:35">tcg_gen_sub_i32</name><argument_list pos:start="735:36" pos:end="735:54">(<argument pos:start="735:37" pos:end="735:37"><expr pos:start="735:37" pos:end="735:37"><name pos:start="735:37" pos:end="735:37">s</name></expr></argument>, <argument pos:start="735:40" pos:end="735:40"><expr pos:start="735:40" pos:end="735:40"><name pos:start="735:40" pos:end="735:40">s</name></expr></argument>, <argument pos:start="735:43" pos:end="735:53"><expr pos:start="735:43" pos:end="735:53"><name pos:start="735:43" pos:end="735:53"><name pos:start="735:43" pos:end="735:48">cpu_SR</name><index pos:start="735:49" pos:end="735:53">[<expr pos:start="735:50" pos:end="735:52"><name pos:start="735:50" pos:end="735:52">SAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="737:21" pos:end="737:49"><expr pos:start="737:21" pos:end="737:48"><call pos:start="737:21" pos:end="737:48"><name pos:start="737:21" pos:end="737:36">tcg_gen_andi_i32</name><argument_list pos:start="737:37" pos:end="737:48">(<argument pos:start="737:38" pos:end="737:38"><expr pos:start="737:38" pos:end="737:38"><name pos:start="737:38" pos:end="737:38">s</name></expr></argument>, <argument pos:start="737:41" pos:end="737:41"><expr pos:start="737:41" pos:end="737:41"><name pos:start="737:41" pos:end="737:41">s</name></expr></argument>, <argument pos:start="737:44" pos:end="737:47"><expr pos:start="737:44" pos:end="737:47"><literal type="number" pos:start="737:44" pos:end="737:47">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="739:21" pos:end="739:58"><expr pos:start="739:21" pos:end="739:57"><call pos:start="739:21" pos:end="739:57"><name pos:start="739:21" pos:end="739:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="739:41" pos:end="739:57">(<argument pos:start="739:42" pos:end="739:42"><expr pos:start="739:42" pos:end="739:42"><name pos:start="739:42" pos:end="739:42">v</name></expr></argument>, <argument pos:start="739:45" pos:end="739:56"><expr pos:start="739:45" pos:end="739:56"><name pos:start="739:45" pos:end="739:56"><name pos:start="739:45" pos:end="739:49">cpu_R</name><index pos:start="739:50" pos:end="739:56">[<expr pos:start="739:51" pos:end="739:55"><name pos:start="739:51" pos:end="739:55">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="741:21" pos:end="741:42"><expr pos:start="741:21" pos:end="741:41"><call pos:start="741:21" pos:end="741:41"><name pos:start="741:21" pos:end="741:33">gen_shift_reg</name><argument_list pos:start="741:34" pos:end="741:41">(<argument pos:start="741:35" pos:end="741:37"><expr pos:start="741:35" pos:end="741:37"><name pos:start="741:35" pos:end="741:37">shl</name></expr></argument>, <argument pos:start="741:40" pos:end="741:40"><expr pos:start="741:40" pos:end="741:40"><name pos:start="741:40" pos:end="741:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="743:21" pos:end="743:37"><expr pos:start="743:21" pos:end="743:36"><call pos:start="743:21" pos:end="743:36"><name pos:start="743:21" pos:end="743:33">tcg_temp_free</name><argument_list pos:start="743:34" pos:end="743:36">(<argument pos:start="743:35" pos:end="743:35"><expr pos:start="743:35" pos:end="743:35"><name pos:start="743:35" pos:end="743:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="747:17" pos:end="747:22">break;</break>



            <case pos:start="751:13" pos:end="751:20">case <expr pos:start="751:18" pos:end="751:19"><literal type="number" pos:start="751:18" pos:end="751:19">11</literal></expr>:</case> <comment type="block" pos:start="751:22" pos:end="751:28">/*SRA*/</comment>

                <if_stmt pos:start="753:17" pos:end="765:17"><if pos:start="753:17" pos:end="757:17">if <condition pos:start="753:20" pos:end="753:33">(<expr pos:start="753:21" pos:end="753:32"><name pos:start="753:21" pos:end="753:32"><name pos:start="753:21" pos:end="753:22">dc</name><operator pos:start="753:23" pos:end="753:24">-&gt;</operator><name pos:start="753:25" pos:end="753:32">sar_5bit</name></name></expr>)</condition> <block pos:start="753:35" pos:end="757:17">{<block_content pos:start="755:21" pos:end="755:77">

                    <expr_stmt pos:start="755:21" pos:end="755:77"><expr pos:start="755:21" pos:end="755:76"><call pos:start="755:21" pos:end="755:76"><name pos:start="755:21" pos:end="755:35">tcg_gen_sar_i32</name><argument_list pos:start="755:36" pos:end="755:76">(<argument pos:start="755:37" pos:end="755:48"><expr pos:start="755:37" pos:end="755:48"><name pos:start="755:37" pos:end="755:48"><name pos:start="755:37" pos:end="755:41">cpu_R</name><index pos:start="755:42" pos:end="755:48">[<expr pos:start="755:43" pos:end="755:47"><name pos:start="755:43" pos:end="755:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="755:51" pos:end="755:62"><expr pos:start="755:51" pos:end="755:62"><name pos:start="755:51" pos:end="755:62"><name pos:start="755:51" pos:end="755:55">cpu_R</name><index pos:start="755:56" pos:end="755:62">[<expr pos:start="755:57" pos:end="755:61"><name pos:start="755:57" pos:end="755:61">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="755:65" pos:end="755:75"><expr pos:start="755:65" pos:end="755:75"><name pos:start="755:65" pos:end="755:75"><name pos:start="755:65" pos:end="755:70">cpu_SR</name><index pos:start="755:71" pos:end="755:75">[<expr pos:start="755:72" pos:end="755:74"><name pos:start="755:72" pos:end="755:74">SAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="757:19" pos:end="765:17">else <block pos:start="757:24" pos:end="765:17">{<block_content pos:start="759:21" pos:end="763:35">

                    <decl_stmt pos:start="759:21" pos:end="759:52"><decl pos:start="759:21" pos:end="759:51"><type pos:start="759:21" pos:end="759:28"><name pos:start="759:21" pos:end="759:28">TCGv_i64</name></type> <name pos:start="759:30" pos:end="759:30">v</name> <init pos:start="759:32" pos:end="759:51">= <expr pos:start="759:34" pos:end="759:51"><call pos:start="759:34" pos:end="759:51"><name pos:start="759:34" pos:end="759:49">tcg_temp_new_i64</name><argument_list pos:start="759:50" pos:end="759:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="761:21" pos:end="761:57"><expr pos:start="761:21" pos:end="761:56"><call pos:start="761:21" pos:end="761:56"><name pos:start="761:21" pos:end="761:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="761:40" pos:end="761:56">(<argument pos:start="761:41" pos:end="761:41"><expr pos:start="761:41" pos:end="761:41"><name pos:start="761:41" pos:end="761:41">v</name></expr></argument>, <argument pos:start="761:44" pos:end="761:55"><expr pos:start="761:44" pos:end="761:55"><name pos:start="761:44" pos:end="761:55"><name pos:start="761:44" pos:end="761:48">cpu_R</name><index pos:start="761:49" pos:end="761:55">[<expr pos:start="761:50" pos:end="761:54"><name pos:start="761:50" pos:end="761:54">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="763:21" pos:end="763:35"><expr pos:start="763:21" pos:end="763:34"><call pos:start="763:21" pos:end="763:34"><name pos:start="763:21" pos:end="763:29">gen_shift</name><argument_list pos:start="763:30" pos:end="763:34">(<argument pos:start="763:31" pos:end="763:33"><expr pos:start="763:31" pos:end="763:33"><name pos:start="763:31" pos:end="763:33">sar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="767:17" pos:end="772:0">break;</break>

<cpp:undef pos:start="769:1" pos:end="769:16">#<cpp:directive pos:start="769:2" pos:end="769:6">undef</cpp:directive> <name pos:start="769:8" pos:end="769:16">gen_shift</name></cpp:undef>

<cpp:undef pos:start="771:1" pos:end="771:20">#<cpp:directive pos:start="771:2" pos:end="771:6">undef</cpp:directive> <name pos:start="771:8" pos:end="771:20">gen_shift_reg</name></cpp:undef>



            <case pos:start="775:13" pos:end="775:20">case <expr pos:start="775:18" pos:end="775:19"><literal type="number" pos:start="775:18" pos:end="775:19">12</literal></expr>:</case> <comment type="block" pos:start="775:22" pos:end="775:31">/*MUL16U*/</comment>

                <expr_stmt pos:start="777:17" pos:end="777:54"><expr pos:start="777:17" pos:end="777:53"><call pos:start="777:17" pos:end="777:53"><name pos:start="777:17" pos:end="777:26">HAS_OPTION</name><argument_list pos:start="777:27" pos:end="777:53">(<argument pos:start="777:28" pos:end="777:52"><expr pos:start="777:28" pos:end="777:52"><name pos:start="777:28" pos:end="777:52">XTENSA_OPTION_16_BIT_IMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="779:17" pos:end="795:17">{<block_content pos:start="781:21" pos:end="793:38">

                    <decl_stmt pos:start="781:21" pos:end="781:53"><decl pos:start="781:21" pos:end="781:52"><type pos:start="781:21" pos:end="781:28"><name pos:start="781:21" pos:end="781:28">TCGv_i32</name></type> <name pos:start="781:30" pos:end="781:31">v1</name> <init pos:start="781:33" pos:end="781:52">= <expr pos:start="781:35" pos:end="781:52"><call pos:start="781:35" pos:end="781:52"><name pos:start="781:35" pos:end="781:50">tcg_temp_new_i32</name><argument_list pos:start="781:51" pos:end="781:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="783:21" pos:end="783:53"><decl pos:start="783:21" pos:end="783:52"><type pos:start="783:21" pos:end="783:28"><name pos:start="783:21" pos:end="783:28">TCGv_i32</name></type> <name pos:start="783:30" pos:end="783:31">v2</name> <init pos:start="783:33" pos:end="783:52">= <expr pos:start="783:35" pos:end="783:52"><call pos:start="783:35" pos:end="783:52"><name pos:start="783:35" pos:end="783:50">tcg_temp_new_i32</name><argument_list pos:start="783:51" pos:end="783:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="785:21" pos:end="785:57"><expr pos:start="785:21" pos:end="785:56"><call pos:start="785:21" pos:end="785:56"><name pos:start="785:21" pos:end="785:38">tcg_gen_ext16u_i32</name><argument_list pos:start="785:39" pos:end="785:56">(<argument pos:start="785:40" pos:end="785:41"><expr pos:start="785:40" pos:end="785:41"><name pos:start="785:40" pos:end="785:41">v1</name></expr></argument>, <argument pos:start="785:44" pos:end="785:55"><expr pos:start="785:44" pos:end="785:55"><name pos:start="785:44" pos:end="785:55"><name pos:start="785:44" pos:end="785:48">cpu_R</name><index pos:start="785:49" pos:end="785:55">[<expr pos:start="785:50" pos:end="785:54"><name pos:start="785:50" pos:end="785:54">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="787:21" pos:end="787:57"><expr pos:start="787:21" pos:end="787:56"><call pos:start="787:21" pos:end="787:56"><name pos:start="787:21" pos:end="787:38">tcg_gen_ext16u_i32</name><argument_list pos:start="787:39" pos:end="787:56">(<argument pos:start="787:40" pos:end="787:41"><expr pos:start="787:40" pos:end="787:41"><name pos:start="787:40" pos:end="787:41">v2</name></expr></argument>, <argument pos:start="787:44" pos:end="787:55"><expr pos:start="787:44" pos:end="787:55"><name pos:start="787:44" pos:end="787:55"><name pos:start="787:44" pos:end="787:48">cpu_R</name><index pos:start="787:49" pos:end="787:55">[<expr pos:start="787:50" pos:end="787:54"><name pos:start="787:50" pos:end="787:54">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="789:21" pos:end="789:58"><expr pos:start="789:21" pos:end="789:57"><call pos:start="789:21" pos:end="789:57"><name pos:start="789:21" pos:end="789:35">tcg_gen_mul_i32</name><argument_list pos:start="789:36" pos:end="789:57">(<argument pos:start="789:37" pos:end="789:48"><expr pos:start="789:37" pos:end="789:48"><name pos:start="789:37" pos:end="789:48"><name pos:start="789:37" pos:end="789:41">cpu_R</name><index pos:start="789:42" pos:end="789:48">[<expr pos:start="789:43" pos:end="789:47"><name pos:start="789:43" pos:end="789:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="789:51" pos:end="789:52"><expr pos:start="789:51" pos:end="789:52"><name pos:start="789:51" pos:end="789:52">v1</name></expr></argument>, <argument pos:start="789:55" pos:end="789:56"><expr pos:start="789:55" pos:end="789:56"><name pos:start="789:55" pos:end="789:56">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="791:21" pos:end="791:38"><expr pos:start="791:21" pos:end="791:37"><call pos:start="791:21" pos:end="791:37"><name pos:start="791:21" pos:end="791:33">tcg_temp_free</name><argument_list pos:start="791:34" pos:end="791:37">(<argument pos:start="791:35" pos:end="791:36"><expr pos:start="791:35" pos:end="791:36"><name pos:start="791:35" pos:end="791:36">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="793:21" pos:end="793:38"><expr pos:start="793:21" pos:end="793:37"><call pos:start="793:21" pos:end="793:37"><name pos:start="793:21" pos:end="793:33">tcg_temp_free</name><argument_list pos:start="793:34" pos:end="793:37">(<argument pos:start="793:35" pos:end="793:36"><expr pos:start="793:35" pos:end="793:36"><name pos:start="793:35" pos:end="793:36">v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="797:17" pos:end="797:22">break;</break>



            <case pos:start="801:13" pos:end="801:20">case <expr pos:start="801:18" pos:end="801:19"><literal type="number" pos:start="801:18" pos:end="801:19">13</literal></expr>:</case> <comment type="block" pos:start="801:22" pos:end="801:31">/*MUL16S*/</comment>

                <expr_stmt pos:start="803:17" pos:end="803:54"><expr pos:start="803:17" pos:end="803:53"><call pos:start="803:17" pos:end="803:53"><name pos:start="803:17" pos:end="803:26">HAS_OPTION</name><argument_list pos:start="803:27" pos:end="803:53">(<argument pos:start="803:28" pos:end="803:52"><expr pos:start="803:28" pos:end="803:52"><name pos:start="803:28" pos:end="803:52">XTENSA_OPTION_16_BIT_IMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="805:17" pos:end="821:17">{<block_content pos:start="807:21" pos:end="819:38">

                    <decl_stmt pos:start="807:21" pos:end="807:53"><decl pos:start="807:21" pos:end="807:52"><type pos:start="807:21" pos:end="807:28"><name pos:start="807:21" pos:end="807:28">TCGv_i32</name></type> <name pos:start="807:30" pos:end="807:31">v1</name> <init pos:start="807:33" pos:end="807:52">= <expr pos:start="807:35" pos:end="807:52"><call pos:start="807:35" pos:end="807:52"><name pos:start="807:35" pos:end="807:50">tcg_temp_new_i32</name><argument_list pos:start="807:51" pos:end="807:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="809:21" pos:end="809:53"><decl pos:start="809:21" pos:end="809:52"><type pos:start="809:21" pos:end="809:28"><name pos:start="809:21" pos:end="809:28">TCGv_i32</name></type> <name pos:start="809:30" pos:end="809:31">v2</name> <init pos:start="809:33" pos:end="809:52">= <expr pos:start="809:35" pos:end="809:52"><call pos:start="809:35" pos:end="809:52"><name pos:start="809:35" pos:end="809:50">tcg_temp_new_i32</name><argument_list pos:start="809:51" pos:end="809:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="811:21" pos:end="811:57"><expr pos:start="811:21" pos:end="811:56"><call pos:start="811:21" pos:end="811:56"><name pos:start="811:21" pos:end="811:38">tcg_gen_ext16s_i32</name><argument_list pos:start="811:39" pos:end="811:56">(<argument pos:start="811:40" pos:end="811:41"><expr pos:start="811:40" pos:end="811:41"><name pos:start="811:40" pos:end="811:41">v1</name></expr></argument>, <argument pos:start="811:44" pos:end="811:55"><expr pos:start="811:44" pos:end="811:55"><name pos:start="811:44" pos:end="811:55"><name pos:start="811:44" pos:end="811:48">cpu_R</name><index pos:start="811:49" pos:end="811:55">[<expr pos:start="811:50" pos:end="811:54"><name pos:start="811:50" pos:end="811:54">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="813:21" pos:end="813:57"><expr pos:start="813:21" pos:end="813:56"><call pos:start="813:21" pos:end="813:56"><name pos:start="813:21" pos:end="813:38">tcg_gen_ext16s_i32</name><argument_list pos:start="813:39" pos:end="813:56">(<argument pos:start="813:40" pos:end="813:41"><expr pos:start="813:40" pos:end="813:41"><name pos:start="813:40" pos:end="813:41">v2</name></expr></argument>, <argument pos:start="813:44" pos:end="813:55"><expr pos:start="813:44" pos:end="813:55"><name pos:start="813:44" pos:end="813:55"><name pos:start="813:44" pos:end="813:48">cpu_R</name><index pos:start="813:49" pos:end="813:55">[<expr pos:start="813:50" pos:end="813:54"><name pos:start="813:50" pos:end="813:54">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="815:21" pos:end="815:58"><expr pos:start="815:21" pos:end="815:57"><call pos:start="815:21" pos:end="815:57"><name pos:start="815:21" pos:end="815:35">tcg_gen_mul_i32</name><argument_list pos:start="815:36" pos:end="815:57">(<argument pos:start="815:37" pos:end="815:48"><expr pos:start="815:37" pos:end="815:48"><name pos:start="815:37" pos:end="815:48"><name pos:start="815:37" pos:end="815:41">cpu_R</name><index pos:start="815:42" pos:end="815:48">[<expr pos:start="815:43" pos:end="815:47"><name pos:start="815:43" pos:end="815:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="815:51" pos:end="815:52"><expr pos:start="815:51" pos:end="815:52"><name pos:start="815:51" pos:end="815:52">v1</name></expr></argument>, <argument pos:start="815:55" pos:end="815:56"><expr pos:start="815:55" pos:end="815:56"><name pos:start="815:55" pos:end="815:56">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="817:21" pos:end="817:38"><expr pos:start="817:21" pos:end="817:37"><call pos:start="817:21" pos:end="817:37"><name pos:start="817:21" pos:end="817:33">tcg_temp_free</name><argument_list pos:start="817:34" pos:end="817:37">(<argument pos:start="817:35" pos:end="817:36"><expr pos:start="817:35" pos:end="817:36"><name pos:start="817:35" pos:end="817:36">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="819:21" pos:end="819:38"><expr pos:start="819:21" pos:end="819:37"><call pos:start="819:21" pos:end="819:37"><name pos:start="819:21" pos:end="819:33">tcg_temp_free</name><argument_list pos:start="819:34" pos:end="819:37">(<argument pos:start="819:35" pos:end="819:36"><expr pos:start="819:35" pos:end="819:36"><name pos:start="819:35" pos:end="819:36">v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="823:17" pos:end="823:22">break;</break>



            <default pos:start="827:13" pos:end="827:20">default:</default> <comment type="block" pos:start="827:22" pos:end="827:33">/*reserved*/</comment>

                <break pos:start="829:17" pos:end="829:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="833:13" pos:end="833:18">break;</break>



        <case pos:start="837:9" pos:end="837:15">case <expr pos:start="837:14" pos:end="837:14"><literal type="number" pos:start="837:14" pos:end="837:14">2</literal></expr>:</case> <comment type="block" pos:start="837:17" pos:end="837:24">/*RST2*/</comment>

            <break pos:start="839:13" pos:end="839:18">break;</break>



        <case pos:start="843:9" pos:end="843:15">case <expr pos:start="843:14" pos:end="843:14"><literal type="number" pos:start="843:14" pos:end="843:14">3</literal></expr>:</case> <comment type="block" pos:start="843:17" pos:end="843:24">/*RST3*/</comment>

            <switch pos:start="845:13" pos:end="1097:13">switch <condition pos:start="845:20" pos:end="845:24">(<expr pos:start="845:21" pos:end="845:23"><name pos:start="845:21" pos:end="845:23">OP2</name></expr>)</condition> <block pos:start="845:26" pos:end="1097:13">{<block_content pos:start="847:13" pos:end="1093:22">

            <case pos:start="847:13" pos:end="847:19">case <expr pos:start="847:18" pos:end="847:18"><literal type="number" pos:start="847:18" pos:end="847:18">0</literal></expr>:</case> <comment type="block" pos:start="847:21" pos:end="847:27">/*RSR*/</comment>

                <expr_stmt pos:start="849:17" pos:end="849:50"><expr pos:start="849:17" pos:end="849:49"><call pos:start="849:17" pos:end="849:49"><name pos:start="849:17" pos:end="849:23">gen_rsr</name><argument_list pos:start="849:24" pos:end="849:49">(<argument pos:start="849:25" pos:end="849:26"><expr pos:start="849:25" pos:end="849:26"><name pos:start="849:25" pos:end="849:26">dc</name></expr></argument>, <argument pos:start="849:29" pos:end="849:40"><expr pos:start="849:29" pos:end="849:40"><name pos:start="849:29" pos:end="849:40"><name pos:start="849:29" pos:end="849:33">cpu_R</name><index pos:start="849:34" pos:end="849:40">[<expr pos:start="849:35" pos:end="849:39"><name pos:start="849:35" pos:end="849:39">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="849:43" pos:end="849:48"><expr pos:start="849:43" pos:end="849:48"><name pos:start="849:43" pos:end="849:48">RSR_SR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="851:17" pos:end="851:22">break;</break>



            <case pos:start="855:13" pos:end="855:19">case <expr pos:start="855:18" pos:end="855:18"><literal type="number" pos:start="855:18" pos:end="855:18">1</literal></expr>:</case> <comment type="block" pos:start="855:21" pos:end="855:27">/*WSR*/</comment>

                <expr_stmt pos:start="857:17" pos:end="857:50"><expr pos:start="857:17" pos:end="857:49"><call pos:start="857:17" pos:end="857:49"><name pos:start="857:17" pos:end="857:23">gen_wsr</name><argument_list pos:start="857:24" pos:end="857:49">(<argument pos:start="857:25" pos:end="857:26"><expr pos:start="857:25" pos:end="857:26"><name pos:start="857:25" pos:end="857:26">dc</name></expr></argument>, <argument pos:start="857:29" pos:end="857:34"><expr pos:start="857:29" pos:end="857:34"><name pos:start="857:29" pos:end="857:34">RSR_SR</name></expr></argument>, <argument pos:start="857:37" pos:end="857:48"><expr pos:start="857:37" pos:end="857:48"><name pos:start="857:37" pos:end="857:48"><name pos:start="857:37" pos:end="857:41">cpu_R</name><index pos:start="857:42" pos:end="857:48">[<expr pos:start="857:43" pos:end="857:47"><name pos:start="857:43" pos:end="857:47">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="859:17" pos:end="859:22">break;</break>



            <case pos:start="863:13" pos:end="863:19">case <expr pos:start="863:18" pos:end="863:18"><literal type="number" pos:start="863:18" pos:end="863:18">2</literal></expr>:</case> <comment type="block" pos:start="863:21" pos:end="863:29">/*SEXTu*/</comment>

                <expr_stmt pos:start="865:17" pos:end="865:50"><expr pos:start="865:17" pos:end="865:49"><call pos:start="865:17" pos:end="865:49"><name pos:start="865:17" pos:end="865:26">HAS_OPTION</name><argument_list pos:start="865:27" pos:end="865:49">(<argument pos:start="865:28" pos:end="865:48"><expr pos:start="865:28" pos:end="865:48"><name pos:start="865:28" pos:end="865:48">XTENSA_OPTION_MISC_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="867:17" pos:end="893:17">{<block_content pos:start="869:21" pos:end="891:21">

                    <decl_stmt pos:start="869:21" pos:end="869:43"><decl pos:start="869:21" pos:end="869:42"><type pos:start="869:21" pos:end="869:23"><name pos:start="869:21" pos:end="869:23">int</name></type> <name pos:start="869:25" pos:end="869:29">shift</name> <init pos:start="869:31" pos:end="869:42">= <expr pos:start="869:33" pos:end="869:42"><literal type="number" pos:start="869:33" pos:end="869:36">24</literal> <operator pos:start="869:36" pos:end="869:36">-</operator> <name pos:start="869:38" pos:end="869:42">RRR_T</name></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="873:21" pos:end="891:21"><if pos:start="873:21" pos:end="877:21">if <condition pos:start="873:24" pos:end="873:36">(<expr pos:start="873:25" pos:end="873:35"><name pos:start="873:25" pos:end="873:29">shift</name> <operator pos:start="873:31" pos:end="873:32">==</operator> <literal type="number" pos:start="873:34" pos:end="873:35">24</literal></expr>)</condition> <block pos:start="873:38" pos:end="877:21">{<block_content pos:start="875:25" pos:end="875:70">

                        <expr_stmt pos:start="875:25" pos:end="875:70"><expr pos:start="875:25" pos:end="875:69"><call pos:start="875:25" pos:end="875:69"><name pos:start="875:25" pos:end="875:41">tcg_gen_ext8s_i32</name><argument_list pos:start="875:42" pos:end="875:69">(<argument pos:start="875:43" pos:end="875:54"><expr pos:start="875:43" pos:end="875:54"><name pos:start="875:43" pos:end="875:54"><name pos:start="875:43" pos:end="875:47">cpu_R</name><index pos:start="875:48" pos:end="875:54">[<expr pos:start="875:49" pos:end="875:53"><name pos:start="875:49" pos:end="875:53">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="875:57" pos:end="875:68"><expr pos:start="875:57" pos:end="875:68"><name pos:start="875:57" pos:end="875:68"><name pos:start="875:57" pos:end="875:61">cpu_R</name><index pos:start="875:62" pos:end="875:68">[<expr pos:start="875:63" pos:end="875:67"><name pos:start="875:63" pos:end="875:67">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="877:23" pos:end="881:21">else if <condition pos:start="877:31" pos:end="877:43">(<expr pos:start="877:32" pos:end="877:42"><name pos:start="877:32" pos:end="877:36">shift</name> <operator pos:start="877:38" pos:end="877:39">==</operator> <literal type="number" pos:start="877:41" pos:end="877:42">16</literal></expr>)</condition> <block pos:start="877:45" pos:end="881:21">{<block_content pos:start="879:25" pos:end="879:71">

                        <expr_stmt pos:start="879:25" pos:end="879:71"><expr pos:start="879:25" pos:end="879:70"><call pos:start="879:25" pos:end="879:70"><name pos:start="879:25" pos:end="879:42">tcg_gen_ext16s_i32</name><argument_list pos:start="879:43" pos:end="879:70">(<argument pos:start="879:44" pos:end="879:55"><expr pos:start="879:44" pos:end="879:55"><name pos:start="879:44" pos:end="879:55"><name pos:start="879:44" pos:end="879:48">cpu_R</name><index pos:start="879:49" pos:end="879:55">[<expr pos:start="879:50" pos:end="879:54"><name pos:start="879:50" pos:end="879:54">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="879:58" pos:end="879:69"><expr pos:start="879:58" pos:end="879:69"><name pos:start="879:58" pos:end="879:69"><name pos:start="879:58" pos:end="879:62">cpu_R</name><index pos:start="879:63" pos:end="879:69">[<expr pos:start="879:64" pos:end="879:68"><name pos:start="879:64" pos:end="879:68">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="881:23" pos:end="891:21">else <block pos:start="881:28" pos:end="891:21">{<block_content pos:start="883:25" pos:end="889:43">

                        <decl_stmt pos:start="883:25" pos:end="883:58"><decl pos:start="883:25" pos:end="883:57"><type pos:start="883:25" pos:end="883:32"><name pos:start="883:25" pos:end="883:32">TCGv_i32</name></type> <name pos:start="883:34" pos:end="883:36">tmp</name> <init pos:start="883:38" pos:end="883:57">= <expr pos:start="883:40" pos:end="883:57"><call pos:start="883:40" pos:end="883:57"><name pos:start="883:40" pos:end="883:55">tcg_temp_new_i32</name><argument_list pos:start="883:56" pos:end="883:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="885:25" pos:end="885:67"><expr pos:start="885:25" pos:end="885:66"><call pos:start="885:25" pos:end="885:66"><name pos:start="885:25" pos:end="885:40">tcg_gen_shli_i32</name><argument_list pos:start="885:41" pos:end="885:66">(<argument pos:start="885:42" pos:end="885:44"><expr pos:start="885:42" pos:end="885:44"><name pos:start="885:42" pos:end="885:44">tmp</name></expr></argument>, <argument pos:start="885:47" pos:end="885:58"><expr pos:start="885:47" pos:end="885:58"><name pos:start="885:47" pos:end="885:58"><name pos:start="885:47" pos:end="885:51">cpu_R</name><index pos:start="885:52" pos:end="885:58">[<expr pos:start="885:53" pos:end="885:57"><name pos:start="885:53" pos:end="885:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="885:61" pos:end="885:65"><expr pos:start="885:61" pos:end="885:65"><name pos:start="885:61" pos:end="885:65">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="887:25" pos:end="887:67"><expr pos:start="887:25" pos:end="887:66"><call pos:start="887:25" pos:end="887:66"><name pos:start="887:25" pos:end="887:40">tcg_gen_sari_i32</name><argument_list pos:start="887:41" pos:end="887:66">(<argument pos:start="887:42" pos:end="887:53"><expr pos:start="887:42" pos:end="887:53"><name pos:start="887:42" pos:end="887:53"><name pos:start="887:42" pos:end="887:46">cpu_R</name><index pos:start="887:47" pos:end="887:53">[<expr pos:start="887:48" pos:end="887:52"><name pos:start="887:48" pos:end="887:52">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="887:56" pos:end="887:58"><expr pos:start="887:56" pos:end="887:58"><name pos:start="887:56" pos:end="887:58">tmp</name></expr></argument>, <argument pos:start="887:61" pos:end="887:65"><expr pos:start="887:61" pos:end="887:65"><name pos:start="887:61" pos:end="887:65">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="889:25" pos:end="889:43"><expr pos:start="889:25" pos:end="889:42"><call pos:start="889:25" pos:end="889:42"><name pos:start="889:25" pos:end="889:37">tcg_temp_free</name><argument_list pos:start="889:38" pos:end="889:42">(<argument pos:start="889:39" pos:end="889:41"><expr pos:start="889:39" pos:end="889:41"><name pos:start="889:39" pos:end="889:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="895:17" pos:end="895:22">break;</break>



            <case pos:start="899:13" pos:end="899:19">case <expr pos:start="899:18" pos:end="899:18"><literal type="number" pos:start="899:18" pos:end="899:18">3</literal></expr>:</case> <comment type="block" pos:start="899:21" pos:end="899:31">/*CLAMPSu*/</comment>

                <expr_stmt pos:start="901:17" pos:end="901:50"><expr pos:start="901:17" pos:end="901:49"><call pos:start="901:17" pos:end="901:49"><name pos:start="901:17" pos:end="901:26">HAS_OPTION</name><argument_list pos:start="901:27" pos:end="901:49">(<argument pos:start="901:28" pos:end="901:48"><expr pos:start="901:28" pos:end="901:48"><name pos:start="901:28" pos:end="901:48">XTENSA_OPTION_MISC_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="903:17" pos:end="941:17">{<block_content pos:start="905:21" pos:end="939:40">

                    <decl_stmt pos:start="905:21" pos:end="905:55"><decl pos:start="905:21" pos:end="905:54"><type pos:start="905:21" pos:end="905:28"><name pos:start="905:21" pos:end="905:28">TCGv_i32</name></type> <name pos:start="905:30" pos:end="905:33">tmp1</name> <init pos:start="905:35" pos:end="905:54">= <expr pos:start="905:37" pos:end="905:54"><call pos:start="905:37" pos:end="905:54"><name pos:start="905:37" pos:end="905:52">tcg_temp_new_i32</name><argument_list pos:start="905:53" pos:end="905:54">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="907:21" pos:end="907:55"><decl pos:start="907:21" pos:end="907:54"><type pos:start="907:21" pos:end="907:28"><name pos:start="907:21" pos:end="907:28">TCGv_i32</name></type> <name pos:start="907:30" pos:end="907:33">tmp2</name> <init pos:start="907:35" pos:end="907:54">= <expr pos:start="907:37" pos:end="907:54"><call pos:start="907:37" pos:end="907:54"><name pos:start="907:37" pos:end="907:52">tcg_temp_new_i32</name><argument_list pos:start="907:53" pos:end="907:54">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="909:21" pos:end="909:48"><decl pos:start="909:21" pos:end="909:47"><type pos:start="909:21" pos:end="909:23"><name pos:start="909:21" pos:end="909:23">int</name></type> <name pos:start="909:25" pos:end="909:29">label</name> <init pos:start="909:31" pos:end="909:47">= <expr pos:start="909:33" pos:end="909:47"><call pos:start="909:33" pos:end="909:47"><name pos:start="909:33" pos:end="909:45">gen_new_label</name><argument_list pos:start="909:46" pos:end="909:47">()</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="913:21" pos:end="913:69"><expr pos:start="913:21" pos:end="913:68"><call pos:start="913:21" pos:end="913:68"><name pos:start="913:21" pos:end="913:36">tcg_gen_sari_i32</name><argument_list pos:start="913:37" pos:end="913:68">(<argument pos:start="913:38" pos:end="913:41"><expr pos:start="913:38" pos:end="913:41"><name pos:start="913:38" pos:end="913:41">tmp1</name></expr></argument>, <argument pos:start="913:44" pos:end="913:55"><expr pos:start="913:44" pos:end="913:55"><name pos:start="913:44" pos:end="913:55"><name pos:start="913:44" pos:end="913:48">cpu_R</name><index pos:start="913:49" pos:end="913:55">[<expr pos:start="913:50" pos:end="913:54"><name pos:start="913:50" pos:end="913:54">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="913:58" pos:end="913:67"><expr pos:start="913:58" pos:end="913:67"><literal type="number" pos:start="913:58" pos:end="913:61">24</literal> <operator pos:start="913:61" pos:end="913:61">-</operator> <name pos:start="913:63" pos:end="913:67">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="915:21" pos:end="915:62"><expr pos:start="915:21" pos:end="915:61"><call pos:start="915:21" pos:end="915:61"><name pos:start="915:21" pos:end="915:35">tcg_gen_xor_i32</name><argument_list pos:start="915:36" pos:end="915:61">(<argument pos:start="915:37" pos:end="915:40"><expr pos:start="915:37" pos:end="915:40"><name pos:start="915:37" pos:end="915:40">tmp2</name></expr></argument>, <argument pos:start="915:43" pos:end="915:46"><expr pos:start="915:43" pos:end="915:46"><name pos:start="915:43" pos:end="915:46">tmp1</name></expr></argument>, <argument pos:start="915:49" pos:end="915:60"><expr pos:start="915:49" pos:end="915:60"><name pos:start="915:49" pos:end="915:60"><name pos:start="915:49" pos:end="915:53">cpu_R</name><index pos:start="915:54" pos:end="915:60">[<expr pos:start="915:55" pos:end="915:59"><name pos:start="915:55" pos:end="915:59">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="917:21" pos:end="917:76"><expr pos:start="917:21" pos:end="917:75"><call pos:start="917:21" pos:end="917:75"><name pos:start="917:21" pos:end="917:36">tcg_gen_andi_i32</name><argument_list pos:start="917:37" pos:end="917:75">(<argument pos:start="917:38" pos:end="917:41"><expr pos:start="917:38" pos:end="917:41"><name pos:start="917:38" pos:end="917:41">tmp2</name></expr></argument>, <argument pos:start="917:44" pos:end="917:47"><expr pos:start="917:44" pos:end="917:47"><name pos:start="917:44" pos:end="917:47">tmp2</name></expr></argument>, <argument pos:start="917:50" pos:end="917:74"><expr pos:start="917:50" pos:end="917:74"><literal type="number" pos:start="917:50" pos:end="917:59">0xffffffff</literal> <operator pos:start="917:61" pos:end="917:62">&lt;&lt;</operator> <operator pos:start="917:64" pos:end="917:64">(</operator><name pos:start="917:65" pos:end="917:69">RRR_T</name> <operator pos:start="917:71" pos:end="917:71">+</operator> <literal type="number" pos:start="917:73" pos:end="917:73">7</literal><operator pos:start="917:74" pos:end="917:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="919:21" pos:end="919:64"><expr pos:start="919:21" pos:end="919:63"><call pos:start="919:21" pos:end="919:63"><name pos:start="919:21" pos:end="919:35">tcg_gen_mov_i32</name><argument_list pos:start="919:36" pos:end="919:63">(<argument pos:start="919:37" pos:end="919:48"><expr pos:start="919:37" pos:end="919:48"><name pos:start="919:37" pos:end="919:48"><name pos:start="919:37" pos:end="919:41">cpu_R</name><index pos:start="919:42" pos:end="919:48">[<expr pos:start="919:43" pos:end="919:47"><name pos:start="919:43" pos:end="919:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="919:51" pos:end="919:62"><expr pos:start="919:51" pos:end="919:62"><name pos:start="919:51" pos:end="919:62"><name pos:start="919:51" pos:end="919:55">cpu_R</name><index pos:start="919:56" pos:end="919:62">[<expr pos:start="919:57" pos:end="919:61"><name pos:start="919:57" pos:end="919:61">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="921:21" pos:end="921:69"><expr pos:start="921:21" pos:end="921:68"><call pos:start="921:21" pos:end="921:68"><name pos:start="921:21" pos:end="921:39">tcg_gen_brcondi_i32</name><argument_list pos:start="921:40" pos:end="921:68">(<argument pos:start="921:41" pos:end="921:51"><expr pos:start="921:41" pos:end="921:51"><name pos:start="921:41" pos:end="921:51">TCG_COND_EQ</name></expr></argument>, <argument pos:start="921:54" pos:end="921:57"><expr pos:start="921:54" pos:end="921:57"><name pos:start="921:54" pos:end="921:57">tmp2</name></expr></argument>, <argument pos:start="921:60" pos:end="921:60"><expr pos:start="921:60" pos:end="921:60"><literal type="number" pos:start="921:60" pos:end="921:60">0</literal></expr></argument>, <argument pos:start="921:63" pos:end="921:67"><expr pos:start="921:63" pos:end="921:67"><name pos:start="921:63" pos:end="921:67">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="925:21" pos:end="925:61"><expr pos:start="925:21" pos:end="925:60"><call pos:start="925:21" pos:end="925:60"><name pos:start="925:21" pos:end="925:36">tcg_gen_sari_i32</name><argument_list pos:start="925:37" pos:end="925:60">(<argument pos:start="925:38" pos:end="925:41"><expr pos:start="925:38" pos:end="925:41"><name pos:start="925:38" pos:end="925:41">tmp1</name></expr></argument>, <argument pos:start="925:44" pos:end="925:55"><expr pos:start="925:44" pos:end="925:55"><name pos:start="925:44" pos:end="925:55"><name pos:start="925:44" pos:end="925:48">cpu_R</name><index pos:start="925:49" pos:end="925:55">[<expr pos:start="925:50" pos:end="925:54"><name pos:start="925:50" pos:end="925:54">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="925:58" pos:end="925:59"><expr pos:start="925:58" pos:end="925:59"><literal type="number" pos:start="925:58" pos:end="925:59">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="927:21" pos:end="929:56"><expr pos:start="927:21" pos:end="929:55"><call pos:start="927:21" pos:end="929:55"><name pos:start="927:21" pos:end="927:36">tcg_gen_xori_i32</name><argument_list pos:start="927:37" pos:end="929:55">(<argument pos:start="927:38" pos:end="927:49"><expr pos:start="927:38" pos:end="927:49"><name pos:start="927:38" pos:end="927:49"><name pos:start="927:38" pos:end="927:42">cpu_R</name><index pos:start="927:43" pos:end="927:49">[<expr pos:start="927:44" pos:end="927:48"><name pos:start="927:44" pos:end="927:48">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="927:52" pos:end="927:55"><expr pos:start="927:52" pos:end="927:55"><name pos:start="927:52" pos:end="927:55">tmp1</name></expr></argument>,

                            <argument pos:start="929:29" pos:end="929:54"><expr pos:start="929:29" pos:end="929:54"><literal type="number" pos:start="929:29" pos:end="929:38">0xffffffff</literal> <operator pos:start="929:40" pos:end="929:41">&gt;&gt;</operator> <operator pos:start="929:43" pos:end="929:43">(</operator><literal type="number" pos:start="929:44" pos:end="929:47">25</literal> <operator pos:start="929:47" pos:end="929:47">-</operator> <name pos:start="929:49" pos:end="929:53">RRR_T</name><operator pos:start="929:54" pos:end="929:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="933:21" pos:end="933:41"><expr pos:start="933:21" pos:end="933:40"><call pos:start="933:21" pos:end="933:40"><name pos:start="933:21" pos:end="933:33">gen_set_label</name><argument_list pos:start="933:34" pos:end="933:40">(<argument pos:start="933:35" pos:end="933:39"><expr pos:start="933:35" pos:end="933:39"><name pos:start="933:35" pos:end="933:39">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="937:21" pos:end="937:40"><expr pos:start="937:21" pos:end="937:39"><call pos:start="937:21" pos:end="937:39"><name pos:start="937:21" pos:end="937:33">tcg_temp_free</name><argument_list pos:start="937:34" pos:end="937:39">(<argument pos:start="937:35" pos:end="937:38"><expr pos:start="937:35" pos:end="937:38"><name pos:start="937:35" pos:end="937:38">tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="939:21" pos:end="939:40"><expr pos:start="939:21" pos:end="939:39"><call pos:start="939:21" pos:end="939:39"><name pos:start="939:21" pos:end="939:33">tcg_temp_free</name><argument_list pos:start="939:34" pos:end="939:39">(<argument pos:start="939:35" pos:end="939:38"><expr pos:start="939:35" pos:end="939:38"><name pos:start="939:35" pos:end="939:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="943:17" pos:end="943:22">break;</break>



            <case pos:start="947:13" pos:end="947:19">case <expr pos:start="947:18" pos:end="947:18"><literal type="number" pos:start="947:18" pos:end="947:18">4</literal></expr>:</case> <comment type="block" pos:start="947:21" pos:end="947:28">/*MINu*/</comment>

            <case pos:start="949:13" pos:end="949:19">case <expr pos:start="949:18" pos:end="949:18"><literal type="number" pos:start="949:18" pos:end="949:18">5</literal></expr>:</case> <comment type="block" pos:start="949:21" pos:end="949:28">/*MAXu*/</comment>

            <case pos:start="951:13" pos:end="951:19">case <expr pos:start="951:18" pos:end="951:18"><literal type="number" pos:start="951:18" pos:end="951:18">6</literal></expr>:</case> <comment type="block" pos:start="951:21" pos:end="951:29">/*MINUu*/</comment>

            <case pos:start="953:13" pos:end="953:19">case <expr pos:start="953:18" pos:end="953:18"><literal type="number" pos:start="953:18" pos:end="953:18">7</literal></expr>:</case> <comment type="block" pos:start="953:21" pos:end="953:29">/*MAXUu*/</comment>

                <expr_stmt pos:start="955:17" pos:end="955:50"><expr pos:start="955:17" pos:end="955:49"><call pos:start="955:17" pos:end="955:49"><name pos:start="955:17" pos:end="955:26">HAS_OPTION</name><argument_list pos:start="955:27" pos:end="955:49">(<argument pos:start="955:28" pos:end="955:48"><expr pos:start="955:28" pos:end="955:48"><name pos:start="955:28" pos:end="955:48">XTENSA_OPTION_MISC_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="957:17" pos:end="997:17">{<block_content pos:start="959:21" pos:end="995:41">

                    <decl_stmt pos:start="959:21" pos:end="969:22"><decl pos:start="959:21" pos:end="969:21"><type pos:start="959:21" pos:end="959:40"><specifier pos:start="959:21" pos:end="959:26">static</specifier> <specifier pos:start="959:28" pos:end="959:32">const</specifier> <name pos:start="959:34" pos:end="959:40">TCGCond</name></type> <name pos:start="959:42" pos:end="959:47"><name pos:start="959:42" pos:end="959:45">cond</name><index pos:start="959:46" pos:end="959:47">[]</index></name> <init pos:start="959:49" pos:end="969:21">= <expr pos:start="959:51" pos:end="969:21"><block pos:start="959:51" pos:end="969:21">{

                        <expr pos:start="961:25" pos:end="961:35"><name pos:start="961:25" pos:end="961:35">TCG_COND_LE</name></expr>,

                        <expr pos:start="963:25" pos:end="963:35"><name pos:start="963:25" pos:end="963:35">TCG_COND_GE</name></expr>,

                        <expr pos:start="965:25" pos:end="965:36"><name pos:start="965:25" pos:end="965:36">TCG_COND_LEU</name></expr>,

                        <expr pos:start="967:25" pos:end="967:36"><name pos:start="967:25" pos:end="967:36">TCG_COND_GEU</name></expr>

                    }</block></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="971:21" pos:end="971:48"><decl pos:start="971:21" pos:end="971:47"><type pos:start="971:21" pos:end="971:23"><name pos:start="971:21" pos:end="971:23">int</name></type> <name pos:start="971:25" pos:end="971:29">label</name> <init pos:start="971:31" pos:end="971:47">= <expr pos:start="971:33" pos:end="971:47"><call pos:start="971:33" pos:end="971:47"><name pos:start="971:33" pos:end="971:45">gen_new_label</name><argument_list pos:start="971:46" pos:end="971:47">()</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="975:21" pos:end="993:21"><if pos:start="975:21" pos:end="985:21">if <condition pos:start="975:24" pos:end="975:39">(<expr pos:start="975:25" pos:end="975:38"><name pos:start="975:25" pos:end="975:29">RRR_R</name> <operator pos:start="975:31" pos:end="975:32">!=</operator> <name pos:start="975:34" pos:end="975:38">RRR_T</name></expr>)</condition> <block pos:start="975:41" pos:end="985:21">{<block_content pos:start="977:25" pos:end="983:68">

                        <expr_stmt pos:start="977:25" pos:end="977:68"><expr pos:start="977:25" pos:end="977:67"><call pos:start="977:25" pos:end="977:67"><name pos:start="977:25" pos:end="977:39">tcg_gen_mov_i32</name><argument_list pos:start="977:40" pos:end="977:67">(<argument pos:start="977:41" pos:end="977:52"><expr pos:start="977:41" pos:end="977:52"><name pos:start="977:41" pos:end="977:52"><name pos:start="977:41" pos:end="977:45">cpu_R</name><index pos:start="977:46" pos:end="977:52">[<expr pos:start="977:47" pos:end="977:51"><name pos:start="977:47" pos:end="977:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="977:55" pos:end="977:66"><expr pos:start="977:55" pos:end="977:66"><name pos:start="977:55" pos:end="977:66"><name pos:start="977:55" pos:end="977:59">cpu_R</name><index pos:start="977:60" pos:end="977:66">[<expr pos:start="977:61" pos:end="977:65"><name pos:start="977:61" pos:end="977:65">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="979:25" pos:end="981:67"><expr pos:start="979:25" pos:end="981:66"><call pos:start="979:25" pos:end="981:66"><name pos:start="979:25" pos:end="979:42">tcg_gen_brcond_i32</name><argument_list pos:start="979:43" pos:end="981:66">(<argument pos:start="979:44" pos:end="979:56"><expr pos:start="979:44" pos:end="979:56"><name pos:start="979:44" pos:end="979:56"><name pos:start="979:44" pos:end="979:47">cond</name><index pos:start="979:48" pos:end="979:56">[<expr pos:start="979:49" pos:end="979:55"><name pos:start="979:49" pos:end="979:51">OP2</name> <operator pos:start="979:53" pos:end="979:53">-</operator> <literal type="number" pos:start="979:55" pos:end="979:55">4</literal></expr>]</index></name></expr></argument>,

                                <argument pos:start="981:33" pos:end="981:44"><expr pos:start="981:33" pos:end="981:44"><name pos:start="981:33" pos:end="981:44"><name pos:start="981:33" pos:end="981:37">cpu_R</name><index pos:start="981:38" pos:end="981:44">[<expr pos:start="981:39" pos:end="981:43"><name pos:start="981:39" pos:end="981:43">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="981:47" pos:end="981:58"><expr pos:start="981:47" pos:end="981:58"><name pos:start="981:47" pos:end="981:58"><name pos:start="981:47" pos:end="981:51">cpu_R</name><index pos:start="981:52" pos:end="981:58">[<expr pos:start="981:53" pos:end="981:57"><name pos:start="981:53" pos:end="981:57">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="981:61" pos:end="981:65"><expr pos:start="981:61" pos:end="981:65"><name pos:start="981:61" pos:end="981:65">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="983:25" pos:end="983:68"><expr pos:start="983:25" pos:end="983:67"><call pos:start="983:25" pos:end="983:67"><name pos:start="983:25" pos:end="983:39">tcg_gen_mov_i32</name><argument_list pos:start="983:40" pos:end="983:67">(<argument pos:start="983:41" pos:end="983:52"><expr pos:start="983:41" pos:end="983:52"><name pos:start="983:41" pos:end="983:52"><name pos:start="983:41" pos:end="983:45">cpu_R</name><index pos:start="983:46" pos:end="983:52">[<expr pos:start="983:47" pos:end="983:51"><name pos:start="983:47" pos:end="983:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="983:55" pos:end="983:66"><expr pos:start="983:55" pos:end="983:66"><name pos:start="983:55" pos:end="983:66"><name pos:start="983:55" pos:end="983:59">cpu_R</name><index pos:start="983:60" pos:end="983:66">[<expr pos:start="983:61" pos:end="983:65"><name pos:start="983:61" pos:end="983:65">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="985:23" pos:end="993:21">else <block pos:start="985:28" pos:end="993:21">{<block_content pos:start="987:25" pos:end="991:68">

                        <expr_stmt pos:start="987:25" pos:end="989:67"><expr pos:start="987:25" pos:end="989:66"><call pos:start="987:25" pos:end="989:66"><name pos:start="987:25" pos:end="987:42">tcg_gen_brcond_i32</name><argument_list pos:start="987:43" pos:end="989:66">(<argument pos:start="987:44" pos:end="987:56"><expr pos:start="987:44" pos:end="987:56"><name pos:start="987:44" pos:end="987:56"><name pos:start="987:44" pos:end="987:47">cond</name><index pos:start="987:48" pos:end="987:56">[<expr pos:start="987:49" pos:end="987:55"><name pos:start="987:49" pos:end="987:51">OP2</name> <operator pos:start="987:53" pos:end="987:53">-</operator> <literal type="number" pos:start="987:55" pos:end="987:55">4</literal></expr>]</index></name></expr></argument>,

                                <argument pos:start="989:33" pos:end="989:44"><expr pos:start="989:33" pos:end="989:44"><name pos:start="989:33" pos:end="989:44"><name pos:start="989:33" pos:end="989:37">cpu_R</name><index pos:start="989:38" pos:end="989:44">[<expr pos:start="989:39" pos:end="989:43"><name pos:start="989:39" pos:end="989:43">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="989:47" pos:end="989:58"><expr pos:start="989:47" pos:end="989:58"><name pos:start="989:47" pos:end="989:58"><name pos:start="989:47" pos:end="989:51">cpu_R</name><index pos:start="989:52" pos:end="989:58">[<expr pos:start="989:53" pos:end="989:57"><name pos:start="989:53" pos:end="989:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="989:61" pos:end="989:65"><expr pos:start="989:61" pos:end="989:65"><name pos:start="989:61" pos:end="989:65">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="991:25" pos:end="991:68"><expr pos:start="991:25" pos:end="991:67"><call pos:start="991:25" pos:end="991:67"><name pos:start="991:25" pos:end="991:39">tcg_gen_mov_i32</name><argument_list pos:start="991:40" pos:end="991:67">(<argument pos:start="991:41" pos:end="991:52"><expr pos:start="991:41" pos:end="991:52"><name pos:start="991:41" pos:end="991:52"><name pos:start="991:41" pos:end="991:45">cpu_R</name><index pos:start="991:46" pos:end="991:52">[<expr pos:start="991:47" pos:end="991:51"><name pos:start="991:47" pos:end="991:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="991:55" pos:end="991:66"><expr pos:start="991:55" pos:end="991:66"><name pos:start="991:55" pos:end="991:66"><name pos:start="991:55" pos:end="991:59">cpu_R</name><index pos:start="991:60" pos:end="991:66">[<expr pos:start="991:61" pos:end="991:65"><name pos:start="991:61" pos:end="991:65">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="995:21" pos:end="995:41"><expr pos:start="995:21" pos:end="995:40"><call pos:start="995:21" pos:end="995:40"><name pos:start="995:21" pos:end="995:33">gen_set_label</name><argument_list pos:start="995:34" pos:end="995:40">(<argument pos:start="995:35" pos:end="995:39"><expr pos:start="995:35" pos:end="995:39"><name pos:start="995:35" pos:end="995:39">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="999:17" pos:end="999:22">break;</break>



            <case pos:start="1003:13" pos:end="1003:19">case <expr pos:start="1003:18" pos:end="1003:18"><literal type="number" pos:start="1003:18" pos:end="1003:18">8</literal></expr>:</case> <comment type="block" pos:start="1003:21" pos:end="1003:30">/*MOVEQZ*/</comment>

            <case pos:start="1005:13" pos:end="1005:19">case <expr pos:start="1005:18" pos:end="1005:18"><literal type="number" pos:start="1005:18" pos:end="1005:18">9</literal></expr>:</case> <comment type="block" pos:start="1005:21" pos:end="1005:30">/*MOVNEZ*/</comment>

            <case pos:start="1007:13" pos:end="1007:20">case <expr pos:start="1007:18" pos:end="1007:19"><literal type="number" pos:start="1007:18" pos:end="1007:19">10</literal></expr>:</case> <comment type="block" pos:start="1007:22" pos:end="1007:31">/*MOVLTZ*/</comment>

            <case pos:start="1009:13" pos:end="1009:20">case <expr pos:start="1009:18" pos:end="1009:19"><literal type="number" pos:start="1009:18" pos:end="1009:19">11</literal></expr>:</case> <comment type="block" pos:start="1009:22" pos:end="1009:31">/*MOVGEZ*/</comment>

                <block pos:start="1011:17" pos:end="1033:17">{<block_content pos:start="1013:21" pos:end="1031:41">

                    <decl_stmt pos:start="1013:21" pos:end="1023:22"><decl pos:start="1013:21" pos:end="1023:21"><type pos:start="1013:21" pos:end="1013:40"><specifier pos:start="1013:21" pos:end="1013:26">static</specifier> <specifier pos:start="1013:28" pos:end="1013:32">const</specifier> <name pos:start="1013:34" pos:end="1013:40">TCGCond</name></type> <name pos:start="1013:42" pos:end="1013:47"><name pos:start="1013:42" pos:end="1013:45">cond</name><index pos:start="1013:46" pos:end="1013:47">[]</index></name> <init pos:start="1013:49" pos:end="1023:21">= <expr pos:start="1013:51" pos:end="1023:21"><block pos:start="1013:51" pos:end="1023:21">{

                        <expr pos:start="1015:25" pos:end="1015:35"><name pos:start="1015:25" pos:end="1015:35">TCG_COND_NE</name></expr>,

                        <expr pos:start="1017:25" pos:end="1017:35"><name pos:start="1017:25" pos:end="1017:35">TCG_COND_EQ</name></expr>,

                        <expr pos:start="1019:25" pos:end="1019:35"><name pos:start="1019:25" pos:end="1019:35">TCG_COND_GE</name></expr>,

                        <expr pos:start="1021:25" pos:end="1021:35"><name pos:start="1021:25" pos:end="1021:35">TCG_COND_LT</name></expr>

                    }</block></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1025:21" pos:end="1025:48"><decl pos:start="1025:21" pos:end="1025:47"><type pos:start="1025:21" pos:end="1025:23"><name pos:start="1025:21" pos:end="1025:23">int</name></type> <name pos:start="1025:25" pos:end="1025:29">label</name> <init pos:start="1025:31" pos:end="1025:47">= <expr pos:start="1025:33" pos:end="1025:47"><call pos:start="1025:33" pos:end="1025:47"><name pos:start="1025:33" pos:end="1025:45">gen_new_label</name><argument_list pos:start="1025:46" pos:end="1025:47">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1027:21" pos:end="1027:79"><expr pos:start="1027:21" pos:end="1027:78"><call pos:start="1027:21" pos:end="1027:78"><name pos:start="1027:21" pos:end="1027:39">tcg_gen_brcondi_i32</name><argument_list pos:start="1027:40" pos:end="1027:78">(<argument pos:start="1027:41" pos:end="1027:53"><expr pos:start="1027:41" pos:end="1027:53"><name pos:start="1027:41" pos:end="1027:53"><name pos:start="1027:41" pos:end="1027:44">cond</name><index pos:start="1027:45" pos:end="1027:53">[<expr pos:start="1027:46" pos:end="1027:52"><name pos:start="1027:46" pos:end="1027:48">OP2</name> <operator pos:start="1027:50" pos:end="1027:50">-</operator> <literal type="number" pos:start="1027:52" pos:end="1027:52">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="1027:56" pos:end="1027:67"><expr pos:start="1027:56" pos:end="1027:67"><name pos:start="1027:56" pos:end="1027:67"><name pos:start="1027:56" pos:end="1027:60">cpu_R</name><index pos:start="1027:61" pos:end="1027:67">[<expr pos:start="1027:62" pos:end="1027:66"><name pos:start="1027:62" pos:end="1027:66">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1027:70" pos:end="1027:70"><expr pos:start="1027:70" pos:end="1027:70"><literal type="number" pos:start="1027:70" pos:end="1027:70">0</literal></expr></argument>, <argument pos:start="1027:73" pos:end="1027:77"><expr pos:start="1027:73" pos:end="1027:77"><name pos:start="1027:73" pos:end="1027:77">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1029:21" pos:end="1029:64"><expr pos:start="1029:21" pos:end="1029:63"><call pos:start="1029:21" pos:end="1029:63"><name pos:start="1029:21" pos:end="1029:35">tcg_gen_mov_i32</name><argument_list pos:start="1029:36" pos:end="1029:63">(<argument pos:start="1029:37" pos:end="1029:48"><expr pos:start="1029:37" pos:end="1029:48"><name pos:start="1029:37" pos:end="1029:48"><name pos:start="1029:37" pos:end="1029:41">cpu_R</name><index pos:start="1029:42" pos:end="1029:48">[<expr pos:start="1029:43" pos:end="1029:47"><name pos:start="1029:43" pos:end="1029:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1029:51" pos:end="1029:62"><expr pos:start="1029:51" pos:end="1029:62"><name pos:start="1029:51" pos:end="1029:62"><name pos:start="1029:51" pos:end="1029:55">cpu_R</name><index pos:start="1029:56" pos:end="1029:62">[<expr pos:start="1029:57" pos:end="1029:61"><name pos:start="1029:57" pos:end="1029:61">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1031:21" pos:end="1031:41"><expr pos:start="1031:21" pos:end="1031:40"><call pos:start="1031:21" pos:end="1031:40"><name pos:start="1031:21" pos:end="1031:33">gen_set_label</name><argument_list pos:start="1031:34" pos:end="1031:40">(<argument pos:start="1031:35" pos:end="1031:39"><expr pos:start="1031:35" pos:end="1031:39"><name pos:start="1031:35" pos:end="1031:39">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1035:17" pos:end="1035:22">break;</break>



            <case pos:start="1039:13" pos:end="1039:20">case <expr pos:start="1039:18" pos:end="1039:19"><literal type="number" pos:start="1039:18" pos:end="1039:19">12</literal></expr>:</case> <comment type="block" pos:start="1039:22" pos:end="1039:30">/*MOVFp*/</comment>

                <expr_stmt pos:start="1041:17" pos:end="1041:50"><expr pos:start="1041:17" pos:end="1041:49"><call pos:start="1041:17" pos:end="1041:49"><name pos:start="1041:17" pos:end="1041:26">HAS_OPTION</name><argument_list pos:start="1041:27" pos:end="1041:49">(<argument pos:start="1041:28" pos:end="1041:48"><expr pos:start="1041:28" pos:end="1041:48"><name pos:start="1041:28" pos:end="1041:48">XTENSA_OPTION_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1043:17" pos:end="1043:22">break;</break>



            <case pos:start="1047:13" pos:end="1047:20">case <expr pos:start="1047:18" pos:end="1047:19"><literal type="number" pos:start="1047:18" pos:end="1047:19">13</literal></expr>:</case> <comment type="block" pos:start="1047:22" pos:end="1047:30">/*MOVTp*/</comment>

                <expr_stmt pos:start="1049:17" pos:end="1049:50"><expr pos:start="1049:17" pos:end="1049:49"><call pos:start="1049:17" pos:end="1049:49"><name pos:start="1049:17" pos:end="1049:26">HAS_OPTION</name><argument_list pos:start="1049:27" pos:end="1049:49">(<argument pos:start="1049:28" pos:end="1049:48"><expr pos:start="1049:28" pos:end="1049:48"><name pos:start="1049:28" pos:end="1049:48">XTENSA_OPTION_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1051:17" pos:end="1051:22">break;</break>



            <case pos:start="1055:13" pos:end="1055:20">case <expr pos:start="1055:18" pos:end="1055:19"><literal type="number" pos:start="1055:18" pos:end="1055:19">14</literal></expr>:</case> <comment type="block" pos:start="1055:22" pos:end="1055:28">/*RUR*/</comment>

                <block pos:start="1057:17" pos:end="1071:17">{<block_content pos:start="1059:21" pos:end="1069:21">

                    <decl_stmt pos:start="1059:21" pos:end="1059:50"><decl pos:start="1059:21" pos:end="1059:49"><type pos:start="1059:21" pos:end="1059:23"><name pos:start="1059:21" pos:end="1059:23">int</name></type> <name pos:start="1059:25" pos:end="1059:26">st</name> <init pos:start="1059:28" pos:end="1059:49">= <expr pos:start="1059:30" pos:end="1059:49"><operator pos:start="1059:30" pos:end="1059:30">(</operator><name pos:start="1059:31" pos:end="1059:35">RRR_S</name> <operator pos:start="1059:37" pos:end="1059:38">&lt;&lt;</operator> <literal type="number" pos:start="1059:40" pos:end="1059:40">4</literal><operator pos:start="1059:41" pos:end="1059:41">)</operator> <operator pos:start="1059:43" pos:end="1059:43">+</operator> <name pos:start="1059:45" pos:end="1059:49">RRR_T</name></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="1061:21" pos:end="1069:21"><if pos:start="1061:21" pos:end="1065:21">if <condition pos:start="1061:24" pos:end="1061:38">(<expr pos:start="1061:25" pos:end="1061:37"><name pos:start="1061:25" pos:end="1061:37"><name pos:start="1061:25" pos:end="1061:33">uregnames</name><index pos:start="1061:34" pos:end="1061:37">[<expr pos:start="1061:35" pos:end="1061:36"><name pos:start="1061:35" pos:end="1061:36">st</name></expr>]</index></name></expr>)</condition> <block pos:start="1061:40" pos:end="1065:21">{<block_content pos:start="1063:25" pos:end="1063:66">

                        <expr_stmt pos:start="1063:25" pos:end="1063:66"><expr pos:start="1063:25" pos:end="1063:65"><call pos:start="1063:25" pos:end="1063:65"><name pos:start="1063:25" pos:end="1063:39">tcg_gen_mov_i32</name><argument_list pos:start="1063:40" pos:end="1063:65">(<argument pos:start="1063:41" pos:end="1063:52"><expr pos:start="1063:41" pos:end="1063:52"><name pos:start="1063:41" pos:end="1063:52"><name pos:start="1063:41" pos:end="1063:45">cpu_R</name><index pos:start="1063:46" pos:end="1063:52">[<expr pos:start="1063:47" pos:end="1063:51"><name pos:start="1063:47" pos:end="1063:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1063:55" pos:end="1063:64"><expr pos:start="1063:55" pos:end="1063:64"><name pos:start="1063:55" pos:end="1063:64"><name pos:start="1063:55" pos:end="1063:60">cpu_UR</name><index pos:start="1063:61" pos:end="1063:64">[<expr pos:start="1063:62" pos:end="1063:63"><name pos:start="1063:62" pos:end="1063:63">st</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1065:23" pos:end="1069:21">else <block pos:start="1065:28" pos:end="1069:21">{<block_content pos:start="1067:25" pos:end="1067:65">

                        <expr_stmt pos:start="1067:25" pos:end="1067:65"><expr pos:start="1067:25" pos:end="1067:64"><call pos:start="1067:25" pos:end="1067:64"><name pos:start="1067:25" pos:end="1067:32">qemu_log</name><argument_list pos:start="1067:33" pos:end="1067:64">(<argument pos:start="1067:34" pos:end="1067:59"><expr pos:start="1067:34" pos:end="1067:59"><literal type="string" pos:start="1067:34" pos:end="1067:59">"RUR %d not implemented, "</literal></expr></argument>, <argument pos:start="1067:62" pos:end="1067:63"><expr pos:start="1067:62" pos:end="1067:63"><name pos:start="1067:62" pos:end="1067:63">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="1073:17" pos:end="1073:22">break;</break>



            <case pos:start="1077:13" pos:end="1077:20">case <expr pos:start="1077:18" pos:end="1077:19"><literal type="number" pos:start="1077:18" pos:end="1077:19">15</literal></expr>:</case> <comment type="block" pos:start="1077:22" pos:end="1077:28">/*WUR*/</comment>

                <block pos:start="1079:17" pos:end="1091:17">{<block_content pos:start="1081:21" pos:end="1089:21">

                    <if_stmt pos:start="1081:21" pos:end="1089:21"><if pos:start="1081:21" pos:end="1085:21">if <condition pos:start="1081:24" pos:end="1081:42">(<expr pos:start="1081:25" pos:end="1081:41"><name pos:start="1081:25" pos:end="1081:41"><name pos:start="1081:25" pos:end="1081:33">uregnames</name><index pos:start="1081:34" pos:end="1081:41">[<expr pos:start="1081:35" pos:end="1081:40"><name pos:start="1081:35" pos:end="1081:40">RSR_SR</name></expr>]</index></name></expr>)</condition> <block pos:start="1081:44" pos:end="1085:21">{<block_content pos:start="1083:25" pos:end="1083:70">

                        <expr_stmt pos:start="1083:25" pos:end="1083:70"><expr pos:start="1083:25" pos:end="1083:69"><call pos:start="1083:25" pos:end="1083:69"><name pos:start="1083:25" pos:end="1083:39">tcg_gen_mov_i32</name><argument_list pos:start="1083:40" pos:end="1083:69">(<argument pos:start="1083:41" pos:end="1083:54"><expr pos:start="1083:41" pos:end="1083:54"><name pos:start="1083:41" pos:end="1083:54"><name pos:start="1083:41" pos:end="1083:46">cpu_UR</name><index pos:start="1083:47" pos:end="1083:54">[<expr pos:start="1083:48" pos:end="1083:53"><name pos:start="1083:48" pos:end="1083:53">RSR_SR</name></expr>]</index></name></expr></argument>, <argument pos:start="1083:57" pos:end="1083:68"><expr pos:start="1083:57" pos:end="1083:68"><name pos:start="1083:57" pos:end="1083:68"><name pos:start="1083:57" pos:end="1083:61">cpu_R</name><index pos:start="1083:62" pos:end="1083:68">[<expr pos:start="1083:63" pos:end="1083:67"><name pos:start="1083:63" pos:end="1083:67">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1085:23" pos:end="1089:21">else <block pos:start="1085:28" pos:end="1089:21">{<block_content pos:start="1087:25" pos:end="1087:69">

                        <expr_stmt pos:start="1087:25" pos:end="1087:69"><expr pos:start="1087:25" pos:end="1087:68"><call pos:start="1087:25" pos:end="1087:68"><name pos:start="1087:25" pos:end="1087:32">qemu_log</name><argument_list pos:start="1087:33" pos:end="1087:68">(<argument pos:start="1087:34" pos:end="1087:59"><expr pos:start="1087:34" pos:end="1087:59"><literal type="string" pos:start="1087:34" pos:end="1087:59">"WUR %d not implemented, "</literal></expr></argument>, <argument pos:start="1087:62" pos:end="1087:67"><expr pos:start="1087:62" pos:end="1087:67"><name pos:start="1087:62" pos:end="1087:67">RSR_SR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="1093:17" pos:end="1093:22">break;</break>



            </block_content>}</block></switch>

            <break pos:start="1099:13" pos:end="1099:18">break;</break>



        <case pos:start="1103:9" pos:end="1103:15">case <expr pos:start="1103:14" pos:end="1103:14"><literal type="number" pos:start="1103:14" pos:end="1103:14">4</literal></expr>:</case> <comment type="block" pos:start="1103:17" pos:end="1103:25">/*EXTUI*/</comment>

        <case pos:start="1105:9" pos:end="1105:15">case <expr pos:start="1105:14" pos:end="1105:14"><literal type="number" pos:start="1105:14" pos:end="1105:14">5</literal></expr>:</case>

            <block pos:start="1107:13" pos:end="1123:13">{<block_content pos:start="1109:17" pos:end="1121:35">

                <decl_stmt pos:start="1109:17" pos:end="1109:50"><decl pos:start="1109:17" pos:end="1109:49"><type pos:start="1109:17" pos:end="1109:19"><name pos:start="1109:17" pos:end="1109:19">int</name></type> <name pos:start="1109:21" pos:end="1109:28">shiftimm</name> <init pos:start="1109:30" pos:end="1109:49">= <expr pos:start="1109:32" pos:end="1109:49"><name pos:start="1109:32" pos:end="1109:36">RRR_S</name> <operator pos:start="1109:38" pos:end="1109:38">|</operator> <operator pos:start="1109:40" pos:end="1109:40">(</operator><name pos:start="1109:41" pos:end="1109:43">OP1</name> <operator pos:start="1109:45" pos:end="1109:46">&lt;&lt;</operator> <literal type="number" pos:start="1109:48" pos:end="1109:48">4</literal><operator pos:start="1109:49" pos:end="1109:49">)</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1111:17" pos:end="1111:51"><decl pos:start="1111:17" pos:end="1111:50"><type pos:start="1111:17" pos:end="1111:19"><name pos:start="1111:17" pos:end="1111:19">int</name></type> <name pos:start="1111:21" pos:end="1111:27">maskimm</name> <init pos:start="1111:29" pos:end="1111:50">= <expr pos:start="1111:31" pos:end="1111:50"><operator pos:start="1111:31" pos:end="1111:31">(</operator><literal type="number" pos:start="1111:32" pos:end="1111:32">1</literal> <operator pos:start="1111:34" pos:end="1111:35">&lt;&lt;</operator> <operator pos:start="1111:37" pos:end="1111:37">(</operator><name pos:start="1111:38" pos:end="1111:40">OP2</name> <operator pos:start="1111:42" pos:end="1111:42">+</operator> <literal type="number" pos:start="1111:44" pos:end="1111:44">1</literal><operator pos:start="1111:45" pos:end="1111:45">)</operator><operator pos:start="1111:46" pos:end="1111:46">)</operator> <operator pos:start="1111:48" pos:end="1111:48">-</operator> <literal type="number" pos:start="1111:50" pos:end="1111:50">1</literal></expr></init></decl>;</decl_stmt>



                <decl_stmt pos:start="1115:17" pos:end="1115:50"><decl pos:start="1115:17" pos:end="1115:49"><type pos:start="1115:17" pos:end="1115:24"><name pos:start="1115:17" pos:end="1115:24">TCGv_i32</name></type> <name pos:start="1115:26" pos:end="1115:28">tmp</name> <init pos:start="1115:30" pos:end="1115:49">= <expr pos:start="1115:32" pos:end="1115:49"><call pos:start="1115:32" pos:end="1115:49"><name pos:start="1115:32" pos:end="1115:47">tcg_temp_new_i32</name><argument_list pos:start="1115:48" pos:end="1115:49">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1117:17" pos:end="1117:62"><expr pos:start="1117:17" pos:end="1117:61"><call pos:start="1117:17" pos:end="1117:61"><name pos:start="1117:17" pos:end="1117:32">tcg_gen_shri_i32</name><argument_list pos:start="1117:33" pos:end="1117:61">(<argument pos:start="1117:34" pos:end="1117:36"><expr pos:start="1117:34" pos:end="1117:36"><name pos:start="1117:34" pos:end="1117:36">tmp</name></expr></argument>, <argument pos:start="1117:39" pos:end="1117:50"><expr pos:start="1117:39" pos:end="1117:50"><name pos:start="1117:39" pos:end="1117:50"><name pos:start="1117:39" pos:end="1117:43">cpu_R</name><index pos:start="1117:44" pos:end="1117:50">[<expr pos:start="1117:45" pos:end="1117:49"><name pos:start="1117:45" pos:end="1117:49">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1117:53" pos:end="1117:60"><expr pos:start="1117:53" pos:end="1117:60"><name pos:start="1117:53" pos:end="1117:60">shiftimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1119:17" pos:end="1119:61"><expr pos:start="1119:17" pos:end="1119:60"><call pos:start="1119:17" pos:end="1119:60"><name pos:start="1119:17" pos:end="1119:32">tcg_gen_andi_i32</name><argument_list pos:start="1119:33" pos:end="1119:60">(<argument pos:start="1119:34" pos:end="1119:45"><expr pos:start="1119:34" pos:end="1119:45"><name pos:start="1119:34" pos:end="1119:45"><name pos:start="1119:34" pos:end="1119:38">cpu_R</name><index pos:start="1119:39" pos:end="1119:45">[<expr pos:start="1119:40" pos:end="1119:44"><name pos:start="1119:40" pos:end="1119:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1119:48" pos:end="1119:50"><expr pos:start="1119:48" pos:end="1119:50"><name pos:start="1119:48" pos:end="1119:50">tmp</name></expr></argument>, <argument pos:start="1119:53" pos:end="1119:59"><expr pos:start="1119:53" pos:end="1119:59"><name pos:start="1119:53" pos:end="1119:59">maskimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1121:17" pos:end="1121:35"><expr pos:start="1121:17" pos:end="1121:34"><call pos:start="1121:17" pos:end="1121:34"><name pos:start="1121:17" pos:end="1121:29">tcg_temp_free</name><argument_list pos:start="1121:30" pos:end="1121:34">(<argument pos:start="1121:31" pos:end="1121:33"><expr pos:start="1121:31" pos:end="1121:33"><name pos:start="1121:31" pos:end="1121:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="1125:13" pos:end="1125:18">break;</break>



        <case pos:start="1129:9" pos:end="1129:15">case <expr pos:start="1129:14" pos:end="1129:14"><literal type="number" pos:start="1129:14" pos:end="1129:14">6</literal></expr>:</case> <comment type="block" pos:start="1129:17" pos:end="1129:25">/*CUST0*/</comment>

            <break pos:start="1131:13" pos:end="1131:18">break;</break>



        <case pos:start="1135:9" pos:end="1135:15">case <expr pos:start="1135:14" pos:end="1135:14"><literal type="number" pos:start="1135:14" pos:end="1135:14">7</literal></expr>:</case> <comment type="block" pos:start="1135:17" pos:end="1135:25">/*CUST1*/</comment>

            <break pos:start="1137:13" pos:end="1137:18">break;</break>



        <case pos:start="1141:9" pos:end="1141:15">case <expr pos:start="1141:14" pos:end="1141:14"><literal type="number" pos:start="1141:14" pos:end="1141:14">8</literal></expr>:</case> <comment type="block" pos:start="1141:17" pos:end="1141:25">/*LSCXp*/</comment>

            <expr_stmt pos:start="1143:13" pos:end="1143:50"><expr pos:start="1143:13" pos:end="1143:49"><call pos:start="1143:13" pos:end="1143:49"><name pos:start="1143:13" pos:end="1143:22">HAS_OPTION</name><argument_list pos:start="1143:23" pos:end="1143:49">(<argument pos:start="1143:24" pos:end="1143:48"><expr pos:start="1143:24" pos:end="1143:48"><name pos:start="1143:24" pos:end="1143:48">XTENSA_OPTION_COPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1145:13" pos:end="1145:18">break;</break>



        <case pos:start="1149:9" pos:end="1149:15">case <expr pos:start="1149:14" pos:end="1149:14"><literal type="number" pos:start="1149:14" pos:end="1149:14">9</literal></expr>:</case> <comment type="block" pos:start="1149:17" pos:end="1149:24">/*LSC4*/</comment>

            <break pos:start="1151:13" pos:end="1151:18">break;</break>



        <case pos:start="1155:9" pos:end="1155:16">case <expr pos:start="1155:14" pos:end="1155:15"><literal type="number" pos:start="1155:14" pos:end="1155:15">10</literal></expr>:</case> <comment type="block" pos:start="1155:18" pos:end="1155:24">/*FP0*/</comment>

            <expr_stmt pos:start="1157:13" pos:end="1157:53"><expr pos:start="1157:13" pos:end="1157:52"><call pos:start="1157:13" pos:end="1157:52"><name pos:start="1157:13" pos:end="1157:22">HAS_OPTION</name><argument_list pos:start="1157:23" pos:end="1157:52">(<argument pos:start="1157:24" pos:end="1157:51"><expr pos:start="1157:24" pos:end="1157:51"><name pos:start="1157:24" pos:end="1157:51">XTENSA_OPTION_FP_COPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1159:13" pos:end="1159:18">break;</break>



        <case pos:start="1163:9" pos:end="1163:16">case <expr pos:start="1163:14" pos:end="1163:15"><literal type="number" pos:start="1163:14" pos:end="1163:15">11</literal></expr>:</case> <comment type="block" pos:start="1163:18" pos:end="1163:24">/*FP1*/</comment>

            <expr_stmt pos:start="1165:13" pos:end="1165:53"><expr pos:start="1165:13" pos:end="1165:52"><call pos:start="1165:13" pos:end="1165:52"><name pos:start="1165:13" pos:end="1165:22">HAS_OPTION</name><argument_list pos:start="1165:23" pos:end="1165:52">(<argument pos:start="1165:24" pos:end="1165:51"><expr pos:start="1165:24" pos:end="1165:51"><name pos:start="1165:24" pos:end="1165:51">XTENSA_OPTION_FP_COPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1167:13" pos:end="1167:18">break;</break>



        <default pos:start="1171:9" pos:end="1171:16">default:</default> <comment type="block" pos:start="1171:18" pos:end="1171:29">/*reserved*/</comment>

            <break pos:start="1173:13" pos:end="1173:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="1177:9" pos:end="1177:14">break;</break>



    <case pos:start="1181:5" pos:end="1181:11">case <expr pos:start="1181:10" pos:end="1181:10"><literal type="number" pos:start="1181:10" pos:end="1181:10">1</literal></expr>:</case> <comment type="block" pos:start="1181:13" pos:end="1181:20">/*L32R*/</comment>

        <block pos:start="1183:9" pos:end="1201:9">{<block_content pos:start="1185:13" pos:end="1199:31">

            <decl_stmt pos:start="1185:13" pos:end="1189:41"><decl pos:start="1185:13" pos:end="1189:40"><type pos:start="1185:13" pos:end="1185:20"><name pos:start="1185:13" pos:end="1185:20">TCGv_i32</name></type> <name pos:start="1185:22" pos:end="1185:24">tmp</name> <init pos:start="1185:26" pos:end="1189:40">= <expr pos:start="1185:28" pos:end="1189:40"><call pos:start="1185:28" pos:end="1189:40"><name pos:start="1185:28" pos:end="1185:40">tcg_const_i32</name><argument_list pos:start="1185:41" pos:end="1189:40">(

                    <argument pos:start="1187:21" pos:end="1189:39"><expr pos:start="1187:21" pos:end="1189:39"><operator pos:start="1187:21" pos:end="1187:21">(</operator><literal type="number" pos:start="1187:22" pos:end="1187:31">0xfffc0000</literal> <operator pos:start="1187:33" pos:end="1187:33">|</operator> <operator pos:start="1187:35" pos:end="1187:35">(</operator><name pos:start="1187:36" pos:end="1187:45">RI16_IMM16</name> <operator pos:start="1187:47" pos:end="1187:48">&lt;&lt;</operator> <literal type="number" pos:start="1187:50" pos:end="1187:50">2</literal><operator pos:start="1187:51" pos:end="1187:51">)</operator><operator pos:start="1187:52" pos:end="1187:52">)</operator> <operator pos:start="1187:54" pos:end="1187:54">+</operator>

                    <operator pos:start="1189:21" pos:end="1189:21">(</operator><operator pos:start="1189:22" pos:end="1189:22">(</operator><name pos:start="1189:23" pos:end="1189:28"><name pos:start="1189:23" pos:end="1189:24">dc</name><operator pos:start="1189:25" pos:end="1189:26">-&gt;</operator><name pos:start="1189:27" pos:end="1189:28">pc</name></name> <operator pos:start="1189:30" pos:end="1189:30">+</operator> <literal type="number" pos:start="1189:32" pos:end="1189:32">3</literal><operator pos:start="1189:33" pos:end="1189:33">)</operator> <operator pos:start="1189:35" pos:end="1189:35">&amp;</operator> <operator pos:start="1189:37" pos:end="1189:37">~</operator><literal type="number" pos:start="1189:38" pos:end="1189:38">3</literal><operator pos:start="1189:39" pos:end="1189:39">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="1193:13" pos:end="1193:29">/* no ext L32R */</comment>



            <expr_stmt pos:start="1197:13" pos:end="1197:53"><expr pos:start="1197:13" pos:end="1197:52"><call pos:start="1197:13" pos:end="1197:52"><name pos:start="1197:13" pos:end="1197:30">tcg_gen_qemu_ld32u</name><argument_list pos:start="1197:31" pos:end="1197:52">(<argument pos:start="1197:32" pos:end="1197:43"><expr pos:start="1197:32" pos:end="1197:43"><name pos:start="1197:32" pos:end="1197:43"><name pos:start="1197:32" pos:end="1197:36">cpu_R</name><index pos:start="1197:37" pos:end="1197:43">[<expr pos:start="1197:38" pos:end="1197:42"><name pos:start="1197:38" pos:end="1197:42">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1197:46" pos:end="1197:48"><expr pos:start="1197:46" pos:end="1197:48"><name pos:start="1197:46" pos:end="1197:48">tmp</name></expr></argument>, <argument pos:start="1197:51" pos:end="1197:51"><expr pos:start="1197:51" pos:end="1197:51"><literal type="number" pos:start="1197:51" pos:end="1197:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1199:13" pos:end="1199:31"><expr pos:start="1199:13" pos:end="1199:30"><call pos:start="1199:13" pos:end="1199:30"><name pos:start="1199:13" pos:end="1199:25">tcg_temp_free</name><argument_list pos:start="1199:26" pos:end="1199:30">(<argument pos:start="1199:27" pos:end="1199:29"><expr pos:start="1199:27" pos:end="1199:29"><name pos:start="1199:27" pos:end="1199:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1203:9" pos:end="1203:14">break;</break>



    <case pos:start="1207:5" pos:end="1220:0">case <expr pos:start="1207:10" pos:end="1207:10"><literal type="number" pos:start="1207:10" pos:end="1207:10">2</literal></expr>:</case> <comment type="block" pos:start="1207:13" pos:end="1207:20">/*LSAI*/</comment>

<cpp:define pos:start="1209:1" pos:end="1219:19">#<cpp:directive pos:start="1209:2" pos:end="1209:7">define</cpp:directive> <cpp:macro pos:start="1209:9" pos:end="1209:35"><name pos:start="1209:9" pos:end="1209:22">gen_load_store</name><parameter_list pos:start="1209:23" pos:end="1209:35">(<parameter pos:start="1209:24" pos:end="1209:27"><type pos:start="1209:24" pos:end="1209:27"><name pos:start="1209:24" pos:end="1209:27">type</name></type></parameter>, <parameter pos:start="1209:30" pos:end="1209:34"><type pos:start="1209:30" pos:end="1209:34"><name pos:start="1209:30" pos:end="1209:34">shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="1209:37" pos:end="1219:19">do { \

            TCGv_i32 addr = tcg_temp_new_i32(); \

            tcg_gen_addi_i32(addr, cpu_R[RRI8_S], RRI8_IMM8 &lt;&lt; shift); \

            tcg_gen_qemu_##type(cpu_R[RRI8_T], addr, 0); \

            tcg_temp_free(addr); \

        } while (0)</cpp:value></cpp:define>



        <switch pos:start="1223:9" pos:end="1381:9">switch <condition pos:start="1223:16" pos:end="1223:23">(<expr pos:start="1223:17" pos:end="1223:22"><name pos:start="1223:17" pos:end="1223:22">RRI8_R</name></expr>)</condition> <block pos:start="1223:25" pos:end="1381:9">{<block_content pos:start="1225:9" pos:end="1379:18">

        <case pos:start="1225:9" pos:end="1225:15">case <expr pos:start="1225:14" pos:end="1225:14"><literal type="number" pos:start="1225:14" pos:end="1225:14">0</literal></expr>:</case> <comment type="block" pos:start="1225:17" pos:end="1225:24">/*L8UI*/</comment>

            <expr_stmt pos:start="1227:13" pos:end="1227:36"><expr pos:start="1227:13" pos:end="1227:35"><call pos:start="1227:13" pos:end="1227:35"><name pos:start="1227:13" pos:end="1227:26">gen_load_store</name><argument_list pos:start="1227:27" pos:end="1227:35">(<argument pos:start="1227:28" pos:end="1227:31"><expr pos:start="1227:28" pos:end="1227:31"><name pos:start="1227:28" pos:end="1227:31">ld8u</name></expr></argument>, <argument pos:start="1227:34" pos:end="1227:34"><expr pos:start="1227:34" pos:end="1227:34"><literal type="number" pos:start="1227:34" pos:end="1227:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1229:13" pos:end="1229:18">break;</break>



        <case pos:start="1233:9" pos:end="1233:15">case <expr pos:start="1233:14" pos:end="1233:14"><literal type="number" pos:start="1233:14" pos:end="1233:14">1</literal></expr>:</case> <comment type="block" pos:start="1233:17" pos:end="1233:25">/*L16UI*/</comment>

            <expr_stmt pos:start="1235:13" pos:end="1235:37"><expr pos:start="1235:13" pos:end="1235:36"><call pos:start="1235:13" pos:end="1235:36"><name pos:start="1235:13" pos:end="1235:26">gen_load_store</name><argument_list pos:start="1235:27" pos:end="1235:36">(<argument pos:start="1235:28" pos:end="1235:32"><expr pos:start="1235:28" pos:end="1235:32"><name pos:start="1235:28" pos:end="1235:32">ld16u</name></expr></argument>, <argument pos:start="1235:35" pos:end="1235:35"><expr pos:start="1235:35" pos:end="1235:35"><literal type="number" pos:start="1235:35" pos:end="1235:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1237:13" pos:end="1237:18">break;</break>



        <case pos:start="1241:9" pos:end="1241:15">case <expr pos:start="1241:14" pos:end="1241:14"><literal type="number" pos:start="1241:14" pos:end="1241:14">2</literal></expr>:</case> <comment type="block" pos:start="1241:17" pos:end="1241:24">/*L32I*/</comment>

            <expr_stmt pos:start="1243:13" pos:end="1243:37"><expr pos:start="1243:13" pos:end="1243:36"><call pos:start="1243:13" pos:end="1243:36"><name pos:start="1243:13" pos:end="1243:26">gen_load_store</name><argument_list pos:start="1243:27" pos:end="1243:36">(<argument pos:start="1243:28" pos:end="1243:32"><expr pos:start="1243:28" pos:end="1243:32"><name pos:start="1243:28" pos:end="1243:32">ld32u</name></expr></argument>, <argument pos:start="1243:35" pos:end="1243:35"><expr pos:start="1243:35" pos:end="1243:35"><literal type="number" pos:start="1243:35" pos:end="1243:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1245:13" pos:end="1245:18">break;</break>



        <case pos:start="1249:9" pos:end="1249:15">case <expr pos:start="1249:14" pos:end="1249:14"><literal type="number" pos:start="1249:14" pos:end="1249:14">4</literal></expr>:</case> <comment type="block" pos:start="1249:17" pos:end="1249:23">/*S8I*/</comment>

            <expr_stmt pos:start="1251:13" pos:end="1251:35"><expr pos:start="1251:13" pos:end="1251:34"><call pos:start="1251:13" pos:end="1251:34"><name pos:start="1251:13" pos:end="1251:26">gen_load_store</name><argument_list pos:start="1251:27" pos:end="1251:34">(<argument pos:start="1251:28" pos:end="1251:30"><expr pos:start="1251:28" pos:end="1251:30"><name pos:start="1251:28" pos:end="1251:30">st8</name></expr></argument>, <argument pos:start="1251:33" pos:end="1251:33"><expr pos:start="1251:33" pos:end="1251:33"><literal type="number" pos:start="1251:33" pos:end="1251:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1253:13" pos:end="1253:18">break;</break>



        <case pos:start="1257:9" pos:end="1257:15">case <expr pos:start="1257:14" pos:end="1257:14"><literal type="number" pos:start="1257:14" pos:end="1257:14">5</literal></expr>:</case> <comment type="block" pos:start="1257:17" pos:end="1257:24">/*S16I*/</comment>

            <expr_stmt pos:start="1259:13" pos:end="1259:36"><expr pos:start="1259:13" pos:end="1259:35"><call pos:start="1259:13" pos:end="1259:35"><name pos:start="1259:13" pos:end="1259:26">gen_load_store</name><argument_list pos:start="1259:27" pos:end="1259:35">(<argument pos:start="1259:28" pos:end="1259:31"><expr pos:start="1259:28" pos:end="1259:31"><name pos:start="1259:28" pos:end="1259:31">st16</name></expr></argument>, <argument pos:start="1259:34" pos:end="1259:34"><expr pos:start="1259:34" pos:end="1259:34"><literal type="number" pos:start="1259:34" pos:end="1259:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1261:13" pos:end="1261:18">break;</break>



        <case pos:start="1265:9" pos:end="1265:15">case <expr pos:start="1265:14" pos:end="1265:14"><literal type="number" pos:start="1265:14" pos:end="1265:14">6</literal></expr>:</case> <comment type="block" pos:start="1265:17" pos:end="1265:24">/*S32I*/</comment>

            <expr_stmt pos:start="1267:13" pos:end="1267:36"><expr pos:start="1267:13" pos:end="1267:35"><call pos:start="1267:13" pos:end="1267:35"><name pos:start="1267:13" pos:end="1267:26">gen_load_store</name><argument_list pos:start="1267:27" pos:end="1267:35">(<argument pos:start="1267:28" pos:end="1267:31"><expr pos:start="1267:28" pos:end="1267:31"><name pos:start="1267:28" pos:end="1267:31">st32</name></expr></argument>, <argument pos:start="1267:34" pos:end="1267:34"><expr pos:start="1267:34" pos:end="1267:34"><literal type="number" pos:start="1267:34" pos:end="1267:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1269:13" pos:end="1269:18">break;</break>



        <case pos:start="1273:9" pos:end="1273:15">case <expr pos:start="1273:14" pos:end="1273:14"><literal type="number" pos:start="1273:14" pos:end="1273:14">7</literal></expr>:</case> <comment type="block" pos:start="1273:17" pos:end="1273:26">/*CACHEc*/</comment>

            <break pos:start="1275:13" pos:end="1275:18">break;</break>



        <case pos:start="1279:9" pos:end="1279:15">case <expr pos:start="1279:14" pos:end="1279:14"><literal type="number" pos:start="1279:14" pos:end="1279:14">9</literal></expr>:</case> <comment type="block" pos:start="1279:17" pos:end="1279:25">/*L16SI*/</comment>

            <expr_stmt pos:start="1281:13" pos:end="1281:37"><expr pos:start="1281:13" pos:end="1281:36"><call pos:start="1281:13" pos:end="1281:36"><name pos:start="1281:13" pos:end="1281:26">gen_load_store</name><argument_list pos:start="1281:27" pos:end="1281:36">(<argument pos:start="1281:28" pos:end="1281:32"><expr pos:start="1281:28" pos:end="1281:32"><name pos:start="1281:28" pos:end="1281:32">ld16s</name></expr></argument>, <argument pos:start="1281:35" pos:end="1281:35"><expr pos:start="1281:35" pos:end="1281:35"><literal type="number" pos:start="1281:35" pos:end="1281:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1283:13" pos:end="1283:18">break;</break>



        <case pos:start="1287:9" pos:end="1287:16">case <expr pos:start="1287:14" pos:end="1287:15"><literal type="number" pos:start="1287:14" pos:end="1287:15">10</literal></expr>:</case> <comment type="block" pos:start="1287:18" pos:end="1287:25">/*MOVI*/</comment>

            <expr_stmt pos:start="1289:13" pos:end="1293:55"><expr pos:start="1289:13" pos:end="1293:54"><call pos:start="1289:13" pos:end="1293:54"><name pos:start="1289:13" pos:end="1289:28">tcg_gen_movi_i32</name><argument_list pos:start="1289:29" pos:end="1293:54">(<argument pos:start="1289:30" pos:end="1289:42"><expr pos:start="1289:30" pos:end="1289:42"><name pos:start="1289:30" pos:end="1289:42"><name pos:start="1289:30" pos:end="1289:34">cpu_R</name><index pos:start="1289:35" pos:end="1289:42">[<expr pos:start="1289:36" pos:end="1289:41"><name pos:start="1289:36" pos:end="1289:41">RRI8_T</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="1291:21" pos:end="1293:53"><expr pos:start="1291:21" pos:end="1293:53"><name pos:start="1291:21" pos:end="1291:29">RRI8_IMM8</name> <operator pos:start="1291:31" pos:end="1291:31">|</operator> <operator pos:start="1291:33" pos:end="1291:33">(</operator><name pos:start="1291:34" pos:end="1291:39">RRI8_S</name> <operator pos:start="1291:41" pos:end="1291:42">&lt;&lt;</operator> <literal type="number" pos:start="1291:44" pos:end="1291:44">8</literal><operator pos:start="1291:45" pos:end="1291:45">)</operator> <operator pos:start="1291:47" pos:end="1291:47">|</operator>

                    <operator pos:start="1293:21" pos:end="1293:21">(</operator><ternary pos:start="1293:22" pos:end="1293:52"><condition pos:start="1293:22" pos:end="1293:37"><expr pos:start="1293:22" pos:end="1293:35"><operator pos:start="1293:22" pos:end="1293:22">(</operator><name pos:start="1293:23" pos:end="1293:28">RRI8_S</name> <operator pos:start="1293:30" pos:end="1293:30">&amp;</operator> <literal type="number" pos:start="1293:32" pos:end="1293:34">0x8</literal><operator pos:start="1293:35" pos:end="1293:35">)</operator></expr> ?</condition><then pos:start="1293:39" pos:end="1293:48"> <expr pos:start="1293:39" pos:end="1293:48"><literal type="number" pos:start="1293:39" pos:end="1293:48">0xfffff000</literal></expr> </then><else pos:start="1293:50" pos:end="1293:52">: <expr pos:start="1293:52" pos:end="1293:52"><literal type="number" pos:start="1293:52" pos:end="1293:52">0</literal></expr></else></ternary><operator pos:start="1293:53" pos:end="1293:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1295:13" pos:end="1295:18">break;</break>



        <case pos:start="1299:9" pos:end="1299:16">case <expr pos:start="1299:14" pos:end="1299:15"><literal type="number" pos:start="1299:14" pos:end="1299:15">11</literal></expr>:</case> <comment type="block" pos:start="1299:18" pos:end="1299:27">/*L32AIy*/</comment>

            <expr_stmt pos:start="1301:13" pos:end="1301:49"><expr pos:start="1301:13" pos:end="1301:48"><call pos:start="1301:13" pos:end="1301:48"><name pos:start="1301:13" pos:end="1301:22">HAS_OPTION</name><argument_list pos:start="1301:23" pos:end="1301:48">(<argument pos:start="1301:24" pos:end="1301:47"><expr pos:start="1301:24" pos:end="1301:47"><name pos:start="1301:24" pos:end="1301:47">XTENSA_OPTION_MP_SYNCHRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1303:13" pos:end="1303:37"><expr pos:start="1303:13" pos:end="1303:36"><call pos:start="1303:13" pos:end="1303:36"><name pos:start="1303:13" pos:end="1303:26">gen_load_store</name><argument_list pos:start="1303:27" pos:end="1303:36">(<argument pos:start="1303:28" pos:end="1303:32"><expr pos:start="1303:28" pos:end="1303:32"><name pos:start="1303:28" pos:end="1303:32">ld32u</name></expr></argument>, <argument pos:start="1303:35" pos:end="1303:35"><expr pos:start="1303:35" pos:end="1303:35"><literal type="number" pos:start="1303:35" pos:end="1303:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="1303:39" pos:end="1303:55">/*TODO acquire?*/</comment>

            <break pos:start="1305:13" pos:end="1305:18">break;</break>



        <case pos:start="1309:9" pos:end="1309:16">case <expr pos:start="1309:14" pos:end="1309:15"><literal type="number" pos:start="1309:14" pos:end="1309:15">12</literal></expr>:</case> <comment type="block" pos:start="1309:18" pos:end="1309:25">/*ADDI*/</comment>

            <expr_stmt pos:start="1311:13" pos:end="1311:73"><expr pos:start="1311:13" pos:end="1311:72"><call pos:start="1311:13" pos:end="1311:72"><name pos:start="1311:13" pos:end="1311:28">tcg_gen_addi_i32</name><argument_list pos:start="1311:29" pos:end="1311:72">(<argument pos:start="1311:30" pos:end="1311:42"><expr pos:start="1311:30" pos:end="1311:42"><name pos:start="1311:30" pos:end="1311:42"><name pos:start="1311:30" pos:end="1311:34">cpu_R</name><index pos:start="1311:35" pos:end="1311:42">[<expr pos:start="1311:36" pos:end="1311:41"><name pos:start="1311:36" pos:end="1311:41">RRI8_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1311:45" pos:end="1311:57"><expr pos:start="1311:45" pos:end="1311:57"><name pos:start="1311:45" pos:end="1311:57"><name pos:start="1311:45" pos:end="1311:49">cpu_R</name><index pos:start="1311:50" pos:end="1311:57">[<expr pos:start="1311:51" pos:end="1311:56"><name pos:start="1311:51" pos:end="1311:56">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1311:60" pos:end="1311:71"><expr pos:start="1311:60" pos:end="1311:71"><name pos:start="1311:60" pos:end="1311:71">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1313:13" pos:end="1313:18">break;</break>



        <case pos:start="1317:9" pos:end="1317:16">case <expr pos:start="1317:14" pos:end="1317:15"><literal type="number" pos:start="1317:14" pos:end="1317:15">13</literal></expr>:</case> <comment type="block" pos:start="1317:18" pos:end="1317:26">/*ADDMI*/</comment>

            <expr_stmt pos:start="1319:13" pos:end="1319:78"><expr pos:start="1319:13" pos:end="1319:77"><call pos:start="1319:13" pos:end="1319:77"><name pos:start="1319:13" pos:end="1319:28">tcg_gen_addi_i32</name><argument_list pos:start="1319:29" pos:end="1319:77">(<argument pos:start="1319:30" pos:end="1319:42"><expr pos:start="1319:30" pos:end="1319:42"><name pos:start="1319:30" pos:end="1319:42"><name pos:start="1319:30" pos:end="1319:34">cpu_R</name><index pos:start="1319:35" pos:end="1319:42">[<expr pos:start="1319:36" pos:end="1319:41"><name pos:start="1319:36" pos:end="1319:41">RRI8_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1319:45" pos:end="1319:57"><expr pos:start="1319:45" pos:end="1319:57"><name pos:start="1319:45" pos:end="1319:57"><name pos:start="1319:45" pos:end="1319:49">cpu_R</name><index pos:start="1319:50" pos:end="1319:57">[<expr pos:start="1319:51" pos:end="1319:56"><name pos:start="1319:51" pos:end="1319:56">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1319:60" pos:end="1319:76"><expr pos:start="1319:60" pos:end="1319:76"><name pos:start="1319:60" pos:end="1319:71">RRI8_IMM8_SE</name> <operator pos:start="1319:73" pos:end="1319:74">&lt;&lt;</operator> <literal type="number" pos:start="1319:76" pos:end="1319:76">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1321:13" pos:end="1321:18">break;</break>



        <case pos:start="1325:9" pos:end="1325:16">case <expr pos:start="1325:14" pos:end="1325:15"><literal type="number" pos:start="1325:14" pos:end="1325:15">14</literal></expr>:</case> <comment type="block" pos:start="1325:18" pos:end="1325:28">/*S32C1Iy*/</comment>

            <expr_stmt pos:start="1327:13" pos:end="1327:49"><expr pos:start="1327:13" pos:end="1327:48"><call pos:start="1327:13" pos:end="1327:48"><name pos:start="1327:13" pos:end="1327:22">HAS_OPTION</name><argument_list pos:start="1327:23" pos:end="1327:48">(<argument pos:start="1327:24" pos:end="1327:47"><expr pos:start="1327:24" pos:end="1327:47"><name pos:start="1327:24" pos:end="1327:47">XTENSA_OPTION_MP_SYNCHRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <block pos:start="1329:13" pos:end="1361:13">{<block_content pos:start="1331:17" pos:end="1359:35">

                <decl_stmt pos:start="1331:17" pos:end="1331:44"><decl pos:start="1331:17" pos:end="1331:43"><type pos:start="1331:17" pos:end="1331:19"><name pos:start="1331:17" pos:end="1331:19">int</name></type> <name pos:start="1331:21" pos:end="1331:25">label</name> <init pos:start="1331:27" pos:end="1331:43">= <expr pos:start="1331:29" pos:end="1331:43"><call pos:start="1331:29" pos:end="1331:43"><name pos:start="1331:29" pos:end="1331:41">gen_new_label</name><argument_list pos:start="1331:42" pos:end="1331:43">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1333:17" pos:end="1333:56"><decl pos:start="1333:17" pos:end="1333:55"><type pos:start="1333:17" pos:end="1333:24"><name pos:start="1333:17" pos:end="1333:24">TCGv_i32</name></type> <name pos:start="1333:26" pos:end="1333:28">tmp</name> <init pos:start="1333:30" pos:end="1333:55">= <expr pos:start="1333:32" pos:end="1333:55"><call pos:start="1333:32" pos:end="1333:55"><name pos:start="1333:32" pos:end="1333:53">tcg_temp_local_new_i32</name><argument_list pos:start="1333:54" pos:end="1333:55">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1335:17" pos:end="1335:57"><decl pos:start="1335:17" pos:end="1335:56"><type pos:start="1335:17" pos:end="1335:24"><name pos:start="1335:17" pos:end="1335:24">TCGv_i32</name></type> <name pos:start="1335:26" pos:end="1335:29">addr</name> <init pos:start="1335:31" pos:end="1335:56">= <expr pos:start="1335:33" pos:end="1335:56"><call pos:start="1335:33" pos:end="1335:56"><name pos:start="1335:33" pos:end="1335:54">tcg_temp_local_new_i32</name><argument_list pos:start="1335:55" pos:end="1335:56">()</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="1339:17" pos:end="1339:52"><expr pos:start="1339:17" pos:end="1339:51"><call pos:start="1339:17" pos:end="1339:51"><name pos:start="1339:17" pos:end="1339:31">tcg_gen_mov_i32</name><argument_list pos:start="1339:32" pos:end="1339:51">(<argument pos:start="1339:33" pos:end="1339:35"><expr pos:start="1339:33" pos:end="1339:35"><name pos:start="1339:33" pos:end="1339:35">tmp</name></expr></argument>, <argument pos:start="1339:38" pos:end="1339:50"><expr pos:start="1339:38" pos:end="1339:50"><name pos:start="1339:38" pos:end="1339:50"><name pos:start="1339:38" pos:end="1339:42">cpu_R</name><index pos:start="1339:43" pos:end="1339:50">[<expr pos:start="1339:44" pos:end="1339:49"><name pos:start="1339:44" pos:end="1339:49">RRI8_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1341:17" pos:end="1341:70"><expr pos:start="1341:17" pos:end="1341:69"><call pos:start="1341:17" pos:end="1341:69"><name pos:start="1341:17" pos:end="1341:32">tcg_gen_addi_i32</name><argument_list pos:start="1341:33" pos:end="1341:69">(<argument pos:start="1341:34" pos:end="1341:37"><expr pos:start="1341:34" pos:end="1341:37"><name pos:start="1341:34" pos:end="1341:37">addr</name></expr></argument>, <argument pos:start="1341:40" pos:end="1341:52"><expr pos:start="1341:40" pos:end="1341:52"><name pos:start="1341:40" pos:end="1341:52"><name pos:start="1341:40" pos:end="1341:44">cpu_R</name><index pos:start="1341:45" pos:end="1341:52">[<expr pos:start="1341:46" pos:end="1341:51"><name pos:start="1341:46" pos:end="1341:51">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1341:55" pos:end="1341:68"><expr pos:start="1341:55" pos:end="1341:68"><name pos:start="1341:55" pos:end="1341:63">RRI8_IMM8</name> <operator pos:start="1341:65" pos:end="1341:66">&lt;&lt;</operator> <literal type="number" pos:start="1341:68" pos:end="1341:68">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1343:17" pos:end="1343:59"><expr pos:start="1343:17" pos:end="1343:58"><call pos:start="1343:17" pos:end="1343:58"><name pos:start="1343:17" pos:end="1343:34">tcg_gen_qemu_ld32u</name><argument_list pos:start="1343:35" pos:end="1343:58">(<argument pos:start="1343:36" pos:end="1343:48"><expr pos:start="1343:36" pos:end="1343:48"><name pos:start="1343:36" pos:end="1343:48"><name pos:start="1343:36" pos:end="1343:40">cpu_R</name><index pos:start="1343:41" pos:end="1343:48">[<expr pos:start="1343:42" pos:end="1343:47"><name pos:start="1343:42" pos:end="1343:47">RRI8_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1343:51" pos:end="1343:54"><expr pos:start="1343:51" pos:end="1343:54"><name pos:start="1343:51" pos:end="1343:54">addr</name></expr></argument>, <argument pos:start="1343:57" pos:end="1343:57"><expr pos:start="1343:57" pos:end="1343:57"><literal type="number" pos:start="1343:57" pos:end="1343:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1345:17" pos:end="1347:50"><expr pos:start="1345:17" pos:end="1347:49"><call pos:start="1345:17" pos:end="1347:49"><name pos:start="1345:17" pos:end="1345:34">tcg_gen_brcond_i32</name><argument_list pos:start="1345:35" pos:end="1347:49">(<argument pos:start="1345:36" pos:end="1345:46"><expr pos:start="1345:36" pos:end="1345:46"><name pos:start="1345:36" pos:end="1345:46">TCG_COND_NE</name></expr></argument>, <argument pos:start="1345:49" pos:end="1345:61"><expr pos:start="1345:49" pos:end="1345:61"><name pos:start="1345:49" pos:end="1345:61"><name pos:start="1345:49" pos:end="1345:53">cpu_R</name><index pos:start="1345:54" pos:end="1345:61">[<expr pos:start="1345:55" pos:end="1345:60"><name pos:start="1345:55" pos:end="1345:60">RRI8_T</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="1347:25" pos:end="1347:41"><expr pos:start="1347:25" pos:end="1347:41"><name pos:start="1347:25" pos:end="1347:41"><name pos:start="1347:25" pos:end="1347:30">cpu_SR</name><index pos:start="1347:31" pos:end="1347:41">[<expr pos:start="1347:32" pos:end="1347:40"><name pos:start="1347:32" pos:end="1347:40">SCOMPARE1</name></expr>]</index></name></expr></argument>, <argument pos:start="1347:44" pos:end="1347:48"><expr pos:start="1347:44" pos:end="1347:48"><name pos:start="1347:44" pos:end="1347:48">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="1351:17" pos:end="1351:48"><expr pos:start="1351:17" pos:end="1351:47"><call pos:start="1351:17" pos:end="1351:47"><name pos:start="1351:17" pos:end="1351:33">tcg_gen_qemu_st32</name><argument_list pos:start="1351:34" pos:end="1351:47">(<argument pos:start="1351:35" pos:end="1351:37"><expr pos:start="1351:35" pos:end="1351:37"><name pos:start="1351:35" pos:end="1351:37">tmp</name></expr></argument>, <argument pos:start="1351:40" pos:end="1351:43"><expr pos:start="1351:40" pos:end="1351:43"><name pos:start="1351:40" pos:end="1351:43">addr</name></expr></argument>, <argument pos:start="1351:46" pos:end="1351:46"><expr pos:start="1351:46" pos:end="1351:46"><literal type="number" pos:start="1351:46" pos:end="1351:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="1355:17" pos:end="1355:37"><expr pos:start="1355:17" pos:end="1355:36"><call pos:start="1355:17" pos:end="1355:36"><name pos:start="1355:17" pos:end="1355:29">gen_set_label</name><argument_list pos:start="1355:30" pos:end="1355:36">(<argument pos:start="1355:31" pos:end="1355:35"><expr pos:start="1355:31" pos:end="1355:35"><name pos:start="1355:31" pos:end="1355:35">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1357:17" pos:end="1357:36"><expr pos:start="1357:17" pos:end="1357:35"><call pos:start="1357:17" pos:end="1357:35"><name pos:start="1357:17" pos:end="1357:29">tcg_temp_free</name><argument_list pos:start="1357:30" pos:end="1357:35">(<argument pos:start="1357:31" pos:end="1357:34"><expr pos:start="1357:31" pos:end="1357:34"><name pos:start="1357:31" pos:end="1357:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1359:17" pos:end="1359:35"><expr pos:start="1359:17" pos:end="1359:34"><call pos:start="1359:17" pos:end="1359:34"><name pos:start="1359:17" pos:end="1359:29">tcg_temp_free</name><argument_list pos:start="1359:30" pos:end="1359:34">(<argument pos:start="1359:31" pos:end="1359:33"><expr pos:start="1359:31" pos:end="1359:33"><name pos:start="1359:31" pos:end="1359:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="1363:13" pos:end="1363:18">break;</break>



        <case pos:start="1367:9" pos:end="1367:16">case <expr pos:start="1367:14" pos:end="1367:15"><literal type="number" pos:start="1367:14" pos:end="1367:15">15</literal></expr>:</case> <comment type="block" pos:start="1367:18" pos:end="1367:27">/*S32RIy*/</comment>

            <expr_stmt pos:start="1369:13" pos:end="1369:49"><expr pos:start="1369:13" pos:end="1369:48"><call pos:start="1369:13" pos:end="1369:48"><name pos:start="1369:13" pos:end="1369:22">HAS_OPTION</name><argument_list pos:start="1369:23" pos:end="1369:48">(<argument pos:start="1369:24" pos:end="1369:47"><expr pos:start="1369:24" pos:end="1369:47"><name pos:start="1369:24" pos:end="1369:47">XTENSA_OPTION_MP_SYNCHRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1371:13" pos:end="1371:36"><expr pos:start="1371:13" pos:end="1371:35"><call pos:start="1371:13" pos:end="1371:35"><name pos:start="1371:13" pos:end="1371:26">gen_load_store</name><argument_list pos:start="1371:27" pos:end="1371:35">(<argument pos:start="1371:28" pos:end="1371:31"><expr pos:start="1371:28" pos:end="1371:31"><name pos:start="1371:28" pos:end="1371:31">st32</name></expr></argument>, <argument pos:start="1371:34" pos:end="1371:34"><expr pos:start="1371:34" pos:end="1371:34"><literal type="number" pos:start="1371:34" pos:end="1371:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="1371:38" pos:end="1371:54">/*TODO release?*/</comment>

            <break pos:start="1373:13" pos:end="1373:18">break;</break>



        <default pos:start="1377:9" pos:end="1377:16">default:</default> <comment type="block" pos:start="1377:18" pos:end="1377:29">/*reserved*/</comment>

            <break pos:start="1379:13" pos:end="1379:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="1383:9" pos:end="1386:0">break;</break>

<cpp:undef pos:start="1385:1" pos:end="1385:21">#<cpp:directive pos:start="1385:2" pos:end="1385:6">undef</cpp:directive> <name pos:start="1385:8" pos:end="1385:21">gen_load_store</name></cpp:undef>



    <case pos:start="1389:5" pos:end="1389:11">case <expr pos:start="1389:10" pos:end="1389:10"><literal type="number" pos:start="1389:10" pos:end="1389:10">3</literal></expr>:</case> <comment type="block" pos:start="1389:13" pos:end="1389:21">/*LSCIp*/</comment>

        <expr_stmt pos:start="1391:9" pos:end="1391:46"><expr pos:start="1391:9" pos:end="1391:45"><call pos:start="1391:9" pos:end="1391:45"><name pos:start="1391:9" pos:end="1391:18">HAS_OPTION</name><argument_list pos:start="1391:19" pos:end="1391:45">(<argument pos:start="1391:20" pos:end="1391:44"><expr pos:start="1391:20" pos:end="1391:44"><name pos:start="1391:20" pos:end="1391:44">XTENSA_OPTION_COPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1393:9" pos:end="1393:14">break;</break>



    <case pos:start="1397:5" pos:end="1397:11">case <expr pos:start="1397:10" pos:end="1397:10"><literal type="number" pos:start="1397:10" pos:end="1397:10">4</literal></expr>:</case> <comment type="block" pos:start="1397:13" pos:end="1397:22">/*MAC16d*/</comment>

        <expr_stmt pos:start="1399:9" pos:end="1399:40"><expr pos:start="1399:9" pos:end="1399:39"><call pos:start="1399:9" pos:end="1399:39"><name pos:start="1399:9" pos:end="1399:18">HAS_OPTION</name><argument_list pos:start="1399:19" pos:end="1399:39">(<argument pos:start="1399:20" pos:end="1399:38"><expr pos:start="1399:20" pos:end="1399:38"><name pos:start="1399:20" pos:end="1399:38">XTENSA_OPTION_MAC16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1401:9" pos:end="1401:14">break;</break>



    <case pos:start="1405:5" pos:end="1405:11">case <expr pos:start="1405:10" pos:end="1405:10"><literal type="number" pos:start="1405:10" pos:end="1405:10">5</literal></expr>:</case> <comment type="block" pos:start="1405:13" pos:end="1405:21">/*CALLN*/</comment>

        <switch pos:start="1407:9" pos:end="1429:9">switch <condition pos:start="1407:16" pos:end="1407:23">(<expr pos:start="1407:17" pos:end="1407:22"><name pos:start="1407:17" pos:end="1407:22">CALL_N</name></expr>)</condition> <block pos:start="1407:25" pos:end="1429:9">{<block_content pos:start="1409:9" pos:end="1427:18">

        <case pos:start="1409:9" pos:end="1409:15">case <expr pos:start="1409:14" pos:end="1409:14"><literal type="number" pos:start="1409:14" pos:end="1409:14">0</literal></expr>:</case> <comment type="block" pos:start="1409:17" pos:end="1409:25">/*CALL0*/</comment>

            <expr_stmt pos:start="1411:13" pos:end="1411:52"><expr pos:start="1411:13" pos:end="1411:51"><call pos:start="1411:13" pos:end="1411:51"><name pos:start="1411:13" pos:end="1411:28">tcg_gen_movi_i32</name><argument_list pos:start="1411:29" pos:end="1411:51">(<argument pos:start="1411:30" pos:end="1411:37"><expr pos:start="1411:30" pos:end="1411:37"><name pos:start="1411:30" pos:end="1411:37"><name pos:start="1411:30" pos:end="1411:34">cpu_R</name><index pos:start="1411:35" pos:end="1411:37">[<expr pos:start="1411:36" pos:end="1411:36"><literal type="number" pos:start="1411:36" pos:end="1411:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1411:40" pos:end="1411:50"><expr pos:start="1411:40" pos:end="1411:50"><name pos:start="1411:40" pos:end="1411:50"><name pos:start="1411:40" pos:end="1411:41">dc</name><operator pos:start="1411:42" pos:end="1411:43">-&gt;</operator><name pos:start="1411:44" pos:end="1411:50">next_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1413:13" pos:end="1413:72"><expr pos:start="1413:13" pos:end="1413:71"><call pos:start="1413:13" pos:end="1413:71"><name pos:start="1413:13" pos:end="1413:21">gen_jumpi</name><argument_list pos:start="1413:22" pos:end="1413:71">(<argument pos:start="1413:23" pos:end="1413:24"><expr pos:start="1413:23" pos:end="1413:24"><name pos:start="1413:23" pos:end="1413:24">dc</name></expr></argument>, <argument pos:start="1413:27" pos:end="1413:67"><expr pos:start="1413:27" pos:end="1413:67"><operator pos:start="1413:27" pos:end="1413:27">(</operator><name pos:start="1413:28" pos:end="1413:33"><name pos:start="1413:28" pos:end="1413:29">dc</name><operator pos:start="1413:30" pos:end="1413:31">-&gt;</operator><name pos:start="1413:32" pos:end="1413:33">pc</name></name> <operator pos:start="1413:35" pos:end="1413:35">&amp;</operator> <operator pos:start="1413:37" pos:end="1413:37">~</operator><literal type="number" pos:start="1413:38" pos:end="1413:38">3</literal><operator pos:start="1413:39" pos:end="1413:39">)</operator> <operator pos:start="1413:41" pos:end="1413:41">+</operator> <operator pos:start="1413:43" pos:end="1413:43">(</operator><name pos:start="1413:44" pos:end="1413:57">CALL_OFFSET_SE</name> <operator pos:start="1413:59" pos:end="1413:60">&lt;&lt;</operator> <literal type="number" pos:start="1413:62" pos:end="1413:62">2</literal><operator pos:start="1413:63" pos:end="1413:63">)</operator> <operator pos:start="1413:65" pos:end="1413:65">+</operator> <literal type="number" pos:start="1413:67" pos:end="1413:67">4</literal></expr></argument>, <argument pos:start="1413:70" pos:end="1413:70"><expr pos:start="1413:70" pos:end="1413:70"><literal type="number" pos:start="1413:70" pos:end="1413:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1415:13" pos:end="1415:18">break;</break>



        <case pos:start="1419:9" pos:end="1419:15">case <expr pos:start="1419:14" pos:end="1419:14"><literal type="number" pos:start="1419:14" pos:end="1419:14">1</literal></expr>:</case> <comment type="block" pos:start="1419:17" pos:end="1419:26">/*CALL4w*/</comment>

        <case pos:start="1421:9" pos:end="1421:15">case <expr pos:start="1421:14" pos:end="1421:14"><literal type="number" pos:start="1421:14" pos:end="1421:14">2</literal></expr>:</case> <comment type="block" pos:start="1421:17" pos:end="1421:26">/*CALL8w*/</comment>

        <case pos:start="1423:9" pos:end="1423:15">case <expr pos:start="1423:14" pos:end="1423:14"><literal type="number" pos:start="1423:14" pos:end="1423:14">3</literal></expr>:</case> <comment type="block" pos:start="1423:17" pos:end="1423:27">/*CALL12w*/</comment>

            <expr_stmt pos:start="1425:13" pos:end="1425:56"><expr pos:start="1425:13" pos:end="1425:55"><call pos:start="1425:13" pos:end="1425:55"><name pos:start="1425:13" pos:end="1425:22">HAS_OPTION</name><argument_list pos:start="1425:23" pos:end="1425:55">(<argument pos:start="1425:24" pos:end="1425:54"><expr pos:start="1425:24" pos:end="1425:54"><name pos:start="1425:24" pos:end="1425:54">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1427:13" pos:end="1427:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="1431:9" pos:end="1431:14">break;</break>



    <case pos:start="1435:5" pos:end="1435:11">case <expr pos:start="1435:10" pos:end="1435:10"><literal type="number" pos:start="1435:10" pos:end="1435:10">6</literal></expr>:</case> <comment type="block" pos:start="1435:13" pos:end="1435:18">/*SI*/</comment>

        <switch pos:start="1437:9" pos:end="1581:9">switch <condition pos:start="1437:16" pos:end="1437:23">(<expr pos:start="1437:17" pos:end="1437:22"><name pos:start="1437:17" pos:end="1437:22">CALL_N</name></expr>)</condition> <block pos:start="1437:25" pos:end="1581:9">{<block_content pos:start="1439:9" pos:end="1577:18">

        <case pos:start="1439:9" pos:end="1439:15">case <expr pos:start="1439:14" pos:end="1439:14"><literal type="number" pos:start="1439:14" pos:end="1439:14">0</literal></expr>:</case> <comment type="block" pos:start="1439:17" pos:end="1439:21">/*J*/</comment>

            <expr_stmt pos:start="1441:13" pos:end="1441:58"><expr pos:start="1441:13" pos:end="1441:57"><call pos:start="1441:13" pos:end="1441:57"><name pos:start="1441:13" pos:end="1441:21">gen_jumpi</name><argument_list pos:start="1441:22" pos:end="1441:57">(<argument pos:start="1441:23" pos:end="1441:24"><expr pos:start="1441:23" pos:end="1441:24"><name pos:start="1441:23" pos:end="1441:24">dc</name></expr></argument>, <argument pos:start="1441:27" pos:end="1441:53"><expr pos:start="1441:27" pos:end="1441:53"><name pos:start="1441:27" pos:end="1441:32"><name pos:start="1441:27" pos:end="1441:28">dc</name><operator pos:start="1441:29" pos:end="1441:30">-&gt;</operator><name pos:start="1441:31" pos:end="1441:32">pc</name></name> <operator pos:start="1441:34" pos:end="1441:34">+</operator> <literal type="number" pos:start="1441:36" pos:end="1441:38">4</literal> <operator pos:start="1441:38" pos:end="1441:38">+</operator> <name pos:start="1441:40" pos:end="1441:53">CALL_OFFSET_SE</name></expr></argument>, <argument pos:start="1441:56" pos:end="1441:56"><expr pos:start="1441:56" pos:end="1441:56"><literal type="number" pos:start="1441:56" pos:end="1441:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1443:13" pos:end="1443:18">break;</break>



        <case pos:start="1447:9" pos:end="1447:15">case <expr pos:start="1447:14" pos:end="1447:14"><literal type="number" pos:start="1447:14" pos:end="1447:14">1</literal></expr>:</case> <comment type="block" pos:start="1447:17" pos:end="1447:22">/*BZ*/</comment>

            <block pos:start="1449:13" pos:end="1469:13">{<block_content pos:start="1451:17" pos:end="1467:44">

                <decl_stmt pos:start="1451:17" pos:end="1461:18"><decl pos:start="1451:17" pos:end="1461:17"><type pos:start="1451:17" pos:end="1451:36"><specifier pos:start="1451:17" pos:end="1451:22">static</specifier> <specifier pos:start="1451:24" pos:end="1451:28">const</specifier> <name pos:start="1451:30" pos:end="1451:36">TCGCond</name></type> <name pos:start="1451:38" pos:end="1451:43"><name pos:start="1451:38" pos:end="1451:41">cond</name><index pos:start="1451:42" pos:end="1451:43">[]</index></name> <init pos:start="1451:45" pos:end="1461:17">= <expr pos:start="1451:47" pos:end="1461:17"><block pos:start="1451:47" pos:end="1461:17">{

                    <expr pos:start="1453:21" pos:end="1453:31"><name pos:start="1453:21" pos:end="1453:31">TCG_COND_EQ</name></expr>, <comment type="block" pos:start="1453:34" pos:end="1453:41">/*BEQZ*/</comment>

                    <expr pos:start="1455:21" pos:end="1455:31"><name pos:start="1455:21" pos:end="1455:31">TCG_COND_NE</name></expr>, <comment type="block" pos:start="1455:34" pos:end="1455:41">/*BNEZ*/</comment>

                    <expr pos:start="1457:21" pos:end="1457:31"><name pos:start="1457:21" pos:end="1457:31">TCG_COND_LT</name></expr>, <comment type="block" pos:start="1457:34" pos:end="1457:41">/*BLTZ*/</comment>

                    <expr pos:start="1459:21" pos:end="1459:31"><name pos:start="1459:21" pos:end="1459:31">TCG_COND_GE</name></expr>, <comment type="block" pos:start="1459:34" pos:end="1459:41">/*BGEZ*/</comment>

                }</block></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="1465:17" pos:end="1467:44"><expr pos:start="1465:17" pos:end="1467:43"><call pos:start="1465:17" pos:end="1467:43"><name pos:start="1465:17" pos:end="1465:27">gen_brcondi</name><argument_list pos:start="1465:28" pos:end="1467:43">(<argument pos:start="1465:29" pos:end="1465:30"><expr pos:start="1465:29" pos:end="1465:30"><name pos:start="1465:29" pos:end="1465:30">dc</name></expr></argument>, <argument pos:start="1465:33" pos:end="1465:49"><expr pos:start="1465:33" pos:end="1465:49"><name pos:start="1465:33" pos:end="1465:49"><name pos:start="1465:33" pos:end="1465:36">cond</name><index pos:start="1465:37" pos:end="1465:49">[<expr pos:start="1465:38" pos:end="1465:48"><name pos:start="1465:38" pos:end="1465:44">BRI12_M</name> <operator pos:start="1465:46" pos:end="1465:46">&amp;</operator> <literal type="number" pos:start="1465:48" pos:end="1465:48">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="1465:52" pos:end="1465:65"><expr pos:start="1465:52" pos:end="1465:65"><name pos:start="1465:52" pos:end="1465:65"><name pos:start="1465:52" pos:end="1465:56">cpu_R</name><index pos:start="1465:57" pos:end="1465:65">[<expr pos:start="1465:58" pos:end="1465:64"><name pos:start="1465:58" pos:end="1465:64">BRI12_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1465:68" pos:end="1465:68"><expr pos:start="1465:68" pos:end="1465:68"><literal type="number" pos:start="1465:68" pos:end="1465:68">0</literal></expr></argument>,

                        <argument pos:start="1467:25" pos:end="1467:42"><expr pos:start="1467:25" pos:end="1467:42"><literal type="number" pos:start="1467:25" pos:end="1467:27">4</literal> <operator pos:start="1467:27" pos:end="1467:27">+</operator> <name pos:start="1467:29" pos:end="1467:42">BRI12_IMM12_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="1471:13" pos:end="1471:18">break;</break>



        <case pos:start="1475:9" pos:end="1475:15">case <expr pos:start="1475:14" pos:end="1475:14"><literal type="number" pos:start="1475:14" pos:end="1475:14">2</literal></expr>:</case> <comment type="block" pos:start="1475:17" pos:end="1475:23">/*BI0*/</comment>

            <block pos:start="1477:13" pos:end="1497:13">{<block_content pos:start="1479:17" pos:end="1495:74">

                <decl_stmt pos:start="1479:17" pos:end="1489:18"><decl pos:start="1479:17" pos:end="1489:17"><type pos:start="1479:17" pos:end="1479:36"><specifier pos:start="1479:17" pos:end="1479:22">static</specifier> <specifier pos:start="1479:24" pos:end="1479:28">const</specifier> <name pos:start="1479:30" pos:end="1479:36">TCGCond</name></type> <name pos:start="1479:38" pos:end="1479:43"><name pos:start="1479:38" pos:end="1479:41">cond</name><index pos:start="1479:42" pos:end="1479:43">[]</index></name> <init pos:start="1479:45" pos:end="1489:17">= <expr pos:start="1479:47" pos:end="1489:17"><block pos:start="1479:47" pos:end="1489:17">{

                    <expr pos:start="1481:21" pos:end="1481:31"><name pos:start="1481:21" pos:end="1481:31">TCG_COND_EQ</name></expr>, <comment type="block" pos:start="1481:34" pos:end="1481:41">/*BEQI*/</comment>

                    <expr pos:start="1483:21" pos:end="1483:31"><name pos:start="1483:21" pos:end="1483:31">TCG_COND_NE</name></expr>, <comment type="block" pos:start="1483:34" pos:end="1483:41">/*BNEI*/</comment>

                    <expr pos:start="1485:21" pos:end="1485:31"><name pos:start="1485:21" pos:end="1485:31">TCG_COND_LT</name></expr>, <comment type="block" pos:start="1485:34" pos:end="1485:41">/*BLTI*/</comment>

                    <expr pos:start="1487:21" pos:end="1487:31"><name pos:start="1487:21" pos:end="1487:31">TCG_COND_GE</name></expr>, <comment type="block" pos:start="1487:34" pos:end="1487:41">/*BGEI*/</comment>

                }</block></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="1493:17" pos:end="1495:74"><expr pos:start="1493:17" pos:end="1495:73"><call pos:start="1493:17" pos:end="1495:73"><name pos:start="1493:17" pos:end="1493:27">gen_brcondi</name><argument_list pos:start="1493:28" pos:end="1495:73">(<argument pos:start="1493:29" pos:end="1493:30"><expr pos:start="1493:29" pos:end="1493:30"><name pos:start="1493:29" pos:end="1493:30">dc</name></expr></argument>, <argument pos:start="1493:33" pos:end="1493:48"><expr pos:start="1493:33" pos:end="1493:48"><name pos:start="1493:33" pos:end="1493:48"><name pos:start="1493:33" pos:end="1493:36">cond</name><index pos:start="1493:37" pos:end="1493:48">[<expr pos:start="1493:38" pos:end="1493:47"><name pos:start="1493:38" pos:end="1493:43">BRI8_M</name> <operator pos:start="1493:45" pos:end="1493:45">&amp;</operator> <literal type="number" pos:start="1493:47" pos:end="1493:47">3</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="1495:25" pos:end="1495:37"><expr pos:start="1495:25" pos:end="1495:37"><name pos:start="1495:25" pos:end="1495:37"><name pos:start="1495:25" pos:end="1495:29">cpu_R</name><index pos:start="1495:30" pos:end="1495:37">[<expr pos:start="1495:31" pos:end="1495:36"><name pos:start="1495:31" pos:end="1495:36">BRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1495:40" pos:end="1495:54"><expr pos:start="1495:40" pos:end="1495:54"><name pos:start="1495:40" pos:end="1495:54"><name pos:start="1495:40" pos:end="1495:46">B4CONST</name><index pos:start="1495:47" pos:end="1495:54">[<expr pos:start="1495:48" pos:end="1495:53"><name pos:start="1495:48" pos:end="1495:53">BRI8_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1495:57" pos:end="1495:72"><expr pos:start="1495:57" pos:end="1495:72"><literal type="number" pos:start="1495:57" pos:end="1495:59">4</literal> <operator pos:start="1495:59" pos:end="1495:59">+</operator> <name pos:start="1495:61" pos:end="1495:72">BRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="1499:13" pos:end="1499:18">break;</break>



        <case pos:start="1503:9" pos:end="1503:15">case <expr pos:start="1503:14" pos:end="1503:14"><literal type="number" pos:start="1503:14" pos:end="1503:14">3</literal></expr>:</case> <comment type="block" pos:start="1503:17" pos:end="1503:23">/*BI1*/</comment>

            <switch pos:start="1505:13" pos:end="1575:13">switch <condition pos:start="1505:20" pos:end="1505:27">(<expr pos:start="1505:21" pos:end="1505:26"><name pos:start="1505:21" pos:end="1505:26">BRI8_M</name></expr>)</condition> <block pos:start="1505:29" pos:end="1575:13">{<block_content pos:start="1507:13" pos:end="1573:22">

            <case pos:start="1507:13" pos:end="1507:19">case <expr pos:start="1507:18" pos:end="1507:18"><literal type="number" pos:start="1507:18" pos:end="1507:18">0</literal></expr>:</case> <comment type="block" pos:start="1507:21" pos:end="1507:30">/*ENTRYw*/</comment>

                <expr_stmt pos:start="1509:17" pos:end="1509:60"><expr pos:start="1509:17" pos:end="1509:59"><call pos:start="1509:17" pos:end="1509:59"><name pos:start="1509:17" pos:end="1509:26">HAS_OPTION</name><argument_list pos:start="1509:27" pos:end="1509:59">(<argument pos:start="1509:28" pos:end="1509:58"><expr pos:start="1509:28" pos:end="1509:58"><name pos:start="1509:28" pos:end="1509:58">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1511:17" pos:end="1511:22">break;</break>



            <case pos:start="1515:13" pos:end="1515:19">case <expr pos:start="1515:18" pos:end="1515:18"><literal type="number" pos:start="1515:18" pos:end="1515:18">1</literal></expr>:</case> <comment type="block" pos:start="1515:21" pos:end="1515:26">/*B1*/</comment>

                <switch pos:start="1517:17" pos:end="1559:17">switch <condition pos:start="1517:24" pos:end="1517:31">(<expr pos:start="1517:25" pos:end="1517:30"><name pos:start="1517:25" pos:end="1517:30">BRI8_R</name></expr>)</condition> <block pos:start="1517:33" pos:end="1559:17">{<block_content pos:start="1519:17" pos:end="1555:26">

                <case pos:start="1519:17" pos:end="1519:23">case <expr pos:start="1519:22" pos:end="1519:22"><literal type="number" pos:start="1519:22" pos:end="1519:22">0</literal></expr>:</case> <comment type="block" pos:start="1519:25" pos:end="1519:31">/*BFp*/</comment>

                    <expr_stmt pos:start="1521:21" pos:end="1521:54"><expr pos:start="1521:21" pos:end="1521:53"><call pos:start="1521:21" pos:end="1521:53"><name pos:start="1521:21" pos:end="1521:30">HAS_OPTION</name><argument_list pos:start="1521:31" pos:end="1521:53">(<argument pos:start="1521:32" pos:end="1521:52"><expr pos:start="1521:32" pos:end="1521:52"><name pos:start="1521:32" pos:end="1521:52">XTENSA_OPTION_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1523:21" pos:end="1523:26">break;</break>



                <case pos:start="1527:17" pos:end="1527:23">case <expr pos:start="1527:22" pos:end="1527:22"><literal type="number" pos:start="1527:22" pos:end="1527:22">1</literal></expr>:</case> <comment type="block" pos:start="1527:25" pos:end="1527:31">/*BTp*/</comment>

                    <expr_stmt pos:start="1529:21" pos:end="1529:54"><expr pos:start="1529:21" pos:end="1529:53"><call pos:start="1529:21" pos:end="1529:53"><name pos:start="1529:21" pos:end="1529:30">HAS_OPTION</name><argument_list pos:start="1529:31" pos:end="1529:53">(<argument pos:start="1529:32" pos:end="1529:52"><expr pos:start="1529:32" pos:end="1529:52"><name pos:start="1529:32" pos:end="1529:52">XTENSA_OPTION_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1531:21" pos:end="1531:26">break;</break>



                <case pos:start="1535:17" pos:end="1535:23">case <expr pos:start="1535:22" pos:end="1535:22"><literal type="number" pos:start="1535:22" pos:end="1535:22">8</literal></expr>:</case> <comment type="block" pos:start="1535:25" pos:end="1535:32">/*LOOP*/</comment>

                    <break pos:start="1537:21" pos:end="1537:26">break;</break>



                <case pos:start="1541:17" pos:end="1541:23">case <expr pos:start="1541:22" pos:end="1541:22"><literal type="number" pos:start="1541:22" pos:end="1541:22">9</literal></expr>:</case> <comment type="block" pos:start="1541:25" pos:end="1541:35">/*LOOPNEZ*/</comment>

                    <break pos:start="1543:21" pos:end="1543:26">break;</break>



                <case pos:start="1547:17" pos:end="1547:24">case <expr pos:start="1547:22" pos:end="1547:23"><literal type="number" pos:start="1547:22" pos:end="1547:23">10</literal></expr>:</case> <comment type="block" pos:start="1547:26" pos:end="1547:36">/*LOOPGTZ*/</comment>

                    <break pos:start="1549:21" pos:end="1549:26">break;</break>



                <default pos:start="1553:17" pos:end="1553:24">default:</default> <comment type="block" pos:start="1553:26" pos:end="1553:37">/*reserved*/</comment>

                    <break pos:start="1555:21" pos:end="1555:26">break;</break>



                </block_content>}</block></switch>

                <break pos:start="1561:17" pos:end="1561:22">break;</break>



            <case pos:start="1565:13" pos:end="1565:19">case <expr pos:start="1565:18" pos:end="1565:18"><literal type="number" pos:start="1565:18" pos:end="1565:18">2</literal></expr>:</case> <comment type="block" pos:start="1565:21" pos:end="1565:29">/*BLTUI*/</comment>

            <case pos:start="1567:13" pos:end="1567:19">case <expr pos:start="1567:18" pos:end="1567:18"><literal type="number" pos:start="1567:18" pos:end="1567:18">3</literal></expr>:</case> <comment type="block" pos:start="1567:21" pos:end="1567:29">/*BGEUI*/</comment>

                <expr_stmt pos:start="1569:17" pos:end="1571:75"><expr pos:start="1569:17" pos:end="1571:74"><call pos:start="1569:17" pos:end="1571:74"><name pos:start="1569:17" pos:end="1569:27">gen_brcondi</name><argument_list pos:start="1569:28" pos:end="1571:74">(<argument pos:start="1569:29" pos:end="1569:30"><expr pos:start="1569:29" pos:end="1569:30"><name pos:start="1569:29" pos:end="1569:30">dc</name></expr></argument>, <argument pos:start="1569:33" pos:end="1569:73"><expr pos:start="1569:33" pos:end="1569:73"><ternary pos:start="1569:33" pos:end="1569:73"><condition pos:start="1569:33" pos:end="1569:45"><expr pos:start="1569:33" pos:end="1569:43"><name pos:start="1569:33" pos:end="1569:38">BRI8_M</name> <operator pos:start="1569:40" pos:end="1569:41">==</operator> <literal type="number" pos:start="1569:43" pos:end="1569:43">2</literal></expr> ?</condition><then pos:start="1569:47" pos:end="1569:58"> <expr pos:start="1569:47" pos:end="1569:58"><name pos:start="1569:47" pos:end="1569:58">TCG_COND_LTU</name></expr> </then><else pos:start="1569:60" pos:end="1569:73">: <expr pos:start="1569:62" pos:end="1569:73"><name pos:start="1569:62" pos:end="1569:73">TCG_COND_GEU</name></expr></else></ternary></expr></argument>,

                        <argument pos:start="1571:25" pos:end="1571:37"><expr pos:start="1571:25" pos:end="1571:37"><name pos:start="1571:25" pos:end="1571:37"><name pos:start="1571:25" pos:end="1571:29">cpu_R</name><index pos:start="1571:30" pos:end="1571:37">[<expr pos:start="1571:31" pos:end="1571:36"><name pos:start="1571:31" pos:end="1571:36">BRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1571:40" pos:end="1571:55"><expr pos:start="1571:40" pos:end="1571:55"><name pos:start="1571:40" pos:end="1571:55"><name pos:start="1571:40" pos:end="1571:47">B4CONSTU</name><index pos:start="1571:48" pos:end="1571:55">[<expr pos:start="1571:49" pos:end="1571:54"><name pos:start="1571:49" pos:end="1571:54">BRI8_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1571:58" pos:end="1571:73"><expr pos:start="1571:58" pos:end="1571:73"><literal type="number" pos:start="1571:58" pos:end="1571:60">4</literal> <operator pos:start="1571:60" pos:end="1571:60">+</operator> <name pos:start="1571:62" pos:end="1571:73">BRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1573:17" pos:end="1573:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="1577:13" pos:end="1577:18">break;</break>



        </block_content>}</block></switch>

        <break pos:start="1583:9" pos:end="1583:14">break;</break>



    <case pos:start="1587:5" pos:end="1587:11">case <expr pos:start="1587:10" pos:end="1587:10"><literal type="number" pos:start="1587:10" pos:end="1587:10">7</literal></expr>:</case> <comment type="block" pos:start="1587:13" pos:end="1587:17">/*B*/</comment>

        <block pos:start="1589:9" pos:end="1719:9">{<block_content pos:start="1591:13" pos:end="1717:13">

            <decl_stmt pos:start="1591:13" pos:end="1591:69"><decl pos:start="1591:13" pos:end="1591:68"><type pos:start="1591:13" pos:end="1591:19"><name pos:start="1591:13" pos:end="1591:19">TCGCond</name></type> <name pos:start="1591:21" pos:end="1591:25">eq_ne</name> <init pos:start="1591:27" pos:end="1591:68">= <expr pos:start="1591:29" pos:end="1591:68"><ternary pos:start="1591:29" pos:end="1591:68"><condition pos:start="1591:29" pos:end="1591:42"><expr pos:start="1591:29" pos:end="1591:40"><operator pos:start="1591:29" pos:end="1591:29">(</operator><name pos:start="1591:30" pos:end="1591:35">RRI8_R</name> <operator pos:start="1591:37" pos:end="1591:37">&amp;</operator> <literal type="number" pos:start="1591:39" pos:end="1591:39">8</literal><operator pos:start="1591:40" pos:end="1591:40">)</operator></expr> ?</condition><then pos:start="1591:44" pos:end="1591:54"> <expr pos:start="1591:44" pos:end="1591:54"><name pos:start="1591:44" pos:end="1591:54">TCG_COND_NE</name></expr> </then><else pos:start="1591:56" pos:end="1591:68">: <expr pos:start="1591:58" pos:end="1591:68"><name pos:start="1591:58" pos:end="1591:68">TCG_COND_EQ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



            <switch pos:start="1595:13" pos:end="1717:13">switch <condition pos:start="1595:20" pos:end="1595:31">(<expr pos:start="1595:21" pos:end="1595:30"><name pos:start="1595:21" pos:end="1595:26">RRI8_R</name> <operator pos:start="1595:28" pos:end="1595:28">&amp;</operator> <literal type="number" pos:start="1595:30" pos:end="1595:30">7</literal></expr>)</condition> <block pos:start="1595:33" pos:end="1717:13">{<block_content pos:start="1597:13" pos:end="1713:22">

            <case pos:start="1597:13" pos:end="1597:19">case <expr pos:start="1597:18" pos:end="1597:18"><literal type="number" pos:start="1597:18" pos:end="1597:18">0</literal></expr>:</case> <comment type="block" pos:start="1597:21" pos:end="1597:29">/*BNONE*/</comment> <comment type="block" pos:start="1597:31" pos:end="1597:38">/*BANY*/</comment>

                <block pos:start="1599:17" pos:end="1609:17">{<block_content pos:start="1601:21" pos:end="1607:39">

                    <decl_stmt pos:start="1601:21" pos:end="1601:54"><decl pos:start="1601:21" pos:end="1601:53"><type pos:start="1601:21" pos:end="1601:28"><name pos:start="1601:21" pos:end="1601:28">TCGv_i32</name></type> <name pos:start="1601:30" pos:end="1601:32">tmp</name> <init pos:start="1601:34" pos:end="1601:53">= <expr pos:start="1601:36" pos:end="1601:53"><call pos:start="1601:36" pos:end="1601:53"><name pos:start="1601:36" pos:end="1601:51">tcg_temp_new_i32</name><argument_list pos:start="1601:52" pos:end="1601:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1603:21" pos:end="1603:71"><expr pos:start="1603:21" pos:end="1603:70"><call pos:start="1603:21" pos:end="1603:70"><name pos:start="1603:21" pos:end="1603:35">tcg_gen_and_i32</name><argument_list pos:start="1603:36" pos:end="1603:70">(<argument pos:start="1603:37" pos:end="1603:39"><expr pos:start="1603:37" pos:end="1603:39"><name pos:start="1603:37" pos:end="1603:39">tmp</name></expr></argument>, <argument pos:start="1603:42" pos:end="1603:54"><expr pos:start="1603:42" pos:end="1603:54"><name pos:start="1603:42" pos:end="1603:54"><name pos:start="1603:42" pos:end="1603:46">cpu_R</name><index pos:start="1603:47" pos:end="1603:54">[<expr pos:start="1603:48" pos:end="1603:53"><name pos:start="1603:48" pos:end="1603:53">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1603:57" pos:end="1603:69"><expr pos:start="1603:57" pos:end="1603:69"><name pos:start="1603:57" pos:end="1603:69"><name pos:start="1603:57" pos:end="1603:61">cpu_R</name><index pos:start="1603:62" pos:end="1603:69">[<expr pos:start="1603:63" pos:end="1603:68"><name pos:start="1603:63" pos:end="1603:68">RRI8_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1605:21" pos:end="1605:69"><expr pos:start="1605:21" pos:end="1605:68"><call pos:start="1605:21" pos:end="1605:68"><name pos:start="1605:21" pos:end="1605:31">gen_brcondi</name><argument_list pos:start="1605:32" pos:end="1605:68">(<argument pos:start="1605:33" pos:end="1605:34"><expr pos:start="1605:33" pos:end="1605:34"><name pos:start="1605:33" pos:end="1605:34">dc</name></expr></argument>, <argument pos:start="1605:37" pos:end="1605:41"><expr pos:start="1605:37" pos:end="1605:41"><name pos:start="1605:37" pos:end="1605:41">eq_ne</name></expr></argument>, <argument pos:start="1605:44" pos:end="1605:46"><expr pos:start="1605:44" pos:end="1605:46"><name pos:start="1605:44" pos:end="1605:46">tmp</name></expr></argument>, <argument pos:start="1605:49" pos:end="1605:49"><expr pos:start="1605:49" pos:end="1605:49"><literal type="number" pos:start="1605:49" pos:end="1605:49">0</literal></expr></argument>, <argument pos:start="1605:52" pos:end="1605:67"><expr pos:start="1605:52" pos:end="1605:67"><literal type="number" pos:start="1605:52" pos:end="1605:54">4</literal> <operator pos:start="1605:54" pos:end="1605:54">+</operator> <name pos:start="1605:56" pos:end="1605:67">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1607:21" pos:end="1607:39"><expr pos:start="1607:21" pos:end="1607:38"><call pos:start="1607:21" pos:end="1607:38"><name pos:start="1607:21" pos:end="1607:33">tcg_temp_free</name><argument_list pos:start="1607:34" pos:end="1607:38">(<argument pos:start="1607:35" pos:end="1607:37"><expr pos:start="1607:35" pos:end="1607:37"><name pos:start="1607:35" pos:end="1607:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1611:17" pos:end="1611:22">break;</break>



            <case pos:start="1615:13" pos:end="1615:19">case <expr pos:start="1615:18" pos:end="1615:18"><literal type="number" pos:start="1615:18" pos:end="1615:18">1</literal></expr>:</case> <comment type="block" pos:start="1615:21" pos:end="1615:27">/*BEQ*/</comment> <comment type="block" pos:start="1615:29" pos:end="1615:35">/*BNE*/</comment>

            <case pos:start="1617:13" pos:end="1617:19">case <expr pos:start="1617:18" pos:end="1617:18"><literal type="number" pos:start="1617:18" pos:end="1617:18">2</literal></expr>:</case> <comment type="block" pos:start="1617:21" pos:end="1617:27">/*BLT*/</comment> <comment type="block" pos:start="1617:29" pos:end="1617:35">/*BGE*/</comment>

            <case pos:start="1619:13" pos:end="1619:19">case <expr pos:start="1619:18" pos:end="1619:18"><literal type="number" pos:start="1619:18" pos:end="1619:18">3</literal></expr>:</case> <comment type="block" pos:start="1619:21" pos:end="1619:28">/*BLTU*/</comment> <comment type="block" pos:start="1619:30" pos:end="1619:37">/*BGEU*/</comment>

                <block pos:start="1621:17" pos:end="1643:17">{<block_content pos:start="1623:21" pos:end="1641:46">

                    <decl_stmt pos:start="1623:21" pos:end="1637:22"><decl pos:start="1623:21" pos:end="1637:21"><type pos:start="1623:21" pos:end="1623:40"><specifier pos:start="1623:21" pos:end="1623:26">static</specifier> <specifier pos:start="1623:28" pos:end="1623:32">const</specifier> <name pos:start="1623:34" pos:end="1623:40">TCGCond</name></type> <name pos:start="1623:42" pos:end="1623:47"><name pos:start="1623:42" pos:end="1623:45">cond</name><index pos:start="1623:46" pos:end="1623:47">[]</index></name> <init pos:start="1623:49" pos:end="1637:21">= <expr pos:start="1623:51" pos:end="1637:21"><block pos:start="1623:51" pos:end="1637:21">{

                        <expr pos:start="1625:25" pos:end="1625:41"><index pos:start="1625:25" pos:end="1625:27">[<expr pos:start="1625:26" pos:end="1625:26"><literal type="number" pos:start="1625:26" pos:end="1625:26">1</literal></expr>]</index> <operator pos:start="1625:29" pos:end="1625:29">=</operator> <name pos:start="1625:31" pos:end="1625:41">TCG_COND_EQ</name></expr>,

                        <expr pos:start="1627:25" pos:end="1627:41"><index pos:start="1627:25" pos:end="1627:27">[<expr pos:start="1627:26" pos:end="1627:26"><literal type="number" pos:start="1627:26" pos:end="1627:26">2</literal></expr>]</index> <operator pos:start="1627:29" pos:end="1627:29">=</operator> <name pos:start="1627:31" pos:end="1627:41">TCG_COND_LT</name></expr>,

                        <expr pos:start="1629:25" pos:end="1629:42"><index pos:start="1629:25" pos:end="1629:27">[<expr pos:start="1629:26" pos:end="1629:26"><literal type="number" pos:start="1629:26" pos:end="1629:26">3</literal></expr>]</index> <operator pos:start="1629:29" pos:end="1629:29">=</operator> <name pos:start="1629:31" pos:end="1629:42">TCG_COND_LTU</name></expr>,

                        <expr pos:start="1631:25" pos:end="1631:41"><index pos:start="1631:25" pos:end="1631:27">[<expr pos:start="1631:26" pos:end="1631:26"><literal type="number" pos:start="1631:26" pos:end="1631:26">9</literal></expr>]</index> <operator pos:start="1631:29" pos:end="1631:29">=</operator> <name pos:start="1631:31" pos:end="1631:41">TCG_COND_NE</name></expr>,

                        <expr pos:start="1633:25" pos:end="1633:42"><index pos:start="1633:25" pos:end="1633:28">[<expr pos:start="1633:26" pos:end="1633:27"><literal type="number" pos:start="1633:26" pos:end="1633:27">10</literal></expr>]</index> <operator pos:start="1633:30" pos:end="1633:30">=</operator> <name pos:start="1633:32" pos:end="1633:42">TCG_COND_GE</name></expr>,

                        <expr pos:start="1635:25" pos:end="1635:43"><index pos:start="1635:25" pos:end="1635:28">[<expr pos:start="1635:26" pos:end="1635:27"><literal type="number" pos:start="1635:26" pos:end="1635:27">11</literal></expr>]</index> <operator pos:start="1635:30" pos:end="1635:30">=</operator> <name pos:start="1635:32" pos:end="1635:43">TCG_COND_GEU</name></expr>,

                    }</block></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1639:21" pos:end="1641:46"><expr pos:start="1639:21" pos:end="1641:45"><call pos:start="1639:21" pos:end="1641:45"><name pos:start="1639:21" pos:end="1639:30">gen_brcond</name><argument_list pos:start="1639:31" pos:end="1641:45">(<argument pos:start="1639:32" pos:end="1639:33"><expr pos:start="1639:32" pos:end="1639:33"><name pos:start="1639:32" pos:end="1639:33">dc</name></expr></argument>, <argument pos:start="1639:36" pos:end="1639:47"><expr pos:start="1639:36" pos:end="1639:47"><name pos:start="1639:36" pos:end="1639:47"><name pos:start="1639:36" pos:end="1639:39">cond</name><index pos:start="1639:40" pos:end="1639:47">[<expr pos:start="1639:41" pos:end="1639:46"><name pos:start="1639:41" pos:end="1639:46">RRI8_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1639:50" pos:end="1639:62"><expr pos:start="1639:50" pos:end="1639:62"><name pos:start="1639:50" pos:end="1639:62"><name pos:start="1639:50" pos:end="1639:54">cpu_R</name><index pos:start="1639:55" pos:end="1639:62">[<expr pos:start="1639:56" pos:end="1639:61"><name pos:start="1639:56" pos:end="1639:61">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1639:65" pos:end="1639:77"><expr pos:start="1639:65" pos:end="1639:77"><name pos:start="1639:65" pos:end="1639:77"><name pos:start="1639:65" pos:end="1639:69">cpu_R</name><index pos:start="1639:70" pos:end="1639:77">[<expr pos:start="1639:71" pos:end="1639:76"><name pos:start="1639:71" pos:end="1639:76">RRI8_T</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="1641:29" pos:end="1641:44"><expr pos:start="1641:29" pos:end="1641:44"><literal type="number" pos:start="1641:29" pos:end="1641:31">4</literal> <operator pos:start="1641:31" pos:end="1641:31">+</operator> <name pos:start="1641:33" pos:end="1641:44">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1645:17" pos:end="1645:22">break;</break>



            <case pos:start="1649:13" pos:end="1649:19">case <expr pos:start="1649:18" pos:end="1649:18"><literal type="number" pos:start="1649:18" pos:end="1649:18">4</literal></expr>:</case> <comment type="block" pos:start="1649:21" pos:end="1649:28">/*BALL*/</comment> <comment type="block" pos:start="1649:30" pos:end="1649:38">/*BNALL*/</comment>

                <block pos:start="1651:17" pos:end="1663:17">{<block_content pos:start="1653:21" pos:end="1661:39">

                    <decl_stmt pos:start="1653:21" pos:end="1653:54"><decl pos:start="1653:21" pos:end="1653:53"><type pos:start="1653:21" pos:end="1653:28"><name pos:start="1653:21" pos:end="1653:28">TCGv_i32</name></type> <name pos:start="1653:30" pos:end="1653:32">tmp</name> <init pos:start="1653:34" pos:end="1653:53">= <expr pos:start="1653:36" pos:end="1653:53"><call pos:start="1653:36" pos:end="1653:53"><name pos:start="1653:36" pos:end="1653:51">tcg_temp_new_i32</name><argument_list pos:start="1653:52" pos:end="1653:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1655:21" pos:end="1655:71"><expr pos:start="1655:21" pos:end="1655:70"><call pos:start="1655:21" pos:end="1655:70"><name pos:start="1655:21" pos:end="1655:35">tcg_gen_and_i32</name><argument_list pos:start="1655:36" pos:end="1655:70">(<argument pos:start="1655:37" pos:end="1655:39"><expr pos:start="1655:37" pos:end="1655:39"><name pos:start="1655:37" pos:end="1655:39">tmp</name></expr></argument>, <argument pos:start="1655:42" pos:end="1655:54"><expr pos:start="1655:42" pos:end="1655:54"><name pos:start="1655:42" pos:end="1655:54"><name pos:start="1655:42" pos:end="1655:46">cpu_R</name><index pos:start="1655:47" pos:end="1655:54">[<expr pos:start="1655:48" pos:end="1655:53"><name pos:start="1655:48" pos:end="1655:53">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1655:57" pos:end="1655:69"><expr pos:start="1655:57" pos:end="1655:69"><name pos:start="1655:57" pos:end="1655:69"><name pos:start="1655:57" pos:end="1655:61">cpu_R</name><index pos:start="1655:62" pos:end="1655:69">[<expr pos:start="1655:63" pos:end="1655:68"><name pos:start="1655:63" pos:end="1655:68">RRI8_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1657:21" pos:end="1659:46"><expr pos:start="1657:21" pos:end="1659:45"><call pos:start="1657:21" pos:end="1659:45"><name pos:start="1657:21" pos:end="1657:30">gen_brcond</name><argument_list pos:start="1657:31" pos:end="1659:45">(<argument pos:start="1657:32" pos:end="1657:33"><expr pos:start="1657:32" pos:end="1657:33"><name pos:start="1657:32" pos:end="1657:33">dc</name></expr></argument>, <argument pos:start="1657:36" pos:end="1657:40"><expr pos:start="1657:36" pos:end="1657:40"><name pos:start="1657:36" pos:end="1657:40">eq_ne</name></expr></argument>, <argument pos:start="1657:43" pos:end="1657:45"><expr pos:start="1657:43" pos:end="1657:45"><name pos:start="1657:43" pos:end="1657:45">tmp</name></expr></argument>, <argument pos:start="1657:48" pos:end="1657:60"><expr pos:start="1657:48" pos:end="1657:60"><name pos:start="1657:48" pos:end="1657:60"><name pos:start="1657:48" pos:end="1657:52">cpu_R</name><index pos:start="1657:53" pos:end="1657:60">[<expr pos:start="1657:54" pos:end="1657:59"><name pos:start="1657:54" pos:end="1657:59">RRI8_T</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="1659:29" pos:end="1659:44"><expr pos:start="1659:29" pos:end="1659:44"><literal type="number" pos:start="1659:29" pos:end="1659:31">4</literal> <operator pos:start="1659:31" pos:end="1659:31">+</operator> <name pos:start="1659:33" pos:end="1659:44">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1661:21" pos:end="1661:39"><expr pos:start="1661:21" pos:end="1661:38"><call pos:start="1661:21" pos:end="1661:38"><name pos:start="1661:21" pos:end="1661:33">tcg_temp_free</name><argument_list pos:start="1661:34" pos:end="1661:38">(<argument pos:start="1661:35" pos:end="1661:37"><expr pos:start="1661:35" pos:end="1661:37"><name pos:start="1661:35" pos:end="1661:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1665:17" pos:end="1665:22">break;</break>



            <case pos:start="1669:13" pos:end="1669:19">case <expr pos:start="1669:18" pos:end="1669:18"><literal type="number" pos:start="1669:18" pos:end="1669:18">5</literal></expr>:</case> <comment type="block" pos:start="1669:21" pos:end="1669:27">/*BBC*/</comment> <comment type="block" pos:start="1669:29" pos:end="1669:35">/*BBS*/</comment>

                <block pos:start="1671:17" pos:end="1689:17">{<block_content pos:start="1673:21" pos:end="1687:39">

                    <decl_stmt pos:start="1673:21" pos:end="1673:52"><decl pos:start="1673:21" pos:end="1673:51"><type pos:start="1673:21" pos:end="1673:28"><name pos:start="1673:21" pos:end="1673:28">TCGv_i32</name></type> <name pos:start="1673:30" pos:end="1673:32">bit</name> <init pos:start="1673:34" pos:end="1673:51">= <expr pos:start="1673:36" pos:end="1673:51"><call pos:start="1673:36" pos:end="1673:51"><name pos:start="1673:36" pos:end="1673:48">tcg_const_i32</name><argument_list pos:start="1673:49" pos:end="1673:51">(<argument pos:start="1673:50" pos:end="1673:50"><expr pos:start="1673:50" pos:end="1673:50"><literal type="number" pos:start="1673:50" pos:end="1673:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1675:21" pos:end="1675:54"><decl pos:start="1675:21" pos:end="1675:53"><type pos:start="1675:21" pos:end="1675:28"><name pos:start="1675:21" pos:end="1675:28">TCGv_i32</name></type> <name pos:start="1675:30" pos:end="1675:32">tmp</name> <init pos:start="1675:34" pos:end="1675:53">= <expr pos:start="1675:36" pos:end="1675:53"><call pos:start="1675:36" pos:end="1675:53"><name pos:start="1675:36" pos:end="1675:51">tcg_temp_new_i32</name><argument_list pos:start="1675:52" pos:end="1675:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1677:21" pos:end="1677:63"><expr pos:start="1677:21" pos:end="1677:62"><call pos:start="1677:21" pos:end="1677:62"><name pos:start="1677:21" pos:end="1677:36">tcg_gen_andi_i32</name><argument_list pos:start="1677:37" pos:end="1677:62">(<argument pos:start="1677:38" pos:end="1677:40"><expr pos:start="1677:38" pos:end="1677:40"><name pos:start="1677:38" pos:end="1677:40">tmp</name></expr></argument>, <argument pos:start="1677:43" pos:end="1677:55"><expr pos:start="1677:43" pos:end="1677:55"><name pos:start="1677:43" pos:end="1677:55"><name pos:start="1677:43" pos:end="1677:47">cpu_R</name><index pos:start="1677:48" pos:end="1677:55">[<expr pos:start="1677:49" pos:end="1677:54"><name pos:start="1677:49" pos:end="1677:54">RRI8_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1677:58" pos:end="1677:61"><expr pos:start="1677:58" pos:end="1677:61"><literal type="number" pos:start="1677:58" pos:end="1677:61">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1679:21" pos:end="1679:51"><expr pos:start="1679:21" pos:end="1679:50"><call pos:start="1679:21" pos:end="1679:50"><name pos:start="1679:21" pos:end="1679:35">tcg_gen_shl_i32</name><argument_list pos:start="1679:36" pos:end="1679:50">(<argument pos:start="1679:37" pos:end="1679:39"><expr pos:start="1679:37" pos:end="1679:39"><name pos:start="1679:37" pos:end="1679:39">bit</name></expr></argument>, <argument pos:start="1679:42" pos:end="1679:44"><expr pos:start="1679:42" pos:end="1679:44"><name pos:start="1679:42" pos:end="1679:44">bit</name></expr></argument>, <argument pos:start="1679:47" pos:end="1679:49"><expr pos:start="1679:47" pos:end="1679:49"><name pos:start="1679:47" pos:end="1679:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1681:21" pos:end="1681:61"><expr pos:start="1681:21" pos:end="1681:60"><call pos:start="1681:21" pos:end="1681:60"><name pos:start="1681:21" pos:end="1681:35">tcg_gen_and_i32</name><argument_list pos:start="1681:36" pos:end="1681:60">(<argument pos:start="1681:37" pos:end="1681:39"><expr pos:start="1681:37" pos:end="1681:39"><name pos:start="1681:37" pos:end="1681:39">tmp</name></expr></argument>, <argument pos:start="1681:42" pos:end="1681:54"><expr pos:start="1681:42" pos:end="1681:54"><name pos:start="1681:42" pos:end="1681:54"><name pos:start="1681:42" pos:end="1681:46">cpu_R</name><index pos:start="1681:47" pos:end="1681:54">[<expr pos:start="1681:48" pos:end="1681:53"><name pos:start="1681:48" pos:end="1681:53">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1681:57" pos:end="1681:59"><expr pos:start="1681:57" pos:end="1681:59"><name pos:start="1681:57" pos:end="1681:59">bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1683:21" pos:end="1683:69"><expr pos:start="1683:21" pos:end="1683:68"><call pos:start="1683:21" pos:end="1683:68"><name pos:start="1683:21" pos:end="1683:31">gen_brcondi</name><argument_list pos:start="1683:32" pos:end="1683:68">(<argument pos:start="1683:33" pos:end="1683:34"><expr pos:start="1683:33" pos:end="1683:34"><name pos:start="1683:33" pos:end="1683:34">dc</name></expr></argument>, <argument pos:start="1683:37" pos:end="1683:41"><expr pos:start="1683:37" pos:end="1683:41"><name pos:start="1683:37" pos:end="1683:41">eq_ne</name></expr></argument>, <argument pos:start="1683:44" pos:end="1683:46"><expr pos:start="1683:44" pos:end="1683:46"><name pos:start="1683:44" pos:end="1683:46">tmp</name></expr></argument>, <argument pos:start="1683:49" pos:end="1683:49"><expr pos:start="1683:49" pos:end="1683:49"><literal type="number" pos:start="1683:49" pos:end="1683:49">0</literal></expr></argument>, <argument pos:start="1683:52" pos:end="1683:67"><expr pos:start="1683:52" pos:end="1683:67"><literal type="number" pos:start="1683:52" pos:end="1683:54">4</literal> <operator pos:start="1683:54" pos:end="1683:54">+</operator> <name pos:start="1683:56" pos:end="1683:67">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1685:21" pos:end="1685:39"><expr pos:start="1685:21" pos:end="1685:38"><call pos:start="1685:21" pos:end="1685:38"><name pos:start="1685:21" pos:end="1685:33">tcg_temp_free</name><argument_list pos:start="1685:34" pos:end="1685:38">(<argument pos:start="1685:35" pos:end="1685:37"><expr pos:start="1685:35" pos:end="1685:37"><name pos:start="1685:35" pos:end="1685:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1687:21" pos:end="1687:39"><expr pos:start="1687:21" pos:end="1687:38"><call pos:start="1687:21" pos:end="1687:38"><name pos:start="1687:21" pos:end="1687:33">tcg_temp_free</name><argument_list pos:start="1687:34" pos:end="1687:38">(<argument pos:start="1687:35" pos:end="1687:37"><expr pos:start="1687:35" pos:end="1687:37"><name pos:start="1687:35" pos:end="1687:37">bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1691:17" pos:end="1691:22">break;</break>



            <case pos:start="1695:13" pos:end="1695:19">case <expr pos:start="1695:18" pos:end="1695:18"><literal type="number" pos:start="1695:18" pos:end="1695:18">6</literal></expr>:</case> <comment type="block" pos:start="1695:21" pos:end="1695:28">/*BBCI*/</comment> <comment type="block" pos:start="1695:30" pos:end="1695:37">/*BBSI*/</comment>

            <case pos:start="1697:13" pos:end="1697:19">case <expr pos:start="1697:18" pos:end="1697:18"><literal type="number" pos:start="1697:18" pos:end="1697:18">7</literal></expr>:</case>

                <block pos:start="1699:17" pos:end="1711:17">{<block_content pos:start="1701:21" pos:end="1709:39">

                    <decl_stmt pos:start="1701:21" pos:end="1701:54"><decl pos:start="1701:21" pos:end="1701:53"><type pos:start="1701:21" pos:end="1701:28"><name pos:start="1701:21" pos:end="1701:28">TCGv_i32</name></type> <name pos:start="1701:30" pos:end="1701:32">tmp</name> <init pos:start="1701:34" pos:end="1701:53">= <expr pos:start="1701:36" pos:end="1701:53"><call pos:start="1701:36" pos:end="1701:53"><name pos:start="1701:36" pos:end="1701:51">tcg_temp_new_i32</name><argument_list pos:start="1701:52" pos:end="1701:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1703:21" pos:end="1705:65"><expr pos:start="1703:21" pos:end="1705:64"><call pos:start="1703:21" pos:end="1705:64"><name pos:start="1703:21" pos:end="1703:36">tcg_gen_andi_i32</name><argument_list pos:start="1703:37" pos:end="1705:64">(<argument pos:start="1703:38" pos:end="1703:40"><expr pos:start="1703:38" pos:end="1703:40"><name pos:start="1703:38" pos:end="1703:40">tmp</name></expr></argument>, <argument pos:start="1703:43" pos:end="1703:55"><expr pos:start="1703:43" pos:end="1703:55"><name pos:start="1703:43" pos:end="1703:55"><name pos:start="1703:43" pos:end="1703:47">cpu_R</name><index pos:start="1703:48" pos:end="1703:55">[<expr pos:start="1703:49" pos:end="1703:54"><name pos:start="1703:49" pos:end="1703:54">RRI8_S</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="1705:29" pos:end="1705:63"><expr pos:start="1705:29" pos:end="1705:63"><literal type="number" pos:start="1705:29" pos:end="1705:29">1</literal> <operator pos:start="1705:31" pos:end="1705:32">&lt;&lt;</operator> <operator pos:start="1705:34" pos:end="1705:34">(</operator><operator pos:start="1705:35" pos:end="1705:35">(</operator><operator pos:start="1705:36" pos:end="1705:36">(</operator><name pos:start="1705:37" pos:end="1705:42">RRI8_R</name> <operator pos:start="1705:44" pos:end="1705:44">&amp;</operator> <literal type="number" pos:start="1705:46" pos:end="1705:46">1</literal><operator pos:start="1705:47" pos:end="1705:47">)</operator> <operator pos:start="1705:49" pos:end="1705:50">&lt;&lt;</operator> <literal type="number" pos:start="1705:52" pos:end="1705:52">4</literal><operator pos:start="1705:53" pos:end="1705:53">)</operator> <operator pos:start="1705:55" pos:end="1705:55">|</operator> <name pos:start="1705:57" pos:end="1705:62">RRI8_T</name><operator pos:start="1705:63" pos:end="1705:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1707:21" pos:end="1707:69"><expr pos:start="1707:21" pos:end="1707:68"><call pos:start="1707:21" pos:end="1707:68"><name pos:start="1707:21" pos:end="1707:31">gen_brcondi</name><argument_list pos:start="1707:32" pos:end="1707:68">(<argument pos:start="1707:33" pos:end="1707:34"><expr pos:start="1707:33" pos:end="1707:34"><name pos:start="1707:33" pos:end="1707:34">dc</name></expr></argument>, <argument pos:start="1707:37" pos:end="1707:41"><expr pos:start="1707:37" pos:end="1707:41"><name pos:start="1707:37" pos:end="1707:41">eq_ne</name></expr></argument>, <argument pos:start="1707:44" pos:end="1707:46"><expr pos:start="1707:44" pos:end="1707:46"><name pos:start="1707:44" pos:end="1707:46">tmp</name></expr></argument>, <argument pos:start="1707:49" pos:end="1707:49"><expr pos:start="1707:49" pos:end="1707:49"><literal type="number" pos:start="1707:49" pos:end="1707:49">0</literal></expr></argument>, <argument pos:start="1707:52" pos:end="1707:67"><expr pos:start="1707:52" pos:end="1707:67"><literal type="number" pos:start="1707:52" pos:end="1707:54">4</literal> <operator pos:start="1707:54" pos:end="1707:54">+</operator> <name pos:start="1707:56" pos:end="1707:67">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1709:21" pos:end="1709:39"><expr pos:start="1709:21" pos:end="1709:38"><call pos:start="1709:21" pos:end="1709:38"><name pos:start="1709:21" pos:end="1709:33">tcg_temp_free</name><argument_list pos:start="1709:34" pos:end="1709:38">(<argument pos:start="1709:35" pos:end="1709:37"><expr pos:start="1709:35" pos:end="1709:37"><name pos:start="1709:35" pos:end="1709:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1713:17" pos:end="1713:22">break;</break>



            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="1721:9" pos:end="1736:0">break;</break>



<cpp:define pos:start="1725:1" pos:end="1735:19">#<cpp:directive pos:start="1725:2" pos:end="1725:7">define</cpp:directive> <cpp:macro pos:start="1725:9" pos:end="1725:35"><name pos:start="1725:9" pos:end="1725:29">gen_narrow_load_store</name><parameter_list pos:start="1725:30" pos:end="1725:35">(<parameter pos:start="1725:31" pos:end="1725:34"><type pos:start="1725:31" pos:end="1725:34"><name pos:start="1725:31" pos:end="1725:34">type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="1725:37" pos:end="1735:19">do { \

            TCGv_i32 addr = tcg_temp_new_i32(); \

            tcg_gen_addi_i32(addr, cpu_R[RRRN_S], RRRN_R &lt;&lt; 2); \

            tcg_gen_qemu_##type(cpu_R[RRRN_T], addr, 0); \

            tcg_temp_free(addr); \

        } while (0)</cpp:value></cpp:define>



    <case pos:start="1739:5" pos:end="1739:11">case <expr pos:start="1739:10" pos:end="1739:10"><literal type="number" pos:start="1739:10" pos:end="1739:10">8</literal></expr>:</case> <comment type="block" pos:start="1739:13" pos:end="1739:23">/*L32I.Nn*/</comment>

        <expr_stmt pos:start="1741:9" pos:end="1741:37"><expr pos:start="1741:9" pos:end="1741:36"><call pos:start="1741:9" pos:end="1741:36"><name pos:start="1741:9" pos:end="1741:29">gen_narrow_load_store</name><argument_list pos:start="1741:30" pos:end="1741:36">(<argument pos:start="1741:31" pos:end="1741:35"><expr pos:start="1741:31" pos:end="1741:35"><name pos:start="1741:31" pos:end="1741:35">ld32u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1743:9" pos:end="1743:14">break;</break>



    <case pos:start="1747:5" pos:end="1747:11">case <expr pos:start="1747:10" pos:end="1747:10"><literal type="number" pos:start="1747:10" pos:end="1747:10">9</literal></expr>:</case> <comment type="block" pos:start="1747:13" pos:end="1747:23">/*S32I.Nn*/</comment>

        <expr_stmt pos:start="1749:9" pos:end="1749:36"><expr pos:start="1749:9" pos:end="1749:35"><call pos:start="1749:9" pos:end="1749:35"><name pos:start="1749:9" pos:end="1749:29">gen_narrow_load_store</name><argument_list pos:start="1749:30" pos:end="1749:35">(<argument pos:start="1749:31" pos:end="1749:34"><expr pos:start="1749:31" pos:end="1749:34"><name pos:start="1749:31" pos:end="1749:34">st32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1751:9" pos:end="1754:0">break;</break>

<cpp:undef pos:start="1753:1" pos:end="1753:28">#<cpp:directive pos:start="1753:2" pos:end="1753:6">undef</cpp:directive> <name pos:start="1753:8" pos:end="1753:28">gen_narrow_load_store</name></cpp:undef>



    <case pos:start="1757:5" pos:end="1757:12">case <expr pos:start="1757:10" pos:end="1757:11"><literal type="number" pos:start="1757:10" pos:end="1757:11">10</literal></expr>:</case> <comment type="block" pos:start="1757:14" pos:end="1757:23">/*ADD.Nn*/</comment>

        <expr_stmt pos:start="1759:9" pos:end="1759:69"><expr pos:start="1759:9" pos:end="1759:68"><call pos:start="1759:9" pos:end="1759:68"><name pos:start="1759:9" pos:end="1759:23">tcg_gen_add_i32</name><argument_list pos:start="1759:24" pos:end="1759:68">(<argument pos:start="1759:25" pos:end="1759:37"><expr pos:start="1759:25" pos:end="1759:37"><name pos:start="1759:25" pos:end="1759:37"><name pos:start="1759:25" pos:end="1759:29">cpu_R</name><index pos:start="1759:30" pos:end="1759:37">[<expr pos:start="1759:31" pos:end="1759:36"><name pos:start="1759:31" pos:end="1759:36">RRRN_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1759:40" pos:end="1759:52"><expr pos:start="1759:40" pos:end="1759:52"><name pos:start="1759:40" pos:end="1759:52"><name pos:start="1759:40" pos:end="1759:44">cpu_R</name><index pos:start="1759:45" pos:end="1759:52">[<expr pos:start="1759:46" pos:end="1759:51"><name pos:start="1759:46" pos:end="1759:51">RRRN_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1759:55" pos:end="1759:67"><expr pos:start="1759:55" pos:end="1759:67"><name pos:start="1759:55" pos:end="1759:67"><name pos:start="1759:55" pos:end="1759:59">cpu_R</name><index pos:start="1759:60" pos:end="1759:67">[<expr pos:start="1759:61" pos:end="1759:66"><name pos:start="1759:61" pos:end="1759:66">RRRN_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1761:9" pos:end="1761:14">break;</break>



    <case pos:start="1765:5" pos:end="1765:12">case <expr pos:start="1765:10" pos:end="1765:11"><literal type="number" pos:start="1765:10" pos:end="1765:11">11</literal></expr>:</case> <comment type="block" pos:start="1765:14" pos:end="1765:24">/*ADDI.Nn*/</comment>

        <expr_stmt pos:start="1767:9" pos:end="1767:77"><expr pos:start="1767:9" pos:end="1767:76"><call pos:start="1767:9" pos:end="1767:76"><name pos:start="1767:9" pos:end="1767:24">tcg_gen_addi_i32</name><argument_list pos:start="1767:25" pos:end="1767:76">(<argument pos:start="1767:26" pos:end="1767:38"><expr pos:start="1767:26" pos:end="1767:38"><name pos:start="1767:26" pos:end="1767:38"><name pos:start="1767:26" pos:end="1767:30">cpu_R</name><index pos:start="1767:31" pos:end="1767:38">[<expr pos:start="1767:32" pos:end="1767:37"><name pos:start="1767:32" pos:end="1767:37">RRRN_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1767:41" pos:end="1767:53"><expr pos:start="1767:41" pos:end="1767:53"><name pos:start="1767:41" pos:end="1767:53"><name pos:start="1767:41" pos:end="1767:45">cpu_R</name><index pos:start="1767:46" pos:end="1767:53">[<expr pos:start="1767:47" pos:end="1767:52"><name pos:start="1767:47" pos:end="1767:52">RRRN_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1767:56" pos:end="1767:75"><expr pos:start="1767:56" pos:end="1767:75"><ternary pos:start="1767:56" pos:end="1767:75"><condition pos:start="1767:56" pos:end="1767:63"><expr pos:start="1767:56" pos:end="1767:61"><name pos:start="1767:56" pos:end="1767:61">RRRN_T</name></expr> ?</condition><then pos:start="1767:65" pos:end="1767:70"> <expr pos:start="1767:65" pos:end="1767:70"><name pos:start="1767:65" pos:end="1767:70">RRRN_T</name></expr> </then><else pos:start="1767:72" pos:end="1767:75">: <expr pos:start="1767:74" pos:end="1767:75"><operator pos:start="1767:74" pos:end="1767:74">-</operator><literal type="number" pos:start="1767:75" pos:end="1767:75">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1769:9" pos:end="1769:14">break;</break>



    <case pos:start="1773:5" pos:end="1773:12">case <expr pos:start="1773:10" pos:end="1773:11"><literal type="number" pos:start="1773:10" pos:end="1773:11">12</literal></expr>:</case> <comment type="block" pos:start="1773:14" pos:end="1773:21">/*ST2n*/</comment>

        <if_stmt pos:start="1775:9" pos:end="1793:9"><if pos:start="1775:9" pos:end="1783:9">if <condition pos:start="1775:12" pos:end="1775:23">(<expr pos:start="1775:13" pos:end="1775:22"><name pos:start="1775:13" pos:end="1775:18">RRRN_T</name> <operator pos:start="1775:20" pos:end="1775:20">&lt;</operator> <literal type="number" pos:start="1775:22" pos:end="1775:22">8</literal></expr>)</condition> <block pos:start="1775:25" pos:end="1783:9">{<block_content pos:start="1777:13" pos:end="1781:58"> <comment type="block" pos:start="1775:27" pos:end="1775:37">/*MOVI.Nn*/</comment>

            <expr_stmt pos:start="1777:13" pos:end="1781:58"><expr pos:start="1777:13" pos:end="1781:57"><call pos:start="1777:13" pos:end="1781:57"><name pos:start="1777:13" pos:end="1777:28">tcg_gen_movi_i32</name><argument_list pos:start="1777:29" pos:end="1781:57">(<argument pos:start="1777:30" pos:end="1777:42"><expr pos:start="1777:30" pos:end="1777:42"><name pos:start="1777:30" pos:end="1777:42"><name pos:start="1777:30" pos:end="1777:34">cpu_R</name><index pos:start="1777:35" pos:end="1777:42">[<expr pos:start="1777:36" pos:end="1777:41"><name pos:start="1777:36" pos:end="1777:41">RRRN_S</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="1779:21" pos:end="1781:56"><expr pos:start="1779:21" pos:end="1781:56"><name pos:start="1779:21" pos:end="1779:26">RRRN_R</name> <operator pos:start="1779:28" pos:end="1779:28">|</operator> <operator pos:start="1779:30" pos:end="1779:30">(</operator><name pos:start="1779:31" pos:end="1779:36">RRRN_T</name> <operator pos:start="1779:38" pos:end="1779:39">&lt;&lt;</operator> <literal type="number" pos:start="1779:41" pos:end="1779:41">4</literal><operator pos:start="1779:42" pos:end="1779:42">)</operator> <operator pos:start="1779:44" pos:end="1779:44">|</operator>

                    <operator pos:start="1781:21" pos:end="1781:21">(</operator><ternary pos:start="1781:22" pos:end="1781:55"><condition pos:start="1781:22" pos:end="1781:40"><expr pos:start="1781:22" pos:end="1781:38"><operator pos:start="1781:22" pos:end="1781:22">(</operator><name pos:start="1781:23" pos:end="1781:28">RRRN_T</name> <operator pos:start="1781:30" pos:end="1781:30">&amp;</operator> <literal type="number" pos:start="1781:32" pos:end="1781:32">6</literal><operator pos:start="1781:33" pos:end="1781:33">)</operator> <operator pos:start="1781:35" pos:end="1781:36">==</operator> <literal type="number" pos:start="1781:38" pos:end="1781:38">6</literal></expr> ?</condition><then pos:start="1781:42" pos:end="1781:51"> <expr pos:start="1781:42" pos:end="1781:51"><literal type="number" pos:start="1781:42" pos:end="1781:51">0xffffff80</literal></expr> </then><else pos:start="1781:53" pos:end="1781:55">: <expr pos:start="1781:55" pos:end="1781:55"><literal type="number" pos:start="1781:55" pos:end="1781:55">0</literal></expr></else></ternary><operator pos:start="1781:56" pos:end="1781:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1783:11" pos:end="1793:9">else <block pos:start="1783:16" pos:end="1793:9">{<block_content pos:start="1785:13" pos:end="1791:56"> <comment type="block" pos:start="1783:18" pos:end="1783:28">/*BEQZ.Nn*/</comment> <comment type="block" pos:start="1783:30" pos:end="1783:40">/*BNEZ.Nn*/</comment>

            <decl_stmt pos:start="1785:13" pos:end="1785:69"><decl pos:start="1785:13" pos:end="1785:68"><type pos:start="1785:13" pos:end="1785:19"><name pos:start="1785:13" pos:end="1785:19">TCGCond</name></type> <name pos:start="1785:21" pos:end="1785:25">eq_ne</name> <init pos:start="1785:27" pos:end="1785:68">= <expr pos:start="1785:29" pos:end="1785:68"><ternary pos:start="1785:29" pos:end="1785:68"><condition pos:start="1785:29" pos:end="1785:42"><expr pos:start="1785:29" pos:end="1785:40"><operator pos:start="1785:29" pos:end="1785:29">(</operator><name pos:start="1785:30" pos:end="1785:35">RRRN_T</name> <operator pos:start="1785:37" pos:end="1785:37">&amp;</operator> <literal type="number" pos:start="1785:39" pos:end="1785:39">4</literal><operator pos:start="1785:40" pos:end="1785:40">)</operator></expr> ?</condition><then pos:start="1785:44" pos:end="1785:54"> <expr pos:start="1785:44" pos:end="1785:54"><name pos:start="1785:44" pos:end="1785:54">TCG_COND_NE</name></expr> </then><else pos:start="1785:56" pos:end="1785:68">: <expr pos:start="1785:58" pos:end="1785:68"><name pos:start="1785:58" pos:end="1785:68">TCG_COND_EQ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="1789:13" pos:end="1791:56"><expr pos:start="1789:13" pos:end="1791:55"><call pos:start="1789:13" pos:end="1791:55"><name pos:start="1789:13" pos:end="1789:23">gen_brcondi</name><argument_list pos:start="1789:24" pos:end="1791:55">(<argument pos:start="1789:25" pos:end="1789:26"><expr pos:start="1789:25" pos:end="1789:26"><name pos:start="1789:25" pos:end="1789:26">dc</name></expr></argument>, <argument pos:start="1789:29" pos:end="1789:33"><expr pos:start="1789:29" pos:end="1789:33"><name pos:start="1789:29" pos:end="1789:33">eq_ne</name></expr></argument>, <argument pos:start="1789:36" pos:end="1789:48"><expr pos:start="1789:36" pos:end="1789:48"><name pos:start="1789:36" pos:end="1789:48"><name pos:start="1789:36" pos:end="1789:40">cpu_R</name><index pos:start="1789:41" pos:end="1789:48">[<expr pos:start="1789:42" pos:end="1789:47"><name pos:start="1789:42" pos:end="1789:47">RRRN_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1789:51" pos:end="1789:51"><expr pos:start="1789:51" pos:end="1789:51"><literal type="number" pos:start="1789:51" pos:end="1789:51">0</literal></expr></argument>,

                    <argument pos:start="1791:21" pos:end="1791:54"><expr pos:start="1791:21" pos:end="1791:54"><literal type="number" pos:start="1791:21" pos:end="1791:23">4</literal> <operator pos:start="1791:23" pos:end="1791:23">+</operator> <operator pos:start="1791:25" pos:end="1791:25">(</operator><name pos:start="1791:26" pos:end="1791:31">RRRN_R</name> <operator pos:start="1791:33" pos:end="1791:33">|</operator> <operator pos:start="1791:35" pos:end="1791:35">(</operator><operator pos:start="1791:36" pos:end="1791:36">(</operator><name pos:start="1791:37" pos:end="1791:42">RRRN_T</name> <operator pos:start="1791:44" pos:end="1791:44">&amp;</operator> <literal type="number" pos:start="1791:46" pos:end="1791:46">3</literal><operator pos:start="1791:47" pos:end="1791:47">)</operator> <operator pos:start="1791:49" pos:end="1791:50">&lt;&lt;</operator> <literal type="number" pos:start="1791:52" pos:end="1791:52">4</literal><operator pos:start="1791:53" pos:end="1791:53">)</operator><operator pos:start="1791:54" pos:end="1791:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1795:9" pos:end="1795:14">break;</break>



    <case pos:start="1799:5" pos:end="1799:12">case <expr pos:start="1799:10" pos:end="1799:11"><literal type="number" pos:start="1799:10" pos:end="1799:11">13</literal></expr>:</case> <comment type="block" pos:start="1799:14" pos:end="1799:21">/*ST3n*/</comment>

        <switch pos:start="1801:9" pos:end="1861:9">switch <condition pos:start="1801:16" pos:end="1801:23">(<expr pos:start="1801:17" pos:end="1801:22"><name pos:start="1801:17" pos:end="1801:22">RRRN_R</name></expr>)</condition> <block pos:start="1801:25" pos:end="1861:9">{<block_content pos:start="1803:9" pos:end="1859:18">

        <case pos:start="1803:9" pos:end="1803:15">case <expr pos:start="1803:14" pos:end="1803:14"><literal type="number" pos:start="1803:14" pos:end="1803:14">0</literal></expr>:</case> <comment type="block" pos:start="1803:17" pos:end="1803:26">/*MOV.Nn*/</comment>

            <expr_stmt pos:start="1805:13" pos:end="1805:58"><expr pos:start="1805:13" pos:end="1805:57"><call pos:start="1805:13" pos:end="1805:57"><name pos:start="1805:13" pos:end="1805:27">tcg_gen_mov_i32</name><argument_list pos:start="1805:28" pos:end="1805:57">(<argument pos:start="1805:29" pos:end="1805:41"><expr pos:start="1805:29" pos:end="1805:41"><name pos:start="1805:29" pos:end="1805:41"><name pos:start="1805:29" pos:end="1805:33">cpu_R</name><index pos:start="1805:34" pos:end="1805:41">[<expr pos:start="1805:35" pos:end="1805:40"><name pos:start="1805:35" pos:end="1805:40">RRRN_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1805:44" pos:end="1805:56"><expr pos:start="1805:44" pos:end="1805:56"><name pos:start="1805:44" pos:end="1805:56"><name pos:start="1805:44" pos:end="1805:48">cpu_R</name><index pos:start="1805:49" pos:end="1805:56">[<expr pos:start="1805:50" pos:end="1805:55"><name pos:start="1805:50" pos:end="1805:55">RRRN_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1807:13" pos:end="1807:18">break;</break>



        <case pos:start="1811:9" pos:end="1811:16">case <expr pos:start="1811:14" pos:end="1811:15"><literal type="number" pos:start="1811:14" pos:end="1811:15">15</literal></expr>:</case> <comment type="block" pos:start="1811:18" pos:end="1811:23">/*S3*/</comment>

            <switch pos:start="1813:13" pos:end="1851:13">switch <condition pos:start="1813:20" pos:end="1813:27">(<expr pos:start="1813:21" pos:end="1813:26"><name pos:start="1813:21" pos:end="1813:26">RRRN_T</name></expr>)</condition> <block pos:start="1813:29" pos:end="1851:13">{<block_content pos:start="1815:13" pos:end="1849:22">

            <case pos:start="1815:13" pos:end="1815:19">case <expr pos:start="1815:18" pos:end="1815:18"><literal type="number" pos:start="1815:18" pos:end="1815:18">0</literal></expr>:</case> <comment type="block" pos:start="1815:21" pos:end="1815:30">/*RET.Nn*/</comment>

                <expr_stmt pos:start="1817:17" pos:end="1817:39"><expr pos:start="1817:17" pos:end="1817:38"><call pos:start="1817:17" pos:end="1817:38"><name pos:start="1817:17" pos:end="1817:24">gen_jump</name><argument_list pos:start="1817:25" pos:end="1817:38">(<argument pos:start="1817:26" pos:end="1817:27"><expr pos:start="1817:26" pos:end="1817:27"><name pos:start="1817:26" pos:end="1817:27">dc</name></expr></argument>, <argument pos:start="1817:30" pos:end="1817:37"><expr pos:start="1817:30" pos:end="1817:37"><name pos:start="1817:30" pos:end="1817:37"><name pos:start="1817:30" pos:end="1817:34">cpu_R</name><index pos:start="1817:35" pos:end="1817:37">[<expr pos:start="1817:36" pos:end="1817:36"><literal type="number" pos:start="1817:36" pos:end="1817:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1819:17" pos:end="1819:22">break;</break>



            <case pos:start="1823:13" pos:end="1823:19">case <expr pos:start="1823:18" pos:end="1823:18"><literal type="number" pos:start="1823:18" pos:end="1823:18">1</literal></expr>:</case> <comment type="block" pos:start="1823:21" pos:end="1823:31">/*RETW.Nn*/</comment>

                <break pos:start="1825:17" pos:end="1825:22">break;</break>



            <case pos:start="1829:13" pos:end="1829:19">case <expr pos:start="1829:18" pos:end="1829:18"><literal type="number" pos:start="1829:18" pos:end="1829:18">2</literal></expr>:</case> <comment type="block" pos:start="1829:21" pos:end="1829:32">/*BREAK.Nn*/</comment>

                <break pos:start="1831:17" pos:end="1831:22">break;</break>



            <case pos:start="1835:13" pos:end="1835:19">case <expr pos:start="1835:18" pos:end="1835:18"><literal type="number" pos:start="1835:18" pos:end="1835:18">3</literal></expr>:</case> <comment type="block" pos:start="1835:21" pos:end="1835:30">/*NOP.Nn*/</comment>

                <break pos:start="1837:17" pos:end="1837:22">break;</break>



            <case pos:start="1841:13" pos:end="1841:19">case <expr pos:start="1841:18" pos:end="1841:18"><literal type="number" pos:start="1841:18" pos:end="1841:18">6</literal></expr>:</case> <comment type="block" pos:start="1841:21" pos:end="1841:30">/*ILL.Nn*/</comment>

                <break pos:start="1843:17" pos:end="1843:22">break;</break>



            <default pos:start="1847:13" pos:end="1847:20">default:</default> <comment type="block" pos:start="1847:22" pos:end="1847:33">/*reserved*/</comment>

                <break pos:start="1849:17" pos:end="1849:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="1853:13" pos:end="1853:18">break;</break>



        <default pos:start="1857:9" pos:end="1857:16">default:</default> <comment type="block" pos:start="1857:18" pos:end="1857:29">/*reserved*/</comment>

            <break pos:start="1859:13" pos:end="1859:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="1863:9" pos:end="1863:14">break;</break>



    <default pos:start="1867:5" pos:end="1867:12">default:</default> <comment type="block" pos:start="1867:14" pos:end="1867:25">/*reserved*/</comment>

        <break pos:start="1869:9" pos:end="1869:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="1875:5" pos:end="1875:25"><expr pos:start="1875:5" pos:end="1875:24"><name pos:start="1875:5" pos:end="1875:10"><name pos:start="1875:5" pos:end="1875:6">dc</name><operator pos:start="1875:7" pos:end="1875:8">-&gt;</operator><name pos:start="1875:9" pos:end="1875:10">pc</name></name> <operator pos:start="1875:12" pos:end="1875:12">=</operator> <name pos:start="1875:14" pos:end="1875:24"><name pos:start="1875:14" pos:end="1875:15">dc</name><operator pos:start="1875:16" pos:end="1875:17">-&gt;</operator><name pos:start="1875:18" pos:end="1875:24">next_pc</name></name></expr>;</expr_stmt>

    <return pos:start="1877:5" pos:end="1877:11">return;</return>



<label pos:start="1881:1" pos:end="1881:15"><name pos:start="1881:1" pos:end="1881:14">invalid_opcode</name>:</label>

    <expr_stmt pos:start="1883:5" pos:end="1883:45"><expr pos:start="1883:5" pos:end="1883:44"><call pos:start="1883:5" pos:end="1883:44"><name pos:start="1883:5" pos:end="1883:12">qemu_log</name><argument_list pos:start="1883:13" pos:end="1883:44">(<argument pos:start="1883:14" pos:end="1883:35"><expr pos:start="1883:14" pos:end="1883:35"><literal type="string" pos:start="1883:14" pos:end="1883:35">"INVALID(pc = %08x)\n"</literal></expr></argument>, <argument pos:start="1883:38" pos:end="1883:43"><expr pos:start="1883:38" pos:end="1883:43"><name pos:start="1883:38" pos:end="1883:43"><name pos:start="1883:38" pos:end="1883:39">dc</name><operator pos:start="1883:40" pos:end="1883:41">-&gt;</operator><name pos:start="1883:42" pos:end="1883:43">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1885:5" pos:end="1888:0"><expr pos:start="1885:5" pos:end="1885:24"><name pos:start="1885:5" pos:end="1885:10"><name pos:start="1885:5" pos:end="1885:6">dc</name><operator pos:start="1885:7" pos:end="1885:8">-&gt;</operator><name pos:start="1885:9" pos:end="1885:10">pc</name></name> <operator pos:start="1885:12" pos:end="1885:12">=</operator> <name pos:start="1885:14" pos:end="1885:24"><name pos:start="1885:14" pos:end="1885:15">dc</name><operator pos:start="1885:16" pos:end="1885:17">-&gt;</operator><name pos:start="1885:18" pos:end="1885:24">next_pc</name></name></expr>;</expr_stmt>

<cpp:undef pos:start="1887:1" pos:end="1887:17">#<cpp:directive pos:start="1887:2" pos:end="1887:6">undef</cpp:directive> <name pos:start="1887:8" pos:end="1887:17">HAS_OPTION</name></cpp:undef>

</block_content>}</block></function>
</unit>
