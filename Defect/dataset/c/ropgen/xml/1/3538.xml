<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3538.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:6">PCIBus</name> <modifier pos:start="1:8" pos:end="1:8">*</modifier></type><name pos:start="1:9" pos:end="1:20">typhoon_init</name><parameter_list pos:start="1:21" pos:end="5:67">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:31">ram_addr_t</name></type> <name pos:start="1:33" pos:end="1:40">ram_size</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:58"><decl pos:start="1:43" pos:end="1:58"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:48">ISABus</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier><modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">isa_bus</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:40"><decl pos:start="3:22" pos:end="3:40"><type pos:start="3:22" pos:end="3:40"><name pos:start="3:22" pos:end="3:29">qemu_irq</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:40">p_rtc_irq</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:38"><decl pos:start="5:22" pos:end="5:38"><type pos:start="5:22" pos:end="5:35"><name pos:start="5:22" pos:end="5:29">AlphaCPU</name> <modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:38"><name pos:start="5:32" pos:end="5:35">cpus</name><index pos:start="5:36" pos:end="5:38">[<expr pos:start="5:37" pos:end="5:37"><literal type="number" pos:start="5:37" pos:end="5:37">4</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="5:41" pos:end="5:66"><decl pos:start="5:41" pos:end="5:66"><type pos:start="5:41" pos:end="5:66"><name pos:start="5:41" pos:end="5:54">pci_map_irq_fn</name></type> <name pos:start="5:56" pos:end="5:66">sys_map_irq</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="223:1">{<block_content pos:start="9:5" pos:end="221:13">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:18"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:18">uint64_t</name></type> <name pos:start="9:20" pos:end="9:21">MB</name> <init pos:start="9:23" pos:end="9:35">= <expr pos:start="9:25" pos:end="9:35"><literal type="number" pos:start="9:25" pos:end="9:28">1024</literal> <operator pos:start="9:30" pos:end="9:30">*</operator> <literal type="number" pos:start="9:32" pos:end="9:35">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:18"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:18">uint64_t</name></type> <name pos:start="11:20" pos:end="11:21">GB</name> <init pos:start="11:23" pos:end="11:33">= <expr pos:start="11:25" pos:end="11:33"><literal type="number" pos:start="11:25" pos:end="11:28">1024</literal> <operator pos:start="11:30" pos:end="11:30">*</operator> <name pos:start="11:32" pos:end="11:33">MB</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:50"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:28">addr_space</name> <init pos:start="13:30" pos:end="13:50">= <expr pos:start="13:32" pos:end="13:50"><call pos:start="13:32" pos:end="13:50"><name pos:start="13:32" pos:end="13:48">get_system_memory</name><argument_list pos:start="13:49" pos:end="13:50">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:49"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:31">addr_space_io</name> <init pos:start="15:33" pos:end="15:49">= <expr pos:start="15:35" pos:end="15:49"><call pos:start="15:35" pos:end="15:49"><name pos:start="15:35" pos:end="15:47">get_system_io</name><argument_list pos:start="15:48" pos:end="15:49">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">TyphoonState</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">PCIHostState</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">phb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:14"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:10">PCIBus</name> <modifier pos:start="23:12" pos:end="23:12">*</modifier></type><name pos:start="23:13" pos:end="23:13">b</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:58"><expr pos:start="29:5" pos:end="29:57"><name pos:start="29:5" pos:end="29:7">dev</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:57"><name pos:start="29:11" pos:end="29:21">qdev_create</name><argument_list pos:start="29:22" pos:end="29:57">(<argument pos:start="29:23" pos:end="29:26"><expr pos:start="29:23" pos:end="29:26"><name pos:start="29:23" pos:end="29:26">NULL</name></expr></argument>, <argument pos:start="29:29" pos:end="29:56"><expr pos:start="29:29" pos:end="29:56"><name pos:start="29:29" pos:end="29:56">TYPE_TYPHOON_PCI_HOST_BRIDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><call pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:20">qdev_init_nofail</name><argument_list pos:start="31:21" pos:end="31:25">(<argument pos:start="31:22" pos:end="31:24"><expr pos:start="31:22" pos:end="31:24"><name pos:start="31:22" pos:end="31:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:5">s</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <call pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:31">TYPHOON_PCI_HOST_BRIDGE</name><argument_list pos:start="35:32" pos:end="35:36">(<argument pos:start="35:33" pos:end="35:35"><expr pos:start="35:33" pos:end="35:35"><name pos:start="35:33" pos:end="35:35">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:7">phb</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:30"><name pos:start="37:11" pos:end="37:25">PCI_HOST_BRIDGE</name><argument_list pos:start="37:26" pos:end="37:30">(<argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:71">/* Remember the CPUs so that we can deliver interrupts to them.  */</comment>

    <for pos:start="43:5" pos:end="61:5">for <control pos:start="43:9" pos:end="43:27">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:21"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <literal type="number" pos:start="43:21" pos:end="43:21">4</literal></expr>;</condition> <incr pos:start="43:24" pos:end="43:26"><expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:24">i</name><operator pos:start="43:25" pos:end="43:26">++</operator></expr></incr>)</control> <block pos:start="43:29" pos:end="61:5">{<block_content pos:start="45:9" pos:end="59:9">

        <decl_stmt pos:start="45:9" pos:end="45:32"><decl pos:start="45:9" pos:end="45:31"><type pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:16">AlphaCPU</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:21">cpu</name> <init pos:start="45:23" pos:end="45:31">= <expr pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:28">cpus</name><index pos:start="45:29" pos:end="45:31">[<expr pos:start="45:30" pos:end="45:30"><name pos:start="45:30" pos:end="45:30">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:16">cchip</name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:20">cpu</name><index pos:start="47:21" pos:end="47:23">[<expr pos:start="47:22" pos:end="47:22"><name pos:start="47:22" pos:end="47:22">i</name></expr>]</index></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:29">cpu</name></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="59:9"><if pos:start="49:9" pos:end="59:9">if <condition pos:start="49:12" pos:end="49:24">(<expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:15">cpu</name> <operator pos:start="49:17" pos:end="49:18">!=</operator> <name pos:start="49:20" pos:end="49:23">NULL</name></expr>)</condition> <block pos:start="49:26" pos:end="59:9">{<block_content pos:start="51:13" pos:end="57:77">

            <decl_stmt pos:start="51:13" pos:end="51:43"><decl pos:start="51:13" pos:end="51:42"><type pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:25">CPUAlphaState</name> <modifier pos:start="51:27" pos:end="51:27">*</modifier></type><name pos:start="51:28" pos:end="51:30">env</name> <init pos:start="51:32" pos:end="51:42">= <expr pos:start="51:34" pos:end="51:42"><operator pos:start="51:34" pos:end="51:34">&amp;</operator><name pos:start="51:35" pos:end="51:42"><name pos:start="51:35" pos:end="51:37">cpu</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:42">env</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="53:13" pos:end="57:77"><expr pos:start="53:13" pos:end="57:76"><name pos:start="53:13" pos:end="53:28"><name pos:start="53:13" pos:end="53:15">env</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:28">alarm_timer</name></name> <operator pos:start="53:30" pos:end="53:30">=</operator> <call pos:start="53:32" pos:end="57:76"><name pos:start="53:32" pos:end="53:48">qemu_new_timer_ns</name><argument_list pos:start="53:49" pos:end="57:76">(<argument pos:start="53:50" pos:end="53:58"><expr pos:start="53:50" pos:end="53:58"><name pos:start="53:50" pos:end="53:58">rtc_clock</name></expr></argument>,

                                                 <argument pos:start="55:50" pos:end="55:68"><expr pos:start="55:50" pos:end="55:68"><name pos:start="55:50" pos:end="55:68">typhoon_alarm_timer</name></expr></argument>,

                                                 <argument pos:start="57:50" pos:end="57:75"><expr pos:start="57:50" pos:end="57:75"><operator pos:start="57:50" pos:end="57:50">(</operator><name pos:start="57:51" pos:end="57:54">void</name> <operator pos:start="57:56" pos:end="57:56">*</operator><operator pos:start="57:57" pos:end="57:57">)</operator><operator pos:start="57:58" pos:end="57:58">(</operator><operator pos:start="57:59" pos:end="57:59">(</operator><name pos:start="57:60" pos:end="57:68">uintptr_t</name><operator pos:start="57:69" pos:end="57:69">)</operator><name pos:start="57:70" pos:end="57:70">s</name> <operator pos:start="57:72" pos:end="57:72">+</operator> <name pos:start="57:74" pos:end="57:74">i</name><operator pos:start="57:75" pos:end="57:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="65:5" pos:end="65:66"><expr pos:start="65:5" pos:end="65:65"><operator pos:start="65:5" pos:end="65:5">*</operator><name pos:start="65:6" pos:end="65:14">p_rtc_irq</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <operator pos:start="65:18" pos:end="65:18">*</operator><call pos:start="65:19" pos:end="65:65"><name pos:start="65:19" pos:end="65:36">qemu_allocate_irqs</name><argument_list pos:start="65:37" pos:end="65:65">(<argument pos:start="65:38" pos:end="65:58"><expr pos:start="65:38" pos:end="65:58"><name pos:start="65:38" pos:end="65:58">typhoon_set_timer_irq</name></expr></argument>, <argument pos:start="65:61" pos:end="65:61"><expr pos:start="65:61" pos:end="65:61"><name pos:start="65:61" pos:end="65:61">s</name></expr></argument>, <argument pos:start="65:64" pos:end="65:64"><expr pos:start="65:64" pos:end="65:64"><literal type="number" pos:start="65:64" pos:end="65:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="71:68">/* Main memory region, 0x00.0000.0000.  Real hardware supports 32GB,

       but the address space hole reserved at this point is 8TB.  */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:60"><expr pos:start="73:5" pos:end="73:59"><call pos:start="73:5" pos:end="73:59"><name pos:start="73:5" pos:end="73:26">memory_region_init_ram</name><argument_list pos:start="73:27" pos:end="73:59">(<argument pos:start="73:28" pos:end="73:41"><expr pos:start="73:28" pos:end="73:41"><operator pos:start="73:28" pos:end="73:28">&amp;</operator><name pos:start="73:29" pos:end="73:41"><name pos:start="73:29" pos:end="73:29">s</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:41">ram_region</name></name></expr></argument>, <argument pos:start="73:44" pos:end="73:48"><expr pos:start="73:44" pos:end="73:48"><literal type="string" pos:start="73:44" pos:end="73:48">"ram"</literal></expr></argument>, <argument pos:start="73:51" pos:end="73:58"><expr pos:start="73:51" pos:end="73:58"><name pos:start="73:51" pos:end="73:58">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:48"><expr pos:start="75:5" pos:end="75:47"><call pos:start="75:5" pos:end="75:47"><name pos:start="75:5" pos:end="75:31">vmstate_register_ram_global</name><argument_list pos:start="75:32" pos:end="75:47">(<argument pos:start="75:33" pos:end="75:46"><expr pos:start="75:33" pos:end="75:46"><operator pos:start="75:33" pos:end="75:33">&amp;</operator><name pos:start="75:34" pos:end="75:46"><name pos:start="75:34" pos:end="75:34">s</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:46">ram_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:63"><expr pos:start="77:5" pos:end="77:62"><call pos:start="77:5" pos:end="77:62"><name pos:start="77:5" pos:end="77:31">memory_region_add_subregion</name><argument_list pos:start="77:32" pos:end="77:62">(<argument pos:start="77:33" pos:end="77:42"><expr pos:start="77:33" pos:end="77:42"><name pos:start="77:33" pos:end="77:42">addr_space</name></expr></argument>, <argument pos:start="77:45" pos:end="77:45"><expr pos:start="77:45" pos:end="77:45"><literal type="number" pos:start="77:45" pos:end="77:45">0</literal></expr></argument>, <argument pos:start="77:48" pos:end="77:61"><expr pos:start="77:48" pos:end="77:61"><operator pos:start="77:48" pos:end="77:48">&amp;</operator><name pos:start="77:49" pos:end="77:61"><name pos:start="77:49" pos:end="77:49">s</name><operator pos:start="77:50" pos:end="77:51">-&gt;</operator><name pos:start="77:52" pos:end="77:61">ram_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:40">/* TIGbus, 0x801.0000.0000, 1GB.  */</comment>

    <comment type="block" pos:start="83:5" pos:end="85:76">/* ??? The TIGbus is used for delivering interrupts, and access to

       the flash ROM.  I'm not sure that we need to implement it at all.  */</comment>



    <comment type="block" pos:start="89:5" pos:end="89:47">/* Pchip0 CSRs, 0x801.8000.0000, 256MB.  */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:77"><expr pos:start="91:5" pos:end="91:76"><call pos:start="91:5" pos:end="91:76"><name pos:start="91:5" pos:end="91:25">memory_region_init_io</name><argument_list pos:start="91:26" pos:end="91:76">(<argument pos:start="91:27" pos:end="91:42"><expr pos:start="91:27" pos:end="91:42"><operator pos:start="91:27" pos:end="91:27">&amp;</operator><name pos:start="91:28" pos:end="91:42"><name pos:start="91:28" pos:end="91:28">s</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:35">pchip</name><operator pos:start="91:36" pos:end="91:36">.</operator><name pos:start="91:37" pos:end="91:42">region</name></name></expr></argument>, <argument pos:start="91:45" pos:end="91:54"><expr pos:start="91:45" pos:end="91:54"><operator pos:start="91:45" pos:end="91:45">&amp;</operator><name pos:start="91:46" pos:end="91:54">pchip_ops</name></expr></argument>, <argument pos:start="91:57" pos:end="91:57"><expr pos:start="91:57" pos:end="91:57"><name pos:start="91:57" pos:end="91:57">s</name></expr></argument>, <argument pos:start="91:60" pos:end="91:67"><expr pos:start="91:60" pos:end="91:67"><literal type="string" pos:start="91:60" pos:end="91:67">"pchip0"</literal></expr></argument>, <argument pos:start="91:70" pos:end="91:75"><expr pos:start="91:70" pos:end="91:75"><literal type="number" pos:start="91:70" pos:end="91:72">256</literal><operator pos:start="91:73" pos:end="91:73">*</operator><name pos:start="91:74" pos:end="91:75">MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="95:50"><expr pos:start="93:5" pos:end="95:49"><call pos:start="93:5" pos:end="95:49"><name pos:start="93:5" pos:end="93:31">memory_region_add_subregion</name><argument_list pos:start="93:32" pos:end="95:49">(<argument pos:start="93:33" pos:end="93:42"><expr pos:start="93:33" pos:end="93:42"><name pos:start="93:33" pos:end="93:42">addr_space</name></expr></argument>, <argument pos:start="93:45" pos:end="93:60"><expr pos:start="93:45" pos:end="93:60"><literal type="number" pos:start="93:45" pos:end="93:60">0x80180000000ULL</literal></expr></argument>,

                                <argument pos:start="95:33" pos:end="95:48"><expr pos:start="95:33" pos:end="95:48"><operator pos:start="95:33" pos:end="95:33">&amp;</operator><name pos:start="95:34" pos:end="95:48"><name pos:start="95:34" pos:end="95:34">s</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:41">pchip</name><operator pos:start="95:42" pos:end="95:42">.</operator><name pos:start="95:43" pos:end="95:48">region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:46">/* Cchip CSRs, 0x801.A000.0000, 256MB.  */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:77"><expr pos:start="101:5" pos:end="101:76"><call pos:start="101:5" pos:end="101:76"><name pos:start="101:5" pos:end="101:25">memory_region_init_io</name><argument_list pos:start="101:26" pos:end="101:76">(<argument pos:start="101:27" pos:end="101:42"><expr pos:start="101:27" pos:end="101:42"><operator pos:start="101:27" pos:end="101:27">&amp;</operator><name pos:start="101:28" pos:end="101:42"><name pos:start="101:28" pos:end="101:28">s</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:35">cchip</name><operator pos:start="101:36" pos:end="101:36">.</operator><name pos:start="101:37" pos:end="101:42">region</name></name></expr></argument>, <argument pos:start="101:45" pos:end="101:54"><expr pos:start="101:45" pos:end="101:54"><operator pos:start="101:45" pos:end="101:45">&amp;</operator><name pos:start="101:46" pos:end="101:54">cchip_ops</name></expr></argument>, <argument pos:start="101:57" pos:end="101:57"><expr pos:start="101:57" pos:end="101:57"><name pos:start="101:57" pos:end="101:57">s</name></expr></argument>, <argument pos:start="101:60" pos:end="101:67"><expr pos:start="101:60" pos:end="101:67"><literal type="string" pos:start="101:60" pos:end="101:67">"cchip0"</literal></expr></argument>, <argument pos:start="101:70" pos:end="101:75"><expr pos:start="101:70" pos:end="101:75"><literal type="number" pos:start="101:70" pos:end="101:72">256</literal><operator pos:start="101:73" pos:end="101:73">*</operator><name pos:start="101:74" pos:end="101:75">MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="105:50"><expr pos:start="103:5" pos:end="105:49"><call pos:start="103:5" pos:end="105:49"><name pos:start="103:5" pos:end="103:31">memory_region_add_subregion</name><argument_list pos:start="103:32" pos:end="105:49">(<argument pos:start="103:33" pos:end="103:42"><expr pos:start="103:33" pos:end="103:42"><name pos:start="103:33" pos:end="103:42">addr_space</name></expr></argument>, <argument pos:start="103:45" pos:end="103:60"><expr pos:start="103:45" pos:end="103:60"><literal type="number" pos:start="103:45" pos:end="103:60">0x801a0000000ULL</literal></expr></argument>,

                                <argument pos:start="105:33" pos:end="105:48"><expr pos:start="105:33" pos:end="105:48"><operator pos:start="105:33" pos:end="105:33">&amp;</operator><name pos:start="105:34" pos:end="105:48"><name pos:start="105:34" pos:end="105:34">s</name><operator pos:start="105:35" pos:end="105:36">-&gt;</operator><name pos:start="105:37" pos:end="105:41">cchip</name><operator pos:start="105:42" pos:end="105:42">.</operator><name pos:start="105:43" pos:end="105:48">region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:46">/* Dchip CSRs, 0x801.B000.0000, 256MB.  */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:77"><expr pos:start="111:5" pos:end="111:76"><call pos:start="111:5" pos:end="111:76"><name pos:start="111:5" pos:end="111:25">memory_region_init_io</name><argument_list pos:start="111:26" pos:end="111:76">(<argument pos:start="111:27" pos:end="111:42"><expr pos:start="111:27" pos:end="111:42"><operator pos:start="111:27" pos:end="111:27">&amp;</operator><name pos:start="111:28" pos:end="111:42"><name pos:start="111:28" pos:end="111:28">s</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:42">dchip_region</name></name></expr></argument>, <argument pos:start="111:45" pos:end="111:54"><expr pos:start="111:45" pos:end="111:54"><operator pos:start="111:45" pos:end="111:45">&amp;</operator><name pos:start="111:46" pos:end="111:54">dchip_ops</name></expr></argument>, <argument pos:start="111:57" pos:end="111:57"><expr pos:start="111:57" pos:end="111:57"><name pos:start="111:57" pos:end="111:57">s</name></expr></argument>, <argument pos:start="111:60" pos:end="111:67"><expr pos:start="111:60" pos:end="111:67"><literal type="string" pos:start="111:60" pos:end="111:67">"dchip0"</literal></expr></argument>, <argument pos:start="111:70" pos:end="111:75"><expr pos:start="111:70" pos:end="111:75"><literal type="number" pos:start="111:70" pos:end="111:72">256</literal><operator pos:start="111:73" pos:end="111:73">*</operator><name pos:start="111:74" pos:end="111:75">MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="115:50"><expr pos:start="113:5" pos:end="115:49"><call pos:start="113:5" pos:end="115:49"><name pos:start="113:5" pos:end="113:31">memory_region_add_subregion</name><argument_list pos:start="113:32" pos:end="115:49">(<argument pos:start="113:33" pos:end="113:42"><expr pos:start="113:33" pos:end="113:42"><name pos:start="113:33" pos:end="113:42">addr_space</name></expr></argument>, <argument pos:start="113:45" pos:end="113:60"><expr pos:start="113:45" pos:end="113:60"><literal type="number" pos:start="113:45" pos:end="113:60">0x801b0000000ULL</literal></expr></argument>,

                                <argument pos:start="115:33" pos:end="115:48"><expr pos:start="115:33" pos:end="115:48"><operator pos:start="115:33" pos:end="115:33">&amp;</operator><name pos:start="115:34" pos:end="115:48"><name pos:start="115:34" pos:end="115:34">s</name><operator pos:start="115:35" pos:end="115:36">-&gt;</operator><name pos:start="115:37" pos:end="115:48">dchip_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:51">/* Pchip0 PCI memory, 0x800.0000.0000, 4GB.  */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:60"><expr pos:start="121:5" pos:end="121:59"><call pos:start="121:5" pos:end="121:59"><name pos:start="121:5" pos:end="121:22">memory_region_init</name><argument_list pos:start="121:23" pos:end="121:59">(<argument pos:start="121:24" pos:end="121:40"><expr pos:start="121:24" pos:end="121:40"><operator pos:start="121:24" pos:end="121:24">&amp;</operator><name pos:start="121:25" pos:end="121:40"><name pos:start="121:25" pos:end="121:25">s</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:32">pchip</name><operator pos:start="121:33" pos:end="121:33">.</operator><name pos:start="121:34" pos:end="121:40">reg_mem</name></name></expr></argument>, <argument pos:start="121:43" pos:end="121:52"><expr pos:start="121:43" pos:end="121:52"><literal type="string" pos:start="121:43" pos:end="121:52">"pci0-mem"</literal></expr></argument>, <argument pos:start="121:55" pos:end="121:58"><expr pos:start="121:55" pos:end="121:58"><literal type="number" pos:start="121:55" pos:end="121:55">4</literal><operator pos:start="121:56" pos:end="121:56">*</operator><name pos:start="121:57" pos:end="121:58">GB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="125:51"><expr pos:start="123:5" pos:end="125:50"><call pos:start="123:5" pos:end="125:50"><name pos:start="123:5" pos:end="123:31">memory_region_add_subregion</name><argument_list pos:start="123:32" pos:end="125:50">(<argument pos:start="123:33" pos:end="123:42"><expr pos:start="123:33" pos:end="123:42"><name pos:start="123:33" pos:end="123:42">addr_space</name></expr></argument>, <argument pos:start="123:45" pos:end="123:60"><expr pos:start="123:45" pos:end="123:60"><literal type="number" pos:start="123:45" pos:end="123:60">0x80000000000ULL</literal></expr></argument>,

                                <argument pos:start="125:33" pos:end="125:49"><expr pos:start="125:33" pos:end="125:49"><operator pos:start="125:33" pos:end="125:33">&amp;</operator><name pos:start="125:34" pos:end="125:49"><name pos:start="125:34" pos:end="125:34">s</name><operator pos:start="125:35" pos:end="125:36">-&gt;</operator><name pos:start="125:37" pos:end="125:41">pchip</name><operator pos:start="125:42" pos:end="125:42">.</operator><name pos:start="125:43" pos:end="125:49">reg_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:49">/* Pchip0 PCI I/O, 0x801.FC00.0000, 32MB.  */</comment>

    <comment type="block" pos:start="131:5" pos:end="135:79">/* ??? Ideally we drop the "system" i/o space on the floor and give the

       PCI subsystem the full address space reserved by the chipset.

       We can't do that until the MEM and IO paths in memory.c are unified.  */</comment>

    <expr_stmt pos:start="137:5" pos:end="139:44"><expr pos:start="137:5" pos:end="139:43"><call pos:start="137:5" pos:end="139:43"><name pos:start="137:5" pos:end="137:25">memory_region_init_io</name><argument_list pos:start="137:26" pos:end="139:43">(<argument pos:start="137:27" pos:end="137:42"><expr pos:start="137:27" pos:end="137:42"><operator pos:start="137:27" pos:end="137:27">&amp;</operator><name pos:start="137:28" pos:end="137:42"><name pos:start="137:28" pos:end="137:28">s</name><operator pos:start="137:29" pos:end="137:30">-&gt;</operator><name pos:start="137:31" pos:end="137:35">pchip</name><operator pos:start="137:36" pos:end="137:36">.</operator><name pos:start="137:37" pos:end="137:42">reg_io</name></name></expr></argument>, <argument pos:start="137:45" pos:end="137:64"><expr pos:start="137:45" pos:end="137:64"><operator pos:start="137:45" pos:end="137:45">&amp;</operator><name pos:start="137:46" pos:end="137:64">alpha_pci_bw_io_ops</name></expr></argument>, <argument pos:start="137:67" pos:end="137:70"><expr pos:start="137:67" pos:end="137:70"><name pos:start="137:67" pos:end="137:70">NULL</name></expr></argument>,

                          <argument pos:start="139:27" pos:end="139:35"><expr pos:start="139:27" pos:end="139:35"><literal type="string" pos:start="139:27" pos:end="139:35">"pci0-io"</literal></expr></argument>, <argument pos:start="139:38" pos:end="139:42"><expr pos:start="139:38" pos:end="139:42"><literal type="number" pos:start="139:38" pos:end="139:39">32</literal><operator pos:start="139:40" pos:end="139:40">*</operator><name pos:start="139:41" pos:end="139:42">MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="143:50"><expr pos:start="141:5" pos:end="143:49"><call pos:start="141:5" pos:end="143:49"><name pos:start="141:5" pos:end="141:31">memory_region_add_subregion</name><argument_list pos:start="141:32" pos:end="143:49">(<argument pos:start="141:33" pos:end="141:42"><expr pos:start="141:33" pos:end="141:42"><name pos:start="141:33" pos:end="141:42">addr_space</name></expr></argument>, <argument pos:start="141:45" pos:end="141:60"><expr pos:start="141:45" pos:end="141:60"><literal type="number" pos:start="141:45" pos:end="141:60">0x801fc000000ULL</literal></expr></argument>,

                                <argument pos:start="143:33" pos:end="143:48"><expr pos:start="143:33" pos:end="143:48"><operator pos:start="143:33" pos:end="143:33">&amp;</operator><name pos:start="143:34" pos:end="143:48"><name pos:start="143:34" pos:end="143:34">s</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:41">pchip</name><operator pos:start="143:42" pos:end="143:42">.</operator><name pos:start="143:43" pos:end="143:48">reg_io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="151:66"><expr pos:start="147:5" pos:end="151:65"><name pos:start="147:5" pos:end="147:5">b</name> <operator pos:start="147:7" pos:end="147:7">=</operator> <call pos:start="147:9" pos:end="151:65"><name pos:start="147:9" pos:end="147:24">pci_register_bus</name><argument_list pos:start="147:25" pos:end="151:65">(<argument pos:start="147:26" pos:end="147:28"><expr pos:start="147:26" pos:end="147:28"><name pos:start="147:26" pos:end="147:28">dev</name></expr></argument>, <argument pos:start="147:31" pos:end="147:35"><expr pos:start="147:31" pos:end="147:35"><literal type="string" pos:start="147:31" pos:end="147:35">"pci"</literal></expr></argument>,

                         <argument pos:start="149:26" pos:end="149:40"><expr pos:start="149:26" pos:end="149:40"><name pos:start="149:26" pos:end="149:40">typhoon_set_irq</name></expr></argument>, <argument pos:start="149:43" pos:end="149:53"><expr pos:start="149:43" pos:end="149:53"><name pos:start="149:43" pos:end="149:53">sys_map_irq</name></expr></argument>, <argument pos:start="149:56" pos:end="149:56"><expr pos:start="149:56" pos:end="149:56"><name pos:start="149:56" pos:end="149:56">s</name></expr></argument>,

                         <argument pos:start="151:26" pos:end="151:42"><expr pos:start="151:26" pos:end="151:42"><operator pos:start="151:26" pos:end="151:26">&amp;</operator><name pos:start="151:27" pos:end="151:42"><name pos:start="151:27" pos:end="151:27">s</name><operator pos:start="151:28" pos:end="151:29">-&gt;</operator><name pos:start="151:30" pos:end="151:34">pchip</name><operator pos:start="151:35" pos:end="151:35">.</operator><name pos:start="151:36" pos:end="151:42">reg_mem</name></name></expr></argument>, <argument pos:start="151:45" pos:end="151:57"><expr pos:start="151:45" pos:end="151:57"><name pos:start="151:45" pos:end="151:57">addr_space_io</name></expr></argument>, <argument pos:start="151:60" pos:end="151:60"><expr pos:start="151:60" pos:end="151:60"><literal type="number" pos:start="151:60" pos:end="151:60">0</literal></expr></argument>, <argument pos:start="151:63" pos:end="151:64"><expr pos:start="151:63" pos:end="151:64"><literal type="number" pos:start="151:63" pos:end="151:64">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:17"><expr pos:start="153:5" pos:end="153:16"><name pos:start="153:5" pos:end="153:12"><name pos:start="153:5" pos:end="153:7">phb</name><operator pos:start="153:8" pos:end="153:9">-&gt;</operator><name pos:start="153:10" pos:end="153:12">bus</name></name> <operator pos:start="153:14" pos:end="153:14">=</operator> <name pos:start="153:16" pos:end="153:16">b</name></expr>;</expr_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:75">/* Pchip0 PCI special/interrupt acknowledge, 0x801.F800.0000, 64MB.  */</comment>

    <expr_stmt pos:start="159:5" pos:end="161:46"><expr pos:start="159:5" pos:end="161:45"><call pos:start="159:5" pos:end="161:45"><name pos:start="159:5" pos:end="159:25">memory_region_init_io</name><argument_list pos:start="159:26" pos:end="161:45">(<argument pos:start="159:27" pos:end="159:44"><expr pos:start="159:27" pos:end="159:44"><operator pos:start="159:27" pos:end="159:27">&amp;</operator><name pos:start="159:28" pos:end="159:44"><name pos:start="159:28" pos:end="159:28">s</name><operator pos:start="159:29" pos:end="159:30">-&gt;</operator><name pos:start="159:31" pos:end="159:35">pchip</name><operator pos:start="159:36" pos:end="159:36">.</operator><name pos:start="159:37" pos:end="159:44">reg_iack</name></name></expr></argument>, <argument pos:start="159:47" pos:end="159:65"><expr pos:start="159:47" pos:end="159:65"><operator pos:start="159:47" pos:end="159:47">&amp;</operator><name pos:start="159:48" pos:end="159:65">alpha_pci_iack_ops</name></expr></argument>, <argument pos:start="159:68" pos:end="159:68"><expr pos:start="159:68" pos:end="159:68"><name pos:start="159:68" pos:end="159:68">b</name></expr></argument>,

                          <argument pos:start="161:27" pos:end="161:37"><expr pos:start="161:27" pos:end="161:37"><literal type="string" pos:start="161:27" pos:end="161:37">"pci0-iack"</literal></expr></argument>, <argument pos:start="161:40" pos:end="161:44"><expr pos:start="161:40" pos:end="161:44"><literal type="number" pos:start="161:40" pos:end="161:41">64</literal><operator pos:start="161:42" pos:end="161:42">*</operator><name pos:start="161:43" pos:end="161:44">MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="165:52"><expr pos:start="163:5" pos:end="165:51"><call pos:start="163:5" pos:end="165:51"><name pos:start="163:5" pos:end="163:31">memory_region_add_subregion</name><argument_list pos:start="163:32" pos:end="165:51">(<argument pos:start="163:33" pos:end="163:42"><expr pos:start="163:33" pos:end="163:42"><name pos:start="163:33" pos:end="163:42">addr_space</name></expr></argument>, <argument pos:start="163:45" pos:end="163:60"><expr pos:start="163:45" pos:end="163:60"><literal type="number" pos:start="163:45" pos:end="163:60">0x801f8000000ULL</literal></expr></argument>,

                                <argument pos:start="165:33" pos:end="165:50"><expr pos:start="165:33" pos:end="165:50"><operator pos:start="165:33" pos:end="165:33">&amp;</operator><name pos:start="165:34" pos:end="165:50"><name pos:start="165:34" pos:end="165:34">s</name><operator pos:start="165:35" pos:end="165:36">-&gt;</operator><name pos:start="165:37" pos:end="165:41">pchip</name><operator pos:start="165:42" pos:end="165:42">.</operator><name pos:start="165:43" pos:end="165:50">reg_iack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:59">/* Pchip0 PCI configuration, 0x801.FE00.0000, 16MB.  */</comment>

    <expr_stmt pos:start="171:5" pos:end="173:46"><expr pos:start="171:5" pos:end="173:45"><call pos:start="171:5" pos:end="173:45"><name pos:start="171:5" pos:end="171:25">memory_region_init_io</name><argument_list pos:start="171:26" pos:end="173:45">(<argument pos:start="171:27" pos:end="171:44"><expr pos:start="171:27" pos:end="171:44"><operator pos:start="171:27" pos:end="171:27">&amp;</operator><name pos:start="171:28" pos:end="171:44"><name pos:start="171:28" pos:end="171:28">s</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:35">pchip</name><operator pos:start="171:36" pos:end="171:36">.</operator><name pos:start="171:37" pos:end="171:44">reg_conf</name></name></expr></argument>, <argument pos:start="171:47" pos:end="171:66"><expr pos:start="171:47" pos:end="171:66"><operator pos:start="171:47" pos:end="171:47">&amp;</operator><name pos:start="171:48" pos:end="171:66">alpha_pci_conf1_ops</name></expr></argument>, <argument pos:start="171:69" pos:end="171:69"><expr pos:start="171:69" pos:end="171:69"><name pos:start="171:69" pos:end="171:69">b</name></expr></argument>,

                          <argument pos:start="173:27" pos:end="173:37"><expr pos:start="173:27" pos:end="173:37"><literal type="string" pos:start="173:27" pos:end="173:37">"pci0-conf"</literal></expr></argument>, <argument pos:start="173:40" pos:end="173:44"><expr pos:start="173:40" pos:end="173:44"><literal type="number" pos:start="173:40" pos:end="173:41">16</literal><operator pos:start="173:42" pos:end="173:42">*</operator><name pos:start="173:43" pos:end="173:44">MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="177:52"><expr pos:start="175:5" pos:end="177:51"><call pos:start="175:5" pos:end="177:51"><name pos:start="175:5" pos:end="175:31">memory_region_add_subregion</name><argument_list pos:start="175:32" pos:end="177:51">(<argument pos:start="175:33" pos:end="175:42"><expr pos:start="175:33" pos:end="175:42"><name pos:start="175:33" pos:end="175:42">addr_space</name></expr></argument>, <argument pos:start="175:45" pos:end="175:60"><expr pos:start="175:45" pos:end="175:60"><literal type="number" pos:start="175:45" pos:end="175:60">0x801fe000000ULL</literal></expr></argument>,

                                <argument pos:start="177:33" pos:end="177:50"><expr pos:start="177:33" pos:end="177:50"><operator pos:start="177:33" pos:end="177:33">&amp;</operator><name pos:start="177:34" pos:end="177:50"><name pos:start="177:34" pos:end="177:34">s</name><operator pos:start="177:35" pos:end="177:36">-&gt;</operator><name pos:start="177:37" pos:end="177:41">pchip</name><operator pos:start="177:42" pos:end="177:42">.</operator><name pos:start="177:43" pos:end="177:50">reg_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="181:5" pos:end="185:65">/* For the record, these are the mappings for the second PCI bus.

       We can get away with not implementing them because we indicate

       via the Cchip.CSC&lt;PIP&gt; bit that Pchip1 is not present.  */</comment>

    <comment type="block" pos:start="187:5" pos:end="187:51">/* Pchip1 PCI memory, 0x802.0000.0000, 4GB.  */</comment>

    <comment type="block" pos:start="189:5" pos:end="189:47">/* Pchip1 CSRs, 0x802.8000.0000, 256MB.  */</comment>

    <comment type="block" pos:start="191:5" pos:end="191:75">/* Pchip1 PCI special/interrupt acknowledge, 0x802.F800.0000, 64MB.  */</comment>

    <comment type="block" pos:start="193:5" pos:end="193:49">/* Pchip1 PCI I/O, 0x802.FC00.0000, 32MB.  */</comment>

    <comment type="block" pos:start="195:5" pos:end="195:59">/* Pchip1 PCI configuration, 0x802.FE00.0000, 16MB.  */</comment>



    <comment type="block" pos:start="199:5" pos:end="199:28">/* Init the ISA bus.  */</comment>

    <comment type="block" pos:start="201:5" pos:end="201:71">/* ??? Technically there should be a cy82c693ub pci-isa bridge.  */</comment>

    <block pos:start="203:5" pos:end="217:5">{<block_content pos:start="205:9" pos:end="215:41">

        <decl_stmt pos:start="205:9" pos:end="205:40"><decl pos:start="205:9" pos:end="205:28"><type pos:start="205:9" pos:end="205:16"><name pos:start="205:9" pos:end="205:16">qemu_irq</name></type> <name pos:start="205:18" pos:end="205:28">isa_pci_irq</name></decl>, <decl pos:start="205:31" pos:end="205:39"><type ref="prev" pos:start="205:9" pos:end="205:16"><modifier pos:start="205:31" pos:end="205:31">*</modifier></type><name pos:start="205:32" pos:end="205:39">isa_irqs</name></decl>;</decl_stmt>



        <expr_stmt pos:start="209:9" pos:end="209:52"><expr pos:start="209:9" pos:end="209:51"><operator pos:start="209:9" pos:end="209:9">*</operator><name pos:start="209:10" pos:end="209:16">isa_bus</name> <operator pos:start="209:18" pos:end="209:18">=</operator> <call pos:start="209:20" pos:end="209:51"><name pos:start="209:20" pos:end="209:30">isa_bus_new</name><argument_list pos:start="209:31" pos:end="209:51">(<argument pos:start="209:32" pos:end="209:35"><expr pos:start="209:32" pos:end="209:35"><name pos:start="209:32" pos:end="209:35">NULL</name></expr></argument>, <argument pos:start="209:38" pos:end="209:50"><expr pos:start="209:38" pos:end="209:50"><name pos:start="209:38" pos:end="209:50">addr_space_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:69"><expr pos:start="211:9" pos:end="211:68"><name pos:start="211:9" pos:end="211:19">isa_pci_irq</name> <operator pos:start="211:21" pos:end="211:21">=</operator> <operator pos:start="211:23" pos:end="211:23">*</operator><call pos:start="211:24" pos:end="211:68"><name pos:start="211:24" pos:end="211:41">qemu_allocate_irqs</name><argument_list pos:start="211:42" pos:end="211:68">(<argument pos:start="211:43" pos:end="211:61"><expr pos:start="211:43" pos:end="211:61"><name pos:start="211:43" pos:end="211:61">typhoon_set_isa_irq</name></expr></argument>, <argument pos:start="211:64" pos:end="211:64"><expr pos:start="211:64" pos:end="211:64"><name pos:start="211:64" pos:end="211:64">s</name></expr></argument>, <argument pos:start="211:67" pos:end="211:67"><expr pos:start="211:67" pos:end="211:67"><literal type="number" pos:start="211:67" pos:end="211:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:53"><expr pos:start="213:9" pos:end="213:52"><name pos:start="213:9" pos:end="213:16">isa_irqs</name> <operator pos:start="213:18" pos:end="213:18">=</operator> <call pos:start="213:20" pos:end="213:52"><name pos:start="213:20" pos:end="213:29">i8259_init</name><argument_list pos:start="213:30" pos:end="213:52">(<argument pos:start="213:31" pos:end="213:38"><expr pos:start="213:31" pos:end="213:38"><operator pos:start="213:31" pos:end="213:31">*</operator><name pos:start="213:32" pos:end="213:38">isa_bus</name></expr></argument>, <argument pos:start="213:41" pos:end="213:51"><expr pos:start="213:41" pos:end="213:51"><name pos:start="213:41" pos:end="213:51">isa_pci_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:41"><expr pos:start="215:9" pos:end="215:40"><call pos:start="215:9" pos:end="215:40"><name pos:start="215:9" pos:end="215:20">isa_bus_irqs</name><argument_list pos:start="215:21" pos:end="215:40">(<argument pos:start="215:22" pos:end="215:29"><expr pos:start="215:22" pos:end="215:29"><operator pos:start="215:22" pos:end="215:22">*</operator><name pos:start="215:23" pos:end="215:29">isa_bus</name></expr></argument>, <argument pos:start="215:32" pos:end="215:39"><expr pos:start="215:32" pos:end="215:39"><name pos:start="215:32" pos:end="215:39">isa_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <return pos:start="221:5" pos:end="221:13">return <expr pos:start="221:12" pos:end="221:12"><name pos:start="221:12" pos:end="221:12">b</name></expr>;</return>

</block_content>}</block></function>
</unit>
