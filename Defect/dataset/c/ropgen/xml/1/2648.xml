<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2648.c" pos:tabs="8"><function pos:start="1:1" pos:end="621:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">transcode</name><parameter_list pos:start="1:21" pos:end="7:40">(<parameter pos:start="1:22" pos:end="1:45"><decl pos:start="1:22" pos:end="1:45"><type pos:start="1:22" pos:end="1:45"><name pos:start="1:22" pos:end="1:31">OutputFile</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:45">output_files</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:40"><decl pos:start="3:22" pos:end="3:40"><type pos:start="3:22" pos:end="3:40"><name pos:start="3:22" pos:end="3:24">int</name></type> <name pos:start="3:26" pos:end="3:40">nb_output_files</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:43"><decl pos:start="5:22" pos:end="5:43"><type pos:start="5:22" pos:end="5:43"><name pos:start="5:22" pos:end="5:30">InputFile</name> <modifier pos:start="5:32" pos:end="5:32">*</modifier></type><name pos:start="5:33" pos:end="5:43">input_files</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:39"><decl pos:start="7:22" pos:end="7:39"><type pos:start="7:22" pos:end="7:39"><name pos:start="7:22" pos:end="7:24">int</name></type> <name pos:start="7:26" pos:end="7:39">nb_input_files</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="621:1">{<block_content pos:start="11:5" pos:end="619:15">

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">AVFormatContext</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:23">is</name></decl>, <decl pos:start="13:26" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:21"><modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:28">os</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">OutputStream</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">ost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">InputStream</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">ist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:22">no_packet</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:23">no_packet_count</name><init pos:start="21:24" pos:end="21:25">=<expr pos:start="21:25" pos:end="21:25"><literal type="number" pos:start="21:25" pos:end="21:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:23">timer_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:12"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">key</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:24"><if pos:start="29:5" pos:end="31:24">if <condition pos:start="29:8" pos:end="29:50">(<expr pos:start="29:9" pos:end="29:49"><operator pos:start="29:9" pos:end="29:9">!</operator><operator pos:start="29:10" pos:end="29:10">(</operator><name pos:start="29:11" pos:end="29:19">no_packet</name> <operator pos:start="29:21" pos:end="29:21">=</operator> <call pos:start="29:23" pos:end="29:48"><name pos:start="29:23" pos:end="29:32">av_mallocz</name><argument_list pos:start="29:33" pos:end="29:48">(<argument pos:start="29:34" pos:end="29:47"><expr pos:start="29:34" pos:end="29:47"><name pos:start="29:34" pos:end="29:47">nb_input_files</name></expr></argument>)</argument_list></call><operator pos:start="29:49" pos:end="29:49">)</operator></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:24"><block_content pos:start="31:9" pos:end="31:24">

        <expr_stmt pos:start="31:9" pos:end="31:24"><expr pos:start="31:9" pos:end="31:23"><call pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:20">exit_program</name><argument_list pos:start="31:21" pos:end="31:23">(<argument pos:start="31:22" pos:end="31:22"><expr pos:start="31:22" pos:end="31:22"><literal type="number" pos:start="31:22" pos:end="31:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:85"><expr pos:start="35:5" pos:end="35:84"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:84"><name pos:start="35:11" pos:end="35:24">transcode_init</name><argument_list pos:start="35:25" pos:end="35:84">(<argument pos:start="35:26" pos:end="35:37"><expr pos:start="35:26" pos:end="35:37"><name pos:start="35:26" pos:end="35:37">output_files</name></expr></argument>, <argument pos:start="35:40" pos:end="35:54"><expr pos:start="35:40" pos:end="35:54"><name pos:start="35:40" pos:end="35:54">nb_output_files</name></expr></argument>, <argument pos:start="35:57" pos:end="35:67"><expr pos:start="35:57" pos:end="35:67"><name pos:start="35:57" pos:end="35:67">input_files</name></expr></argument>, <argument pos:start="35:70" pos:end="35:83"><expr pos:start="35:70" pos:end="35:83"><name pos:start="35:70" pos:end="35:83">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:18"><if pos:start="37:5" pos:end="39:18">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:18"><block_content pos:start="39:9" pos:end="39:18">

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:21">(<expr pos:start="43:9" pos:end="43:20"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:20">using_stdin</name></expr>)</condition> <block pos:start="43:23" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:51">

        <if_stmt pos:start="45:9" pos:end="47:65"><if pos:start="45:9" pos:end="47:65">if<condition pos:start="45:11" pos:end="45:24">(<expr pos:start="45:12" pos:end="45:23"><name pos:start="45:12" pos:end="45:18">verbose</name> <operator pos:start="45:20" pos:end="45:21">&gt;=</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:65"><block_content pos:start="47:13" pos:end="47:65">

            <expr_stmt pos:start="47:13" pos:end="47:65"><expr pos:start="47:13" pos:end="47:64"><call pos:start="47:13" pos:end="47:64"><name pos:start="47:13" pos:end="47:19">fprintf</name><argument_list pos:start="47:20" pos:end="47:64">(<argument pos:start="47:21" pos:end="47:26"><expr pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:26">stderr</name></expr></argument>, <argument pos:start="47:29" pos:end="47:63"><expr pos:start="47:29" pos:end="47:63"><literal type="string" pos:start="47:29" pos:end="47:63">"Press [q] to stop, [?] for help\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:51"><expr pos:start="49:9" pos:end="49:50"><call pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:29">avio_set_interrupt_cb</name><argument_list pos:start="49:30" pos:end="49:50">(<argument pos:start="49:31" pos:end="49:49"><expr pos:start="49:31" pos:end="49:49"><name pos:start="49:31" pos:end="49:49">decode_interrupt_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:16"><expr pos:start="53:5" pos:end="53:15"><call pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:13">term_init</name><argument_list pos:start="53:14" pos:end="53:15">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:15">timer_start</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="57:30"><name pos:start="57:19" pos:end="57:28">av_gettime</name><argument_list pos:start="57:29" pos:end="57:30">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="61:5" pos:end="471:5">for<control pos:start="61:8" pos:end="61:33">(<init pos:start="61:9" pos:end="61:9">;</init> <condition pos:start="61:11" pos:end="61:32"><expr pos:start="61:11" pos:end="61:31"><name pos:start="61:11" pos:end="61:26">received_sigterm</name> <operator pos:start="61:28" pos:end="61:29">==</operator> <literal type="number" pos:start="61:31" pos:end="61:31">0</literal></expr>;</condition><incr/>)</control> <block pos:start="61:35" pos:end="471:5">{<block_content pos:start="63:9" pos:end="469:86">

        <decl_stmt pos:start="63:9" pos:end="63:34"><decl pos:start="63:9" pos:end="63:22"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:22">file_index</name></decl>, <decl pos:start="63:25" pos:end="63:33"><type ref="prev" pos:start="63:9" pos:end="63:11"/><name pos:start="63:25" pos:end="63:33">ist_index</name></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:21"><decl pos:start="65:9" pos:end="65:20"><type pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">AVPacket</name></type> <name pos:start="65:18" pos:end="65:20">pkt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:25"><decl pos:start="67:9" pos:end="67:24"><type pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:15">int64_t</name></type> <name pos:start="67:17" pos:end="67:24">ipts_min</name></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:24"><decl pos:start="69:9" pos:end="69:23"><type pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:14">double</name></type> <name pos:start="69:16" pos:end="69:23">opts_min</name></decl>;</decl_stmt>



    <label pos:start="73:5" pos:end="73:9"><name pos:start="73:5" pos:end="73:8">redo</name>:</label>

        <expr_stmt pos:start="75:9" pos:end="75:28"><expr pos:start="75:9" pos:end="75:27"><name pos:start="75:9" pos:end="75:16">ipts_min</name><operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:27">INT64_MAX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:24"><expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:16">opts_min</name><operator pos:start="77:17" pos:end="77:17">=</operator> <literal type="number" pos:start="77:19" pos:end="77:23">1e100</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="79:9" pos:end="79:35">/* if 'q' pressed, exits */</comment>

        <if_stmt pos:start="81:9" pos:end="223:9"><if pos:start="81:9" pos:end="223:9">if <condition pos:start="81:12" pos:end="81:25">(<expr pos:start="81:13" pos:end="81:24"><operator pos:start="81:13" pos:end="81:13">!</operator><name pos:start="81:14" pos:end="81:24">using_stdin</name></expr>)</condition> <block pos:start="81:27" pos:end="223:9">{<block_content pos:start="83:13" pos:end="221:13">

            <if_stmt pos:start="83:13" pos:end="85:22"><if pos:start="83:13" pos:end="85:22">if <condition pos:start="83:16" pos:end="83:26">(<expr pos:start="83:17" pos:end="83:25"><name pos:start="83:17" pos:end="83:25">q_pressed</name></expr>)</condition><block type="pseudo" pos:start="85:17" pos:end="85:22"><block_content pos:start="85:17" pos:end="85:22">

                <break pos:start="85:17" pos:end="85:22">break;</break></block_content></block></if></if_stmt>

            <comment type="block" pos:start="87:13" pos:end="87:45">/* read_key() returns 0 on EOF */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:29"><expr pos:start="89:13" pos:end="89:28"><name pos:start="89:13" pos:end="89:15">key</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:28"><name pos:start="89:19" pos:end="89:26">read_key</name><argument_list pos:start="89:27" pos:end="89:28">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="93:22"><if pos:start="91:13" pos:end="93:22">if <condition pos:start="91:16" pos:end="91:27">(<expr pos:start="91:17" pos:end="91:26"><name pos:start="91:17" pos:end="91:19">key</name> <operator pos:start="91:21" pos:end="91:22">==</operator> <literal type="char" pos:start="91:24" pos:end="91:26">'q'</literal></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:22"><block_content pos:start="93:17" pos:end="93:22">

                <break pos:start="93:17" pos:end="93:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="95:13" pos:end="95:38"><if pos:start="95:13" pos:end="95:38">if <condition pos:start="95:16" pos:end="95:27">(<expr pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:19">key</name> <operator pos:start="95:21" pos:end="95:22">==</operator> <literal type="char" pos:start="95:24" pos:end="95:26">'+'</literal></expr>)</condition><block type="pseudo" pos:start="95:29" pos:end="95:38"><block_content pos:start="95:29" pos:end="95:38"> <expr_stmt pos:start="95:29" pos:end="95:38"><expr pos:start="95:29" pos:end="95:37"><name pos:start="95:29" pos:end="95:35">verbose</name><operator pos:start="95:36" pos:end="95:37">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="97:13" pos:end="97:38"><if pos:start="97:13" pos:end="97:38">if <condition pos:start="97:16" pos:end="97:27">(<expr pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:19">key</name> <operator pos:start="97:21" pos:end="97:22">==</operator> <literal type="char" pos:start="97:24" pos:end="97:26">'-'</literal></expr>)</condition><block type="pseudo" pos:start="97:29" pos:end="97:38"><block_content pos:start="97:29" pos:end="97:38"> <expr_stmt pos:start="97:29" pos:end="97:38"><expr pos:start="97:29" pos:end="97:37"><name pos:start="97:29" pos:end="97:35">verbose</name><operator pos:start="97:36" pos:end="97:37">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="99:13" pos:end="99:45"><if pos:start="99:13" pos:end="99:45">if <condition pos:start="99:16" pos:end="99:27">(<expr pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:19">key</name> <operator pos:start="99:21" pos:end="99:22">==</operator> <literal type="char" pos:start="99:24" pos:end="99:26">'s'</literal></expr>)</condition><block type="pseudo" pos:start="99:29" pos:end="99:45"><block_content pos:start="99:29" pos:end="99:45"> <expr_stmt pos:start="99:29" pos:end="99:45"><expr pos:start="99:29" pos:end="99:44"><name pos:start="99:29" pos:end="99:35">qp_hist</name>     <operator pos:start="99:41" pos:end="99:42">^=</operator> <literal type="number" pos:start="99:44" pos:end="99:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="101:13" pos:end="117:13"><if pos:start="101:13" pos:end="117:13">if <condition pos:start="101:16" pos:end="101:27">(<expr pos:start="101:17" pos:end="101:26"><name pos:start="101:17" pos:end="101:19">key</name> <operator pos:start="101:21" pos:end="101:22">==</operator> <literal type="char" pos:start="101:24" pos:end="101:26">'h'</literal></expr>)</condition><block pos:start="101:28" pos:end="117:13">{<block_content pos:start="103:17" pos:end="115:47">

                <if_stmt pos:start="103:17" pos:end="113:36"><if pos:start="103:17" pos:end="107:17">if <condition pos:start="103:20" pos:end="103:32">(<expr pos:start="103:21" pos:end="103:31"><name pos:start="103:21" pos:end="103:31">do_hex_dump</name></expr>)</condition><block pos:start="103:33" pos:end="107:17">{<block_content pos:start="105:21" pos:end="105:50">

                    <expr_stmt pos:start="105:21" pos:end="105:50"><expr pos:start="105:21" pos:end="105:49"><name pos:start="105:21" pos:end="105:31">do_hex_dump</name> <operator pos:start="105:33" pos:end="105:33">=</operator> <name pos:start="105:35" pos:end="105:45">do_pkt_dump</name> <operator pos:start="105:47" pos:end="105:47">=</operator> <literal type="number" pos:start="105:49" pos:end="105:49">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="107:19" pos:end="111:17">else if<condition pos:start="107:26" pos:end="107:38">(<expr pos:start="107:27" pos:end="107:37"><name pos:start="107:27" pos:end="107:37">do_pkt_dump</name></expr>)</condition><block pos:start="107:39" pos:end="111:17">{<block_content pos:start="109:21" pos:end="109:36">

                    <expr_stmt pos:start="109:21" pos:end="109:36"><expr pos:start="109:21" pos:end="109:35"><name pos:start="109:21" pos:end="109:31">do_hex_dump</name> <operator pos:start="109:33" pos:end="109:33">=</operator> <literal type="number" pos:start="109:35" pos:end="109:35">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="111:19" pos:end="113:36">else<block type="pseudo" pos:start="113:21" pos:end="113:36"><block_content pos:start="113:21" pos:end="113:36">

                    <expr_stmt pos:start="113:21" pos:end="113:36"><expr pos:start="113:21" pos:end="113:35"><name pos:start="113:21" pos:end="113:31">do_pkt_dump</name> <operator pos:start="113:33" pos:end="113:33">=</operator> <literal type="number" pos:start="113:35" pos:end="113:35">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:47"><expr pos:start="115:17" pos:end="115:46"><call pos:start="115:17" pos:end="115:46"><name pos:start="115:17" pos:end="115:32">av_log_set_level</name><argument_list pos:start="115:33" pos:end="115:46">(<argument pos:start="115:34" pos:end="115:45"><expr pos:start="115:34" pos:end="115:45"><name pos:start="115:34" pos:end="115:45">AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="119:13" pos:end="159:13"><if pos:start="119:13" pos:end="159:13">if <condition pos:start="119:16" pos:end="119:41">(<expr pos:start="119:17" pos:end="119:40"><name pos:start="119:17" pos:end="119:19">key</name> <operator pos:start="119:21" pos:end="119:22">==</operator> <literal type="char" pos:start="119:24" pos:end="119:26">'c'</literal> <operator pos:start="119:28" pos:end="119:29">||</operator> <name pos:start="119:31" pos:end="119:33">key</name> <operator pos:start="119:35" pos:end="119:36">==</operator> <literal type="char" pos:start="119:38" pos:end="119:40">'C'</literal></expr>)</condition><block pos:start="119:42" pos:end="159:13">{<block_content pos:start="121:17" pos:end="157:17">

                <decl_stmt pos:start="121:17" pos:end="121:67"><decl pos:start="121:17" pos:end="121:30"><type pos:start="121:17" pos:end="121:20"><name pos:start="121:17" pos:end="121:20">char</name></type> <name pos:start="121:22" pos:end="121:30"><name pos:start="121:22" pos:end="121:24">ret</name><index pos:start="121:25" pos:end="121:30">[<expr pos:start="121:26" pos:end="121:29"><literal type="number" pos:start="121:26" pos:end="121:29">4096</literal></expr>]</index></name></decl>, <decl pos:start="121:33" pos:end="121:42"><type ref="prev" pos:start="121:17" pos:end="121:20"/><name pos:start="121:33" pos:end="121:42"><name pos:start="121:33" pos:end="121:38">target</name><index pos:start="121:39" pos:end="121:42">[<expr pos:start="121:40" pos:end="121:41"><literal type="number" pos:start="121:40" pos:end="121:41">64</literal></expr>]</index></name></decl>, <decl pos:start="121:45" pos:end="121:52"><type ref="prev" pos:start="121:17" pos:end="121:20"/><name pos:start="121:45" pos:end="121:52"><name pos:start="121:45" pos:end="121:47">cmd</name><index pos:start="121:48" pos:end="121:52">[<expr pos:start="121:49" pos:end="121:51"><literal type="number" pos:start="121:49" pos:end="121:51">256</literal></expr>]</index></name></decl>, <decl pos:start="121:55" pos:end="121:66"><type ref="prev" pos:start="121:17" pos:end="121:20"/><name pos:start="121:55" pos:end="121:62"><name pos:start="121:55" pos:end="121:57">arg</name><index pos:start="121:58" pos:end="121:62">[<expr pos:start="121:59" pos:end="121:61"><literal type="number" pos:start="121:59" pos:end="121:61">256</literal></expr>]</index></name><init pos:start="121:63" pos:end="121:66">=<expr pos:start="121:64" pos:end="121:66"><block pos:start="121:64" pos:end="121:66">{<expr pos:start="121:65" pos:end="121:65"><literal type="number" pos:start="121:65" pos:end="121:65">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="123:17" pos:end="123:26"><decl pos:start="123:17" pos:end="123:25"><type pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:22">double</name></type> <name pos:start="123:24" pos:end="123:25">ts</name></decl>;</decl_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:93"><expr pos:start="125:17" pos:end="125:92"><call pos:start="125:17" pos:end="125:92"><name pos:start="125:17" pos:end="125:23">fprintf</name><argument_list pos:start="125:24" pos:end="125:92">(<argument pos:start="125:25" pos:end="125:30"><expr pos:start="125:25" pos:end="125:30"><name pos:start="125:25" pos:end="125:30">stderr</name></expr></argument>, <argument pos:start="125:33" pos:end="125:91"><expr pos:start="125:33" pos:end="125:91"><literal type="string" pos:start="125:33" pos:end="125:91">"\nEnter command: &lt;target&gt; &lt;time&gt; &lt;command&gt;[ &lt;argument&gt;]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="127:17" pos:end="157:17"><if pos:start="127:17" pos:end="153:17">if<condition pos:start="127:19" pos:end="127:131">(<expr pos:start="127:20" pos:end="127:130"><call pos:start="127:20" pos:end="127:48"><name pos:start="127:20" pos:end="127:24">scanf</name><argument_list pos:start="127:25" pos:end="127:48">(<argument pos:start="127:26" pos:end="127:42"><expr pos:start="127:26" pos:end="127:42"><literal type="string" pos:start="127:26" pos:end="127:42">"%4095[^\n\r]%*c"</literal></expr></argument>, <argument pos:start="127:45" pos:end="127:47"><expr pos:start="127:45" pos:end="127:47"><name pos:start="127:45" pos:end="127:47">ret</name></expr></argument>)</argument_list></call> <operator pos:start="127:50" pos:end="127:51">==</operator> <literal type="number" pos:start="127:53" pos:end="127:53">1</literal> <operator pos:start="127:55" pos:end="127:56">&amp;&amp;</operator> <call pos:start="127:58" pos:end="127:125"><name pos:start="127:58" pos:end="127:63">sscanf</name><argument_list pos:start="127:64" pos:end="127:125">(<argument pos:start="127:65" pos:end="127:67"><expr pos:start="127:65" pos:end="127:67"><name pos:start="127:65" pos:end="127:67">ret</name></expr></argument>, <argument pos:start="127:70" pos:end="127:101"><expr pos:start="127:70" pos:end="127:101"><literal type="string" pos:start="127:70" pos:end="127:101">"%63[^ ] %lf %255[^ ] %255[^\n]"</literal></expr></argument>, <argument pos:start="127:104" pos:end="127:109"><expr pos:start="127:104" pos:end="127:109"><name pos:start="127:104" pos:end="127:109">target</name></expr></argument>, <argument pos:start="127:112" pos:end="127:114"><expr pos:start="127:112" pos:end="127:114"><operator pos:start="127:112" pos:end="127:112">&amp;</operator><name pos:start="127:113" pos:end="127:114">ts</name></expr></argument>, <argument pos:start="127:117" pos:end="127:119"><expr pos:start="127:117" pos:end="127:119"><name pos:start="127:117" pos:end="127:119">cmd</name></expr></argument>, <argument pos:start="127:122" pos:end="127:124"><expr pos:start="127:122" pos:end="127:124"><name pos:start="127:122" pos:end="127:124">arg</name></expr></argument>)</argument_list></call> <operator pos:start="127:127" pos:end="127:128">&gt;=</operator> <literal type="number" pos:start="127:130" pos:end="127:130">3</literal></expr>)</condition><block pos:start="127:132" pos:end="153:17">{<block_content pos:start="129:21" pos:end="151:21">

                    <for pos:start="129:21" pos:end="151:21">for<control pos:start="129:24" pos:end="129:52">(<init pos:start="129:25" pos:end="129:28"><expr pos:start="129:25" pos:end="129:27"><name pos:start="129:25" pos:end="129:25">i</name><operator pos:start="129:26" pos:end="129:26">=</operator><literal type="number" pos:start="129:27" pos:end="129:27">0</literal></expr>;</init><condition pos:start="129:29" pos:end="129:48"><expr pos:start="129:29" pos:end="129:47"><name pos:start="129:29" pos:end="129:29">i</name><operator pos:start="129:30" pos:end="129:30">&lt;</operator><name pos:start="129:31" pos:end="129:47">nb_output_streams</name></expr>;</condition><incr pos:start="129:49" pos:end="129:51"><expr pos:start="129:49" pos:end="129:51"><name pos:start="129:49" pos:end="129:49">i</name><operator pos:start="129:50" pos:end="129:51">++</operator></expr></incr>)</control> <block pos:start="129:54" pos:end="151:21">{<block_content pos:start="131:25" pos:end="149:25">

                        <decl_stmt pos:start="131:25" pos:end="131:30"><decl pos:start="131:25" pos:end="131:29"><type pos:start="131:25" pos:end="131:27"><name pos:start="131:25" pos:end="131:27">int</name></type> <name pos:start="131:29" pos:end="131:29">r</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="133:25" pos:end="133:49"><expr pos:start="133:25" pos:end="133:48"><name pos:start="133:25" pos:end="133:27">ost</name> <operator pos:start="133:29" pos:end="133:29">=</operator> <operator pos:start="133:31" pos:end="133:31">&amp;</operator><name pos:start="133:32" pos:end="133:48"><name pos:start="133:32" pos:end="133:45">output_streams</name><index pos:start="133:46" pos:end="133:48">[<expr pos:start="133:47" pos:end="133:47"><name pos:start="133:47" pos:end="133:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                        <if_stmt pos:start="135:25" pos:end="149:25"><if pos:start="135:25" pos:end="149:25">if<condition pos:start="135:27" pos:end="135:38">(<expr pos:start="135:28" pos:end="135:37"><name pos:start="135:28" pos:end="135:37"><name pos:start="135:28" pos:end="135:30">ost</name><operator pos:start="135:31" pos:end="135:32">-&gt;</operator><name pos:start="135:33" pos:end="135:37">graph</name></name></expr>)</condition><block pos:start="135:39" pos:end="149:25">{<block_content pos:start="137:29" pos:end="147:29">

                            <if_stmt pos:start="137:29" pos:end="147:29"><if pos:start="137:29" pos:end="143:29">if<condition pos:start="137:31" pos:end="137:36">(<expr pos:start="137:32" pos:end="137:35"><name pos:start="137:32" pos:end="137:33">ts</name><operator pos:start="137:34" pos:end="137:34">&lt;</operator><literal type="number" pos:start="137:35" pos:end="137:35">0</literal></expr>)</condition><block pos:start="137:37" pos:end="143:29">{<block_content pos:start="139:33" pos:end="141:93">

                                <expr_stmt pos:start="139:33" pos:end="139:151"><expr pos:start="139:33" pos:end="139:150"><name pos:start="139:33" pos:end="139:33">r</name><operator pos:start="139:34" pos:end="139:34">=</operator> <call pos:start="139:36" pos:end="139:150"><name pos:start="139:36" pos:end="139:62">avfilter_graph_send_command</name><argument_list pos:start="139:63" pos:end="139:150">(<argument pos:start="139:64" pos:end="139:73"><expr pos:start="139:64" pos:end="139:73"><name pos:start="139:64" pos:end="139:73"><name pos:start="139:64" pos:end="139:66">ost</name><operator pos:start="139:67" pos:end="139:68">-&gt;</operator><name pos:start="139:69" pos:end="139:73">graph</name></name></expr></argument>, <argument pos:start="139:76" pos:end="139:81"><expr pos:start="139:76" pos:end="139:81"><name pos:start="139:76" pos:end="139:81">target</name></expr></argument>, <argument pos:start="139:84" pos:end="139:86"><expr pos:start="139:84" pos:end="139:86"><name pos:start="139:84" pos:end="139:86">cmd</name></expr></argument>, <argument pos:start="139:89" pos:end="139:91"><expr pos:start="139:89" pos:end="139:91"><name pos:start="139:89" pos:end="139:91">arg</name></expr></argument>, <argument pos:start="139:94" pos:end="139:96"><expr pos:start="139:94" pos:end="139:96"><name pos:start="139:94" pos:end="139:96">ret</name></expr></argument>, <argument pos:start="139:99" pos:end="139:109"><expr pos:start="139:99" pos:end="139:109"><sizeof pos:start="139:99" pos:end="139:109">sizeof<argument_list pos:start="139:105" pos:end="139:109">(<argument pos:start="139:106" pos:end="139:108"><expr pos:start="139:106" pos:end="139:108"><name pos:start="139:106" pos:end="139:108">ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="139:112" pos:end="139:149"><expr pos:start="139:112" pos:end="139:149"><ternary pos:start="139:112" pos:end="139:149"><condition pos:start="139:112" pos:end="139:123"><expr pos:start="139:112" pos:end="139:121"><name pos:start="139:112" pos:end="139:114">key</name> <operator pos:start="139:116" pos:end="139:117">==</operator> <literal type="char" pos:start="139:119" pos:end="139:121">'c'</literal></expr> ?</condition><then pos:start="139:125" pos:end="139:145"> <expr pos:start="139:125" pos:end="139:145"><name pos:start="139:125" pos:end="139:145">AVFILTER_CMD_FLAG_ONE</name></expr> </then><else pos:start="139:147" pos:end="139:149">: <expr pos:start="139:149" pos:end="139:149"><literal type="number" pos:start="139:149" pos:end="139:149">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="141:33" pos:end="141:93"><expr pos:start="141:33" pos:end="141:92"><call pos:start="141:33" pos:end="141:92"><name pos:start="141:33" pos:end="141:39">fprintf</name><argument_list pos:start="141:40" pos:end="141:92">(<argument pos:start="141:41" pos:end="141:46"><expr pos:start="141:41" pos:end="141:46"><name pos:start="141:41" pos:end="141:46">stderr</name></expr></argument>, <argument pos:start="141:49" pos:end="141:80"><expr pos:start="141:49" pos:end="141:80"><literal type="string" pos:start="141:49" pos:end="141:80">"Command reply for %d: %d, %s\n"</literal></expr></argument>, <argument pos:start="141:83" pos:end="141:83"><expr pos:start="141:83" pos:end="141:83"><name pos:start="141:83" pos:end="141:83">i</name></expr></argument>, <argument pos:start="141:86" pos:end="141:86"><expr pos:start="141:86" pos:end="141:86"><name pos:start="141:86" pos:end="141:86">r</name></expr></argument>, <argument pos:start="141:89" pos:end="141:91"><expr pos:start="141:89" pos:end="141:91"><name pos:start="141:89" pos:end="141:91">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if><else pos:start="143:30" pos:end="147:29">else<block pos:start="143:34" pos:end="147:29">{<block_content pos:start="145:33" pos:end="145:101">

                                <expr_stmt pos:start="145:33" pos:end="145:101"><expr pos:start="145:33" pos:end="145:100"><name pos:start="145:33" pos:end="145:33">r</name><operator pos:start="145:34" pos:end="145:34">=</operator> <call pos:start="145:36" pos:end="145:100"><name pos:start="145:36" pos:end="145:63">avfilter_graph_queue_command</name><argument_list pos:start="145:64" pos:end="145:100">(<argument pos:start="145:65" pos:end="145:74"><expr pos:start="145:65" pos:end="145:74"><name pos:start="145:65" pos:end="145:74"><name pos:start="145:65" pos:end="145:67">ost</name><operator pos:start="145:68" pos:end="145:69">-&gt;</operator><name pos:start="145:70" pos:end="145:74">graph</name></name></expr></argument>, <argument pos:start="145:77" pos:end="145:82"><expr pos:start="145:77" pos:end="145:82"><name pos:start="145:77" pos:end="145:82">target</name></expr></argument>, <argument pos:start="145:85" pos:end="145:87"><expr pos:start="145:85" pos:end="145:87"><name pos:start="145:85" pos:end="145:87">cmd</name></expr></argument>, <argument pos:start="145:90" pos:end="145:92"><expr pos:start="145:90" pos:end="145:92"><name pos:start="145:90" pos:end="145:92">arg</name></expr></argument>, <argument pos:start="145:95" pos:end="145:95"><expr pos:start="145:95" pos:end="145:95"><literal type="number" pos:start="145:95" pos:end="145:95">0</literal></expr></argument>, <argument pos:start="145:98" pos:end="145:99"><expr pos:start="145:98" pos:end="145:99"><name pos:start="145:98" pos:end="145:99">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if><else pos:start="153:18" pos:end="157:17">else<block pos:start="153:22" pos:end="157:17">{<block_content pos:start="155:21" pos:end="155:53">

                    <expr_stmt pos:start="155:21" pos:end="155:53"><expr pos:start="155:21" pos:end="155:52"><call pos:start="155:21" pos:end="155:52"><name pos:start="155:21" pos:end="155:27">fprintf</name><argument_list pos:start="155:28" pos:end="155:52">(<argument pos:start="155:29" pos:end="155:34"><expr pos:start="155:29" pos:end="155:34"><name pos:start="155:29" pos:end="155:34">stderr</name></expr></argument>, <argument pos:start="155:37" pos:end="155:51"><expr pos:start="155:37" pos:end="155:51"><literal type="string" pos:start="155:37" pos:end="155:51">"Parse error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="161:13" pos:end="197:13"><if pos:start="161:13" pos:end="197:13">if <condition pos:start="161:16" pos:end="161:41">(<expr pos:start="161:17" pos:end="161:40"><name pos:start="161:17" pos:end="161:19">key</name> <operator pos:start="161:21" pos:end="161:22">==</operator> <literal type="char" pos:start="161:24" pos:end="161:26">'d'</literal> <operator pos:start="161:28" pos:end="161:29">||</operator> <name pos:start="161:31" pos:end="161:33">key</name> <operator pos:start="161:35" pos:end="161:36">==</operator> <literal type="char" pos:start="161:38" pos:end="161:40">'D'</literal></expr>)</condition><block pos:start="161:42" pos:end="197:13">{<block_content pos:start="163:17" pos:end="195:52">

                <decl_stmt pos:start="163:17" pos:end="163:28"><decl pos:start="163:17" pos:end="163:27"><type pos:start="163:17" pos:end="163:19"><name pos:start="163:17" pos:end="163:19">int</name></type> <name pos:start="163:21" pos:end="163:25">debug</name><init pos:start="163:26" pos:end="163:27">=<expr pos:start="163:27" pos:end="163:27"><literal type="number" pos:start="163:27" pos:end="163:27">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="165:17" pos:end="177:40"><if pos:start="165:17" pos:end="175:17">if<condition pos:start="165:19" pos:end="165:30">(<expr pos:start="165:20" pos:end="165:29"><name pos:start="165:20" pos:end="165:22">key</name> <operator pos:start="165:24" pos:end="165:25">==</operator> <literal type="char" pos:start="165:27" pos:end="165:29">'D'</literal></expr>)</condition> <block pos:start="165:32" pos:end="175:17">{<block_content pos:start="167:21" pos:end="173:39">

                    <expr_stmt pos:start="167:21" pos:end="167:65"><expr pos:start="167:21" pos:end="167:64"><name pos:start="167:21" pos:end="167:25">debug</name> <operator pos:start="167:27" pos:end="167:27">=</operator> <name pos:start="167:29" pos:end="167:44"><name pos:start="167:29" pos:end="167:41">input_streams</name><index pos:start="167:42" pos:end="167:44">[<expr pos:start="167:43" pos:end="167:43"><literal type="number" pos:start="167:43" pos:end="167:43">0</literal></expr>]</index></name><operator pos:start="167:45" pos:end="167:45">.</operator><name pos:start="167:46" pos:end="167:61"><name pos:start="167:46" pos:end="167:47">st</name><operator pos:start="167:48" pos:end="167:49">-&gt;</operator><name pos:start="167:50" pos:end="167:54">codec</name><operator pos:start="167:55" pos:end="167:56">-&gt;</operator><name pos:start="167:57" pos:end="167:61">debug</name></name><operator pos:start="167:62" pos:end="167:63">&lt;&lt;</operator><literal type="number" pos:start="167:64" pos:end="167:64">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="169:21" pos:end="169:41"><if pos:start="169:21" pos:end="169:41">if<condition pos:start="169:23" pos:end="169:30">(<expr pos:start="169:24" pos:end="169:29"><operator pos:start="169:24" pos:end="169:24">!</operator><name pos:start="169:25" pos:end="169:29">debug</name></expr>)</condition><block type="pseudo" pos:start="169:32" pos:end="169:41"><block_content pos:start="169:32" pos:end="169:41"> <expr_stmt pos:start="169:32" pos:end="169:41"><expr pos:start="169:32" pos:end="169:40"><name pos:start="169:32" pos:end="169:36">debug</name> <operator pos:start="169:38" pos:end="169:38">=</operator> <literal type="number" pos:start="169:40" pos:end="169:40">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <while pos:start="171:21" pos:end="173:39">while<condition pos:start="171:26" pos:end="171:92">(<expr pos:start="171:27" pos:end="171:91"><name pos:start="171:27" pos:end="171:31">debug</name> <operator pos:start="171:33" pos:end="171:33">&amp;</operator> <operator pos:start="171:35" pos:end="171:35">(</operator><name pos:start="171:36" pos:end="171:53">FF_DEBUG_DCT_COEFF</name><operator pos:start="171:54" pos:end="171:54">|</operator><name pos:start="171:55" pos:end="171:69">FF_DEBUG_VIS_QP</name><operator pos:start="171:70" pos:end="171:70">|</operator><name pos:start="171:71" pos:end="171:90">FF_DEBUG_VIS_MB_TYPE</name><operator pos:start="171:91" pos:end="171:91">)</operator></expr>)</condition><block type="pseudo" pos:start="173:25" pos:end="173:39"><block_content pos:start="173:25" pos:end="173:39"> <comment type="line" pos:start="171:94" pos:end="171:124">//unsupported, would just crash</comment>

                        <expr_stmt pos:start="173:25" pos:end="173:39"><expr pos:start="173:25" pos:end="173:38"><name pos:start="173:25" pos:end="173:29">debug</name> <operator pos:start="173:31" pos:end="173:32">+=</operator> <name pos:start="173:34" pos:end="173:38">debug</name></expr>;</expr_stmt></block_content></block></while>

                </block_content>}</block></if><else pos:start="175:18" pos:end="177:40">else<block type="pseudo" pos:start="177:21" pos:end="177:40"><block_content pos:start="177:21" pos:end="177:40">

                    <expr_stmt pos:start="177:21" pos:end="177:40"><expr pos:start="177:21" pos:end="177:39"><call pos:start="177:21" pos:end="177:39"><name pos:start="177:21" pos:end="177:25">scanf</name><argument_list pos:start="177:26" pos:end="177:39">(<argument pos:start="177:27" pos:end="177:30"><expr pos:start="177:27" pos:end="177:30"><literal type="string" pos:start="177:27" pos:end="177:30">"%d"</literal></expr></argument>, <argument pos:start="177:33" pos:end="177:38"><expr pos:start="177:33" pos:end="177:38"><operator pos:start="177:33" pos:end="177:33">&amp;</operator><name pos:start="177:34" pos:end="177:38">debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <for pos:start="179:17" pos:end="183:17">for<control pos:start="179:20" pos:end="179:47">(<init pos:start="179:21" pos:end="179:24"><expr pos:start="179:21" pos:end="179:23"><name pos:start="179:21" pos:end="179:21">i</name><operator pos:start="179:22" pos:end="179:22">=</operator><literal type="number" pos:start="179:23" pos:end="179:23">0</literal></expr>;</init><condition pos:start="179:25" pos:end="179:43"><expr pos:start="179:25" pos:end="179:42"><name pos:start="179:25" pos:end="179:25">i</name><operator pos:start="179:26" pos:end="179:26">&lt;</operator><name pos:start="179:27" pos:end="179:42">nb_input_streams</name></expr>;</condition><incr pos:start="179:44" pos:end="179:46"><expr pos:start="179:44" pos:end="179:46"><name pos:start="179:44" pos:end="179:44">i</name><operator pos:start="179:45" pos:end="179:46">++</operator></expr></incr>)</control> <block pos:start="179:49" pos:end="183:17">{<block_content pos:start="181:21" pos:end="181:62">

                    <expr_stmt pos:start="181:21" pos:end="181:62"><expr pos:start="181:21" pos:end="181:61"><name pos:start="181:21" pos:end="181:36"><name pos:start="181:21" pos:end="181:33">input_streams</name><index pos:start="181:34" pos:end="181:36">[<expr pos:start="181:35" pos:end="181:35"><name pos:start="181:35" pos:end="181:35">i</name></expr>]</index></name><operator pos:start="181:37" pos:end="181:37">.</operator><name pos:start="181:38" pos:end="181:53"><name pos:start="181:38" pos:end="181:39">st</name><operator pos:start="181:40" pos:end="181:41">-&gt;</operator><name pos:start="181:42" pos:end="181:46">codec</name><operator pos:start="181:47" pos:end="181:48">-&gt;</operator><name pos:start="181:49" pos:end="181:53">debug</name></name> <operator pos:start="181:55" pos:end="181:55">=</operator> <name pos:start="181:57" pos:end="181:61">debug</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <for pos:start="185:17" pos:end="191:17">for<control pos:start="185:20" pos:end="185:48">(<init pos:start="185:21" pos:end="185:24"><expr pos:start="185:21" pos:end="185:23"><name pos:start="185:21" pos:end="185:21">i</name><operator pos:start="185:22" pos:end="185:22">=</operator><literal type="number" pos:start="185:23" pos:end="185:23">0</literal></expr>;</init><condition pos:start="185:25" pos:end="185:44"><expr pos:start="185:25" pos:end="185:43"><name pos:start="185:25" pos:end="185:25">i</name><operator pos:start="185:26" pos:end="185:26">&lt;</operator><name pos:start="185:27" pos:end="185:43">nb_output_streams</name></expr>;</condition><incr pos:start="185:45" pos:end="185:47"><expr pos:start="185:45" pos:end="185:47"><name pos:start="185:45" pos:end="185:45">i</name><operator pos:start="185:46" pos:end="185:47">++</operator></expr></incr>)</control> <block pos:start="185:50" pos:end="191:17">{<block_content pos:start="187:21" pos:end="189:50">

                    <expr_stmt pos:start="187:21" pos:end="187:45"><expr pos:start="187:21" pos:end="187:44"><name pos:start="187:21" pos:end="187:23">ost</name> <operator pos:start="187:25" pos:end="187:25">=</operator> <operator pos:start="187:27" pos:end="187:27">&amp;</operator><name pos:start="187:28" pos:end="187:44"><name pos:start="187:28" pos:end="187:41">output_streams</name><index pos:start="187:42" pos:end="187:44">[<expr pos:start="187:43" pos:end="187:43"><name pos:start="187:43" pos:end="187:43">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="189:21" pos:end="189:50"><expr pos:start="189:21" pos:end="189:49"><name pos:start="189:21" pos:end="189:41"><name pos:start="189:21" pos:end="189:23">ost</name><operator pos:start="189:24" pos:end="189:25">-&gt;</operator><name pos:start="189:26" pos:end="189:27">st</name><operator pos:start="189:28" pos:end="189:29">-&gt;</operator><name pos:start="189:30" pos:end="189:34">codec</name><operator pos:start="189:35" pos:end="189:36">-&gt;</operator><name pos:start="189:37" pos:end="189:41">debug</name></name> <operator pos:start="189:43" pos:end="189:43">=</operator> <name pos:start="189:45" pos:end="189:49">debug</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="193:17" pos:end="193:57"><if pos:start="193:17" pos:end="193:57">if<condition pos:start="193:19" pos:end="193:25">(<expr pos:start="193:20" pos:end="193:24"><name pos:start="193:20" pos:end="193:24">debug</name></expr>)</condition><block type="pseudo" pos:start="193:27" pos:end="193:57"><block_content pos:start="193:27" pos:end="193:57"> <expr_stmt pos:start="193:27" pos:end="193:57"><expr pos:start="193:27" pos:end="193:56"><call pos:start="193:27" pos:end="193:56"><name pos:start="193:27" pos:end="193:42">av_log_set_level</name><argument_list pos:start="193:43" pos:end="193:56">(<argument pos:start="193:44" pos:end="193:55"><expr pos:start="193:44" pos:end="193:55"><name pos:start="193:44" pos:end="193:55">AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:52"><expr pos:start="195:17" pos:end="195:51"><call pos:start="195:17" pos:end="195:51"><name pos:start="195:17" pos:end="195:23">fprintf</name><argument_list pos:start="195:24" pos:end="195:51">(<argument pos:start="195:25" pos:end="195:30"><expr pos:start="195:25" pos:end="195:30"><name pos:start="195:25" pos:end="195:30">stderr</name></expr></argument>,<argument pos:start="195:32" pos:end="195:43"><expr pos:start="195:32" pos:end="195:43"><literal type="string" pos:start="195:32" pos:end="195:43">"debug=%d\n"</literal></expr></argument>, <argument pos:start="195:46" pos:end="195:50"><expr pos:start="195:46" pos:end="195:50"><name pos:start="195:46" pos:end="195:50">debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="199:13" pos:end="221:13"><if pos:start="199:13" pos:end="221:13">if <condition pos:start="199:16" pos:end="199:27">(<expr pos:start="199:17" pos:end="199:26"><name pos:start="199:17" pos:end="199:19">key</name> <operator pos:start="199:21" pos:end="199:22">==</operator> <literal type="char" pos:start="199:24" pos:end="199:26">'?'</literal></expr>)</condition><block pos:start="199:28" pos:end="221:13">{<block_content pos:start="201:17" pos:end="219:18">

                <expr_stmt pos:start="201:17" pos:end="219:18"><expr pos:start="201:17" pos:end="219:17"><call pos:start="201:17" pos:end="219:17"><name pos:start="201:17" pos:end="201:23">fprintf</name><argument_list pos:start="201:24" pos:end="219:17">(<argument pos:start="201:25" pos:end="201:30"><expr pos:start="201:25" pos:end="201:30"><name pos:start="201:25" pos:end="201:30">stderr</name></expr></argument>, <argument pos:start="201:33" pos:end="217:60"><expr pos:start="201:33" pos:end="217:60"><literal type="string" pos:start="201:33" pos:end="201:51">"key    function\n"</literal>

                                <literal type="string" pos:start="203:33" pos:end="203:57">"?      show this help\n"</literal>

                                <literal type="string" pos:start="205:33" pos:end="205:61">"+      increase verbosity\n"</literal>

                                <literal type="string" pos:start="207:33" pos:end="207:61">"-      decrease verbosity\n"</literal>

                                <literal type="string" pos:start="209:33" pos:end="209:70">"c      Send command to filtergraph\n"</literal>

                                <literal type="string" pos:start="211:33" pos:end="211:78">"D      cycle through available debug modes\n"</literal>

                                <literal type="string" pos:start="213:33" pos:end="213:95">"h      dump packets/hex press to cycle through the 3 states\n"</literal>

                                <literal type="string" pos:start="215:33" pos:end="215:47">"q      quit\n"</literal>

                                <literal type="string" pos:start="217:33" pos:end="217:60">"s      Show QP histogram\n"</literal></expr></argument>

                )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="227:9" pos:end="229:33">/* select the stream that we must read now by looking at the

           smallest output pts */</comment>

        <expr_stmt pos:start="231:9" pos:end="231:24"><expr pos:start="231:9" pos:end="231:23"><name pos:start="231:9" pos:end="231:18">file_index</name> <operator pos:start="231:20" pos:end="231:20">=</operator> <operator pos:start="231:22" pos:end="231:22">-</operator><literal type="number" pos:start="231:23" pos:end="231:23">1</literal></expr>;</expr_stmt>

        <for pos:start="233:9" pos:end="287:9">for <control pos:start="233:13" pos:end="233:47">(<init pos:start="233:14" pos:end="233:19"><expr pos:start="233:14" pos:end="233:18"><name pos:start="233:14" pos:end="233:14">i</name> <operator pos:start="233:16" pos:end="233:16">=</operator> <literal type="number" pos:start="233:18" pos:end="233:18">0</literal></expr>;</init> <condition pos:start="233:21" pos:end="233:42"><expr pos:start="233:21" pos:end="233:41"><name pos:start="233:21" pos:end="233:21">i</name> <operator pos:start="233:23" pos:end="233:23">&lt;</operator> <name pos:start="233:25" pos:end="233:41">nb_output_streams</name></expr>;</condition> <incr pos:start="233:44" pos:end="233:46"><expr pos:start="233:44" pos:end="233:46"><name pos:start="233:44" pos:end="233:44">i</name><operator pos:start="233:45" pos:end="233:46">++</operator></expr></incr>)</control> <block pos:start="233:49" pos:end="287:9">{<block_content pos:start="235:13" pos:end="285:13">

            <decl_stmt pos:start="235:13" pos:end="235:27"><decl pos:start="235:13" pos:end="235:26"><type pos:start="235:13" pos:end="235:24"><name pos:start="235:13" pos:end="235:22">OutputFile</name> <modifier pos:start="235:24" pos:end="235:24">*</modifier></type><name pos:start="235:25" pos:end="235:26">of</name></decl>;</decl_stmt>

            <decl_stmt pos:start="237:13" pos:end="237:25"><decl pos:start="237:13" pos:end="237:24"><type pos:start="237:13" pos:end="237:19"><name pos:start="237:13" pos:end="237:19">int64_t</name></type> <name pos:start="237:21" pos:end="237:24">ipts</name></decl>;</decl_stmt>

            <decl_stmt pos:start="239:13" pos:end="239:25"><decl pos:start="239:13" pos:end="239:24"><type pos:start="239:13" pos:end="239:18"><name pos:start="239:13" pos:end="239:18">double</name></type>  <name pos:start="239:21" pos:end="239:24">opts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:37"><expr pos:start="241:13" pos:end="241:36"><name pos:start="241:13" pos:end="241:15">ost</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <operator pos:start="241:19" pos:end="241:19">&amp;</operator><name pos:start="241:20" pos:end="241:36"><name pos:start="241:20" pos:end="241:33">output_streams</name><index pos:start="241:34" pos:end="241:36">[<expr pos:start="241:35" pos:end="241:35"><name pos:start="241:35" pos:end="241:35">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:48"><expr pos:start="243:13" pos:end="243:47"><name pos:start="243:13" pos:end="243:14">of</name> <operator pos:start="243:16" pos:end="243:16">=</operator> <operator pos:start="243:18" pos:end="243:18">&amp;</operator><name pos:start="243:19" pos:end="243:47"><name pos:start="243:19" pos:end="243:30">output_files</name><index pos:start="243:31" pos:end="243:47">[<expr pos:start="243:32" pos:end="243:46"><name pos:start="243:32" pos:end="243:46"><name pos:start="243:32" pos:end="243:34">ost</name><operator pos:start="243:35" pos:end="243:36">-&gt;</operator><name pos:start="243:37" pos:end="243:46">file_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:51"><expr pos:start="245:13" pos:end="245:50"><name pos:start="245:13" pos:end="245:14">os</name> <operator pos:start="245:16" pos:end="245:16">=</operator> <name pos:start="245:18" pos:end="245:46"><name pos:start="245:18" pos:end="245:29">output_files</name><index pos:start="245:30" pos:end="245:46">[<expr pos:start="245:31" pos:end="245:45"><name pos:start="245:31" pos:end="245:45"><name pos:start="245:31" pos:end="245:33">ost</name><operator pos:start="245:34" pos:end="245:35">-&gt;</operator><name pos:start="245:36" pos:end="245:45">file_index</name></name></expr>]</index></name><operator pos:start="245:47" pos:end="245:47">.</operator><name pos:start="245:48" pos:end="245:50">ctx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:52"><expr pos:start="247:13" pos:end="247:51"><name pos:start="247:13" pos:end="247:15">ist</name> <operator pos:start="247:17" pos:end="247:17">=</operator> <operator pos:start="247:19" pos:end="247:19">&amp;</operator><name pos:start="247:20" pos:end="247:51"><name pos:start="247:20" pos:end="247:32">input_streams</name><index pos:start="247:33" pos:end="247:51">[<expr pos:start="247:34" pos:end="247:50"><name pos:start="247:34" pos:end="247:50"><name pos:start="247:34" pos:end="247:36">ost</name><operator pos:start="247:37" pos:end="247:38">-&gt;</operator><name pos:start="247:39" pos:end="247:50">source_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="253:25"><if pos:start="249:13" pos:end="253:25">if <condition pos:start="249:16" pos:end="251:68">(<expr pos:start="249:17" pos:end="251:67"><name pos:start="249:17" pos:end="249:43"><name pos:start="249:17" pos:end="249:19">ost</name><operator pos:start="249:20" pos:end="249:21">-&gt;</operator><name pos:start="249:22" pos:end="249:43">is_past_recording_time</name></name> <operator pos:start="249:45" pos:end="249:46">||</operator> <name pos:start="249:48" pos:end="249:73"><name pos:start="249:48" pos:end="249:56">no_packet</name><index pos:start="249:57" pos:end="249:73">[<expr pos:start="249:58" pos:end="249:72"><name pos:start="249:58" pos:end="249:72"><name pos:start="249:58" pos:end="249:60">ist</name><operator pos:start="249:61" pos:end="249:62">-&gt;</operator><name pos:start="249:63" pos:end="249:72">file_index</name></name></expr>]</index></name> <operator pos:start="249:75" pos:end="249:76">||</operator>

                <operator pos:start="251:17" pos:end="251:17">(</operator><name pos:start="251:18" pos:end="251:23"><name pos:start="251:18" pos:end="251:19">os</name><operator pos:start="251:20" pos:end="251:21">-&gt;</operator><name pos:start="251:22" pos:end="251:23">pb</name></name> <operator pos:start="251:25" pos:end="251:26">&amp;&amp;</operator> <call pos:start="251:28" pos:end="251:44"><name pos:start="251:28" pos:end="251:36">avio_tell</name><argument_list pos:start="251:37" pos:end="251:44">(<argument pos:start="251:38" pos:end="251:43"><expr pos:start="251:38" pos:end="251:43"><name pos:start="251:38" pos:end="251:43"><name pos:start="251:38" pos:end="251:39">os</name><operator pos:start="251:40" pos:end="251:41">-&gt;</operator><name pos:start="251:42" pos:end="251:43">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="251:46" pos:end="251:47">&gt;=</operator> <name pos:start="251:49" pos:end="251:66"><name pos:start="251:49" pos:end="251:50">of</name><operator pos:start="251:51" pos:end="251:52">-&gt;</operator><name pos:start="251:53" pos:end="251:66">limit_filesize</name></name><operator pos:start="251:67" pos:end="251:67">)</operator></expr>)</condition><block type="pseudo" pos:start="253:17" pos:end="253:25"><block_content pos:start="253:17" pos:end="253:25">

                <continue pos:start="253:17" pos:end="253:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:65"><expr pos:start="255:13" pos:end="255:64"><name pos:start="255:13" pos:end="255:16">opts</name> <operator pos:start="255:18" pos:end="255:18">=</operator> <name pos:start="255:20" pos:end="255:35"><name pos:start="255:20" pos:end="255:22">ost</name><operator pos:start="255:23" pos:end="255:24">-&gt;</operator><name pos:start="255:25" pos:end="255:26">st</name><operator pos:start="255:27" pos:end="255:28">-&gt;</operator><name pos:start="255:29" pos:end="255:31">pts</name><operator pos:start="255:32" pos:end="255:32">.</operator><name pos:start="255:33" pos:end="255:35">val</name></name> <operator pos:start="255:37" pos:end="255:37">*</operator> <call pos:start="255:39" pos:end="255:64"><name pos:start="255:39" pos:end="255:44">av_q2d</name><argument_list pos:start="255:45" pos:end="255:64">(<argument pos:start="255:46" pos:end="255:63"><expr pos:start="255:46" pos:end="255:63"><name pos:start="255:46" pos:end="255:63"><name pos:start="255:46" pos:end="255:48">ost</name><operator pos:start="255:49" pos:end="255:50">-&gt;</operator><name pos:start="255:51" pos:end="255:52">st</name><operator pos:start="255:53" pos:end="255:54">-&gt;</operator><name pos:start="255:55" pos:end="255:63">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:28"><expr pos:start="257:13" pos:end="257:27"><name pos:start="257:13" pos:end="257:16">ipts</name> <operator pos:start="257:18" pos:end="257:18">=</operator> <name pos:start="257:20" pos:end="257:27"><name pos:start="257:20" pos:end="257:22">ist</name><operator pos:start="257:23" pos:end="257:24">-&gt;</operator><name pos:start="257:25" pos:end="257:27">pts</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="259:13" pos:end="277:13"><if pos:start="259:13" pos:end="277:13">if <condition pos:start="259:16" pos:end="259:58">(<expr pos:start="259:17" pos:end="259:57"><operator pos:start="259:17" pos:end="259:17">!</operator><name pos:start="259:18" pos:end="259:45"><name pos:start="259:18" pos:end="259:28">input_files</name><index pos:start="259:29" pos:end="259:45">[<expr pos:start="259:30" pos:end="259:44"><name pos:start="259:30" pos:end="259:44"><name pos:start="259:30" pos:end="259:32">ist</name><operator pos:start="259:33" pos:end="259:34">-&gt;</operator><name pos:start="259:35" pos:end="259:44">file_index</name></name></expr>]</index></name><operator pos:start="259:46" pos:end="259:46">.</operator><name pos:start="259:47" pos:end="259:57">eof_reached</name></expr>)</condition><block pos:start="259:59" pos:end="277:13">{<block_content pos:start="261:17" pos:end="275:17">

                <if_stmt pos:start="261:17" pos:end="267:17"><if pos:start="261:17" pos:end="267:17">if<condition pos:start="261:19" pos:end="261:35">(<expr pos:start="261:20" pos:end="261:34"><name pos:start="261:20" pos:end="261:23">ipts</name> <operator pos:start="261:25" pos:end="261:25">&lt;</operator> <name pos:start="261:27" pos:end="261:34">ipts_min</name></expr>)</condition> <block pos:start="261:37" pos:end="267:17">{<block_content pos:start="263:21" pos:end="265:65">

                    <expr_stmt pos:start="263:21" pos:end="263:36"><expr pos:start="263:21" pos:end="263:35"><name pos:start="263:21" pos:end="263:28">ipts_min</name> <operator pos:start="263:30" pos:end="263:30">=</operator> <name pos:start="263:32" pos:end="263:35">ipts</name></expr>;</expr_stmt>

                    <if_stmt pos:start="265:21" pos:end="265:65"><if pos:start="265:21" pos:end="265:65">if<condition pos:start="265:23" pos:end="265:35">(<expr pos:start="265:24" pos:end="265:33"><name pos:start="265:24" pos:end="265:33">input_sync</name></expr> )</condition><block type="pseudo" pos:start="265:37" pos:end="265:65"><block_content pos:start="265:37" pos:end="265:65"> <expr_stmt pos:start="265:37" pos:end="265:65"><expr pos:start="265:37" pos:end="265:64"><name pos:start="265:37" pos:end="265:46">file_index</name> <operator pos:start="265:48" pos:end="265:48">=</operator> <name pos:start="265:50" pos:end="265:64"><name pos:start="265:50" pos:end="265:52">ist</name><operator pos:start="265:53" pos:end="265:54">-&gt;</operator><name pos:start="265:55" pos:end="265:64">file_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="269:17" pos:end="275:17"><if pos:start="269:17" pos:end="275:17">if<condition pos:start="269:19" pos:end="269:35">(<expr pos:start="269:20" pos:end="269:34"><name pos:start="269:20" pos:end="269:23">opts</name> <operator pos:start="269:25" pos:end="269:25">&lt;</operator> <name pos:start="269:27" pos:end="269:34">opts_min</name></expr>)</condition> <block pos:start="269:37" pos:end="275:17">{<block_content pos:start="271:21" pos:end="273:65">

                    <expr_stmt pos:start="271:21" pos:end="271:36"><expr pos:start="271:21" pos:end="271:35"><name pos:start="271:21" pos:end="271:28">opts_min</name> <operator pos:start="271:30" pos:end="271:30">=</operator> <name pos:start="271:32" pos:end="271:35">opts</name></expr>;</expr_stmt>

                    <if_stmt pos:start="273:21" pos:end="273:65"><if pos:start="273:21" pos:end="273:65">if<condition pos:start="273:23" pos:end="273:35">(<expr pos:start="273:24" pos:end="273:34"><operator pos:start="273:24" pos:end="273:24">!</operator><name pos:start="273:25" pos:end="273:34">input_sync</name></expr>)</condition><block type="pseudo" pos:start="273:37" pos:end="273:65"><block_content pos:start="273:37" pos:end="273:65"> <expr_stmt pos:start="273:37" pos:end="273:65"><expr pos:start="273:37" pos:end="273:64"><name pos:start="273:37" pos:end="273:46">file_index</name> <operator pos:start="273:48" pos:end="273:48">=</operator> <name pos:start="273:50" pos:end="273:64"><name pos:start="273:50" pos:end="273:52">ist</name><operator pos:start="273:53" pos:end="273:54">-&gt;</operator><name pos:start="273:55" pos:end="273:64">file_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="279:13" pos:end="285:13"><if pos:start="279:13" pos:end="285:13">if<condition pos:start="279:15" pos:end="279:75">(<expr pos:start="279:16" pos:end="279:74"><name pos:start="279:16" pos:end="279:32"><name pos:start="279:16" pos:end="279:18">ost</name><operator pos:start="279:19" pos:end="279:20">-&gt;</operator><name pos:start="279:21" pos:end="279:32">frame_number</name></name> <operator pos:start="279:34" pos:end="279:35">&gt;=</operator> <name pos:start="279:37" pos:end="279:74"><name pos:start="279:37" pos:end="279:46">max_frames</name><index pos:start="279:47" pos:end="279:74">[<expr pos:start="279:48" pos:end="279:73"><name pos:start="279:48" pos:end="279:73"><name pos:start="279:48" pos:end="279:50">ost</name><operator pos:start="279:51" pos:end="279:52">-&gt;</operator><name pos:start="279:53" pos:end="279:54">st</name><operator pos:start="279:55" pos:end="279:56">-&gt;</operator><name pos:start="279:57" pos:end="279:61">codec</name><operator pos:start="279:62" pos:end="279:63">-&gt;</operator><name pos:start="279:64" pos:end="279:73">codec_type</name></name></expr>]</index></name></expr>)</condition><block pos:start="279:76" pos:end="285:13">{<block_content pos:start="281:17" pos:end="283:22">

                <expr_stmt pos:start="281:17" pos:end="281:31"><expr pos:start="281:17" pos:end="281:30"><name pos:start="281:17" pos:end="281:26">file_index</name><operator pos:start="281:27" pos:end="281:27">=</operator> <operator pos:start="281:29" pos:end="281:29">-</operator><literal type="number" pos:start="281:30" pos:end="281:30">1</literal></expr>;</expr_stmt>

                <break pos:start="283:17" pos:end="283:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="289:9" pos:end="289:37">/* if none, if is finished */</comment>

        <if_stmt pos:start="291:9" pos:end="307:9"><if pos:start="291:9" pos:end="307:9">if <condition pos:start="291:12" pos:end="291:27">(<expr pos:start="291:13" pos:end="291:26"><name pos:start="291:13" pos:end="291:22">file_index</name> <operator pos:start="291:24" pos:end="291:24">&lt;</operator> <literal type="number" pos:start="291:26" pos:end="291:26">0</literal></expr>)</condition> <block pos:start="291:29" pos:end="307:9">{<block_content pos:start="293:13" pos:end="305:18">

            <if_stmt pos:start="293:13" pos:end="303:13"><if pos:start="293:13" pos:end="303:13">if<condition pos:start="293:15" pos:end="293:31">(<expr pos:start="293:16" pos:end="293:30"><name pos:start="293:16" pos:end="293:30">no_packet_count</name></expr>)</condition><block pos:start="293:32" pos:end="303:13">{<block_content pos:start="295:17" pos:end="301:25">

                <expr_stmt pos:start="295:17" pos:end="295:34"><expr pos:start="295:17" pos:end="295:33"><name pos:start="295:17" pos:end="295:31">no_packet_count</name><operator pos:start="295:32" pos:end="295:32">=</operator><literal type="number" pos:start="295:33" pos:end="295:33">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:53"><expr pos:start="297:17" pos:end="297:52"><call pos:start="297:17" pos:end="297:52"><name pos:start="297:17" pos:end="297:22">memset</name><argument_list pos:start="297:23" pos:end="297:52">(<argument pos:start="297:24" pos:end="297:32"><expr pos:start="297:24" pos:end="297:32"><name pos:start="297:24" pos:end="297:32">no_packet</name></expr></argument>, <argument pos:start="297:35" pos:end="297:35"><expr pos:start="297:35" pos:end="297:35"><literal type="number" pos:start="297:35" pos:end="297:35">0</literal></expr></argument>, <argument pos:start="297:38" pos:end="297:51"><expr pos:start="297:38" pos:end="297:51"><name pos:start="297:38" pos:end="297:51">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:30"><expr pos:start="299:17" pos:end="299:29"><call pos:start="299:17" pos:end="299:29"><name pos:start="299:17" pos:end="299:22">usleep</name><argument_list pos:start="299:23" pos:end="299:29">(<argument pos:start="299:24" pos:end="299:28"><expr pos:start="299:24" pos:end="299:28"><literal type="number" pos:start="299:24" pos:end="299:28">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="301:17" pos:end="301:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="305:13" pos:end="305:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="311:9" pos:end="311:60">/* read a frame from it and output it in the fifo */</comment>

        <expr_stmt pos:start="313:9" pos:end="313:41"><expr pos:start="313:9" pos:end="313:40"><name pos:start="313:9" pos:end="313:10">is</name> <operator pos:start="313:12" pos:end="313:12">=</operator> <name pos:start="313:14" pos:end="313:36"><name pos:start="313:14" pos:end="313:24">input_files</name><index pos:start="313:25" pos:end="313:36">[<expr pos:start="313:26" pos:end="313:35"><name pos:start="313:26" pos:end="313:35">file_index</name></expr>]</index></name><operator pos:start="313:37" pos:end="313:37">.</operator><name pos:start="313:38" pos:end="313:40">ctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:37"><expr pos:start="315:9" pos:end="315:36"><name pos:start="315:9" pos:end="315:11">ret</name><operator pos:start="315:12" pos:end="315:12">=</operator> <call pos:start="315:14" pos:end="315:36"><name pos:start="315:14" pos:end="315:26">av_read_frame</name><argument_list pos:start="315:27" pos:end="315:36">(<argument pos:start="315:28" pos:end="315:29"><expr pos:start="315:28" pos:end="315:29"><name pos:start="315:28" pos:end="315:29">is</name></expr></argument>, <argument pos:start="315:32" pos:end="315:35"><expr pos:start="315:32" pos:end="315:35"><operator pos:start="315:32" pos:end="315:32">&amp;</operator><name pos:start="315:33" pos:end="315:35">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="317:9" pos:end="325:9"><if pos:start="317:9" pos:end="325:9">if<condition pos:start="317:11" pos:end="317:34">(<expr pos:start="317:12" pos:end="317:33"><name pos:start="317:12" pos:end="317:14">ret</name> <operator pos:start="317:16" pos:end="317:17">==</operator> <call pos:start="317:19" pos:end="317:33"><name pos:start="317:19" pos:end="317:25">AVERROR</name><argument_list pos:start="317:26" pos:end="317:33">(<argument pos:start="317:27" pos:end="317:32"><expr pos:start="317:27" pos:end="317:32"><name pos:start="317:27" pos:end="317:32">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="317:35" pos:end="325:9">{<block_content pos:start="319:13" pos:end="323:21">

            <expr_stmt pos:start="319:13" pos:end="319:36"><expr pos:start="319:13" pos:end="319:35"><name pos:start="319:13" pos:end="319:33"><name pos:start="319:13" pos:end="319:21">no_packet</name><index pos:start="319:22" pos:end="319:33">[<expr pos:start="319:23" pos:end="319:32"><name pos:start="319:23" pos:end="319:32">file_index</name></expr>]</index></name><operator pos:start="319:34" pos:end="319:34">=</operator><literal type="number" pos:start="319:35" pos:end="319:35">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:30"><expr pos:start="321:13" pos:end="321:29"><name pos:start="321:13" pos:end="321:27">no_packet_count</name><operator pos:start="321:28" pos:end="321:29">++</operator></expr>;</expr_stmt>

            <continue pos:start="323:13" pos:end="323:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="327:9" pos:end="339:9"><if pos:start="327:9" pos:end="339:9">if <condition pos:start="327:12" pos:end="327:20">(<expr pos:start="327:13" pos:end="327:19"><name pos:start="327:13" pos:end="327:15">ret</name> <operator pos:start="327:17" pos:end="327:17">&lt;</operator> <literal type="number" pos:start="327:19" pos:end="327:19">0</literal></expr>)</condition> <block pos:start="327:22" pos:end="339:9">{<block_content pos:start="329:13" pos:end="337:25">

            <expr_stmt pos:start="329:13" pos:end="329:52"><expr pos:start="329:13" pos:end="329:51"><name pos:start="329:13" pos:end="329:35"><name pos:start="329:13" pos:end="329:23">input_files</name><index pos:start="329:24" pos:end="329:35">[<expr pos:start="329:25" pos:end="329:34"><name pos:start="329:25" pos:end="329:34">file_index</name></expr>]</index></name><operator pos:start="329:36" pos:end="329:36">.</operator><name pos:start="329:37" pos:end="329:47">eof_reached</name> <operator pos:start="329:49" pos:end="329:49">=</operator> <literal type="number" pos:start="329:51" pos:end="329:51">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="331:13" pos:end="337:25"><if pos:start="331:13" pos:end="333:22">if <condition pos:start="331:16" pos:end="331:29">(<expr pos:start="331:17" pos:end="331:28"><name pos:start="331:17" pos:end="331:28">opt_shortest</name></expr>)</condition><block type="pseudo" pos:start="333:17" pos:end="333:22"><block_content pos:start="333:17" pos:end="333:22">

                <break pos:start="333:17" pos:end="333:22">break;</break></block_content></block></if>

            <else pos:start="335:13" pos:end="337:25">else<block type="pseudo" pos:start="337:17" pos:end="337:25"><block_content pos:start="337:17" pos:end="337:25">

                <continue pos:start="337:17" pos:end="337:25">continue;</continue></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="343:9" pos:end="343:26"><expr pos:start="343:9" pos:end="343:25"><name pos:start="343:9" pos:end="343:23">no_packet_count</name><operator pos:start="343:24" pos:end="343:24">=</operator><literal type="number" pos:start="343:25" pos:end="343:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:45"><expr pos:start="345:9" pos:end="345:44"><call pos:start="345:9" pos:end="345:44"><name pos:start="345:9" pos:end="345:14">memset</name><argument_list pos:start="345:15" pos:end="345:44">(<argument pos:start="345:16" pos:end="345:24"><expr pos:start="345:16" pos:end="345:24"><name pos:start="345:16" pos:end="345:24">no_packet</name></expr></argument>, <argument pos:start="345:27" pos:end="345:27"><expr pos:start="345:27" pos:end="345:27"><literal type="number" pos:start="345:27" pos:end="345:27">0</literal></expr></argument>, <argument pos:start="345:30" pos:end="345:43"><expr pos:start="345:30" pos:end="345:43"><name pos:start="345:30" pos:end="345:43">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="349:9" pos:end="355:9"><if pos:start="349:9" pos:end="355:9">if <condition pos:start="349:12" pos:end="349:24">(<expr pos:start="349:13" pos:end="349:23"><name pos:start="349:13" pos:end="349:23">do_pkt_dump</name></expr>)</condition> <block pos:start="349:26" pos:end="355:9">{<block_content pos:start="351:13" pos:end="353:60">

            <expr_stmt pos:start="351:13" pos:end="353:60"><expr pos:start="351:13" pos:end="353:59"><call pos:start="351:13" pos:end="353:59"><name pos:start="351:13" pos:end="351:28">av_pkt_dump_log2</name><argument_list pos:start="351:29" pos:end="353:59">(<argument pos:start="351:30" pos:end="351:33"><expr pos:start="351:30" pos:end="351:33"><name pos:start="351:30" pos:end="351:33">NULL</name></expr></argument>, <argument pos:start="351:36" pos:end="351:47"><expr pos:start="351:36" pos:end="351:47"><name pos:start="351:36" pos:end="351:47">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="351:50" pos:end="351:53"><expr pos:start="351:50" pos:end="351:53"><operator pos:start="351:50" pos:end="351:50">&amp;</operator><name pos:start="351:51" pos:end="351:53">pkt</name></expr></argument>, <argument pos:start="351:56" pos:end="351:66"><expr pos:start="351:56" pos:end="351:66"><name pos:start="351:56" pos:end="351:66">do_hex_dump</name></expr></argument>,

                             <argument pos:start="353:30" pos:end="353:58"><expr pos:start="353:30" pos:end="353:58"><name pos:start="353:30" pos:end="353:58"><name pos:start="353:30" pos:end="353:31">is</name><operator pos:start="353:32" pos:end="353:33">-&gt;</operator><name pos:start="353:34" pos:end="353:40">streams</name><index pos:start="353:41" pos:end="353:58">[<expr pos:start="353:42" pos:end="353:57"><name pos:start="353:42" pos:end="353:57"><name pos:start="353:42" pos:end="353:44">pkt</name><operator pos:start="353:45" pos:end="353:45">.</operator><name pos:start="353:46" pos:end="353:57">stream_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="357:9" pos:end="359:52">/* the following test is needed in case new streams appear

           dynamically in stream : we ignore them */</comment>

        <if_stmt pos:start="361:9" pos:end="363:32"><if pos:start="361:9" pos:end="363:32">if <condition pos:start="361:12" pos:end="361:67">(<expr pos:start="361:13" pos:end="361:66"><name pos:start="361:13" pos:end="361:28"><name pos:start="361:13" pos:end="361:15">pkt</name><operator pos:start="361:16" pos:end="361:16">.</operator><name pos:start="361:17" pos:end="361:28">stream_index</name></name> <operator pos:start="361:30" pos:end="361:31">&gt;=</operator> <name pos:start="361:33" pos:end="361:55"><name pos:start="361:33" pos:end="361:43">input_files</name><index pos:start="361:44" pos:end="361:55">[<expr pos:start="361:45" pos:end="361:54"><name pos:start="361:45" pos:end="361:54">file_index</name></expr>]</index></name><operator pos:start="361:56" pos:end="361:56">.</operator><name pos:start="361:57" pos:end="361:66">nb_streams</name></expr>)</condition><block type="pseudo" pos:start="363:13" pos:end="363:32"><block_content pos:start="363:13" pos:end="363:32">

            <goto pos:start="363:13" pos:end="363:32">goto <name pos:start="363:18" pos:end="363:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:73"><expr pos:start="365:9" pos:end="365:72"><name pos:start="365:9" pos:end="365:17">ist_index</name> <operator pos:start="365:19" pos:end="365:19">=</operator> <name pos:start="365:21" pos:end="365:43"><name pos:start="365:21" pos:end="365:31">input_files</name><index pos:start="365:32" pos:end="365:43">[<expr pos:start="365:33" pos:end="365:42"><name pos:start="365:33" pos:end="365:42">file_index</name></expr>]</index></name><operator pos:start="365:44" pos:end="365:44">.</operator><name pos:start="365:45" pos:end="365:53">ist_index</name> <operator pos:start="365:55" pos:end="365:55">+</operator> <name pos:start="365:57" pos:end="365:72"><name pos:start="365:57" pos:end="365:59">pkt</name><operator pos:start="365:60" pos:end="365:60">.</operator><name pos:start="365:61" pos:end="365:72">stream_index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:40"><expr pos:start="367:9" pos:end="367:39"><name pos:start="367:9" pos:end="367:11">ist</name> <operator pos:start="367:13" pos:end="367:13">=</operator> <operator pos:start="367:15" pos:end="367:15">&amp;</operator><name pos:start="367:16" pos:end="367:39"><name pos:start="367:16" pos:end="367:28">input_streams</name><index pos:start="367:29" pos:end="367:39">[<expr pos:start="367:30" pos:end="367:38"><name pos:start="367:30" pos:end="367:38">ist_index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="369:9" pos:end="371:32"><if pos:start="369:9" pos:end="371:32">if <condition pos:start="369:12" pos:end="369:25">(<expr pos:start="369:13" pos:end="369:24"><name pos:start="369:13" pos:end="369:24"><name pos:start="369:13" pos:end="369:15">ist</name><operator pos:start="369:16" pos:end="369:17">-&gt;</operator><name pos:start="369:18" pos:end="369:24">discard</name></name></expr>)</condition><block type="pseudo" pos:start="371:13" pos:end="371:32"><block_content pos:start="371:13" pos:end="371:32">

            <goto pos:start="371:13" pos:end="371:32">goto <name pos:start="371:18" pos:end="371:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="375:9" pos:end="377:112"><if pos:start="375:9" pos:end="377:112">if <condition pos:start="375:12" pos:end="375:38">(<expr pos:start="375:13" pos:end="375:37"><name pos:start="375:13" pos:end="375:19"><name pos:start="375:13" pos:end="375:15">pkt</name><operator pos:start="375:16" pos:end="375:16">.</operator><name pos:start="375:17" pos:end="375:19">dts</name></name> <operator pos:start="375:21" pos:end="375:22">!=</operator> <name pos:start="375:24" pos:end="375:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="377:13" pos:end="377:112"><block_content pos:start="377:13" pos:end="377:112">

            <expr_stmt pos:start="377:13" pos:end="377:112"><expr pos:start="377:13" pos:end="377:111"><name pos:start="377:13" pos:end="377:19"><name pos:start="377:13" pos:end="377:15">pkt</name><operator pos:start="377:16" pos:end="377:16">.</operator><name pos:start="377:17" pos:end="377:19">dts</name></name> <operator pos:start="377:21" pos:end="377:22">+=</operator> <call pos:start="377:24" pos:end="377:111"><name pos:start="377:24" pos:end="377:35">av_rescale_q</name><argument_list pos:start="377:36" pos:end="377:111">(<argument pos:start="377:37" pos:end="377:74"><expr pos:start="377:37" pos:end="377:74"><name pos:start="377:37" pos:end="377:64"><name pos:start="377:37" pos:end="377:47">input_files</name><index pos:start="377:48" pos:end="377:64">[<expr pos:start="377:49" pos:end="377:63"><name pos:start="377:49" pos:end="377:63"><name pos:start="377:49" pos:end="377:51">ist</name><operator pos:start="377:52" pos:end="377:53">-&gt;</operator><name pos:start="377:54" pos:end="377:63">file_index</name></name></expr>]</index></name><operator pos:start="377:65" pos:end="377:65">.</operator><name pos:start="377:66" pos:end="377:74">ts_offset</name></expr></argument>, <argument pos:start="377:77" pos:end="377:90"><expr pos:start="377:77" pos:end="377:90"><name pos:start="377:77" pos:end="377:90">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="377:93" pos:end="377:110"><expr pos:start="377:93" pos:end="377:110"><name pos:start="377:93" pos:end="377:110"><name pos:start="377:93" pos:end="377:95">ist</name><operator pos:start="377:96" pos:end="377:97">-&gt;</operator><name pos:start="377:98" pos:end="377:99">st</name><operator pos:start="377:100" pos:end="377:101">-&gt;</operator><name pos:start="377:102" pos:end="377:110">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="379:9" pos:end="381:112"><if pos:start="379:9" pos:end="381:112">if <condition pos:start="379:12" pos:end="379:38">(<expr pos:start="379:13" pos:end="379:37"><name pos:start="379:13" pos:end="379:19"><name pos:start="379:13" pos:end="379:15">pkt</name><operator pos:start="379:16" pos:end="379:16">.</operator><name pos:start="379:17" pos:end="379:19">pts</name></name> <operator pos:start="379:21" pos:end="379:22">!=</operator> <name pos:start="379:24" pos:end="379:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="381:13" pos:end="381:112"><block_content pos:start="381:13" pos:end="381:112">

            <expr_stmt pos:start="381:13" pos:end="381:112"><expr pos:start="381:13" pos:end="381:111"><name pos:start="381:13" pos:end="381:19"><name pos:start="381:13" pos:end="381:15">pkt</name><operator pos:start="381:16" pos:end="381:16">.</operator><name pos:start="381:17" pos:end="381:19">pts</name></name> <operator pos:start="381:21" pos:end="381:22">+=</operator> <call pos:start="381:24" pos:end="381:111"><name pos:start="381:24" pos:end="381:35">av_rescale_q</name><argument_list pos:start="381:36" pos:end="381:111">(<argument pos:start="381:37" pos:end="381:74"><expr pos:start="381:37" pos:end="381:74"><name pos:start="381:37" pos:end="381:64"><name pos:start="381:37" pos:end="381:47">input_files</name><index pos:start="381:48" pos:end="381:64">[<expr pos:start="381:49" pos:end="381:63"><name pos:start="381:49" pos:end="381:63"><name pos:start="381:49" pos:end="381:51">ist</name><operator pos:start="381:52" pos:end="381:53">-&gt;</operator><name pos:start="381:54" pos:end="381:63">file_index</name></name></expr>]</index></name><operator pos:start="381:65" pos:end="381:65">.</operator><name pos:start="381:66" pos:end="381:74">ts_offset</name></expr></argument>, <argument pos:start="381:77" pos:end="381:90"><expr pos:start="381:77" pos:end="381:90"><name pos:start="381:77" pos:end="381:90">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="381:93" pos:end="381:110"><expr pos:start="381:93" pos:end="381:110"><name pos:start="381:93" pos:end="381:110"><name pos:start="381:93" pos:end="381:95">ist</name><operator pos:start="381:96" pos:end="381:97">-&gt;</operator><name pos:start="381:98" pos:end="381:99">st</name><operator pos:start="381:100" pos:end="381:101">-&gt;</operator><name pos:start="381:102" pos:end="381:110">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="385:9" pos:end="395:9"><if pos:start="385:9" pos:end="395:9">if <condition pos:start="385:12" pos:end="385:26">(<expr pos:start="385:13" pos:end="385:25"><name pos:start="385:13" pos:end="385:25"><name pos:start="385:13" pos:end="385:15">ist</name><operator pos:start="385:16" pos:end="385:17">-&gt;</operator><name pos:start="385:18" pos:end="385:25">ts_scale</name></name></expr>)</condition> <block pos:start="385:28" pos:end="395:9">{<block_content pos:start="387:13" pos:end="393:41">

            <if_stmt pos:start="387:13" pos:end="389:41"><if pos:start="387:13" pos:end="389:41">if<condition pos:start="387:15" pos:end="387:41">(<expr pos:start="387:16" pos:end="387:40"><name pos:start="387:16" pos:end="387:22"><name pos:start="387:16" pos:end="387:18">pkt</name><operator pos:start="387:19" pos:end="387:19">.</operator><name pos:start="387:20" pos:end="387:22">pts</name></name> <operator pos:start="387:24" pos:end="387:25">!=</operator> <name pos:start="387:27" pos:end="387:40">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="389:17" pos:end="389:41"><block_content pos:start="389:17" pos:end="389:41">

                <expr_stmt pos:start="389:17" pos:end="389:41"><expr pos:start="389:17" pos:end="389:40"><name pos:start="389:17" pos:end="389:23"><name pos:start="389:17" pos:end="389:19">pkt</name><operator pos:start="389:20" pos:end="389:20">.</operator><name pos:start="389:21" pos:end="389:23">pts</name></name> <operator pos:start="389:25" pos:end="389:26">*=</operator> <name pos:start="389:28" pos:end="389:40"><name pos:start="389:28" pos:end="389:30">ist</name><operator pos:start="389:31" pos:end="389:32">-&gt;</operator><name pos:start="389:33" pos:end="389:40">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="391:13" pos:end="393:41"><if pos:start="391:13" pos:end="393:41">if<condition pos:start="391:15" pos:end="391:41">(<expr pos:start="391:16" pos:end="391:40"><name pos:start="391:16" pos:end="391:22"><name pos:start="391:16" pos:end="391:18">pkt</name><operator pos:start="391:19" pos:end="391:19">.</operator><name pos:start="391:20" pos:end="391:22">dts</name></name> <operator pos:start="391:24" pos:end="391:25">!=</operator> <name pos:start="391:27" pos:end="391:40">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="393:17" pos:end="393:41"><block_content pos:start="393:17" pos:end="393:41">

                <expr_stmt pos:start="393:17" pos:end="393:41"><expr pos:start="393:17" pos:end="393:40"><name pos:start="393:17" pos:end="393:23"><name pos:start="393:17" pos:end="393:19">pkt</name><operator pos:start="393:20" pos:end="393:20">.</operator><name pos:start="393:21" pos:end="393:23">dts</name></name> <operator pos:start="393:25" pos:end="393:26">*=</operator> <name pos:start="393:28" pos:end="393:40"><name pos:start="393:28" pos:end="393:30">ist</name><operator pos:start="393:31" pos:end="393:32">-&gt;</operator><name pos:start="393:33" pos:end="393:40">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="399:1" pos:end="399:169">//        fprintf(stderr, "next:%"PRId64" dts:%"PRId64" off:%"PRId64" %d\n", ist-&gt;next_pts, pkt.dts, input_files[ist-&gt;file_index].ts_offset, ist-&gt;st-&gt;codec-&gt;codec_type);</comment>

        <if_stmt pos:start="401:9" pos:end="433:9"><if pos:start="401:9" pos:end="433:9">if <condition pos:start="401:12" pos:end="403:55">(<expr pos:start="401:13" pos:end="403:54"><name pos:start="401:13" pos:end="401:19"><name pos:start="401:13" pos:end="401:15">pkt</name><operator pos:start="401:16" pos:end="401:16">.</operator><name pos:start="401:17" pos:end="401:19">dts</name></name> <operator pos:start="401:21" pos:end="401:22">!=</operator> <name pos:start="401:24" pos:end="401:37">AV_NOPTS_VALUE</name> <operator pos:start="401:39" pos:end="401:40">&amp;&amp;</operator> <name pos:start="401:42" pos:end="401:54"><name pos:start="401:42" pos:end="401:44">ist</name><operator pos:start="401:45" pos:end="401:46">-&gt;</operator><name pos:start="401:47" pos:end="401:54">next_pts</name></name> <operator pos:start="401:56" pos:end="401:57">!=</operator> <name pos:start="401:59" pos:end="401:72">AV_NOPTS_VALUE</name>

            <operator pos:start="403:13" pos:end="403:14">&amp;&amp;</operator> <operator pos:start="403:16" pos:end="403:16">(</operator><name pos:start="403:17" pos:end="403:34"><name pos:start="403:17" pos:end="403:18">is</name><operator pos:start="403:19" pos:end="403:20">-&gt;</operator><name pos:start="403:21" pos:end="403:27">iformat</name><operator pos:start="403:28" pos:end="403:29">-&gt;</operator><name pos:start="403:30" pos:end="403:34">flags</name></name> <operator pos:start="403:36" pos:end="403:36">&amp;</operator> <name pos:start="403:38" pos:end="403:53">AVFMT_TS_DISCONT</name><operator pos:start="403:54" pos:end="403:54">)</operator></expr>)</condition> <block pos:start="403:57" pos:end="433:9">{<block_content pos:start="405:13" pos:end="431:13">

            <decl_stmt pos:start="405:13" pos:end="405:87"><decl pos:start="405:13" pos:end="405:86"><type pos:start="405:13" pos:end="405:19"><name pos:start="405:13" pos:end="405:19">int64_t</name></type> <name pos:start="405:21" pos:end="405:27">pkt_dts</name><init pos:start="405:28" pos:end="405:86">= <expr pos:start="405:30" pos:end="405:86"><call pos:start="405:30" pos:end="405:86"><name pos:start="405:30" pos:end="405:41">av_rescale_q</name><argument_list pos:start="405:42" pos:end="405:86">(<argument pos:start="405:43" pos:end="405:49"><expr pos:start="405:43" pos:end="405:49"><name pos:start="405:43" pos:end="405:49"><name pos:start="405:43" pos:end="405:45">pkt</name><operator pos:start="405:46" pos:end="405:46">.</operator><name pos:start="405:47" pos:end="405:49">dts</name></name></expr></argument>, <argument pos:start="405:52" pos:end="405:69"><expr pos:start="405:52" pos:end="405:69"><name pos:start="405:52" pos:end="405:69"><name pos:start="405:52" pos:end="405:54">ist</name><operator pos:start="405:55" pos:end="405:56">-&gt;</operator><name pos:start="405:57" pos:end="405:58">st</name><operator pos:start="405:59" pos:end="405:60">-&gt;</operator><name pos:start="405:61" pos:end="405:69">time_base</name></name></expr></argument>, <argument pos:start="405:72" pos:end="405:85"><expr pos:start="405:72" pos:end="405:85"><name pos:start="405:72" pos:end="405:85">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="407:13" pos:end="407:51"><decl pos:start="407:13" pos:end="407:50"><type pos:start="407:13" pos:end="407:19"><name pos:start="407:13" pos:end="407:19">int64_t</name></type> <name pos:start="407:21" pos:end="407:25">delta</name><init pos:start="407:26" pos:end="407:50">= <expr pos:start="407:28" pos:end="407:50"><name pos:start="407:28" pos:end="407:34">pkt_dts</name> <operator pos:start="407:36" pos:end="407:36">-</operator> <name pos:start="407:38" pos:end="407:50"><name pos:start="407:38" pos:end="407:40">ist</name><operator pos:start="407:41" pos:end="407:42">-&gt;</operator><name pos:start="407:43" pos:end="407:50">next_pts</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="409:13" pos:end="431:13"><if pos:start="409:13" pos:end="431:13">if<condition pos:start="409:15" pos:end="415:47">(<expr pos:start="409:16" pos:end="415:46"><operator pos:start="409:16" pos:end="409:16">(</operator><name pos:start="409:17" pos:end="409:21">delta</name> <operator pos:start="409:23" pos:end="409:23">&lt;</operator> <operator pos:start="409:25" pos:end="409:25">-</operator><literal type="number" pos:start="409:26" pos:end="409:28">1LL</literal><operator pos:start="409:29" pos:end="409:29">*</operator><name pos:start="409:30" pos:end="409:48">dts_delta_threshold</name><operator pos:start="409:49" pos:end="409:49">*</operator><name pos:start="409:50" pos:end="409:61">AV_TIME_BASE</name> <operator pos:start="409:63" pos:end="409:64">||</operator>

                <operator pos:start="411:17" pos:end="411:17">(</operator><name pos:start="411:18" pos:end="411:22">delta</name> <operator pos:start="411:24" pos:end="411:24">&gt;</operator> <literal type="number" pos:start="411:26" pos:end="411:28">1LL</literal><operator pos:start="411:29" pos:end="411:29">*</operator><name pos:start="411:30" pos:end="411:48">dts_delta_threshold</name><operator pos:start="411:49" pos:end="411:49">*</operator><name pos:start="411:50" pos:end="411:61">AV_TIME_BASE</name> <operator pos:start="411:63" pos:end="411:64">&amp;&amp;</operator>

                 <name pos:start="413:18" pos:end="413:43"><name pos:start="413:18" pos:end="413:20">ist</name><operator pos:start="413:21" pos:end="413:22">-&gt;</operator><name pos:start="413:23" pos:end="413:24">st</name><operator pos:start="413:25" pos:end="413:26">-&gt;</operator><name pos:start="413:27" pos:end="413:31">codec</name><operator pos:start="413:32" pos:end="413:33">-&gt;</operator><name pos:start="413:34" pos:end="413:43">codec_type</name></name> <operator pos:start="413:45" pos:end="413:46">!=</operator> <name pos:start="413:48" pos:end="413:68">AVMEDIA_TYPE_SUBTITLE</name><operator pos:start="413:69" pos:end="413:69">)</operator> <operator pos:start="413:71" pos:end="413:72">||</operator>

                <name pos:start="415:17" pos:end="415:23">pkt_dts</name><operator pos:start="415:24" pos:end="415:24">+</operator><literal type="number" pos:start="415:25" pos:end="415:25">1</literal><operator pos:start="415:26" pos:end="415:26">&lt;</operator><name pos:start="415:27" pos:end="415:34"><name pos:start="415:27" pos:end="415:29">ist</name><operator pos:start="415:30" pos:end="415:31">-&gt;</operator><name pos:start="415:32" pos:end="415:34">pts</name></name><operator pos:start="415:35" pos:end="415:35">)</operator><operator pos:start="415:36" pos:end="415:37">&amp;&amp;</operator> <operator pos:start="415:39" pos:end="415:39">!</operator><name pos:start="415:40" pos:end="415:46">copy_ts</name></expr>)</condition><block pos:start="415:48" pos:end="431:13">{<block_content pos:start="417:17" pos:end="429:86">

                <expr_stmt pos:start="417:17" pos:end="417:64"><expr pos:start="417:17" pos:end="417:63"><name pos:start="417:17" pos:end="417:44"><name pos:start="417:17" pos:end="417:27">input_files</name><index pos:start="417:28" pos:end="417:44">[<expr pos:start="417:29" pos:end="417:43"><name pos:start="417:29" pos:end="417:43"><name pos:start="417:29" pos:end="417:31">ist</name><operator pos:start="417:32" pos:end="417:33">-&gt;</operator><name pos:start="417:34" pos:end="417:43">file_index</name></name></expr>]</index></name><operator pos:start="417:45" pos:end="417:45">.</operator><name pos:start="417:46" pos:end="417:54">ts_offset</name> <operator pos:start="417:56" pos:end="417:57">-=</operator> <name pos:start="417:59" pos:end="417:63">delta</name></expr>;</expr_stmt>

                <if_stmt pos:start="419:17" pos:end="423:75"><if pos:start="419:17" pos:end="423:75">if <condition pos:start="419:20" pos:end="419:32">(<expr pos:start="419:21" pos:end="419:31"><name pos:start="419:21" pos:end="419:27">verbose</name> <operator pos:start="419:29" pos:end="419:29">&gt;</operator> <literal type="number" pos:start="419:31" pos:end="419:31">2</literal></expr>)</condition><block type="pseudo" pos:start="421:21" pos:end="423:75"><block_content pos:start="421:21" pos:end="423:75">

                    <expr_stmt pos:start="421:21" pos:end="423:75"><expr pos:start="421:21" pos:end="423:74"><call pos:start="421:21" pos:end="423:74"><name pos:start="421:21" pos:end="421:27">fprintf</name><argument_list pos:start="421:28" pos:end="423:74">(<argument pos:start="421:29" pos:end="421:34"><expr pos:start="421:29" pos:end="421:34"><name pos:start="421:29" pos:end="421:34">stderr</name></expr></argument>, <argument pos:start="421:37" pos:end="421:96"><expr pos:start="421:37" pos:end="421:96"><literal type="string" pos:start="421:37" pos:end="421:63">"timestamp discontinuity %"</literal><name pos:start="421:64" pos:end="421:69">PRId64</name><literal type="string" pos:start="421:70" pos:end="421:86">", new offset= %"</literal><name pos:start="421:87" pos:end="421:92">PRId64</name><literal type="string" pos:start="421:93" pos:end="421:96">"\n"</literal></expr></argument>,

                            <argument pos:start="423:29" pos:end="423:33"><expr pos:start="423:29" pos:end="423:33"><name pos:start="423:29" pos:end="423:33">delta</name></expr></argument>, <argument pos:start="423:36" pos:end="423:73"><expr pos:start="423:36" pos:end="423:73"><name pos:start="423:36" pos:end="423:63"><name pos:start="423:36" pos:end="423:46">input_files</name><index pos:start="423:47" pos:end="423:63">[<expr pos:start="423:48" pos:end="423:62"><name pos:start="423:48" pos:end="423:62"><name pos:start="423:48" pos:end="423:50">ist</name><operator pos:start="423:51" pos:end="423:52">-&gt;</operator><name pos:start="423:53" pos:end="423:62">file_index</name></name></expr>]</index></name><operator pos:start="423:64" pos:end="423:64">.</operator><name pos:start="423:65" pos:end="423:73">ts_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:82"><expr pos:start="425:17" pos:end="425:81"><name pos:start="425:17" pos:end="425:23"><name pos:start="425:17" pos:end="425:19">pkt</name><operator pos:start="425:20" pos:end="425:20">.</operator><name pos:start="425:21" pos:end="425:23">dts</name></name><operator pos:start="425:24" pos:end="425:25">-=</operator> <call pos:start="425:27" pos:end="425:81"><name pos:start="425:27" pos:end="425:38">av_rescale_q</name><argument_list pos:start="425:39" pos:end="425:81">(<argument pos:start="425:40" pos:end="425:44"><expr pos:start="425:40" pos:end="425:44"><name pos:start="425:40" pos:end="425:44">delta</name></expr></argument>, <argument pos:start="425:47" pos:end="425:60"><expr pos:start="425:47" pos:end="425:60"><name pos:start="425:47" pos:end="425:60">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="425:63" pos:end="425:80"><expr pos:start="425:63" pos:end="425:80"><name pos:start="425:63" pos:end="425:80"><name pos:start="425:63" pos:end="425:65">ist</name><operator pos:start="425:66" pos:end="425:67">-&gt;</operator><name pos:start="425:68" pos:end="425:69">st</name><operator pos:start="425:70" pos:end="425:71">-&gt;</operator><name pos:start="425:72" pos:end="425:80">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="427:17" pos:end="429:86"><if pos:start="427:17" pos:end="429:86">if<condition pos:start="427:19" pos:end="427:45">(<expr pos:start="427:20" pos:end="427:44"><name pos:start="427:20" pos:end="427:26"><name pos:start="427:20" pos:end="427:22">pkt</name><operator pos:start="427:23" pos:end="427:23">.</operator><name pos:start="427:24" pos:end="427:26">pts</name></name> <operator pos:start="427:28" pos:end="427:29">!=</operator> <name pos:start="427:31" pos:end="427:44">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="429:21" pos:end="429:86"><block_content pos:start="429:21" pos:end="429:86">

                    <expr_stmt pos:start="429:21" pos:end="429:86"><expr pos:start="429:21" pos:end="429:85"><name pos:start="429:21" pos:end="429:27"><name pos:start="429:21" pos:end="429:23">pkt</name><operator pos:start="429:24" pos:end="429:24">.</operator><name pos:start="429:25" pos:end="429:27">pts</name></name><operator pos:start="429:28" pos:end="429:29">-=</operator> <call pos:start="429:31" pos:end="429:85"><name pos:start="429:31" pos:end="429:42">av_rescale_q</name><argument_list pos:start="429:43" pos:end="429:85">(<argument pos:start="429:44" pos:end="429:48"><expr pos:start="429:44" pos:end="429:48"><name pos:start="429:44" pos:end="429:48">delta</name></expr></argument>, <argument pos:start="429:51" pos:end="429:64"><expr pos:start="429:51" pos:end="429:64"><name pos:start="429:51" pos:end="429:64">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="429:67" pos:end="429:84"><expr pos:start="429:67" pos:end="429:84"><name pos:start="429:67" pos:end="429:84"><name pos:start="429:67" pos:end="429:69">ist</name><operator pos:start="429:70" pos:end="429:71">-&gt;</operator><name pos:start="429:72" pos:end="429:73">st</name><operator pos:start="429:74" pos:end="429:75">-&gt;</operator><name pos:start="429:76" pos:end="429:84">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="437:9" pos:end="437:93">//fprintf(stderr,"read #%d.%d size=%d\n", ist-&gt;file_index, ist-&gt;st-&gt;index, pkt.size);</comment>

        <if_stmt pos:start="439:9" pos:end="457:9"><if pos:start="439:9" pos:end="457:9">if <condition pos:start="439:12" pos:end="439:87">(<expr pos:start="439:13" pos:end="439:86"><call pos:start="439:13" pos:end="439:82"><name pos:start="439:13" pos:end="439:25">output_packet</name><argument_list pos:start="439:26" pos:end="439:82">(<argument pos:start="439:27" pos:end="439:29"><expr pos:start="439:27" pos:end="439:29"><name pos:start="439:27" pos:end="439:29">ist</name></expr></argument>, <argument pos:start="439:32" pos:end="439:40"><expr pos:start="439:32" pos:end="439:40"><name pos:start="439:32" pos:end="439:40">ist_index</name></expr></argument>, <argument pos:start="439:43" pos:end="439:56"><expr pos:start="439:43" pos:end="439:56"><name pos:start="439:43" pos:end="439:56">output_streams</name></expr></argument>, <argument pos:start="439:59" pos:end="439:75"><expr pos:start="439:59" pos:end="439:75"><name pos:start="439:59" pos:end="439:75">nb_output_streams</name></expr></argument>, <argument pos:start="439:78" pos:end="439:81"><expr pos:start="439:78" pos:end="439:81"><operator pos:start="439:78" pos:end="439:78">&amp;</operator><name pos:start="439:79" pos:end="439:81">pkt</name></expr></argument>)</argument_list></call> <operator pos:start="439:84" pos:end="439:84">&lt;</operator> <literal type="number" pos:start="439:86" pos:end="439:86">0</literal></expr>)</condition> <block pos:start="439:89" pos:end="457:9">{<block_content pos:start="443:13" pos:end="455:22">



            <if_stmt pos:start="443:13" pos:end="447:57"><if pos:start="443:13" pos:end="447:57">if <condition pos:start="443:16" pos:end="443:29">(<expr pos:start="443:17" pos:end="443:28"><name pos:start="443:17" pos:end="443:23">verbose</name> <operator pos:start="443:25" pos:end="443:26">&gt;=</operator> <literal type="number" pos:start="443:28" pos:end="443:28">0</literal></expr>)</condition><block type="pseudo" pos:start="445:17" pos:end="447:57"><block_content pos:start="445:17" pos:end="447:57">

                <expr_stmt pos:start="445:17" pos:end="447:57"><expr pos:start="445:17" pos:end="447:56"><call pos:start="445:17" pos:end="447:56"><name pos:start="445:17" pos:end="445:23">fprintf</name><argument_list pos:start="445:24" pos:end="447:56">(<argument pos:start="445:25" pos:end="445:30"><expr pos:start="445:25" pos:end="445:30"><name pos:start="445:25" pos:end="445:30">stderr</name></expr></argument>, <argument pos:start="445:33" pos:end="445:70"><expr pos:start="445:33" pos:end="445:70"><literal type="string" pos:start="445:33" pos:end="445:70">"Error while decoding stream #%d.%d\n"</literal></expr></argument>,

                        <argument pos:start="447:25" pos:end="447:39"><expr pos:start="447:25" pos:end="447:39"><name pos:start="447:25" pos:end="447:39"><name pos:start="447:25" pos:end="447:27">ist</name><operator pos:start="447:28" pos:end="447:29">-&gt;</operator><name pos:start="447:30" pos:end="447:39">file_index</name></name></expr></argument>, <argument pos:start="447:42" pos:end="447:55"><expr pos:start="447:42" pos:end="447:55"><name pos:start="447:42" pos:end="447:55"><name pos:start="447:42" pos:end="447:44">ist</name><operator pos:start="447:45" pos:end="447:46">-&gt;</operator><name pos:start="447:47" pos:end="447:48">st</name><operator pos:start="447:49" pos:end="447:50">-&gt;</operator><name pos:start="447:51" pos:end="447:55">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="449:13" pos:end="451:32"><if pos:start="449:13" pos:end="451:32">if <condition pos:start="449:16" pos:end="449:30">(<expr pos:start="449:17" pos:end="449:29"><name pos:start="449:17" pos:end="449:29">exit_on_error</name></expr>)</condition><block type="pseudo" pos:start="451:17" pos:end="451:32"><block_content pos:start="451:17" pos:end="451:32">

                <expr_stmt pos:start="451:17" pos:end="451:32"><expr pos:start="451:17" pos:end="451:31"><call pos:start="451:17" pos:end="451:31"><name pos:start="451:17" pos:end="451:28">exit_program</name><argument_list pos:start="451:29" pos:end="451:31">(<argument pos:start="451:30" pos:end="451:30"><expr pos:start="451:30" pos:end="451:30"><literal type="number" pos:start="451:30" pos:end="451:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:33"><expr pos:start="453:13" pos:end="453:32"><call pos:start="453:13" pos:end="453:32"><name pos:start="453:13" pos:end="453:26">av_free_packet</name><argument_list pos:start="453:27" pos:end="453:32">(<argument pos:start="453:28" pos:end="453:31"><expr pos:start="453:28" pos:end="453:31"><operator pos:start="453:28" pos:end="453:28">&amp;</operator><name pos:start="453:29" pos:end="453:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="455:13" pos:end="455:22">goto <name pos:start="455:18" pos:end="455:21">redo</name>;</goto>

        </block_content>}</block></if></if_stmt>



    <label pos:start="461:5" pos:end="461:19"><name pos:start="461:5" pos:end="461:18">discard_packet</name>:</label>

        <expr_stmt pos:start="463:9" pos:end="463:29"><expr pos:start="463:9" pos:end="463:28"><call pos:start="463:9" pos:end="463:28"><name pos:start="463:9" pos:end="463:22">av_free_packet</name><argument_list pos:start="463:23" pos:end="463:28">(<argument pos:start="463:24" pos:end="463:27"><expr pos:start="463:24" pos:end="463:27"><operator pos:start="463:24" pos:end="463:24">&amp;</operator><name pos:start="463:25" pos:end="463:27">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="467:9" pos:end="467:75">/* dump report by using the output first video and audio streams */</comment>

        <expr_stmt pos:start="469:9" pos:end="469:86"><expr pos:start="469:9" pos:end="469:85"><call pos:start="469:9" pos:end="469:85"><name pos:start="469:9" pos:end="469:20">print_report</name><argument_list pos:start="469:21" pos:end="469:85">(<argument pos:start="469:22" pos:end="469:33"><expr pos:start="469:22" pos:end="469:33"><name pos:start="469:22" pos:end="469:33">output_files</name></expr></argument>, <argument pos:start="469:36" pos:end="469:49"><expr pos:start="469:36" pos:end="469:49"><name pos:start="469:36" pos:end="469:49">output_streams</name></expr></argument>, <argument pos:start="469:52" pos:end="469:68"><expr pos:start="469:52" pos:end="469:68"><name pos:start="469:52" pos:end="469:68">nb_output_streams</name></expr></argument>, <argument pos:start="469:71" pos:end="469:71"><expr pos:start="469:71" pos:end="469:71"><literal type="number" pos:start="469:71" pos:end="469:71">0</literal></expr></argument>, <argument pos:start="469:74" pos:end="469:84"><expr pos:start="469:74" pos:end="469:84"><name pos:start="469:74" pos:end="469:84">timer_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="475:5" pos:end="475:65">/* at the end of stream, we must flush the decoder buffers */</comment>

    <for pos:start="477:5" pos:end="487:5">for <control pos:start="477:9" pos:end="477:42">(<init pos:start="477:10" pos:end="477:15"><expr pos:start="477:10" pos:end="477:14"><name pos:start="477:10" pos:end="477:10">i</name> <operator pos:start="477:12" pos:end="477:12">=</operator> <literal type="number" pos:start="477:14" pos:end="477:14">0</literal></expr>;</init> <condition pos:start="477:17" pos:end="477:37"><expr pos:start="477:17" pos:end="477:36"><name pos:start="477:17" pos:end="477:17">i</name> <operator pos:start="477:19" pos:end="477:19">&lt;</operator> <name pos:start="477:21" pos:end="477:36">nb_input_streams</name></expr>;</condition> <incr pos:start="477:39" pos:end="477:41"><expr pos:start="477:39" pos:end="477:41"><name pos:start="477:39" pos:end="477:39">i</name><operator pos:start="477:40" pos:end="477:41">++</operator></expr></incr>)</control> <block pos:start="477:44" pos:end="487:5">{<block_content pos:start="479:9" pos:end="485:9">

        <expr_stmt pos:start="479:9" pos:end="479:32"><expr pos:start="479:9" pos:end="479:31"><name pos:start="479:9" pos:end="479:11">ist</name> <operator pos:start="479:13" pos:end="479:13">=</operator> <operator pos:start="479:15" pos:end="479:15">&amp;</operator><name pos:start="479:16" pos:end="479:31"><name pos:start="479:16" pos:end="479:28">input_streams</name><index pos:start="479:29" pos:end="479:31">[<expr pos:start="479:30" pos:end="479:30"><name pos:start="479:30" pos:end="479:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="481:9" pos:end="485:9"><if pos:start="481:9" pos:end="485:9">if <condition pos:start="481:12" pos:end="481:33">(<expr pos:start="481:13" pos:end="481:32"><name pos:start="481:13" pos:end="481:32"><name pos:start="481:13" pos:end="481:15">ist</name><operator pos:start="481:16" pos:end="481:17">-&gt;</operator><name pos:start="481:18" pos:end="481:32">decoding_needed</name></name></expr>)</condition> <block pos:start="481:35" pos:end="485:9">{<block_content pos:start="483:13" pos:end="483:75">

            <expr_stmt pos:start="483:13" pos:end="483:75"><expr pos:start="483:13" pos:end="483:74"><call pos:start="483:13" pos:end="483:74"><name pos:start="483:13" pos:end="483:25">output_packet</name><argument_list pos:start="483:26" pos:end="483:74">(<argument pos:start="483:27" pos:end="483:29"><expr pos:start="483:27" pos:end="483:29"><name pos:start="483:27" pos:end="483:29">ist</name></expr></argument>, <argument pos:start="483:32" pos:end="483:32"><expr pos:start="483:32" pos:end="483:32"><name pos:start="483:32" pos:end="483:32">i</name></expr></argument>, <argument pos:start="483:35" pos:end="483:48"><expr pos:start="483:35" pos:end="483:48"><name pos:start="483:35" pos:end="483:48">output_streams</name></expr></argument>, <argument pos:start="483:51" pos:end="483:67"><expr pos:start="483:51" pos:end="483:67"><name pos:start="483:51" pos:end="483:67">nb_output_streams</name></expr></argument>, <argument pos:start="483:70" pos:end="483:73"><expr pos:start="483:70" pos:end="483:73"><name pos:start="483:70" pos:end="483:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="489:5" pos:end="489:54"><expr pos:start="489:5" pos:end="489:53"><call pos:start="489:5" pos:end="489:53"><name pos:start="489:5" pos:end="489:18">flush_encoders</name><argument_list pos:start="489:19" pos:end="489:53">(<argument pos:start="489:20" pos:end="489:33"><expr pos:start="489:20" pos:end="489:33"><name pos:start="489:20" pos:end="489:33">output_streams</name></expr></argument>, <argument pos:start="489:36" pos:end="489:52"><expr pos:start="489:36" pos:end="489:52"><name pos:start="489:36" pos:end="489:52">nb_output_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="493:5" pos:end="493:16"><expr pos:start="493:5" pos:end="493:15"><call pos:start="493:5" pos:end="493:15"><name pos:start="493:5" pos:end="493:13">term_exit</name><argument_list pos:start="493:14" pos:end="493:15">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="497:5" pos:end="497:52">/* write the trailer if needed and close file */</comment>

    <for pos:start="499:5" pos:end="505:5">for<control pos:start="499:8" pos:end="499:34">(<init pos:start="499:9" pos:end="499:12"><expr pos:start="499:9" pos:end="499:11"><name pos:start="499:9" pos:end="499:9">i</name><operator pos:start="499:10" pos:end="499:10">=</operator><literal type="number" pos:start="499:11" pos:end="499:11">0</literal></expr>;</init><condition pos:start="499:13" pos:end="499:30"><expr pos:start="499:13" pos:end="499:29"><name pos:start="499:13" pos:end="499:13">i</name><operator pos:start="499:14" pos:end="499:14">&lt;</operator><name pos:start="499:15" pos:end="499:29">nb_output_files</name></expr>;</condition><incr pos:start="499:31" pos:end="499:33"><expr pos:start="499:31" pos:end="499:33"><name pos:start="499:31" pos:end="499:31">i</name><operator pos:start="499:32" pos:end="499:33">++</operator></expr></incr>)</control> <block pos:start="499:36" pos:end="505:5">{<block_content pos:start="501:9" pos:end="503:29">

        <expr_stmt pos:start="501:9" pos:end="501:33"><expr pos:start="501:9" pos:end="501:32"><name pos:start="501:9" pos:end="501:10">os</name> <operator pos:start="501:12" pos:end="501:12">=</operator> <name pos:start="501:14" pos:end="501:28"><name pos:start="501:14" pos:end="501:25">output_files</name><index pos:start="501:26" pos:end="501:28">[<expr pos:start="501:27" pos:end="501:27"><name pos:start="501:27" pos:end="501:27">i</name></expr>]</index></name><operator pos:start="501:29" pos:end="501:29">.</operator><name pos:start="501:30" pos:end="501:32">ctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="503:9" pos:end="503:29"><expr pos:start="503:9" pos:end="503:28"><call pos:start="503:9" pos:end="503:28"><name pos:start="503:9" pos:end="503:24">av_write_trailer</name><argument_list pos:start="503:25" pos:end="503:28">(<argument pos:start="503:26" pos:end="503:27"><expr pos:start="503:26" pos:end="503:27"><name pos:start="503:26" pos:end="503:27">os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="509:5" pos:end="509:64">/* dump report by using the first video and audio streams */</comment>

    <expr_stmt pos:start="511:5" pos:end="511:82"><expr pos:start="511:5" pos:end="511:81"><call pos:start="511:5" pos:end="511:81"><name pos:start="511:5" pos:end="511:16">print_report</name><argument_list pos:start="511:17" pos:end="511:81">(<argument pos:start="511:18" pos:end="511:29"><expr pos:start="511:18" pos:end="511:29"><name pos:start="511:18" pos:end="511:29">output_files</name></expr></argument>, <argument pos:start="511:32" pos:end="511:45"><expr pos:start="511:32" pos:end="511:45"><name pos:start="511:32" pos:end="511:45">output_streams</name></expr></argument>, <argument pos:start="511:48" pos:end="511:64"><expr pos:start="511:48" pos:end="511:64"><name pos:start="511:48" pos:end="511:64">nb_output_streams</name></expr></argument>, <argument pos:start="511:67" pos:end="511:67"><expr pos:start="511:67" pos:end="511:67"><literal type="number" pos:start="511:67" pos:end="511:67">1</literal></expr></argument>, <argument pos:start="511:70" pos:end="511:80"><expr pos:start="511:70" pos:end="511:80"><name pos:start="511:70" pos:end="511:80">timer_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="515:5" pos:end="515:28">/* close each encoder */</comment>

    <for pos:start="517:5" pos:end="535:5">for <control pos:start="517:9" pos:end="517:43">(<init pos:start="517:10" pos:end="517:15"><expr pos:start="517:10" pos:end="517:14"><name pos:start="517:10" pos:end="517:10">i</name> <operator pos:start="517:12" pos:end="517:12">=</operator> <literal type="number" pos:start="517:14" pos:end="517:14">0</literal></expr>;</init> <condition pos:start="517:17" pos:end="517:38"><expr pos:start="517:17" pos:end="517:37"><name pos:start="517:17" pos:end="517:17">i</name> <operator pos:start="517:19" pos:end="517:19">&lt;</operator> <name pos:start="517:21" pos:end="517:37">nb_output_streams</name></expr>;</condition> <incr pos:start="517:40" pos:end="517:42"><expr pos:start="517:40" pos:end="517:42"><name pos:start="517:40" pos:end="517:40">i</name><operator pos:start="517:41" pos:end="517:42">++</operator></expr></incr>)</control> <block pos:start="517:45" pos:end="535:5">{<block_content pos:start="519:9" pos:end="534:0">

        <expr_stmt pos:start="519:9" pos:end="519:33"><expr pos:start="519:9" pos:end="519:32"><name pos:start="519:9" pos:end="519:11">ost</name> <operator pos:start="519:13" pos:end="519:13">=</operator> <operator pos:start="519:15" pos:end="519:15">&amp;</operator><name pos:start="519:16" pos:end="519:32"><name pos:start="519:16" pos:end="519:29">output_streams</name><index pos:start="519:30" pos:end="519:32">[<expr pos:start="519:31" pos:end="519:31"><name pos:start="519:31" pos:end="519:31">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="521:9" pos:end="530:0"><if pos:start="521:9" pos:end="530:0">if <condition pos:start="521:12" pos:end="521:33">(<expr pos:start="521:13" pos:end="521:32"><name pos:start="521:13" pos:end="521:32"><name pos:start="521:13" pos:end="521:15">ost</name><operator pos:start="521:16" pos:end="521:17">-&gt;</operator><name pos:start="521:18" pos:end="521:32">encoding_needed</name></name></expr>)</condition> <block pos:start="521:35" pos:end="530:0">{<block_content pos:start="523:13" pos:end="525:42">

            <expr_stmt pos:start="523:13" pos:end="523:48"><expr pos:start="523:13" pos:end="523:47"><call pos:start="523:13" pos:end="523:47"><name pos:start="523:13" pos:end="523:20">av_freep</name><argument_list pos:start="523:21" pos:end="523:47">(<argument pos:start="523:22" pos:end="523:46"><expr pos:start="523:22" pos:end="523:46"><operator pos:start="523:22" pos:end="523:22">&amp;</operator><name pos:start="523:23" pos:end="523:46"><name pos:start="523:23" pos:end="523:25">ost</name><operator pos:start="523:26" pos:end="523:27">-&gt;</operator><name pos:start="523:28" pos:end="523:29">st</name><operator pos:start="523:30" pos:end="523:31">-&gt;</operator><name pos:start="523:32" pos:end="523:36">codec</name><operator pos:start="523:37" pos:end="523:38">-&gt;</operator><name pos:start="523:39" pos:end="523:46">stats_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="525:13" pos:end="525:42"><expr pos:start="525:13" pos:end="525:41"><call pos:start="525:13" pos:end="525:41"><name pos:start="525:13" pos:end="525:25">avcodec_close</name><argument_list pos:start="525:26" pos:end="525:41">(<argument pos:start="525:27" pos:end="525:40"><expr pos:start="525:27" pos:end="525:40"><name pos:start="525:27" pos:end="525:40"><name pos:start="525:27" pos:end="525:29">ost</name><operator pos:start="525:30" pos:end="525:31">-&gt;</operator><name pos:start="525:32" pos:end="525:33">st</name><operator pos:start="525:34" pos:end="525:35">-&gt;</operator><name pos:start="525:36" pos:end="525:40">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="529:1" pos:end="529:19">#<cpp:directive pos:start="529:2" pos:end="529:3">if</cpp:directive> <expr pos:start="529:5" pos:end="529:19"><name pos:start="529:5" pos:end="529:19">CONFIG_AVFILTER</name></expr></cpp:if>

        <expr_stmt pos:start="531:9" pos:end="534:0"><expr pos:start="531:9" pos:end="531:40"><call pos:start="531:9" pos:end="531:40"><name pos:start="531:9" pos:end="531:27">avfilter_graph_free</name><argument_list pos:start="531:28" pos:end="531:40">(<argument pos:start="531:29" pos:end="531:39"><expr pos:start="531:29" pos:end="531:39"><operator pos:start="531:29" pos:end="531:29">&amp;</operator><name pos:start="531:30" pos:end="531:39"><name pos:start="531:30" pos:end="531:32">ost</name><operator pos:start="531:33" pos:end="531:34">-&gt;</operator><name pos:start="531:35" pos:end="531:39">graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="533:1" pos:end="533:6">#<cpp:directive pos:start="533:2" pos:end="533:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></for>



    <comment type="block" pos:start="539:5" pos:end="539:28">/* close each decoder */</comment>

    <for pos:start="541:5" pos:end="551:5">for <control pos:start="541:9" pos:end="541:42">(<init pos:start="541:10" pos:end="541:15"><expr pos:start="541:10" pos:end="541:14"><name pos:start="541:10" pos:end="541:10">i</name> <operator pos:start="541:12" pos:end="541:12">=</operator> <literal type="number" pos:start="541:14" pos:end="541:14">0</literal></expr>;</init> <condition pos:start="541:17" pos:end="541:37"><expr pos:start="541:17" pos:end="541:36"><name pos:start="541:17" pos:end="541:17">i</name> <operator pos:start="541:19" pos:end="541:19">&lt;</operator> <name pos:start="541:21" pos:end="541:36">nb_input_streams</name></expr>;</condition> <incr pos:start="541:39" pos:end="541:41"><expr pos:start="541:39" pos:end="541:41"><name pos:start="541:39" pos:end="541:39">i</name><operator pos:start="541:40" pos:end="541:41">++</operator></expr></incr>)</control> <block pos:start="541:44" pos:end="551:5">{<block_content pos:start="543:9" pos:end="549:9">

        <expr_stmt pos:start="543:9" pos:end="543:32"><expr pos:start="543:9" pos:end="543:31"><name pos:start="543:9" pos:end="543:11">ist</name> <operator pos:start="543:13" pos:end="543:13">=</operator> <operator pos:start="543:15" pos:end="543:15">&amp;</operator><name pos:start="543:16" pos:end="543:31"><name pos:start="543:16" pos:end="543:28">input_streams</name><index pos:start="543:29" pos:end="543:31">[<expr pos:start="543:30" pos:end="543:30"><name pos:start="543:30" pos:end="543:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="545:9" pos:end="549:9"><if pos:start="545:9" pos:end="549:9">if <condition pos:start="545:12" pos:end="545:33">(<expr pos:start="545:13" pos:end="545:32"><name pos:start="545:13" pos:end="545:32"><name pos:start="545:13" pos:end="545:15">ist</name><operator pos:start="545:16" pos:end="545:17">-&gt;</operator><name pos:start="545:18" pos:end="545:32">decoding_needed</name></name></expr>)</condition> <block pos:start="545:35" pos:end="549:9">{<block_content pos:start="547:13" pos:end="547:42">

            <expr_stmt pos:start="547:13" pos:end="547:42"><expr pos:start="547:13" pos:end="547:41"><call pos:start="547:13" pos:end="547:41"><name pos:start="547:13" pos:end="547:25">avcodec_close</name><argument_list pos:start="547:26" pos:end="547:41">(<argument pos:start="547:27" pos:end="547:40"><expr pos:start="547:27" pos:end="547:40"><name pos:start="547:27" pos:end="547:40"><name pos:start="547:27" pos:end="547:29">ist</name><operator pos:start="547:30" pos:end="547:31">-&gt;</operator><name pos:start="547:32" pos:end="547:33">st</name><operator pos:start="547:34" pos:end="547:35">-&gt;</operator><name pos:start="547:36" pos:end="547:40">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="555:5" pos:end="555:20">/* finished ! */</comment>

    <expr_stmt pos:start="557:5" pos:end="557:12"><expr pos:start="557:5" pos:end="557:11"><name pos:start="557:5" pos:end="557:7">ret</name> <operator pos:start="557:9" pos:end="557:9">=</operator> <literal type="number" pos:start="557:11" pos:end="557:11">0</literal></expr>;</expr_stmt>



 <label pos:start="561:2" pos:end="561:6"><name pos:start="561:2" pos:end="561:5">fail</name>:</label>

    <expr_stmt pos:start="563:5" pos:end="563:26"><expr pos:start="563:5" pos:end="563:25"><call pos:start="563:5" pos:end="563:25"><name pos:start="563:5" pos:end="563:12">av_freep</name><argument_list pos:start="563:13" pos:end="563:25">(<argument pos:start="563:14" pos:end="563:24"><expr pos:start="563:14" pos:end="563:24"><operator pos:start="563:14" pos:end="563:14">&amp;</operator><name pos:start="563:15" pos:end="563:24">bit_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="565:5" pos:end="565:25"><expr pos:start="565:5" pos:end="565:24"><call pos:start="565:5" pos:end="565:24"><name pos:start="565:5" pos:end="565:12">av_freep</name><argument_list pos:start="565:13" pos:end="565:24">(<argument pos:start="565:14" pos:end="565:23"><expr pos:start="565:14" pos:end="565:23"><operator pos:start="565:14" pos:end="565:14">&amp;</operator><name pos:start="565:15" pos:end="565:23">no_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="569:5" pos:end="617:5"><if pos:start="569:5" pos:end="617:5">if <condition pos:start="569:8" pos:end="569:23">(<expr pos:start="569:9" pos:end="569:22"><name pos:start="569:9" pos:end="569:22">output_streams</name></expr>)</condition> <block pos:start="569:25" pos:end="617:5">{<block_content pos:start="571:9" pos:end="615:9">

        <for pos:start="571:9" pos:end="615:9">for <control pos:start="571:13" pos:end="571:47">(<init pos:start="571:14" pos:end="571:19"><expr pos:start="571:14" pos:end="571:18"><name pos:start="571:14" pos:end="571:14">i</name> <operator pos:start="571:16" pos:end="571:16">=</operator> <literal type="number" pos:start="571:18" pos:end="571:18">0</literal></expr>;</init> <condition pos:start="571:21" pos:end="571:42"><expr pos:start="571:21" pos:end="571:41"><name pos:start="571:21" pos:end="571:21">i</name> <operator pos:start="571:23" pos:end="571:23">&lt;</operator> <name pos:start="571:25" pos:end="571:41">nb_output_streams</name></expr>;</condition> <incr pos:start="571:44" pos:end="571:46"><expr pos:start="571:44" pos:end="571:46"><name pos:start="571:44" pos:end="571:44">i</name><operator pos:start="571:45" pos:end="571:46">++</operator></expr></incr>)</control> <block pos:start="571:49" pos:end="615:9">{<block_content pos:start="573:13" pos:end="613:13">

            <expr_stmt pos:start="573:13" pos:end="573:37"><expr pos:start="573:13" pos:end="573:36"><name pos:start="573:13" pos:end="573:15">ost</name> <operator pos:start="573:17" pos:end="573:17">=</operator> <operator pos:start="573:19" pos:end="573:19">&amp;</operator><name pos:start="573:20" pos:end="573:36"><name pos:start="573:20" pos:end="573:33">output_streams</name><index pos:start="573:34" pos:end="573:36">[<expr pos:start="573:35" pos:end="573:35"><name pos:start="573:35" pos:end="573:35">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="575:13" pos:end="613:13"><if pos:start="575:13" pos:end="613:13">if <condition pos:start="575:16" pos:end="575:20">(<expr pos:start="575:17" pos:end="575:19"><name pos:start="575:17" pos:end="575:19">ost</name></expr>)</condition> <block pos:start="575:22" pos:end="613:13">{<block_content pos:start="577:17" pos:end="611:41">

                <if_stmt pos:start="577:17" pos:end="579:57"><if pos:start="577:17" pos:end="579:57">if <condition pos:start="577:20" pos:end="577:41">(<expr pos:start="577:21" pos:end="577:40"><name pos:start="577:21" pos:end="577:40"><name pos:start="577:21" pos:end="577:23">ost</name><operator pos:start="577:24" pos:end="577:25">-&gt;</operator><name pos:start="577:26" pos:end="577:27">st</name><operator pos:start="577:28" pos:end="577:29">-&gt;</operator><name pos:start="577:30" pos:end="577:40">stream_copy</name></name></expr>)</condition><block type="pseudo" pos:start="579:21" pos:end="579:57"><block_content pos:start="579:21" pos:end="579:57">

                    <expr_stmt pos:start="579:21" pos:end="579:57"><expr pos:start="579:21" pos:end="579:56"><call pos:start="579:21" pos:end="579:56"><name pos:start="579:21" pos:end="579:28">av_freep</name><argument_list pos:start="579:29" pos:end="579:56">(<argument pos:start="579:30" pos:end="579:55"><expr pos:start="579:30" pos:end="579:55"><operator pos:start="579:30" pos:end="579:30">&amp;</operator><name pos:start="579:31" pos:end="579:55"><name pos:start="579:31" pos:end="579:33">ost</name><operator pos:start="579:34" pos:end="579:35">-&gt;</operator><name pos:start="579:36" pos:end="579:37">st</name><operator pos:start="579:38" pos:end="579:39">-&gt;</operator><name pos:start="579:40" pos:end="579:44">codec</name><operator pos:start="579:45" pos:end="579:46">-&gt;</operator><name pos:start="579:47" pos:end="579:55">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="581:17" pos:end="587:17"><if pos:start="581:17" pos:end="587:17">if <condition pos:start="581:20" pos:end="581:33">(<expr pos:start="581:21" pos:end="581:32"><name pos:start="581:21" pos:end="581:32"><name pos:start="581:21" pos:end="581:23">ost</name><operator pos:start="581:24" pos:end="581:25">-&gt;</operator><name pos:start="581:26" pos:end="581:32">logfile</name></name></expr>)</condition> <block pos:start="581:35" pos:end="587:17">{<block_content pos:start="583:21" pos:end="585:40">

                    <expr_stmt pos:start="583:21" pos:end="583:41"><expr pos:start="583:21" pos:end="583:40"><call pos:start="583:21" pos:end="583:40"><name pos:start="583:21" pos:end="583:26">fclose</name><argument_list pos:start="583:27" pos:end="583:40">(<argument pos:start="583:28" pos:end="583:39"><expr pos:start="583:28" pos:end="583:39"><name pos:start="583:28" pos:end="583:39"><name pos:start="583:28" pos:end="583:30">ost</name><operator pos:start="583:31" pos:end="583:32">-&gt;</operator><name pos:start="583:33" pos:end="583:39">logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="585:21" pos:end="585:40"><expr pos:start="585:21" pos:end="585:39"><name pos:start="585:21" pos:end="585:32"><name pos:start="585:21" pos:end="585:23">ost</name><operator pos:start="585:24" pos:end="585:25">-&gt;</operator><name pos:start="585:26" pos:end="585:32">logfile</name></name> <operator pos:start="585:34" pos:end="585:34">=</operator> <name pos:start="585:36" pos:end="585:39">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="589:17" pos:end="589:40"><expr pos:start="589:17" pos:end="589:39"><call pos:start="589:17" pos:end="589:39"><name pos:start="589:17" pos:end="589:28">av_fifo_free</name><argument_list pos:start="589:29" pos:end="589:39">(<argument pos:start="589:30" pos:end="589:38"><expr pos:start="589:30" pos:end="589:38"><name pos:start="589:30" pos:end="589:38"><name pos:start="589:30" pos:end="589:32">ost</name><operator pos:start="589:33" pos:end="589:34">-&gt;</operator><name pos:start="589:35" pos:end="589:38">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="589:42" pos:end="591:75">/* works even if fifo is not

                                             initialized but set to zero */</comment>

                <expr_stmt pos:start="593:17" pos:end="593:59"><expr pos:start="593:17" pos:end="593:58"><call pos:start="593:17" pos:end="593:58"><name pos:start="593:17" pos:end="593:24">av_freep</name><argument_list pos:start="593:25" pos:end="593:58">(<argument pos:start="593:26" pos:end="593:57"><expr pos:start="593:26" pos:end="593:57"><operator pos:start="593:26" pos:end="593:26">&amp;</operator><name pos:start="593:27" pos:end="593:57"><name pos:start="593:27" pos:end="593:29">ost</name><operator pos:start="593:30" pos:end="593:31">-&gt;</operator><name pos:start="593:32" pos:end="593:33">st</name><operator pos:start="593:34" pos:end="593:35">-&gt;</operator><name pos:start="593:36" pos:end="593:40">codec</name><operator pos:start="593:41" pos:end="593:42">-&gt;</operator><name pos:start="593:43" pos:end="593:57">subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="595:17" pos:end="595:53"><expr pos:start="595:17" pos:end="595:52"><call pos:start="595:17" pos:end="595:52"><name pos:start="595:17" pos:end="595:23">av_free</name><argument_list pos:start="595:24" pos:end="595:52">(<argument pos:start="595:25" pos:end="595:51"><expr pos:start="595:25" pos:end="595:51"><name pos:start="595:25" pos:end="595:51"><name pos:start="595:25" pos:end="595:27">ost</name><operator pos:start="595:28" pos:end="595:29">-&gt;</operator><name pos:start="595:30" pos:end="595:43">resample_frame</name><operator pos:start="595:44" pos:end="595:44">.</operator><name pos:start="595:45" pos:end="595:48">data</name><index pos:start="595:49" pos:end="595:51">[<expr pos:start="595:50" pos:end="595:50"><literal type="number" pos:start="595:50" pos:end="595:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="597:17" pos:end="597:44"><expr pos:start="597:17" pos:end="597:43"><call pos:start="597:17" pos:end="597:43"><name pos:start="597:17" pos:end="597:23">av_free</name><argument_list pos:start="597:24" pos:end="597:43">(<argument pos:start="597:25" pos:end="597:42"><expr pos:start="597:25" pos:end="597:42"><name pos:start="597:25" pos:end="597:42"><name pos:start="597:25" pos:end="597:27">ost</name><operator pos:start="597:28" pos:end="597:29">-&gt;</operator><name pos:start="597:30" pos:end="597:42">forced_kf_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="599:17" pos:end="601:59"><if pos:start="599:17" pos:end="601:59">if <condition pos:start="599:20" pos:end="599:40">(<expr pos:start="599:21" pos:end="599:39"><name pos:start="599:21" pos:end="599:39"><name pos:start="599:21" pos:end="599:23">ost</name><operator pos:start="599:24" pos:end="599:25">-&gt;</operator><name pos:start="599:26" pos:end="599:39">video_resample</name></name></expr>)</condition><block type="pseudo" pos:start="601:21" pos:end="601:59"><block_content pos:start="601:21" pos:end="601:59">

                    <expr_stmt pos:start="601:21" pos:end="601:59"><expr pos:start="601:21" pos:end="601:58"><call pos:start="601:21" pos:end="601:58"><name pos:start="601:21" pos:end="601:35">sws_freeContext</name><argument_list pos:start="601:36" pos:end="601:58">(<argument pos:start="601:37" pos:end="601:57"><expr pos:start="601:37" pos:end="601:57"><name pos:start="601:37" pos:end="601:57"><name pos:start="601:37" pos:end="601:39">ost</name><operator pos:start="601:40" pos:end="601:41">-&gt;</operator><name pos:start="601:42" pos:end="601:57">img_resample_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="603:17" pos:end="605:56"><if pos:start="603:17" pos:end="605:56">if <condition pos:start="603:20" pos:end="603:34">(<expr pos:start="603:21" pos:end="603:33"><name pos:start="603:21" pos:end="603:33"><name pos:start="603:21" pos:end="603:23">ost</name><operator pos:start="603:24" pos:end="603:25">-&gt;</operator><name pos:start="603:26" pos:end="603:33">resample</name></name></expr>)</condition><block type="pseudo" pos:start="605:21" pos:end="605:56"><block_content pos:start="605:21" pos:end="605:56">

                    <expr_stmt pos:start="605:21" pos:end="605:56"><expr pos:start="605:21" pos:end="605:55"><call pos:start="605:21" pos:end="605:55"><name pos:start="605:21" pos:end="605:40">audio_resample_close</name><argument_list pos:start="605:41" pos:end="605:55">(<argument pos:start="605:42" pos:end="605:54"><expr pos:start="605:42" pos:end="605:54"><name pos:start="605:42" pos:end="605:54"><name pos:start="605:42" pos:end="605:44">ost</name><operator pos:start="605:45" pos:end="605:46">-&gt;</operator><name pos:start="605:47" pos:end="605:54">resample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="607:17" pos:end="609:61"><if pos:start="607:17" pos:end="609:61">if <condition pos:start="607:20" pos:end="607:38">(<expr pos:start="607:21" pos:end="607:37"><name pos:start="607:21" pos:end="607:37"><name pos:start="607:21" pos:end="607:23">ost</name><operator pos:start="607:24" pos:end="607:25">-&gt;</operator><name pos:start="607:26" pos:end="607:37">reformat_ctx</name></name></expr>)</condition><block type="pseudo" pos:start="609:21" pos:end="609:61"><block_content pos:start="609:21" pos:end="609:61">

                    <expr_stmt pos:start="609:21" pos:end="609:61"><expr pos:start="609:21" pos:end="609:60"><call pos:start="609:21" pos:end="609:60"><name pos:start="609:21" pos:end="609:41">av_audio_convert_free</name><argument_list pos:start="609:42" pos:end="609:60">(<argument pos:start="609:43" pos:end="609:59"><expr pos:start="609:43" pos:end="609:59"><name pos:start="609:43" pos:end="609:59"><name pos:start="609:43" pos:end="609:45">ost</name><operator pos:start="609:46" pos:end="609:47">-&gt;</operator><name pos:start="609:48" pos:end="609:59">reformat_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="611:17" pos:end="611:41"><expr pos:start="611:17" pos:end="611:40"><call pos:start="611:17" pos:end="611:40"><name pos:start="611:17" pos:end="611:28">av_dict_free</name><argument_list pos:start="611:29" pos:end="611:40">(<argument pos:start="611:30" pos:end="611:39"><expr pos:start="611:30" pos:end="611:39"><operator pos:start="611:30" pos:end="611:30">&amp;</operator><name pos:start="611:31" pos:end="611:39"><name pos:start="611:31" pos:end="611:33">ost</name><operator pos:start="611:34" pos:end="611:35">-&gt;</operator><name pos:start="611:36" pos:end="611:39">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <return pos:start="619:5" pos:end="619:15">return <expr pos:start="619:12" pos:end="619:14"><name pos:start="619:12" pos:end="619:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
