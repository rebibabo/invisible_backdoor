<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25956.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">blockdev_backup_prepare</name><parameter_list pos:start="1:36" pos:end="1:73">(<parameter pos:start="1:37" pos:end="1:58"><decl pos:start="1:37" pos:end="1:58"><type pos:start="1:37" pos:end="1:58"><name pos:start="1:37" pos:end="1:50">BlkActionState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:58">common</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:32">

    <decl_stmt pos:start="5:5" pos:end="5:80"><decl pos:start="5:5" pos:end="5:79"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:23">BlockdevBackupState</name> <modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:30">state</name> <init pos:start="5:32" pos:end="5:79">= <expr pos:start="5:34" pos:end="5:79"><call pos:start="5:34" pos:end="5:79"><name pos:start="5:34" pos:end="5:42">DO_UPCAST</name><argument_list pos:start="5:43" pos:end="5:79">(<argument pos:start="5:44" pos:end="5:62"><expr pos:start="5:44" pos:end="5:62"><name pos:start="5:44" pos:end="5:62">BlockdevBackupState</name></expr></argument>, <argument pos:start="5:65" pos:end="5:70"><expr pos:start="5:65" pos:end="5:70"><name pos:start="5:65" pos:end="5:70">common</name></expr></argument>, <argument pos:start="5:73" pos:end="5:78"><expr pos:start="5:73" pos:end="5:78"><name pos:start="5:73" pos:end="5:78">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BlockdevBackup</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:26">backup</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name></decl>, <decl pos:start="9:27" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:22"><modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:33">target</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:76"><expr pos:start="15:5" pos:end="15:75"><call pos:start="15:5" pos:end="15:75"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:75">(<argument pos:start="15:12" pos:end="15:74"><expr pos:start="15:12" pos:end="15:74"><name pos:start="15:12" pos:end="15:31"><name pos:start="15:12" pos:end="15:17">common</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:25">action</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:31">type</name></name> <operator pos:start="15:33" pos:end="15:34">==</operator> <name pos:start="15:36" pos:end="15:74">TRANSACTION_ACTION_KIND_BLOCKDEV_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:52"><expr pos:start="17:5" pos:end="17:51"><name pos:start="17:5" pos:end="17:10">backup</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:51"><name pos:start="17:14" pos:end="17:19">common</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:27">action</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:30">u</name><operator pos:start="17:31" pos:end="17:31">.</operator><name pos:start="17:32" pos:end="17:46">blockdev_backup</name><operator pos:start="17:47" pos:end="17:47">.</operator><name pos:start="17:48" pos:end="17:51">data</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:6">bs</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <call pos:start="21:10" pos:end="21:46"><name pos:start="21:10" pos:end="21:24">qmp_get_root_bs</name><argument_list pos:start="21:25" pos:end="21:46">(<argument pos:start="21:26" pos:end="21:39"><expr pos:start="21:26" pos:end="21:39"><name pos:start="21:26" pos:end="21:39"><name pos:start="21:26" pos:end="21:31">backup</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:39">device</name></name></expr></argument>, <argument pos:start="21:42" pos:end="21:45"><expr pos:start="21:42" pos:end="21:45"><name pos:start="21:42" pos:end="21:45">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:12">(<expr pos:start="23:9" pos:end="23:11"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:11">bs</name></expr>)</condition> <block pos:start="23:14" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:15">

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:66"><expr pos:start="31:5" pos:end="31:65"><name pos:start="31:5" pos:end="31:10">target</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:65"><name pos:start="31:14" pos:end="31:27">bdrv_lookup_bs</name><argument_list pos:start="31:28" pos:end="31:65">(<argument pos:start="31:29" pos:end="31:42"><expr pos:start="31:29" pos:end="31:42"><name pos:start="31:29" pos:end="31:42"><name pos:start="31:29" pos:end="31:34">backup</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:42">target</name></name></expr></argument>, <argument pos:start="31:45" pos:end="31:58"><expr pos:start="31:45" pos:end="31:58"><name pos:start="31:45" pos:end="31:58"><name pos:start="31:45" pos:end="31:50">backup</name><operator pos:start="31:51" pos:end="31:52">-&gt;</operator><name pos:start="31:53" pos:end="31:58">target</name></name></expr></argument>, <argument pos:start="31:61" pos:end="31:64"><expr pos:start="31:61" pos:end="31:64"><name pos:start="31:61" pos:end="31:64">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:15">target</name></expr>)</condition> <block pos:start="33:18" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:15">

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:44">/* AioContext is released in .clean() */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:9">state</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:22">aio_context</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <call pos:start="43:26" pos:end="43:49"><name pos:start="43:26" pos:end="43:45">bdrv_get_aio_context</name><argument_list pos:start="43:46" pos:end="43:49">(<argument pos:start="43:47" pos:end="43:48"><expr pos:start="43:47" pos:end="43:48"><name pos:start="43:47" pos:end="43:48">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:59">(<expr pos:start="45:9" pos:end="45:58"><name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:13">state</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:26">aio_context</name></name> <operator pos:start="45:28" pos:end="45:29">!=</operator> <call pos:start="45:31" pos:end="45:58"><name pos:start="45:31" pos:end="45:50">bdrv_get_aio_context</name><argument_list pos:start="45:51" pos:end="45:58">(<argument pos:start="45:52" pos:end="45:57"><expr pos:start="45:52" pos:end="45:57"><name pos:start="45:52" pos:end="45:57">target</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:61" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:15">

        <expr_stmt pos:start="47:9" pos:end="47:34"><expr pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:13">state</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:26">aio_context</name></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <name pos:start="47:30" pos:end="47:33">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:77"><expr pos:start="49:9" pos:end="49:76"><call pos:start="49:9" pos:end="49:76"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="49:76">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">errp</name></expr></argument>, <argument pos:start="49:26" pos:end="49:75"><expr pos:start="49:26" pos:end="49:75"><literal type="string" pos:start="49:26" pos:end="49:75">"Backup between two IO threads is not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><call pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:23">aio_context_acquire</name><argument_list pos:start="55:24" pos:end="55:43">(<argument pos:start="55:25" pos:end="55:42"><expr pos:start="55:25" pos:end="55:42"><name pos:start="55:25" pos:end="55:42"><name pos:start="55:25" pos:end="55:29">state</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:42">aio_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:19"><expr pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:9">state</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:13">bs</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <name pos:start="57:17" pos:end="57:18">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:34"><expr pos:start="59:5" pos:end="59:33"><call pos:start="59:5" pos:end="59:33"><name pos:start="59:5" pos:end="59:22">bdrv_drained_begin</name><argument_list pos:start="59:23" pos:end="59:33">(<argument pos:start="59:24" pos:end="59:32"><expr pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:28">state</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:32">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:66"><expr pos:start="63:5" pos:end="63:65"><call pos:start="63:5" pos:end="63:65"><name pos:start="63:5" pos:end="63:22">do_blockdev_backup</name><argument_list pos:start="63:23" pos:end="63:65">(<argument pos:start="63:24" pos:end="63:29"><expr pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:29">backup</name></expr></argument>, <argument pos:start="63:32" pos:end="63:52"><expr pos:start="63:32" pos:end="63:52"><name pos:start="63:32" pos:end="63:52"><name pos:start="63:32" pos:end="63:37">common</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:52">block_job_txn</name></name></expr></argument>, <argument pos:start="63:55" pos:end="63:64"><expr pos:start="63:55" pos:end="63:64"><operator pos:start="63:55" pos:end="63:55">&amp;</operator><name pos:start="63:56" pos:end="63:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:18">(<expr pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:17">local_err</name></expr>)</condition> <block pos:start="65:20" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:15">

        <expr_stmt pos:start="67:9" pos:end="67:41"><expr pos:start="67:9" pos:end="67:40"><call pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:23">error_propagate</name><argument_list pos:start="67:24" pos:end="67:40">(<argument pos:start="67:25" pos:end="67:28"><expr pos:start="67:25" pos:end="67:28"><name pos:start="67:25" pos:end="67:28">errp</name></expr></argument>, <argument pos:start="67:31" pos:end="67:39"><expr pos:start="67:31" pos:end="67:39"><name pos:start="67:31" pos:end="67:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:32"><expr pos:start="75:5" pos:end="75:31"><name pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:9">state</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:14">job</name></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <name pos:start="75:18" pos:end="75:31"><name pos:start="75:18" pos:end="75:22">state</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:26">bs</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:31">job</name></name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
