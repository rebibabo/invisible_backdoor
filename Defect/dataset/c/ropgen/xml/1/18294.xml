<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18294.c" pos:tabs="8"><function pos:start="1:1" pos:end="24:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">qcow2_alloc_clusters_at</name><parameter_list pos:start="1:28" pos:end="2:20">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:58">uint64_t</name></type> <name pos:start="1:60" pos:end="1:65">offset</name></decl></parameter>,
    <parameter pos:start="2:5" pos:end="2:19"><decl pos:start="2:5" pos:end="2:19"><type pos:start="2:5" pos:end="2:19"><name pos:start="2:5" pos:end="2:7">int</name></type> <name pos:start="2:9" pos:end="2:19">nb_clusters</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="24:1">{<block_content pos:start="4:5" pos:end="23:13">
    <decl_stmt pos:start="4:5" pos:end="4:34"><decl pos:start="4:5" pos:end="4:33"><type pos:start="4:5" pos:end="4:19"><name pos:start="4:5" pos:end="4:17">BDRVQcowState</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:20">s</name> <init pos:start="4:22" pos:end="4:33">= <expr pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:25">bs</name><operator pos:start="4:26" pos:end="4:27">-&gt;</operator><name pos:start="4:28" pos:end="4:33">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:26">cluster_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:36"><decl pos:start="6:5" pos:end="6:35"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:12">uint64_t</name></type> <name pos:start="6:14" pos:end="6:35">old_free_cluster_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:19">refcount</name></decl>, <decl pos:start="7:22" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:24">ret</name></decl>;</decl_stmt>
    <comment type="block" pos:start="8:5" pos:end="8:48">/* Check how many clusters there are free */</comment>
    <expr_stmt pos:start="9:5" pos:end="9:46"><expr pos:start="9:5" pos:end="9:45"><name pos:start="9:5" pos:end="9:17">cluster_index</name> <operator pos:start="9:19" pos:end="9:19">=</operator> <name pos:start="9:21" pos:end="9:26">offset</name> <operator pos:start="9:28" pos:end="9:29">&gt;&gt;</operator> <name pos:start="9:31" pos:end="9:45"><name pos:start="9:31" pos:end="9:31">s</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:45">cluster_bits</name></name></expr>;</expr_stmt>
    <for pos:start="10:5" pos:end="17:5">for<control pos:start="10:8" pos:end="10:36">(<init pos:start="10:9" pos:end="10:14"><expr pos:start="10:9" pos:end="10:13"><name pos:start="10:9" pos:end="10:9">i</name> <operator pos:start="10:11" pos:end="10:11">=</operator> <literal type="number" pos:start="10:13" pos:end="10:13">0</literal></expr>;</init> <condition pos:start="10:16" pos:end="10:31"><expr pos:start="10:16" pos:end="10:30"><name pos:start="10:16" pos:end="10:16">i</name> <operator pos:start="10:18" pos:end="10:18">&lt;</operator> <name pos:start="10:20" pos:end="10:30">nb_clusters</name></expr>;</condition> <incr pos:start="10:33" pos:end="10:35"><expr pos:start="10:33" pos:end="10:35"><name pos:start="10:33" pos:end="10:33">i</name><operator pos:start="10:34" pos:end="10:35">++</operator></expr></incr>)</control> <block pos:start="10:38" pos:end="17:5">{<block_content pos:start="11:9" pos:end="16:9">
        <expr_stmt pos:start="11:9" pos:end="11:53"><expr pos:start="11:9" pos:end="11:52"><name pos:start="11:9" pos:end="11:16">refcount</name> <operator pos:start="11:18" pos:end="11:18">=</operator> <call pos:start="11:20" pos:end="11:52"><name pos:start="11:20" pos:end="11:31">get_refcount</name><argument_list pos:start="11:32" pos:end="11:52">(<argument pos:start="11:33" pos:end="11:34"><expr pos:start="11:33" pos:end="11:34"><name pos:start="11:33" pos:end="11:34">bs</name></expr></argument>, <argument pos:start="11:37" pos:end="11:51"><expr pos:start="11:37" pos:end="11:51"><name pos:start="11:37" pos:end="11:49">cluster_index</name><operator pos:start="11:50" pos:end="11:51">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="12:9" pos:end="16:9"><if pos:start="12:9" pos:end="14:9">if <condition pos:start="12:12" pos:end="12:25">(<expr pos:start="12:13" pos:end="12:24"><name pos:start="12:13" pos:end="12:20">refcount</name> <operator pos:start="12:22" pos:end="12:22">&lt;</operator> <literal type="number" pos:start="12:24" pos:end="12:24">0</literal></expr>)</condition> <block pos:start="12:27" pos:end="14:9">{<block_content pos:start="13:13" pos:end="13:28">
            <return pos:start="13:13" pos:end="13:28">return <expr pos:start="13:20" pos:end="13:27"><name pos:start="13:20" pos:end="13:27">refcount</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif" pos:start="14:11" pos:end="16:9">else if <condition pos:start="14:19" pos:end="14:33">(<expr pos:start="14:20" pos:end="14:32"><name pos:start="14:20" pos:end="14:27">refcount</name> <operator pos:start="14:29" pos:end="14:30">!=</operator> <literal type="number" pos:start="14:32" pos:end="14:32">0</literal></expr>)</condition> <block pos:start="14:35" pos:end="16:9">{<block_content pos:start="15:13" pos:end="15:18">
            <break pos:start="15:13" pos:end="15:18">break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="18:5" pos:end="18:32">/* And then allocate them */</comment>
    <expr_stmt pos:start="19:5" pos:end="19:63"><expr pos:start="19:5" pos:end="19:62"><name pos:start="19:5" pos:end="19:7">ret</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:62"><name pos:start="19:11" pos:end="19:25">update_refcount</name><argument_list pos:start="19:26" pos:end="19:62">(<argument pos:start="19:27" pos:end="19:28"><expr pos:start="19:27" pos:end="19:28"><name pos:start="19:27" pos:end="19:28">bs</name></expr></argument>, <argument pos:start="19:31" pos:end="19:36"><expr pos:start="19:31" pos:end="19:36"><name pos:start="19:31" pos:end="19:36">offset</name></expr></argument>, <argument pos:start="19:39" pos:end="19:58"><expr pos:start="19:39" pos:end="19:58"><name pos:start="19:39" pos:end="19:39">i</name> <operator pos:start="19:41" pos:end="19:42">&lt;&lt;</operator> <name pos:start="19:44" pos:end="19:58"><name pos:start="19:44" pos:end="19:44">s</name><operator pos:start="19:45" pos:end="19:46">-&gt;</operator><name pos:start="19:47" pos:end="19:58">cluster_bits</name></name></expr></argument>, <argument pos:start="19:61" pos:end="19:61"><expr pos:start="19:61" pos:end="19:61"><literal type="number" pos:start="19:61" pos:end="19:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="20:5" pos:end="22:5"><if pos:start="20:5" pos:end="22:5">if <condition pos:start="20:8" pos:end="20:16">(<expr pos:start="20:9" pos:end="20:15"><name pos:start="20:9" pos:end="20:11">ret</name> <operator pos:start="20:13" pos:end="20:13">&lt;</operator> <literal type="number" pos:start="20:15" pos:end="20:15">0</literal></expr>)</condition> <block pos:start="20:18" pos:end="22:5">{<block_content pos:start="21:9" pos:end="21:19">
        <return pos:start="21:9" pos:end="21:19">return <expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="23:5" pos:end="23:13">return <expr pos:start="23:12" pos:end="23:12"><name pos:start="23:12" pos:end="23:12">i</name></expr>;</return>
</block_content>}</block></function></unit>
