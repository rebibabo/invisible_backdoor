<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9233.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">encode_superframe</name><parameter_list pos:start="1:29" pos:end="3:73">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:36">unsigned</name> <name pos:start="3:38" pos:end="3:41">char</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:46">buf</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:60">buf_size</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:72"><decl pos:start="3:63" pos:end="3:72"><type pos:start="3:63" pos:end="3:72"><name pos:start="3:63" pos:end="3:66">void</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:72">data</name></decl></parameter>)</parameter_list><block pos:start="3:74" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:26">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">WMACodecContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:30">avctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:17"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:15">short</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:24">samples</name> <init pos:start="7:26" pos:end="7:31">= <expr pos:start="7:28" pos:end="7:31"><name pos:start="7:28" pos:end="7:31">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:21">total_gain</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:41"><expr pos:start="13:5" pos:end="13:40"><name pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:21">block_len_bits</name></name><operator pos:start="13:22" pos:end="13:22">=</operator> <name pos:start="13:24" pos:end="13:40"><name pos:start="13:24" pos:end="13:24">s</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:40">frame_len_bits</name></name></expr>;</expr_stmt> <comment type="line" pos:start="13:43" pos:end="13:78">//required by non variable block len</comment>

    <expr_stmt pos:start="15:5" pos:end="15:42"><expr pos:start="15:5" pos:end="15:41"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:16">block_len</name></name> <operator pos:start="15:18" pos:end="15:18">=</operator> <literal type="number" pos:start="15:20" pos:end="15:20">1</literal> <operator pos:start="15:22" pos:end="15:23">&lt;&lt;</operator> <name pos:start="15:25" pos:end="15:41"><name pos:start="15:25" pos:end="15:25">s</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:41">block_len_bits</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:61"><expr pos:start="19:5" pos:end="19:60"><call pos:start="19:5" pos:end="19:60"><name pos:start="19:5" pos:end="19:25">apply_window_and_mdct</name><argument_list pos:start="19:26" pos:end="19:60">(<argument pos:start="19:27" pos:end="19:31"><expr pos:start="19:27" pos:end="19:31"><name pos:start="19:27" pos:end="19:31">avctx</name></expr></argument>, <argument pos:start="19:34" pos:end="19:40"><expr pos:start="19:34" pos:end="19:40"><name pos:start="19:34" pos:end="19:40">samples</name></expr></argument>, <argument pos:start="19:43" pos:end="19:59"><expr pos:start="19:43" pos:end="19:59"><name pos:start="19:43" pos:end="19:59"><name pos:start="19:43" pos:end="19:47">avctx</name><operator pos:start="19:48" pos:end="19:49">-&gt;</operator><name pos:start="19:50" pos:end="19:59">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="43:5"><if pos:start="23:5" pos:end="43:5">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:20">ms_stereo</name></name></expr>)</condition> <block pos:start="23:23" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:9">

        <decl_stmt pos:start="25:9" pos:end="25:19"><decl pos:start="25:9" pos:end="25:15"><type pos:start="25:9" pos:end="25:13"><name pos:start="25:9" pos:end="25:13">float</name></type> <name pos:start="25:15" pos:end="25:15">a</name></decl>, <decl pos:start="25:18" pos:end="25:18"><type ref="prev" pos:start="25:9" pos:end="25:13"/><name pos:start="25:18" pos:end="25:18">b</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:14"><decl pos:start="27:9" pos:end="27:13"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:13">i</name></decl>;</decl_stmt>



        <for pos:start="31:9" pos:end="41:9">for<control pos:start="31:12" pos:end="31:41">(<init pos:start="31:13" pos:end="31:18"><expr pos:start="31:13" pos:end="31:17"><name pos:start="31:13" pos:end="31:13">i</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr>;</init> <condition pos:start="31:20" pos:end="31:36"><expr pos:start="31:20" pos:end="31:35"><name pos:start="31:20" pos:end="31:20">i</name> <operator pos:start="31:22" pos:end="31:22">&lt;</operator> <name pos:start="31:24" pos:end="31:35"><name pos:start="31:24" pos:end="31:24">s</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:35">block_len</name></name></expr>;</condition> <incr pos:start="31:38" pos:end="31:40"><expr pos:start="31:38" pos:end="31:40"><name pos:start="31:38" pos:end="31:38">i</name><operator pos:start="31:39" pos:end="31:40">++</operator></expr></incr>)</control> <block pos:start="31:43" pos:end="41:9">{<block_content pos:start="33:13" pos:end="39:35">

            <expr_stmt pos:start="33:13" pos:end="33:35"><expr pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:13">a</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:30"><name pos:start="33:17" pos:end="33:17">s</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:24">coefs</name><index pos:start="33:25" pos:end="33:27">[<expr pos:start="33:26" pos:end="33:26"><literal type="number" pos:start="33:26" pos:end="33:26">0</literal></expr>]</index><index pos:start="33:28" pos:end="33:30">[<expr pos:start="33:29" pos:end="33:29"><name pos:start="33:29" pos:end="33:29">i</name></expr>]</index></name><operator pos:start="33:31" pos:end="33:31">*</operator><literal type="number" pos:start="33:32" pos:end="33:34">0.5</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:35"><expr pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:13">b</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:30"><name pos:start="35:17" pos:end="35:17">s</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:24">coefs</name><index pos:start="35:25" pos:end="35:27">[<expr pos:start="35:26" pos:end="35:26"><literal type="number" pos:start="35:26" pos:end="35:26">1</literal></expr>]</index><index pos:start="35:28" pos:end="35:30">[<expr pos:start="35:29" pos:end="35:29"><name pos:start="35:29" pos:end="35:29">i</name></expr>]</index></name><operator pos:start="35:31" pos:end="35:31">*</operator><literal type="number" pos:start="35:32" pos:end="35:34">0.5</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:35"><expr pos:start="37:13" pos:end="37:34"><name pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">coefs</name><index pos:start="37:21" pos:end="37:23">[<expr pos:start="37:22" pos:end="37:22"><literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>]</index><index pos:start="37:24" pos:end="37:26">[<expr pos:start="37:25" pos:end="37:25"><name pos:start="37:25" pos:end="37:25">i</name></expr>]</index></name> <operator pos:start="37:28" pos:end="37:28">=</operator> <name pos:start="37:30" pos:end="37:30">a</name> <operator pos:start="37:32" pos:end="37:32">+</operator> <name pos:start="37:34" pos:end="37:34">b</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:35"><expr pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:20">coefs</name><index pos:start="39:21" pos:end="39:23">[<expr pos:start="39:22" pos:end="39:22"><literal type="number" pos:start="39:22" pos:end="39:22">1</literal></expr>]</index><index pos:start="39:24" pos:end="39:26">[<expr pos:start="39:25" pos:end="39:25"><name pos:start="39:25" pos:end="39:25">i</name></expr>]</index></name> <operator pos:start="39:28" pos:end="39:28">=</operator> <name pos:start="39:30" pos:end="39:30">a</name> <operator pos:start="39:32" pos:end="39:32">-</operator> <name pos:start="39:34" pos:end="39:34">b</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="58:0"><if pos:start="47:5" pos:end="58:0">if <condition pos:start="47:8" pos:end="47:49">(<expr pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:16">buf_size</name> <operator pos:start="47:18" pos:end="47:18">&lt;</operator> <literal type="number" pos:start="47:20" pos:end="47:20">2</literal> <operator pos:start="47:22" pos:end="47:22">*</operator> <name pos:start="47:24" pos:end="47:48">MAX_CODED_SUPERFRAME_SIZE</name></expr>)</condition> <block pos:start="47:51" pos:end="58:0">{<block_content pos:start="49:9" pos:end="51:31">

        <expr_stmt pos:start="49:9" pos:end="49:73"><expr pos:start="49:9" pos:end="49:72"><call pos:start="49:9" pos:end="49:72"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:72">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:71"><expr pos:start="49:37" pos:end="49:71"><literal type="string" pos:start="49:37" pos:end="49:71">"output buffer size is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:31">return <expr pos:start="51:16" pos:end="51:30"><call pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:22">AVERROR</name><argument_list pos:start="51:23" pos:end="51:30">(<argument pos:start="51:24" pos:end="51:29"><expr pos:start="51:24" pos:end="51:29"><name pos:start="51:24" pos:end="51:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:5"><literal type="number" pos:start="57:5" pos:end="57:5">1</literal></expr></cpp:if>

    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:14">total_gain</name><operator pos:start="59:15" pos:end="59:15">=</operator> <literal type="number" pos:start="59:17" pos:end="59:19">128</literal></expr>;</expr_stmt>

    <for pos:start="61:5" pos:end="72:0">for<control pos:start="61:8" pos:end="61:23">(<init pos:start="61:9" pos:end="61:13"><expr pos:start="61:9" pos:end="61:12"><name pos:start="61:9" pos:end="61:9">i</name><operator pos:start="61:10" pos:end="61:10">=</operator><literal type="number" pos:start="61:11" pos:end="61:12">64</literal></expr>;</init> <condition pos:start="61:15" pos:end="61:16"><expr pos:start="61:15" pos:end="61:15"><name pos:start="61:15" pos:end="61:15">i</name></expr>;</condition> <incr pos:start="61:18" pos:end="61:22"><expr pos:start="61:18" pos:end="61:22"><name pos:start="61:18" pos:end="61:18">i</name><operator pos:start="61:19" pos:end="61:21">&gt;&gt;=</operator><literal type="number" pos:start="61:22" pos:end="61:22">1</literal></expr></incr>)</control><block pos:start="61:24" pos:end="72:0">{<block_content pos:start="63:9" pos:end="67:27">

        <decl_stmt pos:start="63:9" pos:end="63:74"><decl pos:start="63:9" pos:end="63:73"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:17">error</name><init pos:start="63:18" pos:end="63:73">= <expr pos:start="63:20" pos:end="63:73"><call pos:start="63:20" pos:end="63:73"><name pos:start="63:20" pos:end="63:31">encode_frame</name><argument_list pos:start="63:32" pos:end="63:73">(<argument pos:start="63:33" pos:end="63:33"><expr pos:start="63:33" pos:end="63:33"><name pos:start="63:33" pos:end="63:33">s</name></expr></argument>, <argument pos:start="63:36" pos:end="63:43"><expr pos:start="63:36" pos:end="63:43"><name pos:start="63:36" pos:end="63:43"><name pos:start="63:36" pos:end="63:36">s</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:43">coefs</name></name></expr></argument>, <argument pos:start="63:46" pos:end="63:48"><expr pos:start="63:46" pos:end="63:48"><name pos:start="63:46" pos:end="63:48">buf</name></expr></argument>, <argument pos:start="63:51" pos:end="63:58"><expr pos:start="63:51" pos:end="63:58"><name pos:start="63:51" pos:end="63:58">buf_size</name></expr></argument>, <argument pos:start="63:61" pos:end="63:72"><expr pos:start="63:61" pos:end="63:72"><name pos:start="63:61" pos:end="63:70">total_gain</name><operator pos:start="63:71" pos:end="63:71">-</operator><name pos:start="63:72" pos:end="63:72">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="65:9" pos:end="67:27"><if pos:start="65:9" pos:end="67:27">if<condition pos:start="65:11" pos:end="65:19">(<expr pos:start="65:12" pos:end="65:18"><name pos:start="65:12" pos:end="65:16">error</name><operator pos:start="65:17" pos:end="65:17">&lt;</operator><literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:27"><block_content pos:start="67:13" pos:end="67:27">

            <expr_stmt pos:start="67:13" pos:end="67:27"><expr pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:22">total_gain</name><operator pos:start="67:23" pos:end="67:24">-=</operator> <name pos:start="67:26" pos:end="67:26">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

<cpp:else pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="73:5" pos:end="73:19"><expr pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:14">total_gain</name><operator pos:start="73:15" pos:end="73:15">=</operator> <literal type="number" pos:start="73:17" pos:end="73:18">90</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:63"><expr pos:start="75:5" pos:end="75:62"><name pos:start="75:5" pos:end="75:8">best</name><operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:62"><name pos:start="75:11" pos:end="75:22">encode_frame</name><argument_list pos:start="75:23" pos:end="75:62">(<argument pos:start="75:24" pos:end="75:24"><expr pos:start="75:24" pos:end="75:24"><name pos:start="75:24" pos:end="75:24">s</name></expr></argument>, <argument pos:start="75:27" pos:end="75:34"><expr pos:start="75:27" pos:end="75:34"><name pos:start="75:27" pos:end="75:34"><name pos:start="75:27" pos:end="75:27">s</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:34">coefs</name></name></expr></argument>, <argument pos:start="75:37" pos:end="75:39"><expr pos:start="75:37" pos:end="75:39"><name pos:start="75:37" pos:end="75:39">buf</name></expr></argument>, <argument pos:start="75:42" pos:end="75:49"><expr pos:start="75:42" pos:end="75:49"><name pos:start="75:42" pos:end="75:49">buf_size</name></expr></argument>, <argument pos:start="75:52" pos:end="75:61"><expr pos:start="75:52" pos:end="75:61"><name pos:start="75:52" pos:end="75:61">total_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="77:5" pos:end="102:0">for<control pos:start="77:8" pos:end="77:23">(<init pos:start="77:9" pos:end="77:13"><expr pos:start="77:9" pos:end="77:12"><name pos:start="77:9" pos:end="77:9">i</name><operator pos:start="77:10" pos:end="77:10">=</operator><literal type="number" pos:start="77:11" pos:end="77:12">32</literal></expr>;</init> <condition pos:start="77:15" pos:end="77:16"><expr pos:start="77:15" pos:end="77:15"><name pos:start="77:15" pos:end="77:15">i</name></expr>;</condition> <incr pos:start="77:18" pos:end="77:22"><expr pos:start="77:18" pos:end="77:22"><name pos:start="77:18" pos:end="77:18">i</name><operator pos:start="77:19" pos:end="77:21">&gt;&gt;=</operator><literal type="number" pos:start="77:22" pos:end="77:22">1</literal></expr></incr>)</control><block pos:start="77:24" pos:end="102:0">{<block_content pos:start="79:9" pos:end="97:9">

        <decl_stmt pos:start="79:9" pos:end="79:75"><decl pos:start="79:9" pos:end="79:74"><type pos:start="79:9" pos:end="79:11"><name pos:start="79:9" pos:end="79:11">int</name></type> <name pos:start="79:13" pos:end="79:18">scoreL</name><init pos:start="79:19" pos:end="79:74">= <expr pos:start="79:21" pos:end="79:74"><call pos:start="79:21" pos:end="79:74"><name pos:start="79:21" pos:end="79:32">encode_frame</name><argument_list pos:start="79:33" pos:end="79:74">(<argument pos:start="79:34" pos:end="79:34"><expr pos:start="79:34" pos:end="79:34"><name pos:start="79:34" pos:end="79:34">s</name></expr></argument>, <argument pos:start="79:37" pos:end="79:44"><expr pos:start="79:37" pos:end="79:44"><name pos:start="79:37" pos:end="79:44"><name pos:start="79:37" pos:end="79:37">s</name><operator pos:start="79:38" pos:end="79:39">-&gt;</operator><name pos:start="79:40" pos:end="79:44">coefs</name></name></expr></argument>, <argument pos:start="79:47" pos:end="79:49"><expr pos:start="79:47" pos:end="79:49"><name pos:start="79:47" pos:end="79:49">buf</name></expr></argument>, <argument pos:start="79:52" pos:end="79:59"><expr pos:start="79:52" pos:end="79:59"><name pos:start="79:52" pos:end="79:59">buf_size</name></expr></argument>, <argument pos:start="79:62" pos:end="79:73"><expr pos:start="79:62" pos:end="79:73"><name pos:start="79:62" pos:end="79:71">total_gain</name><operator pos:start="79:72" pos:end="79:72">-</operator><name pos:start="79:73" pos:end="79:73">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:75"><decl pos:start="81:9" pos:end="81:74"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:18">scoreR</name><init pos:start="81:19" pos:end="81:74">= <expr pos:start="81:21" pos:end="81:74"><call pos:start="81:21" pos:end="81:74"><name pos:start="81:21" pos:end="81:32">encode_frame</name><argument_list pos:start="81:33" pos:end="81:74">(<argument pos:start="81:34" pos:end="81:34"><expr pos:start="81:34" pos:end="81:34"><name pos:start="81:34" pos:end="81:34">s</name></expr></argument>, <argument pos:start="81:37" pos:end="81:44"><expr pos:start="81:37" pos:end="81:44"><name pos:start="81:37" pos:end="81:44"><name pos:start="81:37" pos:end="81:37">s</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:44">coefs</name></name></expr></argument>, <argument pos:start="81:47" pos:end="81:49"><expr pos:start="81:47" pos:end="81:49"><name pos:start="81:47" pos:end="81:49">buf</name></expr></argument>, <argument pos:start="81:52" pos:end="81:59"><expr pos:start="81:52" pos:end="81:59"><name pos:start="81:52" pos:end="81:59">buf_size</name></expr></argument>, <argument pos:start="81:62" pos:end="81:73"><expr pos:start="81:62" pos:end="81:73"><name pos:start="81:62" pos:end="81:71">total_gain</name><operator pos:start="81:72" pos:end="81:72">+</operator><name pos:start="81:73" pos:end="81:73">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:88"><expr pos:start="83:9" pos:end="83:87"><call pos:start="83:9" pos:end="83:87"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:87">(<argument pos:start="83:16" pos:end="83:19"><expr pos:start="83:16" pos:end="83:19"><name pos:start="83:16" pos:end="83:19">NULL</name></expr></argument>, <argument pos:start="83:22" pos:end="83:33"><expr pos:start="83:22" pos:end="83:33"><name pos:start="83:22" pos:end="83:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:36" pos:end="83:52"><expr pos:start="83:36" pos:end="83:52"><literal type="string" pos:start="83:36" pos:end="83:52">"%d %d %d (%d)\n"</literal></expr></argument>, <argument pos:start="83:55" pos:end="83:60"><expr pos:start="83:55" pos:end="83:60"><name pos:start="83:55" pos:end="83:60">scoreL</name></expr></argument>, <argument pos:start="83:63" pos:end="83:66"><expr pos:start="83:63" pos:end="83:66"><name pos:start="83:63" pos:end="83:66">best</name></expr></argument>, <argument pos:start="83:69" pos:end="83:74"><expr pos:start="83:69" pos:end="83:74"><name pos:start="83:69" pos:end="83:74">scoreR</name></expr></argument>, <argument pos:start="83:77" pos:end="83:86"><expr pos:start="83:77" pos:end="83:86"><name pos:start="83:77" pos:end="83:86">total_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="97:9"><if pos:start="85:9" pos:end="91:9">if<condition pos:start="85:11" pos:end="85:40">(<expr pos:start="85:12" pos:end="85:39"><name pos:start="85:12" pos:end="85:17">scoreL</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <call pos:start="85:21" pos:end="85:39"><name pos:start="85:21" pos:end="85:25">FFMIN</name><argument_list pos:start="85:26" pos:end="85:39">(<argument pos:start="85:27" pos:end="85:30"><expr pos:start="85:27" pos:end="85:30"><name pos:start="85:27" pos:end="85:30">best</name></expr></argument>, <argument pos:start="85:33" pos:end="85:38"><expr pos:start="85:33" pos:end="85:38"><name pos:start="85:33" pos:end="85:38">scoreR</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="85:41" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:28">

            <expr_stmt pos:start="87:13" pos:end="87:26"><expr pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:16">best</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:25">scoreL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:28"><expr pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:22">total_gain</name> <operator pos:start="89:24" pos:end="89:25">-=</operator> <name pos:start="89:27" pos:end="89:27">i</name></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="91:10" pos:end="97:9">else if<condition pos:start="91:17" pos:end="91:31">(<expr pos:start="91:18" pos:end="91:30"><name pos:start="91:18" pos:end="91:23">scoreR</name> <operator pos:start="91:25" pos:end="91:25">&lt;</operator> <name pos:start="91:27" pos:end="91:30">best</name></expr>)</condition><block pos:start="91:32" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:28">

            <expr_stmt pos:start="93:13" pos:end="93:26"><expr pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:16">best</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <name pos:start="93:20" pos:end="93:25">scoreR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:28"><expr pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:22">total_gain</name> <operator pos:start="95:24" pos:end="95:25">+=</operator> <name pos:start="95:27" pos:end="95:27">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:72">(<expr pos:start="105:9" pos:end="105:71"><operator pos:start="105:9" pos:end="105:9">(</operator><name pos:start="105:10" pos:end="105:10">i</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:65"><name pos:start="105:14" pos:end="105:25">encode_frame</name><argument_list pos:start="105:26" pos:end="105:65">(<argument pos:start="105:27" pos:end="105:27"><expr pos:start="105:27" pos:end="105:27"><name pos:start="105:27" pos:end="105:27">s</name></expr></argument>, <argument pos:start="105:30" pos:end="105:37"><expr pos:start="105:30" pos:end="105:37"><name pos:start="105:30" pos:end="105:37"><name pos:start="105:30" pos:end="105:30">s</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:37">coefs</name></name></expr></argument>, <argument pos:start="105:40" pos:end="105:42"><expr pos:start="105:40" pos:end="105:42"><name pos:start="105:40" pos:end="105:42">buf</name></expr></argument>, <argument pos:start="105:45" pos:end="105:52"><expr pos:start="105:45" pos:end="105:52"><name pos:start="105:45" pos:end="105:52">buf_size</name></expr></argument>, <argument pos:start="105:55" pos:end="105:64"><expr pos:start="105:55" pos:end="105:64"><name pos:start="105:55" pos:end="105:64">total_gain</name></expr></argument>)</argument_list></call><operator pos:start="105:66" pos:end="105:66">)</operator> <operator pos:start="105:68" pos:end="105:69">&gt;=</operator> <literal type="number" pos:start="105:71" pos:end="105:71">0</literal></expr>)</condition> <block pos:start="105:74" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:31">

        <expr_stmt pos:start="107:9" pos:end="109:43"><expr pos:start="107:9" pos:end="109:42"><call pos:start="107:9" pos:end="109:42"><name pos:start="107:9" pos:end="107:14">av_log</name><argument_list pos:start="107:15" pos:end="109:42">(<argument pos:start="107:16" pos:end="107:20"><expr pos:start="107:16" pos:end="107:20"><name pos:start="107:16" pos:end="107:20">avctx</name></expr></argument>, <argument pos:start="107:23" pos:end="107:34"><expr pos:start="107:23" pos:end="107:34"><name pos:start="107:23" pos:end="107:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:37" pos:end="109:41"><expr pos:start="107:37" pos:end="109:41"><literal type="string" pos:start="107:37" pos:end="107:76">"required frame size too large. please "</literal>

               <literal type="string" pos:start="109:16" pos:end="109:41">"use a higher bit rate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:31">return <expr pos:start="111:16" pos:end="111:30"><call pos:start="111:16" pos:end="111:30"><name pos:start="111:16" pos:end="111:22">AVERROR</name><argument_list pos:start="111:23" pos:end="111:30">(<argument pos:start="111:24" pos:end="111:29"><expr pos:start="111:24" pos:end="111:29"><name pos:start="111:24" pos:end="111:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:46"><expr pos:start="115:5" pos:end="115:45"><call pos:start="115:5" pos:end="115:45"><name pos:start="115:5" pos:end="115:10">assert</name><argument_list pos:start="115:11" pos:end="115:45">(<argument pos:start="115:12" pos:end="115:44"><expr pos:start="115:12" pos:end="115:44"><operator pos:start="115:12" pos:end="115:12">(</operator><call pos:start="115:13" pos:end="115:34"><name pos:start="115:13" pos:end="115:26">put_bits_count</name><argument_list pos:start="115:27" pos:end="115:34">(<argument pos:start="115:28" pos:end="115:33"><expr pos:start="115:28" pos:end="115:33"><operator pos:start="115:28" pos:end="115:28">&amp;</operator><name pos:start="115:29" pos:end="115:33"><name pos:start="115:29" pos:end="115:29">s</name><operator pos:start="115:30" pos:end="115:31">-&gt;</operator><name pos:start="115:32" pos:end="115:33">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="115:36" pos:end="115:36">&amp;</operator> <literal type="number" pos:start="115:38" pos:end="115:38">7</literal><operator pos:start="115:39" pos:end="115:39">)</operator> <operator pos:start="115:41" pos:end="115:42">==</operator> <literal type="number" pos:start="115:44" pos:end="115:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="117:5" pos:end="119:33">while <condition pos:start="117:11" pos:end="117:15">(<expr pos:start="117:12" pos:end="117:14"><name pos:start="117:12" pos:end="117:12">i</name><operator pos:start="117:13" pos:end="117:14">++</operator></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:33"><block_content pos:start="119:9" pos:end="119:33">

        <expr_stmt pos:start="119:9" pos:end="119:33"><expr pos:start="119:9" pos:end="119:32"><call pos:start="119:9" pos:end="119:32"><name pos:start="119:9" pos:end="119:16">put_bits</name><argument_list pos:start="119:17" pos:end="119:32">(<argument pos:start="119:18" pos:end="119:23"><expr pos:start="119:18" pos:end="119:23"><operator pos:start="119:18" pos:end="119:18">&amp;</operator><name pos:start="119:19" pos:end="119:23"><name pos:start="119:19" pos:end="119:19">s</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:23">pb</name></name></expr></argument>, <argument pos:start="119:26" pos:end="119:26"><expr pos:start="119:26" pos:end="119:26"><literal type="number" pos:start="119:26" pos:end="119:26">8</literal></expr></argument>, <argument pos:start="119:29" pos:end="119:31"><expr pos:start="119:29" pos:end="119:31"><literal type="char" pos:start="119:29" pos:end="119:31">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



    <expr_stmt pos:start="123:5" pos:end="123:27"><expr pos:start="123:5" pos:end="123:26"><call pos:start="123:5" pos:end="123:26"><name pos:start="123:5" pos:end="123:18">flush_put_bits</name><argument_list pos:start="123:19" pos:end="123:26">(<argument pos:start="123:20" pos:end="123:25"><expr pos:start="123:20" pos:end="123:25"><operator pos:start="123:20" pos:end="123:20">&amp;</operator><name pos:start="123:21" pos:end="123:25"><name pos:start="123:21" pos:end="123:21">s</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:25">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:26">return <expr pos:start="125:12" pos:end="125:25"><name pos:start="125:12" pos:end="125:25"><name pos:start="125:12" pos:end="125:12">s</name><operator pos:start="125:13" pos:end="125:14">-&gt;</operator><name pos:start="125:15" pos:end="125:25">block_align</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
