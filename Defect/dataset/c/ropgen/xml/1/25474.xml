<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25474.c" pos:tabs="8"><function pos:start="1:1" pos:end="166:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">wav_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="166:13">{<block_content pos:start="3:5" pos:end="166:13">
    <decl_stmt pos:start="3:5" pos:end="3:39"><decl pos:start="3:5" pos:end="3:16"><type pos:start="3:5" pos:end="3:11"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:16">size</name></decl>, <decl pos:start="3:19" pos:end="3:38"><type ref="prev" pos:start="3:5" pos:end="3:11"/><name pos:start="3:19" pos:end="3:27">av_uninit</name><argument_list pos:start="3:28" pos:end="3:38">(<argument pos:start="3:29" pos:end="3:37"><expr pos:start="3:29" pos:end="3:37"><name pos:start="3:29" pos:end="3:37">data_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:29"><decl pos:start="4:5" pos:end="4:28"><type pos:start="4:5" pos:end="4:11"><name pos:start="4:5" pos:end="4:11">int64_t</name></type> <name pos:start="4:13" pos:end="4:24">sample_count</name> <init pos:start="4:26" pos:end="4:28">= <expr pos:start="4:28" pos:end="4:28"><literal type="number" pos:start="4:28" pos:end="4:28">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">rf64</name> <init pos:start="5:14" pos:end="5:16">= <expr pos:start="5:16" pos:end="5:16"><literal type="number" pos:start="5:16" pos:end="5:16">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:24"><decl pos:start="6:5" pos:end="6:23"><type pos:start="6:5" pos:end="6:8"><name pos:start="6:5" pos:end="6:8">char</name></type> <name pos:start="6:10" pos:end="6:23"><name pos:start="6:10" pos:end="6:19">start_code</name><index pos:start="6:20" pos:end="6:23">[<expr pos:start="6:21" pos:end="6:22"><literal type="number" pos:start="6:21" pos:end="6:22">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">tag</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:33"><decl pos:start="8:5" pos:end="8:32"><type pos:start="8:5" pos:end="8:17"><name pos:start="8:5" pos:end="8:15">AVIOContext</name> <modifier pos:start="8:17" pos:end="8:17">*</modifier></type><name pos:start="8:18" pos:end="8:19">pb</name>      <init pos:start="8:26" pos:end="8:32">= <expr pos:start="8:28" pos:end="8:32"><name pos:start="8:28" pos:end="8:32"><name pos:start="8:28" pos:end="8:28">s</name><operator pos:start="8:29" pos:end="8:30">-&gt;</operator><name pos:start="8:31" pos:end="8:32">pb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVStream</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">st</name>         <init pos:start="9:26" pos:end="9:31">= <expr pos:start="9:28" pos:end="9:31"><name pos:start="9:28" pos:end="9:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:40"><decl pos:start="10:5" pos:end="10:39"><type pos:start="10:5" pos:end="10:21"><name pos:start="10:5" pos:end="10:19">WAVDemuxContext</name> <modifier pos:start="10:21" pos:end="10:21">*</modifier></type><name pos:start="10:22" pos:end="10:24">wav</name> <init pos:start="10:26" pos:end="10:39">= <expr pos:start="10:28" pos:end="10:39"><name pos:start="10:28" pos:end="10:39"><name pos:start="10:28" pos:end="10:28">s</name><operator pos:start="10:29" pos:end="10:30">-&gt;</operator><name pos:start="10:31" pos:end="10:39">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:20">got_fmt</name> <init pos:start="11:22" pos:end="11:24">= <expr pos:start="11:24" pos:end="11:24"><literal type="number" pos:start="11:24" pos:end="11:24">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:40"><decl pos:start="12:5" pos:end="12:24"><type pos:start="12:5" pos:end="12:11"><name pos:start="12:5" pos:end="12:11">int64_t</name></type> <name pos:start="12:13" pos:end="12:24">next_tag_ofs</name></decl>, <decl pos:start="12:27" pos:end="12:39"><type ref="prev" pos:start="12:5" pos:end="12:11"/><name pos:start="12:27" pos:end="12:34">data_ofs</name> <init pos:start="12:36" pos:end="12:39">= <expr pos:start="12:38" pos:end="12:39"><operator pos:start="12:38" pos:end="12:38">-</operator><literal type="number" pos:start="12:39" pos:end="12:39">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:42"><expr pos:start="13:5" pos:end="13:41"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:7">wav</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:18">unaligned</name></name> <operator pos:start="13:20" pos:end="13:20">=</operator> <call pos:start="13:22" pos:end="13:37"><name pos:start="13:22" pos:end="13:30">avio_tell</name><argument_list pos:start="13:31" pos:end="13:37">(<argument pos:start="13:32" pos:end="13:36"><expr pos:start="13:32" pos:end="13:36"><name pos:start="13:32" pos:end="13:36"><name pos:start="13:32" pos:end="13:32">s</name><operator pos:start="13:33" pos:end="13:34">-&gt;</operator><name pos:start="13:35" pos:end="13:36">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="13:39" pos:end="13:39">&amp;</operator> <literal type="number" pos:start="13:41" pos:end="13:41">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:27"><expr pos:start="14:5" pos:end="14:26"><name pos:start="14:5" pos:end="14:21"><name pos:start="14:5" pos:end="14:7">wav</name><operator pos:start="14:8" pos:end="14:9">-&gt;</operator><name pos:start="14:10" pos:end="14:21">smv_data_ofs</name></name> <operator pos:start="14:23" pos:end="14:23">=</operator> <operator pos:start="14:25" pos:end="14:25">-</operator><literal type="number" pos:start="14:26" pos:end="14:26">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="15:5" pos:end="15:23">/* read chunk ID */</comment>
    <expr_stmt pos:start="16:5" pos:end="16:24"><expr pos:start="16:5" pos:end="16:23"><name pos:start="16:5" pos:end="16:7">tag</name> <operator pos:start="16:9" pos:end="16:9">=</operator> <call pos:start="16:11" pos:end="16:23"><name pos:start="16:11" pos:end="16:19">avio_rl32</name><argument_list pos:start="16:20" pos:end="16:23">(<argument pos:start="16:21" pos:end="16:22"><expr pos:start="16:21" pos:end="16:22"><name pos:start="16:21" pos:end="16:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="17:5" pos:end="166:13">switch <condition pos:start="17:12" pos:end="17:16">(<expr pos:start="17:13" pos:end="17:15"><name pos:start="17:13" pos:end="17:15">tag</name></expr>)</condition> <block pos:start="17:18" pos:end="166:13">{<block_content pos:start="18:5" pos:end="166:13">
    <case pos:start="18:5" pos:end="18:35">case <expr pos:start="18:10" pos:end="18:34"><call pos:start="18:10" pos:end="18:34"><name pos:start="18:10" pos:end="18:14">MKTAG</name><argument_list pos:start="18:15" pos:end="18:34">(<argument pos:start="18:16" pos:end="18:18"><expr pos:start="18:16" pos:end="18:18"><literal type="char" pos:start="18:16" pos:end="18:18">'R'</literal></expr></argument>, <argument pos:start="18:21" pos:end="18:23"><expr pos:start="18:21" pos:end="18:23"><literal type="char" pos:start="18:21" pos:end="18:23">'I'</literal></expr></argument>, <argument pos:start="18:26" pos:end="18:28"><expr pos:start="18:26" pos:end="18:28"><literal type="char" pos:start="18:26" pos:end="18:28">'F'</literal></expr></argument>, <argument pos:start="18:31" pos:end="18:33"><expr pos:start="18:31" pos:end="18:33"><literal type="char" pos:start="18:31" pos:end="18:33">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>
        <break pos:start="19:9" pos:end="19:14">break;</break>
    <case pos:start="20:5" pos:end="20:35">case <expr pos:start="20:10" pos:end="20:34"><call pos:start="20:10" pos:end="20:34"><name pos:start="20:10" pos:end="20:14">MKTAG</name><argument_list pos:start="20:15" pos:end="20:34">(<argument pos:start="20:16" pos:end="20:18"><expr pos:start="20:16" pos:end="20:18"><literal type="char" pos:start="20:16" pos:end="20:18">'R'</literal></expr></argument>, <argument pos:start="20:21" pos:end="20:23"><expr pos:start="20:21" pos:end="20:23"><literal type="char" pos:start="20:21" pos:end="20:23">'I'</literal></expr></argument>, <argument pos:start="20:26" pos:end="20:28"><expr pos:start="20:26" pos:end="20:28"><literal type="char" pos:start="20:26" pos:end="20:28">'F'</literal></expr></argument>, <argument pos:start="20:31" pos:end="20:33"><expr pos:start="20:31" pos:end="20:33"><literal type="char" pos:start="20:31" pos:end="20:33">'X'</literal></expr></argument>)</argument_list></call></expr>:</case>
        <expr_stmt pos:start="21:9" pos:end="21:22"><expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:11">wav</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:17">rifx</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>;</expr_stmt>
        <break pos:start="22:9" pos:end="22:14">break;</break>
    <case pos:start="23:5" pos:end="23:35">case <expr pos:start="23:10" pos:end="23:34"><call pos:start="23:10" pos:end="23:34"><name pos:start="23:10" pos:end="23:14">MKTAG</name><argument_list pos:start="23:15" pos:end="23:34">(<argument pos:start="23:16" pos:end="23:18"><expr pos:start="23:16" pos:end="23:18"><literal type="char" pos:start="23:16" pos:end="23:18">'R'</literal></expr></argument>, <argument pos:start="23:21" pos:end="23:23"><expr pos:start="23:21" pos:end="23:23"><literal type="char" pos:start="23:21" pos:end="23:23">'F'</literal></expr></argument>, <argument pos:start="23:26" pos:end="23:28"><expr pos:start="23:26" pos:end="23:28"><literal type="char" pos:start="23:26" pos:end="23:28">'6'</literal></expr></argument>, <argument pos:start="23:31" pos:end="23:33"><expr pos:start="23:31" pos:end="23:33"><literal type="char" pos:start="23:31" pos:end="23:33">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
        <expr_stmt pos:start="24:9" pos:end="24:17"><expr pos:start="24:9" pos:end="24:16"><name pos:start="24:9" pos:end="24:12">rf64</name> <operator pos:start="24:14" pos:end="24:14">=</operator> <literal type="number" pos:start="24:16" pos:end="24:16">1</literal></expr>;</expr_stmt>
        <break pos:start="25:9" pos:end="25:14">break;</break>
    <default pos:start="26:5" pos:end="26:12">default:</default>
        <expr_stmt pos:start="27:9" pos:end="27:69"><expr pos:start="27:9" pos:end="27:68"><call pos:start="27:9" pos:end="27:68"><name pos:start="27:9" pos:end="27:31">av_get_codec_tag_string</name><argument_list pos:start="27:32" pos:end="27:68">(<argument pos:start="27:33" pos:end="27:42"><expr pos:start="27:33" pos:end="27:42"><name pos:start="27:33" pos:end="27:42">start_code</name></expr></argument>, <argument pos:start="27:45" pos:end="27:62"><expr pos:start="27:45" pos:end="27:62"><sizeof pos:start="27:45" pos:end="27:62">sizeof<argument_list pos:start="27:51" pos:end="27:62">(<argument pos:start="27:52" pos:end="27:61"><expr pos:start="27:52" pos:end="27:61"><name pos:start="27:52" pos:end="27:61">start_code</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="27:65" pos:end="27:67"><expr pos:start="27:65" pos:end="27:67"><name pos:start="27:65" pos:end="27:67">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:86"><expr pos:start="28:9" pos:end="28:85"><call pos:start="28:9" pos:end="28:85"><name pos:start="28:9" pos:end="28:14">av_log</name><argument_list pos:start="28:15" pos:end="28:85">(<argument pos:start="28:16" pos:end="28:16"><expr pos:start="28:16" pos:end="28:16"><name pos:start="28:16" pos:end="28:16">s</name></expr></argument>, <argument pos:start="28:19" pos:end="28:30"><expr pos:start="28:19" pos:end="28:30"><name pos:start="28:19" pos:end="28:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="28:33" pos:end="28:72"><expr pos:start="28:33" pos:end="28:72"><literal type="string" pos:start="28:33" pos:end="28:72">"invalid start code %s in RIFF header\n"</literal></expr></argument>, <argument pos:start="28:75" pos:end="28:84"><expr pos:start="28:75" pos:end="28:84"><name pos:start="28:75" pos:end="28:84">start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">AVERROR_INVALIDDATA</name></expr>;</return>
    <comment type="block" pos:start="30:5" pos:end="30:25">/* read chunk size */</comment>
    <expr_stmt pos:start="31:5" pos:end="31:18"><expr pos:start="31:5" pos:end="31:17"><call pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:13">avio_rl32</name><argument_list pos:start="31:14" pos:end="31:17">(<argument pos:start="31:15" pos:end="31:16"><expr pos:start="31:15" pos:end="31:16"><name pos:start="31:15" pos:end="31:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="32:5" pos:end="32:21">/* read format */</comment>
    <if_stmt pos:start="33:5" pos:end="166:13"><if pos:start="33:5" pos:end="166:13">if <condition pos:start="33:8" pos:end="33:51">(<expr pos:start="33:9" pos:end="33:50"><call pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:17">avio_rl32</name><argument_list pos:start="33:18" pos:end="33:21">(<argument pos:start="33:19" pos:end="33:20"><expr pos:start="33:19" pos:end="33:20"><name pos:start="33:19" pos:end="33:20">pb</name></expr></argument>)</argument_list></call> <operator pos:start="33:23" pos:end="33:24">!=</operator> <call pos:start="33:26" pos:end="33:50"><name pos:start="33:26" pos:end="33:30">MKTAG</name><argument_list pos:start="33:31" pos:end="33:50">(<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><literal type="char" pos:start="33:32" pos:end="33:34">'W'</literal></expr></argument>, <argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><literal type="char" pos:start="33:37" pos:end="33:39">'A'</literal></expr></argument>, <argument pos:start="33:42" pos:end="33:44"><expr pos:start="33:42" pos:end="33:44"><literal type="char" pos:start="33:42" pos:end="33:44">'V'</literal></expr></argument>, <argument pos:start="33:47" pos:end="33:49"><expr pos:start="33:47" pos:end="33:49"><literal type="char" pos:start="33:47" pos:end="33:49">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:53" pos:end="166:13">{<block_content pos:start="34:9" pos:end="166:13">
        <expr_stmt pos:start="34:9" pos:end="34:67"><expr pos:start="34:9" pos:end="34:66"><call pos:start="34:9" pos:end="34:66"><name pos:start="34:9" pos:end="34:14">av_log</name><argument_list pos:start="34:15" pos:end="34:66">(<argument pos:start="34:16" pos:end="34:16"><expr pos:start="34:16" pos:end="34:16"><name pos:start="34:16" pos:end="34:16">s</name></expr></argument>, <argument pos:start="34:19" pos:end="34:30"><expr pos:start="34:19" pos:end="34:30"><name pos:start="34:19" pos:end="34:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="34:33" pos:end="34:65"><expr pos:start="34:33" pos:end="34:65"><literal type="string" pos:start="34:33" pos:end="34:65">"invalid format in RIFF header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return>
    <if_stmt pos:start="36:5" pos:end="166:13"><if pos:start="36:5" pos:end="166:13">if <condition pos:start="36:8" pos:end="36:13">(<expr pos:start="36:9" pos:end="36:12"><name pos:start="36:9" pos:end="36:12">rf64</name></expr>)</condition> <block pos:start="36:15" pos:end="166:13">{<block_content pos:start="37:9" pos:end="166:13">
        <if_stmt pos:start="37:9" pos:end="38:39"><if pos:start="37:9" pos:end="38:39">if <condition pos:start="37:12" pos:end="37:55">(<expr pos:start="37:13" pos:end="37:54"><call pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:21">avio_rl32</name><argument_list pos:start="37:22" pos:end="37:25">(<argument pos:start="37:23" pos:end="37:24"><expr pos:start="37:23" pos:end="37:24"><name pos:start="37:23" pos:end="37:24">pb</name></expr></argument>)</argument_list></call> <operator pos:start="37:27" pos:end="37:28">!=</operator> <call pos:start="37:30" pos:end="37:54"><name pos:start="37:30" pos:end="37:34">MKTAG</name><argument_list pos:start="37:35" pos:end="37:54">(<argument pos:start="37:36" pos:end="37:38"><expr pos:start="37:36" pos:end="37:38"><literal type="char" pos:start="37:36" pos:end="37:38">'d'</literal></expr></argument>, <argument pos:start="37:41" pos:end="37:43"><expr pos:start="37:41" pos:end="37:43"><literal type="char" pos:start="37:41" pos:end="37:43">'s'</literal></expr></argument>, <argument pos:start="37:46" pos:end="37:48"><expr pos:start="37:46" pos:end="37:48"><literal type="char" pos:start="37:46" pos:end="37:48">'6'</literal></expr></argument>, <argument pos:start="37:51" pos:end="37:53"><expr pos:start="37:51" pos:end="37:53"><literal type="char" pos:start="37:51" pos:end="37:53">'4'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="38:13" pos:end="38:39"><block_content pos:start="38:13" pos:end="38:39">
            <return pos:start="38:13" pos:end="38:39">return <expr pos:start="38:20" pos:end="38:38"><name pos:start="38:20" pos:end="38:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:12">size</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:28"><name pos:start="39:16" pos:end="39:24">avio_rl32</name><argument_list pos:start="39:25" pos:end="39:28">(<argument pos:start="39:26" pos:end="39:27"><expr pos:start="39:26" pos:end="39:27"><name pos:start="39:26" pos:end="39:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="40:9" pos:end="41:39"><if pos:start="40:9" pos:end="41:39">if <condition pos:start="40:12" pos:end="40:22">(<expr pos:start="40:13" pos:end="40:21"><name pos:start="40:13" pos:end="40:16">size</name> <operator pos:start="40:18" pos:end="40:18">&lt;</operator> <literal type="number" pos:start="40:20" pos:end="40:21">24</literal></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:39"><block_content pos:start="41:13" pos:end="41:39">
            <return pos:start="41:13" pos:end="41:39">return <expr pos:start="41:20" pos:end="41:38"><name pos:start="41:20" pos:end="41:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:22"><expr pos:start="42:9" pos:end="42:21"><call pos:start="42:9" pos:end="42:21"><name pos:start="42:9" pos:end="42:17">avio_rl64</name><argument_list pos:start="42:18" pos:end="42:21">(<argument pos:start="42:19" pos:end="42:20"><expr pos:start="42:19" pos:end="42:20"><name pos:start="42:19" pos:end="42:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="42:24" pos:end="42:38">/* RIFF size */</comment>
        <expr_stmt pos:start="43:9" pos:end="43:37"><expr pos:start="43:9" pos:end="43:36"><name pos:start="43:9" pos:end="43:17">data_size</name>    <operator pos:start="43:22" pos:end="43:22">=</operator> <call pos:start="43:24" pos:end="43:36"><name pos:start="43:24" pos:end="43:32">avio_rl64</name><argument_list pos:start="43:33" pos:end="43:36">(<argument pos:start="43:34" pos:end="43:35"><expr pos:start="43:34" pos:end="43:35"><name pos:start="43:34" pos:end="43:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="44:9" pos:end="44:37"><expr pos:start="44:9" pos:end="44:36"><name pos:start="44:9" pos:end="44:20">sample_count</name> <operator pos:start="44:22" pos:end="44:22">=</operator> <call pos:start="44:24" pos:end="44:36"><name pos:start="44:24" pos:end="44:32">avio_rl64</name><argument_list pos:start="44:33" pos:end="44:36">(<argument pos:start="44:34" pos:end="44:35"><expr pos:start="44:34" pos:end="44:35"><name pos:start="44:34" pos:end="44:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="45:9" pos:end="166:13"><if pos:start="45:9" pos:end="166:13">if <condition pos:start="45:12" pos:end="45:46">(<expr pos:start="45:13" pos:end="45:45"><name pos:start="45:13" pos:end="45:21">data_size</name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <literal type="number" pos:start="45:25" pos:end="45:25">0</literal> <operator pos:start="45:27" pos:end="45:28">||</operator> <name pos:start="45:30" pos:end="45:41">sample_count</name> <operator pos:start="45:43" pos:end="45:43">&lt;</operator> <literal type="number" pos:start="45:45" pos:end="45:45">0</literal></expr>)</condition> <block pos:start="45:48" pos:end="166:13">{<block_content pos:start="46:13" pos:end="166:13">
            <expr_stmt pos:start="46:13" pos:end="48:44"><expr pos:start="46:13" pos:end="48:43"><call pos:start="46:13" pos:end="48:43"><name pos:start="46:13" pos:end="46:18">av_log</name><argument_list pos:start="46:19" pos:end="48:43">(<argument pos:start="46:20" pos:end="46:20"><expr pos:start="46:20" pos:end="46:20"><name pos:start="46:20" pos:end="46:20">s</name></expr></argument>, <argument pos:start="46:23" pos:end="46:34"><expr pos:start="46:23" pos:end="46:34"><name pos:start="46:23" pos:end="46:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="46:37" pos:end="47:76"><expr pos:start="46:37" pos:end="47:76"><literal type="string" pos:start="46:37" pos:end="46:80">"negative data_size and/or sample_count in "</literal>
                   <literal type="string" pos:start="47:20" pos:end="47:40">"ds64: data_size = %"</literal><name pos:start="47:41" pos:end="47:46">PRId64</name><literal type="string" pos:start="47:47" pos:end="47:66">", sample_count = %"</literal><name pos:start="47:67" pos:end="47:72">PRId64</name><literal type="string" pos:start="47:73" pos:end="47:76">"\n"</literal></expr></argument>,
                   <argument pos:start="48:20" pos:end="48:28"><expr pos:start="48:20" pos:end="48:28"><name pos:start="48:20" pos:end="48:28">data_size</name></expr></argument>, <argument pos:start="48:31" pos:end="48:42"><expr pos:start="48:31" pos:end="48:42"><name pos:start="48:31" pos:end="48:42">sample_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="49:13" pos:end="49:39">return <expr pos:start="49:20" pos:end="49:38"><name pos:start="49:20" pos:end="49:38">AVERROR_INVALIDDATA</name></expr>;</return>
        <expr_stmt pos:start="50:9" pos:end="50:33"><expr pos:start="50:9" pos:end="50:32"><call pos:start="50:9" pos:end="50:32"><name pos:start="50:9" pos:end="50:17">avio_skip</name><argument_list pos:start="50:18" pos:end="50:32">(<argument pos:start="50:19" pos:end="50:20"><expr pos:start="50:19" pos:end="50:20"><name pos:start="50:19" pos:end="50:20">pb</name></expr></argument>, <argument pos:start="50:23" pos:end="50:31"><expr pos:start="50:23" pos:end="50:31"><name pos:start="50:23" pos:end="50:26">size</name> <operator pos:start="50:28" pos:end="50:28">-</operator> <literal type="number" pos:start="50:30" pos:end="50:31">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="50:35" pos:end="50:63">/* skip rest of ds64 chunk */</comment>
    <for pos:start="51:5" pos:end="166:13">for <control pos:start="51:9" pos:end="51:12">(<init pos:start="51:10" pos:end="51:10">;</init><condition pos:start="51:11" pos:end="51:11">;</condition><incr/>)</control> <block pos:start="51:14" pos:end="166:13">{<block_content pos:start="52:9" pos:end="166:13">
        <decl_stmt pos:start="52:9" pos:end="52:22"><decl pos:start="52:9" pos:end="52:21"><type pos:start="52:9" pos:end="52:18"><name pos:start="52:9" pos:end="52:16">AVStream</name> <modifier pos:start="52:18" pos:end="52:18">*</modifier></type><name pos:start="52:19" pos:end="52:21">vst</name></decl>;</decl_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:53"><expr pos:start="53:9" pos:end="53:52"><name pos:start="53:9" pos:end="53:12">size</name>         <operator pos:start="53:22" pos:end="53:22">=</operator> <call pos:start="53:24" pos:end="53:52"><name pos:start="53:24" pos:end="53:31">next_tag</name><argument_list pos:start="53:32" pos:end="53:52">(<argument pos:start="53:33" pos:end="53:34"><expr pos:start="53:33" pos:end="53:34"><name pos:start="53:33" pos:end="53:34">pb</name></expr></argument>, <argument pos:start="53:37" pos:end="53:40"><expr pos:start="53:37" pos:end="53:40"><operator pos:start="53:37" pos:end="53:37">&amp;</operator><name pos:start="53:38" pos:end="53:40">tag</name></expr></argument>, <argument pos:start="53:43" pos:end="53:51"><expr pos:start="53:43" pos:end="53:51"><name pos:start="53:43" pos:end="53:51"><name pos:start="53:43" pos:end="53:45">wav</name><operator pos:start="53:46" pos:end="53:47">-&gt;</operator><name pos:start="53:48" pos:end="53:51">rifx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:44"><expr pos:start="54:9" pos:end="54:43"><name pos:start="54:9" pos:end="54:20">next_tag_ofs</name> <operator pos:start="54:22" pos:end="54:22">=</operator> <call pos:start="54:24" pos:end="54:36"><name pos:start="54:24" pos:end="54:32">avio_tell</name><argument_list pos:start="54:33" pos:end="54:36">(<argument pos:start="54:34" pos:end="54:35"><expr pos:start="54:34" pos:end="54:35"><name pos:start="54:34" pos:end="54:35">pb</name></expr></argument>)</argument_list></call> <operator pos:start="54:38" pos:end="54:38">+</operator> <name pos:start="54:40" pos:end="54:43">size</name></expr>;</expr_stmt>
        <if_stmt pos:start="55:9" pos:end="56:18"><if pos:start="55:9" pos:end="56:18">if <condition pos:start="55:12" pos:end="55:26">(<expr pos:start="55:13" pos:end="55:25"><call pos:start="55:13" pos:end="55:25"><name pos:start="55:13" pos:end="55:21">avio_feof</name><argument_list pos:start="55:22" pos:end="55:25">(<argument pos:start="55:23" pos:end="55:24"><expr pos:start="55:23" pos:end="55:24"><name pos:start="55:23" pos:end="55:24">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="56:13" pos:end="56:18"><block_content pos:start="56:13" pos:end="56:18">
            <break pos:start="56:13" pos:end="56:18">break;</break></block_content></block></if></if_stmt>
        <switch pos:start="57:9" pos:end="166:13">switch <condition pos:start="57:16" pos:end="57:20">(<expr pos:start="57:17" pos:end="57:19"><name pos:start="57:17" pos:end="57:19">tag</name></expr>)</condition> <block pos:start="57:22" pos:end="166:13">{<block_content pos:start="58:9" pos:end="166:13">
        <case pos:start="58:9" pos:end="58:39">case <expr pos:start="58:14" pos:end="58:38"><call pos:start="58:14" pos:end="58:38"><name pos:start="58:14" pos:end="58:18">MKTAG</name><argument_list pos:start="58:19" pos:end="58:38">(<argument pos:start="58:20" pos:end="58:22"><expr pos:start="58:20" pos:end="58:22"><literal type="char" pos:start="58:20" pos:end="58:22">'f'</literal></expr></argument>, <argument pos:start="58:25" pos:end="58:27"><expr pos:start="58:25" pos:end="58:27"><literal type="char" pos:start="58:25" pos:end="58:27">'m'</literal></expr></argument>, <argument pos:start="58:30" pos:end="58:32"><expr pos:start="58:30" pos:end="58:32"><literal type="char" pos:start="58:30" pos:end="58:32">'t'</literal></expr></argument>, <argument pos:start="58:35" pos:end="58:37"><expr pos:start="58:35" pos:end="58:37"><literal type="char" pos:start="58:35" pos:end="58:37">' '</literal></expr></argument>)</argument_list></call></expr>:</case>
            <comment type="block" pos:start="59:13" pos:end="59:55">/* only parse the first 'fmt ' tag found */</comment>
            <if_stmt pos:start="60:13" pos:end="63:78"><if pos:start="60:13" pos:end="62:13">if <condition pos:start="60:16" pos:end="60:72">(<expr pos:start="60:17" pos:end="60:71"><operator pos:start="60:17" pos:end="60:17">!</operator><name pos:start="60:18" pos:end="60:24">got_fmt</name> <operator pos:start="60:26" pos:end="60:27">&amp;&amp;</operator> <operator pos:start="60:29" pos:end="60:29">(</operator><name pos:start="60:30" pos:end="60:32">ret</name> <operator pos:start="60:34" pos:end="60:34">=</operator> <call pos:start="60:36" pos:end="60:66"><name pos:start="60:36" pos:end="60:52">wav_parse_fmt_tag</name><argument_list pos:start="60:53" pos:end="60:66">(<argument pos:start="60:54" pos:end="60:54"><expr pos:start="60:54" pos:end="60:54"><name pos:start="60:54" pos:end="60:54">s</name></expr></argument>, <argument pos:start="60:57" pos:end="60:60"><expr pos:start="60:57" pos:end="60:60"><name pos:start="60:57" pos:end="60:60">size</name></expr></argument>, <argument pos:start="60:63" pos:end="60:65"><expr pos:start="60:63" pos:end="60:65"><operator pos:start="60:63" pos:end="60:63">&amp;</operator><name pos:start="60:64" pos:end="60:65">st</name></expr></argument>)</argument_list></call><operator pos:start="60:67" pos:end="60:67">)</operator> <operator pos:start="60:69" pos:end="60:69">&lt;</operator> <literal type="number" pos:start="60:71" pos:end="60:71">0</literal></expr>)</condition> <block pos:start="60:74" pos:end="62:13">{<block_content pos:start="61:17" pos:end="61:27">
                <return pos:start="61:17" pos:end="61:27">return <expr pos:start="61:24" pos:end="61:26"><name pos:start="61:24" pos:end="61:26">ret</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif" pos:start="62:15" pos:end="63:78">else if <condition pos:start="62:23" pos:end="62:31">(<expr pos:start="62:24" pos:end="62:30"><name pos:start="62:24" pos:end="62:30">got_fmt</name></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:78"><block_content pos:start="63:17" pos:end="63:78">
                <expr_stmt pos:start="63:17" pos:end="63:78"><expr pos:start="63:17" pos:end="63:77"><call pos:start="63:17" pos:end="63:77"><name pos:start="63:17" pos:end="63:22">av_log</name><argument_list pos:start="63:23" pos:end="63:77">(<argument pos:start="63:24" pos:end="63:24"><expr pos:start="63:24" pos:end="63:24"><name pos:start="63:24" pos:end="63:24">s</name></expr></argument>, <argument pos:start="63:27" pos:end="63:40"><expr pos:start="63:27" pos:end="63:40"><name pos:start="63:27" pos:end="63:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="63:43" pos:end="63:76"><expr pos:start="63:43" pos:end="63:76"><literal type="string" pos:start="63:43" pos:end="63:76">"found more than one 'fmt ' tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="64:13" pos:end="64:24"><expr pos:start="64:13" pos:end="64:23"><name pos:start="64:13" pos:end="64:19">got_fmt</name> <operator pos:start="64:21" pos:end="64:21">=</operator> <literal type="number" pos:start="64:23" pos:end="64:23">1</literal></expr>;</expr_stmt>
            <break pos:start="65:13" pos:end="65:18">break;</break>
        <case pos:start="66:9" pos:end="66:39">case <expr pos:start="66:14" pos:end="66:38"><call pos:start="66:14" pos:end="66:38"><name pos:start="66:14" pos:end="66:18">MKTAG</name><argument_list pos:start="66:19" pos:end="66:38">(<argument pos:start="66:20" pos:end="66:22"><expr pos:start="66:20" pos:end="66:22"><literal type="char" pos:start="66:20" pos:end="66:22">'d'</literal></expr></argument>, <argument pos:start="66:25" pos:end="66:27"><expr pos:start="66:25" pos:end="66:27"><literal type="char" pos:start="66:25" pos:end="66:27">'a'</literal></expr></argument>, <argument pos:start="66:30" pos:end="66:32"><expr pos:start="66:30" pos:end="66:32"><literal type="char" pos:start="66:30" pos:end="66:32">'t'</literal></expr></argument>, <argument pos:start="66:35" pos:end="66:37"><expr pos:start="66:35" pos:end="66:37"><literal type="char" pos:start="66:35" pos:end="66:37">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>
            <if_stmt pos:start="67:13" pos:end="166:13"><if pos:start="67:13" pos:end="166:13">if <condition pos:start="67:16" pos:end="67:25">(<expr pos:start="67:17" pos:end="67:24"><operator pos:start="67:17" pos:end="67:17">!</operator><name pos:start="67:18" pos:end="67:24">got_fmt</name></expr>)</condition> <block pos:start="67:27" pos:end="166:13">{<block_content pos:start="68:17" pos:end="166:13">
                <expr_stmt pos:start="68:17" pos:end="69:70"><expr pos:start="68:17" pos:end="69:69"><call pos:start="68:17" pos:end="69:69"><name pos:start="68:17" pos:end="68:22">av_log</name><argument_list pos:start="68:23" pos:end="69:69">(<argument pos:start="68:24" pos:end="68:24"><expr pos:start="68:24" pos:end="68:24"><name pos:start="68:24" pos:end="68:24">s</name></expr></argument>, <argument pos:start="68:27" pos:end="68:38"><expr pos:start="68:27" pos:end="68:38"><name pos:start="68:27" pos:end="68:38">AV_LOG_ERROR</name></expr></argument>,
                       <argument pos:start="69:24" pos:end="69:68"><expr pos:start="69:24" pos:end="69:68"><literal type="string" pos:start="69:24" pos:end="69:68">"found no 'fmt ' tag before the 'data' tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="70:17" pos:end="70:43">return <expr pos:start="70:24" pos:end="70:42"><name pos:start="70:24" pos:end="70:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <if_stmt pos:start="71:13" pos:end="166:13"><if pos:start="71:13" pos:end="73:13">if <condition pos:start="71:16" pos:end="71:21">(<expr pos:start="71:17" pos:end="71:20"><name pos:start="71:17" pos:end="71:20">rf64</name></expr>)</condition> <block pos:start="71:23" pos:end="73:13">{<block_content pos:start="72:17" pos:end="72:73">
                <expr_stmt pos:start="72:17" pos:end="72:73"><expr pos:start="72:17" pos:end="72:72"><name pos:start="72:17" pos:end="72:28">next_tag_ofs</name> <operator pos:start="72:30" pos:end="72:30">=</operator> <name pos:start="72:32" pos:end="72:44"><name pos:start="72:32" pos:end="72:34">wav</name><operator pos:start="72:35" pos:end="72:36">-&gt;</operator><name pos:start="72:37" pos:end="72:44">data_end</name></name> <operator pos:start="72:46" pos:end="72:46">=</operator> <call pos:start="72:48" pos:end="72:60"><name pos:start="72:48" pos:end="72:56">avio_tell</name><argument_list pos:start="72:57" pos:end="72:60">(<argument pos:start="72:58" pos:end="72:59"><expr pos:start="72:58" pos:end="72:59"><name pos:start="72:58" pos:end="72:59">pb</name></expr></argument>)</argument_list></call> <operator pos:start="72:62" pos:end="72:62">+</operator> <name pos:start="72:64" pos:end="72:72">data_size</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="73:15" pos:end="76:13">else if <condition pos:start="73:23" pos:end="73:42">(<expr pos:start="73:24" pos:end="73:41"><name pos:start="73:24" pos:end="73:27">size</name> <operator pos:start="73:29" pos:end="73:30">!=</operator> <literal type="number" pos:start="73:32" pos:end="73:41">0xFFFFFFFF</literal></expr>)</condition> <block pos:start="73:44" pos:end="76:13">{<block_content pos:start="74:17" pos:end="75:79">
                <expr_stmt pos:start="74:17" pos:end="74:36"><expr pos:start="74:17" pos:end="74:35"><name pos:start="74:17" pos:end="74:25">data_size</name>    <operator pos:start="74:30" pos:end="74:30">=</operator> <name pos:start="74:32" pos:end="74:35">size</name></expr>;</expr_stmt>
                <expr_stmt pos:start="75:17" pos:end="75:79"><expr pos:start="75:17" pos:end="75:78"><name pos:start="75:17" pos:end="75:28">next_tag_ofs</name> <operator pos:start="75:30" pos:end="75:30">=</operator> <name pos:start="75:32" pos:end="75:44"><name pos:start="75:32" pos:end="75:34">wav</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:44">data_end</name></name> <operator pos:start="75:46" pos:end="75:46">=</operator> <ternary pos:start="75:48" pos:end="75:78"><condition pos:start="75:48" pos:end="75:53"><expr pos:start="75:48" pos:end="75:51"><name pos:start="75:48" pos:end="75:51">size</name></expr> ?</condition><then pos:start="75:55" pos:end="75:66"> <expr pos:start="75:55" pos:end="75:66"><name pos:start="75:55" pos:end="75:66">next_tag_ofs</name></expr> </then><else pos:start="75:68" pos:end="75:78">: <expr pos:start="75:70" pos:end="75:78"><name pos:start="75:70" pos:end="75:78">INT64_MAX</name></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="76:15" pos:end="166:13">else <block pos:start="76:20" pos:end="166:13">{<block_content pos:start="77:17" pos:end="166:13">
                <expr_stmt pos:start="77:17" pos:end="78:48"><expr pos:start="77:17" pos:end="78:47"><call pos:start="77:17" pos:end="78:47"><name pos:start="77:17" pos:end="77:22">av_log</name><argument_list pos:start="77:23" pos:end="78:47">(<argument pos:start="77:24" pos:end="77:24"><expr pos:start="77:24" pos:end="77:24"><name pos:start="77:24" pos:end="77:24">s</name></expr></argument>, <argument pos:start="77:27" pos:end="77:40"><expr pos:start="77:27" pos:end="77:40"><name pos:start="77:27" pos:end="77:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="77:43" pos:end="78:46"><expr pos:start="77:43" pos:end="78:46"><literal type="string" pos:start="77:43" pos:end="77:76">"Ignoring maximum wav data size, "</literal>
                       <literal type="string" pos:start="78:24" pos:end="78:46">"file may be invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="79:17" pos:end="79:33"><expr pos:start="79:17" pos:end="79:32"><name pos:start="79:17" pos:end="79:25">data_size</name>    <operator pos:start="79:30" pos:end="79:30">=</operator> <literal type="number" pos:start="79:32" pos:end="79:32">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="80:17" pos:end="80:57"><expr pos:start="80:17" pos:end="80:56"><name pos:start="80:17" pos:end="80:28">next_tag_ofs</name> <operator pos:start="80:30" pos:end="80:30">=</operator> <name pos:start="80:32" pos:end="80:44"><name pos:start="80:32" pos:end="80:34">wav</name><operator pos:start="80:35" pos:end="80:36">-&gt;</operator><name pos:start="80:37" pos:end="80:44">data_end</name></name> <operator pos:start="80:46" pos:end="80:46">=</operator> <name pos:start="80:48" pos:end="80:56">INT64_MAX</name></expr>;</expr_stmt>
            <expr_stmt pos:start="81:13" pos:end="81:37"><expr pos:start="81:13" pos:end="81:36"><name pos:start="81:13" pos:end="81:20">data_ofs</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <call pos:start="81:24" pos:end="81:36"><name pos:start="81:24" pos:end="81:32">avio_tell</name><argument_list pos:start="81:33" pos:end="81:36">(<argument pos:start="81:34" pos:end="81:35"><expr pos:start="81:34" pos:end="81:35"><name pos:start="81:34" pos:end="81:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="82:13" pos:end="84:15">/* don't look for footer metadata if we can't seek or if we don't
             * know where the data tag ends
             */</comment>
            <if_stmt pos:start="85:13" pos:end="86:32"><if pos:start="85:13" pos:end="86:32">if <condition pos:start="85:16" pos:end="85:50">(<expr pos:start="85:17" pos:end="85:49"><operator pos:start="85:17" pos:end="85:17">!</operator><name pos:start="85:18" pos:end="85:29"><name pos:start="85:18" pos:end="85:19">pb</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:29">seekable</name></name> <operator pos:start="85:31" pos:end="85:32">||</operator> <operator pos:start="85:34" pos:end="85:34">(</operator><operator pos:start="85:35" pos:end="85:35">!</operator><name pos:start="85:36" pos:end="85:39">rf64</name> <operator pos:start="85:41" pos:end="85:42">&amp;&amp;</operator> <operator pos:start="85:44" pos:end="85:44">!</operator><name pos:start="85:45" pos:end="85:48">size</name><operator pos:start="85:49" pos:end="85:49">)</operator></expr>)</condition><block type="pseudo" pos:start="86:17" pos:end="86:32"><block_content pos:start="86:17" pos:end="86:32">
                <goto pos:start="86:17" pos:end="86:32">goto <name pos:start="86:22" pos:end="86:31">break_loop</name>;</goto></block_content></block></if></if_stmt>
            <break pos:start="87:13" pos:end="87:18">break;</break>
        <case pos:start="88:9" pos:end="88:39">case <expr pos:start="88:14" pos:end="88:38"><call pos:start="88:14" pos:end="88:38"><name pos:start="88:14" pos:end="88:18">MKTAG</name><argument_list pos:start="88:19" pos:end="88:38">(<argument pos:start="88:20" pos:end="88:22"><expr pos:start="88:20" pos:end="88:22"><literal type="char" pos:start="88:20" pos:end="88:22">'f'</literal></expr></argument>, <argument pos:start="88:25" pos:end="88:27"><expr pos:start="88:25" pos:end="88:27"><literal type="char" pos:start="88:25" pos:end="88:27">'a'</literal></expr></argument>, <argument pos:start="88:30" pos:end="88:32"><expr pos:start="88:30" pos:end="88:32"><literal type="char" pos:start="88:30" pos:end="88:32">'c'</literal></expr></argument>, <argument pos:start="88:35" pos:end="88:37"><expr pos:start="88:35" pos:end="88:37"><literal type="char" pos:start="88:35" pos:end="88:37">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>
            <if_stmt pos:start="89:13" pos:end="90:76"><if pos:start="89:13" pos:end="90:76">if <condition pos:start="89:16" pos:end="89:30">(<expr pos:start="89:17" pos:end="89:29"><operator pos:start="89:17" pos:end="89:17">!</operator><name pos:start="89:18" pos:end="89:29">sample_count</name></expr>)</condition><block type="pseudo" pos:start="90:17" pos:end="90:76"><block_content pos:start="90:17" pos:end="90:76">
                <expr_stmt pos:start="90:17" pos:end="90:76"><expr pos:start="90:17" pos:end="90:75"><name pos:start="90:17" pos:end="90:28">sample_count</name> <operator pos:start="90:30" pos:end="90:30">=</operator> <operator pos:start="90:32" pos:end="90:32">(</operator><ternary pos:start="90:33" pos:end="90:74"><condition pos:start="90:33" pos:end="90:44"><expr pos:start="90:33" pos:end="90:42"><operator pos:start="90:33" pos:end="90:33">!</operator><name pos:start="90:34" pos:end="90:42"><name pos:start="90:34" pos:end="90:36">wav</name><operator pos:start="90:37" pos:end="90:38">-&gt;</operator><name pos:start="90:39" pos:end="90:42">rifx</name></name></expr> ?</condition><then pos:start="90:46" pos:end="90:58"> <expr pos:start="90:46" pos:end="90:58"><call pos:start="90:46" pos:end="90:58"><name pos:start="90:46" pos:end="90:54">avio_rl32</name><argument_list pos:start="90:55" pos:end="90:58">(<argument pos:start="90:56" pos:end="90:57"><expr pos:start="90:56" pos:end="90:57"><name pos:start="90:56" pos:end="90:57">pb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="90:60" pos:end="90:74">: <expr pos:start="90:62" pos:end="90:74"><call pos:start="90:62" pos:end="90:74"><name pos:start="90:62" pos:end="90:70">avio_rb32</name><argument_list pos:start="90:71" pos:end="90:74">(<argument pos:start="90:72" pos:end="90:73"><expr pos:start="90:72" pos:end="90:73"><name pos:start="90:72" pos:end="90:73">pb</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="90:75" pos:end="90:75">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break pos:start="91:13" pos:end="91:18">break;</break>
        <case pos:start="92:9" pos:end="92:39">case <expr pos:start="92:14" pos:end="92:38"><call pos:start="92:14" pos:end="92:38"><name pos:start="92:14" pos:end="92:18">MKTAG</name><argument_list pos:start="92:19" pos:end="92:38">(<argument pos:start="92:20" pos:end="92:22"><expr pos:start="92:20" pos:end="92:22"><literal type="char" pos:start="92:20" pos:end="92:22">'b'</literal></expr></argument>, <argument pos:start="92:25" pos:end="92:27"><expr pos:start="92:25" pos:end="92:27"><literal type="char" pos:start="92:25" pos:end="92:27">'e'</literal></expr></argument>, <argument pos:start="92:30" pos:end="92:32"><expr pos:start="92:30" pos:end="92:32"><literal type="char" pos:start="92:30" pos:end="92:32">'x'</literal></expr></argument>, <argument pos:start="92:35" pos:end="92:37"><expr pos:start="92:35" pos:end="92:37"><literal type="char" pos:start="92:35" pos:end="92:37">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>
            <if_stmt pos:start="93:13" pos:end="94:27"><if pos:start="93:13" pos:end="94:27">if <condition pos:start="93:16" pos:end="93:56">(<expr pos:start="93:17" pos:end="93:55"><operator pos:start="93:17" pos:end="93:17">(</operator><name pos:start="93:18" pos:end="93:20">ret</name> <operator pos:start="93:22" pos:end="93:22">=</operator> <call pos:start="93:24" pos:end="93:50"><name pos:start="93:24" pos:end="93:41">wav_parse_bext_tag</name><argument_list pos:start="93:42" pos:end="93:50">(<argument pos:start="93:43" pos:end="93:43"><expr pos:start="93:43" pos:end="93:43"><name pos:start="93:43" pos:end="93:43">s</name></expr></argument>, <argument pos:start="93:46" pos:end="93:49"><expr pos:start="93:46" pos:end="93:49"><name pos:start="93:46" pos:end="93:49">size</name></expr></argument>)</argument_list></call><operator pos:start="93:51" pos:end="93:51">)</operator> <operator pos:start="93:53" pos:end="93:53">&lt;</operator> <literal type="number" pos:start="93:55" pos:end="93:55">0</literal></expr>)</condition><block type="pseudo" pos:start="94:17" pos:end="94:27"><block_content pos:start="94:17" pos:end="94:27">
                <return pos:start="94:17" pos:end="94:27">return <expr pos:start="94:24" pos:end="94:26"><name pos:start="94:24" pos:end="94:26">ret</name></expr>;</return></block_content></block></if></if_stmt>
            <break pos:start="95:13" pos:end="95:18">break;</break>
        <case pos:start="96:9" pos:end="96:36">case <expr pos:start="96:14" pos:end="96:35"><call pos:start="96:14" pos:end="96:35"><name pos:start="96:14" pos:end="96:18">MKTAG</name><argument_list pos:start="96:19" pos:end="96:35">(<argument pos:start="96:20" pos:end="96:22"><expr pos:start="96:20" pos:end="96:22"><literal type="char" pos:start="96:20" pos:end="96:22">'S'</literal></expr></argument>,<argument pos:start="96:24" pos:end="96:26"><expr pos:start="96:24" pos:end="96:26"><literal type="char" pos:start="96:24" pos:end="96:26">'M'</literal></expr></argument>,<argument pos:start="96:28" pos:end="96:30"><expr pos:start="96:28" pos:end="96:30"><literal type="char" pos:start="96:28" pos:end="96:30">'V'</literal></expr></argument>,<argument pos:start="96:32" pos:end="96:34"><expr pos:start="96:32" pos:end="96:34"><literal type="char" pos:start="96:32" pos:end="96:34">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
            <if_stmt pos:start="97:13" pos:end="166:13"><if pos:start="97:13" pos:end="166:13">if <condition pos:start="97:16" pos:end="97:25">(<expr pos:start="97:17" pos:end="97:24"><operator pos:start="97:17" pos:end="97:17">!</operator><name pos:start="97:18" pos:end="97:24">got_fmt</name></expr>)</condition> <block pos:start="97:27" pos:end="166:13">{<block_content pos:start="98:17" pos:end="166:13">
                <expr_stmt pos:start="98:17" pos:end="98:87"><expr pos:start="98:17" pos:end="98:86"><call pos:start="98:17" pos:end="98:86"><name pos:start="98:17" pos:end="98:22">av_log</name><argument_list pos:start="98:23" pos:end="98:86">(<argument pos:start="98:24" pos:end="98:24"><expr pos:start="98:24" pos:end="98:24"><name pos:start="98:24" pos:end="98:24">s</name></expr></argument>, <argument pos:start="98:27" pos:end="98:38"><expr pos:start="98:27" pos:end="98:38"><name pos:start="98:27" pos:end="98:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="98:41" pos:end="98:85"><expr pos:start="98:41" pos:end="98:85"><literal type="string" pos:start="98:41" pos:end="98:85">"found no 'fmt ' tag before the 'SMV0' tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="99:17" pos:end="99:43">return <expr pos:start="99:24" pos:end="99:42"><name pos:start="99:24" pos:end="99:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <comment type="line" pos:start="100:13" pos:end="100:56">// SMV file, a wav file with video appended.</comment>
            <if_stmt pos:start="101:13" pos:end="166:13"><if pos:start="101:13" pos:end="166:13">if <condition pos:start="101:16" pos:end="101:47">(<expr pos:start="101:17" pos:end="101:46"><name pos:start="101:17" pos:end="101:20">size</name> <operator pos:start="101:22" pos:end="101:23">!=</operator> <call pos:start="101:25" pos:end="101:46"><name pos:start="101:25" pos:end="101:29">MKTAG</name><argument_list pos:start="101:30" pos:end="101:46">(<argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><literal type="char" pos:start="101:31" pos:end="101:33">'0'</literal></expr></argument>,<argument pos:start="101:35" pos:end="101:37"><expr pos:start="101:35" pos:end="101:37"><literal type="char" pos:start="101:35" pos:end="101:37">'2'</literal></expr></argument>,<argument pos:start="101:39" pos:end="101:41"><expr pos:start="101:39" pos:end="101:41"><literal type="char" pos:start="101:39" pos:end="101:41">'0'</literal></expr></argument>,<argument pos:start="101:43" pos:end="101:45"><expr pos:start="101:43" pos:end="101:45"><literal type="char" pos:start="101:43" pos:end="101:45">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:49" pos:end="166:13">{<block_content pos:start="102:17" pos:end="166:13">
                <expr_stmt pos:start="102:17" pos:end="102:71"><expr pos:start="102:17" pos:end="102:70"><call pos:start="102:17" pos:end="102:70"><name pos:start="102:17" pos:end="102:22">av_log</name><argument_list pos:start="102:23" pos:end="102:70">(<argument pos:start="102:24" pos:end="102:24"><expr pos:start="102:24" pos:end="102:24"><name pos:start="102:24" pos:end="102:24">s</name></expr></argument>, <argument pos:start="102:27" pos:end="102:38"><expr pos:start="102:27" pos:end="102:38"><name pos:start="102:27" pos:end="102:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="102:41" pos:end="102:69"><expr pos:start="102:41" pos:end="102:69"><literal type="string" pos:start="102:41" pos:end="102:69">"Unknown SMV version found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="103:17" pos:end="103:32">goto <name pos:start="103:22" pos:end="103:31">break_loop</name>;</goto>
            <expr_stmt pos:start="104:13" pos:end="104:56"><expr pos:start="104:13" pos:end="104:55"><call pos:start="104:13" pos:end="104:55"><name pos:start="104:13" pos:end="104:18">av_log</name><argument_list pos:start="104:19" pos:end="104:55">(<argument pos:start="104:20" pos:end="104:20"><expr pos:start="104:20" pos:end="104:20"><name pos:start="104:20" pos:end="104:20">s</name></expr></argument>, <argument pos:start="104:23" pos:end="104:34"><expr pos:start="104:23" pos:end="104:34"><name pos:start="104:23" pos:end="104:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="104:37" pos:end="104:54"><expr pos:start="104:37" pos:end="104:54"><literal type="string" pos:start="104:37" pos:end="104:54">"Found SMV data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="105:13" pos:end="105:37"><expr pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:32"><name pos:start="105:13" pos:end="105:15">wav</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:32">smv_given_first</name></name> <operator pos:start="105:34" pos:end="105:34">=</operator> <literal type="number" pos:start="105:36" pos:end="105:36">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="106:13" pos:end="106:47"><expr pos:start="106:13" pos:end="106:46"><name pos:start="106:13" pos:end="106:15">vst</name> <operator pos:start="106:17" pos:end="106:17">=</operator> <call pos:start="106:19" pos:end="106:46"><name pos:start="106:19" pos:end="106:37">avformat_new_stream</name><argument_list pos:start="106:38" pos:end="106:46">(<argument pos:start="106:39" pos:end="106:39"><expr pos:start="106:39" pos:end="106:39"><name pos:start="106:39" pos:end="106:39">s</name></expr></argument>, <argument pos:start="106:42" pos:end="106:45"><expr pos:start="106:42" pos:end="106:45"><name pos:start="106:42" pos:end="106:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="107:13" pos:end="108:39"><if pos:start="107:13" pos:end="108:39">if <condition pos:start="107:16" pos:end="107:21">(<expr pos:start="107:17" pos:end="107:20"><operator pos:start="107:17" pos:end="107:17">!</operator><name pos:start="107:18" pos:end="107:20">vst</name></expr>)</condition><block type="pseudo" pos:start="108:17" pos:end="108:39"><block_content pos:start="108:17" pos:end="108:39">
                <return pos:start="108:17" pos:end="108:39">return <expr pos:start="108:24" pos:end="108:38"><call pos:start="108:24" pos:end="108:38"><name pos:start="108:24" pos:end="108:30">AVERROR</name><argument_list pos:start="108:31" pos:end="108:38">(<argument pos:start="108:32" pos:end="108:37"><expr pos:start="108:32" pos:end="108:37"><name pos:start="108:32" pos:end="108:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt pos:start="109:13" pos:end="109:24"><expr pos:start="109:13" pos:end="109:23"><call pos:start="109:13" pos:end="109:23"><name pos:start="109:13" pos:end="109:19">avio_r8</name><argument_list pos:start="109:20" pos:end="109:23">(<argument pos:start="109:21" pos:end="109:22"><expr pos:start="109:21" pos:end="109:22"><name pos:start="109:21" pos:end="109:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="110:13" pos:end="110:24"><expr pos:start="110:13" pos:end="110:23"><name pos:start="110:13" pos:end="110:19"><name pos:start="110:13" pos:end="110:15">vst</name><operator pos:start="110:16" pos:end="110:17">-&gt;</operator><name pos:start="110:18" pos:end="110:19">id</name></name> <operator pos:start="110:21" pos:end="110:21">=</operator> <literal type="number" pos:start="110:23" pos:end="110:23">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="111:13" pos:end="111:56"><expr pos:start="111:13" pos:end="111:55"><name pos:start="111:13" pos:end="111:34"><name pos:start="111:13" pos:end="111:15">vst</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:22">codec</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:34">codec_type</name></name> <operator pos:start="111:36" pos:end="111:36">=</operator> <name pos:start="111:38" pos:end="111:55">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
            <expr_stmt pos:start="112:13" pos:end="112:55"><expr pos:start="112:13" pos:end="112:54"><name pos:start="112:13" pos:end="112:32"><name pos:start="112:13" pos:end="112:15">vst</name><operator pos:start="112:16" pos:end="112:17">-&gt;</operator><name pos:start="112:18" pos:end="112:22">codec</name><operator pos:start="112:23" pos:end="112:24">-&gt;</operator><name pos:start="112:25" pos:end="112:32">codec_id</name></name> <operator pos:start="112:34" pos:end="112:34">=</operator> <name pos:start="112:36" pos:end="112:54">AV_CODEC_ID_SMVJPEG</name></expr>;</expr_stmt>
            <expr_stmt pos:start="113:13" pos:end="113:47"><expr pos:start="113:13" pos:end="113:46"><name pos:start="113:13" pos:end="113:29"><name pos:start="113:13" pos:end="113:15">vst</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:22">codec</name><operator pos:start="113:23" pos:end="113:24">-&gt;</operator><name pos:start="113:25" pos:end="113:29">width</name></name>  <operator pos:start="113:32" pos:end="113:32">=</operator> <call pos:start="113:34" pos:end="113:46"><name pos:start="113:34" pos:end="113:42">avio_rl24</name><argument_list pos:start="113:43" pos:end="113:46">(<argument pos:start="113:44" pos:end="113:45"><expr pos:start="113:44" pos:end="113:45"><name pos:start="113:44" pos:end="113:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="114:13" pos:end="114:47"><expr pos:start="114:13" pos:end="114:46"><name pos:start="114:13" pos:end="114:30"><name pos:start="114:13" pos:end="114:15">vst</name><operator pos:start="114:16" pos:end="114:17">-&gt;</operator><name pos:start="114:18" pos:end="114:22">codec</name><operator pos:start="114:23" pos:end="114:24">-&gt;</operator><name pos:start="114:25" pos:end="114:30">height</name></name> <operator pos:start="114:32" pos:end="114:32">=</operator> <call pos:start="114:34" pos:end="114:46"><name pos:start="114:34" pos:end="114:42">avio_rl24</name><argument_list pos:start="114:43" pos:end="114:46">(<argument pos:start="114:44" pos:end="114:45"><expr pos:start="114:44" pos:end="114:45"><name pos:start="114:44" pos:end="114:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="115:13" pos:end="166:13"><if pos:start="115:13" pos:end="166:13">if <condition pos:start="115:16" pos:end="115:50">(<expr pos:start="115:17" pos:end="115:49"><call pos:start="115:17" pos:end="115:49"><name pos:start="115:17" pos:end="115:34">ff_alloc_extradata</name><argument_list pos:start="115:35" pos:end="115:49">(<argument pos:start="115:36" pos:end="115:45"><expr pos:start="115:36" pos:end="115:45"><name pos:start="115:36" pos:end="115:45"><name pos:start="115:36" pos:end="115:38">vst</name><operator pos:start="115:39" pos:end="115:40">-&gt;</operator><name pos:start="115:41" pos:end="115:45">codec</name></name></expr></argument>, <argument pos:start="115:48" pos:end="115:48"><expr pos:start="115:48" pos:end="115:48"><literal type="number" pos:start="115:48" pos:end="115:48">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:52" pos:end="166:13">{<block_content pos:start="116:17" pos:end="166:13">
                <expr_stmt pos:start="116:17" pos:end="116:75"><expr pos:start="116:17" pos:end="116:74"><call pos:start="116:17" pos:end="116:74"><name pos:start="116:17" pos:end="116:22">av_log</name><argument_list pos:start="116:23" pos:end="116:74">(<argument pos:start="116:24" pos:end="116:24"><expr pos:start="116:24" pos:end="116:24"><name pos:start="116:24" pos:end="116:24">s</name></expr></argument>, <argument pos:start="116:27" pos:end="116:38"><expr pos:start="116:27" pos:end="116:38"><name pos:start="116:27" pos:end="116:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="116:41" pos:end="116:73"><expr pos:start="116:41" pos:end="116:73"><literal type="string" pos:start="116:41" pos:end="116:73">"Could not allocate extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="117:17" pos:end="117:39">return <expr pos:start="117:24" pos:end="117:38"><call pos:start="117:24" pos:end="117:38"><name pos:start="117:24" pos:end="117:30">AVERROR</name><argument_list pos:start="117:31" pos:end="117:38">(<argument pos:start="117:32" pos:end="117:37"><expr pos:start="117:32" pos:end="117:37"><name pos:start="117:32" pos:end="117:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
            <expr_stmt pos:start="118:13" pos:end="118:33"><expr pos:start="118:13" pos:end="118:32"><name pos:start="118:13" pos:end="118:16">size</name> <operator pos:start="118:18" pos:end="118:18">=</operator> <call pos:start="118:20" pos:end="118:32"><name pos:start="118:20" pos:end="118:28">avio_rl24</name><argument_list pos:start="118:29" pos:end="118:32">(<argument pos:start="118:30" pos:end="118:31"><expr pos:start="118:30" pos:end="118:31"><name pos:start="118:30" pos:end="118:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="119:13" pos:end="119:63"><expr pos:start="119:13" pos:end="119:62"><name pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:15">wav</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:29">smv_data_ofs</name></name> <operator pos:start="119:31" pos:end="119:31">=</operator> <call pos:start="119:33" pos:end="119:45"><name pos:start="119:33" pos:end="119:41">avio_tell</name><argument_list pos:start="119:42" pos:end="119:45">(<argument pos:start="119:43" pos:end="119:44"><expr pos:start="119:43" pos:end="119:44"><name pos:start="119:43" pos:end="119:44">pb</name></expr></argument>)</argument_list></call> <operator pos:start="119:47" pos:end="119:47">+</operator> <operator pos:start="119:49" pos:end="119:49">(</operator><name pos:start="119:50" pos:end="119:53">size</name> <operator pos:start="119:55" pos:end="119:55">-</operator> <literal type="number" pos:start="119:57" pos:end="119:57">5</literal><operator pos:start="119:58" pos:end="119:58">)</operator> <operator pos:start="119:60" pos:end="119:60">*</operator> <literal type="number" pos:start="119:62" pos:end="119:62">3</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="120:13" pos:end="120:26"><expr pos:start="120:13" pos:end="120:25"><call pos:start="120:13" pos:end="120:25"><name pos:start="120:13" pos:end="120:21">avio_rl24</name><argument_list pos:start="120:22" pos:end="120:25">(<argument pos:start="120:23" pos:end="120:24"><expr pos:start="120:23" pos:end="120:24"><name pos:start="120:23" pos:end="120:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="121:13" pos:end="121:48"><expr pos:start="121:13" pos:end="121:47"><name pos:start="121:13" pos:end="121:31"><name pos:start="121:13" pos:end="121:15">wav</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:31">smv_block_size</name></name> <operator pos:start="121:33" pos:end="121:33">=</operator> <call pos:start="121:35" pos:end="121:47"><name pos:start="121:35" pos:end="121:43">avio_rl24</name><argument_list pos:start="121:44" pos:end="121:47">(<argument pos:start="121:45" pos:end="121:46"><expr pos:start="121:45" pos:end="121:46"><name pos:start="121:45" pos:end="121:46">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="122:13" pos:end="122:59"><expr pos:start="122:13" pos:end="122:58"><call pos:start="122:13" pos:end="122:58"><name pos:start="122:13" pos:end="122:31">avpriv_set_pts_info</name><argument_list pos:start="122:32" pos:end="122:58">(<argument pos:start="122:33" pos:end="122:35"><expr pos:start="122:33" pos:end="122:35"><name pos:start="122:33" pos:end="122:35">vst</name></expr></argument>, <argument pos:start="122:38" pos:end="122:39"><expr pos:start="122:38" pos:end="122:39"><literal type="number" pos:start="122:38" pos:end="122:39">32</literal></expr></argument>, <argument pos:start="122:42" pos:end="122:42"><expr pos:start="122:42" pos:end="122:42"><literal type="number" pos:start="122:42" pos:end="122:42">1</literal></expr></argument>, <argument pos:start="122:45" pos:end="122:57"><expr pos:start="122:45" pos:end="122:57"><call pos:start="122:45" pos:end="122:57"><name pos:start="122:45" pos:end="122:53">avio_rl24</name><argument_list pos:start="122:54" pos:end="122:57">(<argument pos:start="122:55" pos:end="122:56"><expr pos:start="122:55" pos:end="122:56"><name pos:start="122:55" pos:end="122:56">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="123:13" pos:end="123:42"><expr pos:start="123:13" pos:end="123:41"><name pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:15">vst</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:25">duration</name></name> <operator pos:start="123:27" pos:end="123:27">=</operator> <call pos:start="123:29" pos:end="123:41"><name pos:start="123:29" pos:end="123:37">avio_rl24</name><argument_list pos:start="123:38" pos:end="123:41">(<argument pos:start="123:39" pos:end="123:40"><expr pos:start="123:39" pos:end="123:40"><name pos:start="123:39" pos:end="123:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="124:13" pos:end="124:26"><expr pos:start="124:13" pos:end="124:25"><call pos:start="124:13" pos:end="124:25"><name pos:start="124:13" pos:end="124:21">avio_rl24</name><argument_list pos:start="124:22" pos:end="124:25">(<argument pos:start="124:23" pos:end="124:24"><expr pos:start="124:23" pos:end="124:24"><name pos:start="124:23" pos:end="124:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="125:13" pos:end="125:26"><expr pos:start="125:13" pos:end="125:25"><call pos:start="125:13" pos:end="125:25"><name pos:start="125:13" pos:end="125:21">avio_rl24</name><argument_list pos:start="125:22" pos:end="125:25">(<argument pos:start="125:23" pos:end="125:24"><expr pos:start="125:23" pos:end="125:24"><name pos:start="125:23" pos:end="125:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="126:13" pos:end="126:53"><expr pos:start="126:13" pos:end="126:52"><name pos:start="126:13" pos:end="126:36"><name pos:start="126:13" pos:end="126:15">wav</name><operator pos:start="126:16" pos:end="126:17">-&gt;</operator><name pos:start="126:18" pos:end="126:36">smv_frames_per_jpeg</name></name> <operator pos:start="126:38" pos:end="126:38">=</operator> <call pos:start="126:40" pos:end="126:52"><name pos:start="126:40" pos:end="126:48">avio_rl24</name><argument_list pos:start="126:49" pos:end="126:52">(<argument pos:start="126:50" pos:end="126:51"><expr pos:start="126:50" pos:end="126:51"><name pos:start="126:50" pos:end="126:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="127:13" pos:end="166:13"><if pos:start="127:13" pos:end="166:13">if <condition pos:start="127:16" pos:end="127:49">(<expr pos:start="127:17" pos:end="127:48"><name pos:start="127:17" pos:end="127:40"><name pos:start="127:17" pos:end="127:19">wav</name><operator pos:start="127:20" pos:end="127:21">-&gt;</operator><name pos:start="127:22" pos:end="127:40">smv_frames_per_jpeg</name></name> <operator pos:start="127:42" pos:end="127:42">&gt;</operator> <literal type="number" pos:start="127:44" pos:end="127:48">65536</literal></expr>)</condition> <block pos:start="127:51" pos:end="166:13">{<block_content pos:start="128:17" pos:end="166:13">
                <expr_stmt pos:start="128:17" pos:end="128:70"><expr pos:start="128:17" pos:end="128:69"><call pos:start="128:17" pos:end="128:69"><name pos:start="128:17" pos:end="128:22">av_log</name><argument_list pos:start="128:23" pos:end="128:69">(<argument pos:start="128:24" pos:end="128:24"><expr pos:start="128:24" pos:end="128:24"><name pos:start="128:24" pos:end="128:24">s</name></expr></argument>, <argument pos:start="128:27" pos:end="128:38"><expr pos:start="128:27" pos:end="128:38"><name pos:start="128:27" pos:end="128:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="128:41" pos:end="128:68"><expr pos:start="128:41" pos:end="128:68"><literal type="string" pos:start="128:41" pos:end="128:68">"too many frames per jpeg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="129:17" pos:end="129:43">return <expr pos:start="129:24" pos:end="129:42"><name pos:start="129:24" pos:end="129:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <expr_stmt pos:start="130:13" pos:end="130:69"><expr pos:start="130:13" pos:end="130:68"><call pos:start="130:13" pos:end="130:68"><name pos:start="130:13" pos:end="130:19">AV_WL32</name><argument_list pos:start="130:20" pos:end="130:68">(<argument pos:start="130:21" pos:end="130:41"><expr pos:start="130:21" pos:end="130:41"><name pos:start="130:21" pos:end="130:41"><name pos:start="130:21" pos:end="130:23">vst</name><operator pos:start="130:24" pos:end="130:25">-&gt;</operator><name pos:start="130:26" pos:end="130:30">codec</name><operator pos:start="130:31" pos:end="130:32">-&gt;</operator><name pos:start="130:33" pos:end="130:41">extradata</name></name></expr></argument>, <argument pos:start="130:44" pos:end="130:67"><expr pos:start="130:44" pos:end="130:67"><name pos:start="130:44" pos:end="130:67"><name pos:start="130:44" pos:end="130:46">wav</name><operator pos:start="130:47" pos:end="130:48">-&gt;</operator><name pos:start="130:49" pos:end="130:67">smv_frames_per_jpeg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="131:13" pos:end="131:32"><expr pos:start="131:13" pos:end="131:31"><name pos:start="131:13" pos:end="131:27"><name pos:start="131:13" pos:end="131:15">wav</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:27">smv_cur_pt</name></name> <operator pos:start="131:29" pos:end="131:29">=</operator> <literal type="number" pos:start="131:31" pos:end="131:31">0</literal></expr>;</expr_stmt>
            <goto pos:start="132:13" pos:end="132:28">goto <name pos:start="132:18" pos:end="132:27">break_loop</name>;</goto>
        <case pos:start="133:9" pos:end="133:39">case <expr pos:start="133:14" pos:end="133:38"><call pos:start="133:14" pos:end="133:38"><name pos:start="133:14" pos:end="133:18">MKTAG</name><argument_list pos:start="133:19" pos:end="133:38">(<argument pos:start="133:20" pos:end="133:22"><expr pos:start="133:20" pos:end="133:22"><literal type="char" pos:start="133:20" pos:end="133:22">'L'</literal></expr></argument>, <argument pos:start="133:25" pos:end="133:27"><expr pos:start="133:25" pos:end="133:27"><literal type="char" pos:start="133:25" pos:end="133:27">'I'</literal></expr></argument>, <argument pos:start="133:30" pos:end="133:32"><expr pos:start="133:30" pos:end="133:32"><literal type="char" pos:start="133:30" pos:end="133:32">'S'</literal></expr></argument>, <argument pos:start="133:35" pos:end="133:37"><expr pos:start="133:35" pos:end="133:37"><literal type="char" pos:start="133:35" pos:end="133:37">'T'</literal></expr></argument>)</argument_list></call></expr>:</case>
            <if_stmt pos:start="134:13" pos:end="166:13"><if pos:start="134:13" pos:end="166:13">if <condition pos:start="134:16" pos:end="134:25">(<expr pos:start="134:17" pos:end="134:24"><name pos:start="134:17" pos:end="134:20">size</name> <operator pos:start="134:22" pos:end="134:22">&lt;</operator> <literal type="number" pos:start="134:24" pos:end="134:24">4</literal></expr>)</condition> <block pos:start="134:27" pos:end="166:13">{<block_content pos:start="135:17" pos:end="166:13">
                <expr_stmt pos:start="135:17" pos:end="135:64"><expr pos:start="135:17" pos:end="135:63"><call pos:start="135:17" pos:end="135:63"><name pos:start="135:17" pos:end="135:22">av_log</name><argument_list pos:start="135:23" pos:end="135:63">(<argument pos:start="135:24" pos:end="135:24"><expr pos:start="135:24" pos:end="135:24"><name pos:start="135:24" pos:end="135:24">s</name></expr></argument>, <argument pos:start="135:27" pos:end="135:38"><expr pos:start="135:27" pos:end="135:38"><name pos:start="135:27" pos:end="135:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:41" pos:end="135:62"><expr pos:start="135:41" pos:end="135:62"><literal type="string" pos:start="135:41" pos:end="135:62">"too short LIST tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="136:17" pos:end="136:43">return <expr pos:start="136:24" pos:end="136:42"><name pos:start="136:24" pos:end="136:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <switch pos:start="137:13" pos:end="166:13">switch <condition pos:start="137:20" pos:end="137:34">(<expr pos:start="137:21" pos:end="137:33"><call pos:start="137:21" pos:end="137:33"><name pos:start="137:21" pos:end="137:29">avio_rl32</name><argument_list pos:start="137:30" pos:end="137:33">(<argument pos:start="137:31" pos:end="137:32"><expr pos:start="137:31" pos:end="137:32"><name pos:start="137:31" pos:end="137:32">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:36" pos:end="166:13">{<block_content pos:start="138:13" pos:end="166:13">
            <case pos:start="138:13" pos:end="138:43">case <expr pos:start="138:18" pos:end="138:42"><call pos:start="138:18" pos:end="138:42"><name pos:start="138:18" pos:end="138:22">MKTAG</name><argument_list pos:start="138:23" pos:end="138:42">(<argument pos:start="138:24" pos:end="138:26"><expr pos:start="138:24" pos:end="138:26"><literal type="char" pos:start="138:24" pos:end="138:26">'I'</literal></expr></argument>, <argument pos:start="138:29" pos:end="138:31"><expr pos:start="138:29" pos:end="138:31"><literal type="char" pos:start="138:29" pos:end="138:31">'N'</literal></expr></argument>, <argument pos:start="138:34" pos:end="138:36"><expr pos:start="138:34" pos:end="138:36"><literal type="char" pos:start="138:34" pos:end="138:36">'F'</literal></expr></argument>, <argument pos:start="138:39" pos:end="138:41"><expr pos:start="138:39" pos:end="138:41"><literal type="char" pos:start="138:39" pos:end="138:41">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>
                <expr_stmt pos:start="139:17" pos:end="139:47"><expr pos:start="139:17" pos:end="139:46"><call pos:start="139:17" pos:end="139:46"><name pos:start="139:17" pos:end="139:33">ff_read_riff_info</name><argument_list pos:start="139:34" pos:end="139:46">(<argument pos:start="139:35" pos:end="139:35"><expr pos:start="139:35" pos:end="139:35"><name pos:start="139:35" pos:end="139:35">s</name></expr></argument>, <argument pos:start="139:38" pos:end="139:45"><expr pos:start="139:38" pos:end="139:45"><name pos:start="139:38" pos:end="139:41">size</name> <operator pos:start="139:43" pos:end="139:43">-</operator> <literal type="number" pos:start="139:45" pos:end="139:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="140:13" pos:end="140:18">break;</break>
        <comment type="block" pos:start="141:9" pos:end="141:69">/* seek to next tag unless we know that we'll run into EOF */</comment>
        <if_stmt pos:start="142:9" pos:end="166:13"><if pos:start="142:9" pos:end="166:13">if <condition pos:start="142:12" pos:end="143:62">(<expr pos:start="142:13" pos:end="143:61"><operator pos:start="142:13" pos:end="142:13">(</operator><call pos:start="142:14" pos:end="142:26"><name pos:start="142:14" pos:end="142:22">avio_size</name><argument_list pos:start="142:23" pos:end="142:26">(<argument pos:start="142:24" pos:end="142:25"><expr pos:start="142:24" pos:end="142:25"><name pos:start="142:24" pos:end="142:25">pb</name></expr></argument>)</argument_list></call> <operator pos:start="142:28" pos:end="142:28">&gt;</operator> <literal type="number" pos:start="142:30" pos:end="142:30">0</literal> <operator pos:start="142:32" pos:end="142:33">&amp;&amp;</operator> <name pos:start="142:35" pos:end="142:46">next_tag_ofs</name> <operator pos:start="142:48" pos:end="142:49">&gt;=</operator> <call pos:start="142:51" pos:end="142:63"><name pos:start="142:51" pos:end="142:59">avio_size</name><argument_list pos:start="142:60" pos:end="142:63">(<argument pos:start="142:61" pos:end="142:62"><expr pos:start="142:61" pos:end="142:62"><name pos:start="142:61" pos:end="142:62">pb</name></expr></argument>)</argument_list></call><operator pos:start="142:64" pos:end="142:64">)</operator> <operator pos:start="142:66" pos:end="142:67">||</operator>
            <call pos:start="143:13" pos:end="143:57"><name pos:start="143:13" pos:end="143:24">wav_seek_tag</name><argument_list pos:start="143:25" pos:end="143:57">(<argument pos:start="143:26" pos:end="143:28"><expr pos:start="143:26" pos:end="143:28"><name pos:start="143:26" pos:end="143:28">wav</name></expr></argument>, <argument pos:start="143:31" pos:end="143:32"><expr pos:start="143:31" pos:end="143:32"><name pos:start="143:31" pos:end="143:32">pb</name></expr></argument>, <argument pos:start="143:35" pos:end="143:46"><expr pos:start="143:35" pos:end="143:46"><name pos:start="143:35" pos:end="143:46">next_tag_ofs</name></expr></argument>, <argument pos:start="143:49" pos:end="143:56"><expr pos:start="143:49" pos:end="143:56"><name pos:start="143:49" pos:end="143:56">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="143:59" pos:end="143:59">&lt;</operator> <literal type="number" pos:start="143:61" pos:end="143:61">0</literal></expr>)</condition> <block pos:start="143:64" pos:end="166:13">{<block_content pos:start="144:13" pos:end="166:13">
            <break pos:start="144:13" pos:end="144:18">break;</break>
<label pos:start="145:1" pos:end="145:11"><name pos:start="145:1" pos:end="145:10">break_loop</name>:</label>
    <if_stmt pos:start="146:5" pos:end="166:13"><if pos:start="146:5" pos:end="166:13">if <condition pos:start="146:8" pos:end="146:21">(<expr pos:start="146:9" pos:end="146:20"><name pos:start="146:9" pos:end="146:16">data_ofs</name> <operator pos:start="146:18" pos:end="146:18">&lt;</operator> <literal type="number" pos:start="146:20" pos:end="146:20">0</literal></expr>)</condition> <block pos:start="146:23" pos:end="166:13">{<block_content pos:start="147:9" pos:end="166:13">
        <expr_stmt pos:start="147:9" pos:end="147:57"><expr pos:start="147:9" pos:end="147:56"><call pos:start="147:9" pos:end="147:56"><name pos:start="147:9" pos:end="147:14">av_log</name><argument_list pos:start="147:15" pos:end="147:56">(<argument pos:start="147:16" pos:end="147:16"><expr pos:start="147:16" pos:end="147:16"><name pos:start="147:16" pos:end="147:16">s</name></expr></argument>, <argument pos:start="147:19" pos:end="147:30"><expr pos:start="147:19" pos:end="147:30"><name pos:start="147:19" pos:end="147:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:33" pos:end="147:55"><expr pos:start="147:33" pos:end="147:55"><literal type="string" pos:start="147:33" pos:end="147:55">"no 'data' tag found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="148:9" pos:end="148:35">return <expr pos:start="148:16" pos:end="148:34"><name pos:start="148:16" pos:end="148:34">AVERROR_INVALIDDATA</name></expr>;</return>
    <expr_stmt pos:start="149:5" pos:end="149:38"><expr pos:start="149:5" pos:end="149:37"><call pos:start="149:5" pos:end="149:37"><name pos:start="149:5" pos:end="149:13">avio_seek</name><argument_list pos:start="149:14" pos:end="149:37">(<argument pos:start="149:15" pos:end="149:16"><expr pos:start="149:15" pos:end="149:16"><name pos:start="149:15" pos:end="149:16">pb</name></expr></argument>, <argument pos:start="149:19" pos:end="149:26"><expr pos:start="149:19" pos:end="149:26"><name pos:start="149:19" pos:end="149:26">data_ofs</name></expr></argument>, <argument pos:start="149:29" pos:end="149:36"><expr pos:start="149:29" pos:end="149:36"><name pos:start="149:29" pos:end="149:36">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="150:5" pos:end="166:13"><if pos:start="150:5" pos:end="166:13">if <condition pos:start="150:8" pos:end="151:100">(   <expr pos:start="150:12" pos:end="151:99"><name pos:start="150:12" pos:end="150:20">data_size</name> <operator pos:start="150:22" pos:end="150:22">&gt;</operator> <literal type="number" pos:start="150:24" pos:end="150:24">0</literal> <operator pos:start="150:26" pos:end="150:27">&amp;&amp;</operator> <name pos:start="150:29" pos:end="150:40">sample_count</name> <operator pos:start="150:42" pos:end="150:43">&amp;&amp;</operator> <name pos:start="150:45" pos:end="150:63"><name pos:start="150:45" pos:end="150:46">st</name><operator pos:start="150:47" pos:end="150:48">-&gt;</operator><name pos:start="150:49" pos:end="150:53">codec</name><operator pos:start="150:54" pos:end="150:55">-&gt;</operator><name pos:start="150:56" pos:end="150:63">channels</name></name>
        <operator pos:start="151:9" pos:end="151:10">&amp;&amp;</operator> <operator pos:start="151:12" pos:end="151:12">(</operator><name pos:start="151:13" pos:end="151:21">data_size</name> <operator pos:start="151:23" pos:end="151:24">&lt;&lt;</operator> <literal type="number" pos:start="151:26" pos:end="151:26">3</literal><operator pos:start="151:27" pos:end="151:27">)</operator> <operator pos:start="151:29" pos:end="151:29">/</operator> <name pos:start="151:31" pos:end="151:42">sample_count</name> <operator pos:start="151:44" pos:end="151:44">/</operator> <name pos:start="151:46" pos:end="151:64"><name pos:start="151:46" pos:end="151:47">st</name><operator pos:start="151:48" pos:end="151:49">-&gt;</operator><name pos:start="151:50" pos:end="151:54">codec</name><operator pos:start="151:55" pos:end="151:56">-&gt;</operator><name pos:start="151:57" pos:end="151:64">channels</name></name> <operator pos:start="151:66" pos:end="151:66">&gt;</operator> <name pos:start="151:68" pos:end="151:99"><name pos:start="151:68" pos:end="151:69">st</name><operator pos:start="151:70" pos:end="151:71">-&gt;</operator><name pos:start="151:72" pos:end="151:76">codec</name><operator pos:start="151:77" pos:end="151:78">-&gt;</operator><name pos:start="151:79" pos:end="151:99">bits_per_coded_sample</name></name></expr>)</condition> <block pos:start="151:102" pos:end="166:13">{<block_content pos:start="152:9" pos:end="166:13">
        <expr_stmt pos:start="152:9" pos:end="152:91"><expr pos:start="152:9" pos:end="152:90"><call pos:start="152:9" pos:end="152:90"><name pos:start="152:9" pos:end="152:14">av_log</name><argument_list pos:start="152:15" pos:end="152:90">(<argument pos:start="152:16" pos:end="152:16"><expr pos:start="152:16" pos:end="152:16"><name pos:start="152:16" pos:end="152:16">s</name></expr></argument>, <argument pos:start="152:19" pos:end="152:32"><expr pos:start="152:19" pos:end="152:32"><name pos:start="152:19" pos:end="152:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="152:35" pos:end="152:75"><expr pos:start="152:35" pos:end="152:75"><literal type="string" pos:start="152:35" pos:end="152:65">"ignoring wrong sample_count %"</literal><name pos:start="152:66" pos:end="152:71">PRId64</name><literal type="string" pos:start="152:72" pos:end="152:75">"\n"</literal></expr></argument>, <argument pos:start="152:78" pos:end="152:89"><expr pos:start="152:78" pos:end="152:89"><name pos:start="152:78" pos:end="152:89">sample_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="153:9" pos:end="153:25"><expr pos:start="153:9" pos:end="153:24"><name pos:start="153:9" pos:end="153:20">sample_count</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <literal type="number" pos:start="153:24" pos:end="153:24">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="154:5" pos:end="161:94"><if pos:start="154:5" pos:end="161:94">if <condition pos:start="154:8" pos:end="154:79">(<expr pos:start="154:9" pos:end="154:78"><operator pos:start="154:9" pos:end="154:9">!</operator><name pos:start="154:10" pos:end="154:21">sample_count</name> <operator pos:start="154:23" pos:end="154:24">||</operator> <call pos:start="154:26" pos:end="154:74"><name pos:start="154:26" pos:end="154:53">av_get_exact_bits_per_sample</name><argument_list pos:start="154:54" pos:end="154:74">(<argument pos:start="154:55" pos:end="154:73"><expr pos:start="154:55" pos:end="154:73"><name pos:start="154:55" pos:end="154:73"><name pos:start="154:55" pos:end="154:56">st</name><operator pos:start="154:57" pos:end="154:58">-&gt;</operator><name pos:start="154:59" pos:end="154:63">codec</name><operator pos:start="154:64" pos:end="154:65">-&gt;</operator><name pos:start="154:66" pos:end="154:73">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="154:76" pos:end="154:76">&gt;</operator> <literal type="number" pos:start="154:78" pos:end="154:78">0</literal></expr>)</condition><block type="pseudo" pos:start="155:9" pos:end="161:94"><block_content pos:start="155:9" pos:end="161:94">
        <if_stmt pos:start="155:9" pos:end="161:94"><if pos:start="155:9" pos:end="161:94">if <condition pos:start="155:12" pos:end="158:46">(   <expr pos:start="155:16" pos:end="158:45"><name pos:start="155:16" pos:end="155:34"><name pos:start="155:16" pos:end="155:17">st</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:24">codec</name><operator pos:start="155:25" pos:end="155:26">-&gt;</operator><name pos:start="155:27" pos:end="155:34">channels</name></name>
            <operator pos:start="156:13" pos:end="156:14">&amp;&amp;</operator> <name pos:start="156:16" pos:end="156:24">data_size</name>
            <operator pos:start="157:13" pos:end="157:14">&amp;&amp;</operator> <call pos:start="157:16" pos:end="157:58"><name pos:start="157:16" pos:end="157:37">av_get_bits_per_sample</name><argument_list pos:start="157:38" pos:end="157:58">(<argument pos:start="157:39" pos:end="157:57"><expr pos:start="157:39" pos:end="157:57"><name pos:start="157:39" pos:end="157:57"><name pos:start="157:39" pos:end="157:40">st</name><operator pos:start="157:41" pos:end="157:42">-&gt;</operator><name pos:start="157:43" pos:end="157:47">codec</name><operator pos:start="157:48" pos:end="157:49">-&gt;</operator><name pos:start="157:50" pos:end="157:57">codec_id</name></name></expr></argument>)</argument_list></call>
            <operator pos:start="158:13" pos:end="158:14">&amp;&amp;</operator> <name pos:start="158:16" pos:end="158:28"><name pos:start="158:16" pos:end="158:18">wav</name><operator pos:start="158:19" pos:end="158:20">-&gt;</operator><name pos:start="158:21" pos:end="158:28">data_end</name></name> <operator pos:start="158:30" pos:end="158:31">&lt;=</operator> <call pos:start="158:33" pos:end="158:45"><name pos:start="158:33" pos:end="158:41">avio_size</name><argument_list pos:start="158:42" pos:end="158:45">(<argument pos:start="158:43" pos:end="158:44"><expr pos:start="158:43" pos:end="158:44"><name pos:start="158:43" pos:end="158:44">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="161:94"><block_content pos:start="159:13" pos:end="161:94">
            <expr_stmt pos:start="159:13" pos:end="161:94"><expr pos:start="159:13" pos:end="161:93"><name pos:start="159:13" pos:end="159:24">sample_count</name> <operator pos:start="159:26" pos:end="159:26">=</operator> <operator pos:start="159:28" pos:end="159:28">(</operator><name pos:start="159:29" pos:end="159:37">data_size</name> <operator pos:start="159:39" pos:end="159:40">&lt;&lt;</operator> <literal type="number" pos:start="159:42" pos:end="159:42">3</literal><operator pos:start="159:43" pos:end="159:43">)</operator>
                                  <operator pos:start="160:35" pos:end="160:35">/</operator>
                <operator pos:start="161:17" pos:end="161:17">(</operator><name pos:start="161:18" pos:end="161:36"><name pos:start="161:18" pos:end="161:19">st</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:26">codec</name><operator pos:start="161:27" pos:end="161:28">-&gt;</operator><name pos:start="161:29" pos:end="161:36">channels</name></name> <operator pos:start="161:38" pos:end="161:38">*</operator> <operator pos:start="161:40" pos:end="161:40">(</operator><name pos:start="161:41" pos:end="161:48">uint64_t</name><operator pos:start="161:49" pos:end="161:49">)</operator><call pos:start="161:50" pos:end="161:92"><name pos:start="161:50" pos:end="161:71">av_get_bits_per_sample</name><argument_list pos:start="161:72" pos:end="161:92">(<argument pos:start="161:73" pos:end="161:91"><expr pos:start="161:73" pos:end="161:91"><name pos:start="161:73" pos:end="161:91"><name pos:start="161:73" pos:end="161:74">st</name><operator pos:start="161:75" pos:end="161:76">-&gt;</operator><name pos:start="161:77" pos:end="161:81">codec</name><operator pos:start="161:82" pos:end="161:83">-&gt;</operator><name pos:start="161:84" pos:end="161:91">codec_id</name></name></expr></argument>)</argument_list></call><operator pos:start="161:93" pos:end="161:93">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="162:5" pos:end="163:36"><if pos:start="162:5" pos:end="163:36">if <condition pos:start="162:8" pos:end="162:21">(<expr pos:start="162:9" pos:end="162:20"><name pos:start="162:9" pos:end="162:20">sample_count</name></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="163:36"><block_content pos:start="163:9" pos:end="163:36">
        <expr_stmt pos:start="163:9" pos:end="163:36"><expr pos:start="163:9" pos:end="163:35"><name pos:start="163:9" pos:end="163:20"><name pos:start="163:9" pos:end="163:10">st</name><operator pos:start="163:11" pos:end="163:12">-&gt;</operator><name pos:start="163:13" pos:end="163:20">duration</name></name> <operator pos:start="163:22" pos:end="163:22">=</operator> <name pos:start="163:24" pos:end="163:35">sample_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="164:5" pos:end="164:53"><expr pos:start="164:5" pos:end="164:52"><call pos:start="164:5" pos:end="164:52"><name pos:start="164:5" pos:end="164:24">ff_metadata_conv_ctx</name><argument_list pos:start="164:25" pos:end="164:52">(<argument pos:start="164:26" pos:end="164:26"><expr pos:start="164:26" pos:end="164:26"><name pos:start="164:26" pos:end="164:26">s</name></expr></argument>, <argument pos:start="164:29" pos:end="164:32"><expr pos:start="164:29" pos:end="164:32"><name pos:start="164:29" pos:end="164:32">NULL</name></expr></argument>, <argument pos:start="164:35" pos:end="164:51"><expr pos:start="164:35" pos:end="164:51"><name pos:start="164:35" pos:end="164:51">wav_metadata_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="165:5" pos:end="165:53"><expr pos:start="165:5" pos:end="165:52"><call pos:start="165:5" pos:end="165:52"><name pos:start="165:5" pos:end="165:24">ff_metadata_conv_ctx</name><argument_list pos:start="165:25" pos:end="165:52">(<argument pos:start="165:26" pos:end="165:26"><expr pos:start="165:26" pos:end="165:26"><name pos:start="165:26" pos:end="165:26">s</name></expr></argument>, <argument pos:start="165:29" pos:end="165:32"><expr pos:start="165:29" pos:end="165:32"><name pos:start="165:29" pos:end="165:32">NULL</name></expr></argument>, <argument pos:start="165:35" pos:end="165:51"><expr pos:start="165:35" pos:end="165:51"><name pos:start="165:35" pos:end="165:51">ff_riff_info_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="166:5" pos:end="166:13">return <expr pos:start="166:12" pos:end="166:12"><literal type="number" pos:start="166:12" pos:end="166:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></function></unit>
