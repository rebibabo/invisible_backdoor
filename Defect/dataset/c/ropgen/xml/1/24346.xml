<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24346.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">msrle_decode_pal4</name><parameter_list pos:start="1:29" pos:end="3:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:66"><decl pos:start="1:53" pos:end="1:66"><type pos:start="1:53" pos:end="1:66"><name pos:start="1:53" pos:end="1:61">AVPicture</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">pic</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:49"><decl pos:start="3:31" pos:end="3:49"><type pos:start="3:31" pos:end="3:49"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:43">uint8_t</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:49">data</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:64"><decl pos:start="3:52" pos:end="3:64"><type pos:start="3:52" pos:end="3:64"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:64">data_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="175:1">{<block_content pos:start="7:5" pos:end="173:13">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">stream_ptr</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:26">rle_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:28">extra_byte</name></decl>, <decl pos:start="11:31" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:17"/><name pos:start="11:31" pos:end="11:39">odd_pixel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name></type> <name pos:start="13:19" pos:end="13:29">stream_byte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">pixel_ptr</name> <init pos:start="15:19" pos:end="15:21">= <expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:34"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">row_dec</name> <init pos:start="17:17" pos:end="17:34">= <expr pos:start="17:19" pos:end="17:34"><name pos:start="17:19" pos:end="17:34"><name pos:start="17:19" pos:end="17:21">pic</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:31">linesize</name><index pos:start="17:32" pos:end="17:34">[<expr pos:start="17:33" pos:end="17:33"><literal type="number" pos:start="17:33" pos:end="17:33">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:48"><decl pos:start="19:5" pos:end="19:47"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">row_ptr</name> <init pos:start="19:17" pos:end="19:47">= <expr pos:start="19:19" pos:end="19:47"><operator pos:start="19:19" pos:end="19:19">(</operator><name pos:start="19:20" pos:end="19:32"><name pos:start="19:20" pos:end="19:24">avctx</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:32">height</name></name> <operator pos:start="19:34" pos:end="19:34">-</operator> <literal type="number" pos:start="19:36" pos:end="19:36">1</literal><operator pos:start="19:37" pos:end="19:37">)</operator> <operator pos:start="19:39" pos:end="19:39">*</operator> <name pos:start="19:41" pos:end="19:47">row_dec</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:45"><decl pos:start="21:5" pos:end="21:44"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">frame_size</name> <init pos:start="21:20" pos:end="21:44">= <expr pos:start="21:22" pos:end="21:44"><name pos:start="21:22" pos:end="21:28">row_dec</name> <operator pos:start="21:30" pos:end="21:30">*</operator> <name pos:start="21:32" pos:end="21:44"><name pos:start="21:32" pos:end="21:36">avctx</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:44">height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>



    <while pos:start="27:5" pos:end="155:5">while <condition pos:start="27:11" pos:end="27:24">(<expr pos:start="27:12" pos:end="27:23"><name pos:start="27:12" pos:end="27:18">row_ptr</name> <operator pos:start="27:20" pos:end="27:21">&gt;=</operator> <literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr>)</condition> <block pos:start="27:26" pos:end="155:5">{<block_content pos:start="29:9" pos:end="153:9">

        <expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><call pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:30">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="29:31" pos:end="29:32">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:16">rle_code</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:30">stream_byte</name></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="153:9"><if pos:start="33:9" pos:end="121:9">if <condition pos:start="33:12" pos:end="33:26">(<expr pos:start="33:13" pos:end="33:25"><name pos:start="33:13" pos:end="33:20">rle_code</name> <operator pos:start="33:22" pos:end="33:23">==</operator> <literal type="number" pos:start="33:25" pos:end="33:25">0</literal></expr>)</condition> <block pos:start="33:28" pos:end="121:9">{<block_content pos:start="37:13" pos:end="119:13">

            <comment type="block" pos:start="35:13" pos:end="35:70">/* fetch the next byte to see how to handle escape code */</comment>

            <expr_stmt pos:start="37:13" pos:end="37:37"><expr pos:start="37:13" pos:end="37:36"><call pos:start="37:13" pos:end="37:36"><name pos:start="37:13" pos:end="37:34">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="37:35" pos:end="37:36">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="119:13"><if pos:start="39:13" pos:end="47:13">if <condition pos:start="39:16" pos:end="39:33">(<expr pos:start="39:17" pos:end="39:32"><name pos:start="39:17" pos:end="39:27">stream_byte</name> <operator pos:start="39:29" pos:end="39:30">==</operator> <literal type="number" pos:start="39:32" pos:end="39:32">0</literal></expr>)</condition> <block pos:start="39:35" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:30">

                <comment type="block" pos:start="41:17" pos:end="41:53">/* line is done, goto the next one */</comment>

                <expr_stmt pos:start="43:17" pos:end="43:35"><expr pos:start="43:17" pos:end="43:34"><name pos:start="43:17" pos:end="43:23">row_ptr</name> <operator pos:start="43:25" pos:end="43:26">-=</operator> <name pos:start="43:28" pos:end="43:34">row_dec</name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:30"><expr pos:start="45:17" pos:end="45:29"><name pos:start="45:17" pos:end="45:25">pixel_ptr</name> <operator pos:start="45:27" pos:end="45:27">=</operator> <literal type="number" pos:start="45:29" pos:end="45:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="47:15" pos:end="53:13">else if <condition pos:start="47:23" pos:end="47:40">(<expr pos:start="47:24" pos:end="47:39"><name pos:start="47:24" pos:end="47:34">stream_byte</name> <operator pos:start="47:36" pos:end="47:37">==</operator> <literal type="number" pos:start="47:39" pos:end="47:39">1</literal></expr>)</condition> <block pos:start="47:42" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:25">

                <comment type="block" pos:start="49:17" pos:end="49:36">/* decode is done */</comment>

                <return pos:start="51:17" pos:end="51:25">return <expr pos:start="51:24" pos:end="51:24"><literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="53:15" pos:end="65:13">else if <condition pos:start="53:23" pos:end="53:40">(<expr pos:start="53:24" pos:end="53:39"><name pos:start="53:24" pos:end="53:34">stream_byte</name> <operator pos:start="53:36" pos:end="53:37">==</operator> <literal type="number" pos:start="53:39" pos:end="53:39">2</literal></expr>)</condition> <block pos:start="53:42" pos:end="65:13">{<block_content pos:start="57:17" pos:end="63:49">

                <comment type="block" pos:start="55:17" pos:end="55:57">/* reposition frame decode coordinates */</comment>

                <expr_stmt pos:start="57:17" pos:end="57:41"><expr pos:start="57:17" pos:end="57:40"><call pos:start="57:17" pos:end="57:40"><name pos:start="57:17" pos:end="57:38">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="57:39" pos:end="57:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:41"><expr pos:start="59:17" pos:end="59:40"><name pos:start="59:17" pos:end="59:25">pixel_ptr</name> <operator pos:start="59:27" pos:end="59:28">+=</operator> <name pos:start="59:30" pos:end="59:40">stream_byte</name></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:41"><expr pos:start="61:17" pos:end="61:40"><call pos:start="61:17" pos:end="61:40"><name pos:start="61:17" pos:end="61:38">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="61:39" pos:end="61:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:49"><expr pos:start="63:17" pos:end="63:48"><name pos:start="63:17" pos:end="63:23">row_ptr</name> <operator pos:start="63:25" pos:end="63:26">-=</operator> <name pos:start="63:28" pos:end="63:38">stream_byte</name> <operator pos:start="63:40" pos:end="63:40">*</operator> <name pos:start="63:42" pos:end="63:48">row_dec</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="65:15" pos:end="119:13">else <block pos:start="65:20" pos:end="119:13">{<block_content pos:start="69:17" pos:end="117:33">

                <comment type="line" pos:start="67:17" pos:end="67:50">// copy pixels from encoded stream</comment>

                <expr_stmt pos:start="69:17" pos:end="69:45"><expr pos:start="69:17" pos:end="69:44"><name pos:start="69:17" pos:end="69:25">odd_pixel</name> <operator pos:start="69:27" pos:end="69:27">=</operator>  <name pos:start="69:30" pos:end="69:40">stream_byte</name> <operator pos:start="69:42" pos:end="69:42">&amp;</operator> <literal type="number" pos:start="69:44" pos:end="69:44">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:49"><expr pos:start="71:17" pos:end="71:48"><name pos:start="71:17" pos:end="71:24">rle_code</name> <operator pos:start="71:26" pos:end="71:26">=</operator> <operator pos:start="71:28" pos:end="71:28">(</operator><name pos:start="71:29" pos:end="71:39">stream_byte</name> <operator pos:start="71:41" pos:end="71:41">+</operator> <literal type="number" pos:start="71:43" pos:end="71:43">1</literal><operator pos:start="71:44" pos:end="71:44">)</operator> <operator pos:start="71:46" pos:end="71:46">/</operator> <literal type="number" pos:start="71:48" pos:end="71:48">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:45"><expr pos:start="73:17" pos:end="73:44"><name pos:start="73:17" pos:end="73:26">extra_byte</name> <operator pos:start="73:28" pos:end="73:28">=</operator> <name pos:start="73:30" pos:end="73:37">rle_code</name> <operator pos:start="73:39" pos:end="73:39">&amp;</operator> <literal type="number" pos:start="73:41" pos:end="73:44">0x01</literal></expr>;</expr_stmt>

                <if_stmt pos:start="75:17" pos:end="81:17"><if pos:start="75:17" pos:end="81:17">if <condition pos:start="75:20" pos:end="75:67">(<expr pos:start="75:21" pos:end="75:66"><name pos:start="75:21" pos:end="75:27">row_ptr</name> <operator pos:start="75:29" pos:end="75:29">+</operator> <name pos:start="75:31" pos:end="75:39">pixel_ptr</name> <operator pos:start="75:41" pos:end="75:41">+</operator> <name pos:start="75:43" pos:end="75:53">stream_byte</name> <operator pos:start="75:55" pos:end="75:55">&gt;</operator> <name pos:start="75:57" pos:end="75:66">frame_size</name></expr>)</condition> <block pos:start="75:69" pos:end="81:17">{<block_content pos:start="77:21" pos:end="79:30">

                    <expr_stmt pos:start="77:21" pos:end="77:100"><expr pos:start="77:21" pos:end="77:99"><call pos:start="77:21" pos:end="77:99"><name pos:start="77:21" pos:end="77:26">av_log</name><argument_list pos:start="77:27" pos:end="77:99">(<argument pos:start="77:28" pos:end="77:32"><expr pos:start="77:28" pos:end="77:32"><name pos:start="77:28" pos:end="77:32">avctx</name></expr></argument>, <argument pos:start="77:35" pos:end="77:46"><expr pos:start="77:35" pos:end="77:46"><name pos:start="77:35" pos:end="77:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:49" pos:end="77:98"><expr pos:start="77:49" pos:end="77:98"><literal type="string" pos:start="77:49" pos:end="77:98">" MS RLE: frame ptr just went out of bounds (1)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="79:21" pos:end="79:30">return <expr pos:start="79:28" pos:end="79:29"><operator pos:start="79:28" pos:end="79:28">-</operator><literal type="number" pos:start="79:29" pos:end="79:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <for pos:start="85:17" pos:end="109:17">for <control pos:start="85:21" pos:end="85:46">(<init pos:start="85:22" pos:end="85:27"><expr pos:start="85:22" pos:end="85:26"><name pos:start="85:22" pos:end="85:22">i</name> <operator pos:start="85:24" pos:end="85:24">=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">0</literal></expr>;</init> <condition pos:start="85:29" pos:end="85:41"><expr pos:start="85:29" pos:end="85:40"><name pos:start="85:29" pos:end="85:29">i</name> <operator pos:start="85:31" pos:end="85:31">&lt;</operator> <name pos:start="85:33" pos:end="85:40">rle_code</name></expr>;</condition> <incr pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><name pos:start="85:43" pos:end="85:43">i</name><operator pos:start="85:44" pos:end="85:45">++</operator></expr></incr>)</control> <block pos:start="85:48" pos:end="109:17">{<block_content pos:start="87:21" pos:end="107:32">

                    <if_stmt pos:start="87:21" pos:end="89:30"><if pos:start="87:21" pos:end="89:30">if <condition pos:start="87:24" pos:end="87:50">(<expr pos:start="87:25" pos:end="87:49"><name pos:start="87:25" pos:end="87:33">pixel_ptr</name> <operator pos:start="87:35" pos:end="87:36">&gt;=</operator> <name pos:start="87:38" pos:end="87:49"><name pos:start="87:38" pos:end="87:42">avctx</name><operator pos:start="87:43" pos:end="87:44">-&gt;</operator><name pos:start="87:45" pos:end="87:49">width</name></name></expr>)</condition><block type="pseudo" pos:start="89:25" pos:end="89:30"><block_content pos:start="89:25" pos:end="89:30">

                        <break pos:start="89:25" pos:end="89:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:45"><expr pos:start="91:21" pos:end="91:44"><call pos:start="91:21" pos:end="91:44"><name pos:start="91:21" pos:end="91:42">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="91:43" pos:end="91:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:73"><expr pos:start="93:21" pos:end="93:72"><name pos:start="93:21" pos:end="93:53"><name pos:start="93:21" pos:end="93:23">pic</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:29">data</name><index pos:start="93:30" pos:end="93:32">[<expr pos:start="93:31" pos:end="93:31"><literal type="number" pos:start="93:31" pos:end="93:31">0</literal></expr>]</index><index pos:start="93:33" pos:end="93:53">[<expr pos:start="93:34" pos:end="93:52"><name pos:start="93:34" pos:end="93:40">row_ptr</name> <operator pos:start="93:42" pos:end="93:42">+</operator> <name pos:start="93:44" pos:end="93:52">pixel_ptr</name></expr>]</index></name> <operator pos:start="93:55" pos:end="93:55">=</operator> <name pos:start="93:57" pos:end="93:67">stream_byte</name> <operator pos:start="93:69" pos:end="93:70">&gt;&gt;</operator> <literal type="number" pos:start="93:72" pos:end="93:72">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="95:32"><expr pos:start="95:21" pos:end="95:31"><name pos:start="95:21" pos:end="95:29">pixel_ptr</name><operator pos:start="95:30" pos:end="95:31">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="97:21" pos:end="99:30"><if pos:start="97:21" pos:end="99:30">if <condition pos:start="97:24" pos:end="97:55">(<expr pos:start="97:25" pos:end="97:54"><name pos:start="97:25" pos:end="97:25">i</name> <operator pos:start="97:27" pos:end="97:27">+</operator> <literal type="number" pos:start="97:29" pos:end="97:29">1</literal> <operator pos:start="97:31" pos:end="97:32">==</operator> <name pos:start="97:34" pos:end="97:41">rle_code</name> <operator pos:start="97:43" pos:end="97:44">&amp;&amp;</operator> <name pos:start="97:46" pos:end="97:54">odd_pixel</name></expr>)</condition><block type="pseudo" pos:start="99:25" pos:end="99:30"><block_content pos:start="99:25" pos:end="99:30">

                        <break pos:start="99:25" pos:end="99:30">break;</break></block_content></block></if></if_stmt>

                    <if_stmt pos:start="101:21" pos:end="103:30"><if pos:start="101:21" pos:end="103:30">if <condition pos:start="101:24" pos:end="101:50">(<expr pos:start="101:25" pos:end="101:49"><name pos:start="101:25" pos:end="101:33">pixel_ptr</name> <operator pos:start="101:35" pos:end="101:36">&gt;=</operator> <name pos:start="101:38" pos:end="101:49"><name pos:start="101:38" pos:end="101:42">avctx</name><operator pos:start="101:43" pos:end="101:44">-&gt;</operator><name pos:start="101:45" pos:end="101:49">width</name></name></expr>)</condition><block type="pseudo" pos:start="103:25" pos:end="103:30"><block_content pos:start="103:25" pos:end="103:30">

                        <break pos:start="103:25" pos:end="103:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:75"><expr pos:start="105:21" pos:end="105:74"><name pos:start="105:21" pos:end="105:53"><name pos:start="105:21" pos:end="105:23">pic</name><operator pos:start="105:24" pos:end="105:25">-&gt;</operator><name pos:start="105:26" pos:end="105:29">data</name><index pos:start="105:30" pos:end="105:32">[<expr pos:start="105:31" pos:end="105:31"><literal type="number" pos:start="105:31" pos:end="105:31">0</literal></expr>]</index><index pos:start="105:33" pos:end="105:53">[<expr pos:start="105:34" pos:end="105:52"><name pos:start="105:34" pos:end="105:40">row_ptr</name> <operator pos:start="105:42" pos:end="105:42">+</operator> <name pos:start="105:44" pos:end="105:52">pixel_ptr</name></expr>]</index></name> <operator pos:start="105:55" pos:end="105:55">=</operator> <name pos:start="105:57" pos:end="105:67">stream_byte</name> <operator pos:start="105:69" pos:end="105:69">&amp;</operator> <literal type="number" pos:start="105:71" pos:end="105:74">0x0F</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:32"><expr pos:start="107:21" pos:end="107:31"><name pos:start="107:21" pos:end="107:29">pixel_ptr</name><operator pos:start="107:30" pos:end="107:31">++</operator></expr>;</expr_stmt>

                </block_content>}</block></for>



                <comment type="line" pos:start="113:17" pos:end="113:68">// if the RLE code is odd, skip a byte in the stream</comment>

                <if_stmt pos:start="115:17" pos:end="117:33"><if pos:start="115:17" pos:end="117:33">if <condition pos:start="115:20" pos:end="115:31">(<expr pos:start="115:21" pos:end="115:30"><name pos:start="115:21" pos:end="115:30">extra_byte</name></expr>)</condition><block type="pseudo" pos:start="117:21" pos:end="117:33"><block_content pos:start="117:21" pos:end="117:33">

                    <expr_stmt pos:start="117:21" pos:end="117:33"><expr pos:start="117:21" pos:end="117:32"><name pos:start="117:21" pos:end="117:30">stream_ptr</name><operator pos:start="117:31" pos:end="117:32">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="153:9">else <block pos:start="121:16" pos:end="153:9">{<block_content pos:start="125:13" pos:end="151:13">

            <comment type="line" pos:start="123:13" pos:end="123:35">// decode a run of data</comment>

            <if_stmt pos:start="125:13" pos:end="131:13"><if pos:start="125:13" pos:end="131:13">if <condition pos:start="125:16" pos:end="125:63">(<expr pos:start="125:17" pos:end="125:62"><name pos:start="125:17" pos:end="125:23">row_ptr</name> <operator pos:start="125:25" pos:end="125:25">+</operator> <name pos:start="125:27" pos:end="125:35">pixel_ptr</name> <operator pos:start="125:37" pos:end="125:37">+</operator> <name pos:start="125:39" pos:end="125:49">stream_byte</name> <operator pos:start="125:51" pos:end="125:51">&gt;</operator> <name pos:start="125:53" pos:end="125:62">frame_size</name></expr>)</condition> <block pos:start="125:65" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:26">

                <expr_stmt pos:start="127:17" pos:end="127:96"><expr pos:start="127:17" pos:end="127:95"><call pos:start="127:17" pos:end="127:95"><name pos:start="127:17" pos:end="127:22">av_log</name><argument_list pos:start="127:23" pos:end="127:95">(<argument pos:start="127:24" pos:end="127:28"><expr pos:start="127:24" pos:end="127:28"><name pos:start="127:24" pos:end="127:28">avctx</name></expr></argument>, <argument pos:start="127:31" pos:end="127:42"><expr pos:start="127:31" pos:end="127:42"><name pos:start="127:31" pos:end="127:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:45" pos:end="127:94"><expr pos:start="127:45" pos:end="127:94"><literal type="string" pos:start="127:45" pos:end="127:94">" MS RLE: frame ptr just went out of bounds (1)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="129:17" pos:end="129:26">return <expr pos:start="129:24" pos:end="129:25"><operator pos:start="129:24" pos:end="129:24">-</operator><literal type="number" pos:start="129:25" pos:end="129:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:37"><expr pos:start="133:13" pos:end="133:36"><call pos:start="133:13" pos:end="133:36"><name pos:start="133:13" pos:end="133:34">FETCH_NEXT_STREAM_BYTE</name><argument_list pos:start="133:35" pos:end="133:36">()</argument_list></call></expr>;</expr_stmt>

            <for pos:start="135:13" pos:end="151:13">for <control pos:start="135:17" pos:end="135:42">(<init pos:start="135:18" pos:end="135:23"><expr pos:start="135:18" pos:end="135:22"><name pos:start="135:18" pos:end="135:18">i</name> <operator pos:start="135:20" pos:end="135:20">=</operator> <literal type="number" pos:start="135:22" pos:end="135:22">0</literal></expr>;</init> <condition pos:start="135:25" pos:end="135:37"><expr pos:start="135:25" pos:end="135:36"><name pos:start="135:25" pos:end="135:25">i</name> <operator pos:start="135:27" pos:end="135:27">&lt;</operator> <name pos:start="135:29" pos:end="135:36">rle_code</name></expr>;</condition> <incr pos:start="135:39" pos:end="135:41"><expr pos:start="135:39" pos:end="135:41"><name pos:start="135:39" pos:end="135:39">i</name><operator pos:start="135:40" pos:end="135:41">++</operator></expr></incr>)</control> <block pos:start="135:44" pos:end="151:13">{<block_content pos:start="137:17" pos:end="149:28">

                <if_stmt pos:start="137:17" pos:end="139:26"><if pos:start="137:17" pos:end="139:26">if <condition pos:start="137:20" pos:end="137:46">(<expr pos:start="137:21" pos:end="137:45"><name pos:start="137:21" pos:end="137:29">pixel_ptr</name> <operator pos:start="137:31" pos:end="137:32">&gt;=</operator> <name pos:start="137:34" pos:end="137:45"><name pos:start="137:34" pos:end="137:38">avctx</name><operator pos:start="137:39" pos:end="137:40">-&gt;</operator><name pos:start="137:41" pos:end="137:45">width</name></name></expr>)</condition><block type="pseudo" pos:start="139:21" pos:end="139:26"><block_content pos:start="139:21" pos:end="139:26">

                    <break pos:start="139:21" pos:end="139:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="141:17" pos:end="147:75"><if pos:start="141:17" pos:end="143:73">if <condition pos:start="141:20" pos:end="141:33">(<expr pos:start="141:21" pos:end="141:32"><operator pos:start="141:21" pos:end="141:21">(</operator><name pos:start="141:22" pos:end="141:22">i</name> <operator pos:start="141:24" pos:end="141:24">&amp;</operator> <literal type="number" pos:start="141:26" pos:end="141:26">1</literal><operator pos:start="141:27" pos:end="141:27">)</operator> <operator pos:start="141:29" pos:end="141:30">==</operator> <literal type="number" pos:start="141:32" pos:end="141:32">0</literal></expr>)</condition><block type="pseudo" pos:start="143:21" pos:end="143:73"><block_content pos:start="143:21" pos:end="143:73">

                    <expr_stmt pos:start="143:21" pos:end="143:73"><expr pos:start="143:21" pos:end="143:72"><name pos:start="143:21" pos:end="143:53"><name pos:start="143:21" pos:end="143:23">pic</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:29">data</name><index pos:start="143:30" pos:end="143:32">[<expr pos:start="143:31" pos:end="143:31"><literal type="number" pos:start="143:31" pos:end="143:31">0</literal></expr>]</index><index pos:start="143:33" pos:end="143:53">[<expr pos:start="143:34" pos:end="143:52"><name pos:start="143:34" pos:end="143:40">row_ptr</name> <operator pos:start="143:42" pos:end="143:42">+</operator> <name pos:start="143:44" pos:end="143:52">pixel_ptr</name></expr>]</index></name> <operator pos:start="143:55" pos:end="143:55">=</operator> <name pos:start="143:57" pos:end="143:67">stream_byte</name> <operator pos:start="143:69" pos:end="143:70">&gt;&gt;</operator> <literal type="number" pos:start="143:72" pos:end="143:72">4</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="145:17" pos:end="147:75">else<block type="pseudo" pos:start="147:21" pos:end="147:75"><block_content pos:start="147:21" pos:end="147:75">

                    <expr_stmt pos:start="147:21" pos:end="147:75"><expr pos:start="147:21" pos:end="147:74"><name pos:start="147:21" pos:end="147:53"><name pos:start="147:21" pos:end="147:23">pic</name><operator pos:start="147:24" pos:end="147:25">-&gt;</operator><name pos:start="147:26" pos:end="147:29">data</name><index pos:start="147:30" pos:end="147:32">[<expr pos:start="147:31" pos:end="147:31"><literal type="number" pos:start="147:31" pos:end="147:31">0</literal></expr>]</index><index pos:start="147:33" pos:end="147:53">[<expr pos:start="147:34" pos:end="147:52"><name pos:start="147:34" pos:end="147:40">row_ptr</name> <operator pos:start="147:42" pos:end="147:42">+</operator> <name pos:start="147:44" pos:end="147:52">pixel_ptr</name></expr>]</index></name> <operator pos:start="147:55" pos:end="147:55">=</operator> <name pos:start="147:57" pos:end="147:67">stream_byte</name> <operator pos:start="147:69" pos:end="147:69">&amp;</operator> <literal type="number" pos:start="147:71" pos:end="147:74">0x0F</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:28"><expr pos:start="149:17" pos:end="149:27"><name pos:start="149:17" pos:end="149:25">pixel_ptr</name><operator pos:start="149:26" pos:end="149:27">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="159:5" pos:end="159:46">/* one last sanity check on the way out */</comment>

    <if_stmt pos:start="161:5" pos:end="169:5"><if pos:start="161:5" pos:end="169:5">if <condition pos:start="161:8" pos:end="161:31">(<expr pos:start="161:9" pos:end="161:30"><name pos:start="161:9" pos:end="161:18">stream_ptr</name> <operator pos:start="161:20" pos:end="161:20">&lt;</operator> <name pos:start="161:22" pos:end="161:30">data_size</name></expr>)</condition> <block pos:start="161:33" pos:end="169:5">{<block_content pos:start="163:9" pos:end="167:18">

        <expr_stmt pos:start="163:9" pos:end="165:35"><expr pos:start="163:9" pos:end="165:34"><call pos:start="163:9" pos:end="165:34"><name pos:start="163:9" pos:end="163:14">av_log</name><argument_list pos:start="163:15" pos:end="165:34">(<argument pos:start="163:16" pos:end="163:20"><expr pos:start="163:16" pos:end="163:20"><name pos:start="163:16" pos:end="163:20">avctx</name></expr></argument>, <argument pos:start="163:23" pos:end="163:34"><expr pos:start="163:23" pos:end="163:34"><name pos:start="163:23" pos:end="163:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:37" pos:end="163:98"><expr pos:start="163:37" pos:end="163:98"><literal type="string" pos:start="163:37" pos:end="163:98">" MS RLE: ended frame decode with bytes left over (%d &lt; %d)\n"</literal></expr></argument>,

            <argument pos:start="165:13" pos:end="165:22"><expr pos:start="165:13" pos:end="165:22"><name pos:start="165:13" pos:end="165:22">stream_ptr</name></expr></argument>, <argument pos:start="165:25" pos:end="165:33"><expr pos:start="165:25" pos:end="165:33"><name pos:start="165:25" pos:end="165:33">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="167:9" pos:end="167:18">return <expr pos:start="167:16" pos:end="167:17"><operator pos:start="167:16" pos:end="167:16">-</operator><literal type="number" pos:start="167:17" pos:end="167:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="173:5" pos:end="173:13">return <expr pos:start="173:12" pos:end="173:12"><literal type="number" pos:start="173:12" pos:end="173:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
