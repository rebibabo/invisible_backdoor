<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10346.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:21">NetSocketState</name> <modifier pos:start="1:23" pos:end="1:23">*</modifier></type><name pos:start="1:24" pos:end="1:41">net_socket_fd_init</name><parameter_list pos:start="1:42" pos:end="5:67">(<parameter pos:start="1:43" pos:end="1:62"><decl pos:start="1:43" pos:end="1:62"><type pos:start="1:43" pos:end="1:62"><name pos:start="1:43" pos:end="1:56">NetClientState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">peer</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:59"><decl pos:start="3:43" pos:end="3:59"><type pos:start="3:43" pos:end="3:59"><specifier pos:start="3:43" pos:end="3:47">const</specifier> <name pos:start="3:49" pos:end="3:52">char</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">model</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:77"><decl pos:start="3:62" pos:end="3:77"><type pos:start="3:62" pos:end="3:77"><specifier pos:start="3:62" pos:end="3:66">const</specifier> <name pos:start="3:68" pos:end="3:71">char</name> <modifier pos:start="3:73" pos:end="3:73">*</modifier></type><name pos:start="3:74" pos:end="3:77">name</name></decl></parameter>,

                                          <parameter pos:start="5:43" pos:end="5:48"><decl pos:start="5:43" pos:end="5:48"><type pos:start="5:43" pos:end="5:48"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:48">fd</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:66"><decl pos:start="5:51" pos:end="5:66"><type pos:start="5:51" pos:end="5:66"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:66">is_connected</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="49:1">{<block_content pos:start="9:5" pos:end="47:16">

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">so_type</name> <init pos:start="9:17" pos:end="9:20">= <expr pos:start="9:19" pos:end="9:20"><operator pos:start="9:19" pos:end="9:19">-</operator><literal type="number" pos:start="9:20" pos:end="9:20">1</literal></expr></init></decl>, <decl pos:start="9:23" pos:end="9:44"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:28">optlen</name><init pos:start="9:29" pos:end="9:44">=<expr pos:start="9:30" pos:end="9:44"><sizeof pos:start="9:30" pos:end="9:44">sizeof<argument_list pos:start="9:36" pos:end="9:44">(<argument pos:start="9:37" pos:end="9:43"><expr pos:start="9:37" pos:end="9:43"><name pos:start="9:37" pos:end="9:43">so_type</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="25:5"><if pos:start="13:5" pos:end="25:5">if<condition pos:start="13:7" pos:end="15:33">(<expr pos:start="13:8" pos:end="15:32"><call pos:start="13:8" pos:end="15:29"><name pos:start="13:8" pos:end="13:17">getsockopt</name><argument_list pos:start="13:18" pos:end="15:29">(<argument pos:start="13:19" pos:end="13:20"><expr pos:start="13:19" pos:end="13:20"><name pos:start="13:19" pos:end="13:20">fd</name></expr></argument>, <argument pos:start="13:23" pos:end="13:32"><expr pos:start="13:23" pos:end="13:32"><name pos:start="13:23" pos:end="13:32">SOL_SOCKET</name></expr></argument>, <argument pos:start="13:35" pos:end="13:41"><expr pos:start="13:35" pos:end="13:41"><name pos:start="13:35" pos:end="13:41">SO_TYPE</name></expr></argument>, <argument pos:start="13:44" pos:end="13:59"><expr pos:start="13:44" pos:end="13:59"><operator pos:start="13:44" pos:end="13:44">(</operator><name pos:start="13:45" pos:end="13:48">char</name> <operator pos:start="13:50" pos:end="13:50">*</operator><operator pos:start="13:51" pos:end="13:51">)</operator><operator pos:start="13:52" pos:end="13:52">&amp;</operator><name pos:start="13:53" pos:end="13:59">so_type</name></expr></argument>,

        <argument pos:start="15:9" pos:end="15:28"><expr pos:start="15:9" pos:end="15:28"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:18">socklen_t</name> <operator pos:start="15:20" pos:end="15:20">*</operator><operator pos:start="15:21" pos:end="15:21">)</operator><operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:28">optlen</name></expr></argument>)</argument_list></call><operator pos:start="15:30" pos:end="15:30">&lt;</operator> <literal type="number" pos:start="15:32" pos:end="15:32">0</literal></expr>)</condition> <block pos:start="15:35" pos:end="25:5">{<block_content pos:start="17:9" pos:end="23:20">

        <expr_stmt pos:start="17:9" pos:end="19:20"><expr pos:start="17:9" pos:end="19:19"><call pos:start="17:9" pos:end="19:19"><name pos:start="17:9" pos:end="17:15">fprintf</name><argument_list pos:start="17:16" pos:end="19:19">(<argument pos:start="17:17" pos:end="17:22"><expr pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:22">stderr</name></expr></argument>, <argument pos:start="17:25" pos:end="17:77"><expr pos:start="17:25" pos:end="17:77"><literal type="string" pos:start="17:25" pos:end="17:77">"qemu: error: getsockopt(SO_TYPE) for fd=%d failed\n"</literal></expr></argument>,

                <argument pos:start="19:17" pos:end="19:18"><expr pos:start="19:17" pos:end="19:18"><name pos:start="19:17" pos:end="19:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:24"><expr pos:start="21:9" pos:end="21:23"><call pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:19">closesocket</name><argument_list pos:start="21:20" pos:end="21:23">(<argument pos:start="21:21" pos:end="21:22"><expr pos:start="21:21" pos:end="21:22"><name pos:start="21:21" pos:end="21:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:20">return <expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="27:5" pos:end="45:5">switch<condition pos:start="27:11" pos:end="27:19">(<expr pos:start="27:12" pos:end="27:18"><name pos:start="27:12" pos:end="27:18">so_type</name></expr>)</condition> <block pos:start="27:21" pos:end="45:5">{<block_content pos:start="29:5" pos:end="43:78">

    <case pos:start="29:5" pos:end="29:20">case <expr pos:start="29:10" pos:end="29:19"><name pos:start="29:10" pos:end="29:19">SOCK_DGRAM</name></expr>:</case>

        <return pos:start="31:9" pos:end="31:77">return <expr pos:start="31:16" pos:end="31:76"><call pos:start="31:16" pos:end="31:76"><name pos:start="31:16" pos:end="31:39">net_socket_fd_init_dgram</name><argument_list pos:start="31:40" pos:end="31:76">(<argument pos:start="31:41" pos:end="31:44"><expr pos:start="31:41" pos:end="31:44"><name pos:start="31:41" pos:end="31:44">peer</name></expr></argument>, <argument pos:start="31:47" pos:end="31:51"><expr pos:start="31:47" pos:end="31:51"><name pos:start="31:47" pos:end="31:51">model</name></expr></argument>, <argument pos:start="31:54" pos:end="31:57"><expr pos:start="31:54" pos:end="31:57"><name pos:start="31:54" pos:end="31:57">name</name></expr></argument>, <argument pos:start="31:60" pos:end="31:61"><expr pos:start="31:60" pos:end="31:61"><name pos:start="31:60" pos:end="31:61">fd</name></expr></argument>, <argument pos:start="31:64" pos:end="31:75"><expr pos:start="31:64" pos:end="31:75"><name pos:start="31:64" pos:end="31:75">is_connected</name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="33:5" pos:end="33:21">case <expr pos:start="33:10" pos:end="33:20"><name pos:start="33:10" pos:end="33:20">SOCK_STREAM</name></expr>:</case>

        <return pos:start="35:9" pos:end="35:78">return <expr pos:start="35:16" pos:end="35:77"><call pos:start="35:16" pos:end="35:77"><name pos:start="35:16" pos:end="35:40">net_socket_fd_init_stream</name><argument_list pos:start="35:41" pos:end="35:77">(<argument pos:start="35:42" pos:end="35:45"><expr pos:start="35:42" pos:end="35:45"><name pos:start="35:42" pos:end="35:45">peer</name></expr></argument>, <argument pos:start="35:48" pos:end="35:52"><expr pos:start="35:48" pos:end="35:52"><name pos:start="35:48" pos:end="35:52">model</name></expr></argument>, <argument pos:start="35:55" pos:end="35:58"><expr pos:start="35:55" pos:end="35:58"><name pos:start="35:55" pos:end="35:58">name</name></expr></argument>, <argument pos:start="35:61" pos:end="35:62"><expr pos:start="35:61" pos:end="35:62"><name pos:start="35:61" pos:end="35:62">fd</name></expr></argument>, <argument pos:start="35:65" pos:end="35:76"><expr pos:start="35:65" pos:end="35:76"><name pos:start="35:65" pos:end="35:76">is_connected</name></expr></argument>)</argument_list></call></expr>;</return>

    <default pos:start="37:5" pos:end="37:12">default:</default>

        <comment type="block" pos:start="39:9" pos:end="39:85">/* who knows ... this could be a eg. a pty, do warn and continue as stream */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:115"><expr pos:start="41:9" pos:end="41:114"><call pos:start="41:9" pos:end="41:114"><name pos:start="41:9" pos:end="41:15">fprintf</name><argument_list pos:start="41:16" pos:end="41:114">(<argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">stderr</name></expr></argument>, <argument pos:start="41:25" pos:end="41:100"><expr pos:start="41:25" pos:end="41:100"><literal type="string" pos:start="41:25" pos:end="41:100">"qemu: warning: socket type=%d for fd=%d is not SOCK_DGRAM or SOCK_STREAM\n"</literal></expr></argument>, <argument pos:start="41:103" pos:end="41:109"><expr pos:start="41:103" pos:end="41:109"><name pos:start="41:103" pos:end="41:109">so_type</name></expr></argument>, <argument pos:start="41:112" pos:end="41:113"><expr pos:start="41:112" pos:end="41:113"><name pos:start="41:112" pos:end="41:113">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:78">return <expr pos:start="43:16" pos:end="43:77"><call pos:start="43:16" pos:end="43:77"><name pos:start="43:16" pos:end="43:40">net_socket_fd_init_stream</name><argument_list pos:start="43:41" pos:end="43:77">(<argument pos:start="43:42" pos:end="43:45"><expr pos:start="43:42" pos:end="43:45"><name pos:start="43:42" pos:end="43:45">peer</name></expr></argument>, <argument pos:start="43:48" pos:end="43:52"><expr pos:start="43:48" pos:end="43:52"><name pos:start="43:48" pos:end="43:52">model</name></expr></argument>, <argument pos:start="43:55" pos:end="43:58"><expr pos:start="43:55" pos:end="43:58"><name pos:start="43:55" pos:end="43:58">name</name></expr></argument>, <argument pos:start="43:61" pos:end="43:62"><expr pos:start="43:61" pos:end="43:62"><name pos:start="43:61" pos:end="43:62">fd</name></expr></argument>, <argument pos:start="43:65" pos:end="43:76"><expr pos:start="43:65" pos:end="43:76"><name pos:start="43:65" pos:end="43:76">is_connected</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>

    <return pos:start="47:5" pos:end="47:16">return <expr pos:start="47:12" pos:end="47:15"><name pos:start="47:12" pos:end="47:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
