<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17335.c" pos:tabs="8"><function pos:start="1:1" pos:end="444:25"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">ff_mjpeg_decode_frame</name><parameter_list pos:start="1:26" pos:end="5:46">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:40">AVCodecContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">avctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:34">void</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">data</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">data_size</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:45"><decl pos:start="5:31" pos:end="5:45"><type pos:start="5:31" pos:end="5:45"><name pos:start="5:31" pos:end="5:38">AVPacket</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:45">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="444:25">{<block_content pos:start="9:5" pos:end="444:25">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22">MJpegDecodeContext</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:25">s</name> <init pos:start="13:27" pos:end="13:44">= <expr pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:33">avctx</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:26">buf_end</name></decl>, <decl pos:start="15:29" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:19"><modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:36">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">start_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">AVFrame</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">picture</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">data</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:18">got_picture</name></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="23:25" pos:end="23:72">// picture from previous image can not be reused</comment>

    <expr_stmt pos:start="25:5" pos:end="25:18"><expr pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:11">buf_ptr</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:11">buf_end</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:17">buf</name> <operator pos:start="27:19" pos:end="27:19">+</operator> <name pos:start="27:21" pos:end="27:28">buf_size</name></expr>;</expr_stmt>

    <while pos:start="29:5" pos:end="444:25">while <condition pos:start="29:11" pos:end="29:29">(<expr pos:start="29:12" pos:end="29:28"><name pos:start="29:12" pos:end="29:18">buf_ptr</name> <operator pos:start="29:20" pos:end="29:20">&lt;</operator> <name pos:start="29:22" pos:end="29:28">buf_end</name></expr>)</condition> <block pos:start="29:31" pos:end="444:25">{<block_content pos:start="33:9" pos:end="444:25">

        <comment type="block" pos:start="31:9" pos:end="31:36">/* find start next marker */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:52"><expr pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:18">start_code</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <call pos:start="33:22" pos:end="33:51"><name pos:start="33:22" pos:end="33:32">find_marker</name><argument_list pos:start="33:33" pos:end="33:51">(<argument pos:start="33:34" pos:end="33:41"><expr pos:start="33:34" pos:end="33:41"><operator pos:start="33:34" pos:end="33:34">&amp;</operator><name pos:start="33:35" pos:end="33:41">buf_ptr</name></expr></argument>, <argument pos:start="33:44" pos:end="33:50"><expr pos:start="33:44" pos:end="33:50"><name pos:start="33:44" pos:end="33:50">buf_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="35:9" pos:end="444:25">{<block_content pos:start="39:13" pos:end="444:25">

            <comment type="block" pos:start="37:13" pos:end="37:21">/* EOF */</comment>

            <if_stmt pos:start="39:13" pos:end="444:25"><if pos:start="39:13" pos:end="43:13">if <condition pos:start="39:16" pos:end="39:31">(<expr pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:26">start_code</name> <operator pos:start="39:28" pos:end="39:28">&lt;</operator> <literal type="number" pos:start="39:30" pos:end="39:30">0</literal></expr>)</condition> <block pos:start="39:33" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:29">

                <goto pos:start="41:17" pos:end="41:29">goto <name pos:start="41:22" pos:end="41:28">the_end</name>;</goto>

            </block_content>}</block></if> <else pos:start="43:15" pos:end="444:25">else <block pos:start="43:20" pos:end="444:25">{<block_content pos:start="45:17" pos:end="444:25">

                <expr_stmt pos:start="45:17" pos:end="45:112"><expr pos:start="45:17" pos:end="45:111"><call pos:start="45:17" pos:end="45:111"><name pos:start="45:17" pos:end="45:22">av_log</name><argument_list pos:start="45:23" pos:end="45:111">(<argument pos:start="45:24" pos:end="45:28"><expr pos:start="45:24" pos:end="45:28"><name pos:start="45:24" pos:end="45:28">avctx</name></expr></argument>, <argument pos:start="45:31" pos:end="45:42"><expr pos:start="45:31" pos:end="45:42"><name pos:start="45:31" pos:end="45:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="45:45" pos:end="45:79"><expr pos:start="45:45" pos:end="45:79"><literal type="string" pos:start="45:45" pos:end="45:79">"marker=%x avail_size_in_buf=%td\n"</literal></expr></argument>, <argument pos:start="45:82" pos:end="45:91"><expr pos:start="45:82" pos:end="45:91"><name pos:start="45:82" pos:end="45:91">start_code</name></expr></argument>, <argument pos:start="45:94" pos:end="45:110"><expr pos:start="45:94" pos:end="45:110"><name pos:start="45:94" pos:end="45:100">buf_end</name> <operator pos:start="45:102" pos:end="45:102">-</operator> <name pos:start="45:104" pos:end="45:110">buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="49:17" pos:end="444:25"><if pos:start="49:17" pos:end="444:25">if <condition pos:start="49:20" pos:end="49:57">(<expr pos:start="49:21" pos:end="49:56"><operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:28">buf_end</name> <operator pos:start="49:30" pos:end="49:30">-</operator> <name pos:start="49:32" pos:end="49:38">buf_ptr</name><operator pos:start="49:39" pos:end="49:39">)</operator> <operator pos:start="49:41" pos:end="49:41">&gt;</operator> <name pos:start="49:43" pos:end="49:56"><name pos:start="49:43" pos:end="49:43">s</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:56">buffer_size</name></name></expr>)</condition>

                <block pos:start="51:17" pos:end="444:25">{<block_content pos:start="53:21" pos:end="444:25">

                    <expr_stmt pos:start="53:21" pos:end="53:39"><expr pos:start="53:21" pos:end="53:38"><call pos:start="53:21" pos:end="53:38"><name pos:start="53:21" pos:end="53:27">av_free</name><argument_list pos:start="53:28" pos:end="53:38">(<argument pos:start="53:29" pos:end="53:37"><expr pos:start="53:29" pos:end="53:37"><name pos:start="53:29" pos:end="53:37"><name pos:start="53:29" pos:end="53:29">s</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:37">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="55:21" pos:end="55:53"><expr pos:start="55:21" pos:end="55:52"><name pos:start="55:21" pos:end="55:34"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:34">buffer_size</name></name> <operator pos:start="55:36" pos:end="55:36">=</operator> <name pos:start="55:38" pos:end="55:44">buf_end</name><operator pos:start="55:45" pos:end="55:45">-</operator><name pos:start="55:46" pos:end="55:52">buf_ptr</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:89"><expr pos:start="57:21" pos:end="57:88"><name pos:start="57:21" pos:end="57:29"><name pos:start="57:21" pos:end="57:21">s</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:29">buffer</name></name> <operator pos:start="57:31" pos:end="57:31">=</operator> <call pos:start="57:33" pos:end="57:88"><name pos:start="57:33" pos:end="57:41">av_malloc</name><argument_list pos:start="57:42" pos:end="57:88">(<argument pos:start="57:43" pos:end="57:87"><expr pos:start="57:43" pos:end="57:87"><name pos:start="57:43" pos:end="57:56"><name pos:start="57:43" pos:end="57:43">s</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:56">buffer_size</name></name> <operator pos:start="57:58" pos:end="57:58">+</operator> <name pos:start="57:60" pos:end="57:87">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="59:21" pos:end="61:40"><expr pos:start="59:21" pos:end="61:39"><call pos:start="59:21" pos:end="61:39"><name pos:start="59:21" pos:end="59:26">av_log</name><argument_list pos:start="59:27" pos:end="61:39">(<argument pos:start="59:28" pos:end="59:32"><expr pos:start="59:28" pos:end="59:32"><name pos:start="59:28" pos:end="59:32">avctx</name></expr></argument>, <argument pos:start="59:35" pos:end="59:46"><expr pos:start="59:35" pos:end="59:46"><name pos:start="59:35" pos:end="59:46">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="59:49" pos:end="59:91"><expr pos:start="59:49" pos:end="59:91"><literal type="string" pos:start="59:49" pos:end="59:91">"buffer too small, expanding to %d bytes\n"</literal></expr></argument>,

                        <argument pos:start="61:25" pos:end="61:38"><expr pos:start="61:25" pos:end="61:38"><name pos:start="61:25" pos:end="61:38"><name pos:start="61:25" pos:end="61:25">s</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:38">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




                <comment type="block" pos:start="66:17" pos:end="66:79">/* unescape buffer of SOS, use special treatment for JPEG-LS */</comment>

                <if_stmt pos:start="68:17" pos:end="444:25"><if pos:start="68:17" pos:end="444:25">if <condition pos:start="68:20" pos:end="68:48">(<expr pos:start="68:21" pos:end="68:47"><name pos:start="68:21" pos:end="68:30">start_code</name> <operator pos:start="68:32" pos:end="68:33">==</operator> <name pos:start="68:35" pos:end="68:37">SOS</name> <operator pos:start="68:39" pos:end="68:40">&amp;&amp;</operator> <operator pos:start="68:42" pos:end="68:42">!</operator><name pos:start="68:43" pos:end="68:47"><name pos:start="68:43" pos:end="68:43">s</name><operator pos:start="68:44" pos:end="68:45">-&gt;</operator><name pos:start="68:46" pos:end="68:47">ls</name></name></expr>)</condition>

                <block pos:start="70:17" pos:end="444:25">{<block_content pos:start="72:21" pos:end="444:25">

                    <decl_stmt pos:start="72:21" pos:end="72:49"><decl pos:start="72:21" pos:end="72:48"><type pos:start="72:21" pos:end="72:35"><specifier pos:start="72:21" pos:end="72:25">const</specifier> <name pos:start="72:27" pos:end="72:33">uint8_t</name> <modifier pos:start="72:35" pos:end="72:35">*</modifier></type><name pos:start="72:36" pos:end="72:38">src</name> <init pos:start="72:40" pos:end="72:48">= <expr pos:start="72:42" pos:end="72:48"><name pos:start="72:42" pos:end="72:48">buf_ptr</name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="74:21" pos:end="74:45"><decl pos:start="74:21" pos:end="74:44"><type pos:start="74:21" pos:end="74:29"><name pos:start="74:21" pos:end="74:27">uint8_t</name> <modifier pos:start="74:29" pos:end="74:29">*</modifier></type><name pos:start="74:30" pos:end="74:32">dst</name> <init pos:start="74:34" pos:end="74:44">= <expr pos:start="74:36" pos:end="74:44"><name pos:start="74:36" pos:end="74:44"><name pos:start="74:36" pos:end="74:36">s</name><operator pos:start="74:37" pos:end="74:38">-&gt;</operator><name pos:start="74:39" pos:end="74:44">buffer</name></name></expr></init></decl>;</decl_stmt>



                    <while pos:start="78:21" pos:end="444:25">while <condition pos:start="78:27" pos:end="78:39">(<expr pos:start="78:28" pos:end="78:38"><name pos:start="78:28" pos:end="78:30">src</name><operator pos:start="78:31" pos:end="78:31">&lt;</operator><name pos:start="78:32" pos:end="78:38">buf_end</name></expr>)</condition>

                    <block pos:start="80:21" pos:end="444:25">{<block_content pos:start="82:25" pos:end="444:25">

                        <decl_stmt pos:start="82:25" pos:end="82:45"><decl pos:start="82:25" pos:end="82:44"><type pos:start="82:25" pos:end="82:31"><name pos:start="82:25" pos:end="82:31">uint8_t</name></type> <name pos:start="82:33" pos:end="82:33">x</name> <init pos:start="82:35" pos:end="82:44">= <expr pos:start="82:37" pos:end="82:44"><operator pos:start="82:37" pos:end="82:37">*</operator><operator pos:start="82:38" pos:end="82:38">(</operator><name pos:start="82:39" pos:end="82:41">src</name><operator pos:start="82:42" pos:end="82:43">++</operator><operator pos:start="82:44" pos:end="82:44">)</operator></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="86:25" pos:end="86:37"><expr pos:start="86:25" pos:end="86:36"><operator pos:start="86:25" pos:end="86:25">*</operator><operator pos:start="86:26" pos:end="86:26">(</operator><name pos:start="86:27" pos:end="86:29">dst</name><operator pos:start="86:30" pos:end="86:31">++</operator><operator pos:start="86:32" pos:end="86:32">)</operator> <operator pos:start="86:34" pos:end="86:34">=</operator> <name pos:start="86:36" pos:end="86:36">x</name></expr>;</expr_stmt>

                        <if_stmt pos:start="88:25" pos:end="444:25"><if pos:start="88:25" pos:end="444:25">if <condition pos:start="88:28" pos:end="88:60">(<expr pos:start="88:29" pos:end="88:59"><name pos:start="88:29" pos:end="88:43"><name pos:start="88:29" pos:end="88:33">avctx</name><operator pos:start="88:34" pos:end="88:35">-&gt;</operator><name pos:start="88:36" pos:end="88:43">codec_id</name></name> <operator pos:start="88:45" pos:end="88:46">!=</operator> <name pos:start="88:48" pos:end="88:59">CODEC_ID_THP</name></expr>)</condition>

                        <block pos:start="90:25" pos:end="444:25">{<block_content pos:start="92:29" pos:end="444:25">

                            <if_stmt pos:start="92:29" pos:end="444:25"><if pos:start="92:29" pos:end="444:25">if <condition pos:start="92:32" pos:end="92:42">(<expr pos:start="92:33" pos:end="92:41"><name pos:start="92:33" pos:end="92:33">x</name> <operator pos:start="92:35" pos:end="92:36">==</operator> <literal type="number" pos:start="92:38" pos:end="92:41">0xff</literal></expr>)</condition> <block pos:start="92:44" pos:end="444:25">{<block_content pos:start="94:33" pos:end="444:25">

                                <while pos:start="94:33" pos:end="96:49">while <condition pos:start="94:39" pos:end="94:66">(<expr pos:start="94:40" pos:end="94:65"><name pos:start="94:40" pos:end="94:42">src</name> <operator pos:start="94:44" pos:end="94:44">&lt;</operator> <name pos:start="94:46" pos:end="94:52">buf_end</name> <operator pos:start="94:54" pos:end="94:55">&amp;&amp;</operator> <name pos:start="94:57" pos:end="94:57">x</name> <operator pos:start="94:59" pos:end="94:60">==</operator> <literal type="number" pos:start="94:62" pos:end="94:65">0xff</literal></expr>)</condition><block type="pseudo" pos:start="96:37" pos:end="96:49"><block_content pos:start="96:37" pos:end="96:49">

                                    <expr_stmt pos:start="96:37" pos:end="96:49"><expr pos:start="96:37" pos:end="96:48"><name pos:start="96:37" pos:end="96:37">x</name> <operator pos:start="96:39" pos:end="96:39">=</operator> <operator pos:start="96:41" pos:end="96:41">*</operator><operator pos:start="96:42" pos:end="96:42">(</operator><name pos:start="96:43" pos:end="96:45">src</name><operator pos:start="96:46" pos:end="96:47">++</operator><operator pos:start="96:48" pos:end="96:48">)</operator></expr>;</expr_stmt></block_content></block></while>



                                <if_stmt pos:start="100:33" pos:end="110:74"><if pos:start="100:33" pos:end="102:49">if <condition pos:start="100:36" pos:end="100:59">(<expr pos:start="100:37" pos:end="100:58"><name pos:start="100:37" pos:end="100:37">x</name> <operator pos:start="100:39" pos:end="100:40">&gt;=</operator> <literal type="number" pos:start="100:42" pos:end="100:45">0xd0</literal> <operator pos:start="100:47" pos:end="100:48">&amp;&amp;</operator> <name pos:start="100:50" pos:end="100:50">x</name> <operator pos:start="100:52" pos:end="100:53">&lt;=</operator> <literal type="number" pos:start="100:55" pos:end="100:58">0xd7</literal></expr>)</condition><block type="pseudo" pos:start="102:37" pos:end="102:49"><block_content pos:start="102:37" pos:end="102:49">

                                    <expr_stmt pos:start="102:37" pos:end="102:49"><expr pos:start="102:37" pos:end="102:48"><operator pos:start="102:37" pos:end="102:37">*</operator><operator pos:start="102:38" pos:end="102:38">(</operator><name pos:start="102:39" pos:end="102:41">dst</name><operator pos:start="102:42" pos:end="102:43">++</operator><operator pos:start="102:44" pos:end="102:44">)</operator> <operator pos:start="102:46" pos:end="102:46">=</operator> <name pos:start="102:48" pos:end="102:48">x</name></expr>;</expr_stmt></block_content></block></if>

                                <if type="elseif" pos:start="104:33" pos:end="110:74">else if <condition pos:start="104:41" pos:end="104:43">(<expr pos:start="104:42" pos:end="104:42"><name pos:start="104:42" pos:end="104:42">x</name></expr>)</condition><block type="pseudo" pos:start="110:21" pos:end="110:74"><block_content pos:start="110:21" pos:end="110:74">





                    <expr_stmt pos:start="110:21" pos:end="110:74"><expr pos:start="110:21" pos:end="110:73"><call pos:start="110:21" pos:end="110:73"><name pos:start="110:21" pos:end="110:33">init_get_bits</name><argument_list pos:start="110:34" pos:end="110:73">(<argument pos:start="110:35" pos:end="110:40"><expr pos:start="110:35" pos:end="110:40"><operator pos:start="110:35" pos:end="110:35">&amp;</operator><name pos:start="110:36" pos:end="110:40"><name pos:start="110:36" pos:end="110:36">s</name><operator pos:start="110:37" pos:end="110:38">-&gt;</operator><name pos:start="110:39" pos:end="110:40">gb</name></name></expr></argument>, <argument pos:start="110:43" pos:end="110:51"><expr pos:start="110:43" pos:end="110:51"><name pos:start="110:43" pos:end="110:51"><name pos:start="110:43" pos:end="110:43">s</name><operator pos:start="110:44" pos:end="110:45">-&gt;</operator><name pos:start="110:46" pos:end="110:51">buffer</name></name></expr></argument>, <argument pos:start="110:54" pos:end="110:72"><expr pos:start="110:54" pos:end="110:72"><operator pos:start="110:54" pos:end="110:54">(</operator><name pos:start="110:55" pos:end="110:57">dst</name> <operator pos:start="110:59" pos:end="110:59">-</operator> <name pos:start="110:61" pos:end="110:69"><name pos:start="110:61" pos:end="110:61">s</name><operator pos:start="110:62" pos:end="110:63">-&gt;</operator><name pos:start="110:64" pos:end="110:69">buffer</name></name><operator pos:start="110:70" pos:end="110:70">)</operator><operator pos:start="110:71" pos:end="110:71">*</operator><literal type="number" pos:start="110:72" pos:end="110:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="114:21" pos:end="116:68"><expr pos:start="114:21" pos:end="116:67"><call pos:start="114:21" pos:end="116:67"><name pos:start="114:21" pos:end="114:26">av_log</name><argument_list pos:start="114:27" pos:end="116:67">(<argument pos:start="114:28" pos:end="114:32"><expr pos:start="114:28" pos:end="114:32"><name pos:start="114:28" pos:end="114:32">avctx</name></expr></argument>, <argument pos:start="114:35" pos:end="114:46"><expr pos:start="114:35" pos:end="114:46"><name pos:start="114:35" pos:end="114:46">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="114:49" pos:end="114:78"><expr pos:start="114:49" pos:end="114:78"><literal type="string" pos:start="114:49" pos:end="114:78">"escaping removed %td bytes\n"</literal></expr></argument>,

                           <argument pos:start="116:28" pos:end="116:66"><expr pos:start="116:28" pos:end="116:66"><operator pos:start="116:28" pos:end="116:28">(</operator><name pos:start="116:29" pos:end="116:35">buf_end</name> <operator pos:start="116:37" pos:end="116:37">-</operator> <name pos:start="116:39" pos:end="116:45">buf_ptr</name><operator pos:start="116:46" pos:end="116:46">)</operator> <operator pos:start="116:48" pos:end="116:48">-</operator> <operator pos:start="116:50" pos:end="116:50">(</operator><name pos:start="116:51" pos:end="116:53">dst</name> <operator pos:start="116:55" pos:end="116:55">-</operator> <name pos:start="116:57" pos:end="116:65"><name pos:start="116:57" pos:end="116:57">s</name><operator pos:start="116:58" pos:end="116:59">-&gt;</operator><name pos:start="116:60" pos:end="116:65">buffer</name></name><operator pos:start="116:66" pos:end="116:66">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <if_stmt pos:start="119:17" pos:end="444:25"><if type="elseif" pos:start="119:17" pos:end="444:25">else if<condition pos:start="119:24" pos:end="119:51">(<expr pos:start="119:25" pos:end="119:50"><name pos:start="119:25" pos:end="119:34">start_code</name> <operator pos:start="119:36" pos:end="119:37">==</operator> <name pos:start="119:39" pos:end="119:41">SOS</name> <operator pos:start="119:43" pos:end="119:44">&amp;&amp;</operator> <name pos:start="119:46" pos:end="119:50"><name pos:start="119:46" pos:end="119:46">s</name><operator pos:start="119:47" pos:end="119:48">-&gt;</operator><name pos:start="119:49" pos:end="119:50">ls</name></name></expr>)</condition><block pos:start="119:52" pos:end="444:25">{<block_content pos:start="121:21" pos:end="444:25">

                    <decl_stmt pos:start="121:21" pos:end="121:49"><decl pos:start="121:21" pos:end="121:48"><type pos:start="121:21" pos:end="121:35"><specifier pos:start="121:21" pos:end="121:25">const</specifier> <name pos:start="121:27" pos:end="121:33">uint8_t</name> <modifier pos:start="121:35" pos:end="121:35">*</modifier></type><name pos:start="121:36" pos:end="121:38">src</name> <init pos:start="121:40" pos:end="121:48">= <expr pos:start="121:42" pos:end="121:48"><name pos:start="121:42" pos:end="121:48">buf_ptr</name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="123:21" pos:end="123:45"><decl pos:start="123:21" pos:end="123:44"><type pos:start="123:21" pos:end="123:29"><name pos:start="123:21" pos:end="123:27">uint8_t</name> <modifier pos:start="123:29" pos:end="123:29">*</modifier></type><name pos:start="123:30" pos:end="123:32">dst</name> <init pos:start="123:34" pos:end="123:44">= <expr pos:start="123:36" pos:end="123:44"><name pos:start="123:36" pos:end="123:44"><name pos:start="123:36" pos:end="123:36">s</name><operator pos:start="123:37" pos:end="123:38">-&gt;</operator><name pos:start="123:39" pos:end="123:44">buffer</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="125:21" pos:end="125:38"><decl pos:start="125:21" pos:end="125:37"><type pos:start="125:21" pos:end="125:23"><name pos:start="125:21" pos:end="125:23">int</name></type> <name pos:start="125:25" pos:end="125:33">bit_count</name> <init pos:start="125:35" pos:end="125:37">= <expr pos:start="125:37" pos:end="125:37"><literal type="number" pos:start="125:37" pos:end="125:37">0</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="127:21" pos:end="127:37"><decl pos:start="127:21" pos:end="127:29"><type pos:start="127:21" pos:end="127:23"><name pos:start="127:21" pos:end="127:23">int</name></type> <name pos:start="127:25" pos:end="127:25">t</name> <init pos:start="127:27" pos:end="127:29">= <expr pos:start="127:29" pos:end="127:29"><literal type="number" pos:start="127:29" pos:end="127:29">0</literal></expr></init></decl>, <decl pos:start="127:32" pos:end="127:36"><type ref="prev" pos:start="127:21" pos:end="127:23"/><name pos:start="127:32" pos:end="127:32">b</name> <init pos:start="127:34" pos:end="127:36">= <expr pos:start="127:36" pos:end="127:36"><literal type="number" pos:start="127:36" pos:end="127:36">0</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="129:21" pos:end="129:37"><decl pos:start="129:21" pos:end="129:36"><type pos:start="129:21" pos:end="129:33"><name pos:start="129:21" pos:end="129:33">PutBitContext</name></type> <name pos:start="129:35" pos:end="129:36">pb</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="133:21" pos:end="133:34"><expr pos:start="133:21" pos:end="133:33"><name pos:start="133:21" pos:end="133:31"><name pos:start="133:21" pos:end="133:21">s</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:31">cur_scan</name></name><operator pos:start="133:32" pos:end="133:33">++</operator></expr>;</expr_stmt>



                    <comment type="block" pos:start="137:21" pos:end="137:37">/* find marker */</comment>

                    <while pos:start="139:21" pos:end="444:25">while <condition pos:start="139:27" pos:end="139:45">(<expr pos:start="139:28" pos:end="139:44"><name pos:start="139:28" pos:end="139:30">src</name> <operator pos:start="139:32" pos:end="139:32">+</operator> <name pos:start="139:34" pos:end="139:34">t</name> <operator pos:start="139:36" pos:end="139:36">&lt;</operator> <name pos:start="139:38" pos:end="139:44">buf_end</name></expr>)</condition><block pos:start="139:46" pos:end="444:25">{<block_content pos:start="141:25" pos:end="444:25">

                        <decl_stmt pos:start="141:25" pos:end="141:45"><decl pos:start="141:25" pos:end="141:44"><type pos:start="141:25" pos:end="141:31"><name pos:start="141:25" pos:end="141:31">uint8_t</name></type> <name pos:start="141:33" pos:end="141:33">x</name> <init pos:start="141:35" pos:end="141:44">= <expr pos:start="141:37" pos:end="141:44"><name pos:start="141:37" pos:end="141:44"><name pos:start="141:37" pos:end="141:39">src</name><index pos:start="141:40" pos:end="141:44">[<expr pos:start="141:41" pos:end="141:43"><name pos:start="141:41" pos:end="141:41">t</name><operator pos:start="141:42" pos:end="141:43">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="143:25" pos:end="444:25"><if pos:start="143:25" pos:end="444:25">if <condition pos:start="143:28" pos:end="143:38">(<expr pos:start="143:29" pos:end="143:37"><name pos:start="143:29" pos:end="143:29">x</name> <operator pos:start="143:31" pos:end="143:32">==</operator> <literal type="number" pos:start="143:34" pos:end="143:37">0xff</literal></expr>)</condition><block pos:start="143:39" pos:end="444:25">{<block_content pos:start="145:29" pos:end="444:25">

                            <while pos:start="145:29" pos:end="147:45">while<condition pos:start="145:34" pos:end="145:67">(<expr pos:start="145:35" pos:end="145:66"><operator pos:start="145:35" pos:end="145:35">(</operator><name pos:start="145:36" pos:end="145:38">src</name> <operator pos:start="145:40" pos:end="145:40">+</operator> <name pos:start="145:42" pos:end="145:42">t</name> <operator pos:start="145:44" pos:end="145:44">&lt;</operator> <name pos:start="145:46" pos:end="145:52">buf_end</name><operator pos:start="145:53" pos:end="145:53">)</operator> <operator pos:start="145:55" pos:end="145:56">&amp;&amp;</operator> <name pos:start="145:58" pos:end="145:58">x</name> <operator pos:start="145:60" pos:end="145:61">==</operator> <literal type="number" pos:start="145:63" pos:end="145:66">0xff</literal></expr>)</condition><block type="pseudo" pos:start="147:33" pos:end="147:45"><block_content pos:start="147:33" pos:end="147:45">

                                <expr_stmt pos:start="147:33" pos:end="147:45"><expr pos:start="147:33" pos:end="147:44"><name pos:start="147:33" pos:end="147:33">x</name> <operator pos:start="147:35" pos:end="147:35">=</operator> <name pos:start="147:37" pos:end="147:44"><name pos:start="147:37" pos:end="147:39">src</name><index pos:start="147:40" pos:end="147:44">[<expr pos:start="147:41" pos:end="147:43"><name pos:start="147:41" pos:end="147:41">t</name><operator pos:start="147:42" pos:end="147:43">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

                            <if_stmt pos:start="149:29" pos:end="444:25"><if pos:start="149:29" pos:end="444:25">if <condition pos:start="149:32" pos:end="149:41">(<expr pos:start="149:33" pos:end="149:40"><name pos:start="149:33" pos:end="149:33">x</name> <operator pos:start="149:35" pos:end="149:35">&amp;</operator> <literal type="number" pos:start="149:37" pos:end="149:40">0x80</literal></expr>)</condition> <block pos:start="149:43" pos:end="444:25">{<block_content pos:start="151:33" pos:end="444:25">

                                <expr_stmt pos:start="151:33" pos:end="151:39"><expr pos:start="151:33" pos:end="151:38"><name pos:start="151:33" pos:end="151:33">t</name> <operator pos:start="151:35" pos:end="151:36">-=</operator> <literal type="number" pos:start="151:38" pos:end="151:38">2</literal></expr>;</expr_stmt>





                    <expr_stmt pos:start="157:21" pos:end="157:38"><expr pos:start="157:21" pos:end="157:37"><name pos:start="157:21" pos:end="157:29">bit_count</name> <operator pos:start="157:31" pos:end="157:31">=</operator> <name pos:start="157:33" pos:end="157:33">t</name> <operator pos:start="157:35" pos:end="157:35">*</operator> <literal type="number" pos:start="157:37" pos:end="157:37">8</literal></expr>;</expr_stmt>



                    <expr_stmt pos:start="161:21" pos:end="161:47"><expr pos:start="161:21" pos:end="161:46"><call pos:start="161:21" pos:end="161:46"><name pos:start="161:21" pos:end="161:33">init_put_bits</name><argument_list pos:start="161:34" pos:end="161:46">(<argument pos:start="161:35" pos:end="161:37"><expr pos:start="161:35" pos:end="161:37"><operator pos:start="161:35" pos:end="161:35">&amp;</operator><name pos:start="161:36" pos:end="161:37">pb</name></expr></argument>, <argument pos:start="161:40" pos:end="161:42"><expr pos:start="161:40" pos:end="161:42"><name pos:start="161:40" pos:end="161:42">dst</name></expr></argument>, <argument pos:start="161:45" pos:end="161:45"><expr pos:start="161:45" pos:end="161:45"><name pos:start="161:45" pos:end="161:45">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <comment type="block" pos:start="165:21" pos:end="165:44">/* unescape bitstream */</comment>

                    <while pos:start="167:21" pos:end="444:25">while<condition pos:start="167:26" pos:end="167:32">(<expr pos:start="167:27" pos:end="167:31"><name pos:start="167:27" pos:end="167:27">b</name> <operator pos:start="167:29" pos:end="167:29">&lt;</operator> <name pos:start="167:31" pos:end="167:31">t</name></expr>)</condition><block pos:start="167:33" pos:end="444:25">{<block_content pos:start="169:25" pos:end="444:25">

                        <decl_stmt pos:start="169:25" pos:end="169:45"><decl pos:start="169:25" pos:end="169:44"><type pos:start="169:25" pos:end="169:31"><name pos:start="169:25" pos:end="169:31">uint8_t</name></type> <name pos:start="169:33" pos:end="169:33">x</name> <init pos:start="169:35" pos:end="169:44">= <expr pos:start="169:37" pos:end="169:44"><name pos:start="169:37" pos:end="169:44"><name pos:start="169:37" pos:end="169:39">src</name><index pos:start="169:40" pos:end="169:44">[<expr pos:start="169:41" pos:end="169:43"><name pos:start="169:41" pos:end="169:41">b</name><operator pos:start="169:42" pos:end="169:43">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="171:25" pos:end="171:44"><expr pos:start="171:25" pos:end="171:43"><call pos:start="171:25" pos:end="171:43"><name pos:start="171:25" pos:end="171:32">put_bits</name><argument_list pos:start="171:33" pos:end="171:43">(<argument pos:start="171:34" pos:end="171:36"><expr pos:start="171:34" pos:end="171:36"><operator pos:start="171:34" pos:end="171:34">&amp;</operator><name pos:start="171:35" pos:end="171:36">pb</name></expr></argument>, <argument pos:start="171:39" pos:end="171:39"><expr pos:start="171:39" pos:end="171:39"><literal type="number" pos:start="171:39" pos:end="171:39">8</literal></expr></argument>, <argument pos:start="171:42" pos:end="171:42"><expr pos:start="171:42" pos:end="171:42"><name pos:start="171:42" pos:end="171:42">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="173:25" pos:end="444:25"><if pos:start="173:25" pos:end="444:25">if<condition pos:start="173:27" pos:end="173:37">(<expr pos:start="173:28" pos:end="173:36"><name pos:start="173:28" pos:end="173:28">x</name> <operator pos:start="173:30" pos:end="173:31">==</operator> <literal type="number" pos:start="173:33" pos:end="173:36">0xFF</literal></expr>)</condition><block pos:start="173:38" pos:end="444:25">{<block_content pos:start="175:29" pos:end="444:25">

                            <expr_stmt pos:start="175:29" pos:end="175:41"><expr pos:start="175:29" pos:end="175:40"><name pos:start="175:29" pos:end="175:29">x</name> <operator pos:start="175:31" pos:end="175:31">=</operator> <name pos:start="175:33" pos:end="175:40"><name pos:start="175:33" pos:end="175:35">src</name><index pos:start="175:36" pos:end="175:40">[<expr pos:start="175:37" pos:end="175:39"><name pos:start="175:37" pos:end="175:37">b</name><operator pos:start="175:38" pos:end="175:39">++</operator></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="177:29" pos:end="177:48"><expr pos:start="177:29" pos:end="177:47"><call pos:start="177:29" pos:end="177:47"><name pos:start="177:29" pos:end="177:36">put_bits</name><argument_list pos:start="177:37" pos:end="177:47">(<argument pos:start="177:38" pos:end="177:40"><expr pos:start="177:38" pos:end="177:40"><operator pos:start="177:38" pos:end="177:38">&amp;</operator><name pos:start="177:39" pos:end="177:40">pb</name></expr></argument>, <argument pos:start="177:43" pos:end="177:43"><expr pos:start="177:43" pos:end="177:43"><literal type="number" pos:start="177:43" pos:end="177:43">7</literal></expr></argument>, <argument pos:start="177:46" pos:end="177:46"><expr pos:start="177:46" pos:end="177:46"><name pos:start="177:46" pos:end="177:46">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="179:29" pos:end="179:40"><expr pos:start="179:29" pos:end="179:39"><name pos:start="179:29" pos:end="179:37">bit_count</name><operator pos:start="179:38" pos:end="179:39">--</operator></expr>;</expr_stmt>



                    <expr_stmt pos:start="183:21" pos:end="183:40"><expr pos:start="183:21" pos:end="183:39"><call pos:start="183:21" pos:end="183:39"><name pos:start="183:21" pos:end="183:34">flush_put_bits</name><argument_list pos:start="183:35" pos:end="183:39">(<argument pos:start="183:36" pos:end="183:38"><expr pos:start="183:36" pos:end="183:38"><operator pos:start="183:36" pos:end="183:36">&amp;</operator><name pos:start="183:37" pos:end="183:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="187:21" pos:end="187:58"><expr pos:start="187:21" pos:end="187:57"><call pos:start="187:21" pos:end="187:57"><name pos:start="187:21" pos:end="187:33">init_get_bits</name><argument_list pos:start="187:34" pos:end="187:57">(<argument pos:start="187:35" pos:end="187:40"><expr pos:start="187:35" pos:end="187:40"><operator pos:start="187:35" pos:end="187:35">&amp;</operator><name pos:start="187:36" pos:end="187:40"><name pos:start="187:36" pos:end="187:36">s</name><operator pos:start="187:37" pos:end="187:38">-&gt;</operator><name pos:start="187:39" pos:end="187:40">gb</name></name></expr></argument>, <argument pos:start="187:43" pos:end="187:45"><expr pos:start="187:43" pos:end="187:45"><name pos:start="187:43" pos:end="187:45">dst</name></expr></argument>, <argument pos:start="187:48" pos:end="187:56"><expr pos:start="187:48" pos:end="187:56"><name pos:start="187:48" pos:end="187:56">bit_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <if_stmt pos:start="190:17" pos:end="192:74"><else pos:start="190:17" pos:end="192:74">else<block type="pseudo" pos:start="192:21" pos:end="192:74"><block_content pos:start="192:21" pos:end="192:74">

                    <expr_stmt pos:start="192:21" pos:end="192:74"><expr pos:start="192:21" pos:end="192:73"><call pos:start="192:21" pos:end="192:73"><name pos:start="192:21" pos:end="192:33">init_get_bits</name><argument_list pos:start="192:34" pos:end="192:73">(<argument pos:start="192:35" pos:end="192:40"><expr pos:start="192:35" pos:end="192:40"><operator pos:start="192:35" pos:end="192:35">&amp;</operator><name pos:start="192:36" pos:end="192:40"><name pos:start="192:36" pos:end="192:36">s</name><operator pos:start="192:37" pos:end="192:38">-&gt;</operator><name pos:start="192:39" pos:end="192:40">gb</name></name></expr></argument>, <argument pos:start="192:43" pos:end="192:49"><expr pos:start="192:43" pos:end="192:49"><name pos:start="192:43" pos:end="192:49">buf_ptr</name></expr></argument>, <argument pos:start="192:52" pos:end="192:72"><expr pos:start="192:52" pos:end="192:72"><operator pos:start="192:52" pos:end="192:52">(</operator><name pos:start="192:53" pos:end="192:59">buf_end</name> <operator pos:start="192:61" pos:end="192:61">-</operator> <name pos:start="192:63" pos:end="192:69">buf_ptr</name><operator pos:start="192:70" pos:end="192:70">)</operator><operator pos:start="192:71" pos:end="192:71">*</operator><literal type="number" pos:start="192:72" pos:end="192:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="196:17" pos:end="196:43"><expr pos:start="196:17" pos:end="196:42"><name pos:start="196:17" pos:end="196:29"><name pos:start="196:17" pos:end="196:17">s</name><operator pos:start="196:18" pos:end="196:19">-&gt;</operator><name pos:start="196:20" pos:end="196:29">start_code</name></name> <operator pos:start="196:31" pos:end="196:31">=</operator> <name pos:start="196:33" pos:end="196:42">start_code</name></expr>;</expr_stmt>

                <if_stmt pos:start="198:17" pos:end="444:25"><if pos:start="198:17" pos:end="444:25">if<condition pos:start="198:19" pos:end="198:56">(<expr pos:start="198:20" pos:end="198:55"><name pos:start="198:20" pos:end="198:34"><name pos:start="198:20" pos:end="198:20">s</name><operator pos:start="198:21" pos:end="198:22">-&gt;</operator><name pos:start="198:23" pos:end="198:27">avctx</name><operator pos:start="198:28" pos:end="198:29">-&gt;</operator><name pos:start="198:30" pos:end="198:34">debug</name></name> <operator pos:start="198:36" pos:end="198:36">&amp;</operator> <name pos:start="198:38" pos:end="198:55">FF_DEBUG_STARTCODE</name></expr>)</condition><block pos:start="198:57" pos:end="444:25">{<block_content pos:start="200:21" pos:end="444:25">

                    <expr_stmt pos:start="200:21" pos:end="200:79"><expr pos:start="200:21" pos:end="200:78"><call pos:start="200:21" pos:end="200:78"><name pos:start="200:21" pos:end="200:26">av_log</name><argument_list pos:start="200:27" pos:end="200:78">(<argument pos:start="200:28" pos:end="200:32"><expr pos:start="200:28" pos:end="200:32"><name pos:start="200:28" pos:end="200:32">avctx</name></expr></argument>, <argument pos:start="200:35" pos:end="200:46"><expr pos:start="200:35" pos:end="200:46"><name pos:start="200:35" pos:end="200:46">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="200:49" pos:end="200:65"><expr pos:start="200:49" pos:end="200:65"><literal type="string" pos:start="200:49" pos:end="200:65">"startcode: %X\n"</literal></expr></argument>, <argument pos:start="200:68" pos:end="200:77"><expr pos:start="200:68" pos:end="200:77"><name pos:start="200:68" pos:end="200:77">start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




                <comment type="block" pos:start="205:17" pos:end="205:37">/* process markers */</comment>

                <if_stmt pos:start="207:17" pos:end="444:25"><if pos:start="207:17" pos:end="213:17">if <condition pos:start="207:20" pos:end="207:61">(<expr pos:start="207:21" pos:end="207:60"><name pos:start="207:21" pos:end="207:30">start_code</name> <operator pos:start="207:32" pos:end="207:33">&gt;=</operator> <literal type="number" pos:start="207:35" pos:end="207:38">0xd0</literal> <operator pos:start="207:40" pos:end="207:41">&amp;&amp;</operator> <name pos:start="207:43" pos:end="207:52">start_code</name> <operator pos:start="207:54" pos:end="207:55">&lt;=</operator> <literal type="number" pos:start="207:57" pos:end="207:60">0xd7</literal></expr>)</condition> <block pos:start="207:63" pos:end="213:17">{<block_content pos:start="209:21" pos:end="209:89">

                    <expr_stmt pos:start="209:21" pos:end="209:89"><expr pos:start="209:21" pos:end="209:88"><call pos:start="209:21" pos:end="209:88"><name pos:start="209:21" pos:end="209:26">av_log</name><argument_list pos:start="209:27" pos:end="209:88">(<argument pos:start="209:28" pos:end="209:32"><expr pos:start="209:28" pos:end="209:32"><name pos:start="209:28" pos:end="209:32">avctx</name></expr></argument>, <argument pos:start="209:35" pos:end="209:46"><expr pos:start="209:35" pos:end="209:46"><name pos:start="209:35" pos:end="209:46">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="209:49" pos:end="209:70"><expr pos:start="209:49" pos:end="209:70"><literal type="string" pos:start="209:49" pos:end="209:70">"restart marker: %d\n"</literal></expr></argument>, <argument pos:start="209:73" pos:end="209:87"><expr pos:start="209:73" pos:end="209:87"><name pos:start="209:73" pos:end="209:82">start_code</name><operator pos:start="209:83" pos:end="209:83">&amp;</operator><literal type="number" pos:start="209:84" pos:end="209:87">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="211:21" pos:end="211:36">/* APP fields */</comment>

                </block_content>}</block></if> <if type="elseif" pos:start="213:19" pos:end="219:17">else if <condition pos:start="213:27" pos:end="213:69">(<expr pos:start="213:28" pos:end="213:68"><name pos:start="213:28" pos:end="213:37">start_code</name> <operator pos:start="213:39" pos:end="213:40">&gt;=</operator> <name pos:start="213:42" pos:end="213:45">APP0</name> <operator pos:start="213:47" pos:end="213:48">&amp;&amp;</operator> <name pos:start="213:50" pos:end="213:59">start_code</name> <operator pos:start="213:61" pos:end="213:62">&lt;=</operator> <name pos:start="213:64" pos:end="213:68">APP15</name></expr>)</condition> <block pos:start="213:71" pos:end="219:17">{<block_content pos:start="215:21" pos:end="215:40">

                    <expr_stmt pos:start="215:21" pos:end="215:40"><expr pos:start="215:21" pos:end="215:39"><call pos:start="215:21" pos:end="215:39"><name pos:start="215:21" pos:end="215:36">mjpeg_decode_app</name><argument_list pos:start="215:37" pos:end="215:39">(<argument pos:start="215:38" pos:end="215:38"><expr pos:start="215:38" pos:end="215:38"><name pos:start="215:38" pos:end="215:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="217:21" pos:end="217:33">/* Comment */</comment>

                </block_content>}</block></if> <if type="elseif" pos:start="219:19" pos:end="444:25">else if <condition pos:start="219:27" pos:end="219:45">(<expr pos:start="219:28" pos:end="219:44"><name pos:start="219:28" pos:end="219:37">start_code</name> <operator pos:start="219:39" pos:end="219:40">==</operator> <name pos:start="219:42" pos:end="219:44">COM</name></expr>)</condition><block pos:start="219:46" pos:end="444:25">{<block_content pos:start="221:21" pos:end="444:25">

                    <expr_stmt pos:start="221:21" pos:end="221:40"><expr pos:start="221:21" pos:end="221:39"><call pos:start="221:21" pos:end="221:39"><name pos:start="221:21" pos:end="221:36">mjpeg_decode_com</name><argument_list pos:start="221:37" pos:end="221:39">(<argument pos:start="221:38" pos:end="221:38"><expr pos:start="221:38" pos:end="221:38"><name pos:start="221:38" pos:end="221:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




                <switch pos:start="226:17" pos:end="444:25">switch<condition pos:start="226:23" pos:end="226:34">(<expr pos:start="226:24" pos:end="226:33"><name pos:start="226:24" pos:end="226:33">start_code</name></expr>)</condition> <block pos:start="226:36" pos:end="444:25">{<block_content pos:start="228:17" pos:end="444:25">

                <case pos:start="228:17" pos:end="228:25">case <expr pos:start="228:22" pos:end="228:24"><name pos:start="228:22" pos:end="228:24">SOI</name></expr>:</case>

                    <expr_stmt pos:start="230:21" pos:end="230:44"><expr pos:start="230:21" pos:end="230:43"><name pos:start="230:21" pos:end="230:39"><name pos:start="230:21" pos:end="230:21">s</name><operator pos:start="230:22" pos:end="230:23">-&gt;</operator><name pos:start="230:24" pos:end="230:39">restart_interval</name></name> <operator pos:start="230:41" pos:end="230:41">=</operator> <literal type="number" pos:start="230:43" pos:end="230:43">0</literal></expr>;</expr_stmt>



                    <expr_stmt pos:start="234:21" pos:end="234:41"><expr pos:start="234:21" pos:end="234:40"><name pos:start="234:21" pos:end="234:36"><name pos:start="234:21" pos:end="234:21">s</name><operator pos:start="234:22" pos:end="234:23">-&gt;</operator><name pos:start="234:24" pos:end="234:36">restart_count</name></name> <operator pos:start="234:38" pos:end="234:38">=</operator> <literal type="number" pos:start="234:40" pos:end="234:40">0</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="236:21" pos:end="236:46">/* nothing to do on SOI */</comment>


                <case pos:start="239:17" pos:end="239:25">case <expr pos:start="239:22" pos:end="239:24"><name pos:start="239:22" pos:end="239:24">DQT</name></expr>:</case>

                    <expr_stmt pos:start="241:21" pos:end="241:43"><expr pos:start="241:21" pos:end="241:42"><call pos:start="241:21" pos:end="241:42"><name pos:start="241:21" pos:end="241:39">ff_mjpeg_decode_dqt</name><argument_list pos:start="241:40" pos:end="241:42">(<argument pos:start="241:41" pos:end="241:41"><expr pos:start="241:41" pos:end="241:41"><name pos:start="241:41" pos:end="241:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <case pos:start="244:17" pos:end="244:25">case <expr pos:start="244:22" pos:end="244:24"><name pos:start="244:22" pos:end="244:24">DHT</name></expr>:</case>

                    <if_stmt pos:start="246:21" pos:end="444:25"><if pos:start="246:21" pos:end="444:25">if<condition pos:start="246:23" pos:end="246:50">(<expr pos:start="246:24" pos:end="246:49"><call pos:start="246:24" pos:end="246:45"><name pos:start="246:24" pos:end="246:42">ff_mjpeg_decode_dht</name><argument_list pos:start="246:43" pos:end="246:45">(<argument pos:start="246:44" pos:end="246:44"><expr pos:start="246:44" pos:end="246:44"><name pos:start="246:44" pos:end="246:44">s</name></expr></argument>)</argument_list></call> <operator pos:start="246:47" pos:end="246:47">&lt;</operator> <literal type="number" pos:start="246:49" pos:end="246:49">0</literal></expr>)</condition><block pos:start="246:51" pos:end="444:25">{<block_content pos:start="248:25" pos:end="444:25">

                        <expr_stmt pos:start="248:25" pos:end="248:84"><expr pos:start="248:25" pos:end="248:83"><call pos:start="248:25" pos:end="248:83"><name pos:start="248:25" pos:end="248:30">av_log</name><argument_list pos:start="248:31" pos:end="248:83">(<argument pos:start="248:32" pos:end="248:36"><expr pos:start="248:32" pos:end="248:36"><name pos:start="248:32" pos:end="248:36">avctx</name></expr></argument>, <argument pos:start="248:39" pos:end="248:50"><expr pos:start="248:39" pos:end="248:50"><name pos:start="248:39" pos:end="248:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="248:53" pos:end="248:82"><expr pos:start="248:53" pos:end="248:82"><literal type="string" pos:start="248:53" pos:end="248:82">"huffman table decode error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="250:25" pos:end="250:34">return <expr pos:start="250:32" pos:end="250:33"><operator pos:start="250:32" pos:end="250:32">-</operator><literal type="number" pos:start="250:33" pos:end="250:33">1</literal></expr>;</return>



                <case pos:start="254:17" pos:end="254:26">case <expr pos:start="254:22" pos:end="254:25"><name pos:start="254:22" pos:end="254:25">SOF0</name></expr>:</case>

                    <expr_stmt pos:start="256:21" pos:end="256:34"><expr pos:start="256:21" pos:end="256:33"><name pos:start="256:21" pos:end="256:31"><name pos:start="256:21" pos:end="256:21">s</name><operator pos:start="256:22" pos:end="256:23">-&gt;</operator><name pos:start="256:24" pos:end="256:31">lossless</name></name><operator pos:start="256:32" pos:end="256:32">=</operator><literal type="number" pos:start="256:33" pos:end="256:33">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="258:21" pos:end="258:28"><expr pos:start="258:21" pos:end="258:27"><name pos:start="258:21" pos:end="258:25"><name pos:start="258:21" pos:end="258:21">s</name><operator pos:start="258:22" pos:end="258:23">-&gt;</operator><name pos:start="258:24" pos:end="258:25">ls</name></name><operator pos:start="258:26" pos:end="258:26">=</operator><literal type="number" pos:start="258:27" pos:end="258:27">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="260:21" pos:end="260:37"><expr pos:start="260:21" pos:end="260:36"><name pos:start="260:21" pos:end="260:34"><name pos:start="260:21" pos:end="260:21">s</name><operator pos:start="260:22" pos:end="260:23">-&gt;</operator><name pos:start="260:24" pos:end="260:34">progressive</name></name><operator pos:start="260:35" pos:end="260:35">=</operator><literal type="number" pos:start="260:36" pos:end="260:36">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="262:21" pos:end="264:34"><if pos:start="262:21" pos:end="264:34">if <condition pos:start="262:24" pos:end="262:51">(<expr pos:start="262:25" pos:end="262:50"><call pos:start="262:25" pos:end="262:46"><name pos:start="262:25" pos:end="262:43">ff_mjpeg_decode_sof</name><argument_list pos:start="262:44" pos:end="262:46">(<argument pos:start="262:45" pos:end="262:45"><expr pos:start="262:45" pos:end="262:45"><name pos:start="262:45" pos:end="262:45">s</name></expr></argument>)</argument_list></call> <operator pos:start="262:48" pos:end="262:48">&lt;</operator> <literal type="number" pos:start="262:50" pos:end="262:50">0</literal></expr>)</condition><block type="pseudo" pos:start="264:25" pos:end="264:34"><block_content pos:start="264:25" pos:end="264:34">

                        <return pos:start="264:25" pos:end="264:34">return <expr pos:start="264:32" pos:end="264:33"><operator pos:start="264:32" pos:end="264:32">-</operator><literal type="number" pos:start="264:33" pos:end="264:33">1</literal></expr>;</return></block_content></block></if></if_stmt>


                <case pos:start="267:17" pos:end="267:26">case <expr pos:start="267:22" pos:end="267:25"><name pos:start="267:22" pos:end="267:25">SOF2</name></expr>:</case>

                    <expr_stmt pos:start="269:21" pos:end="269:34"><expr pos:start="269:21" pos:end="269:33"><name pos:start="269:21" pos:end="269:31"><name pos:start="269:21" pos:end="269:21">s</name><operator pos:start="269:22" pos:end="269:23">-&gt;</operator><name pos:start="269:24" pos:end="269:31">lossless</name></name><operator pos:start="269:32" pos:end="269:32">=</operator><literal type="number" pos:start="269:33" pos:end="269:33">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="271:21" pos:end="271:28"><expr pos:start="271:21" pos:end="271:27"><name pos:start="271:21" pos:end="271:25"><name pos:start="271:21" pos:end="271:21">s</name><operator pos:start="271:22" pos:end="271:23">-&gt;</operator><name pos:start="271:24" pos:end="271:25">ls</name></name><operator pos:start="271:26" pos:end="271:26">=</operator><literal type="number" pos:start="271:27" pos:end="271:27">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="273:21" pos:end="273:37"><expr pos:start="273:21" pos:end="273:36"><name pos:start="273:21" pos:end="273:34"><name pos:start="273:21" pos:end="273:21">s</name><operator pos:start="273:22" pos:end="273:23">-&gt;</operator><name pos:start="273:24" pos:end="273:34">progressive</name></name><operator pos:start="273:35" pos:end="273:35">=</operator><literal type="number" pos:start="273:36" pos:end="273:36">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="275:21" pos:end="277:34"><if pos:start="275:21" pos:end="277:34">if <condition pos:start="275:24" pos:end="275:51">(<expr pos:start="275:25" pos:end="275:50"><call pos:start="275:25" pos:end="275:46"><name pos:start="275:25" pos:end="275:43">ff_mjpeg_decode_sof</name><argument_list pos:start="275:44" pos:end="275:46">(<argument pos:start="275:45" pos:end="275:45"><expr pos:start="275:45" pos:end="275:45"><name pos:start="275:45" pos:end="275:45">s</name></expr></argument>)</argument_list></call> <operator pos:start="275:48" pos:end="275:48">&lt;</operator> <literal type="number" pos:start="275:50" pos:end="275:50">0</literal></expr>)</condition><block type="pseudo" pos:start="277:25" pos:end="277:34"><block_content pos:start="277:25" pos:end="277:34">

                        <return pos:start="277:25" pos:end="277:34">return <expr pos:start="277:32" pos:end="277:33"><operator pos:start="277:32" pos:end="277:32">-</operator><literal type="number" pos:start="277:33" pos:end="277:33">1</literal></expr>;</return></block_content></block></if></if_stmt>


                <case pos:start="280:17" pos:end="280:26">case <expr pos:start="280:22" pos:end="280:25"><name pos:start="280:22" pos:end="280:25">SOF3</name></expr>:</case>

                    <expr_stmt pos:start="282:21" pos:end="282:34"><expr pos:start="282:21" pos:end="282:33"><name pos:start="282:21" pos:end="282:31"><name pos:start="282:21" pos:end="282:21">s</name><operator pos:start="282:22" pos:end="282:23">-&gt;</operator><name pos:start="282:24" pos:end="282:31">lossless</name></name><operator pos:start="282:32" pos:end="282:32">=</operator><literal type="number" pos:start="282:33" pos:end="282:33">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="284:21" pos:end="284:28"><expr pos:start="284:21" pos:end="284:27"><name pos:start="284:21" pos:end="284:25"><name pos:start="284:21" pos:end="284:21">s</name><operator pos:start="284:22" pos:end="284:23">-&gt;</operator><name pos:start="284:24" pos:end="284:25">ls</name></name><operator pos:start="284:26" pos:end="284:26">=</operator><literal type="number" pos:start="284:27" pos:end="284:27">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="286:21" pos:end="286:37"><expr pos:start="286:21" pos:end="286:36"><name pos:start="286:21" pos:end="286:34"><name pos:start="286:21" pos:end="286:21">s</name><operator pos:start="286:22" pos:end="286:23">-&gt;</operator><name pos:start="286:24" pos:end="286:34">progressive</name></name><operator pos:start="286:35" pos:end="286:35">=</operator><literal type="number" pos:start="286:36" pos:end="286:36">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="288:21" pos:end="290:34"><if pos:start="288:21" pos:end="290:34">if <condition pos:start="288:24" pos:end="288:51">(<expr pos:start="288:25" pos:end="288:50"><call pos:start="288:25" pos:end="288:46"><name pos:start="288:25" pos:end="288:43">ff_mjpeg_decode_sof</name><argument_list pos:start="288:44" pos:end="288:46">(<argument pos:start="288:45" pos:end="288:45"><expr pos:start="288:45" pos:end="288:45"><name pos:start="288:45" pos:end="288:45">s</name></expr></argument>)</argument_list></call> <operator pos:start="288:48" pos:end="288:48">&lt;</operator> <literal type="number" pos:start="288:50" pos:end="288:50">0</literal></expr>)</condition><block type="pseudo" pos:start="290:25" pos:end="290:34"><block_content pos:start="290:25" pos:end="290:34">

                        <return pos:start="290:25" pos:end="290:34">return <expr pos:start="290:32" pos:end="290:33"><operator pos:start="290:32" pos:end="290:32">-</operator><literal type="number" pos:start="290:33" pos:end="290:33">1</literal></expr>;</return></block_content></block></if></if_stmt>


                <case pos:start="293:17" pos:end="293:27">case <expr pos:start="293:22" pos:end="293:26"><name pos:start="293:22" pos:end="293:26">SOF48</name></expr>:</case>

                    <expr_stmt pos:start="295:21" pos:end="295:34"><expr pos:start="295:21" pos:end="295:33"><name pos:start="295:21" pos:end="295:31"><name pos:start="295:21" pos:end="295:21">s</name><operator pos:start="295:22" pos:end="295:23">-&gt;</operator><name pos:start="295:24" pos:end="295:31">lossless</name></name><operator pos:start="295:32" pos:end="295:32">=</operator><literal type="number" pos:start="295:33" pos:end="295:33">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="297:21" pos:end="297:28"><expr pos:start="297:21" pos:end="297:27"><name pos:start="297:21" pos:end="297:25"><name pos:start="297:21" pos:end="297:21">s</name><operator pos:start="297:22" pos:end="297:23">-&gt;</operator><name pos:start="297:24" pos:end="297:25">ls</name></name><operator pos:start="297:26" pos:end="297:26">=</operator><literal type="number" pos:start="297:27" pos:end="297:27">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="299:21" pos:end="299:37"><expr pos:start="299:21" pos:end="299:36"><name pos:start="299:21" pos:end="299:34"><name pos:start="299:21" pos:end="299:21">s</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:34">progressive</name></name><operator pos:start="299:35" pos:end="299:35">=</operator><literal type="number" pos:start="299:36" pos:end="299:36">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="301:21" pos:end="303:34"><if pos:start="301:21" pos:end="303:34">if <condition pos:start="301:24" pos:end="301:51">(<expr pos:start="301:25" pos:end="301:50"><call pos:start="301:25" pos:end="301:46"><name pos:start="301:25" pos:end="301:43">ff_mjpeg_decode_sof</name><argument_list pos:start="301:44" pos:end="301:46">(<argument pos:start="301:45" pos:end="301:45"><expr pos:start="301:45" pos:end="301:45"><name pos:start="301:45" pos:end="301:45">s</name></expr></argument>)</argument_list></call> <operator pos:start="301:48" pos:end="301:48">&lt;</operator> <literal type="number" pos:start="301:50" pos:end="301:50">0</literal></expr>)</condition><block type="pseudo" pos:start="303:25" pos:end="303:34"><block_content pos:start="303:25" pos:end="303:34">

                        <return pos:start="303:25" pos:end="303:34">return <expr pos:start="303:32" pos:end="303:33"><operator pos:start="303:32" pos:end="303:32">-</operator><literal type="number" pos:start="303:33" pos:end="303:33">1</literal></expr>;</return></block_content></block></if></if_stmt>


                <case pos:start="306:17" pos:end="306:25">case <expr pos:start="306:22" pos:end="306:24"><name pos:start="306:22" pos:end="306:24">LSE</name></expr>:</case>

                    <if_stmt pos:start="308:21" pos:end="310:34"><if pos:start="308:21" pos:end="310:34">if <condition pos:start="308:24" pos:end="308:78">(<expr pos:start="308:25" pos:end="308:77"><operator pos:start="308:25" pos:end="308:25">!</operator><name pos:start="308:26" pos:end="308:46">CONFIG_JPEGLS_DECODER</name> <operator pos:start="308:48" pos:end="308:49">||</operator> <call pos:start="308:51" pos:end="308:73"><name pos:start="308:51" pos:end="308:70">ff_jpegls_decode_lse</name><argument_list pos:start="308:71" pos:end="308:73">(<argument pos:start="308:72" pos:end="308:72"><expr pos:start="308:72" pos:end="308:72"><name pos:start="308:72" pos:end="308:72">s</name></expr></argument>)</argument_list></call> <operator pos:start="308:75" pos:end="308:75">&lt;</operator> <literal type="number" pos:start="308:77" pos:end="308:77">0</literal></expr>)</condition><block type="pseudo" pos:start="310:25" pos:end="310:34"><block_content pos:start="310:25" pos:end="310:34">

                        <return pos:start="310:25" pos:end="310:34">return <expr pos:start="310:32" pos:end="310:33"><operator pos:start="310:32" pos:end="310:32">-</operator><literal type="number" pos:start="310:33" pos:end="310:33">1</literal></expr>;</return></block_content></block></if></if_stmt>


                <case pos:start="313:17" pos:end="313:25">case <expr pos:start="313:22" pos:end="313:24"><name pos:start="313:22" pos:end="313:24">EOI</name></expr>:</case>

                    <expr_stmt pos:start="315:21" pos:end="315:36"><expr pos:start="315:21" pos:end="315:35"><name pos:start="315:21" pos:end="315:31"><name pos:start="315:21" pos:end="315:21">s</name><operator pos:start="315:22" pos:end="315:23">-&gt;</operator><name pos:start="315:24" pos:end="315:31">cur_scan</name></name> <operator pos:start="315:33" pos:end="315:33">=</operator> <literal type="number" pos:start="315:35" pos:end="315:35">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="317:21" pos:end="323:94"><if pos:start="317:21" pos:end="323:94">if <condition pos:start="317:24" pos:end="317:81">(<expr pos:start="317:25" pos:end="317:80"><operator pos:start="317:25" pos:end="317:25">(</operator><name pos:start="317:26" pos:end="317:38"><name pos:start="317:26" pos:end="317:26">s</name><operator pos:start="317:27" pos:end="317:28">-&gt;</operator><name pos:start="317:29" pos:end="317:38">buggy_avid</name></name> <operator pos:start="317:40" pos:end="317:41">&amp;&amp;</operator> <operator pos:start="317:43" pos:end="317:43">!</operator><name pos:start="317:44" pos:end="317:56"><name pos:start="317:44" pos:end="317:44">s</name><operator pos:start="317:45" pos:end="317:46">-&gt;</operator><name pos:start="317:47" pos:end="317:56">interlaced</name></name><operator pos:start="317:57" pos:end="317:57">)</operator> <operator pos:start="317:59" pos:end="317:60">||</operator> <name pos:start="317:62" pos:end="317:80"><name pos:start="317:62" pos:end="317:62">s</name><operator pos:start="317:63" pos:end="317:64">-&gt;</operator><name pos:start="317:65" pos:end="317:80">restart_interval</name></name></expr>)</condition><block type="pseudo" pos:start="320:1" pos:end="323:94"><block_content pos:start="320:1" pos:end="323:94">


<label pos:start="320:1" pos:end="320:11"><name pos:start="320:1" pos:end="320:10">eoi_parser</name>:</label>


                        <expr_stmt pos:start="323:25" pos:end="323:94"><expr pos:start="323:25" pos:end="323:93"><call pos:start="323:25" pos:end="323:93"><name pos:start="323:25" pos:end="323:30">av_log</name><argument_list pos:start="323:31" pos:end="323:93">(<argument pos:start="323:32" pos:end="323:36"><expr pos:start="323:32" pos:end="323:36"><name pos:start="323:32" pos:end="323:36">avctx</name></expr></argument>, <argument pos:start="323:39" pos:end="323:52"><expr pos:start="323:39" pos:end="323:52"><name pos:start="323:39" pos:end="323:52">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="323:55" pos:end="323:92"><expr pos:start="323:55" pos:end="323:92"><literal type="string" pos:start="323:55" pos:end="323:92">"Found EOI before any SOF, ignoring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <block pos:start="327:21" pos:end="444:25">{<block_content pos:start="329:25" pos:end="444:25">

                        <if_stmt pos:start="329:25" pos:end="444:25"><if pos:start="329:25" pos:end="444:25">if <condition pos:start="329:28" pos:end="329:42">(<expr pos:start="329:29" pos:end="329:41"><name pos:start="329:29" pos:end="329:41"><name pos:start="329:29" pos:end="329:29">s</name><operator pos:start="329:30" pos:end="329:31">-&gt;</operator><name pos:start="329:32" pos:end="329:41">interlaced</name></name></expr>)</condition> <block pos:start="329:44" pos:end="444:25">{<block_content pos:start="331:29" pos:end="444:25">

                            <expr_stmt pos:start="331:29" pos:end="331:49"><expr pos:start="331:29" pos:end="331:48"><name pos:start="331:29" pos:end="331:43"><name pos:start="331:29" pos:end="331:29">s</name><operator pos:start="331:30" pos:end="331:31">-&gt;</operator><name pos:start="331:32" pos:end="331:43">bottom_field</name></name> <operator pos:start="331:45" pos:end="331:46">^=</operator> <literal type="number" pos:start="331:48" pos:end="331:48">1</literal></expr>;</expr_stmt>

                            <comment type="block" pos:start="333:29" pos:end="333:78">/* if not bottom field, do not output image yet */</comment>

                            <if_stmt pos:start="335:29" pos:end="337:49"><if pos:start="335:29" pos:end="337:49">if <condition pos:start="335:32" pos:end="335:74">(<expr pos:start="335:33" pos:end="335:73"><name pos:start="335:33" pos:end="335:47"><name pos:start="335:33" pos:end="335:33">s</name><operator pos:start="335:34" pos:end="335:35">-&gt;</operator><name pos:start="335:36" pos:end="335:47">bottom_field</name></name> <operator pos:start="335:49" pos:end="335:50">==</operator> <operator pos:start="335:52" pos:end="335:52">!</operator><name pos:start="335:53" pos:end="335:73"><name pos:start="335:53" pos:end="335:53">s</name><operator pos:start="335:54" pos:end="335:55">-&gt;</operator><name pos:start="335:56" pos:end="335:73">interlace_polarity</name></name></expr>)</condition><block type="pseudo" pos:start="337:33" pos:end="337:49"><block_content pos:start="337:33" pos:end="337:49">

                                <goto pos:start="337:33" pos:end="337:49">goto <name pos:start="337:38" pos:end="337:48">not_the_end</name>;</goto></block_content></block></if></if_stmt>


                        <expr_stmt pos:start="340:25" pos:end="340:46"><expr pos:start="340:25" pos:end="340:45"><operator pos:start="340:25" pos:end="340:25">*</operator><name pos:start="340:26" pos:end="340:32">picture</name> <operator pos:start="340:34" pos:end="340:34">=</operator> <name pos:start="340:36" pos:end="340:45"><name pos:start="340:36" pos:end="340:36">s</name><operator pos:start="340:37" pos:end="340:38">-&gt;</operator><name pos:start="340:39" pos:end="340:45">picture</name></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="342:25" pos:end="342:53"><expr pos:start="342:25" pos:end="342:52"><operator pos:start="342:25" pos:end="342:25">*</operator><name pos:start="342:26" pos:end="342:34">data_size</name> <operator pos:start="342:36" pos:end="342:36">=</operator> <sizeof pos:start="342:38" pos:end="342:52">sizeof<argument_list pos:start="342:44" pos:end="342:52">(<argument pos:start="342:45" pos:end="342:51"><expr pos:start="342:45" pos:end="342:51"><name pos:start="342:45" pos:end="342:51">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



                        <if_stmt pos:start="346:25" pos:end="444:25"><if pos:start="346:25" pos:end="444:25">if<condition pos:start="346:27" pos:end="346:40">(<expr pos:start="346:28" pos:end="346:39"><operator pos:start="346:28" pos:end="346:28">!</operator><name pos:start="346:29" pos:end="346:39"><name pos:start="346:29" pos:end="346:29">s</name><operator pos:start="346:30" pos:end="346:31">-&gt;</operator><name pos:start="346:32" pos:end="346:39">lossless</name></name></expr>)</condition><block pos:start="346:41" pos:end="444:25">{<block_content pos:start="348:29" pos:end="444:25">

                            <expr_stmt pos:start="348:29" pos:end="348:95"><expr pos:start="348:29" pos:end="348:94"><name pos:start="348:29" pos:end="348:44"><name pos:start="348:29" pos:end="348:35">picture</name><operator pos:start="348:36" pos:end="348:37">-&gt;</operator><name pos:start="348:38" pos:end="348:44">quality</name></name><operator pos:start="348:45" pos:end="348:45">=</operator> <call pos:start="348:47" pos:end="348:94"><name pos:start="348:47" pos:end="348:52">FFMAX3</name><argument_list pos:start="348:53" pos:end="348:94">(<argument pos:start="348:54" pos:end="348:65"><expr pos:start="348:54" pos:end="348:65"><name pos:start="348:54" pos:end="348:65"><name pos:start="348:54" pos:end="348:54">s</name><operator pos:start="348:55" pos:end="348:56">-&gt;</operator><name pos:start="348:57" pos:end="348:62">qscale</name><index pos:start="348:63" pos:end="348:65">[<expr pos:start="348:64" pos:end="348:64"><literal type="number" pos:start="348:64" pos:end="348:64">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="348:68" pos:end="348:79"><expr pos:start="348:68" pos:end="348:79"><name pos:start="348:68" pos:end="348:79"><name pos:start="348:68" pos:end="348:68">s</name><operator pos:start="348:69" pos:end="348:70">-&gt;</operator><name pos:start="348:71" pos:end="348:76">qscale</name><index pos:start="348:77" pos:end="348:79">[<expr pos:start="348:78" pos:end="348:78"><literal type="number" pos:start="348:78" pos:end="348:78">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="348:82" pos:end="348:93"><expr pos:start="348:82" pos:end="348:93"><name pos:start="348:82" pos:end="348:93"><name pos:start="348:82" pos:end="348:82">s</name><operator pos:start="348:83" pos:end="348:84">-&gt;</operator><name pos:start="348:85" pos:end="348:90">qscale</name><index pos:start="348:91" pos:end="348:93">[<expr pos:start="348:92" pos:end="348:92"><literal type="number" pos:start="348:92" pos:end="348:92">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="350:29" pos:end="350:48"><expr pos:start="350:29" pos:end="350:47"><name pos:start="350:29" pos:end="350:44"><name pos:start="350:29" pos:end="350:35">picture</name><operator pos:start="350:36" pos:end="350:37">-&gt;</operator><name pos:start="350:38" pos:end="350:44">qstride</name></name><operator pos:start="350:45" pos:end="350:45">=</operator> <literal type="number" pos:start="350:47" pos:end="350:47">0</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="352:29" pos:end="352:67"><expr pos:start="352:29" pos:end="352:66"><name pos:start="352:29" pos:end="352:49"><name pos:start="352:29" pos:end="352:35">picture</name><operator pos:start="352:36" pos:end="352:37">-&gt;</operator><name pos:start="352:38" pos:end="352:49">qscale_table</name></name><operator pos:start="352:50" pos:end="352:50">=</operator> <name pos:start="352:52" pos:end="352:66"><name pos:start="352:52" pos:end="352:52">s</name><operator pos:start="352:53" pos:end="352:54">-&gt;</operator><name pos:start="352:55" pos:end="352:66">qscale_table</name></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="354:29" pos:end="354:94"><expr pos:start="354:29" pos:end="354:93"><call pos:start="354:29" pos:end="354:93"><name pos:start="354:29" pos:end="354:34">memset</name><argument_list pos:start="354:35" pos:end="354:93">(<argument pos:start="354:36" pos:end="354:56"><expr pos:start="354:36" pos:end="354:56"><name pos:start="354:36" pos:end="354:56"><name pos:start="354:36" pos:end="354:42">picture</name><operator pos:start="354:43" pos:end="354:44">-&gt;</operator><name pos:start="354:45" pos:end="354:56">qscale_table</name></name></expr></argument>, <argument pos:start="354:59" pos:end="354:74"><expr pos:start="354:59" pos:end="354:74"><name pos:start="354:59" pos:end="354:74"><name pos:start="354:59" pos:end="354:65">picture</name><operator pos:start="354:66" pos:end="354:67">-&gt;</operator><name pos:start="354:68" pos:end="354:74">quality</name></name></expr></argument>, <argument pos:start="354:77" pos:end="354:92"><expr pos:start="354:77" pos:end="354:92"><operator pos:start="354:77" pos:end="354:77">(</operator><name pos:start="354:78" pos:end="354:85"><name pos:start="354:78" pos:end="354:78">s</name><operator pos:start="354:79" pos:end="354:80">-&gt;</operator><name pos:start="354:81" pos:end="354:85">width</name></name><operator pos:start="354:86" pos:end="354:86">+</operator><literal type="number" pos:start="354:87" pos:end="354:88">15</literal><operator pos:start="354:89" pos:end="354:89">)</operator><operator pos:start="354:90" pos:end="354:90">/</operator><literal type="number" pos:start="354:91" pos:end="354:92">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="356:29" pos:end="358:90"><if pos:start="356:29" pos:end="358:90">if<condition pos:start="356:31" pos:end="356:58">(<expr pos:start="356:32" pos:end="356:57"><name pos:start="356:32" pos:end="356:43"><name pos:start="356:32" pos:end="356:36">avctx</name><operator pos:start="356:37" pos:end="356:38">-&gt;</operator><name pos:start="356:39" pos:end="356:43">debug</name></name> <operator pos:start="356:45" pos:end="356:45">&amp;</operator> <name pos:start="356:47" pos:end="356:57">FF_DEBUG_QP</name></expr>)</condition><block type="pseudo" pos:start="358:33" pos:end="358:90"><block_content pos:start="358:33" pos:end="358:90">

                                <expr_stmt pos:start="358:33" pos:end="358:90"><expr pos:start="358:33" pos:end="358:89"><call pos:start="358:33" pos:end="358:89"><name pos:start="358:33" pos:end="358:38">av_log</name><argument_list pos:start="358:39" pos:end="358:89">(<argument pos:start="358:40" pos:end="358:44"><expr pos:start="358:40" pos:end="358:44"><name pos:start="358:40" pos:end="358:44">avctx</name></expr></argument>, <argument pos:start="358:47" pos:end="358:58"><expr pos:start="358:47" pos:end="358:58"><name pos:start="358:47" pos:end="358:58">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="358:61" pos:end="358:70"><expr pos:start="358:61" pos:end="358:70"><literal type="string" pos:start="358:61" pos:end="358:70">"QP: %d\n"</literal></expr></argument>, <argument pos:start="358:73" pos:end="358:88"><expr pos:start="358:73" pos:end="358:88"><name pos:start="358:73" pos:end="358:88"><name pos:start="358:73" pos:end="358:79">picture</name><operator pos:start="358:80" pos:end="358:81">-&gt;</operator><name pos:start="358:82" pos:end="358:88">quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="360:29" pos:end="360:60"><expr pos:start="360:29" pos:end="360:59"><name pos:start="360:29" pos:end="360:44"><name pos:start="360:29" pos:end="360:35">picture</name><operator pos:start="360:36" pos:end="360:37">-&gt;</operator><name pos:start="360:38" pos:end="360:44">quality</name></name><operator pos:start="360:45" pos:end="360:46">*=</operator> <name pos:start="360:48" pos:end="360:59">FF_QP2LAMBDA</name></expr>;</expr_stmt>




                        <goto pos:start="365:25" pos:end="365:37">goto <name pos:start="365:30" pos:end="365:36">the_end</name>;</goto>



                <case pos:start="369:17" pos:end="369:25">case <expr pos:start="369:22" pos:end="369:24"><name pos:start="369:22" pos:end="369:24">SOS</name></expr>:</case>





                    <expr_stmt pos:start="375:21" pos:end="375:43"><expr pos:start="375:21" pos:end="375:42"><call pos:start="375:21" pos:end="375:42"><name pos:start="375:21" pos:end="375:39">ff_mjpeg_decode_sos</name><argument_list pos:start="375:40" pos:end="375:42">(<argument pos:start="375:41" pos:end="375:41"><expr pos:start="375:41" pos:end="375:41"><name pos:start="375:41" pos:end="375:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="377:21" pos:end="377:65">/* buggy avid puts EOI every 10-20th frame */</comment>

                    <comment type="block" pos:start="379:21" pos:end="379:63">/* if restart period is over process EOI */</comment>

                    <if_stmt pos:start="381:21" pos:end="383:40"><if pos:start="381:21" pos:end="383:40">if <condition pos:start="381:24" pos:end="381:81">(<expr pos:start="381:25" pos:end="381:80"><operator pos:start="381:25" pos:end="381:25">(</operator><name pos:start="381:26" pos:end="381:38"><name pos:start="381:26" pos:end="381:26">s</name><operator pos:start="381:27" pos:end="381:28">-&gt;</operator><name pos:start="381:29" pos:end="381:38">buggy_avid</name></name> <operator pos:start="381:40" pos:end="381:41">&amp;&amp;</operator> <operator pos:start="381:43" pos:end="381:43">!</operator><name pos:start="381:44" pos:end="381:56"><name pos:start="381:44" pos:end="381:44">s</name><operator pos:start="381:45" pos:end="381:46">-&gt;</operator><name pos:start="381:47" pos:end="381:56">interlaced</name></name><operator pos:start="381:57" pos:end="381:57">)</operator> <operator pos:start="381:59" pos:end="381:60">||</operator> <name pos:start="381:62" pos:end="381:80"><name pos:start="381:62" pos:end="381:62">s</name><operator pos:start="381:63" pos:end="381:64">-&gt;</operator><name pos:start="381:65" pos:end="381:80">restart_interval</name></name></expr>)</condition><block type="pseudo" pos:start="383:25" pos:end="383:40"><block_content pos:start="383:25" pos:end="383:40">

                        <goto pos:start="383:25" pos:end="383:40">goto <name pos:start="383:30" pos:end="383:39">eoi_parser</name>;</goto></block_content></block></if></if_stmt>


                <case pos:start="386:17" pos:end="386:25">case <expr pos:start="386:22" pos:end="386:24"><name pos:start="386:22" pos:end="386:24">DRI</name></expr>:</case>

                    <expr_stmt pos:start="388:21" pos:end="388:40"><expr pos:start="388:21" pos:end="388:39"><call pos:start="388:21" pos:end="388:39"><name pos:start="388:21" pos:end="388:36">mjpeg_decode_dri</name><argument_list pos:start="388:37" pos:end="388:39">(<argument pos:start="388:38" pos:end="388:38"><expr pos:start="388:38" pos:end="388:38"><name pos:start="388:38" pos:end="388:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <case pos:start="391:17" pos:end="391:26">case <expr pos:start="391:22" pos:end="391:25"><name pos:start="391:22" pos:end="391:25">SOF1</name></expr>:</case>

                <case pos:start="393:17" pos:end="393:26">case <expr pos:start="393:22" pos:end="393:25"><name pos:start="393:22" pos:end="393:25">SOF5</name></expr>:</case>

                <case pos:start="395:17" pos:end="395:26">case <expr pos:start="395:22" pos:end="395:25"><name pos:start="395:22" pos:end="395:25">SOF6</name></expr>:</case>

                <case pos:start="397:17" pos:end="397:26">case <expr pos:start="397:22" pos:end="397:25"><name pos:start="397:22" pos:end="397:25">SOF7</name></expr>:</case>

                <case pos:start="399:17" pos:end="399:26">case <expr pos:start="399:22" pos:end="399:25"><name pos:start="399:22" pos:end="399:25">SOF9</name></expr>:</case>

                <case pos:start="401:17" pos:end="401:27">case <expr pos:start="401:22" pos:end="401:26"><name pos:start="401:22" pos:end="401:26">SOF10</name></expr>:</case>

                <case pos:start="403:17" pos:end="403:27">case <expr pos:start="403:22" pos:end="403:26"><name pos:start="403:22" pos:end="403:26">SOF11</name></expr>:</case>

                <case pos:start="405:17" pos:end="405:27">case <expr pos:start="405:22" pos:end="405:26"><name pos:start="405:22" pos:end="405:26">SOF13</name></expr>:</case>

                <case pos:start="407:17" pos:end="407:27">case <expr pos:start="407:22" pos:end="407:26"><name pos:start="407:22" pos:end="407:26">SOF14</name></expr>:</case>

                <case pos:start="409:17" pos:end="409:27">case <expr pos:start="409:22" pos:end="409:26"><name pos:start="409:22" pos:end="409:26">SOF15</name></expr>:</case>

                <case pos:start="411:17" pos:end="411:25">case <expr pos:start="411:22" pos:end="411:24"><name pos:start="411:22" pos:end="411:24">JPG</name></expr>:</case>

                    <expr_stmt pos:start="413:21" pos:end="413:101"><expr pos:start="413:21" pos:end="413:100"><call pos:start="413:21" pos:end="413:100"><name pos:start="413:21" pos:end="413:26">av_log</name><argument_list pos:start="413:27" pos:end="413:100">(<argument pos:start="413:28" pos:end="413:32"><expr pos:start="413:28" pos:end="413:32"><name pos:start="413:28" pos:end="413:32">avctx</name></expr></argument>, <argument pos:start="413:35" pos:end="413:46"><expr pos:start="413:35" pos:end="413:46"><name pos:start="413:35" pos:end="413:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="413:49" pos:end="413:87"><expr pos:start="413:49" pos:end="413:87"><literal type="string" pos:start="413:49" pos:end="413:87">"mjpeg: unsupported coding type (%x)\n"</literal></expr></argument>, <argument pos:start="413:90" pos:end="413:99"><expr pos:start="413:90" pos:end="413:99"><name pos:start="413:90" pos:end="413:99">start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="line" pos:start="416:1" pos:end="416:26">//                default:</comment>

<comment type="line" pos:start="418:1" pos:end="418:77">//                    printf("mjpeg: unsupported marker (%x)\n", start_code);</comment>

<comment type="line" pos:start="420:1" pos:end="420:28">//                    break;</comment>




<label pos:start="425:1" pos:end="425:12"><name pos:start="425:1" pos:end="425:11">not_the_end</name>:</label>

                <comment type="block" pos:start="427:17" pos:end="427:44">/* eof process start code */</comment>

                <expr_stmt pos:start="429:17" pos:end="429:56"><expr pos:start="429:17" pos:end="429:55"><name pos:start="429:17" pos:end="429:23">buf_ptr</name> <operator pos:start="429:25" pos:end="429:26">+=</operator> <operator pos:start="429:28" pos:end="429:28">(</operator><call pos:start="429:29" pos:end="429:50"><name pos:start="429:29" pos:end="429:42">get_bits_count</name><argument_list pos:start="429:43" pos:end="429:50">(<argument pos:start="429:44" pos:end="429:49"><expr pos:start="429:44" pos:end="429:49"><operator pos:start="429:44" pos:end="429:44">&amp;</operator><name pos:start="429:45" pos:end="429:49"><name pos:start="429:45" pos:end="429:45">s</name><operator pos:start="429:46" pos:end="429:47">-&gt;</operator><name pos:start="429:48" pos:end="429:49">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="429:51" pos:end="429:51">+</operator><literal type="number" pos:start="429:52" pos:end="429:52">7</literal><operator pos:start="429:53" pos:end="429:53">)</operator><operator pos:start="429:54" pos:end="429:54">/</operator><literal type="number" pos:start="429:55" pos:end="429:55">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="431:17" pos:end="433:77"><expr pos:start="431:17" pos:end="433:76"><call pos:start="431:17" pos:end="433:76"><name pos:start="431:17" pos:end="431:22">av_log</name><argument_list pos:start="431:23" pos:end="433:76">(<argument pos:start="431:24" pos:end="431:28"><expr pos:start="431:24" pos:end="431:28"><name pos:start="431:24" pos:end="431:28">avctx</name></expr></argument>, <argument pos:start="431:31" pos:end="431:42"><expr pos:start="431:31" pos:end="431:42"><name pos:start="431:31" pos:end="431:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="431:45" pos:end="431:85"><expr pos:start="431:45" pos:end="431:85"><literal type="string" pos:start="431:45" pos:end="431:85">"marker parser used %d bytes (%d bits)\n"</literal></expr></argument>,

                       <argument pos:start="433:24" pos:end="433:51"><expr pos:start="433:24" pos:end="433:51"><operator pos:start="433:24" pos:end="433:24">(</operator><call pos:start="433:25" pos:end="433:46"><name pos:start="433:25" pos:end="433:38">get_bits_count</name><argument_list pos:start="433:39" pos:end="433:46">(<argument pos:start="433:40" pos:end="433:45"><expr pos:start="433:40" pos:end="433:45"><operator pos:start="433:40" pos:end="433:40">&amp;</operator><name pos:start="433:41" pos:end="433:45"><name pos:start="433:41" pos:end="433:41">s</name><operator pos:start="433:42" pos:end="433:43">-&gt;</operator><name pos:start="433:44" pos:end="433:45">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="433:47" pos:end="433:47">+</operator><literal type="number" pos:start="433:48" pos:end="433:48">7</literal><operator pos:start="433:49" pos:end="433:49">)</operator><operator pos:start="433:50" pos:end="433:50">/</operator><literal type="number" pos:start="433:51" pos:end="433:51">8</literal></expr></argument>, <argument pos:start="433:54" pos:end="433:75"><expr pos:start="433:54" pos:end="433:75"><call pos:start="433:54" pos:end="433:75"><name pos:start="433:54" pos:end="433:67">get_bits_count</name><argument_list pos:start="433:68" pos:end="433:75">(<argument pos:start="433:69" pos:end="433:74"><expr pos:start="433:69" pos:end="433:74"><operator pos:start="433:69" pos:end="433:69">&amp;</operator><name pos:start="433:70" pos:end="433:74"><name pos:start="433:70" pos:end="433:70">s</name><operator pos:start="433:71" pos:end="433:72">-&gt;</operator><name pos:start="433:73" pos:end="433:74">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<label pos:start="438:1" pos:end="438:8"><name pos:start="438:1" pos:end="438:7">the_end</name>:</label>

    <expr_stmt pos:start="440:5" pos:end="440:92"><expr pos:start="440:5" pos:end="440:91"><call pos:start="440:5" pos:end="440:91"><name pos:start="440:5" pos:end="440:10">av_log</name><argument_list pos:start="440:11" pos:end="440:91">(<argument pos:start="440:12" pos:end="440:16"><expr pos:start="440:12" pos:end="440:16"><name pos:start="440:12" pos:end="440:16">avctx</name></expr></argument>, <argument pos:start="440:19" pos:end="440:30"><expr pos:start="440:19" pos:end="440:30"><name pos:start="440:19" pos:end="440:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="440:33" pos:end="440:71"><expr pos:start="440:33" pos:end="440:71"><literal type="string" pos:start="440:33" pos:end="440:71">"mjpeg decode frame unused %td bytes\n"</literal></expr></argument>, <argument pos:start="440:74" pos:end="440:90"><expr pos:start="440:74" pos:end="440:90"><name pos:start="440:74" pos:end="440:80">buf_end</name> <operator pos:start="440:82" pos:end="440:82">-</operator> <name pos:start="440:84" pos:end="440:90">buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="442:1" pos:end="442:31">//    return buf_end - buf_ptr;</comment>

    <return pos:start="444:5" pos:end="444:25">return <expr pos:start="444:12" pos:end="444:24"><name pos:start="444:12" pos:end="444:18">buf_ptr</name> <operator pos:start="444:20" pos:end="444:20">-</operator> <name pos:start="444:22" pos:end="444:24">buf</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></while></block_content></block></function>
</unit>
