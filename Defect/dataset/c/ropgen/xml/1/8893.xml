<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8893.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:67"><name pos:start="1:1" pos:end="1:13">e1000_receive</name><argument_list pos:start="1:14" pos:end="1:67">(<argument pos:start="1:15" pos:end="1:33">VLANClientState *nc</argument>, <argument pos:start="1:36" pos:end="1:53">const uint8_t *buf</argument>, <argument pos:start="1:56" pos:end="1:66">size_t size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="225:1">{<block_content pos:start="5:5" pos:end="223:16">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">E1000State</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:55">= <expr pos:start="5:21" pos:end="5:55"><call pos:start="5:21" pos:end="5:47"><name pos:start="5:21" pos:end="5:29">DO_UPCAST</name><argument_list pos:start="5:30" pos:end="5:47">(<argument pos:start="5:31" pos:end="5:38"><expr pos:start="5:31" pos:end="5:38"><name pos:start="5:31" pos:end="5:38">NICState</name></expr></argument>, <argument pos:start="5:41" pos:end="5:42"><expr pos:start="5:41" pos:end="5:42"><name pos:start="5:41" pos:end="5:42">nc</name></expr></argument>, <argument pos:start="5:45" pos:end="5:46"><expr pos:start="5:45" pos:end="5:46"><name pos:start="5:45" pos:end="5:46">nc</name></expr></argument>)</argument_list></call><operator pos:start="5:48" pos:end="5:49">-&gt;</operator><name pos:start="5:50" pos:end="5:55">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:24">e1000_rx_desc</name></name></type> <name pos:start="7:26" pos:end="7:29">desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">target_phys_addr_t</name></type> <name pos:start="9:24" pos:end="9:27">base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">n</name></decl>, <decl pos:start="11:21" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:21" pos:end="11:23">rdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">rdh_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:25">vlan_special</name> <init pos:start="15:27" pos:end="15:29">= <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:45"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:23">vlan_status</name> <init pos:start="17:25" pos:end="17:27">= <expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></init></decl>, <decl pos:start="17:30" pos:end="17:44"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:30" pos:end="17:40">vlan_offset</name> <init pos:start="17:42" pos:end="17:44">= <expr pos:start="17:44" pos:end="17:44"><literal type="number" pos:start="17:44" pos:end="17:44">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:33"><name pos:start="19:13" pos:end="19:19">min_buf</name><index pos:start="19:20" pos:end="19:33">[<expr pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:32">MIN_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">size_t</name></type> <name pos:start="21:12" pos:end="21:22">desc_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">size_t</name></type> <name pos:start="23:12" pos:end="23:20">desc_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">size_t</name></type> <name pos:start="25:12" pos:end="25:21">total_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:18"><if pos:start="29:5" pos:end="31:18">if <condition pos:start="29:8" pos:end="29:44">(<expr pos:start="29:9" pos:end="29:43"><operator pos:start="29:9" pos:end="29:9">!</operator><operator pos:start="29:10" pos:end="29:10">(</operator><name pos:start="29:11" pos:end="29:26"><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:20">mac_reg</name><index pos:start="29:21" pos:end="29:26">[<expr pos:start="29:22" pos:end="29:25"><name pos:start="29:22" pos:end="29:25">RCTL</name></expr>]</index></name> <operator pos:start="29:28" pos:end="29:28">&amp;</operator> <name pos:start="29:30" pos:end="29:42">E1000_RCTL_EN</name><operator pos:start="29:43" pos:end="29:43">)</operator></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:18"><block_content pos:start="31:9" pos:end="31:18">

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:46">/* Pad to minimum Ethernet frame length */</comment>

    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="47:5">if <condition pos:start="37:8" pos:end="37:31">(<expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:12">size</name> <operator pos:start="37:14" pos:end="37:14">&lt;</operator> <sizeof pos:start="37:16" pos:end="37:30">sizeof<argument_list pos:start="37:22" pos:end="37:30">(<argument pos:start="37:23" pos:end="37:29"><expr pos:start="37:23" pos:end="37:29"><name pos:start="37:23" pos:end="37:29">min_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="37:33" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:31">

        <expr_stmt pos:start="39:9" pos:end="39:35"><expr pos:start="39:9" pos:end="39:34"><call pos:start="39:9" pos:end="39:34"><name pos:start="39:9" pos:end="39:14">memcpy</name><argument_list pos:start="39:15" pos:end="39:34">(<argument pos:start="39:16" pos:end="39:22"><expr pos:start="39:16" pos:end="39:22"><name pos:start="39:16" pos:end="39:22">min_buf</name></expr></argument>, <argument pos:start="39:25" pos:end="39:27"><expr pos:start="39:25" pos:end="39:27"><name pos:start="39:25" pos:end="39:27">buf</name></expr></argument>, <argument pos:start="39:30" pos:end="39:33"><expr pos:start="39:30" pos:end="39:33"><name pos:start="39:30" pos:end="39:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:58"><expr pos:start="41:9" pos:end="41:57"><call pos:start="41:9" pos:end="41:57"><name pos:start="41:9" pos:end="41:14">memset</name><argument_list pos:start="41:15" pos:end="41:57">(<argument pos:start="41:16" pos:end="41:29"><expr pos:start="41:16" pos:end="41:29"><operator pos:start="41:16" pos:end="41:16">&amp;</operator><name pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:23">min_buf</name><index pos:start="41:24" pos:end="41:29">[<expr pos:start="41:25" pos:end="41:28"><name pos:start="41:25" pos:end="41:28">size</name></expr>]</index></name></expr></argument>, <argument pos:start="41:32" pos:end="41:32"><expr pos:start="41:32" pos:end="41:32"><literal type="number" pos:start="41:32" pos:end="41:32">0</literal></expr></argument>, <argument pos:start="41:35" pos:end="41:56"><expr pos:start="41:35" pos:end="41:56"><sizeof pos:start="41:35" pos:end="41:49">sizeof<argument_list pos:start="41:41" pos:end="41:49">(<argument pos:start="41:42" pos:end="41:48"><expr pos:start="41:42" pos:end="41:48"><name pos:start="41:42" pos:end="41:48">min_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="41:51" pos:end="41:51">-</operator> <name pos:start="41:53" pos:end="41:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:11">buf</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:21">min_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:31"><expr pos:start="45:9" pos:end="45:30"><name pos:start="45:9" pos:end="45:12">size</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <sizeof pos:start="45:16" pos:end="45:30">sizeof<argument_list pos:start="45:22" pos:end="45:30">(<argument pos:start="45:23" pos:end="45:29"><expr pos:start="45:23" pos:end="45:29"><name pos:start="45:23" pos:end="45:29">min_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="53:20"><if pos:start="51:5" pos:end="53:20">if <condition pos:start="51:8" pos:end="51:38">(<expr pos:start="51:9" pos:end="51:37"><operator pos:start="51:9" pos:end="51:9">!</operator><call pos:start="51:10" pos:end="51:37"><name pos:start="51:10" pos:end="51:23">receive_filter</name><argument_list pos:start="51:24" pos:end="51:37">(<argument pos:start="51:25" pos:end="51:25"><expr pos:start="51:25" pos:end="51:25"><name pos:start="51:25" pos:end="51:25">s</name></expr></argument>, <argument pos:start="51:28" pos:end="51:30"><expr pos:start="51:28" pos:end="51:30"><name pos:start="51:28" pos:end="51:30">buf</name></expr></argument>, <argument pos:start="51:33" pos:end="51:36"><expr pos:start="51:33" pos:end="51:36"><name pos:start="51:33" pos:end="51:36">size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:20"><block_content pos:start="53:9" pos:end="53:20">

        <return pos:start="53:9" pos:end="53:20">return <expr pos:start="53:16" pos:end="53:19"><name pos:start="53:16" pos:end="53:19">size</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="57:50">(<expr pos:start="57:9" pos:end="57:49"><call pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:20">vlan_enabled</name><argument_list pos:start="57:21" pos:end="57:23">(<argument pos:start="57:22" pos:end="57:22"><expr pos:start="57:22" pos:end="57:22"><name pos:start="57:22" pos:end="57:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="57:25" pos:end="57:26">&amp;&amp;</operator> <call pos:start="57:28" pos:end="57:49"><name pos:start="57:28" pos:end="57:41">is_vlan_packet</name><argument_list pos:start="57:42" pos:end="57:49">(<argument pos:start="57:43" pos:end="57:43"><expr pos:start="57:43" pos:end="57:43"><name pos:start="57:43" pos:end="57:43">s</name></expr></argument>, <argument pos:start="57:46" pos:end="57:48"><expr pos:start="57:46" pos:end="57:48"><name pos:start="57:46" pos:end="57:48">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:52" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:18">

        <expr_stmt pos:start="59:9" pos:end="59:73"><expr pos:start="59:9" pos:end="59:72"><name pos:start="59:9" pos:end="59:20">vlan_special</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <call pos:start="59:24" pos:end="59:72"><name pos:start="59:24" pos:end="59:34">cpu_to_le16</name><argument_list pos:start="59:35" pos:end="59:72">(<argument pos:start="59:36" pos:end="59:71"><expr pos:start="59:36" pos:end="59:71"><call pos:start="59:36" pos:end="59:71"><name pos:start="59:36" pos:end="59:47">be16_to_cpup</name><argument_list pos:start="59:48" pos:end="59:71">(<argument pos:start="59:49" pos:end="59:70"><expr pos:start="59:49" pos:end="59:70"><operator pos:start="59:49" pos:end="59:49">(</operator><name pos:start="59:50" pos:end="59:57">uint16_t</name> <operator pos:start="59:59" pos:end="59:59">*</operator><operator pos:start="59:60" pos:end="59:60">)</operator><operator pos:start="59:61" pos:end="59:61">(</operator><name pos:start="59:62" pos:end="59:64">buf</name> <operator pos:start="59:66" pos:end="59:66">+</operator> <literal type="number" pos:start="59:68" pos:end="59:69">14</literal><operator pos:start="59:70" pos:end="59:70">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><call pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:15">memmove</name><argument_list pos:start="61:16" pos:end="61:44">(<argument pos:start="61:17" pos:end="61:34"><expr pos:start="61:17" pos:end="61:34"><operator pos:start="61:17" pos:end="61:17">(</operator><name pos:start="61:18" pos:end="61:24">uint8_t</name> <operator pos:start="61:26" pos:end="61:26">*</operator><operator pos:start="61:27" pos:end="61:27">)</operator><name pos:start="61:28" pos:end="61:30">buf</name> <operator pos:start="61:32" pos:end="61:32">+</operator> <literal type="number" pos:start="61:34" pos:end="61:34">4</literal></expr></argument>, <argument pos:start="61:37" pos:end="61:39"><expr pos:start="61:37" pos:end="61:39"><name pos:start="61:37" pos:end="61:39">buf</name></expr></argument>, <argument pos:start="61:42" pos:end="61:43"><expr pos:start="61:42" pos:end="61:43"><literal type="number" pos:start="61:42" pos:end="61:43">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:19">vlan_status</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:39">E1000_RXD_STAT_VP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:19">vlan_offset</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <literal type="number" pos:start="65:23" pos:end="65:23">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:12">size</name> <operator pos:start="67:14" pos:end="67:15">-=</operator> <literal type="number" pos:start="67:17" pos:end="67:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:32"><expr pos:start="73:5" pos:end="73:31"><name pos:start="73:5" pos:end="73:13">rdh_start</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <name pos:start="73:17" pos:end="73:31"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:26">mac_reg</name><index pos:start="73:27" pos:end="73:31">[<expr pos:start="73:28" pos:end="73:30"><name pos:start="73:28" pos:end="73:30">RDH</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:20"><expr pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:15">desc_offset</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:35"><expr pos:start="77:5" pos:end="77:34"><name pos:start="77:5" pos:end="77:14">total_size</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:21">size</name> <operator pos:start="77:23" pos:end="77:23">+</operator> <call pos:start="77:25" pos:end="77:34"><name pos:start="77:25" pos:end="77:31">fcs_len</name><argument_list pos:start="77:32" pos:end="77:34">(<argument pos:start="77:33" pos:end="77:33"><expr pos:start="77:33" pos:end="77:33"><name pos:start="77:33" pos:end="77:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="79:5" pos:end="179:39">do <block pos:start="79:8" pos:end="179:5">{<block_content pos:start="81:9" pos:end="177:9">

        <expr_stmt pos:start="81:9" pos:end="81:45"><expr pos:start="81:9" pos:end="81:44"><name pos:start="81:9" pos:end="81:17">desc_size</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:30">total_size</name> <operator pos:start="81:32" pos:end="81:32">-</operator> <name pos:start="81:34" pos:end="81:44">desc_offset</name></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:38">(<expr pos:start="83:13" pos:end="83:37"><name pos:start="83:13" pos:end="83:21">desc_size</name> <operator pos:start="83:23" pos:end="83:23">&gt;</operator> <name pos:start="83:25" pos:end="83:37"><name pos:start="83:25" pos:end="83:25">s</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:37">rxbuf_size</name></name></expr>)</condition> <block pos:start="83:40" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:38">

            <expr_stmt pos:start="85:13" pos:end="85:38"><expr pos:start="85:13" pos:end="85:37"><name pos:start="85:13" pos:end="85:21">desc_size</name> <operator pos:start="85:23" pos:end="85:23">=</operator> <name pos:start="85:25" pos:end="85:37"><name pos:start="85:25" pos:end="85:25">s</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:37">rxbuf_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="89:9" pos:end="99:9"><if pos:start="89:9" pos:end="99:9">if <condition pos:start="89:12" pos:end="89:64">(<expr pos:start="89:13" pos:end="89:63"><name pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:22">mac_reg</name><index pos:start="89:23" pos:end="89:27">[<expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">RDH</name></expr>]</index></name> <operator pos:start="89:29" pos:end="89:30">==</operator> <name pos:start="89:32" pos:end="89:46"><name pos:start="89:32" pos:end="89:32">s</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:41">mac_reg</name><index pos:start="89:42" pos:end="89:46">[<expr pos:start="89:43" pos:end="89:45"><name pos:start="89:43" pos:end="89:45">RDT</name></expr>]</index></name> <operator pos:start="89:48" pos:end="89:49">&amp;&amp;</operator> <name pos:start="89:51" pos:end="89:63"><name pos:start="89:51" pos:end="89:51">s</name><operator pos:start="89:52" pos:end="89:53">-&gt;</operator><name pos:start="89:54" pos:end="89:63">check_rxov</name></name></expr>)</condition> <block pos:start="89:66" pos:end="99:9">{<block_content pos:start="93:13" pos:end="97:22">

            <comment type="block" pos:start="91:13" pos:end="91:49">/* Discard all data written so far */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:40"><expr pos:start="93:13" pos:end="93:39"><name pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:22">mac_reg</name><index pos:start="93:23" pos:end="93:27">[<expr pos:start="93:24" pos:end="93:26"><name pos:start="93:24" pos:end="93:26">RDH</name></expr>]</index></name> <operator pos:start="93:29" pos:end="93:29">=</operator> <name pos:start="93:31" pos:end="93:39">rdh_start</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:41"><expr pos:start="95:13" pos:end="95:40"><call pos:start="95:13" pos:end="95:40"><name pos:start="95:13" pos:end="95:19">set_ics</name><argument_list pos:start="95:20" pos:end="95:40">(<argument pos:start="95:21" pos:end="95:21"><expr pos:start="95:21" pos:end="95:21"><name pos:start="95:21" pos:end="95:21">s</name></expr></argument>, <argument pos:start="95:24" pos:end="95:24"><expr pos:start="95:24" pos:end="95:24"><literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr></argument>, <argument pos:start="95:27" pos:end="95:39"><expr pos:start="95:27" pos:end="95:39"><name pos:start="95:27" pos:end="95:39">E1000_ICS_RXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:22">return <expr pos:start="97:20" pos:end="97:21"><operator pos:start="97:20" pos:end="97:20">-</operator><literal type="number" pos:start="97:21" pos:end="97:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="103:46"><expr pos:start="101:9" pos:end="103:45"><name pos:start="101:9" pos:end="101:12">base</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <operator pos:start="101:16" pos:end="101:16">(</operator><operator pos:start="101:17" pos:end="101:17">(</operator><name pos:start="101:18" pos:end="101:25">uint64_t</name><operator pos:start="101:26" pos:end="101:26">)</operator><name pos:start="101:27" pos:end="101:43"><name pos:start="101:27" pos:end="101:27">s</name><operator pos:start="101:28" pos:end="101:29">-&gt;</operator><name pos:start="101:30" pos:end="101:36">mac_reg</name><index pos:start="101:37" pos:end="101:43">[<expr pos:start="101:38" pos:end="101:42"><name pos:start="101:38" pos:end="101:42">RDBAH</name></expr>]</index></name> <operator pos:start="101:45" pos:end="101:46">&lt;&lt;</operator> <literal type="number" pos:start="101:48" pos:end="101:49">32</literal><operator pos:start="101:50" pos:end="101:50">)</operator> <operator pos:start="101:52" pos:end="101:52">+</operator> <name pos:start="101:54" pos:end="101:70"><name pos:start="101:54" pos:end="101:54">s</name><operator pos:start="101:55" pos:end="101:56">-&gt;</operator><name pos:start="101:57" pos:end="101:63">mac_reg</name><index pos:start="101:64" pos:end="101:70">[<expr pos:start="101:65" pos:end="101:69"><name pos:start="101:65" pos:end="101:69">RDBAL</name></expr>]</index></name> <operator pos:start="101:72" pos:end="101:72">+</operator>

               <sizeof pos:start="103:16" pos:end="103:27">sizeof<argument_list pos:start="103:22" pos:end="103:27">(<argument pos:start="103:23" pos:end="103:26"><expr pos:start="103:23" pos:end="103:26"><name pos:start="103:23" pos:end="103:26">desc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="103:29" pos:end="103:29">*</operator> <name pos:start="103:31" pos:end="103:45"><name pos:start="103:31" pos:end="103:31">s</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:40">mac_reg</name><index pos:start="103:41" pos:end="103:45">[<expr pos:start="103:42" pos:end="103:44"><name pos:start="103:42" pos:end="103:44">RDH</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:68"><expr pos:start="105:9" pos:end="105:67"><call pos:start="105:9" pos:end="105:67"><name pos:start="105:9" pos:end="105:32">cpu_physical_memory_read</name><argument_list pos:start="105:33" pos:end="105:67">(<argument pos:start="105:34" pos:end="105:37"><expr pos:start="105:34" pos:end="105:37"><name pos:start="105:34" pos:end="105:37">base</name></expr></argument>, <argument pos:start="105:40" pos:end="105:52"><expr pos:start="105:40" pos:end="105:52"><operator pos:start="105:40" pos:end="105:40">(</operator><name pos:start="105:41" pos:end="105:44">void</name> <operator pos:start="105:46" pos:end="105:46">*</operator><operator pos:start="105:47" pos:end="105:47">)</operator><operator pos:start="105:48" pos:end="105:48">&amp;</operator><name pos:start="105:49" pos:end="105:52">desc</name></expr></argument>, <argument pos:start="105:55" pos:end="105:66"><expr pos:start="105:55" pos:end="105:66"><sizeof pos:start="105:55" pos:end="105:66">sizeof<argument_list pos:start="105:61" pos:end="105:66">(<argument pos:start="105:62" pos:end="105:65"><expr pos:start="105:62" pos:end="105:65"><name pos:start="105:62" pos:end="105:65">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:36"><expr pos:start="107:9" pos:end="107:35"><name pos:start="107:9" pos:end="107:20"><name pos:start="107:9" pos:end="107:12">desc</name><operator pos:start="107:13" pos:end="107:13">.</operator><name pos:start="107:14" pos:end="107:20">special</name></name> <operator pos:start="107:22" pos:end="107:22">=</operator> <name pos:start="107:24" pos:end="107:35">vlan_special</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:57"><expr pos:start="109:9" pos:end="109:56"><name pos:start="109:9" pos:end="109:19"><name pos:start="109:9" pos:end="109:12">desc</name><operator pos:start="109:13" pos:end="109:13">.</operator><name pos:start="109:14" pos:end="109:19">status</name></name> <operator pos:start="109:21" pos:end="109:22">|=</operator> <operator pos:start="109:24" pos:end="109:24">(</operator><name pos:start="109:25" pos:end="109:35">vlan_status</name> <operator pos:start="109:37" pos:end="109:37">|</operator> <name pos:start="109:39" pos:end="109:55">E1000_RXD_STAT_DD</name><operator pos:start="109:56" pos:end="109:56">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="153:9"><if pos:start="111:9" pos:end="149:9">if <condition pos:start="111:12" pos:end="111:29">(<expr pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:16">desc</name><operator pos:start="111:17" pos:end="111:17">.</operator><name pos:start="111:18" pos:end="111:28">buffer_addr</name></name></expr>)</condition> <block pos:start="111:31" pos:end="149:9">{<block_content pos:start="113:13" pos:end="147:13">

            <if_stmt pos:start="113:13" pos:end="129:13"><if pos:start="113:13" pos:end="129:13">if <condition pos:start="113:16" pos:end="113:35">(<expr pos:start="113:17" pos:end="113:34"><name pos:start="113:17" pos:end="113:27">desc_offset</name> <operator pos:start="113:29" pos:end="113:29">&lt;</operator> <name pos:start="113:31" pos:end="113:34">size</name></expr>)</condition> <block pos:start="113:37" pos:end="129:13">{<block_content pos:start="115:17" pos:end="127:53">

                <decl_stmt pos:start="115:17" pos:end="115:54"><decl pos:start="115:17" pos:end="115:53"><type pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:22">size_t</name></type> <name pos:start="115:24" pos:end="115:32">copy_size</name> <init pos:start="115:34" pos:end="115:53">= <expr pos:start="115:36" pos:end="115:53"><name pos:start="115:36" pos:end="115:39">size</name> <operator pos:start="115:41" pos:end="115:41">-</operator> <name pos:start="115:43" pos:end="115:53">desc_offset</name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="117:17" pos:end="121:17"><if pos:start="117:17" pos:end="121:17">if <condition pos:start="117:20" pos:end="117:46">(<expr pos:start="117:21" pos:end="117:45"><name pos:start="117:21" pos:end="117:29">copy_size</name> <operator pos:start="117:31" pos:end="117:31">&gt;</operator> <name pos:start="117:33" pos:end="117:45"><name pos:start="117:33" pos:end="117:33">s</name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:45">rxbuf_size</name></name></expr>)</condition> <block pos:start="117:48" pos:end="121:17">{<block_content pos:start="119:21" pos:end="119:46">

                    <expr_stmt pos:start="119:21" pos:end="119:46"><expr pos:start="119:21" pos:end="119:45"><name pos:start="119:21" pos:end="119:29">copy_size</name> <operator pos:start="119:31" pos:end="119:31">=</operator> <name pos:start="119:33" pos:end="119:45"><name pos:start="119:33" pos:end="119:33">s</name><operator pos:start="119:34" pos:end="119:35">-&gt;</operator><name pos:start="119:36" pos:end="119:45">rxbuf_size</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="123:17" pos:end="127:53"><expr pos:start="123:17" pos:end="127:52"><call pos:start="123:17" pos:end="127:52"><name pos:start="123:17" pos:end="123:41">cpu_physical_memory_write</name><argument_list pos:start="123:42" pos:end="127:52">(<argument pos:start="123:43" pos:end="123:71"><expr pos:start="123:43" pos:end="123:71"><call pos:start="123:43" pos:end="123:71"><name pos:start="123:43" pos:end="123:53">le64_to_cpu</name><argument_list pos:start="123:54" pos:end="123:71">(<argument pos:start="123:55" pos:end="123:70"><expr pos:start="123:55" pos:end="123:70"><name pos:start="123:55" pos:end="123:70"><name pos:start="123:55" pos:end="123:58">desc</name><operator pos:start="123:59" pos:end="123:59">.</operator><name pos:start="123:60" pos:end="123:70">buffer_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                          <argument pos:start="125:43" pos:end="125:83"><expr pos:start="125:43" pos:end="125:83"><operator pos:start="125:43" pos:end="125:43">(</operator><name pos:start="125:44" pos:end="125:47">void</name> <operator pos:start="125:49" pos:end="125:49">*</operator><operator pos:start="125:50" pos:end="125:50">)</operator><operator pos:start="125:51" pos:end="125:51">(</operator><name pos:start="125:52" pos:end="125:54">buf</name> <operator pos:start="125:56" pos:end="125:56">+</operator> <name pos:start="125:58" pos:end="125:68">desc_offset</name> <operator pos:start="125:70" pos:end="125:70">+</operator> <name pos:start="125:72" pos:end="125:82">vlan_offset</name><operator pos:start="125:83" pos:end="125:83">)</operator></expr></argument>,

                                          <argument pos:start="127:43" pos:end="127:51"><expr pos:start="127:43" pos:end="127:51"><name pos:start="127:43" pos:end="127:51">copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:37"><expr pos:start="131:13" pos:end="131:36"><name pos:start="131:13" pos:end="131:23">desc_offset</name> <operator pos:start="131:25" pos:end="131:26">+=</operator> <name pos:start="131:28" pos:end="131:36">desc_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:49"><expr pos:start="133:13" pos:end="133:48"><name pos:start="133:13" pos:end="133:23"><name pos:start="133:13" pos:end="133:16">desc</name><operator pos:start="133:17" pos:end="133:17">.</operator><name pos:start="133:18" pos:end="133:23">length</name></name> <operator pos:start="133:25" pos:end="133:25">=</operator> <call pos:start="133:27" pos:end="133:48"><name pos:start="133:27" pos:end="133:37">cpu_to_le16</name><argument_list pos:start="133:38" pos:end="133:48">(<argument pos:start="133:39" pos:end="133:47"><expr pos:start="133:39" pos:end="133:47"><name pos:start="133:39" pos:end="133:47">desc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="147:13"><if pos:start="135:13" pos:end="139:13">if <condition pos:start="135:16" pos:end="135:42">(<expr pos:start="135:17" pos:end="135:41"><name pos:start="135:17" pos:end="135:27">desc_offset</name> <operator pos:start="135:29" pos:end="135:30">&gt;=</operator> <name pos:start="135:32" pos:end="135:41">total_size</name></expr>)</condition> <block pos:start="135:44" pos:end="139:13">{<block_content pos:start="137:17" pos:end="137:72">

                <expr_stmt pos:start="137:17" pos:end="137:72"><expr pos:start="137:17" pos:end="137:71"><name pos:start="137:17" pos:end="137:27"><name pos:start="137:17" pos:end="137:20">desc</name><operator pos:start="137:21" pos:end="137:21">.</operator><name pos:start="137:22" pos:end="137:27">status</name></name> <operator pos:start="137:29" pos:end="137:30">|=</operator> <name pos:start="137:32" pos:end="137:49">E1000_RXD_STAT_EOP</name> <operator pos:start="137:51" pos:end="137:51">|</operator> <name pos:start="137:53" pos:end="137:71">E1000_RXD_STAT_IXSM</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="139:15" pos:end="147:13">else <block pos:start="139:20" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:51">

                <comment type="block" pos:start="141:17" pos:end="143:59">/* Guest zeroing out status is not a hardware requirement.

                   Clear EOP in case guest didn't do it. */</comment>

                <expr_stmt pos:start="145:17" pos:end="145:51"><expr pos:start="145:17" pos:end="145:50"><name pos:start="145:17" pos:end="145:27"><name pos:start="145:17" pos:end="145:20">desc</name><operator pos:start="145:21" pos:end="145:21">.</operator><name pos:start="145:22" pos:end="145:27">status</name></name> <operator pos:start="145:29" pos:end="145:30">&amp;=</operator> <operator pos:start="145:32" pos:end="145:32">~</operator><name pos:start="145:33" pos:end="145:50">E1000_RXD_STAT_EOP</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="149:11" pos:end="153:9">else <block pos:start="149:16" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:49"> <comment type="line" pos:start="149:18" pos:end="149:74">// as per intel docs; skip descriptors with null buf addr</comment>

            <expr_stmt pos:start="151:13" pos:end="151:49"><expr pos:start="151:13" pos:end="151:48"><call pos:start="151:13" pos:end="151:48"><name pos:start="151:13" pos:end="151:18">DBGOUT</name><argument_list pos:start="151:19" pos:end="151:48">(<argument pos:start="151:20" pos:end="151:21"><expr pos:start="151:20" pos:end="151:21"><name pos:start="151:20" pos:end="151:21">RX</name></expr></argument>, <argument pos:start="151:24" pos:end="151:47"><expr pos:start="151:24" pos:end="151:47"><literal type="string" pos:start="151:24" pos:end="151:47">"Null RX descriptor!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:69"><expr pos:start="155:9" pos:end="155:68"><call pos:start="155:9" pos:end="155:68"><name pos:start="155:9" pos:end="155:33">cpu_physical_memory_write</name><argument_list pos:start="155:34" pos:end="155:68">(<argument pos:start="155:35" pos:end="155:38"><expr pos:start="155:35" pos:end="155:38"><name pos:start="155:35" pos:end="155:38">base</name></expr></argument>, <argument pos:start="155:41" pos:end="155:53"><expr pos:start="155:41" pos:end="155:53"><operator pos:start="155:41" pos:end="155:41">(</operator><name pos:start="155:42" pos:end="155:45">void</name> <operator pos:start="155:47" pos:end="155:47">*</operator><operator pos:start="155:48" pos:end="155:48">)</operator><operator pos:start="155:49" pos:end="155:49">&amp;</operator><name pos:start="155:50" pos:end="155:53">desc</name></expr></argument>, <argument pos:start="155:56" pos:end="155:67"><expr pos:start="155:56" pos:end="155:67"><sizeof pos:start="155:56" pos:end="155:67">sizeof<argument_list pos:start="155:62" pos:end="155:67">(<argument pos:start="155:63" pos:end="155:66"><expr pos:start="155:63" pos:end="155:66"><name pos:start="155:63" pos:end="155:66">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="159:9" pos:end="161:32"><if pos:start="159:9" pos:end="161:32">if <condition pos:start="159:12" pos:end="159:66">(<expr pos:start="159:13" pos:end="159:65"><operator pos:start="159:13" pos:end="159:14">++</operator><name pos:start="159:15" pos:end="159:29"><name pos:start="159:15" pos:end="159:15">s</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:24">mac_reg</name><index pos:start="159:25" pos:end="159:29">[<expr pos:start="159:26" pos:end="159:28"><name pos:start="159:26" pos:end="159:28">RDH</name></expr>]</index></name> <operator pos:start="159:31" pos:end="159:31">*</operator> <sizeof pos:start="159:33" pos:end="159:44">sizeof<argument_list pos:start="159:39" pos:end="159:44">(<argument pos:start="159:40" pos:end="159:43"><expr pos:start="159:40" pos:end="159:43"><name pos:start="159:40" pos:end="159:43">desc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="159:46" pos:end="159:47">&gt;=</operator> <name pos:start="159:49" pos:end="159:65"><name pos:start="159:49" pos:end="159:49">s</name><operator pos:start="159:50" pos:end="159:51">-&gt;</operator><name pos:start="159:52" pos:end="159:58">mac_reg</name><index pos:start="159:59" pos:end="159:65">[<expr pos:start="159:60" pos:end="159:64"><name pos:start="159:60" pos:end="159:64">RDLEN</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:32"><block_content pos:start="161:13" pos:end="161:32">

            <expr_stmt pos:start="161:13" pos:end="161:32"><expr pos:start="161:13" pos:end="161:31"><name pos:start="161:13" pos:end="161:27"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:22">mac_reg</name><index pos:start="161:23" pos:end="161:27">[<expr pos:start="161:24" pos:end="161:26"><name pos:start="161:24" pos:end="161:26">RDH</name></expr>]</index></name> <operator pos:start="161:29" pos:end="161:29">=</operator> <literal type="number" pos:start="161:31" pos:end="161:31">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:26"><expr pos:start="163:9" pos:end="163:25"><name pos:start="163:9" pos:end="163:21"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:21">check_rxov</name></name> <operator pos:start="163:23" pos:end="163:23">=</operator> <literal type="number" pos:start="163:25" pos:end="163:25">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="165:9" pos:end="165:50">/* see comment in start_xmit; same here */</comment>

        <if_stmt pos:start="167:9" pos:end="177:9"><if pos:start="167:9" pos:end="177:9">if <condition pos:start="167:12" pos:end="167:41">(<expr pos:start="167:13" pos:end="167:40"><name pos:start="167:13" pos:end="167:27"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:22">mac_reg</name><index pos:start="167:23" pos:end="167:27">[<expr pos:start="167:24" pos:end="167:26"><name pos:start="167:24" pos:end="167:26">RDH</name></expr>]</index></name> <operator pos:start="167:29" pos:end="167:30">==</operator> <name pos:start="167:32" pos:end="167:40">rdh_start</name></expr>)</condition> <block pos:start="167:43" pos:end="177:9">{<block_content pos:start="169:13" pos:end="175:22">

            <expr_stmt pos:start="169:13" pos:end="171:66"><expr pos:start="169:13" pos:end="171:65"><call pos:start="169:13" pos:end="171:65"><name pos:start="169:13" pos:end="169:18">DBGOUT</name><argument_list pos:start="169:19" pos:end="171:65">(<argument pos:start="169:20" pos:end="169:24"><expr pos:start="169:20" pos:end="169:24"><name pos:start="169:20" pos:end="169:24">RXERR</name></expr></argument>, <argument pos:start="169:27" pos:end="169:66"><expr pos:start="169:27" pos:end="169:66"><literal type="string" pos:start="169:27" pos:end="169:66">"RDH wraparound @%x, RDT %x, RDLEN %x\n"</literal></expr></argument>,

                   <argument pos:start="171:20" pos:end="171:28"><expr pos:start="171:20" pos:end="171:28"><name pos:start="171:20" pos:end="171:28">rdh_start</name></expr></argument>, <argument pos:start="171:31" pos:end="171:45"><expr pos:start="171:31" pos:end="171:45"><name pos:start="171:31" pos:end="171:45"><name pos:start="171:31" pos:end="171:31">s</name><operator pos:start="171:32" pos:end="171:33">-&gt;</operator><name pos:start="171:34" pos:end="171:40">mac_reg</name><index pos:start="171:41" pos:end="171:45">[<expr pos:start="171:42" pos:end="171:44"><name pos:start="171:42" pos:end="171:44">RDT</name></expr>]</index></name></expr></argument>, <argument pos:start="171:48" pos:end="171:64"><expr pos:start="171:48" pos:end="171:64"><name pos:start="171:48" pos:end="171:64"><name pos:start="171:48" pos:end="171:48">s</name><operator pos:start="171:49" pos:end="171:50">-&gt;</operator><name pos:start="171:51" pos:end="171:57">mac_reg</name><index pos:start="171:58" pos:end="171:64">[<expr pos:start="171:59" pos:end="171:63"><name pos:start="171:59" pos:end="171:63">RDLEN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:41"><expr pos:start="173:13" pos:end="173:40"><call pos:start="173:13" pos:end="173:40"><name pos:start="173:13" pos:end="173:19">set_ics</name><argument_list pos:start="173:20" pos:end="173:40">(<argument pos:start="173:21" pos:end="173:21"><expr pos:start="173:21" pos:end="173:21"><name pos:start="173:21" pos:end="173:21">s</name></expr></argument>, <argument pos:start="173:24" pos:end="173:24"><expr pos:start="173:24" pos:end="173:24"><literal type="number" pos:start="173:24" pos:end="173:24">0</literal></expr></argument>, <argument pos:start="173:27" pos:end="173:39"><expr pos:start="173:27" pos:end="173:39"><name pos:start="173:27" pos:end="173:39">E1000_ICS_RXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="175:13" pos:end="175:22">return <expr pos:start="175:20" pos:end="175:21"><operator pos:start="175:20" pos:end="175:20">-</operator><literal type="number" pos:start="175:21" pos:end="175:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="179:13" pos:end="179:38">(<expr pos:start="179:14" pos:end="179:37"><name pos:start="179:14" pos:end="179:24">desc_offset</name> <operator pos:start="179:26" pos:end="179:26">&lt;</operator> <name pos:start="179:28" pos:end="179:37">total_size</name></expr>)</condition>;</do>



    <expr_stmt pos:start="183:5" pos:end="183:23"><expr pos:start="183:5" pos:end="183:22"><name pos:start="183:5" pos:end="183:20"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:14">mac_reg</name><index pos:start="183:15" pos:end="183:20">[<expr pos:start="183:16" pos:end="183:19"><name pos:start="183:16" pos:end="183:19">GPRC</name></expr>]</index></name><operator pos:start="183:21" pos:end="183:22">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:22"><expr pos:start="185:5" pos:end="185:21"><name pos:start="185:5" pos:end="185:19"><name pos:start="185:5" pos:end="185:5">s</name><operator pos:start="185:6" pos:end="185:7">-&gt;</operator><name pos:start="185:8" pos:end="185:14">mac_reg</name><index pos:start="185:15" pos:end="185:19">[<expr pos:start="185:16" pos:end="185:18"><name pos:start="185:16" pos:end="185:18">TPR</name></expr>]</index></name><operator pos:start="185:20" pos:end="185:21">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="187:5" pos:end="193:7">/* TOR - Total Octets Received:

     * This register includes bytes received in a packet from the &lt;Destination

     * Address&gt; field through the &lt;CRC&gt; field, inclusively.

     */</comment>

    <expr_stmt pos:start="195:5" pos:end="195:69"><expr pos:start="195:5" pos:end="195:68"><name pos:start="195:5" pos:end="195:5">n</name> <operator pos:start="195:7" pos:end="195:7">=</operator> <name pos:start="195:9" pos:end="195:24"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:18">mac_reg</name><index pos:start="195:19" pos:end="195:24">[<expr pos:start="195:20" pos:end="195:23"><name pos:start="195:20" pos:end="195:23">TORL</name></expr>]</index></name> <operator pos:start="195:26" pos:end="195:26">+</operator> <name pos:start="195:28" pos:end="195:31">size</name> <operator pos:start="195:33" pos:end="195:33">+</operator> <comment type="block" pos:start="195:35" pos:end="195:66">/* Always include FCS length. */</comment> <literal type="number" pos:start="195:68" pos:end="195:68">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="197:5" pos:end="199:27"><if pos:start="197:5" pos:end="199:27">if <condition pos:start="197:8" pos:end="197:29">(<expr pos:start="197:9" pos:end="197:28"><name pos:start="197:9" pos:end="197:9">n</name> <operator pos:start="197:11" pos:end="197:11">&lt;</operator> <name pos:start="197:13" pos:end="197:28"><name pos:start="197:13" pos:end="197:13">s</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:22">mac_reg</name><index pos:start="197:23" pos:end="197:28">[<expr pos:start="197:24" pos:end="197:27"><name pos:start="197:24" pos:end="197:27">TORL</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="199:9" pos:end="199:27"><block_content pos:start="199:9" pos:end="199:27">

        <expr_stmt pos:start="199:9" pos:end="199:27"><expr pos:start="199:9" pos:end="199:26"><name pos:start="199:9" pos:end="199:24"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:18">mac_reg</name><index pos:start="199:19" pos:end="199:24">[<expr pos:start="199:20" pos:end="199:23"><name pos:start="199:20" pos:end="199:23">TORH</name></expr>]</index></name><operator pos:start="199:25" pos:end="199:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:25"><expr pos:start="201:5" pos:end="201:24"><name pos:start="201:5" pos:end="201:20"><name pos:start="201:5" pos:end="201:5">s</name><operator pos:start="201:6" pos:end="201:7">-&gt;</operator><name pos:start="201:8" pos:end="201:14">mac_reg</name><index pos:start="201:15" pos:end="201:20">[<expr pos:start="201:16" pos:end="201:19"><name pos:start="201:16" pos:end="201:19">TORL</name></expr>]</index></name> <operator pos:start="201:22" pos:end="201:22">=</operator> <name pos:start="201:24" pos:end="201:24">n</name></expr>;</expr_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:23"><expr pos:start="205:5" pos:end="205:22"><name pos:start="205:5" pos:end="205:5">n</name> <operator pos:start="205:7" pos:end="205:7">=</operator> <name pos:start="205:9" pos:end="205:22">E1000_ICS_RXT0</name></expr>;</expr_stmt>

    <if_stmt pos:start="207:5" pos:end="209:48"><if pos:start="207:5" pos:end="209:48">if <condition pos:start="207:8" pos:end="207:50">(<expr pos:start="207:9" pos:end="207:49"><operator pos:start="207:9" pos:end="207:9">(</operator><name pos:start="207:10" pos:end="207:12">rdt</name> <operator pos:start="207:14" pos:end="207:14">=</operator> <name pos:start="207:16" pos:end="207:30"><name pos:start="207:16" pos:end="207:16">s</name><operator pos:start="207:17" pos:end="207:18">-&gt;</operator><name pos:start="207:19" pos:end="207:25">mac_reg</name><index pos:start="207:26" pos:end="207:30">[<expr pos:start="207:27" pos:end="207:29"><name pos:start="207:27" pos:end="207:29">RDT</name></expr>]</index></name><operator pos:start="207:31" pos:end="207:31">)</operator> <operator pos:start="207:33" pos:end="207:33">&lt;</operator> <name pos:start="207:35" pos:end="207:49"><name pos:start="207:35" pos:end="207:35">s</name><operator pos:start="207:36" pos:end="207:37">-&gt;</operator><name pos:start="207:38" pos:end="207:44">mac_reg</name><index pos:start="207:45" pos:end="207:49">[<expr pos:start="207:46" pos:end="207:48"><name pos:start="207:46" pos:end="207:48">RDH</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="209:9" pos:end="209:48"><block_content pos:start="209:9" pos:end="209:48">

        <expr_stmt pos:start="209:9" pos:end="209:48"><expr pos:start="209:9" pos:end="209:47"><name pos:start="209:9" pos:end="209:11">rdt</name> <operator pos:start="209:13" pos:end="209:14">+=</operator> <name pos:start="209:16" pos:end="209:32"><name pos:start="209:16" pos:end="209:16">s</name><operator pos:start="209:17" pos:end="209:18">-&gt;</operator><name pos:start="209:19" pos:end="209:25">mac_reg</name><index pos:start="209:26" pos:end="209:32">[<expr pos:start="209:27" pos:end="209:31"><name pos:start="209:27" pos:end="209:31">RDLEN</name></expr>]</index></name> <operator pos:start="209:34" pos:end="209:34">/</operator> <sizeof pos:start="209:36" pos:end="209:47">sizeof<argument_list pos:start="209:42" pos:end="209:47">(<argument pos:start="209:43" pos:end="209:46"><expr pos:start="209:43" pos:end="209:46"><name pos:start="209:43" pos:end="209:46">desc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="211:5" pos:end="215:30"><if pos:start="211:5" pos:end="215:30">if <condition pos:start="211:8" pos:end="213:27">(<expr pos:start="211:9" pos:end="213:26"><operator pos:start="211:9" pos:end="211:9">(</operator><operator pos:start="211:10" pos:end="211:10">(</operator><name pos:start="211:11" pos:end="211:13">rdt</name> <operator pos:start="211:15" pos:end="211:15">-</operator> <name pos:start="211:17" pos:end="211:31"><name pos:start="211:17" pos:end="211:17">s</name><operator pos:start="211:18" pos:end="211:19">-&gt;</operator><name pos:start="211:20" pos:end="211:26">mac_reg</name><index pos:start="211:27" pos:end="211:31">[<expr pos:start="211:28" pos:end="211:30"><name pos:start="211:28" pos:end="211:30">RDH</name></expr>]</index></name><operator pos:start="211:32" pos:end="211:32">)</operator> <operator pos:start="211:34" pos:end="211:34">*</operator> <sizeof pos:start="211:36" pos:end="211:47">sizeof<argument_list pos:start="211:42" pos:end="211:47">(<argument pos:start="211:43" pos:end="211:46"><expr pos:start="211:43" pos:end="211:46"><name pos:start="211:43" pos:end="211:46">desc</name></expr></argument>)</argument_list></sizeof><operator pos:start="211:48" pos:end="211:48">)</operator> <operator pos:start="211:50" pos:end="211:51">&lt;=</operator> <name pos:start="211:53" pos:end="211:69"><name pos:start="211:53" pos:end="211:53">s</name><operator pos:start="211:54" pos:end="211:55">-&gt;</operator><name pos:start="211:56" pos:end="211:62">mac_reg</name><index pos:start="211:63" pos:end="211:69">[<expr pos:start="211:64" pos:end="211:68"><name pos:start="211:64" pos:end="211:68">RDLEN</name></expr>]</index></name> <operator pos:start="211:71" pos:end="211:72">&gt;&gt;</operator>

        <name pos:start="213:9" pos:end="213:26"><name pos:start="213:9" pos:end="213:9">s</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:26">rxbuf_min_shift</name></name></expr>)</condition><block type="pseudo" pos:start="215:9" pos:end="215:30"><block_content pos:start="215:9" pos:end="215:30">

        <expr_stmt pos:start="215:9" pos:end="215:30"><expr pos:start="215:9" pos:end="215:29"><name pos:start="215:9" pos:end="215:9">n</name> <operator pos:start="215:11" pos:end="215:12">|=</operator> <name pos:start="215:14" pos:end="215:29">E1000_ICS_RXDMT0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:21"><expr pos:start="219:5" pos:end="219:20"><call pos:start="219:5" pos:end="219:20"><name pos:start="219:5" pos:end="219:11">set_ics</name><argument_list pos:start="219:12" pos:end="219:20">(<argument pos:start="219:13" pos:end="219:13"><expr pos:start="219:13" pos:end="219:13"><name pos:start="219:13" pos:end="219:13">s</name></expr></argument>, <argument pos:start="219:16" pos:end="219:16"><expr pos:start="219:16" pos:end="219:16"><literal type="number" pos:start="219:16" pos:end="219:16">0</literal></expr></argument>, <argument pos:start="219:19" pos:end="219:19"><expr pos:start="219:19" pos:end="219:19"><name pos:start="219:19" pos:end="219:19">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="223:5" pos:end="223:16">return <expr pos:start="223:12" pos:end="223:15"><name pos:start="223:12" pos:end="223:15">size</name></expr>;</return>

</block_content>}</block>
</unit>
