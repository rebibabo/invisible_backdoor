<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18511.c" pos:tabs="8"><function pos:start="1:1" pos:end="299:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">aiff_read_header</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="299:1">{<block_content pos:start="5:5" pos:end="297:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:17">size</name></decl>, <decl pos:start="5:20" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:27">filesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:18">offset</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>, <decl pos:start="7:25" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:25" pos:end="7:32">position</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:20">version</name> <init pos:start="11:22" pos:end="11:38">= <expr pos:start="11:24" pos:end="11:38"><name pos:start="11:24" pos:end="11:38">AIFF_C_VERSION1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">AVIOContext</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:19">pb</name> <init pos:start="13:21" pos:end="13:27">= <expr pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:23">s</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">AVStream</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type> <name pos:start="15:16" pos:end="15:17">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">AIFFInputContext</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:26">aiff</name> <init pos:start="17:28" pos:end="17:41">= <expr pos:start="17:30" pos:end="17:41"><name pos:start="17:30" pos:end="17:41"><name pos:start="17:30" pos:end="17:30">s</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:18">ID3v2ExtraMeta</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:36">id3v2_extra_meta</name> <init pos:start="19:38" pos:end="19:43">= <expr pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:43">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:27">/* check FORM header */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:12">filesize</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:32"><name pos:start="25:16" pos:end="25:22">get_tag</name><argument_list pos:start="25:23" pos:end="25:32">(<argument pos:start="25:24" pos:end="25:25"><expr pos:start="25:24" pos:end="25:25"><name pos:start="25:24" pos:end="25:25">pb</name></expr></argument>, <argument pos:start="25:28" pos:end="25:31"><expr pos:start="25:28" pos:end="25:31"><operator pos:start="25:28" pos:end="25:28">&amp;</operator><name pos:start="25:29" pos:end="25:31">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:35"><if pos:start="27:5" pos:end="29:35">if <condition pos:start="27:8" pos:end="27:57">(<expr pos:start="27:9" pos:end="27:56"><name pos:start="27:9" pos:end="27:16">filesize</name> <operator pos:start="27:18" pos:end="27:18">&lt;</operator> <literal type="number" pos:start="27:20" pos:end="27:20">0</literal> <operator pos:start="27:22" pos:end="27:23">||</operator> <name pos:start="27:25" pos:end="27:27">tag</name> <operator pos:start="27:29" pos:end="27:30">!=</operator> <call pos:start="27:32" pos:end="27:56"><name pos:start="27:32" pos:end="27:36">MKTAG</name><argument_list pos:start="27:37" pos:end="27:56">(<argument pos:start="27:38" pos:end="27:40"><expr pos:start="27:38" pos:end="27:40"><literal type="char" pos:start="27:38" pos:end="27:40">'F'</literal></expr></argument>, <argument pos:start="27:43" pos:end="27:45"><expr pos:start="27:43" pos:end="27:45"><literal type="char" pos:start="27:43" pos:end="27:45">'O'</literal></expr></argument>, <argument pos:start="27:48" pos:end="27:50"><expr pos:start="27:48" pos:end="27:50"><literal type="char" pos:start="27:48" pos:end="27:50">'R'</literal></expr></argument>, <argument pos:start="27:53" pos:end="27:55"><expr pos:start="27:53" pos:end="27:55"><literal type="char" pos:start="27:53" pos:end="27:55">'M'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:35"><block_content pos:start="29:9" pos:end="29:35">

        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:24">/* AIFF data type */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:7">tag</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:23"><name pos:start="35:11" pos:end="35:19">avio_rl32</name><argument_list pos:start="35:20" pos:end="35:23">(<argument pos:start="35:21" pos:end="35:22"><expr pos:start="35:21" pos:end="35:22"><name pos:start="35:21" pos:end="35:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:35"><if pos:start="37:5" pos:end="39:23">if <condition pos:start="37:8" pos:end="37:41">(<expr pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:11">tag</name> <operator pos:start="37:13" pos:end="37:14">==</operator> <call pos:start="37:16" pos:end="37:40"><name pos:start="37:16" pos:end="37:20">MKTAG</name><argument_list pos:start="37:21" pos:end="37:40">(<argument pos:start="37:22" pos:end="37:24"><expr pos:start="37:22" pos:end="37:24"><literal type="char" pos:start="37:22" pos:end="37:24">'A'</literal></expr></argument>, <argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><literal type="char" pos:start="37:27" pos:end="37:29">'I'</literal></expr></argument>, <argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><literal type="char" pos:start="37:32" pos:end="37:34">'F'</literal></expr></argument>, <argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><literal type="char" pos:start="37:37" pos:end="37:39">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:23"><block_content pos:start="39:9" pos:end="39:23">       <comment type="block" pos:start="37:49" pos:end="37:70">/* Got an AIFF file */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:23"><expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:15">version</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:22">AIFF</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="41:5" pos:end="43:35">else if <condition pos:start="41:13" pos:end="41:46">(<expr pos:start="41:14" pos:end="41:45"><name pos:start="41:14" pos:end="41:16">tag</name> <operator pos:start="41:18" pos:end="41:19">!=</operator> <call pos:start="41:21" pos:end="41:45"><name pos:start="41:21" pos:end="41:25">MKTAG</name><argument_list pos:start="41:26" pos:end="41:45">(<argument pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><literal type="char" pos:start="41:27" pos:end="41:29">'A'</literal></expr></argument>, <argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><literal type="char" pos:start="41:32" pos:end="41:34">'I'</literal></expr></argument>, <argument pos:start="41:37" pos:end="41:39"><expr pos:start="41:37" pos:end="41:39"><literal type="char" pos:start="41:37" pos:end="41:39">'F'</literal></expr></argument>, <argument pos:start="41:42" pos:end="41:44"><expr pos:start="41:42" pos:end="41:44"><literal type="char" pos:start="41:42" pos:end="41:44">'C'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:35"><block_content pos:start="43:9" pos:end="43:35">  <comment type="block" pos:start="41:49" pos:end="41:73">/* An AIFF-C file then */</comment>

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:18"><expr pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:12">filesize</name> <operator pos:start="47:14" pos:end="47:15">-=</operator> <literal type="number" pos:start="47:17" pos:end="47:17">4</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:38"><expr pos:start="51:5" pos:end="51:37"><name pos:start="51:5" pos:end="51:6">st</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="51:37"><name pos:start="51:10" pos:end="51:28">avformat_new_stream</name><argument_list pos:start="51:29" pos:end="51:37">(<argument pos:start="51:30" pos:end="51:30"><expr pos:start="51:30" pos:end="51:30"><name pos:start="51:30" pos:end="51:30">s</name></expr></argument>, <argument pos:start="51:33" pos:end="51:36"><expr pos:start="51:33" pos:end="51:36"><name pos:start="51:33" pos:end="51:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:31"><if pos:start="53:5" pos:end="55:31">if <condition pos:start="53:8" pos:end="53:12">(<expr pos:start="53:9" pos:end="53:11"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:11">st</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:31"><block_content pos:start="55:9" pos:end="55:31">

        <return pos:start="55:9" pos:end="55:31">return <expr pos:start="55:16" pos:end="55:30"><call pos:start="55:16" pos:end="55:30"><name pos:start="55:16" pos:end="55:22">AVERROR</name><argument_list pos:start="55:23" pos:end="55:30">(<argument pos:start="55:24" pos:end="55:29"><expr pos:start="55:24" pos:end="55:29"><name pos:start="55:24" pos:end="55:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="59:5" pos:end="259:5">while <condition pos:start="59:11" pos:end="59:24">(<expr pos:start="59:12" pos:end="59:23"><name pos:start="59:12" pos:end="59:19">filesize</name> <operator pos:start="59:21" pos:end="59:21">&gt;</operator> <literal type="number" pos:start="59:23" pos:end="59:23">0</literal></expr>)</condition> <block pos:start="59:26" pos:end="259:5">{<block_content pos:start="63:9" pos:end="257:9">

        <comment type="block" pos:start="61:9" pos:end="61:36">/* parse different chunks */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:33"><expr pos:start="63:9" pos:end="63:32"><name pos:start="63:9" pos:end="63:12">size</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:32"><name pos:start="63:16" pos:end="63:22">get_tag</name><argument_list pos:start="63:23" pos:end="63:32">(<argument pos:start="63:24" pos:end="63:25"><expr pos:start="63:24" pos:end="63:25"><name pos:start="63:24" pos:end="63:25">pb</name></expr></argument>, <argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><operator pos:start="63:28" pos:end="63:28">&amp;</operator><name pos:start="63:29" pos:end="63:31">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:75">(<expr pos:start="67:13" pos:end="67:74"><name pos:start="67:13" pos:end="67:16">size</name> <operator pos:start="67:18" pos:end="67:19">==</operator> <name pos:start="67:21" pos:end="67:31">AVERROR_EOF</name> <operator pos:start="67:33" pos:end="67:34">&amp;&amp;</operator> <name pos:start="67:36" pos:end="67:41">offset</name> <operator pos:start="67:43" pos:end="67:43">&gt;</operator> <literal type="number" pos:start="67:45" pos:end="67:45">0</literal> <operator pos:start="67:47" pos:end="67:48">&amp;&amp;</operator> <name pos:start="67:50" pos:end="67:74"><name pos:start="67:50" pos:end="67:51">st</name><operator pos:start="67:52" pos:end="67:53">-&gt;</operator><name pos:start="67:54" pos:end="67:61">codecpar</name><operator pos:start="67:62" pos:end="67:63">-&gt;</operator><name pos:start="67:64" pos:end="67:74">block_align</name></name></expr>)</condition> <block pos:start="67:77" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:27">

            <expr_stmt pos:start="69:13" pos:end="69:65"><expr pos:start="69:13" pos:end="69:64"><call pos:start="69:13" pos:end="69:64"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="69:64">(<argument pos:start="69:20" pos:end="69:20"><expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">s</name></expr></argument>, <argument pos:start="69:23" pos:end="69:36"><expr pos:start="69:23" pos:end="69:36"><name pos:start="69:23" pos:end="69:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="69:39" pos:end="69:63"><expr pos:start="69:39" pos:end="69:63"><literal type="string" pos:start="69:39" pos:end="69:63">"header parser hit EOF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="71:13" pos:end="71:27">goto <name pos:start="71:18" pos:end="71:26">got_sound</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="77:24"><if pos:start="75:9" pos:end="77:24">if <condition pos:start="75:12" pos:end="75:21">(<expr pos:start="75:13" pos:end="75:20"><name pos:start="75:13" pos:end="75:16">size</name> <operator pos:start="75:18" pos:end="75:18">&lt;</operator> <literal type="number" pos:start="75:20" pos:end="75:20">0</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:24"><block_content pos:start="77:13" pos:end="77:24">

            <return pos:start="77:13" pos:end="77:24">return <expr pos:start="77:20" pos:end="77:23"><name pos:start="77:20" pos:end="77:23">size</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:29"><expr pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:16">filesize</name> <operator pos:start="81:18" pos:end="81:19">-=</operator> <name pos:start="81:21" pos:end="81:24">size</name> <operator pos:start="81:26" pos:end="81:26">+</operator> <literal type="number" pos:start="81:28" pos:end="81:28">8</literal></expr>;</expr_stmt>



        <switch pos:start="85:9" pos:end="257:9">switch <condition pos:start="85:16" pos:end="85:20">(<expr pos:start="85:17" pos:end="85:19"><name pos:start="85:17" pos:end="85:19">tag</name></expr>)</condition> <block pos:start="85:22" pos:end="257:9">{<block_content pos:start="87:9" pos:end="255:32">

        <case pos:start="87:9" pos:end="87:39">case <expr pos:start="87:14" pos:end="87:38"><call pos:start="87:14" pos:end="87:38"><name pos:start="87:14" pos:end="87:18">MKTAG</name><argument_list pos:start="87:19" pos:end="87:38">(<argument pos:start="87:20" pos:end="87:22"><expr pos:start="87:20" pos:end="87:22"><literal type="char" pos:start="87:20" pos:end="87:22">'C'</literal></expr></argument>, <argument pos:start="87:25" pos:end="87:27"><expr pos:start="87:25" pos:end="87:27"><literal type="char" pos:start="87:25" pos:end="87:27">'O'</literal></expr></argument>, <argument pos:start="87:30" pos:end="87:32"><expr pos:start="87:30" pos:end="87:32"><literal type="char" pos:start="87:30" pos:end="87:32">'M'</literal></expr></argument>, <argument pos:start="87:35" pos:end="87:37"><expr pos:start="87:35" pos:end="87:37"><literal type="char" pos:start="87:35" pos:end="87:37">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="87:45" pos:end="87:62">/* Common chunk */</comment>

            <comment type="block" pos:start="89:13" pos:end="89:51">/* Then for the complete header info */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:62"><expr pos:start="91:13" pos:end="91:61"><name pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:14">st</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:25">nb_frames</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <call pos:start="91:29" pos:end="91:61"><name pos:start="91:29" pos:end="91:43">get_aiff_header</name><argument_list pos:start="91:44" pos:end="91:61">(<argument pos:start="91:45" pos:end="91:45"><expr pos:start="91:45" pos:end="91:45"><name pos:start="91:45" pos:end="91:45">s</name></expr></argument>, <argument pos:start="91:48" pos:end="91:51"><expr pos:start="91:48" pos:end="91:51"><name pos:start="91:48" pos:end="91:51">size</name></expr></argument>, <argument pos:start="91:54" pos:end="91:60"><expr pos:start="91:54" pos:end="91:60"><name pos:start="91:54" pos:end="91:60">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="95:37"><if pos:start="93:13" pos:end="95:37">if <condition pos:start="93:16" pos:end="93:34">(<expr pos:start="93:17" pos:end="93:33"><name pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:18">st</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:29">nb_frames</name></name> <operator pos:start="93:31" pos:end="93:31">&lt;</operator> <literal type="number" pos:start="93:33" pos:end="93:33">0</literal></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:37"><block_content pos:start="95:17" pos:end="95:37">

                <return pos:start="95:17" pos:end="95:37">return <expr pos:start="95:24" pos:end="95:36"><name pos:start="95:24" pos:end="95:36"><name pos:start="95:24" pos:end="95:25">st</name><operator pos:start="95:26" pos:end="95:27">-&gt;</operator><name pos:start="95:28" pos:end="95:36">nb_frames</name></name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="97:13" pos:end="99:31"><if pos:start="97:13" pos:end="99:31">if <condition pos:start="97:16" pos:end="97:27">(<expr pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:22">offset</name> <operator pos:start="97:24" pos:end="97:24">&gt;</operator> <literal type="number" pos:start="97:26" pos:end="97:26">0</literal></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:31"><block_content pos:start="99:17" pos:end="99:31"> <comment type="line" pos:start="97:29" pos:end="97:49">// COMM is after SSND</comment>

                <goto pos:start="99:17" pos:end="99:31">goto <name pos:start="99:22" pos:end="99:30">got_sound</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:39">case <expr pos:start="103:14" pos:end="103:38"><call pos:start="103:14" pos:end="103:38"><name pos:start="103:14" pos:end="103:18">MKTAG</name><argument_list pos:start="103:19" pos:end="103:38">(<argument pos:start="103:20" pos:end="103:22"><expr pos:start="103:20" pos:end="103:22"><literal type="char" pos:start="103:20" pos:end="103:22">'I'</literal></expr></argument>, <argument pos:start="103:25" pos:end="103:27"><expr pos:start="103:25" pos:end="103:27"><literal type="char" pos:start="103:25" pos:end="103:27">'D'</literal></expr></argument>, <argument pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><literal type="char" pos:start="103:30" pos:end="103:32">'3'</literal></expr></argument>, <argument pos:start="103:35" pos:end="103:37"><expr pos:start="103:35" pos:end="103:37"><literal type="char" pos:start="103:35" pos:end="103:37">' '</literal></expr></argument>)</argument_list></call></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:37"><expr pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:20">position</name> <operator pos:start="105:22" pos:end="105:22">=</operator> <call pos:start="105:24" pos:end="105:36"><name pos:start="105:24" pos:end="105:32">avio_tell</name><argument_list pos:start="105:33" pos:end="105:36">(<argument pos:start="105:34" pos:end="105:35"><expr pos:start="105:34" pos:end="105:35"><name pos:start="105:34" pos:end="105:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:75"><expr pos:start="107:13" pos:end="107:74"><call pos:start="107:13" pos:end="107:74"><name pos:start="107:13" pos:end="107:25">ff_id3v2_read</name><argument_list pos:start="107:26" pos:end="107:74">(<argument pos:start="107:27" pos:end="107:27"><expr pos:start="107:27" pos:end="107:27"><name pos:start="107:27" pos:end="107:27">s</name></expr></argument>, <argument pos:start="107:30" pos:end="107:48"><expr pos:start="107:30" pos:end="107:48"><name pos:start="107:30" pos:end="107:48">ID3v2_DEFAULT_MAGIC</name></expr></argument>, <argument pos:start="107:51" pos:end="107:67"><expr pos:start="107:51" pos:end="107:67"><operator pos:start="107:51" pos:end="107:51">&amp;</operator><name pos:start="107:52" pos:end="107:67">id3v2_extra_meta</name></expr></argument>, <argument pos:start="107:70" pos:end="107:73"><expr pos:start="107:70" pos:end="107:73"><name pos:start="107:70" pos:end="107:73">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="117:17"><if pos:start="109:13" pos:end="117:17">if <condition pos:start="109:16" pos:end="109:33">(<expr pos:start="109:17" pos:end="109:32"><name pos:start="109:17" pos:end="109:32">id3v2_extra_meta</name></expr>)</condition><block type="pseudo" pos:start="111:17" pos:end="117:17"><block_content pos:start="111:17" pos:end="117:17">

                <if_stmt pos:start="111:17" pos:end="117:17"><if pos:start="111:17" pos:end="117:17">if <condition pos:start="111:20" pos:end="111:74">(<expr pos:start="111:21" pos:end="111:73"><operator pos:start="111:21" pos:end="111:21">(</operator><name pos:start="111:22" pos:end="111:24">ret</name> <operator pos:start="111:26" pos:end="111:26">=</operator> <call pos:start="111:28" pos:end="111:68"><name pos:start="111:28" pos:end="111:46">ff_id3v2_parse_apic</name><argument_list pos:start="111:47" pos:end="111:68">(<argument pos:start="111:48" pos:end="111:48"><expr pos:start="111:48" pos:end="111:48"><name pos:start="111:48" pos:end="111:48">s</name></expr></argument>, <argument pos:start="111:51" pos:end="111:67"><expr pos:start="111:51" pos:end="111:67"><operator pos:start="111:51" pos:end="111:51">&amp;</operator><name pos:start="111:52" pos:end="111:67">id3v2_extra_meta</name></expr></argument>)</argument_list></call><operator pos:start="111:69" pos:end="111:69">)</operator> <operator pos:start="111:71" pos:end="111:71">&lt;</operator> <literal type="number" pos:start="111:73" pos:end="111:73">0</literal></expr>)</condition> <block pos:start="111:76" pos:end="117:17">{<block_content pos:start="113:21" pos:end="115:31">

                    <expr_stmt pos:start="113:21" pos:end="113:64"><expr pos:start="113:21" pos:end="113:63"><call pos:start="113:21" pos:end="113:63"><name pos:start="113:21" pos:end="113:44">ff_id3v2_free_extra_meta</name><argument_list pos:start="113:45" pos:end="113:63">(<argument pos:start="113:46" pos:end="113:62"><expr pos:start="113:46" pos:end="113:62"><operator pos:start="113:46" pos:end="113:46">&amp;</operator><name pos:start="113:47" pos:end="113:62">id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="115:21" pos:end="115:31">return <expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:56"><expr pos:start="119:13" pos:end="119:55"><call pos:start="119:13" pos:end="119:55"><name pos:start="119:13" pos:end="119:36">ff_id3v2_free_extra_meta</name><argument_list pos:start="119:37" pos:end="119:55">(<argument pos:start="119:38" pos:end="119:54"><expr pos:start="119:38" pos:end="119:54"><operator pos:start="119:38" pos:end="119:38">&amp;</operator><name pos:start="119:39" pos:end="119:54">id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="123:63"><if pos:start="121:13" pos:end="123:63">if <condition pos:start="121:16" pos:end="121:48">(<expr pos:start="121:17" pos:end="121:47"><name pos:start="121:17" pos:end="121:24">position</name> <operator pos:start="121:26" pos:end="121:26">+</operator> <name pos:start="121:28" pos:end="121:31">size</name> <operator pos:start="121:33" pos:end="121:33">&gt;</operator> <call pos:start="121:35" pos:end="121:47"><name pos:start="121:35" pos:end="121:43">avio_tell</name><argument_list pos:start="121:44" pos:end="121:47">(<argument pos:start="121:45" pos:end="121:46"><expr pos:start="121:45" pos:end="121:46"><name pos:start="121:45" pos:end="121:46">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:63"><block_content pos:start="123:17" pos:end="123:63">

                <expr_stmt pos:start="123:17" pos:end="123:63"><expr pos:start="123:17" pos:end="123:62"><call pos:start="123:17" pos:end="123:62"><name pos:start="123:17" pos:end="123:25">avio_skip</name><argument_list pos:start="123:26" pos:end="123:62">(<argument pos:start="123:27" pos:end="123:28"><expr pos:start="123:27" pos:end="123:28"><name pos:start="123:27" pos:end="123:28">pb</name></expr></argument>, <argument pos:start="123:31" pos:end="123:61"><expr pos:start="123:31" pos:end="123:61"><name pos:start="123:31" pos:end="123:38">position</name> <operator pos:start="123:40" pos:end="123:40">+</operator> <name pos:start="123:42" pos:end="123:45">size</name> <operator pos:start="123:47" pos:end="123:47">-</operator> <call pos:start="123:49" pos:end="123:61"><name pos:start="123:49" pos:end="123:57">avio_tell</name><argument_list pos:start="123:58" pos:end="123:61">(<argument pos:start="123:59" pos:end="123:60"><expr pos:start="123:59" pos:end="123:60"><name pos:start="123:59" pos:end="123:60">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="125:13" pos:end="125:18">break;</break>

        <case pos:start="127:9" pos:end="127:39">case <expr pos:start="127:14" pos:end="127:38"><call pos:start="127:14" pos:end="127:38"><name pos:start="127:14" pos:end="127:18">MKTAG</name><argument_list pos:start="127:19" pos:end="127:38">(<argument pos:start="127:20" pos:end="127:22"><expr pos:start="127:20" pos:end="127:22"><literal type="char" pos:start="127:20" pos:end="127:22">'F'</literal></expr></argument>, <argument pos:start="127:25" pos:end="127:27"><expr pos:start="127:25" pos:end="127:27"><literal type="char" pos:start="127:25" pos:end="127:27">'V'</literal></expr></argument>, <argument pos:start="127:30" pos:end="127:32"><expr pos:start="127:30" pos:end="127:32"><literal type="char" pos:start="127:30" pos:end="127:32">'E'</literal></expr></argument>, <argument pos:start="127:35" pos:end="127:37"><expr pos:start="127:35" pos:end="127:37"><literal type="char" pos:start="127:35" pos:end="127:37">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="127:45" pos:end="127:63">/* Version chunk */</comment>

            <expr_stmt pos:start="129:13" pos:end="129:36"><expr pos:start="129:13" pos:end="129:35"><name pos:start="129:13" pos:end="129:19">version</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <call pos:start="129:23" pos:end="129:35"><name pos:start="129:23" pos:end="129:31">avio_rb32</name><argument_list pos:start="129:32" pos:end="129:35">(<argument pos:start="129:33" pos:end="129:34"><expr pos:start="129:33" pos:end="129:34"><name pos:start="129:33" pos:end="129:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="131:13" pos:end="131:18">break;</break>

        <case pos:start="133:9" pos:end="133:39">case <expr pos:start="133:14" pos:end="133:38"><call pos:start="133:14" pos:end="133:38"><name pos:start="133:14" pos:end="133:18">MKTAG</name><argument_list pos:start="133:19" pos:end="133:38">(<argument pos:start="133:20" pos:end="133:22"><expr pos:start="133:20" pos:end="133:22"><literal type="char" pos:start="133:20" pos:end="133:22">'N'</literal></expr></argument>, <argument pos:start="133:25" pos:end="133:27"><expr pos:start="133:25" pos:end="133:27"><literal type="char" pos:start="133:25" pos:end="133:27">'A'</literal></expr></argument>, <argument pos:start="133:30" pos:end="133:32"><expr pos:start="133:30" pos:end="133:32"><literal type="char" pos:start="133:30" pos:end="133:32">'M'</literal></expr></argument>, <argument pos:start="133:35" pos:end="133:37"><expr pos:start="133:35" pos:end="133:37"><literal type="char" pos:start="133:35" pos:end="133:37">'E'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="133:45" pos:end="133:67">/* Sample name chunk */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:43"><expr pos:start="135:13" pos:end="135:42"><call pos:start="135:13" pos:end="135:42"><name pos:start="135:13" pos:end="135:20">get_meta</name><argument_list pos:start="135:21" pos:end="135:42">(<argument pos:start="135:22" pos:end="135:22"><expr pos:start="135:22" pos:end="135:22"><name pos:start="135:22" pos:end="135:22">s</name></expr></argument>, <argument pos:start="135:25" pos:end="135:31"><expr pos:start="135:25" pos:end="135:31"><literal type="string" pos:start="135:25" pos:end="135:31">"title"</literal></expr></argument>    , <argument pos:start="135:38" pos:end="135:41"><expr pos:start="135:38" pos:end="135:41"><name pos:start="135:38" pos:end="135:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <case pos:start="139:9" pos:end="139:39">case <expr pos:start="139:14" pos:end="139:38"><call pos:start="139:14" pos:end="139:38"><name pos:start="139:14" pos:end="139:18">MKTAG</name><argument_list pos:start="139:19" pos:end="139:38">(<argument pos:start="139:20" pos:end="139:22"><expr pos:start="139:20" pos:end="139:22"><literal type="char" pos:start="139:20" pos:end="139:22">'A'</literal></expr></argument>, <argument pos:start="139:25" pos:end="139:27"><expr pos:start="139:25" pos:end="139:27"><literal type="char" pos:start="139:25" pos:end="139:27">'U'</literal></expr></argument>, <argument pos:start="139:30" pos:end="139:32"><expr pos:start="139:30" pos:end="139:32"><literal type="char" pos:start="139:30" pos:end="139:32">'T'</literal></expr></argument>, <argument pos:start="139:35" pos:end="139:37"><expr pos:start="139:35" pos:end="139:37"><literal type="char" pos:start="139:35" pos:end="139:37">'H'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="139:45" pos:end="139:62">/* Author chunk */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:43"><expr pos:start="141:13" pos:end="141:42"><call pos:start="141:13" pos:end="141:42"><name pos:start="141:13" pos:end="141:20">get_meta</name><argument_list pos:start="141:21" pos:end="141:42">(<argument pos:start="141:22" pos:end="141:22"><expr pos:start="141:22" pos:end="141:22"><name pos:start="141:22" pos:end="141:22">s</name></expr></argument>, <argument pos:start="141:25" pos:end="141:32"><expr pos:start="141:25" pos:end="141:32"><literal type="string" pos:start="141:25" pos:end="141:32">"author"</literal></expr></argument>   , <argument pos:start="141:38" pos:end="141:41"><expr pos:start="141:38" pos:end="141:41"><name pos:start="141:38" pos:end="141:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        <case pos:start="145:9" pos:end="145:39">case <expr pos:start="145:14" pos:end="145:38"><call pos:start="145:14" pos:end="145:38"><name pos:start="145:14" pos:end="145:18">MKTAG</name><argument_list pos:start="145:19" pos:end="145:38">(<argument pos:start="145:20" pos:end="145:22"><expr pos:start="145:20" pos:end="145:22"><literal type="char" pos:start="145:20" pos:end="145:22">'('</literal></expr></argument>, <argument pos:start="145:25" pos:end="145:27"><expr pos:start="145:25" pos:end="145:27"><literal type="char" pos:start="145:25" pos:end="145:27">'c'</literal></expr></argument>, <argument pos:start="145:30" pos:end="145:32"><expr pos:start="145:30" pos:end="145:32"><literal type="char" pos:start="145:30" pos:end="145:32">')'</literal></expr></argument>, <argument pos:start="145:35" pos:end="145:37"><expr pos:start="145:35" pos:end="145:37"><literal type="char" pos:start="145:35" pos:end="145:37">' '</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="145:45" pos:end="145:65">/* Copyright chunk */</comment>

            <expr_stmt pos:start="147:13" pos:end="147:43"><expr pos:start="147:13" pos:end="147:42"><call pos:start="147:13" pos:end="147:42"><name pos:start="147:13" pos:end="147:20">get_meta</name><argument_list pos:start="147:21" pos:end="147:42">(<argument pos:start="147:22" pos:end="147:22"><expr pos:start="147:22" pos:end="147:22"><name pos:start="147:22" pos:end="147:22">s</name></expr></argument>, <argument pos:start="147:25" pos:end="147:35"><expr pos:start="147:25" pos:end="147:35"><literal type="string" pos:start="147:25" pos:end="147:35">"copyright"</literal></expr></argument>, <argument pos:start="147:38" pos:end="147:41"><expr pos:start="147:38" pos:end="147:41"><name pos:start="147:38" pos:end="147:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:39">case <expr pos:start="151:14" pos:end="151:38"><call pos:start="151:14" pos:end="151:38"><name pos:start="151:14" pos:end="151:18">MKTAG</name><argument_list pos:start="151:19" pos:end="151:38">(<argument pos:start="151:20" pos:end="151:22"><expr pos:start="151:20" pos:end="151:22"><literal type="char" pos:start="151:20" pos:end="151:22">'A'</literal></expr></argument>, <argument pos:start="151:25" pos:end="151:27"><expr pos:start="151:25" pos:end="151:27"><literal type="char" pos:start="151:25" pos:end="151:27">'N'</literal></expr></argument>, <argument pos:start="151:30" pos:end="151:32"><expr pos:start="151:30" pos:end="151:32"><literal type="char" pos:start="151:30" pos:end="151:32">'N'</literal></expr></argument>, <argument pos:start="151:35" pos:end="151:37"><expr pos:start="151:35" pos:end="151:37"><literal type="char" pos:start="151:35" pos:end="151:37">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="151:45" pos:end="151:66">/* Annotation chunk */</comment>

            <expr_stmt pos:start="153:13" pos:end="153:43"><expr pos:start="153:13" pos:end="153:42"><call pos:start="153:13" pos:end="153:42"><name pos:start="153:13" pos:end="153:20">get_meta</name><argument_list pos:start="153:21" pos:end="153:42">(<argument pos:start="153:22" pos:end="153:22"><expr pos:start="153:22" pos:end="153:22"><name pos:start="153:22" pos:end="153:22">s</name></expr></argument>, <argument pos:start="153:25" pos:end="153:33"><expr pos:start="153:25" pos:end="153:33"><literal type="string" pos:start="153:25" pos:end="153:33">"comment"</literal></expr></argument>  , <argument pos:start="153:38" pos:end="153:41"><expr pos:start="153:38" pos:end="153:41"><name pos:start="153:38" pos:end="153:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        <case pos:start="157:9" pos:end="157:39">case <expr pos:start="157:14" pos:end="157:38"><call pos:start="157:14" pos:end="157:38"><name pos:start="157:14" pos:end="157:18">MKTAG</name><argument_list pos:start="157:19" pos:end="157:38">(<argument pos:start="157:20" pos:end="157:22"><expr pos:start="157:20" pos:end="157:22"><literal type="char" pos:start="157:20" pos:end="157:22">'S'</literal></expr></argument>, <argument pos:start="157:25" pos:end="157:27"><expr pos:start="157:25" pos:end="157:27"><literal type="char" pos:start="157:25" pos:end="157:27">'S'</literal></expr></argument>, <argument pos:start="157:30" pos:end="157:32"><expr pos:start="157:30" pos:end="157:32"><literal type="char" pos:start="157:30" pos:end="157:32">'N'</literal></expr></argument>, <argument pos:start="157:35" pos:end="157:37"><expr pos:start="157:35" pos:end="157:37"><literal type="char" pos:start="157:35" pos:end="157:37">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="157:45" pos:end="157:69">/* Sampled sound chunk */</comment>

            <expr_stmt pos:start="159:13" pos:end="159:50"><expr pos:start="159:13" pos:end="159:49"><name pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:16">aiff</name><operator pos:start="159:17" pos:end="159:18">-&gt;</operator><name pos:start="159:19" pos:end="159:26">data_end</name></name> <operator pos:start="159:28" pos:end="159:28">=</operator> <call pos:start="159:30" pos:end="159:42"><name pos:start="159:30" pos:end="159:38">avio_tell</name><argument_list pos:start="159:39" pos:end="159:42">(<argument pos:start="159:40" pos:end="159:41"><expr pos:start="159:40" pos:end="159:41"><name pos:start="159:40" pos:end="159:41">pb</name></expr></argument>)</argument_list></call> <operator pos:start="159:44" pos:end="159:44">+</operator> <name pos:start="159:46" pos:end="159:49">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:35"><expr pos:start="161:13" pos:end="161:34"><name pos:start="161:13" pos:end="161:18">offset</name> <operator pos:start="161:20" pos:end="161:20">=</operator> <call pos:start="161:22" pos:end="161:34"><name pos:start="161:22" pos:end="161:30">avio_rb32</name><argument_list pos:start="161:31" pos:end="161:34">(<argument pos:start="161:32" pos:end="161:33"><expr pos:start="161:32" pos:end="161:33"><name pos:start="161:32" pos:end="161:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="161:42" pos:end="161:67">/* Offset of sound data */</comment>

            <expr_stmt pos:start="163:13" pos:end="163:26"><expr pos:start="163:13" pos:end="163:25"><call pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:21">avio_rb32</name><argument_list pos:start="163:22" pos:end="163:25">(<argument pos:start="163:23" pos:end="163:24"><expr pos:start="163:23" pos:end="163:24"><name pos:start="163:23" pos:end="163:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block" pos:start="163:42" pos:end="163:70">/* BlockSize... don't care */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:36"><expr pos:start="165:13" pos:end="165:35"><name pos:start="165:13" pos:end="165:18">offset</name> <operator pos:start="165:20" pos:end="165:21">+=</operator> <call pos:start="165:23" pos:end="165:35"><name pos:start="165:23" pos:end="165:31">avio_tell</name><argument_list pos:start="165:32" pos:end="165:35">(<argument pos:start="165:33" pos:end="165:34"><expr pos:start="165:33" pos:end="165:34"><name pos:start="165:33" pos:end="165:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="165:41" pos:end="165:74">/* Compute absolute data offset */</comment>

            <if_stmt pos:start="167:13" pos:end="169:31"><if pos:start="167:13" pos:end="169:31">if <condition pos:start="167:16" pos:end="167:59">(<expr pos:start="167:17" pos:end="167:58"><name pos:start="167:17" pos:end="167:41"><name pos:start="167:17" pos:end="167:18">st</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:28">codecpar</name><operator pos:start="167:29" pos:end="167:30">-&gt;</operator><name pos:start="167:31" pos:end="167:41">block_align</name></name> <operator pos:start="167:43" pos:end="167:44">&amp;&amp;</operator> <operator pos:start="167:46" pos:end="167:46">!</operator><name pos:start="167:47" pos:end="167:58"><name pos:start="167:47" pos:end="167:48">pb</name><operator pos:start="167:49" pos:end="167:50">-&gt;</operator><name pos:start="167:51" pos:end="167:58">seekable</name></name></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:31"><block_content pos:start="169:17" pos:end="169:31">    <comment type="block" pos:start="167:64" pos:end="167:95">/* Assume COMM already parsed */</comment>

                <goto pos:start="169:17" pos:end="169:31">goto <name pos:start="169:22" pos:end="169:30">got_sound</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="171:13" pos:end="177:13"><if pos:start="171:13" pos:end="177:13">if <condition pos:start="171:16" pos:end="171:30">(<expr pos:start="171:17" pos:end="171:29"><operator pos:start="171:17" pos:end="171:17">!</operator><name pos:start="171:18" pos:end="171:29"><name pos:start="171:18" pos:end="171:19">pb</name><operator pos:start="171:20" pos:end="171:21">-&gt;</operator><name pos:start="171:22" pos:end="171:29">seekable</name></name></expr>)</condition> <block pos:start="171:32" pos:end="177:13">{<block_content pos:start="173:17" pos:end="175:26">

                <expr_stmt pos:start="173:17" pos:end="173:66"><expr pos:start="173:17" pos:end="173:65"><call pos:start="173:17" pos:end="173:65"><name pos:start="173:17" pos:end="173:22">av_log</name><argument_list pos:start="173:23" pos:end="173:65">(<argument pos:start="173:24" pos:end="173:24"><expr pos:start="173:24" pos:end="173:24"><name pos:start="173:24" pos:end="173:24">s</name></expr></argument>, <argument pos:start="173:27" pos:end="173:38"><expr pos:start="173:27" pos:end="173:38"><name pos:start="173:27" pos:end="173:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="173:41" pos:end="173:64"><expr pos:start="173:41" pos:end="173:64"><literal type="string" pos:start="173:41" pos:end="173:64">"file is not seekable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="175:17" pos:end="175:26">return <expr pos:start="175:24" pos:end="175:25"><operator pos:start="175:24" pos:end="175:24">-</operator><literal type="number" pos:start="175:25" pos:end="175:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:36"><expr pos:start="179:13" pos:end="179:35"><call pos:start="179:13" pos:end="179:35"><name pos:start="179:13" pos:end="179:21">avio_skip</name><argument_list pos:start="179:22" pos:end="179:35">(<argument pos:start="179:23" pos:end="179:24"><expr pos:start="179:23" pos:end="179:24"><name pos:start="179:23" pos:end="179:24">pb</name></expr></argument>, <argument pos:start="179:27" pos:end="179:34"><expr pos:start="179:27" pos:end="179:34"><name pos:start="179:27" pos:end="179:30">size</name> <operator pos:start="179:32" pos:end="179:32">-</operator> <literal type="number" pos:start="179:34" pos:end="179:34">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <case pos:start="183:9" pos:end="183:39">case <expr pos:start="183:14" pos:end="183:38"><call pos:start="183:14" pos:end="183:38"><name pos:start="183:14" pos:end="183:18">MKTAG</name><argument_list pos:start="183:19" pos:end="183:38">(<argument pos:start="183:20" pos:end="183:22"><expr pos:start="183:20" pos:end="183:22"><literal type="char" pos:start="183:20" pos:end="183:22">'w'</literal></expr></argument>, <argument pos:start="183:25" pos:end="183:27"><expr pos:start="183:25" pos:end="183:27"><literal type="char" pos:start="183:25" pos:end="183:27">'a'</literal></expr></argument>, <argument pos:start="183:30" pos:end="183:32"><expr pos:start="183:30" pos:end="183:32"><literal type="char" pos:start="183:30" pos:end="183:32">'v'</literal></expr></argument>, <argument pos:start="183:35" pos:end="183:37"><expr pos:start="183:35" pos:end="183:37"><literal type="char" pos:start="183:35" pos:end="183:37">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="185:13" pos:end="187:26"><if pos:start="185:13" pos:end="187:26">if <condition pos:start="185:16" pos:end="185:41">(<expr pos:start="185:17" pos:end="185:40"><operator pos:start="185:17" pos:end="185:17">(</operator><name pos:start="185:18" pos:end="185:25">uint64_t</name><operator pos:start="185:26" pos:end="185:26">)</operator><name pos:start="185:27" pos:end="185:30">size</name> <operator pos:start="185:32" pos:end="185:32">&gt;</operator> <operator pos:start="185:34" pos:end="185:34">(</operator><literal type="number" pos:start="185:35" pos:end="185:35">1</literal><operator pos:start="185:36" pos:end="185:37">&lt;&lt;</operator><literal type="number" pos:start="185:38" pos:end="185:39">30</literal><operator pos:start="185:40" pos:end="185:40">)</operator></expr>)</condition><block type="pseudo" pos:start="187:17" pos:end="187:26"><block_content pos:start="187:17" pos:end="187:26">

                <return pos:start="187:17" pos:end="187:26">return <expr pos:start="187:24" pos:end="187:25"><operator pos:start="187:24" pos:end="187:24">-</operator><literal type="number" pos:start="187:25" pos:end="187:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="189:13" pos:end="191:39"><if pos:start="189:13" pos:end="191:39">if <condition pos:start="189:16" pos:end="189:64">(<expr pos:start="189:17" pos:end="189:63"><call pos:start="189:17" pos:end="189:59"><name pos:start="189:17" pos:end="189:32">ff_get_extradata</name><argument_list pos:start="189:33" pos:end="189:59">(<argument pos:start="189:34" pos:end="189:34"><expr pos:start="189:34" pos:end="189:34"><name pos:start="189:34" pos:end="189:34">s</name></expr></argument>, <argument pos:start="189:37" pos:end="189:48"><expr pos:start="189:37" pos:end="189:48"><name pos:start="189:37" pos:end="189:48"><name pos:start="189:37" pos:end="189:38">st</name><operator pos:start="189:39" pos:end="189:40">-&gt;</operator><name pos:start="189:41" pos:end="189:48">codecpar</name></name></expr></argument>, <argument pos:start="189:51" pos:end="189:52"><expr pos:start="189:51" pos:end="189:52"><name pos:start="189:51" pos:end="189:52">pb</name></expr></argument>, <argument pos:start="189:55" pos:end="189:58"><expr pos:start="189:55" pos:end="189:58"><name pos:start="189:55" pos:end="189:58">size</name></expr></argument>)</argument_list></call> <operator pos:start="189:61" pos:end="189:61">&lt;</operator> <literal type="number" pos:start="189:63" pos:end="189:63">0</literal></expr>)</condition><block type="pseudo" pos:start="191:17" pos:end="191:39"><block_content pos:start="191:17" pos:end="191:39">

                <return pos:start="191:17" pos:end="191:39">return <expr pos:start="191:24" pos:end="191:38"><call pos:start="191:24" pos:end="191:38"><name pos:start="191:24" pos:end="191:30">AVERROR</name><argument_list pos:start="191:31" pos:end="191:38">(<argument pos:start="191:32" pos:end="191:37"><expr pos:start="191:32" pos:end="191:37"><name pos:start="191:32" pos:end="191:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="193:13" pos:end="231:13"><if pos:start="193:13" pos:end="201:13">if <condition pos:start="193:16" pos:end="195:60">(   <expr pos:start="193:20" pos:end="195:59"><operator pos:start="193:20" pos:end="193:20">(</operator><name pos:start="193:21" pos:end="193:42"><name pos:start="193:21" pos:end="193:22">st</name><operator pos:start="193:23" pos:end="193:24">-&gt;</operator><name pos:start="193:25" pos:end="193:32">codecpar</name><operator pos:start="193:33" pos:end="193:34">-&gt;</operator><name pos:start="193:35" pos:end="193:42">codec_id</name></name> <operator pos:start="193:44" pos:end="193:45">==</operator> <name pos:start="193:47" pos:end="193:62">AV_CODEC_ID_QDMC</name> <operator pos:start="193:64" pos:end="193:65">||</operator> <name pos:start="193:67" pos:end="193:88"><name pos:start="193:67" pos:end="193:68">st</name><operator pos:start="193:69" pos:end="193:70">-&gt;</operator><name pos:start="193:71" pos:end="193:78">codecpar</name><operator pos:start="193:79" pos:end="193:80">-&gt;</operator><name pos:start="193:81" pos:end="193:88">codec_id</name></name> <operator pos:start="193:90" pos:end="193:91">==</operator> <name pos:start="193:93" pos:end="193:108">AV_CODEC_ID_QDM2</name><operator pos:start="193:109" pos:end="193:109">)</operator>

                <operator pos:start="195:17" pos:end="195:18">&amp;&amp;</operator> <name pos:start="195:20" pos:end="195:23">size</name><operator pos:start="195:24" pos:end="195:25">&gt;=</operator><literal type="number" pos:start="195:26" pos:end="195:27">12</literal><operator pos:start="195:28" pos:end="195:28">*</operator><literal type="number" pos:start="195:29" pos:end="195:29">4</literal> <operator pos:start="195:31" pos:end="195:32">&amp;&amp;</operator> <operator pos:start="195:34" pos:end="195:34">!</operator><name pos:start="195:35" pos:end="195:59"><name pos:start="195:35" pos:end="195:36">st</name><operator pos:start="195:37" pos:end="195:38">-&gt;</operator><name pos:start="195:39" pos:end="195:46">codecpar</name><operator pos:start="195:47" pos:end="195:48">-&gt;</operator><name pos:start="195:49" pos:end="195:59">block_align</name></name></expr>)</condition> <block pos:start="195:62" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:76">

                <expr_stmt pos:start="197:17" pos:end="197:82"><expr pos:start="197:17" pos:end="197:81"><name pos:start="197:17" pos:end="197:41"><name pos:start="197:17" pos:end="197:18">st</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:28">codecpar</name><operator pos:start="197:29" pos:end="197:30">-&gt;</operator><name pos:start="197:31" pos:end="197:41">block_align</name></name> <operator pos:start="197:43" pos:end="197:43">=</operator> <call pos:start="197:45" pos:end="197:81"><name pos:start="197:45" pos:end="197:51">AV_RB32</name><argument_list pos:start="197:52" pos:end="197:81">(<argument pos:start="197:53" pos:end="197:80"><expr pos:start="197:53" pos:end="197:80"><name pos:start="197:53" pos:end="197:75"><name pos:start="197:53" pos:end="197:54">st</name><operator pos:start="197:55" pos:end="197:56">-&gt;</operator><name pos:start="197:57" pos:end="197:64">codecpar</name><operator pos:start="197:65" pos:end="197:66">-&gt;</operator><name pos:start="197:67" pos:end="197:75">extradata</name></name><operator pos:start="197:76" pos:end="197:76">+</operator><literal type="number" pos:start="197:77" pos:end="197:78">11</literal><operator pos:start="197:79" pos:end="197:79">*</operator><literal type="number" pos:start="197:80" pos:end="197:80">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:76"><expr pos:start="199:17" pos:end="199:75"><name pos:start="199:17" pos:end="199:36"><name pos:start="199:17" pos:end="199:20">aiff</name><operator pos:start="199:21" pos:end="199:22">-&gt;</operator><name pos:start="199:23" pos:end="199:36">block_duration</name></name> <operator pos:start="199:38" pos:end="199:38">=</operator> <call pos:start="199:40" pos:end="199:75"><name pos:start="199:40" pos:end="199:46">AV_RB32</name><argument_list pos:start="199:47" pos:end="199:75">(<argument pos:start="199:48" pos:end="199:74"><expr pos:start="199:48" pos:end="199:74"><name pos:start="199:48" pos:end="199:70"><name pos:start="199:48" pos:end="199:49">st</name><operator pos:start="199:50" pos:end="199:51">-&gt;</operator><name pos:start="199:52" pos:end="199:59">codecpar</name><operator pos:start="199:60" pos:end="199:61">-&gt;</operator><name pos:start="199:62" pos:end="199:70">extradata</name></name><operator pos:start="199:71" pos:end="199:71">+</operator><literal type="number" pos:start="199:72" pos:end="199:72">9</literal><operator pos:start="199:73" pos:end="199:73">*</operator><literal type="number" pos:start="199:74" pos:end="199:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="201:15" pos:end="231:13">else if <condition pos:start="201:23" pos:end="201:67">(<expr pos:start="201:24" pos:end="201:66"><name pos:start="201:24" pos:end="201:45"><name pos:start="201:24" pos:end="201:25">st</name><operator pos:start="201:26" pos:end="201:27">-&gt;</operator><name pos:start="201:28" pos:end="201:35">codecpar</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:45">codec_id</name></name> <operator pos:start="201:47" pos:end="201:48">==</operator> <name pos:start="201:50" pos:end="201:66">AV_CODEC_ID_QCELP</name></expr>)</condition> <block pos:start="201:69" pos:end="231:13">{<block_content pos:start="203:17" pos:end="229:62">

                <decl_stmt pos:start="203:17" pos:end="203:30"><decl pos:start="203:17" pos:end="203:29"><type pos:start="203:17" pos:end="203:20"><name pos:start="203:17" pos:end="203:20">char</name></type> <name pos:start="203:22" pos:end="203:25">rate</name> <init pos:start="203:27" pos:end="203:29">= <expr pos:start="203:29" pos:end="203:29"><literal type="number" pos:start="203:29" pos:end="203:29">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="205:17" pos:end="207:55"><if pos:start="205:17" pos:end="207:55">if <condition pos:start="205:20" pos:end="205:31">(<expr pos:start="205:21" pos:end="205:30"><name pos:start="205:21" pos:end="205:24">size</name> <operator pos:start="205:26" pos:end="205:27">&gt;=</operator> <literal type="number" pos:start="205:29" pos:end="205:30">25</literal></expr>)</condition><block type="pseudo" pos:start="207:21" pos:end="207:55"><block_content pos:start="207:21" pos:end="207:55">

                    <expr_stmt pos:start="207:21" pos:end="207:55"><expr pos:start="207:21" pos:end="207:54"><name pos:start="207:21" pos:end="207:24">rate</name> <operator pos:start="207:26" pos:end="207:26">=</operator> <name pos:start="207:28" pos:end="207:54"><name pos:start="207:28" pos:end="207:29">st</name><operator pos:start="207:30" pos:end="207:31">-&gt;</operator><name pos:start="207:32" pos:end="207:39">codecpar</name><operator pos:start="207:40" pos:end="207:41">-&gt;</operator><name pos:start="207:42" pos:end="207:50">extradata</name><index pos:start="207:51" pos:end="207:54">[<expr pos:start="207:52" pos:end="207:53"><literal type="number" pos:start="207:52" pos:end="207:53">24</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <switch pos:start="209:17" pos:end="223:17">switch <condition pos:start="209:24" pos:end="209:29">(<expr pos:start="209:25" pos:end="209:28"><name pos:start="209:25" pos:end="209:28">rate</name></expr>)</condition> <block pos:start="209:31" pos:end="223:17">{<block_content pos:start="211:17" pos:end="221:51">

                <case pos:start="211:17" pos:end="211:25">case <expr pos:start="211:22" pos:end="211:24"><literal type="char" pos:start="211:22" pos:end="211:24">'H'</literal></expr>:</case> <comment type="line" pos:start="211:27" pos:end="211:38">// RATE_HALF</comment>

                    <expr_stmt pos:start="213:21" pos:end="213:51"><expr pos:start="213:21" pos:end="213:50"><name pos:start="213:21" pos:end="213:45"><name pos:start="213:21" pos:end="213:22">st</name><operator pos:start="213:23" pos:end="213:24">-&gt;</operator><name pos:start="213:25" pos:end="213:32">codecpar</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:45">block_align</name></name> <operator pos:start="213:47" pos:end="213:47">=</operator> <literal type="number" pos:start="213:49" pos:end="213:50">17</literal></expr>;</expr_stmt>

                    <break pos:start="215:21" pos:end="215:26">break;</break>

                <case pos:start="217:17" pos:end="217:25">case <expr pos:start="217:22" pos:end="217:24"><literal type="char" pos:start="217:22" pos:end="217:24">'F'</literal></expr>:</case> <comment type="line" pos:start="217:27" pos:end="217:38">// RATE_FULL</comment>

                <default pos:start="219:17" pos:end="219:24">default:</default>

                    <expr_stmt pos:start="221:21" pos:end="221:51"><expr pos:start="221:21" pos:end="221:50"><name pos:start="221:21" pos:end="221:45"><name pos:start="221:21" pos:end="221:22">st</name><operator pos:start="221:23" pos:end="221:24">-&gt;</operator><name pos:start="221:25" pos:end="221:32">codecpar</name><operator pos:start="221:33" pos:end="221:34">-&gt;</operator><name pos:start="221:35" pos:end="221:45">block_align</name></name> <operator pos:start="221:47" pos:end="221:47">=</operator> <literal type="number" pos:start="221:49" pos:end="221:50">35</literal></expr>;</expr_stmt>

                </block_content>}</block></switch>

                <expr_stmt pos:start="225:17" pos:end="225:43"><expr pos:start="225:17" pos:end="225:42"><name pos:start="225:17" pos:end="225:36"><name pos:start="225:17" pos:end="225:20">aiff</name><operator pos:start="225:21" pos:end="225:22">-&gt;</operator><name pos:start="225:23" pos:end="225:36">block_duration</name></name> <operator pos:start="225:38" pos:end="225:38">=</operator> <literal type="number" pos:start="225:40" pos:end="225:42">160</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="229:62"><expr pos:start="227:17" pos:end="229:61"><name pos:start="227:17" pos:end="227:38"><name pos:start="227:17" pos:end="227:18">st</name><operator pos:start="227:19" pos:end="227:20">-&gt;</operator><name pos:start="227:21" pos:end="227:28">codecpar</name><operator pos:start="227:29" pos:end="227:30">-&gt;</operator><name pos:start="227:31" pos:end="227:38">bit_rate</name></name> <operator pos:start="227:40" pos:end="227:40">=</operator> <name pos:start="227:42" pos:end="227:66"><name pos:start="227:42" pos:end="227:43">st</name><operator pos:start="227:44" pos:end="227:45">-&gt;</operator><name pos:start="227:46" pos:end="227:53">codecpar</name><operator pos:start="227:54" pos:end="227:55">-&gt;</operator><name pos:start="227:56" pos:end="227:66">sample_rate</name></name> <operator pos:start="227:68" pos:end="227:68">*</operator> <operator pos:start="227:70" pos:end="227:70">(</operator><name pos:start="227:71" pos:end="227:95"><name pos:start="227:71" pos:end="227:72">st</name><operator pos:start="227:73" pos:end="227:74">-&gt;</operator><name pos:start="227:75" pos:end="227:82">codecpar</name><operator pos:start="227:83" pos:end="227:84">-&gt;</operator><name pos:start="227:85" pos:end="227:95">block_align</name></name> <operator pos:start="227:97" pos:end="227:98">&lt;&lt;</operator> <literal type="number" pos:start="227:100" pos:end="227:100">3</literal><operator pos:start="227:101" pos:end="227:101">)</operator> <operator pos:start="227:103" pos:end="227:103">/</operator>

                                         <name pos:start="229:42" pos:end="229:61"><name pos:start="229:42" pos:end="229:45">aiff</name><operator pos:start="229:46" pos:end="229:47">-&gt;</operator><name pos:start="229:48" pos:end="229:61">block_duration</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="233:13" pos:end="233:18">break;</break>

        <case pos:start="235:9" pos:end="235:36">case <expr pos:start="235:14" pos:end="235:35"><call pos:start="235:14" pos:end="235:35"><name pos:start="235:14" pos:end="235:18">MKTAG</name><argument_list pos:start="235:19" pos:end="235:35">(<argument pos:start="235:20" pos:end="235:22"><expr pos:start="235:20" pos:end="235:22"><literal type="char" pos:start="235:20" pos:end="235:22">'C'</literal></expr></argument>,<argument pos:start="235:24" pos:end="235:26"><expr pos:start="235:24" pos:end="235:26"><literal type="char" pos:start="235:24" pos:end="235:26">'H'</literal></expr></argument>,<argument pos:start="235:28" pos:end="235:30"><expr pos:start="235:28" pos:end="235:30"><literal type="char" pos:start="235:28" pos:end="235:30">'A'</literal></expr></argument>,<argument pos:start="235:32" pos:end="235:34"><expr pos:start="235:32" pos:end="235:34"><literal type="char" pos:start="235:32" pos:end="235:34">'N'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="237:13" pos:end="239:43"><if pos:start="237:13" pos:end="239:43">if<condition pos:start="237:15" pos:end="237:53">(<expr pos:start="237:16" pos:end="237:52"><call pos:start="237:16" pos:end="237:48"><name pos:start="237:16" pos:end="237:31">ff_mov_read_chan</name><argument_list pos:start="237:32" pos:end="237:48">(<argument pos:start="237:33" pos:end="237:33"><expr pos:start="237:33" pos:end="237:33"><name pos:start="237:33" pos:end="237:33">s</name></expr></argument>, <argument pos:start="237:36" pos:end="237:37"><expr pos:start="237:36" pos:end="237:37"><name pos:start="237:36" pos:end="237:37">pb</name></expr></argument>, <argument pos:start="237:40" pos:end="237:41"><expr pos:start="237:40" pos:end="237:41"><name pos:start="237:40" pos:end="237:41">st</name></expr></argument>, <argument pos:start="237:44" pos:end="237:47"><expr pos:start="237:44" pos:end="237:47"><name pos:start="237:44" pos:end="237:47">size</name></expr></argument>)</argument_list></call> <operator pos:start="237:50" pos:end="237:50">&lt;</operator> <literal type="number" pos:start="237:52" pos:end="237:52">0</literal></expr>)</condition><block type="pseudo" pos:start="239:17" pos:end="239:43"><block_content pos:start="239:17" pos:end="239:43">

                <return pos:start="239:17" pos:end="239:43">return <expr pos:start="239:24" pos:end="239:42"><name pos:start="239:24" pos:end="239:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="241:13" pos:end="241:18">break;</break>

        <case pos:start="243:9" pos:end="243:15">case <expr pos:start="243:14" pos:end="243:14"><literal type="number" pos:start="243:14" pos:end="243:14">0</literal></expr>:</case>

            <if_stmt pos:start="245:13" pos:end="247:31"><if pos:start="245:13" pos:end="247:31">if <condition pos:start="245:16" pos:end="245:56">(<expr pos:start="245:17" pos:end="245:55"><name pos:start="245:17" pos:end="245:22">offset</name> <operator pos:start="245:24" pos:end="245:24">&gt;</operator> <literal type="number" pos:start="245:26" pos:end="245:26">0</literal> <operator pos:start="245:28" pos:end="245:29">&amp;&amp;</operator> <name pos:start="245:31" pos:end="245:55"><name pos:start="245:31" pos:end="245:32">st</name><operator pos:start="245:33" pos:end="245:34">-&gt;</operator><name pos:start="245:35" pos:end="245:42">codecpar</name><operator pos:start="245:43" pos:end="245:44">-&gt;</operator><name pos:start="245:45" pos:end="245:55">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="247:17" pos:end="247:31"><block_content pos:start="247:17" pos:end="247:31"> <comment type="line" pos:start="245:58" pos:end="245:72">// COMM &amp;&amp; SSND</comment>

                <goto pos:start="247:17" pos:end="247:31">goto <name pos:start="247:22" pos:end="247:30">got_sound</name>;</goto></block_content></block></if></if_stmt>

        <default pos:start="249:9" pos:end="249:16">default:</default> <comment type="block" pos:start="249:18" pos:end="249:27">/* Jump */</comment>

            <if_stmt pos:start="251:13" pos:end="253:23"><if pos:start="251:13" pos:end="253:23">if <condition pos:start="251:16" pos:end="251:25">(<expr pos:start="251:17" pos:end="251:24"><name pos:start="251:17" pos:end="251:20">size</name> <operator pos:start="251:22" pos:end="251:22">&amp;</operator> <literal type="number" pos:start="251:24" pos:end="251:24">1</literal></expr>)</condition><block type="pseudo" pos:start="253:17" pos:end="253:23"><block_content pos:start="253:17" pos:end="253:23">   <comment type="block" pos:start="251:29" pos:end="251:53">/* Always even aligned */</comment>

                <expr_stmt pos:start="253:17" pos:end="253:23"><expr pos:start="253:17" pos:end="253:22"><name pos:start="253:17" pos:end="253:20">size</name><operator pos:start="253:21" pos:end="253:22">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:32"><expr pos:start="255:13" pos:end="255:31"><call pos:start="255:13" pos:end="255:31"><name pos:start="255:13" pos:end="255:21">avio_skip</name><argument_list pos:start="255:22" pos:end="255:31">(<argument pos:start="255:23" pos:end="255:24"><expr pos:start="255:23" pos:end="255:24"><name pos:start="255:23" pos:end="255:24">pb</name></expr></argument>, <argument pos:start="255:27" pos:end="255:30"><expr pos:start="255:27" pos:end="255:30"><name pos:start="255:27" pos:end="255:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></while>



<label pos:start="263:1" pos:end="263:10"><name pos:start="263:1" pos:end="263:9">got_sound</name>:</label>

    <if_stmt pos:start="265:5" pos:end="277:5"><if pos:start="265:5" pos:end="271:5">if <condition pos:start="265:8" pos:end="265:82">(<expr pos:start="265:9" pos:end="265:81"><operator pos:start="265:9" pos:end="265:9">!</operator><name pos:start="265:10" pos:end="265:34"><name pos:start="265:10" pos:end="265:11">st</name><operator pos:start="265:12" pos:end="265:13">-&gt;</operator><name pos:start="265:14" pos:end="265:21">codecpar</name><operator pos:start="265:22" pos:end="265:23">-&gt;</operator><name pos:start="265:24" pos:end="265:34">block_align</name></name> <operator pos:start="265:36" pos:end="265:37">&amp;&amp;</operator> <name pos:start="265:39" pos:end="265:60"><name pos:start="265:39" pos:end="265:40">st</name><operator pos:start="265:41" pos:end="265:42">-&gt;</operator><name pos:start="265:43" pos:end="265:50">codecpar</name><operator pos:start="265:51" pos:end="265:52">-&gt;</operator><name pos:start="265:53" pos:end="265:60">codec_id</name></name> <operator pos:start="265:62" pos:end="265:63">==</operator> <name pos:start="265:65" pos:end="265:81">AV_CODEC_ID_QCELP</name></expr>)</condition> <block pos:start="265:84" pos:end="271:5">{<block_content pos:start="267:9" pos:end="269:39">

        <expr_stmt pos:start="267:9" pos:end="267:84"><expr pos:start="267:9" pos:end="267:83"><call pos:start="267:9" pos:end="267:83"><name pos:start="267:9" pos:end="267:14">av_log</name><argument_list pos:start="267:15" pos:end="267:83">(<argument pos:start="267:16" pos:end="267:16"><expr pos:start="267:16" pos:end="267:16"><name pos:start="267:16" pos:end="267:16">s</name></expr></argument>, <argument pos:start="267:19" pos:end="267:32"><expr pos:start="267:19" pos:end="267:32"><name pos:start="267:19" pos:end="267:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="267:35" pos:end="267:82"><expr pos:start="267:35" pos:end="267:82"><literal type="string" pos:start="267:35" pos:end="267:82">"qcelp without wave chunk, assuming full rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:39"><expr pos:start="269:9" pos:end="269:38"><name pos:start="269:9" pos:end="269:33"><name pos:start="269:9" pos:end="269:10">st</name><operator pos:start="269:11" pos:end="269:12">-&gt;</operator><name pos:start="269:13" pos:end="269:20">codecpar</name><operator pos:start="269:21" pos:end="269:22">-&gt;</operator><name pos:start="269:23" pos:end="269:33">block_align</name></name> <operator pos:start="269:35" pos:end="269:35">=</operator> <literal type="number" pos:start="269:37" pos:end="269:38">35</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="271:7" pos:end="277:5">else if <condition pos:start="271:15" pos:end="271:42">(<expr pos:start="271:16" pos:end="271:41"><operator pos:start="271:16" pos:end="271:16">!</operator><name pos:start="271:17" pos:end="271:41"><name pos:start="271:17" pos:end="271:18">st</name><operator pos:start="271:19" pos:end="271:20">-&gt;</operator><name pos:start="271:21" pos:end="271:28">codecpar</name><operator pos:start="271:29" pos:end="271:30">-&gt;</operator><name pos:start="271:31" pos:end="271:41">block_align</name></name></expr>)</condition> <block pos:start="271:44" pos:end="277:5">{<block_content pos:start="273:9" pos:end="275:18">

        <expr_stmt pos:start="273:9" pos:end="273:90"><expr pos:start="273:9" pos:end="273:89"><call pos:start="273:9" pos:end="273:89"><name pos:start="273:9" pos:end="273:14">av_log</name><argument_list pos:start="273:15" pos:end="273:89">(<argument pos:start="273:16" pos:end="273:16"><expr pos:start="273:16" pos:end="273:16"><name pos:start="273:16" pos:end="273:16">s</name></expr></argument>, <argument pos:start="273:19" pos:end="273:30"><expr pos:start="273:19" pos:end="273:30"><name pos:start="273:19" pos:end="273:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:33" pos:end="273:88"><expr pos:start="273:33" pos:end="273:88"><literal type="string" pos:start="273:33" pos:end="273:88">"could not find COMM tag or invalid block_align value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="275:9" pos:end="275:18">return <expr pos:start="275:16" pos:end="275:17"><operator pos:start="275:16" pos:end="275:16">-</operator><literal type="number" pos:start="275:17" pos:end="275:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="281:5" pos:end="281:58">/* Now positioned, get the sound data start and end */</comment>

    <expr_stmt pos:start="283:5" pos:end="283:62"><expr pos:start="283:5" pos:end="283:61"><call pos:start="283:5" pos:end="283:61"><name pos:start="283:5" pos:end="283:23">avpriv_set_pts_info</name><argument_list pos:start="283:24" pos:end="283:61">(<argument pos:start="283:25" pos:end="283:26"><expr pos:start="283:25" pos:end="283:26"><name pos:start="283:25" pos:end="283:26">st</name></expr></argument>, <argument pos:start="283:29" pos:end="283:30"><expr pos:start="283:29" pos:end="283:30"><literal type="number" pos:start="283:29" pos:end="283:30">64</literal></expr></argument>, <argument pos:start="283:33" pos:end="283:33"><expr pos:start="283:33" pos:end="283:33"><literal type="number" pos:start="283:33" pos:end="283:33">1</literal></expr></argument>, <argument pos:start="283:36" pos:end="283:60"><expr pos:start="283:36" pos:end="283:60"><name pos:start="283:36" pos:end="283:60"><name pos:start="283:36" pos:end="283:37">st</name><operator pos:start="283:38" pos:end="283:39">-&gt;</operator><name pos:start="283:40" pos:end="283:47">codecpar</name><operator pos:start="283:48" pos:end="283:49">-&gt;</operator><name pos:start="283:50" pos:end="283:60">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:23"><expr pos:start="285:5" pos:end="285:22"><name pos:start="285:5" pos:end="285:18"><name pos:start="285:5" pos:end="285:6">st</name><operator pos:start="285:7" pos:end="285:8">-&gt;</operator><name pos:start="285:9" pos:end="285:18">start_time</name></name> <operator pos:start="285:20" pos:end="285:20">=</operator> <literal type="number" pos:start="285:22" pos:end="285:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:56"><expr pos:start="287:5" pos:end="287:55"><name pos:start="287:5" pos:end="287:16"><name pos:start="287:5" pos:end="287:6">st</name><operator pos:start="287:7" pos:end="287:8">-&gt;</operator><name pos:start="287:9" pos:end="287:16">duration</name></name> <operator pos:start="287:18" pos:end="287:18">=</operator> <name pos:start="287:20" pos:end="287:32"><name pos:start="287:20" pos:end="287:21">st</name><operator pos:start="287:22" pos:end="287:23">-&gt;</operator><name pos:start="287:24" pos:end="287:32">nb_frames</name></name> <operator pos:start="287:34" pos:end="287:34">*</operator> <name pos:start="287:36" pos:end="287:55"><name pos:start="287:36" pos:end="287:39">aiff</name><operator pos:start="287:40" pos:end="287:41">-&gt;</operator><name pos:start="287:42" pos:end="287:55">block_duration</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:48">/* Position the stream at the first block */</comment>

    <expr_stmt pos:start="293:5" pos:end="293:36"><expr pos:start="293:5" pos:end="293:35"><call pos:start="293:5" pos:end="293:35"><name pos:start="293:5" pos:end="293:13">avio_seek</name><argument_list pos:start="293:14" pos:end="293:35">(<argument pos:start="293:15" pos:end="293:16"><expr pos:start="293:15" pos:end="293:16"><name pos:start="293:15" pos:end="293:16">pb</name></expr></argument>, <argument pos:start="293:19" pos:end="293:24"><expr pos:start="293:19" pos:end="293:24"><name pos:start="293:19" pos:end="293:24">offset</name></expr></argument>, <argument pos:start="293:27" pos:end="293:34"><expr pos:start="293:27" pos:end="293:34"><name pos:start="293:27" pos:end="293:34">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="297:5" pos:end="297:13">return <expr pos:start="297:12" pos:end="297:12"><literal type="number" pos:start="297:12" pos:end="297:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
