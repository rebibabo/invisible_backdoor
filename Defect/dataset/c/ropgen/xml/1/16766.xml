<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16766.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">multi_serial_pci_realize</name><parameter_list pos:start="1:37" pos:end="1:66">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:46">PCIDevice</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">dev</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:58">Error</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:5">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">PCIDeviceClass</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:22">pc</name> <init pos:start="5:24" pos:end="5:50">= <expr pos:start="5:26" pos:end="5:50"><call pos:start="5:26" pos:end="5:50"><name pos:start="5:26" pos:end="5:45">PCI_DEVICE_GET_CLASS</name><argument_list pos:start="5:46" pos:end="5:50">(<argument pos:start="5:47" pos:end="5:49"><expr pos:start="5:47" pos:end="5:49"><name pos:start="5:47" pos:end="5:49">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:72"><decl pos:start="7:5" pos:end="7:71"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">PCIMultiSerialState</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:28">pci</name> <init pos:start="7:30" pos:end="7:71">= <expr pos:start="7:32" pos:end="7:71"><call pos:start="7:32" pos:end="7:71"><name pos:start="7:32" pos:end="7:40">DO_UPCAST</name><argument_list pos:start="7:41" pos:end="7:71">(<argument pos:start="7:42" pos:end="7:60"><expr pos:start="7:42" pos:end="7:60"><name pos:start="7:42" pos:end="7:60">PCIMultiSerialState</name></expr></argument>, <argument pos:start="7:63" pos:end="7:65"><expr pos:start="7:63" pos:end="7:65"><name pos:start="7:63" pos:end="7:65">dev</name></expr></argument>, <argument pos:start="7:68" pos:end="7:70"><expr pos:start="7:68" pos:end="7:70"><name pos:start="7:68" pos:end="7:70">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">SerialState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <switch pos:start="17:5" pos:end="31:5">switch <condition pos:start="17:12" pos:end="17:26">(<expr pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:14">pc</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:25">device_id</name></name></expr>)</condition> <block pos:start="17:28" pos:end="31:5">{<block_content pos:start="19:5" pos:end="29:14">

    <case pos:start="19:5" pos:end="19:16">case <expr pos:start="19:10" pos:end="19:15"><literal type="number" pos:start="19:10" pos:end="19:15">0x0003</literal></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:11">pci</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:18">ports</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <literal type="number" pos:start="21:22" pos:end="21:22">2</literal></expr>;</expr_stmt>

        <break pos:start="23:9" pos:end="23:14">break;</break>

    <case pos:start="25:5" pos:end="25:16">case <expr pos:start="25:10" pos:end="25:15"><literal type="number" pos:start="25:10" pos:end="25:15">0x0004</literal></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:11">pci</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:18">ports</name></name> <operator pos:start="27:20" pos:end="27:20">=</operator> <literal type="number" pos:start="27:22" pos:end="27:22">4</literal></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><call pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:26">(<argument pos:start="33:12" pos:end="33:25"><expr pos:start="33:12" pos:end="33:25"><name pos:start="33:12" pos:end="33:21"><name pos:start="33:12" pos:end="33:14">pci</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:21">ports</name></name> <operator pos:start="33:23" pos:end="33:23">&gt;</operator> <literal type="number" pos:start="33:25" pos:end="33:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><call pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:46">(<argument pos:start="35:12" pos:end="35:45"><expr pos:start="35:12" pos:end="35:45"><name pos:start="35:12" pos:end="35:21"><name pos:start="35:12" pos:end="35:14">pci</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:21">ports</name></name> <operator pos:start="35:23" pos:end="35:24">&lt;=</operator> <name pos:start="35:26" pos:end="35:45">PCI_SERIAL_MAX_PORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:51"><expr pos:start="39:5" pos:end="39:50"><name pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:7">pci</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:12">dev</name><operator pos:start="39:13" pos:end="39:13">.</operator><name pos:start="39:14" pos:end="39:19">config</name><index pos:start="39:20" pos:end="39:35">[<expr pos:start="39:21" pos:end="39:34"><name pos:start="39:21" pos:end="39:34">PCI_CLASS_PROG</name></expr>]</index></name> <operator pos:start="39:37" pos:end="39:37">=</operator> <name pos:start="39:39" pos:end="39:50"><name pos:start="39:39" pos:end="39:41">pci</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:50">prog_if</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:46"><expr pos:start="41:5" pos:end="41:45"><name pos:start="41:5" pos:end="41:38"><name pos:start="41:5" pos:end="41:7">pci</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:12">dev</name><operator pos:start="41:13" pos:end="41:13">.</operator><name pos:start="41:14" pos:end="41:19">config</name><index pos:start="41:20" pos:end="41:38">[<expr pos:start="41:21" pos:end="41:37"><name pos:start="41:21" pos:end="41:37">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="41:40" pos:end="41:40">=</operator> <literal type="number" pos:start="41:42" pos:end="41:45">0x01</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:80"><expr pos:start="43:5" pos:end="43:79"><call pos:start="43:5" pos:end="43:79"><name pos:start="43:5" pos:end="43:22">memory_region_init</name><argument_list pos:start="43:23" pos:end="43:79">(<argument pos:start="43:24" pos:end="43:34"><expr pos:start="43:24" pos:end="43:34"><operator pos:start="43:24" pos:end="43:24">&amp;</operator><name pos:start="43:25" pos:end="43:34"><name pos:start="43:25" pos:end="43:27">pci</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:34">iobar</name></name></expr></argument>, <argument pos:start="43:37" pos:end="43:47"><expr pos:start="43:37" pos:end="43:47"><call pos:start="43:37" pos:end="43:47"><name pos:start="43:37" pos:end="43:42">OBJECT</name><argument_list pos:start="43:43" pos:end="43:47">(<argument pos:start="43:44" pos:end="43:46"><expr pos:start="43:44" pos:end="43:46"><name pos:start="43:44" pos:end="43:46">pci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:50" pos:end="43:62"><expr pos:start="43:50" pos:end="43:62"><literal type="string" pos:start="43:50" pos:end="43:62">"multiserial"</literal></expr></argument>, <argument pos:start="43:65" pos:end="43:78"><expr pos:start="43:65" pos:end="43:78"><literal type="number" pos:start="43:65" pos:end="43:65">8</literal> <operator pos:start="43:67" pos:end="43:67">*</operator> <name pos:start="43:69" pos:end="43:78"><name pos:start="43:69" pos:end="43:71">pci</name><operator pos:start="43:72" pos:end="43:73">-&gt;</operator><name pos:start="43:74" pos:end="43:78">ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:75"><expr pos:start="45:5" pos:end="45:74"><call pos:start="45:5" pos:end="45:74"><name pos:start="45:5" pos:end="45:20">pci_register_bar</name><argument_list pos:start="45:21" pos:end="45:74">(<argument pos:start="45:22" pos:end="45:30"><expr pos:start="45:22" pos:end="45:30"><operator pos:start="45:22" pos:end="45:22">&amp;</operator><name pos:start="45:23" pos:end="45:30"><name pos:start="45:23" pos:end="45:25">pci</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:30">dev</name></name></expr></argument>, <argument pos:start="45:33" pos:end="45:33"><expr pos:start="45:33" pos:end="45:33"><literal type="number" pos:start="45:33" pos:end="45:33">0</literal></expr></argument>, <argument pos:start="45:36" pos:end="45:60"><expr pos:start="45:36" pos:end="45:60"><name pos:start="45:36" pos:end="45:60">PCI_BASE_ADDRESS_SPACE_IO</name></expr></argument>, <argument pos:start="45:63" pos:end="45:73"><expr pos:start="45:63" pos:end="45:73"><operator pos:start="45:63" pos:end="45:63">&amp;</operator><name pos:start="45:64" pos:end="45:73"><name pos:start="45:64" pos:end="45:66">pci</name><operator pos:start="45:67" pos:end="45:68">-&gt;</operator><name pos:start="45:69" pos:end="45:73">iobar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="49:47"><expr pos:start="47:5" pos:end="49:46"><name pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:7">pci</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:13">irqs</name></name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="49:46"><name pos:start="47:17" pos:end="47:34">qemu_allocate_irqs</name><argument_list pos:start="47:35" pos:end="49:46">(<argument pos:start="47:36" pos:end="47:55"><expr pos:start="47:36" pos:end="47:55"><name pos:start="47:36" pos:end="47:55">multi_serial_irq_mux</name></expr></argument>, <argument pos:start="47:58" pos:end="47:60"><expr pos:start="47:58" pos:end="47:60"><name pos:start="47:58" pos:end="47:60">pci</name></expr></argument>,

                                   <argument pos:start="49:36" pos:end="49:45"><expr pos:start="49:36" pos:end="49:45"><name pos:start="49:36" pos:end="49:45"><name pos:start="49:36" pos:end="49:38">pci</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:45">ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="53:5" pos:end="79:5">for <control pos:start="53:9" pos:end="53:36">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:31"><expr pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:30"><name pos:start="53:21" pos:end="53:23">pci</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:30">ports</name></name></expr>;</condition> <incr pos:start="53:33" pos:end="53:35"><expr pos:start="53:33" pos:end="53:35"><name pos:start="53:33" pos:end="53:33">i</name><operator pos:start="53:34" pos:end="53:35">++</operator></expr></incr>)</control> <block pos:start="53:38" pos:end="79:5">{<block_content pos:start="55:9" pos:end="77:64">

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:9">s</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <name pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:15">pci</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:22">state</name></name> <operator pos:start="55:24" pos:end="55:24">+</operator> <name pos:start="55:26" pos:end="55:26">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:19">baudbase</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <literal type="number" pos:start="57:23" pos:end="57:28">115200</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:37"><expr pos:start="59:9" pos:end="59:36"><call pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:27">serial_realize_core</name><argument_list pos:start="59:28" pos:end="59:36">(<argument pos:start="59:29" pos:end="59:29"><expr pos:start="59:29" pos:end="59:29"><name pos:start="59:29" pos:end="59:29">s</name></expr></argument>, <argument pos:start="59:32" pos:end="59:35"><expr pos:start="59:32" pos:end="59:35"><operator pos:start="59:32" pos:end="59:32">&amp;</operator><name pos:start="59:33" pos:end="59:35">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:24">(<expr pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:15">err</name> <operator pos:start="61:17" pos:end="61:18">!=</operator> <name pos:start="61:20" pos:end="61:23">NULL</name></expr>)</condition> <block pos:start="61:26" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:19">

            <expr_stmt pos:start="63:13" pos:end="63:39"><expr pos:start="63:13" pos:end="63:38"><call pos:start="63:13" pos:end="63:38"><name pos:start="63:13" pos:end="63:27">error_propagate</name><argument_list pos:start="63:28" pos:end="63:38">(<argument pos:start="63:29" pos:end="63:32"><expr pos:start="63:29" pos:end="63:32"><name pos:start="63:29" pos:end="63:32">errp</name></expr></argument>, <argument pos:start="63:35" pos:end="63:37"><expr pos:start="63:35" pos:end="63:37"><name pos:start="63:35" pos:end="63:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:30"><expr pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:14">irq</name></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <name pos:start="69:18" pos:end="69:29"><name pos:start="69:18" pos:end="69:20">pci</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:26">irqs</name><index pos:start="69:27" pos:end="69:29">[<expr pos:start="69:28" pos:end="69:28"><name pos:start="69:28" pos:end="69:28">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:56"><expr pos:start="71:9" pos:end="71:55"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:11">pci</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:17">name</name><index pos:start="71:18" pos:end="71:20">[<expr pos:start="71:19" pos:end="71:19"><name pos:start="71:19" pos:end="71:19">i</name></expr>]</index></name> <operator pos:start="71:22" pos:end="71:22">=</operator> <call pos:start="71:24" pos:end="71:55"><name pos:start="71:24" pos:end="71:38">g_strdup_printf</name><argument_list pos:start="71:39" pos:end="71:55">(<argument pos:start="71:40" pos:end="71:49"><expr pos:start="71:40" pos:end="71:49"><literal type="string" pos:start="71:40" pos:end="71:49">"uart #%d"</literal></expr></argument>, <argument pos:start="71:52" pos:end="71:54"><expr pos:start="71:52" pos:end="71:54"><name pos:start="71:52" pos:end="71:52">i</name><operator pos:start="71:53" pos:end="71:53">+</operator><literal type="number" pos:start="71:54" pos:end="71:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="75:47"><expr pos:start="73:9" pos:end="75:46"><call pos:start="73:9" pos:end="75:46"><name pos:start="73:9" pos:end="73:29">memory_region_init_io</name><argument_list pos:start="73:30" pos:end="75:46">(<argument pos:start="73:31" pos:end="73:36"><expr pos:start="73:31" pos:end="73:36"><operator pos:start="73:31" pos:end="73:31">&amp;</operator><name pos:start="73:32" pos:end="73:36"><name pos:start="73:32" pos:end="73:32">s</name><operator pos:start="73:33" pos:end="73:34">-&gt;</operator><name pos:start="73:35" pos:end="73:36">io</name></name></expr></argument>, <argument pos:start="73:39" pos:end="73:49"><expr pos:start="73:39" pos:end="73:49"><call pos:start="73:39" pos:end="73:49"><name pos:start="73:39" pos:end="73:44">OBJECT</name><argument_list pos:start="73:45" pos:end="73:49">(<argument pos:start="73:46" pos:end="73:48"><expr pos:start="73:46" pos:end="73:48"><name pos:start="73:46" pos:end="73:48">pci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:52" pos:end="73:65"><expr pos:start="73:52" pos:end="73:65"><operator pos:start="73:52" pos:end="73:52">&amp;</operator><name pos:start="73:53" pos:end="73:65">serial_io_ops</name></expr></argument>, <argument pos:start="73:68" pos:end="73:68"><expr pos:start="73:68" pos:end="73:68"><name pos:start="73:68" pos:end="73:68">s</name></expr></argument>,

                              <argument pos:start="75:31" pos:end="75:42"><expr pos:start="75:31" pos:end="75:42"><name pos:start="75:31" pos:end="75:42"><name pos:start="75:31" pos:end="75:33">pci</name><operator pos:start="75:34" pos:end="75:35">-&gt;</operator><name pos:start="75:36" pos:end="75:39">name</name><index pos:start="75:40" pos:end="75:42">[<expr pos:start="75:41" pos:end="75:41"><name pos:start="75:41" pos:end="75:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="75:45" pos:end="75:45"><expr pos:start="75:45" pos:end="75:45"><literal type="number" pos:start="75:45" pos:end="75:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:64"><expr pos:start="77:9" pos:end="77:63"><call pos:start="77:9" pos:end="77:63"><name pos:start="77:9" pos:end="77:35">memory_region_add_subregion</name><argument_list pos:start="77:36" pos:end="77:63">(<argument pos:start="77:37" pos:end="77:47"><expr pos:start="77:37" pos:end="77:47"><operator pos:start="77:37" pos:end="77:37">&amp;</operator><name pos:start="77:38" pos:end="77:47"><name pos:start="77:38" pos:end="77:40">pci</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:47">iobar</name></name></expr></argument>, <argument pos:start="77:50" pos:end="77:54"><expr pos:start="77:50" pos:end="77:54"><literal type="number" pos:start="77:50" pos:end="77:50">8</literal> <operator pos:start="77:52" pos:end="77:52">*</operator> <name pos:start="77:54" pos:end="77:54">i</name></expr></argument>, <argument pos:start="77:57" pos:end="77:62"><expr pos:start="77:57" pos:end="77:62"><operator pos:start="77:57" pos:end="77:57">&amp;</operator><name pos:start="77:58" pos:end="77:62"><name pos:start="77:58" pos:end="77:58">s</name><operator pos:start="77:59" pos:end="77:60">-&gt;</operator><name pos:start="77:61" pos:end="77:62">io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
