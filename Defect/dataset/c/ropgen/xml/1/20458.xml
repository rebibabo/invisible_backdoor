<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20458.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">parse_channel_expressions</name><parameter_list pos:start="1:37" pos:end="3:62">(<parameter pos:start="1:38" pos:end="1:57"><decl pos:start="1:38" pos:end="1:57"><type pos:start="1:38" pos:end="1:57"><name pos:start="1:38" pos:end="1:52">AVFilterContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">ctx</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:61"><decl pos:start="3:38" pos:end="3:61"><type pos:start="3:38" pos:end="3:61"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:61">expected_nb_channels</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="135:1">{<block_content pos:start="7:5" pos:end="133:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">EvalContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:21">eval</name> <init pos:start="7:23" pos:end="7:33">= <expr pos:start="7:25" pos:end="7:33"><name pos:start="7:25" pos:end="7:33"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:33">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:15">args1</name> <init pos:start="9:17" pos:end="9:40">= <expr pos:start="9:19" pos:end="9:40"><call pos:start="9:19" pos:end="9:40"><name pos:start="9:19" pos:end="9:27">av_strdup</name><argument_list pos:start="9:28" pos:end="9:40">(<argument pos:start="9:29" pos:end="9:39"><expr pos:start="9:29" pos:end="9:39"><name pos:start="9:29" pos:end="9:39"><name pos:start="9:29" pos:end="9:32">eval</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:39">exprs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:14">expr</name></decl>, <decl pos:start="11:17" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:26">last_expr</name></decl>, <decl pos:start="11:29" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:29" pos:end="11:29">*</modifier></type><name pos:start="11:30" pos:end="11:32">buf</name></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:51"><expr pos:start="13:5" pos:end="13:50"><call pos:start="13:5" pos:end="13:43"><call pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:10">double</name> <argument_list pos:start="13:12" pos:end="13:27">(<argument pos:start="13:13" pos:end="13:26"><expr pos:start="13:13" pos:end="13:26"><operator pos:start="13:13" pos:end="13:13">*</operator> <specifier pos:start="13:15" pos:end="13:19">const</specifier> <operator pos:start="13:21" pos:end="13:21">*</operator><name pos:start="13:22" pos:end="13:26">func1</name></expr></argument>)</argument_list></call><argument_list pos:start="13:28" pos:end="13:43">(<argument pos:start="13:29" pos:end="13:34"><expr pos:start="13:29" pos:end="13:34"><name pos:start="13:29" pos:end="13:32">void</name> <operator pos:start="13:34" pos:end="13:34">*</operator></expr></argument>, <argument pos:start="13:37" pos:end="13:42"><expr pos:start="13:37" pos:end="13:42"><name pos:start="13:37" pos:end="13:42">double</name></expr></argument>)</argument_list></call> <operator pos:start="13:45" pos:end="13:45">=</operator> <name pos:start="13:47" pos:end="13:50">NULL</name></expr>;</expr_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:24"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier> <specifier pos:start="15:18" pos:end="15:22">const</specifier> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:35">func1_names</name> <init pos:start="15:37" pos:end="15:42">= <expr pos:start="15:39" pos:end="15:42"><name pos:start="15:39" pos:end="15:42">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">ret</name> <init pos:start="17:16" pos:end="17:18">= <expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:31"><if pos:start="21:5" pos:end="23:31">if <condition pos:start="21:8" pos:end="21:15">(<expr pos:start="21:9" pos:end="21:14"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:14">args1</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:21">(<expr pos:start="27:9" pos:end="27:20"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:20"><name pos:start="27:10" pos:end="27:13">eval</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:20">exprs</name></name></expr>)</condition> <block pos:start="27:23" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:31">

        <expr_stmt pos:start="29:9" pos:end="29:74"><expr pos:start="29:9" pos:end="29:73"><call pos:start="29:9" pos:end="29:73"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:73">(<argument pos:start="29:16" pos:end="29:18"><expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ctx</name></expr></argument>, <argument pos:start="29:21" pos:end="29:32"><expr pos:start="29:21" pos:end="29:32"><name pos:start="29:21" pos:end="29:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:35" pos:end="29:72"><expr pos:start="29:35" pos:end="29:72"><literal type="string" pos:start="29:35" pos:end="29:72">"Channels expressions list is empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="72:0"><if pos:start="37:5" pos:end="72:0">if <condition pos:start="37:8" pos:end="37:44">(<expr pos:start="37:9" pos:end="37:43"><operator pos:start="37:9" pos:end="37:9">!</operator><call pos:start="37:10" pos:end="37:43"><name pos:start="37:10" pos:end="37:15">strcmp</name><argument_list pos:start="37:16" pos:end="37:43">(<argument pos:start="37:17" pos:end="37:33"><expr pos:start="37:17" pos:end="37:33"><name pos:start="37:17" pos:end="37:33"><name pos:start="37:17" pos:end="37:19">ctx</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:27">filter</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:33">name</name></name></expr></argument>, <argument pos:start="37:36" pos:end="37:42"><expr pos:start="37:36" pos:end="37:42"><literal type="string" pos:start="37:36" pos:end="37:42">"aeval"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:46" pos:end="72:0">{<block_content pos:start="39:9" pos:end="41:40">

        <expr_stmt pos:start="39:9" pos:end="39:28"><expr pos:start="39:9" pos:end="39:27"><name pos:start="39:9" pos:end="39:13">func1</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:27">aeval_func1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:19">func1_names</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <name pos:start="41:23" pos:end="41:39">aeval_func1_names</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:define pos:start="47:1" pos:end="71:15">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:22">ADD_EXPRESSION</name><parameter_list pos:start="47:23" pos:end="47:29">(<parameter pos:start="47:24" pos:end="47:28"><type pos:start="47:24" pos:end="47:28"><name pos:start="47:24" pos:end="47:28">expr_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="47:31" pos:end="71:15">do {                                      \

        if (!av_dynarray2_add((void **)&amp;eval-&gt;expr, &amp;eval-&gt;nb_channels, \

                              sizeof(*eval-&gt;expr), NULL)) {             \

            ret = AVERROR(ENOMEM);                                      \

            goto end;                                                   \

        }                                                               \

        eval-&gt;expr[eval-&gt;nb_channels-1] = NULL;                         \

        ret = av_expr_parse(&amp;eval-&gt;expr[eval-&gt;nb_channels - 1], expr_,  \

                            var_names, func1_names, func1,              \

                            NULL, NULL, 0, ctx);                        \

        if (ret &lt; 0)                                                    \

            goto end;                                                   \

    } while (0)</cpp:value></cpp:define>



    <comment type="block" pos:start="75:5" pos:end="75:27">/* reset expressions */</comment>

    <for pos:start="77:5" pos:end="83:5">for <control pos:start="77:9" pos:end="77:43">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:38"><expr pos:start="77:17" pos:end="77:37"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <name pos:start="77:21" pos:end="77:37"><name pos:start="77:21" pos:end="77:24">eval</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:37">nb_channels</name></name></expr>;</condition> <incr pos:start="77:40" pos:end="77:42"><expr pos:start="77:40" pos:end="77:42"><name pos:start="77:40" pos:end="77:40">i</name><operator pos:start="77:41" pos:end="77:42">++</operator></expr></incr>)</control> <block pos:start="77:45" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:29">

        <expr_stmt pos:start="79:9" pos:end="79:36"><expr pos:start="79:9" pos:end="79:35"><call pos:start="79:9" pos:end="79:35"><name pos:start="79:9" pos:end="79:20">av_expr_free</name><argument_list pos:start="79:21" pos:end="79:35">(<argument pos:start="79:22" pos:end="79:34"><expr pos:start="79:22" pos:end="79:34"><name pos:start="79:22" pos:end="79:34"><name pos:start="79:22" pos:end="79:25">eval</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:31">expr</name><index pos:start="79:32" pos:end="79:34">[<expr pos:start="79:33" pos:end="79:33"><name pos:start="79:33" pos:end="79:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:29"><expr pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:12">eval</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:18">expr</name><index pos:start="81:19" pos:end="81:21">[<expr pos:start="81:20" pos:end="81:20"><name pos:start="81:20" pos:end="81:20">i</name></expr>]</index></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:28">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><call pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:12">av_freep</name><argument_list pos:start="85:13" pos:end="85:25">(<argument pos:start="85:14" pos:end="85:24"><expr pos:start="85:14" pos:end="85:24"><operator pos:start="85:14" pos:end="85:14">&amp;</operator><name pos:start="85:15" pos:end="85:24"><name pos:start="85:15" pos:end="85:18">eval</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:24">expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:26"><expr pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:21"><name pos:start="87:5" pos:end="87:8">eval</name><operator pos:start="87:9" pos:end="87:10">-&gt;</operator><name pos:start="87:11" pos:end="87:21">nb_channels</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <literal type="number" pos:start="87:25" pos:end="87:25">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:16"><expr pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:7">buf</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <name pos:start="91:11" pos:end="91:15">args1</name></expr>;</expr_stmt>

    <while pos:start="93:5" pos:end="99:5">while <condition pos:start="93:11" pos:end="93:44">(<expr pos:start="93:12" pos:end="93:43"><name pos:start="93:12" pos:end="93:15">expr</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:43"><name pos:start="93:19" pos:end="93:27">av_strtok</name><argument_list pos:start="93:28" pos:end="93:43">(<argument pos:start="93:29" pos:end="93:31"><expr pos:start="93:29" pos:end="93:31"><name pos:start="93:29" pos:end="93:31">buf</name></expr></argument>, <argument pos:start="93:34" pos:end="93:36"><expr pos:start="93:34" pos:end="93:36"><literal type="string" pos:start="93:34" pos:end="93:36">"|"</literal></expr></argument>, <argument pos:start="93:39" pos:end="93:42"><expr pos:start="93:39" pos:end="93:42"><operator pos:start="93:39" pos:end="93:39">&amp;</operator><name pos:start="93:40" pos:end="93:42">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:46" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:25">

        <expr_stmt pos:start="95:9" pos:end="95:29"><expr pos:start="95:9" pos:end="95:28"><call pos:start="95:9" pos:end="95:28"><name pos:start="95:9" pos:end="95:22">ADD_EXPRESSION</name><argument_list pos:start="95:23" pos:end="95:28">(<argument pos:start="95:24" pos:end="95:27"><expr pos:start="95:24" pos:end="95:27"><name pos:start="95:24" pos:end="95:27">expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:25"><expr pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:17">last_expr</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:24">expr</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="103:5" pos:end="107:38"><if pos:start="103:5" pos:end="107:38">if <condition pos:start="103:8" pos:end="103:49">(<expr pos:start="103:9" pos:end="103:48"><name pos:start="103:9" pos:end="103:28">expected_nb_channels</name> <operator pos:start="103:30" pos:end="103:30">&gt;</operator> <name pos:start="103:32" pos:end="103:48"><name pos:start="103:32" pos:end="103:35">eval</name><operator pos:start="103:36" pos:end="103:37">-&gt;</operator><name pos:start="103:38" pos:end="103:48">nb_channels</name></name></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="107:38"><block_content pos:start="105:9" pos:end="107:38">

        <for pos:start="105:9" pos:end="107:38">for <control pos:start="105:13" pos:end="105:66">(<init pos:start="105:14" pos:end="105:35"><expr pos:start="105:14" pos:end="105:34"><name pos:start="105:14" pos:end="105:14">i</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <name pos:start="105:18" pos:end="105:34"><name pos:start="105:18" pos:end="105:21">eval</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:34">nb_channels</name></name></expr>;</init> <condition pos:start="105:37" pos:end="105:61"><expr pos:start="105:37" pos:end="105:60"><name pos:start="105:37" pos:end="105:37">i</name> <operator pos:start="105:39" pos:end="105:39">&lt;</operator> <name pos:start="105:41" pos:end="105:60">expected_nb_channels</name></expr>;</condition> <incr pos:start="105:63" pos:end="105:65"><expr pos:start="105:63" pos:end="105:65"><name pos:start="105:63" pos:end="105:63">i</name><operator pos:start="105:64" pos:end="105:65">++</operator></expr></incr>)</control><block type="pseudo" pos:start="107:13" pos:end="107:38"><block_content pos:start="107:13" pos:end="107:38">

            <expr_stmt pos:start="107:13" pos:end="107:38"><expr pos:start="107:13" pos:end="107:37"><call pos:start="107:13" pos:end="107:37"><name pos:start="107:13" pos:end="107:26">ADD_EXPRESSION</name><argument_list pos:start="107:27" pos:end="107:37">(<argument pos:start="107:28" pos:end="107:36"><expr pos:start="107:28" pos:end="107:36"><name pos:start="107:28" pos:end="107:36">last_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="125:5"><if pos:start="111:5" pos:end="125:5">if <condition pos:start="111:8" pos:end="111:78">(<expr pos:start="111:9" pos:end="111:77"><name pos:start="111:9" pos:end="111:28">expected_nb_channels</name> <operator pos:start="111:30" pos:end="111:30">&gt;</operator> <literal type="number" pos:start="111:32" pos:end="111:32">0</literal> <operator pos:start="111:34" pos:end="111:35">&amp;&amp;</operator> <name pos:start="111:37" pos:end="111:53"><name pos:start="111:37" pos:end="111:40">eval</name><operator pos:start="111:41" pos:end="111:42">-&gt;</operator><name pos:start="111:43" pos:end="111:53">nb_channels</name></name> <operator pos:start="111:55" pos:end="111:56">!=</operator> <name pos:start="111:58" pos:end="111:77">expected_nb_channels</name></expr>)</condition> <block pos:start="111:80" pos:end="125:5">{<block_content pos:start="113:9" pos:end="123:17">

        <expr_stmt pos:start="113:9" pos:end="119:56"><expr pos:start="113:9" pos:end="119:55"><call pos:start="113:9" pos:end="119:55"><name pos:start="113:9" pos:end="113:14">av_log</name><argument_list pos:start="113:15" pos:end="119:55">(<argument pos:start="113:16" pos:end="113:18"><expr pos:start="113:16" pos:end="113:18"><name pos:start="113:16" pos:end="113:18">ctx</name></expr></argument>, <argument pos:start="113:21" pos:end="113:32"><expr pos:start="113:21" pos:end="113:32"><name pos:start="113:21" pos:end="113:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="115:16" pos:end="117:99"><expr pos:start="115:16" pos:end="117:99"><literal type="string" pos:start="115:16" pos:end="115:83">"Mismatch between the specified number of channel expressions '%d' "</literal>

               <literal type="string" pos:start="117:16" pos:end="117:99">"and the number of expected output channels '%d' for the specified channel layout\n"</literal></expr></argument>,

               <argument pos:start="119:16" pos:end="119:32"><expr pos:start="119:16" pos:end="119:32"><name pos:start="119:16" pos:end="119:32"><name pos:start="119:16" pos:end="119:19">eval</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:32">nb_channels</name></name></expr></argument>, <argument pos:start="119:35" pos:end="119:54"><expr pos:start="119:35" pos:end="119:54"><name pos:start="119:35" pos:end="119:54">expected_nb_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:30"><expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <call pos:start="121:15" pos:end="121:29"><name pos:start="121:15" pos:end="121:21">AVERROR</name><argument_list pos:start="121:22" pos:end="121:29">(<argument pos:start="121:23" pos:end="121:28"><expr pos:start="121:23" pos:end="121:28"><name pos:start="121:23" pos:end="121:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="123:9" pos:end="123:17">goto <name pos:start="123:14" pos:end="123:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="129:1" pos:end="129:4"><name pos:start="129:1" pos:end="129:3">end</name>:</label>

    <expr_stmt pos:start="131:5" pos:end="131:19"><expr pos:start="131:5" pos:end="131:18"><call pos:start="131:5" pos:end="131:18"><name pos:start="131:5" pos:end="131:11">av_free</name><argument_list pos:start="131:12" pos:end="131:18">(<argument pos:start="131:13" pos:end="131:17"><expr pos:start="131:13" pos:end="131:17"><name pos:start="131:13" pos:end="131:17">args1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="133:5" pos:end="133:15">return <expr pos:start="133:12" pos:end="133:14"><name pos:start="133:12" pos:end="133:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
