<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5135.c" pos:tabs="8"><function pos:start="1:1" pos:end="259:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">ff_ps_read_data</name><parameter_list pos:start="1:20" pos:end="1:96">(<parameter pos:start="1:21" pos:end="1:41"><decl pos:start="1:21" pos:end="1:41"><type pos:start="1:21" pos:end="1:41"><name pos:start="1:21" pos:end="1:34">AVCodecContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:41">avctx</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:65"><decl pos:start="1:44" pos:end="1:65"><type pos:start="1:44" pos:end="1:65"><name pos:start="1:44" pos:end="1:56">GetBitContext</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:65">gb_host</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:80"><decl pos:start="1:68" pos:end="1:80"><type pos:start="1:68" pos:end="1:80"><name pos:start="1:68" pos:end="1:76">PSContext</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:80">ps</name></decl></parameter>, <parameter pos:start="1:83" pos:end="1:95"><decl pos:start="1:83" pos:end="1:95"><type pos:start="1:83" pos:end="1:95"><name pos:start="1:83" pos:end="1:85">int</name></type> <name pos:start="1:87" pos:end="1:95">bits_left</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="259:1">{<block_content pos:start="5:5" pos:end="257:21">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:23">bit_count_start</name> <init pos:start="7:25" pos:end="7:49">= <expr pos:start="7:27" pos:end="7:49"><call pos:start="7:27" pos:end="7:49"><name pos:start="7:27" pos:end="7:40">get_bits_count</name><argument_list pos:start="7:41" pos:end="7:49">(<argument pos:start="7:42" pos:end="7:48"><expr pos:start="7:42" pos:end="7:48"><name pos:start="7:42" pos:end="7:48">gb_host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">bits_consumed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:21">gbc</name> <init pos:start="13:23" pos:end="13:32">= <expr pos:start="13:25" pos:end="13:32"><operator pos:start="13:25" pos:end="13:25">*</operator><name pos:start="13:26" pos:end="13:32">gb_host</name></expr></init></decl>, <decl pos:start="13:35" pos:end="13:44"><type ref="prev" pos:start="13:5" pos:end="13:17"><modifier pos:start="13:35" pos:end="13:35">*</modifier></type><name pos:start="13:36" pos:end="13:37">gb</name> <init pos:start="13:39" pos:end="13:44">= <expr pos:start="13:41" pos:end="13:44"><operator pos:start="13:41" pos:end="13:41">&amp;</operator><name pos:start="13:42" pos:end="13:44">gbc</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:27"><expr pos:start="17:5" pos:end="17:26"><name pos:start="17:5" pos:end="17:10">header</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:26"><name pos:start="17:14" pos:end="17:22">get_bits1</name><argument_list pos:start="17:23" pos:end="17:26">(<argument pos:start="17:24" pos:end="17:25"><expr pos:start="17:24" pos:end="17:25"><name pos:start="17:24" pos:end="17:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="67:5"><if pos:start="19:5" pos:end="67:5">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:14">header</name></expr>)</condition> <block pos:start="19:17" pos:end="67:5">{<block_content pos:start="21:9" pos:end="65:39">     <comment type="line" pos:start="19:23" pos:end="19:40">//enable_ps_header</comment>

        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:10">ps</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:22">enable_iid</name></name> <operator pos:start="21:24" pos:end="21:24">=</operator> <call pos:start="21:26" pos:end="21:38"><name pos:start="21:26" pos:end="21:34">get_bits1</name><argument_list pos:start="21:35" pos:end="21:38">(<argument pos:start="21:36" pos:end="21:37"><expr pos:start="21:36" pos:end="21:37"><name pos:start="21:36" pos:end="21:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="43:9"><if pos:start="23:9" pos:end="43:9">if <condition pos:start="23:12" pos:end="23:27">(<expr pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:14">ps</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:26">enable_iid</name></name></expr>)</condition> <block pos:start="23:29" pos:end="43:9">{<block_content pos:start="25:13" pos:end="41:60">

            <decl_stmt pos:start="25:13" pos:end="25:43"><decl pos:start="25:13" pos:end="25:42"><type pos:start="25:13" pos:end="25:15"><name pos:start="25:13" pos:end="25:15">int</name></type> <name pos:start="25:17" pos:end="25:24">iid_mode</name> <init pos:start="25:26" pos:end="25:42">= <expr pos:start="25:28" pos:end="25:42"><call pos:start="25:28" pos:end="25:42"><name pos:start="25:28" pos:end="25:35">get_bits</name><argument_list pos:start="25:36" pos:end="25:42">(<argument pos:start="25:37" pos:end="25:38"><expr pos:start="25:37" pos:end="25:38"><name pos:start="25:37" pos:end="25:38">gb</name></expr></argument>, <argument pos:start="25:41" pos:end="25:41"><expr pos:start="25:41" pos:end="25:41"><literal type="number" pos:start="25:41" pos:end="25:41">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="27:13" pos:end="35:13"><if pos:start="27:13" pos:end="35:13">if <condition pos:start="27:16" pos:end="27:29">(<expr pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:24">iid_mode</name> <operator pos:start="27:26" pos:end="27:26">&gt;</operator> <literal type="number" pos:start="27:28" pos:end="27:28">5</literal></expr>)</condition> <block pos:start="27:31" pos:end="35:13">{<block_content pos:start="29:17" pos:end="33:25">

                <expr_stmt pos:start="29:17" pos:end="31:33"><expr pos:start="29:17" pos:end="31:32"><call pos:start="29:17" pos:end="31:32"><name pos:start="29:17" pos:end="29:22">av_log</name><argument_list pos:start="29:23" pos:end="31:32">(<argument pos:start="29:24" pos:end="29:28"><expr pos:start="29:24" pos:end="29:28"><name pos:start="29:24" pos:end="29:28">avctx</name></expr></argument>, <argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:45" pos:end="29:72"><expr pos:start="29:45" pos:end="29:72"><literal type="string" pos:start="29:45" pos:end="29:72">"iid_mode %d is reserved.\n"</literal></expr></argument>,

                       <argument pos:start="31:24" pos:end="31:31"><expr pos:start="31:24" pos:end="31:31"><name pos:start="31:24" pos:end="31:31">iid_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="33:17" pos:end="33:25">goto <name pos:start="33:22" pos:end="33:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:60"><expr pos:start="37:13" pos:end="37:59"><name pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:14">ps</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:26">nr_iid_par</name></name>    <operator pos:start="37:31" pos:end="37:31">=</operator> <name pos:start="37:33" pos:end="37:59"><name pos:start="37:33" pos:end="37:49">nr_iidicc_par_tab</name><index pos:start="37:50" pos:end="37:59">[<expr pos:start="37:51" pos:end="37:58"><name pos:start="37:51" pos:end="37:58">iid_mode</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:45"><expr pos:start="39:13" pos:end="39:44"><name pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:14">ps</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:25">iid_quant</name></name>     <operator pos:start="39:31" pos:end="39:31">=</operator> <name pos:start="39:33" pos:end="39:40">iid_mode</name> <operator pos:start="39:42" pos:end="39:42">&gt;</operator> <literal type="number" pos:start="39:44" pos:end="39:44">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:60"><expr pos:start="41:13" pos:end="41:59"><name pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:14">ps</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:29">nr_ipdopd_par</name></name> <operator pos:start="41:31" pos:end="41:31">=</operator> <name pos:start="41:33" pos:end="41:59"><name pos:start="41:33" pos:end="41:49">nr_iidopd_par_tab</name><index pos:start="41:50" pos:end="41:59">[<expr pos:start="41:51" pos:end="41:58"><name pos:start="41:51" pos:end="41:58">iid_mode</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:10">ps</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:22">enable_icc</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <call pos:start="45:26" pos:end="45:38"><name pos:start="45:26" pos:end="45:34">get_bits1</name><argument_list pos:start="45:35" pos:end="45:38">(<argument pos:start="45:36" pos:end="45:37"><expr pos:start="45:36" pos:end="45:37"><name pos:start="45:36" pos:end="45:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="63:9"><if pos:start="47:9" pos:end="63:9">if <condition pos:start="47:12" pos:end="47:27">(<expr pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:14">ps</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:26">enable_icc</name></name></expr>)</condition> <block pos:start="47:29" pos:end="63:9">{<block_content pos:start="49:13" pos:end="61:61">

            <expr_stmt pos:start="49:13" pos:end="49:43"><expr pos:start="49:13" pos:end="49:42"><name pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:14">ps</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:24">icc_mode</name></name> <operator pos:start="49:26" pos:end="49:26">=</operator> <call pos:start="49:28" pos:end="49:42"><name pos:start="49:28" pos:end="49:35">get_bits</name><argument_list pos:start="49:36" pos:end="49:42">(<argument pos:start="49:37" pos:end="49:38"><expr pos:start="49:37" pos:end="49:38"><name pos:start="49:37" pos:end="49:38">gb</name></expr></argument>, <argument pos:start="49:41" pos:end="49:41"><expr pos:start="49:41" pos:end="49:41"><literal type="number" pos:start="49:41" pos:end="49:41">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="59:13"><if pos:start="51:13" pos:end="59:13">if <condition pos:start="51:16" pos:end="51:33">(<expr pos:start="51:17" pos:end="51:32"><name pos:start="51:17" pos:end="51:28"><name pos:start="51:17" pos:end="51:18">ps</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:28">icc_mode</name></name> <operator pos:start="51:30" pos:end="51:30">&gt;</operator> <literal type="number" pos:start="51:32" pos:end="51:32">5</literal></expr>)</condition> <block pos:start="51:35" pos:end="59:13">{<block_content pos:start="53:17" pos:end="57:25">

                <expr_stmt pos:start="53:17" pos:end="55:37"><expr pos:start="53:17" pos:end="55:36"><call pos:start="53:17" pos:end="55:36"><name pos:start="53:17" pos:end="53:22">av_log</name><argument_list pos:start="53:23" pos:end="55:36">(<argument pos:start="53:24" pos:end="53:28"><expr pos:start="53:24" pos:end="53:28"><name pos:start="53:24" pos:end="53:28">avctx</name></expr></argument>, <argument pos:start="53:31" pos:end="53:42"><expr pos:start="53:31" pos:end="53:42"><name pos:start="53:31" pos:end="53:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:45" pos:end="53:72"><expr pos:start="53:45" pos:end="53:72"><literal type="string" pos:start="53:45" pos:end="53:72">"icc_mode %d is reserved.\n"</literal></expr></argument>,

                       <argument pos:start="55:24" pos:end="55:35"><expr pos:start="55:24" pos:end="55:35"><name pos:start="55:24" pos:end="55:35"><name pos:start="55:24" pos:end="55:25">ps</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:35">icc_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="57:17" pos:end="57:25">goto <name pos:start="57:22" pos:end="57:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:61"><expr pos:start="61:13" pos:end="61:60"><name pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:14">ps</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:26">nr_icc_par</name></name> <operator pos:start="61:28" pos:end="61:28">=</operator> <name pos:start="61:30" pos:end="61:60"><name pos:start="61:30" pos:end="61:46">nr_iidicc_par_tab</name><index pos:start="61:47" pos:end="61:60">[<expr pos:start="61:48" pos:end="61:59"><name pos:start="61:48" pos:end="61:59"><name pos:start="61:48" pos:end="61:49">ps</name><operator pos:start="61:50" pos:end="61:51">-&gt;</operator><name pos:start="61:52" pos:end="61:59">icc_mode</name></name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:39"><expr pos:start="65:9" pos:end="65:38"><name pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:10">ps</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:22">enable_ext</name></name> <operator pos:start="65:24" pos:end="65:24">=</operator> <call pos:start="65:26" pos:end="65:38"><name pos:start="65:26" pos:end="65:34">get_bits1</name><argument_list pos:start="65:35" pos:end="65:38">(<argument pos:start="65:36" pos:end="65:37"><expr pos:start="65:36" pos:end="65:37"><name pos:start="65:36" pos:end="65:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:36"><expr pos:start="71:5" pos:end="71:35"><name pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:6">ps</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:19">frame_class</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:35"><name pos:start="71:23" pos:end="71:31">get_bits1</name><argument_list pos:start="71:32" pos:end="71:35">(<argument pos:start="71:33" pos:end="71:34"><expr pos:start="71:33" pos:end="71:34"><name pos:start="71:33" pos:end="71:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:34"><expr pos:start="73:5" pos:end="73:33"><name pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:6">ps</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:19">num_env_old</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:33"><name pos:start="73:23" pos:end="73:24">ps</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:33">num_env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:68"><expr pos:start="75:5" pos:end="75:67"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:6">ps</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:15">num_env</name></name>     <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:67"><name pos:start="75:23" pos:end="75:33">num_env_tab</name><index pos:start="75:34" pos:end="75:50">[<expr pos:start="75:35" pos:end="75:49"><name pos:start="75:35" pos:end="75:49"><name pos:start="75:35" pos:end="75:36">ps</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:49">frame_class</name></name></expr>]</index><index pos:start="75:51" pos:end="75:67">[<expr pos:start="75:52" pos:end="75:66"><call pos:start="75:52" pos:end="75:66"><name pos:start="75:52" pos:end="75:59">get_bits</name><argument_list pos:start="75:60" pos:end="75:66">(<argument pos:start="75:61" pos:end="75:62"><expr pos:start="75:61" pos:end="75:62"><name pos:start="75:61" pos:end="75:62">gb</name></expr></argument>, <argument pos:start="75:65" pos:end="75:65"><expr pos:start="75:65" pos:end="75:65"><literal type="number" pos:start="75:65" pos:end="75:65">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:32"><expr pos:start="79:5" pos:end="79:31"><name pos:start="79:5" pos:end="79:26"><name pos:start="79:5" pos:end="79:6">ps</name><operator pos:start="79:7" pos:end="79:8">-&gt;</operator><name pos:start="79:9" pos:end="79:23">border_position</name><index pos:start="79:24" pos:end="79:26">[<expr pos:start="79:25" pos:end="79:25"><literal type="number" pos:start="79:25" pos:end="79:25">0</literal></expr>]</index></name> <operator pos:start="79:28" pos:end="79:28">=</operator> <operator pos:start="79:30" pos:end="79:30">-</operator><literal type="number" pos:start="79:31" pos:end="79:31">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="91:87"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:24">(<expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:10">ps</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:23">frame_class</name></name></expr>)</condition> <block pos:start="81:26" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:53">

        <for pos:start="83:9" pos:end="85:53">for <control pos:start="83:13" pos:end="83:42">(<init pos:start="83:14" pos:end="83:19"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">e</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">1</literal></expr>;</init> <condition pos:start="83:21" pos:end="83:37"><expr pos:start="83:21" pos:end="83:36"><name pos:start="83:21" pos:end="83:21">e</name> <operator pos:start="83:23" pos:end="83:24">&lt;=</operator> <name pos:start="83:26" pos:end="83:36"><name pos:start="83:26" pos:end="83:27">ps</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:36">num_env</name></name></expr>;</condition> <incr pos:start="83:39" pos:end="83:41"><expr pos:start="83:39" pos:end="83:41"><name pos:start="83:39" pos:end="83:39">e</name><operator pos:start="83:40" pos:end="83:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:13" pos:end="85:53"><block_content pos:start="85:13" pos:end="85:53">

            <expr_stmt pos:start="85:13" pos:end="85:53"><expr pos:start="85:13" pos:end="85:52"><name pos:start="85:13" pos:end="85:34"><name pos:start="85:13" pos:end="85:14">ps</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:31">border_position</name><index pos:start="85:32" pos:end="85:34">[<expr pos:start="85:33" pos:end="85:33"><name pos:start="85:33" pos:end="85:33">e</name></expr>]</index></name> <operator pos:start="85:36" pos:end="85:36">=</operator> <call pos:start="85:38" pos:end="85:52"><name pos:start="85:38" pos:end="85:45">get_bits</name><argument_list pos:start="85:46" pos:end="85:52">(<argument pos:start="85:47" pos:end="85:48"><expr pos:start="85:47" pos:end="85:48"><name pos:start="85:47" pos:end="85:48">gb</name></expr></argument>, <argument pos:start="85:51" pos:end="85:51"><expr pos:start="85:51" pos:end="85:51"><literal type="number" pos:start="85:51" pos:end="85:51">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="91:87">else<block type="pseudo" pos:start="89:9" pos:end="91:87"><block_content pos:start="89:9" pos:end="91:87">

        <for pos:start="89:9" pos:end="91:87">for <control pos:start="89:13" pos:end="89:42">(<init pos:start="89:14" pos:end="89:19"><expr pos:start="89:14" pos:end="89:18"><name pos:start="89:14" pos:end="89:14">e</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">1</literal></expr>;</init> <condition pos:start="89:21" pos:end="89:37"><expr pos:start="89:21" pos:end="89:36"><name pos:start="89:21" pos:end="89:21">e</name> <operator pos:start="89:23" pos:end="89:24">&lt;=</operator> <name pos:start="89:26" pos:end="89:36"><name pos:start="89:26" pos:end="89:27">ps</name><operator pos:start="89:28" pos:end="89:29">-&gt;</operator><name pos:start="89:30" pos:end="89:36">num_env</name></name></expr>;</condition> <incr pos:start="89:39" pos:end="89:41"><expr pos:start="89:39" pos:end="89:41"><name pos:start="89:39" pos:end="89:39">e</name><operator pos:start="89:40" pos:end="89:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="91:13" pos:end="91:87"><block_content pos:start="91:13" pos:end="91:87">

            <expr_stmt pos:start="91:13" pos:end="91:87"><expr pos:start="91:13" pos:end="91:86"><name pos:start="91:13" pos:end="91:34"><name pos:start="91:13" pos:end="91:14">ps</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:31">border_position</name><index pos:start="91:32" pos:end="91:34">[<expr pos:start="91:33" pos:end="91:33"><name pos:start="91:33" pos:end="91:33">e</name></expr>]</index></name> <operator pos:start="91:36" pos:end="91:36">=</operator> <operator pos:start="91:38" pos:end="91:38">(</operator><name pos:start="91:39" pos:end="91:39">e</name> <operator pos:start="91:41" pos:end="91:41">*</operator> <name pos:start="91:43" pos:end="91:53">numQMFSlots</name> <operator pos:start="91:55" pos:end="91:56">&gt;&gt;</operator> <name pos:start="91:58" pos:end="91:81"><name pos:start="91:58" pos:end="91:68">ff_log2_tab</name><index pos:start="91:69" pos:end="91:81">[<expr pos:start="91:70" pos:end="91:80"><name pos:start="91:70" pos:end="91:80"><name pos:start="91:70" pos:end="91:71">ps</name><operator pos:start="91:72" pos:end="91:73">-&gt;</operator><name pos:start="91:74" pos:end="91:80">num_env</name></name></expr>]</index></name><operator pos:start="91:82" pos:end="91:82">)</operator> <operator pos:start="91:84" pos:end="91:84">-</operator> <literal type="number" pos:start="91:86" pos:end="91:86">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>



    <if_stmt pos:start="95:5" pos:end="159:5"><if pos:start="95:5" pos:end="107:5">if <condition pos:start="95:8" pos:end="95:23">(<expr pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:10">ps</name><operator pos:start="95:11" pos:end="95:12">-&gt;</operator><name pos:start="95:13" pos:end="95:22">enable_iid</name></name></expr>)</condition> <block pos:start="95:25" pos:end="107:5">{<block_content pos:start="97:9" pos:end="105:9">

        <for pos:start="97:9" pos:end="105:9">for <control pos:start="97:13" pos:end="97:41">(<init pos:start="97:14" pos:end="97:19"><expr pos:start="97:14" pos:end="97:18"><name pos:start="97:14" pos:end="97:14">e</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr>;</init> <condition pos:start="97:21" pos:end="97:36"><expr pos:start="97:21" pos:end="97:35"><name pos:start="97:21" pos:end="97:21">e</name> <operator pos:start="97:23" pos:end="97:23">&lt;</operator> <name pos:start="97:25" pos:end="97:35"><name pos:start="97:25" pos:end="97:26">ps</name><operator pos:start="97:27" pos:end="97:28">-&gt;</operator><name pos:start="97:29" pos:end="97:35">num_env</name></name></expr>;</condition> <incr pos:start="97:38" pos:end="97:40"><expr pos:start="97:38" pos:end="97:40"><name pos:start="97:38" pos:end="97:38">e</name><operator pos:start="97:39" pos:end="97:40">++</operator></expr></incr>)</control> <block pos:start="97:43" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:25">

            <decl_stmt pos:start="99:13" pos:end="99:35"><decl pos:start="99:13" pos:end="99:34"><type pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:15">int</name></type> <name pos:start="99:17" pos:end="99:18">dt</name> <init pos:start="99:20" pos:end="99:34">= <expr pos:start="99:22" pos:end="99:34"><call pos:start="99:22" pos:end="99:34"><name pos:start="99:22" pos:end="99:30">get_bits1</name><argument_list pos:start="99:31" pos:end="99:34">(<argument pos:start="99:32" pos:end="99:33"><expr pos:start="99:32" pos:end="99:33"><name pos:start="99:32" pos:end="99:33">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="101:13" pos:end="103:25"><if pos:start="101:13" pos:end="103:25">if <condition pos:start="101:16" pos:end="101:95">(<expr pos:start="101:17" pos:end="101:94"><call pos:start="101:17" pos:end="101:94"><name pos:start="101:17" pos:end="101:29">read_iid_data</name><argument_list pos:start="101:30" pos:end="101:94">(<argument pos:start="101:31" pos:end="101:35"><expr pos:start="101:31" pos:end="101:35"><name pos:start="101:31" pos:end="101:35">avctx</name></expr></argument>, <argument pos:start="101:38" pos:end="101:39"><expr pos:start="101:38" pos:end="101:39"><name pos:start="101:38" pos:end="101:39">gb</name></expr></argument>, <argument pos:start="101:42" pos:end="101:43"><expr pos:start="101:42" pos:end="101:43"><name pos:start="101:42" pos:end="101:43">ps</name></expr></argument>, <argument pos:start="101:46" pos:end="101:56"><expr pos:start="101:46" pos:end="101:56"><name pos:start="101:46" pos:end="101:56"><name pos:start="101:46" pos:end="101:47">ps</name><operator pos:start="101:48" pos:end="101:49">-&gt;</operator><name pos:start="101:50" pos:end="101:56">iid_par</name></name></expr></argument>, <argument pos:start="101:59" pos:end="101:86"><expr pos:start="101:59" pos:end="101:86"><name pos:start="101:59" pos:end="101:86"><name pos:start="101:59" pos:end="101:66">huff_iid</name><index pos:start="101:67" pos:end="101:86">[<expr pos:start="101:68" pos:end="101:85"><literal type="number" pos:start="101:68" pos:end="101:68">2</literal><operator pos:start="101:69" pos:end="101:69">*</operator><name pos:start="101:70" pos:end="101:71">dt</name><operator pos:start="101:72" pos:end="101:72">+</operator><name pos:start="101:73" pos:end="101:85"><name pos:start="101:73" pos:end="101:74">ps</name><operator pos:start="101:75" pos:end="101:76">-&gt;</operator><name pos:start="101:77" pos:end="101:85">iid_quant</name></name></expr>]</index></name></expr></argument>, <argument pos:start="101:89" pos:end="101:89"><expr pos:start="101:89" pos:end="101:89"><name pos:start="101:89" pos:end="101:89">e</name></expr></argument>, <argument pos:start="101:92" pos:end="101:93"><expr pos:start="101:92" pos:end="101:93"><name pos:start="101:92" pos:end="101:93">dt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="103:17" pos:end="103:25"><block_content pos:start="103:17" pos:end="103:25">

                <goto pos:start="103:17" pos:end="103:25">goto <name pos:start="103:22" pos:end="103:24">err</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="107:7" pos:end="122:9">else




    if <condition pos:start="112:8" pos:end="112:23">(<expr pos:start="112:9" pos:end="112:22"><name pos:start="112:9" pos:end="112:22"><name pos:start="112:9" pos:end="112:10">ps</name><operator pos:start="112:11" pos:end="112:12">-&gt;</operator><name pos:start="112:13" pos:end="112:22">enable_icc</name></name></expr>)</condition><block type="pseudo" pos:start="114:9" pos:end="122:9"><block_content pos:start="114:9" pos:end="122:9">

        <for pos:start="114:9" pos:end="122:9">for <control pos:start="114:13" pos:end="114:41">(<init pos:start="114:14" pos:end="114:19"><expr pos:start="114:14" pos:end="114:18"><name pos:start="114:14" pos:end="114:14">e</name> <operator pos:start="114:16" pos:end="114:16">=</operator> <literal type="number" pos:start="114:18" pos:end="114:18">0</literal></expr>;</init> <condition pos:start="114:21" pos:end="114:36"><expr pos:start="114:21" pos:end="114:35"><name pos:start="114:21" pos:end="114:21">e</name> <operator pos:start="114:23" pos:end="114:23">&lt;</operator> <name pos:start="114:25" pos:end="114:35"><name pos:start="114:25" pos:end="114:26">ps</name><operator pos:start="114:27" pos:end="114:28">-&gt;</operator><name pos:start="114:29" pos:end="114:35">num_env</name></name></expr>;</condition> <incr pos:start="114:38" pos:end="114:40"><expr pos:start="114:38" pos:end="114:40"><name pos:start="114:38" pos:end="114:38">e</name><operator pos:start="114:39" pos:end="114:40">++</operator></expr></incr>)</control> <block pos:start="114:43" pos:end="122:9">{<block_content pos:start="116:13" pos:end="120:25">

            <decl_stmt pos:start="116:13" pos:end="116:35"><decl pos:start="116:13" pos:end="116:34"><type pos:start="116:13" pos:end="116:15"><name pos:start="116:13" pos:end="116:15">int</name></type> <name pos:start="116:17" pos:end="116:18">dt</name> <init pos:start="116:20" pos:end="116:34">= <expr pos:start="116:22" pos:end="116:34"><call pos:start="116:22" pos:end="116:34"><name pos:start="116:22" pos:end="116:30">get_bits1</name><argument_list pos:start="116:31" pos:end="116:34">(<argument pos:start="116:32" pos:end="116:33"><expr pos:start="116:32" pos:end="116:33"><name pos:start="116:32" pos:end="116:33">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="118:13" pos:end="120:25"><if pos:start="118:13" pos:end="120:25">if <condition pos:start="118:16" pos:end="118:97">(<expr pos:start="118:17" pos:end="118:96"><call pos:start="118:17" pos:end="118:96"><name pos:start="118:17" pos:end="118:29">read_icc_data</name><argument_list pos:start="118:30" pos:end="118:96">(<argument pos:start="118:31" pos:end="118:35"><expr pos:start="118:31" pos:end="118:35"><name pos:start="118:31" pos:end="118:35">avctx</name></expr></argument>, <argument pos:start="118:38" pos:end="118:39"><expr pos:start="118:38" pos:end="118:39"><name pos:start="118:38" pos:end="118:39">gb</name></expr></argument>, <argument pos:start="118:42" pos:end="118:43"><expr pos:start="118:42" pos:end="118:43"><name pos:start="118:42" pos:end="118:43">ps</name></expr></argument>, <argument pos:start="118:46" pos:end="118:56"><expr pos:start="118:46" pos:end="118:56"><name pos:start="118:46" pos:end="118:56"><name pos:start="118:46" pos:end="118:47">ps</name><operator pos:start="118:48" pos:end="118:49">-&gt;</operator><name pos:start="118:50" pos:end="118:56">icc_par</name></name></expr></argument>, <argument pos:start="118:59" pos:end="118:88"><expr pos:start="118:59" pos:end="118:88"><ternary pos:start="118:59" pos:end="118:88"><condition pos:start="118:59" pos:end="118:62"><expr pos:start="118:59" pos:end="118:60"><name pos:start="118:59" pos:end="118:60">dt</name></expr> ?</condition><then pos:start="118:64" pos:end="118:74"> <expr pos:start="118:64" pos:end="118:74"><name pos:start="118:64" pos:end="118:74">huff_icc_dt</name></expr> </then><else pos:start="118:76" pos:end="118:88">: <expr pos:start="118:78" pos:end="118:88"><name pos:start="118:78" pos:end="118:88">huff_icc_df</name></expr></else></ternary></expr></argument>, <argument pos:start="118:91" pos:end="118:91"><expr pos:start="118:91" pos:end="118:91"><name pos:start="118:91" pos:end="118:91">e</name></expr></argument>, <argument pos:start="118:94" pos:end="118:95"><expr pos:start="118:94" pos:end="118:95"><name pos:start="118:94" pos:end="118:95">dt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="120:17" pos:end="120:25"><block_content pos:start="120:17" pos:end="120:25">

                <goto pos:start="120:17" pos:end="120:25">goto <name pos:start="120:22" pos:end="120:24">err</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for></block_content></block></if>

    <if type="elseif" pos:start="124:5" pos:end="159:5">else




    if <condition pos:start="129:8" pos:end="129:23">(<expr pos:start="129:9" pos:end="129:22"><name pos:start="129:9" pos:end="129:22"><name pos:start="129:9" pos:end="129:10">ps</name><operator pos:start="129:11" pos:end="129:12">-&gt;</operator><name pos:start="129:13" pos:end="129:22">enable_ext</name></name></expr>)</condition> <block pos:start="129:25" pos:end="159:5">{<block_content pos:start="131:9" pos:end="157:27">

        <decl_stmt pos:start="131:9" pos:end="131:34"><decl pos:start="131:9" pos:end="131:33"><type pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">int</name></type> <name pos:start="131:13" pos:end="131:15">cnt</name> <init pos:start="131:17" pos:end="131:33">= <expr pos:start="131:19" pos:end="131:33"><call pos:start="131:19" pos:end="131:33"><name pos:start="131:19" pos:end="131:26">get_bits</name><argument_list pos:start="131:27" pos:end="131:33">(<argument pos:start="131:28" pos:end="131:29"><expr pos:start="131:28" pos:end="131:29"><name pos:start="131:28" pos:end="131:29">gb</name></expr></argument>, <argument pos:start="131:32" pos:end="131:32"><expr pos:start="131:32" pos:end="131:32"><literal type="number" pos:start="131:32" pos:end="131:32">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="133:9" pos:end="137:9"><if pos:start="133:9" pos:end="137:9">if <condition pos:start="133:12" pos:end="133:22">(<expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:15">cnt</name> <operator pos:start="133:17" pos:end="133:18">==</operator> <literal type="number" pos:start="133:20" pos:end="133:21">15</literal></expr>)</condition> <block pos:start="133:24" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:35">

            <expr_stmt pos:start="135:13" pos:end="135:35"><expr pos:start="135:13" pos:end="135:34"><name pos:start="135:13" pos:end="135:15">cnt</name> <operator pos:start="135:17" pos:end="135:18">+=</operator> <call pos:start="135:20" pos:end="135:34"><name pos:start="135:20" pos:end="135:27">get_bits</name><argument_list pos:start="135:28" pos:end="135:34">(<argument pos:start="135:29" pos:end="135:30"><expr pos:start="135:29" pos:end="135:30"><name pos:start="135:29" pos:end="135:30">gb</name></expr></argument>, <argument pos:start="135:33" pos:end="135:33"><expr pos:start="135:33" pos:end="135:33"><literal type="number" pos:start="135:33" pos:end="135:33">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:17"><expr pos:start="139:9" pos:end="139:16"><name pos:start="139:9" pos:end="139:11">cnt</name> <operator pos:start="139:13" pos:end="139:14">*=</operator> <literal type="number" pos:start="139:16" pos:end="139:16">8</literal></expr>;</expr_stmt>

        <while pos:start="141:9" pos:end="147:9">while <condition pos:start="141:15" pos:end="141:23">(<expr pos:start="141:16" pos:end="141:22"><name pos:start="141:16" pos:end="141:18">cnt</name> <operator pos:start="141:20" pos:end="141:20">&gt;</operator> <literal type="number" pos:start="141:22" pos:end="141:22">7</literal></expr>)</condition> <block pos:start="141:25" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:71">

            <decl_stmt pos:start="143:13" pos:end="143:50"><decl pos:start="143:13" pos:end="143:49"><type pos:start="143:13" pos:end="143:15"><name pos:start="143:13" pos:end="143:15">int</name></type> <name pos:start="143:17" pos:end="143:31">ps_extension_id</name> <init pos:start="143:33" pos:end="143:49">= <expr pos:start="143:35" pos:end="143:49"><call pos:start="143:35" pos:end="143:49"><name pos:start="143:35" pos:end="143:42">get_bits</name><argument_list pos:start="143:43" pos:end="143:49">(<argument pos:start="143:44" pos:end="143:45"><expr pos:start="143:44" pos:end="143:45"><name pos:start="143:44" pos:end="143:45">gb</name></expr></argument>, <argument pos:start="143:48" pos:end="143:48"><expr pos:start="143:48" pos:end="143:48"><literal type="number" pos:start="143:48" pos:end="143:48">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:71"><expr pos:start="145:13" pos:end="145:70"><name pos:start="145:13" pos:end="145:15">cnt</name> <operator pos:start="145:17" pos:end="145:18">-=</operator> <literal type="number" pos:start="145:20" pos:end="145:22">2</literal> <operator pos:start="145:22" pos:end="145:22">+</operator> <call pos:start="145:24" pos:end="145:70"><name pos:start="145:24" pos:end="145:45">ps_read_extension_data</name><argument_list pos:start="145:46" pos:end="145:70">(<argument pos:start="145:47" pos:end="145:48"><expr pos:start="145:47" pos:end="145:48"><name pos:start="145:47" pos:end="145:48">gb</name></expr></argument>, <argument pos:start="145:51" pos:end="145:52"><expr pos:start="145:51" pos:end="145:52"><name pos:start="145:51" pos:end="145:52">ps</name></expr></argument>, <argument pos:start="145:55" pos:end="145:69"><expr pos:start="145:55" pos:end="145:69"><name pos:start="145:55" pos:end="145:69">ps_extension_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:20">(<expr pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:15">cnt</name> <operator pos:start="149:17" pos:end="149:17">&lt;</operator> <literal type="number" pos:start="149:19" pos:end="149:19">0</literal></expr>)</condition> <block pos:start="149:22" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:21">

            <expr_stmt pos:start="151:13" pos:end="151:75"><expr pos:start="151:13" pos:end="151:74"><call pos:start="151:13" pos:end="151:74"><name pos:start="151:13" pos:end="151:18">av_log</name><argument_list pos:start="151:19" pos:end="151:74">(<argument pos:start="151:20" pos:end="151:24"><expr pos:start="151:20" pos:end="151:24"><name pos:start="151:20" pos:end="151:24">avctx</name></expr></argument>, <argument pos:start="151:27" pos:end="151:38"><expr pos:start="151:27" pos:end="151:38"><name pos:start="151:27" pos:end="151:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:41" pos:end="151:68"><expr pos:start="151:41" pos:end="151:68"><literal type="string" pos:start="151:41" pos:end="151:68">"ps extension overflow %d\n"</literal></expr></argument>, <argument pos:start="151:71" pos:end="151:73"><expr pos:start="151:71" pos:end="151:73"><name pos:start="151:71" pos:end="151:73">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="153:13" pos:end="153:21">goto <name pos:start="153:18" pos:end="153:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:27"><expr pos:start="157:9" pos:end="157:26"><call pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:17">skip_bits</name><argument_list pos:start="157:18" pos:end="157:26">(<argument pos:start="157:19" pos:end="157:20"><expr pos:start="157:19" pos:end="157:20"><name pos:start="157:19" pos:end="157:20">gb</name></expr></argument>, <argument pos:start="157:23" pos:end="157:25"><expr pos:start="157:23" pos:end="157:25"><name pos:start="157:23" pos:end="157:25">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:38"><expr pos:start="163:5" pos:end="163:37"><name pos:start="163:5" pos:end="163:21"><name pos:start="163:5" pos:end="163:6">ps</name><operator pos:start="163:7" pos:end="163:8">-&gt;</operator><name pos:start="163:9" pos:end="163:21">enable_ipdopd</name></name> <operator pos:start="163:23" pos:end="163:24">&amp;=</operator> <operator pos:start="163:26" pos:end="163:26">!</operator><name pos:start="163:27" pos:end="163:37">PS_BASELINE</name></expr>;</expr_stmt>



    <comment type="line" pos:start="167:5" pos:end="167:22">//Fix up envelopes</comment>

    <if_stmt pos:start="169:5" pos:end="203:5"><if pos:start="169:5" pos:end="203:5">if <condition pos:start="169:8" pos:end="169:75">(<expr pos:start="169:9" pos:end="169:74"><operator pos:start="169:9" pos:end="169:9">!</operator><name pos:start="169:10" pos:end="169:20"><name pos:start="169:10" pos:end="169:11">ps</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:20">num_env</name></name> <operator pos:start="169:22" pos:end="169:23">||</operator> <name pos:start="169:25" pos:end="169:56"><name pos:start="169:25" pos:end="169:26">ps</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:43">border_position</name><index pos:start="169:44" pos:end="169:56">[<expr pos:start="169:45" pos:end="169:55"><name pos:start="169:45" pos:end="169:55"><name pos:start="169:45" pos:end="169:46">ps</name><operator pos:start="169:47" pos:end="169:48">-&gt;</operator><name pos:start="169:49" pos:end="169:55">num_env</name></name></expr>]</index></name> <operator pos:start="169:58" pos:end="169:58">&lt;</operator> <name pos:start="169:60" pos:end="169:70">numQMFSlots</name> <operator pos:start="169:72" pos:end="169:72">-</operator> <literal type="number" pos:start="169:74" pos:end="169:74">1</literal></expr>)</condition> <block pos:start="169:77" pos:end="203:5">{<block_content pos:start="173:9" pos:end="201:59">

        <comment type="line" pos:start="171:9" pos:end="171:32">//Create a fake envelope</comment>

        <decl_stmt pos:start="173:9" pos:end="173:73"><decl pos:start="173:9" pos:end="173:72"><type pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">int</name></type> <name pos:start="173:13" pos:end="173:18">source</name> <init pos:start="173:20" pos:end="173:72">= <expr pos:start="173:22" pos:end="173:72"><ternary pos:start="173:22" pos:end="173:72"><condition pos:start="173:22" pos:end="173:34"><expr pos:start="173:22" pos:end="173:32"><name pos:start="173:22" pos:end="173:32"><name pos:start="173:22" pos:end="173:23">ps</name><operator pos:start="173:24" pos:end="173:25">-&gt;</operator><name pos:start="173:26" pos:end="173:32">num_env</name></name></expr> ?</condition><then pos:start="173:36" pos:end="173:50"> <expr pos:start="173:36" pos:end="173:50"><name pos:start="173:36" pos:end="173:46"><name pos:start="173:36" pos:end="173:37">ps</name><operator pos:start="173:38" pos:end="173:39">-&gt;</operator><name pos:start="173:40" pos:end="173:46">num_env</name></name> <operator pos:start="173:48" pos:end="173:48">-</operator> <literal type="number" pos:start="173:50" pos:end="173:50">1</literal></expr> </then><else pos:start="173:52" pos:end="173:72">: <expr pos:start="173:54" pos:end="173:72"><name pos:start="173:54" pos:end="173:68"><name pos:start="173:54" pos:end="173:55">ps</name><operator pos:start="173:56" pos:end="173:57">-&gt;</operator><name pos:start="173:58" pos:end="173:68">num_env_old</name></name> <operator pos:start="173:70" pos:end="173:70">-</operator> <literal type="number" pos:start="173:72" pos:end="173:72">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="175:9" pos:end="197:9"><if pos:start="175:9" pos:end="197:9">if <condition pos:start="175:12" pos:end="175:49">(<expr pos:start="175:13" pos:end="175:48"><name pos:start="175:13" pos:end="175:18">source</name> <operator pos:start="175:20" pos:end="175:21">&gt;=</operator> <literal type="number" pos:start="175:23" pos:end="175:23">0</literal> <operator pos:start="175:25" pos:end="175:26">&amp;&amp;</operator> <name pos:start="175:28" pos:end="175:33">source</name> <operator pos:start="175:35" pos:end="175:36">!=</operator> <name pos:start="175:38" pos:end="175:48"><name pos:start="175:38" pos:end="175:39">ps</name><operator pos:start="175:40" pos:end="175:41">-&gt;</operator><name pos:start="175:42" pos:end="175:48">num_env</name></name></expr>)</condition> <block pos:start="175:51" pos:end="197:9">{<block_content pos:start="177:13" pos:end="195:13">

            <if_stmt pos:start="177:13" pos:end="181:13"><if pos:start="177:13" pos:end="181:13">if <condition pos:start="177:16" pos:end="177:31">(<expr pos:start="177:17" pos:end="177:30"><name pos:start="177:17" pos:end="177:30"><name pos:start="177:17" pos:end="177:18">ps</name><operator pos:start="177:19" pos:end="177:20">-&gt;</operator><name pos:start="177:21" pos:end="177:30">enable_iid</name></name></expr>)</condition> <block pos:start="177:33" pos:end="181:13">{<block_content pos:start="179:17" pos:end="179:92">

                <expr_stmt pos:start="179:17" pos:end="179:92"><expr pos:start="179:17" pos:end="179:91"><call pos:start="179:17" pos:end="179:91"><name pos:start="179:17" pos:end="179:22">memcpy</name><argument_list pos:start="179:23" pos:end="179:91">(<argument pos:start="179:24" pos:end="179:46"><expr pos:start="179:24" pos:end="179:46"><name pos:start="179:24" pos:end="179:34"><name pos:start="179:24" pos:end="179:25">ps</name><operator pos:start="179:26" pos:end="179:27">-&gt;</operator><name pos:start="179:28" pos:end="179:34">iid_par</name></name><operator pos:start="179:35" pos:end="179:35">+</operator><name pos:start="179:36" pos:end="179:46"><name pos:start="179:36" pos:end="179:37">ps</name><operator pos:start="179:38" pos:end="179:39">-&gt;</operator><name pos:start="179:40" pos:end="179:46">num_env</name></name></expr></argument>, <argument pos:start="179:49" pos:end="179:66"><expr pos:start="179:49" pos:end="179:66"><name pos:start="179:49" pos:end="179:59"><name pos:start="179:49" pos:end="179:50">ps</name><operator pos:start="179:51" pos:end="179:52">-&gt;</operator><name pos:start="179:53" pos:end="179:59">iid_par</name></name><operator pos:start="179:60" pos:end="179:60">+</operator><name pos:start="179:61" pos:end="179:66">source</name></expr></argument>, <argument pos:start="179:69" pos:end="179:90"><expr pos:start="179:69" pos:end="179:90"><sizeof pos:start="179:69" pos:end="179:90">sizeof<argument_list pos:start="179:75" pos:end="179:90">(<argument pos:start="179:76" pos:end="179:89"><expr pos:start="179:76" pos:end="179:89"><name pos:start="179:76" pos:end="179:89"><name pos:start="179:76" pos:end="179:77">ps</name><operator pos:start="179:78" pos:end="179:79">-&gt;</operator><name pos:start="179:80" pos:end="179:86">iid_par</name><index pos:start="179:87" pos:end="179:89">[<expr pos:start="179:88" pos:end="179:88"><literal type="number" pos:start="179:88" pos:end="179:88">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="183:13" pos:end="187:13"><if pos:start="183:13" pos:end="187:13">if <condition pos:start="183:16" pos:end="183:31">(<expr pos:start="183:17" pos:end="183:30"><name pos:start="183:17" pos:end="183:30"><name pos:start="183:17" pos:end="183:18">ps</name><operator pos:start="183:19" pos:end="183:20">-&gt;</operator><name pos:start="183:21" pos:end="183:30">enable_icc</name></name></expr>)</condition> <block pos:start="183:33" pos:end="187:13">{<block_content pos:start="185:17" pos:end="185:92">

                <expr_stmt pos:start="185:17" pos:end="185:92"><expr pos:start="185:17" pos:end="185:91"><call pos:start="185:17" pos:end="185:91"><name pos:start="185:17" pos:end="185:22">memcpy</name><argument_list pos:start="185:23" pos:end="185:91">(<argument pos:start="185:24" pos:end="185:46"><expr pos:start="185:24" pos:end="185:46"><name pos:start="185:24" pos:end="185:34"><name pos:start="185:24" pos:end="185:25">ps</name><operator pos:start="185:26" pos:end="185:27">-&gt;</operator><name pos:start="185:28" pos:end="185:34">icc_par</name></name><operator pos:start="185:35" pos:end="185:35">+</operator><name pos:start="185:36" pos:end="185:46"><name pos:start="185:36" pos:end="185:37">ps</name><operator pos:start="185:38" pos:end="185:39">-&gt;</operator><name pos:start="185:40" pos:end="185:46">num_env</name></name></expr></argument>, <argument pos:start="185:49" pos:end="185:66"><expr pos:start="185:49" pos:end="185:66"><name pos:start="185:49" pos:end="185:59"><name pos:start="185:49" pos:end="185:50">ps</name><operator pos:start="185:51" pos:end="185:52">-&gt;</operator><name pos:start="185:53" pos:end="185:59">icc_par</name></name><operator pos:start="185:60" pos:end="185:60">+</operator><name pos:start="185:61" pos:end="185:66">source</name></expr></argument>, <argument pos:start="185:69" pos:end="185:90"><expr pos:start="185:69" pos:end="185:90"><sizeof pos:start="185:69" pos:end="185:90">sizeof<argument_list pos:start="185:75" pos:end="185:90">(<argument pos:start="185:76" pos:end="185:89"><expr pos:start="185:76" pos:end="185:89"><name pos:start="185:76" pos:end="185:89"><name pos:start="185:76" pos:end="185:77">ps</name><operator pos:start="185:78" pos:end="185:79">-&gt;</operator><name pos:start="185:80" pos:end="185:86">icc_par</name><index pos:start="185:87" pos:end="185:89">[<expr pos:start="185:88" pos:end="185:88"><literal type="number" pos:start="185:88" pos:end="185:88">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="189:13" pos:end="195:13"><if pos:start="189:13" pos:end="195:13">if <condition pos:start="189:16" pos:end="189:34">(<expr pos:start="189:17" pos:end="189:33"><name pos:start="189:17" pos:end="189:33"><name pos:start="189:17" pos:end="189:18">ps</name><operator pos:start="189:19" pos:end="189:20">-&gt;</operator><name pos:start="189:21" pos:end="189:33">enable_ipdopd</name></name></expr>)</condition> <block pos:start="189:36" pos:end="195:13">{<block_content pos:start="191:17" pos:end="193:92">

                <expr_stmt pos:start="191:17" pos:end="191:92"><expr pos:start="191:17" pos:end="191:91"><call pos:start="191:17" pos:end="191:91"><name pos:start="191:17" pos:end="191:22">memcpy</name><argument_list pos:start="191:23" pos:end="191:91">(<argument pos:start="191:24" pos:end="191:46"><expr pos:start="191:24" pos:end="191:46"><name pos:start="191:24" pos:end="191:34"><name pos:start="191:24" pos:end="191:25">ps</name><operator pos:start="191:26" pos:end="191:27">-&gt;</operator><name pos:start="191:28" pos:end="191:34">ipd_par</name></name><operator pos:start="191:35" pos:end="191:35">+</operator><name pos:start="191:36" pos:end="191:46"><name pos:start="191:36" pos:end="191:37">ps</name><operator pos:start="191:38" pos:end="191:39">-&gt;</operator><name pos:start="191:40" pos:end="191:46">num_env</name></name></expr></argument>, <argument pos:start="191:49" pos:end="191:66"><expr pos:start="191:49" pos:end="191:66"><name pos:start="191:49" pos:end="191:59"><name pos:start="191:49" pos:end="191:50">ps</name><operator pos:start="191:51" pos:end="191:52">-&gt;</operator><name pos:start="191:53" pos:end="191:59">ipd_par</name></name><operator pos:start="191:60" pos:end="191:60">+</operator><name pos:start="191:61" pos:end="191:66">source</name></expr></argument>, <argument pos:start="191:69" pos:end="191:90"><expr pos:start="191:69" pos:end="191:90"><sizeof pos:start="191:69" pos:end="191:90">sizeof<argument_list pos:start="191:75" pos:end="191:90">(<argument pos:start="191:76" pos:end="191:89"><expr pos:start="191:76" pos:end="191:89"><name pos:start="191:76" pos:end="191:89"><name pos:start="191:76" pos:end="191:77">ps</name><operator pos:start="191:78" pos:end="191:79">-&gt;</operator><name pos:start="191:80" pos:end="191:86">ipd_par</name><index pos:start="191:87" pos:end="191:89">[<expr pos:start="191:88" pos:end="191:88"><literal type="number" pos:start="191:88" pos:end="191:88">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:92"><expr pos:start="193:17" pos:end="193:91"><call pos:start="193:17" pos:end="193:91"><name pos:start="193:17" pos:end="193:22">memcpy</name><argument_list pos:start="193:23" pos:end="193:91">(<argument pos:start="193:24" pos:end="193:46"><expr pos:start="193:24" pos:end="193:46"><name pos:start="193:24" pos:end="193:34"><name pos:start="193:24" pos:end="193:25">ps</name><operator pos:start="193:26" pos:end="193:27">-&gt;</operator><name pos:start="193:28" pos:end="193:34">opd_par</name></name><operator pos:start="193:35" pos:end="193:35">+</operator><name pos:start="193:36" pos:end="193:46"><name pos:start="193:36" pos:end="193:37">ps</name><operator pos:start="193:38" pos:end="193:39">-&gt;</operator><name pos:start="193:40" pos:end="193:46">num_env</name></name></expr></argument>, <argument pos:start="193:49" pos:end="193:66"><expr pos:start="193:49" pos:end="193:66"><name pos:start="193:49" pos:end="193:59"><name pos:start="193:49" pos:end="193:50">ps</name><operator pos:start="193:51" pos:end="193:52">-&gt;</operator><name pos:start="193:53" pos:end="193:59">opd_par</name></name><operator pos:start="193:60" pos:end="193:60">+</operator><name pos:start="193:61" pos:end="193:66">source</name></expr></argument>, <argument pos:start="193:69" pos:end="193:90"><expr pos:start="193:69" pos:end="193:90"><sizeof pos:start="193:69" pos:end="193:90">sizeof<argument_list pos:start="193:75" pos:end="193:90">(<argument pos:start="193:76" pos:end="193:89"><expr pos:start="193:76" pos:end="193:89"><name pos:start="193:76" pos:end="193:89"><name pos:start="193:76" pos:end="193:77">ps</name><operator pos:start="193:78" pos:end="193:79">-&gt;</operator><name pos:start="193:80" pos:end="193:86">opd_par</name><index pos:start="193:87" pos:end="193:89">[<expr pos:start="193:88" pos:end="193:88"><literal type="number" pos:start="193:88" pos:end="193:88">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:22"><expr pos:start="199:9" pos:end="199:21"><name pos:start="199:9" pos:end="199:19"><name pos:start="199:9" pos:end="199:10">ps</name><operator pos:start="199:11" pos:end="199:12">-&gt;</operator><name pos:start="199:13" pos:end="199:19">num_env</name></name><operator pos:start="199:20" pos:end="199:21">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:59"><expr pos:start="201:9" pos:end="201:58"><name pos:start="201:9" pos:end="201:40"><name pos:start="201:9" pos:end="201:10">ps</name><operator pos:start="201:11" pos:end="201:12">-&gt;</operator><name pos:start="201:13" pos:end="201:27">border_position</name><index pos:start="201:28" pos:end="201:40">[<expr pos:start="201:29" pos:end="201:39"><name pos:start="201:29" pos:end="201:39"><name pos:start="201:29" pos:end="201:30">ps</name><operator pos:start="201:31" pos:end="201:32">-&gt;</operator><name pos:start="201:33" pos:end="201:39">num_env</name></name></expr>]</index></name> <operator pos:start="201:42" pos:end="201:42">=</operator> <name pos:start="201:44" pos:end="201:54">numQMFSlots</name> <operator pos:start="201:56" pos:end="201:56">-</operator> <literal type="number" pos:start="201:58" pos:end="201:58">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="209:5" pos:end="209:38"><expr pos:start="209:5" pos:end="209:37"><name pos:start="209:5" pos:end="209:21"><name pos:start="209:5" pos:end="209:6">ps</name><operator pos:start="209:7" pos:end="209:8">-&gt;</operator><name pos:start="209:9" pos:end="209:21">is34bands_old</name></name> <operator pos:start="209:23" pos:end="209:23">=</operator> <name pos:start="209:25" pos:end="209:37"><name pos:start="209:25" pos:end="209:26">ps</name><operator pos:start="209:27" pos:end="209:28">-&gt;</operator><name pos:start="209:29" pos:end="209:37">is34bands</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="211:5" pos:end="215:65"><if pos:start="211:5" pos:end="215:65">if <condition pos:start="211:8" pos:end="211:59">(<expr pos:start="211:9" pos:end="211:58"><operator pos:start="211:9" pos:end="211:9">!</operator><name pos:start="211:10" pos:end="211:20">PS_BASELINE</name> <operator pos:start="211:22" pos:end="211:23">&amp;&amp;</operator> <operator pos:start="211:25" pos:end="211:25">(</operator><name pos:start="211:26" pos:end="211:39"><name pos:start="211:26" pos:end="211:27">ps</name><operator pos:start="211:28" pos:end="211:29">-&gt;</operator><name pos:start="211:30" pos:end="211:39">enable_iid</name></name> <operator pos:start="211:41" pos:end="211:42">||</operator> <name pos:start="211:44" pos:end="211:57"><name pos:start="211:44" pos:end="211:45">ps</name><operator pos:start="211:46" pos:end="211:47">-&gt;</operator><name pos:start="211:48" pos:end="211:57">enable_icc</name></name><operator pos:start="211:58" pos:end="211:58">)</operator></expr>)</condition><block type="pseudo" pos:start="213:9" pos:end="215:65"><block_content pos:start="213:9" pos:end="215:65">

        <expr_stmt pos:start="213:9" pos:end="215:65"><expr pos:start="213:9" pos:end="215:64"><name pos:start="213:9" pos:end="213:21"><name pos:start="213:9" pos:end="213:10">ps</name><operator pos:start="213:11" pos:end="213:12">-&gt;</operator><name pos:start="213:13" pos:end="213:21">is34bands</name></name> <operator pos:start="213:23" pos:end="213:23">=</operator> <operator pos:start="213:25" pos:end="213:25">(</operator><name pos:start="213:26" pos:end="213:39"><name pos:start="213:26" pos:end="213:27">ps</name><operator pos:start="213:28" pos:end="213:29">-&gt;</operator><name pos:start="213:30" pos:end="213:39">enable_iid</name></name> <operator pos:start="213:41" pos:end="213:42">&amp;&amp;</operator> <name pos:start="213:44" pos:end="213:57"><name pos:start="213:44" pos:end="213:45">ps</name><operator pos:start="213:46" pos:end="213:47">-&gt;</operator><name pos:start="213:48" pos:end="213:57">nr_iid_par</name></name> <operator pos:start="213:59" pos:end="213:60">==</operator> <literal type="number" pos:start="213:62" pos:end="213:63">34</literal><operator pos:start="213:64" pos:end="213:64">)</operator> <operator pos:start="213:66" pos:end="213:67">||</operator>

                        <operator pos:start="215:25" pos:end="215:25">(</operator><name pos:start="215:26" pos:end="215:39"><name pos:start="215:26" pos:end="215:27">ps</name><operator pos:start="215:28" pos:end="215:29">-&gt;</operator><name pos:start="215:30" pos:end="215:39">enable_icc</name></name> <operator pos:start="215:41" pos:end="215:42">&amp;&amp;</operator> <name pos:start="215:44" pos:end="215:57"><name pos:start="215:44" pos:end="215:45">ps</name><operator pos:start="215:46" pos:end="215:47">-&gt;</operator><name pos:start="215:48" pos:end="215:57">nr_icc_par</name></name> <operator pos:start="215:59" pos:end="215:60">==</operator> <literal type="number" pos:start="215:62" pos:end="215:63">34</literal><operator pos:start="215:64" pos:end="215:64">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="219:5" pos:end="219:14">//Baseline</comment>

    <if_stmt pos:start="221:5" pos:end="225:5"><if pos:start="221:5" pos:end="225:5">if <condition pos:start="221:8" pos:end="221:27">(<expr pos:start="221:9" pos:end="221:26"><operator pos:start="221:9" pos:end="221:9">!</operator><name pos:start="221:10" pos:end="221:26"><name pos:start="221:10" pos:end="221:11">ps</name><operator pos:start="221:12" pos:end="221:13">-&gt;</operator><name pos:start="221:14" pos:end="221:26">enable_ipdopd</name></name></expr>)</condition> <block pos:start="221:29" pos:end="225:5">{<block_content>



    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="229:5" pos:end="231:22"><if pos:start="229:5" pos:end="231:22">if <condition pos:start="229:8" pos:end="229:15">(<expr pos:start="229:9" pos:end="229:14"><name pos:start="229:9" pos:end="229:14">header</name></expr>)</condition><block type="pseudo" pos:start="231:9" pos:end="231:22"><block_content pos:start="231:9" pos:end="231:22">

        <expr_stmt pos:start="231:9" pos:end="231:22"><expr pos:start="231:9" pos:end="231:21"><name pos:start="231:9" pos:end="231:17"><name pos:start="231:9" pos:end="231:10">ps</name><operator pos:start="231:11" pos:end="231:12">-&gt;</operator><name pos:start="231:13" pos:end="231:17">start</name></name> <operator pos:start="231:19" pos:end="231:19">=</operator> <literal type="number" pos:start="231:21" pos:end="231:21">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:57"><expr pos:start="235:5" pos:end="235:56"><name pos:start="235:5" pos:end="235:17">bits_consumed</name> <operator pos:start="235:19" pos:end="235:19">=</operator> <call pos:start="235:21" pos:end="235:38"><name pos:start="235:21" pos:end="235:34">get_bits_count</name><argument_list pos:start="235:35" pos:end="235:38">(<argument pos:start="235:36" pos:end="235:37"><expr pos:start="235:36" pos:end="235:37"><name pos:start="235:36" pos:end="235:37">gb</name></expr></argument>)</argument_list></call> <operator pos:start="235:40" pos:end="235:40">-</operator> <name pos:start="235:42" pos:end="235:56">bit_count_start</name></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="243:5"><if pos:start="237:5" pos:end="243:5">if <condition pos:start="237:8" pos:end="237:35">(<expr pos:start="237:9" pos:end="237:34"><name pos:start="237:9" pos:end="237:21">bits_consumed</name> <operator pos:start="237:23" pos:end="237:24">&lt;=</operator> <name pos:start="237:26" pos:end="237:34">bits_left</name></expr>)</condition> <block pos:start="237:37" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:29">

        <expr_stmt pos:start="239:9" pos:end="239:47"><expr pos:start="239:9" pos:end="239:46"><call pos:start="239:9" pos:end="239:46"><name pos:start="239:9" pos:end="239:22">skip_bits_long</name><argument_list pos:start="239:23" pos:end="239:46">(<argument pos:start="239:24" pos:end="239:30"><expr pos:start="239:24" pos:end="239:30"><name pos:start="239:24" pos:end="239:30">gb_host</name></expr></argument>, <argument pos:start="239:33" pos:end="239:45"><expr pos:start="239:33" pos:end="239:45"><name pos:start="239:33" pos:end="239:45">bits_consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="241:9" pos:end="241:29">return <expr pos:start="241:16" pos:end="241:28"><name pos:start="241:16" pos:end="241:28">bits_consumed</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:109"><expr pos:start="245:5" pos:end="245:108"><call pos:start="245:5" pos:end="245:108"><name pos:start="245:5" pos:end="245:10">av_log</name><argument_list pos:start="245:11" pos:end="245:108">(<argument pos:start="245:12" pos:end="245:16"><expr pos:start="245:12" pos:end="245:16"><name pos:start="245:12" pos:end="245:16">avctx</name></expr></argument>, <argument pos:start="245:19" pos:end="245:30"><expr pos:start="245:19" pos:end="245:30"><name pos:start="245:19" pos:end="245:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="245:33" pos:end="245:81"><expr pos:start="245:33" pos:end="245:81"><literal type="string" pos:start="245:33" pos:end="245:81">"Expected to read %d PS bits actually read %d.\n"</literal></expr></argument>, <argument pos:start="245:84" pos:end="245:92"><expr pos:start="245:84" pos:end="245:92"><name pos:start="245:84" pos:end="245:92">bits_left</name></expr></argument>, <argument pos:start="245:95" pos:end="245:107"><expr pos:start="245:95" pos:end="245:107"><name pos:start="245:95" pos:end="245:107">bits_consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="247:1" pos:end="247:4"><name pos:start="247:1" pos:end="247:3">err</name>:</label>

    <expr_stmt pos:start="249:5" pos:end="249:18"><expr pos:start="249:5" pos:end="249:17"><name pos:start="249:5" pos:end="249:13"><name pos:start="249:5" pos:end="249:6">ps</name><operator pos:start="249:7" pos:end="249:8">-&gt;</operator><name pos:start="249:9" pos:end="249:13">start</name></name> <operator pos:start="249:15" pos:end="249:15">=</operator> <literal type="number" pos:start="249:17" pos:end="249:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:39"><expr pos:start="251:5" pos:end="251:38"><call pos:start="251:5" pos:end="251:38"><name pos:start="251:5" pos:end="251:18">skip_bits_long</name><argument_list pos:start="251:19" pos:end="251:38">(<argument pos:start="251:20" pos:end="251:26"><expr pos:start="251:20" pos:end="251:26"><name pos:start="251:20" pos:end="251:26">gb_host</name></expr></argument>, <argument pos:start="251:29" pos:end="251:37"><expr pos:start="251:29" pos:end="251:37"><name pos:start="251:29" pos:end="251:37">bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <return pos:start="257:5" pos:end="257:21">return <expr pos:start="257:12" pos:end="257:20"><name pos:start="257:12" pos:end="257:20">bits_left</name></expr>;</return>

</block_content>}</block></function></unit>
