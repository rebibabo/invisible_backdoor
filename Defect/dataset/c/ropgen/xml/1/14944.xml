<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14944.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">ff_qsv_encode</name><parameter_list pos:start="1:18" pos:end="3:71">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:39"><name pos:start="1:19" pos:end="1:32">AVCodecContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:39">avctx</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:54">QSVEncContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">q</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:31"><decl pos:start="3:19" pos:end="3:31"><type pos:start="3:19" pos:end="3:31"><name pos:start="3:19" pos:end="3:26">AVPacket</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:31">pkt</name></decl></parameter>, <parameter pos:start="3:34" pos:end="3:53"><decl pos:start="3:34" pos:end="3:53"><type pos:start="3:34" pos:end="3:53"><specifier pos:start="3:34" pos:end="3:38">const</specifier> <name pos:start="3:40" pos:end="3:46">AVFrame</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:53">frame</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:70"><decl pos:start="3:56" pos:end="3:70"><type pos:start="3:56" pos:end="3:70"><name pos:start="3:56" pos:end="3:58">int</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:70">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="119:1">{<block_content pos:start="7:5" pos:end="117:13">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">mfxBitstream</name></type> <name pos:start="7:18" pos:end="7:19">bs</name> <init pos:start="7:21" pos:end="7:35">= <expr pos:start="7:23" pos:end="7:35"><block pos:start="7:23" pos:end="7:35">{ <expr pos:start="7:25" pos:end="7:33"><block pos:start="7:25" pos:end="7:33">{ <expr pos:start="7:27" pos:end="7:31"><block pos:start="7:27" pos:end="7:31">{ <expr pos:start="7:29" pos:end="7:29"><literal type="number" pos:start="7:29" pos:end="7:29">0</literal></expr> }</block></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">mfxFrameSurface1</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">surf</name> <init pos:start="11:28" pos:end="11:33">= <expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">mfxSyncPoint</name></type> <name pos:start="13:18" pos:end="13:21">sync</name>      <init pos:start="13:28" pos:end="13:33">= <expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="31:5">if <condition pos:start="19:8" pos:end="19:14">(<expr pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:13">frame</name></expr>)</condition> <block pos:start="19:16" pos:end="31:5">{<block_content pos:start="21:9" pos:end="29:9">

        <expr_stmt pos:start="21:9" pos:end="21:44"><expr pos:start="21:9" pos:end="21:43"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:43"><name pos:start="21:15" pos:end="21:26">submit_frame</name><argument_list pos:start="21:27" pos:end="21:43">(<argument pos:start="21:28" pos:end="21:28"><expr pos:start="21:28" pos:end="21:28"><name pos:start="21:28" pos:end="21:28">q</name></expr></argument>, <argument pos:start="21:31" pos:end="21:35"><expr pos:start="21:31" pos:end="21:35"><name pos:start="21:31" pos:end="21:35">frame</name></expr></argument>, <argument pos:start="21:38" pos:end="21:42"><expr pos:start="21:38" pos:end="21:42"><operator pos:start="21:38" pos:end="21:38">&amp;</operator><name pos:start="21:39" pos:end="21:42">surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:20">(<expr pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:15">ret</name> <operator pos:start="23:17" pos:end="23:17">&lt;</operator> <literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr>)</condition> <block pos:start="23:22" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:23">

            <expr_stmt pos:start="25:13" pos:end="25:86"><expr pos:start="25:13" pos:end="25:85"><call pos:start="25:13" pos:end="25:85"><name pos:start="25:13" pos:end="25:18">av_log</name><argument_list pos:start="25:19" pos:end="25:85">(<argument pos:start="25:20" pos:end="25:24"><expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:24">avctx</name></expr></argument>, <argument pos:start="25:27" pos:end="25:38"><expr pos:start="25:27" pos:end="25:38"><name pos:start="25:27" pos:end="25:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:41" pos:end="25:84"><expr pos:start="25:41" pos:end="25:84"><literal type="string" pos:start="25:41" pos:end="25:84">"Error submitting the frame for encoding.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:23">return <expr pos:start="27:20" pos:end="27:22"><name pos:start="27:20" pos:end="27:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:46"><name pos:start="35:11" pos:end="35:25">ff_alloc_packet</name><argument_list pos:start="35:26" pos:end="35:46">(<argument pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><name pos:start="35:27" pos:end="35:29">pkt</name></expr></argument>, <argument pos:start="35:32" pos:end="35:45"><expr pos:start="35:32" pos:end="35:45"><name pos:start="35:32" pos:end="35:45"><name pos:start="35:32" pos:end="35:32">q</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:45">packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>)</condition> <block pos:start="37:18" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:19">

        <expr_stmt pos:start="39:9" pos:end="39:76"><expr pos:start="39:9" pos:end="39:75"><call pos:start="39:9" pos:end="39:75"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:75">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:74"><expr pos:start="39:37" pos:end="39:74"><literal type="string" pos:start="39:37" pos:end="39:74">"Error allocating the output packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:19">return <expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:6">bs</name><operator pos:start="45:7" pos:end="45:7">.</operator><name pos:start="45:8" pos:end="45:11">Data</name></name>      <operator pos:start="45:18" pos:end="45:18">=</operator> <name pos:start="45:20" pos:end="45:28"><name pos:start="45:20" pos:end="45:22">pkt</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:28">data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:6">bs</name><operator pos:start="47:7" pos:end="47:7">.</operator><name pos:start="47:8" pos:end="47:16">MaxLength</name></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:28"><name pos:start="47:20" pos:end="47:22">pkt</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:28">size</name></name></expr>;</expr_stmt>



    <do pos:start="51:5" pos:end="59:22">do <block pos:start="51:8" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:25">

        <expr_stmt pos:start="53:9" pos:end="53:82"><expr pos:start="53:9" pos:end="53:81"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:81"><name pos:start="53:15" pos:end="53:45">MFXVideoENCODE_EncodeFrameAsync</name><argument_list pos:start="53:46" pos:end="53:81">(<argument pos:start="53:47" pos:end="53:56"><expr pos:start="53:47" pos:end="53:56"><name pos:start="53:47" pos:end="53:56"><name pos:start="53:47" pos:end="53:47">q</name><operator pos:start="53:48" pos:end="53:49">-&gt;</operator><name pos:start="53:50" pos:end="53:56">session</name></name></expr></argument>, <argument pos:start="53:59" pos:end="53:62"><expr pos:start="53:59" pos:end="53:62"><name pos:start="53:59" pos:end="53:62">NULL</name></expr></argument>, <argument pos:start="53:65" pos:end="53:68"><expr pos:start="53:65" pos:end="53:68"><name pos:start="53:65" pos:end="53:68">surf</name></expr></argument>, <argument pos:start="53:71" pos:end="53:73"><expr pos:start="53:71" pos:end="53:73"><operator pos:start="53:71" pos:end="53:71">&amp;</operator><name pos:start="53:72" pos:end="53:73">bs</name></expr></argument>, <argument pos:start="53:76" pos:end="53:80"><expr pos:start="53:76" pos:end="53:80"><operator pos:start="53:76" pos:end="53:76">&amp;</operator><name pos:start="53:77" pos:end="53:80">sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="57:25"><if pos:start="55:9" pos:end="57:25">if <condition pos:start="55:12" pos:end="55:39">(<expr pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:18">==</operator> <name pos:start="55:20" pos:end="55:38">MFX_WRN_DEVICE_BUSY</name></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:25"><block_content pos:start="57:13" pos:end="57:25">

            <expr_stmt pos:start="57:13" pos:end="57:25"><expr pos:start="57:13" pos:end="57:24"><call pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:21">av_usleep</name><argument_list pos:start="57:22" pos:end="57:24">(<argument pos:start="57:23" pos:end="57:23"><expr pos:start="57:23" pos:end="57:23"><literal type="number" pos:start="57:23" pos:end="57:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="59:13" pos:end="59:21">(<expr pos:start="59:14" pos:end="59:20"><name pos:start="59:14" pos:end="59:16">ret</name> <operator pos:start="59:18" pos:end="59:18">&gt;</operator> <literal type="number" pos:start="59:20" pos:end="59:20">0</literal></expr>)</condition>;</do>



    <if_stmt pos:start="63:5" pos:end="65:66"><if pos:start="63:5" pos:end="65:66">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:66"><block_content pos:start="65:9" pos:end="65:66">

        <return pos:start="65:9" pos:end="65:66">return <expr pos:start="65:16" pos:end="65:65"><ternary pos:start="65:16" pos:end="65:65"><condition pos:start="65:16" pos:end="65:43"><expr pos:start="65:16" pos:end="65:41"><operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:22">==</operator> <name pos:start="65:24" pos:end="65:40">MFX_ERR_MORE_DATA</name><operator pos:start="65:41" pos:end="65:41">)</operator></expr> ?</condition><then pos:start="65:45" pos:end="65:45"> <expr pos:start="65:45" pos:end="65:45"><literal type="number" pos:start="65:45" pos:end="65:45">0</literal></expr> </then><else pos:start="65:47" pos:end="65:65">: <expr pos:start="65:49" pos:end="65:65"><call pos:start="65:49" pos:end="65:65"><name pos:start="65:49" pos:end="65:60">ff_qsv_error</name><argument_list pos:start="65:61" pos:end="65:65">(<argument pos:start="65:62" pos:end="65:64"><expr pos:start="65:62" pos:end="65:64"><name pos:start="65:62" pos:end="65:64">ret</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="71:38"><if pos:start="69:5" pos:end="71:38">if <condition pos:start="69:8" pos:end="69:75">(<expr pos:start="69:9" pos:end="69:74"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:14">==</operator> <name pos:start="69:16" pos:end="69:47">MFX_WRN_INCOMPATIBLE_VIDEO_PARAM</name> <operator pos:start="69:49" pos:end="69:50">&amp;&amp;</operator> <name pos:start="69:52" pos:end="69:74"><name pos:start="69:52" pos:end="69:56">frame</name><operator pos:start="69:57" pos:end="69:58">-&gt;</operator><name pos:start="69:59" pos:end="69:74">interlaced_frame</name></name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:38"><block_content pos:start="71:9" pos:end="71:38">

        <expr_stmt pos:start="71:9" pos:end="71:38"><expr pos:start="71:9" pos:end="71:37"><call pos:start="71:9" pos:end="71:37"><name pos:start="71:9" pos:end="71:27">print_interlace_msg</name><argument_list pos:start="71:28" pos:end="71:37">(<argument pos:start="71:29" pos:end="71:33"><expr pos:start="71:29" pos:end="71:33"><name pos:start="71:29" pos:end="71:33">avctx</name></expr></argument>, <argument pos:start="71:36" pos:end="71:36"><expr pos:start="71:36" pos:end="71:36"><name pos:start="71:36" pos:end="71:36">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="113:5"><if pos:start="75:5" pos:end="113:5">if <condition pos:start="75:8" pos:end="75:13">(<expr pos:start="75:9" pos:end="75:12"><name pos:start="75:9" pos:end="75:12">sync</name></expr>)</condition> <block pos:start="75:15" pos:end="113:5">{<block_content pos:start="77:9" pos:end="111:24">

        <expr_stmt pos:start="77:9" pos:end="77:60"><expr pos:start="77:9" pos:end="77:59"><call pos:start="77:9" pos:end="77:59"><name pos:start="77:9" pos:end="77:34">MFXVideoCORE_SyncOperation</name><argument_list pos:start="77:35" pos:end="77:59">(<argument pos:start="77:36" pos:end="77:45"><expr pos:start="77:36" pos:end="77:45"><name pos:start="77:36" pos:end="77:45"><name pos:start="77:36" pos:end="77:36">q</name><operator pos:start="77:37" pos:end="77:38">-&gt;</operator><name pos:start="77:39" pos:end="77:45">session</name></name></expr></argument>, <argument pos:start="77:48" pos:end="77:51"><expr pos:start="77:48" pos:end="77:51"><name pos:start="77:48" pos:end="77:51">sync</name></expr></argument>, <argument pos:start="77:54" pos:end="77:58"><expr pos:start="77:54" pos:end="77:58"><literal type="number" pos:start="77:54" pos:end="77:58">60000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="91:62"><if pos:start="81:9" pos:end="83:62">if <condition pos:start="81:12" pos:end="81:78">(<expr pos:start="81:13" pos:end="81:77"><name pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:14">bs</name><operator pos:start="81:15" pos:end="81:15">.</operator><name pos:start="81:16" pos:end="81:24">FrameType</name></name> <operator pos:start="81:26" pos:end="81:26">&amp;</operator> <name pos:start="81:28" pos:end="81:42">MFX_FRAMETYPE_I</name> <operator pos:start="81:44" pos:end="81:45">||</operator> <name pos:start="81:47" pos:end="81:58"><name pos:start="81:47" pos:end="81:48">bs</name><operator pos:start="81:49" pos:end="81:49">.</operator><name pos:start="81:50" pos:end="81:58">FrameType</name></name> <operator pos:start="81:60" pos:end="81:60">&amp;</operator> <name pos:start="81:62" pos:end="81:77">MFX_FRAMETYPE_xI</name></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:62"><block_content pos:start="83:13" pos:end="83:62">

            <expr_stmt pos:start="83:13" pos:end="83:62"><expr pos:start="83:13" pos:end="83:61"><name pos:start="83:13" pos:end="83:41"><name pos:start="83:13" pos:end="83:17">avctx</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:30">coded_frame</name><operator pos:start="83:31" pos:end="83:32">-&gt;</operator><name pos:start="83:33" pos:end="83:41">pict_type</name></name> <operator pos:start="83:43" pos:end="83:43">=</operator> <name pos:start="83:45" pos:end="83:61">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="85:9" pos:end="87:62">else if <condition pos:start="85:17" pos:end="85:83">(<expr pos:start="85:18" pos:end="85:82"><name pos:start="85:18" pos:end="85:29"><name pos:start="85:18" pos:end="85:19">bs</name><operator pos:start="85:20" pos:end="85:20">.</operator><name pos:start="85:21" pos:end="85:29">FrameType</name></name> <operator pos:start="85:31" pos:end="85:31">&amp;</operator> <name pos:start="85:33" pos:end="85:47">MFX_FRAMETYPE_P</name> <operator pos:start="85:49" pos:end="85:50">||</operator> <name pos:start="85:52" pos:end="85:63"><name pos:start="85:52" pos:end="85:53">bs</name><operator pos:start="85:54" pos:end="85:54">.</operator><name pos:start="85:55" pos:end="85:63">FrameType</name></name> <operator pos:start="85:65" pos:end="85:65">&amp;</operator> <name pos:start="85:67" pos:end="85:82">MFX_FRAMETYPE_xP</name></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:62"><block_content pos:start="87:13" pos:end="87:62">

            <expr_stmt pos:start="87:13" pos:end="87:62"><expr pos:start="87:13" pos:end="87:61"><name pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:17">avctx</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:30">coded_frame</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:41">pict_type</name></name> <operator pos:start="87:43" pos:end="87:43">=</operator> <name pos:start="87:45" pos:end="87:61">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="89:9" pos:end="91:62">else if <condition pos:start="89:17" pos:end="89:83">(<expr pos:start="89:18" pos:end="89:82"><name pos:start="89:18" pos:end="89:29"><name pos:start="89:18" pos:end="89:19">bs</name><operator pos:start="89:20" pos:end="89:20">.</operator><name pos:start="89:21" pos:end="89:29">FrameType</name></name> <operator pos:start="89:31" pos:end="89:31">&amp;</operator> <name pos:start="89:33" pos:end="89:47">MFX_FRAMETYPE_B</name> <operator pos:start="89:49" pos:end="89:50">||</operator> <name pos:start="89:52" pos:end="89:63"><name pos:start="89:52" pos:end="89:53">bs</name><operator pos:start="89:54" pos:end="89:54">.</operator><name pos:start="89:55" pos:end="89:63">FrameType</name></name> <operator pos:start="89:65" pos:end="89:65">&amp;</operator> <name pos:start="89:67" pos:end="89:82">MFX_FRAMETYPE_xB</name></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:62"><block_content pos:start="91:13" pos:end="91:62">

            <expr_stmt pos:start="91:13" pos:end="91:62"><expr pos:start="91:13" pos:end="91:61"><name pos:start="91:13" pos:end="91:41"><name pos:start="91:13" pos:end="91:17">avctx</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:30">coded_frame</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:41">pict_type</name></name> <operator pos:start="91:43" pos:end="91:43">=</operator> <name pos:start="91:45" pos:end="91:61">AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:95"><expr pos:start="95:9" pos:end="95:94"><name pos:start="95:9" pos:end="95:16"><name pos:start="95:9" pos:end="95:11">pkt</name><operator pos:start="95:12" pos:end="95:13">-&gt;</operator><name pos:start="95:14" pos:end="95:16">dts</name></name>  <operator pos:start="95:19" pos:end="95:19">=</operator> <macro pos:start="95:21" pos:end="95:94"><name pos:start="95:21" pos:end="95:32">av_rescale_q</name><argument_list pos:start="95:33" pos:end="95:94">(<argument pos:start="95:34" pos:end="95:51">bs.DecodeTimeStamp</argument>, <argument pos:start="95:54" pos:end="95:67">(AVRational){<literal type="number" pos:start="95:67" pos:end="95:67">1</literal></argument>, <argument pos:start="95:70" pos:end="95:75"><literal type="number" pos:start="95:70" pos:end="95:74">90000</literal>}</argument>, <argument pos:start="95:78" pos:end="95:93">avctx-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:95"><expr pos:start="97:9" pos:end="97:94"><name pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:11">pkt</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:16">pts</name></name>  <operator pos:start="97:19" pos:end="97:19">=</operator> <macro pos:start="97:21" pos:end="97:94"><name pos:start="97:21" pos:end="97:32">av_rescale_q</name><argument_list pos:start="97:33" pos:end="97:94">(<argument pos:start="97:34" pos:end="97:45">bs.TimeStamp</argument>,       <argument pos:start="97:54" pos:end="97:67">(AVRational){<literal type="number" pos:start="97:67" pos:end="97:67">1</literal></argument>, <argument pos:start="97:70" pos:end="97:75"><literal type="number" pos:start="97:70" pos:end="97:74">90000</literal>}</argument>, <argument pos:start="97:78" pos:end="97:93">avctx-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:34"><expr pos:start="99:9" pos:end="99:33"><name pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:11">pkt</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:17">size</name></name> <operator pos:start="99:19" pos:end="99:19">=</operator> <name pos:start="99:21" pos:end="99:33"><name pos:start="99:21" pos:end="99:22">bs</name><operator pos:start="99:23" pos:end="99:23">.</operator><name pos:start="99:24" pos:end="99:33">DataLength</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="103:9" pos:end="107:42"><if pos:start="103:9" pos:end="107:42">if <condition pos:start="103:12" pos:end="105:46">(<expr pos:start="103:13" pos:end="105:45"><name pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:14">bs</name><operator pos:start="103:15" pos:end="103:15">.</operator><name pos:start="103:16" pos:end="103:24">FrameType</name></name> <operator pos:start="103:26" pos:end="103:26">&amp;</operator> <name pos:start="103:28" pos:end="103:44">MFX_FRAMETYPE_IDR</name> <operator pos:start="103:46" pos:end="103:47">||</operator>

            <name pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:14">bs</name><operator pos:start="105:15" pos:end="105:15">.</operator><name pos:start="105:16" pos:end="105:24">FrameType</name></name> <operator pos:start="105:26" pos:end="105:26">&amp;</operator> <name pos:start="105:28" pos:end="105:45">MFX_FRAMETYPE_xIDR</name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:42"><block_content pos:start="107:13" pos:end="107:42">

            <expr_stmt pos:start="107:13" pos:end="107:42"><expr pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:22"><name pos:start="107:13" pos:end="107:15">pkt</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:22">flags</name></name> <operator pos:start="107:24" pos:end="107:25">|=</operator> <name pos:start="107:27" pos:end="107:41">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:24"><expr pos:start="111:9" pos:end="111:23"><operator pos:start="111:9" pos:end="111:9">*</operator><name pos:start="111:10" pos:end="111:19">got_packet</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <literal type="number" pos:start="111:23" pos:end="111:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="117:5" pos:end="117:13">return <expr pos:start="117:12" pos:end="117:12"><literal type="number" pos:start="117:12" pos:end="117:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
