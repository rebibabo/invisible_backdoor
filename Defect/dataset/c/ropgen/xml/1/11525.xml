<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11525.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:22"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:12">const</specifier> <name pos:start="1:14" pos:end="1:20">uint8_t</name> <modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:36">pcx_rle_decode</name><parameter_list pos:start="1:37" pos:end="5:52">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">dst</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:68"><decl pos:start="3:38" pos:end="3:68"><type pos:start="3:38" pos:end="3:68"><name pos:start="3:38" pos:end="3:45">unsigned</name> <name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:68">bytes_per_scanline</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:51"><decl pos:start="5:38" pos:end="5:51"><type pos:start="5:38" pos:end="5:51"><name pos:start="5:38" pos:end="5:40">int</name></type> <name pos:start="5:42" pos:end="5:51">compressed</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="49:1">{<block_content pos:start="9:5" pos:end="47:15">

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:21">run</name></decl>, <decl pos:start="11:24" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:17"/><name pos:start="11:24" pos:end="11:28">value</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="43:5"><if pos:start="15:5" pos:end="37:5">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:18">compressed</name></expr>)</condition> <block pos:start="15:21" pos:end="37:5">{<block_content pos:start="17:9" pos:end="35:9">

        <while pos:start="17:9" pos:end="35:9">while <condition pos:start="17:15" pos:end="17:38">(<expr pos:start="17:16" pos:end="17:37"><name pos:start="17:16" pos:end="17:16">i</name> <operator pos:start="17:18" pos:end="17:18">&lt;</operator> <name pos:start="17:20" pos:end="17:37">bytes_per_scanline</name></expr>)</condition> <block pos:start="17:40" pos:end="35:9">{<block_content pos:start="19:13" pos:end="33:33">

            <expr_stmt pos:start="19:13" pos:end="19:22"><expr pos:start="19:13" pos:end="19:21"><name pos:start="19:13" pos:end="19:15">run</name>   <operator pos:start="19:19" pos:end="19:19">=</operator> <literal type="number" pos:start="19:21" pos:end="19:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:27"><expr pos:start="21:13" pos:end="21:26"><name pos:start="21:13" pos:end="21:17">value</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <operator pos:start="21:21" pos:end="21:21">*</operator><name pos:start="21:22" pos:end="21:24">src</name><operator pos:start="21:25" pos:end="21:26">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="23:13" pos:end="29:13"><if pos:start="23:13" pos:end="29:13">if <condition pos:start="23:16" pos:end="23:30">(<expr pos:start="23:17" pos:end="23:29"><name pos:start="23:17" pos:end="23:21">value</name> <operator pos:start="23:23" pos:end="23:24">&gt;=</operator> <literal type="number" pos:start="23:26" pos:end="23:29">0xc0</literal></expr>)</condition> <block pos:start="23:32" pos:end="29:13">{<block_content pos:start="25:17" pos:end="27:31">

                <expr_stmt pos:start="25:17" pos:end="25:37"><expr pos:start="25:17" pos:end="25:36"><name pos:start="25:17" pos:end="25:19">run</name>   <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:29">value</name> <operator pos:start="25:31" pos:end="25:31">&amp;</operator> <literal type="number" pos:start="25:33" pos:end="25:36">0x3f</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="27:17" pos:end="27:31"><expr pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:21">value</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <operator pos:start="27:25" pos:end="27:25">*</operator><name pos:start="27:26" pos:end="27:28">src</name><operator pos:start="27:29" pos:end="27:30">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <while pos:start="31:13" pos:end="33:33">while <condition pos:start="31:19" pos:end="31:51">(<expr pos:start="31:20" pos:end="31:50"><name pos:start="31:20" pos:end="31:20">i</name> <operator pos:start="31:22" pos:end="31:22">&lt;</operator> <name pos:start="31:24" pos:end="31:41">bytes_per_scanline</name> <operator pos:start="31:43" pos:end="31:44">&amp;&amp;</operator> <name pos:start="31:46" pos:end="31:48">run</name><operator pos:start="31:49" pos:end="31:50">--</operator></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:33"><block_content pos:start="33:17" pos:end="33:33">

                <expr_stmt pos:start="33:17" pos:end="33:33"><expr pos:start="33:17" pos:end="33:32"><name pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:19">dst</name><index pos:start="33:20" pos:end="33:24">[<expr pos:start="33:21" pos:end="33:23"><name pos:start="33:21" pos:end="33:21">i</name><operator pos:start="33:22" pos:end="33:23">++</operator></expr>]</index></name> <operator pos:start="33:26" pos:end="33:26">=</operator> <name pos:start="33:28" pos:end="33:32">value</name></expr>;</expr_stmt></block_content></block></while>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="43:5">else <block pos:start="37:12" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:34">

        <expr_stmt pos:start="39:9" pos:end="39:45"><expr pos:start="39:9" pos:end="39:44"><call pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:14">memcpy</name><argument_list pos:start="39:15" pos:end="39:44">(<argument pos:start="39:16" pos:end="39:18"><expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">dst</name></expr></argument>, <argument pos:start="39:21" pos:end="39:23"><expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">src</name></expr></argument>, <argument pos:start="39:26" pos:end="39:43"><expr pos:start="39:26" pos:end="39:43"><name pos:start="39:26" pos:end="39:43">bytes_per_scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:11">src</name> <operator pos:start="41:13" pos:end="41:14">+=</operator> <name pos:start="41:16" pos:end="41:33">bytes_per_scanline</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="47:5" pos:end="47:15">return <expr pos:start="47:12" pos:end="47:14"><name pos:start="47:12" pos:end="47:14">src</name></expr>;</return>

</block_content>}</block></function>
</unit>
