<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11744.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">xscom_write</name><parameter_list pos:start="1:24" pos:end="3:39">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:44">hwaddr</name></type> <name pos:start="1:46" pos:end="1:49">addr</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:59">uint64_t</name></type> <name pos:start="1:61" pos:end="1:63">val</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:32">unsigned</name></type> <name pos:start="3:34" pos:end="3:38">width</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="49:1">{<block_content pos:start="7:5" pos:end="47:49">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">PnvChip</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:17">chip</name> <init pos:start="7:19" pos:end="7:26">= <expr pos:start="7:21" pos:end="7:26"><name pos:start="7:21" pos:end="7:26">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">pcba</name> <init pos:start="9:19" pos:end="9:46">= <expr pos:start="9:21" pos:end="9:46"><call pos:start="9:21" pos:end="9:46"><name pos:start="9:21" pos:end="9:34">pnv_xscom_pcba</name><argument_list pos:start="9:35" pos:end="9:46">(<argument pos:start="9:36" pos:end="9:39"><expr pos:start="9:36" pos:end="9:39"><name pos:start="9:36" pos:end="9:39">chip</name></expr></argument>, <argument pos:start="9:42" pos:end="9:45"><expr pos:start="9:42" pos:end="9:45"><name pos:start="9:42" pos:end="9:45">addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15">MemTxResult</name></type> <name pos:start="11:17" pos:end="11:22">result</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:48">/* Handle some SCOMs here before dispatch */</comment>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:45">(<expr pos:start="17:9" pos:end="17:44"><call pos:start="17:9" pos:end="17:44"><name pos:start="17:9" pos:end="17:27">xscom_write_default</name><argument_list pos:start="17:28" pos:end="17:44">(<argument pos:start="17:29" pos:end="17:32"><expr pos:start="17:29" pos:end="17:32"><name pos:start="17:29" pos:end="17:32">chip</name></expr></argument>, <argument pos:start="17:35" pos:end="17:38"><expr pos:start="17:35" pos:end="17:38"><name pos:start="17:35" pos:end="17:38">pcba</name></expr></argument>, <argument pos:start="17:41" pos:end="17:43"><expr pos:start="17:41" pos:end="17:43"><name pos:start="17:41" pos:end="17:43">val</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:47" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:22">

        <goto pos:start="19:9" pos:end="19:22">goto <name pos:start="19:14" pos:end="19:21">complete</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="27:31"><expr pos:start="25:5" pos:end="27:30"><call pos:start="25:5" pos:end="27:30"><name pos:start="25:5" pos:end="25:21">address_space_stq</name><argument_list pos:start="25:22" pos:end="27:30">(<argument pos:start="25:23" pos:end="25:37"><expr pos:start="25:23" pos:end="25:37"><operator pos:start="25:23" pos:end="25:23">&amp;</operator><name pos:start="25:24" pos:end="25:37"><name pos:start="25:24" pos:end="25:27">chip</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:37">xscom_as</name></name></expr></argument>, <argument pos:start="25:40" pos:end="25:48"><expr pos:start="25:40" pos:end="25:48"><name pos:start="25:40" pos:end="25:43">pcba</name> <operator pos:start="25:45" pos:end="25:46">&lt;&lt;</operator> <literal type="number" pos:start="25:48" pos:end="25:48">3</literal></expr></argument>, <argument pos:start="25:51" pos:end="25:53"><expr pos:start="25:51" pos:end="25:53"><name pos:start="25:51" pos:end="25:53">val</name></expr></argument>, <argument pos:start="25:56" pos:end="25:77"><expr pos:start="25:56" pos:end="25:77"><name pos:start="25:56" pos:end="25:77">MEMTXATTRS_UNSPECIFIED</name></expr></argument>,

                      <argument pos:start="27:23" pos:end="27:29"><expr pos:start="27:23" pos:end="27:29"><operator pos:start="27:23" pos:end="27:23">&amp;</operator><name pos:start="27:24" pos:end="27:29">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="41:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:27">(<expr pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:14">result</name> <operator pos:start="29:16" pos:end="29:17">!=</operator> <name pos:start="29:19" pos:end="29:26">MEMTX_OK</name></expr>)</condition> <block pos:start="29:29" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:15">

        <expr_stmt pos:start="31:9" pos:end="35:39"><expr pos:start="31:9" pos:end="35:38"><call pos:start="31:9" pos:end="35:38"><name pos:start="31:9" pos:end="31:21">qemu_log_mask</name><argument_list pos:start="31:22" pos:end="35:38">(<argument pos:start="31:23" pos:end="31:37"><expr pos:start="31:23" pos:end="31:37"><name pos:start="31:23" pos:end="31:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="31:40" pos:end="33:69"><expr pos:start="31:40" pos:end="33:69"><literal type="string" pos:start="31:40" pos:end="31:67">"XSCOM write failed at @0x%"</literal>

                      <name pos:start="33:23" pos:end="33:33">HWADDR_PRIx</name> <literal type="string" pos:start="33:35" pos:end="33:57">" pcba=0x%08x data=0x%"</literal> <name pos:start="33:59" pos:end="33:64">PRIx64</name> <literal type="string" pos:start="33:66" pos:end="33:69">"\n"</literal></expr></argument>,

                      <argument pos:start="35:23" pos:end="35:26"><expr pos:start="35:23" pos:end="35:26"><name pos:start="35:23" pos:end="35:26">addr</name></expr></argument>, <argument pos:start="35:29" pos:end="35:32"><expr pos:start="35:29" pos:end="35:32"><name pos:start="35:29" pos:end="35:32">pcba</name></expr></argument>, <argument pos:start="35:35" pos:end="35:37"><expr pos:start="35:35" pos:end="35:37"><name pos:start="35:35" pos:end="35:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:71"><expr pos:start="37:9" pos:end="37:70"><call pos:start="37:9" pos:end="37:70"><name pos:start="37:9" pos:end="37:22">xscom_complete</name><argument_list pos:start="37:23" pos:end="37:70">(<argument pos:start="37:24" pos:end="37:34"><expr pos:start="37:24" pos:end="37:34"><name pos:start="37:24" pos:end="37:34">current_cpu</name></expr></argument>, <argument pos:start="37:37" pos:end="37:69"><expr pos:start="37:37" pos:end="37:69"><name pos:start="37:37" pos:end="37:51">HMER_XSCOM_FAIL</name> <operator pos:start="37:53" pos:end="37:53">|</operator> <name pos:start="37:55" pos:end="37:69">HMER_XSCOM_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



<label pos:start="45:1" pos:end="45:9"><name pos:start="45:1" pos:end="45:8">complete</name>:</label>

    <expr_stmt pos:start="47:5" pos:end="47:49"><expr pos:start="47:5" pos:end="47:48"><call pos:start="47:5" pos:end="47:48"><name pos:start="47:5" pos:end="47:18">xscom_complete</name><argument_list pos:start="47:19" pos:end="47:48">(<argument pos:start="47:20" pos:end="47:30"><expr pos:start="47:20" pos:end="47:30"><name pos:start="47:20" pos:end="47:30">current_cpu</name></expr></argument>, <argument pos:start="47:33" pos:end="47:47"><expr pos:start="47:33" pos:end="47:47"><name pos:start="47:33" pos:end="47:47">HMER_XSCOM_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
