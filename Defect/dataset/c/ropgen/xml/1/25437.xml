<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25437.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">vmdk_open</name><parameter_list pos:start="1:21" pos:end="1:75">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:63"><decl pos:start="1:44" pos:end="1:63"><type pos:start="1:44" pos:end="1:63"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:63">filename</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:74"><decl pos:start="1:66" pos:end="1:74"><type pos:start="1:66" pos:end="1:74"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:74">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:14">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVVmdkState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">l1_size</name></decl>, <decl pos:start="9:18" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:18">i</name></decl>, <decl pos:start="9:21" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:23">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:30"><if pos:start="13:5" pos:end="17:30">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:19">parent_open</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:30"><block_content pos:start="17:9" pos:end="17:30">

        <comment type="line" pos:start="15:9" pos:end="15:39">// Parent must be opened as RO.</comment>

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:13">flags</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:29">BDRV_O_RDONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:88"><expr pos:start="19:5" pos:end="19:87"><call pos:start="19:5" pos:end="19:87"><name pos:start="19:5" pos:end="19:11">fprintf</name><argument_list pos:start="19:12" pos:end="19:87">(<argument pos:start="19:13" pos:end="19:18"><expr pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:18">stderr</name></expr></argument>, <argument pos:start="19:21" pos:end="19:65"><expr pos:start="19:21" pos:end="19:65"><literal type="string" pos:start="19:21" pos:end="19:65">"(VMDK) image open: flags=0x%x filename=%s\n"</literal></expr></argument>, <argument pos:start="19:68" pos:end="19:72"><expr pos:start="19:68" pos:end="19:72"><name pos:start="19:68" pos:end="19:72">flags</name></expr></argument>, <argument pos:start="19:75" pos:end="19:86"><expr pos:start="19:75" pos:end="19:86"><name pos:start="19:75" pos:end="19:86"><name pos:start="19:75" pos:end="19:76">bs</name><operator pos:start="19:77" pos:end="19:78">-&gt;</operator><name pos:start="19:79" pos:end="19:86">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:68"><expr pos:start="23:5" pos:end="23:67"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:67"><name pos:start="23:11" pos:end="23:24">bdrv_file_open</name><argument_list pos:start="23:25" pos:end="23:67">(<argument pos:start="23:26" pos:end="23:31"><expr pos:start="23:26" pos:end="23:31"><operator pos:start="23:26" pos:end="23:26">&amp;</operator><name pos:start="23:27" pos:end="23:31"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:31">hd</name></name></expr></argument>, <argument pos:start="23:34" pos:end="23:41"><expr pos:start="23:34" pos:end="23:41"><name pos:start="23:34" pos:end="23:41">filename</name></expr></argument>, <argument pos:start="23:44" pos:end="23:66"><expr pos:start="23:44" pos:end="23:66"><name pos:start="23:44" pos:end="23:48">flags</name> <operator pos:start="23:50" pos:end="23:50">|</operator> <name pos:start="23:52" pos:end="23:66">BDRV_O_AUTOGROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:19"><if pos:start="25:5" pos:end="27:19">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:19"><block_content pos:start="27:9" pos:end="27:19">

        <return pos:start="27:9" pos:end="27:19">return <expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="31:18"><if pos:start="29:5" pos:end="31:18">if <condition pos:start="29:8" pos:end="29:69">(<expr pos:start="29:9" pos:end="29:68"><call pos:start="29:9" pos:end="29:51"><name pos:start="29:9" pos:end="29:18">bdrv_pread</name><argument_list pos:start="29:19" pos:end="29:51">(<argument pos:start="29:20" pos:end="29:24"><expr pos:start="29:20" pos:end="29:24"><name pos:start="29:20" pos:end="29:24"><name pos:start="29:20" pos:end="29:20">s</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:24">hd</name></name></expr></argument>, <argument pos:start="29:27" pos:end="29:27"><expr pos:start="29:27" pos:end="29:27"><literal type="number" pos:start="29:27" pos:end="29:27">0</literal></expr></argument>, <argument pos:start="29:30" pos:end="29:35"><expr pos:start="29:30" pos:end="29:35"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:35">magic</name></expr></argument>, <argument pos:start="29:38" pos:end="29:50"><expr pos:start="29:38" pos:end="29:50"><sizeof pos:start="29:38" pos:end="29:50">sizeof<argument_list pos:start="29:44" pos:end="29:50">(<argument pos:start="29:45" pos:end="29:49"><expr pos:start="29:45" pos:end="29:49"><name pos:start="29:45" pos:end="29:49">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="29:53" pos:end="29:54">!=</operator> <sizeof pos:start="29:56" pos:end="29:68">sizeof<argument_list pos:start="29:62" pos:end="29:68">(<argument pos:start="29:63" pos:end="29:67"><expr pos:start="29:63" pos:end="29:67"><name pos:start="29:63" pos:end="29:67">magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:18"><block_content pos:start="31:9" pos:end="31:18">

        <goto pos:start="31:9" pos:end="31:18">goto <name pos:start="31:14" pos:end="31:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:9">magic</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:23">be32_to_cpu</name><argument_list pos:start="35:24" pos:end="35:30">(<argument pos:start="35:25" pos:end="35:29"><expr pos:start="35:25" pos:end="35:29"><name pos:start="35:25" pos:end="35:29">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="117:5"><if pos:start="37:5" pos:end="61:5">if <condition pos:start="37:8" pos:end="37:29">(<expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:13">magic</name> <operator pos:start="37:15" pos:end="37:16">==</operator> <name pos:start="37:18" pos:end="37:28">VMDK3_MAGIC</name></expr>)</condition> <block pos:start="37:31" pos:end="61:5">{<block_content pos:start="39:9" pos:end="59:62">

        <decl_stmt pos:start="39:9" pos:end="39:27"><decl pos:start="39:9" pos:end="39:26"><type pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:19">VMDK3Header</name></type> <name pos:start="39:21" pos:end="39:26">header</name></decl>;</decl_stmt>



        <if_stmt pos:start="43:9" pos:end="45:22"><if pos:start="43:9" pos:end="45:22">if <condition pos:start="43:12" pos:end="43:88">(<expr pos:start="43:13" pos:end="43:87"><call pos:start="43:13" pos:end="43:69"><name pos:start="43:13" pos:end="43:22">bdrv_pread</name><argument_list pos:start="43:23" pos:end="43:69">(<argument pos:start="43:24" pos:end="43:28"><expr pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:24">s</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:28">hd</name></name></expr></argument>, <argument pos:start="43:31" pos:end="43:43"><expr pos:start="43:31" pos:end="43:43"><sizeof pos:start="43:31" pos:end="43:43">sizeof<argument_list pos:start="43:37" pos:end="43:43">(<argument pos:start="43:38" pos:end="43:42"><expr pos:start="43:38" pos:end="43:42"><name pos:start="43:38" pos:end="43:42">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="43:46" pos:end="43:52"><expr pos:start="43:46" pos:end="43:52"><operator pos:start="43:46" pos:end="43:46">&amp;</operator><name pos:start="43:47" pos:end="43:52">header</name></expr></argument>, <argument pos:start="43:55" pos:end="43:68"><expr pos:start="43:55" pos:end="43:68"><sizeof pos:start="43:55" pos:end="43:68">sizeof<argument_list pos:start="43:61" pos:end="43:68">(<argument pos:start="43:62" pos:end="43:67"><expr pos:start="43:62" pos:end="43:67"><name pos:start="43:62" pos:end="43:67">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="43:71" pos:end="43:72">!=</operator> <sizeof pos:start="43:74" pos:end="43:87">sizeof<argument_list pos:start="43:80" pos:end="43:87">(<argument pos:start="43:81" pos:end="43:86"><expr pos:start="43:81" pos:end="43:86"><name pos:start="43:81" pos:end="43:86">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:22"><block_content pos:start="45:13" pos:end="45:22">

            <goto pos:start="45:13" pos:end="45:22">goto <name pos:start="45:18" pos:end="45:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:61"><expr pos:start="47:9" pos:end="47:60"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:26">cluster_sectors</name></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <call pos:start="47:30" pos:end="47:60"><name pos:start="47:30" pos:end="47:40">le32_to_cpu</name><argument_list pos:start="47:41" pos:end="47:60">(<argument pos:start="47:42" pos:end="47:59"><expr pos:start="47:42" pos:end="47:59"><name pos:start="47:42" pos:end="47:59"><name pos:start="47:42" pos:end="47:47">header</name><operator pos:start="47:48" pos:end="47:48">.</operator><name pos:start="47:49" pos:end="47:59">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:28"><expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:18">l2_size</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <literal type="number" pos:start="49:22" pos:end="49:22">1</literal> <operator pos:start="49:24" pos:end="49:25">&lt;&lt;</operator> <literal type="number" pos:start="49:27" pos:end="49:27">9</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:18">l1_size</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:22">1</literal> <operator pos:start="51:24" pos:end="51:25">&lt;&lt;</operator> <literal type="number" pos:start="51:27" pos:end="51:27">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:61"><expr pos:start="53:9" pos:end="53:60"><name pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:10">bs</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:25">total_sectors</name></name> <operator pos:start="53:27" pos:end="53:27">=</operator> <call pos:start="53:29" pos:end="53:60"><name pos:start="53:29" pos:end="53:39">le32_to_cpu</name><argument_list pos:start="53:40" pos:end="53:60">(<argument pos:start="53:41" pos:end="53:59"><expr pos:start="53:41" pos:end="53:59"><name pos:start="53:41" pos:end="53:59"><name pos:start="53:41" pos:end="53:46">header</name><operator pos:start="53:47" pos:end="53:47">.</operator><name pos:start="53:48" pos:end="53:59">disk_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:67"><expr pos:start="55:9" pos:end="55:66"><name pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:26">l1_table_offset</name></name> <operator pos:start="55:28" pos:end="55:28">=</operator> <call pos:start="55:30" pos:end="55:61"><name pos:start="55:30" pos:end="55:40">le32_to_cpu</name><argument_list pos:start="55:41" pos:end="55:61">(<argument pos:start="55:42" pos:end="55:60"><expr pos:start="55:42" pos:end="55:60"><name pos:start="55:42" pos:end="55:60"><name pos:start="55:42" pos:end="55:47">header</name><operator pos:start="55:48" pos:end="55:48">.</operator><name pos:start="55:49" pos:end="55:60">l1dir_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="55:63" pos:end="55:64">&lt;&lt;</operator> <literal type="number" pos:start="55:66" pos:end="55:66">9</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:33"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:33">l1_backup_table_offset</name></name> <operator pos:start="57:35" pos:end="57:35">=</operator> <literal type="number" pos:start="57:37" pos:end="57:37">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:62"><expr pos:start="59:9" pos:end="59:61"><name pos:start="59:9" pos:end="59:27"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:27">l1_entry_sectors</name></name> <operator pos:start="59:29" pos:end="59:29">=</operator> <name pos:start="59:31" pos:end="59:40"><name pos:start="59:31" pos:end="59:31">s</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:40">l2_size</name></name> <operator pos:start="59:42" pos:end="59:42">*</operator> <name pos:start="59:44" pos:end="59:61"><name pos:start="59:44" pos:end="59:44">s</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:61">cluster_sectors</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="113:5">else if <condition pos:start="61:15" pos:end="61:36">(<expr pos:start="61:16" pos:end="61:35"><name pos:start="61:16" pos:end="61:20">magic</name> <operator pos:start="61:22" pos:end="61:23">==</operator> <name pos:start="61:25" pos:end="61:35">VMDK4_MAGIC</name></expr>)</condition> <block pos:start="61:38" pos:end="113:5">{<block_content pos:start="63:9" pos:end="111:44">

        <decl_stmt pos:start="63:9" pos:end="63:27"><decl pos:start="63:9" pos:end="63:26"><type pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:19">VMDK4Header</name></type> <name pos:start="63:21" pos:end="63:26">header</name></decl>;</decl_stmt>



        <if_stmt pos:start="67:9" pos:end="69:22"><if pos:start="67:9" pos:end="69:22">if <condition pos:start="67:12" pos:end="67:88">(<expr pos:start="67:13" pos:end="67:87"><call pos:start="67:13" pos:end="67:69"><name pos:start="67:13" pos:end="67:22">bdrv_pread</name><argument_list pos:start="67:23" pos:end="67:69">(<argument pos:start="67:24" pos:end="67:28"><expr pos:start="67:24" pos:end="67:28"><name pos:start="67:24" pos:end="67:28"><name pos:start="67:24" pos:end="67:24">s</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:28">hd</name></name></expr></argument>, <argument pos:start="67:31" pos:end="67:43"><expr pos:start="67:31" pos:end="67:43"><sizeof pos:start="67:31" pos:end="67:43">sizeof<argument_list pos:start="67:37" pos:end="67:43">(<argument pos:start="67:38" pos:end="67:42"><expr pos:start="67:38" pos:end="67:42"><name pos:start="67:38" pos:end="67:42">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="67:46" pos:end="67:52"><expr pos:start="67:46" pos:end="67:52"><operator pos:start="67:46" pos:end="67:46">&amp;</operator><name pos:start="67:47" pos:end="67:52">header</name></expr></argument>, <argument pos:start="67:55" pos:end="67:68"><expr pos:start="67:55" pos:end="67:68"><sizeof pos:start="67:55" pos:end="67:68">sizeof<argument_list pos:start="67:61" pos:end="67:68">(<argument pos:start="67:62" pos:end="67:67"><expr pos:start="67:62" pos:end="67:67"><name pos:start="67:62" pos:end="67:67">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="67:71" pos:end="67:72">!=</operator> <sizeof pos:start="67:74" pos:end="67:87">sizeof<argument_list pos:start="67:80" pos:end="67:87">(<argument pos:start="67:81" pos:end="67:86"><expr pos:start="67:81" pos:end="67:86"><name pos:start="67:81" pos:end="67:86">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:22"><block_content pos:start="69:13" pos:end="69:22">

            <goto pos:start="69:13" pos:end="69:22">goto <name pos:start="69:18" pos:end="69:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:57"><expr pos:start="71:9" pos:end="71:56"><name pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:10">bs</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:25">total_sectors</name></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <call pos:start="71:29" pos:end="71:56"><name pos:start="71:29" pos:end="71:39">le64_to_cpu</name><argument_list pos:start="71:40" pos:end="71:56">(<argument pos:start="71:41" pos:end="71:55"><expr pos:start="71:41" pos:end="71:55"><name pos:start="71:41" pos:end="71:55"><name pos:start="71:41" pos:end="71:46">header</name><operator pos:start="71:47" pos:end="71:47">.</operator><name pos:start="71:48" pos:end="71:55">capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:61"><expr pos:start="73:9" pos:end="73:60"><name pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:26">cluster_sectors</name></name> <operator pos:start="73:28" pos:end="73:28">=</operator> <call pos:start="73:30" pos:end="73:60"><name pos:start="73:30" pos:end="73:40">le64_to_cpu</name><argument_list pos:start="73:41" pos:end="73:60">(<argument pos:start="73:42" pos:end="73:59"><expr pos:start="73:42" pos:end="73:59"><name pos:start="73:42" pos:end="73:59"><name pos:start="73:42" pos:end="73:47">header</name><operator pos:start="73:48" pos:end="73:48">.</operator><name pos:start="73:49" pos:end="73:59">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:58"><expr pos:start="75:9" pos:end="75:57"><name pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:18">l2_size</name></name> <operator pos:start="75:20" pos:end="75:20">=</operator> <call pos:start="75:22" pos:end="75:57"><name pos:start="75:22" pos:end="75:32">le32_to_cpu</name><argument_list pos:start="75:33" pos:end="75:57">(<argument pos:start="75:34" pos:end="75:56"><expr pos:start="75:34" pos:end="75:56"><name pos:start="75:34" pos:end="75:56"><name pos:start="75:34" pos:end="75:39">header</name><operator pos:start="75:40" pos:end="75:40">.</operator><name pos:start="75:41" pos:end="75:56">num_gtes_per_gte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:62"><expr pos:start="77:9" pos:end="77:61"><name pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:27">l1_entry_sectors</name></name> <operator pos:start="77:29" pos:end="77:29">=</operator> <name pos:start="77:31" pos:end="77:40"><name pos:start="77:31" pos:end="77:31">s</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:40">l2_size</name></name> <operator pos:start="77:42" pos:end="77:42">*</operator> <name pos:start="77:44" pos:end="77:61"><name pos:start="77:44" pos:end="77:44">s</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:61">cluster_sectors</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="81:22"><if pos:start="79:9" pos:end="81:22">if <condition pos:start="79:12" pos:end="79:37">(<expr pos:start="79:13" pos:end="79:36"><name pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:31">l1_entry_sectors</name></name> <operator pos:start="79:33" pos:end="79:34">&lt;=</operator> <literal type="number" pos:start="79:36" pos:end="79:36">0</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:22"><block_content pos:start="81:13" pos:end="81:22">

            <goto pos:start="81:13" pos:end="81:22">goto <name pos:start="81:18" pos:end="81:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="85:34"><expr pos:start="83:9" pos:end="85:33"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:18">l1_size</name></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <operator pos:start="83:22" pos:end="83:22">(</operator><name pos:start="83:23" pos:end="83:39"><name pos:start="83:23" pos:end="83:24">bs</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:39">total_sectors</name></name> <operator pos:start="83:41" pos:end="83:41">+</operator> <name pos:start="83:43" pos:end="83:61"><name pos:start="83:43" pos:end="83:43">s</name><operator pos:start="83:44" pos:end="83:45">-&gt;</operator><name pos:start="83:46" pos:end="83:61">l1_entry_sectors</name></name> <operator pos:start="83:63" pos:end="83:63">-</operator> <literal type="number" pos:start="83:65" pos:end="83:65">1</literal><operator pos:start="83:66" pos:end="83:66">)</operator>

            <operator pos:start="85:13" pos:end="85:13">/</operator> <name pos:start="85:15" pos:end="85:33"><name pos:start="85:15" pos:end="85:15">s</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:33">l1_entry_sectors</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:65"><expr pos:start="87:9" pos:end="87:64"><name pos:start="87:9" pos:end="87:26"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:26">l1_table_offset</name></name> <operator pos:start="87:28" pos:end="87:28">=</operator> <call pos:start="87:30" pos:end="87:59"><name pos:start="87:30" pos:end="87:40">le64_to_cpu</name><argument_list pos:start="87:41" pos:end="87:59">(<argument pos:start="87:42" pos:end="87:58"><expr pos:start="87:42" pos:end="87:58"><name pos:start="87:42" pos:end="87:58"><name pos:start="87:42" pos:end="87:47">header</name><operator pos:start="87:48" pos:end="87:48">.</operator><name pos:start="87:49" pos:end="87:58">rgd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="87:61" pos:end="87:62">&lt;&lt;</operator> <literal type="number" pos:start="87:64" pos:end="87:64">9</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:71"><expr pos:start="89:9" pos:end="89:70"><name pos:start="89:9" pos:end="89:33"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:33">l1_backup_table_offset</name></name> <operator pos:start="89:35" pos:end="89:35">=</operator> <call pos:start="89:37" pos:end="89:65"><name pos:start="89:37" pos:end="89:47">le64_to_cpu</name><argument_list pos:start="89:48" pos:end="89:65">(<argument pos:start="89:49" pos:end="89:64"><expr pos:start="89:49" pos:end="89:64"><name pos:start="89:49" pos:end="89:64"><name pos:start="89:49" pos:end="89:54">header</name><operator pos:start="89:55" pos:end="89:55">.</operator><name pos:start="89:56" pos:end="89:64">gd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="89:67" pos:end="89:68">&lt;&lt;</operator> <literal type="number" pos:start="89:70" pos:end="89:70">9</literal></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="99:29"><if pos:start="93:9" pos:end="95:29">if <condition pos:start="93:12" pos:end="93:24">(<expr pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:23">parent_open</name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:29"><block_content pos:start="95:13" pos:end="95:29">

            <expr_stmt pos:start="95:13" pos:end="95:29"><expr pos:start="95:13" pos:end="95:28"><name pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:24">is_parent</name></name> <operator pos:start="95:26" pos:end="95:26">=</operator> <literal type="number" pos:start="95:28" pos:end="95:28">1</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="97:9" pos:end="99:29">else<block type="pseudo" pos:start="99:13" pos:end="99:29"><block_content pos:start="99:13" pos:end="99:29">

            <expr_stmt pos:start="99:13" pos:end="99:29"><expr pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:24">is_parent</name></name> <operator pos:start="99:26" pos:end="99:26">=</operator> <literal type="number" pos:start="99:28" pos:end="99:28">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <comment type="line" pos:start="103:9" pos:end="103:46">// try to open parent images, if exist</comment>

        <if_stmt pos:start="105:9" pos:end="107:22"><if pos:start="105:9" pos:end="107:22">if <condition pos:start="105:12" pos:end="105:48">(<expr pos:start="105:13" pos:end="105:47"><call pos:start="105:13" pos:end="105:42"><name pos:start="105:13" pos:end="105:28">vmdk_parent_open</name><argument_list pos:start="105:29" pos:end="105:42">(<argument pos:start="105:30" pos:end="105:31"><expr pos:start="105:30" pos:end="105:31"><name pos:start="105:30" pos:end="105:31">bs</name></expr></argument>, <argument pos:start="105:34" pos:end="105:41"><expr pos:start="105:34" pos:end="105:41"><name pos:start="105:34" pos:end="105:41">filename</name></expr></argument>)</argument_list></call> <operator pos:start="105:44" pos:end="105:45">!=</operator> <literal type="number" pos:start="105:47" pos:end="105:47">0</literal></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:22"><block_content pos:start="107:13" pos:end="107:22">

            <goto pos:start="107:13" pos:end="107:22">goto <name pos:start="107:18" pos:end="107:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <comment type="line" pos:start="109:9" pos:end="109:54">// write the CID once after the image creation</comment>

        <expr_stmt pos:start="111:9" pos:end="111:44"><expr pos:start="111:9" pos:end="111:43"><name pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:21">parent_cid</name></name> <operator pos:start="111:23" pos:end="111:23">=</operator> <call pos:start="111:25" pos:end="111:43"><name pos:start="111:25" pos:end="111:37">vmdk_read_cid</name><argument_list pos:start="111:38" pos:end="111:43">(<argument pos:start="111:39" pos:end="111:40"><expr pos:start="111:39" pos:end="111:40"><name pos:start="111:39" pos:end="111:40">bs</name></expr></argument>,<argument pos:start="111:42" pos:end="111:42"><expr pos:start="111:42" pos:end="111:42"><literal type="number" pos:start="111:42" pos:end="111:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="117:5">else <block pos:start="113:12" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:18">

        <goto pos:start="115:9" pos:end="115:18">goto <name pos:start="115:14" pos:end="115:17">fail</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:27">/* read the L1 table */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:44"><expr pos:start="123:5" pos:end="123:43"><name pos:start="123:5" pos:end="123:11">l1_size</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <name pos:start="123:15" pos:end="123:24"><name pos:start="123:15" pos:end="123:15">s</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:24">l1_size</name></name> <operator pos:start="123:26" pos:end="123:26">*</operator> <sizeof pos:start="123:28" pos:end="123:43">sizeof<argument_list pos:start="123:34" pos:end="123:43">(<argument pos:start="123:35" pos:end="123:42"><expr pos:start="123:35" pos:end="123:42"><name pos:start="123:35" pos:end="123:42">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:39"><expr pos:start="125:5" pos:end="125:38"><name pos:start="125:5" pos:end="125:15"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:15">l1_table</name></name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:38"><name pos:start="125:19" pos:end="125:29">qemu_malloc</name><argument_list pos:start="125:30" pos:end="125:38">(<argument pos:start="125:31" pos:end="125:37"><expr pos:start="125:31" pos:end="125:37"><name pos:start="125:31" pos:end="125:37">l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="129:18"><if pos:start="127:5" pos:end="129:18">if <condition pos:start="127:8" pos:end="127:21">(<expr pos:start="127:9" pos:end="127:20"><operator pos:start="127:9" pos:end="127:9">!</operator><name pos:start="127:10" pos:end="127:20"><name pos:start="127:10" pos:end="127:10">s</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:20">l1_table</name></name></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:18"><block_content pos:start="129:9" pos:end="129:18">

        <goto pos:start="129:9" pos:end="129:18">goto <name pos:start="129:14" pos:end="129:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="133:18"><if pos:start="131:5" pos:end="133:18">if <condition pos:start="131:8" pos:end="131:79">(<expr pos:start="131:9" pos:end="131:78"><call pos:start="131:9" pos:end="131:67"><name pos:start="131:9" pos:end="131:18">bdrv_pread</name><argument_list pos:start="131:19" pos:end="131:67">(<argument pos:start="131:20" pos:end="131:24"><expr pos:start="131:20" pos:end="131:24"><name pos:start="131:20" pos:end="131:24"><name pos:start="131:20" pos:end="131:20">s</name><operator pos:start="131:21" pos:end="131:22">-&gt;</operator><name pos:start="131:23" pos:end="131:24">hd</name></name></expr></argument>, <argument pos:start="131:27" pos:end="131:44"><expr pos:start="131:27" pos:end="131:44"><name pos:start="131:27" pos:end="131:44"><name pos:start="131:27" pos:end="131:27">s</name><operator pos:start="131:28" pos:end="131:29">-&gt;</operator><name pos:start="131:30" pos:end="131:44">l1_table_offset</name></name></expr></argument>, <argument pos:start="131:47" pos:end="131:57"><expr pos:start="131:47" pos:end="131:57"><name pos:start="131:47" pos:end="131:57"><name pos:start="131:47" pos:end="131:47">s</name><operator pos:start="131:48" pos:end="131:49">-&gt;</operator><name pos:start="131:50" pos:end="131:57">l1_table</name></name></expr></argument>, <argument pos:start="131:60" pos:end="131:66"><expr pos:start="131:60" pos:end="131:66"><name pos:start="131:60" pos:end="131:66">l1_size</name></expr></argument>)</argument_list></call> <operator pos:start="131:69" pos:end="131:70">!=</operator> <name pos:start="131:72" pos:end="131:78">l1_size</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:18"><block_content pos:start="133:9" pos:end="133:18">

        <goto pos:start="133:9" pos:end="133:18">goto <name pos:start="133:14" pos:end="133:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <for pos:start="135:5" pos:end="139:5">for<control pos:start="135:8" pos:end="135:35">(<init pos:start="135:9" pos:end="135:14"><expr pos:start="135:9" pos:end="135:13"><name pos:start="135:9" pos:end="135:9">i</name> <operator pos:start="135:11" pos:end="135:11">=</operator> <literal type="number" pos:start="135:13" pos:end="135:13">0</literal></expr>;</init> <condition pos:start="135:16" pos:end="135:30"><expr pos:start="135:16" pos:end="135:29"><name pos:start="135:16" pos:end="135:16">i</name> <operator pos:start="135:18" pos:end="135:18">&lt;</operator> <name pos:start="135:20" pos:end="135:29"><name pos:start="135:20" pos:end="135:20">s</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:29">l1_size</name></name></expr>;</condition> <incr pos:start="135:32" pos:end="135:34"><expr pos:start="135:32" pos:end="135:34"><name pos:start="135:32" pos:end="135:32">i</name><operator pos:start="135:33" pos:end="135:34">++</operator></expr></incr>)</control> <block pos:start="135:37" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:38">

        <expr_stmt pos:start="137:9" pos:end="137:38"><expr pos:start="137:9" pos:end="137:37"><call pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:20">le32_to_cpus</name><argument_list pos:start="137:21" pos:end="137:37">(<argument pos:start="137:22" pos:end="137:36"><expr pos:start="137:22" pos:end="137:36"><operator pos:start="137:22" pos:end="137:22">&amp;</operator><name pos:start="137:23" pos:end="137:36"><name pos:start="137:23" pos:end="137:23">s</name><operator pos:start="137:24" pos:end="137:25">-&gt;</operator><name pos:start="137:26" pos:end="137:33">l1_table</name><index pos:start="137:34" pos:end="137:36">[<expr pos:start="137:35" pos:end="137:35"><name pos:start="137:35" pos:end="137:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="143:5" pos:end="161:5"><if pos:start="143:5" pos:end="161:5">if <condition pos:start="143:8" pos:end="143:34">(<expr pos:start="143:9" pos:end="143:33"><name pos:start="143:9" pos:end="143:33"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:33">l1_backup_table_offset</name></name></expr>)</condition> <block pos:start="143:36" pos:end="161:5">{<block_content pos:start="145:9" pos:end="159:9">

        <expr_stmt pos:start="145:9" pos:end="145:50"><expr pos:start="145:9" pos:end="145:49"><name pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:26">l1_backup_table</name></name> <operator pos:start="145:28" pos:end="145:28">=</operator> <call pos:start="145:30" pos:end="145:49"><name pos:start="145:30" pos:end="145:40">qemu_malloc</name><argument_list pos:start="145:41" pos:end="145:49">(<argument pos:start="145:42" pos:end="145:48"><expr pos:start="145:42" pos:end="145:48"><name pos:start="145:42" pos:end="145:48">l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="147:9" pos:end="149:22"><if pos:start="147:9" pos:end="149:22">if <condition pos:start="147:12" pos:end="147:32">(<expr pos:start="147:13" pos:end="147:31"><operator pos:start="147:13" pos:end="147:13">!</operator><name pos:start="147:14" pos:end="147:31"><name pos:start="147:14" pos:end="147:14">s</name><operator pos:start="147:15" pos:end="147:16">-&gt;</operator><name pos:start="147:17" pos:end="147:31">l1_backup_table</name></name></expr>)</condition><block type="pseudo" pos:start="149:13" pos:end="149:22"><block_content pos:start="149:13" pos:end="149:22">

            <goto pos:start="149:13" pos:end="149:22">goto <name pos:start="149:18" pos:end="149:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="151:9" pos:end="153:22"><if pos:start="151:9" pos:end="153:22">if <condition pos:start="151:12" pos:end="151:97">(<expr pos:start="151:13" pos:end="151:96"><call pos:start="151:13" pos:end="151:85"><name pos:start="151:13" pos:end="151:22">bdrv_pread</name><argument_list pos:start="151:23" pos:end="151:85">(<argument pos:start="151:24" pos:end="151:28"><expr pos:start="151:24" pos:end="151:28"><name pos:start="151:24" pos:end="151:28"><name pos:start="151:24" pos:end="151:24">s</name><operator pos:start="151:25" pos:end="151:26">-&gt;</operator><name pos:start="151:27" pos:end="151:28">hd</name></name></expr></argument>, <argument pos:start="151:31" pos:end="151:55"><expr pos:start="151:31" pos:end="151:55"><name pos:start="151:31" pos:end="151:55"><name pos:start="151:31" pos:end="151:31">s</name><operator pos:start="151:32" pos:end="151:33">-&gt;</operator><name pos:start="151:34" pos:end="151:55">l1_backup_table_offset</name></name></expr></argument>, <argument pos:start="151:58" pos:end="151:75"><expr pos:start="151:58" pos:end="151:75"><name pos:start="151:58" pos:end="151:75"><name pos:start="151:58" pos:end="151:58">s</name><operator pos:start="151:59" pos:end="151:60">-&gt;</operator><name pos:start="151:61" pos:end="151:75">l1_backup_table</name></name></expr></argument>, <argument pos:start="151:78" pos:end="151:84"><expr pos:start="151:78" pos:end="151:84"><name pos:start="151:78" pos:end="151:84">l1_size</name></expr></argument>)</argument_list></call> <operator pos:start="151:87" pos:end="151:88">!=</operator> <name pos:start="151:90" pos:end="151:96">l1_size</name></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:22"><block_content pos:start="153:13" pos:end="153:22">

            <goto pos:start="153:13" pos:end="153:22">goto <name pos:start="153:18" pos:end="153:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <for pos:start="155:9" pos:end="159:9">for<control pos:start="155:12" pos:end="155:39">(<init pos:start="155:13" pos:end="155:18"><expr pos:start="155:13" pos:end="155:17"><name pos:start="155:13" pos:end="155:13">i</name> <operator pos:start="155:15" pos:end="155:15">=</operator> <literal type="number" pos:start="155:17" pos:end="155:17">0</literal></expr>;</init> <condition pos:start="155:20" pos:end="155:34"><expr pos:start="155:20" pos:end="155:33"><name pos:start="155:20" pos:end="155:20">i</name> <operator pos:start="155:22" pos:end="155:22">&lt;</operator> <name pos:start="155:24" pos:end="155:33"><name pos:start="155:24" pos:end="155:24">s</name><operator pos:start="155:25" pos:end="155:26">-&gt;</operator><name pos:start="155:27" pos:end="155:33">l1_size</name></name></expr>;</condition> <incr pos:start="155:36" pos:end="155:38"><expr pos:start="155:36" pos:end="155:38"><name pos:start="155:36" pos:end="155:36">i</name><operator pos:start="155:37" pos:end="155:38">++</operator></expr></incr>)</control> <block pos:start="155:41" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:49">

            <expr_stmt pos:start="157:13" pos:end="157:49"><expr pos:start="157:13" pos:end="157:48"><call pos:start="157:13" pos:end="157:48"><name pos:start="157:13" pos:end="157:24">le32_to_cpus</name><argument_list pos:start="157:25" pos:end="157:48">(<argument pos:start="157:26" pos:end="157:47"><expr pos:start="157:26" pos:end="157:47"><operator pos:start="157:26" pos:end="157:26">&amp;</operator><name pos:start="157:27" pos:end="157:47"><name pos:start="157:27" pos:end="157:27">s</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:44">l1_backup_table</name><index pos:start="157:45" pos:end="157:47">[<expr pos:start="157:46" pos:end="157:46"><name pos:start="157:46" pos:end="157:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:77"><expr pos:start="165:5" pos:end="165:76"><name pos:start="165:5" pos:end="165:15"><name pos:start="165:5" pos:end="165:5">s</name><operator pos:start="165:6" pos:end="165:7">-&gt;</operator><name pos:start="165:8" pos:end="165:15">l2_cache</name></name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="165:76"><name pos:start="165:19" pos:end="165:29">qemu_malloc</name><argument_list pos:start="165:30" pos:end="165:76">(<argument pos:start="165:31" pos:end="165:75"><expr pos:start="165:31" pos:end="165:75"><name pos:start="165:31" pos:end="165:40"><name pos:start="165:31" pos:end="165:31">s</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:40">l2_size</name></name> <operator pos:start="165:42" pos:end="165:42">*</operator> <name pos:start="165:44" pos:end="165:56">L2_CACHE_SIZE</name> <operator pos:start="165:58" pos:end="165:58">*</operator> <sizeof pos:start="165:60" pos:end="165:75">sizeof<argument_list pos:start="165:66" pos:end="165:75">(<argument pos:start="165:67" pos:end="165:74"><expr pos:start="165:67" pos:end="165:74"><name pos:start="165:67" pos:end="165:74">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="169:18"><if pos:start="167:5" pos:end="169:18">if <condition pos:start="167:8" pos:end="167:21">(<expr pos:start="167:9" pos:end="167:20"><operator pos:start="167:9" pos:end="167:9">!</operator><name pos:start="167:10" pos:end="167:20"><name pos:start="167:10" pos:end="167:10">s</name><operator pos:start="167:11" pos:end="167:12">-&gt;</operator><name pos:start="167:13" pos:end="167:20">l2_cache</name></name></expr>)</condition><block type="pseudo" pos:start="169:9" pos:end="169:18"><block_content pos:start="169:9" pos:end="169:18">

        <goto pos:start="169:9" pos:end="169:18">goto <name pos:start="169:14" pos:end="169:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <return pos:start="171:5" pos:end="171:13">return <expr pos:start="171:12" pos:end="171:12"><literal type="number" pos:start="171:12" pos:end="171:12">0</literal></expr>;</return>

 <label pos:start="173:2" pos:end="173:6"><name pos:start="173:2" pos:end="173:5">fail</name>:</label>

    <expr_stmt pos:start="175:5" pos:end="175:34"><expr pos:start="175:5" pos:end="175:33"><call pos:start="175:5" pos:end="175:33"><name pos:start="175:5" pos:end="175:13">qemu_free</name><argument_list pos:start="175:14" pos:end="175:33">(<argument pos:start="175:15" pos:end="175:32"><expr pos:start="175:15" pos:end="175:32"><name pos:start="175:15" pos:end="175:32"><name pos:start="175:15" pos:end="175:15">s</name><operator pos:start="175:16" pos:end="175:17">-&gt;</operator><name pos:start="175:18" pos:end="175:32">l1_backup_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:27"><expr pos:start="177:5" pos:end="177:26"><call pos:start="177:5" pos:end="177:26"><name pos:start="177:5" pos:end="177:13">qemu_free</name><argument_list pos:start="177:14" pos:end="177:26">(<argument pos:start="177:15" pos:end="177:25"><expr pos:start="177:15" pos:end="177:25"><name pos:start="177:15" pos:end="177:25"><name pos:start="177:15" pos:end="177:15">s</name><operator pos:start="177:16" pos:end="177:17">-&gt;</operator><name pos:start="177:18" pos:end="177:25">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:27"><expr pos:start="179:5" pos:end="179:26"><call pos:start="179:5" pos:end="179:26"><name pos:start="179:5" pos:end="179:13">qemu_free</name><argument_list pos:start="179:14" pos:end="179:26">(<argument pos:start="179:15" pos:end="179:25"><expr pos:start="179:15" pos:end="179:25"><name pos:start="179:15" pos:end="179:25"><name pos:start="179:15" pos:end="179:15">s</name><operator pos:start="179:16" pos:end="179:17">-&gt;</operator><name pos:start="179:18" pos:end="179:25">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:23"><expr pos:start="181:5" pos:end="181:22"><call pos:start="181:5" pos:end="181:22"><name pos:start="181:5" pos:end="181:15">bdrv_delete</name><argument_list pos:start="181:16" pos:end="181:22">(<argument pos:start="181:17" pos:end="181:21"><expr pos:start="181:17" pos:end="181:21"><name pos:start="181:17" pos:end="181:21"><name pos:start="181:17" pos:end="181:17">s</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:21">hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="183:5" pos:end="183:14">return <expr pos:start="183:12" pos:end="183:13"><operator pos:start="183:12" pos:end="183:12">-</operator><literal type="number" pos:start="183:13" pos:end="183:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
