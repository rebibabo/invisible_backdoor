<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2221.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:33">decode_subframe</name><parameter_list pos:start="1:34" pos:end="1:62">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:45">FLACContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:61">channel</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">int32_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:20">decoded</name> <init pos:start="5:22" pos:end="5:42">= <expr pos:start="5:24" pos:end="5:42"><name pos:start="5:24" pos:end="5:42"><name pos:start="5:24" pos:end="5:24">s</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:33">decoded</name><index pos:start="5:34" pos:end="5:42">[<expr pos:start="5:35" pos:end="5:41"><name pos:start="5:35" pos:end="5:41">channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">type</name></decl>, <decl pos:start="7:15" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:20">wasted</name> <init pos:start="7:22" pos:end="7:24">= <expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">bps</name> <init pos:start="9:13" pos:end="9:37">= <expr pos:start="9:15" pos:end="9:37"><name pos:start="9:15" pos:end="9:37"><name pos:start="9:15" pos:end="9:15">s</name><operator pos:start="9:16" pos:end="9:17">-&gt;</operator><name pos:start="9:18" pos:end="9:33">flac_stream_info</name><operator pos:start="9:34" pos:end="9:34">.</operator><name pos:start="9:35" pos:end="9:37">bps</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">tmp</name></decl>, <decl pos:start="11:17" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:19">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:21">(<expr pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:15">channel</name> <operator pos:start="15:17" pos:end="15:18">==</operator> <literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr>)</condition> <block pos:start="15:23" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <if_stmt pos:start="17:9" pos:end="19:18"><if pos:start="17:9" pos:end="19:18">if <condition pos:start="17:12" pos:end="17:49">(<expr pos:start="17:13" pos:end="17:48"><name pos:start="17:13" pos:end="17:22"><name pos:start="17:13" pos:end="17:13">s</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:22">ch_mode</name></name> <operator pos:start="17:24" pos:end="17:25">==</operator> <name pos:start="17:27" pos:end="17:48">FLAC_CHMODE_RIGHT_SIDE</name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:18"><block_content pos:start="19:13" pos:end="19:18">

            <expr_stmt pos:start="19:13" pos:end="19:18"><expr pos:start="19:13" pos:end="19:17"><name pos:start="19:13" pos:end="19:15">bps</name><operator pos:start="19:16" pos:end="19:17">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="27:5">else <block pos:start="21:12" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <if_stmt pos:start="23:9" pos:end="25:18"><if pos:start="23:9" pos:end="25:18">if <condition pos:start="23:12" pos:end="23:86">(<expr pos:start="23:13" pos:end="23:85"><name pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:22">ch_mode</name></name> <operator pos:start="23:24" pos:end="23:25">==</operator> <name pos:start="23:27" pos:end="23:47">FLAC_CHMODE_LEFT_SIDE</name> <operator pos:start="23:49" pos:end="23:50">||</operator> <name pos:start="23:52" pos:end="23:61"><name pos:start="23:52" pos:end="23:52">s</name><operator pos:start="23:53" pos:end="23:54">-&gt;</operator><name pos:start="23:55" pos:end="23:61">ch_mode</name></name> <operator pos:start="23:63" pos:end="23:64">==</operator> <name pos:start="23:66" pos:end="23:85">FLAC_CHMODE_MID_SIDE</name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:18"><block_content pos:start="25:13" pos:end="25:18">

            <expr_stmt pos:start="25:13" pos:end="25:18"><expr pos:start="25:13" pos:end="25:17"><name pos:start="25:13" pos:end="25:15">bps</name><operator pos:start="25:16" pos:end="25:17">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:26">(<expr pos:start="31:9" pos:end="31:25"><call pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:17">get_bits1</name><argument_list pos:start="31:18" pos:end="31:25">(<argument pos:start="31:19" pos:end="31:24"><expr pos:start="31:19" pos:end="31:24"><operator pos:start="31:19" pos:end="31:19">&amp;</operator><name pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:20">s</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:28" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:35">

        <expr_stmt pos:start="33:9" pos:end="33:69"><expr pos:start="33:9" pos:end="33:68"><call pos:start="33:9" pos:end="33:68"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:68">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:23">avctx</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:37"><expr pos:start="33:26" pos:end="33:37"><name pos:start="33:26" pos:end="33:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:40" pos:end="33:67"><expr pos:start="33:40" pos:end="33:67"><literal type="string" pos:start="33:40" pos:end="33:67">"invalid subframe padding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:8">type</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:30"><name pos:start="39:12" pos:end="39:19">get_bits</name><argument_list pos:start="39:20" pos:end="39:30">(<argument pos:start="39:21" pos:end="39:26"><expr pos:start="39:21" pos:end="39:26"><operator pos:start="39:21" pos:end="39:21">&amp;</operator><name pos:start="39:22" pos:end="39:26"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:26">gb</name></name></expr></argument>, <argument pos:start="39:29" pos:end="39:29"><expr pos:start="39:29" pos:end="39:29"><literal type="number" pos:start="39:29" pos:end="39:29">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="67:5"><if pos:start="43:5" pos:end="67:5">if <condition pos:start="43:8" pos:end="43:26">(<expr pos:start="43:9" pos:end="43:25"><call pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:17">get_bits1</name><argument_list pos:start="43:18" pos:end="43:25">(<argument pos:start="43:19" pos:end="43:24"><expr pos:start="43:19" pos:end="43:24"><operator pos:start="43:19" pos:end="43:19">&amp;</operator><name pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:20">s</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:28" pos:end="67:5">{<block_content pos:start="45:9" pos:end="65:22">

        <decl_stmt pos:start="45:9" pos:end="45:41"><decl pos:start="45:9" pos:end="45:40"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:16">left</name> <init pos:start="45:18" pos:end="45:40">= <expr pos:start="45:20" pos:end="45:40"><call pos:start="45:20" pos:end="45:40"><name pos:start="45:20" pos:end="45:32">get_bits_left</name><argument_list pos:start="45:33" pos:end="45:40">(<argument pos:start="45:34" pos:end="45:39"><expr pos:start="45:34" pos:end="45:39"><operator pos:start="45:34" pos:end="45:34">&amp;</operator><name pos:start="45:35" pos:end="45:39"><name pos:start="45:35" pos:end="45:35">s</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:39">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="47:9" pos:end="61:9"><if pos:start="47:9" pos:end="61:9">if <condition pos:start="47:12" pos:end="51:56">( <expr pos:start="47:14" pos:end="51:55"><name pos:start="47:14" pos:end="47:17">left</name> <operator pos:start="47:19" pos:end="47:20">&lt;=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal> <operator pos:start="47:24" pos:end="47:25">||</operator>

            <operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:17">left</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <name pos:start="49:21" pos:end="49:23">bps</name> <operator pos:start="49:25" pos:end="49:26">&amp;&amp;</operator> <operator pos:start="49:28" pos:end="49:28">!</operator><call pos:start="49:29" pos:end="49:56"><name pos:start="49:29" pos:end="49:42">show_bits_long</name><argument_list pos:start="49:43" pos:end="49:56">(<argument pos:start="49:44" pos:end="49:49"><expr pos:start="49:44" pos:end="49:49"><operator pos:start="49:44" pos:end="49:44">&amp;</operator><name pos:start="49:45" pos:end="49:49"><name pos:start="49:45" pos:end="49:45">s</name><operator pos:start="49:46" pos:end="49:47">-&gt;</operator><name pos:start="49:48" pos:end="49:49">gb</name></name></expr></argument>, <argument pos:start="49:52" pos:end="49:55"><expr pos:start="49:52" pos:end="49:55"><name pos:start="49:52" pos:end="49:55">left</name></expr></argument>)</argument_list></call><operator pos:start="49:57" pos:end="49:57">)</operator> <operator pos:start="49:59" pos:end="49:60">||</operator>

                           <operator pos:start="51:28" pos:end="51:28">!</operator><call pos:start="51:29" pos:end="51:55"><name pos:start="51:29" pos:end="51:42">show_bits_long</name><argument_list pos:start="51:43" pos:end="51:55">(<argument pos:start="51:44" pos:end="51:49"><expr pos:start="51:44" pos:end="51:49"><operator pos:start="51:44" pos:end="51:44">&amp;</operator><name pos:start="51:45" pos:end="51:49"><name pos:start="51:45" pos:end="51:45">s</name><operator pos:start="51:46" pos:end="51:47">-&gt;</operator><name pos:start="51:48" pos:end="51:49">gb</name></name></expr></argument>, <argument pos:start="51:52" pos:end="51:54"><expr pos:start="51:52" pos:end="51:54"><name pos:start="51:52" pos:end="51:54">bps</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:58" pos:end="61:9">{<block_content pos:start="53:13" pos:end="59:39">

            <expr_stmt pos:start="53:13" pos:end="57:30"><expr pos:start="53:13" pos:end="57:29"><call pos:start="53:13" pos:end="57:29"><name pos:start="53:13" pos:end="53:18">av_log</name><argument_list pos:start="53:19" pos:end="57:29">(<argument pos:start="53:20" pos:end="53:27"><expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:27">avctx</name></name></expr></argument>, <argument pos:start="53:30" pos:end="53:41"><expr pos:start="53:30" pos:end="53:41"><name pos:start="53:30" pos:end="53:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="55:20" pos:end="55:84"><expr pos:start="55:20" pos:end="55:84"><literal type="string" pos:start="55:20" pos:end="55:84">"Invalid number of wasted bits &gt; available bits (%d) - left=%d\n"</literal></expr></argument>,

                   <argument pos:start="57:20" pos:end="57:22"><expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">bps</name></expr></argument>, <argument pos:start="57:25" pos:end="57:28"><expr pos:start="57:25" pos:end="57:28"><name pos:start="57:25" pos:end="57:28">left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:39">return <expr pos:start="59:20" pos:end="59:38"><name pos:start="59:20" pos:end="59:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:65"><expr pos:start="63:9" pos:end="63:64"><name pos:start="63:9" pos:end="63:14">wasted</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:20">1</literal> <operator pos:start="63:20" pos:end="63:20">+</operator> <call pos:start="63:22" pos:end="63:64"><name pos:start="63:22" pos:end="63:30">get_unary</name><argument_list pos:start="63:31" pos:end="63:64">(<argument pos:start="63:32" pos:end="63:37"><expr pos:start="63:32" pos:end="63:37"><operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:37"><name pos:start="63:33" pos:end="63:33">s</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:37">gb</name></name></expr></argument>, <argument pos:start="63:40" pos:end="63:40"><expr pos:start="63:40" pos:end="63:40"><literal type="number" pos:start="63:40" pos:end="63:40">1</literal></expr></argument>, <argument pos:start="63:43" pos:end="63:63"><expr pos:start="63:43" pos:end="63:63"><call pos:start="63:43" pos:end="63:63"><name pos:start="63:43" pos:end="63:55">get_bits_left</name><argument_list pos:start="63:56" pos:end="63:63">(<argument pos:start="63:57" pos:end="63:62"><expr pos:start="63:57" pos:end="63:62"><operator pos:start="63:57" pos:end="63:57">&amp;</operator><name pos:start="63:58" pos:end="63:62"><name pos:start="63:58" pos:end="63:58">s</name><operator pos:start="63:59" pos:end="63:60">-&gt;</operator><name pos:start="63:61" pos:end="63:62">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">bps</name> <operator pos:start="65:13" pos:end="65:14">-=</operator> <name pos:start="65:16" pos:end="65:21">wasted</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:17">(<expr pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:11">bps</name> <operator pos:start="69:13" pos:end="69:13">&gt;</operator> <literal type="number" pos:start="69:15" pos:end="69:16">32</literal></expr>)</condition> <block pos:start="69:19" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:36">

        <expr_stmt pos:start="71:9" pos:end="71:79"><expr pos:start="71:9" pos:end="71:78"><call pos:start="71:9" pos:end="71:78"><name pos:start="71:9" pos:end="71:37">avpriv_report_missing_feature</name><argument_list pos:start="71:38" pos:end="71:78">(<argument pos:start="71:39" pos:end="71:46"><expr pos:start="71:39" pos:end="71:46"><name pos:start="71:39" pos:end="71:46"><name pos:start="71:39" pos:end="71:39">s</name><operator pos:start="71:40" pos:end="71:41">-&gt;</operator><name pos:start="71:42" pos:end="71:46">avctx</name></name></expr></argument>, <argument pos:start="71:49" pos:end="71:77"><expr pos:start="71:49" pos:end="71:77"><literal type="string" pos:start="71:49" pos:end="71:77">"Decorrelated bit depth &gt; 32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:36">return <expr pos:start="73:16" pos:end="73:35"><name pos:start="73:16" pos:end="73:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="79:1" pos:end="79:29">//FIXME use av_log2 for types</comment>

    <if_stmt pos:start="81:5" pos:end="113:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:18">(<expr pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:12">type</name> <operator pos:start="81:14" pos:end="81:15">==</operator> <literal type="number" pos:start="81:17" pos:end="81:17">0</literal></expr>)</condition> <block pos:start="81:20" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:29">

        <expr_stmt pos:start="83:9" pos:end="83:42"><expr pos:start="83:9" pos:end="83:41"><name pos:start="83:9" pos:end="83:11">tmp</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:41"><name pos:start="83:15" pos:end="83:28">get_sbits_long</name><argument_list pos:start="83:29" pos:end="83:41">(<argument pos:start="83:30" pos:end="83:35"><expr pos:start="83:30" pos:end="83:35"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:35"><name pos:start="83:31" pos:end="83:31">s</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:35">gb</name></name></expr></argument>, <argument pos:start="83:38" pos:end="83:40"><expr pos:start="83:38" pos:end="83:40"><name pos:start="83:38" pos:end="83:40">bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="85:9" pos:end="87:29">for <control pos:start="85:13" pos:end="85:42">(<init pos:start="85:14" pos:end="85:19"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:14">i</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</init> <condition pos:start="85:21" pos:end="85:37"><expr pos:start="85:21" pos:end="85:36"><name pos:start="85:21" pos:end="85:21">i</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <name pos:start="85:25" pos:end="85:36"><name pos:start="85:25" pos:end="85:25">s</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:36">blocksize</name></name></expr>;</condition> <incr pos:start="85:39" pos:end="85:41"><expr pos:start="85:39" pos:end="85:41"><name pos:start="85:39" pos:end="85:39">i</name><operator pos:start="85:40" pos:end="85:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="87:13" pos:end="87:29"><block_content pos:start="87:13" pos:end="87:29">

            <expr_stmt pos:start="87:13" pos:end="87:29"><expr pos:start="87:13" pos:end="87:28"><name pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:19">decoded</name><index pos:start="87:20" pos:end="87:22">[<expr pos:start="87:21" pos:end="87:21"><name pos:start="87:21" pos:end="87:21">i</name></expr>]</index></name> <operator pos:start="87:24" pos:end="87:24">=</operator> <name pos:start="87:26" pos:end="87:28">tmp</name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="89:7" pos:end="95:5">else if <condition pos:start="89:15" pos:end="89:25">(<expr pos:start="89:16" pos:end="89:24"><name pos:start="89:16" pos:end="89:19">type</name> <operator pos:start="89:21" pos:end="89:22">==</operator> <literal type="number" pos:start="89:24" pos:end="89:24">1</literal></expr>)</condition> <block pos:start="89:27" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:53">

        <for pos:start="91:9" pos:end="93:53">for <control pos:start="91:13" pos:end="91:42">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">i</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:37"><expr pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:21">i</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <name pos:start="91:25" pos:end="91:36"><name pos:start="91:25" pos:end="91:25">s</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:36">blocksize</name></name></expr>;</condition> <incr pos:start="91:39" pos:end="91:41"><expr pos:start="91:39" pos:end="91:41"><name pos:start="91:39" pos:end="91:39">i</name><operator pos:start="91:40" pos:end="91:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:13" pos:end="93:53"><block_content pos:start="93:13" pos:end="93:53">

            <expr_stmt pos:start="93:13" pos:end="93:53"><expr pos:start="93:13" pos:end="93:52"><name pos:start="93:13" pos:end="93:22"><name pos:start="93:13" pos:end="93:19">decoded</name><index pos:start="93:20" pos:end="93:22">[<expr pos:start="93:21" pos:end="93:21"><name pos:start="93:21" pos:end="93:21">i</name></expr>]</index></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <call pos:start="93:26" pos:end="93:52"><name pos:start="93:26" pos:end="93:39">get_sbits_long</name><argument_list pos:start="93:40" pos:end="93:52">(<argument pos:start="93:41" pos:end="93:46"><expr pos:start="93:41" pos:end="93:46"><operator pos:start="93:41" pos:end="93:41">&amp;</operator><name pos:start="93:42" pos:end="93:46"><name pos:start="93:42" pos:end="93:42">s</name><operator pos:start="93:43" pos:end="93:44">-&gt;</operator><name pos:start="93:45" pos:end="93:46">gb</name></name></expr></argument>, <argument pos:start="93:49" pos:end="93:51"><expr pos:start="93:49" pos:end="93:51"><name pos:start="93:49" pos:end="93:51">bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="101:5">else if <condition pos:start="95:15" pos:end="95:43">(<expr pos:start="95:16" pos:end="95:42"><operator pos:start="95:16" pos:end="95:16">(</operator><name pos:start="95:17" pos:end="95:20">type</name> <operator pos:start="95:22" pos:end="95:23">&gt;=</operator> <literal type="number" pos:start="95:25" pos:end="95:25">8</literal><operator pos:start="95:26" pos:end="95:26">)</operator> <operator pos:start="95:28" pos:end="95:29">&amp;&amp;</operator> <operator pos:start="95:31" pos:end="95:31">(</operator><name pos:start="95:32" pos:end="95:35">type</name> <operator pos:start="95:37" pos:end="95:38">&lt;=</operator> <literal type="number" pos:start="95:40" pos:end="95:41">12</literal><operator pos:start="95:42" pos:end="95:42">)</operator></expr>)</condition> <block pos:start="95:45" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:23">

        <if_stmt pos:start="97:9" pos:end="99:23"><if pos:start="97:9" pos:end="99:23">if <condition pos:start="97:12" pos:end="97:76">(<expr pos:start="97:13" pos:end="97:75"><operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:16">ret</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:70"><name pos:start="97:20" pos:end="97:40">decode_subframe_fixed</name><argument_list pos:start="97:41" pos:end="97:70">(<argument pos:start="97:42" pos:end="97:42"><expr pos:start="97:42" pos:end="97:42"><name pos:start="97:42" pos:end="97:42">s</name></expr></argument>, <argument pos:start="97:45" pos:end="97:51"><expr pos:start="97:45" pos:end="97:51"><name pos:start="97:45" pos:end="97:51">decoded</name></expr></argument>, <argument pos:start="97:54" pos:end="97:64"><expr pos:start="97:54" pos:end="97:64"><name pos:start="97:54" pos:end="97:57">type</name> <operator pos:start="97:59" pos:end="97:59">&amp;</operator> <operator pos:start="97:61" pos:end="97:61">~</operator><literal type="number" pos:start="97:62" pos:end="97:64">0x8</literal></expr></argument>, <argument pos:start="97:67" pos:end="97:69"><expr pos:start="97:67" pos:end="97:69"><name pos:start="97:67" pos:end="97:69">bps</name></expr></argument>)</argument_list></call><operator pos:start="97:71" pos:end="97:71">)</operator> <operator pos:start="97:73" pos:end="97:73">&lt;</operator> <literal type="number" pos:start="97:75" pos:end="97:75">0</literal></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:23"><block_content pos:start="99:13" pos:end="99:23">

            <return pos:start="99:13" pos:end="99:23">return <expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="101:7" pos:end="107:5">else if <condition pos:start="101:15" pos:end="101:26">(<expr pos:start="101:16" pos:end="101:25"><name pos:start="101:16" pos:end="101:19">type</name> <operator pos:start="101:21" pos:end="101:22">&gt;=</operator> <literal type="number" pos:start="101:24" pos:end="101:25">32</literal></expr>)</condition> <block pos:start="101:28" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:23">

        <if_stmt pos:start="103:9" pos:end="105:23"><if pos:start="103:9" pos:end="105:23">if <condition pos:start="103:12" pos:end="103:79">(<expr pos:start="103:13" pos:end="103:78"><operator pos:start="103:13" pos:end="103:13">(</operator><name pos:start="103:14" pos:end="103:16">ret</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:73"><name pos:start="103:20" pos:end="103:38">decode_subframe_lpc</name><argument_list pos:start="103:39" pos:end="103:73">(<argument pos:start="103:40" pos:end="103:40"><expr pos:start="103:40" pos:end="103:40"><name pos:start="103:40" pos:end="103:40">s</name></expr></argument>, <argument pos:start="103:43" pos:end="103:49"><expr pos:start="103:43" pos:end="103:49"><name pos:start="103:43" pos:end="103:49">decoded</name></expr></argument>, <argument pos:start="103:52" pos:end="103:67"><expr pos:start="103:52" pos:end="103:67"><operator pos:start="103:52" pos:end="103:52">(</operator><name pos:start="103:53" pos:end="103:56">type</name> <operator pos:start="103:58" pos:end="103:58">&amp;</operator> <operator pos:start="103:60" pos:end="103:60">~</operator><literal type="number" pos:start="103:61" pos:end="103:64">0x20</literal><operator pos:start="103:65" pos:end="103:65">)</operator><operator pos:start="103:66" pos:end="103:66">+</operator><literal type="number" pos:start="103:67" pos:end="103:67">1</literal></expr></argument>, <argument pos:start="103:70" pos:end="103:72"><expr pos:start="103:70" pos:end="103:72"><name pos:start="103:70" pos:end="103:72">bps</name></expr></argument>)</argument_list></call><operator pos:start="103:74" pos:end="103:74">)</operator> <operator pos:start="103:76" pos:end="103:76">&lt;</operator> <literal type="number" pos:start="103:78" pos:end="103:78">0</literal></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:23"><block_content pos:start="105:13" pos:end="105:23">

            <return pos:start="105:13" pos:end="105:23">return <expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="113:5">else <block pos:start="107:12" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:35">

        <expr_stmt pos:start="109:9" pos:end="109:64"><expr pos:start="109:9" pos:end="109:63"><call pos:start="109:9" pos:end="109:63"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="109:63">(<argument pos:start="109:16" pos:end="109:23"><expr pos:start="109:16" pos:end="109:23"><name pos:start="109:16" pos:end="109:23"><name pos:start="109:16" pos:end="109:16">s</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:23">avctx</name></name></expr></argument>, <argument pos:start="109:26" pos:end="109:37"><expr pos:start="109:26" pos:end="109:37"><name pos:start="109:26" pos:end="109:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:40" pos:end="109:62"><expr pos:start="109:40" pos:end="109:62"><literal type="string" pos:start="109:40" pos:end="109:62">"invalid coding type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:35">return <expr pos:start="111:16" pos:end="111:34"><name pos:start="111:16" pos:end="111:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="125:5">if <condition pos:start="117:8" pos:end="117:15">(<expr pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:14">wasted</name></expr>)</condition> <block pos:start="117:17" pos:end="125:5">{<block_content pos:start="119:9" pos:end="123:34">

        <decl_stmt pos:start="119:9" pos:end="119:14"><decl pos:start="119:9" pos:end="119:13"><type pos:start="119:9" pos:end="119:11"><name pos:start="119:9" pos:end="119:11">int</name></type> <name pos:start="119:13" pos:end="119:13">i</name></decl>;</decl_stmt>

        <for pos:start="121:9" pos:end="123:34">for <control pos:start="121:13" pos:end="121:42">(<init pos:start="121:14" pos:end="121:19"><expr pos:start="121:14" pos:end="121:18"><name pos:start="121:14" pos:end="121:14">i</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <literal type="number" pos:start="121:18" pos:end="121:18">0</literal></expr>;</init> <condition pos:start="121:21" pos:end="121:37"><expr pos:start="121:21" pos:end="121:36"><name pos:start="121:21" pos:end="121:21">i</name> <operator pos:start="121:23" pos:end="121:23">&lt;</operator> <name pos:start="121:25" pos:end="121:36"><name pos:start="121:25" pos:end="121:25">s</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:36">blocksize</name></name></expr>;</condition> <incr pos:start="121:39" pos:end="121:41"><expr pos:start="121:39" pos:end="121:41"><name pos:start="121:39" pos:end="121:39">i</name><operator pos:start="121:40" pos:end="121:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:13" pos:end="123:34"><block_content pos:start="123:13" pos:end="123:34">

            <expr_stmt pos:start="123:13" pos:end="123:34"><expr pos:start="123:13" pos:end="123:33"><name pos:start="123:13" pos:end="123:22"><name pos:start="123:13" pos:end="123:19">decoded</name><index pos:start="123:20" pos:end="123:22">[<expr pos:start="123:21" pos:end="123:21"><name pos:start="123:21" pos:end="123:21">i</name></expr>]</index></name> <operator pos:start="123:24" pos:end="123:26">&lt;&lt;=</operator> <name pos:start="123:28" pos:end="123:33">wasted</name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
